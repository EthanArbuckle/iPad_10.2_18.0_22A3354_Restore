WTF *WebCore::createMediaConstraints@<X0>(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v5;
  __int128 v6;
  char v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF *result;
  WTF::StringImpl *v37;
  unsigned int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF **v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  char v57;
  char v58;
  _OWORD v59[2];
  unsigned __int8 v60;
  char v61;
  _OWORD v62[2];
  unsigned __int8 v63;
  char v64;
  _OWORD v65[2];
  unsigned __int8 v66;
  char v67;
  _BYTE v68[29];
  unsigned __int8 v69;
  char v70;
  __int128 v71;
  __int128 v72;
  _OWORD v73[2];
  unsigned __int8 v74;
  char v75;
  __int128 v76;
  __int128 v77;
  _OWORD v78[2];
  unsigned __int8 v79;
  char v80;
  __int128 v81;
  __int128 v82;
  _OWORD v83[2];
  unsigned __int8 v84;
  char v85;
  int v86;
  unsigned __int8 v87;
  char v88;
  int v89;
  unsigned __int8 v90;
  char v91;
  int v92;
  unsigned __int8 v93;
  _BYTE v94[16];
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 v99;
  _BYTE v100[16];
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unsigned __int8 v105;
  _BYTE v106[16];
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 v111;
  _BYTE v112[16];
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unsigned __int8 v117;
  char v118;
  __int128 v119;
  __int128 v120;
  _OWORD v121[2];
  unsigned __int8 v122;
  char v123;
  int v124;
  unsigned __int8 v125;
  char v126;
  int v127;
  unsigned __int8 v128;
  char v129;
  int v130;
  unsigned __int8 v131;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 104) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 160) = 0;
  *(_BYTE *)(a2 + 168) = 0;
  *(_BYTE *)(a2 + 216) = 0;
  *(_BYTE *)(a2 + 224) = 0;
  *(_BYTE *)(a2 + 304) = 0;
  *(_BYTE *)(a2 + 312) = 0;
  *(_BYTE *)(a2 + 392) = 0;
  *(_BYTE *)(a2 + 400) = 0;
  *(_BYTE *)(a2 + 480) = 0;
  *(_BYTE *)(a2 + 488) = 0;
  *(_BYTE *)(a2 + 504) = 0;
  *(_BYTE *)(a2 + 512) = 0;
  *(_BYTE *)(a2 + 528) = 0;
  *(_BYTE *)(a2 + 536) = 0;
  *(_BYTE *)(a2 + 552) = 0;
  *(_BYTE *)(a2 + 560) = 0;
  *(_BYTE *)(a2 + 608) = 0;
  *(_BYTE *)(a2 + 616) = 0;
  *(_BYTE *)(a2 + 664) = 0;
  *(_BYTE *)(a2 + 672) = 0;
  *(_BYTE *)(a2 + 720) = 0;
  *(_BYTE *)(a2 + 728) = 0;
  *(_BYTE *)(a2 + 776) = 0;
  *(_BYTE *)(a2 + 784) = 0;
  *(_BYTE *)(a2 + 864) = 0;
  *(_BYTE *)(a2 + 872) = 0;
  *(_BYTE *)(a2 + 888) = 0;
  *(_BYTE *)(a2 + 896) = 0;
  *(_BYTE *)(a2 + 912) = 0;
  *(_BYTE *)(a2 + 920) = 0;
  *(_BYTE *)(a2 + 936) = 0;
  *(_BYTE *)(a2 + 960) = 0;
  *(_OWORD *)(a2 + 944) = 0u;
  WebCore::convertToInternalForm((WTF *)&v57, 0, (uint64_t)this);
  if (*(unsigned __int8 *)(a2 + 48) == v60)
  {
    if (*(_BYTE *)(a2 + 48))
    {
      *(_BYTE *)(a2 + 8) = v58;
      *(_OWORD *)(a2 + 12) = v59[0];
      *(_OWORD *)(a2 + 25) = *(_OWORD *)((char *)v59 + 13);
    }
  }
  else if (*(_BYTE *)(a2 + 48))
  {
    *(_BYTE *)(a2 + 48) = 0;
  }
  else
  {
    *(_BYTE *)(a2 + 8) = v58;
    *(_OWORD *)(a2 + 12) = v59[0];
    *(_OWORD *)(a2 + 25) = *(_OWORD *)((char *)v59 + 13);
    *(_QWORD *)a2 = &off_1E335FF28;
    *(_BYTE *)(a2 + 48) = 1;
  }
  if (*(unsigned __int8 *)(a2 + 104) == v63)
  {
    if (*(_BYTE *)(a2 + 104))
    {
      *(_BYTE *)(a2 + 64) = v61;
      *(_OWORD *)(a2 + 68) = v62[0];
      *(_OWORD *)(a2 + 81) = *(_OWORD *)((char *)v62 + 13);
    }
  }
  else if (*(_BYTE *)(a2 + 104))
  {
    *(_BYTE *)(a2 + 104) = 0;
  }
  else
  {
    *(_BYTE *)(a2 + 64) = v61;
    *(_OWORD *)(a2 + 68) = v62[0];
    *(_OWORD *)(a2 + 81) = *(_OWORD *)((char *)v62 + 13);
    *(_QWORD *)(a2 + 56) = &off_1E335FF28;
    *(_BYTE *)(a2 + 104) = 1;
  }
  if (*(unsigned __int8 *)(a2 + 160) == v66)
  {
    if (*(_BYTE *)(a2 + 160))
    {
      *(_BYTE *)(a2 + 120) = v64;
      *(_OWORD *)(a2 + 124) = v65[0];
      *(_OWORD *)(a2 + 137) = *(_OWORD *)((char *)v65 + 13);
    }
  }
  else if (*(_BYTE *)(a2 + 160))
  {
    *(_BYTE *)(a2 + 160) = 0;
  }
  else
  {
    *(_BYTE *)(a2 + 120) = v64;
    *(_OWORD *)(a2 + 124) = v65[0];
    *(_OWORD *)(a2 + 137) = *(_OWORD *)((char *)v65 + 13);
    *(_QWORD *)(a2 + 112) = &off_1E335FF28;
    *(_BYTE *)(a2 + 160) = 1;
  }
  if (*(unsigned __int8 *)(a2 + 216) == v69)
  {
    if (*(_BYTE *)(a2 + 216))
    {
      *(_BYTE *)(a2 + 176) = v67;
      *(_OWORD *)(a2 + 180) = *(_OWORD *)v68;
      *(_OWORD *)(a2 + 193) = *(_OWORD *)&v68[13];
    }
  }
  else if (*(_BYTE *)(a2 + 216))
  {
    *(_BYTE *)(a2 + 216) = 0;
  }
  else
  {
    *(_BYTE *)(a2 + 176) = v67;
    *(_OWORD *)(a2 + 180) = *(_OWORD *)v68;
    *(_OWORD *)(a2 + 193) = *(_OWORD *)&v68[13];
    *(_QWORD *)(a2 + 168) = &off_1E335FF28;
    *(_BYTE *)(a2 + 216) = 1;
  }
  if (*(unsigned __int8 *)(a2 + 304) == v74)
  {
    if (*(_BYTE *)(a2 + 304))
    {
      *(_BYTE *)(a2 + 232) = v70;
      v6 = v72;
      *(_OWORD *)(a2 + 240) = v71;
      *(_OWORD *)(a2 + 256) = v6;
      *(_OWORD *)(a2 + 272) = v73[0];
      *(_OWORD *)(a2 + 281) = *(_OWORD *)((char *)v73 + 9);
    }
  }
  else if (*(_BYTE *)(a2 + 304))
  {
    *(_BYTE *)(a2 + 304) = 0;
  }
  else
  {
    v7 = v70;
    *(_QWORD *)(a2 + 224) = &off_1E335FF50;
    *(_BYTE *)(a2 + 232) = v7;
    v8 = v72;
    *(_OWORD *)(a2 + 240) = v71;
    *(_OWORD *)(a2 + 256) = v8;
    *(_OWORD *)(a2 + 272) = v73[0];
    *(_OWORD *)(a2 + 281) = *(_OWORD *)((char *)v73 + 9);
    *(_BYTE *)(a2 + 304) = 1;
  }
  if (*(unsigned __int8 *)(a2 + 392) == v79)
  {
    if (*(_BYTE *)(a2 + 392))
    {
      *(_BYTE *)(a2 + 320) = v75;
      v9 = v77;
      *(_OWORD *)(a2 + 328) = v76;
      *(_OWORD *)(a2 + 344) = v9;
      *(_OWORD *)(a2 + 360) = v78[0];
      *(_OWORD *)(a2 + 369) = *(_OWORD *)((char *)v78 + 9);
    }
  }
  else if (*(_BYTE *)(a2 + 392))
  {
    *(_BYTE *)(a2 + 392) = 0;
  }
  else
  {
    *(_BYTE *)(a2 + 320) = v75;
    v10 = v77;
    *(_OWORD *)(a2 + 328) = v76;
    *(_OWORD *)(a2 + 344) = v10;
    *(_OWORD *)(a2 + 360) = v78[0];
    *(_OWORD *)(a2 + 369) = *(_OWORD *)((char *)v78 + 9);
    *(_QWORD *)(a2 + 312) = &off_1E335FF50;
    *(_BYTE *)(a2 + 392) = 1;
  }
  if (*(unsigned __int8 *)(a2 + 480) == v84)
  {
    if (*(_BYTE *)(a2 + 480))
    {
      *(_BYTE *)(a2 + 408) = v80;
      v11 = v82;
      *(_OWORD *)(a2 + 416) = v81;
      *(_OWORD *)(a2 + 432) = v11;
      *(_OWORD *)(a2 + 448) = v83[0];
      *(_OWORD *)(a2 + 457) = *(_OWORD *)((char *)v83 + 9);
    }
  }
  else if (*(_BYTE *)(a2 + 480))
  {
    *(_BYTE *)(a2 + 480) = 0;
  }
  else
  {
    *(_BYTE *)(a2 + 408) = v80;
    v12 = v82;
    *(_OWORD *)(a2 + 416) = v81;
    *(_OWORD *)(a2 + 432) = v12;
    *(_OWORD *)(a2 + 448) = v83[0];
    *(_OWORD *)(a2 + 457) = *(_OWORD *)((char *)v83 + 9);
    *(_QWORD *)(a2 + 400) = &off_1E335FF50;
    *(_BYTE *)(a2 + 480) = 1;
  }
  v13 = (_DWORD *)(a2 + 497);
  if (*(unsigned __int8 *)(a2 + 504) == v87)
  {
    if (*(_BYTE *)(a2 + 504))
    {
      *(_BYTE *)(a2 + 496) = v85;
      *v13 = v86;
    }
  }
  else if (*(_BYTE *)(a2 + 504))
  {
    *(_BYTE *)(a2 + 504) = 0;
  }
  else
  {
    *(_BYTE *)(a2 + 496) = v85;
    *(_QWORD *)(a2 + 488) = &off_1E335FF78;
    *v13 = v86;
    *(_BYTE *)(a2 + 504) = 1;
  }
  if (*(unsigned __int8 *)(a2 + 528) == v90)
  {
    if (*(_BYTE *)(a2 + 528))
    {
      *(_BYTE *)(a2 + 520) = v88;
      *(_DWORD *)(a2 + 521) = v89;
    }
  }
  else if (*(_BYTE *)(a2 + 528))
  {
    *(_BYTE *)(a2 + 528) = 0;
  }
  else
  {
    *(_BYTE *)(a2 + 520) = v88;
    *(_QWORD *)(a2 + 512) = &off_1E335FF78;
    *(_DWORD *)(a2 + 521) = v89;
    *(_BYTE *)(a2 + 528) = 1;
  }
  v14 = a2 + 560;
  if (*(unsigned __int8 *)(a2 + 552) == v93)
  {
    if (*(_BYTE *)(a2 + 552))
    {
      *(_BYTE *)(a2 + 544) = v91;
      *(_DWORD *)(a2 + 545) = v92;
    }
  }
  else if (*(_BYTE *)(a2 + 552))
  {
    *(_BYTE *)(a2 + 552) = 0;
  }
  else
  {
    *(_BYTE *)(a2 + 544) = v91;
    *(_QWORD *)(a2 + 536) = &off_1E335FF78;
    *(_DWORD *)(a2 + 545) = v92;
    *(_BYTE *)(a2 + 552) = 1;
  }
  if (*(unsigned __int8 *)(a2 + 608) == v99)
  {
    if (*(_BYTE *)(a2 + 608))
      WebCore::StringConstraint::operator=(v14, (uint64_t)v94);
  }
  else if (*(_BYTE *)(a2 + 608))
  {
    std::__optional_destruct_base<WebCore::StringConstraint,false>::reset[abi:sn180100](v14, v5);
  }
  else
  {
    *(_BYTE *)(a2 + 568) = v94[8];
    *(_QWORD *)(a2 + 560) = &off_1E335FFA0;
    v15 = v95;
    v95 = 0;
    *(_QWORD *)(a2 + 576) = v15;
    v16 = v96;
    v96 = 0;
    *(_QWORD *)(a2 + 584) = v16;
    v17 = v97;
    v97 = 0;
    *(_QWORD *)(a2 + 592) = v17;
    v18 = v98;
    v98 = 0;
    *(_QWORD *)(a2 + 600) = v18;
    *(_BYTE *)(a2 + 608) = 1;
  }
  if (*(unsigned __int8 *)(a2 + 664) == v105)
  {
    if (*(_BYTE *)(a2 + 664))
      WebCore::StringConstraint::operator=(a2 + 616, (uint64_t)v100);
  }
  else if (*(_BYTE *)(a2 + 664))
  {
    std::__optional_destruct_base<WebCore::StringConstraint,false>::reset[abi:sn180100](a2 + 616, v5);
  }
  else
  {
    *(_BYTE *)(a2 + 624) = v100[8];
    *(_QWORD *)(a2 + 616) = &off_1E335FFA0;
    v19 = v101;
    v101 = 0;
    *(_QWORD *)(a2 + 632) = v19;
    v20 = v102;
    v102 = 0;
    *(_QWORD *)(a2 + 640) = v20;
    v21 = v103;
    v103 = 0;
    *(_QWORD *)(a2 + 648) = v21;
    v22 = v104;
    v104 = 0;
    *(_QWORD *)(a2 + 656) = v22;
    *(_BYTE *)(a2 + 664) = 1;
  }
  if (*(unsigned __int8 *)(a2 + 720) == v111)
  {
    if (*(_BYTE *)(a2 + 720))
      WebCore::StringConstraint::operator=(a2 + 672, (uint64_t)v106);
  }
  else if (*(_BYTE *)(a2 + 720))
  {
    std::__optional_destruct_base<WebCore::StringConstraint,false>::reset[abi:sn180100](a2 + 672, v5);
  }
  else
  {
    *(_BYTE *)(a2 + 680) = v106[8];
    *(_QWORD *)(a2 + 672) = &off_1E335FFA0;
    v23 = v107;
    v107 = 0;
    *(_QWORD *)(a2 + 688) = v23;
    v24 = v108;
    v108 = 0;
    *(_QWORD *)(a2 + 696) = v24;
    v25 = v109;
    v109 = 0;
    *(_QWORD *)(a2 + 704) = v25;
    v26 = v110;
    v110 = 0;
    *(_QWORD *)(a2 + 712) = v26;
    *(_BYTE *)(a2 + 720) = 1;
  }
  if (*(unsigned __int8 *)(a2 + 776) == v117)
  {
    if (*(_BYTE *)(a2 + 776))
      WebCore::StringConstraint::operator=(a2 + 728, (uint64_t)v112);
  }
  else if (*(_BYTE *)(a2 + 776))
  {
    std::__optional_destruct_base<WebCore::StringConstraint,false>::reset[abi:sn180100](a2 + 728, v5);
  }
  else
  {
    *(_BYTE *)(a2 + 736) = v112[8];
    *(_QWORD *)(a2 + 728) = &off_1E335FFA0;
    v27 = v113;
    v113 = 0;
    *(_QWORD *)(a2 + 744) = v27;
    v28 = v114;
    v114 = 0;
    *(_QWORD *)(a2 + 752) = v28;
    v29 = v115;
    v115 = 0;
    *(_QWORD *)(a2 + 760) = v29;
    v30 = v116;
    v116 = 0;
    *(_QWORD *)(a2 + 768) = v30;
    *(_BYTE *)(a2 + 776) = 1;
  }
  if (*(unsigned __int8 *)(a2 + 864) == v122)
  {
    if (*(_BYTE *)(a2 + 864))
    {
      *(_BYTE *)(a2 + 792) = v118;
      v31 = v120;
      *(_OWORD *)(a2 + 800) = v119;
      *(_OWORD *)(a2 + 816) = v31;
      *(_OWORD *)(a2 + 832) = v121[0];
      *(_OWORD *)(a2 + 841) = *(_OWORD *)((char *)v121 + 9);
    }
  }
  else if (*(_BYTE *)(a2 + 864))
  {
    *(_BYTE *)(a2 + 864) = 0;
  }
  else
  {
    *(_BYTE *)(a2 + 792) = v118;
    v32 = v120;
    *(_OWORD *)(a2 + 800) = v119;
    *(_OWORD *)(a2 + 816) = v32;
    *(_OWORD *)(a2 + 832) = v121[0];
    *(_OWORD *)(a2 + 841) = *(_OWORD *)((char *)v121 + 9);
    *(_QWORD *)(a2 + 784) = &off_1E335FF50;
    *(_BYTE *)(a2 + 864) = 1;
  }
  if (*(unsigned __int8 *)(a2 + 888) == v125)
  {
    if (*(_BYTE *)(a2 + 888))
    {
      *(_BYTE *)(a2 + 880) = v123;
      *(_DWORD *)(a2 + 881) = v124;
    }
  }
  else if (*(_BYTE *)(a2 + 888))
  {
    *(_BYTE *)(a2 + 888) = 0;
  }
  else
  {
    *(_BYTE *)(a2 + 880) = v123;
    *(_QWORD *)(a2 + 872) = &off_1E335FF78;
    *(_DWORD *)(a2 + 881) = v124;
    *(_BYTE *)(a2 + 888) = 1;
  }
  if (*(unsigned __int8 *)(a2 + 912) == v128)
  {
    if (*(_BYTE *)(a2 + 912))
    {
      *(_BYTE *)(a2 + 904) = v126;
      *(_DWORD *)(a2 + 905) = v127;
    }
  }
  else if (*(_BYTE *)(a2 + 912))
  {
    *(_BYTE *)(a2 + 912) = 0;
  }
  else
  {
    *(_BYTE *)(a2 + 904) = v126;
    *(_QWORD *)(a2 + 896) = &off_1E335FF78;
    *(_DWORD *)(a2 + 905) = v127;
    *(_BYTE *)(a2 + 912) = 1;
  }
  if (*(unsigned __int8 *)(a2 + 936) == v131)
  {
    if (*(_BYTE *)(a2 + 936))
    {
      *(_BYTE *)(a2 + 928) = v129;
      *(_DWORD *)(a2 + 929) = v130;
    }
  }
  else if (*(_BYTE *)(a2 + 936))
  {
    *(_BYTE *)(a2 + 936) = 0;
  }
  else
  {
    *(_BYTE *)(a2 + 928) = v129;
    *(_QWORD *)(a2 + 920) = &off_1E335FF78;
    *(_DWORD *)(a2 + 929) = v130;
    *(_BYTE *)(a2 + 936) = 1;
  }
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v112, v5);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v106, v33);
  std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v100, v34);
  result = (WTF *)std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v94, v35);
  if (*((_BYTE *)this + 1064) && (v38 = *((_DWORD *)this + 265)) != 0)
  {
    if (v38 >= 0x456C7A)
    {
      __break(0xC471u);
      return result;
    }
    v39 = 944 * v38;
    v40 = WTF::fastMalloc((WTF *)(944 * v38));
    v41 = v40;
    v42 = (v39 & 0xFFFFFFF0) / 0x3B0;
    if (*((_DWORD *)this + 265))
    {
      v43 = 0;
      v44 = 0;
      v45 = v40;
      do
      {
        WebCore::convertToInternalForm((WTF *)&v57, 1, *((_QWORD *)this + 131) + v43);
        WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(v45, (uint64_t)&v57);
        ++v44;
        std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v112, v46);
        std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v106, v47);
        std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v100, v48);
        std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v94, v49);
        v45 += 944;
        v43 += 1048;
      }
      while (v44 < *((unsigned int *)this + 265));
      v42 = (v39 & 0xFFFFFFF0) / 0x3B0;
      goto LABEL_118;
    }
  }
  else
  {
    v41 = 0;
    v42 = 0;
  }
  LODWORD(v44) = 0;
LABEL_118:
  v50 = (WTF **)(a2 + 944);
  v51 = *(_DWORD *)(a2 + 956);
  if (v51)
  {
    v52 = 944 * v51;
    v53 = (uint64_t)*v50 + 560;
    do
    {
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v53 + 168, v37);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v53 + 112, v54);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v53 + 56, v55);
      std::__optional_destruct_base<WebCore::StringConstraint,false>::~__optional_destruct_base[abi:sn180100](v53, v56);
      v53 += 944;
      v52 -= 944;
    }
    while (v52);
  }
  result = *v50;
  if (*v50)
  {
    *(_QWORD *)(a2 + 944) = 0;
    *(_DWORD *)(a2 + 952) = 0;
    result = (WTF *)WTF::fastFree(result, v37);
  }
  *(_QWORD *)(a2 + 944) = v41;
  *(_DWORD *)(a2 + 952) = v42;
  *(_DWORD *)(a2 + 956) = v44;
  *(_BYTE *)(a2 + 960) = 1;
  return result;
}

void WebCore::convertToInternalForm(WTF *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::NavigatorMediaDevices *v21;
  void (**v22)(WebCore::IntConstraint *__hidden);
  void (***v23)(WebCore::BooleanConstraint *__hidden);
  void (***v24)(WebCore::BooleanConstraint *__hidden);
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  void (**v34)(WebCore::BooleanConstraint *__hidden);
  void (***v35)(WebCore::IntConstraint *__hidden);
  void (***v36)(WebCore::IntConstraint *__hidden);
  int v37;
  void (***v38)(WebCore::BooleanConstraint *__hidden);

  *(_BYTE *)a1 = 0;
  *((_BYTE *)a1 + 48) = 0;
  *((_BYTE *)a1 + 56) = 0;
  *((_BYTE *)a1 + 104) = 0;
  *((_BYTE *)a1 + 112) = 0;
  *((_BYTE *)a1 + 160) = 0;
  *((_BYTE *)a1 + 168) = 0;
  *((_BYTE *)a1 + 216) = 0;
  *((_BYTE *)a1 + 224) = 0;
  *((_BYTE *)a1 + 304) = 0;
  *((_BYTE *)a1 + 312) = 0;
  *((_BYTE *)a1 + 392) = 0;
  *((_BYTE *)a1 + 400) = 0;
  *((_BYTE *)a1 + 480) = 0;
  *((_BYTE *)a1 + 488) = 0;
  *((_BYTE *)a1 + 504) = 0;
  *((_BYTE *)a1 + 512) = 0;
  *((_BYTE *)a1 + 528) = 0;
  *((_BYTE *)a1 + 536) = 0;
  *((_BYTE *)a1 + 552) = 0;
  *((_BYTE *)a1 + 560) = 0;
  *((_BYTE *)a1 + 608) = 0;
  *((_BYTE *)a1 + 616) = 0;
  *((_BYTE *)a1 + 664) = 0;
  *((_BYTE *)a1 + 672) = 0;
  *((_BYTE *)a1 + 720) = 0;
  *((_BYTE *)a1 + 728) = 0;
  *((_BYTE *)a1 + 776) = 0;
  *((_BYTE *)a1 + 784) = 0;
  *((_BYTE *)a1 + 864) = 0;
  *((_BYTE *)a1 + 872) = 0;
  *((_BYTE *)a1 + 888) = 0;
  *((_BYTE *)a1 + 896) = 0;
  *((_BYTE *)a1 + 912) = 0;
  *((_BYTE *)a1 + 920) = 0;
  *((_BYTE *)a1 + 936) = 0;
  if (*(_BYTE *)(a3 + 40))
  {
    v37 = a2;
    LOBYTE(v23) = 0;
    BYTE4(v23) = 0;
    LOBYTE(v24) = 0;
    BYTE4(v24) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v22 = &off_1E335FF28;
    v34 = (void (**)(WebCore::BooleanConstraint *__hidden))&v37;
    v35 = &v22;
    v36 = &v22;
    v6 = *(unsigned int *)(a3 + 36);
    if ((_DWORD)v6 == -1)
      goto LABEL_41;
    v38 = &v34;
    ((void (*)(void (****)(WebCore::BooleanConstraint *__hidden), uint64_t))off_1E3360100[v6])(&v38, a3 + 4);
    WebCore::MediaTrackConstraintSetMap::set((uint64_t)a1, (WTF::StringImpl *)1, (uint64_t)&v22);
  }
  if (*(_BYTE *)(a3 + 84))
  {
    v37 = a2;
    LOBYTE(v23) = 0;
    BYTE4(v23) = 0;
    LOBYTE(v24) = 0;
    BYTE4(v24) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v22 = &off_1E335FF28;
    v34 = (void (**)(WebCore::BooleanConstraint *__hidden))&v37;
    v35 = &v22;
    v36 = &v22;
    v7 = *(unsigned int *)(a3 + 80);
    if ((_DWORD)v7 == -1)
      goto LABEL_41;
    v38 = &v34;
    ((void (*)(void (****)(WebCore::BooleanConstraint *__hidden), uint64_t))off_1E3360100[v7])(&v38, a3 + 48);
    WebCore::MediaTrackConstraintSetMap::set((uint64_t)a1, (WTF::StringImpl *)2, (uint64_t)&v22);
  }
  if (*(_BYTE *)(a3 + 168))
  {
    v37 = a2;
    LOBYTE(v23) = 1;
    LOBYTE(v24) = 0;
    v25 = 0;
    v27 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v22 = &off_1E335FF50;
    v34 = (void (**)(WebCore::BooleanConstraint *__hidden))&v37;
    v35 = &v22;
    v36 = &v22;
    v8 = *(unsigned int *)(a3 + 160);
    if ((_DWORD)v8 == -1)
      goto LABEL_41;
    v38 = &v34;
    ((void (*)(void (****)(WebCore::BooleanConstraint *__hidden), uint64_t))off_1E3360110[v8])(&v38, a3 + 96);
    WebCore::MediaTrackConstraintSetMap::set((uint64_t)a1, (WTF::StringImpl *)3, (uint64_t)&v22);
  }
  if (*(_BYTE *)(a3 + 256))
  {
    v37 = a2;
    LOBYTE(v23) = 1;
    LOBYTE(v24) = 0;
    v25 = 0;
    v27 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v22 = &off_1E335FF50;
    v34 = (void (**)(WebCore::BooleanConstraint *__hidden))&v37;
    v35 = &v22;
    v36 = &v22;
    v9 = *(unsigned int *)(a3 + 248);
    if ((_DWORD)v9 == -1)
      goto LABEL_41;
    v38 = &v34;
    ((void (*)(void (****)(WebCore::BooleanConstraint *__hidden), uint64_t))off_1E3360110[v9])(&v38, a3 + 184);
    WebCore::MediaTrackConstraintSetMap::set((uint64_t)a1, (WTF::StringImpl *)4, (uint64_t)&v22);
  }
  WebCore::set<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ConstrainDOMStringParameters>>(a1, a2, (WTF::StringImpl *)5, a3 + 264);
  if (*(_BYTE *)(a3 + 432))
  {
    v37 = a2;
    LOBYTE(v23) = 1;
    LOBYTE(v24) = 0;
    v25 = 0;
    v27 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v22 = &off_1E335FF50;
    v34 = (void (**)(WebCore::BooleanConstraint *__hidden))&v37;
    v35 = &v22;
    v36 = &v22;
    v11 = *(unsigned int *)(a3 + 424);
    if ((_DWORD)v11 == -1)
      goto LABEL_41;
    v38 = &v34;
    ((void (*)(void (****)(WebCore::BooleanConstraint *__hidden), uint64_t))off_1E3360110[v11])(&v38, a3 + 360);
    v10.n128_f64[0] = WebCore::MediaTrackConstraintSetMap::set((uint64_t)a1, (WTF::StringImpl *)6, (uint64_t)&v22);
  }
  if (*(_BYTE *)(a3 + 480))
  {
    v37 = a2;
    LOBYTE(v23) = 0;
    BYTE4(v23) = 0;
    LOBYTE(v24) = 0;
    BYTE4(v24) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v22 = &off_1E335FF28;
    v34 = (void (**)(WebCore::BooleanConstraint *__hidden))&v37;
    v35 = &v22;
    v36 = &v22;
    v12 = *(unsigned int *)(a3 + 476);
    if ((_DWORD)v12 == -1)
      goto LABEL_41;
    v38 = &v34;
    ((void (*)(void (****)(WebCore::BooleanConstraint *__hidden), uint64_t, __n128))off_1E3360100[v12])(&v38, a3 + 444, v10);
    v10.n128_f64[0] = WebCore::MediaTrackConstraintSetMap::set((uint64_t)a1, (WTF::StringImpl *)7, (uint64_t)&v22);
  }
  if (*(_BYTE *)(a3 + 524))
  {
    v37 = a2;
    LOBYTE(v23) = 0;
    BYTE4(v23) = 0;
    LOBYTE(v24) = 0;
    BYTE4(v24) = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v22 = &off_1E335FF28;
    v34 = (void (**)(WebCore::BooleanConstraint *__hidden))&v37;
    v35 = &v22;
    v36 = &v22;
    v13 = *(unsigned int *)(a3 + 520);
    if ((_DWORD)v13 == -1)
      goto LABEL_41;
    v38 = &v34;
    ((void (*)(void (****)(WebCore::BooleanConstraint *__hidden), uint64_t, __n128))off_1E3360100[v13])(&v38, a3 + 488, v10);
    v10.n128_f64[0] = WebCore::MediaTrackConstraintSetMap::set((uint64_t)a1, (WTF::StringImpl *)8, (uint64_t)&v22);
  }
  if (*(_BYTE *)(a3 + 540))
  {
    v37 = a2;
    LOBYTE(v35) = 2;
    v34 = &off_1E335FF78;
    *(_DWORD *)((char *)&v35 + 1) = 0;
    v22 = (void (**)(WebCore::IntConstraint *__hidden))&v37;
    v23 = &v34;
    v24 = &v34;
    v14 = *(unsigned int *)(a3 + 536);
    if ((_DWORD)v14 == -1)
      goto LABEL_41;
    v38 = &v22;
    ((void (*)(void (****)(WebCore::BooleanConstraint *__hidden), uint64_t, __n128))off_1E3360158[v14])(&v38, a3 + 532, v10);
    WebCore::MediaTrackConstraintSetMap::set((uint64_t)a1, (WTF::StringImpl *)9, (uint64_t)&v34);
  }
  WebCore::set<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ConstrainDOMStringParameters>>(a1, a2, (WTF::StringImpl *)0xA, a3 + 544);
  WebCore::set<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ConstrainDOMStringParameters>>(a1, a2, (WTF::StringImpl *)0xB, a3 + 632);
  WebCore::set<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ConstrainDOMStringParameters>>(a1, a2, (WTF::StringImpl *)0xC, a3 + 720);
  if (*(_BYTE *)(a3 + 820))
  {
    v37 = a2;
    LOBYTE(v35) = 2;
    v34 = &off_1E335FF78;
    *(_DWORD *)((char *)&v35 + 1) = 0;
    v22 = (void (**)(WebCore::IntConstraint *__hidden))&v37;
    v23 = &v34;
    v24 = &v34;
    v15 = *(unsigned int *)(a3 + 816);
    if ((_DWORD)v15 == -1)
      goto LABEL_41;
    v38 = &v22;
    ((void (*)(void (****)(WebCore::BooleanConstraint *__hidden), uint64_t))off_1E3360158[v15])(&v38, a3 + 812);
    WebCore::MediaTrackConstraintSetMap::set((uint64_t)a1, (WTF::StringImpl *)0xD, (uint64_t)&v34);
  }
  WebCore::set<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ConstrainDOMStringParameters>>(a1, a2, (WTF::StringImpl *)0xF, a3 + 824);
  if (*(_BYTE *)(a3 + 992))
  {
    v37 = a2;
    LOBYTE(v23) = 1;
    LOBYTE(v24) = 0;
    v25 = 0;
    v27 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v22 = &off_1E335FF50;
    v34 = (void (**)(WebCore::BooleanConstraint *__hidden))&v37;
    v35 = &v22;
    v36 = &v22;
    v17 = *(unsigned int *)(a3 + 984);
    if ((_DWORD)v17 == -1)
      goto LABEL_41;
    v38 = &v34;
    ((void (*)(void (****)(WebCore::BooleanConstraint *__hidden), uint64_t))off_1E3360110[v17])(&v38, a3 + 920);
    v16.n128_f64[0] = WebCore::MediaTrackConstraintSetMap::set((uint64_t)a1, (WTF::StringImpl *)0x10, (uint64_t)&v22);
  }
  if (*(_BYTE *)(a3 + 1012))
  {
    v37 = a2;
    LOBYTE(v35) = 2;
    v34 = &off_1E335FF78;
    *(_DWORD *)((char *)&v35 + 1) = 0;
    v22 = (void (**)(WebCore::IntConstraint *__hidden))&v37;
    v23 = &v34;
    v24 = &v34;
    v18 = *(unsigned int *)(a3 + 1008);
    if ((_DWORD)v18 == -1)
      goto LABEL_41;
    v38 = &v22;
    ((void (*)(void (****)(WebCore::BooleanConstraint *__hidden), uint64_t, __n128))off_1E3360158[v18])(&v38, a3 + 1004, v16);
    v16.n128_f64[0] = WebCore::MediaTrackConstraintSetMap::set((uint64_t)a1, (WTF::StringImpl *)0x11, (uint64_t)&v34);
  }
  if (*(_BYTE *)(a3 + 1028))
  {
    v37 = a2;
    LOBYTE(v35) = 2;
    v34 = &off_1E335FF78;
    *(_DWORD *)((char *)&v35 + 1) = 0;
    v22 = (void (**)(WebCore::IntConstraint *__hidden))&v37;
    v23 = &v34;
    v24 = &v34;
    v19 = *(unsigned int *)(a3 + 1024);
    if ((_DWORD)v19 == -1)
      goto LABEL_41;
    v38 = &v22;
    ((void (*)(void (****)(WebCore::BooleanConstraint *__hidden), uint64_t, __n128))off_1E3360158[v19])(&v38, a3 + 1020, v16);
    v16.n128_f64[0] = WebCore::MediaTrackConstraintSetMap::set((uint64_t)a1, (WTF::StringImpl *)0x12, (uint64_t)&v34);
  }
  if (!*(_BYTE *)(a3 + 1044))
    return;
  v37 = a2;
  LOBYTE(v35) = 2;
  v34 = &off_1E335FF78;
  *(_DWORD *)((char *)&v35 + 1) = 0;
  v22 = (void (**)(WebCore::IntConstraint *__hidden))&v37;
  v23 = &v34;
  v24 = &v34;
  v20 = *(unsigned int *)(a3 + 1040);
  if ((_DWORD)v20 == -1)
  {
LABEL_41:
    v21 = (WebCore::NavigatorMediaDevices *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::NavigatorMediaDevices::~NavigatorMediaDevices(v21);
    return;
  }
  v38 = &v22;
  ((void (*)(void (****)(WebCore::BooleanConstraint *__hidden), uint64_t, __n128))off_1E3360158[v20])(&v38, a3 + 1036, v16);
  WebCore::MediaTrackConstraintSetMap::set((uint64_t)a1, (WTF::StringImpl *)0x13, (uint64_t)&v34);
}

void WebCore::NavigatorMediaDevices::~NavigatorMediaDevices(WebCore::NavigatorMediaDevices *this, WTF::StringImpl *a2)
{
  WebCore::MediaDevices *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  bmalloc::api *v7;
  void *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E335FFC8;
  v3 = (WebCore::MediaDevices *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 1)
    {
      WebCore::MediaDevices::~MediaDevices(v3, a2);
      bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --*((_DWORD *)v3 + 6);
    }
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v9 = *(unsigned int *)(v4 + 28);
      if ((_DWORD)v9)
      {
        v12 = v4;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v9));
        v4 = v12;
      }
      v10 = *(WTF **)(v4 + 16);
      if (v10)
      {
        *(_QWORD *)(v4 + 16) = 0;
        *(_DWORD *)(v4 + 24) = 0;
        v11 = v4;
        WTF::fastFree(v10, a2);
        v4 = v11;
      }
      WTF::fastFree((WTF *)v4, a2);
    }
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::NavigatorMediaDevices::~NavigatorMediaDevices(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::NavigatorMediaDevices::from(WebCore::NavigatorMediaDevices *this, WebCore::Navigator *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  const char **v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  const char *v10;
  unsigned int v12;
  const char *v13;
  unsigned __int8 *v14[2];

  v3 = (uint64_t *)((char *)this + 72);
  if (this)
    v4 = v3;
  else
    v4 = 0;
  if (!this
    || (v14[0] = "NavigatorMediaDevices",
        v14[1] = (unsigned __int8 *)22,
        (v5 = WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Navigator>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>(v3, v14)) == 0)|| (v6 = (uint64_t)v5[2]) == 0)
  {
    v7 = *((_QWORD *)this + 8);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      v6 = WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v6 = &off_1E3353250;
      if (v8)
      {
        v9 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v8);
        if (v9)
        {
          do
            v12 = __ldaxr(v9);
          while (__stlxr(v12 + 1, v9));
        }
      }
      else
      {
        v9 = 0;
      }
    }
    else
    {
      v6 = WTF::fastMalloc((WTF *)0x18);
      v9 = 0;
      *(_QWORD *)v6 = &off_1E3353250;
    }
    *(_QWORD *)v6 = off_1E335FFC8;
    *(_QWORD *)(v6 + 8) = v9;
    *(_QWORD *)(v6 + 16) = 0;
    v13 = (const char *)v6;
    WebCore::Supplement<WebCore::Navigator>::provideTo(v4, "NavigatorMediaDevices", (unsigned __int8 *)0x16, &v13);
    v10 = v13;
    v13 = 0;
    if (v10)
      (*(void (**)(const char *))(*(_QWORD *)v10 + 8))(v10);
  }
  return v6;
}

uint64_t WebCore::NavigatorMediaDevices::mediaDevices(WebCore::NavigatorMediaDevices *this, WebCore::Navigator *a2)
{
  WebCore::NavigatorMediaDevices *v2;

  v2 = (WebCore::NavigatorMediaDevices *)WebCore::NavigatorMediaDevices::from(this, a2);
  return WebCore::NavigatorMediaDevices::mediaDevices(v2);
}

uint64_t WebCore::NavigatorMediaDevices::mediaDevices(WebCore::NavigatorMediaDevices *this)
{
  WebCore::MediaDevices *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::Document *v9;
  WebCore::MediaDevices *v10;
  WTF::StringImpl *v11;
  WebCore::MediaDevices *v12;
  uint64_t result;
  bmalloc::api *v14;
  void *v15;

  v1 = (WebCore::MediaDevices *)*((_QWORD *)this + 2);
  if (v1)
    return (uint64_t)v1;
  v3 = *((_QWORD *)this + 1);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(v4 + 72);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    return 0;
  if (!*(_BYTE *)(v6 + 178))
  {
    v7 = *(_QWORD *)(v6 + 240);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = *(WebCore::Document **)(v8 + 296);
        v1 = (WebCore::MediaDevices *)bmalloc::api::isoAllocate();
        v10 = WebCore::MediaDevices::MediaDevices(v1, v9);
        WebCore::ActiveDOMObject::suspendIfNeeded(v10);
        v12 = (WebCore::MediaDevices *)*((_QWORD *)this + 2);
        *((_QWORD *)this + 2) = v1;
        if (v12)
        {
          if (*((_DWORD *)v12 + 6) == 1)
          {
            WebCore::MediaDevices::~MediaDevices(v12, v11);
            bmalloc::api::isoDeallocate(v14, v15);
            return *((_QWORD *)this + 2);
          }
          else
          {
            --*((_DWORD *)v12 + 6);
          }
        }
        return (uint64_t)v1;
      }
    }
    return 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::PeerConnectionBackend::PeerConnectionBackend(WebCore::PeerConnectionBackend *this, WebCore::RTCPeerConnection *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  *(_QWORD *)this = off_1E335FFE8;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = a2;
  *((_BYTE *)this + 40) = 1;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  v3 = *((_QWORD *)a2 + 11);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *((_QWORD *)a2 + 12);
  *((_QWORD *)this + 8) = v3;
  *((_QWORD *)this + 9) = v6;
  *((_WORD *)this + 40) = 0;
  v7 = *((_QWORD *)a2 + 5);
  if (!v7)
    return (uint64_t)this;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    return (uint64_t)this;
  if (!*(_BYTE *)(v8 + 178))
  {
    v9 = *(_DWORD *)(v8 - 264);
    *(_DWORD *)(v8 - 264) = v9 + 2;
    v10 = *(_QWORD *)(v8 + 240);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 24);
        if (v12)
        {
          v13 = *(_QWORD *)(v12 + 8);
          if (v13)
            *((_BYTE *)this + 40) = *(_BYTE *)(*(_QWORD *)(v13 + 296) + 172);
        }
      }
    }
    if (v9)
    {
      *(_DWORD *)(v8 - 264) = v9;
    }
    else if ((*(_WORD *)(v8 - 258) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)(v8 - 288));
    }
    return (uint64_t)this;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

void WebCore::PeerConnectionBackend::~PeerConnectionBackend(WebCore::PeerConnectionBackend *this, void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WebCore::PeerConnectionBackend::PendingTrackEvent *v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;

  *(_QWORD *)this = off_1E335FFE8;
  v3 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = *((unsigned int *)this + 15);
  if ((_DWORD)v7)
  {
    v8 = (WebCore::PeerConnectionBackend::PendingTrackEvent *)*((_QWORD *)this + 6);
    v9 = 40 * v7;
    do
    {
      WebCore::PeerConnectionBackend::PendingTrackEvent::~PendingTrackEvent(v8, a2);
      v8 = (WebCore::PeerConnectionBackend::PendingTrackEvent *)(v10 + 40);
      v9 -= 40;
    }
    while (v9);
  }
  v11 = (WTF *)*((_QWORD *)this + 6);
  if (v11)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v11, a2);
  }
  v12 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 1);
  if (v14)
  {
    *(_QWORD *)(v14 + 8) = 0;
    v15 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v15)
    {
      do
      {
        v16 = __ldaxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t (***WebCore::PeerConnectionBackend::createOfferSucceeded(_QWORD *a1, uint64_t *a2))()
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t (**v11)();
  uint64_t v12;
  int v13;
  uint64_t (***result)();
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (**v21)();
  uint64_t v22[4];

  v4 = a1[8];
  v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v6 = a1[9];
  v22[0] = v5;
  v22[1] = v7;
  v22[2] = (uint64_t)"createOfferSucceeded";
  v22[3] = v6;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [25],WTF::String>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v22, "Create offer succeeded:\n", a2);
  v8 = a1[2];
  v9 = (uint64_t (*)())a1[3];
  a1[3] = 0;
  v10 = *a2;
  *a2 = 0;
  v11 = (uint64_t (**)())WTF::fastMalloc((WTF *)0x18);
  *v11 = (uint64_t (*)())&off_1E33601D8;
  v11[1] = v9;
  v11[2] = (uint64_t (*)())v10;
  v12 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v12 = 1;
  v13 = *(_DWORD *)(v8 + 24);
  *(_QWORD *)(v12 + 8) = v8;
  ++*(_QWORD *)(v8 + 48);
  *(_DWORD *)(v8 + 24) = v13 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = off_1E3360610;
  result[1] = (uint64_t (**)())v8;
  result[2] = (uint64_t (**)())v12;
  result[3] = v11;
  v22[0] = (uint64_t)result;
  v18 = *(_QWORD *)(v8 + 40);
  if (!v18)
  {
    v22[0] = 0;
    v21 = off_1E3360610;
    return (uint64_t (***)())((uint64_t (*)(uint64_t (***)(), uint64_t, uint64_t, uint64_t))v21[1])(result, v15, v16, v17);
  }
  v19 = *(_QWORD *)(v18 + 8);
  if (!v19)
  {
    v22[0] = 0;
    goto LABEL_8;
  }
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v19 - 96) + 104))(v19 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v20, 11, v22);
  result = (uint64_t (***)())v22[0];
  v22[0] = 0;
  if (result)
  {
LABEL_8:
    v21 = *result;
    return (uint64_t (***)())((uint64_t (*)(uint64_t (***)(), uint64_t, uint64_t, uint64_t))v21[1])(result, v15, v16, v17);
  }
  return result;
}

uint64_t WebCore::PeerConnectionBackend::logger(WebCore::PeerConnectionBackend *this)
{
  return *((_QWORD *)this + 8);
}

char *WebCore::PeerConnectionBackend::logChannel(WebCore::PeerConnectionBackend *this)
{
  return &WebCore::LogWebRTC;
}

uint64_t WebCore::PeerConnectionBackend::logIdentifier(WebCore::PeerConnectionBackend *this)
{
  return *((_QWORD *)this + 9);
}

uint64_t (***WebCore::PeerConnectionBackend::createOfferFailed(_QWORD *a1, uint64_t *a2))()
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t (***result)();
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (**v22)();
  uint64_t v23[4];

  v4 = a1[8];
  v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v6 = a1[9];
  v23[0] = v5;
  v23[1] = v7;
  v23[2] = (uint64_t)"createOfferFailed";
  v23[3] = v6;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [25],WTF::String>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v23, "Create offer failed:", a2 + 1);
  v8 = a1[2];
  v9 = a1[3];
  a1[3] = 0;
  v10 = *(_BYTE *)a2;
  v11 = a2[1];
  a2[1] = 0;
  v12 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v12 = &off_1E3360210;
  *(_QWORD *)(v12 + 8) = v9;
  *(_BYTE *)(v12 + 16) = v10;
  *(_QWORD *)(v12 + 24) = v11;
  v13 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v13 = 1;
  v14 = *(_DWORD *)(v8 + 24);
  *(_QWORD *)(v13 + 8) = v8;
  ++*(_QWORD *)(v8 + 48);
  *(_DWORD *)(v8 + 24) = v14 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = off_1E3360610;
  result[1] = (uint64_t (**)())v8;
  result[2] = (uint64_t (**)())v13;
  result[3] = (uint64_t (**)())v12;
  v23[0] = (uint64_t)result;
  v19 = *(_QWORD *)(v8 + 40);
  if (!v19)
  {
    v23[0] = 0;
    v22 = off_1E3360610;
    return (uint64_t (***)())((uint64_t (*)(uint64_t (***)(), uint64_t, uint64_t, uint64_t))v22[1])(result, v16, v17, v18);
  }
  v20 = *(_QWORD *)(v19 + 8);
  if (!v20)
  {
    v23[0] = 0;
    goto LABEL_8;
  }
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v20 - 96) + 104))(v20 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v21, 11, v23);
  result = (uint64_t (***)())v23[0];
  v23[0] = 0;
  if (result)
  {
LABEL_8:
    v22 = *result;
    return (uint64_t (***)())((uint64_t (*)(uint64_t (***)(), uint64_t, uint64_t, uint64_t))v22[1])(result, v16, v17, v18);
  }
  return result;
}

uint64_t (***WebCore::PeerConnectionBackend::createAnswerSucceeded(_QWORD *a1, uint64_t *a2))()
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t (**v11)();
  uint64_t v12;
  int v13;
  uint64_t (***result)();
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (**v21)();
  uint64_t v22[4];

  v4 = a1[8];
  v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v6 = a1[9];
  v22[0] = v5;
  v22[1] = v7;
  v22[2] = (uint64_t)"createAnswerSucceeded";
  v22[3] = v6;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [25],WTF::String>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v22, "Create answer succeeded:\n", a2);
  v8 = a1[2];
  v9 = (uint64_t (*)())a1[3];
  a1[3] = 0;
  v10 = *a2;
  *a2 = 0;
  v11 = (uint64_t (**)())WTF::fastMalloc((WTF *)0x18);
  *v11 = (uint64_t (*)())&off_1E3360238;
  v11[1] = v9;
  v11[2] = (uint64_t (*)())v10;
  v12 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v12 = 1;
  v13 = *(_DWORD *)(v8 + 24);
  *(_QWORD *)(v12 + 8) = v8;
  ++*(_QWORD *)(v8 + 48);
  *(_DWORD *)(v8 + 24) = v13 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = off_1E3360610;
  result[1] = (uint64_t (**)())v8;
  result[2] = (uint64_t (**)())v12;
  result[3] = v11;
  v22[0] = (uint64_t)result;
  v18 = *(_QWORD *)(v8 + 40);
  if (!v18)
  {
    v22[0] = 0;
    v21 = off_1E3360610;
    return (uint64_t (***)())((uint64_t (*)(uint64_t (***)(), uint64_t, uint64_t, uint64_t))v21[1])(result, v15, v16, v17);
  }
  v19 = *(_QWORD *)(v18 + 8);
  if (!v19)
  {
    v22[0] = 0;
    goto LABEL_8;
  }
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v19 - 96) + 104))(v19 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v20, 11, v22);
  result = (uint64_t (***)())v22[0];
  v22[0] = 0;
  if (result)
  {
LABEL_8:
    v21 = *result;
    return (uint64_t (***)())((uint64_t (*)(uint64_t (***)(), uint64_t, uint64_t, uint64_t))v21[1])(result, v15, v16, v17);
  }
  return result;
}

uint64_t (***WebCore::PeerConnectionBackend::createAnswerFailed(_QWORD *a1, uint64_t *a2))()
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t (***result)();
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (**v22)();
  uint64_t v23[4];

  v4 = a1[8];
  v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v6 = a1[9];
  v23[0] = v5;
  v23[1] = v7;
  v23[2] = (uint64_t)"createAnswerFailed";
  v23[3] = v6;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [25],WTF::String>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v23, "Create answer failed:", a2 + 1);
  v8 = a1[2];
  v9 = a1[3];
  a1[3] = 0;
  v10 = *(_BYTE *)a2;
  v11 = a2[1];
  a2[1] = 0;
  v12 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v12 = &off_1E3360260;
  *(_QWORD *)(v12 + 8) = v9;
  *(_BYTE *)(v12 + 16) = v10;
  *(_QWORD *)(v12 + 24) = v11;
  v13 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v13 = 1;
  v14 = *(_DWORD *)(v8 + 24);
  *(_QWORD *)(v13 + 8) = v8;
  ++*(_QWORD *)(v8 + 48);
  *(_DWORD *)(v8 + 24) = v14 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = off_1E3360610;
  result[1] = (uint64_t (**)())v8;
  result[2] = (uint64_t (**)())v13;
  result[3] = (uint64_t (**)())v12;
  v23[0] = (uint64_t)result;
  v19 = *(_QWORD *)(v8 + 40);
  if (!v19)
  {
    v23[0] = 0;
    v22 = off_1E3360610;
    return (uint64_t (***)())((uint64_t (*)(uint64_t (***)(), uint64_t, uint64_t, uint64_t))v22[1])(result, v16, v17, v18);
  }
  v20 = *(_QWORD *)(v19 + 8);
  if (!v20)
  {
    v23[0] = 0;
    goto LABEL_8;
  }
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v20 - 96) + 104))(v20 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v21, 11, v23);
  result = (uint64_t (***)())v23[0];
  v23[0] = 0;
  if (result)
  {
LABEL_8:
    v22 = *result;
    return (uint64_t (***)())((uint64_t (*)(uint64_t (***)(), uint64_t, uint64_t, uint64_t))v22[1])(result, v16, v17, v18);
  }
  return result;
}

uint64_t WebCore::PeerConnectionBackend::setLocalDescriptionSucceeded(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t (***v38)();
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t (**v43)();
  WTF *v44;
  uint64_t result;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  WTF *v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  __int128 v69;
  uint64_t (***v70)();

  v14 = a1[8];
  v15 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v16 = a1[9];
  v54 = (_QWORD *)v15;
  v55 = v17;
  v18 = "setLocalDescriptionSucceeded";
  *(_QWORD *)&v56 = "setLocalDescriptionSucceeded";
  *((_QWORD *)&v56 + 1) = v16;
  if (*(_BYTE *)(v14 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v54);
  if (*(_BYTE *)(a3 + 16))
  {
    v19 = a1[8];
    v20 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
    v21 = a1[9];
    v54 = (_QWORD *)v20;
    v55 = v22;
    *(_QWORD *)&v56 = "setLocalDescriptionSucceeded";
    *((_QWORD *)&v56 + 1) = v21;
    if (!*(_BYTE *)(a3 + 16))
    {
      __break(1u);
LABEL_33:
      v70 = 0;
      v43 = off_1E3360610;
      goto LABEL_23;
    }
    if (*(_BYTE *)(v19 + 12) && WebCore::LogWebRTC && byte_1ECE7CD50 >= 4u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [21],WTF::Vector<WebCore::PeerConnectionBackend::TransceiverState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((WTF::Logger::LogSiteIdentifier *)&v54, (uint64_t *)a3);
  }
  v23 = a6;
  v24 = a1[2];
  v53 = a1[4];
  v54 = a1;
  a1[4] = 0;
  v18 = (const char *)&v56;
  LOBYTE(v56) = 0;
  v64 = 0;
  v25 = *(unsigned __int8 *)(a2 + 72);
  if (*(_BYTE *)(a2 + 72))
  {
    *(_QWORD *)&v56 = *(_QWORD *)a2;
    *(_QWORD *)((char *)&v56 + 5) = *(_QWORD *)(a2 + 5);
    v26 = *(_QWORD *)(a2 + 16);
    v27 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 16) = 0;
    v52 = v26;
    v57 = v26;
    v58 = v27;
    v50 = v27;
    v28 = *(_QWORD *)(a2 + 32);
    v29 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 32) = 0;
    v51 = v28;
    v59 = v28;
    v60 = v29;
    v48 = v29;
    v30 = *(_QWORD *)(a2 + 48);
    v31 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 48) = 0;
    v49 = v30;
    v61 = v30;
    v62 = v31;
    v32 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a2 + 64) = 0;
    v46 = v31;
    v47 = v32;
    v63 = v32;
    v64 = 1;
  }
  LOBYTE(v65) = 0;
  v67 = 0;
  LODWORD(a2) = *(unsigned __int8 *)(a3 + 16);
  if (*(_BYTE *)(a3 + 16))
  {
    v65 = *(WTF **)a3;
    v7 = *(_DWORD *)(a3 + 8);
    v6 = *(_DWORD *)(a3 + 12);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v66 = __PAIR64__(v6, v7);
    v67 = 1;
  }
  v33 = *a4;
  *a4 = 0;
  v68 = v33;
  *(_QWORD *)&v69 = a5;
  BYTE8(v69) = v23;
  v34 = WTF::fastMalloc((WTF *)0x98);
  v35 = v34;
  *(_QWORD *)v34 = off_1E3360288;
  *(_QWORD *)(v34 + 8) = a1;
  v55 = 0;
  *(_QWORD *)(v34 + 16) = v53;
  *(_BYTE *)(v34 + 24) = 0;
  *(_BYTE *)(v34 + 96) = 0;
  if (v25)
  {
    *(_QWORD *)(v34 + 29) = *(_QWORD *)((char *)&v56 + 5);
    *(_QWORD *)(v34 + 24) = v56;
    *(_QWORD *)(v34 + 40) = v52;
    *(_QWORD *)(v34 + 48) = v50;
    v57 = 0;
    v59 = 0;
    *(_QWORD *)(v34 + 56) = v51;
    *(_QWORD *)(v34 + 64) = v48;
    *(_QWORD *)(v34 + 72) = v49;
    *(_QWORD *)(v34 + 80) = v46;
    v61 = 0;
    v63 = 0;
    *(_QWORD *)(v34 + 88) = v47;
    *(_BYTE *)(v34 + 96) = 1;
  }
  *(_BYTE *)(v34 + 104) = 0;
  *(_BYTE *)(v34 + 120) = 0;
  if ((_DWORD)a2)
  {
    *(_QWORD *)(v34 + 104) = v65;
    v65 = 0;
    v66 = 0;
    *(_DWORD *)(v34 + 112) = v7;
    *(_DWORD *)(v34 + 116) = v6;
    *(_BYTE *)(v34 + 120) = 1;
    v6 = 0;
  }
  *(_QWORD *)(v34 + 128) = v33;
  *(_OWORD *)(v34 + 136) = v69;
  v36 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v36 = 1;
  v37 = *(_DWORD *)(v24 + 24);
  *(_QWORD *)(v36 + 8) = v24;
  ++*(_QWORD *)(v24 + 48);
  *(_DWORD *)(v24 + 24) = v37 + 2;
  v38 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *v38 = off_1E3360610;
  v38[1] = (uint64_t (**)())v24;
  v38[2] = (uint64_t (**)())v36;
  v38[3] = (uint64_t (**)())v35;
  v70 = v38;
  v39 = *(_QWORD *)(v24 + 40);
  if (!v39)
    goto LABEL_33;
  v40 = *(_QWORD *)(v39 + 8);
  if (!v40)
  {
    v70 = 0;
    goto LABEL_22;
  }
  v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v40 - 96) + 104))(v40 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v41, 11, (uint64_t *)&v70);
  v38 = v70;
  v70 = 0;
  if (v38)
  {
LABEL_22:
    v43 = *v38;
LABEL_23:
    v43[1]();
  }
  v68 = 0;
  if ((_DWORD)a2)
  {
    v44 = v65;
    if (v6)
      WTF::VectorDestructor<true,WebCore::PeerConnectionBackend::TransceiverState>::destruct(v65, (WTF *)((char *)v65 + 32 * v6));
    if (v44)
    {
      v65 = 0;
      LODWORD(v66) = 0;
      WTF::fastFree(v44, v42);
    }
  }
  std::__optional_destruct_base<WebCore::PeerConnectionBackend::DescriptionStates,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v18, (WTF::StringImpl *)v42);
  result = v55;
  v55 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t (***WebCore::PeerConnectionBackend::setLocalDescriptionFailed(_QWORD *a1, uint64_t *a2))()
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t (***result)();
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (**v22)();
  uint64_t v23[4];

  v4 = a1[8];
  v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v6 = a1[9];
  v23[0] = v5;
  v23[1] = v7;
  v23[2] = (uint64_t)"setLocalDescriptionFailed";
  v23[3] = v6;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [25],WTF::String>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v23, "Set local description failed:", a2 + 1);
  v8 = a1[2];
  v9 = a1[4];
  a1[4] = 0;
  v10 = *(_BYTE *)a2;
  v11 = a2[1];
  a2[1] = 0;
  v12 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v12 = &off_1E33602B0;
  *(_QWORD *)(v12 + 8) = a1;
  *(_QWORD *)(v12 + 16) = v9;
  *(_BYTE *)(v12 + 24) = v10;
  *(_QWORD *)(v12 + 32) = v11;
  v13 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v13 = 1;
  v14 = *(_DWORD *)(v8 + 24);
  *(_QWORD *)(v13 + 8) = v8;
  ++*(_QWORD *)(v8 + 48);
  *(_DWORD *)(v8 + 24) = v14 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = off_1E3360610;
  result[1] = (uint64_t (**)())v8;
  result[2] = (uint64_t (**)())v13;
  result[3] = (uint64_t (**)())v12;
  v23[0] = (uint64_t)result;
  v19 = *(_QWORD *)(v8 + 40);
  if (!v19)
  {
    v23[0] = 0;
    v22 = off_1E3360610;
    return (uint64_t (***)())((uint64_t (*)(uint64_t (***)(), uint64_t, uint64_t, uint64_t))v22[1])(result, v16, v17, v18);
  }
  v20 = *(_QWORD *)(v19 + 8);
  if (!v20)
  {
    v23[0] = 0;
    goto LABEL_8;
  }
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v20 - 96) + 104))(v20 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v21, 11, v23);
  result = (uint64_t (***)())v23[0];
  v23[0] = 0;
  if (result)
  {
LABEL_8:
    v22 = *result;
    return (uint64_t (***)())((uint64_t (*)(uint64_t (***)(), uint64_t, uint64_t, uint64_t))v22[1])(result, v16, v17, v18);
  }
  return result;
}

uint64_t WebCore::PeerConnectionBackend::setRemoteDescriptionSucceeded(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, char a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t (***v42)();
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t (**v47)();
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t (***v77)();

  v12 = *(_QWORD *)(a1 + 64);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v14 = *(_QWORD *)(a1 + 72);
  v59 = v13;
  v60 = v15;
  *(_QWORD *)&v61 = "setRemoteDescriptionSucceeded";
  *((_QWORD *)&v61 + 1) = v14;
  if (*(_BYTE *)(v12 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [33]>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v59, "Set remote description succeeded");
  if (*(_BYTE *)(a3 + 16))
  {
    v16 = *(_QWORD *)(a1 + 64);
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v18 = *(_QWORD *)(a1 + 72);
    v59 = v17;
    v60 = v19;
    *(_QWORD *)&v61 = "setRemoteDescriptionSucceeded";
    *((_QWORD *)&v61 + 1) = v18;
    if (!*(_BYTE *)(a3 + 16))
    {
      __break(1u);
LABEL_26:
      v77 = 0;
      v47 = off_1E3360610;
      goto LABEL_23;
    }
    if (*(_BYTE *)(v16 + 12) && WebCore::LogWebRTC && byte_1ECE7CD50 >= 4u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [21],WTF::Vector<WebCore::PeerConnectionBackend::TransceiverState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((WTF::Logger::LogSiteIdentifier *)&v59, (uint64_t *)a3);
  }
  v20 = a5;
  v21 = *(_QWORD *)(a1 + 16);
  v22 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  v58 = v22;
  v59 = a1;
  v60 = v22;
  LOBYTE(v61) = 0;
  v69 = 0;
  v23 = *(unsigned __int8 *)(a2 + 72);
  if (*(_BYTE *)(a2 + 72))
  {
    *(_QWORD *)&v61 = *(_QWORD *)a2;
    *(_QWORD *)((char *)&v61 + 5) = *(_QWORD *)(a2 + 5);
    v24 = *(_QWORD *)(a2 + 16);
    v25 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 16) = 0;
    v57 = v24;
    v62 = v24;
    v63 = v25;
    v55 = v25;
    v26 = *(_QWORD *)(a2 + 32);
    v27 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a2 + 32) = 0;
    v56 = v26;
    v64 = v26;
    v65 = v27;
    v53 = v27;
    v28 = *(_QWORD *)(a2 + 48);
    v29 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a2 + 48) = 0;
    v54 = v28;
    v66 = v28;
    v67 = v29;
    v30 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a2 + 64) = 0;
    v51 = v29;
    v52 = v30;
    v68 = v30;
    v69 = 1;
  }
  LOBYTE(v70) = 0;
  v72 = 0;
  v31 = *(unsigned __int8 *)(a3 + 16);
  if (*(_BYTE *)(a3 + 16))
  {
    v70 = *(_QWORD *)a3;
    v32 = *(_DWORD *)(a3 + 8);
    v33 = *(_DWORD *)(a3 + 12);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v49 = v33;
    v50 = v32;
    v71 = __PAIR64__(v33, v32);
    v72 = 1;
  }
  v34 = *a4;
  *a4 = 0;
  v73 = v34;
  *(_QWORD *)&v74 = v20;
  BYTE8(v74) = a6;
  v35 = *(_QWORD *)(a1 + 48);
  v75 = v35;
  v36 = *(_DWORD *)(a1 + 56);
  v37 = *(_DWORD *)(a1 + 60);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v76 = __PAIR64__(v37, v36);
  v38 = WTF::fastMalloc((WTF *)0xA8);
  v39 = v38;
  *(_QWORD *)v38 = off_1E33602D8;
  *(_QWORD *)(v38 + 8) = a1;
  v60 = 0;
  *(_QWORD *)(v38 + 16) = v58;
  *(_BYTE *)(v38 + 24) = 0;
  *(_BYTE *)(v38 + 96) = 0;
  if (v23)
  {
    *(_QWORD *)(v38 + 29) = *(_QWORD *)((char *)&v61 + 5);
    *(_QWORD *)(v38 + 24) = v61;
    *(_QWORD *)(v38 + 40) = v57;
    *(_QWORD *)(v38 + 48) = v55;
    v62 = 0;
    v64 = 0;
    *(_QWORD *)(v38 + 56) = v56;
    *(_QWORD *)(v38 + 64) = v53;
    *(_QWORD *)(v38 + 72) = v54;
    *(_QWORD *)(v38 + 80) = v51;
    v66 = 0;
    v68 = 0;
    *(_QWORD *)(v38 + 88) = v52;
    *(_BYTE *)(v38 + 96) = 1;
  }
  *(_BYTE *)(v38 + 104) = 0;
  *(_BYTE *)(v38 + 120) = 0;
  if (v31)
  {
    *(_QWORD *)(v38 + 104) = v70;
    v70 = 0;
    v71 = 0;
    *(_DWORD *)(v38 + 112) = v50;
    *(_DWORD *)(v38 + 116) = v49;
    *(_BYTE *)(v38 + 120) = 1;
  }
  *(_QWORD *)(v38 + 128) = v34;
  *(_OWORD *)(v38 + 136) = v74;
  v73 = 0;
  *(_QWORD *)(v38 + 152) = v35;
  v75 = 0;
  v76 = 0;
  *(_DWORD *)(v38 + 160) = v36;
  *(_DWORD *)(v38 + 164) = v37;
  v40 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v40 = 1;
  v41 = *(_DWORD *)(v21 + 24);
  *(_QWORD *)(v40 + 8) = v21;
  ++*(_QWORD *)(v21 + 48);
  *(_DWORD *)(v21 + 24) = v41 + 2;
  v42 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *v42 = off_1E3360610;
  v42[1] = (uint64_t (**)())v21;
  v42[2] = (uint64_t (**)())v40;
  v42[3] = (uint64_t (**)())v39;
  v77 = v42;
  v43 = *(_QWORD *)(v21 + 40);
  if (!v43)
    goto LABEL_26;
  v44 = *(_QWORD *)(v43 + 8);
  if (v44)
  {
    v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v44 - 96) + 104))(v44 - 96);
    WebCore::EventLoopTaskGroup::queueTask(v45, 11, (uint64_t *)&v77);
    v42 = v77;
    v77 = 0;
    if (!v42)
      return WebCore::PeerConnectionBackend::setRemoteDescriptionSucceeded(std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&,std::optional<WTF::Vector<WebCore::PeerConnectionBackend::TransceiverState,0ul,std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&::CrashOnOverflow,16ul,std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&::FastMalloc>> &&,std::unique_ptr<WebCore::RTCSctpTransportBackend,std::default_delete<std::optional<WTF::Vector<WebCore::PeerConnectionBackend::TransceiverState,0ul,std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&::CrashOnOverflow,16ul,std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&::FastMalloc>> &&>> &&,std::optional<double>)::$_0::~$_0((uint64_t)&v59, v46);
  }
  else
  {
    v77 = 0;
  }
  v47 = *v42;
LABEL_23:
  v47[1]();
  return WebCore::PeerConnectionBackend::setRemoteDescriptionSucceeded(std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&,std::optional<WTF::Vector<WebCore::PeerConnectionBackend::TransceiverState,0ul,std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&::CrashOnOverflow,16ul,std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&::FastMalloc>> &&,std::unique_ptr<WebCore::RTCSctpTransportBackend,std::default_delete<std::optional<WTF::Vector<WebCore::PeerConnectionBackend::TransceiverState,0ul,std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&::CrashOnOverflow,16ul,std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&::FastMalloc>> &&>> &&,std::optional<double>)::$_0::~$_0((uint64_t)&v59, v46);
}

uint64_t WebCore::PeerConnectionBackend::setRemoteDescriptionSucceeded(std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&,std::optional<WTF::Vector<WebCore::PeerConnectionBackend::TransceiverState,0ul,std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&::CrashOnOverflow,16ul,std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&::FastMalloc>> &&,std::unique_ptr<WebCore::RTCSctpTransportBackend,std::default_delete<std::optional<WTF::Vector<WebCore::PeerConnectionBackend::TransceiverState,0ul,std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&::CrashOnOverflow,16ul,std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&::FastMalloc>> &&>> &&,std::optional<double>)::$_0::~$_0(uint64_t a1, void *a2)
{
  uint64_t v3;
  WebCore::PeerConnectionBackend::PendingTrackEvent *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 156);
  if ((_DWORD)v3)
  {
    v4 = *(WebCore::PeerConnectionBackend::PendingTrackEvent **)(a1 + 144);
    v5 = 40 * v3;
    do
    {
      WebCore::PeerConnectionBackend::PendingTrackEvent::~PendingTrackEvent(v4, a2);
      v4 = (WebCore::PeerConnectionBackend::PendingTrackEvent *)(v6 + 40);
      v5 -= 40;
    }
    while (v5);
  }
  v7 = *(WTF **)(a1 + 144);
  if (v7)
  {
    *(_QWORD *)(a1 + 144) = 0;
    *(_DWORD *)(a1 + 152) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (*(_BYTE *)(a1 + 112))
  {
    v9 = *(unsigned int *)(a1 + 108);
    if ((_DWORD)v9)
      WTF::VectorDestructor<true,WebCore::PeerConnectionBackend::TransceiverState>::destruct(*(WTF::StringImpl **)(a1 + 96), (WTF::StringImpl *)(*(_QWORD *)(a1 + 96) + 32 * v9));
    v10 = *(WTF **)(a1 + 96);
    if (v10)
    {
      *(_QWORD *)(a1 + 96) = 0;
      *(_DWORD *)(a1 + 104) = 0;
      WTF::fastFree(v10, a2);
    }
  }
  std::__optional_destruct_base<WebCore::PeerConnectionBackend::DescriptionStates,false>::~__optional_destruct_base[abi:sn180100](a1 + 16, (WTF::StringImpl *)a2);
  v11 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return a1;
}

uint64_t (***WebCore::PeerConnectionBackend::setRemoteDescriptionFailed(uint64_t a1, uint64_t *a2))()
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::PeerConnectionBackend::PendingTrackEvent *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t (***result)();
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (**v27)();
  uint64_t v28[4];

  v4 = *(_QWORD *)(a1 + 64);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v7 = *(_QWORD *)(a1 + 72);
  v28[0] = v5;
  v28[1] = (uint64_t)v6;
  v28[2] = (uint64_t)"setRemoteDescriptionFailed";
  v28[3] = v7;
  if (*(_BYTE *)(v4 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [25],WTF::String>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v28, "Set remote description failed:", a2 + 1);
  if (*(_DWORD *)(a1 + 56))
  {
    v8 = *(unsigned int *)(a1 + 60);
    if ((_DWORD)v8)
    {
      v9 = *(WebCore::PeerConnectionBackend::PendingTrackEvent **)(a1 + 48);
      v10 = 40 * v8;
      do
      {
        WebCore::PeerConnectionBackend::PendingTrackEvent::~PendingTrackEvent(v9, v6);
        v9 = (WebCore::PeerConnectionBackend::PendingTrackEvent *)(v11 + 40);
        v10 -= 40;
      }
      while (v10);
      *(_DWORD *)(a1 + 60) = 0;
    }
    v12 = *(WTF **)(a1 + 48);
    if (v12)
    {
      *(_QWORD *)(a1 + 48) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      WTF::fastFree(v12, v6);
    }
  }
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  v15 = *(_BYTE *)a2;
  v16 = a2[1];
  a2[1] = 0;
  v17 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v17 = &off_1E3360300;
  *(_QWORD *)(v17 + 8) = a1;
  *(_QWORD *)(v17 + 16) = v14;
  *(_BYTE *)(v17 + 24) = v15;
  *(_QWORD *)(v17 + 32) = v16;
  v18 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v18 = 1;
  v19 = *(_DWORD *)(v13 + 24);
  *(_QWORD *)(v18 + 8) = v13;
  ++*(_QWORD *)(v13 + 48);
  *(_DWORD *)(v13 + 24) = v19 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = off_1E3360610;
  result[1] = (uint64_t (**)())v13;
  result[2] = (uint64_t (**)())v18;
  result[3] = (uint64_t (**)())v17;
  v28[0] = (uint64_t)result;
  v24 = *(_QWORD *)(v13 + 40);
  if (!v24)
  {
    v28[0] = 0;
    v27 = off_1E3360610;
    return (uint64_t (***)())((uint64_t (*)(uint64_t (***)(), uint64_t, uint64_t, uint64_t))v27[1])(result, v21, v22, v23);
  }
  v25 = *(_QWORD *)(v24 + 8);
  if (!v25)
  {
    v28[0] = 0;
    goto LABEL_15;
  }
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v25 - 96) + 104))(v25 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v26, 11, v28);
  result = (uint64_t (***)())v28[0];
  v28[0] = 0;
  if (result)
  {
LABEL_15:
    v27 = *result;
    return (uint64_t (***)())((uint64_t (*)(uint64_t (***)(), uint64_t, uint64_t, uint64_t))v27[1])(result, v21, v22, v23);
  }
  return result;
}

uint64_t (***WebCore::PeerConnectionBackend::iceGatheringStateChanged(uint64_t a1, int a2))()
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t (***result)();
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v12)();
  uint64_t (***v13)();

  v4 = *(_QWORD *)(a1 + 16);
  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v5 = off_1E3360328;
  *(_QWORD *)(v5 + 8) = a1;
  *(_DWORD *)(v5 + 16) = a2;
  v6 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  v7 = *(_DWORD *)(v4 + 24);
  *(_QWORD *)(v6 + 8) = v4;
  ++*(_QWORD *)(v4 + 48);
  *(_DWORD *)(v4 + 24) = v7 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = off_1E3360610;
  result[1] = (uint64_t (**)())v4;
  result[2] = (uint64_t (**)())v6;
  result[3] = (uint64_t (**)())v5;
  v13 = result;
  v9 = *(_QWORD *)(v4 + 40);
  if (!v9)
  {
    v13 = 0;
    v12 = off_1E3360610;
    return (uint64_t (***)())v12[1]();
  }
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
  {
    v13 = 0;
    goto LABEL_6;
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v10 - 96) + 104))(v10 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v11, 11, (uint64_t *)&v13);
  result = v13;
  v13 = 0;
  if (result)
  {
LABEL_6:
    v12 = *result;
    return (uint64_t (***)())v12[1]();
  }
  return result;
}

WTF::StringImpl *WebCore::PeerConnectionBackend::addIceCandidate(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  char v23;
  NSObject *v24;
  WTF::StringImpl *result;
  WTF::StringImpl *v26;
  uint64_t v27;
  void *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  _QWORD *v34;
  WTF::StringImpl *v35;
  uint8_t *v36;
  unsigned int v37;
  unsigned int v38;
  BOOL v39;
  uint8_t buf[8];
  WTF::StringImpl *v41;
  uint64_t v42;

  if (!a2)
  {
LABEL_60:
    *(_QWORD *)buf = 0;
    v41 = 0;
    v42 = 0;
    result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint8_t *))(*(_QWORD *)*a3 + 16))(*a3, buf);
    if ((_BYTE)v42)
    {
      result = v41;
      v41 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v26);
        else
          *(_DWORD *)result -= 2;
      }
    }
    return result;
  }
  v6 = *(_QWORD *)(a2 + 16);
  if (v6)
  {
    v7 = *(unsigned int *)(v6 + 16);
    v8 = *(_QWORD *)(v6 + 8);
    LODWORD(v6) = *(_DWORD *)(v6 + 4);
    v9 = (v7 >> 2) & 1;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  *(_QWORD *)buf = v8;
  v41 = (WTF::StringImpl *)(v6 | (unint64_t)(v9 << 32));
  LOWORD(v42) = 32;
  BYTE2(v42) = 0;
  v36 = buf;
  v37 = 0;
  v39 = (_DWORD)v6 == 0;
  WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v36);
  v10 = (int)v41;
  if (v37 != (_DWORD)v41 || !v39)
  {
    v11 = *((unsigned int *)v36 + 2);
    if (v11 > v37)
    {
      v12 = v38;
      if (v11 - v37 <= v38)
      {
        if (!v37)
          goto LABEL_11;
        v12 = v11 - v37;
      }
      if (v11 - (unint64_t)v37 < v12)
        goto LABEL_78;
    }
LABEL_11:
    WTF::StringView::SplitResult::Iterator::operator++();
    if (v37 == v10 && v39)
      goto LABEL_66;
    v13 = *((unsigned int *)v36 + 2);
    if (v13 > v37)
    {
      v14 = v38;
      if (v13 - v37 <= v38)
      {
        if (!v37)
          goto LABEL_18;
        v14 = v13 - v37;
      }
      if (v13 - (unint64_t)v37 < v14)
        goto LABEL_78;
    }
LABEL_18:
    WTF::StringView::SplitResult::Iterator::operator++();
    if (v37 == v10 && v39)
      goto LABEL_66;
    v15 = *((unsigned int *)v36 + 2);
    if (v15 > v37)
    {
      v16 = v38;
      if (v15 - v37 <= v38)
      {
        if (!v37)
          goto LABEL_25;
        v16 = v15 - v37;
      }
      if (v15 - (unint64_t)v37 < v16)
        goto LABEL_78;
    }
LABEL_25:
    WTF::StringView::SplitResult::Iterator::operator++();
    if (v37 == v10 && v39)
      goto LABEL_66;
    v17 = *((unsigned int *)v36 + 2);
    if (v17 > v37)
    {
      v18 = v38;
      if (v17 - v37 <= v38)
      {
        if (!v37)
          goto LABEL_33;
        v18 = v17 - v37;
      }
      if (v17 - (unint64_t)v37 < v18)
        goto LABEL_78;
    }
LABEL_33:
    WTF::StringView::SplitResult::Iterator::operator++();
    if (v37 == v10 && v39)
      goto LABEL_66;
    v19 = *((unsigned int *)v36 + 2);
    if (v19 <= v37)
      goto LABEL_45;
    LODWORD(v20) = v38;
    if (v19 - v37 <= v38)
    {
      if (!v37)
      {
        v20 = *((_QWORD *)v36 + 1);
        goto LABEL_44;
      }
      LODWORD(v20) = v19 - v37;
    }
    v20 = v20;
    v21 = v19 - v37;
    if (v36[12])
    {
      if (v21 >= v20)
      {
        v20 = v20 | 0x100000000;
        goto LABEL_44;
      }
LABEL_78:
      __break(1u);
      goto LABEL_45;
    }
    if (v21 < v20)
      goto LABEL_78;
LABEL_44:
    if ((v20 & 0xFF00000000) == 0)
    {
      WTF::String::String();
LABEL_46:
      if (v35)
      {
        if (WTF::StringImpl::endsWithIgnoringASCIICase() && (WTF::isVersion4UUID() & 1) == 0)
        {
          v24 = qword_1ECE7CD60;
          if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_error_impl(&dword_1940B8000, v24, OS_LOG_TYPE_ERROR, "mDNS candidate is not a Version 4 UUID", buf, 2u);
          }
          v23 = 1;
        }
        else
        {
          v23 = 0;
        }
        if (*(_DWORD *)v35 == 2)
        {
          WTF::StringImpl::destroy(v35, v22);
          if ((v23 & 1) != 0)
            goto LABEL_60;
        }
        else
        {
          *(_DWORD *)v35 -= 2;
          if ((v23 & 1) != 0)
            goto LABEL_60;
        }
      }
      goto LABEL_66;
    }
LABEL_45:
    WTF::String::String();
    goto LABEL_46;
  }
LABEL_66:
  v27 = a1[1];
  if (v27)
    goto LABEL_82;
  v27 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v27 = 1;
  *(_QWORD *)(v27 + 8) = a1;
  v29 = (unsigned int *)a1[1];
  a1[1] = v27;
  if (!v29)
    goto LABEL_82;
  do
  {
    v30 = __ldaxr(v29);
    v31 = v30 - 1;
  }
  while (__stlxr(v31, v29));
  if (!v31)
  {
    atomic_store(1u, v29);
    WTF::fastFree((WTF *)v29, v28);
  }
  v27 = a1[1];
  if (v27)
  {
LABEL_82:
    do
      v32 = __ldaxr((unsigned int *)v27);
    while (__stlxr(v32 + 1, (unsigned int *)v27));
  }
  v33 = *a3;
  *a3 = 0;
  v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v34 = &off_1E3360350;
  v34[1] = v27;
  v34[2] = v33;
  *(_QWORD *)buf = v34;
  (*(void (**)(_QWORD *, uint64_t, uint8_t *))(*a1 + 264))(a1, a2, buf);
  result = *(WTF::StringImpl **)buf;
  *(_QWORD *)buf = 0;
  if (result)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::PeerConnectionBackend::disableICECandidateFiltering(uint64_t this)
{
  *(_BYTE *)(this + 40) = 0;
  return this;
}

uint64_t WebCore::PeerConnectionBackend::newICECandidate(_QWORD *a1, _QWORD *a2, _QWORD *a3, __int16 a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t (***v24)();
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t (**v29)();
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  _QWORD *v38;
  _QWORD v39[2];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  char v47;
  uint64_t (***v48)();

  v13 = a1;
  v14 = a1[2];
  *(_QWORD *)&v36 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  *((_QWORD *)&v36 + 1) = v15;
  *(_QWORD *)&v37 = "newICECandidate";
  *((_QWORD *)&v37 + 1) = v13[9];
  v38 = v13;
  v16 = *a2;
  *a2 = 0;
  v35 = *a3;
  *a3 = 0;
  v33 = v16;
  v34 = *a5;
  *a5 = 0;
  LOBYTE(v39[0]) = 0;
  v47 = 0;
  v17 = *(unsigned __int8 *)(a6 + 72);
  if (*(_BYTE *)(a6 + 72))
  {
    v39[0] = *(_QWORD *)a6;
    *(_QWORD *)((char *)v39 + 5) = *(_QWORD *)(a6 + 5);
    v18 = *(_QWORD *)(a6 + 16);
    v19 = *(_QWORD *)(a6 + 24);
    *(_QWORD *)(a6 + 16) = 0;
    v31 = v19;
    v32 = v18;
    v40 = v18;
    v41 = v19;
    v7 = *(_QWORD *)(a6 + 32);
    v6 = *(_QWORD *)(a6 + 40);
    *(_QWORD *)(a6 + 32) = 0;
    v42 = v7;
    v43 = v6;
    a2 = *(_QWORD **)(a6 + 48);
    a3 = *(_QWORD **)(a6 + 56);
    *(_QWORD *)(a6 + 48) = 0;
    v44 = a2;
    v45 = a3;
    v13 = *(_QWORD **)(a6 + 64);
    *(_QWORD *)(a6 + 64) = 0;
    v46 = v13;
    v47 = 1;
  }
  v20 = WTF::fastMalloc((WTF *)0xA0);
  v21 = v20;
  *(_QWORD *)v20 = off_1E33603C0;
  *(_OWORD *)(v20 + 24) = v37;
  *(_OWORD *)(v20 + 8) = v36;
  *(_QWORD *)(v20 + 40) = v38;
  *(_QWORD *)(v20 + 48) = v33;
  *(_QWORD *)(v20 + 56) = v35;
  *(_WORD *)(v20 + 64) = a4;
  *(_QWORD *)(v20 + 72) = v34;
  *(_BYTE *)(v20 + 80) = 0;
  *(_BYTE *)(v20 + 152) = 0;
  if (v17)
  {
    *(_QWORD *)(v20 + 85) = *(_QWORD *)((char *)v39 + 5);
    *(_QWORD *)(v20 + 80) = v39[0];
    *(_QWORD *)(v20 + 96) = v32;
    *(_QWORD *)(v20 + 104) = v31;
    v40 = 0;
    v42 = 0;
    *(_QWORD *)(v20 + 112) = v7;
    *(_QWORD *)(v20 + 120) = v6;
    *(_QWORD *)(v20 + 128) = a2;
    *(_QWORD *)(v20 + 136) = a3;
    v44 = 0;
    v46 = 0;
    *(_QWORD *)(v20 + 144) = v13;
    *(_BYTE *)(v20 + 152) = 1;
  }
  v22 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v22 = 1;
  v23 = *(_DWORD *)(v14 + 24);
  *(_QWORD *)(v22 + 8) = v14;
  ++*(_QWORD *)(v14 + 48);
  *(_DWORD *)(v14 + 24) = v23 + 2;
  v24 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *v24 = off_1E3360610;
  v24[1] = (uint64_t (**)())v14;
  v24[2] = (uint64_t (**)())v22;
  v24[3] = (uint64_t (**)())v21;
  v48 = v24;
  v25 = *(_QWORD *)(v14 + 40);
  if (v25)
  {
    v26 = *(_QWORD *)(v25 + 8);
    if (v26)
    {
      v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v26 - 96) + 104))(v26 - 96);
      WebCore::EventLoopTaskGroup::queueTask(v27, 11, (uint64_t *)&v48);
      v24 = v48;
      v48 = 0;
      if (!v24)
        goto LABEL_12;
    }
    else
    {
      v48 = 0;
    }
    v29 = *v24;
  }
  else
  {
    v48 = 0;
    v29 = off_1E3360610;
  }
  v29[1]();
LABEL_12:
  std::__optional_destruct_base<WebCore::PeerConnectionBackend::DescriptionStates,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v39, v28);
  return 0;
}

uint64_t (***WebCore::PeerConnectionBackend::newDataChannel(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4))()
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t (***result)();
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (**v15)();
  uint64_t v16;
  uint64_t (***v17)();
  uint64_t v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 16);
  ++*(_DWORD *)(v4 + 24);
  v5 = *a3;
  *a3 = 0;
  v6 = *a2;
  *a2 = 0;
  v18 = *a4;
  v19 = *((_BYTE *)a4 + 8);
  v7 = a4[2];
  a4[2] = 0;
  LODWORD(v16) = *((_DWORD *)a4 + 6);
  *(_DWORD *)((char *)&v16 + 3) = *(_DWORD *)((char *)a4 + 27);
  v8 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v8 = &off_1E33603E8;
  *(_QWORD *)(v8 + 8) = v4;
  *(_QWORD *)(v8 + 16) = v5;
  *(_QWORD *)(v8 + 24) = v6;
  *(_QWORD *)(v8 + 32) = v18;
  *(_BYTE *)(v8 + 40) = v19;
  *(_QWORD *)(v8 + 48) = v7;
  *(_DWORD *)(v8 + 56) = v16;
  *(_DWORD *)(v8 + 59) = *(_DWORD *)((char *)&v16 + 3);
  v9 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v9 = 1;
  v10 = *(_DWORD *)(v4 + 24);
  *(_QWORD *)(v9 + 8) = v4;
  ++*(_QWORD *)(v4 + 48);
  *(_DWORD *)(v4 + 24) = v10 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = off_1E3360610;
  result[1] = (uint64_t (**)())v4;
  result[2] = (uint64_t (**)())v9;
  result[3] = (uint64_t (**)())v8;
  v17 = result;
  v12 = *(_QWORD *)(v4 + 40);
  if (!v12)
  {
    v17 = 0;
    v15 = off_1E3360610;
    return (uint64_t (***)())v15[1]();
  }
  v13 = *(_QWORD *)(v12 + 8);
  if (!v13)
  {
    v17 = 0;
    goto LABEL_6;
  }
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v13 - 96) + 104))(v13 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v14, 11, (uint64_t *)&v17);
  result = v17;
  v17 = 0;
  if (result)
  {
LABEL_6:
    v15 = *result;
    return (uint64_t (***)())v15[1]();
  }
  return result;
}

uint64_t WebCore::PeerConnectionBackend::addTrack@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a1 = 6;
  *(_DWORD *)(a1 + 16) = 1;
  return result;
}

uint64_t WebCore::PeerConnectionBackend::addTransceiver@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a1 = 6;
  *(_DWORD *)(a1 + 16) = 1;
  return result;
}

{
  uint64_t result;

  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a1 = 6;
  *(_DWORD *)(a1 + 16) = 1;
  return result;
}

WTF::StringImpl *WebCore::PeerConnectionBackend::generateCertificate(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v20;
  WTF::StringImpl *result;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24[2];
  __int128 v25;
  uint64_t v26;
  WTF::StringImpl *v27;

  v4 = *(_QWORD *)(a1 + 528);
  if (v4 && (v5 = *(_QWORD *)(v4 + 8)) != 0 && (v6 = *(_QWORD *)(v5 + 24)) != 0 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
  {
    v9 = *(unsigned __int8 **)(v7 + 296);
    WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(a1 + 192), (WTF::StringImpl *)a2);
    v11 = v10;
    do
      v12 = __ldaxr(v10);
    while (__stlxr(v12 + 1, v10));
    v13 = *a3;
    *a3 = 0;
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v14 = &off_1E3360420;
    v14[1] = v13;
    v15 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v15 = 1;
    *(_QWORD *)(v15 + 8) = v11;
    *(_QWORD *)(v15 + 16) = v14;
    v16 = *(unsigned __int8 *)(a2 + 16);
    v17 = (unint64_t)*(double *)(a2 + 8);
    v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v24 = *(_OWORD *)a2;
    v25 = v18;
    LODWORD(v26) = *(_DWORD *)(a2 + 32);
    if (v16)
      v19 = v17;
    else
      v19 = 0;
    v20 = WTF::fastMalloc((WTF *)0x48);
    *(_QWORD *)v20 = &off_1E33629F8;
    *(_OWORD *)(v20 + 8) = *(_OWORD *)v24;
    *(_OWORD *)(v20 + 24) = v25;
    *(_QWORD *)(v20 + 40) = v26;
    *(_QWORD *)(v20 + 48) = v19;
    *(_BYTE *)(v20 + 56) = v16;
    *(_QWORD *)(v20 + 64) = v15;
    v27 = (WTF::StringImpl *)v20;
    WebCore::LibWebRTCProvider::prepareCertificateGenerator(v9, (uint64_t *)&v27);
    result = v27;
    if (v27)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v27 + 8))(v27);
  }
  else
  {
    v22 = *a3;
    v24[0] = 0;
    WebCore::DeferredPromise::reject(v22, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)v24, 0);
    result = v24[0];
    v24[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v23);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::LogArgument<WTF::Vector<WebCore::PeerConnectionBackend::TransceiverState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::toString(WTF::JSONImpl::Array *a1, uint64_t *a2)
{
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  const WTF::String *v13;
  WTF::StringImpl *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  const WTF::String *v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  WTF::StringImpl *v32;
  bmalloc::api *v33;
  void *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v43;
  const WTF::String *v44;
  WTF::StringImpl *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void *v58;
  void *v59;
  _QWORD *v60;
  WTF *v61;
  uint64_t v62;
  WebCore::MediaStream *v63;
  bmalloc::api *v64;
  void *v65;
  WTF *v66;
  _DWORD **v67;
  uint64_t v68;
  _DWORD *v69;
  _DWORD **v70;
  uint64_t v71;
  _DWORD *v72;
  _DWORD **v73;
  uint64_t v74;
  _DWORD *v75;
  uint64_t result;
  uint64_t v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  WTF *v80;
  int v81;
  unsigned int v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  WTF::StringImpl *v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  _QWORD v88[2];
  char v89;

  v3 = (WTF *)WTF::JSONImpl::Array::create(a1);
  v4 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v4)
  {
    v5 = *a2;
    v6 = *a2 + 32 * v4;
    do
    {
      v7 = *(WTF::StringImpl **)v5;
      if (*(_QWORD *)v5)
        *(_DWORD *)v7 += 2;
      v79 = v7;
      v8 = *(unsigned int *)(v5 + 20);
      v80 = 0;
      v81 = 0;
      v82 = v8;
      if ((_DWORD)v8)
      {
        if (v8 >> 29)
          goto LABEL_129;
        v3 = (WTF *)WTF::fastMalloc((WTF *)(8 * v8));
        v81 = v8;
        v80 = v3;
        v9 = *(unsigned int *)(v5 + 20);
        if ((_DWORD)v9)
        {
          v10 = *(uint64_t **)(v5 + 8);
          v11 = 8 * v9;
          do
          {
            v12 = *v10++;
            ++*(_DWORD *)(v12 + 88);
            *(_QWORD *)v3 = v12;
            v3 = (WTF *)((char *)v3 + 8);
            v11 -= 8;
          }
          while (v11);
        }
      }
      v83 = *(_QWORD *)(v5 + 24);
      WTF::JSONImpl::Object::create(v3);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v79, v13);
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v78 + 16), &v86, (const WTF::StringImpl *)&v87, (uint64_t)v88);
      if (v89)
      {
        v15 = (uint64_t *)(v78 + 24);
        v16 = *(unsigned int *)(v78 + 36);
        if ((_DWORD)v16 == *(_DWORD *)(v78 + 32))
        {
          v67 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v15, v16 + 1, (unint64_t)&v86);
          v16 = *(unsigned int *)(v78 + 36);
          v68 = *(_QWORD *)(v78 + 24);
          v69 = *v67;
          if (*v67)
            *v69 += 2;
          *(_QWORD *)(v68 + 8 * v16) = v69;
        }
        else
        {
          v17 = *v15;
          v18 = v86;
          if (v86)
            *(_DWORD *)v86 += 2;
          *(_QWORD *)(v17 + 8 * v16) = v18;
        }
        *(_DWORD *)(v78 + 36) = v16 + 1;
      }
      v19 = v87;
      v87 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v19;
      }
      v20 = v86;
      v86 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          v20 = (WTF::StringImpl *)WTF::StringImpl::destroy(v20, v14);
        else
          *(_DWORD *)v20 -= 2;
      }
      WTF::JSONImpl::Array::create(v20);
      if (v82)
      {
        v22 = v80;
        v23 = 8 * v82;
        do
        {
          v24 = *(_QWORD *)v22;
          *(_DWORD *)(v24 + 88) = *(_DWORD *)(*(_QWORD *)v22 + 88) + 1;
          v25 = v86;
          v26 = *(WTF::StringImpl **)(*(_QWORD *)(v24 + 96) + 48);
          if (v26)
            *(_DWORD *)v26 += 2;
          v87 = v26;
          WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v87, v21);
          v27 = *((unsigned int *)v25 + 7);
          if ((_DWORD)v27 == *((_DWORD *)v25 + 6))
          {
            v28 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)v25 + 2, v27 + 1, (unint64_t)v88);
            v27 = *((unsigned int *)v25 + 7);
            v29 = *((_QWORD *)v25 + 2);
            v30 = *(_QWORD *)v28;
            *(_QWORD *)v28 = 0;
          }
          else
          {
            v29 = *((_QWORD *)v25 + 2);
            v30 = v88[0];
            v88[0] = 0;
          }
          *(_QWORD *)(v29 + 8 * v27) = v30;
          *((_DWORD *)v25 + 7) = v27 + 1;
          v31 = (_DWORD *)v88[0];
          v88[0] = 0;
          if (v31)
          {
            if (*v31 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v31;
          }
          v32 = v87;
          v87 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, v21);
            else
              *(_DWORD *)v32 -= 2;
          }
          if (*(_DWORD *)(v24 + 88) == 1)
          {
            WebCore::MediaStream::~MediaStream((WebCore::MediaStream *)v24);
            bmalloc::api::isoDeallocate(v33, v34);
          }
          else
          {
            --*(_DWORD *)(v24 + 88);
          }
          v22 = (WTF *)((char *)v22 + 8);
          v23 -= 8;
        }
        while (v23);
      }
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v35 = v86;
      v86 = 0;
      v87 = (WTF::StringImpl *)v88[0];
      v85 = v35;
      WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v78 + 16), &v87, (const WTF::StringImpl *)&v85, (uint64_t)v88);
      if (v89)
      {
        v37 = (uint64_t *)(v78 + 24);
        v38 = *(unsigned int *)(v78 + 36);
        if ((_DWORD)v38 == *(_DWORD *)(v78 + 32))
        {
          v70 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v37, v38 + 1, (unint64_t)&v87);
          v38 = *(unsigned int *)(v78 + 36);
          v71 = *(_QWORD *)(v78 + 24);
          v72 = *v70;
          if (*v70)
            *v72 += 2;
          *(_QWORD *)(v71 + 8 * v38) = v72;
        }
        else
        {
          v39 = *v37;
          v40 = v87;
          if (v87)
            *(_DWORD *)v87 += 2;
          *(_QWORD *)(v39 + 8 * v38) = v40;
        }
        *(_DWORD *)(v78 + 36) = v38 + 1;
      }
      v41 = v85;
      v85 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v41;
      }
      v42 = v87;
      v87 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v36);
        else
          *(_DWORD *)v42 -= 2;
      }
      v43 = v83;
      if ((v83 & 0xFF00000000) != 0)
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        {
          WebCore::convertEnumerationToString(WebCore::RTCRtpTransceiverDirection)::$_0::operator() const(void)::impl += 2;
          WebCore::convertEnumerationToString(WebCore::RTCRtpTransceiverDirection)::$_1::operator() const(void)::impl += 2;
          WebCore::convertEnumerationToString(WebCore::RTCRtpTransceiverDirection)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCRtpTransceiverDirection)::$_0::operator() const(void)::impl;
          unk_1EE2F4B70 = &WebCore::convertEnumerationToString(WebCore::RTCRtpTransceiverDirection)::$_1::operator() const(void)::impl;
          WebCore::convertEnumerationToString(WebCore::RTCRtpTransceiverDirection)::$_2::operator() const(void)::impl += 2;
          WebCore::convertEnumerationToString(WebCore::RTCRtpTransceiverDirection)::$_3::operator() const(void)::impl += 2;
          qword_1EE2F4B78 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCRtpTransceiverDirection)::$_2::operator() const(void)::impl;
          unk_1EE2F4B80 = &WebCore::convertEnumerationToString(WebCore::RTCRtpTransceiverDirection)::$_3::operator() const(void)::impl;
        }
        v45 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::RTCRtpTransceiverDirection)::values[v43];
        if (v45)
          *(_DWORD *)v45 += 2;
        v84 = v45;
        WTF::JSONImpl::Value::create((WTF::JSONImpl::Value *)&v84, v44);
        WTF::HashMap<WTF::String,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>,WTF::HashTableTraits>::inlineSet<WTF::String const&,WTF::Ref<WTF::JSONImpl::Value,WTF::RawPtrTraits<WTF::JSONImpl::Value>,WTF::DefaultRefDerefTraits<WTF::JSONImpl::Value>>>((uint64_t *)(v78 + 16), &v85, (const WTF::StringImpl *)&v87, (uint64_t)v88);
        if (v89)
        {
          v46 = (uint64_t *)(v78 + 24);
          v47 = *(unsigned int *)(v78 + 36);
          if ((_DWORD)v47 == *(_DWORD *)(v78 + 32))
          {
            v73 = (_DWORD **)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v46, v47 + 1, (unint64_t)&v85);
            v47 = *(unsigned int *)(v78 + 36);
            v74 = *(_QWORD *)(v78 + 24);
            v75 = *v73;
            if (*v73)
              *v75 += 2;
            *(_QWORD *)(v74 + 8 * v47) = v75;
          }
          else
          {
            v48 = *v46;
            v49 = v85;
            if (v85)
              *(_DWORD *)v85 += 2;
            *(_QWORD *)(v48 + 8 * v47) = v49;
          }
          *(_DWORD *)(v78 + 36) = v47 + 1;
        }
        v50 = v87;
        v87 = 0;
        if (v50)
        {
          if (*(_DWORD *)v50 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v50;
        }
        v51 = v84;
        v84 = 0;
        if (v51)
        {
          if (*(_DWORD *)v51 == 2)
            WTF::StringImpl::destroy(v51, v36);
          else
            *(_DWORD *)v51 -= 2;
        }
        v52 = v85;
        v85 = 0;
        if (v52)
        {
          if (*(_DWORD *)v52 == 2)
            WTF::StringImpl::destroy(v52, v36);
          else
            *(_DWORD *)v52 -= 2;
        }
      }
      v53 = v86;
      v86 = 0;
      if (v53)
      {
        if (*(_DWORD *)v53 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v53;
      }
      v54 = *(unsigned int *)(v77 + 28);
      if ((_DWORD)v54 == *(_DWORD *)(v77 + 24))
      {
        v55 = v54 + (v54 >> 2);
        if (v55 >= 0x10)
          v56 = v55 + 1;
        else
          v56 = 16;
        if (v56 <= v54 + 1)
          v57 = v54 + 1;
        else
          v57 = v56;
        if (v57 >> 29)
        {
LABEL_129:
          __break(0xC471u);
          JUMPOUT(0x195486118);
        }
        v58 = *(void **)(v77 + 16);
        v59 = (void *)WTF::fastMalloc((WTF *)(8 * v57));
        *(_DWORD *)(v77 + 24) = v57;
        *(_QWORD *)(v77 + 16) = v59;
        memcpy(v59, v58, 8 * v54);
        if (v58)
        {
          if (*(void **)(v77 + 16) == v58)
          {
            *(_QWORD *)(v77 + 16) = 0;
            *(_DWORD *)(v77 + 24) = 0;
          }
          WTF::fastFree((WTF *)v58, v36);
        }
        v54 = *(unsigned int *)(v77 + 28);
        v60 = (_QWORD *)(*(_QWORD *)(v77 + 16) + 8 * v54);
      }
      else
      {
        v60 = (_QWORD *)(*(_QWORD *)(v77 + 16) + 8 * v54);
      }
      *v60 = v78;
      *(_DWORD *)(v77 + 28) = v54 + 1;
      v78 = 0;
      if (v82)
      {
        v61 = v80;
        v62 = 8 * v82;
        do
        {
          v63 = *(WebCore::MediaStream **)v61;
          *(_QWORD *)v61 = 0;
          if (v63)
          {
            if (*((_DWORD *)v63 + 22) == 1)
            {
              WebCore::MediaStream::~MediaStream(v63);
              bmalloc::api::isoDeallocate(v64, v65);
            }
            else
            {
              --*((_DWORD *)v63 + 22);
            }
          }
          v61 = (WTF *)((char *)v61 + 8);
          v62 -= 8;
        }
        while (v62);
      }
      v66 = v80;
      if (v80)
      {
        v80 = 0;
        v81 = 0;
        WTF::fastFree(v66, v36);
      }
      v3 = v79;
      v79 = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          v3 = (WTF *)WTF::StringImpl::destroy(v3, v36);
        else
          *(_DWORD *)v3 -= 2;
      }
      v5 += 32;
    }
    while (v5 != v6);
  }
  WTF::JSONImpl::Value::toJSONString((WTF::JSONImpl::Value *)v77);
  result = v77;
  if (v77)
  {
    if (*(_DWORD *)v77 == 1)
      return WTF::JSONImpl::Value::operator delete();
    else
      --*(_DWORD *)v77;
  }
  return result;
}

double WebCore::RTCController::RTCController(WebCore::RTCController *this)
{
  double result;

  *(_DWORD *)this = 1;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = 0;
  *((_BYTE *)this + 48) = 1;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 7) = 0;
  return result;
}

void WebCore::RTCController::~RTCController(WebCore::RTCController *this, WTF *a2)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  bmalloc::api *v15;
  void *v16;
  void *v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  WTF *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;

  v4 = (uint64_t *)((char *)this + 32);
  v3 = *((_QWORD *)this + 4);
  if (!v3)
  {
    v5 = 0;
    v6 = 0;
LABEL_3:
    v7 = (_QWORD *)(v3 + 8 * v6);
    goto LABEL_4;
  }
  v6 = *(unsigned int *)(v3 - 4);
  v7 = (_QWORD *)(v3 + 8 * v6);
  if (!*(_DWORD *)(v3 - 12))
  {
    v5 = (_QWORD *)(v3 + 8 * v6);
    goto LABEL_3;
  }
  v5 = (_QWORD *)*((_QWORD *)this + 4);
  if ((_DWORD)v6)
  {
    v11 = 8 * v6;
    v5 = (_QWORD *)*((_QWORD *)this + 4);
    while ((unint64_t)(*v5 + 1) <= 1)
    {
      ++v5;
      v11 -= 8;
      if (!v11)
      {
        v5 = v7;
        break;
      }
    }
  }
LABEL_4:
  v40 = (char *)this + 32;
  v41 = v5;
  v42 = v7;
  if (v3)
  {
    v9 = *(unsigned int *)(v3 - 4);
    v8 = (_QWORD *)(v3 + 8 * v9);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v43 = v8;
  v44 = v3 + 8 * v9;
  if (v5 == v8)
  {
    if (!v3)
    {
LABEL_9:
      v10 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    if (!*(_QWORD *)(*v5 + 8))
    {
      v36 = v5;
      do
      {
        v37 = v36 + 1;
        v36 = v7;
        if (v37 != v7)
        {
          v36 = v37;
          while ((unint64_t)(*v36 + 1) <= 1)
          {
            if (++v36 == v7)
            {
              v36 = v7;
              break;
            }
          }
        }
        v5 = v8;
        if (v36 == v8)
          break;
        v5 = v36;
      }
      while (!*(_QWORD *)(*v36 + 8));
    }
    v41 = v5;
    if (!v3)
      goto LABEL_9;
  }
  v10 = (_QWORD *)(v3 + 8 * *(unsigned int *)(v3 - 4));
LABEL_19:
  while (v5 != v10)
  {
    v12 = *(_QWORD *)(*v5 + 8);
    v13 = *(_DWORD *)(v12 + 24);
    *(_DWORD *)(v12 + 24) = v13 + 1;
    *(_QWORD *)(v12 + 184) = 0;
    if (v13)
    {
      *(_DWORD *)(v12 + 24) = v13;
    }
    else
    {
      WebCore::RTCPeerConnection::~RTCPeerConnection((WebCore::RTCPeerConnection *)v12, a2);
      bmalloc::api::isoDeallocate(v15, v16);
    }
    v14 = v5 + 1;
    v41 = v5 + 1;
    while (v14 != v42 && (unint64_t)(*v14 + 1) <= 1)
      v41 = ++v14;
    WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v40);
    v5 = v41;
    ++*((_DWORD *)v40 + 2);
  }
  WebCore::RTCController::stopGatheringLogs(this, a2);
  v18 = (WTF *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v18)
  {
    v19 = *((_QWORD *)v18 + 3);
    *((_QWORD *)v18 + 3) = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    WTF::fastFree(v18, v17);
  }
  v20 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v20)
  {
    do
    {
      v21 = __ldaxr((unsigned int *)v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, (unsigned int *)v20));
    if (!v22)
    {
      atomic_store(1u, (unsigned int *)v20);
      v34 = *(unsigned int *)(v20 + 28);
      if ((_DWORD)v34)
      {
        v39 = v20;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v20 + 16), (WTF::StringImpl *)(*(_QWORD *)(v20 + 16) + 32 * v34));
        v20 = v39;
      }
      v35 = *(WTF **)(v20 + 16);
      if (v35)
      {
        *(_QWORD *)(v20 + 16) = 0;
        *(_DWORD *)(v20 + 24) = 0;
        v38 = v20;
        WTF::fastFree(v35, v17);
        v20 = v38;
      }
      WTF::fastFree((WTF *)v20, v17);
    }
  }
  v23 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable(v4, v17);
  v25 = *((unsigned int *)this + 7);
  if ((_DWORD)v25)
  {
    v26 = (uint64_t *)*((_QWORD *)this + 2);
    v27 = 16 * v25;
    do
    {
      WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v26 + 1, v24);
      WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v26, v28);
      v26 += 2;
      v27 -= 16;
    }
    while (v27);
  }
  v29 = (WTF *)*((_QWORD *)this + 2);
  if (v29)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v29, v24);
  }
  v30 = *((_QWORD *)this + 1);
  if (v30)
  {
    *(_QWORD *)(v30 + 8) = 0;
    v31 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v31)
    {
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        atomic_store(1u, v31);
        WTF::fastFree((WTF *)v31, v24);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t **WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v2 = *a2;
  if (!*a2)
  {
    v3 = 0;
    v4 = 0;
LABEL_3:
    v5 = (uint64_t *)(v2 + 8 * v4);
    goto LABEL_4;
  }
  v4 = *(unsigned int *)(v2 - 4);
  v5 = (uint64_t *)(v2 + 8 * v4);
  if (!*(_DWORD *)(v2 - 12))
  {
    v3 = (uint64_t *)(v2 + 8 * v4);
    goto LABEL_3;
  }
  v3 = (uint64_t *)*a2;
  if ((_DWORD)v4)
  {
    v8 = 8 * v4;
    v3 = (uint64_t *)*a2;
    while ((unint64_t)(*v3 + 1) <= 1)
    {
      ++v3;
      v8 -= 8;
      if (!v8)
      {
        v3 = v5;
        break;
      }
    }
  }
LABEL_4:
  *result = a2;
  result[1] = v3;
  result[2] = v5;
  if (v2)
  {
    v7 = *(unsigned int *)(v2 - 4);
    v6 = (uint64_t *)(v2 + 8 * v7);
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  result[3] = v6;
  result[4] = (uint64_t *)(v2 + 8 * v7);
LABEL_7:
  while (v3 != v6 && !*(_QWORD *)(*v3 + 8))
  {
    v9 = v3 + 1;
    result[1] = v3 + 1;
    v3 = v5;
    if (v9 != v5)
    {
      v3 = v9;
      while ((unint64_t)(*v3 + 1) <= 1)
      {
        result[1] = ++v3;
        if (v3 == v5)
        {
          v3 = v5;
          goto LABEL_7;
        }
      }
    }
  }
  return result;
}

uint64_t **WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::end(uint64_t **result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = *a2;
  if (*a2)
  {
    v4 = *(unsigned int *)(v2 - 4);
    v3 = (uint64_t *)(v2 + 8 * v4);
    *result = a2;
    result[1] = v3;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    *result = a2;
    result[1] = 0;
  }
  result[2] = v3;
  result[3] = v3;
  result[4] = (uint64_t *)(v2 + 8 * v4);
  return result;
}

WebCore::RTCPeerConnection **WTF::Ref<WebCore::RTCPeerConnection,WTF::RawPtrTraits<WebCore::RTCPeerConnection>,WTF::DefaultRefDerefTraits<WebCore::RTCPeerConnection>>::~Ref(WebCore::RTCPeerConnection **a1, WTF *a2)
{
  WebCore::RTCPeerConnection *v3;
  bmalloc::api *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 1)
    {
      WebCore::RTCPeerConnection::~RTCPeerConnection(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 6);
    }
  }
  return a1;
}

_QWORD *WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[2];
  v3 = (_QWORD *)(a1[1] + 8);
  a1[1] = v3;
  while (v3 != v2 && (unint64_t)(*v3 + 1) <= 1)
    a1[1] = ++v3;
  WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(a1);
  ++*(_DWORD *)(*a1 + 8);
  return a1;
}

uint64_t WebCore::RTCController::stopGatheringLogs(WebCore::RTCController *this, void *a2)
{
  uint64_t result;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  _QWORD *v16;
  bmalloc::api *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;

  result = *((_QWORD *)this + 8);
  if (!result || !*(_QWORD *)(result + 8))
    return result;
  *((_QWORD *)this + 8) = 0;
  do
  {
    v4 = __ldaxr((unsigned int *)result);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, (unsigned int *)result));
  if (!v5)
  {
    atomic_store(1u, (unsigned int *)result);
    v21 = *(unsigned int *)(result + 28);
    if ((_DWORD)v21)
    {
      v26 = result;
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v21));
      result = v26;
    }
    v22 = *(WTF **)(result + 16);
    if (v22)
    {
      *(_QWORD *)(result + 16) = 0;
      *(_DWORD *)(result + 24) = 0;
      v25 = result;
      WTF::fastFree(v22, a2);
      result = v25;
    }
    WTF::fastFree((WTF *)result, a2);
  }
  result = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v6 = *((_QWORD *)this + 4);
  if (!v6)
  {
    v7 = 0;
    v8 = 0;
LABEL_10:
    v9 = (_QWORD *)(v6 + 8 * v8);
    goto LABEL_11;
  }
  v8 = *(unsigned int *)(v6 - 4);
  v9 = (_QWORD *)(v6 + 8 * v8);
  if (!*(_DWORD *)(v6 - 12))
  {
    v7 = (_QWORD *)(v6 + 8 * v8);
    goto LABEL_10;
  }
  v7 = (_QWORD *)*((_QWORD *)this + 4);
  if ((_DWORD)v8)
  {
    v13 = 8 * v8;
    v7 = (_QWORD *)*((_QWORD *)this + 4);
    while ((unint64_t)(*v7 + 1) <= 1)
    {
      ++v7;
      v13 -= 8;
      if (!v13)
      {
        v7 = v9;
        break;
      }
    }
  }
LABEL_11:
  v27 = (char *)this + 32;
  v28 = v7;
  v29 = v9;
  if (v6)
  {
    v11 = *(unsigned int *)(v6 - 4);
    v10 = (_QWORD *)(v6 + 8 * v11);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  v30 = v10;
  v31 = v6 + 8 * v11;
  if (v7 == v10)
  {
    if (!v6)
    {
LABEL_16:
      v12 = 0;
      goto LABEL_26;
    }
  }
  else
  {
    if (!*(_QWORD *)(*v7 + 8))
    {
      v23 = v7;
      do
      {
        v24 = v23 + 1;
        v23 = v9;
        if (v24 != v9)
        {
          v23 = v24;
          while ((unint64_t)(*v23 + 1) <= 1)
          {
            if (++v23 == v9)
            {
              v23 = v9;
              break;
            }
          }
        }
        v7 = v10;
        if (v23 == v10)
          break;
        v7 = v23;
      }
      while (!*(_QWORD *)(*v23 + 8));
    }
    v28 = v7;
    if (!v6)
      goto LABEL_16;
  }
  v12 = (_QWORD *)(v6 + 8 * *(unsigned int *)(v6 - 4));
LABEL_26:
  while (v7 != v12)
  {
    v14 = *(_QWORD *)(*v7 + 8);
    ++*(_DWORD *)(v14 + 24);
    (*(void (**)(_QWORD))(**(_QWORD **)(v14 + 120) + 224))(*(_QWORD *)(v14 + 120));
    if (*(_DWORD *)(v14 + 24) == 1)
    {
      WebCore::RTCPeerConnection::~RTCPeerConnection((WebCore::RTCPeerConnection *)v14, v15);
      bmalloc::api::isoDeallocate(v17, v18);
    }
    else
    {
      --*(_DWORD *)(v14 + 24);
    }
    v16 = v7 + 1;
    v28 = v7 + 1;
    if (v7 + 1 != v29)
    {
      while ((unint64_t)(*v16 + 1) <= 1)
      {
        if (++v16 == v29)
        {
          v16 = v29;
          break;
        }
      }
      v28 = v16;
    }
    result = (uint64_t)WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v27);
    v7 = v28;
    ++*((_DWORD *)v27 + 2);
  }
  v19 = *((_QWORD *)this + 9);
  if (v19)
  {
    if (*(_BYTE *)(v19 + 36))
    {
      *(_BYTE *)(v19 + 32) = 0;
      *(_BYTE *)(v19 + 36) = 0;
      result = rtc::LogMessage::RemoveLogToStream();
      v19 = *((_QWORD *)this + 9);
      *((_QWORD *)this + 9) = 0;
      if (!v19)
        return result;
    }
    else
    {
      *((_QWORD *)this + 9) = 0;
    }
    v20 = *(_QWORD *)(v19 + 24);
    *(_QWORD *)(v19 + 24) = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    return WTF::fastFree((WTF *)v19, a2);
  }
  return result;
}

WTF *WebCore::RTCController::reset(WebCore::RTCController *this, WTF *a2)
{
  WTF *result;
  WTF **v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF **v14;
  WTF *v15;
  WTF *v16;
  WebCore::RTCPeerConnection *v17;
  WTF **v18;
  WTF *v19;
  WTF *v20;
  WTF *v21;
  char *v22;

  *((_BYTE *)this + 48) = (_BYTE)a2;
  v4 = (WTF **)((char *)this + 32);
  result = (WTF *)*((_QWORD *)this + 4);
  if (!result)
  {
    v5 = 0;
    v6 = 0;
LABEL_3:
    v7 = (WTF *)((char *)result + 8 * v6);
    goto LABEL_4;
  }
  v6 = *((unsigned int *)result - 1);
  v7 = (WTF *)((char *)result + 8 * v6);
  if (!*((_DWORD *)result - 3))
  {
    v5 = (WTF *)((char *)result + 8 * v6);
    goto LABEL_3;
  }
  v5 = result;
  if ((_DWORD)v6)
  {
    v12 = 8 * v6;
    v5 = result;
    while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
    {
      v5 = (WTF *)((char *)v5 + 8);
      v12 -= 8;
      if (!v12)
      {
        v5 = v7;
        break;
      }
    }
  }
LABEL_4:
  v18 = v4;
  v19 = v5;
  v20 = v7;
  if (result)
  {
    v9 = *((unsigned int *)result - 1);
    v8 = (WTF *)((char *)result + 8 * v9);
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  v21 = v8;
  v22 = (char *)result + 8 * v9;
  if (v5 != v8)
  {
    if (!*(_QWORD *)(*(_QWORD *)v5 + 8))
    {
      v15 = v5;
      do
      {
        v16 = (WTF *)((char *)v15 + 8);
        v15 = v7;
        if (v16 != v7)
        {
          v15 = v16;
          while ((unint64_t)(*(_QWORD *)v15 + 1) <= 1)
          {
            v15 = (WTF *)((char *)v15 + 8);
            if (v15 == v7)
            {
              v15 = v7;
              break;
            }
          }
        }
        v5 = v8;
        if (v15 == v8)
          break;
        v5 = v15;
      }
      while (!*(_QWORD *)(*(_QWORD *)v15 + 8));
    }
    v19 = v5;
  }
  if (result)
    v10 = (WTF *)((char *)result + 8 * *((unsigned int *)result - 1));
  else
    v10 = 0;
  if (v5 != v10)
  {
    do
    {
      v13 = *(_QWORD *)(*(_QWORD *)v5 + 8);
      ++*(_DWORD *)(v13 + 24);
      v17 = (WebCore::RTCPeerConnection *)v13;
      *(_QWORD *)(v13 + 184) = 0;
      WTF::Ref<WebCore::RTCPeerConnection,WTF::RawPtrTraits<WebCore::RTCPeerConnection>,WTF::DefaultRefDerefTraits<WebCore::RTCPeerConnection>>::~Ref(&v17, a2);
      WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v18);
      v5 = v19;
    }
    while (v19 != v10);
    result = *v4;
  }
  if (result)
  {
    *((_QWORD *)this + 4) = 0;
    result = (WTF *)WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable((uint64_t)result, a2);
    v11 = *((_QWORD *)this + 4);
    *((_DWORD *)this + 10) = 0;
    if (v11)
    {
      LODWORD(v11) = *(_DWORD *)(v11 - 12);
      if (v11 > 0x7FFFFFFE)
        LODWORD(v11) = 0x7FFFFFFF;
    }
  }
  else
  {
    LODWORD(v11) = 0;
    *((_DWORD *)this + 10) = 0;
  }
  *((_DWORD *)this + 11) = 2 * v11;
  if (*((_DWORD *)this + 6))
  {
    v14 = (WTF **)((char *)this + 16);
    if (*((_DWORD *)this + 7))
      WTF::Vector<WebCore::RTCController::PeerConnectionOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((uint64_t *)this + 2, a2);
    result = *v14;
    if (*v14)
    {
      *((_QWORD *)this + 2) = 0;
      *((_DWORD *)this + 6) = 0;
      return (WTF *)WTF::fastFree(result, a2);
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::RTCController::PeerConnectionOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;

  if (*(_DWORD *)(result + 8))
  {
    v2 = result;
    if (*(_DWORD *)(result + 12))
      WTF::Vector<WebCore::RTCController::PeerConnectionOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink((uint64_t *)result, a2);
    result = *(_QWORD *)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)v2 = 0;
      *(_DWORD *)(v2 + 8) = 0;
      return WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

uint64_t WebCore::RTCController::shouldDisableICECandidateFiltering(WebCore::RTCController *this, WebCore::Document *a2)
{
  uint64_t v4;
  unint64_t v5;
  WebCore::SecurityContext *v6;
  WebCore::SecurityOrigin **v7;
  WebCore::SecurityOrigin *v8;
  WebCore::SecurityOrigin *v9;
  const WebCore::SecurityOrigin *v10;
  WTF::StringImpl *v11;
  const WebCore::SecurityOrigin *v12;
  const WebCore::SecurityOrigin *v13;

  if (*((_BYTE *)this + 48))
  {
    if (!*((_DWORD *)this + 7))
      return 0;
    v4 = 0;
    v5 = 0;
    v6 = (WebCore::Document *)((char *)a2 + 192);
    while (1)
    {
      v7 = (WebCore::SecurityOrigin **)(*((_QWORD *)this + 2) + v4);
      v9 = *v7;
      v8 = v7[1];
      WebCore::SecurityContext::securityOrigin(v6, a2);
      if (WebCore::SecurityOrigin::isSameOriginAs(v9, v10))
        break;
      WebCore::Document::topOrigin(a2, v11);
      if (WebCore::SecurityOrigin::isSameOriginAs(v9, v12))
      {
        WebCore::SecurityContext::securityOrigin(v6, a2);
        if (WebCore::SecurityOrigin::isSameOriginAs(v8, v13))
          break;
      }
      ++v5;
      v4 += 16;
      if (v5 >= *((unsigned int *)this + 7))
        return 0;
    }
  }
  return 1;
}

uint64_t WebCore::RTCController::add(WebCore::RTCController *this, WebCore::RTCPeerConnection *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  int shouldDisableICECandidateFiltering;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  void *v26;
  WTF *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  WTF *v44;
  uint64_t v45;
  WTF *v46;
  _QWORD v47[3];
  WTF *v48;

  v4 = *((_QWORD *)a2 + 5);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
      v6 = v5 - 96;
    else
      v6 = 0;
  }
  else
  {
    v6 = 0;
  }
  if (*(_BYTE *)(v6 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x195486F20);
  }
  *(_DWORD *)(v6 - 168) += 2;
  v7 = *(unsigned int **)(v6 + 2952);
  if (v7)
  {
    v8 = v7 + 2;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 + 1, v8));
    shouldDisableICECandidateFiltering = WebCore::RTCController::shouldDisableICECandidateFiltering(this, (WebCore::Document *)(v6 - 192));
    (*(void (**)(unsigned int *, _QWORD))(*(_QWORD *)v7 + 24))(v7, shouldDisableICECandidateFiltering ^ 1u);
    do
    {
      v11 = __ldaxr(v8);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v8));
    if (!v12)
    {
      atomic_store(1u, v8);
      v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v39 = off_1E33604F8;
      v39[1] = v8;
      v47[0] = v39;
      WTF::ensureOnMainRunLoop();
      v40 = v47[0];
      v47[0] = 0;
      if (v40)
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    }
  }
  v13 = *((_DWORD *)this + 11);
  v14 = *((_DWORD *)this + 10) + 1;
  *((_DWORD *)this + 10) = v14;
  if (v14 > v13)
  {
    _ZN3WTF9HashTableINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEES8_NS_17IdentityExtractorENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EESD_E8removeIfIZNS_11WeakHashSetINS2_17RTCPeerConnectionES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)this + 4, v47);
    v15 = 0;
    *((_DWORD *)this + 10) = 0;
    v16 = *((_QWORD *)this + 4);
    if (v16)
    {
      v15 = *(_DWORD *)(v16 - 12);
      if (v15 > 0x7FFFFFFE)
        v15 = 0x7FFFFFFF;
    }
    *((_DWORD *)this + 11) = 2 * v15;
  }
  if ((*((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v17 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v17 = 1;
    *(_QWORD *)(v17 + 16) = 0;
    *(_QWORD *)(v17 + 24) = 0;
    *(_QWORD *)(v17 + 8) = a2;
    *(_BYTE *)(v17 + 32) = 0;
    v19 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 2) = v19 & 0xFFFF000000000000 | v17;
    v20 = v19 & 0xFFFFFFFFFFFFLL;
    if ((v19 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v21 = __ldaxr((unsigned int *)v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, (unsigned int *)v20));
      if (!v22)
      {
        atomic_store(1u, (unsigned int *)v20);
        v43 = *(unsigned int *)(v20 + 28);
        if ((_DWORD)v43)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v20 + 16), (WTF::StringImpl *)(*(_QWORD *)(v20 + 16) + 32 * v43));
        v44 = *(WTF **)(v20 + 16);
        if (v44)
        {
          *(_QWORD *)(v20 + 16) = 0;
          *(_DWORD *)(v20 + 24) = 0;
          WTF::fastFree(v44, v18);
        }
        WTF::fastFree((WTF *)v20, v18);
      }
    }
  }
  v23 = *((_QWORD *)a2 + 2) & 0xFFFFFFFFFFFFLL;
  do
    v24 = __ldaxr((unsigned int *)v23);
  while (__stlxr(v24 + 1, (unsigned int *)v23));
  do
    v25 = __ldaxr((unsigned int *)v23);
  while (__stlxr(v25 + 1, (unsigned int *)v23));
  v48 = (WTF *)v23;
  WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::add((uint64_t *)this + 4, (uint64_t *)&v48, (uint64_t)v47);
  v27 = v48;
  v48 = 0;
  if (!v27)
    goto LABEL_25;
  do
  {
    v28 = __ldaxr((unsigned int *)v27);
    v29 = v28 - 1;
  }
  while (__stlxr(v29, (unsigned int *)v27));
  if (v29)
  {
LABEL_25:
    if (!v23)
      goto LABEL_28;
    goto LABEL_26;
  }
  atomic_store(1u, (unsigned int *)v27);
  v45 = *((unsigned int *)v27 + 7);
  if ((_DWORD)v45)
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v27 + 2), (WTF::StringImpl *)(*((_QWORD *)v27 + 2) + 32 * v45));
  v46 = (WTF *)*((_QWORD *)v27 + 2);
  if (v46)
  {
    *((_QWORD *)v27 + 2) = 0;
    *((_DWORD *)v27 + 6) = 0;
    WTF::fastFree(v46, v26);
  }
  WTF::fastFree(v27, v26);
  if (v23)
  {
    do
    {
LABEL_26:
      v30 = __ldaxr((unsigned int *)v23);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, (unsigned int *)v23));
    if (!v31)
    {
      atomic_store(1u, (unsigned int *)v23);
      v41 = *(unsigned int *)(v23 + 28);
      if ((_DWORD)v41)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v23 + 16), (WTF::StringImpl *)(*(_QWORD *)(v23 + 16) + 32 * v41));
      v42 = *(WTF **)(v23 + 16);
      if (v42)
      {
        *(_QWORD *)(v23 + 16) = 0;
        *(_DWORD *)(v23 + 24) = 0;
        WTF::fastFree(v42, v26);
      }
      WTF::fastFree((WTF *)v23, v26);
    }
  }
LABEL_28:
  v32 = *((_QWORD *)a2 + 5);
  if (v32)
  {
    v33 = *(_QWORD *)(v32 + 8);
    if (v33)
      v32 = v33 - 96;
    else
      v32 = 0;
  }
  if (*(_BYTE *)(v32 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x195486F40);
  }
  result = WebCore::RTCController::shouldDisableICECandidateFiltering(this, (WebCore::Document *)(v32 - 192));
  if ((_DWORD)result)
    result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 15) + 160))(*((_QWORD *)a2 + 15));
  v35 = *((_QWORD *)this + 8);
  if (v35)
  {
    v36 = *(_QWORD *)(v35 + 8);
    if (v36)
    {
      v37 = *((_QWORD *)a2 + 5);
      if (v37)
      {
        v38 = *(_QWORD *)(v37 + 8);
        if (v38)
        {
          if (v38 - 96 == v36 + 192)
            result = WebCore::RTCController::startGatheringStatLogs(this, a2);
        }
      }
    }
  }
  if (*(_DWORD *)(v6 - 168) == 2)
  {
    if ((*(_WORD *)(v6 - 162) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)(v6 - 192));
  }
  else
  {
    *(_DWORD *)(v6 - 168) -= 2;
  }
  return result;
}

uint64_t WebCore::RTCController::startGatheringStatLogs(WebCore::RTCController *this, WebCore::RTCPeerConnection *a2)
{
  uint64_t v3;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t result;
  uint64_t v15;

  v3 = *((_QWORD *)this + 1);
  if (v3)
    goto LABEL_14;
  v3 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = this;
  v6 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v3;
  if (!v6)
    goto LABEL_14;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
LABEL_14:
    do
      v9 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v9 + 1, (unsigned int *)v3));
  }
  v10 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>((uint64_t)a2);
  v11 = v10;
  if (v10)
  {
    do
      v12 = __ldaxr(v10);
    while (__stlxr(v12 + 1, v10));
  }
  v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v13 = &off_1E3360448;
  v13[1] = v3;
  v13[2] = v11;
  v15 = (uint64_t)v13;
  (*(void (**)(_QWORD, uint64_t *))(**((_QWORD **)a2 + 15) + 216))(*((_QWORD *)a2 + 15), &v15);
  result = v15;
  v15 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::RTCController::disableICECandidateFilteringForAllOrigins(WebCore::RTCController *this)
{
  uint64_t *v1;
  uint64_t result;
  void *v3;
  _QWORD *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  WTF *v14;
  _QWORD *v15;
  bmalloc::api *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;

  *((_BYTE *)this + 48) = 0;
  v1 = (uint64_t *)((char *)this + 32);
  WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v22, (uint64_t *)this + 4);
  result = (uint64_t)WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::end(&v20, v1);
  for (i = v23; i != v21; ++*((_DWORD *)v22 + 2))
  {
    v5 = *(_QWORD *)(*i + 8);
    ++*(_DWORD *)(v5 + 24);
    v6 = *(_QWORD *)(v5 + 40);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
      {
        if (*(_BYTE *)(v7 + 178))
        {
          result = 105;
          __break(0xC471u);
          return result;
        }
        v8 = (_DWORD *)(v7 - 264);
        *(_DWORD *)(v7 - 264) += 2;
        v9 = *(unsigned int **)(v7 + 2856);
        if (v9)
        {
          v10 = v9 + 2;
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
          (*(void (**)(unsigned int *, _QWORD))(*(_QWORD *)v9 + 24))(v9, 0);
          do
          {
            v12 = __ldaxr(v10);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v10));
          if (!v13)
          {
            atomic_store(1u, v10);
            v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v18 = off_1E33604F8;
            v18[1] = v10;
            v25 = v18;
            WTF::ensureOnMainRunLoop();
            v19 = v25;
            v25 = 0;
            if (v19)
              (*(void (**)(_QWORD *))(*v19 + 8))(v19);
          }
        }
        if (*v8 == 2)
        {
          if ((*(_WORD *)(v7 - 258) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)(v7 - 288), v3);
        }
        else
        {
          *v8 -= 2;
        }
      }
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(v5 + 120) + 160))(*(_QWORD *)(v5 + 120));
    if (*(_DWORD *)(v5 + 24) == 1)
    {
      WebCore::RTCPeerConnection::~RTCPeerConnection((WebCore::RTCPeerConnection *)v5, v14);
      bmalloc::api::isoDeallocate(v16, v17);
    }
    else
    {
      --*(_DWORD *)(v5 + 24);
    }
    v15 = v23 + 1;
    v23 = v15;
    if (v15 != v24)
    {
      while ((unint64_t)(*v15 + 1) <= 1)
      {
        if (++v15 == v24)
        {
          v15 = v24;
          break;
        }
      }
      v23 = v15;
    }
    result = (uint64_t)WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v22);
    i = v23;
  }
  return result;
}

void *WebCore::RTCController::disableICECandidateFilteringForDocument(WebCore::RTCController *this, WebCore::Document *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  WTF **v12;
  unsigned int *v13;
  WTF::StringImpl *v14;
  unsigned int v15;
  uint64_t v16;
  WTF **v17;
  WTF **v18;
  WTF *v19;
  WTF *v20;
  WTF *v21;
  unsigned int v22;
  unsigned int v23;
  WTF *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t *v27;
  void *result;
  WTF::StringImpl *v29;
  WTF *i;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  WebCore::SecurityOrigin *v35;
  WebCore::SecurityOrigin *v36;
  WTF::StringImpl *v37;
  WebCore::SecurityOrigin *v38;
  WebCore::SecurityOrigin *v39;
  WTF::StringImpl *v40;
  const WebCore::SecurityOrigin *v41;
  WTF::StringImpl *v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  const WebCore::SecurityOrigin *v48;
  const WebCore::SecurityOrigin *v49;
  WTF *v50;
  bmalloc::api *v51;
  void *v52;
  _QWORD *v53;
  _QWORD *v54;
  WTF *v55;
  WTF *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  uint64_t *v63;
  WTF *v64;
  WTF *v65;
  WTF *v66;
  WTF *v67;
  _QWORD *v68;

  v4 = (unsigned int *)*((_QWORD *)a2 + 393);
  if (v4)
  {
    v5 = v4 + 2;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    (*(void (**)(unsigned int *, _QWORD))(*(_QWORD *)v4 + 24))(v4, 0);
    do
    {
      v7 = __ldaxr(v5);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v5));
    if (!v8)
    {
      atomic_store(1u, v5);
      v55 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v55 = off_1E33604F8;
      *((_QWORD *)v55 + 1) = v5;
      v65 = v55;
      WTF::ensureOnMainRunLoop();
      v56 = v65;
      v65 = 0;
      if (v56)
        (*(void (**)(WTF *))(*(_QWORD *)v56 + 8))(v56);
    }
  }
  WebCore::Document::topOrigin(a2, a2);
  do
    v11 = __ldaxr(v9);
  while (__stlxr(v11 + 1, v9));
  v65 = (WTF *)v9;
  v12 = &v66;
  WebCore::SecurityContext::securityOrigin((WebCore::Document *)((char *)a2 + 192), v10);
  do
    v15 = __ldaxr(v13);
  while (__stlxr(v15 + 1, v13));
  v66 = (WTF *)v13;
  v16 = *((unsigned int *)this + 7);
  if ((_DWORD)v16 == *((_DWORD *)this + 6))
  {
    v17 = (WTF **)WTF::Vector<WebCore::RTCController::PeerConnectionOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 16, v16 + 1, (unint64_t)&v65);
    v16 = *((unsigned int *)this + 7);
    v18 = (WTF **)(*((_QWORD *)this + 2) + 16 * v16);
    v19 = *v17;
    *v17 = 0;
    v12 = v17 + 1;
  }
  else
  {
    v18 = (WTF **)(*((_QWORD *)this + 2) + 16 * v16);
    v19 = v65;
    v65 = 0;
  }
  *v18 = v19;
  v20 = *v12;
  *v12 = 0;
  v18[1] = v20;
  *((_DWORD *)this + 7) = v16 + 1;
  v21 = v66;
  v66 = 0;
  if (v21)
  {
    do
    {
      v22 = __ldaxr((unsigned int *)v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, (unsigned int *)v21));
    if (!v23)
    {
      atomic_store(1u, (unsigned int *)v21);
      v57 = (WTF::StringImpl *)*((_QWORD *)v21 + 6);
      *((_QWORD *)v21 + 6) = 0;
      if (v57)
      {
        if (*(_DWORD *)v57 == 2)
          WTF::StringImpl::destroy(v57, v14);
        else
          *(_DWORD *)v57 -= 2;
      }
      v58 = (WTF::StringImpl *)*((_QWORD *)v21 + 5);
      *((_QWORD *)v21 + 5) = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
          WTF::StringImpl::destroy(v58, v14);
        else
          *(_DWORD *)v58 -= 2;
      }
      v59 = *((unsigned int *)v21 + 8);
      if ((_DWORD)v59 != -1)
        ((void (*)(uint64_t **, char *))off_1E3360400[v59])(&v63, (char *)v21 + 8);
      *((_DWORD *)v21 + 8) = -1;
      WTF::fastFree(v21, v14);
    }
  }
  v24 = v65;
  v65 = 0;
  if (v24)
  {
    do
    {
      v25 = __ldaxr((unsigned int *)v24);
      v26 = v25 - 1;
    }
    while (__stlxr(v26, (unsigned int *)v24));
    if (!v26)
    {
      atomic_store(1u, (unsigned int *)v24);
      v60 = (WTF::StringImpl *)*((_QWORD *)v24 + 6);
      *((_QWORD *)v24 + 6) = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
          WTF::StringImpl::destroy(v60, v14);
        else
          *(_DWORD *)v60 -= 2;
      }
      v61 = (WTF::StringImpl *)*((_QWORD *)v24 + 5);
      *((_QWORD *)v24 + 5) = 0;
      if (v61)
      {
        if (*(_DWORD *)v61 == 2)
          WTF::StringImpl::destroy(v61, v14);
        else
          *(_DWORD *)v61 -= 2;
      }
      v62 = *((unsigned int *)v24 + 8);
      if ((_DWORD)v62 != -1)
        ((void (*)(uint64_t **, char *))off_1E3360400[v62])(&v63, (char *)v24 + 8);
      *((_DWORD *)v24 + 8) = -1;
      WTF::fastFree(v24, v14);
    }
  }
  v27 = (uint64_t *)((char *)this + 32);
  WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::begin((uint64_t **)&v65, v27);
  result = WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::end(&v63, v27);
  for (i = v66; v66 != v64; i = v66)
  {
    v31 = *(_QWORD *)(*(_QWORD *)i + 8);
    ++*(_DWORD *)(v31 + 24);
    v32 = *(_QWORD *)(v31 + 40);
    if (v32)
    {
      v33 = *(_QWORD *)(v32 + 8);
      if (v33)
      {
        if (*(_BYTE *)(v33 + 178))
        {
          __break(0xC471u);
          JUMPOUT(0x1954876FCLL);
        }
        v34 = (_DWORD *)(v33 - 264);
        *(_DWORD *)(v33 - 264) += 2;
        WebCore::Document::topOrigin(a2, v29);
        v36 = v35;
        WebCore::SecurityContext::securityOrigin((WebCore::Document *)((char *)a2 + 192), v37);
        v39 = v38;
        WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v33 - 96), v40);
        if (WebCore::SecurityOrigin::isSameOriginAs(v36, v41)
          || (WebCore::Document::topOrigin((WebCore::Document *)(v33 - 288), v42),
              WebCore::SecurityOrigin::isSameOriginAs(v36, v48))
          && (WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v33 - 96), v29),
              WebCore::SecurityOrigin::isSameOriginAs(v39, v49)))
        {
          v43 = *(unsigned int **)(v33 + 2856);
          if (v43)
          {
            v44 = v43 + 2;
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 + 1, v44));
            (*(void (**)(unsigned int *, _QWORD))(*(_QWORD *)v43 + 24))(v43, 0);
            do
            {
              v46 = __ldaxr(v44);
              v47 = v46 - 1;
            }
            while (__stlxr(v47, v44));
            if (!v47)
            {
              atomic_store(1u, v44);
              v53 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v53 = off_1E33604F8;
              v53[1] = v44;
              v68 = v53;
              WTF::ensureOnMainRunLoop();
              v54 = v68;
              v68 = 0;
              if (v54)
                (*(void (**)(_QWORD *))(*v54 + 8))(v54);
            }
          }
          (*(void (**)(_QWORD))(**(_QWORD **)(v31 + 120) + 160))(*(_QWORD *)(v31 + 120));
        }
        if (*v34 == 2)
        {
          if ((*(_WORD *)(v33 - 258) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)(v33 - 288), v29);
        }
        else
        {
          *v34 -= 2;
        }
      }
    }
    if (*(_DWORD *)(v31 + 24) == 1)
    {
      WebCore::RTCPeerConnection::~RTCPeerConnection((WebCore::RTCPeerConnection *)v31, v29);
      bmalloc::api::isoDeallocate(v51, v52);
    }
    else
    {
      --*(_DWORD *)(v31 + 24);
    }
    v50 = (WTF *)((char *)v66 + 8);
    v66 = v50;
    if (v50 != v67)
    {
      while ((unint64_t)(*(_QWORD *)v50 + 1) <= 1)
      {
        v50 = (WTF *)((char *)v50 + 8);
        if (v50 == v67)
        {
          v50 = v67;
          break;
        }
      }
      v66 = v50;
    }
    result = WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v65);
    ++*((_DWORD *)v65 + 2);
  }
  return result;
}

uint64_t WebCore::RTCController::enableICECandidateFiltering(WebCore::RTCController *this, WTF::StringImpl *a2)
{
  WebCore::RTCController *v2;
  uint64_t result;
  void *v4;
  _QWORD *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  bmalloc::api *v16;
  void *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;

  v2 = this;
  WTF::Vector<WebCore::RTCController::PeerConnectionOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear((uint64_t)this + 16, a2);
  *((_BYTE *)v2 + 48) = 1;
  v2 = (WebCore::RTCController *)((char *)v2 + 32);
  WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v22, (uint64_t *)v2);
  result = (uint64_t)WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::end(&v20, (uint64_t *)v2);
  for (i = v23; i != v21; ++*((_DWORD *)v22 + 2))
  {
    v6 = *(_QWORD *)(*i + 8);
    ++*(_DWORD *)(v6 + 24);
    *(_BYTE *)(*(_QWORD *)(v6 + 120) + 40) = 1;
    v7 = *(_QWORD *)(v6 + 40);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        if (*(_BYTE *)(v8 + 178))
        {
          result = 105;
          __break(0xC471u);
          return result;
        }
        v9 = (_DWORD *)(v8 - 264);
        *(_DWORD *)(v8 - 264) += 2;
        v10 = *(unsigned int **)(v8 + 2856);
        if (v10)
        {
          v11 = v10 + 2;
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 + 1, v11));
          (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)v10 + 24))(v10, 1);
          do
          {
            v13 = __ldaxr(v11);
            v14 = v13 - 1;
          }
          while (__stlxr(v14, v11));
          if (!v14)
          {
            atomic_store(1u, v11);
            v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v18 = off_1E33604F8;
            v18[1] = v11;
            v25 = v18;
            WTF::ensureOnMainRunLoop();
            v19 = v25;
            v25 = 0;
            if (v19)
              (*(void (**)(_QWORD *))(*v19 + 8))(v19);
          }
        }
        if (*v9 == 2)
        {
          if ((*(_WORD *)(v8 - 258) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)(v8 - 288), v4);
        }
        else
        {
          *v9 -= 2;
        }
      }
    }
    if (*(_DWORD *)(v6 + 24) == 1)
    {
      WebCore::RTCPeerConnection::~RTCPeerConnection((WebCore::RTCPeerConnection *)v6, (WTF *)v4);
      bmalloc::api::isoDeallocate(v16, v17);
    }
    else
    {
      --*(_DWORD *)(v6 + 24);
    }
    v15 = v23 + 1;
    v23 = v15;
    if (v15 != v24)
    {
      while ((unint64_t)(*v15 + 1) <= 1)
      {
        if (++v15 == v24)
        {
          v15 = v24;
          break;
        }
      }
      v23 = v15;
    }
    result = (uint64_t)WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v22);
    i = v23;
  }
  return result;
}

uint64_t WebCore::RTCController::startGatheringLogs(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  unsigned int *v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  WTF *v23;
  _QWORD *v24;
  bmalloc::api *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  _QWORD *v43;
  uint64_t *v44;
  _QWORD *v45;
  _QWORD *v46;

  v6 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(a2);
  v8 = v6;
  if (v6)
  {
    do
      v9 = __ldaxr(v6);
    while (__stlxr(v9 + 1, v6));
  }
  v10 = a1[8];
  a1[8] = (uint64_t)v8;
  if (v10)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v10));
    if (!v12)
    {
      atomic_store(1u, (unsigned int *)v10);
      v38 = *(unsigned int *)(v10 + 28);
      if ((_DWORD)v38)
      {
        v41 = v10;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v10 + 16), (WTF::StringImpl *)(*(_QWORD *)(v10 + 16) + 32 * v38));
        v10 = v41;
      }
      v39 = *(WTF **)(v10 + 16);
      if (v39)
      {
        *(_QWORD *)(v10 + 16) = 0;
        *(_DWORD *)(v10 + 24) = 0;
        v40 = v10;
        WTF::fastFree(v39, v7);
        v10 = v40;
      }
      WTF::fastFree((WTF *)v10, v7);
    }
  }
  v13 = *a3;
  *a3 = 0;
  v14 = a1[7];
  a1[7] = v13;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::begin(&v44, a1 + 4);
  result = (uint64_t)WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::end(&v42, a1 + 4);
  v16 = v45;
  v17 = v43;
  if (v45 != v43)
  {
    v18 = a2 + 192;
    do
    {
      v19 = *(_QWORD *)(*v16 + 8);
      ++*(_DWORD *)(v19 + 24);
      v20 = *(_QWORD *)(v19 + 40);
      if (v20 && ((v21 = *(_QWORD *)(v20 + 8)) != 0 ? (v22 = v21 - 96 == v18) : (v22 = 0), v22))
        WebCore::RTCController::startGatheringStatLogs((WebCore::RTCController *)a1, (WebCore::RTCPeerConnection *)v19);
      else
        (*(void (**)(_QWORD))(**(_QWORD **)(v19 + 120) + 224))(*(_QWORD *)(v19 + 120));
      if (*(_DWORD *)(v19 + 24) == 1)
      {
        WebCore::RTCPeerConnection::~RTCPeerConnection((WebCore::RTCPeerConnection *)v19, v23);
        bmalloc::api::isoDeallocate(v25, v26);
      }
      else
      {
        --*(_DWORD *)(v19 + 24);
      }
      v24 = v16 + 1;
      v45 = v16 + 1;
      if (v16 + 1 != v46)
      {
        while ((unint64_t)(*v24 + 1) <= 1)
        {
          if (++v24 == v46)
          {
            v24 = v46;
            break;
          }
        }
        v45 = v24;
      }
      result = (uint64_t)WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::skipEmptyBuckets(&v44);
      v16 = v45;
      ++*((_DWORD *)v44 + 2);
    }
    while (v16 != v17);
  }
  if (!a1[9])
  {
    v27 = a1[1];
    if (v27)
      goto LABEL_50;
    v27 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v27 = 1;
    *(_QWORD *)(v27 + 8) = a1;
    v29 = (unsigned int *)a1[1];
    a1[1] = v27;
    if (!v29)
      goto LABEL_50;
    do
    {
      v30 = __ldaxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
    {
      atomic_store(1u, v29);
      WTF::fastFree((WTF *)v29, v28);
    }
    v27 = a1[1];
    if (v27)
    {
LABEL_50:
      do
        v32 = __ldaxr((unsigned int *)v27);
      while (__stlxr(v32 + 1, (unsigned int *)v27));
    }
    v33 = WTF::fastMalloc((WTF *)0x28);
    v34 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v34 = &off_1E3360178;
    v34[1] = v27;
    *(_QWORD *)v33 = off_1E341A558;
    *(_QWORD *)(v33 + 8) = 0;
    *(_QWORD *)(v33 + 24) = v34;
    *(_BYTE *)(v33 + 32) = 0;
    *(_BYTE *)(v33 + 36) = 0;
    v36 = (WTF *)a1[9];
    a1[9] = v33;
    if (v36)
    {
      v37 = *((_QWORD *)v36 + 3);
      *((_QWORD *)v36 + 3) = 0;
      if (v37)
        (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
      result = WTF::fastFree(v36, v35);
      v33 = a1[9];
      if (*(_BYTE *)(v33 + 36))
      {
        if (!*(_DWORD *)(v33 + 32))
          return result;
        rtc::LogMessage::RemoveLogToStream();
      }
    }
    *(_DWORD *)(v33 + 32) = 0;
    *(_BYTE *)(v33 + 36) = 1;
    return rtc::LogMessage::AddLogToStream();
  }
  return result;
}

uint64_t WebCore::RTCDTMFSender::RTCDTMFSender(uint64_t a1, WebCore::ScriptExecutionContext *a2, uint64_t a3, uint64_t *a4)
{
  WebCore::ScriptExecutionContext *v6;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unint64_t StatusReg;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD v26[3];
  uint64_t v27;

  v6 = a2;
  *(_DWORD *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E33A4FC0;
  v8 = a1 + 32;
  if (!*((_BYTE *)a2 + 274))
  {
    v9 = (char *)a2 - 192;
    v10 = *((_QWORD *)a2 + 64);
    if (v10)
    {
      v11 = *(char **)(v10 + 8);
      if (v11)
        v9 = v11;
    }
    v6 = (WebCore::ScriptExecutionContext *)(v9 + 192);
  }
  *(_QWORD *)(a1 + 32) = &off_1E33A18C0;
  *(_QWORD *)(a1 + 40) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(a1 + 32), v6);
  *(_QWORD *)(a1 + 32) = &off_1E33A0540;
  *(_QWORD *)(a1 + 48) = 0;
  if (*((_BYTE *)v6 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x195487F68);
  }
  v27 = v8;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v6 + 16, &v27, (uint64_t)v26);
  *(_QWORD *)a1 = off_1E3360520;
  *(_QWORD *)(a1 + 32) = &unk_1E33605B8;
  *(_QWORD *)(a1 + 56) = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  v13 = *(unsigned int **)(StatusReg + 736);
  if (!v13)
    v13 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  *(_QWORD *)(a1 + 96) = v13;
  *(_QWORD *)(a1 + 56) = off_1E31F7378;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v15 = off_1E3360480;
  v15[1] = WebCore::RTCDTMFSender::toneTimerFired;
  v15[2] = 0;
  v15[3] = a1;
  *(_QWORD *)(a1 + 104) = v15;
  v16 = *(_QWORD *)(a3 + 24);
  if (v16)
    goto LABEL_24;
  v16 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v16 = 1;
  *(_QWORD *)(v16 + 8) = a3;
  v18 = *(unsigned int **)(a3 + 24);
  *(_QWORD *)(a3 + 24) = v16;
  if (!v18)
    goto LABEL_24;
  do
  {
    v19 = __ldaxr(v18);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, v18));
  if (!v20)
  {
    atomic_store(1u, v18);
    WTF::fastFree((WTF *)v18, v17);
  }
  v16 = *(_QWORD *)(a3 + 24);
  if (v16)
  {
LABEL_24:
    do
      v21 = __ldaxr((unsigned int *)v16);
    while (__stlxr(v21 + 1, (unsigned int *)v16));
  }
  *(_QWORD *)(a1 + 112) = v16;
  v22 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 120) = v22;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v23 = off_1E33604A8;
  v23[1] = a1;
  v26[0] = v23;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v22 + 16))(v22, v26);
  v24 = v26[0];
  v26[0] = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  return a1;
}

void WebCore::RTCDTMFSender::~RTCDTMFSender(WebCore::RTCDTMFSender *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  v5 = (unsigned int *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
  *((_QWORD *)this + 7) = off_1E31F7378;
  v8 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  WebCore::TimerBase::~TimerBase((WebCore::RTCDTMFSender *)((char *)this + 56));
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::RTCDTMFSender *)((char *)this + 32), v9);
  WebCore::EventTarget::~EventTarget(this, v10);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::RTCDTMFSender::~RTCDTMFSender(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::RTCDTMFSender::~RTCDTMFSender(WebCore::RTCDTMFSender *this, WTF::StringImpl *a2)
{
  WebCore::RTCDTMFSender::~RTCDTMFSender((WebCore::RTCDTMFSender *)((char *)this - 32), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::RTCDTMFSender::~RTCDTMFSender((WebCore::RTCDTMFSender *)((char *)this - 32), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

WTF::StringImpl *WebCore::RTCDTMFSender::insertDTMF@<X0>(WebCore::RTCDTMFSender *this@<X0>, const WTF::String *a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (***v18)(_QWORD);
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  unsigned __int16 *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v27;
  uint64_t v28;
  WTF::StringImpl *v30;
  unint64_t v31;
  uint64_t v32;
  WTF::StringImpl *result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v43;
  _QWORD *v45;
  char v46;
  WTF::StringImpl *v47;

  v6 = *((_QWORD *)this + 14);
  if (!v6)
    goto LABEL_44;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    goto LABEL_44;
  if (!*(_QWORD *)(v7 + 64))
    goto LABEL_44;
  v8 = *(_QWORD *)(v7 + 72);
  if (!v8)
    goto LABEL_44;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    goto LABEL_44;
  v10 = *(unsigned int *)(v9 + 116);
  if (!(_DWORD)v10)
    goto LABEL_44;
  v15 = *(_QWORD *)(v9 + 104);
  v16 = 8 * v10;
  while (*(_QWORD *)(*(_QWORD *)v15 + 40) != v7)
  {
    v15 += 8;
    v16 -= 8;
    if (!v16)
      goto LABEL_44;
  }
  v17 = *(_QWORD *)(*(_QWORD *)v15 + 64);
  if (v17)
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  if ((v17 & 0xFF00000000) == 0
    || (v17 & 0xFFFFFFFE) != 0
    || (v18 = (uint64_t (***)(_QWORD))*((_QWORD *)this + 15)) == 0
    || ((**v18)(v18) & 1) == 0)
  {
LABEL_44:
    result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a5 = 8;
    *(_BYTE *)(a5 + 16) = 1;
    return result;
  }
  WTF::String::convertToUppercaseWithoutLocale(a2);
  v20 = v47;
  if (!v47)
    goto LABEL_30;
  v21 = (unsigned __int16 *)*((_QWORD *)v47 + 1);
  v22 = *((unsigned int *)v47 + 1);
  if ((*((_BYTE *)v47 + 16) & 4) == 0)
  {
    if ((_DWORD)v22)
    {
      do
      {
        v40 = *v21++;
        v39 = v40;
        v41 = v40 - 65;
        if (v40 - 48 >= 0xA && v41 >= 4)
        {
          v27 = v39 > 0x2C;
          v43 = (1 << v39) & 0x140800000000;
          if (v27 || v43 == 0)
            goto LABEL_66;
        }
      }
      while (--v22);
    }
LABEL_30:
    v47 = 0;
    v30 = (WTF::StringImpl *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 16) = v20;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
      {
        WTF::StringImpl::destroy(v30, v19);
        v20 = (WTF::StringImpl *)*((_QWORD *)this + 16);
      }
      else
      {
        *(_DWORD *)v30 -= 2;
      }
    }
    v31 = 40;
    if (a3 > 0x28)
      v31 = a3;
    if (v31 >= 0x1770)
      v31 = 6000;
    v32 = 30;
    if (a4 > 0x1E)
      v32 = a4;
    *((_QWORD *)this + 17) = v31;
    *((_QWORD *)this + 18) = v32;
    if (v20 && *((_DWORD *)v20 + 1) && !*((_BYTE *)this + 152))
    {
      *((_BYTE *)this + 152) = 1;
      v34 = *((_QWORD *)this + 5);
      if (v34)
      {
        v35 = *(_QWORD *)(v34 + 8);
        v36 = v35 ? v35 - 96 : 0;
      }
      else
      {
        v36 = 0;
      }
      ++*((_DWORD *)this + 6);
      v37 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v37 = &off_1E33604D0;
      v37[1] = this;
      v37[2] = this;
      v45 = v37;
      v46 = 0;
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v36 + 336))(v36, &v45);
      v38 = v45;
      v45 = 0;
      if (v38)
        (*(void (**)(_QWORD *))(*v38 + 8))(v38);
    }
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_QWORD *)(a5 + 16) = 0;
    goto LABEL_41;
  }
  if (!(_DWORD)v22)
    goto LABEL_30;
  while (1)
  {
    v24 = *(unsigned __int8 *)v21;
    v21 = (unsigned __int16 *)((char *)v21 + 1);
    v23 = v24;
    v25 = v24 - 65;
    if (v24 - 48 >= 0xA && v25 >= 4)
    {
      v27 = v23 > 0x2C;
      v28 = (1 << v23) & 0x140800000000;
      if (v27 || v28 == 0)
        break;
    }
    if (!--v22)
      goto LABEL_30;
  }
LABEL_66:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a5 = 3;
  *(_BYTE *)(a5 + 16) = 1;
LABEL_41:
  result = v47;
  v47 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::RTCDTMFSender::scriptExecutionContext(WebCore::RTCDTMFSender *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t WebCore::RTCDTMFSender::playNextTone(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::Event *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  char v14;
  uint64_t v15;
  WebCore::Event *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WebCore::Event *v19;

  v1 = this;
  v2 = *(_QWORD *)(this + 128);
  if (!v2 || !*(_DWORD *)(v2 + 4))
  {
    *(_BYTE *)(this + 152) = 0;
    v18 = 0;
    WebCore::RTCDTMFToneChangeEvent::create((WebCore::RTCDTMFToneChangeEvent *)&v18, &v19);
    v3 = v19;
    this = (uint64_t)WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)v1, v19);
    if (*((_DWORD *)v3 + 4) == 1)
      return (*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)v3 + 8))(v3);
    --*((_DWORD *)v3 + 4);
    return this;
  }
  v4 = *(_QWORD *)(this + 112);
  if (!v4)
    goto LABEL_37;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_37;
  if (!*(_QWORD *)(v5 + 64))
    goto LABEL_37;
  v6 = *(_QWORD *)(v5 + 72);
  if (!v6)
    goto LABEL_37;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
    goto LABEL_37;
  v8 = *(unsigned int *)(v7 + 116);
  if (!(_DWORD)v8)
    goto LABEL_37;
  v9 = *(_QWORD *)(v7 + 104);
  v10 = 8 * v8;
  while (*(_QWORD *)(*(_QWORD *)v9 + 40) != v5)
  {
    v9 += 8;
    v10 -= 8;
    if (!v10)
      goto LABEL_37;
  }
  this = *(_QWORD *)(*(_QWORD *)v9 + 64);
  if (this)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 24))(this);
  if ((this & 0xFF00000000) == 0
    || (this & 0xFFFFFFFE) != 0
    || (this = *(_QWORD *)(v1 + 120)) == 0
    || (this = (**(uint64_t (***)(uint64_t))this)(this), (this & 1) == 0))
  {
LABEL_37:
    *(_BYTE *)(v1 + 152) = 0;
    return this;
  }
  v11 = *(WTF::StringImpl **)(v1 + 128);
  if (v11)
  {
    if (*((_DWORD *)v11 + 1) > 1u)
    {
      WTF::StringImpl::substring(v11);
      v11 = *(WTF::StringImpl **)(v1 + 128);
      if (!v11)
      {
        *(_QWORD *)(v1 + 128) = 0;
LABEL_29:
        v14 = (char)v18;
        v15 = *(_QWORD *)(v1 + 120);
        if (v18)
        {
          if (*((_DWORD *)v18 + 1))
            v14 = **((_BYTE **)v18 + 1);
          else
            v14 = 0;
        }
        goto LABEL_32;
      }
    }
    else
    {
      *(_DWORD *)v11 += 2;
      v18 = v11;
    }
    WTF::StringImpl::substring(v11);
    v13 = *(WTF::StringImpl **)(v1 + 128);
    *(_QWORD *)(v1 + 128) = v19;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v12);
      else
        *(_DWORD *)v13 -= 2;
    }
    goto LABEL_29;
  }
  v14 = 0;
  v18 = 0;
  *(_QWORD *)(v1 + 128) = 0;
  v15 = *(_QWORD *)(v1 + 120);
LABEL_32:
  (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v15 + 8))(v15, v14, *(_QWORD *)(v1 + 136), *(_QWORD *)(v1 + 144));
  WebCore::RTCDTMFToneChangeEvent::create((WebCore::RTCDTMFToneChangeEvent *)&v18, &v19);
  v16 = v19;
  WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)v1, v19);
  if (*((_DWORD *)v16 + 4) == 1)
    (*(void (**)(WebCore::Event *))(*(_QWORD *)v16 + 8))(v16);
  else
    --*((_DWORD *)v16 + 4);
  this = (uint64_t)v18;
  v18 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)this, v17);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

uint64_t WebCore::RTCDTMFSender::stop(WebCore::RTCDTMFSender *this)
{
  uint64_t result;

  *((_BYTE *)this + 152) = 0;
  result = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  if ((*((_QWORD *)this + 11) & 0xFFFFFFFFFFFFLL) != 0)
    return WebCore::TimerBase::stopSlowCase((WebCore::RTCDTMFSender *)((char *)this + 56));
  return result;
}

uint64_t `non-virtual thunk to'WebCore::RTCDTMFSender::stop(WebCore::RTCDTMFSender *this)
{
  uint64_t result;

  *((_BYTE *)this + 120) = 0;
  result = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  if ((*((_QWORD *)this + 7) & 0xFFFFFFFFFFFFLL) != 0)
    return WebCore::TimerBase::stopSlowCase((WebCore::RTCDTMFSender *)((char *)this + 24));
  return result;
}

const char *WebCore::PeerConnectionBackend::logClassName(WebCore::PeerConnectionBackend *this)
{
  return "PeerConnectionBackend";
}

uint64_t WebCore::RTCDTMFSender::eventTargetInterface(WebCore::RTCDTMFSender *this)
{
  return 39;
}

uint64_t WebCore::RTCDTMFSender::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::RTCDTMFSender *WebCore::RTCDTMFSender::derefEventTarget(WebCore::RTCDTMFSender *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::RTCDTMFSender::~RTCDTMFSender(this, a2);
    return (WebCore::RTCDTMFSender *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

uint64_t WebCore::RTCDTMFSender::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::RTCDTMFSender *WebCore::RTCDTMFSender::deref(WebCore::RTCDTMFSender *this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::RTCDTMFSender::~RTCDTMFSender(this, a2);
    return (WebCore::RTCDTMFSender *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

uint64_t WebCore::RTCDTMFSender::virtualHasPendingActivity(WebCore::RTCDTMFSender *this)
{
  return *((unsigned __int8 *)this + 152);
}

uint64_t `non-virtual thunk to'WebCore::RTCDTMFSender::ref(uint64_t this)
{
  ++*(_DWORD *)(this - 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::RTCDTMFSender::deref(uint64_t this, WTF::StringImpl *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*(_DWORD *)(this - 8) == 1)
  {
    WebCore::RTCDTMFSender::~RTCDTMFSender((WebCore::RTCDTMFSender *)(this - 32), a2);
    return bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*(_DWORD *)(this - 8);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::RTCDTMFSender::virtualHasPendingActivity(WebCore::RTCDTMFSender *this)
{
  return *((unsigned __int8 *)this + 120);
}

WTF *WebCore::set<std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ConstrainDOMStringParameters>>(WTF *result, int a2, WTF::StringImpl *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF *v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl **v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  void (**v15)(WebCore::StringConstraint *__hidden);
  char v16;
  WTF *v17[2];
  WTF *v18[2];
  int v19;
  _QWORD v20[5];
  _QWORD *v21;

  if (*(_BYTE *)(a4 + 80))
  {
    v19 = a2;
    v16 = 3;
    v15 = &off_1E335FFA0;
    *(_OWORD *)v17 = 0u;
    *(_OWORD *)v18 = 0u;
    v20[0] = &v19;
    v20[1] = &v15;
    v20[2] = &v19;
    v20[3] = &v15;
    v20[4] = &v15;
    v4 = *(unsigned int *)(a4 + 72);
    if ((_DWORD)v4 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      JUMPOUT(0x1954888F0);
    }
    v6 = (uint64_t)result;
    v21 = v20;
    ((void (*)(_QWORD **, uint64_t))off_1E3360120[v4])(&v21, a4 + 8);
    WebCore::MediaTrackConstraintSetMap::set(v6, a3, (uint64_t)&v15);
    v15 = &off_1E335FFA0;
    if (HIDWORD(v18[1]))
    {
      v9 = (WTF::StringImpl **)v18[0];
      v10 = 8 * HIDWORD(v18[1]);
      do
      {
        v11 = *v9;
        *v9 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, v7);
          else
            *(_DWORD *)v11 -= 2;
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
    v8 = v18[0];
    if (v18[0])
    {
      v18[0] = 0;
      LODWORD(v18[1]) = 0;
      WTF::fastFree(v8, v7);
    }
    if (HIDWORD(v17[1]))
    {
      v12 = (WTF::StringImpl **)v17[0];
      v13 = 8 * HIDWORD(v17[1]);
      do
      {
        v14 = *v12;
        *v12 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v7);
          else
            *(_DWORD *)v14 -= 2;
        }
        ++v12;
        v13 -= 8;
      }
      while (v13);
    }
    result = v17[0];
    if (v17[0])
    {
      v17[0] = 0;
      LODWORD(v17[1]) = 0;
      return (WTF *)WTF::fastFree(result, v7);
    }
  }
  return result;
}

void WebCore::NumericConstraint<int>::~NumericConstraint()
{
  JUMPOUT(0x19AEA7644);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::set(WebCore::MediaTrackConstraintSetMap &,WebCore::ConstraintSetType,WebCore::MediaConstraintType,std::variant<int,WebCore::ConstrainLongRange> const&)::$_0,WebCore::set(WebCore::MediaTrackConstraintSetMap &,WebCore::ConstraintSetType,WebCore::MediaConstraintType,std::variant<int,WebCore::ConstrainLongRange> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,int,WebCore::ConstrainLongRange> const&>(uint64_t result, int *a2)
{
  int v2;
  uint64_t v3;
  _BYTE *v4;

  v2 = *a2;
  v3 = *(_QWORD *)(*(_QWORD *)result + 8);
  if (***(_DWORD ***)result)
  {
    *(_DWORD *)(v3 + 28) = v2;
    v4 = (_BYTE *)(v3 + 32);
  }
  else
  {
    *(_DWORD *)(v3 + 36) = v2;
    v4 = (_BYTE *)(v3 + 40);
  }
  *v4 = 1;
  return result;
}

uint64_t *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::set(WebCore::MediaTrackConstraintSetMap &,WebCore::ConstraintSetType,WebCore::MediaConstraintType,std::variant<int,WebCore::ConstrainLongRange> const&)::$_0,WebCore::set(WebCore::MediaTrackConstraintSetMap &,WebCore::ConstraintSetType,WebCore::MediaConstraintType,std::variant<int,WebCore::ConstrainLongRange> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,int,WebCore::ConstrainLongRange> const&>(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *result;
  if (*(_BYTE *)(a2 + 12))
  {
    v3 = *(_QWORD *)(v2 + 16);
    *(_DWORD *)(v3 + 12) = *(_DWORD *)(a2 + 8);
    *(_BYTE *)(v3 + 16) = 1;
  }
  if (*(_BYTE *)(a2 + 4))
  {
    v4 = *(_QWORD *)(v2 + 16);
    *(_DWORD *)(v4 + 20) = *(_DWORD *)a2;
    *(_BYTE *)(v4 + 24) = 1;
  }
  if (*(_BYTE *)(a2 + 20))
  {
    v5 = *(_QWORD *)(v2 + 16);
    *(_DWORD *)(v5 + 28) = *(_DWORD *)(a2 + 16);
    *(_BYTE *)(v5 + 32) = 1;
  }
  if (*(_BYTE *)(a2 + 28))
  {
    v6 = *(_QWORD *)(v2 + 16);
    *(_DWORD *)(v6 + 36) = *(_DWORD *)(a2 + 24);
    *(_BYTE *)(v6 + 40) = 1;
  }
  return result;
}

void WebCore::NumericConstraint<double>::~NumericConstraint()
{
  JUMPOUT(0x19AEA7644);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::set(WebCore::MediaTrackConstraintSetMap &,WebCore::ConstraintSetType,WebCore::MediaConstraintType,std::variant<double,WebCore::ConstrainDoubleRange> const&)::$_0,WebCore::set(WebCore::MediaTrackConstraintSetMap &,WebCore::ConstraintSetType,WebCore::MediaConstraintType,std::variant<double,WebCore::ConstrainDoubleRange> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,double,WebCore::ConstrainDoubleRange> const&>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;

  v2 = *a2;
  v3 = *(_QWORD *)(*(_QWORD *)result + 8);
  if (***(_DWORD ***)result)
  {
    *(_QWORD *)(v3 + 48) = v2;
    v4 = (_BYTE *)(v3 + 56);
  }
  else
  {
    *(_QWORD *)(v3 + 64) = v2;
    v4 = (_BYTE *)(v3 + 72);
  }
  *v4 = 1;
  return result;
}

double std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::set(WebCore::MediaTrackConstraintSetMap &,WebCore::ConstraintSetType,WebCore::MediaConstraintType,std::variant<double,WebCore::ConstrainDoubleRange> const&)::$_0,WebCore::set(WebCore::MediaTrackConstraintSetMap &,WebCore::ConstraintSetType,WebCore::MediaConstraintType,std::variant<double,WebCore::ConstrainDoubleRange> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,double,WebCore::ConstrainDoubleRange> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  if (*(_BYTE *)(a2 + 24))
  {
    v3 = *(_QWORD *)(v2 + 16);
    result = *(double *)(a2 + 16);
    *(double *)(v3 + 16) = result;
    *(_BYTE *)(v3 + 24) = 1;
  }
  if (*(_BYTE *)(a2 + 8))
  {
    v5 = *(_QWORD *)(v2 + 16);
    result = *(double *)a2;
    *(_QWORD *)(v5 + 32) = *(_QWORD *)a2;
    *(_BYTE *)(v5 + 40) = 1;
  }
  if (*(_BYTE *)(a2 + 40))
  {
    v6 = *(_QWORD *)(v2 + 16);
    result = *(double *)(a2 + 32);
    *(double *)(v6 + 48) = result;
    *(_BYTE *)(v6 + 56) = 1;
  }
  if (*(_BYTE *)(a2 + 56))
  {
    v7 = *(_QWORD *)(v2 + 16);
    result = *(double *)(a2 + 48);
    *(double *)(v7 + 64) = result;
    *(_BYTE *)(v7 + 72) = 1;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::set(WebCore::MediaTrackConstraintSetMap &,WebCore::ConstraintSetType,WebCore::MediaConstraintType,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ConstrainDOMStringParameters> const&)::$_1,WebCore::set(WebCore::MediaTrackConstraintSetMap &,WebCore::ConstraintSetType,WebCore::MediaConstraintType,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ConstrainDOMStringParameters> const&)::$_2,WebCore::set(WebCore::MediaTrackConstraintSetMap &,WebCore::ConstraintSetType,WebCore::MediaConstraintType,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ConstrainDOMStringParameters> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ConstrainDOMStringParameters> const&>(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  _DWORD *v8;
  unsigned int v9;
  uint64_t v10;
  _DWORD *v11;

  v2 = *(_QWORD *)(*(_QWORD *)result + 8);
  if (***(_DWORD ***)result)
  {
    v5 = *(_DWORD *)(v2 + 28);
    v4 = (_DWORD *)(v2 + 28);
    v3 = v5;
    v6 = (uint64_t *)(v4 - 3);
    if (v5 != *(v4 - 1))
    {
      v7 = *v6;
      v8 = (_DWORD *)*a2;
      if (!*a2)
      {
LABEL_5:
        *(_QWORD *)(v7 + 8 * v3) = v8;
        goto LABEL_10;
      }
LABEL_4:
      *v8 += 2;
      goto LABEL_5;
    }
LABEL_11:
    result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v3 + 1, (unint64_t)a2);
    v3 = *v4;
    v7 = *v6;
    v8 = *(_DWORD **)result;
    if (!*(_QWORD *)result)
      goto LABEL_5;
    goto LABEL_4;
  }
  v9 = *(_DWORD *)(v2 + 44);
  v4 = (_DWORD *)(v2 + 44);
  v3 = v9;
  v6 = (uint64_t *)(v4 - 3);
  if (v9 == *(v4 - 1))
    goto LABEL_11;
  v10 = *v6;
  v11 = (_DWORD *)*a2;
  if (*a2)
    *v11 += 2;
  *(_QWORD *)(v10 + 8 * v3) = v11;
LABEL_10:
  *v4 = v3 + 1;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::set(WebCore::MediaTrackConstraintSetMap &,WebCore::ConstraintSetType,WebCore::MediaConstraintType,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ConstrainDOMStringParameters> const&)::$_1,WebCore::set(WebCore::MediaTrackConstraintSetMap &,WebCore::ConstraintSetType,WebCore::MediaConstraintType,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ConstrainDOMStringParameters> const&)::$_2,WebCore::set(WebCore::MediaTrackConstraintSetMap &,WebCore::ConstraintSetType,WebCore::MediaConstraintType,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ConstrainDOMStringParameters> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ConstrainDOMStringParameters> const&>(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;

  v2 = *(_DWORD **)result;
  v3 = *(_QWORD **)a2;
  v4 = *(unsigned int *)(a2 + 12);
  if (**(_DWORD **)(*(_QWORD *)result + 16))
  {
    if ((_DWORD)v4)
    {
      v5 = 8 * v4;
      do
      {
        v6 = *((_QWORD *)v2 + 3);
        result = v6 + 16;
        v7 = *(unsigned int *)(v6 + 28);
        if ((_DWORD)v7 == *(_DWORD *)(v6 + 24))
        {
          result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v7 + 1, (unint64_t)v3);
          v7 = *(unsigned int *)(v6 + 28);
          v10 = *(_QWORD *)(v6 + 16);
          v11 = *(_DWORD **)result;
          if (*(_QWORD *)result)
            *v11 += 2;
          *(_QWORD *)(v10 + 8 * v7) = v11;
        }
        else
        {
          v8 = *(_DWORD **)result;
          v9 = (_DWORD *)*v3;
          if (*v3)
            *v9 += 2;
          *(_QWORD *)&v8[2 * v7] = v9;
        }
        *(_DWORD *)(v6 + 28) = v7 + 1;
        ++v3;
        v5 -= 8;
      }
      while (v5);
    }
  }
  else if ((_DWORD)v4)
  {
    v12 = 8 * v4;
    do
    {
      v13 = *((_QWORD *)v2 + 3);
      result = v13 + 32;
      v14 = *(unsigned int *)(v13 + 44);
      if ((_DWORD)v14 == *(_DWORD *)(v13 + 40))
      {
        result = WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(result, v14 + 1, (unint64_t)v3);
        v14 = *(unsigned int *)(v13 + 44);
        v17 = *(_QWORD *)(v13 + 32);
        v18 = *(_DWORD **)result;
        if (*(_QWORD *)result)
          *v18 += 2;
        *(_QWORD *)(v17 + 8 * v14) = v18;
      }
      else
      {
        v15 = *(_DWORD **)result;
        v16 = (_DWORD *)*v3;
        if (*v3)
          *v16 += 2;
        *(_QWORD *)&v15[2 * v14] = v16;
      }
      *(_DWORD *)(v13 + 44) = v14 + 1;
      ++v3;
      v12 -= 8;
    }
    while (v12);
  }
  return result;
}

uint64_t *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::set(WebCore::MediaTrackConstraintSetMap &,WebCore::ConstraintSetType,WebCore::MediaConstraintType,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ConstrainDOMStringParameters> const&)::$_1,WebCore::set(WebCore::MediaTrackConstraintSetMap &,WebCore::ConstraintSetType,WebCore::MediaConstraintType,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ConstrainDOMStringParameters> const&)::$_2,WebCore::set(WebCore::MediaTrackConstraintSetMap &,WebCore::ConstraintSetType,WebCore::MediaConstraintType,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ConstrainDOMStringParameters> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ConstrainDOMStringParameters> const&>(uint64_t *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v3 = *result;
  if (*(_BYTE *)(a2 + 24))
  {
    v7 = *(_QWORD *)(v3 + 32);
    v8 = v7;
    v4 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v4 == -1)
      goto LABEL_8;
    v9 = &v7;
    result = (uint64_t *)((uint64_t (*)(uint64_t **, uint64_t))off_1E3360138[v4])(&v9, a2);
  }
  if (!*(_BYTE *)(a2 + 56))
    return result;
  v7 = *(_QWORD *)(v3 + 32);
  v8 = v7;
  v5 = *(unsigned int *)(a2 + 48);
  if ((_DWORD)v5 == -1)
  {
LABEL_8:
    v6 = std::__throw_bad_variant_access[abi:sn180100]();
    return (uint64_t *)std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::set(WebCore::MediaTrackConstraintSetMap &,WebCore::ConstraintSetType,WebCore::MediaConstraintType,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ConstrainDOMStringParameters> const&)::$_0::operator() const(WebCore::ConstrainDOMStringParameters const&)::{lambda(WTF::String const&)#1},WebCore::set(WebCore::MediaTrackConstraintSetMap &,WebCore::ConstraintSetType,WebCore::MediaConstraintType,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ConstrainDOMStringParameters> const&)::$_0::operator() const(WebCore::ConstrainDOMStringParameters const&)::{lambda(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(v6);
  }
  v9 = &v7;
  return (uint64_t *)((uint64_t (*)(uint64_t **, uint64_t))off_1E3360148[v5])(&v9, a2 + 32);
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::set(WebCore::MediaTrackConstraintSetMap &,WebCore::ConstraintSetType,WebCore::MediaConstraintType,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ConstrainDOMStringParameters> const&)::$_0::operator() const(WebCore::ConstrainDOMStringParameters const&)::{lambda(WTF::String const&)#1},WebCore::set(WebCore::MediaTrackConstraintSetMap &,WebCore::ConstraintSetType,WebCore::MediaConstraintType,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ConstrainDOMStringParameters> const&)::$_0::operator() const(WebCore::ConstrainDOMStringParameters const&)::{lambda(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(uint64_t **a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;

  v2 = **a1;
  result = (_QWORD *)(v2 + 16);
  v4 = *(unsigned int *)(v2 + 28);
  if ((_DWORD)v4 == *(_DWORD *)(v2 + 24))
  {
    result = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v4 + 1, (unint64_t)a2);
    v4 = *(unsigned int *)(v2 + 28);
    v7 = *(_QWORD *)(v2 + 16);
    v8 = (_DWORD *)*result;
    if (*result)
      *v8 += 2;
    *(_QWORD *)(v7 + 8 * v4) = v8;
  }
  else
  {
    v5 = (_DWORD *)*result;
    v6 = (_DWORD *)*a2;
    if (*a2)
      *v6 += 2;
    *(_QWORD *)&v5[2 * v4] = v6;
  }
  *(_DWORD *)(v2 + 28) = v4 + 1;
  return result;
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::set(WebCore::MediaTrackConstraintSetMap &,WebCore::ConstraintSetType,WebCore::MediaConstraintType,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ConstrainDOMStringParameters> const&)::$_0::operator() const(WebCore::ConstrainDOMStringParameters const&)::{lambda(WTF::String const&)#1},WebCore::set(WebCore::MediaTrackConstraintSetMap &,WebCore::ConstraintSetType,WebCore::MediaConstraintType,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ConstrainDOMStringParameters> const&)::$_0::operator() const(WebCore::ConstrainDOMStringParameters const&)::{lambda(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;

  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    v3 = (_DWORD *)*result;
    v4 = *(_QWORD **)a2;
    v5 = 8 * v2;
    do
    {
      v6 = *((_QWORD *)v3 + 1);
      result = (_QWORD *)(v6 + 16);
      v7 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v7 == *(_DWORD *)(v6 + 24))
      {
        result = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v7 + 1, (unint64_t)v4);
        v7 = *(unsigned int *)(v6 + 28);
        v10 = *(_QWORD *)(v6 + 16);
        v11 = (_DWORD *)*result;
        if (*result)
          *v11 += 2;
        *(_QWORD *)(v10 + 8 * v7) = v11;
      }
      else
      {
        v8 = (_DWORD *)*result;
        v9 = (_DWORD *)*v4;
        if (*v4)
          *v9 += 2;
        *(_QWORD *)&v8[2 * v7] = v9;
      }
      *(_DWORD *)(v6 + 28) = v7 + 1;
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::set(WebCore::MediaTrackConstraintSetMap &,WebCore::ConstraintSetType,WebCore::MediaConstraintType,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ConstrainDOMStringParameters> const&)::$_0::operator() const(WebCore::ConstrainDOMStringParameters const&)::{lambda(WTF::String const&)#2},WebCore::set(WebCore::MediaTrackConstraintSetMap &,WebCore::ConstraintSetType,WebCore::MediaConstraintType,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ConstrainDOMStringParameters> const&)::$_0::operator() const(WebCore::ConstrainDOMStringParameters const&)::{lambda(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(uint64_t **a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;

  v2 = **a1;
  result = (_QWORD *)(v2 + 32);
  v4 = *(unsigned int *)(v2 + 44);
  if ((_DWORD)v4 == *(_DWORD *)(v2 + 40))
  {
    result = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v4 + 1, (unint64_t)a2);
    v4 = *(unsigned int *)(v2 + 44);
    v7 = *(_QWORD *)(v2 + 32);
    v8 = (_DWORD *)*result;
    if (*result)
      *v8 += 2;
    *(_QWORD *)(v7 + 8 * v4) = v8;
  }
  else
  {
    v5 = (_DWORD *)*result;
    v6 = (_DWORD *)*a2;
    if (*a2)
      *v6 += 2;
    *(_QWORD *)&v5[2 * v4] = v6;
  }
  *(_DWORD *)(v2 + 44) = v4 + 1;
  return result;
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::set(WebCore::MediaTrackConstraintSetMap &,WebCore::ConstraintSetType,WebCore::MediaConstraintType,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ConstrainDOMStringParameters> const&)::$_0::operator() const(WebCore::ConstrainDOMStringParameters const&)::{lambda(WTF::String const&)#2},WebCore::set(WebCore::MediaTrackConstraintSetMap &,WebCore::ConstraintSetType,WebCore::MediaConstraintType,std::variant<WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::ConstrainDOMStringParameters> const&)::$_0::operator() const(WebCore::ConstrainDOMStringParameters const&)::{lambda(WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#2}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  _DWORD *v11;

  v2 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v2)
  {
    v3 = (_DWORD *)*result;
    v4 = *(_QWORD **)a2;
    v5 = 8 * v2;
    do
    {
      v6 = *((_QWORD *)v3 + 1);
      result = (_QWORD *)(v6 + 32);
      v7 = *(unsigned int *)(v6 + 44);
      if ((_DWORD)v7 == *(_DWORD *)(v6 + 40))
      {
        result = (_QWORD *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)result, v7 + 1, (unint64_t)v4);
        v7 = *(unsigned int *)(v6 + 44);
        v10 = *(_QWORD *)(v6 + 32);
        v11 = (_DWORD *)*result;
        if (*result)
          *v11 += 2;
        *(_QWORD *)(v10 + 8 * v7) = v11;
      }
      else
      {
        v8 = (_DWORD *)*result;
        v9 = (_DWORD *)*v4;
        if (*v4)
          *v9 += 2;
        *(_QWORD *)&v8[2 * v7] = v9;
      }
      *(_DWORD *)(v6 + 44) = v7 + 1;
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::set(WebCore::MediaTrackConstraintSetMap &,WebCore::ConstraintSetType,WebCore::MediaConstraintType,std::variant<BOOL,WebCore::ConstrainBooleanParameters> const&)::$_0,WebCore::set(WebCore::MediaTrackConstraintSetMap &,WebCore::ConstraintSetType,WebCore::MediaConstraintType,std::variant<BOOL,WebCore::ConstrainBooleanParameters> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,BOOL,WebCore::ConstrainBooleanParameters> const&>(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2;

  v2 = 9;
  if (!***(_DWORD ***)result)
    v2 = 11;
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)result + 8) + v2) = *a2 | 0x100;
  return result;
}

uint64_t *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::set(WebCore::MediaTrackConstraintSetMap &,WebCore::ConstraintSetType,WebCore::MediaConstraintType,std::variant<BOOL,WebCore::ConstrainBooleanParameters> const&)::$_0,WebCore::set(WebCore::MediaTrackConstraintSetMap &,WebCore::ConstraintSetType,WebCore::MediaConstraintType,std::variant<BOOL,WebCore::ConstrainBooleanParameters> const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,BOOL,WebCore::ConstrainBooleanParameters> const&>(uint64_t *result, unsigned __int8 *a2)
{
  uint64_t v2;

  v2 = *result;
  if (a2[1])
    *(_WORD *)(*(_QWORD *)(v2 + 16) + 9) = *a2 | 0x100;
  if (a2[3])
    *(_WORD *)(*(_QWORD *)(v2 + 16) + 11) = a2[2] | 0x100;
  return result;
}

uint64_t WebCore::StringConstraint::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  WTF::StringImpl **v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl **v14;
  uint64_t v15;
  WTF::StringImpl *v16;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(unsigned int *)(a1 + 28);
  if ((_DWORD)v4)
  {
    v11 = *(WTF::StringImpl ***)(a1 + 16);
    v12 = 8 * v4;
    do
    {
      v13 = *v11;
      *v11 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      ++v11;
      v12 -= 8;
    }
    while (v12);
  }
  v5 = *(WTF **)(a1 + 16);
  if (v5)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v5, (void *)a2);
  }
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 16) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 24) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a2 + 28) = 0;
  *(_DWORD *)(a1 + 28) = v6;
  v7 = *(unsigned int *)(a1 + 44);
  if ((_DWORD)v7)
  {
    v14 = *(WTF::StringImpl ***)(a1 + 32);
    v15 = 8 * v7;
    do
    {
      v16 = *v14;
      *v14 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v16 -= 2;
      }
      ++v14;
      v15 -= 8;
    }
    while (v15);
  }
  v8 = *(WTF **)(a1 + 32);
  if (v8)
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_DWORD *)(a1 + 40) = 0;
    WTF::fastFree(v8, (void *)a2);
  }
  v9 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 32) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a1 + 40) = v9;
  LODWORD(v9) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a2 + 44) = 0;
  *(_DWORD *)(a1 + 44) = v9;
  return a1;
}

uint64_t std::__optional_destruct_base<WebCore::StringConstraint,false>::reset[abi:sn180100](uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;

  if (*(_BYTE *)(result + 48))
  {
    v2 = result;
    *(_QWORD *)result = &off_1E335FFA0;
    v3 = *(unsigned int *)(result + 44);
    if ((_DWORD)v3)
    {
      v6 = *(WTF::StringImpl ***)(result + 32);
      v7 = 8 * v3;
      do
      {
        v8 = *v6;
        *v6 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, a2);
          else
            *(_DWORD *)v8 -= 2;
        }
        ++v6;
        v7 -= 8;
      }
      while (v7);
    }
    v4 = *(WTF **)(v2 + 32);
    if (v4)
    {
      *(_QWORD *)(v2 + 32) = 0;
      *(_DWORD *)(v2 + 40) = 0;
      WTF::fastFree(v4, a2);
    }
    v5 = *(unsigned int *)(v2 + 28);
    if ((_DWORD)v5)
    {
      v9 = *(WTF::StringImpl ***)(v2 + 16);
      v10 = 8 * v5;
      do
      {
        v11 = *v9;
        *v9 = 0;
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy(v11, a2);
          else
            *(_DWORD *)v11 -= 2;
        }
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
    result = *(_QWORD *)(v2 + 16);
    if (result)
    {
      *(_QWORD *)(v2 + 16) = 0;
      *(_DWORD *)(v2 + 24) = 0;
      result = WTF::fastFree((WTF *)result, a2);
    }
    *(_BYTE *)(v2 + 48) = 0;
  }
  return result;
}

uint64_t WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap(uint64_t result, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  char v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  *(_BYTE *)result = 0;
  *(_BYTE *)(result + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    *(_BYTE *)(result + 8) = *(_BYTE *)(a2 + 8);
    *(_QWORD *)result = &unk_1E3360638;
    v2 = *(_OWORD *)(a2 + 12);
    *(_OWORD *)(result + 25) = *(_OWORD *)(a2 + 25);
    *(_OWORD *)(result + 12) = v2;
    *(_QWORD *)result = &off_1E335FF28;
    *(_BYTE *)(result + 48) = 1;
  }
  *(_BYTE *)(result + 56) = 0;
  *(_BYTE *)(result + 104) = 0;
  if (*(_BYTE *)(a2 + 104))
  {
    *(_BYTE *)(result + 64) = *(_BYTE *)(a2 + 64);
    *(_QWORD *)(result + 56) = &unk_1E3360638;
    v3 = *(_OWORD *)(a2 + 68);
    *(_OWORD *)(result + 81) = *(_OWORD *)(a2 + 81);
    *(_OWORD *)(result + 68) = v3;
    *(_QWORD *)(result + 56) = &off_1E335FF28;
    *(_BYTE *)(result + 104) = 1;
  }
  *(_BYTE *)(result + 112) = 0;
  *(_BYTE *)(result + 160) = 0;
  if (*(_BYTE *)(a2 + 160))
  {
    *(_BYTE *)(result + 120) = *(_BYTE *)(a2 + 120);
    *(_QWORD *)(result + 112) = &unk_1E3360638;
    v4 = *(_OWORD *)(a2 + 124);
    *(_OWORD *)(result + 137) = *(_OWORD *)(a2 + 137);
    *(_OWORD *)(result + 124) = v4;
    *(_QWORD *)(result + 112) = &off_1E335FF28;
    *(_BYTE *)(result + 160) = 1;
  }
  *(_BYTE *)(result + 168) = 0;
  *(_BYTE *)(result + 216) = 0;
  if (*(_BYTE *)(a2 + 216))
  {
    *(_BYTE *)(result + 176) = *(_BYTE *)(a2 + 176);
    *(_QWORD *)(result + 168) = &unk_1E3360638;
    v5 = *(_OWORD *)(a2 + 180);
    *(_OWORD *)(result + 193) = *(_OWORD *)(a2 + 193);
    *(_OWORD *)(result + 180) = v5;
    *(_QWORD *)(result + 168) = &off_1E335FF28;
    *(_BYTE *)(result + 216) = 1;
  }
  *(_BYTE *)(result + 224) = 0;
  *(_BYTE *)(result + 304) = 0;
  if (*(_BYTE *)(a2 + 304))
  {
    v6 = *(_BYTE *)(a2 + 232);
    *(_QWORD *)(result + 224) = &off_1E3360660;
    *(_BYTE *)(result + 232) = v6;
    v7 = *(_OWORD *)(a2 + 240);
    v8 = *(_OWORD *)(a2 + 256);
    v9 = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(result + 281) = *(_OWORD *)(a2 + 281);
    *(_OWORD *)(result + 256) = v8;
    *(_OWORD *)(result + 272) = v9;
    *(_OWORD *)(result + 240) = v7;
    *(_QWORD *)(result + 224) = &off_1E335FF50;
    *(_BYTE *)(result + 304) = 1;
  }
  *(_BYTE *)(result + 312) = 0;
  *(_BYTE *)(result + 392) = 0;
  if (*(_BYTE *)(a2 + 392))
  {
    *(_BYTE *)(result + 320) = *(_BYTE *)(a2 + 320);
    *(_QWORD *)(result + 312) = &off_1E3360660;
    v10 = *(_OWORD *)(a2 + 328);
    v11 = *(_OWORD *)(a2 + 344);
    v12 = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(result + 369) = *(_OWORD *)(a2 + 369);
    *(_OWORD *)(result + 344) = v11;
    *(_OWORD *)(result + 360) = v12;
    *(_OWORD *)(result + 328) = v10;
    *(_QWORD *)(result + 312) = &off_1E335FF50;
    *(_BYTE *)(result + 392) = 1;
  }
  *(_BYTE *)(result + 400) = 0;
  *(_BYTE *)(result + 480) = 0;
  if (*(_BYTE *)(a2 + 480))
  {
    *(_BYTE *)(result + 408) = *(_BYTE *)(a2 + 408);
    *(_QWORD *)(result + 400) = &off_1E3360660;
    v13 = *(_OWORD *)(a2 + 416);
    v14 = *(_OWORD *)(a2 + 432);
    v15 = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(result + 457) = *(_OWORD *)(a2 + 457);
    *(_OWORD *)(result + 432) = v14;
    *(_OWORD *)(result + 448) = v15;
    *(_OWORD *)(result + 416) = v13;
    *(_QWORD *)(result + 400) = &off_1E335FF50;
    *(_BYTE *)(result + 480) = 1;
  }
  *(_BYTE *)(result + 488) = 0;
  *(_BYTE *)(result + 504) = 0;
  if (*(_BYTE *)(a2 + 504))
  {
    *(_BYTE *)(result + 496) = *(_BYTE *)(a2 + 496);
    *(_QWORD *)(result + 488) = &off_1E335FF78;
    *(_DWORD *)(result + 497) = *(_DWORD *)(a2 + 497);
    *(_BYTE *)(result + 504) = 1;
  }
  *(_BYTE *)(result + 512) = 0;
  *(_BYTE *)(result + 528) = 0;
  if (*(_BYTE *)(a2 + 528))
  {
    *(_BYTE *)(result + 520) = *(_BYTE *)(a2 + 520);
    *(_QWORD *)(result + 512) = &off_1E335FF78;
    *(_DWORD *)(result + 521) = *(_DWORD *)(a2 + 521);
    *(_BYTE *)(result + 528) = 1;
  }
  *(_BYTE *)(result + 536) = 0;
  *(_BYTE *)(result + 552) = 0;
  if (*(_BYTE *)(a2 + 552))
  {
    *(_BYTE *)(result + 544) = *(_BYTE *)(a2 + 544);
    *(_QWORD *)(result + 536) = &off_1E335FF78;
    *(_DWORD *)(result + 545) = *(_DWORD *)(a2 + 545);
    *(_BYTE *)(result + 552) = 1;
  }
  *(_BYTE *)(result + 560) = 0;
  *(_BYTE *)(result + 608) = 0;
  if (*(_BYTE *)(a2 + 608))
  {
    *(_BYTE *)(result + 568) = *(_BYTE *)(a2 + 568);
    *(_QWORD *)(result + 560) = &off_1E335FFA0;
    *(_QWORD *)(result + 584) = 0;
    *(_QWORD *)(result + 576) = 0;
    v16 = *(_QWORD *)(a2 + 576);
    *(_QWORD *)(a2 + 576) = 0;
    *(_QWORD *)(result + 576) = v16;
    LODWORD(v16) = *(_DWORD *)(a2 + 584);
    *(_DWORD *)(a2 + 584) = 0;
    *(_DWORD *)(result + 584) = v16;
    LODWORD(v16) = *(_DWORD *)(a2 + 588);
    *(_DWORD *)(a2 + 588) = 0;
    *(_DWORD *)(result + 588) = v16;
    *(_QWORD *)(result + 600) = 0;
    *(_QWORD *)(result + 592) = 0;
    v17 = *(_QWORD *)(a2 + 592);
    *(_QWORD *)(a2 + 592) = 0;
    *(_QWORD *)(result + 592) = v17;
    LODWORD(v17) = *(_DWORD *)(a2 + 600);
    *(_DWORD *)(a2 + 600) = 0;
    *(_DWORD *)(result + 600) = v17;
    LODWORD(v17) = *(_DWORD *)(a2 + 604);
    *(_DWORD *)(a2 + 604) = 0;
    *(_DWORD *)(result + 604) = v17;
    *(_BYTE *)(result + 608) = 1;
  }
  *(_BYTE *)(result + 616) = 0;
  *(_BYTE *)(result + 664) = 0;
  if (*(_BYTE *)(a2 + 664))
  {
    *(_BYTE *)(result + 624) = *(_BYTE *)(a2 + 624);
    *(_QWORD *)(result + 616) = &off_1E335FFA0;
    *(_QWORD *)(result + 640) = 0;
    *(_QWORD *)(result + 632) = 0;
    v18 = *(_QWORD *)(a2 + 632);
    *(_QWORD *)(a2 + 632) = 0;
    *(_QWORD *)(result + 632) = v18;
    LODWORD(v18) = *(_DWORD *)(a2 + 640);
    *(_DWORD *)(a2 + 640) = 0;
    *(_DWORD *)(result + 640) = v18;
    LODWORD(v18) = *(_DWORD *)(a2 + 644);
    *(_DWORD *)(a2 + 644) = 0;
    *(_DWORD *)(result + 644) = v18;
    *(_QWORD *)(result + 656) = 0;
    *(_QWORD *)(result + 648) = 0;
    v19 = *(_QWORD *)(a2 + 648);
    *(_QWORD *)(a2 + 648) = 0;
    *(_QWORD *)(result + 648) = v19;
    LODWORD(v19) = *(_DWORD *)(a2 + 656);
    *(_DWORD *)(a2 + 656) = 0;
    *(_DWORD *)(result + 656) = v19;
    LODWORD(v19) = *(_DWORD *)(a2 + 660);
    *(_DWORD *)(a2 + 660) = 0;
    *(_DWORD *)(result + 660) = v19;
    *(_BYTE *)(result + 664) = 1;
  }
  *(_BYTE *)(result + 672) = 0;
  *(_BYTE *)(result + 720) = 0;
  if (*(_BYTE *)(a2 + 720))
  {
    *(_BYTE *)(result + 680) = *(_BYTE *)(a2 + 680);
    *(_QWORD *)(result + 672) = &off_1E335FFA0;
    *(_QWORD *)(result + 696) = 0;
    *(_QWORD *)(result + 688) = 0;
    v20 = *(_QWORD *)(a2 + 688);
    *(_QWORD *)(a2 + 688) = 0;
    *(_QWORD *)(result + 688) = v20;
    LODWORD(v20) = *(_DWORD *)(a2 + 696);
    *(_DWORD *)(a2 + 696) = 0;
    *(_DWORD *)(result + 696) = v20;
    LODWORD(v20) = *(_DWORD *)(a2 + 700);
    *(_DWORD *)(a2 + 700) = 0;
    *(_DWORD *)(result + 700) = v20;
    *(_QWORD *)(result + 712) = 0;
    *(_QWORD *)(result + 704) = 0;
    v21 = *(_QWORD *)(a2 + 704);
    *(_QWORD *)(a2 + 704) = 0;
    *(_QWORD *)(result + 704) = v21;
    LODWORD(v21) = *(_DWORD *)(a2 + 712);
    *(_DWORD *)(a2 + 712) = 0;
    *(_DWORD *)(result + 712) = v21;
    LODWORD(v21) = *(_DWORD *)(a2 + 716);
    *(_DWORD *)(a2 + 716) = 0;
    *(_DWORD *)(result + 716) = v21;
    *(_BYTE *)(result + 720) = 1;
  }
  *(_BYTE *)(result + 728) = 0;
  *(_BYTE *)(result + 776) = 0;
  if (*(_BYTE *)(a2 + 776))
  {
    *(_BYTE *)(result + 736) = *(_BYTE *)(a2 + 736);
    *(_QWORD *)(result + 728) = &off_1E335FFA0;
    *(_QWORD *)(result + 752) = 0;
    *(_QWORD *)(result + 744) = 0;
    v22 = *(_QWORD *)(a2 + 744);
    *(_QWORD *)(a2 + 744) = 0;
    *(_QWORD *)(result + 744) = v22;
    LODWORD(v22) = *(_DWORD *)(a2 + 752);
    *(_DWORD *)(a2 + 752) = 0;
    *(_DWORD *)(result + 752) = v22;
    LODWORD(v22) = *(_DWORD *)(a2 + 756);
    *(_DWORD *)(a2 + 756) = 0;
    *(_DWORD *)(result + 756) = v22;
    *(_QWORD *)(result + 768) = 0;
    *(_QWORD *)(result + 760) = 0;
    v23 = *(_QWORD *)(a2 + 760);
    *(_QWORD *)(a2 + 760) = 0;
    *(_QWORD *)(result + 760) = v23;
    LODWORD(v23) = *(_DWORD *)(a2 + 768);
    *(_DWORD *)(a2 + 768) = 0;
    *(_DWORD *)(result + 768) = v23;
    LODWORD(v23) = *(_DWORD *)(a2 + 772);
    *(_DWORD *)(a2 + 772) = 0;
    *(_DWORD *)(result + 772) = v23;
    *(_BYTE *)(result + 776) = 1;
  }
  *(_BYTE *)(result + 784) = 0;
  *(_BYTE *)(result + 864) = 0;
  if (*(_BYTE *)(a2 + 864))
  {
    *(_BYTE *)(result + 792) = *(_BYTE *)(a2 + 792);
    *(_QWORD *)(result + 784) = &off_1E3360660;
    v24 = *(_OWORD *)(a2 + 800);
    v25 = *(_OWORD *)(a2 + 816);
    v26 = *(_OWORD *)(a2 + 832);
    *(_OWORD *)(result + 841) = *(_OWORD *)(a2 + 841);
    *(_OWORD *)(result + 816) = v25;
    *(_OWORD *)(result + 832) = v26;
    *(_OWORD *)(result + 800) = v24;
    *(_QWORD *)(result + 784) = &off_1E335FF50;
    *(_BYTE *)(result + 864) = 1;
  }
  *(_BYTE *)(result + 872) = 0;
  *(_BYTE *)(result + 888) = 0;
  if (*(_BYTE *)(a2 + 888))
  {
    *(_BYTE *)(result + 880) = *(_BYTE *)(a2 + 880);
    *(_QWORD *)(result + 872) = &off_1E335FF78;
    *(_DWORD *)(result + 881) = *(_DWORD *)(a2 + 881);
    *(_BYTE *)(result + 888) = 1;
  }
  *(_BYTE *)(result + 896) = 0;
  *(_BYTE *)(result + 912) = 0;
  if (*(_BYTE *)(a2 + 912))
  {
    *(_BYTE *)(result + 904) = *(_BYTE *)(a2 + 904);
    *(_QWORD *)(result + 896) = &off_1E335FF78;
    *(_DWORD *)(result + 905) = *(_DWORD *)(a2 + 905);
    *(_BYTE *)(result + 912) = 1;
  }
  *(_BYTE *)(result + 920) = 0;
  *(_BYTE *)(result + 936) = 0;
  if (*(_BYTE *)(a2 + 936))
  {
    *(_BYTE *)(result + 928) = *(_BYTE *)(a2 + 928);
    *(_QWORD *)(result + 920) = &off_1E335FF78;
    *(_DWORD *)(result + 929) = *(_DWORD *)(a2 + 929);
    *(_BYTE *)(result + 936) = 1;
  }
  return result;
}

WTF::StringImpl *WTF::VectorDestructor<true,WebCore::PeerConnectionBackend::TransceiverState>::destruct(WTF::StringImpl *result, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WebCore::MediaStream **v5;
  uint64_t v6;
  WebCore::MediaStream *v7;
  bmalloc::api *v8;
  void *v9;
  WTF *v10;

  if (result != a2)
  {
    v3 = result;
    do
    {
      v4 = *((unsigned int *)v3 + 5);
      if ((_DWORD)v4)
      {
        v5 = (WebCore::MediaStream **)*((_QWORD *)v3 + 1);
        v6 = 8 * v4;
        do
        {
          v7 = *v5;
          *v5 = 0;
          if (v7)
          {
            if (*((_DWORD *)v7 + 22) == 1)
            {
              WebCore::MediaStream::~MediaStream(v7);
              bmalloc::api::isoDeallocate(v8, v9);
            }
            else
            {
              --*((_DWORD *)v7 + 22);
            }
          }
          ++v5;
          v6 -= 8;
        }
        while (v6);
      }
      v10 = (WTF *)*((_QWORD *)v3 + 1);
      if (v10)
      {
        *((_QWORD *)v3 + 1) = 0;
        *((_DWORD *)v3 + 4) = 0;
        WTF::fastFree(v10, a2);
      }
      result = *(WTF::StringImpl **)v3;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v3 = (WTF::StringImpl *)((char *)v3 + 32);
    }
    while (v3 != a2);
  }
  return result;
}

uint64_t std::__optional_destruct_base<WebCore::PeerConnectionBackend::DescriptionStates,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_BYTE *)(a1 + 72))
  {
    v3 = *(WTF::StringImpl **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(WTF::StringImpl **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v11;
  uint64_t v12;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v5 = *(_QWORD *)(a1 + 8 * i);
      if (v5 != -1)
      {
        *(_QWORD *)(a1 + 8 * i) = 0;
        if (v5)
        {
          do
          {
            v6 = __ldaxr((unsigned int *)v5);
            v7 = v6 - 1;
          }
          while (__stlxr(v7, (unsigned int *)v5));
          if (!v7)
          {
            atomic_store(1u, (unsigned int *)v5);
            v8 = *(unsigned int *)(v5 + 28);
            if ((_DWORD)v8)
            {
              v12 = v5;
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v8));
              v5 = v12;
            }
            v9 = *(WTF **)(v5 + 16);
            if (v9)
            {
              *(_QWORD *)(v5 + 16) = 0;
              *(_DWORD *)(v5 + 24) = 0;
              v11 = v5;
              WTF::fastFree(v9, a2);
              v5 = v11;
            }
            WTF::fastFree((WTF *)v5, a2);
          }
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RTCController::startGatheringLogs(WebCore::Document &,WTF::Function<void ()(WTF::String &&,WTF::String &,WTF::String &,WTF::RefPtr<WebCore::RTCPeerConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)> &&)::$_0,void,rtc::LoggingSeverity,std::basic_string<char,WebCore::RTCController::startGatheringLogs(WebCore::Document &,WTF::Function<void ()(WTF::String &&,WTF::String &,WTF::String &,WTF::RefPtr<WebCore::RTCPeerConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)> &&)::$_0::char_traits<char>,WebCore::RTCController::startGatheringLogs(WebCore::Document &,WTF::Function<void ()(WTF::String &&,WTF::String &,WTF::String &,WTF::RefPtr<WebCore::RTCPeerConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)> &&)::$_0::allocator<char>> const&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E3360178;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCController::startGatheringLogs(WebCore::Document &,WTF::Function<void ()(WTF::String &&,WTF::String &,WTF::String &,WTF::RefPtr<WebCore::RTCPeerConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)> &&)::$_0,void,rtc::LoggingSeverity,std::basic_string<char,WebCore::RTCController::startGatheringLogs(WebCore::Document &,WTF::Function<void ()(WTF::String &&,WTF::String &,WTF::String &,WTF::RefPtr<WebCore::RTCPeerConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)> &&)::$_0::char_traits<char>,WebCore::RTCController::startGatheringLogs(WebCore::Document &,WTF::Function<void ()(WTF::String &&,WTF::String &,WTF::String &,WTF::RefPtr<WebCore::RTCPeerConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)> &&)::$_0::allocator<char>> const&>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3360178;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCController::startGatheringLogs(WebCore::Document &,WTF::Function<void ()(WTF::String &&,WTF::String &,WTF::String &,WTF::RefPtr<WebCore::RTCPeerConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)> &&)::$_0,void,rtc::LoggingSeverity,std::basic_string<char,WebCore::RTCController::startGatheringLogs(WebCore::Document &,WTF::Function<void ()(WTF::String &&,WTF::String &,WTF::String &,WTF::RefPtr<WebCore::RTCPeerConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)> &&)::$_0::char_traits<char>,WebCore::RTCController::startGatheringLogs(WebCore::Document &,WTF::Function<void ()(WTF::String &&,WTF::String &,WTF::String &,WTF::RefPtr<WebCore::RTCPeerConnection,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>> &&)> &&)::$_0::allocator<char>> const&>::call(uint64_t a1, int a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t result;
  WTF::StringImpl *v8;
  WTF *v9;
  WTF::StringImpl *v10;
  uint64_t v11;

  v3 = *(unsigned int **)(a1 + 8);
  if (v3)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v9 = (WTF *)v3;
  WTF::String::fromUTF8();
  WTF::String::isolatedCopy();
  v5 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v5 = &off_1E33601A0;
  *(_QWORD *)(v5 + 8) = v9;
  *(_QWORD *)(v5 + 16) = v10;
  *(_DWORD *)(v5 + 24) = a2;
  v11 = v5;
  WTF::ensureOnMainThread();
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  result = (uint64_t)v8;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      return WTF::StringImpl::destroy(v8, v6);
    else
      *(_DWORD *)v8 -= 2;
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore13RTCController18startGatheringLogsERNS2_8DocumentEONS_8FunctionIFvONS_6StringES8_S8_ONS_6RefPtrINS2_17RTCPeerConnectionENS_12RawPtrTraitsISA_EENS_21DefaultRefDerefTraitsISA_EEEEEEEENK3__0clIN3rtc15LoggingSeverityERKNSt3__112basic_stringIcNSO_11char_traitsIcEENSO_9allocatorIcEEEEEEDaOT_OT0_EUlvE_vJEED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E33601A0;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore13RTCController18startGatheringLogsERNS2_8DocumentEONS_8FunctionIFvONS_6StringES8_S8_ONS_6RefPtrINS2_17RTCPeerConnectionENS_12RawPtrTraitsISA_EENS_21DefaultRefDerefTraitsISA_EEEEEEEENK3__0clIN3rtc15LoggingSeverityERKNSt3__112basic_stringIcNSO_11char_traitsIcEENSO_9allocatorIcEEEEEEDaOT_OT0_EUlvE_vJEED0Ev(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E33601A0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore13RTCController18startGatheringLogsERNS2_8DocumentEONS_8FunctionIFvONS_6StringES8_S8_ONS_6RefPtrINS2_17RTCPeerConnectionENS_12RawPtrTraitsISA_EENS_21DefaultRefDerefTraitsISA_EEEEEEEENK3__0clIN3rtc15LoggingSeverityERKNSt3__112basic_stringIcNSO_11char_traitsIcEENSO_9allocatorIcEEEEEEDaOT_OT0_EUlvE_vJEE4callEv(WTF::StringImpl *result)
{
  uint64_t v1;
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF *v5;
  WebCore::RTCPeerConnection *v6;
  WTF::StringImpl *v7;
  bmalloc::api *v8;
  void *v9;
  WebCore::RTCPeerConnection *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = result;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      switch(*((_DWORD *)v3 + 6))
      {
        case 0:
        case 1:
        case 2:
        case 3:
        case 4:
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          break;
        default:
          v4 = (WTF::StringImpl *)MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
          v11 = v4;
          break;
      }
      v10 = 0;
      (*(void (**)(_QWORD, WTF::StringImpl **, uint64_t, WTF::StringImpl **, WebCore::RTCPeerConnection **))(**(_QWORD **)(v2 + 56) + 16))(*(_QWORD *)(v2 + 56), &v12, (uint64_t)v3 + 16, &v11, &v10);
      v6 = v10;
      v10 = 0;
      if (v6)
      {
        if (*((_DWORD *)v6 + 6) == 1)
        {
          WebCore::RTCPeerConnection::~RTCPeerConnection(v6, v5);
          bmalloc::api::isoDeallocate(v8, v9);
        }
        else
        {
          --*((_DWORD *)v6 + 6);
        }
      }
      v7 = v11;
      v11 = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, v5);
        else
          *(_DWORD *)v7 -= 2;
      }
      result = v12;
      v12 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

void WebCore::PeerConnectionBackend::PendingTrackEvent::~PendingTrackEvent(WebCore::PeerConnectionBackend::PendingTrackEvent *this, void *a2)
{
  WebCore::RTCRtpTransceiver *v3;
  uint64_t v4;
  WebCore::MediaStream **v5;
  uint64_t v6;
  WebCore::MediaStream *v7;
  bmalloc::api *v8;
  void *v9;
  WTF *v10;
  _DWORD *v11;
  WebCore::RTCRtpReceiver *v12;
  bmalloc::api *v13;
  void *v14;
  bmalloc::api *v15;
  void *v16;

  v3 = (WebCore::RTCRtpTransceiver *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      WebCore::RTCRtpTransceiver::~RTCRtpTransceiver(v3, a2);
      bmalloc::api::isoDeallocate(v13, v14);
    }
    else
    {
      --*((_DWORD *)v3 + 2);
    }
  }
  v4 = *((unsigned int *)this + 7);
  if ((_DWORD)v4)
  {
    v5 = (WebCore::MediaStream **)*((_QWORD *)this + 2);
    v6 = 8 * v4;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (*((_DWORD *)v7 + 22) == 1)
        {
          WebCore::MediaStream::~MediaStream(v7);
          bmalloc::api::isoDeallocate(v8, v9);
        }
        else
        {
          --*((_DWORD *)v7 + 22);
        }
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v10 = (WTF *)*((_QWORD *)this + 2);
  if (v10)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v10, a2);
  }
  v11 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v11)
  {
    if (v11[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
    else
      --v11[6];
  }
  v12 = *(WebCore::RTCRtpReceiver **)this;
  *(_QWORD *)this = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 2) == 1)
    {
      WebCore::RTCRtpReceiver::~RTCRtpReceiver(v12, a2);
      bmalloc::api::isoDeallocate(v15, v16);
    }
    else
    {
      --*((_DWORD *)v12 + 2);
    }
  }
}

WTF::StringImpl *WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [25],WTF::String>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, uint64_t *a5)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  NSObject *v24;
  uint64_t v25;
  void *v26;
  char *v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  WTF::Logger *v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::Logger *v42;
  uint64_t v43;
  WTF::StringImpl **v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  int v49;
  uint64_t v50;
  _BYTE *v51;
  size_t v52;
  _BYTE *v53;
  _BYTE *v54;
  unsigned __int128 v55;
  char v56;
  char *v57;
  WTF::StringImpl **v58;
  WTF::Logger *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  __int128 buf;
  int v66;
  WTF::StringImpl *v67;
  int v68;
  WTF::StringImpl *v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  v57 = (char *)a4;
  result = (WTF::StringImpl *)WTF::String::String((WTF::String *)&v62, a4);
  v58 = (WTF::StringImpl **)a5;
  v11 = *a5;
  if (*a5)
    *(_DWORD *)v11 += 2;
  v12 = v63;
  if (v63)
  {
    v13 = *((_DWORD *)v63 + 1);
    if (v62)
      goto LABEL_5;
LABEL_95:
    v14 = 0;
    if (v11)
      goto LABEL_6;
LABEL_96:
    v15 = 0;
    goto LABEL_7;
  }
  v13 = 0;
  if (!v62)
    goto LABEL_95;
LABEL_5:
  v14 = *((_DWORD *)v62 + 1);
  if (!v11)
    goto LABEL_96;
LABEL_6:
  v15 = *(_DWORD *)(v11 + 4);
LABEL_7:
  if ((v15 | v14) < 0)
    goto LABEL_116;
  v16 = __OFADD__(v14, v15);
  v17 = v14 + v15;
  v18 = v16;
  if (v13 < 0)
    goto LABEL_116;
  if (v18)
    goto LABEL_116;
  v19 = (v13 + v17);
  if (__OFADD__(v13, v17))
    goto LABEL_116;
  if (v63 && (*((_BYTE *)v63 + 16) & 4) == 0)
  {
    v20 = 0;
    goto LABEL_21;
  }
  if (v62)
  {
    v21 = *((_DWORD *)v62 + 4);
    v20 = (v21 >> 2) & 1;
    if (!v11 || (v21 & 4) == 0)
    {
LABEL_21:
      result = (WTF::StringImpl *)WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v19, v20, v63, (uint64_t)v62, v11, &v64);
      if (v64)
      {
        if (v11)
        {
          if (*(_DWORD *)v11 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v11, v10);
          else
            *(_DWORD *)v11 -= 2;
        }
        goto LABEL_25;
      }
LABEL_117:
      __break(0xC471u);
      return result;
    }
LABEL_20:
    v20 = (*(unsigned __int8 *)(v11 + 16) >> 2) & 1;
    goto LABEL_21;
  }
  if (v11)
    goto LABEL_20;
  if ((_DWORD)v19)
  {
    if ((v19 & 0x80000000) == 0)
    {
      result = (WTF::StringImpl *)WTF::tryFastCompactMalloc((WTF *)(v19 + 20));
      v50 = buf;
      if ((_QWORD)buf)
      {
        v51 = (_BYTE *)(buf + 20);
        *(_DWORD *)buf = 2;
        *(_DWORD *)(v50 + 4) = v19;
        *(_QWORD *)(v50 + 8) = v50 + 20;
        *(_DWORD *)(v50 + 16) = 4;
        if (v12)
        {
          v10 = (WTF::StringImpl *)*((_QWORD *)v12 + 1);
          v52 = *((unsigned int *)v12 + 1);
          if ((*((_BYTE *)v12 + 16) & 4) != 0)
          {
            if ((_DWORD)v52)
            {
              if ((_DWORD)v52 == 1)
                *v51 = *(_BYTE *)v10;
              else
                memcpy(v51, v10, v52);
            }
          }
          else
          {
            v53 = &v51[v52];
            if (v52 >= 0x10)
            {
              v54 = &v51[v52 & 0xFFFFFFF0];
              do
              {
                v55 = (unsigned __int128)vld2q_s8((const char *)v10);
                v10 = (WTF::StringImpl *)((char *)v10 + 32);
                *(_OWORD *)v51 = v55;
                v51 += 16;
              }
              while (v51 != v54);
              v51 = v54;
            }
            while (v51 != v53)
            {
              v56 = *(_BYTE *)v10;
              v10 = (WTF::StringImpl *)((char *)v10 + 2);
              *v51++ = v56;
            }
          }
        }
        goto LABEL_106;
      }
    }
LABEL_116:
    v64 = 0;
    goto LABEL_117;
  }
  v50 = MEMORY[0x1E0CBEF70];
  *MEMORY[0x1E0CBEF70] += 2;
LABEL_106:
  v64 = (WTF::StringImpl *)v50;
LABEL_25:
  v22 = v62;
  v62 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v10);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = v63;
  v63 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v10);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = *(NSObject **)(a1 + 32);
  v25 = os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v25)
  {
    WTF::String::utf8();
    v27 = v60 ? (char *)v60 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v27;
    _os_log_impl(&dword_1940B8000, v24, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v25 = (uint64_t)v60;
    v60 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 1)
        v25 = WTF::fastFree((WTF *)v25, v26);
      else
        --*(_DWORD *)v25;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v28 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v29 = *v28;
      if ((v29 & 1) != 0)
        break;
      v30 = __ldaxr(v28);
      if (v30 == v29)
      {
        if (!__stxr(v29 | 1, v28))
        {
          v31 = WTF::Logger::observers((WTF::Logger *)v25);
          v32 = *(unsigned int *)(v31 + 12);
          if ((_DWORD)v32)
          {
            v33 = *(uint64_t **)v31;
            v34 = *(_QWORD *)v31 + 8 * v32;
            do
            {
              v35 = *v33;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v66 = 0;
              WTF::String::String((WTF::String *)&v67, v57);
              v68 = 0;
              v36 = *v58;
              if (*v58)
                *(_DWORD *)v36 += 2;
              v69 = v36;
              v60 = 0;
              v61 = 0;
              v37 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v61) = 3;
              v60 = v37;
              v38 = HIDWORD(v61);
              *((_DWORD *)v37 + 4 * HIDWORD(v61)) = buf;
              v39 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v37 + 2 * v38 + 1) = v39;
              *((_DWORD *)v37 + 4 * (v38 + 1)) = v66;
              v40 = v67;
              if (v67)
                *(_DWORD *)v67 += 2;
              *((_QWORD *)v37 + 2 * (v38 + 1) + 1) = v40;
              *((_DWORD *)v37 + 4 * (v38 + 2)) = v68;
              v41 = v69;
              if (v69)
                *(_DWORD *)v69 += 2;
              *((_QWORD *)v37 + 2 * (v38 + 2) + 1) = v41;
              HIDWORD(v61) = v38 + 3;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v35 + 16))(v35, a1, a2, &v60);
              v42 = v60;
              if (HIDWORD(v61))
              {
                v43 = 16 * HIDWORD(v61);
                v44 = (WTF::StringImpl **)((char *)v60 + 8);
                do
                {
                  v45 = *v44;
                  *v44 = 0;
                  if (v45)
                  {
                    if (*(_DWORD *)v45 == 2)
                      WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v26);
                    else
                      *(_DWORD *)v45 -= 2;
                  }
                  v44 += 2;
                  v43 -= 16;
                }
                while (v43);
                v42 = v60;
              }
              if (v42)
              {
                v60 = 0;
                LODWORD(v61) = 0;
                WTF::fastFree(v42, v26);
              }
              v46 = v69;
              v69 = 0;
              if (v46)
              {
                if (*(_DWORD *)v46 == 2)
                  WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v26);
                else
                  *(_DWORD *)v46 -= 2;
              }
              v47 = v67;
              v67 = 0;
              if (v47)
              {
                if (*(_DWORD *)v47 == 2)
                  WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v26);
                else
                  *(_DWORD *)v47 -= 2;
              }
              v48 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v48)
              {
                if (*(_DWORD *)v48 == 2)
                  WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v26);
                else
                  *(_DWORD *)v48 -= 2;
              }
              ++v33;
            }
            while (v33 != (uint64_t *)v34);
          }
          v49 = __ldxr(v28);
          if (v49 == 1)
          {
            if (!__stlxr(0, v28))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = v64;
  v64 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v26);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::RTCPeerConnection>(WebCore::RTCPeerConnection &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF *a2)
{
  WTF *v2;
  void *v3;

  v2 = (WTF *)WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::RTCPeerConnection>(WebCore::RTCPeerConnection &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(a1, a2);
  return WTF::fastFree(v2, v3);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::RTCPeerConnection>(WebCore::RTCPeerConnection &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::RTCPeerConnection>(WebCore::RTCPeerConnection &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF *a2)
{
  uint64_t v3;
  WTF *v4;
  WebCore::RTCPeerConnection *v5;
  uint64_t v7;
  bmalloc::api *v8;
  void *v9;
  bmalloc::api *v10;
  void *v11;

  *a1 = off_1E3360610;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 48);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
      {
        WebCore::RTCPeerConnection::~RTCPeerConnection((WebCore::RTCPeerConnection *)v7, a2);
        bmalloc::api::isoDeallocate(v10, v11);
      }
      else
      {
        --*(_DWORD *)(v7 + 24);
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (WebCore::RTCPeerConnection *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 1)
    {
      WebCore::RTCPeerConnection::~RTCPeerConnection(v5, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*((_DWORD *)v5 + 6);
    }
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::createOfferSucceeded(WTF::String &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *a1 = &off_1E33601D8;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::createOfferSucceeded(WTF::String &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E33601D8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::createOfferSucceeded(WTF::String &&)::$_0,void>::call(uint64_t a1)
{
  _DWORD *v1;
  uint64_t result;
  int v3;
  _DWORD *v4;
  int v5;
  char v6;

  v1 = *(_DWORD **)(a1 + 16);
  if (v1)
    *v1 += 2;
  v3 = 0;
  v4 = v1;
  v5 = 0;
  result = (*(uint64_t (**)(_QWORD, int *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), &v3);
  if (v5 != -1)
    return ((uint64_t (*)(char *, int *))off_1E33601F0[v5])(&v6, &v3);
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore25RTCSessionDescriptionInitENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore25RTCSessionDescriptionInitENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::createOfferFailed(WebCore::Exception &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *a1 = &off_1E3360210;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::createOfferFailed(WebCore::Exception &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E3360210;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::createOfferFailed(WebCore::Exception &&)::$_0,void>::call(uint64_t a1)
{
  char v1;
  uint64_t v2;
  uint64_t result;
  _BYTE v4[8];
  uint64_t v5;
  int v6;
  char v7;

  v1 = *(_BYTE *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v4[0] = v1;
  v5 = v2;
  v6 = 1;
  result = (*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v4);
  if (v6 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E33601F0[v6])(&v7, v4);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::createAnswerSucceeded(WTF::String &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *a1 = &off_1E3360238;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::createAnswerSucceeded(WTF::String &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E3360238;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::createAnswerSucceeded(WTF::String &&)::$_0,void>::call(uint64_t a1)
{
  _DWORD *v1;
  uint64_t result;
  int v3;
  _DWORD *v4;
  int v5;
  char v6;

  v1 = *(_DWORD **)(a1 + 16);
  if (v1)
    *v1 += 2;
  v3 = 2;
  v4 = v1;
  v5 = 0;
  result = (*(uint64_t (**)(_QWORD, int *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), &v3);
  if (v5 != -1)
    return ((uint64_t (*)(char *, int *))off_1E33601F0[v5])(&v6, &v3);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::createAnswerFailed(WebCore::Exception &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *a1 = &off_1E3360260;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::createAnswerFailed(WebCore::Exception &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E3360260;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::createAnswerFailed(WebCore::Exception &&)::$_0,void>::call(uint64_t a1)
{
  char v1;
  uint64_t v2;
  uint64_t result;
  _BYTE v4[8];
  uint64_t v5;
  int v6;
  char v7;

  v1 = *(_BYTE *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  v4[0] = v1;
  v5 = v2;
  v6 = 1;
  result = (*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v4);
  if (v6 != -1)
    return ((uint64_t (*)(char *, _BYTE *))off_1E33601F0[v6])(&v7, v4);
  return result;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [21],WTF::Vector<WebCore::PeerConnectionBackend::TransceiverState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WTF::Logger::LogSiteIdentifier *a1, uint64_t *a2)
{
  uint64_t result;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  char v10;
  int v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  NSObject *v17;
  uint64_t v18;
  void *v19;
  char *v20;
  unsigned __int8 *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::Logger *v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::Logger *v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  int v41;
  WTF::Logger *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  uint8_t buf[4];
  _BYTE v49[12];
  int v50;
  WTF::StringImpl *v51;
  int v52;
  WTF::StringImpl *v53[3];

  v53[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(a1);
  WTF::String::String((WTF::String *)&v45, "Transceiver states: ");
  result = WTF::LogArgument<WTF::Vector<WebCore::PeerConnectionBackend::TransceiverState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::toString((WTF::JSONImpl::Array *)&v44, a2);
  if (v46)
  {
    v5 = *((_DWORD *)v46 + 1);
    if (v45)
      goto LABEL_3;
LABEL_91:
    v6 = 0;
    if (v44)
      goto LABEL_4;
LABEL_92:
    v7 = 0;
    goto LABEL_5;
  }
  v5 = 0;
  if (!v45)
    goto LABEL_91;
LABEL_3:
  v6 = *((_DWORD *)v45 + 1);
  if (!v44)
    goto LABEL_92;
LABEL_4:
  v7 = *((_DWORD *)v44 + 1);
LABEL_5:
  if ((v7 | v6) < 0
    || ((v8 = __OFADD__(v6, v7), v9 = v6 + v7, !v8) ? (v10 = 0) : (v10 = 1),
        v5 < 0 || (v10 & 1) != 0 || (result = (v5 + v9), __OFADD__(v5, v9))))
  {
    v47 = 0;
    goto LABEL_96;
  }
  if (v46 && (*((_BYTE *)v46 + 16) & 4) == 0)
  {
    v11 = 0;
    goto LABEL_19;
  }
  if (v45)
  {
    v12 = *((_DWORD *)v45 + 4);
    v11 = (v12 >> 2) & 1;
    if (v44 && (v12 & 4) != 0)
      goto LABEL_18;
  }
  else
  {
    if (v44)
    {
LABEL_18:
      v11 = (*((unsigned __int8 *)v44 + 16) >> 2) & 1;
      goto LABEL_19;
    }
    v11 = 1;
  }
LABEL_19:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v11, v46, (uint64_t)v45, (uint64_t)v44, &v47);
  if (!v47)
  {
LABEL_96:
    __break(0xC471u);
    return result;
  }
  v14 = v44;
  v44 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = v45;
  v45 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = v46;
  v46 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v13);
    else
      *(_DWORD *)v16 -= 2;
  }
  v17 = qword_1ECE7CD60;
  v18 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v18)
  {
    WTF::String::utf8();
    v20 = v42 ? (char *)v42 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v49 = v20;
    _os_log_impl(&dword_1940B8000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v18 = (uint64_t)v42;
    v42 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
        v18 = WTF::fastFree((WTF *)v18, v19);
      else
        --*(_DWORD *)v18;
    }
  }
  if (WebCore::LogWebRTC && byte_1ECE7CD50 >= 4u)
  {
    v21 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v22 = *v21;
      if ((v22 & 1) != 0)
        break;
      v23 = __ldaxr(v21);
      if (v23 == v22)
      {
        if (!__stxr(v22 | 1, v21))
        {
          v24 = WTF::Logger::observers((WTF::Logger *)v18);
          v25 = *(unsigned int *)(v24 + 12);
          if ((_DWORD)v25)
          {
            v26 = *(uint64_t **)v24;
            v27 = *(_QWORD *)v24 + 8 * v25;
            do
            {
              v28 = *v26;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(a1);
              v50 = 0;
              WTF::String::String((WTF::String *)&v51, "Transceiver states: ");
              v52 = 0;
              WTF::LogArgument<WTF::Vector<WebCore::PeerConnectionBackend::TransceiverState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::toString((WTF::JSONImpl::Array *)v53, a2);
              v42 = 0;
              v43 = 0;
              v29 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
              LODWORD(v43) = 3;
              v42 = v29;
              v30 = HIDWORD(v43);
              *((_DWORD *)v29 + 4 * HIDWORD(v43)) = *(_DWORD *)buf;
              v31 = *(_QWORD *)&v49[4];
              if (*(_QWORD *)&v49[4])
                **(_DWORD **)&v49[4] += 2;
              *((_QWORD *)v29 + 2 * v30 + 1) = v31;
              *((_DWORD *)v29 + 4 * (v30 + 1)) = v50;
              v32 = v51;
              if (v51)
                *(_DWORD *)v51 += 2;
              *((_QWORD *)v29 + 2 * (v30 + 1) + 1) = v32;
              *((_DWORD *)v29 + 4 * (v30 + 2)) = v52;
              v33 = v53[0];
              if (v53[0])
                *(_DWORD *)v53[0] += 2;
              *((_QWORD *)v29 + 2 * (v30 + 2) + 1) = v33;
              HIDWORD(v43) = v30 + 3;
              (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v28 + 16))(v28, &WebCore::LogWebRTC, 4, &v42);
              v34 = v42;
              if (HIDWORD(v43))
              {
                v35 = 16 * HIDWORD(v43);
                v36 = (WTF::StringImpl **)((char *)v42 + 8);
                do
                {
                  v37 = *v36;
                  *v36 = 0;
                  if (v37)
                  {
                    if (*(_DWORD *)v37 == 2)
                      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v19);
                    else
                      *(_DWORD *)v37 -= 2;
                  }
                  v36 += 2;
                  v35 -= 16;
                }
                while (v35);
                v34 = v42;
              }
              if (v34)
              {
                v42 = 0;
                LODWORD(v43) = 0;
                WTF::fastFree(v34, v19);
              }
              v38 = v53[0];
              v53[0] = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                  WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v38 -= 2;
              }
              v39 = v51;
              v51 = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                  WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v39 -= 2;
              }
              v40 = *(WTF::StringImpl **)&v49[4];
              *(_QWORD *)&v49[4] = 0;
              if (v40)
              {
                if (*(_DWORD *)v40 == 2)
                  WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v40 -= 2;
              }
              ++v26;
            }
            while (v26 != (uint64_t *)v27);
          }
          v41 = __ldxr(v21);
          if (v41 == 1)
          {
            if (!__stlxr(0, v21))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v47;
  v47 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::setLocalDescriptionSucceeded(std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&,std::optional<WTF::Vector<WebCore::PeerConnectionBackend::TransceiverState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::unique_ptr<WebCore::RTCSctpTransportBackend,std::default_delete<std::optional<WTF::Vector<WebCore::PeerConnectionBackend::TransceiverState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>> &&,std::optional<double>)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;

  *(_QWORD *)a1 = off_1E3360288;
  v3 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(_BYTE *)(a1 + 120))
  {
    v4 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v4)
      WTF::VectorDestructor<true,WebCore::PeerConnectionBackend::TransceiverState>::destruct(*(WTF::StringImpl **)(a1 + 104), (WTF::StringImpl *)(*(_QWORD *)(a1 + 104) + 32 * v4));
    v5 = *(WTF **)(a1 + 104);
    if (v5)
    {
      *(_QWORD *)(a1 + 104) = 0;
      *(_DWORD *)(a1 + 112) = 0;
      WTF::fastFree(v5, a2);
    }
  }
  std::__optional_destruct_base<WebCore::PeerConnectionBackend::DescriptionStates,false>::~__optional_destruct_base[abi:sn180100](a1 + 24, (WTF::StringImpl *)a2);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  void *v6;
  uint64_t v7;

  *(_QWORD *)a1 = off_1E3360288;
  v3 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(_BYTE *)(a1 + 120))
  {
    v4 = *(unsigned int *)(a1 + 116);
    if ((_DWORD)v4)
      WTF::VectorDestructor<true,WebCore::PeerConnectionBackend::TransceiverState>::destruct(*(WTF::StringImpl **)(a1 + 104), (WTF::StringImpl *)(*(_QWORD *)(a1 + 104) + 32 * v4));
    v5 = *(WTF **)(a1 + 104);
    if (v5)
    {
      *(_QWORD *)(a1 + 104) = 0;
      *(_DWORD *)(a1 + 112) = 0;
      WTF::fastFree(v5, a2);
    }
  }
  std::__optional_destruct_base<WebCore::PeerConnectionBackend::DescriptionStates,false>::~__optional_destruct_base[abi:sn180100](a1 + 24, (WTF::StringImpl *)a2);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return WTF::fastFree((WTF *)a1, v6);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::setLocalDescriptionSucceeded(std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&,std::optional<WTF::Vector<WebCore::PeerConnectionBackend::TransceiverState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::unique_ptr<WebCore::RTCSctpTransportBackend,std::default_delete<std::optional<WTF::Vector<WebCore::PeerConnectionBackend::TransceiverState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>> &&,std::optional<double>)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  WTF::StringImpl *v5;
  const WTF::StringImpl *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  bmalloc::api *v27;
  void *v28;
  uint64_t *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  WTF *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _BOOL4 v39;
  WTF *v41;
  uint64_t v42;
  _DWORD **v43;
  _DWORD *v44;
  bmalloc::api *v45;
  void *v46;
  WTF *v47;
  uint64_t v48;
  _DWORD **v49;
  _DWORD *v50;
  bmalloc::api *v51;
  void *v52;
  WTF::StringImpl *v53;
  uint64_t *v54;
  uint64_t v55;
  WTF *v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF *v60;
  uint64_t v61;

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(v1 + 16);
  if (*(_DWORD *)(v2 + 80) == 5)
    return result;
  v3 = result;
  (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 120) + 192))(*(_QWORD *)(v2 + 120));
  WebCore::RTCPeerConnection::updateTransceiverTransports((unsigned int *)v2);
  WebCore::RTCPeerConnection::updateSctpBackend(*(_QWORD *)(v1 + 16), (uint64_t *)(v3 + 128), *(_QWORD *)(v3 + 136), *(_QWORD *)(v3 + 144));
  result = *(_QWORD *)(v1 + 16);
  if (*(_BYTE *)(v3 + 96))
  {
    WebCore::RTCPeerConnection::updateDescriptions((_QWORD *)result, v3 + 24);
    result = *(_QWORD *)(v1 + 16);
    if (*(_DWORD *)(result + 80) == 5)
      return result;
  }
  result = (uint64_t)WebCore::RTCPeerConnection::processIceTransportChanges((WebCore::RTCPeerConnection *)result, v4);
  if (*(_DWORD *)(*(_QWORD *)(v1 + 16) + 80) == 5)
    return result;
  if (!*(_BYTE *)(v1 + 81) || !*(_BYTE *)(v3 + 120))
    goto LABEL_98;
  v56 = 0;
  v57 = 0;
  v60 = 0;
  v61 = 0;
  v7 = *(unsigned int *)(v3 + 116);
  if (!(_DWORD)v7)
  {
    v29 = 0;
    v8 = 0;
    v30 = 1;
    goto LABEL_56;
  }
  v8 = 0;
  v55 = 0;
  v9 = *(_QWORD *)(v3 + 104);
  v10 = v9 + 32 * v7;
  do
  {
    v11 = *(_QWORD *)(v1 + 16);
    v12 = *(unsigned int *)(v11 + 116);
    if (!(_DWORD)v12)
    {
LABEL_42:
      v17 = 0;
      goto LABEL_43;
    }
    v13 = *(uint64_t **)(v11 + 104);
    v14 = 8 * v12;
    while (1)
    {
      v15 = *(WTF::StringImpl **)(*v13 + 64);
      if (v15)
      {
        (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v15 + 40))(&v59);
        v15 = v59;
      }
      else
      {
        v59 = 0;
      }
      v16 = WTF::equal(v15, *(const WTF::StringImpl **)v9, v6);
      result = (uint64_t)v59;
      v59 = 0;
      if (result)
        break;
LABEL_17:
      if (v16)
        goto LABEL_21;
LABEL_18:
      ++v13;
      v14 -= 8;
      if (!v14)
        goto LABEL_42;
    }
    if (*(_DWORD *)result != 2)
    {
      *(_DWORD *)result -= 2;
      goto LABEL_17;
    }
    result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
    if (!v16)
      goto LABEL_18;
LABEL_21:
    v17 = *v13;
    if (*v13)
    {
      ++*(_DWORD *)(v17 + 8);
      if ((!*(_BYTE *)(v9 + 28) || (*(_DWORD *)(v9 + 24) & 0xFFFFFFFD) != 0)
        && (*(_QWORD *)(v17 + 28) & 0xFF00000000) != 0
        && (*(_QWORD *)(v17 + 28) & 0xFFFFFFFDLL) == 0)
      {
        result = WebCore::setAssociatedRemoteStreams(*(_QWORD *)(v17 + 48), v9, (const WTF::StringImpl *)&v60, (unsigned int *)&v56);
        v19 = *(_QWORD *)(*(_QWORD *)(v17 + 48) + 24);
        v20 = v55;
        v21 = v55;
        if ((_DWORD)v55 == HIDWORD(v55))
        {
          v22 = ((unint64_t)HIDWORD(v55) >> 2) + HIDWORD(v55);
          if (v22 >= 0x10)
            v23 = v22 + 1;
          else
            v23 = 16;
          if (v23 <= (unint64_t)v55 + 1)
            v24 = v55 + 1;
          else
            v24 = v23;
          if (v24 >> 29)
          {
            __break(0xC471u);
            return result;
          }
          v25 = (char *)WTF::fastMalloc((WTF *)(8 * v24));
          result = (uint64_t)memcpy(v25, v8, 8 * v55);
          if (v8)
          {
            if (v25 == v8)
            {
              LODWORD(v24) = 0;
              v25 = 0;
            }
            result = WTF::fastFree((WTF *)v8, v5);
          }
          v20 = HIDWORD(v55);
          v8 = v25;
        }
        else
        {
          LODWORD(v24) = HIDWORD(v55);
        }
        LODWORD(v55) = v20 + 1;
        HIDWORD(v55) = v24;
        ++*(_DWORD *)(v19 + 24);
        *(_QWORD *)&v8[8 * v21] = v19;
      }
    }
LABEL_43:
    v26 = *(_QWORD *)(v9 + 24);
    *(_DWORD *)(v17 + 28) = v26;
    *(_BYTE *)(v17 + 32) = BYTE4(v26);
    if (*(_DWORD *)(v17 + 8) == 1)
    {
      WebCore::RTCRtpTransceiver::~RTCRtpTransceiver((WebCore::RTCRtpTransceiver *)v17, v5);
      result = bmalloc::api::isoDeallocate(v27, v28);
    }
    else
    {
      --*(_DWORD *)(v17 + 8);
    }
    v9 += 32;
  }
  while (v9 != v10);
  v29 = (uint64_t *)&v8[8 * v55];
  v30 = 1;
  if (!(_DWORD)v55)
  {
LABEL_56:
    if (HIDWORD(v57))
    {
      v34 = v56;
      v35 = (WTF *)((char *)v56 + 16 * HIDWORD(v57));
      do
      {
        v36 = *(_QWORD *)v34;
        v37 = *((_QWORD *)v34 + 1);
        v34 = (WTF *)((char *)v34 + 16);
        result = WebCore::MediaStreamPrivate::removeTrack(*(_QWORD *)(v36 + 96), *(WebCore::MediaStreamTrackPrivate **)(v37 + 96), v6);
        v38 = *(_DWORD *)(*(_QWORD *)(v1 + 16) + 80);
        v39 = v38 != 5;
      }
      while (v38 != 5 && v34 != v35);
    }
    else
    {
      v39 = 1;
    }
    goto LABEL_66;
  }
  v31 = 0;
  while (1)
  {
    v32 = *(_QWORD *)&v8[v31];
    *(_BYTE *)(v32 + 1208) = 1;
    v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 96) + 40) + 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 80))(v33, 1);
    *(_BYTE *)(*(_QWORD *)&v8[v31] + 1208) = 0;
    if (*(_DWORD *)(*(_QWORD *)(v1 + 16) + 80) == 5)
      break;
    v31 += 8;
    if (8 * v55 == v31)
    {
      v30 = 0;
      goto LABEL_56;
    }
  }
  v30 = 0;
  v39 = 0;
LABEL_66:
  v41 = v60;
  if (HIDWORD(v61))
  {
    v42 = 16 * HIDWORD(v61);
    v43 = (_DWORD **)((char *)v60 + 8);
    do
    {
      v44 = *v43;
      *v43 = 0;
      if (v44)
      {
        if (v44[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v44 + 16))(v44);
        else
          --v44[6];
      }
      result = (uint64_t)*(v43 - 1);
      *(v43 - 1) = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 88) == 1)
        {
          WebCore::MediaStream::~MediaStream((WebCore::MediaStream *)result);
          result = bmalloc::api::isoDeallocate(v45, v46);
        }
        else
        {
          --*(_DWORD *)(result + 88);
        }
      }
      v43 += 2;
      v42 -= 16;
    }
    while (v42);
  }
  if (v41)
    result = WTF::fastFree(v41, v5);
  if ((v30 & 1) == 0)
  {
    v54 = (uint64_t *)v8;
    do
    {
      result = *v54;
      *v54 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 24) == 1)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
        else
          --*(_DWORD *)(result + 24);
      }
      ++v54;
    }
    while (v54 != v29);
  }
  if (v8)
    result = WTF::fastFree((WTF *)v8, v5);
  v47 = v56;
  if (HIDWORD(v57))
  {
    v48 = 16 * HIDWORD(v57);
    v49 = (_DWORD **)((char *)v56 + 8);
    do
    {
      v50 = *v49;
      *v49 = 0;
      if (v50)
      {
        if (v50[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v50 + 16))(v50);
        else
          --v50[6];
      }
      result = (uint64_t)*(v49 - 1);
      *(v49 - 1) = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 88) == 1)
        {
          WebCore::MediaStream::~MediaStream((WebCore::MediaStream *)result);
          result = bmalloc::api::isoDeallocate(v51, v52);
        }
        else
        {
          --*(_DWORD *)(result + 88);
        }
      }
      v49 += 2;
      v48 -= 16;
    }
    while (v48);
  }
  if (v47)
    result = WTF::fastFree(v47, v5);
  if (v39)
  {
LABEL_98:
    v56 = 0;
    v57 = 0;
    v58 = 0;
    result = (*(uint64_t (**)(_QWORD, WTF **))(**(_QWORD **)(v3 + 16) + 16))(*(_QWORD *)(v3 + 16), &v56);
    if ((_BYTE)v58)
    {
      result = (uint64_t)v57;
      v57 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return WTF::StringImpl::destroy((WTF::StringImpl *)result, v53);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WebCore::setAssociatedRemoteStreams(uint64_t result, uint64_t a2, const WTF::StringImpl *a3, unsigned int *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  const WTF::StringImpl *v17;
  char v18;
  WebCore::MediaStream *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  WebCore::MediaStream **v27;
  uint64_t v28;
  _DWORD *v29;
  bmalloc::api *v30;
  void *v31;
  uint64_t v32;
  WebCore::MediaStream **v33;
  WebCore::MediaStream **v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  const WTF::StringImpl *v42;
  char v43;
  WebCore::MediaStream *v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  WebCore::MediaStream **v52;
  uint64_t v53;
  _DWORD *v54;
  bmalloc::api *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  uint64_t v69;
  WTF *v70;
  WTF *v71;
  unsigned int v72;
  unsigned int v73;
  WebCore::MediaStream *v75;
  _DWORD *v76;

  v5 = result;
  v6 = *(unsigned int *)(result + 76);
  if ((_DWORD)v6)
  {
    v8 = *(_QWORD *)(result + 64);
    v9 = v8 + 8 * v6;
    do
    {
      if (*(_QWORD *)v8)
      {
        v10 = *(_QWORD *)(*(_QWORD *)v8 + 8);
        if (v10)
        {
          v11 = *(unsigned int *)(a2 + 20);
          if ((_DWORD)v11)
          {
            v12 = *(_QWORD *)(a2 + 8);
            v13 = 8 * v11;
            while (1)
            {
              v14 = *(WTF **)(*(_QWORD *)(*(_QWORD *)v12 + 96) + 48);
              if (v14)
                *(_DWORD *)v14 += 2;
              v15 = *(_QWORD *)(*(_QWORD *)v8 + 8);
              if (v15)
                v16 = v15 - 48;
              else
                v16 = 0;
              v17 = *(const WTF::StringImpl **)(*(_QWORD *)(v16 + 96) + 48);
              if (v17)
              {
                *(_DWORD *)v17 += 2;
                result = WTF::equal(v14, v17, a3);
                v18 = result;
                if (*(_DWORD *)v17 == 2)
                  result = WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v17 -= 2;
              }
              else
              {
                result = WTF::equal(v14, 0, a3);
                v18 = result;
              }
              if (v14)
              {
                if (*(_DWORD *)v14 == 2)
                  result = WTF::StringImpl::destroy(v14, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v14 -= 2;
              }
              if ((v18 & 1) != 0)
                break;
              v12 += 8;
              v13 -= 8;
              if (!v13)
              {
                if (*(_QWORD *)v8)
                {
                  v10 = *(_QWORD *)(*(_QWORD *)v8 + 8);
                  goto LABEL_26;
                }
                v19 = 0;
                goto LABEL_28;
              }
            }
          }
          else
          {
LABEL_26:
            v19 = (WebCore::MediaStream *)(v10 - 48);
            if (!v10)
              v19 = 0;
LABEL_28:
            ++*((_DWORD *)v19 + 22);
            v20 = *(_DWORD **)(v5 + 24);
            ++v20[6];
            v75 = v19;
            v76 = v20;
            v21 = a4[3];
            if ((_DWORD)v21 == a4[2])
            {
              v22 = (uint64_t *)WTF::Vector<WebCore::MediaStreamAndTrackItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a4, v21 + 1, (unint64_t)&v75);
              v21 = a4[3];
              v23 = (_QWORD *)(*(_QWORD *)a4 + 16 * v21);
              v24 = *v22;
              *v22 = 0;
              v25 = v22 + 1;
              *v23 = v24;
              v26 = v23 + 1;
            }
            else
            {
              v27 = (WebCore::MediaStream **)(*(_QWORD *)a4 + 16 * v21);
              v75 = 0;
              *v27 = v19;
              v26 = v27 + 1;
              v25 = (uint64_t *)&v76;
            }
            v28 = *v25;
            *v25 = 0;
            *v26 = v28;
            a4[3] = v21 + 1;
            v29 = v76;
            v76 = 0;
            if (v29)
            {
              if (v29[6] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 16))(v29);
              else
                --v29[6];
            }
            result = (uint64_t)v75;
            v75 = 0;
            if (result)
            {
              if (*(_DWORD *)(result + 88) == 1)
              {
                WebCore::MediaStream::~MediaStream((WebCore::MediaStream *)result);
                result = bmalloc::api::isoDeallocate(v30, v31);
              }
              else
              {
                --*(_DWORD *)(result + 88);
              }
            }
          }
        }
      }
      v8 += 8;
    }
    while (v8 != v9);
  }
  v32 = *(unsigned int *)(a2 + 20);
  if (!(_DWORD)v32)
  {
    LODWORD(v57) = 0;
LABEL_90:
    v68 = 0;
    v58 = 0;
    goto LABEL_91;
  }
  v33 = *(WebCore::MediaStream ***)(a2 + 8);
  v34 = &v33[v32];
  do
  {
    v35 = *(unsigned int *)(v5 + 76);
    if ((_DWORD)v35)
    {
      v36 = *(uint64_t **)(v5 + 64);
      v37 = 8 * v35;
      while (1)
      {
        v38 = *v36;
        v39 = *(WTF **)(*((_QWORD *)*v33 + 12) + 48);
        if (v39)
          *(_DWORD *)v39 += 2;
        v40 = *(_QWORD *)(v38 + 8);
        if (v40)
          v41 = v40 - 48;
        else
          v41 = 0;
        v42 = *(const WTF::StringImpl **)(*(_QWORD *)(v41 + 96) + 48);
        if (v42)
        {
          *(_DWORD *)v42 += 2;
          result = WTF::equal(v39, v42, a3);
          v43 = result;
          if (*(_DWORD *)v42 == 2)
            result = WTF::StringImpl::destroy(v42, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v42 -= 2;
        }
        else
        {
          result = WTF::equal(v39, 0, a3);
          v43 = result;
        }
        if (v39)
        {
          if (*(_DWORD *)v39 == 2)
            result = WTF::StringImpl::destroy(v39, (WTF::StringImpl *)a2);
          else
            *(_DWORD *)v39 -= 2;
        }
        if ((v43 & 1) != 0)
          break;
        ++v36;
        v37 -= 8;
        if (!v37)
          goto LABEL_63;
      }
    }
    else
    {
LABEL_63:
      v44 = *v33;
      *((_DWORD *)v44 + 22) = *((_DWORD *)*v33 + 22) + 1;
      v45 = *(_DWORD **)(v5 + 24);
      ++v45[6];
      v75 = v44;
      v76 = v45;
      v46 = *((unsigned int *)a3 + 3);
      if ((_DWORD)v46 == *((_DWORD *)a3 + 2))
      {
        v47 = (uint64_t *)WTF::Vector<WebCore::MediaStreamAndTrackItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)a3, v46 + 1, (unint64_t)&v75);
        v46 = *((unsigned int *)a3 + 3);
        v48 = (_QWORD *)(*(_QWORD *)a3 + 16 * v46);
        v49 = *v47;
        *v47 = 0;
        v50 = v47 + 1;
        *v48 = v49;
        v51 = v48 + 1;
      }
      else
      {
        v52 = (WebCore::MediaStream **)(*(_QWORD *)a3 + 16 * v46);
        v75 = 0;
        *v52 = v44;
        v51 = v52 + 1;
        v50 = (uint64_t *)&v76;
      }
      v53 = *v50;
      *v50 = 0;
      *v51 = v53;
      *((_DWORD *)a3 + 3) = v46 + 1;
      v54 = v76;
      v76 = 0;
      if (v54)
      {
        if (v54[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v54 + 16))(v54);
        else
          --v54[6];
      }
      result = (uint64_t)v75;
      v75 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 88) == 1)
        {
          WebCore::MediaStream::~MediaStream((WebCore::MediaStream *)result);
          result = bmalloc::api::isoDeallocate(v55, v56);
        }
        else
        {
          --*(_DWORD *)(result + 88);
        }
      }
    }
    ++v33;
  }
  while (v33 != v34);
  v57 = *(unsigned int *)(a2 + 20);
  if (!(_DWORD)v57)
    goto LABEL_90;
  if (v57 >> 29)
  {
    __break(0xC471u);
    return result;
  }
  result = WTF::fastMalloc((WTF *)(8 * v57));
  v58 = result;
  v59 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v59)
  {
    v60 = 0;
    v61 = *(uint64_t **)(a2 + 8);
    v62 = &v61[v59];
    do
    {
      v63 = *v61;
      result = *(_QWORD *)(*v61 + 56);
      if (result)
        goto LABEL_106;
      result = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)result = 1;
      *(_QWORD *)(result + 8) = v63 + 48;
      v64 = *(unsigned int **)(v63 + 56);
      *(_QWORD *)(v63 + 56) = result;
      if (!v64)
        goto LABEL_106;
      do
      {
        v65 = __ldaxr(v64);
        v66 = v65 - 1;
      }
      while (__stlxr(v66, v64));
      if (!v66)
      {
        atomic_store(1u, v64);
        WTF::fastFree((WTF *)v64, (void *)a2);
      }
      result = *(_QWORD *)(v63 + 56);
      if (result)
      {
LABEL_106:
        do
          v67 = __ldaxr((unsigned int *)result);
        while (__stlxr(v67 + 1, (unsigned int *)result));
      }
      v68 = v60 + 1;
      *(_QWORD *)(v58 + 8 * v60) = result;
      ++v61;
      ++v60;
    }
    while (v61 != v62);
  }
  else
  {
    v68 = 0;
  }
LABEL_91:
  v69 = *(unsigned int *)(v5 + 76);
  v70 = *(WTF **)(v5 + 64);
  if ((_DWORD)v69)
  {
    v71 = (WTF *)((char *)v70 + 8 * v69);
    do
    {
      result = *(_QWORD *)v70;
      *(_QWORD *)v70 = 0;
      if (result)
      {
        do
        {
          v72 = __ldaxr((unsigned int *)result);
          v73 = v72 - 1;
        }
        while (__stlxr(v73, (unsigned int *)result));
        if (!v73)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, (void *)a2);
        }
      }
      v70 = (WTF *)((char *)v70 + 8);
    }
    while (v70 != v71);
    v70 = *(WTF **)(v5 + 64);
  }
  if (v70)
  {
    *(_QWORD *)(v5 + 64) = 0;
    *(_DWORD *)(v5 + 72) = 0;
    result = WTF::fastFree(v70, (void *)a2);
  }
  *(_QWORD *)(v5 + 64) = v58;
  *(_DWORD *)(v5 + 72) = v57;
  *(_DWORD *)(v5 + 76) = v68;
  return result;
}

unint64_t WTF::Vector<WebCore::MediaStreamAndTrackItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::MediaStreamAndTrackItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::MediaStreamAndTrackItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::MediaStreamAndTrackItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  unsigned int *v7;
  unsigned int **v8;
  unsigned int **v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  bmalloc::api *v13;
  void *v14;

  if (result[2] < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
      v3[2] = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = (unsigned int **)((char *)v4 + 16 * v5);
        v9 = (unsigned int **)v4;
        do
        {
          v10 = *v9;
          *v9 = 0;
          *(_QWORD *)v7 = v10;
          v11 = v9[1];
          v9[1] = 0;
          *((_QWORD *)v7 + 1) = v11;
          v12 = v9[1];
          v9[1] = 0;
          if (v12)
          {
            if (v12[6] == 1)
              (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 16))(v12);
            else
              --v12[6];
          }
          result = *v9;
          *v9 = 0;
          if (result)
          {
            if (result[22] == 1)
            {
              WebCore::MediaStream::~MediaStream((WebCore::MediaStream *)result);
              result = (unsigned int *)bmalloc::api::isoDeallocate(v13, v14);
            }
            else
            {
              --result[22];
            }
          }
          v9 += 2;
          v7 += 4;
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::setLocalDescriptionFailed(WebCore::Exception &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *a1 = &off_1E33602B0;
  v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::setLocalDescriptionFailed(WebCore::Exception &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E33602B0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::setLocalDescriptionFailed(WebCore::Exception &&)::$_0,void>::call(WTF::StringImpl *result)
{
  char v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  _BYTE v4[8];
  WTF::StringImpl *v5;
  char v6;

  if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)result + 1) + 16) + 80) != 5)
  {
    v1 = *((_BYTE *)result + 24);
    v2 = (WTF::StringImpl *)*((_QWORD *)result + 4);
    *((_QWORD *)result + 4) = 0;
    v4[0] = v1;
    v5 = v2;
    v6 = 1;
    result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, _BYTE *))(**((_QWORD **)result + 2) + 16))(*((_QWORD *)result + 2), v4);
    if (v6)
    {
      result = v5;
      v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::setRemoteDescriptionSucceeded(std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&,std::optional<WTF::Vector<WebCore::PeerConnectionBackend::TransceiverState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::unique_ptr<WebCore::RTCSctpTransportBackend,std::default_delete<std::optional<WTF::Vector<WebCore::PeerConnectionBackend::TransceiverState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>> &&,std::optional<double>)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E33602D8;
  WebCore::PeerConnectionBackend::setRemoteDescriptionSucceeded(std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&,std::optional<WTF::Vector<WebCore::PeerConnectionBackend::TransceiverState,0ul,std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&::CrashOnOverflow,16ul,std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&::FastMalloc>> &&,std::unique_ptr<WebCore::RTCSctpTransportBackend,std::default_delete<std::optional<WTF::Vector<WebCore::PeerConnectionBackend::TransceiverState,0ul,std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&::CrashOnOverflow,16ul,std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&::FastMalloc>> &&>> &&,std::optional<double>)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::setRemoteDescriptionSucceeded(std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&,std::optional<WTF::Vector<WebCore::PeerConnectionBackend::TransceiverState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::unique_ptr<WebCore::RTCSctpTransportBackend,std::default_delete<std::optional<WTF::Vector<WebCore::PeerConnectionBackend::TransceiverState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>> &&,std::optional<double>)::$_0,void>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E33602D8;
  WebCore::PeerConnectionBackend::setRemoteDescriptionSucceeded(std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&,std::optional<WTF::Vector<WebCore::PeerConnectionBackend::TransceiverState,0ul,std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&::CrashOnOverflow,16ul,std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&::FastMalloc>> &&,std::unique_ptr<WebCore::RTCSctpTransportBackend,std::default_delete<std::optional<WTF::Vector<WebCore::PeerConnectionBackend::TransceiverState,0ul,std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&::CrashOnOverflow,16ul,std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&::FastMalloc>> &&>> &&,std::optional<double>)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::setRemoteDescriptionSucceeded(std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&,std::optional<WTF::Vector<WebCore::PeerConnectionBackend::TransceiverState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&,std::unique_ptr<WebCore::RTCSctpTransportBackend,std::default_delete<std::optional<WTF::Vector<WebCore::PeerConnectionBackend::TransceiverState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &&>> &&,std::optional<double>)::$_0,void>::call(uint64_t result, uint64_t a2, WTF::StringImpl *a3, WTF::StringImpl *a4, WTF::StringImpl *a5, WTF::StringImpl *a6)
{
  WTF **v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::String *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  const WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  _DWORD *v34;
  bmalloc::api *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  WTF::StringImpl *v41;
  WebCore *v42;
  const WTF::StringImpl *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  WTF *v55;
  WTF::StringImpl *v56;
  int v57;
  WTF::StringImpl *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  WebCore *v62;
  void *v63;
  int v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  uint64_t v73;
  char *v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  _DWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  bmalloc::api *v86;
  void *v87;
  unsigned int v88;
  __int128 *v89;
  unsigned __int8 *v90;
  WebCore::EventTarget *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _DWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  WTF::StringImpl *v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  int v109;
  int v110;
  int v111;
  BOOL v112;
  int v113;
  char v114;
  uint64_t v115;
  int v116;
  unsigned int v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  NSObject *v120;
  uint64_t v121;
  void *v122;
  char *v123;
  int v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  WTF::StringImpl *v131;
  WTF::Logger *v132;
  uint64_t v133;
  uint64_t v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::Logger *v137;
  uint64_t v138;
  WTF::StringImpl **v139;
  WTF::StringImpl *v140;
  WTF::StringImpl *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  _BYTE *v147;
  size_t v148;
  unsigned __int128 *v149;
  unsigned __int128 *v150;
  unsigned __int128 v151;
  char v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  char v164;
  int v165;
  char v166;
  uint64_t v167;
  int v168;
  WTF::StringImpl *v169;
  WTF::StringImpl *v170;
  WTF::StringImpl *v171;
  WTF::StringImpl *v172;
  WTF::StringImpl *v173;
  NSObject *v174;
  uint64_t v175;
  void *v176;
  char *v177;
  unsigned __int8 *v178;
  int v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  WTF::Logger *v186;
  uint64_t v187;
  uint64_t v188;
  WTF::StringImpl *v189;
  WTF::StringImpl *v190;
  uint64_t v191;
  WTF::Logger *v192;
  uint64_t v193;
  WTF::StringImpl **v194;
  WTF::StringImpl *v195;
  WTF::StringImpl *v196;
  WTF::StringImpl *v197;
  WTF::StringImpl *v198;
  WTF::StringImpl *v199;
  int v200;
  unsigned int v201;
  WTF::StringImpl *v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  const WTF::StringImpl *v209;
  uint64_t v210;
  void *v211;
  WTF::String *v212;
  int v213;
  int v214;
  int v215;
  int v216;
  int v217;
  char v218;
  int v219;
  char v220;
  uint64_t v221;
  int v222;
  WTF::StringImpl *v223;
  WTF::StringImpl *v224;
  WTF::StringImpl *v225;
  WTF::StringImpl *v226;
  WTF::StringImpl *v227;
  NSObject *v228;
  uint64_t v229;
  void *v230;
  char *v231;
  unsigned __int8 *v232;
  int v233;
  int v234;
  uint64_t v235;
  WTF::StringImpl *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  WTF::Logger *v242;
  uint64_t v243;
  uint64_t v244;
  WTF::StringImpl *v245;
  WTF::StringImpl *v246;
  uint64_t v247;
  WTF::Logger *v248;
  uint64_t v249;
  WTF::StringImpl **v250;
  WTF::StringImpl *v251;
  WTF::StringImpl *v252;
  WTF::StringImpl *v253;
  WTF::StringImpl *v254;
  WTF::StringImpl *v255;
  int v256;
  unsigned int v257;
  WTF::StringImpl *v258;
  WTF *v259;
  WTF *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  void *v264;
  WTF::String *v265;
  int v266;
  int v267;
  int v268;
  int v269;
  int v270;
  char v271;
  int v272;
  char v273;
  uint64_t v274;
  int v275;
  WTF::StringImpl *v276;
  WTF::StringImpl *v277;
  WTF::StringImpl *v278;
  WTF::StringImpl *v279;
  WTF::StringImpl *v280;
  NSObject *v281;
  uint64_t v282;
  void *v283;
  char *v284;
  unsigned __int8 *v285;
  int v286;
  int v287;
  uint64_t v288;
  WTF::StringImpl *v289;
  uint64_t v291;
  uint64_t v292;
  uint64_t *v293;
  uint64_t v294;
  uint64_t v295;
  WTF::Logger *v296;
  uint64_t v297;
  uint64_t v298;
  WTF::StringImpl *v299;
  WTF::StringImpl *v300;
  uint64_t v301;
  WTF::Logger *v302;
  uint64_t v303;
  WTF::StringImpl **v304;
  WTF::StringImpl *v305;
  WTF::StringImpl *v306;
  WTF::StringImpl *v307;
  WTF::StringImpl *v308;
  WTF::StringImpl *v309;
  int v310;
  unsigned int v311;
  WTF::StringImpl *v312;
  uint64_t *v313;
  uint64_t *v314;
  uint64_t v315;
  uint64_t v316;
  _DWORD *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  int v322;
  int v323;
  int v324;
  int v325;
  char v326;
  int v327;
  char v328;
  int v329;
  WTF::StringImpl *v330;
  WTF::StringImpl *v331;
  WTF::StringImpl *v332;
  WTF::StringImpl *v333;
  WTF::StringImpl *v334;
  NSObject *v335;
  uint64_t v336;
  char *v337;
  unsigned __int8 *v338;
  int v339;
  int v340;
  uint64_t v341;
  WTF::StringImpl *v342;
  WTF::StringImpl *v343;
  uint64_t v344;
  WTF::StringImpl *v345;
  WTF::StringImpl *v346;
  uint64_t v347;
  _DWORD **v348;
  _DWORD *v349;
  bmalloc::api *v350;
  void *v351;
  WTF *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t *v355;
  uint64_t v356;
  uint64_t v357;
  WTF::Logger *v358;
  uint64_t v359;
  uint64_t v360;
  WTF::StringImpl *v361;
  WTF::StringImpl *v362;
  uint64_t v363;
  WTF::Logger *v364;
  WTF::String *v365;
  uint64_t v366;
  WTF::StringImpl **v367;
  WTF::StringImpl *v368;
  WTF::StringImpl *v369;
  WTF::StringImpl *v370;
  WTF::StringImpl *v371;
  WTF::StringImpl *v372;
  int v373;
  unsigned int v374;
  WTF::StringImpl *v375;
  WTF::StringImpl *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  WebCore::EventTarget *v381;
  uint64_t v382;
  WTF::StringImpl *v383;
  int v385;
  uint64_t v386;
  uint64_t v387;
  WTF::StringImpl *v388;
  uint64_t v389;
  uint64_t v390;
  WTF *v391;
  WTF::StringImpl *v392;
  uint64_t v393;
  _DWORD **v394;
  _DWORD *v395;
  bmalloc::api *v396;
  void *v397;
  uint64_t v398;
  WTF::StringImpl *v399;
  _DWORD *v400;
  WTF::StringImpl *v401;
  uint64_t v402;
  _DWORD **v403;
  _DWORD *v404;
  WebCore::MediaStream *v405;
  bmalloc::api *v406;
  void *v407;
  WTF *v408;
  uint64_t v409;
  _DWORD **v410;
  _DWORD *v411;
  bmalloc::api *v412;
  void *v413;
  uint64_t v414;
  uint64_t *v415;
  uint64_t v416;
  _DWORD **v417;
  _DWORD *v418;
  uint64_t v419;
  uint64_t *v420;
  uint64_t v421;
  unint64_t StatusReg;
  __int128 *v423;
  unsigned int v424;
  __int128 v425;
  char *v426;
  WTF::String *v427;
  WTF::String *v428;
  WTF::String *v429;
  uint64_t *v430;
  WTF::StringImpl *v431;
  uint64_t v432;
  WTF::StringImpl *v433;
  uint64_t v434;
  WTF *v435;
  uint64_t v436;
  WTF::StringImpl *v437;
  WTF::StringImpl *v438;
  WTF::StringImpl *v439;
  WTF::StringImpl *v440;
  uint64_t v441;
  void *v442;
  const char *v443;
  uint64_t v444;
  WTF::Logger *v445;
  uint64_t v446;
  WTF::StringImpl *v447;
  __int128 buf;
  const char *v449;
  WTF::StringImpl *v450;
  int v451;
  WTF::StringImpl *v452;
  int v453;
  _QWORD v454[5];

  v454[2] = *MEMORY[0x1E0C80C00];
  v8 = *(uint64_t **)(result + 8);
  v9 = v8[2];
  if (*(_DWORD *)(v9 + 80) == 5)
    return result;
  v10 = result;
  v435 = 0;
  v436 = 0;
  if (*(_BYTE *)(result + 120))
  {
    v11 = *(unsigned int *)(v9 + 116);
    if ((_DWORD)v11)
    {
      v12 = 0;
      v13 = 0;
      v14 = *(char **)(v9 + 104);
      v15 = &v14[8 * v11];
      do
      {
        if (!*(_BYTE *)(v10 + 120))
        {
          __break(1u);
          goto LABEL_717;
        }
        v16 = *(unsigned int *)(v10 + 116);
        if ((_DWORD)v16)
        {
          v6 = *(WTF ***)(v10 + 104);
          v7 = (char *)(32 * v16);
          while (1)
          {
            v17 = *(_QWORD *)(*(_QWORD *)v14 + 64);
            if (v17)
            {
              (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v17 + 40))(&buf);
              v18 = (const WTF::StringImpl *)buf;
            }
            else
            {
              v18 = 0;
              *(_QWORD *)&buf = 0;
            }
            v20 = WTF::equal(*v6, v18, a3);
            result = buf;
            *(_QWORD *)&buf = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v19);
              else
                *(_DWORD *)result -= 2;
            }
            if ((v20 & 1) != 0)
              break;
            v6 += 4;
            v7 -= 32;
            if (!v7)
              goto LABEL_18;
          }
        }
        else
        {
LABEL_18:
          v21 = *(_QWORD *)(*(_QWORD *)v14 + 48);
          v22 = *(unsigned int *)(v21 + 76);
          if ((_DWORD)v22)
          {
            v23 = *(_QWORD *)(v21 + 64);
            v6 = (WTF **)(8 * v22);
            do
            {
              if (*(_QWORD *)v23)
              {
                v24 = *(_QWORD *)(*(_QWORD *)v23 + 8);
                if (v24)
                {
                  v25 = v24 - 48;
                  ++*(_DWORD *)(v24 + 40);
                  *(_QWORD *)&buf = v24 - 48;
                  v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v14 + 48) + 24);
                  ++*(_DWORD *)(v26 + 24);
                  *((_QWORD *)&buf + 1) = v26;
                  if ((_DWORD)v13 == (_DWORD)v436)
                  {
                    v27 = (uint64_t *)WTF::Vector<WebCore::MediaStreamAndTrackItem,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v435, v13 + 1, (unint64_t)&buf);
                    LODWORD(v13) = HIDWORD(v436);
                    v12 = v435;
                    v28 = (_QWORD *)((char *)v435 + 16 * HIDWORD(v436));
                    v29 = *v27;
                    *v27 = 0;
                    v30 = v27 + 1;
                    *v28 = v29;
                    v31 = v28 + 1;
                  }
                  else
                  {
                    v32 = (_QWORD *)((char *)v12 + 16 * v13);
                    *(_QWORD *)&buf = 0;
                    *v32 = v25;
                    v31 = v32 + 1;
                    v30 = (uint64_t *)&buf + 1;
                  }
                  v33 = *v30;
                  *v30 = 0;
                  *v31 = v33;
                  v13 = (v13 + 1);
                  HIDWORD(v436) = v13;
                  v34 = (_DWORD *)*((_QWORD *)&buf + 1);
                  *((_QWORD *)&buf + 1) = 0;
                  if (v34)
                  {
                    if (v34[6] == 1)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 16))(v34);
                    else
                      --v34[6];
                  }
                  result = buf;
                  *(_QWORD *)&buf = 0;
                  if (result)
                  {
                    if (*(_DWORD *)(result + 88) == 1)
                    {
                      WebCore::MediaStream::~MediaStream((WebCore::MediaStream *)result);
                      result = bmalloc::api::isoDeallocate(v35, v36);
                    }
                    else
                    {
                      --*(_DWORD *)(result + 88);
                    }
                  }
                }
              }
              v23 += 8;
              --v6;
            }
            while (v6);
          }
        }
        v14 += 8;
      }
      while (v14 != v15);
      v9 = v8[2];
    }
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 120) + 192))(*(_QWORD *)(v9 + 120));
  WebCore::RTCPeerConnection::updateTransceiverTransports((unsigned int *)v9);
  WebCore::RTCPeerConnection::updateSctpBackend(v8[2], (uint64_t *)(v10 + 128), *(_QWORD *)(v10 + 136), *(_QWORD *)(v10 + 144));
  v38 = v8[2];
  if (*(_BYTE *)(v10 + 96))
  {
    WebCore::RTCPeerConnection::updateDescriptions((_QWORD *)v38, v10 + 24);
    v38 = v8[2];
    if (*(_DWORD *)(v38 + 80) == 5)
    {
      v39 = v8[8];
      result = (*(uint64_t (**)(uint64_t *))(*v8 + 24))(v8);
      v41 = (WTF::StringImpl *)v8[9];
      *(_QWORD *)&buf = result;
      *((_QWORD *)&buf + 1) = v40;
      v449 = "operator()";
      v450 = v41;
      if (*(_BYTE *)(v39 + 12) && WebCore::LogWebRTC && byte_1ECE7CD50 >= 4u)
        result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [48]>((uint64_t)&WebCore::LogWebRTC, 4u, (WTF::Logger::LogSiteIdentifier *)&buf, "PeerConnection closed after descriptions update");
      goto LABEL_807;
    }
  }
  v42 = WebCore::RTCPeerConnection::processIceTransportChanges((WebCore::RTCPeerConnection *)v38, v37);
  if (*(_DWORD *)(v8[2] + 80) == 5)
  {
    v44 = v8[8];
    result = (*(uint64_t (**)(uint64_t *))(*v8 + 24))(v8);
    v45 = (WTF::StringImpl *)v8[9];
    *(_QWORD *)&buf = result;
    *((_QWORD *)&buf + 1) = v40;
    v449 = "operator()";
    v450 = v45;
    if (*(_BYTE *)(v44 + 12) && WebCore::LogWebRTC && byte_1ECE7CD50 >= 4u)
      result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [50]>((uint64_t)&WebCore::LogWebRTC, 4u, (WTF::Logger::LogSiteIdentifier *)&buf, "PeerConnection closed after ICE transport changes");
    goto LABEL_807;
  }
  v430 = v8;
  v421 = v10;
  if (!*(_BYTE *)(v10 + 120))
  {
    v88 = *(_DWORD *)(v10 + 164);
    if (!v88)
      goto LABEL_803;
    v89 = *(__int128 **)(v10 + 152);
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v423 = (__int128 *)((char *)v89 + 40 * v88);
    v90 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v428 = (WTF::String *)*((_QWORD *)v89 + 1);
      v91 = (WebCore::EventTarget *)v8[2];
      v92 = *(_QWORD *)(StatusReg + 736);
      if (!v92 || (v93 = *(_QWORD *)(v92 + 96)) == 0)
        v93 = WebCore::threadGlobalDataSlow(v42);
      v94 = *(_QWORD *)(v93 + 40);
      if (!v94)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v93);
        v94 = *(_QWORD *)(v93 + 40);
      }
      v425 = *v89;
      *(_QWORD *)v89 = 0;
      *((_QWORD *)v89 + 1) = 0;
      v95 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v95);
      *(_QWORD *)(v95 + 8) = 0;
      *(_DWORD *)(v95 + 16) = 1;
      *(_DWORD *)(v95 + 20) = *(_DWORD *)(v95 + 20) & 0xFFC00000 | 0x160200 | (*(_QWORD *)(v94 + 2112) != 0);
      v97 = *(_DWORD **)(v94 + 2112);
      if (v97)
        *v97 += 2;
      *(_QWORD *)(v95 + 24) = v97;
      *(_QWORD *)(v95 + 40) = 0;
      *(_QWORD *)(v95 + 48) = 0;
      *(_QWORD *)(v95 + 32) = 0;
      *(_QWORD *)(v95 + 56) = v96;
      *(_QWORD *)(v95 + 64) = 0;
      *(_QWORD *)v95 = off_1E3362018;
      *(_OWORD *)(v95 + 72) = v425;
      *(_QWORD *)(v95 + 88) = 0;
      *(_QWORD *)(v95 + 96) = 0;
      v98 = *((_QWORD *)v89 + 2);
      *((_QWORD *)v89 + 2) = 0;
      *(_QWORD *)(v95 + 88) = v98;
      LODWORD(v98) = *((_DWORD *)v89 + 6);
      *((_DWORD *)v89 + 6) = 0;
      *(_DWORD *)(v95 + 96) = v98;
      LODWORD(v98) = *((_DWORD *)v89 + 7);
      *((_DWORD *)v89 + 7) = 0;
      *(_DWORD *)(v95 + 100) = v98;
      v99 = *((_QWORD *)v89 + 4);
      *((_QWORD *)v89 + 4) = 0;
      *(_QWORD *)(v95 + 104) = v99;
      v100 = *((_QWORD *)v91 + 11);
      v101 = (WTF::StringImpl *)*((_QWORD *)v91 + 12);
      *(_QWORD *)&buf = "RTCPeerConnection";
      *((_QWORD *)&buf + 1) = 18;
      v449 = "dispatchEvent";
      v450 = v101;
      if (*(_BYTE *)(v100 + 12) && WebCore::LogWebRTC && byte_1ECE7CD50 >= 3u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [14],WTF::AtomString,char [2]>((uint64_t)&WebCore::LogWebRTC, 3u, (WTF::Logger::LogSiteIdentifier *)&buf, "dispatching '", (WTF::StringImpl **)(v95 + 24), "'");
      WebCore::EventTarget::dispatchEvent(v91, (WebCore::Event *)v95);
      if (*(_DWORD *)(v95 + 16) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v95 + 8))(v95);
      else
        --*(_DWORD *)(v95 + 16);
      v8 = v430;
      v102 = v430[8];
      v42 = (WebCore *)(*(uint64_t (**)(uint64_t *))(*v430 + 24))(v430);
      v103 = v430[9];
      v441 = (uint64_t)v42;
      v442 = v104;
      v443 = "dispatchTrackEvent";
      v444 = v103;
      if (!*(_BYTE *)(v102 + 12))
        goto LABEL_213;
      v105 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v428 + 12) + 40) + 8) + 112);
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v441);
      WTF::String::String((WTF::String *)&v447, "Dispatched if feasible track of type ");
      {
        WebCore::convertEnumerationToString(WebCore::RealtimeMediaSource::Type)::$_0::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::RealtimeMediaSource::Type)::$_1::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::RealtimeMediaSource::Type)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RealtimeMediaSource::Type)::$_0::operator() const(void)::impl;
        *(_QWORD *)algn_1EE2F8DA8 = &WebCore::convertEnumerationToString(WebCore::RealtimeMediaSource::Type)::$_1::operator() const(void)::impl;
      }
      v107 = WebCore::convertEnumerationToString(WebCore::RealtimeMediaSource::Type)::values[v105];
      if (v107)
        *(_DWORD *)v107 += 2;
      v108 = v431;
      if (v431)
      {
        v109 = *((_DWORD *)v431 + 1);
        if (v447)
          goto LABEL_130;
      }
      else
      {
        v109 = 0;
        if (v447)
        {
LABEL_130:
          v110 = *((_DWORD *)v447 + 1);
          if (!v107)
            goto LABEL_225;
          goto LABEL_131;
        }
      }
      v110 = 0;
      if (!v107)
      {
LABEL_225:
        v111 = 0;
        goto LABEL_132;
      }
LABEL_131:
      v111 = *(_DWORD *)(v107 + 4);
LABEL_132:
      if ((v111 | v110) < 0
        || ((v112 = __OFADD__(v110, v111), v113 = v110 + v111, !v112) ? (v114 = 0) : (v114 = 1),
            v109 < 0 || (v114 & 1) != 0 || (v115 = (v109 + v113), __OFADD__(v109, v113))))
      {
LABEL_893:
        v433 = 0;
LABEL_894:
        __break(0xC471u);
        goto LABEL_904;
      }
      if (v431 && (*((_BYTE *)v431 + 16) & 4) == 0)
      {
        v116 = 0;
        goto LABEL_146;
      }
      if (v447)
      {
        v117 = *((_DWORD *)v447 + 4);
        v116 = (v117 >> 2) & 1;
        if (v107 && (v117 & 4) != 0)
LABEL_145:
          v116 = (*(unsigned __int8 *)(v107 + 16) >> 2) & 1;
LABEL_146:
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v115, v116, v431, (uint64_t)v447, v107, &v433);
        if (!v433)
          goto LABEL_894;
        if (v107)
        {
          if (*(_DWORD *)v107 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v107, v106);
          else
            *(_DWORD *)v107 -= 2;
        }
        goto LABEL_150;
      }
      if (v107)
        goto LABEL_145;
      if ((_DWORD)v115)
      {
        if ((v115 & 0x80000000) != 0)
          goto LABEL_893;
        WTF::tryFastCompactMalloc((WTF *)(v115 + 20));
        v146 = buf;
        if (!(_QWORD)buf)
          goto LABEL_893;
        v147 = (_BYTE *)(buf + 20);
        *(_DWORD *)buf = 2;
        *(_DWORD *)(v146 + 4) = v115;
        *(_QWORD *)(v146 + 8) = v146 + 20;
        *(_DWORD *)(v146 + 16) = 4;
        if (v108)
        {
          v106 = (WTF::StringImpl *)*((_QWORD *)v108 + 1);
          v148 = *((unsigned int *)v108 + 1);
          if ((*((_BYTE *)v108 + 16) & 4) != 0)
          {
            if ((_DWORD)v148)
            {
              if ((_DWORD)v148 == 1)
                *v147 = *(_BYTE *)v106;
              else
                memcpy(v147, v106, v148);
            }
          }
          else
          {
            if (v148 < 0x10)
            {
              v149 = (unsigned __int128 *)(v146 + 20);
            }
            else
            {
              v149 = (unsigned __int128 *)&v147[v148 & 0xFFFFFFF0];
              v150 = (unsigned __int128 *)(v146 + 20);
              do
              {
                v151 = (unsigned __int128)vld2q_s8((const char *)v106);
                v106 = (WTF::StringImpl *)((char *)v106 + 32);
                *v150++ = v151;
              }
              while (v150 != v149);
            }
            while (v149 != (unsigned __int128 *)&v147[v148])
            {
              v152 = *(_BYTE *)v106;
              v106 = (WTF::StringImpl *)((char *)v106 + 2);
              *(_BYTE *)v149 = v152;
              v149 = (unsigned __int128 *)((char *)v149 + 1);
            }
          }
        }
      }
      else
      {
        v146 = MEMORY[0x1E0CBEF70];
        *MEMORY[0x1E0CBEF70] += 2;
      }
      v433 = (WTF::StringImpl *)v146;
LABEL_150:
      v118 = v447;
      v447 = 0;
      v8 = v430;
      if (v118)
      {
        if (*(_DWORD *)v118 == 2)
          WTF::StringImpl::destroy(v118, v106);
        else
          *(_DWORD *)v118 -= 2;
      }
      v119 = v431;
      v431 = 0;
      if (v119)
      {
        if (*(_DWORD *)v119 == 2)
          WTF::StringImpl::destroy(v119, v106);
        else
          *(_DWORD *)v119 -= 2;
      }
      v120 = qword_1ECE7CD60;
      v121 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v121)
      {
        WTF::String::utf8();
        v123 = v445 ? (char *)v445 + 16 : 0;
        LODWORD(buf) = 136446210;
        *(_QWORD *)((char *)&buf + 4) = v123;
        _os_log_impl(&dword_1940B8000, v120, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
        v121 = (uint64_t)v445;
        v445 = 0;
        if (v121)
        {
          if (*(_DWORD *)v121 == 1)
            v121 = WTF::fastFree((WTF *)v121, v122);
          else
            --*(_DWORD *)v121;
        }
      }
      if (!WebCore::LogWebRTC)
        goto LABEL_210;
      do
      {
        while (1)
        {
          v124 = *v90;
          if ((v124 & 1) != 0)
            goto LABEL_210;
          v125 = __ldaxr(v90);
          if (v125 == v124)
            break;
          __clrex();
        }
      }
      while (__stxr(v124 | 1, v90));
      v126 = WTF::Logger::observers((WTF::Logger *)v121);
      v127 = *(unsigned int *)(v126 + 12);
      if ((_DWORD)v127)
      {
        v128 = *(uint64_t **)v126;
        v129 = *(_QWORD *)v126 + 8 * v127;
        do
        {
          v130 = *v128;
          LODWORD(buf) = 0;
          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v441);
          LODWORD(v449) = 0;
          WTF::String::String((WTF::String *)&v450, "Dispatched if feasible track of type ");
          v451 = 0;
          {
            WebCore::convertEnumerationToString(WebCore::RealtimeMediaSource::Type)::$_0::operator() const(void)::impl += 2;
            WebCore::convertEnumerationToString(WebCore::RealtimeMediaSource::Type)::$_1::operator() const(void)::impl += 2;
            WebCore::convertEnumerationToString(WebCore::RealtimeMediaSource::Type)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RealtimeMediaSource::Type)::$_0::operator() const(void)::impl;
            *(_QWORD *)algn_1EE2F8DA8 = &WebCore::convertEnumerationToString(WebCore::RealtimeMediaSource::Type)::$_1::operator() const(void)::impl;
          }
          v131 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::RealtimeMediaSource::Type)::values[v105];
          if (v131)
            *(_DWORD *)v131 += 2;
          v452 = v131;
          v445 = 0;
          v446 = 0;
          v132 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
          LODWORD(v446) = 3;
          v445 = v132;
          v133 = HIDWORD(v446);
          *((_DWORD *)v132 + 4 * HIDWORD(v446)) = buf;
          v134 = *((_QWORD *)&buf + 1);
          if (*((_QWORD *)&buf + 1))
            **((_DWORD **)&buf + 1) += 2;
          *((_QWORD *)v132 + 2 * v133 + 1) = v134;
          *((_DWORD *)v132 + 4 * (v133 + 1)) = (_DWORD)v449;
          v135 = v450;
          if (v450)
            *(_DWORD *)v450 += 2;
          *((_QWORD *)v132 + 2 * (v133 + 1) + 1) = v135;
          *((_DWORD *)v132 + 4 * (v133 + 2)) = v451;
          v136 = v452;
          if (v452)
            *(_DWORD *)v452 += 2;
          *((_QWORD *)v132 + 2 * (v133 + 2) + 1) = v136;
          HIDWORD(v446) = v133 + 3;
          (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v130 + 16))(v130, &WebCore::LogWebRTC, 0, &v445);
          v137 = v445;
          if (HIDWORD(v446))
          {
            v138 = 16 * HIDWORD(v446);
            v139 = (WTF::StringImpl **)((char *)v445 + 8);
            do
            {
              v140 = *v139;
              *v139 = 0;
              if (v140)
              {
                if (*(_DWORD *)v140 == 2)
                  WTF::StringImpl::destroy(v140, (WTF::StringImpl *)v122);
                else
                  *(_DWORD *)v140 -= 2;
              }
              v139 += 2;
              v138 -= 16;
            }
            while (v138);
            v137 = v445;
          }
          if (v137)
          {
            v445 = 0;
            LODWORD(v446) = 0;
            WTF::fastFree(v137, v122);
          }
          v141 = v452;
          v452 = 0;
          if (v141)
          {
            if (*(_DWORD *)v141 == 2)
              WTF::StringImpl::destroy(v141, (WTF::StringImpl *)v122);
            else
              *(_DWORD *)v141 -= 2;
          }
          v142 = v450;
          v450 = 0;
          if (v142)
          {
            if (*(_DWORD *)v142 == 2)
              WTF::StringImpl::destroy(v142, (WTF::StringImpl *)v122);
            else
              *(_DWORD *)v142 -= 2;
          }
          v143 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
          *((_QWORD *)&buf + 1) = 0;
          if (v143)
          {
            if (*(_DWORD *)v143 == 2)
              WTF::StringImpl::destroy(v143, (WTF::StringImpl *)v122);
            else
              *(_DWORD *)v143 -= 2;
          }
          ++v128;
        }
        while (v128 != (uint64_t *)v129);
      }
      v144 = __ldxr(v90);
      if (v144 != 1)
      {
        __clrex();
        v8 = v430;
LABEL_209:
        WTF::Lock::unlockSlow((WTF::Lock *)v90);
        goto LABEL_210;
      }
      v8 = v430;
      if (__stlxr(0, v90))
        goto LABEL_209;
LABEL_210:
      v42 = v433;
      v433 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          v42 = (WebCore *)WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v122);
        else
          *(_DWORD *)v42 -= 2;
      }
LABEL_213:
      if (*(_DWORD *)(v8[2] + 80) != 5)
      {
        v145 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v428 + 12) + 40) + 8);
        v42 = (WebCore *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v145 + 80))(v145, 0);
      }
      v89 = (__int128 *)((char *)v89 + 40);
      if (v89 == v423)
        goto LABEL_803;
    }
  }
  v433 = 0;
  v434 = 0;
  v431 = 0;
  v432 = 0;
  v46 = *(unsigned int *)(v10 + 116);
  if (!(_DWORD)v46)
  {
    v7 = 0;
    v47 = 0;
    goto LABEL_246;
  }
  v47 = 0;
  LODWORD(v48) = 0;
  v7 = 0;
  v49 = *(_QWORD *)(v10 + 104);
  v50 = v49 + 32 * v46;
  v427 = (WTF::String *)_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  do
  {
    v51 = v430[2];
    v52 = *(unsigned int *)(v51 + 116);
    if (!(_DWORD)v52)
      goto LABEL_104;
    v53 = *(uint64_t **)(v51 + 104);
    v54 = 8 * v52;
    while (1)
    {
      v55 = *(WTF **)(*v53 + 64);
      if (v55)
      {
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v55 + 40))(&buf);
        v55 = (WTF *)buf;
      }
      else
      {
        *(_QWORD *)&buf = 0;
      }
      v57 = WTF::equal(v55, *(const WTF::StringImpl **)v49, v43);
      v58 = (WTF::StringImpl *)buf;
      *(_QWORD *)&buf = 0;
      if (v58)
        break;
LABEL_59:
      if (v57)
        goto LABEL_63;
LABEL_60:
      ++v53;
      v54 -= 8;
      if (!v54)
        goto LABEL_104;
    }
    if (*(_DWORD *)v58 != 2)
    {
      *(_DWORD *)v58 -= 2;
      goto LABEL_59;
    }
    WTF::StringImpl::destroy(v58, v56);
    if (!v57)
      goto LABEL_60;
LABEL_63:
    v59 = *v53;
    if (v59)
    {
      ++*(_DWORD *)(v59 + 8);
      v60 = HIDWORD(v434);
      v61 = *(_QWORD *)(v59 + 48);
      v62 = (WebCore *)WebCore::setAssociatedRemoteStreams(v61, v49, (const WTF::StringImpl *)&v433, (unsigned int *)&v435);
      v64 = *(unsigned __int8 *)(v49 + 28);
      if (*(_BYTE *)(v49 + 28) && (*(_DWORD *)(v49 + 24) & 0xFFFFFFFD) == 0)
      {
        v84 = *(_QWORD *)(v59 + 28);
        if ((v84 & 0xFF00000000) == 0 || (v84 & 0xFFFFFFFD) != 0 || v60 != HIDWORD(v434))
        {
LABEL_67:
          v65 = v7;
          v66 = *((_QWORD *)v427 + 92);
          if (!v66 || (v67 = *(_QWORD *)(v66 + 96)) == 0)
            v67 = WebCore::threadGlobalDataSlow(v62);
          v68 = *(_QWORD *)(v67 + 40);
          if (!v68)
          {
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v67);
            v68 = *(_QWORD *)(v67 + 40);
          }
          ++*(_DWORD *)(v61 + 8);
          v69 = *(_QWORD *)(v61 + 24);
          ++*(_DWORD *)(v69 + 24);
          ++*(_DWORD *)(v59 + 8);
          v70 = bmalloc::api::isoAllocate();
          WTF::MonotonicTime::now((WTF::MonotonicTime *)v70);
          *(_QWORD *)(v70 + 8) = 0;
          *(_DWORD *)(v70 + 16) = 1;
          *(_DWORD *)(v70 + 20) = *(_DWORD *)(v70 + 20) & 0xFFC00000 | 0x160200 | (*(_QWORD *)(v68 + 2112) != 0);
          v72 = *(_DWORD **)(v68 + 2112);
          if (v72)
            *v72 += 2;
          *(_QWORD *)(v70 + 24) = v72;
          *(_QWORD *)(v70 + 32) = 0;
          *(_QWORD *)(v70 + 40) = 0;
          *(_QWORD *)(v70 + 48) = 0;
          *(_QWORD *)(v70 + 56) = v71;
          *(_QWORD *)v70 = off_1E3362018;
          *(_QWORD *)(v70 + 64) = 0;
          *(_QWORD *)(v70 + 72) = v61;
          *(_QWORD *)(v70 + 88) = 0;
          *(_QWORD *)(v70 + 96) = 0;
          *(_QWORD *)(v70 + 80) = v69;
          v73 = *(_QWORD *)(v49 + 8);
          *(_QWORD *)(v49 + 8) = 0;
          *(_QWORD *)(v70 + 88) = v73;
          LODWORD(v73) = *(_DWORD *)(v49 + 16);
          *(_DWORD *)(v49 + 16) = 0;
          *(_DWORD *)(v70 + 96) = v73;
          LODWORD(v73) = *(_DWORD *)(v49 + 20);
          *(_DWORD *)(v49 + 20) = 0;
          *(_DWORD *)(v70 + 100) = v73;
          *(_QWORD *)(v70 + 104) = v59;
          *(_QWORD *)&buf = v70;
          LODWORD(v73) = HIDWORD(v432);
          v7 = v65;
          if (HIDWORD(v432) == (_DWORD)v432)
          {
            v74 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v431, HIDWORD(v432) + 1, (unint64_t)&buf);
            v73 = HIDWORD(v432);
            v75 = v431;
            v76 = *(_QWORD *)v74;
            *(_QWORD *)v74 = 0;
            *((_QWORD *)v75 + v73) = v76;
          }
          else
          {
            *(_QWORD *)&buf = 0;
            *((_QWORD *)v431 + HIDWORD(v432)) = v70;
          }
          HIDWORD(v432) = v73 + 1;
          v77 = (_DWORD *)buf;
          *(_QWORD *)&buf = 0;
          if (v77)
          {
            if (v77[4] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v77 + 8))(v77);
            else
              --v77[4];
          }
          v64 = *(unsigned __int8 *)(v49 + 28);
          goto LABEL_81;
        }
      }
      else
      {
        if (v60 != HIDWORD(v434))
          goto LABEL_67;
LABEL_81:
        if (!v64 || (*(_DWORD *)(v49 + 24) & 0xFFFFFFFD) != 0)
        {
          v78 = *(_QWORD *)(v59 + 28);
          if ((v78 & 0xFF00000000) != 0 && (v78 & 0xFFFFFFFD) == 0)
          {
            v79 = *(_QWORD *)(v61 + 24);
            v80 = v47;
            if (v47 == (_DWORD)v48)
            {
              v81 = v47 + ((unint64_t)v47 >> 2);
              if (v81 >= 0x10)
                v82 = v81 + 1;
              else
                v82 = 16;
              if (v82 <= (unint64_t)v47 + 1)
                v48 = v47 + 1;
              else
                v48 = v82;
              if (v48 >> 29)
              {
                __break(0xC471u);
                JUMPOUT(0x19548ECC8);
              }
              v83 = (char *)WTF::fastMalloc((WTF *)(8 * v48));
              memcpy(v83, v7, 8 * v47);
              if (v7)
              {
                if (v83 == v7)
                {
                  v83 = 0;
                  LODWORD(v48) = 0;
                }
                WTF::fastFree((WTF *)v7, v63);
              }
              v7 = v83;
            }
            ++v47;
            ++*(_DWORD *)(v79 + 24);
            *(_QWORD *)&v7[8 * v80] = v79;
          }
        }
      }
      v85 = *(_QWORD *)(v49 + 24);
      *(_DWORD *)(v59 + 28) = v85;
      *(_BYTE *)(v59 + 32) = BYTE4(v85);
      if (*(_DWORD *)(v59 + 8) == 1)
      {
        WebCore::RTCRtpTransceiver::~RTCRtpTransceiver((WebCore::RTCRtpTransceiver *)v59, v63);
        bmalloc::api::isoDeallocate(v86, v87);
      }
      else
      {
        --*(_DWORD *)(v59 + 8);
      }
    }
LABEL_104:
    v49 += 32;
  }
  while (v49 != v50);
LABEL_246:
  v153 = v430;
  v154 = v430[8];
  v155 = (*(uint64_t (**)(uint64_t *))(*v430 + 24))(v430);
  v156 = v430[9];
  v441 = v155;
  v442 = v157;
  v6 = (WTF **)"operator()";
  v443 = "operator()";
  v444 = v156;
  v12 = (WTF::String *)v47;
  if (!*(_BYTE *)(v154 + 12))
    goto LABEL_352;
  if (!WebCore::LogWebRTC || byte_1ECE7CD50 < 4u)
    goto LABEL_352;
  WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v441);
  WTF::String::String((WTF::String *)&v439, "Processing ");
  WTF::String::number((WTF::String *)v47);
  WTF::String::String((WTF::String *)&v437, " muted tracks");
  if (v440)
  {
    v159 = *((_DWORD *)v440 + 1);
    if (v439)
      goto LABEL_254;
LABEL_836:
    v160 = 0;
    if (!v438)
      goto LABEL_837;
LABEL_255:
    v161 = *((_DWORD *)v438 + 1);
    if (v437)
      goto LABEL_256;
LABEL_838:
    v162 = 0;
  }
  else
  {
    v159 = 0;
    if (!v439)
      goto LABEL_836;
LABEL_254:
    v160 = *((_DWORD *)v439 + 1);
    if (v438)
      goto LABEL_255;
LABEL_837:
    v161 = 0;
    if (!v437)
      goto LABEL_838;
LABEL_256:
    v162 = *((_DWORD *)v437 + 1);
  }
  if ((v162 | v161) < 0
    || ((v112 = __OFADD__(v161, v162), v163 = v161 + v162, !v112) ? (v164 = 0) : (v164 = 1),
        v160 < 0
     || (v164 & 1) != 0
     || ((v112 = __OFADD__(v160, v163), v165 = v160 + v163, !v112) ? (v166 = 0) : (v166 = 1),
         v159 < 0 || (v166 & 1) != 0 || (v167 = (v159 + v165), __OFADD__(v159, v165)))))
  {
    v447 = 0;
    goto LABEL_896;
  }
  if (v440 && (*((_BYTE *)v440 + 16) & 4) == 0 || v439 && (*((_BYTE *)v439 + 16) & 4) == 0)
  {
    v168 = 0;
    goto LABEL_274;
  }
  if (v438)
  {
    v201 = *((_DWORD *)v438 + 4);
    v168 = (v201 >> 2) & 1;
    if (v437 && (v201 & 4) != 0)
LABEL_346:
      v168 = (*((unsigned __int8 *)v437 + 16) >> 2) & 1;
  }
  else
  {
    if (v437)
      goto LABEL_346;
    v168 = 1;
  }
LABEL_274:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v167, v168, (uint64_t)v440, v439, (uint64_t)v438, (uint64_t)v437, &v447);
  if (!v447)
  {
LABEL_896:
    __break(0xC471u);
    JUMPOUT(0x19548ECB4);
  }
  v170 = v437;
  v437 = 0;
  if (v170)
  {
    if (*(_DWORD *)v170 == 2)
      WTF::StringImpl::destroy(v170, v169);
    else
      *(_DWORD *)v170 -= 2;
  }
  v171 = v438;
  v438 = 0;
  if (v171)
  {
    if (*(_DWORD *)v171 == 2)
      WTF::StringImpl::destroy(v171, v169);
    else
      *(_DWORD *)v171 -= 2;
  }
  v172 = v439;
  v439 = 0;
  if (v172)
  {
    if (*(_DWORD *)v172 == 2)
      WTF::StringImpl::destroy(v172, v169);
    else
      *(_DWORD *)v172 -= 2;
  }
  v173 = v440;
  v440 = 0;
  if (v173)
  {
    if (*(_DWORD *)v173 == 2)
      WTF::StringImpl::destroy(v173, v169);
    else
      *(_DWORD *)v173 -= 2;
  }
  v174 = qword_1ECE7CD60;
  v175 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v175)
  {
    WTF::String::utf8();
    v177 = v445 ? (char *)v445 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v177;
    _os_log_impl(&dword_1940B8000, v174, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v175 = (uint64_t)v445;
    v445 = 0;
    if (v175)
    {
      if (*(_DWORD *)v175 == 1)
        v175 = WTF::fastFree((WTF *)v175, v176);
      else
        --*(_DWORD *)v175;
    }
  }
  if (WebCore::LogWebRTC && byte_1ECE7CD50 >= 4u)
  {
    v178 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v179 = *v178;
      if ((v179 & 1) != 0)
        break;
      v180 = __ldaxr(v178);
      if (v180 == v179)
      {
        if (!__stxr(v179 | 1, v178))
        {
          v426 = v7;
          v181 = WTF::Logger::observers((WTF::Logger *)v175);
          v182 = *(unsigned int *)(v181 + 12);
          if ((_DWORD)v182)
          {
            v183 = *(uint64_t **)v181;
            v184 = *(_QWORD *)v181 + 8 * v182;
            do
            {
              v185 = *v183;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v441);
              LODWORD(v449) = 0;
              WTF::String::String((WTF::String *)&v450, "Processing ");
              v451 = 0;
              WTF::String::number(v12);
              v453 = 0;
              WTF::String::String((WTF::String *)v454, " muted tracks");
              v445 = 0;
              v446 = 0;
              v186 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
              LODWORD(v446) = 4;
              v445 = v186;
              v187 = HIDWORD(v446);
              *((_DWORD *)v186 + 4 * HIDWORD(v446)) = buf;
              v188 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v186 + 2 * v187 + 1) = v188;
              *((_DWORD *)v186 + 4 * (v187 + 1)) = (_DWORD)v449;
              v189 = v450;
              if (v450)
                *(_DWORD *)v450 += 2;
              *((_QWORD *)v186 + 2 * (v187 + 1) + 1) = v189;
              *((_DWORD *)v186 + 4 * (v187 + 2)) = v451;
              v190 = v452;
              if (v452)
                *(_DWORD *)v452 += 2;
              *((_QWORD *)v186 + 2 * (v187 + 2) + 1) = v190;
              *((_DWORD *)v186 + 4 * (v187 + 3)) = v453;
              v191 = v454[0];
              if (v454[0])
                *(_DWORD *)v454[0] += 2;
              *((_QWORD *)v186 + 2 * (v187 + 3) + 1) = v191;
              HIDWORD(v446) = v187 + 4;
              (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v185 + 16))(v185, &WebCore::LogWebRTC, 4, &v445);
              v192 = v445;
              if (HIDWORD(v446))
              {
                v193 = 16 * HIDWORD(v446);
                v194 = (WTF::StringImpl **)((char *)v445 + 8);
                do
                {
                  v195 = *v194;
                  *v194 = 0;
                  if (v195)
                  {
                    if (*(_DWORD *)v195 == 2)
                      WTF::StringImpl::destroy(v195, (WTF::StringImpl *)v176);
                    else
                      *(_DWORD *)v195 -= 2;
                  }
                  v194 += 2;
                  v193 -= 16;
                }
                while (v193);
                v192 = v445;
              }
              if (v192)
              {
                v445 = 0;
                LODWORD(v446) = 0;
                WTF::fastFree(v192, v176);
              }
              v196 = (WTF::StringImpl *)v454[0];
              v454[0] = 0;
              if (v196)
              {
                if (*(_DWORD *)v196 == 2)
                  WTF::StringImpl::destroy(v196, (WTF::StringImpl *)v176);
                else
                  *(_DWORD *)v196 -= 2;
              }
              v197 = v452;
              v452 = 0;
              if (v197)
              {
                if (*(_DWORD *)v197 == 2)
                  WTF::StringImpl::destroy(v197, (WTF::StringImpl *)v176);
                else
                  *(_DWORD *)v197 -= 2;
              }
              v198 = v450;
              v450 = 0;
              if (v198)
              {
                if (*(_DWORD *)v198 == 2)
                  WTF::StringImpl::destroy(v198, (WTF::StringImpl *)v176);
                else
                  *(_DWORD *)v198 -= 2;
              }
              v199 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v199)
              {
                if (*(_DWORD *)v199 == 2)
                  WTF::StringImpl::destroy(v199, (WTF::StringImpl *)v176);
                else
                  *(_DWORD *)v199 -= 2;
              }
              ++v183;
            }
            while (v183 != (uint64_t *)v184);
          }
          v200 = __ldxr(v178);
          if (v200 == 1)
          {
            v153 = v430;
            v7 = v426;
            v6 = (WTF **)"operator()";
            if (!__stlxr(0, v178))
              break;
          }
          else
          {
            __clrex();
            v153 = v430;
            v7 = v426;
            v6 = (WTF **)"operator()";
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v202 = v447;
  v447 = 0;
  if (v202)
  {
    if (*(_DWORD *)v202 != 2)
    {
      *(_DWORD *)v202 -= 2;
      goto LABEL_352;
    }
    WTF::StringImpl::destroy(v202, (WTF::StringImpl *)v176);
    if (!(_DWORD)v12)
    {
LABEL_356:
      v207 = v153[8];
      v208 = (*(uint64_t (**)(uint64_t *))(*v153 + 24))(v153);
      v210 = v153[9];
      v441 = v208;
      v442 = v211;
      v443 = "operator()";
      v444 = v210;
      v212 = (WTF::String *)HIDWORD(v436);
      if (!*(_BYTE *)(v207 + 12) || !WebCore::LogWebRTC || byte_1ECE7CD50 < 4u)
        goto LABEL_464;
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v441);
      WTF::String::String((WTF::String *)&v439, "Removing ");
      WTF::String::number(v212);
      WTF::String::String((WTF::String *)&v437, " tracks");
      if (v440)
      {
        v213 = *((_DWORD *)v440 + 1);
        if (v439)
          goto LABEL_361;
LABEL_846:
        v214 = 0;
        if (!v438)
          goto LABEL_847;
LABEL_362:
        v215 = *((_DWORD *)v438 + 1);
        if (v437)
          goto LABEL_363;
LABEL_848:
        v216 = 0;
      }
      else
      {
        v213 = 0;
        if (!v439)
          goto LABEL_846;
LABEL_361:
        v214 = *((_DWORD *)v439 + 1);
        if (v438)
          goto LABEL_362;
LABEL_847:
        v215 = 0;
        if (!v437)
          goto LABEL_848;
LABEL_363:
        v216 = *((_DWORD *)v437 + 1);
      }
      if ((v216 | v215) < 0
        || ((v112 = __OFADD__(v215, v216), v217 = v215 + v216, !v112) ? (v218 = 0) : (v218 = 1),
            v214 < 0
         || (v218 & 1) != 0
         || ((v112 = __OFADD__(v214, v217), v219 = v214 + v217, !v112) ? (v220 = 0) : (v220 = 1),
             v213 < 0 || (v220 & 1) != 0 || (v221 = (v213 + v219), __OFADD__(v213, v219)))))
      {
        v447 = 0;
      }
      else
      {
        if (v440 && (*((_BYTE *)v440 + 16) & 4) == 0 || v439 && (*((_BYTE *)v439 + 16) & 4) == 0)
        {
          v222 = 0;
          goto LABEL_381;
        }
        if (v438)
        {
          v257 = *((_DWORD *)v438 + 4);
          v222 = (v257 >> 2) & 1;
          if (v437 && (v257 & 4) != 0)
LABEL_457:
            v222 = (*((unsigned __int8 *)v437 + 16) >> 2) & 1;
        }
        else
        {
          if (v437)
            goto LABEL_457;
          v222 = 1;
        }
LABEL_381:
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v221, v222, (uint64_t)v440, v439, (uint64_t)v438, (uint64_t)v437, &v447);
        if (v447)
        {
          v224 = v437;
          v437 = 0;
          if (v224)
          {
            if (*(_DWORD *)v224 == 2)
              WTF::StringImpl::destroy(v224, v223);
            else
              *(_DWORD *)v224 -= 2;
          }
          v225 = v438;
          v438 = 0;
          if (v225)
          {
            if (*(_DWORD *)v225 == 2)
              WTF::StringImpl::destroy(v225, v223);
            else
              *(_DWORD *)v225 -= 2;
          }
          v226 = v439;
          v439 = 0;
          if (v226)
          {
            if (*(_DWORD *)v226 == 2)
              WTF::StringImpl::destroy(v226, v223);
            else
              *(_DWORD *)v226 -= 2;
          }
          v227 = v440;
          v440 = 0;
          if (v227)
          {
            if (*(_DWORD *)v227 == 2)
              WTF::StringImpl::destroy(v227, v223);
            else
              *(_DWORD *)v227 -= 2;
          }
          v228 = qword_1ECE7CD60;
          v229 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v229)
          {
            WTF::String::utf8();
            v231 = v445 ? (char *)v445 + 16 : 0;
            LODWORD(buf) = 136446210;
            *(_QWORD *)((char *)&buf + 4) = v231;
            _os_log_impl(&dword_1940B8000, v228, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
            v229 = (uint64_t)v445;
            v445 = 0;
            if (v229)
            {
              if (*(_DWORD *)v229 == 1)
                v229 = WTF::fastFree((WTF *)v229, v230);
              else
                --*(_DWORD *)v229;
            }
          }
          if (WebCore::LogWebRTC && byte_1ECE7CD50 >= 4u)
          {
            v232 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v233 = *v232;
              if ((v233 & 1) != 0)
                break;
              v234 = __ldaxr(v232);
              if (v234 == v233)
              {
                if (!__stxr(v233 | 1, v232))
                {
                  v237 = WTF::Logger::observers((WTF::Logger *)v229);
                  v238 = *(unsigned int *)(v237 + 12);
                  if ((_DWORD)v238)
                  {
                    v239 = *(uint64_t **)v237;
                    v240 = *(_QWORD *)v237 + 8 * v238;
                    do
                    {
                      v241 = *v239;
                      LODWORD(buf) = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v441);
                      LODWORD(v449) = 0;
                      WTF::String::String((WTF::String *)&v450, "Removing ");
                      v451 = 0;
                      WTF::String::number(v212);
                      v453 = 0;
                      WTF::String::String((WTF::String *)v454, " tracks");
                      v445 = 0;
                      v446 = 0;
                      v242 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
                      LODWORD(v446) = 4;
                      v445 = v242;
                      v243 = HIDWORD(v446);
                      *((_DWORD *)v242 + 4 * HIDWORD(v446)) = buf;
                      v244 = *((_QWORD *)&buf + 1);
                      if (*((_QWORD *)&buf + 1))
                        **((_DWORD **)&buf + 1) += 2;
                      *((_QWORD *)v242 + 2 * v243 + 1) = v244;
                      *((_DWORD *)v242 + 4 * (v243 + 1)) = (_DWORD)v449;
                      v245 = v450;
                      if (v450)
                        *(_DWORD *)v450 += 2;
                      *((_QWORD *)v242 + 2 * (v243 + 1) + 1) = v245;
                      *((_DWORD *)v242 + 4 * (v243 + 2)) = v451;
                      v246 = v452;
                      if (v452)
                        *(_DWORD *)v452 += 2;
                      *((_QWORD *)v242 + 2 * (v243 + 2) + 1) = v246;
                      *((_DWORD *)v242 + 4 * (v243 + 3)) = v453;
                      v247 = v454[0];
                      if (v454[0])
                        *(_DWORD *)v454[0] += 2;
                      *((_QWORD *)v242 + 2 * (v243 + 3) + 1) = v247;
                      HIDWORD(v446) = v243 + 4;
                      (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v241 + 16))(v241, &WebCore::LogWebRTC, 4, &v445);
                      v248 = v445;
                      if (HIDWORD(v446))
                      {
                        v249 = 16 * HIDWORD(v446);
                        v250 = (WTF::StringImpl **)((char *)v445 + 8);
                        do
                        {
                          v251 = *v250;
                          *v250 = 0;
                          if (v251)
                          {
                            if (*(_DWORD *)v251 == 2)
                              WTF::StringImpl::destroy(v251, (WTF::StringImpl *)v230);
                            else
                              *(_DWORD *)v251 -= 2;
                          }
                          v250 += 2;
                          v249 -= 16;
                        }
                        while (v249);
                        v248 = v445;
                      }
                      if (v248)
                      {
                        v445 = 0;
                        LODWORD(v446) = 0;
                        WTF::fastFree(v248, v230);
                      }
                      v252 = (WTF::StringImpl *)v454[0];
                      v454[0] = 0;
                      if (v252)
                      {
                        if (*(_DWORD *)v252 == 2)
                          WTF::StringImpl::destroy(v252, (WTF::StringImpl *)v230);
                        else
                          *(_DWORD *)v252 -= 2;
                      }
                      v253 = v452;
                      v452 = 0;
                      if (v253)
                      {
                        if (*(_DWORD *)v253 == 2)
                          WTF::StringImpl::destroy(v253, (WTF::StringImpl *)v230);
                        else
                          *(_DWORD *)v253 -= 2;
                      }
                      v254 = v450;
                      v450 = 0;
                      if (v254)
                      {
                        if (*(_DWORD *)v254 == 2)
                          WTF::StringImpl::destroy(v254, (WTF::StringImpl *)v230);
                        else
                          *(_DWORD *)v254 -= 2;
                      }
                      v255 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v255)
                      {
                        if (*(_DWORD *)v255 == 2)
                          WTF::StringImpl::destroy(v255, (WTF::StringImpl *)v230);
                        else
                          *(_DWORD *)v255 -= 2;
                      }
                      ++v239;
                    }
                    while (v239 != (uint64_t *)v240);
                  }
                  v256 = __ldxr(v232);
                  if (v256 == 1)
                  {
                    v153 = v430;
                    v6 = (WTF **)"operator()";
                    if (!__stlxr(0, v232))
                      break;
                  }
                  else
                  {
                    __clrex();
                    v153 = v430;
                    v6 = (WTF **)"operator()";
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          v258 = v447;
          v447 = 0;
          if (v258)
          {
            if (*(_DWORD *)v258 == 2)
              WTF::StringImpl::destroy(v258, (WTF::StringImpl *)v230);
            else
              *(_DWORD *)v258 -= 2;
          }
          v212 = (WTF::String *)HIDWORD(v436);
LABEL_464:
          if ((_DWORD)v212)
          {
            v259 = v435;
            v260 = (WTF *)((char *)v435 + 16 * (_QWORD)v212);
            while (1)
            {
              WebCore::MediaStreamPrivate::removeTrack(*(_QWORD *)(*(_QWORD *)v259 + 96), *(WebCore::MediaStreamTrackPrivate **)(*((_QWORD *)v259 + 1) + 96), v209);
              if (*(_DWORD *)(v153[2] + 80) == 5)
                break;
              v259 = (WTF *)((char *)v259 + 16);
              if (v259 == v260)
                goto LABEL_468;
            }
            v288 = v153[8];
            result = (*(uint64_t (**)(uint64_t *))(*v153 + 24))(v153);
            v289 = (WTF::StringImpl *)v153[9];
            *(_QWORD *)&buf = result;
            *((_QWORD *)&buf + 1) = v40;
            v449 = "operator()";
            v450 = v289;
            if (*(_BYTE *)(v288 + 12))
            {
              if (WebCore::LogWebRTC && byte_1ECE7CD50 >= 4u)
                result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogWebRTC, 4u, (WTF::Logger::LogSiteIdentifier *)&buf, "PeerConnection closed while removing tracks");
            }
            goto LABEL_647;
          }
LABEL_468:
          v261 = v153[8];
          v262 = (*(uint64_t (**)(uint64_t *))(*v153 + 24))(v153);
          v263 = v153[9];
          v441 = v262;
          v442 = v264;
          v443 = "operator()";
          v444 = v263;
          v265 = (WTF::String *)HIDWORD(v434);
          if (*(_BYTE *)(v261 + 12) && WebCore::LogWebRTC && byte_1ECE7CD50 >= 4u)
          {
            WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v441);
            WTF::String::String((WTF::String *)&v439, "Adding ");
            WTF::String::number(v265);
            WTF::String::String((WTF::String *)&v437, " tracks");
            if (v440)
              v266 = *((_DWORD *)v440 + 1);
            else
              v266 = 0;
            if (v439)
            {
              v267 = *((_DWORD *)v439 + 1);
              if (v438)
                goto LABEL_475;
LABEL_857:
              v268 = 0;
              if (!v437)
                goto LABEL_858;
LABEL_476:
              v269 = *((_DWORD *)v437 + 1);
            }
            else
            {
              v267 = 0;
              if (!v438)
                goto LABEL_857;
LABEL_475:
              v268 = *((_DWORD *)v438 + 1);
              if (v437)
                goto LABEL_476;
LABEL_858:
              v269 = 0;
            }
            if ((v269 | v268) < 0
              || ((v112 = __OFADD__(v268, v269), v270 = v268 + v269, !v112) ? (v271 = 0) : (v271 = 1),
                  v267 < 0
               || (v271 & 1) != 0
               || ((v112 = __OFADD__(v267, v270), v272 = v267 + v270, !v112) ? (v273 = 0) : (v273 = 1),
                   v266 < 0 || (v273 & 1) != 0 || (v274 = (v266 + v272), __OFADD__(v266, v272)))))
            {
              v447 = 0;
            }
            else
            {
              if (v440 && (*((_BYTE *)v440 + 16) & 4) == 0 || v439 && (*((_BYTE *)v439 + 16) & 4) == 0)
              {
                v275 = 0;
                goto LABEL_494;
              }
              if (v438)
              {
                v311 = *((_DWORD *)v438 + 4);
                v275 = (v311 >> 2) & 1;
                if (v437 && (v311 & 4) != 0)
LABEL_573:
                  v275 = (*((unsigned __int8 *)v437 + 16) >> 2) & 1;
              }
              else
              {
                if (v437)
                  goto LABEL_573;
                v275 = 1;
              }
LABEL_494:
              WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v274, v275, (uint64_t)v440, v439, (uint64_t)v438, (uint64_t)v437, &v447);
              if (v447)
              {
                v277 = v437;
                v437 = 0;
                if (v277)
                {
                  if (*(_DWORD *)v277 == 2)
                    WTF::StringImpl::destroy(v277, v276);
                  else
                    *(_DWORD *)v277 -= 2;
                }
                v278 = v438;
                v438 = 0;
                if (v278)
                {
                  if (*(_DWORD *)v278 == 2)
                    WTF::StringImpl::destroy(v278, v276);
                  else
                    *(_DWORD *)v278 -= 2;
                }
                v279 = v439;
                v439 = 0;
                if (v279)
                {
                  if (*(_DWORD *)v279 == 2)
                    WTF::StringImpl::destroy(v279, v276);
                  else
                    *(_DWORD *)v279 -= 2;
                }
                v280 = v440;
                v440 = 0;
                if (v280)
                {
                  if (*(_DWORD *)v280 == 2)
                    WTF::StringImpl::destroy(v280, v276);
                  else
                    *(_DWORD *)v280 -= 2;
                }
                v281 = qword_1ECE7CD60;
                v282 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
                if ((_DWORD)v282)
                {
                  WTF::String::utf8();
                  v284 = v445 ? (char *)v445 + 16 : 0;
                  LODWORD(buf) = 136446210;
                  *(_QWORD *)((char *)&buf + 4) = v284;
                  _os_log_impl(&dword_1940B8000, v281, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                  v282 = (uint64_t)v445;
                  v445 = 0;
                  if (v282)
                  {
                    if (*(_DWORD *)v282 == 1)
                      v282 = WTF::fastFree((WTF *)v282, v283);
                    else
                      --*(_DWORD *)v282;
                  }
                }
                if (WebCore::LogWebRTC && byte_1ECE7CD50 >= 4u)
                {
                  v285 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                  while (1)
                  {
                    v286 = *v285;
                    if ((v286 & 1) != 0)
                      break;
                    v287 = __ldaxr(v285);
                    if (v287 == v286)
                    {
                      if (!__stxr(v286 | 1, v285))
                      {
                        v291 = WTF::Logger::observers((WTF::Logger *)v282);
                        v292 = *(unsigned int *)(v291 + 12);
                        if ((_DWORD)v292)
                        {
                          v293 = *(uint64_t **)v291;
                          v294 = *(_QWORD *)v291 + 8 * v292;
                          do
                          {
                            v295 = *v293;
                            LODWORD(buf) = 0;
                            WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v441);
                            LODWORD(v449) = 0;
                            WTF::String::String((WTF::String *)&v450, "Adding ");
                            v451 = 0;
                            WTF::String::number(v265);
                            v453 = 0;
                            WTF::String::String((WTF::String *)v454, " tracks");
                            v445 = 0;
                            v446 = 0;
                            v296 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
                            LODWORD(v446) = 4;
                            v445 = v296;
                            v297 = HIDWORD(v446);
                            *((_DWORD *)v296 + 4 * HIDWORD(v446)) = buf;
                            v298 = *((_QWORD *)&buf + 1);
                            if (*((_QWORD *)&buf + 1))
                              **((_DWORD **)&buf + 1) += 2;
                            *((_QWORD *)v296 + 2 * v297 + 1) = v298;
                            *((_DWORD *)v296 + 4 * (v297 + 1)) = (_DWORD)v449;
                            v299 = v450;
                            if (v450)
                              *(_DWORD *)v450 += 2;
                            *((_QWORD *)v296 + 2 * (v297 + 1) + 1) = v299;
                            *((_DWORD *)v296 + 4 * (v297 + 2)) = v451;
                            v300 = v452;
                            if (v452)
                              *(_DWORD *)v452 += 2;
                            *((_QWORD *)v296 + 2 * (v297 + 2) + 1) = v300;
                            *((_DWORD *)v296 + 4 * (v297 + 3)) = v453;
                            v301 = v454[0];
                            if (v454[0])
                              *(_DWORD *)v454[0] += 2;
                            *((_QWORD *)v296 + 2 * (v297 + 3) + 1) = v301;
                            HIDWORD(v446) = v297 + 4;
                            (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v295 + 16))(v295, &WebCore::LogWebRTC, 4, &v445);
                            v302 = v445;
                            if (HIDWORD(v446))
                            {
                              v303 = 16 * HIDWORD(v446);
                              v304 = (WTF::StringImpl **)((char *)v445 + 8);
                              do
                              {
                                v305 = *v304;
                                *v304 = 0;
                                if (v305)
                                {
                                  if (*(_DWORD *)v305 == 2)
                                    WTF::StringImpl::destroy(v305, (WTF::StringImpl *)v283);
                                  else
                                    *(_DWORD *)v305 -= 2;
                                }
                                v304 += 2;
                                v303 -= 16;
                              }
                              while (v303);
                              v302 = v445;
                            }
                            if (v302)
                            {
                              v445 = 0;
                              LODWORD(v446) = 0;
                              WTF::fastFree(v302, v283);
                            }
                            v306 = (WTF::StringImpl *)v454[0];
                            v454[0] = 0;
                            if (v306)
                            {
                              if (*(_DWORD *)v306 == 2)
                                WTF::StringImpl::destroy(v306, (WTF::StringImpl *)v283);
                              else
                                *(_DWORD *)v306 -= 2;
                            }
                            v307 = v452;
                            v452 = 0;
                            if (v307)
                            {
                              if (*(_DWORD *)v307 == 2)
                                WTF::StringImpl::destroy(v307, (WTF::StringImpl *)v283);
                              else
                                *(_DWORD *)v307 -= 2;
                            }
                            v308 = v450;
                            v450 = 0;
                            if (v308)
                            {
                              if (*(_DWORD *)v308 == 2)
                                WTF::StringImpl::destroy(v308, (WTF::StringImpl *)v283);
                              else
                                *(_DWORD *)v308 -= 2;
                            }
                            v309 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                            *((_QWORD *)&buf + 1) = 0;
                            if (v309)
                            {
                              if (*(_DWORD *)v309 == 2)
                                WTF::StringImpl::destroy(v309, (WTF::StringImpl *)v283);
                              else
                                *(_DWORD *)v309 -= 2;
                            }
                            ++v293;
                          }
                          while (v293 != (uint64_t *)v294);
                        }
                        v310 = __ldxr(v285);
                        if (v310 == 1)
                        {
                          v153 = v430;
                          v6 = (WTF **)"operator()";
                          if (!__stlxr(0, v285))
                            break;
                        }
                        else
                        {
                          __clrex();
                          v153 = v430;
                          v6 = (WTF **)"operator()";
                        }
                        WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                        break;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                  }
                }
                v312 = v447;
                v447 = 0;
                if (v312)
                {
                  if (*(_DWORD *)v312 == 2)
                    WTF::StringImpl::destroy(v312, (WTF::StringImpl *)v283);
                  else
                    *(_DWORD *)v312 -= 2;
                }
                v265 = (WTF::String *)HIDWORD(v434);
                goto LABEL_580;
              }
            }
            __break(0xC471u);
            JUMPOUT(0x19548ECD4);
          }
LABEL_580:
          if ((_DWORD)v265)
          {
            v313 = (uint64_t *)v433;
            v314 = (uint64_t *)((char *)v433 + 16 * (_QWORD)v265);
            while (1)
            {
              v315 = *v313;
              v316 = v313[1];
              ++*(_DWORD *)(v316 + 24);
              *(_QWORD *)&buf = v316;
              WebCore::MediaStream::addTrackFromPlatform(v315, (uint64_t *)&buf);
              v317 = (_DWORD *)buf;
              *(_QWORD *)&buf = 0;
              if (v317)
              {
                if (v317[6] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v317 + 16))(v317);
                else
                  --v317[6];
              }
              if (*(_DWORD *)(v153[2] + 80) == 5)
                break;
              v313 += 2;
              if (v313 == v314)
                goto LABEL_589;
            }
            v341 = v153[8];
            result = (*(uint64_t (**)(uint64_t *))(*v153 + 24))(v153);
            v342 = (WTF::StringImpl *)v153[9];
            *(_QWORD *)&buf = result;
            *((_QWORD *)&buf + 1) = v40;
            v449 = "operator()";
            v450 = v342;
            if (*(_BYTE *)(v341 + 12) && WebCore::LogWebRTC && byte_1ECE7CD50 >= 4u)
              result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [42]>((uint64_t)&WebCore::LogWebRTC, 4u, (WTF::Logger::LogSiteIdentifier *)&buf, "PeerConnection closed while adding tracks");
            goto LABEL_647;
          }
LABEL_589:
          v318 = v153[8];
          v319 = (*(uint64_t (**)(uint64_t *))(*v153 + 24))(v153);
          v320 = v153[9];
          v441 = v319;
          v442 = v40;
          v443 = "operator()";
          v444 = v320;
          v13 = HIDWORD(v432);
          if (!*(_BYTE *)(v318 + 12))
            goto LABEL_727;
          v14 = &WebCore::LogWebRTC;
          if (!WebCore::LogWebRTC || byte_1ECE7CD50 < 4u)
            goto LABEL_727;
          WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v441);
          WTF::String::String((WTF::String *)&v439, "Dispatching ");
          WTF::String::number((WTF::String *)v13);
          WTF::String::String((WTF::String *)&v437, " track events");
          a4 = v439;
          a3 = v440;
          a5 = v438;
          if (v440)
            v321 = *((_DWORD *)v440 + 1);
          else
            v321 = 0;
          a6 = v437;
          if (v439)
          {
            v322 = *((_DWORD *)v439 + 1);
            if (v438)
              goto LABEL_596;
LABEL_862:
            v323 = 0;
            if (!v437)
              goto LABEL_863;
LABEL_597:
            v324 = *((_DWORD *)v437 + 1);
          }
          else
          {
            v322 = 0;
            if (!v438)
              goto LABEL_862;
LABEL_596:
            v323 = *((_DWORD *)v438 + 1);
            if (v437)
              goto LABEL_597;
LABEL_863:
            v324 = 0;
          }
          if ((v324 | v323) < 0
            || ((v112 = __OFADD__(v323, v324), v325 = v323 + v324, !v112) ? (v326 = 0) : (v326 = 1),
                v322 < 0
             || (v326 & 1) != 0
             || ((v112 = __OFADD__(v322, v325), v327 = v322 + v325, !v112) ? (v328 = 0) : (v328 = 1),
                 v321 < 0 || (v328 & 1) != 0 || (result = (v321 + v327), __OFADD__(v321, v327)))))
          {
            v447 = 0;
          }
          else
          {
            if (v440 && (*((_BYTE *)v440 + 16) & 4) == 0 || v439 && (*((_BYTE *)v439 + 16) & 4) == 0)
            {
              v329 = 0;
              goto LABEL_615;
            }
LABEL_717:
            if (a5)
            {
              v374 = *((_DWORD *)a5 + 4);
              v329 = (v374 >> 2) & 1;
              if (a6 && (v374 & 4) != 0)
LABEL_720:
                v329 = (*((unsigned __int8 *)a6 + 16) >> 2) & 1;
            }
            else
            {
              if (a6)
                goto LABEL_720;
              v329 = 1;
            }
LABEL_615:
            WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v329, (uint64_t)a3, a4, (uint64_t)a5, (uint64_t)a6, &v447);
            if (v447)
            {
              v331 = v437;
              v437 = 0;
              if (v331)
              {
                if (*(_DWORD *)v331 == 2)
                  WTF::StringImpl::destroy(v331, v330);
                else
                  *(_DWORD *)v331 -= 2;
              }
              v332 = v438;
              v438 = 0;
              if (v332)
              {
                if (*(_DWORD *)v332 == 2)
                  WTF::StringImpl::destroy(v332, v330);
                else
                  *(_DWORD *)v332 -= 2;
              }
              v333 = v439;
              v439 = 0;
              if (v333)
              {
                if (*(_DWORD *)v333 == 2)
                  WTF::StringImpl::destroy(v333, v330);
                else
                  *(_DWORD *)v333 -= 2;
              }
              v334 = v440;
              v440 = 0;
              if (v334)
              {
                if (*(_DWORD *)v334 == 2)
                  WTF::StringImpl::destroy(v334, v330);
                else
                  *(_DWORD *)v334 -= 2;
              }
              v335 = *((_QWORD *)v14 + 4);
              v336 = os_log_type_enabled(v335, OS_LOG_TYPE_DEFAULT);
              if ((_DWORD)v336)
              {
                WTF::String::utf8();
                v337 = v445 ? (char *)v445 + 16 : 0;
                LODWORD(buf) = 136446210;
                *(_QWORD *)((char *)&buf + 4) = v337;
                _os_log_impl(&dword_1940B8000, v335, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                v336 = (uint64_t)v445;
                v445 = 0;
                if (v336)
                {
                  if (*(_DWORD *)v336 == 1)
                    v336 = WTF::fastFree((WTF *)v336, v40);
                  else
                    --*(_DWORD *)v336;
                }
              }
              if (*v14 && v14[16] >= 4u)
              {
                v338 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                do
                {
                  while (1)
                  {
                    v339 = *v338;
                    if ((v339 & 1) != 0)
                      goto LABEL_723;
                    v340 = __ldaxr(v338);
                    if (v340 == v339)
                      break;
                    __clrex();
                  }
                }
                while (__stxr(v339 | 1, v338));
                v353 = WTF::Logger::observers((WTF::Logger *)v336);
                v354 = *(unsigned int *)(v353 + 12);
                if ((_DWORD)v354)
                {
                  v355 = *(uint64_t **)v353;
                  v356 = *(_QWORD *)v353 + 8 * v354;
                  do
                  {
                    v357 = *v355;
                    LODWORD(buf) = 0;
                    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)&v441);
                    LODWORD(v449) = 0;
                    WTF::String::String((WTF::String *)&v450, "Dispatching ");
                    v451 = 0;
                    WTF::String::number((WTF::String *)v13);
                    v453 = 0;
                    WTF::String::String((WTF::String *)v454, " track events");
                    v445 = 0;
                    v446 = 0;
                    v358 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
                    LODWORD(v446) = 4;
                    v445 = v358;
                    v359 = HIDWORD(v446);
                    *((_DWORD *)v358 + 4 * HIDWORD(v446)) = buf;
                    v360 = *((_QWORD *)&buf + 1);
                    if (*((_QWORD *)&buf + 1))
                      **((_DWORD **)&buf + 1) += 2;
                    *((_QWORD *)v358 + 2 * v359 + 1) = v360;
                    *((_DWORD *)v358 + 4 * (v359 + 1)) = (_DWORD)v449;
                    v361 = v450;
                    if (v450)
                      *(_DWORD *)v450 += 2;
                    *((_QWORD *)v358 + 2 * (v359 + 1) + 1) = v361;
                    *((_DWORD *)v358 + 4 * (v359 + 2)) = v451;
                    v362 = v452;
                    if (v452)
                      *(_DWORD *)v452 += 2;
                    *((_QWORD *)v358 + 2 * (v359 + 2) + 1) = v362;
                    *((_DWORD *)v358 + 4 * (v359 + 3)) = v453;
                    v363 = v454[0];
                    if (v454[0])
                      *(_DWORD *)v454[0] += 2;
                    *((_QWORD *)v358 + 2 * (v359 + 3) + 1) = v363;
                    HIDWORD(v446) = v359 + 4;
                    (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v357 + 16))(v357, &WebCore::LogWebRTC, 4, &v445);
                    v364 = v445;
                    if (HIDWORD(v446))
                    {
                      v365 = (WTF::String *)v13;
                      v366 = 16 * HIDWORD(v446);
                      v367 = (WTF::StringImpl **)((char *)v445 + 8);
                      do
                      {
                        v368 = *v367;
                        *v367 = 0;
                        if (v368)
                        {
                          if (*(_DWORD *)v368 == 2)
                            WTF::StringImpl::destroy(v368, (WTF::StringImpl *)v40);
                          else
                            *(_DWORD *)v368 -= 2;
                        }
                        v367 += 2;
                        v366 -= 16;
                      }
                      while (v366);
                      v364 = v445;
                      v13 = (unint64_t)v365;
                    }
                    if (v364)
                    {
                      v445 = 0;
                      LODWORD(v446) = 0;
                      WTF::fastFree(v364, v40);
                    }
                    v369 = (WTF::StringImpl *)v454[0];
                    v454[0] = 0;
                    if (v369)
                    {
                      if (*(_DWORD *)v369 == 2)
                        WTF::StringImpl::destroy(v369, (WTF::StringImpl *)v40);
                      else
                        *(_DWORD *)v369 -= 2;
                    }
                    v370 = v452;
                    v452 = 0;
                    if (v370)
                    {
                      if (*(_DWORD *)v370 == 2)
                        WTF::StringImpl::destroy(v370, (WTF::StringImpl *)v40);
                      else
                        *(_DWORD *)v370 -= 2;
                    }
                    v371 = v450;
                    v450 = 0;
                    if (v371)
                    {
                      if (*(_DWORD *)v371 == 2)
                        WTF::StringImpl::destroy(v371, (WTF::StringImpl *)v40);
                      else
                        *(_DWORD *)v371 -= 2;
                    }
                    v372 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                    *((_QWORD *)&buf + 1) = 0;
                    if (v372)
                    {
                      if (*(_DWORD *)v372 == 2)
                        WTF::StringImpl::destroy(v372, (WTF::StringImpl *)v40);
                      else
                        *(_DWORD *)v372 -= 2;
                    }
                    ++v355;
                  }
                  while (v355 != (uint64_t *)v356);
                }
                v373 = __ldxr(v338);
                if (v373 == 1)
                {
                  v6 = (WTF **)"operator()";
                  if (!__stlxr(0, v338))
                    goto LABEL_723;
                }
                else
                {
                  __clrex();
                  v6 = (WTF **)"operator()";
                }
                WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              }
LABEL_723:
              v375 = v447;
              v447 = 0;
              if (v375)
              {
                if (*(_DWORD *)v375 == 2)
                  WTF::StringImpl::destroy(v375, (WTF::StringImpl *)v40);
                else
                  *(_DWORD *)v375 -= 2;
              }
              v13 = HIDWORD(v432);
LABEL_727:
              v376 = v431;
              if ((_DWORD)v13)
              {
                v429 = v12;
                v424 = v13;
                v377 = 0;
                v378 = 8 * v13;
                while (1)
                {
                  v379 = *(_QWORD *)((char *)v376 + v377);
                  v380 = *(_QWORD *)(v379 + 80);
                  if (v380)
                    ++*(_DWORD *)(v380 + 24);
                  v381 = (WebCore::EventTarget *)v430[2];
                  v382 = *((_QWORD *)v381 + 11);
                  v383 = (WTF::StringImpl *)*((_QWORD *)v381 + 12);
                  *(_QWORD *)&buf = "RTCPeerConnection";
                  *((_QWORD *)&buf + 1) = 18;
                  v449 = "dispatchEvent";
                  v450 = v383;
                  if (*(_BYTE *)(v382 + 12))
                  {
                    if (WebCore::LogWebRTC && byte_1ECE7CD50 >= 3u)
                      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [14],WTF::AtomString,char [2]>((uint64_t)&WebCore::LogWebRTC, 3u, (WTF::Logger::LogSiteIdentifier *)&buf, "dispatching '", (WTF::StringImpl **)(v379 + 24), "'");
                  }
                  WebCore::EventTarget::dispatchEvent(v381, (WebCore::Event *)v379);
                  v385 = *(_DWORD *)(v430[2] + 80);
                  if (v385 == 5)
                  {
                    v386 = v430[8];
                    v387 = (*(uint64_t (**)(uint64_t *))(*v430 + 24))(v430);
                    v388 = (WTF::StringImpl *)v430[9];
                    *(_QWORD *)&buf = v387;
                    *((_QWORD *)&buf + 1) = v40;
                    v449 = (const char *)v6;
                    v450 = v388;
                    if (*(_BYTE *)(v386 + 12) && WebCore::LogWebRTC && byte_1ECE7CD50 >= 4u)
                      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [53]>((uint64_t)&WebCore::LogWebRTC, 4u, (WTF::Logger::LogSiteIdentifier *)&buf, "PeerConnection closed while dispatching track events");
                    if (!v380)
                    {
LABEL_752:
                      v390 = 0;
                      v391 = (WTF *)v7;
                      do
                      {
                        result = *(_QWORD *)((char *)v376 + v390);
                        *(_QWORD *)((char *)v376 + v390) = 0;
                        if (result)
                        {
                          if (*(_DWORD *)(result + 16) == 1)
                            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
                          else
                            --*(_DWORD *)(result + 16);
                        }
                        v390 += 8;
                      }
                      while (8 * v424 != v390);
                      if (v376)
                        result = WTF::fastFree(v376, v40);
                      v392 = v433;
                      if (HIDWORD(v434))
                      {
                        v393 = 16 * HIDWORD(v434);
                        v394 = (_DWORD **)((char *)v433 + 8);
                        do
                        {
                          v395 = *v394;
                          *v394 = 0;
                          if (v395)
                          {
                            if (v395[6] == 1)
                              (*(void (**)(_DWORD *))(*(_QWORD *)v395 + 16))(v395);
                            else
                              --v395[6];
                          }
                          result = (uint64_t)*(v394 - 1);
                          *(v394 - 1) = 0;
                          if (result)
                          {
                            if (*(_DWORD *)(result + 88) == 1)
                            {
                              WebCore::MediaStream::~MediaStream((WebCore::MediaStream *)result);
                              result = bmalloc::api::isoDeallocate(v396, v397);
                            }
                            else
                            {
                              --*(_DWORD *)(result + 88);
                            }
                          }
                          v394 += 2;
                          v393 -= 16;
                        }
                        while (v393);
                      }
                      if (v392)
                        result = WTF::fastFree(v392, v40);
                      if ((_DWORD)v429)
                      {
                        v419 = 8 * (_QWORD)v429;
                        v420 = (uint64_t *)v7;
                        v391 = (WTF *)v7;
                        do
                        {
                          result = *v420;
                          *v420 = 0;
                          if (result)
                          {
                            if (*(_DWORD *)(result + 24) == 1)
                              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
                            else
                              --*(_DWORD *)(result + 24);
                          }
                          ++v420;
                          v419 -= 8;
                        }
                        while (v419);
                      }
                      if (v391)
                      {
                        v352 = v391;
                        goto LABEL_674;
                      }
                      goto LABEL_807;
                    }
                  }
                  else
                  {
                    v389 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v380 + 96) + 40) + 8);
                    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v389 + 80))(v389, 0);
                  }
                  if (*(_DWORD *)(v380 + 24) == 1)
                    (*(void (**)(uint64_t))(*(_QWORD *)v380 + 16))(v380);
                  else
                    --*(_DWORD *)(v380 + 24);
                  if (v385 == 5)
                    goto LABEL_752;
                  v377 += 8;
                  if (v378 == v377)
                  {
                    v398 = 8 * v424;
                    v399 = v376;
                    v12 = v429;
                    do
                    {
                      v400 = *(_DWORD **)v399;
                      *(_QWORD *)v399 = 0;
                      if (v400)
                      {
                        if (v400[4] == 1)
                          (*(void (**)(_DWORD *))(*(_QWORD *)v400 + 8))(v400);
                        else
                          --v400[4];
                      }
                      v399 = (WTF::StringImpl *)((char *)v399 + 8);
                      v398 -= 8;
                    }
                    while (v398);
                    break;
                  }
                }
              }
              if (v376)
                WTF::fastFree(v376, v40);
              v401 = v433;
              if (HIDWORD(v434))
              {
                v402 = 16 * HIDWORD(v434);
                v403 = (_DWORD **)((char *)v433 + 8);
                do
                {
                  v404 = *v403;
                  *v403 = 0;
                  if (v404)
                  {
                    if (v404[6] == 1)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v404 + 16))(v404);
                    else
                      --v404[6];
                  }
                  v405 = (WebCore::MediaStream *)*(v403 - 1);
                  *(v403 - 1) = 0;
                  if (v405)
                  {
                    if (*((_DWORD *)v405 + 22) == 1)
                    {
                      WebCore::MediaStream::~MediaStream(v405);
                      bmalloc::api::isoDeallocate(v406, v407);
                    }
                    else
                    {
                      --*((_DWORD *)v405 + 22);
                    }
                  }
                  v403 += 2;
                  v402 -= 16;
                }
                while (v402);
              }
              if (v401)
                WTF::fastFree(v401, v40);
              if ((_DWORD)v12)
              {
                v416 = 8 * (_QWORD)v12;
                v417 = (_DWORD **)v7;
                do
                {
                  v418 = *v417;
                  *v417 = 0;
                  if (v418)
                  {
                    if (v418[6] == 1)
                      (*(void (**)(_DWORD *))(*(_QWORD *)v418 + 16))(v418);
                    else
                      --v418[6];
                  }
                  ++v417;
                  v416 -= 8;
                }
                while (v416);
              }
              if (v7)
                WTF::fastFree((WTF *)v7, v40);
LABEL_803:
              buf = 0uLL;
              v449 = 0;
              result = (*(uint64_t (**)(_QWORD, __int128 *))(**(_QWORD **)(v421 + 16) + 16))(*(_QWORD *)(v421 + 16), &buf);
              if ((_BYTE)v449)
              {
                result = *((_QWORD *)&buf + 1);
                *((_QWORD *)&buf + 1) = 0;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                    result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v40);
                  else
                    *(_DWORD *)result -= 2;
                }
              }
              goto LABEL_807;
            }
          }
          __break(0xC471u);
LABEL_904:
          JUMPOUT(0x19548ECA8);
        }
      }
      __break(0xC471u);
      JUMPOUT(0x19548ECC0);
    }
  }
  else
  {
LABEL_352:
    if (!(_DWORD)v12)
      goto LABEL_356;
  }
  v203 = 8 * (_QWORD)v12;
  v204 = v7;
  while (1)
  {
    v205 = *(_QWORD *)v204;
    *(_BYTE *)(v205 + 1208) = 1;
    v206 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v205 + 96) + 40) + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v206 + 80))(v206, 1);
    *(_BYTE *)(*(_QWORD *)v204 + 1208) = 0;
    if (*(_DWORD *)(v153[2] + 80) == 5)
      break;
    v204 += 8;
    v203 -= 8;
    if (!v203)
      goto LABEL_356;
  }
  v235 = v153[8];
  result = (*(uint64_t (**)(uint64_t *))(*v153 + 24))(v153);
  v236 = (WTF::StringImpl *)v153[9];
  *(_QWORD *)&buf = result;
  *((_QWORD *)&buf + 1) = v40;
  v449 = "operator()";
  v450 = v236;
  if (*(_BYTE *)(v235 + 12) && WebCore::LogWebRTC && byte_1ECE7CD50 >= 4u)
    result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [52]>((uint64_t)&WebCore::LogWebRTC, 4u, (WTF::Logger::LogSiteIdentifier *)&buf, "PeerConnection closed while processing muted tracks");
LABEL_647:
  v343 = v431;
  if (HIDWORD(v432))
  {
    v344 = 8 * HIDWORD(v432);
    v345 = v431;
    do
    {
      result = *(_QWORD *)v345;
      *(_QWORD *)v345 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 16) == 1)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        else
          --*(_DWORD *)(result + 16);
      }
      v345 = (WTF::StringImpl *)((char *)v345 + 8);
      v344 -= 8;
    }
    while (v344);
  }
  if (v343)
    result = WTF::fastFree(v343, v40);
  v346 = v433;
  if (HIDWORD(v434))
  {
    v347 = 16 * HIDWORD(v434);
    v348 = (_DWORD **)((char *)v433 + 8);
    do
    {
      v349 = *v348;
      *v348 = 0;
      if (v349)
      {
        if (v349[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v349 + 16))(v349);
        else
          --v349[6];
      }
      result = (uint64_t)*(v348 - 1);
      *(v348 - 1) = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 88) == 1)
        {
          WebCore::MediaStream::~MediaStream((WebCore::MediaStream *)result);
          result = bmalloc::api::isoDeallocate(v350, v351);
        }
        else
        {
          --*(_DWORD *)(result + 88);
        }
      }
      v348 += 2;
      v347 -= 16;
    }
    while (v347);
  }
  if (v346)
    result = WTF::fastFree(v346, v40);
  if ((_DWORD)v12)
  {
    v414 = 8 * (_QWORD)v12;
    v415 = (uint64_t *)v7;
    do
    {
      result = *v415;
      *v415 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 24) == 1)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
        else
          --*(_DWORD *)(result + 24);
      }
      ++v415;
      v414 -= 8;
    }
    while (v414);
  }
  if (v7)
  {
    v352 = (WTF *)v7;
LABEL_674:
    result = WTF::fastFree(v352, v40);
  }
LABEL_807:
  v408 = v435;
  if (HIDWORD(v436))
  {
    v409 = 16 * HIDWORD(v436);
    v410 = (_DWORD **)((char *)v435 + 8);
    do
    {
      v411 = *v410;
      *v410 = 0;
      if (v411)
      {
        if (v411[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v411 + 16))(v411);
        else
          --v411[6];
      }
      result = (uint64_t)*(v410 - 1);
      *(v410 - 1) = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 88) == 1)
        {
          WebCore::MediaStream::~MediaStream((WebCore::MediaStream *)result);
          result = bmalloc::api::isoDeallocate(v412, v413);
        }
        else
        {
          --*(_DWORD *)(result + 88);
        }
      }
      v410 += 2;
      v409 -= 16;
    }
    while (v409);
  }
  if (v408)
    return WTF::fastFree(v408, v40);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::setRemoteDescriptionFailed(WebCore::Exception &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *a1 = &off_1E3360300;
  v3 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::setRemoteDescriptionFailed(WebCore::Exception &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E3360300;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::setRemoteDescriptionFailed(WebCore::Exception &&)::$_0,void>::call(WTF::StringImpl *result)
{
  char v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  _BYTE v4[8];
  WTF::StringImpl *v5;
  char v6;

  if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)result + 1) + 16) + 80) != 5)
  {
    v1 = *((_BYTE *)result + 24);
    v2 = (WTF::StringImpl *)*((_QWORD *)result + 4);
    *((_QWORD *)result + 4) = 0;
    v4[0] = v1;
    v5 = v2;
    v6 = 1;
    result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, _BYTE *))(**((_QWORD **)result + 2) + 16))(*((_QWORD *)result + 2), v4);
    if (v6)
    {
      result = v5;
      v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t (***WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::iceGatheringStateChanged(WebCore::RTCIceGatheringState)::$_0,void>::call(uint64_t a1))()
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t (*v5)();
  uint64_t (*v6)();
  uint64_t v7;
  WebCore *v8;
  WebCore *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  WebCore *v15;
  uint64_t (*v16[4])();

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_DWORD *)(a1 + 16);
  if (v2 != 2)
    return WebCore::RTCPeerConnection::updateIceGatheringState(*(_QWORD *)(v1 + 16), v2);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = (uint64_t (*)())(*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 24))(*(_QWORD *)(a1 + 8));
  v5 = *(uint64_t (**)())(v1 + 72);
  v16[0] = v4;
  v16[1] = v6;
  v16[2] = (uint64_t (*)())"doneGatheringCandidates";
  v16[3] = v5;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [33]>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v16, "Finished ice candidate gathering");
  *(_BYTE *)(v1 + 80) = 1;
  v7 = *(_QWORD *)(v1 + 16);
  v8 = (WebCore *)bmalloc::api::isoAllocate();
  v9 = v8;
  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v10 || (v8 = *(WebCore **)(v10 + 96)) == 0)
    v8 = (WebCore *)WebCore::threadGlobalDataSlow(v8);
  v11 = *((_QWORD *)v8 + 5);
  if (!v11)
  {
    v15 = v8;
    v8 = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v11 = *((_QWORD *)v15 + 5);
  }
  WTF::MonotonicTime::now(v8);
  *((_QWORD *)v9 + 1) = 0;
  *((_DWORD *)v9 + 4) = 1;
  *((_DWORD *)v9 + 5) = *((_DWORD *)v9 + 5) & 0xFFC00000 | 0x150200 | (*(_QWORD *)(v11 + 968) != 0);
  v13 = *(_DWORD **)(v11 + 968);
  if (v13)
    *v13 += 2;
  *((_QWORD *)v9 + 3) = v13;
  *((_QWORD *)v9 + 4) = 0;
  *((_QWORD *)v9 + 5) = 0;
  *((_QWORD *)v9 + 6) = 0;
  *((_QWORD *)v9 + 7) = v12;
  *(_QWORD *)v9 = off_1E3361B00;
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = 0;
  *((_QWORD *)v9 + 8) = 0;
  v16[0] = (uint64_t (*)())v9;
  WebCore::RTCPeerConnection::scheduleEvent(v7, v16);
  if (v16[0])
  {
    if (*((_DWORD *)v16[0] + 4) == 1)
      (*(void (**)(void))(*(_QWORD *)v16[0] + 8))();
    else
      --*((_DWORD *)v16[0] + 4);
  }
  return WebCore::RTCPeerConnection::updateIceGatheringState(*(_QWORD *)(v1 + 16), 2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::addIceCandidate(WebCore::RTCIceCandidate *,WTF::Function<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0,void,WebCore::ExceptionOr<std::optional<WebCore::PeerConnectionBackend::DescriptionStates>> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E3360350;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::addIceCandidate(WebCore::RTCIceCandidate *,WTF::Function<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0,void,WebCore::ExceptionOr<std::optional<WebCore::PeerConnectionBackend::DescriptionStates>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E3360350;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::addIceCandidate(WebCore::RTCIceCandidate *,WTF::Function<void ()(WebCore::ExceptionOr<void> &&)> &&)::$_0,void,WebCore::ExceptionOr<std::optional<WebCore::PeerConnectionBackend::DescriptionStates>> &&>::call(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t (***v12)();
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (**v16)();
  uint64_t (***v17)();
  uint64_t v18;
  _QWORD *v19;
  _BYTE v20[80];
  int v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = result[1];
  if (!v2)
    return result;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return result;
  v4 = *(_QWORD *)(v3 + 16);
  v5 = (_QWORD *)result[2];
  result[2] = 0;
  v18 = v4;
  v19 = v5;
  v20[0] = 0;
  v21 = -1;
  v6 = *(unsigned int *)(a2 + 88);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(uint64_t (****)(), _BYTE *, uint64_t))off_1E3360378[v6])(&v17, v20, a2 + 8);
    v21 = v6;
  }
  v7 = WTF::fastMalloc((WTF *)0x78);
  *(_QWORD *)v7 = &off_1E3360398;
  *(_QWORD *)(v7 + 8) = v18;
  v8 = v19;
  v19 = 0;
  *(_QWORD *)(v7 + 16) = v8;
  *(_BYTE *)(v7 + 32) = 0;
  *(_DWORD *)(v7 + 112) = -1;
  v9 = v21;
  if (v21 != -1)
  {
    ((void (*)(uint64_t (****)(), uint64_t, _BYTE *))off_1E3360378[v21])(&v17, v7 + 32, v20);
    *(_DWORD *)(v7 + 112) = v9;
  }
  v10 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v10 = 1;
  v11 = *(_DWORD *)(v4 + 24);
  *(_QWORD *)(v10 + 8) = v4;
  ++*(_QWORD *)(v4 + 48);
  *(_DWORD *)(v4 + 24) = v11 + 2;
  v12 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *v12 = off_1E3360610;
  v12[1] = (uint64_t (**)())v4;
  v12[2] = (uint64_t (**)())v10;
  v12[3] = (uint64_t (**)())v7;
  v17 = v12;
  v13 = *(_QWORD *)(v4 + 40);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 8);
    if (v14)
    {
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v14 - 96) + 104))(v14 - 96);
      WebCore::EventLoopTaskGroup::queueTask(v15, 11, (uint64_t *)&v17);
      v12 = v17;
      v17 = 0;
      if (!v12)
        goto LABEL_14;
    }
    else
    {
      v17 = 0;
    }
    v16 = *v12;
  }
  else
  {
    v17 = 0;
    v16 = off_1E3360610;
  }
  ((void (*)(uint64_t (***)()))v16[1])(v12);
LABEL_14:
  if (v21 != -1)
    ((void (*)(uint64_t (****)(), _BYTE *))off_1E3360368[v21])(&v17, v20);
  v21 = -1;
  result = v19;
  v19 = 0;
  if (result)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore21PeerConnectionBackend17DescriptionStatesEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  return std::__optional_destruct_base<WebCore::PeerConnectionBackend::DescriptionStates,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a2, a2);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_8optionalIN7WebCore21PeerConnectionBackend17DescriptionStatesEEENS9_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSF_1EJSC_SD_EEEEEEDcSH_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN7WebCore21PeerConnectionBackend17DescriptionStatesEEENS9_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 72) = 0;
  if (*((_BYTE *)a3 + 72))
  {
    v3 = *a3;
    *(_QWORD *)(a2 + 5) = *(uint64_t *)((char *)a3 + 5);
    *(_QWORD *)a2 = v3;
    v4 = a3[2];
    a3[2] = 0;
    *(_QWORD *)(a2 + 16) = v4;
    *(_QWORD *)(a2 + 24) = a3[3];
    v5 = a3[4];
    a3[4] = 0;
    *(_QWORD *)(a2 + 32) = v5;
    *(_QWORD *)(a2 + 40) = a3[5];
    v6 = a3[6];
    a3[6] = 0;
    *(_QWORD *)(a2 + 48) = v6;
    *(_QWORD *)(a2 + 56) = a3[7];
    v7 = a3[8];
    a3[8] = 0;
    *(_QWORD *)(a2 + 64) = v7;
    *(_BYTE *)(a2 + 72) = 1;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJNS_8optionalIN7WebCore21PeerConnectionBackend17DescriptionStatesEEENS9_9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISE_LNS0_6_TraitE1EEEEEvRSF_OT_EUlRSL_OT0_E_JRNS0_6__baseILSI_1EJSC_SD_EEEOST_EEEDcSL_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore21PeerConnectionBackend15addIceCandidateEPNS2_15RTCIceCandidateEONS_8FunctionIFvONS2_11ExceptionOrIvEEEEEEN3__0clINS7_INSt3__18optionalINS3_17DescriptionStatesEEEEEEEDaOT_EUlvE_vJEED1Ev(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = &off_1E3360398;
  v2 = *(unsigned int *)(a1 + 112);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_1E3360368[v2])(&v5, a1 + 32);
  *(_DWORD *)(a1 + 112) = -1;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore21PeerConnectionBackend15addIceCandidateEPNS2_15RTCIceCandidateEONS_8FunctionIFvONS2_11ExceptionOrIvEEEEEEN3__0clINS7_INSt3__18optionalINS3_17DescriptionStatesEEEEEEEDaOT_EUlvE_vJEED0Ev(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v6;

  *(_QWORD *)this = &off_1E3360398;
  v3 = *((unsigned int *)this + 28);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E3360368[v3])(&v6, (char *)this + 32);
  *((_DWORD *)this + 28) = -1;
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore21PeerConnectionBackend15addIceCandidateEPNS2_15RTCIceCandidateEONS_8FunctionIFvONS2_11ExceptionOrIvEEEEEEN3__0clINS7_INSt3__18optionalINS3_17DescriptionStatesEEEEEEEDaOT_EUlvE_vJEE4callEv(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t result;
  int v4;
  NSObject *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  result = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(result + 80) == 5)
    return result;
  v4 = *(_DWORD *)(a1 + 112);
  if (!v4)
  {
    LOBYTE(v18) = 0;
    v25 = 0;
    if (*(_BYTE *)(a1 + 104))
    {
      v8 = *(_QWORD *)(a1 + 37);
      v9 = *(_QWORD *)(a1 + 48);
      v10 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)&v18 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)((char *)&v18 + 5) = v8;
      *(_QWORD *)(a1 + 48) = 0;
      v19 = v9;
      v20 = v10;
      v11 = *(_OWORD *)(a1 + 64);
      *(_QWORD *)(a1 + 64) = 0;
      v21 = v11;
      v12 = *(_QWORD *)(a1 + 80);
      v13 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = 0;
      v22 = v12;
      v23 = v13;
      v14 = *(_QWORD *)(a1 + 96);
      *(_QWORD *)(a1 + 96) = 0;
      v24 = v14;
      v25 = 1;
      WebCore::RTCPeerConnection::updateDescriptions((_QWORD *)result, (uint64_t)&v18);
    }
    std::__optional_destruct_base<WebCore::PeerConnectionBackend::DescriptionStates,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v18, a2);
    v18 = 0uLL;
    v19 = 0;
    goto LABEL_9;
  }
  v5 = qword_1ECE7CD60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
  {
    if (v4 != 1)
      goto LABEL_17;
    v16 = *(unsigned __int8 *)(a1 + 32);
    LODWORD(v18) = 67109120;
    DWORD1(v18) = v16;
    _os_log_error_impl(&dword_1940B8000, v5, OS_LOG_TYPE_ERROR, "Adding ice candidate failed %hhu", (uint8_t *)&v18, 8u);
    v4 = *(_DWORD *)(a1 + 112);
  }
  if (v4 != 1)
  {
LABEL_17:
    v17 = std::__throw_bad_variant_access[abi:sn180100]();
    return WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::newICECandidate(WTF::String &&,WTF::String &,unsigned short,WTF::String &,std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&)::$_0,void>::~CallableWrapper(v17);
  }
  v6 = *(_BYTE *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  LOBYTE(v18) = v6;
  *((_QWORD *)&v18 + 1) = v7;
  LOBYTE(v19) = 1;
LABEL_9:
  result = (*(uint64_t (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), &v18);
  if ((_BYTE)v19)
  {
    result = *((_QWORD *)&v18 + 1);
    *((_QWORD *)&v18 + 1) = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v15);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::newICECandidate(WTF::String &&,WTF::String &,unsigned short,WTF::String &,std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *a1 = off_1E33603C0;
  std::__optional_destruct_base<WebCore::PeerConnectionBackend::DescriptionStates,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 10), a2);
  v4 = (WTF::StringImpl *)a1[9];
  a1[9] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[7];
  a1[7] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::newICECandidate(WTF::String &&,WTF::String &,unsigned short,WTF::String &,std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  *(_QWORD *)a1 = off_1E33603C0;
  std::__optional_destruct_base<WebCore::PeerConnectionBackend::DescriptionStates,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)a1 + 80, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)a1 + 9);
  *((_QWORD *)a1 + 9) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)a1 + 7);
  *((_QWORD *)a1 + 7) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v3);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 6) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  return WTF::fastFree(a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::newICECandidate(WTF::String &&,WTF::String &,unsigned short,WTF::String &,std::optional<WebCore::PeerConnectionBackend::DescriptionStates> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  WTF::StringImpl **v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  int v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  NSObject *v19;
  uint64_t v20;
  void *v21;
  char *v22;
  unsigned __int8 *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::Logger *v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::Logger *v37;
  uint64_t v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  int v44;
  WTF::StringImpl *v45;
  WebCore::EventTarget *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  bmalloc::api *v51;
  void *v52;
  uint64_t v53;
  _BYTE *v54;
  size_t v55;
  _BYTE *v56;
  _BYTE *v57;
  unsigned __int128 v58;
  char v59;
  WTF::Logger *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  __int128 buf;
  const char *v66;
  WTF::StringImpl *v67;
  int v68;
  WTF::StringImpl *v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  result = *(_QWORD *)(v2 + 16);
  if (*(_DWORD *)(result + 80) == 5)
    return result;
  if (*(_BYTE *)(a1 + 152))
  {
    result = (uint64_t)WebCore::RTCPeerConnection::updateDescriptions((_QWORD *)result, a1 + 80);
    if (*(_DWORD *)(*(_QWORD *)(v2 + 16) + 80) == 5)
      return result;
  }
  v4 = (WTF::StringImpl **)(a1 + 48);
  if (*(_BYTE *)(*(_QWORD *)(v2 + 64) + 12))
  {
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 8));
    result = WTF::String::String((WTF::String *)&v62, "Gathered ice candidate:");
    v6 = *v4;
    if (*v4)
      *(_DWORD *)v6 += 2;
    v7 = v63;
    if (v63)
    {
      v8 = *((_DWORD *)v63 + 1);
      if (v62)
      {
LABEL_9:
        v9 = *((_DWORD *)v62 + 1);
        goto LABEL_10;
      }
    }
    else
    {
      v8 = 0;
      if (v62)
        goto LABEL_9;
    }
    v9 = 0;
LABEL_10:
    if (v6)
      v10 = *((_DWORD *)v6 + 1);
    else
      v10 = 0;
    if (((v10 | v9) & 0x80000000) == 0)
    {
      v11 = __OFADD__(v9, v10);
      v12 = v9 + v10;
      v13 = v11;
      if ((v8 & 0x80000000) == 0 && !v13)
      {
        v14 = (v8 + v12);
        if (!__OFADD__(v8, v12))
        {
          if (v63 && (*((_BYTE *)v63 + 16) & 4) == 0)
          {
            v15 = 0;
            goto LABEL_26;
          }
          if (v62)
          {
            v16 = *((_DWORD *)v62 + 4);
            v15 = (v16 >> 2) & 1;
            if (!v6 || (v16 & 4) == 0)
            {
LABEL_26:
              result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v14, v15, v63, (uint64_t)v62, (uint64_t)v6, &v64);
              if (v64)
              {
                v4 = (WTF::StringImpl **)(a1 + 48);
                if (v6)
                {
                  if (*(_DWORD *)v6 == 2)
                    WTF::StringImpl::destroy(v6, v5);
                  else
                    *(_DWORD *)v6 -= 2;
                }
                goto LABEL_30;
              }
LABEL_132:
              __break(0xC471u);
              return result;
            }
LABEL_25:
            v15 = (*((unsigned __int8 *)v6 + 16) >> 2) & 1;
            goto LABEL_26;
          }
          if (v6)
            goto LABEL_25;
          if (!(_DWORD)v14)
          {
            v53 = MEMORY[0x1E0CBEF70];
            *MEMORY[0x1E0CBEF70] += 2;
LABEL_130:
            v64 = (WTF::StringImpl *)v53;
            v4 = (WTF::StringImpl **)(a1 + 48);
LABEL_30:
            v17 = v62;
            v62 = 0;
            if (v17)
            {
              if (*(_DWORD *)v17 == 2)
                WTF::StringImpl::destroy(v17, v5);
              else
                *(_DWORD *)v17 -= 2;
            }
            v18 = v63;
            v63 = 0;
            if (v18)
            {
              if (*(_DWORD *)v18 == 2)
                WTF::StringImpl::destroy(v18, v5);
              else
                *(_DWORD *)v18 -= 2;
            }
            v19 = qword_1ECE7CD60;
            v20 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
            if ((_DWORD)v20)
            {
              WTF::String::utf8();
              v22 = v60 ? (char *)v60 + 16 : 0;
              LODWORD(buf) = 136446210;
              *(_QWORD *)((char *)&buf + 4) = v22;
              _os_log_impl(&dword_1940B8000, v19, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
              v20 = (uint64_t)v60;
              v60 = 0;
              if (v20)
              {
                if (*(_DWORD *)v20 == 1)
                  v20 = WTF::fastFree((WTF *)v20, v21);
                else
                  --*(_DWORD *)v20;
              }
            }
            if (WebCore::LogWebRTC)
            {
              v23 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
              while (1)
              {
                v24 = *v23;
                if ((v24 & 1) != 0)
                  break;
                v25 = __ldaxr(v23);
                if (v25 == v24)
                {
                  if (!__stxr(v24 | 1, v23))
                  {
                    v26 = WTF::Logger::observers((WTF::Logger *)v20);
                    v27 = *(unsigned int *)(v26 + 12);
                    if ((_DWORD)v27)
                    {
                      v28 = *(uint64_t **)v26;
                      v29 = *(_QWORD *)v26 + 8 * v27;
                      do
                      {
                        v30 = *v28;
                        LODWORD(buf) = 0;
                        WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(a1 + 8));
                        LODWORD(v66) = 0;
                        WTF::String::String((WTF::String *)&v67, "Gathered ice candidate:");
                        v68 = 0;
                        v31 = *v4;
                        if (*v4)
                          *(_DWORD *)v31 += 2;
                        v69 = v31;
                        v60 = 0;
                        v61 = 0;
                        v32 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x30);
                        LODWORD(v61) = 3;
                        v60 = v32;
                        v33 = HIDWORD(v61);
                        *((_DWORD *)v32 + 4 * HIDWORD(v61)) = buf;
                        v34 = *((_QWORD *)&buf + 1);
                        if (*((_QWORD *)&buf + 1))
                          **((_DWORD **)&buf + 1) += 2;
                        *((_QWORD *)v32 + 2 * v33 + 1) = v34;
                        *((_DWORD *)v32 + 4 * (v33 + 1)) = (_DWORD)v66;
                        v35 = v67;
                        if (v67)
                          *(_DWORD *)v67 += 2;
                        *((_QWORD *)v32 + 2 * (v33 + 1) + 1) = v35;
                        *((_DWORD *)v32 + 4 * (v33 + 2)) = v68;
                        v36 = v69;
                        if (v69)
                          *(_DWORD *)v69 += 2;
                        *((_QWORD *)v32 + 2 * (v33 + 2) + 1) = v36;
                        HIDWORD(v61) = v33 + 3;
                        (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v30 + 16))(v30, &WebCore::LogWebRTC, 0, &v60);
                        v37 = v60;
                        if (HIDWORD(v61))
                        {
                          v38 = 16 * HIDWORD(v61);
                          v39 = (WTF::StringImpl **)((char *)v60 + 8);
                          do
                          {
                            v40 = *v39;
                            *v39 = 0;
                            if (v40)
                            {
                              if (*(_DWORD *)v40 == 2)
                                WTF::StringImpl::destroy(v40, (WTF::StringImpl *)v21);
                              else
                                *(_DWORD *)v40 -= 2;
                            }
                            v39 += 2;
                            v38 -= 16;
                          }
                          while (v38);
                          v37 = v60;
                          v4 = (WTF::StringImpl **)(a1 + 48);
                        }
                        if (v37)
                        {
                          v60 = 0;
                          LODWORD(v61) = 0;
                          WTF::fastFree(v37, v21);
                        }
                        v41 = v69;
                        v69 = 0;
                        if (v41)
                        {
                          if (*(_DWORD *)v41 == 2)
                            WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v21);
                          else
                            *(_DWORD *)v41 -= 2;
                        }
                        v42 = v67;
                        v67 = 0;
                        if (v42)
                        {
                          if (*(_DWORD *)v42 == 2)
                            WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v21);
                          else
                            *(_DWORD *)v42 -= 2;
                        }
                        v43 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                        *((_QWORD *)&buf + 1) = 0;
                        if (v43)
                        {
                          if (*(_DWORD *)v43 == 2)
                            WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v21);
                          else
                            *(_DWORD *)v43 -= 2;
                        }
                        ++v28;
                      }
                      while (v28 != (uint64_t *)v29);
                    }
                    v44 = __ldxr(v23);
                    if (v44 == 1)
                    {
                      if (!__stlxr(0, v23))
                        break;
                    }
                    else
                    {
                      __clrex();
                    }
                    WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                    break;
                  }
                }
                else
                {
                  __clrex();
                }
              }
            }
            v45 = v64;
            v64 = 0;
            if (v45)
            {
              if (*(_DWORD *)v45 == 2)
                WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v21);
              else
                *(_DWORD *)v45 -= 2;
            }
            goto LABEL_92;
          }
          if ((v14 & 0x80000000) == 0)
          {
            result = WTF::tryFastCompactMalloc((WTF *)(v14 + 20));
            v53 = buf;
            if ((_QWORD)buf)
            {
              v54 = (_BYTE *)(buf + 20);
              *(_DWORD *)buf = 2;
              *(_DWORD *)(v53 + 4) = v14;
              *(_QWORD *)(v53 + 8) = v53 + 20;
              *(_DWORD *)(v53 + 16) = 4;
              if (v7)
              {
                v5 = (WTF::StringImpl *)*((_QWORD *)v7 + 1);
                v55 = *((unsigned int *)v7 + 1);
                v4 = (WTF::StringImpl **)(a1 + 48);
                if ((*((_BYTE *)v7 + 16) & 4) != 0)
                {
                  if ((_DWORD)v55)
                  {
                    if ((_DWORD)v55 == 1)
                      *v54 = *(_BYTE *)v5;
                    else
                      memcpy(v54, v5, v55);
                  }
                  v64 = (WTF::StringImpl *)v53;
                  goto LABEL_30;
                }
                v56 = &v54[v55];
                if (v55 >= 0x10)
                {
                  v57 = &v54[v55 & 0xFFFFFFF0];
                  do
                  {
                    v58 = (unsigned __int128)vld2q_s8((const char *)v5);
                    v5 = (WTF::StringImpl *)((char *)v5 + 32);
                    *(_OWORD *)v54 = v58;
                    v54 += 16;
                  }
                  while (v54 != v57);
                  v54 = v57;
                }
                while (v54 != v56)
                {
                  v59 = *(_BYTE *)v5;
                  v5 = (WTF::StringImpl *)((char *)v5 + 2);
                  *v54++ = v59;
                }
              }
              goto LABEL_130;
            }
          }
        }
      }
    }
    v64 = 0;
    goto LABEL_132;
  }
LABEL_92:
  *(_BYTE *)(v2 + 80) = 0;
  WebCore::RTCIceCandidate::create((_DWORD **)v4, (_DWORD **)(a1 + 56), *(unsigned __int16 *)(a1 + 64) | 0x10000, (uint64_t *)&v60);
  v46 = *(WebCore::EventTarget **)(v2 + 16);
  v63 = v60;
  WebCore::RTCPeerConnectionIceEvent::create(0, 0, (uint64_t *)&v63, (uint64_t *)(a1 + 72), &v64);
  v47 = v64;
  v48 = *((_QWORD *)v46 + 11);
  v49 = (WTF::StringImpl *)*((_QWORD *)v46 + 12);
  *(_QWORD *)&buf = "RTCPeerConnection";
  *((_QWORD *)&buf + 1) = 18;
  v66 = "dispatchEvent";
  v67 = v49;
  if (*(_BYTE *)(v48 + 12) && WebCore::LogWebRTC && byte_1ECE7CD50 >= 3u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [14],WTF::AtomString,char [2]>((uint64_t)&WebCore::LogWebRTC, 3u, (WTF::Logger::LogSiteIdentifier *)&buf, "dispatching '", (WTF::StringImpl **)v64 + 3, "'");
  WebCore::EventTarget::dispatchEvent(v46, v47);
  if (*((_DWORD *)v47 + 4) == 1)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v47 + 8))(v47);
  else
    --*((_DWORD *)v47 + 4);
  result = (uint64_t)v63;
  if (v63)
  {
    if (*(_DWORD *)v63 == 1)
    {
      WebCore::RTCIceCandidate::~RTCIceCandidate(v63, v50);
      return bmalloc::api::isoDeallocate(v51, v52);
    }
    else
    {
      --*(_DWORD *)v63;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::newDataChannel(WTF::UniqueRef<WebCore::RTCDataChannelHandler> &&,WTF::String &&,WebCore::RTCDataChannelInit &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WebCore::RTCPeerConnection *v6;
  bmalloc::api *v8;
  void *v9;

  *a1 = &off_1E33603E8;
  v3 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[3];
  a1[3] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WebCore::RTCPeerConnection *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 6) == 1)
    {
      WebCore::RTCPeerConnection::~RTCPeerConnection(v6, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*((_DWORD *)v6 + 6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::newDataChannel(WTF::UniqueRef<WebCore::RTCDataChannelHandler> &&,WTF::String &&,WebCore::RTCDataChannelInit &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WebCore::RTCPeerConnection *v6;
  bmalloc::api *v8;
  void *v9;

  *(_QWORD *)this = &off_1E33603E8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WebCore::RTCPeerConnection *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    if (*((_DWORD *)v6 + 6) == 1)
    {
      WebCore::RTCPeerConnection::~RTCPeerConnection(v6, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*((_DWORD *)v6 + 6);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::newDataChannel(WTF::UniqueRef<WebCore::RTCDataChannelHandler> &&,WTF::String &&,WebCore::RTCDataChannelInit &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  WebCore::ScriptExecutionContext *v4;
  uint64_t v5;
  WebCore *v6;
  WebCore::EventTarget *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::ContextDestructionObserver *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  bmalloc::api *v18;
  void *v19;
  WebCore::ContextDestructionObserver *v20;
  uint64_t v21[4];

  v1 = *(_QWORD *)(result + 8);
  if (*(_DWORD *)(v1 + 80) != 5)
  {
    v2 = (_QWORD *)result;
    v3 = *(_QWORD *)(v1 + 40);
    if (v3)
    {
      v3 = *(_QWORD *)(v3 + 8);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 178))
        {
          result = 105;
          __break(0xC471u);
          return result;
        }
        v3 -= 288;
      }
    }
    v4 = (WebCore::ScriptExecutionContext *)(v3 + 192);
    v5 = v2[3];
    v2[3] = 0;
    v21[0] = v5;
    WebCore::RTCDataChannel::create(v4, v21, v2 + 2, v2 + 4, 1, &v20);
    v6 = (WebCore *)v21[0];
    if (v21[0])
      v6 = (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21[0] + 8))(v21[0]);
    v7 = (WebCore::EventTarget *)v2[1];
    v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
      v9 = WebCore::threadGlobalDataSlow(v6);
    v10 = *(_QWORD *)(v9 + 40);
    if (!v10)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
      v10 = *(_QWORD *)(v9 + 40);
    }
    v11 = v20;
    ++*((_DWORD *)v20 + 6);
    v12 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v12);
    *(_QWORD *)(v12 + 8) = 0;
    *(_DWORD *)(v12 + 16) = 1;
    *(_DWORD *)(v12 + 20) = *(_DWORD *)(v12 + 20) & 0xFFC00000 | 0x138200 | (*(_QWORD *)(v10 + 576) != 0);
    v14 = *(_DWORD **)(v10 + 576);
    if (v14)
      *v14 += 2;
    *(_QWORD *)(v12 + 24) = v14;
    *(_QWORD *)(v12 + 40) = 0;
    *(_QWORD *)(v12 + 48) = 0;
    *(_QWORD *)(v12 + 32) = 0;
    *(_QWORD *)(v12 + 56) = v13;
    *(_QWORD *)v12 = off_1E33608C0;
    *(_QWORD *)(v12 + 64) = 0;
    *(_QWORD *)(v12 + 72) = v11;
    v15 = *((_QWORD *)v7 + 11);
    v16 = *((_QWORD *)v7 + 12);
    v21[0] = (uint64_t)"RTCPeerConnection";
    v21[1] = 18;
    v21[2] = (uint64_t)"dispatchEvent";
    v21[3] = v16;
    if (*(_BYTE *)(v15 + 12) && WebCore::LogWebRTC && byte_1ECE7CD50 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [14],WTF::AtomString,char [2]>((uint64_t)&WebCore::LogWebRTC, 3u, (WTF::Logger::LogSiteIdentifier *)v21, "dispatching '", (WTF::StringImpl **)(v12 + 24), "'");
    WebCore::EventTarget::dispatchEvent(v7, (WebCore::Event *)v12);
    if (*(_DWORD *)(v12 + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    else
      --*(_DWORD *)(v12 + 16);
    result = (uint64_t)WebCore::RTCDataChannel::fireOpenEventIfNeeded(v11);
    if (*((_DWORD *)v11 + 6) == 1)
    {
      WebCore::RTCDataChannel::~RTCDataChannel(v11, v17);
      return bmalloc::api::isoDeallocate(v18, v19);
    }
    else
    {
      --*((_DWORD *)v11 + 6);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::generateCertificate(WebCore::Document &,WebCore::PeerConnectionBackend::CertificateInformation const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::RTCCertificate>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::RTCCertificate,WTF::RawPtrTraits<WebCore::RTCCertificate>,WTF::DefaultRefDerefTraits<WebCore::RTCCertificate>>> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E3360420;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::generateCertificate(WebCore::Document &,WebCore::PeerConnectionBackend::CertificateInformation const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::RTCCertificate>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::RTCCertificate,WTF::RawPtrTraits<WebCore::RTCCertificate>,WTF::DefaultRefDerefTraits<WebCore::RTCCertificate>>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3360420;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::PeerConnectionBackend::generateCertificate(WebCore::Document &,WebCore::PeerConnectionBackend::CertificateInformation const&,WebCore::DOMPromiseDeferred<WebCore::IDLInterface<WebCore::RTCCertificate>> &&)::$_0,void,WebCore::ExceptionOr<WTF::Ref<WebCore::RTCCertificate,WTF::RawPtrTraits<WebCore::RTCCertificate>,WTF::DefaultRefDerefTraits<WebCore::RTCCertificate>>> &&>::call(WTF::StringImpl *result, uint64_t a2)
{
  WebCore::RTCCertificate *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  int v8;
  unsigned __int8 v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  objc_class *v16;
  WTF *v17;
  void *v18;
  _QWORD *v19;
  int v21;
  int v22;
  unsigned __int8 v23[8];
  WTF::StringImpl *v24;
  objc_class *v25;

  v8 = *(_DWORD *)(a2 + 16);
  if (!v8)
  {
    v2 = *(WebCore::RTCCertificate **)a2;
    *(_QWORD *)a2 = 0;
    v3 = *((_QWORD *)result + 1);
    v13 = *(_QWORD *)(v3 + 24);
    if (!v13 || !*(_QWORD *)v13 || (*(_BYTE *)(v13 + 8) & 3) != 0)
    {
LABEL_20:
      v12 = *(_DWORD *)v2 - 1;
      if (*(_DWORD *)v2 == 1)
      {
        WebCore::RTCCertificate::~RTCCertificate(v2, (WTF::StringImpl *)a2);
        return (WTF::StringImpl *)WTF::fastFree(v17, v18);
      }
      goto LABEL_21;
    }
    v14 = *(_QWORD *)(v3 + 32);
    if (!v14 || (*(_BYTE *)(v14 + 8) & 3) != 0)
      v4 = 0;
    else
      v4 = *(uint64_t **)v14;
    v15 = v4[7];
    MEMORY[0x19AEA3294](v23, v15);
    v16 = (objc_class *)WebCore::wrap<WebCore::RTCCertificate>((uint64_t)v4, **(_QWORD **)(v3 + 32), v2);
    v5 = *(_QWORD *)(v15 + 16);
    if (!v5)
    {
      WebCore::DeferredPromise::callFunction(v3, v4, 0, v16);
      v5 = *(_QWORD *)(v15 + 16);
      if (!v5)
      {
LABEL_19:
        result = (WTF::StringImpl *)MEMORY[0x19AEA32A0](v23);
        goto LABEL_20;
      }
    }
    v19 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v4);
    if (!(*(unsigned int (**)(_QWORD *))(*v19 + 64))(v19))
      goto LABEL_27;
    v7 = v19[43];
    if (*(_QWORD *)(v15 + 24) == v5)
    {
LABEL_42:
      *(_BYTE *)(*(_QWORD *)(v7 + 8) + 93442) = 1;
      *(_BYTE *)(v3 + 44) = 1;
      goto LABEL_27;
    }
    if (!v7)
    {
LABEL_27:
      WebCore::reportException((JSC::JSGlobalObject *)v4, v5, 0, 0, 0);
      goto LABEL_19;
    }
    v6 = (unsigned __int8 *)(v7 + 40);
    if (__ldaxr((unsigned __int8 *)(v7 + 40)))
    {
      __clrex();
LABEL_35:
      MEMORY[0x19AEA534C](v6);
LABEL_36:
      v21 = *(unsigned __int8 *)(v7 + 41);
      v22 = __ldxr(v6);
      if (v22 == 1)
      {
        if (!__stlxr(0, v6))
        {
LABEL_41:
          if (v21)
            goto LABEL_42;
          goto LABEL_27;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v6);
      goto LABEL_41;
    }
LABEL_34:
    if (!__stxr(1u, v6))
      goto LABEL_36;
    goto LABEL_35;
  }
  if (v8 != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_34;
  }
  v9 = *(_BYTE *)a2;
  v2 = *(WebCore::RTCCertificate **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v10 = *((_QWORD *)result + 1);
  v25 = 0;
  v23[0] = v9;
  if (v2)
    *(_DWORD *)v2 += 2;
  v24 = v2;
  WebCore::DeferredPromise::reject(v10, v23, 0, &v25);
  result = v24;
  v24 = 0;
  if (!result)
  {
LABEL_8:
    if (!v2)
      return result;
    goto LABEL_9;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_8;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v11);
  if (v2)
  {
LABEL_9:
    v12 = *(_DWORD *)v2 - 2;
    if (*(_DWORD *)v2 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v2, v11);
LABEL_21:
    *(_DWORD *)v2 = v12;
  }
  return result;
}

uint64_t *WTF::Vector<WebCore::RTCController::PeerConnectionOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t *result, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF::StringImpl *v6;

  v2 = result;
  v3 = *((unsigned int *)result + 3);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)*result;
    v5 = 16 * v3;
    do
    {
      WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v4 + 1, a2);
      result = WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v4, v6);
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  *((_DWORD *)v2 + 3) = 0;
  return result;
}

BOOL _ZN3WTF9HashTableINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEES8_NS_17IdentityExtractorENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EESD_E8removeIfIZNS_11WeakHashSetINS2_17RTCPeerConnectionES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_(uint64_t *a1, void *a2)
{
  uint64_t v2;
  unsigned int v3;
  int v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  WTF *v10;
  _BOOL8 v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  double v22;
  double v23;
  double v24;
  unsigned int v25;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = *(_DWORD *)(v2 - 4);
  if (!v3)
    return 0;
  v5 = 0;
  do
  {
    while (1)
    {
      v6 = *(_QWORD *)(v2 + 8 * --v3);
      if ((unint64_t)(v6 + 1) >= 2 && !*(_QWORD *)(v6 + 8))
        break;
      if (!v3)
        goto LABEL_20;
    }
    *(_QWORD *)(v2 + 8 * v3) = 0;
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v9 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v9)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v9));
      v10 = *(WTF **)(v6 + 16);
      if (v10)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        WTF::fastFree(v10, a2);
      }
      WTF::fastFree((WTF *)v6, a2);
    }
    *(_QWORD *)(v2 + 8 * v3) = -1;
    ++v5;
  }
  while (v3);
LABEL_20:
  v13 = *a1;
  v11 = v5 != 0;
  if (v5)
  {
    *(_DWORD *)(v13 - 16) += v5;
    v14 = *a1;
    if (*a1)
      v15 = *(_DWORD *)(v14 - 12);
    else
      v15 = 0;
    *(_DWORD *)(v14 - 12) = v15 - v5;
    v13 = *a1;
  }
  if (v13)
  {
    v16 = *(_DWORD *)(v13 - 4);
    v17 = *(unsigned int *)(v13 - 12);
    if (6 * (int)v17 < v16 && v16 >= 9)
    {
      v19 = (v17 - 1) | ((v17 - 1) >> 1) | ((((_DWORD)v17 - 1) | ((v17 - 1) >> 1)) >> 2);
      v20 = v19 | (v19 >> 4) | ((v19 | (v19 >> 4)) >> 8);
      v21 = (v20 | HIWORD(v20)) + 1;
      if (v21 > 0x400)
      {
        if (v21 > 2 * v17)
          goto LABEL_36;
      }
      else if (3 * v21 > 4 * v17)
      {
LABEL_33:
        v22 = (double)v17;
        v23 = (double)v21;
        v24 = 0.604166667;
LABEL_37:
        if (v23 * v24 <= v22)
          LODWORD(v21) = 2 * v21;
        if (v21 <= 8)
          v25 = 8;
        else
          v25 = v21;
        WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::rehash(a1, v25, 0);
        return v11;
      }
      LODWORD(v21) = 2 * v21;
      if (v21 <= 0x400)
        goto LABEL_33;
LABEL_36:
      v22 = (double)v17;
      v23 = (double)v21;
      v24 = 0.416666667;
      goto LABEL_37;
    }
  }
  return v11;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::RTCNetworkManager,(WTF::DestructionThread)2>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) + 8))(*(_QWORD *)(a1 + 8) - 8);
}

unint64_t WTF::Vector<WebCore::RTCController::PeerConnectionOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    WTF::Vector<WebCore::RTCController::PeerConnectionOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    WTF::Vector<WebCore::RTCController::PeerConnectionOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::RTCController::PeerConnectionOrigin,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(v6 + 8) = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = (_QWORD *)result;
        v11 = (uint64_t *)((char *)v7 + 16 * v8);
        v12 = (uint64_t *)v7;
        v13 = (uint64_t *)v7;
        do
        {
          v14 = *v12;
          *v13 = 0;
          v13 += 2;
          *v10 = v14;
          v15 = v12[1];
          v12[1] = 0;
          v10[1] = v15;
          WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v12 + 1, v9);
          result = (uint64_t)WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(v12, v16);
          v10 += 2;
          v12 = v13;
        }
        while (v13 != v11);
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
        }
        return WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RTCController::startGatheringStatLogs(WebCore::RTCPeerConnection &)::$_0,void,WTF::String &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = &off_1E3360448;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v10 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v10)
      {
        v13 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v10));
        v3 = v13;
      }
      v11 = *(WTF **)(v3 + 16);
      if (v11)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v12 = v3;
        WTF::fastFree(v11, a2);
        v3 = v12;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCController::startGatheringStatLogs(WebCore::RTCPeerConnection &)::$_0,void,WTF::String &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)this = &off_1E3360448;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v10 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v10)
      {
        v13 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v10));
        v3 = v13;
      }
      v11 = *(WTF **)(v3 + 16);
      if (v11)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v12 = v3;
        WTF::fastFree(v11, a2);
        v3 = v12;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::RTCController::startGatheringStatLogs(WebCore::RTCPeerConnection &)::$_0,void,WTF::String &&>::call(WTF::StringImpl *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF *v7;
  WebCore::RTCPeerConnection *v8;
  WTF::StringImpl *v9;
  bmalloc::api *v10;
  void *v11;
  WebCore::RTCPeerConnection *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;

  v2 = *((_QWORD *)result + 1);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v5 = result;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v13 = 0;
      v6 = *((_QWORD *)v5 + 2);
      if (v6)
      {
        v6 = *(_QWORD *)(v6 + 8);
        if (v6)
          ++*(_DWORD *)(v6 + 24);
      }
      v12 = (WebCore::RTCPeerConnection *)v6;
      (*(void (**)(_QWORD, WTF::StringImpl **, uint64_t, WTF::StringImpl **, WebCore::RTCPeerConnection **))(**(_QWORD **)(v3 + 56) + 16))(*(_QWORD *)(v3 + 56), &v14, a2, &v13, &v12);
      v8 = v12;
      v12 = 0;
      if (v8)
      {
        if (*((_DWORD *)v8 + 6) == 1)
        {
          WebCore::RTCPeerConnection::~RTCPeerConnection(v8, v7);
          bmalloc::api::isoDeallocate(v10, v11);
        }
        else
        {
          --*((_DWORD *)v8 + 6);
        }
      }
      v9 = v13;
      v13 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v7);
        else
          *(_DWORD *)v9 -= 2;
      }
      result = v14;
      v14 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::RTCDTMFSender::*&)(void),WebCore::RTCDTMFSender*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCDTMFSender::RTCDTMFSender(WebCore::ScriptExecutionContext &,WebCore::RTCRtpSender &,std::unique_ptr<WebCore::RTCDTMFSenderBackend> &&)::$_0,void>::call(WTF::MonotonicTime *a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;

  v1 = *((_QWORD *)a1 + 1);
  v2 = v1 + 56;
  v3 = (double)*(unint64_t *)(v1 + 144) * 0.001;
  *(_QWORD *)(v1 + 80) = 0;
  WTF::MonotonicTime::now(a1);
  return WebCore::TimerBase::setNextFireTime(v2, v3 + v4);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RTCDTMFSender::insertDTMF(WTF::String const&,unsigned long,unsigned long)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WebCore::RTCDTMFSender *v3;
  bmalloc::api *v5;
  void *v6;

  *a1 = &off_1E33604D0;
  v3 = (WebCore::RTCDTMFSender *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 1)
    {
      WebCore::RTCDTMFSender::~RTCDTMFSender(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCDTMFSender::insertDTMF(WTF::String const&,unsigned long,unsigned long)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WebCore::RTCDTMFSender *v3;
  bmalloc::api *v5;
  void *v6;

  *(_QWORD *)this = &off_1E33604D0;
  v3 = (WebCore::RTCDTMFSender *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 1)
    {
      WebCore::RTCDTMFSender::~RTCDTMFSender(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*((_DWORD *)v3 + 6);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCDTMFSender::insertDTMF(WTF::String const&,unsigned long,unsigned long)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  return WebCore::RTCDTMFSender::playNextTone(*(_QWORD *)(a1 + 8));
}

uint64_t WebCore::RTCDTMFToneChangeEvent::create@<X0>(WebCore::RTCDTMFToneChangeEvent *this@<X0>, WebCore **a2@<X8>)
{
  WebCore *v5;
  WebCore *v6;
  uint64_t v7;
  WebCore *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unsigned int v12;
  _DWORD *v13;
  _DWORD *v14;

  v5 = (WebCore *)bmalloc::api::isoAllocate();
  v6 = v5;
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(WebCore **)(v7 + 96)) == 0)
  {
    v5 = (WebCore *)WebCore::threadGlobalDataSlow(v5);
    v8 = v5;
  }
  v9 = *((_QWORD *)v8 + 5);
  if (!v9)
  {
    v5 = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *((_QWORD *)v8 + 5);
  }
  result = WTF::MonotonicTime::now(v5);
  *((_QWORD *)v6 + 1) = 0;
  v12 = *((_DWORD *)v6 + 5) & 0xFFC00000 | 0x130200 | (*(_QWORD *)(v9 + 2064) != 0);
  *((_DWORD *)v6 + 4) = 1;
  *((_DWORD *)v6 + 5) = v12;
  v13 = *(_DWORD **)(v9 + 2064);
  if (v13)
    *v13 += 2;
  *((_QWORD *)v6 + 3) = v13;
  *((_QWORD *)v6 + 4) = 0;
  *((_QWORD *)v6 + 5) = 0;
  *((_QWORD *)v6 + 6) = 0;
  *((_QWORD *)v6 + 7) = v11;
  *((_QWORD *)v6 + 8) = 0;
  *(_QWORD *)v6 = off_1E3360688;
  v14 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    *v14 += 2;
  *((_QWORD *)v6 + 9) = v14;
  *a2 = v6;
  return result;
}

void WebCore::RTCDTMFToneChangeEvent::~RTCDTMFToneChangeEvent(WebCore::RTCDTMFToneChangeEvent *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::Event::~Event(this, a2);
}

{
  WTF::StringImpl *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t (***WebCore::RTCDataChannel::create@<X0>(WebCore::ScriptExecutionContext *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, char a5@<W4>, WebCore::ContextDestructionObserver **a6@<X8>))()
{
  uint64_t v12;
  WebCore::ContextDestructionObserver *v13;
  uint64_t (**v14)();
  uint64_t v15;
  int v16;
  uint64_t (***result)();
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (**v21)();
  uint64_t (***v22)();

  v12 = bmalloc::api::isoAllocate();
  v13 = WebCore::RTCDataChannel::RTCDataChannel((WebCore::ContextDestructionObserver *)v12, a1, a2, a3, a4, a5);
  *a6 = v13;
  WebCore::ActiveDOMObject::suspendIfNeeded(v13);
  v14 = (uint64_t (**)())WTF::fastMalloc((WTF *)0x10);
  *v14 = (uint64_t (*)())off_1E3360BF8;
  v14[1] = (uint64_t (*)())v12;
  v15 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v15 = 1;
  v16 = *(_DWORD *)(v12 + 24);
  *(_QWORD *)(v15 + 8) = v12;
  ++*(_QWORD *)(v12 + 16);
  *(_DWORD *)(v12 + 24) = v16 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = off_1E3360BD0;
  result[1] = (uint64_t (**)())v12;
  result[2] = (uint64_t (**)())v15;
  result[3] = v14;
  v22 = result;
  v18 = *(_QWORD *)(v12 + 8);
  if (!v18)
  {
    v22 = 0;
    v21 = off_1E3360BD0;
    return (uint64_t (***)())v21[1]();
  }
  v19 = *(_QWORD *)(v18 + 8);
  if (!v19)
  {
    v22 = 0;
    goto LABEL_6;
  }
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v19 - 96) + 104))(v19 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v20, 11, (uint64_t *)&v22);
  result = v22;
  v22 = 0;
  if (result)
  {
LABEL_6:
    v21 = *result;
    return (uint64_t (***)())v21[1]();
  }
  return result;
}

WebCore::ContextDestructionObserver *WebCore::RTCDataChannel::RTCDataChannel(WebCore::ContextDestructionObserver *this, WebCore::ScriptExecutionContext *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, char a6)
{
  WebCore::ScriptExecutionContext *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  _OWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD v32[3];
  char v33;
  WebCore::ContextDestructionObserver *v34;

  *((_DWORD *)this + 6) = 1;
  v12 = a2;
  if (!*((_BYTE *)a2 + 274))
  {
    v13 = (char *)a2 - 192;
    v14 = *((_QWORD *)a2 + 64);
    if (v14)
    {
      v15 = *(char **)(v14 + 8);
      if (v15)
        v13 = v15;
    }
    v12 = (WebCore::ScriptExecutionContext *)(v13 + 192);
  }
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v12);
  *(_QWORD *)this = &off_1E33A0540;
  *((_QWORD *)this + 2) = 0;
  if (*((_BYTE *)v12 + 278))
  {
    v16 = "/Library/Caches/com.apple.xbs/Sources/WebCore/Source/WebCore/dom/ScriptExecutionContext.cpp";
    v18 = 422;
    __break(0xC471u);
    goto LABEL_18;
  }
  v34 = this;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v12 + 16, (uint64_t *)&v34, (uint64_t)v32);
  *((_QWORD *)this + 5) = 0;
  v17 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v17 = 1;
  *(_QWORD *)(v17 + 8) = (char *)this + 32;
  v18 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v17;
  if (v18)
  {
    do
    {
      v19 = __ldaxr((unsigned int *)v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, (unsigned int *)v18));
    if (!v20)
      goto LABEL_19;
  }
  while (1)
  {
    *((_QWORD *)this + 7) = 0;
    *((_QWORD *)this + 8) = 0;
    *(_QWORD *)this = &off_1E3360750;
    *((_QWORD *)this + 4) = &unk_1E33607F8;
    *((_QWORD *)this + 6) = &unk_1E3360848;
    v21 = *a3;
    *a3 = 0;
    *((_QWORD *)this + 9) = v21;
    v22 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
    if (v22 != -1)
    {
      v32[0] = &v33;
      v34 = (WebCore::ContextDestructionObserver *)v32;
      std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v34, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
    }
    if ((WebCore::Process::globalIdentifier & 1) != 0)
      break;
LABEL_18:
    __break(1u);
LABEL_19:
    atomic_store(1u, (unsigned int *)v18);
    v18 = WTF::fastFree((WTF *)v18, v16);
  }
  *((_QWORD *)this + 10) = WebCore::Process::globalIdentifier;
  *((_QWORD *)this + 11) = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  v23 = (_OWORD *)((char *)this + 96);
  if (*((_BYTE *)a2 + 274))
  {
    v24 = *((_OWORD *)a2 + 15);
    *v23 = *((_OWORD *)a2 + 14);
    *((_OWORD *)this + 7) = v24;
  }
  else
  {
    *(_QWORD *)v23 = 0;
    *((_QWORD *)this + 13) = 0;
    *((_QWORD *)this + 14) = 0;
  }
  *((_BYTE *)this + 128) = 0;
  *((_BYTE *)this + 129) = a6;
  *((_BYTE *)this + 130) = 1;
  v25 = *a4;
  *a4 = 0;
  *((_QWORD *)this + 17) = v25;
  v26 = *a5;
  *((_BYTE *)this + 152) = *((_BYTE *)a5 + 8);
  *((_QWORD *)this + 18) = v26;
  v27 = a5[2];
  a5[2] = 0;
  *((_QWORD *)this + 20) = v27;
  LODWORD(v27) = *((_DWORD *)a5 + 6);
  *(_DWORD *)((char *)this + 171) = *(_DWORD *)((char *)a5 + 27);
  *((_DWORD *)this + 42) = v27;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_WORD *)this + 96) = 1;
  v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v28 = off_1E3360C20;
  v28[1] = this;
  v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v29 = off_1E3360C48;
  v29[1] = this;
  v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v30 = off_1E3360C70;
  v30[1] = this;
  *((_QWORD *)this + 25) = &off_1E33A18C0;
  *((_QWORD *)this + 26) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)((char *)this + 200), a2);
  *((_QWORD *)this + 25) = &off_1E33AEEE0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_QWORD *)this + 31) = v28;
  *((_QWORD *)this + 32) = v29;
  *((_QWORD *)this + 33) = v30;
  return this;
}

WTF *WebCore::RTCDataChannel::send@<X0>(WTF *this@<X0>, uint64_t a2@<X8>)
{
  WTF *v4;
  void *v5;
  WTF *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;

  if (*((_BYTE *)this + 129) != 1)
  {
    *(_BYTE *)a2 = 8;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 1;
    return this;
  }
  v4 = this;
  WTF::String::utf8();
  v6 = v13;
  if (v13)
    v7 = *((_QWORD *)v13 + 1);
  else
    v7 = 0;
  v8 = *((_QWORD *)v4 + 27);
  *((_QWORD *)v4 + 22) += v7;
  v9 = *((_QWORD *)v4 + 28);
  if (v8 != v9)
  {
    if (v8)
    {
      if (v9 + 1 != v8)
        goto LABEL_17;
    }
    else
    {
      v10 = *((unsigned int *)v4 + 60);
      if (v9)
      {
        if (v9 != v10 - 1)
          goto LABEL_17;
      }
      else if ((_DWORD)v10)
      {
        v9 = 0;
LABEL_17:
        v11 = *((_QWORD *)v4 + 29) + 16 * v9;
        v13 = 0;
        *(_QWORD *)v11 = v6;
        *(_DWORD *)(v11 + 8) = 0;
        if (v9 == *((unsigned int *)v4 + 60) - 1)
          v12 = 0;
        else
          v12 = v9 + 1;
        *((_QWORD *)v4 + 28) = v12;
        goto LABEL_21;
      }
    }
    WTF::Deque<std::variant<WTF::CString,WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>,WTF::UniqueRef<WebCore::BlobLoader>>,0ul>::expandCapacity((uint64_t)v4 + 216);
    v9 = *((_QWORD *)v4 + 28);
    v6 = v13;
    goto LABEL_17;
  }
  (*(void (**)(_QWORD, WTF **))(**((_QWORD **)v4 + 31) + 16))(*((_QWORD *)v4 + 31), &v13);
LABEL_21:
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  this = v13;
  v13 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 1)
      return (WTF *)WTF::fastFree(this, v5);
    else
      --*(_DWORD *)this;
  }
  return this;
}

uint64_t WebCore::RTCDataChannel::send@<X0>(uint64_t this@<X0>, JSC::ArrayBufferView *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)();
  WebCore::NetworkSendQueue *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  BOOL v24;
  int v25;
  unint64_t v26;
  _BOOL4 v27;
  int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  WTF *v38;
  WTF *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;

  if (*(_BYTE *)(this + 129) != 1)
  {
    *(_BYTE *)a3 = 8;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return this;
  }
  v4 = *((_QWORD *)a2 + 4);
  v5 = MEMORY[0x1E0CC10F8];
  if (v4)
  {
    v6 = *(_QWORD *)(v4 + 16);
    if (!v6)
      goto LABEL_64;
    v7 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v7 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v6 & 0x3FFFFFFFFLL) + v7))
      goto LABEL_64;
    v8 = *((_BYTE *)a2 + 6);
    if ((v8 & 3) == 0)
    {
      v4 = *((_QWORD *)a2 + 2);
      goto LABEL_9;
    }
    if (*(_BYTE *)(v4 + 64) && (v40 = *(_QWORD *)(v4 + 32)) != 0)
    {
      v21 = atomic_load((unint64_t *)(v40 + 32));
      v8 = *((_BYTE *)a2 + 6);
    }
    else
    {
      v21 = *(_QWORD *)(v4 + 48);
    }
    v22 = *((_QWORD *)a2 + 1);
    if ((v8 & 4) == 0)
    {
      v23 = *((_QWORD *)a2 + 2) + v22 <= v21 && v21 >= v22;
      if (v23)
        v4 = 0;
      else
        v4 = *((_QWORD *)a2 + 2);
      goto LABEL_9;
    }
    v23 = v21 >= v22;
    v32 = v21 - v22;
    if (v23)
    {
LABEL_64:
      v4 = 0;
      goto LABEL_9;
    }
    if ((*((_BYTE *)a2 + 4) - 4) > 7u)
      LOBYTE(v33) = 0;
    else
      v33 = qword_1968DEBE8[(char)(*((_BYTE *)a2 + 4) - 4)];
    v4 = (-1 << v33) & v32;
  }
LABEL_9:
  *(_QWORD *)(this + 176) += v4;
  v9 = *((_QWORD *)a2 + 4);
  v10 = *(_QWORD *)(v5 + 56);
  v11 = *(_QWORD *)(v9 + 16);
  *(_DWORD *)v9 += 2;
  v12 = *(_QWORD *)(v9 + 32);
  v13 = WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance;
  if (!v12)
    v13 = 0;
  if (v13)
  {
    __break(0xC471u);
    JUMPOUT(0x1954914B4);
  }
  v14 = (WebCore::NetworkSendQueue *)(this + 200);
  if (v10 && (*(_BYTE *)(v5 + 34) || !*MEMORY[0x1E0CC10F0]) && !((v11 & 0x3FFFFFFFFLL) + v10))
  {
    v16 = 0;
    goto LABEL_17;
  }
  v15 = *((unsigned __int8 *)a2 + 6);
  if ((v15 & 3) == 0)
  {
    v16 = *((_DWORD *)a2 + 2);
LABEL_17:
    v17 = v9;
    goto LABEL_18;
  }
  if (*(_BYTE *)(v9 + 64))
    v24 = v12 == 0;
  else
    v24 = 1;
  if (v24)
  {
    v42 = *(_QWORD *)(v9 + 48);
    v17 = v9;
  }
  else
  {
    v42 = atomic_load((unint64_t *)(v12 + 32));
    v15 = *((unsigned __int8 *)a2 + 6);
    v17 = *((_QWORD *)a2 + 4);
  }
  v25 = (v15 >> 2) & 1;
  v26 = *((_QWORD *)a2 + 1);
  v27 = v26 <= v42;
  if (*((_QWORD *)a2 + 2) + v26 <= v42)
    v28 = 1;
  else
    v28 = v25;
  if ((v27 & v28) != 0)
    v16 = 0;
  else
    v16 = *((_QWORD *)a2 + 1);
  if (!v17)
    goto LABEL_68;
  v11 = *(_QWORD *)(v17 + 16);
  if (!v11)
    goto LABEL_68;
LABEL_18:
  v18 = *(_QWORD *)(v5 + 56);
  if (v18 && (*(_BYTE *)(v5 + 34) || !*MEMORY[0x1E0CC10F0]) && !((v11 & 0x3FFFFFFFFLL) + v18))
  {
LABEL_68:
    LODWORD(v20) = 0;
    goto LABEL_23;
  }
  v19 = *((_BYTE *)a2 + 6);
  if ((v19 & 3) != 0)
  {
    if (*(_BYTE *)(v17 + 64) && (v41 = *(_QWORD *)(v17 + 32)) != 0)
    {
      v29 = atomic_load((unint64_t *)(v41 + 32));
      v19 = *((_BYTE *)a2 + 6);
    }
    else
    {
      v29 = *(_QWORD *)(v17 + 48);
    }
    v30 = *((_QWORD *)a2 + 1);
    if ((v19 & 4) == 0)
    {
      if (*((_QWORD *)a2 + 2) + v30 <= v29 && v29 >= v30)
        LODWORD(v20) = 0;
      else
        v20 = *((_QWORD *)a2 + 2);
      goto LABEL_23;
    }
    v34 = v29 - v30;
    if (v29 < v30)
    {
      if ((*((_BYTE *)a2 + 4) - 4) > 7u)
        LOBYTE(v35) = 0;
      else
        v35 = qword_1968DEBE8[(char)(*((_BYTE *)a2 + 4) - 4)];
      v20 = (-1 << v35) & v34;
      goto LABEL_23;
    }
    goto LABEL_68;
  }
  v20 = *((_QWORD *)a2 + 2);
LABEL_23:
  this = (uint64_t)WebCore::NetworkSendQueue::enqueue(v14, (const JSC::ArrayBuffer *)v9, v16, v20);
  v24 = *(_DWORD *)v9 == 2;
  *(_DWORD *)v9 -= 2;
  if (v24)
  {
    v36 = *(_QWORD *)(v9 + 80);
    if (v36)
    {
      *(_QWORD *)(v36 + 8) = 3;
      *(_QWORD *)(v9 + 80) = 0;
    }
    if ((*(_BYTE *)(v9 + 72) & 1) == 0)
      JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v9 + 72));
    JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v9 + 16));
    v38 = *(WTF **)(v9 + 8);
    if ((v38 & 1) == 0 && v38)
    {
      v39 = *(WTF **)v38;
      if (*(_QWORD *)v38)
      {
        *(_QWORD *)v38 = 0;
        *((_DWORD *)v38 + 2) = 0;
        WTF::fastFree(v39, v37);
      }
      WTF::fastFree(v38, v37);
    }
    this = WTF::fastFree((WTF *)v9, v37);
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return this;
}

BOOL WebCore::RTCDataChannel::virtualHasPendingActivity(WebCore::RTCDataChannel *this)
{
  return *((_BYTE *)this + 128) == 0;
}

uint64_t (***WebCore::RTCDataChannel::didChangeReadyState(uint64_t a1, char a2))()
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t (***result)();
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)();
  uint64_t (***v12)();

  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v4 = off_1E3360C98;
  *(_QWORD *)(v4 + 8) = a1;
  *(_BYTE *)(v4 + 16) = a2;
  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  v6 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v5 + 8) = a1;
  ++*(_QWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 24) = v6 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = off_1E3360BD0;
  result[1] = (uint64_t (**)())a1;
  result[2] = (uint64_t (**)())v5;
  result[3] = (uint64_t (**)())v4;
  v12 = result;
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
  {
    v12 = 0;
    v11 = off_1E3360BD0;
    return (uint64_t (***)())v11[1]();
  }
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
  {
    v12 = 0;
    goto LABEL_6;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 - 96) + 104))(v9 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v10, 11, (uint64_t *)&v12);
  result = v12;
  v12 = 0;
  if (result)
  {
LABEL_6:
    v11 = *result;
    return (uint64_t (***)())v11[1]();
  }
  return result;
}

uint64_t (***`non-virtual thunk to'WebCore::RTCDataChannel::didChangeReadyState(uint64_t a1, char a2))()
{
  uint64_t (**v4)();
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t (***result)();
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v12)();
  uint64_t (***v13)();

  v4 = (uint64_t (**)())(a1 - 32);
  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v5 = off_1E3360C98;
  *(_QWORD *)(v5 + 8) = v4;
  *(_BYTE *)(v5 + 16) = a2;
  v6 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  v7 = *(_DWORD *)(a1 - 8);
  *(_QWORD *)(v6 + 8) = v4;
  ++*(_QWORD *)(a1 - 16);
  *(_DWORD *)(a1 - 8) = v7 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = off_1E3360BD0;
  result[1] = v4;
  result[2] = (uint64_t (**)())v6;
  result[3] = (uint64_t (**)())v5;
  v13 = result;
  v9 = *(_QWORD *)(a1 - 24);
  if (!v9)
  {
    v13 = 0;
    v12 = off_1E3360BD0;
    return (uint64_t (***)())v12[1]();
  }
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
  {
    v13 = 0;
    goto LABEL_6;
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v10 - 96) + 104))(v10 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v11, 11, (uint64_t *)&v13);
  result = v13;
  v13 = 0;
  if (result)
  {
LABEL_6:
    v12 = *result;
    return (uint64_t (***)())v12[1]();
  }
  return result;
}

WTF::StringImpl *WebCore::RTCDataChannel::didReceiveStringData(WebCore::RTCDataChannel *this, const WTF::String *a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  void *v10;
  WTF *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  uint64_t *v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  _BYTE v18[8];
  int v19;
  char v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  _DWORD *v23;
  int v24;
  _DWORD *v25;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  v23 = v3;
  v24 = 2;
  v21 = 0;
  v22 = 0;
  v18[0] = 0;
  v20 = 0;
  v16 = 0;
  v17 = 0;
  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
    v5 = WebCore::threadGlobalDataSlow(this);
  v6 = *(_QWORD *)(v5 + 40);
  if (!v6)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
    v6 = *(_QWORD *)(v5 + 40);
  }
  v7 = (_QWORD *)(v6 + 1192);
  v8 = bmalloc::api::isoAllocate();
  v9 = (_DWORD *)WebCore::MessageEvent::MessageEvent(v8, v7, (uint64_t)&v23, (_DWORD **)&v22, (_DWORD **)&v21, (uint64_t)v18, (uint64_t *)&v16);
  v25 = v9;
  if (!*((_BYTE *)this + 128))
  {
    WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal(this, (uint64_t)this + 48, 11, (uint64_t *)&v25);
    v9 = v25;
  }
  if (v9)
  {
    if (v9[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[4];
  }
  if (HIDWORD(v17))
  {
    v14 = (uint64_t *)v16;
    v15 = 8 * HIDWORD(v17);
    do
    {
      v14 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v14, v10)+ 1;
      v15 -= 8;
    }
    while (v15);
  }
  v11 = v16;
  if (v16)
  {
    v16 = 0;
    LODWORD(v17) = 0;
    WTF::fastFree(v11, v10);
  }
  if (v20 && v19 != -1)
    ((void (*)(WTF **, _BYTE *))off_1E3360B60[v19])(&v16, v18);
  v12 = v21;
  v21 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = v22;
  v22 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v10);
    else
      *(_DWORD *)result -= 2;
  }
  if (v24 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(_BYTE *, _DWORD **))off_1E3360B78[v24])(v18, &v23);
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::RTCDataChannel::didReceiveStringData(WebCore::RTCDataChannel *this, const WTF::String *a2)
{
  return WebCore::RTCDataChannel::didReceiveStringData((WebCore::RTCDataChannel *)((char *)this - 32), a2);
}

uint64_t *WebCore::RTCDataChannel::didReceiveRawData(uint64_t *result, char *a2, WTF *this)
{
  WTF *v3;
  uint64_t v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  WTF *v13;
  void *v14;
  WTF *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  WebCore::ScriptExecutionContext *v20;
  WTF *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  WebCore *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _DWORD *v31;
  void *v32;
  WTF *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  _BYTE v42[8];
  int v43;
  char v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  _DWORD *v51;

  v3 = this;
  v5 = (uint64_t)result;
  if (*((_BYTE *)result + 130))
  {
    v6 = (WebCore *)JSC::ArrayBuffer::create();
    v7 = (uint64_t)v51;
    v51 = 0;
    v49 = v7;
    v50 = 4;
    v45 = 0;
    v46 = 0;
    v42[0] = 0;
    v44 = 0;
    v47 = 0;
    v48 = 0;
    v8 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v8 || (v9 = *(_QWORD *)(v8 + 96)) == 0)
      v9 = WebCore::threadGlobalDataSlow(v6);
    v10 = *(_QWORD *)(v9 + 40);
    if (!v10)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v9);
      v10 = *(_QWORD *)(v9 + 40);
    }
    v11 = (_QWORD *)(v10 + 1192);
    v12 = bmalloc::api::isoAllocate();
    v13 = (WTF *)WebCore::MessageEvent::MessageEvent(v12, v11, (uint64_t)&v49, (_DWORD **)&v46, (_DWORD **)&v45, (uint64_t)v42, (uint64_t *)&v47);
    v40 = v13;
    if (!*(_BYTE *)(v5 + 128))
    {
      WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)v5, v5 + 48, 11, (uint64_t *)&v40);
      v13 = v40;
    }
    if (v13)
    {
      if (*((_DWORD *)v13 + 4) == 1)
        (*(void (**)(WTF *))(*(_QWORD *)v13 + 8))(v13);
      else
        --*((_DWORD *)v13 + 4);
    }
    if (HIDWORD(v48))
    {
      v36 = (uint64_t *)v47;
      v37 = 8 * HIDWORD(v48);
      do
      {
        v36 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v36, v14)+ 1;
        v37 -= 8;
      }
      while (v37);
    }
    v15 = v47;
    if (v47)
    {
      v47 = 0;
      LODWORD(v48) = 0;
      WTF::fastFree(v15, v14);
    }
    if (v44 && v43 != -1)
      ((void (*)(WTF **, _BYTE *))off_1E3360B60[v43])(&v47, v42);
    v16 = v45;
    v45 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, (WTF::StringImpl *)v14);
      else
        *(_DWORD *)v16 -= 2;
    }
    v17 = v46;
    v46 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v14);
      else
        *(_DWORD *)v17 -= 2;
    }
    if (v50 != -1)
      ((void (*)(_BYTE *, uint64_t *))off_1E3360B78[v50])(v42, &v49);
    v50 = -1;
    return WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref((uint64_t *)&v51);
  }
  else
  {
    v18 = result[1];
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 8);
      if (v19)
        v20 = (WebCore::ScriptExecutionContext *)(v19 - 96);
      else
        v20 = 0;
    }
    else
    {
      v20 = 0;
    }
    v47 = 0;
    LODWORD(v48) = 0;
    HIDWORD(v48) = (_DWORD)this;
    if (this)
    {
      if ((unint64_t)this >> 32)
      {
        __break(0xC471u);
        return result;
      }
      v21 = (WTF *)WTF::fastMalloc(this);
      LODWORD(v48) = (_DWORD)v3;
      v47 = v21;
      do
      {
        v22 = *a2++;
        *(_BYTE *)v21 = v22;
        v21 = (WTF *)((char *)v21 + 1);
        v3 = (WTF *)((char *)v3 - 1);
      }
      while (v3);
    }
    v23 = bmalloc::api::isoAllocate();
    v24 = WebCore::Blob::Blob(v23, v20, (uint64_t)&v47, MEMORY[0x1E0CBF738]);
    v25 = (WebCore *)WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v24 + 24));
    v49 = v23;
    v50 = 3;
    v45 = 0;
    v46 = 0;
    v42[0] = 0;
    v44 = 0;
    v40 = 0;
    v41 = 0;
    v26 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v26 || (v27 = *(_QWORD *)(v26 + 96)) == 0)
      v27 = WebCore::threadGlobalDataSlow(v25);
    v28 = *(_QWORD *)(v27 + 40);
    if (!v28)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v27);
      v28 = *(_QWORD *)(v27 + 40);
    }
    v29 = (_QWORD *)(v28 + 1192);
    v30 = bmalloc::api::isoAllocate();
    v31 = (_DWORD *)WebCore::MessageEvent::MessageEvent(v30, v29, (uint64_t)&v49, (_DWORD **)&v46, (_DWORD **)&v45, (uint64_t)v42, (uint64_t *)&v40);
    v51 = v31;
    if (!*(_BYTE *)(v5 + 128))
    {
      WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)v5, v5 + 48, 11, (uint64_t *)&v51);
      v31 = v51;
    }
    if (v31)
    {
      if (v31[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 8))(v31);
      else
        --v31[4];
    }
    if (HIDWORD(v41))
    {
      v38 = (uint64_t *)v40;
      v39 = 8 * HIDWORD(v41);
      do
      {
        v38 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v38, v32)+ 1;
        v39 -= 8;
      }
      while (v39);
    }
    v33 = v40;
    if (v40)
    {
      v40 = 0;
      LODWORD(v41) = 0;
      WTF::fastFree(v33, v32);
    }
    if (v44 && v43 != -1)
      ((void (*)(WTF **, _BYTE *))off_1E3360B60[v43])(&v40, v42);
    v34 = v45;
    v45 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v32);
      else
        *(_DWORD *)v34 -= 2;
    }
    v35 = v46;
    v46 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v32);
      else
        *(_DWORD *)v35 -= 2;
    }
    if (v50 != -1)
      ((void (*)(_BYTE *, uint64_t *))off_1E3360B78[v50])(v42, &v49);
    v50 = -1;
    result = (uint64_t *)v47;
    if (v47)
      return (uint64_t *)WTF::fastFree(v47, v32);
  }
  return result;
}

uint64_t WebCore::RTCDataChannel::scriptExecutionContext(WebCore::RTCDataChannel *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t *`non-virtual thunk to'WebCore::RTCDataChannel::didReceiveRawData(uint64_t a1, char *a2, WTF *a3)
{
  return WebCore::RTCDataChannel::didReceiveRawData((uint64_t *)(a1 - 32), a2, a3);
}

_QWORD *WebCore::RTCDataChannel::didDetectError(WebCore *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _DWORD *v11;
  _QWORD *result;
  uint64_t v13;

  v4 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v4 || (v5 = *(_QWORD *)(v4 + 96)) == 0)
    v5 = WebCore::threadGlobalDataSlow(a1);
  v6 = *(_QWORD *)(v5 + 40);
  if (!v6)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v5);
    v6 = *(_QWORD *)(v5 + 40);
  }
  v7 = *a2;
  *a2 = 0;
  v8 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
  *(_QWORD *)(v8 + 8) = 0;
  v10 = *(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x140200 | (*(_QWORD *)(v6 + 784) != 0);
  *(_DWORD *)(v8 + 16) = 1;
  *(_DWORD *)(v8 + 20) = v10;
  v11 = *(_DWORD **)(v6 + 784);
  if (v11)
  {
    *v11 += 2;
    v10 = *(_DWORD *)(v8 + 20);
  }
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 24) = v11;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 56) = v9;
  *(_DWORD *)(v8 + 20) = v10 | 0x4000;
  *(_QWORD *)v8 = off_1E33613B0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = v7;
  v13 = v8;
  if (*((_BYTE *)a1 + 128))
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  result = WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal(a1, (uint64_t)a1 + 48, 11, &v13);
  v8 = v13;
  if (v13)
  {
    if (*(_DWORD *)(v13 + 16) == 1)
      return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    --*(_DWORD *)(v13 + 16);
  }
  return result;
}

_QWORD *`non-virtual thunk to'WebCore::RTCDataChannel::didDetectError(uint64_t a1, uint64_t *a2)
{
  return WebCore::RTCDataChannel::didDetectError((WebCore *)(a1 - 32), a2);
}

_QWORD *WebCore::RTCDataChannel::bufferedAmountIsDecreasing(WebCore::RTCDataChannel *this, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)();
  _QWORD *v12;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v4 = off_1E3360CC0;
  v4[1] = this;
  v4[2] = a2;
  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  v6 = *((_DWORD *)this + 6);
  *(_QWORD *)(v5 + 8) = this;
  ++*((_QWORD *)this + 2);
  *((_DWORD *)this + 6) = v6 + 2;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *result = off_1E3360BD0;
  result[1] = this;
  result[2] = v5;
  result[3] = v4;
  v12 = result;
  v8 = *((_QWORD *)this + 1);
  if (!v8)
  {
    v12 = 0;
    v11 = off_1E3360BD0;
    return (_QWORD *)v11[1]();
  }
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
  {
    v12 = 0;
    goto LABEL_6;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 - 96) + 104))(v9 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v10, 11, (uint64_t *)&v12);
  result = v12;
  v12 = 0;
  if (result)
  {
LABEL_6:
    v11 = (uint64_t (**)())*result;
    return (_QWORD *)v11[1]();
  }
  return result;
}

_QWORD *`non-virtual thunk to'WebCore::RTCDataChannel::bufferedAmountIsDecreasing(WebCore::RTCDataChannel *this, uint64_t a2)
{
  char *v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v12)();
  _QWORD *v13;

  v4 = (char *)this - 32;
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v5 = off_1E3360CC0;
  v5[1] = v4;
  v5[2] = a2;
  v6 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  v7 = *((_DWORD *)this - 2);
  *(_QWORD *)(v6 + 8) = v4;
  ++*((_QWORD *)this - 2);
  *((_DWORD *)this - 2) = v7 + 2;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *result = off_1E3360BD0;
  result[1] = v4;
  result[2] = v6;
  result[3] = v5;
  v13 = result;
  v9 = *((_QWORD *)this - 3);
  if (!v9)
  {
    v13 = 0;
    v12 = off_1E3360BD0;
    return (_QWORD *)v12[1]();
  }
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
  {
    v13 = 0;
    goto LABEL_6;
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v10 - 96) + 104))(v10 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v11, 11, (uint64_t *)&v13);
  result = v13;
  v13 = 0;
  if (result)
  {
LABEL_6:
    v12 = (uint64_t (**)())*result;
    return (_QWORD *)v12[1]();
  }
  return result;
}

uint64_t WebCore::RTCDataChannel::stop(WebCore::RTCDataChannel *this, void *a2)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  char v24;
  char **v25;
  char *v26;

  if (!*((_BYTE *)this + 193))
    goto LABEL_33;
  if (__ldaxr(_MergedGlobals_143))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](_MergedGlobals_143);
    goto LABEL_6;
  }
  if (__stxr(1u, _MergedGlobals_143))
    goto LABEL_5;
LABEL_6:
  v4 = atomic_load(&qword_1ECE82088);
  if (v4 != -1)
  {
    v26 = &v24;
    v25 = &v26;
    std::__call_once(&qword_1ECE82088, &v25, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::rtcDataChannelLocalMap(void)::$_0 &&>>);
  }
  if (qword_1ECE82080)
  {
    v5 = *((_QWORD *)this + 11);
    v6 = *(_DWORD *)(qword_1ECE82080 - 8);
    v7 = (v5 + ~(v5 << 32)) ^ ((unint64_t)(v5 + ~(v5 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(_QWORD *)(qword_1ECE82080 + 16 * v10);
    if (v11 != v5)
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(_QWORD *)(qword_1ECE82080 + 16 * v10);
        ++v12;
        if (v11 == v5)
          goto LABEL_15;
      }
      v10 = *(unsigned int *)(qword_1ECE82080 - 4);
    }
LABEL_15:
    if (v10 != *(_DWORD *)(qword_1ECE82080 - 4))
    {
      v13 = (_QWORD *)(qword_1ECE82080 + 16 * v10);
      v14 = v13[1];
      *v13 = -1;
      v13[1] = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      v15 = qword_1ECE82080;
      ++*(_DWORD *)(qword_1ECE82080 - 16);
      if (v15)
        v16 = *(_DWORD *)(v15 - 12) - 1;
      else
        v16 = -1;
      *(_DWORD *)(v15 - 12) = v16;
      if (qword_1ECE82080)
      {
        v17 = *(_DWORD *)(qword_1ECE82080 - 4);
        if (6 * *(_DWORD *)(qword_1ECE82080 - 12) < v17 && v17 >= 9)
          WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::RTCDataChannelHandler>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::RTCDataChannelHandler>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::RTCDataChannelHandler>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::RTCDataChannelHandler>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v17 >> 1);
      }
    }
  }
  v19 = __ldxr(_MergedGlobals_143);
  if (v19 == 1)
  {
    if (!__stlxr(0, _MergedGlobals_143))
      goto LABEL_33;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)_MergedGlobals_143);
LABEL_33:
  if (!*((_BYTE *)this + 172))
  {
    v20 = *((_QWORD *)this + 9);
    if (v20)
    {
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 48))(v20);
      *((_WORD *)this + 85) = v21;
      *((_BYTE *)this + 172) = BYTE2(v21);
    }
  }
  if (!*((_BYTE *)this + 128) && (*((_BYTE *)this + 129) & 0xFE) != 2)
  {
    *((_BYTE *)this + 129) = 2;
    WebCore::NetworkSendQueue::clear((uint64_t)this + 200, a2);
    v22 = *((_QWORD *)this + 9);
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
  }
  *((_BYTE *)this + 128) = 1;
  result = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

BOOL WebCore::RTCDataChannel::canDetach(WebCore::RTCDataChannel *this)
{
  return *((_BYTE *)this + 192) && !*((_BYTE *)this + 193) && !*((_QWORD *)this + 22) && *((_BYTE *)this + 129) != 3;
}

WTF::StringImpl *WebCore::RTCDataChannel::detach@<X0>(WebCore::RTCDataChannel *this@<X0>, uint64_t *a2@<X8>)
{
  char v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  _DWORD *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  int v33;
  WTF::StringImpl *result;
  int v35;
  uint64_t v36;
  WTF::StringImpl **v37;
  char v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;

  v4 = *((_BYTE *)this + 129);
  *((_WORD *)this + 96) = 256;
  *((_BYTE *)this + 129) = 3;
  if (__ldaxr(_MergedGlobals_143))
  {
    __clrex();
  }
  else if (!__stxr(1u, _MergedGlobals_143))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](_MergedGlobals_143);
LABEL_5:
  v6 = atomic_load(&qword_1ECE82088);
  if (v6 != -1)
  {
    v37 = &v39;
    v40 = (WTF::StringImpl *)&v37;
    std::__call_once(&qword_1ECE82088, &v40, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::rtcDataChannelLocalMap(void)::$_0 &&>>);
  }
  v7 = *((_QWORD *)this + 11);
  v8 = qword_1ECE82080;
  if (qword_1ECE82080
    || (WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::RTCDataChannelHandler>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::RTCDataChannelHandler>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::RTCDataChannelHandler>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::RTCDataChannelHandler>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(8u),
        (v8 = qword_1ECE82080) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (v7 + ~(v7 << 32)) ^ ((unint64_t)(v7 + ~(v7 << 32)) >> 22);
  v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v9 & ((v12 >> 31) ^ v12);
  v14 = (_QWORD *)(v8 + 16 * v13);
  v15 = *v14;
  if (!*v14)
  {
LABEL_18:
    *v14 = v7;
    v18 = *((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    v19 = v14[1];
    v14[1] = v18;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    if (qword_1ECE82080)
      v20 = *(_DWORD *)(qword_1ECE82080 - 12) + 1;
    else
      v20 = 1;
    *(_DWORD *)(qword_1ECE82080 - 12) = v20;
    if (qword_1ECE82080)
      v21 = *(_DWORD *)(qword_1ECE82080 - 12);
    else
      v21 = 0;
    v22 = (*(_DWORD *)(qword_1ECE82080 - 16) + v21);
    v23 = *(unsigned int *)(qword_1ECE82080 - 4);
    if (v23 > 0x400)
    {
      if (v23 > 2 * v22)
        goto LABEL_33;
    }
    else
    {
      if (3 * v23 > 4 * v22)
        goto LABEL_33;
      if (!(_DWORD)v23)
      {
        v24 = 8;
        goto LABEL_32;
      }
    }
    v24 = (_DWORD)v23 << (6 * *(_DWORD *)(qword_1ECE82080 - 12) >= (2 * v23));
LABEL_32:
    WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::RTCDataChannelHandler>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::RTCDataChannelHandler>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::RTCDataChannelHandler>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::RTCDataChannelHandler>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v24);
    goto LABEL_33;
  }
  v16 = 0;
  v17 = 1;
  while (v15 != v7)
  {
    if (v15 == -1)
      v16 = v14;
    v13 = (v13 + v17) & v9;
    v14 = (_QWORD *)(v8 + 16 * v13);
    v15 = *v14;
    ++v17;
    if (!*v14)
    {
      if (v16)
      {
        *v16 = 0;
        v16[1] = 0;
        --*(_DWORD *)(v8 - 16);
        v14 = v16;
      }
      goto LABEL_18;
    }
  }
LABEL_33:
  v25 = *((_QWORD *)this + 10);
  v26 = *((_QWORD *)this + 11);
  v27 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  if (v27)
    *(_DWORD *)v27 += 2;
  v39 = v27;
  v37 = (WTF::StringImpl **)*((_QWORD *)this + 18);
  v38 = *((_BYTE *)this + 152);
  v28 = (_DWORD *)*((_QWORD *)this + 20);
  if (v28)
    *v28 += 2;
  LODWORD(v36) = *((_DWORD *)this + 42);
  *(_DWORD *)((char *)&v36 + 3) = *(_DWORD *)((char *)this + 171);
  v29 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v29 = v25;
  *(_QWORD *)(v29 + 8) = v26;
  WTF::String::isolatedCopy();
  *(_QWORD *)(v29 + 24) = v37;
  *(_BYTE *)(v29 + 32) = v38;
  *(_QWORD *)(v29 + 40) = v28;
  *(_DWORD *)(v29 + 48) = v36;
  *(_DWORD *)(v29 + 51) = *(_DWORD *)((char *)&v36 + 3);
  WTF::String::isolatedCopy();
  v31 = v40;
  v40 = 0;
  v32 = *(WTF::StringImpl **)(v29 + 40);
  *(_QWORD *)(v29 + 40) = v31;
  if (v32)
  {
    v33 = *(_DWORD *)v32 - 2;
    if (*(_DWORD *)v32 != 2)
    {
LABEL_39:
      *(_DWORD *)v32 = v33;
      goto LABEL_40;
    }
    WTF::StringImpl::destroy(v32, v30);
    v32 = v40;
    v40 = 0;
    if (v32)
    {
      v33 = *(_DWORD *)v32 - 2;
      if (*(_DWORD *)v32 != 2)
        goto LABEL_39;
      WTF::StringImpl::destroy(v32, v30);
    }
  }
LABEL_40:
  *(_BYTE *)(v29 + 56) = v4;
  *a2 = v29;
  result = v39;
  v39 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v30);
    else
      *(_DWORD *)result -= 2;
  }
  v35 = __ldxr(_MergedGlobals_143);
  if (v35 == 1)
  {
    if (!__stlxr(0, _MergedGlobals_143))
      return result;
  }
  else
  {
    __clrex();
  }
  return (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)_MergedGlobals_143);
}

_DWORD *WebCore::RTCDataChannel::handlerFromIdentifier@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  unint64_t v5;
  _DWORD *result;
  int v7;
  char v8;
  char **v9;
  char *v10;

  if (__ldaxr(_MergedGlobals_143))
  {
    __clrex();
  }
  else if (!__stxr(1u, _MergedGlobals_143))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](_MergedGlobals_143);
LABEL_5:
  v5 = atomic_load(&qword_1ECE82088);
  if (v5 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(&qword_1ECE82088, &v9, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::rtcDataChannelLocalMap(void)::$_0 &&>>);
  }
  result = WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::RTCDataChannelHandler>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::RTCDataChannelHandler>>,WTF::HashTableTraits>::take(a2, a1);
  v7 = __ldxr(_MergedGlobals_143);
  if (v7 != 1)
  {
    __clrex();
    return (_DWORD *)WTF::Lock::unlockSlow((WTF::Lock *)_MergedGlobals_143);
  }
  if (__stlxr(0, _MergedGlobals_143))
    return (_DWORD *)WTF::Lock::unlockSlow((WTF::Lock *)_MergedGlobals_143);
  return result;
}

_DWORD *WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::RTCDataChannelHandler>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::RTCDataChannelHandler>>,WTF::HashTableTraits>::take(_DWORD *result, uint64_t a2)
{
  unsigned int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int v14;

  if (!qword_1ECE82080)
    goto LABEL_9;
  v2 = *(_DWORD *)(qword_1ECE82080 - 8);
  v3 = (~(a2 << 32) + a2) ^ ((unint64_t)(~(a2 << 32) + a2) >> 22);
  v4 = 9 * ((v3 + ~(v3 << 13)) ^ ((v3 + ~(v3 << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  v6 = v2 & ((v5 >> 31) ^ v5);
  v7 = *(_QWORD *)(qword_1ECE82080 + 16 * v6);
  if (v7 != a2)
  {
    v8 = 1;
    while (v7)
    {
      v6 = ((_DWORD)v6 + v8) & v2;
      v7 = *(_QWORD *)(qword_1ECE82080 + 16 * v6);
      ++v8;
      if (v7 == a2)
        goto LABEL_8;
    }
    v6 = *(unsigned int *)(qword_1ECE82080 - 4);
  }
LABEL_8:
  if (v6 != *(_DWORD *)(qword_1ECE82080 - 4))
  {
    v9 = (_QWORD *)(qword_1ECE82080 + 16 * v6);
    v10 = v9[1];
    v9[1] = 0;
    *(_QWORD *)result = v10;
    v11 = qword_1ECE82080;
    if (!qword_1ECE82080
      || (v11 = qword_1ECE82080 + 16 * *(unsigned int *)(qword_1ECE82080 - 4), (_QWORD *)v11 != v9))
    {
      if ((_QWORD *)v11 != v9)
      {
        *v9 = -1;
        v9[1] = 0;
        v12 = qword_1ECE82080;
        ++*(_DWORD *)(qword_1ECE82080 - 16);
        v13 = v12 ? *(_DWORD *)(v12 - 12) - 1 : -1;
        *(_DWORD *)(v12 - 12) = v13;
        if (qword_1ECE82080)
        {
          v14 = *(_DWORD *)(qword_1ECE82080 - 4);
          if (6 * *(_DWORD *)(qword_1ECE82080 - 12) < v14 && v14 >= 9)
            return WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::RTCDataChannelHandler>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::RTCDataChannelHandler>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::RTCDataChannelHandler>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::RTCDataChannelHandler>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(v14 >> 1);
        }
      }
    }
  }
  else
  {
LABEL_9:
    *(_QWORD *)result = 0;
  }
  return result;
}

WTF *WebCore::RTCDataChannel::fireOpenEventIfNeeded(WTF *this)
{
  WTF *v1;
  uint64_t v2;
  uint64_t v3;
  WebCore::EventTarget *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _BOOL4 v9;
  _DWORD *v10;

  if ((*((_BYTE *)this + 129) & 0xFE) != 2)
  {
    v1 = this;
    v2 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v2 || (v3 = *(_QWORD *)(v2 + 96)) == 0)
      v3 = WebCore::threadGlobalDataSlow(this);
    v4 = (WTF *)((char *)v1 + 48);
    v5 = *(_QWORD *)(v3 + 40);
    if (!v5)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v3);
      v5 = *(_QWORD *)(v3 + 40);
    }
    v6 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v6);
    *(_QWORD *)v6 = off_1E33A4B48;
    *(_QWORD *)(v6 + 8) = 0;
    v8 = *(_DWORD *)(v6 + 20) & 0xFFC00000 | 0x1E8200;
    v9 = *(_QWORD *)(v5 + 1376) != 0;
    *(_DWORD *)(v6 + 16) = 1;
    *(_DWORD *)(v6 + 20) = v8 | v9;
    v10 = *(_DWORD **)(v5 + 1376);
    if (v10)
      *v10 += 2;
    *(_QWORD *)(v6 + 24) = v10;
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = 0;
    *(_QWORD *)(v6 + 48) = 0;
    *(_QWORD *)(v6 + 56) = v7;
    *(_QWORD *)(v6 + 64) = 0;
    this = WebCore::EventTarget::dispatchEvent(v4, (WebCore::Event *)v6);
    if (*(_DWORD *)(v6 + 16) == 1)
      return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    else
      --*(_DWORD *)(v6 + 16);
  }
  return this;
}

uint64_t WebCore::RTCDataChannel::create@<X0>(WebCore::ScriptExecutionContext *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, int a6@<W5>, WebCore::ContextDestructionObserver **a7@<X8>)
{
  unint64_t v14;
  char **v16;
  uint64_t v17;
  char **v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  WebCore::ContextDestructionObserver *v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (**v35)();
  uint64_t result;
  _BYTE *v37;
  char v38;
  char **v39;
  char *v40;

  v37 = 0;
  v14 = atomic_load(&WebCore::Process::identifier(void)::onceFlag);
  if (v14 != -1)
  {
    v40 = &v38;
    v39 = &v40;
    std::__call_once(&WebCore::Process::identifier(void)::onceFlag, &v39, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::Process::identifier(void)::$_0 &&>>);
  }
  if ((WebCore::Process::globalIdentifier & 1) == 0)
  {
    __break(1u);
    goto LABEL_44;
  }
  if (a2 == WebCore::Process::globalIdentifier)
  {
    if (__ldaxr(_MergedGlobals_143))
    {
      __clrex();
    }
    else if (!__stxr(1u, _MergedGlobals_143))
    {
      goto LABEL_16;
    }
    MEMORY[0x19AEA534C](_MergedGlobals_143);
LABEL_16:
    v24 = atomic_load(&qword_1ECE82088);
    if (v24 != -1)
    {
      v40 = &v38;
      v39 = &v40;
      std::__call_once(&qword_1ECE82088, &v39, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::rtcDataChannelLocalMap(void)::$_0 &&>>);
    }
    WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::RTCDataChannelHandler>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::RTCDataChannelHandler>>,WTF::HashTableTraits>::take(&v40, a3);
    v25 = __ldxr(_MergedGlobals_143);
    if (v25 == 1)
    {
      if (!__stlxr(0, _MergedGlobals_143))
      {
LABEL_23:
        v37 = v40;
        if (v40)
        {
          WebCore::RTCDataChannel::create(a1, (uint64_t *)&v37, a4, a5, a6, a7);
          goto LABEL_30;
        }
        goto LABEL_35;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)_MergedGlobals_143);
    goto LABEL_23;
  }
  (*(void (**)(char ***__return_ptr, WebCore::ScriptExecutionContext *))(*(_QWORD *)a1 + 224))(&v39, a1);
  v16 = v39;
  if (v39)
  {
    v39 = 0;
    v17 = WTF::fastMalloc((WTF *)0x58);
    *(_QWORD *)v17 = off_1E3360988;
    *(_QWORD *)(v17 + 8) = 0;
    *(_QWORD *)(v17 + 16) = a2;
    *(_QWORD *)(v17 + 24) = a3;
    *(_QWORD *)(v17 + 32) = 0;
    *(_QWORD *)(v17 + 40) = 0;
    *(_QWORD *)(v17 + 48) = 0;
    *(_QWORD *)(v17 + 56) = v16;
    *(_QWORD *)(v17 + 64) = 0;
    *(_QWORD *)(v17 + 72) = 0;
    *(_WORD *)(v17 + 80) = 0;
    v18 = v39;
    v39 = 0;
    if (v18)
    {
      v19 = (unsigned int *)(v18 + 1);
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
      {
        atomic_store(1u, v19);
        v22 = (char *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v22 = off_1E3360CE8;
        *((_QWORD *)v22 + 1) = v19;
        v40 = v22;
        WTF::ensureOnMainThread();
        v23 = (uint64_t)v40;
        v40 = 0;
        if (v23)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      }
    }
  }
  else
  {
    v17 = 0;
  }
  v26 = (uint64_t)v37;
  v37 = (_BYTE *)v17;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  if (v17)
  {
    WebCore::RTCDataChannel::create(a1, (uint64_t *)&v37, a4, a5, a6, a7);
    *(_OWORD *)(v17 + 32) = *((_OWORD *)*a7 + 5);
LABEL_30:
    if (a6 != 1)
      goto LABEL_40;
    v27 = *a7;
    v28 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v28 = off_1E3360D10;
    v28[1] = v27;
    v29 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v29 = 1;
    v30 = *((_DWORD *)v27 + 6);
    *(_QWORD *)(v29 + 8) = v27;
    ++*((_QWORD *)v27 + 2);
    *((_DWORD *)v27 + 6) = v30 + 2;
    v31 = (char *)WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v31 = off_1E3360BD0;
    *((_QWORD *)v31 + 1) = v27;
    *((_QWORD *)v31 + 2) = v29;
    *((_QWORD *)v31 + 3) = v28;
    v40 = v31;
    v32 = *((_QWORD *)v27 + 1);
    if (v32)
    {
      v33 = *(_QWORD *)(v32 + 8);
      if (v33)
      {
        v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v33 - 96) + 104))(v33 - 96);
        WebCore::EventLoopTaskGroup::queueTask(v34, 11, (uint64_t *)&v40);
        v31 = v40;
        v40 = 0;
        if (!v31)
          goto LABEL_40;
      }
      else
      {
        v40 = 0;
      }
      goto LABEL_38;
    }
LABEL_44:
    v40 = 0;
    v35 = off_1E3360BD0;
    goto LABEL_39;
  }
LABEL_35:
  v40 = 0;
  WebCore::RTCDataChannel::create(a1, (uint64_t *)&v40, a4, a5, 3, a7);
  v31 = v40;
  if (v40)
  {
LABEL_38:
    v35 = *(uint64_t (***)())v31;
LABEL_39:
    v35[1]();
  }
LABEL_40:
  result = (uint64_t)v37;
  if (v37)
    return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v37 + 8))(v37);
  return result;
}

void WebCore::RTCDataChannelRemoteHandler::~RTCDataChannelRemoteHandler(WebCore::RTCDataChannelRemoteHandler *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  WTF *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;

  v3 = *((unsigned int *)this + 19);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = (uint64_t *)(*((_QWORD *)this + 8) + 8);
    do
    {
      v5 = WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(v5, a2)+ 2;
      v4 -= 16;
    }
    while (v4);
  }
  v6 = (WTF *)*((_QWORD *)this + 8);
  if (v6)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v15 = off_1E3360CE8;
      v15[1] = v8;
      v16 = v15;
      WTF::ensureOnMainThread();
      if (v16)
        (*(void (**)(_QWORD *))(*v16 + 8))(v16);
    }
  }
  v11 = *((_QWORD *)this + 1);
  if (v11)
  {
    *(_QWORD *)(v11 + 8) = 0;
    v12 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v12)
    {
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
      {
        atomic_store(1u, v12);
        WTF::fastFree((WTF *)v12, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::RTCDataChannelRemoteHandler::~RTCDataChannelRemoteHandler(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::RTCDataChannelRemoteHandler::didChangeReadyState(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
}

uint64_t WebCore::RTCDataChannelRemoteHandler::didReceiveStringData(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48));
}

uint64_t WebCore::RTCDataChannelRemoteHandler::didReceiveRawData(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48));
}

uint64_t WebCore::RTCDataChannelRemoteHandler::didDetectError(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48));
}

uint64_t WebCore::RTCDataChannelRemoteHandler::bufferedAmountIsDecreasing(WebCore::RTCDataChannelRemoteHandler *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 48))(*((_QWORD *)this + 6));
}

uint64_t WebCore::RTCDataChannelRemoteHandler::readyToSend(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  char v22;
  char *v23;

  v2 = this;
  *(_BYTE *)(this + 81) = 1;
  v3 = *(unsigned int *)(this + 76);
  if ((_DWORD)v3)
  {
    v4 = *(WTF ***)(this + 64);
    v5 = (unsigned __int8 *)&v4[2 * v3];
    do
    {
      v6 = *(_QWORD *)(v2 + 56);
      v7 = *(_QWORD *)(v2 + 16);
      v8 = *(_QWORD *)(v2 + 24);
      v9 = *(unsigned __int8 *)v4;
      WebCore::FragmentedSharedBuffer::makeContiguous(v4[1], &v21);
      v10 = v21;
      if (*(_DWORD *)(v21 + 20))
      {
        v11 = *(_QWORD *)(*(_QWORD *)(v21 + 8) + 8);
        v12 = *(unsigned int *)(v11 + 24);
        if ((_DWORD)v12 == -1)
        {
          v18 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
          return WebCore::RTCDataChannelRemoteHandler::setClient(v18, v19, v20);
        }
        v23 = &v22;
        v13 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v12])(&v23, v11 + 8);
      }
      else
      {
        v13 = 0;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, BOOL, uint64_t, _QWORD))(*(_QWORD *)v6 + 24))(v6, v7, v8, v9 != 0, v13, *(_QWORD *)(v10 + 48));
      this = (uint64_t)WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v21, v14);
      v4 += 2;
    }
    while (v4 != (WTF **)v5);
  }
  if (*(_DWORD *)(v2 + 72))
  {
    v15 = *(unsigned int *)(v2 + 76);
    this = *(_QWORD *)(v2 + 64);
    if ((_DWORD)v15)
    {
      v16 = 16 * v15;
      v17 = (uint64_t *)(this + 8);
      do
      {
        v17 = WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(v17, a2)+ 2;
        v16 -= 16;
      }
      while (v16);
      *(_DWORD *)(v2 + 76) = 0;
      this = *(_QWORD *)(v2 + 64);
    }
    if (this)
    {
      *(_QWORD *)(v2 + 64) = 0;
      *(_DWORD *)(v2 + 72) = 0;
      this = WTF::fastFree((WTF *)this, a2);
    }
  }
  if (*(_BYTE *)(v2 + 80))
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(v2 + 56) + 32))(*(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
  return this;
}

uint64_t WebCore::RTCDataChannelRemoteHandler::setClient(_QWORD *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v4;
  __int128 v5;
  _OWORD v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  a1[6] = a2;
  v4 = a1[7];
  v5 = a3[1];
  v7[0] = *a3;
  v7[1] = v5;
  return (*(uint64_t (**)(uint64_t, _QWORD *, _OWORD *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v4 + 16))(v4, a1, v7, a1[4], a1[5], a1[2], a1[3]);
}

uint64_t WebCore::RTCDataChannelRemoteHandler::sendStringData(WebCore::RTCDataChannelRemoteHandler *this, const WTF::CString *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _BYTE v22[8];
  uint64_t v23;
  uint64_t v24;

  if (*((_BYTE *)this + 81))
  {
    v3 = *((_QWORD *)this + 7);
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      v5 = v4 + 16;
      v6 = *(_QWORD *)(v4 + 8);
    }
    else
    {
      v6 = 0;
      v5 = 0;
    }
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v3 + 24))(v3, *((_QWORD *)this + 2), *((_QWORD *)this + 3), 0, v5, v6);
  }
  else
  {
    v22[0] = 0;
    v7 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
    {
      v8 = (WTF *)(v7 + 16);
      v9 = *(WTF **)(v7 + 8);
    }
    else
    {
      v9 = 0;
      v8 = 0;
    }
    v10 = (_QWORD *)((char *)this + 64);
    v11 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v11 = 1;
    *(_QWORD *)(v11 + 8) = v11 + 24;
    *(_QWORD *)(v11 + 16) = 1;
    *(_BYTE *)(v11 + 40) = 0;
    *(_QWORD *)(v11 + 48) = 0;
    WebCore::FragmentedSharedBuffer::append(v11, v8, v9);
    v24 = v11;
    v12 = WTF::fastMalloc((WTF *)0x38);
    WebCore::SharedBuffer::SharedBuffer(v12, &v24);
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v24, v13);
    v23 = v12;
    v24 = 0;
    v15 = *((unsigned int *)this + 19);
    if ((_DWORD)v15 == *((_DWORD *)this + 18))
    {
      v16 = WTF::Vector<WebCore::RTCDataChannelRemoteHandler::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 64, v15 + 1, (unint64_t)v22);
      v15 = *((unsigned int *)this + 19);
      v17 = *((_QWORD *)this + 8) + 16 * v15;
      *(_BYTE *)v17 = *v16;
      v18 = *((_QWORD *)v16 + 1);
      *((_QWORD *)v16 + 1) = 0;
      *(_QWORD *)(v17 + 8) = v18;
    }
    else
    {
      v19 = *v10 + 16 * v15;
      *(_BYTE *)v19 = 0;
      v23 = 0;
      *(_QWORD *)(v19 + 8) = v12;
    }
    *((_DWORD *)this + 19) = v15 + 1;
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v23, v14);
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v24, v20);
  }
  return 1;
}

uint64_t WebCore::RTCDataChannelRemoteHandler::sendRawData(uint64_t a1, WTF *a2, WTF *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  char v18[8];
  uint64_t v19;
  uint64_t v20;

  if (*(_BYTE *)(a1 + 81))
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t, WTF *, WTF *))(**(_QWORD **)(a1 + 56) + 24))(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 1, a2, a3);
  }
  else
  {
    v6 = (_QWORD *)(a1 + 64);
    v18[0] = 1;
    v7 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 8) = v7 + 24;
    *(_QWORD *)(v7 + 16) = 1;
    *(_BYTE *)(v7 + 40) = 0;
    *(_QWORD *)(v7 + 48) = 0;
    WebCore::FragmentedSharedBuffer::append(v7, a2, a3);
    v20 = v7;
    v8 = WTF::fastMalloc((WTF *)0x38);
    WebCore::SharedBuffer::SharedBuffer(v8, &v20);
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v20, v9);
    v19 = v8;
    v20 = 0;
    v11 = *(unsigned int *)(a1 + 76);
    if ((_DWORD)v11 == *(_DWORD *)(a1 + 72))
    {
      v12 = WTF::Vector<WebCore::RTCDataChannelRemoteHandler::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1 + 64, v11 + 1, (unint64_t)v18);
      v11 = *(unsigned int *)(a1 + 76);
      v13 = *(_QWORD *)(a1 + 64) + 16 * v11;
      *(_BYTE *)v13 = *v12;
      v14 = *((_QWORD *)v12 + 1);
      *((_QWORD *)v12 + 1) = 0;
      *(_QWORD *)(v13 + 8) = v14;
    }
    else
    {
      v15 = *v6 + 16 * v11;
      *(_BYTE *)v15 = 1;
      v19 = 0;
      *(_QWORD *)(v15 + 8) = v8;
    }
    *(_DWORD *)(a1 + 76) = v11 + 1;
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v19, v10);
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v20, v16);
  }
  return 1;
}

uint64_t WebCore::RTCDataChannelRemoteHandler::close(uint64_t this)
{
  if (*(_BYTE *)(this + 81))
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(this + 56) + 32))(*(_QWORD *)(this + 56), *(_QWORD *)(this + 16), *(_QWORD *)(this + 24));
  *(_BYTE *)(this + 80) = 1;
  return this;
}

_QWORD *WebCore::RTCDataChannelRemoteSource::RTCDataChannelRemoteSource(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[6];

  v19[5] = *MEMORY[0x1E0C80C00];
  a1[1] = 0;
  v11 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v11 = 1;
  *(_QWORD *)(v11 + 8) = a1;
  v12 = (unsigned int *)a1[1];
  a1[1] = v11;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v10);
    }
  }
  *a1 = off_1E33609D0;
  a1[2] = a2;
  a1[3] = a3;
  v15 = *a4;
  *a4 = 0;
  a1[4] = v15;
  v16 = *a5;
  *a5 = 0;
  a1[5] = v16;
  v17 = a1[4];
  memset(v19, 0, 24);
  (*(void (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v17 + 16))(v17, a1, v19);
  return a1;
}

{
  void *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[6];

  v19[5] = *MEMORY[0x1E0C80C00];
  a1[1] = 0;
  v11 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v11 = 1;
  *(_QWORD *)(v11 + 8) = a1;
  v12 = (unsigned int *)a1[1];
  a1[1] = v11;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v10);
    }
  }
  *a1 = off_1E33609D0;
  a1[2] = a2;
  a1[3] = a3;
  v15 = *a4;
  *a4 = 0;
  a1[4] = v15;
  v16 = *a5;
  *a5 = 0;
  a1[5] = v16;
  v17 = a1[4];
  memset(v19, 0, 24);
  (*(void (**)(uint64_t, _QWORD *, _QWORD *))(*(_QWORD *)v17 + 16))(v17, a1, v19);
  return a1;
}

void WebCore::RTCDataChannelRemoteSource::~RTCDataChannelRemoteSource(WebCore::RTCDataChannelRemoteSource *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  _QWORD *v13;

  *(_QWORD *)this = off_1E33609D0;
  v3 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v12 = off_1E3360D48;
      v12[1] = v4;
      v13 = v12;
      WTF::ensureOnMainThread();
      if (v13)
        (*(void (**)(_QWORD *))(*v13 + 8))(v13);
    }
  }
  v7 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 1);
  if (v8)
  {
    *(_QWORD *)(v8 + 8) = 0;
    v9 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::RTCDataChannelRemoteSource::~RTCDataChannelRemoteSource(this, a2);
  WTF::fastFree(v2, v3);
}

_QWORD *WebCore::RTCDtlsTransport::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v8 = bmalloc::api::isoAllocate();
  v9 = v8;
  *(_DWORD *)(v8 + 24) = 1;
  if (!*(_BYTE *)(a1 + 274))
  {
    v10 = a1 - 192;
    v11 = *(_QWORD *)(a1 + 512);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
        v10 = v12;
    }
    a1 = v10 + 192;
  }
  *(_QWORD *)v8 = &off_1E33A18C0;
  *(_QWORD *)(v8 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v8, (WebCore::ScriptExecutionContext *)a1);
  *(_QWORD *)v9 = &off_1E33A0540;
  *(_QWORD *)(v9 + 16) = 0;
  if (*(_BYTE *)(a1 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x195493984);
  }
  v17 = v9;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(a1 + 128), &v17, (uint64_t)&v16);
  *(_QWORD *)(v9 + 40) = 0;
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)(v9 + 64) = 0;
  *(_QWORD *)v9 = &off_1E3360A20;
  *(_QWORD *)(v9 + 32) = &unk_1E3360AA8;
  *(_QWORD *)(v9 + 56) = &unk_1E3360B20;
  v13 = *a2;
  *a2 = 0;
  *(_QWORD *)(v9 + 72) = v13;
  v14 = *a3;
  *a3 = 0;
  *(_QWORD *)(v9 + 80) = v14;
  *(_DWORD *)(v9 + 88) = 0;
  *(_QWORD *)(v9 + 96) = 0;
  *(_QWORD *)(v9 + 104) = 0;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v9 + 72) + 32))(*(_QWORD *)(v9 + 72), v9 + 56);
  *a4 = v9;
  return WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v9);
}

void WebCore::RTCDtlsTransport::~RTCDtlsTransport(WebCore::RTCDtlsTransport *this)
{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  void *v13;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 9) + 40))(*((_QWORD *)this + 9));
  v3 = *((unsigned int *)this + 27);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)*((_QWORD *)this + 12);
    v5 = 8 * v3;
    do
    {
      v4 = WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(v4)
         + 1;
      v5 -= 8;
    }
    while (v5);
  }
  v6 = (WTF *)*((_QWORD *)this + 12);
  if (v6)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v6, v2);
  }
  v7 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v7)
  {
    if (v7[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[6];
  }
  v8 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 8);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 0;
    v10 = (unsigned int *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (v10)
    {
      do
      {
        v11 = __ldaxr(v10);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v10));
      if (!v12)
      {
        atomic_store(1u, v10);
        WTF::fastFree((WTF *)v10, v2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 8) = 0;
  }
  WebCore::EventTarget::~EventTarget((WebCore::RTCDtlsTransport *)((char *)this + 32), v2);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v13);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::RTCDtlsTransport::~RTCDtlsTransport(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void `non-virtual thunk to'WebCore::RTCDtlsTransport::~RTCDtlsTransport(WebCore::RTCDtlsTransport *this)
{
  WebCore::RTCDtlsTransport::~RTCDtlsTransport((WebCore::RTCDtlsTransport *)((char *)this - 32));
}

{
  WebCore::RTCDtlsTransport::~RTCDtlsTransport((WebCore::RTCDtlsTransport *)((char *)this - 56));
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::RTCDtlsTransport::~RTCDtlsTransport((WebCore::RTCDtlsTransport *)((char *)this - 32));
  bmalloc::api::isoDeallocate(v1, v2);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::RTCDtlsTransport::~RTCDtlsTransport((WebCore::RTCDtlsTransport *)((char *)this - 56));
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::RTCDtlsTransport::stop(uint64_t this)
{
  *(_DWORD *)(this + 88) = 3;
  return this;
}

BOOL WebCore::RTCDtlsTransport::virtualHasPendingActivity(WebCore::RTCDtlsTransport *this)
{
  uint64_t v1;

  if (*((_DWORD *)this + 22) != 3 && (v1 = *((_QWORD *)this + 6), (v1 & 0x1000000000000) != 0))
    return *(_DWORD *)((v1 & 0xFFFFFFFFFFFFLL) + 0x1C) != 0;
  else
    return 0;
}

uint64_t (***WebCore::RTCDtlsTransport::onStateChanged(uint64_t a1, int a2, uint64_t *a3))()
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t (***result)();
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (**v14)();
  uint64_t (***v15)();

  v5 = *a3;
  v6 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v7 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v7 = &off_1E3360DA8;
  *(_QWORD *)(v7 + 8) = a1;
  *(_DWORD *)(v7 + 16) = a2;
  *(_QWORD *)(v7 + 24) = v5;
  *(_QWORD *)(v7 + 32) = v6;
  v8 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v8 = 1;
  v9 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v8 + 8) = a1;
  ++*(_QWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 24) = v9 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = off_1E3360D80;
  result[1] = (uint64_t (**)())a1;
  result[2] = (uint64_t (**)())v8;
  result[3] = (uint64_t (**)())v7;
  v15 = result;
  v11 = *(_QWORD *)(a1 + 8);
  if (!v11)
  {
    v15 = 0;
    v14 = off_1E3360D80;
    return (uint64_t (***)())v14[1]();
  }
  v12 = *(_QWORD *)(v11 + 8);
  if (!v12)
  {
    v15 = 0;
    goto LABEL_6;
  }
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v12 - 96) + 104))(v12 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v13, 11, (uint64_t *)&v15);
  result = v15;
  v15 = 0;
  if (result)
  {
LABEL_6:
    v14 = *result;
    return (uint64_t (***)())v14[1]();
  }
  return result;
}

uint64_t (***`non-virtual thunk to'WebCore::RTCDtlsTransport::onStateChanged(uint64_t a1, int a2, uint64_t *a3))()
{
  return WebCore::RTCDtlsTransport::onStateChanged(a1 - 56, a2, a3);
}

_QWORD *WebCore::RTCDtlsTransport::onError(WebCore::RTCDtlsTransport *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (**v9)();
  _QWORD *v10;

  v2 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v2 = &off_1E3360DA8;
  *(_QWORD *)(v2 + 8) = this;
  *(_DWORD *)(v2 + 16) = 4;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  v3 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  v4 = *((_DWORD *)this + 6);
  *(_QWORD *)(v3 + 8) = this;
  ++*((_QWORD *)this + 2);
  *((_DWORD *)this + 6) = v4 + 2;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *result = off_1E3360D80;
  result[1] = this;
  result[2] = v3;
  result[3] = v2;
  v10 = result;
  v6 = *((_QWORD *)this + 1);
  if (!v6)
  {
    v10 = 0;
    v9 = off_1E3360D80;
    return (_QWORD *)v9[1]();
  }
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
  {
    v10 = 0;
    goto LABEL_6;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 - 96) + 104))(v7 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v8, 11, (uint64_t *)&v10);
  result = v10;
  v10 = 0;
  if (result)
  {
LABEL_6:
    v9 = (uint64_t (**)())*result;
    return (_QWORD *)v9[1]();
  }
  return result;
}

_QWORD *`non-virtual thunk to'WebCore::RTCDtlsTransport::onError(WebCore::RTCDtlsTransport *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)();
  _QWORD *v11;

  v2 = (char *)this - 56;
  v3 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v3 = &off_1E3360DA8;
  *(_QWORD *)(v3 + 8) = v2;
  *(_DWORD *)(v3 + 16) = 4;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  v4 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  v5 = *((_DWORD *)this - 8);
  *(_QWORD *)(v4 + 8) = v2;
  ++*((_QWORD *)this - 5);
  *((_DWORD *)this - 8) = v5 + 2;
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *result = off_1E3360D80;
  result[1] = v2;
  result[2] = v4;
  result[3] = v3;
  v11 = result;
  v7 = *((_QWORD *)this - 6);
  if (!v7)
  {
    v11 = 0;
    v10 = off_1E3360D80;
    return (_QWORD *)v10[1]();
  }
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
  {
    v11 = 0;
    goto LABEL_6;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 - 96) + 104))(v8 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v9, 11, (uint64_t *)&v11);
  result = v11;
  v11 = 0;
  if (result)
  {
LABEL_6:
    v10 = (uint64_t (**)())*result;
    return (_QWORD *)v10[1]();
  }
  return result;
}

void WebCore::RTCEncodedFrame::~RTCEncodedFrame(WebCore::RTCEncodedFrame *this)
{
  _QWORD *v2;
  BOOL v3;
  _DWORD *v4;
  uint64_t v5;
  void *v6;
  WTF **v7;
  WTF *v8;
  WTF *v9;

  *(_QWORD *)this = off_1E3360DD0;
  v2 = (_QWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
  {
    v3 = *(_DWORD *)v2 == 2;
    *(_DWORD *)v2 -= 2;
    if (v3)
    {
      v5 = v2[10];
      if (v5)
      {
        *(_QWORD *)(v5 + 8) = 3;
        v2[10] = 0;
      }
      if ((v2[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v2 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v2 + 2));
      v7 = (WTF **)v2[1];
      if ((v7 & 1) == 0 && v7)
      {
        v9 = (WTF *)v2[1];
        v8 = *v7;
        if (*v7)
        {
          *(_QWORD *)v9 = 0;
          *((_DWORD *)v9 + 2) = 0;
          WTF::fastFree(v8, v6);
        }
        WTF::fastFree(v9, v6);
      }
      WTF::fastFree((WTF *)v2, v6);
    }
  }
  v4 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
}

{
  WTF *v1;
  void *v2;

  WebCore::RTCEncodedFrame::~RTCEncodedFrame(this);
  WTF::fastFree(v1, v2);
}

void WebCore::RTCEncodedAudioFrame::~RTCEncodedAudioFrame(WebCore::RTCEncodedAudioFrame *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E3360B50;
  if (*((_BYTE *)this + 56))
  {
    v3 = (WTF *)*((_QWORD *)this + 5);
    if (v3)
    {
      *((_QWORD *)this + 5) = 0;
      *((_DWORD *)this + 12) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  WebCore::RTCEncodedFrame::~RTCEncodedFrame(this);
}

{
  WTF *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E3360B50;
  if (*((_BYTE *)this + 56))
  {
    v3 = (WTF *)*((_QWORD *)this + 5);
    if (v3)
    {
      *((_QWORD *)this + 5) = 0;
      *((_DWORD *)this + 12) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  WebCore::RTCEncodedFrame::~RTCEncodedFrame(this);
  WTF::fastFree(v4, v5);
}

uint64_t *WebCore::RTCEncodedFrame::data@<X0>(uint64_t *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  WTF *v11;
  uint64_t v12;

  v3 = (_DWORD *)this[3];
  if (v3)
    goto LABEL_5;
  v4 = this;
  (*(void (**)(uint64_t))(*(_QWORD *)this[2] + 16))(this[2]);
  JSC::ArrayBuffer::create();
  v5 = v12;
  v12 = 0;
  v6 = (_QWORD *)v4[3];
  v4[3] = v5;
  if (v6)
  {
    v7 = *(_DWORD *)v6 == 2;
    *(_DWORD *)v6 -= 2;
    if (v7)
    {
      v8 = v6[10];
      if (v8)
      {
        *(_QWORD *)(v8 + 8) = 3;
        v6[10] = 0;
      }
      if ((v6[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v6 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v6 + 2));
      v10 = (WTF *)v6[1];
      if ((v10 & 1) == 0 && v10)
      {
        v11 = *(WTF **)v10;
        if (*(_QWORD *)v10)
        {
          *(_QWORD *)v10 = 0;
          *((_DWORD *)v10 + 2) = 0;
          WTF::fastFree(v11, v9);
        }
        WTF::fastFree(v10, v9);
      }
      WTF::fastFree((WTF *)v6, v9);
    }
  }
  this = WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v12);
  v3 = (_DWORD *)v4[3];
  if (v3)
LABEL_5:
    *v3 += 2;
  *a2 = v3;
  return this;
}

uint64_t WebCore::RTCEncodedFrame::setData(uint64_t this, JSC::ArrayBuffer *a2)
{
  _QWORD *v2;
  BOOL v3;
  uint64_t v4;
  void *v5;
  WTF **v6;
  WTF *v7;
  WTF *v8;

  *(_DWORD *)a2 += 2;
  v2 = *(_QWORD **)(this + 24);
  *(_QWORD *)(this + 24) = a2;
  if (v2)
  {
    v3 = *(_DWORD *)v2 == 2;
    *(_DWORD *)v2 -= 2;
    if (v3)
    {
      v4 = v2[10];
      if (v4)
      {
        *(_QWORD *)(v4 + 8) = 3;
        v2[10] = 0;
      }
      if ((v2[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v2 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v2 + 2));
      v6 = (WTF **)v2[1];
      if ((v6 & 1) == 0 && v6)
      {
        v8 = (WTF *)v2[1];
        v7 = *v6;
        if (*v6)
        {
          *(_QWORD *)v8 = 0;
          *((_DWORD *)v8 + 2) = 0;
          WTF::fastFree(v7, v5);
        }
        WTF::fastFree(v8, v5);
      }
      return WTF::fastFree((WTF *)v2, v5);
    }
  }
  return this;
}

uint64_t WebCore::RTCEncodedFrame::rtcFrame@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  WTF **v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;

  v2 = this;
  v4 = *(_QWORD *)(this + 24);
  if (v4)
  {
    v5 = *(_QWORD *)(this + 16);
    v6 = *(_QWORD *)(v4 + 16);
    if (v6)
    {
      v7 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
      if (v7)
      {
        if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
          v6 = (v6 & 0x3FFFFFFFFLL) + v7;
      }
    }
    if (*(_BYTE *)(v4 + 64) && (v16 = *(_QWORD *)(v4 + 32)) != 0)
      v8 = *(_QWORD *)(v16 + 32);
    else
      v8 = *(_QWORD *)(v4 + 48);
    this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 24))(v5, v6, v8);
    v9 = *(_QWORD **)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    if (v9)
    {
      v10 = *(_DWORD *)v9 == 2;
      *(_DWORD *)v9 -= 2;
      if (v10)
      {
        v12 = v9[10];
        if (v12)
        {
          *(_QWORD *)(v12 + 8) = 3;
          v9[10] = 0;
        }
        if ((v9[9] & 1) == 0)
          JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v9 + 9));
        JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v9 + 2));
        v14 = (WTF **)v9[1];
        if ((v14 & 1) == 0 && v14)
        {
          v17 = (WTF *)v9[1];
          v15 = *v14;
          if (*v14)
          {
            *(_QWORD *)v17 = 0;
            *((_DWORD *)v17 + 2) = 0;
            WTF::fastFree(v15, v13);
          }
          WTF::fastFree(v17, v13);
        }
        this = WTF::fastFree((WTF *)v9, v13);
      }
    }
  }
  v11 = *(_QWORD *)(v2 + 16);
  ++*(_DWORD *)(v11 + 8);
  *a2 = v11;
  return this;
}

uint64_t WebCore::RTCDataChannel::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::RTCDataChannel *WebCore::RTCDataChannel::deref(WebCore::RTCDataChannel *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::RTCDataChannel::~RTCDataChannel(this, a2);
    return (WebCore::RTCDataChannel *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

uint64_t WebCore::RTCDataChannel::bufferedAmount(WebCore::RTCDataChannel *this)
{
  return *((_QWORD *)this + 22);
}

uint64_t WebCore::RTCDataChannel::eventTargetInterface(WebCore::RTCDataChannel *this)
{
  return 40;
}

uint64_t WebCore::RTCDataChannel::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::RTCDataChannel *WebCore::RTCDataChannel::derefEventTarget(WebCore::RTCDataChannel *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::RTCDataChannel::~RTCDataChannel(this, a2);
    return (WebCore::RTCDataChannel *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

void `non-virtual thunk to'WebCore::RTCDataChannel::~RTCDataChannel(WebCore::RTCDataChannel *this, void *a2)
{
  WebCore::RTCDataChannel::~RTCDataChannel((WebCore::RTCDataChannel *)((char *)this - 32), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::RTCDataChannel::~RTCDataChannel((WebCore::RTCDataChannel *)((char *)this - 32), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::RTCDataChannel::~RTCDataChannel((WebCore::RTCDataChannel *)((char *)this - 48), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::RTCDataChannel::~RTCDataChannel((WebCore::RTCDataChannel *)((char *)this - 48), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t `non-virtual thunk to'WebCore::RTCDataChannel::bufferedAmount(WebCore::RTCDataChannel *this)
{
  return *((_QWORD *)this + 18);
}

uint64_t `non-virtual thunk to'WebCore::RTCDataChannel::eventTargetInterface(WebCore::RTCDataChannel *this)
{
  return 40;
}

uint64_t `non-virtual thunk to'WebCore::RTCDataChannel::scriptExecutionContext(WebCore::RTCDataChannel *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 5);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::RTCDataChannel::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this - 24);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::RTCDataChannel::derefEventTarget(uint64_t this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*(_DWORD *)(this - 24) == 1)
  {
    WebCore::RTCDataChannel::~RTCDataChannel((WebCore::RTCDataChannel *)(this - 48), a2);
    return bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*(_DWORD *)(this - 24);
  }
  return this;
}

uint64_t WebCore::RTCDataChannelHandler::id(WebCore::RTCDataChannelHandler *this)
{
  return 0;
}

uint64_t WebCore::RTCDataChannelRemoteSource::didChangeReadyState(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t WebCore::RTCDataChannelRemoteSource::didReceiveStringData(WebCore::RTCDataChannelRemoteSource *this, const WTF::String *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, const WTF::String *))(**((_QWORD **)this + 5) + 24))(*((_QWORD *)this + 5), *((_QWORD *)this + 2), *((_QWORD *)this + 3), a2);
}

uint64_t WebCore::RTCDataChannelRemoteSource::didReceiveRawData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 32))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, a3);
}

WTF::StringImpl *WebCore::RTCDataChannelRemoteSource::didDetectError(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;

  v4 = a1[5];
  v5 = a1[2];
  v6 = a1[3];
  v7 = *a2;
  v8 = *(unsigned __int8 *)(v7 + 32);
  v9 = *(WTF::StringImpl **)(v7 + 24);
  if (v9)
    *(_DWORD *)v9 += 2;
  v12 = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)v4 + 40))(v4, v5, v6, v8, &v12);
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::RTCDataChannelRemoteSource::bufferedAmountIsDecreasing(WebCore::RTCDataChannelRemoteSource *this, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**((_QWORD **)this + 5) + 48))(*((_QWORD *)this + 5), *((_QWORD *)this + 2), *((_QWORD *)this + 3), a2);
}

uint64_t WebCore::RTCDataChannelRemoteSource::bufferedAmount(WebCore::RTCDataChannelRemoteSource *this)
{
  return 0;
}

uint64_t WebCore::RTCDtlsTransport::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::RTCDtlsTransport *WebCore::RTCDtlsTransport::deref(WebCore::RTCDtlsTransport *this)
{
  bmalloc::api *v1;
  void *v2;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::RTCDtlsTransport::~RTCDtlsTransport(this);
    return (WebCore::RTCDtlsTransport *)bmalloc::api::isoDeallocate(v1, v2);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

uint64_t WebCore::RTCDtlsTransport::eventTargetInterface(WebCore::RTCDtlsTransport *this)
{
  return 41;
}

uint64_t WebCore::RTCDtlsTransport::scriptExecutionContext(WebCore::RTCDtlsTransport *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t WebCore::RTCDtlsTransport::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::RTCDtlsTransport *WebCore::RTCDtlsTransport::derefEventTarget(WebCore::RTCDtlsTransport *this)
{
  bmalloc::api *v1;
  void *v2;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::RTCDtlsTransport::~RTCDtlsTransport(this);
    return (WebCore::RTCDtlsTransport *)bmalloc::api::isoDeallocate(v1, v2);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::RTCDtlsTransport::eventTargetInterface(WebCore::RTCDtlsTransport *this)
{
  return 41;
}

uint64_t `non-virtual thunk to'WebCore::RTCDtlsTransport::scriptExecutionContext(WebCore::RTCDtlsTransport *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 3);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::RTCDtlsTransport::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this - 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::RTCDtlsTransport::derefEventTarget(uint64_t this)
{
  bmalloc::api *v1;
  void *v2;

  if (*(_DWORD *)(this - 8) == 1)
  {
    WebCore::RTCDtlsTransport::~RTCDtlsTransport((WebCore::RTCDtlsTransport *)(this - 32));
    return bmalloc::api::isoDeallocate(v1, v2);
  }
  else
  {
    --*(_DWORD *)(this - 8);
  }
  return this;
}

void WebCore::RTCDataChannelEvent::~RTCDataChannelEvent(WebCore::RTCDataChannelEvent *this, void *a2)
{
  WebCore::RTCDataChannel *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (WebCore::RTCDataChannel *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 1)
    {
      WebCore::RTCDataChannel::~RTCDataChannel(v3, a2);
      bmalloc::api::isoDeallocate(v4, v5);
    }
    else
    {
      --*((_DWORD *)v3 + 6);
    }
  }
  WebCore::Event::~Event(this, a2);
}

{
  WebCore::RTCDataChannel *v3;
  bmalloc::api *v4;
  void *v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WebCore::RTCDataChannel *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 1)
    {
      WebCore::RTCDataChannel::~RTCDataChannel(v3, a2);
      bmalloc::api::isoDeallocate(v6, v7);
    }
    else
    {
      --*((_DWORD *)v3 + 6);
    }
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore12MessageEvent10JSValueTagEN3WTF3RefINS8_21SerializedScriptValueENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEENSB_6StringENSC_INS8_4BlobENSE_ISK_EENSG_ISK_EEEENSC_IN3JSC11ArrayBufferENSE_ISP_EENSG_ISP_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSU_1EJSA_SI_SJ_SN_SS_EEEEEEDcSW_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  void *v5;
  uint64_t result;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v2 + 2), a2);
      return WTF::fastFree((WTF *)v2, v5);
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore12MessageEvent10JSValueTagEN3WTF3RefINS8_21SerializedScriptValueENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEENSB_6StringENSC_INS8_4BlobENSE_ISK_EENSG_ISK_EEEENSC_IN3JSC11ArrayBufferENSE_ISP_EENSG_ISP_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSU_1EJSA_SI_SJ_SN_SS_EEEEEEDcSW_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore12MessageEvent10JSValueTagEN3WTF3RefINS8_21SerializedScriptValueENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEENSB_6StringENSC_INS8_4BlobENSE_ISK_EENSG_ISK_EEEENSC_IN3JSC11ArrayBufferENSE_ISP_EENSG_ISP_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSU_1EJSA_SI_SJ_SN_SS_EEEEEEDcSW_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[4];
  }
  return result;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore12MessageEvent10JSValueTagEN3WTF3RefINS8_21SerializedScriptValueENSB_12RawPtrTraitsISD_EENSB_21DefaultRefDerefTraitsISD_EEEENSB_6StringENSC_INS8_4BlobENSE_ISK_EENSG_ISK_EEEENSC_IN3JSC11ArrayBufferENSE_ISP_EENSG_ISP_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSU_1EJSA_SI_SJ_SN_SS_EEEEEEDcSW_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(a2);
}

void std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::rtcDataChannelLocalMap(void)::$_0 &&>>()
{
  qword_1ECE82080 = 0;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::RTCDataChannel>(WebCore::RTCDataChannel &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v2;
  void *v3;

  v2 = (WTF *)WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::RTCDataChannel>(WebCore::RTCDataChannel &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(a1, a2);
  return WTF::fastFree(v2, v3);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::RTCDataChannel>(WebCore::RTCDataChannel &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::RTCDataChannel>(WebCore::RTCDataChannel &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WebCore::RTCDataChannel *v5;
  uint64_t v7;
  bmalloc::api *v8;
  void *v9;
  bmalloc::api *v10;
  void *v11;

  *a1 = off_1E3360BD0;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
      {
        WebCore::RTCDataChannel::~RTCDataChannel((WebCore::RTCDataChannel *)v7, a2);
        bmalloc::api::isoDeallocate(v10, v11);
      }
      else
      {
        --*(_DWORD *)(v7 + 24);
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (WebCore::RTCDataChannel *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 1)
    {
      WebCore::RTCDataChannel::~RTCDataChannel(v5, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*((_DWORD *)v5 + 6);
    }
  }
  return a1;
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::RTCDataChannel::create(WebCore::ScriptExecutionContext &,std::unique_ptr<WebCore::RTCDataChannelHandler> &&,WTF::String &&,WebCore::RTCDataChannelInit &&,WebCore::RTCDataChannelState)::$_0,void>::call(unsigned int *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  __int128 v5;
  void *v6;
  int v7;
  _OWORD v8[2];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)result + 1);
  if (*(_BYTE *)(v1 + 192))
  {
    *(_BYTE *)(v1 + 192) = 0;
    result = *(unsigned int **)(v1 + 72);
    if (result)
    {
      v2 = *(_QWORD *)(v1 + 8);
      if (v2)
      {
        v3 = *(_QWORD *)(v2 + 8);
        if (v3)
        {
          v4 = *(unsigned __int8 *)(v3 + 178);
          if (*(_BYTE *)(v3 + 178))
          {
            if (v4 == 1 || v4 == 2)
              ++*(_DWORD *)(v3 + 216);
          }
          else
          {
            *(_DWORD *)(v3 - 264) += 2;
          }
          v5 = *(_OWORD *)(v3 + 144);
          v8[0] = *(_OWORD *)(v3 + 128);
          v8[1] = v5;
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t, _OWORD *))(*(_QWORD *)result
                                                                                                + 16))(result, v1 + 32, v8);
          v7 = *(unsigned __int8 *)(v3 + 178);
          if (*(_BYTE *)(v3 + 178))
          {
            if (v7 == 1)
            {
              if (*(_DWORD *)(v3 + 216) == 1)
                return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 - 96) + 40))(v3 - 96);
              else
                --*(_DWORD *)(v3 + 216);
            }
            else if (v7 == 2)
            {
              return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v3 + 216));
            }
          }
          else if (*(_DWORD *)(v3 - 264) == 2)
          {
            if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
              return WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), v6);
          }
          else
          {
            *(_DWORD *)(v3 - 264) -= 2;
          }
        }
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCDataChannel::createMessageQueue(WebCore::ScriptExecutionContext &,WebCore::RTCDataChannel&)::$_0,void,WTF::CString const&>::call(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 72) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72));
  if ((result & 1) == 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
        v5 = v4 - 96;
      else
        v5 = 0;
    }
    else
    {
      v5 = 0;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)v5 + 248))(v5, 1, 2, &v7, 0);
    result = (uint64_t)v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCDataChannel::createMessageQueue(WebCore::ScriptExecutionContext &,WebCore::RTCDataChannel&)::$_1,void,std::span<unsigned char const,18446744073709551615ul>>::call(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 72) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72));
  if ((result & 1) == 0)
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
        v5 = v4 - 96;
      else
        v5 = 0;
    }
    else
    {
      v5 = 0;
    }
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)v5 + 248))(v5, 1, 2, &v7, 0);
    result = (uint64_t)v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCDataChannel::createMessageQueue(WebCore::ScriptExecutionContext &,WebCore::RTCDataChannel&)::$_2,WebCore::NetworkSendQueue::Continue,WebCore::ExceptionCode>::call(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v7;
  BOOL v8;
  BOOL v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  int v13;
  WTF::StringImpl *v14;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8);
  if (!v2)
    return 1;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 1;
  v4 = v3 - 96;
  v5 = *(unsigned __int8 *)(v3 + 178);
  if (*(_BYTE *)(v3 + 178))
  {
    if (v5 == 1 || v5 == 2)
      ++*(_DWORD *)(v3 + 216);
  }
  else
  {
    *(_DWORD *)(v3 - 264) += 2;
  }
  v6 = 0;
  v7 = a2;
  do
  {
    ++v6;
    v8 = v7 > 9;
    v7 /= 0xAu;
  }
  while (v8);
  if (v6 < 0 || (v9 = __OFADD__(v6, 61), v10 = v6 + 61, v9) || (result = (v10 + 6), __OFADD__(v10, 6)))
  {
    v14 = 0;
  }
  else
  {
    result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(result, 1, (int8x16_t *)"Error ", 6u, a2, (int8x16_t *)" in retrieving a blob data to be sent through RTCDataChannel.", 0x3Du, &v14);
    if (v14)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)v4 + 248))(v3 - 96, 1, 2, &v14, 0);
      v12 = v14;
      v14 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = *(unsigned __int8 *)(v3 + 178);
      if (*(_BYTE *)(v3 + 178))
      {
        if (v13 == 1)
        {
          if (*(_DWORD *)(v3 + 216) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v4 + 40))(v3 - 96);
          else
            --*(_DWORD *)(v3 + 216);
        }
        else if (v13 == 2)
        {
          WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v3 + 216));
        }
      }
      else if (*(_DWORD *)(v3 - 264) == 2)
      {
        if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), v11);
      }
      else
      {
        *(_DWORD *)(v3 - 264) -= 2;
      }
      return 1;
    }
  }
  __break(0xC471u);
  return result;
}

WTF *WTF::Detail::CallableWrapper<WebCore::RTCDataChannel::didChangeReadyState(WebCore::RTCDataChannelState)::$_0,void>::call(WTF *result)
{
  _BYTE *v1;
  int v2;
  unsigned int v3;
  uint64_t v6;
  uint64_t v7;
  WebCore::EventTarget *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _BOOL4 v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  _BOOL4 v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  _BOOL4 v27;

  v1 = (_BYTE *)*((_QWORD *)result + 1);
  if (!v1[128])
  {
    v2 = v1[129];
    if (v2 != 3)
    {
      v3 = *((unsigned __int8 *)result + 16);
      if (v2 != v3 && (v2 != 2 || v3 >= 2) && (v2 != 1 || v3 != 0))
      {
        v1[129] = v3;
        if (v3 != 3)
        {
          if (v3 == 2)
          {
            v23 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v23 || (v24 = *(_QWORD *)(v23 + 96)) == 0)
              v24 = WebCore::threadGlobalDataSlow(result);
            v8 = (WebCore::EventTarget *)(v1 + 48);
            v25 = *(_QWORD *)(v24 + 40);
            if (!v25)
            {
              WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v24);
              v25 = *(_QWORD *)(v24 + 40);
            }
            v10 = bmalloc::api::isoAllocate();
            WTF::MonotonicTime::now((WTF::MonotonicTime *)v10);
            *(_QWORD *)v10 = off_1E33A4B48;
            *(_QWORD *)(v10 + 8) = 0;
            v26 = *(_DWORD *)(v10 + 20) & 0xFFC00000 | 0x1E8200;
            v27 = *(_QWORD *)(v25 + 416) != 0;
            *(_DWORD *)(v10 + 16) = 1;
            *(_DWORD *)(v10 + 20) = v26 | v27;
            v14 = *(_DWORD **)(v25 + 416);
            if (!v14)
              goto LABEL_23;
          }
          else
          {
            if (v3 != 1)
              return result;
            v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
            if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
              v7 = WebCore::threadGlobalDataSlow(result);
            v8 = (WebCore::EventTarget *)(v1 + 48);
            v9 = *(_QWORD *)(v7 + 40);
            if (!v9)
            {
              WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
              v9 = *(_QWORD *)(v7 + 40);
            }
            v10 = bmalloc::api::isoAllocate();
            WTF::MonotonicTime::now((WTF::MonotonicTime *)v10);
            *(_QWORD *)v10 = off_1E33A4B48;
            *(_QWORD *)(v10 + 8) = 0;
            v12 = *(_DWORD *)(v10 + 20) & 0xFFC00000 | 0x1E8200;
            v13 = *(_QWORD *)(v9 + 1376) != 0;
            *(_DWORD *)(v10 + 16) = 1;
            *(_DWORD *)(v10 + 20) = v12 | v13;
            v14 = *(_DWORD **)(v9 + 1376);
            if (!v14)
              goto LABEL_23;
          }
          *v14 += 2;
LABEL_23:
          *(_QWORD *)(v10 + 24) = v14;
          *(_QWORD *)(v10 + 32) = 0;
          *(_QWORD *)(v10 + 40) = 0;
          *(_QWORD *)(v10 + 48) = 0;
          *(_QWORD *)(v10 + 56) = v11;
          *(_QWORD *)(v10 + 64) = 0;
          result = WebCore::EventTarget::dispatchEvent(v8, (WebCore::Event *)v10);
          if (*(_DWORD *)(v10 + 16) == 1)
            return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
          --*(_DWORD *)(v10 + 16);
          return result;
        }
        v15 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
        if (!v15 || (v16 = *(_QWORD *)(v15 + 96)) == 0)
          v16 = WebCore::threadGlobalDataSlow(result);
        v17 = *(_QWORD *)(v16 + 40);
        if (!v17)
        {
          WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v16);
          v17 = *(_QWORD *)(v16 + 40);
        }
        v18 = bmalloc::api::isoAllocate();
        WTF::MonotonicTime::now((WTF::MonotonicTime *)v18);
        *(_QWORD *)v18 = off_1E33A4B48;
        *(_QWORD *)(v18 + 8) = 0;
        v20 = *(_DWORD *)(v18 + 20) & 0xFFC00000 | 0x1E8200;
        v21 = *(_QWORD *)(v17 + 408) != 0;
        *(_DWORD *)(v18 + 16) = 1;
        *(_DWORD *)(v18 + 20) = v20 | v21;
        v22 = *(_DWORD **)(v17 + 408);
        if (v22)
          *v22 += 2;
        *(_QWORD *)(v18 + 24) = v22;
        *(_QWORD *)(v18 + 32) = 0;
        *(_QWORD *)(v18 + 40) = 0;
        *(_QWORD *)(v18 + 48) = 0;
        *(_QWORD *)(v18 + 56) = v19;
        *(_QWORD *)(v18 + 64) = 0;
        result = WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)(v1 + 48), (WebCore::Event *)v18);
        if (*(_DWORD *)(v18 + 16) == 1)
          result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
        else
          --*(_DWORD *)(v18 + 16);
        v1[128] = 1;
      }
    }
  }
  return result;
}

WTF *WTF::Detail::CallableWrapper<WebCore::RTCDataChannel::bufferedAmountIsDecreasing(unsigned long)::$_0,void>::call(WTF *result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  WebCore::EventTarget *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _BOOL4 v13;
  _DWORD *v14;

  v1 = (_QWORD *)*((_QWORD *)result + 1);
  v2 = v1[22];
  v3 = v1[23];
  v4 = v2 - *((_QWORD *)result + 2);
  v1[22] = v4;
  if (v2 > v3 && v4 <= v3)
  {
    v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
      v7 = WebCore::threadGlobalDataSlow(result);
    v8 = (WebCore::EventTarget *)(v1 + 6);
    v9 = *(_QWORD *)(v7 + 40);
    if (!v9)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
      v9 = *(_QWORD *)(v7 + 40);
    }
    v10 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v10);
    *(_QWORD *)v10 = off_1E33A4B48;
    *(_QWORD *)(v10 + 8) = 0;
    v12 = *(_DWORD *)(v10 + 20) & 0xFFC00000 | 0x1E8200;
    v13 = *(_QWORD *)(v9 + 320) != 0;
    *(_DWORD *)(v10 + 16) = 1;
    *(_DWORD *)(v10 + 20) = v12 | v13;
    v14 = *(_DWORD **)(v9 + 320);
    if (v14)
      *v14 += 2;
    *(_QWORD *)(v10 + 24) = v14;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = 0;
    *(_QWORD *)(v10 + 48) = 0;
    *(_QWORD *)(v10 + 56) = v11;
    *(_QWORD *)(v10 + 64) = 0;
    result = WebCore::EventTarget::dispatchEvent(v8, (WebCore::Event *)v10);
    if (*(_DWORD *)(v10 + 16) == 1)
      return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    else
      --*(_DWORD *)(v10 + 16);
  }
  return result;
}

_DWORD *WTF::HashTable<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::RTCDataChannelHandler>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::RTCDataChannelHandler>>>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashMap<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>,std::unique_ptr<WebCore::RTCDataChannelHandler>,WTF::DefaultHash<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>,WTF::HashTraits<std::unique_ptr<WebCore::RTCDataChannelHandler>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ObjectIdentifierGeneric<WebCore::RTCDataChannelLocalIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>>>::rehash(unsigned int a1)
{
  uint64_t v2;
  int v3;
  int v4;
  _DWORD *result;
  void *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = qword_1ECE82080;
  if (qword_1ECE82080)
  {
    v3 = *(_DWORD *)(qword_1ECE82080 - 4);
    v4 = *(_DWORD *)(qword_1ECE82080 - 12);
  }
  else
  {
    v3 = 0;
    v4 = 0;
  }
  result = (_DWORD *)WTF::fastZeroedMalloc((WTF *)(16 * a1 + 16));
  qword_1ECE82080 = (uint64_t)(result + 4);
  result[2] = a1 - 1;
  result[3] = a1;
  *result = 0;
  *(_DWORD *)(qword_1ECE82080 - 12) = v4;
  if (v3)
  {
    v7 = 0;
    while (1)
    {
      v8 = (uint64_t *)(v2 + 16 * v7);
      v9 = *v8;
      if (*v8 != -1)
      {
        if (v9)
        {
          if (qword_1ECE82080)
            v12 = *(_DWORD *)(qword_1ECE82080 - 8);
          else
            v12 = 0;
          v13 = (v9 + ~(v9 << 32)) ^ ((unint64_t)(v9 + ~(v9 << 32)) >> 22);
          v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
          v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
          v16 = v12 & ((v15 >> 31) ^ v15);
          v17 = 1;
          do
          {
            v18 = v16;
            v19 = *(_QWORD *)(qword_1ECE82080 + 16 * v16);
            v16 = (v16 + v17++) & v12;
          }
          while (v19);
          v20 = (uint64_t *)(qword_1ECE82080 + 16 * v18);
          v21 = v20[1];
          v20[1] = 0;
          if (v21)
            (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
          *v20 = *v8;
          v22 = v2 + 16 * v7;
          v23 = *(_QWORD *)(v22 + 8);
          *(_QWORD *)(v22 + 8) = 0;
          v20[1] = v23;
          v11 = *(_QWORD *)(v22 + 8);
          *(_QWORD *)(v22 + 8) = 0;
          if (!v11)
            goto LABEL_19;
LABEL_18:
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
          goto LABEL_19;
        }
        v10 = v2 + 16 * v7;
        v11 = *(_QWORD *)(v10 + 8);
        *(_QWORD *)(v10 + 8) = 0;
        if (v11)
          goto LABEL_18;
      }
LABEL_19:
      if (++v7 == v3)
        return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
    }
  }
  if (v2)
    return (_DWORD *)WTF::fastFree((WTF *)(v2 - 16), v6);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::RTCDataChannelRemoteHandlerConnection,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) + 8))(*(_QWORD *)(a1 + 8) - 8);
}

WTF *WTF::Detail::CallableWrapper<WebCore::RTCDataChannel::create(WebCore::ScriptExecutionContext &,WebCore::RTCDataChannelIdentifier,WTF::String &&,WebCore::RTCDataChannelInit &&,WebCore::RTCDataChannelState)::$_0,void>::call(uint64_t a1)
{
  return WebCore::RTCDataChannel::fireOpenEventIfNeeded(*(WTF **)(a1 + 8));
}

char *WTF::Vector<WebCore::RTCDataChannelRemoteHandler::Message,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  WTF *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  WTF *v30;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = (char *)v5 + 16 * *(unsigned int *)(a1 + 12);
    if ((unint64_t)v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= a2)
        v10 = a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v18 = *(WTF **)a1;
        return (char *)v18 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      }
      if (!(v10 >> 28))
      {
        v12 = WTF::fastMalloc((WTF *)(16 * v10));
        v13 = 0;
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v12;
        do
        {
          v14 = (uint64_t)v5 + v13 + 16;
          v15 = v12 + v13;
          *(_BYTE *)v15 = *((_BYTE *)v5 + v13);
          v16 = (uint64_t *)((char *)v5 + v13 + 8);
          v17 = *v16;
          *v16 = 0;
          *(_QWORD *)(v15 + 8) = v17;
          WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(v16, v11);
          v13 += 16;
        }
        while ((char *)v14 != v6);
        v18 = *(WTF **)a1;
        if (v5)
        {
          if (v18 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, v11);
          v18 = *(WTF **)a1;
        }
        return (char *)v18 + 16 * ((uint64_t)(v3 - (_QWORD)v5) >> 4);
      }
LABEL_35:
      __break(0xC471u);
      JUMPOUT(0x195495458);
    }
  }
  v19 = *(unsigned int *)(a1 + 8);
  v20 = v19 + (v19 >> 2);
  if (v20 >= 0x10)
    v21 = v20 + 1;
  else
    v21 = 16;
  if (v21 <= a2)
    v22 = a2;
  else
    v22 = v21;
  if (v22 > v19)
  {
    if (v22 >> 28)
      goto LABEL_35;
    v23 = *(unsigned int *)(a1 + 12);
    v24 = WTF::fastMalloc((WTF *)(16 * v22));
    *(_DWORD *)(a1 + 8) = v22;
    *(_QWORD *)a1 = v24;
    if ((_DWORD)v23)
    {
      v26 = v24;
      v27 = (uint64_t *)((char *)v5 + 8);
      do
      {
        *(_BYTE *)v26 = *((_BYTE *)v27 - 8);
        v28 = *v27;
        *v27 = 0;
        *(_QWORD *)(v26 + 8) = v28;
        v29 = WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(v27, v25);
        v30 = (WTF *)(v29 + 1);
        v27 = v29 + 2;
        v26 += 16;
      }
      while (v30 != (WTF *)((char *)v5 + 16 * v23));
    }
    if (v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, v25);
    }
  }
  return (char *)v3;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::RTCDataChannelRemoteSourceConnection,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) + 8))(*(_QWORD *)(a1 + 8) - 8);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::RTCDtlsTransport>(WebCore::RTCDtlsTransport &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v2;
  void *v3;

  v2 = (WTF *)WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::RTCDtlsTransport>(WebCore::RTCDtlsTransport &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(a1, a2);
  return WTF::fastFree(v2, v3);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::RTCDtlsTransport>(WebCore::RTCDtlsTransport &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::RTCDtlsTransport>(WebCore::RTCDtlsTransport &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WebCore::RTCDtlsTransport *v5;
  uint64_t v7;
  bmalloc::api *v8;
  void *v9;
  bmalloc::api *v10;
  void *v11;

  *a1 = off_1E3360D80;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
      {
        WebCore::RTCDtlsTransport::~RTCDtlsTransport((WebCore::RTCDtlsTransport *)v7);
        bmalloc::api::isoDeallocate(v10, v11);
      }
      else
      {
        --*(_DWORD *)(v7 + 24);
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (WebCore::RTCDtlsTransport *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 1)
    {
      WebCore::RTCDtlsTransport::~RTCDtlsTransport(v5);
      bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*((_DWORD *)v5 + 6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCDtlsTransport::onStateChanged(RTCDtlsTransportState,WTF::Vector<WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;

  *(_QWORD *)a1 = &off_1E3360DA8;
  v3 = *(unsigned int *)(a1 + 36);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)(a1 + 24);
    v5 = 8 * v3;
    do
    {
      v4 = WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(v4)
         + 1;
      v5 -= 8;
    }
    while (v5);
  }
  v6 = *(WTF **)(a1 + 24);
  if (v6)
  {
    *(_QWORD *)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 32) = 0;
    WTF::fastFree(v6, a2);
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCDtlsTransport::onStateChanged(RTCDtlsTransportState,WTF::Vector<WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  WTF *v6;

  *(_QWORD *)this = &off_1E3360DA8;
  v3 = *((unsigned int *)this + 9);
  if ((_DWORD)v3)
  {
    v4 = (uint64_t *)*((_QWORD *)this + 3);
    v5 = 8 * v3;
    do
    {
      v4 = WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(v4)
         + 1;
      v5 -= 8;
    }
    while (v5);
  }
  v6 = (WTF *)*((_QWORD *)this + 3);
  if (v6)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v6, a2);
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCDtlsTransport::onStateChanged(RTCDtlsTransportState,WTF::Vector<WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,void>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  WebCore::RTCPeerConnection *v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _BOOL4 v19;
  _DWORD *v20;
  bmalloc::api *v21;
  void *v22;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(_DWORD *)(v2 + 88);
  if (v3 != 3)
  {
    v4 = result;
    v5 = *(unsigned int *)(v2 + 108);
    v6 = *(uint64_t **)(v2 + 96);
    v7 = 8 * v5;
    if ((_DWORD)v5 != *(_DWORD *)(result + 36)
      || (result = memcmp(*(const void **)(v2 + 96), *(const void **)(result + 24), 8 * v5), (_DWORD)result))
    {
      if ((_DWORD)v5)
      {
        do
        {
          result = (uint64_t)WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(v6++);
          v7 -= 8;
        }
        while (v7);
        v6 = *(uint64_t **)(v2 + 96);
      }
      if (v6)
      {
        *(_QWORD *)(v2 + 96) = 0;
        *(_DWORD *)(v2 + 104) = 0;
        result = WTF::fastFree((WTF *)v6, a2);
      }
      v8 = *(_QWORD *)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v2 + 96) = v8;
      LODWORD(v8) = *(_DWORD *)(v4 + 32);
      *(_DWORD *)(v4 + 32) = 0;
      *(_DWORD *)(v2 + 104) = v8;
      LODWORD(v8) = *(_DWORD *)(v4 + 36);
      *(_DWORD *)(v4 + 36) = 0;
      *(_DWORD *)(v2 + 108) = v8;
      v3 = *(_DWORD *)(v2 + 88);
    }
    v9 = *(_DWORD *)(v4 + 16);
    if (v3 != v9)
    {
      *(_DWORD *)(v2 + 88) = v9;
      v10 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + 88);
      if (v10)
      {
        v11 = *(WebCore::RTCPeerConnection **)(v10 + 8);
        if (v11)
        {
          ++*((_DWORD *)v11 + 6);
          result = (uint64_t)WebCore::RTCPeerConnection::updateConnectionState(v11, a2);
          if (*((_DWORD *)v11 + 6) == 1)
          {
            WebCore::RTCPeerConnection::~RTCPeerConnection(v11, v12);
            result = bmalloc::api::isoDeallocate(v21, v22);
          }
          else
          {
            --*((_DWORD *)v11 + 6);
          }
        }
      }
      v13 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v13 || (v14 = *(_QWORD *)(v13 + 96)) == 0)
        v14 = WebCore::threadGlobalDataSlow((WebCore *)result);
      v15 = *(_QWORD *)(v14 + 40);
      if (!v15)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v14);
        v15 = *(_QWORD *)(v14 + 40);
      }
      v16 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v16);
      *(_QWORD *)v16 = off_1E33A4B48;
      *(_QWORD *)(v16 + 8) = 0;
      v18 = *(_DWORD *)(v16 + 20) & 0xFFC00000 | 0x1E8202;
      v19 = *(_QWORD *)(v15 + 1984) != 0;
      *(_DWORD *)(v16 + 16) = 1;
      *(_DWORD *)(v16 + 20) = v18 | v19;
      v20 = *(_DWORD **)(v15 + 1984);
      if (v20)
        *v20 += 2;
      *(_QWORD *)(v16 + 24) = v20;
      *(_QWORD *)(v16 + 32) = 0;
      *(_QWORD *)(v16 + 40) = 0;
      *(_QWORD *)(v16 + 48) = 0;
      *(_QWORD *)(v16 + 56) = v17;
      *(_QWORD *)(v16 + 64) = 0;
      result = (uint64_t)WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)(v2 + 32), (WebCore::Event *)v16);
      if (*(_DWORD *)(v16 + 16) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      else
        --*(_DWORD *)(v16 + 16);
    }
  }
  return result;
}

void WebCore::RTCEncodedVideoFrame::~RTCEncodedVideoFrame(WebCore::RTCEncodedVideoFrame *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E3361390;
  if (*((_BYTE *)this + 96))
  {
    v3 = (WTF *)*((_QWORD *)this + 7);
    if (v3)
    {
      *((_QWORD *)this + 7) = 0;
      *((_DWORD *)this + 16) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  WebCore::RTCEncodedFrame::~RTCEncodedFrame(this);
}

{
  WTF *v3;
  WTF *v4;
  void *v5;

  *(_QWORD *)this = off_1E3361390;
  if (*((_BYTE *)this + 96))
  {
    v3 = (WTF *)*((_QWORD *)this + 7);
    if (v3)
    {
      *((_QWORD *)this + 7) = 0;
      *((_DWORD *)this + 16) = 0;
      WTF::fastFree(v3, a2);
    }
  }
  WebCore::RTCEncodedFrame::~RTCEncodedFrame(this);
  WTF::fastFree(v4, v5);
}

uint64_t WebCore::RTCError::RTCError(uint64_t a1, __int128 *a2, _DWORD **a3)
{
  WTF::StringImpl *v6;
  _DWORD *v7;
  __int128 v8;
  __int128 v9;
  WTF::StringImpl *v11;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E334F098;
  *(_BYTE *)(a1 + 12) = 0;
  if (v11)
    *(_DWORD *)v11 += 2;
  *(_QWORD *)(a1 + 16) = v11;
  v7 = *a3;
  if (*a3)
    *v7 += 2;
  *(_QWORD *)(a1 + 24) = v7;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v6);
    else
      *(_DWORD *)v11 -= 2;
  }
  *(_QWORD *)a1 = off_1E3360DF0;
  v8 = *a2;
  v9 = a2[1];
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 8);
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v9;
  return a1;
}

{
  WTF::StringImpl *v6;
  _DWORD *v7;
  __int128 v8;
  __int128 v9;
  WTF::StringImpl *v11;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E334F098;
  *(_BYTE *)(a1 + 12) = 0;
  if (v11)
    *(_DWORD *)v11 += 2;
  *(_QWORD *)(a1 + 16) = v11;
  v7 = *a3;
  if (*a3)
    *v7 += 2;
  *(_QWORD *)(a1 + 24) = v7;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v6);
    else
      *(_DWORD *)v11 -= 2;
  }
  *(_QWORD *)a1 = off_1E3360DF0;
  v8 = *a2;
  v9 = a2[1];
  *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 8);
  *(_OWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 48) = v9;
  return a1;
}

int8x8_t WebCore::RTCIceCandidate::create@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v3;
  WTF::StringImpl *v5;
  uint8x8_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  int8x8_t result;
  WTF::StringImpl *v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  _DWORD *v20;
  __int16 v21;
  int16x8_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  __int16 v32;
  char v33;
  char v34;
  __int16 v35;
  char v36;
  char v37;
  uint64_t v38;
  int v39;
  char v40;
  __int16 v41;
  char v42;
  __int32 v43;
  char v44;
  __int16 v45;
  char v46;
  char v47;
  __int16 v48;
  char v49;
  char v50;
  __int16 v51;
  char v52;
  char v53;
  uint64_t v54;
  int v55;
  WTF::StringImpl *v56;
  char v57;
  __int16 v58;
  char v59;
  __int16 v60;
  char v61;
  __int16 v62;
  char v63;
  __int16 v64;
  char v65;
  __int16 v66;
  char v67;
  __int16 v68;
  char v69;

  if (*(_QWORD *)(a1 + 8))
    v3 = 0;
  else
    v3 = *(_BYTE *)(a1 + 18) == 0;
  if (v3)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a2 = 33;
    *(_DWORD *)(a2 + 16) = 1;
  }
  else
  {
    WebCore::parseIceCandidateSDP((uint64_t)&v29);
    if (v57)
    {
      v28 = v29;
      v29 = 0;
      v27 = v30;
      v68 = v32;
      v69 = v33;
      BYTE4(v24) = v34;
      LOBYTE(v25) = v31;
      v66 = v35;
      v67 = v36;
      v26 = v38;
      v38 = 0;
      HIDWORD(v25) = v39;
      v7 = v40;
      v65 = v42;
      v64 = v41;
      v6.i32[0] = v43;
      v22 = (int16x8_t)vmovl_u8(v6);
      v23 = v44;
      LOBYTE(v24) = v37;
      v63 = v46;
      v62 = v45;
      v8 = v47;
      v61 = v49;
      v60 = v48;
      v9 = v50;
      v59 = v52;
      v58 = v51;
      v10 = v53;
      v11 = v54;
      v12 = v55;
      v13 = v56;
      v54 = 0;
      v56 = 0;
    }
    else
    {
      v25 = 0;
      v26 = 0;
      v11 = 0;
      v13 = 0;
      v12 = 0;
      v27 = 0;
      v10 = 0;
      v9 = 0;
      v8 = 0;
      v23 = 0;
      v7 = 0;
      v28 = 0;
      v24 = 0;
      v22 = 0u;
    }
    std::__optional_destruct_base<WebCore::RTCIceCandidateFields,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v29, v5);
    v16 = *(_DWORD **)(a1 + 24);
    if (v16)
      *v16 += 2;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v15);
      else
        *(_DWORD *)v13 -= 2;
    }
    v17 = bmalloc::api::isoAllocate();
    v18 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)v17 = 1;
    *(_QWORD *)(v17 + 8) = 0;
    v19 = *(_DWORD **)a1;
    if (*(_QWORD *)a1)
      *v19 += 2;
    *(_QWORD *)(v17 + 16) = v19;
    v20 = *(_DWORD **)(a1 + 8);
    if (v20)
      *v20 += 2;
    *(_QWORD *)(v17 + 24) = v20;
    *(_DWORD *)(v17 + 32) = v18;
    *(_QWORD *)(v17 + 40) = v28;
    *(_DWORD *)(v17 + 48) = v27;
    *(_BYTE *)(v17 + 52) = v25;
    *(_WORD *)(v17 + 53) = v68;
    *(_BYTE *)(v17 + 55) = v69;
    *(_BYTE *)(v17 + 56) = BYTE4(v24);
    *(_WORD *)(v17 + 57) = v66;
    *(_BYTE *)(v17 + 59) = v67;
    *(_BYTE *)(v17 + 60) = v24;
    *(_QWORD *)(v17 + 64) = v26;
    *(_DWORD *)(v17 + 72) = HIDWORD(v25);
    *(_BYTE *)(v17 + 76) = v7;
    *(_BYTE *)(v17 + 79) = v65;
    *(_WORD *)(v17 + 77) = v64;
    result = vmovn_s16(v22);
    *(_DWORD *)(v17 + 80) = result.i32[0];
    *(_BYTE *)(v17 + 84) = v23;
    *(_BYTE *)(v17 + 87) = v63;
    *(_WORD *)(v17 + 85) = v62;
    *(_BYTE *)(v17 + 88) = v8;
    *(_WORD *)(v17 + 89) = v60;
    *(_BYTE *)(v17 + 91) = v61;
    *(_BYTE *)(v17 + 92) = v9;
    v21 = v58;
    *(_BYTE *)(v17 + 95) = v59;
    *(_WORD *)(v17 + 93) = v21;
    *(_BYTE *)(v17 + 96) = v10;
    *(_QWORD *)(v17 + 104) = v11;
    *(_DWORD *)(v17 + 112) = v12;
    *(_QWORD *)(v17 + 120) = v16;
    *(_QWORD *)a2 = v17;
    *(_DWORD *)(a2 + 16) = 0;
  }
  return result;
}

uint64_t WebCore::parseIceCandidateSDP@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  void *v5;
  char v6;
  WTF *v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  WTF *v11;
  _QWORD v12[3];
  _OWORD v13[2];
  uint64_t v14;
  int v15;
  uint64_t v16;
  _BYTE v17[432];

  cricket::Candidate::Candidate((cricket::Candidate *)v17);
  result = WTF::String::utf8();
  if (v11)
  {
    strlen((const char *)v11 + 16);
    v6 = webrtc::ParseCandidate();
    v7 = v11;
    v11 = 0;
    if (*(_DWORD *)v7 == 1)
    {
      WTF::fastFree(v7, v5);
      if ((v6 & 1) != 0)
      {
LABEL_6:
        WebCore::convertIceCandidate((WebCore *)v17, (uint64_t)&v11);
        v8 = v12[0];
        *(_QWORD *)a1 = v11;
        *(_QWORD *)(a1 + 8) = v8;
        *(_QWORD *)(a1 + 13) = *(_QWORD *)((char *)v12 + 5);
        *(_QWORD *)(a1 + 24) = v12[2];
        *(_OWORD *)(a1 + 32) = v13[0];
        v9 = *(_OWORD *)((char *)v13 + 9);
        *(_QWORD *)(a1 + 64) = v14;
        *(_DWORD *)(a1 + 72) = v15;
        *(_QWORD *)(a1 + 80) = v16;
        v10 = 1;
        *(_OWORD *)(a1 + 41) = v9;
LABEL_9:
        *(_BYTE *)(a1 + 88) = v10;
        return MEMORY[0x19AEA5EBC](v17);
      }
    }
    else
    {
      --*(_DWORD *)v7;
      if ((v6 & 1) != 0)
        goto LABEL_6;
    }
    v10 = 0;
    *(_BYTE *)a1 = 0;
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t WebCore::RTCIceCandidate::create@<X0>(_DWORD **a1@<X0>, _DWORD **a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  WTF::StringImpl *v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[13];
  uint64_t v17;
  _BYTE v18[25];
  uint64_t v19;
  int v20;
  uint64_t v21;
  char v22;

  WebCore::parseIceCandidateSDP((uint64_t)&v15);
  result = bmalloc::api::isoAllocate();
  if (v22)
  {
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = 0;
    v10 = *a1;
    if (*a1)
      *v10 += 2;
    *(_QWORD *)(result + 16) = v10;
    v11 = *a2;
    if (*a2)
      *v11 += 2;
    *(_QWORD *)(result + 24) = v11;
    *(_DWORD *)(result + 32) = a3;
    *(_QWORD *)(result + 53) = *(_QWORD *)&v16[5];
    v12 = *(_QWORD *)v16;
    *(_QWORD *)(result + 40) = v15;
    *(_QWORD *)(result + 48) = v12;
    v13 = v17;
    v15 = 0;
    v17 = 0;
    *(_QWORD *)(result + 64) = v13;
    *(_OWORD *)(result + 81) = *(_OWORD *)&v18[9];
    *(_OWORD *)(result + 72) = *(_OWORD *)v18;
    *(_QWORD *)(result + 104) = v19;
    *(_DWORD *)(result + 112) = v20;
    v14 = v21;
    v19 = 0;
    v21 = 0;
    *(_QWORD *)(result + 120) = v14;
    *a4 = result;
    return std::__optional_destruct_base<WebCore::RTCIceCandidateFields,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v15, v9);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void WebCore::RTCIceTransport::~RTCIceTransport(WebCore::RTCIceTransport *this)
{
  WebCore::EventTarget *v2;
  WTF::StringImpl *v3;
  WebCore::RTCIceCandidate *v4;
  WebCore::RTCIceCandidate *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  bmalloc::api *v15;
  void *v16;
  bmalloc::api *v17;
  void *v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;

  *((_QWORD *)this + 4) = &unk_1E3360EA0;
  v2 = (WebCore::RTCIceTransport *)((char *)this + 32);
  *(_QWORD *)this = &off_1E3360E10;
  *((_QWORD *)this + 7) = &unk_1E3360F18;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 10) + 32))(*((_QWORD *)this + 10));
  if (*((_BYTE *)this + 120))
  {
    v4 = (WebCore::RTCIceCandidate *)*((_QWORD *)this + 14);
    *((_QWORD *)this + 14) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        WebCore::RTCIceCandidate::~RTCIceCandidate(v4, v3);
        bmalloc::api::isoDeallocate(v15, v16);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
    v5 = (WebCore::RTCIceCandidate *)*((_QWORD *)this + 13);
    *((_QWORD *)this + 13) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 1)
      {
        WebCore::RTCIceCandidate::~RTCIceCandidate(v5, v3);
        bmalloc::api::isoDeallocate(v17, v18);
      }
      else
      {
        --*(_DWORD *)v5;
      }
    }
  }
  v6 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v6)
  {
    do
    {
      v7 = __ldaxr((unsigned int *)v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, (unsigned int *)v6));
    if (!v8)
    {
      atomic_store(1u, (unsigned int *)v6);
      v19 = *(unsigned int *)(v6 + 28);
      if ((_DWORD)v19)
      {
        v22 = v6;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v6 + 16), (WTF::StringImpl *)(*(_QWORD *)(v6 + 16) + 32 * v19));
        v6 = v22;
      }
      v20 = *(WTF **)(v6 + 16);
      if (v20)
      {
        *(_QWORD *)(v6 + 16) = 0;
        *(_DWORD *)(v6 + 24) = 0;
        v21 = v6;
        WTF::fastFree(v20, v3);
        v6 = v21;
      }
      WTF::fastFree((WTF *)v6, v3);
    }
  }
  v9 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 8);
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 0;
    v11 = (unsigned int *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (v11)
    {
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, v3);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 8) = 0;
  }
  WebCore::EventTarget::~EventTarget(v2, v3);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v14);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::RTCIceTransport::~RTCIceTransport(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void `non-virtual thunk to'WebCore::RTCIceTransport::~RTCIceTransport(WebCore::RTCIceTransport *this)
{
  WebCore::RTCIceTransport::~RTCIceTransport((WebCore::RTCIceTransport *)((char *)this - 32));
}

{
  WebCore::RTCIceTransport::~RTCIceTransport((WebCore::RTCIceTransport *)((char *)this - 56));
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::RTCIceTransport::~RTCIceTransport((WebCore::RTCIceTransport *)((char *)this - 32));
  bmalloc::api::isoDeallocate(v1, v2);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::RTCIceTransport::~RTCIceTransport((WebCore::RTCIceTransport *)((char *)this - 56));
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::RTCIceTransport::stop(uint64_t this)
{
  *(_BYTE *)(this + 72) = 1;
  *(_DWORD *)(this + 96) = 6;
  return this;
}

BOOL WebCore::RTCIceTransport::virtualHasPendingActivity(WebCore::RTCIceTransport *this)
{
  uint64_t v1;

  if (*((_DWORD *)this + 24) != 6 && (v1 = *((_QWORD *)this + 6), (v1 & 0x1000000000000) != 0))
    return *(_DWORD *)((v1 & 0xFFFFFFFFFFFFLL) + 0x1C) != 0;
  else
    return 0;
}

uint64_t (***WebCore::RTCIceTransport::onStateChanged(uint64_t a1, int a2))()
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t (***result)();
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)();
  uint64_t (***v12)();

  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v4 = off_1E3360FF8;
  *(_QWORD *)(v4 + 8) = a1;
  *(_DWORD *)(v4 + 16) = a2;
  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  v6 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v5 + 8) = a1;
  ++*(_QWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 24) = v6 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = &off_1E3360FD0;
  result[1] = (uint64_t (**)())a1;
  result[2] = (uint64_t (**)())v5;
  result[3] = (uint64_t (**)())v4;
  v12 = result;
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
  {
    v12 = 0;
    v11 = &off_1E3360FD0;
    return (uint64_t (***)())v11[1]();
  }
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
  {
    v12 = 0;
    goto LABEL_6;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 - 96) + 104))(v9 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v10, 11, (uint64_t *)&v12);
  result = v12;
  v12 = 0;
  if (result)
  {
LABEL_6:
    v11 = *result;
    return (uint64_t (***)())v11[1]();
  }
  return result;
}

uint64_t (***`non-virtual thunk to'WebCore::RTCIceTransport::onStateChanged(uint64_t a1, int a2))()
{
  uint64_t (**v4)();
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t (***result)();
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v12)();
  uint64_t (***v13)();

  v4 = (uint64_t (**)())(a1 - 56);
  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v5 = off_1E3360FF8;
  *(_QWORD *)(v5 + 8) = v4;
  *(_DWORD *)(v5 + 16) = a2;
  v6 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  v7 = *(_DWORD *)(a1 - 32);
  *(_QWORD *)(v6 + 8) = v4;
  ++*(_QWORD *)(a1 - 40);
  *(_DWORD *)(a1 - 32) = v7 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = &off_1E3360FD0;
  result[1] = v4;
  result[2] = (uint64_t (**)())v6;
  result[3] = (uint64_t (**)())v5;
  v13 = result;
  v9 = *(_QWORD *)(a1 - 48);
  if (!v9)
  {
    v13 = 0;
    v12 = &off_1E3360FD0;
    return (uint64_t (***)())v12[1]();
  }
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
  {
    v13 = 0;
    goto LABEL_6;
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v10 - 96) + 104))(v10 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v11, 11, (uint64_t *)&v13);
  result = v13;
  v13 = 0;
  if (result)
  {
LABEL_6:
    v12 = *result;
    return (uint64_t (***)())v12[1]();
  }
  return result;
}

uint64_t (***WebCore::RTCIceTransport::onGatheringStateChanged(uint64_t a1, int a2))()
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t (***result)();
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)();
  uint64_t (***v12)();

  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v4 = off_1E3361020;
  *(_QWORD *)(v4 + 8) = a1;
  *(_DWORD *)(v4 + 16) = a2;
  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  v6 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v5 + 8) = a1;
  ++*(_QWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 24) = v6 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = &off_1E3360FD0;
  result[1] = (uint64_t (**)())a1;
  result[2] = (uint64_t (**)())v5;
  result[3] = (uint64_t (**)())v4;
  v12 = result;
  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
  {
    v12 = 0;
    v11 = &off_1E3360FD0;
    return (uint64_t (***)())v11[1]();
  }
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
  {
    v12 = 0;
    goto LABEL_6;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 - 96) + 104))(v9 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v10, 11, (uint64_t *)&v12);
  result = v12;
  v12 = 0;
  if (result)
  {
LABEL_6:
    v11 = *result;
    return (uint64_t (***)())v11[1]();
  }
  return result;
}

uint64_t (***`non-virtual thunk to'WebCore::RTCIceTransport::onGatheringStateChanged(uint64_t a1, int a2))()
{
  uint64_t (**v4)();
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t (***result)();
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v12)();
  uint64_t (***v13)();

  v4 = (uint64_t (**)())(a1 - 56);
  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v5 = off_1E3361020;
  *(_QWORD *)(v5 + 8) = v4;
  *(_DWORD *)(v5 + 16) = a2;
  v6 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  v7 = *(_DWORD *)(a1 - 32);
  *(_QWORD *)(v6 + 8) = v4;
  ++*(_QWORD *)(a1 - 40);
  *(_DWORD *)(a1 - 32) = v7 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = &off_1E3360FD0;
  result[1] = v4;
  result[2] = (uint64_t (**)())v6;
  result[3] = (uint64_t (**)())v5;
  v13 = result;
  v9 = *(_QWORD *)(a1 - 48);
  if (!v9)
  {
    v13 = 0;
    v12 = &off_1E3360FD0;
    return (uint64_t (***)())v12[1]();
  }
  v10 = *(_QWORD *)(v9 + 8);
  if (!v10)
  {
    v13 = 0;
    goto LABEL_6;
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v10 - 96) + 104))(v10 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v11, 11, (uint64_t *)&v13);
  result = v13;
  v13 = 0;
  if (result)
  {
LABEL_6:
    v12 = *result;
    return (uint64_t (***)())v12[1]();
  }
  return result;
}

uint64_t (***WebCore::RTCIceTransport::onSelectedCandidatePairChanged(uint64_t a1, uint64_t (**a2)(), uint64_t (**a3)()))()
{
  uint64_t (*v4)();
  uint64_t (*v5)();
  uint64_t (**v6)();
  uint64_t v7;
  int v8;
  uint64_t (***result)();
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (**v13)();
  uint64_t (***v14)();

  v4 = *a2;
  *a2 = 0;
  v5 = *a3;
  *a3 = 0;
  v6 = (uint64_t (**)())WTF::fastMalloc((WTF *)0x20);
  *v6 = (uint64_t (*)())&off_1E3361048;
  v6[1] = (uint64_t (*)())a1;
  v6[2] = v4;
  v6[3] = v5;
  v7 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v7 = 1;
  v8 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v7 + 8) = a1;
  ++*(_QWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 24) = v8 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = &off_1E3360FD0;
  result[1] = (uint64_t (**)())a1;
  result[2] = (uint64_t (**)())v7;
  result[3] = v6;
  v14 = result;
  v10 = *(_QWORD *)(a1 + 8);
  if (!v10)
  {
    v14 = 0;
    v13 = &off_1E3360FD0;
    return (uint64_t (***)())v13[1]();
  }
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
  {
    v14 = 0;
    goto LABEL_6;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v11 - 96) + 104))(v11 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v12, 11, (uint64_t *)&v14);
  result = v14;
  v14 = 0;
  if (result)
  {
LABEL_6:
    v13 = *result;
    return (uint64_t (***)())v13[1]();
  }
  return result;
}

uint64_t (***`non-virtual thunk to'WebCore::RTCIceTransport::onSelectedCandidatePairChanged(uint64_t a1, uint64_t (**a2)(), uint64_t (**a3)()))()
{
  return WebCore::RTCIceTransport::onSelectedCandidatePairChanged(a1 - 56, a2, a3);
}

void *WebCore::RTCPeerConnection::bisoHeap(WebCore::RTCPeerConnection *this)
{
  return &WebCore::RTCPeerConnection::bisoHeap(void)::heap;
}

uint64_t WebCore::RTCPeerConnection::operator new(uint64_t this)
{
  if (this == 352)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

void WebCore::RTCPeerConnection::create(WebCore::Document *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  WebCore::Document *v11;
  WebCore::Document *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  WebCore::RTCCertificate ***v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  WTF::StringImpl *v31;
  int v32;
  WTF::StringImpl *v33;
  double v34;
  double v35;
  uint64_t v36;
  WebCore::SecurityOrigin *v37;
  uint64_t v38;
  WebCore::SecurityOrigin *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  unsigned int v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  WTF::StringImpl **v51;
  WTF::StringImpl **v52;
  WTF::StringImpl **v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF *v57;
  uint64_t v58;
  WTF::StringImpl **v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  WTF *v64;
  __int128 v65;
  __int128 v66;
  int v67;
  __int16 v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  char v71;
  uint64_t v72;
  WTF::StringImpl **v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF *v76;
  WTF *v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF *v81;
  uint64_t v82;
  uint64_t v83;
  WebCore::RTCCertificate **v84;
  uint64_t v85;
  WebCore::RTCCertificate *v86;
  WTF *v87;
  void *v88;
  WTF *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  WebCore::RTCController *v95;
  uint64_t v96;
  uint64_t v97;
  bmalloc::api *v98;
  void *v99;
  uint64_t v100;
  char v101;
  WTF::StringImpl *v102;
  char v103;
  WTF *v104;
  __int128 v105;
  uint64_t v106;
  WTF *v107;
  uint64_t v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  int v111;
  WTF *v112;
  WTF::StringImpl *v113;
  int v114;

  v4 = *((_QWORD *)a1 + 66);
  if (!v4 || !*(_QWORD *)(v4 + 8))
  {
    *(_BYTE *)a3 = 6;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
    return;
  }
  v7 = bmalloc::api::isoAllocate();
  v8 = v7;
  *(_DWORD *)(v7 + 24) = 1;
  *(_QWORD *)(v7 + 8) = 0;
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)v7 = &unk_1E33A4FC0;
  v9 = (WTF *)(v7 + 32);
  v10 = *((_QWORD *)a1 + 88);
  v11 = a1;
  if (v10)
  {
    v12 = *(WebCore::Document **)(v10 + 8);
    if (v12)
      v11 = v12;
    else
      v11 = a1;
  }
  *(_QWORD *)(v7 + 32) = &off_1E33A18C0;
  *(_QWORD *)(v7 + 40) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v7 + 32), (WebCore::Document *)((char *)v11 + 192));
  *(_QWORD *)(v8 + 32) = &off_1E33A0540;
  *(_QWORD *)(v8 + 48) = 0;
  if (*((_BYTE *)v11 + 470))
  {
    __break(0xC471u);
    goto LABEL_151;
  }
  v112 = v9;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v11 + 40, (uint64_t *)&v112, (uint64_t)&v104);
  *(_QWORD *)v8 = off_1E3361478;
  *(_QWORD *)(v8 + 32) = &unk_1E3361540;
  *(_QWORD *)(v8 + 56) = &unk_1E3361598;
  *(_BYTE *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 76) = 0;
  *(_QWORD *)(v8 + 68) = 0;
  v13 = WebCore::Document::logger(a1);
  v14 = (unsigned int *)(v13 + 8);
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 + 1, v14));
  *(_QWORD *)(v8 + 88) = v13;
  v16 = WTF::cryptographicallyRandomNumber<unsigned long long>();
  *(_QWORD *)(v8 + 104) = 0;
  *(_QWORD *)(v8 + 112) = 0;
  *(_QWORD *)(v8 + 96) = v16;
  v17 = (uint64_t *)(v8 + 120);
  WebCore::PeerConnectionBackend::create(v8, (uint64_t *)(v8 + 120));
  *(_OWORD *)(v8 + 168) = 0u;
  v18 = (WebCore::RTCCertificate ***)(v8 + 168);
  *(_BYTE *)(v8 + 128) = 0;
  *(_BYTE *)(v8 + 144) = 0;
  *(_BYTE *)(v8 + 252) = 0;
  *(_BYTE *)(v8 + 256) = 0;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 193) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *(_OWORD *)(v8 + 232) = 0u;
  *(_BYTE *)(v8 + 248) = 0;
  *(_OWORD *)(v8 + 264) = 0u;
  *(_OWORD *)(v8 + 280) = 0u;
  *(_OWORD *)(v8 + 296) = 0u;
  *(_OWORD *)(v8 + 312) = 0u;
  *(_OWORD *)(v8 + 328) = 0u;
  *(_QWORD *)(v8 + 344) = 0;
  v19 = *(_QWORD *)(v8 + 88);
  v20 = *(_QWORD *)(v8 + 96);
  v104 = (WTF *)"RTCPeerConnection";
  *(_QWORD *)&v105 = 18;
  *((_QWORD *)&v105 + 1) = "RTCPeerConnection";
  v106 = v20;
  if (*(_BYTE *)(v19 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v104);
  v21 = *((_QWORD *)a1 + 66);
  if (v21)
  {
    v22 = *(_QWORD *)(v21 + 8);
    if (v22)
    {
      v23 = *(_QWORD *)(v22 + 24);
      if (v23)
      {
        v24 = *(_QWORD *)(v23 + 8);
        if (v24)
        {
          if ((*(_QWORD *)(*(_QWORD *)(v24 + 112) + 704) & 0x8000000) == 0)
          {
            v25 = *(_QWORD *)(v8 + 88);
            v26 = *(_QWORD *)(v8 + 96);
            v104 = (WTF *)"RTCPeerConnection";
            *(_QWORD *)&v105 = 18;
            *((_QWORD *)&v105 + 1) = "RTCPeerConnection";
            v106 = v26;
            if (*(_BYTE *)(v25 + 12))
              WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [23]>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v104, "encryption is disabled");
          }
        }
      }
    }
  }
  if (!*v17)
    *(_DWORD *)(v8 + 80) = 5;
  WebCore::ActiveDOMObject::suspendIfNeeded(v9);
  if (!*v17)
  {
    *(_BYTE *)a3 = 6;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
LABEL_127:
    if (*(_DWORD *)(v8 + 24) == 1)
    {
      WebCore::RTCPeerConnection::~RTCPeerConnection((WebCore::RTCPeerConnection *)v8, v27);
      bmalloc::api::isoDeallocate(v98, v99);
    }
    else
    {
      --*(_DWORD *)(v8 + 24);
    }
    return;
  }
  v28 = *(_QWORD *)(v8 + 88);
  v29 = *(_QWORD *)(v8 + 96);
  v104 = (WTF *)"RTCPeerConnection";
  *(_QWORD *)&v105 = 18;
  *((_QWORD *)&v105 + 1) = "initializeConfiguration";
  v106 = v29;
  if (*(_BYTE *)(v28 + 12) && WebCore::LogWebRTC && byte_1ECE7CD50 >= 3u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 3, (WTF::Logger::LogSiteIdentifier *)&v104);
  v30 = WebCore::RTCPeerConnection::iceServersFromConfiguration((uint64_t)&v112, v8, (uint64_t *)a2, 0, 0);
  if (v114)
  {
    if (v114 == 1)
    {
      v31 = v113;
      v113 = 0;
      v101 = (char)v112;
      v102 = v31;
      v32 = 1;
      v103 = 1;
LABEL_124:
      ((void (*)(WTF **, WTF **))off_1E3360F60[v32])(&v104, &v112);
      goto LABEL_125;
    }
    goto LABEL_149;
  }
  WTF::WallTime::now(v30);
  v35 = v34;
  v36 = *(_QWORD *)(v8 + 40);
  if (v36)
  {
    v36 = *(_QWORD *)(v36 + 8);
    if (v36)
    {
      if (*(_BYTE *)(v36 + 178))
      {
        __break(0xC471u);
        JUMPOUT(0x195497024);
      }
      v36 -= 288;
    }
  }
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v36 + 192), v33);
  *(_QWORD *)&v105 = 0;
  v38 = *(unsigned int *)(a2 + 52);
  if (!(_DWORD)v38)
  {
    v42 = 0;
    v40 = 0;
LABEL_74:
    v109 = v40;
    v110 = (WTF::StringImpl *)__PAIR64__(v42, v38);
    v111 = 0;
    goto LABEL_75;
  }
  if (v38 >> 28)
  {
LABEL_150:
    __break(0xC471u);
LABEL_151:
    JUMPOUT(0x195497004);
  }
  v39 = v37;
  v40 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(16 * v38));
  LODWORD(v105) = v38;
  v104 = v40;
  v41 = *(unsigned int *)(a2 + 52);
  if (!(_DWORD)v41)
  {
    v42 = 0;
    goto LABEL_74;
  }
  v42 = 0;
  v43 = v35 * 1000.0;
  v100 = a2;
  v44 = *(_QWORD *)(a2 + 40);
  v45 = 8 * v41;
  while (WebCore::SecurityOrigin::isSameOriginAs(v39, *(const WebCore::SecurityOrigin **)(*(_QWORD *)v44 + 8))
       && v43 <= *(double *)(*(_QWORD *)v44 + 16))
  {
    v46 = *(WTF::StringImpl **)(*(_QWORD *)v44 + 40);
    if (v46)
      *(_DWORD *)v46 += 2;
    v109 = v46;
    v47 = *(WTF::StringImpl **)(*(_QWORD *)v44 + 48);
    if (v47)
      *(_DWORD *)v47 += 2;
    v110 = v47;
    if (v42 == (_DWORD)v105)
    {
      v48 = (_QWORD *)WTF::Vector<WebCore::CookieStoreGetOptions,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v104, v42 + 1, (unint64_t)&v109);
      v42 = DWORD1(v105);
      v40 = v104;
      v49 = (_QWORD *)((char *)v104 + 16 * DWORD1(v105));
      v50 = *v48;
      *v48 = 0;
      v51 = (WTF::StringImpl **)(v48 + 1);
      *v49 = v50;
      v52 = (WTF::StringImpl **)(v49 + 1);
    }
    else
    {
      v53 = (WTF::StringImpl **)((char *)v40 + 16 * v42);
      v109 = 0;
      *v53 = v46;
      v52 = v53 + 1;
      v51 = &v110;
    }
    v54 = *v51;
    *v51 = 0;
    *v52 = v54;
    DWORD1(v105) = ++v42;
    v55 = v110;
    v110 = 0;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2)
        WTF::StringImpl::destroy(v55, v27);
      else
        *(_DWORD *)v55 -= 2;
    }
    v56 = v109;
    v109 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        WTF::StringImpl::destroy(v56, v27);
      else
        *(_DWORD *)v56 -= 2;
    }
    v44 += 8;
    v45 -= 8;
    if (!v45)
    {
      v40 = v104;
      LODWORD(v38) = v105;
      a2 = v100;
      goto LABEL_74;
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  LOBYTE(v109) = 12;
  v111 = 1;
  v57 = v104;
  a2 = v100;
  if (v42)
  {
    v58 = 16 * v42;
    v59 = (WTF::StringImpl **)((char *)v104 + 8);
    do
    {
      v60 = *v59;
      *v59 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
          WTF::StringImpl::destroy(v60, v27);
        else
          *(_DWORD *)v60 -= 2;
      }
      v61 = *(v59 - 1);
      *(v59 - 1) = 0;
      if (v61)
      {
        if (*(_DWORD *)v61 == 2)
          WTF::StringImpl::destroy(v61, v27);
        else
          *(_DWORD *)v61 -= 2;
      }
      v59 += 2;
      v58 -= 16;
    }
    while (v58);
  }
  if (v57)
    WTF::fastFree(v57, v27);
LABEL_75:
  if (v111)
  {
    if (v111 == 1)
    {
      v62 = v110;
      v110 = 0;
      v101 = (char)v109;
      v102 = v62;
LABEL_117:
      v103 = 1;
      goto LABEL_121;
    }
LABEL_149:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_150;
  }
  if (v114)
    goto LABEL_149;
  v63 = *v17;
  v64 = v112;
  v112 = 0;
  *(_QWORD *)&v65 = v113;
  v113 = 0;
  v66 = *(_OWORD *)(a2 + 24);
  v67 = *(_DWORD *)(a2 + 32);
  v68 = *(_WORD *)(a2 + 36);
  v69 = v109;
  v109 = 0;
  v104 = v64;
  *((_QWORD *)&v65 + 1) = v66;
  v105 = v65;
  LODWORD(v106) = v67;
  WORD2(v106) = v68;
  v107 = v69;
  *(_QWORD *)&v65 = v110;
  v110 = 0;
  v108 = v65;
  v71 = (*(uint64_t (**)(uint64_t, WTF **))(*(_QWORD *)v63 + 72))(v63, &v104);
  if (HIDWORD(v108))
  {
    v72 = 16 * HIDWORD(v108);
    v73 = (WTF::StringImpl **)((char *)v107 + 8);
    do
    {
      v74 = *v73;
      *v73 = 0;
      if (v74)
      {
        if (*(_DWORD *)v74 == 2)
          WTF::StringImpl::destroy(v74, v70);
        else
          *(_DWORD *)v74 -= 2;
      }
      v75 = *(v73 - 1);
      *(v73 - 1) = 0;
      if (v75)
      {
        if (*(_DWORD *)v75 == 2)
          WTF::StringImpl::destroy(v75, v70);
        else
          *(_DWORD *)v75 -= 2;
      }
      v73 += 2;
      v72 -= 16;
    }
    while (v72);
  }
  v76 = v107;
  if (v107)
  {
    v107 = 0;
    LODWORD(v108) = 0;
    WTF::fastFree(v76, v70);
  }
  if (DWORD1(v105))
  {
    v77 = v104;
    v78 = 32 * DWORD1(v105);
    do
    {
      v79 = (WTF::StringImpl *)*((_QWORD *)v77 + 3);
      *((_QWORD *)v77 + 3) = 0;
      if (v79)
      {
        if (*(_DWORD *)v79 == 2)
          WTF::StringImpl::destroy(v79, v70);
        else
          *(_DWORD *)v79 -= 2;
      }
      v80 = (WTF::StringImpl *)*((_QWORD *)v77 + 2);
      *((_QWORD *)v77 + 2) = 0;
      if (v80)
      {
        if (*(_DWORD *)v80 == 2)
          WTF::StringImpl::destroy(v80, v70);
        else
          *(_DWORD *)v80 -= 2;
      }
      WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v77, v70);
      v77 = (WTF *)((char *)v77 + 32);
      v78 -= 32;
    }
    while (v78);
  }
  v81 = v104;
  if (v104)
  {
    v104 = 0;
    LODWORD(v105) = 0;
    WTF::fastFree(v81, v70);
  }
  if ((v71 & 1) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v101 = 12;
    goto LABEL_117;
  }
  std::__optional_storage_base<WTF::Vector<WebCore::RTCIceServer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WebCore::RTCIceServer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>(v8 + 128, (WTF::StringImpl *)a2);
  v82 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(v8 + 158) = *(_QWORD *)(a2 + 30);
  *(_QWORD *)(v8 + 152) = v82;
  v83 = *(unsigned int *)(v8 + 180);
  if ((_DWORD)v83)
  {
    v84 = *v18;
    v85 = 8 * v83;
    do
    {
      v86 = *v84;
      *v84 = 0;
      if (v86)
      {
        if (*(_DWORD *)v86 == 1)
        {
          WebCore::RTCCertificate::~RTCCertificate(v86, v27);
          WTF::fastFree(v87, v88);
        }
        else
        {
          --*(_DWORD *)v86;
        }
      }
      ++v84;
      v85 -= 8;
    }
    while (v85);
  }
  v89 = (WTF *)*v18;
  if (*v18)
  {
    *(_QWORD *)(v8 + 168) = 0;
    *(_DWORD *)(v8 + 176) = 0;
    WTF::fastFree(v89, v27);
  }
  v90 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v8 + 168) = v90;
  LODWORD(v90) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a2 + 48) = 0;
  *(_DWORD *)(v8 + 176) = v90;
  LODWORD(v90) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 52) = 0;
  *(_DWORD *)(v8 + 180) = v90;
  v102 = 0;
  v103 = 0;
  v101 = 0;
LABEL_121:
  if (v111 != -1)
    ((void (*)(WTF **, WTF::StringImpl **))off_1E3360F50[v111])(&v104, &v109);
  v32 = v114;
  if (v114 != -1)
    goto LABEL_124;
LABEL_125:
  if (v103)
  {
    *(_BYTE *)a3 = v101;
    *(_QWORD *)(a3 + 8) = v102;
    *(_DWORD *)(a3 + 16) = 1;
    if (!v8)
      return;
    goto LABEL_127;
  }
  if (*(_DWORD *)(v8 + 80) == 5)
  {
    *(_QWORD *)a3 = v8;
    *(_DWORD *)(a3 + 16) = 0;
  }
  else
  {
    v91 = *((_QWORD *)a1 + 66);
    if (v91)
    {
      v92 = *(_QWORD *)(v91 + 8);
      if (v92)
      {
        v93 = *(_QWORD *)(v92 + 24);
        if (v93)
        {
          v94 = *(_QWORD *)(v93 + 8);
          if (v94)
          {
            v95 = *(WebCore::RTCController **)(v94 + 304);
            *(_QWORD *)(v8 + 184) = v95;
            WebCore::RTCController::add(v95, (WebCore::RTCPeerConnection *)v8);
            v96 = *(_QWORD *)(v94 + 1008);
            if ((v96 & 0x8000000000000000) == 0 || v96 == -1)
            {
              if (byte_1ECE7CD50 == 4)
              {
                v97 = 4;
              }
              else if ((*(_QWORD *)(*((_QWORD *)a1 + 85) + 704) & 0x10000000) != 0)
              {
                v97 = 3;
              }
              else
              {
                v97 = byte_1ECE7CD50;
              }
              (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v94 + 296) + 48))(*(_QWORD *)(v94 + 296), v97);
            }
          }
        }
      }
    }
    *(_QWORD *)a3 = v8;
    *(_DWORD *)(a3 + 16) = 0;
  }
}

uint64_t WebCore::RTCPeerConnection::logger(WebCore::RTCPeerConnection *this)
{
  return *((_QWORD *)this + 11);
}

char *WebCore::RTCPeerConnection::logChannel(WebCore::RTCPeerConnection *this)
{
  return &WebCore::LogWebRTC;
}

const char *WebCore::RTCPeerConnection::logClassName(WebCore::RTCPeerConnection *this)
{
  return "RTCPeerConnection";
}

uint64_t WebCore::RTCPeerConnection::logIdentifier(WebCore::RTCPeerConnection *this)
{
  return *((_QWORD *)this + 12);
}

void WebCore::RTCPeerConnection::~RTCPeerConnection(WebCore::RTCPeerConnection *this, WTF *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::PeerConnectionBackend::PendingTrackEvent *v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  bmalloc::api *v22;
  bmalloc::api *v23;
  bmalloc::api *v24;
  bmalloc::api *v25;
  WebCore::RTCSctpTransport *v26;
  uint64_t v27;
  _DWORD **v28;
  uint64_t v29;
  _DWORD *v30;
  WTF *v31;
  uint64_t v32;
  WebCore::RTCDtlsTransport **v33;
  uint64_t v34;
  WebCore::RTCDtlsTransport *v35;
  bmalloc::api *v36;
  void *v37;
  WTF *v38;
  void *v39;
  WTF *v40;
  uint64_t v41;
  WebCore::RTCCertificate **v42;
  uint64_t v43;
  WebCore::RTCCertificate *v44;
  WTF *v45;
  void *v46;
  WTF *v47;
  uint64_t v48;
  WebCore::RTCCertificate **v49;
  uint64_t v50;
  WebCore::RTCCertificate *v51;
  WTF *v52;
  void *v53;
  WTF *v54;
  uint64_t v55;
  uint64_t v56;
  WebCore::RTCRtpTransceiver **v57;
  uint64_t v58;
  WebCore::RTCRtpTransceiver *v59;
  bmalloc::api *v60;
  void *v61;
  WTF *v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  void *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  WTF::StringImpl *v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  bmalloc::api *v76;
  void *v77;
  _QWORD v78[4];

  v3 = *((_QWORD *)this + 11);
  v4 = *((_QWORD *)this + 12);
  v78[0] = "RTCPeerConnection";
  v78[1] = 18;
  v78[2] = "~RTCPeerConnection";
  v78[3] = v4;
  if (*(_BYTE *)(v3 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v78);
  v5 = *((_QWORD *)this + 23);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 + 44);
    v7 = *(_DWORD *)(v5 + 40) + 1;
    *(_DWORD *)(v5 + 40) = v7;
    if (v7 > v6)
    {
      _ZN3WTF9HashTableINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEES8_NS_17IdentityExtractorENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EESD_E8removeIfIZNS_11WeakHashSetINS2_17RTCPeerConnectionES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)(v5 + 32), v78);
      v8 = 0;
      *(_DWORD *)(v5 + 40) = 0;
      v9 = *(_QWORD *)(v5 + 32);
      if (v9)
      {
        v8 = *(_DWORD *)(v9 - 12);
        if (v8 > 0x7FFFFFFE)
          v8 = 0x7FFFFFFF;
      }
      *(_DWORD *)(v5 + 44) = 2 * v8;
    }
    v10 = *((_QWORD *)this + 2);
    a2 = (WTF *)(v10 & 0xFFFFFFFFFFFFLL);
    if ((v10 & 0xFFFFFFFFFFFFLL) != 0 && *(_QWORD *)((v10 & 0xFFFFFFFFFFFFLL) + 8))
      WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::remove<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>((uint64_t *)(v5 + 32), a2);
  }
  WebCore::RTCPeerConnection::doClose(this, a2);
  if (!*((_BYTE *)this + 64))
  {
    *((_BYTE *)this + 64) = 1;
    v12 = *((_QWORD *)this + 15);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 24);
      *(_QWORD *)(v12 + 24) = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      v14 = *(_QWORD *)(v12 + 32);
      *(_QWORD *)(v12 + 32) = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      if (*(_DWORD *)(v12 + 56))
      {
        v15 = *(unsigned int *)(v12 + 60);
        if ((_DWORD)v15)
        {
          v16 = *(WebCore::PeerConnectionBackend::PendingTrackEvent **)(v12 + 48);
          v17 = 40 * v15;
          do
          {
            WebCore::PeerConnectionBackend::PendingTrackEvent::~PendingTrackEvent(v16, v11);
            v16 = (WebCore::PeerConnectionBackend::PendingTrackEvent *)(v18 + 40);
            v17 -= 40;
          }
          while (v17);
          *(_DWORD *)(v12 + 60) = 0;
        }
        v19 = *(WTF **)(v12 + 48);
        if (v19)
        {
          *(_QWORD *)(v12 + 48) = 0;
          *(_DWORD *)(v12 + 56) = 0;
          WTF::fastFree(v19, v11);
        }
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 272))(v12);
    }
  }
  v20 = (WTF::StringImpl *)*((_QWORD *)this + 43);
  *((_QWORD *)this + 43) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v11);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = (WTF::StringImpl *)*((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, (WTF::StringImpl *)v11);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = (bmalloc::api *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
    {
      v68 = (WTF::StringImpl *)*((_QWORD *)v22 + 3);
      *((_QWORD *)v22 + 3) = 0;
      if (v68)
      {
        if (*(_DWORD *)v68 == 2)
          WTF::StringImpl::destroy(v68, (WTF::StringImpl *)v11);
        else
          *(_DWORD *)v68 -= 2;
      }
      v69 = *((_QWORD *)v22 + 1);
      if (v69)
      {
        *(_QWORD *)(v69 + 8) = 3;
        *((_QWORD *)v22 + 1) = 0;
      }
      bmalloc::api::isoDeallocate(v22, v11);
    }
    else
    {
      --*(_DWORD *)v22;
    }
  }
  v23 = (bmalloc::api *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 1)
    {
      v70 = (WTF::StringImpl *)*((_QWORD *)v23 + 3);
      *((_QWORD *)v23 + 3) = 0;
      if (v70)
      {
        if (*(_DWORD *)v70 == 2)
          WTF::StringImpl::destroy(v70, (WTF::StringImpl *)v11);
        else
          *(_DWORD *)v70 -= 2;
      }
      v71 = *((_QWORD *)v23 + 1);
      if (v71)
      {
        *(_QWORD *)(v71 + 8) = 3;
        *((_QWORD *)v23 + 1) = 0;
      }
      bmalloc::api::isoDeallocate(v23, v11);
    }
    else
    {
      --*(_DWORD *)v23;
    }
  }
  v24 = (bmalloc::api *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 1)
    {
      v72 = (WTF::StringImpl *)*((_QWORD *)v24 + 3);
      *((_QWORD *)v24 + 3) = 0;
      if (v72)
      {
        if (*(_DWORD *)v72 == 2)
          WTF::StringImpl::destroy(v72, (WTF::StringImpl *)v11);
        else
          *(_DWORD *)v72 -= 2;
      }
      v73 = *((_QWORD *)v24 + 1);
      if (v73)
      {
        *(_QWORD *)(v73 + 8) = 3;
        *((_QWORD *)v24 + 1) = 0;
      }
      bmalloc::api::isoDeallocate(v24, v11);
    }
    else
    {
      --*(_DWORD *)v24;
    }
  }
  v25 = (bmalloc::api *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
    {
      v74 = (WTF::StringImpl *)*((_QWORD *)v25 + 3);
      *((_QWORD *)v25 + 3) = 0;
      if (v74)
      {
        if (*(_DWORD *)v74 == 2)
          WTF::StringImpl::destroy(v74, (WTF::StringImpl *)v11);
        else
          *(_DWORD *)v74 -= 2;
      }
      v75 = *((_QWORD *)v25 + 1);
      if (v75)
      {
        *(_QWORD *)(v75 + 8) = 3;
        *((_QWORD *)v25 + 1) = 0;
      }
      bmalloc::api::isoDeallocate(v25, v11);
    }
    else
    {
      --*(_DWORD *)v25;
    }
  }
  v26 = (WebCore::RTCSctpTransport *)*((_QWORD *)this + 37);
  *((_QWORD *)this + 37) = 0;
  if (v26)
  {
    if (*((_DWORD *)v26 + 6) == 1)
    {
      WebCore::RTCSctpTransport::~RTCSctpTransport(v26);
      bmalloc::api::isoDeallocate(v76, v77);
    }
    else
    {
      --*((_DWORD *)v26 + 6);
    }
  }
  v27 = *((unsigned int *)this + 73);
  if ((_DWORD)v27)
  {
    v28 = (_DWORD **)*((_QWORD *)this + 35);
    v29 = 8 * v27;
    do
    {
      v30 = *v28;
      *v28 = 0;
      if (v30)
      {
        if (v30[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 16))(v30);
        else
          --v30[6];
      }
      ++v28;
      v29 -= 8;
    }
    while (v29);
  }
  v31 = (WTF *)*((_QWORD *)this + 35);
  if (v31)
  {
    *((_QWORD *)this + 35) = 0;
    *((_DWORD *)this + 72) = 0;
    WTF::fastFree(v31, v11);
  }
  v32 = *((unsigned int *)this + 69);
  if ((_DWORD)v32)
  {
    v33 = (WebCore::RTCDtlsTransport **)*((_QWORD *)this + 33);
    v34 = 8 * v32;
    do
    {
      v35 = *v33;
      *v33 = 0;
      if (v35)
      {
        if (*((_DWORD *)v35 + 6) == 1)
        {
          WebCore::RTCDtlsTransport::~RTCDtlsTransport(v35);
          bmalloc::api::isoDeallocate(v36, v37);
        }
        else
        {
          --*((_DWORD *)v35 + 6);
        }
      }
      ++v33;
      v34 -= 8;
    }
    while (v34);
  }
  v38 = (WTF *)*((_QWORD *)this + 33);
  if (v38)
  {
    *((_QWORD *)this + 33) = 0;
    *((_DWORD *)this + 68) = 0;
    WTF::fastFree(v38, v11);
  }
  WTF::Deque<std::pair<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::Function<void ()(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>&&)>>,0ul>::destroyAll((unint64_t *)this + 27);
  v40 = (WTF *)*((_QWORD *)this + 29);
  if (v40)
  {
    *((_QWORD *)this + 29) = 0;
    *((_DWORD *)this + 60) = 0;
    WTF::fastFree(v40, v39);
  }
  v41 = *((unsigned int *)this + 51);
  if ((_DWORD)v41)
  {
    v42 = (WebCore::RTCCertificate **)*((_QWORD *)this + 24);
    v43 = 8 * v41;
    do
    {
      v44 = *v42;
      *v42 = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 1)
        {
          WebCore::RTCCertificate::~RTCCertificate(v44, (WTF::StringImpl *)v39);
          WTF::fastFree(v45, v46);
        }
        else
        {
          --*(_DWORD *)v44;
        }
      }
      ++v42;
      v43 -= 8;
    }
    while (v43);
  }
  v47 = (WTF *)*((_QWORD *)this + 24);
  if (v47)
  {
    *((_QWORD *)this + 24) = 0;
    *((_DWORD *)this + 50) = 0;
    WTF::fastFree(v47, v39);
  }
  v48 = *((unsigned int *)this + 45);
  if ((_DWORD)v48)
  {
    v49 = (WebCore::RTCCertificate **)*((_QWORD *)this + 21);
    v50 = 8 * v48;
    do
    {
      v51 = *v49;
      *v49 = 0;
      if (v51)
      {
        if (*(_DWORD *)v51 == 1)
        {
          WebCore::RTCCertificate::~RTCCertificate(v51, (WTF::StringImpl *)v39);
          WTF::fastFree(v52, v53);
        }
        else
        {
          --*(_DWORD *)v51;
        }
      }
      ++v49;
      v50 -= 8;
    }
    while (v50);
  }
  v54 = (WTF *)*((_QWORD *)this + 21);
  if (v54)
  {
    *((_QWORD *)this + 21) = 0;
    *((_DWORD *)this + 44) = 0;
    WTF::fastFree(v54, v39);
  }
  if (*((_BYTE *)this + 144))
    WTF::Vector<WebCore::RTCIceServer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 128, (WTF::StringImpl *)v39);
  v55 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = *((unsigned int *)this + 29);
  if ((_DWORD)v56)
  {
    v57 = (WebCore::RTCRtpTransceiver **)*((_QWORD *)this + 13);
    v58 = 8 * v56;
    do
    {
      v59 = *v57;
      *v57 = 0;
      if (v59)
      {
        if (*((_DWORD *)v59 + 2) == 1)
        {
          WebCore::RTCRtpTransceiver::~RTCRtpTransceiver(v59, v39);
          bmalloc::api::isoDeallocate(v60, v61);
        }
        else
        {
          --*((_DWORD *)v59 + 2);
        }
      }
      ++v57;
      v58 -= 8;
    }
    while (v58);
  }
  v62 = (WTF *)*((_QWORD *)this + 13);
  if (v62)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v62, v39);
  }
  v63 = (unsigned int *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v63)
  {
    v64 = v63 + 2;
    do
    {
      v65 = __ldaxr(v64);
      v66 = v65 - 1;
    }
    while (__stlxr(v66, v64));
    if (!v66)
    {
      atomic_store(1u, v63 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v63 + 8))(v63);
    }
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::RTCPeerConnection *)((char *)this + 32), v39);
  WebCore::EventTarget::~EventTarget(this, v67);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::RTCPeerConnection::~RTCPeerConnection(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::RTCPeerConnection::stop(WebCore::RTCPeerConnection *this, WTF::StringImpl *a2)
{
  uint64_t result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::PeerConnectionBackend::PendingTrackEvent *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;

  result = WebCore::RTCPeerConnection::doClose(this, a2);
  if (!*((_BYTE *)this + 64))
  {
    *((_BYTE *)this + 64) = 1;
    v5 = *((_QWORD *)this + 15);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v7 = *(_QWORD *)(v5 + 32);
      *(_QWORD *)(v5 + 32) = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      if (*(_DWORD *)(v5 + 56))
      {
        v8 = *(unsigned int *)(v5 + 60);
        if ((_DWORD)v8)
        {
          v9 = *(WebCore::PeerConnectionBackend::PendingTrackEvent **)(v5 + 48);
          v10 = 40 * v8;
          do
          {
            WebCore::PeerConnectionBackend::PendingTrackEvent::~PendingTrackEvent(v9, v4);
            v9 = (WebCore::PeerConnectionBackend::PendingTrackEvent *)(v11 + 40);
            v10 -= 40;
          }
          while (v10);
          *(_DWORD *)(v5 + 60) = 0;
        }
        v12 = *(WTF **)(v5 + 48);
        if (v12)
        {
          *(_QWORD *)(v5 + 48) = 0;
          *(_DWORD *)(v5 + 56) = 0;
          WTF::fastFree(v12, v4);
        }
      }
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 272))(v5);
    }
  }
  return result;
}

void `non-virtual thunk to'WebCore::RTCPeerConnection::~RTCPeerConnection(WebCore::RTCPeerConnection *this, WTF *a2)
{
  WebCore::RTCPeerConnection::~RTCPeerConnection((WebCore::RTCPeerConnection *)((char *)this - 32), a2);
}

{
  WebCore::RTCPeerConnection::~RTCPeerConnection((WebCore::RTCPeerConnection *)((char *)this - 56), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::RTCPeerConnection::~RTCPeerConnection((WebCore::RTCPeerConnection *)((char *)this - 32), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::RTCPeerConnection::~RTCPeerConnection((WebCore::RTCPeerConnection *)((char *)this - 56), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::RTCPeerConnection::addTrack@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, const WTF::StringImpl *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  WTF *v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  unsigned int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF *v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF *v32[4];

  v6 = result;
  v8 = *(_QWORD *)(result + 88);
  v9 = *(WTF **)(result + 96);
  v32[0] = (WTF *)"RTCPeerConnection";
  v32[1] = (WTF *)18;
  v32[2] = (WTF *)"addTrack";
  v32[3] = v9;
  if (*(_BYTE *)(v8 + 12))
  {
    if (WebCore::LogWebRTC && byte_1ECE7CD50 >= 3u)
      result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 3, (WTF::Logger::LogSiteIdentifier *)v32);
  }
  if (*(_DWORD *)(v6 + 80) == 5)
  {
    v11 = 8;
LABEL_40:
    *(_BYTE *)a4 = v11;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  v12 = *(unsigned int *)(v6 + 116);
  if ((_DWORD)v12)
  {
    v13 = *(_QWORD *)(v6 + 104);
    v14 = 8 * v12;
    while (1)
    {
      result = WTF::equal(*(WTF **)(*(_QWORD *)(*(_QWORD *)v13 + 40) + 48), *(const WTF::StringImpl **)(*(_QWORD *)(*a2 + 96) + 48), a3);
      if ((_DWORD)result)
        break;
      v13 += 8;
      v14 -= 8;
      if (!v14)
        goto LABEL_14;
    }
    v11 = 12;
    goto LABEL_40;
  }
LABEL_14:
  v15 = *(_QWORD *)(v6 + 120);
  v16 = *a2;
  if (!*(_QWORD *)a3 || (v17 = **(unsigned int **)a3, !(_DWORD)v17))
  {
    v32[0] = 0;
    goto LABEL_29;
  }
  v18 = WTF::fastMalloc((WTF *)(8 * v17 + 8));
  *(_DWORD *)v18 = v17;
  bzero((void *)(v18 + 8), 8 * v17);
  v20 = *(unsigned int **)a3;
  v32[0] = (WTF *)v18;
  if (!v20 || (v21 = *v20, !(_DWORD)v21))
  {
LABEL_29:
    result = (*(uint64_t (**)(uint64_t, uint64_t, WTF **))(*(_QWORD *)v15 + 112))(v15, v16, v32);
    v27 = v32[0];
    v32[0] = 0;
    if (v27)
    {
      v29 = (WTF::StringImpl **)((char *)v27 + 8);
      v28 = *(unsigned int *)v27;
      if ((_DWORD)v28)
      {
        v30 = 8 * v28;
        do
        {
          v31 = *v29;
          *v29 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v26);
            else
              *(_DWORD *)v31 -= 2;
          }
          ++v29;
          v30 -= 8;
        }
        while (v30);
      }
      return WTF::fastFree(v27, v26);
    }
    return result;
  }
  v22 = 8 * v21;
  v23 = 1;
  while (1)
  {
    v24 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)&v20[2 * v23] + 96) + 48);
    if (v24)
      *v24 += 2;
    if (*(_DWORD *)v18 <= (v23 - 1))
      break;
    v25 = *(WTF::StringImpl **)(v18 + 8 * v23);
    *(_QWORD *)(v18 + 8 * v23) = v24;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v19);
      else
        *(_DWORD *)v25 -= 2;
    }
    ++v23;
    v22 -= 8;
    if (!v22)
      goto LABEL_29;
  }
  result = 146;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RTCPeerConnection::removeTrack@<X0>(uint64_t this@<X0>, WebCore::RTCRtpSender *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v16;
  int v17;
  int v18;
  _QWORD v19[4];

  v4 = this;
  v6 = *(_QWORD *)(this + 88);
  v7 = *(_QWORD *)(this + 96);
  v19[0] = "RTCPeerConnection";
  v19[1] = 18;
  v19[2] = "removeTrack";
  v19[3] = v7;
  if (*(_BYTE *)(v6 + 12))
  {
    if (WebCore::LogWebRTC && byte_1ECE7CD50 >= 3u)
      this = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 3, (WTF::Logger::LogSiteIdentifier *)v19);
  }
  if (*(_DWORD *)(v4 + 80) == 5)
  {
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = 8;
LABEL_14:
    *(_BYTE *)a3 = v9;
    *(_BYTE *)(a3 + 16) = 1;
    return this;
  }
  v10 = *((_QWORD *)a2 + 9);
  if (v10)
    v10 = *(_QWORD *)(v10 + 8);
  if (v10 != v4)
  {
    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v9 = 12;
    goto LABEL_14;
  }
  v11 = *(unsigned int *)(v4 + 116);
  if ((_DWORD)v11)
  {
    v12 = *(uint64_t **)(v4 + 104);
    v13 = 8 * v11;
    while (1)
    {
      v14 = *v12;
      if (*(WebCore::RTCRtpSender **)(*v12 + 40) == a2)
        break;
      ++v12;
      v13 -= 8;
      if (!v13)
        goto LABEL_36;
    }
    this = *((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 8) && this != 0)
    {
      v16 = (WTF::StringImpl *)*((_QWORD *)a2 + 6);
      *((_QWORD *)a2 + 6) = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
        {
          WTF::StringImpl::destroy(v16, a2);
          this = *((_QWORD *)a2 + 4);
          *((_QWORD *)a2 + 4) = 0;
          if (!this)
            goto LABEL_30;
          goto LABEL_28;
        }
        *(_DWORD *)v16 -= 2;
      }
      *((_QWORD *)a2 + 4) = 0;
LABEL_28:
      if (*(_DWORD *)(this + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)this + 16))(this);
      else
        --*(_DWORD *)(this + 24);
LABEL_30:
      v17 = *(_DWORD *)(v14 + 24);
      if (v17)
      {
        if (v17 != 1)
        {
LABEL_35:
          this = (*(uint64_t (**)(_QWORD, WebCore::RTCRtpSender *))(**(_QWORD **)(v4 + 120) + 120))(*(_QWORD *)(v4 + 120), a2);
          goto LABEL_36;
        }
        v18 = 3;
      }
      else
      {
        v18 = 2;
      }
      *(_DWORD *)(v14 + 24) = v18;
      goto LABEL_35;
    }
  }
LABEL_36:
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return this;
}

uint64_t WebCore::RTCPeerConnection::addTransceiver@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int v11;
  char v12;
  uint64_t v13;
  __int16 *v14;
  WebCore::ActiveDOMCallback **v15;
  _QWORD v16[4];

  v6 = result;
  v8 = *(_QWORD *)(result + 88);
  v9 = *(_QWORD *)(result + 96);
  v16[0] = "RTCPeerConnection";
  v16[1] = 18;
  v16[2] = "addTransceiver";
  v16[3] = v9;
  if (*(_BYTE *)(v8 + 12))
  {
    if (WebCore::LogWebRTC && byte_1ECE7CD50 >= 3u)
      result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 3, (WTF::Logger::LogSiteIdentifier *)v16);
  }
  v11 = *((_DWORD *)a2 + 2);
  if (v11 == 1)
  {
    result = MEMORY[0x19AEA53F4](*a2, "audio", 5);
    if ((result & 1) == 0)
    {
      result = MEMORY[0x19AEA53F4](*a2, "video", 5);
      if ((result & 1) == 0)
      {
        v12 = 33;
        goto LABEL_20;
      }
    }
    if (*(_DWORD *)(v6 + 80) != 5)
      return (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v6 + 120) + 128))(*(_QWORD *)(v6 + 120), a2, a3);
LABEL_14:
    v12 = 8;
LABEL_20:
    *(_BYTE *)a4 = v12;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  if (*(_DWORD *)(v6 + 80) == 5)
    goto LABEL_14;
  if (v11)
  {
    v13 = std::__throw_bad_variant_access[abi:sn180100]();
    return (uint64_t)WebCore::RTCPeerConnection::createOffer(v13, v14, v15);
  }
  else
  {
    v16[0] = *a2;
    *a2 = 0;
    (*(void (**)(_QWORD, _QWORD *, uint64_t))(**(_QWORD **)(v6 + 120) + 136))(*(_QWORD *)(v6 + 120), v16, a3);
    result = v16[0];
    v16[0] = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 24) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      else
        --*(_DWORD *)(result + 24);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::RTCPeerConnection::createOffer(uint64_t a1, __int16 *a2, WebCore::ActiveDOMCallback **a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  WebCore::ActiveDOMCallback *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  __int16 v11;
  uint64_t v12;
  WTF::StringImpl *v13[4];

  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(WTF::StringImpl **)(a1 + 96);
  v13[0] = (WTF::StringImpl *)"RTCPeerConnection";
  v13[1] = (WTF::StringImpl *)18;
  v13[2] = (WTF::StringImpl *)"createOffer";
  v13[3] = v7;
  if (*(_BYTE *)(v6 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v13);
  if (*(_DWORD *)(a1 + 80) == 5)
  {
    v8 = *a3;
    v13[0] = 0;
    WebCore::DeferredPromise::reject((uint64_t)v8, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)v13, 0);
    result = v13[0];
    v13[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v11 = *a2;
    v12 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v12 = off_1E3361080;
    *(_QWORD *)(v12 + 8) = a1;
    *(_WORD *)(v12 + 16) = v11;
    v13[0] = (WTF::StringImpl *)v12;
    WebCore::RTCPeerConnection::chainOperation(a1, a3, v13);
    result = v13[0];
    if (v13[0])
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v13[0] + 8))(v13[0]);
  }
  return result;
}

WTF::StringImpl *WebCore::RTCPeerConnection::chainOperation(uint64_t a1, WebCore::ActiveDOMCallback **a2, WebCore::ActiveDOMCallback **a3)
{
  WebCore::ActiveDOMCallback *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::ActiveDOMCallback *v13;
  WebCore::ActiveDOMCallback *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  WTF *v18;
  unsigned int v19;
  void *v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  WTF *v24;
  WTF *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  WTF::StringImpl **v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WebCore::ActiveDOMCallback **v35;
  uint64_t v36;
  WTF::StringImpl **v37;
  WTF::StringImpl **v38;
  WTF::StringImpl **v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;

  v3 = *a2;
  if (*(_DWORD *)(a1 + 80) == 5)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    WebCore::DeferredPromise::reject((uint64_t)v3, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v43, 0);
    result = v43;
    v43 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
    return result;
  }
  v9 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v9 = 1;
  ++*(_DWORD *)(a1 + 24);
  *(_QWORD *)(v9 + 8) = a1;
  ++*(_QWORD *)(a1 + 48);
  v10 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v10 = &off_1E3361358;
  *((_QWORD *)v10 + 1) = a1;
  *((_QWORD *)v10 + 2) = v9;
  v43 = v10;
  WebCore::DeferredPromise::whenSettled(v3, (uint64_t *)&v43);
  result = v43;
  v43 = 0;
  if (result)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  v12 = *(_QWORD *)(a1 + 216);
  v11 = *(_QWORD *)(a1 + 224);
  if (!*(_BYTE *)(a1 + 248) && v12 == v11)
  {
    *(_BYTE *)(a1 + 248) = 1;
    return (WTF::StringImpl *)(*(uint64_t (**)(WebCore::ActiveDOMCallback *, WebCore::ActiveDOMCallback **))(*(_QWORD *)*a3 + 16))(*a3, a2);
  }
  v13 = *a2;
  *a2 = 0;
  v14 = *a3;
  *a3 = 0;
  if (v12)
  {
    if (v11 + 1 == v12)
    {
      LODWORD(v15) = *(_DWORD *)(a1 + 240);
LABEL_19:
      v16 = v15;
      v17 = ((unint64_t)v15 >> 2) + v15;
      if (v17 <= 0xF)
        v17 = 15;
      if (v17 >= 0xFFFFFFF)
      {
        __break(0xC471u);
        return result;
      }
      v18 = *(WTF **)(a1 + 232);
      v19 = v17 + 1;
      result = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(16 * (v17 + 1)));
      v21 = result;
      *(_DWORD *)(a1 + 240) = v19;
      *(_QWORD *)(a1 + 232) = result;
      v22 = *(_QWORD *)(a1 + 216);
      v23 = *(_QWORD *)(a1 + 224);
      v24 = (WTF *)((char *)v18 + 16 * v23);
      if (v22 <= v23)
      {
        if (v22 != v23)
        {
          v29 = (WTF::StringImpl **)((char *)result + 16 * v22);
          v30 = (WTF::StringImpl **)((char *)v18 + 16 * v22);
          do
          {
            v31 = *v30;
            *v30 = 0;
            *v29 = v31;
            v32 = v30[1];
            v30[1] = 0;
            v29[1] = v32;
            v33 = v30[1];
            v30[1] = 0;
            if (v33)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v33 + 8))(v33);
            result = *v30;
            *v30 = 0;
            if (result)
            {
              if (*((_DWORD *)result + 4) == 1)
                result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 16))(result);
              else
                --*((_DWORD *)result + 4);
            }
            v30 += 2;
            v29 += 2;
          }
          while (v30 != (WTF::StringImpl **)v24);
        }
      }
      else
      {
        if (v23)
        {
          v25 = v18;
          do
          {
            v26 = *(WTF::StringImpl **)v25;
            *(_QWORD *)v25 = 0;
            *v21 = v26;
            v27 = *((_QWORD *)v25 + 1);
            *((_QWORD *)v25 + 1) = 0;
            v21[1] = v27;
            v28 = *((_QWORD *)v25 + 1);
            *((_QWORD *)v25 + 1) = 0;
            if (v28)
              (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
            result = *(WTF::StringImpl **)v25;
            *(_QWORD *)v25 = 0;
            if (result)
            {
              if (*((_DWORD *)result + 4) == 1)
                result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 16))(result);
              else
                --*((_DWORD *)result + 4);
            }
            v25 = (WTF *)((char *)v25 + 16);
            v21 += 2;
          }
          while (v25 != v24);
          v19 = *(_DWORD *)(a1 + 240);
          v22 = *(_QWORD *)(a1 + 216);
          v21 = *(_QWORD **)(a1 + 232);
        }
        v34 = v22 - v16 + v19;
        if (v22 != v16)
        {
          v37 = (WTF::StringImpl **)((char *)v18 + 16 * v16);
          v38 = (WTF::StringImpl **)&v21[2 * v34];
          v39 = (WTF::StringImpl **)((char *)v18 + 16 * v22);
          do
          {
            v40 = *v39;
            *v39 = 0;
            *v38 = v40;
            v41 = v39[1];
            v39[1] = 0;
            v38[1] = v41;
            v42 = v39[1];
            v39[1] = 0;
            if (v42)
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v42 + 8))(v42);
            result = *v39;
            *v39 = 0;
            if (result)
            {
              if (*((_DWORD *)result + 4) == 1)
                result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 16))(result);
              else
                --*((_DWORD *)result + 4);
            }
            v39 += 2;
            v38 += 2;
          }
          while (v39 != v37);
        }
        *(_QWORD *)(a1 + 216) = v34;
      }
      if (v18)
      {
        if (*(WTF **)(a1 + 232) == v18)
        {
          *(_QWORD *)(a1 + 232) = 0;
          *(_DWORD *)(a1 + 240) = 0;
        }
        result = (WTF::StringImpl *)WTF::fastFree(v18, v20);
      }
      v11 = *(_QWORD *)(a1 + 224);
    }
  }
  else
  {
    v15 = *(unsigned int *)(a1 + 240);
    if (v11)
    {
      if (v11 == v15 - 1)
        goto LABEL_19;
    }
    else
    {
      if (!(_DWORD)v15)
        goto LABEL_19;
      v11 = 0;
    }
  }
  v35 = (WebCore::ActiveDOMCallback **)(*(_QWORD *)(a1 + 232) + 16 * v11);
  *v35 = v13;
  v35[1] = v14;
  if (v11 == *(unsigned int *)(a1 + 240) - 1)
    v36 = 0;
  else
    v36 = v11 + 1;
  *(_QWORD *)(a1 + 224) = v36;
  return result;
}

WTF::StringImpl *WebCore::RTCPeerConnection::createAnswer(uint64_t a1, char *a2, WebCore::ActiveDOMCallback **a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  WebCore::ActiveDOMCallback *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  char v11;
  uint64_t v12;
  WTF::StringImpl *v13[4];

  v6 = *(_QWORD *)(a1 + 88);
  v7 = *(WTF::StringImpl **)(a1 + 96);
  v13[0] = (WTF::StringImpl *)"RTCPeerConnection";
  v13[1] = (WTF::StringImpl *)18;
  v13[2] = (WTF::StringImpl *)"createAnswer";
  v13[3] = v7;
  if (*(_BYTE *)(v6 + 12))
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v13);
  if (*(_DWORD *)(a1 + 80) == 5)
  {
    v8 = *a3;
    v13[0] = 0;
    WebCore::DeferredPromise::reject((uint64_t)v8, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)v13, 0);
    result = v13[0];
    v13[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v11 = *a2;
    v12 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v12 = off_1E33610D0;
    *(_QWORD *)(v12 + 8) = a1;
    *(_BYTE *)(v12 + 16) = v11;
    v13[0] = (WTF::StringImpl *)v12;
    WebCore::RTCPeerConnection::chainOperation(a1, a3, v13);
    result = v13[0];
    if (v13[0])
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v13[0] + 8))(v13[0]);
  }
  return result;
}

WebCore::ActiveDOMCallback *WebCore::RTCPeerConnection::setLocalDescription(uint64_t a1, uint64_t *a2, WebCore::ActiveDOMCallback **a3)
{
  WebCore::ActiveDOMCallback *v4;
  WTF::StringImpl *v5;
  WebCore::ActiveDOMCallback *result;
  WebCore::ActiveDOMCallback *v9;
  WebCore::ActiveDOMCallback *v10;
  WebCore::ActiveDOMCallback *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WebCore::ActiveDOMCallback *v16[5];

  if (*(_DWORD *)(a1 + 80) == 5)
  {
    v4 = *a3;
    v16[0] = 0;
    WebCore::DeferredPromise::reject((uint64_t)v4, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)v16, 0);
    result = v16[0];
    v16[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result != 2)
      {
        *(_DWORD *)result -= 2;
        return result;
      }
      return (WebCore::ActiveDOMCallback *)WTF::StringImpl::destroy(result, v5);
    }
  }
  else
  {
    v10 = *(WebCore::ActiveDOMCallback **)(a1 + 88);
    v9 = *(WebCore::ActiveDOMCallback **)(a1 + 96);
    v16[0] = (WebCore::ActiveDOMCallback *)"RTCPeerConnection";
    v16[1] = (WebCore::ActiveDOMCallback *)18;
    v16[2] = (WebCore::ActiveDOMCallback *)"setLocalDescription";
    v16[3] = v9;
    if (*((_BYTE *)a2 + 16))
    {
      v11 = (WebCore::ActiveDOMCallback *)a2[1];
      if (v11)
        *(_DWORD *)v11 += 2;
    }
    else
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v11 = v16[4];
    }
    v15 = v11;
    if (*((_BYTE *)v10 + 12))
    {
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [25],WTF::String>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v16, "Setting local description to:\n", (uint64_t *)&v15);
      v11 = v15;
    }
    v15 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = *((unsigned __int8 *)a2 + 16);
    if (*((_BYTE *)a2 + 16))
    {
      v13 = *a2;
      v10 = (WebCore::ActiveDOMCallback *)a2[1];
      a2[1] = 0;
    }
    else
    {
      v13 = 0;
    }
    v14 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)v14 = &off_1E3361120;
    *(_QWORD *)(v14 + 8) = a1;
    *(_BYTE *)(v14 + 16) = 0;
    *(_BYTE *)(v14 + 32) = 0;
    if (v12)
    {
      *(_QWORD *)(v14 + 16) = v13;
      *(_QWORD *)(v14 + 24) = v10;
      *(_BYTE *)(v14 + 32) = 1;
      v10 = 0;
    }
    v16[0] = (WebCore::ActiveDOMCallback *)v14;
    WebCore::RTCPeerConnection::chainOperation(a1, a3, v16);
    result = v16[0];
    v16[0] = 0;
    if (result)
      result = (WebCore::ActiveDOMCallback *)(*(uint64_t (**)(WebCore::ActiveDOMCallback *))(*(_QWORD *)result + 8))(result);
    if (v12 && v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        result = v10;
        return (WebCore::ActiveDOMCallback *)WTF::StringImpl::destroy(result, v5);
      }
      *(_DWORD *)v10 -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::RTCPeerConnection::setRemoteDescription(uint64_t a1, uint64_t *a2, WebCore::ActiveDOMCallback **a3)
{
  WebCore::ActiveDOMCallback *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  uint64_t v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14[4];

  if (*(_DWORD *)(a1 + 80) == 5)
  {
    v4 = *a3;
    v14[0] = 0;
    WebCore::DeferredPromise::reject((uint64_t)v4, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)v14, 0);
    result = v14[0];
    v14[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 88);
    v10 = *(WTF::StringImpl **)(a1 + 96);
    v14[0] = (WTF::StringImpl *)"RTCPeerConnection";
    v14[1] = (WTF::StringImpl *)18;
    v14[2] = (WTF::StringImpl *)"setRemoteDescription";
    v14[3] = v10;
    if (*(_BYTE *)(v9 + 12))
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [25],WTF::String>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v14, "Setting remote description to:\n", a2 + 1);
    v11 = *(_DWORD *)a2;
    v12 = a2[1];
    a2[1] = 0;
    v13 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v13 = &off_1E3361170;
    *(_QWORD *)(v13 + 8) = a1;
    *(_DWORD *)(v13 + 16) = v11;
    *(_QWORD *)(v13 + 24) = v12;
    v14[0] = (WTF::StringImpl *)v13;
    WebCore::RTCPeerConnection::chainOperation(a1, a3, v14);
    result = v14[0];
    if (v14[0])
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v14[0] + 8))(v14[0]);
  }
  return result;
}

WTF *WebCore::RTCPeerConnection::addIceCandidate(uint64_t a1, uint64_t a2, WebCore::ActiveDOMCallback **a3)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *result;
  WebCore::ActiveDOMCallback *v10;
  char v11;
  WTF::StringImpl *v12;
  WebCore::ActiveDOMCallback *v13;
  bmalloc::api *v14;
  void *v15;
  WebCore::ActiveDOMCallback *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  WTF::StringImpl *v23;
  WebCore::ActiveDOMCallback *v24;
  WTF::StringImpl *v25;
  const char *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  char v29;
  WTF::StringImpl *v30;
  char v31;
  objc_class *v32;

  v29 = 0;
  v31 = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    v32 = (objc_class *)&v29;
    v5 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v5 == -1)
    {
      v18 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::RTCPeerConnection::iceServersFromConfiguration(v18, v19, v20, v21, v22);
    }
    v24 = (WebCore::ActiveDOMCallback *)&v32;
    ((void (*)(WTF::StringImpl **__return_ptr, WebCore::ActiveDOMCallback **))off_1E3361200[v5])(&v28, &v24);
    v6 = v28;
  }
  else
  {
    v6 = 0;
  }
  v8 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 96);
  v24 = (WebCore::ActiveDOMCallback *)"RTCPeerConnection";
  v25 = (WTF::StringImpl *)18;
  v26 = "addIceCandidate";
  v27 = v7;
  if (v6)
  {
    result = (WTF *)*((_QWORD *)v6 + 2);
    if (result)
      *(_DWORD *)result += 2;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    result = v32;
  }
  v28 = result;
  if (*(_BYTE *)(v8 + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [25],WTF::String>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v24, "Received ice candidate:\n", (uint64_t *)&v28);
    result = v28;
  }
  v28 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  if (v31)
  {
    v10 = *a3;
    v11 = v29;
    v12 = v30;
    if (v30)
      *(_DWORD *)v30 += 4;
    v32 = 0;
    LOBYTE(v24) = v11;
    v25 = v12;
    WebCore::DeferredPromise::reject((uint64_t)v10, (unsigned __int8 *)&v24, 0, &v32);
    result = v25;
    v25 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
      {
        result = (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
        if (!v12)
          goto LABEL_33;
        goto LABEL_21;
      }
      *(_DWORD *)result -= 2;
    }
    if (!v12)
      goto LABEL_33;
LABEL_21:
    if (*(_DWORD *)v12 == 2)
      result = (WTF *)WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v12 -= 2;
    goto LABEL_33;
  }
  if (!v6 || *((_QWORD *)v6 + 3) || *((_BYTE *)v6 + 34))
  {
    if (*(_DWORD *)(a1 + 80) != 5)
    {
      v13 = (WebCore::ActiveDOMCallback *)WTF::fastMalloc((WTF *)0x18);
      *(_QWORD *)v13 = &off_1E3361230;
      *((_QWORD *)v13 + 1) = a1;
      *((_QWORD *)v13 + 2) = v6;
      v24 = v13;
      WebCore::RTCPeerConnection::chainOperation(a1, a3, &v24);
      result = v24;
      if (v24)
        result = (WTF *)(*(uint64_t (**)(WebCore::ActiveDOMCallback *))(*(_QWORD *)v24 + 8))(v24);
      goto LABEL_36;
    }
LABEL_33:
    if (!v6)
      goto LABEL_36;
    goto LABEL_34;
  }
  v16 = *a3;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v32 = 0;
  LOBYTE(v24) = 33;
  if (v23)
    *(_DWORD *)v23 += 2;
  v25 = v23;
  WebCore::DeferredPromise::reject((uint64_t)v16, (unsigned __int8 *)&v24, 0, &v32);
  v17 = v25;
  v25 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v17 -= 2;
  }
  result = v23;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      result = (WTF *)WTF::StringImpl::destroy(v23, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v23 -= 2;
  }
LABEL_34:
  if (*(_DWORD *)v6 == 1)
  {
    WebCore::RTCIceCandidate::~RTCIceCandidate(v6, (WTF::StringImpl *)a2);
    result = (WTF *)bmalloc::api::isoDeallocate(v14, v15);
  }
  else
  {
    --*(_DWORD *)v6;
  }
LABEL_36:
  if (v31)
  {
    result = v30;
    v30 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF *WebCore::RTCPeerConnection::iceServersFromConfiguration(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, int a5)
{
  BOOL v7;
  uint64_t v8;
  WTF *result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF *v14;
  unsigned int v15;
  WTF *v16;
  int v17;
  WTF *v18;
  WTF *v19;
  WTF *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  const WTF::URL *v24;
  WTF::StringImpl *v25;
  WebCore *v26;
  WebCore *v27;
  uint64_t v28;
  WebCore *v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  WTF *v36;
  WTF::StringImpl *v37;
  WTF *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  WTF *v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  WTF *v49;
  WTF *v50;
  WTF *v51;
  int v52;
  _QWORD *v53;
  WTF::StringImpl **v54;
  WTF::StringImpl **v55;
  uint64_t v56;
  void *v57;
  WTF *v58;
  WTF::StringImpl *v59;
  unint64_t v60;
  WTF *v61;
  WTF *v62;
  unsigned int v63;
  unsigned int v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  int v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  WTF::StringImpl **v72;
  WTF::StringImpl **v73;
  WTF::StringImpl **v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  char *v77;
  WTF **v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  WTF::StringImpl *v82;
  WTF::StringImpl *v83;
  WTF *v84;
  WTF *v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  char v88;
  void *v89;
  WTF::StringImpl *v90;
  WTF *v91;
  uint64_t v92;
  WTF *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  uint64_t v96;
  WTF *v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t StatusReg;
  _QWORD *v105;
  uint64_t v106;
  WTF *v107;
  uint64_t v108;
  WTF *v109;
  uint64_t v110;
  WTF::StringImpl *v111;
  _DWORD v112[8];
  WTF **v113;
  WTF **v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;

  if (a4)
  {
    if (*((_DWORD *)a3 + 7) != *(_DWORD *)(a4 + 28)
      || *((_DWORD *)a3 + 8) != *(_DWORD *)(a4 + 32)
      || (*((unsigned __int16 *)a3 + 18) != *(unsigned __int16 *)(a4 + 36) ? (v7 = a5 == 0) : (v7 = 1), !v7))
    {
      result = (WTF *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a1 = 10;
      *(_DWORD *)(a1 + 16) = 1;
      return result;
    }
  }
  v110 = 0;
  if (!*((_BYTE *)a3 + 16) || (v8 = *((unsigned int *)a3 + 3), !(_DWORD)v8))
  {
    result = 0;
    v96 = 0;
    goto LABEL_143;
  }
  if (v8 >> 27)
  {
    __break(0xC471u);
    goto LABEL_181;
  }
  result = (WTF *)WTF::fastMalloc((WTF *)(32 * v8));
  LODWORD(v110) = v8;
  v109 = result;
  if (!*((_BYTE *)a3 + 16))
  {
LABEL_178:
    std::__throw_bad_optional_access[abi:sn180100]();
LABEL_179:
    __break(0xC471u);
LABEL_181:
    JUMPOUT(0x195499398);
  }
  v10 = *((_DWORD *)a3 + 3);
  if (!v10)
  {
    v96 = v8;
    goto LABEL_143;
  }
  v11 = *a3;
  v100 = *a3 + 48 * v10;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v101 = a1;
  while (1)
  {
    v107 = 0;
    v108 = 0;
    v113 = &v107;
    v114 = &v107;
    v12 = *(unsigned int *)(v11 + 16);
    if ((_DWORD)v12 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_178;
    }
    v111 = (WTF::StringImpl *)&v113;
    v102 = v11;
    ((void (*)(WTF::StringImpl **, uint64_t))off_1E3361270[v12])(&v111, v11);
    v14 = v107;
    v15 = HIDWORD(v108);
    v16 = (WTF *)((char *)v107 + 8 * HIDWORD(v108));
    v17 = 0;
    if (HIDWORD(v108))
    {
      v18 = v107;
      v19 = (WTF *)((char *)v107 + 8 * HIDWORD(v108));
      v20 = v19;
      while (1)
      {
        v111 = 0;
        WTF::URL::invalidate((WTF::URL *)&v111);
        MEMORY[0x19AEA52F8](&v113, &v111, v14, 0);
        v22 = v111;
        v111 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v21);
          else
            *(_DWORD *)v22 -= 2;
        }
        v111 = (WTF::StringImpl *)WTF::URL::path((WTF::URL *)&v113);
        *(_QWORD *)v112 = v23;
        if ((WTF::StringView::endsWithIgnoringASCIICase() & 1) != 0
          || !WTF::portAllowed()
          || (WebCore::isIPAddressDisallowed((WebCore *)&v113, v24) & 1) != 0)
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v25 = v111;
          v26 = (WebCore *)bmalloc::api::isoAllocate();
          v27 = v26;
          v28 = *(_QWORD *)(StatusReg + 736);
          if (!v28 || (v29 = *(WebCore **)(v28 + 96)) == 0)
          {
            v26 = (WebCore *)WebCore::threadGlobalDataSlow(v26);
            v29 = v26;
          }
          v30 = *((_QWORD *)v29 + 5);
          if (!v30)
          {
            v26 = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v29);
            v30 = *((_QWORD *)v29 + 5);
          }
          WTF::MonotonicTime::now(v26);
          *((_QWORD *)v27 + 1) = 0;
          *((_DWORD *)v27 + 4) = 1;
          *((_DWORD *)v27 + 5) = *((_DWORD *)v27 + 5) & 0xFFC00000 | 0x148200 | (*(_QWORD *)(v30 + 976) != 0);
          v32 = *(_DWORD **)(v30 + 976);
          if (v32)
            *v32 += 2;
          *((_QWORD *)v27 + 3) = v32;
          *((_QWORD *)v27 + 4) = 0;
          *((_QWORD *)v27 + 5) = 0;
          *((_QWORD *)v27 + 6) = 0;
          *((_QWORD *)v27 + 7) = v31;
          *(_QWORD *)v27 = off_1E33615D8;
          *((_QWORD *)v27 + 8) = 0;
          *((_QWORD *)v27 + 9) = 0;
          *((_DWORD *)v27 + 20) = 0;
          v33 = *(WTF::StringImpl **)v14;
          *(_QWORD *)v14 = 0;
          *((_QWORD *)v27 + 11) = v33;
          *((_WORD *)v27 + 48) = 701;
          *((_QWORD *)v27 + 13) = v25;
          v111 = v27;
          WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)(a2 + 32), a2, 9, (uint64_t *)&v111);
          if (v111)
          {
            if (*((_DWORD *)v111 + 4) == 1)
              (*(void (**)(void))(*(_QWORD *)v111 + 8))();
            else
              --*((_DWORD *)v111 + 4);
          }
          v34 = 1;
        }
        else
        {
          v34 = 0;
        }
        v35 = (WTF::StringImpl *)v113;
        v113 = 0;
        if (!v35)
          goto LABEL_38;
        if (*(_DWORD *)v35 != 2)
          break;
        WTF::StringImpl::destroy(v35, v13);
        if (v34)
        {
LABEL_39:
          v36 = v14;
          if (v20 != (WTF *)((char *)v107 + 8 * HIDWORD(v108)))
          {
            if (v14 == v19)
            {
              v36 = v20;
            }
            else
            {
              memmove(v20, v19, v18 - v19);
              v36 = (WTF *)((char *)v20 + v18 - v19);
            }
          }
          v37 = *(WTF::StringImpl **)v14;
          *(_QWORD *)v14 = 0;
          v19 = (WTF *)((char *)v14 + 8);
          if (v37)
          {
            if (*(_DWORD *)v37 == 2)
              WTF::StringImpl::destroy(v37, v13);
            else
              *(_DWORD *)v37 -= 2;
          }
          ++v17;
          v20 = v36;
          goto LABEL_51;
        }
LABEL_50:
        v36 = v20;
LABEL_51:
        v14 = (WTF *)((char *)v14 + 8);
        v18 = (WTF *)((char *)v18 + 8);
        if (v14 >= v16)
        {
          v14 = v107;
          v15 = HIDWORD(v108);
          v16 = v36;
          a1 = v101;
          goto LABEL_56;
        }
      }
      *(_DWORD *)v35 -= 2;
LABEL_38:
      if (v34)
        goto LABEL_39;
      goto LABEL_50;
    }
    v19 = v107;
LABEL_56:
    v38 = (WTF *)((char *)v14 + 8 * v15);
    if (v19 != v38)
    {
      memmove(v16, v19, v38 - v19);
      v15 = HIDWORD(v108);
    }
    v105 = 0;
    v106 = 0;
    v39 = v15 - v17;
    HIDWORD(v108) = v39;
    if ((_DWORD)v39)
    {
      if (v39 >= 0x6666667)
        goto LABEL_179;
      v40 = 40 * v39;
      v41 = WTF::fastMalloc((WTF *)(40 * v39));
      LODWORD(v106) = (v40 & 0xFFFFFFF8) / 0x28;
      v105 = (_QWORD *)v41;
      if (HIDWORD(v108))
      {
        v42 = 0;
        v43 = v107;
        v44 = v41 + 28;
        v45 = 8 * HIDWORD(v108);
        do
        {
          v113 = 0;
          WTF::URL::invalidate((WTF::URL *)&v113);
          MEMORY[0x19AEA52F8](&v111, &v113, v43, 0);
          v46 = (WTF::StringImpl *)v113;
          v113 = 0;
          if (v46)
          {
            if (*(_DWORD *)v46 == 2)
              WTF::StringImpl::destroy(v46, v13);
            else
              *(_DWORD *)v46 -= 2;
          }
          *(_QWORD *)(v44 - 28) = v111;
          *(_DWORD *)(v44 - 20) = v112[0];
          *(_OWORD *)(v44 - 16) = *(_OWORD *)&v112[1];
          *(_QWORD *)v44 = *(_QWORD *)&v112[5];
          *(_DWORD *)(v44 + 8) = v112[7];
          v43 = (WTF *)((char *)v43 + 8);
          ++v42;
          v44 += 40;
          v45 -= 8;
        }
        while (v45);
        HIDWORD(v106) = v42;
      }
    }
    v47 = *(unsigned int *)(v102 + 16);
    if ((_DWORD)v47 == -1)
      goto LABEL_75;
    if ((_DWORD)v47 != 1)
    {
      ((void (*)(WTF ***, uint64_t))off_1E3360F40[v47])(&v113, v102);
LABEL_75:
      v51 = v107;
      v107 = 0;
      *(_QWORD *)v102 = v51;
      LODWORD(v51) = v108;
      LODWORD(v108) = 0;
      *(_DWORD *)(v102 + 8) = (_DWORD)v51;
      v52 = HIDWORD(v108);
      HIDWORD(v108) = 0;
      *(_DWORD *)(v102 + 12) = v52;
      *(_DWORD *)(v102 + 16) = 1;
      goto LABEL_76;
    }
    v48 = *(unsigned int *)(v102 + 12);
    if ((_DWORD)v48)
    {
      v74 = *(WTF::StringImpl ***)v102;
      v75 = 8 * v48;
      do
      {
        v76 = *v74;
        *v74 = 0;
        if (v76)
        {
          if (*(_DWORD *)v76 == 2)
            WTF::StringImpl::destroy(v76, v13);
          else
            *(_DWORD *)v76 -= 2;
        }
        ++v74;
        v75 -= 8;
      }
      while (v75);
    }
    v49 = *(WTF **)v102;
    if (*(_QWORD *)v102)
    {
      *(_QWORD *)v102 = 0;
      *(_DWORD *)(v102 + 8) = 0;
      WTF::fastFree(v49, v13);
    }
    v50 = v107;
    v107 = 0;
    *(_QWORD *)v102 = v50;
    LODWORD(v50) = v108;
    LODWORD(v108) = 0;
    *(_DWORD *)(v102 + 8) = (_DWORD)v50;
    LODWORD(v50) = HIDWORD(v108);
    HIDWORD(v108) = 0;
    *(_DWORD *)(v102 + 12) = (_DWORD)v50;
LABEL_76:
    if (HIDWORD(v106))
      break;
LABEL_127:
    WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v105, v13);
    if (HIDWORD(v108))
    {
      v85 = v107;
      v86 = 8 * HIDWORD(v108);
      do
      {
        v87 = *(WTF::StringImpl **)v85;
        *(_QWORD *)v85 = 0;
        if (v87)
        {
          if (*(_DWORD *)v87 == 2)
            WTF::StringImpl::destroy(v87, v83);
          else
            *(_DWORD *)v87 -= 2;
        }
        v85 = (WTF *)((char *)v85 + 8);
        v86 -= 8;
      }
      while (v86);
    }
    v84 = v107;
    if (v107)
    {
      v107 = 0;
      LODWORD(v108) = 0;
      WTF::fastFree(v84, v83);
    }
    v11 = v102 + 48;
    if (v102 + 48 == v100)
    {
      result = v109;
      v96 = v110;
LABEL_143:
      *(_QWORD *)a1 = result;
      *(_QWORD *)(a1 + 8) = v96;
      *(_DWORD *)(a1 + 16) = 0;
      return result;
    }
  }
  v53 = v105;
  v54 = (WTF::StringImpl **)(v102 + 32);
  v55 = (WTF::StringImpl **)(v102 + 24);
  v56 = 40 * HIDWORD(v106);
  while (1)
  {
    if (!*v53)
    {
      v88 = 33;
      goto LABEL_152;
    }
    if ((WTF::URL::protocolIs() & 1) == 0 && !WTF::URL::protocolIs())
    {
      if (!WTF::URL::protocolIs())
      {
        v88 = 9;
        goto LABEL_152;
      }
      goto LABEL_100;
    }
    if (!*v54 || !*v55)
    {
      v88 = 12;
      goto LABEL_152;
    }
    if (*((_DWORD *)*v54 + 1) <= 0x40u && *((_DWORD *)*v55 + 1) < 0x41u)
      goto LABEL_100;
    WTF::String::utf8();
    v58 = (WTF *)v113;
    if (v113)
    {
      if ((unint64_t)v113[1] > 0x1FD)
        break;
    }
    WTF::String::utf8();
    v59 = v111;
    if (v111)
    {
      v60 = *((_QWORD *)v111 + 1);
      v111 = 0;
      if (*(_DWORD *)v59 == 1)
        WTF::fastFree(v59, v13);
      else
        --*(_DWORD *)v59;
      v61 = (WTF *)v113;
      v113 = 0;
      if (v61)
      {
        if (*(_DWORD *)v61 == 1)
          WTF::fastFree(v61, v13);
        else
          --*(_DWORD *)v61;
      }
      if (v60 > 0x1FD)
      {
        v88 = 33;
        goto LABEL_152;
      }
    }
    else
    {
      v62 = (WTF *)v113;
      v113 = 0;
      if (v62)
      {
        if (*(_DWORD *)v62 == 1)
          WTF::fastFree(v62, v13);
        else
          --*(_DWORD *)v62;
      }
    }
LABEL_100:
    v53 += 5;
    v56 -= 40;
    if (!v56)
    {
      v63 = HIDWORD(v106);
      if (HIDWORD(v106))
      {
        v113 = (WTF **)v105;
        v64 = v106;
        v105 = 0;
        v106 = 0;
        v114 = (WTF **)__PAIR64__(v63, v64);
        v65 = *v54;
        if (*v54)
          *(_DWORD *)v65 += 2;
        v115 = v65;
        v66 = *v55;
        if (*v55)
          *(_DWORD *)v66 += 2;
        v116 = v66;
        v67 = HIDWORD(v110);
        if (HIDWORD(v110) == (_DWORD)v110)
        {
          v68 = WTF::Vector<WebCore::MediaEndpointConfiguration::IceServerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v109, HIDWORD(v110) + 1, (unint64_t)&v113);
          v67 = HIDWORD(v110);
          v69 = (char *)v109 + 32 * HIDWORD(v110);
          *(_QWORD *)v69 = 0;
          *((_QWORD *)v69 + 1) = 0;
          v70 = *(_QWORD *)v68;
          *(_QWORD *)v68 = 0;
          *(_QWORD *)v69 = v70;
          LODWORD(v70) = *((_DWORD *)v68 + 2);
          *((_DWORD *)v68 + 2) = 0;
          *((_DWORD *)v69 + 2) = v70;
          LODWORD(v70) = *((_DWORD *)v68 + 3);
          *((_DWORD *)v68 + 3) = 0;
          *((_DWORD *)v69 + 3) = v70;
          v71 = *((_QWORD *)v68 + 2);
          *((_QWORD *)v68 + 2) = 0;
          *((_QWORD *)v69 + 2) = v71;
          v72 = (WTF::StringImpl **)(v69 + 24);
          v73 = (WTF::StringImpl **)(v68 + 24);
        }
        else
        {
          v77 = (char *)v109 + 32 * HIDWORD(v110);
          *(_QWORD *)v77 = 0;
          *((_QWORD *)v77 + 1) = 0;
          v78 = v113;
          v113 = 0;
          *(_QWORD *)v77 = v78;
          LODWORD(v78) = (_DWORD)v114;
          LODWORD(v114) = 0;
          *((_DWORD *)v77 + 2) = (_DWORD)v78;
          LODWORD(v78) = HIDWORD(v114);
          HIDWORD(v114) = 0;
          *((_DWORD *)v77 + 3) = (_DWORD)v78;
          v79 = v115;
          v115 = 0;
          *((_QWORD *)v77 + 2) = v79;
          v72 = (WTF::StringImpl **)(v77 + 24);
          v73 = &v116;
        }
        v80 = *v73;
        *v73 = 0;
        *v72 = v80;
        HIDWORD(v110) = v67 + 1;
        v81 = v116;
        v116 = 0;
        if (v81)
        {
          if (*(_DWORD *)v81 == 2)
            WTF::StringImpl::destroy(v81, v13);
          else
            *(_DWORD *)v81 -= 2;
        }
        v82 = v115;
        v115 = 0;
        if (v82)
        {
          if (*(_DWORD *)v82 == 2)
            WTF::StringImpl::destroy(v82, v13);
          else
            *(_DWORD *)v82 -= 2;
        }
        WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v113, v13);
      }
      goto LABEL_127;
    }
  }
  v113 = 0;
  if (*(_DWORD *)v58 == 1)
    WTF::fastFree(v58, v57);
  else
    --*(_DWORD *)v58;
  v88 = 33;
LABEL_152:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *(_BYTE *)a1 = v88;
  *(_DWORD *)(a1 + 16) = 1;
  WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v105, v89);
  if (HIDWORD(v108))
  {
    v97 = v107;
    v98 = 8 * HIDWORD(v108);
    do
    {
      v99 = *(WTF::StringImpl **)v97;
      *(_QWORD *)v97 = 0;
      if (v99)
      {
        if (*(_DWORD *)v99 == 2)
          WTF::StringImpl::destroy(v99, v90);
        else
          *(_DWORD *)v99 -= 2;
      }
      v97 = (WTF *)((char *)v97 + 8);
      v98 -= 8;
    }
    while (v98);
  }
  result = v107;
  if (v107)
  {
    v107 = 0;
    LODWORD(v108) = 0;
    result = (WTF *)WTF::fastFree(result, v90);
  }
  v91 = v109;
  if (HIDWORD(v110))
  {
    v92 = 32 * HIDWORD(v110);
    v93 = v109;
    do
    {
      v94 = (WTF::StringImpl *)*((_QWORD *)v93 + 3);
      *((_QWORD *)v93 + 3) = 0;
      if (v94)
      {
        if (*(_DWORD *)v94 == 2)
          WTF::StringImpl::destroy(v94, v90);
        else
          *(_DWORD *)v94 -= 2;
      }
      v95 = (WTF::StringImpl *)*((_QWORD *)v93 + 2);
      *((_QWORD *)v93 + 2) = 0;
      if (v95)
      {
        if (*(_DWORD *)v95 == 2)
          WTF::StringImpl::destroy(v95, v90);
        else
          *(_DWORD *)v95 -= 2;
      }
      result = (WTF *)WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v93, v90);
      v93 = (WTF *)((char *)v93 + 32);
      v92 -= 32;
    }
    while (v92);
  }
  if (v91)
    return (WTF *)WTF::fastFree(v91, v90);
  return result;
}

uint64_t WebCore::RTCPeerConnection::setConfiguration@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  WTF *v17;
  __int128 v18;
  __int128 v19;
  int v20;
  __int16 v21;
  WTF::StringImpl *v22;
  char v23;
  uint64_t v24;
  WTF::StringImpl **v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF *v28;
  WTF *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  WebCore::RTCCertificate **v37;
  uint64_t v38;
  WebCore::RTCCertificate *v39;
  WTF *v40;
  void *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  WTF *v45;
  __int128 v46;
  uint64_t v47;
  WTF *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  int v52;

  if (*(_DWORD *)(result + 80) == 5)
  {
    *(_BYTE *)a3 = 8;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  v5 = result;
  v6 = *(_QWORD *)(result + 88);
  v7 = *(_QWORD *)(result + 96);
  v45 = (WTF *)"RTCPeerConnection";
  *(_QWORD *)&v46 = 18;
  *((_QWORD *)&v46 + 1) = "setConfiguration";
  v47 = v7;
  if (*(_BYTE *)(v6 + 12))
  {
    if (WebCore::LogWebRTC && byte_1ECE7CD50 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 3, (WTF::Logger::LogSiteIdentifier *)&v45);
  }
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 120) + 184))(*(_QWORD *)(v5 + 120));
  result = (uint64_t)WebCore::RTCPeerConnection::iceServersFromConfiguration((uint64_t)&v50, v5, (uint64_t *)a2, v5 + 128, v9);
  if (v52)
  {
    if (v52 != 1)
    {
      v44 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::RTCPeerConnection::getStats(v44);
    }
    v10 = v51;
    v51 = 0;
    *(_BYTE *)a3 = (_BYTE)v50;
    *(_QWORD *)(a3 + 8) = v10;
    goto LABEL_61;
  }
  v11 = *(unsigned int *)(a2 + 52);
  if (!(_DWORD)v11)
    goto LABEL_21;
  if ((_DWORD)v11 == *(_DWORD *)(v5 + 180))
  {
    v12 = *(_QWORD **)(a2 + 40);
    v13 = &v12[v11];
    do
    {
      v14 = *(_QWORD **)(v5 + 168);
      v15 = *(unsigned int *)(v5 + 180);
      while (*v14 != *v12)
      {
        ++v14;
        if (!--v15)
          goto LABEL_58;
      }
      ++v12;
    }
    while (v12 != v13);
LABEL_21:
    v16 = *(_QWORD *)(v5 + 120);
    v17 = v50;
    *(_QWORD *)&v18 = v51;
    v50 = 0;
    v51 = 0;
    v19 = *(_OWORD *)(a2 + 24);
    v20 = *(_DWORD *)(a2 + 32);
    v21 = *(_WORD *)(a2 + 36);
    v45 = v17;
    *((_QWORD *)&v18 + 1) = v19;
    v46 = v18;
    LODWORD(v47) = v20;
    WORD2(v47) = v21;
    v48 = 0;
    v49 = 0;
    v23 = (*(uint64_t (**)(uint64_t, WTF **))(*(_QWORD *)v16 + 72))(v16, &v45);
    if (HIDWORD(v49))
    {
      v24 = 16 * HIDWORD(v49);
      v25 = (WTF::StringImpl **)((char *)v48 + 8);
      do
      {
        v26 = *v25;
        *v25 = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v22);
          else
            *(_DWORD *)v26 -= 2;
        }
        v27 = *(v25 - 1);
        *(v25 - 1) = 0;
        if (v27)
        {
          if (*(_DWORD *)v27 == 2)
            WTF::StringImpl::destroy(v27, v22);
          else
            *(_DWORD *)v27 -= 2;
        }
        v25 += 2;
        v24 -= 16;
      }
      while (v24);
    }
    v28 = v48;
    if (v48)
    {
      v48 = 0;
      LODWORD(v49) = 0;
      WTF::fastFree(v28, v22);
    }
    if (DWORD1(v46))
    {
      v29 = v45;
      v30 = 32 * DWORD1(v46);
      do
      {
        v31 = (WTF::StringImpl *)*((_QWORD *)v29 + 3);
        *((_QWORD *)v29 + 3) = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, v22);
          else
            *(_DWORD *)v31 -= 2;
        }
        v32 = (WTF::StringImpl *)*((_QWORD *)v29 + 2);
        *((_QWORD *)v29 + 2) = 0;
        if (v32)
        {
          if (*(_DWORD *)v32 == 2)
            WTF::StringImpl::destroy(v32, v22);
          else
            *(_DWORD *)v32 -= 2;
        }
        WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v29, v22);
        v29 = (WTF *)((char *)v29 + 32);
        v30 -= 32;
      }
      while (v30);
    }
    v33 = v45;
    if (v45)
    {
      v45 = 0;
      LODWORD(v46) = 0;
      WTF::fastFree(v33, v22);
    }
    if ((v23 & 1) != 0)
    {
      std::__optional_storage_base<WTF::Vector<WebCore::RTCIceServer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WebCore::RTCIceServer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>(v5 + 128, (WTF::StringImpl *)a2);
      v35 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(v5 + 158) = *(_QWORD *)(a2 + 30);
      *(_QWORD *)(v5 + 152) = v35;
      v36 = *(unsigned int *)(v5 + 180);
      if ((_DWORD)v36)
      {
        v37 = *(WebCore::RTCCertificate ***)(v5 + 168);
        v38 = 8 * v36;
        do
        {
          v39 = *v37;
          *v37 = 0;
          if (v39)
          {
            if (*(_DWORD *)v39 == 1)
            {
              WebCore::RTCCertificate::~RTCCertificate(v39, v34);
              WTF::fastFree(v40, v41);
            }
            else
            {
              --*(_DWORD *)v39;
            }
          }
          ++v37;
          v38 -= 8;
        }
        while (v38);
      }
      result = *(_QWORD *)(v5 + 168);
      if (result)
      {
        *(_QWORD *)(v5 + 168) = 0;
        *(_DWORD *)(v5 + 176) = 0;
        result = WTF::fastFree((WTF *)result, v34);
      }
      v43 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(v5 + 168) = v43;
      LODWORD(v43) = *(_DWORD *)(a2 + 48);
      *(_DWORD *)(a2 + 48) = 0;
      *(_DWORD *)(v5 + 176) = v43;
      LODWORD(v43) = *(_DWORD *)(a2 + 52);
      *(_DWORD *)(a2 + 52) = 0;
      *(_DWORD *)(v5 + 180) = v43;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      goto LABEL_62;
    }
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    v42 = 12;
    goto LABEL_60;
  }
LABEL_58:
  result = WTF::StringImpl::createWithoutCopyingNonEmpty();
  v42 = 10;
LABEL_60:
  *(_BYTE *)a3 = v42;
LABEL_61:
  *(_BYTE *)(a3 + 16) = 1;
LABEL_62:
  if (v52 != -1)
    return ((uint64_t (*)(WTF **, WTF **))off_1E3360F60[v52])(&v45, &v50);
  return result;
}

uint64_t WebCore::RTCPeerConnection::getStats(uint64_t a1, uint64_t a2, WebCore::ActiveDOMCallback **a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::ActiveDOMCallback *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t (*v13)(void);
  _QWORD *v14;

  if (a2 && (v5 = *(unsigned int *)(a1 + 116), (_DWORD)v5))
  {
    v6 = *(_QWORD *)(a1 + 104);
    v7 = 8 * v5;
    while (1)
    {
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 40) + 32) == a2)
      {
        v13 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 120) + 96);
        return v13();
      }
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v6 + 48) + 24) == a2)
        break;
      v6 += 8;
      v7 -= 8;
      if (!v7)
        goto LABEL_7;
    }
    v13 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 120) + 104);
    return v13();
  }
  else
  {
LABEL_7:
    v8 = *a3;
    v9 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v9 = 1;
    ++*(_DWORD *)(a1 + 24);
    *(_QWORD *)(v9 + 8) = a1;
    ++*(_QWORD *)(a1 + 48);
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = &off_1E3361290;
    v10[1] = v9;
    v14 = v10;
    WebCore::DeferredPromise::whenSettled(v8, (uint64_t *)&v14);
    v11 = (uint64_t)v14;
    v14 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    return (*(uint64_t (**)(_QWORD, WebCore::ActiveDOMCallback **))(**(_QWORD **)(a1 + 120) + 88))(*(_QWORD *)(a1 + 120), a3);
  }
}

uint64_t WebCore::RTCPeerConnection::gatherDecoderImplementationName(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 80))(*(_QWORD *)(a1 + 120));
}

uint64_t WebCore::RTCPeerConnection::createDataChannel@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  WTF *v9;
  char v10;
  void *v11;
  WTF *v12;
  unint64_t v13;
  void *v14;
  WTF *v15;
  unint64_t v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  WTF *v20[4];

  v6 = result;
  v8 = *(_QWORD *)(result + 88);
  v9 = *(WTF **)(result + 96);
  v20[0] = (WTF *)"RTCPeerConnection";
  v20[1] = (WTF *)18;
  v20[2] = (WTF *)"createDataChannel";
  v20[3] = v9;
  if (*(_BYTE *)(v8 + 12))
    result = WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v20);
  if (*(_DWORD *)(v6 + 80) == 5)
  {
    v10 = 8;
LABEL_5:
    *(_BYTE *)a4 = v10;
    *(_QWORD *)(a4 + 8) = 0;
LABEL_32:
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  WTF::String::utf8();
  v12 = v20[0];
  if (v20[0])
  {
    v13 = *((_QWORD *)v20[0] + 1);
    v20[0] = 0;
    if (*(_DWORD *)v12 == 1)
    {
      WTF::fastFree(v12, v11);
      if (v13 >= 0x10000)
        goto LABEL_31;
    }
    else
    {
      --*(_DWORD *)v12;
      if (v13 >> 16)
      {
LABEL_31:
        result = WTF::StringImpl::createWithoutCopyingNonEmpty();
        *(_BYTE *)a4 = 33;
        goto LABEL_32;
      }
    }
  }
  WTF::String::utf8();
  v15 = v20[0];
  if (v20[0])
  {
    v16 = *((_QWORD *)v20[0] + 1);
    v20[0] = 0;
    if (*(_DWORD *)v15 == 1)
    {
      WTF::fastFree(v15, v14);
      if (v16 >= 0x10000)
        goto LABEL_31;
    }
    else
    {
      --*(_DWORD *)v15;
      if (v16 >> 16)
        goto LABEL_31;
    }
  }
  if (*(_BYTE *)(a3 + 25))
    v17 = *(_BYTE *)(a3 + 24) == 0;
  else
    v17 = 1;
  v18 = !v17;
  if (v17)
  {
    *(_BYTE *)(a3 + 26) = 0;
    *(_BYTE *)(a3 + 28) = 0;
  }
  else if (!*(_BYTE *)(a3 + 28))
  {
    goto LABEL_31;
  }
  if (*(_BYTE *)(a3 + 4) && *(_BYTE *)(a3 + 8))
    goto LABEL_31;
  if (*(__int16 *)(a3 + 26) != -1)
    v18 = 0;
  if (v18 == 1)
    goto LABEL_31;
  result = (uint64_t)(*(_QWORD *(**)(WTF **__return_ptr, _QWORD, uint64_t *, uint64_t))(**(_QWORD **)(v6 + 120)
                                                                                              + 48))(v20, *(_QWORD *)(v6 + 120), a2, a3);
  if (!v20[0])
  {
    v10 = 30;
    goto LABEL_5;
  }
  v19 = *(_QWORD *)(v6 + 40);
  if (v19)
  {
    v19 = *(_QWORD *)(v19 + 8);
    if (v19)
    {
      if (*(_BYTE *)(v19 + 178))
      {
        result = 105;
        __break(0xC471u);
        return result;
      }
      v19 -= 288;
    }
  }
  WebCore::RTCDataChannel::create((WebCore::ScriptExecutionContext *)(v19 + 192), (uint64_t *)v20, a2, (uint64_t *)a3, 0, (WebCore::ContextDestructionObserver **)a4);
  *(_DWORD *)(a4 + 16) = 0;
  result = (uint64_t)v20[0];
  v20[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

BOOL WebCore::RTCPeerConnection::doClose(WebCore::RTCPeerConnection *this, WTF::StringImpl *a2)
{
  int v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  WTF *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v21;

  v2 = *((_DWORD *)this + 20);
  if (v2 != 5)
  {
    *((_BYTE *)this + 208) = 0;
    *(_QWORD *)((char *)this + 76) = 0x500000006;
    *((_DWORD *)this + 17) = 5;
    v4 = *((unsigned int *)this + 29);
    if ((_DWORD)v4)
    {
      v5 = (uint64_t *)*((_QWORD *)this + 13);
      v6 = 8 * v4;
      do
      {
        v7 = *v5;
        v8 = *(_QWORD *)(*v5 + 72);
        if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0 && *(_DWORD *)(v9 + 80) != 5)
        {
          if (!*(_BYTE *)(v7 + 56))
          {
            *(_BYTE *)(v7 + 56) = 1;
            WebCore::RTCRtpReceiver::stop(*(WebCore::RTCRtpReceiver **)(v7 + 48));
            WebCore::RTCRtpSender::stop(*(WebCore::RTCRtpSender **)(v7 + 40), v11);
            v12 = *(_QWORD *)(v7 + 64);
            if (v12)
              (*(void (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12);
          }
          v21 = 0;
        }
        else
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v10 = v21;
          v21 = 0;
          if (v10)
          {
            if (*(_DWORD *)v10 == 2)
              WTF::StringImpl::destroy(v10, a2);
            else
              *(_DWORD *)v10 -= 2;
          }
        }
        WebCore::RTCRtpSender::stop(*(WebCore::RTCRtpSender **)(*v5 + 40), a2);
        v13 = *v5++;
        WebCore::RTCRtpReceiver::stop(*(WebCore::RTCRtpReceiver **)(v13 + 48));
        v6 -= 8;
      }
      while (v6);
    }
    WTF::Deque<std::pair<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::Function<void ()(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>&&)>>,0ul>::destroyAll((unint64_t *)this + 27);
    *((_QWORD *)this + 27) = 0;
    *((_QWORD *)this + 28) = 0;
    v15 = (WTF *)*((_QWORD *)this + 29);
    if (v15)
    {
      *((_QWORD *)this + 29) = 0;
      *((_DWORD *)this + 60) = 0;
      WTF::fastFree(v15, v14);
    }
    v16 = *((unsigned int *)this + 69);
    if ((_DWORD)v16)
    {
      v17 = (uint64_t *)*((_QWORD *)this + 33);
      v18 = 8 * v16;
      do
      {
        v19 = *v17++;
        *(_DWORD *)(v19 + 88) = 3;
        v18 -= 8;
      }
      while (v18);
    }
  }
  return v2 != 5;
}

uint64_t WebCore::RTCPeerConnection::emulatePlatformEvent(WebCore::RTCPeerConnection *this, const WTF::String *a2)
{
  return (*(uint64_t (**)(_QWORD, const WTF::String *))(**((_QWORD **)this + 15) + 152))(*((_QWORD *)this + 15), a2);
}

uint64_t `non-virtual thunk to'WebCore::RTCPeerConnection::stop(WebCore::RTCPeerConnection *this, WTF::StringImpl *a2)
{
  uint64_t result;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::PeerConnectionBackend::PendingTrackEvent *v9;
  uint64_t v10;
  uint64_t v11;
  WTF *v12;

  result = WebCore::RTCPeerConnection::doClose((WebCore::RTCPeerConnection *)((char *)this - 32), a2);
  if (!*((_BYTE *)this + 32))
  {
    *((_BYTE *)this + 32) = 1;
    v5 = *((_QWORD *)this + 11);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      v7 = *(_QWORD *)(v5 + 32);
      *(_QWORD *)(v5 + 32) = 0;
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      if (*(_DWORD *)(v5 + 56))
      {
        v8 = *(unsigned int *)(v5 + 60);
        if ((_DWORD)v8)
        {
          v9 = *(WebCore::PeerConnectionBackend::PendingTrackEvent **)(v5 + 48);
          v10 = 40 * v8;
          do
          {
            WebCore::PeerConnectionBackend::PendingTrackEvent::~PendingTrackEvent(v9, v4);
            v9 = (WebCore::PeerConnectionBackend::PendingTrackEvent *)(v11 + 40);
            v10 -= 40;
          }
          while (v10);
          *(_DWORD *)(v5 + 60) = 0;
        }
        v12 = *(WTF **)(v5 + 48);
        if (v12)
        {
          *(_QWORD *)(v5 + 48) = 0;
          *(_DWORD *)(v5 + 56) = 0;
          WTF::fastFree(v12, v4);
        }
      }
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 272))(v5);
    }
  }
  return result;
}

uint64_t WebCore::RTCPeerConnection::suspend(uint64_t result, int a2)
{
  if (a2 == 2)
  {
    *(_BYTE *)(result + 208) = 1;
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 120) + 200))(*(_QWORD *)(result + 120));
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::RTCPeerConnection::suspend(uint64_t result, int a2)
{
  if (a2 == 2)
  {
    *(_BYTE *)(result + 176) = 1;
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 88) + 200))(*(_QWORD *)(result + 88));
  }
  return result;
}

uint64_t WebCore::RTCPeerConnection::resume(uint64_t this)
{
  if (*(_BYTE *)(this + 208))
  {
    *(_BYTE *)(this + 208) = 0;
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 120) + 208))(*(_QWORD *)(this + 120));
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::RTCPeerConnection::resume(uint64_t this)
{
  if (*(_BYTE *)(this + 176))
  {
    *(_BYTE *)(this + 176) = 0;
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 88) + 208))(*(_QWORD *)(this + 88));
  }
  return this;
}

BOOL WebCore::RTCPeerConnection::virtualHasPendingActivity(WebCore::RTCPeerConnection *this)
{
  uint64_t v1;

  if (!*((_BYTE *)this + 64) && (v1 = *((_QWORD *)this + 2), (v1 & 0x1000000000000) != 0))
    return *(_DWORD *)((v1 & 0xFFFFFFFFFFFFLL) + 0x1C) != 0;
  else
    return 0;
}

BOOL `non-virtual thunk to'WebCore::RTCPeerConnection::virtualHasPendingActivity(WebCore::RTCPeerConnection *this)
{
  uint64_t v1;

  if (!*((_BYTE *)this + 32) && (v1 = *((_QWORD *)this - 2), (v1 & 0x1000000000000) != 0))
    return *(_DWORD *)((v1 & 0xFFFFFFFFFFFFLL) + 0x1C) != 0;
  else
    return 0;
}

uint64_t WebCore::RTCPeerConnection::addInternalTransceiver(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int *v5;
  void *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t result;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *a2;
  v5 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(a1);
  v7 = v5;
  if (v5)
  {
    do
      v8 = __ldaxr(v5);
    while (__stlxr(v8 + 1, v5));
  }
  result = *(_QWORD *)(v4 + 72);
  *(_QWORD *)(v4 + 72) = v7;
  if (result)
  {
    do
    {
      v10 = __ldaxr((unsigned int *)result);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, (unsigned int *)result));
    if (!v11)
    {
      atomic_store(1u, (unsigned int *)result);
      v21 = *(unsigned int *)(result + 28);
      if ((_DWORD)v21)
      {
        v24 = result;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(result + 16), (WTF::StringImpl *)(*(_QWORD *)(result + 16) + 32 * v21));
        result = v24;
      }
      v22 = *(WTF **)(result + 16);
      if (v22)
      {
        *(_QWORD *)(result + 16) = 0;
        *(_DWORD *)(result + 24) = 0;
        v23 = result;
        WTF::fastFree(v22, v6);
        result = v23;
      }
      result = WTF::fastFree((WTF *)result, v6);
    }
  }
  v12 = *(unsigned int *)(a1 + 116);
  if ((_DWORD)v12 == *(_DWORD *)(a1 + 112))
  {
    v13 = v12 + (v12 >> 2);
    if (v13 >= 0x10)
      v14 = v13 + 1;
    else
      v14 = 16;
    if (v14 <= v12 + 1)
      v15 = v12 + 1;
    else
      v15 = v14;
    if (v15 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x195499FE0);
    }
    v16 = *(void **)(a1 + 104);
    v17 = (void *)WTF::fastMalloc((WTF *)(8 * v15));
    *(_DWORD *)(a1 + 112) = v15;
    *(_QWORD *)(a1 + 104) = v17;
    result = (uint64_t)memcpy(v17, v16, 8 * v12);
    if (v16)
    {
      if (*(void **)(a1 + 104) == v16)
      {
        *(_QWORD *)(a1 + 104) = 0;
        *(_DWORD *)(a1 + 112) = 0;
      }
      result = WTF::fastFree((WTF *)v16, v18);
    }
    v12 = *(unsigned int *)(a1 + 116);
    v19 = (_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v12);
  }
  else
  {
    v19 = (_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v12);
  }
  v20 = *a2;
  *a2 = 0;
  *v19 = v20;
  *(_DWORD *)(a1 + 116) = v12 + 1;
  return result;
}

uint64_t WebCore::RTCPeerConnection::setSignalingState(uint64_t result, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  WTF::StringImpl *v13;
  NSObject *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::Logger *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::Logger *v32;
  uint64_t v33;
  WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  int v48;
  _QWORD v49[4];
  WTF::Logger *v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  __int128 buf;
  const char *v55;
  WTF::StringImpl *v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(result + 68) == a2)
    return result;
  v2 = a2;
  v3 = result;
  v4 = *(_QWORD *)(result + 88);
  v5 = *(_QWORD *)(result + 96);
  v49[0] = "RTCPeerConnection";
  v49[1] = 18;
  v49[2] = "setSignalingState";
  v49[3] = v5;
  if (*(_BYTE *)(v4 + 12))
  {
    result = WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v49);
    {
      WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_0::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_1::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_2::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_3::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_4::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_5::operator() const(void)::impl += 2;
      WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_0::operator() const(void)::impl;
      *(_QWORD *)algn_1EE2F4B98 = &WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_1::operator() const(void)::impl;
      qword_1EE2F4BA0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_2::operator() const(void)::impl;
      unk_1EE2F4BA8 = &WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_3::operator() const(void)::impl;
      qword_1EE2F4BB0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_4::operator() const(void)::impl;
      unk_1EE2F4BB8 = &WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_5::operator() const(void)::impl;
    }
    v7 = WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::values[v2];
    if (v7)
      *(_DWORD *)v7 += 2;
    if (v52)
    {
      v8 = *((_DWORD *)v52 + 1);
      if (v7)
      {
LABEL_9:
        v9 = *(_DWORD *)(v7 + 4);
LABEL_10:
        if (((v9 | v8) & 0x80000000) == 0)
        {
          v10 = (v8 + v9);
          if (!__OFADD__(v8, v9))
          {
            if (v52)
            {
              v11 = *((_DWORD *)v52 + 4);
              v12 = (v11 >> 2) & 1;
              if (!v7 || (v11 & 4) == 0)
              {
LABEL_16:
                result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v10, v12, (uint64_t)v52, v7, &v53);
                if (v53)
                {
                  if (v7)
                  {
                    if (*(_DWORD *)v7 == 2)
                      WTF::StringImpl::destroy((WTF::StringImpl *)v7, v6);
                    else
                      *(_DWORD *)v7 -= 2;
                  }
                  goto LABEL_20;
                }
LABEL_104:
                __break(0xC471u);
                return result;
              }
LABEL_15:
              v12 = (*(unsigned __int8 *)(v7 + 16) >> 2) & 1;
              goto LABEL_16;
            }
            if (v7)
              goto LABEL_15;
            if (!(_DWORD)v10)
            {
              v47 = MEMORY[0x1E0CBEF70];
              *MEMORY[0x1E0CBEF70] += 2;
              goto LABEL_101;
            }
            if ((v10 & 0x80000000) == 0)
            {
              result = WTF::tryFastCompactMalloc((WTF *)(v10 + 20));
              v47 = buf;
              if ((_QWORD)buf)
              {
                *(_DWORD *)buf = 2;
                *(_DWORD *)(v47 + 4) = v10;
                *(_QWORD *)(v47 + 8) = v47 + 20;
                *(_DWORD *)(v47 + 16) = 4;
LABEL_101:
                v53 = (WTF::StringImpl *)v47;
LABEL_20:
                v13 = v52;
                v52 = 0;
                if (v13)
                {
                  if (*(_DWORD *)v13 == 2)
                    WTF::StringImpl::destroy(v13, v6);
                  else
                    *(_DWORD *)v13 -= 2;
                }
                v14 = qword_1ECE7CD60;
                v15 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
                if ((_DWORD)v15)
                {
                  WTF::String::utf8();
                  v17 = v50 ? (char *)v50 + 16 : 0;
                  LODWORD(buf) = 136446210;
                  *(_QWORD *)((char *)&buf + 4) = v17;
                  _os_log_impl(&dword_1940B8000, v14, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
                  v15 = (uint64_t)v50;
                  v50 = 0;
                  if (v15)
                  {
                    if (*(_DWORD *)v15 == 1)
                      v15 = WTF::fastFree((WTF *)v15, v16);
                    else
                      --*(_DWORD *)v15;
                  }
                }
                if (WebCore::LogWebRTC)
                {
                  v18 = v2;
                  v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
                  while (1)
                  {
                    v20 = *v19;
                    if ((v20 & 1) != 0)
                      break;
                    v21 = __ldaxr(v19);
                    if (v21 == v20)
                    {
                      if (!__stxr(v20 | 1, v19))
                      {
                        v48 = v2;
                        v22 = WTF::Logger::observers((WTF::Logger *)v15);
                        v23 = *(unsigned int *)(v22 + 12);
                        if ((_DWORD)v23)
                        {
                          v24 = *(uint64_t **)v22;
                          v25 = *(_QWORD *)v22 + 8 * v23;
                          do
                          {
                            v26 = *v24;
                            LODWORD(buf) = 0;
                            WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v49);
                            LODWORD(v55) = 0;
                            {
                              WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_0::operator() const(void)::impl += 2;
                              WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_1::operator() const(void)::impl += 2;
                              WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_0::operator() const(void)::impl;
                              *(_QWORD *)algn_1EE2F4B98 = &WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_1::operator() const(void)::impl;
                              WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_2::operator() const(void)::impl += 2;
                              WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_3::operator() const(void)::impl += 2;
                              qword_1EE2F4BA0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_2::operator() const(void)::impl;
                              unk_1EE2F4BA8 = &WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_3::operator() const(void)::impl;
                              WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_4::operator() const(void)::impl += 2;
                              WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_5::operator() const(void)::impl += 2;
                              qword_1EE2F4BB0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_4::operator() const(void)::impl;
                              unk_1EE2F4BB8 = &WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::$_5::operator() const(void)::impl;
                            }
                            v27 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::RTCSignalingState)::values[v18];
                            if (v27)
                              *(_DWORD *)v27 += 2;
                            v56 = v27;
                            v50 = 0;
                            v51 = 0;
                            v28 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
                            LODWORD(v51) = 2;
                            v50 = v28;
                            v29 = HIDWORD(v51);
                            *((_DWORD *)v28 + 4 * HIDWORD(v51)) = buf;
                            v30 = *((_QWORD *)&buf + 1);
                            if (*((_QWORD *)&buf + 1))
                              **((_DWORD **)&buf + 1) += 2;
                            *((_QWORD *)v28 + 2 * v29 + 1) = v30;
                            *((_DWORD *)v28 + 4 * (v29 + 1)) = (_DWORD)v55;
                            v31 = v56;
                            if (v56)
                              *(_DWORD *)v56 += 2;
                            *((_QWORD *)v28 + 2 * (v29 + 1) + 1) = v31;
                            HIDWORD(v51) = v29 + 2;
                            (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, &WebCore::LogWebRTC, 0, &v50);
                            v32 = v50;
                            if (HIDWORD(v51))
                            {
                              v33 = 16 * HIDWORD(v51);
                              v34 = (WTF::StringImpl **)((char *)v50 + 8);
                              do
                              {
                                v35 = *v34;
                                *v34 = 0;
                                if (v35)
                                {
                                  if (*(_DWORD *)v35 == 2)
                                    WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v16);
                                  else
                                    *(_DWORD *)v35 -= 2;
                                }
                                v34 += 2;
                                v33 -= 16;
                              }
                              while (v33);
                              v32 = v50;
                            }
                            if (v32)
                            {
                              v50 = 0;
                              LODWORD(v51) = 0;
                              WTF::fastFree(v32, v16);
                            }
                            v36 = v56;
                            v56 = 0;
                            if (v36)
                            {
                              if (*(_DWORD *)v36 == 2)
                                WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v16);
                              else
                                *(_DWORD *)v36 -= 2;
                            }
                            v37 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                            *((_QWORD *)&buf + 1) = 0;
                            if (v37)
                            {
                              if (*(_DWORD *)v37 == 2)
                                WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v16);
                              else
                                *(_DWORD *)v37 -= 2;
                            }
                            ++v24;
                          }
                          while (v24 != (uint64_t *)v25);
                        }
                        v38 = __ldxr(v19);
                        if (v38 == 1)
                        {
                          v2 = v48;
                          if (!__stlxr(0, v19))
                            break;
                        }
                        else
                        {
                          __clrex();
                          v2 = v48;
                        }
                        WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                        break;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                  }
                }
                result = (uint64_t)v53;
                v53 = 0;
                if (result)
                {
                  if (*(_DWORD *)result == 2)
                    result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v16);
                  else
                    *(_DWORD *)result -= 2;
                }
                goto LABEL_75;
              }
            }
          }
        }
        v53 = 0;
        goto LABEL_104;
      }
    }
    else
    {
      v8 = 0;
      if (v7)
        goto LABEL_9;
    }
    v9 = 0;
    goto LABEL_10;
  }
LABEL_75:
  *(_DWORD *)(v3 + 68) = v2;
  v39 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v39 || (v40 = *(_QWORD *)(v39 + 96)) == 0)
    v40 = WebCore::threadGlobalDataSlow((WebCore *)result);
  v41 = *(_QWORD *)(v40 + 40);
  if (!v41)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v40);
    v41 = *(_QWORD *)(v40 + 40);
  }
  v42 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v42);
  *(_DWORD *)(v42 + 16) = 1;
  *(_QWORD *)v42 = off_1E33A4B48;
  *(_QWORD *)(v42 + 8) = 0;
  *(_DWORD *)(v42 + 20) = *(_DWORD *)(v42 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v41 + 1856) != 0);
  v44 = *(_DWORD **)(v41 + 1856);
  if (v44)
    *v44 += 2;
  *(_QWORD *)(v42 + 24) = v44;
  *(_QWORD *)(v42 + 40) = 0;
  *(_QWORD *)(v42 + 48) = 0;
  *(_QWORD *)(v42 + 32) = 0;
  *(_QWORD *)(v42 + 56) = v43;
  *(_QWORD *)(v42 + 64) = 0;
  v45 = *(_QWORD *)(v3 + 88);
  v46 = *(WTF::StringImpl **)(v3 + 96);
  *(_QWORD *)&buf = "RTCPeerConnection";
  *((_QWORD *)&buf + 1) = 18;
  v55 = "dispatchEvent";
  v56 = v46;
  if (*(_BYTE *)(v45 + 12) && WebCore::LogWebRTC && byte_1ECE7CD50 >= 3u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [14],WTF::AtomString,char [2]>((uint64_t)&WebCore::LogWebRTC, 3u, (WTF::Logger::LogSiteIdentifier *)&buf, "dispatching '", (WTF::StringImpl **)(v42 + 24), "'");
  result = (uint64_t)WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)v3, (WebCore::Event *)v42);
  if (*(_DWORD *)(v42 + 16) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  --*(_DWORD *)(v42 + 16);
  return result;
}

WTF *WebCore::RTCPeerConnection::dispatchEvent(WebCore::RTCPeerConnection *this, WTF::StringImpl **a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  _QWORD v8[4];

  v4 = *((_QWORD *)this + 11);
  v5 = *((_QWORD *)this + 12);
  v8[0] = "RTCPeerConnection";
  v8[1] = 18;
  v8[2] = "dispatchEvent";
  v8[3] = v5;
  if (*(_BYTE *)(v4 + 12))
  {
    if (WebCore::LogWebRTC)
      v6 = byte_1ECE7CD50 >= 3u;
    else
      v6 = 0;
    if (v6)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [14],WTF::AtomString,char [2]>((uint64_t)&WebCore::LogWebRTC, 3u, (WTF::Logger::LogSiteIdentifier *)v8, "dispatching '", a2 + 3, "'");
  }
  return WebCore::EventTarget::dispatchEvent(this, (WebCore::Event *)a2);
}

uint64_t (***WebCore::RTCPeerConnection::updateIceGatheringState(uint64_t a1, int a2))()
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t (***result)();
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (**v13)();
  uint64_t v14[4];
  int v15;

  v2 = a2;
  v15 = a2;
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 96);
  v14[0] = (uint64_t)"RTCPeerConnection";
  v14[1] = 18;
  v14[2] = (uint64_t)"updateIceGatheringState";
  v14[3] = v5;
  if (*(_BYTE *)(v4 + 12))
  {
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::RTCIceGatheringState>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)v14, &v15);
    v2 = v15;
  }
  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v6 = off_1E33612B8;
  *(_QWORD *)(v6 + 8) = a1;
  *(_DWORD *)(v6 + 16) = v2;
  v7 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v7 = 1;
  v8 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v7 + 8) = a1;
  ++*(_QWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 24) = v8 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = off_1E3360610;
  result[1] = (uint64_t (**)())a1;
  result[2] = (uint64_t (**)())v7;
  result[3] = (uint64_t (**)())v6;
  v14[0] = (uint64_t)result;
  v10 = *(_QWORD *)(a1 + 40);
  if (!v10)
  {
    v14[0] = 0;
    v13 = off_1E3360610;
    return (uint64_t (***)())v13[1]();
  }
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
  {
    v14[0] = 0;
    goto LABEL_8;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v11 - 96) + 104))(v11 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v12, 11, v14);
  result = (uint64_t (***)())v14[0];
  v14[0] = 0;
  if (result)
  {
LABEL_8:
    v13 = *result;
    return (uint64_t (***)())v13[1]();
  }
  return result;
}

uint64_t (***WebCore::RTCPeerConnection::updateIceConnectionState(uint64_t a1))()
{
  uint64_t (**v2)();
  uint64_t v3;
  int v4;
  uint64_t (***result)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (**v9)();
  uint64_t (***v10)();

  v2 = (uint64_t (**)())WTF::fastMalloc((WTF *)0x10);
  *v2 = (uint64_t (*)())off_1E33612E0;
  v2[1] = (uint64_t (*)())a1;
  v3 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  v4 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v3 + 8) = a1;
  ++*(_QWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 24) = v4 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = off_1E3360610;
  result[1] = (uint64_t (**)())a1;
  result[2] = (uint64_t (**)())v3;
  result[3] = v2;
  v10 = result;
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
  {
    v10 = 0;
    v9 = off_1E3360610;
    return (uint64_t (***)())v9[1]();
  }
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7)
  {
    v10 = 0;
    goto LABEL_6;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 - 96) + 104))(v7 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v8, 11, (uint64_t *)&v10);
  result = v10;
  v10 = 0;
  if (result)
  {
LABEL_6:
    v9 = *result;
    return (uint64_t (***)())v9[1]();
  }
  return result;
}

uint64_t WebCore::RTCPeerConnection::computeConnectionState(WebCore::RTCPeerConnection *this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _DWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  WebCore::RTCDtlsTransport *v43;
  bmalloc::api *v44;
  void *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  WTF *v54;
  uint64_t v55;
  WTF *v56;
  uint64_t v57;
  WTF *v58;
  int v59;
  uint64_t v61;
  WTF *v62;
  int v63;
  uint64_t v65;
  WTF *v66;
  uint64_t v67;
  WTF *v68;
  uint64_t v69;
  WTF *v70;
  WebCore::RTCDtlsTransport *v71;
  bmalloc::api *v72;
  void *v73;
  WTF *v75;
  _DWORD *v76;
  WTF *v77;
  uint64_t v78;

  if (*((_DWORD *)this + 20) == 5)
    return 5;
  v4 = *((unsigned int *)this + 73);
  v78 = v4;
  if ((_DWORD)v4)
  {
    if (v4 >> 29)
      goto LABEL_119;
    v5 = WTF::fastMalloc((WTF *)(8 * v4));
    v6 = (WTF *)v5;
    v7 = *((unsigned int *)this + 73);
    if ((_DWORD)v7)
    {
      v8 = (uint64_t *)*((_QWORD *)this + 35);
      v9 = 8 * v7;
      v10 = (_QWORD *)v5;
      do
      {
        v11 = *v8++;
        ++*(_DWORD *)(v11 + 24);
        *v10++ = v11;
        v9 -= 8;
      }
      while (v9);
    }
    v12 = 0;
    v13 = (char *)(v5 + 8 * v4);
    v14 = (char *)v5;
    v15 = v13;
    v16 = v13;
    do
    {
      v17 = *((_QWORD *)this + 37);
      if (!v17 || *(_QWORD *)(*(_QWORD *)(v17 + 80) + 80) != *(_QWORD *)v14)
      {
        v18 = *((unsigned int *)this + 29);
        if ((_DWORD)v18)
        {
          v19 = *((_QWORD *)this + 13);
          v20 = 8 * v18;
          while (1)
          {
            v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v19 + 40) + 40);
            if (v21)
            {
              if (*(_QWORD *)(v21 + 80) == *(_QWORD *)v14)
                break;
            }
            v19 += 8;
            v20 -= 8;
            if (!v20)
              goto LABEL_16;
          }
        }
        else
        {
LABEL_16:
          v22 = v14;
          if (v16 != v13)
          {
            if (v15 == v14)
            {
              v22 = v16;
            }
            else
            {
              memmove(v16, v15, v14 - v15);
              v22 = &v16[v14 - v15];
            }
          }
          v23 = *(_DWORD **)v14;
          *(_QWORD *)v14 = 0;
          v15 = v14 + 8;
          if (v23)
          {
            if (v23[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 16))(v23);
            else
              --v23[6];
          }
          ++v12;
          v16 = v22;
        }
      }
      v14 += 8;
    }
    while (v14 < v13);
    v4 = v78;
  }
  else
  {
    v6 = 0;
    v12 = 0;
    v16 = (char *)(8 * v4);
    v15 = (char *)(8 * v4);
  }
  v24 = (char *)v6 + 8 * v4;
  if (v15 != v24)
    memmove(v16, v15, v24 - v15);
  v25 = *((unsigned int *)this + 69);
  if (!(_DWORD)v25)
  {
    v27 = 0;
    v33 = 0;
    v37 = (char *)(8 * v25);
    v36 = (char *)(8 * v25);
    goto LABEL_54;
  }
  if (v25 >> 29)
  {
LABEL_119:
    __break(0xC471u);
    JUMPOUT(0x19549AF9CLL);
  }
  v77 = v6;
  v26 = WTF::fastMalloc((WTF *)(8 * v25));
  v27 = (WTF *)v26;
  v28 = *((unsigned int *)this + 69);
  if ((_DWORD)v28)
  {
    v29 = (uint64_t *)*((_QWORD *)this + 33);
    v30 = 8 * v28;
    v31 = (_QWORD *)v26;
    do
    {
      v32 = *v29++;
      ++*(_DWORD *)(v32 + 24);
      *v31++ = v32;
      v30 -= 8;
    }
    while (v30);
  }
  v33 = 0;
  v34 = (char *)(v26 + 8 * v25);
  v35 = (char *)v26;
  v36 = v34;
  v37 = v34;
  do
  {
    v38 = *((_QWORD *)this + 37);
    if (!v38 || *(_QWORD *)(v38 + 80) != *(_QWORD *)v35)
    {
      v39 = *((unsigned int *)this + 29);
      if ((_DWORD)v39)
      {
        v40 = *((_QWORD *)this + 13);
        v41 = 8 * v39;
        while (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v40 + 40) + 40) != *(_QWORD *)v35)
        {
          v40 += 8;
          v41 -= 8;
          if (!v41)
            goto LABEL_42;
        }
      }
      else
      {
LABEL_42:
        v42 = v35;
        if (v37 != v34)
        {
          if (v36 == v35)
          {
            v42 = v37;
          }
          else
          {
            memmove(v37, v36, v35 - v36);
            v42 = &v37[v35 - v36];
          }
        }
        v43 = *(WebCore::RTCDtlsTransport **)v35;
        *(_QWORD *)v35 = 0;
        v36 = v35 + 8;
        if (v43)
        {
          if (*((_DWORD *)v43 + 6) == 1)
          {
            WebCore::RTCDtlsTransport::~RTCDtlsTransport(v43);
            bmalloc::api::isoDeallocate(v44, v45);
          }
          else
          {
            --*((_DWORD *)v43 + 6);
          }
        }
        ++v33;
        v37 = v42;
      }
    }
    v35 += 8;
  }
  while (v35 < v34);
  v6 = v77;
LABEL_54:
  v46 = (v78 - v12);
  v47 = (char *)v27 + 8 * v25;
  if (v36 != v47)
    memmove(v37, v36, v47 - v36);
  v48 = (v25 - v33);
  v49 = 8 * v46;
  v50 = v78;
  if ((_DWORD)v78 != v12)
  {
    v51 = 8 * v46;
    v52 = v6;
    while (*(_DWORD *)(*(_QWORD *)v52 + 96) != 4)
    {
      v52 = (WTF *)((char *)v52 + 8);
      v51 -= 8;
      if (!v51)
        goto LABEL_60;
    }
    goto LABEL_77;
  }
LABEL_60:
  if ((_DWORD)v25 != v33)
  {
    v53 = 8 * v48;
    v54 = v27;
    while (*(_DWORD *)(*(_QWORD *)v54 + 88) != 4)
    {
      v54 = (WTF *)((char *)v54 + 8);
      v53 -= 8;
      if (!v53)
        goto LABEL_64;
    }
LABEL_77:
    v2 = 4;
    goto LABEL_98;
  }
LABEL_64:
  if ((_DWORD)v78 == v12)
  {
LABEL_75:
    if ((_DWORD)v25 == v33)
    {
      v2 = 0;
      goto LABEL_106;
    }
    v61 = 8 * v48;
    v62 = v27;
    while (1)
    {
      v63 = *(_DWORD *)(*(_QWORD *)v62 + 88);
      if (v63 != 3 && v63 != 0)
        break;
      v62 = (WTF *)((char *)v62 + 8);
      v61 -= 8;
      if (!v61)
      {
        v2 = 0;
        goto LABEL_98;
      }
    }
  }
  else
  {
    v55 = 8 * v46;
    v56 = v6;
    do
    {
      if (*(_DWORD *)(*(_QWORD *)v56 + 96) == 5)
      {
        v2 = 3;
        goto LABEL_98;
      }
      v56 = (WTF *)((char *)v56 + 8);
      v55 -= 8;
    }
    while (v55);
    v57 = 8 * v46;
    v58 = v6;
    while (1)
    {
      v59 = *(_DWORD *)(*(_QWORD *)v58 + 96);
      if (v59 != 6 && v59 != 0)
        break;
      v58 = (WTF *)((char *)v58 + 8);
      v57 -= 8;
      if (!v57)
        goto LABEL_75;
    }
  }
  if ((_DWORD)v78 != v12)
  {
    v65 = 8 * v46;
    v66 = v6;
    while (*(_DWORD *)(*(_QWORD *)v66 + 96) >= 2u)
    {
      v66 = (WTF *)((char *)v66 + 8);
      v65 -= 8;
      if (!v65)
        goto LABEL_91;
    }
    goto LABEL_97;
  }
LABEL_91:
  if ((_DWORD)v25 != v33)
  {
    v67 = 8 * v48;
    v68 = v27;
    v2 = 2;
    while (*(_DWORD *)(*(_QWORD *)v68 + 88) > 1u)
    {
      v68 = (WTF *)((char *)v68 + 8);
      v67 -= 8;
      if (!v67)
        goto LABEL_98;
    }
LABEL_97:
    v2 = 1;
LABEL_98:
    if ((_DWORD)v25 != v33)
    {
      v69 = 8 * (v25 - v33);
      v70 = v27;
      do
      {
        v71 = *(WebCore::RTCDtlsTransport **)v70;
        *(_QWORD *)v70 = 0;
        if (v71)
        {
          if (*((_DWORD *)v71 + 6) == 1)
          {
            WebCore::RTCDtlsTransport::~RTCDtlsTransport(v71);
            bmalloc::api::isoDeallocate(v72, v73);
          }
          else
          {
            --*((_DWORD *)v71 + 6);
          }
        }
        v70 = (WTF *)((char *)v70 + 8);
        v69 -= 8;
      }
      while (v69);
      v50 = v78;
    }
    goto LABEL_106;
  }
  v2 = 2;
LABEL_106:
  if (v27)
    WTF::fastFree(v27, a2);
  if (v50 != v12)
  {
    v75 = v6;
    do
    {
      v76 = *(_DWORD **)v75;
      *(_QWORD *)v75 = 0;
      if (v76)
      {
        if (v76[6] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v76 + 16))(v76);
        else
          --v76[6];
      }
      v75 = (WTF *)((char *)v75 + 8);
      v49 -= 8;
    }
    while (v49);
  }
  if (v6)
    WTF::fastFree(v6, a2);
  return v2;
}

WTF::StringImpl *WebCore::RTCPeerConnection::updateConnectionState(WebCore::RTCPeerConnection *this, void *a2)
{
  WTF::StringImpl *result;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::Logger *v38;
  uint64_t v39;
  WTF::StringImpl **v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (**v60)();
  unsigned int v61;
  uint64_t v62;
  _QWORD v63[4];
  WTF::Logger *v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  __int128 buf;
  int v74;
  WTF::StringImpl *v75;
  int v76;
  WTF::StringImpl *v77;
  int v78;
  WTF::StringImpl *v79;
  int v80;
  WTF::StringImpl *v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  result = (WTF::StringImpl *)WebCore::RTCPeerConnection::computeConnectionState(this, a2);
  if ((_DWORD)result == *((_DWORD *)this + 20))
    return result;
  v4 = result;
  v5 = *((_QWORD *)this + 11);
  v6 = *((_QWORD *)this + 12);
  v63[0] = "RTCPeerConnection";
  v63[1] = 18;
  v63[2] = "updateConnectionState";
  v63[3] = v6;
  if (*(_BYTE *)(v5 + 12))
  {
    if (WebCore::LogWebRTC && byte_1ECE7CD50 >= 3u)
    {
      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
      WTF::String::String((WTF::String *)&v67, "state changed from: ");
      v8 = *((int *)this + 20);
      {
        WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_0::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_1::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_2::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_3::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_4::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_5::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_0::operator() const(void)::impl;
        unk_1EE2F4B10 = &WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_1::operator() const(void)::impl;
        qword_1EE2F4B18 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_2::operator() const(void)::impl;
        unk_1EE2F4B20 = &WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_3::operator() const(void)::impl;
        qword_1EE2F4B28 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_4::operator() const(void)::impl;
        unk_1EE2F4B30 = &WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_5::operator() const(void)::impl;
      }
      v9 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::values[v8];
      if (v9)
        *(_DWORD *)v9 += 2;
      WTF::String::String((WTF::String *)&v66, " to ");
      {
        WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_0::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_1::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_2::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_3::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_4::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_5::operator() const(void)::impl += 2;
        WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_0::operator() const(void)::impl;
        unk_1EE2F4B10 = &WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_1::operator() const(void)::impl;
        qword_1EE2F4B18 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_2::operator() const(void)::impl;
        unk_1EE2F4B20 = &WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_3::operator() const(void)::impl;
        qword_1EE2F4B28 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_4::operator() const(void)::impl;
        unk_1EE2F4B30 = &WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_5::operator() const(void)::impl;
      }
      v10 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::values[v4];
      if (v10)
        *(_DWORD *)v10 += 2;
      v72 = v9;
      *(_QWORD *)&buf = v68;
      v64 = v67;
      v70 = v10;
      v71 = v66;
      result = (WTF::StringImpl *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v64, (uint64_t *)&v72, (uint64_t *)&v71, (uint64_t *)&v70, &v69);
      if (!v69)
      {
        __break(0xC471u);
        return result;
      }
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v11);
        else
          *(_DWORD *)v10 -= 2;
      }
      v12 = v66;
      v66 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
        {
          WTF::StringImpl::destroy(v12, v11);
          if (v9)
          {
LABEL_24:
            if (*(_DWORD *)v9 == 2)
              WTF::StringImpl::destroy(v9, v11);
            else
              *(_DWORD *)v9 -= 2;
          }
LABEL_26:
          v13 = v67;
          v67 = 0;
          if (v13)
          {
            if (*(_DWORD *)v13 == 2)
              WTF::StringImpl::destroy(v13, v11);
            else
              *(_DWORD *)v13 -= 2;
          }
          v14 = v68;
          v68 = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v11);
            else
              *(_DWORD *)v14 -= 2;
          }
          v15 = qword_1ECE7CD60;
          v16 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v16)
          {
            WTF::String::utf8();
            v18 = v64 ? (char *)v64 + 16 : 0;
            LODWORD(buf) = 136446210;
            *(_QWORD *)((char *)&buf + 4) = v18;
            _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
            v16 = (uint64_t)v64;
            v64 = 0;
            if (v16)
            {
              if (*(_DWORD *)v16 == 1)
                v16 = WTF::fastFree((WTF *)v16, v17);
              else
                --*(_DWORD *)v16;
            }
          }
          if (WebCore::LogWebRTC && byte_1ECE7CD50 >= 3u)
          {
            v62 = v4;
            v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
            while (1)
            {
              v20 = *v19;
              if ((v20 & 1) != 0)
                break;
              v21 = __ldaxr(v19);
              if (v21 == v20)
              {
                if (!__stxr(v20 | 1, v19))
                {
                  v61 = v4;
                  v22 = WTF::Logger::observers((WTF::Logger *)v16);
                  v23 = *(unsigned int *)(v22 + 12);
                  v24 = &unk_1EE2F4000;
                  if ((_DWORD)v23)
                  {
                    v25 = *(uint64_t **)v22;
                    v26 = *(_QWORD *)v22 + 8 * v23;
                    do
                    {
                      v27 = *v25;
                      LODWORD(buf) = 0;
                      WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)v63);
                      v74 = 0;
                      WTF::String::String((WTF::String *)&v75, "state changed from: ");
                      v28 = *((int *)this + 20);
                      v76 = 0;
                      if ((v24[2872] & 1) == 0)
                      {
                        WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_0::operator() const(void)::impl += 2;
                        WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_1::operator() const(void)::impl += 2;
                        WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_0::operator() const(void)::impl;
                        unk_1EE2F4B10 = &WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_1::operator() const(void)::impl;
                        WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_2::operator() const(void)::impl += 2;
                        WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_3::operator() const(void)::impl += 2;
                        qword_1EE2F4B18 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_2::operator() const(void)::impl;
                        unk_1EE2F4B20 = &WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_3::operator() const(void)::impl;
                        WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_4::operator() const(void)::impl += 2;
                        WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_5::operator() const(void)::impl += 2;
                        qword_1EE2F4B28 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_4::operator() const(void)::impl;
                        unk_1EE2F4B30 = &WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_5::operator() const(void)::impl;
                        v24[2872] = 1;
                      }
                      v29 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::values[v28];
                      if (v29)
                        *(_DWORD *)v29 += 2;
                      v77 = v29;
                      v78 = 0;
                      WTF::String::String((WTF::String *)&v79, " to ");
                      v80 = 0;
                      if ((v24[2872] & 1) == 0)
                      {
                        WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_0::operator() const(void)::impl += 2;
                        WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_1::operator() const(void)::impl += 2;
                        WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_0::operator() const(void)::impl;
                        unk_1EE2F4B10 = &WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_1::operator() const(void)::impl;
                        WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_2::operator() const(void)::impl += 2;
                        WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_3::operator() const(void)::impl += 2;
                        qword_1EE2F4B18 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_2::operator() const(void)::impl;
                        unk_1EE2F4B20 = &WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_3::operator() const(void)::impl;
                        WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_4::operator() const(void)::impl += 2;
                        WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_5::operator() const(void)::impl += 2;
                        qword_1EE2F4B28 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_4::operator() const(void)::impl;
                        unk_1EE2F4B30 = &WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::$_5::operator() const(void)::impl;
                        v24[2872] = 1;
                      }
                      v30 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::RTCPeerConnectionState)::values[v62];
                      if (v30)
                        *(_DWORD *)v30 += 2;
                      v81 = v30;
                      v64 = 0;
                      v65 = 0;
                      v31 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x50);
                      LODWORD(v65) = 5;
                      v64 = v31;
                      v32 = HIDWORD(v65);
                      *((_DWORD *)v31 + 4 * HIDWORD(v65)) = buf;
                      v33 = *((_QWORD *)&buf + 1);
                      if (*((_QWORD *)&buf + 1))
                        **((_DWORD **)&buf + 1) += 2;
                      *((_QWORD *)v31 + 2 * v32 + 1) = v33;
                      *((_DWORD *)v31 + 4 * (v32 + 1)) = v74;
                      v34 = v75;
                      if (v75)
                        *(_DWORD *)v75 += 2;
                      *((_QWORD *)v31 + 2 * (v32 + 1) + 1) = v34;
                      *((_DWORD *)v31 + 4 * (v32 + 2)) = v76;
                      v35 = v77;
                      if (v77)
                        *(_DWORD *)v77 += 2;
                      *((_QWORD *)v31 + 2 * (v32 + 2) + 1) = v35;
                      *((_DWORD *)v31 + 4 * (v32 + 3)) = v78;
                      v36 = v79;
                      if (v79)
                        *(_DWORD *)v79 += 2;
                      *((_QWORD *)v31 + 2 * (v32 + 3) + 1) = v36;
                      *((_DWORD *)v31 + 4 * (v32 + 4)) = v80;
                      v37 = v81;
                      if (v81)
                        *(_DWORD *)v81 += 2;
                      *((_QWORD *)v31 + 2 * (v32 + 4) + 1) = v37;
                      HIDWORD(v65) = v32 + 5;
                      (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v27 + 16))(v27, &WebCore::LogWebRTC, 3, &v64);
                      v38 = v64;
                      if (HIDWORD(v65))
                      {
                        v39 = 16 * HIDWORD(v65);
                        v40 = (WTF::StringImpl **)((char *)v64 + 8);
                        do
                        {
                          v41 = *v40;
                          *v40 = 0;
                          if (v41)
                          {
                            if (*(_DWORD *)v41 == 2)
                              WTF::StringImpl::destroy(v41, (WTF::StringImpl *)v17);
                            else
                              *(_DWORD *)v41 -= 2;
                          }
                          v40 += 2;
                          v39 -= 16;
                        }
                        while (v39);
                        v38 = v64;
                        v24 = (_BYTE *)&unk_1EE2F4000;
                      }
                      if (v38)
                      {
                        v64 = 0;
                        LODWORD(v65) = 0;
                        WTF::fastFree(v38, v17);
                      }
                      v42 = v81;
                      v81 = 0;
                      if (v42)
                      {
                        if (*(_DWORD *)v42 == 2)
                          WTF::StringImpl::destroy(v42, (WTF::StringImpl *)v17);
                        else
                          *(_DWORD *)v42 -= 2;
                      }
                      v43 = v79;
                      v79 = 0;
                      if (v43)
                      {
                        if (*(_DWORD *)v43 == 2)
                          WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v17);
                        else
                          *(_DWORD *)v43 -= 2;
                      }
                      v44 = v77;
                      v77 = 0;
                      if (v44)
                      {
                        if (*(_DWORD *)v44 == 2)
                          WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v17);
                        else
                          *(_DWORD *)v44 -= 2;
                      }
                      v45 = v75;
                      v75 = 0;
                      if (v45)
                      {
                        if (*(_DWORD *)v45 == 2)
                          WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v17);
                        else
                          *(_DWORD *)v45 -= 2;
                      }
                      v46 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                      *((_QWORD *)&buf + 1) = 0;
                      if (v46)
                      {
                        if (*(_DWORD *)v46 == 2)
                          WTF::StringImpl::destroy(v46, (WTF::StringImpl *)v17);
                        else
                          *(_DWORD *)v46 -= 2;
                      }
                      ++v25;
                    }
                    while (v25 != (uint64_t *)v26);
                  }
                  v47 = __ldxr(v19);
                  if (v47 == 1)
                  {
                    v4 = v61;
                    if (!__stlxr(0, v19))
                      break;
                  }
                  else
                  {
                    __clrex();
                    v4 = v61;
                  }
                  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
                  break;
                }
              }
              else
              {
                __clrex();
              }
            }
          }
          result = v69;
          v69 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v17);
            else
              *(_DWORD *)result -= 2;
          }
          goto LABEL_107;
        }
        *(_DWORD *)v12 -= 2;
      }
      if (v9)
        goto LABEL_24;
      goto LABEL_26;
    }
  }
LABEL_107:
  *((_DWORD *)this + 20) = v4;
  v48 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v48 || (v49 = *(_QWORD *)(v48 + 96)) == 0)
    v49 = WebCore::threadGlobalDataSlow(result);
  v50 = *(_QWORD *)(v49 + 40);
  if (!v50)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v49);
    v50 = *(_QWORD *)(v49 + 40);
  }
  v51 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v51);
  *(_DWORD *)(v51 + 16) = 1;
  *(_QWORD *)v51 = off_1E33A4B48;
  *(_QWORD *)(v51 + 8) = 0;
  *(_DWORD *)(v51 + 20) = *(_DWORD *)(v51 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v50 + 480) != 0);
  v53 = *(_DWORD **)(v50 + 480);
  if (v53)
    *v53 += 2;
  *(_QWORD *)(v51 + 24) = v53;
  *(_QWORD *)(v51 + 32) = 0;
  *(_QWORD *)(v51 + 40) = 0;
  *(_QWORD *)(v51 + 48) = 0;
  *(_QWORD *)(v51 + 56) = v52;
  *(_QWORD *)(v51 + 64) = 0;
  v54 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v54 = &off_1E3361330;
  v54[1] = this;
  v54[2] = v51;
  v55 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v55 = 1;
  v56 = *((_DWORD *)this + 6);
  *(_QWORD *)(v55 + 8) = this;
  ++*((_QWORD *)this + 6);
  *((_DWORD *)this + 6) = v56 + 2;
  result = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)result = off_1E3360610;
  *((_QWORD *)result + 1) = this;
  *((_QWORD *)result + 2) = v55;
  *((_QWORD *)result + 3) = v54;
  *(_QWORD *)&buf = result;
  v57 = *((_QWORD *)this + 5);
  if (v57)
  {
    v58 = *(_QWORD *)(v57 + 8);
    if (v58)
    {
      v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v58 - 96) + 104))(v58 - 96);
      WebCore::EventLoopTaskGroup::queueTask(v59, 11, (uint64_t *)&buf);
      result = (WTF::StringImpl *)buf;
      *(_QWORD *)&buf = 0;
      if (!result)
        return result;
    }
    else
    {
      *(_QWORD *)&buf = 0;
    }
    v60 = *(uint64_t (***)())result;
  }
  else
  {
    *(_QWORD *)&buf = 0;
    v60 = off_1E3360610;
  }
  return (WTF::StringImpl *)v60[1]();
}

uint64_t (***WebCore::RTCPeerConnection::scheduleEvent(uint64_t a1, uint64_t (**a2)()))()
{
  uint64_t (*v3)();
  uint64_t (**v4)();
  uint64_t v5;
  int v6;
  uint64_t (***result)();
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)();
  uint64_t (***v12)();

  v3 = *a2;
  *a2 = 0;
  v4 = (uint64_t (**)())WTF::fastMalloc((WTF *)0x18);
  *v4 = (uint64_t (*)())&off_1E3361330;
  v4[1] = (uint64_t (*)())a1;
  v4[2] = v3;
  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  v6 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v5 + 8) = a1;
  ++*(_QWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 24) = v6 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = off_1E3360610;
  result[1] = (uint64_t (**)())a1;
  result[2] = (uint64_t (**)())v5;
  result[3] = v4;
  v12 = result;
  v8 = *(_QWORD *)(a1 + 40);
  if (!v8)
  {
    v12 = 0;
    v11 = off_1E3360610;
    return (uint64_t (***)())v11[1]();
  }
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
  {
    v12 = 0;
    goto LABEL_6;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 - 96) + 104))(v9 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v10, 11, (uint64_t *)&v12);
  result = v12;
  v12 = 0;
  if (result)
  {
LABEL_6:
    v11 = *result;
    return (uint64_t (***)())v11[1]();
  }
  return result;
}

uint64_t WebCore::RTCPeerConnection::computeIceConnectionStateFromIceTransports(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _DWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  WTF *v32;
  int v33;
  WTF *v35;
  _DWORD *v36;
  uint64_t v37;
  WTF *v38;
  uint64_t v39;
  WTF *v40;
  int v41;

  if (*(_DWORD *)(this + 80) == 5)
    return 6;
  v3 = this;
  v4 = *(unsigned int *)(this + 292);
  if (!(_DWORD)v4)
  {
    v6 = 0;
    v12 = 0;
    v16 = (char *)(8 * v4);
    v15 = (char *)(8 * v4);
LABEL_28:
    v24 = (char *)v6 + 8 * v4;
    if (v15 != v24)
      memmove(v16, v15, v24 - v15);
    v25 = (v4 - v12);
    if ((_DWORD)v4 == v12)
    {
      v2 = 0;
    }
    else
    {
      v26 = 8 * v25;
      v27 = 8 * v25;
      v28 = v6;
      do
      {
        if (*(_DWORD *)(*(_QWORD *)v28 + 96) == 4)
        {
          v2 = 4;
          goto LABEL_51;
        }
        v28 = (WTF *)((char *)v28 + 8);
        v27 -= 8;
      }
      while (v27);
      v29 = v26;
      v30 = v6;
      do
      {
        if (*(_DWORD *)(*(_QWORD *)v30 + 96) == 5)
        {
          v2 = 5;
          goto LABEL_51;
        }
        v30 = (WTF *)((char *)v30 + 8);
        v29 -= 8;
      }
      while (v29);
      v31 = v26;
      v32 = v6;
      while (1)
      {
        v33 = *(_DWORD *)(*(_QWORD *)v32 + 96);
        if (v33 && v33 != 6)
          break;
        v32 = (WTF *)((char *)v32 + 8);
        v31 -= 8;
        if (!v31)
        {
          v2 = 0;
          goto LABEL_51;
        }
      }
      v37 = v26;
      v38 = v6;
      do
      {
        if (*(_DWORD *)(*(_QWORD *)v38 + 96) < 2u)
        {
          v2 = 1;
          goto LABEL_51;
        }
        v38 = (WTF *)((char *)v38 + 8);
        v37 -= 8;
      }
      while (v37);
      v39 = v26;
      v40 = v6;
      v2 = 3;
      while (1)
      {
        v41 = *(_DWORD *)(*(_QWORD *)v40 + 96);
        if (v41 != 6 && v41 != 3)
          break;
        v40 = (WTF *)((char *)v40 + 8);
        v39 -= 8;
        if (!v39)
          goto LABEL_51;
      }
      v2 = 2;
LABEL_51:
      v35 = v6;
      do
      {
        v36 = *(_DWORD **)v35;
        *(_QWORD *)v35 = 0;
        if (v36)
        {
          if (v36[6] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v36 + 16))(v36);
          else
            --v36[6];
        }
        v35 = (WTF *)((char *)v35 + 8);
        v26 -= 8;
      }
      while (v26);
    }
    if (v6)
      WTF::fastFree(v6, a2);
    return v2;
  }
  if (!(v4 >> 29))
  {
    v5 = WTF::fastMalloc((WTF *)(8 * v4));
    v6 = (WTF *)v5;
    v7 = *(unsigned int *)(v3 + 292);
    if ((_DWORD)v7)
    {
      v8 = *(uint64_t **)(v3 + 280);
      v9 = 8 * v7;
      v10 = (_QWORD *)v5;
      do
      {
        v11 = *v8++;
        ++*(_DWORD *)(v11 + 24);
        *v10++ = v11;
        v9 -= 8;
      }
      while (v9);
    }
    v12 = 0;
    v13 = (char *)(v5 + 8 * v4);
    v14 = (char *)v5;
    v15 = v13;
    v16 = v13;
    do
    {
      v17 = *(_QWORD *)(v3 + 296);
      if (!v17 || *(_QWORD *)(*(_QWORD *)(v17 + 80) + 80) != *(_QWORD *)v14)
      {
        v18 = *(unsigned int *)(v3 + 116);
        if ((_DWORD)v18)
        {
          v19 = *(_QWORD *)(v3 + 104);
          v20 = 8 * v18;
          while (1)
          {
            v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v19 + 40) + 40);
            if (v21)
            {
              if (*(_QWORD *)(v21 + 80) == *(_QWORD *)v14)
                break;
            }
            v19 += 8;
            v20 -= 8;
            if (!v20)
              goto LABEL_16;
          }
        }
        else
        {
LABEL_16:
          v22 = v14;
          if (v16 != v13)
          {
            if (v15 == v14)
            {
              v22 = v16;
            }
            else
            {
              memmove(v16, v15, v14 - v15);
              v22 = &v16[v14 - v15];
            }
          }
          v23 = *(_DWORD **)v14;
          *(_QWORD *)v14 = 0;
          v15 = v14 + 8;
          if (v23)
          {
            if (v23[6] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 16))(v23);
            else
              --v23[6];
          }
          ++v12;
          v16 = v22;
        }
      }
      v14 += 8;
    }
    while (v14 < v13);
    goto LABEL_28;
  }
  __break(0xC471u);
  return this;
}

WebCore *WebCore::RTCPeerConnection::processIceTransportChanges(WebCore::RTCPeerConnection *this, void *a2)
{
  WebCore *result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];

  result = (WebCore *)WebCore::RTCPeerConnection::computeIceConnectionStateFromIceTransports((uint64_t)this, a2);
  v4 = *((_DWORD *)this + 19);
  *((_DWORD *)this + 19) = (_DWORD)result;
  if (v4 != (_DWORD)result && *((_DWORD *)this + 20) != 5)
  {
    v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v5 || (v6 = *(_QWORD *)(v5 + 96)) == 0)
      v6 = WebCore::threadGlobalDataSlow(result);
    v7 = *(_QWORD *)(v6 + 40);
    if (!v7)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
      v7 = *(_QWORD *)(v6 + 40);
    }
    v8 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v8);
    *(_DWORD *)(v8 + 16) = 1;
    *(_QWORD *)v8 = off_1E33A4B48;
    *(_QWORD *)(v8 + 8) = 0;
    *(_DWORD *)(v8 + 20) = *(_DWORD *)(v8 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v7 + 984) != 0);
    v10 = *(_DWORD **)(v7 + 984);
    if (v10)
      *v10 += 2;
    *(_QWORD *)(v8 + 24) = v10;
    *(_QWORD *)(v8 + 40) = 0;
    *(_QWORD *)(v8 + 48) = 0;
    *(_QWORD *)(v8 + 32) = 0;
    *(_QWORD *)(v8 + 56) = v9;
    *(_QWORD *)(v8 + 64) = 0;
    v11 = *((_QWORD *)this + 11);
    v12 = *((_QWORD *)this + 12);
    v13[0] = "RTCPeerConnection";
    v13[1] = 18;
    v13[2] = "dispatchEvent";
    v13[3] = v12;
    if (*(_BYTE *)(v11 + 12) && WebCore::LogWebRTC && byte_1ECE7CD50 >= 3u)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [14],WTF::AtomString,char [2]>((uint64_t)&WebCore::LogWebRTC, 3u, (WTF::Logger::LogSiteIdentifier *)v13, "dispatching '", (WTF::StringImpl **)(v8 + 24), "'");
    result = WebCore::EventTarget::dispatchEvent(this, (WebCore::Event *)v8);
    if (*(_DWORD *)(v8 + 16) == 1)
      return (WebCore *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    else
      --*(_DWORD *)(v8 + 16);
  }
  return result;
}

uint64_t (***WebCore::RTCPeerConnection::updateNegotiationNeededFlag(uint64_t a1, uint64_t a2))()
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t (***result)();
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)();
  uint64_t (***v12)();

  v4 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v4 = off_1E3361308;
  *(_QWORD *)(v4 + 8) = a1;
  *(_BYTE *)(v4 + 20) = BYTE4(a2);
  *(_DWORD *)(v4 + 16) = a2;
  v5 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  v6 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v5 + 8) = a1;
  ++*(_QWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 24) = v6 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = off_1E3360610;
  result[1] = (uint64_t (**)())a1;
  result[2] = (uint64_t (**)())v5;
  result[3] = (uint64_t (**)())v4;
  v12 = result;
  v8 = *(_QWORD *)(a1 + 40);
  if (!v8)
  {
    v12 = 0;
    v11 = off_1E3360610;
    return (uint64_t (***)())v11[1]();
  }
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
  {
    v12 = 0;
    goto LABEL_6;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v9 - 96) + 104))(v9 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v10, 11, (uint64_t *)&v12);
  result = v12;
  v12 = 0;
  if (result)
  {
LABEL_6:
    v11 = *result;
    return (uint64_t (***)())v11[1]();
  }
  return result;
}

WTF::StringImpl *WebCore::RTCPeerConnection::generateCertificate(WebCore::JSDOMGlobalObject *a1, uint64_t a2, uint64_t *a3)
{
  int v4;
  char v5;
  JSC::JSCell *v7;
  JSC::VM *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  char v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *result;
  uint64_t v40;
  unint64_t v41;
  _BYTE v42[7];
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  char v49;
  int v50;
  objc_class *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  char v54;
  _BYTE v55[7];
  unint64_t v56;
  char v57;
  _BYTE v58[7];
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a2 + 8);
  if (v4)
  {
    if (v4 == 1)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v5 = 6;
      LOBYTE(v52) = 6;
      v59 = 1;
      goto LABEL_70;
    }
LABEL_95:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  if (*(_QWORD *)a2)
    v7 = **(JSC::JSCell ***)a2;
  else
    v7 = 0;
  v8 = (JSC::VM *)*((_QWORD *)a1 + 7);
  WebCore::convertDictionary<WebCore::RTCPeerConnection::CertificateParameters>(v7, (uint64_t)a1, (uint64_t)&v43);
  if (v50)
  {
    JSC::VM::clearException(v8);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = 33;
    LOBYTE(v52) = 33;
    v34 = 1;
    v59 = 1;
    goto LABEL_67;
  }
  v9 = v43;
  v10 = v44;
  v43 = 0;
  v44 = 0;
  v11 = v45;
  v12 = v46;
  v13 = v47;
  v45 = 0;
  v47 = 0;
  v14 = v48;
  v15 = v49;
  if (v49 && v48 < 0.0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v5 = 33;
    LOBYTE(v52) = 33;
    goto LABEL_55;
  }
  if (MEMORY[0x19AEA53F4](v9, "RSASSA-PKCS1-v1_5", 17))
  {
    if (!v10 || (MEMORY[0x19AEA53F4](v10, "SHA-256", 7) & 1) != 0)
    {
      v17 = 0;
      v18 = 0;
      if ((v12 & 0xFF00000000) != 0 && v13)
      {
        v19 = *(_QWORD *)(v13 + 32);
        if (v19 && (v20 = *(_QWORD *)(v19 + 16)) != 0)
        {
          v21 = 0;
          v22 = 0;
          v23 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
          v24 = 1;
          v25 = 1;
          if (!v23)
            goto LABEL_20;
LABEL_18:
          v16 = *(unsigned __int8 *)(MEMORY[0x1E0CC10F8] + 34);
          if (!*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34)
            && (v16 = *MEMORY[0x1E0CC10F0], *MEMORY[0x1E0CC10F0])
            || (v20 & 0x3FFFFFFFFLL) + v23)
          {
            while (1)
            {
LABEL_20:
              v26 = *(_BYTE *)(v13 + 6);
              if ((v26 & 3) != 0)
              {
                if (*(_BYTE *)(v19 + 64) && (v33 = *(_QWORD *)(v19 + 32)) != 0)
                {
                  v28 = atomic_load((unint64_t *)(v33 + 32));
                  v26 = *(_BYTE *)(v13 + 6);
                }
                else
                {
                  v28 = *(_QWORD *)(v19 + 48);
                }
                v29 = *(_QWORD *)(v13 + 8);
                if ((v26 & 4) != 0)
                {
                  v31 = v28 - v29;
                  if (v28 >= v29)
                    break;
                  if ((*(_BYTE *)(v13 + 4) - 4) > 7u)
                    LOBYTE(v32) = 0;
                  else
                    v32 = qword_1968DEC30[(char)(*(_BYTE *)(v13 + 4) - 4)];
                  v27 = (-1 << v32) & v31;
                }
                else
                {
                  v27 = *(_QWORD *)(v13 + 16);
                  v16 = v27 + v29;
                  if (v27 + v29 <= v28 && v28 >= v29)
                    v27 = 0;
                }
              }
              else
              {
                v27 = *(_QWORD *)(v13 + 16);
              }
              if (v27 <= v22)
                break;
              v23 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
              if (v23)
              {
                if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34))
                {
                  v16 = *(_QWORD *)(v13 + 24);
                }
                else
                {
                  v16 = *(_QWORD *)(v13 + 24);
                  if (*MEMORY[0x1E0CC10F0])
                    goto LABEL_28;
                }
                v16 = (v16 & 0x3FFFFFFFFLL) + v23;
              }
              else
              {
                v16 = *(_QWORD *)(v13 + 24);
              }
LABEL_28:
              v19 = *(_QWORD *)(v13 + 32);
              v20 = *(_QWORD *)(v19 + 16);
              v21 += v25 * *(unsigned __int8 *)(v16 + v22);
              v25 <<= 8;
              v22 = v24++;
              if (v23)
                goto LABEL_18;
            }
          }
        }
        else
        {
          v21 = 0;
        }
        v41 = v12 | ((unint64_t)v21 << 32);
        v18 = 1;
        v17 = v41;
      }
      v5 = 0;
      v34 = 0;
      HIBYTE(v53) = HIBYTE(v14);
      *(_WORD *)((char *)&v53 + 5) = HIDWORD(v14) >> 8;
      LOBYTE(v53) = LOBYTE(v14);
      LODWORD(v52) = 0;
      *(_DWORD *)((char *)&v53 + 1) = *(_QWORD *)&v14 >> 8;
      v54 = v15;
      *(_DWORD *)v55 = (_DWORD)v51;
      *(_DWORD *)&v55[3] = *(_DWORD *)((char *)&v51 + 3);
      v56 = v17;
      v57 = v18;
      *(_DWORD *)v58 = *(_DWORD *)v42;
      *(_DWORD *)&v58[3] = *(_DWORD *)&v42[3];
      v59 = 0;
      if (!v13)
        goto LABEL_58;
      goto LABEL_56;
    }
  }
  else if (MEMORY[0x19AEA53F4](v9, "ECDSA", 5) && MEMORY[0x19AEA53F4](v11, "P-256", 5))
  {
    v34 = 0;
    v5 = 1;
    LODWORD(v52) = 1;
    HIBYTE(v53) = HIBYTE(v14);
    LOBYTE(v53) = LOBYTE(v14);
    *(_WORD *)((char *)&v53 + 5) = HIDWORD(v14) >> 8;
    *(_DWORD *)((char *)&v53 + 1) = *(_QWORD *)&v14 >> 8;
    v54 = v15;
    LOBYTE(v56) = 0;
    v57 = 0;
    v59 = 0;
    if (!v13)
      goto LABEL_58;
    goto LABEL_56;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v35 = v52;
  v5 = 6;
  LOBYTE(v52) = 6;
  v53 = v35;
LABEL_55:
  v34 = 1;
  v59 = 1;
  if (!v13)
    goto LABEL_58;
LABEL_56:
  if (*(_DWORD *)v13 == 1)
    JSC::ArrayBufferView::operator delete();
  else
    --*(_DWORD *)v13;
LABEL_58:
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
    {
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)v16);
      if (!v10)
        goto LABEL_64;
      goto LABEL_62;
    }
    *(_DWORD *)v11 -= 2;
  }
  if (!v10)
    goto LABEL_64;
LABEL_62:
  if (*(_DWORD *)v10 == 2)
    WTF::StringImpl::destroy(v10, (WTF::StringImpl *)v16);
  else
    *(_DWORD *)v10 -= 2;
LABEL_64:
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, (WTF::StringImpl *)v16);
    else
      *(_DWORD *)v9 -= 2;
  }
LABEL_67:
  if (v50 != -1)
    ((void (*)(objc_class **, WTF::StringImpl **))off_1E3360F70[v50])(&v51, &v43);
  if (!v34)
  {
    v40 = WebCore::JSDOMGlobalObject::scriptExecutionContext(a1);
    if (*(_BYTE *)(v40 + 274))
    {
      __break(0xC471u);
      JUMPOUT(0x19549C5ECLL);
    }
    if (!v59)
    {
      result = WebCore::PeerConnectionBackend::generateCertificate(v40 - 192, (uint64_t)&v52, a3);
      goto LABEL_81;
    }
    goto LABEL_95;
  }
LABEL_70:
  v36 = v53;
  v53 = 0;
  v37 = *a3;
  v51 = 0;
  LOBYTE(v43) = v5;
  if (v36)
    *(_DWORD *)v36 += 2;
  v44 = v36;
  WebCore::DeferredPromise::reject(v37, (unsigned __int8 *)&v43, 0, &v51);
  result = v44;
  v44 = 0;
  if (!result)
  {
LABEL_75:
    if (v36)
      goto LABEL_76;
    goto LABEL_81;
  }
  if (*(_DWORD *)result != 2)
  {
    *(_DWORD *)result -= 2;
    goto LABEL_75;
  }
  result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v38);
  if (v36)
  {
LABEL_76:
    if (*(_DWORD *)v36 == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(v36, v38);
    else
      *(_DWORD *)v36 -= 2;
  }
LABEL_81:
  if (v59 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3360F80[v59])(&v43, &v52);
  return result;
}

uint64_t WebCore::RTCPeerConnection::scriptExecutionContext(WebCore::RTCPeerConnection *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 5);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

unsigned int *WebCore::RTCPeerConnection::getOrCreateDtlsTransport(_QWORD *a1, uint64_t a2, unsigned int **a3)
{
  unsigned int *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  WebCore::RTCDtlsTransport *v37;
  _DWORD *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WebCore::RTCDtlsTransport *v44;
  uint64_t v45;
  int v46;
  bmalloc::api *v47;
  void *v48;
  _QWORD *v49;
  uint64_t v50;
  unsigned int *v51;
  WebCore::RTCDtlsTransport *v52[3];
  _DWORD *v53;

  result = *a3;
  if (!*a3 || (v6 = *(_QWORD *)(a2 + 40)) == 0 || (v7 = *(_QWORD *)(v6 + 8)) == 0)
  {
    *a1 = 0;
    return result;
  }
  v9 = v7 - 96;
  v10 = *(unsigned __int8 *)(v7 + 178);
  if (*(_BYTE *)(v7 + 178))
  {
    if (v10 == 1 || v10 == 2)
      ++*(_DWORD *)(v7 + 216);
  }
  else
  {
    *(_DWORD *)(v7 - 264) += 2;
  }
  v11 = (_QWORD *)(a2 + 264);
  if (*(_DWORD *)(a2 + 276))
  {
    v12 = 0;
    while (1)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(*v11 + 8 * v12) + 72);
      v14 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)*a3 + 16))(*a3);
      result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
      if ((unsigned int *)v14 == result)
        break;
      ++v12;
      v16 = *(unsigned int *)(a2 + 276);
      if (v12 >= v16)
      {
        v49 = a1;
        result = *a3;
        goto LABEL_13;
      }
    }
    v16 = v12;
    goto LABEL_54;
  }
  v49 = a1;
  v16 = 0;
LABEL_13:
  (*(void (**)(unsigned int **__return_ptr))(*(_QWORD *)result + 24))(&v51);
  v17 = (uint64_t)*a3;
  *a3 = 0;
  v50 = v17;
  if (*(_DWORD *)(a2 + 292))
  {
    v18 = 0;
    while (1)
    {
      v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 280) + 8 * v18) + 80);
      v20 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v51 + 16))(v51);
      if (v20 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19))
        break;
      ++v18;
      v21 = *(unsigned int *)(a2 + 292);
      if (v18 >= v21)
        goto LABEL_20;
    }
    v21 = v18;
    v9 = v7 - 96;
    a1 = v49;
    goto LABEL_41;
  }
  v21 = 0;
LABEL_20:
  v22 = *(_QWORD *)(a2 + 40);
  if (v22 && (v23 = *(_QWORD *)(v22 + 8)) != 0)
  {
    v24 = bmalloc::api::isoAllocate();
    *(_DWORD *)(v24 + 24) = 1;
    v9 = v7 - 96;
    if (!*(_BYTE *)(v23 + 178))
    {
      v26 = v23 - 288;
      v27 = *(_QWORD *)(v23 + 416);
      a1 = v49;
      if (v27)
      {
        v28 = *(_QWORD *)(v27 + 8);
        if (v28)
          v26 = v28;
      }
      v25 = v26 + 192;
      goto LABEL_31;
    }
    v25 = v23 - 96;
  }
  else
  {
    v24 = bmalloc::api::isoAllocate();
    v25 = 0;
    *(_DWORD *)(v24 + 24) = 1;
    v9 = v7 - 96;
  }
  a1 = v49;
LABEL_31:
  *(_QWORD *)v24 = &off_1E33A18C0;
  *(_QWORD *)(v24 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v24, (WebCore::ScriptExecutionContext *)v25);
  *(_QWORD *)v24 = &off_1E33A0540;
  *(_QWORD *)(v24 + 16) = 0;
  if (v25)
  {
    if (*(_BYTE *)(v25 + 278))
      goto LABEL_76;
    v53 = (_DWORD *)v24;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v25 + 128), (uint64_t *)&v53, (uint64_t)v52);
  }
  *(_QWORD *)(v24 + 40) = 0;
  *(_QWORD *)(v24 + 48) = 0;
  *(_QWORD *)(v24 + 56) = &unk_1E3360F18;
  *(_QWORD *)(v24 + 64) = 0;
  *(_QWORD *)v24 = &off_1E3360E10;
  *(_QWORD *)(v24 + 32) = &unk_1E3360EA0;
  *(_BYTE *)(v24 + 72) = 0;
  v29 = v51;
  v51 = 0;
  *(_QWORD *)(v24 + 80) = v29;
  v30 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(a2);
  if (v30)
  {
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 + 1, v30));
  }
  *(_BYTE *)(v24 + 120) = 0;
  *(_QWORD *)(v24 + 88) = v30;
  *(_QWORD *)(v24 + 96) = 0;
  *(_BYTE *)(v24 + 104) = 0;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v24 + 80) + 24))(*(_QWORD *)(v24 + 80), v24 + 56);
  v52[0] = (WebCore::RTCDtlsTransport *)v24;
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v24);
  v32 = *(unsigned int *)(a2 + 292);
  if ((_DWORD)v32 == *(_DWORD *)(a2 + 288))
  {
    v33 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a2 + 280), v32 + 1, (unint64_t)v52);
    v34 = *(unsigned int *)(a2 + 292);
    v35 = *(_QWORD *)(a2 + 280);
    v36 = *(_QWORD *)v33;
    *(_QWORD *)v33 = 0;
    *(_QWORD *)(v35 + 8 * v34) = v36;
    v37 = v52[0];
    *(_DWORD *)(a2 + 292) = v34 + 1;
    v52[0] = 0;
    if (v37)
    {
      if (*((_DWORD *)v37 + 6) == 1)
        (*(void (**)(WebCore::RTCDtlsTransport *))(*(_QWORD *)v37 + 16))(v37);
      else
        --*((_DWORD *)v37 + 6);
    }
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a2 + 280) + 8 * v32) = v24;
    *(_DWORD *)(a2 + 292) = v32 + 1;
  }
LABEL_41:
  if (v21 >= *(unsigned int *)(a2 + 292))
  {
LABEL_76:
    __break(0xC471u);
    JUMPOUT(0x19549CB9CLL);
  }
  v38 = *(_DWORD **)(*(_QWORD *)(a2 + 280) + 8 * v21);
  ++v38[6];
  v53 = v38;
  WebCore::RTCDtlsTransport::create(v9, &v50, (uint64_t *)&v53, (uint64_t *)v52);
  v39 = *(unsigned int *)(a2 + 276);
  if ((_DWORD)v39 == *(_DWORD *)(a2 + 272))
  {
    v40 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)(a2 + 264), v39 + 1, (unint64_t)v52);
    v41 = *(unsigned int *)(a2 + 276);
    v42 = *(_QWORD *)(a2 + 264);
    v43 = *(_QWORD *)v40;
    *(_QWORD *)v40 = 0;
    *(_QWORD *)(v42 + 8 * v41) = v43;
    v44 = v52[0];
    *(_DWORD *)(a2 + 276) = v41 + 1;
    v52[0] = 0;
    if (v44)
    {
      if (*((_DWORD *)v44 + 6) == 1)
      {
        WebCore::RTCDtlsTransport::~RTCDtlsTransport(v44);
        bmalloc::api::isoDeallocate(v47, v48);
      }
      else
      {
        --*((_DWORD *)v44 + 6);
      }
    }
  }
  else
  {
    *(WebCore::RTCDtlsTransport **)(*(_QWORD *)(a2 + 264) + 8 * v39) = v52[0];
    *(_DWORD *)(a2 + 276) = v39 + 1;
    v52[0] = 0;
  }
  if (v53)
  {
    if (v53[6] == 1)
      (*(void (**)(void))(*(_QWORD *)v53 + 16))();
    else
      --v53[6];
  }
  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  result = v51;
  v51 = 0;
  if (result)
    result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
LABEL_54:
  if (v16 >= *(unsigned int *)(a2 + 276))
  {
    __break(0xC471u);
    JUMPOUT(0x19549CBE0);
  }
  v45 = *(_QWORD *)(*v11 + 8 * v16);
  ++*(_DWORD *)(v45 + 24);
  *a1 = v45;
  v46 = *(unsigned __int8 *)(v7 + 178);
  if (*(_BYTE *)(v7 + 178))
  {
    if (v46 == 1)
    {
      if (*(_DWORD *)(v7 + 216) == 1)
        return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
      else
        --*(_DWORD *)(v7 + 216);
    }
    else if (v46 == 2)
    {
      return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v7 + 216));
    }
  }
  else if (*(_DWORD *)(v7 - 264) == 2)
  {
    if ((*(_WORD *)(v7 - 258) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)(v7 - 288), v15);
  }
  else
  {
    *(_DWORD *)(v7 - 264) -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::RTCPeerConnection::updateDescriptions(_QWORD *a1, uint64_t a2)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  WebCore::updateDescription((uint64_t)(a1 + 38), *(WTF::StringImpl **)(a2 + 8), (const WTF::StringImpl **)(a2 + 16));
  WebCore::updateDescription((uint64_t)(a1 + 39), *(WTF::StringImpl **)(a2 + 24), (const WTF::StringImpl **)(a2 + 32));
  WebCore::updateDescription((uint64_t)(a1 + 40), *(WTF::StringImpl **)(a2 + 40), (const WTF::StringImpl **)(a2 + 48));
  result = (WTF::StringImpl *)WebCore::updateDescription((uint64_t)(a1 + 41), *(WTF::StringImpl **)(a2 + 56), (const WTF::StringImpl **)(a2 + 64));
  if (*(_BYTE *)(a2 + 4))
    result = (WTF::StringImpl *)WebCore::RTCPeerConnection::setSignalingState((uint64_t)a1, *(_DWORD *)a2);
  if (!a1[41] && !a1[39])
  {
    v6 = (WTF::StringImpl *)a1[42];
    a1[42] = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    result = (WTF::StringImpl *)a1[43];
    a1[43] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::updateDescription(uint64_t result, WTF::StringImpl *a2, const WTF::StringImpl **a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;

  v4 = (int)a2;
  v5 = result;
  v6 = *(_QWORD *)result;
  v7 = (unint64_t)a2 & 0xFF00000000;
  if (!*(_QWORD *)result)
  {
    if (!v7)
    {
      *(_QWORD *)result = 0;
      return result;
    }
LABEL_7:
    if (*a3 && *((_DWORD *)*a3 + 1))
    {
      result = bmalloc::api::isoAllocate();
      *(_DWORD *)result = 1;
      *(_QWORD *)(result + 8) = 0;
      *(_DWORD *)(result + 16) = v4;
      v8 = *a3;
      *a3 = 0;
      *(_QWORD *)(result + 24) = v8;
      v6 = *(_QWORD *)v5;
      *(_QWORD *)v5 = result;
      if (!v6)
        return result;
    }
    else
    {
      v6 = *(_QWORD *)v5;
      *(_QWORD *)v5 = 0;
      if (!v6)
        return result;
    }
    goto LABEL_13;
  }
  if (v7)
  {
    result = WTF::equal(*(WTF **)(v6 + 24), *a3, (const WTF::StringImpl *)a3);
    if ((_DWORD)result && *(_DWORD *)(*(_QWORD *)v5 + 16) == v4)
      return result;
    goto LABEL_7;
  }
  *(_QWORD *)result = 0;
LABEL_13:
  if (*(_DWORD *)v6 == 1)
  {
    v9 = *(WTF::StringImpl **)(v6 + 24);
    *(_QWORD *)(v6 + 24) = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, a2);
      else
        *(_DWORD *)v9 -= 2;
    }
    v10 = *(_QWORD *)(v6 + 8);
    if (v10)
    {
      *(_QWORD *)(v10 + 8) = 3;
      *(_QWORD *)(v6 + 8) = 0;
    }
    return bmalloc::api::isoDeallocate((bmalloc::api *)v6, a2);
  }
  else
  {
    --*(_DWORD *)v6;
  }
  return result;
}

unsigned int *WebCore::RTCPeerConnection::updateTransceiverTransports(unsigned int *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::RTCDtlsTransport *v8;
  unsigned int *v9;
  uint64_t v10;
  WebCore::RTCDtlsTransport *v11;
  bmalloc::api *v12;
  void *v13;
  bmalloc::api *v14;
  void *v15;
  unsigned int *v16;
  uint64_t v17;

  v1 = this[29];
  if ((_DWORD)v1)
  {
    v2 = (uint64_t)this;
    v3 = (uint64_t *)*((_QWORD *)this + 13);
    v4 = 8 * v1;
    do
    {
      v5 = *v3;
      v6 = *(_QWORD *)(*v3 + 40);
      v7 = *(_QWORD *)(v6 + 64);
      if (v7)
      {
        (*(void (**)(unsigned int **__return_ptr))(*(_QWORD *)v7 + 64))(&v16);
        WebCore::RTCPeerConnection::getOrCreateDtlsTransport(&v17, v2, &v16);
        v8 = *(WebCore::RTCDtlsTransport **)(v6 + 40);
        *(_QWORD *)(v6 + 40) = v17;
        if (v8)
        {
          if (*((_DWORD *)v8 + 6) == 1)
          {
            WebCore::RTCDtlsTransport::~RTCDtlsTransport(v8);
            bmalloc::api::isoDeallocate(v12, v13);
          }
          else
          {
            --*((_DWORD *)v8 + 6);
          }
        }
        v9 = v16;
        v16 = 0;
        if (v9)
          (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
        v5 = *v3;
      }
      v10 = *(_QWORD *)(v5 + 48);
      this = *(unsigned int **)(v10 + 40);
      if (this)
      {
        (*(void (**)(unsigned int **__return_ptr))(*(_QWORD *)this + 48))(&v16);
        WebCore::RTCPeerConnection::getOrCreateDtlsTransport(&v17, v2, &v16);
        v11 = *(WebCore::RTCDtlsTransport **)(v10 + 32);
        *(_QWORD *)(v10 + 32) = v17;
        if (v11)
        {
          if (*((_DWORD *)v11 + 6) == 1)
          {
            WebCore::RTCDtlsTransport::~RTCDtlsTransport(v11);
            bmalloc::api::isoDeallocate(v14, v15);
          }
          else
          {
            --*((_DWORD *)v11 + 6);
          }
        }
        this = v16;
        v16 = 0;
        if (this)
          this = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 8))(this);
      }
      ++v3;
      v4 -= 8;
    }
    while (v4);
  }
  return this;
}

unsigned int *WebCore::RTCPeerConnection::updateSctpBackend(uint64_t a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v5;
  unsigned int *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int *v14;
  void *v15;
  uint64_t v16;
  WebCore::RTCDtlsTransport *v17;
  uint64_t v18;
  void *v19;
  WebCore::RTCSctpTransport *v20;
  int v21;
  uint64_t v22;
  int v23;
  bmalloc::api *v24;
  void *v25;
  bmalloc::api *v26;
  void *v27;
  bmalloc::api *v28;
  void *v29;
  WebCore::RTCDtlsTransport *v30;
  unsigned int *v31;
  unsigned int *v32;
  WebCore::RTCDtlsTransport *v33;

  v5 = *a2;
  result = *(unsigned int **)(a1 + 296);
  if (*a2)
  {
    if (result)
    {
      v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)result + 9) + 16))(*((_QWORD *)result + 9));
      result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      if ((unsigned int *)v10 == result)
      {
LABEL_24:
        v22 = *(_QWORD *)(a1 + 296);
        *(_QWORD *)(v22 + 96) = a3;
        *(_BYTE *)(v22 + 104) = a4;
        return result;
      }
    }
    v11 = *(_QWORD *)(a1 + 40);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        v13 = *(unsigned __int8 *)(v12 + 178);
        if (*(_BYTE *)(v12 + 178))
        {
          if (v13 == 1 || v13 == 2)
            ++*(_DWORD *)(v12 + 216);
        }
        else
        {
          *(_DWORD *)(v12 - 264) += 2;
        }
        (*(void (**)(unsigned int **__return_ptr))(*(_QWORD *)*a2 + 24))(&v31);
        v14 = v31;
        v31 = 0;
        v32 = v14;
        WebCore::RTCPeerConnection::getOrCreateDtlsTransport(&v33, a1, &v32);
        if (v32)
          (*(void (**)(unsigned int *))(*(_QWORD *)v32 + 8))(v32);
        v16 = v12 - 96;
        result = v31;
        v31 = 0;
        if (result)
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
        v17 = v33;
        if (v33)
        {
          v18 = *a2;
          *a2 = 0;
          v30 = v17;
          v31 = (unsigned int *)v18;
          WebCore::RTCSctpTransport::create(v12 - 96, (uint64_t *)&v31, (uint64_t *)&v30, (uint64_t *)&v32);
          v20 = *(WebCore::RTCSctpTransport **)(a1 + 296);
          *(_QWORD *)(a1 + 296) = v32;
          if (v20)
          {
            if (*((_DWORD *)v20 + 6) == 1)
            {
              WebCore::RTCSctpTransport::~RTCSctpTransport(v20);
              bmalloc::api::isoDeallocate(v26, v27);
            }
            else
            {
              --*((_DWORD *)v20 + 6);
            }
          }
          if (v30)
          {
            if (*((_DWORD *)v30 + 6) == 1)
            {
              WebCore::RTCDtlsTransport::~RTCDtlsTransport(v30);
              bmalloc::api::isoDeallocate(v28, v29);
            }
            else
            {
              --*((_DWORD *)v30 + 6);
            }
          }
          result = v31;
          if (v31)
            result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v31 + 8))(v31);
          v21 = *(unsigned __int8 *)(v12 + 178);
          if (*(_BYTE *)(v12 + 178))
          {
            if (v21 == 1)
            {
              if (*(_DWORD *)(v12 + 216) == 1)
                result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 40))(v12 - 96);
              else
                --*(_DWORD *)(v12 + 216);
            }
            else if (v21 == 2)
            {
              result = WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v12 + 216));
            }
          }
          else if (*(_DWORD *)(v12 - 264) == 2)
          {
            if ((*(_WORD *)(v12 - 258) & 0x400) == 0)
              result = WebCore::Node::removedLastRef((WebCore::Node *)(v12 - 288), v19);
          }
          else
          {
            *(_DWORD *)(v12 - 264) -= 2;
          }
          goto LABEL_24;
        }
        v23 = *(unsigned __int8 *)(v12 + 178);
        if (*(_BYTE *)(v12 + 178))
        {
          if (v23 == 1)
          {
            if (*(_DWORD *)(v12 + 216) == 1)
              return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 40))(v12 - 96);
            else
              --*(_DWORD *)(v12 + 216);
          }
          else if (v23 == 2)
          {
            return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v12 + 216));
          }
        }
        else if (*(_DWORD *)(v12 - 264) == 2)
        {
          if ((*(_WORD *)(v12 - 258) & 0x400) == 0)
            return WebCore::Node::removedLastRef((WebCore::Node *)(v12 - 288), v15);
        }
        else
        {
          *(_DWORD *)(v12 - 264) -= 2;
        }
      }
    }
  }
  else
  {
    *(_QWORD *)(a1 + 296) = 0;
    if (result)
    {
      if (result[6] == 1)
      {
        WebCore::RTCSctpTransport::~RTCSctpTransport((WebCore::RTCSctpTransport *)result);
        return (unsigned int *)bmalloc::api::isoDeallocate(v24, v25);
      }
      else
      {
        --result[6];
      }
    }
  }
  return result;
}

char *`non-virtual thunk to'WebCore::RTCPeerConnection::logChannel(WebCore::RTCPeerConnection *this)
{
  return &WebCore::LogWebRTC;
}

void WebCore::RTCPeerConnectionIceErrorEvent::~RTCPeerConnectionIceErrorEvent(WebCore::RTCPeerConnectionIceErrorEvent *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::Event::~Event(this, a2);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

uint64_t WebCore::RTCIceTransport::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::RTCIceTransport::deref(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
  --this[6];
  return this;
}

uint64_t WebCore::RTCIceTransport::eventTargetInterface(WebCore::RTCIceTransport *this)
{
  return 42;
}

uint64_t WebCore::RTCIceTransport::scriptExecutionContext(WebCore::RTCIceTransport *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t WebCore::RTCIceTransport::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::RTCIceTransport::derefEventTarget(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
  --this[6];
  return this;
}

uint64_t `non-virtual thunk to'WebCore::RTCIceTransport::eventTargetInterface(WebCore::RTCIceTransport *this)
{
  return 42;
}

uint64_t `non-virtual thunk to'WebCore::RTCIceTransport::scriptExecutionContext(WebCore::RTCIceTransport *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 3);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::RTCIceTransport::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this - 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::RTCIceTransport::derefEventTarget(uint64_t this)
{
  if (*(_DWORD *)(this - 8) == 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(this - 32) + 16))(this - 32);
  --*(_DWORD *)(this - 8);
  return this;
}

uint64_t WebCore::RTCPeerConnection::eventTargetInterface(WebCore::RTCPeerConnection *this)
{
  return 43;
}

uint64_t WebCore::RTCPeerConnection::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::RTCPeerConnection *WebCore::RTCPeerConnection::derefEventTarget(WebCore::RTCPeerConnection *this, WTF *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::RTCPeerConnection::~RTCPeerConnection(this, a2);
    return (WebCore::RTCPeerConnection *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

uint64_t WebCore::RTCPeerConnection::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::RTCPeerConnection *WebCore::RTCPeerConnection::deref(WebCore::RTCPeerConnection *this, WTF *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::RTCPeerConnection::~RTCPeerConnection(this, a2);
    return (WebCore::RTCPeerConnection *)bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::RTCPeerConnection::ref(uint64_t this)
{
  ++*(_DWORD *)(this - 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::RTCPeerConnection::deref(uint64_t this, WTF *a2)
{
  bmalloc::api *v2;
  void *v3;

  if (*(_DWORD *)(this - 8) == 1)
  {
    WebCore::RTCPeerConnection::~RTCPeerConnection((WebCore::RTCPeerConnection *)(this - 32), a2);
    return bmalloc::api::isoDeallocate(v2, v3);
  }
  else
  {
    --*(_DWORD *)(this - 8);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::RTCPeerConnection::logger(WebCore::RTCPeerConnection *this)
{
  return *((_QWORD *)this + 4);
}

const char *`non-virtual thunk to'WebCore::RTCPeerConnection::logClassName(WebCore::RTCPeerConnection *this)
{
  return "RTCPeerConnection";
}

uint64_t `non-virtual thunk to'WebCore::RTCPeerConnection::logIdentifier(WebCore::RTCPeerConnection *this)
{
  return *((_QWORD *)this + 5);
}

void WebCore::RTCError::~RTCError(WebCore::RTCError *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = off_1E334F098;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  *(_QWORD *)this = off_1E334F098;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WTF::fastFree(this, a2);
}

void WebCore::RTCErrorEvent::~RTCErrorEvent(WebCore::RTCErrorEvent *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::Event::~Event(this, a2);
}

{
  _DWORD *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t std::__optional_destruct_base<WebCore::RTCIceCandidateFields,false>::~__optional_destruct_base[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  if (*(_BYTE *)(a1 + 88))
  {
    v3 = *(WTF::StringImpl **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
    v4 = *(WTF::StringImpl **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 2)
        WTF::StringImpl::destroy(v4, a2);
      else
        *(_DWORD *)v4 -= 2;
    }
    v5 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, a2);
      else
        *(_DWORD *)v5 -= 2;
    }
    v6 = *(WTF::StringImpl **)a1;
    *(_QWORD *)a1 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, a2);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return a1;
}

uint64_t std::__optional_storage_base<WTF::Vector<WebCore::RTCIceServer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WebCore::RTCIceServer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;

  v3 = result;
  if (*(unsigned __int8 *)(result + 16) == *((unsigned __int8 *)a2 + 16))
  {
    if (*(_BYTE *)(result + 16))
    {
      v4 = *(unsigned int *)(result + 12);
      if ((_DWORD)v4)
      {
        v5 = *(_QWORD *)result;
        v6 = 48 * v4;
        do
        {
          v7 = *(WTF::StringImpl **)(v5 + 32);
          *(_QWORD *)(v5 + 32) = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, a2);
            else
              *(_DWORD *)v7 -= 2;
          }
          v8 = *(WTF::StringImpl **)(v5 + 24);
          *(_QWORD *)(v5 + 24) = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, a2);
            else
              *(_DWORD *)v8 -= 2;
          }
          v9 = *(unsigned int *)(v5 + 16);
          if ((_DWORD)v9 != -1)
            ((void (*)(char *, uint64_t))off_1E3360F40[v9])(&v12, v5);
          *(_DWORD *)(v5 + 16) = -1;
          v5 += 48;
          v6 -= 48;
        }
        while (v6);
      }
      result = *(_QWORD *)v3;
      if (*(_QWORD *)v3)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
        result = WTF::fastFree((WTF *)result, a2);
      }
      v10 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)v3 = v10;
      LODWORD(v10) = *((_DWORD *)a2 + 2);
      *((_DWORD *)a2 + 2) = 0;
      *(_DWORD *)(v3 + 8) = v10;
      LODWORD(v10) = *((_DWORD *)a2 + 3);
      *((_DWORD *)a2 + 3) = 0;
      *(_DWORD *)(v3 + 12) = v10;
    }
  }
  else if (*(_BYTE *)(result + 16))
  {
    result = WTF::Vector<WebCore::RTCIceServer,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(result, a2);
    *(_BYTE *)(v3 + 16) = 0;
  }
  else
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    v11 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)result = v11;
    LODWORD(v11) = *((_DWORD *)a2 + 2);
    *((_DWORD *)a2 + 2) = 0;
    *(_DWORD *)(result + 8) = v11;
    LODWORD(v11) = *((_DWORD *)a2 + 3);
    *((_DWORD *)a2 + 3) = 0;
    *(_DWORD *)(result + 12) = v11;
    *(_BYTE *)(result + 16) = 1;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore26MediaEndpointConfiguration14CertificatePEMELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF *result;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    v5 = (WTF::StringImpl **)(*(_QWORD *)a2 + 8);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = *(v5 - 1);
      *(v5 - 1) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore26MediaEndpointConfiguration14CertificatePEMELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore26MediaEndpointConfiguration13IceServerInfoELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF *result;

  v3 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD *)a2;
    v5 = 32 * v3;
    do
    {
      v6 = *(WTF::StringImpl **)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = *(WTF::StringImpl **)(v4 + 16);
      *(_QWORD *)(v4 + 16) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v4, a2);
      v4 += 32;
      v5 -= 32;
    }
    while (v5);
  }
  result = *(WTF **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore26MediaEndpointConfiguration13IceServerInfoELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSI_1EJSF_SG_EEEEEEDcSK_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17RTCPeerConnection21CertificateParametersENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *result;

  v3 = (_DWORD *)*((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = 0;
  if (v3)
  {
    if (*v3 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v3;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  *((_QWORD *)a2 + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore21PeerConnectionBackend22CertificateInformationENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::RTCIceTransport>(WebCore::RTCIceTransport &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  uint64_t v7;

  *a1 = &off_1E3360FD0;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      else
        --*(_DWORD *)(v7 + 24);
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (v5[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[6];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::RTCIceTransport>(WebCore::RTCIceTransport &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  uint64_t v7;

  *(_QWORD *)this = &off_1E3360FD0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      else
        --*(_DWORD *)(v7 + 24);
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (v5[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[6];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::RTCIceTransport>(WebCore::RTCIceTransport &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCIceTransport::onStateChanged(WebCore::RTCIceTransportState)::$_0,void>::call(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  int v3;
  WebCore::RTCIceCandidate *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  void *v9;
  WebCore *v10;
  int v11;
  int v12;
  unint64_t StatusReg;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  bmalloc::api *v38;
  void *v39;
  bmalloc::api *v40;
  void *v41;
  bmalloc::api *v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;

  v2 = *(_QWORD *)(result + 8);
  if (!*(_BYTE *)(v2 + 72))
  {
    v3 = *(_DWORD *)(result + 16);
    if (*(_DWORD *)(v2 + 96) != v3)
    {
      *(_DWORD *)(v2 + 96) = v3;
      if (v3 == 4 && *(_BYTE *)(v2 + 120))
      {
        v4 = *(WebCore::RTCIceCandidate **)(v2 + 112);
        *(_QWORD *)(v2 + 112) = 0;
        if (v4)
        {
          if (*(_DWORD *)v4 == 1)
          {
            WebCore::RTCIceCandidate::~RTCIceCandidate(v4, a2);
            bmalloc::api::isoDeallocate(v40, v41);
          }
          else
          {
            --*(_DWORD *)v4;
          }
        }
        result = *(_QWORD *)(v2 + 104);
        *(_QWORD *)(v2 + 104) = 0;
        if (result)
        {
          if (*(_DWORD *)result == 1)
          {
            WebCore::RTCIceCandidate::~RTCIceCandidate((WebCore::RTCIceCandidate *)result, a2);
            result = bmalloc::api::isoDeallocate(v42, v43);
          }
          else
          {
            --*(_DWORD *)result;
          }
        }
        *(_BYTE *)(v2 + 120) = 0;
      }
      v5 = *(_QWORD *)(v2 + 88);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
        {
          ++*(_DWORD *)(v6 + 24);
          v7 = WebCore::RTCPeerConnection::computeIceConnectionStateFromIceTransports(v6, a2);
          v8 = *(_DWORD *)(v6 + 76);
          *(_DWORD *)(v6 + 76) = v7;
          v10 = (WebCore *)WebCore::RTCPeerConnection::computeConnectionState((WebCore::RTCPeerConnection *)v6, v9);
          v11 = (int)v10;
          v12 = *(_DWORD *)(v6 + 80);
          *(_DWORD *)(v6 + 80) = (_DWORD)v10;
          StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
          v14 = *(_QWORD *)(StatusReg + 736);
          if (!v14 || (v15 = *(_QWORD *)(v14 + 96)) == 0)
            v15 = WebCore::threadGlobalDataSlow(v10);
          v16 = *(_QWORD *)(v15 + 40);
          if (!v16)
          {
            WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v15);
            v16 = *(_QWORD *)(v15 + 40);
          }
          v17 = v2 + 32;
          v18 = bmalloc::api::isoAllocate();
          WTF::MonotonicTime::now((WTF::MonotonicTime *)v18);
          *(_DWORD *)(v18 + 16) = 1;
          *(_QWORD *)v18 = off_1E33A4B48;
          *(_QWORD *)(v18 + 8) = 0;
          *(_DWORD *)(v18 + 20) = *(_DWORD *)(v18 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v16 + 1984) != 0) | 2;
          v20 = *(_DWORD **)(v16 + 1984);
          if (v20)
            *v20 += 2;
          *(_QWORD *)(v18 + 24) = v20;
          *(_QWORD *)(v18 + 32) = 0;
          *(_QWORD *)(v18 + 40) = 0;
          *(_QWORD *)(v18 + 48) = 0;
          *(_QWORD *)(v18 + 56) = v19;
          *(_QWORD *)(v18 + 64) = 0;
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 48))(v17, v18);
          if (*(_DWORD *)(v18 + 16) == 1)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
          else
            --*(_DWORD *)(v18 + 16);
          if (v8 != v7 && *(_DWORD *)(v6 + 80) != 5)
          {
            v22 = *(_QWORD *)(StatusReg + 736);
            if (!v22 || (v23 = *(_QWORD *)(v22 + 96)) == 0)
              v23 = WebCore::threadGlobalDataSlow((WebCore *)result);
            v24 = *(_QWORD *)(v23 + 40);
            if (!v24)
            {
              WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v23);
              v24 = *(_QWORD *)(v23 + 40);
            }
            v25 = bmalloc::api::isoAllocate();
            WTF::MonotonicTime::now((WTF::MonotonicTime *)v25);
            *(_DWORD *)(v25 + 16) = 1;
            *(_QWORD *)v25 = off_1E33A4B48;
            *(_QWORD *)(v25 + 8) = 0;
            *(_DWORD *)(v25 + 20) = *(_DWORD *)(v25 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v24 + 984) != 0);
            v27 = *(_DWORD **)(v24 + 984);
            if (v27)
              *v27 += 2;
            *(_QWORD *)(v25 + 24) = v27;
            *(_QWORD *)(v25 + 40) = 0;
            *(_QWORD *)(v25 + 48) = 0;
            *(_QWORD *)(v25 + 32) = 0;
            *(_QWORD *)(v25 + 56) = v26;
            *(_QWORD *)(v25 + 64) = 0;
            v28 = *(_QWORD *)(v6 + 88);
            v29 = *(_QWORD *)(v6 + 96);
            v44 = "RTCPeerConnection";
            v45 = 18;
            v46 = "dispatchEvent";
            v47 = v29;
            if (*(_BYTE *)(v28 + 12) && WebCore::LogWebRTC && byte_1ECE7CD50 >= 3u)
              WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [14],WTF::AtomString,char [2]>((uint64_t)&WebCore::LogWebRTC, 3u, (WTF::Logger::LogSiteIdentifier *)&v44, "dispatching '", (WTF::StringImpl **)(v25 + 24), "'");
            result = (uint64_t)WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)v6, (WebCore::Event *)v25);
            if (*(_DWORD *)(v25 + 16) == 1)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
            else
              --*(_DWORD *)(v25 + 16);
          }
          if (v12 != v11 && *(_DWORD *)(v6 + 80) != 5)
          {
            v30 = *(_QWORD *)(StatusReg + 736);
            if (!v30 || (v31 = *(_QWORD *)(v30 + 96)) == 0)
              v31 = WebCore::threadGlobalDataSlow((WebCore *)result);
            v32 = *(_QWORD *)(v31 + 40);
            if (!v32)
            {
              WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v31);
              v32 = *(_QWORD *)(v31 + 40);
            }
            v33 = bmalloc::api::isoAllocate();
            WTF::MonotonicTime::now((WTF::MonotonicTime *)v33);
            *(_DWORD *)(v33 + 16) = 1;
            *(_QWORD *)v33 = off_1E33A4B48;
            *(_QWORD *)(v33 + 8) = 0;
            *(_DWORD *)(v33 + 20) = *(_DWORD *)(v33 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v32 + 480) != 0);
            v35 = *(_DWORD **)(v32 + 480);
            if (v35)
              *v35 += 2;
            *(_QWORD *)(v33 + 24) = v35;
            *(_QWORD *)(v33 + 40) = 0;
            *(_QWORD *)(v33 + 48) = 0;
            *(_QWORD *)(v33 + 32) = 0;
            *(_QWORD *)(v33 + 56) = v34;
            *(_QWORD *)(v33 + 64) = 0;
            v36 = *(_QWORD *)(v6 + 88);
            v37 = *(_QWORD *)(v6 + 96);
            v44 = "RTCPeerConnection";
            v45 = 18;
            v46 = "dispatchEvent";
            v47 = v37;
            if (*(_BYTE *)(v36 + 12) && WebCore::LogWebRTC && byte_1ECE7CD50 >= 3u)
              WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [14],WTF::AtomString,char [2]>((uint64_t)&WebCore::LogWebRTC, 3u, (WTF::Logger::LogSiteIdentifier *)&v44, "dispatching '", (WTF::StringImpl **)(v33 + 24), "'");
            result = (uint64_t)WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)v6, (WebCore::Event *)v33);
            if (*(_DWORD *)(v33 + 16) == 1)
              result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
            else
              --*(_DWORD *)(v33 + 16);
          }
          if (*(_DWORD *)(v6 + 24) == 1)
          {
            WebCore::RTCPeerConnection::~RTCPeerConnection((WebCore::RTCPeerConnection *)v6, v21);
            return bmalloc::api::isoDeallocate(v38, v39);
          }
          else
          {
            --*(_DWORD *)(v6 + 24);
          }
        }
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCIceTransport::onGatheringStateChanged(WebCore::RTCIceGatheringState)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _BOOL4 v10;
  _DWORD *v11;

  v1 = *(_QWORD *)(result + 8);
  if (!*(_BYTE *)(v1 + 72))
  {
    v2 = *(_DWORD *)(result + 16);
    if (*(_DWORD *)(v1 + 100) != v2)
    {
      *(_DWORD *)(v1 + 100) = v2;
      v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v3 || (v4 = *(_QWORD *)(v3 + 96)) == 0)
        v4 = WebCore::threadGlobalDataSlow((WebCore *)result);
      v5 = *(_QWORD *)(v4 + 40);
      if (!v5)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v4);
        v5 = *(_QWORD *)(v4 + 40);
      }
      v6 = v1 + 32;
      v7 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v7);
      *(_QWORD *)v7 = off_1E33A4B48;
      *(_QWORD *)(v7 + 8) = 0;
      v9 = *(_DWORD *)(v7 + 20) & 0xFFC00000 | 0x1E8202;
      v10 = *(_QWORD *)(v5 + 880) != 0;
      *(_DWORD *)(v7 + 16) = 1;
      *(_DWORD *)(v7 + 20) = v9 | v10;
      v11 = *(_DWORD **)(v5 + 880);
      if (v11)
        *v11 += 2;
      *(_QWORD *)(v7 + 24) = v11;
      *(_QWORD *)(v7 + 32) = 0;
      *(_QWORD *)(v7 + 40) = 0;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 56) = v8;
      *(_QWORD *)(v7 + 64) = 0;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, v7);
      if (*(_DWORD *)(v7 + 16) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      else
        --*(_DWORD *)(v7 + 16);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RTCIceTransport::onSelectedCandidatePairChanged(WTF::RefPtr<WebCore::RTCIceCandidate,WTF::RawPtrTraits<WebCore::RTCIceCandidate>,WTF::DefaultRefDerefTraits<WebCore::RTCIceCandidate>> &&,WTF::RefPtr<WebCore::RTCIceCandidate,WTF::RawPtrTraits<WebCore::RTCIceCandidate>,WTF::DefaultRefDerefTraits<WebCore::RTCIceCandidate>> &)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WebCore::RTCIceCandidate *v3;
  WebCore::RTCIceCandidate *v4;
  bmalloc::api *v6;
  void *v7;
  bmalloc::api *v8;
  void *v9;

  *a1 = &off_1E3361048;
  v3 = (WebCore::RTCIceCandidate *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::RTCIceCandidate::~RTCIceCandidate(v3, a2);
      bmalloc::api::isoDeallocate(v6, v7);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (WebCore::RTCIceCandidate *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::RTCIceCandidate::~RTCIceCandidate(v4, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCIceTransport::onSelectedCandidatePairChanged(WTF::RefPtr<WebCore::RTCIceCandidate,WTF::RawPtrTraits<WebCore::RTCIceCandidate>,WTF::DefaultRefDerefTraits<WebCore::RTCIceCandidate>> &&,WTF::RefPtr<WebCore::RTCIceCandidate,WTF::RawPtrTraits<WebCore::RTCIceCandidate>,WTF::DefaultRefDerefTraits<WebCore::RTCIceCandidate>> &)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WebCore::RTCIceCandidate *v3;
  WebCore::RTCIceCandidate *v4;
  bmalloc::api *v6;
  void *v7;
  bmalloc::api *v8;
  void *v9;

  *(_QWORD *)this = &off_1E3361048;
  v3 = (WebCore::RTCIceCandidate *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::RTCIceCandidate::~RTCIceCandidate(v3, a2);
      bmalloc::api::isoDeallocate(v6, v7);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (WebCore::RTCIceCandidate *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::RTCIceCandidate::~RTCIceCandidate(v4, a2);
      bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return WTF::fastFree(this, a2);
}

WebCore::RTCIceCandidate *WTF::Detail::CallableWrapper<WebCore::RTCIceTransport::onSelectedCandidatePairChanged(WTF::RefPtr<WebCore::RTCIceCandidate,WTF::RawPtrTraits<WebCore::RTCIceCandidate>,WTF::DefaultRefDerefTraits<WebCore::RTCIceCandidate>> &&,WTF::RefPtr<WebCore::RTCIceCandidate,WTF::RawPtrTraits<WebCore::RTCIceCandidate>,WTF::DefaultRefDerefTraits<WebCore::RTCIceCandidate>> &)::$_0,void>::call(WebCore::RTCIceCandidate *result, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::RTCIceCandidate *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _BOOL4 v13;
  _DWORD *v14;
  bmalloc::api *v15;
  void *v16;
  bmalloc::api *v17;
  void *v18;

  v2 = *((_QWORD *)result + 1);
  if (!*(_BYTE *)(v2 + 72))
  {
    v3 = *((_QWORD *)result + 2);
    v4 = *((_QWORD *)result + 3);
    *((_QWORD *)result + 2) = 0;
    *((_QWORD *)result + 3) = 0;
    if (*(_BYTE *)(v2 + 120))
    {
      v5 = *(WebCore::RTCIceCandidate **)(v2 + 104);
      *(_QWORD *)(v2 + 104) = v3;
      if (v5)
      {
        if (*(_DWORD *)v5 == 1)
        {
          WebCore::RTCIceCandidate::~RTCIceCandidate(v5, a2);
          bmalloc::api::isoDeallocate(v15, v16);
        }
        else
        {
          --*(_DWORD *)v5;
        }
      }
      result = *(WebCore::RTCIceCandidate **)(v2 + 112);
      *(_QWORD *)(v2 + 112) = v4;
      if (result)
      {
        if (*(_DWORD *)result == 1)
        {
          WebCore::RTCIceCandidate::~RTCIceCandidate(result, a2);
          result = (WebCore::RTCIceCandidate *)bmalloc::api::isoDeallocate(v17, v18);
        }
        else
        {
          --*(_DWORD *)result;
        }
      }
    }
    else
    {
      *(_QWORD *)(v2 + 104) = v3;
      *(_QWORD *)(v2 + 112) = v4;
      *(_BYTE *)(v2 + 120) = 1;
    }
    v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
      v7 = WebCore::threadGlobalDataSlow(result);
    v8 = *(_QWORD *)(v7 + 40);
    if (!v8)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
      v8 = *(_QWORD *)(v7 + 40);
    }
    v9 = v2 + 32;
    v10 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v10);
    *(_QWORD *)v10 = off_1E33A4B48;
    *(_QWORD *)(v10 + 8) = 0;
    v12 = *(_DWORD *)(v10 + 20) & 0xFFC00000 | 0x1E8202;
    v13 = *(_QWORD *)(v8 + 1784) != 0;
    *(_DWORD *)(v10 + 16) = 1;
    *(_DWORD *)(v10 + 20) = v12 | v13;
    v14 = *(_DWORD **)(v8 + 1784);
    if (v14)
      *v14 += 2;
    *(_QWORD *)(v10 + 24) = v14;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = 0;
    *(_QWORD *)(v10 + 48) = 0;
    *(_QWORD *)(v10 + 56) = v11;
    *(_QWORD *)(v10 + 64) = 0;
    result = (WebCore::RTCIceCandidate *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 48))(v9, v10);
    if (*(_DWORD *)(v10 + 16) == 1)
      return (WebCore::RTCIceCandidate *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    else
      --*(_DWORD *)(v10 + 16);
  }
  return result;
}

unint64_t *WTF::Deque<std::pair<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::Function<void ()(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>&&)>>,0ul>::destroyAll(unint64_t *result)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  v1 = *result;
  v2 = result[1];
  v3 = result[2];
  if (*result <= v2)
  {
    if (*result != v2)
    {
      v8 = 16 * v2 - 16 * v1;
      v9 = (uint64_t *)(v3 + 16 * v1 + 8);
      do
      {
        v10 = *v9;
        *v9 = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        result = (unint64_t *)*(v9 - 1);
        *(v9 - 1) = 0;
        if (result)
        {
          if (*((_DWORD *)result + 4) == 1)
            result = (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 16))(result);
          else
            --*((_DWORD *)result + 4);
        }
        v9 += 2;
        v8 -= 16;
      }
      while (v8);
    }
  }
  else
  {
    v4 = (uint64_t *)result;
    if (v2)
    {
      v5 = 16 * v2;
      v6 = (uint64_t *)(v3 + 8);
      do
      {
        v7 = *v6;
        *v6 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
        result = (unint64_t *)*(v6 - 1);
        *(v6 - 1) = 0;
        if (result)
        {
          if (*((_DWORD *)result + 4) == 1)
            result = (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 16))(result);
          else
            --*((_DWORD *)result + 4);
        }
        v6 += 2;
        v5 -= 16;
      }
      while (v5);
      v3 = v4[2];
      v1 = *v4;
    }
    v11 = *((unsigned int *)v4 + 6);
    if (v1 != v11)
    {
      v12 = 16 * v11 - 16 * v1;
      v13 = (uint64_t *)(v3 + 16 * v1 + 8);
      do
      {
        v14 = *v13;
        *v13 = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        result = (unint64_t *)*(v13 - 1);
        *(v13 - 1) = 0;
        if (result)
        {
          if (*((_DWORD *)result + 4) == 1)
            result = (unint64_t *)(*(uint64_t (**)(unint64_t *))(*result + 16))(result);
          else
            --*((_DWORD *)result + 4);
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::RTCPeerConnection::createOffer(WebCore::RTCOfferOptions &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  WTF::StringImpl *result;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v2 + 68) >= 2u)
  {
    v9 = *a2;
    v11 = 0;
    WebCore::DeferredPromise::reject(v9, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v11, 0);
    result = v11;
    v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    v3 = *(_QWORD **)(v2 + 120);
    v4 = a1 + 16;
    ++*(_DWORD *)(v2 + 24);
    v5 = *a2;
    *a2 = 0;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v6 = &off_1E33610A8;
    v6[1] = v2;
    v6[2] = v2;
    v6[3] = v5;
    v7 = v3[3];
    v3[3] = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD *, uint64_t))(*v3 + 232))(v3, v4);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore17RTCPeerConnection11createOfferEONS2_15RTCOfferOptionsEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEEN3__0clESD_EUlOT_E_vJONS2_11ExceptionOrINS2_25RTCSessionDescriptionInitEEEEED1Ev(_QWORD *a1, WTF *a2)
{
  _DWORD *v3;
  WebCore::RTCPeerConnection *v4;
  bmalloc::api *v6;
  void *v7;

  *a1 = &off_1E33610A8;
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WebCore::RTCPeerConnection *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 6) == 1)
    {
      WebCore::RTCPeerConnection::~RTCPeerConnection(v4, a2);
      bmalloc::api::isoDeallocate(v6, v7);
    }
    else
    {
      --*((_DWORD *)v4 + 6);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore17RTCPeerConnection11createOfferEONS2_15RTCOfferOptionsEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEEN3__0clESD_EUlOT_E_vJONS2_11ExceptionOrINS2_25RTCSessionDescriptionInitEEEEED0Ev(WTF *this, WTF *a2)
{
  _DWORD *v3;
  WebCore::RTCPeerConnection *v4;
  bmalloc::api *v6;
  void *v7;

  *(_QWORD *)this = &off_1E33610A8;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WebCore::RTCPeerConnection *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 6) == 1)
    {
      WebCore::RTCPeerConnection::~RTCPeerConnection(v4, a2);
      bmalloc::api::isoDeallocate(v6, v7);
    }
    else
    {
      --*((_DWORD *)v4 + 6);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore17RTCPeerConnection11createOfferEONS2_15RTCOfferOptionsEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEEN3__0clESD_EUlOT_E_vJONS2_11ExceptionOrINS2_25RTCSessionDescriptionInitEEEEE4callESL_(WTF::StringImpl *result, char *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  int v5;
  char v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  WTF::StringImpl *v16;
  objc_class *v17;

  v2 = *((_QWORD *)result + 1);
  if (*(_DWORD *)(v2 + 80) == 5)
    return result;
  v4 = result;
  v5 = *((_DWORD *)a2 + 4);
  if (!v5)
  {
    v10 = (_DWORD *)*((_QWORD *)a2 + 1);
    if (v10)
      *v10 += 2;
    v11 = *(WTF::StringImpl **)(v2 + 336);
    *(_QWORD *)(v2 + 336) = v10;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v11 -= 2;
    }
    if (!*((_DWORD *)a2 + 4))
    {
      v15 = *(_DWORD *)a2;
      v12 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
      v16 = v12;
      WebCore::DeferredPromise::resolve<WebCore::IDLDictionary<WebCore::RTCSessionDescriptionInit>>(*((_QWORD *)v4 + 3), &v15);
      result = v16;
      v16 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
        *(_DWORD *)result -= 2;
      }
      return result;
    }
LABEL_27:
    v13 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::DeferredPromise::resolve<WebCore::IDLDictionary<WebCore::RTCSessionDescriptionInit>>(v13, v14);
  }
  if (v5 != 1)
    goto LABEL_27;
  v6 = *a2;
  v7 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v8 = *((_QWORD *)result + 3);
  v17 = 0;
  LOBYTE(v15) = v6;
  if (v7)
    *(_DWORD *)v7 += 2;
  v16 = v7;
  WebCore::DeferredPromise::reject(v8, (unsigned __int8 *)&v15, 0, &v17);
  result = v16;
  v16 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      if (v7)
        goto LABEL_10;
      return result;
    }
    *(_DWORD *)result -= 2;
  }
  if (v7)
  {
LABEL_10:
    if (*(_DWORD *)v7 != 2)
    {
      *(_DWORD *)v7 -= 2;
      return result;
    }
    result = v7;
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
  }
  return result;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLDictionary<WebCore::RTCSessionDescriptionInit>>(uint64_t result, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v14;
  int v15;
  _BYTE v16[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v16, v7);
    v8 = (objc_class *)WebCore::convertDictionaryToJS((uint64_t)v6, **(_QWORD **)(v4 + 32), a2);
    v9 = *(_QWORD *)(v7 + 16);
    if (!v9)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v8);
      v9 = *(_QWORD *)(v7 + 16);
      if (!v9)
        return MEMORY[0x19AEA32A0](v16);
    }
    v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
    {
LABEL_12:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v9, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v16);
    }
    v11 = v10[43];
    if (*(_QWORD *)(v7 + 24) == v9)
    {
LABEL_26:
      *(_BYTE *)(*(_QWORD *)(v11 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_12;
    }
    if (!v11)
      goto LABEL_12;
    v12 = (unsigned __int8 *)(v11 + 40);
    if (__ldaxr((unsigned __int8 *)(v11 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v11 + 40);
LABEL_20:
    v14 = *(unsigned __int8 *)(v11 + 41);
    v15 = __ldxr(v12);
    if (v15 == 1)
    {
      if (!__stlxr(0, v12))
      {
LABEL_25:
        if (!v14)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v11 + 40));
    goto LABEL_25;
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::RTCPeerConnection::createAnswer(WebCore::RTCAnswerOptions &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  WTF::StringImpl *result;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v2 = *(_QWORD *)(a1 + 8);
  if ((*(_DWORD *)(v2 + 68) & 0xFFFFFFFE) == 2)
  {
    v3 = *(_QWORD **)(v2 + 120);
    v4 = a1 + 16;
    ++*(_DWORD *)(v2 + 24);
    v5 = *a2;
    *a2 = 0;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v6 = &off_1E33610F8;
    v6[1] = v2;
    v6[2] = v2;
    v6[3] = v5;
    v7 = v3[3];
    v3[3] = v6;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD *, uint64_t))(*v3 + 240))(v3, v4);
  }
  else
  {
    v9 = *a2;
    v11 = 0;
    WebCore::DeferredPromise::reject(v9, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v11, 0);
    result = v11;
    v11 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore17RTCPeerConnection12createAnswerEONS2_16RTCAnswerOptionsEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEEN3__0clESD_EUlOT_E_vJONS2_11ExceptionOrINS2_25RTCSessionDescriptionInitEEEEED1Ev(_QWORD *a1, WTF *a2)
{
  _DWORD *v3;
  WebCore::RTCPeerConnection *v4;
  bmalloc::api *v6;
  void *v7;

  *a1 = &off_1E33610F8;
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WebCore::RTCPeerConnection *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 6) == 1)
    {
      WebCore::RTCPeerConnection::~RTCPeerConnection(v4, a2);
      bmalloc::api::isoDeallocate(v6, v7);
    }
    else
    {
      --*((_DWORD *)v4 + 6);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore17RTCPeerConnection12createAnswerEONS2_16RTCAnswerOptionsEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEEN3__0clESD_EUlOT_E_vJONS2_11ExceptionOrINS2_25RTCSessionDescriptionInitEEEEED0Ev(WTF *this, WTF *a2)
{
  _DWORD *v3;
  WebCore::RTCPeerConnection *v4;
  bmalloc::api *v6;
  void *v7;

  *(_QWORD *)this = &off_1E33610F8;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WebCore::RTCPeerConnection *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 6) == 1)
    {
      WebCore::RTCPeerConnection::~RTCPeerConnection(v4, a2);
      bmalloc::api::isoDeallocate(v6, v7);
    }
    else
    {
      --*((_DWORD *)v4 + 6);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore17RTCPeerConnection12createAnswerEONS2_16RTCAnswerOptionsEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEEN3__0clESD_EUlOT_E_vJONS2_11ExceptionOrINS2_25RTCSessionDescriptionInitEEEEE4callESL_(WTF::StringImpl *result, char *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  int v5;
  char v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unsigned int v14;
  WTF::StringImpl *v15;
  objc_class *v16;

  v2 = *((_QWORD *)result + 1);
  if (*(_DWORD *)(v2 + 80) == 5)
    return result;
  v4 = result;
  v5 = *((_DWORD *)a2 + 4);
  if (!v5)
  {
    v10 = (_DWORD *)*((_QWORD *)a2 + 1);
    if (v10)
      *v10 += 2;
    v11 = *(WTF::StringImpl **)(v2 + 344);
    *(_QWORD *)(v2 + 344) = v10;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v11 -= 2;
    }
    if (!*((_DWORD *)a2 + 4))
    {
      v14 = *(_DWORD *)a2;
      v12 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = 0;
      v15 = v12;
      WebCore::DeferredPromise::resolve<WebCore::IDLDictionary<WebCore::RTCSessionDescriptionInit>>(*((_QWORD *)v4 + 3), &v14);
      result = v15;
      v15 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
        *(_DWORD *)result -= 2;
      }
      return result;
    }
LABEL_27:
    v13 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WTF::Detail::CallableWrapper<WebCore::RTCPeerConnection::setLocalDescription(std::optional<WebCore::RTCLocalSessionDescriptionInit> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>::~CallableWrapper(v13);
  }
  if (v5 != 1)
    goto LABEL_27;
  v6 = *a2;
  v7 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v8 = *((_QWORD *)result + 3);
  v16 = 0;
  LOBYTE(v14) = v6;
  if (v7)
    *(_DWORD *)v7 += 2;
  v15 = v7;
  WebCore::DeferredPromise::reject(v8, (unsigned __int8 *)&v14, 0, &v16);
  result = v15;
  v15 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      if (v7)
        goto LABEL_10;
      return result;
    }
    *(_DWORD *)result -= 2;
  }
  if (v7)
  {
LABEL_10:
    if (*(_DWORD *)v7 != 2)
    {
      *(_DWORD *)v7 -= 2;
      return result;
    }
    result = v7;
    return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCPeerConnection::setLocalDescription(std::optional<WebCore::RTCLocalSessionDescriptionInit> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>::~CallableWrapper(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)a1 = &off_1E3361120;
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(WTF::StringImpl **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCPeerConnection::setLocalDescription(std::optional<WebCore::RTCLocalSessionDescriptionInit> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E3361120;
  if (*((_BYTE *)this + 32))
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCPeerConnection::setLocalDescription(std::optional<WebCore::RTCLocalSessionDescriptionInit> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>::call(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  BOOL v4;
  unsigned int v5;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  BOOL v16;
  uint64_t v17;
  uint64_t result;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;

  v3 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(a1 + 32))
    v4 = *(_BYTE *)(a1 + 20) == 0;
  else
    v4 = 1;
  if (v4)
  {
    v5 = *(_DWORD *)(v3 + 68);
    if (v5 != 4 && v5 >= 2)
      v8 = 2;
    else
      v8 = 0;
    if (!*(_BYTE *)(a1 + 32))
    {
      v7 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    v8 = *(_DWORD *)(a1 + 16);
  }
  v7 = *(WTF::StringImpl **)(a1 + 24);
  if (v7)
    *(_DWORD *)v7 += 2;
LABEL_16:
  if (v8 != 2)
  {
    if (v8)
    {
      v9 = v7;
LABEL_29:
      if (!v9)
        goto LABEL_30;
LABEL_36:
      v11 = *((_DWORD *)v9 + 1);
      goto LABEL_37;
    }
    if (!v7 || (v11 = *((_DWORD *)v7 + 1)) == 0)
    {
      v9 = *(WTF::StringImpl **)(v3 + 336);
      if (!v9)
        goto LABEL_21;
      goto LABEL_20;
    }
LABEL_34:
    v9 = v7;
LABEL_37:
    v10 = v11 == 0;
    goto LABEL_38;
  }
  if (v7)
  {
    v11 = *((_DWORD *)v7 + 1);
    if (v11)
      goto LABEL_34;
  }
  v9 = *(WTF::StringImpl **)(v3 + 344);
  if (v9)
LABEL_20:
    *(_DWORD *)v9 += 2;
LABEL_21:
  if (!v7)
    goto LABEL_29;
  if (*(_DWORD *)v7 == 2)
  {
    WTF::StringImpl::destroy(v7, a2);
    if (!v9)
      goto LABEL_30;
    goto LABEL_36;
  }
  *(_DWORD *)v7 -= 2;
  if (v9)
    goto LABEL_36;
LABEL_30:
  v10 = 1;
LABEL_38:
  if ((v8 & 0xFFFFFFFD) != 0 || !v10)
  {
    v12 = bmalloc::api::isoAllocate();
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 8) = 0;
    *(_DWORD *)(v12 + 16) = v8;
    *(_QWORD *)(v12 + 24) = v9;
    v9 = 0;
  }
  else
  {
    v12 = 0;
  }
  v13 = *(_QWORD *)(v3 + 120);
  ++*(_DWORD *)(v3 + 24);
  v14 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v15 = &off_1E3361148;
  v15[1] = v3;
  v15[2] = v14;
  if (v12)
    v16 = (*(_DWORD *)(v12 + 16) - 1) < 2;
  else
    v16 = 0;
  *(_BYTE *)(v13 + 81) = v16;
  v17 = *(_QWORD *)(v13 + 32);
  *(_QWORD *)(v13 + 32) = v15;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 248))(v13, v12);
  if (!v12)
  {
LABEL_50:
    if (!v9)
      return result;
    goto LABEL_51;
  }
  if (*(_DWORD *)v12 != 1)
  {
    --*(_DWORD *)v12;
    goto LABEL_50;
  }
  v20 = *(WTF::StringImpl **)(v12 + 24);
  *(_QWORD *)(v12 + 24) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = *(_QWORD *)(v12 + 8);
  if (v21)
  {
    *(_QWORD *)(v21 + 8) = 3;
    *(_QWORD *)(v12 + 8) = 0;
  }
  result = bmalloc::api::isoDeallocate((bmalloc::api *)v12, v19);
  if (v9)
  {
LABEL_51:
    if (*(_DWORD *)v9 == 2)
      return WTF::StringImpl::destroy(v9, v19);
    else
      *(_DWORD *)v9 -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RTCPeerConnection::setLocalDescription(std::optional<WebCore::RTCLocalSessionDescriptionInit> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0::operator()(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::{lambda(WebCore::ExceptionOr<void> &&)#1},void,WebCore::ExceptionOr>::~CallableWrapper(_QWORD *a1, WTF *a2)
{
  _DWORD *v3;
  WebCore::RTCPeerConnection *v4;
  bmalloc::api *v6;
  void *v7;

  *a1 = &off_1E3361148;
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WebCore::RTCPeerConnection *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 6) == 1)
    {
      WebCore::RTCPeerConnection::~RTCPeerConnection(v4, a2);
      bmalloc::api::isoDeallocate(v6, v7);
    }
    else
    {
      --*((_DWORD *)v4 + 6);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCPeerConnection::setLocalDescription(std::optional<WebCore::RTCLocalSessionDescriptionInit> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0::operator()(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::{lambda(WebCore::ExceptionOr<void> &&)#1},void,WebCore::ExceptionOr>::~CallableWrapper(WTF *this, WTF *a2)
{
  _DWORD *v3;
  WebCore::RTCPeerConnection *v4;
  bmalloc::api *v6;
  void *v7;

  *(_QWORD *)this = &off_1E3361148;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WebCore::RTCPeerConnection *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 6) == 1)
    {
      WebCore::RTCPeerConnection::~RTCPeerConnection(v4, a2);
      bmalloc::api::isoDeallocate(v6, v7);
    }
    else
    {
      --*((_DWORD *)v4 + 6);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::RTCPeerConnection::setLocalDescription(std::optional<WebCore::RTCLocalSessionDescriptionInit> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0::operator()(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::{lambda(WebCore::ExceptionOr<void> &&)#1},void,WebCore::ExceptionOr>::call(WTF::StringImpl *result, uint64_t a2)
{
  if (*(_DWORD *)(*((_QWORD *)result + 1) + 80) != 5)
    return WebCore::DOMPromiseDeferred<void>::settle((WTF::StringImpl *)((char *)result + 16), a2);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RTCPeerConnection::setRemoteDescription(WebCore::RTCSessionDescriptionInit &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *a1 = &off_1E3361170;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCPeerConnection::setRemoteDescription(WebCore::RTCSessionDescriptionInit &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = &off_1E3361170;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCPeerConnection::setRemoteDescription(WebCore::RTCSessionDescriptionInit &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  WTF::StringImpl *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  bmalloc::api *v22;
  WTF::StringImpl *v23;
  uint64_t v24;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_DWORD *)(a1 + 16);
  v6 = bmalloc::api::isoAllocate();
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 16) = v5;
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(v6 + 24) = v7;
  if (v5 || (*(_DWORD *)(v4 + 68) | 2) == 2)
  {
    v8 = *(_QWORD **)(v4 + 120);
    v9 = *a2;
    *a2 = 0;
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v10 = &off_1E33611E8;
    v10[1] = v9;
    v11 = v8[4];
    v8[4] = v10;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(*v8 + 256))(v8, v6);
    if (*(_DWORD *)v6 != 1)
    {
      --*(_DWORD *)v6;
      return result;
    }
    v20 = *(WTF::StringImpl **)(v6 + 24);
    *(_QWORD *)(v6 + 24) = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v13);
      else
        *(_DWORD *)v20 -= 2;
    }
    v21 = *(_QWORD *)(v6 + 8);
    if (v21)
    {
      *(_QWORD *)(v21 + 8) = 3;
      *(_QWORD *)(v6 + 8) = 0;
    }
    v22 = (bmalloc::api *)v6;
  }
  else
  {
    v14 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v14 += 2;
    v15 = bmalloc::api::isoAllocate();
    *(_DWORD *)v15 = 1;
    *(_QWORD *)(v15 + 8) = 0;
    *(_DWORD *)(v15 + 16) = 3;
    *(_QWORD *)(v15 + 24) = v14;
    v16 = *(_QWORD *)(v4 + 120);
    ++*(_DWORD *)(v4 + 24);
    v17 = *a2;
    *a2 = 0;
    v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
    *v18 = off_1E3361198;
    v18[1] = v4;
    v18[2] = v4;
    v18[3] = v6;
    v18[4] = v17;
    *(_BYTE *)(v16 + 81) = (*(_DWORD *)(v15 + 16) - 1) < 2;
    v19 = *(_QWORD *)(v16 + 32);
    *(_QWORD *)(v16 + 32) = v18;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 248))(v16, v15);
    if (*(_DWORD *)v15 != 1)
    {
      --*(_DWORD *)v15;
      return result;
    }
    v23 = *(WTF::StringImpl **)(v15 + 24);
    *(_QWORD *)(v15 + 24) = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v13);
      else
        *(_DWORD *)v23 -= 2;
    }
    v24 = *(_QWORD *)(v15 + 8);
    if (v24)
    {
      *(_QWORD *)(v24 + 8) = 3;
      *(_QWORD *)(v15 + 8) = 0;
    }
    v22 = (bmalloc::api *)v15;
  }
  return bmalloc::api::isoDeallocate(v22, v13);
}

_QWORD *_ZZZN7WebCore17RTCPeerConnection20setRemoteDescriptionEONS_25RTCSessionDescriptionInitEON3WTF3RefINS_15DeferredPromiseENS3_12RawPtrTraitsIS5_EENS3_21DefaultRefDerefTraitsIS5_EEEEEN3__0clESB_ENUlOT_E_D1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  bmalloc::api *v4;
  WebCore::RTCPeerConnection *v5;
  WTF::StringImpl *v7;
  uint64_t v8;
  bmalloc::api *v9;
  void *v10;

  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (bmalloc::api *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = (WTF::StringImpl *)*((_QWORD *)v4 + 3);
      *((_QWORD *)v4 + 3) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v8 = *((_QWORD *)v4 + 1);
      if (v8)
      {
        *(_QWORD *)(v8 + 8) = 3;
        *((_QWORD *)v4 + 1) = 0;
      }
      bmalloc::api::isoDeallocate(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (WebCore::RTCPeerConnection *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 1)
    {
      WebCore::RTCPeerConnection::~RTCPeerConnection(v5, a2);
      bmalloc::api::isoDeallocate(v9, v10);
    }
    else
    {
      --*((_DWORD *)v5 + 6);
    }
  }
  return a1;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore17RTCPeerConnection20setRemoteDescriptionEONS2_25RTCSessionDescriptionInitEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEEN3__0clESD_EUlOT_E_vJONS2_11ExceptionOrIvEEEED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E3361198;
  _ZZZN7WebCore17RTCPeerConnection20setRemoteDescriptionEONS_25RTCSessionDescriptionInitEON3WTF3RefINS_15DeferredPromiseENS3_12RawPtrTraitsIS5_EENS3_21DefaultRefDerefTraitsIS5_EEEEEN3__0clESB_ENUlOT_E_D1Ev(a1 + 1, a2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore17RTCPeerConnection20setRemoteDescriptionEONS2_25RTCSessionDescriptionInitEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEEN3__0clESD_EUlOT_E_vJONS2_11ExceptionOrIvEEEED0Ev(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E3361198;
  _ZZZN7WebCore17RTCPeerConnection20setRemoteDescriptionEONS_25RTCSessionDescriptionInitEON3WTF3RefINS_15DeferredPromiseENS3_12RawPtrTraitsIS5_EENS3_21DefaultRefDerefTraitsIS5_EEEEEN3__0clESB_ENUlOT_E_D1Ev((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore17RTCPeerConnection20setRemoteDescriptionEONS2_25RTCSessionDescriptionInitEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEEN3__0clESD_EUlOT_E_vJONS2_11ExceptionOrIvEEEE4callESK_(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v1 = result[1];
  if (*(_DWORD *)(v1 + 80) != 5)
  {
    v2 = *(_QWORD **)(v1 + 120);
    ++*(_DWORD *)(v1 + 24);
    v3 = result[3];
    v4 = result[4];
    result[4] = 0;
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v5 = &off_1E33611C0;
    v5[1] = v1;
    v5[2] = v4;
    v6 = v2[4];
    v2[4] = v5;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*v2 + 256))(v2, v3);
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZZN7WebCore17RTCPeerConnection20setRemoteDescriptionEONS2_25RTCSessionDescriptionInitEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEEN3__0clESD_ENUlOT_E_clINS2_11ExceptionOrIvEEEEDaSG_EUlOSK_E_vJSM_EED1Ev(_QWORD *a1, WTF *a2)
{
  _DWORD *v3;
  WebCore::RTCPeerConnection *v4;
  bmalloc::api *v6;
  void *v7;

  *a1 = &off_1E33611C0;
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WebCore::RTCPeerConnection *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 6) == 1)
    {
      WebCore::RTCPeerConnection::~RTCPeerConnection(v4, a2);
      bmalloc::api::isoDeallocate(v6, v7);
    }
    else
    {
      --*((_DWORD *)v4 + 6);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZZN7WebCore17RTCPeerConnection20setRemoteDescriptionEONS2_25RTCSessionDescriptionInitEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEEN3__0clESD_ENUlOT_E_clINS2_11ExceptionOrIvEEEEDaSG_EUlOSK_E_vJSM_EED0Ev(WTF *this, WTF *a2)
{
  _DWORD *v3;
  WebCore::RTCPeerConnection *v4;
  bmalloc::api *v6;
  void *v7;

  *(_QWORD *)this = &off_1E33611C0;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WebCore::RTCPeerConnection *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 6) == 1)
    {
      WebCore::RTCPeerConnection::~RTCPeerConnection(v4, a2);
      bmalloc::api::isoDeallocate(v6, v7);
    }
    else
    {
      --*((_DWORD *)v4 + 6);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZZN7WebCore17RTCPeerConnection20setRemoteDescriptionEONS2_25RTCSessionDescriptionInitEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEEN3__0clESD_ENUlOT_E_clINS2_11ExceptionOrIvEEEEDaSG_EUlOSK_E_vJSM_EE4callESM_(WTF::StringImpl *result, uint64_t a2)
{
  if (*(_DWORD *)(*((_QWORD *)result + 1) + 80) != 5)
    return WebCore::DOMPromiseDeferred<void>::settle((WTF::StringImpl *)((char *)result + 16), a2);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore17RTCPeerConnection20setRemoteDescriptionEONS2_25RTCSessionDescriptionInitEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEEN3__0clESD_EUlOT_E0_vJONS2_11ExceptionOrIvEEEED1Ev(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33611E8;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore17RTCPeerConnection20setRemoteDescriptionEONS2_25RTCSessionDescriptionInitEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEEN3__0clESD_EUlOT_E0_vJONS2_11ExceptionOrIvEEEED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33611E8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore17RTCPeerConnection20setRemoteDescriptionEONS2_25RTCSessionDescriptionInitEONS_3RefINS2_15DeferredPromiseENS_12RawPtrTraitsIS7_EENS_21DefaultRefDerefTraitsIS7_EEEEEN3__0clESD_EUlOT_E0_vJONS2_11ExceptionOrIvEEEE4callESK_(uint64_t a1, uint64_t a2)
{
  return WebCore::DOMPromiseDeferred<void>::settle((WTF::StringImpl *)(a1 + 8), a2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::RTCPeerConnection::addIceCandidate(std::optional<std::variant<WebCore::RTCIceCandidateInit,WTF::RefPtr<WebCore::RTCIceCandidate,WTF::RawPtrTraits<WebCore::RTCIceCandidate>,WTF::DefaultRefDerefTraits<WebCore::RTCIceCandidate>>>> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,WebCore::RTCPeerConnection::addIceCandidate(std::optional<std::variant<WebCore::RTCIceCandidateInit,WTF::RefPtr<WebCore::RTCIceCandidate,WTF::RawPtrTraits<WebCore::RTCIceCandidate>,WTF::DefaultRefDerefTraits<WebCore::RTCIceCandidate>>>> &,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::RTCIceCandidateInit,WTF::RefPtr<WebCore::RTCIceCandidate,WTF::RawPtrTraits<WebCore::RTCIceCandidate>,WTF::DefaultRefDerefTraits<WebCore::RTCIceCandidate>>> &>(uint64_t **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v4;
  int8x8_t v5;
  __n128 v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;

  if (!*(_QWORD *)a2 || !*(_DWORD *)(*(_QWORD *)a2 + 4))
  {
    *a3 = 0;
    return;
  }
  v4 = *a1;
  v6.n128_u64[0] = (unint64_t)WebCore::RTCIceCandidate::create(a2, (uint64_t)&v15);
  v7 = v17;
  if (!v17)
  {
    v12 = v15;
    v15 = 0;
    goto LABEL_12;
  }
  if (v17 == 1)
  {
    v8 = v16;
    v16 = 0;
    v9 = *v4;
    v10 = *(unsigned __int8 *)(*v4 + 16);
    *(_BYTE *)*v4 = v15;
    if (!v10)
    {
      v12 = 0;
      *(_QWORD *)(v9 + 8) = v8;
      *(_BYTE *)(v9 + 16) = 1;
      goto LABEL_12;
    }
    v11 = *(WTF::StringImpl **)(v9 + 8);
    *(_QWORD *)(v9 + 8) = v8;
    if (!v11)
    {
      v12 = 0;
      goto LABEL_12;
    }
    if (*(_DWORD *)v11 != 2)
    {
      v12 = 0;
      *(_DWORD *)v11 -= 2;
LABEL_12:
      *a3 = v12;
LABEL_13:
      ((void (*)(char *, uint64_t *, __n128))off_1E3361210[v7])(&v18, &v15, v6);
      return;
    }
    WTF::StringImpl::destroy(v11, *(WTF::StringImpl **)&v5);
    v7 = v17;
    *a3 = 0;
    if (v7 != -1)
      goto LABEL_13;
  }
  else
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::RTCPeerConnection::addIceCandidate(std::optional<std::variant<WebCore::RTCIceCandidateInit,WTF::RefPtr<WebCore::RTCIceCandidate,WTF::RawPtrTraits<WebCore::RTCIceCandidate>,WTF::DefaultRefDerefTraits<WebCore::RTCIceCandidate>>>> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,WebCore::RTCPeerConnection::addIceCandidate(std::optional<std::variant<WebCore::RTCIceCandidateInit,WTF::RefPtr<WebCore::RTCIceCandidate,WTF::RawPtrTraits<WebCore::RTCIceCandidate>,WTF::DefaultRefDerefTraits<WebCore::RTCIceCandidate>>>> &,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::RTCIceCandidateInit,WTF::RefPtr<WebCore::RTCIceCandidate,WTF::RawPtrTraits<WebCore::RTCIceCandidate>,WTF::DefaultRefDerefTraits<WebCore::RTCIceCandidate>>> &>(v13, v14);
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::RTCPeerConnection::addIceCandidate(std::optional<std::variant<WebCore::RTCIceCandidateInit,WTF::RefPtr<WebCore::RTCIceCandidate,WTF::RawPtrTraits<WebCore::RTCIceCandidate>,WTF::DefaultRefDerefTraits<WebCore::RTCIceCandidate>>>> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,WebCore::RTCPeerConnection::addIceCandidate(std::optional<std::variant<WebCore::RTCIceCandidateInit,WTF::RefPtr<WebCore::RTCIceCandidate,WTF::RawPtrTraits<WebCore::RTCIceCandidate>,WTF::DefaultRefDerefTraits<WebCore::RTCIceCandidate>>>> &,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::RTCIceCandidateInit,WTF::RefPtr<WebCore::RTCIceCandidate,WTF::RawPtrTraits<WebCore::RTCIceCandidate>,WTF::DefaultRefDerefTraits<WebCore::RTCIceCandidate>>> &>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  *a2 = v2;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RTCPeerConnection::addIceCandidate(std::optional<std::variant<WebCore::RTCIceCandidateInit,WTF::RefPtr<WebCore::RTCIceCandidate,WTF::RawPtrTraits<WebCore::RTCIceCandidate>,WTF::DefaultRefDerefTraits<WebCore::RTCIceCandidate>>>> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2,void,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WebCore::RTCIceCandidate *v3;
  bmalloc::api *v5;
  void *v6;

  *a1 = &off_1E3361230;
  v3 = (WebCore::RTCIceCandidate *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::RTCIceCandidate::~RTCIceCandidate(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCPeerConnection::addIceCandidate(std::optional<std::variant<WebCore::RTCIceCandidateInit,WTF::RefPtr<WebCore::RTCIceCandidate,WTF::RawPtrTraits<WebCore::RTCIceCandidate>,WTF::DefaultRefDerefTraits<WebCore::RTCIceCandidate>>>> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2,void,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WebCore::RTCIceCandidate *v3;
  bmalloc::api *v5;
  void *v6;

  *(_QWORD *)this = &off_1E3361230;
  v3 = (WebCore::RTCIceCandidate *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::RTCIceCandidate::~RTCIceCandidate(v3, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCPeerConnection::addIceCandidate(std::optional<std::variant<WebCore::RTCIceCandidateInit,WTF::RefPtr<WebCore::RTCIceCandidate,WTF::RawPtrTraits<WebCore::RTCIceCandidate>,WTF::DefaultRefDerefTraits<WebCore::RTCIceCandidate>>>> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_2,void,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>::call(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD **)(v3 + 120);
  ++*(_DWORD *)(v3 + 24);
  v5 = *a2;
  *a2 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = &off_1E3361258;
  v6[1] = v3;
  v6[2] = v5;
  v8 = v6;
  WebCore::PeerConnectionBackend::addIceCandidate(v4, v2, &v8);
  result = (uint64_t)v8;
  v8 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore17RTCPeerConnection15addIceCandidateEONSt3__18optionalINS4_7variantIJNS2_19RTCIceCandidateInitENS_6RefPtrINS2_15RTCIceCandidateENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEEEEEONS_3RefINS2_15DeferredPromiseENSA_ISJ_EENSC_ISJ_EEEEEN3__2clESN_EUlOT_E_vJONS2_11ExceptionOrIvEEEED1Ev(_QWORD *a1, WTF *a2)
{
  _DWORD *v3;
  WebCore::RTCPeerConnection *v4;
  bmalloc::api *v6;
  void *v7;

  *a1 = &off_1E3361258;
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WebCore::RTCPeerConnection *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 6) == 1)
    {
      WebCore::RTCPeerConnection::~RTCPeerConnection(v4, a2);
      bmalloc::api::isoDeallocate(v6, v7);
    }
    else
    {
      --*((_DWORD *)v4 + 6);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore17RTCPeerConnection15addIceCandidateEONSt3__18optionalINS4_7variantIJNS2_19RTCIceCandidateInitENS_6RefPtrINS2_15RTCIceCandidateENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEEEEEONS_3RefINS2_15DeferredPromiseENSA_ISJ_EENSC_ISJ_EEEEEN3__2clESN_EUlOT_E_vJONS2_11ExceptionOrIvEEEED0Ev(WTF *this, WTF *a2)
{
  _DWORD *v3;
  WebCore::RTCPeerConnection *v4;
  bmalloc::api *v6;
  void *v7;

  *(_QWORD *)this = &off_1E3361258;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (WebCore::RTCPeerConnection *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    if (*((_DWORD *)v4 + 6) == 1)
    {
      WebCore::RTCPeerConnection::~RTCPeerConnection(v4, a2);
      bmalloc::api::isoDeallocate(v6, v7);
    }
    else
    {
      --*((_DWORD *)v4 + 6);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore17RTCPeerConnection15addIceCandidateEONSt3__18optionalINS4_7variantIJNS2_19RTCIceCandidateInitENS_6RefPtrINS2_15RTCIceCandidateENS_12RawPtrTraitsIS9_EENS_21DefaultRefDerefTraitsIS9_EEEEEEEEEONS_3RefINS2_15DeferredPromiseENSA_ISJ_EENSC_ISJ_EEEEEN3__2clESN_EUlOT_E_vJONS2_11ExceptionOrIvEEEE4callESU_(WTF::StringImpl *result, uint64_t a2)
{
  if (*(_DWORD *)(*((_QWORD *)result + 1) + 80) != 5)
    return WebCore::DOMPromiseDeferred<void>::settle((WTF::StringImpl *)((char *)result + 16), a2);
  return result;
}

WTF *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::RTCPeerConnection::iceServersFromConfiguration(WebCore::RTCConfiguration &,WebCore::RTCConfiguration const*,BOOL)::$_0,WebCore::RTCPeerConnection::iceServersFromConfiguration(WebCore::RTCConfiguration &,WebCore::RTCConfiguration const*,BOOL)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::Vector<std::__variant_detail::_Trait,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>(uint64_t **a1, WTF::StringImpl **a2)
{
  uint64_t *v2;
  WTF::StringImpl *v3;
  _QWORD *v4;
  WTF::StringImpl *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *result;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;

  v2 = *a1;
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  v6 = v4;
  if (v3)
    *(_DWORD *)v3 += 2;
  *v4 = v3;
  v7 = *v2;
  v8 = *(unsigned int *)(v7 + 12);
  if ((_DWORD)v8)
  {
    v10 = *(WTF::StringImpl ***)v7;
    v11 = 8 * v8;
    do
    {
      v12 = *v10;
      *v10 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v5);
        else
          *(_DWORD *)v12 -= 2;
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
  }
  result = *(WTF **)v7;
  if (*(_QWORD *)v7)
  {
    *(_QWORD *)v7 = 0;
    *(_DWORD *)(v7 + 8) = 0;
    result = (WTF *)WTF::fastFree(result, v5);
  }
  *(_QWORD *)v7 = v6;
  *(_QWORD *)(v7 + 8) = 0x100000001;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      return (WTF *)WTF::StringImpl::destroy(v3, v5);
    else
      *(_DWORD *)v3 -= 2;
  }
  return result;
}

WTF *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::RTCPeerConnection::iceServersFromConfiguration(WebCore::RTCConfiguration &,WebCore::RTCConfiguration const*,BOOL)::$_0,WebCore::RTCPeerConnection::iceServersFromConfiguration(WebCore::RTCConfiguration &,WebCore::RTCConfiguration const*,BOOL)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::Vector<std::__variant_detail::_Trait,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> &>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *result;
  uint64_t v6;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl *v9;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v4 = *(unsigned int *)(v3 + 12);
  if ((_DWORD)v4)
  {
    v7 = *(WTF::StringImpl ***)v3;
    v8 = 8 * v4;
    do
    {
      v9 = *v7;
      *v7 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  result = *(WTF **)v3;
  if (*(_QWORD *)v3)
  {
    *(_QWORD *)v3 = 0;
    *(_DWORD *)(v3 + 8) = 0;
    result = (WTF *)WTF::fastFree(result, a2);
  }
  v6 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)v3 = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(v3 + 8) = v6;
  LODWORD(v6) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(v3 + 12) = v6;
  return result;
}

char *WTF::Vector<WebCore::MediaEndpointConfiguration::IceServerInfo,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  WTF::StringImpl *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  WTF *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  void *v20;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 > a3 || (v6 = (WTF *)((char *)v5 + 32 * *(unsigned int *)(a1 + 12)), (unint64_t)v6 <= a3))
  {
    v14 = *(unsigned int *)(a1 + 8);
    v15 = v14 + (v14 >> 2);
    if (v15 >= 0x10)
      v16 = v15 + 1;
    else
      v16 = 16;
    if (v16 <= a2)
      v17 = a2;
    else
      v17 = v16;
    if (v17 > v14)
    {
      if (v17 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x19549FFACLL);
      }
      v18 = (WTF *)((char *)v5 + 32 * *(unsigned int *)(a1 + 12));
      v19 = WTF::fastMalloc((WTF *)(32 * v17));
      *(_DWORD *)(a1 + 8) = v17;
      *(_QWORD *)a1 = v19;
      WTF::VectorMover<false,WebCore::MediaEndpointConfiguration::IceServerInfo>::move((uint64_t)v5, v18, v19);
      if (v5)
      {
        if (*(WTF **)a1 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v20);
      }
    }
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 8);
    v8 = v7 + (v7 >> 2);
    if (v8 >= 0x10)
      v9 = v8 + 1;
    else
      v9 = 16;
    if (v9 <= a2)
      v10 = a2;
    else
      v10 = v9;
    if (v10 <= v7)
    {
      v13 = *(WTF **)a1;
    }
    else
    {
      if (v10 >> 27)
      {
        __break(0xC471u);
        JUMPOUT(0x19549FFB4);
      }
      v11 = WTF::fastMalloc((WTF *)(32 * v10));
      *(_DWORD *)(a1 + 8) = v10;
      *(_QWORD *)a1 = v11;
      WTF::VectorMover<false,WebCore::MediaEndpointConfiguration::IceServerInfo>::move((uint64_t)v5, v6, v11);
      v13 = *(WTF **)a1;
      if (v5)
      {
        if (v13 == v5)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v5, v12);
        v13 = *(WTF **)a1;
      }
    }
    return (char *)v13 + 32 * ((uint64_t)(v3 - (_QWORD)v5) >> 5);
  }
  return (char *)v3;
}

uint64_t WTF::VectorMover<false,WebCore::MediaEndpointConfiguration::IceServerInfo>::move(uint64_t result, WTF::StringImpl *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  if ((WTF::StringImpl *)result != a2)
  {
    v5 = result;
    do
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v6 = *(_QWORD *)v5;
      *(_QWORD *)v5 = 0;
      *(_QWORD *)a3 = v6;
      LODWORD(v6) = *(_DWORD *)(v5 + 8);
      *(_DWORD *)(v5 + 8) = 0;
      *(_DWORD *)(a3 + 8) = v6;
      LODWORD(v6) = *(_DWORD *)(v5 + 12);
      *(_DWORD *)(v5 + 12) = 0;
      *(_DWORD *)(a3 + 12) = v6;
      v7 = *(_QWORD *)(v5 + 16);
      *(_QWORD *)(v5 + 16) = 0;
      *(_QWORD *)(a3 + 16) = v7;
      v8 = *(_QWORD *)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      *(_QWORD *)(a3 + 24) = v8;
      v9 = *(WTF::StringImpl **)(v5 + 24);
      *(_QWORD *)(v5 + 24) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, a2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = *(WTF::StringImpl **)(v5 + 16);
      *(_QWORD *)(v5 + 16) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      result = WTF::Vector<WTF::URL,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(v5, a2);
      v5 += 32;
      a3 += 32;
    }
    while ((WTF::StringImpl *)v5 != a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RTCPeerConnection::getStats(WebCore::MediaStreamTrack *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF *a2)
{
  WTF *v3;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WTF *)a1[1];
  *a1 = &off_1E3361290;
  a1[1] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v5 + 48);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v5 + 24) == 1)
      {
        WebCore::RTCPeerConnection::~RTCPeerConnection((WebCore::RTCPeerConnection *)v5, a2);
        bmalloc::api::isoDeallocate(v6, v7);
      }
      else
      {
        --*(_DWORD *)(v5 + 24);
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCPeerConnection::getStats(WebCore::MediaStreamTrack *,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF *a2)
{
  WTF *v3;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WTF *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3361290;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v5 + 48);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v5 + 24) == 1)
      {
        WebCore::RTCPeerConnection::~RTCPeerConnection((WebCore::RTCPeerConnection *)v5, a2);
        bmalloc::api::isoDeallocate(v6, v7);
      }
      else
      {
        --*(_DWORD *)(v5 + 24);
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::RTCIceGatheringState>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, int *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::Logger *v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::Logger *v34;
  uint64_t v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  WTF::Logger *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint8_t buf[4];
  _BYTE v47[12];
  int v48;
  WTF::StringImpl *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  result = WTF::Logger::LogSiteIdentifier::toString(this);
  v8 = *a4;
  {
    WebCore::convertEnumerationToString(WebCore::RTCIceGatheringState)::$_0::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCIceGatheringState)::$_1::operator() const(void)::impl += 2;
    WebCore::convertEnumerationToString(WebCore::RTCIceGatheringState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCIceGatheringState)::$_0::operator() const(void)::impl;
    unk_1EE2F4A40 = &WebCore::convertEnumerationToString(WebCore::RTCIceGatheringState)::$_1::operator() const(void)::impl;
    WebCore::convertEnumerationToString(WebCore::RTCIceGatheringState)::$_2::operator() const(void)::impl += 2;
    qword_1EE2F4A48 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCIceGatheringState)::$_2::operator() const(void)::impl;
  }
  v9 = WebCore::convertEnumerationToString(WebCore::RTCIceGatheringState)::values[v8];
  if (v9)
    *(_DWORD *)v9 += 2;
  if (!v44)
  {
    v10 = 0;
    if (v9)
      goto LABEL_7;
LABEL_80:
    v11 = 0;
    goto LABEL_8;
  }
  v10 = *((_DWORD *)v44 + 1);
  if (!v9)
    goto LABEL_80;
LABEL_7:
  v11 = *(_DWORD *)(v9 + 4);
LABEL_8:
  if ((v11 | v10) < 0 || (result = (v10 + v11), __OFADD__(v10, v11)))
  {
    v45 = 0;
    goto LABEL_85;
  }
  if (v44)
  {
    v12 = *((_DWORD *)v44 + 4);
    v13 = (v12 >> 2) & 1;
    if (!v9 || (v12 & 4) == 0)
    {
LABEL_14:
      result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v13, (uint64_t)v44, v9, &v45);
      if (v45)
      {
        if (v9)
        {
          if (*(_DWORD *)v9 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v9, v14);
          else
            *(_DWORD *)v9 -= 2;
        }
        goto LABEL_18;
      }
LABEL_85:
      __break(0xC471u);
      return result;
    }
LABEL_13:
    v13 = (*(unsigned __int8 *)(v9 + 16) >> 2) & 1;
    goto LABEL_14;
  }
  if (v9)
    goto LABEL_13;
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, 1, 0, 0, &v45);
  if (!v45)
    goto LABEL_85;
LABEL_18:
  v15 = v44;
  v44 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *(NSObject **)(a1 + 32);
  v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v17)
  {
    WTF::String::utf8();
    v19 = v42 ? (char *)v42 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v47 = v19;
    _os_log_impl(&dword_1940B8000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v17 = (uint64_t)v42;
    v42 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 1)
        v17 = WTF::fastFree((WTF *)v17, v18);
      else
        --*(_DWORD *)v17;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v20 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v21 = *v20;
      if ((v21 & 1) != 0)
        break;
      v22 = __ldaxr(v20);
      if (v22 == v21)
      {
        if (!__stxr(v21 | 1, v20))
        {
          v23 = WTF::Logger::observers((WTF::Logger *)v17);
          v24 = *(unsigned int *)(v23 + 12);
          if ((_DWORD)v24)
          {
            v25 = *(uint64_t **)v23;
            v26 = *(_QWORD *)v23 + 8 * v24;
            do
            {
              v27 = *v25;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v28 = *a4;
              v48 = 0;
              {
                WebCore::convertEnumerationToString(WebCore::RTCIceGatheringState)::$_0::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::RTCIceGatheringState)::$_1::operator() const(void)::impl += 2;
                WebCore::convertEnumerationToString(WebCore::RTCIceGatheringState)::values[0] = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCIceGatheringState)::$_0::operator() const(void)::impl;
                unk_1EE2F4A40 = &WebCore::convertEnumerationToString(WebCore::RTCIceGatheringState)::$_1::operator() const(void)::impl;
                WebCore::convertEnumerationToString(WebCore::RTCIceGatheringState)::$_2::operator() const(void)::impl += 2;
                qword_1EE2F4A48 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::RTCIceGatheringState)::$_2::operator() const(void)::impl;
              }
              v29 = (WTF::StringImpl *)WebCore::convertEnumerationToString(WebCore::RTCIceGatheringState)::values[v28];
              if (v29)
                *(_DWORD *)v29 += 2;
              v49 = v29;
              v42 = 0;
              v43 = 0;
              v30 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v43) = 2;
              v42 = v30;
              v31 = HIDWORD(v43);
              *((_DWORD *)v30 + 4 * HIDWORD(v43)) = *(_DWORD *)buf;
              v32 = *(_QWORD *)&v47[4];
              if (*(_QWORD *)&v47[4])
                **(_DWORD **)&v47[4] += 2;
              *((_QWORD *)v30 + 2 * v31 + 1) = v32;
              *((_DWORD *)v30 + 4 * (v31 + 1)) = v48;
              v33 = v49;
              if (v49)
                *(_DWORD *)v49 += 2;
              *((_QWORD *)v30 + 2 * (v31 + 1) + 1) = v33;
              HIDWORD(v43) = v31 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v27 + 16))(v27, a1, a2, &v42);
              v34 = v42;
              if (HIDWORD(v43))
              {
                v35 = 16 * HIDWORD(v43);
                v36 = (WTF::StringImpl **)((char *)v42 + 8);
                do
                {
                  v37 = *v36;
                  *v36 = 0;
                  if (v37)
                  {
                    if (*(_DWORD *)v37 == 2)
                      WTF::StringImpl::destroy(v37, (WTF::StringImpl *)v18);
                    else
                      *(_DWORD *)v37 -= 2;
                  }
                  v36 += 2;
                  v35 -= 16;
                }
                while (v35);
                v34 = v42;
              }
              if (v34)
              {
                v42 = 0;
                LODWORD(v43) = 0;
                WTF::fastFree(v34, v18);
              }
              v38 = v49;
              v49 = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                  WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v18);
                else
                  *(_DWORD *)v38 -= 2;
              }
              v39 = *(WTF::StringImpl **)&v47[4];
              *(_QWORD *)&v47[4] = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                  WTF::StringImpl::destroy(v39, (WTF::StringImpl *)v18);
                else
                  *(_DWORD *)v39 -= 2;
              }
              ++v25;
            }
            while (v25 != (uint64_t *)v26);
          }
          v40 = __ldxr(v20);
          if (v40 == 1)
          {
            if (!__stlxr(0, v20))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v45;
  v45 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::RTCPeerConnection::updateIceGatheringState(WebCore::RTCIceGatheringState)::$_0,void>::call(WTF::StringImpl *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[4];

  v1 = *((_QWORD *)result + 1);
  if (*(_DWORD *)(v1 + 80) != 5)
  {
    v2 = *((_DWORD *)result + 4);
    if (*(_DWORD *)(v1 + 72) != v2)
    {
      *(_DWORD *)(v1 + 72) = v2;
      v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v3 || (v4 = *(_QWORD *)(v3 + 96)) == 0)
        v4 = WebCore::threadGlobalDataSlow(result);
      v5 = *(_QWORD *)(v4 + 40);
      if (!v5)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v4);
        v5 = *(_QWORD *)(v4 + 40);
      }
      v6 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v6);
      *(_DWORD *)(v6 + 16) = 1;
      *(_QWORD *)v6 = off_1E33A4B48;
      *(_QWORD *)(v6 + 8) = 0;
      *(_DWORD *)(v6 + 20) = *(_DWORD *)(v6 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v5 + 992) != 0);
      v8 = *(_DWORD **)(v5 + 992);
      if (v8)
        *v8 += 2;
      *(_QWORD *)(v6 + 24) = v8;
      *(_QWORD *)(v6 + 40) = 0;
      *(_QWORD *)(v6 + 48) = 0;
      *(_QWORD *)(v6 + 32) = 0;
      *(_QWORD *)(v6 + 56) = v7;
      *(_QWORD *)(v6 + 64) = 0;
      v9 = *(_QWORD *)(v1 + 88);
      v10 = *(_QWORD *)(v1 + 96);
      v12[0] = "RTCPeerConnection";
      v12[1] = 18;
      v12[2] = "dispatchEvent";
      v12[3] = v10;
      if (*(_BYTE *)(v9 + 12) && WebCore::LogWebRTC && byte_1ECE7CD50 >= 3u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [14],WTF::AtomString,char [2]>((uint64_t)&WebCore::LogWebRTC, 3u, (WTF::Logger::LogSiteIdentifier *)v12, "dispatching '", (WTF::StringImpl **)(v6 + 24), "'");
      WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)v1, (WebCore::Event *)v6);
      if (*(_DWORD *)(v6 + 16) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      else
        --*(_DWORD *)(v6 + 16);
      return WebCore::RTCPeerConnection::updateConnectionState((WebCore::RTCPeerConnection *)v1, v11);
    }
  }
  return result;
}

uint64_t *WTF::Detail::CallableWrapper<WebCore::RTCPeerConnection::updateIceConnectionState(WebCore::RTCIceConnectionState)::$_0,void>::call(uint64_t *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[4];

  v2 = result[1];
  if (*(_DWORD *)(v2 + 80) != 5)
  {
    result = (uint64_t *)WebCore::RTCPeerConnection::computeIceConnectionStateFromIceTransports(result[1], a2);
    if (*(_DWORD *)(v2 + 76) != (_DWORD)result)
    {
      *(_DWORD *)(v2 + 76) = (_DWORD)result;
      v3 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v3 || (v4 = *(_QWORD *)(v3 + 96)) == 0)
        v4 = WebCore::threadGlobalDataSlow((WebCore *)result);
      v5 = *(_QWORD *)(v4 + 40);
      if (!v5)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v4);
        v5 = *(_QWORD *)(v4 + 40);
      }
      v6 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v6);
      *(_DWORD *)(v6 + 16) = 1;
      *(_QWORD *)v6 = off_1E33A4B48;
      *(_QWORD *)(v6 + 8) = 0;
      *(_DWORD *)(v6 + 20) = *(_DWORD *)(v6 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v5 + 984) != 0);
      v8 = *(_DWORD **)(v5 + 984);
      if (v8)
        *v8 += 2;
      *(_QWORD *)(v6 + 24) = v8;
      *(_QWORD *)(v6 + 40) = 0;
      *(_QWORD *)(v6 + 48) = 0;
      *(_QWORD *)(v6 + 32) = 0;
      *(_QWORD *)(v6 + 56) = v7;
      *(_QWORD *)(v6 + 64) = 0;
      v9 = *(_QWORD *)(v2 + 88);
      v10 = *(_QWORD *)(v2 + 96);
      v12[0] = "RTCPeerConnection";
      v12[1] = 18;
      v12[2] = "dispatchEvent";
      v12[3] = v10;
      if (*(_BYTE *)(v9 + 12) && WebCore::LogWebRTC && byte_1ECE7CD50 >= 3u)
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [14],WTF::AtomString,char [2]>((uint64_t)&WebCore::LogWebRTC, 3u, (WTF::Logger::LogSiteIdentifier *)v12, "dispatching '", (WTF::StringImpl **)(v6 + 24), "'");
      WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)v2, (WebCore::Event *)v6);
      if (*(_DWORD *)(v6 + 16) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      else
        --*(_DWORD *)(v6 + 16);
      return (uint64_t *)WebCore::RTCPeerConnection::updateConnectionState((WebCore::RTCPeerConnection *)v2, v11);
    }
  }
  return result;
}

WTF *WTF::Detail::CallableWrapper<WebCore::RTCPeerConnection::updateNegotiationNeededFlag(std::optional<unsigned int>)::$_0,void>::call(WTF *result)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];

  v2 = *((_QWORD *)result + 1);
  if (*(_DWORD *)(v2 + 80) == 5)
    return result;
  v3 = (_DWORD *)((char *)result + 16);
  if (!*((_BYTE *)result + 20))
  {
    if (!*(_BYTE *)(v2 + 256))
      return result;
    v4 = *(_DWORD *)(v2 + 252);
    *((_BYTE *)result + 20) = *(_BYTE *)(v2 + 256);
    *v3 = v4;
  }
  if (*(_BYTE *)(v2 + 248))
  {
    if (!*((_BYTE *)result + 20))
      goto LABEL_27;
LABEL_10:
    *(_DWORD *)(v2 + 252) = *v3;
    *(_BYTE *)(v2 + 256) = 1;
    return result;
  }
  if (*(_DWORD *)(v2 + 68))
  {
    if (*((_BYTE *)result + 20))
      goto LABEL_10;
  }
  else if (*((_BYTE *)result + 20))
  {
    result = (WTF *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v2 + 120) + 144))(*(_QWORD *)(v2 + 120), *v3);
    if (!(_DWORD)result)
      return result;
    v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v5 || (v1 = *(_QWORD *)(v5 + 96)) == 0)
      v1 = WebCore::threadGlobalDataSlow(result);
    v6 = *(_QWORD *)(v1 + 40);
    if (v6)
      goto LABEL_18;
    goto LABEL_28;
  }
LABEL_27:
  __break(1u);
LABEL_28:
  WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v1);
  v6 = *(_QWORD *)(v1 + 40);
LABEL_18:
  v7 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v7);
  *(_DWORD *)(v7 + 16) = 1;
  *(_QWORD *)v7 = off_1E33A4B48;
  *(_QWORD *)(v7 + 8) = 0;
  *(_DWORD *)(v7 + 20) = *(_DWORD *)(v7 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v6 + 1304) != 0);
  v9 = *(_DWORD **)(v6 + 1304);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(v7 + 24) = v9;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 56) = v8;
  *(_QWORD *)(v7 + 64) = 0;
  v10 = *(_QWORD *)(v2 + 88);
  v11 = *(_QWORD *)(v2 + 96);
  v12[0] = "RTCPeerConnection";
  v12[1] = 18;
  v12[2] = "dispatchEvent";
  v12[3] = v11;
  if (*(_BYTE *)(v10 + 12) && WebCore::LogWebRTC && byte_1ECE7CD50 >= 3u)
    WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [14],WTF::AtomString,char [2]>((uint64_t)&WebCore::LogWebRTC, 3u, (WTF::Logger::LogSiteIdentifier *)v12, "dispatching '", (WTF::StringImpl **)(v7 + 24), "'");
  result = WebCore::EventTarget::dispatchEvent((WebCore::EventTarget *)v2, (WebCore::Event *)v7);
  if (*(_DWORD *)(v7 + 16) == 1)
    return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  --*(_DWORD *)(v7 + 16);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RTCPeerConnection::scheduleEvent(WTF::Ref<WebCore::Event,WTF::RawPtrTraits<WebCore::Event>,WTF::DefaultRefDerefTraits<WebCore::Event>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  *a1 = &off_1E3361330;
  v2 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCPeerConnection::scheduleEvent(WTF::Ref<WebCore::Event,WTF::RawPtrTraits<WebCore::Event>,WTF::DefaultRefDerefTraits<WebCore::Event>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  *(_QWORD *)this = &off_1E3361330;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebCore::RTCPeerConnection::scheduleEvent(WTF::Ref<WebCore::Event,WTF::RawPtrTraits<WebCore::Event>,WTF::DefaultRefDerefTraits<WebCore::Event>> &&)::$_0,void>::call(uint64_t a1)
{
  WebCore::EventTarget *v1;
  WTF::StringImpl **v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  _QWORD v7[4];

  v1 = *(WebCore::EventTarget **)(a1 + 8);
  v2 = *(WTF::StringImpl ***)(a1 + 16);
  v3 = *((_QWORD *)v1 + 11);
  v4 = *((_QWORD *)v1 + 12);
  v7[0] = "RTCPeerConnection";
  v7[1] = 18;
  v7[2] = "dispatchEvent";
  v7[3] = v4;
  if (*(_BYTE *)(v3 + 12))
  {
    if (WebCore::LogWebRTC)
      v5 = byte_1ECE7CD50 >= 3u;
    else
      v5 = 0;
    if (v5)
      WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [14],WTF::AtomString,char [2]>((uint64_t)&WebCore::LogWebRTC, 3u, (WTF::Logger::LogSiteIdentifier *)v7, "dispatching '", v2 + 3, "'");
  }
  return WebCore::EventTarget::dispatchEvent(v1, (WebCore::Event *)v2);
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,char [14],WTF::AtomString,char [2]>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, const char *a4, WTF::StringImpl **a5, const char *a6)
{
  WTF::StringImpl *v10;
  uint64_t result;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  char v18;
  int v19;
  char v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  NSObject *v26;
  uint64_t v27;
  void *v28;
  char *v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::Logger *v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::Logger *v45;
  uint64_t v46;
  WTF::StringImpl **v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  int v53;
  unsigned int v54;
  char *v55;
  WTF::StringImpl **v56;
  WTF::Logger *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  uint8_t buf[4];
  _BYTE v66[12];
  int v67;
  WTF::StringImpl *v68;
  int v69;
  WTF::StringImpl *v70;
  int v71;
  WTF::StringImpl *v72[3];

  v72[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  v55 = (char *)a4;
  WTF::String::String((WTF::String *)&v62, a4);
  v56 = a5;
  v10 = *a5;
  if (*a5)
    *(_DWORD *)v10 += 2;
  result = WTF::String::String((WTF::String *)&v61, a6);
  if (v63)
    v12 = *((_DWORD *)v63 + 1);
  else
    v12 = 0;
  if (v62)
  {
    v13 = *((_DWORD *)v62 + 1);
    if (v10)
      goto LABEL_7;
LABEL_116:
    v14 = 0;
    if (v61)
      goto LABEL_8;
LABEL_117:
    v15 = 0;
    goto LABEL_9;
  }
  v13 = 0;
  if (!v10)
    goto LABEL_116;
LABEL_7:
  v14 = *((_DWORD *)v10 + 1);
  if (!v61)
    goto LABEL_117;
LABEL_8:
  v15 = *((_DWORD *)v61 + 1);
LABEL_9:
  if ((v15 | v14) < 0
    || ((v16 = __OFADD__(v14, v15), v17 = v14 + v15, !v16) ? (v18 = 0) : (v18 = 1),
        v13 < 0
     || (v18 & 1) != 0
     || ((v16 = __OFADD__(v13, v17), v19 = v13 + v17, !v16) ? (v20 = 0) : (v20 = 1),
         v12 < 0 || (v20 & 1) != 0 || (result = (v12 + v19), __OFADD__(v12, v19)))))
  {
    v64 = 0;
    goto LABEL_121;
  }
  if (v63 && (*((_BYTE *)v63 + 16) & 4) == 0 || v62 && (*((_BYTE *)v62 + 16) & 4) == 0)
  {
    v21 = 0;
    goto LABEL_26;
  }
  if (v10)
  {
    v54 = *((_DWORD *)v10 + 4);
    v21 = (v54 >> 2) & 1;
    if (v61 && (v54 & 4) != 0)
      goto LABEL_100;
  }
  else
  {
    if (v61)
    {
LABEL_100:
      v21 = (*((unsigned __int8 *)v61 + 16) >> 2) & 1;
      goto LABEL_26;
    }
    v21 = 1;
  }
LABEL_26:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v21, (uint64_t)v63, v62, (uint64_t)v10, (uint64_t)v61, &v64);
  if (!v64)
  {
LABEL_121:
    __break(0xC471u);
    return result;
  }
  v23 = v61;
  v61 = 0;
  if (!v23)
    goto LABEL_30;
  if (*(_DWORD *)v23 != 2)
  {
    *(_DWORD *)v23 -= 2;
LABEL_30:
    if (v10)
      goto LABEL_31;
    goto LABEL_33;
  }
  WTF::StringImpl::destroy(v23, v22);
  if (v10)
  {
LABEL_31:
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v22);
    else
      *(_DWORD *)v10 -= 2;
  }
LABEL_33:
  v24 = v62;
  v62 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v22);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = v63;
  v63 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v22);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = *(NSObject **)(a1 + 32);
  v27 = os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v27)
  {
    WTF::String::utf8();
    v29 = v59 ? (char *)v59 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v66 = v29;
    _os_log_impl(&dword_1940B8000, v26, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v27 = (uint64_t)v59;
    v59 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 1)
        v27 = WTF::fastFree((WTF *)v27, v28);
      else
        --*(_DWORD *)v27;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v30 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v31 = *v30;
      if ((v31 & 1) != 0)
        break;
      v32 = __ldaxr(v30);
      if (v32 == v31)
      {
        if (!__stxr(v31 | 1, v30))
        {
          v33 = WTF::Logger::observers((WTF::Logger *)v27);
          v34 = *(unsigned int *)(v33 + 12);
          if ((_DWORD)v34)
          {
            v35 = *(uint64_t **)v33;
            v36 = *(_QWORD *)v33 + 8 * v34;
            do
            {
              v37 = *v35;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v67 = 0;
              WTF::String::String((WTF::String *)&v68, v55);
              v69 = 0;
              v38 = *v56;
              if (*v56)
                *(_DWORD *)v38 += 2;
              v70 = v38;
              v71 = 0;
              WTF::String::String((WTF::String *)v72, a6);
              v59 = 0;
              v60 = 0;
              v39 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
              LODWORD(v60) = 4;
              v59 = v39;
              v40 = HIDWORD(v60);
              *((_DWORD *)v39 + 4 * HIDWORD(v60)) = *(_DWORD *)buf;
              v41 = *(_QWORD *)&v66[4];
              if (*(_QWORD *)&v66[4])
                **(_DWORD **)&v66[4] += 2;
              *((_QWORD *)v39 + 2 * v40 + 1) = v41;
              *((_DWORD *)v39 + 4 * (v40 + 1)) = v67;
              v42 = v68;
              if (v68)
                *(_DWORD *)v68 += 2;
              *((_QWORD *)v39 + 2 * (v40 + 1) + 1) = v42;
              *((_DWORD *)v39 + 4 * (v40 + 2)) = v69;
              v43 = v70;
              if (v70)
                *(_DWORD *)v70 += 2;
              *((_QWORD *)v39 + 2 * (v40 + 2) + 1) = v43;
              *((_DWORD *)v39 + 4 * (v40 + 3)) = v71;
              v44 = v72[0];
              if (v72[0])
                *(_DWORD *)v72[0] += 2;
              *((_QWORD *)v39 + 2 * (v40 + 3) + 1) = v44;
              HIDWORD(v60) = v40 + 4;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v37 + 16))(v37, a1, a2, &v59);
              v45 = v59;
              if (HIDWORD(v60))
              {
                v46 = 16 * HIDWORD(v60);
                v47 = (WTF::StringImpl **)((char *)v59 + 8);
                do
                {
                  v48 = *v47;
                  *v47 = 0;
                  if (v48)
                  {
                    if (*(_DWORD *)v48 == 2)
                      WTF::StringImpl::destroy(v48, (WTF::StringImpl *)v28);
                    else
                      *(_DWORD *)v48 -= 2;
                  }
                  v47 += 2;
                  v46 -= 16;
                }
                while (v46);
                v45 = v59;
              }
              if (v45)
              {
                v59 = 0;
                LODWORD(v60) = 0;
                WTF::fastFree(v45, v28);
              }
              v49 = v72[0];
              v72[0] = 0;
              if (v49)
              {
                if (*(_DWORD *)v49 == 2)
                  WTF::StringImpl::destroy(v49, (WTF::StringImpl *)v28);
                else
                  *(_DWORD *)v49 -= 2;
              }
              v50 = v70;
              v70 = 0;
              if (v50)
              {
                if (*(_DWORD *)v50 == 2)
                  WTF::StringImpl::destroy(v50, (WTF::StringImpl *)v28);
                else
                  *(_DWORD *)v50 -= 2;
              }
              v51 = v68;
              v68 = 0;
              if (v51)
              {
                if (*(_DWORD *)v51 == 2)
                  WTF::StringImpl::destroy(v51, (WTF::StringImpl *)v28);
                else
                  *(_DWORD *)v51 -= 2;
              }
              v52 = *(WTF::StringImpl **)&v66[4];
              *(_QWORD *)&v66[4] = 0;
              if (v52)
              {
                if (*(_DWORD *)v52 == 2)
                  WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v28);
                else
                  *(_DWORD *)v52 -= 2;
              }
              ++v35;
            }
            while (v35 != (uint64_t *)v36);
          }
          v53 = __ldxr(v30);
          if (v53 == 1)
          {
            if (!__stlxr(0, v30))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v64;
  v64 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v28);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RTCPeerConnection::chainOperation(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&,WTF::Function<void ()(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF *a2)
{
  WTF *v3;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  *a1 = &off_1E3361358;
  v3 = (WTF *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v5 + 48);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v5 + 24) == 1)
      {
        WebCore::RTCPeerConnection::~RTCPeerConnection((WebCore::RTCPeerConnection *)v5, a2);
        bmalloc::api::isoDeallocate(v6, v7);
      }
      else
      {
        --*(_DWORD *)(v5 + 24);
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCPeerConnection::chainOperation(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&,WTF::Function<void ()(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &)> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF *a2)
{
  WTF *v3;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  *(_QWORD *)this = &off_1E3361358;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v5 + 48);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v5 + 24) == 1)
      {
        WebCore::RTCPeerConnection::~RTCPeerConnection((WebCore::RTCPeerConnection *)v5, a2);
        bmalloc::api::isoDeallocate(v6, v7);
      }
      else
      {
        --*(_DWORD *)(v5 + 24);
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t (***WTF::Detail::CallableWrapper<WebCore::RTCPeerConnection::chainOperation(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&,WTF::Function<void ()(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &)> &&)::$_0,void>::call(uint64_t (***result)()))()
{
  uint64_t (**v1)();
  unint64_t v2;
  uint64_t (*v3)();
  WTF *v4;
  unint64_t v5;
  void *v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t (*v22)();
  uint64_t (*v23)();
  uint64_t v24;
  uint64_t (**v25)();
  uint64_t (*v26)(void);
  WTF::StringImpl *v27;
  _OWORD v28[2];
  uint64_t (***v29)();
  uint64_t v30;
  WTF *v31;
  uint64_t v32;

  v1 = result[1];
  if (*((_DWORD *)v1 + 20) == 5)
  {
    v3 = v1[28];
    v29 = (uint64_t (***)())v1[27];
    v2 = (unint64_t)v29;
    v30 = (uint64_t)v3;
    v4 = (WTF *)v1[29];
    v31 = v4;
    v32 = 0;
    v5 = *((unsigned int *)v1 + 60);
    LODWORD(v32) = *((_DWORD *)v1 + 60);
    *(_OWORD *)(v1 + 27) = 0u;
    v1[29] = 0;
    memset(v28, 0, sizeof(v28));
    *((_DWORD *)v1 + 60) = 0;
    WTF::Deque<std::pair<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::Function<void ()(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>&&)>>,0ul>::destroyAll((unint64_t *)v28);
    while (v3 != (uint64_t (*)())v2)
    {
      v14 = *((_QWORD *)v4 + 2 * v2);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v27 = *(WTF::StringImpl **)&v28[0];
      WebCore::DeferredPromise::reject(v14, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v27, 0);
      v16 = v27;
      v27 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
      v2 += v5 + 1;
      do
        v2 -= v5;
      while (v2 >= v5);
    }
    result = (uint64_t (***)())WTF::Deque<std::pair<WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>,WTF::Function<void ()(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>>&&)>>,0ul>::destroyAll((unint64_t *)&v29);
    if (v4)
      result = (uint64_t (***)())WTF::fastFree(v4, v6);
    *((_BYTE *)v1 + 248) = 0;
    return result;
  }
  v7 = v1[27];
  if (v7 == v1[28])
  {
    *((_BYTE *)v1 + 248) = 0;
    if (!*((_BYTE *)v1 + 256))
      return result;
    v8 = WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v8 = off_1E3361308;
    *(_QWORD *)(v8 + 8) = v1;
    *(_BYTE *)(v8 + 20) = 0;
    *(_DWORD *)(v8 + 16) = 0;
    v9 = WTF::fastMalloc((WTF *)0x10);
    *(_DWORD *)v9 = 1;
    v10 = *((_DWORD *)v1 + 6);
    *(_QWORD *)(v9 + 8) = v1;
    v1[6] = (uint64_t (*)())((char *)v1[6] + 1);
    *((_DWORD *)v1 + 6) = v10 + 2;
    result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
    *result = off_1E3360610;
    result[1] = v1;
    result[2] = (uint64_t (**)())v9;
    result[3] = (uint64_t (**)())v8;
    v29 = result;
    v11 = v1[5];
    if (v11)
    {
      v12 = *((_QWORD *)v11 + 1);
      if (v12)
      {
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v12 - 96) + 104))(v12 - 96);
        WebCore::EventLoopTaskGroup::queueTask(v13, 11, (uint64_t *)&v29);
        result = v29;
        v29 = 0;
        if (!result)
          return result;
      }
      else
      {
        v29 = 0;
      }
      v25 = *result;
    }
    else
    {
      v29 = 0;
      v25 = off_1E3360610;
    }
    v26 = v25[1];
    return (uint64_t (***)())v26();
  }
  v17 = (uint64_t *)((char *)v1[29] + 16 * (_QWORD)v7);
  v29 = (uint64_t (***)())*v17;
  v18 = v17[1];
  *v17 = 0;
  v17[1] = 0;
  v30 = v18;
  v19 = (uint64_t)v1[29] + 16 * (_QWORD)v7;
  v20 = *(_QWORD *)(v19 + 8);
  *(_QWORD *)(v19 + 8) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *(_DWORD **)v19;
  *(_QWORD *)v19 = 0;
  if (v21)
  {
    if (v21[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 16))(v21);
    else
      --v21[4];
  }
  v22 = v1[27];
  if (v22 == (uint64_t (*)())(*((unsigned int *)v1 + 60) - 1))
    v23 = 0;
  else
    v23 = (uint64_t (*)())((char *)v22 + 1);
  v1[27] = v23;
  (*(void (**)(uint64_t, uint64_t (****)()))(*(_QWORD *)v18 + 16))(v18, &v29);
  v24 = v30;
  v30 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  result = v29;
  v29 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 4) != 1)
    {
      --*((_DWORD *)result + 4);
      return result;
    }
    v26 = (*result)[2];
    return (uint64_t (***)())v26();
  }
  return result;
}

uint64_t WebCore::RTCPeerConnectionIceEvent::create@<X0>(int a1@<W0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, WebCore **a5@<X8>)
{
  WebCore *v10;
  WebCore *v11;
  uint64_t v12;
  WebCore *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  _BOOL4 v17;
  unsigned int v18;
  int v19;
  int v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;

  v10 = (WebCore *)bmalloc::api::isoAllocate();
  v11 = v10;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(WebCore **)(v12 + 96)) == 0)
  {
    v10 = (WebCore *)WebCore::threadGlobalDataSlow(v10);
    v13 = v10;
  }
  v14 = *((_QWORD *)v13 + 5);
  if (!v14)
  {
    v10 = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
    v14 = *((_QWORD *)v13 + 5);
  }
  result = WTF::MonotonicTime::now(v10);
  *((_QWORD *)v11 + 1) = 0;
  v17 = *(_QWORD *)(v14 + 968) != 0;
  v18 = *((_DWORD *)v11 + 5) & 0xFFC00000;
  if (a2)
    v19 = 4;
  else
    v19 = 0;
  if (a1)
    v20 = 1376770;
  else
    v20 = 1376768;
  *((_DWORD *)v11 + 4) = 1;
  *((_DWORD *)v11 + 5) = v20 | v19 | v18 | v17;
  v21 = *(_DWORD **)(v14 + 968);
  if (v21)
    *v21 += 2;
  *((_QWORD *)v11 + 3) = v21;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 7) = v16;
  *((_QWORD *)v11 + 8) = 0;
  *(_QWORD *)v11 = off_1E3361B00;
  v22 = *a3;
  *a3 = 0;
  *((_QWORD *)v11 + 9) = v22;
  v23 = *a4;
  *a4 = 0;
  *((_QWORD *)v11 + 10) = v23;
  *a5 = v11;
  return result;
}

void WebCore::RTCPeerConnectionIceEvent::~RTCPeerConnectionIceEvent(WebCore::RTCPeerConnectionIceEvent *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WebCore::RTCIceCandidate *v4;
  bmalloc::api *v5;
  void *v6;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WebCore::RTCIceCandidate *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::RTCIceCandidate::~RTCIceCandidate(v4, a2);
      bmalloc::api::isoDeallocate(v5, v6);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  WebCore::Event::~Event(this, a2);
}

{
  WTF::StringImpl *v3;
  WebCore::RTCIceCandidate *v4;
  bmalloc::api *v5;
  void *v6;
  bmalloc::api *v7;
  void *v8;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WebCore::RTCIceCandidate *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::RTCIceCandidate::~RTCIceCandidate(v4, a2);
      bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v5, v6);
}

void WebCore::RTCRtpReceiver::~RTCRtpReceiver(WebCore::RTCRtpReceiver *this, void *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int **v14;
  unsigned int **v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  WTF *v19;
  WebCore::RTCRtpTransform *v20;
  WTF *v21;
  void *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  WebCore::RTCDtlsTransport *v27;
  _DWORD *v28;
  uint64_t v29;
  bmalloc::api *v30;
  void *v31;
  _QWORD *v32;
  uint64_t v33;
  WebCore::RTCRtpReceiver *v34;
  _QWORD v35[2];
  _QWORD *v36;

  v3 = (uint64_t *)*((_QWORD *)this + 7);
  if (v3 && *v3)
  {
    v35[0] = *((_QWORD *)this + 7);
    v35[1] = v3;
    v4 = *((unsigned int *)v3 + 4);
    if ((_DWORD)v4 == -1)
    {
      v34 = (WebCore::RTCRtpReceiver *)std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::RTCRtpReceiver::~RTCRtpReceiver(v34);
      return;
    }
    v36 = v35;
    ((void (*)(_QWORD **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15RTCRtpTransform12clearBackendEvE3__0JZNS9_12clearBackendEvE3__1EEEEEJRNS0_6__implIJNS6_6RefPtrINS8_21RTCRtpSFrameTransformENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENSF_INS8_21RTCRtpScriptTransformENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOT_DpOT0____fmatrix[v4])(&v36, v3 + 1);
    v5 = *v3;
    *v3 = 0;
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 8);
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        v32 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v32 = off_1E3361EB0;
        v32[1] = v6;
        v35[0] = v32;
        WTF::ensureOnMainThread();
        v33 = v35[0];
        v35[0] = 0;
        if (v33)
          (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      }
    }
  }
  v9 = (unsigned int *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = *((unsigned int *)this + 19);
  if ((_DWORD)v13)
  {
    v14 = (unsigned int **)*((_QWORD *)this + 8);
    v15 = &v14[v13];
    do
    {
      v16 = *v14;
      *v14 = 0;
      if (v16)
      {
        do
        {
          v17 = __ldaxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
        {
          atomic_store(1u, v16);
          WTF::fastFree((WTF *)v16, a2);
        }
      }
      ++v14;
    }
    while (v14 != v15);
  }
  v19 = (WTF *)*((_QWORD *)this + 8);
  if (v19)
  {
    *((_QWORD *)this + 8) = 0;
    *((_DWORD *)this + 18) = 0;
    WTF::fastFree(v19, a2);
  }
  v20 = (WebCore::RTCRtpTransform *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v20)
  {
    WebCore::RTCRtpTransform::~RTCRtpTransform(v20);
    WTF::fastFree(v21, v22);
  }
  v23 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v23)
  {
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v23);
      WTF::fastFree((WTF *)v23, a2);
    }
  }
  v26 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v27 = (WebCore::RTCDtlsTransport *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v27)
  {
    if (*((_DWORD *)v27 + 6) == 1)
    {
      WebCore::RTCDtlsTransport::~RTCDtlsTransport(v27);
      bmalloc::api::isoDeallocate(v30, v31);
    }
    else
    {
      --*((_DWORD *)v27 + 6);
    }
  }
  v28 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v28)
  {
    if (v28[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 16))(v28);
    else
      --v28[6];
  }
  v29 = *((_QWORD *)this + 2);
  if (v29)
  {
    *(_QWORD *)(v29 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::RTCRtpReceiver::~RTCRtpReceiver(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::RTCRtpReceiver::stop(WebCore::RTCRtpReceiver *this)
{
  uint64_t result;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  _QWORD *v13;

  result = *((_QWORD *)this + 5);
  if (result)
  {
    v3 = (uint64_t *)*((_QWORD *)this + 7);
    if (!v3)
    {
      *((_QWORD *)this + 5) = 0;
LABEL_13:
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      return WebCore::MediaStreamTrack::stopTrack(*((_QWORD *)this + 3), 1u);
    }
    if (!*v3)
    {
LABEL_9:
      result = *((_QWORD *)this + 5);
      *((_QWORD *)this + 5) = 0;
      if (!result)
        return WebCore::MediaStreamTrack::stopTrack(*((_QWORD *)this + 3), 1u);
      goto LABEL_13;
    }
    v12[0] = *((_QWORD *)this + 7);
    v12[1] = v3;
    v4 = *((unsigned int *)v3 + 4);
    if ((_DWORD)v4 != -1)
    {
      v13 = v12;
      ((void (*)(_QWORD **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15RTCRtpTransform12clearBackendEvE3__0JZNS9_12clearBackendEvE3__1EEEEEJRNS0_6__implIJNS6_6RefPtrINS8_21RTCRtpSFrameTransformENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENSF_INS8_21RTCRtpScriptTransformENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOT_DpOT0____fmatrix[v4])(&v13, v3 + 1);
      v5 = *v3;
      *v3 = 0;
      if (v5)
      {
        v6 = (unsigned int *)(v5 + 8);
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v6);
          v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v9 = off_1E3361EB0;
          v9[1] = v6;
          v12[0] = v9;
          WTF::ensureOnMainThread();
          v10 = v12[0];
          v12[0] = 0;
          if (v10)
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        }
      }
      goto LABEL_9;
    }
    v11 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::RTCRtpReceiver::setTransform(v11);
  }
  return result;
}

WebCore::RTCRtpTransform *WebCore::RTCRtpReceiver::setTransform@<X0>(WebCore::RTCRtpTransform *result@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  WebCore::RTCRtpTransform **v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  WebCore::RTCRtpTransform *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  WTF *v21;
  void *v22;
  char *v23;
  WebCore::RTCRtpReceiver *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char **v29;

  v4 = (WebCore::RTCRtpTransform **)result;
  v6 = *((_QWORD *)result + 6);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      v8 = *((_QWORD *)result + 10);
      v9 = *(_QWORD *)(v7 + 72);
      v25 = "RTCRtpReceiver";
      v26 = 15;
      v27 = "setTransform";
      v28 = v9;
      if (*(_BYTE *)(v8 + 12))
        result = (WebCore::RTCRtpTransform *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v25);
    }
  }
  v10 = *a2;
  if (!*a2)
    goto LABEL_13;
  v11 = v4[7];
  if (!v11)
    goto LABEL_10;
  v25 = (const char *)v4[7];
  v26 = (uint64_t)v11;
  v12 = *((unsigned int *)v10 + 4);
  if ((_DWORD)v12 == -1)
    goto LABEL_30;
  v29 = &v25;
  result = (WebCore::RTCRtpTransform *)((uint64_t (*)(const char ***, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCoreeqERKNS8_15RTCRtpTransformESB_E3__0JZNS8_eqESB_SB_E3__1EEEEEJRKNS0_6__implIJNS6_6RefPtrINS8_21RTCRtpSFrameTransformENS6_12RawPtrTraitsISI_EENS6_21DefaultRefDerefTraitsISI_EEEENSH_INS8_21RTCRtpScriptTransformENSJ_ISO_EENSL_ISO_EEEEEEEEEEDcOT_DpOT0____fmatrix[v12])(&v29, v10 + 1);
  if ((_DWORD)result)
  {
LABEL_27:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  v10 = *a2;
  if (!*a2)
  {
LABEL_13:
    v14 = (unsigned int *)v4[7];
    if (v14)
    {
      if (*(_QWORD *)v14)
      {
        v25 = (const char *)v4[7];
        v26 = (uint64_t)v14;
        v15 = v14[4];
        if ((_DWORD)v15 == -1)
          goto LABEL_30;
        v29 = &v25;
        result = (WebCore::RTCRtpTransform *)((uint64_t (*)(const char ***, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15RTCRtpTransform12clearBackendEvE3__0JZNS9_12clearBackendEvE3__1EEEEEJRNS0_6__implIJNS6_6RefPtrINS8_21RTCRtpSFrameTransformENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENSF_INS8_21RTCRtpScriptTransformENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOT_DpOT0____fmatrix[v15])(&v29, v14 + 2);
        v16 = *(_QWORD *)v14;
        *(_QWORD *)v14 = 0;
        if (v16)
        {
          v17 = (unsigned int *)(v16 + 8);
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (!v19)
          {
            atomic_store(1u, v17);
            v23 = (char *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v23 = off_1E3361EB0;
            *((_QWORD *)v23 + 1) = v17;
            v25 = v23;
            WTF::ensureOnMainThread();
            result = (WebCore::RTCRtpTransform *)v25;
            v25 = 0;
            if (result)
              result = (WebCore::RTCRtpTransform *)(*(uint64_t (**)(WebCore::RTCRtpTransform *))(*(_QWORD *)result + 8))(result);
          }
        }
        v14 = (unsigned int *)v4[7];
        v4[7] = 0;
        if (!v14)
          goto LABEL_27;
      }
      else
      {
        v4[7] = 0;
      }
      result = (WebCore::RTCRtpTransform *)v14;
LABEL_26:
      WebCore::RTCRtpTransform::~RTCRtpTransform(result);
      result = (WebCore::RTCRtpTransform *)WTF::fastFree(v21, v22);
      goto LABEL_27;
    }
    goto LABEL_27;
  }
LABEL_10:
  v13 = *((unsigned int *)v10 + 4);
  if ((_DWORD)v13 != -1)
  {
    v25 = (const char *)&v29;
    if (((unsigned int (*)(const char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore15RTCRtpTransform10isAttachedEvE3__0JZNKS9_10isAttachedEvE3__1EEEEEJRKNS0_6__implIJNS6_6RefPtrINS8_21RTCRtpSFrameTransformENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENSF_INS8_21RTCRtpScriptTransformENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOT_DpOT0____fmatrix[v13])(&v25, v10 + 1))
    {
      result = (WebCore::RTCRtpTransform *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a3 = 8;
      *((_BYTE *)a3 + 16) = 1;
      return result;
    }
    WebCore::RTCRtpTransform::attachToReceiver(*a2, (WebCore::RTCRtpReceiver *)v4, v4[7]);
    v20 = *a2;
    *a2 = 0;
    result = v4[7];
    v4[7] = (WebCore::RTCRtpTransform *)v20;
    if (!result)
      goto LABEL_27;
    goto LABEL_26;
  }
LABEL_30:
  v24 = (WebCore::RTCRtpReceiver *)std::__throw_bad_variant_access[abi:sn180100]();
  return (WebCore::RTCRtpTransform *)WebCore::RTCRtpReceiver::logger(v24);
}

uint64_t WebCore::RTCRtpReceiver::logger(WebCore::RTCRtpReceiver *this)
{
  return *((_QWORD *)this + 10);
}

char *WebCore::RTCRtpReceiver::logChannel(WebCore::RTCRtpReceiver *this)
{
  return &WebCore::LogWebRTC;
}

const char *WebCore::RTCRtpReceiver::logClassName(WebCore::RTCRtpReceiver *this)
{
  return "RTCRtpReceiver";
}

_QWORD *WebCore::RTCRtpSFrameTransform::create@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v6 = bmalloc::api::isoAllocate();
  v7 = *a2;
  v8 = *((_QWORD *)a2 + 1);
  v9 = *((_BYTE *)a2 + 16);
  v10 = WTF::fastMalloc((WTF *)0x20);
  *(_BYTE *)v10 = 0;
  *(_OWORD *)(v10 + 8) = xmmword_19689B170;
  *(_QWORD *)(v10 + 24) = v6;
  *(_QWORD *)(v6 + 24) = v10;
  if (!*(_BYTE *)(a1 + 274))
  {
    v11 = a1 - 192;
    v12 = *(_QWORD *)(a1 + 512);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if (v13)
        v11 = v13;
    }
    a1 = v11 + 192;
  }
  *(_QWORD *)v6 = &off_1E33A18C0;
  *(_QWORD *)(v6 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v6, (WebCore::ScriptExecutionContext *)a1);
  *(_QWORD *)v6 = &off_1E33A0540;
  *(_QWORD *)(v6 + 16) = 0;
  if (*(_BYTE *)(a1 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x1954A1FFCLL);
  }
  v17 = v6;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(a1 + 128), &v17, (uint64_t)&v16);
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)v6 = &off_1E3361C08;
  *(_QWORD *)(v6 + 32) = &unk_1E3361C80;
  *(_WORD *)(v6 + 56) = 0;
  v14 = WTF::fastMalloc((WTF *)0x70);
  *(_DWORD *)v14 = 1;
  *(_WORD *)(v14 + 4) = 0;
  *(_OWORD *)(v14 + 8) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  *(_QWORD *)(v14 + 88) = 0;
  *(_QWORD *)(v14 + 96) = 0;
  *(_BYTE *)(v14 + 104) = v9;
  *(_QWORD *)(v6 + 64) = v14;
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  *(_BYTE *)(v14 + 72) = v7 == 0;
  *(_QWORD *)(v14 + 80) = v8;
  *a3 = v6;
  return WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v6);
}

double WebCore::RTCRtpSFrameTransformer::create@<D0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  double result;

  v4 = WTF::fastMalloc((WTF *)0x70);
  *(_DWORD *)v4 = 1;
  *(_WORD *)(v4 + 4) = 0;
  result = 0.0;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_BYTE *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 96) = 0;
  *(_QWORD *)(v4 + 80) = 10;
  *(_BYTE *)(v4 + 104) = a1;
  *a2 = v4;
  return result;
}

void WebCore::RTCRtpSFrameTransform::~RTCRtpSFrameTransform(WebCore::RTCRtpSFrameTransform *this, void *a2)
{
  WebCore::EventTarget *v3;
  _DWORD *v4;
  WTF *v5;
  WTF *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  void *v10;
  _DWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  _DWORD *v16;
  _QWORD *v17;
  _QWORD *v18;

  *(_QWORD *)this = &off_1E3361C08;
  *((_QWORD *)this + 4) = &unk_1E3361C80;
  v3 = (WebCore::RTCRtpSFrameTransform *)((char *)this + 32);
  v4 = (_DWORD *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v4)
  {
    if (v4[8] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[8];
  }
  v5 = (WTF *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      v11 = (_DWORD *)*((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      if (v11)
      {
        if (v11[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
        else
          --v11[4];
      }
      v12 = *((_QWORD *)v5 + 1);
      if (v12)
      {
        *(_QWORD *)(v12 + 8) = 0;
        v13 = (unsigned int *)*((_QWORD *)v5 + 1);
        *((_QWORD *)v5 + 1) = 0;
        if (v13)
        {
          do
          {
            v14 = __ldaxr(v13);
            v15 = v14 - 1;
          }
          while (__stlxr(v15, v13));
          if (!v15)
          {
            atomic_store(1u, v13);
            WTF::fastFree((WTF *)v13, a2);
          }
        }
      }
      else
      {
        *((_QWORD *)v5 + 1) = 0;
      }
      WTF::fastFree(v5, a2);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  v6 = (WTF *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      v16 = (_DWORD *)*((_QWORD *)v6 + 1);
      *((_QWORD *)v6 + 1) = 0;
      if (v16)
      {
        if (v16[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 16))(v16);
        else
          --v16[4];
      }
      WTF::fastFree(v6, a2);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v17 = off_1E33617E0;
      v17[1] = v7;
      v18 = v17;
      WTF::ensureOnMainThread();
      if (v18)
        (*(void (**)(_QWORD *))(*v18 + 8))(v18);
    }
  }
  WebCore::EventTarget::~EventTarget(v3, a2);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v10);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::RTCRtpSFrameTransform::~RTCRtpSFrameTransform(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::RTCRtpSFrameTransform::~RTCRtpSFrameTransform(WebCore::RTCRtpSFrameTransform *this, void *a2)
{
  WebCore::RTCRtpSFrameTransform::~RTCRtpSFrameTransform((WebCore::RTCRtpSFrameTransform *)((char *)this - 32), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::RTCRtpSFrameTransform::~RTCRtpSFrameTransform((WebCore::RTCRtpSFrameTransform *)((char *)this - 32), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::RTCRtpSFrameTransform::setEncryptionKey(uint64_t a1, uint64_t a2, uint64_t a3, char a4, WTF::StringImpl *a5)
{
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t result;
  int v19;
  unsigned __int8 v20[8];
  WTF::StringImpl *v21;
  char v22;
  _QWORD v23[4];
  int v24;
  char v25;
  WTF::StringImpl *v26;
  objc_class *v27;

  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(v23, a2);
  if (!v24 && (MEMORY[0x19AEA53F4](v23[0], "HKDF", 4) & 1) != 0)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) != 5)
    {
      result = 96;
      __break(0xC471u);
      return result;
    }
    v10 = *(_QWORD *)(a1 + 64);
    v11 = a2 + 24;
    v12 = (unsigned __int8 *)(v10 + 4);
    if (__ldaxr((unsigned __int8 *)(v10 + 4)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_19;
    }
    MEMORY[0x19AEA534C](v10 + 4);
LABEL_19:
    WebCore::RTCRtpSFrameTransformer::updateEncryptionKey((uint64_t)v20, v10, v11, a3, a4, 1);
    v19 = __ldxr(v12);
    if (v19 == 1)
    {
      if (!__stlxr(0, v12))
        goto LABEL_24;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v10 + 4));
LABEL_24:
    result = (uint64_t)WebCore::DOMPromiseDeferred<void>::settle(a5, (uint64_t)v20);
    if (!v22)
      goto LABEL_14;
    result = (uint64_t)v21;
    v21 = 0;
    if (!result)
      goto LABEL_14;
    goto LABEL_12;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v14 = *(_QWORD *)a5;
  v25 = 33;
  v27 = 0;
  v20[0] = 33;
  v15 = v26;
  if (v26)
    *(_DWORD *)v26 += 2;
  v21 = v15;
  WebCore::DeferredPromise::reject(v14, v20, 0, &v27);
  v17 = v21;
  v21 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  result = (uint64_t)v26;
  v26 = 0;
  if (!result)
    goto LABEL_14;
LABEL_12:
  if (*(_DWORD *)result == 2)
    result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v16);
  else
    *(_DWORD *)result -= 2;
LABEL_14:
  if (v24 != -1)
    return ((uint64_t (*)(unsigned __int8 *, _QWORD *))off_1E33616C0[v24])(v20, v23);
  return result;
}

uint64_t WebCore::RTCRtpSFrameTransformer::setEncryptionKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  unsigned __int8 *v10;
  uint64_t result;
  int v13;

  v10 = (unsigned __int8 *)(a1 + 4);
  if (__ldaxr((unsigned __int8 *)(a1 + 4)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v10))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 4);
LABEL_5:
  result = WebCore::RTCRtpSFrameTransformer::updateEncryptionKey(a5, a1, a2, a3, a4, 1);
  v13 = __ldxr(v10);
  if (v13 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v10);
  }
  if (__stlxr(0, v10))
    return WTF::Lock::unlockSlow((WTF::Lock *)v10);
  return result;
}

uint64_t WebCore::RTCRtpSFrameTransform::setCounterForTesting(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(this + 64) + 96) = a2;
  return this;
}

uint64_t WebCore::RTCRtpSFrameTransform::counterForTesting(WebCore::RTCRtpSFrameTransform *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 8) + 96);
}

uint64_t WebCore::RTCRtpSFrameTransform::keyIdForTesting(WebCore::RTCRtpSFrameTransform *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 8) + 88);
}

unsigned int *WebCore::RTCRtpSFrameTransform::initializeTransformer(unsigned int *result, unsigned int *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  __int128 v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v20;
  int v21;
  uint64_t v22;
  __int128 v23;
  unsigned int *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  int v28;
  uint64_t v29;
  unsigned int *v30;
  __int128 v31;
  __int128 v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)result + 1);
  if (!v3)
    return result;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return result;
  v7 = result;
  v8 = *(unsigned __int8 *)(v4 + 178);
  if (*(_BYTE *)(v4 + 178))
  {
    if (v8 == 1 || v8 == 2)
      ++*(_DWORD *)(v4 + 216);
  }
  else
  {
    *(_DWORD *)(v4 - 264) += 2;
  }
  *((_BYTE *)result + 56) = 1;
  v9 = *((_QWORD *)result + 9);
  if (v9)
    WebCore::InternalReadableStream::lock(*(WTF **)(v9 + 8));
  v10 = *((_QWORD *)v7 + 10);
  if (v10)
    WebCore::InternalWritableStream::lock(*(WTF **)(v10 + 16));
  v11 = *((_QWORD *)v7 + 8);
  *(_BYTE *)(v11 + 72) = a3 == 0;
  if ((*(unsigned int (**)(unsigned int *))(*(_QWORD *)a2 + 40))(a2) == 1)
  {
    v12 = 10;
  }
  else
  {
    *(_BYTE *)(v11 + 104) = 0;
    v12 = 4;
  }
  *(_QWORD *)(v11 + 80) = v12;
  v13 = (unsigned int *)*((_QWORD *)v7 + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  v30 = v13;
  v15 = *(_OWORD *)(v4 + 144);
  v31 = *(_OWORD *)(v4 + 128);
  v32 = v15;
  v16 = a2 + 2;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  v33 = a2;
  v18 = *((_QWORD *)v7 + 3);
  if (!v18)
  {
    v20 = 0;
    goto LABEL_28;
  }
  if (__ldaxr((unsigned __int8 *)v18))
  {
    __clrex();
LABEL_20:
    MEMORY[0x19AEA534C](v18);
    goto LABEL_21;
  }
  if (__stxr(1u, (unsigned __int8 *)v18))
    goto LABEL_20;
LABEL_21:
  if (*(_QWORD *)(v18 + 24))
  {
    ++*(_QWORD *)(v18 + 16);
    v20 = v18;
  }
  else
  {
    v20 = 0;
  }
  v21 = __ldxr((unsigned __int8 *)v18);
  if (v21 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v18))
      goto LABEL_28;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v18);
LABEL_28:
  v22 = WTF::fastMalloc((WTF *)0x60);
  *(_QWORD *)v22 = off_1E3361808;
  *(_QWORD *)(v22 + 16) = v30;
  v23 = v32;
  *(_OWORD *)(v22 + 32) = v31;
  *(_OWORD *)(v22 + 48) = v23;
  v24 = v33;
  v29 = v22;
  v30 = 0;
  v33 = 0;
  *(_QWORD *)(v22 + 64) = v24;
  *(_QWORD *)(v22 + 72) = v20;
  v34 = 0;
  v35 = 0;
  *(_QWORD *)(v22 + 80) = v7;
  (*(void (**)(unsigned int *, uint64_t *))(*(_QWORD *)a2 + 16))(a2, &v29);
  v26 = v29;
  v29 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  result = (unsigned int *)WebCore::RTCRtpSFrameTransform::initializeTransformer(WebCore::RTCRtpTransformBackend &,WebCore::RTCRtpSFrameTransform::Side)::$_0::~$_0((uint64_t)&v30, v25);
  v28 = *(unsigned __int8 *)(v4 + 178);
  if (*(_BYTE *)(v4 + 178))
  {
    if (v28 == 1)
    {
      if (*(_DWORD *)(v4 + 216) == 1)
        return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 - 96) + 40))(v4 - 96);
      else
        --*(_DWORD *)(v4 + 216);
    }
    else if (v28 == 2)
    {
      return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v4 + 216));
    }
  }
  else if (*(_DWORD *)(v4 - 264) == 2)
  {
    if ((*(_WORD *)(v4 - 258) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)(v4 - 288), v27);
  }
  else
  {
    *(_DWORD *)(v4 - 264) -= 2;
  }
  return result;
}

uint64_t WebCore::RTCRtpSFrameTransform::scriptExecutionContext(WebCore::RTCRtpSFrameTransform *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t WebCore::RTCRtpSFrameTransform::initializeTransformer(WebCore::RTCRtpTransformBackend &,WebCore::RTCRtpSFrameTransform::Side)::$_0::~$_0(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;

  v3 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (!v3)
    goto LABEL_14;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v16 = __ldxr((unsigned __int8 *)v3);
    if (v16 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        goto LABEL_14;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    goto LABEL_14;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      goto LABEL_14;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
LABEL_14:
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v8)
  {
    v9 = (unsigned int *)(v8 + 8);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v17 = off_1E3361EB0;
      v17[1] = v9;
      v19 = v17;
      WTF::ensureOnMainThread();
      if (v19)
        (*(void (**)(_QWORD *))(*v19 + 8))(v19);
    }
  }
  v12 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v18 = off_1E33617E0;
      v18[1] = v12;
      v20 = v18;
      WTF::ensureOnMainThread();
      if (v20)
        (*(void (**)(_QWORD *))(*v20 + 8))(v20);
    }
  }
  return a1;
}

WebCore::JSDOMGlobalObject *WebCore::RTCRtpSFrameTransform::createStreams@<X0>(WebCore::JSDOMGlobalObject *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::JSDOMGlobalObject *v6;
  uint64_t v7;
  void (**v8)(WebCore::SimpleReadableStreamSource *__hidden);
  _DWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  WTF::StringImpl *v25;
  void *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  WTF *v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  void *v40;
  _OWORD v41[2];
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;

  v3 = *((_QWORD *)this + 1);
  if (!v3
    || (v4 = *(_QWORD *)(v3 + 8)) == 0
    || (v5 = (uint64_t)this,
        (this = (WebCore::JSDOMGlobalObject *)WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(v4 - 96))) == 0))
  {
    *(_BYTE *)a2 = 8;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 1;
    return this;
  }
  v6 = this;
  v7 = WTF::fastMalloc((WTF *)0x38);
  *(_BYTE *)(v7 + 16) = 0;
  *(_BYTE *)(v7 + 24) = 0;
  *(_DWORD *)(v7 + 32) = 1;
  v8 = off_1E33677B8;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)v7 = off_1E33677B8;
  *(_QWORD *)(v7 + 8) = 0;
  *(_BYTE *)(v7 + 48) = 0;
  v9 = *(_DWORD **)(v5 + 88);
  *(_QWORD *)(v5 + 88) = v7;
  if (v9)
  {
    if (v9[8] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
      v7 = *(_QWORD *)(v5 + 88);
      v8 = *(void (***)(WebCore::SimpleReadableStreamSource *__hidden))v7;
    }
    else
    {
      --v9[8];
      v8 = off_1E33677B8;
    }
  }
  v8[2]((WebCore::SimpleReadableStreamSource *)v7);
  *(_QWORD *)&v41[0] = v7;
  v10 = WebCore::createWrapper<WebCore::ReadableStreamSource,WebCore::ReadableStreamSource>((uint64_t)v6, (WTF::StringImpl **)v41);
  WebCore::ReadableStream::createFromJSValues(v6, v10, 0xAuLL, (uint64_t)&v46);
  v11 = *(_QWORD *)&v41[0];
  *(_QWORD *)&v41[0] = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
  if (!v48)
  {
    v14 = *(unsigned int **)(v5 + 64);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 + 1, v14));
    *(_QWORD *)&v41[0] = v14;
    v16 = *(_QWORD *)(v5 + 88);
    if (v16)
      ++*(_DWORD *)(v16 + 32);
    *((_QWORD *)&v41[0] + 1) = v16;
    v17 = *(_QWORD *)(v5 + 24);
    if (!v17)
    {
      v19 = 0;
      goto LABEL_29;
    }
    if (__ldaxr((unsigned __int8 *)v17))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v17))
    {
      goto LABEL_22;
    }
    MEMORY[0x19AEA534C](v17);
LABEL_22:
    if (*(_QWORD *)(v17 + 24))
    {
      ++*(_QWORD *)(v17 + 16);
      v19 = v17;
    }
    else
    {
      v19 = 0;
    }
    v20 = __ldxr((unsigned __int8 *)v17);
    if (v20 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v17))
      {
LABEL_29:
        v21 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
        *v21 = off_1E3361868;
        v21[1] = *(_QWORD *)&v41[0];
        v22 = *((_QWORD *)&v41[0] + 1);
        v41[0] = 0u;
        v21[2] = v22;
        v21[3] = v19;
        v41[1] = 0u;
        v21[4] = v5;
        v23 = WTF::fastMalloc((WTF *)0x18);
        *(_DWORD *)(v23 + 8) = 1;
        *(_QWORD *)v23 = off_1E3361700;
        *(_QWORD *)(v23 + 16) = v21;
        v42 = (WTF::StringImpl *)v23;
        WebCore::WritableStream::create(v6, &v42, (uint64_t)&v43);
        v25 = v42;
        v42 = 0;
        if (v25)
        {
          if (*((_DWORD *)v25 + 2) == 1)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v25 + 8))(v25);
          else
            --*((_DWORD *)v25 + 2);
        }
        this = (WebCore::JSDOMGlobalObject *)WebCore::RTCRtpSFrameTransform::createStreams(void)::$_0::~$_0((uint64_t)v41, v24);
        if (v45)
        {
          if (v45 != 1)
            goto LABEL_69;
          v27 = v44;
          v44 = 0;
          *(_BYTE *)a2 = v43;
          *(_QWORD *)(a2 + 8) = v27;
          v28 = 1;
          *(_BYTE *)(a2 + 16) = 1;
        }
        else
        {
          if (v48)
            goto LABEL_69;
          v29 = v46;
          v46 = 0;
          v30 = *(WTF **)(v5 + 72);
          *(_QWORD *)(v5 + 72) = v29;
          if (v30)
          {
            if (*(_DWORD *)v30 == 1)
            {
              v33 = (_DWORD *)*((_QWORD *)v30 + 1);
              *((_QWORD *)v30 + 1) = 0;
              if (v33)
              {
                if (v33[4] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 16))(v33);
                else
                  --v33[4];
              }
              this = (WebCore::JSDOMGlobalObject *)WTF::fastFree(v30, v26);
            }
            else
            {
              --*(_DWORD *)v30;
            }
          }
          v31 = v43;
          v43 = 0;
          v32 = *(WTF **)(v5 + 80);
          *(_QWORD *)(v5 + 80) = v31;
          if (v32)
          {
            if (*(_DWORD *)v32 == 1)
            {
              v34 = (_DWORD *)*((_QWORD *)v32 + 2);
              *((_QWORD *)v32 + 2) = 0;
              if (v34)
              {
                if (v34[4] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 16))(v34);
                else
                  --v34[4];
              }
              v35 = *((_QWORD *)v32 + 1);
              if (v35)
              {
                *(_QWORD *)(v35 + 8) = 0;
                v36 = (unsigned int *)*((_QWORD *)v32 + 1);
                *((_QWORD *)v32 + 1) = 0;
                if (v36)
                {
                  do
                  {
                    v37 = __ldaxr(v36);
                    v38 = v37 - 1;
                  }
                  while (__stlxr(v38, v36));
                  if (!v38)
                  {
                    atomic_store(1u, v36);
                    WTF::fastFree((WTF *)v36, v26);
                  }
                }
              }
              else
              {
                *((_QWORD *)v32 + 1) = 0;
              }
              this = (WebCore::JSDOMGlobalObject *)WTF::fastFree(v32, v26);
            }
            else
            {
              --*(_DWORD *)v32;
            }
          }
          if (*(_BYTE *)(v5 + 56))
          {
            WebCore::InternalReadableStream::lock(*(WTF **)(*(_QWORD *)(v5 + 72) + 8));
            this = WebCore::InternalWritableStream::lock(*(WTF **)(*(_QWORD *)(v5 + 80) + 16));
          }
          *(_QWORD *)a2 = 0;
          *(_QWORD *)(a2 + 8) = 0;
          *(_QWORD *)(a2 + 16) = 0;
          v28 = v45;
          if (v45 == -1)
          {
LABEL_46:
            v13 = v48;
            if (v48 == -1)
              return this;
            return (WebCore::JSDOMGlobalObject *)((uint64_t (*)(_OWORD *, uint64_t *))off_1E3361738[v13])(v41, &v46);
          }
        }
        this = (WebCore::JSDOMGlobalObject *)((uint64_t (*)(_OWORD *, uint64_t *))off_1E3361728[v28])(v41, &v43);
        goto LABEL_46;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v17);
    goto LABEL_29;
  }
  if (v48 != 1)
  {
LABEL_69:
    v39 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WebCore::JSDOMGlobalObject *)WebCore::RTCRtpSFrameTransform::createStreams(void)::$_0::~$_0(v39, v40);
  }
  v12 = v47;
  v47 = 0;
  *(_BYTE *)a2 = v46;
  *(_QWORD *)(a2 + 8) = v12;
  v13 = 1;
  *(_BYTE *)(a2 + 16) = 1;
  return (WebCore::JSDOMGlobalObject *)((uint64_t (*)(_OWORD *, uint64_t *))off_1E3361738[v13])(v41, &v46);
}

uint64_t WebCore::RTCRtpSFrameTransform::createStreams(void)::$_0::~$_0(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _DWORD *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  int v13;
  _QWORD *v14;
  _QWORD *v15;

  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
  {
    if (__ldaxr((unsigned __int8 *)v3))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v3))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v3);
LABEL_6:
    v5 = *(_QWORD *)(v3 + 16) - 1;
    *(_QWORD *)(v3 + 16) = v5;
    if (!v5)
    {
      v6 = *(_QWORD *)(v3 + 8);
      v7 = __ldxr((unsigned __int8 *)v3);
      if (v7 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v3))
        {
          if (v6)
            goto LABEL_14;
LABEL_13:
          WTF::fastFree((WTF *)v3, a2);
          goto LABEL_14;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v3);
      if (v6)
        goto LABEL_14;
      goto LABEL_13;
    }
    v13 = __ldxr((unsigned __int8 *)v3);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        goto LABEL_14;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
LABEL_14:
  v8 = *(_DWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v8)
  {
    if (v8[8] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[8];
  }
  v9 = *(unsigned int **)a1;
  *(_QWORD *)a1 = 0;
  if (v9)
  {
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v14 = off_1E33617E0;
      v14[1] = v9;
      v15 = v14;
      WTF::ensureOnMainThread();
      if (v15)
        (*(void (**)(_QWORD *))(*v15 + 8))(v15);
    }
  }
  return a1;
}

BOOL WebCore::RTCRtpSFrameTransform::virtualHasPendingActivity(WebCore::RTCRtpSFrameTransform *this)
{
  uint64_t v1;

  if ((*((_BYTE *)this + 56) || *((_BYTE *)this + 57)) && (v1 = *((_QWORD *)this + 6), (v1 & 0x1000000000000) != 0))
    return *(_DWORD *)((v1 & 0xFFFFFFFFFFFFLL) + 0x1C) != 0;
  else
    return 0;
}

void WebCore::RTCRtpSFrameTransformErrorEvent::~RTCRtpSFrameTransformErrorEvent(WebCore::RTCRtpSFrameTransformErrorEvent *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

double WebCore::RTCRtpSFrameTransformer::RTCRtpSFrameTransformer(uint64_t a1, char a2)
{
  double result;

  *(_DWORD *)a1 = 1;
  *(_WORD *)(a1 + 4) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 10;
  *(_BYTE *)(a1 + 104) = a2;
  return result;
}

{
  double result;

  *(_DWORD *)a1 = 1;
  *(_WORD *)(a1 + 4) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 10;
  *(_BYTE *)(a1 + 104) = a2;
  return result;
}

void WebCore::RTCRtpSFrameTransformer::~RTCRtpSFrameTransformer(WebCore::RTCRtpSFrameTransformer *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  char *v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;

  v3 = *((unsigned int *)this + 17);
  v4 = (WTF *)*((_QWORD *)this + 7);
  if ((_DWORD)v3)
  {
    v5 = 24 * v3;
    v6 = (char *)v4 + 8;
    do
    {
      v7 = *(WTF **)v6;
      if (*(_QWORD *)v6)
      {
        *(_QWORD *)v6 = 0;
        *((_DWORD *)v6 + 2) = 0;
        WTF::fastFree(v7, a2);
      }
      v6 += 24;
      v5 -= 24;
    }
    while (v5);
    v4 = (WTF *)*((_QWORD *)this + 7);
  }
  if (v4)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v4, a2);
  }
  v8 = (WTF *)*((_QWORD *)this + 5);
  if (v8)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = (WTF *)*((_QWORD *)this + 3);
  if (v9)
  {
    *((_QWORD *)this + 3) = 0;
    *((_DWORD *)this + 8) = 0;
    WTF::fastFree(v9, a2);
  }
  v10 = (WTF *)*((_QWORD *)this + 1);
  if (v10)
  {
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 0;
    WTF::fastFree(v10, a2);
  }
}

uint64_t WebCore::RTCRtpSFrameTransformer::updateEncryptionKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  uint64_t v17;
  int v18;
  WTF *v19;
  WTF *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  int32x2_t *v27;
  uint64_t v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  WTF *v36;
  uint64_t v38;
  uint64_t v39;
  WTF *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;

  if (*(_DWORD *)(a3 + 12) <= 0xFu)
    goto LABEL_37;
  WebCore::deriveHDKFBits(0x60uLL, (uint64_t)&v49);
  v12 = v51;
  if (!v51)
  {
    WebCore::RTCRtpSFrameTransformer::computeAuthenticationKey(a3, (uint64_t)&v46);
    if (v48)
    {
      if (v48 != 1)
        goto LABEL_38;
      v14 = v47;
      v47 = 0;
      *(_BYTE *)a1 = v46;
      *(_QWORD *)(a1 + 8) = v14;
      v15 = 1;
      *(_BYTE *)(a1 + 16) = 1;
LABEL_35:
      ((void (*)(uint64_t *, uint64_t *))off_1E3361748[v15])(&v43, &v46);
      return ((uint64_t (*)(uint64_t *, uint64_t *))off_1E3361748[v12])(&v46, &v49);
    }
    WebCore::RTCRtpSFrameTransformer::computeEncryptionKey(a3, (uint64_t)&v43);
    if (v45)
    {
      if (v45 != 1)
        goto LABEL_38;
      v17 = v44;
      v44 = 0;
      *(_BYTE *)a1 = v43;
      *(_QWORD *)(a1 + 8) = v17;
      v18 = 1;
      *(_BYTE *)(a1 + 16) = 1;
LABEL_33:
      ((void (*)(uint64_t *, uint64_t *))off_1E3361748[v18])(&v39, &v43);
LABEL_34:
      v15 = v48;
      if (v48 == -1)
        return ((uint64_t (*)(uint64_t *, uint64_t *))off_1E3361748[v12])(&v46, &v49);
      goto LABEL_35;
    }
    if ((a6 & 1) != 0)
    {
      if (!a5)
        a4 = *(unsigned int *)(a2 + 68);
      v19 = 0;
      *(_QWORD *)(a2 + 88) = a4;
      v20 = (WTF *)*(unsigned int *)(a3 + 12);
      v40 = 0;
      v41 = 0;
      v39 = a4;
      v42 = (int)v20;
      if ((_DWORD)v20)
      {
        v19 = (WTF *)WTF::fastMalloc(v20);
        v41 = (int)v20;
        v40 = v19;
        memcpy(v19, *(const void **)a3, *(unsigned int *)(a3 + 12));
      }
      v21 = *(unsigned int *)(a2 + 68);
      if ((_DWORD)v21 == *(_DWORD *)(a2 + 64))
      {
        v22 = WTF::Vector<WebCore::RTCRtpSFrameTransformer::IdentifiedKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)(a2 + 56), v21 + 1, (unint64_t)&v39);
        v23 = *(_QWORD *)(a2 + 56) + 24 * *(unsigned int *)(a2 + 68);
        v24 = *(_QWORD *)v22;
        *(_QWORD *)(v23 + 8) = 0;
        *(_QWORD *)(v23 + 16) = 0;
        *(_QWORD *)v23 = v24;
        v25 = *(_QWORD *)(v22 + 8);
        *(_QWORD *)(v22 + 8) = 0;
        *(_QWORD *)(v23 + 8) = v25;
        LODWORD(v25) = *(_DWORD *)(v22 + 16);
        *(_DWORD *)(v22 + 16) = 0;
        *(_DWORD *)(v23 + 16) = v25;
        LODWORD(v25) = *(_DWORD *)(v22 + 20);
        *(_DWORD *)(v22 + 20) = 0;
        *(_DWORD *)(v23 + 20) = v25;
        v26 = v40;
        ++*(_DWORD *)(a2 + 68);
        if (v26)
        {
          v40 = 0;
          v41 = 0;
          WTF::fastFree(v26, v16);
        }
      }
      else
      {
        v27 = (int32x2_t *)(*(_QWORD *)(a2 + 56) + 24 * v21);
        *v27 = (int32x2_t)a4;
        v27[1] = (int32x2_t)v19;
        v27[2] = vdup_n_s32(v20);
        ++*(_DWORD *)(a2 + 68);
      }
LABEL_22:
      v28 = v49;
      v29 = v50;
      v49 = 0;
      v50 = 0;
      v30 = *(WTF **)(a2 + 40);
      if (v30)
      {
        *(_QWORD *)(a2 + 40) = 0;
        *(_DWORD *)(a2 + 48) = 0;
        WTF::fastFree(v30, v16);
      }
      *(_QWORD *)(a2 + 40) = v28;
      *(_QWORD *)(a2 + 48) = v29;
      if (v48)
        goto LABEL_38;
      v31 = v46;
      v32 = v47;
      v46 = 0;
      v47 = 0;
      v33 = *(WTF **)(a2 + 8);
      if (v33)
      {
        *(_QWORD *)(a2 + 8) = 0;
        *(_DWORD *)(a2 + 16) = 0;
        WTF::fastFree(v33, v16);
      }
      *(_QWORD *)(a2 + 8) = v31;
      *(_QWORD *)(a2 + 16) = v32;
      if (v45)
        goto LABEL_38;
      v34 = v43;
      v35 = v44;
      v43 = 0;
      v44 = 0;
      v36 = *(WTF **)(a2 + 24);
      if (v36)
      {
        *(_QWORD *)(a2 + 24) = 0;
        *(_DWORD *)(a2 + 32) = 0;
        WTF::fastFree(v36, v16);
      }
      *(_QWORD *)(a2 + 24) = v34;
      *(_QWORD *)(a2 + 32) = v35;
      if (*(_QWORD *)(a2 + 80) >= 0x21uLL)
        *(_QWORD *)(a2 + 80) = 32;
      *(_BYTE *)(a2 + 5) = 1;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)a1 = 0;
      v18 = v45;
      if (v45 == -1)
        goto LABEL_34;
      goto LABEL_33;
    }
    if (a5)
    {
      *(_QWORD *)(a2 + 88) = a4;
      goto LABEL_22;
    }
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (v51 == 1)
  {
    v13 = v50;
    v50 = 0;
    *(_BYTE *)a1 = v49;
    *(_QWORD *)(a1 + 8) = v13;
    *(_BYTE *)(a1 + 16) = 1;
    return ((uint64_t (*)(_QWORD, _QWORD))off_1E3361748[v12])(&v46, &v49);
  }
LABEL_38:
  v38 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::RTCRtpSFrameTransformer::decryptFrame(v38);
}

unint64_t WebCore::RTCRtpSFrameTransformer::decryptFrame(unint64_t result, uint64_t a2, uint64_t (**a3)(), unint64_t a4)
{
  WTF *v4;
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unint64_t v9;
  int v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  size_t v37;
  size_t v38;
  size_t v39;
  size_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  WTF *v44;
  unsigned __int8 *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  uint64_t v51;
  _DWORD *v52;
  _DWORD *v53;
  WTF *v54;
  WTF *v55;
  int v56;
  unsigned int v57;
  WTF *v58;
  int v59;
  unsigned int v60;
  WTF *v61;
  _DWORD *v62;
  unsigned int v63;
  char v64;

  v6 = a4;
  v7 = (unsigned __int8 *)a3;
  v9 = result;
  v10 = *(unsigned __int8 *)(a2 + 104);
  if (v10 == 2)
  {
    if (!a4)
      goto LABEL_97;
    v16 = 3;
    if ((*(_BYTE *)a3 & 1) == 0)
      v16 = 10;
    v6 = a4 - v16;
    if (a4 < v16)
      goto LABEL_97;
    v4 = 0;
    v7 = (unsigned __int8 *)a3 + v16;
  }
  else
  {
    if (v10 != 1)
      goto LABEL_16;
    result = WebCore::computeH264PrefixOffset(a3, a4);
    v11 = v6 >= result;
    v6 -= result;
    if (!v11)
      goto LABEL_97;
    v7 += result;
    v12 = v6 - 3;
    if (v6 == 3)
      goto LABEL_16;
    v13 = 0;
    v14 = 1;
    do
    {
      if (v6 == v13)
        goto LABEL_97;
      v15 = v13 + 1;
      if (!v7[v13])
      {
        if (v6 <= v15)
          goto LABEL_97;
        if (!v7[v13 + 1])
        {
          if (v6 <= v13 + 2)
            goto LABEL_97;
          if (v7[v13 + 2] == 3)
            break;
        }
      }
      v14 = v15 < v12;
      ++v13;
    }
    while (v12 != v15);
    if (v14)
    {
      result = (unint64_t)WebCore::fromRbsp((WTF *)v6, v7, (uint64_t)&v61);
      v4 = v61;
      v6 = HIDWORD(v62);
      v7 = (unsigned __int8 *)v61;
    }
    else
    {
LABEL_16:
      v4 = 0;
    }
  }
  v5 = (unsigned __int8 *)(a2 + 4);
  if (__ldaxr((unsigned __int8 *)(a2 + 4)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_26;
  }
  result = MEMORY[0x19AEA534C](a2 + 4);
LABEL_26:
  if (!v6)
  {
LABEL_97:
    __break(1u);
LABEL_98:
    result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)a2);
    goto LABEL_49;
  }
  v18 = v7 + 1;
  if ((char)*v7 < 0)
    goto LABEL_47;
  v19 = v6 - 1;
  v20 = (*v7 >> 4) + 1;
  if (v6 - 1 <= v20)
    goto LABEL_47;
  v21 = *v7 & 7;
  if ((*v7 & 8) != 0)
  {
    v25 = (v21 + 1);
    if (v19 <= v20 + v25)
    {
LABEL_47:
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)v9 = 2;
      *(_QWORD *)(v9 + 16) = 0;
      goto LABEL_48;
    }
    v26 = v19 - v25;
    if (v19 < v25)
      goto LABEL_97;
    v21 = 0;
    v27 = &v18[v25];
    do
    {
      v28 = *v18++;
      v21 = v28 | (unint64_t)(v21 << 8);
      --v25;
    }
    while (v25);
    if (v26 < v20)
      goto LABEL_97;
    v22 = 0;
    v23 = (_BYTE)v27 + (*v7 >> 4) + 1;
    do
    {
      v29 = *v27++;
      v22 = v29 | (v22 << 8);
      --v20;
    }
    while (v20);
  }
  else
  {
    v22 = 0;
    v23 = (_BYTE)v18 + (*v7 >> 4) + 1;
    do
    {
      v24 = *v18++;
      v22 = v24 | (v22 << 8);
      --v20;
    }
    while (v20);
  }
  v30 = *(_QWORD *)(a2 + 96);
  if (v22 <= v30 && v30 != 0)
    goto LABEL_47;
  *(_QWORD *)(a2 + 96) = v22;
  if (v21 != *(_QWORD *)(a2 + 88))
  {
    v33 = *(unsigned int *)(a2 + 68);
    if (!(_DWORD)v33)
    {
LABEL_60:
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)v9 = 0;
      *(_QWORD *)(v9 + 16) = v21;
      goto LABEL_48;
    }
    v34 = 0;
    v35 = *(_QWORD *)(a2 + 56) + 8;
    while (*(_QWORD *)(v35 - 8) != v21)
    {
      ++v34;
      v35 += 24;
      if (v33 == v34)
        goto LABEL_60;
    }
    if (v34 >= v33)
    {
      __break(0xC471u);
LABEL_103:
      JUMPOUT(0x1954A39ACLL);
    }
    WebCore::RTCRtpSFrameTransformer::updateEncryptionKey((uint64_t)&v61, a2, v35, v21, 1, 0);
    if ((_BYTE)v63)
    {
      result = (unint64_t)v62;
      if (v62)
      {
        v47 = *v62;
        *v62 += 2;
        *(_BYTE *)v9 = 3;
        *(_QWORD *)(v9 + 8) = result;
        *(_QWORD *)(v9 + 16) = 0;
        *(_DWORD *)(v9 + 24) = 1;
        if (v47)
        {
          *(_DWORD *)result = v47;
          goto LABEL_49;
        }
        goto LABEL_98;
      }
      *(_BYTE *)v9 = 3;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
LABEL_48:
      *(_DWORD *)(v9 + 24) = 1;
      goto LABEL_49;
    }
  }
  if (v6 < *(_QWORD *)(a2 + 80) + (unint64_t)(v23 - (_BYTE)v7))
    goto LABEL_47;
  result = WebCore::computeIV((uint64_t *)&v58, *(_QWORD *)(a2 + 96), a2 + 40);
  v36 = *(_QWORD *)(a2 + 80);
  if (v6 < v36)
    goto LABEL_97;
  v37 = (v23 - (_BYTE)v7);
  v38 = v6 - v37;
  if (v6 < v37)
    goto LABEL_97;
  v39 = v6 - v37 - v36;
  v40 = v6 - (v23 - (_BYTE)v7);
  if (v39 != -1)
  {
    v40 = v6 - v37 - v36;
    if (v38 < v39)
      goto LABEL_97;
  }
  result = (unint64_t)WebCore::RTCRtpSFrameTransformer::computeEncryptedDataSignature((const void **)&v58, v7, v37, &v7[v37], v40, a2 + 8, &v55);
  v41 = *(_QWORD *)(a2 + 80);
  if (v41)
  {
    v42 = &v7[v6];
    v43 = v57;
    v44 = v55;
    if (v36 >= v57)
    {
      v45 = &v42[-v36];
      v46 = *(_QWORD *)(a2 + 80);
      while (v43)
      {
        if (*(unsigned __int8 *)v44 != *v45)
          goto LABEL_92;
        v44 = (WTF *)((char *)v44 + 1);
        ++v45;
        --v43;
        if (!--v46)
          goto LABEL_82;
      }
      goto LABEL_101;
    }
    v48 = -(uint64_t)v36;
    v49 = *(_QWORD *)(a2 + 80);
    while (1)
    {
      if (!v43)
        goto LABEL_101;
      if (!v48)
        goto LABEL_97;
      if (*(unsigned __int8 *)v44 != v42[v48])
        break;
      v44 = (WTF *)((char *)v44 + 1);
      ++v48;
      --v43;
      if (!--v49)
        goto LABEL_82;
    }
LABEL_92:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)v9 = 1;
    *(_QWORD *)(v9 + 16) = 0;
    *(_DWORD *)(v9 + 24) = 1;
  }
  else
  {
LABEL_82:
    v50 = v6 - (v37 + v41);
    if (v50 != -1)
    {
      v11 = v38 >= v50;
      v38 = v50;
      if (!v11)
        goto LABEL_97;
    }
    WebCore::transformAESCTR(1, (unint64_t **)&v58, v60, a2 + 24, (char *)&v7[v37], v38, (uint64_t)&v61);
    v51 = v63;
    if (v63)
    {
      if (v63 != 1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_101:
        __break(0xC471u);
        goto LABEL_103;
      }
      v52 = v62;
      if (v62)
        *v62 += 2;
      *(_BYTE *)v9 = 3;
      *(_QWORD *)(v9 + 8) = v52;
      *(_QWORD *)(v9 + 16) = 0;
    }
    else
    {
      *(_QWORD *)v9 = v61;
      v53 = v62;
      v61 = 0;
      v62 = 0;
      *(_QWORD *)(v9 + 8) = v53;
    }
    *(_DWORD *)(v9 + 24) = v51;
    ((void (*)(char *, WTF **))off_1E3361748[v51])(&v64, &v61);
  }
  v54 = v55;
  if (v55)
  {
    v55 = 0;
    v56 = 0;
    WTF::fastFree(v54, (void *)a2);
  }
  result = (unint64_t)v58;
  if (v58)
  {
    v58 = 0;
    v59 = 0;
    result = WTF::fastFree((WTF *)result, (void *)a2);
  }
LABEL_49:
  v32 = __ldxr(v5);
  if (v32 == 1)
  {
    if (!__stlxr(0, v5))
    {
      if (!v4)
        return result;
      return WTF::fastFree(v4, (void *)a2);
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (v4)
    return WTF::fastFree(v4, (void *)a2);
  return result;
}

uint64_t WebCore::computeIV(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x10);
  a1[1] = 0x1000000010;
  *a1 = result;
  if (!*(_DWORD *)(a3 + 12))
    goto LABEL_14;
  *(_BYTE *)result = **(_BYTE **)a3;
  if (*(_DWORD *)(a3 + 12) < 2u)
    goto LABEL_14;
  *(_BYTE *)(result + 1) = *(_BYTE *)(*(_QWORD *)a3 + 1);
  if (*(_DWORD *)(a3 + 12) < 3u)
    goto LABEL_14;
  *(_BYTE *)(result + 2) = *(_BYTE *)(*(_QWORD *)a3 + 2);
  if (*(_DWORD *)(a3 + 12) < 4u)
    goto LABEL_14;
  *(_BYTE *)(result + 3) = *(_BYTE *)(*(_QWORD *)a3 + 3);
  if (*(_DWORD *)(a3 + 12) <= 0xBu
    || (*(_BYTE *)(result + 11) = *(_BYTE *)(*(_QWORD *)a3 + 11) ^ a2, *(_DWORD *)(a3 + 12) < 0xBu)
    || (*(_BYTE *)(result + 10) = *(_BYTE *)(*(_QWORD *)a3 + 10) ^ BYTE1(a2), *(_DWORD *)(a3 + 12) < 0xAu)
    || (*(_BYTE *)(result + 9) = *(_BYTE *)(*(_QWORD *)a3 + 9) ^ BYTE2(a2), *(_DWORD *)(a3 + 12) < 9u)
    || (*(_BYTE *)(result + 8) = *(_BYTE *)(*(_QWORD *)a3 + 8) ^ BYTE3(a2), *(_DWORD *)(a3 + 12) < 8u)
    || (*(_BYTE *)(result + 7) = *(_BYTE *)(*(_QWORD *)a3 + 7) ^ BYTE4(a2), *(_DWORD *)(a3 + 12) < 7u)
    || (*(_BYTE *)(result + 6) = *(_BYTE *)(*(_QWORD *)a3 + 6) ^ BYTE5(a2), *(_DWORD *)(a3 + 12) < 6u)
    || (*(_BYTE *)(result + 5) = *(_BYTE *)(*(_QWORD *)a3 + 5) ^ BYTE6(a2), *(_DWORD *)(a3 + 12) < 5u))
  {
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x1954A3B4CLL);
  }
  *(_BYTE *)(result + 4) = *(_BYTE *)(*(_QWORD *)a3 + 4) ^ HIBYTE(a2);
  *(_DWORD *)(result + 12) = 0;
  return result;
}

WTF *WebCore::RTCRtpSFrameTransformer::encryptFrame(uint64_t a1, uint64_t a2, uint64_t (**a3)(), unint64_t a4)
{
  int v8;
  size_t v9;
  void *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t i;
  unsigned __int8 *v14;
  WTF *result;
  WTF *v17;
  unint64_t v18;
  WTF *v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  _BYTE *v24;
  char v25;
  char v26;
  int v27;
  char v28;
  unint64_t v29;
  unsigned __int8 v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64x2_t v35;
  int64x2_t v36;
  unint64_t v37;
  int64x2_t v38;
  int32x2_t v39;
  uint64_t v40;
  unsigned __int8 v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64x2_t v47;
  _BYTE *v48;
  int64x2_t v49;
  int64x2_t v50;
  int32x2_t v51;
  size_t v52;
  int v53;
  _DWORD *v54;
  int v55;
  _BYTE *v56;
  WTF *v57;
  void *v58;
  int v59;
  WTF *v60;
  int v61;
  void *v62;
  int v63;
  WTF *v64;
  uint64_t v65;
  WTF *v66;
  int v67;
  unsigned int v68;
  void *__src;
  _DWORD *v70;
  WTF *v71;

  v8 = *(unsigned __int8 *)(a2 + 104);
  if (v8 == 2)
  {
    if (!a4 || ((*(_BYTE *)a3 & 1) != 0 ? (v9 = 3) : (v9 = 10), a4 < v9))
    {
      __break(1u);
LABEL_71:
      result = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_72;
    }
    v12 = WTF::fastMalloc((WTF *)v9);
    v11 = (WTF *)v12;
    for (i = 0; i != v9; ++i)
      *(_BYTE *)(v12 + i) = *((_BYTE *)a3 + i);
    v10 = (void *)v12;
  }
  else if (v8 == 1)
  {
    WebCore::computeH264PrefixBuffer(a3, a4, (uint64_t)&__src);
    v10 = __src;
    v9 = (size_t)v70;
    v11 = v71;
  }
  else
  {
    v11 = 0;
    v9 = 0;
    v10 = 0;
  }
  v14 = (unsigned __int8 *)(a2 + 4);
  if (__ldaxr((unsigned __int8 *)(a2 + 4)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v14))
  {
    goto LABEL_17;
  }
  MEMORY[0x19AEA534C](a2 + 4);
LABEL_17:
  result = (WTF *)WebCore::computeIV((uint64_t *)&v66, *(_QWORD *)(a2 + 96), a2 + 40);
  v17 = 0;
  v18 = a4 + v9 + *(_QWORD *)(a2 + 80);
  v64 = 0;
  LODWORD(v65) = 0;
  v19 = (WTF *)(v18 + 17);
  HIDWORD(v65) = v18 + 17;
  if (v18 != -17)
  {
    if ((unint64_t)v19 >> 32)
    {
LABEL_72:
      __break(0xC471u);
      return result;
    }
    v17 = (WTF *)WTF::fastMalloc(v19);
    LODWORD(v65) = (_DWORD)v19;
    v64 = v17;
  }
  if (v10)
    memcpy(v17, v10, v9);
  v20 = 0;
  v21 = *(_QWORD *)(a2 + 88);
  v22 = *(_QWORD *)(a2 + 96);
  do
  {
    ++v20;
    v23 = v22 > 0xFF;
    v22 >>= 8;
  }
  while (v23);
  v24 = (char *)v17 + v9;
  v25 = 16 * v20 - 16;
  if (v21 >= 8)
  {
    v27 = 0;
    do
    {
      v28 = v27++;
      v23 = v21 > 0xFF;
      v21 >>= 8;
    }
    while (v23);
    v26 = v25 | v28 | 8;
  }
  else
  {
    v26 = v25 | v21;
  }
  *v24 = v26;
  v29 = *(_QWORD *)(a2 + 88);
  if (v29 < 8)
  {
    v40 = 1;
  }
  else
  {
    v30 = 0;
    v31 = -8;
    v32 = 1;
    v33 = *(_QWORD *)(a2 + 88);
    do
    {
      ++v30;
      ++v32;
      v31 += 8;
      v23 = v33 > 0xFF;
      v33 >>= 8;
    }
    while (v23);
    v34 = 0;
    v35 = (uint64x2_t)vdupq_n_s64((unint64_t)v30 - 1);
    v36 = (int64x2_t)xmmword_19688B1A0;
    v37 = v32 & 0xFFFFFFFFFFFFFFFELL;
    v38 = vdupq_n_s64(2uLL);
    do
    {
      v39 = vmovn_s64((int64x2_t)vcgeq_u64(v35, (uint64x2_t)v36));
      if ((v39.i8[0] & 1) != 0)
        v24[v34 + 1] = v29 >> (v31 & 0xF8);
      if ((v39.i8[4] & 1) != 0)
        v24[v34 + 2] = v29 >> (8 * ((v34 ^ 0xFEu) + v30));
      v34 += 2;
      v36 = vaddq_s64(v36, v38);
      v31 -= 16;
    }
    while (v37 != v34);
    v40 = v30 + 1;
  }
  v41 = 0;
  v42 = *(_QWORD *)(a2 + 96);
  v43 = -8;
  v44 = 1;
  v45 = v42;
  do
  {
    ++v41;
    ++v44;
    v43 += 8;
    v23 = v45 > 0xFF;
    v45 >>= 8;
  }
  while (v23);
  v46 = 0;
  v47 = (uint64x2_t)vdupq_n_s64((unint64_t)v41 - 1);
  v48 = &v24[v40];
  v49 = (int64x2_t)xmmword_19688B1A0;
  v50 = vdupq_n_s64(2uLL);
  do
  {
    v51 = vmovn_s64((int64x2_t)vcgeq_u64(v47, (uint64x2_t)v49));
    if ((v51.i8[0] & 1) != 0)
      v48[v46] = v42 >> (v43 & 0xF8);
    if ((v51.i8[4] & 1) != 0)
      v48[v46 + 1] = v42 >> (8 * ((v46 ^ 0xFEu) + v41));
    v46 += 2;
    v49 = vaddq_s64(v49, v50);
    v43 -= 16;
  }
  while ((v44 & 0xFFFFFFFFFFFFFFFELL) != v46);
  v52 = v40 + v41;
  v53 = v40 + v41 + HIDWORD(v65) - 17;
  HIDWORD(v65) = v53;
  WebCore::transformAESCTR(0, (unint64_t **)&v66, v68, a2 + 24, (char *)a3, a4, (uint64_t)&__src);
  if ((_DWORD)v71)
  {
    if ((_DWORD)v71 == 1)
    {
      v54 = v70;
      if (v70)
        *v70 += 2;
      *(_BYTE *)a1 = 3;
      *(_QWORD *)(a1 + 8) = v54;
      *(_QWORD *)(a1 + 16) = 0;
      v55 = 1;
      *(_DWORD *)(a1 + 24) = 1;
LABEL_58:
      ((void (*)(void **, void **))off_1E3361748[v55])(&v62, &__src);
      goto LABEL_59;
    }
    goto LABEL_71;
  }
  memcpy(&v24[v52], __src, a4);
  WebCore::RTCRtpSFrameTransformer::computeEncryptedDataSignature((const void **)&v66, v24, v52, &v24[v52], a4, a2 + 8, &v62);
  v56 = &v24[v52 + a4];
  v57 = (WTF *)v62;
  memcpy(v56, v62, *(_QWORD *)(a2 + 80));
  if (*(_BYTE *)(a2 + 104) == 1)
  {
    WebCore::toRbsp((uint64_t)&v64, v9);
    v53 = HIDWORD(v65);
    v57 = (WTF *)v62;
  }
  ++*(_QWORD *)(a2 + 96);
  *(_QWORD *)a1 = v64;
  v59 = v65;
  v64 = 0;
  v65 = 0;
  *(_DWORD *)(a1 + 8) = v59;
  *(_DWORD *)(a1 + 12) = v53;
  *(_DWORD *)(a1 + 24) = 0;
  if (v57)
  {
    v62 = 0;
    v63 = 0;
    WTF::fastFree(v57, v58);
  }
  v55 = (int)v71;
  if ((_DWORD)v71 != -1)
    goto LABEL_58;
LABEL_59:
  v60 = v64;
  if (v64)
  {
    v64 = 0;
    LODWORD(v65) = 0;
    WTF::fastFree(v60, v58);
  }
  result = v66;
  if (v66)
  {
    v66 = 0;
    v67 = 0;
    result = (WTF *)WTF::fastFree(result, v58);
  }
  v61 = __ldxr(v14);
  if (v61 == 1)
  {
    if (!__stlxr(0, v14))
    {
      if (!v11)
        return result;
      return (WTF *)WTF::fastFree(v11, v58);
    }
  }
  else
  {
    __clrex();
  }
  result = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)(a2 + 4));
  if (v11)
    return (WTF *)WTF::fastFree(v11, v58);
  return result;
}

WTF *WebCore::RTCRtpSFrameTransformer::transform@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X1>, unint64_t a3@<X2>, unint64_t a4@<X8>)
{
  WTF *result;

  if (*(_BYTE *)(a1 + 5))
  {
    if (*(_BYTE *)(a1 + 72))
      return WebCore::RTCRtpSFrameTransformer::encryptFrame(a4, a1, a2, a3);
    else
      return (WTF *)WebCore::RTCRtpSFrameTransformer::decryptFrame(a4, a1, a2, a3);
  }
  else
  {
    result = (WTF *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_DWORD *)(a4 + 24) = 1;
  }
  return result;
}

void WebCore::RTCRtpScriptTransform::create(WebCore::JSDOMGlobalObject *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unsigned int *v25;
  WTF *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  _QWORD *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  int v35;
  WTF *v36;
  int v37;
  uint64_t *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t *v42;
  uint64_t v43;
  WebCore::RTCRtpScriptTransform *v44;
  WTF *v45;
  uint64_t v46;
  int v47;
  unsigned int *v48;
  uint64_t v49;
  int v50;
  WTF *v51;
  uint64_t v52;
  _QWORD v53[2];
  char v54;
  uint64_t *v55;

  v6 = *(_QWORD *)(a2 + 40);
  if (!v6 || !*(_QWORD *)(v6 + 8) || (v11 = WebCore::JSDOMGlobalObject::scriptExecutionContext(a1)) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a5 = 8;
    *(_DWORD *)(a5 + 16) = 1;
    return;
  }
  v12 = v11;
  v13 = *(unsigned __int8 *)(v11 + 274);
  if (*(_BYTE *)(v11 + 274))
  {
    if (v13 == 1 || v13 == 2)
      ++*(_DWORD *)(v11 + 312);
  }
  else
  {
    *(_DWORD *)(v11 - 168) += 2;
  }
  v51 = 0;
  v52 = 0;
  WebCore::SerializedScriptValue::create(a1, a3, a4, (uint64_t)&v51, 0, 0, 0, (uint64_t)&v48);
  if (v50)
  {
    if (v50 == 1)
    {
      v15 = v49;
      v49 = 0;
      *(_BYTE *)a5 = (_BYTE)v48;
      *(_QWORD *)(a5 + 8) = v15;
      v16 = 1;
      *(_DWORD *)(a5 + 16) = 1;
LABEL_34:
      ((void (*)(_QWORD *, unsigned int **))off_1E3361768[v16])(v53, &v48);
      goto LABEL_35;
    }
LABEL_67:
    v44 = (WebCore::RTCRtpScriptTransform *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::RTCRtpScriptTransform::~RTCRtpScriptTransform(v44);
    return;
  }
  if (!HIDWORD(v52))
  {
    v45 = 0;
    v46 = 0;
    v47 = 0;
LABEL_12:
    v17 = bmalloc::api::isoAllocate();
    v18 = v17;
    ++*(_DWORD *)(a2 + 24);
    *(_DWORD *)(v17 + 24) = 1;
    v19 = (unsigned int *)(v17 + 24);
    v20 = v12;
    if (!*(_BYTE *)(v12 + 274))
    {
      v21 = v12 - 192;
      v22 = *(_QWORD *)(v12 + 512);
      if (v22)
      {
        v23 = *(_QWORD *)(v22 + 8);
        if (v23)
          v21 = v23;
      }
      v20 = v21 + 192;
    }
    *(_QWORD *)v17 = &off_1E33A18C0;
    *(_QWORD *)(v17 + 8) = 0;
    WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v17, (WebCore::ScriptExecutionContext *)v20);
    *(_QWORD *)v18 = &off_1E33A0540;
    *(_QWORD *)(v18 + 16) = 0;
    if (*(_BYTE *)(v20 + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x1954A440CLL);
    }
    v55 = (uint64_t *)v18;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v20 + 128), (uint64_t *)&v55, (uint64_t)v53);
    *(_QWORD *)v18 = &off_1E3361DC0;
    *(_QWORD *)(v18 + 32) = a2;
    *(_BYTE *)(v18 + 40) = 0;
    *(_QWORD *)(v18 + 48) = 0;
    *(_WORD *)(v18 + 56) = 0;
    *(_QWORD *)(v18 + 64) = 0;
    WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v18);
    if (v50)
      goto LABEL_67;
    v25 = v48;
    v48 = 0;
    if (v47)
      goto LABEL_67;
    v26 = v45;
    v27 = v46;
    v45 = 0;
    v46 = 0;
    v28 = *(_QWORD *)(a2 + 40);
    if (v28 && *(_QWORD *)(v28 + 8))
    {
      v29 = *(_QWORD *)(a2 + 104);
      do
        v30 = __ldaxr(v19);
      while (__stlxr(v30 + 1, v19));
      v31 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
      *v31 = &off_1E347C720;
      v31[1] = v18;
      v31[2] = v25;
      v31[3] = v26;
      v31[4] = v27;
      v53[0] = v31;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v29 + 24))(v29, v53);
      v32 = v53[0];
      v53[0] = 0;
      if (v32)
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    }
    else
    {
      if (v26)
      {
        WTF::fastFree(v26, v24);
        if (!v25)
          goto LABEL_31;
      }
      else if (!v25)
      {
        goto LABEL_31;
      }
      do
      {
        v33 = __ldaxr(v25);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v25));
      if (!v34)
      {
        atomic_store(1u, v25);
        WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v25 + 2), v24);
        WTF::fastFree((WTF *)v25, v41);
      }
    }
LABEL_31:
    *(_QWORD *)a5 = v18;
    *(_DWORD *)(a5 + 16) = 0;
    v35 = v47;
    if (v47 == -1)
      goto LABEL_33;
    goto LABEL_32;
  }
  v55 = 0;
  v38 = (uint64_t *)v51;
  v39 = 8 * HIDWORD(v52);
  while (*(_BYTE *)(*v38 + 58))
  {
    WTF::HashTable<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTraits<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTraits<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>>::add((uint64_t *)&v55, v38, (uint64_t)v53);
    if (!v54)
      break;
    ++v38;
    v39 -= 8;
    if (!v39)
    {
      WTF::map<0ul,WTF::CrashOnOverflow,16ul,WebCore::MessagePort::disentanglePorts(WTF::Vector<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,WTF::Vector<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v53, (uint64_t *)&v51);
      v45 = (WTF *)v53[0];
      v46 = v53[1];
      v47 = 0;
      WTF::HashSet<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::DefaultHash<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTraits<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTableTraits>::~HashSet(&v55, v40);
      goto LABEL_12;
    }
  }
  LOBYTE(v45) = 21;
  v35 = 1;
  v47 = 1;
  WTF::HashSet<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>,WTF::DefaultHash<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTraits<WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>>,WTF::HashTableTraits>::~HashSet(&v55, v14);
  v46 = 0;
  *(_BYTE *)a5 = 21;
  *(_QWORD *)(a5 + 8) = 0;
  *(_DWORD *)(a5 + 16) = 1;
LABEL_32:
  ((void (*)(_QWORD *, WTF **))off_1E3361758[v35])(v53, &v45);
LABEL_33:
  v16 = v50;
  if (v50 != -1)
    goto LABEL_34;
LABEL_35:
  if (HIDWORD(v52))
  {
    v42 = (uint64_t *)v51;
    v43 = 8 * HIDWORD(v52);
    do
    {
      v42 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v42, v24)+ 1;
      v43 -= 8;
    }
    while (v43);
  }
  v36 = v51;
  if (v51)
  {
    v51 = 0;
    LODWORD(v52) = 0;
    WTF::fastFree(v36, v24);
  }
  v37 = *(unsigned __int8 *)(v12 + 274);
  if (*(_BYTE *)(v12 + 274))
  {
    if (v37 == 1)
    {
      if (*(_DWORD *)(v12 + 312) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
      else
        --*(_DWORD *)(v12 + 312);
    }
    else if (v37 == 2)
    {
      WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v12 + 312));
    }
  }
  else if (*(_DWORD *)(v12 - 168) == 2)
  {
    if ((*(_WORD *)(v12 - 162) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v12 - 192));
  }
  else
  {
    *(_DWORD *)(v12 - 168) -= 2;
  }
}

void WebCore::RTCRtpScriptTransform::~RTCRtpScriptTransform(WebCore::RTCRtpScriptTransform *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;

  *((_BYTE *)this + 40) = 0;
  v2 = (unsigned __int8 *)this + 56;
  if (__ldaxr((unsigned __int8 *)this + 56))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 56);
LABEL_5:
  *((_BYTE *)this + 57) = 0;
  v4 = *((_QWORD *)this + 4);
  v5 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v6 = &off_1E3361970;
  *(_QWORD *)(v6 + 8) = v5;
  *(_BYTE *)(v6 + 16) = 1;
  v20 = (_QWORD *)v6;
  (*(void (**)(_QWORD, _QWORD **))(**(_QWORD **)(v4 + 104) + 24))(*(_QWORD *)(v4 + 104), &v20);
  v8 = v20;
  v20 = 0;
  if (v8)
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  v9 = __ldxr(v2);
  if (v9 == 1)
  {
    if (!__stlxr(0, v2))
      goto LABEL_12;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v2);
LABEL_12:
  v10 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, v7);
    }
  }
  v13 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v13)
  {
    v14 = (unsigned int *)(v13 + 8);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, v14);
      v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v18 = off_1E3361EB0;
      v18[1] = v14;
      v20 = v18;
      WTF::ensureOnMainThread();
      v19 = v20;
      v20 = 0;
      if (v19)
        (*(void (**)(_QWORD *))(*v19 + 8))(v19);
    }
  }
  v17 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v17)
  {
    if (v17[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 72))(v17);
    else
      --v17[6];
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v7);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::RTCRtpScriptTransform::~RTCRtpScriptTransform(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::RTCRtpScriptTransform::setTransformer(WebCore::RTCRtpScriptTransform *this, WebCore::RTCRtpScriptTransformer *a2)
{
  unsigned __int8 *v4;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  void *v16;
  WTF *v17;
  unsigned int *v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;

  v4 = (unsigned __int8 *)this + 56;
  if (__ldaxr((unsigned __int8 *)this + 56))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 56);
LABEL_5:
  *((_BYTE *)this + 57) = 1;
  v6 = *((_QWORD *)a2 + 4);
  if (v6)
    goto LABEL_35;
  v6 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v6 = 1;
  *(_QWORD *)(v6 + 8) = a2;
  v7 = (unsigned int *)*((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = v6;
  if (!v7)
    goto LABEL_35;
  do
  {
    v8 = __ldaxr(v7);
    v9 = v8 - 1;
  }
  while (__stlxr(v9, v7));
  if (!v9)
  {
    atomic_store(1u, v7);
    WTF::fastFree((WTF *)v7, a2);
  }
  v6 = *((_QWORD *)a2 + 4);
  if (v6)
  {
LABEL_35:
    do
      v10 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v10 + 1, (unsigned int *)v6));
  }
  v11 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = v6;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  v14 = __ldxr(v4);
  if (v14 != 1)
  {
    __clrex();
    goto LABEL_20;
  }
  if (__stlxr(0, v4))
LABEL_20:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
  v15 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v15 = 1;
  ++*((_DWORD *)a2 + 6);
  *(_QWORD *)(v15 + 8) = a2;
  ++*((_QWORD *)a2 + 2);
  v17 = (WTF *)*((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = v15;
  if (v17)
  {
    if (*(_DWORD *)v17 == 1)
    {
      v22 = *((_QWORD *)v17 + 1);
      --*(_QWORD *)(v22 + 16);
      *((_QWORD *)v17 + 1) = 0;
      if (*(_DWORD *)(v22 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
      else
        --*(_DWORD *)(v22 + 24);
      WTF::fastFree(v17, v16);
    }
    else
    {
      --*(_DWORD *)v17;
    }
  }
  v18 = (unsigned int *)((char *)this + 24);
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 + 1, v18));
  v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v20 = &off_1E3361920;
  v20[1] = this;
  v20[2] = this;
  v23 = (uint64_t)v20;
  WTF::callOnMainThread();
  result = v23;
  if (v23)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  return result;
}

unsigned __int8 *WebCore::RTCRtpScriptTransform::initializeTransformer(unsigned __int8 *result, uint64_t a2)
{
  unsigned __int8 *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned __int8 *v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned __int8 *v13;
  int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;

  v3 = result;
  result[40] = 1;
  v4 = (unsigned int *)(a2 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = result + 56;
  if (__ldaxr(result + 56))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_7;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](result + 56);
LABEL_7:
  v8 = v3[57];
  v9 = a2;
  if (v3[57])
  {
    v10 = *((_QWORD *)v3 + 4);
    v11 = (unsigned int *)*((_QWORD *)v3 + 8);
    if (v11)
    {
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 + 1, v11));
    }
    v13 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v13 = &off_1E3361948;
    *((_QWORD *)v13 + 1) = v11;
    *((_QWORD *)v13 + 2) = a2;
    v25 = v13;
    (*(void (**)(_QWORD, unsigned __int8 **))(**(_QWORD **)(v10 + 104) + 24))(*(_QWORD *)(v10 + 104), &v25);
    result = v25;
    v25 = 0;
    if (result)
      result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
    v9 = 0;
  }
  v14 = __ldxr(v6);
  if (v14 == 1)
  {
    if (!__stlxr(0, v6))
    {
      if (!v9)
        goto LABEL_22;
      goto LABEL_19;
    }
  }
  else
  {
    __clrex();
  }
  result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 56));
  if (!v9)
    goto LABEL_22;
LABEL_19:
  v15 = (unsigned int *)(v9 + 8);
  do
  {
    v16 = __ldaxr(v15);
    v17 = v16 - 1;
  }
  while (__stlxr(v17, v15));
  if (!v17)
  {
    atomic_store(1u, v15);
    v23 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v23 = off_1E3361EB0;
    *((_QWORD *)v23 + 1) = v15;
    v25 = v23;
    WTF::ensureOnMainThread();
    result = v25;
    v25 = 0;
    if (result)
      result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
  }
LABEL_22:
  if (!v8)
  {
    do
      v18 = __ldaxr(v4);
    while (__stlxr(v18 + 1, v4));
    v19 = *((_QWORD *)v3 + 6);
    *((_QWORD *)v3 + 6) = a2;
    if (v19)
    {
      v20 = (unsigned int *)(v19 + 8);
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        v24 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v24 = off_1E3361EB0;
        *((_QWORD *)v24 + 1) = v20;
        v25 = v24;
        WTF::ensureOnMainThread();
        result = v25;
        v25 = 0;
        if (result)
          return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
      }
    }
  }
  return result;
}

void WebCore::RTCRtpScriptTransformer::create(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::JSDOMGlobalObject *v6;
  uint64_t v7;
  unint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t IdentifierInternal;
  WebCore::RTCRtpScriptTransformer *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _BYTE v29[8];
  WTF::StringImpl *v30[3];
  uint64_t v31;

  if (!WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)a1))
  {
    *(_BYTE *)a3 = 8;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
    return;
  }
  v6 = (WebCore::JSDOMGlobalObject *)WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)a1);
  MEMORY[0x19AEA3294](v29, *((_QWORD *)v6 + 7));
  v7 = WTF::fastMalloc((WTF *)0x38);
  *(_BYTE *)(v7 + 16) = 0;
  *(_BYTE *)(v7 + 24) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_QWORD *)v7 = off_1E33677B8;
  *(_QWORD *)(v7 + 8) = 0;
  *(_BYTE *)(v7 + 48) = 0;
  *(_DWORD *)(v7 + 32) = 2;
  v30[0] = (WTF::StringImpl *)v7;
  v8 = WebCore::createWrapper<WebCore::ReadableStreamSource,WebCore::ReadableStreamSource>((uint64_t)v6, v30);
  WebCore::ReadableStream::createFromJSValues(v6, v8, 0xAuLL, (uint64_t)&v26);
  v9 = v30[0];
  v30[0] = 0;
  if (v9)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v9 + 24))(v9);
  v10 = v28;
  if (v28)
  {
    if (v28 != 1)
    {
      v22 = (WebCore::RTCRtpScriptTransformer *)std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::RTCRtpScriptTransformer::~RTCRtpScriptTransformer(v22, v23);
      return;
    }
    v11 = v26;
    v12 = v27;
    v27 = 0;
    goto LABEL_20;
  }
  v12 = *a2;
  if (!*a2)
  {
    v11 = 8;
LABEL_20:
    *(_BYTE *)a3 = v11;
    *(_QWORD *)(a3 + 8) = v12;
    *(_DWORD *)(a3 + 16) = 1;
    goto LABEL_21;
  }
  if (*((_DWORD *)a2 + 5))
  {
    v30[0] = (WTF::StringImpl *)a1;
    WTF::map<0ul,WTF::CrashOnOverflow,16ul,WebCore::MessagePort::entanglePorts(WebCore::ScriptExecutionContext &,WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::$_0,WTF::Vector<std::pair<WebCore::MessagePortIdentifier,WebCore::MessagePortIdentifier>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v24, (uint64_t)(a2 + 1), v30);
  }
  else
  {
    v24 = 0;
    v25 = 0;
  }
  v13 = WTF::fastMalloc((WTF *)0xA8);
  v14 = v13;
  v15 = *a2;
  *a2 = 0;
  v16 = v26;
  v26 = 0;
  *(_DWORD *)(v13 + 24) = 1;
  v17 = a1;
  if (!*(_BYTE *)(a1 + 274))
  {
    v18 = a1 - 192;
    v19 = *(_QWORD *)(a1 + 512);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 8);
      if (v20)
        v18 = v20;
    }
    v17 = v18 + 192;
  }
  *(_QWORD *)v13 = &off_1E33A18C0;
  *(_QWORD *)(v13 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v13, (WebCore::ScriptExecutionContext *)v17);
  *(_QWORD *)v14 = &off_1E33A0540;
  *(_QWORD *)(v14 + 16) = 0;
  if (*(_BYTE *)(v17 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x1954A4D94);
  }
  v31 = v14;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v17 + 128), &v31, (uint64_t)v30);
  *(_QWORD *)v14 = &off_1E3361E18;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = v15;
  *(_QWORD *)(v14 + 48) = v24;
  *(_QWORD *)(v14 + 56) = v25;
  *(_QWORD *)(v14 + 64) = v7;
  *(_QWORD *)(v14 + 72) = v16;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_QWORD *)(v14 + 128) = 0;
  *(_BYTE *)(v14 + 136) = (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1) + 472) & 0x10000000) != 0;
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  *(_QWORD *)(v14 + 152) = 0;
  *(_QWORD *)(v14 + 160) = 0;
  *(_QWORD *)(v14 + 144) = IdentifierInternal;
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v14);
  *(_QWORD *)a3 = v14;
  *(_DWORD *)(a3 + 16) = 0;
  v10 = v28;
  if (v28 == -1)
    goto LABEL_24;
  v7 = 0;
LABEL_21:
  ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3361738[v10])(v30, &v26);
  if (v7)
  {
    if (*(_DWORD *)(v7 + 32) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    else
      --*(_DWORD *)(v7 + 32);
  }
LABEL_24:
  MEMORY[0x19AEA32A0](v29);
}

void WebCore::RTCRtpScriptTransformer::~RTCRtpScriptTransformer(WebCore::RTCRtpScriptTransformer *this, void *a2)
{
  uint64_t *v3;
  WTF *v4;
  uint64_t v6;
  uint64_t *v7;
  WTF *v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  WTF *v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD **v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  WTF *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  WTF *v25;
  WTF *v26;
  _DWORD *v27;
  uint64_t v28;
  WTF *v29;
  unsigned int *v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  void *v37;
  _DWORD **v38;
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  _DWORD *v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  _QWORD *v51;

  *(_QWORD *)this = &off_1E3361E18;
  v3 = (uint64_t *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v3)
  {
    v4 = (WTF *)v3[3];
    if (v3 + 5 != (uint64_t *)v4 && v4 != 0)
    {
      v3[3] = 0;
      *((_DWORD *)v3 + 8) = 0;
      WTF::fastFree(v4, a2);
    }
    v6 = *v3;
    *v3 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    WTF::fastFree((WTF *)v3, a2);
  }
  v7 = (uint64_t *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v7)
  {
    v8 = (WTF *)v7[3];
    if (v7 + 5 != (uint64_t *)v8 && v8 != 0)
    {
      v7[3] = 0;
      *((_DWORD *)v7 + 8) = 0;
      WTF::fastFree(v8, a2);
    }
    v10 = *v7;
    *v7 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    WTF::fastFree((WTF *)v7, a2);
  }
  v11 = *((_QWORD *)this + 13);
  v12 = *((_QWORD *)this + 14);
  v13 = (WTF *)*((_QWORD *)this + 15);
  if (v11 <= v12)
  {
    if (v11 == v12)
      goto LABEL_38;
    v16 = (_DWORD **)((char *)v13 + 8 * v11);
    v17 = 8 * v12 - 8 * v11;
    do
    {
      v18 = *v16;
      *v16 = 0;
      if (v18)
      {
        if (v18[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 16))(v18);
        else
          --v18[4];
      }
      ++v16;
      v17 -= 8;
    }
    while (v17);
  }
  else
  {
    if (v12)
    {
      v14 = 8 * v12;
      do
      {
        v15 = *(_DWORD **)v13;
        *(_QWORD *)v13 = 0;
        if (v15)
        {
          if (v15[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
          else
            --v15[4];
        }
        v13 = (WTF *)((char *)v13 + 8);
        v14 -= 8;
      }
      while (v14);
      v13 = (WTF *)*((_QWORD *)this + 15);
      v11 = *((_QWORD *)this + 13);
    }
    v19 = *((unsigned int *)this + 32);
    if (v11 != v19)
    {
      v38 = (_DWORD **)((char *)v13 + 8 * v11);
      v39 = 8 * v19 - 8 * v11;
      do
      {
        v40 = *v38;
        *v38 = 0;
        if (v40)
        {
          if (v40[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 16))(v40);
          else
            --v40[4];
        }
        ++v38;
        v39 -= 8;
      }
      while (v39);
    }
  }
  v13 = (WTF *)*((_QWORD *)this + 15);
LABEL_38:
  if (v13)
  {
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree(v13, a2);
  }
  v20 = (WTF *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 1)
    {
      v41 = *((_QWORD *)v20 + 1);
      --*(_QWORD *)(v41 + 16);
      *((_QWORD *)v20 + 1) = 0;
      if (*(_DWORD *)(v41 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41);
      else
        --*(_DWORD *)(v41 + 24);
      WTF::fastFree(v20, a2);
    }
    else
    {
      --*(_DWORD *)v20;
    }
  }
  v21 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v21)
  {
    v22 = (unsigned int *)(v21 + 8);
    do
    {
      v23 = __ldaxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
    {
      atomic_store(1u, v22);
      v48 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v48 = off_1E3361EB0;
      v48[1] = v22;
      v51 = v48;
      WTF::ensureOnMainThread();
      if (v51)
        (*(void (**)(_QWORD *))(*v51 + 8))(v51);
    }
  }
  v25 = (WTF *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 1)
    {
      v42 = (_DWORD *)*((_QWORD *)v25 + 2);
      *((_QWORD *)v25 + 2) = 0;
      if (v42)
      {
        if (v42[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v42 + 16))(v42);
        else
          --v42[4];
      }
      v43 = *((_QWORD *)v25 + 1);
      if (v43)
      {
        *(_QWORD *)(v43 + 8) = 0;
        v44 = (unsigned int *)*((_QWORD *)v25 + 1);
        *((_QWORD *)v25 + 1) = 0;
        if (v44)
        {
          do
          {
            v45 = __ldaxr(v44);
            v46 = v45 - 1;
          }
          while (__stlxr(v46, v44));
          if (!v46)
          {
            atomic_store(1u, v44);
            WTF::fastFree((WTF *)v44, a2);
          }
        }
      }
      else
      {
        *((_QWORD *)v25 + 1) = 0;
      }
      WTF::fastFree(v25, a2);
    }
    else
    {
      --*(_DWORD *)v25;
    }
  }
  v26 = (WTF *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
    {
      v47 = (_DWORD *)*((_QWORD *)v26 + 1);
      *((_QWORD *)v26 + 1) = 0;
      if (v47)
      {
        if (v47[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v47 + 16))(v47);
        else
          --v47[4];
      }
      WTF::fastFree(v26, a2);
    }
    else
    {
      --*(_DWORD *)v26;
    }
  }
  v27 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v27)
  {
    if (v27[8] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
    else
      --v27[8];
  }
  v28 = *((unsigned int *)this + 15);
  if ((_DWORD)v28)
  {
    v49 = (uint64_t *)*((_QWORD *)this + 6);
    v50 = 8 * v28;
    do
    {
      v49 = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(v49, a2)+ 1;
      v50 -= 8;
    }
    while (v50);
  }
  v29 = (WTF *)*((_QWORD *)this + 6);
  if (v29)
  {
    *((_QWORD *)this + 6) = 0;
    *((_DWORD *)this + 14) = 0;
    WTF::fastFree(v29, a2);
  }
  v30 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v30)
  {
    do
    {
      v35 = __ldaxr(v30);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v30));
    if (!v36)
    {
      atomic_store(1u, v30);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v30 + 2), a2);
      WTF::fastFree((WTF *)v30, v37);
    }
  }
  v31 = *((_QWORD *)this + 4);
  if (v31)
  {
    *(_QWORD *)(v31 + 8) = 0;
    v32 = (unsigned int *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v32)
    {
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        atomic_store(1u, v32);
        WTF::fastFree((WTF *)v32, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::RTCRtpScriptTransformer::~RTCRtpScriptTransformer(this, a2);
  WTF::fastFree(v2, v3);
}

WTF::StringImpl *WebCore::RTCRtpScriptTransformer::writable@<X0>(WTF::StringImpl *this@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  int v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  JSC::Structure *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  int v12;
  uint64_t v13;
  WTF *v14;
  int v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  WTF::StringImpl *v21;
  char v22;

  v3 = (_DWORD *)*((_QWORD *)this + 10);
  if (v3)
    goto LABEL_2;
  v5 = this;
  v6 = *((_QWORD *)this + 1);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0)
  {
    *(_BYTE *)a2 = 8;
    *(_QWORD *)(a2 + 8) = 0;
    v4 = 1;
    goto LABEL_3;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 - 96) + 64))(v7 - 96) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1954A54D8);
  }
  ++*(_DWORD *)(v7 + 216);
  this = (WTF::StringImpl *)WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(v7 - 96));
  if (!this)
  {
    v12 = 0;
    *(_BYTE *)a2 = 8;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
    goto LABEL_21;
  }
  v8 = (JSC::Structure *)WebCore::ScriptExecutionContext::globalObject((WebCore::ScriptExecutionContext *)(v7 - 96));
  ++*((_DWORD *)v5 + 6);
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = &off_1E3361998;
  v9[1] = v5;
  v10 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v10 + 8) = 1;
  *(_QWORD *)v10 = off_1E3361700;
  *(_QWORD *)(v10 + 16) = v9;
  v21 = (WTF::StringImpl *)v10;
  WebCore::WritableStream::create(v8, &v21, a2);
  this = v21;
  v21 = 0;
  if (this)
  {
    if (*((_DWORD *)this + 2) == 1)
      this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 8))(this);
    else
      --*((_DWORD *)this + 2);
  }
  if (*(_DWORD *)(a2 + 16))
  {
    v12 = 0;
    goto LABEL_21;
  }
  v13 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v14 = (WTF *)*((_QWORD *)v5 + 10);
  *((_QWORD *)v5 + 10) = v13;
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
    {
      v16 = (_DWORD *)*((_QWORD *)v14 + 2);
      *((_QWORD *)v14 + 2) = 0;
      if (v16)
      {
        if (v16[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 16))(v16);
        else
          --v16[4];
      }
      v17 = *((_QWORD *)v14 + 1);
      if (v17)
      {
        *(_QWORD *)(v17 + 8) = 0;
        v18 = (unsigned int *)*((_QWORD *)v14 + 1);
        *((_QWORD *)v14 + 1) = 0;
        if (v18)
        {
          do
          {
            v19 = __ldaxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
          {
            atomic_store(1u, v18);
            WTF::fastFree((WTF *)v18, v11);
          }
        }
      }
      else
      {
        *((_QWORD *)v14 + 1) = 0;
      }
      this = (WTF::StringImpl *)WTF::fastFree(v14, v11);
      v15 = *(_DWORD *)(a2 + 16);
      if (v15 == -1)
        goto LABEL_20;
    }
    else
    {
      v15 = 0;
      --*(_DWORD *)v14;
    }
  }
  else
  {
    v15 = 0;
  }
  this = (WTF::StringImpl *)((uint64_t (*)(char *, uint64_t))off_1E3361728[v15])(&v22, a2);
LABEL_20:
  *(_DWORD *)(a2 + 16) = -1;
  v12 = 1;
LABEL_21:
  if (*(_DWORD *)(v7 + 216) == 1)
  {
    this = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 - 96) + 40))(v7 - 96);
    if (v12)
      goto LABEL_23;
  }
  else
  {
    --*(_DWORD *)(v7 + 216);
    if (v12)
    {
LABEL_23:
      v3 = (_DWORD *)*((_QWORD *)v5 + 10);
LABEL_2:
      v4 = 0;
      ++*v3;
      *(_QWORD *)a2 = v3;
LABEL_3:
      *(_DWORD *)(a2 + 16) = v4;
    }
  }
  return this;
}

unsigned int *WebCore::RTCRtpScriptTransformer::generateKeyFrame(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *result;
  WTF::StringImpl *v12;
  char v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  unsigned __int8 v18[8];
  WTF::StringImpl *v19;
  objc_class *v20;

  v3 = a1[1];
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    v6 = v4 - 96;
    v7 = *(unsigned __int8 *)(v4 + 178);
    if (*(_BYTE *)(v4 + 178))
    {
      if (v7 == 1 || v7 == 2)
        ++*(_DWORD *)(v4 + 216);
    }
    else
    {
      *(_DWORD *)(v4 - 264) += 2;
    }
    v8 = a1[11];
    if (v8
      && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8) == 1
      && (*(unsigned int (**)(_QWORD))(*(_QWORD *)a1[11] + 40))(a1[11]) == 1)
    {
      v9 = a1[13];
      v10 = a1[14];
      result = (unsigned int *)WTF::Deque<WTF::RefPtr<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>,0ul>::append<WTF::Ref<WebCore::IDBClient::TransactionOperation,WTF::RawPtrTraits<WebCore::IDBClient::TransactionOperation>,WTF::DefaultRefDerefTraits<WebCore::IDBClient::TransactionOperation>>>((uint64_t)(a1 + 13), a2);
      if (v9 == v10)
        result = (unsigned int *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[11] + 56))(a1[11]);
      goto LABEL_21;
    }
    v13 = 0;
  }
  else
  {
    v6 = 0;
    v13 = 1;
  }
  v14 = *a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v20 = 0;
  v18[0] = 8;
  if (v17)
    *(_DWORD *)v17 += 2;
  v19 = v17;
  WebCore::DeferredPromise::reject(v14, v18, 0, &v20);
  v15 = v19;
  v19 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v12);
    else
      *(_DWORD *)v15 -= 2;
  }
  result = (unsigned int *)v17;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
    {
      result = (unsigned int *)WTF::StringImpl::destroy(v17, v12);
      if ((v13 & 1) != 0)
        return result;
      goto LABEL_21;
    }
    *(_DWORD *)v17 -= 2;
  }
  if ((v13 & 1) != 0)
    return result;
LABEL_21:
  v16 = *(unsigned __int8 *)(v6 + 274);
  if (*(_BYTE *)(v6 + 274))
  {
    if (v16 == 1)
    {
      if (*(_DWORD *)(v6 + 312) == 1)
        return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
      else
        --*(_DWORD *)(v6 + 312);
    }
    else if (v16 == 2)
    {
      return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v6 + 312));
    }
  }
  else if (*(_DWORD *)(v6 - 168) == 2)
  {
    if ((*(_WORD *)(v6 - 162) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)(v6 - 192), v12);
  }
  else
  {
    *(_DWORD *)(v6 - 168) -= 2;
  }
  return result;
}

unsigned int *WebCore::RTCRtpScriptTransformer::sendKeyFrameRequest(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  WTF::StringImpl *v12;
  unsigned int *result;
  char v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  unsigned int *v19;
  WTF::StringImpl *v20;
  objc_class *v21;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
  {
    v6 = (unsigned __int8 *)(v4 - 96);
    v7 = *(unsigned __int8 *)(v4 + 178);
    if (*(_BYTE *)(v4 + 178))
    {
      if (v7 == 1 || v7 == 2)
        ++*(_DWORD *)(v4 + 216);
    }
    else
    {
      *(_DWORD *)(v4 - 264) += 2;
    }
    v8 = *(_QWORD *)(a1 + 88);
    if (v8
      && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8)
      && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 40))(*(_QWORD *)(a1 + 88)) == 1)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 88) + 56))(*(_QWORD *)(a1 + 88));
      v9 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v6 + 104))(v6);
      v10 = *a2;
      *a2 = 0;
      v11 = (unsigned int *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v11 = &off_1E3361A78;
      *((_QWORD *)v11 + 1) = v10;
      v19 = v11;
      WebCore::EventLoopTaskGroup::queueTask(v9, 11, (uint64_t *)&v19);
      result = v19;
      v19 = 0;
      if (result)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      goto LABEL_21;
    }
    v14 = 0;
  }
  else
  {
    v6 = 0;
    v14 = 1;
  }
  v15 = *a2;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v21 = 0;
  LOBYTE(v19) = 8;
  if (v18)
    *(_DWORD *)v18 += 2;
  v20 = v18;
  WebCore::DeferredPromise::reject(v15, (unsigned __int8 *)&v19, 0, &v21);
  v16 = v20;
  v20 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v12);
    else
      *(_DWORD *)v16 -= 2;
  }
  result = (unsigned int *)v18;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
    {
      result = (unsigned int *)WTF::StringImpl::destroy(v18, v12);
      if ((v14 & 1) != 0)
        return result;
      goto LABEL_21;
    }
    *(_DWORD *)v18 -= 2;
  }
  if ((v14 & 1) != 0)
    return result;
LABEL_21:
  v17 = v6[274];
  if (v6[274])
  {
    if (v17 == 1)
    {
      if (*((_DWORD *)v6 + 78) == 1)
        return (unsigned int *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v6 + 40))(v6);
      else
        --*((_DWORD *)v6 + 78);
    }
    else if (v17 == 2)
    {
      return WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)v6 + 78);
    }
  }
  else if (*((_DWORD *)v6 - 42) == 2)
  {
    if ((*((_WORD *)v6 - 81) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)(v6 - 192), v12);
  }
  else
  {
    *((_DWORD *)v6 - 42) -= 2;
  }
  return result;
}

_DWORD *WebCore::RTCRtpSender::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD **v11;
  uint64_t v12;
  unsigned int *v13;
  WTF::StringImpl *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  uint64_t v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  _DWORD *v22;
  _DWORD *result;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  _DWORD *v26;

  v8 = bmalloc::api::isoAllocate();
  v9 = *a2;
  v10 = *(_DWORD **)(*a2 + 1216);
  if (v10)
    goto LABEL_3;
  WTF::AtomStringImpl::add();
  v10 = v26;
  v25 = *(WTF::StringImpl **)(v9 + 1216);
  *(_QWORD *)(v9 + 1216) = v26;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::destroy(v25, v24);
      v10 = *(_DWORD **)(v9 + 1216);
      if (v10)
        goto LABEL_3;
      goto LABEL_4;
    }
    *(_DWORD *)v25 -= 2;
  }
  if (v26)
LABEL_3:
    *v10 += 2;
LABEL_4:
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  v11 = (_DWORD **)(v8 + 32);
  *(_QWORD *)v8 = off_1E3361E70;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 56) = v10;
  v12 = *a3;
  *a3 = 0;
  *(_QWORD *)(v8 + 64) = v12;
  v13 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(a1);
  if (v13)
  {
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 + 1, v13));
  }
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 72) = v13;
  v16 = *(_QWORD *)(a1 + 88);
  v17 = (unsigned int *)(v16 + 8);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  v19 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(v8 + 96) = v16;
  *(_QWORD *)(v8 + 104) = v19;
  *a4 = v8;
  if (!*(_QWORD *)(v8 + 32))
  {
    v20 = *(_DWORD **)(*(_QWORD *)(*a2 + 96) + 48);
    if (v20)
      *v20 += 2;
    v21 = *(WTF::StringImpl **)(v8 + 48);
    *(_QWORD *)(v8 + 48) = v20;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v14);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  v22 = (_DWORD *)*a2;
  *a2 = 0;
  result = *v11;
  *v11 = v22;
  if (result)
  {
    if (result[6] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[6];
  }
  return result;
}

void WebCore::RTCRtpSender::~RTCRtpSender(WebCore::RTCRtpSender *this, WTF::StringImpl *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  WebCore::RTCRtpTransform *v13;
  WTF *v14;
  void *v15;
  WebCore::RTCDTMFSender *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WebCore::RTCDtlsTransport *v23;
  _DWORD *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  bmalloc::api *v30;
  void *v31;
  bmalloc::api *v32;
  void *v33;
  uint64_t v34;
  WTF *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  _QWORD *v41;

  v3 = (uint64_t *)*((_QWORD *)this + 11);
  if (v3 && *v3)
  {
    v40[0] = *((_QWORD *)this + 11);
    v40[1] = v3;
    v4 = *((unsigned int *)v3 + 4);
    if ((_DWORD)v4 == -1)
    {
      v17 = std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_56;
    }
    v41 = v40;
    ((void (*)(_QWORD **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15RTCRtpTransform12clearBackendEvE3__0JZNS9_12clearBackendEvE3__1EEEEEJRNS0_6__implIJNS6_6RefPtrINS8_21RTCRtpSFrameTransformENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENSF_INS8_21RTCRtpScriptTransformENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOT_DpOT0____fmatrix[v4])(&v41, v3 + 1);
    v5 = *v3;
    *v3 = 0;
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 8);
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        v36 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v36 = off_1E3361EB0;
        v36[1] = v6;
        v40[0] = v36;
        WTF::ensureOnMainThread();
        v37 = v40[0];
        v40[0] = 0;
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
      }
    }
  }
  v9 = (unsigned int *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v9)
  {
    v10 = v9 + 2;
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v9 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
    }
  }
  v13 = (WebCore::RTCRtpTransform *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v13)
  {
    WebCore::RTCRtpTransform::~RTCRtpTransform(v13);
    WTF::fastFree(v14, v15);
  }
  v16 = (WebCore::RTCDTMFSender *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v16)
  {
    if (*((_DWORD *)v16 + 6) == 1)
    {
      WebCore::RTCDTMFSender::~RTCDTMFSender(v16, a2);
      bmalloc::api::isoDeallocate(v30, v31);
    }
    else
    {
      --*((_DWORD *)v16 + 6);
    }
  }
  v17 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v17)
  {
    do
    {
      v18 = __ldaxr((unsigned int *)v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, (unsigned int *)v17));
    if (!v19)
    {
      atomic_store(1u, (unsigned int *)v17);
      v34 = *(unsigned int *)(v17 + 28);
      if (!(_DWORD)v34)
      {
LABEL_50:
        v35 = *(WTF **)(v17 + 16);
        if (v35)
        {
          *(_QWORD *)(v17 + 16) = 0;
          *(_DWORD *)(v17 + 24) = 0;
          v38 = v17;
          WTF::fastFree(v35, a2);
          v17 = v38;
        }
        WTF::fastFree((WTF *)v17, a2);
        goto LABEL_21;
      }
LABEL_56:
      v39 = v17;
      WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v17 + 16), (WTF::StringImpl *)(*(_QWORD *)(v17 + 16) + 32 * v34));
      v17 = v39;
      goto LABEL_50;
    }
  }
LABEL_21:
  v20 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, a2);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, a2);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = (WebCore::RTCDtlsTransport *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v23)
  {
    if (*((_DWORD *)v23 + 6) == 1)
    {
      WebCore::RTCDtlsTransport::~RTCDtlsTransport(v23);
      bmalloc::api::isoDeallocate(v32, v33);
    }
    else
    {
      --*((_DWORD *)v23 + 6);
    }
  }
  v24 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v24)
  {
    if (v24[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 16))(v24);
    else
      --v24[6];
  }
  v25 = *((_QWORD *)this + 3);
  if (v25)
  {
    *(_QWORD *)(v25 + 8) = 0;
    v26 = (unsigned int *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v26)
    {
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        atomic_store(1u, v26);
        WTF::fastFree((WTF *)v26, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
  v29 = *((_QWORD *)this + 2);
  if (v29)
  {
    *(_QWORD *)(v29 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::RTCRtpSender::~RTCRtpSender(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::RTCRtpSender::stop(WebCore::RTCRtpSender *this, WTF::StringImpl *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  uint64_t result;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  _QWORD *v16;

  v3 = (uint64_t *)*((_QWORD *)this + 11);
  if (v3 && *v3)
  {
    v15[0] = *((_QWORD *)this + 11);
    v15[1] = v3;
    v4 = *((unsigned int *)v3 + 4);
    if ((_DWORD)v4 == -1)
    {
      v14 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::RTCRtpSender::replaceTrack(v14);
    }
    v16 = v15;
    ((void (*)(_QWORD **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15RTCRtpTransform12clearBackendEvE3__0JZNS9_12clearBackendEvE3__1EEEEEJRNS0_6__implIJNS6_6RefPtrINS8_21RTCRtpSFrameTransformENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENSF_INS8_21RTCRtpScriptTransformENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOT_DpOT0____fmatrix[v4])(&v16, v3 + 1);
    v5 = *v3;
    *v3 = 0;
    if (v5)
    {
      v6 = (unsigned int *)(v5 + 8);
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v12 = off_1E3361EB0;
        v12[1] = v6;
        v15[0] = v12;
        WTF::ensureOnMainThread();
        v13 = v15[0];
        v15[0] = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      }
    }
  }
  v9 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v10)
  {
    if (v10[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
    else
      --v10[6];
  }
  result = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

WTF::StringImpl *WebCore::RTCRtpSender::replaceTrack(uint64_t a1, uint64_t *a2, WebCore::ActiveDOMCallback **a3)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *result;
  WebCore::ActiveDOMCallback *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;

  v6 = *a2;
  if (!*a2)
    goto LABEL_5;
  v7 = *(WTF::StringImpl **)(v6 + 1216);
  if (!v7)
  {
    WTF::AtomStringImpl::add();
    v7 = v23;
    v22 = *(WTF::StringImpl **)(v6 + 1216);
    *(_QWORD *)(v6 + 1216) = v23;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
      {
        WTF::StringImpl::destroy(v22, v7);
        v7 = *(WTF::StringImpl **)(v6 + 1216);
      }
      else
      {
        *(_DWORD *)v22 -= 2;
      }
    }
  }
  if ((WTF::equal(*(WTF **)(a1 + 56), v7, (const WTF::StringImpl *)a3) & 1) == 0)
  {
    v19 = *a3;
    v23 = 0;
    v20 = 33;
  }
  else
  {
LABEL_5:
    v8 = *(_QWORD *)(a1 + 72);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
      {
        v10 = *(_QWORD *)(a1 + 24);
        if (v10)
          goto LABEL_29;
        v10 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v10 = 1;
        *(_QWORD *)(v10 + 8) = a1;
        v12 = *(unsigned int **)(a1 + 24);
        *(_QWORD *)(a1 + 24) = v10;
        if (!v12)
          goto LABEL_29;
        do
        {
          v13 = __ldaxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
        {
          atomic_store(1u, v12);
          WTF::fastFree((WTF *)v12, v11);
        }
        v10 = *(_QWORD *)(a1 + 24);
        if (v10)
        {
LABEL_29:
          do
            v15 = __ldaxr((unsigned int *)v10);
          while (__stlxr(v15 + 1, (unsigned int *)v10));
        }
        v16 = *a2;
        *a2 = 0;
        v17 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x20);
        *(_QWORD *)v17 = &off_1E3361AB0;
        *((_QWORD *)v17 + 1) = a1;
        *((_QWORD *)v17 + 2) = v10;
        *((_QWORD *)v17 + 3) = v16;
        v23 = v17;
        WebCore::RTCPeerConnection::chainOperation(v9, a3, &v23);
        result = v23;
        v23 = 0;
        if (result)
          return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
        return result;
      }
    }
    v19 = *a3;
    v23 = 0;
    v20 = 8;
  }
  WebCore::DeferredPromise::reject((uint64_t)v19, (JSC::JSGlobalObject *)v20, (JSC::JSGlobalObject *)&v23, 0);
  result = v23;
  v23 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v21);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::RTCRtpSender::setStreams@<X0>(uint64_t a1@<X0>, unsigned int **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  unsigned int *v7;
  WTF::StringImpl *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF *v24;

  if (!*a2 || (v5 = **a2, !(_DWORD)v5))
  {
    v7 = 0;
    v24 = 0;
    goto LABEL_16;
  }
  v7 = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v5 + 8));
  *v7 = v5;
  bzero(v7 + 2, 8 * v5);
  v9 = *a2;
  v24 = (WTF *)v7;
  if (!v9 || (v10 = *v9, !(_DWORD)v10))
  {
LABEL_16:
    v15 = *(_QWORD *)(a1 + 72);
    if (v15 && (v16 = *(_QWORD *)(v15 + 8)) != 0 && *(_DWORD *)(v16 + 80) != 5 && (v17 = *(_QWORD *)(a1 + 64)) != 0)
    {
      result = (*(uint64_t (**)(uint64_t, WTF **))(*(_QWORD *)v17 + 56))(v17, &v24);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = (unsigned int *)v24;
    }
    else
    {
      result = WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a3 = 8;
      *((_BYTE *)a3 + 16) = 1;
    }
    v24 = 0;
    if (v7)
    {
      v21 = (WTF::StringImpl **)(v7 + 2);
      v20 = *v7;
      if ((_DWORD)v20)
      {
        v22 = 8 * v20;
        do
        {
          v23 = *v21;
          *v21 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v19);
            else
              *(_DWORD *)v23 -= 2;
          }
          ++v21;
          v22 -= 8;
        }
        while (v22);
      }
      return WTF::fastFree((WTF *)v7, v19);
    }
    return result;
  }
  v11 = 8 * v10;
  v12 = 1;
  while (1)
  {
    v13 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)&v9[2 * v12] + 96) + 48);
    if (v13)
      *v13 += 2;
    if (*v7 <= (int)v12 - 1)
      break;
    v14 = *(WTF::StringImpl **)&v7[2 * v12];
    *(_QWORD *)&v7[2 * v12] = v13;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v8);
      else
        *(_DWORD *)v14 -= 2;
    }
    ++v12;
    v11 -= 8;
    if (!v11)
      goto LABEL_16;
  }
  result = 146;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RTCRtpSender::dtmf(WebCore::RTCRtpSender *this)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::ScriptExecutionContext *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WebCore::RTCDTMFSender *v12;
  uint64_t v13;
  bmalloc::api *v14;
  void *v15;
  uint64_t v16;

  if (!*((_QWORD *)this + 10))
  {
    v3 = *((_QWORD *)this + 9);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 8);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 40);
        if (v5)
        {
          if (*(_QWORD *)(v5 + 8)
            && *((_QWORD *)this + 8)
            && MEMORY[0x19AEA53F4](*((_QWORD *)this + 7), "audio", 5))
          {
            v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 9) + 8) + 40);
            if (v6)
            {
              v7 = *(_QWORD *)(v6 + 8);
              if (v7)
                v8 = (WebCore::ScriptExecutionContext *)(v7 - 96);
              else
                v8 = 0;
            }
            else
            {
              v8 = 0;
            }
            (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 8) + 40))(&v16);
            v9 = bmalloc::api::isoAllocate();
            v10 = WebCore::RTCDTMFSender::RTCDTMFSender(v9, v8, (uint64_t)this, &v16);
            WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v10 + 32));
            v12 = (WebCore::RTCDTMFSender *)*((_QWORD *)this + 10);
            *((_QWORD *)this + 10) = v9;
            if (v12)
            {
              if (*((_DWORD *)v12 + 6) == 1)
              {
                WebCore::RTCDTMFSender::~RTCDTMFSender(v12, v11);
                bmalloc::api::isoDeallocate(v14, v15);
              }
              else
              {
                --*((_DWORD *)v12 + 6);
              }
            }
            v13 = v16;
            v16 = 0;
            if (v13)
              (*(void (**)(uint64_t))(*(_QWORD *)v13 + 56))(v13);
          }
        }
      }
    }
  }
  return *((_QWORD *)this + 10);
}

WebCore::RTCRtpTransform *WebCore::RTCRtpSender::setTransform@<X0>(WebCore::RTCRtpTransform *result@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X8>)
{
  WebCore::RTCRtpTransform **v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  WebCore::RTCRtpTransform *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t *v20;
  WTF *v21;
  void *v22;
  char *v23;
  WebCore::RTCRtpSender *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char **v29;

  v4 = (WebCore::RTCRtpTransform **)result;
  v6 = *((_QWORD *)result + 9);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      v8 = *((_QWORD *)result + 12);
      v9 = *(_QWORD *)(v7 + 96);
      v25 = "RTCRtpSender";
      v26 = 13;
      v27 = "setTransform";
      v28 = v9;
      if (*(_BYTE *)(v8 + 12))
        result = (WebCore::RTCRtpTransform *)WTF::Logger::log<WTF::Logger::LogSiteIdentifier>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v25);
    }
  }
  v10 = *a2;
  if (!*a2)
    goto LABEL_13;
  v11 = v4[11];
  if (!v11)
    goto LABEL_10;
  v25 = (const char *)v4[11];
  v26 = (uint64_t)v11;
  v12 = *((unsigned int *)v10 + 4);
  if ((_DWORD)v12 == -1)
    goto LABEL_30;
  v29 = &v25;
  result = (WebCore::RTCRtpTransform *)((uint64_t (*)(const char ***, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCoreeqERKNS8_15RTCRtpTransformESB_E3__0JZNS8_eqESB_SB_E3__1EEEEEJRKNS0_6__implIJNS6_6RefPtrINS8_21RTCRtpSFrameTransformENS6_12RawPtrTraitsISI_EENS6_21DefaultRefDerefTraitsISI_EEEENSH_INS8_21RTCRtpScriptTransformENSJ_ISO_EENSL_ISO_EEEEEEEEEEDcOT_DpOT0____fmatrix[v12])(&v29, v10 + 1);
  if ((_DWORD)result)
  {
LABEL_27:
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    return result;
  }
  v10 = *a2;
  if (!*a2)
  {
LABEL_13:
    v14 = (unsigned int *)v4[11];
    if (v14)
    {
      if (*(_QWORD *)v14)
      {
        v25 = (const char *)v4[11];
        v26 = (uint64_t)v14;
        v15 = v14[4];
        if ((_DWORD)v15 == -1)
          goto LABEL_30;
        v29 = &v25;
        result = (WebCore::RTCRtpTransform *)((uint64_t (*)(const char ***, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15RTCRtpTransform12clearBackendEvE3__0JZNS9_12clearBackendEvE3__1EEEEEJRNS0_6__implIJNS6_6RefPtrINS8_21RTCRtpSFrameTransformENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENSF_INS8_21RTCRtpScriptTransformENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOT_DpOT0____fmatrix[v15])(&v29, v14 + 2);
        v16 = *(_QWORD *)v14;
        *(_QWORD *)v14 = 0;
        if (v16)
        {
          v17 = (unsigned int *)(v16 + 8);
          do
          {
            v18 = __ldaxr(v17);
            v19 = v18 - 1;
          }
          while (__stlxr(v19, v17));
          if (!v19)
          {
            atomic_store(1u, v17);
            v23 = (char *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v23 = off_1E3361EB0;
            *((_QWORD *)v23 + 1) = v17;
            v25 = v23;
            WTF::ensureOnMainThread();
            result = (WebCore::RTCRtpTransform *)v25;
            v25 = 0;
            if (result)
              result = (WebCore::RTCRtpTransform *)(*(uint64_t (**)(WebCore::RTCRtpTransform *))(*(_QWORD *)result + 8))(result);
          }
        }
        v14 = (unsigned int *)v4[11];
        v4[11] = 0;
        if (!v14)
          goto LABEL_27;
      }
      else
      {
        v4[11] = 0;
      }
      result = (WebCore::RTCRtpTransform *)v14;
LABEL_26:
      WebCore::RTCRtpTransform::~RTCRtpTransform(result);
      result = (WebCore::RTCRtpTransform *)WTF::fastFree(v21, v22);
      goto LABEL_27;
    }
    goto LABEL_27;
  }
LABEL_10:
  v13 = *((unsigned int *)v10 + 4);
  if ((_DWORD)v13 != -1)
  {
    v25 = (const char *)&v29;
    if (((unsigned int (*)(const char **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore15RTCRtpTransform10isAttachedEvE3__0JZNKS9_10isAttachedEvE3__1EEEEEJRKNS0_6__implIJNS6_6RefPtrINS8_21RTCRtpSFrameTransformENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENSF_INS8_21RTCRtpScriptTransformENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOT_DpOT0____fmatrix[v13])(&v25, v10 + 1))
    {
      result = (WebCore::RTCRtpTransform *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a3 = 8;
      *((_BYTE *)a3 + 16) = 1;
      return result;
    }
    WebCore::RTCRtpTransform::attachToSender(*a2, (WebCore::RTCRtpSender *)v4, v4[11]);
    v20 = *a2;
    *a2 = 0;
    result = v4[11];
    v4[11] = (WebCore::RTCRtpTransform *)v20;
    if (!result)
      goto LABEL_27;
    goto LABEL_26;
  }
LABEL_30:
  v24 = (WebCore::RTCRtpSender *)std::__throw_bad_variant_access[abi:sn180100]();
  return (WebCore::RTCRtpTransform *)WebCore::RTCRtpSender::logger(v24);
}

uint64_t WebCore::RTCRtpSender::logger(WebCore::RTCRtpSender *this)
{
  return *((_QWORD *)this + 12);
}

char *WebCore::RTCRtpSender::logChannel(WebCore::RTCRtpSender *this)
{
  return &WebCore::LogWebRTC;
}

const char *WebCore::RTCRtpSender::logClassName(WebCore::RTCRtpSender *this)
{
  return "RTCRtpSender";
}

uint64_t WebCore::RTCRtpReceiver::logIdentifier(WebCore::RTCRtpReceiver *this)
{
  return *((_QWORD *)this + 11);
}

uint64_t WebCore::RTCRtpSFrameTransform::ref(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this + 24);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

uint64_t WebCore::RTCRtpSFrameTransform::deref(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;

  v2 = *(_QWORD *)(this + 24);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v2);
LABEL_5:
  v4 = *(_QWORD *)(v2 + 8);
  v5 = v4 - 1;
  *(_QWORD *)(v2 + 8) = v4 - 1;
  if (v4 == 1)
  {
    v9 = *(_QWORD *)(v2 + 16);
    v6 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    v7 = v9 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr((unsigned __int8 *)v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  if (!v7)
    return WTF::fastFree((WTF *)v2, a2);
  return this;
}

uint64_t WebCore::RTCRtpSFrameTransform::eventTargetInterface(WebCore::RTCRtpSFrameTransform *this)
{
  return 44;
}

uint64_t WebCore::RTCRtpSFrameTransform::refEventTarget(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this + 24);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

uint64_t WebCore::RTCRtpSFrameTransform::derefEventTarget(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;

  v2 = *(_QWORD *)(this + 24);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v2);
LABEL_5:
  v4 = *(_QWORD *)(v2 + 8);
  v5 = v4 - 1;
  *(_QWORD *)(v2 + 8) = v4 - 1;
  if (v4 == 1)
  {
    v9 = *(_QWORD *)(v2 + 16);
    v6 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    v7 = v9 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr((unsigned __int8 *)v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  if (!v7)
    return WTF::fastFree((WTF *)v2, a2);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::RTCRtpSFrameTransform::eventTargetInterface(WebCore::RTCRtpSFrameTransform *this)
{
  return 44;
}

uint64_t `non-virtual thunk to'WebCore::RTCRtpSFrameTransform::scriptExecutionContext(WebCore::RTCRtpSFrameTransform *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 3);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::RTCRtpSFrameTransform::refEventTarget(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this - 8);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::RTCRtpSFrameTransform::derefEventTarget(uint64_t this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  uint64_t v9;

  v2 = *(_QWORD *)(this - 8);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v2);
LABEL_5:
  v4 = *(_QWORD *)(v2 + 8);
  v5 = v4 - 1;
  *(_QWORD *)(v2 + 8) = v4 - 1;
  if (v4 == 1)
  {
    v9 = *(_QWORD *)(v2 + 16);
    v6 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = 0;
    v7 = v9 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 1;
  }
  v8 = __ldxr((unsigned __int8 *)v2);
  if (v8 != 1)
  {
    __clrex();
LABEL_12:
    this = WTF::Lock::unlockSlow((WTF::Lock *)v2);
    if (v5)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
    goto LABEL_12;
  if (v5)
    return this;
LABEL_13:
  if (v6)
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  if (!v7)
    return WTF::fastFree((WTF *)v2, a2);
  return this;
}

uint64_t WebCore::RTCRtpScriptTransform::ref(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 24);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

uint64_t WebCore::RTCRtpScriptTransform::deref(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = (unsigned int *)(this + 24);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
  {
    atomic_store(1u, v1);
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = off_1E32DD4B0;
    v4[1] = v1;
    v5 = (uint64_t)v4;
    WTF::ensureOnMainThread();
    this = v5;
    if (v5)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return this;
}

uint64_t WebCore::RTCRtpScriptTransformer::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::RTCRtpScriptTransformer::deref(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
  --this[6];
  return this;
}

uint64_t WebCore::RTCRtpScriptTransformer::stop(uint64_t this, void *a2)
{
  WTF *v2;
  uint64_t v3;

  v2 = *(WTF **)(this + 96);
  *(_QWORD *)(this + 96) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = *((_QWORD *)v2 + 1);
      --*(_QWORD *)(v3 + 16);
      *((_QWORD *)v2 + 1) = 0;
      if (*(_DWORD *)(v3 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
      else
        --*(_DWORD *)(v3 + 24);
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::RTCRtpSender::logIdentifier(WebCore::RTCRtpSender *this)
{
  return *((_QWORD *)this + 13);
}

void WebCore::SimpleWritableStreamSink::~SimpleWritableStreamSink(WebCore::SimpleWritableStreamSink *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E3361700;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void WebCore::SimpleWritableStreamSink::~SimpleWritableStreamSink(WebCore::SimpleWritableStreamSink *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = off_1E3361700;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::fastFree(this, a2);
}

WTF::StringImpl *WebCore::SimpleWritableStreamSink::write(uint64_t a1, uint64_t a2, uint64_t a3, WTF::StringImpl *a4)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  char v9;

  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 16) + 16))(&v7);
  result = WebCore::DOMPromiseDeferred<void>::settle(a4, (uint64_t)&v7);
  if (v9)
  {
    result = v8;
    v8 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSG_1EJSC_SE_EEEEEEDcSI_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS_4pairIN7WebCore21MessagePortIdentifierESC_EELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorINS_4pairIN7WebCore21MessagePortIdentifierESC_EELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSB_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21SerializedScriptValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  void *v5;
  uint64_t result;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v2 + 2), a2);
      return WTF::fastFree((WTF *)v2, v5);
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21SerializedScriptValueENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

double WTF::Detail::CallableWrapper<WebCore::RTCRtpScriptTransformer::enqueueFrame(WebCore::ScriptExecutionContext &,WTF::Ref<WebCore::RTCRtpTransformableFrame,WTF::RawPtrTraits<WebCore::RTCRtpTransformableFrame>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpTransformableFrame>> &&)::$_0,void,WebCore::FrameRateMonitor::LateFrameInfo>::call(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  double v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  double v15;
  __int16 v16;
  double v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  double v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE7CD60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 24);
    v9 = *(double *)a2;
    v8 = *(double *)(a2 + 8);
    v10 = *(_QWORD *)(a1 + 8);
    v11 = (*(double *)a2 - v8) * 1000.0;
    v12 = 134219264;
    v13 = v10;
    v14 = 2048;
    v15 = v9;
    v16 = 2048;
    v17 = v8;
    v18 = 2048;
    v19 = v7;
    v20 = 2048;
    v21 = v11;
    v22 = 2048;
    v23 = v6;
    _os_log_impl(&dword_1940B8000, v4, OS_LOG_TYPE_DEFAULT, "RTCRtpScriptTransformer readable %llu, frame at %f, previous frame was at %f, observed frame rate is %f, delay since last frame is %f ms, frame count is %lu", (uint8_t *)&v12, 0x3Eu);
  }
  return result;
}

WebCore::RTCRtpSFrameTransformer *WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::RTCRtpSFrameTransformer,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1, void *a2)
{
  WebCore::RTCRtpSFrameTransformer *result;
  WTF *v3;
  void *v4;

  result = *(WebCore::RTCRtpSFrameTransformer **)(a1 + 8);
  if (result)
  {
    WebCore::RTCRtpSFrameTransformer::~RTCRtpSFrameTransformer(result, a2);
    return (WebCore::RTCRtpSFrameTransformer *)WTF::fastFree(v3, v4);
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::RTCRtpTransformBackend,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) + 8))(*(_QWORD *)(a1 + 8) - 8);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RTCRtpSFrameTransform::initializeTransformer(WebCore::RTCRtpTransformBackend &,WebCore::RTCRtpSFrameTransform::Side)::$_0,void,WTF::Ref<WebCore::RTCRtpTransformableFrame,WTF::RawPtrTraits<WebCore::RTCRtpTransformableFrame>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpTransformableFrame>> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E3361808;
  WebCore::RTCRtpSFrameTransform::initializeTransformer(WebCore::RTCRtpTransformBackend &,WebCore::RTCRtpSFrameTransform::Side)::$_0::~$_0((uint64_t)(a1 + 2), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCRtpSFrameTransform::initializeTransformer(WebCore::RTCRtpTransformBackend &,WebCore::RTCRtpSFrameTransform::Side)::$_0,void,WTF::Ref<WebCore::RTCRtpTransformableFrame,WTF::RawPtrTraits<WebCore::RTCRtpTransformableFrame>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpTransformableFrame>> &&>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E3361808;
  WebCore::RTCRtpSFrameTransform::initializeTransformer(WebCore::RTCRtpTransformBackend &,WebCore::RTCRtpSFrameTransform::Side)::$_0::~$_0((uint64_t)a1 + 16, a2);
  return WTF::fastFree(a1, v3);
}

uint64_t (**WTF::Detail::CallableWrapper<WebCore::RTCRtpSFrameTransform::initializeTransformer(WebCore::RTCRtpTransformBackend &,WebCore::RTCRtpSFrameTransform::Side)::$_0,void,WTF::Ref<WebCore::RTCRtpTransformableFrame,WTF::RawPtrTraits<WebCore::RTCRtpTransformableFrame>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpTransformableFrame>> &&>::call(uint64_t a1, _QWORD *a2))()
{
  uint64_t (**result)();
  unint64_t v5;
  BOOL v6;
  uint64_t v7;
  __int128 v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  unsigned int v12;
  char v13;
  _OWORD v14[2];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  result = (uint64_t (**)())(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 16))(*a2);
  if (result)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (!v6)
  {
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(_OWORD *)(a1 + 48);
    v14[0] = *(_OWORD *)(a1 + 32);
    v14[1] = v8;
    result = (uint64_t (**)())WebCore::processFrame((uint64_t)&v11, result, v5, v7, (uint64_t)v14, (unsigned __int8 *)(a1 + 72));
    if (v13)
    {
      v9 = v11;
      (*(void (**)(_QWORD, WTF *, _QWORD))(*(_QWORD *)*a2 + 24))(*a2, v11, v12);
      result = (uint64_t (**)())(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 64) + 32))(*(_QWORD *)(a1 + 64), *a2);
      if (v9)
        return (uint64_t (**)())WTF::fastFree(v9, v10);
    }
  }
  return result;
}

uint64_t WebCore::processFrame(uint64_t a1, uint64_t (**a2)(), unint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6)
{
  WTF::StringImpl *v9;
  int v10;
  int v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  NSObject *v14;
  __int128 v15;
  uint64_t v16;
  WTF::StringImpl *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  int v24;
  int *v26;
  uint64_t *v27;
  void *v28;
  uint64_t v29;
  int v30;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  int v40;
  uint8_t buf[8];
  char v42;
  _OWORD v43[2];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a4 + 5))
  {
    if (*(_BYTE *)(a4 + 72))
      WebCore::RTCRtpSFrameTransformer::encryptFrame((uint64_t)&v37, a4, a2, a3);
    else
      WebCore::RTCRtpSFrameTransformer::decryptFrame((unint64_t)&v37, a4, a2, a3);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v37) = 0;
    v39 = 0;
    v40 = 1;
  }
  v10 = v40;
  if (v40)
  {
    if (v40 != 1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_80;
    }
    v11 = v37;
    v12 = v38;
    v13 = v39;
    v38 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v9);
      else
        *(_DWORD *)v12 -= 2;
    }
    v14 = qword_1ECE7CD60;
    if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v11;
      _os_log_error_impl(&dword_1940B8000, v14, OS_LOG_TYPE_ERROR, "RTCRtpSFrameTransform failed transforming a frame with error %hhu", buf, 8u);
    }
    v15 = *(_OWORD *)(a5 + 16);
    v43[0] = *(_OWORD *)a5;
    v43[1] = v15;
    v16 = *(_QWORD *)a6;
    if (!*(_QWORD *)a6)
    {
      a5 = 0;
      goto LABEL_26;
    }
    if (__ldaxr((unsigned __int8 *)v16))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v16))
    {
      goto LABEL_19;
    }
    MEMORY[0x19AEA534C](v16);
LABEL_19:
    if (*(_QWORD *)(v16 + 24))
    {
      ++*(_QWORD *)(v16 + 16);
      a5 = v16;
    }
    else
    {
      a5 = 0;
    }
    v19 = __ldxr((unsigned __int8 *)v16);
    if (v19 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v16))
      {
LABEL_26:
        v20 = *((_QWORD *)a6 + 1);
        v21 = WTF::fastMalloc((WTF *)0x30);
        *(_QWORD *)v21 = &off_1E3361830;
        *(_BYTE *)(v21 + 8) = v11;
        *(_QWORD *)(v21 + 16) = 0;
        *(_QWORD *)(v21 + 24) = v13;
        if (!a5)
        {
          v23 = 0;
          goto LABEL_38;
        }
        if (__ldaxr((unsigned __int8 *)a5))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)a5))
        {
          goto LABEL_31;
        }
        MEMORY[0x19AEA534C](a5);
LABEL_31:
        if (*(_QWORD *)(a5 + 24))
        {
          ++*(_QWORD *)(a5 + 16);
          v23 = a5;
        }
        else
        {
          v23 = 0;
        }
        v24 = __ldxr((unsigned __int8 *)a5);
        if (v24 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)a5))
          {
LABEL_38:
            *(_QWORD *)(v21 + 32) = v23;
            *(_QWORD *)(v21 + 40) = v20;
            *(_QWORD *)buf = v21;
            v42 = 0;
            a6 = WebCore::allScriptExecutionContextsMapLock;
            if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
            {
              __clrex();
            }
            else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
            {
              goto LABEL_42;
            }
            MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_42:
            v26 = &webThreadDelegateMessageScopeCount;
            {
LABEL_43:
              v27 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v43);
              if (v27)
              {
                v29 = v27[4];
                if (v29)
                  (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v29 + 336))(v29, buf);
              }
              v30 = __ldxr(a6);
              if (v30 == 1)
              {
                if (!__stlxr(0, a6))
                {
LABEL_51:
                  result = *(_QWORD *)buf;
                  *(_QWORD *)buf = 0;
                  if (result)
                    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
                  if (!a5)
                  {
LABEL_66:
                    *(_BYTE *)a1 = 0;
                    *(_BYTE *)(a1 + 16) = 0;
                    v10 = v40;
                    if (v40 == -1)
                      return result;
                    return ((uint64_t (*)(uint8_t *, uint64_t *))off_1E3361848[v10])(buf, &v37);
                  }
                  if (__ldaxr((unsigned __int8 *)a5))
                  {
                    __clrex();
                  }
                  else if (!__stxr(1u, (unsigned __int8 *)a5))
                  {
                    goto LABEL_58;
                  }
                  result = MEMORY[0x19AEA534C](a5);
LABEL_58:
                  v33 = *(_QWORD *)(a5 + 16) - 1;
                  *(_QWORD *)(a5 + 16) = v33;
                  if (!v33)
                  {
                    v34 = *(_QWORD *)(a5 + 8);
                    v35 = __ldxr((unsigned __int8 *)a5);
                    if (v35 == 1)
                    {
                      if (!__stlxr(0, (unsigned __int8 *)a5))
                      {
                        if (v34)
                          goto LABEL_66;
LABEL_65:
                        result = WTF::fastFree((WTF *)a5, v28);
                        goto LABEL_66;
                      }
                    }
                    else
                    {
                      __clrex();
                    }
                    result = WTF::Lock::unlockSlow((WTF::Lock *)a5);
                    if (v34)
                      goto LABEL_66;
                    goto LABEL_65;
                  }
                  v36 = __ldxr((unsigned __int8 *)a5);
                  if (v36 == 1)
                  {
                    if (!__stlxr(0, (unsigned __int8 *)a5))
                      goto LABEL_66;
                  }
                  else
                  {
                    __clrex();
                  }
                  result = WTF::Lock::unlockSlow((WTF::Lock *)a5);
                  goto LABEL_66;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
              goto LABEL_51;
            }
LABEL_80:
            WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
            *((_BYTE *)v26 + 2080) = 1;
            goto LABEL_43;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)a5);
        goto LABEL_38;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v16);
    goto LABEL_26;
  }
  *(_QWORD *)a1 = v37;
  v18 = v38;
  v37 = 0;
  v38 = 0;
  *(_QWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 16) = 1;
  return ((uint64_t (*)(uint8_t *, uint64_t *))off_1E3361848[v10])(buf, &v37);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::processFrame(std::span<unsigned char const,18446744073709551615ul>,WebCore::RTCRtpSFrameTransformer &,WebCore::ProcessQualified<WTF::UUID>,WTF::ThreadSafeWeakPtr<WebCore::RTCRtpSFrameTransform> const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl *v8;
  int v10;

  *a1 = &off_1E3361830;
  v3 = a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (__ldaxr((unsigned __int8 *)v3))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v3))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v3);
LABEL_6:
    v5 = *(_QWORD *)(v3 + 16) - 1;
    *(_QWORD *)(v3 + 16) = v5;
    if (!v5)
    {
      v6 = *(_QWORD *)(v3 + 8);
      v7 = __ldxr((unsigned __int8 *)v3);
      if (v7 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v3))
        {
          if (v6)
            goto LABEL_14;
LABEL_13:
          WTF::fastFree((WTF *)v3, a2);
          goto LABEL_14;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v3);
      if (v6)
        goto LABEL_14;
      goto LABEL_13;
    }
    v10 = __ldxr((unsigned __int8 *)v3);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        goto LABEL_14;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
LABEL_14:
  v8 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::processFrame(std::span<unsigned char const,18446744073709551615ul>,WebCore::RTCRtpSFrameTransformer &,WebCore::ProcessQualified<WTF::UUID>,WTF::ThreadSafeWeakPtr<WebCore::RTCRtpSFrameTransform> const&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  WTF::StringImpl *v8;
  int v10;

  *(_QWORD *)this = &off_1E3361830;
  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (__ldaxr((unsigned __int8 *)v3))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v3))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v3);
LABEL_6:
    v5 = *(_QWORD *)(v3 + 16) - 1;
    *(_QWORD *)(v3 + 16) = v5;
    if (!v5)
    {
      v6 = *(_QWORD *)(v3 + 8);
      v7 = __ldxr((unsigned __int8 *)v3);
      if (v7 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v3))
        {
          if (v6)
            goto LABEL_14;
LABEL_13:
          WTF::fastFree((WTF *)v3, a2);
          goto LABEL_14;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v3);
      if (v6)
        goto LABEL_14;
      goto LABEL_13;
    }
    v10 = __ldxr((unsigned __int8 *)v3);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        goto LABEL_14;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
  }
LABEL_14:
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::processFrame(std::span<unsigned char const,18446744073709551615ul>,WebCore::RTCRtpSFrameTransformer &,WebCore::ProcessQualified<WTF::UUID>,WTF::ThreadSafeWeakPtr<WebCore::RTCRtpSFrameTransform> const&)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  int v20;
  int v21;
  WebCore *v22;
  WebCore *v23;
  uint64_t v24;
  WebCore *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  uint64_t v37;

  v2 = *(_QWORD *)(result + 32);
  if (!v2)
    return result;
  v3 = result;
  v4 = *(_QWORD **)(result + 40);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v2);
LABEL_6:
  if (*(_QWORD *)(v2 + 24))
    ++*(_QWORD *)(v2 + 8);
  else
    v4 = 0;
  v6 = __ldxr((unsigned __int8 *)v2);
  if (v6 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v2))
    {
      if (!v4)
        return result;
      goto LABEL_15;
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v2);
  if (!v4)
    return result;
LABEL_15:
  v7 = v4[1];
  if (!v7)
    goto LABEL_49;
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8 || *(_BYTE *)(v8 + 180))
    goto LABEL_49;
  v9 = *(unsigned __int8 *)(v3 + 8);
  if (!*(_BYTE *)(v3 + 8))
  {
    v10 = *(_QWORD *)(v3 + 24);
    v11 = v4[8];
    v12 = (unsigned __int8 *)(v11 + 4);
    if (__ldaxr((unsigned __int8 *)(v11 + 4)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v12))
    {
      goto LABEL_23;
    }
    result = MEMORY[0x19AEA534C](v11 + 4);
LABEL_23:
    v14 = *(_DWORD *)(v11 + 68);
    if (v14)
    {
      v15 = *(uint64_t **)(v11 + 56);
      v16 = 24 * v14 - 24;
      do
      {
        v17 = *v15;
        v15 += 3;
        v18 = v17 == v10;
        v19 = v17 == v10 || v16 == 0;
        v16 -= 24;
      }
      while (!v19);
    }
    else
    {
      v18 = 0;
    }
    v20 = __ldxr(v12);
    if (v20 == 1)
    {
      if (!__stlxr(0, v12))
        goto LABEL_37;
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v12);
LABEL_37:
    if (v18)
      goto LABEL_49;
    v9 = *(unsigned __int8 *)(v3 + 8);
  }
  if (v9 >= 3)
  {
    result = 120;
    __break(0xC471u);
    return result;
  }
  v21 = dword_1968DEC78[(char)v9];
  v22 = (WebCore *)bmalloc::api::isoAllocate();
  v23 = v22;
  v24 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v24 || (v25 = *(WebCore **)(v24 + 96)) == 0)
  {
    v22 = (WebCore *)WebCore::threadGlobalDataSlow(v22);
    v25 = v22;
  }
  v26 = *((_QWORD *)v25 + 5);
  if (!v26)
  {
    v22 = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v25);
    v26 = *((_QWORD *)v25 + 5);
  }
  WTF::MonotonicTime::now(v22);
  *((_QWORD *)v23 + 1) = 0;
  v28 = *((_DWORD *)v23 + 5) & 0xFFC00000 | 0x158200 | (*(_QWORD *)(v26 + 784) != 0);
  *((_DWORD *)v23 + 4) = 1;
  *((_DWORD *)v23 + 5) = v28;
  v29 = *(_DWORD **)(v26 + 784);
  if (v29)
    *v29 += 2;
  *((_QWORD *)v23 + 5) = 0;
  *((_QWORD *)v23 + 6) = 0;
  *((_QWORD *)v23 + 3) = v29;
  *((_QWORD *)v23 + 4) = 0;
  *((_QWORD *)v23 + 7) = v27;
  *((_QWORD *)v23 + 8) = 0;
  *(_QWORD *)v23 = off_1E3361CF8;
  *((_DWORD *)v23 + 18) = v21;
  result = (*(uint64_t (**)(_QWORD *, WebCore *))(v4[4] + 48))(v4 + 4, v23);
  if (*((_DWORD *)v23 + 4) == 1)
    result = (*(uint64_t (**)(WebCore *))(*(_QWORD *)v23 + 8))(v23);
  else
    --*((_DWORD *)v23 + 4);
LABEL_49:
  v30 = v4[3];
  if (__ldaxr((unsigned __int8 *)v30))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v30))
  {
    goto LABEL_53;
  }
  result = MEMORY[0x19AEA534C](v30);
LABEL_53:
  v32 = *(_QWORD *)(v30 + 8);
  v33 = v32 - 1;
  *(_QWORD *)(v30 + 8) = v32 - 1;
  if (v32 == 1)
  {
    v37 = *(_QWORD *)(v30 + 16);
    v34 = *(_QWORD *)(v30 + 24);
    *(_QWORD *)(v30 + 24) = 0;
    v35 = v37 != 0;
  }
  else
  {
    v34 = 0;
    v35 = 1;
  }
  v36 = __ldxr((unsigned __int8 *)v30);
  if (v36 != 1)
  {
    __clrex();
LABEL_60:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v30);
    if (v33)
      return result;
    goto LABEL_61;
  }
  if (__stlxr(0, (unsigned __int8 *)v30))
    goto LABEL_60;
  if (v33)
    return result;
LABEL_61:
  if (v34)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34);
  if (!v35)
    return WTF::fastFree((WTF *)v30, a2);
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore23RTCRtpSFrameTransformer16ErrorInformationEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSC_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore23RTCRtpSFrameTransformer16ErrorInformationEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSC_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RTCRtpSFrameTransform::createStreams(void)::$_0,WebCore::ExceptionOr<void>,WebCore::ScriptExecutionContext &,JSC::JSValue>::~CallableWrapper(_QWORD *a1, void *a2)
{
  *a1 = off_1E3361868;
  WebCore::RTCRtpSFrameTransform::createStreams(void)::$_0::~$_0((uint64_t)(a1 + 1), a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCRtpSFrameTransform::createStreams(void)::$_0,WebCore::ExceptionOr<void>,WebCore::ScriptExecutionContext &,JSC::JSValue>::~CallableWrapper(WTF *a1, void *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E3361868;
  WebCore::RTCRtpSFrameTransform::createStreams(void)::$_0::~$_0((uint64_t)a1 + 8, a2);
  return WTF::fastFree(a1, v3);
}

void WTF::Detail::CallableWrapper<WebCore::RTCRtpSFrameTransform::createStreams(void)::$_0,WebCore::ExceptionOr<void>,WebCore::ScriptExecutionContext &,JSC::JSValue>::call(WebCore::ScriptExecutionContext *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  char **v12;
  BOOL v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  _DWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD **v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::ScriptExecutionContext *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  WebCore::ScriptExecutionContext *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::ScriptExecutionContext *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  WebCore::ScriptExecutionContext *v45;
  uint64_t v46;
  _QWORD **v47;
  _QWORD *v48;
  unsigned int v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (!WebCore::ScriptExecutionContext::globalObject(this))
  {
    *(_BYTE *)a4 = 8;
    *(_QWORD *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 16) = 1;
    return;
  }
  v8 = (_QWORD *)WebCore::ScriptExecutionContext::globalObject(this);
  v9 = v8[7];
  v25 = v9;
  if ((a3 & 0xFFFE000000000002) != 0)
    goto LABEL_30;
  v10 = *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C);
  v11 = *(_DWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C) != 0;
  v12 = (char **)(16 * v10);
  if ((_DWORD)v10)
    v13 = v12 == &WebCore::JSRTCEncodedAudioFrame::s_info;
  else
    v13 = 1;
  v14 = *(_DWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C) != 0;
  if (!v13)
  {
    v15 = 16 * v10;
    do
    {
      v15 = *(_QWORD *)(v15 + 16);
      v14 = v15 != 0;
    }
    while ((char **)v15 != &WebCore::JSRTCEncodedAudioFrame::s_info && v15 != 0);
  }
  if (!v14 || (v17 = *(_QWORD *)(a3 + 24)) == 0)
  {
    if ((_DWORD)v10 && v12 != &WebCore::JSRTCEncodedVideoFrame::s_info)
    {
      do
      {
        v12 = (char **)v12[2];
        v11 = v12 != 0;
      }
      while (v12 != &WebCore::JSRTCEncodedVideoFrame::s_info && v12 != 0);
    }
    if (v11)
    {
      v17 = *(_QWORD *)(a3 + 24);
      if (v17)
      {
        v18 = 3;
        goto LABEL_26;
      }
    }
LABEL_30:
    v20 = (_DWORD *)JSC::JSArrayBuffer::toWrapped(v9, a3);
    if (v20)
    {
      *v20 += 2;
      LODWORD(v28) = 0;
      v27 = 0;
      v48 = v20;
      v49 = 0;
      v50 = 0;
      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15ArrayBufferViewENSC_ISH_EENSE_ISH_EEEENS9_IN7WebCore20RTCEncodedAudioFrameENSC_ISM_EENSE_ISM_EEEENS9_INSL_20RTCEncodedVideoFrameENSC_ISQ_EENSE_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJSG_SK_SP_ST_EEEEEEDcSX_DpT0_((uint64_t)v20, &v27);
    }
    else
    {
      JSC::JSArrayBufferView::toWrapped((JSC::JSArrayBufferView *)a3, (JSC::ArrayBufferView **)&v27);
      if (v27)
      {
        v48 = v27;
        v49 = 1;
        v50 = 0;
      }
      else
      {
        JSC::throwTypeError();
        v50 = 1;
      }
    }
    goto LABEL_35;
  }
  v18 = 2;
LABEL_26:
  ++*(_DWORD *)(v17 + 8);
  v27 = (_QWORD *)v17;
  LODWORD(v28) = v18;
  LOBYTE(v29) = 1;
  LOBYTE(v48) = 0;
  v49 = -1;
  ((void (*)(_QWORD ***, _QWORD **, _QWORD **))off_1E33618A0[v18])(&v47, &v48, &v27);
  v49 = v18;
  v50 = 0;
  if ((_BYTE)v29 && (_DWORD)v28 != -1)
    ((void (*)(_QWORD ***, _QWORD **))off_1E3361880[v28])(&v47, &v27);
LABEL_35:
  v21 = v50;
  if (v50)
  {
    *(_BYTE *)a4 = 37;
    *(_QWORD *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 16) = 1;
  }
  else
  {
    LOBYTE(v25) = 0;
    v26 = -1;
    v22 = v49;
    if (v49 != -1)
    {
      ((void (*)(_QWORD **, uint64_t *, _QWORD **))off_1E33618A0[v49])(&v27, &v25, &v48);
      v26 = v22;
    }
    v27 = v8;
    v28 = a2 + 8;
    v29 = a2 + 16;
    v30 = this;
    v31 = a2 + 24;
    v32 = v8;
    v33 = a2 + 8;
    v34 = a2 + 16;
    v35 = this;
    v36 = a2 + 24;
    v37 = v8;
    v38 = a2 + 8;
    v39 = a2 + 16;
    v40 = this;
    v41 = a2 + 24;
    v42 = v8;
    v43 = a2 + 8;
    v44 = a2 + 16;
    v45 = this;
    v46 = a2 + 24;
    if ((_DWORD)v22 == -1)
    {
      v23 = std::__throw_bad_variant_access[abi:sn180100]();
      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15ArrayBufferViewENSC_ISH_EENSE_ISH_EEEENS9_IN7WebCore20RTCEncodedAudioFrameENSC_ISM_EENSE_ISM_EEEENS9_INSL_20RTCEncodedVideoFrameENSC_ISQ_EENSE_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJSG_SK_SP_ST_EEEEEEDcSX_DpT0_(v23, v24);
      return;
    }
    v47 = &v27;
    ((void (*)(_QWORD ***, uint64_t *))off_1E33618C0[v22])(&v47, &v25);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    if (v26 != -1)
      ((void (*)(_QWORD **, uint64_t *))off_1E3361880[v26])(&v27, &v25);
    v21 = v50;
  }
  if (v21 != -1)
    ((void (*)(_QWORD **, _QWORD **))off_1E33618E0[v21])(&v27, &v48);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15ArrayBufferViewENSC_ISH_EENSE_ISH_EEEENS9_IN7WebCore20RTCEncodedAudioFrameENSC_ISM_EENSE_ISM_EEEENS9_INSL_20RTCEncodedVideoFrameENSC_ISQ_EENSE_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJSG_SK_SP_ST_EEEEEEDcSX_DpT0_(uint64_t a1, _QWORD **a2)
{
  _QWORD *v2;
  BOOL v3;
  uint64_t v4;
  void *v5;
  WTF **v6;
  WTF *v7;
  WTF *v8;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    v3 = *(_DWORD *)v2 == 2;
    *(_DWORD *)v2 -= 2;
    if (v3)
    {
      v4 = v2[10];
      if (v4)
      {
        *(_QWORD *)(v4 + 8) = 3;
        v2[10] = 0;
      }
      if ((v2[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v2 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v2 + 2));
      v6 = (WTF **)v2[1];
      if ((v6 & 1) == 0 && v6)
      {
        v8 = (WTF *)v2[1];
        v7 = *v6;
        if (*v6)
        {
          *(_QWORD *)v8 = 0;
          *((_DWORD *)v8 + 2) = 0;
          WTF::fastFree(v7, v5);
        }
        WTF::fastFree(v8, v5);
      }
      WTF::fastFree((WTF *)v2, v5);
    }
  }
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15ArrayBufferViewENSC_ISH_EENSE_ISH_EEEENS9_IN7WebCore20RTCEncodedAudioFrameENSC_ISM_EENSE_ISM_EEEENS9_INSL_20RTCEncodedVideoFrameENSC_ISQ_EENSE_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJSG_SK_SP_ST_EEEEEEDcSX_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*result == 1)
      return (_DWORD *)JSC::ArrayBufferView::operator delete();
    else
      --*result;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15ArrayBufferViewENSC_ISH_EENSE_ISH_EEEENS9_IN7WebCore20RTCEncodedAudioFrameENSC_ISM_EENSE_ISM_EEEENS9_INSL_20RTCEncodedVideoFrameENSC_ISQ_EENSE_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJSG_SK_SP_ST_EEEEEEDcSX_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15ArrayBufferViewENSC_ISH_EENSE_ISH_EEEENS9_IN7WebCore20RTCEncodedAudioFrameENSC_ISM_EENSE_ISM_EEEENS9_INSL_20RTCEncodedVideoFrameENSC_ISQ_EENSE_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJSG_SK_SP_ST_EEEEEEDcSX_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15ArrayBufferViewENSC_ISH_EENSE_ISH_EEEENS9_IN7WebCore20RTCEncodedAudioFrameENSC_ISM_EENSE_ISM_EEEENS9_INSL_20RTCEncodedVideoFrameENSC_ISQ_EENSE_ISQ_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JRNS0_6__baseILSY_1EJSG_SK_SP_ST_EEEOS19_EEEDcS11_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15ArrayBufferViewENSC_ISH_EENSE_ISH_EEEENS9_IN7WebCore20RTCEncodedAudioFrameENSC_ISM_EENSE_ISM_EEEENS9_INSL_20RTCEncodedVideoFrameENSC_ISQ_EENSE_ISQ_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JRNS0_6__baseILSY_1EJSG_SK_SP_ST_EEEOS19_EEEDcS11_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15ArrayBufferViewENSC_ISH_EENSE_ISH_EEEENS9_IN7WebCore20RTCEncodedAudioFrameENSC_ISM_EENSE_ISM_EEEENS9_INSL_20RTCEncodedVideoFrameENSC_ISQ_EENSE_ISQ_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JRNS0_6__baseILSY_1EJSG_SK_SP_ST_EEEOS19_EEEDcS11_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN3JSC11ArrayBufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15ArrayBufferViewENSC_ISH_EENSE_ISH_EEEENS9_IN7WebCore20RTCEncodedAudioFrameENSC_ISM_EENSE_ISM_EEEENS9_INSL_20RTCEncodedVideoFrameENSC_ISQ_EENSE_ISQ_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISU_LNS0_6_TraitE1EEEEEvRSV_OT_EUlRS11_OT0_E_JRNS0_6__baseILSY_1EJSG_SK_SP_ST_EEEOS19_EEEDcS11_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ExceptionOr<void> WebCore::RTCRtpSFrameTransform::createStreams(void)::$_0::operator()<WebCore::ScriptExecutionContext,JSC::JSValue> const(WebCore::ScriptExecutionContext &,JSC::JSValue)::{lambda(WTF::RefPtr<WebCore::RTCEncodedAudioFrame,WTF::RawPtrTraits<WebCore::RTCEncodedAudioFrame>,WTF::DefaultRefDerefTraits<WebCore::RTCEncodedAudioFrame>> &)#1},WebCore::ExceptionOr<void> WebCore::RTCRtpSFrameTransform::createStreams(void)::$_0::operator()<WebCore::ScriptExecutionContext,JSC::JSValue> const(WebCore::ScriptExecutionContext &,JSC::JSValue)::{lambda(WTF::RefPtr<WebCore::RTCEncodedVideoFrame,WTF::RawPtrTraits<WebCore::RTCEncodedVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::RTCEncodedVideoFrame>> &)#1},WebCore::ExceptionOr<void> WebCore::RTCRtpSFrameTransform::createStreams(void)::$_0::operator()<WebCore::ScriptExecutionContext,JSC::JSValue> const(WebCore::ScriptExecutionContext &,JSC::JSValue)::{lambda(WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> &)#1},WebCore::ExceptionOr<void> WebCore::RTCRtpSFrameTransform::createStreams(void)::$_0::operator()<WebCore::ScriptExecutionContext,JSC::JSValue> const(WebCore::ScriptExecutionContext &,JSC::JSValue)::{lambda(WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>> &)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<WebCore::RTCEncodedAudioFrame,WTF::RawPtrTraits<WebCore::RTCEncodedAudioFrame>,WTF::DefaultRefDerefTraits<WebCore::RTCEncodedAudioFrame>>,WTF::RefPtr<WebCore::RTCEncodedVideoFrame,WTF::RawPtrTraits<WebCore::RTCEncodedVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::RTCEncodedVideoFrame>>> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (**v4)();
  uint64_t v5;
  unint64_t v6;
  WebCore *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = *a2;
  v4 = *(uint64_t (***)())(*a2 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
    if (v5)
    {
      if (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
        v4 = (uint64_t (**)())(((unint64_t)v4 & 0x3FFFFFFFFLL) + v5);
    }
  }
  if (*(_BYTE *)(v3 + 64) && (v13 = *(_QWORD *)(v3 + 32)) != 0)
    v6 = *(_QWORD *)(v13 + 32);
  else
    v6 = *(_QWORD *)(v3 + 48);
  v7 = *(WebCore **)(v2 + 80);
  v8 = **(_QWORD **)(v2 + 88);
  v9 = *(_QWORD *)(v2 + 104);
  v10 = **(_QWORD **)(v2 + 96);
  v11 = *(_OWORD *)(v9 + 240);
  v14[0] = *(_OWORD *)(v9 + 224);
  v14[1] = v11;
  return WebCore::transformFrame(v4, v6, v7, v8, v10, v14, *(unsigned __int8 **)(v2 + 112));
}

uint64_t *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ExceptionOr<void> WebCore::RTCRtpSFrameTransform::createStreams(void)::$_0::operator()<WebCore::ScriptExecutionContext,JSC::JSValue> const(WebCore::ScriptExecutionContext &,JSC::JSValue)::{lambda(WTF::RefPtr<WebCore::RTCEncodedAudioFrame,WTF::RawPtrTraits<WebCore::RTCEncodedAudioFrame>,WTF::DefaultRefDerefTraits<WebCore::RTCEncodedAudioFrame>> &)#1},WebCore::ExceptionOr<void> WebCore::RTCRtpSFrameTransform::createStreams(void)::$_0::operator()<WebCore::ScriptExecutionContext,JSC::JSValue> const(WebCore::ScriptExecutionContext &,JSC::JSValue)::{lambda(WTF::RefPtr<WebCore::RTCEncodedVideoFrame,WTF::RawPtrTraits<WebCore::RTCEncodedVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::RTCEncodedVideoFrame>> &)#1},WebCore::ExceptionOr<void> WebCore::RTCRtpSFrameTransform::createStreams(void)::$_0::operator()<WebCore::ScriptExecutionContext,JSC::JSValue> const(WebCore::ScriptExecutionContext &,JSC::JSValue)::{lambda(WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> &)#1},WebCore::ExceptionOr<void> WebCore::RTCRtpSFrameTransform::createStreams(void)::$_0::operator()<WebCore::ScriptExecutionContext,JSC::JSValue> const(WebCore::ScriptExecutionContext &,JSC::JSValue)::{lambda(WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>> &)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<WebCore::RTCEncodedAudioFrame,WTF::RawPtrTraits<WebCore::RTCEncodedAudioFrame>,WTF::DefaultRefDerefTraits<WebCore::RTCEncodedAudioFrame>>,WTF::RefPtr<WebCore::RTCEncodedVideoFrame,WTF::RawPtrTraits<WebCore::RTCEncodedVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::RTCEncodedVideoFrame>>> &>(uint64_t *a1, JSC::ArrayBufferView **a2)
{
  uint64_t v2;
  uint64_t (**v3)();
  WebCore *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  _OWORD v11[2];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = (uint64_t (**)())JSC::ArrayBufferView::span(*a2);
  v4 = *(WebCore **)(v2 + 120);
  v5 = **(_QWORD **)(v2 + 128);
  v6 = *(_QWORD *)(v2 + 144);
  v7 = **(_QWORD **)(v2 + 136);
  v8 = *(_OWORD *)(v6 + 240);
  v11[0] = *(_OWORD *)(v6 + 224);
  v11[1] = v8;
  return WebCore::transformFrame(v3, v9, v4, v5, v7, v11, *(unsigned __int8 **)(v2 + 152));
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ExceptionOr<void> WebCore::RTCRtpSFrameTransform::createStreams(void)::$_0::operator()<WebCore::ScriptExecutionContext,JSC::JSValue> const(WebCore::ScriptExecutionContext &,JSC::JSValue)::{lambda(WTF::RefPtr<WebCore::RTCEncodedAudioFrame,WTF::RawPtrTraits<WebCore::RTCEncodedAudioFrame>,WTF::DefaultRefDerefTraits<WebCore::RTCEncodedAudioFrame>> &)#1},WebCore::ExceptionOr<void> WebCore::RTCRtpSFrameTransform::createStreams(void)::$_0::operator()<WebCore::ScriptExecutionContext,JSC::JSValue> const(WebCore::ScriptExecutionContext &,JSC::JSValue)::{lambda(WTF::RefPtr<WebCore::RTCEncodedVideoFrame,WTF::RawPtrTraits<WebCore::RTCEncodedVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::RTCEncodedVideoFrame>> &)#1},WebCore::ExceptionOr<void> WebCore::RTCRtpSFrameTransform::createStreams(void)::$_0::operator()<WebCore::ScriptExecutionContext,JSC::JSValue> const(WebCore::ScriptExecutionContext &,JSC::JSValue)::{lambda(WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> &)#1},WebCore::ExceptionOr<void> WebCore::RTCRtpSFrameTransform::createStreams(void)::$_0::operator()<WebCore::ScriptExecutionContext,JSC::JSValue> const(WebCore::ScriptExecutionContext &,JSC::JSValue)::{lambda(WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>> &)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<WebCore::RTCEncodedAudioFrame,WTF::RawPtrTraits<WebCore::RTCEncodedAudioFrame>,WTF::DefaultRefDerefTraits<WebCore::RTCEncodedAudioFrame>>,WTF::RefPtr<WebCore::RTCEncodedVideoFrame,WTF::RawPtrTraits<WebCore::RTCEncodedVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::RTCEncodedVideoFrame>>> &>(uint64_t **a1, WTF **a2)
{
  uint64_t *v2;
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int8 *v9;
  uint64_t (**v10)();
  unint64_t v11;
  int v12;
  WTF *v13;
  unint64_t v14;
  void *v15;
  _DWORD *result;
  uint64_t v17;
  WTF *v18;
  unsigned __int8 v19;
  _DWORD *v20;
  _OWORD v21[2];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = *a2;
  v4 = **a1;
  v5 = *(_QWORD *)(*a1)[1];
  v6 = (*a1)[3];
  v7 = *(_QWORD *)(*a1)[2];
  v8 = *(_OWORD *)(v6 + 240);
  v21[0] = *(_OWORD *)(v6 + 224);
  v21[1] = v8;
  v9 = (unsigned __int8 *)v2[4];
  WebCore::RTCEncodedFrame::rtcFrame((uint64_t)v3, &v20);
  v10 = (uint64_t (**)())(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v20 + 16))(v20);
  WebCore::processFrame((uint64_t)&v18, v10, v11, v5, (uint64_t)v21, v9);
  v12 = v19;
  v13 = v18;
  (*(void (**)(void))(*(_QWORD *)v20 + 24))();
  v14 = WebCore::wrap<WebCore::RTCEncodedAudioFrame>(v4, v4, v3);
  if (*(_BYTE *)(v7 + 48))
  {
    if (!v12)
      goto LABEL_8;
LABEL_6:
    if (v13)
      WTF::fastFree(v13, v15);
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v7 + 24))
  {
    v17 = std::__throw_bad_optional_access[abi:sn180100]();
    return (_DWORD *)std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ExceptionOr<void> WebCore::RTCRtpSFrameTransform::createStreams(void)::$_0::operator()<WebCore::ScriptExecutionContext,JSC::JSValue> const(WebCore::ScriptExecutionContext &,JSC::JSValue)::{lambda(WTF::RefPtr<WebCore::RTCEncodedAudioFrame,WTF::RawPtrTraits<WebCore::RTCEncodedAudioFrame>,WTF::DefaultRefDerefTraits<WebCore::RTCEncodedAudioFrame>> &)#1},WebCore::ExceptionOr<void> WebCore::RTCRtpSFrameTransform::createStreams(void)::$_0::operator()<WebCore::ScriptExecutionContext,JSC::JSValue> const(WebCore::ScriptExecutionContext &,JSC::JSValue)::{lambda(WTF::RefPtr<WebCore::RTCEncodedVideoFrame,WTF::RawPtrTraits<WebCore::RTCEncodedVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::RTCEncodedVideoFrame>> &)#1},WebCore::ExceptionOr<void> WebCore::RTCRtpSFrameTransform::createStreams(void)::$_0::operator()<WebCore::ScriptExecutionContext,JSC::JSValue> const(WebCore::ScriptExecutionContext &,JSC::JSValue)::{lambda(WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> &)#1},WebCore::ExceptionOr<void> WebCore::RTCRtpSFrameTransform::createStreams(void)::$_0::operator()<WebCore::ScriptExecutionContext,JSC::JSValue> const(WebCore::ScriptExecutionContext &,JSC::JSValue)::{lambda(WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>> &)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<WebCore::RTCEncodedAudioFrame,WTF::RawPtrTraits<WebCore::RTCEncodedAudioFrame>,WTF::DefaultRefDerefTraits<WebCore::RTCEncodedAudioFrame>>,WTF::RefPtr<WebCore::RTCEncodedVideoFrame,WTF::RawPtrTraits<WebCore::RTCEncodedVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::RTCEncodedVideoFrame>>> &>(v17);
  }
  WebCore::ReadableStreamDefaultController::enqueue((_DWORD **)(v7 + 16), v14);
  if (v12)
    goto LABEL_6;
LABEL_8:
  result = v20;
  v20 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t *std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ExceptionOr<void> WebCore::RTCRtpSFrameTransform::createStreams(void)::$_0::operator()<WebCore::ScriptExecutionContext,JSC::JSValue> const(WebCore::ScriptExecutionContext &,JSC::JSValue)::{lambda(WTF::RefPtr<WebCore::RTCEncodedAudioFrame,WTF::RawPtrTraits<WebCore::RTCEncodedAudioFrame>,WTF::DefaultRefDerefTraits<WebCore::RTCEncodedAudioFrame>> &)#1},WebCore::ExceptionOr<void> WebCore::RTCRtpSFrameTransform::createStreams(void)::$_0::operator()<WebCore::ScriptExecutionContext,JSC::JSValue> const(WebCore::ScriptExecutionContext &,JSC::JSValue)::{lambda(WTF::RefPtr<WebCore::RTCEncodedVideoFrame,WTF::RawPtrTraits<WebCore::RTCEncodedVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::RTCEncodedVideoFrame>> &)#1},WebCore::ExceptionOr<void> WebCore::RTCRtpSFrameTransform::createStreams(void)::$_0::operator()<WebCore::ScriptExecutionContext,JSC::JSValue> const(WebCore::ScriptExecutionContext &,JSC::JSValue)::{lambda(WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>> &)#1},WebCore::ExceptionOr<void> WebCore::RTCRtpSFrameTransform::createStreams(void)::$_0::operator()<WebCore::ScriptExecutionContext,JSC::JSValue> const(WebCore::ScriptExecutionContext &,JSC::JSValue)::{lambda(WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>> &)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>,WTF::RefPtr<JSC::ArrayBufferView,WTF::RawPtrTraits<JSC::ArrayBufferView>,WTF::DefaultRefDerefTraits<JSC::ArrayBufferView>>,WTF::RefPtr<WebCore::RTCEncodedAudioFrame,WTF::RawPtrTraits<WebCore::RTCEncodedAudioFrame>,WTF::DefaultRefDerefTraits<WebCore::RTCEncodedAudioFrame>>,WTF::RefPtr<WebCore::RTCEncodedVideoFrame,WTF::RawPtrTraits<WebCore::RTCEncodedVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::RTCEncodedVideoFrame>>> &>(uint64_t *a1, WTF **a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int8 *v9;
  uint64_t (**v10)();
  unint64_t v11;
  int v12;
  WTF *v13;
  unint64_t v14;
  void *v15;
  uint64_t *result;
  uint64_t (**v17)();
  unint64_t v18;
  WebCore *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  unsigned __int8 *v23;
  WTF *v24;
  unsigned __int8 v25;
  uint64_t *v26;
  _OWORD v27[2];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = *a1;
  v3 = *a2;
  v4 = *(_QWORD *)(*a1 + 40);
  v5 = **(_QWORD **)(*a1 + 48);
  v6 = *(_QWORD *)(*a1 + 64);
  v7 = **(_QWORD **)(*a1 + 56);
  v8 = *(_OWORD *)(v6 + 240);
  v27[0] = *(_OWORD *)(v6 + 224);
  v27[1] = v8;
  v9 = *(unsigned __int8 **)(v2 + 72);
  WebCore::RTCEncodedFrame::rtcFrame((uint64_t)v3, &v26);
  v10 = (uint64_t (**)())(*(uint64_t (**)(uint64_t *))(*v26 + 16))(v26);
  WebCore::processFrame((uint64_t)&v24, v10, v11, v5, (uint64_t)v27, v9);
  v12 = v25;
  v13 = v24;
  (*(void (**)(void))(*v26 + 24))();
  v14 = WebCore::wrap<WebCore::RTCEncodedVideoFrame>(v4, v4, v3);
  if (*(_BYTE *)(v7 + 48))
  {
    if (!v12)
      goto LABEL_8;
LABEL_6:
    if (v13)
      WTF::fastFree(v13, v15);
    goto LABEL_8;
  }
  if (!*(_BYTE *)(v7 + 24))
  {
    v17 = (uint64_t (**)())std::__throw_bad_optional_access[abi:sn180100]();
    return WebCore::transformFrame(v17, v18, v19, v20, v21, v22, v23);
  }
  WebCore::ReadableStreamDefaultController::enqueue((_DWORD **)(v7 + 16), v14);
  if (v12)
    goto LABEL_6;
LABEL_8:
  result = v26;
  v26 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      return (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  return result;
}

uint64_t *WebCore::transformFrame(uint64_t (**a1)(), unint64_t a2, WebCore *a3, uint64_t a4, uint64_t a5, _OWORD *a6, unsigned __int8 *a7)
{
  __int128 v9;
  uint64_t v10;
  void *v11;
  JSC::ArrayBuffer *v12;
  uint64_t v13;
  WTF::DeferrableRefCountedBase *v14;
  uint64_t *result;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::JSDOMGlobalObject *v19;
  WTF *v20[2];
  char v21;
  uint64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v9 = a6[1];
  v23[0] = *a6;
  v23[1] = v9;
  WebCore::processFrame((uint64_t)v20, a1, a2, a4, (uint64_t)v23, a7);
  if (v21)
  {
    WebCore::FragmentedSharedBuffer::create(v20, &v22);
    v10 = WTF::fastMalloc((WTF *)0x38);
    WebCore::SharedBuffer::SharedBuffer(v10, &v22);
    WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v22, v11);
  }
  else
  {
    v10 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = v10 + 24;
    *(_QWORD *)(v10 + 16) = 1;
    *(_QWORD *)(v10 + 48) = 0;
    *(_BYTE *)(v10 + 40) = 1;
  }
  v22 = v10;
  WebCore::FragmentedSharedBuffer::tryCreateArrayBuffer((WebCore::FragmentedSharedBuffer *)v10, &v19);
  if (v19)
    v13 = WebCore::toJS(a3, (uint64_t)a3, v19, v12);
  else
    v13 = 2;
  if (!*(_BYTE *)(a5 + 48))
  {
    if (!*(_BYTE *)(a5 + 24))
    {
      v17 = std::__throw_bad_optional_access[abi:sn180100]();
      return (uint64_t *)_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN3JSC11ArrayBufferENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_15ArrayBufferViewENSD_ISI_EENSF_ISI_EEEENSA_IN7WebCore20RTCEncodedAudioFrameENSD_ISN_EENSF_ISN_EEEENSA_INSM_20RTCEncodedVideoFrameENSD_ISR_EENSF_ISR_EEEEEEENSM_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSY_1EJSV_SW_EEEEEEDcS10_DpT0_(v17, v18);
    }
    WebCore::ReadableStreamDefaultController::enqueue((_DWORD **)(a5 + 16), v13);
  }
  v14 = v19;
  v19 = 0;
  if (v14)
    WTF::DeferrableRefCounted<JSC::ArrayBuffer>::deref(v14);
  result = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v22, (void *)v13);
  if (v21)
  {
    result = (uint64_t *)v20[0];
    if (v20[0])
      return (uint64_t *)WTF::fastFree(v20[0], v16);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN3JSC11ArrayBufferENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_15ArrayBufferViewENSD_ISI_EENSF_ISI_EEEENSA_IN7WebCore20RTCEncodedAudioFrameENSD_ISN_EENSF_ISN_EEEENSA_INSM_20RTCEncodedVideoFrameENSD_ISR_EENSF_ISR_EEEEEEENSM_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSY_1EJSV_SW_EEEEEEDcS10_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3361880[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

unint64_t WTF::Vector<WebCore::RTCRtpSFrameTransformer::IdentifiedKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::RTCRtpSFrameTransformer::IdentifiedKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::RTCRtpSFrameTransformer::IdentifiedKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::RTCRtpSFrameTransformer::IdentifiedKey,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int *v2;
  WTF *v3;
  uint64_t v4;
  int v5;
  void *v6;
  unsigned int *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;

  if (result[2] < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = result[3];
      v5 = 24 * a2;
      result = (unsigned int *)WTF::fastMalloc((WTF *)(24 * a2));
      v2[2] = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v2 = result;
      if ((_DWORD)v4)
      {
        v7 = result;
        v8 = 24 * v4;
        v9 = (_DWORD *)((char *)v3 + 16);
        do
        {
          v10 = *((_QWORD *)v9 - 2);
          *((_QWORD *)v7 + 1) = 0;
          *((_QWORD *)v7 + 2) = 0;
          *(_QWORD *)v7 = v10;
          v11 = *((_QWORD *)v9 - 1);
          *((_QWORD *)v9 - 1) = 0;
          *((_QWORD *)v7 + 1) = v11;
          LODWORD(v11) = *v9;
          *v9 = 0;
          v7[4] = v11;
          LODWORD(v11) = v9[1];
          v9[1] = 0;
          v7[5] = v11;
          result = (unsigned int *)*((_QWORD *)v9 - 1);
          if (result)
          {
            *((_QWORD *)v9 - 1) = 0;
            *v9 = 0;
            result = (unsigned int *)WTF::fastFree((WTF *)result, v6);
          }
          v9 += 6;
          v7 += 6;
          v8 -= 24;
        }
        while (v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          v2[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RTCRtpScriptTransform::setTransformer(WebCore::RTCRtpScriptTransformer &)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  *a1 = &off_1E3361920;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E32DD4B0;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCRtpScriptTransform::setTransformer(WebCore::RTCRtpScriptTransformer &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  *(_QWORD *)this = &off_1E3361920;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 24);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E32DD4B0;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RTCRtpScriptTransform::setTransformer(WebCore::RTCRtpScriptTransformer &)::$_0,void>::call(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;

  v1 = result[1];
  v2 = *(_QWORD *)(v1 + 48);
  if (!v2)
    return result;
  *(_QWORD *)(v1 + 48) = 0;
  v3 = (unsigned __int8 *)(v1 + 56);
  if (__ldaxr((unsigned __int8 *)(v1 + 56)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_6;
  }
  result = (_QWORD *)MEMORY[0x19AEA534C](v1 + 56);
LABEL_6:
  if (*(_BYTE *)(v1 + 57))
  {
    v5 = *(_QWORD *)(v1 + 32);
    v6 = *(unsigned int **)(v1 + 64);
    if (v6)
    {
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
    v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v8 = &off_1E3361948;
    v8[1] = v6;
    v8[2] = v2;
    v14 = v8;
    (*(void (**)(_QWORD, _QWORD **))(**(_QWORD **)(v5 + 104) + 24))(*(_QWORD *)(v5 + 104), &v14);
    result = v14;
    v14 = 0;
    if (result)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    v2 = 0;
  }
  v9 = __ldxr(v3);
  if (v9 != 1)
  {
    __clrex();
LABEL_17:
    result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (!v2)
      return result;
    goto LABEL_18;
  }
  if (__stlxr(0, v3))
    goto LABEL_17;
  if (!v2)
    return result;
LABEL_18:
  v10 = (unsigned int *)(v2 + 8);
  do
  {
    v11 = __ldaxr(v10);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v10));
  if (!v12)
  {
    atomic_store(1u, v10);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v13 = off_1E3361EB0;
    v13[1] = v10;
    v14 = v13;
    WTF::ensureOnMainThread();
    result = v14;
    v14 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RTCRtpScriptTransform::setupTransformer(WTF::Ref<WebCore::RTCRtpTransformBackend,WTF::RawPtrTraits<WebCore::RTCRtpTransformBackend>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpTransformBackend>> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v11;
  _QWORD *v12;

  *a1 = &off_1E3361948;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v11 = off_1E3361EB0;
      v11[1] = v4;
      v12 = v11;
      WTF::ensureOnMainThread();
      if (v12)
        (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    }
  }
  v7 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCRtpScriptTransform::setupTransformer(WTF::Ref<WebCore::RTCRtpTransformBackend,WTF::RawPtrTraits<WebCore::RTCRtpTransformBackend>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpTransformBackend>> &&)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v11;
  _QWORD *v12;

  *(_QWORD *)this = &off_1E3361948;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v11 = off_1E3361EB0;
      v11[1] = v4;
      v12 = v11;
      WTF::ensureOnMainThread();
      if (v12)
        (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    }
  }
  v7 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RTCRtpScriptTransform::setupTransformer(WTF::Ref<WebCore::RTCRtpTransformBackend,WTF::RawPtrTraits<WebCore::RTCRtpTransformBackend>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpTransformBackend>> &&)::$_0,void,WebCore::ScriptExecutionContext &>::call(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;

  v1 = result[1];
  if (v1)
  {
    v2 = *(_QWORD **)(v1 + 8);
    if (v2)
    {
      v3 = result[2];
      result[2] = 0;
      v4 = v2[11];
      v2[11] = v3;
      if (v4)
      {
        v5 = (unsigned int *)(v4 + 8);
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
        {
          atomic_store(1u, v5);
          v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v23 = off_1E3361EB0;
          v23[1] = v5;
          v25 = v23;
          WTF::ensureOnMainThread();
          v24 = v25;
          v25 = 0;
          if (v24)
            (*(void (**)(_QWORD *))(*v24 + 8))(v24);
        }
      }
      v8 = v2[1];
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9)
          v10 = (_QWORD *)(v9 - 96);
        else
          v10 = 0;
      }
      else
      {
        v10 = 0;
      }
      if (((*(uint64_t (**)(_QWORD *))(*v10 + 64))(v10) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1954A8C60);
      }
      v11 = v2[11];
      v12 = v2[4];
      if (v12)
        goto LABEL_38;
      v12 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v12 = 1;
      *(_QWORD *)(v12 + 8) = v2;
      v14 = (unsigned int *)v2[4];
      v2[4] = v12;
      if (!v14)
        goto LABEL_38;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, v13);
      }
      v12 = v2[4];
      if (v12)
      {
LABEL_38:
        do
          v17 = __ldaxr((unsigned int *)v12);
        while (__stlxr(v17 + 1, (unsigned int *)v12));
      }
      v18 = v10[45];
      v19 = *(_QWORD *)(v18 + 8);
      if (__ldaxr((unsigned __int8 *)v19))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v19))
      {
        goto LABEL_23;
      }
      MEMORY[0x19AEA534C](v19);
LABEL_23:
      ++*(_QWORD *)(v19 + 8);
      v21 = __ldxr((unsigned __int8 *)v19);
      if (v21 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v19))
        {
LABEL_28:
          v22 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
          *v22 = &off_1E3361A28;
          v22[1] = v12;
          v22[2] = v18;
          v25 = v22;
          (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v11 + 16))(v11, &v25);
          result = v25;
          v25 = 0;
          if (result)
            return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
          return result;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v19);
      goto LABEL_28;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RTCRtpScriptTransform::clear(WebCore::RTCRtpScriptTransformer::ClearCallback)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E3361970;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCRtpScriptTransform::clear(WebCore::RTCRtpScriptTransformer::ClearCallback)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3361970;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCRtpScriptTransform::clear(WebCore::RTCRtpScriptTransformer::ClearCallback)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  BOOL v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v2 = *(_QWORD *)(result + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(unsigned __int8 *)(result + 16);
      result = *(_QWORD *)(v3 + 88);
      if (v4)
        v5 = result == 0;
      else
        v5 = 1;
      if (!v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)result + 24))(result);
        result = *(_QWORD *)(v3 + 88);
      }
      *(_QWORD *)(v3 + 88) = 0;
      if (result)
      {
        v6 = (unsigned int *)(result + 8);
        do
        {
          v7 = __ldaxr(v6);
          v8 = v7 - 1;
        }
        while (__stlxr(v8, v6));
        if (!v8)
        {
          atomic_store(1u, v6);
          v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v11 = off_1E3361EB0;
          v11[1] = v6;
          v12 = v11;
          WTF::ensureOnMainThread();
          result = (uint64_t)v12;
          if (v12)
            result = (*(uint64_t (**)(_QWORD *))(*v12 + 8))(v12);
        }
      }
      v9 = *(WTF **)(v3 + 96);
      *(_QWORD *)(v3 + 96) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          v10 = *((_QWORD *)v9 + 1);
          --*(_QWORD *)(v10 + 16);
          *((_QWORD *)v9 + 1) = 0;
          if (*(_DWORD *)(v10 + 24) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
          else
            --*(_DWORD *)(v10 + 24);
          return WTF::fastFree(v9, a2);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RTCRtpScriptTransformer::writable(void)::$_0,WebCore::ExceptionOr<void>,WebCore::ScriptExecutionContext &,JSC::JSValue>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E3361998;
  a1[1] = 0;
  if (v2)
  {
    if (v2[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[6];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCRtpScriptTransformer::writable(void)::$_0,WebCore::ExceptionOr<void>,WebCore::ScriptExecutionContext &,JSC::JSValue>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3361998;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RTCRtpScriptTransformer::writable(void)::$_0,WebCore::ExceptionOr<void>,WebCore::ScriptExecutionContext &,JSC::JSValue>::call@<X0>(WebCore::ScriptExecutionContext *this@<X1>, _QWORD *result@<X0>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  _BOOL4 v8;
  char **v9;
  BOOL v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v14;
  int v15;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t *v26;
  WTF *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD **v30;
  _QWORD *v31;
  char v32;
  uint64_t v33;
  int v34;
  char v35;
  char *v36;
  _BYTE v37[8];
  unsigned int v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(result[1] + 88))
  {
    *(_BYTE *)a4 = 8;
    *(_QWORD *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 16) = 1;
    return result;
  }
  v6 = result;
  v36 = *(char **)(WebCore::ScriptExecutionContext::globalObject(this) + 56);
  if ((a3 & 0xFFFE000000000002) != 0)
    goto LABEL_50;
  v7 = *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSRTCEncodedAudioFrame::s_info;
  else
    v10 = 1;
  v11 = *(_DWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C) != 0;
  if (!v10)
  {
    v12 = 16 * v7;
    do
    {
      v12 = *(_QWORD *)(v12 + 16);
      v11 = v12 != 0;
    }
    while ((char **)v12 != &WebCore::JSRTCEncodedAudioFrame::s_info && v12 != 0);
  }
  if (!v11 || (v14 = *(_QWORD *)(a3 + 24)) == 0)
  {
    if ((_DWORD)v7 && v9 != &WebCore::JSRTCEncodedVideoFrame::s_info)
    {
      do
      {
        v9 = (char **)v9[2];
        v8 = v9 != 0;
      }
      while (v9 != &WebCore::JSRTCEncodedVideoFrame::s_info && v9 != 0);
    }
    if (v8)
    {
      v14 = *(_QWORD *)(a3 + 24);
      if (v14)
      {
        v15 = 1;
        goto LABEL_26;
      }
    }
LABEL_50:
    result = (_QWORD *)JSC::throwTypeError();
    v17 = 1;
    v39 = 1;
LABEL_51:
    *(_BYTE *)a4 = 37;
    *(_QWORD *)(a4 + 8) = 0;
    *(_BYTE *)(a4 + 16) = 1;
    goto LABEL_52;
  }
  v15 = 0;
LABEL_26:
  ++*(_DWORD *)(v14 + 8);
  v33 = v14;
  v34 = v15;
  v35 = 1;
  v37[0] = 0;
  v38 = -1;
  ((void (*)(_QWORD **, _BYTE *, uint64_t *))off_1E33619C0[v15])(&v31, v37, &v33);
  v38 = v15;
  v39 = 0;
  if (v35)
  {
    if (v34 != -1)
    {
      result = (_QWORD *)((uint64_t (*)(_QWORD **, uint64_t *))off_1E33619B0[v34])(&v31, &v33);
      v17 = v39;
      if (v39)
        goto LABEL_51;
    }
  }
  LOBYTE(v33) = 0;
  v34 = -1;
  v18 = v38;
  if (v38 == -1)
  {
    v29 = std::__throw_bad_variant_access[abi:sn180100]();
    return _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore20RTCEncodedAudioFrameENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_20RTCEncodedVideoFrameENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(v29, v30);
  }
  ((void (*)(char **, uint64_t *, _BYTE *))off_1E33619C0[v38])(&v36, &v33, v37);
  v34 = v18;
  v36 = &v32;
  ((void (*)(_QWORD **__return_ptr, char **, uint64_t *))off_1E33619D0[v18])(&v31, &v36, &v33);
  if ((*(uint64_t (**)(_QWORD *))(*v31 + 16))(v31))
  {
    v19 = v6[1];
    if (*(_BYTE *)(v19 + 136))
    {
      v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v19 + 88) + 40))(*(_QWORD *)(v19 + 88));
      v19 = v6[1];
      if (v20 == 1)
      {
        if (!*(_QWORD *)(v19 + 160))
        {
          v21 = *(_QWORD *)(v19 + 144);
          v22 = WTF::fastMalloc((WTF *)0x3F8);
          v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v23 = off_1E33619F0;
          v23[1] = v21;
          *(_QWORD *)v22 = v23;
          *(_OWORD *)(v22 + 8) = 0u;
          *(_QWORD *)(v22 + 24) = v22 + 40;
          *(_QWORD *)(v22 + 32) = 120;
          *(_OWORD *)(v22 + 1000) = 0u;
          v25 = v6[1];
          v26 = *(uint64_t **)(v25 + 160);
          *(_QWORD *)(v25 + 160) = v22;
          if (v26)
          {
            v27 = (WTF *)v26[3];
            if (v26 + 5 != (uint64_t *)v27 && v27)
            {
              v26[3] = 0;
              *((_DWORD *)v26 + 8) = 0;
              WTF::fastFree(v27, v24);
            }
            v28 = *v26;
            *v26 = 0;
            if (v28)
              (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
            WTF::fastFree((WTF *)v26, v24);
          }
        }
        WebCore::FrameRateMonitor::update(*(WebCore::FrameRateMonitor **)(v6[1] + 160));
        v19 = v6[1];
      }
    }
    (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(v19 + 88) + 32))(*(_QWORD *)(v19 + 88), v31);
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  result = v31;
  v31 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    else
      --*((_DWORD *)result + 2);
  }
  if (v34 != -1)
    result = (_QWORD *)((uint64_t (*)(char **, uint64_t *))off_1E33619B0[v34])(&v36, &v33);
  v17 = v39;
LABEL_52:
  if (v17 != -1)
    return (_QWORD *)((uint64_t (*)(uint64_t *, _BYTE *))off_1E3361A08[v17])(&v33, v37);
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore20RTCEncodedAudioFrameENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_20RTCEncodedVideoFrameENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore20RTCEncodedAudioFrameENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_20RTCEncodedVideoFrameENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore20RTCEncodedAudioFrameENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_20RTCEncodedVideoFrameENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore20RTCEncodedAudioFrameENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_20RTCEncodedVideoFrameENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ExceptionOr<void> WebCore::RTCRtpScriptTransformer::writable(void)::$_0::operator()<WebCore::ScriptExecutionContext,JSC::JSValue> const(WebCore::ScriptExecutionContext &,JSC::JSValue)::{lambda(WTF::RefPtr<WebCore::RTCEncodedAudioFrame,WTF::RawPtrTraits<WebCore::RTCEncodedAudioFrame>,WTF::DefaultRefDerefTraits<WebCore::RTCEncodedAudioFrame>> &)#1},WebCore::ExceptionOr<void> WebCore::RTCRtpScriptTransformer::writable(void)::$_0::operator()<WebCore::ScriptExecutionContext,JSC::JSValue> const(WebCore::ScriptExecutionContext &,JSC::JSValue)::{lambda(WTF::RefPtr<WebCore::RTCEncodedVideoFrame,WTF::RawPtrTraits<WebCore::RTCEncodedVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::RTCEncodedVideoFrame>> &)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::RTCEncodedAudioFrame,WTF::RawPtrTraits<WebCore::RTCEncodedAudioFrame>,WTF::DefaultRefDerefTraits<WebCore::RTCEncodedAudioFrame>>,WTF::RefPtr<WebCore::RTCEncodedVideoFrame,WTF::RawPtrTraits<WebCore::RTCEncodedVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::RTCEncodedVideoFrame>>> &>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  return WebCore::RTCEncodedFrame::rtcFrame(*a1, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::ExceptionOr<void> WebCore::RTCRtpScriptTransformer::writable(void)::$_0::operator()<WebCore::ScriptExecutionContext,JSC::JSValue> const(WebCore::ScriptExecutionContext &,JSC::JSValue)::{lambda(WTF::RefPtr<WebCore::RTCEncodedAudioFrame,WTF::RawPtrTraits<WebCore::RTCEncodedAudioFrame>,WTF::DefaultRefDerefTraits<WebCore::RTCEncodedAudioFrame>> &)#1},WebCore::ExceptionOr<void> WebCore::RTCRtpScriptTransformer::writable(void)::$_0::operator()<WebCore::ScriptExecutionContext,JSC::JSValue> const(WebCore::ScriptExecutionContext &,JSC::JSValue)::{lambda(WTF::RefPtr<WebCore::RTCEncodedVideoFrame,WTF::RawPtrTraits<WebCore::RTCEncodedVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::RTCEncodedVideoFrame>> &)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::RTCEncodedAudioFrame,WTF::RawPtrTraits<WebCore::RTCEncodedAudioFrame>,WTF::DefaultRefDerefTraits<WebCore::RTCEncodedAudioFrame>>,WTF::RefPtr<WebCore::RTCEncodedVideoFrame,WTF::RawPtrTraits<WebCore::RTCEncodedVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::RTCEncodedVideoFrame>>> &>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  return WebCore::RTCEncodedFrame::rtcFrame(*a1, a2);
}

double WTF::Detail::CallableWrapper<WebCore::ExceptionOr<void> WebCore::RTCRtpScriptTransformer::writable(void)::$_0::operator()<WebCore::ScriptExecutionContext,JSC::JSValue> const(WebCore::ScriptExecutionContext &,JSC::JSValue)::{lambda(WebCore::ScriptExecutionContext)#1},void,WebCore::FrameRateMonitor::LateFrameInfo>::call(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  double v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  double v15;
  __int16 v16;
  double v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  double v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = qword_1ECE7CD60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(_QWORD *)(a2 + 16);
    v6 = *(_QWORD *)(a2 + 24);
    v9 = *(double *)a2;
    v8 = *(double *)(a2 + 8);
    v10 = *(_QWORD *)(a1 + 8);
    v11 = (*(double *)a2 - v8) * 1000.0;
    v12 = 134219264;
    v13 = v10;
    v14 = 2048;
    v15 = v9;
    v16 = 2048;
    v17 = v8;
    v18 = 2048;
    v19 = v7;
    v20 = 2048;
    v21 = v11;
    v22 = 2048;
    v23 = v6;
    _os_log_impl(&dword_1940B8000, v4, OS_LOG_TYPE_DEFAULT, "RTCRtpScriptTransformer writable %llu, frame at %f, previous frame was at %f, observed frame rate is %f, delay since last frame is %f ms, frame count is %lu", (uint8_t *)&v12, 0x3Eu);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore20RTCEncodedAudioFrameENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_20RTCEncodedVideoFrameENSD_ISI_EENSF_ISI_EEEEEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSP_1EJSM_SN_EEEEEEDcSR_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E33619B0[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RTCRtpScriptTransformer::start(WTF::Ref<WebCore::RTCRtpTransformBackend,WTF::RawPtrTraits<WebCore::RTCRtpTransformBackend>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpTransformBackend>> &&)::$_0,void,WTF::Ref<WebCore::RTCRtpTransformableFrame,WTF::RawPtrTraits<WebCore::RTCRtpScriptTransformer::start(WTF::Ref<WebCore::RTCRtpTransformBackend,WTF::RawPtrTraits<WebCore::RTCRtpTransformBackend>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpTransformBackend>> &&)::$_0>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpScriptTransformer::start(WTF::Ref<WebCore::RTCRtpTransformBackend,WTF::RawPtrTraits<WebCore::RTCRtpTransformBackend>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpTransformBackend>> &&)::$_0>> &&>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;

  *a1 = &off_1E3361A28;
  v3 = a1[2];
  a1[2] = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v15 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v15 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  v11 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCRtpScriptTransformer::start(WTF::Ref<WebCore::RTCRtpTransformBackend,WTF::RawPtrTraits<WebCore::RTCRtpTransformBackend>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpTransformBackend>> &&)::$_0,void,WTF::Ref<WebCore::RTCRtpTransformableFrame,WTF::RawPtrTraits<WebCore::RTCRtpScriptTransformer::start(WTF::Ref<WebCore::RTCRtpTransformBackend,WTF::RawPtrTraits<WebCore::RTCRtpTransformBackend>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpTransformBackend>> &&)::$_0>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpScriptTransformer::start(WTF::Ref<WebCore::RTCRtpTransformBackend,WTF::RawPtrTraits<WebCore::RTCRtpTransformBackend>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpTransformBackend>> &&)::$_0>> &&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;

  *(_QWORD *)this = &off_1E3361A28;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v15 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v15 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  v11 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v11);
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCRtpScriptTransformer::start(WTF::Ref<WebCore::RTCRtpTransformBackend,WTF::RawPtrTraits<WebCore::RTCRtpTransformBackend>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpTransformBackend>> &&)::$_0,void,WTF::Ref<WebCore::RTCRtpTransformableFrame,WTF::RawPtrTraits<WebCore::RTCRtpScriptTransformer::start(WTF::Ref<WebCore::RTCRtpTransformBackend,WTF::RawPtrTraits<WebCore::RTCRtpTransformBackend>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpTransformBackend>> &&)::$_0>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpScriptTransformer::start(WTF::Ref<WebCore::RTCRtpTransformBackend,WTF::RawPtrTraits<WebCore::RTCRtpTransformBackend>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpTransformBackend>> &&)::$_0>> &&>::call(uint64_t a1, uint64_t *a2)
{
  unsigned int *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t result;
  WTF::StringImpl *v10;
  _QWORD *v11;
  char v12;

  v2 = *(unsigned int **)(a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48);
  if (v2)
  {
    do
      v4 = __ldaxr(v2);
    while (__stlxr(v4 + 1, v2));
  }
  v5 = *a2;
  *a2 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = &off_1E3361A50;
  v6[1] = v2;
  v6[2] = v5;
  v10 = 0;
  v11 = v6;
  v12 = 0;
  (*(void (**)(uint64_t, _QWORD **, WTF::StringImpl **))(*(_QWORD *)v3 + 32))(v3, &v11, &v10);
  v8 = v10;
  v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  result = (uint64_t)v11;
  v11 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore23RTCRtpScriptTransformer5startEONS_3RefINS2_22RTCRtpTransformBackendENS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEEN3__0clEONS4_INS2_24RTCRtpTransformableFrameENS6_ISD_EENS8_ISD_EEEEEUlRT_E_vJRNS2_22ScriptExecutionContextEEED1Ev(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E3361A50;
  v3 = (_DWORD *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore23RTCRtpScriptTransformer5startEONS_3RefINS2_22RTCRtpTransformBackendENS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEEN3__0clEONS4_INS2_24RTCRtpTransformableFrameENS6_ISD_EENS8_ISD_EEEEEUlRT_E_vJRNS2_22ScriptExecutionContextEEED0Ev(WTF *this, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E3361A50;
  v3 = (_DWORD *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore23RTCRtpScriptTransformer5startEONS_3RefINS2_22RTCRtpTransformBackendENS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEEN3__0clEONS4_INS2_24RTCRtpTransformableFrameENS6_ISD_EENS8_ISD_EEEEEUlRT_E_vJRNS2_22ScriptExecutionContextEEE4callESM_(_QWORD *result, WebCore::ScriptExecutionContext *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  unint64_t v8;
  WTF *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  uint64_t *v15;
  WTF *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF *v31;
  _DWORD *v32;
  _DWORD **v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD **v36;
  uint64_t v37;
  _DWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  _BYTE v41[8];
  _BYTE v42[8];

  v2 = result[1];
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (*(_QWORD *)(v3 + 88))
      {
        v4 = result;
        result = (_QWORD *)WebCore::ScriptExecutionContext::globalObject(this);
        if (result)
        {
          v5 = (uint64_t)result;
          MEMORY[0x19AEA3294](v41, result[7]);
          if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v3 + 88) + 40))(*(_QWORD *)(v3 + 88)) == 1)
          {
            if (*(_QWORD *)(v3 + 104) != *(_QWORD *)(v3 + 112)
              && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v4[2] + 56))(v4[2]))
            {
              v7 = *(_QWORD *)(v3 + 104);
              v8 = *(_QWORD *)(v3 + 112);
              v9 = *(WTF **)(v3 + 120);
              v10 = *(unsigned int *)(v3 + 128);
              *(_QWORD *)(v3 + 104) = 0;
              *(_QWORD *)(v3 + 112) = 0;
              *(_QWORD *)(v3 + 120) = 0;
              *(_DWORD *)(v3 + 128) = 0;
              if (v7 != v8)
              {
                v40 = v7;
                do
                {
                  v26 = *((_QWORD *)v9 + v7);
                  v27 = *(_QWORD *)(v26 + 24);
                  if (v27 && *(_QWORD *)v27 && (*(_BYTE *)(v27 + 8) & 3) == 0)
                  {
                    v28 = *(_QWORD *)(v26 + 32);
                    if (!v28 || (*(_BYTE *)(v28 + 8) & 3) != 0)
                      v29 = 0;
                    else
                      v29 = *(uint64_t **)v28;
                    JSC::JSLockHolder::JSLockHolder();
                    WebCore::DeferredPromise::callFunction(v26, v29, 0, (objc_class *)0xA);
                    MEMORY[0x19AEA32A0](v42);
                  }
                  v7 += v10 + 1;
                  do
                    v7 -= v10;
                  while (v7 >= v10);
                }
                while (v8 != v7);
                if (v40 <= v8)
                {
                  v33 = (_DWORD **)((char *)v9 + 8 * v40);
                  v34 = 8 * v8 - 8 * v40;
                  do
                  {
                    v35 = *v33;
                    *v33 = 0;
                    if (v35)
                    {
                      if (v35[4] == 1)
                        (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 16))(v35);
                      else
                        --v35[4];
                    }
                    ++v33;
                    v34 -= 8;
                  }
                  while (v34);
                }
                else
                {
                  if (v8)
                  {
                    v30 = 8 * v8;
                    v31 = v9;
                    do
                    {
                      v32 = *(_DWORD **)v31;
                      *(_QWORD *)v31 = 0;
                      if (v32)
                      {
                        if (v32[4] == 1)
                          (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 16))(v32);
                        else
                          --v32[4];
                      }
                      v31 = (WTF *)((char *)v31 + 8);
                      v30 -= 8;
                    }
                    while (v30);
                  }
                  if (v40 != v10)
                  {
                    v36 = (_DWORD **)((char *)v9 + 8 * v40);
                    v37 = 8 * v10 - 8 * v40;
                    do
                    {
                      v38 = *v36;
                      *v36 = 0;
                      if (v38)
                      {
                        if (v38[4] == 1)
                          (*(void (**)(_DWORD *))(*(_QWORD *)v38 + 16))(v38);
                        else
                          --v38[4];
                      }
                      ++v36;
                      v37 -= 8;
                    }
                    while (v37);
                  }
                }
              }
              if (v9)
                WTF::fastFree(v9, v6);
            }
            if (*(_BYTE *)(v3 + 136))
            {
              v11 = *(_QWORD *)(v3 + 152);
              if (!v11)
              {
                v12 = *(_QWORD *)(v3 + 144);
                v11 = WTF::fastMalloc((WTF *)0x3F8);
                v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
                *v13 = off_1E3361788;
                v13[1] = v12;
                *(_QWORD *)v11 = v13;
                *(_OWORD *)(v11 + 8) = 0u;
                *(_QWORD *)(v11 + 24) = v11 + 40;
                *(_QWORD *)(v11 + 32) = 120;
                *(_OWORD *)(v11 + 1000) = 0u;
                v15 = *(uint64_t **)(v3 + 152);
                *(_QWORD *)(v3 + 152) = v11;
                if (v15)
                {
                  v16 = (WTF *)v15[3];
                  if (v15 + 5 != (uint64_t *)v16 && v16 != 0)
                  {
                    v15[3] = 0;
                    *((_DWORD *)v15 + 8) = 0;
                    WTF::fastFree(v16, v14);
                  }
                  v18 = *v15;
                  *v15 = 0;
                  if (v18)
                    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
                  WTF::fastFree((WTF *)v15, v14);
                  v11 = *(_QWORD *)(v3 + 152);
                }
              }
              WebCore::FrameRateMonitor::update((WebCore::FrameRateMonitor *)v11);
            }
            v19 = WTF::fastMalloc((WTF *)0x68);
            *(_DWORD *)(v19 + 8) = 1;
            v20 = v4[2];
            v4[2] = 0;
            *(_QWORD *)(v19 + 16) = v20;
            *(_QWORD *)(v19 + 24) = 0;
            *(_QWORD *)v19 = off_1E3361390;
            if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 56))(v20))
              v21 = 1;
            else
              v21 = 2;
            *(_DWORD *)(v19 + 32) = v21;
            *(_BYTE *)(v19 + 40) = 0;
            *(_BYTE *)(v19 + 96) = 0;
            v22 = WebCore::wrap<WebCore::RTCEncodedVideoFrame>(v5, v5, (WTF *)v19);
          }
          else
          {
            v19 = WTF::fastMalloc((WTF *)0x40);
            *(_DWORD *)(v19 + 8) = 1;
            v23 = v4[2];
            v4[2] = 0;
            *(_QWORD *)(v19 + 16) = v23;
            *(_QWORD *)(v19 + 24) = 0;
            *(_QWORD *)v19 = off_1E3360B50;
            *(_BYTE *)(v19 + 32) = 0;
            *(_BYTE *)(v19 + 56) = 0;
            v22 = WebCore::wrap<WebCore::RTCEncodedAudioFrame>(v5, v5, (WTF *)v19);
          }
          v24 = v22;
          if (*(_DWORD *)(v19 + 8) == 1)
            (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
          else
            --*(_DWORD *)(v19 + 8);
          v25 = *(_QWORD *)(v3 + 64);
          if (!*(_BYTE *)(v25 + 48))
          {
            if (!*(_BYTE *)(v25 + 24))
            {
              v39 = (_QWORD *)std::__throw_bad_optional_access[abi:sn180100]();
              return WTF::Detail::CallableWrapper<WebCore::RTCRtpScriptTransformer::sendKeyFrameRequest(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::~CallableWrapper(v39);
            }
            WebCore::ReadableStreamDefaultController::enqueue((_DWORD **)(v25 + 16), v24);
          }
          return (_QWORD *)MEMORY[0x19AEA32A0](v41);
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RTCRtpScriptTransformer::sendKeyFrameRequest(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E3361A78;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCRtpScriptTransformer::sendKeyFrameRequest(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3361A78;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCRtpScriptTransformer::sendKeyFrameRequest(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  _BYTE v5[8];

  v1 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(v1 + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v3 = *(_QWORD *)(v1 + 32);
    if (!v3 || (*(_BYTE *)(v3 + 8) & 3) != 0)
      v4 = 0;
    else
      v4 = *(uint64_t **)v3;
    JSC::JSLockHolder::JSLockHolder();
    WebCore::DeferredPromise::callFunction(v1, v4, 0, (objc_class *)0xA);
    return MEMORY[0x19AEA32A0](v5);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::RTCRtpSender::replaceTrack(WTF::RefPtr<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>::~CallableWrapper(_QWORD *a1, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E3361AB0;
  v3 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  v4 = (unsigned int *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCRtpSender::replaceTrack(WTF::RefPtr<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E3361AB0;
  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RTCRtpSender::replaceTrack(WTF::RefPtr<WebCore::MediaStreamTrack,WTF::RawPtrTraits<WebCore::MediaStreamTrack>,WTF::DefaultRefDerefTraits<WebCore::MediaStreamTrack>> &&,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>> &&)::$_0,void,WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>::call(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  void *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  char v20;

  v2 = *(_QWORD *)(result + 16);
  if (!v2 || !*(_QWORD *)(v2 + 8))
    return result;
  v4 = result;
  v5 = *(_QWORD *)(result + 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6)
  {
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 16))(v6, v5, *(_QWORD *)(v4 + 24));
    if ((result & 1) != 0)
    {
      v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 72) + 8) + 40);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
        {
          v9 = v8 - 96;
          v10 = *(unsigned __int8 *)(v8 + 178);
          if (*(_BYTE *)(v8 + 178))
          {
            if (v10 == 1 || v10 == 2)
              ++*(_DWORD *)(v8 + 216);
          }
          else
          {
            *(_DWORD *)(v8 - 264) += 2;
          }
          ++*(_DWORD *)(v5 + 8);
          v11 = *(_QWORD *)(v4 + 24);
          *(_QWORD *)(v4 + 24) = 0;
          v12 = *a2;
          *a2 = 0;
          v13 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x28);
          *(_QWORD *)v13 = &off_1E3361AD8;
          *((_QWORD *)v13 + 1) = v5;
          *((_QWORD *)v13 + 2) = v5;
          *((_QWORD *)v13 + 3) = v11;
          *((_QWORD *)v13 + 4) = v12;
          v19 = v13;
          v20 = 0;
          (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v9 + 336))(v8 - 96, &v19);
          result = (uint64_t)v19;
          v19 = 0;
          if (result)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
          v15 = *(unsigned __int8 *)(v8 + 178);
          if (*(_BYTE *)(v8 + 178))
          {
            if (v15 == 1)
            {
              if (*(_DWORD *)(v8 + 216) == 1)
                return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v8 - 96);
              else
                --*(_DWORD *)(v8 + 216);
            }
            else if (v15 == 2)
            {
              return (uint64_t)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v8 + 216));
            }
          }
          else if (*(_DWORD *)(v8 - 264) == 2)
          {
            if ((*(_WORD *)(v8 - 258) & 0x400) == 0)
              return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)(v8 - 288), v14);
          }
          else
          {
            *(_DWORD *)(v8 - 264) -= 2;
          }
        }
      }
      return result;
    }
    v16 = *a2;
    v19 = 0;
    v17 = 10;
  }
  else
  {
    v16 = *a2;
    v19 = 0;
    v17 = 8;
  }
  WebCore::DeferredPromise::reject(v16, (JSC::JSGlobalObject *)v17, (JSC::JSGlobalObject *)&v19, 0);
  result = (uint64_t)v19;
  v19 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v18);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore12RTCRtpSender12replaceTrackEONS_6RefPtrINS2_16MediaStreamTrackENS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEONS_3RefINS2_15DeferredPromiseENS6_ISD_EENS8_ISD_EEEEEN3__0clESH_EUlRT_E_vJRNS2_22ScriptExecutionContextEEED1Ev(_QWORD *a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  WebCore::RTCRtpSender *v5;
  bmalloc::api *v7;
  void *v8;

  *a1 = &off_1E3361AD8;
  v3 = (_DWORD *)a1[4];
  a1[4] = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)a1[3];
  a1[3] = 0;
  if (v4)
  {
    if (v4[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[6];
  }
  v5 = (WebCore::RTCRtpSender *)a1[2];
  a1[2] = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 2) == 1)
    {
      WebCore::RTCRtpSender::~RTCRtpSender(v5, a2);
      bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --*((_DWORD *)v5 + 2);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore12RTCRtpSender12replaceTrackEONS_6RefPtrINS2_16MediaStreamTrackENS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEONS_3RefINS2_15DeferredPromiseENS6_ISD_EENS8_ISD_EEEEEN3__0clESH_EUlRT_E_vJRNS2_22ScriptExecutionContextEEED0Ev(WTF *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  WebCore::RTCRtpSender *v5;
  bmalloc::api *v7;
  void *v8;

  *(_QWORD *)this = &off_1E3361AD8;
  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  v4 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v4)
  {
    if (v4[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
    else
      --v4[6];
  }
  v5 = (WebCore::RTCRtpSender *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 2) == 1)
    {
      WebCore::RTCRtpSender::~RTCRtpSender(v5, a2);
      bmalloc::api::isoDeallocate(v7, v8);
    }
    else
    {
      --*((_DWORD *)v5 + 2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore12RTCRtpSender12replaceTrackEONS_6RefPtrINS2_16MediaStreamTrackENS_12RawPtrTraitsIS5_EENS_21DefaultRefDerefTraitsIS5_EEEEONS_3RefINS2_15DeferredPromiseENS6_ISD_EENS8_ISD_EEEEEN3__0clESH_EUlRT_E_vJRNS2_22ScriptExecutionContextEEE4callESN_(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _BYTE v10[8];

  v1 = result[1];
  v2 = *(_QWORD *)(v1 + 72);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (*(_DWORD *)(v3 + 80) != 5)
      {
        v4 = result;
        v5 = result[3];
        result[3] = 0;
        result = *(_QWORD **)(v1 + 32);
        *(_QWORD *)(v1 + 32) = v5;
        if (result)
        {
          if (*((_DWORD *)result + 6) == 1)
            result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
          else
            --*((_DWORD *)result + 6);
        }
        v6 = v4[4];
        v7 = *(_QWORD *)(v6 + 24);
        if (v7 && *(_QWORD *)v7 && (*(_BYTE *)(v7 + 8) & 3) == 0)
        {
          v8 = *(_QWORD *)(v6 + 32);
          if (!v8 || (*(_BYTE *)(v8 + 8) & 3) != 0)
            v9 = 0;
          else
            v9 = *(uint64_t **)v8;
          JSC::JSLockHolder::JSLockHolder();
          WebCore::DeferredPromise::callFunction(v6, v9, 0, (objc_class *)0xA);
          return (_QWORD *)MEMORY[0x19AEA32A0](v10);
        }
      }
    }
  }
  return result;
}

void WebCore::RTCRtpTransceiver::~RTCRtpTransceiver(WebCore::RTCRtpTransceiver *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WebCore::RTCRtpReceiver *v7;
  WebCore::RTCRtpSender *v8;
  uint64_t v9;
  bmalloc::api *v10;
  void *v11;
  bmalloc::api *v12;
  void *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v14 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v14)
      {
        v17 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v14));
        v3 = v17;
      }
      v15 = *(WTF **)(v3 + 16);
      if (v15)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v16 = v3;
        WTF::fastFree(v15, a2);
        v3 = v16;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (WebCore::RTCRtpReceiver *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v7)
  {
    if (*((_DWORD *)v7 + 2) == 1)
    {
      WebCore::RTCRtpReceiver::~RTCRtpReceiver(v7, a2);
      bmalloc::api::isoDeallocate(v10, v11);
    }
    else
    {
      --*((_DWORD *)v7 + 2);
    }
  }
  v8 = (WebCore::RTCRtpSender *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v8)
  {
    if (*((_DWORD *)v8 + 2) == 1)
    {
      WebCore::RTCRtpSender::~RTCRtpSender(v8, (WTF::StringImpl *)a2);
      bmalloc::api::isoDeallocate(v12, v13);
    }
    else
    {
      --*((_DWORD *)v8 + 2);
    }
  }
  v9 = *((_QWORD *)this + 2);
  if (v9)
  {
    *(_QWORD *)(v9 + 8) = 3;
    *((_QWORD *)this + 2) = 0;
  }
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::RTCRtpTransceiver::~RTCRtpTransceiver(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::RtpTransceiverSet::senders@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  void *v5;
  uint64_t *v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(unsigned int *)(this + 12);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = *(uint64_t **)this;
    for (i = 8 * v3; i; i -= 8)
    {
      v8 = *v6;
      this = *(_QWORD *)(*v6 + 64);
      if (this)
      {
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 56))(this);
        if ((this & 1) != 0)
          goto LABEL_21;
        v8 = *v6;
      }
      else if (*(_BYTE *)(v8 + 56))
      {
        goto LABEL_21;
      }
      v9 = *(_QWORD *)(v8 + 40);
      v10 = v4;
      if (v4 == *(_DWORD *)(a2 + 8))
      {
        v11 = v4 + ((unint64_t)v4 >> 2);
        if (v11 >= 0x10)
          v12 = v11 + 1;
        else
          v12 = 16;
        if (v12 <= (unint64_t)v4 + 1)
          v13 = v4 + 1;
        else
          v13 = v12;
        if (v13 >> 29)
        {
          __break(0xC471u);
          return this;
        }
        v14 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
        *(_DWORD *)(a2 + 8) = v13;
        *(_QWORD *)a2 = v14;
        this = (uint64_t)memcpy(v14, v5, 8 * v4);
        if (v5)
        {
          if (v14 == v5)
          {
            v14 = 0;
            *(_QWORD *)a2 = 0;
            *(_DWORD *)(a2 + 8) = 0;
          }
          this = WTF::fastFree((WTF *)v5, v15);
        }
        v5 = v14;
      }
      ++v4;
      *((_QWORD *)v5 + v10) = v9;
      *(_DWORD *)(a2 + 12) = v4;
LABEL_21:
      ++v6;
    }
  }
  return this;
}

uint64_t WebCore::RtpTransceiverSet::receivers@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  void *v5;
  uint64_t *v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *(unsigned int *)(this + 12);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 0;
    v6 = *(uint64_t **)this;
    for (i = 8 * v3; i; i -= 8)
    {
      v8 = *v6;
      this = *(_QWORD *)(*v6 + 64);
      if (this)
      {
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 56))(this);
        if ((this & 1) != 0)
          goto LABEL_21;
        v8 = *v6;
      }
      else if (*(_BYTE *)(v8 + 56))
      {
        goto LABEL_21;
      }
      v9 = *(_QWORD *)(v8 + 48);
      v10 = v4;
      if (v4 == *(_DWORD *)(a2 + 8))
      {
        v11 = v4 + ((unint64_t)v4 >> 2);
        if (v11 >= 0x10)
          v12 = v11 + 1;
        else
          v12 = 16;
        if (v12 <= (unint64_t)v4 + 1)
          v13 = v4 + 1;
        else
          v13 = v12;
        if (v13 >> 29)
        {
          __break(0xC471u);
          return this;
        }
        v14 = (void *)WTF::fastMalloc((WTF *)(8 * v13));
        *(_DWORD *)(a2 + 8) = v13;
        *(_QWORD *)a2 = v14;
        this = (uint64_t)memcpy(v14, v5, 8 * v4);
        if (v5)
        {
          if (v14 == v5)
          {
            v14 = 0;
            *(_QWORD *)a2 = 0;
            *(_DWORD *)(a2 + 8) = 0;
          }
          this = WTF::fastFree((WTF *)v5, v15);
        }
        v5 = v14;
      }
      ++v4;
      *((_QWORD *)v5 + v10) = v9;
      *(_DWORD *)(a2 + 12) = v4;
LABEL_21:
      ++v6;
    }
  }
  return this;
}

void WebCore::RTCRtpTransform::~RTCRtpTransform(WebCore::RTCRtpTransform *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  WebCore::RTCRtpTransform *v16;
  WebCore::RTCRtpReceiver *v17;
  WebCore::RTCRtpTransform *v18;
  _QWORD v19[2];
  _QWORD *v20;

  if (*(_QWORD *)this)
  {
    v19[0] = this;
    v19[1] = this;
    v2 = *((unsigned int *)this + 4);
    if ((_DWORD)v2 == -1)
    {
      v16 = (WebCore::RTCRtpTransform *)std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::RTCRtpTransform::attachToReceiver(v16, v17, v18);
      return;
    }
    v20 = v19;
    ((void (*)(_QWORD **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore15RTCRtpTransform12clearBackendEvE3__0JZNS9_12clearBackendEvE3__1EEEEEJRNS0_6__implIJNS6_6RefPtrINS8_21RTCRtpSFrameTransformENS6_12RawPtrTraitsISG_EENS6_21DefaultRefDerefTraitsISG_EEEENSF_INS8_21RTCRtpScriptTransformENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOT_DpOT0____fmatrix[v2])(&v20, (char *)this + 8);
    v3 = *(_QWORD *)this;
    *(_QWORD *)this = 0;
    if (v3)
    {
      v4 = (unsigned int *)(v3 + 8);
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v14 = off_1E3361EB0;
        v14[1] = v4;
        v19[0] = v14;
        WTF::ensureOnMainThread();
        v15 = v19[0];
        v19[0] = 0;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      }
    }
  }
  v7 = *((unsigned int *)this + 4);
  if ((_DWORD)v7 != -1)
    ((void (*)(_QWORD *, char *))off_1E3362198[v7])(v19, (char *)this + 8);
  *((_DWORD *)this + 4) = -1;
  v8 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v8)
  {
    v9 = (unsigned int *)(v8 + 8);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v12 = off_1E3361EB0;
      v12[1] = v9;
      v19[0] = v12;
      WTF::ensureOnMainThread();
      v13 = v19[0];
      v19[0] = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    }
  }
}

uint64_t *WebCore::RTCRtpTransform::attachToReceiver(uint64_t *this, WebCore::RTCRtpReceiver *a2, WebCore::RTCRtpTransform *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  WebCore::RTCRtpTransform *v19;
  WebCore::RTCRtpSender *v20;
  WebCore::RTCRtpTransform *v21;
  _QWORD v22[2];
  _QWORD *v23;

  v3 = this;
  if (a3)
  {
    v4 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    v5 = *this;
    *this = v4;
    if (!v5)
      goto LABEL_7;
    v6 = (unsigned int *)(v5 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = --v7 == 0;
    }
    while (__stlxr(v7, v6));
  }
  else
  {
    this = (uint64_t *)*((_QWORD *)a2 + 5);
    if (!this)
      goto LABEL_6;
    this = (*(_QWORD *(**)(_QWORD **__return_ptr))(*this + 40))(&v23);
    v10 = v23;
    v23 = 0;
    v11 = *v3;
    *v3 = (uint64_t)v10;
    if (!v11)
      goto LABEL_6;
    v12 = (unsigned int *)(v11 + 8);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v18 = off_1E3361EB0;
      v18[1] = v12;
      v22[0] = v18;
      WTF::ensureOnMainThread();
      this = (uint64_t *)v22[0];
      v22[0] = 0;
      if (this)
        this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
    }
    v15 = v23;
    v23 = 0;
    if (!v15)
      goto LABEL_6;
    v6 = (unsigned int *)(v15 + 1);
    do
    {
      v16 = __ldaxr(v6);
      v8 = --v16 == 0;
    }
    while (__stlxr(v16, v6));
  }
  if (v8)
  {
    atomic_store(1u, v6);
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v17 = off_1E3361EB0;
    v17[1] = v6;
    v22[0] = v17;
    WTF::ensureOnMainThread();
    this = (uint64_t *)v22[0];
    v22[0] = 0;
    if (this)
      this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
  }
LABEL_6:
  v4 = *v3;
LABEL_7:
  if (v4)
  {
    v22[0] = v3;
    v22[1] = v3;
    v9 = *((unsigned int *)v3 + 4);
    if ((_DWORD)v9 == -1)
    {
      v19 = (WebCore::RTCRtpTransform *)std::__throw_bad_variant_access[abi:sn180100]();
      return (uint64_t *)WebCore::RTCRtpTransform::attachToSender(v19, v20, v21);
    }
    else
    {
      v23 = v22;
      return (uint64_t *)((uint64_t (*)(_QWORD **, uint64_t *))off_1E33621D8[v9])(&v23, v3 + 1);
    }
  }
  return this;
}

uint64_t *WebCore::RTCRtpTransform::attachToSender(uint64_t *this, WebCore::RTCRtpSender *a2, WebCore::RTCRtpTransform *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  WebCore::RTCRtpTransform *v20;
  _QWORD v21[3];
  _QWORD *v22;

  v3 = this;
  v20 = a3;
  if (a3)
  {
    v4 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    v5 = *this;
    *this = v4;
    if (!v5)
      goto LABEL_7;
    v6 = (unsigned int *)(v5 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = --v7 == 0;
    }
    while (__stlxr(v7, v6));
  }
  else
  {
    this = (uint64_t *)*((_QWORD *)a2 + 8);
    if (!this)
      goto LABEL_6;
    this = (*(_QWORD *(**)(_QWORD **__return_ptr))(*this + 48))(&v22);
    v10 = v22;
    v22 = 0;
    v11 = *v3;
    *v3 = (uint64_t)v10;
    if (!v11)
      goto LABEL_6;
    v12 = (unsigned int *)(v11 + 8);
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v18 = off_1E3361EB0;
      v18[1] = v12;
      v21[0] = v18;
      WTF::ensureOnMainThread();
      this = (uint64_t *)v21[0];
      v21[0] = 0;
      if (this)
        this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
    }
    v15 = v22;
    v22 = 0;
    if (!v15)
      goto LABEL_6;
    v6 = (unsigned int *)(v15 + 1);
    do
    {
      v16 = __ldaxr(v6);
      v8 = --v16 == 0;
    }
    while (__stlxr(v16, v6));
  }
  if (v8)
  {
    atomic_store(1u, v6);
    v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v17 = off_1E3361EB0;
    v17[1] = v6;
    v21[0] = v17;
    WTF::ensureOnMainThread();
    this = (uint64_t *)v21[0];
    v21[0] = 0;
    if (this)
      this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 8))(this);
  }
LABEL_6:
  v4 = *v3;
LABEL_7:
  if (v4)
  {
    v21[0] = v3;
    v21[1] = v3;
    v21[2] = &v20;
    v9 = *((unsigned int *)v3 + 4);
    if ((_DWORD)v9 == -1)
    {
      v19 = std::__throw_bad_variant_access[abi:sn180100]();
      return (uint64_t *)WebCore::RTCSctpTransport::create(v19);
    }
    else
    {
      v22 = v21;
      return (uint64_t *)((uint64_t (*)(_QWORD **, uint64_t *))off_1E33621E8[v9])(&v22, v3 + 1);
    }
  }
  return this;
}

_QWORD *WebCore::RTCSctpTransport::create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v8 = bmalloc::api::isoAllocate();
  v9 = v8;
  *(_DWORD *)(v8 + 24) = 1;
  if (!*(_BYTE *)(a1 + 274))
  {
    v10 = a1 - 192;
    v11 = *(_QWORD *)(a1 + 512);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
        v10 = v12;
    }
    a1 = v10 + 192;
  }
  *(_QWORD *)v8 = &off_1E33A18C0;
  *(_QWORD *)(v8 + 8) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v8, (WebCore::ScriptExecutionContext *)a1);
  *(_QWORD *)v9 = &off_1E33A0540;
  *(_QWORD *)(v9 + 16) = 0;
  if (*(_BYTE *)(a1 + 278))
  {
    __break(0xC471u);
    JUMPOUT(0x1954AAC3CLL);
  }
  v17 = v9;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(a1 + 128), &v17, (uint64_t)&v16);
  *(_QWORD *)(v9 + 40) = 0;
  *(_QWORD *)(v9 + 48) = 0;
  *(_QWORD *)(v9 + 64) = 0;
  *(_QWORD *)v9 = &off_1E3361EF8;
  *(_QWORD *)(v9 + 32) = &unk_1E3361F78;
  *(_QWORD *)(v9 + 56) = &unk_1E3361FF0;
  v13 = *a2;
  *a2 = 0;
  *(_QWORD *)(v9 + 72) = v13;
  v14 = *a3;
  *a3 = 0;
  *(_QWORD *)(v9 + 80) = v14;
  *(_DWORD *)(v9 + 88) = 0;
  *(_BYTE *)(v9 + 96) = 0;
  *(_BYTE *)(v9 + 104) = 0;
  *(_BYTE *)(v9 + 112) = 0;
  *(_BYTE *)(v9 + 114) = 0;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v9 + 72) + 32))(*(_QWORD *)(v9 + 72), v9 + 56);
  *a4 = v9;
  return WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v9);
}

void WebCore::RTCSctpTransport::~RTCSctpTransport(WebCore::RTCSctpTransport *this)
{
  void *v2;
  WebCore::RTCDtlsTransport *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  void *v9;
  bmalloc::api *v10;
  void *v11;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 9) + 40))(*((_QWORD *)this + 9));
  v3 = (WebCore::RTCDtlsTransport *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 6) == 1)
    {
      WebCore::RTCDtlsTransport::~RTCDtlsTransport(v3);
      bmalloc::api::isoDeallocate(v10, v11);
    }
    else
    {
      --*((_DWORD *)v3 + 6);
    }
  }
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 8);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)*((_QWORD *)this + 8);
    *((_QWORD *)this + 8) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, v2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 8) = 0;
  }
  WebCore::EventTarget::~EventTarget((WebCore::RTCSctpTransport *)((char *)this + 32), v2);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v9);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::RTCSctpTransport::~RTCSctpTransport(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

void `non-virtual thunk to'WebCore::RTCSctpTransport::~RTCSctpTransport(WebCore::RTCSctpTransport *this)
{
  WebCore::RTCSctpTransport::~RTCSctpTransport((WebCore::RTCSctpTransport *)((char *)this - 32));
}

{
  WebCore::RTCSctpTransport::~RTCSctpTransport((WebCore::RTCSctpTransport *)((char *)this - 56));
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::RTCSctpTransport::~RTCSctpTransport((WebCore::RTCSctpTransport *)((char *)this - 32));
  bmalloc::api::isoDeallocate(v1, v2);
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::RTCSctpTransport::~RTCSctpTransport((WebCore::RTCSctpTransport *)((char *)this - 56));
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::RTCSctpTransport::stop(uint64_t this)
{
  *(_DWORD *)(this + 88) = 2;
  return this;
}

BOOL WebCore::RTCSctpTransport::virtualHasPendingActivity(WebCore::RTCSctpTransport *this)
{
  uint64_t v1;

  if (*((_DWORD *)this + 22) != 2 && (v1 = *((_QWORD *)this + 6), (v1 & 0x1000000000000) != 0))
    return *(_DWORD *)((v1 & 0xFFFFFFFFFFFFLL) + 0x1C) != 0;
  else
    return 0;
}

uint64_t (***WebCore::RTCSctpTransport::onStateChanged(uint64_t a1, int a2, uint64_t a3, char a4, int a5))()
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t (***result)();
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (**v17)();
  uint64_t (***v18)();

  v10 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v10 = off_1E3362290;
  *(_QWORD *)(v10 + 8) = a1;
  *(_DWORD *)(v10 + 16) = a2;
  *(_QWORD *)(v10 + 24) = a3;
  *(_BYTE *)(v10 + 32) = a4;
  *(_BYTE *)(v10 + 42) = BYTE2(a5);
  *(_WORD *)(v10 + 40) = a5;
  v11 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v11 = 1;
  v12 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v11 + 8) = a1;
  ++*(_QWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 24) = v12 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = off_1E3362268;
  result[1] = (uint64_t (**)())a1;
  result[2] = (uint64_t (**)())v11;
  result[3] = (uint64_t (**)())v10;
  v18 = result;
  v14 = *(_QWORD *)(a1 + 8);
  if (!v14)
  {
    v18 = 0;
    v17 = off_1E3362268;
    return (uint64_t (***)())v17[1]();
  }
  v15 = *(_QWORD *)(v14 + 8);
  if (!v15)
  {
    v18 = 0;
    goto LABEL_6;
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v15 - 96) + 104))(v15 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v16, 11, (uint64_t *)&v18);
  result = v18;
  v18 = 0;
  if (result)
  {
LABEL_6:
    v17 = *result;
    return (uint64_t (***)())v17[1]();
  }
  return result;
}

uint64_t (***`non-virtual thunk to'WebCore::RTCSctpTransport::onStateChanged(uint64_t a1, int a2, uint64_t a3, char a4, int a5))()
{
  uint64_t (**v10)();
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t (***result)();
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (**v18)();
  uint64_t (***v19)();

  v10 = (uint64_t (**)())(a1 - 56);
  v11 = WTF::fastMalloc((WTF *)0x30);
  *(_QWORD *)v11 = off_1E3362290;
  *(_QWORD *)(v11 + 8) = v10;
  *(_DWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a3;
  *(_BYTE *)(v11 + 32) = a4;
  *(_BYTE *)(v11 + 42) = BYTE2(a5);
  *(_WORD *)(v11 + 40) = a5;
  v12 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v12 = 1;
  v13 = *(_DWORD *)(a1 - 32);
  *(_QWORD *)(v12 + 8) = v10;
  ++*(_QWORD *)(a1 - 40);
  *(_DWORD *)(a1 - 32) = v13 + 2;
  result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  *result = off_1E3362268;
  result[1] = v10;
  result[2] = (uint64_t (**)())v12;
  result[3] = (uint64_t (**)())v11;
  v19 = result;
  v15 = *(_QWORD *)(a1 - 48);
  if (!v15)
  {
    v19 = 0;
    v18 = off_1E3362268;
    return (uint64_t (***)())v18[1]();
  }
  v16 = *(_QWORD *)(v15 + 8);
  if (!v16)
  {
    v19 = 0;
    goto LABEL_6;
  }
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v16 - 96) + 104))(v16 - 96);
  WebCore::EventLoopTaskGroup::queueTask(v17, 11, (uint64_t *)&v19);
  result = v19;
  v19 = 0;
  if (result)
  {
LABEL_6:
    v18 = *result;
    return (uint64_t (***)())v18[1]();
  }
  return result;
}

uint64_t WebCore::RTCTrackEvent::RTCTrackEvent(uint64_t a1, _QWORD *a2, unsigned __int8 *a3, int a4)
{
  uint64_t result;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  result = WTF::MonotonicTime::now((WTF::MonotonicTime *)a1);
  v10 = *a3;
  v11 = a3[1];
  v12 = a3[2];
  *(_QWORD *)(a1 + 8) = 0;
  if (a4)
    v13 = 1442304;
  else
    v13 = 1441792;
  v14 = v13 | (2 * v10) | (4 * v11) | (8 * v12) | (*a2 != 0) | *(_DWORD *)(a1 + 20) & 0xFFC00000;
  *(_DWORD *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 20) = v14;
  v15 = (_DWORD *)*a2;
  if (*a2)
  {
    *v15 += 2;
    v14 = *(_DWORD *)(a1 + 20);
  }
  *(_QWORD *)(a1 + 24) = v15;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 20) = v14 | 0x4000;
  *(_QWORD *)a1 = off_1E3362018;
  v16 = *((_QWORD *)a3 + 1);
  if (v16)
    ++*(_DWORD *)(v16 + 8);
  *(_QWORD *)(a1 + 72) = v16;
  v17 = *((_QWORD *)a3 + 2);
  if (v17)
    ++*(_DWORD *)(v17 + 24);
  v18 = *((unsigned int *)a3 + 9);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = v17;
  *(_DWORD *)(a1 + 100) = v18;
  if ((_DWORD)v18)
  {
    if (v18 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v18));
    *(_DWORD *)(a1 + 96) = v18;
    *(_QWORD *)(a1 + 88) = v19;
    v20 = *((unsigned int *)a3 + 9);
    if ((_DWORD)v20)
    {
      v21 = (uint64_t *)*((_QWORD *)a3 + 3);
      v22 = 8 * v20;
      do
      {
        v23 = *v21++;
        ++*(_DWORD *)(v23 + 88);
        *v19++ = v23;
        v22 -= 8;
      }
      while (v22);
    }
  }
  v24 = *((_QWORD *)a3 + 5);
  if (v24)
    ++*(_DWORD *)(v24 + 8);
  *(_QWORD *)(a1 + 104) = v24;
  return a1;
}

uint64_t WebCore::computeH264PrefixOffset(uint64_t (**a1)(), unint64_t a2)
{
  uint64_t (***v4)();
  uint64_t (**v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v9 = 0;
  v4 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  v5 = off_1E33622E8;
  *v4 = off_1E33622E8;
  v4[1] = (uint64_t (**)())&v9;
  v4[2] = a1;
  v4[3] = (uint64_t (**)())a2;
  if (a2 >= 5)
  {
    v6 = 0;
    v7 = 4;
    do
    {
      if (!*((_BYTE *)a1 + v6))
      {
        if (a2 <= v7 - 3)
          break;
        if (!*((_BYTE *)a1 + v7 - 3))
        {
          if (a2 <= v7 - 2)
            break;
          if (!*((_BYTE *)a1 + v7 - 2))
          {
            if (a2 <= v7 - 1)
              break;
            if (*((_BYTE *)a1 + v7 - 1) == 1
              && (((uint64_t (*)(uint64_t (***)(), uint64_t))(*v4)[2])(v4, v7) & 1) != 0)
            {
              goto LABEL_14;
            }
          }
        }
      }
      if (++v7 >= a2)
        goto LABEL_14;
      v6 = v7 - 4;
    }
    while (a2 > v7 - 4);
    __break(1u);
LABEL_14:
    v5 = *v4;
  }
  ((void (*)(uint64_t (***)()))v5[1])(v4);
  return v9;
}

BOOL WebCore::needsRbspUnescaping(_BOOL8 result, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  unint64_t v6;

  v2 = a2 - 3;
  if (a2 == 3)
  {
    return 0;
  }
  else
  {
    v3 = 0;
    v4 = result + 2;
    v5 = 1;
    while (a2 != v3)
    {
      v6 = v3 + 1;
      if (!*(_BYTE *)(result + v3))
      {
        if (a2 <= v6)
          break;
        if (!*(_BYTE *)(v4 + v3 - 1))
        {
          if (a2 <= v3 + 2)
            break;
          if (*(_BYTE *)(v4 + v3) == 3)
            return v5;
        }
      }
      v5 = v6 < v2;
      ++v3;
      if (v2 == v6)
        return v5;
    }
    __break(1u);
  }
  return result;
}

_BYTE *WebCore::fromRbsp@<X0>(WTF *this@<X1>, _BYTE *result@<X0>, uint64_t a3@<X8>)
{
  _BYTE *v4;
  unint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  char v16;
  BOOL v17;
  char *v18;
  unint64_t v19;
  _BYTE *v20;

  v4 = result;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  if (!this)
    goto LABEL_34;
  if ((unint64_t)this >> 32)
  {
    __break(0xC471u);
  }
  else
  {
    result = (_BYTE *)WTF::fastMalloc(this);
    *(_DWORD *)(a3 + 8) = (_DWORD)this;
    *(_QWORD *)a3 = result;
    v6 = (unint64_t)this - 3;
    if (this != (WTF *)3)
    {
      while (1)
      {
        v7 = 0;
        v8 = 0;
        while ((unint64_t)this > v8)
        {
          v9 = (unint64_t)&v4[v8];
          if (v4[v8])
            goto LABEL_13;
          v10 = v8 + 1;
          if ((unint64_t)this <= v8 + 1)
            break;
          v11 = &v4[v10];
          if (v4[v10])
            goto LABEL_13;
          v12 = v8 + 2;
          if ((unint64_t)this <= v8 + 2)
            break;
          if (v4[v12] != 3)
          {
LABEL_13:
            if (v7 == *(_DWORD *)(a3 + 8))
            {
              result = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a3, (WTF *)(v7 + 1), v9);
              *(_BYTE *)(*(_QWORD *)a3 + *(unsigned int *)(a3 + 12)) = *result;
            }
            else
            {
              *(_BYTE *)(*(_QWORD *)a3 + v7) = v4[v8];
            }
            v12 = v8;
          }
          else
          {
            if (v7 == *(_DWORD *)(a3 + 8))
            {
              result = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a3, (WTF *)(v7 + 1), v9);
              *(_BYTE *)(*(_QWORD *)a3 + *(unsigned int *)(a3 + 12)) = *result;
            }
            else
            {
              *(_BYTE *)(*(_QWORD *)a3 + v7) = 0;
            }
            v13 = *(_DWORD *)(a3 + 8);
            v14 = (*(_DWORD *)(a3 + 12) + 1);
            *(_DWORD *)(a3 + 12) = v14;
            if ((_DWORD)v14 == v13)
            {
              result = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a3, (WTF *)(v14 + 1), (unint64_t)v11);
              v14 = *(unsigned int *)(a3 + 12);
              v15 = *(char **)a3;
              v16 = *result;
            }
            else
            {
              v15 = *(char **)a3;
              v16 = *v11;
            }
            v15[v14] = v16;
          }
          v7 = *(_DWORD *)(a3 + 12) + 1;
          *(_DWORD *)(a3 + 12) = v7;
          v8 = v12 + 1;
          if (v12 + 1 >= v6)
            goto LABEL_25;
        }
        __break(1u);
LABEL_34:
        v6 = -3;
      }
    }
    v7 = 0;
    v8 = 0;
LABEL_25:
    v17 = (unint64_t)this > v8;
    v18 = (char *)this - v8;
    if (v17)
    {
      v19 = (unint64_t)&v4[v8];
      do
      {
        if (v7 == *(_DWORD *)(a3 + 8))
        {
          result = WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)a3, (WTF *)(v7 + 1), v19);
          v20 = (_BYTE *)(*(_QWORD *)a3 + *(unsigned int *)(a3 + 12));
        }
        else
        {
          v20 = (_BYTE *)(*(_QWORD *)a3 + v7);
          result = (_BYTE *)v19;
        }
        *v20 = *result;
        v7 = *(_DWORD *)(a3 + 12) + 1;
        *(_DWORD *)(a3 + 12) = v7;
        ++v19;
        --v18;
      }
      while (v18);
    }
  }
  return result;
}

uint64_t (**WebCore::computeH264PrefixBuffer@<X0>(uint64_t (**result)()@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>))()
{
  uint64_t (**v4)();
  uint64_t (***v6)();
  uint64_t (**v7)();
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t (**v11)();
  size_t v12;
  unint64_t i;
  unint64_t v14;
  void *v15;
  size_t v16;
  size_t v17;

  if (a2 <= 4)
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }
  v4 = result;
  if ((*((_BYTE *)result + 4) & 0x1F) != 7)
    goto LABEL_32;
  v17 = 0;
  v6 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
  v7 = off_1E3362310;
  *v6 = off_1E3362310;
  v6[1] = v4;
  v6[2] = (uint64_t (**)())a2;
  v6[3] = (uint64_t (**)())&v17;
  if (a2 >= 0xA)
  {
    v8 = 9;
    v9 = 5;
    do
    {
      if (!*((_BYTE *)v4 + v9))
      {
        if (a2 <= v8 - 3)
          break;
        if (!*((_BYTE *)v4 + v8 - 3))
        {
          if (a2 <= v8 - 2)
            break;
          if (!*((_BYTE *)v4 + v8 - 2))
          {
            if (a2 <= v8 - 1)
              break;
            if (*((_BYTE *)v4 + v8 - 1) == 1
              && (((uint64_t (*)(uint64_t (***)(), uint64_t))(*v6)[2])(v6, v8) & 1) != 0)
            {
              goto LABEL_17;
            }
          }
        }
      }
      if (++v8 >= a2)
        goto LABEL_17;
      v9 = v8 - 4;
    }
    while (a2 > v8 - 4);
LABEL_16:
    __break(1u);
LABEL_17:
    v7 = *v6;
  }
  result = (uint64_t (**)())((uint64_t (*)(uint64_t (***)()))v7[1])(v6);
  v10 = v17;
  if (!v17)
  {
LABEL_32:
    *(_QWORD *)a3 = &WebCore::computeH264PrefixBuffer(std::span<unsigned char const,18446744073709551615ul>)::prefixDeltaFrame;
    *(_QWORD *)(a3 + 8) = 6;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    return result;
  }
  v6 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
  v11 = off_1E3362338;
  *v6 = off_1E3362338;
  v6[1] = (uint64_t (**)())&v17;
  v12 = v10 + 5;
  if (v10 + 5 < a2)
  {
    for (i = v10 + 1; ; i = v12 - 4)
    {
      if (a2 <= i)
        goto LABEL_16;
      if (!*((_BYTE *)v4 + i))
      {
        if (a2 <= v12 - 3)
          goto LABEL_16;
        if (!*((_BYTE *)v4 + v12 - 3))
        {
          if (a2 <= v12 - 2)
            goto LABEL_16;
          if (!*((_BYTE *)v4 + v12 - 2))
          {
            if (a2 <= v12 - 1)
              goto LABEL_16;
            if (*((_BYTE *)v4 + v12 - 1) == 1
              && (((uint64_t (*)(uint64_t (***)(), size_t))(*v6)[2])(v6, v12) & 1) != 0)
            {
              break;
            }
          }
        }
      }
      if (++v12 >= a2)
        break;
    }
    v11 = *v6;
  }
  ((void (*)(uint64_t (***)()))v11[1])(v6);
  v14 = v17 + 2;
  if (v17 == -2)
  {
    v15 = 0;
    v16 = -2;
  }
  else
  {
    if (HIDWORD(v14))
    {
LABEL_43:
      __break(0xC471u);
      JUMPOUT(0x1954AB730);
    }
    v15 = (void *)WTF::fastMalloc((WTF *)(v17 + 2));
    v16 = v17;
  }
  result = (uint64_t (**)())memcpy(v15, v4, v16);
  if (v14 <= v17)
    goto LABEL_43;
  *((_BYTE *)v15 + v17) = 37;
  if (v14 <= v17 + 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1954AB738);
  }
  *((_BYTE *)v15 + v17 + 1) = -72;
  *(_QWORD *)a3 = v15;
  *(_QWORD *)(a3 + 8) = v14;
  *(_QWORD *)(a3 + 16) = v15;
  *(_DWORD *)(a3 + 24) = v14;
  *(_DWORD *)(a3 + 28) = v14;
  return result;
}

double WebCore::toRbsp(uint64_t a1, unint64_t a2)
{
  uint64_t (***v4)();
  uint64_t (**v5)();
  unint64_t v6;
  WTF *v7;
  unint64_t v8;
  _BOOL4 v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  size_t v14;
  WTF *v15;
  WTF *v16;
  WTF *v17;
  BOOL v18;
  uint64_t (***v19)();
  uint64_t (**v20)();
  unint64_t v21;
  WTF *v22;
  _BOOL4 v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  WTF *v28;
  unint64_t v29;
  unint64_t v30;
  size_t v31;
  uint64_t v32;
  void *v33;
  WTF *v34;
  uint64_t v35;
  double v36;
  uint64_t v37;

  v37 = 0;
  v4 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x10);
  v5 = off_1E3362360;
  *v4 = off_1E3362360;
  v4[1] = (uint64_t (**)())&v37;
  if (*(unsigned int *)(a1 + 12) > a2)
  {
    v6 = 0;
    v7 = *(WTF **)a1;
    v8 = a2;
    do
    {
      v9 = *((unsigned __int8 *)v7 + v8) < 4u;
      v10 = v6 > 1;
      v11 = v9 & v10;
      if (v9 && v10)
        v12 = 1;
      else
        v12 = v6 + 1;
      if (*((_BYTE *)v7 + v8))
        v6 = 0;
      else
        v6 = v12;
      ((void (*)(uint64_t (***)(), unint64_t, uint64_t))(*v4)[2])(v4, v8++, v11);
    }
    while (v8 < *(unsigned int *)(a1 + 12));
    v5 = *v4;
  }
  ((void (*)(uint64_t (***)()))v5[1])(v4);
  if (v37)
  {
    v35 = 0;
    v36 = 0.0;
    v14 = *(unsigned int *)(a1 + 12);
    v15 = (WTF *)(v37 + v14);
    if (v37 + v14)
    {
      if ((unint64_t)v15 >> 32)
      {
        __break(0xC471u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
      v16 = (WTF *)WTF::fastMalloc(v15);
      LODWORD(v36) = (_DWORD)v15;
      v35 = (uint64_t)v16;
      v14 = *(unsigned int *)(a1 + 12);
    }
    else
    {
      v16 = 0;
    }
    v17 = *(WTF **)a1;
    if (a2 != -1)
    {
      v18 = v14 >= a2;
      v14 = a2;
      if (!v18)
        goto LABEL_49;
    }
    if (v14)
    {
      if (v14 > (unint64_t)v15)
      {
        v29 = (unint64_t)v15 + ((unint64_t)v15 >> 2);
        if (v29 >= 0x10)
          v30 = v29 + 1;
        else
          v30 = 16;
        if (v30 <= v14)
          v31 = v14;
        else
          v31 = v30;
        if (HIDWORD(v31))
        {
LABEL_50:
          __break(0xC471u);
          JUMPOUT(0x1954AB9B0);
        }
        v32 = WTF::fastMalloc((WTF *)v31);
        v34 = (WTF *)v32;
        LODWORD(v36) = v31;
        v35 = v32;
        if (v16)
        {
          if ((WTF *)v32 == v16)
          {
            v34 = 0;
            v35 = 0;
            LODWORD(v36) = 0;
          }
          WTF::fastFree(v16, v33);
        }
        v16 = v34;
      }
      memcpy(v16, v17, v14);
      HIDWORD(v36) = v14;
      v17 = *(WTF **)a1;
    }
    v19 = (uint64_t (***)())WTF::fastMalloc((WTF *)0x18);
    v20 = off_1E3362388;
    *v19 = off_1E3362388;
    v19[1] = (uint64_t (**)())v17;
    v19[2] = (uint64_t (**)())&v35;
    if (*(unsigned int *)(a1 + 12) > a2)
    {
      v21 = 0;
      v22 = *(WTF **)a1;
      do
      {
        v23 = *((unsigned __int8 *)v22 + a2) < 4u;
        v24 = v21 > 1;
        v25 = v23 & v24;
        if (v23 && v24)
          v26 = 1;
        else
          v26 = v21 + 1;
        if (*((_BYTE *)v22 + a2))
          v21 = 0;
        else
          v21 = v26;
        ((void (*)(uint64_t (***)(), unint64_t, uint64_t))(*v19)[2])(v19, a2++, v25);
      }
      while (a2 < *(unsigned int *)(a1 + 12));
      v20 = *v19;
    }
    ((void (*)(uint64_t (***)()))v20[1])(v19);
    v28 = *(WTF **)a1;
    if (*(_QWORD *)a1)
    {
      *(_QWORD *)a1 = 0;
      *(_DWORD *)(a1 + 8) = 0;
      WTF::fastFree(v28, v27);
    }
    *(_QWORD *)a1 = v35;
    result = v36;
    *(double *)(a1 + 8) = v36;
  }
  return result;
}

_WORD *WebCore::WebRTC::getSTUNOrTURNMessageLengths@<X0>(_WORD *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a2 > 3)
  {
    v4 = bswap32((unsigned __int16)result[1]) >> 16;
    if ((*result & 0xC0) != 0)
    {
      v5 = v4 + 4;
      if ((v4 & 3) != 0)
        v6 = ((_DWORD)v4 + 8) & 0x1FFFC;
      else
        v6 = v4 + 4;
      *(_QWORD *)a3 = v5;
    }
    else
    {
      v6 = v4 + 20;
      *(_QWORD *)a3 = v6;
    }
    *(_QWORD *)(a3 + 8) = v6;
    v3 = 1;
  }
  else
  {
    v3 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 16) = v3;
  return result;
}

uint64_t WebCore::WebRTC::extractMessages@<X0>(uint64_t result@<X0>, unsigned __int16 *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int16 *v10;
  unsigned __int16 *v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  unint64_t v15;
  size_t v16;
  size_t v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  size_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  int v27;

  v5 = result;
  if ((_DWORD)a2)
  {
    a2 = *(unsigned __int16 **)result;
    v7 = *(unsigned int *)(result + 12);
    if (v7 >= 2)
    {
      while (1)
      {
        v8 = bswap32(*a2) >> 16;
        v9 = v7 - 2 - v8;
        if (v7 - 2 < v8)
          goto LABEL_30;
        v10 = a2 + 1;
        result = (*(uint64_t (**)(_QWORD, unsigned __int16 *, unint64_t))(*(_QWORD *)*a3 + 16))(*a3, a2 + 1, v8);
        a2 = (unsigned __int16 *)((char *)v10 + v8);
        v7 = v9;
        if (v9 <= 1)
          goto LABEL_29;
      }
    }
  }
  else
  {
    v11 = *(unsigned __int16 **)result;
    v7 = *(unsigned int *)(result + 12);
    if (v7 >= 4)
    {
      while (1)
      {
        v13 = bswap32(v11[1]) >> 16;
        if ((*v11 & 0xC0) != 0)
        {
          v14 = v13 + 4;
          v15 = (v13 & 3) != 0 ? ((_DWORD)v13 + 8) & 0x1FFFC : v13 + 4;
        }
        else
        {
          v15 = v13 + 20;
          v14 = v13 + 20;
        }
        v12 = v7 - v15;
        if (v7 < v15)
          break;
        if (v7 < v14)
          goto LABEL_27;
        result = (*(uint64_t (**)(_QWORD, unsigned __int16 *))(*(_QWORD *)*a3 + 16))(*a3, v11);
        v11 = (unsigned __int16 *)((char *)v11 + v15);
        v7 -= v15;
        if (v12 < 4)
          goto LABEL_16;
      }
    }
    else
    {
      v12 = *(unsigned int *)(result + 12);
LABEL_16:
      v7 = v12;
      if (!v12)
        goto LABEL_44;
    }
    result = (uint64_t)memcpy(*(void **)v5, v11, v7);
    v16 = *(unsigned int *)(v5 + 12);
    if (v7 <= v16)
      goto LABEL_43;
    v17 = *(unsigned int *)(v5 + 8);
    if (v7 <= v17)
      goto LABEL_43;
    v18 = v17 + (v17 >> 2);
    if (v18 >= 0x10)
      v19 = v18 + 1;
    else
      v19 = 16;
    if (v19 <= v7)
      v20 = v7;
    else
      v20 = v19;
    if (!HIDWORD(v20))
    {
LABEL_39:
      v24 = *(void **)v5;
      v25 = (void *)WTF::fastMalloc((WTF *)v20);
      *(_DWORD *)(v5 + 8) = v20;
      *(_QWORD *)v5 = v25;
      result = (uint64_t)memcpy(v25, v24, v16);
      if (v24)
      {
        if (*(void **)v5 == v24)
        {
          *(_QWORD *)v5 = 0;
          *(_DWORD *)(v5 + 8) = 0;
        }
        result = WTF::fastFree((WTF *)v24, v26);
      }
      goto LABEL_43;
    }
    __break(0xC471u);
LABEL_27:
    __break(1u);
  }
  v9 = v7;
LABEL_29:
  v7 = v9;
  if (!v9)
  {
LABEL_44:
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    return result;
  }
LABEL_30:
  result = (uint64_t)memcpy(*(void **)v5, a2, v7);
  v16 = *(unsigned int *)(v5 + 12);
  if (v7 <= v16 || (v21 = *(unsigned int *)(v5 + 8), v7 <= v21))
  {
LABEL_43:
    *(_QWORD *)a4 = *(_QWORD *)v5;
    v27 = *(_DWORD *)(v5 + 8);
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_DWORD *)(a4 + 8) = v27;
    *(_DWORD *)(a4 + 12) = v7;
    return result;
  }
  v22 = v21 + (v21 >> 2);
  if (v22 >= 0x10)
    v23 = v22 + 1;
  else
    v23 = 16;
  if (v23 <= v7)
    v20 = v7;
  else
    v20 = v23;
  if (!HIDWORD(v20))
    goto LABEL_39;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::RTCSctpTransport::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::RTCSctpTransport *WebCore::RTCSctpTransport::deref(WebCore::RTCSctpTransport *this)
{
  bmalloc::api *v1;
  void *v2;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::RTCSctpTransport::~RTCSctpTransport(this);
    return (WebCore::RTCSctpTransport *)bmalloc::api::isoDeallocate(v1, v2);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

uint64_t WebCore::RTCSctpTransport::eventTargetInterface(WebCore::RTCSctpTransport *this)
{
  return 45;
}

uint64_t WebCore::RTCSctpTransport::scriptExecutionContext(WebCore::RTCSctpTransport *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t WebCore::RTCSctpTransport::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

WebCore::RTCSctpTransport *WebCore::RTCSctpTransport::derefEventTarget(WebCore::RTCSctpTransport *this)
{
  bmalloc::api *v1;
  void *v2;

  if (*((_DWORD *)this + 6) == 1)
  {
    WebCore::RTCSctpTransport::~RTCSctpTransport(this);
    return (WebCore::RTCSctpTransport *)bmalloc::api::isoDeallocate(v1, v2);
  }
  else
  {
    --*((_DWORD *)this + 6);
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::RTCSctpTransport::eventTargetInterface(WebCore::RTCSctpTransport *this)
{
  return 45;
}

uint64_t `non-virtual thunk to'WebCore::RTCSctpTransport::scriptExecutionContext(WebCore::RTCSctpTransport *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this - 3);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (v2)
    return v2 - 96;
  else
    return 0;
}

uint64_t `non-virtual thunk to'WebCore::RTCSctpTransport::refEventTarget(uint64_t this)
{
  ++*(_DWORD *)(this - 8);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::RTCSctpTransport::derefEventTarget(uint64_t this)
{
  bmalloc::api *v1;
  void *v2;

  if (*(_DWORD *)(this - 8) == 1)
  {
    WebCore::RTCSctpTransport::~RTCSctpTransport((WebCore::RTCSctpTransport *)(this - 32));
    return bmalloc::api::isoDeallocate(v1, v2);
  }
  else
  {
    --*(_DWORD *)(this - 8);
  }
  return this;
}

void WebCore::RTCTrackEvent::~RTCTrackEvent(WebCore::RTCTrackEvent *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::RTCTrackEvent::~RTCTrackEvent(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  WebCore::RTCRtpTransceiver *v3;
  uint64_t v4;
  WebCore::MediaStream **v5;
  uint64_t v6;
  WebCore::MediaStream *v7;
  bmalloc::api *v8;
  void *v9;
  WTF *v10;
  _DWORD *v11;
  WebCore::RTCRtpReceiver *v12;
  bmalloc::api *v13;
  void *v14;
  bmalloc::api *v15;
  void *v16;

  v3 = (WebCore::RTCRtpTransceiver *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v3)
  {
    if (*((_DWORD *)v3 + 2) == 1)
    {
      WebCore::RTCRtpTransceiver::~RTCRtpTransceiver(v3, a2);
      bmalloc::api::isoDeallocate(v13, v14);
    }
    else
    {
      --*((_DWORD *)v3 + 2);
    }
  }
  v4 = *((unsigned int *)this + 25);
  if ((_DWORD)v4)
  {
    v5 = (WebCore::MediaStream **)*((_QWORD *)this + 11);
    v6 = 8 * v4;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (*((_DWORD *)v7 + 22) == 1)
        {
          WebCore::MediaStream::~MediaStream(v7);
          bmalloc::api::isoDeallocate(v8, v9);
        }
        else
        {
          --*((_DWORD *)v7 + 22);
        }
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v10 = (WTF *)*((_QWORD *)this + 11);
  if (v10)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v10, a2);
  }
  v11 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v11)
  {
    if (v11[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
    else
      --v11[6];
  }
  v12 = (WebCore::RTCRtpReceiver *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v12)
  {
    if (*((_DWORD *)v12 + 2) == 1)
    {
      WebCore::RTCRtpReceiver::~RTCRtpReceiver(v12, a2);
      bmalloc::api::isoDeallocate(v15, v16);
    }
    else
    {
      --*((_DWORD *)v12 + 2);
    }
  }
  WebCore::Event::~Event(this, a2);
}

void WebCore::RTCTransformEvent::~RTCTransformEvent(WebCore::RTCTransformEvent *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  WebCore::Event::~Event(this, a2);
}

{
  _DWORD *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::RTCRtpTransform::isAttached(void)::$_0,WebCore::RTCRtpTransform::isAttached(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::RTCRtpScriptTransform,WebCore::RTCRtpSFrameTransform<WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v2 = *a2;
  if (*(_BYTE *)(*a2 + 56))
    return 1;
  v4 = *(_QWORD *)(v2 + 72);
  if (v4)
  {
    if (WebCore::InternalReadableStream::isLocked(*(WebCore::InternalReadableStream **)(v4 + 8)))
      return 1;
  }
  v5 = *(_QWORD *)(v2 + 80);
  return v5 && WebCore::InternalWritableStream::locked(*(WebCore::InternalWritableStream **)(v5 + 16));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::RTCRtpTransform::isAttached(void)::$_0,WebCore::RTCRtpTransform::isAttached(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::RTCRtpScriptTransform,WebCore::RTCRtpSFrameTransform<WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int8 *)(*(_QWORD *)a2 + 40);
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::RTCRtpTransform::attachToReceiver(WebCore::RTCRtpReceiver &,WebCore::RTCRtpTransform*)::$_0,WebCore::RTCRtpTransform::attachToReceiver(WebCore::RTCRtpReceiver &,WebCore::RTCRtpTransform*)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::RTCRtpScriptTransform,WebCore::RTCRtpSFrameTransform<WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>> &>(unsigned int ****a1, unsigned int **a2)
{
  return WebCore::RTCRtpSFrameTransform::initializeTransformer(*a2, ***a1, 1);
}

unsigned __int8 *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::RTCRtpTransform::attachToReceiver(WebCore::RTCRtpReceiver &,WebCore::RTCRtpTransform*)::$_0,WebCore::RTCRtpTransform::attachToReceiver(WebCore::RTCRtpReceiver &,WebCore::RTCRtpTransform*)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::RTCRtpScriptTransform,WebCore::RTCRtpSFrameTransform<WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>> &>(uint64_t a1, unsigned __int8 **a2)
{
  return WebCore::RTCRtpScriptTransform::initializeTransformer(*a2, **(_QWORD **)(*(_QWORD *)a1 + 8));
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::RTCRtpTransform::attachToSender(WebCore::RTCRtpSender &,WebCore::RTCRtpTransform*)::$_0,WebCore::RTCRtpTransform::attachToSender(WebCore::RTCRtpSender &,WebCore::RTCRtpTransform*)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::RTCRtpScriptTransform,WebCore::RTCRtpSFrameTransform<WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>> &>(unsigned int ****a1, unsigned int **a2)
{
  return WebCore::RTCRtpSFrameTransform::initializeTransformer(*a2, ***a1, 0);
}

unsigned __int8 *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::RTCRtpTransform::attachToSender(WebCore::RTCRtpSender &,WebCore::RTCRtpTransform*)::$_0,WebCore::RTCRtpTransform::attachToSender(WebCore::RTCRtpSender &,WebCore::RTCRtpTransform*)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::RTCRtpScriptTransform,WebCore::RTCRtpSFrameTransform<WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>> &>(uint64_t *a1, unsigned __int8 **a2)
{
  uint64_t v2;
  unsigned __int8 *result;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char *v7;

  v2 = *a1;
  result = WebCore::RTCRtpScriptTransform::initializeTransformer(*a2, **(_QWORD **)(*a1 + 8));
  v4 = **(_QWORD **)(v2 + 16);
  if (v4)
  {
    v5 = *(unsigned int *)(v4 + 16);
    if ((_DWORD)v5 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      JUMPOUT(0x1954ABF1CLL);
    }
    v7 = &v6;
    return (unsigned __int8 *)off_1E33621F8[v5](&v7, v4 + 8);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::RTCRtpTransform::backendTransferedToNewTransform(void)::$_0,WebCore::RTCRtpTransform::backendTransferedToNewTransform(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::RTCRtpScriptTransform,WebCore::RTCRtpSFrameTransform<WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>> &>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;

  v2 = *a2;
  *(_BYTE *)(v2 + 40) = 0;
  v3 = (unsigned __int8 *)(v2 + 56);
  if (__ldaxr((unsigned __int8 *)(v2 + 56)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v2 + 56);
LABEL_5:
  *(_BYTE *)(v2 + 57) = 0;
  v5 = *(_QWORD *)(v2 + 32);
  v6 = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(v2 + 64) = 0;
  v7 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v7 = &off_1E3361970;
  *(_QWORD *)(v7 + 8) = v6;
  *(_BYTE *)(v7 + 16) = 0;
  v10 = v7;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v5 + 104) + 24))(*(_QWORD *)(v5 + 104), &v10);
  result = v10;
  v10 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v9 = __ldxr(v3);
  if (v9 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 56));
  }
  if (__stlxr(0, v3))
    return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 56));
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::RTCRtpTransform::clearBackend(void)::$_0,WebCore::RTCRtpTransform::clearBackend(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::RTCRtpScriptTransform,WebCore::RTCRtpSFrameTransform<WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>> &>(_QWORD ***a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)***a1 + 24))(***a1);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::RTCRtpTransform::clearBackend(void)::$_0,WebCore::RTCRtpTransform::clearBackend(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::RTCRtpScriptTransform,WebCore::RTCRtpSFrameTransform<WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>> &>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;

  v2 = *a2;
  *(_BYTE *)(v2 + 40) = 0;
  v3 = (unsigned __int8 *)(v2 + 56);
  if (__ldaxr((unsigned __int8 *)(v2 + 56)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v3))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v2 + 56);
LABEL_5:
  *(_BYTE *)(v2 + 57) = 0;
  v5 = *(_QWORD *)(v2 + 32);
  v6 = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(v2 + 64) = 0;
  v7 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v7 = &off_1E3361970;
  *(_QWORD *)(v7 + 8) = v6;
  *(_BYTE *)(v7 + 16) = 1;
  v10 = v7;
  (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v5 + 104) + 24))(*(_QWORD *)(v5 + 104), &v10);
  result = v10;
  v10 = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v9 = __ldxr(v3);
  if (v9 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 56));
  }
  if (__stlxr(0, v3))
    return WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 56));
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator==(WebCore::RTCRtpTransform const&,WebCore::RTCRtpTransform const&)::$_0,WebCore::operator==(WebCore::RTCRtpTransform const&,WebCore::RTCRtpTransform const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::RTCRtpScriptTransform,WebCore::RTCRtpSFrameTransform<WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>> const&>(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  v2 = **a1;
  v6 = a2;
  v3 = *(unsigned int *)(v2 + 16);
  if ((_DWORD)v3 == -1)
  {
    v5 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator==(WebCore::RTCRtpTransform const&,WebCore::RTCRtpTransform const&)::$_0,WebCore::operator==(WebCore::RTCRtpTransform const&,WebCore::RTCRtpTransform const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::RTCRtpScriptTransform,WebCore::RTCRtpSFrameTransform<WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>> const&>(v5);
  }
  else
  {
    v7 = &v6;
    return ((uint64_t (*)(uint64_t **, uint64_t))off_1E3362228[v3])(&v7, v2 + 8);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator==(WebCore::RTCRtpTransform const&,WebCore::RTCRtpTransform const&)::$_0,WebCore::operator==(WebCore::RTCRtpTransform const&,WebCore::RTCRtpTransform const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>,std::__variant_detail::_Trait<WebCore::RTCRtpScriptTransform,WebCore::RTCRtpSFrameTransform<WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>,WTF::RawPtrTraits<WTF::RefPtr><WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WTF::RefPtr>,WTF::DefaultRefDerefTraits<WTF::RefPtr>>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD ***v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v7 = a2;
  v3 = *(unsigned int *)(v2 + 16);
  if ((_DWORD)v3 == -1)
  {
    v5 = (_QWORD ***)std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator==(WebCore::RTCRtpTransform const&,WebCore::RTCRtpTransform const&)::$_0::operator() const(WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WebCore::RTCRtpSFrameTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpSFrameTransform>> const&)::{lambda(WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WebCore::RTCRtpSFrameTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpSFrameTransform>> const&)#1},WebCore::operator==(WebCore::RTCRtpTransform const&,WebCore::RTCRtpTransform const&)::$_0::operator() const(WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WebCore::RTCRtpSFrameTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpSFrameTransform>> const&)::{lambda(WTF::RefPtr<WebCore::RTCRtpScriptTransform,WTF::RawPtrTraits<WebCore::RTCRtpScriptTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpScriptTransform>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WebCore::RTCRtpSFrameTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpSFrameTransform>>,WTF::RefPtr<WebCore::RTCRtpScriptTransform,WTF::RawPtrTraits<WebCore::RTCRtpScriptTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpScriptTransform>>> const&>(v5, v6);
  }
  else
  {
    v8 = &v7;
    return ((uint64_t (*)(uint64_t **, uint64_t))off_1E3362238[v3])(&v8, v2 + 8);
  }
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator==(WebCore::RTCRtpTransform const&,WebCore::RTCRtpTransform const&)::$_0::operator() const(WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WebCore::RTCRtpSFrameTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpSFrameTransform>> const&)::{lambda(WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WebCore::RTCRtpSFrameTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpSFrameTransform>> const&)#1},WebCore::operator==(WebCore::RTCRtpTransform const&,WebCore::RTCRtpTransform const&)::$_0::operator() const(WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WebCore::RTCRtpSFrameTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpSFrameTransform>> const&)::{lambda(WTF::RefPtr<WebCore::RTCRtpScriptTransform,WTF::RawPtrTraits<WebCore::RTCRtpScriptTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpScriptTransform>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WebCore::RTCRtpSFrameTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpSFrameTransform>>,WTF::RefPtr<WebCore::RTCRtpScriptTransform,WTF::RawPtrTraits<WebCore::RTCRtpScriptTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpScriptTransform>>> const&>(_QWORD ***a1, _QWORD *a2)
{
  return ***a1 == *a2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator==(WebCore::RTCRtpTransform const&,WebCore::RTCRtpTransform const&)::$_0::operator() const(WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WebCore::RTCRtpSFrameTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpSFrameTransform>> const&)::{lambda(WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WebCore::RTCRtpSFrameTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpSFrameTransform>> const&)#1},WebCore::operator==(WebCore::RTCRtpTransform const&,WebCore::RTCRtpTransform const&)::$_0::operator() const(WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WebCore::RTCRtpSFrameTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpSFrameTransform>> const&)::{lambda(WTF::RefPtr<WebCore::RTCRtpScriptTransform,WTF::RawPtrTraits<WebCore::RTCRtpScriptTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpScriptTransform>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WebCore::RTCRtpSFrameTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpSFrameTransform>>,WTF::RefPtr<WebCore::RTCRtpScriptTransform,WTF::RawPtrTraits<WebCore::RTCRtpScriptTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpScriptTransform>>> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator==(WebCore::RTCRtpTransform const&,WebCore::RTCRtpTransform const&)::$_1::operator() const(WTF::RefPtr<WebCore::RTCRtpScriptTransform,WTF::RawPtrTraits<WebCore::RTCRtpScriptTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpScriptTransform>> const&)::{lambda(WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WebCore::RTCRtpSFrameTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpSFrameTransform>> const&)#1},WebCore::operator==(WebCore::RTCRtpTransform const&,WebCore::RTCRtpTransform const&)::$_1::operator() const(WTF::RefPtr<WebCore::RTCRtpScriptTransform,WTF::RawPtrTraits<WebCore::RTCRtpScriptTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpScriptTransform>> const&)::{lambda(WTF::RefPtr<WebCore::RTCRtpScriptTransform,WTF::RawPtrTraits<WebCore::RTCRtpScriptTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpScriptTransform>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WebCore::RTCRtpSFrameTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpSFrameTransform>>,WTF::RefPtr<WebCore::RTCRtpScriptTransform,WTF::RawPtrTraits<WebCore::RTCRtpScriptTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpScriptTransform>>> const&>()
{
  return 0;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::operator==(WebCore::RTCRtpTransform const&,WebCore::RTCRtpTransform const&)::$_1::operator() const(WTF::RefPtr<WebCore::RTCRtpScriptTransform,WTF::RawPtrTraits<WebCore::RTCRtpScriptTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpScriptTransform>> const&)::{lambda(WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WebCore::RTCRtpSFrameTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpSFrameTransform>> const&)#1},WebCore::operator==(WebCore::RTCRtpTransform const&,WebCore::RTCRtpTransform const&)::$_1::operator() const(WTF::RefPtr<WebCore::RTCRtpScriptTransform,WTF::RawPtrTraits<WebCore::RTCRtpScriptTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpScriptTransform>> const&)::{lambda(WTF::RefPtr<WebCore::RTCRtpScriptTransform,WTF::RawPtrTraits<WebCore::RTCRtpScriptTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpScriptTransform>> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::RTCRtpSFrameTransform,WTF::RawPtrTraits<WebCore::RTCRtpSFrameTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpSFrameTransform>>,WTF::RefPtr<WebCore::RTCRtpScriptTransform,WTF::RawPtrTraits<WebCore::RTCRtpScriptTransform>,WTF::DefaultRefDerefTraits<WebCore::RTCRtpScriptTransform>>> const&>(_QWORD ***a1, _QWORD *a2)
{
  return ***a1 == *a2;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::RTCSctpTransport>(WebCore::RTCSctpTransport &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  WTF *v2;
  void *v3;

  v2 = (WTF *)WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::RTCSctpTransport>(WebCore::RTCSctpTransport &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(a1, a2);
  return WTF::fastFree(v2, v3);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::RTCSctpTransport>(WebCore::RTCSctpTransport &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::RTCSctpTransport>(WebCore::RTCSctpTransport &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WebCore::RTCSctpTransport *v5;
  uint64_t v7;
  bmalloc::api *v8;
  void *v9;
  bmalloc::api *v10;
  void *v11;

  *a1 = off_1E3362268;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
      {
        WebCore::RTCSctpTransport::~RTCSctpTransport((WebCore::RTCSctpTransport *)v7);
        bmalloc::api::isoDeallocate(v10, v11);
      }
      else
      {
        --*(_DWORD *)(v7 + 24);
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (WebCore::RTCSctpTransport *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (*((_DWORD *)v5 + 6) == 1)
    {
      WebCore::RTCSctpTransport::~RTCSctpTransport(v5);
      bmalloc::api::isoDeallocate(v8, v9);
    }
    else
    {
      --*((_DWORD *)v5 + 6);
    }
  }
  return a1;
}

WTF *WTF::Detail::CallableWrapper<WebCore::RTCSctpTransport::onStateChanged(RTCSctpTransportState,std::optional<double>,std::optional<unsigned short>)::$_0,void>::call(WTF *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::EventTarget *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _BOOL4 v12;
  _DWORD *v13;

  v1 = *((_QWORD *)result + 1);
  v2 = *(_DWORD *)(v1 + 88);
  if (v2 != 2)
  {
    v3 = *((_QWORD *)result + 3);
    *(_BYTE *)(v1 + 104) = *((_BYTE *)result + 32);
    *(_QWORD *)(v1 + 96) = v3;
    if (*((_BYTE *)result + 42))
    {
      *(_WORD *)(v1 + 112) = *((_WORD *)result + 20);
      *(_BYTE *)(v1 + 114) = 1;
    }
    v4 = *((_DWORD *)result + 4);
    if (v2 != v4)
    {
      *(_DWORD *)(v1 + 88) = v4;
      v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v5 || (v6 = *(_QWORD *)(v5 + 96)) == 0)
        v6 = WebCore::threadGlobalDataSlow(result);
      v7 = (WebCore::EventTarget *)(v1 + 32);
      v8 = *(_QWORD *)(v6 + 40);
      if (!v8)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
        v8 = *(_QWORD *)(v6 + 40);
      }
      v9 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v9);
      *(_QWORD *)v9 = off_1E33A4B48;
      *(_QWORD *)(v9 + 8) = 0;
      v11 = *(_DWORD *)(v9 + 20) & 0xFFC00000 | 0x1E8202;
      v12 = *(_QWORD *)(v8 + 1984) != 0;
      *(_DWORD *)(v9 + 16) = 1;
      *(_DWORD *)(v9 + 20) = v11 | v12;
      v13 = *(_DWORD **)(v8 + 1984);
      if (v13)
        *v13 += 2;
      *(_QWORD *)(v9 + 24) = v13;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = v10;
      *(_QWORD *)(v9 + 64) = 0;
      result = WebCore::EventTarget::dispatchEvent(v7, (WebCore::Event *)v9);
      if (*(_DWORD *)(v9 + 16) == 1)
        return (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      else
        --*(_DWORD *)(v9 + 16);
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::computeH264PrefixOffset(std::span<unsigned char const,18446744073709551615ul>)::$_0,BOOL,unsigned long>::call(uint64_t result, unint64_t a2)
{
  if (*(_QWORD *)(result + 24) <= a2)
  {
    __break(1u);
  }
  else if ((*(_BYTE *)(*(_QWORD *)(result + 16) + a2) & 0x1B | 4) == 5)
  {
    **(_QWORD **)(result + 8) = a2 + 2;
    return 1;
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::computeH264PrefixBuffer(std::span<unsigned char const,18446744073709551615ul>)::$_0,BOOL,unsigned long>::call(uint64_t result, unint64_t a2)
{
  if (*(_QWORD *)(result + 16) <= a2)
  {
    __break(1u);
  }
  else
  {
    if ((*(_BYTE *)(*(_QWORD *)(result + 8) + a2) & 0x1F) == 8)
      **(_QWORD **)(result + 24) = a2;
    return 1;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::computeH264PrefixBuffer(std::span<unsigned char const,18446744073709551615ul>)::$_1,BOOL,unsigned long>::call(uint64_t a1, uint64_t a2)
{
  **(_QWORD **)(a1 + 8) = a2;
  return 1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::toRbsp(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned long)::$_0,void,unsigned long,BOOL>::call(uint64_t result, uint64_t a2, int a3)
{
  if (a3)
    ++**(_QWORD **)(result + 8);
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::toRbsp(WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,unsigned long)::$_1,void,unsigned long,BOOL>::call(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  _BYTE *v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;

  v4 = result;
  if (a3)
  {
    v5 = *(_QWORD *)(result + 16);
    v6 = *(unsigned int *)(v5 + 12);
    if ((_DWORD)v6 == *(_DWORD *)(v5 + 8))
    {
      v7 = v6 + (v6 >> 2);
      if (v7 >= 0x10)
        v8 = v7 + 1;
      else
        v8 = 16;
      if (v8 <= v6 + 1)
        v9 = v6 + 1;
      else
        v9 = v8;
      if (HIDWORD(v9))
      {
        __break(0xC471u);
        return result;
      }
      v10 = *(void **)v5;
      v11 = (void *)WTF::fastMalloc((WTF *)v9);
      *(_DWORD *)(v5 + 8) = v9;
      *(_QWORD *)v5 = v11;
      result = (uint64_t)memcpy(v11, v10, v6);
      if (v10)
      {
        if (*(void **)v5 == v10)
        {
          *(_QWORD *)v5 = 0;
          *(_DWORD *)(v5 + 8) = 0;
        }
        result = WTF::fastFree((WTF *)v10, v12);
      }
      v13 = (_BYTE *)(*(_QWORD *)v5 + *(unsigned int *)(v5 + 12));
    }
    else
    {
      v13 = (_BYTE *)(*(_QWORD *)v5 + v6);
    }
    *v13 = 3;
    ++*(_DWORD *)(v5 + 12);
  }
  v14 = *(_QWORD *)(v4 + 16);
  v15 = (_BYTE *)(*(_QWORD *)(v4 + 8) + a2);
  v16 = *(unsigned int *)(v14 + 12);
  if ((_DWORD)v16 == *(_DWORD *)(v14 + 8))
  {
    result = (uint64_t)WTF::Vector<unsigned char,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(char ***)(v4 + 16), (WTF *)(v16 + 1), (unint64_t)v15);
    v15 = (_BYTE *)result;
    v16 = *(unsigned int *)(v14 + 12);
  }
  *(_BYTE *)(*(_QWORD *)v14 + v16) = *v15;
  ++*(_DWORD *)(v14 + 12);
  return result;
}

const char *WebCore::UserMediaController::supplementName(WebCore::UserMediaController *this)
{
  return "UserMediaController";
}

void WebCore::UserMediaController::~UserMediaController(WebCore::UserMediaController *this)
{
  *(_QWORD *)this = off_1E33623B0;
  (***((void (****)(_QWORD))this + 1))(*((_QWORD *)this + 1));
}

{
  void *v2;

  *(_QWORD *)this = off_1E33623B0;
  (***((void (****)(_QWORD))this + 1))(*((_QWORD *)this + 1));
  WTF::fastFree(this, v2);
}

uint64_t WebCore::UserMediaController::logEnumerateDevicesDenial(WebCore::UserMediaController *this, WebCore::Document *a2)
{
  uint64_t result;
  _DWORD *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WTF::StringImpl *v11;

  WebCore::PermissionsPolicy::isFeatureEnabled(0, a2, 1);
  result = WebCore::PermissionsPolicy::isFeatureEnabled(1u, a2, 1);
  v4 = (_DWORD *)*((_QWORD *)a2 + 87);
  if (v4)
  {
    ++v4[6];
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    if (v11)
    {
      if (*((_DWORD *)v11 + 1))
      {
        v6 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 104))(v4);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 24);
          if (v7)
          {
            v8 = *(_QWORD *)(v7 + 8);
            if (v8)
            {
              v9 = *(_QWORD *)(v8 + 792);
              if (v9)
              {
                ++*(_DWORD *)(v9 + 16);
                WebCore::PageConsoleClient::addMessage((uint64_t *)v9, 1, 2, (uint64_t)&v11, 0, 0);
                v10 = *(_DWORD *)(v9 + 16);
                if (!v10)
                {
                  result = 286;
                  __break(0xC471u);
                  return result;
                }
                *(_DWORD *)(v9 + 16) = v10 - 1;
              }
            }
          }
        }
      }
      result = (uint64_t)v11;
      v11 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v5);
        else
          *(_DWORD *)result -= 2;
      }
    }
    if (v4[6] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v4 + 72))(v4);
    else
      --v4[6];
  }
  return result;
}

uint64_t WebCore::UserMediaRequest::UserMediaRequest(WebCore::ContextDestructionObserver *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  _BYTE v21[24];
  WebCore::ContextDestructionObserver *v22;

  v10 = a2;
  *((_DWORD *)this + 6) = 1;
  v12 = *(_QWORD *)(a2 + 704);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
      v10 = v13;
  }
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, (WebCore::ScriptExecutionContext *)(v10 + 192));
  *(_QWORD *)this = &off_1E33A0540;
  *((_QWORD *)this + 2) = 0;
  if (*(_BYTE *)(v10 + 470))
  {
    result = 422;
    __break(0xC471u);
  }
  else
  {
    v22 = this;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v10 + 320), (uint64_t *)&v22, (uint64_t)v21);
    *((_QWORD *)this + 4) = WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>::generateIdentifierInternal();
    *(_QWORD *)this = &off_1E33623D0;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    v14 = (_QWORD *)WTF::fastMalloc((WTF *)8);
    v15 = *a6;
    *a6 = 0;
    *v14 = v15;
    *((_BYTE *)this + 88) = *(_BYTE *)a3;
    *((_QWORD *)this + 9) = v14;
    *((_QWORD *)this + 10) = 0;
    WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap((uint64_t)this + 96, a3 + 8);
    *((_OWORD *)this + 65) = 0u;
    v16 = *(_QWORD *)(a3 + 952);
    *(_QWORD *)(a3 + 952) = 0;
    *((_QWORD *)this + 130) = v16;
    LODWORD(v16) = *(_DWORD *)(a3 + 960);
    *(_DWORD *)(a3 + 960) = 0;
    *((_DWORD *)this + 262) = v16;
    LODWORD(v16) = *(_DWORD *)(a3 + 964);
    *(_DWORD *)(a3 + 964) = 0;
    *((_DWORD *)this + 263) = v16;
    *((_BYTE *)this + 1056) = *(_BYTE *)(a3 + 968);
    WebCore::MediaTrackConstraintSetMap::MediaTrackConstraintSetMap((uint64_t)this + 1064, a3 + 976);
    *(_OWORD *)((char *)this + 2008) = 0u;
    v17 = *(_QWORD *)(a3 + 1920);
    *(_QWORD *)(a3 + 1920) = 0;
    *((_QWORD *)this + 251) = v17;
    LODWORD(v17) = *(_DWORD *)(a3 + 1928);
    *(_DWORD *)(a3 + 1928) = 0;
    *((_DWORD *)this + 504) = v17;
    LODWORD(v17) = *(_DWORD *)(a3 + 1932);
    *(_DWORD *)(a3 + 1932) = 0;
    *((_DWORD *)this + 505) = v17;
    *((_BYTE *)this + 2024) = *(_BYTE *)(a3 + 1936);
    *((_OWORD *)this + 127) = *(_OWORD *)(a3 + 1944);
    *((_BYTE *)this + 2056) = 0;
    *((_DWORD *)this + 782) = -1;
    v18 = *(unsigned int *)(a4 + 1080);
    if ((_DWORD)v18 != -1)
    {
      ((void (*)(_BYTE *, char *, uint64_t))off_1E3362778[v18])(v21, (char *)this + 2056, a4 + 8);
      *((_DWORD *)this + 782) = v18;
    }
    *((_BYTE *)this + 3144) = 0;
    *((_DWORD *)this + 1054) = -1;
    v19 = *(unsigned int *)(a5 + 1080);
    if ((_DWORD)v19 != -1)
    {
      ((void (*)(_BYTE *, char *, uint64_t))off_1E3362778[v19])(v21, (char *)this + 3144, a5 + 8);
      *((_DWORD *)this + 1054) = v19;
    }
    return (uint64_t)this;
  }
  return result;
}

void WebCore::UserMediaRequest::~UserMediaRequest(WebCore::UserMediaRequest *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  void *v7;
  uint64_t v8;
  WTF *v9;
  _DWORD *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  WTF *v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  char v21;
  char v22;

  *(_QWORD *)this = &off_1E33623D0;
  v3 = *((_QWORD *)this + 10);
  if (v3)
  {
    *((_QWORD *)this + 10) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  v4 = *((unsigned int *)this + 1054);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))*(&off_1E3362768 + v4))(&v21, (char *)this + 3144);
  *((_DWORD *)this + 1054) = -1;
  v5 = *((unsigned int *)this + 782);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, char *))*(&off_1E3362768 + v5))(&v22, (char *)this + 2056);
  *((_DWORD *)this + 782) = -1;
  WebCore::MediaConstraints::~MediaConstraints((WebCore::UserMediaRequest *)((char *)this + 1064), a2);
  WebCore::MediaConstraints::~MediaConstraints((WebCore::UserMediaRequest *)((char *)this + 96), v6);
  v8 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = (WTF *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v9)
  {
    v10 = *(_DWORD **)v9;
    *(_QWORD *)v9 = 0;
    if (v10)
    {
      if (v10[4] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
      else
        --v10[4];
    }
    WTF::fastFree(v9, v7);
  }
  v11 = *((unsigned int *)this + 17);
  if ((_DWORD)v11)
  {
    v15 = (WTF::StringImpl **)*((_QWORD *)this + 7);
    v16 = 8 * v11;
    do
    {
      v17 = *v15;
      *v15 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, (WTF::StringImpl *)v7);
        else
          *(_DWORD *)v17 -= 2;
      }
      ++v15;
      v16 -= 8;
    }
    while (v16);
  }
  v12 = (WTF *)*((_QWORD *)this + 7);
  if (v12)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v12, v7);
  }
  v13 = *((unsigned int *)this + 13);
  if ((_DWORD)v13)
  {
    v18 = (WTF::StringImpl **)*((_QWORD *)this + 5);
    v19 = 8 * v13;
    do
    {
      v20 = *v18;
      *v18 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v7);
        else
          *(_DWORD *)v20 -= 2;
      }
      ++v18;
      v19 -= 8;
    }
    while (v19);
  }
  v14 = (WTF *)*((_QWORD *)this + 5);
  if (v14)
  {
    *((_QWORD *)this + 5) = 0;
    *((_DWORD *)this + 12) = 0;
    WTF::fastFree(v14, v7);
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v7);
}

{
  WTF *v2;
  void *v3;

  WebCore::UserMediaRequest::~UserMediaRequest(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::UserMediaRequest::userMediaDocumentOrigin(WebCore::UserMediaRequest *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  v4 = *(unsigned __int8 *)(v3 + 178);
  if (*(_BYTE *)(v3 + 178))
  {
    if (v4 == 1 || v4 == 2)
      ++*(_DWORD *)(v3 + 216);
  }
  else
  {
    *(_DWORD *)(v3 - 264) += 2;
  }
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(v3 - 96), a2);
  v7 = v6;
  v8 = *(unsigned __int8 *)(v3 + 178);
  if (*(_BYTE *)(v3 + 178))
  {
    if (v8 == 1)
    {
      if (*(_DWORD *)(v3 + 216) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)(v3 - 96) + 40))(v3 - 96);
      else
        --*(_DWORD *)(v3 + 216);
    }
    else if (v8 == 2)
    {
      WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v3 + 216));
    }
  }
  else if (*(_DWORD *)(v3 - 264) == 2)
  {
    if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288), v5);
  }
  else
  {
    *(_DWORD *)(v3 - 264) -= 2;
  }
  return v7;
}

uint64_t WebCore::UserMediaRequest::topLevelDocumentOrigin(WebCore::UserMediaRequest *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  void *v4;
  uint64_t v5;
  int v6;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(unsigned __int8 *)(v2 + 178);
  if (*(_BYTE *)(v2 + 178))
  {
    if (v3 == 1 || v3 == 2)
      ++*(_DWORD *)(v2 + 216);
  }
  else
  {
    *(_DWORD *)(v2 - 264) += 2;
  }
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 - 96) + 256))(v2 - 96);
  v6 = *(unsigned __int8 *)(v2 + 178);
  if (*(_BYTE *)(v2 + 178))
  {
    if (v6 == 1)
    {
      if (*(_DWORD *)(v2 + 216) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)(v2 - 96) + 40))(v2 - 96);
      else
        --*(_DWORD *)(v2 + 216);
    }
    else if (v6 == 2)
    {
      WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v2 + 216));
    }
  }
  else if (*(_DWORD *)(v2 - 264) == 2)
  {
    if ((*(_WORD *)(v2 - 258) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)(v2 - 288), v4);
  }
  else
  {
    *(_DWORD *)(v2 - 264) -= 2;
  }
  return v5;
}

WTF::StringImpl *WebCore::UserMediaRequest::start(WebCore::UserMediaRequest *this)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t isFeatureEnabled;
  WTF::StringImpl *result;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27[2];

  v2 = *((_QWORD *)this + 1);
  if (!v2)
    return WebCore::UserMediaRequest::deny(this, 2, MEMORY[0x1E0CBF738], 0);
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return WebCore::UserMediaRequest::deny(this, 2, MEMORY[0x1E0CBF738], 0);
  if (*(_BYTE *)(v3 + 178))
  {
    if (*(unsigned __int8 *)(v3 + 178) - 1 <= 1)
      ++*(_DWORD *)(v3 + 216);
    __break(0xC471u);
    JUMPOUT(0x1954AD344);
  }
  v4 = (_DWORD *)(v3 - 264);
  *(_DWORD *)(v3 - 264) += 2;
  v5 = *(_QWORD *)(v3 + 240);
  if (!v5
    || (v6 = *(_QWORD *)(v5 + 8)) == 0
    || (v7 = *(_QWORD *)(v6 + 24)) == 0
    || (v8 = *(_QWORD *)(v7 + 8)) == 0
    || (v27[0] = (WTF::StringImpl *)"UserMediaController",
        v27[1] = (WTF::StringImpl *)20,
        (isFeatureEnabled = (uint64_t)WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)(v8 + 8), (const char **)v27)) == 0)|| (v12 = *(_QWORD *)(isFeatureEnabled + 16)) == 0)
  {
    result = WebCore::UserMediaRequest::deny(this, 2, MEMORY[0x1E0CBF738], 0);
    goto LABEL_10;
  }
  if (*((unsigned __int8 *)this + 88) - 1 < 2)
  {
    isFeatureEnabled = WebCore::PermissionsPolicy::isFeatureEnabled(3u, (_QWORD *)(v3 - 288), 1);
    if ((isFeatureEnabled & 1) == 0)
    {
      result = WebCore::UserMediaRequest::deny(this, 6, MEMORY[0x1E0CBF738], 0);
      v13 = *(_DWORD **)(v3 + 408);
      if (!v13)
        goto LABEL_10;
      ++v13[6];
      result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      if (!v27[0])
        goto LABEL_56;
      if (!*((_DWORD *)v27[0] + 1))
        goto LABEL_53;
      v15 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v13 + 104))(v13);
      if (!v15)
        goto LABEL_53;
      v16 = *(_QWORD *)(v15 + 24);
      if (!v16)
        goto LABEL_53;
      v17 = *(_QWORD *)(v16 + 8);
      if (!v17)
        goto LABEL_53;
      v18 = *(_QWORD *)(v17 + 792);
      if (!v18)
        goto LABEL_53;
      ++*(_DWORD *)(v18 + 16);
      WebCore::PageConsoleClient::addMessage((uint64_t *)v18, 1, 2, (uint64_t)v27, 0, 0);
      v19 = *(_DWORD *)(v18 + 16);
      if (!v19)
        goto LABEL_69;
      goto LABEL_52;
    }
LABEL_34:
    v20 = WebCore::PlatformMediaSessionManager::sharedManager((WebCore::PlatformMediaSessionManager *)isFeatureEnabled);
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 120))(v20);
    result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, WebCore::UserMediaRequest *))(**(_QWORD **)(v12 + 8)
                                                                                               + 8))(*(_QWORD *)(v12 + 8), this);
    goto LABEL_10;
  }
  if (*((_BYTE *)this + 88))
    goto LABEL_34;
  if (*((_BYTE *)this + 1056))
  {
    isFeatureEnabled = WebCore::PermissionsPolicy::isFeatureEnabled(1u, (_QWORD *)(v3 - 288), 1);
    if ((isFeatureEnabled & 1) == 0)
    {
      result = WebCore::UserMediaRequest::deny(this, 6, MEMORY[0x1E0CBF738], 0);
      v13 = *(_DWORD **)(v3 + 408);
      if (!v13)
        goto LABEL_10;
      ++v13[6];
      result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      if (!v27[0])
        goto LABEL_56;
      if (!*((_DWORD *)v27[0] + 1))
        goto LABEL_53;
      v21 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v13 + 104))(v13);
      if (!v21)
        goto LABEL_53;
      v22 = *(_QWORD *)(v21 + 24);
      if (!v22)
        goto LABEL_53;
      v23 = *(_QWORD *)(v22 + 8);
      if (!v23)
        goto LABEL_53;
      v18 = *(_QWORD *)(v23 + 792);
      if (!v18)
        goto LABEL_53;
      ++*(_DWORD *)(v18 + 16);
      WebCore::PageConsoleClient::addMessage((uint64_t *)v18, 1, 2, (uint64_t)v27, 0, 0);
      v19 = *(_DWORD *)(v18 + 16);
      if (!v19)
      {
        __break(0xC471u);
        JUMPOUT(0x1954AD20CLL);
      }
      goto LABEL_52;
    }
  }
  if (!*((_BYTE *)this + 2024))
    goto LABEL_34;
  isFeatureEnabled = WebCore::PermissionsPolicy::isFeatureEnabled(0, (_QWORD *)(v3 - 288), 1);
  if ((isFeatureEnabled & 1) != 0)
    goto LABEL_34;
  result = WebCore::UserMediaRequest::deny(this, 6, MEMORY[0x1E0CBF738], 0);
  v13 = *(_DWORD **)(v3 + 408);
  if (!v13)
    goto LABEL_10;
  ++v13[6];
  result = (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (v27[0])
  {
    if (!*((_DWORD *)v27[0] + 1)
      || (v24 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v13 + 104))(v13)) == 0
      || (v25 = *(_QWORD *)(v24 + 24)) == 0
      || (v26 = *(_QWORD *)(v25 + 8)) == 0
      || (v18 = *(_QWORD *)(v26 + 792)) == 0)
    {
LABEL_53:
      result = v27[0];
      v27[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v14);
        else
          *(_DWORD *)result -= 2;
      }
      goto LABEL_56;
    }
    ++*(_DWORD *)(v18 + 16);
    WebCore::PageConsoleClient::addMessage((uint64_t *)v18, 1, 2, (uint64_t)v27, 0, 0);
    v19 = *(_DWORD *)(v18 + 16);
    if (!v19)
    {
LABEL_69:
      __break(0xC471u);
      JUMPOUT(0x1954AD0DCLL);
    }
LABEL_52:
    *(_DWORD *)(v18 + 16) = v19 - 1;
    goto LABEL_53;
  }
LABEL_56:
  if (v13[6] == 1)
    result = (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v13 + 72))(v13);
  else
    --v13[6];
LABEL_10:
  v11 = *(unsigned __int8 *)(v3 + 178);
  if (*(_BYTE *)(v3 + 178))
  {
    if (v11 == 1)
    {
      if (*(_DWORD *)(v3 + 216) == 1)
        return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v3 - 96) + 40))(v3 - 96);
      else
        --*(_DWORD *)(v3 + 216);
    }
    else if (v11 == 2)
    {
      return (WTF::StringImpl *)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v3 + 216));
    }
  }
  else if (*v4 == 2)
  {
    if ((*(_WORD *)(v3 - 258) & 0x400) == 0)
      return (WTF::StringImpl *)WebCore::Node::removedLastRef((WebCore::Node *)(v3 - 288));
  }
  else
  {
    *v4 -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::UserMediaRequest::deny(WTF::StringImpl *result, int a2, JSC::JSGlobalObject *a3, int a4)
{
  uint64_t v4;
  WTF::StringImpl *v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v12;
  uint64_t *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF *v16;
  WTF::StringImpl *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)result + 1);
  if (v4 && *(_QWORD *)(v4 + 8))
  {
    v6 = result;
    switch(a2)
    {
      case 0:
        goto LABEL_33;
      case 1:
        v7 = off_1ECE7C518;
        if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v25[0]) = 0;
          _os_log_impl(&dword_1940B8000, v7, OS_LOG_TYPE_DEFAULT, "UserMediaRequest::deny - no constraints", (uint8_t *)v25, 2u);
        }
        v8 = 33;
        goto LABEL_34;
      case 2:
        v9 = off_1ECE7C518;
        if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v25[0]) = 0;
          _os_log_impl(&dword_1940B8000, v9, OS_LOG_TYPE_DEFAULT, "UserMediaRequest::deny - user media disabled", (uint8_t *)v25, 2u);
        }
        v8 = 14;
        goto LABEL_34;
      case 3:
        v10 = off_1ECE7C518;
        if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v25[0]) = 0;
          _os_log_impl(&dword_1940B8000, v10, OS_LOG_TYPE_DEFAULT, "UserMediaRequest::deny - no capture devices", (uint8_t *)v25, 2u);
        }
        v8 = 5;
        goto LABEL_34;
      case 4:
        v12 = off_1ECE7C518;
        if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(v25[0]) = 67109120;
          HIDWORD(v25[0]) = a4;
          _os_log_impl(&dword_1940B8000, v12, OS_LOG_TYPE_DEFAULT, "UserMediaRequest::deny - invalid constraint - %d", (uint8_t *)v25, 8u);
        }
        v13 = (uint64_t *)*((_QWORD *)v6 + 9);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v14 = (WTF::StringImpl *)v25[0];
        v15 = WTF::fastMalloc((WTF *)0x20);
        v16 = (WTF *)v15;
        *(_DWORD *)v15 = 1;
        *(_QWORD *)(v15 + 8) = 0;
        *(_BYTE *)(v15 + 16) = a4;
        if (v14)
          *(_DWORD *)v14 += 2;
        *(_QWORD *)(v15 + 24) = v14;
        result = (WTF::StringImpl *)WebCore::DeferredPromise::reject<WebCore::IDLInterface<WebCore::OverconstrainedError>>(*v13, (WTF *)v15, 0);
        if (*(_DWORD *)v16 == 1)
        {
          v23 = (WTF::StringImpl *)*((_QWORD *)v16 + 3);
          *((_QWORD *)v16 + 3) = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v17);
            else
              *(_DWORD *)v23 -= 2;
          }
          v24 = (WTF::StringImpl *)*((_QWORD *)v16 + 1);
          *((_QWORD *)v16 + 1) = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 2)
              WTF::StringImpl::destroy(v24, v17);
            else
              *(_DWORD *)v24 -= 2;
          }
          result = (WTF::StringImpl *)WTF::fastFree(v16, v17);
          if (!v14)
            return result;
        }
        else
        {
          --*(_DWORD *)v16;
          if (!v14)
            return result;
        }
        if (*(_DWORD *)v14 != 2)
        {
          *(_DWORD *)v14 -= 2;
          return result;
        }
        result = v14;
        goto LABEL_50;
      case 5:
        v18 = off_1ECE7C518;
        if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v25[0]) = 0;
          _os_log_impl(&dword_1940B8000, v18, OS_LOG_TYPE_DEFAULT, "UserMediaRequest::deny - hardware error", (uint8_t *)v25, 2u);
        }
        v8 = 23;
        goto LABEL_34;
      case 6:
        v19 = off_1ECE7C518;
        if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v25[0]) = 0;
          _os_log_impl(&dword_1940B8000, v19, OS_LOG_TYPE_DEFAULT, "UserMediaRequest::deny - permission denied", (uint8_t *)v25, 2u);
        }
        v8 = 31;
        goto LABEL_34;
      case 7:
        v20 = off_1ECE7C518;
        if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v25[0]) = 0;
          _os_log_impl(&dword_1940B8000, v20, OS_LOG_TYPE_DEFAULT, "UserMediaRequest::deny - invalid access", (uint8_t *)v25, 2u);
        }
        v8 = 12;
        goto LABEL_34;
      case 8:
        v21 = off_1ECE7C518;
        if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v25[0]) = 0;
          _os_log_impl(&dword_1940B8000, v21, OS_LOG_TYPE_DEFAULT, "UserMediaRequest::deny - other failure", (uint8_t *)v25, 2u);
        }
LABEL_33:
        v8 = 16;
        goto LABEL_34;
      default:
        v8 = 0;
LABEL_34:
        if (*(_QWORD *)a3 && *(_DWORD *)(*(_QWORD *)a3 + 4))
        {
          result = (WTF::StringImpl *)WebCore::DeferredPromise::reject(**((_QWORD **)v6 + 9), (JSC::JSGlobalObject *)v8, a3, 0);
        }
        else
        {
          v22 = **((_QWORD **)v6 + 9);
          v25[0] = 0;
          WebCore::DeferredPromise::reject(v22, (JSC::JSGlobalObject *)v8, (JSC::JSGlobalObject *)v25, 0);
          result = (WTF::StringImpl *)v25[0];
          v25[0] = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
LABEL_50:
              result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
            else
              *(_DWORD *)result -= 2;
          }
        }
        break;
    }
  }
  return result;
}

_QWORD *WebCore::UserMediaRequest::allow(uint64_t a1, uint64_t *a2, uint64_t *a3, __int128 *a4, uint64_t *a5)
{
  NSObject *v10;
  int v11;
  const char *v12;
  char *v13;
  void *v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  char v21;
  __int128 v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t (**v33)();
  __int128 v35;
  __int128 v36;
  __int128 v37;
  WTF *v38;
  WTF *v39;
  _BYTE buf[22];
  __int128 v41;
  int v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  int v46;
  __int128 v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v10 = off_1ECE7C518;
  if (!os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_DEFAULT))
    goto LABEL_20;
  v11 = *((unsigned __int8 *)a2 + 8);
  if (*((_BYTE *)a2 + 8))
  {
    WTF::String::utf8();
    if (v38)
      v12 = (char *)v38 + 16;
    else
      v12 = 0;
  }
  else
  {
    v12 = "";
  }
  if (*((_BYTE *)a3 + 8))
  {
    WTF::String::utf8();
    if (v39)
      v13 = (char *)v39 + 16;
    else
      v13 = 0;
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v12;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v13;
    _os_log_impl(&dword_1940B8000, v10, OS_LOG_TYPE_DEFAULT, "UserMediaRequest::allow %s %s", buf, 0x16u);
    v15 = v39;
    v39 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
      {
        WTF::fastFree(v15, v14);
        if (!v11)
          goto LABEL_20;
      }
      else
      {
        --*(_DWORD *)v15;
        if (!v11)
          goto LABEL_20;
      }
      goto LABEL_17;
    }
  }
  else
  {
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v12;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "";
    _os_log_impl(&dword_1940B8000, v10, OS_LOG_TYPE_DEFAULT, "UserMediaRequest::allow %s %s", buf, 0x16u);
  }
  if (!v11)
    goto LABEL_20;
LABEL_17:
  if (v38)
  {
    if (*(_DWORD *)v38 == 1)
      WTF::fastFree(v38, v14);
    else
      --*(_DWORD *)v38;
  }
LABEL_20:
  v16 = *a5;
  *a5 = 0;
  v17 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v16;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  *(_QWORD *)buf = a1;
  v18 = *a2;
  *a2 = 0;
  buf[16] = *((_BYTE *)a2 + 8);
  v19 = buf[16];
  v42 = *((_DWORD *)a2 + 8);
  v20 = v42;
  v44 = *((_BYTE *)a3 + 8);
  v21 = v44;
  v22 = *((_OWORD *)a2 + 1);
  *((_OWORD *)a2 + 1) = 0u;
  v23 = *a3;
  *a3 = 0;
  v46 = *((_DWORD *)a3 + 8);
  v24 = v46;
  v35 = *((_OWORD *)a3 + 1);
  *((_OWORD *)a3 + 1) = 0u;
  v36 = *a4;
  v37 = v22;
  *a4 = 0u;
  v25 = WTF::fastMalloc((WTF *)0x70);
  *(_QWORD *)v25 = off_1E3362808;
  *(_QWORD *)(v25 + 8) = a1;
  *(_QWORD *)&buf[8] = 0;
  *(_QWORD *)(v25 + 16) = v18;
  *(_BYTE *)(v25 + 24) = v19;
  *(_OWORD *)(v25 + 32) = v37;
  v41 = 0u;
  *(_DWORD *)(v25 + 48) = v20;
  v43 = 0;
  *(_QWORD *)(v25 + 56) = v23;
  *(_BYTE *)(v25 + 64) = v21;
  *(_OWORD *)(v25 + 72) = v35;
  v45 = 0u;
  *(_DWORD *)(v25 + 88) = v24;
  *(_OWORD *)(v25 + 96) = v36;
  v47 = 0u;
  v26 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v26 = 1;
  v27 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(v26 + 8) = a1;
  ++*(_QWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 24) = v27 + 2;
  v28 = (WTF *)WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v28 = &off_1E33627E0;
  *((_QWORD *)v28 + 1) = a1;
  *((_QWORD *)v28 + 2) = v26;
  *((_QWORD *)v28 + 3) = v25;
  v39 = v28;
  v29 = *(_QWORD *)(a1 + 8);
  if (v29)
  {
    v30 = *(_QWORD *)(v29 + 8);
    if (v30)
    {
      v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v30 - 96) + 104))(v30 - 96);
      WebCore::EventLoopTaskGroup::queueTask(v31, 20, (uint64_t *)&v39);
      v28 = v39;
      v39 = 0;
      if (!v28)
        return WebCore::UserMediaRequest::allow(WebCore::CaptureDevice &&,WebCore::CaptureDevice &,WebCore::MediaDeviceHashSalts &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0(buf, v32);
    }
    else
    {
      v39 = 0;
    }
    v33 = *(uint64_t (***)())v28;
  }
  else
  {
    v39 = 0;
    v33 = &off_1E33627E0;
  }
  v33[1]();
  return WebCore::UserMediaRequest::allow(WebCore::CaptureDevice &&,WebCore::CaptureDevice &,WebCore::MediaDeviceHashSalts &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0(buf, v32);
}

_QWORD *WebCore::UserMediaRequest::allow(WebCore::CaptureDevice &&,WebCore::CaptureDevice &,WebCore::MediaDeviceHashSalts &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v3 = (WTF::StringImpl *)a1[12];
  a1[12] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[11];
  a1[11] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[9];
  a1[9] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[8];
  a1[8] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)a1[4];
  a1[4] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  return a1;
}

uint64_t WebCore::UserMediaRequest::stop(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9[2];

  v1 = this;
  v2 = *(_QWORD *)(this + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      v2 = v3 - 96;
    else
      v2 = 0;
  }
  if (*(_BYTE *)(v2 + 274))
  {
    this = 96;
    __break(0xC471u);
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 336);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 24);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 8);
          if (v7)
          {
            v9[0] = "UserMediaController";
            v9[1] = (const char *)20;
            this = (uint64_t)WTF::HashTable<WTF::ASCIILiteral,WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::ASCIILiteral>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WTF::ASCIILiteral,std::unique_ptr<WebCore::Supplement<WebCore::Page>>,WTF::DefaultHash<WTF::ASCIILiteral>,WTF::HashTraits<WTF::ASCIILiteral>,WTF::HashTraits<std::unique_ptr<WebCore::Supplement<WebCore::Page>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::ASCIILiteral>>>,WTF::ASCIILiteral>((uint64_t *)(v7 + 8), v9);
            if (this)
            {
              v8 = *(_QWORD *)(this + 16);
              if (v8)
                return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v8 + 8) + 16))(*(_QWORD *)(v8 + 8), v1);
            }
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::UserMediaRequest::document(WebCore::UserMediaRequest *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  if (!*(_BYTE *)(v2 + 178))
    return v2 - 288;
  result = 105;
  __break(0xC471u);
  return result;
}

void WebCore::VideoTrackGenerator::create(WebCore::VideoTrackGenerator *this@<X0>, uint64_t a2@<X8>)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  unsigned int **v18;
  int v20;
  uint64_t v21;
  JSC::Structure *v22;
  void *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  int v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  BOOL v44;
  WTF::StringImpl *v45;
  __int128 v46;
  WebCore::MediaStreamTrackPrivate *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl **v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  WebCore::MediaStreamTrackPrivate *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  __int128 v60;
  WTF::StringImpl *v61;
  __int128 v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  void *v68;
  WTF *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF *v72;
  WTF *v73;
  void *v74;
  WebCore::VideoTrackGenerator *v75;
  uint64_t v76;
  WebCore::ContextDestructionObserver *v77;
  WebCore::MediaStreamTrackPrivate *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  int v81;
  WTF::StringImpl *v82[2];
  WTF::StringImpl *v83[2];
  __int128 v84;
  WTF *v85[2];
  __int128 v86;
  __int128 v87;
  char v88;
  __int128 v89;
  __int128 v90;
  WTF *v91[7];
  _BYTE v92[32];
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v5 = *((_OWORD *)this + 15);
  *(_OWORD *)v92 = *((_OWORD *)this + 14);
  *(_OWORD *)&v92[16] = v5;
  v6 = WTF::fastMalloc((WTF *)0x2A0);
  v7 = v6;
  v82[0] = 0;
  LOBYTE(v82[1]) = 3;
  v8 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v8 += 4;
  v83[0] = v8;
  v83[1] = v8;
  LODWORD(v84) = 0;
  v79 = 0;
  v80 = 0;
  WebCore::RealtimeMediaSource::RealtimeMediaSource(v6, (uint64_t)v82, (uint64_t *)&v79, 0);
  v10 = v80;
  v80 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = v79;
  v79 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v83[1];
  v83[1] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v83[0];
  v83[0] = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v9);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v82[0];
  v82[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v9);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = WTF::fastMalloc((WTF *)0x20);
  v16 = v15;
  *(_BYTE *)v15 = 0;
  *(_OWORD *)(v15 + 8) = xmmword_19689B170;
  *(_QWORD *)(v15 + 24) = v7;
  *(_QWORD *)(v7 + 304) = v15;
  *(_QWORD *)v7 = off_1E3362428;
  v17 = *(_OWORD *)&v92[16];
  *(_OWORD *)(v7 + 320) = *(_OWORD *)v92;
  *(_OWORD *)(v7 + 336) = v17;
  v18 = (unsigned int **)(v7 + 352);
  *(_QWORD *)(v7 + 542) = 0;
  *(_OWORD *)(v7 + 512) = 0u;
  *(_OWORD *)(v7 + 528) = 0u;
  *(_OWORD *)(v7 + 480) = 0u;
  *(_OWORD *)(v7 + 496) = 0u;
  *(_OWORD *)(v7 + 464) = 0u;
  *(_QWORD *)(v7 + 557) = 0;
  *(_QWORD *)(v7 + 552) = 0;
  *(_BYTE *)(v7 + 584) = 0;
  *(_OWORD *)(v7 + 568) = 0u;
  *(_QWORD *)(v7 + 608) = 0;
  *(_OWORD *)(v7 + 592) = 0u;
  *(_OWORD *)(v7 + 441) = 0u;
  *(_OWORD *)(v7 + 416) = 0u;
  *(_OWORD *)(v7 + 432) = 0u;
  *(_OWORD *)(v7 + 384) = 0u;
  *(_OWORD *)(v7 + 400) = 0u;
  *(_OWORD *)(v7 + 352) = 0u;
  *(_OWORD *)(v7 + 368) = 0u;
  *(_WORD *)(v7 + 616) = 4;
  *(_BYTE *)(v7 + 618) = 0;
  *(_QWORD *)(v7 + 624) = 0x3FF0000000000000;
  *(_QWORD *)(v7 + 646) = 0;
  *(_OWORD *)(v7 + 632) = 0u;
  *(_OWORD *)(v7 + 656) = 0u;
  if (__ldaxr((unsigned __int8 *)v15))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v15))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v15);
LABEL_22:
  ++*(_QWORD *)(v16 + 8);
  v20 = __ldxr((unsigned __int8 *)v16);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_26;
  }
  if (__stlxr(0, (unsigned __int8 *)v16))
LABEL_26:
    WTF::Lock::unlockSlow((WTF::Lock *)v16);
  v21 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v21 + 8) = 1;
  *(_QWORD *)v21 = off_1E33625D8;
  *(_BYTE *)(v21 + 12) = 0;
  *(_QWORD *)(v21 + 16) = v7;
  v22 = (JSC::Structure *)WebCore::ScriptExecutionContext::globalObject(this);
  ++*(_DWORD *)(v21 + 8);
  v82[0] = (WTF::StringImpl *)v21;
  WebCore::WritableStream::create(v22, v82, (uint64_t)&v79);
  v24 = v82[0];
  v82[0] = 0;
  if (v24)
  {
    if (*((_DWORD *)v24 + 2) == 1)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v24 + 8))(v24);
    else
      --*((_DWORD *)v24 + 2);
  }
  if (v81)
  {
    if (v81 != 1)
    {
      v75 = (WebCore::VideoTrackGenerator *)std::__throw_bad_variant_access[abi:sn180100]();
      WebCore::VideoTrackGenerator::~VideoTrackGenerator(v75);
      return;
    }
    v25 = v80;
    v80 = 0;
    *(_BYTE *)a2 = (_BYTE)v79;
    *(_QWORD *)(a2 + 8) = v25;
    v26 = 1;
    *(_DWORD *)(a2 + 16) = 1;
    goto LABEL_109;
  }
  v27 = v79;
  v79 = 0;
  v28 = *((_QWORD *)v27 + 1);
  if (v28)
    goto LABEL_136;
  v28 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v28 = 1;
  *(_QWORD *)(v28 + 8) = v27;
  v29 = (unsigned int *)*((_QWORD *)v27 + 1);
  *((_QWORD *)v27 + 1) = v28;
  if (!v29)
    goto LABEL_136;
  do
  {
    v30 = __ldaxr(v29);
    v31 = v30 - 1;
  }
  while (__stlxr(v31, v29));
  if (!v31)
  {
    atomic_store(1u, v29);
    WTF::fastFree((WTF *)v29, v23);
  }
  v28 = *((_QWORD *)v27 + 1);
  if (v28)
  {
LABEL_136:
    do
      v32 = __ldaxr((unsigned int *)v28);
    while (__stlxr(v32 + 1, (unsigned int *)v28));
  }
  v33 = *v18;
  *v18 = (unsigned int *)v28;
  if (v33)
  {
    do
    {
      v34 = __ldaxr(v33);
      v35 = v34 - 1;
    }
    while (__stlxr(v35, v33));
    if (!v35)
    {
      atomic_store(1u, v33);
      WTF::fastFree((WTF *)v33, v23);
    }
  }
  v36 = *(_QWORD *)(v7 + 304);
  if (__ldaxr((unsigned __int8 *)v36))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v36))
  {
    goto LABEL_48;
  }
  MEMORY[0x19AEA534C](v36);
LABEL_48:
  ++*(_QWORD *)(v36 + 8);
  v38 = __ldxr((unsigned __int8 *)v36);
  if (v38 != 1)
  {
    __clrex();
    goto LABEL_52;
  }
  if (__stlxr(0, (unsigned __int8 *)v36))
LABEL_52:
    WTF::Lock::unlockSlow((WTF::Lock *)v36);
  v39 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v39 = &off_1E3362888;
  *((_QWORD *)v39 + 1) = v7;
  v82[0] = v39;
  WTF::callOnMainThread();
  v40 = v82[0];
  v82[0] = 0;
  if (v40)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v40 + 8))(v40);
  v41 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v41 + 8) = 1;
  *(_QWORD *)v41 = off_1E335DEC0;
  *(_BYTE *)(v41 + 12) = 1;
  *(_QWORD *)(v41 + 16) = this;
  v42 = (*(uint64_t (**)(WebCore::VideoTrackGenerator *))(*(_QWORD *)this + 152))(this);
  if (v43)
  {
    v44 = (v42 & 0x8000000000000000) == 0 || v42 == -1;
    if (*(WebCore::VideoTrackGenerator **)(v41 + 16) == this)
      *(_BYTE *)(v41 + 12) = v44;
  }
  v76 = v7;
  v77 = (WebCore::ContextDestructionObserver *)v41;
  v45 = (WTF::StringImpl *)operator new(0x30uLL);
  *(_QWORD *)v45 = &off_1E33628B0;
  v46 = *((_OWORD *)this + 15);
  *((_OWORD *)v45 + 1) = *((_OWORD *)this + 14);
  *((_OWORD *)v45 + 2) = v46;
  v83[1] = v45;
  WTF::createVersion4UUIDString(v45);
  v47 = (WebCore::MediaStreamTrackPrivate *)WTF::fastMalloc((WTF *)0x190);
  v78 = (WebCore::MediaStreamTrackPrivate *)WebCore::MediaStreamTrackPrivate::MediaStreamTrackPrivate((uint64_t)v47, (uint64_t *)&v77, &v76, (uint64_t *)v92, (uint64_t)v82);
  WebCore::MediaStreamTrackPrivateSourceObserver::initialize(*((WebCore::MediaStreamTrackPrivateSourceObserver **)v78 + 5), v47);
  v49 = *(WTF::StringImpl **)v92;
  *(_QWORD *)v92 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v48);
    else
      *(_DWORD *)v49 -= 2;
  }
  v50 = (WTF::StringImpl **)v83[1];
  if ((WTF::StringImpl **)v83[1] == v82)
  {
    v51 = 4;
    v50 = v82;
    goto LABEL_67;
  }
  if (v83[1])
  {
    v51 = 5;
LABEL_67:
    (*((void (**)(void))*v50 + v51))();
  }
  if (v76)
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 144))(v76);
  v52 = (unsigned int *)v77;
  v77 = 0;
  if (v52)
  {
    v53 = v52 + 2;
    do
    {
      v54 = __ldaxr(v53);
      v55 = v54 - 1;
    }
    while (__stlxr(v55, v53));
    if (!v55)
    {
      atomic_store(1u, v52 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v52 + 8))(v52);
    }
  }
  v92[4] = 0;
  *(_DWORD *)v92 = 0;
  memset(&v92[8], 0, 17);
  v88 = 0;
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  *(_OWORD *)v85 = 0u;
  *(_OWORD *)v83 = 0u;
  memset(v91, 0, 35);
  v89 = 0u;
  v90 = 0u;
  *(_WORD *)((char *)&v91[4] + 3) = 257;
  memset((char *)&v91[4] + 5, 0, 17);
  v82[0] = 0;
  v82[1] = 0;
  v56 = v78;
  *((_QWORD *)v78 + 13) = 0;
  *((_OWORD *)v56 + 7) = *(_OWORD *)v92;
  *(_OWORD *)((char *)v56 + 121) = *(_OWORD *)&v92[9];
  v57 = (WTF::StringImpl *)*((_QWORD *)v56 + 18);
  *((_QWORD *)v56 + 18) = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, v48);
    else
      *(_DWORD *)v57 -= 2;
  }
  v58 = (WTF::StringImpl *)*((_QWORD *)v56 + 19);
  *((_QWORD *)v56 + 19) = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, v48);
    else
      *(_DWORD *)v58 -= 2;
  }
  v59 = (WTF::StringImpl *)*((_QWORD *)v56 + 20);
  *((_QWORD *)v56 + 20) = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
      WTF::StringImpl::destroy(v59, v48);
    else
      *(_DWORD *)v59 -= 2;
  }
  *((_WORD *)v56 + 84) = 4;
  *((_BYTE *)v56 + 170) = 0;
  *((_QWORD *)v56 + 22) = 0x3FF0000000000000;
  *((_WORD *)v56 + 92) = 0;
  *((_BYTE *)v56 + 186) = 0;
  *(_WORD *)((char *)v56 + 187) = 257;
  *(_QWORD *)((char *)v56 + 197) = 0;
  *(_QWORD *)((char *)v56 + 189) = 0;
  *((_BYTE *)v56 + 205) = 0;
  v60 = *(_OWORD *)v83;
  *((_OWORD *)v56 + 13) = *(_OWORD *)v82;
  *((_OWORD *)v56 + 14) = v60;
  *((_OWORD *)v56 + 15) = v84;
  WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)v56 + 256, (const void **)v85);
  v62 = v87;
  *((_OWORD *)v56 + 17) = v86;
  *((_OWORD *)v56 + 18) = v62;
  *((_BYTE *)v56 + 304) = v88;
  v63 = v89;
  if ((_QWORD)v89)
    *(_DWORD *)v89 += 2;
  v64 = (WTF::StringImpl *)*((_QWORD *)v56 + 39);
  *((_QWORD *)v56 + 39) = v63;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
      WTF::StringImpl::destroy(v64, v61);
    else
      *(_DWORD *)v64 -= 2;
  }
  v65 = *((_QWORD *)&v89 + 1);
  if (*((_QWORD *)&v89 + 1))
    **((_DWORD **)&v89 + 1) += 2;
  v66 = (WTF::StringImpl *)*((_QWORD *)v56 + 40);
  *((_QWORD *)v56 + 40) = v65;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
      WTF::StringImpl::destroy(v66, v61);
    else
      *(_DWORD *)v66 -= 2;
  }
  *(_OWORD *)((char *)v56 + 328) = v90;
  WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)v56 + 344, (const void **)v91);
  *(_OWORD *)((char *)v56 + 360) = *(_OWORD *)&v91[2];
  *(_OWORD *)((char *)v56 + 376) = *(_OWORD *)&v91[4];
  *(WTF **)((char *)v56 + 390) = *(WTF **)((char *)&v91[5] + 6);
  v67 = bmalloc::api::isoAllocate();
  WebCore::MediaStreamTrack::create((uint64_t)this, (uint64_t *)&v78, 1, &v77);
  *(_DWORD *)v67 = 1;
  *(_WORD *)(v67 + 4) = 0;
  *(_QWORD *)(v67 + 8) = v21;
  *(_QWORD *)(v67 + 16) = v27;
  *(_QWORD *)(v67 + 24) = v77;
  *(_QWORD *)a2 = v67;
  *(_DWORD *)(a2 + 16) = 0;
  v69 = v91[0];
  if (v91[0])
  {
    v91[0] = 0;
    LODWORD(v91[1]) = 0;
    WTF::fastFree(v69, v68);
  }
  v70 = (WTF::StringImpl *)*((_QWORD *)&v89 + 1);
  *((_QWORD *)&v89 + 1) = 0;
  if (v70)
  {
    if (*(_DWORD *)v70 == 2)
      WTF::StringImpl::destroy(v70, (WTF::StringImpl *)v68);
    else
      *(_DWORD *)v70 -= 2;
  }
  v71 = (WTF::StringImpl *)v89;
  *(_QWORD *)&v89 = 0;
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
      WTF::StringImpl::destroy(v71, (WTF::StringImpl *)v68);
    else
      *(_DWORD *)v71 -= 2;
  }
  v72 = v85[0];
  if (v85[0])
  {
    v85[0] = 0;
    LODWORD(v85[1]) = 0;
    WTF::fastFree(v72, v68);
  }
  if (v78)
  {
    if (*((_DWORD *)v78 + 2) == 1)
    {
      WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v78, v68);
      WTF::fastFree(v73, v74);
    }
    else
    {
      --*((_DWORD *)v78 + 2);
    }
  }
  v26 = v81;
  if (v81 == -1)
    return;
  v7 = 0;
  v21 = 0;
LABEL_109:
  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3362788[v26])(v82, &v79);
  if (!v21)
    goto LABEL_112;
  if (*(_DWORD *)(v21 + 8) != 1)
  {
    --*(_DWORD *)(v21 + 8);
LABEL_112:
    if (!v7)
      return;
    goto LABEL_113;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  if (v7)
LABEL_113:
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoTrackGenerator::Source,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v7 + 304));
}

void WebCore::VideoTrackGenerator::~VideoTrackGenerator(WebCore::VideoTrackGenerator *this, void *a2)
{
  _DWORD *v3;
  WTF *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v3 = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (v3[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[6];
  }
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v6 = (_DWORD *)*((_QWORD *)v4 + 2);
      *((_QWORD *)v4 + 2) = 0;
      if (v6)
      {
        if (v6[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
        else
          --v6[4];
      }
      v7 = *((_QWORD *)v4 + 1);
      if (v7)
      {
        *(_QWORD *)(v7 + 8) = 0;
        v8 = (unsigned int *)*((_QWORD *)v4 + 1);
        *((_QWORD *)v4 + 1) = 0;
        if (v8)
        {
          do
          {
            v9 = __ldaxr(v8);
            v10 = v9 - 1;
          }
          while (__stlxr(v10, v8));
          if (!v10)
          {
            atomic_store(1u, v8);
            WTF::fastFree((WTF *)v8, a2);
          }
        }
      }
      else
      {
        *((_QWORD *)v4 + 1) = 0;
      }
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
}

uint64_t WebCore::VideoTrackGenerator::Source::endProducingData(WebCore::VideoTrackGenerator::Source *this)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  char v14;
  _OWORD v15[2];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = *((_OWORD *)this + 21);
  v15[0] = *((_OWORD *)this + 20);
  v15[1] = v2;
  v3 = *((_QWORD *)this + 38);
  if (!v3)
  {
    v5 = 0;
    goto LABEL_13;
  }
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  if (*(_QWORD *)(v3 + 24))
  {
    ++*(_QWORD *)(v3 + 16);
    v5 = v3;
  }
  else
  {
    v5 = 0;
  }
  v6 = __ldxr((unsigned __int8 *)v3);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
LABEL_12:
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
LABEL_13:
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v7 = &off_1E3362948;
  v7[1] = v5;
  v7[2] = this;
  v13 = (uint64_t)v7;
  v14 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_17;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_17:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v9 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v15);
  if (v9)
  {
    v10 = v9[4];
    if (v10)
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 336))(v10, &v13);
  }
  v11 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v11 != 1)
  {
    __clrex();
    goto LABEL_26;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_26:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  result = v13;
  v13 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::VideoTrackGenerator::Sink::write(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  _BOOL4 v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t result;
  uint64_t v14;
  WebCore::VideoFrame *v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v26;
  uint64_t v27;
  int v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  objc_class *v42;
  _QWORD *v43;
  WTF::StringImpl *v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;

  if ((a3 & 0xFFFE000000000002) == 0)
  {
    v5 = *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C);
    v6 = *(_DWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C) != 0;
    v7 = (char **)(16 * v5);
    if ((_DWORD)v5)
      v8 = v7 == &WebCore::JSWebCodecsVideoFrame::s_info;
    else
      v8 = 1;
    if (!v8)
    {
      do
      {
        v7 = (char **)v7[2];
        v6 = v7 != 0;
      }
      while (v7 != &WebCore::JSWebCodecsVideoFrame::s_info && v7 != 0);
    }
    if (v6)
    {
      v14 = *(_QWORD *)(a3 + 24);
      if (v14)
      {
        ++*(_DWORD *)(v14 + 16);
        v15 = *(WebCore::VideoFrame **)(v14 + 24);
        if (!v15)
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v38 = *a4;
          v42 = 0;
          LOBYTE(v43) = 33;
          if (v41)
            *(_DWORD *)v41 += 2;
          v44 = v41;
          WebCore::DeferredPromise::reject(v38, (unsigned __int8 *)&v43, 0, &v42);
          v40 = v44;
          v44 = 0;
          if (v40)
          {
            if (*(_DWORD *)v40 == 2)
              WTF::StringImpl::destroy(v40, v39);
            else
              *(_DWORD *)v40 -= 2;
          }
          result = (uint64_t)v41;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2)
              result = WTF::StringImpl::destroy(v41, v39);
            else
              *(_DWORD *)v41 -= 2;
          }
          goto LABEL_66;
        }
        v16 = (unsigned int *)((char *)v15 + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 + 1, v16));
        if (*(_BYTE *)(a1 + 12))
        {
LABEL_56:
          result = (uint64_t)WebCore::WebCodecsVideoFrame::close((WebCore::WebCodecsVideoFrame *)v14, a2);
          v32 = *a4;
          v33 = *(_QWORD *)(v32 + 24);
          if (v33 && *(_QWORD *)v33 && (*(_BYTE *)(v33 + 8) & 3) == 0)
          {
            v34 = *(_QWORD *)(v32 + 32);
            if (!v34 || (*(_BYTE *)(v34 + 8) & 3) != 0)
              v35 = 0;
            else
              v35 = *(uint64_t **)v34;
            JSC::JSLockHolder::JSLockHolder();
            WebCore::DeferredPromise::callFunction(v32, v35, 0, (objc_class *)0xA);
            result = MEMORY[0x19AEA32A0](&v43);
          }
          do
          {
            v36 = __ldaxr(v16);
            v37 = v36 - 1;
          }
          while (__stlxr(v37, v16));
          if (!v37)
          {
            atomic_store(1u, (unsigned int *)v15 + 2);
            result = (*(uint64_t (**)(WebCore::VideoFrame *))(*(_QWORD *)v15 + 8))(v15);
          }
LABEL_66:
          if (*(_DWORD *)(v14 + 16) == 1)
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
          --*(_DWORD *)(v14 + 16);
          return result;
        }
        v18 = *(_QWORD *)(a1 + 16);
        v19 = (*(float (**)(WebCore::VideoFrame *))(*(_QWORD *)v15 + 16))(v15);
        v21 = 0x7FFFFFFFLL;
        if (v19 > -2147500000.0)
          LODWORD(v22) = (int)v19;
        else
          LODWORD(v22) = 0x80000000;
        if (v19 < 2147500000.0)
          v22 = v22;
        else
          v22 = 0x7FFFFFFFLL;
        if (v20 < 2147500000.0)
        {
          if (v20 <= -2147500000.0)
            v21 = 0x80000000;
          else
            v21 = (int)v20;
        }
        v23 = *((unsigned __int16 *)v15 + 17);
        if (v23 == 270 || v23 == 90)
        {
          v24 = v22;
        }
        else
        {
          v24 = v21;
          LODWORD(v21) = v22;
        }
        if (*(_DWORD *)(v18 + 656) == (_DWORD)v21 && *(_DWORD *)(v18 + 660) == (_DWORD)v24)
        {
LABEL_55:
          LOBYTE(v43) = 0;
          LOBYTE(v44) = 0;
          v45 = 0;
          v46 = 0;
          v47 = 0;
          v48 = 0;
          v49 = 0;
          v50 = 0;
          WebCore::RealtimeMediaSource::videoFrameAvailable(v18, v15, (uint64_t)&v43);
          goto LABEL_56;
        }
        v26 = v21 | (unint64_t)(v24 << 32);
        *(_QWORD *)(v18 + 656) = v26;
        v27 = *(_QWORD *)(v18 + 304);
        if (__ldaxr((unsigned __int8 *)v27))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v27))
        {
          goto LABEL_48;
        }
        MEMORY[0x19AEA534C](v27);
LABEL_48:
        ++*(_QWORD *)(v27 + 8);
        v29 = __ldxr((unsigned __int8 *)v27);
        if (v29 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v27))
          {
LABEL_53:
            v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
            *v30 = &off_1E3362970;
            v30[1] = v18;
            v30[2] = v18;
            v30[3] = v26;
            v43 = v30;
            WTF::callOnMainThread();
            v31 = v43;
            v43 = 0;
            if (v31)
              (*(void (**)(_QWORD *))(*v31 + 8))(v31);
            goto LABEL_55;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v27);
        goto LABEL_53;
      }
    }
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v10 = *a4;
  v42 = 0;
  LOBYTE(v43) = 33;
  if (v41)
    *(_DWORD *)v41 += 2;
  v44 = v41;
  WebCore::DeferredPromise::reject(v10, (unsigned __int8 *)&v43, 0, &v42);
  v12 = v44;
  v44 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  result = (uint64_t)v41;
  if (v41)
  {
    if (*(_DWORD *)v41 == 2)
      return WTF::StringImpl::destroy(v41, v11);
    else
      *(_DWORD *)v41 -= 2;
  }
  return result;
}

uint64_t WebCore::VideoTrackGenerator::Sink::close(WebCore::VideoTrackGenerator::Sink *this)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;

  v1 = *((_QWORD *)this + 2);
  v2 = *(_QWORD *)(v1 + 304);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v2);
LABEL_5:
  ++*(_QWORD *)(v2 + 8);
  v4 = __ldxr((unsigned __int8 *)v2);
  if (v4 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = &off_1E3362998;
  v5[1] = v1;
  v7 = (uint64_t)v5;
  WTF::callOnMainThread();
  result = v7;
  if (v7)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return result;
}

uint64_t WebCore::VideoTrackGenerator::Sink::error(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  _QWORD *v5;
  uint64_t result;
  _QWORD *v7;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(v1 + 304);
  if (__ldaxr((unsigned __int8 *)v2))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v2);
LABEL_5:
  ++*(_QWORD *)(v2 + 8);
  v4 = __ldxr((unsigned __int8 *)v2);
  if (v4 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v2))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v2);
  v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v5 = &off_1E3362998;
  v5[1] = v1;
  v7 = v5;
  WTF::callOnMainThread();
  result = (uint64_t)v7;
  if (v7)
    return (*(uint64_t (**)(_QWORD *))(*v7 + 8))(v7);
  return result;
}

void WebCore::RTCRtpSFrameTransformer::computeAuthenticationKey(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  WTF *v3;
  void *v4;
  int v5;
  uint64_t v6;
  WTF *v7;
  void *v8;
  int v9;
  WTF *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  if (*(_DWORD *)(a1 + 12) <= 0xFu)
  {
    __break(1u);
  }
  else
  {
    v3 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    v10 = 0;
    if (CCKDFParametersCreateHkdf() || (v5 = CCDeriveKey(), CCKDFParametersDestroy(), v5))
    {
      LOBYTE(v10) = 30;
      v6 = 1;
      v12 = 1;
      WTF::fastFree(v3, v4);
      *(_BYTE *)a2 = 30;
      v11 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = 1;
    }
    else
    {
      v10 = v3;
      v11 = 0x1000000010;
      v12 = 0;
      v7 = (WTF *)WTF::fastMalloc((WTF *)0x20);
      v13 = 0;
      if (CCKDFParametersCreateHkdf() || (v9 = CCDeriveKey(), CCKDFParametersDestroy(), v9))
      {
        *(_BYTE *)a2 = 30;
        *(_QWORD *)(a2 + 8) = 0;
        *(_DWORD *)(a2 + 16) = 1;
        WTF::fastFree(v7, v8);
        v6 = 0;
      }
      else
      {
        v6 = 0;
        *(_QWORD *)a2 = v7;
        *(_QWORD *)(a2 + 8) = 0x2000000020;
        *(_DWORD *)(a2 + 16) = 0;
      }
    }
    ((void (*)(uint64_t *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v6])(&v13, &v10);
  }
}

void WebCore::RTCRtpSFrameTransformer::computeEncryptionKey(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  WTF *v3;
  void *v4;
  int v5;
  uint64_t v6;
  WTF *v7;
  void *v8;
  int v9;
  WTF *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  if (*(_DWORD *)(a1 + 12) <= 0xFu)
  {
    __break(1u);
  }
  else
  {
    v3 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    v10 = 0;
    if (CCKDFParametersCreateHkdf() || (v5 = CCDeriveKey(), CCKDFParametersDestroy(), v5))
    {
      LOBYTE(v10) = 30;
      v6 = 1;
      v12 = 1;
      WTF::fastFree(v3, v4);
      *(_BYTE *)a2 = 30;
      v11 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = 1;
    }
    else
    {
      v10 = v3;
      v11 = 0x1000000010;
      v12 = 0;
      v7 = (WTF *)WTF::fastMalloc((WTF *)0x10);
      v13 = 0;
      if (CCKDFParametersCreateHkdf() || (v9 = CCDeriveKey(), CCKDFParametersDestroy(), v9))
      {
        *(_BYTE *)a2 = 30;
        *(_QWORD *)(a2 + 8) = 0;
        *(_DWORD *)(a2 + 16) = 1;
        WTF::fastFree(v7, v8);
        v6 = 0;
      }
      else
      {
        v6 = 0;
        *(_QWORD *)a2 = v7;
        *(_QWORD *)(a2 + 8) = 0x1000000010;
        *(_DWORD *)(a2 + 16) = 0;
      }
    }
    ((void (*)(uint64_t *, WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix[v6])(&v13, &v10);
  }
}

WTF *WebCore::RTCRtpSFrameTransformer::computeEncryptedDataSignature@<X0>(const void **a1@<X1>, const void *a2@<X2>, size_t a3@<X3>, const void *a4@<X4>, size_t a5@<X5>, uint64_t a6@<X6>, _QWORD *a7@<X8>)
{
  void *v14;
  void *v15;
  WTF *v16;
  WTF *result;
  CCHmacContext ctx;
  _BYTE *v19;
  uint64_t v20;
  _BYTE v21[8];
  _BYTE *v22;
  uint64_t v23;
  _BYTE v24[16];

  v22 = v24;
  v23 = 0x800000008;
  v24[6] = BYTE1(a3);
  v24[7] = a3;
  v24[5] = BYTE2(a3);
  v24[4] = BYTE3(a3);
  v24[3] = BYTE4(a3);
  v24[2] = BYTE5(a3);
  v24[1] = BYTE6(a3);
  v24[0] = HIBYTE(a3);
  v19 = v21;
  v20 = 0x800000008;
  v21[6] = BYTE1(a5);
  v21[7] = a5;
  v21[5] = BYTE2(a5);
  v21[4] = BYTE3(a5);
  v21[3] = BYTE4(a5);
  v21[2] = BYTE5(a5);
  v21[1] = BYTE6(a5);
  v21[0] = HIBYTE(a5);
  v14 = (void *)WTF::fastMalloc((WTF *)0x20);
  a7[1] = 0x2000000020;
  *a7 = v14;
  CCHmacInit(&ctx, 2u, *(const void **)a6, *(unsigned int *)(a6 + 12));
  CCHmacUpdate(&ctx, v22, HIDWORD(v23));
  CCHmacUpdate(&ctx, v19, HIDWORD(v20));
  CCHmacUpdate(&ctx, *a1, 0xCuLL);
  CCHmacUpdate(&ctx, a2, a3);
  CCHmacUpdate(&ctx, a4, a5);
  CCHmacFinal(&ctx, v14);
  v16 = (WTF *)v19;
  if (v21 != v19 && v19)
  {
    v19 = 0;
    LODWORD(v20) = 0;
    WTF::fastFree(v16, v15);
  }
  result = (WTF *)v22;
  if (v24 != v22)
  {
    if (v22)
    {
      v22 = 0;
      LODWORD(v23) = 0;
      return (WTF *)WTF::fastFree(result, v15);
    }
  }
  return result;
}

uint64_t WebCore::LibWebRTCDataChannelHandler::fromRTCDataChannelInit@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  int v5;
  int v6;
  void *v7;
  uint64_t result;
  unsigned int v9;
  std::string::value_type *v10;

  *(_WORD *)a2 = 256;
  *(_BYTE *)(a2 + 4) = 0;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 12) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v4 = (std::string *)(a2 + 24);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  *(_DWORD *)(a2 + 52) = -1;
  *(_BYTE *)(a2 + 56) = 0;
  *(_BYTE *)(a2 + 60) = 0;
  if (*(_BYTE *)(a1 + 1))
    *(_BYTE *)(a2 + 1) = *(_BYTE *)a1;
  if (*(_BYTE *)(a1 + 4))
  {
    v5 = *(unsigned __int16 *)(a1 + 2);
    *(_BYTE *)(a2 + 8) = 1;
    *(_DWORD *)(a2 + 4) = v5;
  }
  if (*(_BYTE *)(a1 + 8))
  {
    v6 = *(unsigned __int16 *)(a1 + 6);
    *(_BYTE *)(a2 + 16) = 1;
    *(_DWORD *)(a2 + 12) = v6;
  }
  WTF::String::utf8();
  if (v10)
  {
    std::string::__assign_external(v4, v10 + 16);
    result = (uint64_t)v10;
    if (*(_DWORD *)v10 == 1)
      result = WTF::fastFree((WTF *)v10, v7);
    else
      --*(_DWORD *)v10;
    if (*(_BYTE *)(a1 + 25))
      *(_BYTE *)(a2 + 48) = *(_BYTE *)(a1 + 24);
    if (*(_BYTE *)(a1 + 28))
      *(_DWORD *)(a2 + 52) = *(unsigned __int16 *)(a1 + 26);
    v9 = *(unsigned __int8 *)(a1 + 30);
    if (v9 < 4)
    {
      *(_DWORD *)(a2 + 56) = v9;
      *(_BYTE *)(a2 + 60) = 1;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  result = 66;
  __break(0xC471u);
  return result;
}

void WebCore::LibWebRTCDataChannelHandler::checkState(WebCore::LibWebRTCDataChannelHandler *this)
{
  char v1;
  int v3;
  int v4;
  char v5;
  char v6;
  int v7;
  unsigned __int8 *v8;
  unsigned int *v10;
  unsigned int v11;
  int v12;
  char v13;
  char v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 *v21;
  __int128 v22;
  _QWORD *v23;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  char v37;
  int v38;
  int v39;
  void *v40;
  void *__p;
  _BYTE v42[7];
  uint64_t v43;
  _BYTE v44[7];
  _QWORD *v45;
  char v46;
  _QWORD v47[2];
  __int128 v48;
  __int128 v49;
  _DWORD v50[2];
  _QWORD v51[3];

  v51[2] = *MEMORY[0x1E0C80C00];
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 136))(*((_QWORD *)this + 2));
  if (v3 == 3)
  {
    (*(void (**)(__int128 *__return_ptr))(**((_QWORD **)this + 2) + 144))(&v48);
    v5 = 0;
    v4 = v48;
    __p = (void *)*((_QWORD *)&v48 + 1);
    v51[0] = v49;
    *(_QWORD *)((char *)v51 + 7) = *(_QWORD *)((char *)&v49 + 7);
    v1 = HIBYTE(v49);
    *(_DWORD *)v44 = v50[0];
    v6 = 3;
    v7 = 1;
    *(_DWORD *)&v44[3] = *(_DWORD *)((char *)v50 + 3);
  }
  else
  {
    v4 = 0;
    v5 = 1;
    if (v3 == 2)
      v6 = 2;
    else
      v6 = v3 == 1;
    v7 = 0;
  }
  v8 = (unsigned __int8 *)this + 24;
  if (__ldaxr((unsigned __int8 *)this + 24))
  {
    __clrex();
  }
  else if (!__stxr(1u, v8))
  {
    goto LABEL_11;
  }
  MEMORY[0x19AEA534C]((char *)this + 24);
LABEL_11:
  if (*((_BYTE *)this + 25))
  {
    v10 = (unsigned int *)*((_QWORD *)this + 4);
    if (v10)
    {
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    if ((v5 & 1) != 0)
    {
      v12 = v7;
      v4 = 0;
      v13 = v1;
      v40 = __p;
    }
    else
    {
      v13 = v1;
      v12 = v7;
      v1 = 0;
      v40 = 0;
      v47[0] = v51[0];
      *(_QWORD *)((char *)v47 + 7) = *(_QWORD *)((char *)v51 + 7);
      v51[0] = 0;
      *(_QWORD *)((char *)v51 + 7) = 0;
      *(_DWORD *)v42 = *(_DWORD *)v44;
      *(_DWORD *)&v42[3] = *(_DWORD *)&v44[3];
    }
    v16 = WTF::fastMalloc((WTF *)0x48);
    v17 = v16;
    *(_QWORD *)v16 = &off_1E3362AA0;
    *(_QWORD *)(v16 + 8) = v10;
    *(_BYTE *)(v16 + 16) = v6;
    *(_BYTE *)(v16 + 24) = 0;
    *(_BYTE *)(v16 + 64) = 0;
    if ((v5 & 1) == 0)
    {
      *(_DWORD *)(v16 + 24) = v4;
      v18 = v47[0];
      *(_QWORD *)(v16 + 32) = __p;
      *(_QWORD *)(v16 + 40) = v18;
      *(_QWORD *)(v16 + 47) = *(_QWORD *)((char *)v47 + 7);
      *(_BYTE *)(v16 + 55) = v13;
      v47[0] = 0;
      *(_QWORD *)((char *)v47 + 7) = 0;
      *(_DWORD *)(v16 + 56) = *(_DWORD *)v42;
      *(_DWORD *)(v16 + 59) = *(_DWORD *)&v42[3];
      *(_BYTE *)(v16 + 64) = 1;
      __p = 0;
      v13 = 0;
    }
    v14 = v1;
    v43 = v16;
    v19 = *((_QWORD *)this + 6);
    v20 = *((_QWORD *)this + 7);
    v21 = (__int128 *)((char *)this + 48);
    if (!(v19 | v20))
    {
      WTF::callOnMainThread();
      v7 = v12;
      v15 = v40;
      if (v43)
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
      goto LABEL_53;
    }
    v22 = v21[1];
    v48 = *v21;
    v49 = v22;
    v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v23 = &off_1E335A090;
    v23[1] = v17;
    v45 = v23;
    v46 = 0;
    if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
    {
      goto LABEL_41;
    }
    MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_41:
    v7 = v12;
    {
      WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
    }
    v33 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)&v48);
    v15 = v40;
    if (v33)
    {
      v34 = v33[4];
      if (v34)
        (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v34 + 336))(v34, &v45);
    }
    v35 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
    if (v35 == 1)
    {
      if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
      {
LABEL_51:
        v36 = v45;
        v45 = 0;
        if (v36)
          (*(void (**)(_QWORD *))(*v36 + 8))(v36);
LABEL_53:
        if (v13 >= 0)
          v37 = 1;
        else
          v37 = v5;
        if ((v37 & 1) == 0)
          operator delete(__p);
        goto LABEL_58;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
    goto LABEL_51;
  }
  if ((v5 & 1) != 0)
  {
    v4 = 0;
    v14 = v1;
    v15 = __p;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    *(_QWORD *)&v48 = v51[0];
    *(_QWORD *)((char *)&v48 + 7) = *(_QWORD *)((char *)v51 + 7);
    v51[0] = 0;
    *(_QWORD *)((char *)v51 + 7) = 0;
    LODWORD(v45) = *(_DWORD *)v44;
    *(_DWORD *)((char *)&v45 + 3) = *(_DWORD *)&v44[3];
  }
  v25 = (uint64_t *)((char *)this + 80);
  v26 = *((unsigned int *)this + 23);
  if ((_DWORD)v26 == *((_DWORD *)this + 22))
  {
    v27 = v26 + (v26 >> 2);
    if (v27 >= 0x10)
      v28 = v27 + 1;
    else
      v28 = 16;
    if (v28 <= v26 + 1)
      v29 = v26 + 1;
    else
      v29 = v28;
    WTF::Vector<std::variant<WebCore::LibWebRTCDataChannelHandler::StateChange,WTF::String,WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)v25, v29);
    v26 = *((unsigned int *)this + 23);
    v30 = *((_QWORD *)this + 10);
  }
  else
  {
    v30 = *v25;
  }
  v31 = v30 + (v26 << 6);
  *(_BYTE *)v31 = v6;
  *(_BYTE *)(v31 + 8) = 0;
  *(_BYTE *)(v31 + 48) = 0;
  if ((v5 & 1) == 0)
  {
    *(_DWORD *)(v31 + 8) = v4;
    v32 = v48;
    *(_QWORD *)(v31 + 16) = __p;
    *(_QWORD *)(v31 + 24) = v32;
    *(_QWORD *)(v31 + 31) = *(_QWORD *)((char *)&v48 + 7);
    *(_BYTE *)(v31 + 39) = v1;
    *(_DWORD *)(v31 + 40) = (_DWORD)v45;
    *(_DWORD *)(v31 + 43) = *(_DWORD *)((char *)&v45 + 3);
    *(_BYTE *)(v31 + 48) = 1;
  }
  *(_DWORD *)(v31 + 56) = 0;
  ++*((_DWORD *)this + 23);
LABEL_58:
  v38 = __ldxr(v8);
  if (v38 != 1)
  {
    __clrex();
    goto LABEL_62;
  }
  if (__stlxr(0, v8))
LABEL_62:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
  if (v14 < 0)
    v39 = v7;
  else
    v39 = 0;
  if (v39 == 1)
    operator delete(v15);
}

void WebCore::LibWebRTCDataChannelHandler::~LibWebRTCDataChannelHandler(WebCore::LibWebRTCDataChannelHandler *this)
{
  void *v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  char v11;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v3 = *((unsigned int *)this + 23);
  v4 = (unsigned int *)*((_QWORD *)this + 10);
  if ((_DWORD)v3)
  {
    v5 = v3 << 6;
    do
    {
      v6 = v4[14];
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, unsigned int *))off_1E3362A48[v6])(&v11, v4);
      v4[14] = -1;
      v4 += 16;
      v5 -= 64;
    }
    while (v5);
    v4 = (unsigned int *)*((_QWORD *)this + 10);
  }
  if (v4)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree((WTF *)v4, v2);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v2);
    }
  }
  v10 = *((_QWORD *)this + 2);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

{
  void *v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  char v11;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
  v3 = *((unsigned int *)this + 23);
  v4 = (unsigned int *)*((_QWORD *)this + 10);
  if ((_DWORD)v3)
  {
    v5 = v3 << 6;
    do
    {
      v6 = v4[14];
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, unsigned int *))off_1E3362A48[v6])(&v11, v4);
      v4[14] = -1;
      v4 += 16;
      v5 -= 64;
    }
    while (v5);
    v4 = (unsigned int *)*((_QWORD *)this + 10);
  }
  if (v4)
  {
    *((_QWORD *)this + 10) = 0;
    *((_DWORD *)this + 22) = 0;
    WTF::fastFree((WTF *)v4, v2);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v2);
    }
  }
  v10 = *((_QWORD *)this + 2);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  WTF::fastFree(this, v2);
}

void `non-virtual thunk to'WebCore::LibWebRTCDataChannelHandler::~LibWebRTCDataChannelHandler(WebCore::LibWebRTCDataChannelHandler *this)
{
  void *v2;
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  char v11;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
  v3 = *((unsigned int *)this + 21);
  v4 = (unsigned int *)*((_QWORD *)this + 9);
  if ((_DWORD)v3)
  {
    v5 = v3 << 6;
    do
    {
      v6 = v4[14];
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, unsigned int *))off_1E3362A48[v6])(&v11, v4);
      v4[14] = -1;
      v4 += 16;
      v5 -= 64;
    }
    while (v5);
    v4 = (unsigned int *)*((_QWORD *)this + 9);
  }
  if (v4)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree((WTF *)v4, v2);
  }
  v7 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
  {
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      WTF::fastFree((WTF *)v7, v2);
    }
  }
  v10 = *((_QWORD *)this + 1);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
}

{
  WebCore::LibWebRTCDataChannelHandler::~LibWebRTCDataChannelHandler((WebCore::LibWebRTCDataChannelHandler *)((char *)this - 8));
}

void WebCore::LibWebRTCDataChannelHandler::dataChannelInit(WebCore::LibWebRTCDataChannelHandler *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  unsigned int v7;
  void *__p;
  char v9;
  void *v10;
  char v11;

  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 2) + 104))(&v10);
  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 2) + 48))(&__p);
  *(_BYTE *)(a2 + 2) = 0;
  *(_BYTE *)(a2 + 4) = 0;
  *(_BYTE *)(a2 + 6) = 0;
  *(_BYTE *)(a2 + 8) = 0;
  *(_WORD *)a2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 64))(*((_QWORD *)this + 2)) | 0x100;
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 96))(*((_QWORD *)this + 2));
  if ((v4 & 0xFF00000000) != 0)
  {
    *(_BYTE *)(a2 + 4) = 1;
    *(_WORD *)(a2 + 2) = v4;
  }
  v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 88))(*((_QWORD *)this + 2));
  if ((v5 & 0xFF00000000) != 0)
  {
    *(_BYTE *)(a2 + 8) = 1;
    *(_WORD *)(a2 + 6) = v5;
  }
  WTF::String::fromUTF8();
  *(_WORD *)(a2 + 24) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 112))(*((_QWORD *)this + 2)) | 0x100;
  v6 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 120))(*((_QWORD *)this + 2));
  *(_BYTE *)(a2 + 28) = 1;
  *(_WORD *)(a2 + 26) = v6;
  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 128))(*((_QWORD *)this + 2));
  if (v7 >= 4)
  {
    __break(0xC471u);
  }
  else
  {
    *(_BYTE *)(a2 + 30) = v7;
    if (v9 < 0)
      operator delete(__p);
    if (v11 < 0)
      operator delete(v10);
  }
}

uint64_t WebCore::LibWebRTCDataChannelHandler::setClient(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  unsigned __int8 *v6;
  uint64_t result;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  WebCore::LibWebRTCDataChannelHandler *v26;
  const WTF::CString *v27;
  _QWORD v28[3];
  _QWORD *v29;

  v6 = (unsigned __int8 *)(a1 + 24);
  if (__ldaxr((unsigned __int8 *)(a1 + 24)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v6))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 24);
LABEL_5:
  *(_BYTE *)(a1 + 25) = 1;
  result = a2[1];
  if (result)
    goto LABEL_37;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = a2;
  v9 = (unsigned int *)a2[1];
  a2[1] = result;
  if (!v9)
    goto LABEL_37;
  do
  {
    v10 = __ldaxr(v9);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v9));
  if (!v11)
  {
    atomic_store(1u, v9);
    WTF::fastFree((WTF *)v9, a2);
  }
  result = a2[1];
  if (result)
  {
LABEL_37:
    do
      v12 = __ldaxr((unsigned int *)result);
    while (__stlxr(v12 + 1, (unsigned int *)result));
  }
  v13 = *(unsigned int **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = result;
  if (v13)
  {
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      result = WTF::fastFree((WTF *)v13, a2);
    }
  }
  v16 = *a3;
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 48) = v16;
  v17 = *(unsigned int *)(a1 + 92);
  if (!(_DWORD)v17)
  {
LABEL_20:
    if (*(_DWORD *)(a1 + 88))
    {
      v21 = *(unsigned int *)(a1 + 92);
      v22 = *(unsigned int **)(a1 + 80);
      if ((_DWORD)v21)
      {
        v23 = v21 << 6;
        do
        {
          v24 = v22[14];
          if ((_DWORD)v24 != -1)
            result = ((uint64_t (*)(_QWORD *, unsigned int *))off_1E3362A48[v24])(v28, v22);
          v22[14] = -1;
          v22 += 16;
          v23 -= 64;
        }
        while (v23);
        *(_DWORD *)(a1 + 92) = 0;
        v22 = *(unsigned int **)(a1 + 80);
      }
      if (v22)
      {
        *(_QWORD *)(a1 + 80) = 0;
        *(_DWORD *)(a1 + 88) = 0;
        result = WTF::fastFree((WTF *)v22, a2);
      }
    }
    v25 = __ldxr(v6);
    if (v25 == 1)
    {
      if (!__stlxr(0, v6))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  v18 = *(_QWORD *)(a1 + 80);
  v19 = v17 << 6;
  while (1)
  {
    v28[0] = a2;
    v28[1] = a2;
    v28[2] = a2;
    v20 = *(unsigned int *)(v18 + 56);
    if ((_DWORD)v20 == -1)
      break;
    v29 = v28;
    result = ((uint64_t (*)(_QWORD **, uint64_t))off_1E3362A60[v20])(&v29, v18);
    v18 += 64;
    v19 -= 64;
    if (!v19)
      goto LABEL_20;
  }
  v26 = (WebCore::LibWebRTCDataChannelHandler *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::LibWebRTCDataChannelHandler::sendStringData(v26, v27);
}

uint64_t WebCore::LibWebRTCDataChannelHandler::sendStringData(WebCore::LibWebRTCDataChannelHandler *this, const WTF::CString *a2)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  size_t v5;
  uint64_t v6;
  _QWORD v8[3];
  _BYTE v9[32];

  v2 = *((_QWORD *)this + 2);
  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2)
    v4 = (const void *)(*(_QWORD *)a2 + 16);
  else
    v4 = 0;
  if (v3)
    v5 = *(_QWORD *)(v3 + 8);
  else
    v5 = 0;
  rtc::CopyOnWriteBuffer::CopyOnWriteBuffer((rtc::CopyOnWriteBuffer *)v8);
  if (v8[0])
  {
    memcpy(*(void **)(v8[0] + 16), v4, v5);
    v8[1] = 0;
    v8[2] = v5;
  }
  rtc::CopyOnWriteBuffer::CopyOnWriteBuffer();
  v9[24] = 0;
  v6 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 200))(v2, v9);
  rtc::CopyOnWriteBuffer::~CopyOnWriteBuffer((rtc::CopyOnWriteBuffer *)v9);
  rtc::CopyOnWriteBuffer::~CopyOnWriteBuffer((rtc::CopyOnWriteBuffer *)v8);
  return v6;
}

uint64_t WebCore::LibWebRTCDataChannelHandler::sendRawData(uint64_t a1, const void *a2, size_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[3];
  _BYTE v9[32];

  v5 = *(_QWORD *)(a1 + 16);
  rtc::CopyOnWriteBuffer::CopyOnWriteBuffer((rtc::CopyOnWriteBuffer *)v8);
  if (v8[0])
  {
    memcpy(*(void **)(v8[0] + 16), a2, a3);
    v8[1] = 0;
    v8[2] = a3;
  }
  rtc::CopyOnWriteBuffer::CopyOnWriteBuffer();
  v9[24] = 1;
  v6 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 200))(v5, v9);
  rtc::CopyOnWriteBuffer::~CopyOnWriteBuffer((rtc::CopyOnWriteBuffer *)v9);
  rtc::CopyOnWriteBuffer::~CopyOnWriteBuffer((rtc::CopyOnWriteBuffer *)v8);
  return v6;
}

uint64_t WebCore::LibWebRTCDataChannelHandler::close(WebCore::LibWebRTCDataChannelHandler *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 192))(*((_QWORD *)this + 2));
}

uint64_t WebCore::LibWebRTCDataChannelHandler::id(WebCore::LibWebRTCDataChannelHandler *this)
{
  int v1;

  v1 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 120))(*((_QWORD *)this + 2));
  if (v1 == -1)
    return 0;
  else
    return (unsigned __int16)v1 | 0x10000u;
}

void `non-virtual thunk to'WebCore::LibWebRTCDataChannelHandler::OnStateChange(WebCore::LibWebRTCDataChannelHandler *this)
{
  WebCore::LibWebRTCDataChannelHandler::checkState((WebCore::LibWebRTCDataChannelHandler *)((char *)this - 8));
}

WTF::StringImpl *WebCore::LibWebRTCDataChannelHandler::OnMessage(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  WTF::StringImpl *v13;
  __int128 v14;
  WTF::StringImpl *v15;
  WTF *v17;
  WTF::StringImpl *result;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  int v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  char v44;
  WTF::StringImpl *v45[2];
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = (unsigned __int8 *)(a1 + 24);
  if (__ldaxr((unsigned __int8 *)(a1 + 24)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 24);
LABEL_5:
  if (*(_BYTE *)(a1 + 25))
  {
    v6 = operator new();
    *(_BYTE *)(rtc::CopyOnWriteBuffer::CopyOnWriteBuffer() + 24) = *(_BYTE *)(a2 + 24);
    v7 = *(unsigned int **)(a1 + 32);
    if (v7)
    {
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 + 1, v7));
    }
    v9 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x18);
    *(_QWORD *)v9 = &off_1E3362AC8;
    *((_QWORD *)v9 + 1) = v7;
    *((_QWORD *)v9 + 2) = v6;
    v42 = v9;
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(a1 + 56);
    v12 = (_OWORD *)(a1 + 48);
    if (v10 | v11)
    {
      v13 = v9;
      v14 = v12[1];
      *(_OWORD *)v45 = *v12;
      v46 = v14;
      v15 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v15 = &off_1E335A090;
      *((_QWORD *)v15 + 1) = v13;
      v43 = v15;
      v44 = 0;
      if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
      {
        __clrex();
      }
      else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
      {
        goto LABEL_17;
      }
      MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_17:
      {
        WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
      }
      v19 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v45);
      if (v19)
      {
        v20 = v19[4];
        if (v20)
          (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v20 + 336))(v20, &v43);
      }
      v21 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
      if (v21 == 1)
      {
        if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
        {
LABEL_27:
          result = v43;
          v43 = 0;
          if (!result)
            goto LABEL_53;
          goto LABEL_28;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
      goto LABEL_27;
    }
    WTF::callOnMainThread();
    result = v42;
    if (v42)
LABEL_28:
      result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    if (*(_QWORD *)a2)
      v17 = (WTF *)(*(_QWORD *)(*(_QWORD *)a2 + 16) + *(_QWORD *)(a2 + 8));
    else
      v17 = 0;
    v22 = (_QWORD *)(a1 + 80);
    if (*(_BYTE *)(a2 + 24))
    {
      v23 = *(WTF **)(a2 + 16);
      v24 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)v24 = 1;
      *(_QWORD *)(v24 + 8) = v24 + 24;
      *(_QWORD *)(v24 + 16) = 1;
      *(_BYTE *)(v24 + 40) = 0;
      *(_QWORD *)(v24 + 48) = 0;
      WebCore::FragmentedSharedBuffer::append(v24, v17, v23);
      v45[0] = (WTF::StringImpl *)v24;
      v25 = WTF::fastMalloc((WTF *)0x38);
      WebCore::SharedBuffer::SharedBuffer(v25, (uint64_t *)v45);
      WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)v45, v26);
      v28 = *(unsigned int *)(a1 + 92);
      if ((_DWORD)v28 == *(_DWORD *)(a1 + 88))
      {
        v29 = v28 + (v28 >> 2);
        if (v29 >= 0x10)
          v30 = v29 + 1;
        else
          v30 = 16;
        if (v30 <= v28 + 1)
          v31 = v28 + 1;
        else
          v31 = v30;
        WTF::Vector<std::variant<WebCore::LibWebRTCDataChannelHandler::StateChange,WTF::String,WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 80, v31);
        v28 = *(unsigned int *)(a1 + 92);
        v32 = *(_QWORD *)(a1 + 80) + (v28 << 6);
      }
      else
      {
        v32 = *v22 + (v28 << 6);
      }
      v45[0] = 0;
      *(_QWORD *)v32 = v25;
      *(_DWORD *)(v32 + 56) = 2;
      *(_DWORD *)(a1 + 92) = v28 + 1;
      result = (WTF::StringImpl *)WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)v45, v27);
    }
    else
    {
      WTF::String::fromUTF8();
      v34 = *(unsigned int *)(a1 + 92);
      if ((_DWORD)v34 == *(_DWORD *)(a1 + 88))
      {
        v35 = v34 + (v34 >> 2);
        if (v35 >= 0x10)
          v36 = v35 + 1;
        else
          v36 = 16;
        if (v36 <= v34 + 1)
          v37 = v34 + 1;
        else
          v37 = v36;
        WTF::Vector<std::variant<WebCore::LibWebRTCDataChannelHandler::StateChange,WTF::String,WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 80, v37);
        v34 = *(unsigned int *)(a1 + 92);
        v38 = *(_QWORD *)(a1 + 80) + (v34 << 6);
        v39 = v45[0];
        v45[0] = 0;
        *(_QWORD *)v38 = v39;
      }
      else
      {
        v40 = v45[0];
        v38 = *v22 + (v34 << 6);
        v45[0] = 0;
        *(_QWORD *)v38 = v40;
      }
      *(_DWORD *)(v38 + 56) = 1;
      *(_DWORD *)(a1 + 92) = v34 + 1;
      result = v45[0];
      v45[0] = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v33);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
LABEL_53:
  v41 = __ldxr(v4);
  if (v41 != 1)
  {
    __clrex();
    return (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::LibWebRTCDataChannelHandler::OnMessage(uint64_t a1, uint64_t a2)
{
  return WebCore::LibWebRTCDataChannelHandler::OnMessage(a1 - 8, a2);
}

unsigned __int8 *WebCore::LibWebRTCDataChannelHandler::OnBufferedAmountChange(unsigned __int8 *this, uint64_t a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned int *v6;
  unsigned int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  unsigned __int8 *v12;
  __int128 v13;
  unsigned __int8 *v14;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  char v22;
  _OWORD v23[2];
  uint64_t v24;

  v3 = this;
  v24 = *MEMORY[0x1E0C80C00];
  v4 = this + 24;
  if (__ldaxr(this + 24))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](this + 24);
LABEL_5:
  if (!v3[25])
    goto LABEL_27;
  v6 = (unsigned int *)*((_QWORD *)v3 + 4);
  if (v6)
  {
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
  }
  v8 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v8 = &off_1E3362AF0;
  *((_QWORD *)v8 + 1) = v6;
  *((_QWORD *)v8 + 2) = a2;
  v20 = v8;
  v9 = *((_QWORD *)v3 + 6);
  v10 = *((_QWORD *)v3 + 7);
  v11 = v3 + 48;
  if (v9 | v10)
  {
    v12 = v8;
    v13 = v11[1];
    v23[0] = *v11;
    v23[1] = v13;
    v14 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v14 = &off_1E335A090;
    *((_QWORD *)v14 + 1) = v12;
    v21 = v14;
    v22 = 0;
    if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
    {
      __clrex();
    }
    else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
    {
      goto LABEL_15;
    }
    MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_15:
    {
      WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
    }
    v16 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v23);
    if (v16)
    {
      v17 = v16[4];
      if (v17)
        (*(void (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)v17 + 336))(v17, &v21);
    }
    v18 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
    if (v18 == 1)
    {
      if (!__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
      {
LABEL_25:
        this = v21;
        v21 = 0;
        if (!this)
          goto LABEL_27;
        goto LABEL_26;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
    goto LABEL_25;
  }
  WTF::callOnMainThread();
  this = v20;
  if (v20)
LABEL_26:
    this = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)this + 8))(this);
LABEL_27:
  v19 = __ldxr(v4);
  if (v19 != 1)
  {
    __clrex();
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return this;
}

unsigned __int8 *`non-virtual thunk to'WebCore::LibWebRTCDataChannelHandler::OnBufferedAmountChange(WebCore::LibWebRTCDataChannelHandler *this, uint64_t a2)
{
  return WebCore::LibWebRTCDataChannelHandler::OnBufferedAmountChange((unsigned __int8 *)this - 8, a2);
}

WTF *WebCore::LibWebRTCDtlsTransportBackendObserver::updateState(WTF *result, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  WTF *v6;
  WTF *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  _OWORD *v11;
  _QWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  WTF *v21;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t *v26;
  uint64_t v27;
  WTF *v28;
  uint64_t v29;
  WTF **v30;
  WTF *v31[2];
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;

  v2 = *((_QWORD *)result + 3);
  if (!v2)
    return result;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return result;
  v33 = 0;
  v34 = 0;
  v5 = (_QWORD *)*((_QWORD *)a2 + 5);
  if (!v5 || v5[1] == *v5)
  {
    v8 = 0;
    goto LABEL_16;
  }
  v6 = result;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  do
  {
    v31[1] = 0;
    v32 = 0;
    v31[0] = 0;
    if (v9 >= (uint64_t)(v5[1] - *v5) >> 3)
    {
      __break(1u);
      goto LABEL_37;
    }
    (*(void (**)(_QWORD, WTF **))(**(_QWORD **)(*v5 + 8 * v9) + 32))(*(_QWORD *)(*v5 + 8 * v9), v31);
    if (v8 == (_DWORD)v34)
    {
      v10 = WTF::Vector<rtc::BufferT<unsigned char,false>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v33, v8 + 1, (unint64_t)v31);
      v8 = HIDWORD(v34);
      v7 = v33;
      v11 = (_OWORD *)((char *)v33 + 24 * HIDWORD(v34));
      *v11 = *(_OWORD *)v10;
      v12 = v11 + 1;
    }
    else
    {
      v13 = (_OWORD *)((char *)v7 + 24 * v8);
      *v13 = *(_OWORD *)v31;
      v12 = v13 + 1;
      v10 = (unint64_t)v31;
    }
    v14 = *(_QWORD *)(v10 + 16);
    *(_QWORD *)(v10 + 16) = 0;
    *v12 = v14;
    *(_QWORD *)v10 = 0;
    *(_QWORD *)(v10 + 8) = 0;
    HIDWORD(v34) = ++v8;
    v15 = v32;
    v32 = 0;
    if (v15)
      MEMORY[0x19AEA762C](v15, 0x1000C8077774924);
    ++v9;
  }
  while (v9 < (uint64_t)(v5[1] - *v5) >> 3);
  v16 = *((_QWORD *)v6 + 3);
  if (v16)
    v3 = *(_QWORD *)(v16 + 8);
  else
    v3 = 0;
LABEL_16:
  v17 = *a2;
  if (v17 >= 6)
    goto LABEL_37;
  v18 = dword_1968DEC98[v17];
  v31[0] = 0;
  v31[1] = 0;
  if (!v8)
    goto LABEL_22;
  if (v8 >> 29)
  {
LABEL_37:
    __break(0xC471u);
    JUMPOUT(0x1954B09B0);
  }
  v19 = (WTF *)WTF::fastMalloc((WTF *)(8 * v8));
  v20 = 0;
  LODWORD(v31[1]) = v8;
  v31[0] = v19;
  v21 = v33;
  v22 = (WTF *)((char *)v33 + 24 * v8);
  do
  {
    v23 = v20;
    JSC::ArrayBuffer::create();
    ++v20;
    v24 = v35;
    v35 = 0;
    *((_QWORD *)v19 + v23) = v24;
    WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(&v35);
    v21 = (WTF *)((char *)v21 + 24);
  }
  while (v21 != v22);
  HIDWORD(v31[1]) = v20;
LABEL_22:
  (*(void (**)(uint64_t, uint64_t, WTF **))(*(_QWORD *)v3 + 16))(v3, v18, v31);
  if (HIDWORD(v31[1]))
  {
    v26 = (uint64_t *)v31[0];
    v27 = 8 * HIDWORD(v31[1]);
    do
    {
      v26 = WTF::Ref<JSC::ArrayBuffer,WTF::RawPtrTraits<JSC::ArrayBuffer>,WTF::DefaultRefDerefTraits<JSC::ArrayBuffer>>::~Ref(v26)
          + 1;
      v27 -= 8;
    }
    while (v27);
  }
  result = v31[0];
  if (v31[0])
  {
    v31[0] = 0;
    LODWORD(v31[1]) = 0;
    result = (WTF *)WTF::fastFree(result, v25);
  }
  v28 = v33;
  if (v8)
  {
    v29 = 24 * v8;
    v30 = (WTF **)((char *)v33 + 16);
    do
    {
      result = *v30;
      *v30 = 0;
      if (result)
        result = (WTF *)MEMORY[0x19AEA762C](result, 0x1000C8077774924);
      v30 += 3;
      v29 -= 24;
    }
    while (v29);
  }
  if (v28)
    return (WTF *)WTF::fastFree(v28, v25);
  return result;
}

uint64_t WebCore::LibWebRTCDtlsTransportBackendObserver::OnStateChange(uint64_t a1, __int128 *a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  char v11;

  v3 = (unsigned int *)(a1 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v9 = *a2;
  v10 = a2[1];
  v11 = *((_BYTE *)a2 + 32);
  v5 = *((_QWORD *)a2 + 5);
  *((_QWORD *)a2 + 5) = 0;
  v6 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v6 = &off_1E3362B90;
  *(_QWORD *)(v6 + 8) = a1;
  *(_OWORD *)(v6 + 16) = v9;
  *(_OWORD *)(v6 + 32) = v10;
  *(_BYTE *)(v6 + 48) = v11;
  *(_QWORD *)(v6 + 56) = v5;
  v8 = v6;
  WTF::callOnMainThread();
  result = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

uint64_t WebCore::LibWebRTCDtlsTransportBackendObserver::OnError(uint64_t a1)
{
  unsigned int *v2;
  unsigned int v3;
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;

  v2 = (unsigned int *)(a1 + 8);
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E3362BB8;
  v4[1] = a1;
  v6 = v4;
  WTF::callOnMainThread();
  result = (uint64_t)v6;
  if (v6)
    return (*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  return result;
}

void WebCore::LibWebRTCDtlsTransportBackend::~LibWebRTCDtlsTransportBackend(WebCore::LibWebRTCDtlsTransportBackend *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  char v24;
  _QWORD v25[2];
  uint64_t (*v26)(char, uint64_t *, uint64_t *);
  uint64_t (*v27)(_QWORD *);

  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *(unsigned int **)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
    v7 = (unsigned int *)(v3 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = &off_1E3362B68;
    v9[1] = v3;
    v25[0] = v9;
    v26 = absl::internal_any_invocable::LocalManagerNontrivial<WTF::Function<void ()(void)>>;
    v27 = absl::internal_any_invocable::LocalInvoker<false,void,WTF::Function<void ()(void)> &&>;
    (*(void (**)(_QWORD, _QWORD *, char *, char *))(*(_QWORD *)WebCore::staticFactoryAndThreads(void)::factoryAndThreads
                                                             + 8))(WebCore::staticFactoryAndThreads(void)::factoryAndThreads, v25, &v24, &v23);
    v26(1, v25, v25);
    v10 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v10)
    {
      v11 = (unsigned int *)(v10 + 8);
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, (unsigned int *)(v10 + 8));
        v14 = *(unsigned int **)(v10 + 24);
        *(_QWORD *)(v10 + 24) = 0;
        if (v14)
        {
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
          {
            atomic_store(1u, v14);
            WTF::fastFree((WTF *)v14, a2);
          }
        }
        v17 = *(_QWORD *)(v10 + 16);
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
  v18 = *((_QWORD *)this + 2);
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *((_QWORD *)this + 1);
  if (v19)
  {
    *(_QWORD *)(v19 + 8) = 0;
    v20 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v20)
    {
      do
      {
        v21 = __ldaxr(v20);
        v22 = v21 - 1;
      }
      while (__stlxr(v22, v20));
      if (!v22)
      {
        atomic_store(1u, v20);
        WTF::fastFree((WTF *)v20, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::LibWebRTCDtlsTransportBackend::~LibWebRTCDtlsTransportBackend(this, a2);
  WTF::fastFree(v2, v3);
}

_QWORD *WebCore::LibWebRTCDtlsTransportBackend::iceTransportBackend@<X0>(WebCore::LibWebRTCDtlsTransportBackend *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 2) + 32))(&v5);
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  v4 = v5;
  *result = off_1E3362740;
  result[1] = v4;
  result[2] = 0;
  *a2 = result;
  return result;
}

uint64_t WebCore::LibWebRTCDtlsTransportBackend::registerClient(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void (***v6)(_QWORD);
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD *v19;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  _QWORD v27[2];
  uint64_t (*v28)(char, uint64_t *, uint64_t *);
  uint64_t (*v29)(_QWORD *);

  v5 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v5 + 8) = 1;
  *(_QWORD *)v5 = &off_1E33626B0;
  v6 = *(void (****)(_QWORD))(a1 + 16);
  *(_QWORD *)(v5 + 16) = v6;
  if (v6)
    (**v6)(v6);
  v7 = *(_QWORD *)(a2 + 8);
  if (v7)
    goto LABEL_26;
  v7 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v7 = 1;
  *(_QWORD *)(v7 + 8) = a2;
  v8 = *(unsigned int **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v7;
  if (!v8)
    goto LABEL_26;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v4);
  }
  v7 = *(_QWORD *)(a2 + 8);
  if (v7)
  {
LABEL_26:
    do
      v11 = __ldaxr((unsigned int *)v7);
    while (__stlxr(v11 + 1, (unsigned int *)v7));
  }
  *(_QWORD *)(v5 + 24) = v7;
  v12 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 8);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)(v12 + 8));
      v21 = *(unsigned int **)(v12 + 24);
      *(_QWORD *)(v12 + 24) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          WTF::fastFree((WTF *)v21, v4);
        }
      }
      v24 = *(_QWORD *)(v12 + 16);
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      WTF::fastFree((WTF *)v12, v4);
    }
  }
  v16 = *(_QWORD *)(a1 + 24);
  v17 = (unsigned int *)(v16 + 8);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v19 = &off_1E3362B18;
  v19[1] = v16;
  v19[2] = v16;
  v27[0] = v19;
  v28 = absl::internal_any_invocable::LocalManagerNontrivial<WTF::Function<void ()(void)>>;
  v29 = absl::internal_any_invocable::LocalInvoker<false,void,WTF::Function<void ()(void)> &&>;
  (*(void (**)(_QWORD, _QWORD *, char *, char *))(*(_QWORD *)WebCore::staticFactoryAndThreads(void)::factoryAndThreads
                                                           + 8))(WebCore::staticFactoryAndThreads(void)::factoryAndThreads, v27, &v26, &v25);
  return v28(1, v27, v27);
}

uint64_t WebCore::LibWebRTCDtlsTransportBackend::unregisterClient(WebCore::LibWebRTCDtlsTransportBackend *this, void *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  char v10;
  char v11;
  _QWORD v12[2];
  uint64_t (*v13)(char, uint64_t *, uint64_t *);
  uint64_t (*v14)(_QWORD *);

  v2 = *((_QWORD *)this + 3);
  v3 = *(unsigned int **)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (unsigned int *)(v2 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E3362B68;
  v8[1] = v2;
  v12[0] = v8;
  v13 = absl::internal_any_invocable::LocalManagerNontrivial<WTF::Function<void ()(void)>>;
  v14 = absl::internal_any_invocable::LocalInvoker<false,void,WTF::Function<void ()(void)> &&>;
  (*(void (**)(_QWORD, _QWORD *, char *, char *))(*(_QWORD *)WebCore::staticFactoryAndThreads(void)::factoryAndThreads
                                                           + 8))(WebCore::staticFactoryAndThreads(void)::factoryAndThreads, v12, &v11, &v10);
  return v13(1, v12, v12);
}

uint64_t WebCore::LibWebRTCIceTransportBackendObserver::onIceTransportStateChanged(WebCore::LibWebRTCIceTransportBackendObserver *this, cricket::IceTransportInternal *a2)
{
  unsigned int *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = (unsigned int *)((char *)this + 56);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = (*(uint64_t (**)(cricket::IceTransportInternal *))(*(_QWORD *)a2 + 88))(a2);
  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v6 = &off_1E3362CA0;
  *(_QWORD *)(v6 + 8) = this;
  *(_DWORD *)(v6 + 16) = v5;
  v8 = v6;
  WTF::callOnMainThread();
  result = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

void WebCore::LibWebRTCIceTransportBackendObserver::onNetworkRouteChanged(WebCore::LibWebRTCIceTransportBackendObserver *a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v4[432];
  _BYTE v5[432];
  char v6;

  v2 = (*(uint64_t (**)(_QWORD *))(**((_QWORD **)a1 + 8) + 32))(*((_QWORD **)a1 + 8));
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v2 + 240))(&v3);
  if (v6)
  {
    WebCore::LibWebRTCIceTransportBackendObserver::processSelectedCandidatePairChanged(a1, (const cricket::Candidate *)v4, (const cricket::Candidate *)v5);
    if (v6)
    {
      MEMORY[0x19AEA5EBC](v5);
      MEMORY[0x19AEA5EBC](v4);
    }
  }
}

void WebCore::LibWebRTCIceTransportBackendObserver::processSelectedCandidatePairChanged(WebCore::LibWebRTCIceTransportBackendObserver *this, const cricket::Candidate *a2, const cricket::Candidate *a3)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  int v31;
  char v32;
  int v33;
  char v34;
  WTF::StringImpl *v35;
  int v36;
  char v37;
  __int16 v38;
  char v39;
  int v40;
  char v41;
  int v42;
  char v43;
  WTF::StringImpl *v44;
  __int16 v45;
  char v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  int v49;
  char v50;
  int v51;
  char v52;
  WTF::StringImpl *v53;
  int v54;
  char v55;
  __int16 v56;
  char v57;
  int v58;
  char v59;
  int v60;
  char v61;
  WTF::StringImpl *v62;
  __int16 v63;
  char v64;
  WTF::StringImpl *v65;
  void *__p;
  char v67;
  WTF::StringImpl *v68;
  void *v69;
  char v70;
  WTF::StringImpl *v71;
  __int128 v72;
  __int128 v73;
  _BYTE v74[13];
  uint64_t v75;
  _BYTE v76[25];
  uint64_t v77;
  int v78;
  __int128 v79;
  _BYTE v80[13];
  uint64_t v81;
  _BYTE v82[25];
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;

  v5 = (unsigned int *)((char *)this + 56);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  *(_QWORD *)&v72 = this;
  cricket::Candidate::ToStringInternal(a2);
  WTF::String::fromUTF8();
  WTF::String::isolatedCopy();
  cricket::Candidate::ToStringInternal(a3);
  WTF::String::fromUTF8();
  WTF::String::isolatedCopy();
  WebCore::convertIceCandidate(a2, (uint64_t)&v48);
  WTF::String::isolatedCopy();
  *(_DWORD *)v74 = v49;
  v74[4] = v50;
  *(_DWORD *)&v74[8] = v51;
  v74[12] = v52;
  WTF::String::isolatedCopy();
  *(_DWORD *)v76 = v54;
  v76[4] = v55;
  *(_WORD *)&v76[8] = v56;
  v76[10] = v57;
  *(_DWORD *)&v76[12] = v58;
  v76[16] = v59;
  v76[24] = v61;
  *(_DWORD *)&v76[20] = v60;
  WTF::String::isolatedCopy();
  LOWORD(v78) = v63;
  BYTE2(v78) = v64;
  WTF::String::isolatedCopy();
  WebCore::convertIceCandidate(a3, (uint64_t)&v30);
  WTF::String::isolatedCopy();
  *(_DWORD *)v80 = v31;
  v80[4] = v32;
  *(_DWORD *)&v80[8] = v33;
  v80[12] = v34;
  WTF::String::isolatedCopy();
  *(_DWORD *)v82 = v36;
  v82[4] = v37;
  *(_WORD *)&v82[8] = v38;
  v82[10] = v39;
  *(_DWORD *)&v82[12] = v40;
  v82[16] = v41;
  v82[24] = v43;
  *(_DWORD *)&v82[20] = v42;
  WTF::String::isolatedCopy();
  LOWORD(v84) = v45;
  BYTE2(v84) = v46;
  WTF::String::isolatedCopy();
  v7 = WTF::fastMalloc((WTF *)0xD0);
  *(_QWORD *)v7 = off_1E3362CF0;
  *(_OWORD *)(v7 + 8) = v72;
  *(_QWORD *)(v7 + 24) = v73;
  v8 = *((_QWORD *)&v73 + 1);
  v72 = 0u;
  v73 = 0u;
  *(_QWORD *)(v7 + 32) = v8;
  v9 = *(_QWORD *)&v74[5];
  *(_QWORD *)(v7 + 40) = *(_QWORD *)v74;
  *(_QWORD *)(v7 + 45) = v9;
  *(_QWORD *)(v7 + 56) = v75;
  v10 = *(_OWORD *)v76;
  *(_OWORD *)(v7 + 73) = *(_OWORD *)&v76[9];
  *(_OWORD *)(v7 + 64) = v10;
  v11 = v77;
  v75 = 0;
  v77 = 0;
  *(_QWORD *)(v7 + 96) = v11;
  *(_DWORD *)(v7 + 104) = v78;
  *(_QWORD *)(v7 + 112) = v79;
  v12 = *((_QWORD *)&v79 + 1);
  v79 = 0u;
  *(_QWORD *)(v7 + 120) = v12;
  v13 = *(_QWORD *)v80;
  *(_QWORD *)(v7 + 133) = *(_QWORD *)&v80[5];
  *(_QWORD *)(v7 + 128) = v13;
  *(_QWORD *)(v7 + 144) = v81;
  v14 = *(_OWORD *)v82;
  *(_OWORD *)(v7 + 161) = *(_OWORD *)&v82[9];
  *(_OWORD *)(v7 + 152) = v14;
  v15 = v83;
  v81 = 0;
  v83 = 0;
  *(_QWORD *)(v7 + 184) = v15;
  *(_DWORD *)(v7 + 192) = v84;
  v16 = v85;
  v85 = 0;
  *(_QWORD *)(v7 + 200) = v16;
  v86 = v7;
  WTF::callOnMainThread();
  v18 = v86;
  v86 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  WebCore::LibWebRTCIceTransportBackendObserver::processSelectedCandidatePairChanged(cricket::Candidate const&,cricket::Candidate const&)::$_0::~$_0((uint64_t *)&v72, v17);
  v20 = v47;
  v47 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = v44;
  v44 = 0;
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v19);
    else
      *(_DWORD *)v21 -= 2;
  }
  v22 = v35;
  v35 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v19);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = v30;
  v30 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v19);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = v65;
  v65 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v19);
    else
      *(_DWORD *)v24 -= 2;
  }
  v25 = v62;
  v62 = 0;
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v19);
    else
      *(_DWORD *)v25 -= 2;
  }
  v26 = v53;
  v53 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      WTF::StringImpl::destroy(v26, v19);
    else
      *(_DWORD *)v26 -= 2;
  }
  v27 = v48;
  v48 = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v19);
    else
      *(_DWORD *)v27 -= 2;
  }
  v28 = v68;
  v68 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v19);
    else
      *(_DWORD *)v28 -= 2;
  }
  if (v67 < 0)
    operator delete(__p);
  v29 = v71;
  v71 = 0;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, v19);
    else
      *(_DWORD *)v29 -= 2;
  }
  if (v70 < 0)
    operator delete(v69);
}

uint64_t *WebCore::LibWebRTCIceTransportBackendObserver::processSelectedCandidatePairChanged(cricket::Candidate const&,cricket::Candidate const&)::$_0::~$_0(uint64_t *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  void *v22;

  v3 = (WTF::StringImpl *)a1[24];
  a1[24] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[22];
  a1[22] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[17];
  a1[17] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF::StringImpl *)a1[14];
  a1[14] = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = (WTF::StringImpl *)a1[13];
  a1[13] = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)a1[11];
  a1[11] = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF::StringImpl *)a1[6];
  a1[6] = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  v11 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WTF::StringImpl *)a1[1];
  a1[1] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *a1;
  *a1 = 0;
  if (v13)
  {
    v14 = (unsigned int *)(v13 + 56);
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      atomic_store(1u, (unsigned int *)(v13 + 56));
      v18 = *(unsigned int **)(v13 + 72);
      *(_QWORD *)(v13 + 72) = 0;
      if (v18)
      {
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v18);
          WTF::fastFree((WTF *)v18, a2);
        }
      }
      v21 = *(_QWORD *)(v13 + 64);
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      *(_QWORD *)v13 = &off_1E3362BE0;
      (*(void (**)(uint64_t))(v13 + 24))(v13);
      std::__tree<sigslot::_signal_base_interface *>::destroy(*(_QWORD **)(v13 + 40));
      WTF::fastFree((WTF *)v13, v22);
    }
  }
  return a1;
}

void WebCore::LibWebRTCIceTransportBackend::~LibWebRTCIceTransportBackend(WebCore::LibWebRTCIceTransportBackend *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 56);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)(v3 + 56));
      v8 = *(unsigned int **)(v3 + 72);
      *(_QWORD *)(v3 + 72) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
      v11 = *(_QWORD *)(v3 + 64);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      *(_QWORD *)v3 = &off_1E3362BE0;
      (*(void (**)(uint64_t))(v3 + 24))(v3);
      std::__tree<sigslot::_signal_base_interface *>::destroy(*(_QWORD **)(v3 + 40));
      WTF::fastFree((WTF *)v3, v12);
    }
  }
  v7 = *((_QWORD *)this + 1);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
}

{
  WTF *v2;
  void *v3;

  WebCore::LibWebRTCIceTransportBackend::~LibWebRTCIceTransportBackend(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::LibWebRTCIceTransportBackend::registerClient(uint64_t a1, uint64_t a2)
{
  void (***v4)(_QWORD);
  void *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD *v19;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  char v26;
  char v27;
  _QWORD v28[2];
  uint64_t (*v29)(char, uint64_t *, uint64_t *);
  uint64_t (*v30)(_QWORD *);

  v4 = *(void (****)(_QWORD))(a1 + 8);
  if (v4)
    (**v4)(*(_QWORD *)(a1 + 8));
  v6 = WTF::fastMalloc((WTF *)0x50);
  *(_DWORD *)(v6 + 56) = 1;
  *(_QWORD *)(v6 + 16) = sigslot::has_slots<sigslot::single_threaded>::do_signal_disconnect;
  *(_QWORD *)(v6 + 24) = sigslot::has_slots<sigslot::single_threaded>::do_disconnect_all;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 32) = v6 + 40;
  *(_QWORD *)v6 = off_1E3362720;
  *(_QWORD *)(v6 + 8) = sigslot::has_slots<sigslot::single_threaded>::do_signal_connect;
  *(_QWORD *)(v6 + 64) = v4;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7)
    goto LABEL_26;
  v7 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v7 = 1;
  *(_QWORD *)(v7 + 8) = a2;
  v8 = *(unsigned int **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v7;
  if (!v8)
    goto LABEL_26;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v5);
  }
  v7 = *(_QWORD *)(a2 + 8);
  if (v7)
  {
LABEL_26:
    do
      v11 = __ldaxr((unsigned int *)v7);
    while (__stlxr(v11 + 1, (unsigned int *)v7));
  }
  *(_QWORD *)(v6 + 72) = v7;
  v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 56);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)(v12 + 56));
      v21 = *(unsigned int **)(v12 + 72);
      *(_QWORD *)(v12 + 72) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          WTF::fastFree((WTF *)v21, v5);
        }
      }
      v24 = *(_QWORD *)(v12 + 64);
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      *(_QWORD *)v12 = &off_1E3362BE0;
      (*(void (**)(uint64_t))(v12 + 24))(v12);
      std::__tree<sigslot::_signal_base_interface *>::destroy(*(_QWORD **)(v12 + 40));
      WTF::fastFree((WTF *)v12, v25);
    }
  }
  v16 = *(_QWORD *)(a1 + 16);
  v17 = (unsigned int *)(v16 + 56);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v19 = &off_1E3362C00;
  v19[1] = v16;
  v19[2] = v16;
  v28[0] = v19;
  v29 = absl::internal_any_invocable::LocalManagerNontrivial<WTF::Function<void ()(void)>>;
  v30 = absl::internal_any_invocable::LocalInvoker<false,void,WTF::Function<void ()(void)> &&>;
  (*(void (**)(_QWORD, _QWORD *, char *, char *))(*(_QWORD *)WebCore::staticFactoryAndThreads(void)::factoryAndThreads
                                                           + 8))(WebCore::staticFactoryAndThreads(void)::factoryAndThreads, v28, &v27, &v26);
  return v29(1, v28, v28);
}

uint64_t WebCore::LibWebRTCIceTransportBackend::unregisterClient(WebCore::LibWebRTCIceTransportBackend *this, void *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  char v10;
  char v11;
  _QWORD v12[2];
  uint64_t (*v13)(char, uint64_t *, uint64_t *);
  uint64_t (*v14)(_QWORD *);

  v2 = *((_QWORD *)this + 2);
  v3 = *(unsigned int **)(v2 + 72);
  *(_QWORD *)(v2 + 72) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (unsigned int *)(v2 + 56);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v8 = &off_1E3362C78;
  v8[1] = v2;
  v8[2] = v2;
  v12[0] = v8;
  v13 = absl::internal_any_invocable::LocalManagerNontrivial<WTF::Function<void ()(void)>>;
  v14 = absl::internal_any_invocable::LocalInvoker<false,void,WTF::Function<void ()(void)> &&>;
  (*(void (**)(_QWORD, _QWORD *, char *, char *))(*(_QWORD *)WebCore::staticFactoryAndThreads(void)::factoryAndThreads
                                                           + 8))(WebCore::staticFactoryAndThreads(void)::factoryAndThreads, v12, &v11, &v10);
  return v13(1, v12, v12);
}

uint64_t WebCore::UserMediaRequest::ref(uint64_t this)
{
  ++*(_DWORD *)(this + 24);
  return this;
}

_DWORD *WebCore::UserMediaRequest::deref(_DWORD *this)
{
  if (this[6] == 1)
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 16))(this);
  --this[6];
  return this;
}

void WebCore::VideoTrackGenerator::Source::~Source(WebCore::VideoTrackGenerator::Source *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::VideoTrackGenerator::Source::~Source(this, a2);
  WTF::fastFree(v2, v3);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (WTF *)*((_QWORD *)this + 62);
  if (v6)
  {
    *((_QWORD *)this + 62) = 0;
    *((_DWORD *)this + 126) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, a2);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF *)*((_QWORD *)this + 51);
  if (v9)
  {
    *((_QWORD *)this + 51) = 0;
    *((_DWORD *)this + 104) = 0;
    WTF::fastFree(v9, a2);
  }
  v10 = (unsigned int *)*((_QWORD *)this + 44);
  *((_QWORD *)this + 44) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
  WebCore::RealtimeMediaSource::~RealtimeMediaSource(this, a2);
}

uint64_t WebCore::VideoTrackGenerator::Source::capabilities(WebCore::VideoTrackGenerator::Source *this)
{
  return (uint64_t)this + 360;
}

uint64_t WebCore::VideoTrackGenerator::Source::settings(WebCore::VideoTrackGenerator::Source *this)
{
  return (uint64_t)this + 552;
}

uint64_t WebCore::VideoTrackGenerator::Source::ref(uint64_t this)
{
  uint64_t v1;
  int v3;

  v1 = *(_QWORD *)(this + 304);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_5;
  }
  this = MEMORY[0x19AEA534C](v1);
LABEL_5:
  ++*(_QWORD *)(v1 + 8);
  v3 = __ldxr((unsigned __int8 *)v1);
  if (v3 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    return WTF::Lock::unlockSlow((WTF::Lock *)v1);
  return this;
}

unsigned __int8 *WebCore::VideoTrackGenerator::Source::deref(unsigned __int8 **this)
{
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoTrackGenerator::Source,(WTF::DestructionThread)2>(this[38]);
}

uint64_t WebCore::VideoTrackGenerator::Source::controlBlock(WebCore::VideoTrackGenerator::Source *this)
{
  return *((_QWORD *)this + 38);
}

void WebCore::VideoTrackGenerator::Sink::~Sink(WebCore::VideoTrackGenerator::Sink *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v1)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoTrackGenerator::Source,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v1 + 304));
}

void WebCore::VideoTrackGenerator::Sink::~Sink(WebCore::VideoTrackGenerator::Sink *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoTrackGenerator::Source,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v3 + 304));
  WTF::fastFree(this, a2);
}

uint64_t webrtc::DataChannelObserver::IsOkToCallOnTheNetworkThread(webrtc::DataChannelObserver *this)
{
  return 0;
}

void WebCore::LibWebRTCDtlsTransportBackendObserver::~LibWebRTCDtlsTransportBackendObserver(WebCore::LibWebRTCDtlsTransportBackendObserver *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::LibWebRTCDtlsTransportBackend::backend(WebCore::LibWebRTCDtlsTransportBackend *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t WebCore::LibWebRTCIceTransportBackend::backend(WebCore::LibWebRTCIceTransportBackend *this)
{
  return *((_QWORD *)this + 1);
}

void WebCore::LibWebRTCIceTransportBackendObserver::~LibWebRTCIceTransportBackendObserver(WebCore::LibWebRTCIceTransportBackendObserver *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  v3 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 8);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *(_QWORD *)this = &off_1E3362BE0;
  (*((void (**)(WebCore::LibWebRTCIceTransportBackendObserver *))this + 3))(this);
  std::__tree<sigslot::_signal_base_interface *>::destroy(*((_QWORD **)this + 5));
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;

  v3 = (unsigned int *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 8);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *(_QWORD *)this = &off_1E3362BE0;
  (*((void (**)(WebCore::LibWebRTCIceTransportBackendObserver *))this + 3))(this);
  std::__tree<sigslot::_signal_base_interface *>::destroy(*((_QWORD **)this + 5));
  WTF::fastFree(this, v7);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a2 + 8) = v3;
  LODWORD(v3) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a2 + 12) = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6VectorIhLm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEEN7WebCore9ExceptionEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JRNS0_6__baseILSJ_1EJSC_SE_EEEOSU_EEEDcSM_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  v3 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a2 + 8) = v3;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  unint64_t v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = this->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = this;
    if (__n > 0x16)
    {
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    this->__r_.__value_.__l.__size_ = __n;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  std::string::size_type v4;

  v4 = strlen(__s);
  return std::string::__assign_external(this, __s, v4);
}

unsigned __int8 *WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoTrackGenerator::Source,(WTF::DestructionThread)2>(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v1 = this;
  if (__ldaxr(this))
  {
    __clrex();
  }
  else if (!__stxr(1u, this))
  {
    goto LABEL_5;
  }
  this = (unsigned __int8 *)MEMORY[0x19AEA534C](this);
LABEL_5:
  v3 = *((_QWORD *)v1 + 1);
  v4 = v3 - 1;
  *((_QWORD *)v1 + 1) = v3 - 1;
  if (v3 == 1)
  {
    v9 = *((_QWORD *)v1 + 2);
    v6 = *((_QWORD *)v1 + 3);
    *((_QWORD *)v1 + 3) = 0;
    v5 = v9 == 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = __ldxr(v1);
  if (v7 != 1)
  {
    __clrex();
LABEL_12:
    this = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (v4)
      return this;
    goto LABEL_13;
  }
  if (__stlxr(0, v1))
    goto LABEL_12;
  if (v4)
    return this;
LABEL_13:
  v8 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v8 = off_1E33627B8;
  *(_QWORD *)(v8 + 8) = v1;
  *(_QWORD *)(v8 + 16) = v6;
  *(_BYTE *)(v8 + 24) = v5;
  v10 = (unsigned __int8 *)v8;
  WTF::ensureOnMainRunLoop();
  this = v10;
  if (v10)
    return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v10 + 8))(v10);
  return this;
}

WebCore::VideoTrackGenerator::Source *WTF::Detail::CallableWrapper<void WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoTrackGenerator::Source,(WTF::DestructionThread)2>(void)::{lambda(void)#1},void>::call(uint64_t a1, WTF::StringImpl *a2)
{
  WebCore::VideoTrackGenerator::Source *result;
  WTF *v4;
  WTF *v5;
  void *v6;
  BOOL v7;

  v4 = *(WTF **)(a1 + 8);
  result = *(WebCore::VideoTrackGenerator::Source **)(a1 + 16);
  if (result)
  {
    WebCore::VideoTrackGenerator::Source::~Source(result, a2);
    result = (WebCore::VideoTrackGenerator::Source *)WTF::fastFree(v5, v6);
  }
  if (*(_BYTE *)(a1 + 24))
    v7 = v4 == 0;
  else
    v7 = 1;
  if (!v7)
    return (WebCore::VideoTrackGenerator::Source *)WTF::fastFree(v4, a2);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::UserMediaRequest>(WebCore::UserMediaRequest &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  uint64_t v7;

  *a1 = &off_1E33627E0;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)a1[2];
  a1[2] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      else
        --*(_DWORD *)(v7 + 24);
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v5)
  {
    if (v5[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[6];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::UserMediaRequest>(WebCore::UserMediaRequest &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  _DWORD *v5;
  uint64_t v7;

  *(_QWORD *)this = &off_1E33627E0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v7 = *((_QWORD *)v4 + 1);
      --*(_QWORD *)(v7 + 16);
      *((_QWORD *)v4 + 1) = 0;
      if (*(_DWORD *)(v7 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
      else
        --*(_DWORD *)(v7 + 24);
      WTF::fastFree(v4, a2);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  v5 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    if (v5[6] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
    else
      --v5[6];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<void WebCore::ActiveDOMObject::queueTaskKeepingObjectAlive<WebCore::UserMediaRequest>(WebCore::UserMediaRequest &,WebCore::TaskSource,WTF::Function<void ()(void)> &&)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::UserMediaRequest::allow(WebCore::CaptureDevice &&,WebCore::CaptureDevice &,WebCore::MediaDeviceHashSalts &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E3362808;
  WebCore::UserMediaRequest::allow(WebCore::CaptureDevice &&,WebCore::CaptureDevice &,WebCore::MediaDeviceHashSalts &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::UserMediaRequest::allow(WebCore::CaptureDevice &&,WebCore::CaptureDevice &,WebCore::MediaDeviceHashSalts &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::~CallableWrapper(WTF *a1, WTF::StringImpl *a2)
{
  void *v3;

  *(_QWORD *)a1 = off_1E3362808;
  WebCore::UserMediaRequest::allow(WebCore::CaptureDevice &&,WebCore::CaptureDevice &,WebCore::MediaDeviceHashSalts &&,WTF::CompletionHandler<void ()(void)> &&)::$_0::~$_0((_QWORD *)a1 + 1, a2);
  return WTF::fastFree(a1, v3);
}

unsigned int *WTF::Detail::CallableWrapper<WebCore::UserMediaRequest::allow(WebCore::CaptureDevice &&,WebCore::CaptureDevice &,WebCore::MediaDeviceHashSalts &&,WTF::CompletionHandler<void ()(void)> &&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned int *result;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int *v22;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  ++*(_DWORD *)(v2 + 24);
  *(_QWORD *)(v3 + 8) = v2;
  v4 = *(_QWORD *)(v2 + 8);
  ++*(_QWORD *)(v2 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
      v6 = v5 - 96;
    else
      v6 = 0;
  }
  else
  {
    v6 = 0;
  }
  if (*(_BYTE *)(v6 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1954B2614);
  }
  {
    WebCore::RealtimeMediaSourceCenter::RealtimeMediaSourceCenter((WebCore::RealtimeMediaSourceCenter *)&WebCore::RealtimeMediaSourceCenter::singleton(void)::center);
  }
  v7 = WebCore::Document::logger((WebCore::Document *)(v6 - 192));
  v8 = (unsigned int *)(v7 + 8);
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 + 1, v8));
  v22 = (unsigned int *)v7;
  v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v10 = &off_1E3362830;
  v10[1] = v2;
  v10[2] = v3;
  v21 = v10;
  WebCore::RealtimeMediaSourceCenter::createMediaStream(&WebCore::RealtimeMediaSourceCenter::singleton(void)::center, (uint64_t *)&v22, &v21, (WTF::StringImpl **)(a1 + 96), a1 + 16, a1 + 56, v2 + 88);
  v11 = v21;
  v21 = 0;
  if (v11)
    (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  result = v22;
  v22 = 0;
  if (result)
  {
    v13 = result + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, result + 2);
      result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  v16 = *(_QWORD *)(v2 + 8);
  if (v16)
  {
    if (*(_QWORD *)(v16 + 8))
    {
      v17 = *(_QWORD *)(v6 + 336);
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 8);
        if (v18)
        {
          v19 = *(_QWORD *)(v18 + 24);
          if (v19)
          {
            v20 = *(_QWORD *)(v19 + 8);
            if (v20)
              return (unsigned int *)WebCore::RTCController::disableICECandidateFilteringForDocument(*(WebCore::RTCController **)(v20 + 304), (WebCore::Document *)(v6 - 192));
          }
        }
      }
    }
  }
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore16UserMediaRequest5allowEONS2_13CaptureDeviceES5_ONS2_20MediaDeviceHashSaltsEONS_17CompletionHandlerIFvvEEEEN3__0clEvEUlT_E_vJONSt12experimental15fundamentals_v38expectedINS_3RefINS2_18MediaStreamPrivateENS_12RawPtrTraitsISJ_EENS_21DefaultRefDerefTraitsISJ_EEEENS2_18CaptureSourceErrorEEEEED1Ev(_QWORD *a1, void *a2)
{
  WTF *v3;
  uint64_t v5;

  *a1 = &off_1E3362830;
  v3 = (WTF *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v5 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v5 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      else
        --*(_DWORD *)(v5 + 24);
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore16UserMediaRequest5allowEONS2_13CaptureDeviceES5_ONS2_20MediaDeviceHashSaltsEONS_17CompletionHandlerIFvvEEEEN3__0clEvEUlT_E_vJONSt12experimental15fundamentals_v38expectedINS_3RefINS2_18MediaStreamPrivateENS_12RawPtrTraitsISJ_EENS_21DefaultRefDerefTraitsISJ_EEEENS2_18CaptureSourceErrorEEEEED0Ev(WTF *this, void *a2)
{
  WTF *v3;
  uint64_t v5;

  *(_QWORD *)this = &off_1E3362830;
  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *((_QWORD *)v3 + 1);
      --*(_QWORD *)(v5 + 16);
      *((_QWORD *)v3 + 1) = 0;
      if (*(_DWORD *)(v5 + 24) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      else
        --*(_DWORD *)(v5 + 24);
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore16UserMediaRequest5allowEONS2_13CaptureDeviceES5_ONS2_20MediaDeviceHashSaltsEONS_17CompletionHandlerIFvvEEEEN3__0clEvEUlT_E_vJONSt12experimental15fundamentals_v38expectedINS_3RefINS2_18MediaStreamPrivateENS_12RawPtrTraitsISJ_EENS_21DefaultRefDerefTraitsISJ_EEEENS2_18CaptureSourceErrorEEEEE4callESR_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  NSObject *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WebCore::MediaStreamPrivate *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t isa_high;
  _QWORD *isa;
  uint64_t isa_low;
  _QWORD *v25;
  uint64_t v26;
  WTF *v27;
  void *v28;
  WTF *v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  void *v34;
  uint64_t result;
  _QWORD *v36;
  uint64_t v37;
  bmalloc::api *v38;
  void *v39;
  WTF *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  WTF *v50;
  void *v51;
  WTF *v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  BOOL v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  objc_class *v75;
  uint64_t v76;
  WebCore::AudioSession *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WebCore::AudioSessionIOS *v81;
  int v82;
  _QWORD *v83;
  uint64_t v84;
  unsigned __int8 *v85;
  int v87;
  int v88;
  WebCore::MediaStreamPrivate *v89;
  uint8_t buf[8];
  __int16 v91;
  _DWORD *v92;
  __int16 v93;
  unsigned int v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  LOBYTE(v92) = 0;
  v94 = -1;
  v3 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(uint8_t *, _DWORD **, uint64_t))off_1E3362858[v3])(buf, &v92, a2);
    v94 = v3;
  }
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(v4 + 80);
  *(_QWORD *)(v4 + 80) = 0;
  v6 = *(_QWORD *)(v4 + 8);
  if (v6)
  {
    v7 = *(_BYTE **)(v6 + 8);
    if (v7)
    {
      if (!v7[180])
      {
        if ((_DWORD)v3)
        {
          v8 = off_1ECE7C518;
          if (os_log_type_enabled((os_log_t)off_1ECE7C518, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1940B8000, v8, OS_LOG_TYPE_DEFAULT, "UserMediaRequest::allow failed to create media stream!", buf, 2u);
            v3 = v94;
          }
          if ((_DWORD)v3 == 1)
          {
            v9 = v92;
            if (v92)
              *v92 += 2;
            *(_QWORD *)buf = v9;
            v91 = v93;
            v10 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 8);
            if (v10)
              v11 = v10 - 96;
            else
              v11 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint8_t *, _QWORD))(*(_QWORD *)v11 + 248))(v11, 1, 2, buf, 0);
            WebCore::UserMediaRequest::deny((WTF::StringImpl *)v4, v91, (JSC::JSGlobalObject *)buf, HIBYTE(v91));
            v13 = *(WTF::StringImpl **)buf;
            *(_QWORD *)buf = 0;
            if (v13)
            {
              if (*(_DWORD *)v13 == 2)
                WTF::StringImpl::destroy(v13, v12);
              else
                *(_DWORD *)v13 -= 2;
            }
            goto LABEL_46;
          }
          v77 = (WebCore::AudioSession *)std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_133;
        }
        v14 = (WebCore::MediaStreamPrivate *)v92;
        v92 = 0;
        v89 = v14;
        if (v7[178])
        {
          __break(0xC471u);
        }
        else
        {
          v15 = WebCore::Document::orientationNotifier((WebCore::Document *)(v7 - 288));
          if (*((_DWORD *)v14 + 19))
          {
            v16 = v15;
            v17 = *((_QWORD *)v14 + 8);
            v18 = *((unsigned int *)v14 + 18);
            if ((_DWORD)v18)
            {
              v19 = 16 * v18;
              v20 = (_QWORD *)*((_QWORD *)v14 + 8);
              while (!*v20)
              {
                v20 += 2;
                v19 -= 16;
                if (!v19)
                  goto LABEL_24;
              }
            }
            else
            {
              v20 = (_QWORD *)*((_QWORD *)v14 + 8);
            }
            v36 = (_QWORD *)(v17 + 16 * v18);
LABEL_51:
            if (v20 != v36)
            {
              v37 = v20[1];
              if (*(_BYTE *)(v37 + 72) && *(_BYTE *)(v37 + 65) == 3)
                (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v37 + 40) + 8) + 232))(*(_QWORD *)(*(_QWORD *)(v37 + 40) + 8), v16);
              while (1)
              {
                v20 += 2;
                if (v20 == v36)
                  break;
                if (*v20)
                  goto LABEL_51;
              }
            }
          }
LABEL_24:
          v8 = bmalloc::api::isoAllocate();
          v21 = WebCore::MediaStream::MediaStream((uint64_t)v8, (uint64_t)(v7 - 288), (uint64_t *)&v89);
          WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v21 + 24));
          WebCore::MediaStream::startProducingData((uint64_t)v8);
          isa_high = HIDWORD(v8[14].isa);
          if (!(_DWORD)isa_high)
            goto LABEL_39;
          isa = v8[13].isa;
          isa_low = LODWORD(v8[14].isa);
          v25 = &isa[2 * isa_low];
          if ((_DWORD)isa_low)
          {
            v26 = 16 * isa_low;
            while (!*isa)
            {
              isa += 2;
              v26 -= 16;
              if (!v26)
              {
                isa = v25;
                break;
              }
            }
          }
          if (isa_high >> 29)
          {
            __break(0xC471u);
            JUMPOUT(0x1954B2F28);
          }
          v27 = (WTF *)WTF::fastMalloc((WTF *)(8 * isa_high));
          v29 = v27;
          if (isa == v25)
            goto LABEL_38;
          v30 = 0;
          v31 = 1;
LABEL_33:
          v32 = v31;
          v33 = isa[1];
          ++*(_DWORD *)(v33 + 24);
          *((_QWORD *)v27 + v30++) = v33;
          while (1)
          {
            isa += 2;
            if (isa == v25)
              break;
            if (*isa)
            {
              v31 = v32 + 1;
              if (isa != v25)
                goto LABEL_33;
              break;
            }
          }
          if (!v30)
          {
LABEL_38:
            WTF::fastFree(v27, v28);
LABEL_39:
            WebCore::UserMediaRequest::deny((WTF::StringImpl *)v4, 5, MEMORY[0x1E0CBF738], 0);
LABEL_40:
            if (v8)
            {
              if (LODWORD(v8[11].isa) == 1)
              {
                WebCore::MediaStream::~MediaStream((WebCore::MediaStream *)v8);
                bmalloc::api::isoDeallocate(v38, v39);
              }
              else
              {
                --LODWORD(v8[11].isa);
              }
            }
            if (v89)
            {
              if (*((_DWORD *)v89 + 4) == 1)
              {
                WebCore::MediaStreamPrivate::~MediaStreamPrivate(v89, v34);
                WTF::fastFree(v40, v41);
              }
              else
              {
                --*((_DWORD *)v89 + 4);
              }
            }
            goto LABEL_46;
          }
          v42 = 0;
          v43 = 8 * v32;
          do
          {
            v44 = *(_DWORD **)((char *)v29 + v42);
            *(_QWORD *)((char *)v29 + v42) = 0;
            if (v44)
            {
              if (v44[6] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v44 + 16))(v44);
              else
                --v44[6];
            }
            v42 += 8;
          }
          while (v43 != v42);
          WTF::fastFree(v29, v28);
          v45 = HIDWORD(v8[14].isa);
          if (!(_DWORD)v45)
            goto LABEL_107;
          v46 = v8[13].isa;
          v47 = LODWORD(v8[14].isa);
          v48 = &v46[2 * v47];
          if ((_DWORD)v47)
          {
            v49 = 16 * v47;
            while (!*v46)
            {
              v46 += 2;
              v49 -= 16;
              if (!v49)
              {
                v46 = v48;
                break;
              }
            }
          }
          if (!(v45 >> 29))
          {
            v50 = (WTF *)WTF::fastMalloc((WTF *)(8 * v45));
            v52 = v50;
            if (v46 == v48)
              goto LABEL_96;
            v53 = 0;
            v54 = 1;
LABEL_78:
            v55 = v54;
            v56 = v46[1];
            ++*(_DWORD *)(v56 + 24);
            *((_QWORD *)v50 + v53++) = v56;
            while (1)
            {
              v46 += 2;
              if (v46 == v48)
                break;
              if (*v46)
              {
                v54 = v55 + 1;
                if (v46 != v48)
                  goto LABEL_78;
                break;
              }
            }
            if (!v53)
            {
LABEL_96:
              v77 = (WebCore::AudioSession *)WTF::fastFree(v50, v51);
            }
            else
            {
              v57 = 0;
              do
              {
                v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((char *)v50 + v57) + 96) + 40) + 8);
                v59 = *(unsigned __int8 *)(v58 + 293);
                if (*(_BYTE *)(v58 + 293))
                  v60 = 1;
                else
                  v60 = 8 * v55 - 8 == v57;
                v57 += 8;
              }
              while (!v60);
              v61 = 0;
              v62 = 8 * v55;
              do
              {
                v63 = *(_DWORD **)((char *)v52 + v61);
                *(_QWORD *)((char *)v52 + v61) = 0;
                if (v63)
                {
                  if (v63[6] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v63 + 16))(v63);
                  else
                    --v63[6];
                }
                v61 += 8;
              }
              while (v62 != v61);
              v77 = (WebCore::AudioSession *)WTF::fastFree(v52, v51);
              if (v59)
                goto LABEL_39;
            }
            if (!HIDWORD(v8[14].isa))
              goto LABEL_107;
            v64 = LODWORD(v8[14].isa);
            if ((_DWORD)v64)
            {
              v65 = 16 * v64;
              v66 = v8[13].isa;
              while (!*v66)
              {
                v66 += 2;
                v65 -= 16;
                if (!v65)
                  goto LABEL_102;
              }
            }
            else
            {
              v66 = v8[13].isa;
            }
            v78 = (uint64_t)v8[13].isa + 16 * v64;
LABEL_120:
            if (v66 == (_QWORD *)v78)
              goto LABEL_102;
            v3 = v66[1];
            if (*(_BYTE *)(*(_QWORD *)(v3 + 96) + 64))
            {
              while (1)
              {
                v66 += 2;
                if (v66 == (_QWORD *)v78)
                  goto LABEL_102;
                if (*v66)
                  goto LABEL_120;
              }
            }
LABEL_133:
            ++*(_DWORD *)(v3 + 24);
            v81 = WebCore::AudioSession::sharedSession(v77);
            WebCore::AudioSession::tryToSetActive(v81, 1);
            if (*(_DWORD *)(v4 + 3128) == 1)
            {
              WebCore::MediaTrackConstraintSet::operator=(v3 + 120, v4 + 2056);
              std::__optional_storage_base<WTF::Vector<WebCore::MediaTrackConstraintSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WebCore::MediaTrackConstraintSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>(v3 + 1168, (uint64_t *)(v4 + 3104));
            }
            if (*(_DWORD *)(v3 + 24) == 1)
              (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
            else
              --*(_DWORD *)(v3 + 24);
LABEL_102:
            if (HIDWORD(v8[14].isa))
            {
              v67 = LODWORD(v8[14].isa);
              if ((_DWORD)v67)
              {
                v68 = 16 * v67;
                v69 = v8[13].isa;
                while (!*v69)
                {
                  v69 += 2;
                  v68 -= 16;
                  if (!v68)
                    goto LABEL_107;
                }
              }
              else
              {
                v69 = v8[13].isa;
              }
              v79 = (uint64_t)v8[13].isa + 16 * v67;
LABEL_127:
              if (v69 != (_QWORD *)v79)
              {
                v80 = v69[1];
                if (*(_BYTE *)(*(_QWORD *)(v80 + 96) + 64))
                {
                  v82 = *(_DWORD *)(v80 + 24);
                  *(_DWORD *)(v80 + 24) = v82 + 1;
                  if (*(_DWORD *)(v4 + 4216) == 1)
                  {
                    WebCore::MediaTrackConstraintSet::operator=(v80 + 120, v4 + 3144);
                    std::__optional_storage_base<WTF::Vector<WebCore::MediaTrackConstraintSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>::__assign_from[abi:sn180100]<std::__optional_move_assign_base<WTF::Vector<WebCore::MediaTrackConstraintSet,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,false>>(v80 + 1168, (uint64_t *)(v4 + 4192));
                    v82 = *(_DWORD *)(v80 + 24) - 1;
                  }
                  if (v82)
                    *(_DWORD *)(v80 + 24) = v82;
                  else
                    (*(void (**)(uint64_t))(*(_QWORD *)v80 + 16))(v80);
                }
                else
                {
                  while (1)
                  {
                    v69 += 2;
                    if (v69 == (_QWORD *)v79)
                      break;
                    if (*v69)
                      goto LABEL_127;
                  }
                }
              }
            }
LABEL_107:
            v7[3151] = 1;
            v70 = **(_QWORD **)(v4 + 72);
            v71 = *(_QWORD *)(v70 + 24);
            if (!v71 || !*(_QWORD *)v71 || (*(_BYTE *)(v71 + 8) & 3) != 0)
              goto LABEL_40;
            v72 = *(_QWORD *)(v70 + 32);
            if (!v72 || (*(_BYTE *)(v72 + 8) & 3) != 0)
              v73 = 0;
            else
              v73 = *(uint64_t **)v72;
            v74 = v73[7];
            MEMORY[0x19AEA3294](buf, v74);
            v75 = (objc_class *)WebCore::wrap<WebCore::MediaStream>((int)v73, **(JSC::VM ***)(v70 + 32), (uint64_t)v8);
            v76 = *(_QWORD *)(v74 + 16);
            if (!v76)
            {
              WebCore::DeferredPromise::callFunction(v70, v73, 0, v75);
              v76 = *(_QWORD *)(v74 + 16);
              if (!v76)
                goto LABEL_115;
            }
            v83 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v73);
            if (!(*(unsigned int (**)(_QWORD *))(*v83 + 64))(v83))
            {
LABEL_144:
              WebCore::reportException((JSC::JSGlobalObject *)v73, v76, 0, 0, 0);
LABEL_115:
              MEMORY[0x19AEA32A0](buf);
              goto LABEL_40;
            }
            v84 = v83[43];
            if (*(_QWORD *)(v74 + 24) == v76)
            {
LABEL_159:
              *(_BYTE *)(*(_QWORD *)(v84 + 8) + 93442) = 1;
              *(_BYTE *)(v70 + 44) = 1;
              goto LABEL_144;
            }
            if (!v84)
              goto LABEL_144;
            v85 = (unsigned __int8 *)(v84 + 40);
            if (__ldaxr((unsigned __int8 *)(v84 + 40)))
            {
              __clrex();
            }
            else if (!__stxr(1u, v85))
            {
              goto LABEL_153;
            }
            MEMORY[0x19AEA534C](v84 + 40);
LABEL_153:
            v87 = *(unsigned __int8 *)(v84 + 41);
            v88 = __ldxr(v85);
            if (v88 == 1)
            {
              if (!__stlxr(0, v85))
              {
LABEL_158:
                if (!v87)
                  goto LABEL_144;
                goto LABEL_159;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)(v84 + 40));
            goto LABEL_158;
          }
          __break(0xC471u);
        }
        JUMPOUT(0x1954B2B40);
      }
    }
  }
LABEL_46:
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (v94 != -1)
    return ((uint64_t (*)(uint8_t *, _DWORD **))off_1E3362848[v94])(buf, &v92);
  return result;
}

WebCore::MediaStreamPrivate *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore18MediaStreamPrivateENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_18CaptureSourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WebCore::MediaStreamPrivate **a2)
{
  WebCore::MediaStreamPrivate *result;
  WTF *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 4) == 1)
    {
      WebCore::MediaStreamPrivate::~MediaStreamPrivate(result, a2);
      return (WebCore::MediaStreamPrivate *)WTF::fastFree(v3, v4);
    }
    else
    {
      --*((_DWORD *)result + 4);
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore18MediaStreamPrivateENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_18CaptureSourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore18MediaStreamPrivateENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_18CaptureSourceErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore18MediaStreamPrivateENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_18CaptureSourceErrorEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISI_LNS0_6_TraitE1EEEEEvRSJ_OT_EUlRSP_OT0_E_JRNS0_6__baseILSM_1EJSG_SH_EEEOSX_EEEDcSP_DpT0_(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *(_QWORD *)a2 = v3;
  *(_WORD *)(a2 + 8) = *((_WORD *)a3 + 4);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::VideoTrackGenerator::create(WebCore::ScriptExecutionContext &)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3362888;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoTrackGenerator::Source,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v2 + 304));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::VideoTrackGenerator::create(WebCore::ScriptExecutionContext &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3362888;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoTrackGenerator::Source,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v3 + 304));
  return WTF::fastFree(this, a2);
}

_BYTE *WTF::Detail::CallableWrapper<WebCore::VideoTrackGenerator::create(WebCore::ScriptExecutionContext &)::$_0,void>::call(uint64_t a1)
{
  return WebCore::RealtimeMediaSource::start(*(_BYTE **)(a1 + 8));
}

void std::__function::__func<WebCore::VideoTrackGenerator::create(WebCore::ScriptExecutionContext &)::$_1,std::allocator<WebCore::VideoTrackGenerator::create(WebCore::ScriptExecutionContext &)::$_1>,void ()(WTF::Function<void ()(void)> &&)>::~__func()
{
  JUMPOUT(0x19AEA7644);
}

__n128 std::__function::__func<WebCore::VideoTrackGenerator::create(WebCore::ScriptExecutionContext &)::$_1,std::allocator<WebCore::VideoTrackGenerator::create(WebCore::ScriptExecutionContext &)::$_1>,void ()(WTF::Function<void ()(void)> &&)>::__clone(__n128 *a1)
{
  __n128 *v2;
  __n128 result;
  __n128 v4;

  v2 = (__n128 *)operator new(0x30uLL);
  v2->n128_u64[0] = (unint64_t)&off_1E33628B0;
  result = a1[1];
  v4 = a1[2];
  v2[1] = result;
  v2[2] = v4;
  return result;
}

__n128 std::__function::__func<WebCore::VideoTrackGenerator::create(WebCore::ScriptExecutionContext &)::$_1,std::allocator<WebCore::VideoTrackGenerator::create(WebCore::ScriptExecutionContext &)::$_1>,void ()(WTF::Function<void ()(void)> &&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E33628B0;
  result = *(__n128 *)(a1 + 16);
  v3 = *(_OWORD *)(a1 + 32);
  *(__n128 *)(a2 + 16) = result;
  *(_OWORD *)(a2 + 32) = v3;
  return result;
}

uint64_t std::__function::__func<WebCore::VideoTrackGenerator::create(WebCore::ScriptExecutionContext &)::$_1,std::allocator<WebCore::VideoTrackGenerator::create(WebCore::ScriptExecutionContext &)::$_1>,void ()(WTF::Function<void ()(void)> &&)>::operator()(uint64_t a1, uint64_t *a2)
{
  __int128 v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  _QWORD *v10;
  char v11;
  _OWORD v12[2];
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *(_OWORD *)(a1 + 32);
  v12[0] = *(_OWORD *)(a1 + 16);
  v12[1] = v2;
  v3 = *a2;
  *a2 = 0;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = &off_1E33628F8;
  v4[1] = v3;
  v10 = v4;
  v11 = 0;
  if (__ldaxr(WebCore::allScriptExecutionContextsMapLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allScriptExecutionContextsMapLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::allScriptExecutionContextsMapLock);
LABEL_5:
  {
    WebCore::allScriptExecutionContextsMap(void)::contexts = 0;
  }
  v6 = WTF::HashTable<WebCore::ProcessQualified<WTF::UUID>,WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>>::lookup<WTF::HashMapTranslatorAdapter<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::IdentityHashTranslator<WTF::HashMap<WebCore::ProcessQualified<WTF::UUID>,WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WebCore::ProcessQualified<WTF::UUID>>,WTF::HashTraits<WTF::WeakRef<WebCore::Document,WebCore::WeakPtrImplWithEventTargetData>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::ProcessQualified<WTF::UUID>>>>,WebCore::ProcessQualified<WTF::UUID>>(&WebCore::allScriptExecutionContextsMap(void)::contexts, (uint64_t *)v12);
  if (v6)
  {
    v7 = v6[4];
    if (v7)
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v7 + 336))(v7, &v10);
  }
  v8 = __ldxr(WebCore::allScriptExecutionContextsMapLock);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_14;
  }
  if (__stlxr(0, WebCore::allScriptExecutionContextsMapLock))
LABEL_14:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allScriptExecutionContextsMapLock);
  result = (uint64_t)v10;
  v10 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore19VideoTrackGenerator6createERNS2_22ScriptExecutionContextEENK3__1clEONS_8FunctionIFvvEEEEUlRT_E_vJS5_EED1Ev(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E33628F8;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore19VideoTrackGenerator6createERNS2_22ScriptExecutionContextEENK3__1clEONS_8FunctionIFvvEEEEUlRT_E_vJS5_EED0Ev(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33628F8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore19VideoTrackGenerator6createERNS2_22ScriptExecutionContextEENK3__1clEONS_8FunctionIFvvEEEEUlRT_E_vJS5_EE4callES5_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

bmalloc::api *WTF::RefCounted<WebCore::VideoTrackGenerator>::deref(bmalloc::api *this, void *a2)
{
  bmalloc::api *v2;
  _DWORD *v3;
  WTF *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = this;
  if (*(_DWORD *)this == 1)
  {
    v3 = (_DWORD *)*((_QWORD *)this + 3);
    *((_QWORD *)v2 + 3) = 0;
    if (v3)
    {
      if (v3[6] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
      else
        --v3[6];
    }
    v4 = (WTF *)*((_QWORD *)v2 + 2);
    *((_QWORD *)v2 + 2) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        v6 = (_DWORD *)*((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
        if (v6)
        {
          if (v6[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
          else
            --v6[4];
        }
        v7 = *((_QWORD *)v4 + 1);
        if (v7)
        {
          *(_QWORD *)(v7 + 8) = 0;
          v8 = (unsigned int *)*((_QWORD *)v4 + 1);
          *((_QWORD *)v4 + 1) = 0;
          if (v8)
          {
            do
            {
              v9 = __ldaxr(v8);
              v10 = v9 - 1;
            }
            while (__stlxr(v10, v8));
            if (!v10)
            {
              atomic_store(1u, v8);
              WTF::fastFree((WTF *)v8, a2);
            }
          }
        }
        else
        {
          *((_QWORD *)v4 + 1) = 0;
        }
        WTF::fastFree(v4, a2);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
    v5 = (_DWORD *)*((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v5)
    {
      if (v5[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
      else
        --v5[2];
    }
    return (bmalloc::api *)bmalloc::api::isoDeallocate(v2, a2);
  }
  else
  {
    --*(_DWORD *)this;
  }
  return this;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::VideoTrackGenerator::setMuted(WebCore::ScriptExecutionContext &,BOOL)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  bmalloc::api *v3;

  *a1 = &off_1E3362920;
  v3 = (bmalloc::api *)a1[2];
  a1[2] = 0;
  if (v3)
    WTF::RefCounted<WebCore::VideoTrackGenerator>::deref(v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::VideoTrackGenerator::setMuted(WebCore::ScriptExecutionContext &,BOOL)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  bmalloc::api *v3;

  *(_QWORD *)this = &off_1E3362920;
  v3 = (bmalloc::api *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::RefCounted<WebCore::VideoTrackGenerator>::deref(v3, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::VideoTrackGenerator::setMuted(WebCore::ScriptExecutionContext &,BOOL)::$_0,void,WebCore::ScriptExecutionContext &>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 8);
  *(_BYTE *)(v1 + 5) = 0;
  v2 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 96);
  v3 = *(_BYTE *)(v1 + 4);
  *(_BYTE *)(v2 + 97) = v3;
  v4 = *(unsigned int **)(v2 + 40);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v6 = &off_1E3418280;
  *(_QWORD *)(v6 + 8) = v4;
  *(_BYTE *)(v6 + 16) = v3;
  v8 = v6;
  WTF::ensureOnMainThread();
  result = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::VideoTrackGenerator::Source::endProducingData(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = a1[1];
  *a1 = &off_1E3362948;
  a1[1] = 0;
  if (!v3)
    return a1;
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return a1;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return a1;
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return a1;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::VideoTrackGenerator::Source::endProducingData(void)::$_0,void,WebCore::ScriptExecutionContext &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3362948;
  *((_QWORD *)this + 1) = 0;
  if (!v3)
    return WTF::fastFree(this, a2);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v3);
LABEL_6:
  v5 = *(_QWORD *)(v3 + 16) - 1;
  *(_QWORD *)(v3 + 16) = v5;
  if (v5)
  {
    v9 = __ldxr((unsigned __int8 *)v3);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v3))
        return WTF::fastFree(this, a2);
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v3);
    return WTF::fastFree(this, a2);
  }
  v6 = *(_QWORD *)(v3 + 8);
  v7 = __ldxr((unsigned __int8 *)v3);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v3))
    {
      if (!v6)
        goto LABEL_13;
      return WTF::fastFree(this, a2);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v6)
LABEL_13:
    WTF::fastFree((WTF *)v3, a2);
  return WTF::fastFree(this, a2);
}

unsigned __int8 *WTF::Detail::CallableWrapper<WebCore::VideoTrackGenerator::Source::endProducingData(void)::$_0,void,WebCore::ScriptExecutionContext &>::call(unsigned __int8 *result)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v1 = *((_QWORD *)result + 1);
  if (!v1)
    return result;
  v2 = *((_QWORD *)result + 2);
  if (__ldaxr((unsigned __int8 *)v1))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v1))
  {
    goto LABEL_6;
  }
  result = (unsigned __int8 *)MEMORY[0x19AEA534C](v1);
LABEL_6:
  if (*(_QWORD *)(v1 + 24))
    ++*(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  v4 = __ldxr((unsigned __int8 *)v1);
  if (v4 != 1)
  {
    __clrex();
LABEL_18:
    result = (unsigned __int8 *)WTF::Lock::unlockSlow((WTF::Lock *)v1);
    if (!v2)
      return result;
    goto LABEL_12;
  }
  if (__stlxr(0, (unsigned __int8 *)v1))
    goto LABEL_18;
  if (!v2)
    return result;
LABEL_12:
  v5 = *(_QWORD *)(v2 + 352);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      ++*(_DWORD *)v6;
      WebCore::InternalWritableStream::closeIfPossible(*(WTF **)(v6 + 16));
      if (*(_DWORD *)v6 == 1)
      {
        v8 = *(_DWORD **)(v6 + 16);
        *(_QWORD *)(v6 + 16) = 0;
        if (v8)
        {
          if (v8[4] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
          else
            --v8[4];
        }
        v9 = *(_QWORD *)(v6 + 8);
        if (v9)
        {
          *(_QWORD *)(v9 + 8) = 0;
          v10 = *(unsigned int **)(v6 + 8);
          *(_QWORD *)(v6 + 8) = 0;
          if (v10)
          {
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
            {
              atomic_store(1u, v10);
              WTF::fastFree((WTF *)v10, v7);
            }
          }
        }
        else
        {
          *(_QWORD *)(v6 + 8) = 0;
        }
        WTF::fastFree((WTF *)v6, v7);
      }
      else
      {
        --*(_DWORD *)v6;
      }
    }
  }
  return WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoTrackGenerator::Source,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v2 + 304));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::VideoTrackGenerator::Source::writeVideoFrame(WebCore::VideoFrame &,WebCore::VideoFrameTimeMetadata)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E3362970;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoTrackGenerator::Source,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v2 + 304));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::VideoTrackGenerator::Source::writeVideoFrame(WebCore::VideoFrame &,WebCore::VideoFrameTimeMetadata)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = &off_1E3362970;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoTrackGenerator::Source,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v3 + 304));
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebCore::VideoTrackGenerator::Source::writeVideoFrame(WebCore::VideoFrame &,WebCore::VideoFrameTimeMetadata)::$_0,void>::call(WTF *result)
{
  WTF *v1;
  int v2;
  WebCore::IntSize *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  __int128 v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  void *v15;
  __int128 v16;
  WTF *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  WTF *v31[2];
  __int128 v32;
  __int128 v33;
  char v34;
  WTF::StringImpl *v35[2];
  __int128 v36;
  WTF *v37[2];
  _BYTE v38[38];

  v1 = result;
  v3 = (WTF *)((char *)result + 24);
  v2 = *((_DWORD *)result + 6);
  v4 = *((_QWORD *)result + 1);
  v5 = *(_DWORD *)(v4 + 664);
  if (v5 >= v2)
  {
    v7 = *(_DWORD *)(v4 + 668);
    v6 = *((_DWORD *)result + 7);
    if (v7 >= v6)
      goto LABEL_32;
  }
  else
  {
    v6 = *((_DWORD *)result + 7);
    v7 = *(_DWORD *)(v4 + 668);
  }
  if (v5 > v2)
    v2 = *(_DWORD *)(v4 + 664);
  *(_DWORD *)(v4 + 664) = v2;
  if (v7 <= v6)
    v8 = v6;
  else
    v8 = v7;
  *(_DWORD *)(v4 + 668) = v8;
  v34 = 0;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  *(_OWORD *)v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  *(_OWORD *)v35 = 0u;
  v36 = 0u;
  *(_OWORD *)v37 = 0u;
  memset(v38, 0, 19);
  *(_WORD *)&v38[19] = 257;
  memset(&v38[21], 0, 17);
  *(_OWORD *)(v4 + 360) = 0u;
  *(_OWORD *)(v4 + 376) = 0u;
  *(_OWORD *)(v4 + 392) = 0u;
  WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v4 + 408, (const void **)v31);
  v10 = v33;
  *(_OWORD *)(v4 + 424) = v32;
  *(_OWORD *)(v4 + 440) = v10;
  *(_BYTE *)(v4 + 456) = v34;
  v11 = v35[0];
  if (v35[0])
    *(_DWORD *)v35[0] += 2;
  v12 = *(WTF::StringImpl **)(v4 + 464);
  *(_QWORD *)(v4 + 464) = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v9);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v35[1];
  if (v35[1])
    *(_DWORD *)v35[1] += 2;
  v14 = *(WTF::StringImpl **)(v4 + 472);
  *(_QWORD *)(v4 + 472) = v13;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v9);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_OWORD *)(v4 + 480) = v36;
  WTF::Vector<WebCore::VideoFacingMode,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(v4 + 496, (const void **)v37);
  v16 = *(_OWORD *)&v38[16];
  *(_OWORD *)(v4 + 512) = *(_OWORD *)v38;
  *(_OWORD *)(v4 + 528) = v16;
  *(_QWORD *)(v4 + 542) = *(_QWORD *)&v38[30];
  v17 = v37[0];
  if (v37[0])
  {
    v37[0] = 0;
    LODWORD(v37[1]) = 0;
    WTF::fastFree(v17, v15);
  }
  v18 = v35[1];
  v35[1] = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)v18 -= 2;
  }
  v19 = v35[0];
  v35[0] = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)v19 -= 2;
  }
  result = v31[0];
  if (v31[0])
  {
    v31[0] = 0;
    LODWORD(v31[1]) = 0;
    result = (WTF *)WTF::fastFree(result, v15);
  }
  v20 = *(unsigned int *)(v4 + 664);
  if ((v20 & 0x80000000) != 0
    || (*(_QWORD *)(v4 + 360) = v20 << 32, v21 = *(unsigned int *)(v4 + 668), (v21 & 0x80000000) != 0))
  {
    __break(0xC471u);
    JUMPOUT(0x1954B3B50);
  }
  *(_QWORD *)(v4 + 368) = v21 << 32;
LABEL_32:
  *(_WORD *)(v4 + 635) = 257;
  *(_BYTE *)(v4 + 653) = 0;
  *(_QWORD *)(v4 + 645) = 0;
  *(_QWORD *)(v4 + 637) = 0;
  v22 = *((_QWORD *)v1 + 3);
  *(_QWORD *)(v4 + 552) = v22;
  if ((_DWORD)v22 != *(_DWORD *)(v4 + 216) || *((_DWORD *)v1 + 7) != *(_DWORD *)(v4 + 220))
  {
    v24 = *(_QWORD *)(v4 + 40);
    if (v24)
    {
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
      v26 = *(_QWORD *)(v4 + 48);
      *(_QWORD *)&v28 = v25;
      *((_QWORD *)&v28 + 1) = v27;
      *(_QWORD *)&v29 = "setSize";
      *((_QWORD *)&v29 + 1) = v26;
      if (*(_BYTE *)(v24 + 12))
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::IntSize>((uint64_t)&WebCore::LogWebRTC, 0, (WTF::Logger::LogSiteIdentifier *)&v28, v3);
    }
    *(_QWORD *)(v4 + 216) = *(_QWORD *)v3;
    return (WTF *)WebCore::RealtimeMediaSource::notifySettingsDidChangeObservers(v4, 3u);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::VideoTrackGenerator::Sink::close(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3362998;
  a1[1] = 0;
  if (v2)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoTrackGenerator::Source,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v2 + 304));
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::VideoTrackGenerator::Sink::close(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3362998;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::VideoTrackGenerator::Source,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v3 + 304));
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::VideoTrackGenerator::Sink::close(void)::$_0,void>::call(uint64_t a1)
{
  return WebCore::RealtimeMediaSource::end(*(_QWORD *)(a1 + 8), 0);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::LibWebRTCCertificateGenerator::RTCCertificateGeneratorCallbackWrapper,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t result, WTF::StringImpl *a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  char v10;

  v2 = *(WTF **)(result + 8);
  if (v2)
  {
    v3 = *((_QWORD *)v2 + 2);
    *((_QWORD *)v2 + 2) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr((unsigned int *)v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, (unsigned int *)v4));
      if (!v6)
      {
        atomic_store(1u, (unsigned int *)v4);
        v7 = *(WTF::StringImpl **)(v4 + 48);
        *(_QWORD *)(v4 + 48) = 0;
        if (v7)
        {
          if (*(_DWORD *)v7 == 2)
            WTF::StringImpl::destroy(v7, a2);
          else
            *(_DWORD *)v7 -= 2;
        }
        v8 = *(WTF::StringImpl **)(v4 + 40);
        *(_QWORD *)(v4 + 40) = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 2)
            WTF::StringImpl::destroy(v8, a2);
          else
            *(_DWORD *)v8 -= 2;
        }
        v9 = *(unsigned int *)(v4 + 32);
        if ((_DWORD)v9 != -1)
          ((void (*)(char *, uint64_t))off_1E33629D8[v9])(&v10, v4 + 8);
        *(_DWORD *)(v4 + 32) = -1;
        WTF::fastFree((WTF *)v4, a2);
      }
    }
    return WTF::fastFree(v2, a2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCCertificateGenerator::generateCertificate(WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &&,WebCore::LibWebRTCProvider &,WebCore::PeerConnectionBackend::CertificateInformation const&,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::RTCCertificate,WTF::RawPtrTraits<WebCore::ExceptionOr>,WTF::DefaultRefDerefTraits<WebCore::ExceptionOr>>> &&)> &&)::$_0,void,rtc::RTCCertificateGenerator &>::~CallableWrapper(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;
  _QWORD *v6;
  _QWORD *v7;

  *a1 = &off_1E33629F8;
  v2 = (unsigned int *)a1[8];
  a1[8] = 0;
  if (v2)
  {
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v6 = off_1E33629C0;
      v6[1] = v2;
      v7 = v6;
      WTF::ensureOnMainThread();
      if (v7)
        (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCCertificateGenerator::generateCertificate(WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &&,WebCore::LibWebRTCProvider &,WebCore::PeerConnectionBackend::CertificateInformation const&,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::RTCCertificate,WTF::RawPtrTraits<WebCore::ExceptionOr>,WTF::DefaultRefDerefTraits<WebCore::ExceptionOr>>> &&)> &&)::$_0,void,rtc::RTCCertificateGenerator &>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  *(_QWORD *)this = &off_1E33629F8;
  v3 = (unsigned int *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E33629C0;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCCertificateGenerator::generateCertificate(WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>> &&,WebCore::LibWebRTCProvider &,WebCore::PeerConnectionBackend::CertificateInformation const&,WTF::Function<void ()(WebCore::ExceptionOr<WTF::Ref<WebCore::RTCCertificate,WTF::RawPtrTraits<WebCore::ExceptionOr>,WTF::DefaultRefDerefTraits<WebCore::ExceptionOr>>> &&)> &&)::$_0,void,rtc::RTCCertificateGenerator &>::call(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t result;
  _QWORD v11[2];
  unsigned int **(*v12)(char, unsigned int ***, unsigned int ***);
  uint64_t (*v13)(uint64_t **, uint64_t *);
  uint64_t v14;
  int v15;

  v4 = *(_DWORD *)(a1 + 8);
  if (!v4)
  {
    if (*(_BYTE *)(a1 + 40))
      v7 = *(unsigned int *)(a1 + 32);
    else
      v7 = 2048;
    v5 = rtc::KeyParams::RSA((rtc::KeyParams *)v7);
    goto LABEL_8;
  }
  if (v4 == 1)
  {
    v5 = rtc::KeyParams::ECDSA();
LABEL_8:
    v14 = v5;
    v15 = v6;
    v8 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    v9 = (_QWORD *)operator new();
    *v9 = v8;
    v11[0] = v9;
    v12 = _ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZZN7WebCore29LibWebRTCCertificateGenerator19generateCertificateEON3WTF3RefINS2_14SecurityOriginENS4_12RawPtrTraitsIS6_EENS4_21DefaultRefDerefTraitsIS6_EEEERNS2_17LibWebRTCProviderERKNS2_21PeerConnectionBackend22CertificateInformationEONS4_8FunctionIFvONS2_11ExceptionOrINS5_INS2_14RTCCertificateENS7_ISL_EENS9_ISL_EEEEEEEEEEN3__0clIN3rtc23RTCCertificateGeneratorEEEDaRT_EUlN6webrtc13scoped_refptrINSW_14RTCCertificateEEEE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateES18_;
    v13 = _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZZN7WebCore29LibWebRTCCertificateGenerator19generateCertificateEON3WTF3RefINS2_14SecurityOriginENS4_12RawPtrTraitsIS6_EENS4_21DefaultRefDerefTraitsIS6_EEEERNS2_17LibWebRTCProviderERKNS2_21PeerConnectionBackend22CertificateInformationEONS4_8FunctionIFvONS2_11ExceptionOrINS5_INS2_14RTCCertificateENS7_ISL_EENS9_ISL_EEEEEEEEEEN3__0clIN3rtc23RTCCertificateGeneratorEEEDaRT_EUlN6webrtc13scoped_refptrINSW_14RTCCertificateEEEE_JS14_EEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE;
    (*(void (**)(uint64_t, uint64_t *, uint64_t, _QWORD *))(*(_QWORD *)a2 + 16))(a2, &v14, a1 + 48, v11);
    return (uint64_t)v12(1, (unsigned int ***)v11, (unsigned int ***)v11);
  }
  result = 100;
  __break(0xC471u);
  return result;
}

uint64_t _ZN4absl22internal_any_invocable13RemoteInvokerILb0EvOZZN7WebCore29LibWebRTCCertificateGenerator19generateCertificateEON3WTF3RefINS2_14SecurityOriginENS4_12RawPtrTraitsIS6_EENS4_21DefaultRefDerefTraitsIS6_EEEERNS2_17LibWebRTCProviderERKNS2_21PeerConnectionBackend22CertificateInformationEONS4_8FunctionIFvONS2_11ExceptionOrINS5_INS2_14RTCCertificateENS7_ISL_EENS9_ISL_EEEEEEEEEEN3__0clIN3rtc23RTCCertificateGeneratorEEEDaRT_EUlN6webrtc13scoped_refptrINSW_14RTCCertificateEEEE_JS14_EEET0_PNS0_15TypeErasedStateEDpNS0_18ForwardedParameterIT2_E4typeE(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  uint64_t v8;

  v2 = *a1;
  v3 = *a2;
  *a2 = 0;
  v4 = *v2;
  v7 = *(_OWORD *)(v4 + 8);
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  v5 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v5 = off_1E3362A20;
  *(_OWORD *)(v5 + 8) = v7;
  *(_QWORD *)(v5 + 24) = v3;
  v8 = v5;
  WTF::callOnMainThread();
  result = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

unsigned int **_ZN4absl22internal_any_invocable23RemoteManagerNontrivialIZZN7WebCore29LibWebRTCCertificateGenerator19generateCertificateEON3WTF3RefINS2_14SecurityOriginENS4_12RawPtrTraitsIS6_EENS4_21DefaultRefDerefTraitsIS6_EEEERNS2_17LibWebRTCProviderERKNS2_21PeerConnectionBackend22CertificateInformationEONS4_8FunctionIFvONS2_11ExceptionOrINS5_INS2_14RTCCertificateENS7_ISL_EENS9_ISL_EEEEEEEEEEN3__0clIN3rtc23RTCCertificateGeneratorEEEDaRT_EUlN6webrtc13scoped_refptrINSW_14RTCCertificateEEEE_EEvNS0_14FunctionToCallEPNS0_15TypeErasedStateES18_(char a1, unsigned int ***a2, unsigned int ***a3)
{
  unsigned int **result;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  _QWORD *v9;
  _QWORD *v10;

  result = *a2;
  if ((a1 & 1) != 0)
  {
    if (result)
    {
      v5 = *result;
      *result = 0;
      if (v5)
      {
        do
        {
          v6 = __ldaxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
        {
          atomic_store(1u, v5);
          v8 = v5;
          v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v9 = off_1E33629C0;
          v9[1] = v8;
          v10 = v9;
          WTF::ensureOnMainThread();
          if (v10)
            (*(void (**)(_QWORD *))(*v10 + 8))(v10);
        }
      }
      return (unsigned int **)MEMORY[0x19AEA7644]();
    }
  }
  else
  {
    *a3 = result;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCCertificateGenerator::RTCCertificateGeneratorCallbackWrapper::process(webrtc::scoped_refptr<rtc::RTCCertificate>)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *a1 = off_1E3362A20;
  v3 = (unsigned int *)a1[3];
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      rtc::RTCCertificate::~RTCCertificate((rtc::RTCCertificate *)v3);
      MEMORY[0x19AEA7644]();
    }
  }
  v6 = a1[2];
  a1[2] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCCertificateGenerator::RTCCertificateGeneratorCallbackWrapper::process(webrtc::scoped_refptr<rtc::RTCCertificate>)::{lambda(void)#1},void>::~CallableWrapper(uint64_t *a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;

  *a1 = (uint64_t)off_1E3362A20;
  v3 = (unsigned int *)a1[3];
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      rtc::RTCCertificate::~RTCCertificate((rtc::RTCCertificate *)v3);
      MEMORY[0x19AEA7644]();
    }
  }
  v6 = a1[2];
  a1[2] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  WTF::Ref<WebCore::SecurityOrigin,WTF::RawPtrTraits<WebCore::SecurityOrigin>,WTF::DefaultRefDerefTraits<WebCore::SecurityOrigin>>::~Ref(a1 + 1, a2);
  return WTF::fastFree((WTF *)a1, v7);
}

WTF *WTF::Detail::CallableWrapper<WebCore::LibWebRTCCertificateGenerator::RTCCertificateGeneratorCallbackWrapper::process(webrtc::scoped_refptr<rtc::RTCCertificate>)::{lambda(void)#1},void>::call(uint64_t a1)
{
  rtc::RTCCertificate *v2;
  rtc::SSLCertificate *SSLCertificate;
  uint64_t i;
  int v5;
  BOOL v6;
  void *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl **v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl **v14;
  WTF::StringImpl **v15;
  WTF::StringImpl **v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF *result;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  void *v38;
  int v39;
  char v40;
  int v41;
  char v42;
  void *__p;
  char v44;
  uint64_t v45;
  WTF::StringImpl **v46;
  uint64_t v47;
  char v48;

  v2 = *(rtc::RTCCertificate **)(a1 + 24);
  if (v2)
  {
    v46 = 0;
    v47 = 0;
    SSLCertificate = (rtc::SSLCertificate *)rtc::RTCCertificate::GetSSLCertificate(v2);
    rtc::SSLCertificate::GetStats(SSLCertificate);
    for (i = v45; i; i = *(_QWORD *)(i + 72))
    {
      v5 = *(char *)(i + 23);
      v6 = v5 < 0;
      v7 = *(void **)i;
      if (v5 >= 0)
        v7 = (void *)i;
      LODWORD(v8) = *(unsigned __int8 *)(i + 23);
      if (v6)
        v8 = *(_QWORD *)(i + 8);
      v38 = v7;
      v39 = v8;
      v40 = 1;
      WTF::String::fromUTF8();
      WTF::StringView::convertToASCIILowercase((WTF::StringView *)&v38);
      v10 = HIDWORD(v47);
      if (HIDWORD(v47) == (_DWORD)v47)
      {
        v11 = (WTF::StringImpl **)WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v46, HIDWORD(v47) + 1, (unint64_t)&v35);
        v10 = HIDWORD(v47);
        v12 = &v46[2 * HIDWORD(v47)];
        v13 = *v11;
        *v11 = 0;
        v14 = v11 + 1;
        *v12 = v13;
        v15 = v12 + 1;
      }
      else
      {
        v16 = &v46[2 * HIDWORD(v47)];
        v17 = v35;
        v35 = 0;
        *v16 = v17;
        v15 = v16 + 1;
        v14 = &v36;
      }
      v18 = *v14;
      *v14 = 0;
      *v15 = v18;
      HIDWORD(v47) = v10 + 1;
      v19 = v36;
      v36 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v9);
        else
          *(_DWORD *)v19 -= 2;
      }
      v20 = v35;
      v35 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v9);
        else
          *(_DWORD *)v20 -= 2;
      }
    }
    rtc::RTCCertificate::ToPEM(*(rtc::RTCCertificate **)(a1 + 24));
    v21 = (double)(unint64_t)rtc::RTCCertificate::Expires(*(rtc::RTCCertificate **)(a1 + 24));
    WTF::String::fromUTF8();
    WTF::String::fromUTF8();
    v22 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v22 = 1;
    v23 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(v22 + 8) = v23;
    *(double *)(v22 + 16) = v21;
    *(_QWORD *)(v22 + 24) = v46;
    v24 = v47;
    v46 = 0;
    v47 = 0;
    *(_QWORD *)(v22 + 32) = v24;
    *(_QWORD *)(v22 + 40) = v34;
    *(_QWORD *)(v22 + 48) = v33;
    v35 = (WTF::StringImpl *)v22;
    v37 = 0;
    (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), &v35);
    if (v37 != -1)
      ((void (*)(char *, WTF::StringImpl **))off_1E3362A38[v37])(&v48, &v35);
    v37 = -1;
    if (v44 < 0)
      operator delete(__p);
    if (v42 < 0)
      operator delete(v38);
    v26 = v45;
    v45 = 0;
    if (v26)
    {
      v27 = MEMORY[0x19AEA591C]();
      MEMORY[0x19AEA7644](v27, 0x1032C40C3789C24);
    }
    if (HIDWORD(v47))
    {
      v28 = 16 * HIDWORD(v47);
      v29 = v46 + 1;
      do
      {
        v30 = *v29;
        *v29 = 0;
        if (v30)
        {
          if (*(_DWORD *)v30 == 2)
            WTF::StringImpl::destroy(v30, v25);
          else
            *(_DWORD *)v30 -= 2;
        }
        v31 = *(v29 - 1);
        *(v29 - 1) = 0;
        if (v31)
        {
          if (*(_DWORD *)v31 == 2)
            WTF::StringImpl::destroy(v31, v25);
          else
            *(_DWORD *)v31 -= 2;
        }
        v29 += 2;
        v28 -= 16;
      }
      while (v28);
    }
    result = (WTF *)v46;
    if (v46)
    {
      v46 = 0;
      LODWORD(v47) = 0;
      return (WTF *)WTF::fastFree(result, v25);
    }
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v38) = 33;
    v41 = 1;
    result = (WTF *)(*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), &v38);
    if (v41 != -1)
      return (WTF *)((uint64_t (*)(WTF::StringImpl **, void **))off_1E3362A38[v41])(&v35, &v38);
  }
  return result;
}

WebCore::RTCCertificate *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore14RTCCertificateENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WebCore::RTCCertificate *result;
  WTF *v3;
  void *v4;

  result = *(WebCore::RTCCertificate **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::RTCCertificate::~RTCCertificate(result, a2);
      return (WebCore::RTCCertificate *)WTF::fastFree(v3, v4);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore14RTCCertificateENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27LibWebRTCDataChannelHandler11StateChangeEN3WTF6StringENSB_3RefINS8_22FragmentedSharedBufferENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSA_SC_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 39) < 0)
      operator delete(*(void **)(a2 + 16));
  }
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27LibWebRTCDataChannelHandler11StateChangeEN3WTF6StringENSB_3RefINS8_22FragmentedSharedBufferENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSA_SC_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27LibWebRTCDataChannelHandler11StateChangeEN3WTF6StringENSB_3RefINS8_22FragmentedSharedBufferENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSA_SC_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, uint64_t *a2)
{
  return WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(a2, a2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::LibWebRTCDataChannelHandler::setClient(WebCore::RTCDataChannelHandlerClient &,WebCore::ProcessQualified<WTF::UUID>)::$_0,WebCore::LibWebRTCDataChannelHandler::setClient(WebCore::RTCDataChannelHandlerClient &,WebCore::ProcessQualified<WTF::UUID>)::$_1,WebCore::LibWebRTCDataChannelHandler::setClient(WebCore::RTCDataChannelHandlerClient &,WebCore::ProcessQualified<WTF::UUID>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::LibWebRTCDataChannelHandler::StateChange,WTF::String,WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &>(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  unsigned __int8 v7;
  int v8;
  std::string __p;
  _DWORD v10[2];
  char v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a1;
  v4 = *a2;
  v7 = v4;
  LOBYTE(v8) = 0;
  v11 = 0;
  if (a2[48])
  {
    v8 = *((_DWORD *)a2 + 2);
    if ((char)a2[39] < 0)
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
    else
      __p = *(std::string *)(a2 + 16);
    v10[0] = *((_DWORD *)a2 + 10);
    *(_DWORD *)((char *)v10 + 3) = *(_DWORD *)(a2 + 43);
    v11 = 1;
    WebCore::toRTCError((WTF::StringImpl *)&v8, &v13);
    if (v13)
    {
      v5 = *(_QWORD *)(v3 + 16);
      v12 = v13;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 40))(v5, &v12);
      v6 = (_DWORD *)v12;
      v12 = 0;
      if (v6)
      {
        if (v6[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        else
          --v6[2];
      }
    }
    v4 = v7;
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 16) + 16))(*(_QWORD *)(v3 + 16), v4);
  if (v11)
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::LibWebRTCDataChannelHandler::setClient(WebCore::RTCDataChannelHandlerClient &,WebCore::ProcessQualified<WTF::UUID>)::$_0,WebCore::LibWebRTCDataChannelHandler::setClient(WebCore::RTCDataChannelHandlerClient &,WebCore::ProcessQualified<WTF::UUID>)::$_1,WebCore::LibWebRTCDataChannelHandler::setClient(WebCore::RTCDataChannelHandlerClient &,WebCore::ProcessQualified<WTF::UUID>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::LibWebRTCDataChannelHandler::StateChange,WTF::String,WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &>(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 8) + 24))(*(_QWORD *)(*(_QWORD *)a1 + 8));
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::LibWebRTCDataChannelHandler::setClient(WebCore::RTCDataChannelHandlerClient &,WebCore::ProcessQualified<WTF::UUID>)::$_0,WebCore::LibWebRTCDataChannelHandler::setClient(WebCore::RTCDataChannelHandlerClient &,WebCore::ProcessQualified<WTF::UUID>)::$_1,WebCore::LibWebRTCDataChannelHandler::setClient(WebCore::RTCDataChannelHandlerClient &,WebCore::ProcessQualified<WTF::UUID>)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::LibWebRTCDataChannelHandler::StateChange,WTF::String,WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>> &>(uint64_t **a1, WTF **a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  std::string *v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  uint64_t v12;
  char v13;
  char *v14;

  v2 = *a1;
  WebCore::FragmentedSharedBuffer::makeContiguous(*a2, &v12);
  v3 = *v2;
  v4 = v12;
  if (!*(_DWORD *)(v12 + 20))
  {
    v7 = 0;
    goto LABEL_4;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(v12 + 8) + 8);
  v6 = *(unsigned int *)(v5 + 24);
  if ((_DWORD)v6 != -1)
  {
    v14 = &v13;
    v7 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIRN3WTF7VisitorIZNK7WebCore11DataSegment4dataEvE3__0JZNKS9_4dataEvE3__1ZNKS9_4dataEvE3__2ZNKS9_4dataEvE3__3EEEEEJRKNS0_6__implIJNS6_6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataENS9_8ProviderEEEEEEEDcOT_DpOT0____fmatrix[v6])(&v14, v5 + 8);
LABEL_4:
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 32))(v3, v7, *(_QWORD *)(v4 + 48));
    WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(&v12, v8);
    return;
  }
  v9 = (std::string *)std::__throw_bad_variant_access[abi:sn180100]();
  std::string::__init_copy_ctor_external(v9, v10, v11);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;
  size_t v9;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_11;
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  v9 = __sz + 1;
  if (v5 <= (std::string *)__s && (char *)v5 + v9 > __s)
  {
    __break(1u);
LABEL_11:
    abort();
  }
  memmove(v5, __s, v9);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore27LibWebRTCDataChannelHandler11StateChangeEN3WTF6StringENSB_3RefINS8_22FragmentedSharedBufferENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJSA_SC_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  int v4;

  *(_BYTE *)a2 = *(_BYTE *)a3;
  *(_BYTE *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  if (*(_BYTE *)(a3 + 48))
  {
    *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
    result = *(__n128 *)(a3 + 16);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
    *(__n128 *)(a2 + 16) = result;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v4 = *(_DWORD *)(a3 + 40);
    *(_DWORD *)(a2 + 43) = *(_DWORD *)(a3 + 43);
    *(_DWORD *)(a2 + 40) = v4;
    *(_BYTE *)(a2 + 48) = 1;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore27LibWebRTCDataChannelHandler11StateChangeEN3WTF6StringENSB_3RefINS8_22FragmentedSharedBufferENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJSA_SC_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore27LibWebRTCDataChannelHandler11StateChangeEN3WTF6StringENSB_3RefINS8_22FragmentedSharedBufferENSB_12RawPtrTraitsISE_EENSB_21DefaultRefDerefTraitsISE_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJSA_SC_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WTF::Vector<std::variant<WebCore::LibWebRTCDataChannelHandler::StateChange,WTF::String,WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = a2;
    if (a2 >> 26)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(a2 << 6));
      *(_DWORD *)(v3 + 8) = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = v5 << 6;
        v9 = v4;
        do
        {
          *(_BYTE *)v7 = 0;
          *(_DWORD *)(v7 + 56) = -1;
          v10 = *((unsigned int *)v9 + 14);
          if ((_DWORD)v10 != -1)
          {
            result = ((uint64_t (*)(char *, uint64_t, WTF *))off_1E3362A78[v10])(&v12, v7, v9);
            *(_DWORD *)(v7 + 56) = v10;
            v11 = *((unsigned int *)v9 + 14);
            if ((_DWORD)v11 != -1)
              result = ((uint64_t (*)(char *, WTF *))off_1E3362A48[v11])(&v13, v9);
          }
          *((_DWORD *)v9 + 14) = -1;
          v7 += 64;
          v9 = (WTF *)((char *)v9 + 64);
          v8 -= 64;
        }
        while (v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          *(_DWORD *)(v3 + 8) = 0;
        }
        return WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCDataChannelHandler::checkState(void)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)a1 = &off_1E3362AA0;
  if (*(_BYTE *)(a1 + 64) && *(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  v3 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCDataChannelHandler::checkState(void)::$_0,void>::~CallableWrapper(void **this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *this = &off_1E3362AA0;
  if (*((_BYTE *)this + 64) && *((char *)this + 55) < 0)
    operator delete(this[4]);
  v3 = (unsigned int *)this[1];
  this[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree((WTF *)this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCDataChannelHandler::checkState(void)::$_0,void>::call(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;

  v1 = result[1];
  if (v1)
  {
    v2 = result;
    result = *(_QWORD **)(v1 + 8);
    if (result)
    {
      if (*((_BYTE *)v2 + 64) && *((_DWORD *)v2 + 6))
      {
        WebCore::toRTCError((WTF::StringImpl *)(v2 + 3), &v9);
        v3 = v9;
        if (!v9)
        {
          v3 = WTF::fastMalloc((WTF *)0x48);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          *(_DWORD *)(v3 + 8) = 1;
          *(_QWORD *)v3 = off_1E334F098;
          *(_BYTE *)(v3 + 12) = 0;
          v5 = v10;
          if (v10)
          {
            v6 = *(_DWORD *)v10;
            *(_DWORD *)v10 += 2;
            *(_QWORD *)(v3 + 16) = v5;
            *(_QWORD *)(v3 + 24) = 0;
            v10 = 0;
            if (v6)
              *(_DWORD *)v5 = v6;
            else
              WTF::StringImpl::destroy(v5, v4);
          }
          else
          {
            *(_QWORD *)(v3 + 16) = 0;
            *(_QWORD *)(v3 + 24) = 0;
          }
          *(_QWORD *)v3 = off_1E3360DF0;
          *(_BYTE *)(v3 + 32) = 0;
          *(_BYTE *)(v3 + 36) = 0;
          *(_BYTE *)(v3 + 40) = 0;
          *(_BYTE *)(v3 + 44) = 0;
          *(_BYTE *)(v3 + 48) = 0;
          *(_BYTE *)(v3 + 52) = 0;
          *(_BYTE *)(v3 + 56) = 0;
          *(_BYTE *)(v3 + 60) = 0;
          *(_BYTE *)(v3 + 64) = 0;
        }
        v7 = *(_QWORD *)(v2[1] + 8);
        v10 = (WTF::StringImpl *)v3;
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v7 + 40))(v7, &v10);
        v8 = v10;
        v10 = 0;
        if (v8)
        {
          if (*((_DWORD *)v8 + 2) == 1)
            (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v8 + 8))(v8);
          else
            --*((_DWORD *)v8 + 2);
        }
        result = *(_QWORD **)(v2[1] + 8);
      }
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 16))(result, *((unsigned __int8 *)v2 + 16));
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCDataChannelHandler::OnMessage(webrtc::DataBuffer const&)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  rtc::CopyOnWriteBuffer *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E3362AC8;
  v3 = (rtc::CopyOnWriteBuffer *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    rtc::CopyOnWriteBuffer::~CopyOnWriteBuffer(v3);
    MEMORY[0x19AEA7644]();
  }
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCDataChannelHandler::OnMessage(webrtc::DataBuffer const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  rtc::CopyOnWriteBuffer *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E3362AC8;
  v3 = (rtc::CopyOnWriteBuffer *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    rtc::CopyOnWriteBuffer::~CopyOnWriteBuffer(v3);
    MEMORY[0x19AEA7644]();
  }
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::LibWebRTCDataChannelHandler::OnMessage(webrtc::DataBuffer const&)::$_0,void>::call(WTF::StringImpl *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;

  v1 = *((_QWORD *)result + 1);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *((_QWORD *)result + 2);
      if (*(_QWORD *)v3)
        v4 = *(_QWORD *)(*(_QWORD *)v3 + 16) + *(_QWORD *)(v3 + 8);
      else
        v4 = 0;
      if (*(_BYTE *)(v3 + 24))
      {
        return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 32))(v2, v4, *(_QWORD *)(v3 + 16));
      }
      else
      {
        WTF::String::fromUTF8();
        (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v2 + 24))(v2, &v6);
        result = v6;
        v6 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
          else
            *(_DWORD *)result -= 2;
        }
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCDataChannelHandler::OnBufferedAmountChange(unsigned long long)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E3362AF0;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCDataChannelHandler::OnBufferedAmountChange(unsigned long long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3362AF0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCDataChannelHandler::OnBufferedAmountChange(unsigned long long)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
      return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 48))(v2, *(_QWORD *)(result + 16));
  }
  return result;
}

unint64_t WTF::Vector<rtc::BufferT<unsigned char,false>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 24 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v9 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<rtc::BufferT<unsigned char,false>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<rtc::BufferT<unsigned char,false>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<rtc::BufferT<unsigned char,false>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  unsigned int v4;
  int v5;
  void *v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;

  if (*(unsigned int *)(result + 8) < a2)
  {
    if (a2 >= 0xAAAAAAB)
    {
      __break(0xC471u);
    }
    else
    {
      v2 = result;
      v3 = *(WTF **)result;
      v4 = *(_DWORD *)(result + 12);
      v5 = 24 * a2;
      result = WTF::fastMalloc((WTF *)(24 * a2));
      *(_DWORD *)(v2 + 8) = (v5 & 0xFFFFFFF8) / 0x18;
      *(_QWORD *)v2 = result;
      if (v4)
      {
        v7 = result;
        v8 = (WTF *)((char *)v3 + 24 * v4);
        v9 = v3;
        do
        {
          *(_OWORD *)v7 = *(_OWORD *)v9;
          v10 = *((_QWORD *)v9 + 2);
          *((_QWORD *)v9 + 2) = 0;
          *(_QWORD *)(v7 + 16) = v10;
          *(_QWORD *)v9 = 0;
          *((_QWORD *)v9 + 1) = 0;
          result = *((_QWORD *)v9 + 2);
          *((_QWORD *)v9 + 2) = 0;
          if (result)
            result = MEMORY[0x19AEA762C](result, 0x1000C8077774924);
          v9 = (WTF *)((char *)v9 + 24);
          v7 += 24;
        }
        while (v9 != v8);
      }
      if (v3)
      {
        if (*(WTF **)v2 == v3)
        {
          *(_QWORD *)v2 = 0;
          *(_DWORD *)(v2 + 8) = 0;
        }
        return WTF::fastFree(v3, v6);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCDtlsTransportBackendObserver::start(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  *a1 = &off_1E3362B18;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)(v3 + 8));
      v8 = *(unsigned int **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
      v11 = *(_QWORD *)(v3 + 16);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCDtlsTransportBackendObserver::start(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  *(_QWORD *)this = &off_1E3362B18;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)(v3 + 8));
      v8 = *(unsigned int **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
      v11 = *(_QWORD *)(v3 + 16);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

rtc::SSLCertChain *WTF::Detail::CallableWrapper<WebCore::LibWebRTCDtlsTransportBackendObserver::start(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  rtc::SSLCertChain *v7;
  uint64_t v8;
  rtc::SSLCertChain *result;
  WTF *v10;
  _OWORD v11[2];
  char v12;
  rtc::SSLCertChain *v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 8);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 16) + 48))(*(_QWORD *)(v2 + 16), v2);
  v3 = *(WTF **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v10 = v3;
  (*(void (**)(_OWORD *__return_ptr))(**(_QWORD **)(v2 + 16) + 40))(v11);
  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_QWORD *)v4 = &off_1E3362B40;
  *(_QWORD *)(v4 + 8) = v10;
  v5 = v11[0];
  v6 = v11[1];
  *(_BYTE *)(v4 + 48) = v12;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 32) = v6;
  v7 = v13;
  v13 = 0;
  *(_QWORD *)(v4 + 56) = v7;
  v14 = v4;
  WTF::callOnMainThread();
  v8 = v14;
  v14 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  result = v13;
  v13 = 0;
  if (result)
  {
    rtc::SSLCertChain::~SSLCertChain(result);
    return (rtc::SSLCertChain *)MEMORY[0x19AEA7644]();
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCDtlsTransportBackendObserver::start(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  rtc::SSLCertChain *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;

  *a1 = &off_1E3362B40;
  v3 = (rtc::SSLCertChain *)a1[7];
  a1[7] = 0;
  if (v3)
  {
    rtc::SSLCertChain::~SSLCertChain(v3);
    MEMORY[0x19AEA7644]();
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)(v4 + 8));
      v9 = *(unsigned int **)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      if (v9)
      {
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, v9);
          WTF::fastFree((WTF *)v9, a2);
        }
      }
      v12 = *(_QWORD *)(v4 + 16);
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCDtlsTransportBackendObserver::start(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  rtc::SSLCertChain *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1E3362B40;
  v3 = (rtc::SSLCertChain *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    rtc::SSLCertChain::~SSLCertChain(v3);
    MEMORY[0x19AEA7644]();
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)(v4 + 8));
      v9 = *(unsigned int **)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      if (v9)
      {
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, v9);
          WTF::fastFree((WTF *)v9, a2);
        }
      }
      v12 = *(_QWORD *)(v4 + 16);
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebCore::LibWebRTCDtlsTransportBackendObserver::start(void)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return WebCore::LibWebRTCDtlsTransportBackendObserver::updateState(*(WTF **)(a1 + 8), (int *)(a1 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCDtlsTransportBackendObserver::stop(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  v3 = a1[1];
  *a1 = &off_1E3362B68;
  a1[1] = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)(v3 + 8));
      v8 = *(unsigned int **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
      v11 = *(_QWORD *)(v3 + 16);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCDtlsTransportBackendObserver::stop(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3362B68;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)(v3 + 8));
      v8 = *(unsigned int **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
      v11 = *(_QWORD *)(v3 + 16);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCDtlsTransportBackendObserver::stop(void)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 16) + 56))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCDtlsTransportBackendObserver::OnStateChange(webrtc::DtlsTransportInformation)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  rtc::SSLCertChain *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;

  *a1 = &off_1E3362B90;
  v3 = (rtc::SSLCertChain *)a1[7];
  a1[7] = 0;
  if (v3)
  {
    rtc::SSLCertChain::~SSLCertChain(v3);
    MEMORY[0x19AEA7644]();
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)(v4 + 8));
      v9 = *(unsigned int **)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      if (v9)
      {
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, v9);
          WTF::fastFree((WTF *)v9, a2);
        }
      }
      v12 = *(_QWORD *)(v4 + 16);
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCDtlsTransportBackendObserver::OnStateChange(webrtc::DtlsTransportInformation)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  rtc::SSLCertChain *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;

  *(_QWORD *)this = &off_1E3362B90;
  v3 = (rtc::SSLCertChain *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    rtc::SSLCertChain::~SSLCertChain(v3);
    MEMORY[0x19AEA7644]();
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, (unsigned int *)(v4 + 8));
      v9 = *(unsigned int **)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      if (v9)
      {
        do
        {
          v10 = __ldaxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
        {
          atomic_store(1u, v9);
          WTF::fastFree((WTF *)v9, a2);
        }
      }
      v12 = *(_QWORD *)(v4 + 16);
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF *WTF::Detail::CallableWrapper<WebCore::LibWebRTCDtlsTransportBackendObserver::OnStateChange(webrtc::DtlsTransportInformation)::$_0,void>::call(uint64_t a1)
{
  return WebCore::LibWebRTCDtlsTransportBackendObserver::updateState(*(WTF **)(a1 + 8), (int *)(a1 + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCDtlsTransportBackendObserver::OnError(webrtc::RTCError)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  v3 = a1[1];
  *a1 = &off_1E3362BB8;
  a1[1] = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)(v3 + 8));
      v8 = *(unsigned int **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
      v11 = *(_QWORD *)(v3 + 16);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCDtlsTransportBackendObserver::OnError(webrtc::RTCError)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3362BB8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)(v3 + 8));
      v8 = *(unsigned int **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
      v11 = *(_QWORD *)(v3 + 16);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCDtlsTransportBackendObserver::OnError(webrtc::RTCError)::$_0,void>::call(_QWORD *result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result[1] + 24);
  if (v1)
  {
    result = *(_QWORD **)(v1 + 8);
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 24))(result);
  }
  return result;
}

uint64_t sigslot::has_slots<sigslot::single_threaded>::do_signal_connect(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = result;
  v5 = (uint64_t *)(result + 40);
  v4 = *(uint64_t **)(result + 40);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = v4;
        v7 = v4[4];
        if (v7 <= a2)
          break;
        v4 = (uint64_t *)*v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (v7 >= a2)
        break;
      v4 = (uint64_t *)v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v6 = (uint64_t *)(result + 40);
LABEL_9:
    v8 = operator new(0x28uLL);
    v8[4] = a2;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = v6;
    *v5 = (uint64_t)v8;
    v9 = **(_QWORD **)(v3 + 32);
    if (v9)
    {
      *(_QWORD *)(v3 + 32) = v9;
      v10 = *v5;
    }
    else
    {
      v10 = (uint64_t)v8;
    }
    result = std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(*(_QWORD *)(v3 + 40), v10);
    ++*(_QWORD *)(v3 + 48);
  }
  return result;
}

void sigslot::has_slots<sigslot::single_threaded>::do_signal_disconnect(_QWORD *a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;

  v4 = a1 + 5;
  v3 = (uint64_t *)a1[5];
  if (v3)
  {
    v5 = v4;
    v6 = v3;
    do
    {
      v7 = v6[4];
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (uint64_t **)v6;
      else
        v9 = (uint64_t **)(v6 + 1);
      if (v8)
        v5 = v6;
      v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && v5[4] <= a2)
    {
      v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        v12 = v5;
        do
        {
          v11 = (uint64_t *)v12[2];
          v13 = *v11 == (_QWORD)v12;
          v12 = v11;
        }
        while (!v13);
      }
      if ((uint64_t *)a1[4] == v5)
        a1[4] = v11;
      --a1[6];
      std::__tree_remove[abi:sn180100]<std::__tree_node_base<void *> *>(v3, v5);
      operator delete(v5);
    }
  }
}

void sigslot::has_slots<sigslot::single_threaded>::do_disconnect_all(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  _QWORD v10[2];

  v1 = a1[6];
  if (v1)
  {
    v3 = a1 + 5;
    do
    {
      v5 = (_QWORD *)a1[4];
      v10[0] = a1[5];
      v4 = (_QWORD *)v10[0];
      a1[5] = 0;
      a1[6] = 0;
      v10[1] = v1;
      v4[2] = v10;
      a1[4] = v3;
      if (v5 != v10)
      {
        do
        {
          v6 = (_QWORD *)v5[1];
          v7 = v5;
          if (v6)
          {
            do
            {
              v8 = v6;
              v6 = (_QWORD *)*v6;
            }
            while (v6);
          }
          else
          {
            do
            {
              v8 = (_QWORD *)v7[2];
              v9 = *v8 == (_QWORD)v7;
              v7 = v8;
            }
            while (!v9);
          }
          (*(void (**)(void))v5[4])();
          v5 = v8;
        }
        while (v8 != v10);
        v4 = (_QWORD *)v10[0];
      }
      std::__tree<sigslot::_signal_base_interface *>::destroy(v4);
      v1 = a1[6];
    }
    while (v1);
  }
}

uint64_t sigslot::has_slots<sigslot::single_threaded>::~has_slots(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3362BE0;
  (*(void (**)(void))(a1 + 24))();
  std::__tree<sigslot::_signal_base_interface *>::destroy(*(_QWORD **)(a1 + 40));
  return a1;
}

void sigslot::has_slots<sigslot::single_threaded>::~has_slots(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E3362BE0;
  (*(void (**)(void))(a1 + 24))();
  std::__tree<sigslot::_signal_base_interface *>::destroy(*(_QWORD **)(a1 + 40));
  JUMPOUT(0x19AEA7644);
}

void std::__tree<sigslot::_signal_base_interface *>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<sigslot::_signal_base_interface *>::destroy(*a1);
    std::__tree<sigslot::_signal_base_interface *>::destroy(a1[1]);
    operator delete(a1);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCIceTransportBackendObserver::start(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;

  *a1 = &off_1E3362C00;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 56);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)(v3 + 56));
      v8 = *(unsigned int **)(v3 + 72);
      *(_QWORD *)(v3 + 72) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
      v11 = *(_QWORD *)(v3 + 64);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      *(_QWORD *)v3 = &off_1E3362BE0;
      (*(void (**)(uint64_t))(v3 + 24))(v3);
      std::__tree<sigslot::_signal_base_interface *>::destroy(*(_QWORD **)(v3 + 40));
      WTF::fastFree((WTF *)v3, v12);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCIceTransportBackendObserver::start(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;

  *(_QWORD *)this = &off_1E3362C00;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 56);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)(v3 + 56));
      v8 = *(unsigned int **)(v3 + 72);
      *(_QWORD *)(v3 + 72) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
      v11 = *(_QWORD *)(v3 + 64);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      *(_QWORD *)v3 = &off_1E3362BE0;
      (*(void (**)(uint64_t))(v3 + 24))(v3);
      std::__tree<sigslot::_signal_base_interface *>::destroy(*(_QWORD **)(v3 + 40));
      WTF::fastFree((WTF *)v3, v12);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::LibWebRTCIceTransportBackendObserver::start(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  _QWORD *v16;
  unsigned int *v17;
  unsigned int v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _BYTE v23[432];
  _BYTE v24[432];
  char v25;
  _QWORD v26[4];

  v1 = *(_QWORD *)(a1 + 8);
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 64) + 32))(*(_QWORD *)(v1 + 64));
  if (v2)
  {
    v3 = (_QWORD *)v2;
    v4 = v2 + 632;
    v5 = v2 + 648;
    v6 = operator new(0x30uLL);
    v6[3] = v1;
    v6[4] = WebCore::LibWebRTCIceTransportBackendObserver::onIceTransportStateChanged;
    v6[5] = 0;
    v6[1] = v5;
    v6[2] = sigslot::_opaque_connection::emitter<WebCore::LibWebRTCIceTransportBackendObserver,cricket::IceTransportInternal *>;
    v7 = v3[81];
    *v6 = v7;
    *(_QWORD *)(v7 + 8) = v6;
    v3[81] = v6;
    ++v3[83];
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v1, v4);
    v26[0] = v1;
    v26[2] = absl::internal_any_invocable::LocalManagerTrivial;
    v26[3] = absl::internal_any_invocable::LocalInvoker<false,void,WebCore::LibWebRTCIceTransportBackendObserver::start(void)::$_0::operator()(void)::{lambda(false *)#1} &,cricket::IceTransportInternal *>;
    cricket::IceTransportInternal::AddGatheringStateCallback();
    absl::internal_any_invocable::LocalManagerTrivial(1, (__n128 *)v26, (__n128 *)v26);
    v8 = operator new(0x30uLL);
    v8[3] = v1;
    v8[4] = WebCore::LibWebRTCIceTransportBackendObserver::onNetworkRouteChanged;
    v8[5] = 0;
    v8[1] = v3 + 37;
    v8[2] = sigslot::_opaque_connection::emitter<WebCore::LibWebRTCIceTransportBackendObserver,std::optional<rtc::NetworkRoute>>;
    v9 = v3[37];
    *v8 = v9;
    *(_QWORD *)(v9 + 8) = v8;
    v3[37] = v8;
    ++v3[39];
    (*(void (**)(uint64_t, _QWORD *))(v1 + 8))(v1, v3 + 35);
    v10 = (*(uint64_t (**)(_QWORD *))(*v3 + 88))(v3);
    v11 = v10;
    if (v10 >= 2 && v10 != 6)
    {
      v13 = (unsigned int *)(v1 + 56);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
      v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v15 = &off_1E3362C28;
      v15[1] = v1;
      v22 = v15;
      WTF::callOnMainThread();
      v16 = v22;
      v22 = 0;
      if (v16)
        (*(void (**)(_QWORD *))(*v16 + 8))(v16);
    }
    v17 = (unsigned int *)(v1 + 56);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
    v19 = v11 | (unint64_t)((*(uint64_t (**)(_QWORD *))(*v3 + 208))(v3) << 32);
    v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v20 = &off_1E3362C50;
    v20[1] = v1;
    v20[2] = v19;
    v22 = v20;
    WTF::callOnMainThread();
    v21 = v22;
    v22 = 0;
    if (v21)
      (*(void (**)(_QWORD *))(*v21 + 8))(v21);
    (*(void (**)(_QWORD **__return_ptr, _QWORD *))(*v3 + 240))(&v22, v3);
    if (v25)
    {
      WebCore::LibWebRTCIceTransportBackendObserver::processSelectedCandidatePairChanged((WebCore::LibWebRTCIceTransportBackendObserver *)v1, (const cricket::Candidate *)v23, (const cricket::Candidate *)v24);
      if (v25)
      {
        MEMORY[0x19AEA5EBC](v24);
        MEMORY[0x19AEA5EBC](v23);
      }
    }
  }
}

uint64_t sigslot::_opaque_connection::emitter<WebCore::LibWebRTCIceTransportBackendObserver,cricket::IceTransportInternal *>(_QWORD *a1)
{
  uint64_t (*v1)(_QWORD *);
  uint64_t v2;
  _QWORD *v3;

  v1 = (uint64_t (*)(_QWORD *))a1[2];
  v2 = a1[3];
  v3 = (_QWORD *)(a1[1] + (v2 >> 1));
  if ((v2 & 1) != 0)
    v1 = *(uint64_t (**)(_QWORD *))(*v3 + v1);
  return v1(v3);
}

uint64_t absl::internal_any_invocable::LocalInvoker<false,void,WebCore::LibWebRTCIceTransportBackendObserver::start(void)::$_0::operator()(void)::{lambda(false *)#1} &,cricket::IceTransportInternal *>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v2 = *a1;
  v3 = (unsigned int *)(*a1 + 56);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 208))(a2);
  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v6 = &off_1E3362CC8;
  *(_QWORD *)(v6 + 8) = v2;
  *(_DWORD *)(v6 + 16) = v5;
  v8 = v6;
  WTF::callOnMainThread();
  result = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

__n128 absl::internal_any_invocable::LocalManagerTrivial(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a2;
  *a3 = *a2;
  return result;
}

uint64_t sigslot::_opaque_connection::emitter<WebCore::LibWebRTCIceTransportBackendObserver,std::optional<rtc::NetworkRoute>>(_QWORD *a1, uint64_t a2)
{
  uint64_t (*v2)(_QWORD *, _OWORD *);
  uint64_t v3;
  _QWORD *v4;
  __int128 v5;
  _OWORD v7[2];
  uint64_t v8;

  v2 = (uint64_t (*)(_QWORD *, _OWORD *))a1[2];
  v3 = a1[3];
  v4 = (_QWORD *)(a1[1] + (v3 >> 1));
  if ((v3 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *, _OWORD *))(*v4 + v2);
  v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  v8 = *(_QWORD *)(a2 + 32);
  return v2(v4, v7);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCIceTransportBackendObserver::start(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;

  v3 = a1[1];
  *a1 = &off_1E3362C28;
  a1[1] = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 56);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)(v3 + 56));
      v8 = *(unsigned int **)(v3 + 72);
      *(_QWORD *)(v3 + 72) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
      v11 = *(_QWORD *)(v3 + 64);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      *(_QWORD *)v3 = &off_1E3362BE0;
      (*(void (**)(uint64_t))(v3 + 24))(v3);
      std::__tree<sigslot::_signal_base_interface *>::destroy(*(_QWORD **)(v3 + 40));
      WTF::fastFree((WTF *)v3, v12);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCIceTransportBackendObserver::start(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3362C28;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 56);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)(v3 + 56));
      v8 = *(unsigned int **)(v3 + 72);
      *(_QWORD *)(v3 + 72) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
      v11 = *(_QWORD *)(v3 + 64);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      *(_QWORD *)v3 = &off_1E3362BE0;
      (*(void (**)(uint64_t))(v3 + 24))(v3);
      std::__tree<sigslot::_signal_base_interface *>::destroy(*(_QWORD **)(v3 + 40));
      WTF::fastFree((WTF *)v3, v12);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCIceTransportBackendObserver::start(void)::$_0::operator()(void)::{lambda(void)#1},void>::call(_QWORD *result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result[1] + 72);
  if (v1)
  {
    result = *(_QWORD **)(v1 + 8);
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*result + 16))(result, 1);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCIceTransportBackendObserver::start(void)::$_0::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;

  v3 = a1[1];
  *a1 = &off_1E3362C50;
  a1[1] = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 56);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)(v3 + 56));
      v8 = *(unsigned int **)(v3 + 72);
      *(_QWORD *)(v3 + 72) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
      v11 = *(_QWORD *)(v3 + 64);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      *(_QWORD *)v3 = &off_1E3362BE0;
      (*(void (**)(uint64_t))(v3 + 24))(v3);
      std::__tree<sigslot::_signal_base_interface *>::destroy(*(_QWORD **)(v3 + 40));
      WTF::fastFree((WTF *)v3, v12);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCIceTransportBackendObserver::start(void)::$_0::operator()(void)::{lambda(void)#2},void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3362C50;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 56);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)(v3 + 56));
      v8 = *(unsigned int **)(v3 + 72);
      *(_QWORD *)(v3 + 72) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
      v11 = *(_QWORD *)(v3 + 64);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      *(_QWORD *)v3 = &off_1E3362BE0;
      (*(void (**)(uint64_t))(v3 + 24))(v3);
      std::__tree<sigslot::_signal_base_interface *>::destroy(*(_QWORD **)(v3 + 40));
      WTF::fastFree((WTF *)v3, v12);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCIceTransportBackendObserver::start(void)::$_0::operator()(void)::{lambda(void)#2},void>::call(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(result[1] + 72);
  if (v1)
  {
    v2 = result;
    result = *(_QWORD **)(v1 + 8);
    if (result)
    {
      if (*((_DWORD *)v2 + 4) >= 7u
        || (((*(void (**)(_QWORD *))(*result + 16))(result), (v3 = *(_QWORD *)(v2[1] + 72)) == 0)
          ? (v4 = 0)
          : (v4 = *(_QWORD *)(v3 + 8)),
            *((_DWORD *)v2 + 5) >= 3u))
      {
        __break(0xC471u);
        JUMPOUT(0x1954B6514);
      }
      return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCIceTransportBackendObserver::stop(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;

  *a1 = &off_1E3362C78;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 56);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)(v3 + 56));
      v8 = *(unsigned int **)(v3 + 72);
      *(_QWORD *)(v3 + 72) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
      v11 = *(_QWORD *)(v3 + 64);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      *(_QWORD *)v3 = &off_1E3362BE0;
      (*(void (**)(uint64_t))(v3 + 24))(v3);
      std::__tree<sigslot::_signal_base_interface *>::destroy(*(_QWORD **)(v3 + 40));
      WTF::fastFree((WTF *)v3, v12);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCIceTransportBackendObserver::stop(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;

  *(_QWORD *)this = &off_1E3362C78;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 56);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)(v3 + 56));
      v8 = *(unsigned int **)(v3 + 72);
      *(_QWORD *)(v3 + 72) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
      v11 = *(_QWORD *)(v3 + 64);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      *(_QWORD *)v3 = &off_1E3362BE0;
      (*(void (**)(uint64_t))(v3 + 24))(v3);
      std::__tree<sigslot::_signal_base_interface *>::destroy(*(_QWORD **)(v3 + 40));
      WTF::fastFree((WTF *)v3, v12);
    }
  }
  return WTF::fastFree(this, a2);
}

cricket::IceTransportInternal *WTF::Detail::CallableWrapper<WebCore::LibWebRTCIceTransportBackendObserver::stop(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  cricket::IceTransportInternal *result;
  cricket::IceTransportInternal *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  v1 = *(_QWORD *)(a1 + 8);
  result = (cricket::IceTransportInternal *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 64) + 32))(*(_QWORD *)(v1 + 64));
  if (result)
  {
    v3 = result;
    v4 = (uint64_t *)*((_QWORD *)result + 82);
    if (v4 != (uint64_t *)((char *)result + 648))
    {
      while (v4[3] != v1)
      {
        v4 = (uint64_t *)v4[1];
        if (v4 == (uint64_t *)((char *)result + 648))
          goto LABEL_9;
      }
      v5 = (uint64_t *)*((_QWORD *)result + 84);
      v6 = *v4;
      v7 = v4[1];
      *(_QWORD *)(v6 + 8) = v7;
      *(_QWORD *)v4[1] = v6;
      --*((_QWORD *)result + 83);
      operator delete(v4);
      if (v5 == v4)
        *((_QWORD *)v3 + 84) = v7;
      (*(void (**)(uint64_t, _QWORD *))(v1 + 16))(v1, (_QWORD *)v3 + 79);
    }
LABEL_9:
    result = (cricket::IceTransportInternal *)cricket::IceTransportInternal::RemoveGatheringStateCallback(v3, (const void *)v1);
    v8 = (uint64_t *)*((_QWORD *)v3 + 38);
    if (v8 != (uint64_t *)((char *)v3 + 296))
    {
      while (v8[3] != v1)
      {
        v8 = (uint64_t *)v8[1];
        if (v8 == (uint64_t *)((char *)v3 + 296))
          return result;
      }
      v9 = *v8;
      v10 = v8[1];
      *(_QWORD *)(v9 + 8) = v10;
      *(_QWORD *)v8[1] = v9;
      v11 = (uint64_t *)*((_QWORD *)v3 + 40);
      --*((_QWORD *)v3 + 39);
      operator delete(v8);
      if (v11 == v8)
        *((_QWORD *)v3 + 40) = v10;
      return (cricket::IceTransportInternal *)(*(uint64_t (**)(uint64_t, _QWORD *))(v1 + 16))(v1, (_QWORD *)v3 + 35);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCIceTransportBackendObserver::onIceTransportStateChanged(cricket::IceTransportInternal *)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;

  v3 = a1[1];
  *a1 = &off_1E3362CA0;
  a1[1] = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 56);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)(v3 + 56));
      v8 = *(unsigned int **)(v3 + 72);
      *(_QWORD *)(v3 + 72) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
      v11 = *(_QWORD *)(v3 + 64);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      *(_QWORD *)v3 = &off_1E3362BE0;
      (*(void (**)(uint64_t))(v3 + 24))(v3);
      std::__tree<sigslot::_signal_base_interface *>::destroy(*(_QWORD **)(v3 + 40));
      WTF::fastFree((WTF *)v3, v12);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCIceTransportBackendObserver::onIceTransportStateChanged(cricket::IceTransportInternal *)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3362CA0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 56);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)(v3 + 56));
      v8 = *(unsigned int **)(v3 + 72);
      *(_QWORD *)(v3 + 72) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
      v11 = *(_QWORD *)(v3 + 64);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      *(_QWORD *)v3 = &off_1E3362BE0;
      (*(void (**)(uint64_t))(v3 + 24))(v3);
      std::__tree<sigslot::_signal_base_interface *>::destroy(*(_QWORD **)(v3 + 40));
      WTF::fastFree((WTF *)v3, v12);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCIceTransportBackendObserver::onIceTransportStateChanged(cricket::IceTransportInternal *)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 72);
  if (v1)
  {
    v2 = result;
    result = *(_QWORD *)(v1 + 8);
    if (result)
    {
      if (*(_DWORD *)(v2 + 16) >= 7u)
      {
        result = 64;
        __break(0xC471u);
      }
      else
      {
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCIceTransportBackendObserver::onGatheringStateChanged(cricket::IceTransportInternal *)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;

  v3 = a1[1];
  *a1 = &off_1E3362CC8;
  a1[1] = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 56);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)(v3 + 56));
      v8 = *(unsigned int **)(v3 + 72);
      *(_QWORD *)(v3 + 72) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
      v11 = *(_QWORD *)(v3 + 64);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      *(_QWORD *)v3 = &off_1E3362BE0;
      (*(void (**)(uint64_t))(v3 + 24))(v3);
      std::__tree<sigslot::_signal_base_interface *>::destroy(*(_QWORD **)(v3 + 40));
      WTF::fastFree((WTF *)v3, v12);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCIceTransportBackendObserver::onGatheringStateChanged(cricket::IceTransportInternal *)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3362CC8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 56);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)(v3 + 56));
      v8 = *(unsigned int **)(v3 + 72);
      *(_QWORD *)(v3 + 72) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
      v11 = *(_QWORD *)(v3 + 64);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      *(_QWORD *)v3 = &off_1E3362BE0;
      (*(void (**)(uint64_t))(v3 + 24))(v3);
      std::__tree<sigslot::_signal_base_interface *>::destroy(*(_QWORD **)(v3 + 40));
      WTF::fastFree((WTF *)v3, v12);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCIceTransportBackendObserver::onGatheringStateChanged(cricket::IceTransportInternal *)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 72);
  if (v1)
  {
    v2 = result;
    result = *(_QWORD *)(v1 + 8);
    if (result)
    {
      if (*(_DWORD *)(v2 + 16) >= 3u)
      {
        result = 78;
        __break(0xC471u);
      }
      else
      {
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCIceTransportBackendObserver::processSelectedCandidatePairChanged(cricket::Candidate const&,cricket::Candidate const&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E3362CF0;
  WebCore::LibWebRTCIceTransportBackendObserver::processSelectedCandidatePairChanged(cricket::Candidate const&,cricket::Candidate const&)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCIceTransportBackendObserver::processSelectedCandidatePairChanged(cricket::Candidate const&,cricket::Candidate const&)::$_0,void>::~CallableWrapper(uint64_t *a1, WTF::StringImpl *a2)
{
  void *v3;

  *a1 = (uint64_t)off_1E3362CF0;
  WebCore::LibWebRTCIceTransportBackendObserver::processSelectedCandidatePairChanged(cricket::Candidate const&,cricket::Candidate const&)::$_0::~$_0(a1 + 1, a2);
  return WTF::fastFree((WTF *)a1, v3);
}

WebCore::RTCIceCandidate *WTF::Detail::CallableWrapper<WebCore::LibWebRTCIceTransportBackendObserver::processSelectedCandidatePairChanged(cricket::Candidate const&,cricket::Candidate const&)::$_0,void>::call(WebCore::RTCIceCandidate *result)
{
  uint64_t v1;
  WebCore::RTCIceCandidate *v2;
  uint64_t v3;
  WebCore::RTCIceCandidate *v4;
  _DWORD *v5;
  _DWORD **v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WebCore::RTCIceCandidate *v25;
  bmalloc::api *v26;
  void *v27;
  bmalloc::api *v28;
  void *v29;
  WebCore::RTCIceCandidate *v30;
  WebCore::RTCIceCandidate *v31;

  v1 = *(_QWORD *)(*((_QWORD *)result + 1) + 72);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v2 = result;
    v3 = bmalloc::api::isoAllocate();
    v4 = (WebCore::RTCIceCandidate *)v3;
    *(_DWORD *)v3 = 1;
    *(_QWORD *)(v3 + 8) = 0;
    v5 = (_DWORD *)*((_QWORD *)v2 + 2);
    if (v5)
      *v5 += 2;
    *(_QWORD *)(v3 + 16) = v5;
    v6 = (_DWORD **)MEMORY[0x1E0CBF738];
    v7 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v7 += 2;
    *(_QWORD *)(v3 + 24) = v7;
    *(_DWORD *)(v3 + 32) = 0;
    v8 = *((_QWORD *)v2 + 4);
    *((_QWORD *)v2 + 4) = 0;
    *(_QWORD *)(v3 + 40) = v8;
    v9 = *((_QWORD *)v2 + 5);
    *(_QWORD *)(v3 + 53) = *(_QWORD *)((char *)v2 + 45);
    *(_QWORD *)(v3 + 48) = v9;
    v10 = *((_QWORD *)v2 + 7);
    *((_QWORD *)v2 + 7) = 0;
    *(_QWORD *)(v3 + 64) = v10;
    v11 = *((_OWORD *)v2 + 4);
    *(_OWORD *)(v3 + 81) = *(_OWORD *)((char *)v2 + 73);
    *(_OWORD *)(v3 + 72) = v11;
    v12 = *((_QWORD *)v2 + 12);
    *((_QWORD *)v2 + 12) = 0;
    *(_QWORD *)(v3 + 104) = v12;
    *(_DWORD *)(v3 + 112) = *((_DWORD *)v2 + 26);
    v13 = *((_QWORD *)v2 + 14);
    *((_QWORD *)v2 + 14) = 0;
    *(_QWORD *)(v3 + 120) = v13;
    v14 = bmalloc::api::isoAllocate();
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = 0;
    v15 = (_DWORD *)*((_QWORD *)v2 + 3);
    if (v15)
      *v15 += 2;
    *(_QWORD *)(v14 + 16) = v15;
    v16 = *v6;
    if (*v6)
      *v16 += 2;
    *(_QWORD *)(v14 + 24) = v16;
    *(_DWORD *)(v14 + 32) = 0;
    v17 = *((_QWORD *)v2 + 15);
    *((_QWORD *)v2 + 15) = 0;
    *(_QWORD *)(v14 + 40) = v17;
    v18 = *((_QWORD *)v2 + 16);
    *(_QWORD *)(v14 + 53) = *(_QWORD *)((char *)v2 + 133);
    *(_QWORD *)(v14 + 48) = v18;
    v19 = *((_QWORD *)v2 + 18);
    *((_QWORD *)v2 + 18) = 0;
    *(_QWORD *)(v14 + 64) = v19;
    v20 = *(_OWORD *)((char *)v2 + 152);
    *(_OWORD *)(v14 + 81) = *(_OWORD *)((char *)v2 + 161);
    *(_OWORD *)(v14 + 72) = v20;
    v21 = *((_QWORD *)v2 + 23);
    *((_QWORD *)v2 + 23) = 0;
    *(_QWORD *)(v14 + 104) = v21;
    *(_DWORD *)(v14 + 112) = *((_DWORD *)v2 + 48);
    v22 = *((_QWORD *)v2 + 25);
    *((_QWORD *)v2 + 25) = 0;
    *(_QWORD *)(v14 + 120) = v22;
    v23 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v2 + 1) + 72) + 8);
    v30 = (WebCore::RTCIceCandidate *)v14;
    v31 = v4;
    (*(void (**)(uint64_t, WebCore::RTCIceCandidate **, WebCore::RTCIceCandidate **))(*(_QWORD *)v23 + 32))(v23, &v31, &v30);
    v25 = v30;
    v30 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 1)
      {
        WebCore::RTCIceCandidate::~RTCIceCandidate(v25, v24);
        bmalloc::api::isoDeallocate(v26, v27);
      }
      else
      {
        --*(_DWORD *)v25;
      }
    }
    result = v31;
    v31 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::RTCIceCandidate::~RTCIceCandidate(result, v24);
        return (WebCore::RTCIceCandidate *)bmalloc::api::isoDeallocate(v28, v29);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  return result;
}

uint64_t WebCore::LibWebRTCMediaEndpoint::gatherStatsForLogging(WebCore::LibWebRTCMediaEndpoint *this)
{
  return (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 6) + 160))(*((_QWORD *)this + 6), (char *)this + 16);
}

uint64_t WebCore::LibWebRTCRtpSenderBackend::setSource(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  int v12;
  _QWORD *v13;

  v2 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v2 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    JUMPOUT(0x1954B7000);
  }
  v5 = (_QWORD *)(a1 + 32);
  v11 = &v13;
  ((void (*)(_QWORD **, uint64_t))off_1E3363830[v2])(&v11, a1 + 32);
  v6 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v6 != -1)
  {
    if (!(_DWORD)v6)
    {
      *v5 = 0;
      goto LABEL_7;
    }
    ((void (*)(_QWORD **, _QWORD *))off_1E3363330[v6])(&v11, v5);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
LABEL_7:
  LOBYTE(v11) = 0;
  v12 = -1;
  v7 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v7 == -1)
  {
    LODWORD(v7) = -1;
  }
  else
  {
    ((void (*)(_QWORD **, _QWORD **, uint64_t))off_1E3363398[v7])(&v13, &v11, a2);
    v12 = v7;
    v8 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v8 != -1)
    {
      if (!(_DWORD)v8)
      {
        *(_QWORD *)a2 = 0;
        goto LABEL_14;
      }
      ((void (*)(_QWORD **, uint64_t))off_1E3363330[v8])(&v13, a2);
      LODWORD(v7) = v12;
    }
  }
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
LABEL_14:
  v9 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v9 == -1)
  {
    if ((_DWORD)v7 == -1)
      goto LABEL_19;
  }
  else if ((_DWORD)v7 == -1)
  {
    ((void (*)(_QWORD **, _QWORD *))off_1E3363330[v9])(&v13, v5);
    *(_DWORD *)(a1 + 40) = -1;
    goto LABEL_19;
  }
  v13 = v5;
  ((void (*)(_QWORD **, _QWORD *, _QWORD **))off_1E33633C8[v7])(&v13, v5, &v11);
LABEL_19:
  if (v12 != -1)
    ((void (*)(_QWORD **, _QWORD **))off_1E3363330[v12])(&v13, &v11);
  return WebCore::LibWebRTCRtpSenderBackend::startSource((WebCore::LibWebRTCRtpSenderBackend *)a1);
}

uint64_t WebCore::LibWebRTCMediaEndpoint::mediaStreamFromRTCStreamId(WTF **this, WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  unsigned int v8;
  WTF *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  WTF::StringImpl *v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  WTF *v23;
  WTF::StringImpl **v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  WebCore::MediaStream **v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  WTF::StringImpl *v31;
  WebCore::MediaStream *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WebCore::MediaStream *v35;
  WebCore::MediaStream *v36;
  WTF::StringImpl *v37;
  WebCore::MediaStream *v38;
  bmalloc::api *v39;
  void *v40;
  bmalloc::api *v41;
  void *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  WebCore::MediaStream *v48;
  WebCore::MediaStream *v49;
  WTF::StringImpl *v50;
  bmalloc::api *v51;
  void *v52;
  bmalloc::api *v53;
  void *v54;
  unsigned int v55;
  int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t v60;
  WTF *v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  unsigned int v64;
  unsigned int v65;
  int v66;
  unsigned int v67;
  char v68;
  WebCore::LibWebRTCMediaEndpoint *v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  uint64_t v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  unsigned int v78;
  int v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  uint64_t v82;
  WebCore::MediaStream *v83;
  bmalloc::api *v85;
  void *v86;
  WTF::StringImpl *v87;
  WTF *v88;
  uint64_t v89;
  uint64_t v91;
  WebCore::LibWebRTCMediaEndpoint *v92;
  _QWORD v93[2];

  v4 = *a2;
  if (*a2)
    *(_DWORD *)v4 += 2;
  v93[0] = v4;
  v93[1] = this;
  v6 = *((unsigned int *)this + 28);
  v5 = *((unsigned int *)this + 29);
  v92 = (WebCore::LibWebRTCMediaEndpoint *)this;
  v87 = v4;
  if (10 * v5 >= (unint64_t)(9 * v6)
    || (v6 <= 2 * (int)v5 ? (v7 = *((_BYTE *)this + 124) == 0) : (v7 = 1), !v7))
  {
    if ((_DWORD)v6)
      v8 = 2 * v6;
    else
      v8 = 8;
    v9 = this[13];
    v10 = WTF::fastZeroedMalloc((WTF *)(16 * v8));
    this = (WTF **)v92;
    *((_QWORD *)v92 + 13) = v10;
    *((_DWORD *)v92 + 28) = v8;
    v11 = (~(v10 << 32) + v10) ^ ((unint64_t)(~(v10 << 32) + v10) >> 22);
    v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
    v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
    *((_DWORD *)v92 + 30) = (v13 >> 31) ^ v13;
    *((_BYTE *)v92 + 124) = 0;
    if ((_DWORD)v6)
    {
      v14 = 0;
      v88 = v9;
      v89 = v6;
      do
      {
        v15 = (char *)v9 + 16 * v14;
        v16 = *(WTF::StringImpl **)v15;
        if (*(_QWORD *)v15)
        {
          v17 = *((_DWORD *)this + 28);
          v18 = *((_DWORD *)this + 30);
          v19 = *((_DWORD *)v16 + 4);
          v91 = v14;
          if (v19 < 0x100)
          {
            v20 = WTF::StringImpl::hashSlowCase(v16);
            this = (WTF **)v92;
          }
          else
          {
            v20 = v19 >> 8;
          }
          v21 = v17 - 1;
          v22 = (v20 ^ v18) & (v17 - 1);
          v23 = this[13];
          v24 = (WTF::StringImpl **)((char *)v23 + 16 * v22);
          v25 = *v24;
          if (*v24)
          {
            v26 = 0;
            v27 = (WebCore::MediaStream **)((char *)v9 + 16 * v91 + 8);
            do
            {
              v28 = *((_DWORD *)v25 + 4);
              if (v28 < 0x100)
              {
                v29 = WTF::StringImpl::hashSlowCase(v25);
                this = (WTF **)v92;
              }
              else
              {
                v29 = v28 >> 8;
              }
              v30 = (v22 + v17 - ((v29 ^ v18) & v21)) & v21;
              if (v26 > v30)
              {
                v31 = *(WTF::StringImpl **)v15;
                v32 = *v27;
                *(_QWORD *)v15 = 0;
                *((_QWORD *)v15 + 1) = 0;
                v33 = *v24;
                *v24 = 0;
                v34 = *(WTF::StringImpl **)v15;
                *(_QWORD *)v15 = v33;
                if (v34)
                {
                  if (*(_DWORD *)v34 == 2)
                  {
                    WTF::StringImpl::destroy(v34, (WTF::StringImpl *)a2);
                    this = (WTF **)v92;
                  }
                  else
                  {
                    *(_DWORD *)v34 -= 2;
                  }
                }
                v35 = v24[1];
                v24[1] = 0;
                v36 = *v27;
                *v27 = v35;
                if (v36)
                {
                  if (*((_DWORD *)v36 + 22) == 1)
                  {
                    WebCore::MediaStream::~MediaStream(v36);
                    bmalloc::api::isoDeallocate(v39, v40);
                    this = (WTF **)v92;
                  }
                  else
                  {
                    --*((_DWORD *)v36 + 22);
                  }
                }
                v37 = *v24;
                *v24 = v31;
                if (v37)
                {
                  if (*(_DWORD *)v37 == 2)
                  {
                    WTF::StringImpl::destroy(v37, (WTF::StringImpl *)a2);
                    this = (WTF **)v92;
                  }
                  else
                  {
                    *(_DWORD *)v37 -= 2;
                  }
                }
                v38 = v24[1];
                v24[1] = v32;
                if (v38)
                {
                  if (*((_DWORD *)v38 + 22) == 1)
                  {
                    WebCore::MediaStream::~MediaStream(v38);
                    bmalloc::api::isoDeallocate(v41, v42);
                    this = (WTF **)v92;
                  }
                  else
                  {
                    --*((_DWORD *)v38 + 22);
                  }
                }
                v26 = v30;
              }
              v22 = ((_DWORD)v22 + 1) & v21;
              ++v26;
              v23 = this[13];
              v24 = (WTF::StringImpl **)((char *)v23 + 16 * v22);
              v25 = *v24;
            }
            while (*v24);
            v9 = v88;
            v6 = v89;
          }
          v43 = *(WTF::StringImpl **)v15;
          *(_QWORD *)v15 = 0;
          v44 = *v24;
          *v24 = v43;
          v14 = v91;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
            {
              WTF::StringImpl::destroy(v44, (WTF::StringImpl *)a2);
              this = (WTF **)v92;
            }
            else
            {
              *(_DWORD *)v44 -= 2;
            }
          }
          v45 = (uint64_t)v23 + 16 * v22;
          v46 = (char *)v9 + 16 * v91;
          v47 = *((_QWORD *)v46 + 1);
          *((_QWORD *)v46 + 1) = 0;
          v48 = *(WebCore::MediaStream **)(v45 + 8);
          *(_QWORD *)(v45 + 8) = v47;
          if (v48)
          {
            if (*((_DWORD *)v48 + 22) == 1)
            {
              WebCore::MediaStream::~MediaStream(v48);
              bmalloc::api::isoDeallocate(v53, v54);
              this = (WTF **)v92;
            }
            else
            {
              --*((_DWORD *)v48 + 22);
            }
          }
        }
        v49 = (WebCore::MediaStream *)*((_QWORD *)v15 + 1);
        *((_QWORD *)v15 + 1) = 0;
        if (v49)
        {
          if (*((_DWORD *)v49 + 22) == 1)
          {
            WebCore::MediaStream::~MediaStream(v49);
            bmalloc::api::isoDeallocate(v51, v52);
            this = (WTF **)v92;
          }
          else
          {
            --*((_DWORD *)v49 + 22);
          }
        }
        v50 = *(WTF::StringImpl **)v15;
        *(_QWORD *)v15 = 0;
        if (v50)
        {
          if (*(_DWORD *)v50 == 2)
          {
            WTF::StringImpl::destroy(v50, (WTF::StringImpl *)a2);
            this = (WTF **)v92;
          }
          else
          {
            *(_DWORD *)v50 -= 2;
          }
        }
        ++v14;
      }
      while (v14 != v6);
    }
    else if (!v9)
    {
      LODWORD(v6) = 8;
      goto LABEL_62;
    }
    WTF::fastFree(v9, a2);
    this = (WTF **)v92;
    LODWORD(v6) = *((_DWORD *)v92 + 28);
LABEL_62:
    v4 = *a2;
  }
  v55 = v6 - 1;
  v56 = *((_DWORD *)this + 30);
  v57 = *((_DWORD *)v4 + 4);
  if (v57 < 0x100)
  {
    v59 = WTF::StringImpl::hashSlowCase(v4);
    this = (WTF **)v92;
    v58 = v59;
  }
  else
  {
    v58 = v57 >> 8;
  }
  v60 = (v58 ^ v56) & v55;
  v61 = this[13];
  v62 = (uint64_t)v61 + 16 * v60;
  v63 = *(WTF::StringImpl **)v62;
  if (!*(_QWORD *)v62)
  {
LABEL_77:
    WTF::HashMapEnsureTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::MediaStream,WTF::RawPtrTraits<WebCore::MediaStream>,WTF::DefaultRefDerefTraits<WebCore::MediaStream>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::MediaStream,WTF::RawPtrTraits<WebCore::MediaStream>,WTF::DefaultRefDerefTraits<WebCore::MediaStream>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::MediaStream,WTF::RawPtrTraits<WebCore::MediaStream>,WTF::DefaultRefDerefTraits<WebCore::MediaStream>>>,WTF::String const&,WebCore::LibWebRTCMediaEndpoint::mediaStreamFromRTCStreamId(WTF::String const&)::$_0>((WTF::StringImpl **)v62, *a2, (uint64_t)v93);
LABEL_78:
    v69 = v92;
    goto LABEL_95;
  }
  v64 = 0;
  while (1)
  {
    v65 = *((_DWORD *)v63 + 4);
    if (v65 < 0x100)
    {
      v66 = WTF::StringImpl::hashSlowCase(v63);
      this = (WTF **)v92;
    }
    else
    {
      v66 = v65 >> 8;
    }
    v67 = (v60 + v6 - ((v66 ^ v56) & v55)) & v55;
    if (v64 > v67)
      break;
    if (v66 == v58)
    {
      v68 = WTF::equal(*(WTF **)v62, *a2, a3);
      this = (WTF **)v92;
      if ((v68 & 1) != 0)
        goto LABEL_96;
    }
    v61 = this[13];
    v60 = ((_DWORD)v60 + 1) & v55;
    ++v64;
    v62 = (uint64_t)v61 + 16 * v60;
    v63 = *(WTF::StringImpl **)v62;
    if (!*(_QWORD *)v62)
    {
      if (v64 >= 0x80)
        *((_BYTE *)this + 124) = 1;
      goto LABEL_77;
    }
  }
  if (v64 >= 0x80)
    *((_BYTE *)this + 124) = 1;
  v70 = *(WTF::StringImpl **)v62;
  *(_QWORD *)v62 = 0;
  v71 = (uint64_t)v61 + 16 * v60;
  v72 = *(_QWORD *)(v71 + 8);
  *(_QWORD *)(v71 + 8) = 0;
  v73 = *(WTF::StringImpl **)v62;
  *(_QWORD *)v62 = 0;
  if (v73)
  {
    if (*(_DWORD *)v73 == 2)
      WTF::StringImpl::destroy(v73, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v73 -= 2;
  }
  *(_QWORD *)v62 = 0;
  *(_QWORD *)(v62 + 8) = 0;
  WTF::HashMapEnsureTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::MediaStream,WTF::RawPtrTraits<WebCore::MediaStream>,WTF::DefaultRefDerefTraits<WebCore::MediaStream>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::MediaStream,WTF::RawPtrTraits<WebCore::MediaStream>,WTF::DefaultRefDerefTraits<WebCore::MediaStream>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::MediaStream,WTF::RawPtrTraits<WebCore::MediaStream>,WTF::DefaultRefDerefTraits<WebCore::MediaStream>>>,WTF::String const&,WebCore::LibWebRTCMediaEndpoint::mediaStreamFromRTCStreamId(WTF::String const&)::$_0>((WTF::StringImpl **)v62, *a2, (uint64_t)v93);
  v74 = ((_DWORD)v60 + 1) & v55;
  v69 = v92;
  while (1)
  {
    v75 = *((_QWORD *)v69 + 13);
    v76 = v75 + 16 * v74;
    v77 = *(WTF::StringImpl **)v76;
    if (!*(_QWORD *)v76)
      break;
    v78 = *((_DWORD *)v77 + 4);
    if (v78 < 0x100)
    {
      v79 = WTF::StringImpl::hashSlowCase(v77);
      v69 = v92;
    }
    else
    {
      v79 = v78 >> 8;
    }
    if (++v67 > (((_DWORD)v74 + (_DWORD)v6 - ((v79 ^ v56) & v55)) & v55))
    {
      v80 = *(WTF::StringImpl **)v76;
      v81 = *(_QWORD *)(v76 + 8);
      *(_QWORD *)v76 = v70;
      *(_QWORD *)(v76 + 8) = v72;
      v72 = v81;
      v70 = v80;
      v67 = (v74 + v6 - ((v79 ^ v56) & v55)) & v55;
    }
    v74 = ((_DWORD)v74 + 1) & v55;
  }
  *(_QWORD *)v76 = v70;
  v82 = v75 + 16 * v74;
  v83 = *(WebCore::MediaStream **)(v82 + 8);
  *(_QWORD *)(v82 + 8) = v72;
  if (v83)
  {
    if (*((_DWORD *)v83 + 22) != 1)
    {
      --*((_DWORD *)v83 + 22);
      goto LABEL_95;
    }
    WebCore::MediaStream::~MediaStream(v83);
    bmalloc::api::isoDeallocate(v85, v86);
    goto LABEL_78;
  }
LABEL_95:
  ++*((_DWORD *)v69 + 29);
LABEL_96:
  if (v87)
  {
    if (*(_DWORD *)v87 == 2)
      WTF::StringImpl::destroy(v87, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v87 -= 2;
  }
  return *(_QWORD *)(v62 + 8);
}

WTF *WebCore::LibWebRTCMediaEndpoint::createSourceAndRTCTrack(WebCore::LibWebRTCMediaEndpoint *this, WebCore::MediaStreamTrack *a2, uint64_t *a3)
{
  WTF *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WebCore::MediaStreamTrackPrivate *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  WTF *result;
  int v19;
  size_t v20;
  char *v21;
  uint64_t v22;
  size_t v23;
  void *v24;
  WTF *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  _QWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  WTF *v34;
  void *v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t v41;
  WTF *v42;
  void *v43;
  WTF *v44;
  WTF *v45;
  void *__p[2];
  unint64_t v47;
  WTF *v48;
  uint64_t v49;
  unsigned int v50;

  v3 = (WTF *)a3;
  v49 = 0;
  v50 = 0;
  v6 = a3[12];
  if (*(_BYTE *)(v6 + 64))
  {
    ++*(_DWORD *)(v6 + 8);
    __p[0] = (void *)v6;
    v7 = WTF::fastMalloc((WTF *)0x130);
    v8 = WebCore::RealtimeOutgoingVideoSource::RealtimeOutgoingVideoSource(v7, (uint64_t *)__p);
    *(_QWORD *)v8 = off_1E341B6B8;
    *(_QWORD *)(v8 + 8) = &unk_1E341B7A8;
    *(_QWORD *)(v8 + 16) = &unk_1E341B7D8;
    *(_QWORD *)(v8 + 32) = &unk_1E341B810;
    *(_QWORD *)(v8 + 48) = &unk_1E341B868;
    *(_QWORD *)(v8 + 56) = &unk_1E341B890;
    *(_QWORD *)(v8 + 256) = 0;
    *(_DWORD *)(v8 + 264) = 0;
    *(_QWORD *)(v8 + 296) = 0;
    *(_QWORD *)(v8 + 272) = 0;
    *(_QWORD *)(v8 + 280) = 0;
    v10 = (WebCore::MediaStreamTrackPrivate *)__p[0];
    __p[0] = 0;
    if (v10)
    {
      if (*((_DWORD *)v10 + 2) == 1)
      {
        WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v10, v9);
        WTF::fastFree(v42, v43);
      }
      else
      {
        --*((_DWORD *)v10 + 2);
      }
    }
    v11 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 4) + 16) + 40);
    if (v11 && (v12 = *(_QWORD *)(v11 + 8)) != 0)
    {
      v13 = (unsigned __int8 *)(v12 - 96);
      v14 = *(unsigned __int8 *)(v12 + 178);
      if (*(_BYTE *)(v12 + 178))
      {
        if (v14 == 1 || v14 == 2)
          ++*(_DWORD *)(v12 + 216);
      }
      else
      {
        *(_DWORD *)(v12 - 264) += 2;
      }
      v15 = 0;
      if ((*(_DWORD *)((*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v13 + 136))(v13) + 488) & 0x1000) != 0)
        *(_BYTE *)(v7 + 216) = 0;
    }
    else
    {
      v13 = 0;
      v15 = 1;
    }
    v22 = *((_QWORD *)a2 + 5);
    v44 = (WTF *)v7;
    (**(void (***)(uint64_t))v7)(v7);
    result = (WTF *)WTF::String::utf8();
    v19 = (int)v48;
    if (v48)
    {
      v23 = strlen((const char *)v48 + 16);
      (*(void (**)(void **__return_ptr, uint64_t, WTF **, char *, size_t))(*(_QWORD *)v22 + 96))(__p, v22, &v44, (char *)v48 + 16, v23);
      v3 = (WTF *)__p[0];
      __p[0] = 0;
      v25 = v48;
      v48 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 1)
          WTF::fastFree(v25, v24);
        else
          --*(_DWORD *)v25;
      }
      result = v44;
      if (v44)
        result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v44 + 8))(v44);
      if (v50 != -1)
      {
        if (v50 == 2)
        {
          v26 = v49;
          v49 = v7;
          if (v26)
          {
            v27 = (unsigned int *)(v26 + 24);
            do
            {
              v28 = __ldaxr(v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v27));
            if (!v29)
            {
              atomic_store(1u, v27);
              v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
              *v30 = off_1E33638B0;
              v30[1] = v27;
              __p[0] = v30;
              WTF::ensureOnMainThread();
              result = (WTF *)__p[0];
              __p[0] = 0;
              if (result)
                result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
            }
          }
LABEL_32:
          if ((v15 & 1) != 0)
            goto LABEL_36;
          v19 = v13[274];
          if (!v13[274])
          {
            if (*((_DWORD *)v13 - 42) == 2)
            {
              if ((*((_WORD *)v13 - 81) & 0x400) == 0)
                result = (WTF *)WebCore::Node::removedLastRef((WebCore::Node *)(v13 - 192), v24);
            }
            else
            {
              *((_DWORD *)v13 - 42) -= 2;
            }
            goto LABEL_36;
          }
          goto LABEL_70;
        }
        result = (WTF *)((uint64_t (*)(void **, uint64_t *))off_1E3363330[v50])(__p, &v49);
      }
      v49 = v7;
      v50 = 2;
      goto LABEL_32;
    }
LABEL_69:
    __break(1u);
LABEL_70:
    if (v19 == 1)
    {
      if (*((_DWORD *)v13 + 78) == 1)
        result = (WTF *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v13 + 40))(v13);
      else
        --*((_DWORD *)v13 + 78);
    }
    else if (v19 == 2)
    {
      result = (WTF *)WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)v13 + 78);
    }
    goto LABEL_36;
  }
  ++*(_DWORD *)(v6 + 8);
  v13 = (unsigned __int8 *)WTF::fastMalloc((WTF *)0x140);
  *((_DWORD *)v13 + 4) = 1;
  *((_WORD *)v13 + 32) = 256;
  v13[66] = 0;
  *((_QWORD *)v13 + 9) = 0;
  *((_QWORD *)v13 + 10) = 0;
  *((_DWORD *)v13 + 22) = 0;
  *(_QWORD *)v13 = off_1E341B4A0;
  *((_QWORD *)v13 + 1) = &unk_1E341B5A8;
  *((_QWORD *)v13 + 3) = &unk_1E341B5D8;
  *((_QWORD *)v13 + 4) = 0;
  *((_QWORD *)v13 + 5) = &unk_1E341B630;
  *((_QWORD *)v13 + 6) = &unk_1E341B678;
  *((_QWORD *)v13 + 7) = v6;
  v16 = WTF::fastMalloc((WTF *)0x180);
  WebCore::AudioSampleDataSource::AudioSampleDataSource(v16, 96000, v6, 2);
  *((_QWORD *)v13 + 12) = v16;
  v13[104] = 0;
  v13[184] = 0;
  v13[192] = 0;
  v13[272] = 0;
  v13[312] = 0;
  *(_OWORD *)(v13 + 280) = 0u;
  *(_OWORD *)(v13 + 296) = 0u;
  v17 = *((_QWORD *)a2 + 5);
  result = (WTF *)WTF::String::utf8();
  v19 = (int)v45;
  if (!v45)
    goto LABEL_69;
  v3 = (WTF *)((char *)v45 + 16);
  v20 = strlen((const char *)v45 + 16);
  v19 = -8;
  if (v20 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v21 = (char *)v20;
  if (v20 > 0x16)
  {
    v32 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v32 = v20 | 7;
    v33 = v32 + 1;
    result = (WTF *)operator new(v32 + 1);
    v19 = v33;
    __p[1] = v21;
    v47 = v33 | 0x8000000000000000;
    __p[0] = result;
  }
  else
  {
    HIBYTE(v47) = v20;
    result = (WTF *)__p;
  }
  v34 = (WTF *)&v21[(_QWORD)result];
  if (result <= v3 && v34 > v3)
    goto LABEL_69;
  if (v21)
    memmove(result, v3, (size_t)v21);
  *(_BYTE *)v34 = 0;
  (*(void (**)(WTF **__return_ptr, uint64_t, void **, unsigned __int8 *))(*(_QWORD *)v17 + 112))(&v48, v17, __p, v13);
  v3 = v48;
  v48 = 0;
  if (SHIBYTE(v47) < 0)
    operator delete(__p[0]);
  result = v45;
  v45 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      result = (WTF *)WTF::fastFree(result, v35);
    else
      --*(_DWORD *)result;
  }
  if (v50 == -1)
    goto LABEL_59;
  if (v50 != 1)
  {
    ((void (*)(void **, uint64_t *))off_1E3363330[v50])(__p, &v49);
LABEL_59:
    v49 = (uint64_t)v13;
    v50 = 1;
    goto LABEL_60;
  }
  v36 = v49;
  v49 = (uint64_t)v13;
  if (!v36)
  {
LABEL_60:
    *(_BYTE *)this = 0;
    *((_DWORD *)this + 2) = -1;
    v31 = 1;
    goto LABEL_61;
  }
  v37 = (unsigned int *)(v36 + 16);
  do
  {
    v38 = __ldaxr(v37);
    v39 = v38 - 1;
  }
  while (__stlxr(v39, v37));
  if (!v39)
  {
    atomic_store(1u, v37);
    v40 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v40 = off_1E3363888;
    v40[1] = v37;
    __p[0] = v40;
    WTF::ensureOnMainThread();
    result = (WTF *)__p[0];
    __p[0] = 0;
    if (result)
      result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
  }
LABEL_36:
  v31 = v50;
  *(_BYTE *)this = 0;
  *((_DWORD *)this + 2) = -1;
  if (v31 == -1)
  {
    *((_QWORD *)this + 2) = v3;
    return result;
  }
LABEL_61:
  result = (WTF *)((uint64_t (*)(void **, WebCore::LibWebRTCMediaEndpoint *, uint64_t *))off_1E3363398[v31])(__p, this, &v49);
  *((_DWORD *)this + 2) = v31;
  v41 = v50;
  *((_QWORD *)this + 2) = v3;
  if ((_DWORD)v41 != -1)
    return (WTF *)((uint64_t (*)(void **, uint64_t *))off_1E3363330[v41])(__p, &v49);
  return result;
}

void sub_1954B7B6C(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t WebCore::LibWebRTCMediaEndpoint::OnDataChannel(uint64_t a1, uint64_t *a2)
{
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  _QWORD *v8;

  v3 = (unsigned int *)(a1 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  v5 = *a2;
  *a2 = 0;
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = &off_1E3363578;
  v6[1] = a1;
  v6[2] = v5;
  v8 = v6;
  WTF::callOnMainThread();
  result = (uint64_t)v8;
  if (v8)
    return (*(uint64_t (**)(_QWORD *))(*v8 + 8))(v8);
  return result;
}

uint64_t WebCore::LibWebRTCMediaEndpoint::OnNegotiationNeededEvent(WebCore::LibWebRTCMediaEndpoint *this, int a2)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v4 = (unsigned int *)((char *)this + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v6 = &off_1E33635A0;
  *(_QWORD *)(v6 + 8) = this;
  *(_DWORD *)(v6 + 16) = a2;
  v8 = v6;
  WTF::callOnMainThread();
  result = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

uint64_t WebCore::LibWebRTCMediaEndpoint::OnStandardizedIceConnectionChange(uint64_t a1, int a2)
{
  int v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  if ((a2 - 1) >= 6)
    v3 = 0;
  else
    v3 = a2;
  v4 = (unsigned int *)(a1 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v6 = &off_1E33635C8;
  *(_QWORD *)(v6 + 8) = a1;
  *(_DWORD *)(v6 + 16) = v3;
  v8 = v6;
  WTF::callOnMainThread();
  result = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

uint64_t WebCore::LibWebRTCMediaEndpoint::OnIceGatheringChange(uint64_t a1, int a2)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v4 = (unsigned int *)(a1 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v6 = &off_1E33635F0;
  *(_QWORD *)(v6 + 8) = a1;
  *(_DWORD *)(v6 + 16) = a2;
  v8 = v6;
  WTF::callOnMainThread();
  result = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

void WebCore::LibWebRTCMediaEndpoint::OnIceCandidate(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  __int16 v5;
  unsigned int *v6;
  unsigned int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  void *__p;
  char v20;
  int v21;
  char v22;
  int v23;
  char v24;
  int v25;
  char v26;
  int v27;
  char v28;
  int v29;
  char v30;
  char v31;
  uint64_t v32;
  _QWORD v33[2];
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;
  void *v45[2];
  uint64_t v46;
  _BYTE v47[13];
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;

  v45[0] = 0;
  v45[1] = 0;
  v46 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a2 + 48))(a2, v45);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if (v4 >= 0x10000)
  {
    __break(0xC471u);
  }
  else
  {
    v5 = v4;
    v6 = (unsigned int *)(a1 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    v32 = a1;
    WebCore::descriptionsFromPeerConnection((uint64_t)&v21, *(_QWORD *)(a1 + 48), 0);
    v8 = v31;
    if (v31)
    {
      *(_DWORD *)v47 = v21;
      v47[4] = v22;
      *(_DWORD *)&v47[8] = v23;
      v47[12] = v24;
      WTF::String::isolatedCopy();
      LODWORD(v49) = v25;
      BYTE4(v49) = v26;
      WTF::String::isolatedCopy();
      LODWORD(v50) = v27;
      BYTE4(v50) = v28;
      WTF::String::isolatedCopy();
      DWORD2(v51) = v29;
      BYTE12(v51) = v30;
      WTF::String::isolatedCopy();
      v33[0] = *(_QWORD *)v47;
      *(_QWORD *)((char *)v33 + 5) = *(_QWORD *)&v47[5];
      v35 = v49;
      v34 = v48;
      v36 = v50;
      v37 = v51;
      v8 = 1;
      v38 = v52;
    }
    else
    {
      LOBYTE(v33[0]) = 0;
    }
    v39 = v8;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(v47, a2);
    WTF::String::fromUTF8();
    WTF::String::fromUTF8();
    v42 = v5;
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 40))(&__p, a2);
    WTF::String::fromUTF8();
    v9 = WTF::fastMalloc((WTF *)0x80);
    *(_QWORD *)v9 = off_1E33636B0;
    v10 = v32;
    v32 = 0;
    *(_QWORD *)(v9 + 8) = v10;
    *(_BYTE *)(v9 + 16) = 0;
    *(_BYTE *)(v9 + 88) = 0;
    if (v39)
    {
      v11 = *(_QWORD *)((char *)v33 + 5);
      *(_QWORD *)(v9 + 16) = v33[0];
      *(_QWORD *)(v9 + 21) = v11;
      *(_QWORD *)(v9 + 32) = v34;
      *(_QWORD *)(v9 + 40) = v35;
      v12 = *((_QWORD *)&v35 + 1);
      v34 = 0;
      *((_QWORD *)&v35 + 1) = 0;
      *(_QWORD *)(v9 + 48) = v12;
      *(_QWORD *)(v9 + 56) = v36;
      *(_OWORD *)(v9 + 64) = v37;
      v13 = v38;
      *(_QWORD *)&v37 = 0;
      v38 = 0;
      *(_QWORD *)(v9 + 80) = v13;
      *(_BYTE *)(v9 + 88) = 1;
    }
    *(_QWORD *)(v9 + 96) = v40;
    v14 = v41;
    v40 = 0;
    v41 = 0;
    *(_QWORD *)(v9 + 104) = v14;
    *(_WORD *)(v9 + 112) = v42;
    v15 = v43;
    v43 = 0;
    *(_QWORD *)(v9 + 120) = v15;
    v44 = v9;
    WTF::callOnMainThread();
    v17 = v44;
    v44 = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    WebCore::LibWebRTCMediaEndpoint::OnIceCandidate(webrtc::IceCandidateInterface const*)::$_0::~$_0(&v32, v16);
    if (v20 < 0)
      operator delete(__p);
    if (SHIBYTE(v48) < 0)
      operator delete(*(void **)v47);
    std::__optional_destruct_base<WebCore::PeerConnectionBackend::DescriptionStates,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v21, v18);
    if (SHIBYTE(v46) < 0)
      operator delete(v45[0]);
  }
}

void WebCore::descriptionsFromPeerConnection(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  char v21;
  int v22;
  _BYTE v23[13];
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  void *__p[2];
  uint64_t v30;
  void *v31[2];
  uint64_t v32;
  void *v33[2];
  uint64_t v34;
  void *v35[2];
  uint64_t v36;

  if (!a2)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 72) = 0;
    return;
  }
  v35[0] = 0;
  v35[1] = 0;
  v36 = 0;
  v33[0] = 0;
  v33[1] = 0;
  v34 = 0;
  v31[0] = 0;
  v31[1] = 0;
  v32 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v30 = 0;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v7 = v6;
  if (v6)
  {
    v22 = WebCore::fromSessionDescriptionType(v6);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 104))(v7, v35);
    LOBYTE(v7) = 1;
  }
  else
  {
    v22 = 0;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 240))(a2);
  v9 = v8;
  if (v8)
  {
    v10 = WebCore::fromSessionDescriptionType(v8);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v9 + 104))(v9, v33);
    LOBYTE(v9) = 1;
  }
  else
  {
    v10 = 0;
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 232))(a2);
  if (v11)
  {
    v12 = v11;
    v13 = WebCore::fromSessionDescriptionType(v11);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v12 + 104))(v12, v31);
    v14 = 1;
  }
  else
  {
    v14 = 0;
    v13 = 0;
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 248))(a2);
  v16 = v15;
  if (v15)
  {
    v17 = WebCore::fromSessionDescriptionType(v15);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v16 + 104))(v16, __p);
    LOBYTE(v16) = 1;
    if (a3)
    {
LABEL_14:
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 424))(a2) - 1;
      v19 = v22;
      if (v18 > 3)
        v20 = 0;
      else
        v20 = dword_1968DECC0[v18];
      v21 = 1;
      goto LABEL_20;
    }
  }
  else
  {
    v17 = 0;
    if (a3)
      goto LABEL_14;
  }
  v20 = 0;
  v21 = 0;
  v19 = v22;
LABEL_20:
  *(_DWORD *)v23 = v20;
  v23[4] = v21;
  *(_DWORD *)&v23[8] = v19;
  v23[12] = v7;
  WTF::String::fromUTF8();
  LODWORD(v25) = v10;
  BYTE4(v25) = v9;
  WTF::String::fromUTF8();
  LODWORD(v26) = v13;
  BYTE4(v26) = v14;
  WTF::String::fromUTF8();
  DWORD2(v27) = v17;
  BYTE12(v27) = v16;
  WTF::String::fromUTF8();
  *(_QWORD *)a1 = *(_QWORD *)v23;
  *(_QWORD *)(a1 + 5) = *(_QWORD *)&v23[5];
  *(_QWORD *)(a1 + 16) = v24;
  *(_OWORD *)(a1 + 24) = v25;
  *(_QWORD *)(a1 + 40) = v26;
  *(_OWORD *)(a1 + 48) = v27;
  *(_QWORD *)(a1 + 64) = v28;
  *(_BYTE *)(a1 + 72) = 1;
  if (SHIBYTE(v30) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v32) < 0)
    operator delete(v31[0]);
  if (SHIBYTE(v34) < 0)
    operator delete(v33[0]);
  if (SHIBYTE(v36) < 0)
    operator delete(v35[0]);
}

uint64_t *WebCore::LibWebRTCMediaEndpoint::OnIceCandidate(webrtc::IceCandidateInterface const*)::$_0::~$_0(uint64_t *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v11;
  _QWORD *v12;

  v3 = (WTF::StringImpl *)a1[14];
  a1[14] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = (WTF::StringImpl *)a1[12];
  a1[12] = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = (WTF::StringImpl *)a1[11];
  a1[11] = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  std::__optional_destruct_base<WebCore::PeerConnectionBackend::DescriptionStates,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 1), a2);
  v6 = *a1;
  *a1 = 0;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v11 = off_1E3363400;
      v11[1] = v7;
      v12 = v11;
      WTF::ensureOnMainThread();
      if (v12)
        (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    }
  }
  return a1;
}

void WebCore::transceiverStatesFromPeerConnection(uint64_t *a1, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  unint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  void **v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  void *v32;
  _QWORD *v33;
  void *__p;
  char *v35;
  char v36;
  char v37;
  uint64_t v38;

  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 144))(&v32, a2);
  *a1 = 0;
  a1[1] = 0;
  v30 = a1;
  v3 = v33;
  v4 = (char *)v33 - (_BYTE *)v32;
  if (v33 != v32)
  {
    if (v4 >> 30)
    {
LABEL_43:
      __break(0xC471u);
      JUMPOUT(0x1954B87F4);
    }
    v5 = v4 >> 3;
    v6 = WTF::fastMalloc((WTF *)(4 * v4));
    *((_DWORD *)v30 + 2) = v5;
    *v30 = v6;
    v3 = v32;
    v28 = v33;
    v29 = v6;
    if (v32 != v33)
    {
      v7 = 0;
      while (1)
      {
        v8 = *v3;
        (*(void (**)(void **__return_ptr, _QWORD))(*(_QWORD *)*v3 + 40))(&__p, *v3);
        if (v37)
        {
          WTF::String::fromUTF8();
          v9 = v38;
          if (v37 && v36 < 0)
            operator delete(__p);
        }
        else
        {
          v9 = 0;
        }
        v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 112))(v8);
        if ((v10 & 0xFF00000000) != 0)
        {
          if (v10 >= 5)
            goto LABEL_43;
          v11 = qword_1968DECE8[(int)v10];
          v12 = 0x100000000;
        }
        else
        {
          v12 = 0;
          v11 = 0;
        }
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v8 + 56))(&v38, v8);
        (*(void (**)(void **__return_ptr))(*(_QWORD *)v38 + 48))(&__p);
        if (v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
        v13 = (void **)v35;
        if (v35 == __p)
          break;
        v14 = 0xAAAAAAAAAAAAAAABLL * ((v35 - (_BYTE *)__p) >> 3);
        if (v14 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x1954B87FCLL);
        }
        v15 = WTF::fastMalloc((WTF *)(0x5555555555555558 * ((v35 - (_BYTE *)__p) >> 3)));
        v13 = (void **)__p;
        v16 = (void **)v35;
        if (__p == v35)
          goto LABEL_24;
        v31 = v11;
        v17 = v12;
        v18 = v9;
        v19 = 0;
        do
        {
          v20 = v19;
          WTF::String::fromUTF8();
          ++v19;
          *(_QWORD *)(v15 + 8 * v20) = v38;
          v13 += 3;
        }
        while (v13 != v16);
        v13 = (void **)__p;
        v9 = v18;
        v12 = v17;
        v11 = v31;
        if (__p)
        {
LABEL_25:
          v21 = (void **)v35;
          v22 = v13;
          if (v35 != (char *)v13)
          {
            do
            {
              if (*((char *)v21 - 1) < 0)
                operator delete(*(v21 - 3));
              v21 -= 3;
            }
            while (v21 != v13);
            v22 = __p;
          }
          v35 = (char *)v13;
          operator delete(v22);
        }
LABEL_31:
        v23 = v29 + 32 * v7;
        *(_QWORD *)(v23 + 8) = v15;
        *(_QWORD *)(v23 + 16) = 0;
        *(_QWORD *)v23 = v9;
        *(_DWORD *)(v23 + 16) = v14;
        *(_DWORD *)(v23 + 20) = v19;
        *(_QWORD *)(v23 + 24) = v11 | v12;
        *((_DWORD *)v30 + 3) = ++v7;
        if (++v3 == v28)
        {
          v3 = v32;
          goto LABEL_33;
        }
      }
      v15 = 0;
      LODWORD(v14) = 0;
LABEL_24:
      v19 = 0;
      if (v13)
        goto LABEL_25;
      goto LABEL_31;
    }
  }
LABEL_33:
  if (v3)
  {
    v24 = v33;
    v25 = v3;
    if (v33 != v3)
    {
      do
      {
        v27 = *--v24;
        v26 = v27;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
      }
      while (v24 != v3);
      v25 = v32;
    }
    v33 = v3;
    operator delete(v25);
  }
}

uint64_t WebCore::LibWebRTCMediaEndpoint::OnStatsDelivered(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;

  if ((unint64_t)(*(_QWORD *)(*a2 + 8) + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL)
    v3 = 0;
  else
    v3 = *(_QWORD *)(*a2 + 8);
  if (!*(_QWORD *)(a1 + 232))
    *(_QWORD *)(a1 + 232) = v3;
  v4 = (unsigned int *)(a1 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *a2;
  if (*a2)
  {
    do
      v7 = __ldxr((unsigned int *)v6);
    while (__stxr(v7 + 1, (unsigned int *)v6));
  }
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v8 = &off_1E33637C8;
  v8[1] = a1;
  v8[2] = a1;
  v8[3] = v3;
  v8[4] = v6;
  if (v6)
  {
    do
      v9 = __ldxr((unsigned int *)v6);
    while (__stxr(v9 + 1, (unsigned int *)v6));
  }
  v13 = v8;
  WTF::callOnMainThread();
  result = (uint64_t)v13;
  if (v13)
    result = (*(uint64_t (**)(_QWORD *))(*v13 + 8))(v13);
  if (v6)
  {
    do
    {
      v11 = __ldaxr((unsigned int *)v6);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, (unsigned int *)v6));
    if (!v12)
    {
      std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v6 + 16, *(char **)(v6 + 24));
      return MEMORY[0x19AEA7644](v6, 0x1020C4043D65406);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::LibWebRTCMediaEndpoint::OnStatsDelivered(uint64_t a1, uint64_t *a2)
{
  return WebCore::LibWebRTCMediaEndpoint::OnStatsDelivered(a1 - 16, a2);
}

char *WebCore::LibWebRTCMediaEndpoint::logChannel(WebCore::LibWebRTCMediaEndpoint *this)
{
  return &WebCore::LogWebRTC;
}

char *`non-virtual thunk to'WebCore::LibWebRTCMediaEndpoint::logChannel(WebCore::LibWebRTCMediaEndpoint *this)
{
  return &WebCore::LogWebRTC;
}

uint64_t WebCore::LibWebRTCMediaEndpoint::logger(WebCore::LibWebRTCMediaEndpoint *this)
{
  return *((_QWORD *)this + 30);
}

uint64_t WebCore::createLibWebRTCPeerConnectionBackend@<X0>(uint64_t this@<X0>, uint64_t *a2@<X8>)
{
  WebCore::RTCPeerConnection *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::LibWebRTCProvider *v11;
  uint64_t v12;
  uint64_t v13;
  void (***v14)(_QWORD);
  unint64_t StatusReg;
  unsigned int *v16;
  unsigned int v17;
  _QWORD *v18;
  const char *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;

  v3 = (WebCore::RTCPeerConnection *)this;
  v5 = *(_QWORD *)(this + 40);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      v5 = v6 - 96;
    else
      v5 = 0;
  }
  if (*(_BYTE *)(v5 + 274))
  {
    this = 96;
    __break(0xC471u);
  }
  else
  {
    v7 = *(_QWORD *)(v5 + 336);
    if (v7 && (v8 = *(_QWORD *)(v7 + 8)) != 0 && (v9 = *(_QWORD *)(v8 + 24)) != 0 && (v10 = *(_QWORD *)(v9 + 8)) != 0)
    {
      v11 = *(WebCore::LibWebRTCProvider **)(v10 + 296);
      (*(void (**)(WebCore::LibWebRTCProvider *, uint64_t))(*(_QWORD *)v11 + 144))(v11, (*(_QWORD *)(*(_QWORD *)(v10 + 112) + 704) >> 27) & 1);
      v12 = WTF::fastMalloc((WTF *)0x90);
      *(_QWORD *)WebCore::PeerConnectionBackend::PeerConnectionBackend((WebCore::PeerConnectionBackend *)v12, v3) = off_1E3362E80;
      v13 = WTF::fastMalloc((WTF *)0x108);
      *(_DWORD *)(v13 + 8) = 1;
      *(_QWORD *)v13 = off_1E3362D18;
      *(_QWORD *)(v13 + 16) = &unk_1E3362E08;
      *(_QWORD *)(v13 + 24) = &unk_1E3362E40;
      *(_QWORD *)(v13 + 32) = v12;
      v14 = (void (***)(_QWORD))WebCore::LibWebRTCProvider::factory(v11);
      *(_QWORD *)(v13 + 40) = v14;
      if (v14)
        (**v14)(v14);
      *(_QWORD *)(v13 + 48) = 0;
      *(_QWORD *)(v13 + 56) = off_1E3363428;
      *(_QWORD *)(v13 + 64) = v13;
      *(_QWORD *)(v13 + 72) = off_1E3363468;
      *(_QWORD *)(v13 + 80) = v13;
      *(_QWORD *)(v13 + 88) = off_1E33634A0;
      *(_QWORD *)(v13 + 104) = 0;
      *(_QWORD *)(v13 + 112) = 0;
      *(_QWORD *)(v13 + 96) = v13;
      *(_QWORD *)(v13 + 117) = 0;
      *(_QWORD *)(v13 + 128) = 0;
      *(_BYTE *)(v13 + 136) = 0;
      *(_QWORD *)(v13 + 144) = off_1E3407128;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      *(_OWORD *)(v13 + 152) = 0u;
      *(_OWORD *)(v13 + 168) = 0u;
      v16 = *(unsigned int **)(StatusReg + 736);
      if (!v16)
        v16 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 + 1, v16));
      *(_QWORD *)(v13 + 184) = v16;
      *(_QWORD *)(v13 + 144) = off_1E31F7378;
      v18 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
      *v18 = off_1E33634D8;
      v18[1] = WebCore::LibWebRTCMediaEndpoint::gatherStatsForLogging;
      v18[2] = 0;
      v18[3] = v13;
      *(_QWORD *)(v13 + 213) = 0;
      *(_QWORD *)(v13 + 192) = v18;
      *(_QWORD *)(v13 + 200) = 0;
      *(_QWORD *)(v13 + 208) = 0;
      *(_QWORD *)(v13 + 224) = 0;
      *(_QWORD *)(v13 + 232) = 0;
      v20 = *(_QWORD *)(v12 + 64);
      v21 = (unsigned int *)(v20 + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
      v23 = *(_QWORD *)(v12 + 72);
      *(_QWORD *)(v13 + 240) = v20;
      *(_QWORD *)(v13 + 248) = v23;
      *(_BYTE *)(v13 + 256) = 0;
      this = webrtc::field_trial::InitFieldTrialsFromString((webrtc::field_trial *)"WebRTC-Video-H26xPacketBuffer/Enabled/", v19);
      *(_QWORD *)(v12 + 88) = v13;
      *(_WORD *)(v12 + 96) = 0;
      *(_OWORD *)(v12 + 104) = 0u;
      *(_OWORD *)(v12 + 120) = 0u;
      *(_QWORD *)(v12 + 136) = 0;
    }
    else
    {
      v12 = 0;
    }
    *a2 = v12;
  }
  return this;
}

void WebCore::LibWebRTCPeerConnectionBackend::~LibWebRTCPeerConnectionBackend(WebCore::LibWebRTCPeerConnectionBackend *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::RTCRtpReceiver **v5;
  uint64_t v6;
  WebCore::RTCRtpReceiver *v7;
  bmalloc::api *v8;
  void *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD *v20;
  _QWORD *v21;

  v3 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((unsigned int *)this + 33);
  if ((_DWORD)v4)
  {
    v5 = (WebCore::RTCRtpReceiver **)*((_QWORD *)this + 15);
    v6 = 8 * v4;
    do
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
      {
        if (*((_DWORD *)v7 + 2) == 1)
        {
          WebCore::RTCRtpReceiver::~RTCRtpReceiver(v7, a2);
          bmalloc::api::isoDeallocate(v8, v9);
        }
        else
        {
          --*((_DWORD *)v7 + 2);
        }
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v10 = (WTF *)*((_QWORD *)this + 15);
  if (v10)
  {
    *((_QWORD *)this + 15) = 0;
    *((_DWORD *)this + 32) = 0;
    WTF::fastFree(v10, a2);
  }
  v11 = *((unsigned int *)this + 29);
  if ((_DWORD)v11)
  {
    v12 = (uint64_t *)*((_QWORD *)this + 13);
    v13 = 8 * v11;
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      ++v12;
      v13 -= 8;
    }
    while (v13);
  }
  v15 = (WTF *)*((_QWORD *)this + 13);
  if (v15)
  {
    *((_QWORD *)this + 13) = 0;
    *((_DWORD *)this + 28) = 0;
    WTF::fastFree(v15, a2);
  }
  v16 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v16)
  {
    v17 = (unsigned int *)(v16 + 8);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v20 = off_1E3363400;
      v20[1] = v17;
      v21 = v20;
      WTF::ensureOnMainThread();
      if (v21)
        (*(void (**)(_QWORD *))(*v21 + 8))(v21);
    }
  }
  WebCore::PeerConnectionBackend::~PeerConnectionBackend(this, a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::LibWebRTCPeerConnectionBackend::~LibWebRTCPeerConnectionBackend(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::LibWebRTCPeerConnectionBackend::suspend(WebCore::LibWebRTCPeerConnectionBackend *this)
{
  _QWORD *v1;
  uint64_t result;

  v1 = (_QWORD *)*((_QWORD *)this + 11);
  if ((v1[22] & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v1 + 18));
  result = v1[28];
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

uint64_t WebCore::LibWebRTCPeerConnectionBackend::resume(WebCore::LibWebRTCPeerConnectionBackend *this)
{
  uint64_t v1;
  double v2;
  BOOL v3;
  double v4;
  uint64_t result;

  v1 = *((_QWORD *)this + 11);
  if ((*(_QWORD *)(v1 + 176) & 0xFFFFFFFFFFFFLL) != 0
    && *(double *)((*(_QWORD *)(v1 + 176) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
  {
    this = (WebCore::LibWebRTCPeerConnectionBackend *)WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v1 + 144));
  }
  v2 = 1.0;
  if (!*(_BYTE *)(v1 + 256))
  {
    if (!*(_BYTE *)(*(_QWORD *)(v1 + 240) + 12)
      || ((v2 = 2.0, WebCore::LogWebRTC) ? (v3 = byte_1ECE7CD50 > 2u) : (v3 = 0), !v3))
    {
      if (*(uint64_t *)(v1 + 232) >= -15000000)
        v2 = 4.0;
      else
        v2 = 10.0;
    }
  }
  *(double *)(v1 + 168) = v2;
  WTF::MonotonicTime::now(this);
  WebCore::TimerBase::setNextFireTime(v1 + 144, v2 + v4);
  result = *(_QWORD *)(v1 + 224);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 56))(result);
  return result;
}

uint64_t WebCore::LibWebRTCPeerConnectionBackend::disableICECandidateFiltering(WebCore::LibWebRTCPeerConnectionBackend *this)
{
  uint64_t result;

  *((_BYTE *)this + 40) = 0;
  result = *(_QWORD *)(*((_QWORD *)this + 11) + 224);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  return result;
}

uint64_t WebCore::LibWebRTCPeerConnectionBackend::isNegotiationNeeded(WebCore::LibWebRTCPeerConnectionBackend *this)
{
  uint64_t result;

  result = *(_QWORD *)(*((_QWORD *)this + 11) + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 328))(result);
  return result;
}

uint64_t WebCore::LibWebRTCPeerConnectionBackend::restartIce(WebCore::LibWebRTCPeerConnectionBackend *this)
{
  uint64_t result;

  result = *(_QWORD *)(*((_QWORD *)this + 11) + 48);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 256))(result);
  return result;
}

BOOL WebCore::LibWebRTCPeerConnectionBackend::setConfiguration(uint64_t a1, int32x2_t *a2)
{
  size_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x2_t v11;
  char *v12;
  void *v13;
  WTF *v14;
  void *v15;
  WTF *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  size_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void **v27;
  __int128 v28;
  void **v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  __int128 v35;
  void **v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  _BOOL8 v48;
  uint64_t v49;
  int32x2_t v50;
  uint64_t v51;
  char *v52;
  size_t v53;
  char *v54;
  size_t v55;
  size_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  void *v63;
  unsigned int **v64;
  unsigned int *v65;
  unsigned int **v66;
  unsigned int **v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  void *v74;
  uint64_t v75;
  unsigned int **v76;
  unsigned int *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  WTF::StringImpl *v84;
  WTF *v85;
  uint64_t v86;
  std::string::size_type v87;
  unsigned int **v88;
  std::string::size_type v89;
  unint64_t v90;
  uint64_t v91;
  unsigned int **v92;
  unsigned int **v93;
  void *v94;
  unsigned int *v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  unsigned int *v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  const WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  WTF::StringImpl *v110;
  __int128 v111;
  WTF::StringImpl *v112;
  WTF *v113;
  uint64_t v114;
  WTF *v115;
  WTF::StringImpl *v116;
  uint64_t v117;
  WTF::StringImpl *v118;
  __int128 v119;
  WTF *v120;
  uint64_t v121;
  unsigned int **v122;
  unint64_t v123;
  unsigned int **v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int **v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int *v132;
  unsigned int v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int v136;
  unsigned int *v137;
  unsigned int *v138;
  unsigned int v139;
  unsigned int v140;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  size_t v147;
  int8x8_t v148;
  _BOOL4 v149;
  void *v150;
  unsigned int **v151;
  unsigned int **v152;
  int v153;
  int v154;
  char v155;
  char v156;
  WTF::StringImpl *v157;
  WTF *v158;
  void *__p[2];
  __int128 v160;
  WTF::StringImpl *v161[2];
  __int128 v162;
  size_t v163;
  unint64_t v164;
  std::string v165;
  std::string v166[11];
  uint64_t v167;

  v167 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 40);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
      v4 = v5 - 96;
    else
      v4 = 0;
  }
  if (*(_BYTE *)(v4 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1954B9BB0);
  }
  v6 = *(_QWORD *)(v4 + 336);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 24);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9)
        {
          v142 = *(_QWORD *)(v9 + 296);
          v143 = *(_QWORD **)(a1 + 88);
          webrtc::PeerConnectionInterface::RTCConfiguration::RTCConfiguration((webrtc::PeerConnectionInterface::RTCConfiguration *)&v145);
          v148 = vbsl_s8((int8x8_t)vceqz_s32(a2[2]), (int8x8_t)1, vbsl_s8((int8x8_t)vceq_s32(a2[2], (int32x2_t)0x200000001), (int8x8_t)0x100000003, (int8x8_t)0x200000000));
          v149 = a2[3].i32[0] != 0;
          v10 = a2[1].u32[1];
          if ((_DWORD)v10)
          {
            v11 = *a2;
            v144 = *(_QWORD *)a2 + 32 * v10;
            while (1)
            {
              webrtc::PeerConnectionInterface::IceServer::IceServer((webrtc::PeerConnectionInterface::IceServer *)v161);
              v12 = (char *)WTF::String::utf8();
              if (!__p[0])
                break;
              std::string::__assign_external(&v165, (const std::string::value_type *)__p[0] + 16);
              v14 = (WTF *)__p[0];
              __p[0] = 0;
              if (v14)
              {
                if (*(_DWORD *)v14 == 1)
                  WTF::fastFree(v14, v13);
                else
                  --*(_DWORD *)v14;
              }
              v12 = (char *)WTF::String::utf8();
              if (!__p[0])
                break;
              std::string::__assign_external(v166, (const std::string::value_type *)__p[0] + 16);
              v16 = (WTF *)__p[0];
              __p[0] = 0;
              if (v16)
              {
                if (*(_DWORD *)v16 == 1)
                  WTF::fastFree(v16, v15);
                else
                  --*(_DWORD *)v16;
              }
              v17 = *(_DWORD *)(*(_QWORD *)&v11 + 12);
              if (v17)
              {
                v18 = **(_QWORD **)&v11;
                v19 = **(_QWORD **)&v11 + 40 * v17;
                do
                {
                  v12 = (char *)WTF::String::utf8();
                  if (!v158)
                    goto LABEL_224;
                  v20 = (char *)v158 + 16;
                  v21 = strlen((const char *)v158 + 16);
                  if (v21 > 0x7FFFFFFFFFFFFFF7)
                    goto LABEL_250;
                  v2 = v21;
                  if (v21 > 0x16)
                  {
                    v23 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v21 | 7) != 0x17)
                      v23 = v21 | 7;
                    v24 = v23 + 1;
                    v12 = (char *)operator new(v23 + 1);
                    __p[1] = (void *)v2;
                    *(_QWORD *)&v160 = v24 | 0x8000000000000000;
                    __p[0] = v12;
                  }
                  else
                  {
                    BYTE7(v160) = v21;
                    v12 = (char *)__p;
                  }
                  v25 = &v12[v2];
                  if (v12 <= v20 && v25 > v20)
                    goto LABEL_224;
                  if (v2)
                    v12 = (char *)memmove(v12, v20, v2);
                  *v25 = 0;
                  v27 = (void **)v163;
                  if (v163 >= v164)
                  {
                    v29 = (void **)*((_QWORD *)&v162 + 1);
                    v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v163 - *((_QWORD *)&v162 + 1)) >> 3);
                    v30 = v2 + 1;
                    if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
                      goto LABEL_250;
                    if (0x5555555555555556 * ((uint64_t)(v164 - *((_QWORD *)&v162 + 1)) >> 3) > v30)
                      v30 = 0x5555555555555556 * ((uint64_t)(v164 - *((_QWORD *)&v162 + 1)) >> 3);
                    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v164 - *((_QWORD *)&v162 + 1)) >> 3) >= 0x555555555555555)
                      v31 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v31 = v30;
                    if (!v31)
                      goto LABEL_224;
                    if (v31 > 0xAAAAAAAAAAAAAAALL)
                      goto LABEL_252;
                    v32 = 3 * v31;
                    v33 = (char *)operator new(24 * v31);
                    v34 = &v33[24 * v2];
                    *(_OWORD *)v34 = *(_OWORD *)__p;
                    *((_QWORD *)v34 + 2) = v160;
                    __p[0] = 0;
                    __p[1] = 0;
                    *(_QWORD *)&v160 = 0;
                    v2 = (size_t)(v34 + 24);
                    if (v27 == v29)
                    {
                      *((_QWORD *)&v162 + 1) = v34;
                      v163 = (size_t)(v34 + 24);
                      v164 = (unint64_t)&v33[8 * v32];
                    }
                    else
                    {
                      do
                      {
                        v35 = *(_OWORD *)(v27 - 3);
                        *((_QWORD *)v34 - 1) = *(v27 - 1);
                        *(_OWORD *)(v34 - 24) = v35;
                        v34 -= 24;
                        *(v27 - 2) = 0;
                        *(v27 - 1) = 0;
                        *(v27 - 3) = 0;
                        v27 -= 3;
                      }
                      while (v27 != v29);
                      v27 = (void **)*((_QWORD *)&v162 + 1);
                      v36 = (void **)v163;
                      *((_QWORD *)&v162 + 1) = v34;
                      v163 = v2;
                      v164 = (unint64_t)&v33[8 * v32];
                      while (v36 != v27)
                      {
                        if (*((char *)v36 - 1) < 0)
                          operator delete(*(v36 - 3));
                        v36 -= 3;
                      }
                    }
                    if (v27)
                      operator delete(v27);
                  }
                  else
                  {
                    if (!v163)
                      goto LABEL_224;
                    v28 = *(_OWORD *)__p;
                    *(_QWORD *)(v163 + 16) = v160;
                    *(_OWORD *)v27 = v28;
                    __p[1] = 0;
                    *(_QWORD *)&v160 = 0;
                    __p[0] = 0;
                    v2 = (size_t)(v27 + 3);
                  }
                  v163 = v2;
                  if (SBYTE7(v160) < 0)
                    operator delete(__p[0]);
                  v37 = v158;
                  v158 = 0;
                  if (v37)
                  {
                    if (*(_DWORD *)v37 == 1)
                      WTF::fastFree(v37, v22);
                    else
                      --*(_DWORD *)v37;
                  }
                  v18 += 40;
                }
                while (v18 != v19);
              }
              v12 = v146;
              if ((unint64_t)v146 >= v147)
              {
                v39 = 0x2E8BA2E8BA2E8BA3 * ((v146 - v145) >> 4);
                v40 = v39 + 1;
                if ((unint64_t)(v39 + 1) > 0x1745D1745D1745DLL)
                  goto LABEL_250;
                if (0x5D1745D1745D1746 * ((uint64_t)(v147 - (_QWORD)v145) >> 4) > v40)
                  v40 = 0x5D1745D1745D1746 * ((uint64_t)(v147 - (_QWORD)v145) >> 4);
                if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v147 - (_QWORD)v145) >> 4)) >= 0xBA2E8BA2E8BA2ELL)
                  v41 = 0x1745D1745D1745DLL;
                else
                  v41 = v40;
                if (!v41)
                  break;
                if (v41 > 0x1745D1745D1745DLL)
LABEL_252:
                  std::__throw_bad_array_new_length[abi:sn180100]();
                v42 = 176 * v41;
                v43 = (char *)operator new(176 * v41);
                v2 = (size_t)&v43[v42];
                v44 = MEMORY[0x19AEA5D18](&v43[176 * v39], v161);
                v38 = v44 + 176;
                v46 = v145;
                v45 = v146;
                if (v146 == v145)
                {
                  v145 = (char *)v44;
                  v146 = (char *)(v44 + 176);
                  v147 = v2;
                }
                else
                {
                  do
                  {
                    v45 -= 176;
                    v44 = MEMORY[0x19AEA5D18](v44 - 176, v45);
                  }
                  while (v45 != v46);
                  v45 = v145;
                  v47 = v146;
                  v145 = (char *)v44;
                  v146 = (char *)v38;
                  v147 = v2;
                  while (v47 != v45)
                  {
                    v47 -= 176;
                    MEMORY[0x19AEA5D30](v47);
                  }
                }
                if (v45)
                  operator delete(v45);
              }
              else
              {
                if (!v146)
                  break;
                v38 = MEMORY[0x19AEA5D18]() + 176;
              }
              v146 = (char *)v38;
              MEMORY[0x19AEA5D30](v161);
              *(_QWORD *)&v11 += 32;
              if (*(_QWORD *)&v11 == v144)
                goto LABEL_88;
            }
          }
          else
          {
LABEL_88:
            v49 = a2[5].u32[1];
            if ((_DWORD)v49)
            {
              v50 = a2[4];
              v51 = *(_QWORD *)&v50 + 16 * v49;
              while (1)
              {
                v12 = (char *)WTF::String::utf8();
                if (!v158)
                  break;
                v52 = (char *)v158 + 16;
                v53 = strlen((const char *)v158 + 16);
                v12 = (char *)WTF::String::utf8();
                if (!v157)
                  break;
                v54 = (char *)v157 + 16;
                v55 = strlen((const char *)v157 + 16);
                if (v53 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_250;
                v56 = v55;
                if (v53 > 0x16)
                {
                  v57 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v53 | 7) != 0x17)
                    v57 = v53 | 7;
                  v58 = v57 + 1;
                  v12 = (char *)operator new(v57 + 1);
                  v161[1] = (WTF::StringImpl *)v53;
                  *(_QWORD *)&v162 = v58 | 0x8000000000000000;
                  v161[0] = (WTF::StringImpl *)v12;
                }
                else
                {
                  BYTE7(v162) = v53;
                  v12 = (char *)v161;
                }
                v2 = (size_t)&v12[v53];
                if (v12 <= v52 && v2 > (unint64_t)v52)
                  break;
                if (v53)
                  memmove(v12, v52, v53);
                *(_BYTE *)v2 = 0;
                if (v56 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_250;
                if (v56 > 0x16)
                {
                  v60 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v56 | 7) != 0x17)
                    v60 = v56 | 7;
                  v61 = v60 + 1;
                  v12 = (char *)operator new(v60 + 1);
                  v163 = v56;
                  v164 = v61 | 0x8000000000000000;
                  *((_QWORD *)&v162 + 1) = v12;
                }
                else
                {
                  HIBYTE(v164) = v56;
                  v12 = (char *)&v162 + 8;
                }
                v62 = &v12[v56];
                if (v12 <= v54 && v62 > v54)
                  break;
                if (v56)
                  memmove(v12, v54, v56);
                *v62 = 0;
                v12 = (char *)rtc::RTCCertificate::FromPEM();
                v64 = v151;
                if (v151 >= v152)
                {
                  v67 = (unsigned int **)v150;
                  v68 = ((char *)v151 - (_BYTE *)v150) >> 3;
                  v69 = v68 + 1;
                  if ((unint64_t)(v68 + 1) >> 61)
                    goto LABEL_250;
                  v70 = (char *)v152 - (_BYTE *)v150;
                  if (((char *)v152 - (_BYTE *)v150) >> 2 > v69)
                    v69 = v70 >> 2;
                  if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF8)
                    v71 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v71 = v69;
                  if (!v71)
                    break;
                  if (v71 >> 61)
                    goto LABEL_252;
                  v72 = (char *)operator new(8 * v71);
                  v73 = &v72[8 * v68];
                  v74 = __p[0];
                  __p[0] = 0;
                  *(_QWORD *)v73 = v74;
                  v66 = (unsigned int **)(v73 + 8);
                  if (v64 == v67)
                  {
                    v150 = v73;
                    v151 = (unsigned int **)(v73 + 8);
                    v152 = (unsigned int **)&v72[8 * v71];
                  }
                  else
                  {
                    do
                    {
                      v75 = (uint64_t)*--v64;
                      *v64 = 0;
                      *((_QWORD *)v73 - 1) = v75;
                      v73 -= 8;
                    }
                    while (v64 != v67);
                    v64 = (unsigned int **)v150;
                    v76 = v151;
                    v150 = v73;
                    v151 = v66;
                    v152 = (unsigned int **)&v72[8 * v71];
                    while (v76 != v64)
                    {
                      v78 = *--v76;
                      v77 = v78;
                      if (v78)
                      {
                        do
                        {
                          v79 = __ldaxr(v77);
                          v80 = v79 - 1;
                        }
                        while (__stlxr(v80, v77));
                        if (!v80)
                        {
                          rtc::RTCCertificate::~RTCCertificate((rtc::RTCCertificate *)v77);
                          MEMORY[0x19AEA7644]();
                        }
                      }
                    }
                  }
                  if (v64)
                    operator delete(v64);
                }
                else
                {
                  if (!v151)
                    break;
                  v65 = (unsigned int *)__p[0];
                  __p[0] = 0;
                  *v151 = v65;
                  v66 = v64 + 1;
                }
                v151 = v66;
                v81 = (unsigned int *)__p[0];
                if (__p[0])
                {
                  do
                  {
                    v82 = __ldaxr(v81);
                    v83 = v82 - 1;
                  }
                  while (__stlxr(v83, v81));
                  if (!v83)
                  {
                    rtc::RTCCertificate::~RTCCertificate((rtc::RTCCertificate *)v81);
                    MEMORY[0x19AEA7644]();
                  }
                }
                if (SHIBYTE(v164) < 0)
                  operator delete(*((void **)&v162 + 1));
                if (SBYTE7(v162) < 0)
                  operator delete(v161[0]);
                v84 = v157;
                v157 = 0;
                if (v84)
                {
                  if (*(_DWORD *)v84 == 1)
                    WTF::fastFree(v84, v63);
                  else
                    --*(_DWORD *)v84;
                }
                v85 = v158;
                v158 = 0;
                if (v85)
                {
                  if (*(_DWORD *)v85 == 1)
                    WTF::fastFree(v85, v63);
                  else
                    --*(_DWORD *)v85;
                }
                *(_QWORD *)&v50 += 16;
                if (*(_QWORD *)&v50 == v51)
                  goto LABEL_154;
              }
            }
            else
            {
LABEL_154:
              v153 = 1;
              webrtc::CryptoOptions::CryptoOptions((webrtc::CryptoOptions *)v161);
              if (v156)
              {
                v154 = (int)v161[0];
                v155 = BYTE4(v161[0]);
              }
              else
              {
                webrtc::CryptoOptions::CryptoOptions();
                v156 = 1;
              }
              v2 = (size_t)v143;
              webrtc::CryptoOptions::~CryptoOptions((webrtc::CryptoOptions *)v161);
              if (v156)
              {
                LOBYTE(v154) = 1;
                v86 = v143[6];
                if (!v86)
                {
                  v103 = *(_QWORD *)(*(_QWORD *)(v143[4] + 16) + 40);
                  if (v103)
                  {
                    v104 = *(_QWORD *)(v103 + 8);
                    if (v104)
                      v105 = v104 - 96;
                    else
                      v105 = 0;
                  }
                  else
                  {
                    v105 = 0;
                  }
                  if (*(_BYTE *)(v105 + 274))
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1954B9BD4);
                  }
                  v106 = v143[28];
                  if (!v106)
                  {
                    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)__p, (const WTF::URL *)(v105 + 544));
                    WebCore::RegistrableDomain::RegistrableDomain((WebCore::RegistrableDomain *)v161, (const WTF::URL *)(v105 + 816));
                    v109 = WTF::equal((WTF *)__p[0], v161[0], v107);
                    v110 = v161[0];
                    v161[0] = 0;
                    if (v110)
                    {
                      if (*(_DWORD *)v110 == 2)
                        WTF::StringImpl::destroy(v110, v108);
                      else
                        *(_DWORD *)v110 -= 2;
                    }
                    WebCore::Document::userAgent((WebCore::Document *)(v105 - 192), (const WTF::URL *)(v105 + 544), (uint64_t *)&v157);
                    v111 = *(_OWORD *)(v105 + 240);
                    *(_OWORD *)v161 = *(_OWORD *)(v105 + 224);
                    v162 = v111;
                    (*(void (**)(WTF **__return_ptr, uint64_t, WTF::StringImpl **, WTF::StringImpl **, uint64_t, void **))(*(_QWORD *)v142 + 184))(&v158, v142, &v157, v161, v109, __p);
                    v113 = v158;
                    v158 = 0;
                    v114 = v143[28];
                    v143[28] = v113;
                    if (v114)
                    {
                      (*(void (**)(uint64_t))(*(_QWORD *)v114 + 8))(v114);
                      v115 = v158;
                      v158 = 0;
                      if (v115)
                        (*(void (**)(WTF *))(*(_QWORD *)v115 + 8))(v115);
                    }
                    v116 = v157;
                    v157 = 0;
                    if (v116)
                    {
                      if (*(_DWORD *)v116 == 2)
                        WTF::StringImpl::destroy(v116, v112);
                      else
                        *(_DWORD *)v116 -= 2;
                    }
                    if (!*(_BYTE *)(v143[4] + 40))
                    {
                      v117 = v143[28];
                      if (v117)
                        (*(void (**)(uint64_t))(*(_QWORD *)v117 + 64))(v117);
                    }
                    v118 = (WTF::StringImpl *)__p[0];
                    __p[0] = 0;
                    if (v118)
                    {
                      if (*(_DWORD *)v118 == 2)
                        WTF::StringImpl::destroy(v118, v112);
                      else
                        *(_DWORD *)v118 -= 2;
                    }
                    v106 = v143[28];
                  }
                  v119 = *(_OWORD *)(v105 + 240);
                  *(_OWORD *)__p = *(_OWORD *)(v105 + 224);
                  v160 = v119;
                  (*(void (**)(WTF **__return_ptr, uint64_t, void **, _QWORD *, uint64_t, char **))(*(_QWORD *)v142 + 160))(&v158, v142, __p, v143, v106, &v145);
                  v120 = v158;
                  v158 = 0;
                  v121 = v143[6];
                  v143[6] = v120;
                  if (v121)
                  {
                    (*(void (**)(uint64_t))(*(_QWORD *)v121 + 8))(v121);
                    if (v158)
                      (*(void (**)(WTF *))(*(_QWORD *)v158 + 8))(v158);
                  }
                  v48 = v143[6] != 0;
                  goto LABEL_244;
                }
                v12 = (char *)(*(_QWORD *(**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v86 + 336))(v161);
                v88 = (unsigned int **)v164;
                v87 = v165.__r_.__value_.__r.__words[0];
                v89 = v165.__r_.__value_.__r.__words[0] - v164;
                v90 = (uint64_t)(v165.__r_.__value_.__r.__words[0] - v164) >> 3;
                v91 = (uint64_t)v152;
                v92 = (unsigned int **)v150;
                if (v90 > ((char *)v152 - (_BYTE *)v150) >> 3)
                {
                  if (v150)
                  {
                    v93 = v151;
                    v94 = v150;
                    if (v151 != v150)
                    {
                      do
                      {
                        v96 = *--v93;
                        v95 = v96;
                        if (v96)
                        {
                          do
                          {
                            v97 = __ldaxr(v95);
                            v98 = v97 - 1;
                          }
                          while (__stlxr(v98, v95));
                          if (!v98)
                          {
                            rtc::RTCCertificate::~RTCCertificate((rtc::RTCCertificate *)v95);
                            MEMORY[0x19AEA7644]();
                          }
                        }
                      }
                      while (v93 != v92);
                      v94 = v150;
                    }
                    v151 = v92;
                    operator delete(v94);
                    v91 = 0;
                    v150 = 0;
                    v151 = 0;
                    v152 = 0;
                  }
                  if ((v89 & 0x8000000000000000) != 0)
                    goto LABEL_250;
                  v99 = v91 >> 2;
                  if (v91 >> 2 <= v90)
                    v99 = v90;
                  v100 = (unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v99;
                  if (v100 >> 61)
LABEL_250:
                    abort();
                  v12 = (char *)operator new(8 * v100);
                  v150 = v12;
                  v151 = (unsigned int **)v12;
                  v152 = (unsigned int **)&v12[8 * v100];
                  while (v88 != (unsigned int **)v87)
                  {
                    v101 = *v88;
                    *(_QWORD *)v12 = *v88;
                    if (v101)
                    {
                      do
                        v102 = __ldxr(v101);
                      while (__stxr(v102 + 1, v101));
                    }
                    ++v88;
                    v12 += 8;
                  }
                  goto LABEL_225;
                }
                v122 = v151;
                v123 = ((char *)v151 - (_BYTE *)v150) >> 3;
                if (v123 >= v90)
                {
                  if (v164 != v165.__r_.__value_.__r.__words[0])
                  {
                    do
                    {
                      v132 = *v88;
                      if (*v88)
                      {
                        do
                          v133 = __ldxr(v132);
                        while (__stxr(v133 + 1, v132));
                      }
                      v134 = *v92;
                      if (*v92)
                      {
                        do
                        {
                          v135 = __ldaxr(v134);
                          v136 = v135 - 1;
                        }
                        while (__stlxr(v136, v134));
                        if (!v136)
                        {
                          rtc::RTCCertificate::~RTCCertificate((rtc::RTCCertificate *)v134);
                          MEMORY[0x19AEA7644]();
                        }
                      }
                      *v92++ = v132;
                      ++v88;
                    }
                    while (v88 != (unsigned int **)v87);
                    v122 = v151;
                  }
                  while (v122 != v92)
                  {
                    v138 = *--v122;
                    v137 = v138;
                    if (v138)
                    {
                      do
                      {
                        v139 = __ldaxr(v137);
                        v140 = v139 - 1;
                      }
                      while (__stlxr(v140, v137));
                      if (!v140)
                      {
                        rtc::RTCCertificate::~RTCCertificate((rtc::RTCCertificate *)v137);
                        MEMORY[0x19AEA7644]();
                      }
                    }
                  }
                  v151 = v92;
                  goto LABEL_241;
                }
                v124 = (unsigned int **)(v164 + 8 * v123);
                if (v151 != v150)
                {
                  do
                  {
                    v125 = *v88;
                    if (*v88)
                    {
                      do
                        v126 = __ldxr(v125);
                      while (__stxr(v126 + 1, v125));
                    }
                    v12 = (char *)*v92;
                    if (*v92)
                    {
                      do
                      {
                        v127 = __ldaxr((unsigned int *)v12);
                        v128 = v127 - 1;
                      }
                      while (__stlxr(v128, (unsigned int *)v12));
                      if (!v128)
                      {
                        rtc::RTCCertificate::~RTCCertificate((rtc::RTCCertificate *)v12);
                        v12 = (char *)MEMORY[0x19AEA7644]();
                      }
                    }
                    *v92++ = v125;
                    ++v88;
                  }
                  while (v88 != v124);
                  v92 = v151;
                }
                v129 = v92;
                if (v124 == (unsigned int **)v87)
                {
LABEL_223:
                  v151 = v129;
LABEL_241:
                  (*(void (**)(void **__return_ptr, _QWORD, char **))(**(_QWORD **)(v2 + 48) + 344))(__p, *(_QWORD *)(v2 + 48), &v145);
                  v48 = LODWORD(__p[0]) == 0;
                  if (SHIBYTE(v160) < 0)
                    operator delete(__p[1]);
                  MEMORY[0x19AEA5D0C](v161);
LABEL_244:
                  MEMORY[0x19AEA5D0C](&v145);
                  return v48;
                }
                v129 = v92;
                while (v129)
                {
                  v130 = *v124;
                  *v129 = *v124;
                  if (v130)
                  {
                    do
                      v131 = __ldxr(v130);
                    while (__stxr(v131 + 1, v130));
                  }
                  ++v124;
                  ++v129;
                  if (v124 == (unsigned int **)v87)
                    goto LABEL_223;
                }
              }
            }
          }
LABEL_224:
          __break(1u);
LABEL_225:
          v151 = (unsigned int **)v12;
          goto LABEL_241;
        }
      }
    }
  }
  return 0;
}

WTF::StringImpl *WebCore::LibWebRTCPeerConnectionBackend::gatherDecoderImplementationName(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v2 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(v2 + 48))
  {
    v3 = *a2;
    *a2 = 0;
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = &off_1E3363528;
    v4[1] = v3;
    v5 = operator new();
    *(_QWORD *)v5 = off_1E3363358;
    *(_QWORD *)(v5 + 8) = v4;
    *(_DWORD *)(v5 + 16) = 0;
    v6 = (unsigned int *)(v5 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 48) + 160))(*(_QWORD *)(v2 + 48), v5);
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  else
  {
    v10 = 0;
    (*(void (**)(_QWORD, WTF::StringImpl **))(*(_QWORD *)*a2 + 16))(*a2, &v10);
    result = v10;
    v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::LibWebRTCPeerConnectionBackend::getStats(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;

  v2 = *(_QWORD *)(result + 88);
  v3 = *(_QWORD *)(v2 + 48);
  if (v3)
  {
    v4 = *a2;
    *a2 = 0;
    v5 = (unsigned int *)(v2 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
    v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v7 = &off_1E3363500;
    v7[1] = v4;
    v7[2] = v2;
    v8 = operator new();
    *(_QWORD *)v8 = off_1E3363358;
    *(_QWORD *)(v8 + 8) = v7;
    *(_DWORD *)(v8 + 16) = 0;
    v9 = (unsigned int *)(v8 + 16);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 160))(v3, v8);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  return result;
}

void (***WebCore::LibWebRTCPeerConnectionBackend::getStats(void (***result)(_QWORD), uint64_t a2, uint64_t *a3))(_QWORD)
{
  void (***v4)(_QWORD);
  uint64_t v5;
  void (**v6)(_QWORD);
  void (*v7)(_QWORD);
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  void (**v15)(_QWORD);
  void (*v16)(_QWORD);
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  void (***v25)(_QWORD);

  v4 = result;
  v5 = *(_QWORD *)(a2 + 64);
  if (v5 && (result = *(void (****)(_QWORD))(v5 + 24)) != 0)
  {
    v6 = v4[11];
    v7 = v6[6];
    if (v7)
    {
      v25 = *(void (****)(_QWORD))(v5 + 24);
      (**result)(result);
      v8 = *a3;
      *a3 = 0;
      v9 = (unsigned int *)(v6 + 1);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v11 = &off_1E3363500;
      v11[1] = v8;
      v11[2] = v6;
      v12 = operator new();
      *(_QWORD *)v12 = off_1E3363358;
      *(_QWORD *)(v12 + 8) = v11;
      *(_DWORD *)(v12 + 16) = 0;
      v13 = (unsigned int *)(v12 + 16);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      v24 = v12;
      (*(void (**)(void (*)(_QWORD), void (****)(_QWORD), uint64_t *))(*(_QWORD *)v7 + 168))(v7, &v25, &v24);
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      result = v25;
      if (v25)
        return (void (***)(_QWORD))((uint64_t (*)(_QWORD))(*v25)[1])(v25);
    }
  }
  else
  {
    v15 = v4[11];
    v16 = v15[6];
    if (v16)
    {
      v17 = *a3;
      *a3 = 0;
      v18 = (unsigned int *)(v15 + 1);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
      v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v20 = &off_1E3363500;
      v20[1] = v17;
      v20[2] = v15;
      v21 = operator new();
      *(_QWORD *)v21 = off_1E3363358;
      *(_QWORD *)(v21 + 8) = v20;
      *(_DWORD *)(v21 + 16) = 0;
      v22 = (unsigned int *)(v21 + 16);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      (*(void (**)(void (*)(_QWORD), uint64_t))(*(_QWORD *)v16 + 160))(v16, v21);
      return (void (***)(_QWORD))(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    }
  }
  return result;
}

{
  void (***v4)(_QWORD);
  uint64_t v5;
  void (**v6)(_QWORD);
  void (*v7)(_QWORD);
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  void (**v15)(_QWORD);
  void (*v16)(_QWORD);
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  void (***v25)(_QWORD);

  v4 = result;
  v5 = *(_QWORD *)(a2 + 40);
  if (v5 && (result = *(void (****)(_QWORD))(v5 + 8)) != 0)
  {
    v6 = v4[11];
    v7 = v6[6];
    if (v7)
    {
      v25 = *(void (****)(_QWORD))(v5 + 8);
      (**result)(result);
      v8 = *a3;
      *a3 = 0;
      v9 = (unsigned int *)(v6 + 1);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v11 = &off_1E3363500;
      v11[1] = v8;
      v11[2] = v6;
      v12 = operator new();
      *(_QWORD *)v12 = off_1E3363358;
      *(_QWORD *)(v12 + 8) = v11;
      *(_DWORD *)(v12 + 16) = 0;
      v13 = (unsigned int *)(v12 + 16);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      v24 = v12;
      (*(void (**)(void (*)(_QWORD), void (****)(_QWORD), uint64_t *))(*(_QWORD *)v7 + 176))(v7, &v25, &v24);
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      result = v25;
      if (v25)
        return (void (***)(_QWORD))((uint64_t (*)(_QWORD))(*v25)[1])(v25);
    }
  }
  else
  {
    v15 = v4[11];
    v16 = v15[6];
    if (v16)
    {
      v17 = *a3;
      *a3 = 0;
      v18 = (unsigned int *)(v15 + 1);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 + 1, v18));
      v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v20 = &off_1E3363500;
      v20[1] = v17;
      v20[2] = v15;
      v21 = operator new();
      *(_QWORD *)v21 = off_1E3363358;
      *(_QWORD *)(v21 + 8) = v20;
      *(_DWORD *)(v21 + 16) = 0;
      v22 = (unsigned int *)(v21 + 16);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      (*(void (**)(void (*)(_QWORD), uint64_t))(*(_QWORD *)v16 + 160))(v16, v21);
      return (void (***)(_QWORD))(*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    }
  }
  return result;
}

void WebCore::LibWebRTCPeerConnectionBackend::doSetLocalDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char *v5;
  size_t v6;
  WTF::StringImpl *v7;
  char *p_p;
  _QWORD *v9;
  void (**v10)(void *);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v16;
  WTF *v17;
  void *v18;
  WTF *v19;
  void (**v20)(WTF *);
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  _QWORD *v28;
  void *v29;
  WTF *v30;
  void *__p;
  WTF::StringImpl *v32;
  unint64_t v33;
  void *v34;
  void *v35[2];
  void *v36[2];
  __int128 v37;

  v3 = *(_QWORD *)(a1 + 88);
  if (a2)
  {
    *(_OWORD *)v36 = 0u;
    v37 = 0u;
    *(_OWORD *)v35 = 0u;
    WTF::String::utf8();
    if (v30)
    {
      v5 = (char *)v30 + 16;
      v6 = strlen((const char *)v30 + 16);
      if (v6 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_49;
      v7 = (WTF::StringImpl *)v6;
      if (v6 > 0x16)
      {
        v12 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v6 | 7) != 0x17)
          v12 = v6 | 7;
        v13 = v12 + 1;
        p_p = (char *)operator new(v12 + 1);
        v32 = v7;
        v33 = v13 | 0x8000000000000000;
        __p = p_p;
      }
      else
      {
        HIBYTE(v33) = v6;
        p_p = (char *)&__p;
      }
      v14 = (char *)v7 + (_QWORD)p_p;
      if (p_p > v5 || v14 <= v5)
      {
        if (v7)
          memmove(p_p, v5, (size_t)v7);
        *v14 = 0;
        webrtc::CreateSessionDescription();
        if (SHIBYTE(v33) < 0)
          operator delete(__p);
        v17 = v30;
        v30 = 0;
        if (v17)
        {
          if (*(_DWORD *)v17 == 1)
            WTF::fastFree(v17, v16);
          else
            --*(_DWORD *)v17;
        }
        v18 = v34;
        if (v34)
        {
          if (*(_DWORD *)(a2 + 16) != 2)
          {
LABEL_26:
            v20 = *(void (***)(WTF *))(v3 + 72);
            v19 = (WTF *)(v3 + 72);
            v21 = *((_QWORD *)v19 - 3);
            v34 = 0;
            v30 = v19;
            __p = v18;
            (*v20)(v19);
            (*(void (**)(uint64_t, void **, WTF **))(*(_QWORD *)v21 + 280))(v21, &__p, &v30);
            if (v30)
              (*(void (**)(WTF *))(*(_QWORD *)v30 + 8))(v30);
            v22 = __p;
            __p = 0;
            if (v22)
              (*(void (**)(void *))(*(_QWORD *)v22 + 8))(v22);
            goto LABEL_38;
          }
          if ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 48) + 248))(*(_QWORD *)(v3 + 48)))
          {
            v18 = v34;
            goto LABEL_26;
          }
          v28 = *(_QWORD **)(v3 + 32);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          LOBYTE(__p) = 8;
          WebCore::PeerConnectionBackend::setLocalDescriptionFailed(v28, (uint64_t *)&__p);
          v27 = v32;
          v32 = 0;
          if (!v27)
          {
LABEL_38:
            v29 = v34;
            v34 = 0;
            if (v29)
              (*(void (**)(void *))(*(_QWORD *)v29 + 8))(v29);
            if (SHIBYTE(v37) < 0)
              operator delete(v36[1]);
            if (SHIBYTE(v36[0]) < 0)
              operator delete(v35[0]);
            goto LABEL_44;
          }
        }
        else
        {
          v23 = *(_QWORD **)(v3 + 32);
          WTF::String::fromUTF8();
          LOBYTE(__p) = 30;
          v24 = v30;
          v30 = 0;
          v32 = v24;
          WebCore::PeerConnectionBackend::setLocalDescriptionFailed(v23, (uint64_t *)&__p);
          v26 = v32;
          v32 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, v25);
            else
              *(_DWORD *)v26 -= 2;
          }
          v27 = v30;
          v30 = 0;
          if (!v27)
            goto LABEL_38;
        }
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v25);
        else
          *(_DWORD *)v27 -= 2;
        goto LABEL_38;
      }
    }
    __break(1u);
LABEL_49:
    abort();
  }
  v10 = *(void (***)(void *))(v3 + 72);
  v9 = (_QWORD *)(v3 + 72);
  v11 = *(v9 - 3);
  v35[0] = v9;
  (*v10)(v9);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 288))(v11, v35);
  if (v35[0])
    (*(void (**)(void *))(*(_QWORD *)v35[0] + 8))(v35[0]);
LABEL_44:
  *(_BYTE *)(a1 + 96) = 1;
}

void WebCore::LibWebRTCPeerConnectionBackend::doSetRemoteDescription(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  size_t v4;
  WTF::StringImpl *v5;
  char *p_p;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v11;
  WTF::StringImpl *v12;
  void *v13;
  void (**v14)(void);
  uint64_t v15;
  WTF::MonotonicTime *v16;
  double v17;
  double v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  void *v24;
  WTF::StringImpl *v25;
  void *__p;
  WTF::StringImpl *v27;
  unint64_t v28;
  void *v29;
  void *v30[2];
  void *v31[2];
  __int128 v32;

  v2 = *(_QWORD *)(a1 + 88);
  *(_OWORD *)v31 = 0u;
  v32 = 0u;
  *(_OWORD *)v30 = 0u;
  WTF::String::utf8();
  if (!v25)
    goto LABEL_49;
  v3 = (char *)v25 + 16;
  v4 = strlen((const char *)v25 + 16);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_50;
  v5 = (WTF::StringImpl *)v4;
  if (v4 > 0x16)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_p = (char *)operator new(v7 + 1);
    v27 = v5;
    v28 = v8 | 0x8000000000000000;
    __p = p_p;
  }
  else
  {
    HIBYTE(v28) = v4;
    p_p = (char *)&__p;
  }
  v9 = (char *)v5 + (_QWORD)p_p;
  if (p_p <= v3 && v9 > v3)
  {
LABEL_49:
    __break(1u);
LABEL_50:
    abort();
  }
  if (v5)
    memmove(p_p, v3, (size_t)v5);
  *v9 = 0;
  webrtc::CreateSessionDescription();
  if (SHIBYTE(v28) < 0)
    operator delete(__p);
  v12 = v25;
  v25 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 1)
      WTF::fastFree(v12, v11);
    else
      --*(_DWORD *)v12;
  }
  v13 = v29;
  if (v29)
  {
    v14 = *(void (***)(void))(v2 + 88);
    v15 = *(_QWORD *)(v2 + 48);
    v29 = 0;
    v25 = (WTF::StringImpl *)(v2 + 88);
    __p = v13;
    (*v14)();
    (*(void (**)(uint64_t, void **, WTF::StringImpl **))(*(_QWORD *)v15 + 312))(v15, &__p, &v25);
    if (v25)
      (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v25 + 8))(v25);
    v16 = (WTF::MonotonicTime *)__p;
    __p = 0;
    if (v16)
      v16 = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)v16 + 8))(v16);
    if ((*(_QWORD *)(v2 + 176) & 0xFFFFFFFFFFFFLL) != 0
      && *(double *)((*(_QWORD *)(v2 + 176) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
    {
      v16 = (WTF::MonotonicTime *)WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v2 + 144));
    }
    v17 = 1.0;
    if (!*(_BYTE *)(v2 + 256))
    {
      if (!*(_BYTE *)(*(_QWORD *)(v2 + 240) + 12)
        || !WebCore::LogWebRTC
        || (v17 = 2.0, byte_1ECE7CD50 <= 2u))
      {
        if (*(uint64_t *)(v2 + 232) >= -15000000)
          v17 = 4.0;
        else
          v17 = 10.0;
      }
    }
    *(double *)(v2 + 168) = v17;
    WTF::MonotonicTime::now(v16);
    WebCore::TimerBase::setNextFireTime(v2 + 144, v17 + v18);
  }
  else
  {
    v19 = *(_QWORD *)(v2 + 32);
    WTF::String::fromUTF8();
    LOBYTE(__p) = 9;
    v20 = v25;
    v25 = 0;
    v27 = v20;
    WebCore::PeerConnectionBackend::setRemoteDescriptionFailed(v19, (uint64_t *)&__p);
    v22 = v27;
    v27 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v21);
      else
        *(_DWORD *)v22 -= 2;
    }
    v23 = v25;
    v25 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v21);
      else
        *(_DWORD *)v23 -= 2;
    }
  }
  v24 = v29;
  v29 = 0;
  if (v24)
    (*(void (**)(void *))(*(_QWORD *)v24 + 8))(v24);
  if (SHIBYTE(v32) < 0)
    operator delete(v31[1]);
  if (SHIBYTE(v31[0]) < 0)
    operator delete(v30[0]);
  *(_BYTE *)(a1 + 97) = 1;
}

uint64_t WebCore::LibWebRTCPeerConnectionBackend::doCreateOffer(uint64_t a1, __int16 *a2)
{
  uint64_t v2;
  uint64_t v4;
  __int16 v5;
  __int16 v6;
  int v7;
  char v8;

  v2 = *(_QWORD *)(a1 + 88);
  *(_BYTE *)(v2 + 136) = 1;
  v4 = -1;
  v6 = 1;
  v7 = 1;
  v8 = 0;
  v5 = *a2;
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t *))(**(_QWORD **)(v2 + 48) + 264))(*(_QWORD *)(v2 + 48), v2 + 56, &v4);
}

WTF::StringImpl *WebCore::LibWebRTCPeerConnectionBackend::doCreateAnswer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  uint64_t v6;
  _QWORD v7[2];

  if (*(_BYTE *)(a1 + 97))
  {
    v2 = *(_QWORD *)(a1 + 88);
    *(_BYTE *)(v2 + 136) = 0;
    v3 = *(_QWORD *)(v2 + 48);
    v6 = -1;
    LODWORD(v7[0]) = 65537;
    *(_QWORD *)((char *)v7 + 4) = 1;
    return (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v3 + 272))(v3, v2 + 56, &v6);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v6) = 8;
    WebCore::PeerConnectionBackend::createAnswerFailed((_QWORD *)a1, &v6);
    result = (WTF::StringImpl *)v7[0];
    v7[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::LibWebRTCPeerConnectionBackend::close(WebCore::LibWebRTCPeerConnectionBackend *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = *((_QWORD *)this + 11);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 48) + 504))(*(_QWORD *)(v1 + 48));
  if ((*(_QWORD *)(v1 + 176) & 0xFFFFFFFFFFFFLL) != 0)
    return WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v1 + 144));
  return result;
}

WTF *WebCore::LibWebRTCPeerConnectionBackend::doStop(WebCore::LibWebRTCPeerConnectionBackend *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *result;
  WTF *v5;
  uint64_t v6;
  WebCore::MediaStream **v7;
  WebCore::MediaStream *v8;
  WTF::StringImpl *v9;
  bmalloc::api *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  WTF::StringImpl ***v16;
  uint64_t v17;
  WTF *v18;
  WTF::StringImpl **v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  WebCore::RTCRtpReceiver **v23;
  uint64_t v24;
  WebCore::RTCRtpReceiver *v25;
  bmalloc::api *v26;
  void *v27;

  v3 = *((_QWORD *)this + 11);
  result = *(WTF **)(v3 + 48);
  if (result)
  {
    if ((*(_QWORD *)(v3 + 176) & 0xFFFFFFFFFFFFLL) != 0)
    {
      WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v3 + 144));
      result = *(WTF **)(v3 + 48);
    }
    (*(void (**)(WTF *))(*(_QWORD *)result + 504))(result);
    result = *(WTF **)(v3 + 48);
    if (result)
      result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
    v5 = *(WTF **)(v3 + 104);
    *(_QWORD *)(v3 + 48) = 0;
    if (v5)
    {
      v6 = *(unsigned int *)(v3 + 112);
      *(_QWORD *)(v3 + 104) = 0;
      *(_QWORD *)(v3 + 112) = 0;
      *(_QWORD *)(v3 + 117) = 0;
      if ((_DWORD)v6)
      {
        v7 = (WebCore::MediaStream **)((char *)v5 + 8);
        do
        {
          v8 = *v7;
          *v7 = 0;
          if (v8)
          {
            if (*((_DWORD *)v8 + 22) == 1)
            {
              WebCore::MediaStream::~MediaStream(v8);
              bmalloc::api::isoDeallocate(v10, v11);
            }
            else
            {
              --*((_DWORD *)v8 + 22);
            }
          }
          v9 = *(v7 - 1);
          *(v7 - 1) = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 2)
              WTF::StringImpl::destroy(v9, a2);
            else
              *(_DWORD *)v9 -= 2;
          }
          v7 += 2;
          --v6;
        }
        while (v6);
      }
      result = (WTF *)WTF::fastFree(v5, a2);
    }
    v12 = *(_QWORD *)(v3 + 128);
    if (v12)
    {
      *(_QWORD *)(v3 + 128) = 0;
      v13 = *(unsigned int *)(v12 - 4);
      if ((_DWORD)v13)
      {
        for (i = 0; i != v13; ++i)
        {
          if (*(_QWORD *)(v12 + 24 * i) != -1)
          {
            v15 = v12 + 24 * i;
            v16 = (WTF::StringImpl ***)(v15 + 8);
            v17 = *(unsigned int *)(v15 + 20);
            if ((_DWORD)v17)
            {
              v19 = *v16;
              v20 = 8 * v17;
              do
              {
                v21 = *v19;
                *v19 = 0;
                if (v21)
                {
                  if (*(_DWORD *)v21 == 2)
                    WTF::StringImpl::destroy(v21, a2);
                  else
                    *(_DWORD *)v21 -= 2;
                }
                ++v19;
                v20 -= 8;
              }
              while (v20);
            }
            v18 = (WTF *)*v16;
            if (*v16)
            {
              *v16 = 0;
              *(_DWORD *)(v12 + 24 * i + 16) = 0;
              WTF::fastFree(v18, a2);
            }
          }
        }
      }
      result = (WTF *)WTF::fastFree((WTF *)(v12 - 16), a2);
    }
  }
  if (*((_DWORD *)this + 32))
  {
    v22 = *((unsigned int *)this + 33);
    if ((_DWORD)v22)
    {
      v23 = (WebCore::RTCRtpReceiver **)*((_QWORD *)this + 15);
      v24 = 8 * v22;
      do
      {
        v25 = *v23;
        *v23 = 0;
        if (v25)
        {
          if (*((_DWORD *)v25 + 2) == 1)
          {
            WebCore::RTCRtpReceiver::~RTCRtpReceiver(v25, a2);
            bmalloc::api::isoDeallocate(v26, v27);
          }
          else
          {
            --*((_DWORD *)v25 + 2);
          }
        }
        ++v23;
        v24 -= 8;
      }
      while (v24);
      *((_DWORD *)this + 33) = 0;
    }
    result = (WTF *)*((_QWORD *)this + 15);
    if (result)
    {
      *((_QWORD *)this + 15) = 0;
      *((_DWORD *)this + 32) = 0;
      return (WTF *)WTF::fastFree(result, a2);
    }
  }
  return result;
}

void WebCore::LibWebRTCPeerConnectionBackend::doAddIceCandidate(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  char *v5;
  size_t v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  void *IceCandidate;
  WTF *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (***v27)(_QWORD);
  void **v28;
  void **v29;
  uint64_t v30;
  void *v31;
  WTF::StringImpl *v32;
  char *v33;
  void *__p[2];
  unint64_t v35;
  WTF *v36;
  void *v37[2];
  void *v38[2];
  __int128 v39;
  void *v40;
  size_t v41;
  unint64_t v42;
  void **v43;
  int v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)v38 = 0u;
  v39 = 0u;
  *(_OWORD *)v37 = 0u;
  WTF::String::utf8();
  if (!v36)
    goto LABEL_54;
  v5 = (char *)v36 + 16;
  v6 = strlen((const char *)v36 + 16);
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_55;
  v7 = v6;
  if (v6 > 0x16)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    v8 = (char *)operator new(v9 + 1);
    v41 = v7;
    v42 = v10 | 0x8000000000000000;
    v40 = v8;
  }
  else
  {
    HIBYTE(v42) = v6;
    v8 = (char *)&v40;
  }
  v11 = &v8[v7];
  if (v8 <= v5 && v11 > v5)
    goto LABEL_54;
  if (v7)
    memmove(v8, v5, v7);
  *v11 = 0;
  WTF::String::utf8();
  if (!v33)
    goto LABEL_54;
  v13 = v33 + 16;
  v14 = strlen(v33 + 16);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_55;
  v15 = (char *)v14;
  if (v14 > 0x16)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    v16 = (char *)operator new(v17 + 1);
    __p[1] = v15;
    v35 = v18 | 0x8000000000000000;
    __p[0] = v16;
  }
  else
  {
    HIBYTE(v35) = v14;
    v16 = (char *)__p;
  }
  v19 = &v15[(_QWORD)v16];
  if (v16 <= v13 && v19 > v13)
  {
LABEL_54:
    __break(1u);
LABEL_55:
    abort();
  }
  if (v15)
    memmove(v16, v13, (size_t)v15);
  *v19 = 0;
  IceCandidate = (void *)webrtc::CreateIceCandidate();
  if (SHIBYTE(v35) < 0)
    operator delete(__p[0]);
  if (*(_DWORD *)v33 == 1)
    WTF::fastFree((WTF *)v33, v20);
  else
    --*(_DWORD *)v33;
  if (SHIBYTE(v42) < 0)
    operator delete(v40);
  v22 = v36;
  v36 = 0;
  if (!v22)
  {
LABEL_34:
    if (IceCandidate)
      goto LABEL_35;
    goto LABEL_46;
  }
  if (*(_DWORD *)v22 != 1)
  {
    --*(_DWORD *)v22;
    goto LABEL_34;
  }
  WTF::fastFree(v22, v20);
  if (IceCandidate)
  {
LABEL_35:
    v23 = *(_QWORD *)(a1 + 88);
    v24 = *(_QWORD *)(v23 + 48);
    __p[0] = IceCandidate;
    v25 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)(v25 + 8) = 1;
    *(_QWORD *)v25 = &off_1E3363618;
    v26 = *a3;
    *a3 = 0;
    *(_QWORD *)(v25 + 16) = v26;
    v27 = *(void (****)(_QWORD))(v23 + 48);
    if (v27)
      (**v27)(*(_QWORD *)(v23 + 48));
    v28 = (void **)operator new(0x18uLL);
    *v28 = &off_1E3363640;
    v28[1] = (void *)v25;
    v28[2] = v27;
    v43 = v28;
    (*(void (**)(uint64_t, void **, void **))(*(_QWORD *)v24 + 360))(v24, __p, &v40);
    v29 = v43;
    if (v43 == &v40)
    {
      v30 = 4;
      v29 = &v40;
    }
    else
    {
      if (!v43)
        goto LABEL_42;
      v30 = 5;
    }
    (*((void (**)(void))*v29 + v30))();
LABEL_42:
    v31 = __p[0];
    __p[0] = 0;
    if (v31)
      (*(void (**)(void *))(*(_QWORD *)v31 + 8))(v31);
    goto LABEL_49;
  }
LABEL_46:
  WTF::String::fromUTF8();
  LOBYTE(v41) = 30;
  v42 = (unint64_t)v32;
  v44 = 1;
  (*(void (**)(_QWORD, void **))(*(_QWORD *)*a3 + 16))(*a3, &v40);
  if (v44 != -1)
    ((void (*)(void **, size_t *))off_1E3363388[v44])(__p, &v41);
  v44 = -1;
LABEL_49:
  if (SHIBYTE(v39) < 0)
    operator delete(v38[1]);
  if (SHIBYTE(v38[0]) < 0)
    operator delete(v37[0]);
}

WTF::StringImpl *WebCore::LibWebRTCPeerConnectionBackend::createReceiver(uint64_t *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  void (***v18)(_QWORD);
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unsigned int *v25;
  unsigned int v26;
  WebCore::MediaStreamTrackPrivate *v27;
  void **p_p;
  uint64_t v29;
  unsigned int *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  WTF::StringImpl *result;
  WTF *v47;
  void *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WebCore::MediaStreamTrackPrivate *v51;
  WTF::StringImpl *v52;
  void *__p;
  char v54;
  void **v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2[2] + 40);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      v8 = v7 - 96;
    else
      v8 = 0;
  }
  else
  {
    v8 = 0;
  }
  if (*(_BYTE *)(v8 + 274))
  {
    __break(0xC471u);
    goto LABEL_76;
  }
  v9 = *a3;
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(*a3 + 8) + 32))(&v52);
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 8) + 64))(*(_QWORD *)(v9 + 8));
  if (v10 != 1)
  {
    if (!v10)
    {
      v51 = v52;
      (**(void (***)(WTF::StringImpl *))v52)(v52);
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v52 + 40))(&__p);
      WTF::String::fromUTF8();
      WebCore::RealtimeIncomingAudioSource::create((uint64_t *)&v51, &v49, (uint64_t *)&v50);
      v12 = v49;
      v49 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v11);
        else
          *(_DWORD *)v12 -= 2;
      }
      if (v54 < 0)
        operator delete(__p);
      v13 = *(_QWORD *)(v8 + 336);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 8);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 24);
          if (v15)
          {
            v16 = *(_QWORD *)(v15 + 8);
            if (v16)
            {
              v17 = v50;
              v18 = *(void (****)(_QWORD))(*(_QWORD *)(v16 + 296) + 176);
              if (v18)
                (**v18)(v18);
              v19 = *((_QWORD *)v17 + 55);
              *((_QWORD *)v17 + 55) = v18;
              if (v19)
                (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
            }
          }
        }
      }
      v20 = (uint64_t)v50;
      goto LABEL_29;
    }
    __break(0xC471u);
LABEL_76:
    JUMPOUT(0x1954BB434);
  }
  v51 = v52;
  (**(void (***)(WTF::StringImpl *))v52)(v52);
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v52 + 40))(&__p);
  WTF::String::fromUTF8();
  v20 = WTF::fastMalloc((WTF *)0x228);
  WebCore::RealtimeIncomingVideoSource::RealtimeIncomingVideoSource(v20, (uint64_t *)&v51, &v50);
  *(_QWORD *)v20 = off_1E3359260;
  *(_QWORD *)(v20 + 304) = &unk_1E3359420;
  *(_QWORD *)(v20 + 312) = &unk_1E3359458;
  *(_QWORD *)(v20 + 496) = 0;
  *(_QWORD *)(v20 + 504) = 0;
  *(_QWORD *)(v20 + 488) = 0;
  *(_BYTE *)(v20 + 512) = 0;
  *(_QWORD *)(v20 + 520) = 0;
  *(_QWORD *)(v20 + 536) = 0;
  *(_QWORD *)(v20 + 528) = 0;
  WebCore::RealtimeMediaSource::start((_BYTE *)v20);
  v22 = v50;
  v50 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v21);
    else
      *(_DWORD *)v22 -= 2;
  }
  if (v54 < 0)
    operator delete(__p);
  if ((*(_QWORD *)(*(_QWORD *)(v8 + 488) + 704) & 0x10000000) != 0)
    *(_BYTE *)(v20 + 464) = 1;
LABEL_29:
  v49 = (WTF::StringImpl *)v20;
  if (v51)
    (*(void (**)(WebCore::MediaStreamTrackPrivate *))(*(_QWORD *)v51 + 8))(v51);
  if (v52)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v52 + 8))(v52);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 80))(v20, 1);
  v23 = *(WTF::StringImpl **)(v20 + 176);
  if (v23)
    *(_DWORD *)v23 += 2;
  v52 = v23;
  v24 = (WTF::StringImpl *)WebCore::Document::logger((WebCore::Document *)(v8 - 192));
  v25 = (unsigned int *)((char *)v24 + 8);
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 + 1, v25));
  v50 = v24;
  v55 = 0;
  v27 = (WebCore::MediaStreamTrackPrivate *)WTF::fastMalloc((WTF *)0x190);
  v51 = (WebCore::MediaStreamTrackPrivate *)WebCore::MediaStreamTrackPrivate::MediaStreamTrackPrivate((uint64_t)v27, (uint64_t *)&v50, (uint64_t *)&v49, (uint64_t *)&v52, (uint64_t)&__p);
  WebCore::MediaStreamTrackPrivateSourceObserver::initialize(*((WebCore::MediaStreamTrackPrivateSourceObserver **)v51 + 5), v27);
  p_p = v55;
  if (v55 == &__p)
  {
    v29 = 4;
    p_p = &__p;
    goto LABEL_41;
  }
  if (v55)
  {
    v29 = 5;
LABEL_41:
    (*((void (**)(void))*p_p + v29))();
  }
  v30 = (unsigned int *)v50;
  v50 = 0;
  if (v30)
  {
    v31 = v30 + 2;
    do
    {
      v32 = __ldaxr(v31);
      v33 = v32 - 1;
    }
    while (__stlxr(v33, v31));
    if (!v33)
    {
      atomic_store(1u, v30 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
    }
  }
  WebCore::MediaStreamTrack::create(v8, (uint64_t *)&v51, 1, (WebCore::ContextDestructionObserver **)&__p);
  v34 = *a3;
  *a3 = 0;
  v36 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v36 + 8) = 1;
  *(_QWORD *)v36 = off_1E3361BC8;
  v37 = __p;
  __p = 0;
  *(_QWORD *)(v36 + 16) = 0;
  *(_QWORD *)(v36 + 24) = v37;
  *(_QWORD *)(v36 + 32) = 0;
  *(_QWORD *)(v36 + 40) = v34;
  v38 = a2[1];
  if (v38)
    goto LABEL_79;
  v38 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v38 = 1;
  *(_QWORD *)(v38 + 8) = a2;
  v39 = (unsigned int *)a2[1];
  a2[1] = v38;
  if (!v39)
    goto LABEL_79;
  do
  {
    v40 = __ldaxr(v39);
    v41 = v40 - 1;
  }
  while (__stlxr(v41, v39));
  if (!v41)
  {
    atomic_store(1u, v39);
    WTF::fastFree((WTF *)v39, v35);
  }
  v38 = a2[1];
  if (v38)
  {
LABEL_79:
    do
      v42 = __ldaxr((unsigned int *)v38);
    while (__stlxr(v42 + 1, (unsigned int *)v38));
  }
  *(_QWORD *)(v36 + 48) = v38;
  *(_QWORD *)(v36 + 56) = 0;
  *(_QWORD *)(v36 + 64) = 0;
  *(_QWORD *)(v36 + 72) = 0;
  v43 = a2[8];
  v44 = (unsigned int *)(v43 + 8);
  do
    v45 = __ldaxr(v44);
  while (__stlxr(v45 + 1, v44));
  *(_QWORD *)(v36 + 80) = v43;
  *(_QWORD *)(v36 + 88) = a2[9];
  *a1 = v36;
  if (__p)
  {
    if (*((_DWORD *)__p + 6) == 1)
      (*(void (**)(void))(*(_QWORD *)__p + 16))();
    else
      --*((_DWORD *)__p + 6);
  }
  if (v51)
  {
    if (*((_DWORD *)v51 + 2) == 1)
    {
      WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v51, v35);
      WTF::fastFree(v47, v48);
    }
    else
    {
      --*((_DWORD *)v51 + 2);
    }
  }
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
      WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v35);
    else
      *(_DWORD *)v52 -= 2;
  }
  result = v49;
  if (v49)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v49 + 144))(v49);
  return result;
}

void sub_1954BB494(_Unwind_Exception *a1)
{
  uint64_t v1;

  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::RealtimeIncomingVideoSource,(WTF::DestructionThread)2>(*(unsigned __int8 **)(v1 + 320));
  _Unwind_Resume(a1);
}

void WebCore::LibWebRTCPeerConnectionBackend::createDataChannelHandler(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  size_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *__p[2];
  unint64_t v19;
  void *v20[3];
  char v21;
  uint64_t v22;
  char v23;
  _BYTE v24[24];
  void *v25;
  char v26;

  v4 = *(_QWORD *)(a1 + 88);
  WebCore::LibWebRTCDataChannelHandler::fromRTCDataChannelInit(a2, (uint64_t)v24);
  v5 = *(_QWORD *)(v4 + 48);
  WTF::String::utf8();
  if (!v17)
    goto LABEL_31;
  v6 = v17 + 16;
  v7 = strlen(v17 + 16);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_32;
  v8 = (char *)v7;
  if (v7 > 0x16)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v9 = (char *)operator new(v10 + 1);
    __p[1] = v8;
    v19 = v11 | 0x8000000000000000;
    __p[0] = v9;
  }
  else
  {
    HIBYTE(v19) = v7;
    v9 = (char *)__p;
  }
  v12 = &v8[(_QWORD)v9];
  if (v9 <= v6 && v12 > v6)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    abort();
  }
  if (v8)
    memmove(v9, v6, (size_t)v8);
  *v12 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, void **, _BYTE *))(*(_QWORD *)v5 + 192))(v20, v5, __p, v24);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  if (*(_DWORD *)v17 == 1)
    WTF::fastFree((WTF *)v17, v14);
  else
    --*(_DWORD *)v17;
  if (!LODWORD(v20[0]))
  {
    if (v23)
    {
      v16 = v22;
      v22 = 0;
      v15 = WTF::fastMalloc((WTF *)0x60);
      *(_QWORD *)v15 = off_1E3362610;
      *(_QWORD *)(v15 + 8) = &unk_1E3362670;
      *(_QWORD *)(v15 + 16) = v16;
      *(_WORD *)(v15 + 24) = 0;
      *(_QWORD *)(v15 + 32) = 0;
      *(_QWORD *)(v15 + 56) = 0;
      *(_QWORD *)(v15 + 64) = 0;
      *(_QWORD *)(v15 + 48) = 0;
      *(_QWORD *)(v15 + 80) = 0;
      *(_QWORD *)(v15 + 88) = 0;
      WebCore::LibWebRTCDataChannelHandler::checkState((WebCore::LibWebRTCDataChannelHandler *)v15);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v15 + 16) + 32))(*(_QWORD *)(v15 + 16), v15 + 8);
      goto LABEL_22;
    }
    goto LABEL_31;
  }
  v15 = 0;
LABEL_22:
  *a3 = v15;
  if (v23 && v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  if (v21 < 0)
    operator delete(v20[1]);
  if (v26 < 0)
    operator delete(v25);
}

WebCore::RTCRtpTransceiver *WebCore::LibWebRTCPeerConnectionBackend::addTrack@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  char **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  WebCore::MediaStreamTrackPrivate *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  const void *v29;
  size_t v30;
  void *v31;
  uint64_t v32;
  size_t v33;
  void *v34;
  char *v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  _QWORD *v42;
  void *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  WTF *v48;
  uint64_t v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  _QWORD *v53;
  _QWORD *v54;
  void *v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  size_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  __int128 v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  __int128 v76;
  char *v77;
  WTF *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  _QWORD *v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  char *v94;
  _BOOL4 v95;
  int v96;
  WTF *v97;
  void *v98;
  WebCore::RTCRtpTransceiver *result;
  WTF::StringImpl *v100;
  _DWORD *v101;
  void (***v102)(_QWORD);
  _QWORD *v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  WTF::StringImpl *v113;
  char *v114;
  void *v115;
  WTF *v116;
  uint64_t v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  _DWORD *v122;
  uint64_t v123;
  void *v124;
  _DWORD *v125;
  WTF::StringImpl *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  WTF *v130;
  void *v131;
  bmalloc::api *v132;
  void *v133;
  _QWORD *v134;
  void *v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  _QWORD *v140;
  uint64_t v141;
  _QWORD *v142;
  WTF::StringImpl *v143;
  WTF::StringImpl *v144;
  void *__p[2];
  unint64_t v146;
  char v147;
  char *v148;
  char v149;
  const char *v150;
  uint64_t v151;
  char *v152;
  char *v153;
  const char *v154;
  uint64_t v155;
  int v156;

  v7 = WTF::fastMalloc((WTF *)0xE8);
  *(_QWORD *)v7 = off_1E33630D0;
  *(_QWORD *)(v7 + 8) = 0;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
    goto LABEL_246;
  v8 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v8 = 1;
  *(_QWORD *)(v8 + 8) = a1;
  v10 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  if (!v10)
    goto LABEL_246;
  do
  {
    v11 = __ldaxr(v10);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v10));
  if (!v12)
  {
    atomic_store(1u, v10);
    WTF::fastFree((WTF *)v10, v9);
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
LABEL_246:
    do
      v13 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v13 + 1, (unsigned int *)v8));
  }
  *(_QWORD *)(v7 + 24) = 0;
  v14 = (char **)(v7 + 24);
  *(_QWORD *)(v7 + 16) = v8;
  *(_QWORD *)(v7 + 48) = 0;
  *(_BYTE *)(v7 + 56) = 0;
  *(_BYTE *)(v7 + 224) = 0;
  *(_QWORD *)(v7 + 32) = 0;
  *(_DWORD *)(v7 + 40) = 0;
  v141 = a2;
  v142 = *(_QWORD **)(a1 + 88);
  v155 = 0;
  v156 = 0;
  v15 = *(_QWORD *)(a2 + 96);
  v140 = (_QWORD *)a1;
  if (!*(_BYTE *)(v15 + 64))
  {
    ++*(_DWORD *)(v15 + 8);
    v24 = WTF::fastMalloc((WTF *)0x140);
    *(_DWORD *)(v24 + 16) = 1;
    *(_WORD *)(v24 + 64) = 256;
    *(_BYTE *)(v24 + 66) = 0;
    *(_QWORD *)(v24 + 72) = 0;
    *(_QWORD *)(v24 + 80) = 0;
    *(_DWORD *)(v24 + 88) = 0;
    *(_QWORD *)v24 = off_1E341B4A0;
    *(_QWORD *)(v24 + 8) = &unk_1E341B5A8;
    *(_QWORD *)(v24 + 24) = &unk_1E341B5D8;
    *(_QWORD *)(v24 + 32) = 0;
    *(_QWORD *)(v24 + 40) = &unk_1E341B630;
    *(_QWORD *)(v24 + 48) = &unk_1E341B678;
    *(_QWORD *)(v24 + 56) = v15;
    v25 = WTF::fastMalloc((WTF *)0x180);
    WebCore::AudioSampleDataSource::AudioSampleDataSource(v25, 96000, v15, 2);
    *(_QWORD *)(v24 + 96) = v25;
    *(_BYTE *)(v24 + 104) = 0;
    *(_BYTE *)(v24 + 184) = 0;
    *(_BYTE *)(v24 + 192) = 0;
    *(_BYTE *)(v24 + 272) = 0;
    *(_BYTE *)(v24 + 312) = 0;
    *(_OWORD *)(v24 + 280) = 0u;
    *(_OWORD *)(v24 + 296) = 0u;
    v26 = v142[5];
    v27 = WTF::String::utf8();
    if (!v154)
      goto LABEL_223;
    v29 = v154 + 16;
    v30 = strlen(v154 + 16);
    if (v30 > 0x7FFFFFFFFFFFFFF7)
LABEL_237:
      abort();
    v31 = (void *)v30;
    if (v30 > 0x16)
    {
      v45 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v30 | 7) != 0x17)
        v45 = v30 | 7;
      v46 = v45 + 1;
      v27 = (unint64_t)operator new(v45 + 1);
      __p[1] = v31;
      v146 = v46 | 0x8000000000000000;
      __p[0] = (void *)v27;
    }
    else
    {
      HIBYTE(v146) = v30;
      v27 = (unint64_t)__p;
    }
    a1 = (unint64_t)v31 + v27;
    if (v27 <= (unint64_t)v29 && a1 > (unint64_t)v29)
      goto LABEL_223;
    if (v31)
      memmove((void *)v27, v29, (size_t)v31);
    *(_BYTE *)a1 = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, uint64_t))(*(_QWORD *)v26 + 112))(&v151, v26, __p, v24);
    v35 = (char *)v151;
    v151 = 0;
    if (SHIBYTE(v146) < 0)
      operator delete(__p[0]);
    v48 = (WTF *)v154;
    v154 = 0;
    if (v48)
    {
      if (*(_DWORD *)v48 == 1)
        WTF::fastFree(v48, v47);
      else
        --*(_DWORD *)v48;
    }
    if (v156 != -1)
    {
      if (v156 == 1)
      {
        v49 = v155;
        v155 = v24;
        if (v49)
        {
          v50 = (unsigned int *)(v49 + 16);
          do
          {
            v51 = __ldaxr(v50);
            v52 = v51 - 1;
          }
          while (__stlxr(v52, v50));
          v53 = v140;
          if (!v52)
          {
            atomic_store(1u, v50);
            v54 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v54 = off_1E3363888;
            v54[1] = v50;
            __p[0] = v54;
            WTF::ensureOnMainThread();
            v55 = __p[0];
            __p[0] = 0;
            if (v55)
              (*(void (**)(void *))(*(_QWORD *)v55 + 8))(v55);
            goto LABEL_65;
          }
          goto LABEL_66;
        }
LABEL_65:
        v53 = v140;
        goto LABEL_66;
      }
      ((void (*)(void **, uint64_t *))off_1E3363330[v156])(__p, &v155);
    }
    v155 = v24;
    v156 = 1;
    goto LABEL_65;
  }
  ++*(_DWORD *)(v15 + 8);
  __p[0] = (void *)v15;
  v16 = WTF::fastMalloc((WTF *)0x130);
  v17 = WebCore::RealtimeOutgoingVideoSource::RealtimeOutgoingVideoSource(v16, (uint64_t *)__p);
  *(_QWORD *)v17 = off_1E341B6B8;
  *(_QWORD *)(v17 + 8) = &unk_1E341B7A8;
  *(_QWORD *)(v17 + 16) = &unk_1E341B7D8;
  *(_QWORD *)(v17 + 32) = &unk_1E341B810;
  *(_QWORD *)(v17 + 48) = &unk_1E341B868;
  *(_QWORD *)(v17 + 56) = &unk_1E341B890;
  *(_QWORD *)(v17 + 256) = 0;
  *(_DWORD *)(v17 + 264) = 0;
  *(_QWORD *)(v17 + 296) = 0;
  *(_QWORD *)(v17 + 272) = 0;
  *(_QWORD *)(v17 + 280) = 0;
  v19 = (WebCore::MediaStreamTrackPrivate *)__p[0];
  __p[0] = 0;
  if (v19)
  {
    if (*((_DWORD *)v19 + 2) == 1)
    {
      WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v19, v18);
      WTF::fastFree(v130, v131);
    }
    else
    {
      --*((_DWORD *)v19 + 2);
    }
  }
  v20 = *(_QWORD *)(*(_QWORD *)(v142[4] + 16) + 40);
  if (v20 && (v21 = *(_QWORD *)(v20 + 8)) != 0)
  {
    v22 = (unsigned __int8 *)(v21 - 96);
    v23 = *(unsigned __int8 *)(v21 + 178);
    if (*(_BYTE *)(v21 + 178))
    {
      if (v23 == 1 || v23 == 2)
        ++*(_DWORD *)(v21 + 216);
    }
    else
    {
      *(_DWORD *)(v21 - 264) += 2;
    }
    a1 = 0;
    if ((*(_DWORD *)((*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v22 + 136))(v22) + 488) & 0x1000) != 0)
      *(_BYTE *)(v16 + 216) = 0;
  }
  else
  {
    v22 = 0;
    a1 = 1;
  }
  v32 = v142[5];
  v154 = (const char *)v16;
  (**(void (***)(uint64_t))v16)(v16);
  v27 = WTF::String::utf8();
  if (!v151)
    goto LABEL_223;
  v33 = strlen((const char *)(v151 + 16));
  (*(void (**)(void **__return_ptr, uint64_t, const char **, uint64_t, size_t))(*(_QWORD *)v32 + 96))(__p, v32, &v154, v151 + 16, v33);
  v35 = (char *)__p[0];
  __p[0] = 0;
  v36 = (WTF *)v151;
  v151 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 1)
      WTF::fastFree(v36, v34);
    else
      --*(_DWORD *)v36;
  }
  v37 = v7;
  if (v154)
    (*(void (**)(const char *))(*(_QWORD *)v154 + 8))(v154);
  if (v156 != -1)
  {
    if (v156 == 2)
    {
      v38 = v155;
      v155 = v16;
      if (v38)
      {
        v39 = (unsigned int *)(v38 + 24);
        do
        {
          v40 = __ldaxr(v39);
          v41 = v40 - 1;
        }
        while (__stlxr(v41, v39));
        if (!v41)
        {
          atomic_store(1u, v39);
          v42 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v42 = off_1E33638B0;
          v42[1] = v39;
          __p[0] = v42;
          WTF::ensureOnMainThread();
          v43 = __p[0];
          __p[0] = 0;
          if (v43)
            (*(void (**)(void *))(*(_QWORD *)v43 + 8))(v43);
        }
      }
      goto LABEL_39;
    }
    ((void (*)(void **, uint64_t *))off_1E3363330[v156])(__p, &v155);
  }
  v155 = v16;
  v156 = 2;
LABEL_39:
  if ((a1 & 1) == 0)
  {
    v44 = v22[274];
    v7 = v37;
    if (!v22[274])
    {
      if (*((_DWORD *)v22 - 42) == 2)
      {
        if ((*((_WORD *)v22 - 81) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)(v22 - 192), v34);
      }
      else
      {
        *((_DWORD *)v22 - 42) -= 2;
      }
      goto LABEL_65;
    }
    if (v44 == 1)
    {
      if (*((_DWORD *)v22 + 78) == 1)
        (*(void (**)(unsigned __int8 *))(*(_QWORD *)v22 + 40))(v22);
      else
        --*((_DWORD *)v22 + 78);
      goto LABEL_65;
    }
    if (v44 == 2)
      WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)v22 + 78);
  }
  v53 = v140;
  v7 = v37;
LABEL_66:
  WebCore::LibWebRTCRtpSenderBackend::setSource(v7, (uint64_t)&v155);
  v56 = *(_QWORD *)(v7 + 24);
  if (v56)
  {
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v56 + 32))(v56, v35);
    if (v35)
      (*(void (**)(char *))(*(_QWORD *)v35 + 8))(v35);
    LOBYTE(a1) = 1;
    goto LABEL_139;
  }
  v137 = v35;
  v138 = a4;
  v151 = 0;
  v152 = 0;
  v153 = 0;
  v57 = *a3;
  if (*a3)
    v58 = (uint64_t)(*a3 + 2);
  else
    v58 = 0;
  v136 = v7;
  if (v57)
    a4 = (uint64_t)&(*a3)[2 * *v57 + 2];
  else
    a4 = 0;
  if (v58 != a4)
  {
    v59 = 0;
    v7 = 0x7FFFFFFFFFFFFFF7;
    a1 = 0xAAAAAAAAAAAAAAALL;
    v35 = (char *)0xAAAAAAAAAAAAAAABLL;
    do
    {
      v27 = WTF::String::utf8();
      if (!v150)
        goto LABEL_223;
      v60 = (char *)(v150 + 16);
      v61 = strlen(v150 + 16);
      if (v61 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_237;
      v62 = (char *)v61;
      if (v61 > 0x16)
      {
        v63 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v61 | 7) != 0x17)
          v63 = v61 | 7;
        v64 = v63 + 1;
        v27 = (unint64_t)operator new(v63 + 1);
        __p[1] = v62;
        v146 = v64 | 0x8000000000000000;
        __p[0] = (void *)v27;
      }
      else
      {
        HIBYTE(v146) = v61;
        v27 = (unint64_t)__p;
      }
      v65 = &v62[v27];
      if (v27 <= (unint64_t)v60 && v65 > v60)
        goto LABEL_223;
      if (v62)
        v27 = (unint64_t)memmove((void *)v27, v60, (size_t)v62);
      *v65 = 0;
      if (v59 >= v153)
      {
        v68 = v151;
        v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v59[-v151] >> 3);
        v70 = v69 + 1;
        if (v69 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_237;
        if (0x5555555555555556 * ((uint64_t)&v153[-v151] >> 3) > v70)
          v70 = 0x5555555555555556 * ((uint64_t)&v153[-v151] >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v153[-v151] >> 3) >= 0x555555555555555)
          v71 = 0xAAAAAAAAAAAAAAALL;
        else
          v71 = v70;
        if (!v71)
          goto LABEL_223;
        if (v71 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v72 = 3 * v71;
        v73 = (char *)operator new(24 * v71);
        v74 = (uint64_t)&v73[24 * v69];
        *(_OWORD *)v74 = *(_OWORD *)__p;
        *(_QWORD *)(v74 + 16) = v146;
        __p[0] = 0;
        __p[1] = 0;
        v146 = 0;
        v75 = (char *)(v74 + 24);
        if (v59 == (char *)v68)
        {
          v151 = v74;
          v152 = (char *)(v74 + 24);
          v153 = &v73[8 * v72];
        }
        else
        {
          do
          {
            v76 = *(_OWORD *)(v59 - 24);
            *(_QWORD *)(v74 - 8) = *((_QWORD *)v59 - 1);
            *(_OWORD *)(v74 - 24) = v76;
            v74 -= 24;
            *((_QWORD *)v59 - 2) = 0;
            *((_QWORD *)v59 - 1) = 0;
            *((_QWORD *)v59 - 3) = 0;
            v59 -= 24;
          }
          while (v59 != (char *)v68);
          v59 = (char *)v151;
          v77 = v152;
          v151 = v74;
          v152 = v75;
          v153 = &v73[8 * v72];
          while (v77 != v59)
          {
            if (*(v77 - 1) < 0)
              operator delete(*((void **)v77 - 3));
            v77 -= 24;
          }
        }
        if (v59)
          operator delete(v59);
        v59 = v75;
      }
      else
      {
        if (!v59)
          goto LABEL_223;
        v67 = *(_OWORD *)__p;
        *((_QWORD *)v59 + 2) = v146;
        *(_OWORD *)v59 = v67;
        v59 += 24;
        __p[1] = 0;
        v146 = 0;
        __p[0] = 0;
      }
      v152 = v59;
      if (SHIBYTE(v146) < 0)
        operator delete(__p[0]);
      v78 = (WTF *)v150;
      v150 = 0;
      if (v78)
      {
        if (*(_DWORD *)v78 == 1)
          WTF::fastFree(v78, v28);
        else
          --*(_DWORD *)v78;
      }
      v58 += 8;
    }
    while (v58 != a4);
  }
  v79 = v142[6];
  v150 = v137;
  (*(void (**)(void **__return_ptr, uint64_t, const char **, uint64_t *))(*(_QWORD *)v79 + 64))(__p, v79, &v150, &v151);
  v27 = (unint64_t)v150;
  if (v150)
    v27 = (*(uint64_t (**)(const char *))(*(_QWORD *)v150 + 8))(v150);
  a1 = LODWORD(__p[0]) == 0;
  a4 = v138;
  v53 = v140;
  if (!LODWORD(__p[0]))
  {
    if (v149)
    {
      v80 = v148;
      v148 = 0;
      v81 = *v14;
      *v14 = v80;
      if (v81)
        (*(void (**)(char *))(*(_QWORD *)v81 + 8))(v81);
      goto LABEL_126;
    }
LABEL_223:
    __break(1u);
    goto LABEL_224;
  }
LABEL_126:
  if (v149 && v148)
    (*(void (**)(char *))(*(_QWORD *)v148 + 8))(v148);
  if (v147 < 0)
    operator delete(__p[1]);
  v82 = v151;
  if (v151)
  {
    v83 = v152;
    v84 = (void *)v151;
    if (v152 != (char *)v151)
    {
      do
      {
        if (*((char *)v83 - 1) < 0)
          operator delete((void *)*(v83 - 3));
        v83 -= 3;
      }
      while (v83 != (_QWORD *)v82);
      v84 = (void *)v151;
    }
    v152 = (char *)v82;
    operator delete(v84);
  }
  v7 = v136;
LABEL_139:
  if (v156 != -1)
    ((void (*)(void **, uint64_t *))off_1E3363330[v156])(__p, &v155);
  if ((a1 & 1) == 0)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 33;
    v96 = 1;
LABEL_155:
    *(_DWORD *)(a4 + 16) = v96;
    WebCore::LibWebRTCRtpSenderBackend::~LibWebRTCRtpSenderBackend((WebCore::LibWebRTCRtpSenderBackend *)v7);
    return (WebCore::RTCRtpTransceiver *)WTF::fastFree(v97, v98);
  }
  v85 = v53[2];
  v86 = *(unsigned int *)(v85 + 116);
  if ((_DWORD)v86)
  {
    v87 = *(_QWORD *)(v85 + 104);
    v88 = 8 * v86;
    while (1)
    {
      a1 = *(_QWORD *)(*(_QWORD *)v87 + 40);
      v89 = *(_QWORD *)(a1 + 64);
      if (v89)
      {
        if (*(char **)(v89 + 24) == *v14)
          break;
      }
      v87 += 8;
      v88 -= 8;
      if (!v88)
        goto LABEL_147;
    }
    ++*(_DWORD *)(a1 + 8);
    WebCore::LibWebRTCRtpSenderBackend::setSource(v89, v7 + 32);
    ++*(_DWORD *)(v141 + 24);
    v101 = *(_DWORD **)(a1 + 32);
    if (v101)
    {
      *(_QWORD *)(a1 + 32) = v141;
      goto LABEL_160;
    }
    v125 = *(_DWORD **)(*(_QWORD *)(v141 + 96) + 48);
    if (v125)
      *v125 += 2;
    v126 = *(WTF::StringImpl **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v125;
    if (v126)
    {
      if (*(_DWORD *)v126 == 2)
      {
        WTF::StringImpl::destroy(v126, v100);
        v101 = *(_DWORD **)(a1 + 32);
        *(_QWORD *)(a1 + 32) = v141;
        if (v101)
        {
LABEL_160:
          if (v101[6] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v101 + 16))(v101);
          else
            --v101[6];
        }
LABEL_207:
        v127 = *(_QWORD *)(a1 + 72);
        if (v127)
        {
          v128 = *(_QWORD *)(v127 + 8);
          if (v128)
          {
            if (*(_DWORD *)(v128 + 80) != 5)
            {
              v129 = *(_QWORD *)(a1 + 64);
              if (v129)
              {
                (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v129 + 56))(v129, a3);
LABEL_215:
                v96 = 0;
                *(_QWORD *)a4 = a1;
                goto LABEL_155;
              }
            }
          }
        }
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v27 = (unint64_t)v144;
        if (!v144)
          goto LABEL_215;
        if (*(_DWORD *)v144 != 2)
        {
          *(_DWORD *)v144 -= 2;
          goto LABEL_215;
        }
LABEL_224:
        WTF::StringImpl::destroy((WTF::StringImpl *)v27, (WTF::StringImpl *)v28);
        goto LABEL_215;
      }
      *(_DWORD *)v126 -= 2;
    }
    *(_QWORD *)(a1 + 32) = v141;
    goto LABEL_207;
  }
LABEL_147:
  v90 = v7;
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(v53[11] + 48) + 144))(__p);
  v91 = __p[0];
  v92 = __p[1];
  if (__p[0] != __p[1])
  {
    v93 = a4;
    while (1)
    {
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*v91 + 48))(&v151);
      v35 = (char *)v151;
      v94 = *v14;
      v95 = v151 != (_QWORD)*v14;
      if (v151)
        (*(void (**)(uint64_t))(*(_QWORD *)v151 + 8))(v151);
      if (v35 == v94)
        break;
      if (++v91 == v92)
        goto LABEL_165;
    }
    v102 = (void (***)(_QWORD))*v91;
    if (*v91)
      (**v102)(*v91);
    v35 = (char *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v35 = off_1E3363208;
    *((_QWORD *)v35 + 1) = v102;
    v53 = v140;
LABEL_165:
    v91 = __p[0];
    a4 = v93;
    if (!__p[0])
      goto LABEL_172;
    goto LABEL_166;
  }
  v95 = 1;
  if (__p[0])
  {
LABEL_166:
    v103 = __p[1];
    v104 = v91;
    if (__p[1] != v91)
    {
      do
      {
        v106 = *--v103;
        v105 = v106;
        if (v106)
          (*(void (**)(uint64_t))(*(_QWORD *)v105 + 8))(v105);
      }
      while (v103 != v91);
      v104 = __p[0];
    }
    __p[1] = v91;
    operator delete(v104);
  }
LABEL_172:
  if (v95)
    v107 = 0;
  else
    v107 = v35;
  v108 = v53[2];
  ++*(_DWORD *)(v141 + 24);
  __p[0] = (void *)v141;
  v155 = v90;
  WebCore::RTCRtpSender::create(v108, (uint64_t *)__p, &v155, &v151);
  if (v155)
    (*(void (**)(uint64_t))(*(_QWORD *)v155 + 8))(v155);
  if (__p[0])
  {
    if (*((_DWORD *)__p[0] + 6) == 1)
      (*(void (**)(void))(*(_QWORD *)__p[0] + 16))();
    else
      --*((_DWORD *)__p[0] + 6);
  }
  v109 = v151;
  v110 = *(_QWORD *)(v151 + 72);
  if (v110
    && (v111 = *(_QWORD *)(v110 + 8)) != 0
    && *(_DWORD *)(v111 + 80) != 5
    && (v112 = *(_QWORD *)(v151 + 64)) != 0)
  {
    (*(void (**)(uint64_t, unsigned int **))(*(_QWORD *)v112 + 56))(v112, a3);
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    if (v143)
    {
      if (*(_DWORD *)v143 == 2)
        WTF::StringImpl::destroy(v143, v113);
      else
        *(_DWORD *)v143 -= 2;
    }
  }
  (*(void (**)(void **__return_ptr))(**((_QWORD **)v107 + 1) + 56))(__p);
  v114 = (char *)WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v114 = off_1E3362FA8;
  *((void **)v114 + 1) = __p[0];
  *((_QWORD *)v114 + 2) = 0;
  v154 = v114;
  WebCore::LibWebRTCPeerConnectionBackend::createReceiver(&v155, v53, (uint64_t *)&v154);
  v116 = (WTF *)v154;
  v154 = 0;
  if (v116)
  {
    v117 = *((_QWORD *)v116 + 2);
    *((_QWORD *)v116 + 2) = 0;
    if (v117)
    {
      v118 = (unsigned int *)(v117 + 8);
      do
      {
        v119 = __ldaxr(v118);
        v120 = v119 - 1;
      }
      while (__stlxr(v120, v118));
      if (!v120)
      {
        atomic_store(1u, v118);
        v134 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v134 = off_1E3361EB0;
        v134[1] = v118;
        __p[0] = v134;
        WTF::ensureOnMainThread();
        v135 = __p[0];
        __p[0] = 0;
        if (v135)
          (*(void (**)(void *))(*(_QWORD *)v135 + 8))(v135);
      }
    }
    v121 = *((_QWORD *)v116 + 1);
    if (v121)
      (*(void (**)(uint64_t))(*(_QWORD *)v121 + 8))(v121);
    WTF::fastFree(v116, v115);
    v109 = v151;
  }
  ++*(_DWORD *)(v109 + 8);
  v122 = (_DWORD *)bmalloc::api::isoAllocate();
  v122[2] = 1;
  *((_QWORD *)v122 + 2) = 0;
  *(_QWORD *)v122 = off_1E3361ED8;
  v122[6] = 0;
  *((_BYTE *)v122 + 28) = 0;
  *((_BYTE *)v122 + 32) = 0;
  v123 = v155;
  *((_QWORD *)v122 + 5) = v109;
  *((_QWORD *)v122 + 6) = v123;
  *((_BYTE *)v122 + 56) = 0;
  *((_QWORD *)v122 + 8) = v107;
  *((_QWORD *)v122 + 9) = 0;
  __p[0] = v122;
  WebCore::RTCPeerConnection::addInternalTransceiver(v53[2], (uint64_t *)__p);
  *(_QWORD *)a4 = v109;
  *(_DWORD *)(a4 + 16) = 0;
  result = (WebCore::RTCRtpTransceiver *)__p[0];
  __p[0] = 0;
  if (result)
  {
    if (*((_DWORD *)result + 2) == 1)
    {
      WebCore::RTCRtpTransceiver::~RTCRtpTransceiver(result, v124);
      return (WebCore::RTCRtpTransceiver *)bmalloc::api::isoDeallocate(v132, v133);
    }
    else
    {
      --*((_DWORD *)result + 2);
    }
  }
  return result;
}

void sub_1954BC5BC(_Unwind_Exception *a1, void *a2)
{
  WTF *v2;

  WTF::fastFree(v2, a2);
  _Unwind_Resume(a1);
}

void WebCore::LibWebRTCPeerConnectionBackend::addTransceiver(_QWORD *a1@<X0>, WTF::StringImpl **a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  WebCore::RTCRtpTransceiver *v11;
  const char *v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  unsigned int v16;
  WebCore::RTCRtpTransceiver *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  WebCore::RTCRtpTransceiver *v30;
  WTF::StringImpl *v31;
  bmalloc::api *v32;
  void *v33;
  WebCore::RTCRtpTransceiver *v34;
  _QWORD *v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40[7];
  WebCore::RTCRtpTransceiver *v41;
  _QWORD v42[3];
  uint64_t v43;
  void *__p;
  _QWORD *v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;

  v7 = *a2;
  if (*a2)
    *(_DWORD *)v7 += 2;
  v8 = a1[11];
  v9 = MEMORY[0x19AEA53F4](v7, "audio", 5) ^ 1;
  WebCore::fromRtpTransceiverInit((uint64_t)a3, v9, v40);
  v38 = 0;
  v39 = 0;
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t *))(**(_QWORD **)(v8 + 48) + 112))(&v43, *(_QWORD *)(v8 + 48), v9, v40);
  v10 = v43;
  if ((_DWORD)v43)
  {
    if ((v43 - 3) >= 6)
      LOBYTE(v11) = 30;
    else
      LOBYTE(v11) = 0xF0A0809200CuLL >> (8 * (v43 - 3));
    v12 = (const char *)webrtc::RTCError::message((webrtc::RTCError *)&v43);
    WTF::String::String((WTF::String *)v42, v12);
    v13 = (_QWORD *)v42[0];
    LOBYTE(v34) = (_BYTE)v11;
    v35 = (_QWORD *)v42[0];
    v37 = 1;
  }
  else
  {
    if (!v48)
    {
      __break(1u);
      return;
    }
    v14 = v47;
    v47 = 0;
    a3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *a3 = off_1E3363208;
    a3[1] = v14;
    WebCore::LibWebRTCRtpTransceiverBackend::createSenderBackend((uint64_t *)&v41, v14, *(_QWORD *)(v8 + 32), (uint64_t)&v38);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a3[1] + 56))(&v49);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v13 = off_1E3362FA8;
    v13[1] = v49;
    v13[2] = 0;
    v11 = v41;
    v41 = 0;
    v42[0] = 0;
    v34 = v11;
    v35 = v13;
    v42[1] = 0;
    v36 = a3;
    v37 = 0;
    WebCore::LibWebRTCMediaEndpoint::Backends::~Backends((WebCore::LibWebRTCMediaEndpoint::Backends *)&v41, v15);
  }
  if (v48 && v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  if (v46 < 0)
    operator delete(__p);
  if (v39 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E3363330[v39])(&v43, &v38);
  webrtc::RtpTransceiverInit::~RtpTransceiverInit((webrtc::RtpTransceiverInit *)v40);
  if (v10)
  {
    v35 = 0;
    *(_BYTE *)a4 = (_BYTE)v11;
    *(_QWORD *)(a4 + 8) = v13;
    v16 = 1;
    *(_DWORD *)(a4 + 16) = 1;
    goto LABEL_28;
  }
  v17 = v34;
  v35 = 0;
  v36 = 0;
  v34 = 0;
  __p = v13;
  v45 = a3;
  v18 = a1[2];
  v43 = 0;
  v19 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v19 + 8) = 1;
  *(_QWORD *)(v19 + 16) = 0;
  *(_QWORD *)(v19 + 24) = 0;
  *(_QWORD *)v19 = off_1E3361E70;
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)(v19 + 40) = 0;
  *(_QWORD *)(v19 + 48) = 0;
  *(_QWORD *)(v19 + 56) = v7;
  *(_QWORD *)(v19 + 64) = v17;
  v20 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(v18);
  if (v20)
  {
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 + 1, v20));
  }
  *(_QWORD *)(v19 + 80) = 0;
  *(_QWORD *)(v19 + 88) = 0;
  *(_QWORD *)(v19 + 72) = v20;
  v22 = *(_QWORD *)(v18 + 88);
  v23 = (unsigned int *)(v22 + 8);
  do
    v24 = __ldaxr(v23);
  while (__stlxr(v24 + 1, v23));
  *(_QWORD *)(v19 + 96) = v22;
  *(_QWORD *)(v19 + 104) = *(_QWORD *)(v18 + 96);
  WebCore::LibWebRTCPeerConnectionBackend::createReceiver(v40, a1, (uint64_t *)&__p);
  v25 = v45;
  v45 = 0;
  v26 = bmalloc::api::isoAllocate();
  *(_QWORD *)(v26 + 16) = 0;
  *(_QWORD *)v26 = off_1E3361ED8;
  *(_DWORD *)(v26 + 24) = 0;
  *(_BYTE *)(v26 + 28) = 0;
  *(_BYTE *)(v26 + 32) = 0;
  v27 = v40[0];
  *(_QWORD *)(v26 + 40) = v19;
  *(_QWORD *)(v26 + 48) = v27;
  *(_BYTE *)(v26 + 56) = 0;
  *(_QWORD *)(v26 + 64) = v25;
  *(_QWORD *)(v26 + 72) = 0;
  v28 = a1[2];
  *(_DWORD *)(v26 + 8) = 2;
  v41 = (WebCore::RTCRtpTransceiver *)v26;
  WebCore::RTCPeerConnection::addInternalTransceiver(v28, (uint64_t *)&v41);
  v30 = v41;
  v41 = 0;
  if (v30)
  {
    if (*((_DWORD *)v30 + 2) == 1)
    {
      WebCore::RTCRtpTransceiver::~RTCRtpTransceiver(v30, v29);
      bmalloc::api::isoDeallocate(v32, v33);
    }
    else
    {
      --*((_DWORD *)v30 + 2);
    }
  }
  *(_QWORD *)a4 = v26;
  *(_DWORD *)(a4 + 16) = 0;
  WebCore::LibWebRTCMediaEndpoint::Backends::~Backends((WebCore::LibWebRTCMediaEndpoint::Backends *)&v43, v29);
  v16 = v37;
  if (v37 != -1)
  {
    v7 = 0;
LABEL_28:
    (*(&off_1E33637E0 + v16))((int)&v43, (WebCore::LibWebRTCMediaEndpoint::Backends *)&v34);
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v31);
      else
        *(_DWORD *)v7 -= 2;
    }
  }
}

uint64_t WebCore::LibWebRTCPeerConnectionBackend::addTransceiver@<X0>(_QWORD *a1@<X0>, uint64_t **a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  const char *v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  WebCore::RTCRtpTransceiver *v27;
  bmalloc::api *v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34[7];
  WebCore::RTCRtpTransceiver *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  uint64_t v40;
  uint64_t v41;
  void *v42;
  _QWORD *v43;
  char v44;
  uint64_t v45;
  char v46;

  v8 = (uint64_t *)a1[11];
  v9 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)((*a2)[12] + 40) + 8) + 112);
  WebCore::LibWebRTCMediaEndpoint::createSourceAndRTCTrack((WebCore::LibWebRTCMediaEndpoint *)&v35, (WebCore::MediaStreamTrack *)v8, *a2);
  WebCore::fromRtpTransceiverInit((uint64_t)a3, v9, v34);
  v10 = v8[6];
  v11 = v37;
  v37 = 0;
  v40 = v11;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v10 + 96))(&v41, v10, &v40, v34);
  result = v40;
  if (v40)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v13 = v41;
  if ((_DWORD)v41)
  {
    if ((v41 - 3) >= 6)
      LOBYTE(v14) = 30;
    else
      LOBYTE(v14) = 0xF0A0809200CuLL >> (8 * (v41 - 3));
    v15 = (const char *)webrtc::RTCError::message((webrtc::RTCError *)&v41);
    WTF::String::String((WTF::String *)v39, v15);
    v16 = (_QWORD *)v39[0];
    LOBYTE(v30) = v14;
    v31 = (_QWORD *)v39[0];
    v33 = 1;
  }
  else
  {
    if (!v46)
    {
      __break(1u);
      return result;
    }
    v17 = v45;
    v45 = 0;
    a3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *a3 = off_1E3363208;
    a3[1] = v17;
    WebCore::LibWebRTCRtpTransceiverBackend::createSenderBackend(&v38, v17, v8[4], (uint64_t)&v35);
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a3[1] + 56))(&v30);
    v16 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v16 = off_1E3362FA8;
    v16[1] = v30;
    v16[2] = 0;
    v14 = v38;
    v38 = 0;
    v39[0] = 0;
    v30 = v14;
    v31 = v16;
    v39[1] = 0;
    v32 = a3;
    v33 = 0;
    WebCore::LibWebRTCMediaEndpoint::Backends::~Backends((WebCore::LibWebRTCMediaEndpoint::Backends *)&v38, v18);
  }
  if (v46 && v45)
    (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  if (v44 < 0)
    operator delete(v42);
  webrtc::RtpTransceiverInit::~RtpTransceiverInit((webrtc::RtpTransceiverInit *)v34);
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  if (v36 != -1)
    ((void (*)(uint64_t *, WebCore::RTCRtpTransceiver **))off_1E3363330[v36])(&v41, &v35);
  if (v13)
  {
    v31 = 0;
    *(_BYTE *)a4 = v14;
    *(_QWORD *)(a4 + 8) = v16;
    v19 = 1;
    *(_DWORD *)(a4 + 16) = 1;
  }
  else
  {
    v20 = v30;
    v31 = 0;
    v32 = 0;
    v30 = 0;
    v42 = v16;
    v43 = a3;
    v21 = a1[2];
    v41 = 0;
    v38 = v20;
    WebCore::RTCRtpSender::create(v21, (uint64_t *)a2, &v38, v34);
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
    WebCore::LibWebRTCPeerConnectionBackend::createReceiver(&v38, a1, (uint64_t *)&v42);
    v22 = v43;
    v43 = 0;
    v23 = bmalloc::api::isoAllocate();
    *(_QWORD *)(v23 + 16) = 0;
    *(_QWORD *)v23 = off_1E3361ED8;
    *(_DWORD *)(v23 + 24) = 0;
    *(_BYTE *)(v23 + 28) = 0;
    *(_BYTE *)(v23 + 32) = 0;
    v24 = v38;
    *(_QWORD *)(v23 + 40) = v34[0];
    *(_QWORD *)(v23 + 48) = v24;
    *(_BYTE *)(v23 + 56) = 0;
    *(_QWORD *)(v23 + 64) = v22;
    *(_QWORD *)(v23 + 72) = 0;
    v25 = a1[2];
    *(_DWORD *)(v23 + 8) = 2;
    v35 = (WebCore::RTCRtpTransceiver *)v23;
    WebCore::RTCPeerConnection::addInternalTransceiver(v25, (uint64_t *)&v35);
    v27 = v35;
    v35 = 0;
    if (v27)
    {
      if (*((_DWORD *)v27 + 2) == 1)
      {
        WebCore::RTCRtpTransceiver::~RTCRtpTransceiver(v27, v26);
        bmalloc::api::isoDeallocate(v28, v29);
      }
      else
      {
        --*((_DWORD *)v27 + 2);
      }
    }
    *(_QWORD *)a4 = v23;
    *(_DWORD *)(a4 + 16) = 0;
    WebCore::LibWebRTCMediaEndpoint::Backends::~Backends((WebCore::LibWebRTCMediaEndpoint::Backends *)&v41, v26);
    v19 = 0;
  }
  return (*(&off_1E33637E0 + v19))((int)&v41, (WebCore::LibWebRTCMediaEndpoint::Backends *)&v30);
}

uint64_t WebCore::LibWebRTCRtpTransceiverBackend::createSenderBackend(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  char v18;

  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 48))(&v17, a2);
  v7 = WTF::fastMalloc((WTF *)0xE8);
  *(_QWORD *)v7 = off_1E33630D0;
  *(_QWORD *)(v7 + 8) = 0;
  v8 = *(_QWORD *)(a3 + 8);
  if (v8)
    goto LABEL_14;
  v8 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v8 = 1;
  *(_QWORD *)(v8 + 8) = a3;
  v10 = *(unsigned int **)(a3 + 8);
  *(_QWORD *)(a3 + 8) = v8;
  if (!v10)
    goto LABEL_14;
  do
  {
    v11 = __ldaxr(v10);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v10));
  if (!v12)
  {
    atomic_store(1u, v10);
    WTF::fastFree((WTF *)v10, v9);
  }
  v8 = *(_QWORD *)(a3 + 8);
  if (v8)
  {
LABEL_14:
    do
      v13 = __ldaxr((unsigned int *)v8);
    while (__stlxr(v13 + 1, (unsigned int *)v8));
  }
  *(_BYTE *)(v7 + 32) = 0;
  v14 = v17;
  v17 = 0;
  *(_QWORD *)(v7 + 16) = v8;
  *(_QWORD *)(v7 + 24) = v14;
  *(_DWORD *)(v7 + 40) = -1;
  v15 = *(unsigned int *)(a4 + 8);
  if ((_DWORD)v15 != -1)
  {
    ((void (*)(char *))off_1E3363398[v15])(&v18);
    *(_DWORD *)(v7 + 40) = v15;
  }
  *(_QWORD *)(v7 + 48) = 0;
  *(_BYTE *)(v7 + 56) = 0;
  *(_BYTE *)(v7 + 224) = 0;
  WebCore::LibWebRTCRtpSenderBackend::startSource((WebCore::LibWebRTCRtpSenderBackend *)v7);
  *a1 = v7;
  result = v17;
  if (v17)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  return result;
}

void WebCore::LibWebRTCPeerConnectionBackend::collectTransceivers(WebCore::LibWebRTCPeerConnectionBackend *this)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  WebCore::RTCRtpTransceiver *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  WTF *v24;
  void *v25;
  WTF *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  WebCore::RTCRtpTransceiver *v36;
  bmalloc::api *v37;
  void *v38;
  bmalloc::api *v39;
  void *v40;
  WebCore::RTCRtpTransceiver *v41;
  WebCore::RTCRtpTransceiver *v42;
  char *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *__p;
  char *v49;
  WTF *v50;
  WebCore::RTCRtpTransceiver *v51;
  int v52;
  uint64_t v53;

  v1 = *((_QWORD *)this + 11);
  v2 = *(_QWORD *)(v1 + 48);
  if (v2)
  {
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v2 + 144))(&__p);
    v3 = (char *)__p;
    v4 = v49;
    if (__p != v49)
    {
      do
      {
        v5 = *(_QWORD *)(v1 + 32);
        v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v6 = off_1E3363550;
        v6[1] = v3;
        v7 = *(_QWORD *)(v5 + 16);
        v8 = *(unsigned int *)(v7 + 116);
        if ((_DWORD)v8)
        {
          v9 = *(uint64_t **)(v7 + 104);
          v10 = 8 * v8;
          while (!(*(unsigned int (**)(_QWORD *, _QWORD))(*v6 + 16))(v6, *(_QWORD *)(*v9 + 64)))
          {
            ++v9;
            v10 -= 8;
            if (!v10)
              goto LABEL_7;
          }
          v11 = *v9;
        }
        else
        {
LABEL_7:
          v11 = 0;
        }
        (*(void (**)(_QWORD *))(*v6 + 8))(v6);
        if (!v11)
        {
          (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)v3 + 56))(&v47);
          v12 = *(_QWORD **)(v1 + 32);
          v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v13 = off_1E3363208;
          v14 = *(_QWORD *)v3;
          *(_QWORD *)v3 = 0;
          v13[1] = v14;
          (*(void (**)(uint64_t))(*(_QWORD *)v47 + 64))(v47);
          v15 = v12[2];
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v16 = v51;
          v51 = 0;
          v52 = 0;
          WebCore::LibWebRTCRtpTransceiverBackend::createSenderBackend(&v53, v13[1], (uint64_t)v12, (uint64_t)&v51);
          v17 = v53;
          v18 = bmalloc::api::isoAllocate();
          *(_DWORD *)(v18 + 8) = 1;
          *(_QWORD *)(v18 + 16) = 0;
          *(_QWORD *)(v18 + 24) = 0;
          *(_QWORD *)v18 = off_1E3361E70;
          *(_QWORD *)(v18 + 32) = 0;
          *(_QWORD *)(v18 + 40) = 0;
          *(_QWORD *)(v18 + 48) = 0;
          *(_QWORD *)(v18 + 56) = v16;
          *(_QWORD *)(v18 + 64) = v17;
          v19 = (unsigned int *)WTF::WeakPtr<WebCore::Clipboard,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::Clipboard>(v15);
          if (v19)
          {
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 + 1, v19));
          }
          *(_QWORD *)(v18 + 80) = 0;
          *(_QWORD *)(v18 + 88) = 0;
          *(_QWORD *)(v18 + 72) = v19;
          v21 = *(_QWORD *)(v15 + 88);
          v22 = (unsigned int *)(v21 + 8);
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 + 1, v22));
          *(_QWORD *)(v18 + 96) = v21;
          *(_QWORD *)(v18 + 104) = *(_QWORD *)(v15 + 96);
          if (v52 != -1)
            ((void (*)(WTF **, WebCore::RTCRtpTransceiver **))off_1E3363330[v52])(&v50, &v51);
          (*(void (**)(WebCore::RTCRtpTransceiver **__return_ptr))(*(_QWORD *)v13[1] + 56))(&v51);
          v24 = (WTF *)WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v24 = off_1E3362FA8;
          *((_QWORD *)v24 + 1) = v51;
          *((_QWORD *)v24 + 2) = 0;
          v50 = v24;
          WebCore::LibWebRTCPeerConnectionBackend::createReceiver(&v53, v12, (uint64_t *)&v50);
          v26 = v50;
          v50 = 0;
          if (v26)
          {
            v27 = *((_QWORD *)v26 + 2);
            *((_QWORD *)v26 + 2) = 0;
            if (v27)
            {
              v28 = (unsigned int *)(v27 + 8);
              do
              {
                v29 = __ldaxr(v28);
                v30 = v29 - 1;
              }
              while (__stlxr(v30, v28));
              if (!v30)
              {
                atomic_store(1u, v28);
                v41 = (WebCore::RTCRtpTransceiver *)WTF::fastMalloc((WTF *)0x10);
                *(_QWORD *)v41 = off_1E3361EB0;
                *((_QWORD *)v41 + 1) = v28;
                v51 = v41;
                WTF::ensureOnMainThread();
                v42 = v51;
                v51 = 0;
                if (v42)
                  (*(void (**)(WebCore::RTCRtpTransceiver *))(*(_QWORD *)v42 + 8))(v42);
              }
            }
            v31 = *((_QWORD *)v26 + 1);
            if (v31)
              (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
            WTF::fastFree(v26, v25);
          }
          v32 = bmalloc::api::isoAllocate();
          *(_QWORD *)(v32 + 16) = 0;
          *(_QWORD *)v32 = off_1E3361ED8;
          *(_DWORD *)(v32 + 24) = 0;
          *(_BYTE *)(v32 + 28) = 0;
          *(_BYTE *)(v32 + 32) = 0;
          v33 = v53;
          *(_QWORD *)(v32 + 40) = v18;
          *(_QWORD *)(v32 + 48) = v33;
          *(_BYTE *)(v32 + 56) = 0;
          *(_QWORD *)(v32 + 64) = v13;
          *(_QWORD *)(v32 + 72) = 0;
          v34 = v12[2];
          *(_DWORD *)(v32 + 8) = 2;
          v51 = (WebCore::RTCRtpTransceiver *)v32;
          WebCore::RTCPeerConnection::addInternalTransceiver(v34, (uint64_t *)&v51);
          v36 = v51;
          v51 = 0;
          if (v36)
          {
            if (*((_DWORD *)v36 + 2) == 1)
            {
              WebCore::RTCRtpTransceiver::~RTCRtpTransceiver(v36, v35);
              bmalloc::api::isoDeallocate(v39, v40);
            }
            else
            {
              --*((_DWORD *)v36 + 2);
            }
          }
          if (*(_DWORD *)(v32 + 8) == 1)
          {
            WebCore::RTCRtpTransceiver::~RTCRtpTransceiver((WebCore::RTCRtpTransceiver *)v32, v35);
            bmalloc::api::isoDeallocate(v37, v38);
          }
          else
          {
            --*(_DWORD *)(v32 + 8);
          }
          if (v47)
            (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
        }
        v3 += 8;
      }
      while (v3 != v4);
      v3 = (char *)__p;
    }
    if (v3)
    {
      v43 = v49;
      v44 = v3;
      if (v49 != v3)
      {
        do
        {
          v46 = *((_QWORD *)v43 - 1);
          v43 -= 8;
          v45 = v46;
          if (v46)
            (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
        }
        while (v43 != v3);
        v44 = __p;
      }
      v49 = v3;
      operator delete(v44);
    }
  }
}

uint64_t WebCore::LibWebRTCPeerConnectionBackend::removeTrack(WebCore::LibWebRTCPeerConnectionBackend *this, WebCore::RTCRtpSender *a2)
{
  uint64_t v2;
  uint64_t v3;
  void (***v4)(_QWORD);
  uint64_t result;
  void (***v6)(_QWORD);
  void *v7[3];
  char v8;
  uint64_t v9;
  int v10;
  char v11;

  v2 = *((_QWORD *)a2 + 8);
  v3 = *(_QWORD *)(*((_QWORD *)this + 11) + 48);
  v4 = *(void (****)(_QWORD))(v2 + 24);
  v6 = v4;
  if (v4)
    (**v4)(v4);
  (*(void (**)(void **__return_ptr, uint64_t, void (****)(_QWORD)))(*(_QWORD *)v3 + 80))(v7, v3, &v6);
  if (v8 < 0)
    operator delete(v7[1]);
  if (v6)
    (*v6)[1](v6);
  v9 = 0;
  v10 = 0;
  result = WebCore::LibWebRTCRtpSenderBackend::setSource(v2, (uint64_t)&v9);
  if (v10 != -1)
    return ((uint64_t (*)(char *, uint64_t *))off_1E3363330[v10])(&v11, &v9);
  return result;
}

char *WebCore::LibWebRTCPeerConnectionBackend::applyRotationForOutgoingVideoSources(char *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned int *v8;
  unsigned int v9;
  char *v10;
  WebCore::LibWebRTCPeerConnectionBackend *v11;
  char v12;
  char *v13;

  v1 = *((_QWORD *)this + 2);
  v2 = *(unsigned int *)(v1 + 116);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)(v1 + 104);
    v4 = v3 + 8 * v2;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v3 + 40) + 64);
      if (v5)
      {
        v6 = *(unsigned int *)(v5 + 40);
        if ((_DWORD)v6 == -1)
        {
          v11 = (WebCore::LibWebRTCPeerConnectionBackend *)std::__throw_bad_variant_access[abi:sn180100]();
          return (char *)WebCore::LibWebRTCPeerConnectionBackend::canTrickleIceCandidates(v11);
        }
        v13 = &v12;
        this = (char *)((uint64_t (*)(char **, uint64_t))off_1E3363860[v6])(&v13, v5 + 32);
        if (this)
        {
          v7 = this;
          v8 = (unsigned int *)(this + 24);
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 + 1, v8));
          v10 = (char *)WTF::fastMalloc((WTF *)0x18);
          *(_QWORD *)v10 = &off_1E34198B0;
          *((_QWORD *)v10 + 1) = v7;
          *((_QWORD *)v10 + 2) = v7;
          v13 = v10;
          WTF::ensureOnMainThread();
          this = v13;
          v13 = 0;
          if (this)
            this = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)this + 8))(this);
        }
      }
      v3 += 8;
    }
    while (v3 != v4);
  }
  return this;
}

uint64_t WebCore::LibWebRTCPeerConnectionBackend::canTrickleIceCandidates(WebCore::LibWebRTCPeerConnectionBackend *this)
{
  uint64_t v1;
  uint64_t result;
  int v3;

  v1 = *((_QWORD *)this + 11);
  result = *(_QWORD *)(v1 + 48);
  if (!result)
    goto LABEL_4;
  if ((*(unsigned __int16 (**)(uint64_t))(*(_QWORD *)result + 464))(result) < 0x100u)
  {
    LOBYTE(result) = 0;
LABEL_4:
    v3 = 0;
    return result | (v3 << 8);
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 48) + 464))(*(_QWORD *)(v1 + 48));
  if ((unsigned __int16)result > 0xFFu)
  {
    v3 = 1;
    return result | (v3 << 8);
  }
  __break(1u);
  return result;
}

uint64_t WebCore::LibWebRTCPeerConnectionBackend::startGatheringStatLogs(WTF::MonotonicTime *a1, uint64_t *a2)
{
  WTF::MonotonicTime *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t result;
  BOOL v10;
  uint64_t v11;

  v3 = a1;
  if (!*((_QWORD *)a1 + 17))
  {
    v4 = *((_QWORD *)a1 + 11);
    *(_BYTE *)(v4 + 256) = 1;
    v5 = v4 + 144;
    v6 = 1.0;
    if ((*(_QWORD *)(v4 + 176) & 0xFFFFFFFFFFFFLL) != 0)
    {
      v11 = v4;
      if (*(double *)((*(_QWORD *)(v4 + 176) & 0xFFFFFFFFFFFFLL) + 8) != 0.0)
      {
        a1 = (WTF::MonotonicTime *)WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v4 + 144));
        v4 = v11;
        if (!*(_BYTE *)(v11 + 256))
        {
          if (!*(_BYTE *)(*(_QWORD *)(v11 + 240) + 12)
            || ((v6 = 2.0, WebCore::LogWebRTC) ? (v10 = byte_1ECE7CD50 > 2u) : (v10 = 0), !v10))
          {
            if (*(uint64_t *)(v11 + 232) >= -15000000)
              v6 = 4.0;
            else
              v6 = 10.0;
          }
        }
      }
    }
    *(double *)(v4 + 168) = v6;
    WTF::MonotonicTime::now(a1);
    WebCore::TimerBase::setNextFireTime(v5, v6 + v7);
  }
  v8 = *a2;
  *a2 = 0;
  result = *((_QWORD *)v3 + 17);
  *((_QWORD *)v3 + 17) = v8;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t WebCore::LibWebRTCPeerConnectionBackend::stopGatheringStatLogs(WebCore::LibWebRTCPeerConnectionBackend *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 17);
  if (result)
  {
    *(_BYTE *)(*((_QWORD *)this + 11) + 256) = 0;
    *((_QWORD *)this + 17) = 0;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void WebCore::LibWebRTCRtpReceiverBackend::~LibWebRTCRtpReceiverBackend(WebCore::LibWebRTCRtpReceiverBackend *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E3361EB0;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  v6 = *((_QWORD *)this + 1);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

void WebCore::LibWebRTCRtpReceiverBackend::~LibWebRTCRtpReceiverBackend(WebCore::LibWebRTCRtpReceiverBackend *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E3361EB0;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  v7 = *((_QWORD *)this + 1);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::LibWebRTCRtpReceiverBackend::getParameters@<X0>(WebCore::LibWebRTCRtpReceiverBackend *this@<X0>, uint64_t a2@<X8>)
{
  __n128 v3;
  _QWORD v5[21];

  (*(void (**)(_QWORD *__return_ptr))(**((_QWORD **)this + 1) + 80))(v5);
  WebCore::toRTCRtpParameters(v5, a2, v3);
  return MEMORY[0x19AEA5B80](v5);
}

void WebCore::LibWebRTCRtpReceiverBackend::getContributingSources(WebCore::LibWebRTCRtpReceiverBackend *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  (*(void (**)(uint64_t **__return_ptr))(**((_QWORD **)this + 1) + 112))(&v23);
  v3 = v23;
  v4 = v24;
  if (v23 != v24)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      if (*((_DWORD *)v3 + 3) == 1)
      {
        BYTE8(v21) = 0;
        LOBYTE(v22) = 0;
        v7 = *v3;
        v8 = *v3 / 0x3E8uLL;
        if (*v3 % 0x3E8uLL > 0x1F3)
          ++v8;
        if (-*v3 % 0x3E8uLL <= 0x1F4)
          v9 = 0;
        else
          v9 = -1;
        v10 = v9 - -v7 / 0x3E8uLL;
        if (v7 < 0)
          v11 = v10;
        else
          v11 = v8;
        *(double *)&v20 = (double)v11;
        *((_QWORD *)&v20 + 1) = *((unsigned int *)v3 + 18);
        *(_QWORD *)&v21 = *((unsigned int *)v3 + 2);
        if (*((unsigned __int16 *)v3 + 8) >= 0x100u)
        {
          v12 = 0.0;
          if (*((_WORD *)v3 + 8) != 127)
            v12 = __exp10((double)-(*((_WORD *)v3 + 8) / 0x14u));
          *((double *)&v21 + 1) = v12;
          LOBYTE(v22) = 1;
        }
        if (v6 == *(_DWORD *)(a2 + 8))
        {
          v13 = WTF::Vector<std::variant<double,WebCore::DOMPointInit>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v6 + 1, (unint64_t)&v20);
          v6 = *(_DWORD *)(a2 + 12);
          v5 = *(_QWORD *)a2;
          v14 = *(_QWORD *)a2 + 40 * v6;
          v15 = *((_QWORD *)v13 + 4);
          v16 = *((_OWORD *)v13 + 1);
          *(_OWORD *)v14 = *(_OWORD *)v13;
          *(_OWORD *)(v14 + 16) = v16;
          *(_QWORD *)(v14 + 32) = v15;
        }
        else
        {
          v17 = v5 + 40 * v6;
          v18 = v20;
          v19 = v21;
          *(_QWORD *)(v17 + 32) = v22;
          *(_OWORD *)v17 = v18;
          *(_OWORD *)(v17 + 16) = v19;
        }
        *(_DWORD *)(a2 + 12) = ++v6;
      }
      v3 += 10;
    }
    while (v3 != v4);
    v3 = v23;
  }
  if (v3)
  {
    v24 = v3;
    operator delete(v3);
  }
}

void WebCore::LibWebRTCRtpReceiverBackend::getSynchronizationSources(WebCore::LibWebRTCRtpReceiverBackend *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  char *v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t *v23;
  uint64_t *v24;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  (*(void (**)(uint64_t **__return_ptr))(**((_QWORD **)this + 1) + 112))(&v23);
  v3 = v23;
  v4 = v24;
  if (v23 != v24)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      if (!*((_DWORD *)v3 + 3))
      {
        BYTE8(v21) = 0;
        LOBYTE(v22) = 0;
        WORD4(v22) = 0;
        v7 = *v3;
        v8 = *v3 / 0x3E8uLL;
        if (*v3 % 0x3E8uLL > 0x1F3)
          ++v8;
        if (-*v3 % 0x3E8uLL <= 0x1F4)
          v9 = 0;
        else
          v9 = -1;
        v10 = v9 - -v7 / 0x3E8uLL;
        if (v7 < 0)
          v11 = v10;
        else
          v11 = v8;
        *(double *)&v20 = (double)v11;
        *((_QWORD *)&v20 + 1) = *((unsigned int *)v3 + 18);
        *(_QWORD *)&v21 = *((unsigned int *)v3 + 2);
        if (*((unsigned __int16 *)v3 + 8) >= 0x100u)
        {
          v12 = 0.0;
          if (*((_WORD *)v3 + 8) != 127)
            v12 = __exp10((double)-(*((_WORD *)v3 + 8) / 0x14u));
          *((double *)&v21 + 1) = v12;
          LOBYTE(v22) = 1;
        }
        if (v6 == *(_DWORD *)(a2 + 8))
        {
          v13 = WTF::Vector<WebCore::GPUBindGroupLayoutEntry,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v6 + 1, (unint64_t)&v20);
          v6 = *(_DWORD *)(a2 + 12);
          v5 = *(_QWORD *)a2;
          v14 = (_OWORD *)(*(_QWORD *)a2 + 48 * v6);
          v16 = *((_OWORD *)v13 + 1);
          v15 = *((_OWORD *)v13 + 2);
          *v14 = *(_OWORD *)v13;
          v14[1] = v16;
          v14[2] = v15;
        }
        else
        {
          v17 = (_OWORD *)(v5 + 48 * v6);
          v18 = v20;
          v19 = v22;
          v17[1] = v21;
          v17[2] = v19;
          *v17 = v18;
        }
        *(_DWORD *)(a2 + 12) = ++v6;
      }
      v3 += 10;
    }
    while (v3 != v4);
    v3 = v23;
  }
  if (v3)
  {
    v24 = v3;
    operator delete(v3);
  }
}

uint64_t WebCore::LibWebRTCRtpReceiverBackend::rtcRtpTransformBackend@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;

  v2 = this;
  if (!*(_QWORD *)(this + 16))
  {
    v4 = *(_QWORD *)(this + 8);
    if (v4)
      (**(void (***)(_QWORD))v4)(*(_QWORD *)(this + 8));
    v5 = WTF::fastMalloc((WTF *)0x70);
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 64))(v4);
    *(_DWORD *)(v5 + 8) = 1;
    *(_DWORD *)(v5 + 24) = this != 0;
    *(_DWORD *)(v5 + 28) = 0;
    *(_BYTE *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 40) = 0;
    *(_BYTE *)(v5 + 48) = 0;
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 72) = 0u;
    *(_DWORD *)(v5 + 88) = 1065353216;
    *(_QWORD *)v5 = off_1E3362FF0;
    *(_QWORD *)(v5 + 16) = &unk_1E3363078;
    *(_BYTE *)(v5 + 96) = 0;
    *(_QWORD *)(v5 + 104) = v4;
    v6 = *(_QWORD *)(v2 + 16);
    *(_QWORD *)(v2 + 16) = v5;
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 8);
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v13 = off_1E3361EB0;
        v13[1] = v7;
        v14 = (uint64_t)v13;
        WTF::ensureOnMainThread();
        this = v14;
        if (v14)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      }
    }
  }
  v10 = *(_QWORD *)(v2 + 16);
  v11 = (unsigned int *)(v10 + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *a2 = v10;
  return this;
}

_QWORD *WebCore::LibWebRTCRtpReceiverBackend::dtlsTransportBackend@<X0>(WebCore::LibWebRTCRtpReceiverBackend *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 1) + 40))(&v4);
  if (v4)
  {
    result = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *result = off_1E33626E0;
    result[1] = 0;
    result[2] = v4;
    result[3] = 0;
  }
  else
  {
    result = 0;
  }
  *a2 = result;
  return result;
}

void WebCore::LibWebRTCRtpReceiverTransformBackend::~LibWebRTCRtpReceiverTransformBackend(WebCore::LibWebRTCRtpReceiverTransformBackend *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 13);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = off_1E3363260;
  *((_QWORD *)this + 2) = &unk_1E33632E8;
  v4 = (WTF *)*((_QWORD *)this + 9);
  if (v4)
  {
    do
    {
      v5 = *(WTF **)v4;
      v6 = *((_QWORD *)v4 + 3);
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      WTF::fastFree(v4, a2);
      v4 = v5;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v7)
    WTF::fastFree(v7, a2);
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 13);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = off_1E3363260;
  *((_QWORD *)this + 2) = &unk_1E33632E8;
  v4 = (WTF *)*((_QWORD *)this + 9);
  if (v4)
  {
    do
    {
      v5 = *(WTF **)v4;
      v6 = *((_QWORD *)v4 + 3);
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      WTF::fastFree(v4, a2);
      v4 = v5;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v7)
    WTF::fastFree(v7, a2);
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  WTF::fastFree(this, a2);
}

void `non-virtual thunk to'WebCore::LibWebRTCRtpReceiverTransformBackend::~LibWebRTCRtpReceiverTransformBackend(WebCore::LibWebRTCRtpReceiverTransformBackend *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 11);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this - 2) = off_1E3363260;
  *(_QWORD *)this = &unk_1E33632E8;
  v4 = (WTF *)*((_QWORD *)this + 7);
  if (v4)
  {
    do
    {
      v5 = *(WTF **)v4;
      v6 = *((_QWORD *)v4 + 3);
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      WTF::fastFree(v4, a2);
      v4 = v5;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
    WTF::fastFree(v7, a2);
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 11);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this - 2) = off_1E3363260;
  *(_QWORD *)this = &unk_1E33632E8;
  v4 = (WTF *)*((_QWORD *)this + 7);
  if (v4)
  {
    do
    {
      v5 = *(WTF **)v4;
      v6 = *((_QWORD *)v4 + 3);
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      WTF::fastFree(v4, a2);
      v4 = v5;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
    WTF::fastFree(v7, a2);
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  WTF::fastFree((WebCore::LibWebRTCRtpReceiverTransformBackend *)((char *)this - 16), a2);
}

uint64_t WebCore::LibWebRTCRtpReceiverTransformBackend::setTransformableFrameCallback(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  void (**v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;

  v4 = (unsigned __int8 *)(a1 + 32);
  if (__ldaxr((unsigned __int8 *)(a1 + 32)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 32);
LABEL_5:
  v6 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v8 = __ldxr(v4);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v4))
LABEL_11:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!*(_BYTE *)(a1 + 96))
  {
    v10 = *(void (***)(uint64_t))(a1 + 16);
    v9 = a1 + 16;
    *(_BYTE *)(v9 + 80) = 1;
    v11 = *(_QWORD *)(v9 + 88);
    v12 = v9;
    (*v10)(v9);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 136))(v11, &v12);
    result = v12;
    if (v12)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  return result;
}

uint64_t WebCore::LibWebRTCRtpReceiverTransformBackend::requestKeyFrame(WebCore::LibWebRTCRtpReceiverTransformBackend *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 144))(*((_QWORD *)this + 13));
}

uint64_t WebCore::LibWebRTCRtpSenderBackend::startSource(WebCore::LibWebRTCRtpSenderBackend *this)
{
  uint64_t v2;
  void *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  WTF *v14;
  char v15[8];
  int v16;
  uint64_t v17;
  char v18;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    goto LABEL_19;
  v2 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v2 = 1;
  *(_QWORD *)(v2 + 8) = this;
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v2;
  if (!v4)
    goto LABEL_19;
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 - 1;
  }
  while (__stlxr(v6, v4));
  if (!v6)
  {
    atomic_store(1u, v4);
    WTF::fastFree((WTF *)v4, v3);
  }
  v2 = *((_QWORD *)this + 1);
  if (v2)
  {
LABEL_19:
    do
      v7 = __ldaxr((unsigned int *)v2);
    while (__stlxr(v7 + 1, (unsigned int *)v2));
  }
  v14 = (WTF *)v2;
  v15[0] = 0;
  v16 = -1;
  v8 = *((unsigned int *)this + 10);
  if ((_DWORD)v8 != -1)
  {
    ((void (*)(uint64_t *, char *, char *))off_1E33633B0[v8])(&v17, v15, (char *)this + 32);
    v16 = v8;
  }
  v9 = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)v9 = &off_1E3363800;
  *(_QWORD *)(v9 + 8) = this;
  *(_QWORD *)(v9 + 16) = v14;
  *(_BYTE *)(v9 + 24) = 0;
  *(_DWORD *)(v9 + 32) = -1;
  v10 = v16;
  if (v16 != -1)
  {
    ((void (*)(uint64_t *, uint64_t, char *))off_1E3363398[v16])(&v17, v9 + 24, v15);
    *(_DWORD *)(v9 + 32) = v10;
  }
  v17 = v9;
  WTF::callOnMainThread();
  v11 = v17;
  v17 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v16 != -1)
    ((void (*)(char *, char *))off_1E3363330[v16])(&v18, v15);
  return 0;
}

void WebCore::LibWebRTCRtpSenderBackend::~LibWebRTCRtpSenderBackend(WebCore::LibWebRTCRtpSenderBackend *this)
{
  uint64_t v1;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  char *v19;
  char *v20;
  WebCore::LibWebRTCRtpSenderBackend *v21;
  char v22;
  char *v23;

  v1 = *((unsigned int *)this + 10);
  if ((_DWORD)v1 == -1)
  {
    v21 = (WebCore::LibWebRTCRtpSenderBackend *)std::__throw_bad_variant_access[abi:sn180100]();
    WebCore::LibWebRTCRtpSenderBackend::~LibWebRTCRtpSenderBackend(v21);
    return;
  }
  v3 = (_QWORD *)((char *)this + 32);
  v23 = &v22;
  ((void (*)(char **, char *))off_1E3363830[v1])(&v23, (char *)this + 32);
  v5 = *((unsigned int *)this + 10);
  if ((_DWORD)v5 == -1)
    goto LABEL_6;
  if ((_DWORD)v5)
  {
    ((void (*)(char **, _QWORD *))off_1E3363330[v5])(&v23, v3);
LABEL_6:
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    goto LABEL_7;
  }
  *v3 = 0;
LABEL_7:
  if (*((_BYTE *)this + 224))
    MEMORY[0x19AEA5B80]((char *)this + 56);
  v6 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      v19 = (char *)WTF::fastMalloc((WTF *)0x10);
      *(_QWORD *)v19 = off_1E3361EB0;
      *((_QWORD *)v19 + 1) = v7;
      v23 = v19;
      WTF::ensureOnMainThread();
      v20 = v23;
      v23 = 0;
      if (v20)
        (*(void (**)(char *))(*(_QWORD *)v20 + 8))(v20);
    }
  }
  v10 = *((unsigned int *)this + 10);
  if ((_DWORD)v10 != -1)
    ((void (*)(char **, _QWORD *))off_1E3363330[v10])(&v23, v3);
  *((_DWORD *)this + 10) = -1;
  v11 = *((_QWORD *)this + 3);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v12)
  {
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
    {
      atomic_store(1u, v12);
      WTF::fastFree((WTF *)v12, v4);
    }
  }
  v15 = *((_QWORD *)this + 1);
  if (v15)
  {
    *(_QWORD *)(v15 + 8) = 0;
    v16 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v16)
    {
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, v4);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v1;
  void *v2;

  WebCore::LibWebRTCRtpSenderBackend::~LibWebRTCRtpSenderBackend(this);
  WTF::fastFree(v1, v2);
}

uint64_t WebCore::LibWebRTCRtpSenderBackend::replaceTrack(WebCore::LibWebRTCRtpSenderBackend *this, WebCore::RTCRtpSender *a2, WebCore::MediaStreamTrack *a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  WebCore::LibWebRTCRtpSenderBackend *v9;
  WebCore::MediaStreamTrack *v10;
  WebCore::MediaStreamTrack ***v11;
  WebCore::MediaStreamTrack **v12;
  WebCore::MediaStreamTrack **v13;
  uint64_t v14;

  v10 = a3;
  if (!a3)
  {
    v5 = *((unsigned int *)this + 10);
    if ((_DWORD)v5 == -1)
      goto LABEL_16;
    v6 = (_QWORD *)((char *)this + 32);
    v12 = (WebCore::MediaStreamTrack **)&v11;
    ((void (*)(WebCore::MediaStreamTrack ***, char *))off_1E3363830[v5])(&v12, (char *)this + 32);
    v7 = *((unsigned int *)this + 10);
    if ((_DWORD)v7 != -1)
    {
      if (!(_DWORD)v7)
      {
        *v6 = 0;
        return 1;
      }
      ((void (*)(WebCore::MediaStreamTrack ***, char *))off_1E3363330[v7])(&v12, (char *)this + 32);
    }
    *((_QWORD *)this + 4) = 0;
    *((_DWORD *)this + 10) = 0;
    return 1;
  }
  if (!*((_QWORD *)a2 + 4))
  {
LABEL_5:
    WebCore::LibWebRTCMediaEndpoint::createSourceAndRTCTrack((WebCore::LibWebRTCMediaEndpoint *)&v12, *(WebCore::MediaStreamTrack **)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 88), (uint64_t *)a3);
    WebCore::LibWebRTCRtpSenderBackend::setSource((uint64_t)this, (uint64_t)&v12);
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3), v14);
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    if ((_DWORD)v13 != -1)
      ((void (*)(WebCore::MediaStreamTrack ****, WebCore::MediaStreamTrack ***))off_1E3363330[v13])(&v11, &v12);
    return 1;
  }
  v12 = &v10;
  v13 = &v10;
  v4 = *((unsigned int *)this + 10);
  if ((_DWORD)v4 != -1)
  {
    v11 = &v12;
    ((void (*)(WebCore::MediaStreamTrack ****, char *))off_1E3363848[v4])(&v11, (char *)this + 32);
    a3 = v10;
    goto LABEL_5;
  }
LABEL_16:
  v9 = (WebCore::LibWebRTCRtpSenderBackend *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::LibWebRTCRtpSenderBackend::getParameters(v9);
}

uint64_t WebCore::LibWebRTCRtpSenderBackend::getParameters@<X0>(WebCore::LibWebRTCRtpSenderBackend *this@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result;
  WebCore *v5;
  const std::string::value_type *v6;
  size_t v7;
  std::string *v8;
  const std::string::value_type *v9;
  size_t v10;
  void (***v11)(_QWORD);
  void **v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (***v17)(_QWORD);
  void *v18;
  void (***v19)(_QWORD);
  void (***v20)(_QWORD);
  void (**v21)(_QWORD);
  BOOL v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (***v33)(_QWORD);
  void (***v34)(_QWORD);
  void (**v35)(_QWORD);
  __int128 *v36;
  void **v37;
  __int128 *v38;
  __int128 *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  __int128 *v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  std::string *v47;
  __int128 v48;
  int v49;
  __int128 *v50;
  unint64_t v51;
  __int128 *v52;
  unint64_t v53;
  uint64_t v54;
  __int128 *v55;
  __int128 *v56;
  char v57;
  __int128 v58;
  const std::string::value_type *v59;
  size_t v60;
  int v61;
  __int128 *v62;
  uint64_t v63;
  std::string *v64;
  __int128 *v65;
  __int128 v66;
  __int128 *v67;
  int v68;
  uint64_t v69;
  __int128 *v70;
  __int128 *v71;
  char v72;
  __int128 v73;
  const std::string::value_type *v74;
  size_t v75;
  int v76;
  uint64_t v77;
  void **v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t i;
  std::string *v95;
  const std::string::value_type *v96;
  size_t v97;
  __n128 v98;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __int128 *v105;
  __int128 *v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  char v110;
  __int128 v111;
  uint64_t v112;
  __int16 v113;
  int v114;
  char v115;

  result = *((_QWORD *)this + 3);
  if (!result)
  {
    a2[3] = 0u;
    a2[4] = 0u;
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
    return result;
  }
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)result + 104))(&v99);
  v5 = (WebCore::LibWebRTCRtpSenderBackend *)((char *)this + 56);
  if (!*((_BYTE *)this + 224))
  {
    MEMORY[0x19AEA5B74]((char *)this + 56, &v99);
    *((_BYTE *)this + 224) = 1;
    goto LABEL_162;
  }
  if (v5 != (WebCore *)&v99)
  {
    if (*((char *)this + 79) < 0)
    {
      if (v100 >= 0)
        v6 = (const std::string::value_type *)&v99;
      else
        v6 = (const std::string::value_type *)v99;
      if (v100 >= 0)
        v7 = HIBYTE(v100);
      else
        v7 = *((_QWORD *)&v99 + 1);
      std::string::__assign_no_alias<false>((std::string *)((char *)this + 56), v6, v7);
    }
    else if (v100 < 0)
    {
      std::string::__assign_no_alias<true>((_QWORD *)this + 7, (char *)v99, *((size_t *)&v99 + 1));
    }
    else
    {
      *(_OWORD *)v5 = v99;
      *((_QWORD *)this + 9) = v100;
    }
    v8 = (std::string *)((char *)this + 80);
    if (*((char *)this + 103) < 0)
    {
      if (v102 >= 0)
        v9 = (const std::string::value_type *)&v101;
      else
        v9 = (const std::string::value_type *)v101;
      if (v102 >= 0)
        v10 = HIBYTE(v102);
      else
        v10 = *((_QWORD *)&v101 + 1);
      std::string::__assign_no_alias<false>(v8, v9, v10);
    }
    else if (v102 < 0)
    {
      std::string::__assign_no_alias<true>(v8, (char *)v101, *((size_t *)&v101 + 1));
    }
    else
    {
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v101;
      *((_QWORD *)this + 12) = v102;
    }
    v12 = (void **)((char *)this + 104);
    v11 = (void (***)(_QWORD))*((_QWORD *)this + 13);
    v14 = v103;
    v13 = v104;
    v15 = 0x6DB6DB6DB6DB6DB7 * ((v104 - v103) >> 4);
    v16 = *((_QWORD *)this + 15);
    if (0x6DB6DB6DB6DB6DB7 * ((v16 - (uint64_t)v11) >> 4) >= v15)
    {
      if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)this + 14) - (_QWORD)v11) >> 4) >= v15)
      {
        v31 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<webrtc::RtpCodecParameters *,webrtc::RtpCodecParameters *,webrtc::RtpCodecParameters *>(v103, v104, *((_QWORD *)this + 13));
        v32 = *((_QWORD *)this + 14);
        if (v32 != v31)
        {
          v33 = (void (***)(_QWORD))(v32 - 112);
          v34 = (void (***)(_QWORD))(v32 - 112);
          do
          {
            v35 = *v34;
            v34 -= 14;
            (*v35)(v33);
            v22 = v33 == (void (***)(_QWORD))v31;
            v33 = v34;
          }
          while (!v22);
        }
        *((_QWORD *)this + 14) = v31;
      }
      else
      {
        v28 = v103 + 16 * ((uint64_t)(*((_QWORD *)this + 14) - (_QWORD)v11) >> 4);
        std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<webrtc::RtpCodecParameters *,webrtc::RtpCodecParameters *,webrtc::RtpCodecParameters *>(v103, v28, *((_QWORD *)this + 13));
        v29 = *((_QWORD *)this + 14);
        if (v28 != v13)
        {
          v30 = *((_QWORD *)this + 14);
          while (v30)
          {
            v28 += 112;
            v30 = webrtc::RtpCodecParameters::RtpCodecParameters() + 112;
            v29 += 112;
            if (v28 == v13)
              goto LABEL_51;
          }
          goto LABEL_165;
        }
LABEL_51:
        *((_QWORD *)this + 14) = v29;
      }
    }
    else
    {
      if (v11)
      {
        v17 = (void (***)(_QWORD))*((_QWORD *)this + 14);
        v18 = (void *)*((_QWORD *)this + 13);
        if (v17 != v11)
        {
          v19 = v17 - 14;
          v20 = v17 - 14;
          do
          {
            v21 = *v20;
            v20 -= 14;
            (*v21)(v19);
            v22 = v19 == v11;
            v19 = v20;
          }
          while (!v22);
          v18 = *v12;
        }
        *((_QWORD *)this + 14) = v11;
        operator delete(v18);
        v16 = 0;
        *v12 = 0;
        *((_QWORD *)this + 14) = 0;
        *((_QWORD *)this + 15) = 0;
      }
      if (v15 > 0x249249249249249)
        goto LABEL_166;
      v23 = 0x6DB6DB6DB6DB6DB7 * (v16 >> 4);
      v24 = 2 * v23;
      if (2 * v23 <= v15)
        v24 = v15;
      v25 = v23 >= 0x124924924924924 ? 0x249249249249249 : v24;
      if (v25 > 0x249249249249249)
        goto LABEL_166;
      v26 = 112 * v25;
      v27 = (char *)operator new(112 * v25);
      *((_QWORD *)this + 13) = v27;
      *((_QWORD *)this + 14) = v27;
      *((_QWORD *)this + 15) = &v27[v26];
      while (v14 != v13)
      {
        v14 += 112;
        v27 = (char *)(webrtc::RtpCodecParameters::RtpCodecParameters() + 112);
      }
      *((_QWORD *)this + 14) = v27;
    }
    v37 = (void **)((char *)this + 128);
    v36 = (__int128 *)*((_QWORD *)this + 16);
    v39 = v105;
    v38 = v106;
    v40 = (char *)v106 - (char *)v105;
    v41 = ((char *)v106 - (char *)v105) >> 5;
    v42 = *((_QWORD *)this + 18);
    if (v41 <= (v42 - (uint64_t)v36) >> 5)
    {
      v50 = (__int128 *)*((_QWORD *)this + 17);
      v51 = ((char *)v50 - (char *)v36) >> 5;
      if (v51 >= v41)
      {
        if (v105 != v106)
        {
          v69 = 0;
          do
          {
            v70 = &v36[v69];
            v71 = &v39[v69];
            if (v39 != v36)
            {
              v72 = *((_BYTE *)v71 + 23);
              if (*((char *)v70 + 23) < 0)
              {
                if (v72 >= 0)
                  v74 = (const std::string::value_type *)&v39[v69];
                else
                  v74 = *(const std::string::value_type **)&v39[v69];
                if (v72 >= 0)
                  v75 = *((unsigned __int8 *)v71 + 23);
                else
                  v75 = *((_QWORD *)&v39[v69] + 1);
                std::string::__assign_no_alias<false>((std::string *)&v36[v69], v74, v75);
              }
              else if ((*((_BYTE *)v71 + 23) & 0x80) != 0)
              {
                std::string::__assign_no_alias<true>(&v36[v69], *(char **)&v39[v69], *((_QWORD *)&v39[v69] + 1));
              }
              else
              {
                v73 = *v71;
                *((_QWORD *)v70 + 2) = *((_QWORD *)v71 + 2);
                *v70 = v73;
              }
            }
            v76 = *((_DWORD *)v71 + 6);
            *((_BYTE *)v70 + 28) = *((_BYTE *)v71 + 28);
            *((_DWORD *)v70 + 6) = v76;
            v69 += 2;
          }
          while (&v39[v69] != v38);
          v50 = (__int128 *)*((_QWORD *)this + 17);
          v36 = (__int128 *)((char *)v36 + v69 * 16);
        }
        while (v50 != v36)
          webrtc::RtpExtension::~RtpExtension((webrtc::RtpExtension *)(v50 - 2));
        *((_QWORD *)this + 17) = v36;
      }
      else
      {
        v52 = &v105[2 * v51];
        if (v50 != v36)
        {
          v53 = 0;
          v54 = 32 * v51;
          do
          {
            v55 = &v36[v53 / 0x10];
            v56 = &v39[v53 / 0x10];
            if (v39 != v36)
            {
              v57 = *((_BYTE *)v56 + 23);
              if (*((char *)v55 + 23) < 0)
              {
                if (v57 >= 0)
                  v59 = (const std::string::value_type *)&v39[v53 / 0x10];
                else
                  v59 = *(const std::string::value_type **)&v39[v53 / 0x10];
                if (v57 >= 0)
                  v60 = *((unsigned __int8 *)v56 + 23);
                else
                  v60 = *((_QWORD *)&v39[v53 / 0x10] + 1);
                std::string::__assign_no_alias<false>((std::string *)&v36[v53 / 0x10], v59, v60);
              }
              else if ((*((_BYTE *)v56 + 23) & 0x80) != 0)
              {
                std::string::__assign_no_alias<true>(&v36[v53 / 0x10], *(char **)&v39[v53 / 0x10], *((_QWORD *)&v39[v53 / 0x10] + 1));
              }
              else
              {
                v58 = *v56;
                *((_QWORD *)v55 + 2) = *((_QWORD *)v56 + 2);
                *v55 = v58;
              }
            }
            v61 = *((_DWORD *)v56 + 6);
            *((_BYTE *)v55 + 28) = *((_BYTE *)v56 + 28);
            *((_DWORD *)v55 + 6) = v61;
            v53 += 32;
          }
          while (v54 != v53);
          v36 = (__int128 *)*((_QWORD *)this + 17);
          v5 = (WebCore::LibWebRTCRtpSenderBackend *)((char *)this + 56);
        }
        v62 = v36;
        if (v52 != v38)
        {
          v63 = 0;
          do
          {
            v64 = (std::string *)&v36[v63];
            if (!&v36[v63])
              goto LABEL_165;
            v65 = &v52[v63];
            if (SBYTE7(v52[v63 + 1]) < 0)
            {
              std::string::__init_copy_ctor_external(v64, *(const std::string::value_type **)&v52[v63], *((_QWORD *)&v52[v63] + 1));
            }
            else
            {
              v66 = *v65;
              v64->__r_.__value_.__r.__words[2] = *((_QWORD *)v65 + 2);
              *(_OWORD *)&v64->__r_.__value_.__l.__data_ = v66;
            }
            v67 = &v36[v63];
            v68 = DWORD2(v52[v63 + 1]);
            *((_BYTE *)v67 + 28) = BYTE12(v52[v63 + 1]);
            *((_DWORD *)v67 + 6) = v68;
            v63 += 2;
          }
          while (&v52[v63] != v38);
          v62 = &v36[v63];
        }
        *((_QWORD *)this + 17) = v62;
      }
    }
    else
    {
      if (v36)
      {
        v43 = (__int128 *)*((_QWORD *)this + 17);
        v44 = (void *)*((_QWORD *)this + 16);
        if (v43 != v36)
        {
          do
            webrtc::RtpExtension::~RtpExtension((webrtc::RtpExtension *)(v43 - 2));
          while (v43 != v36);
          v44 = *v37;
        }
        *((_QWORD *)this + 17) = v36;
        operator delete(v44);
        v42 = 0;
        *v37 = 0;
        *((_QWORD *)this + 17) = 0;
        *((_QWORD *)this + 18) = 0;
      }
      if (v40 < 0)
        goto LABEL_166;
      v45 = v42 >> 4;
      if (v42 >> 4 <= v41)
        v45 = v41;
      v46 = (unint64_t)v42 >= 0x7FFFFFFFFFFFFFE0 ? 0x7FFFFFFFFFFFFFFLL : v45;
      if (v46 >> 59)
        goto LABEL_166;
      v47 = (std::string *)operator new(32 * v46);
      *((_QWORD *)this + 16) = v47;
      *((_QWORD *)this + 17) = v47;
      *((_QWORD *)this + 18) = (char *)v47 + 32 * v46;
      while (v39 != v38)
      {
        if (*((char *)v39 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v47, *(const std::string::value_type **)v39, *((_QWORD *)v39 + 1));
        }
        else
        {
          v48 = *v39;
          v47->__r_.__value_.__r.__words[2] = *((_QWORD *)v39 + 2);
          *(_OWORD *)&v47->__r_.__value_.__l.__data_ = v48;
        }
        v49 = *((_DWORD *)v39 + 6);
        v47[1].__r_.__value_.__s.__data_[4] = *((_BYTE *)v39 + 28);
        LODWORD(v47[1].__r_.__value_.__l.__data_) = v49;
        v39 += 2;
        v47 = (std::string *)((char *)v47 + 32);
      }
      *((_QWORD *)this + 17) = v47;
    }
    v78 = (void **)((char *)this + 152);
    v77 = *((_QWORD *)this + 19);
    v80 = v107;
    v79 = v108;
    v81 = 0xF0F0F0F0F0F0F0F1 * ((v108 - v107) >> 4);
    v82 = *((_QWORD *)this + 21);
    if (0xF0F0F0F0F0F0F0F1 * ((v82 - v77) >> 4) >= v81)
    {
      if (0xF0F0F0F0F0F0F0F1 * ((*((_QWORD *)this + 20) - v77) >> 4) >= v81)
      {
        v93 = std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,webrtc::RtpEncodingParameters *,webrtc::RtpEncodingParameters *,webrtc::RtpEncodingParameters *,0>(v107, v108, *((_QWORD *)this + 19));
        for (i = *((_QWORD *)this + 20); i != v93; i = MEMORY[0x19AEA5CD0](i - 272))
          ;
        *((_QWORD *)this + 20) = v93;
      }
      else
      {
        v90 = v107 + 16 * ((*((_QWORD *)this + 20) - v77) >> 4);
        std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,webrtc::RtpEncodingParameters *,webrtc::RtpEncodingParameters *,webrtc::RtpEncodingParameters *,0>(v107, v90, *((_QWORD *)this + 19));
        v91 = *((_QWORD *)this + 20);
        if (v90 != v79)
        {
          v92 = *((_QWORD *)this + 20);
          while (v92)
          {
            v90 += 272;
            v92 = webrtc::RtpEncodingParameters::RtpEncodingParameters() + 272;
            v91 += 272;
            if (v90 == v79)
              goto LABEL_144;
          }
          goto LABEL_165;
        }
LABEL_144:
        *((_QWORD *)this + 20) = v91;
      }
      goto LABEL_150;
    }
    if (v77)
    {
      v83 = *((_QWORD *)this + 20);
      v84 = (void *)*((_QWORD *)this + 19);
      if (v83 != v77)
      {
        do
          v83 = MEMORY[0x19AEA5CD0](v83 - 272);
        while (v83 != v77);
        v84 = *v78;
      }
      *((_QWORD *)this + 20) = v77;
      operator delete(v84);
      v82 = 0;
      *v78 = 0;
      *((_QWORD *)this + 20) = 0;
      *((_QWORD *)this + 21) = 0;
    }
    if (v81 <= 0xF0F0F0F0F0F0F0)
    {
      v85 = 0xF0F0F0F0F0F0F0F1 * (v82 >> 4);
      v86 = 2 * v85;
      if (2 * v85 <= v81)
        v86 = v81;
      v87 = v85 >= 0x78787878787878 ? 0xF0F0F0F0F0F0F0 : v86;
      if (v87 <= 0xF0F0F0F0F0F0F0)
      {
        v88 = 17 * v87;
        v89 = (char *)operator new(272 * v87);
        *((_QWORD *)this + 19) = v89;
        *((_QWORD *)this + 20) = v89;
        *((_QWORD *)this + 21) = &v89[16 * v88];
        while (v80 != v79)
        {
          v80 += 272;
          v89 = (char *)(webrtc::RtpEncodingParameters::RtpEncodingParameters() + 272);
        }
        *((_QWORD *)this + 20) = v89;
LABEL_150:
        *((_DWORD *)this + 44) = v109;
        *((_BYTE *)this + 180) = v110;
        v95 = (std::string *)((char *)this + 184);
        if (*((char *)this + 207) < 0)
        {
          if (v112 >= 0)
            v96 = (const std::string::value_type *)&v111;
          else
            v96 = (const std::string::value_type *)v111;
          if (v112 >= 0)
            v97 = HIBYTE(v112);
          else
            v97 = *((_QWORD *)&v111 + 1);
          std::string::__assign_no_alias<false>(v95, v96, v97);
        }
        else if (v112 < 0)
        {
          std::string::__assign_no_alias<true>(v95, (char *)v111, *((size_t *)&v111 + 1));
        }
        else
        {
          *(_OWORD *)&v95->__r_.__value_.__l.__data_ = v111;
          *((_QWORD *)this + 25) = v112;
        }
        goto LABEL_161;
      }
    }
LABEL_166:
    abort();
  }
LABEL_161:
  *((_WORD *)this + 104) = v113;
  *((_DWORD *)this + 54) = v114;
  *((_BYTE *)this + 220) = v115;
LABEL_162:
  MEMORY[0x19AEA5B80](&v99);
  if (!*((_BYTE *)this + 224))
  {
LABEL_165:
    __break(1u);
    goto LABEL_166;
  }
  return WebCore::toRTCRtpSendParameters(v5, (uint64_t)a2, v98);
}

WTF::StringImpl *WebCore::LibWebRTCRtpSenderBackend::setParameters(uint64_t a1, uint64_t a2, uint64_t *a3, __n128 a4)
{
  const WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  const WTF::StringImpl *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  const WTF::StringImpl *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const WTF::StringImpl *v21;
  char v22;
  WTF *v23;
  uint64_t v24;
  WTF::StringImpl *v25;
  WTF *v26;
  WTF::StringImpl *v27;
  char v28;
  const char *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  WTF::StringImpl *v47;
  uint64_t v48;
  void *__p;
  char v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF *v53;
  char v54;
  char v55;
  uint64_t v56;
  unsigned int v57;
  WTF::StringImpl *v58;
  WTF *v59;
  int v60;
  unsigned int v61;
  objc_class *v62;
  WTF::StringImpl *v63;
  objc_class *v64;

  if (!*(_QWORD *)(a1 + 24))
  {
    v35 = *a3;
    v51 = 0;
    v36 = 6;
LABEL_75:
    WebCore::DeferredPromise::reject(v35, (JSC::JSGlobalObject *)v36, (JSC::JSGlobalObject *)&v51, 0);
    result = v51;
    v51 = 0;
    if (!result)
      return result;
    goto LABEL_76;
  }
  if (*(_BYTE *)(a1 + 224))
  {
    WebCore::toRTCRtpSendParameters((WebCore *)(a1 + 56), (uint64_t)&v51, a4);
    if (!WTF::equal(v58, *(const WTF::StringImpl **)(a2 + 48), v7) || v61 != *(_DWORD *)(a2 + 68))
      goto LABEL_33;
    if (v61)
    {
      v10 = 0;
      v11 = 0;
      while (v11 < *(unsigned int *)(a2 + 68))
      {
        if ((WTF::equal(*(WTF **)((char *)v59 + v10), *(const WTF::StringImpl **)(*(_QWORD *)(a2 + 56) + v10), v9) & 1) == 0)
          goto LABEL_33;
        ++v11;
        v10 += 72;
        if (v11 >= v61)
          goto LABEL_10;
      }
LABEL_101:
      __break(0xC471u);
      JUMPOUT(0x1954BF230);
    }
LABEL_10:
    if (HIDWORD(v52) != *(_DWORD *)(a2 + 12))
      goto LABEL_33;
    if (HIDWORD(v52))
    {
      v12 = 0;
      v13 = 0;
      while (v13 < *(unsigned int *)(a2 + 12))
      {
        v14 = v51;
        v15 = *(_QWORD *)a2;
        if (!WTF::equal(*(WTF **)((char *)v51 + v12), *(const WTF::StringImpl **)(*(_QWORD *)a2 + v12), v9)|| *(unsigned __int16 *)((char *)v14 + v12 + 8) != *(unsigned __int16 *)(v15 + v12 + 8))
        {
          goto LABEL_33;
        }
        ++v13;
        v12 += 16;
        if (v13 >= HIDWORD(v52))
          goto LABEL_17;
      }
      __break(0xC471u);
      goto LABEL_100;
    }
LABEL_17:
    if (!WTF::equal(v53, *(const WTF::StringImpl **)(a2 + 16), v9)
      || (v55 != 0) != (*(_BYTE *)(a2 + 25) != 0))
    {
      goto LABEL_33;
    }
    if (v55)
    {
      if (!*(_BYTE *)(a2 + 25))
        goto LABEL_100;
      if (v54 != *(_BYTE *)(a2 + 24))
        goto LABEL_33;
    }
    if (v57 == *(_DWORD *)(a2 + 44))
    {
      if (v57)
      {
        v17 = 0;
        v18 = 0;
        while (v18 < *(unsigned int *)(a2 + 44))
        {
          v19 = v56;
          v20 = *(_QWORD *)(a2 + 32);
          if (*(unsigned __int16 *)(v56 + v17) != *(unsigned __int16 *)(v20 + v17)
            || !WTF::equal(*(WTF **)(v56 + v17 + 8), *(const WTF::StringImpl **)(v20 + v17 + 8), v16)
            || *(_QWORD *)(v19 + v17 + 16) != *(_QWORD *)(v20 + v17 + 16)
            || *(unsigned __int16 *)(v19 + v17 + 24) != *(unsigned __int16 *)(v20 + v17 + 24)
            || (WTF::equal(*(WTF **)(v19 + v17 + 32), *(const WTF::StringImpl **)(v20 + v17 + 32), v21) & 1) == 0)
          {
            goto LABEL_33;
          }
          ++v18;
          v17 += 40;
          v22 = 1;
          if (v18 >= v57)
            goto LABEL_34;
        }
        goto LABEL_101;
      }
      v22 = 1;
    }
    else
    {
LABEL_33:
      v22 = 0;
    }
LABEL_34:
    if (v61)
    {
      v23 = v59;
      v24 = 72 * v61;
      do
      {
        v25 = *(WTF::StringImpl **)v23;
        *(_QWORD *)v23 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v8);
          else
            *(_DWORD *)v25 -= 2;
        }
        v23 = (WTF *)((char *)v23 + 72);
        v24 -= 72;
      }
      while (v24);
    }
    v26 = v59;
    if (v59)
    {
      v59 = 0;
      v60 = 0;
      WTF::fastFree(v26, v8);
    }
    v27 = v58;
    v58 = 0;
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v8);
      else
        *(_DWORD *)v27 -= 2;
    }
    WebCore::RTCRtpParameters::~RTCRtpParameters((WebCore::RTCRtpParameters *)&v51, v8);
    if ((v22 & 1) != 0)
    {
      if (*(_BYTE *)(a1 + 224))
      {
        MEMORY[0x19AEA5B74](&v51, a1 + 56);
        WebCore::updateRTCRtpSendParameters((uint64_t *)a2, (uint64_t)&v51);
        if (*(_BYTE *)(a1 + 224))
        {
          MEMORY[0x19AEA5B80](a1 + 56);
          *(_BYTE *)(a1 + 224) = 0;
        }
        (*(void (**)(uint64_t *__return_ptr, _QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 24) + 112))(&v48, *(_QWORD *)(a1 + 24), &v51);
        if (!(_DWORD)v48)
        {
          v43 = *a3;
          v44 = *(_QWORD *)(v43 + 24);
          if (v44 && *(_QWORD *)v44 && (*(_BYTE *)(v44 + 8) & 3) == 0)
          {
            v45 = *(_QWORD *)(v43 + 32);
            if (!v45 || (*(_BYTE *)(v45 + 8) & 3) != 0)
              v46 = 0;
            else
              v46 = *(uint64_t **)v45;
            JSC::JSLockHolder::JSLockHolder();
            WebCore::DeferredPromise::callFunction(v43, v46, 0, (objc_class *)0xA);
            MEMORY[0x19AEA32A0](&v62);
          }
          goto LABEL_85;
        }
        if ((v48 - 3) >= 6)
          v28 = 30;
        else
          v28 = 0xF0A0809200CuLL >> (8 * (v48 - 3));
        v29 = (const char *)webrtc::RTCError::message((webrtc::RTCError *)&v48);
        WTF::String::String((WTF::String *)&v47, v29);
        v30 = *a3;
        v31 = v47;
        v47 = 0;
        v64 = 0;
        LOBYTE(v62) = v28;
        if (v31)
          *(_DWORD *)v31 += 2;
        v63 = v31;
        WebCore::DeferredPromise::reject(v30, (unsigned __int8 *)&v62, 0, &v64);
        v33 = v63;
        v63 = 0;
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
          {
            WTF::StringImpl::destroy(v33, v32);
            if (!v31)
              goto LABEL_63;
            goto LABEL_61;
          }
          *(_DWORD *)v33 -= 2;
        }
        if (!v31)
          goto LABEL_63;
LABEL_61:
        if (*(_DWORD *)v31 == 2)
          WTF::StringImpl::destroy(v31, v32);
        else
          *(_DWORD *)v31 -= 2;
LABEL_63:
        v34 = v47;
        v47 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v32);
          else
            *(_DWORD *)v34 -= 2;
        }
LABEL_85:
        if (v50 < 0)
          operator delete(__p);
        return (WTF::StringImpl *)MEMORY[0x19AEA5B80](&v51);
      }
LABEL_100:
      __break(1u);
      goto LABEL_101;
    }
    v42 = *a3;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v35 = v42;
    v36 = 10;
    goto LABEL_75;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v37 = *a3;
  LOBYTE(v48) = 8;
  v62 = 0;
  LOBYTE(v51) = 8;
  v38 = (WTF::StringImpl *)__p;
  if (__p)
    *(_DWORD *)__p += 2;
  v52 = v38;
  WebCore::DeferredPromise::reject(v37, (unsigned __int8 *)&v51, 0, &v62);
  v40 = v52;
  v52 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v39);
    else
      *(_DWORD *)v40 -= 2;
  }
  result = (WTF::StringImpl *)__p;
  __p = 0;
  if (result)
  {
LABEL_76:
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v39);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::LibWebRTCRtpSenderBackend::createDTMFBackend@<X0>(WebCore::LibWebRTCRtpSenderBackend *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 3) + 128))(&v11);
  v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x28);
  *v3 = &unk_1E341A848;
  v3[1] = off_1E341A898;
  v3[2] = 0;
  v5 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  *(_QWORD *)(v5 + 8) = v3;
  v6 = (unsigned int *)v3[2];
  v3[2] = v5;
  if (v6)
  {
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      WTF::fastFree((WTF *)v6, v4);
    }
  }
  *v3 = &off_1E341A4D0;
  v3[1] = &unk_1E341A528;
  v9 = v11;
  v11 = 0;
  v3[3] = v9;
  v3[4] = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v9 + 32))(v9, v3 + 1);
  *a2 = v3;
  result = v11;
  if (v11)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return result;
}

uint64_t WebCore::LibWebRTCRtpSenderBackend::rtcRtpTransformBackend@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;

  v2 = this;
  if (!*(_QWORD *)(this + 48))
  {
    v4 = *(_QWORD *)(this + 24);
    if (v4)
      (**(void (***)(_QWORD))v4)(*(_QWORD *)(this + 24));
    v5 = WTF::fastMalloc((WTF *)0x70);
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 64))(v4);
    *(_DWORD *)(v5 + 8) = 1;
    *(_DWORD *)(v5 + 24) = this != 0;
    *(_DWORD *)(v5 + 28) = 1;
    *(_BYTE *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 40) = 0;
    *(_BYTE *)(v5 + 48) = 0;
    *(_OWORD *)(v5 + 56) = 0u;
    *(_OWORD *)(v5 + 72) = 0u;
    *(_DWORD *)(v5 + 88) = 1065353216;
    *(_QWORD *)v5 = off_1E3363128;
    *(_QWORD *)(v5 + 16) = &unk_1E33631B0;
    *(_BYTE *)(v5 + 96) = 0;
    *(_QWORD *)(v5 + 104) = v4;
    v6 = *(_QWORD *)(v2 + 48);
    *(_QWORD *)(v2 + 48) = v5;
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 8);
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v13 = off_1E3361EB0;
        v13[1] = v7;
        v14 = (uint64_t)v13;
        WTF::ensureOnMainThread();
        this = v14;
        if (v14)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      }
    }
  }
  v10 = *(_QWORD *)(v2 + 48);
  v11 = (unsigned int *)(v10 + 8);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *a2 = v10;
  return this;
}

_QWORD *WebCore::LibWebRTCRtpSenderBackend::dtlsTransportBackend@<X0>(WebCore::LibWebRTCRtpSenderBackend *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;

  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 3) + 48))(&v4);
  if (v4)
  {
    result = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *result = off_1E33626E0;
    result[1] = 0;
    result[2] = v4;
    result[3] = 0;
  }
  else
  {
    result = 0;
  }
  *a2 = result;
  return result;
}

void WebCore::LibWebRTCRtpSenderBackend::setMediaStreamIds(uint64_t a1, unsigned int **a2)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t i;
  char *v5;
  char *v6;
  size_t v7;
  void *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  _QWORD *v25;
  WTF *v26;
  char *v27;
  void **v28;
  void *v29;
  WTF *v31;
  void *__p[2];
  unint64_t v33;
  void *v34;
  char *v35;
  char *v36;

  v34 = 0;
  v35 = 0;
  v36 = 0;
  v2 = *a2;
  if (*a2)
    v3 = (uint64_t)(*a2 + 2);
  else
    v3 = 0;
  if (!v2)
    goto LABEL_60;
  for (i = (uint64_t)&(*a2)[2 * *v2 + 2]; v3 != i; i = 0)
  {
    v5 = 0;
    while (1)
    {
      WTF::String::utf8();
      if (!v31)
        break;
      v6 = (char *)v31 + 16;
      v7 = strlen((const char *)v31 + 16);
      if (v7 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_61;
      v9 = (char *)v7;
      if (v7 > 0x16)
      {
        v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v7 | 7) != 0x17)
          v11 = v7 | 7;
        v12 = v11 + 1;
        v10 = (char *)operator new(v11 + 1);
        __p[1] = v9;
        v33 = v12 | 0x8000000000000000;
        __p[0] = v10;
      }
      else
      {
        HIBYTE(v33) = v7;
        v10 = (char *)__p;
      }
      v13 = &v9[(_QWORD)v10];
      if (v10 <= v6 && v13 > v6)
        break;
      if (v9)
        memmove(v10, v6, (size_t)v9);
      *v13 = 0;
      if (v5 >= v36)
      {
        v16 = (char *)v34;
        v17 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)v34) >> 3);
        v18 = v17 + 1;
        if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_61:
          abort();
        if (0x5555555555555556 * ((v36 - (_BYTE *)v34) >> 3) > v18)
          v18 = 0x5555555555555556 * ((v36 - (_BYTE *)v34) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v36 - (_BYTE *)v34) >> 3) >= 0x555555555555555)
          v19 = 0xAAAAAAAAAAAAAAALL;
        else
          v19 = v18;
        if (!v19)
          break;
        if (v19 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v20 = 3 * v19;
        v21 = (char *)operator new(24 * v19);
        v22 = &v21[24 * v17];
        *(_OWORD *)v22 = *(_OWORD *)__p;
        *((_QWORD *)v22 + 2) = v33;
        __p[0] = 0;
        __p[1] = 0;
        v33 = 0;
        v23 = v22 + 24;
        if (v5 == v16)
        {
          v34 = v22;
          v35 = v22 + 24;
          v36 = &v21[8 * v20];
        }
        else
        {
          do
          {
            v24 = *(_OWORD *)(v5 - 24);
            *((_QWORD *)v22 - 1) = *((_QWORD *)v5 - 1);
            *(_OWORD *)(v22 - 24) = v24;
            v22 -= 24;
            *((_QWORD *)v5 - 2) = 0;
            *((_QWORD *)v5 - 1) = 0;
            *((_QWORD *)v5 - 3) = 0;
            v5 -= 24;
          }
          while (v5 != v16);
          v5 = (char *)v34;
          v25 = v35;
          v34 = v22;
          v35 = v23;
          v36 = &v21[8 * v20];
          while (v25 != (_QWORD *)v5)
          {
            if (*((char *)v25 - 1) < 0)
              operator delete((void *)*(v25 - 3));
            v25 -= 3;
          }
        }
        if (v5)
          operator delete(v5);
        v5 = v23;
      }
      else
      {
        if (!v5)
          break;
        v15 = *(_OWORD *)__p;
        *((_QWORD *)v5 + 2) = v33;
        *(_OWORD *)v5 = v15;
        v5 += 24;
        __p[1] = 0;
        v33 = 0;
        __p[0] = 0;
      }
      v35 = v5;
      if (SHIBYTE(v33) < 0)
        operator delete(__p[0]);
      v26 = v31;
      v31 = 0;
      if (*(_DWORD *)v26 == 1)
        WTF::fastFree(v26, v8);
      else
        --*(_DWORD *)v26;
      v3 += 8;
      if (v3 == i)
        goto LABEL_51;
    }
    __break(1u);
LABEL_60:
    ;
  }
LABEL_51:
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24), &v34);
  v27 = (char *)v34;
  if (v34)
  {
    v28 = (void **)v35;
    v29 = v34;
    if (v35 != v34)
    {
      do
      {
        if (*((char *)v28 - 1) < 0)
          operator delete(*(v28 - 3));
        v28 -= 3;
      }
      while (v28 != (void **)v27);
      v29 = v34;
    }
    v35 = v27;
    operator delete(v29);
  }
}

void WebCore::LibWebRTCRtpSenderTransformBackend::~LibWebRTCRtpSenderTransformBackend(WebCore::LibWebRTCRtpSenderTransformBackend *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 13);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = off_1E3363260;
  *((_QWORD *)this + 2) = &unk_1E33632E8;
  v4 = (WTF *)*((_QWORD *)this + 9);
  if (v4)
  {
    do
    {
      v5 = *(WTF **)v4;
      v6 = *((_QWORD *)v4 + 3);
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      WTF::fastFree(v4, a2);
      v4 = v5;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v7)
    WTF::fastFree(v7, a2);
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 13);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *(_QWORD *)this = off_1E3363260;
  *((_QWORD *)this + 2) = &unk_1E33632E8;
  v4 = (WTF *)*((_QWORD *)this + 9);
  if (v4)
  {
    do
    {
      v5 = *(WTF **)v4;
      v6 = *((_QWORD *)v4 + 3);
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      WTF::fastFree(v4, a2);
      v4 = v5;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v7)
    WTF::fastFree(v7, a2);
  v8 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  WTF::fastFree(this, a2);
}

void `non-virtual thunk to'WebCore::LibWebRTCRtpSenderTransformBackend::~LibWebRTCRtpSenderTransformBackend(WebCore::LibWebRTCRtpSenderTransformBackend *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 11);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this - 2) = off_1E3363260;
  *(_QWORD *)this = &unk_1E33632E8;
  v4 = (WTF *)*((_QWORD *)this + 7);
  if (v4)
  {
    do
    {
      v5 = *(WTF **)v4;
      v6 = *((_QWORD *)v4 + 3);
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      WTF::fastFree(v4, a2);
      v4 = v5;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
    WTF::fastFree(v7, a2);
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
}

{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;

  v3 = *((_QWORD *)this + 11);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this - 2) = off_1E3363260;
  *(_QWORD *)this = &unk_1E33632E8;
  v4 = (WTF *)*((_QWORD *)this + 7);
  if (v4)
  {
    do
    {
      v5 = *(WTF **)v4;
      v6 = *((_QWORD *)v4 + 3);
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      WTF::fastFree(v4, a2);
      v4 = v5;
    }
    while (v5);
  }
  v7 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v7)
    WTF::fastFree(v7, a2);
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  WTF::fastFree((WebCore::LibWebRTCRtpSenderTransformBackend *)((char *)this - 16), a2);
}

uint64_t WebCore::LibWebRTCRtpSenderTransformBackend::setTransformableFrameCallback(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t result;
  int v8;
  uint64_t v9;
  void (**v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;

  v4 = (unsigned __int8 *)(a1 + 32);
  if (__ldaxr((unsigned __int8 *)(a1 + 32)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 32);
LABEL_5:
  v6 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v8 = __ldxr(v4);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_11;
  }
  if (__stlxr(0, v4))
LABEL_11:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!*(_BYTE *)(a1 + 96))
  {
    v10 = *(void (***)(uint64_t))(a1 + 16);
    v9 = a1 + 16;
    *(_BYTE *)(v9 + 80) = 1;
    v11 = *(_QWORD *)(v9 + 88);
    v12 = v9;
    (*v10)(v9);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 152))(v11, &v12);
    result = v12;
    if (v12)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  return result;
}

void WebCore::LibWebRTCRtpSenderTransformBackend::requestKeyFrame(WebCore::LibWebRTCRtpSenderTransformBackend *this)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v4;
  void *v5;
  void **v6;
  uint64_t v7;
  void *v8[3];
  char v9;

  v1 = *((_QWORD *)this + 13);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)v1 + 168))(v8, v1, &v5);
  if (v9 < 0)
    operator delete(v8[1]);
  v2 = (void **)v5;
  if (v5)
  {
    v3 = v6;
    v4 = v5;
    if (v6 != v5)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = v5;
    }
    v6 = v2;
    operator delete(v4);
  }
}

uint64_t WebCore::LibWebRTCRtpTransceiverBackend::direction(WebCore::LibWebRTCRtpTransceiverBackend *this)
{
  unsigned int v1;
  uint64_t result;

  v1 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 80))(*((_QWORD *)this + 1));
  if (v1 < 5)
    return dword_1968DED10[v1];
  result = 309;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::LibWebRTCRtpTransceiverBackend::currentDirection(WebCore::LibWebRTCRtpTransceiverBackend *this)
{
  uint64_t v1;
  uint64_t result;

  v1 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 104))(*((_QWORD *)this + 1));
  if ((v1 & 0xFF00000000) == 0)
    return 0;
  if (v1 < 5)
    return qword_1968DED28[(int)v1];
  result = 309;
  __break(0xC471u);
  return result;
}

void WebCore::LibWebRTCRtpTransceiverBackend::setDirection(uint64_t a1, unsigned int a2)
{
  void *v2[3];
  char v3;

  if (a2 >= 4)
  {
    __break(0xC471u);
  }
  else
  {
    (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 8) + 96))(v2);
    if (v3 < 0)
      operator delete(v2[1]);
  }
}

void WebCore::LibWebRTCRtpTransceiverBackend::mid(WebCore::LibWebRTCRtpTransceiverBackend *this@<X0>, _QWORD *a2@<X8>)
{
  void *__p;
  char v4;
  char v5;

  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 1) + 40))(&__p);
  if (v5)
  {
    WTF::String::fromUTF8();
    if (v5)
    {
      if (v4 < 0)
        operator delete(__p);
    }
  }
  else
  {
    *a2 = 0;
  }
}

void WebCore::LibWebRTCRtpTransceiverBackend::stop(WebCore::LibWebRTCRtpTransceiverBackend *this)
{
  void *v1[3];
  char v2;

  (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 1) + 120))(v1);
  if (v2 < 0)
    operator delete(v1[1]);
}

uint64_t WebCore::LibWebRTCRtpTransceiverBackend::stopped(WebCore::LibWebRTCRtpTransceiverBackend *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
}

void WebCore::LibWebRTCRtpTransceiverBackend::setCodecPreferences(uint64_t a1@<X0>, uint64_t **a2@<X1>, char *a3@<X8>)
{
  uint64_t v3;
  char *v4;
  size_t v5;
  char *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const char *v14;
  void *v15;
  WTF *v16;
  char *v17;
  size_t v18;
  size_t v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  const char *v40;
  void *v41;
  char *v42;
  size_t v43;
  size_t v44;
  void **v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  size_t v51;
  size_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t *v57;
  uint64_t *v58;
  size_t v59;
  char v60;
  size_t v61;
  BOOL v62;
  char v63;
  void **v64;
  size_t v65;
  const void **v66;
  size_t v67;
  const void *v68;
  size_t v69;
  int v70;
  void **v71;
  size_t v72;
  int v73;
  uint64_t v74;
  void *v75;
  WTF *v76;
  WTF *v77;
  unint64_t v78;
  int16x8_t *v79;
  int16x8_t *v80;
  int16x8_t v81;
  int8x16_t v82;
  int16x8_t *v83;
  char *v84;
  int16x8_t v85;
  __int16 *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t *v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t *v98;
  char *v99;
  __int128 v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  char *v106;
  __int128 v107;
  __int128 v108;
  char *v109;
  char *v110;
  char *v111;
  void (**v112)(char *);
  char v113;
  const char *v114;
  char *v115;
  char *v116;
  char *v117;
  void (**v118)(char *);
  void *v119;
  uint64_t v122;
  uint64_t v123;
  size_t v124;
  char *v125;
  char *v126;
  uint64_t *v127;
  int v128;
  char *__p;
  char v130;
  WTF *v131;
  char *v132;
  WTF *v133;
  const char *v134;
  unint64_t v135;
  BOOL v136;
  __int128 v137;
  unint64_t v138;
  uint64_t v139;
  void *v140;
  char v141;
  uint64_t v142;
  unint64_t v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v148;
  __int128 v149;
  unint64_t v150;
  int v151;
  int v152;
  char v153;
  int v154;
  char v155;
  _QWORD *v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  __int128 v161;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;

  v164 = *MEMORY[0x1E0C80C00];
  v3 = *((unsigned int *)a2 + 3);
  v4 = 0;
  v5 = 0;
  if (!(_DWORD)v3)
  {
LABEL_224:
    (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 8) + 144))(&v139);
    LOBYTE(v12) = v139;
    if (!(_DWORD)v139)
      goto LABEL_230;
    if ((v139 - 3) >= 6)
      v113 = 30;
    else
      v113 = 0xF0A0809200CuLL >> (8 * (v139 - 3));
    v114 = (const char *)webrtc::RTCError::message((webrtc::RTCError *)&v139);
    WTF::String::String((WTF::String *)&v149, v114);
    v115 = a3;
    *((_QWORD *)a3 + 1) = v149;
    LOBYTE(v12) = 1;
LABEL_231:
    *v115 = v113;
    v115[16] = v12;
    if (v141 < 0)
      operator delete(v140);
    if (!v4)
      return;
LABEL_234:
    if ((char *)v5 != v4)
    {
      v116 = (char *)(v5 - 160);
      v117 = (char *)(v5 - 160);
      do
      {
        v118 = *(void (***)(char *))v117;
        v117 -= 160;
        (*v118)(v116);
        v62 = v116 == v4;
        v116 = v117;
      }
      while (!v62);
    }
    operator delete(v4);
    return;
  }
  v6 = 0;
  v7 = *a2;
  v122 = (uint64_t)&(*a2)[4 * v3];
  v123 = MEMORY[0x1E0DCDD48] + 16;
  while (2)
  {
    webrtc::RtpCodecCapability::RtpCodecCapability((webrtc::RtpCodecCapability *)&v148);
    if (!*v7)
    {
LABEL_21:
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      LOBYTE(v139) = 10;
      v140 = (void *)v137;
      v147 = 1;
      goto LABEL_179;
    }
    if ((WTF::StringImpl::startsWith() & 1) != 0)
    {
      v8 = 1;
    }
    else
    {
      if (!*v7 || (WTF::StringImpl::startsWith() & 1) == 0)
        goto LABEL_21;
      v8 = 0;
    }
    v151 = v8;
    v9 = *v7;
    v126 = v6;
    if (*v7 && (v10 = *(unsigned int *)(v9 + 4), v10 >= 7))
    {
      v11 = *(_QWORD *)(v9 + 8);
      v12 = (v10 - 6);
      v13 = v10 - 6;
      if ((*(_BYTE *)(v9 + 16) & 4) != 0)
      {
        if (v13 < v12)
          goto LABEL_229;
        v14 = (const char *)(v11 + 6);
        v12 |= 0x100000000uLL;
      }
      else
      {
        if (v13 < v12)
          goto LABEL_229;
        v14 = (const char *)(v11 + 12);
      }
    }
    else
    {
      v12 = 0x100000000;
      v14 = "";
    }
    v134 = v14;
    v135 = v12;
    WTF::StringView::utf8();
    v16 = (WTF *)v132;
    if (v132)
    {
      v17 = v132 + 16;
      v18 = strlen(v132 + 16);
      if (v18 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_243;
      v19 = v18;
      if (v18 > 0x16)
      {
        v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v18 | 7) != 0x17)
          v21 = v18 | 7;
        v22 = v21 + 1;
        v20 = (__int128 *)operator new(v21 + 1);
        LOBYTE(v12) = v22;
        *((_QWORD *)&v137 + 1) = v19;
        v138 = v22 | 0x8000000000000000;
        *(_QWORD *)&v137 = v20;
      }
      else
      {
        HIBYTE(v138) = v18;
        v20 = &v137;
      }
      v23 = (char *)v20 + v19;
      if (v20 <= (__int128 *)v17 && v23 > v17)
        goto LABEL_229;
      if (v19)
        memmove(v20, v132 + 16, v19);
      *v23 = 0;
    }
    else
    {
      v137 = 0uLL;
      v138 = 0;
    }
    if (SHIBYTE(v150) < 0)
    {
      operator delete((void *)v149);
      v16 = (WTF *)v132;
    }
    v149 = v137;
    v150 = v138;
    HIBYTE(v138) = 0;
    LOBYTE(v137) = 0;
    v132 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        WTF::fastFree(v16, v15);
      else
        --*(_DWORD *)v16;
    }
    v25 = v7[1];
    if (!v153)
      v153 = 1;
    v152 = v25;
    if (*((_BYTE *)v7 + 18))
    {
      v26 = *((unsigned __int16 *)v7 + 8);
      if (!v155)
        v155 = 1;
      v154 = v26;
    }
    v27 = v7[3];
    v124 = v5;
    v125 = v4;
    if (v27)
    {
      v28 = *(_QWORD *)(v27 + 8);
      v29 = *(unsigned int *)(v27 + 4) | ((unint64_t)((*(_DWORD *)(v27 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v28 = 0;
      v29 = 0x100000000;
    }
    *(_QWORD *)&v137 = v28;
    *((_QWORD *)&v137 + 1) = v29;
    LOWORD(v138) = 59;
    BYTE2(v138) = 0;
    v134 = (const char *)&v137;
    LODWORD(v135) = 0;
    v136 = (_DWORD)v29 == 0;
    WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v134);
    v30 = v135;
    v128 = DWORD2(v137);
    if ((_DWORD)v135 == DWORD2(v137) && v136)
      goto LABEL_174;
    v127 = v7;
    do
    {
      v31 = *((unsigned int *)v134 + 2);
      if (v31 <= v30)
      {
LABEL_173:
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        LOBYTE(v139) = 10;
        v140 = v132;
        v147 = 1;
        v5 = v124;
        v4 = v125;
        v7 = v127;
        v6 = v126;
        goto LABEL_179;
      }
      v32 = HIDWORD(v135);
      if (v31 - v30 > HIDWORD(v135))
        goto LABEL_50;
      if (v30)
      {
        v32 = v31 - v30;
LABEL_50:
        v33 = v30;
        v34 = v32;
        v12 = v31 - v30;
        if (v134[12])
        {
          if (v12 < v32)
            goto LABEL_229;
          v35 = *(_QWORD *)v134 + v33;
          v34 = v32 | 0x100000000;
        }
        else
        {
          if (v12 < v32)
            goto LABEL_229;
          v35 = *(_QWORD *)v134 + 2 * v33;
        }
        goto LABEL_57;
      }
      v35 = *(_QWORD *)v134;
      v34 = *((_QWORD *)v134 + 1);
LABEL_57:
      if ((v34 & 0xFF00000000) != 0)
      {
        if (!(_DWORD)v34)
          goto LABEL_173;
        v36 = 16;
        if ((v34 & 0xFFFFFFF0) == 0)
          v36 = v34;
        v37 = v36;
        v38 = (_BYTE *)v35;
        do
        {
          if (*v38 == 61)
            goto LABEL_66;
          ++v38;
          --v37;
        }
        while (v37);
        if (v34 < 0x11uLL)
          goto LABEL_173;
        v38 = memchr((void *)(v35 + v36), 61, v34 - v36);
        if (!v38)
          goto LABEL_173;
LABEL_66:
        v39 = (uint64_t)&v38[-v35];
      }
      else
      {
        if (!(_DWORD)v34)
          goto LABEL_173;
        v79 = (int16x8_t *)(v35 + 2 * v34);
        if (v34 <= 0x1FuLL)
        {
          v87 = 2 * v34;
          v86 = (__int16 *)v35;
          while (*v86 != 61)
          {
            ++v86;
            v87 -= 2;
            if (!v87)
              goto LABEL_173;
          }
        }
        else
        {
          v80 = (int16x8_t *)v35;
          do
          {
            v81.i64[0] = 0x3D003D003D003DLL;
            v81.i64[1] = 0x3D003D003D003DLL;
            v82 = (int8x16_t)vceqq_s16(*v80, v81);
            v81.i16[0] = vmaxvq_u16((uint16x8_t)v82);
            if (v81.i32[0])
              goto LABEL_167;
            v83 = v80 + 1;
            v84 = &v80[1].i8[14];
            ++v80;
          }
          while (v84 < (char *)v79);
          if (v83 >= v79)
            goto LABEL_173;
          v85.i64[0] = 0x3D003D003D003DLL;
          v85.i64[1] = 0x3D003D003D003DLL;
          v82 = (int8x16_t)vceqq_s16(v79[-1], v85);
          v85.i16[0] = vmaxvq_u16((uint16x8_t)v82);
          if (!v85.i32[0])
            goto LABEL_173;
          v80 = v79 - 1;
LABEL_167:
          v86 = &v80->i16[vminvq_u16((uint16x8_t)vornq_s8((int8x16_t)xmmword_196881010, v82))];
        }
        if (v86 == (__int16 *)v79)
          goto LABEL_173;
        v39 = ((uint64_t)v86 - v35) >> 1;
      }
      if (v39 == -1)
        goto LABEL_173;
      if ((_DWORD)v34)
      {
        v40 = (const char *)v35;
        if (v34 > v39)
          v40 = (const char *)v35;
      }
      else
      {
        v40 = "";
      }
      v132 = (char *)v40;
      WTF::StringView::utf8();
      v12 = (v34 - (v39 + 1));
      if (v34 > (int)v39 + 1 && (_DWORD)v39 != -1)
      {
        v78 = v34 - (unint64_t)(v39 + 1);
        if ((v34 & 0xFF00000000) != 0)
        {
          if (v78 < v12)
            goto LABEL_229;
        }
        else if (v78 < v12)
        {
          goto LABEL_229;
        }
      }
      WTF::StringView::utf8();
      v41 = operator new(0x50uLL);
      if (!v133)
        goto LABEL_229;
      v5 = (size_t)v41;
      v42 = (char *)v133 + 16;
      v43 = strlen((const char *)v133 + 16);
      if (v43 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_243;
      v44 = v43;
      v45 = (void **)(v5 + 32);
      if (v43 > 0x16)
      {
        v47 = (v43 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v43 | 7) != 0x17)
          v47 = v43 | 7;
        v48 = v47 + 1;
        v46 = (char *)operator new(v47 + 1);
        LOBYTE(v12) = v48;
        *(_QWORD *)(v5 + 40) = v44;
        *(_QWORD *)(v5 + 48) = v48 | 0x8000000000000000;
        *(_QWORD *)(v5 + 32) = v46;
      }
      else
      {
        *(_BYTE *)(v5 + 55) = v43;
        v46 = (char *)(v5 + 32);
      }
      v49 = &v46[v44];
      if (v46 <= v42 && v49 > v42)
        goto LABEL_229;
      if (v44)
        memcpy(v46, v42, v44);
      *v49 = 0;
      if (!v131)
        goto LABEL_229;
      v50 = (char *)v131 + 16;
      v51 = strlen((const char *)v131 + 16);
      if (v51 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_243;
      v52 = v51;
      if (v51 > 0x16)
      {
        v54 = (v51 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v51 | 7) != 0x17)
          v54 = v51 | 7;
        v55 = v54 + 1;
        v53 = (char *)operator new(v54 + 1);
        LOBYTE(v12) = v55;
        *(_QWORD *)(v5 + 64) = v52;
        *(_QWORD *)(v5 + 72) = v55 | 0x8000000000000000;
        *(_QWORD *)(v5 + 56) = v53;
      }
      else
      {
        v53 = (char *)(v5 + 56);
        *(_BYTE *)(v5 + 79) = v52;
      }
      v56 = &v53[v52];
      if (v53 <= v50 && v56 > v50)
        goto LABEL_229;
      __p = (char *)v5;
      if (v52)
        memcpy(v53, v50, v52);
      *v56 = 0;
      v12 = v157;
      v57 = (uint64_t *)&v157;
      v58 = (uint64_t *)&v157;
      if (!v157)
      {
LABEL_134:
        v74 = (uint64_t)__p;
        *(_QWORD *)__p = 0;
        *((_QWORD *)__p + 1) = 0;
        *((_QWORD *)__p + 2) = v57;
        *v58 = (uint64_t)__p;
        if (*v156)
        {
          v156 = (_QWORD *)*v156;
          v74 = *v58;
        }
        std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(v157, v74);
        ++v158;
        goto LABEL_140;
      }
      v59 = *(unsigned __int8 *)(v5 + 55);
      v60 = *(_BYTE *)(v5 + 55);
      v4 = *(char **)(v5 + 32);
      v61 = *(_QWORD *)(v5 + 40);
      if (v61)
        v62 = v4 == 0;
      else
        v62 = 0;
      v63 = !v62;
      v130 = v63;
      while (1)
      {
        while (1)
        {
          v57 = (uint64_t *)v12;
          v64 = v45;
          v65 = v59;
          if ((char)v59 < 0)
          {
            if ((v61 & 0x8000000000000000) != 0)
              goto LABEL_229;
            v64 = (void **)v4;
            v65 = v61;
            LOBYTE(v12) = v130;
            if ((v130 & 1) == 0)
              goto LABEL_229;
          }
          v66 = (const void **)(v57 + 4);
          LODWORD(v12) = *((char *)v57 + 55);
          v67 = *((unsigned __int8 *)v57 + 55);
          v68 = v57 + 4;
          v5 = v67;
          if ((v12 & 0x80000000) != 0)
          {
            v5 = v57[5];
            if ((v5 & 0x8000000000000000) != 0)
              goto LABEL_229;
            v68 = *v66;
            if (v5)
            {
              if (!v68)
                goto LABEL_229;
            }
          }
          v69 = v5 >= v65 ? v65 : v5;
          v70 = memcmp(v64, v68, v69);
          if (!v70)
            break;
          if ((v70 & 0x80000000) == 0)
            goto LABEL_115;
LABEL_129:
          v12 = *v57;
          v58 = v57;
          if (!*v57)
            goto LABEL_134;
        }
        if (v65 < v5)
          goto LABEL_129;
LABEL_115:
        if ((v67 & 0x80) != 0)
        {
          v67 = v57[5];
          if ((v67 & 0x8000000000000000) != 0)
            goto LABEL_229;
          v66 = (const void **)*v66;
          if (v67)
          {
            if (!v66)
              goto LABEL_229;
          }
        }
        v71 = v45;
        v5 = v59;
        if ((char)v59 < 0)
        {
          if ((v61 & 0x8000000000000000) != 0)
            goto LABEL_229;
          v71 = (void **)v4;
          v5 = v61;
          LOBYTE(v12) = v130;
          if ((v130 & 1) == 0)
            goto LABEL_229;
        }
        if (v5 >= v67)
          v72 = v67;
        else
          v72 = v5;
        v73 = memcmp(v66, v71, v72);
        if (v73)
        {
          if ((v73 & 0x80000000) == 0)
            break;
          goto LABEL_132;
        }
        if (v67 >= v5)
          break;
LABEL_132:
        v12 = v57[1];
        if (!v12)
        {
          v58 = v57 + 1;
          goto LABEL_134;
        }
      }
      if (__p[79] < 0)
      {
        operator delete(*((void **)__p + 7));
        if (__p[55] < 0)
          goto LABEL_150;
      }
      else
      {
        if ((v60 & 0x80) == 0)
          goto LABEL_139;
LABEL_150:
        operator delete(*v45);
      }
LABEL_139:
      operator delete(__p);
LABEL_140:
      v7 = v127;
      v76 = v131;
      v131 = 0;
      if (*(_DWORD *)v76 == 1)
        WTF::fastFree(v76, v75);
      else
        --*(_DWORD *)v76;
      v77 = v133;
      v133 = 0;
      if (*(_DWORD *)v77 == 1)
        WTF::fastFree(v77, v75);
      else
        --*(_DWORD *)v77;
      WTF::StringView::SplitResult::Iterator::operator++();
      v30 = v135;
    }
    while ((_DWORD)v135 != v128 || !v136);
LABEL_174:
    webrtc::RtpCodec::RtpCodec();
    v139 = MEMORY[0x1E0DCDD48] + 16;
    v142 = v159;
    v143 = 0;
    v5 = v124;
    v4 = v125;
    v6 = v126;
    if (v160 >= 2)
    {
      if ((v160 & 1) != 0)
      {
        absl::inlined_vector_internal::Storage<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::InitFrom(&v143, &v160);
      }
      else
      {
        v143 = v160;
        v144 = v161;
        v145 = v162;
        v146 = v163;
      }
    }
    v147 = 0;
LABEL_179:
    webrtc::RtpCodecCapability::~RtpCodecCapability((webrtc::RtpCodecCapability *)&v148);
    if (!v147)
    {
      webrtc::RtpCodec::RtpCodec();
      LOBYTE(v12) = v143;
      v148 = v123;
      v159 = v142;
      v160 = 0;
      if (v143 >= 2)
      {
        if ((v143 & 1) != 0)
        {
          absl::inlined_vector_internal::Storage<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::InitFrom(&v160, &v143);
        }
        else
        {
          v160 = v143;
          v161 = v144;
          v162 = v145;
          LOBYTE(v12) = v146;
          v163 = v146;
        }
      }
      if (v5 < (unint64_t)v6)
      {
        if (v5)
        {
          v89 = webrtc::RtpCodec::RtpCodec();
          *(_QWORD *)v5 = MEMORY[0x1E0DCDD48] + 16;
          *(_QWORD *)(v5 + 104) = v159;
          *(_QWORD *)(v89 + 112) = 0;
          v90 = (unint64_t *)(v89 + 112);
          if (v160 >= 2)
          {
            if ((v160 & 1) != 0)
            {
              absl::inlined_vector_internal::Storage<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::InitFrom(v90, &v160);
            }
            else
            {
              *(_QWORD *)(v5 + 112) = v160;
              v91 = v161;
              v92 = v162;
              *(_QWORD *)(v5 + 152) = v163;
              *(_OWORD *)(v5 + 136) = v92;
              *(_OWORD *)(v5 + 120) = v91;
            }
          }
          v5 += 160;
          goto LABEL_217;
        }
LABEL_229:
        __break(1u);
LABEL_230:
        v113 = 0;
        v115 = a3;
        *(_QWORD *)a3 = 0;
        *((_QWORD *)a3 + 1) = 0;
        *((_QWORD *)a3 + 2) = 0;
        goto LABEL_231;
      }
      v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (_QWORD)v4) >> 5) + 1;
      if (v12 > 0x199999999999999)
LABEL_243:
        abort();
      if (0x999999999999999ALL * ((v6 - v4) >> 5) > v12)
        v12 = 0x999999999999999ALL * ((v6 - v4) >> 5);
      if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v4) >> 5) >= 0xCCCCCCCCCCCCCCLL)
        v12 = 0x199999999999999;
      if (!v12)
        goto LABEL_229;
      if (v12 <= 0x199999999999999)
      {
        v93 = 5 * v12;
        v94 = (char *)operator new(160 * v12);
        v95 = &v94[32 * ((uint64_t)(v5 - (_QWORD)v4) >> 5)];
        v96 = webrtc::RtpCodec::RtpCodec();
        *(_QWORD *)v95 = MEMORY[0x1E0DCDD48] + 16;
        v97 = v160;
        *((_QWORD *)v95 + 13) = v159;
        *(_QWORD *)(v96 + 112) = 0;
        v98 = (unint64_t *)(v96 + 112);
        if (v97 >= 2)
        {
          if ((v97 & 1) != 0)
          {
            absl::inlined_vector_internal::Storage<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::InitFrom(v98, &v160);
          }
          else
          {
            *v98 = v97;
            v99 = &v94[32 * ((uint64_t)(v5 - (_QWORD)v4) >> 5)];
            v100 = v162;
            *(_OWORD *)(v99 + 120) = v161;
            *(_OWORD *)(v99 + 136) = v100;
            *((_QWORD *)v99 + 19) = v163;
          }
        }
        if ((char *)v5 == v4)
        {
          v109 = &v94[32 * ((uint64_t)(v5 - (_QWORD)v4) >> 5)];
        }
        else
        {
          v101 = 0;
          do
          {
            v102 = &v95[v101];
            webrtc::RtpCodec::RtpCodec();
            *((_QWORD *)v102 - 20) = MEMORY[0x1E0DCDD48] + 16;
            v103 = *(_QWORD *)(v5 + v101 - 56);
            *((_QWORD *)v102 - 6) = 0;
            v104 = (unint64_t *)&v95[v101 - 48];
            *(_QWORD *)&v95[v101 - 56] = v103;
            v105 = *(_QWORD *)(v5 + v101 - 48);
            if (v105 >= 2)
            {
              if ((v105 & 1) != 0)
              {
                absl::inlined_vector_internal::Storage<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::InitFrom(v104, (unint64_t *)(v5 + v101 - 48));
              }
              else
              {
                *v104 = v105;
                v106 = &v95[v101];
                v107 = *(_OWORD *)(v5 + v101 - 40);
                v108 = *(_OWORD *)(v5 + v101 - 24);
                *((_QWORD *)v106 - 1) = *(_QWORD *)(v5 + v101 - 8);
                *(_OWORD *)(v106 - 24) = v108;
                *(_OWORD *)(v106 - 40) = v107;
              }
            }
            v101 -= 160;
          }
          while ((char *)(v5 + v101) != v4);
          v109 = &v95[v101];
          v110 = (char *)(v5 - 160);
          v111 = v110;
          do
          {
            v112 = *(void (***)(char *))v111;
            v111 -= 160;
            (*v112)(v110);
            v62 = v110 == v4;
            v110 = v111;
          }
          while (!v62);
        }
        v6 = &v94[32 * v93];
        v5 = (size_t)(v95 + 160);
        if (v4)
          operator delete(v4);
        v4 = v109;
LABEL_217:
        webrtc::RtpCodecCapability::~RtpCodecCapability((webrtc::RtpCodecCapability *)&v148);
        if (v147 != -1)
          ((void (*)(void))*(&off_1E33633E0 + v147))();
        v7 += 4;
        if (v7 == (uint64_t *)v122)
          goto LABEL_224;
        continue;
      }
LABEL_245:
      std::__throw_bad_array_new_length[abi:sn180100]();
    }
    break;
  }
  if (v147 != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_245;
  }
  v119 = v140;
  v140 = 0;
  *a3 = v139;
  *((_QWORD *)a3 + 1) = v119;
  a3[16] = 1;
  _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6webrtc18RtpCodecCapabilityEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(v88, (WTF::StringImpl *)&v139);
  if (v4)
    goto LABEL_234;
}

uint64_t WebCore::LibWebRTCRtpTransformBackend::clearTransformableFrameCallback(WebCore::LibWebRTCRtpTransformBackend *this)
{
  unsigned __int8 *v2;
  uint64_t result;
  int v5;

  v2 = (unsigned __int8 *)this + 32;
  if (__ldaxr((unsigned __int8 *)this + 32))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 32);
LABEL_5:
  result = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v5 = __ldxr(v2);
  if (v5 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t WebCore::LibWebRTCRtpTransformBackend::sendFrameToOutput(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v4 = (unsigned __int8 *)(a1 + 48);
  if (__ldaxr((unsigned __int8 *)(a1 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 48);
LABEL_5:
  if (*(_QWORD *)(a1 + 80) == 1)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 24);
    v7 = *a2;
    *a2 = 0;
    v21 = v7;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 32))(v6, &v21);
    result = v21;
    v21 = 0;
    if (!result)
      goto LABEL_32;
    goto LABEL_7;
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 40))(*a2);
  v9 = *(_QWORD *)(a1 + 64);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v11 = result;
      if (v9 <= result)
        v11 = result % v9;
    }
    else
    {
      v11 = ((_DWORD)v9 - 1) & result;
    }
    v12 = *(uint64_t ***)(*(_QWORD *)(a1 + 56) + 8 * v11);
    if (v12)
    {
      v13 = *v12;
      if (v13)
      {
        if (v10.u32[0] >= 2uLL)
        {
          while (1)
          {
            v16 = v13[1];
            if (v16 == result)
            {
              if (*((_DWORD *)v13 + 4) == (_DWORD)result)
              {
LABEL_31:
                v17 = v13[3];
                v18 = *a2;
                *a2 = 0;
                v20 = v18;
                (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v17 + 32))(v17, &v20);
                result = v20;
                v20 = 0;
                if (!result)
                  goto LABEL_32;
LABEL_7:
                result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
                goto LABEL_32;
              }
            }
            else
            {
              if (v16 >= v9)
                v16 %= v9;
              if (v16 != v11)
                goto LABEL_32;
            }
            v13 = (uint64_t *)*v13;
            if (!v13)
              goto LABEL_32;
          }
        }
        v14 = v9 - 1;
        do
        {
          v15 = v13[1];
          if (v15 == result)
          {
            if (*((_DWORD *)v13 + 4) == (_DWORD)result)
              goto LABEL_31;
          }
          else if ((v15 & v14) != v11)
          {
            break;
          }
          v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
    }
  }
LABEL_32:
  v19 = __ldxr(v4);
  if (v19 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t WebCore::LibWebRTCRtpTransformBackend::processTransformedFrame(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  v3 = v2;
  if (v2)
  {
    WebCore::LibWebRTCRtpTransformBackend::sendFrameToOutput(result, &v3);
    result = v3;
    if (v3)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return result;
}

uint64_t WebCore::LibWebRTCRtpTransformBackend::Transform(uint64_t result, uint64_t *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v3 = result;
  v4 = (unsigned __int8 *)(result + 32);
  if (__ldaxr((unsigned __int8 *)(result + 32)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](result + 32);
LABEL_5:
  v6 = *(_QWORD *)(v3 + 40);
  if (v6)
  {
    if (*(_DWORD *)(v3 + 24))
      v7 = 0;
    else
      v7 = *(_DWORD *)(v3 + 28) == 1;
    v8 = WTF::fastMalloc((WTF *)0x20);
    *(_DWORD *)(v8 + 8) = 1;
    *(_QWORD *)v8 = off_1E33638D8;
    v9 = *a2;
    *a2 = 0;
    *(_QWORD *)(v8 + 16) = v9;
    *(_BYTE *)(v8 + 24) = v7;
    v11 = v8;
    (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v3 + 40) + 16))(*(_QWORD *)(v3 + 40), &v11);
    result = v11;
    v11 = 0;
    if (result)
    {
      if (*(_DWORD *)(result + 8) == 1)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      else
        --*(_DWORD *)(result + 8);
    }
  }
  v10 = __ldxr(v4);
  if (v10 == 1)
  {
    if (!__stlxr(0, v4))
    {
      if (v6)
        return result;
      return WebCore::LibWebRTCRtpTransformBackend::sendFrameToOutput(v3, a2);
    }
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v4);
  if (!v6)
    return WebCore::LibWebRTCRtpTransformBackend::sendFrameToOutput(v3, a2);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::LibWebRTCRtpTransformBackend::Transform(uint64_t a1, uint64_t *a2)
{
  return WebCore::LibWebRTCRtpTransformBackend::Transform(a1 - 16, a2);
}

uint64_t WebCore::LibWebRTCRtpTransformBackend::RegisterTransformedFrameCallback(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 *v4;
  uint64_t result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;

  v11 = 0;
  v4 = (unsigned __int8 *)(a1 + 48);
  if (__ldaxr((unsigned __int8 *)(a1 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 48);
LABEL_5:
  result = std::__hash_table<std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>>>::__emplace_unique_key_args<unsigned int,unsigned int const&,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>(a1 + 56, v11, &v11, a2);
  if (!v7)
  {
    v8 = *a2;
    *a2 = 0;
    v9 = *(_QWORD *)(result + 24);
    *(_QWORD *)(result + 24) = v8;
    if (v9)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  v10 = __ldxr(v4);
  if (v10 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::LibWebRTCRtpTransformBackend::RegisterTransformedFrameCallback(uint64_t a1, uint64_t *a2)
{
  unsigned __int8 *v4;
  uint64_t result;
  char v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;

  v11 = 0;
  v4 = (unsigned __int8 *)(a1 + 32);
  if (__ldaxr((unsigned __int8 *)(a1 + 32)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 32);
LABEL_5:
  result = std::__hash_table<std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>>>::__emplace_unique_key_args<unsigned int,unsigned int const&,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>(a1 + 40, v11, &v11, a2);
  if (!v7)
  {
    v8 = *a2;
    *a2 = 0;
    v9 = *(_QWORD *)(result + 24);
    *(_QWORD *)(result + 24) = v8;
    if (v9)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  v10 = __ldxr(v4);
  if (v10 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t WebCore::LibWebRTCRtpTransformBackend::RegisterTransformedFrameSinkCallback(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  unsigned __int8 *v5;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;

  v12 = a3;
  v5 = (unsigned __int8 *)(a1 + 48);
  if (__ldaxr((unsigned __int8 *)(a1 + 48)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 48);
LABEL_5:
  result = std::__hash_table<std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>>>::__emplace_unique_key_args<unsigned int,unsigned int const&,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>(a1 + 56, v12, &v12, a2);
  if (!v8)
  {
    v9 = *a2;
    *a2 = 0;
    v10 = *(_QWORD *)(result + 24);
    *(_QWORD *)(result + 24) = v9;
    if (v10)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = __ldxr(v5);
  if (v11 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (__stlxr(0, v5))
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::LibWebRTCRtpTransformBackend::RegisterTransformedFrameSinkCallback(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  unsigned __int8 *v5;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int v12;

  v12 = a3;
  v5 = (unsigned __int8 *)(a1 + 32);
  if (__ldaxr((unsigned __int8 *)(a1 + 32)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](a1 + 32);
LABEL_5:
  result = std::__hash_table<std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>>>::__emplace_unique_key_args<unsigned int,unsigned int const&,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>(a1 + 40, v12, &v12, a2);
  if (!v8)
  {
    v9 = *a2;
    *a2 = 0;
    v10 = *(_QWORD *)(result + 24);
    *(_QWORD *)(result + 24) = v9;
    if (v10)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  v11 = __ldxr(v5);
  if (v11 != 1)
  {
    __clrex();
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  }
  if (__stlxr(0, v5))
    return WTF::Lock::unlockSlow((WTF::Lock *)v5);
  return result;
}

uint64_t *WebCore::LibWebRTCRtpTransformBackend::UnregisterTransformedFrameCallback(WebCore::LibWebRTCRtpTransformBackend *this)
{
  unsigned __int8 *v2;
  uint64_t *result;
  int v5;

  v2 = (unsigned __int8 *)this + 48;
  if (__ldaxr((unsigned __int8 *)this + 48))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 48);
LABEL_5:
  result = std::__hash_table<std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>>>::__erase_unique<unsigned int>((uint64_t *)this + 7, 0);
  v5 = __ldxr(v2);
  if (v5 != 1)
  {
    __clrex();
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t *`non-virtual thunk to'WebCore::LibWebRTCRtpTransformBackend::UnregisterTransformedFrameCallback(WebCore::LibWebRTCRtpTransformBackend *this)
{
  unsigned __int8 *v2;
  uint64_t *result;
  int v5;

  v2 = (unsigned __int8 *)this + 32;
  if (__ldaxr((unsigned __int8 *)this + 32))
  {
    __clrex();
  }
  else if (!__stxr(1u, v2))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 32);
LABEL_5:
  result = std::__hash_table<std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>>>::__erase_unique<unsigned int>((uint64_t *)this + 5, 0);
  v5 = __ldxr(v2);
  if (v5 != 1)
  {
    __clrex();
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  }
  if (__stlxr(0, v2))
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v2);
  return result;
}

uint64_t *WebCore::LibWebRTCRtpTransformBackend::UnregisterTransformedFrameSinkCallback(WebCore::LibWebRTCRtpTransformBackend *this, void *a2)
{
  unsigned __int8 *v4;
  uint64_t *result;
  int v7;

  v4 = (unsigned __int8 *)this + 48;
  if (__ldaxr((unsigned __int8 *)this + 48))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 48);
LABEL_5:
  result = std::__hash_table<std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>>>::__erase_unique<unsigned int>((uint64_t *)this + 7, a2);
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

uint64_t *`non-virtual thunk to'WebCore::LibWebRTCRtpTransformBackend::UnregisterTransformedFrameSinkCallback(WebCore::LibWebRTCRtpTransformBackend *this, void *a2)
{
  unsigned __int8 *v4;
  uint64_t *result;
  int v7;

  v4 = (unsigned __int8 *)this + 32;
  if (__ldaxr((unsigned __int8 *)this + 32))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 32);
LABEL_5:
  result = std::__hash_table<std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>>>::__erase_unique<unsigned int>((uint64_t *)this + 5, a2);
  v7 = __ldxr(v4);
  if (v7 != 1)
  {
    __clrex();
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return result;
}

void WebCore::LibWebRTCRtpTransceiverBackend::~LibWebRTCRtpTransceiverBackend(WebCore::LibWebRTCRtpTransceiverBackend *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void WebCore::LibWebRTCRtpTransceiverBackend::~LibWebRTCRtpTransceiverBackend(WebCore::LibWebRTCRtpTransceiverBackend *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::fastFree(this, a2);
}

void WebCore::LibWebRTCMediaEndpoint::~LibWebRTCMediaEndpoint(WebCore::LibWebRTCMediaEndpoint *this, WTF::StringImpl *a2)
{
  WTF *v2;
  void *v3;

  WebCore::LibWebRTCMediaEndpoint::~LibWebRTCMediaEndpoint(this, a2);
  WTF::fastFree(v2, v3);
}

{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  WTF::StringImpl ***v19;
  uint64_t v20;
  WTF *v21;
  WTF::StringImpl **v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF *v25;
  uint64_t v26;
  WebCore::MediaStream **v27;
  WebCore::MediaStream *v28;
  WTF::StringImpl *v29;
  bmalloc::api *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;

  *(_QWORD *)this = off_1E3362D18;
  *((_QWORD *)this + 2) = &unk_1E3362E08;
  *((_QWORD *)this + 3) = &unk_1E3362E40;
  v3 = (unsigned int *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  v7 = *((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = (WTF *)*((_QWORD *)this + 25);
  if (v8)
  {
    v9 = *((unsigned int *)this + 52);
    if ((_DWORD)v9)
    {
      v10 = *((_QWORD *)this + 25);
      do
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        v12 = *(WTF::StringImpl **)v10;
        *(_QWORD *)v10 = 0;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, a2);
          else
            *(_DWORD *)v12 -= 2;
        }
        v10 += 16;
        --v9;
      }
      while (v9);
    }
    WTF::fastFree(v8, a2);
  }
  *((_QWORD *)this + 18) = off_1E31F7378;
  v13 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  WebCore::TimerBase::~TimerBase((WebCore::LibWebRTCMediaEndpoint *)((char *)this + 144));
  v15 = *((_QWORD *)this + 16);
  if (v15)
  {
    v16 = *(unsigned int *)(v15 - 4);
    if ((_DWORD)v16)
    {
      for (i = 0; i != v16; ++i)
      {
        if (*(_QWORD *)(v15 + 24 * i) != -1)
        {
          v18 = v15 + 24 * i;
          v19 = (WTF::StringImpl ***)(v18 + 8);
          v20 = *(unsigned int *)(v18 + 20);
          if ((_DWORD)v20)
          {
            v22 = *v19;
            v23 = 8 * v20;
            do
            {
              v24 = *v22;
              *v22 = 0;
              if (v24)
              {
                if (*(_DWORD *)v24 == 2)
                  WTF::StringImpl::destroy(v24, v14);
                else
                  *(_DWORD *)v24 -= 2;
              }
              ++v22;
              v23 -= 8;
            }
            while (v23);
          }
          v21 = (WTF *)*v19;
          if (*v19)
          {
            *v19 = 0;
            *(_DWORD *)(v15 + 24 * i + 16) = 0;
            WTF::fastFree(v21, v14);
          }
        }
      }
    }
    WTF::fastFree((WTF *)(v15 - 16), v14);
  }
  v25 = (WTF *)*((_QWORD *)this + 13);
  if (v25)
  {
    v26 = *((unsigned int *)this + 28);
    if ((_DWORD)v26)
    {
      v27 = (WebCore::MediaStream **)((char *)v25 + 8);
      do
      {
        v28 = *v27;
        *v27 = 0;
        if (v28)
        {
          if (*((_DWORD *)v28 + 22) == 1)
          {
            WebCore::MediaStream::~MediaStream(v28);
            bmalloc::api::isoDeallocate(v30, v31);
          }
          else
          {
            --*((_DWORD *)v28 + 22);
          }
        }
        v29 = *(v27 - 1);
        *(v27 - 1) = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v14);
          else
            *(_DWORD *)v29 -= 2;
        }
        v27 += 2;
        --v26;
      }
      while (v26);
    }
    WTF::fastFree(v25, v14);
  }
  v32 = *((_QWORD *)this + 6);
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = *((_QWORD *)this + 5);
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
}

uint64_t WebCore::LibWebRTCMediaEndpoint::AddRef(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 8);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

BOOL WebCore::LibWebRTCMediaEndpoint::Release(WebCore::LibWebRTCMediaEndpoint *this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  _QWORD *v6;
  _QWORD *v7;

  v1 = (unsigned int *)((char *)this + 8);
  v2 = atomic_load((unsigned int *)this + 2);
  do
  {
    v3 = __ldaxr(v1);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v1));
  if (!v4)
  {
    atomic_store(1u, v1);
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = off_1E3363400;
    v6[1] = v1;
    v7 = v6;
    WTF::ensureOnMainThread();
    if (v7)
      (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  }
  return v2 != 1;
}

uint64_t WebCore::LibWebRTCMediaEndpoint::logIdentifier(WebCore::LibWebRTCMediaEndpoint *this)
{
  return *((_QWORD *)this + 31);
}

const char *WebCore::LibWebRTCMediaEndpoint::logClassName(WebCore::LibWebRTCMediaEndpoint *this)
{
  return "LibWebRTCMediaEndpoint";
}

uint64_t `non-virtual thunk to'WebCore::LibWebRTCMediaEndpoint::AddRef(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this - 8);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

BOOL `non-virtual thunk to'WebCore::LibWebRTCMediaEndpoint::Release(WebCore::LibWebRTCMediaEndpoint *this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  _QWORD *v6;
  _QWORD *v7;

  v1 = (unsigned int *)((char *)this - 8);
  v2 = atomic_load((unsigned int *)this - 2);
  do
  {
    v3 = __ldaxr(v1);
    v4 = v3 - 1;
  }
  while (__stlxr(v4, v1));
  if (!v4)
  {
    atomic_store(1u, v1);
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = off_1E3363400;
    v6[1] = v1;
    v7 = v6;
    WTF::ensureOnMainThread();
    if (v7)
      (*(void (**)(_QWORD *))(*v7 + 8))(v7);
  }
  return v2 != 1;
}

void `non-virtual thunk to'WebCore::LibWebRTCMediaEndpoint::~LibWebRTCMediaEndpoint(WebCore::LibWebRTCMediaEndpoint *this, WTF::StringImpl *a2)
{
  WebCore::LibWebRTCMediaEndpoint::~LibWebRTCMediaEndpoint((WebCore::LibWebRTCMediaEndpoint *)((char *)this - 16), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::LibWebRTCMediaEndpoint::~LibWebRTCMediaEndpoint((WebCore::LibWebRTCMediaEndpoint *)((char *)this - 16), a2);
  WTF::fastFree(v2, v3);
}

{
  WebCore::LibWebRTCMediaEndpoint::~LibWebRTCMediaEndpoint((WebCore::LibWebRTCMediaEndpoint *)((char *)this - 24), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::LibWebRTCMediaEndpoint::~LibWebRTCMediaEndpoint((WebCore::LibWebRTCMediaEndpoint *)((char *)this - 24), a2);
  WTF::fastFree(v2, v3);
}

uint64_t `non-virtual thunk to'WebCore::LibWebRTCMediaEndpoint::logger(WebCore::LibWebRTCMediaEndpoint *this)
{
  return *((_QWORD *)this + 27);
}

const char *`non-virtual thunk to'WebCore::LibWebRTCMediaEndpoint::logClassName(WebCore::LibWebRTCMediaEndpoint *this)
{
  return "LibWebRTCMediaEndpoint";
}

uint64_t `non-virtual thunk to'WebCore::LibWebRTCMediaEndpoint::logIdentifier(WebCore::LibWebRTCMediaEndpoint *this)
{
  return *((_QWORD *)this + 28);
}

uint64_t WebCore::LibWebRTCPeerConnectionBackend::isLocalDescriptionSet(WebCore::LibWebRTCPeerConnectionBackend *this)
{
  return *((unsigned __int8 *)this + 96);
}

uint64_t WebCore::LibWebRTCRtpTransformBackend::mediaType(WebCore::LibWebRTCRtpTransformBackend *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t WebCore::LibWebRTCRtpTransformBackend::side(WebCore::LibWebRTCRtpTransformBackend *this)
{
  return *((unsigned int *)this + 7);
}

uint64_t WebCore::LibWebRTCRtpTransformBackend::AddRef(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this + 8);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

uint64_t WebCore::LibWebRTCRtpTransformBackend::Release(WebCore::LibWebRTCRtpTransformBackend *this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  _QWORD *v5;
  _QWORD *v6;

  v1 = (unsigned int *)((char *)this + 8);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
  {
    atomic_store(1u, v1);
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v5 = off_1E3361EB0;
    v5[1] = v1;
    v6 = v5;
    WTF::ensureOnMainThread();
    if (v6)
      (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  }
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::LibWebRTCRtpTransformBackend::AddRef(uint64_t this)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(this - 8);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  return this;
}

uint64_t `non-virtual thunk to'WebCore::LibWebRTCRtpTransformBackend::Release(WebCore::LibWebRTCRtpTransformBackend *this)
{
  unsigned int *v1;
  unsigned int v2;
  unsigned int v3;
  _QWORD *v5;
  _QWORD *v6;

  v1 = (unsigned int *)((char *)this - 8);
  do
  {
    v2 = __ldaxr(v1);
    v3 = v2 - 1;
  }
  while (__stlxr(v3, v1));
  if (!v3)
  {
    atomic_store(1u, v1);
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v5 = off_1E3361EB0;
    v5[1] = v1;
    v6 = v5;
    WTF::ensureOnMainThread();
    if (v6)
      (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  }
  return 1;
}

void std::__throw_bad_array_new_length[abi:sn180100]()
{
  abort();
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIN7WebCore27RealtimeOutgoingAudioSourceENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_27RealtimeOutgoingVideoSourceENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJDnSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v6 = off_1E3363888;
      v6[1] = v3;
      v7 = v6;
      WTF::ensureOnMainThread();
      if (v7)
        (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJDnN3WTF3RefIN7WebCore27RealtimeOutgoingAudioSourceENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_27RealtimeOutgoingVideoSourceENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJDnSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v6 = off_1E33638B0;
      v6[1] = v3;
      v7 = v6;
      WTF::ensureOnMainThread();
      if (v7)
        (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    }
  }
}

uint64_t rtc::RefCountedObject<WebCore::LibWebRTCStatsCollector>::AddRef(uint64_t result)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = (unsigned int *)(result + 16);
  do
    v2 = __ldxr(v1);
  while (__stxr(v2 + 1, v1));
  return result;
}

BOOL rtc::RefCountedObject<WebCore::LibWebRTCStatsCollector>::Release(unsigned int *a1)
{
  unsigned int *v1;
  unsigned int v2;

  v1 = a1 + 4;
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1 && v2 == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)a1 + 24))(a1);
  return v2 != 1;
}

_QWORD *rtc::RefCountedObject<WebCore::LibWebRTCStatsCollector>::~RefCountedObject(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;

  *a1 = &unk_1E3363990;
  v2 = a1[1];
  if (v2)
  {
    a1[1] = 0;
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = &off_1E33642C0;
    v3[1] = v2;
    v6 = v3;
    WTF::callOnMainThread();
    if (v6)
      (*(void (**)(_QWORD *))(*v6 + 8))(v6);
    v4 = a1[1];
    a1[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  else
  {
    a1[1] = 0;
  }
  return a1;
}

void rtc::RefCountedObject<WebCore::LibWebRTCStatsCollector>::~RefCountedObject(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = &unk_1E3363990;
  v2 = a1[1];
  if (v2)
  {
    a1[1] = 0;
    v3 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v3 = &off_1E33642C0;
    v3[1] = v2;
    v5 = v3;
    WTF::callOnMainThread();
    if (v5)
      (*(void (**)(_QWORD *))(*v5 + 8))(v5);
    v4 = a1[1];
    a1[1] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  else
  {
    a1[1] = 0;
  }
  JUMPOUT(0x19AEA7644);
}

BOOL rtc::RefCountedObject<WebCore::LibWebRTCStatsCollector>::HasOneRef(uint64_t a1)
{
  unsigned int v1;

  v1 = atomic_load((unsigned int *)(a1 + 16));
  return v1 == 1;
}

size_t WebCore::fromSessionDescriptionType(uint64_t a1)
{
  size_t result;
  size_t v2;
  const void *p_p;
  size_t v4;
  const void *v5;
  size_t v6;
  uint64_t v7;
  void *__p;
  size_t v9;
  unsigned __int8 v10;

  result = (size_t)(*(_QWORD *(**)(void **__return_ptr))(*(_QWORD *)a1 + 64))(&__p);
  v2 = v10;
  if ((char)v10 < 0)
  {
    v4 = v9;
    if ((v9 & 0x8000000000000000) != 0)
      goto LABEL_22;
    p_p = __p;
    if (v9)
    {
      if (!__p)
        goto LABEL_22;
    }
  }
  else
  {
    p_p = &__p;
    v4 = v10;
  }
  result = strlen(MEMORY[0x1E0DCDB48]);
  if (v4 == result)
  {
    result = memcmp(p_p, MEMORY[0x1E0DCDB48], v4);
    if (!(_DWORD)result)
    {
      v7 = 0;
      if ((v2 & 0x80) == 0)
        return v7;
      goto LABEL_18;
    }
  }
  if ((v2 & 0x80) == 0)
  {
    v5 = &__p;
    v6 = v2;
    goto LABEL_13;
  }
  v6 = v9;
  if ((v9 & 0x8000000000000000) == 0)
  {
    v5 = __p;
    if (!v9 || __p)
    {
LABEL_13:
      v7 = 1;
      if (v6 == strlen(MEMORY[0x1E0DCDB50]))
      {
        if (!memcmp(v5, MEMORY[0x1E0DCDB50], v6))
          v7 = 2;
        else
          v7 = 1;
      }
      if ((v2 & 0x80) == 0)
        return v7;
LABEL_18:
      operator delete(__p);
      return v7;
    }
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::LibWebRTCMediaEndpointTransceiverState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy(uint64_t result, unint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  int v21;
  int v22;
  int v23;
  char v24;
  WTF::StringImpl *v25;

  v3 = result;
  v4 = *a2;
  v5 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v5)
  {
    v6 = v4 + 32 * v5;
    while (1)
    {
      WTF::String::isolatedCopy();
      v8 = *(WTF::StringImpl ***)(v4 + 8);
      v9 = *(unsigned int *)(v4 + 20);
      if ((_DWORD)v9)
      {
        v15 = &v8[v9];
        do
        {
          WTF::String::isolatedCopy();
          v16 = v25;
          v25 = 0;
          v17 = *v8;
          *v8 = v16;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
            {
              WTF::StringImpl::destroy(v17, v7);
              v25 = 0;
            }
            else
            {
              *(_DWORD *)v17 -= 2;
            }
          }
          ++v8;
        }
        while (v8 < v15);
        v8 = *(WTF::StringImpl ***)(v4 + 8);
        LODWORD(v9) = *(_DWORD *)(v4 + 20);
      }
      *(_QWORD *)(v4 + 8) = 0;
      v21 = *(_DWORD *)(v4 + 16);
      *(_QWORD *)(v4 + 16) = 0;
      v22 = v9;
      v24 = *(_BYTE *)(v4 + 28);
      v23 = *(_DWORD *)(v4 + 24);
      v20 = v8;
      v10 = *(WTF::StringImpl **)v4;
      *(_QWORD *)v4 = v19;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
        {
          WTF::StringImpl::destroy(v10, v7);
          v12 = *(unsigned int *)(v4 + 20);
          v11 = *(WTF **)(v4 + 8);
          if (!(_DWORD)v12)
            goto LABEL_8;
          v13 = 8 * v12;
          do
          {
            v14 = *(WTF::StringImpl **)v11;
            *(_QWORD *)v11 = 0;
            if (v14)
            {
              if (*(_DWORD *)v14 == 2)
                WTF::StringImpl::destroy(v14, v7);
              else
                *(_DWORD *)v14 -= 2;
            }
            v11 = (WTF *)((char *)v11 + 8);
            v13 -= 8;
          }
          while (v13);
        }
        else
        {
          *(_DWORD *)v10 -= 2;
        }
      }
      v11 = *(WTF **)(v4 + 8);
LABEL_8:
      if (v11)
      {
        *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        WTF::fastFree(v11, v7);
      }
      result = 0;
      v19 = 0;
      *(_QWORD *)(v4 + 8) = v20;
      *(_DWORD *)(v4 + 16) = v21;
      *(_DWORD *)(v4 + 20) = v22;
      *(_DWORD *)(v4 + 24) = v23;
      *(_BYTE *)(v4 + 28) = v24;
      v4 += 32;
      if (v4 >= v6)
      {
        v4 = *a2;
        LODWORD(v5) = *((_DWORD *)a2 + 3);
        break;
      }
    }
  }
  *(_QWORD *)v3 = v4;
  v18 = *((_DWORD *)a2 + 2);
  *a2 = 0;
  a2[1] = 0;
  *(_DWORD *)(v3 + 8) = v18;
  *(_DWORD *)(v3 + 12) = v5;
  return result;
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(uint64_t a1, char *a2)
{
  uint64_t v4;

  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(a1, *((_QWORD *)a2 + 1));
    v4 = *((_QWORD *)a2 + 7);
    *((_QWORD *)a2 + 7) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF3RefIN7WebCore27RealtimeOutgoingAudioSourceENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_27RealtimeOutgoingVideoSourceENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF3RefIN7WebCore27RealtimeOutgoingAudioSourceENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_27RealtimeOutgoingVideoSourceENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF3RefIN7WebCore27RealtimeOutgoingAudioSourceENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_27RealtimeOutgoingVideoSourceENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF3RefIN7WebCore27RealtimeOutgoingAudioSourceENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_27RealtimeOutgoingVideoSourceENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF3RefIN7WebCore27RealtimeOutgoingAudioSourceENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_27RealtimeOutgoingVideoSourceENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *a3;
  v4 = (unsigned int *)(*a3 + 16);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJDnN3WTF3RefIN7WebCore27RealtimeOutgoingAudioSourceENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_27RealtimeOutgoingVideoSourceENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSU_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEERKS12_EEEDcSU_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *a3;
  v4 = (unsigned int *)(*a3 + 24);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  *a2 = v3;
}

_QWORD *std::string::__assign_no_alias<true>(_QWORD *__dst, char *__src, size_t __len)
{
  char *v6;
  size_t v7;
  size_t v8;
  char *v9;
  char *v11;

  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL)
      goto LABEL_16;
    v7 = 44;
    if (__len > 0x2C)
      v7 = __len;
    v8 = (v7 | 7) + 1;
    v9 = (char *)operator new(v8);
    v6 = &v9[__len];
    if (v9 > __src || v6 <= __src)
    {
      v11 = v9;
      memcpy(v9, __src, __len);
      __dst[1] = __len;
      __dst[2] = v8 | 0x8000000000000000;
      *__dst = v11;
      goto LABEL_14;
    }
LABEL_15:
    __break(1u);
LABEL_16:
    abort();
  }
  *((_BYTE *)__dst + 23) = __len;
  v6 = (char *)__dst + __len;
  if (__src >= (char *)__dst && v6 > __src)
    goto LABEL_15;
  if (__len)
    memmove(__dst, __src, __len);
LABEL_14:
  *v6 = 0;
  return __dst;
}

std::string *std::string::__assign_no_alias<false>(std::string *this, const std::string::value_type *__src, size_t __len)
{
  std::string::size_type v4;
  std::string *result;
  const std::string::value_type *v6;

  v4 = this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL;
  if (v4 <= __len)
  {
    std::string::__grow_by_and_replace(this, v4 - 1, __len - v4 + 1, this->__r_.__value_.__l.__size_, 0, this->__r_.__value_.__l.__size_, __len, __src);
    return this;
  }
  result = (std::string *)this->__r_.__value_.__r.__words[0];
  this->__r_.__value_.__l.__size_ = __len;
  v6 = (char *)result + __len;
  if (result > (std::string *)__src || v6 <= __src)
  {
    if (__len)
      memmove(result, __src, __len);
    *v6 = 0;
    return this;
  }
  __break(1u);
  return result;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:sn180100]<webrtc::RtpCodecParameters *,webrtc::RtpCodecParameters *,webrtc::RtpCodecParameters *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  char **v11;
  char v12;
  __int128 v13;
  const std::string::value_type *v14;
  size_t v15;
  uint64_t v16;
  __int128 v17;

  if (a1 != a2)
  {
    v6 = 0;
    v7 = a1 + 88;
    do
    {
      v8 = a3 + v6;
      v9 = a1 + v6;
      if (a1 != a3)
      {
        v10 = (std::string *)(v8 + 8);
        v11 = (char **)(v9 + 8);
        v12 = *(_BYTE *)(v9 + 31);
        if (*(char *)(v8 + 31) < 0)
        {
          if (v12 >= 0)
            v14 = (const std::string::value_type *)(v9 + 8);
          else
            v14 = *v11;
          if (v12 >= 0)
            v15 = *(unsigned __int8 *)(v9 + 31);
          else
            v15 = *(_QWORD *)(a1 + v6 + 16);
          std::string::__assign_no_alias<false>(v10, v14, v15);
        }
        else if ((*(_BYTE *)(v9 + 31) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v10, *v11, *(_QWORD *)(a1 + v6 + 16));
        }
        else
        {
          v13 = *(_OWORD *)v11;
          *(_QWORD *)(v8 + 24) = *(_QWORD *)(v9 + 24);
          *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v13;
        }
        v16 = a3 + v6;
        v17 = *(_OWORD *)(a1 + v6 + 32);
        *(_BYTE *)(v16 + 48) = *(_BYTE *)(a1 + v6 + 48);
        *(_OWORD *)(v16 + 32) = v17;
        std::vector<webrtc::RtcpFeedback>::__assign_with_size[abi:sn180100]<webrtc::RtcpFeedback*,webrtc::RtcpFeedback*>((_QWORD *)(a3 + v6 + 56), *(uint64_t **)(a1 + v6 + 56), *(uint64_t **)(a1 + v6 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + v6 + 64) - *(_QWORD *)(a1 + v6 + 56)) >> 2));
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t *)(a3 + v6 + 80), *(const std::string::value_type ***)(a1 + v6 + 80), (const std::string::value_type **)(v7 + v6));
      }
      *(_DWORD *)(v8 + 104) = *(_DWORD *)(v9 + 104);
      v6 += 112;
    }
    while (v9 + 112 != a2);
    a3 += v6;
  }
  return a3;
}

void std::vector<webrtc::RtcpFeedback>::__assign_with_size[abi:sn180100]<webrtc::RtcpFeedback*,webrtc::RtcpFeedback*>(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  _DWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;

  v6 = a2;
  v8 = a1[2];
  v9 = (_DWORD *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 2) < a4)
  {
    if (v9)
    {
      v10 = (_DWORD *)a1[1];
      v11 = v9;
      if (v10 != v9)
      {
        do
          webrtc::RtcpFeedback::~RtcpFeedback((webrtc::RtcpFeedback *)(v10 - 3));
        while (v10 != v9);
        v11 = (_DWORD *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 <= 0x1555555555555555)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
      v13 = 2 * v12;
      if (2 * v12 <= a4)
        v13 = a4;
      v14 = v12 >= 0xAAAAAAAAAAAAAAALL ? 0x1555555555555555 : v13;
      if (v14 <= 0x1555555555555555)
      {
        v15 = 3 * v14;
        v16 = (char *)operator new(12 * v14);
        *a1 = v16;
        a1[1] = v16;
        a1[2] = &v16[4 * v15];
        while (v6 != a3)
        {
          v6 = (uint64_t *)((char *)v6 + 12);
          v16 = (char *)(webrtc::RtcpFeedback::RtcpFeedback() + 12);
        }
        a1[1] = v16;
        return;
      }
    }
LABEL_37:
    abort();
  }
  v17 = (_DWORD *)a1[1];
  if (0xAAAAAAAAAAAAAAABLL * (v17 - v9) < a4)
  {
    v18 = (uint64_t *)((char *)a2 + 4 * (v17 - v9));
    if (v17 != v9)
    {
      v19 = 4 * (v17 - v9);
      do
      {
        v20 = *v6;
        v9[2] = *((_DWORD *)v6 + 2);
        *(_QWORD *)v9 = v20;
        v9 += 3;
        v6 = (uint64_t *)((char *)v6 + 12);
        v19 -= 12;
      }
      while (v19);
      v9 = (_DWORD *)a1[1];
    }
    v21 = v9;
    if (v18 == a3)
    {
LABEL_26:
      a1[1] = v21;
      return;
    }
    v21 = v9;
    v22 = (uint64_t)v9;
    while (v22)
    {
      v18 = (uint64_t *)((char *)v18 + 12);
      v22 = webrtc::RtcpFeedback::RtcpFeedback() + 12;
      v21 += 3;
      if (v18 == a3)
        goto LABEL_26;
    }
    __break(1u);
    goto LABEL_37;
  }
  if (a2 == a3)
  {
    v23 = v9;
  }
  else
  {
    v23 = v9;
    do
    {
      v24 = *v6;
      v9[2] = *((_DWORD *)v6 + 2);
      *(_QWORD *)v9 = v24;
      v9 += 3;
      v6 = (uint64_t *)((char *)v6 + 12);
      v23 += 3;
    }
    while (v6 != a3);
    v17 = (_DWORD *)a1[1];
  }
  while (v17 != v23)
    webrtc::RtcpFeedback::~RtcpFeedback((webrtc::RtcpFeedback *)(v17 - 3));
  a1[1] = v23;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>(uint64_t *a1, const std::string::value_type **a2, const std::string::value_type **a3)
{
  const std::string::value_type **v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  const std::string::value_type *v11;
  _QWORD *v12;
  uint64_t *leaf_high;
  uint64_t *v14;
  uint64_t v15;
  std::string::value_type *v16;
  BOOL v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *i;
  const std::string::value_type *v21;
  const std::string::value_type **v22;
  _QWORD *v23;
  uint64_t *v24[2];

  v4 = a2;
  if (a1[2])
  {
    v6 = *a1;
    v7 = a1[1];
    *a1 = (uint64_t)(a1 + 1);
    *(_QWORD *)(v7 + 16) = 0;
    a1[2] = 0;
    a1[1] = 0;
    v8 = *(_QWORD *)(v6 + 8) ? *(_QWORD **)(v6 + 8) : (_QWORD *)v6;
    if (v8)
    {
      v9 = (_QWORD *)v8[2];
      if (v9)
      {
        v10 = (_QWORD *)*v9;
        if ((_QWORD *)*v9 == v8)
        {
          *v9 = 0;
          while (1)
          {
            v23 = (_QWORD *)v9[1];
            if (!v23)
              break;
            do
            {
              v9 = v23;
              v23 = (_QWORD *)*v23;
            }
            while (v23);
          }
        }
        else
        {
          for (v9[1] = 0; v10; v10 = (_QWORD *)v9[1])
          {
            do
            {
              v9 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
        }
      }
      if (a2 != a3)
      {
        v11 = (const std::string::value_type *)a2;
        do
        {
          v12 = v8;
          v8 = v9;
          v24[0] = v12 + 4;
          v24[1] = v12 + 7;
          std::pair<std::string &,std::string &>::operator=[abi:sn180100]<std::string const,std::string,(void *)0>((uint64_t *)v24, v11 + 32);
          leaf_high = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high(a1, v24, (const void **)v12 + 4);
          v14 = v24[0];
          *v12 = 0;
          v12[1] = 0;
          v12[2] = v14;
          *leaf_high = (uint64_t)v12;
          v15 = *(_QWORD *)*a1;
          if (v15)
          {
            *a1 = v15;
            v12 = (_QWORD *)*leaf_high;
          }
          std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t)v12);
          ++a1[2];
          if (v9)
          {
            v9 = (_QWORD *)v9[2];
            if (v9)
            {
              v18 = (_QWORD *)*v9;
              if ((_QWORD *)*v9 == v8)
              {
                *v9 = 0;
                while (1)
                {
                  v19 = (_QWORD *)v9[1];
                  if (!v19)
                    break;
                  do
                  {
                    v9 = v19;
                    v19 = (_QWORD *)*v19;
                  }
                  while (v19);
                }
              }
              else
              {
                for (v9[1] = 0; v18; v18 = (_QWORD *)v9[1])
                {
                  do
                  {
                    v9 = v18;
                    v18 = (_QWORD *)*v18;
                  }
                  while (v18);
                }
              }
            }
          }
          else
          {
            v9 = 0;
          }
          v16 = (std::string::value_type *)*((_QWORD *)v11 + 1);
          if (v16)
          {
            do
            {
              v4 = (const std::string::value_type **)v16;
              v16 = *(std::string::value_type **)v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v4 = (const std::string::value_type **)*((_QWORD *)v11 + 2);
              v17 = *v4 == v11;
              v11 = (const std::string::value_type *)v4;
            }
            while (!v17);
          }
          if (!v8)
            break;
          v11 = (const std::string::value_type *)v4;
        }
        while (v4 != a3);
      }
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)a1, (char *)v8);
      if (v9)
      {
        for (i = (_QWORD *)v9[2]; i; i = (_QWORD *)i[2])
          v9 = i;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)a1, (char *)v9);
      }
    }
  }
  if (v4 != a3)
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(a1, (uint64_t)(v4 + 4));
      v21 = v4[1];
      if (v21)
      {
        do
        {
          v22 = (const std::string::value_type **)v21;
          v21 = *(const std::string::value_type **)v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (const std::string::value_type **)v4[2];
          v17 = *v22 == (const std::string::value_type *)v4;
          v4 = v22;
        }
        while (!v17);
      }
      v4 = v22;
    }
    while (v22 != a3);
  }
}

uint64_t *std::pair<std::string &,std::string &>::operator=[abi:sn180100]<std::string const,std::string,(void *)0>(uint64_t *a1, const std::string::value_type *a2)
{
  const std::string::value_type *v2;
  uint64_t v4;
  __int128 v5;
  size_t v6;
  uint64_t v7;
  std::string::value_type v8;
  __int128 v9;
  const std::string::value_type *v10;
  size_t v11;

  v2 = a2;
  v4 = *a1;
  if ((const std::string::value_type *)v4 != a2)
  {
    if (*(char *)(v4 + 23) < 0)
    {
      if (a2[23] >= 0)
      {
        v6 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = *(const std::string::value_type **)a2;
        v6 = *((_QWORD *)v2 + 1);
      }
      std::string::__assign_no_alias<false>((std::string *)v4, a2, v6);
    }
    else if (a2[23] < 0)
    {
      std::string::__assign_no_alias<true>((_QWORD *)v4, *(char **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v5 = *(_OWORD *)a2;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v4 = v5;
    }
  }
  v7 = a1[1];
  if ((const std::string::value_type *)v7 != v2 + 24)
  {
    v8 = v2[47];
    if (*(char *)(v7 + 23) < 0)
    {
      if (v8 >= 0)
        v10 = v2 + 24;
      else
        v10 = (const std::string::value_type *)*((_QWORD *)v2 + 3);
      if (v8 >= 0)
        v11 = *((unsigned __int8 *)v2 + 47);
      else
        v11 = *((_QWORD *)v2 + 4);
      std::string::__assign_no_alias<false>((std::string *)v7, v10, v11);
    }
    else if (v2[47] < 0)
    {
      std::string::__assign_no_alias<true>((_QWORD *)v7, *((char **)v2 + 3), *((_QWORD *)v2 + 4));
    }
    else
    {
      v9 = *(_OWORD *)(v2 + 24);
      *(_QWORD *)(v7 + 16) = *((_QWORD *)v2 + 5);
      *(_OWORD *)v7 = v9;
    }
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high(uint64_t *result, uint64_t **a2, const void **__s1)
{
  uint64_t v4;
  uint64_t *v5;
  const void *v7;
  unint64_t v8;
  BOOL v9;
  int v10;
  unint64_t v11;
  _QWORD *v12;
  int v13;
  unint64_t v14;
  size_t v16;
  _QWORD *v17;
  int v18;
  unint64_t v19;
  size_t v21;

  v5 = result + 1;
  v4 = result[1];
  if (!v4)
  {
    ++result;
    goto LABEL_48;
  }
  v7 = *__s1;
  v8 = (unint64_t)__s1[1];
  if (v8)
    v9 = v7 == 0;
  else
    v9 = 0;
  v10 = !v9;
  if ((*((char *)__s1 + 23) & 0x80000000) == 0)
  {
    v11 = *((unsigned __int8 *)__s1 + 23);
    while (1)
    {
      while (1)
      {
        v5 = (uint64_t *)v4;
        v12 = (_QWORD *)(v4 + 32);
        v13 = *(char *)(v4 + 55);
        if (v13 < 0)
        {
          v14 = v5[5];
          if ((v14 & 0x8000000000000000) != 0)
            goto LABEL_49;
          v12 = (_QWORD *)*v12;
          if (v14 && v12 == 0)
            goto LABEL_49;
        }
        else
        {
          v14 = v13;
        }
        v16 = v14 >= v11 ? v11 : v14;
        result = (uint64_t *)memcmp(__s1, v12, v16);
        if ((_DWORD)result)
          break;
        if (v14 <= v11)
          goto LABEL_22;
LABEL_25:
        v4 = *v5;
        result = v5;
        if (!*v5)
          goto LABEL_48;
      }
      if ((result & 0x80000000) != 0)
        goto LABEL_25;
LABEL_22:
      v4 = v5[1];
      if (!v4)
        goto LABEL_47;
    }
  }
  if ((v8 & 0x8000000000000000) != 0 || !v10)
  {
LABEL_49:
    __break(1u);
    return result;
  }
  do
  {
    while (1)
    {
      v5 = (uint64_t *)v4;
      v17 = (_QWORD *)(v4 + 32);
      v18 = *(char *)(v4 + 55);
      if (v18 < 0)
      {
        v19 = v5[5];
        if ((v19 & 0x8000000000000000) != 0)
          goto LABEL_49;
        v17 = (_QWORD *)*v17;
        if (v19 && v17 == 0)
          goto LABEL_49;
      }
      else
      {
        v19 = v18;
      }
      v21 = v19 >= v8 ? v8 : v19;
      result = (uint64_t *)memcmp(v7, v17, v21);
      if (!(_DWORD)result)
        break;
      if ((result & 0x80000000) == 0)
        goto LABEL_42;
LABEL_45:
      v4 = *v5;
      result = v5;
      if (!*v5)
        goto LABEL_48;
    }
    if (v8 < v19)
      goto LABEL_45;
LABEL_42:
    v4 = v5[1];
  }
  while (v4);
LABEL_47:
  result = v5 + 1;
LABEL_48:
  *a2 = v5;
  return result;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[79] < 0)
      operator delete(*((void **)a2 + 7));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

_QWORD *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_multi<std::pair<std::string const,std::string> const&>(uint64_t *a1, uint64_t a2)
{
  char *v4;
  _QWORD *v5;
  const void **v6;
  std::string *v7;
  uint64_t *leaf_high;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;

  v4 = (char *)operator new(0x50uLL);
  v5 = v4;
  v6 = (const void **)(v4 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v4 + 32), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v6 = *(_OWORD *)a2;
    *((_QWORD *)v4 + 6) = *(_QWORD *)(a2 + 16);
  }
  v7 = (std::string *)(v5 + 7);
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 24);
    v5[9] = *(_QWORD *)(a2 + 40);
  }
  leaf_high = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high(a1, &v13, v6);
  v9 = v13;
  *v5 = 0;
  v5[1] = 0;
  v5[2] = v9;
  *leaf_high = (uint64_t)v5;
  v10 = *(_QWORD *)*a1;
  v11 = (uint64_t)v5;
  if (v10)
  {
    *a1 = v10;
    v11 = *leaf_high;
  }
  std::__tree_balance_after_insert[abi:sn180100]<std::__tree_node_base<void *> *>(a1[1], v11);
  ++a1[2];
  return v5;
}

uint64_t std::__unwrap_and_dispatch[abi:sn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,webrtc::RtpEncodingParameters *,webrtc::RtpEncodingParameters *,webrtc::RtpEncodingParameters *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  std::string *v13;
  char **v14;
  char v15;
  __int128 v16;
  __int128 v17;
  const std::string::value_type *v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::string *v23;
  char **v24;
  char v25;
  __int128 v26;
  const std::string::value_type *v27;
  size_t v28;
  std::string *v29;
  char **v30;
  char v31;
  __int128 v32;
  const std::string::value_type *v33;
  size_t v34;
  uint64_t v35;
  __int128 v36;

  if (a1 != a2)
  {
    v6 = 0;
    v7 = a1 + 248;
    do
    {
      v8 = a1 + v6;
      v9 = a3 + v6;
      *(_OWORD *)v9 = *(_OWORD *)(a1 + v6);
      v10 = *(_OWORD *)(a1 + v6 + 16);
      v11 = *(_OWORD *)(a1 + v6 + 32);
      v12 = *(_OWORD *)(a1 + v6 + 48);
      *(_OWORD *)(v9 + 57) = *(_OWORD *)(a1 + v6 + 57);
      *(_OWORD *)(v9 + 32) = v11;
      *(_OWORD *)(v9 + 48) = v12;
      *(_OWORD *)(v9 + 16) = v10;
      v13 = (std::string *)(a3 + v6 + 80);
      v14 = (char **)(a1 + v6 + 80);
      if (*(unsigned __int8 *)(a3 + v6 + 104) == *(unsigned __int8 *)(a1 + v6 + 104))
      {
        if (v8 != v9 && *(_BYTE *)(a3 + v6 + 104))
        {
          v15 = *(_BYTE *)(a1 + v6 + 103);
          if (*(char *)(a3 + v6 + 103) < 0)
          {
            if (v15 >= 0)
              v18 = (const std::string::value_type *)(a1 + v6 + 80);
            else
              v18 = *v14;
            if (v15 >= 0)
              v19 = *(unsigned __int8 *)(a1 + v6 + 103);
            else
              v19 = *(_QWORD *)(a1 + v6 + 88);
            std::string::__assign_no_alias<false>(v13, v18, v19);
          }
          else if ((*(_BYTE *)(a1 + v6 + 103) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>(v13, *v14, *(_QWORD *)(a1 + v6 + 88));
          }
          else
          {
            v16 = *(_OWORD *)v14;
            *(_QWORD *)(a3 + v6 + 96) = *(_QWORD *)(a1 + v6 + 96);
            *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v16;
          }
        }
      }
      else if (*(_BYTE *)(a3 + v6 + 104))
      {
        if (*(char *)(a3 + v6 + 103) < 0)
          operator delete(v13->__r_.__value_.__l.__data_);
        *(_BYTE *)(v9 + 104) = 0;
      }
      else
      {
        if (*(char *)(a1 + v6 + 103) < 0)
        {
          std::string::__init_copy_ctor_external(v13, *v14, *(_QWORD *)(a1 + v6 + 88));
        }
        else
        {
          v17 = *(_OWORD *)v14;
          *(_QWORD *)(a3 + v6 + 96) = *(_QWORD *)(a1 + v6 + 96);
          *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v17;
        }
        *(_BYTE *)(v9 + 104) = 1;
      }
      v20 = a3 + v6;
      v21 = a1 + v6;
      v22 = *(_QWORD *)(a1 + v6 + 112);
      *(_QWORD *)(v20 + 117) = *(_QWORD *)(a1 + v6 + 117);
      *(_QWORD *)(v20 + 112) = v22;
      if (v8 != v9)
      {
        v23 = (std::string *)(v20 + 128);
        v24 = (char **)(v21 + 128);
        v25 = *(_BYTE *)(v21 + 151);
        if (*(char *)(v20 + 151) < 0)
        {
          if (v25 >= 0)
            v27 = (const std::string::value_type *)(v21 + 128);
          else
            v27 = *v24;
          if (v25 >= 0)
            v28 = *(unsigned __int8 *)(v21 + 151);
          else
            v28 = *(_QWORD *)(a1 + v6 + 136);
          std::string::__assign_no_alias<false>(v23, v27, v28);
        }
        else if ((*(_BYTE *)(v21 + 151) & 0x80) != 0)
        {
          std::string::__assign_no_alias<true>(v23, *v24, *(_QWORD *)(a1 + v6 + 136));
        }
        else
        {
          v26 = *(_OWORD *)v24;
          *(_QWORD *)(v20 + 144) = *(_QWORD *)(v21 + 144);
          *(_OWORD *)&v23->__r_.__value_.__l.__data_ = v26;
        }
      }
      *(_WORD *)(v20 + 152) = *(_WORD *)(v21 + 152);
      if (*(unsigned __int8 *)(v20 + 264) == *(unsigned __int8 *)(v21 + 264))
      {
        if (*(_BYTE *)(v20 + 264) && v8 != v9)
        {
          v29 = (std::string *)(a3 + v6 + 168);
          v30 = (char **)(a1 + v6 + 168);
          v31 = *(_BYTE *)(a1 + v6 + 191);
          if (*(char *)(a3 + v6 + 191) < 0)
          {
            if (v31 >= 0)
              v33 = (const std::string::value_type *)(a1 + v6 + 168);
            else
              v33 = *v30;
            if (v31 >= 0)
              v34 = *(unsigned __int8 *)(a1 + v6 + 191);
            else
              v34 = *(_QWORD *)(a1 + v6 + 176);
            std::string::__assign_no_alias<false>(v29, v33, v34);
          }
          else if ((*(_BYTE *)(a1 + v6 + 191) & 0x80) != 0)
          {
            std::string::__assign_no_alias<true>(v29, *v30, *(_QWORD *)(a1 + v6 + 176));
          }
          else
          {
            v32 = *(_OWORD *)v30;
            *(_QWORD *)(a3 + v6 + 184) = *(_QWORD *)(a1 + v6 + 184);
            *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v32;
          }
          v35 = a3 + v6;
          v36 = *(_OWORD *)(a1 + v6 + 192);
          *(_BYTE *)(v35 + 208) = *(_BYTE *)(a1 + v6 + 208);
          *(_OWORD *)(v35 + 192) = v36;
          std::vector<webrtc::RtcpFeedback>::__assign_with_size[abi:sn180100]<webrtc::RtcpFeedback*,webrtc::RtcpFeedback*>((_QWORD *)(a3 + v6 + 216), *(uint64_t **)(a1 + v6 + 216), *(uint64_t **)(a1 + v6 + 224), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + v6 + 224) - *(_QWORD *)(a1 + v6 + 216)) >> 2));
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>((uint64_t *)(a3 + v6 + 240), *(const std::string::value_type ***)(a1 + v6 + 240), (const std::string::value_type **)(v7 + v6));
        }
      }
      else if (*(_BYTE *)(v20 + 264))
      {
        webrtc::RtpCodec::~RtpCodec((webrtc::RtpCodec *)(v20 + 160));
        *(_BYTE *)(v20 + 264) = 0;
      }
      else
      {
        webrtc::RtpCodec::RtpCodec();
        *(_BYTE *)(v20 + 264) = 1;
      }
      v6 += 272;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF3RefIN7WebCore27RealtimeOutgoingAudioSourceENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_27RealtimeOutgoingVideoSourceENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = *(_QWORD *)result;
  v3 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v3 != -1)
  {
    if (!(_DWORD)v3)
    {
      *a2 = 0;
      return result;
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E3363330[v3])(&v4, v2);
  }
  *(_QWORD *)v2 = 0;
  *(_DWORD *)(v2 + 8) = 0;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF3RefIN7WebCore27RealtimeOutgoingAudioSourceENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_27RealtimeOutgoingVideoSourceENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_10;
  if ((_DWORD)v5 != 1)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E3363330[v5])(&v14, v4);
LABEL_10:
    v12 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v12;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 16);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v11 = off_1E3363888;
      v11[1] = v8;
      v13 = v11;
      WTF::ensureOnMainThread();
      result = (uint64_t)v13;
      if (v13)
        return (*(uint64_t (**)(_QWORD *))(*v13 + 8))(v13);
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJDnN3WTF3RefIN7WebCore27RealtimeOutgoingAudioSourceENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_27RealtimeOutgoingVideoSourceENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJDnSG_SK_EEEOSZ_EEEDcSR_DpT0_(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_10;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E3363330[v5])(&v14, v4);
LABEL_10:
    v12 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v12;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 24);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v11 = off_1E33638B0;
      v11[1] = v8;
      v13 = v11;
      WTF::ensureOnMainThread();
      result = (uint64_t)v13;
      if (v13)
        return (*(uint64_t (**)(_QWORD *))(*v13 + 8))(v13);
    }
  }
  return result;
}

unint64_t *absl::inlined_vector_internal::Storage<webrtc::ScalabilityMode,34ul,std::allocator<webrtc::ScalabilityMode>>::InitFrom(unint64_t *result, unint64_t *a2)
{
  unint64_t v2;
  unint64_t *v4;
  size_t v5;
  void *v6;
  const void *v7;
  size_t v8;

  v2 = *a2;
  if (*a2 <= 1)
  {
    __break(1u);
  }
  else
  {
    v4 = result;
    v5 = v2 >> 1;
    if ((v2 & 1) != 0)
    {
      if (v5 <= 0x44)
        v8 = 68;
      else
        v8 = v2 >> 1;
      v6 = operator new(v8);
      v4[1] = (unint64_t)v6;
      v4[2] = v8;
      v7 = (const void *)a2[1];
    }
    else
    {
      v6 = result + 1;
      v7 = a2 + 1;
    }
    result = (unint64_t *)memcpy(v6, v7, v5);
    *v4 = *a2;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6webrtc18RtpCodecCapabilityEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(int a1, webrtc::RtpCodecCapability *this)
{
  webrtc::RtpCodecCapability::~RtpCodecCapability(this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN6webrtc18RtpCodecCapabilityEN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::LibWebRTCMediaEndpoint,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) - 8) + 8))(*(_QWORD *)(a1 + 8) - 8);
}

uint64_t WebCore::CreateSessionDescriptionObserver<WebCore::LibWebRTCMediaEndpoint>::AddRef(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 176))(*(_QWORD *)(a1 + 8));
}

uint64_t WebCore::CreateSessionDescriptionObserver<WebCore::LibWebRTCMediaEndpoint>::Release(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
}

void WebCore::CreateSessionDescriptionObserver<WebCore::LibWebRTCMediaEndpoint>::~CreateSessionDescriptionObserver()
{
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::CreateSessionDescriptionObserver<WebCore::LibWebRTCMediaEndpoint>::OnSuccess(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  WTF::StringImpl *v8;
  _QWORD *v9;
  void *__p[2];
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 8);
  __p[0] = 0;
  __p[1] = 0;
  v11 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a2 + 104))(a2, __p);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  WTF::String::fromUTF8();
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v6 = &off_1E33636D8;
  v6[1] = v3;
  v6[2] = v8;
  v9 = v6;
  WTF::callOnMainThread();
  if (v9)
    (*(void (**)(_QWORD *))(*v9 + 8))(v9);
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
}

WTF::StringImpl *WebCore::CreateSessionDescriptionObserver<WebCore::LibWebRTCMediaEndpoint>::OnFailure(uint64_t a1, webrtc::RTCError *this)
{
  uint64_t v2;
  char v3;
  const char *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::StringImpl *result;
  WTF::StringImpl *v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 8);
  if ((*(_DWORD *)this - 3) >= 6)
    v3 = 30;
  else
    v3 = 0xF0A0809200CuLL >> (8 * (*(_BYTE *)this - 3));
  v4 = (const char *)webrtc::RTCError::message(this);
  v5 = (unsigned int *)(v2 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 + 1, v5));
  WTF::String::String((WTF::String *)&v12, v4);
  v7 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v7 = &off_1E3363700;
  *(_QWORD *)(v7 + 8) = v2;
  *(_BYTE *)(v7 + 16) = v3;
  v8 = v12;
  v12 = 0;
  v13 = v7;
  *(_QWORD *)(v7 + 24) = v8;
  WTF::callOnMainThread();
  v10 = v13;
  v13 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  result = v12;
  v12 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::SetLocalSessionDescriptionObserver<WebCore::LibWebRTCMediaEndpoint>::AddRef(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 176))(*(_QWORD *)(a1 + 8));
}

uint64_t WebCore::SetLocalSessionDescriptionObserver<WebCore::LibWebRTCMediaEndpoint>::Release(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
}

void WebCore::SetLocalSessionDescriptionObserver<WebCore::LibWebRTCMediaEndpoint>::~SetLocalSessionDescriptionObserver()
{
  JUMPOUT(0x19AEA7644);
}

WTF::StringImpl *WebCore::SetLocalSessionDescriptionObserver<WebCore::LibWebRTCMediaEndpoint>::OnSetLocalDescriptionComplete(WTF::StringImpl *result, webrtc::RTCError *this)
{
  uint64_t v2;
  char v3;
  unsigned int *v4;
  unsigned int v5;
  char v6;
  const char *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  void (***v20)(_QWORD);
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[2];
  WTF::StringImpl *v43;
  int v44;
  char v45;
  int v46;
  char v47;
  int v48;
  char v49;
  int v50;
  char v51;
  char v52;
  __int128 v53;
  _BYTE v54[13];
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  void (***v65)(_QWORD);
  _BYTE v66[21];
  uint64_t v67;
  __int128 v68;
  _BYTE v69[24];
  uint64_t v70;
  __int128 v71;
  uint64_t v72;

  v2 = *((_QWORD *)result + 1);
  v3 = 12;
  switch(*(_DWORD *)this)
  {
    case 0:
      if (*(_QWORD *)(v2 + 48))
      {
        v4 = (unsigned int *)(v2 + 8);
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 + 1, v4));
        *(_QWORD *)&v53 = v2;
        *((_QWORD *)&v53 + 1) = v2;
        WebCore::descriptionsFromPeerConnection((uint64_t)&v43, *(_QWORD *)(v2 + 48), 1);
        v6 = v52;
        if (v52)
        {
          LODWORD(v68) = (_DWORD)v43;
          BYTE4(v68) = BYTE4(v43);
          DWORD2(v68) = v44;
          BYTE12(v68) = v45;
          WTF::String::isolatedCopy();
          *(_DWORD *)&v69[8] = v46;
          v69[12] = v47;
          WTF::String::isolatedCopy();
          LODWORD(v70) = v48;
          BYTE4(v70) = v49;
          WTF::String::isolatedCopy();
          DWORD2(v71) = v50;
          BYTE12(v71) = v51;
          WTF::String::isolatedCopy();
          *(_QWORD *)v54 = v68;
          *(_QWORD *)&v54[5] = *(_QWORD *)((char *)&v68 + 5);
          v56 = *(_OWORD *)&v69[8];
          v55 = *(_QWORD *)v69;
          v57 = v70;
          v59 = v72;
          v6 = 1;
          v58 = v71;
        }
        else
        {
          v54[0] = 0;
        }
        v60 = v6;
        WebCore::transceiverStatesFromPeerConnection(v42, *(_QWORD *)(v2 + 48));
        WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::LibWebRTCMediaEndpointTransceiverState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((uint64_t)&v61, (unint64_t *)v42);
        (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v2 + 48) + 416))(&v41);
        v18 = v41;
        v41 = 0;
        v63 = v18;
        v64 = 0;
        v65 = 0;
        v66[0] = 0;
        v66[8] = 0;
        v66[16] = 0;
        v66[20] = 0;
        if (v18)
        {
          (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v18 + 40))(&v68, v18);
          v19 = v68;
          v64 = v68;
          v20 = (void (***)(_QWORD))*((_QWORD *)&v68 + 1);
          if (*((_QWORD *)&v68 + 1))
            (***((void (****)(_QWORD))&v68 + 1))(*((_QWORD *)&v68 + 1));
          v65 = v20;
          *(_OWORD *)v66 = *(_OWORD *)v69;
          *(_QWORD *)&v66[13] = *(_QWORD *)&v69[13];
          webrtc::SctpTransportInformation::~SctpTransportInformation((webrtc::SctpTransportInformation *)&v68);
        }
        else
        {
          v20 = 0;
          v19 = 0;
        }
        v21 = WTF::fastMalloc((WTF *)0xA8);
        v22 = v21;
        *(_QWORD *)v21 = off_1E3363728;
        v23 = v53;
        *(_QWORD *)&v53 = 0;
        *(_OWORD *)(v21 + 8) = v23;
        *(_BYTE *)(v21 + 24) = 0;
        *(_BYTE *)(v21 + 96) = 0;
        if (v60)
        {
          v24 = *(_QWORD *)&v54[5];
          *(_QWORD *)(v21 + 24) = *(_QWORD *)v54;
          *(_QWORD *)(v21 + 29) = v24;
          *(_QWORD *)(v21 + 40) = v55;
          *(_QWORD *)(v21 + 48) = v56;
          v25 = *((_QWORD *)&v56 + 1);
          v55 = 0;
          *((_QWORD *)&v56 + 1) = 0;
          *(_QWORD *)(v21 + 56) = v25;
          *(_QWORD *)(v21 + 64) = v57;
          *(_OWORD *)(v21 + 72) = v58;
          v26 = v59;
          *(_QWORD *)&v58 = 0;
          v59 = 0;
          *(_QWORD *)(v21 + 88) = v26;
          *(_BYTE *)(v21 + 96) = 1;
        }
        *(_QWORD *)(v21 + 104) = v61;
        v27 = v62;
        v61 = 0;
        v62 = 0;
        *(_QWORD *)(v21 + 112) = v27;
        v63 = 0;
        *(_QWORD *)(v21 + 120) = v18;
        *(_DWORD *)(v21 + 128) = v19;
        *(_QWORD *)(v21 + 136) = v20;
        if (v20)
          (**v20)(v20);
        v28 = *(_OWORD *)v66;
        *(_QWORD *)(v22 + 157) = *(_QWORD *)&v66[13];
        *(_OWORD *)(v22 + 144) = v28;
        v67 = v22;
        WTF::callOnMainThread();
        v29 = v67;
        v67 = 0;
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
        webrtc::SctpTransportInformation::~SctpTransportInformation((webrtc::SctpTransportInformation *)&v64);
        if (v63)
          (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
        WTF::Vector<WebCore::LibWebRTCMediaEndpointTransceiverState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, v30);
        std::__optional_destruct_base<WebCore::PeerConnectionBackend::DescriptionStates,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v54, v31);
        v33 = v53;
        *(_QWORD *)&v53 = 0;
        if (v33)
        {
          v34 = (unsigned int *)(v33 + 8);
          do
          {
            v35 = __ldaxr(v34);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, v34));
          if (!v36)
          {
            atomic_store(1u, v34);
            v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v39 = off_1E3363400;
            v39[1] = v34;
            *(_QWORD *)&v68 = v39;
            WTF::ensureOnMainThread();
            v40 = v68;
            *(_QWORD *)&v68 = 0;
            if (v40)
              (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
          }
        }
        if (v41)
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
        WTF::Vector<WebCore::LibWebRTCMediaEndpointTransceiverState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v42, v32);
        return (WTF::StringImpl *)std::__optional_destruct_base<WebCore::PeerConnectionBackend::DescriptionStates,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v43, v37);
      }
      return result;
    case 3:
      goto LABEL_13;
    case 4:
      v3 = 32;
      goto LABEL_13;
    case 5:
      v3 = 9;
      goto LABEL_13;
    case 6:
      v3 = 8;
      goto LABEL_13;
    case 7:
      v3 = 10;
      goto LABEL_13;
    case 8:
      v3 = 15;
      goto LABEL_13;
    default:
      v3 = 30;
LABEL_13:
      v7 = (const char *)webrtc::RTCError::message(this);
      v8 = (unsigned int *)(v2 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      *(_QWORD *)&v53 = v2;
      BYTE8(v53) = v3;
      WTF::String::String((WTF::String *)v54, v7);
      v10 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v10 = &off_1E3363750;
      *(_QWORD *)(v10 + 8) = v53;
      *(_BYTE *)(v10 + 16) = BYTE8(v53);
      v11 = *(_QWORD *)v54;
      *(_QWORD *)&v53 = 0;
      *(_QWORD *)v54 = 0;
      *(_QWORD *)(v10 + 24) = v11;
      *(_QWORD *)&v68 = v10;
      WTF::callOnMainThread();
      v13 = v68;
      *(_QWORD *)&v68 = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      result = *(WTF::StringImpl **)v54;
      *(_QWORD *)v54 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
        else
          *(_DWORD *)result -= 2;
      }
      v14 = v53;
      *(_QWORD *)&v53 = 0;
      if (v14)
      {
        v15 = (unsigned int *)(v14 + 8);
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          atomic_store(1u, v15);
          v38 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v38 = off_1E3363400;
          *((_QWORD *)v38 + 1) = v15;
          v43 = v38;
          WTF::ensureOnMainThread();
          result = v43;
          v43 = 0;
          if (result)
            return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
        }
      }
      return result;
  }
}

uint64_t WebCore::SetRemoteSessionDescriptionObserver<WebCore::LibWebRTCMediaEndpoint>::AddRef(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 176))(*(_QWORD *)(a1 + 8));
}

uint64_t WebCore::SetRemoteSessionDescriptionObserver<WebCore::LibWebRTCMediaEndpoint>::Release(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
}

void WebCore::SetRemoteSessionDescriptionObserver<WebCore::LibWebRTCMediaEndpoint>::~SetRemoteSessionDescriptionObserver()
{
  JUMPOUT(0x19AEA7644);
}

WTF::StringImpl *WebCore::SetRemoteSessionDescriptionObserver<WebCore::LibWebRTCMediaEndpoint>::OnSetRemoteDescriptionComplete(WTF::StringImpl *result, webrtc::RTCError *this)
{
  uint64_t v2;
  char v3;
  unsigned int *v4;
  unsigned int v5;
  char v6;
  const char *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  void (***v20)(_QWORD);
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[2];
  WTF::StringImpl *v43;
  int v44;
  char v45;
  int v46;
  char v47;
  int v48;
  char v49;
  int v50;
  char v51;
  char v52;
  __int128 v53;
  _BYTE v54[13];
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  void (***v65)(_QWORD);
  _BYTE v66[21];
  uint64_t v67;
  __int128 v68;
  _BYTE v69[24];
  uint64_t v70;
  __int128 v71;
  uint64_t v72;

  v2 = *((_QWORD *)result + 1);
  v3 = 12;
  switch(*(_DWORD *)this)
  {
    case 0:
      if (*(_QWORD *)(v2 + 48))
      {
        v4 = (unsigned int *)(v2 + 8);
        do
          v5 = __ldaxr(v4);
        while (__stlxr(v5 + 1, v4));
        *(_QWORD *)&v53 = v2;
        *((_QWORD *)&v53 + 1) = v2;
        WebCore::descriptionsFromPeerConnection((uint64_t)&v43, *(_QWORD *)(v2 + 48), 1);
        v6 = v52;
        if (v52)
        {
          LODWORD(v68) = (_DWORD)v43;
          BYTE4(v68) = BYTE4(v43);
          DWORD2(v68) = v44;
          BYTE12(v68) = v45;
          WTF::String::isolatedCopy();
          *(_DWORD *)&v69[8] = v46;
          v69[12] = v47;
          WTF::String::isolatedCopy();
          LODWORD(v70) = v48;
          BYTE4(v70) = v49;
          WTF::String::isolatedCopy();
          DWORD2(v71) = v50;
          BYTE12(v71) = v51;
          WTF::String::isolatedCopy();
          *(_QWORD *)v54 = v68;
          *(_QWORD *)&v54[5] = *(_QWORD *)((char *)&v68 + 5);
          v56 = *(_OWORD *)&v69[8];
          v55 = *(_QWORD *)v69;
          v57 = v70;
          v59 = v72;
          v6 = 1;
          v58 = v71;
        }
        else
        {
          v54[0] = 0;
        }
        v60 = v6;
        WebCore::transceiverStatesFromPeerConnection(v42, *(_QWORD *)(v2 + 48));
        WTF::CrossThreadCopierBase<false,false,WTF::Vector<WebCore::LibWebRTCMediaEndpointTransceiverState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::copy((uint64_t)&v61, (unint64_t *)v42);
        (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v2 + 48) + 416))(&v41);
        v18 = v41;
        v41 = 0;
        v63 = v18;
        v64 = 0;
        v65 = 0;
        v66[0] = 0;
        v66[8] = 0;
        v66[16] = 0;
        v66[20] = 0;
        if (v18)
        {
          (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v18 + 40))(&v68, v18);
          v19 = v68;
          v64 = v68;
          v20 = (void (***)(_QWORD))*((_QWORD *)&v68 + 1);
          if (*((_QWORD *)&v68 + 1))
            (***((void (****)(_QWORD))&v68 + 1))(*((_QWORD *)&v68 + 1));
          v65 = v20;
          *(_OWORD *)v66 = *(_OWORD *)v69;
          *(_QWORD *)&v66[13] = *(_QWORD *)&v69[13];
          webrtc::SctpTransportInformation::~SctpTransportInformation((webrtc::SctpTransportInformation *)&v68);
        }
        else
        {
          v20 = 0;
          v19 = 0;
        }
        v21 = WTF::fastMalloc((WTF *)0xA8);
        v22 = v21;
        *(_QWORD *)v21 = off_1E3363778;
        v23 = v53;
        *(_QWORD *)&v53 = 0;
        *(_OWORD *)(v21 + 8) = v23;
        *(_BYTE *)(v21 + 24) = 0;
        *(_BYTE *)(v21 + 96) = 0;
        if (v60)
        {
          v24 = *(_QWORD *)&v54[5];
          *(_QWORD *)(v21 + 24) = *(_QWORD *)v54;
          *(_QWORD *)(v21 + 29) = v24;
          *(_QWORD *)(v21 + 40) = v55;
          *(_QWORD *)(v21 + 48) = v56;
          v25 = *((_QWORD *)&v56 + 1);
          v55 = 0;
          *((_QWORD *)&v56 + 1) = 0;
          *(_QWORD *)(v21 + 56) = v25;
          *(_QWORD *)(v21 + 64) = v57;
          *(_OWORD *)(v21 + 72) = v58;
          v26 = v59;
          *(_QWORD *)&v58 = 0;
          v59 = 0;
          *(_QWORD *)(v21 + 88) = v26;
          *(_BYTE *)(v21 + 96) = 1;
        }
        *(_QWORD *)(v21 + 104) = v61;
        v27 = v62;
        v61 = 0;
        v62 = 0;
        *(_QWORD *)(v21 + 112) = v27;
        v63 = 0;
        *(_QWORD *)(v21 + 120) = v18;
        *(_DWORD *)(v21 + 128) = v19;
        *(_QWORD *)(v21 + 136) = v20;
        if (v20)
          (**v20)(v20);
        v28 = *(_OWORD *)v66;
        *(_QWORD *)(v22 + 157) = *(_QWORD *)&v66[13];
        *(_OWORD *)(v22 + 144) = v28;
        v67 = v22;
        WTF::callOnMainThread();
        v29 = v67;
        v67 = 0;
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
        webrtc::SctpTransportInformation::~SctpTransportInformation((webrtc::SctpTransportInformation *)&v64);
        if (v63)
          (*(void (**)(uint64_t))(*(_QWORD *)v63 + 8))(v63);
        WTF::Vector<WebCore::LibWebRTCMediaEndpointTransceiverState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)&v61, v30);
        std::__optional_destruct_base<WebCore::PeerConnectionBackend::DescriptionStates,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v54, v31);
        v33 = v53;
        *(_QWORD *)&v53 = 0;
        if (v33)
        {
          v34 = (unsigned int *)(v33 + 8);
          do
          {
            v35 = __ldaxr(v34);
            v36 = v35 - 1;
          }
          while (__stlxr(v36, v34));
          if (!v36)
          {
            atomic_store(1u, v34);
            v39 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
            *v39 = off_1E3363400;
            v39[1] = v34;
            *(_QWORD *)&v68 = v39;
            WTF::ensureOnMainThread();
            v40 = v68;
            *(_QWORD *)&v68 = 0;
            if (v40)
              (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
          }
        }
        if (v41)
          (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
        WTF::Vector<WebCore::LibWebRTCMediaEndpointTransceiverState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)v42, v32);
        return (WTF::StringImpl *)std::__optional_destruct_base<WebCore::PeerConnectionBackend::DescriptionStates,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v43, v37);
      }
      return result;
    case 3:
      goto LABEL_13;
    case 4:
      v3 = 32;
      goto LABEL_13;
    case 5:
      v3 = 9;
      goto LABEL_13;
    case 6:
      v3 = 8;
      goto LABEL_13;
    case 7:
      v3 = 10;
      goto LABEL_13;
    case 8:
      v3 = 15;
      goto LABEL_13;
    default:
      v3 = 30;
LABEL_13:
      v7 = (const char *)webrtc::RTCError::message(this);
      v8 = (unsigned int *)(v2 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
      *(_QWORD *)&v53 = v2;
      BYTE8(v53) = v3;
      WTF::String::String((WTF::String *)v54, v7);
      v10 = WTF::fastMalloc((WTF *)0x20);
      *(_QWORD *)v10 = &off_1E33637A0;
      *(_QWORD *)(v10 + 8) = v53;
      *(_BYTE *)(v10 + 16) = BYTE8(v53);
      v11 = *(_QWORD *)v54;
      *(_QWORD *)&v53 = 0;
      *(_QWORD *)v54 = 0;
      *(_QWORD *)(v10 + 24) = v11;
      *(_QWORD *)&v68 = v10;
      WTF::callOnMainThread();
      v13 = v68;
      *(_QWORD *)&v68 = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      result = *(WTF::StringImpl **)v54;
      *(_QWORD *)v54 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
        else
          *(_DWORD *)result -= 2;
      }
      v14 = v53;
      *(_QWORD *)&v53 = 0;
      if (v14)
      {
        v15 = (unsigned int *)(v14 + 8);
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          atomic_store(1u, v15);
          v38 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
          *(_QWORD *)v38 = off_1E3363400;
          *((_QWORD *)v38 + 1) = v15;
          v43 = v38;
          WTF::ensureOnMainThread();
          result = v43;
          v43 = 0;
          if (result)
            return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
        }
      }
      return result;
  }
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::LibWebRTCMediaEndpoint::*&)(void),WebCore::LibWebRTCMediaEndpoint*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::RealtimeOutgoingAudioSource,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) - 16) + 24))(*(_QWORD *)(a1 + 8) - 16);
}

uint64_t WTF::Detail::CallableWrapper<WTF::ThreadSafeRefCounted<WebCore::RealtimeOutgoingVideoSource,(WTF::DestructionThread)1>::deref(void)::{lambda(void)#1},void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 8) - 24) + 24))(*(_QWORD *)(a1 + 8) - 24);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::createStatsCollector(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,webrtc::scoped_refptr<WebCore::LibWebRTCMediaEndpoint::createStatsCollector(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::RTCStatsReport const> const&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _DWORD *v6;
  _QWORD *v8;
  _QWORD *v9;

  *a1 = &off_1E3363500;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E3363400;
      v8[1] = v3;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  v6 = (_DWORD *)a1[1];
  a1[1] = 0;
  if (v6)
  {
    if (v6[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 16))(v6);
    else
      --v6[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::createStatsCollector(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,webrtc::scoped_refptr<WebCore::LibWebRTCMediaEndpoint::createStatsCollector(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::RTCStatsReport const> const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _DWORD *v7;
  _QWORD *v9;
  _QWORD *v10;

  *(_QWORD *)this = &off_1E3363500;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E3363400;
      v9[1] = v4;
      v10 = v9;
      WTF::ensureOnMainThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  v7 = (_DWORD *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v7)
  {
    if (v7[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
    else
      --v7[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::createStatsCollector(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0,void,webrtc::scoped_refptr<WebCore::LibWebRTCMediaEndpoint::createStatsCollector(WTF::Ref<WebCore::DeferredPromise,WTF::RawPtrTraits<WebCore::DeferredPromise>,WTF::DefaultRefDerefTraits<WebCore::DeferredPromise>> &&)::$_0::RTCStatsReport const> const&>::call(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  unsigned int v6;
  void *v7;
  WTF *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  objc_class *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v23;
  int v24;
  _BYTE v25[8];

  if (!*(_QWORD *)(*(_QWORD *)(result + 16) + 48))
    return result;
  v2 = *(_QWORD *)(result + 8);
  v3 = *a2;
  if (*a2)
  {
    do
      v4 = __ldxr((unsigned int *)v3);
    while (__stxr(v4 + 1, (unsigned int *)v3));
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v5 = &off_1E3364310;
    v5[1] = v3;
    do
      v6 = __ldxr((unsigned int *)v3);
    while (__stxr(v6 + 1, (unsigned int *)v3));
    result = WTF::fastMalloc((WTF *)0x10);
    v8 = (WTF *)result;
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = v5;
    do
    {
      v9 = __ldaxr((unsigned int *)v3);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v3));
    if (!v10)
    {
      std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v3 + 16, *(char **)(v3 + 24));
      result = MEMORY[0x19AEA7644](v3, 0x1020C4043D65406);
    }
  }
  else
  {
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v11 = &off_1E3364310;
    v11[1] = 0;
    result = WTF::fastMalloc((WTF *)0x10);
    v8 = (WTF *)result;
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = v11;
  }
  v12 = *(_QWORD *)(v2 + 24);
  if (v12 && *(_QWORD *)v12 && (*(_BYTE *)(v12 + 8) & 3) == 0)
  {
    v13 = *(_QWORD *)(v2 + 32);
    if (!v13 || (*(_BYTE *)(v13 + 8) & 3) != 0)
      v14 = 0;
    else
      v14 = *(uint64_t **)v13;
    v15 = v14[7];
    MEMORY[0x19AEA3294](v25, v15);
    v16 = (objc_class *)WebCore::wrap<WebCore::RTCStatsReport>((uint64_t)v14, **(_QWORD **)(v2 + 32), v8);
    v17 = *(_QWORD *)(v15 + 16);
    if (!v17)
    {
      WebCore::DeferredPromise::callFunction(v2, v14, 0, v16);
      v17 = *(_QWORD *)(v15 + 16);
      if (!v17)
        goto LABEL_19;
    }
    v19 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v14);
    if (!(*(unsigned int (**)(_QWORD *))(*v19 + 64))(v19))
    {
LABEL_27:
      WebCore::reportException((JSC::JSGlobalObject *)v14, v17, 0, 0, 0);
LABEL_19:
      result = MEMORY[0x19AEA32A0](v25);
      goto LABEL_20;
    }
    v20 = v19[43];
    if (*(_QWORD *)(v15 + 24) == v17)
    {
LABEL_41:
      *(_BYTE *)(*(_QWORD *)(v20 + 8) + 93442) = 1;
      *(_BYTE *)(v2 + 44) = 1;
      goto LABEL_27;
    }
    if (!v20)
      goto LABEL_27;
    v21 = (unsigned __int8 *)(v20 + 40);
    if (__ldaxr((unsigned __int8 *)(v20 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v21))
    {
      goto LABEL_35;
    }
    MEMORY[0x19AEA534C](v20 + 40);
LABEL_35:
    v23 = *(unsigned __int8 *)(v20 + 41);
    v24 = __ldxr(v21);
    if (v24 == 1)
    {
      if (!__stlxr(0, v21))
      {
LABEL_40:
        if (!v23)
          goto LABEL_27;
        goto LABEL_41;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v20 + 40));
    goto LABEL_40;
  }
LABEL_20:
  if (*(_DWORD *)v8 == 1)
  {
    v18 = *((_QWORD *)v8 + 1);
    *((_QWORD *)v8 + 1) = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    return WTF::fastFree(v8, v7);
  }
  else
  {
    --*(_DWORD *)v8;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::gatherDecoderImplementationName(WTF::Function<void ()(WTF::String &&)> &&)::$_0,void,webrtc::scoped_refptr<WTF::Function<void ()(WTF::String &&)> &&::RTCStatsReport const> const&>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E3363528;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::gatherDecoderImplementationName(WTF::Function<void ()(WTF::String &&)> &&)::$_0,void,webrtc::scoped_refptr<WTF::Function<void ()(WTF::String &&)> &&::RTCStatsReport const> const&>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3363528;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::gatherDecoderImplementationName(WTF::Function<void ()(WTF::String &&)> &&)::$_0,void,webrtc::scoped_refptr<WTF::Function<void ()(WTF::String &&)> &&::RTCStatsReport const> const&>::call(uint64_t a1, webrtc::RTCStatsReport **a2)
{
  webrtc::RTCStatsReport *v3;
  uint64_t v4;
  _BYTE *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  _BYTE v11[16];
  WTF::StringImpl *v12[2];

  v3 = *a2;
  if (!*a2)
  {
LABEL_8:
    v12[0] = 0;
    (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), v12);
    v7 = v12[0];
    v12[0] = 0;
    if (v7)
    {
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    return;
  }
  webrtc::RTCStatsReport::begin(*a2);
  webrtc::RTCStatsReport::end(v3);
  if (!webrtc::RTCStatsReport::ConstIterator::operator!=())
  {
LABEL_7:
    webrtc::RTCStatsReport::ConstIterator::~ConstIterator((webrtc::RTCStatsReport::ConstIterator *)v11);
    webrtc::RTCStatsReport::ConstIterator::~ConstIterator((webrtc::RTCStatsReport::ConstIterator *)v12);
    goto LABEL_8;
  }
  v4 = MEMORY[0x1E0DCDA98];
  while (1)
  {
    v5 = (_BYTE *)webrtc::RTCStatsReport::ConstIterator::operator*();
    if ((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v5 + 24))(v5) == v4)
    {
      if (v5[944])
        break;
    }
    webrtc::RTCStatsReport::ConstIterator::operator++();
    if ((webrtc::RTCStatsReport::ConstIterator::operator!=() & 1) == 0)
      goto LABEL_7;
  }
  WTF::String::fromUTF8();
  (*(void (**)(_QWORD, WTF::StringImpl **))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), &v10);
  v9 = v10;
  v10 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v8);
    else
      *(_DWORD *)v9 -= 2;
  }
  webrtc::RTCStatsReport::ConstIterator::~ConstIterator((webrtc::RTCStatsReport::ConstIterator *)v11);
  webrtc::RTCStatsReport::ConstIterator::~ConstIterator((webrtc::RTCStatsReport::ConstIterator *)v12);
}

WebCore::MediaStream *WTF::HashMapEnsureTranslator<WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::MediaStream,WTF::RawPtrTraits<WebCore::MediaStream>,WTF::DefaultRefDerefTraits<WebCore::MediaStream>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::MediaStream,WTF::RawPtrTraits<WebCore::MediaStream>,WTF::DefaultRefDerefTraits<WebCore::MediaStream>>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::String>>::translate<WTF::KeyValuePair<WTF::String,WTF::RefPtr<WebCore::MediaStream,WTF::RawPtrTraits<WebCore::MediaStream>,WTF::DefaultRefDerefTraits<WebCore::MediaStream>>>,WTF::String const&,WebCore::LibWebRTCMediaEndpoint::mediaStreamFromRTCStreamId(WTF::String const&)::$_0>(WTF::StringImpl **a1, WTF::StringImpl *a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  WebCore::MediaStreamPrivate *v17;
  WTF *v18;
  uint64_t v19;
  WTF *v20;
  WebCore::MediaStreamTrackPrivate *v21;
  WTF *v22;
  void *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  WebCore::MediaStream *result;
  bmalloc::api *v29;
  void *v30;
  WTF *v31;
  void *v32;
  WTF::StringImpl *v33;
  WTF *v34;
  uint64_t v35;
  unsigned int *v36;
  WebCore::MediaStreamPrivate *v37;

  if (a2)
    *(_DWORD *)a2 += 2;
  v5 = *a1;
  *a1 = a2;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 32) + 16) + 40);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (v7)
      v6 = v7 - 96;
    else
      v6 = 0;
  }
  if (*(_BYTE *)(v6 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x1954C4824);
  }
  v8 = v6 - 192;
  v9 = WebCore::Document::logger((WebCore::Document *)(v6 - 192));
  v10 = (unsigned int *)(v9 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v35 = 0;
  v36 = (unsigned int *)v9;
  v34 = 0;
  v12 = *(WTF::StringImpl **)a3;
  if (*(_QWORD *)a3)
    *(_DWORD *)v12 += 2;
  v33 = v12;
  v13 = WTF::fastMalloc((WTF *)0x70);
  v37 = (WebCore::MediaStreamPrivate *)WebCore::MediaStreamPrivate::MediaStreamPrivate(v13, (uint64_t *)&v36, (uint64_t)&v34, (uint64_t *)&v33);
  v14 = bmalloc::api::isoAllocate();
  v15 = WebCore::MediaStream::MediaStream(v14, v8, (uint64_t *)&v37);
  WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v15 + 24));
  v17 = v37;
  v37 = 0;
  if (v17)
  {
    if (*((_DWORD *)v17 + 4) == 1)
    {
      WebCore::MediaStreamPrivate::~MediaStreamPrivate(v17, v16);
      WTF::fastFree(v31, v32);
    }
    else
    {
      --*((_DWORD *)v17 + 4);
    }
  }
  if (v33)
  {
    if (*(_DWORD *)v33 == 2)
      WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v16);
    else
      *(_DWORD *)v33 -= 2;
  }
  v18 = v34;
  if (HIDWORD(v35))
  {
    v19 = 8 * HIDWORD(v35);
    v20 = v34;
    do
    {
      v21 = *(WebCore::MediaStreamTrackPrivate **)v20;
      *(_QWORD *)v20 = 0;
      if (v21)
      {
        if (*((_DWORD *)v21 + 2) == 1)
        {
          WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v21, v16);
          WTF::fastFree(v22, v23);
        }
        else
        {
          --*((_DWORD *)v21 + 2);
        }
      }
      v20 = (WTF *)((char *)v20 + 8);
      v19 -= 8;
    }
    while (v19);
  }
  if (v18)
    WTF::fastFree(v18, v16);
  v24 = v36;
  v36 = 0;
  if (v24)
  {
    v25 = v24 + 2;
    do
    {
      v26 = __ldaxr(v25);
      v27 = v26 - 1;
    }
    while (__stlxr(v27, v25));
    if (!v27)
    {
      atomic_store(1u, v24 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 8))(v24);
    }
  }
  result = a1[1];
  a1[1] = (WTF::StringImpl *)v14;
  if (result)
  {
    if (*((_DWORD *)result + 22) == 1)
    {
      WebCore::MediaStream::~MediaStream(result);
      return (WebCore::MediaStream *)bmalloc::api::isoDeallocate(v29, v30);
    }
    else
    {
      --*((_DWORD *)result + 22);
    }
  }
  return result;
}

BOOL WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::collectTransceivers(void)::$_0,BOOL,WebCore::LibWebRTCRtpTransceiverBackend &>::call(uint64_t a1, uint64_t a2)
{
  return **(_QWORD **)(a1 + 8) == *(_QWORD *)(a2 + 8);
}

void WebCore::LibWebRTCMediaEndpoint::Backends::~Backends(WebCore::LibWebRTCMediaEndpoint::Backends *this, void *a2)
{
  WTF *v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  WebCore::LibWebRTCRtpSenderBackend *v11;
  WTF *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;

  v3 = (WTF *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = *((_QWORD *)v3 + 1);
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    WTF::fastFree(v3, a2);
  }
  v5 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    v6 = *((_QWORD *)v5 + 2);
    *((_QWORD *)v5 + 2) = 0;
    if (v6)
    {
      v7 = (unsigned int *)(v6 + 8);
      do
      {
        v8 = __ldaxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
      {
        atomic_store(1u, v7);
        v14 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v14 = off_1E3361EB0;
        v14[1] = v7;
        v15 = v14;
        WTF::ensureOnMainThread();
        if (v15)
          (*(void (**)(_QWORD *))(*v15 + 8))(v15);
      }
    }
    v10 = *((_QWORD *)v5 + 1);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    WTF::fastFree(v5, a2);
  }
  v11 = *(WebCore::LibWebRTCRtpSenderBackend **)this;
  *(_QWORD *)this = 0;
  if (v11)
  {
    WebCore::LibWebRTCRtpSenderBackend::~LibWebRTCRtpSenderBackend(v11);
    WTF::fastFree(v12, v13);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::OnDataChannel(webrtc::scoped_refptr<webrtc::DataChannelInterface>)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  *a1 = &off_1E3363578;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E3363400;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::OnDataChannel(webrtc::scoped_refptr<webrtc::DataChannelInterface>)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v9;
  _QWORD *v10;

  *(_QWORD *)this = &off_1E3363578;
  v3 = *((_QWORD *)this + 2);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E3363400;
      v9[1] = v5;
      v10 = v9;
      WTF::ensureOnMainThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::OnDataChannel(webrtc::scoped_refptr<webrtc::DataChannelInterface>)::$_0,void>::call(WTF::StringImpl *result)
{
  WTF::StringImpl *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  void *__p;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  if (*(_QWORD *)(*((_QWORD *)result + 1) + 48))
  {
    v1 = result;
    v2 = WTF::fastMalloc((WTF *)0x60);
    *(_QWORD *)v2 = off_1E3362610;
    *(_QWORD *)(v2 + 8) = &unk_1E3362670;
    v3 = *((_QWORD *)v1 + 2);
    *((_QWORD *)v1 + 2) = 0;
    *(_QWORD *)(v2 + 16) = v3;
    *(_WORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 32) = 0;
    *(_QWORD *)(v2 + 56) = 0;
    *(_QWORD *)(v2 + 64) = 0;
    *(_QWORD *)(v2 + 48) = 0;
    *(_QWORD *)(v2 + 80) = 0;
    *(_QWORD *)(v2 + 88) = 0;
    WebCore::LibWebRTCDataChannelHandler::checkState((WebCore::LibWebRTCDataChannelHandler *)v2);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 16) + 32))(*(_QWORD *)(v2 + 16), v2 + 8);
    (*(void (**)(void **__return_ptr))(**(_QWORD **)(v2 + 16) + 48))(&__p);
    WTF::String::fromUTF8();
    if (SHIBYTE(v9) < 0)
      operator delete(__p);
    WebCore::LibWebRTCDataChannelHandler::dataChannelInit((WebCore::LibWebRTCDataChannelHandler *)v2, (uint64_t)&__p);
    v4 = *(_QWORD *)(*((_QWORD *)v1 + 1) + 32);
    v7 = v2;
    WebCore::PeerConnectionBackend::newDataChannel(v4, &v7, (uint64_t *)&v10, (uint64_t *)&__p);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v6 = v9;
    v9 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v5);
      else
        *(_DWORD *)v6 -= 2;
    }
    result = v10;
    v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::OnNegotiationNeededEvent(unsigned int)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  v2 = a1[1];
  *a1 = &off_1E33635A0;
  a1[1] = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E3363400;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::OnNegotiationNeededEvent(unsigned int)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33635A0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E3363400;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t (***WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::OnNegotiationNeededEvent(unsigned int)::$_0,void>::call(uint64_t (***result)()))()
{
  uint64_t (**v1)();

  v1 = result[1];
  if (v1[6])
    return WebCore::RTCPeerConnection::updateNegotiationNeededFlag(*((_QWORD *)v1[4] + 2), *((unsigned int *)result + 4) | 0x100000000);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::OnStandardizedIceConnectionChange(webrtc::PeerConnectionInterface::IceConnectionState)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  v2 = a1[1];
  *a1 = &off_1E33635C8;
  a1[1] = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E3363400;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::OnStandardizedIceConnectionChange(webrtc::PeerConnectionInterface::IceConnectionState)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33635C8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E3363400;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t (***WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::OnStandardizedIceConnectionChange(webrtc::PeerConnectionInterface::IceConnectionState)::$_0,void>::call(uint64_t (***result)()))()
{
  uint64_t (**v1)();

  v1 = result[1];
  if (v1[6])
    return WebCore::RTCPeerConnection::updateIceConnectionState(*((_QWORD *)v1[4] + 2));
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::OnIceGatheringChange(webrtc::PeerConnectionInterface::IceGatheringState)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  v2 = a1[1];
  *a1 = &off_1E33635F0;
  a1[1] = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E3363400;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainThread();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::OnIceGatheringChange(webrtc::PeerConnectionInterface::IceGatheringState)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33635F0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E3363400;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainThread();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::OnIceGatheringChange(webrtc::PeerConnectionInterface::IceGatheringState)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)(v1 + 48))
  {
    v2 = *(_DWORD *)(result + 16);
    if (v2 >= 3)
    {
      result = 514;
      __break(0xC471u);
    }
    else
    {
      return (uint64_t)WebCore::PeerConnectionBackend::iceGatheringStateChanged(*(_QWORD *)(v1 + 32), v2);
    }
  }
  return result;
}

uint64_t WTF::SharedTaskFunctor<void ()(WebCore::ExceptionOr<std::optional<WebCore::PeerConnectionBackend::DescriptionStates>> &&),WTF::Function<WebCore::ExceptionOr<std::optional<WebCore::PeerConnectionBackend::DescriptionStates>> &&>>::~SharedTaskFunctor(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::SharedTaskFunctor<void ()(WebCore::ExceptionOr<std::optional<WebCore::PeerConnectionBackend::DescriptionStates>> &&),WTF::Function<WebCore::ExceptionOr<std::optional<WebCore::PeerConnectionBackend::DescriptionStates>> &&>>::~SharedTaskFunctor(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::SharedTaskFunctor<void ()(WebCore::ExceptionOr<std::optional<WebCore::PeerConnectionBackend::DescriptionStates>> &&),WTF::Function<WebCore::ExceptionOr<std::optional<WebCore::PeerConnectionBackend::DescriptionStates>> &&>>::run(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16));
}

_QWORD *std::__function::__func<WebCore::LibWebRTCMediaEndpoint::addIceCandidate(std::unique_ptr<webrtc::IceCandidateInterface> &&,WTF::Function<void ()(WebCore::ExceptionOr<std::optional<WebCore::PeerConnectionBackend::DescriptionStates>> &&)> &&)::$_0,std::allocator<WTF::Function<void ()(WebCore::ExceptionOr<std::optional<WebCore::PeerConnectionBackend::DescriptionStates>> &&)>>,void ()(webrtc::RTCError)>::~__func(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E3363640;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return a1;
}

void std::__function::__func<WebCore::LibWebRTCMediaEndpoint::addIceCandidate(std::unique_ptr<webrtc::IceCandidateInterface> &&,WTF::Function<void ()(WebCore::ExceptionOr<std::optional<WebCore::PeerConnectionBackend::DescriptionStates>> &&)> &&)::$_0,std::allocator<WTF::Function<void ()(WebCore::ExceptionOr<std::optional<WebCore::PeerConnectionBackend::DescriptionStates>> &&)>>,void ()(webrtc::RTCError)>::~__func(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E3363640;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  JUMPOUT(0x19AEA7644);
}

_QWORD *std::__function::__func<WebCore::LibWebRTCMediaEndpoint::addIceCandidate(std::unique_ptr<webrtc::IceCandidateInterface> &&,WTF::Function<void ()(WebCore::ExceptionOr<std::optional<WebCore::PeerConnectionBackend::DescriptionStates>> &&)> &&)::$_0,std::allocator<WTF::Function<void ()(WebCore::ExceptionOr<std::optional<WebCore::PeerConnectionBackend::DescriptionStates>> &&)>>,void ()(webrtc::RTCError)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  void (***v6)(_QWORD);

  v2 = operator new(0x18uLL);
  *v2 = &off_1E3363640;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = (unsigned int *)(v3 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *(void (****)(_QWORD))(a1 + 16);
  v2[1] = v3;
  v2[2] = v6;
  if (v6)
    (**v6)(v6);
  return v2;
}

uint64_t (***std::__function::__func<WebCore::LibWebRTCMediaEndpoint::addIceCandidate(std::unique_ptr<webrtc::IceCandidateInterface> &&,WTF::Function<void ()(WebCore::ExceptionOr<std::optional<WebCore::PeerConnectionBackend::DescriptionStates>> &&)> &&)::$_0,std::allocator<WTF::Function<void ()(WebCore::ExceptionOr<std::optional<WebCore::PeerConnectionBackend::DescriptionStates>> &&)>>,void ()(webrtc::RTCError)>::__clone(uint64_t a1, _QWORD *a2))(_QWORD)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t (***result)(_QWORD);

  *a2 = &off_1E3363640;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = (unsigned int *)(v2 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 + 1, v3));
  result = *(uint64_t (****)(_QWORD))(a1 + 16);
  a2[1] = v2;
  a2[2] = result;
  if (result)
    return (uint64_t (***)(_QWORD))(**result)(result);
  return result;
}

unsigned int *std::__function::__func<WebCore::LibWebRTCMediaEndpoint::addIceCandidate(std::unique_ptr<webrtc::IceCandidateInterface> &&,WTF::Function<void ()(WebCore::ExceptionOr<std::optional<WebCore::PeerConnectionBackend::DescriptionStates>> &&)> &&)::$_0,std::allocator<WTF::Function<void ()(WebCore::ExceptionOr<std::optional<WebCore::PeerConnectionBackend::DescriptionStates>> &&)>>,void ()(webrtc::RTCError)>::destroy(uint64_t a1)
{
  uint64_t v2;
  unsigned int *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (result)
  {
    v4 = result + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

void std::__function::__func<WebCore::LibWebRTCMediaEndpoint::addIceCandidate(std::unique_ptr<webrtc::IceCandidateInterface> &&,WTF::Function<void ()(WebCore::ExceptionOr<std::optional<WebCore::PeerConnectionBackend::DescriptionStates>> &&)> &&)::$_0,std::allocator<WTF::Function<void ()(WebCore::ExceptionOr<std::optional<WebCore::PeerConnectionBackend::DescriptionStates>> &&)>>,void ()(webrtc::RTCError)>::destroy_deallocate(_QWORD *__p)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = __p[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (unsigned int *)__p[1];
  __p[1] = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  operator delete(__p);
}

uint64_t std::__function::__func<WebCore::LibWebRTCMediaEndpoint::addIceCandidate(std::unique_ptr<webrtc::IceCandidateInterface> &&,WTF::Function<void ()(WebCore::ExceptionOr<std::optional<WebCore::PeerConnectionBackend::DescriptionStates>> &&)> &&)::$_0,std::allocator<WTF::Function<void ()(WebCore::ExceptionOr<std::optional<WebCore::PeerConnectionBackend::DescriptionStates>> &&)>>,void ()(webrtc::RTCError)>::operator()(uint64_t a1, int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int *v7;
  int v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  int v27;
  char v28;
  int v29;
  char v30;
  int v31;
  char v32;
  int v33;
  char v34;
  unsigned __int8 v35;
  unsigned int *v36;
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  char v45;
  int v46;
  __int128 v47;
  uint64_t v48;
  _DWORD v49[2];
  _BYTE v50[13];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;

  v6 = *(_QWORD *)(a1 + 16);
  v24 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  v7 = &v25;
  WebCore::descriptionsFromPeerConnection((uint64_t)&v25, v6, 0);
  v8 = v35;
  if (v35)
  {
    *(_DWORD *)v50 = v25;
    v50[4] = v26;
    *(_DWORD *)&v50[8] = v27;
    v50[12] = v28;
    WTF::String::isolatedCopy();
    LODWORD(v52) = v29;
    BYTE4(v52) = v30;
    WTF::String::isolatedCopy();
    LODWORD(v54) = v31;
    BYTE4(v54) = v32;
    WTF::String::isolatedCopy();
    LODWORD(v56) = v33;
    BYTE4(v56) = v34;
    WTF::String::isolatedCopy();
    v37[0] = *(_QWORD *)v50;
    *(_QWORD *)((char *)v37 + 5) = *(_QWORD *)&v50[5];
    v4 = v54;
    v22 = v53;
    v23 = v51;
    v38 = v51;
    v39 = v52;
    v21 = v52;
    v3 = v55;
    v7 = v56;
    v40 = v53;
    v41 = v54;
    v2 = v57;
    v42 = v55;
    v43 = v56;
    v9 = 1;
    v44 = v57;
  }
  else
  {
    v9 = 0;
    LOBYTE(v37[0]) = 0;
  }
  v45 = v9;
  v10 = *a2;
  v46 = *a2;
  v47 = *(_OWORD *)(a2 + 2);
  v48 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  v49[0] = a2[8];
  *(_DWORD *)((char *)v49 + 3) = *(int *)((char *)a2 + 35);
  v11 = WTF::fastMalloc((WTF *)0x88);
  *(_QWORD *)v11 = off_1E3363688;
  v36 = 0;
  *(_QWORD *)(v11 + 8) = v24;
  *(_BYTE *)(v11 + 16) = 0;
  *(_BYTE *)(v11 + 88) = 0;
  if (v8)
  {
    *(_QWORD *)(v11 + 21) = *(_QWORD *)((char *)v37 + 5);
    *(_QWORD *)(v11 + 16) = v37[0];
    *(_QWORD *)(v11 + 32) = v23;
    *(_QWORD *)(v11 + 40) = v21;
    v38 = 0;
    v40 = 0;
    *(_QWORD *)(v11 + 48) = v22;
    *(_QWORD *)(v11 + 56) = v4;
    *(_QWORD *)(v11 + 64) = v3;
    *(_QWORD *)(v11 + 72) = v7;
    v42 = 0;
    v44 = 0;
    *(_QWORD *)(v11 + 80) = v2;
    *(_BYTE *)(v11 + 88) = 1;
  }
  *(_DWORD *)(v11 + 96) = v10;
  v12 = v48;
  *(_OWORD *)(v11 + 104) = v47;
  *(_QWORD *)(v11 + 120) = v12;
  v48 = 0;
  v47 = 0uLL;
  *(_DWORD *)(v11 + 128) = v49[0];
  *(_DWORD *)(v11 + 131) = *(_DWORD *)((char *)v49 + 3);
  *(_QWORD *)v50 = v11;
  WTF::callOnMainThread();
  v14 = *(_QWORD *)v50;
  *(_QWORD *)v50 = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  std::__optional_destruct_base<WebCore::PeerConnectionBackend::DescriptionStates,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)v37, v13);
  v16 = v36;
  v36 = 0;
  if (v16)
  {
    v17 = v16 + 2;
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v16 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
    }
  }
  return std::__optional_destruct_base<WebCore::PeerConnectionBackend::DescriptionStates,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)&v25, v15);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore22LibWebRTCMediaEndpoint15addIceCandidateEONSt3__110unique_ptrIN6webrtc21IceCandidateInterfaceENS4_14default_deleteIS7_EEEEONS_8FunctionIFvONS2_11ExceptionOrINS4_8optionalINS2_21PeerConnectionBackend17DescriptionStatesEEEEEEEEEN3__0clINS6_8RTCErrorEEEDaOT_EUlvE_vJEED1Ev(uint64_t a1, WTF::StringImpl *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)a1 = off_1E3363688;
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  std::__optional_destruct_base<WebCore::PeerConnectionBackend::DescriptionStates,false>::~__optional_destruct_base[abi:sn180100](a1 + 16, a2);
  v3 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v3 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  return a1;
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore22LibWebRTCMediaEndpoint15addIceCandidateEONSt3__110unique_ptrIN6webrtc21IceCandidateInterfaceENS4_14default_deleteIS7_EEEEONS_8FunctionIFvONS2_11ExceptionOrINS4_8optionalINS2_21PeerConnectionBackend17DescriptionStatesEEEEEEEEEN3__0clINS6_8RTCErrorEEEDaOT_EUlvE_vJEED0Ev(uint64_t a1, WTF::StringImpl *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  *(_QWORD *)a1 = off_1E3363688;
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  std::__optional_destruct_base<WebCore::PeerConnectionBackend::DescriptionStates,false>::~__optional_destruct_base[abi:sn180100](a1 + 16, a2);
  v4 = *(unsigned int **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v4 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
    }
  }
  return WTF::fastFree((WTF *)a1, v3);
}

WTF::StringImpl *_ZN3WTF6Detail15CallableWrapperIZZN7WebCore22LibWebRTCMediaEndpoint15addIceCandidateEONSt3__110unique_ptrIN6webrtc21IceCandidateInterfaceENS4_14default_deleteIS7_EEEEONS_8FunctionIFvONS2_11ExceptionOrINS4_8optionalINS2_21PeerConnectionBackend17DescriptionStatesEEEEEEEEEN3__0clINS6_8RTCErrorEEEDaOT_EUlvE_vJEE4callEv(webrtc::RTCError *this)
{
  int v1;
  uint64_t v2;
  unsigned int v3;
  char v4;
  const char *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *result;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15[8];
  WTF::StringImpl *v16;
  char v17;
  _BYTE v18[8];
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v1 = *((_DWORD *)this + 24);
  v2 = *((_QWORD *)this + 1);
  if (v1)
  {
    v3 = v1 - 3;
    if (v3 >= 6)
      v4 = 30;
    else
      v4 = 0xF0A0809200CuLL >> (8 * v3);
    v5 = (const char *)webrtc::RTCError::message((webrtc::RTCError *)((char *)this + 96));
    WTF::String::String((WTF::String *)&v16, v5);
    v15[0] = v4;
    v6 = v16;
    v16 = 0;
    LOBYTE(v19) = v4;
    *((_QWORD *)&v19 + 1) = v6;
    v27 = 1;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 16))(v2, v18);
    if (v27 != -1)
      ((void (*)(char *, __int128 *))off_1E3363388[v27])(&v17, &v19);
    v27 = -1;
    result = v16;
    v16 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    LOBYTE(v19) = 0;
    v26 = 0;
    if (*((_BYTE *)this + 88))
    {
      *(_QWORD *)&v19 = *((_QWORD *)this + 2);
      *(_QWORD *)((char *)&v19 + 5) = *(_QWORD *)((char *)this + 21);
      v9 = *((_QWORD *)this + 4);
      v10 = *((_QWORD *)this + 5);
      *((_QWORD *)this + 4) = 0;
      v20 = v9;
      v21 = v10;
      v11 = *((_OWORD *)this + 3);
      *((_QWORD *)this + 6) = 0;
      v22 = v11;
      v12 = *((_QWORD *)this + 8);
      v13 = *((_QWORD *)this + 9);
      *((_QWORD *)this + 8) = 0;
      v23 = v12;
      v24 = v13;
      v14 = *((_QWORD *)this + 10);
      *((_QWORD *)this + 10) = 0;
      v25 = v14;
      v26 = 1;
    }
    v27 = 0;
    result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)v2 + 16))(v2, v18);
    if (v27 != -1)
      return (WTF::StringImpl *)((uint64_t (*)(char *, __int128 *))off_1E3363388[v27])(v15, &v19);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::OnIceCandidate(webrtc::IceCandidateInterface const*)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  *a1 = off_1E33636B0;
  WebCore::LibWebRTCMediaEndpoint::OnIceCandidate(webrtc::IceCandidateInterface const*)::$_0::~$_0(a1 + 1, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::OnIceCandidate(webrtc::IceCandidateInterface const*)::$_0,void>::~CallableWrapper(uint64_t *a1, WTF::StringImpl *a2)
{
  void *v3;

  *a1 = (uint64_t)off_1E33636B0;
  WebCore::LibWebRTCMediaEndpoint::OnIceCandidate(webrtc::IceCandidateInterface const*)::$_0::~$_0(a1 + 1, a2);
  return WTF::fastFree((WTF *)a1, v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::OnIceCandidate(webrtc::IceCandidateInterface const*)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 8);
  if (*(_QWORD *)(v1 + 48))
    return WebCore::PeerConnectionBackend::newICECandidate(*(_QWORD **)(v1 + 32), (_QWORD *)(result + 104), (_QWORD *)(result + 96), *(_WORD *)(result + 112), (uint64_t *)(result + 120), result + 16);
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::createSessionDescriptionSucceeded(std::unique_ptr<webrtc::SessionDescriptionInterface> &&)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v9;
  _QWORD *v10;

  *a1 = &off_1E33636D8;
  v3 = (WTF::StringImpl *)a1[2];
  a1[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E3363400;
      v9[1] = v5;
      v10 = v9;
      WTF::ensureOnMainThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::createSessionDescriptionSucceeded(std::unique_ptr<webrtc::SessionDescriptionInterface> &&)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v9;
  _QWORD *v10;

  *(_QWORD *)this = &off_1E33636D8;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E3363400;
      v9[1] = v5;
      v10 = v9;
      WTF::ensureOnMainThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t (***WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::createSessionDescriptionSucceeded(std::unique_ptr<webrtc::SessionDescriptionInterface> &&)::$_0,void>::call(uint64_t (***result)()))()
{
  uint64_t (**v1)();
  uint64_t *v2;
  uint64_t (*v3)();

  v1 = result[1];
  if (v1[6])
  {
    v2 = (uint64_t *)(result + 2);
    v3 = v1[4];
    if (*((_BYTE *)v1 + 136))
      return WebCore::PeerConnectionBackend::createOfferSucceeded(v3, v2);
    else
      return WebCore::PeerConnectionBackend::createAnswerSucceeded(v3, v2);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::createSessionDescriptionFailed(WebCore::ExceptionCode,char const*)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v9;
  _QWORD *v10;

  *a1 = &off_1E3363700;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E3363400;
      v9[1] = v5;
      v10 = v9;
      WTF::ensureOnMainThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::createSessionDescriptionFailed(WebCore::ExceptionCode,char const*)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v9;
  _QWORD *v10;

  *(_QWORD *)this = &off_1E3363700;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E3363400;
      v9[1] = v5;
      v10 = v9;
      WTF::ensureOnMainThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::createSessionDescriptionFailed(WebCore::ExceptionCode,char const*)::$_0,void>::call(WTF::StringImpl *result)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  _QWORD *v3;
  char v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  char v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;

  v1 = *((_QWORD *)result + 1);
  if (*(_QWORD *)(v1 + 48))
  {
    v2 = result;
    v3 = *(_QWORD **)(v1 + 32);
    if (*(_BYTE *)(v1 + 136))
    {
      v4 = *((_BYTE *)v2 + 16);
      v5 = (WTF::StringImpl *)*((_QWORD *)v2 + 3);
      *((_QWORD *)v2 + 3) = 0;
      LOBYTE(v9) = v4;
      v10 = v5;
      WebCore::PeerConnectionBackend::createOfferFailed(v3, &v9);
    }
    else
    {
      v7 = *((_BYTE *)v2 + 16);
      v8 = (WTF::StringImpl *)*((_QWORD *)v2 + 3);
      *((_QWORD *)v2 + 3) = 0;
      LOBYTE(v9) = v7;
      v10 = v8;
      WebCore::PeerConnectionBackend::createAnswerFailed(v3, &v9);
    }
    result = v10;
    v10 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::LibWebRTCMediaEndpointTransceiverState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF *v12;

  v3 = *(unsigned int *)(a1 + 12);
  if ((_DWORD)v3)
  {
    v4 = *(WTF **)a1;
    v5 = *(_QWORD *)a1 + 32 * v3;
    do
    {
      v6 = *((unsigned int *)v4 + 5);
      if ((_DWORD)v6)
      {
        v9 = (WTF::StringImpl **)*((_QWORD *)v4 + 1);
        v10 = 8 * v6;
        do
        {
          v11 = *v9;
          *v9 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, a2);
            else
              *(_DWORD *)v11 -= 2;
          }
          ++v9;
          v10 -= 8;
        }
        while (v10);
      }
      v7 = (WTF *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        *((_QWORD *)v4 + 1) = 0;
        *((_DWORD *)v4 + 4) = 0;
        WTF::fastFree(v7, a2);
      }
      v8 = *(WTF::StringImpl **)v4;
      *(_QWORD *)v4 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      v4 = (WTF *)((char *)v4 + 32);
    }
    while (v4 != (WTF *)v5);
  }
  v12 = *(WTF **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v12, a2);
  }
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::setLocalSessionDescriptionSucceeded(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v10;
  _QWORD *v11;

  *a1 = off_1E3363728;
  webrtc::SctpTransportInformation::~SctpTransportInformation((webrtc::SctpTransportInformation *)(a1 + 16));
  v3 = a1[15];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebCore::LibWebRTCMediaEndpointTransceiverState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 13), v2);
  std::__optional_destruct_base<WebCore::PeerConnectionBackend::DescriptionStates,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 3), v4);
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = off_1E3363400;
      v10[1] = v6;
      v11 = v10;
      WTF::ensureOnMainThread();
      if (v11)
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::setLocalSessionDescriptionSucceeded(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  void *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v11;
  _QWORD *v12;

  *a1 = off_1E3363728;
  webrtc::SctpTransportInformation::~SctpTransportInformation((webrtc::SctpTransportInformation *)(a1 + 16));
  v3 = a1[15];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebCore::LibWebRTCMediaEndpointTransceiverState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 13), v2);
  std::__optional_destruct_base<WebCore::PeerConnectionBackend::DescriptionStates,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 3), v4);
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v11 = off_1E3363400;
      v11[1] = v7;
      v12 = v11;
      WTF::ensureOnMainThread();
      if (v12)
        (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    }
  }
  return WTF::fastFree((WTF *)a1, v5);
}

WTF *WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::setLocalSessionDescriptionSucceeded(void)::$_0,void>::call(WTF *result)
{
  unint64_t v1;
  WTF *v2;
  uint64_t v3;
  WTF **v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  void (***v22)(_QWORD);
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void *v27;
  int v28;
  WTF *v29;
  uint64_t *v30;
  WTF *v31;
  WTF *v32;
  int v33;
  unsigned int v34;
  char v35;

  if (*(_QWORD *)(*((_QWORD *)result + 1) + 48))
  {
    v2 = result;
    v3 = *((unsigned int *)result + 29);
    if ((_DWORD)v3)
    {
      if (v3 >> 27)
      {
LABEL_34:
        __break(0xC471u);
        JUMPOUT(0x1954C61D8);
      }
      v4 = (WTF **)*((_QWORD *)result + 2);
      v5 = (WTF *)WTF::fastMalloc((WTF *)(32 * v3));
      v6 = *((unsigned int *)v2 + 29);
      if ((_DWORD)v6)
      {
        v28 = v3;
        v29 = v2;
        v7 = 0;
        v8 = (uint64_t *)*((_QWORD *)v2 + 13);
        v9 = &v8[4 * v6];
        v30 = v9;
        do
        {
          v10 = *((unsigned int *)v8 + 5);
          if ((_DWORD)v10)
          {
            if (v10 >> 29)
              goto LABEL_34;
            v12 = WTF::fastMalloc((WTF *)(8 * v10));
            v13 = *((unsigned int *)v8 + 5);
            if ((_DWORD)v13)
            {
              v14 = 0;
              v15 = (WTF::StringImpl **)v8[1];
              v16 = 8 * v13;
              do
              {
                v17 = v14;
                v18 = WebCore::LibWebRTCMediaEndpoint::mediaStreamFromRTCStreamId(v4, v15, v11);
                ++*(_DWORD *)(v18 + 88);
                v14 = v17 + 1;
                *(_QWORD *)(v12 + 8 * v17) = v18;
                ++v15;
                v16 -= 8;
              }
              while (v16);
              v9 = v30;
            }
            else
            {
              LODWORD(v14) = 0;
            }
          }
          else
          {
            LODWORD(v14) = 0;
            v12 = 0;
          }
          v19 = *v8;
          *v8 = 0;
          v1 = v1 & 0xFFFFFF0000000000 | *((unsigned int *)v8 + 6) | ((unint64_t)*((unsigned __int8 *)v8 + 28) << 32);
          v20 = (char *)v5 + 32 * v7;
          *((_QWORD *)v20 + 1) = v12;
          *((_QWORD *)v20 + 2) = 0;
          *(_QWORD *)v20 = v19;
          *((_DWORD *)v20 + 4) = v10;
          *((_DWORD *)v20 + 5) = v14;
          *((_QWORD *)v20 + 3) = v1;
          ++v7;
          v8 += 4;
        }
        while (v8 != v9);
        LODWORD(v3) = v28;
        v2 = v29;
      }
      else
      {
        LODWORD(v7) = 0;
      }
    }
    else
    {
      LODWORD(v7) = 0;
      v5 = 0;
    }
    v21 = *(_QWORD **)(*((_QWORD *)v2 + 1) + 32);
    v32 = v5;
    v33 = v3;
    v34 = v7;
    v35 = 1;
    if (*((_QWORD *)v2 + 15))
    {
      v22 = (void (***)(_QWORD))*((_QWORD *)v2 + 17);
      if (v22)
        (**v22)(*((_QWORD *)v2 + 17));
      v23 = (WTF *)WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v23 = off_1E3363950;
      *((_QWORD *)v23 + 1) = 0;
      v24 = *((_QWORD *)v2 + 15);
      *((_QWORD *)v2 + 15) = 0;
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 3) = v22;
      *((_QWORD *)v23 + 4) = 0;
    }
    else
    {
      v23 = 0;
    }
    v31 = v23;
    if (*((_BYTE *)v2 + 152))
    {
      v25 = *((_QWORD *)v2 + 18);
      v26 = 1;
    }
    else
    {
      v26 = 0;
      v25 = 0;
    }
    WebCore::PeerConnectionBackend::setLocalDescriptionSucceeded(v21, (uint64_t)v2 + 24, (uint64_t)&v32, (uint64_t *)&v31, v25, v26);
    result = v31;
    v31 = 0;
    if (result)
      result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
    if (v35)
    {
      if (v34)
        WTF::VectorDestructor<true,WebCore::PeerConnectionBackend::TransceiverState>::destruct(v32, (WTF *)((char *)v32 + 32 * v34));
      result = v32;
      if (v32)
      {
        v32 = 0;
        v33 = 0;
        return (WTF *)WTF::fastFree(result, v27);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::setLocalSessionDescriptionFailed(WebCore::ExceptionCode,char const*)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v9;
  _QWORD *v10;

  *a1 = &off_1E3363750;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E3363400;
      v9[1] = v5;
      v10 = v9;
      WTF::ensureOnMainThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::setLocalSessionDescriptionFailed(WebCore::ExceptionCode,char const*)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v9;
  _QWORD *v10;

  *(_QWORD *)this = &off_1E3363750;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E3363400;
      v9[1] = v5;
      v10 = v9;
      WTF::ensureOnMainThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::setLocalSessionDescriptionFailed(WebCore::ExceptionCode,char const*)::$_0,void>::call(WTF::StringImpl *result)
{
  uint64_t v1;
  _QWORD *v2;
  char v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  v1 = *((_QWORD *)result + 1);
  if (*(_QWORD *)(v1 + 48))
  {
    v2 = *(_QWORD **)(v1 + 32);
    v3 = *((_BYTE *)result + 16);
    v4 = (WTF::StringImpl *)*((_QWORD *)result + 3);
    *((_QWORD *)result + 3) = 0;
    LOBYTE(v6) = v3;
    v7 = v4;
    WebCore::PeerConnectionBackend::setLocalDescriptionFailed(v2, &v6);
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::setRemoteSessionDescriptionSucceeded(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v10;
  _QWORD *v11;

  *a1 = off_1E3363778;
  webrtc::SctpTransportInformation::~SctpTransportInformation((webrtc::SctpTransportInformation *)(a1 + 16));
  v3 = a1[15];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebCore::LibWebRTCMediaEndpointTransceiverState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 13), v2);
  std::__optional_destruct_base<WebCore::PeerConnectionBackend::DescriptionStates,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 3), v4);
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = off_1E3363400;
      v10[1] = v6;
      v11 = v10;
      WTF::ensureOnMainThread();
      if (v11)
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::setRemoteSessionDescriptionSucceeded(void)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  void *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v11;
  _QWORD *v12;

  *a1 = off_1E3363778;
  webrtc::SctpTransportInformation::~SctpTransportInformation((webrtc::SctpTransportInformation *)(a1 + 16));
  v3 = a1[15];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::Vector<WebCore::LibWebRTCMediaEndpointTransceiverState,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)(a1 + 13), v2);
  std::__optional_destruct_base<WebCore::PeerConnectionBackend::DescriptionStates,false>::~__optional_destruct_base[abi:sn180100]((uint64_t)(a1 + 3), v4);
  v6 = a1[1];
  a1[1] = 0;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v11 = off_1E3363400;
      v11[1] = v7;
      v12 = v11;
      WTF::ensureOnMainThread();
      if (v12)
        (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    }
  }
  return WTF::fastFree((WTF *)a1, v5);
}

WTF *WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::setRemoteSessionDescriptionSucceeded(void)::$_0,void>::call(WTF *result)
{
  unint64_t v1;
  WTF *v2;
  uint64_t v3;
  WTF **v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  const WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void (***v22)(_QWORD);
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  void *v27;
  int v28;
  WTF *v29;
  uint64_t *v30;
  WTF *v31;
  WTF *v32;
  int v33;
  unsigned int v34;
  char v35;

  if (*(_QWORD *)(*((_QWORD *)result + 1) + 48))
  {
    v2 = result;
    v3 = *((unsigned int *)result + 29);
    if ((_DWORD)v3)
    {
      if (v3 >> 27)
      {
LABEL_34:
        __break(0xC471u);
        JUMPOUT(0x1954C67A4);
      }
      v4 = (WTF **)*((_QWORD *)result + 2);
      v5 = (WTF *)WTF::fastMalloc((WTF *)(32 * v3));
      v6 = *((unsigned int *)v2 + 29);
      if ((_DWORD)v6)
      {
        v28 = v3;
        v29 = v2;
        v7 = 0;
        v8 = (uint64_t *)*((_QWORD *)v2 + 13);
        v9 = &v8[4 * v6];
        v30 = v9;
        do
        {
          v10 = *((unsigned int *)v8 + 5);
          if ((_DWORD)v10)
          {
            if (v10 >> 29)
              goto LABEL_34;
            v12 = WTF::fastMalloc((WTF *)(8 * v10));
            v13 = *((unsigned int *)v8 + 5);
            if ((_DWORD)v13)
            {
              v14 = 0;
              v15 = (WTF::StringImpl **)v8[1];
              v16 = 8 * v13;
              do
              {
                v17 = v14;
                v18 = WebCore::LibWebRTCMediaEndpoint::mediaStreamFromRTCStreamId(v4, v15, v11);
                ++*(_DWORD *)(v18 + 88);
                v14 = v17 + 1;
                *(_QWORD *)(v12 + 8 * v17) = v18;
                ++v15;
                v16 -= 8;
              }
              while (v16);
              v9 = v30;
            }
            else
            {
              LODWORD(v14) = 0;
            }
          }
          else
          {
            LODWORD(v14) = 0;
            v12 = 0;
          }
          v19 = *v8;
          *v8 = 0;
          v1 = v1 & 0xFFFFFF0000000000 | *((unsigned int *)v8 + 6) | ((unint64_t)*((unsigned __int8 *)v8 + 28) << 32);
          v20 = (char *)v5 + 32 * v7;
          *((_QWORD *)v20 + 1) = v12;
          *((_QWORD *)v20 + 2) = 0;
          *(_QWORD *)v20 = v19;
          *((_DWORD *)v20 + 4) = v10;
          *((_DWORD *)v20 + 5) = v14;
          *((_QWORD *)v20 + 3) = v1;
          ++v7;
          v8 += 4;
        }
        while (v8 != v9);
        LODWORD(v3) = v28;
        v2 = v29;
      }
      else
      {
        LODWORD(v7) = 0;
      }
    }
    else
    {
      LODWORD(v7) = 0;
      v5 = 0;
    }
    v21 = *(_QWORD *)(*((_QWORD *)v2 + 1) + 32);
    v32 = v5;
    v33 = v3;
    v34 = v7;
    v35 = 1;
    if (*((_QWORD *)v2 + 15))
    {
      v22 = (void (***)(_QWORD))*((_QWORD *)v2 + 17);
      if (v22)
        (**v22)(*((_QWORD *)v2 + 17));
      v23 = (WTF *)WTF::fastMalloc((WTF *)0x28);
      *(_QWORD *)v23 = off_1E3363950;
      *((_QWORD *)v23 + 1) = 0;
      v24 = *((_QWORD *)v2 + 15);
      *((_QWORD *)v2 + 15) = 0;
      *((_QWORD *)v23 + 2) = v24;
      *((_QWORD *)v23 + 3) = v22;
      *((_QWORD *)v23 + 4) = 0;
    }
    else
    {
      v23 = 0;
    }
    v31 = v23;
    if (*((_BYTE *)v2 + 152))
    {
      v25 = *((_QWORD *)v2 + 18);
      v26 = 1;
    }
    else
    {
      v26 = 0;
      v25 = 0;
    }
    WebCore::PeerConnectionBackend::setRemoteDescriptionSucceeded(v21, (uint64_t)v2 + 24, (uint64_t)&v32, (uint64_t *)&v31, v25, v26);
    result = v31;
    v31 = 0;
    if (result)
      result = (WTF *)(*(uint64_t (**)(WTF *))(*(_QWORD *)result + 8))(result);
    if (v35)
    {
      if (v34)
        WTF::VectorDestructor<true,WebCore::PeerConnectionBackend::TransceiverState>::destruct(v32, (WTF *)((char *)v32 + 32 * v34));
      result = v32;
      if (v32)
      {
        v32 = 0;
        v33 = 0;
        return (WTF *)WTF::fastFree(result, v27);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::setRemoteSessionDescriptionFailed(WebCore::ExceptionCode,char const*)::$_0,void>::~CallableWrapper(_QWORD *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v9;
  _QWORD *v10;

  *a1 = &off_1E33637A0;
  v3 = (WTF::StringImpl *)a1[3];
  a1[3] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E3363400;
      v9[1] = v5;
      v10 = v9;
      WTF::ensureOnMainThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::setRemoteSessionDescriptionFailed(WebCore::ExceptionCode,char const*)::$_0,void>::~CallableWrapper(WTF *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v9;
  _QWORD *v10;

  *(_QWORD *)this = &off_1E33637A0;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v9 = off_1E3363400;
      v9[1] = v5;
      v10 = v9;
      WTF::ensureOnMainThread();
      if (v10)
        (*(void (**)(_QWORD *))(*v10 + 8))(v10);
    }
  }
  return WTF::fastFree(this, a2);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::setRemoteSessionDescriptionFailed(WebCore::ExceptionCode,char const*)::$_0,void>::call(WTF::StringImpl *result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  v1 = *((_QWORD *)result + 1);
  if (*(_QWORD *)(v1 + 48))
  {
    v2 = *(_QWORD *)(v1 + 32);
    v3 = *((_BYTE *)result + 16);
    v4 = (WTF::StringImpl *)*((_QWORD *)result + 3);
    *((_QWORD *)result + 3) = 0;
    LOBYTE(v6) = v3;
    v7 = v4;
    WebCore::PeerConnectionBackend::setRemoteDescriptionFailed(v2, &v6);
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::OnStatsDelivered(webrtc::scoped_refptr<webrtc::RTCStatsReport const> const&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  _QWORD *v10;
  _QWORD *v11;

  *a1 = &off_1E33637C8;
  v2 = a1[4];
  if (v2)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v2 + 16, *(char **)(v2 + 24));
      MEMORY[0x19AEA7644](v2, 0x1020C4043D65406);
    }
  }
  v5 = a1[1];
  a1[1] = 0;
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
    {
      v7 = __ldaxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
    {
      atomic_store(1u, v6);
      v10 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v10 = off_1E3363400;
      v10[1] = v6;
      v11 = v10;
      WTF::ensureOnMainThread();
      if (v11)
        (*(void (**)(_QWORD *))(*v11 + 8))(v11);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::OnStatsDelivered(webrtc::scoped_refptr<webrtc::RTCStatsReport const> const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD *v11;
  _QWORD *v12;

  *(_QWORD *)this = &off_1E33637C8;
  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v3 + 16, *(char **)(v3 + 24));
      MEMORY[0x19AEA7644](v3, 0x1020C4043D65406);
    }
  }
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
    {
      v8 = __ldaxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
    {
      atomic_store(1u, v7);
      v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v11 = off_1E3363400;
      v11[1] = v7;
      v12 = v11;
      WTF::ensureOnMainThread();
      if (v12)
        (*(void (**)(_QWORD *))(*v12 + 8))(v12);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::LibWebRTCMediaEndpoint::OnStatsDelivered(webrtc::scoped_refptr<webrtc::RTCStatsReport const> const&)::$_0,void>::call(WTF::MonotonicTime *a1)
{
  WTF::MonotonicTime *v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  int v5;
  BOOL v6;
  double v7;
  BOOL v8;
  double v9;
  int v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  BOOL v15;
  WTF::StringImpl *v16;
  char *v17;
  unsigned int v18;
  char v19;
  WTF::StringImpl *v20[4];
  webrtc::RTCStats *v21;
  WTF::StringImpl *v22;
  _BYTE v23[16];

  v1 = a1;
  v2 = *((_QWORD *)a1 + 2);
  if (*(_QWORD *)(v2 + 48))
  {
    v3 = *((_QWORD *)a1 + 3);
    v4 = 1.0;
    v5 = *(unsigned __int8 *)(v2 + 256);
    if (!*(_BYTE *)(v2 + 256))
    {
      if (!*(_BYTE *)(*(_QWORD *)(v2 + 240) + 12)
        || ((v4 = 2.0, WebCore::LogWebRTC) ? (v6 = byte_1ECE7CD50 > 2u) : (v6 = 0), !v6))
      {
        v4 = 4.0;
        if (v3 - *(_QWORD *)(v2 + 232) > 15000000)
          v4 = 10.0;
      }
    }
    if (*(double *)(v2 + 168) != v4)
    {
      if ((*(_QWORD *)(v2 + 176) & 0xFFFFFFFFFFFFLL) != 0)
      {
        a1 = (WTF::MonotonicTime *)WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v2 + 144));
        v3 = *((_QWORD *)v1 + 3);
        v5 = *(unsigned __int8 *)(v2 + 256);
      }
      v7 = 1.0;
      if (!v5)
      {
        if (!*(_BYTE *)(*(_QWORD *)(v2 + 240) + 12)
          || ((v7 = 2.0, WebCore::LogWebRTC) ? (v8 = byte_1ECE7CD50 > 2u) : (v8 = 0), !v8))
        {
          if (v3 - *(_QWORD *)(v2 + 232) <= 15000000)
            v7 = 4.0;
          else
            v7 = 10.0;
        }
      }
      *(double *)(v2 + 168) = v7;
      WTF::MonotonicTime::now(a1);
      WebCore::TimerBase::setNextFireTime(v2 + 144, v7 + v9);
    }
  }
  webrtc::RTCStatsReport::begin(*((webrtc::RTCStatsReport **)v1 + 4));
  webrtc::RTCStatsReport::end(*((webrtc::RTCStatsReport **)v1 + 4));
  v10 = webrtc::RTCStatsReport::ConstIterator::operator!=();
  webrtc::RTCStatsReport::ConstIterator::~ConstIterator((webrtc::RTCStatsReport::ConstIterator *)v20);
  if (v10)
  {
    do
    {
      v21 = (webrtc::RTCStats *)webrtc::RTCStatsReport::ConstIterator::operator*();
      v22 = 0;
      if (*(_BYTE *)(v2 + 256))
      {
        v12 = *(_QWORD *)(v2 + 32);
        WebCore::RTCStatsLogger::toJSONString((WebCore::RTCStatsLogger *)v20, &v21);
        v13 = *(_QWORD *)(v12 + 136);
        if (v13)
          (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v13 + 16))(v13, v20);
        v14 = v20[0];
        v20[0] = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v11);
          else
            *(_DWORD *)v14 -= 2;
        }
      }
      if (*(_BYTE *)(*(_QWORD *)(v2 + 240) + 12))
      {
        if (WebCore::LogWebRTC)
          v15 = byte_1ECE7CD50 >= 4u;
        else
          v15 = 0;
        v16 = *(WTF::StringImpl **)(v2 + 248);
        v20[0] = (WTF::StringImpl *)"LibWebRTCMediaEndpoint";
        v20[1] = (WTF::StringImpl *)23;
        v20[2] = (WTF::StringImpl *)"OnStatsDelivered";
        v20[3] = v16;
        if (v15)
        {
          v17 = &WebCore::LogWebRTC;
          v18 = 4;
        }
        else
        {
          v17 = (char *)&WebCore::LogWebRTCStats;
          v18 = 0;
        }
        WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::RTCStatsLogger>((uint64_t)v17, v18, (WTF::Logger::LogSiteIdentifier *)v20, &v21);
      }
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v11);
        else
          *(_DWORD *)v22 -= 2;
      }
      webrtc::RTCStatsReport::ConstIterator::operator++();
      webrtc::RTCStatsReport::end(*((webrtc::RTCStatsReport **)v1 + 4));
      v19 = webrtc::RTCStatsReport::ConstIterator::operator!=();
      webrtc::RTCStatsReport::ConstIterator::~ConstIterator((webrtc::RTCStatsReport::ConstIterator *)v20);
    }
    while ((v19 & 1) != 0);
  }
  webrtc::RTCStatsReport::ConstIterator::~ConstIterator((webrtc::RTCStatsReport::ConstIterator *)v23);
}

void WebCore::RTCStatsLogger::toJSONString(WebCore::RTCStatsLogger *this, webrtc::RTCStats **a2)
{
  webrtc::RTCStats *v3;
  const char *p_p;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  void *__p;
  char v12;
  WTF::StringImpl *v13;

  v3 = a2[1];
  if (v3)
    goto LABEL_11;
  webrtc::RTCStats::ToJson(*a2);
  if (v12 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  WTF::String::String((WTF::String *)&v13, p_p);
  v7 = v13;
  v13 = 0;
  v8 = a2[1];
  a2[1] = v7;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, v6);
      v10 = v13;
      v13 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v9);
        else
          *(_DWORD *)v10 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v8 -= 2;
      v13 = 0;
    }
  }
  if (v12 < 0)
    operator delete(__p);
  v3 = a2[1];
  if (v3)
LABEL_11:
    *(_DWORD *)v3 += 2;
  *(_QWORD *)this = v3;
}

void WTF::Logger::log<WTF::Logger::LogSiteIdentifier,WebCore::RTCStatsLogger>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this, webrtc::RTCStats **a4)
{
  WTF::StringImpl *v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  NSObject *v15;
  uint64_t v16;
  void *v17;
  char *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  WTF::Logger *v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::Logger *v31;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  int v37;
  WTF::StringImpl *v38;
  WTF::Logger *v40;
  uint64_t v41;
  uint64_t v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  uint8_t buf[4];
  _BYTE v46[12];
  int v47;
  WTF::StringImpl *v48[3];

  v48[2] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  WebCore::RTCStatsLogger::toJSONString((WebCore::RTCStatsLogger *)&v42, a4);
  v7 = (WTF::StringImpl *)v42;
  if (!v43)
  {
    v8 = 0;
    if (v42)
      goto LABEL_3;
LABEL_72:
    v9 = 0;
    goto LABEL_4;
  }
  v8 = *((_DWORD *)v43 + 1);
  if (!v42)
    goto LABEL_72;
LABEL_3:
  v9 = *(_DWORD *)(v42 + 4);
LABEL_4:
  if ((v9 | v8) < 0 || (v10 = (v8 + v9), __OFADD__(v8, v9)))
  {
    v44 = 0;
    goto LABEL_76;
  }
  if (v43)
  {
    v11 = *((_DWORD *)v43 + 4);
    v12 = (v11 >> 2) & 1;
    if (v42 && (v11 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v42)
    {
LABEL_9:
      v12 = (*(unsigned __int8 *)(v42 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v12 = 1;
  }
LABEL_10:
  WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v10, v12, (uint64_t)v43, v42, &v44);
  if (!v44)
  {
LABEL_76:
    __break(0xC471u);
    return;
  }
  v42 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v13);
    else
      *(_DWORD *)v7 -= 2;
  }
  v14 = v43;
  v43 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *(NSObject **)(a1 + 32);
  v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v16)
  {
    WTF::String::utf8();
    v18 = v40 ? (char *)v40 + 16 : 0;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v46 = v18;
    _os_log_impl(&dword_1940B8000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
    v16 = (uint64_t)v40;
    v40 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 1)
        v16 = WTF::fastFree((WTF *)v16, v17);
      else
        --*(_DWORD *)v16;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v19 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v20 = *v19;
      if ((v20 & 1) != 0)
        break;
      v21 = __ldaxr(v19);
      if (v21 == v20)
      {
        if (!__stxr(v20 | 1, v19))
        {
          v22 = WTF::Logger::observers((WTF::Logger *)v16);
          v23 = *(unsigned int *)(v22 + 12);
          if ((_DWORD)v23)
          {
            v24 = *(uint64_t **)v22;
            v25 = *(_QWORD *)v22 + 8 * v23;
            do
            {
              v26 = *v24;
              *(_DWORD *)buf = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v47 = 1;
              WebCore::RTCStatsLogger::toJSONString((WebCore::RTCStatsLogger *)v48, a4);
              v40 = 0;
              v41 = 0;
              v27 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v41) = 2;
              v40 = v27;
              v28 = HIDWORD(v41);
              *((_DWORD *)v27 + 4 * HIDWORD(v41)) = *(_DWORD *)buf;
              v29 = *(_QWORD *)&v46[4];
              if (*(_QWORD *)&v46[4])
                **(_DWORD **)&v46[4] += 2;
              *((_QWORD *)v27 + 2 * v28 + 1) = v29;
              *((_DWORD *)v27 + 4 * (v28 + 1)) = v47;
              v30 = v48[0];
              if (v48[0])
                *(_DWORD *)v48[0] += 2;
              *((_QWORD *)v27 + 2 * (v28 + 1) + 1) = v30;
              HIDWORD(v41) = v28 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v26 + 16))(v26, a1, a2, &v40);
              v31 = v40;
              if (HIDWORD(v41))
              {
                v32 = 16 * HIDWORD(v41);
                v33 = (WTF::StringImpl **)((char *)v40 + 8);
                do
                {
                  v34 = *v33;
                  *v33 = 0;
                  if (v34)
                  {
                    if (*(_DWORD *)v34 == 2)
                      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
                    else
                      *(_DWORD *)v34 -= 2;
                  }
                  v33 += 2;
                  v32 -= 16;
                }
                while (v32);
                v31 = v40;
              }
              if (v31)
              {
                v40 = 0;
                LODWORD(v41) = 0;
                WTF::fastFree(v31, v17);
              }
              v35 = v48[0];
              v48[0] = 0;
              if (v35)
              {
                if (*(_DWORD *)v35 == 2)
                  WTF::StringImpl::destroy(v35, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v35 -= 2;
              }
              v36 = *(WTF::StringImpl **)&v46[4];
              *(_QWORD *)&v46[4] = 0;
              if (v36)
              {
                if (*(_DWORD *)v36 == 2)
                  WTF::StringImpl::destroy(v36, (WTF::StringImpl *)v17);
                else
                  *(_DWORD *)v36 -= 2;
              }
              ++v24;
            }
            while (v24 != (uint64_t *)v25);
          }
          v37 = __ldxr(v19);
          if (v37 == 1)
          {
            if (!__stlxr(0, v19))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  v38 = v44;
  v44 = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)v38 -= 2;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore22LibWebRTCMediaEndpoint8BackendsENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(int a1, WebCore::LibWebRTCMediaEndpoint::Backends *this)
{
  WebCore::LibWebRTCMediaEndpoint::Backends::~Backends(this, this);
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore22LibWebRTCMediaEndpoint8BackendsENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCRtpSenderBackend::startSource(void)::$_0,void>::~CallableWrapper(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  char v8;

  *(_QWORD *)a1 = &off_1E3363800;
  v3 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))off_1E3363330[v3])(&v8, a1 + 24);
  *(_DWORD *)(a1 + 32) = -1;
  v4 = *(unsigned int **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCRtpSenderBackend::startSource(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  char v8;

  *(_QWORD *)this = &off_1E3363800;
  v3 = *((unsigned int *)this + 8);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E3363330[v3])(&v8, (char *)this + 24);
  *((_DWORD *)this + 8) = -1;
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCRtpSenderBackend::startSource(void)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v3[2];
  _QWORD *v4;

  v1 = *(_QWORD *)(result + 16);
  if (v1 && *(_QWORD *)(v1 + 8))
  {
    v3[0] = *(_QWORD *)(result + 8);
    v3[1] = v3[0];
    v2 = *(unsigned int *)(result + 32);
    if ((_DWORD)v2 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
      JUMPOUT(0x1954C74A8);
    }
    v4 = v3;
    return off_1E3363818[v2](&v4, result + 24);
  }
  return result;
}

WebCore::RealtimeOutgoingAudioSource *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::LibWebRTCRtpSenderBackend::startSource(void)::$_0::operator()(void)::{lambda(WTF::Ref<WebCore::RealtimeOutgoingAudioSource,WTF::RawPtrTraits<WebCore::RealtimeOutgoingAudioSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeOutgoingAudioSource>> &)#1},WebCore::LibWebRTCRtpSenderBackend::startSource(void)::$_0::operator()(void)::{lambda(WTF::Ref<WebCore::RealtimeOutgoingVideoSource,WTF::RawPtrTraits<WebCore::RealtimeOutgoingVideoSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeOutgoingVideoSource>> &)#1},WebCore::LibWebRTCRtpSenderBackend::startSource(void)::$_0::operator()(void)::{lambda(decltype(nullptr) &)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebCore::RealtimeOutgoingAudioSource,WTF::RawPtrTraits<WebCore::RealtimeOutgoingAudioSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeOutgoingAudioSource>>,WTF::Ref<WebCore::RealtimeOutgoingVideoSource,WTF::RawPtrTraits<WebCore::RealtimeOutgoingVideoSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeOutgoingVideoSource>>> &>(WebCore::RealtimeOutgoingAudioSource *result, WebCore::RealtimeOutgoingAudioSource **a2)
{
  uint64_t v2;

  v2 = **(_QWORD **)result;
  if (*(_DWORD *)(v2 + 40) == 1)
  {
    result = *a2;
    if (*(WebCore::RealtimeOutgoingAudioSource **)(v2 + 32) == *a2)
      return (WebCore::RealtimeOutgoingAudioSource *)WebCore::RealtimeOutgoingAudioSource::observeSource(result);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::LibWebRTCRtpSenderBackend::startSource(void)::$_0::operator()(void)::{lambda(WTF::Ref<WebCore::RealtimeOutgoingAudioSource,WTF::RawPtrTraits<WebCore::RealtimeOutgoingAudioSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeOutgoingAudioSource>> &)#1},WebCore::LibWebRTCRtpSenderBackend::startSource(void)::$_0::operator()(void)::{lambda(WTF::Ref<WebCore::RealtimeOutgoingVideoSource,WTF::RawPtrTraits<WebCore::RealtimeOutgoingVideoSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeOutgoingVideoSource>> &)#1},WebCore::LibWebRTCRtpSenderBackend::startSource(void)::$_0::operator()(void)::{lambda(decltype(nullptr) &)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebCore::RealtimeOutgoingAudioSource,WTF::RawPtrTraits<WebCore::RealtimeOutgoingAudioSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeOutgoingAudioSource>>,WTF::Ref<WebCore::RealtimeOutgoingVideoSource,WTF::RawPtrTraits<WebCore::RealtimeOutgoingVideoSource>,WTF::DefaultRefDerefTraits<WebCore::RealtimeOutgoingVideoSource>>> &>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  _BYTE v10[24];

  v2 = *(_QWORD *)(*(_QWORD *)result + 8);
  if (*(_DWORD *)(v2 + 40) == 2)
  {
    v3 = *a2;
    if (*(_QWORD *)(v2 + 32) == *a2)
    {
      WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(*(_QWORD *)(v3 + 72) + 24, (_QWORD *)(v3 + 32), (uint64_t)v10);
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 72) + 40) + 8);
      v5 = (double *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 128))(v4);
      v6 = *v5;
      *(double *)(v3 + 164) = *v5;
      v7 = *(_QWORD *)(v3 + 72);
      *(_BYTE *)(v3 + 162) = *(_BYTE *)(v7 + 97);
      *(_BYTE *)(v3 + 161) = *(_BYTE *)(v7 + 73);
      return WebCore::RealtimeOutgoingVideoSource::updateFramesSending(v3, v6, v8, v9);
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::LibWebRTCRtpSenderBackend::stopSource(void)::$_0,WebCore::LibWebRTCRtpSenderBackend::stopSource(void)::$_1,WebCore::LibWebRTCRtpSenderBackend::stopSource(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebCore::RealtimeOutgoingAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::__variant_detail::_Trait<WebCore::RealtimeOutgoingVideoSource,WebCore::RealtimeOutgoingAudioSource<WTF::Ref<WebCore::RealtimeOutgoingAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::RealtimeOutgoingAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>> &>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v7;

  v2 = *a2;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*a2 + 56) + 40) + 8);
  v4 = *a2 + 40;
  v5 = (unsigned __int8 *)(v3 + 144);
  if (__ldaxr((unsigned __int8 *)(v3 + 144)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v5))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v3 + 144);
LABEL_5:
  WTF::HashSet<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTableTraits>::remove<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>((uint64_t *)(v3 + 152), v4);
  v7 = __ldxr(v5);
  if (v7 == 1)
  {
    if (!__stlxr(0, v5))
      return WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(*(_QWORD *)(v2 + 56) + 24, (_QWORD *)(v2 + 24));
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)(v3 + 144));
  return WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(*(_QWORD *)(v2 + 56) + 24, (_QWORD *)(v2 + 24));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::LibWebRTCRtpSenderBackend::stopSource(void)::$_0,WebCore::LibWebRTCRtpSenderBackend::stopSource(void)::$_1,WebCore::LibWebRTCRtpSenderBackend::stopSource(void)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebCore::RealtimeOutgoingAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::__variant_detail::_Trait<WebCore::RealtimeOutgoingVideoSource,WebCore::RealtimeOutgoingAudioSource<WTF::Ref<WebCore::RealtimeOutgoingAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::RealtimeOutgoingAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>> &>(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t result;

  v2 = *(_QWORD **)a2;
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(*(_QWORD *)(*(_QWORD *)a2 + 72) + 24, (_QWORD *)(*(_QWORD *)a2 + 32));
  result = WebCore::RealtimeMediaSource::removeVideoFrameObserver(*(_QWORD *)(*(_QWORD *)(v2[9] + 40) + 8), (uint64_t)(v2 + 6));
  if ((v2[14] & 0xFFFFFFFFFFFFLL) != 0)
    return WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v2 + 10));
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::LibWebRTCRtpSenderBackend::replaceTrack(WebCore::RTCRtpSender &,WebCore::MediaStreamTrack *)::$_0,WebCore::LibWebRTCRtpSenderBackend::replaceTrack(WebCore::RTCRtpSender &,WebCore::MediaStreamTrack *)::$_1,WebCore::LibWebRTCRtpSenderBackend::replaceTrack(WebCore::RTCRtpSender &,WebCore::MediaStreamTrack *)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebCore::RealtimeOutgoingAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::__variant_detail::_Trait<WebCore::RealtimeOutgoingVideoSource,WebCore::RealtimeOutgoingAudioSource<WTF::Ref<WebCore::RealtimeOutgoingAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::RealtimeOutgoingAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>> &>(uint64_t *a1, WebCore::RealtimeOutgoingAudioSource **a2)
{
  uint64_t v3;
  WebCore::RealtimeOutgoingAudioSource *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v9;
  void *v10;
  WebCore::RealtimeOutgoingAudioSource *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v15;
  void *v16;

  v3 = *a1;
  v4 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*a2 + 7) + 40) + 8);
  v6 = (uint64_t)*a2 + 40;
  v7 = (unsigned __int8 *)(v5 + 144);
  if (__ldaxr((unsigned __int8 *)(v5 + 144)))
  {
    __clrex();
  }
  else if (!__stxr(1u, v7))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v5 + 144);
LABEL_5:
  WTF::HashSet<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>,WTF::DefaultHash<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>,WTF::HashTableTraits>::remove<WTF::CheckedPtr<WebCore::PlaybackSessionModelClient,WTF::RawPtrTraits<WebCore::PlaybackSessionModelClient>>>((uint64_t *)(v5 + 152), v6);
  v9 = __ldxr(v7);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, v7))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)(v5 + 144));
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(*((_QWORD *)v4 + 7) + 24, (_QWORD *)v4 + 3);
  v11 = *a2;
  v12 = *(_QWORD *)(**(_QWORD **)v3 + 96);
  ++*(_DWORD *)(v12 + 8);
  v13 = *((_QWORD *)v11 + 7);
  if (*(_BYTE *)(*(_QWORD *)(v13 + 80) + 12))
  {
    WTF::Logger::log<char [20],void const*>((uint64_t)&WebCore::LogWebRTC, 0, "Changing source to ");
    v13 = *((_QWORD *)v11 + 7);
    *((_QWORD *)v11 + 7) = v12;
    if (!v13)
      goto LABEL_16;
  }
  else
  {
    *((_QWORD *)v11 + 7) = v12;
  }
  if (*(_DWORD *)(v13 + 8) == 1)
  {
    WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate((WebCore::MediaStreamTrackPrivate *)v13, v10);
    WTF::fastFree(v15, v16);
  }
  else
  {
    --*(_DWORD *)(v13 + 8);
  }
LABEL_16:
  (*(void (**)(WebCore::RealtimeOutgoingAudioSource *))(*(_QWORD *)v11 + 168))(v11);
  return WebCore::RealtimeOutgoingAudioSource::observeSource(*a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::LibWebRTCRtpSenderBackend::replaceTrack(WebCore::RTCRtpSender &,WebCore::MediaStreamTrack *)::$_0,WebCore::LibWebRTCRtpSenderBackend::replaceTrack(WebCore::RTCRtpSender &,WebCore::MediaStreamTrack *)::$_1,WebCore::LibWebRTCRtpSenderBackend::replaceTrack(WebCore::RTCRtpSender &,WebCore::MediaStreamTrack *)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebCore::RealtimeOutgoingAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::__variant_detail::_Trait<WebCore::RealtimeOutgoingVideoSource,WebCore::RealtimeOutgoingAudioSource<WTF::Ref<WebCore::RealtimeOutgoingAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::RealtimeOutgoingAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>> &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  WebCore::MediaStreamTrackPrivate *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  WTF *v16;
  void *v17;
  WebCore::MediaStreamTrackPrivate *v18[3];

  v3 = *a1;
  v4 = (_QWORD *)*a2;
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NavigatorGamepad>(*(_QWORD *)(*a2 + 72) + 24, (_QWORD *)(*a2 + 32));
  WebCore::RealtimeMediaSource::removeVideoFrameObserver(*(_QWORD *)(*(_QWORD *)(v4[9] + 40) + 8), (uint64_t)(v4 + 6));
  if ((v4[14] & 0xFFFFFFFFFFFFLL) != 0)
    WebCore::TimerBase::stopSlowCase((WebCore::TimerBase *)(v4 + 10));
  v5 = *a2;
  v6 = *(WebCore::MediaStreamTrackPrivate **)(**(_QWORD **)(v3 + 8) + 96);
  ++*((_DWORD *)v6 + 2);
  v18[0] = v6;
  WebCore::RealtimeOutgoingVideoSource::setSource(v5, (uint64_t *)v18);
  if (v18[0])
  {
    if (*((_DWORD *)v18[0] + 2) == 1)
    {
      WebCore::MediaStreamTrackPrivate::~MediaStreamTrackPrivate(v18[0], v7);
      WTF::fastFree(v16, v17);
    }
    else
    {
      --*((_DWORD *)v18[0] + 2);
    }
  }
  v8 = *a2;
  WTF::WeakHashSet<WebCore::NavigatorGamepad,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NavigatorGamepad>(*(_QWORD *)(v8 + 72) + 24, (_QWORD *)(v8 + 32), (uint64_t)v18);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 72) + 40) + 8);
  v10 = (double *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 128))(v9);
  v11 = *v10;
  *(double *)(v8 + 164) = *v10;
  v12 = *(_QWORD *)(v8 + 72);
  *(_BYTE *)(v8 + 162) = *(_BYTE *)(v12 + 97);
  *(_BYTE *)(v8 + 161) = *(_BYTE *)(v12 + 73);
  return WebCore::RealtimeOutgoingVideoSource::updateFramesSending(v8, v11, v13, v14);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::LibWebRTCRtpSenderBackend::videoSource(void)::$_0,WebCore::LibWebRTCRtpSenderBackend::videoSource(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebCore::RealtimeOutgoingAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::__variant_detail::_Trait<WebCore::RealtimeOutgoingVideoSource,WebCore::RealtimeOutgoingAudioSource<WTF::Ref<WebCore::RealtimeOutgoingAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::RealtimeOutgoingAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>> &>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::LibWebRTCRtpSenderBackend::videoSource(void)::$_0,WebCore::LibWebRTCRtpSenderBackend::videoSource(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebCore::RealtimeOutgoingAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::__variant_detail::_Trait<WebCore::RealtimeOutgoingVideoSource,WebCore::RealtimeOutgoingAudioSource<WTF::Ref<WebCore::RealtimeOutgoingAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::RealtimeOutgoingAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>> &>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::LibWebRTCRtpSenderBackend::videoSource(void)::$_0,WebCore::LibWebRTCRtpSenderBackend::videoSource(void)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,decltype(nullptr),WTF::Ref<WebCore::RealtimeOutgoingAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,std::__variant_detail::_Trait<WebCore::RealtimeOutgoingVideoSource,WebCore::RealtimeOutgoingAudioSource<WTF::Ref<WebCore::RealtimeOutgoingAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::RealtimeOutgoingAudioSource,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>> &>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>>>::__emplace_unique_key_args<unsigned int,unsigned int const&,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>(uint64_t a1, unsigned int a2, _DWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t prime;
  void *v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  size_t v29;
  size_t v30;
  size_t v31;
  _QWORD *v32;
  size_t v33;
  unint64_t v34;
  uint8x8_t v35;
  uint64_t v36;
  _QWORD *v37;
  size_t v38;
  uint64_t *v39;
  unint64_t v40;
  WTF *v42;

  v8 = a2;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = a2;
      if (v9 <= a2)
        v4 = a2 % v9;
    }
    else
    {
      v4 = ((_DWORD)v9 - 1) & a2;
    }
    v11 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        if (v10.u32[0] >= 2uLL)
        {
          while (1)
          {
            v14 = *(_QWORD *)(v12 + 8);
            if (v14 == a2)
            {
              if (*(_DWORD *)(v12 + 16) == a2)
                return v12;
            }
            else
            {
              if (v14 >= v9)
                v14 %= v9;
              if (v14 != v4)
                goto LABEL_23;
            }
            v12 = *(_QWORD *)v12;
            if (!v12)
              goto LABEL_23;
          }
        }
        do
        {
          v13 = *(_QWORD *)(v12 + 8);
          if (v13 == a2)
          {
            if (*(_DWORD *)(v12 + 16) == a2)
              return v12;
          }
          else if ((v13 & (v9 - 1)) != v4)
          {
            break;
          }
          v12 = *(_QWORD *)v12;
        }
        while (v12);
      }
    }
  }
LABEL_23:
  v12 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)v12 = 0;
  *(_QWORD *)(v12 + 8) = v8;
  *(_DWORD *)(v12 + 16) = *a3;
  v16 = *a4;
  *a4 = 0;
  *(_QWORD *)(v12 + 24) = v16;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = v21;
    else
      prime = v20;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (prime <= v9)
    {
      if (prime >= v9)
        goto LABEL_67;
      v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v35 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        v34 = std::__next_prime(v34);
      }
      else
      {
        v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2)
          v34 = v36;
      }
      if (prime <= v34)
        prime = v34;
      if (prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
LABEL_67:
        if ((v9 & (v9 - 1)) != 0)
        {
          if (v9 <= v8)
            v4 = v8 % v9;
          else
            v4 = v8;
        }
        else
        {
          v4 = ((_DWORD)v9 - 1) & v8;
        }
        goto LABEL_72;
      }
      if (!prime)
      {
        v42 = *(WTF **)a1;
        *(_QWORD *)a1 = 0;
        if (v42)
          WTF::fastFree(v42, v15);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        goto LABEL_67;
      }
    }
    v24 = WTF::fastMalloc((WTF *)(8 * prime));
    v25 = *(WTF **)a1;
    *(_QWORD *)a1 = v24;
    if (v25)
      WTF::fastFree(v25, v23);
    v26 = 0;
    *(_QWORD *)(a1 + 8) = prime;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26++) = 0;
    while (prime != v26);
    v28 = a1 + 16;
    v27 = *(_QWORD **)(a1 + 16);
    if (!v27)
    {
LABEL_66:
      v9 = prime;
      goto LABEL_67;
    }
    v29 = v27[1];
    v30 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      v31 = v29 & v30;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v28;
      while (1)
      {
        v32 = (_QWORD *)*v27;
        if (!*v27)
          break;
        v33 = v32[1] & v30;
        if (v33 == v31)
        {
          v27 = (_QWORD *)*v27;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v33))
        {
          *v27 = *v32;
          *v32 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v33);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v33) = v32;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v27;
          v27 = v32;
          v31 = v33;
        }
      }
      goto LABEL_66;
    }
    if (v29 >= prime)
      v29 %= prime;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v28;
    v37 = (_QWORD *)*v27;
    if (!*v27)
      goto LABEL_66;
    while (1)
    {
      v38 = v37[1];
      if (v38 >= prime)
        v38 %= prime;
      if (v38 != v29)
      {
        if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v38))
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v38) = v27;
          goto LABEL_63;
        }
        *v27 = *v37;
        *v37 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v38);
        **(_QWORD **)(*(_QWORD *)a1 + 8 * v38) = v37;
        v37 = v27;
      }
      v38 = v29;
LABEL_63:
      v27 = v37;
      v37 = (_QWORD *)*v37;
      v29 = v38;
      if (!v37)
        goto LABEL_66;
    }
  }
LABEL_72:
  v39 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v4);
  if (v39)
  {
    *(_QWORD *)v12 = *v39;
LABEL_80:
    *v39 = v12;
    goto LABEL_81;
  }
  *(_QWORD *)v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v12)
  {
    v40 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v40 >= v9)
        v40 %= v9;
    }
    else
    {
      v40 &= v9 - 1;
    }
    v39 = (uint64_t *)(*(_QWORD *)a1 + 8 * v40);
    goto LABEL_80;
  }
LABEL_81:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,WTF::FastAllocator<std::__hash_value_type<unsigned int,webrtc::scoped_refptr<webrtc::TransformedFrameCallback>>>>::__erase_unique<unsigned int>(uint64_t *result, void *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF **v7;
  WTF *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  WTF *v12;
  WTF *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v2 = result[1];
  if (v2)
  {
    v3 = a2;
    v4 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      v5 = a2;
      if (v2 <= a2)
        v5 = a2 % v2;
    }
    else
    {
      v5 = ((_DWORD)v2 - 1) & a2;
    }
    v6 = *result;
    v7 = *(WTF ***)(*result + 8 * v5);
    if (v7)
    {
      v8 = *v7;
      if (*v7)
      {
        v9 = v2 - 1;
        if (v4.u32[0] >= 2uLL)
        {
          while (1)
          {
            v11 = *((_QWORD *)v8 + 1);
            if (v11 == a2)
            {
              if (*((_DWORD *)v8 + 4) == (_DWORD)a2)
              {
LABEL_23:
                if (v4.u32[0] > 1uLL)
                {
                  if (v2 <= a2)
                    v3 = a2 % v2;
                }
                else
                {
                  v3 = v9 & a2;
                }
                v12 = *(WTF **)(v6 + 8 * v3);
                do
                {
                  v13 = v12;
                  v12 = *(WTF **)v12;
                }
                while (v12 != v8);
                if (v13 == (WTF *)(result + 2))
                  goto LABEL_40;
                v14 = *((_QWORD *)v13 + 1);
                if (v4.u32[0] > 1uLL)
                {
                  if (v14 >= v2)
                    v14 %= v2;
                }
                else
                {
                  v14 &= v9;
                }
                if (v14 != v3)
                {
LABEL_40:
                  if (!*(_QWORD *)v8)
                    goto LABEL_41;
                  v15 = *(_QWORD *)(*(_QWORD *)v8 + 8);
                  if (v4.u32[0] > 1uLL)
                  {
                    if (v15 >= v2)
                      v15 %= v2;
                  }
                  else
                  {
                    v15 &= v9;
                  }
                  if (v15 != v3)
LABEL_41:
                    *(_QWORD *)(v6 + 8 * v3) = 0;
                }
                v16 = *(_QWORD *)v8;
                if (*(_QWORD *)v8)
                {
                  v17 = *(_QWORD *)(v16 + 8);
                  if (v4.u32[0] > 1uLL)
                  {
                    if (v17 >= v2)
                      v17 %= v2;
                  }
                  else
                  {
                    v17 &= v9;
                  }
                  if (v17 != v3)
                  {
                    *(_QWORD *)(*result + 8 * v17) = v13;
                    v16 = *(_QWORD *)v8;
                  }
                }
                *(_QWORD *)v13 = v16;
                *(_QWORD *)v8 = 0;
                --result[3];
                v18 = *((_QWORD *)v8 + 3);
                if (v18)
                  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
                return (uint64_t *)WTF::fastFree(v8, a2);
              }
            }
            else
            {
              if (v11 >= v2)
                v11 %= v2;
              if (v11 != v5)
                return result;
            }
            v8 = *(WTF **)v8;
            if (!v8)
              return result;
          }
        }
        do
        {
          v10 = *((_QWORD *)v8 + 1);
          if (v10 == a2)
          {
            if (*((_DWORD *)v8 + 4) == (_DWORD)a2)
              goto LABEL_23;
          }
          else if ((v10 & v9) != v5)
          {
            return result;
          }
          v8 = *(WTF **)v8;
        }
        while (v8);
      }
    }
  }
  return result;
}

void WebCore::LibWebRTCRtpTransformableFrame::~LibWebRTCRtpTransformableFrame(WebCore::LibWebRTCRtpTransformableFrame *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void WebCore::LibWebRTCRtpTransformableFrame::~LibWebRTCRtpTransformableFrame(WebCore::LibWebRTCRtpTransformableFrame *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::LibWebRTCRtpTransformableFrame::data(WebCore::LibWebRTCRtpTransformableFrame *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t WebCore::LibWebRTCRtpTransformableFrame::setData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    if (!a3)
      a2 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 24))(result, a2);
  }
  return result;
}

uint64_t WebCore::LibWebRTCRtpTransformableFrame::isKeyFrame(WebCore::LibWebRTCRtpTransformableFrame *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 88))(result);
  return result;
}

uint64_t WebCore::LibWebRTCRtpTransformableFrame::timestamp(WebCore::LibWebRTCRtpTransformableFrame *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (result)
    return (*(unsigned int (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

uint64_t WebCore::LibWebRTCRtpTransformableFrame::audioMetadata@<X0>(WebCore::LibWebRTCRtpTransformableFrame *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = *((_QWORD *)this + 2);
  if (!result)
  {
    *(_DWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    return result;
  }
  if (*((_BYTE *)this + 24))
  {
    LODWORD(v5) = 0;
LABEL_4:
    v6 = 0;
LABEL_10:
    result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
    *(_DWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v6;
    *(_DWORD *)(a2 + 16) = v5;
    *(_DWORD *)(a2 + 20) = v5;
    return result;
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 88))(result);
  v5 = v7;
  if (!v7)
    goto LABEL_4;
  if (!(v7 >> 30))
  {
    v8 = result;
    v9 = WTF::fastMalloc((WTF *)(4 * v7));
    v6 = v9;
    v10 = 0;
    do
    {
      *(_DWORD *)(v9 + 4 * v10) = *(_DWORD *)(v8 + 4 * v10);
      ++v10;
    }
    while (v5 != v10);
    goto LABEL_10;
  }
  __break(0xC471u);
  return result;
}

void WebCore::LibWebRTCRtpTransformableFrame::videoMetadata(WebCore::LibWebRTCRtpTransformableFrame *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t FrameId;
  char v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t FrameDependencies;
  uint64_t v12;
  uint64_t *v13;
  WTF *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  void *v20;
  WTF *v21;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  _QWORD v25[5];
  char v26;
  void *v27;
  char v28;
  void *v29;
  void *__p;
  void *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v4 + 96))(v25);
    webrtc::VideoFrameMetadata::GetFrameId((webrtc::VideoFrameMetadata *)v25);
    if (v5)
    {
      FrameId = webrtc::VideoFrameMetadata::GetFrameId((webrtc::VideoFrameMetadata *)v25);
      if (!v7)
        __break(1u);
      v8 = FrameId & 0xFFFFFFFFFFFFFF00;
      v9 = FrameId;
      v10 = 1;
    }
    else
    {
      v10 = 0;
      v9 = 0;
      v8 = 0;
    }
    v23 = 0;
    v24 = 0;
    FrameDependencies = webrtc::VideoFrameMetadata::GetFrameDependencies((webrtc::VideoFrameMetadata *)v25);
    if (v12)
    {
      v13 = (uint64_t *)FrameDependencies;
      v14 = 0;
      v15 = 0;
      v16 = 8 * v12;
      do
      {
        v17 = *v13;
        v22 = *v13;
        if (v15 == (_DWORD)v24)
        {
          v18 = WTF::Vector<WTF::Ref<WebCore::AcceleratedEffect,WTF::RawPtrTraits<WebCore::AcceleratedEffect>,WTF::DefaultRefDerefTraits<WebCore::AcceleratedEffect>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((char **)&v23, v15 + 1, (unint64_t)&v22);
          v15 = HIDWORD(v24);
          v14 = v23;
          *((_QWORD *)v23 + HIDWORD(v24)) = *(_QWORD *)v18;
        }
        else
        {
          *((_QWORD *)v14 + v15) = v17;
        }
        HIDWORD(v24) = ++v15;
        ++v13;
        v16 -= 8;
      }
      while (v16);
      v19 = v24;
    }
    else
    {
      v15 = 0;
      v19 = 0;
      v14 = 0;
    }
    *(_QWORD *)a2 = v8 | v9;
    *(_BYTE *)(a2 + 8) = v10;
    v23 = 0;
    v24 = 0;
    *(_QWORD *)(a2 + 16) = v14;
    *(_DWORD *)(a2 + 24) = v19;
    *(_DWORD *)(a2 + 28) = v15;
    *(_WORD *)(a2 + 32) = webrtc::VideoFrameMetadata::GetWidth((webrtc::VideoFrameMetadata *)v25);
    *(_WORD *)(a2 + 34) = webrtc::VideoFrameMetadata::GetHeight((webrtc::VideoFrameMetadata *)v25);
    *(_DWORD *)(a2 + 36) = webrtc::VideoFrameMetadata::GetSpatialIndex((webrtc::VideoFrameMetadata *)v25);
    *(_BYTE *)(a2 + 40) = 1;
    *(_DWORD *)(a2 + 44) = webrtc::VideoFrameMetadata::GetTemporalIndex((webrtc::VideoFrameMetadata *)v25);
    *(_BYTE *)(a2 + 48) = 1;
    *(_DWORD *)(a2 + 52) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 40))(*((_QWORD *)this + 2));
    v21 = v23;
    if (v23)
    {
      v23 = 0;
      LODWORD(v24) = 0;
      WTF::fastFree(v21, v20);
    }
    if (__p)
    {
      v31 = __p;
      operator delete(__p);
    }
    if ((v28 & 1) != 0)
      operator delete(v29);
    if ((v26 & 1) != 0)
      operator delete(v27);
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 40) = 0;
    *(_BYTE *)(a2 + 44) = 0;
    *(_BYTE *)(a2 + 48) = 0;
    *(_DWORD *)(a2 + 52) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 29) = 0;
  }
}

void WebCore::LibWebRTCSctpTransportBackendObserver::OnStateChange(uint64_t a1, int *a2)
{
  unsigned int *v4;
  unsigned int v5;
  int v6;
  void (***v7)(_QWORD);
  uint64_t v8;
  __int128 v9;
  int v10;
  void (***v11)(_QWORD);
  _BYTE v12[21];
  uint64_t v13;

  v4 = (unsigned int *)(a1 + 8);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  v6 = *a2;
  v10 = *a2;
  v7 = (void (***)(_QWORD))*((_QWORD *)a2 + 1);
  v11 = v7;
  if (v7)
    (**v7)(v7);
  *(_OWORD *)v12 = *((_OWORD *)a2 + 1);
  *(_QWORD *)&v12[13] = *(_QWORD *)((char *)a2 + 29);
  v8 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v8 = off_1E3364298;
  *(_QWORD *)(v8 + 8) = a1;
  *(_DWORD *)(v8 + 16) = v6;
  *(_QWORD *)(v8 + 24) = v7;
  if (v7)
    (**v7)(v7);
  v9 = *(_OWORD *)v12;
  *(_QWORD *)(v8 + 45) = *(_QWORD *)&v12[13];
  *(_OWORD *)(v8 + 32) = v9;
  WTF::callOnMainThread();
  v13 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  webrtc::SctpTransportInformation::~SctpTransportInformation((webrtc::SctpTransportInformation *)&v10);
}

void WebCore::LibWebRTCSctpTransportBackend::~LibWebRTCSctpTransportBackend(WebCore::LibWebRTCSctpTransportBackend *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  char v25;
  _QWORD v26[2];
  uint64_t (*v27)(char, uint64_t *, uint64_t *);
  uint64_t (*v28)(_QWORD *);

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    v4 = *(unsigned int **)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
    v7 = (unsigned int *)(v3 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v9 = &off_1E3364270;
    v9[1] = v3;
    v26[0] = v9;
    v27 = absl::internal_any_invocable::LocalManagerNontrivial<WTF::Function<void ()(void)>>;
    v28 = absl::internal_any_invocable::LocalInvoker<false,void,WTF::Function<void ()(void)> &&>;
    (*(void (**)(_QWORD, _QWORD *, char *, char *))(*(_QWORD *)WebCore::staticFactoryAndThreads(void)::factoryAndThreads
                                                             + 8))(WebCore::staticFactoryAndThreads(void)::factoryAndThreads, v26, &v25, &v24);
    v27(1, v26, v26);
    v10 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v10)
    {
      v11 = (unsigned int *)(v10 + 8);
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, (unsigned int *)(v10 + 8));
        v14 = *(unsigned int **)(v10 + 24);
        *(_QWORD *)(v10 + 24) = 0;
        if (v14)
        {
          do
          {
            v15 = __ldaxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
          {
            atomic_store(1u, v14);
            WTF::fastFree((WTF *)v14, a2);
          }
        }
        v17 = *(_QWORD *)(v10 + 16);
        if (v17)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        WTF::fastFree((WTF *)v10, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  v18 = *((_QWORD *)this + 3);
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *((_QWORD *)this + 2);
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *((_QWORD *)this + 1);
  if (v20)
  {
    *(_QWORD *)(v20 + 8) = 0;
    v21 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v21)
    {
      do
      {
        v22 = __ldaxr(v21);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v21));
      if (!v23)
      {
        atomic_store(1u, v21);
        WTF::fastFree((WTF *)v21, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::LibWebRTCSctpTransportBackend::~LibWebRTCSctpTransportBackend(this, a2);
  WTF::fastFree(v2, v3);
}

_QWORD *WebCore::LibWebRTCSctpTransportBackend::dtlsTransportBackend@<X0>(WebCore::LibWebRTCSctpTransportBackend *this@<X0>, _QWORD *a2@<X8>)
{
  void (***v3)(_QWORD);
  _QWORD *result;

  v3 = (void (***)(_QWORD))*((_QWORD *)this + 3);
  if (v3)
    (**v3)(*((_QWORD *)this + 3));
  result = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *result = off_1E33626E0;
  result[1] = 0;
  result[2] = v3;
  result[3] = 0;
  *a2 = result;
  return result;
}

uint64_t WebCore::LibWebRTCSctpTransportBackend::registerClient(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void (***v6)(_QWORD);
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD *v19;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  char v26;
  _QWORD v27[2];
  uint64_t (*v28)(char, uint64_t *, uint64_t *);
  uint64_t (*v29)(_QWORD *);

  v5 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v5 + 8) = 1;
  *(_QWORD *)v5 = &off_1E3363928;
  v6 = *(void (****)(_QWORD))(a1 + 16);
  *(_QWORD *)(v5 + 16) = v6;
  if (v6)
    (**v6)(v6);
  v7 = *(_QWORD *)(a2 + 8);
  if (v7)
    goto LABEL_26;
  v7 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v7 = 1;
  *(_QWORD *)(v7 + 8) = a2;
  v8 = *(unsigned int **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v7;
  if (!v8)
    goto LABEL_26;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v4);
  }
  v7 = *(_QWORD *)(a2 + 8);
  if (v7)
  {
LABEL_26:
    do
      v11 = __ldaxr((unsigned int *)v7);
    while (__stlxr(v11 + 1, (unsigned int *)v7));
  }
  *(_QWORD *)(v5 + 24) = v7;
  v12 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  if (v12)
  {
    v13 = (unsigned int *)(v12 + 8);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, (unsigned int *)(v12 + 8));
      v21 = *(unsigned int **)(v12 + 24);
      *(_QWORD *)(v12 + 24) = 0;
      if (v21)
      {
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          WTF::fastFree((WTF *)v21, v4);
        }
      }
      v24 = *(_QWORD *)(v12 + 16);
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      WTF::fastFree((WTF *)v12, v4);
    }
  }
  v16 = *(_QWORD *)(a1 + 32);
  v17 = (unsigned int *)(v16 + 8);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 + 1, v17));
  v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v19 = &off_1E3364220;
  v19[1] = v16;
  v19[2] = v16;
  v27[0] = v19;
  v28 = absl::internal_any_invocable::LocalManagerNontrivial<WTF::Function<void ()(void)>>;
  v29 = absl::internal_any_invocable::LocalInvoker<false,void,WTF::Function<void ()(void)> &&>;
  (*(void (**)(_QWORD, _QWORD *, char *, char *))(*(_QWORD *)WebCore::staticFactoryAndThreads(void)::factoryAndThreads
                                                           + 8))(WebCore::staticFactoryAndThreads(void)::factoryAndThreads, v27, &v26, &v25);
  return v28(1, v27, v27);
}

uint64_t WebCore::LibWebRTCSctpTransportBackend::unregisterClient(WebCore::LibWebRTCSctpTransportBackend *this, void *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  _QWORD *v8;
  char v10;
  char v11;
  _QWORD v12[2];
  uint64_t (*v13)(char, uint64_t *, uint64_t *);
  uint64_t (*v14)(_QWORD *);

  v2 = *((_QWORD *)this + 4);
  v3 = *(unsigned int **)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = (unsigned int *)(v2 + 8);
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 + 1, v6));
  v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v8 = &off_1E3364270;
  v8[1] = v2;
  v12[0] = v8;
  v13 = absl::internal_any_invocable::LocalManagerNontrivial<WTF::Function<void ()(void)>>;
  v14 = absl::internal_any_invocable::LocalInvoker<false,void,WTF::Function<void ()(void)> &&>;
  (*(void (**)(_QWORD, _QWORD *, char *, char *))(*(_QWORD *)WebCore::staticFactoryAndThreads(void)::factoryAndThreads
                                                           + 8))(WebCore::staticFactoryAndThreads(void)::factoryAndThreads, v12, &v11, &v10);
  return v13(1, v12, v12);
}

uint64_t WebCore::RTCStatsReport::RtpStreamStats::RtpStreamStats(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  WTF::StringImpl **v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v17;

  v6 = *(_QWORD *)(a3 + 32);
  if ((unint64_t)(v6 + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL)
    v6 = 0;
  *(double *)a1 = WebCore::Performance::reduceTimeResolution((double)v6 / 1000.0 / 1000.0) * 1000.0;
  *(_DWORD *)(a1 + 8) = a2;
  WTF::String::fromUTF8();
  *(_QWORD *)(a1 + 32) = 0;
  v7 = (WTF::StringImpl **)(a1 + 32);
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  if (*(_BYTE *)(a3 + 44))
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a3 + 40);
  if (*(_BYTE *)(a3 + 72))
  {
    WTF::String::fromUTF8();
    v9 = v17;
    v17 = 0;
    v10 = *v7;
    *v7 = v9;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v8);
        v17 = 0;
      }
      else
      {
        *(_DWORD *)v10 -= 2;
      }
    }
  }
  if (*(_BYTE *)(a3 + 104))
  {
    WTF::String::fromUTF8();
    v12 = v17;
    v17 = 0;
    v13 = *(WTF::StringImpl **)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v12;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
      {
        WTF::StringImpl::destroy(v13, v11);
        v17 = 0;
      }
      else
      {
        *(_DWORD *)v13 -= 2;
      }
    }
  }
  if (*(_BYTE *)(a3 + 136))
  {
    WTF::String::fromUTF8();
    v15 = *(WTF::StringImpl **)(a1 + 48);
    *(_QWORD *)(a1 + 48) = v17;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  return a1;
}

uint64_t WebCore::RTCStatsReport::MediaSourceStats::MediaSourceStats(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v12;

  v4 = *(_QWORD *)(a2 + 32);
  if ((unint64_t)(v4 + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL)
    v4 = 0;
  *(double *)a1 = WebCore::Performance::reduceTimeResolution((double)v4 / 1000.0 / 1000.0) * 1000.0;
  *(_DWORD *)(a1 + 8) = 5;
  WTF::String::fromUTF8();
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v5 = (WTF::StringImpl **)(a1 + 24);
  *(_WORD *)(a1 + 40) = 0;
  if (*(_BYTE *)(a2 + 64))
  {
    WTF::String::fromUTF8();
    v7 = v12;
    v12 = 0;
    v8 = *v5;
    *v5 = v7;
    if (v8)
    {
      if (*(_DWORD *)v8 == 2)
      {
        WTF::StringImpl::destroy(v8, v6);
        v12 = 0;
      }
      else
      {
        *(_DWORD *)v8 -= 2;
      }
    }
  }
  if (*(_BYTE *)(a2 + 96))
  {
    WTF::String::fromUTF8();
    v10 = *(WTF::StringImpl **)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v12;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  return a1;
}

uint64_t WebCore::LibWebRTCStatsCollector::OnStatsDelivered(void (***a1)(_QWORD), uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  _QWORD *v6;
  unsigned int v7;
  uint64_t result;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;

  if (a1)
    (**a1)(a1);
  v4 = *a2;
  if (v4)
  {
    do
      v5 = __ldxr((unsigned int *)v4);
    while (__stxr(v5 + 1, (unsigned int *)v4));
  }
  v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v6 = &off_1E33642E8;
  v6[1] = a1;
  v6[2] = a1;
  v6[3] = v4;
  if (v4)
  {
    do
      v7 = __ldxr((unsigned int *)v4);
    while (__stxr(v7 + 1, (unsigned int *)v4));
  }
  v11 = v6;
  WTF::callOnMainThread();
  result = (uint64_t)v11;
  if (v11)
    result = (*(uint64_t (**)(_QWORD *))(*v11 + 8))(v11);
  if (v4)
  {
    do
    {
      v9 = __ldaxr((unsigned int *)v4);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, (unsigned int *)v4));
    if (!v10)
    {
      std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v4 + 16, *(char **)(v4 + 24));
      return MEMORY[0x19AEA7644](v4, 0x1020C4043D65406);
    }
  }
  return result;
}

_QWORD *WebCore::toRTCRtpParameters@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int8x16_t v16;
  int v17;
  int v18;
  unsigned __int16 v19;
  unsigned int v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  unsigned __int16 v24;
  unsigned int v25;
  char *v26;
  int v27;
  unsigned int v28;
  _QWORD *v29;
  char v30;
  uint64_t v31;
  BOOL v32;
  int8x16_t *v33;
  size_t v34;
  int8x16_t *v35;
  size_t v36;
  size_t v37;
  std::string::size_type size;
  uint64_t v39;
  char *v40;
  char *v41;
  __int16 v42;
  _BYTE *v43;
  _BYTE *v44;
  _BYTE *v45;
  _QWORD *v46;
  _QWORD *v47;
  char *v48;
  char *v49;
  char *v50;
  __int16 v51;
  int v52;
  uint64_t v53;
  char *v54;
  int8x16_t v55;
  int8x16_t v56;
  __n128 v57;
  __n128 v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  int8x16_t v63;
  int8x16_t v64;
  char *v65;
  char *v66;
  char *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  WTF::StringImpl **v75;
  WTF::StringImpl **v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  WTF::StringImpl *v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  __n128 v85;
  int8x16_t v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  __int16 v90;
  WTF::StringImpl *v91;
  std::string __p;
  _QWORD v93[2];
  int8x16x2_t v94;
  int8x16x2_t v95;
  int8x16x2_t v96;
  int8x16x2_t v97;
  int8x16x2_t v98;
  int8x16x2_t v99;
  int8x16x2_t v100;

  *(_QWORD *)(a2 + 32) = 0;
  v84 = (_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  *(_WORD *)(a2 + 24) = 0;
  v5 = this[9];
  v6 = this[10];
  v82 = this;
  while (v5 != v6)
  {
    WTF::String::fromUTF8();
    v87 = (WTF::StringImpl *)__p.__r_.__value_.__r.__words[0];
    v8 = *(_DWORD *)(v5 + 24);
    LOWORD(v88) = v8;
    v9 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v9 == *(_DWORD *)(a2 + 8))
    {
      v10 = WTF::Vector<WebCore::RTCRtpHeaderExtensionParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v9 + 1, (unint64_t)&v87);
      v9 = *(unsigned int *)(a2 + 12);
      v11 = *(_QWORD *)a2 + 16 * v9;
      v12 = *(_QWORD *)v10;
      *(_QWORD *)v10 = 0;
      *(_QWORD *)v11 = v12;
      *(_WORD *)(v11 + 8) = *(_WORD *)(v10 + 8);
    }
    else
    {
      v13 = *(_QWORD *)a2;
      v87 = 0;
      v14 = v13 + 16 * v9;
      *(_QWORD *)v14 = __p.__r_.__value_.__r.__words[0];
      *(_WORD *)(v14 + 8) = v8;
    }
    *(_DWORD *)(a2 + 12) = v9 + 1;
    this = v87;
    v87 = 0;
    if (this)
    {
      if (*(_DWORD *)this == 2)
        this = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v7);
      else
        *(_DWORD *)this -= 2;
    }
    v5 += 32;
  }
  v15 = v82[6];
  v83 = v82[7];
  if (v15 != v83)
  {
    v16 = 0uLL;
    do
    {
      v85 = a3;
      v86 = v16;
      v89 = 0;
      v90 = 1;
      v91 = 0;
      v17 = *(_DWORD *)(v15 + 104);
      LOWORD(v87) = v17;
      webrtc::RtpCodec::mime_type((webrtc::RtpCodec *)v15, &__p);
      WTF::String::fromUTF8();
      v88 = (WTF::StringImpl *)v93[0];
      v93[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (*(_BYTE *)(v15 + 40))
        v89 = *(int *)(v15 + 36);
      if (*(_BYTE *)(v15 + 48))
        v90 = *(_DWORD *)(v15 + 44);
      memset(&__p, 0, 20);
      v18 = 8;
      v19 = v17;
      __p.__r_.__value_.__s.__data_[20] = 1;
      do
      {
        v20 = v19;
        v19 /= 0xAu;
        ++v18;
      }
      while (v20 > 9);
      v21 = (_DWORD *)MEMORY[0x19AEA4824](&__p);
      if (v21)
      {
        v23 = 0;
        *(_DWORD *)((char *)v21 + 3) = 980448365;
        *v21 = 1835416929;
        v24 = v17;
        do
        {
          v25 = v24;
          *((_BYTE *)v93 + v23-- + 6) = (v24 % 0xAu) | 0x30;
          v24 /= 0xAu;
        }
        while (v25 > 9);
        v26 = (char *)v21 + 7;
        if (v23 + 8 <= 7)
          memcpy((char *)v21 + 7, (char *)v93 + v23 + 7, -v23);
        v27 = 0;
        do
        {
          ++v27;
          v28 = (unsigned __int16)v17;
          LOWORD(v17) = (unsigned __int16)v17 / 0xAu;
        }
        while (v28 > 9);
        v26[v27] = 32;
      }
      v29 = *(_QWORD **)(v15 + 80);
      if (v29 != (_QWORD *)(v15 + 88))
      {
        v30 = 1;
        do
        {
          if ((v30 & 1) == 0)
          {
            LOBYTE(v93[0]) = 59;
            if (__p.__r_.__value_.__l.__size_
              && ((v31 = LODWORD(__p.__r_.__value_.__r.__words[2]),
                   LODWORD(__p.__r_.__value_.__r.__words[2]) < *(_DWORD *)(__p.__r_.__value_.__l.__size_ + 4))
                ? (v32 = __p.__r_.__value_.__r.__words[0] == 0)
                : (v32 = 0),
                  v32))
            {
              v52 = *(_DWORD *)(__p.__r_.__value_.__l.__size_ + 16);
              v53 = *(_QWORD *)(__p.__r_.__value_.__l.__size_ + 8);
              ++LODWORD(__p.__r_.__value_.__r.__words[2]);
              if ((v52 & 4) != 0)
                *(_BYTE *)(v53 + v31) = 59;
              else
                *(_WORD *)(v53 + 2 * v31) = 59;
            }
            else
            {
              WTF::StringBuilder::append();
            }
          }
          v33 = (int8x16_t *)(v29 + 4);
          if (*((char *)v29 + 55) < 0 && (v33 = (int8x16_t *)v33->i64[0]) == 0)
            v34 = 0;
          else
            v34 = strlen(v33->i8);
          v35 = (int8x16_t *)(v29 + 7);
          v36 = v34 >> 31;
          if (*((char *)v29 + 79) < 0 && (v35 = (int8x16_t *)v35->i64[0]) == 0)
          {
            if (v36)
              goto LABEL_112;
            v35 = 0;
            v37 = 0;
          }
          else if (v36 || (v37 = strlen(v35->i8), v37 >> 31))
          {
LABEL_112:
            __break(0xC471u);
            JUMPOUT(0x1954C95A4);
          }
          size = __p.__r_.__value_.__l.__size_;
          if ((__p.__r_.__value_.__l.__size_ || (size = __p.__r_.__value_.__r.__words[0]) != 0)
            && (*(_BYTE *)(size + 16) & 4) == 0)
          {
            v39 = WTF::StringBuilder::extendBufferForAppendingWithUpconvert((WTF::StringBuilder *)&__p);
            if (v39)
            {
              if ((v34 & 0xFFFFFFC0) != 0)
              {
                v40 = (char *)(v39 + 2 * (v34 & 0xFFFFFFC0));
                v54 = (char *)v39;
                v55 = v86;
                do
                {
                  v94.val[0] = *v33;
                  v56 = v33[1];
                  v96.val[0] = v33[2];
                  v57 = (__n128)v33[3];
                  v33 += 4;
                  v58 = v57;
                  v96.val[1] = v86;
                  v98.val[0] = v56;
                  v94.val[1] = v86;
                  v59 = v54;
                  vst2q_s8(v59, v94);
                  v59 += 32;
                  v98.val[1] = v86;
                  vst2q_s8(v59, v98);
                  v60 = v54 + 64;
                  vst2q_s8(v60, v96);
                  v61 = v54 + 96;
                  vst2q_s8(v61, *(int8x16x2_t *)(&v55 - 1));
                  v54 += 128;
                }
                while (v54 != v40);
                v85 = v58;
              }
              else
              {
                v40 = (char *)v39;
              }
              v41 = (char *)(v39 + 2 * v34);
              while (v40 != v41)
              {
                v42 = v33->u8[0];
                v33 = (int8x16_t *)((char *)v33 + 1);
                *(_WORD *)v40 = v42;
                v40 += 2;
              }
              *(_WORD *)v41 = 61;
              v48 = v41 + 2;
              if ((v37 & 0x7FFFFFC0) != 0)
              {
                v49 = &v48[2 * (v37 & 0x7FFFFFC0)];
                v62 = v48;
                do
                {
                  v95.val[0] = *v35;
                  v63 = v35[1];
                  v97.val[0] = v35[2];
                  v64 = v35[3];
                  v35 += 4;
                  v99.val[0] = v64;
                  v97.val[1] = v86;
                  v100.val[0] = v63;
                  v95.val[1] = v86;
                  v65 = v62;
                  vst2q_s8(v65, v95);
                  v65 += 32;
                  v99.val[1] = v86;
                  v100.val[1] = v86;
                  vst2q_s8(v65, v100);
                  v66 = v62 + 64;
                  vst2q_s8(v66, v97);
                  v67 = v62 + 96;
                  v62 += 128;
                  vst2q_s8(v67, v99);
                }
                while (v62 != v49);
              }
              else
              {
                v49 = v48;
              }
              v50 = &v48[2 * v37];
              while (v49 != v50)
              {
                v51 = v35->u8[0];
                v35 = (int8x16_t *)((char *)v35 + 1);
                *(_WORD *)v49 = v51;
                v49 += 2;
              }
            }
          }
          else
          {
            v43 = (_BYTE *)MEMORY[0x19AEA4824](&__p);
            if (v43)
            {
              v44 = v43;
              if ((_DWORD)v34)
              {
                if ((_DWORD)v34 == 1)
                  *v43 = v33->i8[0];
                else
                  memcpy(v43, v33, v34);
              }
              v44[v34] = 61;
              v45 = &v44[v34 + 1];
              if ((_DWORD)v37)
              {
                if ((_DWORD)v37 == 1)
                  *v45 = v35->i8[0];
                else
                  memcpy(v45, v35, v37);
              }
            }
          }
          v46 = (_QWORD *)v29[1];
          if (v46)
          {
            do
            {
              v47 = v46;
              v46 = (_QWORD *)*v46;
            }
            while (v46);
          }
          else
          {
            do
            {
              v47 = (_QWORD *)v29[2];
              v32 = *v47 == (_QWORD)v29;
              v29 = v47;
            }
            while (!v32);
          }
          v30 = 0;
          v29 = v47;
        }
        while (v47 != (_QWORD *)(v15 + 88));
      }
      v68 = (WTF::StringImpl *)__p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__r.__words[0]
        || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&__p),
            WTF::StringBuilder::reifyString((WTF::StringBuilder *)&__p),
            (v68 = (WTF::StringImpl *)__p.__r_.__value_.__r.__words[0]) != 0))
      {
        *(_DWORD *)v68 += 2;
      }
      v91 = v68;
      v69 = (WTF::StringImpl *)__p.__r_.__value_.__l.__size_;
      __p.__r_.__value_.__l.__size_ = 0;
      if (v69)
      {
        if (*(_DWORD *)v69 == 2)
          WTF::StringImpl::destroy(v69, v22);
        else
          *(_DWORD *)v69 -= 2;
      }
      v70 = (WTF::StringImpl *)__p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = 0;
      if (v70)
      {
        if (*(_DWORD *)v70 == 2)
          WTF::StringImpl::destroy(v70, v22);
        else
          *(_DWORD *)v70 -= 2;
      }
      v71 = *(unsigned int *)(a2 + 44);
      if ((_DWORD)v71 == *(_DWORD *)(a2 + 40))
      {
        v72 = WTF::Vector<WebCore::RTCRtpCodecParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v84, v71 + 1, (unint64_t)&v87);
        v73 = *(_QWORD *)(a2 + 32) + 40 * *(unsigned int *)(a2 + 44);
        *(_WORD *)v73 = *(_WORD *)v72;
        v74 = *(_QWORD *)(v72 + 8);
        *(_QWORD *)(v72 + 8) = 0;
        *(_QWORD *)(v73 + 8) = v74;
        LOWORD(v74) = *(_WORD *)(v72 + 24);
        *(_QWORD *)(v73 + 16) = *(_QWORD *)(v72 + 16);
        *(_WORD *)(v73 + 24) = v74;
        v75 = (WTF::StringImpl **)(v73 + 32);
        v76 = (WTF::StringImpl **)(v72 + 32);
      }
      else
      {
        v77 = *v84 + 40 * v71;
        *(_WORD *)v77 = (_WORD)v87;
        v78 = v88;
        v88 = 0;
        *(_QWORD *)(v77 + 8) = v78;
        v79 = v89;
        *(_WORD *)(v77 + 24) = v90;
        *(_QWORD *)(v77 + 16) = v79;
        v75 = (WTF::StringImpl **)(v77 + 32);
        v76 = &v91;
      }
      a3 = v85;
      v16 = v86;
      v80 = *v76;
      *v76 = 0;
      *v75 = v80;
      ++*(_DWORD *)(a2 + 44);
      v81 = v91;
      v91 = 0;
      if (v81)
      {
        if (*(_DWORD *)v81 == 2)
        {
          WTF::StringImpl::destroy(v81, v22);
          a3 = v85;
          v16 = v86;
        }
        else
        {
          *(_DWORD *)v81 -= 2;
        }
      }
      this = v88;
      v88 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
        {
          this = (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v22);
          a3 = v85;
          v16 = v86;
        }
        else
        {
          *(_DWORD *)this -= 2;
        }
      }
      v15 += 112;
    }
    while (v15 != v83);
  }
  *(_WORD *)(a2 + 24) = *((unsigned __int8 *)v82 + 152) | 0x100;
  return this;
}

uint64_t WebCore::toRTCRtpSendParameters@<X0>(WebCore *this@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t result;
  unsigned int *v15;
  unsigned int *v16;
  WTF::StringImpl *v17;
  double v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  WTF::StringImpl *v39;

  WebCore::toRTCRtpParameters(this, (uint64_t)&v34, a3);
  v6 = v34;
  v34 = 0;
  *(_QWORD *)a2 = v6;
  v7 = v35;
  *(_QWORD *)&v35 = 0;
  *(_QWORD *)(a2 + 8) = v7;
  v8 = (WTF::StringImpl *)*((_QWORD *)&v35 + 1);
  *(_WORD *)(a2 + 24) = v36;
  v9 = *((_QWORD *)&v36 + 1);
  *((_QWORD *)&v35 + 1) = 0;
  *((_QWORD *)&v36 + 1) = 0;
  *(_QWORD *)(a2 + 32) = v9;
  v10 = v37;
  *(_QWORD *)&v37 = 0;
  *(_QWORD *)(a2 + 40) = v10;
  *(_BYTE *)(a2 + 76) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  WebCore::RTCRtpParameters::~RTCRtpParameters((WebCore::RTCRtpParameters *)&v34, v11);
  WTF::String::fromUTF8();
  v13 = v34;
  v34 = 0;
  *(_QWORD *)(a2 + 16) = v13;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
    {
      WTF::StringImpl::destroy(v8, v12);
      v33 = v34;
      v34 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, v32);
        else
          *(_DWORD *)v33 -= 2;
      }
    }
    else
    {
      *(_DWORD *)v8 -= 2;
    }
  }
  result = WTF::String::fromUTF8();
  v15 = (unsigned int *)*((_QWORD *)this + 12);
  v16 = (unsigned int *)*((_QWORD *)this + 13);
  if (v15 == v16)
  {
LABEL_30:
    if (*((_BYTE *)this + 164))
    {
      v31 = *((int *)this + 40);
      if (v31 <= 3)
      {
        *(_DWORD *)(a2 + 72) = dword_1968DED60[v31];
        *(_BYTE *)(a2 + 76) = 1;
      }
    }
  }
  else
  {
    while (1)
    {
      BYTE8(v36) = 0;
      BYTE12(v36) = 0;
      *(_QWORD *)&v35 = 0;
      *(_WORD *)((char *)&v37 + 1) = 1;
      BYTE3(v37) = 0;
      *((_QWORD *)&v37 + 1) = 0;
      *(_QWORD *)&v38 = 0;
      *((_QWORD *)&v38 + 1) = 0x3FF0000000000000;
      if (*((_BYTE *)v15 + 4))
        *(_QWORD *)&v35 = *v15;
      LOBYTE(v37) = *((_BYTE *)v15 + 124);
      if (*((_BYTE *)v15 + 24))
        *((_QWORD *)&v37 + 1) = (int)v15[5];
      if (*((_BYTE *)v15 + 48))
        *(_QWORD *)&v38 = (unint64_t)*((double *)v15 + 5);
      WTF::String::fromUTF8();
      v34 = v39;
      if (*((_BYTE *)v15 + 72))
        *((_QWORD *)&v38 + 1) = *((_QWORD *)v15 + 8);
      v18 = *((double *)v15 + 1);
      if (v18 >= 0.7)
      {
        if (v18 >= 1.5)
          v19 = v18 >= 2.5 ? 3 : 2;
        else
          v19 = 1;
      }
      else
      {
        v19 = 0;
      }
      BYTE1(v37) = v19;
      if (v15[4] >= 4)
        break;
      WORD1(v37) = v15[4] | 0x100;
      v20 = *(unsigned int *)(a2 + 68);
      if ((_DWORD)v20 == *(_DWORD *)(a2 + 64))
      {
        v21 = WTF::Vector<WebCore::RTCRtpEncodingParameters,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2 + 56, v20 + 1, (unint64_t)&v34);
        v22 = *(_QWORD *)(a2 + 56) + 72 * *(unsigned int *)(a2 + 68);
        v23 = *(_QWORD *)v21;
        *(_QWORD *)v21 = 0;
        *(_QWORD *)v22 = v23;
        v24 = *(_OWORD *)(v21 + 56);
        v25 = *(_OWORD *)(v21 + 40);
        v26 = *(_OWORD *)(v21 + 24);
        *(_OWORD *)(v22 + 8) = *(_OWORD *)(v21 + 8);
        *(_OWORD *)(v22 + 24) = v26;
        *(_OWORD *)(v22 + 40) = v25;
        *(_OWORD *)(v22 + 56) = v24;
      }
      else
      {
        v27 = *(_QWORD *)(a2 + 56) + 72 * v20;
        v34 = 0;
        *(_QWORD *)v27 = v39;
        v28 = v35;
        v29 = v36;
        v30 = v37;
        *(_OWORD *)(v27 + 56) = v38;
        *(_OWORD *)(v27 + 40) = v30;
        *(_OWORD *)(v27 + 24) = v29;
        *(_OWORD *)(v27 + 8) = v28;
      }
      ++*(_DWORD *)(a2 + 68);
      result = (uint64_t)v34;
      v34 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v17);
        else
          *(_DWORD *)result -= 2;
      }
      v15 += 68;
      if (v15 == v16)
        goto LABEL_30;
    }
    result = 82;
    __break(0xC471u);
  }
  return result;
}

WTF *WebCore::updateRTCRtpSendParameters(uint64_t *a1, uint64_t a2)
{
  void *v4;
  WTF *v5;
  unint64_t v6;
  WTF *result;
  WTF *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t i;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  WTF *v31;
  unint64_t v32;
  char *v33;
  __int128 v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  std::string *v42;
  char *v43;
  char *v44;
  std::string::value_type *v45;
  unint64_t v46;
  std::string *v47;
  const std::string::value_type **v48;
  __int128 v49;
  char *v50;
  int v51;
  char *v52;
  int v53;
  char v54;
  int v55;
  int v56;
  void *v57;
  std::string v58;
  int v59;
  char v60;
  WTF *v61;

  WTF::String::utf8();
  if (!v58.__r_.__value_.__r.__words[0])
    goto LABEL_94;
  std::string::__assign_external((std::string *)a2, (const std::string::value_type *)(v58.__r_.__value_.__r.__words[0] + 16));
  v5 = (WTF *)v58.__r_.__value_.__r.__words[0];
  v58.__r_.__value_.__r.__words[0] = 0;
  if (*(_DWORD *)v5 == 1)
    WTF::fastFree(v5, v4);
  else
    --*(_DWORD *)v5;
  v6 = *((unsigned int *)a1 + 17);
  v8 = *(WTF **)(a2 + 96);
  result = *(WTF **)(a2 + 104);
  if (0xF0F0F0F0F0F0F0F1 * ((result - v8) >> 4) != v6)
  {
    while (result != v8)
      result = (WTF *)MEMORY[0x19AEA5CD0]((char *)result - 272);
    *(_QWORD *)(a2 + 104) = v8;
    return result;
  }
  if (*((_DWORD *)a1 + 17))
  {
    v9 = 0;
    v10 = 0;
    v11 = 64;
    while (1)
    {
      if (0xF0F0F0F0F0F0F0F1 * ((result - v8) >> 4) <= v10)
        goto LABEL_94;
      v12 = a1[7] + v9;
      v13 = (char *)v8 + v11;
      *((_BYTE *)v8 + v11 + 60) = *(_BYTE *)(v12 + 40);
      v14 = *(_QWORD *)(v12 + 48);
      if (v14)
      {
        if (!*(v13 - 40))
          *(v13 - 40) = 1;
        *((_DWORD *)v13 - 11) = v14;
        v6 = *((unsigned int *)a1 + 17);
      }
      if (v10 >= v6)
      {
        __break(0xC471u);
        JUMPOUT(0x1954C9ED0);
      }
      v15 = *(_QWORD *)(a1[7] + v9 + 56);
      if (v15)
      {
        v16 = *(_QWORD *)(a2 + 96);
        if (0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(a2 + 104) - v16) >> 4) <= v10)
          goto LABEL_94;
        v17 = v16 + v11;
        if (!*(_BYTE *)(v17 - 16))
          *(_BYTE *)(v17 - 16) = 1;
        *(double *)(v17 - 24) = (double)v15;
        v6 = *((unsigned int *)a1 + 17);
      }
      if (v10 >= v6)
      {
        __break(0xC471u);
        JUMPOUT(0x1954C9ED8);
      }
      v18 = *(double *)(a1[7] + v9 + 64);
      if (v18 != 0.0)
      {
        v19 = *(_QWORD *)(a2 + 96);
        if (0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(a2 + 104) - v19) >> 4) <= v10)
          goto LABEL_94;
        v20 = v19 + v11;
        *(double *)v20 = v18;
        *(_BYTE *)(v20 + 8) = 1;
        v6 = *((unsigned int *)a1 + 17);
      }
      if (v10 >= v6)
        break;
      v21 = a1[7];
      v22 = *(char *)(v21 + v9 + 41);
      if (v22 >= 4)
        goto LABEL_95;
      v8 = *(WTF **)(a2 + 96);
      result = *(WTF **)(a2 + 104);
      if (0xF0F0F0F0F0F0F0F1 * ((result - v8) >> 4) <= v10)
        goto LABEL_94;
      *(_QWORD *)((char *)v8 + v11 - 56) = qword_1968DED70[v22];
      v23 = v21 + v9;
      if (*(_BYTE *)(v23 + 43))
      {
        v24 = *(unsigned __int8 *)(v23 + 42);
        if (v24 >= 4)
        {
          __break(0xC471u);
          JUMPOUT(0x1954C9EC0);
        }
        *(_DWORD *)((char *)v8 + v11 - 48) = v24;
      }
      ++v10;
      v11 += 272;
      v9 += 72;
      if (v10 >= v6)
        goto LABEL_30;
    }
    __break(0xC471u);
LABEL_102:
    JUMPOUT(0x1954C9EA0);
  }
LABEL_30:
  v26 = *(_QWORD *)(a2 + 72);
  for (i = *(_QWORD *)(a2 + 80); i != v26; webrtc::RtpExtension::~RtpExtension((webrtc::RtpExtension *)(i - 32)))
    ;
  *(_QWORD *)(a2 + 80) = v26;
  v27 = *((unsigned int *)a1 + 3);
  if ((_DWORD)v27)
  {
    v28 = *a1;
    v29 = *a1 + 16 * v27;
    while (1)
    {
      webrtc::RtpExtension::RtpExtension((webrtc::RtpExtension *)&v58);
      WTF::String::utf8();
      if (!v61)
        break;
      std::string::__assign_external(&v58, (const std::string::value_type *)v61 + 16);
      v31 = v61;
      v61 = 0;
      if (v31)
      {
        if (*(_DWORD *)v31 == 1)
          WTF::fastFree(v31, v30);
        else
          --*(_DWORD *)v31;
      }
      v59 = *(unsigned __int16 *)(v28 + 8);
      v33 = *(char **)(a2 + 80);
      v32 = *(_QWORD *)(a2 + 88);
      if ((unint64_t)v33 >= v32)
      {
        v35 = *(char **)(a2 + 72);
        v36 = (v33 - v35) >> 5;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 59)
          abort();
        v38 = v32 - (_QWORD)v35;
        if (v38 >> 4 > v37)
          v37 = v38 >> 4;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFE0)
          v39 = 0x7FFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (!v39)
          break;
        if (v39 >> 59)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v40 = (char *)operator new(32 * v39);
        v41 = v40;
        v42 = (std::string *)&v40[32 * v36];
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v40[32 * v36], v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
          v35 = *(char **)(a2 + 72);
          v33 = *(char **)(a2 + 80);
        }
        else
        {
          *v42 = v58;
        }
        v43 = &v41[32 * v39];
        v44 = &v41[32 * v36];
        *((_DWORD *)v44 + 6) = v59;
        v44[28] = v60;
        v45 = &v42[1].__r_.__value_.__s.__data_[8];
        if (v33 == v35)
        {
          *(_QWORD *)(a2 + 72) = v42;
          *(_QWORD *)(a2 + 80) = v45;
          *(_QWORD *)(a2 + 88) = v43;
        }
        else
        {
          v46 = 0;
          do
          {
            v47 = (std::string *)((char *)v42 + v46 - 32);
            v48 = (const std::string::value_type **)&v33[v46 - 32];
            if (v33[v46 - 9] < 0)
            {
              std::string::__init_copy_ctor_external(v47, *v48, *(_QWORD *)&v33[v46 - 24]);
            }
            else
            {
              v49 = *(_OWORD *)v48;
              v42->__r_.__value_.__r.__words[v46 / 8 - 2] = *(_QWORD *)&v33[v46 - 16];
              *(_OWORD *)&v47->__r_.__value_.__l.__data_ = v49;
            }
            v50 = (char *)v42 + v46;
            v51 = *(_DWORD *)&v33[v46 - 8];
            *(v50 - 4) = v33[v46 - 4];
            *((_DWORD *)v50 - 2) = v51;
            v46 -= 32;
          }
          while (&v33[v46] != v35);
          v35 = *(char **)(a2 + 72);
          v52 = *(char **)(a2 + 80);
          *(_QWORD *)(a2 + 72) = (char *)v42 + v46;
          *(_QWORD *)(a2 + 80) = v45;
          *(_QWORD *)(a2 + 88) = v43;
          while (v52 != v35)
            webrtc::RtpExtension::~RtpExtension((webrtc::RtpExtension *)(v52 - 32));
        }
        if (v35)
          operator delete(v35);
      }
      else
      {
        if (!v33)
          break;
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a2 + 80), v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
        }
        else
        {
          v34 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
          *((_QWORD *)v33 + 2) = *((_QWORD *)&v58.__r_.__value_.__l + 2);
          *(_OWORD *)v33 = v34;
        }
        v53 = v59;
        v33[28] = v60;
        *((_DWORD *)v33 + 6) = v53;
        v45 = v33 + 32;
      }
      *(_QWORD *)(a2 + 80) = v45;
      webrtc::RtpExtension::~RtpExtension((webrtc::RtpExtension *)&v58);
      v28 += 16;
      if (v28 == v29)
        goto LABEL_74;
    }
LABEL_94:
    __break(1u);
LABEL_95:
    __break(0xC471u);
    goto LABEL_102;
  }
LABEL_74:
  v54 = *((_BYTE *)a1 + 76);
  if (!v54)
  {
    *(_BYTE *)(a2 + 160) = 0;
    goto LABEL_84;
  }
  v55 = *((_DWORD *)a1 + 18);
  if (v55 == 2)
  {
    v56 = 3;
LABEL_83:
    *(_DWORD *)(a2 + 160) = v56;
    v54 = 1;
    goto LABEL_84;
  }
  if (v55 == 1)
  {
    v56 = 2;
    goto LABEL_83;
  }
  if (v55)
    goto LABEL_85;
  v54 = 1;
  *(_DWORD *)(a2 + 160) = 1;
LABEL_84:
  *(_BYTE *)(a2 + 164) = v54;
LABEL_85:
  result = (WTF *)(a1 + 2);
  if (*((_BYTE *)a1 + 25))
    *(_BYTE *)(a2 + 152) = *((_BYTE *)a1 + 24);
  if (*(_QWORD *)result)
  {
    WTF::String::utf8();
    if (!v58.__r_.__value_.__r.__words[0])
      goto LABEL_94;
    std::string::__assign_external((std::string *)(a2 + 128), (const std::string::value_type *)(v58.__r_.__value_.__r.__words[0] + 16));
    result = (WTF *)v58.__r_.__value_.__r.__words[0];
    v58.__r_.__value_.__r.__words[0] = 0;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        return (WTF *)WTF::fastFree(result, v57);
      else
        --*(_DWORD *)result;
    }
  }
  return result;
}

unint64_t WebCore::fromRtpTransceiverInit@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  char *v10;
  size_t v11;
  void *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v18;
  _QWORD *v19;
  __int128 v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  _QWORD *v31;
  int v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  void *__p[2];
  unint64_t v42;
  _DWORD *v43;
  char *v44;

  result = webrtc::RtpTransceiverInit::RtpTransceiverInit((webrtc::RtpTransceiverInit *)a3);
  if (*(_DWORD *)a1 >= 4u)
  {
    result = 325;
    __break(0xC471u);
    goto LABEL_71;
  }
  *(_DWORD *)a3 = *(_DWORD *)a1;
  v40 = a1;
  v6 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = v7 + 8 * v6;
    do
    {
      v9 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)v7 + 96) + 48);
      if (v9)
        *v9 += 2;
      v43 = v9;
      result = WTF::String::utf8();
      if (!v44)
        goto LABEL_71;
      v10 = v44 + 16;
      v11 = strlen(v44 + 16);
      if (v11 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_68;
      v13 = (char *)v11;
      if (v11 > 0x16)
      {
        v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v11 | 7) != 0x17)
          v14 = v11 | 7;
        v15 = v14 + 1;
        result = (unint64_t)operator new(v14 + 1);
        __p[1] = v13;
        v42 = v15 | 0x8000000000000000;
        __p[0] = (void *)result;
      }
      else
      {
        HIBYTE(v42) = v11;
        result = (unint64_t)__p;
      }
      v16 = &v13[result];
      if (result <= (unint64_t)v10 && v16 > v10)
        goto LABEL_71;
      if (v13)
        result = (unint64_t)memmove((void *)result, v10, (size_t)v13);
      *v16 = 0;
      v19 = (_QWORD *)a3[2];
      v18 = a3[3];
      if ((unint64_t)v19 >= v18)
      {
        v21 = (_QWORD *)a3[1];
        v22 = 0xAAAAAAAAAAAAAAABLL * (v19 - v21) + 1;
        if (v22 > 0xAAAAAAAAAAAAAAALL)
LABEL_68:
          abort();
        v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (_QWORD)v21) >> 3);
        if (2 * v23 > v22)
          v22 = 2 * v23;
        if (v23 >= 0x555555555555555)
          v24 = 0xAAAAAAAAAAAAAAALL;
        else
          v24 = v22;
        if (!v24)
          goto LABEL_71;
        if (v24 > 0xAAAAAAAAAAAAAAALL)
          std::__throw_bad_array_new_length[abi:sn180100]();
        v25 = 3 * v24;
        v26 = (char *)operator new(24 * v24);
        v27 = &v26[8 * v25];
        v28 = &v26[8 * (v19 - v21)];
        *(_OWORD *)v28 = *(_OWORD *)__p;
        *((_QWORD *)v28 + 2) = v42;
        __p[0] = 0;
        __p[1] = 0;
        v42 = 0;
        v29 = v28 + 24;
        if (v19 == v21)
        {
          a3[1] = (uint64_t)v28;
          a3[2] = (uint64_t)v29;
          a3[3] = (uint64_t)v27;
        }
        else
        {
          do
          {
            v30 = *(_OWORD *)(v19 - 3);
            *((_QWORD *)v28 - 1) = *(v19 - 1);
            *(_OWORD *)(v28 - 24) = v30;
            v28 -= 24;
            *(v19 - 2) = 0;
            *(v19 - 1) = 0;
            *(v19 - 3) = 0;
            v19 -= 3;
          }
          while (v19 != v21);
          v19 = (_QWORD *)a3[1];
          v31 = (_QWORD *)a3[2];
          a3[1] = (uint64_t)v28;
          a3[2] = (uint64_t)v29;
          a3[3] = (uint64_t)v27;
          while (v31 != v19)
          {
            if (*((char *)v31 - 1) < 0)
              operator delete((void *)*(v31 - 3));
            v31 -= 3;
          }
        }
        if (v19)
          operator delete(v19);
        v32 = SHIBYTE(v42);
        a3[2] = (uint64_t)v29;
        if (v32 < 0)
          operator delete(__p[0]);
      }
      else
      {
        if (!v19)
          goto LABEL_71;
        v20 = *(_OWORD *)__p;
        v19[2] = v42;
        *(_OWORD *)v19 = v20;
        __p[1] = 0;
        v42 = 0;
        __p[0] = 0;
        a3[2] = (uint64_t)(v19 + 3);
      }
      v33 = (WTF *)v44;
      v44 = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 1)
          WTF::fastFree(v33, v12);
        else
          --*(_DWORD *)v33;
      }
      result = (unint64_t)v43;
      v43 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v12);
        else
          *(_DWORD *)result -= 2;
      }
      v7 += 8;
    }
    while (v7 != v8);
  }
  if (!a2)
  {
    if (!*(_DWORD *)(v40 + 36))
      return result;
    WebCore::fromRTCEncodingParameters((uint64_t)__p, *(_QWORD *)(v40 + 24));
    result = a3[5];
    if (result >= a3[6])
    {
      v38 = std::vector<webrtc::RtpEncodingParameters>::__push_back_slow_path<webrtc::RtpEncodingParameters>(a3 + 4);
      goto LABEL_66;
    }
    if (result)
    {
      v38 = webrtc::RtpEncodingParameters::RtpEncodingParameters() + 272;
LABEL_66:
      a3[5] = v38;
      return MEMORY[0x19AEA5CD0](__p);
    }
LABEL_71:
    __break(1u);
    return result;
  }
  v34 = *(unsigned int *)(v40 + 36);
  if ((_DWORD)v34)
  {
    v35 = *(_QWORD *)(v40 + 24);
    v36 = 72 * v34;
    do
    {
      WebCore::fromRTCEncodingParameters((uint64_t)__p, v35);
      result = a3[5];
      if (result >= a3[6])
      {
        v37 = std::vector<webrtc::RtpEncodingParameters>::__push_back_slow_path<webrtc::RtpEncodingParameters>(a3 + 4);
      }
      else
      {
        if (!result)
          goto LABEL_71;
        v37 = webrtc::RtpEncodingParameters::RtpEncodingParameters() + 272;
      }
      a3[5] = v37;
      result = MEMORY[0x19AEA5CD0](__p);
      v35 += 72;
      v36 -= 72;
    }
    while (v36);
  }
  return result;
}

uint64_t WebCore::fromRTCEncodingParameters(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t result;
  double v9;
  unint64_t v10;
  unsigned int v11;
  std::string::value_type *v12;

  webrtc::RtpEncodingParameters::RtpEncodingParameters((webrtc::RtpEncodingParameters *)a1);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (!*(_BYTE *)(a1 + 4))
      *(_BYTE *)(a1 + 4) = 1;
    *(_DWORD *)a1 = v4;
  }
  *(_BYTE *)(a1 + 124) = *(_BYTE *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  if (v5)
  {
    if (!*(_BYTE *)(a1 + 24))
      *(_BYTE *)(a1 + 24) = 1;
    *(_DWORD *)(a1 + 20) = v5;
  }
  v6 = *(_QWORD *)(a2 + 56);
  if (v6)
  {
    if (!*(_BYTE *)(a1 + 48))
      *(_BYTE *)(a1 + 48) = 1;
    *(double *)(a1 + 40) = (double)v6;
  }
  WTF::String::utf8();
  if (!v12)
  {
    __break(1u);
    goto LABEL_25;
  }
  std::string::__assign_external((std::string *)(a1 + 128), v12 + 16);
  result = (uint64_t)v12;
  if (*(_DWORD *)v12 == 1)
    result = WTF::fastFree((WTF *)v12, v7);
  else
    --*(_DWORD *)v12;
  v9 = *(double *)(a2 + 64);
  if (v9 != 0.0)
  {
    *(double *)(a1 + 64) = v9;
    *(_BYTE *)(a1 + 72) = 1;
  }
  v10 = *(char *)(a2 + 41);
  if (v10 >= 4)
    goto LABEL_25;
  *(_QWORD *)(a1 + 8) = qword_1968DED70[v10];
  if (!*(_BYTE *)(a2 + 43))
    return result;
  v11 = *(unsigned __int8 *)(a2 + 42);
  if (v11 >= 4)
  {
LABEL_25:
    __break(0xC471u);
    JUMPOUT(0x1954CA3F0);
  }
  *(_DWORD *)(a1 + 16) = v11;
  return result;
}

uint64_t WebCore::convertIceCandidate@<X0>(WebCore *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  BOOL v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  int v19;
  int v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  void *__p;
  char v27;
  uint64_t v28;

  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 36) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 42) = 0;
  *(_BYTE *)(a2 + 44) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 52) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  *(_BYTE *)(a2 + 74) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  result = WTF::String::fromUTF8();
  *(_DWORD *)(a2 + 8) = *MEMORY[0x1E0DCDBE0] != *((_DWORD *)this + 6);
  *(_BYTE *)(a2 + 12) = 1;
  *(_DWORD *)(a2 + 16) = *((_DWORD *)this + 38);
  *(_BYTE *)(a2 + 20) = 1;
  v6 = (unsigned __int16 *)((char *)this + 32);
  if (*((char *)this + 55) < 0)
  {
    v7 = *((_QWORD *)this + 5);
    if (v7 < 0)
      goto LABEL_54;
    v6 = *(unsigned __int16 **)v6;
    if (v7)
    {
      if (!v6)
        goto LABEL_54;
    }
    if (!v7)
    {
      v8 = 0;
      goto LABEL_17;
    }
    if (!v6)
      goto LABEL_54;
  }
  else
  {
    v7 = *((unsigned __int8 *)this + 55);
    if (!*((_BYTE *)this + 55))
    {
      v8 = 0;
      LODWORD(v7) = 0;
      goto LABEL_17;
    }
  }
  if (v7 == 3 && ((v9 = *v6, v10 = *((unsigned __int8 *)v6 + 2), v9 == 25717) ? (v11 = v10 == 112) : (v11 = 0), v11))
  {
    LODWORD(v7) = 0;
    v8 = 0x100000000;
  }
  else
  {
    v8 = 0x100000000;
    LODWORD(v7) = 1;
  }
LABEL_17:
  *(_BYTE *)(a2 + 36) = BYTE4(v8);
  *(_DWORD *)(a2 + 32) = v7 | v8;
  result = rtc::SocketAddress::IsNil((WebCore *)((char *)this + 80));
  if ((result & 1) == 0)
  {
    rtc::SocketAddress::HostAsURIString((WebCore *)((char *)this + 80));
    WTF::String::fromUTF8();
    *(_QWORD *)(a2 + 24) = v28;
    v28 = 0;
    if (v27 < 0)
      operator delete(__p);
    result = rtc::SocketAddress::port((WebCore *)((char *)this + 80));
    *(_WORD *)(a2 + 40) = result;
    *(_BYTE *)(a2 + 42) = 1;
  }
  v12 = *((_DWORD *)this + 52);
  v13 = v12 < 4;
  if (v12 >= 4)
    v12 = 0;
  *(_DWORD *)(a2 + 44) = v12;
  *(_BYTE *)(a2 + 48) = v13;
  v14 = (char *)this + 352;
  v15 = *((unsigned __int8 *)this + 375);
  if (*((char *)this + 375) < 0)
  {
    v17 = *((_QWORD *)this + 45);
    if (v17 < 0)
      goto LABEL_54;
    v16 = *(char **)v14;
    if (v17)
    {
      if (!v16)
        goto LABEL_54;
    }
    if (!v17)
    {
LABEL_46:
      v24 = 0;
      v25 = 0;
      goto LABEL_49;
    }
    if (!v16)
    {
LABEL_54:
      __break(1u);
      return result;
    }
  }
  else
  {
    v16 = (char *)this + 352;
    v17 = *((unsigned __int8 *)this + 375);
    if (!*((_BYTE *)this + 375))
      goto LABEL_46;
  }
  if (v17 == 6)
  {
    v18 = *(_DWORD *)v16;
    v19 = *((unsigned __int16 *)v16 + 2);
    if (v18 == 1769235297 && v19 == 25974)
    {
      v25 = 0;
      v24 = 0x100000000;
      goto LABEL_49;
    }
  }
  if ((v15 & 0x80) != 0)
  {
    v15 = *((_QWORD *)this + 45);
    if (v15 < 0)
      goto LABEL_54;
    v14 = *(char **)v14;
    if (v15)
    {
      if (!v14)
        goto LABEL_54;
    }
  }
  if (v15 == 7
    && ((v21 = *(_DWORD *)v14, v22 = *(_DWORD *)(v14 + 3), v21 == 1936941424) ? (v23 = v22 == 1702259059) : (v23 = 0),
        v23))
  {
    v24 = 0x100000000;
    v25 = 1;
  }
  else
  {
    v24 = 0x100000000;
    v25 = 2;
  }
LABEL_49:
  *(_BYTE *)(a2 + 56) = BYTE4(v24);
  *(_DWORD *)(a2 + 52) = v25 | v24;
  if ((rtc::SocketAddress::IsNil((WebCore *)((char *)this + 280)) & 1) == 0)
  {
    rtc::SocketAddress::HostAsURIString((WebCore *)((char *)this + 280));
    WTF::String::fromUTF8();
    *(_QWORD *)(a2 + 64) = v28;
    if (v27 < 0)
      operator delete(__p);
    *(_WORD *)(a2 + 72) = rtc::SocketAddress::port((WebCore *)((char *)this + 280));
    *(_BYTE *)(a2 + 74) = 1;
  }
  result = WTF::String::fromUTF8();
  *(_QWORD *)(a2 + 80) = __p;
  return result;
}

WTF::StringImpl *WebCore::toRTCError@<X0>(WTF::StringImpl *this@<X0>, uint64_t *a2@<X8>)
{
  char v4;
  const char *v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v4 = 0;
  switch(*((_DWORD *)this + 8))
  {
    case 0:
    case 6:
    case 7:
      *a2 = 0;
      return this;
    case 1:
      goto LABEL_7;
    case 2:
      v4 = 1;
      goto LABEL_7;
    case 3:
      v4 = 2;
      goto LABEL_7;
    case 4:
      v4 = 3;
      goto LABEL_7;
    case 5:
      v4 = 4;
LABEL_7:
      v5 = (const char *)webrtc::RTCError::message(this);
      WTF::String::String((WTF::String *)&v10, v5);
      v6 = WTF::fastMalloc((WTF *)0x48);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_DWORD *)(v6 + 8) = 1;
      *(_QWORD *)v6 = off_1E334F098;
      *(_BYTE *)(v6 + 12) = 0;
      v8 = v11;
      if (v11)
        *(_DWORD *)v11 += 2;
      *(_QWORD *)(v6 + 16) = v8;
      v9 = v10;
      if (v10)
        *(_DWORD *)v10 += 2;
      *(_QWORD *)(v6 + 24) = v9;
      v11 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v7);
        else
          *(_DWORD *)v8 -= 2;
      }
      *(_QWORD *)v6 = off_1E3360DF0;
      *(_BYTE *)(v6 + 32) = v4;
      *(_BYTE *)(v6 + 36) = 0;
      *(_BYTE *)(v6 + 40) = 0;
      *(_BYTE *)(v6 + 44) = 0;
      *(_BYTE *)(v6 + 48) = 0;
      *(_BYTE *)(v6 + 52) = 0;
      *(_BYTE *)(v6 + 56) = 0;
      *(_BYTE *)(v6 + 60) = 0;
      *(_BYTE *)(v6 + 64) = 0;
      *a2 = v6;
      this = v10;
      v10 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v7);
        else
          *(_DWORD *)this -= 2;
      }
      return this;
    default:
      __break(0xC471u);
      JUMPOUT(0x1954CA8E8);
  }
}

void WebCore::HTMLModelElement::~HTMLModelElement(WebCore::HTMLModelElement *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  WebCore::CachedResource *v5;
  _DWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  void *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  WTF *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;

  v4 = (uint64_t *)((char *)this + 208);
  v3 = *((_QWORD *)this + 26);
  if (v3)
  {
    v5 = *(WebCore::CachedResource **)(v3 + 8);
    if (v5)
    {
      WebCore::CachedResource::removeClient(v5, (unsigned int **)this + 14);
      WebCore::CachedResourceHandleBase::setResource(v4, 0);
    }
  }
  v6 = (_DWORD *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 31) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = (uint64_t *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = 0;
  if (v7)
  {
    v8 = WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::HTMLModelElement>>::~DOMPromiseProxyWithResolveCallback(v7, a2);
    WTF::fastFree((WTF *)v8, v9);
  }
  v10 = (uint64_t *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
    {
      v23 = (WTF::StringImpl *)v10[3];
      v10[3] = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v23 -= 2;
      }
      v24 = (WTF::StringImpl *)v10[2];
      v10[2] = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v24 -= 2;
      }
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v10 + 1, a2);
      WTF::fastFree((WTF *)v10, v25);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  v11 = *((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v11)
  {
    do
    {
      v12 = __ldaxr((unsigned int *)v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, (unsigned int *)v11));
    if (!v13)
    {
      atomic_store(1u, (unsigned int *)v11);
      v26 = *(unsigned int *)(v11 + 20);
      if ((_DWORD)v26)
      {
        v27 = *(_QWORD *)(v11 + 8);
        v28 = v27 + 16 * v26;
        do
        {
          v29 = *(unsigned int **)(v27 + 8);
          *(_QWORD *)(v27 + 8) = 0;
          if (v29)
          {
            do
            {
              v30 = __ldaxr(v29);
              v31 = v30 - 1;
            }
            while (__stlxr(v31, v29));
            if (!v31)
            {
              v37 = v28;
              v38 = v27;
              v36 = v11;
              atomic_store(1u, v29);
              v32 = v29[6];
              if ((_DWORD)v32 != -1)
                ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_2[v32])(&v39, v29 + 2);
              v29[6] = -1;
              WTF::fastFree((WTF *)v29, a2);
              v11 = v36;
              v28 = v37;
              v27 = v38;
            }
          }
          v27 += 16;
        }
        while (v27 != v28);
      }
      v33 = *(WTF **)(v11 + 8);
      if ((WTF *)(v11 + 24) != v33 && v33 != 0)
      {
        *(_QWORD *)(v11 + 8) = 0;
        *(_DWORD *)(v11 + 16) = 0;
        v35 = v11;
        WTF::fastFree(v33, a2);
        v11 = v35;
      }
      WTF::fastFree((WTF *)v11, a2);
    }
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)v4, a2);
  v15 = (WTF::StringImpl *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::HTMLModelElement *)((char *)this + 144), v14);
  v17 = *((_QWORD *)this + 17);
  if (v17)
  {
    *(_QWORD *)(v17 + 8) = 0;
    v18 = (unsigned int *)*((_QWORD *)this + 17);
    *((_QWORD *)this + 17) = 0;
    if (v18)
    {
      do
      {
        v19 = __ldaxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
      {
        atomic_store(1u, v18);
        WTF::fastFree((WTF *)v18, v16);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 17) = 0;
  }
  *((_QWORD *)this + 14) = &off_1E33F87C8;
  v21 = *((_QWORD *)this + 15);
  if (v21)
  {
    *(_QWORD *)(v21 + 8) = 0;
    v22 = (WTF *)*((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
        WTF::fastFree(v22, v16);
      else
        --*(_DWORD *)v22;
    }
  }
  else
  {
    *((_QWORD *)this + 15) = 0;
  }
  WebCore::Element::~Element((uint64_t)this);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLModelElement::~HTMLModelElement(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::ModelPlayerClient::~ModelPlayerClient(WebCore::ModelPlayerClient *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      do
      {
        v5 = __ldaxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
      {
        atomic_store(1u, v4);
        WTF::fastFree((WTF *)v4, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

void `non-virtual thunk to'WebCore::HTMLModelElement::~HTMLModelElement(WebCore::HTMLModelElement *this, void *a2)
{
  WebCore::HTMLModelElement::~HTMLModelElement((WebCore::HTMLModelElement *)((char *)this - 112), a2);
}

{
  WebCore::HTMLModelElement::~HTMLModelElement((WebCore::HTMLModelElement *)((char *)this - 128), a2);
}

{
  WebCore::HTMLModelElement::~HTMLModelElement((WebCore::HTMLModelElement *)((char *)this - 144), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLModelElement::~HTMLModelElement((WebCore::HTMLModelElement *)((char *)this - 112), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLModelElement::~HTMLModelElement((WebCore::HTMLModelElement *)((char *)this - 128), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::HTMLModelElement::~HTMLModelElement((WebCore::HTMLModelElement *)((char *)this - 144), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

uint64_t WebCore::HTMLModelElement::create@<X0>(WebCore::HTMLModelElement *this@<X0>, const WebCore::QualifiedName *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  const WebCore::QualifiedName *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;

  v7 = bmalloc::api::isoAllocate();
  v8 = v7;
  *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v7 + 24) = 0x1C1C00000002;
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = (char *)a2 + 96;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  ++*((_DWORD *)a2 + 831);
  *(_QWORD *)(v7 + 80) = 0;
  *(_QWORD *)(v7 + 88) = 0;
  v9 = *(_DWORD **)this;
  if (*(_QWORD *)this)
    ++*v9;
  *(_QWORD *)(v7 + 96) = v9;
  *(_QWORD *)(v7 + 104) = 0;
  *(_QWORD *)v7 = off_1E33BC680;
  *(_QWORD *)(v7 + 112) = &off_1E3364178;
  *(_QWORD *)(v7 + 120) = 0;
  *(_QWORD *)(v7 + 128) = off_1E3364010;
  *(_QWORD *)(v7 + 136) = 0;
  v10 = *((_QWORD *)a2 + 88);
  if (v10)
  {
    v11 = *(const WebCore::QualifiedName **)(v10 + 8);
    if (v11)
      a2 = v11;
  }
  *(_QWORD *)(v7 + 144) = &off_1E33A18C0;
  *(_QWORD *)(v7 + 152) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)(v7 + 144), (const WebCore::QualifiedName *)((char *)a2 + 192));
  *(_QWORD *)(v8 + 144) = &off_1E33A0540;
  *(_QWORD *)(v8 + 160) = 0;
  if (*((_BYTE *)a2 + 470))
  {
    result = 422;
    __break(0xC471u);
  }
  else
  {
    v16 = v8 + 144;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)a2 + 40, &v16, (uint64_t)&v15);
    *(_QWORD *)v8 = off_1E33639C8;
    *(_QWORD *)(v8 + 112) = &unk_1E3363F00;
    *(_QWORD *)(v8 + 128) = &unk_1E3363F78;
    *(_QWORD *)(v8 + 144) = &unk_1E3363FB8;
    *(_QWORD *)(v8 + 168) = 0;
    WTF::URL::invalidate((WTF::URL *)(v8 + 168));
    *(_QWORD *)(v8 + 208) = 0;
    *(_QWORD *)(v8 + 216) = 0;
    *(_QWORD *)(v8 + 224) = 0;
    v12 = WTF::fastMalloc((WTF *)0x40);
    v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v13 = off_1E3364348;
    v13[1] = WebCore::HTMLModelElement::readyPromiseResolve;
    v13[2] = 0;
    v13[3] = v8;
    *(_QWORD *)v12 = v13;
    *(_BYTE *)(v12 + 8) = 0;
    *(_BYTE *)(v12 + 32) = 0;
    *(_QWORD *)(v12 + 40) = v12 + 56;
    *(_QWORD *)(v12 + 48) = 1;
    *(_QWORD *)(v8 + 232) = v12;
    *(_WORD *)(v8 + 240) = 0;
    *(_BYTE *)(v8 + 242) = 0;
    *(_QWORD *)(v8 + 248) = 0;
    *a3 = v8;
    return (uint64_t)WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)(v8 + 144));
  }
  return result;
}

uint64_t WebCore::HTMLModelElement::model@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;

  if (*(_BYTE *)(this + 240))
  {
    v2 = *(_DWORD **)(this + 224);
    if (v2)
      ++*v2;
  }
  else
  {
    v2 = 0;
  }
  *a2 = v2;
  return this;
}

WTF::StringImpl *WebCore::HTMLModelElement::selectModelSource@<X0>(WebCore::HTMLModelElement *this@<X0>, uint64_t a2@<X2>, WTF::String *a3@<X3>, WTF::URL *a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v6;
  WTF::StringImpl *result;
  WTF::StringImpl *v9;
  uint64_t v10;
  WTF::String *v11;
  __n128 v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;

  v6 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (!v6 || !*(_QWORD *)(v6 + 8))
  {
LABEL_11:
    *(_QWORD *)a4 = 0;
    return (WTF::StringImpl *)WTF::URL::invalidate(a4);
  }
  result = WebCore::Element::getNonEmptyURLAttribute(this, (const WebCore::QualifiedName *)&WebCore::HTMLNames::srcAttr, a2, a3, a4, a5);
  if ((*((_BYTE *)a4 + 8) & 1) == 0)
  {
    v13 = *(WTF::StringImpl **)a4;
    *(_QWORD *)a4 = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 2)
        WTF::StringImpl::destroy(v13, v9);
      else
        *(_DWORD *)v13 -= 2;
    }
    v14 = *((_QWORD *)this + 10);
    if (v14)
    {
      while ((*(_WORD *)(v14 + 28) & 0x10) == 0
           || *(_QWORD *)(*(_QWORD *)(v14 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::sourceTag + 24))
      {
        v14 = *(_QWORD *)(v14 + 56);
        if (!v14)
          goto LABEL_11;
      }
      v15 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      while (1)
      {
        v16 = *(_QWORD *)(v14 + 104);
        if (!v16)
          break;
        v17 = *(unsigned int *)(v16 + 4);
        if ((v17 & 1) != 0)
        {
          v18 = *(_QWORD *)(v16 + 40);
          v19 = *(unsigned int *)(v16 + 52);
          if (!v19)
            break;
        }
        else
        {
          v18 = v16 + 32;
          v19 = v17 >> 5;
          if (!(v17 >> 5))
            break;
        }
        v20 = (uint64_t *)(v18 + 8);
        while (1)
        {
          v21 = *(v20 - 1);
          if (v21 == WebCore::HTMLNames::typeAttr
            || *(_QWORD *)(v21 + 24) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 24)
            && *(_QWORD *)(v21 + 32) == *(_QWORD *)(WebCore::HTMLNames::typeAttr + 32))
          {
            break;
          }
          v20 += 2;
          if (!--v19)
            goto LABEL_25;
        }
LABEL_26:
        if (!*v20
          || !*(_DWORD *)(*v20 + 4)
          || WTF::SortedArraySet<WTF::ComparableASCIISubsetLiteral<(WTF::ASCIISubset)2> [4]>::contains<WTF::String>((char ***)WebCore::MIMETypeRegistry::isUSDMIMEType(WTF::String const&)::usdMIMETypeSet, v20))
        {
          result = WebCore::Element::getNonEmptyURLAttribute((WebCore::Element *)v14, (const WebCore::QualifiedName *)&WebCore::HTMLNames::srcAttr, v10, v11, a4, v12);
          if ((*((_BYTE *)a4 + 8) & 1) != 0)
            return result;
          v23 = *(WTF::StringImpl **)a4;
          *(_QWORD *)a4 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v22);
            else
              *(_DWORD *)v23 -= 2;
          }
        }
        v14 = *(_QWORD *)(v14 + 56);
        if (!v14)
          goto LABEL_11;
        while ((*(_WORD *)(v14 + 28) & 0x10) == 0
             || *(_QWORD *)(*(_QWORD *)(v14 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::sourceTag + 24))
        {
          v14 = *(_QWORD *)(v14 + 56);
          if (!v14)
            goto LABEL_11;
        }
      }
LABEL_25:
      v20 = v15;
      goto LABEL_26;
    }
    goto LABEL_11;
  }
  return result;
}

void WebCore::HTMLModelElement::setSourceURL(WebCore::HTMLModelElement *this, const WTF::URL *a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl *v5;
  WTF *v6;
  WTF::StringImpl *v7;
  __int128 v8;
  uint64_t v9;
  char *v10;
  WebCore::CachedResource *v11;
  _DWORD *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  uint64_t *v19;
  uint64_t *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  WTF::StringImpl *v40;
  __int128 v41;
  char v42;
  _DWORD *v43;
  void *v44;
  void *v45;
  WebCore::Node *v46;
  _QWORD *v47;
  WebCore *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  WTF::StringImpl *v55;
  uint64_t v56;
  WebCore::CachedResource *v57;
  WebCore::CachedResource *v58;
  WebCore::CachedResourceClient *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  char v68[8];
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  char v71[8];
  WTF::StringImpl *v72;
  char v73;
  _QWORD v74[10];
  unsigned int v75;
  WTF::StringImpl *v76;
  __int128 v77;
  __int128 v78;
  _QWORD v79[5];
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  int v85;
  char v86;
  uint64_t v87;
  _DWORD *v88;
  uint64_t v89;
  char v90;
  char v91;
  char v92;
  uint64_t v93;
  uint64_t v94[45];
  WebCore::Node *v95;
  _DWORD v96[2];
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int v103;
  int v104;
  char v105;
  __int16 v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;

  v112 = *MEMORY[0x1E0C80C00];
  if ((WTF::equal(*(WTF **)a2, *((const WTF::StringImpl **)this + 21), a3) & 1) != 0)
    return;
  v6 = *(WTF **)a2;
  if (*(_QWORD *)a2)
    *(_DWORD *)v6 += 2;
  v7 = (WTF::StringImpl *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = *(_OWORD *)((char *)a2 + 24);
  *((_OWORD *)this + 11) = *(_OWORD *)((char *)a2 + 8);
  *((_OWORD *)this + 12) = v8;
  WebCore::SharedBufferBuilder::reset((WebCore::HTMLModelElement *)((char *)this + 216), v5);
  v10 = (char *)this + 208;
  v9 = *((_QWORD *)this + 26);
  *((_BYTE *)this + 240) = 0;
  if (v9)
  {
    v11 = *(WebCore::CachedResource **)(v9 + 8);
    if (v11)
    {
      WebCore::CachedResource::removeClient(v11, (unsigned int **)this + 14);
      WebCore::CachedResourceHandleBase::setResource((uint64_t *)this + 26, 0);
    }
  }
  v12 = (_DWORD *)*((_QWORD *)this + 31);
  if (v12)
  {
    *((_QWORD *)this + 31) = 0;
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
  }
  v13 = *((_QWORD *)this + 29);
  if (!*(_BYTE *)(v13 + 32))
  {
    v71[0] = 16;
    v72 = 0;
    WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::HTMLModelElement>>::reject(v13, (WTF::StringImpl *)v71);
    v15 = v72;
    v72 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v14);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  v16 = WTF::fastMalloc((WTF *)0x40);
  v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v17 = off_1E3364348;
  v17[1] = WebCore::HTMLModelElement::readyPromiseResolve;
  v17[2] = 0;
  v17[3] = this;
  *(_QWORD *)v16 = v17;
  *(_BYTE *)(v16 + 8) = 0;
  *(_BYTE *)(v16 + 32) = 0;
  *(_QWORD *)(v16 + 40) = v16 + 56;
  *(_QWORD *)(v16 + 48) = 1;
  v19 = (uint64_t *)*((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = v16;
  if (v19)
  {
    v20 = WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::HTMLModelElement>>::~DOMPromiseProxyWithResolveCallback(v19, v18);
    v19 = (uint64_t *)WTF::fastFree((WTF *)v20, v21);
  }
  *((_BYTE *)this + 242) = 0;
  v22 = *((_QWORD *)this + 21);
  if (v22 && *(_DWORD *)(v22 + 4))
  {
    {
      WebCore::ResourceLoaderOptions::ResourceLoaderOptions((uint64_t)&WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options, 0, 0, 0, 1, 1, 2, 1, 2, 1, 1, 0, 0);
    }
    v96[0] = WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options;
    *(_DWORD *)((char *)v96 + 3) = *(int *)((char *)&WebCore::CachedResourceLoader::defaultCachedResourceOptions(void)::options
                                          + 3);
    v29 = qword_1ECE90818;
    if (qword_1ECE90818)
      *(_DWORD *)qword_1ECE90818 += 2;
    v97 = v29;
    v98 = xmmword_1ECE90820;
    v99 = *(_OWORD *)algn_1ECE90830;
    v30 = dword_1ECE90854;
    v101 = 0;
    v102 = 0;
    v100 = qword_1ECE90840;
    v103 = dword_1ECE90854;
    if (dword_1ECE90854)
    {
      if (dword_1ECE90854 >> 28)
        goto LABEL_121;
      v64 = WTF::fastMalloc((WTF *)(16 * dword_1ECE90854));
      v102 = v30;
      v101 = v64;
      if (dword_1ECE90854)
      {
        v65 = qword_1ECE90848;
        v66 = qword_1ECE90848 + 16 * dword_1ECE90854;
        do
        {
          v67 = *(_DWORD **)v65;
          if (*(_QWORD *)v65)
            *v67 += 2;
          *(_QWORD *)v64 = v67;
          *(_BYTE *)(v64 + 8) = *(_BYTE *)(v65 + 8);
          v65 += 16;
          v64 += 16;
        }
        while (v65 != v66);
      }
    }
    v104 = dword_1ECE90858;
    v105 = byte_1ECE9085C;
    LOBYTE(v106) = 0;
    v109 = 0;
    if (byte_1ECE90878)
    {
      v106 = word_1ECE90860;
      v31 = qword_1ECE90868;
      if (qword_1ECE90868)
        *(_DWORD *)qword_1ECE90868 += 2;
      v107 = v31;
      v32 = qword_1ECE90870;
      if (qword_1ECE90870)
        *(_DWORD *)qword_1ECE90870 += 2;
      v108 = v32;
      v109 = 1;
    }
    v110 = xmmword_1ECE90880;
    v33 = qword_1ECE90890;
    if (qword_1ECE90890)
      *(_DWORD *)qword_1ECE90890 += 2;
    v111 = v33;
    LOBYTE(v96[0]) = 9;
    v34 = *((_QWORD *)this + 13);
    if (v34)
    {
      v35 = *(_DWORD *)(v34 + 4);
      if ((v35 & 1) != 0)
      {
        v36 = *(_QWORD *)(v34 + 40);
        LODWORD(v37) = *(_DWORD *)(v34 + 52);
        if ((_DWORD)v37)
        {
LABEL_47:
          v37 = v37;
          v38 = (uint64_t *)(v36 + 8);
          while (1)
          {
            v39 = *(v38 - 1);
            if (v39 == WebCore::HTMLNames::crossoriginAttr
              || *(_QWORD *)(v39 + 24) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 24)
              && *(_QWORD *)(v39 + 32) == *(_QWORD *)(WebCore::HTMLNames::crossoriginAttr + 32))
            {
              goto LABEL_59;
            }
            v38 += 2;
            if (!--v37)
            {
              v38 = (uint64_t *)MEMORY[0x1E0CBF2F8];
              goto LABEL_59;
            }
          }
        }
      }
      else
      {
        v36 = v34 + 32;
        LODWORD(v37) = v35 >> 5;
        if ((_DWORD)v37)
          goto LABEL_47;
      }
    }
    v38 = (uint64_t *)MEMORY[0x1E0CBF2F8];
LABEL_59:
    if (*v38)
    {
      if (WTF::equalLettersIgnoringASCIICase(v38, "use-credentials", 0x10uLL))
      {
        v62 = "use-credentials";
        v63 = 16;
      }
      else
      {
        v62 = "anonymous";
        v63 = 10;
      }
      WTF::String::String(&v70, (uint64_t)v62, v63);
    }
    else
    {
      v70 = 0;
    }
    v40 = (WTF::StringImpl *)*((_QWORD *)this + 21);
    if (v40)
      *(_DWORD *)v40 += 2;
    v41 = *((_OWORD *)this + 12);
    v77 = *((_OWORD *)this + 11);
    v78 = v41;
    v76 = v40;
    v79[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v79);
    v80 = WebCore::ResourceRequestBase::s_defaultTimeoutInterval;
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v81 = v94[0];
    v82 = 0u;
    v83 = 0u;
    v84 = 0u;
    v85 = 0x10000;
    v42 = v86 & 0x80 | 4;
    v86 = v42;
    v87 = 0;
    v43 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
    {
      *v43 += 2;
      v42 = v86;
    }
    v88 = v43;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v92 = v92 & 0xE0 | 5;
    v86 = v42 | 2;
    v93 = 0;
    WebCore::createPotentialAccessControlRequest((WebCore::ResourceRequest *)&v76, (WTF::StringImpl *)v96, *(_QWORD *)(*((_QWORD *)this + 5) + 8), (uint64_t *)&v70, 0, (uint64_t)v94);
    WebCore::ResourceRequest::~ResourceRequest((WebCore::ResourceRequest *)&v76, v44);
    *((_DWORD *)this + 6) += 2;
    v46 = v95;
    v95 = this;
    if (v46)
    {
      if (*((_DWORD *)v46 + 6) == 2)
      {
        if ((*((_WORD *)v46 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v46, v45);
      }
      else
      {
        *((_DWORD *)v46 + 6) -= 2;
      }
    }
    v47 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 720);
    if (!v47)
      v47 = (_QWORD *)WebCore::Document::ensureCachedResourceLoader(*(WebCore::Document **)(*((_QWORD *)this + 5) + 8), v45);
    WebCore::CachedResourceLoader::requestResource(&v76, (WebCore::ResourceRequest *)v94, v47, (WTF::StringImpl *)7, 0, 0);
    WebCore::castCachedResourceTo<WebCore::CachedRawResource,WebCore::CachedResource>((uint64_t)v74, &v76);
    if ((_DWORD)v80 != -1)
      v48 = (WebCore *)(*(&__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore20CachedResourceHandleINS6_14CachedResourceEEENS6_13ResourceErrorEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix
                        + v80))((int)&v73, (WebCore::CachedResourceHandleBase *)&v76);
    if (v75)
    {
      v49 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v49 || (v50 = *(_QWORD *)(v49 + 96)) == 0)
        v50 = WebCore::threadGlobalDataSlow(v48);
      v51 = *(_QWORD *)(v50 + 40);
      if (!v51)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v50);
        v51 = *(_QWORD *)(v50 + 40);
      }
      v52 = bmalloc::api::isoAllocate();
      WTF::MonotonicTime::now((WTF::MonotonicTime *)v52);
      *(_DWORD *)(v52 + 16) = 1;
      *(_QWORD *)v52 = off_1E33A4B48;
      *(_QWORD *)(v52 + 8) = 0;
      *(_DWORD *)(v52 + 20) = *(_DWORD *)(v52 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v51 + 784) != 0);
      v54 = *(_DWORD **)(v51 + 784);
      if (v54)
        *v54 += 2;
      *(_QWORD *)(v52 + 24) = v54;
      *(_QWORD *)(v52 + 32) = 0;
      *(_QWORD *)(v52 + 40) = 0;
      *(_QWORD *)(v52 + 48) = 0;
      *(_QWORD *)(v52 + 56) = v53;
      *(_QWORD *)(v52 + 64) = 0;
      v76 = (WTF::StringImpl *)v52;
      WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)this + 18, (uint64_t)this, 0, (uint64_t *)&v76);
      if (v76)
      {
        if (*((_DWORD *)v76 + 4) == 1)
          (*(void (**)(void))(*(_QWORD *)v76 + 8))();
        else
          --*((_DWORD *)v76 + 4);
      }
      v56 = *((_QWORD *)this + 29);
      if (!*(_BYTE *)(v56 + 32))
      {
        v68[0] = 15;
        v69 = 0;
        WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::HTMLModelElement>>::reject(v56, (WTF::StringImpl *)v68);
        if (v69)
        {
          if (*(_DWORD *)v69 == 2)
            WTF::StringImpl::destroy(v69, v55);
          else
            *(_DWORD *)v69 -= 2;
        }
      }
LABEL_94:
      if (v75 != -1)
        (*(&off_1E3364200 + v75))((int)&v76, (WebCore::CachedResourceHandleBase *)v74);
      WebCore::CachedResourceRequest::~CachedResourceRequest((WebCore::CachedResourceRequest *)v94, v55);
      v61 = v70;
      v70 = 0;
      if (v61)
      {
        if (*(_DWORD *)v61 == 2)
          WTF::StringImpl::destroy(v61, v60);
        else
          *(_DWORD *)v61 -= 2;
      }
      WebCore::ResourceLoaderOptions::~ResourceLoaderOptions((WebCore::ResourceLoaderOptions *)v96, v60);
      return;
    }
    WebCore::SharedBufferBuilder::empty((WebCore::HTMLModelElement *)((char *)this + 216));
    if (!v75)
    {
      if (v74[0])
        v57 = *(WebCore::CachedResource **)(v74[0] + 8);
      else
        v57 = 0;
      WebCore::CachedResourceHandleBase::setResource((uint64_t *)this + 26, v57);
      if (*(_QWORD *)v10)
        v58 = *(WebCore::CachedResource **)(*(_QWORD *)v10 + 8);
      else
        v58 = 0;
      v59 = (WebCore::HTMLModelElement *)((char *)this + 112);
      if (WebCore::CachedResource::addClientToSet(v58, v59))
        (*(void (**)(WebCore::CachedResource *, WebCore::CachedResourceClient *))(*(_QWORD *)v58 + 88))(v58, v59);
      goto LABEL_94;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_121:
    __break(0xC471u);
    return;
  }
  v23 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v23 || (v24 = *(_QWORD *)(v23 + 96)) == 0)
    v24 = WebCore::threadGlobalDataSlow((WebCore *)v19);
  v25 = *(_QWORD *)(v24 + 40);
  if (!v25)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v24);
    v25 = *(_QWORD *)(v24 + 40);
  }
  v26 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v26);
  *(_DWORD *)(v26 + 16) = 1;
  *(_QWORD *)v26 = off_1E33A4B48;
  *(_QWORD *)(v26 + 8) = 0;
  *(_DWORD *)(v26 + 20) = *(_DWORD *)(v26 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v25 + 784) != 0);
  v28 = *(_DWORD **)(v25 + 784);
  if (v28)
    *v28 += 2;
  *(_QWORD *)(v26 + 24) = v28;
  *(_QWORD *)(v26 + 32) = 0;
  *(_QWORD *)(v26 + 40) = 0;
  *(_QWORD *)(v26 + 48) = 0;
  *(_QWORD *)(v26 + 56) = v27;
  *(_QWORD *)(v26 + 64) = 0;
  v94[0] = v26;
  WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)this + 18, (uint64_t)this, 0, v94);
  if (v94[0])
  {
    if (*(_DWORD *)(v94[0] + 16) == 1)
      (*(void (**)(void))(*(_QWORD *)v94[0] + 8))();
    else
      --*(_DWORD *)(v94[0] + 16);
  }
}

uint64_t WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::HTMLModelElement>>::reject(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v2;
  char v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF *v6;
  unsigned __int8 v7;
  WTF::StringImpl *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  WTF::StringImpl *v22;
  char v23;
  unsigned __int8 v24[8];
  WTF::StringImpl *v25;
  objc_class *v26;

  v2 = result;
  v3 = *(_BYTE *)a2;
  v4 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (*(_BYTE *)(result + 32))
  {
    LOBYTE(v21) = v3;
    v22 = v4;
    v23 = 1;
    result = std::optional<WebCore::Exception>::swap[abi:sn180100]((uint64_t)&v21, result + 8);
    if (v23)
    {
      result = (uint64_t)v22;
      v22 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *(_BYTE *)(result + 8) = v3;
    *(_QWORD *)(result + 16) = v4;
    *(_BYTE *)(result + 24) = 1;
    *(_BYTE *)(result + 32) = 1;
  }
  v5 = *(unsigned int *)(v2 + 52);
  v21 = (WTF *)&v23;
  LODWORD(v22) = 1;
  HIDWORD(v22) = v5;
  if (v5 < 2)
  {
    v6 = (WTF *)&v23;
    if (!(_DWORD)v5)
      goto LABEL_9;
    goto LABEL_44;
  }
  if (v5 >> 29)
  {
    __break(0xC471u);
LABEL_55:
    __break(1u);
    return result;
  }
  result = WTF::fastMalloc((WTF *)(8 * v5));
  v6 = (WTF *)result;
  LODWORD(v22) = v5;
  v21 = (WTF *)result;
  v5 = *(unsigned int *)(v2 + 52);
  if ((_DWORD)v5)
  {
LABEL_44:
    v16 = *(uint64_t **)(v2 + 40);
    v17 = 8 * v5;
    v18 = v6;
    do
    {
      v19 = *v16++;
      ++*(_DWORD *)(v19 + 16);
      *(_QWORD *)v18 = v19;
      v18 = (WTF *)((char *)v18 + 8);
      v17 -= 8;
    }
    while (v17);
  }
LABEL_9:
  if (!*(_BYTE *)(v2 + 32) || !*(_BYTE *)(v2 + 24))
    goto LABEL_55;
  v7 = *(_BYTE *)(v2 + 8);
  v8 = *(WTF::StringImpl **)(v2 + 16);
  if (v8)
  {
    v9 = *(_DWORD *)v8;
    *(_DWORD *)v8 += 2;
    if (HIDWORD(v22))
    {
      v10 = 8 * HIDWORD(v22);
      do
      {
        v11 = *(_QWORD *)v6;
        v12 = *(_DWORD *)v8;
        v24[0] = v7;
        *(_DWORD *)v8 = v12 + 4;
        v25 = v8;
        v26 = 0;
        WebCore::DeferredPromise::reject(v11, v24, 0, &v26);
        result = (uint64_t)v25;
        v25 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
          else
            *(_DWORD *)result -= 2;
        }
        if (*(_DWORD *)v8 == 2)
          result = WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
        v6 = (WTF *)((char *)v6 + 8);
        v10 -= 8;
      }
      while (v10);
      v9 = *(_DWORD *)v8 - 2;
    }
    if (v9)
      *(_DWORD *)v8 = v9;
    else
      result = WTF::StringImpl::destroy(v8, a2);
LABEL_25:
    v6 = v21;
    if (HIDWORD(v22))
    {
      v20 = 8 * HIDWORD(v22);
      do
      {
        result = *(_QWORD *)v6;
        *(_QWORD *)v6 = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 16) == 1)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
          else
            --*(_DWORD *)(result + 16);
        }
        v6 = (WTF *)((char *)v6 + 8);
        v20 -= 8;
      }
      while (v20);
      v6 = v21;
    }
    goto LABEL_26;
  }
  if (HIDWORD(v22))
  {
    v14 = 8 * HIDWORD(v22);
    do
    {
      v15 = *(_QWORD *)v6;
      v25 = 0;
      v26 = 0;
      v24[0] = v7;
      WebCore::DeferredPromise::reject(v15, v24, 0, &v26);
      result = (uint64_t)v25;
      v25 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v6 = (WTF *)((char *)v6 + 8);
      v14 -= 8;
    }
    while (v14);
    goto LABEL_25;
  }
LABEL_26:
  if (&v23 != (char *)v6 && v6 != 0)
  {
    v21 = 0;
    LODWORD(v22) = 0;
    return WTF::fastFree(v6, a2);
  }
  return result;
}

uint64_t *WebCore::SharedBufferBuilder::empty(WebCore::SharedBufferBuilder *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;
  char v23;

  v3 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = v3 + 24;
  *(_QWORD *)(v3 + 16) = 1;
  *(_BYTE *)(v3 + 40) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  v22 = 0;
  v4 = *(_QWORD *)this;
  *(_QWORD *)this = v3;
  if (v4)
  {
    do
    {
      v5 = __ldaxr((unsigned int *)v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, (unsigned int *)v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)v4);
      v8 = *(unsigned int *)(v4 + 20);
      if ((_DWORD)v8)
      {
        v9 = *(_QWORD *)(v4 + 8);
        v10 = v9 + 16 * v8;
        do
        {
          v11 = *(unsigned int **)(v9 + 8);
          *(_QWORD *)(v9 + 8) = 0;
          if (v11)
          {
            do
            {
              v12 = __ldaxr(v11);
              v13 = v12 - 1;
            }
            while (__stlxr(v13, v11));
            if (!v13)
            {
              v19 = v9;
              v20 = v10;
              v18 = v4;
              atomic_store(1u, v11);
              v21 = (WTF *)v11;
              v14 = v11[6];
              if ((_DWORD)v14 != -1)
                ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIhLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENS6_9RetainPtrIPK8__CFDataEENS6_14FileSystemImpl14MappedFileDataEN7WebCore11DataSegment8ProviderEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSN_EEEDcOSO_DpOT0____fmatrix_2[v14])(&v23, v11 + 2);
              *((_DWORD *)v21 + 6) = -1;
              WTF::fastFree(v21, v2);
              v4 = v18;
              v9 = v19;
              v10 = v20;
            }
          }
          v9 += 16;
        }
        while (v9 != v10);
      }
      v15 = *(WTF **)(v4 + 8);
      if ((WTF *)(v4 + 24) != v15 && v15 != 0)
      {
        *(_QWORD *)(v4 + 8) = 0;
        *(_DWORD *)(v4 + 16) = 0;
        v17 = v4;
        WTF::fastFree(v15, v2);
        v4 = v17;
      }
      WTF::fastFree((WTF *)v4, v2);
    }
  }
  return WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref(&v22, v2);
}

WTF::StringImpl *WebCore::HTMLModelElement::didMoveToNewDocument(WebCore::HTMLModelElement *this, WebCore::Document *a2, WebCore::Document *a3, WTF::String *a4)
{
  uint64_t v5;
  WTF::String *v6;
  __n128 v7;
  const WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *result;
  WTF::StringImpl *v11[5];

  WebCore::Element::didMoveToNewDocument(this, a2, a3, a4);
  WebCore::HTMLModelElement::selectModelSource(this, v5, v6, (WTF::URL *)v11, v7);
  WebCore::HTMLModelElement::setSourceURL(this, (const WTF::URL *)v11, v8);
  result = v11[0];
  v11[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v9);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

double WebCore::HTMLModelElement::createElementRenderer@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  double result;

  v6 = bmalloc::api::isoAllocate();
  v7 = WebCore::RenderLayerModelObject::RenderLayerModelObject(v6, 24, a1, a2, 12, 3);
  *(_OWORD *)(v7 + 184) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_QWORD *)&result = 0x258000004B00;
  *(_QWORD *)(v7 + 200) = 0x258000004B00;
  *(_QWORD *)(v7 + 208) = 0;
  *(_DWORD *)(v7 + 20) |= 2u;
  *(_QWORD *)v7 = off_1E342C530;
  *a3 = v7;
  return result;
}

uint64_t WebCore::HTMLModelElement::didAttachRenderers(uint64_t this)
{
  if (*(_BYTE *)(this + 242))
  {
    *(_BYTE *)(this + 242) = 0;
    return WebCore::HTMLModelElement::createModelPlayer(this);
  }
  return this;
}

uint64_t WebCore::HTMLModelElement::createModelPlayer(uint64_t this)
{
  _QWORD *v1;
  WebCore::RenderReplaced *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int32x2_t v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  char v11[8];
  WTF::StringImpl *v12;
  unint64_t v13;

  if (*(_QWORD *)(this + 224))
  {
    v1 = (_QWORD *)this;
    v2 = (WebCore::RenderReplaced *)(*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL);
    if (v2 && (*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0
      || (*(_BYTE *)((*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
    {
      __break(0xC471u);
      JUMPOUT(0x1954CC054);
    }
    v13 = WebCore::RenderReplaced::intrinsicSize(*(_QWORD *)(this + 64) & 0xFFFFFFFFFFFFLL);
    this = WebCore::RenderReplaced::replacedContentRect(v2, (int32x2_t *)&v13);
    v4 = v3;
    if ((int)v3 >= 1 && SHIDWORD(v3) >= 1)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1[5] + 8) + 528) + 8) + 24)
                                 + 8)
                     + 1752);
      (*(void (**)(unint64_t *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v6 + 16))(&v13, v6, v1 + 16);
      v7 = (int32x2_t)v13;
      v13 = 0;
      v8 = (_DWORD *)v1[31];
      v1[31] = v7;
      if (v8)
      {
        if (v8[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
          v10 = (_DWORD *)v13;
          v13 = 0;
          if (v10)
          {
            if (v10[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
            else
              --v10[2];
          }
        }
        else
        {
          --v8[2];
        }
        v7 = (int32x2_t)v1[31];
      }
      if (v7)
      {
        return (*(uint64_t (**)(int32x2_t, _QWORD, uint64_t))(**(_QWORD **)&v7 + 16))(v7, v1[28], v4);
      }
      else
      {
        this = v1[29];
        if (!*(_BYTE *)(this + 32))
        {
          v11[0] = 16;
          v12 = 0;
          WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::HTMLModelElement>>::reject(this, (WTF::StringImpl *)v11);
          this = (uint64_t)v12;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              return WTF::StringImpl::destroy(v12, v9);
            else
              *(_DWORD *)v12 -= 2;
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::HTMLModelElement::dataReceived(WebCore::HTMLModelElement *this, WebCore::CachedResource *a2, const WebCore::SharedBuffer *a3)
{
  WebCore::SharedBufferBuilder::ensureBuffer((uint64_t *)this + 27);
  return WebCore::FragmentedSharedBuffer::append(*((WebCore::FragmentedSharedBuffer **)this + 27), a3);
}

uint64_t `non-virtual thunk to'WebCore::HTMLModelElement::dataReceived(WebCore::HTMLModelElement *this, WebCore::CachedResource *a2, const WebCore::SharedBuffer *a3)
{
  WebCore::SharedBufferBuilder::ensureBuffer((uint64_t *)this + 13);
  return WebCore::FragmentedSharedBuffer::append(*((WebCore::FragmentedSharedBuffer **)this + 13), a3);
}

uint64_t *WebCore::HTMLModelElement::notifyFinished(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  WebCore *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  WebCore::CachedResource *v14;
  _DWORD *v15;
  int v16;
  uint64_t *result;
  WTF::StringImpl *v18;
  uint64_t v19;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t *v23;
  unint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t *v30;
  void *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  WebCore::CachedResource *v40;
  _DWORD *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  void *v48;
  __int128 v49;
  __int128 v50;
  unsigned int *v51;
  unsigned int *v52;
  char v53[8];
  uint64_t *v54;
  char v55;
  uint64_t *v56;
  char *v57;
  uint64_t *v58;

  v4 = *(_QWORD *)(a2 + 400);
  if (v4)
  {
    v5 = (uint64_t *)(v4 + 320);
  }
  else
  {
    std::call_once[abi:sn180100]<WebCore::CachedResource::resourceError(void)::$_0>((uint64_t)&v57);
    v5 = &WebCore::CachedResource::resourceError(void)const::emptyError;
  }
  if (*((_BYTE *)v5 + 60))
  {
    v6 = (WebCore *)WebCore::SharedBufferBuilder::reset((WebCore::SharedBufferBuilder *)(a1 + 216), (void *)a2);
    v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
      v8 = WebCore::threadGlobalDataSlow(v6);
    v9 = *(_QWORD *)(v8 + 40);
    if (!v9)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
      v9 = *(_QWORD *)(v8 + 40);
    }
    v10 = bmalloc::api::isoAllocate();
    WTF::MonotonicTime::now((WTF::MonotonicTime *)v10);
    *(_DWORD *)(v10 + 16) = 1;
    *(_QWORD *)v10 = off_1E33A4B48;
    *(_QWORD *)(v10 + 8) = 0;
    *(_DWORD *)(v10 + 20) = *(_DWORD *)(v10 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v9 + 784) != 0);
    v12 = *(_DWORD **)(v9 + 784);
    if (v12)
      *v12 += 2;
    *(_QWORD *)(v10 + 24) = v12;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = 0;
    *(_QWORD *)(v10 + 48) = 0;
    *(_QWORD *)(v10 + 56) = v11;
    *(_QWORD *)(v10 + 64) = 0;
    v57 = (char *)v10;
    WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)(a1 + 144), a1, 0, (uint64_t *)&v57);
    if (v57)
    {
      if (*((_DWORD *)v57 + 4) == 1)
        (*(void (**)(void))(*(_QWORD *)v57 + 8))();
      else
        --*((_DWORD *)v57 + 4);
    }
    v13 = *(_QWORD *)(a1 + 208);
    if (v13)
      v14 = *(WebCore::CachedResource **)(v13 + 8);
    else
      v14 = 0;
    WebCore::CachedResource::removeClient(v14, (unsigned int **)(a1 + 112));
    WebCore::CachedResourceHandleBase::setResource((uint64_t *)(a1 + 208), 0);
    v15 = (_DWORD *)(*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL);
    if (v15)
    {
      if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x1954CC644);
      }
      ++*(_DWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
      (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 312))(v15);
      v16 = v15[4];
      if (!v16)
      {
        __break(0xC471u);
        JUMPOUT(0x1954CC664);
      }
      v15[4] = v16 - 1;
    }
    result = *(uint64_t **)(a1 + 232);
    if (*((_BYTE *)result + 32))
      return result;
    v53[0] = 15;
    v54 = 0;
    WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::HTMLModelElement>>::reject((uint64_t)result, (WTF::StringImpl *)v53);
    result = v54;
    if (!v54)
      return result;
LABEL_65:
    if (*(_DWORD *)result == 2)
      return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v18);
    *(_DWORD *)result -= 2;
    return result;
  }
  *(_BYTE *)(a1 + 240) = 1;
  v19 = *(_QWORD *)(a1 + 216);
  if (v19)
  {
    *(_QWORD *)(a1 + 216) = 0;
  }
  else
  {
    v19 = WTF::fastMalloc((WTF *)0x38);
    *(_DWORD *)v19 = 1;
    *(_QWORD *)(v19 + 8) = v19 + 24;
    *(_QWORD *)(v19 + 16) = 1;
    *(_BYTE *)(v19 + 40) = 0;
    *(_QWORD *)(v19 + 48) = 0;
  }
  v57 = (char *)v19;
  WebCore::FragmentedSharedBuffer::makeContiguous((WTF *)v19, &v51);
  WTF::Ref<WebCore::FragmentedSharedBuffer,WTF::RawPtrTraits<WebCore::FragmentedSharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::FragmentedSharedBuffer>>::~Ref((uint64_t *)&v57, v20);
  v21 = v51;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 + 1, v21));
  v52 = v21;
  v23 = *(uint64_t **)(a2 + 400);
  if (!v23)
  {
    v24 = atomic_load(&WebCore::CachedResource::response(void)const::onceFlag);
    if (v24 != -1)
    {
      v57 = &v55;
      v56 = (uint64_t *)&v57;
      std::__call_once(&WebCore::CachedResource::response(void)const::onceFlag, &v56, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::response(void)::$_0 &&>>);
    }
    v23 = &WebCore::CachedResource::response(void)const::staticEmptyResponse;
  }
  WebCore::ResourceResponse::platformLazyInit((uint64_t)v23, 1);
  v25 = (_DWORD *)v23[5];
  if (v25)
    *v25 += 2;
  if ((*(_BYTE *)(a2 + 344) & 1) == 0)
  {
    WebCore::ResourceRequest::doUpdateResourceRequest((WebCore::ResourceRequest *)(a2 + 160));
    *(_BYTE *)(a2 + 344) |= 1u;
  }
  v26 = *(_DWORD **)(a2 + 160);
  if (v26)
    *v26 += 2;
  v49 = *(_OWORD *)(a2 + 184);
  v50 = *(_OWORD *)(a2 + 168);
  v27 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v27 = 1;
  v29 = (uint64_t)v52;
  v52 = 0;
  *(_QWORD *)(v27 + 8) = v29;
  *(_QWORD *)(v27 + 16) = v25;
  *(_QWORD *)(v27 + 24) = v26;
  *(_OWORD *)(v27 + 32) = v50;
  *(_OWORD *)(v27 + 48) = v49;
  v30 = *(uint64_t **)(a1 + 224);
  *(_QWORD *)(a1 + 224) = v27;
  if (v30)
  {
    if (*(_DWORD *)v30 == 1)
    {
      v46 = (WTF::StringImpl *)v30[3];
      v30[3] = 0;
      if (v46)
      {
        if (*(_DWORD *)v46 == 2)
          WTF::StringImpl::destroy(v46, v28);
        else
          *(_DWORD *)v46 -= 2;
      }
      v47 = (WTF::StringImpl *)v30[2];
      v30[2] = 0;
      if (v47)
      {
        if (*(_DWORD *)v47 == 2)
          WTF::StringImpl::destroy(v47, v28);
        else
          *(_DWORD *)v47 -= 2;
      }
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v30 + 1, v28);
      WTF::fastFree((WTF *)v30, v48);
    }
    else
    {
      --*(_DWORD *)v30;
    }
  }
  WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v52, v28);
  v32 = WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref((uint64_t *)&v51, v31);
  v33 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v33 || (v34 = *(_QWORD *)(v33 + 96)) == 0)
    v34 = WebCore::threadGlobalDataSlow((WebCore *)v32);
  v35 = *(_QWORD *)(v34 + 40);
  if (!v35)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v34);
    v35 = *(_QWORD *)(v34 + 40);
  }
  v36 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v36);
  *(_DWORD *)(v36 + 16) = 1;
  *(_QWORD *)v36 = off_1E33A4B48;
  *(_QWORD *)(v36 + 8) = 0;
  *(_DWORD *)(v36 + 20) = *(_DWORD *)(v36 + 20) & 0xFFC00000 | 0x1E8200 | (*(_QWORD *)(v35 + 1104) != 0);
  v38 = *(_DWORD **)(v35 + 1104);
  if (v38)
    *v38 += 2;
  *(_QWORD *)(v36 + 24) = v38;
  *(_QWORD *)(v36 + 32) = 0;
  *(_QWORD *)(v36 + 40) = 0;
  *(_QWORD *)(v36 + 48) = 0;
  *(_QWORD *)(v36 + 56) = v37;
  *(_QWORD *)(v36 + 64) = 0;
  v57 = (char *)v36;
  WebCore::ActiveDOMObject::queueTaskToDispatchEventInternal((_QWORD *)(a1 + 144), a1, 0, (uint64_t *)&v57);
  if (v57)
  {
    if (*((_DWORD *)v57 + 4) == 1)
      (*(void (**)(char *))(*(_QWORD *)v57 + 8))(v57);
    else
      --*((_DWORD *)v57 + 4);
  }
  v39 = *(_QWORD *)(a1 + 208);
  if (v39)
    v40 = *(WebCore::CachedResource **)(v39 + 8);
  else
    v40 = 0;
  WebCore::CachedResource::removeClient(v40, (unsigned int **)(a1 + 112));
  result = WebCore::CachedResourceHandleBase::setResource((uint64_t *)(a1 + 208), 0);
  v41 = (_DWORD *)(*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL);
  if (v41)
  {
    if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1954CC694);
    }
    ++*(_DWORD *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
    result = (uint64_t *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v41 + 312))(v41);
    v42 = v41[4];
    if (!v42)
    {
      __break(0xC471u);
      JUMPOUT(0x1954CC6B4);
    }
    v41[4] = v42 - 1;
  }
  v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 528);
  if (!v43 || (v44 = *(_QWORD *)(v43 + 8)) == 0 || (v45 = *(_QWORD *)(v44 + 24)) == 0 || !*(_QWORD *)(v45 + 8))
  {
    result = *(uint64_t **)(a1 + 232);
    if (*((_BYTE *)result + 32))
      return result;
    LOBYTE(v57) = 16;
    v58 = 0;
    WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::HTMLModelElement>>::reject((uint64_t)result, (WTF::StringImpl *)&v57);
    result = v58;
    if (!v58)
      return result;
    goto LABEL_65;
  }
  if ((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1954CC6F4);
    }
    return (uint64_t *)WebCore::HTMLModelElement::createModelPlayer(a1);
  }
  else
  {
    *(_BYTE *)(a1 + 242) = 1;
  }
  return result;
}

uint64_t *`non-virtual thunk to'WebCore::HTMLModelElement::notifyFinished(uint64_t a1, uint64_t a2)
{
  return WebCore::HTMLModelElement::notifyFinished(a1 - 112, a2);
}

uint64_t WebCore::HTMLModelElement::usesPlatformLayer(WebCore::HTMLModelElement *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 31);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result) != 0;
  return result;
}

uint64_t WebCore::HTMLModelElement::platformLayer(WebCore::HTMLModelElement *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 31);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t WebCore::HTMLModelElement::sizeMayHaveChanged(WebCore::HTMLModelElement *this)
{
  uint64_t v1;
  WebCore::RenderReplaced *v2;
  unint64_t v4;

  v1 = *((_QWORD *)this + 31);
  if (!v1)
    return WebCore::HTMLModelElement::createModelPlayer((uint64_t)this);
  v2 = (WebCore::RenderReplaced *)(*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL);
  if (v2 && (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0
    || (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
  {
    __break(0xC471u);
    JUMPOUT(0x1954CC7FCLL);
  }
  v4 = WebCore::RenderReplaced::intrinsicSize(*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL);
  WebCore::RenderReplaced::replacedContentRect(v2, (int32x2_t *)&v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
}

uint64_t WebCore::HTMLModelElement::didUpdateLayerHostingContextIdentifier(uint64_t result)
{
  _DWORD *v1;
  int v2;

  v1 = (_DWORD *)(*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL);
  if (v1)
  {
    if ((*(_BYTE *)((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0
      || (++*(_DWORD *)((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 0x10),
          result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 312))(v1),
          (v2 = v1[4]) == 0))
    {
      __break(0xC471u);
      JUMPOUT(0x1954CC894);
    }
    v1[4] = v2 - 1;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::HTMLModelElement::didUpdateLayerHostingContextIdentifier(uint64_t result)
{
  _DWORD *v1;
  int v2;

  v1 = (_DWORD *)(*(_QWORD *)(result - 64) & 0xFFFFFFFFFFFFLL);
  if (v1)
  {
    if ((*(_BYTE *)((*(_QWORD *)(result - 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0
      || (++*(_DWORD *)((*(_QWORD *)(result - 64) & 0xFFFFFFFFFFFFLL) + 0x10),
          result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v1 + 312))(v1),
          (v2 = v1[4]) == 0))
    {
      __break(0xC471u);
      JUMPOUT(0x1954CC92CLL);
    }
    v1[4] = v2 - 1;
  }
  return result;
}

uint64_t WebCore::HTMLModelElement::didFinishLoading(WebCore::HTMLModelElement *this, WebCore::ModelPlayer *a2)
{
  uint64_t v3;
  _DWORD *v4;
  int v5;

  v3 = *((_QWORD *)this + 8);
  v4 = (_DWORD *)(v3 & 0xFFFFFFFFFFFFLL);
  if ((v3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((v3 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0
      || (++*(_DWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 0x10),
          (*(void (**)(_DWORD *, WebCore::ModelPlayer *))(*(_QWORD *)v4 + 312))(v4, a2),
          (v5 = v4[4]) == 0))
    {
      __break(0xC471u);
      JUMPOUT(0x1954CC9D0);
    }
    v4[4] = v5 - 1;
  }
  return WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::HTMLModelElement>>::resolve(*((_QWORD *)this + 29), this);
}

uint64_t WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::HTMLModelElement>>::resolve(uint64_t result, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  WTF *v15;
  WTF::StringImpl *v16;
  char v17;

  v3 = result;
  if (*(_BYTE *)(result + 32))
  {
    LOBYTE(v15) = 0;
    v17 = 0;
    result = std::optional<WebCore::Exception>::swap[abi:sn180100]((uint64_t)&v15, result + 8);
    if (v17)
    {
      result = (uint64_t)v16;
      v16 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        else
          *(_DWORD *)result -= 2;
      }
    }
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 1;
  }
  v4 = *(unsigned int *)(v3 + 52);
  v15 = (WTF *)&v17;
  LODWORD(v16) = 1;
  HIDWORD(v16) = v4;
  if (v4 < 2)
  {
    v5 = (WTF *)&v17;
    if (!(_DWORD)v4)
      goto LABEL_9;
LABEL_22:
    v10 = *(uint64_t **)(v3 + 40);
    v11 = 8 * v4;
    v12 = v5;
    do
    {
      v13 = *v10++;
      ++*(_DWORD *)(v13 + 16);
      *(_QWORD *)v12 = v13;
      v12 = (WTF *)((char *)v12 + 8);
      v11 -= 8;
    }
    while (v11);
    goto LABEL_9;
  }
  if (v4 >> 29)
  {
    __break(0xC471u);
    return result;
  }
  v9 = v4;
  result = WTF::fastMalloc((WTF *)(8 * v4));
  v5 = (WTF *)result;
  LODWORD(v16) = v9;
  v15 = (WTF *)result;
  v4 = *(unsigned int *)(v3 + 52);
  if ((_DWORD)v4)
    goto LABEL_22;
LABEL_9:
  if (HIDWORD(v16))
  {
    v6 = 8 * HIDWORD(v16);
    do
    {
      v7 = *(_QWORD *)v5;
      v5 = (WTF *)((char *)v5 + 8);
      result = WebCore::DeferredPromise::resolve<WebCore::IDLInterface<WebCore::HTMLModelElement>>(v7, a2);
      v6 -= 8;
    }
    while (v6);
    v5 = v15;
    if (HIDWORD(v16))
    {
      v14 = 8 * HIDWORD(v16);
      do
      {
        result = *(_QWORD *)v5;
        *(_QWORD *)v5 = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 16) == 1)
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
          else
            --*(_DWORD *)(result + 16);
        }
        v5 = (WTF *)((char *)v5 + 8);
        v14 -= 8;
      }
      while (v14);
      v5 = v15;
    }
  }
  if (&v17 != (char *)v5 && v5 != 0)
  {
    v15 = 0;
    LODWORD(v16) = 0;
    return WTF::fastFree(v5, a2);
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::HTMLModelElement::didFinishLoading(WebCore::HTMLModelElement *this, WebCore::ModelPlayer *a2)
{
  uint64_t v3;
  _DWORD *v4;
  int v5;

  v3 = *((_QWORD *)this - 8);
  v4 = (_DWORD *)(v3 & 0xFFFFFFFFFFFFLL);
  if ((v3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((v3 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0
      || (++*(_DWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 0x10),
          (*(void (**)(_DWORD *, WebCore::ModelPlayer *))(*(_QWORD *)v4 + 312))(v4, a2),
          (v5 = v4[4]) == 0))
    {
      __break(0xC471u);
      JUMPOUT(0x1954CCC24);
    }
    v4[4] = v5 - 1;
  }
  return WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::HTMLModelElement>>::resolve(*((_QWORD *)this + 13), (WebCore::HTMLModelElement *)((char *)this - 128));
}

WTF::StringImpl *WebCore::HTMLModelElement::didFailLoading(WebCore::HTMLModelElement *this, WebCore::ModelPlayer *a2, const WebCore::ResourceError *a3)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  char v5[8];
  WTF::StringImpl *v6;

  result = (WTF::StringImpl *)*((_QWORD *)this + 29);
  if (!*((_BYTE *)result + 32))
  {
    v5[0] = 16;
    v6 = 0;
    WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::HTMLModelElement>>::reject((uint64_t)result, (WTF::StringImpl *)v5);
    result = v6;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v4);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::HTMLModelElement::didFailLoading(WebCore::HTMLModelElement *this, WebCore::ModelPlayer *a2, const WebCore::ResourceError *a3)
{
  WTF::StringImpl *result;
  WTF::StringImpl *v4;
  char v5[8];
  WTF::StringImpl *v6;

  result = (WTF::StringImpl *)*((_QWORD *)this + 13);
  if (!*((_BYTE *)result + 32))
  {
    v5[0] = 16;
    v6 = 0;
    WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::HTMLModelElement>>::reject((uint64_t)result, (WTF::StringImpl *)v5);
    result = v6;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v4);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  return result;
}

uint64_t WebCore::HTMLModelElement::platformLayerID(WebCore::HTMLModelElement *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t result;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (!v2)
    return 0;
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3 || !*(_QWORD *)(v3 + 8) || (*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) == 0)
    return 0;
  if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
  {
    if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 0x10) != 0
      && (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x15) & 0x80) != 0)
    {
      v4 = *(_QWORD *)(*(_QWORD *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x90) + 256);
      if (v4)
      {
        v5 = *(_DWORD **)(v4 + 72);
        if (v5)
        {
          ++v5[2];
          v6 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 568))(v5);
          if (v5[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
          else
            --v5[2];
          return v6;
        }
      }
    }
    return 0;
  }
  result = 105;
  __break(0xC471u);
  return result;
}

uint64_t `non-virtual thunk to'WebCore::HTMLModelElement::platformLayerID(WebCore::HTMLModelElement *this)
{
  return WebCore::HTMLModelElement::platformLayerID((WebCore::HTMLModelElement *)((char *)this - 128));
}

uint64_t WebCore::HTMLModelElement::isDraggableIgnoringAttributes(WebCore::HTMLModelElement *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 31);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 80))(v1);
  else
    return 1;
}

uint64_t WebCore::HTMLModelElement::isInteractive(WebCore::HTMLModelElement *this)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *((_QWORD *)this + 13);
  if (!v1)
    return 0;
  v2 = *(_DWORD *)(v1 + 4);
  if ((v2 & 1) != 0)
  {
    v3 = *(uint64_t **)(v1 + 40);
    LODWORD(v4) = *(_DWORD *)(v1 + 52);
    if (!(_DWORD)v4)
      return 0;
  }
  else
  {
    v3 = (uint64_t *)(v1 + 32);
    LODWORD(v4) = v2 >> 5;
    if (!(_DWORD)v4)
      return 0;
  }
  v4 = v4;
  while (1)
  {
    v5 = *v3;
    if (*v3 == WebCore::HTMLNames::interactiveAttr
      || *(_QWORD *)(v5 + 24) == *(_QWORD *)(WebCore::HTMLNames::interactiveAttr + 24)
      && *(_QWORD *)(v5 + 32) == *(_QWORD *)(WebCore::HTMLNames::interactiveAttr + 32))
    {
      break;
    }
    v3 += 2;
    if (!--v4)
      return 0;
  }
  return 1;
}

void WebCore::HTMLModelElement::attributeChanged(WebCore::HTMLModelElement *this, WTF::StringImpl *a2, WTF::AtomString *a3, WTF::String *a4, int a5, __n128 a6)
{
  uint64_t v7;
  const WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17[5];

  v7 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == WebCore::HTMLNames::srcAttr)
  {
    WebCore::HTMLModelElement::selectModelSource(this, (uint64_t)a3, a4, (WTF::URL *)v17, a6);
    WebCore::HTMLModelElement::setSourceURL(this, (const WTF::URL *)v17, v8);
    v10 = v17[0];
    v17[0] = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v9);
      else
        *(_DWORD *)v10 -= 2;
    }
  }
  else
  {
    if (v7 != WebCore::HTMLNames::interactiveAttr)
    {
      WebCore::HTMLElement::attributeChanged((uint64_t)this, a2, a3, (WTF::StringImpl **)a4, a5, a6);
      return;
    }
    v11 = *((_QWORD *)this + 31);
    if (v11)
    {
      v12 = *((_QWORD *)this + 13);
      if (v12)
      {
        v13 = *(_DWORD *)(v12 + 4);
        if ((v13 & 1) == 0)
        {
          v14 = (uint64_t *)(v12 + 32);
          LODWORD(v12) = v13 >> 5;
          if (!(v13 >> 5))
            goto LABEL_20;
LABEL_13:
          v12 = v12;
          while (1)
          {
            v15 = *v14;
            if (*v14 == v7
              || *(_QWORD *)(v15 + 24) == *(_QWORD *)(v7 + 24) && *(_QWORD *)(v15 + 32) == *(_QWORD *)(v7 + 32))
            {
              break;
            }
            v14 += 2;
            if (!--v12)
              goto LABEL_20;
          }
          v16 = 1;
          goto LABEL_21;
        }
        v14 = *(uint64_t **)(v12 + 40);
        LODWORD(v12) = *(_DWORD *)(v12 + 52);
        if ((_DWORD)v12)
          goto LABEL_13;
      }
LABEL_20:
      v16 = 0;
LABEL_21:
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 96))(v11, v16);
    }
  }
}

uint64_t WebCore::HTMLModelElement::defaultEventHandler(WebCore::HTMLModelElement *this, WebCore::Node **a2)
{
  uint64_t result;
  void *v5;
  WTF::StringImpl *v6;
  unint64_t StatusReg;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  WebCore::Node::defaultEventHandler(this, a2);
  result = *((_QWORD *)this + 31);
  if (!result)
    return result;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  if (!(_DWORD)result)
    return result;
  v6 = a2[3];
  if (v6)
    *(_DWORD *)v6 += 2;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v8 = *(_QWORD *)(StatusReg + 736);
  if (!v8 || (result = *(_QWORD *)(v8 + 96)) == 0)
    result = WebCore::threadGlobalDataSlow((WebCore *)result);
  v9 = *(_QWORD *)(result + 40);
  if (!v9)
  {
    v42 = result;
    result = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)result);
    v9 = *(_QWORD *)(v42 + 40);
  }
  if (v6 == *(WTF::StringImpl **)(v9 + 1208))
    goto LABEL_100;
  v10 = *(_QWORD *)(StatusReg + 736);
  if (!v10 || (result = *(_QWORD *)(v10 + 96)) == 0)
    result = WebCore::threadGlobalDataSlow((WebCore *)result);
  v11 = *(_QWORD *)(result + 40);
  if (!v11)
  {
    v43 = result;
    result = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)result);
    v11 = *(_QWORD *)(v43 + 40);
  }
  if (v6 == *(WTF::StringImpl **)(v11 + 1232))
    goto LABEL_100;
  v12 = *(_QWORD *)(StatusReg + 736);
  if (!v12 || (result = *(_QWORD *)(v12 + 96)) == 0)
    result = WebCore::threadGlobalDataSlow((WebCore *)result);
  v13 = *(_QWORD *)(result + 40);
  if (!v13)
  {
    v44 = result;
    result = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)result);
    v13 = *(_QWORD *)(v44 + 40);
  }
  if (v6 == *(WTF::StringImpl **)(v13 + 1256))
  {
LABEL_100:
    result = (*((uint64_t (**)(WebCore::Node **))*a2 + 11))(a2);
    if ((result & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1954CD440);
    }
    v14 = *((unsigned __int16 *)a2 + 77);
    if ((v14 < 3 || v14 - 65534 <= 1) && !*((_WORD *)a2 + 77))
    {
      v15 = *(_QWORD *)(StatusReg + 736);
      if (!v15 || (result = *(_QWORD *)(v15 + 96)) == 0)
        result = WebCore::threadGlobalDataSlow((WebCore *)result);
      v16 = *(_QWORD *)(result + 40);
      if (!v16)
      {
        v45 = result;
        result = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)result);
        v16 = *(_QWORD *)(v45 + 40);
      }
      if (v6 == *(WTF::StringImpl **)(v16 + 1208)
        && !*((_BYTE *)this + 241)
        && (*((_BYTE *)a2 + 20) & 0x40) == 0
        && (v17 = *((_QWORD *)this + 13)) != 0
        && ((v18 = *(_DWORD *)(v17 + 4), (v18 & 1) != 0)
          ? (v19 = *(uint64_t **)(v17 + 40), LODWORD(v20) = *(_DWORD *)(v17 + 52))
          : (v19 = (uint64_t *)(v17 + 32), LODWORD(v20) = v18 >> 5),
            (_DWORD)v20))
      {
        v20 = v20;
        while (1)
        {
          v21 = *v19;
          if (*v19 == WebCore::HTMLNames::interactiveAttr
            || *(_QWORD *)(v21 + 24) == *(_QWORD *)(WebCore::HTMLNames::interactiveAttr + 24)
            && *(_QWORD *)(v21 + 32) == *(_QWORD *)(WebCore::HTMLNames::interactiveAttr + 32))
          {
            break;
          }
          v19 += 2;
          if (!--v20)
            goto LABEL_57;
        }
        v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
        if (!v22)
          goto LABEL_87;
        v23 = *(_QWORD *)(v22 + 8);
        if (!v23)
          goto LABEL_87;
        v24 = (unsigned int *)(v23 + 8);
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 + 1, v24));
        v26 = *(_QWORD *)(v23 + 640);
        *((_DWORD *)this + 6) += 2;
        result = *(_QWORD *)(v26 + 200);
        *(_QWORD *)(v26 + 200) = this;
        if (result)
        {
          if (*(_DWORD *)(result + 24) == 2)
          {
            if ((*(_WORD *)(result + 30) & 0x400) == 0)
              result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v5);
          }
          else
          {
            *(_DWORD *)(result + 24) -= 2;
          }
        }
        *(_BYTE *)(v26 + 194) = 0;
        *(_BYTE *)(v26 + 190) = 0;
        *((_DWORD *)a2 + 5) |= 0x80u;
        *((_BYTE *)this + 241) = 1;
        v27 = *((_QWORD *)this + 31);
        if (v27)
        {
          v48 = WebCore::HTMLModelElement::flippedLocationInElementForMouseEvent(this, (int32x2_t *)a2);
          result = (*(uint64_t (**)(uint64_t, uint64_t *, double))(*(_QWORD *)v27 + 104))(v27, &v48, *((double *)a2 + 7));
        }
        do
        {
          v28 = __ldaxr(v24);
          v29 = --v28 == 0;
        }
        while (__stlxr(v28, v24));
      }
      else
      {
LABEL_57:
        v30 = *(_QWORD *)(StatusReg + 736);
        if (!v30 || (result = *(_QWORD *)(v30 + 96)) == 0)
          result = WebCore::threadGlobalDataSlow((WebCore *)result);
        v31 = *(_QWORD *)(result + 40);
        if (!v31)
        {
          v46 = result;
          result = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)result);
          v31 = *(_QWORD *)(v46 + 40);
        }
        if (v6 == *(WTF::StringImpl **)(v31 + 1232) && *((_BYTE *)this + 241))
        {
          *((_DWORD *)a2 + 5) |= 0x80u;
          v41 = *((_QWORD *)this + 31);
          if (v41)
          {
            v48 = WebCore::HTMLModelElement::flippedLocationInElementForMouseEvent(this, (int32x2_t *)a2);
            result = (*(uint64_t (**)(uint64_t, uint64_t *, double))(*(_QWORD *)v41 + 112))(v41, &v48, *((double *)a2 + 7));
          }
          goto LABEL_87;
        }
        v32 = *(_QWORD *)(StatusReg + 736);
        if (!v32 || (result = *(_QWORD *)(v32 + 96)) == 0)
          result = WebCore::threadGlobalDataSlow((WebCore *)result);
        v33 = *(_QWORD *)(result + 40);
        if (!v33)
        {
          v47 = result;
          result = (uint64_t)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)result);
          v33 = *(_QWORD *)(v47 + 40);
        }
        if (v6 != *(WTF::StringImpl **)(v33 + 1256))
          goto LABEL_87;
        if (!*((_BYTE *)this + 241))
          goto LABEL_87;
        v34 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 528);
        if (!v34)
          goto LABEL_87;
        v35 = *(_QWORD *)(v34 + 8);
        if (!v35)
          goto LABEL_87;
        v24 = (unsigned int *)(v35 + 8);
        do
          v36 = __ldaxr(v24);
        while (__stlxr(v36 + 1, v24));
        v37 = *(_QWORD *)(v35 + 640);
        result = *(_QWORD *)(v37 + 200);
        *(_QWORD *)(v37 + 200) = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 24) == 2)
          {
            if ((*(_WORD *)(result + 30) & 0x400) == 0)
              result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v5);
          }
          else
          {
            *(_DWORD *)(result + 24) -= 2;
          }
        }
        *(_BYTE *)(v37 + 194) = 0;
        *(_BYTE *)(v37 + 190) = 0;
        *((_DWORD *)a2 + 5) |= 0x80u;
        *((_BYTE *)this + 241) = 0;
        v38 = *((_QWORD *)this + 31);
        if (v38)
        {
          v48 = WebCore::HTMLModelElement::flippedLocationInElementForMouseEvent(this, (int32x2_t *)a2);
          result = (*(uint64_t (**)(uint64_t, uint64_t *, double))(*(_QWORD *)v38 + 120))(v38, &v48, *((double *)a2 + 7));
        }
        do
        {
          v39 = __ldaxr(v24);
          v29 = --v39 == 0;
        }
        while (__stlxr(v39, v24));
      }
      if (v29)
      {
        atomic_store(1u, v24);
        v40 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v40 = off_1E31FE290;
        v40[1] = v24;
        v48 = (uint64_t)v40;
        WTF::ensureOnMainThread();
        result = v48;
        v48 = 0;
        if (result)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
    }
  }
LABEL_87:
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      return WTF::StringImpl::destroy(v6, (WTF::StringImpl *)v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  return result;
}

uint64_t WebCore::HTMLModelElement::flippedLocationInElementForMouseEvent(WebCore::HTMLModelElement *this, int32x2_t *a2)
{
  unsigned int v2;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;

  if (a2[19].i8[0])
  {
    v6 = 0;
  }
  else
  {
    if (!a2[19].i8[1])
      WebCore::MouseRelatedEvent::computeRelativePosition(a2);
    v5 = ((int)(a2[17].i32[1] - (v2 & 0xFFFFFFC0) + 32) >> 6) + a2[17].i32[1] / 64;
    if (v5 >= -33554432)
    {
      v2 = v5 << 6;
      if (v5 <= 0x1FFFFFF)
        v6 = v2;
      else
        v6 = 0x7FFFFFFFLL;
    }
    else
    {
      v6 = 0x80000000;
    }
  }
  v7 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
  if (v7)
  {
    if ((*(_BYTE *)(v7 + 45) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1954CD678);
    }
    if (*(_BYTE *)(v7 + 46) == 24)
    {
      v8 = *(_DWORD *)(v7 + 164);
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1000))(v7);
      if (__OFSUB__(v8, v9))
        v10 = (v8 >> 31) + 0x7FFFFFFF;
      else
        v10 = v8 - v9;
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1008))(v7);
      if (__OFSUB__(v10, v11))
        v12 = (v10 >> 31) + 0x7FFFFFFF;
      else
        v12 = v10 - v11;
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 1360))(v7);
      v14 = v13 << 6;
      if (v13 < -33554432)
        v14 = 0x80000000;
      if (v13 > 0x1FFFFFF)
        v14 = 0x7FFFFFFF;
      v15 = __OFSUB__(v12, v14);
      v16 = v12 - v14;
      v2 = (v12 >> 31) + 0x7FFFFFFF;
      if (v15)
        v16 = (v12 >> 31) + 0x7FFFFFFF;
      v17 = v16 & ~(v16 >> 31);
      v15 = __OFSUB__(v17, (_DWORD)v6);
      v6 = (v17 - v6);
      if (v15)
        v6 = 0x7FFFFFFFLL;
    }
  }
  if (a2[19].i8[0])
  {
    v19 = 0;
  }
  else
  {
    if (!a2[19].i8[1])
      WebCore::MouseRelatedEvent::computeRelativePosition(a2);
    v18 = ((int)(a2[17].i32[0] - (v2 & 0xFFFFFFC0) + 32) >> 6) + a2[17].i32[0] / 64;
    if (v18 >= -33554432)
    {
      if (v18 <= 0x1FFFFFF)
        v19 = (v18 << 6);
      else
        v19 = 0x7FFFFFFFLL;
    }
    else
    {
      v19 = 0x80000000;
    }
  }
  return v19 | (v6 << 32);
}

WTF::StringImpl *WebCore::HTMLModelElement::getCamera(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  objc_class *v10;

  v2 = *(_QWORD *)(a1 + 248);
  if (v2)
  {
    v3 = *a2;
    *a2 = 0;
    v4 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v4 = &off_1E3364370;
    *((_QWORD *)v4 + 1) = v3;
    v8 = v4;
    (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v2 + 128))(v2, &v8);
    result = v8;
    v8 = 0;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    v6 = *a2;
    v9 = 0;
    v10 = 0;
    LOBYTE(v8) = 16;
    WebCore::DeferredPromise::reject(v6, (unsigned __int8 *)&v8, 0, &v10);
    result = v9;
    v9 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::HTMLModelElement::setCamera(uint64_t a1, uint64_t *a2, double a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  objc_class *v16;

  v5 = *(_QWORD *)(a1 + 248);
  if (v5)
  {
    v9 = *a2;
    *a2 = 0;
    v10 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v10 = &off_1E3364398;
    *((_QWORD *)v10 + 1) = v9;
    v14 = v10;
    (*(void (**)(uint64_t, WTF::StringImpl **, double, double, double))(*(_QWORD *)v5 + 136))(v5, &v14, a3, a4, a5);
    result = v14;
    v14 = 0;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    v12 = *a2;
    v15 = 0;
    v16 = 0;
    LOBYTE(v14) = 16;
    WebCore::DeferredPromise::reject(v12, (unsigned __int8 *)&v14, 0, &v16);
    result = v15;
    v15 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

_QWORD *WebCore::HTMLModelElement::isPlayingAnimation(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;

  v2 = result[31];
  if (v2)
  {
    v3 = *a2;
    *a2 = 0;
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = &off_1E33643C0;
    v4[1] = v3;
    v8 = v4;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v2 + 144))(v2, &v8);
    result = v8;
    v8 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  else
  {
    v5 = *a2;
    v6 = *(_QWORD *)(*a2 + 24);
    if (v6 && *(_QWORD *)v6 && (*(_BYTE *)(v6 + 8) & 3) == 0)
    {
      v7 = **(uint64_t ***)(v5 + 32);
      JSC::JSLockHolder::JSLockHolder();
      WebCore::DeferredPromise::callFunction(v5, v7, 1, (objc_class *)0xA);
      return (_QWORD *)MEMORY[0x19AEA32A0](&v8);
    }
  }
  return result;
}

_QWORD *WebCore::HTMLModelElement::playAnimation(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;

  v2 = result[31];
  if (v2)
  {
    v3 = *a2;
    *a2 = 0;
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = &off_1E33643E8;
    v4[1] = v3;
    v8 = v4;
    (*(void (**)(uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v2 + 152))(v2, 1, &v8);
    result = v8;
    v8 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  else
  {
    v5 = *a2;
    v6 = *(_QWORD *)(*a2 + 24);
    if (v6 && *(_QWORD *)v6 && (*(_BYTE *)(v6 + 8) & 3) == 0)
    {
      v7 = **(uint64_t ***)(v5 + 32);
      JSC::JSLockHolder::JSLockHolder();
      WebCore::DeferredPromise::callFunction(v5, v7, 1, (objc_class *)0xA);
      return (_QWORD *)MEMORY[0x19AEA32A0](&v8);
    }
  }
  return result;
}

_QWORD *WebCore::HTMLModelElement::pauseAnimation(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;

  v2 = result[31];
  if (v2)
  {
    v3 = *a2;
    *a2 = 0;
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = &off_1E33643E8;
    v4[1] = v3;
    v8 = v4;
    (*(void (**)(uint64_t, _QWORD, _QWORD **))(*(_QWORD *)v2 + 152))(v2, 0, &v8);
    result = v8;
    v8 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  else
  {
    v5 = *a2;
    v6 = *(_QWORD *)(*a2 + 24);
    if (v6 && *(_QWORD *)v6 && (*(_BYTE *)(v6 + 8) & 3) == 0)
    {
      v7 = **(uint64_t ***)(v5 + 32);
      JSC::JSLockHolder::JSLockHolder();
      WebCore::DeferredPromise::callFunction(v5, v7, 1, (objc_class *)0xA);
      return (_QWORD *)MEMORY[0x19AEA32A0](&v8);
    }
  }
  return result;
}

_QWORD *WebCore::HTMLModelElement::isLoopingAnimation(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;

  v2 = result[31];
  if (v2)
  {
    v3 = *a2;
    *a2 = 0;
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = &off_1E3364410;
    v4[1] = v3;
    v8 = v4;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v2 + 160))(v2, &v8);
    result = v8;
    v8 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  else
  {
    v5 = *a2;
    v6 = *(_QWORD *)(*a2 + 24);
    if (v6 && *(_QWORD *)v6 && (*(_BYTE *)(v6 + 8) & 3) == 0)
    {
      v7 = **(uint64_t ***)(v5 + 32);
      JSC::JSLockHolder::JSLockHolder();
      WebCore::DeferredPromise::callFunction(v5, v7, 1, (objc_class *)0xA);
      return (_QWORD *)MEMORY[0x19AEA32A0](&v8);
    }
  }
  return result;
}

_QWORD *WebCore::HTMLModelElement::setIsLoopingAnimation(_QWORD *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;

  v3 = result[31];
  if (v3)
  {
    v5 = *a3;
    *a3 = 0;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = &off_1E3364438;
    v6[1] = v5;
    v10 = v6;
    (*(void (**)(uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v3 + 168))(v3, a2, &v10);
    result = v10;
    v10 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  else
  {
    v7 = *a3;
    v8 = *(_QWORD *)(*a3 + 24);
    if (v8 && *(_QWORD *)v8 && (*(_BYTE *)(v8 + 8) & 3) == 0)
    {
      v9 = **(uint64_t ***)(v7 + 32);
      JSC::JSLockHolder::JSLockHolder();
      WebCore::DeferredPromise::callFunction(v7, v9, 1, (objc_class *)0xA);
      return (_QWORD *)MEMORY[0x19AEA32A0](&v10);
    }
  }
  return result;
}

_QWORD *WebCore::HTMLModelElement::animationDuration(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;

  v2 = result[31];
  if (v2)
  {
    v3 = *a2;
    *a2 = 0;
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = &off_1E3364460;
    v4[1] = v3;
    v8 = v4;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v2 + 176))(v2, &v8);
    result = v8;
    v8 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  else
  {
    v5 = *a2;
    v6 = *(_QWORD *)(*a2 + 24);
    if (v6 && *(_QWORD *)v6 && (*(_BYTE *)(v6 + 8) & 3) == 0)
    {
      v7 = **(uint64_t ***)(v5 + 32);
      JSC::JSLockHolder::JSLockHolder();
      WebCore::DeferredPromise::callFunction(v5, v7, 1, (objc_class *)0xA);
      return (_QWORD *)MEMORY[0x19AEA32A0](&v8);
    }
  }
  return result;
}

_QWORD *WebCore::HTMLModelElement::animationCurrentTime(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;

  v2 = result[31];
  if (v2)
  {
    v3 = *a2;
    *a2 = 0;
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = &off_1E3364488;
    v4[1] = v3;
    v8 = v4;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v2 + 184))(v2, &v8);
    result = v8;
    v8 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  else
  {
    v5 = *a2;
    v6 = *(_QWORD *)(*a2 + 24);
    if (v6 && *(_QWORD *)v6 && (*(_BYTE *)(v6 + 8) & 3) == 0)
    {
      v7 = **(uint64_t ***)(v5 + 32);
      JSC::JSLockHolder::JSLockHolder();
      WebCore::DeferredPromise::callFunction(v5, v7, 1, (objc_class *)0xA);
      return (_QWORD *)MEMORY[0x19AEA32A0](&v8);
    }
  }
  return result;
}

_QWORD *WebCore::HTMLModelElement::setAnimationCurrentTime(_QWORD *result, uint64_t *a2, double a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;

  v3 = result[31];
  if (v3)
  {
    v5 = *a2;
    *a2 = 0;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = &off_1E33644B0;
    v6[1] = v5;
    v10 = v6;
    (*(void (**)(uint64_t, _QWORD **, double))(*(_QWORD *)v3 + 192))(v3, &v10, a3);
    result = v10;
    v10 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  else
  {
    v7 = *a2;
    v8 = *(_QWORD *)(*a2 + 24);
    if (v8 && *(_QWORD *)v8 && (*(_BYTE *)(v8 + 8) & 3) == 0)
    {
      v9 = **(uint64_t ***)(v7 + 32);
      JSC::JSLockHolder::JSLockHolder();
      WebCore::DeferredPromise::callFunction(v7, v9, 1, (objc_class *)0xA);
      return (_QWORD *)MEMORY[0x19AEA32A0](&v10);
    }
  }
  return result;
}

_QWORD *WebCore::HTMLModelElement::hasAudio(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;

  v2 = result[31];
  if (v2)
  {
    v3 = *a2;
    *a2 = 0;
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = &off_1E33644D8;
    v4[1] = v3;
    v8 = v4;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v2 + 144))(v2, &v8);
    result = v8;
    v8 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  else
  {
    v5 = *a2;
    v6 = *(_QWORD *)(*a2 + 24);
    if (v6 && *(_QWORD *)v6 && (*(_BYTE *)(v6 + 8) & 3) == 0)
    {
      v7 = **(uint64_t ***)(v5 + 32);
      JSC::JSLockHolder::JSLockHolder();
      WebCore::DeferredPromise::callFunction(v5, v7, 1, (objc_class *)0xA);
      return (_QWORD *)MEMORY[0x19AEA32A0](&v8);
    }
  }
  return result;
}

_QWORD *WebCore::HTMLModelElement::isMuted(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;

  v2 = result[31];
  if (v2)
  {
    v3 = *a2;
    *a2 = 0;
    v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v4 = &off_1E3364500;
    v4[1] = v3;
    v8 = v4;
    (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v2 + 144))(v2, &v8);
    result = v8;
    v8 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  else
  {
    v5 = *a2;
    v6 = *(_QWORD *)(*a2 + 24);
    if (v6 && *(_QWORD *)v6 && (*(_BYTE *)(v6 + 8) & 3) == 0)
    {
      v7 = **(uint64_t ***)(v5 + 32);
      JSC::JSLockHolder::JSLockHolder();
      WebCore::DeferredPromise::callFunction(v5, v7, 1, (objc_class *)0xA);
      return (_QWORD *)MEMORY[0x19AEA32A0](&v8);
    }
  }
  return result;
}

_QWORD *WebCore::HTMLModelElement::setIsMuted(_QWORD *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;

  v3 = result[31];
  if (v3)
  {
    v5 = *a3;
    *a3 = 0;
    v6 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v6 = &off_1E3364528;
    v6[1] = v5;
    v10 = v6;
    (*(void (**)(uint64_t, uint64_t, _QWORD **))(*(_QWORD *)v3 + 216))(v3, a2, &v10);
    result = v10;
    v10 = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  else
  {
    v7 = *a3;
    v8 = *(_QWORD *)(*a3 + 24);
    if (v8 && *(_QWORD *)v8 && (*(_BYTE *)(v8 + 8) & 3) == 0)
    {
      v9 = **(uint64_t ***)(v7 + 32);
      JSC::JSLockHolder::JSLockHolder();
      WebCore::DeferredPromise::callFunction(v7, v9, 1, (objc_class *)0xA);
      return (_QWORD *)MEMORY[0x19AEA32A0](&v10);
    }
  }
  return result;
}

BOOL WebCore::HTMLModelElement::virtualHasPendingActivity(WebCore::HTMLModelElement *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 26);
  return v1 && *(_QWORD *)(v1 + 8) != 0;
}

BOOL `non-virtual thunk to'WebCore::HTMLModelElement::virtualHasPendingActivity(WebCore::HTMLModelElement *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 8);
  return v1 && *(_QWORD *)(v1 + 8) != 0;
}

WTF::StringImpl *WebCore::HTMLModelElement::collectPresentationalHintsForAttribute(WebCore::HTMLModelElement *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3, WebCore::MutableStyleProperties *a4)
{
  WTF::StringImpl *result;
  uint64_t v8;
  unsigned __int16 *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned __int16 *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 *v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int16 *v31;
  unint64_t v32;
  unsigned int v33;
  double v34;
  char v35;
  char v36;
  double v37;
  char v38;
  char v39;

  if (*(_QWORD *)a2 != WebCore::HTMLNames::widthAttr)
  {
    if (*(_QWORD *)a2 != WebCore::HTMLNames::heightAttr)
      return WebCore::HTMLElement::collectPresentationalHintsForAttribute(this, a2, a3, a4);
    v21 = *(_QWORD *)a3;
    if (*(_QWORD *)a3)
    {
      v22 = *(unsigned __int16 **)(v21 + 8);
      v23 = *(unsigned int *)(v21 + 4) | ((unint64_t)((*(_DWORD *)(v21 + 16) >> 2) & 1) << 32);
    }
    else
    {
      v22 = 0;
      v23 = 0x100000000;
    }
    WebCore::HTMLElement::addHTMLLengthToStyle((uint64_t)this, a4, 393, v22, v23, 1);
    v24 = *((_QWORD *)this + 13);
    if (v24)
    {
      v25 = *(_DWORD *)(v24 + 4);
      if ((v25 & 1) != 0)
      {
        v26 = *(_QWORD *)(v24 + 40);
        LODWORD(v27) = *(_DWORD *)(v24 + 52);
        if ((_DWORD)v27)
        {
LABEL_23:
          v27 = v27;
          v28 = (uint64_t *)(v26 + 8);
          while (1)
          {
            v29 = *(v28 - 1);
            if (v29 == WebCore::HTMLNames::widthAttr
              || *(_QWORD *)(v29 + 24) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 24)
              && *(_QWORD *)(v29 + 32) == *(_QWORD *)(WebCore::HTMLNames::widthAttr + 32))
            {
              break;
            }
            v28 += 2;
            if (!--v27)
            {
              v28 = (uint64_t *)MEMORY[0x1E0CBF2F8];
              break;
            }
          }
LABEL_42:
          v11 = *v28;
          if (v11)
          {
            v33 = *(_DWORD *)(v11 + 16);
            v13 = *(unsigned __int16 **)(v11 + 8);
            v11 = *(unsigned int *)(v11 + 4);
            v14 = (unint64_t)((v33 >> 2) & 1) << 32;
          }
          else
          {
            v13 = 0;
            v14 = 0x100000000;
          }
          v30 = *(_QWORD *)a3;
          if (!*(_QWORD *)a3)
            goto LABEL_45;
          goto LABEL_33;
        }
      }
      else
      {
        v26 = v24 + 32;
        LODWORD(v27) = v25 >> 5;
        if ((_DWORD)v27)
          goto LABEL_23;
      }
    }
    v28 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_42;
  }
  v8 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    v9 = *(unsigned __int16 **)(v8 + 8);
    v10 = *(unsigned int *)(v8 + 4) | ((unint64_t)((*(_DWORD *)(v8 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v9 = 0;
    v10 = 0x100000000;
  }
  WebCore::HTMLElement::addHTMLLengthToStyle((uint64_t)this, a4, 450, v9, v10, 1);
  v11 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
  {
    v12 = *(_DWORD *)(v11 + 16);
    v13 = *(unsigned __int16 **)(v11 + 8);
    v11 = *(unsigned int *)(v11 + 4);
    v14 = (unint64_t)((v12 >> 2) & 1) << 32;
  }
  else
  {
    v13 = 0;
    v14 = 0x100000000;
  }
  v15 = *((_QWORD *)this + 13);
  if (!v15)
    goto LABEL_31;
  v16 = *(_DWORD *)(v15 + 4);
  if ((v16 & 1) == 0)
  {
    v17 = v15 + 32;
    LODWORD(v18) = v16 >> 5;
    if ((_DWORD)v18)
      goto LABEL_11;
LABEL_31:
    v19 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_32;
  }
  v17 = *(_QWORD *)(v15 + 40);
  LODWORD(v18) = *(_DWORD *)(v15 + 52);
  if (!(_DWORD)v18)
    goto LABEL_31;
LABEL_11:
  v18 = v18;
  v19 = (uint64_t *)(v17 + 8);
  while (1)
  {
    v20 = *(v19 - 1);
    if (v20 == WebCore::HTMLNames::heightAttr
      || *(_QWORD *)(v20 + 24) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 24)
      && *(_QWORD *)(v20 + 32) == *(_QWORD *)(WebCore::HTMLNames::heightAttr + 32))
    {
      break;
    }
    v19 += 2;
    if (!--v18)
    {
      v19 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_32:
  v30 = *v19;
  if (!v30)
  {
LABEL_45:
    v31 = 0;
    v32 = 0x100000000;
    goto LABEL_34;
  }
LABEL_33:
  v31 = *(unsigned __int16 **)(v30 + 8);
  v32 = *(unsigned int *)(v30 + 4) | ((unint64_t)((*(_DWORD *)(v30 + 16) >> 2) & 1) << 32);
LABEL_34:
  result = (WTF::StringImpl *)WebCore::parseHTMLDimensionInternal((uint64_t)&v37, v13, v14 | v11, 0);
  if (v39)
  {
    if (v38)
    {
      result = (WTF::StringImpl *)WebCore::parseHTMLDimensionInternal((uint64_t)&v34, v31, v32, 0);
      if (v36)
      {
        if (v35)
          return (WTF::StringImpl *)WebCore::HTMLElement::addParsedWidthAndHeightToAspectRatioList(result, v37, v34, a4);
      }
    }
  }
  return result;
}

uint64_t WebCore::HTMLModelElement::hasPresentationalHintsForAttribute(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  int v5;
  BOOL v6;

  v2 = *a2;
  if (*a2 == WebCore::HTMLNames::widthAttr || v2 == WebCore::HTMLNames::heightAttr)
    return 1;
  v5 = *(unsigned __int16 *)(v2 + 10);
  result = 1;
  if (v5 > 504)
  {
    if (v5 == 949 || v5 == 505 || v5 == 947)
      return result;
    return 0;
  }
  v6 = (v5 - 411) > 0x20 || ((1 << (v5 + 101)) & 0x100200001) == 0;
  if (v6 && v5 != 286)
    return 0;
  return result;
}

BOOL WebCore::HTMLModelElement::isURLAttribute(uint64_t a1, _QWORD *a2)
{
  return *a2 == WebCore::HTMLNames::srcAttr;
}

uint64_t WebCore::ModelPlayer::supportsMouseInteraction(WebCore::ModelPlayer *this)
{
  return 0;
}

uint64_t WebCore::ModelPlayer::supportsDragging(WebCore::ModelPlayer *this)
{
  return 1;
}

uint64_t WebCore::ModelPlayer::supportsTransform()
{
  return 0;
}

void WebCore::ModelPlayer::inlinePreviewUUIDForTesting(_QWORD *a1@<X8>)
{
  _DWORD *v2;

  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

void WebCore::LibWebRTCSctpTransportBackendObserver::~LibWebRTCSctpTransportBackendObserver(WebCore::LibWebRTCSctpTransportBackendObserver *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  v3 = (unsigned int *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::LibWebRTCSctpTransportBackend::backend(WebCore::LibWebRTCSctpTransportBackend *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t WebCore::HTMLModelElement::ref(uint64_t this)
{
  *(_DWORD *)(this + 24) += 2;
  return this;
}

unsigned int *WebCore::HTMLModelElement::deref(unsigned int *this, void *a2)
{
  if (this[6] == 2)
  {
    if ((*((_WORD *)this + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
  }
  else
  {
    this[6] -= 2;
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::HTMLModelElement::ref(uint64_t this)
{
  *(_DWORD *)(this - 120) += 2;
  return this;
}

unsigned int *`non-virtual thunk to'WebCore::HTMLModelElement::deref(unsigned int *this, void *a2)
{
  if (*(this - 30) == 2)
  {
    if ((*((_WORD *)this - 57) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)(this - 36), a2);
  }
  else
  {
    *(this - 30) -= 2;
  }
  return this;
}

void webrtc::RtpCodec::mime_type(webrtc::RtpCodec *this@<X0>, std::string *a2@<X8>)
{
  std::string::size_type size;
  std::string::size_type v5;
  std::string *v6;
  std::string::size_type v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  BOOL v12;
  std::string::size_type v13;
  std::string::size_type v14;
  std::string *v15;
  char *v16;
  std::string::size_type v17;
  std::string v18;
  std::string v19;

  cricket::MediaTypeToString();
  size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = 22;
  else
    v5 = (v18.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v18.__r_.__value_.__l.__size_;
  if (v5 == size)
  {
    std::string::__grow_by_and_replace(&v18, v5, 1uLL, v5, v5, 0, 1uLL, "/");
  }
  else
  {
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v18;
    else
      v6 = (std::string *)v18.__r_.__value_.__r.__words[0];
    if ((char *)v6 + size <= "/" && (char *)&v6->__r_.__value_.__l.__data_ + size + 1 > "/")
      goto LABEL_44;
    v6->__r_.__value_.__s.__data_[size] = 47;
    v8 = size + 1;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      v18.__r_.__value_.__l.__size_ = v8;
    else
      *((_BYTE *)&v18.__r_.__value_.__s + 23) = v8 & 0x7F;
    v6->__r_.__value_.__s.__data_[v8] = 0;
  }
  v19 = v18;
  memset(&v18, 0, sizeof(v18));
  v9 = *((char *)this + 31);
  if (v9 < 0)
  {
    v10 = (const std::string::value_type *)*((_QWORD *)this + 1);
    v11 = *((_QWORD *)this + 2);
    v12 = v11 == 0;
    if (!v10 && v11)
      goto LABEL_44;
  }
  else
  {
    v10 = (char *)this + 8;
    v11 = *((unsigned __int8 *)this + 31);
    v12 = v9 == 0;
  }
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = 22;
  else
    v13 = (v19.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
  else
    v14 = v19.__r_.__value_.__l.__size_;
  if (v13 - v14 < v11)
  {
    std::string::__grow_by_and_replace(&v19, v13, v14 + v11 - v13, v14, v14, 0, v11, v10);
    goto LABEL_41;
  }
  if (!v12)
  {
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v19;
    else
      v15 = (std::string *)v19.__r_.__value_.__r.__words[0];
    v16 = (char *)v15 + v14;
    if ((char *)v15 + v14 > v10 || &v16[v11] <= v10)
    {
      memmove(v16, v10, v11);
      v17 = v14 + v11;
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        v19.__r_.__value_.__l.__size_ = v14 + v11;
      else
        *((_BYTE *)&v19.__r_.__value_.__s + 23) = v17 & 0x7F;
      v15->__r_.__value_.__s.__data_[v17] = 0;
      goto LABEL_41;
    }
LABEL_44:
    __break(1u);
    return;
  }
LABEL_41:
  *a2 = v19;
  memset(&v19, 0, sizeof(v19));
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
}

uint64_t std::vector<webrtc::RtpEncodingParameters>::__push_back_slow_path<webrtc::RtpEncodingParameters>(uint64_t *a1)
{
  unint64_t v1;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;

  v1 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 4) + 1;
  if (v1 > 0xF0F0F0F0F0F0F0)
    abort();
  if (0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 4) > v1)
    v1 = 0xE1E1E1E1E1E1E1E2 * ((a1[2] - *a1) >> 4);
  if (0xF0F0F0F0F0F0F0F1 * ((a1[2] - *a1) >> 4) >= 0x78787878787878)
    v3 = 0xF0F0F0F0F0F0F0;
  else
    v3 = v1;
  if (!v3)
  {
    __break(1u);
LABEL_20:
    std::__throw_bad_array_new_length[abi:sn180100]();
  }
  if (v3 > 0xF0F0F0F0F0F0F0)
    goto LABEL_20;
  v4 = (char *)operator new(272 * v3) + 272 * v3;
  v5 = webrtc::RtpEncodingParameters::RtpEncodingParameters();
  v6 = v5 + 272;
  v8 = (char *)*a1;
  v7 = (char *)a1[1];
  if (v7 == (char *)*a1)
  {
    *a1 = v5;
    a1[1] = v6;
    a1[2] = (uint64_t)v4;
  }
  else
  {
    do
    {
      v7 -= 272;
      v9 = webrtc::RtpEncodingParameters::RtpEncodingParameters();
    }
    while (v7 != v8);
    v7 = (char *)*a1;
    v10 = (char *)a1[1];
    *a1 = v9;
    a1[1] = v6;
    a1[2] = (uint64_t)v4;
    while (v10 != v7)
    {
      v10 -= 272;
      MEMORY[0x19AEA5CD0](v10);
    }
  }
  if (v7)
    operator delete(v7);
  return v6;
}

void WebCore::CachedRawResourceClient::~CachedRawResourceClient(WebCore::CachedRawResourceClient *this, void *a2)
{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

{
  uint64_t v3;
  WTF *v4;

  *(_QWORD *)this = &off_1E33F87C8;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    *(_QWORD *)(v3 + 8) = 0;
    v4 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
        WTF::fastFree(v4, a2);
      else
        --*(_DWORD *)v4;
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  JUMPOUT(0x19AEA7644);
}

uint64_t *WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::HTMLModelElement>>::~DOMPromiseProxyWithResolveCallback(uint64_t *a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v6;
  uint64_t v7;
  _DWORD **v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD **v12;

  v3 = *((unsigned int *)a1 + 13);
  if ((_DWORD)v3)
  {
    v9 = (_DWORD **)a1[5];
    v10 = 8 * v3;
    do
    {
      v11 = *v9;
      *v9 = 0;
      if (v11)
      {
        v12 = v9;
        if (v11[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
        else
          --v11[4];
        v9 = v12;
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  v4 = (WTF *)a1[5];
  if (a1 + 7 != (uint64_t *)v4 && v4 != 0)
  {
    a1[5] = 0;
    *((_DWORD *)a1 + 12) = 0;
    WTF::fastFree(v4, a2);
  }
  if (*((_BYTE *)a1 + 32))
  {
    if (*((_BYTE *)a1 + 24))
    {
      v6 = (WTF::StringImpl *)a1[2];
      a1[2] = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v6 -= 2;
      }
    }
  }
  v7 = *a1;
  *a1 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCSctpTransportBackendObserver::start(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  *a1 = &off_1E3364220;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)(v3 + 8));
      v8 = *(unsigned int **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
      v11 = *(_QWORD *)(v3 + 16);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCSctpTransportBackendObserver::start(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  *(_QWORD *)this = &off_1E3364220;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)(v3 + 8));
      v8 = *(unsigned int **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
      v11 = *(_QWORD *)(v3 + 16);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::LibWebRTCSctpTransportBackendObserver::start(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  void (***v5)(_QWORD);
  __int128 v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  void (***v10)(_QWORD);
  _BYTE v11[21];
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 8);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 16) + 48))(*(_QWORD *)(v2 + 16), v2);
  v3 = *(WTF **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  v8 = v3;
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v2 + 16) + 40))(&v9);
  v4 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v4 = off_1E3364248;
  *(_QWORD *)(v4 + 8) = v8;
  *(_DWORD *)(v4 + 16) = v9;
  v5 = v10;
  *(_QWORD *)(v4 + 24) = v10;
  if (v5)
    (**v5)(v5);
  v6 = *(_OWORD *)v11;
  *(_QWORD *)(v4 + 45) = *(_QWORD *)&v11[13];
  *(_OWORD *)(v4 + 32) = v6;
  v12 = v4;
  WTF::callOnMainThread();
  v7 = v12;
  v12 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  webrtc::SctpTransportInformation::~SctpTransportInformation((webrtc::SctpTransportInformation *)&v9);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCSctpTransportBackendObserver::start(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  *a1 = off_1E3364248;
  webrtc::SctpTransportInformation::~SctpTransportInformation((webrtc::SctpTransportInformation *)(a1 + 2));
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)(v3 + 8));
      v8 = *(unsigned int **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, v2);
        }
      }
      v11 = *(_QWORD *)(v3 + 16);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      WTF::fastFree((WTF *)v3, v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCSctpTransportBackendObserver::start(void)::$_0::operator()(void)::{lambda(void)#1},void>::~CallableWrapper(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  *a1 = off_1E3364248;
  webrtc::SctpTransportInformation::~SctpTransportInformation((webrtc::SctpTransportInformation *)(a1 + 2));
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)(v3 + 8));
      v8 = *(unsigned int **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, v2);
        }
      }
      v11 = *(_QWORD *)(v3 + 16);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      WTF::fastFree((WTF *)v3, v2);
    }
  }
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCSctpTransportBackendObserver::start(void)::$_0::operator()(void)::{lambda(void)#1},void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 24);
  if (v1)
  {
    v2 = result;
    result = *(_QWORD *)(v1 + 8);
    if (result)
    {
      v3 = *(int *)(v2 + 16);
      if (v3 >= 5)
      {
        result = 56;
        __break(0xC471u);
      }
      else
      {
        v4 = *(_BYTE *)(v2 + 40) == 0;
        v5 = *(_BYTE *)(v2 + 40) != 0;
        v6 = *(_QWORD *)(v2 + 32);
        v7 = *(_QWORD *)(v2 + 48);
        if (v4)
          v8 = 0;
        else
          v8 = v6;
        if ((v7 & 0xFF00000000) != 0)
          v9 = (unsigned __int16)v7 | 0x10000;
        else
          v9 = 0;
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _BOOL8, uint64_t))(*(_QWORD *)result + 16))(result, dword_1968DED90[v3], v8, v5, v9);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCSctpTransportBackendObserver::stop(void)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  v3 = a1[1];
  *a1 = &off_1E3364270;
  a1[1] = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)(v3 + 8));
      v8 = *(unsigned int **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
      v11 = *(_QWORD *)(v3 + 16);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCSctpTransportBackendObserver::stop(void)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3364270;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)(v3 + 8));
      v8 = *(unsigned int **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
      v11 = *(_QWORD *)(v3 + 16);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCSctpTransportBackendObserver::stop(void)::$_0,void>::call(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 16) + 56))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16));
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCSctpTransportBackendObserver::OnStateChange(webrtc::SctpTransportInformation)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  *a1 = off_1E3364298;
  webrtc::SctpTransportInformation::~SctpTransportInformation((webrtc::SctpTransportInformation *)(a1 + 2));
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)(v3 + 8));
      v8 = *(unsigned int **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, v2);
        }
      }
      v11 = *(_QWORD *)(v3 + 16);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      WTF::fastFree((WTF *)v3, v2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCSctpTransportBackendObserver::OnStateChange(webrtc::SctpTransportInformation)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  *a1 = off_1E3364298;
  webrtc::SctpTransportInformation::~SctpTransportInformation((webrtc::SctpTransportInformation *)(a1 + 2));
  v3 = a1[1];
  a1[1] = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, (unsigned int *)(v3 + 8));
      v8 = *(unsigned int **)(v3 + 24);
      *(_QWORD *)(v3 + 24) = 0;
      if (v8)
      {
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, v2);
        }
      }
      v11 = *(_QWORD *)(v3 + 16);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      WTF::fastFree((WTF *)v3, v2);
    }
  }
  return WTF::fastFree((WTF *)a1, v2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCSctpTransportBackendObserver::OnStateChange(webrtc::SctpTransportInformation)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 8) + 24);
  if (v1)
  {
    v2 = result;
    result = *(_QWORD *)(v1 + 8);
    if (result)
    {
      v3 = *(int *)(v2 + 16);
      if (v3 >= 5)
      {
        result = 56;
        __break(0xC471u);
      }
      else
      {
        v4 = *(_BYTE *)(v2 + 40) == 0;
        v5 = *(_BYTE *)(v2 + 40) != 0;
        v6 = *(_QWORD *)(v2 + 32);
        v7 = *(_QWORD *)(v2 + 48);
        if (v4)
          v8 = 0;
        else
          v8 = v6;
        if ((v7 & 0xFF00000000) != 0)
          v9 = (unsigned __int16)v7 | 0x10000;
        else
          v9 = 0;
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _BOOL8, uint64_t))(*(_QWORD *)result + 16))(result, dword_1968DED90[v3], v8, v5, v9);
      }
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCStatsCollector::~LibWebRTCStatsCollector()::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  *a1 = &off_1E33642C0;
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCStatsCollector::~LibWebRTCStatsCollector()::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33642C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCStatsCollector::~LibWebRTCStatsCollector()::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  v6 = 0;
  v1 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 16))(v1, &v6);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  v3 = v6;
  if (v6)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v3 + 16, *(char **)(v3 + 24));
      return MEMORY[0x19AEA7644](v3, 0x1020C4043D65406);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCStatsCollector::OnStatsDelivered(webrtc::scoped_refptr<webrtc::RTCStatsReport const> const&)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;

  *a1 = &off_1E33642E8;
  v2 = a1[3];
  if (v2)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v2 + 16, *(char **)(v2 + 24));
      MEMORY[0x19AEA7644](v2, 0x1020C4043D65406);
    }
  }
  v5 = a1[2];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCStatsCollector::OnStatsDelivered(webrtc::scoped_refptr<webrtc::RTCStatsReport const> const&)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E33642E8;
  v3 = *((_QWORD *)this + 3);
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v3 + 16, *(char **)(v3 + 24));
      MEMORY[0x19AEA7644](v3, 0x1020C4043D65406);
    }
  }
  v6 = *((_QWORD *)this + 2);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCStatsCollector::OnStatsDelivered(webrtc::scoped_refptr<webrtc::RTCStatsReport const> const&)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 8);
  *(_QWORD *)(v1 + 8) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, a1 + 24);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::LibWebRTCStatsCollector::createReport(webrtc::scoped_refptr<webrtc::RTCStatsReport const> const&)::$_0,void,WebCore::DOMMapAdapter &>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;

  *a1 = &off_1E3364310;
  v2 = a1[1];
  if (v2)
  {
    do
    {
      v3 = __ldaxr((unsigned int *)v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v2));
    if (!v4)
    {
      std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v2 + 16, *(char **)(v2 + 24));
      MEMORY[0x19AEA7644](v2, 0x1020C4043D65406);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::LibWebRTCStatsCollector::createReport(webrtc::scoped_refptr<webrtc::RTCStatsReport const> const&)::$_0,void,WebCore::DOMMapAdapter &>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  *(_QWORD *)this = &off_1E3364310;
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      std::__tree<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<webrtc::RTCStats const>>>>::destroy(v3 + 16, *(char **)(v3 + 24));
      MEMORY[0x19AEA7644](v3, 0x1020C4043D65406);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::LibWebRTCStatsCollector::createReport(webrtc::scoped_refptr<webrtc::RTCStatsReport const> const&)::$_0,void,WebCore::DOMMapAdapter &>::call(uint64_t a1, uint64_t a2)
{
  webrtc::RTCStatsReport *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  int v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  int v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  int v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  int v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  int v59;
  _DWORD *v60;
  uint64_t v61;
  _DWORD *v62;
  uint64_t v63;
  unsigned __int16 *v64;
  uint64_t v65;
  int v66;
  int v67;
  BOOL v68;
  _DWORD *v69;
  int v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  WTF::StringImpl *v76;
  int v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  int v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  WTF::StringImpl *v84;
  int v85;
  WTF::StringImpl *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  unint64_t v91;
  int v92;
  uint64_t v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  WTF::StringImpl *v96;
  int v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  int v100;
  uint64_t v101;
  WTF::StringImpl *v102;
  int v103;
  unsigned int *v104;
  uint64_t v105;
  unsigned int *v106;
  uint64_t v107;
  unsigned int *v108;
  uint64_t v109;
  unsigned int v110;
  int v111;
  unsigned int *v113;
  uint64_t v114;
  unsigned int v115;
  int v116;
  unsigned int v118;
  int v119;
  uint64_t v120;
  WTF::StringImpl *v121;
  uint64_t v122;
  WTF::StringImpl *v123;
  int v124;
  WTF::StringImpl *v125;
  uint64_t v126;
  WTF::StringImpl *v127;
  int v128;
  WTF::StringImpl *v129;
  uint64_t v130;
  WTF::StringImpl *v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  BOOL v139;
  int *v140;
  uint64_t v141;
  int v142;
  int v143;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v150;
  uint64_t v151;
  int v152;
  int v153;
  unint64_t v155;
  int v156;
  int v157;
  int v158;
  uint64_t v159;
  WTF::StringImpl *v160;
  uint64_t v161;
  WTF::StringImpl *v162;
  int v163;
  WTF::StringImpl *v164;
  uint64_t v165;
  WTF::StringImpl *v166;
  int v167;
  WTF::StringImpl *v168;
  uint64_t v169;
  WTF::StringImpl *v170;
  int v171;
  WTF::StringImpl *v172;
  uint64_t v173;
  WTF::StringImpl *v174;
  int v175;
  WTF::StringImpl *v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  uint64_t v180;
  unint64_t v181;
  WTF::StringImpl *v182;
  unint64_t v183;
  _QWORD *v184;
  WTF *v185;
  uint64_t i;
  uint64_t v187;
  _QWORD *v188;
  _QWORD *v189;
  _QWORD *v190;
  WTF *v191;
  uint64_t v192;
  WTF::StringImpl *v193;
  WTF *v194;
  WTF::StringImpl *v195;
  WTF::StringImpl *v196;
  WTF::StringImpl *v197;
  int v198;
  WTF::StringImpl *v199;
  uint64_t v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  unint64_t v204;
  WTF::StringImpl *v205;
  WTF *v206;
  uint64_t v207;
  WTF::StringImpl *v208;
  WTF *v209;
  WTF::StringImpl *v210;
  WTF::StringImpl *v211;
  WTF::StringImpl *v212;
  WTF::StringImpl *v213;
  WTF::StringImpl *v214;
  WTF::StringImpl *v215;
  WTF::StringImpl *v216;
  WTF::StringImpl *v217;
  WTF::StringImpl *v218;
  WTF::StringImpl *v219;
  uint64_t v220;
  WTF::StringImpl *v221;
  uint64_t v222;
  WTF::StringImpl *v223;
  int v224;
  WTF::StringImpl *v225;
  uint64_t v226;
  WTF::StringImpl *v227;
  int v228;
  WTF::StringImpl *v229;
  WTF::StringImpl *v230;
  WTF::StringImpl *v231;
  int v232;
  WTF::StringImpl *v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  unint64_t v238;
  WTF::StringImpl *v239;
  unsigned __int8 *v240;
  unsigned int v241;
  WTF::StringImpl *v242;
  WTF::StringImpl *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t *v247;
  uint64_t v248;
  int v249;
  int v250;
  BOOL v251;
  uint64_t *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  BOOL v256;
  uint64_t v257;
  int v258;
  BOOL v259;
  uint64_t v260;
  int v261;
  WTF::StringImpl *v262;
  WTF::StringImpl *v263;
  WTF::StringImpl *v264;
  WTF::StringImpl *v265;
  int v266;
  WTF::StringImpl *v267;
  uint64_t v268;
  WTF::StringImpl *v269;
  int v270;
  WTF::StringImpl *v271;
  WTF::StringImpl *v272;
  WTF::StringImpl *v273;
  int v274;
  WTF::StringImpl *v275;
  WTF::StringImpl *v276;
  WTF::StringImpl *v277;
  uint64_t v278;
  uint64_t v279;
  int v280;
  uint64_t v281;
  unint64_t v282;
  WTF::StringImpl *v283;
  WTF::StringImpl *v284;
  WTF::StringImpl *v285;
  WTF::StringImpl *v286;
  unsigned __int8 *v287;
  unsigned int v288;
  WTF::StringImpl *v289;
  WTF::StringImpl *v290;
  WTF::StringImpl *v291;
  WTF::StringImpl *v292;
  uint64_t v293;
  uint64_t v294;
  int v295;
  uint64_t v296;
  unint64_t v297;
  WTF::StringImpl *v298;
  WTF::StringImpl *v299;
  uint64_t v300;
  WTF::StringImpl *v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  uint64_t v305;
  unint64_t v306;
  unsigned __int8 *v307;
  unsigned int v308;
  WTF::StringImpl *v309;
  WTF::StringImpl *v310;
  WTF::StringImpl *v311;
  WTF::StringImpl *v312;
  WTF::StringImpl *v313;
  WTF::StringImpl *v314;
  WTF::StringImpl *v315;
  uint64_t v316;
  uint64_t v317;
  int v318;
  uint64_t v319;
  unint64_t v320;
  unsigned __int8 *v321;
  unsigned int v322;
  unsigned __int8 *v323;
  unsigned int v324;
  unsigned int v325;
  uint64_t v326;
  WTF::StringImpl *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  int v331;
  unsigned int v332;
  WTF::StringImpl *v333;
  WTF::StringImpl *v334;
  uint64_t v335;
  WTF::StringImpl *v336;
  int v337;
  WTF::StringImpl *v338;
  uint64_t v339;
  uint64_t v340;
  int v341;
  uint64_t v342;
  unint64_t v343;
  WTF::StringImpl *v344;
  WTF::StringImpl *v345;
  WTF::StringImpl *v346;
  WTF::StringImpl *v347;
  unsigned int v348;
  uint64_t v349;
  WTF::StringImpl *v350;
  uint64_t v351;
  WTF::StringImpl *v352;
  int v353;
  WTF::StringImpl *v354;
  uint64_t v355;
  uint64_t v356;
  int v357;
  uint64_t v358;
  unint64_t v359;
  WTF::StringImpl *v360;
  uint64_t v361;
  WTF::StringImpl *v362;
  int v363;
  uint64_t *v364;
  uint64_t v365;
  unsigned __int16 *v366;
  uint64_t v367;
  int v368;
  int v369;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  int v374;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  int v379;
  uint64_t v381;
  uint64_t v382;
  int v383;
  int v384;
  int v386;
  int v387;
  int v389;
  unsigned __int8 *v390;
  unsigned int v391;
  WTF::StringImpl *v392;
  WTF::StringImpl *v393;
  WTF::StringImpl *v394;
  uint64_t *v395;
  uint64_t v396;
  unsigned __int16 *v397;
  uint64_t v398;
  int v399;
  int v400;
  BOOL v401;
  _QWORD *v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  int v407;
  BOOL v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  int v412;
  BOOL v413;
  uint64_t v414;
  uint64_t v415;
  int v416;
  int v417;
  BOOL v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  int v422;
  BOOL v423;
  int v424;
  int v425;
  BOOL v426;
  uint64_t v427;
  int v428;
  unsigned int v429;
  unsigned int v430;
  unsigned __int8 *v431;
  unsigned int v432;
  WTF::StringImpl *v433;
  WTF::StringImpl *v434;
  uint64_t v435;
  WTF::StringImpl *v436;
  int v437;
  WTF::StringImpl *v438;
  uint64_t v439;
  WTF::StringImpl *v440;
  int v441;
  WTF::StringImpl *v442;
  uint64_t v443;
  WTF::StringImpl *v444;
  int v445;
  WTF::StringImpl *v446;
  uint64_t v447;
  WTF::StringImpl *v448;
  int v449;
  WTF::StringImpl *v450;
  uint64_t v451;
  WTF::StringImpl *v452;
  int v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  int v458;
  int v459;
  BOOL v460;
  uint64_t v461;
  uint64_t v462;
  int v463;
  int v464;
  BOOL v465;
  int v466;
  int v467;
  BOOL v468;
  uint64_t v469;
  int v470;
  WTF::StringImpl *v471;
  WTF::StringImpl *v472;
  WTF::StringImpl *v473;
  int v474;
  WTF::StringImpl *v475;
  uint64_t v476;
  uint64_t v477;
  int v478;
  uint64_t v479;
  unint64_t v480;
  WTF::StringImpl *v481;
  WTF::StringImpl *v482;
  WTF::StringImpl *v483;
  WTF::StringImpl *v484;
  WTF::StringImpl *v485;
  WTF::StringImpl *v486;
  WTF::StringImpl *v487;
  WTF::StringImpl *v488;
  WTF::StringImpl *v489;
  WTF::StringImpl *v490;
  WTF::StringImpl *v491;
  WTF::StringImpl *v492;
  unsigned __int8 *v493;
  unsigned int v494;
  unsigned __int8 *v495;
  unsigned int v496;
  unsigned int v497;
  unsigned __int8 *v498;
  unsigned int v499;
  unsigned int v500;
  unsigned __int8 *v501;
  unsigned int v502;
  WTF::StringImpl *v503;
  unsigned int v504;
  unsigned __int8 *v505;
  unsigned int v506;
  WTF::StringImpl *v507;
  unsigned int v508;
  unsigned __int8 *v509;
  unsigned int v510;
  WTF::StringImpl *v511;
  unsigned int v512;
  unsigned __int8 *v513;
  unsigned int v514;
  unsigned int v515;
  unsigned int v516;
  unsigned int v517;
  unsigned int v518;
  char v519[16];
  char v520[16];
  double v521;
  int v522;
  WTF::StringImpl *v523;
  __int128 v524;
  __int128 v525;
  uint64_t v526;
  WTF::StringImpl *v527;
  WTF::StringImpl *v528;
  __int128 v529;
  __int128 v530;
  WTF::StringImpl *v531;
  __int128 v532;
  _BYTE v533[32];
  WTF::StringImpl *v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  int v545;
  char v546;
  uint64_t v547;
  char v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  int v553;
  char v554;
  WTF *v555;
  int v556;
  unsigned int v557;
  uint64_t v558;
  int v559;
  char v560;
  uint64_t v561;
  int v562;
  char v563;
  uint64_t v564;
  __int16 v565;
  WTF::StringImpl *v566;
  char v567;
  uint64_t v568;
  char v569;
  char v570;
  char v571;
  char v572;
  char v573;
  int v574;
  char v575;
  int v576;
  char v577;
  int v578;
  char v579;
  uint64_t v580;
  char v581;
  uint64_t v582;
  char v583;
  uint64_t v584;
  char v585;
  uint64_t v586;
  char v587;
  uint64_t v588;
  char v589;
  uint64_t v590;
  char v591;
  uint64_t v592;
  char v593;
  char v594;
  char v595;
  char v596;
  char v597;
  uint64_t v598;
  char v599;
  uint64_t v600;
  char v601;
  uint64_t v602;
  char v603;
  uint64_t v604;
  char v605;
  uint64_t v606;
  char v607;
  uint64_t v608;
  char v609;
  uint64_t v610;
  char v611;
  uint64_t v612;
  char v613;
  int v614;
  char v615;
  WTF::StringImpl *v616;
  WTF::StringImpl *v617;
  __int16 v618;
  int v619;
  char v620;
  uint64_t v621;
  char v622;
  uint64_t v623;
  char v624;
  uint64_t v625;
  char v626;
  int v627;
  char v628;
  int v629;
  char v630;
  uint64_t v631[2];

  v2 = *(webrtc::RTCStatsReport **)(a1 + 8);
  if (!v2)
    return;
  webrtc::RTCStatsReport::begin(*(webrtc::RTCStatsReport **)(a1 + 8));
  webrtc::RTCStatsReport::end(v2);
  if (!webrtc::RTCStatsReport::ConstIterator::operator!=())
  {
LABEL_1312:
    webrtc::RTCStatsReport::ConstIterator::~ConstIterator((webrtc::RTCStatsReport::ConstIterator *)v519);
    webrtc::RTCStatsReport::ConstIterator::~ConstIterator((webrtc::RTCStatsReport::ConstIterator *)v520);
    return;
  }
  v4 = MEMORY[0x1E0DCDA98];
  while (1)
  {
    v5 = webrtc::RTCStatsReport::ConstIterator::operator*();
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5) == v4)
    {
      WebCore::RTCStatsReport::RtpStreamStats::RtpStreamStats((uint64_t)&v521, 1, v5);
      LOBYTE(v526) = 0;
      LOBYTE(v527) = 0;
      LOBYTE(v528) = 0;
      LOBYTE(v529) = 0;
      BYTE8(v529) = 0;
      LOBYTE(v530) = 0;
      if (*(_BYTE *)(v5 + 164))
      {
        v18 = (WTF::StringImpl *)*(int *)(v5 + 160);
        LOBYTE(v529) = 1;
        v528 = v18;
      }
      if (*(_BYTE *)(v5 + 152))
      {
        *((_QWORD *)&v529 + 1) = *(_QWORD *)(v5 + 144);
        LOBYTE(v530) = 1;
      }
      BYTE12(v532) = 0;
      v533[0] = 0;
      v533[4] = 0;
      v533[8] = 0;
      v533[12] = 0;
      v533[16] = 0;
      v533[20] = 0;
      v533[24] = 0;
      v533[28] = 0;
      LOBYTE(v534) = 0;
      BYTE4(v534) = 0;
      LOBYTE(v535) = 0;
      LOBYTE(v536) = 0;
      LOBYTE(v537) = 0;
      LOBYTE(v538) = 0;
      LOBYTE(v539) = 0;
      LOBYTE(v540) = 0;
      LOBYTE(v541) = 0;
      LOBYTE(v542) = 0;
      LOBYTE(v543) = 0;
      LOBYTE(v544) = 0;
      LOBYTE(v545) = 0;
      v546 = 0;
      LOBYTE(v547) = 0;
      v548 = 0;
      LOBYTE(v549) = 0;
      BYTE4(v549) = 0;
      LOBYTE(v550) = 0;
      LOBYTE(v551) = 0;
      LOBYTE(v552) = 0;
      LOBYTE(v553) = 0;
      LOBYTE(v555) = 0;
      LOBYTE(v556) = 0;
      LOBYTE(v558) = 0;
      LOBYTE(v559) = 0;
      LOBYTE(v561) = 0;
      LOBYTE(v562) = 0;
      LOBYTE(v564) = 0;
      LOBYTE(v565) = 0;
      LOBYTE(v566) = 0;
      v567 = 0;
      LOBYTE(v568) = 0;
      v569 = 0;
      v570 = 0;
      v571 = 0;
      v572 = 0;
      v573 = 0;
      LOBYTE(v574) = 0;
      v575 = 0;
      LOBYTE(v576) = 0;
      v577 = 0;
      LOBYTE(v578) = 0;
      v579 = 0;
      LOBYTE(v580) = 0;
      v581 = 0;
      LOBYTE(v582) = 0;
      v583 = 0;
      LOBYTE(v584) = 0;
      v585 = 0;
      LOBYTE(v586) = 0;
      v587 = 0;
      LOBYTE(v588) = 0;
      v589 = 0;
      LOBYTE(v590) = 0;
      v591 = 0;
      LOBYTE(v592) = 0;
      v593 = 0;
      v594 = 0;
      v595 = 0;
      v596 = 0;
      v597 = 0;
      LOBYTE(v598) = 0;
      v599 = 0;
      LOBYTE(v600) = 0;
      v601 = 0;
      LOBYTE(v602) = 0;
      v603 = 0;
      LOBYTE(v604) = 0;
      v605 = 0;
      LOBYTE(v606) = 0;
      v607 = 0;
      LOBYTE(v608) = 0;
      v609 = 0;
      LOBYTE(v610) = 0;
      v611 = 0;
      LOBYTE(v612) = 0;
      v613 = 0;
      LOBYTE(v614) = 0;
      v615 = 0;
      LOBYTE(v619) = 0;
      v620 = 0;
      LOBYTE(v621) = 0;
      v622 = 0;
      LOBYTE(v623) = 0;
      v624 = 0;
      LOBYTE(v625) = 0;
      v626 = 0;
      LOBYTE(v627) = 0;
      v628 = 0;
      LOBYTE(v629) = 0;
      v630 = 0;
      *((_QWORD *)&v530 + 1) = 0;
      v531 = 0;
      BYTE8(v532) = 0;
      *(_QWORD *)&v532 = 0;
      v616 = 0;
      v617 = 0;
      v618 = 0;
      if (*(_BYTE *)(v5 + 300))
      {
        LOBYTE(v527) = 1;
        v526 = *(unsigned int *)(v5 + 296);
      }
      if (*(_BYTE *)(v5 + 224))
      {
        WTF::String::fromUTF8();
        v20 = v631[0];
        v631[0] = 0;
        v21 = (WTF::StringImpl *)*((_QWORD *)&v530 + 1);
        *((_QWORD *)&v530 + 1) = v20;
        if (v21)
        {
          v22 = *(_DWORD *)v21 - 2;
          if (*(_DWORD *)v21 == 2)
          {
            WTF::StringImpl::destroy(v21, v19);
            v21 = (WTF::StringImpl *)v631[0];
            v631[0] = 0;
            if (!v21)
              goto LABEL_58;
            v22 = *(_DWORD *)v21 - 2;
            if (*(_DWORD *)v21 == 2)
            {
              WTF::StringImpl::destroy(v21, v216);
              goto LABEL_58;
            }
          }
          *(_DWORD *)v21 = v22;
        }
      }
LABEL_58:
      if (*(_BYTE *)(v5 + 256))
      {
        WTF::String::fromUTF8();
        v24 = (WTF::StringImpl *)v631[0];
        v631[0] = 0;
        v25 = v531;
        v531 = v24;
        if (v25)
        {
          v26 = *(_DWORD *)v25 - 2;
          if (*(_DWORD *)v25 == 2)
          {
            WTF::StringImpl::destroy(v25, v23);
            v25 = (WTF::StringImpl *)v631[0];
            v631[0] = 0;
            if (!v25)
              goto LABEL_62;
            v26 = *(_DWORD *)v25 - 2;
            if (*(_DWORD *)v25 == 2)
            {
              WTF::StringImpl::destroy(v25, v217);
              goto LABEL_62;
            }
          }
          *(_DWORD *)v25 = v26;
        }
      }
LABEL_62:
      if (*(_BYTE *)(v5 + 288))
      {
        WTF::String::fromUTF8();
        v28 = v631[0];
        v631[0] = 0;
        v29 = (WTF::StringImpl *)v532;
        *(_QWORD *)&v532 = v28;
        if (v29)
        {
          v30 = *(_DWORD *)v29 - 2;
          if (*(_DWORD *)v29 != 2)
          {
LABEL_65:
            *(_DWORD *)v29 = v30;
            goto LABEL_66;
          }
          WTF::StringImpl::destroy(v29, v27);
          v29 = (WTF::StringImpl *)v631[0];
          v631[0] = 0;
          if (v29)
          {
            v30 = *(_DWORD *)v29 - 2;
            if (*(_DWORD *)v29 != 2)
              goto LABEL_65;
            WTF::StringImpl::destroy(v29, v218);
          }
        }
      }
LABEL_66:
      if (*(_BYTE *)(v5 + 716))
      {
        DWORD2(v532) = *(_DWORD *)(v5 + 712);
        BYTE12(v532) = 1;
      }
      if (*(_BYTE *)(v5 + 724))
      {
        *(_DWORD *)v533 = *(_DWORD *)(v5 + 720);
        v533[4] = 1;
      }
      if (*(_BYTE *)(v5 + 732))
      {
        *(_DWORD *)&v533[16] = *(_DWORD *)(v5 + 728);
        v533[20] = 1;
      }
      if (*(_BYTE *)(v5 + 684))
      {
        *(_DWORD *)&v533[24] = *(_DWORD *)(v5 + 680);
        v533[28] = 1;
      }
      if (*(_BYTE *)(v5 + 692))
      {
        LODWORD(v534) = *(_DWORD *)(v5 + 688);
        BYTE4(v534) = 1;
      }
      if (*(_BYTE *)(v5 + 704))
      {
        v535 = *(_QWORD *)(v5 + 696);
        LOBYTE(v536) = 1;
      }
      if (*(_BYTE *)(v5 + 984))
      {
        v537 = *(_QWORD *)(v5 + 976);
        LOBYTE(v538) = 1;
      }
      if (*(_BYTE *)(v5 + 744))
      {
        v539 = *(_QWORD *)(v5 + 736);
        LOBYTE(v540) = 1;
      }
      if (*(_BYTE *)(v5 + 800))
      {
        v541 = *(_QWORD *)(v5 + 792);
        LOBYTE(v542) = 1;
      }
      if (*(_BYTE *)(v5 + 816))
      {
        v543 = *(_QWORD *)(v5 + 808);
        LOBYTE(v544) = 1;
      }
      if (*(_BYTE *)(v5 + 828))
      {
        v545 = *(_DWORD *)(v5 + 824);
        v546 = 1;
      }
      if (*(_BYTE *)(v5 + 840))
      {
        v547 = *(_QWORD *)(v5 + 832);
        v548 = 1;
      }
      if (*(_BYTE *)(v5 + 852))
      {
        LODWORD(v549) = *(_DWORD *)(v5 + 848);
        BYTE4(v549) = 1;
      }
      if (*(_BYTE *)(v5 + 864))
      {
        v550 = *(_QWORD *)(v5 + 856);
        LOBYTE(v551) = 1;
      }
      if (*(_BYTE *)(v5 + 456))
      {
        v552 = *(_QWORD *)(v5 + 448);
        LOBYTE(v553) = 1;
      }
      if (*(_BYTE *)(v5 + 328))
      {
        v564 = *(_QWORD *)(v5 + 320);
        LOBYTE(v565) = 1;
      }
      if (*(_BYTE *)(v5 + 344))
      {
        v561 = *(_QWORD *)(v5 + 336);
        LOBYTE(v562) = 1;
      }
      if (*(_BYTE *)(v5 + 360))
      {
        v566 = *(WTF::StringImpl **)(v5 + 352);
        v567 = 1;
      }
      if (*(_BYTE *)(v5 + 372))
      {
        v629 = *(_DWORD *)(v5 + 368);
        v630 = 1;
      }
      if (*(_BYTE *)(v5 + 400))
      {
        v555 = *(WTF **)(v5 + 392);
        LOBYTE(v556) = 1;
      }
      if (*(_BYTE *)(v5 + 444))
      {
        v627 = *(_DWORD *)(v5 + 440);
        v628 = 1;
      }
      if (*(_BYTE *)(v5 + 312))
      {
        v558 = *(_QWORD *)(v5 + 304);
        LOBYTE(v559) = 1;
      }
      if (*(_BYTE *)(v5 + 328))
      {
        v564 = *(_QWORD *)(v5 + 320);
        LOBYTE(v565) = 1;
      }
      if (*(_BYTE *)(v5 + 360))
      {
        v566 = *(WTF::StringImpl **)(v5 + 352);
        v567 = 1;
      }
      if (*(_BYTE *)(v5 + 384))
      {
        v568 = *(_QWORD *)(v5 + 376);
        v569 = 1;
      }
      if (*(_BYTE *)(v5 + 956))
      {
        v576 = *(_DWORD *)(v5 + 952);
        v577 = 1;
      }
      if (*(_BYTE *)(v5 + 964))
      {
        v578 = *(_DWORD *)(v5 + 960);
        v579 = 1;
      }
      if (*(_BYTE *)(v5 + 972))
      {
        v574 = *(_DWORD *)(v5 + 968);
        v575 = 1;
      }
      if (*(_BYTE *)(v5 + 760))
      {
        v580 = *(_QWORD *)(v5 + 752);
        v581 = 1;
      }
      if (*(_BYTE *)(v5 + 912))
      {
        v582 = *(_QWORD *)(v5 + 904);
        v583 = 1;
      }
      if (*(_BYTE *)(v5 + 472))
      {
        v584 = *(_QWORD *)(v5 + 464);
        v585 = 1;
      }
      if (*(_BYTE *)(v5 + 488))
      {
        v586 = *(_QWORD *)(v5 + 480);
        v587 = 1;
      }
      if (*(_BYTE *)(v5 + 520))
      {
        v588 = *(_QWORD *)(v5 + 512);
        v589 = 1;
      }
      if (*(_BYTE *)(v5 + 504))
      {
        v590 = *(_QWORD *)(v5 + 496);
        v591 = 1;
      }
      if (*(_BYTE *)(v5 + 536))
      {
        v592 = *(_QWORD *)(v5 + 528);
        v593 = 1;
      }
      if (*(_BYTE *)(v5 + 552))
      {
        v598 = *(_QWORD *)(v5 + 544);
        v599 = 1;
      }
      if (*(_BYTE *)(v5 + 568))
      {
        v600 = *(_QWORD *)(v5 + 560);
        v601 = 1;
      }
      if (*(_BYTE *)(v5 + 584))
      {
        v602 = *(_QWORD *)(v5 + 576);
        v603 = 1;
      }
      if (*(_BYTE *)(v5 + 600))
      {
        v604 = *(_QWORD *)(v5 + 592);
        v605 = 1;
      }
      if (*(_BYTE *)(v5 + 616))
      {
        v606 = *(_QWORD *)(v5 + 608);
        v607 = 1;
      }
      if (*(_BYTE *)(v5 + 632))
      {
        v608 = *(_QWORD *)(v5 + 624);
        v609 = 1;
      }
      if (*(_BYTE *)(v5 + 648))
      {
        v610 = *(_QWORD *)(v5 + 640);
        v611 = 1;
      }
      if (*(_BYTE *)(v5 + 664))
      {
        v612 = *(_QWORD *)(v5 + 656);
        v613 = 1;
      }
      if (*(_BYTE *)(v5 + 676))
      {
        v614 = *(_DWORD *)(v5 + 672);
        v615 = 1;
      }
      if (*(_BYTE *)(v5 + 192))
      {
        WTF::String::fromUTF8();
        v32 = (WTF::StringImpl *)v631[0];
        v631[0] = 0;
        v33 = v617;
        v617 = v32;
        if (v33)
        {
          v34 = *(_DWORD *)v33 - 2;
          if (*(_DWORD *)v33 != 2)
          {
LABEL_157:
            *(_DWORD *)v33 = v34;
            goto LABEL_158;
          }
          WTF::StringImpl::destroy(v33, v31);
          v33 = (WTF::StringImpl *)v631[0];
          v631[0] = 0;
          if (v33)
          {
            v34 = *(_DWORD *)v33 - 2;
            if (*(_DWORD *)v33 != 2)
              goto LABEL_157;
            WTF::StringImpl::destroy(v33, v219);
          }
        }
      }
LABEL_158:
      if (*(_BYTE *)(v5 + 788))
      {
        v619 = *(_DWORD *)(v5 + 784);
        v620 = 1;
      }
      if (*(_BYTE *)(v5 + 776))
      {
        v621 = *(_QWORD *)(v5 + 768);
        v622 = 1;
      }
      if (*(_BYTE *)(v5 + 416))
      {
        v623 = *(_QWORD *)(v5 + 408);
        v624 = 1;
      }
      if (*(_BYTE *)(v5 + 432))
      {
        v625 = *(_QWORD *)(v5 + 424);
        v626 = 1;
      }
      v35 = v523;
      if (v523)
        *(_DWORD *)v523 += 2;
      JSC::JSLockHolder::JSLockHolder();
      v36 = *(_QWORD *)a2;
      v37 = *(_QWORD *)(*(_QWORD *)a2 + 56);
      if (v35 && (v38 = *((_DWORD *)v35 + 1)) != 0)
      {
        if (v38 != 1)
        {
LABEL_171:
          v39 = *(_QWORD *)(v37 + 64760);
          if (!v39 || v35 != *(WTF::StringImpl **)(v39 + 8))
          {
            v39 = JSC::jsStringWithCacheSlowCase();
            v36 = *(_QWORD *)a2;
          }
          goto LABEL_174;
        }
        v240 = (unsigned __int8 *)*((_QWORD *)v35 + 1);
        if ((*((_BYTE *)v35 + 16) & 4) != 0)
        {
          v241 = *v240;
        }
        else
        {
          v325 = *(unsigned __int16 *)v240;
          if (v325 > 0xFF)
            goto LABEL_171;
          v241 = v325;
        }
        v39 = *(_QWORD *)(v37 + 8 * v241 + 42216);
      }
      else
      {
        v39 = *(_QWORD *)(v37 + 41968);
      }
LABEL_174:
      v40 = WebCore::convertDictionaryToJS(v36, v36, (uint64_t)&v521);
      WebCore::setToBackingMap(*(_QWORD *)a2, *(WTF::StringImpl **)(a2 + 8), v39, v40);
      MEMORY[0x19AEA32A0](v631);
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v17);
        else
          *(_DWORD *)v35 -= 2;
      }
      v41 = v617;
      v617 = 0;
      if (v41)
      {
        if (*(_DWORD *)v41 == 2)
          WTF::StringImpl::destroy(v41, v17);
        else
          *(_DWORD *)v41 -= 2;
      }
      v42 = v616;
      v616 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v17);
        else
          *(_DWORD *)v42 -= 2;
      }
      v43 = (WTF::StringImpl *)v532;
      *(_QWORD *)&v532 = 0;
      if (v43)
      {
        if (*(_DWORD *)v43 == 2)
          WTF::StringImpl::destroy(v43, v17);
        else
          *(_DWORD *)v43 -= 2;
      }
      v44 = v531;
      v531 = 0;
      if (!v44)
      {
LABEL_189:
        v45 = (WTF::StringImpl *)*((_QWORD *)&v530 + 1);
        *((_QWORD *)&v530 + 1) = 0;
        if (!v45)
          goto LABEL_531;
        goto LABEL_529;
      }
      if (*(_DWORD *)v44 != 2)
      {
        *(_DWORD *)v44 -= 2;
        goto LABEL_189;
      }
LABEL_1267:
      WTF::StringImpl::destroy(v44, v17);
      goto LABEL_189;
    }
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5) == MEMORY[0x1E0DCDB00])
    {
      WebCore::RTCStatsReport::RtpStreamStats::RtpStreamStats((uint64_t)&v521, 2, v5);
      LOBYTE(v526) = 0;
      BYTE4(v526) = 0;
      LOBYTE(v527) = 0;
      LOBYTE(v528) = 0;
      if (*(_BYTE *)(v5 + 152))
      {
        v47 = *(_QWORD *)(v5 + 144);
        BYTE4(v526) = 1;
        LODWORD(v526) = v47;
      }
      if (*(_BYTE *)(v5 + 168))
      {
        v527 = *(WTF::StringImpl **)(v5 + 160);
        LOBYTE(v528) = 1;
      }
      LOBYTE(v532) = 0;
      BYTE8(v532) = 0;
      v533[0] = 0;
      v533[8] = 0;
      v533[16] = 0;
      v533[24] = 0;
      v533[28] = 0;
      LOBYTE(v534) = 0;
      LOBYTE(v535) = 0;
      LOBYTE(v536) = 0;
      LOBYTE(v537) = 0;
      LOBYTE(v538) = 0;
      BYTE4(v538) = 0;
      LOBYTE(v539) = 0;
      BYTE4(v539) = 0;
      LOBYTE(v540) = 0;
      LOBYTE(v541) = 0;
      LOBYTE(v542) = 0;
      BYTE4(v542) = 0;
      LOBYTE(v543) = 0;
      BYTE4(v543) = 0;
      LOBYTE(v544) = 0;
      BYTE4(v544) = 0;
      LOBYTE(v545) = 0;
      v546 = 0;
      LOBYTE(v547) = 0;
      v548 = 0;
      LOBYTE(v549) = 0;
      LOBYTE(v550) = 0;
      LOBYTE(v551) = 0;
      LOBYTE(v552) = 0;
      LOBYTE(v553) = 0;
      v554 = 0;
      LOBYTE(v555) = 0;
      LOBYTE(v558) = 0;
      LOBYTE(v559) = 0;
      v560 = 0;
      LOBYTE(v561) = 0;
      BYTE4(v561) = 0;
      LOBYTE(v562) = 0;
      v563 = 0;
      LOBYTE(v564) = 0;
      BYTE4(v564) = 0;
      v565 = 0;
      v566 = 0;
      v529 = 0u;
      v530 = 0u;
      LOBYTE(v531) = 0;
      if (*(_BYTE *)(v5 + 264))
      {
        WTF::String::fromUTF8();
        v48 = v631[0];
        v631[0] = 0;
        v49 = (WTF::StringImpl *)v529;
        *(_QWORD *)&v529 = v48;
        if (v49)
        {
          v50 = *(_DWORD *)v49 - 2;
          if (*(_DWORD *)v49 == 2)
          {
            WTF::StringImpl::destroy(v49, v46);
            v49 = (WTF::StringImpl *)v631[0];
            v631[0] = 0;
            if (!v49)
              goto LABEL_199;
            v50 = *(_DWORD *)v49 - 2;
            if (*(_DWORD *)v49 == 2)
            {
              WTF::StringImpl::destroy(v49, v46);
              goto LABEL_199;
            }
          }
          *(_DWORD *)v49 = v50;
        }
      }
LABEL_199:
      if (*(_BYTE *)(v5 + 200))
      {
        WTF::String::fromUTF8();
        v51 = v631[0];
        v631[0] = 0;
        v52 = (WTF::StringImpl *)*((_QWORD *)&v529 + 1);
        *((_QWORD *)&v529 + 1) = v51;
        if (v52)
        {
          v53 = *(_DWORD *)v52 - 2;
          if (*(_DWORD *)v52 == 2)
          {
            WTF::StringImpl::destroy(v52, v46);
            v52 = (WTF::StringImpl *)v631[0];
            v631[0] = 0;
            if (!v52)
              goto LABEL_203;
            v53 = *(_DWORD *)v52 - 2;
            if (*(_DWORD *)v52 == 2)
            {
              WTF::StringImpl::destroy(v52, v46);
              goto LABEL_203;
            }
          }
          *(_DWORD *)v52 = v53;
        }
      }
LABEL_203:
      if (*(_BYTE *)(v5 + 232))
      {
        WTF::String::fromUTF8();
        v54 = v631[0];
        v631[0] = 0;
        v55 = (WTF::StringImpl *)v530;
        *(_QWORD *)&v530 = v54;
        if (v55)
        {
          v56 = *(_DWORD *)v55 - 2;
          if (*(_DWORD *)v55 == 2)
          {
            WTF::StringImpl::destroy(v55, v46);
            v55 = (WTF::StringImpl *)v631[0];
            v631[0] = 0;
            if (!v55)
              goto LABEL_207;
            v56 = *(_DWORD *)v55 - 2;
            if (*(_DWORD *)v55 == 2)
            {
              WTF::StringImpl::destroy(v55, v46);
              goto LABEL_207;
            }
          }
          *(_DWORD *)v55 = v56;
        }
      }
LABEL_207:
      if (*(_BYTE *)(v5 + 296))
      {
        WTF::String::fromUTF8();
        v57 = v631[0];
        v631[0] = 0;
        v58 = (WTF::StringImpl *)*((_QWORD *)&v530 + 1);
        *((_QWORD *)&v530 + 1) = v57;
        if (v58)
        {
          v59 = *(_DWORD *)v58 - 2;
          if (*(_DWORD *)v58 != 2)
          {
LABEL_210:
            *(_DWORD *)v58 = v59;
            goto LABEL_211;
          }
          WTF::StringImpl::destroy(v58, v46);
          v58 = (WTF::StringImpl *)v631[0];
          v631[0] = 0;
          if (v58)
          {
            v59 = *(_DWORD *)v58 - 2;
            if (*(_DWORD *)v58 != 2)
              goto LABEL_210;
            WTF::StringImpl::destroy(v58, v46);
          }
        }
      }
LABEL_211:
      if (*(_BYTE *)(v5 + 328))
      {
        v531 = *(WTF::StringImpl **)(v5 + 320);
        LOBYTE(v532) = 1;
      }
      if (*(_BYTE *)(v5 + 312))
      {
        *((_QWORD *)&v532 + 1) = *(_QWORD *)(v5 + 304);
        v533[0] = 1;
      }
      if (*(_BYTE *)(v5 + 344))
      {
        *(_QWORD *)&v533[8] = *(_QWORD *)(v5 + 336);
        v533[16] = 1;
      }
      if (*(_BYTE *)(v5 + 360))
      {
        v534 = *(WTF::StringImpl **)(v5 + 352);
        LOBYTE(v535) = 1;
      }
      if (*(_BYTE *)(v5 + 408))
      {
        v536 = *(_QWORD *)(v5 + 400);
        LOBYTE(v537) = 1;
      }
      if (*(_BYTE *)(v5 + 420))
      {
        LODWORD(v538) = *(_DWORD *)(v5 + 416);
        BYTE4(v538) = 1;
      }
      if (*(_BYTE *)(v5 + 428))
      {
        LODWORD(v539) = *(_DWORD *)(v5 + 424);
        BYTE4(v539) = 1;
      }
      if (*(_BYTE *)(v5 + 440))
      {
        v540 = *(_QWORD *)(v5 + 432);
        LOBYTE(v541) = 1;
      }
      if (*(_BYTE *)(v5 + 452))
      {
        LODWORD(v542) = *(_DWORD *)(v5 + 448);
        BYTE4(v542) = 1;
      }
      if (*(_BYTE *)(v5 + 460))
      {
        LODWORD(v543) = *(_DWORD *)(v5 + 456);
        BYTE4(v543) = 1;
      }
      if (*(_BYTE *)(v5 + 372))
      {
        LODWORD(v544) = *(_DWORD *)(v5 + 368);
        BYTE4(v544) = 1;
      }
      if (*(_BYTE *)(v5 + 380))
      {
        v545 = *(_DWORD *)(v5 + 376);
        v546 = 1;
      }
      if (*(_BYTE *)(v5 + 648))
      {
        v547 = *(_QWORD *)(v5 + 640);
        v548 = 1;
      }
      if (*(_BYTE *)(v5 + 392))
      {
        v549 = *(_QWORD *)(v5 + 384);
        LOBYTE(v550) = 1;
      }
      if (*(_BYTE *)(v5 + 472))
      {
        v551 = *(_QWORD *)(v5 + 464);
        LOBYTE(v552) = 1;
      }
      if (*(_BYTE *)(v5 + 504))
      {
        v60 = (_DWORD *)(v5 + 480);
        v61 = *(unsigned __int8 *)(v5 + 503);
        v62 = (_DWORD *)(v5 + 480);
        v63 = v61;
        if (*(char *)(v5 + 503) < 0)
        {
          v63 = *(_QWORD *)(v5 + 488);
          if (v63 < 0)
            goto LABEL_1314;
          v62 = *(_DWORD **)v60;
          if (v63)
          {
            if (!v62)
              goto LABEL_1314;
          }
        }
        if (v63 == 4 && *v62 == 1701736302)
        {
          v72 = 0x100000000;
        }
        else
        {
          v64 = (unsigned __int16 *)(v5 + 480);
          v65 = *(unsigned __int8 *)(v5 + 503);
          if ((v61 & 0x80) != 0)
          {
            v65 = *(_QWORD *)(v5 + 488);
            if (v65 < 0)
              goto LABEL_1314;
            v64 = *(unsigned __int16 **)v60;
            if (v65)
            {
              if (!v64)
                goto LABEL_1314;
            }
          }
          if (v65 == 3
            && ((v66 = *v64, v67 = *((unsigned __int8 *)v64 + 2), v66 == 28771) ? (v68 = v67 == 117) : (v68 = 0), v68))
          {
            v72 = 0x100000001;
          }
          else
          {
            if ((v61 & 0x80) != 0)
            {
              v61 = *(_QWORD *)(v5 + 488);
              if (v61 < 0)
                goto LABEL_1314;
              v60 = *(_DWORD **)v60;
              if (v61)
              {
                if (!v60)
                  goto LABEL_1314;
              }
            }
            if (v61 != 9
              || ((v69 = *(_DWORD **)v60, v70 = *((unsigned __int8 *)v60 + 8), v69 == (_DWORD *)0x74646977646E6162)
                ? (v71 = v70 == 104)
                : (v71 = 0),
                  v72 = 0x100000002,
                  !v71))
            {
              v72 = 0x100000003;
            }
          }
        }
        v553 = v72;
        v554 = BYTE4(v72);
      }
      if (*(_BYTE *)(v5 + 536))
      {
        v183 = *(_QWORD *)(v5 + 528);
        if (v183)
        {
          if (v183 >> 28)
            goto LABEL_1315;
          v184 = *(_QWORD **)(v5 + 512);
          v185 = (WTF *)WTF::fastMalloc((WTF *)(16 * v183));
          for (i = 0; i != v183; ++i)
          {
            WTF::String::fromUTF8();
            v187 = v184[7];
            v188 = (_QWORD *)v184[1];
            if (v188)
            {
              do
              {
                v189 = v188;
                v188 = (_QWORD *)*v188;
              }
              while (v188);
            }
            else
            {
              do
              {
                v189 = (_QWORD *)v184[2];
                v68 = *v189 == (_QWORD)v184;
                v184 = v189;
              }
              while (!v68);
            }
            v190 = (_QWORD *)((char *)v185 + 16 * i);
            *v190 = v631[0];
            v190[1] = v187;
            v184 = v189;
          }
          v4 = MEMORY[0x1E0DCDA98];
        }
        else
        {
          v185 = 0;
        }
        if ((_BYTE)v558)
        {
          if (v557)
          {
            v191 = v555;
            v192 = 16 * v557;
            do
            {
              v193 = *(WTF::StringImpl **)v191;
              *(_QWORD *)v191 = 0;
              if (v193)
              {
                if (*(_DWORD *)v193 == 2)
                  WTF::StringImpl::destroy(v193, v46);
                else
                  *(_DWORD *)v193 -= 2;
              }
              v191 = (WTF *)((char *)v191 + 16);
              v192 -= 16;
            }
            while (v192);
          }
          v194 = v555;
          if (v555)
          {
            v555 = 0;
            v556 = 0;
            WTF::fastFree(v194, v46);
          }
          v555 = v185;
          v556 = v183;
          v557 = v183;
          v4 = MEMORY[0x1E0DCDA98];
        }
        else
        {
          v555 = v185;
          v556 = v183;
          v557 = v183;
          LOBYTE(v558) = 1;
        }
      }
      if (*(_BYTE *)(v5 + 548))
      {
        v559 = *(_DWORD *)(v5 + 544);
        v560 = 1;
      }
      if (*(_BYTE *)(v5 + 636))
      {
        LODWORD(v561) = *(_DWORD *)(v5 + 632);
        BYTE4(v561) = 1;
      }
      if (*(_BYTE *)(v5 + 620))
      {
        v562 = *(_DWORD *)(v5 + 616);
        v563 = 1;
      }
      if (*(_BYTE *)(v5 + 628))
      {
        LODWORD(v564) = *(_DWORD *)(v5 + 624);
        BYTE4(v564) = 1;
      }
      if (*(_BYTE *)(v5 + 657))
        v565 = *(unsigned __int8 *)(v5 + 656) | 0x100;
      if (*(_BYTE *)(v5 + 688))
      {
        WTF::String::fromUTF8();
        v196 = (WTF::StringImpl *)v631[0];
        v631[0] = 0;
        v197 = v566;
        v566 = v196;
        if (v197)
        {
          v198 = *(_DWORD *)v197 - 2;
          if (*(_DWORD *)v197 != 2)
          {
LABEL_491:
            *(_DWORD *)v197 = v198;
            goto LABEL_492;
          }
          WTF::StringImpl::destroy(v197, v195);
          v197 = (WTF::StringImpl *)v631[0];
          v631[0] = 0;
          if (v197)
          {
            v198 = *(_DWORD *)v197 - 2;
            if (*(_DWORD *)v197 != 2)
              goto LABEL_491;
            WTF::StringImpl::destroy(v197, v243);
          }
        }
      }
LABEL_492:
      if (*(_BYTE *)(v5 + 700))
      {
        *(_DWORD *)&v533[24] = *(_DWORD *)(v5 + 696);
        v533[28] = 1;
      }
      v199 = v523;
      if (v523)
        *(_DWORD *)v523 += 2;
      JSC::JSLockHolder::JSLockHolder();
      v200 = *(_QWORD *)a2;
      v201 = *(_QWORD *)(*(_QWORD *)a2 + 56);
      if (v199 && (v202 = *((_DWORD *)v199 + 1)) != 0)
      {
        if (v202 != 1)
        {
LABEL_499:
          v203 = *(_QWORD *)(v201 + 64760);
          if (!v203 || v199 != *(WTF::StringImpl **)(v203 + 8))
          {
            v203 = JSC::jsStringWithCacheSlowCase();
            v200 = *(_QWORD *)a2;
          }
          goto LABEL_502;
        }
        v287 = (unsigned __int8 *)*((_QWORD *)v199 + 1);
        if ((*((_BYTE *)v199 + 16) & 4) != 0)
        {
          v288 = *v287;
        }
        else
        {
          v332 = *(unsigned __int16 *)v287;
          if (v332 > 0xFF)
            goto LABEL_499;
          v288 = v332;
        }
        v203 = *(_QWORD *)(v201 + 8 * v288 + 42216);
      }
      else
      {
        v203 = *(_QWORD *)(v201 + 41968);
      }
LABEL_502:
      v204 = WebCore::convertDictionaryToJS(v200, v200, (uint64_t)&v521);
      WebCore::setToBackingMap(*(_QWORD *)a2, *(WTF::StringImpl **)(a2 + 8), v203, v204);
      MEMORY[0x19AEA32A0](v631);
      if (v199)
      {
        if (*(_DWORD *)v199 == 2)
          WTF::StringImpl::destroy(v199, v17);
        else
          *(_DWORD *)v199 -= 2;
      }
      v205 = v566;
      v566 = 0;
      if (v205)
      {
        if (*(_DWORD *)v205 == 2)
          WTF::StringImpl::destroy(v205, v17);
        else
          *(_DWORD *)v205 -= 2;
      }
      if ((_BYTE)v558)
      {
        if (v557)
        {
          v206 = v555;
          v207 = 16 * v557;
          do
          {
            v208 = *(WTF::StringImpl **)v206;
            *(_QWORD *)v206 = 0;
            if (v208)
            {
              if (*(_DWORD *)v208 == 2)
                WTF::StringImpl::destroy(v208, v17);
              else
                *(_DWORD *)v208 -= 2;
            }
            v206 = (WTF *)((char *)v206 + 16);
            v207 -= 16;
          }
          while (v207);
        }
        v209 = v555;
        if (v555)
        {
          v555 = 0;
          v556 = 0;
          WTF::fastFree(v209, v17);
        }
      }
      v210 = (WTF::StringImpl *)*((_QWORD *)&v530 + 1);
      *((_QWORD *)&v530 + 1) = 0;
      if (v210)
      {
        if (*(_DWORD *)v210 == 2)
          WTF::StringImpl::destroy(v210, v17);
        else
          *(_DWORD *)v210 -= 2;
      }
      v211 = (WTF::StringImpl *)v530;
      *(_QWORD *)&v530 = 0;
      if (v211)
      {
        if (*(_DWORD *)v211 == 2)
          WTF::StringImpl::destroy(v211, v17);
        else
          *(_DWORD *)v211 -= 2;
      }
      v212 = (WTF::StringImpl *)*((_QWORD *)&v529 + 1);
      *((_QWORD *)&v529 + 1) = 0;
      if (!v212)
      {
LABEL_528:
        v45 = (WTF::StringImpl *)v529;
        *(_QWORD *)&v529 = 0;
        if (!v45)
          goto LABEL_531;
LABEL_529:
        if (*(_DWORD *)v45 == 2)
          WTF::StringImpl::destroy(v45, v17);
        else
          *(_DWORD *)v45 -= 2;
LABEL_531:
        v213 = (WTF::StringImpl *)*((_QWORD *)&v525 + 1);
        *((_QWORD *)&v525 + 1) = 0;
        if (!v213)
          goto LABEL_534;
        goto LABEL_532;
      }
      if (*(_DWORD *)v212 != 2)
      {
        *(_DWORD *)v212 -= 2;
        goto LABEL_528;
      }
LABEL_1278:
      WTF::StringImpl::destroy(v212, v17);
      goto LABEL_528;
    }
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5) == MEMORY[0x1E0DCD990])
    {
      v73 = *(_QWORD *)(v5 + 32);
      if ((unint64_t)(v73 + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL)
        v73 = 0;
      v521 = WebCore::Performance::reduceTimeResolution((double)v73 / 1000.0 / 1000.0) * 1000.0;
      v522 = 8;
      WTF::String::fromUTF8();
      BYTE4(v525) = 0;
      *((_QWORD *)&v525 + 1) = 0;
      LOBYTE(v526) = 0;
      BYTE4(v526) = 0;
      LOBYTE(v527) = 0;
      LOBYTE(v528) = 0;
      LOBYTE(v529) = 0;
      BYTE4(v529) = 0;
      BYTE8(v529) = 0;
      LOBYTE(v530) = 0;
      v524 = 0uLL;
      LOBYTE(v525) = 0;
      if (*(_BYTE *)(v5 + 64))
      {
        WTF::String::fromUTF8();
        v75 = v631[0];
        v631[0] = 0;
        v76 = (WTF::StringImpl *)v524;
        *(_QWORD *)&v524 = v75;
        if (v76)
        {
          v77 = *(_DWORD *)v76 - 2;
          if (*(_DWORD *)v76 == 2)
          {
            WTF::StringImpl::destroy(v76, v74);
            v76 = (WTF::StringImpl *)v631[0];
            v631[0] = 0;
            if (!v76)
              goto LABEL_273;
            v77 = *(_DWORD *)v76 - 2;
            if (*(_DWORD *)v76 == 2)
            {
              WTF::StringImpl::destroy(v76, v289);
              goto LABEL_273;
            }
          }
          *(_DWORD *)v76 = v77;
        }
      }
LABEL_273:
      if (*(_BYTE *)(v5 + 96))
      {
        WTF::String::fromUTF8();
        v79 = v631[0];
        v631[0] = 0;
        v80 = (WTF::StringImpl *)*((_QWORD *)&v524 + 1);
        *((_QWORD *)&v524 + 1) = v79;
        if (v80)
        {
          v81 = *(_DWORD *)v80 - 2;
          if (*(_DWORD *)v80 != 2)
          {
LABEL_276:
            *(_DWORD *)v80 = v81;
            goto LABEL_277;
          }
          WTF::StringImpl::destroy(v80, v78);
          v80 = (WTF::StringImpl *)v631[0];
          v631[0] = 0;
          if (v80)
          {
            v81 = *(_DWORD *)v80 - 2;
            if (*(_DWORD *)v80 != 2)
              goto LABEL_276;
            WTF::StringImpl::destroy(v80, v290);
          }
        }
      }
LABEL_277:
      if (*(_BYTE *)(v5 + 108))
      {
        LODWORD(v525) = *(_DWORD *)(v5 + 104);
        BYTE4(v525) = 1;
      }
      if (*(_BYTE *)(v5 + 136))
      {
        WTF::String::fromUTF8();
        v83 = v631[0];
        v631[0] = 0;
        v84 = (WTF::StringImpl *)*((_QWORD *)&v525 + 1);
        *((_QWORD *)&v525 + 1) = v83;
        if (v84)
        {
          v85 = *(_DWORD *)v84 - 2;
          if (*(_DWORD *)v84 != 2)
          {
LABEL_282:
            *(_DWORD *)v84 = v85;
            goto LABEL_283;
          }
          WTF::StringImpl::destroy(v84, v82);
          v84 = (WTF::StringImpl *)v631[0];
          v631[0] = 0;
          if (v84)
          {
            v85 = *(_DWORD *)v84 - 2;
            if (*(_DWORD *)v84 != 2)
              goto LABEL_282;
            WTF::StringImpl::destroy(v84, v291);
          }
        }
      }
LABEL_283:
      if (*(_BYTE *)(v5 + 148))
      {
        LODWORD(v526) = *(_DWORD *)(v5 + 144);
        BYTE4(v526) = 1;
      }
      if (*(_BYTE *)(v5 + 160))
      {
        v527 = *(WTF::StringImpl **)(v5 + 152);
        LOBYTE(v528) = 1;
      }
      if (*(_BYTE *)(v5 + 172))
      {
        LODWORD(v529) = *(_DWORD *)(v5 + 168);
        BYTE4(v529) = 1;
      }
      if (*(_BYTE *)(v5 + 184))
      {
        *((_QWORD *)&v529 + 1) = *(_QWORD *)(v5 + 176);
        LOBYTE(v530) = 1;
      }
      v86 = v523;
      if (v523)
        *(_DWORD *)v523 += 2;
      JSC::JSLockHolder::JSLockHolder();
      v87 = *(_QWORD *)a2;
      v88 = *(_QWORD *)(*(_QWORD *)a2 + 56);
      if (v86 && (v89 = *((_DWORD *)v86 + 1)) != 0)
      {
        if (v89 != 1)
        {
LABEL_296:
          v90 = *(_QWORD *)(v88 + 64760);
          if (!v90 || v86 != *(WTF::StringImpl **)(v90 + 8))
          {
            v90 = JSC::jsStringWithCacheSlowCase();
            v87 = *(_QWORD *)a2;
          }
          goto LABEL_299;
        }
        v307 = (unsigned __int8 *)*((_QWORD *)v86 + 1);
        if ((*((_BYTE *)v86 + 16) & 4) != 0)
        {
          v308 = *v307;
        }
        else
        {
          v348 = *(unsigned __int16 *)v307;
          if (v348 > 0xFF)
            goto LABEL_296;
          v308 = v348;
        }
        v90 = *(_QWORD *)(v88 + 8 * v308 + 42216);
      }
      else
      {
        v90 = *(_QWORD *)(v88 + 41968);
      }
LABEL_299:
      v91 = WebCore::convertDictionaryToJS(v87, v87, (uint64_t)&v521);
      WebCore::setToBackingMap(*(_QWORD *)a2, *(WTF::StringImpl **)(a2 + 8), v90, v91);
      MEMORY[0x19AEA32A0](v631);
      if (!v86)
        goto LABEL_710;
      if (*(_DWORD *)v86 != 2)
      {
        *(_DWORD *)v86 -= 2;
        goto LABEL_710;
      }
      v242 = v86;
      goto LABEL_712;
    }
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5) == MEMORY[0x1E0DCDA90])
    {
      v120 = *(_QWORD *)(v5 + 32);
      if ((unint64_t)(v120 + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL)
        v120 = 0;
      v521 = WebCore::Performance::reduceTimeResolution((double)v120 / 1000.0 / 1000.0) * 1000.0;
      v522 = 10;
      WTF::String::fromUTF8();
      WORD6(v525) = 0;
      LOBYTE(v526) = 0;
      LOBYTE(v527) = 0;
      LOBYTE(v528) = 0;
      LOBYTE(v529) = 0;
      BYTE8(v529) = 0;
      LOBYTE(v530) = 0;
      BYTE8(v530) = 0;
      LOBYTE(v531) = 0;
      LOBYTE(v532) = 0;
      BYTE8(v532) = 0;
      v533[0] = 0;
      v533[8] = 0;
      v533[16] = 0;
      v533[24] = 0;
      LOBYTE(v534) = 0;
      LOBYTE(v535) = 0;
      LOBYTE(v536) = 0;
      LOBYTE(v537) = 0;
      LOBYTE(v538) = 0;
      LOBYTE(v539) = 0;
      LOBYTE(v540) = 0;
      LOBYTE(v541) = 0;
      LOBYTE(v542) = 0;
      LOBYTE(v543) = 0;
      LOBYTE(v544) = 0;
      LOBYTE(v545) = 0;
      LOBYTE(v547) = 0;
      v548 = 0;
      LOBYTE(v549) = 0;
      LOBYTE(v550) = 0;
      LOBYTE(v551) = 0;
      BYTE4(v551) = 0;
      LOBYTE(v552) = 0;
      LOBYTE(v553) = 0;
      *(_QWORD *)&v525 = 0;
      v524 = 0uLL;
      if (*(_BYTE *)(v5 + 64))
      {
        WTF::String::fromUTF8();
        v122 = v631[0];
        v631[0] = 0;
        v123 = (WTF::StringImpl *)v524;
        *(_QWORD *)&v524 = v122;
        if (v123)
        {
          v124 = *(_DWORD *)v123 - 2;
          if (*(_DWORD *)v123 == 2)
          {
            WTF::StringImpl::destroy(v123, v121);
            v123 = (WTF::StringImpl *)v631[0];
            v631[0] = 0;
            if (!v123)
              goto LABEL_359;
            v124 = *(_DWORD *)v123 - 2;
            if (*(_DWORD *)v123 == 2)
            {
              WTF::StringImpl::destroy(v123, v312);
              goto LABEL_359;
            }
          }
          *(_DWORD *)v123 = v124;
        }
      }
LABEL_359:
      if (*(_BYTE *)(v5 + 96))
      {
        WTF::String::fromUTF8();
        v126 = v631[0];
        v631[0] = 0;
        v127 = (WTF::StringImpl *)*((_QWORD *)&v524 + 1);
        *((_QWORD *)&v524 + 1) = v126;
        if (v127)
        {
          v128 = *(_DWORD *)v127 - 2;
          if (*(_DWORD *)v127 == 2)
          {
            WTF::StringImpl::destroy(v127, v125);
            v127 = (WTF::StringImpl *)v631[0];
            v631[0] = 0;
            if (!v127)
              goto LABEL_363;
            v128 = *(_DWORD *)v127 - 2;
            if (*(_DWORD *)v127 == 2)
            {
              WTF::StringImpl::destroy(v127, v313);
              goto LABEL_363;
            }
          }
          *(_DWORD *)v127 = v128;
        }
      }
LABEL_363:
      if (*(_BYTE *)(v5 + 128))
      {
        WTF::String::fromUTF8();
        v130 = v631[0];
        v631[0] = 0;
        v131 = (WTF::StringImpl *)v525;
        *(_QWORD *)&v525 = v130;
        if (v131)
        {
          v132 = *(_DWORD *)v131 - 2;
          if (*(_DWORD *)v131 != 2)
          {
LABEL_366:
            *(_DWORD *)v131 = v132;
            goto LABEL_367;
          }
          WTF::StringImpl::destroy(v131, v129);
          v131 = (WTF::StringImpl *)v631[0];
          v631[0] = 0;
          if (v131)
          {
            v132 = *(_DWORD *)v131 - 2;
            if (*(_DWORD *)v131 != 2)
              goto LABEL_366;
            WTF::StringImpl::destroy(v131, v314);
          }
        }
      }
LABEL_367:
      if (!*(_BYTE *)(v5 + 160))
        goto LABEL_736;
      v133 = v5 + 136;
      v134 = *(unsigned __int8 *)(v5 + 159);
      v135 = v5 + 136;
      v136 = v134;
      if (*(char *)(v5 + 159) < 0)
      {
        v136 = *(_QWORD *)(v5 + 144);
        if (v136 < 0)
          goto LABEL_1314;
        v135 = *(_QWORD *)v133;
        if (v136)
        {
          if (!v135)
            goto LABEL_1314;
        }
      }
      if (v136 != 6
        || ((v137 = *(_DWORD *)v135, v138 = *(unsigned __int16 *)(v135 + 4), v137 == 2054124134)
          ? (v139 = v138 == 28261)
          : (v139 = 0),
            !v139))
      {
        v140 = (int *)(v5 + 136);
        v141 = *(unsigned __int8 *)(v5 + 159);
        if ((v134 & 0x80) != 0)
        {
          v141 = *(_QWORD *)(v5 + 144);
          if (v141 < 0)
            goto LABEL_1314;
          v140 = *(int **)v133;
          if (v141)
          {
            if (!v140)
              goto LABEL_1314;
          }
        }
        if (v141 == 7)
        {
          v142 = *v140;
          v143 = *(int *)((char *)v140 + 3);
          if (v142 == 1953063287 && v143 == 1735289204)
          {
            v158 = 1;
            goto LABEL_735;
          }
        }
        v145 = (uint64_t *)(v5 + 136);
        v146 = *(unsigned __int8 *)(v5 + 159);
        if ((v134 & 0x80) != 0)
        {
          v146 = *(_QWORD *)(v5 + 144);
          if (v146 < 0)
            goto LABEL_1314;
          v145 = *(uint64_t **)v133;
          if (v146)
          {
            if (!v145)
              goto LABEL_1314;
          }
        }
        if (v146 == 11)
        {
          v147 = *v145;
          v148 = *(uint64_t *)((char *)v145 + 3);
          if (v147 == 0x72676F72702D6E69 && v148 == 0x73736572676F7270)
          {
            v158 = 2;
            goto LABEL_735;
          }
        }
        v150 = v5 + 136;
        v151 = *(unsigned __int8 *)(v5 + 159);
        if ((v134 & 0x80) != 0)
        {
          v151 = *(_QWORD *)(v5 + 144);
          if (v151 < 0)
            goto LABEL_1314;
          v150 = *(_QWORD *)v133;
          if (v151)
          {
            if (!v150)
              goto LABEL_1314;
          }
        }
        if (v151 == 6)
        {
          v152 = *(_DWORD *)v150;
          v153 = *(unsigned __int16 *)(v150 + 4);
          if (v152 == 1818845542 && v153 == 25701)
          {
            v158 = 3;
            goto LABEL_735;
          }
        }
        if ((v134 & 0x80) != 0)
        {
          v134 = *(_QWORD *)(v5 + 144);
          if (v134 < 0)
            goto LABEL_1314;
          v133 = *(_QWORD *)v133;
          if (v134)
          {
            if (!v133)
              goto LABEL_1314;
          }
        }
        if (v134 == 9)
        {
          v155 = bswap64(*(_QWORD *)v133);
          if (v155 == 0x7375636365656465)
          {
            v156 = *(unsigned __int8 *)(v133 + 8) - 100;
          }
          else if (v155 < 0x7375636365656465)
          {
            v156 = -1;
          }
          else
          {
            v156 = 1;
          }
          v158 = 4 * (v156 == 0);
          goto LABEL_735;
        }
      }
      v158 = 0;
LABEL_735:
      DWORD2(v525) = v158;
LABEL_736:
      if (*(_BYTE *)(v5 + 185))
        WORD6(v525) = *(unsigned __int8 *)(v5 + 184) | 0x100;
      if (*(_BYTE *)(v5 + 200))
      {
        v526 = *(_QWORD *)(v5 + 192);
        LOBYTE(v527) = 1;
      }
      if (*(_BYTE *)(v5 + 216))
      {
        v528 = *(WTF::StringImpl **)(v5 + 208);
        LOBYTE(v529) = 1;
      }
      if (*(_BYTE *)(v5 + 232))
      {
        *((_QWORD *)&v529 + 1) = *(_QWORD *)(v5 + 224);
        LOBYTE(v530) = 1;
      }
      if (*(_BYTE *)(v5 + 248))
      {
        *((_QWORD *)&v530 + 1) = *(_QWORD *)(v5 + 240);
        LOBYTE(v531) = 1;
      }
      if (*(_BYTE *)(v5 + 456))
      {
        *(_QWORD *)&v532 = *(_QWORD *)(v5 + 448);
        BYTE8(v532) = 1;
      }
      if (*(_BYTE *)(v5 + 440))
      {
        *(_QWORD *)v533 = *(_QWORD *)(v5 + 432);
        v533[8] = 1;
      }
      if (*(_BYTE *)(v5 + 264))
      {
        *(_QWORD *)&v533[16] = *(_QWORD *)(v5 + 256);
        v533[24] = 1;
      }
      if (*(_BYTE *)(v5 + 280))
      {
        v534 = *(WTF::StringImpl **)(v5 + 272);
        LOBYTE(v535) = 1;
      }
      if (*(_BYTE *)(v5 + 296))
      {
        v536 = *(_QWORD *)(v5 + 288);
        LOBYTE(v537) = 1;
      }
      if (*(_BYTE *)(v5 + 312))
      {
        v538 = *(_QWORD *)(v5 + 304);
        LOBYTE(v539) = 1;
      }
      if (*(_BYTE *)(v5 + 328))
      {
        v540 = *(_QWORD *)(v5 + 320);
        LOBYTE(v541) = 1;
      }
      if (*(_BYTE *)(v5 + 344))
      {
        v542 = *(_QWORD *)(v5 + 336);
        LOBYTE(v543) = 1;
      }
      if (*(_BYTE *)(v5 + 360))
      {
        v544 = *(_QWORD *)(v5 + 352);
        LOBYTE(v545) = 1;
      }
      if (*(_BYTE *)(v5 + 376))
      {
        v547 = *(_QWORD *)(v5 + 368);
        v548 = 1;
      }
      if (*(_BYTE *)(v5 + 392))
      {
        v549 = *(_QWORD *)(v5 + 384);
        LOBYTE(v550) = 1;
      }
      if (*(_BYTE *)(v5 + 408))
      {
        if (!BYTE4(v551))
          BYTE4(v551) = 1;
        LODWORD(v551) = *(_QWORD *)(v5 + 400);
      }
      if (*(_BYTE *)(v5 + 424))
      {
        v552 = *(_QWORD *)(v5 + 416);
        LOBYTE(v553) = 1;
      }
      v292 = v523;
      if (v523)
        *(_DWORD *)v523 += 2;
      JSC::JSLockHolder::JSLockHolder();
      v293 = *(_QWORD *)a2;
      v294 = *(_QWORD *)(*(_QWORD *)a2 + 56);
      if (!v292 || (v295 = *((_DWORD *)v292 + 1)) == 0)
      {
        v296 = *(_QWORD *)(v294 + 41968);
        goto LABEL_782;
      }
      if (v295 != 1)
        goto LABEL_779;
      v323 = (unsigned __int8 *)*((_QWORD *)v292 + 1);
      if ((*((_BYTE *)v292 + 16) & 4) != 0)
      {
        v324 = *v323;
      }
      else
      {
        v430 = *(unsigned __int16 *)v323;
        if (v430 > 0xFF)
        {
LABEL_779:
          v296 = *(_QWORD *)(v294 + 64760);
          if (!v296 || v292 != *(WTF::StringImpl **)(v296 + 8))
          {
            v296 = JSC::jsStringWithCacheSlowCase();
            v293 = *(_QWORD *)a2;
          }
LABEL_782:
          v297 = WebCore::convertDictionaryToJS(v293, v293, (uint64_t)&v521);
          WebCore::setToBackingMap(*(_QWORD *)a2, *(WTF::StringImpl **)(a2 + 8), v296, v297);
          MEMORY[0x19AEA32A0](v631);
          if (v292)
          {
            if (*(_DWORD *)v292 == 2)
            {
              v182 = v292;
              goto LABEL_801;
            }
            *(_DWORD *)v292 -= 2;
          }
LABEL_785:
          v286 = (WTF::StringImpl *)v525;
          *(_QWORD *)&v525 = 0;
          if (!v286)
            goto LABEL_788;
          goto LABEL_786;
        }
        v324 = v430;
      }
      v296 = *(_QWORD *)(v294 + 8 * v324 + 42216);
      goto LABEL_782;
    }
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5) == MEMORY[0x1E0DCDB28]
      || (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5) == MEMORY[0x1E0DCDAF8])
    {
      if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5) == MEMORY[0x1E0DCDB28])
        v92 = 12;
      else
        v92 = 11;
      v93 = *(_QWORD *)(v5 + 32);
      if ((unint64_t)(v93 + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL)
        v93 = 0;
      v521 = WebCore::Performance::reduceTimeResolution((double)v93 / 1000.0 / 1000.0) * 1000.0;
      v522 = v92;
      WTF::String::fromUTF8();
      BYTE4(v525) = 0;
      *((_QWORD *)&v525 + 1) = 0;
      BYTE4(v526) = 0;
      LOBYTE(v527) = 0;
      v528 = 0;
      LOBYTE(v529) = 0;
      BYTE4(v529) = 0;
      BYTE12(v530) = 0;
      v531 = 0;
      LOBYTE(v532) = 0;
      BYTE4(v532) = 0;
      v524 = 0uLL;
      LOBYTE(v525) = 0;
      *((_QWORD *)&v529 + 1) = 0;
      *(_QWORD *)&v530 = 0;
      BYTE8(v530) = 0;
      if (*(_BYTE *)(v5 + 64))
      {
        WTF::String::fromUTF8();
        v95 = v631[0];
        v631[0] = 0;
        v96 = (WTF::StringImpl *)v524;
        *(_QWORD *)&v524 = v95;
        if (v96)
        {
          v97 = *(_DWORD *)v96 - 2;
          if (*(_DWORD *)v96 != 2)
            goto LABEL_310;
          WTF::StringImpl::destroy(v96, v94);
          v96 = (WTF::StringImpl *)v631[0];
          v631[0] = 0;
          if (v96)
          {
            v97 = *(_DWORD *)v96 - 2;
            if (*(_DWORD *)v96 == 2)
              WTF::StringImpl::destroy(v96, v94);
            else
LABEL_310:
              *(_DWORD *)v96 = v97;
          }
        }
      }
      if (*(_BYTE *)(v5 + 136))
      {
        WTF::String::fromUTF8();
        v98 = v631[0];
        v631[0] = 0;
        v99 = (WTF::StringImpl *)*((_QWORD *)&v524 + 1);
        *((_QWORD *)&v524 + 1) = v98;
        if (v99)
        {
          v100 = *(_DWORD *)v99 - 2;
          if (*(_DWORD *)v99 != 2)
            goto LABEL_314;
          WTF::StringImpl::destroy(v99, v94);
          v99 = (WTF::StringImpl *)v631[0];
          v631[0] = 0;
          if (v99)
          {
            v100 = *(_DWORD *)v99 - 2;
            if (*(_DWORD *)v99 == 2)
              WTF::StringImpl::destroy(v99, v94);
            else
LABEL_314:
              *(_DWORD *)v99 = v100;
          }
        }
      }
      if (*(_BYTE *)(v5 + 180))
      {
        LODWORD(v525) = *(_DWORD *)(v5 + 176);
        BYTE4(v525) = 1;
      }
      if (*(_BYTE *)(v5 + 208))
      {
        WTF::String::fromUTF8();
        v101 = v631[0];
        v631[0] = 0;
        v102 = (WTF::StringImpl *)*((_QWORD *)&v525 + 1);
        *((_QWORD *)&v525 + 1) = v101;
        if (v102)
        {
          v103 = *(_DWORD *)v102 - 2;
          if (*(_DWORD *)v102 != 2)
            goto LABEL_320;
          WTF::StringImpl::destroy(v102, v94);
          v102 = (WTF::StringImpl *)v631[0];
          v631[0] = 0;
          if (v102)
          {
            v103 = *(_DWORD *)v102 - 2;
            if (*(_DWORD *)v102 == 2)
              WTF::StringImpl::destroy(v102, v94);
            else
LABEL_320:
              *(_DWORD *)v102 = v103;
          }
        }
      }
      if (*(_BYTE *)(v5 + 272))
      {
        v104 = (unsigned int *)(v5 + 248);
        v105 = *(unsigned __int8 *)(v5 + 271);
        v106 = (unsigned int *)(v5 + 248);
        v107 = v105;
        if (*(char *)(v5 + 271) < 0)
        {
          v107 = *(_QWORD *)(v5 + 256);
          if (v107 < 0)
            goto LABEL_1314;
          v106 = *(unsigned int **)v104;
          if (v107)
          {
            if (!v106)
              goto LABEL_1314;
          }
        }
        if (v107 == 4 && *v106 == 1953722216)
          goto LABEL_417;
        v108 = (unsigned int *)(v5 + 248);
        v109 = *(unsigned __int8 *)(v5 + 271);
        if ((v105 & 0x80) != 0)
        {
          v109 = *(_QWORD *)(v5 + 256);
          if (v109 < 0)
            goto LABEL_1314;
          v108 = *(unsigned int **)v104;
          if (v109)
          {
            if (!v108)
              goto LABEL_1314;
          }
        }
        if (v109 == 5)
        {
          v110 = *v108;
          v111 = *((unsigned __int8 *)v108 + 4);
          if (v110 == 1818653299 && v111 == 120)
          {
            v157 = 1;
            goto LABEL_664;
          }
        }
        v113 = (unsigned int *)(v5 + 248);
        v114 = *(unsigned __int8 *)(v5 + 271);
        if ((v105 & 0x80) != 0)
        {
          v114 = *(_QWORD *)(v5 + 256);
          if (v114 < 0)
            goto LABEL_1314;
          v113 = *(unsigned int **)v104;
          if (v114)
          {
            if (!v113)
              goto LABEL_1314;
          }
        }
        if (v114 == 5)
        {
          v115 = *v113;
          v116 = *((unsigned __int8 *)v113 + 4);
          if (v115 == 1818653296 && v116 == 120)
          {
            v157 = 2;
            goto LABEL_664;
          }
        }
        if ((v105 & 0x80) != 0)
        {
          v105 = *(_QWORD *)(v5 + 256);
          if (v105 < 0)
            goto LABEL_1314;
          v104 = *(unsigned int **)v104;
          if (v105)
          {
            if (!v104)
              goto LABEL_1314;
          }
        }
        if (v105 != 5)
        {
LABEL_417:
          v157 = 0;
          goto LABEL_664;
        }
        v118 = bswap32(*v104);
        if (v118 == 1919249505)
        {
          v119 = *((unsigned __int8 *)v104 + 4) - 121;
        }
        else if (v118 < 0x72656C61)
        {
          v119 = -1;
        }
        else
        {
          v119 = 1;
        }
        if (v119)
          v157 = 0;
        else
          v157 = 3;
LABEL_664:
        LODWORD(v526) = v157;
      }
      else
      {
        v157 = v526;
      }
      if ((v157 | 2) == 2)
      {
        v262 = (WTF::StringImpl *)*((_QWORD *)&v524 + 1);
        *((_QWORD *)&v524 + 1) = 0;
        if (v262)
        {
          if (*(_DWORD *)v262 == 2)
            WTF::StringImpl::destroy(v262, v94);
          else
            *(_DWORD *)v262 -= 2;
        }
      }
      if (*(_BYTE *)(v5 + 284))
      {
        HIDWORD(v526) = *(_DWORD *)(v5 + 280);
        LOBYTE(v527) = 1;
      }
      if (*(_BYTE *)(v5 + 312))
      {
        WTF::String::fromUTF8();
        v264 = (WTF::StringImpl *)v631[0];
        v631[0] = 0;
        v265 = v528;
        v528 = v264;
        if (v265)
        {
          v266 = *(_DWORD *)v265 - 2;
          if (*(_DWORD *)v265 != 2)
            goto LABEL_674;
          WTF::StringImpl::destroy(v265, v263);
          v265 = (WTF::StringImpl *)v631[0];
          v631[0] = 0;
          if (v265)
          {
            v266 = *(_DWORD *)v265 - 2;
            if (*(_DWORD *)v265 == 2)
              WTF::StringImpl::destroy(v265, v309);
            else
LABEL_674:
              *(_DWORD *)v265 = v266;
          }
        }
      }
      if (*(_BYTE *)(v5 + 344))
      {
        WTF::String::fromUTF8();
        v268 = v631[0];
        v631[0] = 0;
        v269 = (WTF::StringImpl *)*((_QWORD *)&v529 + 1);
        *((_QWORD *)&v529 + 1) = v268;
        if (v269)
        {
          v270 = *(_DWORD *)v269 - 2;
          if (*(_DWORD *)v269 != 2)
            goto LABEL_678;
          WTF::StringImpl::destroy(v269, v267);
          v269 = (WTF::StringImpl *)v631[0];
          v631[0] = 0;
          if (v269)
          {
            v270 = *(_DWORD *)v269 - 2;
            if (*(_DWORD *)v269 == 2)
              WTF::StringImpl::destroy(v269, v310);
            else
LABEL_678:
              *(_DWORD *)v269 = v270;
          }
        }
      }
      if (*(_BYTE *)(v5 + 416))
      {
        WTF::String::fromUTF8();
        v272 = (WTF::StringImpl *)v631[0];
        v631[0] = 0;
        v273 = v531;
        v531 = v272;
        if (v273)
        {
          v274 = *(_DWORD *)v273 - 2;
          if (*(_DWORD *)v273 != 2)
            goto LABEL_682;
          WTF::StringImpl::destroy(v273, v271);
          v273 = (WTF::StringImpl *)v631[0];
          v631[0] = 0;
          if (v273)
          {
            v274 = *(_DWORD *)v273 - 2;
            if (*(_DWORD *)v273 == 2)
              WTF::StringImpl::destroy(v273, v311);
            else
LABEL_682:
              *(_DWORD *)v273 = v274;
          }
        }
      }
      if (*(_BYTE *)(v5 + 448))
      {
        WTF::String::fromUTF8();
        WebCore::parseEnumerationFromString<WebCore::RTCIceTcpCandidateType>(v631);
        v276 = (WTF::StringImpl *)v631[0];
        v631[0] = 0;
        if (v276)
        {
          if (*(_DWORD *)v276 == 2)
            WTF::StringImpl::destroy(v276, v275);
          else
            *(_DWORD *)v276 -= 2;
        }
      }
      v277 = v523;
      if (v523)
        *(_DWORD *)v523 += 2;
      JSC::JSLockHolder::JSLockHolder();
      v278 = *(_QWORD *)a2;
      v279 = *(_QWORD *)(*(_QWORD *)a2 + 56);
      if (v277 && (v280 = *((_DWORD *)v277 + 1)) != 0)
      {
        if (v280 != 1)
          goto LABEL_692;
        v321 = (unsigned __int8 *)*((_QWORD *)v277 + 1);
        if ((*((_BYTE *)v277 + 16) & 4) != 0)
        {
          v322 = *v321;
          goto LABEL_874;
        }
        v429 = *(unsigned __int16 *)v321;
        if (v429 > 0xFF)
        {
LABEL_692:
          v281 = *(_QWORD *)(v279 + 64760);
          if (!v281 || v277 != *(WTF::StringImpl **)(v281 + 8))
          {
            v281 = JSC::jsStringWithCacheSlowCase();
            v278 = *(_QWORD *)a2;
          }
        }
        else
        {
          v322 = v429;
LABEL_874:
          v281 = *(_QWORD *)(v279 + 8 * v322 + 42216);
        }
      }
      else
      {
        v281 = *(_QWORD *)(v279 + 41968);
      }
      v282 = WebCore::convertDictionaryToJS(v278, v278, (uint64_t)&v521);
      WebCore::setToBackingMap(*(_QWORD *)a2, *(WTF::StringImpl **)(a2 + 8), v281, v282);
      MEMORY[0x19AEA32A0](v631);
      if (v277)
      {
        if (*(_DWORD *)v277 == 2)
          WTF::StringImpl::destroy(v277, v17);
        else
          *(_DWORD *)v277 -= 2;
      }
      v283 = v531;
      v531 = 0;
      if (v283)
      {
        if (*(_DWORD *)v283 == 2)
          WTF::StringImpl::destroy(v283, v17);
        else
          *(_DWORD *)v283 -= 2;
      }
      v284 = (WTF::StringImpl *)v530;
      *(_QWORD *)&v530 = 0;
      if (v284)
      {
        if (*(_DWORD *)v284 == 2)
          WTF::StringImpl::destroy(v284, v17);
        else
          *(_DWORD *)v284 -= 2;
      }
      v285 = (WTF::StringImpl *)*((_QWORD *)&v529 + 1);
      *((_QWORD *)&v529 + 1) = 0;
      if (v285)
      {
        if (*(_DWORD *)v285 == 2)
          WTF::StringImpl::destroy(v285, v17);
        else
          *(_DWORD *)v285 -= 2;
      }
      v242 = v528;
      v528 = 0;
      if (v242)
      {
        if (*(_DWORD *)v242 != 2)
        {
          *(_DWORD *)v242 -= 2;
          goto LABEL_710;
        }
LABEL_712:
        WTF::StringImpl::destroy(v242, v17);
      }
LABEL_710:
      v286 = (WTF::StringImpl *)*((_QWORD *)&v525 + 1);
      *((_QWORD *)&v525 + 1) = 0;
      if (!v286)
      {
LABEL_788:
        v298 = (WTF::StringImpl *)*((_QWORD *)&v524 + 1);
        *((_QWORD *)&v524 + 1) = 0;
        if (!v298)
          goto LABEL_791;
        if (*(_DWORD *)v298 != 2)
        {
          *(_DWORD *)v298 -= 2;
          goto LABEL_791;
        }
LABEL_1286:
        WTF::StringImpl::destroy(v298, v17);
LABEL_791:
        v215 = (WTF::StringImpl *)v524;
        *(_QWORD *)&v524 = 0;
        if (v215)
        {
LABEL_792:
          if (*(_DWORD *)v215 != 2)
          {
            *(_DWORD *)v215 -= 2;
            goto LABEL_794;
          }
LABEL_1129:
          WTF::StringImpl::destroy(v215, v17);
        }
LABEL_794:
        v299 = v523;
        v523 = 0;
        if (v299)
        {
          if (*(_DWORD *)v299 == 2)
            WTF::StringImpl::destroy(v299, v17);
          else
            *(_DWORD *)v299 -= 2;
        }
        goto LABEL_797;
      }
LABEL_786:
      if (*(_DWORD *)v286 != 2)
      {
        *(_DWORD *)v286 -= 2;
        goto LABEL_788;
      }
LABEL_1127:
      WTF::StringImpl::destroy(v286, v17);
      goto LABEL_788;
    }
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5) == MEMORY[0x1E0DCD988])
    {
      v159 = *(_QWORD *)(v5 + 32);
      if ((unint64_t)(v159 + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL)
        v159 = 0;
      v521 = WebCore::Performance::reduceTimeResolution((double)v159 / 1000.0 / 1000.0) * 1000.0;
      v522 = 13;
      WTF::String::fromUTF8();
      v524 = 0u;
      v525 = 0u;
      if (*(_BYTE *)(v5 + 64))
      {
        WTF::String::fromUTF8();
        v161 = v631[0];
        v631[0] = 0;
        v162 = (WTF::StringImpl *)v524;
        *(_QWORD *)&v524 = v161;
        if (v162)
        {
          v163 = *(_DWORD *)v162 - 2;
          if (*(_DWORD *)v162 != 2)
            goto LABEL_424;
          WTF::StringImpl::destroy(v162, v160);
          v162 = (WTF::StringImpl *)v631[0];
          v631[0] = 0;
          if (v162)
          {
            v163 = *(_DWORD *)v162 - 2;
            if (*(_DWORD *)v162 == 2)
              WTF::StringImpl::destroy(v162, v344);
            else
LABEL_424:
              *(_DWORD *)v162 = v163;
          }
        }
      }
      if (*(_BYTE *)(v5 + 96))
      {
        WTF::String::fromUTF8();
        v165 = v631[0];
        v631[0] = 0;
        v166 = (WTF::StringImpl *)*((_QWORD *)&v524 + 1);
        *((_QWORD *)&v524 + 1) = v165;
        if (v166)
        {
          v167 = *(_DWORD *)v166 - 2;
          if (*(_DWORD *)v166 != 2)
            goto LABEL_428;
          WTF::StringImpl::destroy(v166, v164);
          v166 = (WTF::StringImpl *)v631[0];
          v631[0] = 0;
          if (v166)
          {
            v167 = *(_DWORD *)v166 - 2;
            if (*(_DWORD *)v166 == 2)
              WTF::StringImpl::destroy(v166, v345);
            else
LABEL_428:
              *(_DWORD *)v166 = v167;
          }
        }
      }
      if (*(_BYTE *)(v5 + 128))
      {
        WTF::String::fromUTF8();
        v169 = v631[0];
        v631[0] = 0;
        v170 = (WTF::StringImpl *)v525;
        *(_QWORD *)&v525 = v169;
        if (v170)
        {
          v171 = *(_DWORD *)v170 - 2;
          if (*(_DWORD *)v170 != 2)
            goto LABEL_432;
          WTF::StringImpl::destroy(v170, v168);
          v170 = (WTF::StringImpl *)v631[0];
          v631[0] = 0;
          if (v170)
          {
            v171 = *(_DWORD *)v170 - 2;
            if (*(_DWORD *)v170 == 2)
              WTF::StringImpl::destroy(v170, v346);
            else
LABEL_432:
              *(_DWORD *)v170 = v171;
          }
        }
      }
      if (*(_BYTE *)(v5 + 160))
      {
        WTF::String::fromUTF8();
        v173 = v631[0];
        v631[0] = 0;
        v174 = (WTF::StringImpl *)*((_QWORD *)&v525 + 1);
        *((_QWORD *)&v525 + 1) = v173;
        if (v174)
        {
          v175 = *(_DWORD *)v174 - 2;
          if (*(_DWORD *)v174 != 2)
            goto LABEL_436;
          WTF::StringImpl::destroy(v174, v172);
          v174 = (WTF::StringImpl *)v631[0];
          v631[0] = 0;
          if (v174)
          {
            v175 = *(_DWORD *)v174 - 2;
            if (*(_DWORD *)v174 == 2)
              WTF::StringImpl::destroy(v174, v347);
            else
LABEL_436:
              *(_DWORD *)v174 = v175;
          }
        }
      }
      v176 = v523;
      if (v523)
        *(_DWORD *)v523 += 2;
      JSC::JSLockHolder::JSLockHolder();
      v177 = *(_QWORD *)a2;
      v178 = *(_QWORD *)(*(_QWORD *)a2 + 56);
      if (v176 && (v179 = *((_DWORD *)v176 + 1)) != 0)
      {
        if (v179 != 1)
          goto LABEL_442;
        v390 = (unsigned __int8 *)*((_QWORD *)v176 + 1);
        if ((*((_BYTE *)v176 + 16) & 4) != 0)
        {
          v391 = *v390;
          goto LABEL_1040;
        }
        v497 = *(unsigned __int16 *)v390;
        if (v497 > 0xFF)
        {
LABEL_442:
          v180 = *(_QWORD *)(v178 + 64760);
          if (!v180 || v176 != *(WTF::StringImpl **)(v180 + 8))
          {
            v180 = JSC::jsStringWithCacheSlowCase();
            v177 = *(_QWORD *)a2;
          }
        }
        else
        {
          v391 = v497;
LABEL_1040:
          v180 = *(_QWORD *)(v178 + 8 * v391 + 42216);
        }
      }
      else
      {
        v180 = *(_QWORD *)(v178 + 41968);
      }
      v181 = WebCore::convertDictionaryToJS(v177, v177, (uint64_t)&v521);
      WebCore::setToBackingMap(*(_QWORD *)a2, *(WTF::StringImpl **)(a2 + 8), v180, v181);
      MEMORY[0x19AEA32A0](v631);
      if (v176)
      {
        if (*(_DWORD *)v176 == 2)
          WTF::StringImpl::destroy(v176, v17);
        else
          *(_DWORD *)v176 -= 2;
      }
      v182 = (WTF::StringImpl *)*((_QWORD *)&v525 + 1);
      *((_QWORD *)&v525 + 1) = 0;
      if (v182)
      {
        if (*(_DWORD *)v182 != 2)
        {
          *(_DWORD *)v182 -= 2;
          goto LABEL_785;
        }
LABEL_801:
        WTF::StringImpl::destroy(v182, v17);
      }
      goto LABEL_785;
    }
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5) == MEMORY[0x1E0DCD8A8])
    {
      v220 = *(_QWORD *)(v5 + 32);
      if ((unint64_t)(v220 + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL)
        v220 = 0;
      v521 = WebCore::Performance::reduceTimeResolution((double)v220 / 1000.0 / 1000.0) * 1000.0;
      v522 = 0;
      WTF::String::fromUTF8();
      LODWORD(v524) = 0;
      BYTE12(v525) = 0;
      LOBYTE(v526) = 0;
      BYTE4(v526) = 0;
      *((_QWORD *)&v524 + 1) = 0;
      *(_QWORD *)&v525 = 0;
      BYTE8(v525) = 0;
      v527 = 0;
      v528 = 0;
      if (*(_BYTE *)(v5 + 76))
        LODWORD(v524) = *(_DWORD *)(v5 + 72);
      if (*(_BYTE *)(v5 + 64))
      {
        WTF::String::fromUTF8();
        v222 = v631[0];
        v631[0] = 0;
        v223 = (WTF::StringImpl *)*((_QWORD *)&v524 + 1);
        *((_QWORD *)&v524 + 1) = v222;
        if (v223)
        {
          v224 = *(_DWORD *)v223 - 2;
          if (*(_DWORD *)v223 != 2)
            goto LABEL_566;
          WTF::StringImpl::destroy(v223, v221);
          v223 = (WTF::StringImpl *)v631[0];
          v631[0] = 0;
          if (v223)
          {
            v224 = *(_DWORD *)v223 - 2;
            if (*(_DWORD *)v223 == 2)
              WTF::StringImpl::destroy(v223, v392);
            else
LABEL_566:
              *(_DWORD *)v223 = v224;
          }
        }
      }
      if (*(_BYTE *)(v5 + 104))
      {
        WTF::String::fromUTF8();
        v226 = v631[0];
        v631[0] = 0;
        v227 = (WTF::StringImpl *)v525;
        *(_QWORD *)&v525 = v226;
        if (v227)
        {
          v228 = *(_DWORD *)v227 - 2;
          if (*(_DWORD *)v227 != 2)
            goto LABEL_570;
          WTF::StringImpl::destroy(v227, v225);
          v227 = (WTF::StringImpl *)v631[0];
          v631[0] = 0;
          if (v227)
          {
            v228 = *(_DWORD *)v227 - 2;
            if (*(_DWORD *)v227 == 2)
              WTF::StringImpl::destroy(v227, v393);
            else
LABEL_570:
              *(_DWORD *)v227 = v228;
          }
        }
      }
      if (*(_BYTE *)(v5 + 116))
      {
        DWORD2(v525) = *(_DWORD *)(v5 + 112);
        BYTE12(v525) = 1;
      }
      if (*(_BYTE *)(v5 + 124))
      {
        LODWORD(v526) = *(_DWORD *)(v5 + 120);
        BYTE4(v526) = 1;
      }
      if (*(_BYTE *)(v5 + 152))
      {
        WTF::String::fromUTF8();
        v230 = (WTF::StringImpl *)v631[0];
        v631[0] = 0;
        v231 = v527;
        v527 = v230;
        if (v231)
        {
          v232 = *(_DWORD *)v231 - 2;
          if (*(_DWORD *)v231 != 2)
            goto LABEL_578;
          WTF::StringImpl::destroy(v231, v229);
          v231 = (WTF::StringImpl *)v631[0];
          v631[0] = 0;
          if (v231)
          {
            v232 = *(_DWORD *)v231 - 2;
            if (*(_DWORD *)v231 == 2)
              WTF::StringImpl::destroy(v231, v394);
            else
LABEL_578:
              *(_DWORD *)v231 = v232;
          }
        }
      }
      v233 = v523;
      if (v523)
        *(_DWORD *)v523 += 2;
      JSC::JSLockHolder::JSLockHolder();
      v234 = *(_QWORD *)a2;
      v235 = *(_QWORD *)(*(_QWORD *)a2 + 56);
      if (v233 && (v236 = *((_DWORD *)v233 + 1)) != 0)
      {
        if (v236 != 1)
          goto LABEL_584;
        v431 = (unsigned __int8 *)*((_QWORD *)v233 + 1);
        if ((*((_BYTE *)v233 + 16) & 4) != 0)
        {
          v432 = *v431;
          goto LABEL_1125;
        }
        v500 = *(unsigned __int16 *)v431;
        if (v500 > 0xFF)
        {
LABEL_584:
          v237 = *(_QWORD *)(v235 + 64760);
          if (!v237 || v233 != *(WTF::StringImpl **)(v237 + 8))
          {
            v237 = JSC::jsStringWithCacheSlowCase();
            v234 = *(_QWORD *)a2;
          }
        }
        else
        {
          v432 = v500;
LABEL_1125:
          v237 = *(_QWORD *)(v235 + 8 * v432 + 42216);
        }
      }
      else
      {
        v237 = *(_QWORD *)(v235 + 41968);
      }
      v238 = WebCore::convertDictionaryToJS(v234, v234, (uint64_t)&v521);
      WebCore::setToBackingMap(*(_QWORD *)a2, *(WTF::StringImpl **)(a2 + 8), v237, v238);
      MEMORY[0x19AEA32A0](v631);
      if (v233)
      {
        if (*(_DWORD *)v233 == 2)
          WTF::StringImpl::destroy(v233, v17);
        else
          *(_DWORD *)v233 -= 2;
      }
      v239 = v528;
      v528 = 0;
      if (v239)
      {
        if (*(_DWORD *)v239 == 2)
          WTF::StringImpl::destroy(v239, v17);
        else
          *(_DWORD *)v239 -= 2;
      }
      v213 = v527;
      v527 = 0;
      if (!v213)
      {
LABEL_534:
        v214 = (WTF::StringImpl *)v525;
        *(_QWORD *)&v525 = 0;
        if (v214)
        {
          if (*(_DWORD *)v214 == 2)
            WTF::StringImpl::destroy(v214, v17);
          else
            *(_DWORD *)v214 -= 2;
        }
        v215 = (WTF::StringImpl *)*((_QWORD *)&v524 + 1);
        *((_QWORD *)&v524 + 1) = 0;
        if (v215)
          goto LABEL_792;
        goto LABEL_794;
      }
LABEL_532:
      if (*(_DWORD *)v213 == 2)
        WTF::StringImpl::destroy(v213, v17);
      else
        *(_DWORD *)v213 -= 2;
      goto LABEL_534;
    }
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5) == MEMORY[0x1E0DCD910])
      break;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5) == MEMORY[0x1E0DCDA20])
    {
      v300 = *(_QWORD *)(v5 + 32);
      if ((unint64_t)(v300 + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL)
        v300 = 0;
      v521 = WebCore::Performance::reduceTimeResolution((double)v300 / 1000.0 / 1000.0) * 1000.0;
      v522 = 7;
      WTF::String::fromUTF8();
      LOBYTE(v524) = 0;
      BYTE4(v524) = 0;
      BYTE8(v524) = 0;
      BYTE12(v524) = 0;
      if (*(_BYTE *)(v5 + 44))
      {
        LODWORD(v524) = *(_DWORD *)(v5 + 40);
        BYTE4(v524) = 1;
      }
      if (*(_BYTE *)(v5 + 52))
      {
        DWORD2(v524) = *(_DWORD *)(v5 + 48);
        BYTE12(v524) = 1;
      }
      v301 = v523;
      if (v523)
        *(_DWORD *)v523 += 2;
      JSC::JSLockHolder::JSLockHolder();
      v302 = *(_QWORD *)a2;
      v303 = *(_QWORD *)(*(_QWORD *)a2 + 56);
      if (!v301 || (v304 = *((_DWORD *)v301 + 1)) == 0)
      {
        v305 = *(_QWORD *)(v303 + 41968);
        goto LABEL_816;
      }
      if (v304 != 1)
        goto LABEL_813;
      v495 = (unsigned __int8 *)*((_QWORD *)v301 + 1);
      if ((*((_BYTE *)v301 + 16) & 4) != 0)
      {
        v496 = *v495;
      }
      else
      {
        v508 = *(unsigned __int16 *)v495;
        if (v508 > 0xFF)
        {
LABEL_813:
          v305 = *(_QWORD *)(v303 + 64760);
          if (!v305 || v301 != *(WTF::StringImpl **)(v305 + 8))
          {
            v305 = JSC::jsStringWithCacheSlowCase();
            v302 = *(_QWORD *)a2;
          }
LABEL_816:
          v306 = WebCore::convertDictionaryToJS(v302, v302, (uint64_t)&v521);
          WebCore::setToBackingMap(*(_QWORD *)a2, *(WTF::StringImpl **)(a2 + 8), v305, v306);
          MEMORY[0x19AEA32A0](v631);
          if (v301)
          {
            if (*(_DWORD *)v301 == 2)
            {
              v215 = v301;
              goto LABEL_1129;
            }
            *(_DWORD *)v301 -= 2;
          }
          goto LABEL_794;
        }
        v496 = v508;
      }
      v305 = *(_QWORD *)(v303 + 8 * v496 + 42216);
      goto LABEL_816;
    }
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5) == MEMORY[0x1E0DCD980])
    {
      WebCore::RTCStatsReport::MediaSourceStats::MediaSourceStats((uint64_t)&v521, v5);
      BYTE8(v525) = 0;
      LOBYTE(v526) = 0;
      LOBYTE(v527) = 0;
      LOBYTE(v528) = 0;
      LOBYTE(v529) = 0;
      BYTE8(v529) = 0;
      LOBYTE(v530) = 0;
      BYTE8(v530) = 0;
      LOBYTE(v531) = 0;
      LOBYTE(v532) = 0;
      if (*(_BYTE *)(v5 + 112))
      {
        *((_QWORD *)&v525 + 1) = *(_QWORD *)(v5 + 104);
        LOBYTE(v526) = 1;
      }
      if (*(_BYTE *)(v5 + 128))
      {
        v527 = *(WTF::StringImpl **)(v5 + 120);
        LOBYTE(v528) = 1;
      }
      if (*(_BYTE *)(v5 + 144))
      {
        *(_QWORD *)&v529 = *(_QWORD *)(v5 + 136);
        BYTE8(v529) = 1;
      }
      if (*(_BYTE *)(v5 + 160))
      {
        *(_QWORD *)&v530 = *(_QWORD *)(v5 + 152);
        BYTE8(v530) = 1;
      }
      if (*(_BYTE *)(v5 + 176))
      {
        v531 = *(WTF::StringImpl **)(v5 + 168);
        LOBYTE(v532) = 1;
      }
      v315 = v523;
      if (v523)
        *(_DWORD *)v523 += 2;
      JSC::JSLockHolder::JSLockHolder();
      v316 = *(_QWORD *)a2;
      v317 = *(_QWORD *)(*(_QWORD *)a2 + 56);
      if (v315 && (v318 = *((_DWORD *)v315 + 1)) != 0)
      {
        if (v318 != 1)
        {
LABEL_868:
          v319 = *(_QWORD *)(v317 + 64760);
          if (!v319 || v315 != *(WTF::StringImpl **)(v319 + 8))
          {
            v319 = JSC::jsStringWithCacheSlowCase();
            v316 = *(_QWORD *)a2;
          }
          goto LABEL_871;
        }
        v498 = (unsigned __int8 *)*((_QWORD *)v315 + 1);
        if ((*((_BYTE *)v315 + 16) & 4) != 0)
        {
          v499 = *v498;
        }
        else
        {
          v512 = *(unsigned __int16 *)v498;
          if (v512 > 0xFF)
            goto LABEL_868;
          v499 = v512;
        }
        v319 = *(_QWORD *)(v317 + 8 * v499 + 42216);
      }
      else
      {
        v319 = *(_QWORD *)(v317 + 41968);
      }
LABEL_871:
      v320 = WebCore::convertDictionaryToJS(v316, v316, (uint64_t)&v521);
LABEL_897:
      WebCore::setToBackingMap(*(_QWORD *)a2, *(WTF::StringImpl **)(a2 + 8), v319, v320);
      MEMORY[0x19AEA32A0](v631);
      if (!v315)
        goto LABEL_788;
      if (*(_DWORD *)v315 != 2)
      {
        *(_DWORD *)v315 -= 2;
        goto LABEL_788;
      }
      v286 = v315;
      goto LABEL_1127;
    }
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5) == MEMORY[0x1E0DCD998])
    {
      WebCore::RTCStatsReport::MediaSourceStats::MediaSourceStats((uint64_t)&v521, v5);
      BYTE8(v525) = 0;
      LOBYTE(v526) = 0;
      LOBYTE(v527) = 0;
      LOBYTE(v528) = 0;
      LOBYTE(v529) = 0;
      BYTE8(v529) = 0;
      LOBYTE(v530) = 0;
      BYTE8(v530) = 0;
      if (*(_BYTE *)(v5 + 108))
      {
        v326 = *(unsigned int *)(v5 + 104);
        LOBYTE(v526) = 1;
        *((_QWORD *)&v525 + 1) = v326;
      }
      if (*(_BYTE *)(v5 + 116))
      {
        v327 = (WTF::StringImpl *)*(unsigned int *)(v5 + 112);
        LOBYTE(v528) = 1;
        v527 = v327;
      }
      if (*(_BYTE *)(v5 + 124))
      {
        v328 = *(unsigned int *)(v5 + 120);
        BYTE8(v529) = 1;
        *(_QWORD *)&v529 = v328;
      }
      if (*(_BYTE *)(v5 + 136))
      {
        *(_QWORD *)&v530 = *(_QWORD *)(v5 + 128);
        BYTE8(v530) = 1;
      }
      v315 = v523;
      if (v523)
        *(_DWORD *)v523 += 2;
      JSC::JSLockHolder::JSLockHolder();
      v329 = *(_QWORD *)a2;
      v330 = *(_QWORD *)(*(_QWORD *)a2 + 56);
      if (v315 && (v331 = *((_DWORD *)v315 + 1)) != 0)
      {
        if (v331 != 1)
        {
LABEL_893:
          v319 = *(_QWORD *)(v330 + 64760);
          if (!v319 || v315 != *(WTF::StringImpl **)(v319 + 8))
          {
            v319 = JSC::jsStringWithCacheSlowCase();
            v329 = *(_QWORD *)a2;
          }
          goto LABEL_896;
        }
        v501 = (unsigned __int8 *)*((_QWORD *)v315 + 1);
        if ((*((_BYTE *)v315 + 16) & 4) != 0)
        {
          v502 = *v501;
        }
        else
        {
          v515 = *(unsigned __int16 *)v501;
          if (v515 > 0xFF)
            goto LABEL_893;
          v502 = v515;
        }
        v319 = *(_QWORD *)(v330 + 8 * v502 + 42216);
      }
      else
      {
        v319 = *(_QWORD *)(v330 + 41968);
      }
LABEL_896:
      v320 = WebCore::convertDictionaryToJS(v329, v329, (uint64_t)&v521);
      goto LABEL_897;
    }
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5) == MEMORY[0x1E0DCDB68])
    {
      WebCore::RTCStatsReport::RtpStreamStats::RtpStreamStats((uint64_t)&v521, 3, v5);
      LOBYTE(v526) = 0;
      LOBYTE(v527) = 0;
      LOBYTE(v528) = 0;
      LOBYTE(v529) = 0;
      BYTE8(v529) = 0;
      LOBYTE(v530) = 0;
      if (*(_BYTE *)(v5 + 164))
      {
        v333 = (WTF::StringImpl *)*(int *)(v5 + 160);
        LOBYTE(v529) = 1;
        v528 = v333;
      }
      if (*(_BYTE *)(v5 + 152))
      {
        *((_QWORD *)&v529 + 1) = *(_QWORD *)(v5 + 144);
        LOBYTE(v530) = 1;
      }
      *((_QWORD *)&v530 + 1) = 0;
      LOBYTE(v531) = 0;
      LOBYTE(v532) = 0;
      BYTE8(v532) = 0;
      v533[0] = 0;
      v533[8] = 0;
      v533[16] = 0;
      v533[24] = 0;
      LOBYTE(v534) = 0;
      if (*(_BYTE *)(v5 + 192))
      {
        WTF::String::fromUTF8();
        v335 = v631[0];
        v631[0] = 0;
        v336 = (WTF::StringImpl *)*((_QWORD *)&v530 + 1);
        *((_QWORD *)&v530 + 1) = v335;
        if (v336)
        {
          v337 = *(_DWORD *)v336 - 2;
          if (*(_DWORD *)v336 != 2)
          {
LABEL_910:
            *(_DWORD *)v336 = v337;
            goto LABEL_911;
          }
          WTF::StringImpl::destroy(v336, v334);
          v336 = (WTF::StringImpl *)v631[0];
          v631[0] = 0;
          if (v336)
          {
            v337 = *(_DWORD *)v336 - 2;
            if (*(_DWORD *)v336 != 2)
              goto LABEL_910;
            WTF::StringImpl::destroy(v336, v503);
          }
        }
      }
LABEL_911:
      if (*(_BYTE *)(v5 + 208))
      {
        v531 = *(WTF::StringImpl **)(v5 + 200);
        LOBYTE(v532) = 1;
      }
      if (*(_BYTE *)(v5 + 240))
      {
        *((_QWORD *)&v532 + 1) = *(_QWORD *)(v5 + 232);
        v533[0] = 1;
      }
      if (*(_BYTE *)(v5 + 224))
      {
        *(_QWORD *)&v533[8] = *(_QWORD *)(v5 + 216);
        v533[16] = 1;
      }
      if (*(_BYTE *)(v5 + 252))
      {
        if (!(_BYTE)v534)
          LOBYTE(v534) = 1;
        *(_QWORD *)&v533[24] = *(int *)(v5 + 248);
      }
      v338 = v523;
      if (v523)
        *(_DWORD *)v523 += 2;
      JSC::JSLockHolder::JSLockHolder();
      v339 = *(_QWORD *)a2;
      v340 = *(_QWORD *)(*(_QWORD *)a2 + 56);
      if (v338 && (v341 = *((_DWORD *)v338 + 1)) != 0)
      {
        if (v341 != 1)
        {
LABEL_926:
          v342 = *(_QWORD *)(v340 + 64760);
          if (!v342 || v338 != *(WTF::StringImpl **)(v342 + 8))
          {
            v342 = JSC::jsStringWithCacheSlowCase();
            v339 = *(_QWORD *)a2;
          }
          goto LABEL_929;
        }
        v505 = (unsigned __int8 *)*((_QWORD *)v338 + 1);
        if ((*((_BYTE *)v338 + 16) & 4) != 0)
        {
          v506 = *v505;
        }
        else
        {
          v516 = *(unsigned __int16 *)v505;
          if (v516 > 0xFF)
            goto LABEL_926;
          v506 = v516;
        }
        v342 = *(_QWORD *)(v340 + 8 * v506 + 42216);
      }
      else
      {
        v342 = *(_QWORD *)(v340 + 41968);
      }
LABEL_929:
      v343 = WebCore::convertDictionaryToJS(v339, v339, (uint64_t)&v521);
      WebCore::setToBackingMap(*(_QWORD *)a2, *(WTF::StringImpl **)(a2 + 8), v342, v343);
      MEMORY[0x19AEA32A0](v631);
      if (!v338)
        goto LABEL_189;
      if (*(_DWORD *)v338 != 2)
      {
        *(_DWORD *)v338 -= 2;
        goto LABEL_189;
      }
      v44 = v338;
      goto LABEL_1267;
    }
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5) == MEMORY[0x1E0DCDB70])
    {
      WebCore::RTCStatsReport::RtpStreamStats::RtpStreamStats((uint64_t)&v521, 4, v5);
      LOBYTE(v526) = 0;
      BYTE4(v526) = 0;
      LOBYTE(v527) = 0;
      LOBYTE(v528) = 0;
      if (*(_BYTE *)(v5 + 152))
      {
        v349 = *(_QWORD *)(v5 + 144);
        BYTE4(v526) = 1;
        LODWORD(v526) = v349;
      }
      if (*(_BYTE *)(v5 + 168))
      {
        v527 = *(WTF::StringImpl **)(v5 + 160);
        LOBYTE(v528) = 1;
      }
      *(_QWORD *)&v529 = 0;
      BYTE8(v529) = 0;
      LOBYTE(v530) = 0;
      BYTE8(v530) = 0;
      LOBYTE(v531) = 0;
      LOBYTE(v532) = 0;
      BYTE8(v532) = 0;
      v533[0] = 0;
      v533[8] = 0;
      v533[16] = 0;
      v533[24] = 0;
      if (*(_BYTE *)(v5 + 200))
      {
        WTF::String::fromUTF8();
        v351 = v631[0];
        v631[0] = 0;
        v352 = (WTF::StringImpl *)v529;
        *(_QWORD *)&v529 = v351;
        if (v352)
        {
          v353 = *(_DWORD *)v352 - 2;
          if (*(_DWORD *)v352 != 2)
          {
LABEL_957:
            *(_DWORD *)v352 = v353;
            goto LABEL_958;
          }
          WTF::StringImpl::destroy(v352, v350);
          v352 = (WTF::StringImpl *)v631[0];
          v631[0] = 0;
          if (v352)
          {
            v353 = *(_DWORD *)v352 - 2;
            if (*(_DWORD *)v352 != 2)
              goto LABEL_957;
            WTF::StringImpl::destroy(v352, v507);
          }
        }
      }
LABEL_958:
      if (*(_BYTE *)(v5 + 216))
      {
        *((_QWORD *)&v529 + 1) = *(_QWORD *)(v5 + 208);
        LOBYTE(v530) = 1;
      }
      if (*(_BYTE *)(v5 + 232))
      {
        *((_QWORD *)&v530 + 1) = *(_QWORD *)(v5 + 224);
        LOBYTE(v531) = 1;
      }
      if (*(_BYTE *)(v5 + 248))
      {
        *(_QWORD *)&v532 = *(_QWORD *)(v5 + 240);
        BYTE8(v532) = 1;
      }
      if (*(_BYTE *)(v5 + 280))
      {
        *(_QWORD *)v533 = *(_QWORD *)(v5 + 272);
        v533[8] = 1;
      }
      if (*(_BYTE *)(v5 + 264))
      {
        *(_QWORD *)&v533[16] = *(_QWORD *)(v5 + 256);
        v533[24] = 1;
      }
      v354 = v523;
      if (v523)
        *(_DWORD *)v523 += 2;
      JSC::JSLockHolder::JSLockHolder();
      v355 = *(_QWORD *)a2;
      v356 = *(_QWORD *)(*(_QWORD *)a2 + 56);
      if (v354 && (v357 = *((_DWORD *)v354 + 1)) != 0)
      {
        if (v357 != 1)
        {
LABEL_973:
          v358 = *(_QWORD *)(v356 + 64760);
          if (!v358 || v354 != *(WTF::StringImpl **)(v358 + 8))
          {
            v358 = JSC::jsStringWithCacheSlowCase();
            v355 = *(_QWORD *)a2;
          }
          goto LABEL_976;
        }
        v509 = (unsigned __int8 *)*((_QWORD *)v354 + 1);
        if ((*((_BYTE *)v354 + 16) & 4) != 0)
        {
          v510 = *v509;
        }
        else
        {
          v517 = *(unsigned __int16 *)v509;
          if (v517 > 0xFF)
            goto LABEL_973;
          v510 = v517;
        }
        v358 = *(_QWORD *)(v356 + 8 * v510 + 42216);
      }
      else
      {
        v358 = *(_QWORD *)(v356 + 41968);
      }
LABEL_976:
      v359 = WebCore::convertDictionaryToJS(v355, v355, (uint64_t)&v521);
      WebCore::setToBackingMap(*(_QWORD *)a2, *(WTF::StringImpl **)(a2 + 8), v358, v359);
      MEMORY[0x19AEA32A0](v631);
      if (!v354)
        goto LABEL_528;
      if (*(_DWORD *)v354 != 2)
      {
        *(_DWORD *)v354 -= 2;
        goto LABEL_528;
      }
      v212 = v354;
      goto LABEL_1278;
    }
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5) == MEMORY[0x1E0DCD9B8])
    {
      v6 = *(_QWORD *)(v5 + 32);
      if ((unint64_t)(v6 + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL)
        v6 = 0;
      v521 = WebCore::Performance::reduceTimeResolution((double)v6 / 1000.0 / 1000.0) * 1000.0;
      v522 = 6;
      WTF::String::fromUTF8();
      *(_QWORD *)&v524 = 0;
      BYTE8(v524) = 0;
      LOBYTE(v525) = 0;
      BYTE8(v525) = 0;
      BYTE12(v525) = 0;
      LOBYTE(v526) = 0;
      LOBYTE(v527) = 0;
      LOBYTE(v528) = 0;
      LOBYTE(v529) = 0;
      BYTE8(v529) = 0;
      LOBYTE(v530) = 0;
      if (*(_BYTE *)(v5 + 64))
      {
        WTF::String::fromUTF8();
        v8 = v631[0];
        v631[0] = 0;
        v9 = (WTF::StringImpl *)v524;
        *(_QWORD *)&v524 = v8;
        if (v9)
        {
          v10 = *(_DWORD *)v9 - 2;
          if (*(_DWORD *)v9 != 2)
          {
LABEL_24:
            *(_DWORD *)v9 = v10;
            goto LABEL_25;
          }
          WTF::StringImpl::destroy(v9, v7);
          v9 = (WTF::StringImpl *)v631[0];
          v631[0] = 0;
          if (v9)
          {
            v10 = *(_DWORD *)v9 - 2;
            if (*(_DWORD *)v9 != 2)
              goto LABEL_24;
            WTF::StringImpl::destroy(v9, v511);
          }
        }
      }
LABEL_25:
      if (*(_BYTE *)(v5 + 80))
      {
        *((_QWORD *)&v524 + 1) = *(_QWORD *)(v5 + 72);
        LOBYTE(v525) = 1;
      }
      if (*(_BYTE *)(v5 + 96))
      {
        if (!BYTE12(v525))
          BYTE12(v525) = 1;
        DWORD2(v525) = *(_QWORD *)(v5 + 88);
      }
      if (*(_BYTE *)(v5 + 112))
      {
        v526 = *(_QWORD *)(v5 + 104);
        LOBYTE(v527) = 1;
      }
      if (*(_BYTE *)(v5 + 128))
      {
        v528 = *(WTF::StringImpl **)(v5 + 120);
        LOBYTE(v529) = 1;
      }
      if (*(_BYTE *)(v5 + 144))
      {
        *((_QWORD *)&v529 + 1) = *(_QWORD *)(v5 + 136);
        LOBYTE(v530) = 1;
      }
      v11 = v523;
      if (v523)
        *(_DWORD *)v523 += 2;
      JSC::JSLockHolder::JSLockHolder();
      v12 = *(_QWORD *)a2;
      v13 = *(_QWORD *)(*(_QWORD *)a2 + 56);
      if (v11 && (v14 = *((_DWORD *)v11 + 1)) != 0)
      {
        if (v14 != 1)
        {
LABEL_42:
          v15 = *(_QWORD *)(v13 + 64760);
          if (!v15 || v11 != *(WTF::StringImpl **)(v15 + 8))
          {
            v15 = JSC::jsStringWithCacheSlowCase();
            v12 = *(_QWORD *)a2;
          }
          goto LABEL_45;
        }
        v513 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
        if ((*((_BYTE *)v11 + 16) & 4) != 0)
        {
          v514 = *v513;
        }
        else
        {
          v518 = *(unsigned __int16 *)v513;
          if (v518 > 0xFF)
            goto LABEL_42;
          v514 = v518;
        }
        v15 = *(_QWORD *)(v13 + 8 * v514 + 42216);
      }
      else
      {
        v15 = *(_QWORD *)(v13 + 41968);
      }
LABEL_45:
      v16 = WebCore::convertDictionaryToJS(v12, v12, (uint64_t)&v521);
      WebCore::setToBackingMap(*(_QWORD *)a2, *(WTF::StringImpl **)(a2 + 8), v15, v16);
      MEMORY[0x19AEA32A0](v631);
      if (!v11)
        goto LABEL_791;
      if (*(_DWORD *)v11 != 2)
      {
        *(_DWORD *)v11 -= 2;
        goto LABEL_791;
      }
      v298 = v11;
      goto LABEL_1286;
    }
LABEL_797:
    webrtc::RTCStatsReport::ConstIterator::operator++();
    if ((webrtc::RTCStatsReport::ConstIterator::operator!=() & 1) == 0)
      goto LABEL_1312;
  }
  v244 = *(_QWORD *)(v5 + 32);
  if ((unint64_t)(v244 + 0x7FFFFFFFFFFFFFFFLL) >= 0xFFFFFFFFFFFFFFFELL)
    v244 = 0;
  v521 = WebCore::Performance::reduceTimeResolution((double)v244 / 1000.0 / 1000.0) * 1000.0;
  v522 = 9;
  WTF::String::fromUTF8();
  LOBYTE(v524) = 0;
  BYTE8(v524) = 0;
  LOBYTE(v525) = 0;
  BYTE8(v525) = 0;
  LOBYTE(v526) = 0;
  LOBYTE(v527) = 0;
  LOBYTE(v528) = 0;
  LOBYTE(v529) = 0;
  BYTE8(v529) = 0;
  BYTE12(v529) = 0;
  *(_QWORD *)&v530 = 0;
  BYTE12(v530) = 0;
  LOBYTE(v531) = 0;
  v533[28] = 0;
  v534 = 0;
  LOBYTE(v535) = 0;
  BYTE4(v535) = 0;
  v532 = 0u;
  memset(v533, 0, 25);
  if (*(_BYTE *)(v5 + 64))
  {
    *(_QWORD *)&v524 = *(_QWORD *)(v5 + 56);
    BYTE8(v524) = 1;
  }
  if (*(_BYTE *)(v5 + 96))
  {
    *(_QWORD *)&v525 = *(_QWORD *)(v5 + 88);
    BYTE8(v525) = 1;
  }
  if (*(_BYTE *)(v5 + 48))
  {
    v526 = *(_QWORD *)(v5 + 40);
    LOBYTE(v527) = 1;
  }
  if (*(_BYTE *)(v5 + 80))
  {
    v528 = *(WTF::StringImpl **)(v5 + 72);
    LOBYTE(v529) = 1;
  }
  if (*(_BYTE *)(v5 + 424))
  {
    v245 = v5 + 400;
    v246 = *(unsigned __int8 *)(v5 + 423);
    v247 = (uint64_t *)(v5 + 400);
    v248 = v246;
    if (*(char *)(v5 + 423) < 0)
    {
      v248 = *(_QWORD *)(v5 + 408);
      if (v248 < 0)
        goto LABEL_1314;
      v247 = *(uint64_t **)v245;
      if (v248)
      {
        if (!v247)
          goto LABEL_1314;
      }
    }
    if (v248 == 6
      && ((v249 = *(_DWORD *)v247, v250 = *((unsigned __int16 *)v247 + 2), v249 == 1869311605)
        ? (v251 = v250 == 28279)
        : (v251 = 0),
          v251))
    {
      v261 = 0;
      v260 = 0x100000000;
    }
    else
    {
      v252 = (uint64_t *)(v5 + 400);
      v253 = *(unsigned __int8 *)(v5 + 423);
      if ((v246 & 0x80) != 0)
      {
        v253 = *(_QWORD *)(v5 + 408);
        if (v253 < 0)
          goto LABEL_1314;
        v252 = *(uint64_t **)v245;
        if (v253)
        {
          if (!v252)
            goto LABEL_1314;
        }
      }
      if (v253 == 11
        && ((v254 = *v252, v255 = *(uint64_t *)((char *)v252 + 3), v254 == 0x6C6C6F72746E6F63)
          ? (v256 = v255 == 0x676E696C6C6F7274)
          : (v256 = 0),
            v256))
      {
        v260 = 0x100000000;
        v261 = 1;
      }
      else
      {
        if ((v246 & 0x80) != 0)
        {
          v246 = *(_QWORD *)(v5 + 408);
          if (v246 < 0)
            goto LABEL_1314;
          v245 = *(_QWORD *)v245;
          if (v246)
          {
            if (!v245)
              goto LABEL_1314;
          }
        }
        if (v246 == 10
          && ((v257 = *(_QWORD *)v245, v258 = *(unsigned __int16 *)(v245 + 8), v257 == 0x6C6C6F72746E6F63)
            ? (v259 = v258 == 25701)
            : (v259 = 0),
              v259))
        {
          v260 = 0x100000000;
          v261 = 2;
        }
        else
        {
          v260 = 0;
          v261 = 0;
        }
      }
    }
    BYTE12(v529) = BYTE4(v260);
    DWORD2(v529) = v261 | v260;
  }
  if (*(_BYTE *)(v5 + 456))
  {
    WTF::String::fromUTF8();
    v361 = v631[0];
    v631[0] = 0;
    v362 = (WTF::StringImpl *)v530;
    *(_QWORD *)&v530 = v361;
    if (v362)
    {
      v363 = *(_DWORD *)v362 - 2;
      if (*(_DWORD *)v362 != 2)
        goto LABEL_986;
      WTF::StringImpl::destroy(v362, v360);
      v362 = (WTF::StringImpl *)v631[0];
      v631[0] = 0;
      if (v362)
      {
        v363 = *(_DWORD *)v362 - 2;
        if (*(_DWORD *)v362 == 2)
          WTF::StringImpl::destroy(v362, v433);
        else
LABEL_986:
          *(_DWORD *)v362 = v363;
      }
    }
  }
  if (!*(_BYTE *)(v5 + 160))
  {
LABEL_1052:
    if (*(_BYTE *)(v5 + 488))
    {
      v395 = (uint64_t *)(v5 + 464);
      v396 = *(unsigned __int8 *)(v5 + 487);
      v397 = (unsigned __int16 *)(v5 + 464);
      v398 = v396;
      if (*(char *)(v5 + 487) < 0)
      {
        v398 = *(_QWORD *)(v5 + 472);
        if (v398 < 0)
          goto LABEL_1314;
        v397 = (unsigned __int16 *)*v395;
        if (v398)
        {
          if (!v397)
            goto LABEL_1314;
        }
      }
      if (v398 == 3
        && ((v399 = *v397, v400 = *((unsigned __int8 *)v397 + 2), v399 == 25966) ? (v401 = v400 == 119) : (v401 = 0),
            v401))
      {
        v428 = 0;
        v427 = 0x100000000;
      }
      else
      {
        v402 = (_QWORD *)(v5 + 464);
        v403 = *(unsigned __int8 *)(v5 + 487);
        if ((v396 & 0x80) != 0)
        {
          v403 = *(_QWORD *)(v5 + 472);
          if (v403 < 0)
            goto LABEL_1314;
          v402 = (_QWORD *)*v395;
          if (v403)
          {
            if (!v402)
              goto LABEL_1314;
          }
        }
        if (v403 == 8 && *v402 == 0x676E696B63656863)
        {
          v427 = 0x100000000;
          v428 = 1;
        }
        else
        {
          v404 = v5 + 464;
          v405 = *(unsigned __int8 *)(v5 + 487);
          if ((v396 & 0x80) != 0)
          {
            v405 = *(_QWORD *)(v5 + 472);
            if (v405 < 0)
              goto LABEL_1314;
            v404 = *v395;
            if (v405)
            {
              if (!v404)
                goto LABEL_1314;
            }
          }
          if (v405 == 9
            && ((v406 = *(_QWORD *)v404, v407 = *(unsigned __int8 *)(v404 + 8), v406 == 0x657463656E6E6F63)
              ? (v408 = v407 == 100)
              : (v408 = 0),
                v408))
          {
            v427 = 0x100000000;
            v428 = 2;
          }
          else
          {
            v409 = v5 + 464;
            v410 = *(unsigned __int8 *)(v5 + 487);
            if ((v396 & 0x80) != 0)
            {
              v410 = *(_QWORD *)(v5 + 472);
              if (v410 < 0)
                goto LABEL_1314;
              v409 = *v395;
              if (v410)
              {
                if (!v409)
                  goto LABEL_1314;
              }
            }
            if (v410 == 9
              && ((v411 = *(_QWORD *)v409, v412 = *(unsigned __int8 *)(v409 + 8), v411 == 0x6574656C706D6F63)
                ? (v413 = v412 == 100)
                : (v413 = 0),
                  v413))
            {
              v427 = 0x100000000;
              v428 = 3;
            }
            else
            {
              v414 = v5 + 464;
              v415 = *(unsigned __int8 *)(v5 + 487);
              if ((v396 & 0x80) != 0)
              {
                v415 = *(_QWORD *)(v5 + 472);
                if (v415 < 0)
                  goto LABEL_1314;
                v414 = *v395;
                if (v415)
                {
                  if (!v414)
                    goto LABEL_1314;
                }
              }
              if (v415 == 6
                && ((v416 = *(_DWORD *)v414, v417 = *(unsigned __int16 *)(v414 + 4), v416 == 1818845542)
                  ? (v418 = v417 == 25701)
                  : (v418 = 0),
                    v418))
              {
                v427 = 0x100000000;
                v428 = 4;
              }
              else
              {
                v419 = v5 + 464;
                v420 = *(unsigned __int8 *)(v5 + 487);
                if ((v396 & 0x80) != 0)
                {
                  v420 = *(_QWORD *)(v5 + 472);
                  if (v420 < 0)
                    goto LABEL_1314;
                  v419 = *v395;
                  if (v420)
                  {
                    if (!v419)
                      goto LABEL_1314;
                  }
                }
                if (v420 == 12
                  && ((v421 = *(_QWORD *)v419, v422 = *(_DWORD *)(v419 + 8), v421 == 0x656E6E6F63736964)
                    ? (v423 = v422 == 1684370531)
                    : (v423 = 0),
                      v423))
                {
                  v427 = 0x100000000;
                  v428 = 5;
                }
                else
                {
                  if ((v396 & 0x80) != 0)
                  {
                    v396 = *(_QWORD *)(v5 + 472);
                    if (v396 < 0)
                      goto LABEL_1314;
                    v395 = (uint64_t *)*v395;
                    if (v396)
                    {
                      if (!v395)
                        goto LABEL_1314;
                    }
                  }
                  if (v396 == 6
                    && ((v424 = *(_DWORD *)v395, v425 = *((unsigned __int16 *)v395 + 2), v424 == 1936682083)
                      ? (v426 = v425 == 25701)
                      : (v426 = 0),
                        v426))
                  {
                    v427 = 0x100000000;
                    v428 = 6;
                  }
                  else
                  {
                    v427 = 0;
                    v428 = 0;
                  }
                }
              }
            }
          }
        }
      }
      LOBYTE(v531) = BYTE4(v427);
      HIDWORD(v530) = v428 | v427;
    }
    if (*(_BYTE *)(v5 + 192))
    {
      WTF::String::fromUTF8();
      v435 = v631[0];
      v631[0] = 0;
      v436 = (WTF::StringImpl *)v532;
      *(_QWORD *)&v532 = v435;
      if (v436)
      {
        v437 = *(_DWORD *)v436 - 2;
        if (*(_DWORD *)v436 == 2)
        {
          WTF::StringImpl::destroy(v436, v434);
          v436 = (WTF::StringImpl *)v631[0];
          v631[0] = 0;
          if (!v436)
            goto LABEL_1140;
          v437 = *(_DWORD *)v436 - 2;
          if (*(_DWORD *)v436 == 2)
          {
            WTF::StringImpl::destroy(v436, v487);
            goto LABEL_1140;
          }
        }
        *(_DWORD *)v436 = v437;
      }
    }
LABEL_1140:
    if (*(_BYTE *)(v5 + 224))
    {
      WTF::String::fromUTF8();
      v439 = v631[0];
      v631[0] = 0;
      v440 = (WTF::StringImpl *)*((_QWORD *)&v532 + 1);
      *((_QWORD *)&v532 + 1) = v439;
      if (v440)
      {
        v441 = *(_DWORD *)v440 - 2;
        if (*(_DWORD *)v440 == 2)
        {
          WTF::StringImpl::destroy(v440, v438);
          v440 = (WTF::StringImpl *)v631[0];
          v631[0] = 0;
          if (!v440)
            goto LABEL_1144;
          v441 = *(_DWORD *)v440 - 2;
          if (*(_DWORD *)v440 == 2)
          {
            WTF::StringImpl::destroy(v440, v488);
            goto LABEL_1144;
          }
        }
        *(_DWORD *)v440 = v441;
      }
    }
LABEL_1144:
    if (*(_BYTE *)(v5 + 256))
    {
      WTF::String::fromUTF8();
      v443 = v631[0];
      v631[0] = 0;
      v444 = *(WTF::StringImpl **)v533;
      *(_QWORD *)v533 = v443;
      if (v444)
      {
        v445 = *(_DWORD *)v444 - 2;
        if (*(_DWORD *)v444 == 2)
        {
          WTF::StringImpl::destroy(v444, v442);
          v444 = (WTF::StringImpl *)v631[0];
          v631[0] = 0;
          if (!v444)
            goto LABEL_1148;
          v445 = *(_DWORD *)v444 - 2;
          if (*(_DWORD *)v444 == 2)
          {
            WTF::StringImpl::destroy(v444, v489);
            goto LABEL_1148;
          }
        }
        *(_DWORD *)v444 = v445;
      }
    }
LABEL_1148:
    if (*(_BYTE *)(v5 + 288))
    {
      WTF::String::fromUTF8();
      v447 = v631[0];
      v631[0] = 0;
      v448 = *(WTF::StringImpl **)&v533[8];
      *(_QWORD *)&v533[8] = v447;
      if (v448)
      {
        v449 = *(_DWORD *)v448 - 2;
        if (*(_DWORD *)v448 == 2)
        {
          WTF::StringImpl::destroy(v448, v446);
          v448 = (WTF::StringImpl *)v631[0];
          v631[0] = 0;
          if (!v448)
            goto LABEL_1152;
          v449 = *(_DWORD *)v448 - 2;
          if (*(_DWORD *)v448 == 2)
          {
            WTF::StringImpl::destroy(v448, v490);
            goto LABEL_1152;
          }
        }
        *(_DWORD *)v448 = v449;
      }
    }
LABEL_1152:
    if (*(_BYTE *)(v5 + 320))
    {
      WTF::String::fromUTF8();
      v451 = v631[0];
      v631[0] = 0;
      v452 = *(WTF::StringImpl **)&v533[16];
      *(_QWORD *)&v533[16] = v451;
      if (v452)
      {
        v453 = *(_DWORD *)v452 - 2;
        if (*(_DWORD *)v452 != 2)
        {
LABEL_1155:
          *(_DWORD *)v452 = v453;
          goto LABEL_1156;
        }
        WTF::StringImpl::destroy(v452, v450);
        v452 = (WTF::StringImpl *)v631[0];
        v631[0] = 0;
        if (v452)
        {
          v453 = *(_DWORD *)v452 - 2;
          if (*(_DWORD *)v452 != 2)
            goto LABEL_1155;
          WTF::StringImpl::destroy(v452, v491);
        }
      }
    }
LABEL_1156:
    if (*(_BYTE *)(v5 + 352))
    {
      v454 = v5 + 328;
      v455 = *(unsigned __int8 *)(v5 + 351);
      v456 = v5 + 328;
      v457 = v455;
      if (*(char *)(v5 + 351) < 0)
      {
        v457 = *(_QWORD *)(v5 + 336);
        if (v457 < 0)
          goto LABEL_1314;
        v456 = *(_QWORD *)v454;
        if (v457)
        {
          if (!v456)
            goto LABEL_1314;
        }
      }
      if (v457 == 6
        && ((v458 = *(_DWORD *)v456, v459 = *(unsigned __int16 *)(v456 + 4), v458 == 1701407843)
          ? (v460 = v459 == 29806)
          : (v460 = 0),
            v460))
      {
        v470 = 0;
        v469 = 0x100000000;
      }
      else
      {
        v461 = v5 + 328;
        v462 = *(unsigned __int8 *)(v5 + 351);
        if ((v455 & 0x80) != 0)
        {
          v462 = *(_QWORD *)(v5 + 336);
          if (v462 < 0)
            goto LABEL_1314;
          v461 = *(_QWORD *)v454;
          if (v462)
          {
            if (!v461)
              goto LABEL_1314;
          }
        }
        if (v462 == 6
          && ((v463 = *(_DWORD *)v461, v464 = *(unsigned __int16 *)(v461 + 4), v463 == 1987208563)
            ? (v465 = v464 == 29285)
            : (v465 = 0),
              v465))
        {
          v469 = 0x100000000;
          v470 = 1;
        }
        else
        {
          if ((v455 & 0x80) != 0)
          {
            v455 = *(_QWORD *)(v5 + 336);
            if (v455 < 0)
              goto LABEL_1314;
            v454 = *(_QWORD *)v454;
            if (v455)
            {
              if (!v454)
                goto LABEL_1314;
            }
          }
          if (v455 == 7
            && ((v466 = *(_DWORD *)v454, v467 = *(_DWORD *)(v454 + 3), v466 == 1852534389)
              ? (v468 = v467 == 1853321070)
              : (v468 = 0),
                v468))
          {
            v469 = 0x100000000;
            v470 = 2;
          }
          else
          {
            v469 = 0;
            v470 = 0;
          }
        }
      }
      v533[28] = BYTE4(v469);
      *(_DWORD *)&v533[24] = v470 | v469;
    }
    if (*(_BYTE *)(v5 + 384))
    {
      WTF::String::fromUTF8();
      v472 = (WTF::StringImpl *)v631[0];
      v631[0] = 0;
      v473 = v534;
      v534 = v472;
      if (v473)
      {
        v474 = *(_DWORD *)v473 - 2;
        if (*(_DWORD *)v473 != 2)
        {
LABEL_1192:
          *(_DWORD *)v473 = v474;
          goto LABEL_1193;
        }
        WTF::StringImpl::destroy(v473, v471);
        v473 = (WTF::StringImpl *)v631[0];
        v631[0] = 0;
        if (v473)
        {
          v474 = *(_DWORD *)v473 - 2;
          if (*(_DWORD *)v473 != 2)
            goto LABEL_1192;
          WTF::StringImpl::destroy(v473, v492);
        }
      }
    }
LABEL_1193:
    if (*(_BYTE *)(v5 + 396))
    {
      LODWORD(v535) = *(_DWORD *)(v5 + 392);
      BYTE4(v535) = 1;
    }
    v475 = v523;
    if (v523)
      *(_DWORD *)v523 += 2;
    JSC::JSLockHolder::JSLockHolder();
    v476 = *(_QWORD *)a2;
    v477 = *(_QWORD *)(*(_QWORD *)a2 + 56);
    if (!v475 || (v478 = *((_DWORD *)v475 + 1)) == 0)
    {
      v479 = *(_QWORD *)(v477 + 41968);
      goto LABEL_1203;
    }
    if (v478 != 1)
      goto LABEL_1200;
    v493 = (unsigned __int8 *)*((_QWORD *)v475 + 1);
    if ((*((_BYTE *)v475 + 16) & 4) != 0)
    {
      v494 = *v493;
    }
    else
    {
      v504 = *(unsigned __int16 *)v493;
      if (v504 > 0xFF)
      {
LABEL_1200:
        v479 = *(_QWORD *)(v477 + 64760);
        if (!v479 || v475 != *(WTF::StringImpl **)(v479 + 8))
        {
          v479 = JSC::jsStringWithCacheSlowCase();
          v476 = *(_QWORD *)a2;
        }
LABEL_1203:
        v480 = WebCore::convertDictionaryToJS(v476, v476, (uint64_t)&v521);
        WebCore::setToBackingMap(*(_QWORD *)a2, *(WTF::StringImpl **)(a2 + 8), v479, v480);
        MEMORY[0x19AEA32A0](v631);
        if (v475)
        {
          if (*(_DWORD *)v475 == 2)
            WTF::StringImpl::destroy(v475, v17);
          else
            *(_DWORD *)v475 -= 2;
        }
        v481 = v534;
        v534 = 0;
        if (v481)
        {
          if (*(_DWORD *)v481 == 2)
            WTF::StringImpl::destroy(v481, v17);
          else
            *(_DWORD *)v481 -= 2;
        }
        v482 = *(WTF::StringImpl **)&v533[16];
        *(_QWORD *)&v533[16] = 0;
        if (v482)
        {
          if (*(_DWORD *)v482 == 2)
            WTF::StringImpl::destroy(v482, v17);
          else
            *(_DWORD *)v482 -= 2;
        }
        v483 = *(WTF::StringImpl **)&v533[8];
        *(_QWORD *)&v533[8] = 0;
        if (v483)
        {
          if (*(_DWORD *)v483 == 2)
            WTF::StringImpl::destroy(v483, v17);
          else
            *(_DWORD *)v483 -= 2;
        }
        v484 = *(WTF::StringImpl **)v533;
        *(_QWORD *)v533 = 0;
        if (v484)
        {
          if (*(_DWORD *)v484 == 2)
            WTF::StringImpl::destroy(v484, v17);
          else
            *(_DWORD *)v484 -= 2;
        }
        v485 = (WTF::StringImpl *)*((_QWORD *)&v532 + 1);
        *((_QWORD *)&v532 + 1) = 0;
        if (v485)
        {
          if (*(_DWORD *)v485 == 2)
            WTF::StringImpl::destroy(v485, v17);
          else
            *(_DWORD *)v485 -= 2;
        }
        v486 = (WTF::StringImpl *)v532;
        *(_QWORD *)&v532 = 0;
        if (v486)
        {
          if (*(_DWORD *)v486 == 2)
            WTF::StringImpl::destroy(v486, v17);
          else
            *(_DWORD *)v486 -= 2;
        }
        v215 = (WTF::StringImpl *)v530;
        *(_QWORD *)&v530 = 0;
        if (v215)
          goto LABEL_792;
        goto LABEL_794;
      }
      v494 = v504;
    }
    v479 = *(_QWORD *)(v477 + 8 * v494 + 42216);
    goto LABEL_1203;
  }
  v364 = (uint64_t *)(v5 + 136);
  v365 = *(unsigned __int8 *)(v5 + 159);
  v366 = (unsigned __int16 *)(v5 + 136);
  v367 = v365;
  if (*(char *)(v5 + 159) < 0)
  {
    v367 = *(_QWORD *)(v5 + 144);
    if (v367 < 0)
      goto LABEL_1314;
    v366 = (unsigned __int16 *)*v364;
    if (v367)
    {
      if (!v366)
        goto LABEL_1314;
    }
  }
  if (v367 == 3)
  {
    v368 = *v366;
    v369 = *((unsigned __int8 *)v366 + 2);
    if (v368 == 25966 && v369 == 119)
    {
      v389 = 0;
      goto LABEL_1051;
    }
  }
  v371 = v5 + 136;
  v372 = *(unsigned __int8 *)(v5 + 159);
  if ((v365 & 0x80) != 0)
  {
    v372 = *(_QWORD *)(v5 + 144);
    if (v372 < 0)
      goto LABEL_1314;
    v371 = *v364;
    if (v372)
    {
      if (!v371)
        goto LABEL_1314;
    }
  }
  if (v372 == 10)
  {
    v373 = *(_QWORD *)v371;
    v374 = *(unsigned __int16 *)(v371 + 8);
    if (v373 == 0x697463656E6E6F63 && v374 == 26478)
    {
      v389 = 1;
      goto LABEL_1051;
    }
  }
  v376 = v5 + 136;
  v377 = *(unsigned __int8 *)(v5 + 159);
  if ((v365 & 0x80) != 0)
  {
    v377 = *(_QWORD *)(v5 + 144);
    if (v377 < 0)
      goto LABEL_1314;
    v376 = *v364;
    if (v377)
    {
      if (!v376)
        goto LABEL_1314;
    }
  }
  if (v377 == 9)
  {
    v378 = *(_QWORD *)v376;
    v379 = *(unsigned __int8 *)(v376 + 8);
    if (v378 == 0x657463656E6E6F63 && v379 == 100)
    {
      v389 = 2;
      goto LABEL_1051;
    }
  }
  v381 = v5 + 136;
  v382 = *(unsigned __int8 *)(v5 + 159);
  if ((v365 & 0x80) != 0)
  {
    v382 = *(_QWORD *)(v5 + 144);
    if (v382 < 0)
      goto LABEL_1314;
    v381 = *v364;
    if (v382)
    {
      if (!v381)
        goto LABEL_1314;
    }
  }
  if (v382 == 6)
  {
    v383 = *(_DWORD *)v381;
    v384 = *(unsigned __int16 *)(v381 + 4);
    if (v383 == 1936682083 && v384 == 25701)
    {
      v389 = 3;
      goto LABEL_1051;
    }
  }
  if ((v365 & 0x80) == 0
    || (v365 = *(_QWORD *)(v5 + 144), (v365 & 0x8000000000000000) == 0) && ((v364 = (uint64_t *)*v364, !v365) || v364))
  {
    if (v365 == 6)
    {
      v386 = *(_DWORD *)v364;
      v387 = *((unsigned __int16 *)v364 + 2);
      if (v386 == 1818845542 && v387 == 25701)
      {
        v389 = 4;
LABEL_1051:
        DWORD2(v530) = v389;
        goto LABEL_1052;
      }
    }
  }
LABEL_1314:
  __break(1u);
LABEL_1315:
  __break(0xC471u);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<WebCore::HTMLModelElement& (WebCore::HTMLModelElement::*&)(void),WebCore::HTMLModelElement*>,WebCore::HTMLModelElement&>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::getCamera(WebCore::DOMPromiseDeferred<WebCore::IDLDictionary<WebCore::HTMLModelElementCamera>> &&)::$_0,void,std::optional<WebCore::HTMLModelElementCamera> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E3364370;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::getCamera(WebCore::DOMPromiseDeferred<WebCore::IDLDictionary<WebCore::HTMLModelElementCamera>> &&)::$_0,void,std::optional<WebCore::HTMLModelElementCamera> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3364370;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::getCamera(WebCore::DOMPromiseDeferred<WebCore::IDLDictionary<WebCore::HTMLModelElementCamera>> &&)::$_0,void,std::optional<WebCore::HTMLModelElementCamera> &&>::call(uint64_t result, _OWORD *a2)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  objc_class *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  int v16;
  int v17;
  _OWORD v18[2];
  _BYTE v19[8];

  v2 = a2[1];
  v18[0] = *a2;
  v18[1] = v2;
  v3 = *(_QWORD *)(result + 8);
  if (BYTE8(v2))
  {
    v4 = *(_QWORD *)(v3 + 24);
    if (v4 && *(_QWORD *)v4 && (*(_BYTE *)(v4 + 8) & 3) == 0)
    {
      v5 = *(_QWORD *)(v3 + 32);
      if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
        v6 = 0;
      else
        v6 = *(uint64_t **)v5;
      v7 = v6[7];
      MEMORY[0x19AEA3294](v19, v7);
      v8 = (objc_class *)WebCore::convertDictionaryToJS((uint64_t)v6, **(_QWORD **)(v3 + 32), (double *)v18);
      v9 = *(_QWORD *)(v7 + 16);
      if (!v9)
      {
        WebCore::DeferredPromise::callFunction(v3, v6, 0, v8);
        v9 = *(_QWORD *)(v7 + 16);
        if (!v9)
          return MEMORY[0x19AEA32A0](v19);
      }
      v10 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
      if (!(*(unsigned int (**)(_QWORD *))(*v10 + 64))(v10))
        goto LABEL_11;
      v13 = v10[43];
      if (*(_QWORD *)(v7 + 24) == v9)
        goto LABEL_31;
      if (!v13)
      {
LABEL_11:
        WebCore::reportException((JSC::JSGlobalObject *)v6, v9, 0, 0, 0);
        return MEMORY[0x19AEA32A0](v19);
      }
      v14 = (unsigned __int8 *)(v13 + 40);
      if (__ldaxr((unsigned __int8 *)(v13 + 40)))
      {
        __clrex();
      }
      else if (!__stxr(1u, v14))
      {
        goto LABEL_25;
      }
      MEMORY[0x19AEA534C](v13 + 40);
LABEL_25:
      v16 = *(unsigned __int8 *)(v13 + 41);
      v17 = __ldxr(v14);
      if (v17 == 1)
      {
        if (!__stlxr(0, v14))
        {
LABEL_30:
          if (v16)
          {
LABEL_31:
            *(_BYTE *)(*(_QWORD *)(v13 + 8) + 93442) = 1;
            *(_BYTE *)(v3 + 44) = 1;
            goto LABEL_11;
          }
          goto LABEL_11;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)(v13 + 40));
      goto LABEL_30;
    }
  }
  else
  {
    v11 = *(_QWORD *)(v3 + 24);
    if (v11 && *(_QWORD *)v11 && (*(_BYTE *)(v11 + 8) & 3) == 0)
    {
      v12 = **(uint64_t ***)(v3 + 32);
      JSC::JSLockHolder::JSLockHolder();
      WebCore::DeferredPromise::callFunction(v3, v12, 1, (objc_class *)0xA);
      return MEMORY[0x19AEA32A0](v19);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::setCamera(WebCore::HTMLModelElementCamera,WebCore::DOMPromiseDeferred<void> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E3364398;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::setCamera(WebCore::HTMLModelElementCamera,WebCore::DOMPromiseDeferred<void> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3364398;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::setCamera(WebCore::HTMLModelElementCamera,WebCore::DOMPromiseDeferred<void> &&)::$_0,void,BOOL>::call(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  _BYTE v11[8];

  v2 = *(_QWORD *)(result + 8);
  if (a2)
  {
    v3 = *(_QWORD *)(v2 + 24);
    if (v3 && *(_QWORD *)v3 && (*(_BYTE *)(v3 + 8) & 3) == 0)
    {
      v4 = *(_QWORD *)(v2 + 32);
      if (!v4 || (*(_BYTE *)(v4 + 8) & 3) != 0)
        v5 = 0;
      else
        v5 = *(uint64_t **)v4;
      JSC::JSLockHolder::JSLockHolder();
      v6 = v2;
      v7 = v5;
      v8 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    v9 = *(_QWORD *)(v2 + 24);
    if (v9 && *(_QWORD *)v9 && (*(_BYTE *)(v9 + 8) & 3) == 0)
    {
      v10 = **(uint64_t ***)(v2 + 32);
      JSC::JSLockHolder::JSLockHolder();
      v6 = v2;
      v7 = v10;
      v8 = 1;
LABEL_13:
      WebCore::DeferredPromise::callFunction(v6, v7, v8, (objc_class *)0xA);
      return MEMORY[0x19AEA32A0](v11);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::isPlayingAnimation(WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,std::optional<BOOL> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33643C0;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::isPlayingAnimation(WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,std::optional<BOOL> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33643C0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::isPlayingAnimation(WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,std::optional<BOOL> &&>::call(uint64_t result, _WORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  _BYTE v5[8];

  if ((unsigned __int16)*a2 > 0xFFu)
    return WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(*(_QWORD *)(result + 8), *a2 != 0);
  v2 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3 && *(_QWORD *)v3 && (*(_BYTE *)(v3 + 8) & 3) == 0)
  {
    v4 = **(uint64_t ***)(v2 + 32);
    JSC::JSLockHolder::JSLockHolder();
    WebCore::DeferredPromise::callFunction(v2, v4, 1, (objc_class *)0xA);
    return MEMORY[0x19AEA32A0](v5);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::setAnimationIsPlaying(BOOL,WebCore::DOMPromiseDeferred<void> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33643E8;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::setAnimationIsPlaying(BOOL,WebCore::DOMPromiseDeferred<void> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33643E8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::setAnimationIsPlaying(BOOL,WebCore::DOMPromiseDeferred<void> &&)::$_0,void,BOOL>::call(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  _BYTE v11[8];

  v2 = *(_QWORD *)(result + 8);
  if (a2)
  {
    v3 = *(_QWORD *)(v2 + 24);
    if (v3 && *(_QWORD *)v3 && (*(_BYTE *)(v3 + 8) & 3) == 0)
    {
      v4 = *(_QWORD *)(v2 + 32);
      if (!v4 || (*(_BYTE *)(v4 + 8) & 3) != 0)
        v5 = 0;
      else
        v5 = *(uint64_t **)v4;
      JSC::JSLockHolder::JSLockHolder();
      v6 = v2;
      v7 = v5;
      v8 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    v9 = *(_QWORD *)(v2 + 24);
    if (v9 && *(_QWORD *)v9 && (*(_BYTE *)(v9 + 8) & 3) == 0)
    {
      v10 = **(uint64_t ***)(v2 + 32);
      JSC::JSLockHolder::JSLockHolder();
      v6 = v2;
      v7 = v10;
      v8 = 1;
LABEL_13:
      WebCore::DeferredPromise::callFunction(v6, v7, v8, (objc_class *)0xA);
      return MEMORY[0x19AEA32A0](v11);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::isLoopingAnimation(WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,std::optional<BOOL> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E3364410;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::isLoopingAnimation(WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,std::optional<BOOL> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3364410;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::isLoopingAnimation(WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,std::optional<BOOL> &&>::call(uint64_t result, _WORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  _BYTE v5[8];

  if ((unsigned __int16)*a2 > 0xFFu)
    return WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(*(_QWORD *)(result + 8), *a2 != 0);
  v2 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3 && *(_QWORD *)v3 && (*(_BYTE *)(v3 + 8) & 3) == 0)
  {
    v4 = **(uint64_t ***)(v2 + 32);
    JSC::JSLockHolder::JSLockHolder();
    WebCore::DeferredPromise::callFunction(v2, v4, 1, (objc_class *)0xA);
    return MEMORY[0x19AEA32A0](v5);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::setIsLoopingAnimation(BOOL,WebCore::DOMPromiseDeferred<void> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E3364438;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::setIsLoopingAnimation(BOOL,WebCore::DOMPromiseDeferred<void> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3364438;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::setIsLoopingAnimation(BOOL,WebCore::DOMPromiseDeferred<void> &&)::$_0,void,BOOL>::call(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  _BYTE v11[8];

  v2 = *(_QWORD *)(result + 8);
  if (a2)
  {
    v3 = *(_QWORD *)(v2 + 24);
    if (v3 && *(_QWORD *)v3 && (*(_BYTE *)(v3 + 8) & 3) == 0)
    {
      v4 = *(_QWORD *)(v2 + 32);
      if (!v4 || (*(_BYTE *)(v4 + 8) & 3) != 0)
        v5 = 0;
      else
        v5 = *(uint64_t **)v4;
      JSC::JSLockHolder::JSLockHolder();
      v6 = v2;
      v7 = v5;
      v8 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    v9 = *(_QWORD *)(v2 + 24);
    if (v9 && *(_QWORD *)v9 && (*(_BYTE *)(v9 + 8) & 3) == 0)
    {
      v10 = **(uint64_t ***)(v2 + 32);
      JSC::JSLockHolder::JSLockHolder();
      v6 = v2;
      v7 = v10;
      v8 = 1;
LABEL_13:
      WebCore::DeferredPromise::callFunction(v6, v7, v8, (objc_class *)0xA);
      return MEMORY[0x19AEA32A0](v11);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::animationDuration(WebCore::DOMPromiseDeferred<WebCore::IDLDouble> &&)::$_0,void,std::optional<WTF::Seconds> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E3364460;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::animationDuration(WebCore::DOMPromiseDeferred<WebCore::IDLDouble> &&)::$_0,void,std::optional<WTF::Seconds> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3364460;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::animationDuration(WebCore::DOMPromiseDeferred<WebCore::IDLDouble> &&)::$_0,void,std::optional<WTF::Seconds> &&>::call(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  _BYTE v5[8];

  if (*(_BYTE *)(a2 + 8))
    return WebCore::DeferredPromise::resolve<WebCore::IDLDouble>(*(_QWORD *)(result + 8), *(double *)a2);
  v2 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3 && *(_QWORD *)v3 && (*(_BYTE *)(v3 + 8) & 3) == 0)
  {
    v4 = **(uint64_t ***)(v2 + 32);
    JSC::JSLockHolder::JSLockHolder();
    WebCore::DeferredPromise::callFunction(v2, v4, 1, (objc_class *)0xA);
    return MEMORY[0x19AEA32A0](v5);
  }
  return result;
}

uint64_t WebCore::DeferredPromise::resolve<WebCore::IDLDouble>(uint64_t result, double a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  objc_class *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v15;
  int v16;
  _BYTE v17[8];

  v2 = *(_QWORD *)(result + 24);
  if (v2 && *(_QWORD *)v2 && (*(_BYTE *)(v2 + 8) & 3) == 0)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 32);
    if (!v5 || (*(_BYTE *)(v5 + 8) & 3) != 0)
      v6 = 0;
    else
      v6 = *(uint64_t **)v5;
    v7 = v6[7];
    MEMORY[0x19AEA3294](v17, v7);
    if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (v8 = (int)a2, (double)(int)v8 == a2)
      && ((_DWORD)v8 || (*(_QWORD *)&a2 & 0x8000000000000000) == 0))
    {
      v9 = (objc_class *)(v8 | 0xFFFE000000000000);
    }
    else
    {
      v9 = (objc_class *)(*(_QWORD *)&a2 + 0x2000000000000);
    }
    v10 = *(_QWORD *)(v7 + 16);
    if (!v10)
    {
      WebCore::DeferredPromise::callFunction(v4, v6, 0, v9);
      v10 = *(_QWORD *)(v7 + 16);
      if (!v10)
        return MEMORY[0x19AEA32A0](v17);
    }
    v11 = (_QWORD *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)v6);
    if (!(*(unsigned int (**)(_QWORD *))(*v11 + 64))(v11))
    {
LABEL_18:
      WebCore::reportException((JSC::JSGlobalObject *)v6, v10, 0, 0, 0);
      return MEMORY[0x19AEA32A0](v17);
    }
    v12 = v11[43];
    if (*(_QWORD *)(v7 + 24) == v10)
    {
LABEL_32:
      *(_BYTE *)(*(_QWORD *)(v12 + 8) + 93442) = 1;
      *(_BYTE *)(v4 + 44) = 1;
      goto LABEL_18;
    }
    if (!v12)
      goto LABEL_18;
    v13 = (unsigned __int8 *)(v12 + 40);
    if (__ldaxr((unsigned __int8 *)(v12 + 40)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v13))
    {
      goto LABEL_26;
    }
    MEMORY[0x19AEA534C](v12 + 40);
LABEL_26:
    v15 = *(unsigned __int8 *)(v12 + 41);
    v16 = __ldxr(v13);
    if (v16 == 1)
    {
      if (!__stlxr(0, v13))
      {
LABEL_31:
        if (!v15)
          goto LABEL_18;
        goto LABEL_32;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)(v12 + 40));
    goto LABEL_31;
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::animationCurrentTime(WebCore::DOMPromiseDeferred<WebCore::IDLDouble> &&)::$_0,void,std::optional<WTF::Seconds> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E3364488;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::animationCurrentTime(WebCore::DOMPromiseDeferred<WebCore::IDLDouble> &&)::$_0,void,std::optional<WTF::Seconds> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3364488;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::animationCurrentTime(WebCore::DOMPromiseDeferred<WebCore::IDLDouble> &&)::$_0,void,std::optional<WTF::Seconds> &&>::call(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  _BYTE v5[8];

  if (*(_BYTE *)(a2 + 8))
    return WebCore::DeferredPromise::resolve<WebCore::IDLDouble>(*(_QWORD *)(result + 8), *(double *)a2);
  v2 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3 && *(_QWORD *)v3 && (*(_BYTE *)(v3 + 8) & 3) == 0)
  {
    v4 = **(uint64_t ***)(v2 + 32);
    JSC::JSLockHolder::JSLockHolder();
    WebCore::DeferredPromise::callFunction(v2, v4, 1, (objc_class *)0xA);
    return MEMORY[0x19AEA32A0](v5);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::setAnimationCurrentTime(double,WebCore::DOMPromiseDeferred<void> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33644B0;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::setAnimationCurrentTime(double,WebCore::DOMPromiseDeferred<void> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33644B0;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::setAnimationCurrentTime(double,WebCore::DOMPromiseDeferred<void> &&)::$_0,void,BOOL>::call(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  _BYTE v11[8];

  v2 = *(_QWORD *)(result + 8);
  if (a2)
  {
    v3 = *(_QWORD *)(v2 + 24);
    if (v3 && *(_QWORD *)v3 && (*(_BYTE *)(v3 + 8) & 3) == 0)
    {
      v4 = *(_QWORD *)(v2 + 32);
      if (!v4 || (*(_BYTE *)(v4 + 8) & 3) != 0)
        v5 = 0;
      else
        v5 = *(uint64_t **)v4;
      JSC::JSLockHolder::JSLockHolder();
      v6 = v2;
      v7 = v5;
      v8 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    v9 = *(_QWORD *)(v2 + 24);
    if (v9 && *(_QWORD *)v9 && (*(_BYTE *)(v9 + 8) & 3) == 0)
    {
      v10 = **(uint64_t ***)(v2 + 32);
      JSC::JSLockHolder::JSLockHolder();
      v6 = v2;
      v7 = v10;
      v8 = 1;
LABEL_13:
      WebCore::DeferredPromise::callFunction(v6, v7, v8, (objc_class *)0xA);
      return MEMORY[0x19AEA32A0](v11);
    }
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::hasAudio(WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,std::optional<BOOL> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33644D8;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::hasAudio(WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,std::optional<BOOL> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33644D8;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::hasAudio(WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,std::optional<BOOL> &&>::call(uint64_t result, _WORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  _BYTE v5[8];

  if ((unsigned __int16)*a2 > 0xFFu)
    return WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(*(_QWORD *)(result + 8), *a2 != 0);
  v2 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3 && *(_QWORD *)v3 && (*(_BYTE *)(v3 + 8) & 3) == 0)
  {
    v4 = **(uint64_t ***)(v2 + 32);
    JSC::JSLockHolder::JSLockHolder();
    WebCore::DeferredPromise::callFunction(v2, v4, 1, (objc_class *)0xA);
    return MEMORY[0x19AEA32A0](v5);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::isMuted(WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,std::optional<BOOL> &&>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E3364500;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::isMuted(WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,std::optional<BOOL> &&>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3364500;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::isMuted(WebCore::DOMPromiseDeferred<WebCore::IDLBoolean> &&)::$_0,void,std::optional<BOOL> &&>::call(uint64_t result, _WORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  _BYTE v5[8];

  if ((unsigned __int16)*a2 > 0xFFu)
    return WebCore::DeferredPromise::resolve<WebCore::IDLBoolean>(*(_QWORD *)(result + 8), *a2 != 0);
  v2 = *(_QWORD *)(result + 8);
  v3 = *(_QWORD *)(v2 + 24);
  if (v3 && *(_QWORD *)v3 && (*(_BYTE *)(v3 + 8) & 3) == 0)
  {
    v4 = **(uint64_t ***)(v2 + 32);
    JSC::JSLockHolder::JSLockHolder();
    WebCore::DeferredPromise::callFunction(v2, v4, 1, (objc_class *)0xA);
    return MEMORY[0x19AEA32A0](v5);
  }
  return result;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::setIsMuted(BOOL,WebCore::DOMPromiseDeferred<void> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E3364528;
  a1[1] = 0;
  if (v2)
  {
    if (v2[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 16))(v2);
    else
      --v2[4];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::setIsMuted(BOOL,WebCore::DOMPromiseDeferred<void> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E3364528;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::HTMLModelElement::setIsMuted(BOOL,WebCore::DOMPromiseDeferred<void> &&)::$_0,void,BOOL>::call(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  _BYTE v11[8];

  v2 = *(_QWORD *)(result + 8);
  if (a2)
  {
    v3 = *(_QWORD *)(v2 + 24);
    if (v3 && *(_QWORD *)v3 && (*(_BYTE *)(v3 + 8) & 3) == 0)
    {
      v4 = *(_QWORD *)(v2 + 32);
      if (!v4 || (*(_BYTE *)(v4 + 8) & 3) != 0)
        v5 = 0;
      else
        v5 = *(uint64_t **)v4;
      JSC::JSLockHolder::JSLockHolder();
      v6 = v2;
      v7 = v5;
      v8 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    v9 = *(_QWORD *)(v2 + 24);
    if (v9 && *(_QWORD *)v9 && (*(_BYTE *)(v9 + 8) & 3) == 0)
    {
      v10 = **(uint64_t ***)(v2 + 32);
      JSC::JSLockHolder::JSLockHolder();
      v6 = v2;
      v7 = v10;
      v8 = 1;
LABEL_13:
      WebCore::DeferredPromise::callFunction(v6, v7, v8, (objc_class *)0xA);
      return MEMORY[0x19AEA32A0](v11);
    }
  }
  return result;
}

uint64_t WebCore::DummyModelPlayer::create@<X0>(WebCore::DummyModelPlayer *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  uint64_t result;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v5 + 8) = 1;
  *(_QWORD *)v5 = off_1E3364550;
  result = *((_QWORD *)this + 1);
  if (result)
    goto LABEL_11;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = this;
  v8 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = result;
  if (!v8)
    goto LABEL_11;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v7);
  }
  result = *((_QWORD *)this + 1);
  if (result)
  {
LABEL_11:
    do
      v11 = __ldaxr((unsigned int *)result);
    while (__stlxr(v11 + 1, (unsigned int *)result));
  }
  *(_QWORD *)(v5 + 16) = result;
  *a2 = v5;
  return result;
}

WebCore::DummyModelPlayer *WebCore::DummyModelPlayer::DummyModelPlayer(WebCore::DummyModelPlayer *this, WebCore::ModelPlayerClient *a2)
{
  uint64_t v3;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E3364550;
  v3 = *((_QWORD *)a2 + 1);
  if (v3)
    goto LABEL_11;
  v3 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = a2;
  v6 = (unsigned int *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  if (!v6)
    goto LABEL_11;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  v3 = *((_QWORD *)a2 + 1);
  if (v3)
  {
LABEL_11:
    do
      v9 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v9 + 1, (unsigned int *)v3));
  }
  *((_QWORD *)this + 2) = v3;
  return this;
}

{
  uint64_t v3;
  void *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;

  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E3364550;
  v3 = *((_QWORD *)a2 + 1);
  if (v3)
    goto LABEL_11;
  v3 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = a2;
  v6 = (unsigned int *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v3;
  if (!v6)
    goto LABEL_11;
  do
  {
    v7 = __ldaxr(v6);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, v6));
  if (!v8)
  {
    atomic_store(1u, v6);
    WTF::fastFree((WTF *)v6, v5);
  }
  v3 = *((_QWORD *)a2 + 1);
  if (v3)
  {
LABEL_11:
    do
      v9 = __ldaxr((unsigned int *)v3);
    while (__stlxr(v9 + 1, (unsigned int *)v3));
  }
  *((_QWORD *)this + 2) = v3;
  return this;
}

void WebCore::DummyModelPlayer::~DummyModelPlayer(WebCore::DummyModelPlayer *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::fastFree(this, a2);
}

WTF::StringImpl *WebCore::DummyModelPlayer::load(WTF::StringImpl *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  __int128 v9;
  WTF::StringImpl *v10;
  CFTypeRef v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  __int128 v16;
  __int128 v17;
  WTF::StringImpl *v18;
  int v19;
  __int16 v20;
  CFTypeRef cf;
  char v22;

  v2 = *((_QWORD *)result + 2);
  if (!v2)
    return result;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return result;
  v5 = result;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = v14;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v7 = v14;
  if (v14)
    *(_DWORD *)v14 += 2;
  v14 = v6;
  v8 = *(WTF::StringImpl **)(a2 + 24);
  if (v8)
    *(_DWORD *)v8 += 2;
  v15 = v8;
  v9 = *(_OWORD *)(a2 + 48);
  v16 = *(_OWORD *)(a2 + 32);
  v17 = v9;
  if (v7)
    *(_DWORD *)v7 += 2;
  v18 = v7;
  v19 = 0;
  v20 = 1;
  cf = 0;
  v22 = 1;
  (*(void (**)(uint64_t, WTF::StringImpl *, WTF::StringImpl **))(*(_QWORD *)v3 + 32))(v3, v5, &v14);
  v11 = cf;
  cf = 0;
  if (v11)
    CFRelease(v11);
  v12 = v18;
  v18 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = v15;
  v15 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  result = v14;
  v14 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v10);
      if (!v7)
        goto LABEL_23;
      goto LABEL_21;
    }
    *(_DWORD *)result -= 2;
  }
  if (!v7)
    goto LABEL_23;
LABEL_21:
  if (*(_DWORD *)v7 == 2)
    result = (WTF::StringImpl *)WTF::StringImpl::destroy(v7, v10);
  else
    *(_DWORD *)v7 -= 2;
LABEL_23:
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v6, v10);
    else
      *(_DWORD *)v6 -= 2;
  }
  return result;
}

uint64_t WebCore::DummyModelPlayer::layer(WebCore::DummyModelPlayer *this)
{
  return 0;
}

uint64_t WebCore::DummyModelPlayer::layerHostingContextIdentifier(WebCore::DummyModelPlayer *this)
{
  return 0;
}

void WebCore::DummyModelPlayer::accessibilityChildren(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

_QWORD *WebCore::DummyModelPlayerProvider::DummyModelPlayerProvider(_QWORD *this)
{
  *this = off_1E3364650;
  return this;
}

{
  *this = off_1E3364650;
  return this;
}

uint64_t WebCore::DummyModelPlayerProvider::createModelPlayer@<X0>(WebCore::ModelPlayerClient *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  uint64_t result;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  v5 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)(v5 + 8) = 1;
  *(_QWORD *)v5 = off_1E3364550;
  result = *((_QWORD *)a1 + 1);
  if (result)
    goto LABEL_11;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = a1;
  v8 = (unsigned int *)*((_QWORD *)a1 + 1);
  *((_QWORD *)a1 + 1) = result;
  if (!v8)
    goto LABEL_11;
  do
  {
    v9 = __ldaxr(v8);
    v10 = v9 - 1;
  }
  while (__stlxr(v10, v8));
  if (!v10)
  {
    atomic_store(1u, v8);
    WTF::fastFree((WTF *)v8, v7);
  }
  result = *((_QWORD *)a1 + 1);
  if (result)
  {
LABEL_11:
    do
      v11 = __ldaxr((unsigned int *)result);
    while (__stlxr(v11 + 1, (unsigned int *)result));
  }
  *(_QWORD *)(v5 + 16) = result;
  *a2 = v5;
  return result;
}

void *WebCore::Notification::bisoHeap(WebCore::Notification *this)
{
  return &WebCore::Notification::bisoHeap(void)::heap;
}

uint64_t WebCore::Notification::operator new(uint64_t this)
{
  if (this == 288)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

uint64_t (***WebCore::Notification::create@<X0>(WebCore::ScriptExecutionContext *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X2>, uint64_t a4@<X8>))()
{
  uint64_t v4;
  uint64_t (***result)();
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned int *v15;
  unsigned int v17;
  unsigned int v18;
  void *v19;
  uint64_t v20;
  int v21;
  uint64_t (**v22)();
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (**v28)();
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32[3];
  uint64_t v33;
  _QWORD v34[2];

  if ((*(unsigned int (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a1 + 72))(a1))
  {
    result = (uint64_t (***)())WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a4 = 33;
    *(_DWORD *)(a4 + 16) = 1;
    return result;
  }
  WebCore::createSerializedScriptValue((uint64_t)&v29, a1, *((_QWORD *)a3 + 5));
  if (!v31)
  {
    v4 = bmalloc::api::isoAllocate();
    WTF::UUID::UUID((WTF::UUID *)v32);
    v12 = v32[0];
    v13 = v29;
    v29 = 0;
    v32[0] = v13;
    WebCore::Notification::Notification((WebCore::ContextDestructionObserver *)v4, a1, v12, v32[1], a2, (uint64_t)a3, v32);
    v15 = (unsigned int *)v32[0];
    v32[0] = 0;
    if (v15)
    {
      do
      {
        v17 = __ldaxr(v15);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v15));
      if (!v18)
      {
        atomic_store(1u, v15);
        WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v15 + 2), v14);
        WTF::fastFree((WTF *)v15, v19);
      }
    }
    WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v4);
    if (*(_QWORD *)(v4 + 224))
    {
LABEL_21:
      v22 = (uint64_t (**)())WTF::fastMalloc((WTF *)0x10);
      *v22 = (uint64_t (*)())off_1E3364718;
      v22[1] = (uint64_t (*)())v4;
      v23 = WTF::fastMalloc((WTF *)0x10);
      *(_DWORD *)v23 = 1;
      v24 = *(_DWORD *)(v4 + 24);
      *(_QWORD *)(v23 + 8) = v4;
      ++*(_QWORD *)(v4 + 16);
      *(_DWORD *)(v4 + 24) = v24 + 2;
      result = (uint64_t (***)())WTF::fastMalloc((WTF *)0x20);
      *result = off_1E33646F0;
      result[1] = (uint64_t (**)())v4;
      result[2] = (uint64_t (**)())v23;
      result[3] = v22;
      v32[0] = (uint64_t)result;
      v25 = *(_QWORD *)(v4 + 8);
      if (v25)
      {
        v26 = *(_QWORD *)(v25 + 8);
        if (v26)
        {
          v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v26 - 96) + 104))(v26 - 96);
          WebCore::EventLoopTaskGroup::queueTask(v27, 20, v32);
          result = (uint64_t (***)())v32[0];
          v32[0] = 0;
          if (!result)
          {
LABEL_28:
            *(_QWORD *)a4 = v4;
            *(_DWORD *)(a4 + 16) = 0;
            v11 = v31;
            if (v31 == -1)
              return result;
            return (uint64_t (***)())((uint64_t (*)(uint64_t *, uint64_t *))off_1E3364688[v11])(v32, &v29);
          }
        }
        else
        {
          v32[0] = 0;
        }
        v28 = *result;
      }
      else
      {
        v32[0] = 0;
        v28 = off_1E33646F0;
      }
      result = (uint64_t (***)())v28[1]();
      goto LABEL_28;
    }
    a3 = (unsigned __int8 *)&_MergedGlobals_144;
    if (__ldaxr((unsigned __int8 *)&_MergedGlobals_144))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)&_MergedGlobals_144))
    {
      goto LABEL_15;
    }
    MEMORY[0x19AEA534C](&_MergedGlobals_144);
LABEL_15:
    if ((byte_1ECE82091 & 1) != 0)
      goto LABEL_16;
    goto LABEL_33;
  }
  if (v31 != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_33:
    qword_1ECE82098 = 0;
    byte_1ECE82091 = 1;
LABEL_16:
    v20 = *(_QWORD *)(v4 + 72);
    v34[0] = *(_QWORD *)(v4 + 64);
    v34[1] = v20;
    v33 = v4;
    WTF::HashMap<WTF::UUID,WebCore::Notification *,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::Notification *>,WTF::HashTableTraits>::add<WebCore::Notification *>((uint64_t)v32, v34, &v33);
    v21 = __ldxr(a3);
    if (v21 == 1)
    {
      if (!__stlxr(0, a3))
        goto LABEL_21;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_144);
    goto LABEL_21;
  }
  v10 = v30;
  v30 = 0;
  *(_BYTE *)a4 = v29;
  *(_QWORD *)(a4 + 8) = v10;
  v11 = 1;
  *(_DWORD *)(a4 + 16) = 1;
  return (uint64_t (***)())((uint64_t (*)(uint64_t *, uint64_t *))off_1E3364688[v11])(v32, &v29);
}

uint64_t *WebCore::createSerializedScriptValue(uint64_t a1, WebCore::ScriptExecutionContext *a2, uint64_t a3)
{
  JSC::JSGlobalObject *v5;
  void *v6;
  uint64_t *result;
  WTF *v8;
  uint64_t v9;
  _QWORD v10[2];
  WTF *v11;
  uint64_t v12;

  v5 = (JSC::JSGlobalObject *)WebCore::ScriptExecutionContext::globalObject(a2);
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v10[0] = 0;
    v10[1] = 0;
    WebCore::SerializedScriptValue::create(v5, a3, (uint64_t)v10, (uint64_t)&v11, 0, 0, 0, a1);
    result = (uint64_t *)v11;
    if (HIDWORD(v12))
    {
      v9 = 8 * HIDWORD(v12);
      do
      {
        result = WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref(result, v6)+ 1;
        v9 -= 8;
      }
      while (v9);
      result = (uint64_t *)v11;
      if (v11)
        goto LABEL_4;
    }
    else if (v11)
    {
LABEL_4:
      v11 = 0;
      LODWORD(v12) = 0;
      return (uint64_t *)WTF::fastFree((WTF *)result, v6);
    }
  }
  else
  {
    result = (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    v8 = v11;
    *(_BYTE *)a1 = 33;
    *(_QWORD *)(a1 + 8) = v8;
    *(_DWORD *)(a1 + 16) = 1;
  }
  return result;
}

uint64_t WebCore::Notification::createForServiceWorker@<X0>(WebCore::ScriptExecutionContext *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unsigned int *v16;
  _DWORD *v17;
  WTF::StringImpl *v18;
  __int128 v19;
  uint64_t result;
  unsigned int v22;
  unsigned int v23;
  void *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30[3];
  uint64_t v31;
  _QWORD v32[2];

  WebCore::createSerializedScriptValue((uint64_t)&v27, a1, *(_QWORD *)(a3 + 40));
  if (!v29)
  {
    v5 = bmalloc::api::isoAllocate();
    WTF::UUID::UUID((WTF::UUID *)v30);
    v13 = v30[0];
    v14 = v27;
    v27 = 0;
    v30[0] = v14;
    WebCore::Notification::Notification((WebCore::ContextDestructionObserver *)v5, a1, v13, v30[1], a2, a3, v30);
    v16 = (unsigned int *)v30[0];
    v30[0] = 0;
    if (v16)
    {
      do
      {
        v22 = __ldaxr(v16);
        v23 = v22 - 1;
      }
      while (__stlxr(v23, v16));
      if (!v23)
      {
        atomic_store(1u, v16);
        WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v16 + 2), v15);
        WTF::fastFree((WTF *)v16, v24);
      }
    }
    v17 = *(_DWORD **)a4;
    if (*(_QWORD *)a4)
      *v17 += 2;
    v18 = *(WTF::StringImpl **)(v5 + 224);
    *(_QWORD *)(v5 + 224) = v17;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, (WTF::StringImpl *)v15);
      else
        *(_DWORD *)v18 -= 2;
    }
    v19 = *(_OWORD *)(a4 + 8);
    *(_OWORD *)(v5 + 248) = *(_OWORD *)(a4 + 24);
    *(_OWORD *)(v5 + 232) = v19;
    result = (uint64_t)WebCore::ActiveDOMObject::suspendIfNeeded((_QWORD *)v5);
    if (*(_QWORD *)(v5 + 224))
    {
LABEL_24:
      *(_QWORD *)a5 = v5;
      *(_DWORD *)(a5 + 16) = 0;
      v12 = v29;
      if (v29 == -1)
        return result;
      return ((uint64_t (*)(uint64_t *, uint64_t *))off_1E3364688[v12])(v30, &v27);
    }
    a4 = (char *)&_MergedGlobals_144;
    if (__ldaxr((unsigned __int8 *)&_MergedGlobals_144))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)&_MergedGlobals_144))
    {
      goto LABEL_18;
    }
    MEMORY[0x19AEA534C](&_MergedGlobals_144);
LABEL_18:
    if ((byte_1ECE82091 & 1) != 0)
      goto LABEL_19;
    goto LABEL_29;
  }
  if (v29 != 1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_29:
    qword_1ECE82098 = 0;
    byte_1ECE82091 = 1;
LABEL_19:
    v25 = *(_QWORD *)(v5 + 72);
    v32[0] = *(_QWORD *)(v5 + 64);
    v32[1] = v25;
    v31 = v5;
    result = (uint64_t)WTF::HashMap<WTF::UUID,WebCore::Notification *,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::Notification *>,WTF::HashTableTraits>::add<WebCore::Notification *>((uint64_t)v30, v32, &v31);
    v26 = __ldxr((unsigned __int8 *)a4);
    if (v26 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)a4))
        goto LABEL_24;
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_144);
    goto LABEL_24;
  }
  v11 = v28;
  v28 = 0;
  *(_BYTE *)a5 = v27;
  *(_QWORD *)(a5 + 8) = v11;
  v12 = 1;
  *(_DWORD *)(a5 + 16) = 1;
  return ((uint64_t (*)(uint64_t *, uint64_t *))off_1E3364688[v12])(v30, &v27);
}

void WebCore::Notification::create(WebCore::ScriptExecutionContext *a1@<X0>, uint64_t *a2@<X1>, WebCore::ContextDestructionObserver **a3@<X8>)
{
  uint64_t v6;
  int8x16_t v7;
  uint64_t v8;
  __int128 v9;
  WebCore::ContextDestructionObserver *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int *v14;
  WebCore::ContextDestructionObserver *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v24;
  unsigned int v25;
  void *v26;
  uint64_t v27;
  int v28;
  char v29[8];
  uint64_t v30;
  uint64_t v31;
  int8x16_t v32;
  uint64_t v33;
  __int128 v34;
  __int16 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40[3];
  WebCore::ContextDestructionObserver *v41;
  _QWORD v42[2];

  v29[0] = *((_BYTE *)a2 + 80);
  v6 = a2[6];
  v30 = a2[9];
  v31 = v6;
  v7 = *(int8x16_t *)(a2 + 7);
  *((_OWORD *)a2 + 3) = 0u;
  *((_OWORD *)a2 + 4) = 0u;
  v32 = vextq_s8(v7, v7, 8uLL);
  v33 = 2;
  v34 = 0u;
  v35 = *((_WORD *)a2 + 112);
  v8 = *a2;
  *a2 = 0;
  v36 = 0;
  v37 = v8;
  v9 = *(_OWORD *)(a2 + 3);
  v38 = *(_OWORD *)(a2 + 1);
  v39 = v9;
  *((_DWORD *)a2 + 2) = v38 & 0xFFFFFFFE;
  v10 = (WebCore::ContextDestructionObserver *)bmalloc::api::isoAllocate();
  v12 = a2[18];
  v11 = a2[19];
  WebCore::SerializedScriptValue::createFromWireBytes(a2 + 26, v40);
  WebCore::Notification::Notification(v10, a1, v12, v11, (uint64_t)(a2 + 5), (uint64_t)v29, v40);
  *a3 = v10;
  v14 = (unsigned int *)v40[0];
  v40[0] = 0;
  if (v14)
  {
    do
    {
      v24 = __ldaxr(v14);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v14));
    if (!v25)
    {
      atomic_store(1u, v14);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v14 + 2), v13);
      WTF::fastFree((WTF *)v14, v26);
    }
  }
  v15 = *a3;
  WebCore::ActiveDOMObject::suspendIfNeeded(v15);
  v17 = a2[12];
  a2[12] = 0;
  v18 = (WTF::StringImpl *)*((_QWORD *)v15 + 28);
  *((_QWORD *)v15 + 28) = v17;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  *((_DWORD *)v15 + 58) = *((_DWORD *)v15 + 58) & 0xFFFFFFFE | a2[13] & 1;
  v19 = *((_DWORD *)a2 + 26);
  *((_DWORD *)a2 + 26) = v19 & 0xFFFFFFFE;
  v20 = *((_DWORD *)v15 + 58) & 0xFFFFFFFD | (2 * ((v19 >> 1) & 1));
  *((_DWORD *)v15 + 58) = v20;
  v21 = v20 & 0xFFFFFFFB | (4 * ((*((_DWORD *)a2 + 26) >> 2) & 1));
  *((_DWORD *)v15 + 58) = v21;
  v22 = v21 & 0xFFFFFFC7 | (8 * ((*((_DWORD *)a2 + 26) >> 3) & 7));
  *((_DWORD *)v15 + 58) = v22;
  *((_DWORD *)v15 + 58) = a2[13] & 0xFFFFFFC0 | v22 & 0x3F;
  *(_OWORD *)((char *)v15 + 236) = *(_OWORD *)((char *)a2 + 108);
  *(_QWORD *)((char *)v15 + 252) = *(uint64_t *)((char *)a2 + 124);
  *((_DWORD *)v15 + 65) = *((_DWORD *)a2 + 33);
  if (*((_QWORD *)v15 + 28))
    goto LABEL_20;
  if (__ldaxr((unsigned __int8 *)&_MergedGlobals_144))
  {
    __clrex();
LABEL_12:
    MEMORY[0x19AEA534C](&_MergedGlobals_144);
    goto LABEL_13;
  }
  if (__stxr(1u, (unsigned __int8 *)&_MergedGlobals_144))
    goto LABEL_12;
LABEL_13:
  if ((byte_1ECE82091 & 1) == 0)
  {
    qword_1ECE82098 = 0;
    byte_1ECE82091 = 1;
  }
  v27 = *((_QWORD *)v15 + 9);
  v42[0] = *((_QWORD *)v15 + 8);
  v42[1] = v27;
  v41 = v15;
  WTF::HashMap<WTF::UUID,WebCore::Notification *,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::Notification *>,WTF::HashTableTraits>::add<WebCore::Notification *>((uint64_t)v40, v42, &v41);
  v28 = __ldxr((unsigned __int8 *)&_MergedGlobals_144);
  if (v28 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)&_MergedGlobals_144))
      goto LABEL_20;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_144);
LABEL_20:
  WebCore::Notification::Options::~Options((WebCore::Notification::Options *)v29, v16);
}

uint64_t WebCore::SerializedScriptValue::createFromWireBytes@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  void *v6;
  WTF *v7;
  WTF *v8;
  WTF *v9;
  WTF *v10;
  WTF *v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  uint64_t v15;
  WTF *v16;
  JSC::ArrayBufferContents *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  WTF *v22;
  void *v23;
  WTF *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  WTF *v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  WTF *v32;
  WTF *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  WTF *v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  WTF *v41;
  uint64_t v42;
  uint64_t *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t *v47;
  WTF *v48;
  WTF *v49;
  WTF *v50;
  WTF *v51;
  WTF *v52;
  uint64_t v53;
  WTF *v54;
  uint64_t v55;
  WTF *v56;
  uint64_t v57;
  WTF *v58;
  uint64_t v59;
  WTF *v60;
  uint64_t v61;
  WTF *v62;
  uint64_t v63;
  WTF *v64;
  uint64_t v65;
  WTF *v66;

  v4 = WTF::fastMalloc((WTF *)0x100);
  v65 = 0;
  v66 = 0;
  v63 = 0;
  v64 = 0;
  v62 = 0;
  v60 = 0;
  v61 = 0;
  v58 = 0;
  v59 = 0;
  v56 = 0;
  v57 = 0;
  v54 = 0;
  v55 = 0;
  v52 = 0;
  v53 = 0;
  result = WebCore::SerializedScriptValue::SerializedScriptValue(v4, a1, (uint64_t *)&v66, (uint64_t *)&v64, (uint64_t *)&v62, (uint64_t *)&v60, (uint64_t *)&v58, (uint64_t *)&v56, (uint64_t *)&v54, (uint64_t *)&v52);
  *a2 = result;
  v7 = v52;
  if (HIDWORD(v53))
  {
    v20 = 8 * HIDWORD(v53);
    v21 = v52;
    do
    {
      result = *(_QWORD *)v21;
      *(_QWORD *)v21 = 0;
      if (result)
      {
        WebCore::MediaStreamTrackDataHolder::~MediaStreamTrackDataHolder((WebCore::MediaStreamTrackDataHolder *)result, v6);
        result = WTF::fastFree(v22, v23);
      }
      v21 = (WTF *)((char *)v21 + 8);
      v20 -= 8;
    }
    while (v20);
  }
  if (v7)
    result = WTF::fastFree(v7, v6);
  v8 = v54;
  if (!HIDWORD(v55))
  {
    if (!v54)
      goto LABEL_6;
    goto LABEL_80;
  }
  v24 = (WTF *)((char *)v54 + 8 * HIDWORD(v55));
  do
  {
    result = *(_QWORD *)v8;
    *(_QWORD *)v8 = 0;
    if (result)
    {
      v25 = (unsigned int *)(result + 8);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        atomic_store(1u, (unsigned int *)(result + 8));
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
    }
    v8 = (WTF *)((char *)v8 + 8);
  }
  while (v8 != v24);
  v8 = v54;
  if (v54)
LABEL_80:
    result = WTF::fastFree(v8, v6);
LABEL_6:
  v9 = v56;
  if (!HIDWORD(v57))
  {
    if (!v56)
      goto LABEL_8;
    goto LABEL_82;
  }
  v28 = (WTF *)((char *)v56 + 8 * HIDWORD(v57));
  do
  {
    v29 = *(_QWORD *)v9;
    *(_QWORD *)v9 = 0;
    if (v29)
    {
      do
      {
        v30 = __ldaxr((unsigned int *)v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, (unsigned int *)v29));
      if (!v31)
      {
        atomic_store(1u, (unsigned int *)v29);
        v48 = (WTF *)v29;
        v32 = *(WTF **)(v29 + 40);
        if (v32)
        {
          *(_QWORD *)(v29 + 40) = 0;
          *(_DWORD *)(v29 + 48) = 0;
          WTF::fastFree(v32, v6);
        }
        result = WTF::fastFree(v48, v6);
      }
    }
    v9 = (WTF *)((char *)v9 + 8);
  }
  while (v9 != v28);
  v9 = v56;
  if (v56)
LABEL_82:
    result = WTF::fastFree(v9, v6);
LABEL_8:
  v10 = v58;
  if (!HIDWORD(v59))
  {
    if (!v58)
      goto LABEL_10;
    goto LABEL_84;
  }
  v33 = (WTF *)((char *)v58 + 104 * HIDWORD(v59));
  do
  {
    result = *(_QWORD *)v10;
    *(_QWORD *)v10 = 0;
    if (result)
    {
      v34 = (unsigned int *)(result + 8);
      do
      {
        v35 = __ldaxr(v34);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, v34));
      if (!v36)
      {
        atomic_store(1u, (unsigned int *)(result + 8));
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
    }
    v10 = (WTF *)((char *)v10 + 104);
  }
  while (v10 != v33);
  v10 = v58;
  if (v58)
LABEL_84:
    result = WTF::fastFree(v10, v6);
LABEL_10:
  v11 = v60;
  if (!HIDWORD(v61))
  {
    if (!v60)
      goto LABEL_12;
    goto LABEL_86;
  }
  v37 = (WTF *)((char *)v60 + 8 * HIDWORD(v61));
  do
  {
    v38 = *(_QWORD *)v11;
    *(_QWORD *)v11 = 0;
    if (v38)
    {
      do
      {
        v39 = __ldaxr((unsigned int *)v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, (unsigned int *)v38));
      if (!v40)
      {
        atomic_store(1u, (unsigned int *)v38);
        v49 = (WTF *)v38;
        v41 = *(WTF **)(v38 + 40);
        if (v41)
        {
          *(_QWORD *)(v38 + 40) = 0;
          *(_DWORD *)(v38 + 48) = 0;
          WTF::fastFree(v41, v6);
        }
        result = WTF::fastFree(v49, v6);
      }
    }
    v11 = (WTF *)((char *)v11 + 8);
  }
  while (v11 != v37);
  v11 = v60;
  if (v60)
LABEL_86:
    result = WTF::fastFree(v11, v6);
LABEL_12:
  v12 = v62;
  if (HIDWORD(v63))
  {
    v46 = 8 * HIDWORD(v63);
    v47 = (uint64_t *)v62;
    do
    {
      result = *v47;
      *v47 = 0;
      if (result)
      {
        if (*(_DWORD *)(result + 8) == 1)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        else
          --*(_DWORD *)(result + 8);
      }
      ++v47;
      v46 -= 8;
    }
    while (v46);
  }
  if (v12)
    result = WTF::fastFree(v12, v6);
  v13 = v64;
  if (HIDWORD(v65))
  {
    v42 = 8 * HIDWORD(v65);
    v43 = (uint64_t *)v64;
    do
    {
      result = *v43;
      *v43 = 0;
      if (result)
      {
        v44 = *(WTF::StringImpl **)(result + 40);
        *(_QWORD *)(result + 40) = 0;
        if (v44)
        {
          if (*(_DWORD *)v44 == 2)
          {
            v50 = (WTF *)result;
            WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v6);
            result = (uint64_t)v50;
          }
          else
          {
            *(_DWORD *)v44 -= 2;
          }
        }
        v45 = *(WTF::StringImpl **)(result + 16);
        *(_QWORD *)(result + 16) = 0;
        if (v45)
        {
          if (*(_DWORD *)v45 == 2)
          {
            v51 = (WTF *)result;
            WTF::StringImpl::destroy(v45, (WTF::StringImpl *)v6);
            result = (uint64_t)v51;
          }
          else
          {
            *(_DWORD *)v45 -= 2;
          }
        }
        result = WTF::fastFree((WTF *)result, v6);
      }
      ++v43;
      v42 -= 8;
    }
    while (v42);
  }
  if (v13)
    result = WTF::fastFree(v13, v6);
  v14 = v66;
  if (v66)
  {
    v15 = *((unsigned int *)v66 + 3);
    if ((_DWORD)v15)
    {
      v17 = *(JSC::ArrayBufferContents **)v66;
      v18 = 56 * v15;
      do
      {
        JSC::ArrayBufferContents::~ArrayBufferContents(v17);
        v17 = (JSC::ArrayBufferContents *)(v19 + 56);
        v18 -= 56;
      }
      while (v18);
    }
    v16 = *(WTF **)v14;
    if (*(_QWORD *)v14)
    {
      *(_QWORD *)v14 = 0;
      *((_DWORD *)v14 + 2) = 0;
      WTF::fastFree(v16, v6);
    }
    return WTF::fastFree(v14, v6);
  }
  return result;
}

void WebCore::Notification::create(WebCore::Notification *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, const WTF::URL *a3@<X2>, WebCore::ContextDestructionObserver **a4@<X8>)
{
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  _DWORD *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  WTF::StringImpl *v19;
  _DWORD *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  unsigned int *v34;
  WTF::StringImpl *v35;
  __int128 v36;
  uint64_t v37;
  WebCore::ContextDestructionObserver *v38;
  uint64_t v39;
  void *v40;
  unsigned int *v41;
  WebCore::ContextDestructionObserver *v42;
  WTF::StringImpl *v43;
  _DWORD *v44;
  WTF::StringImpl *v45;
  __int128 v46;
  unsigned int v48;
  unsigned int v49;
  void *v50;
  uint64_t v51;
  int v52;
  WTF *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  JSC::JSGlobalObject *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  unsigned int *v61;
  _DWORD *v62;
  _DWORD *v63;
  _DWORD *v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int16 v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  __int128 v72;
  __int128 v73;
  char v74[8];
  __int128 v75;
  __int128 v76;
  _QWORD v77[4];
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  __int128 v80;
  __int128 v81;
  _QWORD v82[2];
  WTF *v83;
  uint64_t v84;

  memset(v77, 0, 26);
  v76 = 0u;
  v75 = 0u;
  v78 = 0;
  v79 = 0;
  WTF::URL::invalidate((WTF::URL *)&v79);
  if (*((_BYTE *)a3 + 120))
  {
    LOBYTE(v61) = *((_BYTE *)a3 + 64);
    v9 = (_DWORD *)*((_QWORD *)a3 + 9);
    if (v9)
      *v9 += 2;
    v62 = v9;
    v10 = (_DWORD *)*((_QWORD *)a3 + 10);
    if (v10)
      *v10 += 2;
    v63 = v10;
    v11 = (_DWORD *)*((_QWORD *)a3 + 11);
    if (v11)
      *v11 += 2;
    v64 = v11;
    v12 = (_DWORD *)*((_QWORD *)a3 + 12);
    if (v12)
      *v12 += 2;
    v65 = v12;
    v66 = 2;
    v67 = 0;
    v68 = 0;
    v69 = *((_WORD *)a3 + 56);
    v70 = 0;
    v71 = 0;
    WTF::URL::invalidate((WTF::URL *)&v71);
    v74[0] = (char)v61;
    v14 = (uint64_t)v62;
    v62 = 0;
    v15 = (WTF::StringImpl *)v75;
    *(_QWORD *)&v75 = v14;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v13);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v63;
    v63 = 0;
    v17 = (WTF::StringImpl *)*((_QWORD *)&v75 + 1);
    *((_QWORD *)&v75 + 1) = v16;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v13);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v64;
    v64 = 0;
    v19 = (WTF::StringImpl *)v76;
    *(_QWORD *)&v76 = v18;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v13);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = v65;
    v65 = 0;
    v21 = (WTF::StringImpl *)*((_QWORD *)&v76 + 1);
    *((_QWORD *)&v76 + 1) = v20;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v13);
      else
        *(_DWORD *)v21 -= 2;
    }
    v22 = v67;
    v67 = 0;
    v23 = (unsigned int *)v77[1];
    v77[0] = v66;
    v77[1] = v22;
    if (v23)
    {
      do
      {
        v24 = __ldaxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
      {
        atomic_store(1u, v23);
        WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v23 + 2), v13);
        WTF::fastFree((WTF *)v23, v59);
      }
    }
    v26 = v68;
    v68 = 0;
    v27 = (_DWORD *)v77[2];
    v77[2] = v26;
    if (v27)
    {
      if (*v27 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v27;
    }
    LOWORD(v77[3]) = v69;
    v28 = v70;
    v70 = 0;
    v29 = v78;
    v78 = v28;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v13);
      else
        *(_DWORD *)v29 -= 2;
    }
    v30 = v71;
    v71 = 0;
    v31 = v79;
    v79 = v30;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v13);
      else
        *(_DWORD *)v31 -= 2;
    }
    v80 = v72;
    LODWORD(v72) = v72 & 0xFFFFFFFE;
    v81 = v73;
    WebCore::Notification::Options::~Options((WebCore::Notification::Options *)&v61, v13);
    v33 = *(WTF::StringImpl **)a3;
    if (*(_QWORD *)a3)
      *(_DWORD *)v33 += 2;
    v34 = (unsigned int *)&v80;
    v35 = v79;
    v79 = v33;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v32);
      else
        *(_DWORD *)v35 -= 2;
    }
    v36 = *(_OWORD *)((char *)a3 + 24);
    v80 = *(_OWORD *)((char *)a3 + 8);
    v81 = v36;
    if (*((_BYTE *)a3 + 120))
    {
      v37 = *((_QWORD *)a3 + 13);
      if (v37)
      {
        if (*(_DWORD *)(v37 + 4) && WebCore::ScriptExecutionContext::globalObject(this))
        {
          v53 = (WTF *)WebCore::ScriptExecutionContext::globalObject(this);
          v55 = *((unsigned __int8 *)a3 + 120);
          if (!*((_BYTE *)a3 + 120))
          {
            __break(1u);
            goto LABEL_88;
          }
          v56 = JSC::JSONParse();
          v57 = (JSC::JSGlobalObject *)WebCore::ScriptExecutionContext::globalObject(this);
          v83 = 0;
          v84 = 0;
          v82[0] = 0;
          v82[1] = 0;
          WebCore::SerializedScriptValue::create(v57, v56, (uint64_t)v82, (uint64_t)&v83, 1, 1, 0, (uint64_t)&v61);
          if ((_DWORD)v63)
          {
            v58 = 0;
            v34 = 0;
            if ((_DWORD)v63 == -1)
            {
LABEL_72:
              v55 = HIDWORD(v84);
              v53 = v83;
              if (!HIDWORD(v84))
              {
                if (!v83)
                  goto LABEL_74;
LABEL_91:
                v83 = 0;
                LODWORD(v84) = 0;
                WTF::fastFree(v53, v54);
                if (v34)
                  goto LABEL_43;
                goto LABEL_42;
              }
LABEL_88:
              v60 = 8 * v55;
              do
              {
                v53 = (WTF *)(WTF::Ref<WebCore::MessagePort,WTF::RawPtrTraits<WebCore::MessagePort>,WTF::DefaultRefDerefTraits<WebCore::MessagePort>>::~Ref((uint64_t *)v53, v54)+ 1);
                v60 -= 8;
              }
              while (v60);
              v53 = v83;
              if (!v83)
              {
LABEL_74:
                if (v34)
                  goto LABEL_43;
                goto LABEL_42;
              }
              goto LABEL_91;
            }
          }
          else
          {
            v58 = (uint64_t)v61;
            v61 = 0;
          }
          ((void (*)(_QWORD *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore21SerializedScriptValueENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSI_EEEDcOSJ_DpOT0____fmatrix[v63])(v82, &v61);
          v34 = (unsigned int *)v58;
          goto LABEL_72;
        }
      }
    }
  }
LABEL_42:
  v34 = (unsigned int *)WTF::fastMalloc((WTF *)0x100);
  *v34 = 1;
  *(_OWORD *)(v34 + 2) = 0u;
  *(_OWORD *)(v34 + 6) = 0u;
  *(_OWORD *)(v34 + 10) = 0u;
  *(_OWORD *)(v34 + 14) = 0u;
  *(_OWORD *)(v34 + 18) = 0u;
  *(_OWORD *)(v34 + 22) = 0u;
  *(_OWORD *)(v34 + 26) = 0u;
  *(_OWORD *)(v34 + 30) = 0u;
  *(_OWORD *)(v34 + 34) = 0u;
  *(_OWORD *)(v34 + 38) = 0u;
  *(_OWORD *)(v34 + 42) = 0u;
  *(_OWORD *)(v34 + 46) = 0u;
  *(_OWORD *)(v34 + 50) = 0u;
  *(_OWORD *)(v34 + 54) = 0u;
  *(_OWORD *)(v34 + 58) = 0u;
  *((_QWORD *)v34 + 31) = 0;
  *((_QWORD *)v34 + 31) = WebCore::SerializedScriptValue::computeMemoryCost((WebCore::SerializedScriptValue *)v34);
LABEL_43:
  v38 = (WebCore::ContextDestructionObserver *)bmalloc::api::isoAllocate();
  WTF::UUID::UUID((WTF::UUID *)&v61);
  v39 = (uint64_t)v61;
  v61 = v34;
  WebCore::Notification::Notification(v38, this, v39, (uint64_t)v62, (uint64_t)a3 + 40, (uint64_t)v74, (uint64_t *)&v61);
  *a4 = v38;
  v41 = v61;
  v61 = 0;
  if (v41)
  {
    do
    {
      v48 = __ldaxr(v41);
      v49 = v48 - 1;
    }
    while (__stlxr(v49, v41));
    if (!v49)
    {
      atomic_store(1u, v41);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v41 + 2), v40);
      WTF::fastFree((WTF *)v41, v50);
    }
  }
  v42 = *a4;
  WebCore::ActiveDOMObject::suspendIfNeeded(v42);
  v44 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v44 += 2;
  v45 = (WTF::StringImpl *)*((_QWORD *)v42 + 28);
  *((_QWORD *)v42 + 28) = v44;
  if (v45)
  {
    if (*(_DWORD *)v45 == 2)
      WTF::StringImpl::destroy(v45, v43);
    else
      *(_DWORD *)v45 -= 2;
    v44 = (_DWORD *)*((_QWORD *)v42 + 28);
  }
  v46 = *(_OWORD *)((char *)a2 + 8);
  *(_OWORD *)((char *)v42 + 248) = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)v42 + 232) = v46;
  if (v44)
    goto LABEL_65;
  if (__ldaxr((unsigned __int8 *)&_MergedGlobals_144))
  {
    __clrex();
LABEL_57:
    MEMORY[0x19AEA534C](&_MergedGlobals_144);
    goto LABEL_58;
  }
  if (__stxr(1u, (unsigned __int8 *)&_MergedGlobals_144))
    goto LABEL_57;
LABEL_58:
  if ((byte_1ECE82091 & 1) == 0)
  {
    qword_1ECE82098 = 0;
    byte_1ECE82091 = 1;
  }
  v51 = *((_QWORD *)v42 + 9);
  v83 = (WTF *)*((_QWORD *)v42 + 8);
  v84 = v51;
  v82[0] = v42;
  WTF::HashMap<WTF::UUID,WebCore::Notification *,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::Notification *>,WTF::HashTableTraits>::add<WebCore::Notification *>((uint64_t)&v61, &v83, v82);
  v52 = __ldxr((unsigned __int8 *)&_MergedGlobals_144);
  if (v52 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)&_MergedGlobals_144))
      goto LABEL_65;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_144);
LABEL_65:
  WebCore::Notification::Options::~Options((WebCore::Notification::Options *)v74, v43);
}

WebCore::ContextDestructionObserver *WebCore::Notification::Notification(WebCore::ContextDestructionObserver *this, WebCore::ScriptExecutionContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  WebCore::ScriptExecutionContext *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  WTF::StringImpl **v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int v27;
  uint64_t v28;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  __int128 v34;
  WTF::StringImpl *v35;
  __int128 v36;
  __int128 v37;
  WTF::StringImpl *v38;

  *((_DWORD *)this + 6) = 1;
  v13 = a2;
  if (!*((_BYTE *)a2 + 274))
  {
    v14 = (char *)a2 - 192;
    v15 = *((_QWORD *)a2 + 64);
    if (v15)
    {
      v16 = *(char **)(v15 + 8);
      if (v16)
        v14 = v16;
    }
    v13 = (WebCore::ScriptExecutionContext *)(v14 + 192);
  }
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v13);
  *(_QWORD *)this = &off_1E33A0540;
  *((_QWORD *)this + 2) = 0;
  if (*((_BYTE *)v13 + 278))
  {
    __break(0xC471u);
    goto LABEL_54;
  }
  v38 = this;
  WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)v13 + 16, (uint64_t *)&v38, (uint64_t)&v35);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *(_QWORD *)this = &off_1E33647F0;
  *((_QWORD *)this + 4) = &unk_1E3364870;
  *((_QWORD *)this + 8) = a3;
  *((_QWORD *)this + 9) = a4;
  *((_QWORD *)this + 10) = 0;
  v17 = (WTF::StringImpl **)((char *)this + 80);
  WTF::URL::invalidate((WebCore::ContextDestructionObserver *)((char *)this + 80));
  WTF::String::isolatedCopy();
  *((_BYTE *)this + 128) = *(_BYTE *)a6;
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  WTF::String::isolatedCopy();
  *((_QWORD *)this + 20) = 0;
  v18 = (WTF::StringImpl **)((char *)this + 160);
  WTF::URL::invalidate((WebCore::ContextDestructionObserver *)((char *)this + 160));
  v19 = *a7;
  *a7 = 0;
  *((_QWORD *)this + 25) = v19;
  LOWORD(v19) = *(_WORD *)(a6 + 64);
  *((_QWORD *)this + 28) = 0;
  *((_WORD *)this + 104) = v19;
  *((_DWORD *)this + 53) = 0;
  *((_BYTE *)this + 216) = 0;
  WTF::URL::invalidate((WebCore::ContextDestructionObserver *)((char *)this + 224));
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  if (!*((_BYTE *)a2 + 274))
  {
    v20 = 1;
    goto LABEL_14;
  }
  if (((*(uint64_t (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 72))(a2) & 1) != 0)
  {
    v20 = 2;
    goto LABEL_14;
  }
  if (!(*(unsigned int (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 64))(a2)
    || (*(unsigned int (**)(WebCore::ScriptExecutionContext *))(*(_QWORD *)a2 + 488))(a2))
  {
    __break(0xC471u);
LABEL_54:
    JUMPOUT(0x1954D6B60);
  }
  v20 = 0;
LABEL_14:
  *((_BYTE *)this + 217) = v20;
  if ((*(_BYTE *)(a6 + 88) & 1) != 0)
  {
    WTF::URL::isolatedCopy();
    v26 = v35;
    v35 = 0;
    v25 = *v17;
    *v17 = v26;
    if (!v25)
      goto LABEL_22;
    goto LABEL_24;
  }
  v21 = *(_QWORD *)(a6 + 72);
  if (!v21 || !*(_DWORD *)(v21 + 4))
    goto LABEL_30;
  WTF::String::isolatedCopy();
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::ScriptExecutionContext *, WTF::StringImpl **, _QWORD))(*(_QWORD *)a2 + 120))(&v35, a2, &v38, 0);
  v23 = v38;
  v38 = 0;
  if (v23)
  {
    if (*(_DWORD *)v23 == 2)
      WTF::StringImpl::destroy(v23, v22);
    else
      *(_DWORD *)v23 -= 2;
  }
  v24 = v35;
  if ((v36 & 1) != 0)
  {
    v35 = 0;
    v25 = *v17;
    *v17 = v24;
    if (!v25)
    {
LABEL_22:
      v24 = 0;
LABEL_26:
      v27 = v36;
      *(_OWORD *)((char *)this + 88) = v36;
      LODWORD(v36) = v27 & 0xFFFFFFFE;
      *(_OWORD *)((char *)this + 104) = v37;
      goto LABEL_27;
    }
LABEL_24:
    if (*(_DWORD *)v25 == 2)
    {
      WTF::StringImpl::destroy(v25, v22);
      v24 = v35;
    }
    else
    {
      v24 = 0;
      *(_DWORD *)v25 -= 2;
    }
    goto LABEL_26;
  }
LABEL_27:
  v35 = 0;
  if (v24)
  {
    if (*(_DWORD *)v24 == 2)
      WTF::StringImpl::destroy(v24, v22);
    else
      *(_DWORD *)v24 -= 2;
  }
LABEL_30:
  v28 = *(_QWORD *)(a6 + 32);
  if (v28 && *(_DWORD *)(v28 + 4))
  {
    WTF::String::isolatedCopy();
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::ScriptExecutionContext *, WTF::StringImpl **, _QWORD))(*(_QWORD *)a2 + 120))(&v35, a2, &v38, 0);
    v31 = v38;
    v38 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v30);
      else
        *(_DWORD *)v31 -= 2;
    }
    v32 = v35;
    if ((v36 & 1) != 0)
    {
      if (v35)
        *(_DWORD *)v35 += 2;
      v33 = *v18;
      *v18 = v32;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
        {
          WTF::StringImpl::destroy(v33, v30);
          v32 = v35;
        }
        else
        {
          *(_DWORD *)v33 -= 2;
        }
      }
      v34 = v37;
      *(_OWORD *)((char *)this + 168) = v36;
      *(_OWORD *)((char *)this + 184) = v34;
    }
    v35 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v30);
      else
        *(_DWORD *)v32 -= 2;
    }
  }
  return this;
}

void WebCore::Notification::~Notification(WebCore::Notification *this, void *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  uint64_t *v21;
  BOOL v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34;
  _OWORD *v35;
  __int128 v36;
  int v37;
  uint64_t v38;
  WTF **v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  WTF *v43;
  WTF::StringImpl *v44;
  unsigned int *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  void *v52;
  unsigned int v53;
  unsigned int v54;
  void *v55;
  _DWORD *v56;
  uint64_t v57;

  if (!*((_QWORD *)this + 28))
  {
    if (__ldaxr((unsigned __int8 *)&_MergedGlobals_144))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)&_MergedGlobals_144))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](&_MergedGlobals_144);
LABEL_6:
    if ((byte_1ECE82091 & 1) != 0)
    {
      v4 = qword_1ECE82098;
      if (qword_1ECE82098)
      {
        v6 = *((_QWORD *)this + 8);
        v5 = *((_QWORD *)this + 9);
        v7 = *(_DWORD *)(qword_1ECE82098 - 8);
        v8 = (v5 >> 5) & 0x7FFF800 ^ (((unsigned __int16)v5 - 1640531527) << 16) ^ ((unsigned __int16)v5
                                                                                                - 1640531527);
        v9 = (v5 >> 37) & 0x7FFF800 ^ ((v8 + WORD2(v5) + (v8 >> 11)) << 16) ^ (v8 + WORD2(v5) + (v8 >> 11));
        v10 = (v6 >> 5) & 0x7FFF800 ^ ((v9 + (unsigned __int16)v6 + (v9 >> 11)) << 16) ^ (v9 + (unsigned __int16)v6 + (v9 >> 11));
        v11 = (v6 >> 37) & 0x7FFF800 ^ ((v10 + WORD2(v6) + (v10 >> 11)) << 16) ^ (v10 + WORD2(v6) + (v10 >> 11));
        v12 = (v11 + (v11 >> 11)) ^ (8 * (v11 + (v11 >> 11)));
        v13 = (v12 + (v12 >> 5)) ^ (4 * (v12 + (v12 >> 5)));
        v14 = (v13 + (v13 >> 15)) ^ ((v13 + (v13 >> 15)) << 10);
        if (!v14)
          v14 = 0x800000;
        v15 = v7 & v14;
        v16 = (uint64_t *)(qword_1ECE82098 + 32 * v15);
        v17 = *v16;
        v18 = v16[1];
        if (v18 != v5 || v17 != v6)
        {
          v20 = 1;
          while (v17 | v18)
          {
            v15 = ((_DWORD)v15 + v20) & v7;
            v21 = (uint64_t *)(qword_1ECE82098 + 32 * v15);
            v17 = *v21;
            v18 = v21[1];
            v22 = v18 == v5 && v17 == v6;
            ++v20;
            if (v22)
              goto LABEL_23;
          }
          v15 = *(unsigned int *)(qword_1ECE82098 - 4);
        }
LABEL_23:
        if (v15 != *(_DWORD *)(qword_1ECE82098 - 4))
        {
          v23 = (_QWORD *)(qword_1ECE82098 + 32 * v15);
          *v23 = 1;
          v23[1] = 0;
          ++*(_DWORD *)(v4 - 16);
          v24 = qword_1ECE82098 ? *(_DWORD *)(qword_1ECE82098 - 12) - 1 : -1;
          *(_DWORD *)(qword_1ECE82098 - 12) = v24;
          v25 = qword_1ECE82098;
          if (qword_1ECE82098)
          {
            v26 = *(_DWORD *)(qword_1ECE82098 - 12);
            v27 = *(unsigned int *)(qword_1ECE82098 - 4);
            if (6 * v26 < v27 && v27 >= 9)
            {
              v29 = v27 >> 1;
              v30 = (_DWORD *)WTF::fastMalloc((WTF *)((32 * (v27 >> 1)) | 0x10));
              v31 = 0;
              do
              {
                v32 = &v30[v31];
                v32[2] = 0;
                v32[3] = 0;
                v32[4] = 0;
                v31 += 8;
              }
              while (8 * (v27 >> 1) != v31);
              qword_1ECE82098 = (uint64_t)(v30 + 4);
              v30[2] = v29 - 1;
              v30[3] = v29;
              *v30 = 0;
              *(_DWORD *)(qword_1ECE82098 - 12) = v26;
              v33 = v25;
              do
              {
                v34 = *(void **)(v33 + 8);
                if (*(_OWORD *)v33 >= 2uLL)
                {
                  v35 = WTF::HashTable<WTF::UUID,WTF::KeyValuePair<WTF::UUID,WebCore::Notification *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::UUID,WebCore::Notification *>>,WTF::DefaultHash<WTF::UUID>,WTF::HashMap<WTF::UUID,WebCore::Notification *,WTF::DefaultHash<WTF::UUID>,WTF::HashTraits<WTF::UUID>,WTF::HashTraits<WebCore::Notification *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::UUID>>::lookupForReinsert(*(_QWORD *)v33, (unint64_t)v34);
                  v36 = *(_OWORD *)(v33 + 16);
                  *v35 = *(_OWORD *)v33;
                  v35[1] = v36;
                }
                v33 += 32;
                --v27;
              }
              while (v27);
              WTF::fastFree((WTF *)(v25 - 16), v34);
            }
          }
        }
      }
    }
    else
    {
      qword_1ECE82098 = 0;
      byte_1ECE82091 = 1;
    }
    v37 = __ldxr((unsigned __int8 *)&_MergedGlobals_144);
    if (v37 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)&_MergedGlobals_144))
        goto LABEL_45;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)&_MergedGlobals_144);
  }
LABEL_45:
  v38 = *((_QWORD *)this + 33);
  if (v38)
    WebCore::NotificationResourcesLoader::stop(v38);
  v39 = (WTF **)((char *)this + 264);
  v40 = *((_QWORD *)this + 34);
  *((_QWORD *)this + 34) = 0;
  if (v40)
  {
    do
    {
      v41 = __ldaxr((unsigned int *)v40);
      v42 = v41 - 1;
    }
    while (__stlxr(v42, (unsigned int *)v40));
    if (!v42)
    {
      atomic_store(1u, (unsigned int *)v40);
      v56 = *(_DWORD **)(v40 + 8);
      *(_QWORD *)(v40 + 8) = 0;
      if (v56)
      {
        if (v56[2] == 1)
        {
          v57 = v40;
          (*(void (**)(_DWORD *))(*(_QWORD *)v56 + 8))(v56);
          v40 = v57;
        }
        else
        {
          --v56[2];
        }
      }
      WTF::fastFree((WTF *)v40, a2);
    }
  }
  v43 = *v39;
  *v39 = 0;
  if (v43)
    std::default_delete<WebCore::NotificationResourcesLoader>::operator()[abi:sn180100]((_DWORD)this + 264, v43);
  v44 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v44)
  {
    if (*(_DWORD *)v44 == 2)
      WTF::StringImpl::destroy(v44, v43);
    else
      *(_DWORD *)v44 -= 2;
  }
  v45 = (unsigned int *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v45)
  {
    do
    {
      v53 = __ldaxr(v45);
      v54 = v53 - 1;
    }
    while (__stlxr(v54, v45));
    if (!v54)
    {
      atomic_store(1u, v45);
      WebCore::SerializedScriptValue::Internals::~Internals((WebCore::SerializedScriptValue::Internals *)(v45 + 2), v43);
      WTF::fastFree((WTF *)v45, v55);
    }
  }
  v46 = (WTF::StringImpl *)*((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v43);
    else
      *(_DWORD *)v46 -= 2;
  }
  v47 = (WTF::StringImpl *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v47)
  {
    if (*(_DWORD *)v47 == 2)
      WTF::StringImpl::destroy(v47, v43);
    else
      *(_DWORD *)v47 -= 2;
  }
  v48 = (WTF::StringImpl *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, v43);
    else
      *(_DWORD *)v48 -= 2;
  }
  v49 = (WTF::StringImpl *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v43);
    else
      *(_DWORD *)v49 -= 2;
  }
  v50 = (WTF::StringImpl *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v50)
  {
    if (*(_DWORD *)v50 == 2)
      WTF::StringImpl::destroy(v50, v43);
    else
      *(_DWORD *)v50 -= 2;
  }
  v51 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 2)
      WTF::StringImpl::destroy(v51, v43);
    else
      *(_DWORD *)v51 -= 2;
  }
  WebCore::EventTarget::~EventTarget((WebCore::Notification *)((char *)this + 32), v43);
  WebCore::ActiveDOMObject::~ActiveDOMObject(this, v52);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::Notification::~Notification(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::Notification::~Notification(WebCore::Notification *this, void *a2)
{
  WebCore::Notification::~Notification((WebCore::Notification *)((char *)this - 32), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::Notification::~Notification((WebCore::Notification *)((char *)this - 32), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

unsigned int *WebCore::Notification::show(unsigned int *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void *v8;
  unsigned int *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v2 = *a2;
  *a2 = 0;
  if (!result[53])
  {
    v3 = result;
    v4 = *((_QWORD *)result + 1);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 8);
      if (v5)
      {
        v6 = v5 - 96;
        v7 = *(unsigned __int8 *)(v5 + 178);
        if (*(_BYTE *)(v5 + 178))
        {
          if (v7 == 1 || v7 == 2)
            ++*(_DWORD *)(v5 + 216);
        }
        else
        {
          *(_DWORD *)(v5 - 264) += 2;
        }
        result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 144))(v5 - 96);
        if (result)
        {
          v9 = result;
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *, uint64_t))(*(_QWORD *)result + 40))(result, v5 - 96);
          if ((_DWORD)result == 2)
          {
            v10 = WTF::fastMalloc((WTF *)0x28);
            *(_QWORD *)v10 = v3;
            *(_BYTE *)(v10 + 8) = 0;
            *(_QWORD *)(v10 + 24) = 0;
            *(_QWORD *)(v10 + 32) = 0;
            *(_QWORD *)(v10 + 16) = 0;
            v11 = (WTF *)*((_QWORD *)v3 + 33);
            *((_QWORD *)v3 + 33) = v10;
            if (v11)
            {
              std::default_delete<WebCore::NotificationResourcesLoader>::operator()[abi:sn180100]((_DWORD)v3 + 264, v11);
              v12 = *((_QWORD *)v3 + 33);
            }
            else
            {
              v12 = v10;
            }
            v13 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
            *v13 = &off_1E3364740;
            v13[1] = v3;
            v13[2] = v9;
            v13[3] = v2;
            result = *(unsigned int **)(v12 + 16);
            *(_QWORD *)(v12 + 16) = v13;
            if (result)
              result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
            v14 = *(_QWORD *)(v12 + 24);
            if (!v14 || !*(_DWORD *)(v14 - 12))
            {
              v15 = *(_QWORD *)(v12 + 16);
              *(_QWORD *)(v12 + 16) = 0;
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v12 + 32);
              result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
            }
            v2 = 0;
          }
          else if (*((unsigned __int8 *)v3 + 217) <= 1u)
          {
            result = WebCore::Notification::dispatchErrorEvent(v3);
          }
        }
        v16 = *(unsigned __int8 *)(v5 + 178);
        if (*(_BYTE *)(v5 + 178))
        {
          if (v16 == 1)
          {
            if (*(_DWORD *)(v5 + 216) == 1)
              result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v5 - 96);
            else
              --*(_DWORD *)(v5 + 216);
          }
          else if (v16 == 2)
          {
            result = WTF::RefCounted<WebCore::EmptyScriptExecutionContext>::deref((_DWORD *)(v5 + 216));
          }
        }
        else if (*(_DWORD *)(v5 - 264) == 2)
        {
          if ((*(_WORD *)(v5 - 258) & 0x400) == 0)
            result = WebCore::Node::removedLastRef((WebCore::Node *)(v5 - 288), v8);
        }
        else
        {
          *(_DWORD *)(v5 - 264) -= 2;
        }
      }
    }
  }
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
    return (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  return result;
}

