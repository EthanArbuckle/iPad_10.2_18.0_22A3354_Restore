BOOL std::__insertion_sort_incomplete[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::Decimal *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  _BOOL4 v7;
  uint64_t v8;
  __int128 *v9;
  _BOOL4 v10;
  BOOL v11;
  _BOOL4 v12;
  _BOOL4 v13;
  uint64_t v14;
  __int128 v15;
  __int128 *v16;
  _BOOL4 v17;
  BOOL v18;
  _BOOL4 v19;
  _BOOL4 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  _BOOL4 v26;
  uint64_t v27;
  __int128 v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  _BOOL4 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BOOL4 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  _BOOL4 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  _BYTE v53[12];
  int v54;
  _BOOL4 v55;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = a2 - 24;
      WebCore::Decimal::operator-((__int128 *)(a2 - 24), (__int128 *)a1, (uint64_t)v53);
      if ((v54 - 1) >= 2)
      {
        if (v54)
          return 1;
        v7 = v55;
      }
      else
      {
        if (v54 == 2)
          return 1;
        v7 = v55;
      }
      if (v7)
        goto LABEL_26;
      return 1;
    case 3uLL:
      v16 = (__int128 *)(a1 + 24);
      v6 = a2 - 24;
      WebCore::Decimal::operator-((__int128 *)(a1 + 24), (__int128 *)a1, (uint64_t)v53);
      if ((v54 - 1) >= 2)
      {
        if (!v54)
        {
          v17 = v55;
          goto LABEL_20;
        }
      }
      else if (v54 != 2)
      {
        v17 = v55;
LABEL_20:
        v18 = v17;
        goto LABEL_21;
      }
      v18 = 0;
LABEL_21:
      WebCore::Decimal::operator-((__int128 *)v6, (__int128 *)(a1 + 24), (uint64_t)v53);
      if ((v54 - 1) >= 2)
      {
        if (!v54)
        {
          v19 = v55;
          goto LABEL_24;
        }
LABEL_79:
        v20 = 0;
        if (v18)
          goto LABEL_25;
        goto LABEL_80;
      }
      if (v54 == 2)
        goto LABEL_79;
      v19 = v55;
LABEL_24:
      v20 = v19;
      if (v18)
      {
LABEL_25:
        if (v20)
        {
LABEL_26:
          v21 = *(_QWORD *)(a1 + 16);
          v22 = *(_OWORD *)a1;
          v23 = *(_QWORD *)(v6 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v6;
          *(_QWORD *)(a1 + 16) = v23;
LABEL_27:
          *(_OWORD *)v6 = v22;
          *(_QWORD *)(v6 + 16) = v21;
          return 1;
        }
        v27 = *(_QWORD *)(a1 + 16);
        v28 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v16;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
        *v16 = v28;
        *(_QWORD *)(a1 + 40) = v27;
        WebCore::Decimal::operator-((__int128 *)v6, (__int128 *)(a1 + 24), (uint64_t)v53);
        if ((v54 - 1) >= 2)
        {
          if (v54)
            return 1;
          v29 = v55;
        }
        else
        {
          if (v54 == 2)
            return 1;
          v29 = v55;
        }
        if (v29)
        {
          v21 = *(_QWORD *)(a1 + 40);
          v22 = *v16;
          v30 = *(_QWORD *)(v6 + 16);
          *v16 = *(_OWORD *)v6;
          *(_QWORD *)(a1 + 40) = v30;
          goto LABEL_27;
        }
        return 1;
      }
LABEL_80:
      if (!v20)
        return 1;
      v45 = *(_QWORD *)(a1 + 40);
      v46 = *v16;
      v47 = *(_QWORD *)(v6 + 16);
      *v16 = *(_OWORD *)v6;
      *(_QWORD *)(a1 + 40) = v47;
      *(_OWORD *)v6 = v46;
      *(_QWORD *)(v6 + 16) = v45;
      WebCore::Decimal::operator-((__int128 *)(a1 + 24), (__int128 *)a1, (uint64_t)v53);
      if ((v54 - 1) >= 2)
      {
        if (v54)
          return 1;
        v48 = v55;
      }
      else
      {
        if (v54 == 2)
          return 1;
        v48 = v55;
      }
      if (v48)
      {
        v49 = *(_QWORD *)(a1 + 16);
        v50 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v16;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
        *v16 = v50;
        *(_QWORD *)(a1 + 40) = v49;
      }
      return 1;
    case 4uLL:
      std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::Decimal *>(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::Decimal *>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      v8 = a1 + 48;
      v9 = (__int128 *)(a1 + 24);
      WebCore::Decimal::operator-((__int128 *)(a1 + 24), (__int128 *)a1, (uint64_t)v53);
      if ((v54 - 1) >= 2)
      {
        if (!v54)
        {
          v10 = v55;
          goto LABEL_10;
        }
      }
      else if (v54 != 2)
      {
        v10 = v55;
LABEL_10:
        v11 = v10;
        goto LABEL_11;
      }
      v11 = 0;
LABEL_11:
      WebCore::Decimal::operator-((__int128 *)(a1 + 48), (__int128 *)(a1 + 24), (uint64_t)v53);
      if ((v54 - 1) >= 2)
      {
        if (!v54)
        {
          v12 = v55;
LABEL_14:
          v13 = v12;
          if (v11)
          {
LABEL_15:
            if (v13)
            {
              v14 = *(_QWORD *)(a1 + 16);
              v15 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *(_OWORD *)v8;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 64);
LABEL_35:
              *(_OWORD *)v8 = v15;
              *(_QWORD *)(a1 + 64) = v14;
              goto LABEL_53;
            }
            v24 = *(_QWORD *)(a1 + 16);
            v25 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *v9;
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
            *v9 = v25;
            *(_QWORD *)(a1 + 40) = v24;
            WebCore::Decimal::operator-((__int128 *)(a1 + 48), (__int128 *)(a1 + 24), (uint64_t)v53);
            if ((v54 - 1) >= 2)
            {
              if (v54)
                goto LABEL_53;
              v26 = v55;
            }
            else
            {
              if (v54 == 2)
                goto LABEL_53;
              v26 = v55;
            }
            if (v26)
            {
              v14 = *(_QWORD *)(a1 + 40);
              v15 = *v9;
              *v9 = *(_OWORD *)v8;
              *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
              goto LABEL_35;
            }
LABEL_53:
            v36 = a1 + 72;
            if (a1 + 72 == a2)
              return 1;
            v37 = 0;
            v38 = 0;
            while (1)
            {
              WebCore::Decimal::operator-((__int128 *)v36, (__int128 *)v8, (uint64_t)v53);
              if ((v54 - 1) >= 2)
              {
                if (v54)
                  goto LABEL_71;
                v39 = v55;
              }
              else
              {
                if (v54 == 2)
                  goto LABEL_71;
                v39 = v55;
              }
              if (v39)
              {
                v51 = *(_OWORD *)v36;
                v52 = *(_QWORD *)(v36 + 16);
                v40 = v37;
                while (1)
                {
                  v41 = v40;
                  v42 = a1 + v40;
                  *(_OWORD *)(v42 + 72) = *(_OWORD *)(a1 + v40 + 48);
                  *(_QWORD *)(v42 + 88) = *(_QWORD *)(a1 + v40 + 64);
                  if (v40 == -48)
                    break;
                  WebCore::Decimal::operator-(&v51, (__int128 *)(v42 + 24), (uint64_t)v53);
                  if ((v54 - 1) >= 2)
                  {
                    if (v54)
                    {
LABEL_68:
                      v8 = a1 + v41 + 48;
                      goto LABEL_70;
                    }
                    v43 = v55;
                  }
                  else
                  {
                    if (v54 == 2)
                      goto LABEL_70;
                    v43 = v55;
                  }
                  v8 -= 24;
                  v40 = v41 - 24;
                  if (!v43)
                    goto LABEL_68;
                }
                v8 = a1;
LABEL_70:
                v44 = v51;
                *(_QWORD *)(v8 + 16) = v52;
                *(_OWORD *)v8 = v44;
                if (++v38 == 8)
                  return v36 + 24 == a2;
              }
LABEL_71:
              v8 = v36;
              v37 += 24;
              v36 += 24;
              if (v36 == a2)
                return 1;
            }
          }
LABEL_47:
          if (v13)
          {
            v31 = *(_QWORD *)(a1 + 40);
            v32 = *v9;
            *v9 = *(_OWORD *)v8;
            *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
            *(_OWORD *)v8 = v32;
            *(_QWORD *)(a1 + 64) = v31;
            WebCore::Decimal::operator-((__int128 *)(a1 + 24), (__int128 *)a1, (uint64_t)v53);
            if ((v54 - 1) >= 2)
            {
              if (v54)
                goto LABEL_53;
              v33 = v55;
            }
            else
            {
              if (v54 == 2)
                goto LABEL_53;
              v33 = v55;
            }
            if (v33)
            {
              v34 = *(_QWORD *)(a1 + 16);
              v35 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v9;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
              *v9 = v35;
              *(_QWORD *)(a1 + 40) = v34;
            }
            goto LABEL_53;
          }
          goto LABEL_53;
        }
      }
      else if (v54 != 2)
      {
        v12 = v55;
        goto LABEL_14;
      }
      v13 = 0;
      if (v11)
        goto LABEL_15;
      goto LABEL_47;
  }
}

__n128 std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::Decimal *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v8;
  BOOL v9;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __n128 result;
  _BOOL4 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  _BOOL4 v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[12];
  int v40;
  _BOOL4 v41;

  WebCore::Decimal::operator-((__int128 *)a2, (__int128 *)a1, (uint64_t)v39);
  if ((v40 - 1) >= 2)
  {
    if (!v40)
    {
      v8 = v41;
      goto LABEL_4;
    }
  }
  else if (v40 != 2)
  {
    v8 = v41;
LABEL_4:
    v9 = v8;
    goto LABEL_5;
  }
  v9 = 0;
LABEL_5:
  WebCore::Decimal::operator-((__int128 *)a3, (__int128 *)a2, (uint64_t)v39);
  if ((v40 - 1) < 2)
  {
    if (v40 != 2)
    {
      v10 = v41;
      goto LABEL_8;
    }
LABEL_20:
    v11 = 0;
    if (v9)
      goto LABEL_9;
    goto LABEL_21;
  }
  if (v40)
    goto LABEL_20;
  v10 = v41;
LABEL_8:
  v11 = v10;
  if (v9)
  {
LABEL_9:
    if (v11)
    {
      v12 = *(_QWORD *)(a1 + 16);
      v13 = *(_OWORD *)a1;
      v14 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_QWORD *)(a1 + 16) = v14;
LABEL_16:
      *(_OWORD *)a3 = v13;
      *(_QWORD *)(a3 + 16) = v12;
      goto LABEL_27;
    }
    v15 = *(_QWORD *)(a1 + 16);
    v16 = *(_OWORD *)a1;
    v17 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v17;
    *(_OWORD *)a2 = v16;
    *(_QWORD *)(a2 + 16) = v15;
    WebCore::Decimal::operator-((__int128 *)a3, (__int128 *)a2, (uint64_t)v39);
    if ((v40 - 1) < 2)
    {
      if (v40 == 2)
        goto LABEL_27;
      v18 = v41;
      goto LABEL_14;
    }
    if (!v40)
    {
      v18 = v41;
LABEL_14:
      if (!v18)
        goto LABEL_27;
      v12 = *(_QWORD *)(a2 + 16);
      v13 = *(_OWORD *)a2;
      v19 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v19;
      goto LABEL_16;
    }
    goto LABEL_27;
  }
LABEL_21:
  if (!v11)
    goto LABEL_27;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = *(_OWORD *)a2;
  v22 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v22;
  *(_OWORD *)a3 = v21;
  *(_QWORD *)(a3 + 16) = v20;
  WebCore::Decimal::operator-((__int128 *)a2, (__int128 *)a1, (uint64_t)v39);
  if ((v40 - 1) >= 2)
  {
    if (v40)
      goto LABEL_27;
    v23 = v41;
  }
  else
  {
    if (v40 == 2)
      goto LABEL_27;
    v23 = v41;
  }
  if (v23)
  {
    v24 = *(_QWORD *)(a1 + 16);
    v25 = *(_OWORD *)a1;
    v26 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v26;
    *(_OWORD *)a2 = v25;
    *(_QWORD *)(a2 + 16) = v24;
  }
LABEL_27:
  result.n128_f64[0] = WebCore::Decimal::operator-((__int128 *)a4, (__int128 *)a3, (uint64_t)v39);
  if ((v40 - 1) >= 2)
  {
    if (v40)
      return result;
    v28 = v41;
  }
  else
  {
    if (v40 == 2)
      return result;
    v28 = v41;
  }
  if (!v28)
    return result;
  v29 = *(_QWORD *)(a3 + 16);
  v30 = *(_OWORD *)a3;
  v31 = *(_QWORD *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_QWORD *)(a3 + 16) = v31;
  *(_OWORD *)a4 = v30;
  *(_QWORD *)(a4 + 16) = v29;
  result.n128_f64[0] = WebCore::Decimal::operator-((__int128 *)a3, (__int128 *)a2, (uint64_t)v39);
  if ((v40 - 1) >= 2)
  {
    if (v40)
      return result;
    v32 = v41;
  }
  else
  {
    if (v40 == 2)
      return result;
    v32 = v41;
  }
  if (!v32)
    return result;
  v33 = *(_QWORD *)(a2 + 16);
  v34 = *(_OWORD *)a2;
  v35 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v35;
  *(_OWORD *)a3 = v34;
  *(_QWORD *)(a3 + 16) = v33;
  result.n128_f64[0] = WebCore::Decimal::operator-((__int128 *)a2, (__int128 *)a1, (uint64_t)v39);
  if ((v40 - 1) >= 2)
  {
    if (v40)
      return result;
    v36 = v41;
  }
  else
  {
    if (v40 == 2)
      return result;
    v36 = v41;
  }
  if (v36)
  {
    v37 = *(_QWORD *)(a1 + 16);
    result = *(__n128 *)a1;
    v38 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v38;
    *(__n128 *)a2 = result;
    *(_QWORD *)(a2 + 16) = v37;
  }
  return result;
}

__n128 std::__sort5[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::Decimal *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  _BOOL4 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  _BOOL4 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[12];
  int v27;
  _BOOL4 v28;

  std::__sort4[abi:sn180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,WebCore::Decimal *>(a1, a2, a3, a4);
  result.n128_f64[0] = WebCore::Decimal::operator-((__int128 *)a5, (__int128 *)a4, (uint64_t)v26);
  if ((v27 - 1) >= 2)
  {
    if (v27)
      return result;
    v11 = v28;
  }
  else
  {
    if (v27 == 2)
      return result;
    v11 = v28;
  }
  if (!v11)
    return result;
  v12 = *(_QWORD *)(a4 + 16);
  v13 = *(_OWORD *)a4;
  v14 = *(_QWORD *)(a5 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(_QWORD *)(a4 + 16) = v14;
  *(_OWORD *)a5 = v13;
  *(_QWORD *)(a5 + 16) = v12;
  result.n128_f64[0] = WebCore::Decimal::operator-((__int128 *)a4, (__int128 *)a3, (uint64_t)v26);
  if ((v27 - 1) >= 2)
  {
    if (v27)
      return result;
    v15 = v28;
  }
  else
  {
    if (v27 == 2)
      return result;
    v15 = v28;
  }
  if (!v15)
    return result;
  v16 = *(_QWORD *)(a3 + 16);
  v17 = *(_OWORD *)a3;
  v18 = *(_QWORD *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_QWORD *)(a3 + 16) = v18;
  *(_OWORD *)a4 = v17;
  *(_QWORD *)(a4 + 16) = v16;
  result.n128_f64[0] = WebCore::Decimal::operator-((__int128 *)a3, (__int128 *)a2, (uint64_t)v26);
  if ((v27 - 1) >= 2)
  {
    if (v27)
      return result;
    v19 = v28;
  }
  else
  {
    if (v27 == 2)
      return result;
    v19 = v28;
  }
  if (!v19)
    return result;
  v20 = *(_QWORD *)(a2 + 16);
  v21 = *(_OWORD *)a2;
  v22 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v22;
  *(_OWORD *)a3 = v21;
  *(_QWORD *)(a3 + 16) = v20;
  result.n128_f64[0] = WebCore::Decimal::operator-((__int128 *)a2, (__int128 *)a1, (uint64_t)v26);
  if ((v27 - 1) >= 2)
  {
    if (v27)
      return result;
    v23 = v28;
  }
  else
  {
    if (v27 == 2)
      return result;
    v23 = v28;
  }
  if (v23)
  {
    v24 = *(_QWORD *)(a1 + 16);
    result = *(__n128 *)a1;
    v25 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v25;
    *(__n128 *)a2 = result;
    *(_QWORD *)(a2 + 16) = v24;
  }
  return result;
}

_BYTE *WTF::Detail::CallableWrapper<WebCore::PermissionsPolicy::PermissionsPolicy(WebCore::Document const&)::$_0,void,WebCore::PermissionsPolicy::Feature>::call(_QWORD *a1, WTF::StringImpl *a2)
{
  unsigned int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *result;
  _BYTE v7[31];
  char v8;

  v2 = a2;
  v8 = (char)a2;
  v3 = (uint64_t *)a1[1];
  v4 = a1[2];
  WebCore::SecurityContext::securityOrigin((WebCore::SecurityContext *)(a1[3] + 192), a2);
  result = (_BYTE *)WebCore::PermissionsPolicy::computeInheritedPolicyValueInContainer(v2, v4, v5 + 8);
  if ((_DWORD)result)
    return WTF::HashTable<WebCore::PermissionsPolicy::Feature,WebCore::PermissionsPolicy::Feature,WTF::IdentityExtractor,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::add(v7, v3, &v8);
  return result;
}

_BYTE *WTF::HashTable<WebCore::PermissionsPolicy::Feature,WebCore::PermissionsPolicy::Feature,WTF::IdentityExtractor,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::add(_BYTE *result, uint64_t *a2, _BYTE *a3)
{
  _BYTE *v5;
  uint64_t v6;
  char v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  _BYTE *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unsigned int v27;
  uint64_t v28;

  v5 = result;
  v6 = *a2;
  if (*a2
    || (result = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WebCore::PermissionsPolicy::Feature,WTF::IdentityExtractor,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::rehash(a2, 8u, 0), (v6 = *a2) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a3;
  v10 = 9 * ((~(v9 << 15) + v9) ^ ((~(v9 << 15) + v9) >> 10));
  v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
  v12 = v11 ^ HIWORD(v11);
  v13 = v8;
  v14 = v12 & v8;
  v15 = (_BYTE *)(v6 + v14);
  v16 = *(unsigned __int8 *)(v6 + v14);
  if (v16 != 255)
  {
    v17 = 0;
    v18 = 1;
    do
    {
      if (v16 == v9)
      {
        if ((v7 & 1) != 0)
          v28 = 0;
        else
          v28 = *(unsigned int *)(v6 - 4);
        v26 = 0;
        v25 = v6 + v28;
        goto LABEL_18;
      }
      if (v16 == 254)
        v17 = v15;
      v14 = ((_DWORD)v14 + v18) & v13;
      v15 = (_BYTE *)(v6 + v14);
      v16 = *(unsigned __int8 *)(v6 + v14);
      ++v18;
    }
    while (v16 != 255);
    if (v17)
    {
      *v17 = -1;
      --*(_DWORD *)(*a2 - 16);
      LOBYTE(v9) = *a3;
      v15 = v17;
    }
  }
  *v15 = v9;
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *a2;
  if (*a2)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 > 2 * v23)
      goto LABEL_17;
    goto LABEL_20;
  }
  if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v27 = 8;
LABEL_23:
      result = WTF::HashTable<WebCore::PermissionsPolicy::Feature,WebCore::PermissionsPolicy::Feature,WTF::IdentityExtractor,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::rehash(a2, v27, (uint64_t)v15);
      v15 = result;
      v21 = *a2;
      if (*a2)
        v24 = *(unsigned int *)(v21 - 4);
      else
        v24 = 0;
      goto LABEL_17;
    }
LABEL_20:
    v27 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
    goto LABEL_23;
  }
LABEL_17:
  v25 = v21 + v24;
  v26 = 1;
LABEL_18:
  *(_QWORD *)v5 = v15;
  *((_QWORD *)v5 + 1) = v25;
  v5[16] = v26;
  return result;
}

_BYTE *WTF::HashTable<WebCore::PermissionsPolicy::Feature,WebCore::PermissionsPolicy::Feature,WTF::IdentityExtractor,WTF::IntHash<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>,WTF::StrongEnumHashTraits<WebCore::PermissionsPolicy::Feature>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE *v22;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastMalloc((WTF *)(a2 + 16));
  v11 = v9;
  v12 = v9 + 16;
  if (a2)
    memset((void *)(v9 + 16), 255, a2);
  *a1 = v12;
  *(_DWORD *)(v11 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v13 = 0;
    v14 = 0;
    do
    {
      v15 = *(unsigned __int8 *)(v6 + v13);
      if (v15 <= 0xFD)
      {
        v16 = *a1;
        v17 = *a1 ? *(_DWORD *)(v16 - 8) : 0;
        v18 = 0;
        v19 = 9 * ((~(v15 << 15) + v15) ^ ((~(v15 << 15) + v15) >> 10));
        v20 = ((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) ^ (((v19 ^ (v19 >> 6)) + ~((v19 ^ (v19 >> 6)) << 11)) >> 16);
        do
        {
          v21 = v20 & v17;
          v20 = ++v18 + v21;
        }
        while (*(unsigned __int8 *)(v16 + v21) != 255);
        v22 = (_BYTE *)(v16 + v21);
        *v22 = v15;
        if (v6 + v13 == a3)
          v14 = v22;
      }
      ++v13;
    }
    while (v13 != v7);
  }
  else
  {
    v14 = 0;
  }
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v14;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PublicURLManager::revoke(WTF::URL const&)::$_0,void,WebCore::URLRegistry &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 8);
  if (v4)
    v5 = v4 - 96;
  else
    v5 = 0;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 256))(v5) + 8;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v3, v6);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PublicURLManager::stop(void)::$_0,void,WebCore::URLRegistry &>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 32))(a2, **(_QWORD **)(a1 + 8));
}

BOOL WTF::Detail::CallableWrapper<WebCore::RadioInputType::valueMissing(WTF::String const&)::$_0,BOOL,WebCore::HTMLInputElement &>::call(uint64_t a1, uint64_t a2)
{
  __int16 v2;
  _BYTE **v3;

  v2 = *(_WORD *)(a2 + 230);
  if ((v2 & 1) != 0)
  {
    v3 = (_BYTE **)(a1 + 8);
    goto LABEL_5;
  }
  if ((*(_BYTE *)(a2 + 168) & 1) != 0)
  {
    v3 = (_BYTE **)(a1 + 16);
LABEL_5:
    **v3 = 1;
  }
  return (v2 & 1) == 0;
}

uint64_t WebCore::CollectionIndexCache<WebCore::RadioNodeList,WebCore::ElementDescendantIterator<WebCore::Element>>::computeNodeCountUpdatingListCache(uint64_t a1, WebCore::RadioNodeList *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;

  if ((*(unsigned int (**)(WebCore::RadioNodeList *))(*(_QWORD *)a2 + 72))(a2)
    && (v24 = *((_QWORD *)a2 + 3), (*(_BYTE *)(v24 + 22) & 0x18) != 0))
  {
    v4 = *(char **)(v24 + 40);
  }
  else
  {
    v4 = (char *)a2 + 24;
  }
  v5 = *(_QWORD *)v4;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  if (v6)
  {
    result = 0;
    while ((*(_WORD *)(v6 + 28) & 8) == 0)
    {
      v6 = *(_QWORD *)(v6 + 56);
      if (!v6)
        return result;
    }
    while (1)
    {
LABEL_30:
      if ((WebCore::RadioNodeList::elementMatches(a2, (WebCore::Element *)v6) & 1) != 0)
      {
        v11 = *(_DWORD *)(a1 + 32);
        v12 = v11;
LABEL_32:
        v13 = *(unsigned int *)(a1 + 36);
        if ((_DWORD)v13 == v12)
        {
          v17 = v13 + (v13 >> 2);
          if (v17 >= 0x10)
            v18 = v17 + 1;
          else
            v18 = 16;
          if (v18 <= v13 + 1)
            v19 = v13 + 1;
          else
            v19 = v18;
          WTF::Vector<WTF::WeakPtr<WebCore::Element,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1 + 24, v19);
          v13 = *(unsigned int *)(a1 + 36);
          v14 = *(_QWORD *)(a1 + 24);
          v15 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v6);
          if (v15)
          {
            do
              v20 = __ldaxr(v15);
            while (__stlxr(v20 + 1, v15));
          }
        }
        else
        {
          v14 = *(_QWORD *)(a1 + 24);
          v15 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v6);
          if (v15)
          {
            do
              v16 = __ldaxr(v15);
            while (__stlxr(v16 + 1, v15));
          }
        }
        *(_QWORD *)(v14 + 8 * v13) = v15;
        ++*(_DWORD *)(a1 + 36);
        while (1)
        {
          v21 = *(_QWORD *)(v6 + 80);
          if (!v21)
          {
            if (v6 == v5)
              goto LABEL_70;
            while (1)
            {
              v21 = *(_QWORD *)(v6 + 56);
              if (v21)
                break;
              v6 = *(_QWORD *)(v6 + 32);
              if (v6)
                v23 = v6 == v5;
              else
                v23 = 1;
              if (v23)
                goto LABEL_70;
            }
          }
          if ((*(_WORD *)(v21 + 28) & 8) == 0)
            break;
          v6 = v21;
LABEL_58:
          if (WebCore::RadioNodeList::elementMatches(a2, (WebCore::Element *)v6))
          {
            v12 = *(_DWORD *)(a1 + 32);
            goto LABEL_32;
          }
        }
        while (v21 != v5)
        {
          while (1)
          {
            v6 = *(_QWORD *)(v21 + 56);
            if (v6)
              break;
            v21 = *(_QWORD *)(v21 + 32);
            if (v21)
              v22 = v21 == v5;
            else
              v22 = 1;
            if (v22)
              goto LABEL_70;
          }
          v21 = *(_QWORD *)(v21 + 56);
          if ((*(_WORD *)(v6 + 28) & 8) != 0)
            goto LABEL_58;
        }
LABEL_70:
        *(_BYTE *)(a1 + 40) |= 2u;
        if (*(_DWORD *)(a1 + 32) != v11)
          WebCore::reportExtraMemoryAllocatedForCollectionIndexCache((WebCore *)(8
                                                                               * (*(_DWORD *)(a1 + 32)
                                                                                              - v11)));
        return *(unsigned int *)(a1 + 36);
      }
      v8 = *(_QWORD *)(v6 + 80);
      if (!v8)
      {
        if (v6 == v5)
          return 0;
        while (1)
        {
          v8 = *(_QWORD *)(v6 + 56);
          if (v8)
            break;
          v6 = *(_QWORD *)(v6 + 32);
          if (v6)
            v10 = v6 == v5;
          else
            v10 = 1;
          if (v10)
            return 0;
        }
      }
      if ((*(_WORD *)(v8 + 28) & 8) == 0)
        break;
      v6 = v8;
    }
    while (v8 != v5)
    {
      while (1)
      {
        v6 = *(_QWORD *)(v8 + 56);
        if (v6)
          break;
        v8 = *(_QWORD *)(v8 + 32);
        if (v8)
          v9 = v8 == v5;
        else
          v9 = 1;
        if (v9)
          return 0;
      }
      v8 = *(_QWORD *)(v8 + 56);
      if ((*(_WORD *)(v6 + 28) & 8) != 0)
        goto LABEL_30;
    }
  }
  return 0;
}

uint64_t WebCore::CollectionIndexCache<WebCore::RadioNodeList,WebCore::ElementDescendantIterator<WebCore::Element>>::nodeAt(uint64_t result, WebCore::RadioNodeList *this, unsigned int a3)
{
  uint64_t v5;
  char v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  WebCore::Element *v32;
  BOOL v33;
  BOOL v34;
  unsigned int v35;
  int v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  WebCore::Element *v57;
  BOOL v58;
  unsigned int v59;
  BOOL v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  WebCore::Element *v68;
  BOOL v69;
  unsigned int v70;
  BOOL v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  BOOL v81;

  v5 = result;
  v6 = *(_BYTE *)(result + 40);
  if ((v6 & 1) != 0 && *(_DWORD *)(result + 20) <= a3)
    return 0;
  if ((*(_BYTE *)(result + 40) & 2) != 0)
  {
    if (*(_DWORD *)(result + 36) <= a3)
    {
      __break(0xC471u);
      return result;
    }
    v20 = *(_QWORD *)(*(_QWORD *)(result + 24) + 8 * a3);
    if (v20)
      return *(_QWORD *)(v20 + 8);
    return 0;
  }
  result = *(_QWORD *)(result + 8);
  if (!result)
  {
    if ((v6 & 1) != 0)
    {
      if (*(_DWORD *)(v5 + 20) - a3 < a3)
      {
        if ((*(unsigned int (**)(WebCore::RadioNodeList *))(*(_QWORD *)this + 72))(this)
          && (v76 = *((_QWORD *)this + 3), (*(_BYTE *)(v76 + 22) & 0x18) != 0))
        {
          v37 = *(uint64_t **)(v76 + 40);
        }
        else
        {
          v37 = (uint64_t *)((char *)this + 24);
        }
        v38 = WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::RadioNodeList>(this, *v37);
        result = v39;
        *(_QWORD *)v5 = v38;
        *(_QWORD *)(v5 + 8) = v39;
        v40 = *(_DWORD *)(v5 + 20);
        if (v40 - 1 <= a3)
          goto LABEL_128;
        v41 = v40 + ~a3;
        if (!v41)
          goto LABEL_128;
        while (1)
        {
          v42 = *(_QWORD **)v5;
          v43 = *(_QWORD *)(v5 + 8);
          v44 = *(_QWORD *)(v43 + 48) & 0xFFFFFFFFFFFFLL;
          if (!v44)
            break;
          if ((*(_WORD *)((*(_QWORD *)(v43 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
          {
            do
            {
              v47 = *(_QWORD *)(v44 + 88);
              if (!v47)
                break;
              v44 = *(_QWORD *)(v44 + 88);
            }
            while ((*(_WORD *)(v47 + 28) & 4) != 0);
          }
LABEL_85:
          while ((*(_WORD *)(v44 + 28) & 8) == 0)
          {
            if ((*(_QWORD *)(v44 + 48) & 0xFFFFFFFFFFFFLL) != 0)
            {
              if ((*(_WORD *)((*(_QWORD *)(v44 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
              {
                v44 = *(_QWORD *)(v44 + 48) & 0xFFFFFFFFFFFFLL;
                do
                {
                  v46 = *(_QWORD *)(v44 + 88);
                  if (!v46)
                    break;
                  v44 = *(_QWORD *)(v44 + 88);
                }
                while ((*(_WORD *)(v46 + 28) & 4) != 0);
              }
              else
              {
                v44 = *(_QWORD *)(v44 + 48) & 0xFFFFFFFFFFFFLL;
              }
            }
            else
            {
              v44 = *(_QWORD *)(v44 + 32);
              if ((_QWORD *)v44 == v42)
                goto LABEL_127;
            }
            if (!v44)
              goto LABEL_127;
          }
          *(_QWORD *)(v5 + 8) = v44;
          if (WebCore::RadioNodeList::elementMatches(this, (WebCore::Element *)v44))
          {
            if (!--v41)
            {
LABEL_102:
              result = *(_QWORD *)(v5 + 8);
              goto LABEL_128;
            }
          }
        }
        v44 = *(_QWORD *)(v43 + 32);
        if ((_QWORD *)v44 != v42 && v44 != 0)
          goto LABEL_85;
LABEL_127:
        result = 0;
        *(_QWORD *)(v5 + 8) = 0;
        goto LABEL_128;
      }
    }
    else
    {
      v21 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 40) + 8);
      *(_DWORD *)(v21 + 24) += 2;
      WebCore::Document::registerNodeListForInvalidation((WebCore::Document *)v21, this);
      if (*(_DWORD *)(v21 + 24) == 2)
      {
        if ((*(_WORD *)(v21 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v21, v22);
      }
      else
      {
        *(_DWORD *)(v21 + 24) -= 2;
      }
    }
    if ((*(unsigned int (**)(WebCore::RadioNodeList *))(*(_QWORD *)this + 72))(this)
      && (v72 = *((_QWORD *)this + 3), (*(_BYTE *)(v72 + 22) & 0x18) != 0))
    {
      v61 = *(char **)(v72 + 40);
    }
    else
    {
      v61 = (char *)this + 24;
    }
    v62 = *(_QWORD *)v61;
    v63 = *(_QWORD *)(*(_QWORD *)v61 + 80);
    if (v63)
    {
      v64 = 0;
      while ((*(_WORD *)(v63 + 28) & 8) == 0)
      {
        v63 = *(_QWORD *)(v63 + 56);
        if (!v63)
          goto LABEL_170;
      }
      v64 = v63;
      if ((WebCore::RadioNodeList::elementMatches(this, (WebCore::Element *)v63) & 1) != 0)
      {
LABEL_170:
        *(_QWORD *)v5 = v62;
        *(_QWORD *)(v5 + 8) = v64;
        result = v64;
        *(_DWORD *)(v5 + 16) = 0;
        if (a3)
        {
          if (!v64)
            goto LABEL_202;
          *(_DWORD *)(v5 + 16) = 0;
          while (1)
          {
            v65 = *(_QWORD **)v5;
            v66 = *(_QWORD **)(v5 + 8);
            v67 = (_QWORD *)v66[10];
            if (!v67)
            {
              if (v66 == v65)
                goto LABEL_196;
              while (1)
              {
                v67 = (_QWORD *)v66[7];
                if (v67)
                  break;
                v66 = (_QWORD *)v66[4];
                if (v66)
                  v71 = v66 == v65;
                else
                  v71 = 1;
                if (v71)
                  goto LABEL_196;
              }
            }
            if ((*((_WORD *)v67 + 14) & 8) == 0)
              break;
            v68 = (WebCore::Element *)v67;
LABEL_186:
            *(_QWORD *)(v5 + 8) = v68;
            if (WebCore::RadioNodeList::elementMatches(this, v68))
            {
              v70 = *(_DWORD *)(v5 + 16) + 1;
              *(_DWORD *)(v5 + 16) = v70;
              if (v70 >= a3)
              {
                result = *(_QWORD *)(v5 + 8);
                goto LABEL_199;
              }
            }
          }
          while (v67 != v65)
          {
            while (1)
            {
              v68 = (WebCore::Element *)v67[7];
              if (v68)
                break;
              v67 = (_QWORD *)v67[4];
              if (v67)
                v69 = v67 == v65;
              else
                v69 = 1;
              if (v69)
                goto LABEL_196;
            }
            v67 = (_QWORD *)v67[7];
            if ((*((_WORD *)v68 + 14) & 8) != 0)
              goto LABEL_186;
          }
LABEL_196:
          *(_QWORD *)(v5 + 8) = 0;
        }
        else
        {
LABEL_199:
          if (result)
            return result;
        }
        if (v64)
        {
          v36 = *(_DWORD *)(v5 + 16) + 1;
          goto LABEL_203;
        }
LABEL_202:
        v36 = 0;
LABEL_203:
        result = 0;
LABEL_204:
        *(_DWORD *)(v5 + 20) = v36;
        *(_BYTE *)(v5 + 40) |= 1u;
        return result;
      }
      while (1)
      {
        v73 = *(_QWORD *)(v64 + 80);
        if (!v73)
        {
          if (v64 == v62)
            goto LABEL_166;
          while (1)
          {
            v73 = *(_QWORD *)(v64 + 56);
            if (v73)
              break;
            v64 = *(_QWORD *)(v64 + 32);
            if (v64)
              v75 = v64 == v62;
            else
              v75 = 1;
            if (v75)
              goto LABEL_166;
          }
        }
        if ((*(_WORD *)(v73 + 28) & 8) == 0)
          break;
        v64 = v73;
LABEL_220:
        if ((WebCore::RadioNodeList::elementMatches(this, (WebCore::Element *)v64) & 1) != 0)
          goto LABEL_170;
      }
      while (v73 != v62)
      {
        while (1)
        {
          v64 = *(_QWORD *)(v73 + 56);
          if (v64)
            break;
          v73 = *(_QWORD *)(v73 + 32);
          if (v73)
            v74 = v73 == v62;
          else
            v74 = 1;
          if (v74)
            goto LABEL_166;
        }
        v73 = *(_QWORD *)(v73 + 56);
        if ((*(_WORD *)(v64 + 28) & 8) != 0)
          goto LABEL_220;
      }
    }
LABEL_166:
    v64 = 0;
    goto LABEL_170;
  }
  v7 = *(_DWORD *)(v5 + 16);
  v8 = a3 - v7;
  if (a3 <= v7)
  {
    if (a3 >= v7)
      return result;
    v23 = v7 - a3;
    if (v7 - a3 <= a3)
    {
      if (v23)
      {
        while (1)
        {
          v48 = *(_QWORD **)v5;
          v49 = *(_QWORD *)(v5 + 8);
          v50 = *(_QWORD *)(v49 + 48) & 0xFFFFFFFFFFFFLL;
          if (!v50)
            break;
          if ((*(_WORD *)((*(_QWORD *)(v49 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
          {
            do
            {
              v53 = *(_QWORD *)(v50 + 88);
              if (!v53)
                break;
              v50 = *(_QWORD *)(v50 + 88);
            }
            while ((*(_WORD *)(v53 + 28) & 4) != 0);
          }
LABEL_109:
          while ((*(_WORD *)(v50 + 28) & 8) == 0)
          {
            if ((*(_QWORD *)(v50 + 48) & 0xFFFFFFFFFFFFLL) != 0)
            {
              if ((*(_WORD *)((*(_QWORD *)(v50 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
              {
                v50 = *(_QWORD *)(v50 + 48) & 0xFFFFFFFFFFFFLL;
                do
                {
                  v52 = *(_QWORD *)(v50 + 88);
                  if (!v52)
                    break;
                  v50 = *(_QWORD *)(v50 + 88);
                }
                while ((*(_WORD *)(v52 + 28) & 4) != 0);
              }
              else
              {
                v50 = *(_QWORD *)(v50 + 48) & 0xFFFFFFFFFFFFLL;
              }
            }
            else
            {
              v50 = *(_QWORD *)(v50 + 32);
              if ((_QWORD *)v50 == v48)
                goto LABEL_129;
            }
            if (!v50)
              goto LABEL_129;
          }
          *(_QWORD *)(v5 + 8) = v50;
          if (WebCore::RadioNodeList::elementMatches(this, (WebCore::Element *)v50))
          {
            if (!--v23)
              goto LABEL_130;
          }
        }
        v50 = *(_QWORD *)(v49 + 32);
        if ((_QWORD *)v50 != v48 && v50 != 0)
          goto LABEL_109;
LABEL_129:
        *(_QWORD *)(v5 + 8) = 0;
      }
LABEL_130:
      *(_DWORD *)(v5 + 16) = a3;
      return *(_QWORD *)(v5 + 8);
    }
    if ((*(unsigned int (**)(WebCore::RadioNodeList *))(*(_QWORD *)this + 72))(this)
      && (v78 = *((_QWORD *)this + 3), (*(_BYTE *)(v78 + 22) & 0x18) != 0))
    {
      v24 = *(char **)(v78 + 40);
    }
    else
    {
      v24 = (char *)this + 24;
    }
    v25 = *(_QWORD *)v24;
    v26 = *(_QWORD *)(*(_QWORD *)v24 + 80);
    if (v26)
    {
      v27 = 0;
      while ((*(_WORD *)(v26 + 28) & 8) == 0)
      {
        v26 = *(_QWORD *)(v26 + 56);
        if (!v26)
          goto LABEL_134;
      }
      v27 = v26;
      if ((WebCore::RadioNodeList::elementMatches(this, (WebCore::Element *)v26) & 1) != 0)
        goto LABEL_134;
      while (1)
      {
        v79 = *(_QWORD *)(v27 + 80);
        if (!v79)
        {
          if (v27 == v25)
            goto LABEL_47;
          while (1)
          {
            v79 = *(_QWORD *)(v27 + 56);
            if (v79)
              break;
            v27 = *(_QWORD *)(v27 + 32);
            if (v27)
              v81 = v27 == v25;
            else
              v81 = 1;
            if (v81)
              goto LABEL_47;
          }
        }
        if ((*(_WORD *)(v79 + 28) & 8) == 0)
          break;
        v27 = v79;
LABEL_250:
        if ((WebCore::RadioNodeList::elementMatches(this, (WebCore::Element *)v27) & 1) != 0)
          goto LABEL_134;
      }
      while (v79 != v25)
      {
        while (1)
        {
          v27 = *(_QWORD *)(v79 + 56);
          if (v27)
            break;
          v79 = *(_QWORD *)(v79 + 32);
          if (v79)
            v80 = v79 == v25;
          else
            v80 = 1;
          if (v80)
            goto LABEL_47;
        }
        v79 = *(_QWORD *)(v79 + 56);
        if ((*(_WORD *)(v27 + 28) & 8) != 0)
          goto LABEL_250;
      }
    }
LABEL_47:
    v27 = 0;
LABEL_134:
    *(_QWORD *)v5 = v25;
    *(_QWORD *)(v5 + 8) = v27;
    *(_DWORD *)(v5 + 16) = 0;
    if (a3)
    {
      *(_DWORD *)(v5 + 16) = 0;
      while (1)
      {
        v54 = *(_QWORD **)v5;
        v55 = *(_QWORD **)(v5 + 8);
        v56 = (_QWORD *)v55[10];
        if (!v56)
        {
          if (v55 == v54)
            goto LABEL_159;
          while (1)
          {
            v56 = (_QWORD *)v55[7];
            if (v56)
              break;
            v55 = (_QWORD *)v55[4];
            if (v55)
              v60 = v55 == v54;
            else
              v60 = 1;
            if (v60)
              goto LABEL_159;
          }
        }
        if ((*((_WORD *)v56 + 14) & 8) == 0)
          break;
        v57 = (WebCore::Element *)v56;
LABEL_149:
        *(_QWORD *)(v5 + 8) = v57;
        if (WebCore::RadioNodeList::elementMatches(this, v57))
        {
          v59 = *(_DWORD *)(v5 + 16) + 1;
          *(_DWORD *)(v5 + 16) = v59;
          if (v59 >= a3)
            return *(_QWORD *)(v5 + 8);
        }
      }
      while (v56 != v54)
      {
        while (1)
        {
          v57 = (WebCore::Element *)v56[7];
          if (v57)
            break;
          v56 = (_QWORD *)v56[4];
          if (v56)
            v58 = v56 == v54;
          else
            v58 = 1;
          if (v58)
            goto LABEL_159;
        }
        v56 = (_QWORD *)v56[7];
        if ((*((_WORD *)v57 + 14) & 8) != 0)
          goto LABEL_149;
      }
LABEL_159:
      *(_QWORD *)(v5 + 8) = 0;
    }
    return *(_QWORD *)(v5 + 8);
  }
  if ((v6 & 1) != 0 && *(_DWORD *)(v5 + 20) - a3 < v8)
  {
    if ((*(unsigned int (**)(WebCore::RadioNodeList *))(*(_QWORD *)this + 72))(this)
      && (v77 = *((_QWORD *)this + 3), (*(_BYTE *)(v77 + 22) & 0x18) != 0))
    {
      v9 = *(uint64_t **)(v77 + 40);
    }
    else
    {
      v9 = (uint64_t *)((char *)this + 24);
    }
    v10 = WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::RadioNodeList>(this, *v9);
    result = v11;
    *(_QWORD *)v5 = v10;
    *(_QWORD *)(v5 + 8) = v11;
    v12 = *(_DWORD *)(v5 + 20);
    if (v12 - 1 <= a3)
      goto LABEL_128;
    v13 = v12 + ~a3;
    if (!v13)
      goto LABEL_128;
    while (1)
    {
      v14 = *(_QWORD **)v5;
      v15 = *(_QWORD *)(v5 + 8);
      v16 = *(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFLL;
      if (!v16)
        break;
      if ((*(_WORD *)((*(_QWORD *)(v15 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
      {
        do
        {
          v19 = *(_QWORD *)(v16 + 88);
          if (!v19)
            break;
          v16 = *(_QWORD *)(v16 + 88);
        }
        while ((*(_WORD *)(v19 + 28) & 4) != 0);
      }
LABEL_17:
      while ((*(_WORD *)(v16 + 28) & 8) == 0)
      {
        if ((*(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFLL) != 0)
        {
          if ((*(_WORD *)((*(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
          {
            v16 = *(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFLL;
            do
            {
              v18 = *(_QWORD *)(v16 + 88);
              if (!v18)
                break;
              v16 = *(_QWORD *)(v16 + 88);
            }
            while ((*(_WORD *)(v18 + 28) & 4) != 0);
          }
          else
          {
            v16 = *(_QWORD *)(v16 + 48) & 0xFFFFFFFFFFFFLL;
          }
        }
        else
        {
          v16 = *(_QWORD *)(v16 + 32);
          if ((_QWORD *)v16 == v14)
            goto LABEL_127;
        }
        if (!v16)
          goto LABEL_127;
      }
      *(_QWORD *)(v5 + 8) = v16;
      if (WebCore::RadioNodeList::elementMatches(this, (WebCore::Element *)v16))
      {
        if (!--v13)
          goto LABEL_102;
      }
    }
    v16 = *(_QWORD *)(v15 + 32);
    if ((_QWORD *)v16 != v14 && v16 != 0)
      goto LABEL_17;
    goto LABEL_127;
  }
  if (a3 == v7)
  {
LABEL_128:
    *(_DWORD *)(v5 + 16) = a3;
    return result;
  }
  v28 = 0;
  while (1)
  {
    v29 = *(_QWORD **)v5;
    v30 = *(_QWORD **)(v5 + 8);
    v31 = (_QWORD *)v30[10];
    if (!v31)
    {
      if (v30 == v29)
        goto LABEL_73;
      while (1)
      {
        v31 = (_QWORD *)v30[7];
        if (v31)
          break;
        v30 = (_QWORD *)v30[4];
        if (v30)
          v34 = v30 == v29;
        else
          v34 = 1;
        if (v34)
          goto LABEL_73;
      }
    }
    if ((*((_WORD *)v31 + 14) & 8) == 0)
    {
      while (v31 != v29)
      {
        while (1)
        {
          v32 = (WebCore::Element *)v31[7];
          if (v32)
            break;
          v31 = (_QWORD *)v31[4];
          if (v31)
            v33 = v31 == v29;
          else
            v33 = 1;
          if (v33)
            goto LABEL_73;
        }
        v31 = (_QWORD *)v31[7];
        if ((*((_WORD *)v32 + 14) & 8) != 0)
          goto LABEL_63;
      }
LABEL_73:
      *(_QWORD *)(v5 + 8) = 0;
      v35 = *(_DWORD *)(v5 + 16) + v28;
      *(_DWORD *)(v5 + 16) = v35;
LABEL_74:
      result = 0;
      v36 = v35 + 1;
      goto LABEL_204;
    }
    v32 = (WebCore::Element *)v31;
LABEL_63:
    *(_QWORD *)(v5 + 8) = v32;
    if (WebCore::RadioNodeList::elementMatches(this, v32))
    {
      if (++v28 == v8)
        break;
    }
  }
  result = *(_QWORD *)(v5 + 8);
  v35 = v8 + *(_DWORD *)(v5 + 16);
  *(_DWORD *)(v5 + 16) = v35;
  if (!result)
    goto LABEL_74;
  return result;
}

uint64_t WebCore::CollectionTraversal<(WebCore::CollectionTraversalType)0>::last<WebCore::RadioNodeList>(WebCore::RadioNodeList *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a2 + 88);
  if (v3)
  {
    if ((*(_WORD *)(v3 + 28) & 4) != 0)
    {
      do
      {
        v5 = *(_QWORD *)(v3 + 88);
        if (!v5)
          break;
        v3 = *(_QWORD *)(v3 + 88);
      }
      while ((*(_WORD *)(v5 + 28) & 4) != 0);
    }
    while ((*(_WORD *)(v3 + 28) & 8) == 0)
    {
      if ((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_WORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
        {
          v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
          do
          {
            v6 = *(_QWORD *)(v3 + 88);
            if (!v6)
              break;
            v3 = *(_QWORD *)(v3 + 88);
          }
          while ((*(_WORD *)(v6 + 28) & 4) != 0);
        }
        else
        {
          v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
        }
      }
      else
      {
        v3 = *(_QWORD *)(v3 + 32);
        if (v3 == a2)
          return a2;
      }
      if (!v3)
        return a2;
    }
    if ((WebCore::RadioNodeList::elementMatches(this, (WebCore::Element *)v3) & 1) == 0)
    {
      while ((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) != 0)
      {
        if ((*(_WORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
        {
          v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
          do
          {
            v10 = *(_QWORD *)(v3 + 88);
            if (!v10)
              break;
            v3 = *(_QWORD *)(v3 + 88);
          }
          while ((*(_WORD *)(v10 + 28) & 4) != 0);
        }
        else
        {
          v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
        }
LABEL_24:
        while ((*(_WORD *)(v3 + 28) & 8) == 0)
        {
          if ((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) != 0)
          {
            if ((*(_WORD *)((*(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL) + 0x1C) & 4) != 0)
            {
              v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
              do
              {
                v9 = *(_QWORD *)(v3 + 88);
                if (!v9)
                  break;
                v3 = *(_QWORD *)(v3 + 88);
              }
              while ((*(_WORD *)(v9 + 28) & 4) != 0);
            }
            else
            {
              v3 = *(_QWORD *)(v3 + 48) & 0xFFFFFFFFFFFFLL;
            }
          }
          else
          {
            v3 = *(_QWORD *)(v3 + 32);
            if (v3 == a2)
              return a2;
          }
          if (!v3)
            return a2;
        }
        if ((WebCore::RadioNodeList::elementMatches(this, (WebCore::Element *)v3) & 1) != 0)
          return a2;
      }
      v3 = *(_QWORD *)(v3 + 32);
      if (v3 != a2 && v3 != 0)
        goto LABEL_24;
    }
  }
  return a2;
}

void *WebCore::ResetInputType::formControlType(WebCore::ResetInputType *this)
{
  return &WebCore::resetAtomData;
}

uint64_t WebCore::ResetInputType::handleDOMActivateEvent(uint64_t this, WebCore::Event *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(this + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if ((*(_BYTE *)(v3 + 160) & 0x18) == 0)
    {
      v4 = *(_QWORD *)(v3 + 120);
      if (v4)
      {
        this = *(_QWORD *)(v4 + 8);
        if (this)
        {
          this = WebCore::HTMLFormElement::reset(this);
          *((_DWORD *)a2 + 5) |= 0x80u;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::BaseTextInputType::BaseTextInputType(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = off_1E33D5AC0;
  *(_DWORD *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 12) = a2;
  *(_BYTE *)(a1 + 16) = 0;
  if ((*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)(v8 + 8) = a3;
    *(_BYTE *)(v8 + 32) = 0;
    v10 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = v10 & 0xFFFF000000000000 | v8;
    v11 = v10 & 0xFFFFFFFFFFFFLL;
    if ((v10 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v12 = __ldaxr((unsigned int *)v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, (unsigned int *)v11));
      if (!v13)
      {
        atomic_store(1u, (unsigned int *)v11);
        v14 = *(unsigned int *)(v11 + 28);
        if ((_DWORD)v14)
        {
          v17 = v11;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v11 + 16), (WTF::StringImpl *)(*(_QWORD *)(v11 + 16) + 32 * v14));
          v11 = v17;
        }
        v15 = *(WTF **)(v11 + 16);
        if (v15)
        {
          *(_QWORD *)(v11 + 16) = 0;
          *(_DWORD *)(v11 + 24) = 0;
          v16 = v11;
          WTF::fastFree(v15, v9);
          v11 = v16;
        }
        WTF::fastFree((WTF *)v11, v9);
      }
    }
  }
  v5 = (unsigned int *)(*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFLL);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  *(_BYTE *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)a1 = off_1E33B0068;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = &unk_1E33B0490;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &unk_1E33B04D8;
  *(_QWORD *)(a1 + 56) = &unk_1E33B0500;
  *(_QWORD *)(a1 + 64) = &unk_1E33B0540;
  return a1;
}

WebCore::EventNames **WebCore::SearchInputType::searchEventTimerFired(WebCore::SearchInputType *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  if (v1)
    return WebCore::HTMLInputElement::onSearch(*(WebCore::EventNames ***)(v1 + 8));
  else
    return WebCore::HTMLInputElement::onSearch(0);
}

WTF::StringImpl *WebCore::SearchInputType::attributeChanged(WTF::StringImpl *this, const WebCore::QualifiedName *a2)
{
  WTF::StringImpl *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WebCore::HTMLTextFormControlElement *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v14;

  v2 = this;
  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == WebCore::HTMLNames::resultsAttr)
  {
    this = (WTF::StringImpl *)*((_QWORD *)this + 22);
    if (this)
    {
      v11 = *((_QWORD *)v2 + 3);
      if (v11)
      {
        v12 = *(_QWORD *)(v11 + 8);
        if (v12)
        {
          this = WebCore::updateResultButtonPseudoType(this, (WebCore::SearchFieldResultsButtonElement *)*(__int16 *)(v12 + 228));
          v3 = *(_QWORD *)a2;
        }
      }
    }
  }
  if (v3 == WebCore::HTMLNames::valueAttr || v3 == WebCore::HTMLNames::placeholderAttr)
  {
    v5 = *((_QWORD *)v2 + 3);
    if (v5)
    {
      v6 = *(_QWORD *)(v5 + 8);
      if (v6)
      {
        if ((*(_QWORD *)(v6 + 72) & 0xFFFFFFFFFFFFLL) != 0
          && *(_QWORD *)((*(_QWORD *)(v6 + 72) & 0xFFFFFFFFFFFFLL) + 0x58)
          && (*(_BYTE *)(v6 + 168) & 2) == 0)
        {
          (*(void (**)(WTF::StringImpl **__return_ptr, WTF::StringImpl *))(*(_QWORD *)v2 + 272))(&v14, v2);
          WebCore::HTMLTextFormControlElement::setInnerTextValue((WebCore::HTMLTextFormControlElement *)v6, &v14);
          v8 = v14;
          v14 = 0;
          if (v8)
          {
            if (*(_DWORD *)v8 == 2)
              WTF::StringImpl::destroy(v8, v7);
            else
              *(_DWORD *)v8 -= 2;
          }
          v9 = *((_QWORD *)v2 + 3);
          if (v9)
            v10 = *(WebCore::HTMLTextFormControlElement **)(v9 + 8);
          else
            v10 = 0;
          return (WTF::StringImpl *)WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility(v10);
        }
      }
    }
  }
  return this;
}

WTF::StringImpl *WebCore::updateResultButtonPseudoType(WebCore *this, WebCore::SearchFieldResultsButtonElement *a2)
{
  WTF::StringImpl **v3;
  uint64_t *v5;
  _QWORD v6[2];

  if (!(_DWORD)a2)
  {
    v5 = WebCore::UserAgentParts::webkitSearchResultsDecoration(this);
LABEL_8:
    v3 = (WTF::StringImpl **)v5;
    return WebCore::Element::setUserAgentPart(this, v3);
  }
  if ((a2 & 0x80000000) == 0)
  {
    v5 = WebCore::UserAgentParts::webkitSearchResultsButton(this);
    goto LABEL_8;
  }
  {
    v3 = (WTF::StringImpl **)&WebCore::UserAgentParts::webkitSearchDecoration(void)::webkitSearchDecoration;
  }
  else
  {
    v6[0] = "-webkit-search-decoration";
    v6[1] = 26;
    v3 = (WTF::StringImpl **)WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::UserAgentParts::webkitSearchDecoration(void)::webkitSearchDecoration, (uint64_t)v6);
  }
  return WebCore::Element::setUserAgentPart(this, v3);
}

uint64_t WebCore::SearchInputType::createInputRenderer@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  v7 = bmalloc::api::isoAllocate();
  result = WebCore::RenderBlockFlow::RenderBlockFlow(v7, 32, v6, a2, 4);
  *(_QWORD *)result = off_1E3431020;
  *(_QWORD *)(result + 248) = &unk_1E34318B0;
  *(_BYTE *)(result + 256) = 0;
  *(_QWORD *)(result + 272) = 0;
  *(_QWORD *)(result + 280) = 0;
  *(_QWORD *)(result + 264) = 0;
  *a3 = result;
  return result;
}

uint64_t *WebCore::SearchInputType::formControlType(WebCore::SearchInputType *this)
{
  return &WebCore::searchAtomData;
}

uint64_t WebCore::SearchInputType::needsContainer(WebCore::SearchInputType *this)
{
  return 1;
}

unsigned int *WebCore::SearchInputType::createShadowSubtree(WebCore::SearchInputType *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::StyledElement *v6;
  uint64_t v7;
  WebCore::Quirks *v8;
  void *v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  unsigned int *Ref;
  WTF::StringImpl *v14;
  WTF::StringImpl **v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  WebCore::UserAgentParts *v22;
  uint64_t v23;
  WebCore::UserAgentParts *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unsigned int *result;
  uint64_t *v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  char v31;
  _BYTE v32[8];
  WTF::StringImpl *v33;
  char v34;
  WebCore::UserAgentParts *v35[2];

  WebCore::TextFieldInputType::createShadowSubtree(this);
  v2 = *((_QWORD *)this + 15);
  if (v2)
    *(_DWORD *)(v2 + 24) += 2;
  v3 = *((_QWORD *)this + 16);
  if (v3)
    *(_DWORD *)(v3 + 24) += 2;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  v5 = bmalloc::api::isoAllocate();
  v6 = (WebCore::StyledElement *)v5;
  *(_OWORD *)(v5 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v5 + 24) = 0x141C00000002;
  *(_QWORD *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = v4 + 96;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  ++*(_DWORD *)(v4 + 3324);
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  v7 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v5 + 96) = v7;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)v5 = off_1E33E9478;
  *(_BYTE *)(v5 + 112) = 1;
  v8 = *(WebCore::Quirks **)(v4 + 688);
  if (!v8)
    v8 = (WebCore::Quirks *)WebCore::Document::ensureQuirks((WebCore::Document *)v4);
  if (WebCore::Quirks::shouldHideSearchFieldResultsButton(v8))
    WebCore::StyledElement::setInlineStyleProperty(v6, (WTF::StringImpl *)7, 6u, 0);
  v10 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = v6;
  if (v10)
  {
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v10, v9);
        v6 = (WebCore::StyledElement *)*((_QWORD *)this + 22);
      }
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
  }
  if (v3)
    *(_DWORD *)(v3 + 24) += 2;
  v35[0] = (WebCore::UserAgentParts *)v3;
  WebCore::ContainerNode::insertBefore(v2, (uint64_t *)v6, v35, (uint64_t)v32);
  if (v34)
  {
    v12 = v33;
    v33 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  Ref = (unsigned int *)v35[0];
  v35[0] = 0;
  if (Ref)
  {
    if (Ref[6] == 2)
    {
      if ((*((_WORD *)Ref + 15) & 0x400) == 0)
        Ref = WebCore::Node::removedLastRef((WebCore::Node *)Ref, v11);
    }
    else
    {
      Ref[6] -= 2;
    }
  }
  v14 = (WTF::StringImpl *)*((_QWORD *)this + 22);
  if (*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 228))
  {
    if (*(__int16 *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 228) < 0)
    {
      {
        v15 = (WTF::StringImpl **)&WebCore::UserAgentParts::webkitSearchDecoration(void)::webkitSearchDecoration;
      }
      else
      {
        v35[0] = (WebCore::UserAgentParts *)"-webkit-search-decoration";
        v35[1] = (WebCore::UserAgentParts *)26;
        v15 = (WTF::StringImpl **)WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::UserAgentParts::webkitSearchDecoration(void)::webkitSearchDecoration, (uint64_t)v35);
      }
      goto LABEL_27;
    }
    v28 = WebCore::UserAgentParts::webkitSearchResultsButton((WebCore::UserAgentParts *)Ref);
  }
  else
  {
    v28 = WebCore::UserAgentParts::webkitSearchResultsDecoration((WebCore::UserAgentParts *)Ref);
  }
  v15 = (WTF::StringImpl **)v28;
LABEL_27:
  v16 = *((_QWORD *)v14 + 13);
  if (v16
    && ((v17 = *(_DWORD *)(v16 + 4), (v17 & 1) != 0)
      ? (v18 = *(uint64_t **)(v16 + 40), v19 = *(_DWORD *)(v16 + 52))
      : (v18 = (uint64_t *)(v16 + 32), v19 = v17 >> 5),
        v19))
  {
    v20 = 0;
    while (1)
    {
      v21 = *v18;
      if (*v18 == WebCore::HTMLNames::useragentpartAttr
        || *(_QWORD *)(v21 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
        && *(_QWORD *)(v21 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
      {
        break;
      }
      ++v20;
      v18 += 2;
      if (v19 == v20)
        goto LABEL_35;
    }
  }
  else
  {
LABEL_35:
    v20 = 0xFFFFFFFFLL;
  }
  WebCore::Element::setAttributeInternal(v14, v20, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, v15, 0);
  WebCore::SearchFieldCancelButtonElement::create(*(WebCore::SearchFieldCancelButtonElement **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8), (uint64_t *)v35);
  v22 = v35[0];
  v23 = *((_QWORD *)this + 23);
  *((WebCore::UserAgentParts **)this + 23) = v35[0];
  if (v23)
  {
    if (*(_DWORD *)(v23 + 24) == 2)
    {
      if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v23, v22);
        v22 = (WebCore::UserAgentParts *)*((_QWORD *)this + 23);
      }
    }
    else
    {
      *(_DWORD *)(v23 + 24) -= 2;
    }
  }
  v24 = *(WebCore::UserAgentParts **)(v3 + 56);
  if (v24)
    *((_DWORD *)v24 + 6) += 2;
  v35[0] = v24;
  WebCore::ContainerNode::insertBefore(v2, (uint64_t *)v22, v35, (uint64_t)&v29);
  if (v31)
  {
    v26 = v30;
    v30 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v25);
      else
        *(_DWORD *)v26 -= 2;
    }
  }
  result = (unsigned int *)v35[0];
  v35[0] = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, v25);
    }
    else
    {
      result[6] -= 2;
    }
  }
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v3, v25);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v2, v25);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  return result;
}

unsigned int *WebCore::TextFieldInputType::createShadowSubtree(WebCore::TextFieldInputType *this)
{
  uint64_t v2;
  void (**v3)(WebCore::RenderThemeIOS *__hidden);
  int v4;
  void (**v5)(WebCore::RenderThemeIOS *__hidden);
  int v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  void *v11;
  uint64_t (*v12)();
  char v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const WebCore::Style::RuleSet *v21;
  WTF::String *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *result;
  void *v26;
  uint64_t v27;
  WebCore::HTMLTextFormControlElement *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WebCore::HTMLTextFormControlElement *v32;
  uint64_t v33;
  WebCore::HTMLTextFormControlElement *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WebCore::HTMLTextFormControlElement *v38;
  void *v39;
  const WebCore::Style::RuleSet *v40;
  WTF::String *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  WTF::StringImpl *v46;
  const WebCore::Style::RuleSet *v47;
  WTF::String *v48;
  uint64_t v49;
  WTF::StringImpl *v50;
  WebCore::UserAgentParts *Ref;
  void *v52;
  WebCore::Element *v53;
  uint64_t *v54;
  unsigned int v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  {
    v3 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
  }
  else
  {
    v56 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
    *(_OWORD *)(v56 + 40) = 0u;
    v3 = &off_1E335BC30;
    *(_OWORD *)(v56 + 24) = 0u;
    *(_QWORD *)v56 = &off_1E335BC30;
  }
  v4 = ((uint64_t (*)(uint64_t *))v3[50])(&WebCore::RenderTheme::singleton(void)::theme);
  {
    v5 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
  }
  else
  {
    WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
    unk_1ECE88AD0 = 0u;
    unk_1ECE88AC0 = 0u;
    v5 = &off_1E335BC30;
    WebCore::RenderTheme::singleton(void)::theme = (uint64_t)&off_1E335BC30;
  }
  v6 = ((uint64_t (*)(uint64_t *, _QWORD))v5[51])(&WebCore::RenderTheme::singleton(void)::theme, *(_QWORD *)(*((_QWORD *)this + 3) + 8));
  v7 = *((_QWORD *)this + 3);
  v8 = *(_QWORD *)(v7 + 8);
  if ((*(_BYTE *)(v8 + 160) & 0x18) != 0)
  {
    v9 = 0;
    goto LABEL_9;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)(v8 + 112) + 288))(v8 + 112)
    || (*(_BYTE *)(v8 + 160) & 0x20) == 0)
  {
    v7 = *((_QWORD *)this + 3);
    v9 = (*(_WORD *)(*(_QWORD *)(v7 + 8) + 230) & 0x3800) != 0;
LABEL_9:
    v10 = *(_QWORD *)(v7 + 8);
    goto LABEL_10;
  }
  v9 = 0;
  v7 = *((_QWORD *)this + 3);
  if (v7)
    goto LABEL_9;
  v10 = 0;
LABEL_10:
  WebCore::HTMLInputElement::dataList(v10, &v62);
  if (v62)
    v12 = WTF::RefPtr<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::unspecifiedBoolTypeInstance;
  else
    v12 = 0;
  if (v62)
  {
    if (*((_DWORD *)v62 + 6) == 2)
    {
      if ((*((_WORD *)v62 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v62, v11);
    }
    else
    {
      *((_DWORD *)v62 + 6) -= 2;
    }
  }
  v13 = 1;
  if (((v4 | v6 | v9) & 1) == 0 && !v12)
    v13 = (*(uint64_t (**)(WebCore::TextFieldInputType *))(*(_QWORD *)this + 936))(this);
  v14 = *((_QWORD *)this + 3);
  if (v14)
    v15 = *(_QWORD *)(v14 + 8);
  else
    v15 = 0;
  if ((*(_WORD *)(v15 + 230) & 0x3800) == 0x1800 || (*(_BYTE *)(v15 + 160) & 0x18) != 0)
  {
    v16 = 0;
  }
  else if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v15 + 112) + 288))(v15 + 112))
  {
    v16 = (*(_BYTE *)(v15 + 160) & 0x20) == 0;
  }
  else
  {
    v16 = 1;
  }
  v17 = bmalloc::api::isoAllocate();
  v18 = v17;
  *(_OWORD *)(v17 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v17 + 24) = 0x141C00000002;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 40) = v2 + 96;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  ++*(_DWORD *)(v2 + 3324);
  *(_QWORD *)(v17 + 80) = 0;
  *(_QWORD *)(v17 + 88) = 0;
  v19 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v17 + 96) = v19;
  *(_QWORD *)(v17 + 104) = 0;
  *(_QWORD *)v17 = off_1E33E8A98;
  WebCore::TextControlInnerTextElement::updateInnerTextElementEditabilityImpl((WebCore::TextControlInnerTextElement *)v17, v16, 1);
  *(_DWORD *)(v18 + 24) += 2;
  v23 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = v18;
  if (v23)
  {
    if (*(_DWORD *)(v23 + 24) == 2)
    {
      if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v23, v20);
    }
    else
    {
      *(_DWORD *)(v23 + 24) -= 2;
    }
  }
  if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 72) & 0xFFFFFFFFFFFFLL) != 0)
    v24 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
  else
    v24 = 0;
  *(_DWORD *)(v24 + 24) += 2;
  if ((v13 & 1) != 0)
  {
    WebCore::TextFieldInputType::createContainer(this, 0);
    WebCore::TextFieldInputType::updatePlaceholderText(this);
    v33 = *((_QWORD *)this + 3);
    if (v33)
    {
      v34 = *(WebCore::HTMLTextFormControlElement **)(v33 + 8);
      if ((*((_BYTE *)v34 + 168) & 2) == 0)
      {
LABEL_62:
        (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::TextFieldInputType *))(*(_QWORD *)this + 272))(&v62, this);
        WebCore::HTMLTextFormControlElement::setInnerTextValue(v34, &v62);
        v36 = v62;
        v62 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, v35);
          else
            *(_DWORD *)v36 -= 2;
        }
        v37 = *((_QWORD *)this + 3);
        if (v37)
          v38 = *(WebCore::HTMLTextFormControlElement **)(v37 + 8);
        else
          v38 = 0;
        WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility(v38);
      }
    }
    else if ((MEMORY[0xA8] & 2) == 0)
    {
      v34 = 0;
      goto LABEL_62;
    }
    if (v4)
    {
      WebCore::SpinButtonElement::create(v2, (uint64_t)this + 32, (uint64_t *)&v62);
      v42 = v62;
      *((_DWORD *)v62 + 6) += 2;
      v43 = *((_QWORD *)this + 19);
      *((_QWORD *)this + 19) = v42;
      if (v43)
      {
        if (*(_DWORD *)(v43 + 24) == 2)
        {
          if ((*(_WORD *)(v43 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v43, v39);
        }
        else
        {
          *(_DWORD *)(v43 + 24) -= 2;
        }
      }
      v44 = *((_QWORD *)this + 15);
      if (v44)
      {
        *(_DWORD *)(v44 + 24) += 2;
        WebCore::ContainerNode::parserAppendChild(v44, v42, v40, v41);
        if (*(_DWORD *)(v44 + 24) == 2)
        {
          if ((*(_WORD *)(v44 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v44, v45);
        }
        else
        {
          *(_DWORD *)(v44 + 24) -= 2;
        }
      }
      else
      {
        WebCore::ContainerNode::parserAppendChild(0, v42, v40, v41);
      }
      if (*((_DWORD *)v42 + 6) == 2)
      {
        if ((*((_WORD *)v42 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v42, v45);
      }
      else
      {
        *((_DWORD *)v42 + 6) -= 2;
      }
    }
    if (v6)
    {
      WebCore::HTMLDivElement::create((WebCore::HTMLDivElement *)v2, &v62);
      v46 = v62;
      *((_DWORD *)v62 + 6) += 2;
      v61 = v46;
      WTF::RefPtr<WebCore::Element,WTF::RawPtrTraits<WebCore::Element>,WTF::DefaultRefDerefTraits<WebCore::Element>>::operator=((uint64_t *)this + 20, (uint64_t *)&v61);
      WTF::Ref<WebCore::HTMLProgressElement,WTF::RawPtrTraits<WebCore::HTMLProgressElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLProgressElement>>::~Ref(&v61);
      v49 = *((_QWORD *)this + 15);
      if (v49)
      {
        *(_DWORD *)(v49 + 24) += 2;
        WebCore::ContainerNode::parserAppendChild(v49, v62, v47, v48);
        v58 = 0;
        v59 = 0;
        v60 = 0;
        Ref = (WebCore::UserAgentParts *)WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v58, v50);
        if (*(_DWORD *)(v49 + 24) == 2)
        {
          if ((*(_WORD *)(v49 + 30) & 0x400) == 0)
            Ref = (WebCore::UserAgentParts *)WebCore::Node::removedLastRef((WebCore::Node *)v49, v52);
        }
        else
        {
          *(_DWORD *)(v49 + 24) -= 2;
        }
      }
      else
      {
        WebCore::ContainerNode::parserAppendChild(0, v62, v47, v48);
        v58 = 0;
        v59 = 0;
        v60 = 0;
        Ref = (WebCore::UserAgentParts *)WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)&v58, v57);
      }
      v53 = v62;
      v54 = WebCore::UserAgentParts::webkitCapsLockIndicator(Ref);
      WebCore::Element::setUserAgentPart(v53, (WTF::StringImpl **)v54);
      if (WebCore::TextFieldInputType::shouldDrawCapsLockIndicator(this))
        v55 = 367;
      else
        v55 = 6;
      WebCore::StyledElement::setInlineStyleProperty(v62, (WTF::StringImpl *)7, v55, 1);
      WTF::Ref<WebCore::HTMLProgressElement,WTF::RawPtrTraits<WebCore::HTMLProgressElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLProgressElement>>::~Ref(&v62);
    }
    WebCore::TextFieldInputType::updateAutoFillButton((uint64_t)this);
    result = WebCore::TextFieldInputType::dataListMayHaveChanged((unsigned int *)this);
    goto LABEL_41;
  }
  WebCore::ContainerNode::parserAppendChild(v24, (WebCore::Node *)v18, v21, v22);
  result = (unsigned int *)WebCore::TextFieldInputType::updatePlaceholderText(this);
  v27 = *((_QWORD *)this + 3);
  if (v27)
  {
    v28 = *(WebCore::HTMLTextFormControlElement **)(v27 + 8);
    if ((*((_BYTE *)v28 + 168) & 2) != 0)
      goto LABEL_41;
  }
  else
  {
    if ((MEMORY[0xA8] & 2) != 0)
      goto LABEL_41;
    v28 = 0;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::TextFieldInputType *))(*(_QWORD *)this + 272))(&v62, this);
  WebCore::HTMLTextFormControlElement::setInnerTextValue(v28, &v62);
  v30 = v62;
  v62 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, v29);
    else
      *(_DWORD *)v30 -= 2;
  }
  v31 = *((_QWORD *)this + 3);
  if (v31)
    v32 = *(WebCore::HTMLTextFormControlElement **)(v31 + 8);
  else
    v32 = 0;
  result = (unsigned int *)WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility(v32);
LABEL_41:
  if (*(_DWORD *)(v24 + 24) == 2)
  {
    if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v24, v26);
  }
  else
  {
    *(_DWORD *)(v24 + 24) -= 2;
  }
  if (*(_DWORD *)(v18 + 24) == 2)
  {
    if ((*(_WORD *)(v18 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v18, v26);
  }
  else
  {
    *(_DWORD *)(v18 + 24) -= 2;
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v2, v26);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::TextFieldInputType::containerElement(WebCore::TextFieldInputType *this)
{
  return *((_QWORD *)this + 15);
}

uint64_t WebCore::TextFieldInputType::innerBlockElement(WebCore::TextFieldInputType *this)
{
  return *((_QWORD *)this + 16);
}

uint64_t WebCore::SearchInputType::resultsButtonElement(WebCore::SearchInputType *this)
{
  return *((_QWORD *)this + 22);
}

uint64_t WebCore::SearchInputType::cancelButtonElement(WebCore::SearchInputType *this)
{
  return *((_QWORD *)this + 23);
}

uint64_t WebCore::SearchInputType::handleKeydownEvent(WebCore::SearchInputType *this, WebCore::KeyboardEvent *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _BYTE v10[8];
  WTF::StringImpl *v11;
  char v12;

  v4 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_BYTE *)(v4 + 160) & 0x18) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v4 + 112) + 288))(v4 + 112)
    && (*(_BYTE *)(v4 + 160) & 0x20) != 0
    || !MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "U+001B", 6))
  {
    WebCore::TextFieldInputType::handleKeydownEvent(this, a2);
  }
  else
  {
    v5 = *((_QWORD *)this + 3);
    if (v5)
      v6 = *(_QWORD *)(v5 + 8);
    else
      v6 = 0;
    *(_DWORD *)(v6 + 24) += 2;
    WebCore::HTMLInputElement::setValue(v6, MEMORY[0x1E0CBF738], (const WTF::StringImpl *)1, 0, (uint64_t)v10);
    if (v12)
    {
      v8 = v11;
      v11 = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, v7);
        else
          *(_DWORD *)v8 -= 2;
      }
    }
    if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8) + 680) + 696) & 1) != 0)
      WebCore::HTMLInputElement::onSearch((WebCore::EventNames **)v6);
    *((_DWORD *)a2 + 5) |= 0x80u;
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v7);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  return 1;
}

uint64_t WebCore::TextFieldInputType::handleKeydownEvent(WebCore::TextFieldInputType *this, WebCore::KeyboardEvent *a2)
{
  uint64_t v4;
  WebCore::Element *v5;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  WebCore::Document *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  _QWORD *v17;
  WebCore::Document *v18;
  WebCore::Editor *v19;
  void *v20;
  WebCore::Editor *v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  WebCore::Document *v25;
  unsigned int *v26;
  _QWORD *v27;

  v4 = *((_QWORD *)this + 3);
  if (v4)
    v5 = *(WebCore::Element **)(v4 + 8);
  else
    v5 = 0;
  if ((*((_BYTE *)v5 + 54) & 2) != 0 && WebCore::Element::isUserActionElementFocused(v5))
  {
    if (*((_QWORD *)this + 14))
    {
      v24 = (_QWORD *)((char *)a2 + 112);
      if ((MEMORY[0x19AEA53F4](*((_QWORD *)a2 + 14), "Enter", 5) & 1) != 0
        || (MEMORY[0x19AEA53F4](*v24, "Up", 2) & 1) != 0
        || MEMORY[0x19AEA53F4](*v24, "Down", 4))
      {
        (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 14) + 24))(*((_QWORD *)this + 14), (char *)a2 + 112);
        *((_DWORD *)a2 + 5) |= 0x80u;
      }
    }
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = (unsigned int *)(v8 + 8);
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 + 1, v9));
        v11 = *(WebCore::Document **)(v8 + 296);
        v12 = *((_QWORD *)v11 + 382);
        if (!v12)
        {
          v26 = v9;
          v18 = v11;
          v19 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
          WebCore::Editor::Editor(v19, v18);
          v21 = (WebCore::Editor *)*((_QWORD *)v18 + 382);
          v25 = v18;
          *((_QWORD *)v18 + 382) = v19;
          if (v21)
          {
            WebCore::Editor::~Editor(v21, v20);
            if (*(_DWORD *)v22)
            {
              *(_QWORD *)(v22 + 496) = 0;
              *(_OWORD *)(v22 + 464) = 0u;
              *(_OWORD *)(v22 + 480) = 0u;
              *(_OWORD *)(v22 + 432) = 0u;
              *(_OWORD *)(v22 + 448) = 0u;
              *(_OWORD *)(v22 + 400) = 0u;
              *(_OWORD *)(v22 + 416) = 0u;
              *(_OWORD *)(v22 + 368) = 0u;
              *(_OWORD *)(v22 + 384) = 0u;
              *(_OWORD *)(v22 + 336) = 0u;
              *(_OWORD *)(v22 + 352) = 0u;
              *(_OWORD *)(v22 + 304) = 0u;
              *(_OWORD *)(v22 + 320) = 0u;
              *(_OWORD *)(v22 + 272) = 0u;
              *(_OWORD *)(v22 + 288) = 0u;
              *(_OWORD *)(v22 + 240) = 0u;
              *(_OWORD *)(v22 + 256) = 0u;
              *(_OWORD *)(v22 + 208) = 0u;
              *(_OWORD *)(v22 + 224) = 0u;
              *(_OWORD *)(v22 + 176) = 0u;
              *(_OWORD *)(v22 + 192) = 0u;
              *(_OWORD *)(v22 + 144) = 0u;
              *(_OWORD *)(v22 + 160) = 0u;
              *(_OWORD *)(v22 + 112) = 0u;
              *(_OWORD *)(v22 + 128) = 0u;
              *(_OWORD *)(v22 + 80) = 0u;
              *(_OWORD *)(v22 + 96) = 0u;
              *(_OWORD *)(v22 + 48) = 0u;
              *(_OWORD *)(v22 + 64) = 0u;
              *(_OWORD *)(v22 + 16) = 0u;
              *(_OWORD *)(v22 + 32) = 0u;
              *(_OWORD *)v22 = 0u;
            }
            else
            {
              WTF::fastFree((WTF *)v22, v23);
            }
          }
          v9 = v26;
          v12 = *((_QWORD *)v25 + 382);
        }
        v13 = *(_QWORD *)(v12 + 8);
        if (v13)
        {
          v14 = *(_QWORD *)(v13 + 8);
          if (v14)
          {
            if ((*(unsigned int (**)(uint64_t, _QWORD, WebCore::KeyboardEvent *))(*(_QWORD *)v14 + 480))(v14, *(_QWORD *)(*((_QWORD *)this + 3) + 8), a2))
            {
              *((_DWORD *)a2 + 5) |= 0x80u;
            }
          }
        }
        do
        {
          v15 = __ldaxr(v9);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v9));
        if (!v16)
        {
          atomic_store(1u, v9);
          v17 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
          *v17 = off_1E31FE290;
          v17[1] = v9;
          v27 = v17;
          WTF::ensureOnMainThread();
          if (v27)
            (*(void (**)(_QWORD *))(*v27 + 8))(v27);
        }
      }
    }
  }
  return 1;
}

unsigned int *WebCore::SearchInputType::removeShadowSubtree(unsigned int **this, void *a2)
{
  void *v3;
  unsigned int *v4;
  unsigned int *result;

  WebCore::TextFieldInputType::removeShadowSubtree((WebCore::TextFieldInputType *)this, a2);
  v4 = this[22];
  this[22] = 0;
  if (v4)
  {
    if (v4[6] == 2)
    {
      if ((*((_WORD *)v4 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4, v3);
    }
    else
    {
      v4[6] -= 2;
    }
  }
  result = this[23];
  this[23] = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, v3);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

WebCore::TextFieldInputType *WebCore::SearchInputType::didSetValueByUserEdit(WebCore::SearchInputType *this)
{
  WebCore::RenderSearchField *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unsigned int v14;
  double v15;
  double v16;
  double v17;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;

  if (*((_QWORD *)this + 23))
  {
    v2 = (WebCore::RenderSearchField *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 64) & 0xFFFFFFFFFFFFLL);
    if (v2)
    {
      if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195CC11D0);
      }
      if (*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x2E) == 32)
      {
        ++*(_DWORD *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
        WebCore::RenderSearchField::updateCancelButtonVisibility(v2);
        v3 = *((_DWORD *)v2 + 4);
        if (!v3)
        {
          __break(0xC471u);
          JUMPOUT(0x195CC11F0);
        }
        *((_DWORD *)v2 + 4) = v3 - 1;
      }
    }
  }
  v4 = *((_QWORD *)this + 3);
  v5 = *(_QWORD *)(v4 + 8);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 40) + 8) + 680) + 696) & 1) != 0)
  {
    v6 = *(_QWORD *)(v5 + 104);
    if (v6)
    {
      v7 = *(_DWORD *)(v6 + 4);
      if ((v7 & 1) == 0)
      {
        v8 = (uint64_t *)(v6 + 32);
        LODWORD(v9) = v7 >> 5;
        if (!(_DWORD)v9)
          return WebCore::TextFieldInputType::didSetValueByUserEdit(this);
LABEL_13:
        v9 = v9;
        while (1)
        {
          v10 = *v8;
          if (*v8 == WebCore::HTMLNames::incrementalAttr
            || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::incrementalAttr + 24)
            && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::incrementalAttr + 32))
          {
            break;
          }
          v8 += 2;
          if (!--v9)
            return WebCore::TextFieldInputType::didSetValueByUserEdit(this);
        }
        if (v4)
          v11 = *(_QWORD *)(v4 + 8);
        else
          v11 = 0;
        (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v11 + 1408))(&v21);
        v12 = v21;
        if (v21)
        {
          WebCore::innerTextValueFrom((WebCore *)&v20, (unint64_t)v21);
          v19 = v21;
          v21 = 0;
          if (v19)
          {
            if (*((_DWORD *)v19 + 6) == 2)
            {
              if ((*((_WORD *)v19 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v19, v12);
            }
            else
            {
              *((_DWORD *)v19 + 6) -= 2;
            }
          }
          v13 = v20;
          if (!v20)
            goto LABEL_30;
        }
        else
        {
          v13 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
          if (*MEMORY[0x1E0CBF738])
            *(_DWORD *)v13 += 2;
          if (!v13)
            goto LABEL_30;
        }
        v14 = *((_DWORD *)v13 + 1);
        if (*(_DWORD *)v13 == 2)
        {
          v13 = (WTF::StringImpl *)WTF::StringImpl::destroy(v13, v12);
          if (v14)
            goto LABEL_28;
        }
        else
        {
          *(_DWORD *)v13 -= 2;
          if (v14)
          {
LABEL_28:
            v15 = fmax((double)v14 * -0.1 + 0.6, 0.2);
            *((_QWORD *)this + 27) = 0;
            WTF::MonotonicTime::now(v13);
LABEL_31:
            WebCore::TimerBase::setNextFireTime((uint64_t)this + 192, v15 + v16);
            return WebCore::TextFieldInputType::didSetValueByUserEdit(this);
          }
        }
LABEL_30:
        *((_QWORD *)this + 27) = 0;
        WTF::MonotonicTime::now(v13);
        v15 = v17;
        v16 = 0.0;
        goto LABEL_31;
      }
      v8 = *(uint64_t **)(v6 + 40);
      LODWORD(v9) = *(_DWORD *)(v6 + 52);
      if ((_DWORD)v9)
        goto LABEL_13;
    }
  }
  return WebCore::TextFieldInputType::didSetValueByUserEdit(this);
}

WebCore::TextFieldInputType *WebCore::TextFieldInputType::didSetValueByUserEdit(WebCore::TextFieldInputType *this)
{
  uint64_t v2;
  WebCore::TextFieldInputType *result;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  WebCore::Document *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  WebCore::Node *v17;
  WebCore::Node *v18;
  WebCore::Document *v19;
  WebCore::Editor *v20;
  void *v21;
  WebCore::Editor *v22;
  uint64_t v23;
  void *v24;
  WebCore::Document *v25;
  unsigned int *v26;
  WebCore::Node *v27;

  v2 = *((_QWORD *)this + 3);
  if (v2)
    result = *(WebCore::TextFieldInputType **)(v2 + 8);
  else
    result = 0;
  if ((*((_BYTE *)result + 54) & 2) != 0)
  {
    result = (WebCore::TextFieldInputType *)WebCore::Element::isUserActionElementFocused(result);
    if ((_DWORD)result)
    {
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 528);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = (unsigned int *)(v5 + 8);
          do
            v7 = __ldaxr(v6);
          while (__stlxr(v7 + 1, v6));
          v8 = *(WebCore::Document **)(v5 + 296);
          v9 = *((_QWORD *)v8 + 382);
          if (!v9)
          {
            v26 = v6;
            v19 = v8;
            v20 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
            WebCore::Editor::Editor(v20, v19);
            v22 = (WebCore::Editor *)*((_QWORD *)v19 + 382);
            v25 = v19;
            *((_QWORD *)v19 + 382) = v20;
            if (v22)
            {
              WebCore::Editor::~Editor(v22, v21);
              if (*(_DWORD *)v23)
              {
                *(_QWORD *)(v23 + 496) = 0;
                *(_OWORD *)(v23 + 464) = 0u;
                *(_OWORD *)(v23 + 480) = 0u;
                *(_OWORD *)(v23 + 432) = 0u;
                *(_OWORD *)(v23 + 448) = 0u;
                *(_OWORD *)(v23 + 400) = 0u;
                *(_OWORD *)(v23 + 416) = 0u;
                *(_OWORD *)(v23 + 368) = 0u;
                *(_OWORD *)(v23 + 384) = 0u;
                *(_OWORD *)(v23 + 336) = 0u;
                *(_OWORD *)(v23 + 352) = 0u;
                *(_OWORD *)(v23 + 304) = 0u;
                *(_OWORD *)(v23 + 320) = 0u;
                *(_OWORD *)(v23 + 272) = 0u;
                *(_OWORD *)(v23 + 288) = 0u;
                *(_OWORD *)(v23 + 240) = 0u;
                *(_OWORD *)(v23 + 256) = 0u;
                *(_OWORD *)(v23 + 208) = 0u;
                *(_OWORD *)(v23 + 224) = 0u;
                *(_OWORD *)(v23 + 176) = 0u;
                *(_OWORD *)(v23 + 192) = 0u;
                *(_OWORD *)(v23 + 144) = 0u;
                *(_OWORD *)(v23 + 160) = 0u;
                *(_OWORD *)(v23 + 112) = 0u;
                *(_OWORD *)(v23 + 128) = 0u;
                *(_OWORD *)(v23 + 80) = 0u;
                *(_OWORD *)(v23 + 96) = 0u;
                *(_OWORD *)(v23 + 48) = 0u;
                *(_OWORD *)(v23 + 64) = 0u;
                *(_OWORD *)(v23 + 16) = 0u;
                *(_OWORD *)(v23 + 32) = 0u;
                *(_OWORD *)v23 = 0u;
              }
              else
              {
                WTF::fastFree((WTF *)v23, v24);
              }
            }
            v6 = v26;
            v9 = *((_QWORD *)v25 + 382);
          }
          v10 = *(_QWORD *)(v9 + 8);
          if (v10)
          {
            v11 = *(_QWORD *)(v10 + 8);
            if (v11)
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v11 + 472))(v11, *(_QWORD *)(*((_QWORD *)this + 3) + 8));
          }
          do
          {
            v12 = __ldaxr(v6);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v6));
          if (!v13)
          {
            atomic_store(1u, v6);
            v17 = (WebCore::Node *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v17 = off_1E31FE290;
            *((_QWORD *)v17 + 1) = v6;
            v27 = v17;
            WTF::ensureOnMainThread();
            v18 = v27;
            v27 = 0;
            if (v18)
              (*(void (**)(WebCore::Node *))(*(_QWORD *)v18 + 8))(v18);
          }
        }
      }
      v14 = *((_QWORD *)this + 3);
      if (v14)
        v15 = *(_QWORD *)(v14 + 8);
      else
        v15 = 0;
      WebCore::HTMLInputElement::dataList(v15, &v27);
      result = v27;
      if (v27)
      {
        if (*((_DWORD *)v27 + 6) == 2)
        {
          if ((*((_WORD *)v27 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v27, v16);
        }
        else
        {
          *((_DWORD *)v27 + 6) -= 2;
        }
        return WebCore::TextFieldInputType::displaySuggestions(this, 2);
      }
    }
  }
  return result;
}

BOOL WebCore::SearchInputType::sizeShouldIncludeDecoration(WebCore::SearchInputType *this, int a2, int *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  _DWORD v15[2];

  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  *a3 = *(_DWORD *)(v3 + 224);
  v4 = *(_QWORD *)(v3 + 104);
  if (!v4)
    return 0;
  v6 = *(_DWORD *)(v4 + 4);
  if ((v6 & 1) != 0)
  {
    v7 = *(uint64_t **)(v4 + 40);
    LODWORD(v8) = *(_DWORD *)(v4 + 52);
  }
  else
  {
    v7 = (uint64_t *)(v4 + 32);
    LODWORD(v8) = v6 >> 5;
  }
  if (!(_DWORD)v8)
    return 0;
  v8 = v8;
  while (1)
  {
    v9 = *v7;
    if (*v7 == WebCore::HTMLNames::sizeAttr
      || *(_QWORD *)(v9 + 24) == *(_QWORD *)(WebCore::HTMLNames::sizeAttr + 24)
      && *(_QWORD *)(v9 + 32) == *(_QWORD *)(WebCore::HTMLNames::sizeAttr + 32))
    {
      break;
    }
    v7 += 2;
    if (!--v8)
      return 0;
  }
  v11 = *(_QWORD *)WebCore::Element::attributeWithoutSynchronization(v3, &WebCore::HTMLNames::sizeAttr);
  if (v11)
  {
    v12 = *(uint64_t **)(v11 + 8);
    v13 = *(unsigned int *)(v11 + 4) | ((unint64_t)((*(_DWORD *)(v11 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v12 = 0;
    v13 = 0x100000000;
  }
  WebCore::parseHTMLNonNegativeInteger(v12, v13, v15);
  return !v15[1] && v15[0] == *a3;
}

float WebCore::SearchInputType::decorationWidth(WebCore::SearchInputType *this)
{
  uint64_t v1;
  float result;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;

  v1 = *((_QWORD *)this + 22);
  result = 0.0;
  if (v1)
  {
    v3 = *(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL;
    if (v3)
    {
      if ((*(_BYTE *)(v3 + 45) & 2) != 0)
        v3 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8);
      v4 = ((*(_DWORD *)(v3 + 124) >> 13) & 6) - 2;
      v5 = *(_QWORD *)(*(_QWORD *)(v3 + 88) + 8);
      v6 = v4 >= 4;
      v7 = v5 + 12;
      v8 = v5 + 4;
      if (!v6)
        v8 = v7;
      if (*(_BYTE *)(v8 + 6))
        result = *(float *)v8 + 0.0;
      else
        result = (float)*(int *)v8;
    }
  }
  v9 = *((_QWORD *)this + 23);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 64) & 0xFFFFFFFFFFFFLL;
    if (v10)
    {
      if ((*(_BYTE *)(v10 + 45) & 2) != 0)
        v10 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 8);
      v11 = ((*(_DWORD *)(v10 + 124) >> 13) & 6) - 2;
      v12 = *(_QWORD *)(*(_QWORD *)(v10 + 88) + 8);
      v6 = v11 >= 4;
      v13 = v12 + 12;
      v14 = v12 + 4;
      if (!v6)
        v14 = v13;
      if (*(_BYTE *)(v14 + 6))
        v15 = *(float *)v14;
      else
        v15 = (float)*(int *)v14;
      return result + v15;
    }
  }
  return result;
}

WTF::MonotonicTime *WebCore::SearchInputType::setValue(_QWORD *a1, WTF::StringImpl *a2, int a3, int a4, int a5)
{
  _BOOL4 v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  _DWORD *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  WTF::MonotonicTime *result;
  BOOL v24;
  WTF::StringImpl *v25;

  if (!a3)
  {
    v11 = 0;
    goto LABEL_31;
  }
  if (*(_QWORD *)a2)
    v10 = *(_DWORD *)(*(_QWORD *)a2 + 4) == 0;
  else
    v10 = 1;
  v12 = a1[3];
  if (v12)
    v13 = *(_QWORD **)(v12 + 8);
  else
    v13 = 0;
  v14 = (_DWORD *)v13[30];
  if (v14[3] != 64)
  {
    v15 = (WTF::StringImpl *)v13[27];
    if (v15)
    {
      *(_DWORD *)v15 += 2;
      goto LABEL_29;
    }
    v16 = v13[13];
    if (v16)
    {
      v17 = *(_DWORD *)(v16 + 4);
      if ((v17 & 1) != 0)
      {
        v18 = *(_QWORD *)(v16 + 40);
        LODWORD(v19) = *(_DWORD *)(v16 + 52);
        if ((_DWORD)v19)
        {
LABEL_13:
          v19 = v19;
          v20 = (_QWORD *)(v18 + 8);
          while (1)
          {
            v21 = *(v20 - 1);
            if (v21 == WebCore::HTMLNames::valueAttr
              || *(_QWORD *)(v21 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
              && *(_QWORD *)(v21 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
            {
              goto LABEL_22;
            }
            v20 += 2;
            if (!--v19)
            {
              v20 = (_QWORD *)MEMORY[0x1E0CBF2F8];
              goto LABEL_22;
            }
          }
        }
      }
      else
      {
        v18 = v16 + 32;
        LODWORD(v19) = v17 >> 5;
        if ((_DWORD)v19)
          goto LABEL_13;
      }
    }
    v20 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_22:
    if (!*v20)
    {
LABEL_23:
      (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v14 + 64))(&v25);
      goto LABEL_24;
    }
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v14 + 296))(&v25);
    v15 = v25;
    if (!v25)
    {
      v25 = 0;
      v14 = (_DWORD *)v13[30];
      goto LABEL_23;
    }
LABEL_29:
    v22 = *(_DWORD *)v15;
    v11 = v10 ^ (*((_DWORD *)v15 + 1) == 0);
    v25 = 0;
    if (v22 == 2)
      WTF::StringImpl::destroy(v15, a2);
    else
      *(_DWORD *)v15 = v22 - 2;
    goto LABEL_31;
  }
  WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v14, &v25);
LABEL_24:
  v15 = v25;
  if (v25)
    goto LABEL_29;
  v11 = !v10;
LABEL_31:
  WebCore::TextFieldInputType::setValue(a1, a2, a3, a4, a5);
  result = (WTF::MonotonicTime *)a1[23];
  if (result)
    v24 = v11 == 0;
  else
    v24 = 1;
  if (!v24)
    return WebCore::Element::invalidateStyleInternal(result);
  return result;
}

void WebCore::TextFieldInputType::setValue(_QWORD *a1, WTF::StringImpl *a2, int a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WebCore::HTMLTextFormControlElement *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WebCore::HTMLTextFormControlElement *v18;
  WTF::StringImpl *v19;
  unsigned int v20;
  WTF *v21;
  WTF::StringImpl *v22;
  const WTF::StringImpl *v23;
  const WTF::StringImpl *v24;
  char v25;
  void *v26;
  WTF::StringImpl *v27;
  char v28;
  WTF::StringImpl *v29[2];
  const WTF::StringImpl *v30;

  v10 = a1[3];
  if (v10)
    v11 = *(_QWORD *)(v10 + 8);
  else
    v11 = 0;
  *(_DWORD *)(v11 + 24) += 2;
  WebCore::InputType::setValue((uint64_t)a1, a2, a3, 0);
  if ((a3 & 1) != 0)
    goto LABEL_4;
  if (!a4)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(a1[3] + 8) + 1408))(v29);
    if (v29[0])
    {
      WebCore::innerTextValueFrom((WebCore *)&v30, (unint64_t)v29[0]);
      v27 = v29[0];
      v29[0] = 0;
      if (v27)
      {
        if (*((_DWORD *)v27 + 6) == 2)
        {
          if ((*((_WORD *)v27 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v27, v26);
        }
        else
        {
          *((_DWORD *)v27 + 6) -= 2;
        }
      }
      v24 = v30;
    }
    else
    {
      v24 = (const WTF::StringImpl *)*MEMORY[0x1E0CBF738];
      if (*MEMORY[0x1E0CBF738])
        *(_DWORD *)v24 += 2;
    }
    v25 = WTF::equal(*(WTF **)a2, v24, v23);
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
      {
        v28 = v25;
        WTF::StringImpl::destroy(v24, v12);
        v25 = v28;
      }
      else
      {
        *(_DWORD *)v24 -= 2;
      }
    }
    if ((v25 & 1) == 0)
    {
LABEL_4:
      v13 = a1[3];
      if (v13)
      {
        v14 = *(WebCore::HTMLTextFormControlElement **)(v13 + 8);
        if ((*((_BYTE *)v14 + 168) & 2) != 0)
          goto LABEL_12;
      }
      else
      {
        if ((MEMORY[0xA8] & 2) != 0)
          goto LABEL_12;
        v14 = 0;
      }
      (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD *))(*a1 + 272))(v29, a1);
      WebCore::HTMLTextFormControlElement::setInnerTextValue(v14, v29);
      v16 = v29[0];
      v29[0] = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
      v17 = a1[3];
      if (v17)
        v18 = *(WebCore::HTMLTextFormControlElement **)(v17 + 8);
      else
        v18 = 0;
      WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility(v18);
LABEL_12:
      if (!a3)
        goto LABEL_29;
      if (!a5)
      {
        (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD *))(*a1 + 272))(v29, a1);
        v19 = v29[0];
        if (v29[0])
        {
          v20 = *((_DWORD *)v29[0] + 1);
          v29[0] = 0;
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v12);
          else
            *(_DWORD *)v19 -= 2;
        }
        else
        {
          v20 = 0;
        }
        if ((*(_BYTE *)(v11 + 54) & 2) != 0 && WebCore::Element::isUserActionElementFocused((WebCore::Element *)v11))
        {
          v29[0] = 0;
          v29[1] = 0;
          WebCore::HTMLTextFormControlElement::setSelectionRange(v11, v20, v20, 0, 3, (uint64_t *)v29, 0);
        }
        else
        {
          *(_DWORD *)(v11 + 180) = v20;
          *(_DWORD *)(v11 + 184) = v20;
          *(_BYTE *)(v11 + 169) &= 0xFCu;
          *(_BYTE *)(v11 + 188) = 1;
        }
      }
      if (a4 == 2)
      {
        WebCore::HTMLFormControlElement::dispatchFormControlInputEvent((WebCore::Node *)v11);
      }
      else
      {
        if (a4 != 1)
          goto LABEL_21;
        if ((*(_BYTE *)(v11 + 54) & 2) != 0 && WebCore::Element::isUserActionElementFocused((WebCore::Element *)v11))
        {
          WebCore::HTMLFormControlElement::dispatchFormControlInputEvent((WebCore::Node *)v11);
LABEL_21:
          if ((*(_BYTE *)(v11 + 54) & 2) == 0 || !WebCore::Element::isUserActionElementFocused((WebCore::Element *)v11))
          {
            v21 = *(WTF **)a2;
            if (*(_QWORD *)a2)
              *(_DWORD *)v21 += 2;
            v22 = *(WTF::StringImpl **)(v11 + 200);
            *(_QWORD *)(v11 + 200) = v21;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2)
                WTF::StringImpl::destroy(v22, v12);
              else
                *(_DWORD *)v22 -= 2;
            }
          }
          if (WebCore::s_processingUserTypingGesture)
            (*(void (**)(_QWORD *))(*a1 + 952))(a1);
          goto LABEL_29;
        }
      }
      WebCore::HTMLTextFormControlElement::dispatchFormControlChangeEvent((WTF **)v11);
      goto LABEL_21;
    }
  }
LABEL_29:
  if (*(_DWORD *)(v11 + 24) == 2)
  {
    if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v11, v12);
  }
  else
  {
    *(_DWORD *)(v11 + 24) -= 2;
  }
}

uint64_t WTF::NeverDestroyed<WebCore::Decimal const,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WebCore::Decimal::Sign,int,unsigned long long>(uint64_t result, int a2, int a3, unint64_t a4)
{
  int v4;
  unint64_t v5;
  BOOL v6;

  if (a4)
    v4 = 1;
  else
    v4 = 3;
  *(_DWORD *)(result + 12) = v4;
  *(_DWORD *)(result + 16) = a2;
  if ((a3 + 1023) <= 0x7FE && a4 >= 0xDE0B6B3A7640000)
  {
    do
    {
      v5 = a4 / 0xA;
      ++a3;
      v6 = a4 > 0x8AC7230489E7FFFFLL;
      a4 /= 0xAuLL;
    }
    while (v6);
  }
  else
  {
    v5 = a4;
  }
  if (a3 >= 1024)
  {
    *(_QWORD *)result = 0;
    *(_WORD *)(result + 8) = 0;
    *(_DWORD *)(result + 12) = 0;
  }
  else if (a3 <= -1024)
  {
    *(_QWORD *)result = 0;
    *(_WORD *)(result + 8) = 0;
    *(_DWORD *)(result + 12) = 3;
  }
  else
  {
    *(_QWORD *)result = v5;
    *(_WORD *)(result + 8) = a3;
  }
  return result;
}

double WebCore::StepRange::alignValueForStep@<D0>(WebCore::StepRange *this@<X0>, const WebCore::Decimal *a2@<X1>, const WebCore::Decimal *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _BOOL4 v9;
  __int128 v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unsigned int v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  int v18;
  BOOL v19;
  unint64_t v20;
  __int16 v21;
  _BYTE v23[24];
  __int128 v24;
  uint64_t v25;
  _BYTE v26[24];
  __int128 v27;
  _BOOL4 v28;

  {
    v8 = WebCore::StepRange::alignValueForStep(WebCore::Decimal const&,WebCore::Decimal const&)const::tenPowerOf21;
  }
  else
  {
    *(_QWORD *)&dword_1EE2F5A3C = 1;
    v8 = 1;
    WebCore::StepRange::alignValueForStep(WebCore::Decimal const&,WebCore::Decimal const&)const::tenPowerOf21 = 1;
    word_1EE2F5A38 = 21;
  }
  if (*(_QWORD *)a3 == v8
    && *((unsigned __int16 *)a3 + 4) == (unsigned __int16)word_1EE2F5A38
    && *((_DWORD *)a3 + 3) == dword_1EE2F5A3C
    && *((_DWORD *)a3 + 4) == dword_1EE2F5A40)
  {
    goto LABEL_12;
  }
  WebCore::Decimal::operator-((__int128 *)a3, (__int128 *)&WebCore::StepRange::alignValueForStep(WebCore::Decimal const&,WebCore::Decimal const&)const::tenPowerOf21, (uint64_t)&v27);
  if ((HIDWORD(v27) - 1) >= 2)
  {
    if (HIDWORD(v27) == 3)
      goto LABEL_12;
    if (HIDWORD(v27))
      goto LABEL_11;
    v9 = v28;
  }
  else
  {
    if (HIDWORD(v27) == 2)
      goto LABEL_11;
    v9 = v28;
  }
  if (!v9)
  {
LABEL_12:
    v10 = *(_OWORD *)a3;
    *(_OWORD *)a4 = *(_OWORD *)a3;
    *(_QWORD *)(a4 + 16) = *((_QWORD *)a3 + 2);
    return *(double *)&v10;
  }
LABEL_11:
  if (WebCore::StepRange::stepMismatch(this, a2))
    goto LABEL_12;
  WebCore::Decimal::operator-((__int128 *)a3, (__int128 *)((char *)this + 72), (uint64_t)v23);
  WebCore::Decimal::operator/((unint64_t)v23, (unint64_t)this + 48, (uint64_t)&v24);
  if ((HIDWORD(v24) & 0xFFFFFFFD) != 0 && SWORD4(v24) < 0)
  {
    v11 = v24;
    if ((_QWORD)v24)
    {
      v12 = 0;
      v13 = 1;
      do
      {
        ++v12;
        if (v13 > 0x1999999999999998)
          break;
        v13 *= 10;
      }
      while (v13 <= (unint64_t)v24);
    }
    else
    {
      v12 = 0;
    }
    if (v12 < -SWORD4(v24))
    {
      *(_QWORD *)v26 = 0;
      *(_WORD *)&v26[8] = 0;
      *(_QWORD *)&v26[12] = 3;
    }
    else
    {
      if (SWORD4(v24) <= -2 && (_QWORD)v24)
      {
        v14 = ~SWORD4(v24);
        do
        {
          v15 = v11 / 0xA;
          if (v14 < 2)
            break;
          --v14;
          v16 = v11 > 9;
          v11 /= 0xAuLL;
        }
        while (v16);
      }
      else
      {
        v15 = v24;
      }
      if (v15 % 0xA > 4)
        v15 += 10;
      v17 = v15 / 0xA;
      if (v15 >= 0xA)
        v18 = 1;
      else
        v18 = 3;
      *(_DWORD *)&v26[12] = v18;
      *(_DWORD *)&v26[16] = v25;
      v19 = v15 >= 0x8AC7230489E80000;
      v20 = v15 / 0x64;
      v21 = v19;
      if (v19)
        v17 = v20;
      *(_QWORD *)v26 = v17;
      *(_WORD *)&v26[8] = v21;
    }
  }
  else
  {
    *(_OWORD *)v26 = v24;
    *(_QWORD *)&v26[16] = v25;
  }
  WebCore::Decimal::operator*((unint64_t)v26, (unint64_t *)this + 6, (uint64_t)&v27);
  *(double *)&v10 = WebCore::Decimal::operator+((__int128 *)((char *)this + 72), &v27, a4);
  return *(double *)&v10;
}

BOOL WebCore::StepRange::stepMismatch(WebCore::StepRange *this, const WebCore::Decimal *a2)
{
  _BOOL4 v3;
  _BOOL4 v4;
  unint64_t v7;
  int v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  int v14;
  BOOL v15;
  unint64_t v16;
  __int16 v17;
  __int128 v18;
  uint64_t v19;
  _BYTE v20[24];
  __int128 v21;
  int v22;
  __int128 v23;
  int v24;
  int v25;
  __int128 v26;
  _BOOL4 v27;
  int v28;

  if (!*((_BYTE *)this + 113))
    return 0;
  if ((*((_DWORD *)a2 + 3) & 0xFFFFFFFD) == 0)
    return 0;
  WebCore::Decimal::operator-((__int128 *)a2, (__int128 *)((char *)this + 72), (uint64_t)&v26);
  v25 = v28;
  v23 = v26;
  v24 = 0;
  if ((HIDWORD(v26) & 0xFFFFFFFD) == 0)
    return 0;
  if ((byte_1ECE83671 & 1) == 0)
  {
    WTF::NeverDestroyed<WebCore::Decimal const,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WebCore::Decimal::Sign,int,unsigned long long>((uint64_t)&unk_1ECE83698, 0, 0, 0x20000000000000uLL);
    byte_1ECE83671 = 1;
  }
  WebCore::Decimal::operator/((unint64_t)&v23, (unint64_t)&unk_1ECE83698, (uint64_t)&v21);
  WebCore::Decimal::operator-(&v21, (__int128 *)this + 3, (uint64_t)&v26);
  if ((HIDWORD(v26) - 1) >= 2)
  {
    if (HIDWORD(v26))
      goto LABEL_10;
    v3 = v27;
  }
  else
  {
    if (HIDWORD(v26) == 2)
      goto LABEL_10;
    v3 = v27;
  }
  if (!v3)
    return 0;
LABEL_10:
  WebCore::Decimal::operator/((unint64_t)&v23, (unint64_t)this + 48, (uint64_t)&v18);
  if ((HIDWORD(v18) & 0xFFFFFFFD) != 0 && SWORD4(v18) < 0)
  {
    v7 = v18;
    if ((_QWORD)v18)
    {
      v8 = 0;
      v9 = 1;
      do
      {
        ++v8;
        if (v9 > 0x1999999999999998)
          break;
        v9 *= 10;
      }
      while (v9 <= (unint64_t)v18);
    }
    else
    {
      v8 = 0;
    }
    if (v8 < -SWORD4(v18))
    {
      *(_QWORD *)v20 = 0;
      *(_WORD *)&v20[8] = 0;
      *(_QWORD *)&v20[12] = 3;
    }
    else
    {
      if (SWORD4(v18) <= -2 && (_QWORD)v18)
      {
        v10 = ~SWORD4(v18);
        do
        {
          v11 = v7 / 0xA;
          if (v10 < 2)
            break;
          --v10;
          v12 = v7 > 9;
          v7 /= 0xAuLL;
        }
        while (v12);
      }
      else
      {
        v11 = v18;
      }
      if (v11 % 0xA > 4)
        v11 += 10;
      v13 = v11 / 0xA;
      if (v11 >= 0xA)
        v14 = 1;
      else
        v14 = 3;
      *(_DWORD *)&v20[12] = v14;
      *(_DWORD *)&v20[16] = v19;
      v15 = v11 >= 0x8AC7230489E80000;
      v16 = v11 / 0x64;
      v17 = v15;
      if (v15)
        v13 = v16;
      *(_QWORD *)v20 = v13;
      *(_WORD *)&v20[8] = v17;
    }
  }
  else
  {
    *(_OWORD *)v20 = v18;
    *(_QWORD *)&v20[16] = v19;
  }
  WebCore::Decimal::operator*((unint64_t)this + 48, (unint64_t *)v20, (uint64_t)&v26);
  WebCore::Decimal::operator-(&v23, &v26, (uint64_t)&v21);
  v22 = 0;
  if ((_MergedGlobals_195 & 1) == 0)
  {
    WTF::NeverDestroyed<WebCore::Decimal const,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WebCore::Decimal::Sign,int,unsigned long long>((uint64_t)&unk_1ECE83680, 0, 0, 0x1000000uLL);
    _MergedGlobals_195 = 1;
  }
  if (*((_DWORD *)this + 27))
  {
    *(_QWORD *)&v20[12] = 3;
    *(_QWORD *)v20 = 0;
    *(_WORD *)&v20[8] = 0;
  }
  else
  {
    WebCore::Decimal::operator/((unint64_t)this + 48, (unint64_t)&unk_1ECE83680, (uint64_t)v20);
  }
  WebCore::Decimal::operator-((__int128 *)v20, &v21, (uint64_t)&v26);
  if ((HIDWORD(v26) - 1) < 2)
  {
    if (HIDWORD(v26) != 2)
    {
      v4 = v27;
      goto LABEL_20;
    }
    return 0;
  }
  if (HIDWORD(v26))
    return 0;
  v4 = v27;
LABEL_20:
  if (!v4)
    return 0;
  WebCore::Decimal::operator-((__int128 *)this + 3, (__int128 *)v20, (uint64_t)&v18);
  WebCore::Decimal::operator-(&v21, &v18, (uint64_t)&v26);
  if ((HIDWORD(v26) - 1) >= 2)
  {
    if (HIDWORD(v26))
      return 0;
    return v27;
  }
  else
  {
    if (HIDWORD(v26) == 2)
      return 0;
    return v27;
  }
}

__n128 WebCore::StepRange::clampValue@<Q0>(WebCore::StepRange *this@<X0>, const WebCore::Decimal *a2@<X1>, __n128 *a3@<X8>)
{
  WebCore::StepRange *v3;
  __int128 *v6;
  _BOOL4 v7;
  __n128 *v8;
  _BOOL4 v9;
  _BOOL4 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;
  BOOL v14;
  __n128 result;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  int v23;
  BOOL v24;
  unint64_t v25;
  __int16 v26;
  __int128 v27;
  uint64_t v28;
  __n128 v29;
  unint64_t v30;
  _BYTE v31[24];
  __int128 v32;
  uint64_t v33;
  _BYTE v34[24];
  __int128 v35;
  _BOOL4 v36;

  v3 = a2;
  v6 = (__int128 *)((char *)this + 24);
  WebCore::Decimal::operator-((__int128 *)this, (__int128 *)a2, (uint64_t)&v35);
  if ((HIDWORD(v35) - 1) >= 2)
  {
    if (HIDWORD(v35))
      goto LABEL_6;
    v7 = v36;
  }
  else
  {
    if (HIDWORD(v35) == 2)
      goto LABEL_6;
    v7 = v36;
  }
  if (v7)
    v3 = this;
LABEL_6:
  WebCore::Decimal::operator-(v6, (__int128 *)v3, (uint64_t)&v35);
  if ((HIDWORD(v35) - 1) >= 2)
  {
    if (HIDWORD(v35))
    {
      v8 = (__n128 *)v6;
      goto LABEL_12;
    }
    v9 = v36;
  }
  else
  {
    v8 = (__n128 *)v6;
    if (HIDWORD(v35) == 2)
      goto LABEL_12;
    v9 = v36;
  }
  if (v9)
    v8 = (__n128 *)v3;
  else
    v8 = (__n128 *)v6;
LABEL_12:
  v29 = *v8;
  v30 = v8[1].n128_u64[0];
  if (!*((_BYTE *)this + 113))
    goto LABEL_34;
  WebCore::Decimal::operator-((__int128 *)&v29, (__int128 *)((char *)this + 72), (uint64_t)v31);
  WebCore::Decimal::operator/((unint64_t)v31, (unint64_t)this + 48, (uint64_t)&v32);
  if ((HIDWORD(v32) & 0xFFFFFFFD) != 0 && SWORD4(v32) < 0)
  {
    v16 = v32;
    if ((_QWORD)v32)
    {
      v17 = 0;
      v18 = 1;
      do
      {
        ++v17;
        if (v18 > 0x1999999999999998)
          break;
        v18 *= 10;
      }
      while (v18 <= (unint64_t)v32);
    }
    else
    {
      v17 = 0;
    }
    if (v17 < -SWORD4(v32))
    {
      *(_QWORD *)v34 = 0;
      *(_WORD *)&v34[8] = 0;
      *(_QWORD *)&v34[12] = 3;
    }
    else
    {
      if (SWORD4(v32) <= -2 && (_QWORD)v32)
      {
        v19 = ~SWORD4(v32);
        do
        {
          v20 = v16 / 0xA;
          if (v19 < 2)
            break;
          --v19;
          v21 = v16 > 9;
          v16 /= 0xAuLL;
        }
        while (v21);
      }
      else
      {
        v20 = v32;
      }
      if (v20 % 0xA > 4)
        v20 += 10;
      v22 = v20 / 0xA;
      if (v20 >= 0xA)
        v23 = 1;
      else
        v23 = 3;
      *(_DWORD *)&v34[12] = v23;
      *(_DWORD *)&v34[16] = v33;
      v24 = v20 >= 0x8AC7230489E80000;
      v25 = v20 / 0x64;
      v26 = v24;
      if (v24)
        v22 = v25;
      *(_QWORD *)v34 = v22;
      *(_WORD *)&v34[8] = v26;
    }
  }
  else
  {
    *(_OWORD *)v34 = v32;
    *(_QWORD *)&v34[16] = v33;
  }
  WebCore::Decimal::operator*((unint64_t)v34, (unint64_t *)this + 6, (uint64_t)&v35);
  WebCore::Decimal::operator+((__int128 *)((char *)this + 72), &v35, (uint64_t)&v27);
  WebCore::Decimal::operator-(&v27, (__int128 *)this, (uint64_t)&v35);
  if ((HIDWORD(v35) - 1) >= 2)
  {
    if (HIDWORD(v35))
      goto LABEL_20;
    v10 = v36;
  }
  else
  {
    if (HIDWORD(v35) == 2)
      goto LABEL_20;
    v10 = v36;
  }
  if (!v10)
  {
    WebCore::Decimal::operator-(&v27, (__int128 *)this + 3, (uint64_t)v34);
    goto LABEL_25;
  }
LABEL_20:
  WebCore::Decimal::operator-(&v27, v6, (uint64_t)&v35);
  if ((HIDWORD(v35) - 1) >= 2)
  {
    if (HIDWORD(v35))
      goto LABEL_24;
    v11 = v36;
  }
  else
  {
    if (HIDWORD(v35) == 2)
    {
LABEL_24:
      *(_OWORD *)v34 = v27;
      *(_QWORD *)&v34[16] = v28;
      goto LABEL_25;
    }
    v11 = v36;
  }
  if (!v11)
    goto LABEL_24;
  WebCore::Decimal::operator+(&v27, (__int128 *)this + 3, (uint64_t)v34);
LABEL_25:
  WebCore::Decimal::operator-((__int128 *)v34, v6, (uint64_t)&v35);
  if ((HIDWORD(v35) - 1) >= 2)
  {
    if (HIDWORD(v35))
      goto LABEL_29;
    v12 = v36;
  }
  else
  {
    if (HIDWORD(v35) == 2)
      goto LABEL_29;
    v12 = v36;
  }
  if (v12)
  {
    v8 = &v29;
    goto LABEL_34;
  }
LABEL_29:
  WebCore::Decimal::operator-((__int128 *)v34, (__int128 *)this, (uint64_t)&v35);
  if ((HIDWORD(v35) - 1) < 2)
  {
    if (HIDWORD(v35) != 2)
    {
      v13 = v36;
      goto LABEL_32;
    }
LABEL_72:
    v8 = (__n128 *)v34;
    goto LABEL_34;
  }
  if (HIDWORD(v35))
    goto LABEL_72;
  v13 = v36;
LABEL_32:
  v14 = !v13;
  v8 = (__n128 *)v34;
  if (v14)
    v8 = &v29;
LABEL_34:
  result = *v8;
  *a3 = *v8;
  a3[1].n128_u64[0] = v8[1].n128_u64[0];
  return result;
}

double WebCore::StepRange::parseStep@<D0>(char a1@<W0>, int *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  double result;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  __int16 v31;
  unint64_t v32;

  if (!(_DWORD)a4)
    goto LABEL_2;
  if (a4 != 3)
    goto LABEL_9;
  if ((a4 & 0xFF00000000) != 0)
  {
    if ((*(_BYTE *)a3 & 0xDF) != 0x41 || (*(_BYTE *)(a3 + 1) & 0xDF) != 0x4E)
      goto LABEL_9;
    v18 = *(unsigned __int8 *)(a3 + 2);
  }
  else
  {
    if ((*(_WORD *)a3 & 0xFFDF) != 0x41 || (*(_WORD *)(a3 + 2) & 0xFFDF) != 0x4E)
      goto LABEL_9;
    v18 = *(unsigned __int16 *)(a3 + 4);
  }
  if ((v18 & 0xFFFFFFDF) == 0x59)
  {
    if ((a1 & 1) == 0)
    {
      *(_QWORD *)a5 = 0;
      *(_WORD *)(a5 + 8) = 0;
      *(_QWORD *)&result = 2;
      *(_QWORD *)(a5 + 12) = 2;
      return result;
    }
    goto LABEL_2;
  }
LABEL_9:
  v30 = 0;
  v31 = 0;
  v32 = 2;
  result = WebCore::parseToDecimalForNumberType((unsigned __int8 *)a3, a4, (__int128 *)&v30, (uint64_t)&v28);
  if ((HIDWORD(v28) & 0xFFFFFFFD) == 0)
    goto LABEL_2;
  *(_QWORD *)&result = 3;
  v27 = 3;
  v25 = 0;
  v26 = 0;
  if (HIDWORD(v28) == 3 && !(_QWORD)v28 && !WORD4(v28) && !(_DWORD)v29)
    goto LABEL_2;
  result = WebCore::Decimal::operator-(&v28, (__int128 *)&v25, (uint64_t)&v30);
  if ((v32 - 1) >= 2)
  {
    if ((_DWORD)v32 == 3)
      goto LABEL_2;
    if ((_DWORD)v32)
    {
LABEL_18:
      v13 = a2[3];
      if (v13)
      {
        if (v13 != 1)
        {
          if (v13 == 2)
          {
            v19 = a2[2];
            if ((v19 & 0x80000000) != 0)
              v20 = -(uint64_t)v19;
            else
              v20 = a2[2];
            v21 = (v19 >> 31) & 1;
            if (v20)
              v22 = 1;
            else
              v22 = 3;
            v32 = __PAIR64__(v21, v22);
            v30 = v20;
            v31 = 0;
            WebCore::Decimal::operator*=((unint64_t *)&v28, &v30);
            WebCore::Decimal::round((uint64_t)&v28, (uint64_t)&v30);
            v27 = 1;
            v25 = 1;
            v26 = 0;
            if (WebCore::Decimal::operator<((__int128 *)&v30, (__int128 *)&v25))
              v23 = &v25;
            else
              v23 = (uint64_t *)&v30;
            v28 = *(_OWORD *)v23;
            v29 = v23[2];
          }
          goto LABEL_25;
        }
        WebCore::Decimal::round((uint64_t)&v28, (uint64_t)&v30);
        v27 = 1;
        v25 = 1;
        v26 = 0;
        if (WebCore::Decimal::operator<((__int128 *)&v30, (__int128 *)&v25))
          v24 = &v25;
        else
          v24 = (uint64_t *)&v30;
        v28 = *(_OWORD *)v24;
        v29 = v24[2];
        v14 = a2[2];
        if ((v14 & 0x80000000) != 0)
          v15 = -(uint64_t)v14;
        else
          v15 = a2[2];
      }
      else
      {
        v14 = a2[2];
        v15 = a2[2];
        if ((v14 & 0x80000000) != 0)
          v15 = -(uint64_t)v14;
      }
      v16 = (v14 >> 31) & 1;
      if (v15)
        v17 = 1;
      else
        v17 = 3;
      v32 = __PAIR64__(v16, v17);
      v30 = v15;
      v31 = 0;
      WebCore::Decimal::operator*=((unint64_t *)&v28, &v30);
LABEL_25:
      result = *(double *)&v28;
      *(_OWORD *)a5 = v28;
      *(_QWORD *)(a5 + 16) = v29;
      return result;
    }
    v12 = HIDWORD(v32) == 1;
  }
  else
  {
    if ((_DWORD)v32 == 2)
      goto LABEL_18;
    v12 = HIDWORD(v32);
  }
  if (v12 != 1)
    goto LABEL_18;
LABEL_2:
  v7 = a2[2] * (uint64_t)*a2;
  v8 = v7;
  if ((int)v7 < 0)
    v8 = -v7;
  v9 = v7 >> 31;
  if (v8)
    v10 = 1;
  else
    v10 = 3;
  *(_DWORD *)(a5 + 12) = v10;
  *(_DWORD *)(a5 + 16) = v9;
  *(_QWORD *)a5 = v8;
  *(_WORD *)(a5 + 8) = 0;
  return result;
}

double WebCore::StepRange::stepSnappedMaximum@<D0>(WebCore::StepRange *this@<X0>, uint64_t a2@<X8>)
{
  _BOOL4 v4;
  double result;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  unint64_t v11;
  BOOL v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  _BYTE v16[24];
  __int128 v17;
  uint64_t v18;
  _BYTE v19[24];
  _BYTE v20[24];
  __int128 v21;
  uint64_t v22;
  _BYTE v23[24];
  __int128 v24;
  _BOOL4 v25;

  *(_OWORD *)v23 = *(_OWORD *)((char *)this + 72);
  *(_QWORD *)&v23[16] = *((_QWORD *)this + 11);
  v21 = *((_OWORD *)this + 3);
  v22 = *((_QWORD *)this + 8);
  WebCore::Decimal::operator-((__int128 *)v23, &v21, (uint64_t)v20);
  if (*(_QWORD *)v20 == *(_QWORD *)v23
    && *(unsigned __int16 *)&v20[8] == *(unsigned __int16 *)&v23[8]
    && *(_QWORD *)&v20[12] == *(_QWORD *)&v23[12])
  {
    goto LABEL_17;
  }
  WebCore::Decimal::operator-((__int128 *)v20, (__int128 *)v23, (uint64_t)&v24);
  if ((HIDWORD(v24) - 1) >= 2 && HIDWORD(v24) == 3)
    goto LABEL_17;
  WebCore::Decimal::operator/((unint64_t)v23, (unint64_t)&v21, (uint64_t)&v24);
  if ((HIDWORD(v24) & 0xFFFFFFFD) == 0)
    goto LABEL_17;
  v14 = *(_OWORD *)this;
  v15 = *((_QWORD *)this + 2);
  WebCore::Decimal::operator-(&v14, (__int128 *)v23, (uint64_t)v16);
  WebCore::Decimal::operator/((unint64_t)v16, (unint64_t)&v21, (uint64_t)&v17);
  if ((HIDWORD(v17) & 0xFFFFFFFD) != 0 && SWORD4(v17) < 0)
  {
    v6 = v17;
    if (!(_QWORD)v17)
      goto LABEL_30;
    v7 = 0;
    v8 = 1;
    do
    {
      ++v7;
      if (v8 > 0x1999999999999998)
        break;
      v8 *= 10;
    }
    while (v8 <= (unint64_t)v17);
    v9 = -SWORD4(v17);
    if (v7 >= v9)
    {
      v10 = -SWORD4(v17);
      do
      {
        v11 = v6 / 0xA;
        if (v10 < 2)
          break;
        --v10;
        v12 = v6 > 9;
        v6 /= 0xAuLL;
      }
      while (v12);
      v13 = v18;
      if ((_DWORD)v18 == 1)
        v11 += !WebCore::isMultiplePowersOfTen(v11, v9);
      WTF::NeverDestroyed<WebCore::Decimal const,WTF::AnyThreadsAccessTraits>::NeverDestroyed<WebCore::Decimal::Sign,int,unsigned long long>((uint64_t)v19, v13, 0, v11);
    }
    else
    {
LABEL_30:
      if ((_DWORD)v18)
      {
        *(_QWORD *)&v19[12] = 0x100000001;
        *(_QWORD *)v19 = 1;
        *(_WORD *)&v19[8] = 0;
      }
      else
      {
        *(_QWORD *)v19 = 0;
        *(_WORD *)&v19[8] = 0;
        *(_QWORD *)&v19[12] = 3;
      }
    }
  }
  else
  {
    *(_OWORD *)v19 = v17;
    *(_QWORD *)&v19[16] = v18;
  }
  WebCore::Decimal::operator*((unint64_t)v19, (unint64_t *)&v21, (uint64_t)&v24);
  WebCore::Decimal::operator+((__int128 *)v23, &v24, (uint64_t)v20);
  *(_OWORD *)v19 = *(_OWORD *)this;
  *(_QWORD *)&v19[16] = *((_QWORD *)this + 2);
  WebCore::Decimal::operator-((__int128 *)v20, (__int128 *)v19, (uint64_t)&v24);
  if ((HIDWORD(v24) - 1) >= 2)
  {
    if (!HIDWORD(v24) && !v25)
      goto LABEL_12;
  }
  else if (HIDWORD(v24) != 2 && !v25)
  {
LABEL_12:
    WebCore::Decimal::operator-((__int128 *)v20, &v21, (uint64_t)&v24);
    *(_OWORD *)v20 = v24;
    *(_DWORD *)&v20[16] = v25;
  }
  *(_OWORD *)v19 = *(_OWORD *)((char *)this + 24);
  *(_QWORD *)&v19[16] = *((_QWORD *)this + 5);
  WebCore::Decimal::operator-((__int128 *)v20, (__int128 *)v19, (uint64_t)&v24);
  if ((HIDWORD(v24) - 1) >= 2)
  {
    if (HIDWORD(v24))
      goto LABEL_24;
    v4 = v25;
  }
  else
  {
    if (HIDWORD(v24) == 2)
      goto LABEL_24;
    v4 = v25;
  }
  if (v4)
  {
LABEL_17:
    *(_QWORD *)a2 = 0;
    *(_WORD *)(a2 + 8) = 0;
    *(_QWORD *)&result = 2;
    *(_QWORD *)(a2 + 12) = 2;
    return result;
  }
LABEL_24:
  result = *(double *)v20;
  *(_OWORD *)a2 = *(_OWORD *)v20;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)&v20[16];
  return result;
}

uint64_t WebCore::SubmitEvent::create@<X0>(uint64_t *a1@<X0>, WebCore **a2@<X8>)
{
  WebCore *v4;
  WebCore *v5;
  uint64_t v6;
  WebCore *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  _DWORD *v12;
  uint64_t v13;

  v4 = (WebCore *)bmalloc::api::isoAllocate();
  v5 = v4;
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(WebCore **)(v6 + 96)) == 0)
  {
    v4 = (WebCore *)WebCore::threadGlobalDataSlow(v4);
    v7 = v4;
  }
  v8 = *((_QWORD *)v7 + 5);
  if (!v8)
  {
    v4 = (WebCore *)WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *((_QWORD *)v7 + 5);
  }
  result = WTF::MonotonicTime::now(v4);
  *((_QWORD *)v5 + 1) = 0;
  v11 = *((_DWORD *)v5 + 5) & 0xFFC00000 | 0x2E0206 | (*(_QWORD *)(v8 + 2008) != 0);
  *((_DWORD *)v5 + 4) = 1;
  *((_DWORD *)v5 + 5) = v11;
  v12 = *(_DWORD **)(v8 + 2008);
  if (v12)
    *v12 += 2;
  *((_QWORD *)v5 + 3) = v12;
  *((_QWORD *)v5 + 4) = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 6) = 0;
  *((_QWORD *)v5 + 7) = v10;
  *((_QWORD *)v5 + 8) = 0;
  *(_QWORD *)v5 = off_1E33D9410;
  v13 = *a1;
  *a1 = 0;
  *((_QWORD *)v5 + 9) = v13;
  *a2 = v5;
  return result;
}

void *WebCore::SubmitInputType::formControlType(WebCore::SubmitInputType *this)
{
  return &WebCore::submitAtomData;
}

uint64_t WebCore::SubmitInputType::appendFormData(WebCore::SubmitInputType *this, WebCore::DOMFormData *a2)
{
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WebCore::HTMLInputElement *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl **v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if ((*(_WORD *)(v5 + 230) & 0x20) == 0)
      return 0;
  }
  else
  {
    if ((MEMORY[0xE6] & 0x20) == 0)
      return 0;
    v5 = 0;
  }
  v8 = *(_QWORD *)(v5 + 208);
  v7 = (WTF::StringImpl **)(v5 + 208);
  if (v8)
    v9 = v7;
  else
    v9 = (WTF::StringImpl **)MEMORY[0x1E0CBF3B8];
  if (v4)
    v10 = *(WebCore::HTMLInputElement **)(v4 + 8);
  else
    v10 = 0;
  WebCore::HTMLInputElement::valueWithDefault(v10, &v22);
  WebCore::DOMFormData::append(a2, v9, &v22);
  v12 = v22;
  v22 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v11);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v14 = *(_QWORD *)(v13 + 104);
  if (v14)
  {
    v15 = *(_DWORD *)(v14 + 4);
    if ((v15 & 1) != 0)
    {
      v16 = *(_QWORD *)(v14 + 40);
      LODWORD(v17) = *(_DWORD *)(v14 + 52);
      if ((_DWORD)v17)
      {
LABEL_17:
        v17 = v17;
        v18 = (WTF::StringImpl **)(v16 + 8);
        while (1)
        {
          v19 = (uint64_t)*(v18 - 1);
          if (v19 == WebCore::HTMLNames::dirnameAttr
            || *(_QWORD *)(v19 + 24) == *(_QWORD *)(WebCore::HTMLNames::dirnameAttr + 24)
            && *(_QWORD *)(v19 + 32) == *(_QWORD *)(WebCore::HTMLNames::dirnameAttr + 32))
          {
            goto LABEL_26;
          }
          v18 += 2;
          if (!--v17)
          {
            v18 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
            goto LABEL_26;
          }
        }
      }
    }
    else
    {
      v16 = v14 + 32;
      LODWORD(v17) = v15 >> 5;
      if ((_DWORD)v17)
        goto LABEL_17;
    }
  }
  v18 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
LABEL_26:
  if (*v18)
  {
    WebCore::HTMLTextFormControlElement::directionForFormData((WebCore::HTMLTextFormControlElement **)v13, &v22);
    WebCore::DOMFormData::append(a2, v18, &v22);
    v21 = v22;
    v22 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  return 1;
}

uint64_t WebCore::SubmitInputType::supportsRequired(WebCore::SubmitInputType *this)
{
  return 0;
}

unsigned int *WebCore::SubmitInputType::handleDOMActivateEvent(WebCore::SubmitInputType *this, WebCore::Event *a2)
{
  uint64_t v3;
  unsigned int *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  double v9;
  double v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::Node *v15;

  v3 = *((_QWORD *)this + 3);
  if (v3)
    result = *(unsigned int **)(v3 + 8);
  else
    result = 0;
  result[6] += 2;
  if ((result[40] & 0x18) != 0)
    goto LABEL_5;
  v5 = *((_QWORD *)result + 15);
  if (!v5)
    goto LABEL_5;
  v6 = *(_QWORD *)(v5 + 8);
  if (!v6)
    goto LABEL_5;
  v7 = v6;
  *(_DWORD *)(v6 + 24) += 2;
  v8 = result;
  WebCore::Document::updateLayout(*(_QWORD *)(*((_QWORD *)result + 5) + 8), 2u, 0);
  result = v8;
  v12 = *((_QWORD *)v8 + 15);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 8);
    if (v13)
    {
      *(_DWORD *)(v13 + 24) += 2;
      v14 = *((_QWORD *)this + 3);
      if (v14)
        v15 = *(WebCore::Node **)(v14 + 8);
      else
        v15 = 0;
      WebCore::HTMLFormElement::submitIfPossible(v13, a2, v15, 1, v9, v10, v11);
      if (*(_DWORD *)(v13 + 24) != 2)
      {
        *(_DWORD *)(v13 + 24) -= 2;
LABEL_22:
        result = v8;
        goto LABEL_12;
      }
      result = v8;
      if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v13, a2);
        goto LABEL_22;
      }
    }
  }
LABEL_12:
  *((_DWORD *)a2 + 5) |= 0x80u;
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
      result = v8;
    }
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
LABEL_5:
  if (result[6] == 2)
  {
    if ((*((_WORD *)result + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
  }
  else
  {
    result[6] -= 2;
  }
  return result;
}

uint64_t WebCore::SubmitInputType::canBeSuccessfulSubmitButton(WebCore::SubmitInputType *this)
{
  return 1;
}

uint64_t *WebCore::TelephoneInputType::formControlType(WebCore::TelephoneInputType *this)
{
  return &WebCore::telAtomData;
}

uint64_t WebCore::TextDocument::createParser@<X0>(WebCore::TextDocument *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = WTF::fastMalloc((WTF *)0xD10);
  result = WebCore::HTMLDocumentParser::HTMLDocumentParser(v4, (uint64_t)this, 5);
  *(_QWORD *)result = off_1E33DF1A0;
  *(_QWORD *)(result + 88) = &unk_1E33DF2C8;
  *(_QWORD *)(result + 96) = &unk_1E33DF310;
  *(_BYTE *)(result + 3337) = 0;
  *a2 = result;
  return result;
}

uint64_t WebCore::TextFieldInputType::TextFieldInputType(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int *v5;
  unsigned int v6;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)a1 = off_1E33D5AC0;
  *(_DWORD *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 12) = a2;
  *(_BYTE *)(a1 + 16) = 0;
  if ((*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFLL) == 0)
  {
    v8 = WTF::fastCompactMalloc((WTF *)0x28);
    *(_DWORD *)v8 = 1;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)(v8 + 8) = a3;
    *(_BYTE *)(v8 + 32) = 0;
    v10 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = v10 & 0xFFFF000000000000 | v8;
    v11 = v10 & 0xFFFFFFFFFFFFLL;
    if ((v10 & 0xFFFFFFFFFFFFLL) != 0)
    {
      do
      {
        v12 = __ldaxr((unsigned int *)v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, (unsigned int *)v11));
      if (!v13)
      {
        atomic_store(1u, (unsigned int *)v11);
        v14 = *(unsigned int *)(v11 + 28);
        if ((_DWORD)v14)
        {
          v17 = v11;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v11 + 16), (WTF::StringImpl *)(*(_QWORD *)(v11 + 16) + 32 * v14));
          v11 = v17;
        }
        v15 = *(WTF **)(v11 + 16);
        if (v15)
        {
          *(_QWORD *)(v11 + 16) = 0;
          *(_DWORD *)(v11 + 24) = 0;
          v16 = v11;
          WTF::fastFree(v15, v9);
          v11 = v16;
        }
        WTF::fastFree((WTF *)v11, v9);
      }
    }
  }
  v5 = (unsigned int *)(*(_QWORD *)(a3 + 16) & 0xFFFFFFFFFFFFLL);
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  *(_QWORD *)a1 = off_1E33D9AD0;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = &unk_1E33D9EF8;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &unk_1E33D9F40;
  *(_QWORD *)(a1 + 56) = &unk_1E33D9F68;
  *(_QWORD *)(a1 + 64) = &unk_1E33D9FA8;
  *(_BYTE *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  return a1;
}

uint64_t WebCore::TextFieldInputType::isKeyboardFocusable(WebCore::TextFieldInputType *this, WebCore::KeyboardEvent *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WebCore::Element *v6;

  v3 = *((_QWORD *)this + 3);
  if (v3)
    v4 = *(_QWORD *)(v3 + 8);
  else
    v4 = 0;
  if ((*(unsigned int (**)(uint64_t, WebCore::KeyboardEvent *))(*(_QWORD *)(v4 + 112) + 288))(v4 + 112, a2)
    && (*(_BYTE *)(v4 + 160) & 0x20) != 0)
  {
    return 0;
  }
  v5 = *((_QWORD *)this + 3);
  if (v5)
    v6 = *(WebCore::Element **)(v5 + 8);
  else
    v6 = 0;
  return WebCore::Element::isFocusable(v6);
}

uint64_t WebCore::TextFieldInputType::isMouseFocusable(WebCore::TextFieldInputType *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  if (v1)
    return WebCore::Element::isFocusable(*(WebCore::Element **)(v1 + 8));
  else
    return WebCore::Element::isFocusable(0);
}

const WebCore::Text *WebCore::TextNodeTraversal::next(WebCore::TextNodeTraversal *this, const WebCore::Text *a2, const WebCore::Node *a3)
{
  const WebCore::Text *v3;
  BOOL v4;
  const WebCore::Text *result;
  __int16 v6;
  BOOL v7;

  if (this == a2)
    return 0;
  while (1)
  {
    v3 = (const WebCore::Text *)*((_QWORD *)this + 7);
    if (v3)
      break;
    this = (WebCore::TextNodeTraversal *)*((_QWORD *)this + 4);
    if (this)
      v4 = this == a2;
    else
      v4 = 1;
    if (v4)
      return 0;
  }
  v6 = *((_WORD *)v3 + 14);
  if ((v6 & 2) != 0)
    return (const WebCore::Text *)*((_QWORD *)this + 7);
  do
  {
    if ((v6 & 4) == 0 || (result = (const WebCore::Text *)*((_QWORD *)v3 + 10)) == 0)
    {
      if (v3 == a2)
        return 0;
      while (1)
      {
        result = (const WebCore::Text *)*((_QWORD *)v3 + 7);
        if (result)
          break;
        v3 = (const WebCore::Text *)*((_QWORD *)v3 + 4);
        if (v3)
          v7 = v3 == a2;
        else
          v7 = 1;
        if (v7)
          return 0;
      }
    }
    v6 = *((_WORD *)result + 14);
    v3 = result;
  }
  while ((v6 & 2) == 0);
  return result;
}

BOOL WebCore::TextFieldInputType::valueMissing(WebCore::TextFieldInputType *this, const WTF::String *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_BYTE *)(v2 + 160) & 0x18) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v2 + 112) + 288))(v2 + 112)
    && (*(_BYTE *)(v2 + 160) & 0x20) != 0
    || (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 168) & 1) == 0)
  {
    return 0;
  }
  if (*(_QWORD *)a2)
    return *(_DWORD *)(*(_QWORD *)a2 + 4) == 0;
  return 1;
}

_QWORD *WebCore::TextFieldInputType::updateInnerTextValue(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  WebCore::HTMLTextFormControlElement *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WebCore::HTMLTextFormControlElement *v7;
  WTF::StringImpl *v8;

  v1 = this;
  v2 = this[3];
  if (v2)
  {
    v3 = *(WebCore::HTMLTextFormControlElement **)(v2 + 8);
    if ((*((_BYTE *)v3 + 168) & 2) != 0)
      return this;
  }
  else
  {
    if ((MEMORY[0xA8] & 2) != 0)
      return this;
    v3 = 0;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD *))(*this + 272))(&v8, this);
  WebCore::HTMLTextFormControlElement::setInnerTextValue(v3, &v8);
  v5 = v8;
  v8 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = v1[3];
  if (v6)
    v7 = *(WebCore::HTMLTextFormControlElement **)(v6 + 8);
  else
    v7 = 0;
  return (_QWORD *)WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility(v7);
}

WebCore::TextFieldInputType *WebCore::TextFieldInputType::handleClickEvent(WebCore::TextFieldInputType *this, WebCore::MouseEvent *a2)
{
  uint64_t v3;
  WebCore::TextFieldInputType *result;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WebCore::Node *v8;

  v3 = *((_QWORD *)this + 3);
  if (v3)
    result = *(WebCore::TextFieldInputType **)(v3 + 8);
  else
    result = 0;
  if ((*((_BYTE *)result + 54) & 2) != 0)
  {
    result = (WebCore::TextFieldInputType *)WebCore::Element::isUserActionElementFocused(result);
    if ((_DWORD)result)
    {
      v5 = *((_QWORD *)this + 3);
      v6 = v5 ? *(_QWORD *)(v5 + 8) : 0;
      WebCore::HTMLInputElement::dataList(v6, &v8);
      result = v8;
      if (v8)
      {
        if (*((_DWORD *)v8 + 6) == 2)
        {
          if ((*((_WORD *)v8 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v8, v7);
        }
        else
        {
          *((_DWORD *)v8 + 6) -= 2;
        }
        return WebCore::TextFieldInputType::displaySuggestions(this, 0);
      }
    }
  }
  return result;
}

WebCore::TextFieldInputType *WebCore::TextFieldInputType::displaySuggestions(WebCore::TextFieldInputType *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  WebCore::TextFieldInputType *v6;
  const WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  unsigned int v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF *v23;
  WTF *v24;
  unsigned int v25;

  v2 = *((_QWORD *)result + 3);
  if (!v2)
    return result;
  v3 = *(_QWORD *)(v2 + 8);
  if ((*(_BYTE *)(v3 + 160) & 0x18) != 0)
    return result;
  v4 = *(_QWORD *)(v3 + 64) & 0xFFFFFFFFFFFFLL;
  if (!v4)
    return result;
  if ((*(_BYTE *)(v4 + 45) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195CC3708);
  }
  v6 = result;
  result = (WebCore::TextFieldInputType *)WTF::isMainThread(result);
  if (!(_DWORD)result)
    goto LABEL_9;
  {
    WebCore::currentToken(void)::token = 0;
    goto LABEL_9;
  }
  if (!WebCore::currentToken(void)::token || *(_DWORD *)(WebCore::currentToken(void)::token + 68))
  {
LABEL_9:
    if ((a2 & 0xFE) != 2)
      return result;
    goto LABEL_10;
  }
  if ((a2 & 0xFE) != 2 && *(_BYTE *)(WebCore::currentToken(void)::token + 16) != 1)
    return result;
LABEL_10:
  result = (WebCore::TextFieldInputType *)*((_QWORD *)v6 + 14);
  if (result)
    return (WebCore::TextFieldInputType *)(*(uint64_t (**)(WebCore::TextFieldInputType *, uint64_t))(*(_QWORD *)result + 32))(result, a2);
  WebCore::TextFieldInputType::suggestions(v6, v7, (uint64_t)&v24);
  v9 = v25;
  v10 = v24;
  if (v25)
  {
    v19 = 16 * v25;
    v20 = (WTF::StringImpl **)((char *)v24 + 8);
    v23 = v24;
    do
    {
      v21 = *v20;
      *v20 = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v8);
        else
          *(_DWORD *)v21 -= 2;
      }
      v22 = *(v20 - 1);
      *(v20 - 1) = 0;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v8);
        else
          *(_DWORD *)v22 -= 2;
      }
      v20 += 2;
      v19 -= 16;
      v10 = v23;
    }
    while (v19);
  }
  if (v10)
  {
    WTF::fastFree(v10, v8);
    if (!v9)
      goto LABEL_23;
  }
  else if (!v9)
  {
    goto LABEL_23;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 3) + 8) + 40) + 8) + 528);
  if (v11
    && (v12 = *(_QWORD *)(v11 + 8)) != 0
    && (v13 = *(_QWORD *)(v12 + 24)) != 0
    && (v14 = *(_QWORD *)(v13 + 8)) != 0)
  {
    v15 = *(_QWORD *)(v14 + 48);
  }
  else
  {
    v15 = 0;
  }
  WebCore::Chrome::notifyPopupOpeningObservers(v15);
  (*(void (**)(WTF **__return_ptr, _QWORD, _QWORD *))(**(_QWORD **)(v15 + 16) + 784))(&v24, *(_QWORD *)(v15 + 16), (_QWORD *)v6 + 7);
  v16 = v24;
  v24 = 0;
  v17 = *((_QWORD *)v6 + 14);
  *((_QWORD *)v6 + 14) = v16;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    v18 = v24;
    v24 = 0;
    if (v18)
      (*(void (**)(WTF *))(*(_QWORD *)v18 + 8))(v18);
  }
LABEL_23:
  result = (WebCore::TextFieldInputType *)*((_QWORD *)v6 + 14);
  if (result)
    return (WebCore::TextFieldInputType *)(*(uint64_t (**)(WebCore::TextFieldInputType *, uint64_t))(*(_QWORD *)result + 32))(result, a2);
  return result;
}

uint64_t WebCore::TextFieldInputType::spinButtonStepUp(WebCore::TextFieldInputType *this)
{
  return (*(uint64_t (**)(WebCore::TextFieldInputType *, uint64_t))(*(_QWORD *)this + 224))(this, 1);
}

uint64_t WebCore::TextFieldInputType::spinButtonStepDown(WebCore::TextFieldInputType *this)
{
  return (*(uint64_t (**)(WebCore::TextFieldInputType *, uint64_t))(*(_QWORD *)this + 224))(this, 0xFFFFFFFFLL);
}

uint64_t WebCore::TextFieldInputType::forwardEvent(WebCore::TextFieldInputType *this, WebCore::Event *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;

  result = *((_QWORD *)this + 19);
  if (!result
    || (result = WebCore::SpinButtonElement::forwardEvent((WebCore::SpinButtonElement *)result, a2),
        (*((_BYTE *)a2 + 20) & 0x80) == 0))
  {
    v5 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v5 || (v6 = *(_QWORD *)(v5 + 96)) == 0)
      v6 = WebCore::threadGlobalDataSlow((WebCore *)result);
    v7 = *(_QWORD *)(v6 + 40);
    if (!v7)
    {
      WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v6);
      v7 = *(_QWORD *)(v6 + 40);
    }
    v8 = *((_QWORD *)a2 + 3);
    v9 = *(_QWORD *)(v7 + 816);
    v10 = *(_QWORD *)(v7 + 304);
    v11 = v8 == v9 || v8 == v10;
    if (v11 && *((_QWORD *)this + 20))
    {
      if (WebCore::TextFieldInputType::shouldDrawCapsLockIndicator(this))
        v14 = 367;
      else
        v14 = 6;
      WebCore::StyledElement::setInlineStyleProperty(*((WebCore::StyledElement **)this + 20), (WTF::StringImpl *)7, v14, 1);
    }
    result = (*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)a2 + 88))(a2);
    if (v8 == v9 || (result & 1) != 0 || v8 == v10)
    {
      v12 = *((_QWORD *)this + 3);
      if (v12)
        v13 = *(unsigned int **)(v12 + 8);
      else
        v13 = 0;
      return (uint64_t)WebCore::HTMLTextFormControlElement::forwardEvent(v13, a2);
    }
  }
  return result;
}

_QWORD *WebCore::TextFieldInputType::capsLockStateMayHaveChanged(_QWORD *this)
{
  _QWORD *v1;
  unsigned int v2;

  if (this[20])
  {
    v1 = this;
    if (WebCore::TextFieldInputType::shouldDrawCapsLockIndicator((WebCore::TextFieldInputType *)this))
      v2 = 367;
    else
      v2 = 6;
    return (_QWORD *)WebCore::StyledElement::setInlineStyleProperty((WebCore::StyledElement *)v1[20], (WTF::StringImpl *)7, v2, 1);
  }
  return this;
}

unsigned int *WebCore::TextFieldInputType::elementDidBlur(unsigned int *this, void *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  _DWORD v10[2];

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 64) & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return this;
  if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195CC3A94);
  }
  v3 = this;
  this = (unsigned int *)*((_QWORD *)this + 17);
  if (this)
  {
    v4 = this[6];
    this[6] = v4 + 2;
    v5 = *((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL;
    if (v5)
    {
      if ((*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195CC3AF8);
      }
      if (*(_BYTE *)((*((_QWORD *)this + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) != 42)
      {
        __break(0xC471u);
        JUMPOUT(0x195CC3B18);
      }
    }
    if (v4)
    {
      this[6] = v4;
    }
    else if ((*((_WORD *)this + 15) & 0x400) == 0)
    {
      this = WebCore::Node::removedLastRef((WebCore::Node *)this, a2);
    }
LABEL_9:
    if (!v5)
      return this;
    goto LABEL_10;
  }
  v5 = MEMORY[0x40] & 0xFFFFFFFFFFFFLL;
  if ((MEMORY[0x40] & 0xFFFFFFFFFFFFLL) == 0)
    goto LABEL_9;
  if ((*(_BYTE *)((MEMORY[0x40] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    goto LABEL_32;
  if (*(_BYTE *)((MEMORY[0x40] & 0xFFFFFFFFFFFFLL) + 0x2E) != 42)
  {
    __break(0xC471u);
    JUMPOUT(0x195CC3AD8);
  }
LABEL_10:
  this = *(unsigned int **)(v5 + 144);
  if (!this)
    return this;
  v6 = WebCore::RenderLayer::ensureLayerScrollableArea((WebCore::RenderLayer *)this);
  if ((*(_BYTE *)(v2 + 52) & 7) != 1 || (*(_BYTE *)(v2 + 53) & 4) == 0 || *(_BYTE *)(v2 + 46) == 44)
  {
LABEL_32:
    __break(0xC471u);
    JUMPOUT(0x195CC3A64);
  }
  if ((*(_DWORD *)(v2 + 120) & 0x4000000) != 0)
  {
    if (*(_BYTE *)(v6 + 76))
    {
      v8 = v6;
      WebCore::RenderLayerScrollableArea::computeScrollDimensions((WebCore::RenderLayerScrollableArea *)v6);
      v6 = v8;
    }
    v7 = *(_DWORD *)(v6 + 88);
  }
  else
  {
    v7 = 0;
  }
  v10[0] = v7;
  v10[1] = 0;
  v9 = xmmword_1968DF820;
  WebCore::RenderLayerScrollableArea::scrollToOffset((WebCore::ScrollableArea *)v6, (WebCore::IntPoint *)v10, &v9);
  this = (unsigned int *)*((_QWORD *)v3 + 14);
  if (this)
    return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)this + 16))(this);
  return this;
}

uint64_t WebCore::TextFieldInputType::handleFocusEvent(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  WebCore::Document *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  WebCore::Editor *v12;
  void *v13;
  WebCore::Editor *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unsigned int *v18;
  _QWORD *v19;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 8) + 40) + 8) + 528);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = (unsigned int *)(v2 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 + 1, v3));
      v5 = *(WebCore::Document **)(v2 + 296);
      v6 = *((_QWORD *)v5 + 382);
      if (!v6)
      {
        v17 = result;
        v18 = v3;
        v12 = (WebCore::Editor *)WTF::fastMalloc((WTF *)0x1F8);
        WebCore::Editor::Editor(v12, v5);
        v14 = (WebCore::Editor *)*((_QWORD *)v5 + 382);
        *((_QWORD *)v5 + 382) = v12;
        if (v14)
        {
          WebCore::Editor::~Editor(v14, v13);
          if (*(_DWORD *)v15)
          {
            *(_QWORD *)(v15 + 496) = 0;
            *(_OWORD *)(v15 + 464) = 0u;
            *(_OWORD *)(v15 + 480) = 0u;
            *(_OWORD *)(v15 + 432) = 0u;
            *(_OWORD *)(v15 + 448) = 0u;
            *(_OWORD *)(v15 + 400) = 0u;
            *(_OWORD *)(v15 + 416) = 0u;
            *(_OWORD *)(v15 + 368) = 0u;
            *(_OWORD *)(v15 + 384) = 0u;
            *(_OWORD *)(v15 + 336) = 0u;
            *(_OWORD *)(v15 + 352) = 0u;
            *(_OWORD *)(v15 + 304) = 0u;
            *(_OWORD *)(v15 + 320) = 0u;
            *(_OWORD *)(v15 + 272) = 0u;
            *(_OWORD *)(v15 + 288) = 0u;
            *(_OWORD *)(v15 + 240) = 0u;
            *(_OWORD *)(v15 + 256) = 0u;
            *(_OWORD *)(v15 + 208) = 0u;
            *(_OWORD *)(v15 + 224) = 0u;
            *(_OWORD *)(v15 + 176) = 0u;
            *(_OWORD *)(v15 + 192) = 0u;
            *(_OWORD *)(v15 + 144) = 0u;
            *(_OWORD *)(v15 + 160) = 0u;
            *(_OWORD *)(v15 + 112) = 0u;
            *(_OWORD *)(v15 + 128) = 0u;
            *(_OWORD *)(v15 + 80) = 0u;
            *(_OWORD *)(v15 + 96) = 0u;
            *(_OWORD *)(v15 + 48) = 0u;
            *(_OWORD *)(v15 + 64) = 0u;
            *(_OWORD *)(v15 + 16) = 0u;
            *(_OWORD *)(v15 + 32) = 0u;
            *(_OWORD *)v15 = 0u;
          }
          else
          {
            WTF::fastFree((WTF *)v15, v16);
          }
        }
        v6 = *((_QWORD *)v5 + 382);
        result = v17;
        v3 = v18;
      }
      v7 = *(_QWORD *)(v6 + 8);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
          result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 456))(v8, *(_QWORD *)(*(_QWORD *)(result + 24) + 8));
      }
      do
      {
        v9 = __ldaxr(v3);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v3));
      if (!v10)
      {
        atomic_store(1u, v3);
        v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v11 = off_1E31FE290;
        v11[1] = v3;
        v19 = v11;
        WTF::ensureOnMainThread();
        result = (uint64_t)v19;
        if (v19)
          return (*(uint64_t (**)(_QWORD *))(*v19 + 8))(v19);
      }
    }
  }
  return result;
}

void WebCore::TextFieldInputType::handleBlurEvent(WebCore::TextFieldInputType *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 3);
  if (v1)
    WebCore::HTMLInputElement::endEditing(*(WebCore::HTMLInputElement **)(v1 + 8));
  else
    WebCore::HTMLInputElement::endEditing(0);
}

WebCore *WebCore::TextFieldInputType::shouldSubmitImplicitly(WebCore::TextFieldInputType *this, WebCore::Event *a2)
{
  WebCore *v4;
  WebCore::Event *v5;
  unint64_t StatusReg;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;

  v4 = (WebCore *)(*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)a2 + 104))(a2);
  if ((_DWORD)v4)
    v5 = a2;
  else
    v5 = 0;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  v7 = *(_QWORD *)(StatusReg + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow(v4);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD *)(v8 + 40);
  }
  if (*((_QWORD *)a2 + 3) != *(_QWORD *)(v9 + 2032) || v5 == 0)
  {
    result = (WebCore *)(*(uint64_t (**)(WebCore::Event *))(*(_QWORD *)a2 + 80))(a2);
    if ((_DWORD)result)
    {
      v12 = *(_QWORD *)(StatusReg + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(result);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      if (*((_QWORD *)a2 + 3) == *(_QWORD *)(v14 + 1056))
        return (WebCore *)(WebCore::KeyboardEvent::charCode(a2) == 13);
      else
        return 0;
    }
  }
  else
  {
    v15 = (WTF::StringImpl *)*((_QWORD *)v5 + 11);
    if (v15)
      *(_DWORD *)v15 += 2;
    v17 = 1;
    if ((MEMORY[0x19AEA53F4](v15, "\n", 1) & 1) == 0)
      v17 = (uint64_t)WebCore::InputType::shouldSubmitImplicitly(this, a2);
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v16);
      else
        *(_DWORD *)v15 -= 2;
    }
    return (WebCore *)v17;
  }
  return result;
}

_QWORD *WebCore::TextFieldInputType::createInputRenderer@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;

  v5 = *(_QWORD *)(a1 + 24);
  if (v5)
    v6 = *(_QWORD *)(v5 + 8);
  else
    v6 = 0;
  v7 = bmalloc::api::isoAllocate();
  result = (_QWORD *)WebCore::RenderBlockFlow::RenderBlockFlow(v7, 45, v6, a2, 4);
  *result = off_1E3435FD0;
  *a3 = result;
  return result;
}

uint64_t WebCore::TextFieldInputType::needsContainer(WebCore::TextFieldInputType *this)
{
  return 0;
}

WTF::StringImpl *WebCore::TextFieldInputType::updatePlaceholderText(WTF::StringImpl *this)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *v2;
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WebCore::Node *v16;
  char v17;
  WTF::StringImpl *v18;
  WebCore::Node *v19;
  WTF::StringImpl *v20;
  WebCore::Node *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  char v25;
  _BYTE v26[8];
  WTF::StringImpl *v27;
  char v28;
  WebCore::Node *v29;
  _BYTE v30[8];
  WTF::StringImpl *v31;
  char v32;
  uint64_t v33;
  _QWORD v34[3];
  WTF::StringImpl *v35;

  if (!*((_BYTE *)this + 16))
    return this;
  v1 = this;
  this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 720))(this);
  if (!(_DWORD)this)
    return this;
  v3 = *((_QWORD *)v1 + 3);
  if (v3)
    v4 = *(WTF **)(v3 + 8);
  else
    v4 = 0;
  WebCore::HTMLInputElement::placeholder(v4, v2, &v35);
  if (v35 && *((_DWORD *)v35 + 1))
  {
    v6 = *((_QWORD *)v1 + 18);
    if (v6)
      goto LABEL_36;
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 3) + 8) + 40) + 8);
    *(_DWORD *)(v7 + 24) += 2;
    WebCore::TextControlPlaceholderElement::create((WebCore::TextControlPlaceholderElement *)v7, &v33);
    if (*(_DWORD *)(v7 + 24) == 2)
    {
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7, v8);
    }
    else
    {
      *(_DWORD *)(v7 + 24) -= 2;
    }
    v9 = v33;
    *(_DWORD *)(v33 + 24) += 2;
    v10 = *((_QWORD *)v1 + 18);
    *((_QWORD *)v1 + 18) = v9;
    if (v10)
    {
      if (*(_DWORD *)(v10 + 24) == 2)
      {
        if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v10, v8);
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
      }
    }
    v11 = *((_QWORD *)v1 + 15);
    if (v11)
    {
      v12 = *(_DWORD *)(v11 + 24) + 2;
      *(_DWORD *)(v11 + 24) = v12;
      if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 3) + 8) + 72) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v13 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 3) + 8) + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
        if (v13)
        {
          *(_DWORD *)(v13 + 24) += 2;
          v12 = *(_DWORD *)(v11 + 24);
        }
      }
      else
      {
        v13 = 0;
      }
      *(_DWORD *)(v11 + 24) = v12 + 2;
      v29 = (WebCore::Node *)v11;
      WebCore::ContainerNode::insertBefore(v13, (uint64_t *)v9, &v29, (uint64_t)v30);
      if (v32)
      {
        v15 = v31;
        v31 = 0;
        if (v15)
        {
          if (*(_DWORD *)v15 == 2)
            WTF::StringImpl::destroy(v15, v14);
          else
            *(_DWORD *)v15 -= 2;
        }
      }
      v16 = v29;
      v29 = 0;
      if (v16)
      {
        if (*((_DWORD *)v16 + 6) == 2)
        {
          if ((*((_WORD *)v16 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v16, v14);
        }
        else
        {
          *((_DWORD *)v16 + 6) -= 2;
        }
      }
      if (v13)
      {
        if (*(_DWORD *)(v13 + 24) == 2)
        {
          if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v13, v14);
        }
        else
        {
          *(_DWORD *)(v13 + 24) -= 2;
        }
      }
    }
    else
    {
      if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 3) + 8) + 72) & 0xFFFFFFFFFFFFLL) != 0)
      {
        v11 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1 + 3) + 8) + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
        if (v11)
          *(_DWORD *)(v11 + 24) += 2;
      }
      else
      {
        v11 = 0;
      }
      v19 = (WebCore::Node *)*((_QWORD *)v1 + 17);
      if (v19)
        *((_DWORD *)v19 + 6) += 2;
      v29 = v19;
      WebCore::ContainerNode::insertBefore(v11, (uint64_t *)v9, &v29, (uint64_t)v26);
      if (v28)
      {
        v20 = v27;
        v27 = 0;
        if (v20)
        {
          if (*(_DWORD *)v20 == 2)
            WTF::StringImpl::destroy(v20, v14);
          else
            *(_DWORD *)v20 -= 2;
        }
      }
      v21 = v29;
      v29 = 0;
      if (v21)
      {
        if (*((_DWORD *)v21 + 6) == 2)
        {
          if ((*((_WORD *)v21 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v21, v14);
        }
        else
        {
          *((_DWORD *)v21 + 6) -= 2;
        }
      }
      if (!v11)
      {
LABEL_33:
        if (*(_DWORD *)(v9 + 24) == 2)
        {
          if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v9, v14);
        }
        else
        {
          *(_DWORD *)(v9 + 24) -= 2;
        }
        v6 = *((_QWORD *)v1 + 18);
        if (!v6)
        {
          v17 = 1;
          goto LABEL_37;
        }
LABEL_36:
        v17 = 0;
        *(_DWORD *)(v6 + 24) += 2;
LABEL_37:
        WebCore::HTMLElement::setInnerText((WebCore::ContainerNode *)v6, (WTF *)&v35, &v23);
        if (v25)
        {
          v18 = v24;
          v24 = 0;
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v5);
            else
              *(_DWORD *)v18 -= 2;
          }
        }
        if ((v17 & 1) != 0)
          goto LABEL_7;
        goto LABEL_42;
      }
    }
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, v14);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
    goto LABEL_33;
  }
  v6 = *((_QWORD *)v1 + 18);
  *((_QWORD *)v1 + 18) = 0;
  if (v6)
  {
    WebCore::Node::remove((WebCore::ContainerNode *)v6, v34);
    WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v34, v22);
LABEL_42:
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v5);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
LABEL_7:
  this = v35;
  v35 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v5);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

unsigned int *WebCore::TextFieldInputType::createContainer(_QWORD *a1, const WebCore::Position *a2)
{
  int v2;
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  unsigned int *result;
  WTF::StringImpl *v32;
  WebCore::Node *v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::HTMLTextFormControlElement *v36;
  unsigned int v37;
  uint64_t v38;
  WebCore::HTMLTextFormControlElement *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int *v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  void *v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v56[8];
  WTF::StringImpl *v57;
  char v58;
  _BYTE v59[8];
  WTF::StringImpl *v60;
  char v61;
  _BYTE v62[8];
  WTF::StringImpl *v63;
  char v64;

  v3 = (int)a2;
  if ((byte_1ECE83672 & 1) == 0)
  {
    v52 = "-webkit-textfield-decoration-container";
    v53 = 39;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&algn_1ECE83673[5], (uint64_t)&v52);
    byte_1ECE83672 = 1;
  }
  v5 = *(_QWORD *)(a1[3] + 8);
  if ((*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) != 0)
    v6 = *(_QWORD *)((*(_QWORD *)(v5 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
  else
    v6 = 0;
  *(_DWORD *)(v6 + 24) += 2;
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
  *(_DWORD *)(v7 + 24) += 2;
  if (!v3)
    goto LABEL_6;
  v33 = WebCore::enclosingTextFormControl((WebCore *)(*(_QWORD *)(v7 + 3064) + 120), a2);
  v34 = a1[3];
  if (!v34)
  {
    if (!v33)
      goto LABEL_75;
LABEL_6:
    v8 = 0;
    v9 = 1;
    goto LABEL_7;
  }
  if (v33 != *(WebCore::Node **)(v34 + 8))
    goto LABEL_6;
LABEL_75:
  v8 = WebCore::HTMLTextFormControlElement::selectionStart(v33);
  v35 = a1[3];
  if (v35)
    v36 = *(WebCore::HTMLTextFormControlElement **)(v35 + 8);
  else
    v36 = 0;
  v37 = WebCore::HTMLTextFormControlElement::selectionEnd(v36);
  v38 = a1[3];
  v51 = v37;
  if (v38)
    v39 = *(WebCore::HTMLTextFormControlElement **)(v38 + 8);
  else
    v39 = 0;
  v2 = WebCore::HTMLTextFormControlElement::computeSelectionDirection(v39);
  v9 = 0;
LABEL_7:
  v10 = bmalloc::api::isoAllocate();
  v12 = v10;
  *(_OWORD *)(v10 + 8) = xmmword_1968BC9D0;
  *(_DWORD *)(v10 + 28) = 5148;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = v7 + 96;
  *(_OWORD *)(v10 + 48) = 0u;
  *(_OWORD *)(v10 + 64) = 0u;
  ++*(_DWORD *)(v7 + 3324);
  *(_QWORD *)(v10 + 80) = 0;
  *(_QWORD *)(v10 + 88) = 0;
  v13 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v10 + 96) = v13;
  *(_QWORD *)(v10 + 104) = 0;
  *(_QWORD *)v10 = off_1E33E63D0;
  *(_DWORD *)(v10 + 24) = 4;
  v14 = a1[15];
  a1[15] = v12;
  if (v14)
  {
    if (*(_DWORD *)(v14 + 24) == 2)
    {
      if ((*(_WORD *)(v14 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v14, v11);
    }
    else
    {
      *(_DWORD *)(v14 + 24) -= 2;
    }
  }
  WebCore::ContainerNode::appendChild(v6, (WebCore::Node *)v12, (uint64_t)v62);
  if (v64)
  {
    v16 = v63;
    v63 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
  }
  {
    v52 = "-webkit-textfield-decoration-container";
    v53 = 39;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::UserAgentParts::webkitTextfieldDecorationContainer(void)::webkitTextfieldDecorationContainer, (uint64_t)&v52);
  }
  v17 = *(_QWORD *)(v12 + 104);
  if (v17
    && ((v18 = *(_DWORD *)(v17 + 4), (v18 & 1) != 0)
      ? (v19 = *(uint64_t **)(v17 + 40), v20 = *(_DWORD *)(v17 + 52))
      : (v19 = (uint64_t *)(v17 + 32), v20 = v18 >> 5),
        v20))
  {
    v21 = 0;
    while (1)
    {
      v22 = *v19;
      if (*v19 == WebCore::HTMLNames::useragentpartAttr
        || *(_QWORD *)(v22 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
        && *(_QWORD *)(v22 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
      {
        break;
      }
      ++v21;
      v19 += 2;
      if (v20 == v21)
        goto LABEL_26;
    }
  }
  else
  {
LABEL_26:
    v21 = 0xFFFFFFFFLL;
  }
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v12, v21, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, &WebCore::UserAgentParts::webkitTextfieldDecorationContainer(void)::webkitTextfieldDecorationContainer, 0);
  v23 = bmalloc::api::isoAllocate();
  v25 = v23;
  *(_OWORD *)(v23 + 8) = xmmword_1968BC9D0;
  *(_DWORD *)(v23 + 28) = 5148;
  *(_QWORD *)(v23 + 32) = 0;
  *(_QWORD *)(v23 + 40) = v7 + 96;
  *(_OWORD *)(v23 + 48) = 0u;
  *(_OWORD *)(v23 + 64) = 0u;
  ++*(_DWORD *)(v7 + 3324);
  *(_QWORD *)(v23 + 80) = 0;
  *(_QWORD *)(v23 + 88) = 0;
  v26 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v23 + 96) = v26;
  *(_QWORD *)(v23 + 104) = 0;
  *(_QWORD *)v23 = off_1E33E68C0;
  *(_DWORD *)(v23 + 24) = 4;
  v27 = a1[16];
  a1[16] = v25;
  if (v27)
  {
    if (*(_DWORD *)(v27 + 24) == 2)
    {
      if ((*(_WORD *)(v27 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v27, v24);
    }
    else
    {
      *(_DWORD *)(v27 + 24) -= 2;
    }
  }
  WebCore::ContainerNode::appendChild(a1[15], (WebCore::Node *)v25, (uint64_t)v59);
  if (v61)
  {
    v29 = v60;
    v60 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
        WTF::StringImpl::destroy(v29, v28);
      else
        *(_DWORD *)v29 -= 2;
    }
  }
  v30 = a1[17];
  if (v30)
    *(_DWORD *)(v30 + 24) += 2;
  result = (unsigned int *)WebCore::ContainerNode::appendChild(v25, (WebCore::Node *)v30, (uint64_t)v56);
  if (v58)
  {
    result = (unsigned int *)v57;
    v57 = 0;
    if (result)
    {
      if (*result == 2)
        result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v32);
      else
        *result -= 2;
    }
  }
  if (*(_DWORD *)(v30 + 24) == 2)
  {
    if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v30, v32);
  }
  else
  {
    *(_DWORD *)(v30 + 24) -= 2;
  }
  if ((v9 & 1) == 0)
  {
    v40 = WebCore::Document::eventLoop((WebCore::Document *)v7, v32);
    ++*(_DWORD *)(v40 + 8);
    v52 = (const char *)__PAIR64__(v51, v8);
    LODWORD(v53) = v2;
    v41 = a1[3];
    if (v41 && (v42 = *(_QWORD *)(v41 + 8)) != 0)
    {
      v43 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v42);
      v44 = v43;
      if (v43)
      {
        do
          v45 = __ldaxr(v43);
        while (__stlxr(v45 + 1, v43));
      }
    }
    else
    {
      v44 = 0;
    }
    v46 = WTF::fastMalloc((WTF *)0x20);
    *(_QWORD *)v46 = &off_1E33DA018;
    v47 = v53;
    *(_QWORD *)(v46 + 8) = v52;
    *(_DWORD *)(v46 + 16) = v47;
    v54 = 0;
    v55 = v46;
    *(_QWORD *)(v46 + 24) = v44;
    WebCore::EventLoopTaskGroup::queueTask(v40, 0, &v55);
    v49 = v55;
    v55 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    result = (unsigned int *)WebCore::TextFieldInputType::createContainer(WebCore::TextFieldInputType::PreserveSelectionRange)::$_0::~$_0((uint64_t)&v52, v48);
    v50 = *(_DWORD *)(v40 + 8);
    if (!v50)
    {
      __break(0xC471u);
      JUMPOUT(0x195CC47C0);
    }
    *(_DWORD *)(v40 + 8) = v50 - 1;
  }
  if (*(_DWORD *)(v25 + 24) == 2)
  {
    if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v25, v32);
  }
  else
  {
    *(_DWORD *)(v25 + 24) -= 2;
  }
  if (*(_DWORD *)(v12 + 24) == 2)
  {
    if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v12, v32);
  }
  else
  {
    *(_DWORD *)(v12 + 24) -= 2;
  }
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      result = WebCore::Node::removedLastRef((WebCore::Node *)v7, v32);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v6, v32);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::TextFieldInputType::shouldDrawCapsLockIndicator(WebCore::TextFieldInputType *this)
{
  uint64_t v1;
  uint64_t v2;
  WebCore::PlatformKeyboardEvent *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD *v19;
  unsigned int v20;
  _QWORD *v21;

  v1 = *((_QWORD *)this + 3);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(v1 + 8);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 1248) != v2)
    return 0;
  if ((*(_BYTE *)(v2 + 160) & 0x18) != 0)
    return 0;
  v4 = (WebCore::PlatformKeyboardEvent *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 112) + 288))(v2 + 112);
  if ((_DWORD)v4)
  {
    if ((*(_BYTE *)(v2 + 160) & 0x20) != 0)
      return 0;
  }
  v5 = *((_QWORD *)this + 3);
  if (!v5)
    return 0;
  v6 = *(_QWORD *)(v5 + 8);
  if ((*(_WORD *)(v6 + 230) & 0x3800) == 0x1800)
    return 0;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 40) + 8) + 528);
  if (!v8)
    return 0;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    return 0;
  v10 = (unsigned int *)(v9 + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  v12 = *(_QWORD *)(*(_QWORD *)(v9 + 296) + 3064);
  if ((*(_WORD *)(v12 + 256) & 4) != 0
    && (v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 8) + 528)) != 0
    && (v14 = *(_QWORD *)(v13 + 8)) != 0
    && (v15 = *(_QWORD *)(v14 + 24)) != 0
    && (v16 = *(_QWORD *)(v15 + 8)) != 0
    && (*(_WORD *)(*(_QWORD *)(v16 + 72) + 26) & 1) != 0)
  {
    result = (WebCore::PlatformKeyboardEvent::currentStateOfModifierKeys(v4) >> 4) & 1;
  }
  else
  {
    result = 0;
  }
  do
  {
    v17 = __ldaxr(v10);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v10));
  if (!v18)
  {
    v20 = result;
    atomic_store(1u, v10);
    v19 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v19 = off_1E31FE290;
    v19[1] = v10;
    v21 = v19;
    WTF::ensureOnMainThread();
    if (v21)
      (*(void (**)(_QWORD *))(*v21 + 8))(v21);
    return v20;
  }
  return result;
}

uint64_t WebCore::TextFieldInputType::updateAutoFillButton(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  WebCore::Element *v6;
  _QWORD *v7;
  WebCore::Element *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WebCore::Element *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unsigned __int16 *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  unsigned int v19;
  _QWORD v20[3];
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  if (*(_BYTE *)(this + 16))
  {
    v1 = this;
    if (*(_QWORD *)(this + 160))
    {
      if (WebCore::TextFieldInputType::shouldDrawCapsLockIndicator((WebCore::TextFieldInputType *)this))
        v19 = 367;
      else
        v19 = 6;
      WebCore::StyledElement::setInlineStyleProperty(*(WebCore::StyledElement **)(v1 + 160), (WTF::StringImpl *)7, v19, 1);
    }
    v2 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 8);
    if ((*(_BYTE *)(v2 + 160) & 0x18) != 0
      || (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v2 + 112) + 288))(v2 + 112)
      && (*(_BYTE *)(v2 + 160) & 0x20) != 0
      || (v3 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 8) + 230), (v3 & 0x3800) == 0))
    {
      this = *(_QWORD *)(v1 + 168);
      if (this)
        return WebCore::StyledElement::setInlineStyleProperty((WebCore::StyledElement *)this, (WTF::StringImpl *)7, 6u, 1);
    }
    else
    {
      if (!*(_QWORD *)(v1 + 120))
      {
        WebCore::TextFieldInputType::createContainer((_QWORD *)v1, (const WebCore::Position *)1);
        v3 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v1 + 24) + 8) + 230);
      }
      v4 = v3 >> 11;
      v5 = v4 & 7;
      v6 = *(WebCore::Element **)(v1 + 168);
      if (!v6)
      {
        WebCore::TextFieldInputType::createAutoFillButton((WTF::StringImpl *)v1, v4 & 7);
        v6 = *(WebCore::Element **)(v1 + 168);
      }
      v7 = (_QWORD *)WebCore::Element::userAgentPart(v6);
      if (WebCore::isAutoFillButtonTypeChanged(v7, v5))
      {
        v8 = *(WebCore::Element **)(v1 + 168);
        WebCore::autoFillButtonTypeToAutoFillButtonPseudoClassName(&v22, v5);
        WebCore::Element::setUserAgentPart(v8, &v22);
        v10 = v22;
        v22 = 0;
        if (v10)
        {
          if (*(_DWORD *)v10 == 2)
            WTF::StringImpl::destroy(v10, v9);
          else
            *(_DWORD *)v10 -= 2;
        }
        v11 = *(WebCore::Element **)(v1 + 168);
        WebCore::autoFillButtonTypeToAccessibilityLabel(&v21, v5);
        WTF::AtomString::AtomString(&v22, &v21);
        WebCore::Element::setAttributeWithoutSynchronization(v11, (const WebCore::QualifiedName *)&WebCore::HTMLNames::aria_labelAttr, &v22);
        v13 = v22;
        v22 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v12);
          else
            *(_DWORD *)v13 -= 2;
        }
        v14 = v21;
        v21 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v12);
          else
            *(_DWORD *)v14 -= 2;
        }
        v15 = *(unsigned __int16 **)(v1 + 168);
        WebCore::autoFillButtonTypeToAutoFillButtonText(&v22, v5);
        WebCore::Node::setTextContent(v15, (uint64_t)&v22, v20);
        WebCore::ExceptionOr<void>::~ExceptionOr((uint64_t)v20, v16);
        v18 = v22;
        v22 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v17);
          else
            *(_DWORD *)v18 -= 2;
        }
      }
      return WebCore::StyledElement::setInlineStyleProperty(*(WebCore::StyledElement **)(v1 + 168), (WTF::StringImpl *)7, 0x16Fu, 1);
    }
  }
  return this;
}

unsigned int *WebCore::TextFieldInputType::dataListMayHaveChanged(unsigned int *this)
{
  unsigned int *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::StyledElement *v21;
  WTF::StringImpl *v22;
  unsigned int v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  void *v30;
  _BOOL4 isUserActionElementFocused;
  uint64_t v32;
  WTF::StringImpl **v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  uint64_t v39;
  _QWORD v40[2];

  if (*((_BYTE *)this + 16))
  {
    v1 = this;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    std::pair<WTF::String,WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]((uint64_t)(this + 22), (WTF::StringImpl *)&v37);
    if (HIDWORD(v39))
    {
      v32 = 16 * HIDWORD(v39);
      v33 = (WTF::StringImpl **)((char *)v38 + 8);
      do
      {
        v34 = *v33;
        *v33 = 0;
        if (v34)
        {
          if (*(_DWORD *)v34 == 2)
            WTF::StringImpl::destroy(v34, v2);
          else
            *(_DWORD *)v34 -= 2;
        }
        v35 = *(v33 - 1);
        *(v33 - 1) = 0;
        if (v35)
        {
          if (*(_DWORD *)v35 == 2)
            WTF::StringImpl::destroy(v35, v2);
          else
            *(_DWORD *)v35 -= 2;
        }
        v33 += 2;
        v32 -= 16;
      }
      while (v32);
    }
    v3 = v38;
    if (v38)
    {
      v38 = 0;
      LODWORD(v39) = 0;
      WTF::fastFree(v3, v2);
    }
    this = (unsigned int *)v37;
    v37 = 0;
    if (this)
    {
      if (*this == 2)
        this = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)this, v2);
      else
        *this -= 2;
    }
    if (!*((_QWORD *)v1 + 10))
    {
      if (!*((_QWORD *)v1 + 15))
        this = WebCore::TextFieldInputType::createContainer(v1, (const WebCore::Position *)1);
      v4 = *((_QWORD *)v1 + 3);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
          v7 = bmalloc::api::isoAllocate();
          v8 = (void *)v7;
          *(_OWORD *)(v7 + 8) = xmmword_1968BC9D0;
          *(_QWORD *)(v7 + 24) = 0x101C00000002;
          *(_QWORD *)(v7 + 32) = 0;
          *(_QWORD *)(v7 + 40) = v6 + 96;
          *(_OWORD *)(v7 + 48) = 0u;
          *(_OWORD *)(v7 + 64) = 0u;
          ++*(_DWORD *)(v6 + 3324);
          *(_QWORD *)(v7 + 80) = 0;
          *(_QWORD *)(v7 + 88) = 0;
          v9 = WebCore::HTMLNames::divTag;
          if (WebCore::HTMLNames::divTag)
            ++*(_DWORD *)WebCore::HTMLNames::divTag;
          *(_QWORD *)(v7 + 96) = v9;
          *(_QWORD *)(v7 + 104) = 0;
          *(_QWORD *)v7 = off_1E33DF868;
          *(_QWORD *)(v7 + 112) = v1 + 16;
          v10 = *((_QWORD *)v1 + 10);
          *((_QWORD *)v1 + 10) = v8;
          if (v10)
          {
            if (*(_DWORD *)(v10 + 24) == 2)
            {
              if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
              {
                WebCore::Node::removedLastRef((WebCore::Node *)v10, v8);
                v8 = (void *)*((_QWORD *)v1 + 10);
              }
            }
            else
            {
              *(_DWORD *)(v10 + 24) -= 2;
            }
          }
          WebCore::ContainerNode::appendChild(*((_QWORD *)v1 + 15), (WebCore::Node *)v8, (uint64_t)&v37);
          if ((_BYTE)v39)
          {
            v12 = v38;
            v38 = 0;
            if (v12)
            {
              if (*(_DWORD *)v12 == 2)
                WTF::StringImpl::destroy(v12, v11);
              else
                *(_DWORD *)v12 -= 2;
            }
          }
          v13 = (WTF::StringImpl *)*((_QWORD *)v1 + 10);
          {
            v40[0] = "-webkit-list-button";
            v40[1] = 20;
            v36 = v13;
            WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::UserAgentParts::webkitListButton(void)::webkitListButton, (uint64_t)v40);
            v13 = v36;
          }
          v14 = *((_QWORD *)v13 + 13);
          if (v14
            && ((v15 = *(_DWORD *)(v14 + 4), (v15 & 1) != 0)
              ? (v16 = *(uint64_t **)(v14 + 40), v17 = *(_DWORD *)(v14 + 52))
              : (v16 = (uint64_t *)(v14 + 32), v17 = v15 >> 5),
                v17))
          {
            v18 = 0;
            while (1)
            {
              v19 = *v16;
              if (*v16 == WebCore::HTMLNames::useragentpartAttr
                || *(_QWORD *)(v19 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
                && *(_QWORD *)(v19 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
              {
                break;
              }
              ++v18;
              v16 += 2;
              if (v17 == v18)
                goto LABEL_32;
            }
          }
          else
          {
LABEL_32:
            v18 = 0xFFFFFFFFLL;
          }
          WebCore::Element::setAttributeInternal(v13, v18, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, (WTF::StringImpl **)&WebCore::UserAgentParts::webkitListButton(void)::webkitListButton, 0);
          this = (unsigned int *)WebCore::StyledElement::setInlineStyleProperty(*((WebCore::StyledElement **)v1 + 10), (WTF::StringImpl *)7, 6u, 1);
        }
      }
    }
    v20 = *((_QWORD *)v1 + 3);
    if (v20)
    {
      this = *(unsigned int **)(v20 + 8);
      if (this)
      {
        v21 = (WebCore::StyledElement *)*((_QWORD *)v1 + 10);
        WebCore::HTMLInputElement::dataList((uint64_t)this, &v37);
        v22 = v37;
        if (v37)
          v23 = 367;
        else
          v23 = 6;
        WebCore::StyledElement::setInlineStyleProperty(v21, (WTF::StringImpl *)7, v23, 1);
        if (v22)
        {
          if (*((_DWORD *)v22 + 6) == 2)
          {
            if ((*((_WORD *)v22 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v22, v24);
          }
          else
          {
            *((_DWORD *)v22 + 6) -= 2;
          }
        }
        v25 = *((_QWORD *)v1 + 3);
        v26 = v25 ? *(_QWORD *)(v25 + 8) : 0;
        WebCore::HTMLInputElement::dataList(v26, &v37);
        this = (unsigned int *)v37;
        if (v37)
        {
          v28 = *((_QWORD *)v1 + 3);
          if (v28)
            v28 = *(_QWORD *)(v28 + 8);
          if ((*(_BYTE *)(v28 + 54) & 2) != 0)
          {
            v29 = v37;
            isUserActionElementFocused = WebCore::Element::isUserActionElementFocused((WebCore::Element *)v28);
            this = (unsigned int *)v29;
            if (*((_DWORD *)v29 + 6) == 2)
            {
              if ((*((_WORD *)v29 + 15) & 0x400) != 0)
              {
                if (!isUserActionElementFocused)
                  return this;
              }
              else
              {
                this = WebCore::Node::removedLastRef(v29, v30);
                if (!isUserActionElementFocused)
                  return this;
              }
            }
            else
            {
              *((_DWORD *)v29 + 6) -= 2;
              if (!isUserActionElementFocused)
                return this;
            }
            return (unsigned int *)WebCore::TextFieldInputType::displaySuggestions((WebCore::TextFieldInputType *)v1, 3);
          }
          if (*((_DWORD *)v37 + 6) == 2)
          {
            if ((*((_WORD *)v37 + 15) & 0x400) == 0)
              return WebCore::Node::removedLastRef(v37, v27);
          }
          else
          {
            *((_DWORD *)v37 + 6) -= 2;
          }
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::TextFieldInputType::innerSpinButtonElement(WebCore::TextFieldInputType *this)
{
  return *((_QWORD *)this + 19);
}

uint64_t WebCore::TextFieldInputType::autoFillButtonElement(WebCore::TextFieldInputType *this)
{
  return *((_QWORD *)this + 21);
}

uint64_t WebCore::TextFieldInputType::placeholderElement(WebCore::TextFieldInputType *this)
{
  return *((_QWORD *)this + 18);
}

uint64_t WebCore::TextFieldInputType::disabledStateChanged(uint64_t this)
{
  WebCore::StyledElement **v1;
  unsigned int *v2;
  unsigned int v3;

  if (*(_BYTE *)(this + 16))
  {
    v1 = (WebCore::StyledElement **)this;
    v2 = *(unsigned int **)(this + 152);
    if (v2)
      WebCore::SpinButtonElement::releaseCapture(v2);
    if (v1[20])
    {
      if (WebCore::TextFieldInputType::shouldDrawCapsLockIndicator((WebCore::TextFieldInputType *)v1))
        v3 = 367;
      else
        v3 = 6;
      WebCore::StyledElement::setInlineStyleProperty(v1[20], (WTF::StringImpl *)7, v3, 1);
    }
    return WebCore::TextFieldInputType::updateAutoFillButton((uint64_t)v1);
  }
  return this;
}

uint64_t WebCore::TextFieldInputType::readOnlyStateChanged(uint64_t this)
{
  WebCore::StyledElement **v1;
  unsigned int *v2;
  unsigned int v3;

  if (*(_BYTE *)(this + 16))
  {
    v1 = (WebCore::StyledElement **)this;
    v2 = *(unsigned int **)(this + 152);
    if (v2)
      WebCore::SpinButtonElement::releaseCapture(v2);
    if (v1[20])
    {
      if (WebCore::TextFieldInputType::shouldDrawCapsLockIndicator((WebCore::TextFieldInputType *)v1))
        v3 = 367;
      else
        v3 = 6;
      WebCore::StyledElement::setInlineStyleProperty(v1[20], (WTF::StringImpl *)7, v3, 1);
    }
    return WebCore::TextFieldInputType::updateAutoFillButton((uint64_t)v1);
  }
  return this;
}

uint64_t WebCore::TextFieldInputType::shouldUseInputMethod(WebCore::TextFieldInputType *this)
{
  return 1;
}

WTF::StringImpl *WebCore::TextFieldInputType::handleBeforeTextInsertedEvent(WebCore::TextFieldInputType *this, WebCore::BeforeTextInsertedEvent *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  int v6;
  uint64_t v7;
  WebCore::Element *v8;
  int v9;
  unsigned int v10;
  int *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v19;
  BOOL v20;
  unsigned int v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unsigned int v26;
  char v27;
  WTF::StringImpl *v28;
  int v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *result;
  uint64_t v32;
  WebCore::HTMLTextFormControlElement *v33;
  int v34;
  uint64_t v35;
  WebCore::HTMLTextFormControlElement *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;

  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 3) + 8) + 1408))(&v40);
  v4 = v40;
  if (v40)
  {
    WebCore::innerTextValueFrom((WebCore *)&v39, (unint64_t)v40);
    v37 = v40;
    v40 = 0;
    if (v37)
    {
      if (*((_DWORD *)v37 + 6) == 2)
      {
        if ((*((_WORD *)v37 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v37, v4);
      }
      else
      {
        *((_DWORD *)v37 + 6) -= 2;
      }
    }
    v5 = v39;
    if (v39)
      goto LABEL_5;
  }
  else
  {
    v5 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v5 += 2;
    v39 = v5;
    if (v5)
    {
LABEL_5:
      v6 = *((_DWORD *)v5 + 1);
      goto LABEL_6;
    }
  }
  v6 = 0;
LABEL_6:
  v7 = *((_QWORD *)this + 3);
  if (v7)
    v8 = *(WebCore::Element **)(v7 + 8);
  else
    v8 = 0;
  if ((*((_BYTE *)v8 + 54) & 2) != 0 && WebCore::Element::isUserActionElementFocused(v8))
  {
    v32 = *((_QWORD *)this + 3);
    if (v32)
      v33 = *(WebCore::HTMLTextFormControlElement **)(v32 + 8);
    else
      v33 = 0;
    v34 = WebCore::HTMLTextFormControlElement::selectionStart(v33);
    v35 = *((_QWORD *)this + 3);
    if (v35)
      v36 = *(WebCore::HTMLTextFormControlElement **)(v35 + 8);
    else
      v36 = 0;
    v9 = v34 - WebCore::HTMLTextFormControlElement::selectionEnd(v36);
  }
  else
  {
    v9 = 0;
  }
  v10 = 0x80000;
  if ((*((_DWORD *)this + 3) & 0x2A8820) != 0)
  {
    if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 172) >= 0x80000u)
      v10 = 0x80000;
    else
      v10 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 172);
  }
  v11 = (int *)*((_QWORD *)a2 + 9);
  if (!v11)
    goto LABEL_67;
  v12 = *v11;
  v13 = v11[1];
  *v11 += 2;
  if (v13)
  {
    v14 = *((_QWORD *)v11 + 1);
    v15 = v13;
    while (1)
    {
      v16 = v15 - 1;
      v17 = (v11[4] & 4) != 0 ? *(unsigned __int8 *)(v14 + v16) : *(unsigned __int16 *)(v14 + 2 * v16);
      if (v17 >= 0xE)
        break;
      if (v17 != 13 && v17 != 10)
        break;
      --v15;
      if (!v16)
        goto LABEL_28;
    }
  }
  else
  {
LABEL_28:
    v15 = 0;
  }
  v19 = v9 + v6;
  v20 = v10 >= v19;
  v21 = v10 - v19;
  if (v20)
    v22 = v21;
  else
    v22 = 0;
  if (v13 <= v15)
  {
    *v11 = v12 + 4;
    v38 = (WTF::StringImpl *)v11;
LABEL_34:
    WTF::StringImpl::replace();
    v23 = v40;
    goto LABEL_35;
  }
  WTF::StringImpl::substring((WTF::StringImpl *)v11);
  if (v38)
    goto LABEL_34;
  v23 = 0;
LABEL_35:
  if (*v11 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v11, v4);
  else
    *v11 -= 2;
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
    {
      WTF::StringImpl::destroy(v38, v4);
      if (!v23)
        goto LABEL_67;
      goto LABEL_41;
    }
    *(_DWORD *)v38 -= 2;
  }
  if (!v23)
    goto LABEL_67;
LABEL_41:
  WTF::StringImpl::replace();
  v24 = v40;
  if (*(_DWORD *)v23 != 2)
  {
    *(_DWORD *)v23 -= 2;
    if (v24)
      goto LABEL_43;
LABEL_67:
    v25 = 0;
    goto LABEL_68;
  }
  WTF::StringImpl::destroy(v23, v4);
  if (!v24)
    goto LABEL_67;
LABEL_43:
  WTF::StringImpl::replace();
  v25 = v40;
  if (*(_DWORD *)v24 != 2)
  {
    *(_DWORD *)v24 -= 2;
    if (v25)
      goto LABEL_45;
LABEL_68:
    v27 = 1;
LABEL_47:
    v40 = v25;
    v28 = v25;
    if (!v25)
      goto LABEL_50;
    goto LABEL_48;
  }
  WTF::StringImpl::destroy(v24, v4);
  if (!v25)
    goto LABEL_68;
LABEL_45:
  v26 = *((_DWORD *)v25 + 1);
  if (v26 <= v22)
  {
    v27 = 0;
    *(_DWORD *)v25 += 2;
    goto LABEL_47;
  }
  if (v22)
  {
    if ((*((_BYTE *)v25 + 16) & 4) == 0 && (*(_WORD *)(*((_QWORD *)v25 + 1) + 2 * (v22 - 1)) & 0xFC00) == 0xD800)
      --v22;
    if (v26 <= v22)
    {
      v27 = 0;
      v29 = *(_DWORD *)v25 + 2;
      *(_DWORD *)v25 = v29;
      v40 = v25;
      v28 = v25;
      goto LABEL_49;
    }
  }
  WTF::StringImpl::substring(v25);
  v27 = 0;
  v28 = v40;
  if (v40)
  {
LABEL_48:
    v29 = *(_DWORD *)v28;
LABEL_49:
    *(_DWORD *)v28 = v29 + 2;
  }
LABEL_50:
  v30 = (WTF::StringImpl *)*((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 9) = v28;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
    {
      WTF::StringImpl::destroy(v30, v4);
      v28 = v40;
    }
    else
    {
      *(_DWORD *)v30 -= 2;
    }
  }
  v40 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
    {
      WTF::StringImpl::destroy(v28, v4);
      if ((v27 & 1) != 0)
        goto LABEL_59;
      goto LABEL_57;
    }
    *(_DWORD *)v28 -= 2;
  }
  if ((v27 & 1) != 0)
    goto LABEL_59;
LABEL_57:
  if (*(_DWORD *)v25 == 2)
    WTF::StringImpl::destroy(v25, v4);
  else
    *(_DWORD *)v25 -= 2;
LABEL_59:
  result = v39;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(v39, v4);
    else
      *(_DWORD *)v39 -= 2;
  }
  return result;
}

uint64_t WebCore::TextFieldInputType::shouldRespectListAttribute(WebCore::TextFieldInputType *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    return (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 8) + 680) + 704) >> 46) & 1;
  else
    return 0;
}

uint64_t WebCore::TextFieldInputType::appendFormData(WebCore::TextFieldInputType *this, WebCore::DOMFormData *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v14;

  WebCore::InputType::appendFormData(this, a2);
  v4 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (*(_DWORD *)(*(_QWORD *)(v4 + 240) + 12) == 1024)
    return 1;
  v5 = *(_QWORD *)(v4 + 104);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 + 4);
    if ((v6 & 1) != 0)
    {
      v7 = *(_QWORD *)(v5 + 40);
      LODWORD(v8) = *(_DWORD *)(v5 + 52);
      if ((_DWORD)v8)
      {
LABEL_5:
        v8 = v8;
        v9 = (WTF::StringImpl **)(v7 + 8);
        while (1)
        {
          v10 = (uint64_t)*(v9 - 1);
          if (v10 == WebCore::HTMLNames::dirnameAttr
            || *(_QWORD *)(v10 + 24) == *(_QWORD *)(WebCore::HTMLNames::dirnameAttr + 24)
            && *(_QWORD *)(v10 + 32) == *(_QWORD *)(WebCore::HTMLNames::dirnameAttr + 32))
          {
            goto LABEL_14;
          }
          v9 += 2;
          if (!--v8)
          {
            v9 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
            goto LABEL_14;
          }
        }
      }
    }
    else
    {
      v7 = v5 + 32;
      LODWORD(v8) = v6 >> 5;
      if ((_DWORD)v8)
        goto LABEL_5;
    }
  }
  v9 = (WTF::StringImpl **)MEMORY[0x1E0CBF2F8];
LABEL_14:
  if (*v9)
  {
    WebCore::HTMLTextFormControlElement::directionForFormData((WebCore::HTMLTextFormControlElement **)v4, &v14);
    WebCore::DOMFormData::append(a2, v9, &v14);
    v12 = v14;
    v14 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v11);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  return 1;
}

void WebCore::TextFieldInputType::convertFromVisibleValue(const WTF::String *a1@<X1>, _QWORD *a2@<X8>)
{
  _DWORD *v3;

  v3 = *(_DWORD **)a1;
  if (*(_QWORD *)a1)
    *v3 += 2;
  *a2 = v3;
}

WTF::StringImpl *WebCore::TextFieldInputType::subtreeHasChanged(WebCore::TextFieldInputType *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  int v8;
  uint64_t v9;
  WebCore::HTMLInputElement *v10;
  uint64_t v11;
  WebCore::HTMLTextFormControlElement *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *result;
  WTF::StringImpl *v17;
  void *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WebCore::Node *ElementSibling;
  WebCore::Element *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;

  *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 168) |= 4u;
  (*(void (**)(WTF::StringImpl **__return_ptr))(**(_QWORD **)(*((_QWORD *)this + 3) + 8) + 1408))(&v24);
  if (v24)
  {
    WebCore::innerTextValueFrom((WebCore *)&v23, (unint64_t)v24);
    v19 = v24;
    v24 = 0;
    if (v19)
    {
      if (*((_DWORD *)v19 + 6) == 2)
      {
        if ((*((_WORD *)v19 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v19, v18);
      }
      else
      {
        *((_DWORD *)v19 + 6) -= 2;
      }
    }
  }
  else
  {
    v2 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v2 += 2;
    v23 = v2;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::TextFieldInputType *, WTF::StringImpl **))(*(_QWORD *)this + 944))(&v24, this, &v23);
  v4 = v23;
  v23 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  if (((*(uint64_t (**)(WebCore::TextFieldInputType *))(*(_QWORD *)this + 824))(this) & 1) == 0)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::TextFieldInputType *, WTF::StringImpl **))(*(_QWORD *)this + 296))(&v23, this, &v24);
    v7 = v23;
    v6 = v24;
    v23 = 0;
    v24 = v7;
    if (v6)
    {
      v8 = *(_DWORD *)v6 - 2;
      if (*(_DWORD *)v6 != 2)
      {
LABEL_11:
        *(_DWORD *)v6 = v8;
        goto LABEL_12;
      }
      WTF::StringImpl::destroy(v6, v5);
      v6 = v23;
      v23 = 0;
      if (v6)
      {
        v8 = *(_DWORD *)v6 - 2;
        if (*(_DWORD *)v6 != 2)
          goto LABEL_11;
        WTF::StringImpl::destroy(v6, v17);
      }
    }
  }
LABEL_12:
  v9 = *((_QWORD *)this + 3);
  if (v9)
    v10 = *(WebCore::HTMLInputElement **)(v9 + 8);
  else
    v10 = 0;
  WebCore::HTMLInputElement::setValueFromRenderer(v10, (const WTF::String *)&v24);
  v11 = *((_QWORD *)this + 3);
  if (v11)
    v12 = *(WebCore::HTMLTextFormControlElement **)(v11 + 8);
  else
    v12 = 0;
  WebCore::HTMLTextFormControlElement::updatePlaceholderVisibility(v12);
  v13 = *((_QWORD *)this + 3);
  if (v13)
    v14 = *(_QWORD *)(v13 + 8);
  else
    v14 = 0;
  WebCore::Node::invalidateStyle(v14, 4u, 0);
  if ((*(_BYTE *)(v14 + 71) & 1) != 0)
  {
    v20 = *(_QWORD *)(v14 + 32);
    if (!v20 || (*(_WORD *)(v20 + 28) & 8) == 0 || (*(_BYTE *)(v20 + 70) & 4) == 0)
    {
      ElementSibling = (WebCore::Node *)WebCore::Node::nextElementSibling(v14);
      WebCore::invalidateForSiblingCombinators(ElementSibling, v22);
    }
  }
  (*(void (**)(WebCore::TextFieldInputType *))(*(_QWORD *)this + 952))(this);
  result = v24;
  v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::TextFieldInputType::spinButtonStepDown(WebCore::TextFieldInputType *this)
{
  return (*(uint64_t (**)(char *, uint64_t))(*((_QWORD *)this - 4) + 224))((char *)this - 32, 0xFFFFFFFFLL);
}

uint64_t `non-virtual thunk to'WebCore::TextFieldInputType::spinButtonStepUp(WebCore::TextFieldInputType *this)
{
  return (*(uint64_t (**)(char *, uint64_t))(*((_QWORD *)this - 4) + 224))((char *)this - 32, 1);
}

unsigned int *WebCore::TextFieldInputType::focusAndSelectSpinButtonOwner(WebCore::TextFieldInputType *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *result;
  void *v4;
  uint64_t v5[2];

  v1 = *((_QWORD *)this + 3);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  *(_DWORD *)(v2 + 24) += 2;
  WORD2(v5[0]) = 0;
  LODWORD(v5[0]) = 0;
  WebCore::Element::focus((unsigned int *)v2, v5);
  v5[0] = 0;
  v5[1] = 0;
  result = (unsigned int *)WebCore::HTMLTextFormControlElement::setSelectionRange(v2, 0, 0xFFFFFFFF, 0, 3, v5, 0);
  if ((_DWORD)result)
    result = (unsigned int *)WebCore::HTMLTextFormControlElement::scheduleSelectEvent((WebCore::HTMLTextFormControlElement *)v2);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return result;
}

unsigned int *`non-virtual thunk to'WebCore::TextFieldInputType::focusAndSelectSpinButtonOwner(WebCore::TextFieldInputType *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *result;
  void *v4;
  uint64_t v5[2];

  v1 = *((_QWORD *)this - 1);
  if (v1)
    v2 = *(_QWORD *)(v1 + 8);
  else
    v2 = 0;
  *(_DWORD *)(v2 + 24) += 2;
  WORD2(v5[0]) = 0;
  LODWORD(v5[0]) = 0;
  WebCore::Element::focus((unsigned int *)v2, v5);
  v5[0] = 0;
  v5[1] = 0;
  result = (unsigned int *)WebCore::HTMLTextFormControlElement::setSelectionRange(v2, 0, 0xFFFFFFFF, 0, 3, v5, 0);
  if ((_DWORD)result)
    result = (unsigned int *)WebCore::HTMLTextFormControlElement::scheduleSelectEvent((WebCore::HTMLTextFormControlElement *)v2);
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v2, v4);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return result;
}

BOOL WebCore::TextFieldInputType::shouldSpinButtonRespondToMouseEvents(WebCore::TextFieldInputType *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_BYTE *)(v1 + 160) & 0x18) != 0)
    return 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v1 + 112) + 288))(v1 + 112))
    return (*(_BYTE *)(v1 + 160) & 0x20) == 0;
  return 1;
}

BOOL `non-virtual thunk to'WebCore::TextFieldInputType::shouldSpinButtonRespondToMouseEvents(WebCore::TextFieldInputType *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*((_QWORD *)this - 1) + 8);
  if ((*(_BYTE *)(v1 + 160) & 0x18) != 0)
    return 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v1 + 112) + 288))(v1 + 112))
    return (*(_BYTE *)(v1 + 160) & 0x20) == 0;
  return 1;
}

BOOL WebCore::TextFieldInputType::shouldSpinButtonRespondToWheelEvents(WebCore::TextFieldInputType *this)
{
  uint64_t v1;
  uint64_t v3;
  WebCore::Element *v4;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_BYTE *)(v1 + 160) & 0x18) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v1 + 112) + 288))(v1 + 112)
    && (*(_BYTE *)(v1 + 160) & 0x20) != 0)
  {
    return 0;
  }
  v3 = *((_QWORD *)this + 3);
  v4 = v3 ? *(WebCore::Element **)(v3 + 8) : 0;
  return (*((_BYTE *)v4 + 54) & 2) != 0 && WebCore::Element::isUserActionElementFocused(v4);
}

BOOL `non-virtual thunk to'WebCore::TextFieldInputType::shouldSpinButtonRespondToWheelEvents(WebCore::TextFieldInputType *this)
{
  uint64_t v1;
  uint64_t v3;
  WebCore::Element *v4;

  v1 = *(_QWORD *)(*((_QWORD *)this - 1) + 8);
  if ((*(_BYTE *)(v1 + 160) & 0x18) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)(v1 + 112) + 288))(v1 + 112)
    && (*(_BYTE *)(v1 + 160) & 0x20) != 0)
  {
    return 0;
  }
  v3 = *((_QWORD *)this - 1);
  v4 = v3 ? *(WebCore::Element **)(v3 + 8) : 0;
  return (*((_BYTE *)v4 + 54) & 2) != 0 && WebCore::Element::isUserActionElementFocused(v4);
}

uint64_t WebCore::TextFieldInputType::autoFillButtonElementWasClicked(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8) + 528);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
          return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 48) + 16) + 1504))(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 16));
      }
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::TextFieldInputType::autoFillButtonElementWasClicked(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this - 24) + 8) + 40) + 8) + 528);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
          return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v4 + 48) + 16) + 1504))(*(_QWORD *)(*(_QWORD *)(v4 + 48) + 16));
      }
    }
  }
  return this;
}

uint64_t WebCore::TextFieldInputType::createContainer(WebCore::TextFieldInputType::PreserveSelectionRange)::$_0::~$_0(uint64_t a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

WTF::StringImpl *WebCore::TextFieldInputType::createAutoFillButton(WTF::StringImpl *result, unsigned int a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WebCore *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WebCore *v40;
  unsigned __int16 *v41;
  WTF::StringImpl *v42;
  unsigned int v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WebCore *v48;
  _BYTE v49[8];
  WTF::StringImpl *v50;
  char v51;
  WebCore *v52;
  WTF::StringImpl *v53;

  if (!a2)
    return result;
  v3 = result;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)result + 3) + 8) + 40) + 8);
  v5 = (char *)result + 48;
  v6 = bmalloc::api::isoAllocate();
  v7 = (void *)v6;
  *(_OWORD *)(v6 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v6 + 24) = 0x101C00000002;
  *(_QWORD *)(v6 + 32) = 0;
  *(_QWORD *)(v6 + 40) = v4 + 96;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  ++*(_DWORD *)(v4 + 3324);
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  v8 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v6 + 96) = v8;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)v6 = off_1E33DF358;
  *(_QWORD *)(v6 + 112) = v5;
  v9 = *((_QWORD *)v3 + 21);
  *((_QWORD *)v3 + 21) = v7;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v7);
        v7 = (void *)*((_QWORD *)v3 + 21);
      }
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  WebCore::ContainerNode::appendChild(*((_QWORD *)v3 + 15), (WebCore::Node *)v7, (uint64_t)v49);
  if (v51)
  {
    v11 = v50;
    v50 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)v3 + 21);
  WebCore::autoFillButtonTypeToAutoFillButtonPseudoClassName(&v53, a2);
  v13 = *((_QWORD *)v12 + 13);
  if (!v13)
    goto LABEL_23;
  v14 = *(_DWORD *)(v13 + 4);
  if ((v14 & 1) != 0)
  {
    v15 = *(uint64_t **)(v13 + 40);
    v16 = *(_DWORD *)(v13 + 52);
    if (!v16)
    {
LABEL_23:
      v17 = 0xFFFFFFFFLL;
      goto LABEL_24;
    }
  }
  else
  {
    v15 = (uint64_t *)(v13 + 32);
    v16 = v14 >> 5;
    if (!v16)
      goto LABEL_23;
  }
  v17 = 0;
  while (1)
  {
    v18 = *v15;
    if (*v15 == WebCore::HTMLNames::useragentpartAttr
      || *(_QWORD *)(v18 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
      && *(_QWORD *)(v18 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
    {
      break;
    }
    ++v17;
    v15 += 2;
    if (v16 == v17)
      goto LABEL_23;
  }
LABEL_24:
  WebCore::Element::setAttributeInternal(v12, v17, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, &v53, 0);
  v20 = v53;
  v53 = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v19);
    else
      *(_DWORD *)v20 -= 2;
  }
  v21 = (WTF::StringImpl *)*((_QWORD *)v3 + 21);
  v22 = *((_QWORD *)v21 + 13);
  if (!v22)
    goto LABEL_39;
  v23 = *(_DWORD *)(v22 + 4);
  if ((v23 & 1) != 0)
  {
    v24 = *(uint64_t **)(v22 + 40);
    v25 = *(_DWORD *)(v22 + 52);
    if (!v25)
    {
LABEL_39:
      v26 = 0xFFFFFFFFLL;
      goto LABEL_40;
    }
  }
  else
  {
    v24 = (uint64_t *)(v22 + 32);
    v25 = v23 >> 5;
    if (!v25)
      goto LABEL_39;
  }
  v26 = 0;
  while (1)
  {
    v27 = *v24;
    if (*v24 == WebCore::HTMLNames::roleAttr
      || *(_QWORD *)(v27 + 24) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 24)
      && *(_QWORD *)(v27 + 32) == *(_QWORD *)(WebCore::HTMLNames::roleAttr + 32))
    {
      break;
    }
    ++v26;
    v24 += 2;
    if (v25 == v26)
      goto LABEL_39;
  }
LABEL_40:
  WebCore::Element::setAttributeInternal(v21, v26, (WebCore::TreeScope *)&WebCore::HTMLNames::roleAttr, (WTF::StringImpl **)(WebCore::HTMLNames::buttonTag + 24), 0);
  v28 = (WTF::StringImpl *)*((_QWORD *)v3 + 21);
  switch(a2)
  {
    case 1u:
      WebCore::AXAutoFillCredentialsLabel((uint64_t)&v48);
      goto LABEL_47;
    case 2u:
      WebCore::AXAutoFillContactsLabel((uint64_t)&v48);
      goto LABEL_47;
    case 3u:
      WebCore::AXAutoFillStrongPasswordLabel((uint64_t)&v48);
      goto LABEL_47;
    case 4u:
      WebCore::AXAutoFillCreditCardLabel((uint64_t)&v48);
      goto LABEL_47;
    case 5u:
      WebCore::AXAutoFillLoadingLabel((uint64_t)&v48);
LABEL_47:
      v29 = v48;
      v48 = 0;
      if (v29)
      {
        v52 = v29;
        if ((*((_BYTE *)v29 + 16) & 0x10) == 0)
        {
          WTF::AtomStringImpl::addSlowCase();
          v31 = v52;
          v29 = v53;
          v52 = 0;
          v53 = 0;
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v30);
            else
              *(_DWORD *)v31 -= 2;
          }
        }
      }
      break;
    default:
      v29 = 0;
      v48 = 0;
      break;
  }
  v53 = v29;
  v32 = *((_QWORD *)v28 + 13);
  if (!v32)
    goto LABEL_62;
  v33 = *(_DWORD *)(v32 + 4);
  if ((v33 & 1) == 0)
  {
    v34 = (uint64_t *)(v32 + 32);
    v35 = v33 >> 5;
    if (!v35)
      goto LABEL_62;
LABEL_55:
    v36 = 0;
    while (1)
    {
      v37 = *v34;
      if (*v34 == WebCore::HTMLNames::aria_labelAttr
        || *(_QWORD *)(v37 + 24) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 24)
        && *(_QWORD *)(v37 + 32) == *(_QWORD *)(WebCore::HTMLNames::aria_labelAttr + 32))
      {
        goto LABEL_63;
      }
      ++v36;
      v34 += 2;
      if (v35 == v36)
        goto LABEL_62;
    }
  }
  v34 = *(uint64_t **)(v32 + 40);
  v35 = *(_DWORD *)(v32 + 52);
  if (v35)
    goto LABEL_55;
LABEL_62:
  v36 = 0xFFFFFFFFLL;
LABEL_63:
  WebCore::Element::setAttributeInternal(v28, v36, (WebCore::TreeScope *)&WebCore::HTMLNames::aria_labelAttr, &v53, 0);
  v39 = v53;
  v53 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 2)
      WTF::StringImpl::destroy(v39, v38);
    else
      *(_DWORD *)v39 -= 2;
  }
  v40 = v48;
  v48 = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 2)
      WTF::StringImpl::destroy(v40, v38);
    else
      *(_DWORD *)v40 -= 2;
  }
  v41 = (unsigned __int16 *)*((_QWORD *)v3 + 21);
  if (a2 > 5)
    goto LABEL_76;
  if (((1 << a2) & 0x36) != 0)
  {
    v42 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *(_DWORD *)v42 += 2;
    v53 = v42;
    goto LABEL_77;
  }
  if (a2 == 3)
    WebCore::autoFillStrongPasswordLabel((uint64_t)&v53);
  else
LABEL_76:
    v53 = 0;
LABEL_77:
  v43 = v41[14] >> 12;
  if (v43 == 1)
    goto LABEL_78;
  if (v43 > 0xB)
    goto LABEL_79;
  if (v43 == 11)
  {
LABEL_78:
    WebCore::ContainerNode::stringReplaceAll((WebCore::ContainerNode *)v41, (uint64_t)&v53);
  }
  else if (((1 << v43) & 0x19C) != 0)
  {
    (*(void (**)(uint64_t *__return_ptr, unsigned __int16 *, WTF::StringImpl **))(*(_QWORD *)v41 + 120))(&v45, v41, &v53);
    if ((_BYTE)v47)
    {
      v44 = v46;
      v46 = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
          WTF::StringImpl::destroy(v44, v38);
        else
          *(_DWORD *)v44 -= 2;
      }
    }
    goto LABEL_80;
  }
LABEL_79:
  v45 = 0;
  v46 = 0;
  v47 = 0;
LABEL_80:
  result = v53;
  v53 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v38);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_QWORD *WebCore::autoFillButtonTypeToAutoFillButtonPseudoClassName(_QWORD *result, int a2)
{
  _DWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  switch(a2)
  {
    case 0:
      v2 = (_DWORD *)*MEMORY[0x1E0CBF3B8];
      goto LABEL_14;
    case 1:
      {
        v2 = (_DWORD *)WebCore::UserAgentParts::webkitCredentialsAutoFillButton(void)::webkitCredentialsAutoFillButton;
      }
      else
      {
        v3 = result;
        WTF::AtomStringImpl::add();
        result = v3;
        v2 = (_DWORD *)v8;
        WebCore::UserAgentParts::webkitCredentialsAutoFillButton(void)::webkitCredentialsAutoFillButton = v8;
      }
      goto LABEL_14;
    case 2:
      {
        v2 = (_DWORD *)WebCore::UserAgentParts::webkitContactsAutoFillButton(void)::webkitContactsAutoFillButton;
      }
      else
      {
        v4 = result;
        WTF::AtomStringImpl::add();
        result = v4;
        v2 = (_DWORD *)v8;
        WebCore::UserAgentParts::webkitContactsAutoFillButton(void)::webkitContactsAutoFillButton = v8;
      }
      goto LABEL_14;
    case 3:
      {
        v2 = (_DWORD *)WebCore::UserAgentParts::webkitStrongPasswordAutoFillButton(void)::webkitStrongPasswordAutoFillButton;
      }
      else
      {
        v5 = result;
        WTF::AtomStringImpl::add();
        result = v5;
        v2 = (_DWORD *)v8;
        WebCore::UserAgentParts::webkitStrongPasswordAutoFillButton(void)::webkitStrongPasswordAutoFillButton = v8;
      }
      goto LABEL_14;
    case 4:
      {
        v2 = (_DWORD *)WebCore::UserAgentParts::webkitCreditCardAutoFillButton(void)::webkitCreditCardAutoFillButton;
      }
      else
      {
        v6 = result;
        WTF::AtomStringImpl::add();
        result = v6;
        v2 = (_DWORD *)v8;
        WebCore::UserAgentParts::webkitCreditCardAutoFillButton(void)::webkitCreditCardAutoFillButton = v8;
      }
      goto LABEL_14;
    case 5:
      {
        v2 = (_DWORD *)WebCore::UserAgentParts::internalLoadingAutoFillButton(void)::internalLoadingAutoFillButton;
      }
      else
      {
        v7 = result;
        WTF::AtomStringImpl::add();
        result = v7;
        v2 = (_DWORD *)v8;
        WebCore::UserAgentParts::internalLoadingAutoFillButton(void)::internalLoadingAutoFillButton = v8;
      }
LABEL_14:
      if (v2)
        *v2 += 2;
      break;
    default:
      v2 = 0;
      break;
  }
  *result = v2;
  return result;
}

void WebCore::autoFillButtonTypeToAccessibilityLabel(_QWORD *a1, int a2)
{
  switch(a2)
  {
    case 1:
      WebCore::AXAutoFillCredentialsLabel((uint64_t)a1);
      break;
    case 2:
      WebCore::AXAutoFillContactsLabel((uint64_t)a1);
      break;
    case 3:
      WebCore::AXAutoFillStrongPasswordLabel((uint64_t)a1);
      break;
    case 4:
      WebCore::AXAutoFillCreditCardLabel((uint64_t)a1);
      break;
    case 5:
      WebCore::AXAutoFillLoadingLabel((uint64_t)a1);
      break;
    default:
      *a1 = 0;
      break;
  }
}

void WebCore::autoFillButtonTypeToAutoFillButtonText(_QWORD *a1, unsigned int a2)
{
  _DWORD *v2;

  if (a2 > 5)
    goto LABEL_7;
  if (((1 << a2) & 0x36) == 0)
  {
    if (a2)
    {
      WebCore::autoFillStrongPasswordLabel((uint64_t)a1);
      return;
    }
LABEL_7:
    *a1 = 0;
    return;
  }
  v2 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v2 += 2;
  *a1 = v2;
}

BOOL WebCore::isAutoFillButtonTypeChanged(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;

  {
    v2 = WebCore::UserAgentParts::webkitContactsAutoFillButton(void)::webkitContactsAutoFillButton;
  }
  else
  {
    v11 = a1;
    v15 = a2;
    WTF::AtomStringImpl::add();
    a1 = v11;
    a2 = v15;
    v2 = v20;
    WebCore::UserAgentParts::webkitContactsAutoFillButton(void)::webkitContactsAutoFillButton = v20;
  }
  v3 = *a1;
  if (a2 != 2 && v3 == v2)
    return 1;
  {
    v4 = WebCore::UserAgentParts::webkitCredentialsAutoFillButton(void)::webkitCredentialsAutoFillButton;
  }
  else
  {
    v12 = a1;
    v16 = a2;
    WTF::AtomStringImpl::add();
    a1 = v12;
    a2 = v16;
    v4 = v20;
    WebCore::UserAgentParts::webkitCredentialsAutoFillButton(void)::webkitCredentialsAutoFillButton = v20;
    v3 = *v12;
  }
  if (a2 != 1 && v3 == v4)
    return 1;
  {
    v5 = WebCore::UserAgentParts::webkitStrongPasswordAutoFillButton(void)::webkitStrongPasswordAutoFillButton;
  }
  else
  {
    v13 = a1;
    v17 = a2;
    WTF::AtomStringImpl::add();
    a1 = v13;
    a2 = v17;
    v5 = v20;
    WebCore::UserAgentParts::webkitStrongPasswordAutoFillButton(void)::webkitStrongPasswordAutoFillButton = v20;
    v3 = *v13;
  }
  if (a2 != 3 && v3 == v5)
    return 1;
  {
    v6 = WebCore::UserAgentParts::webkitCreditCardAutoFillButton(void)::webkitCreditCardAutoFillButton;
  }
  else
  {
    v14 = a1;
    v18 = a2;
    WTF::AtomStringImpl::add();
    a1 = v14;
    a2 = v18;
    v6 = v20;
    WebCore::UserAgentParts::webkitCreditCardAutoFillButton(void)::webkitCreditCardAutoFillButton = v20;
    v3 = *v14;
  }
  if (a2 != 4 && v3 == v6)
    return 1;
  {
    v8 = WebCore::UserAgentParts::internalLoadingAutoFillButton(void)::internalLoadingAutoFillButton;
  }
  else
  {
    v10 = a1;
    v19 = a2;
    WTF::AtomStringImpl::add();
    a2 = v19;
    v8 = v20;
    WebCore::UserAgentParts::internalLoadingAutoFillButton(void)::internalLoadingAutoFillButton = v20;
    v3 = *v10;
  }
  return a2 != 5 && v3 == v8;
}

uint64_t std::pair<WTF::String,WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100](uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;

  v4 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v6)
  {
    v10 = 16 * v6;
    v11 = (WTF::StringImpl **)(*(_QWORD *)(a1 + 8) + 8);
    do
    {
      v12 = *v11;
      *v11 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, a2);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = *(v11 - 1);
      *(v11 - 1) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, a2);
        else
          *(_DWORD *)v13 -= 2;
      }
      v11 += 2;
      v10 -= 16;
    }
    while (v10);
  }
  v7 = *(WTF **)(a1 + 8);
  if (v7)
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
    WTF::fastFree(v7, a2);
  }
  v8 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  *(_QWORD *)(a1 + 8) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = 0;
  *(_DWORD *)(a1 + 16) = v8;
  LODWORD(v8) = *((_DWORD *)a2 + 5);
  *((_DWORD *)a2 + 5) = 0;
  *(_DWORD *)(a1 + 20) = v8;
  return a1;
}

uint64_t WebCore::TextFieldInputType::dataListButtonElement(WebCore::TextFieldInputType *this)
{
  return *((_QWORD *)this + 10);
}

WebCore::TextFieldInputType *WebCore::TextFieldInputType::dataListButtonElementWasClicked(WebCore::TextFieldInputType *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  WebCore::TextFieldInputType *result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  unsigned int v8;
  WTF::StringImpl *v9[2];

  v2 = *((_QWORD *)this + 3);
  if (v2)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  *(_DWORD *)(v3 + 24) += 2;
  WebCore::HTMLInputElement::dataList(v3, v9);
  result = v9[0];
  if (v9[0])
  {
    if (*((_DWORD *)v9[0] + 6) == 2)
    {
      if ((*((_WORD *)v9[0] + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v9[0], v4);
    }
    else
    {
      *((_DWORD *)v9[0] + 6) -= 2;
    }
    *((_BYTE *)this + 72) = 1;
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::TextFieldInputType *))(*(_QWORD *)this + 272))(v9, this);
    v7 = v9[0];
    if (v9[0])
    {
      v8 = *((_DWORD *)v9[0] + 1);
      v9[0] = 0;
      if (*(_DWORD *)v7 == 2)
        WTF::StringImpl::destroy(v7, v6);
      else
        *(_DWORD *)v7 -= 2;
    }
    else
    {
      v8 = 0;
    }
    v9[0] = 0;
    v9[1] = 0;
    WebCore::HTMLTextFormControlElement::setSelectionRange(v3, v8, v8, 0, 3, (uint64_t *)v9, 0);
    *((_BYTE *)this + 72) = 0;
    result = WebCore::TextFieldInputType::displaySuggestions(this, 1);
  }
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      return (WebCore::TextFieldInputType *)WebCore::Node::removedLastRef((WebCore::Node *)v3, v4);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return result;
}

WebCore::TextFieldInputType *`non-virtual thunk to'WebCore::TextFieldInputType::dataListButtonElementWasClicked(WebCore::TextFieldInputType *this)
{
  return WebCore::TextFieldInputType::dataListButtonElementWasClicked((WebCore::TextFieldInputType *)((char *)this - 64));
}

uint64_t WebCore::TextFieldInputType::elementRectInRootViewCoordinates(WebCore::TextFieldInputType *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  WebCore::ScrollView *v5;
  uint64_t v6;
  _QWORD v7[2];

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  result = *(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL;
  if (result)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      result = 105;
      __break(0xC471u);
    }
    else
    {
      v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 528);
      if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
        v5 = *(WebCore::ScrollView **)(v4 + 288);
      else
        v5 = 0;
      v7[0] = WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)result, 1, 0);
      v7[1] = v6;
      return WebCore::ScrollView::contentsToRootView(v5, (const WebCore::IntRect *)v7);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::TextFieldInputType::elementRectInRootViewCoordinates(WebCore::TextFieldInputType *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  WebCore::ScrollView *v5;
  uint64_t v6;
  _QWORD v7[2];

  v1 = *(_QWORD *)(*((_QWORD *)this - 4) + 8);
  result = *(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL;
  if (result)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v1 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      result = 105;
      __break(0xC471u);
    }
    else
    {
      v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 8) + 528);
      if (v3 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
        v5 = *(WebCore::ScrollView **)(v4 + 288);
      else
        v5 = 0;
      v7[0] = WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)result, 1, 0);
      v7[1] = v6;
      return WebCore::ScrollView::contentsToRootView(v5, (const WebCore::IntRect *)v7);
    }
  }
  return result;
}

WTF::StringImpl *WebCore::TextFieldInputType::suggestions@<X0>(WebCore::TextFieldInputType *this@<X0>, const WTF::StringImpl *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  WTF *v15;
  char *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  WebCore::Node *v33;
  uint64_t v34;
  void *v35;
  WebCore::Node *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  int v50;
  WTF::StringImpl *v51;
  const WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  int v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl **v58;
  int v59;
  WTF::StringImpl **v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WebCore::Node *v66;
  __int16 v67;
  BOOL v68;
  BOOL v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  int v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  WTF::StringImpl **v75;
  int v76;
  WTF::StringImpl **v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  WTF *v86;
  WTF *v87;
  unsigned int v88;
  WTF *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  WTF::StringImpl *v93;
  uint64_t v94;
  WTF::StringImpl *v95;
  WTF *v96;
  WTF *v97;
  _DWORD *v98;
  _DWORD *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF *v102;
  WTF::StringImpl *result;
  WTF *v104;
  WTF *v105;
  uint64_t v106;
  WTF::StringImpl **v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  WTF::StringImpl **v110;
  WTF::StringImpl *v111;
  uint64_t v112;
  WTF::StringImpl **v113;
  WTF::StringImpl *v114;
  WTF::StringImpl *v115;
  WTF::StringImpl *v116;
  WTF::StringImpl *v117;
  int v118;
  unsigned int v119;
  WTF::StringImpl *v120;
  WebCore::Node *v121;
  WebCore::Node *v122;
  WTF::StringImpl *v123;
  WTF *v124;
  uint64_t v125;
  WTF *v126;
  uint64_t v127;

  v126 = 0;
  v127 = 0;
  v124 = 0;
  v125 = 0;
  v5 = *((_QWORD *)this + 3);
  if (v5)
    v6 = *(_QWORD **)(v5 + 8);
  else
    v6 = 0;
  v7 = (_DWORD *)v6[30];
  if (v7[3] == 64)
  {
    WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v7, &v123);
    goto LABEL_22;
  }
  v8 = (WTF::StringImpl *)v6[27];
  if (v8)
  {
    *(_DWORD *)v8 += 2;
    v123 = v8;
    goto LABEL_22;
  }
  v9 = v6[13];
  if (!v9)
    goto LABEL_16;
  v10 = *(_DWORD *)(v9 + 4);
  if ((v10 & 1) == 0)
  {
    v11 = v9 + 32;
    LODWORD(v12) = v10 >> 5;
    if ((_DWORD)v12)
      goto LABEL_8;
LABEL_16:
    v13 = (_QWORD *)MEMORY[0x1E0CBF2F8];
    goto LABEL_17;
  }
  v11 = *(_QWORD *)(v9 + 40);
  LODWORD(v12) = *(_DWORD *)(v9 + 52);
  if (!(_DWORD)v12)
    goto LABEL_16;
LABEL_8:
  v12 = v12;
  v13 = (_QWORD *)(v11 + 8);
  while (1)
  {
    v14 = *(v13 - 1);
    if (v14 == WebCore::HTMLNames::valueAttr
      || *(_QWORD *)(v14 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
      && *(_QWORD *)(v14 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
    {
      break;
    }
    v13 += 2;
    if (!--v12)
    {
      v13 = (_QWORD *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_17:
  if (*v13)
  {
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v7 + 296))(&v123);
    if (v123)
      goto LABEL_22;
    v123 = 0;
    v7 = (_DWORD *)v6[30];
  }
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v7 + 64))(&v123);
LABEL_22:
  v16 = (char *)this + 88;
  v15 = (WTF *)*((_QWORD *)this + 11);
  if (v15 && WTF::equalIgnoringASCIICase(v15, v123, a2))
  {
    v18 = *((unsigned int *)this + 27);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 12) = v18;
    if (!(_DWORD)v18)
      goto LABEL_183;
    if (!(v18 >> 28))
    {
      v19 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v18));
      *(_DWORD *)(a3 + 8) = v18;
      *(_QWORD *)a3 = v19;
      v20 = *((unsigned int *)this + 27);
      if ((_DWORD)v20)
      {
        v21 = *((_QWORD *)this + 12);
        v22 = v21 + 16 * v20;
        do
        {
          v23 = *(_DWORD **)v21;
          if (*(_QWORD *)v21)
            *v23 += 2;
          *v19 = v23;
          v24 = *(_DWORD **)(v21 + 8);
          if (v24)
            *v24 += 2;
          v19[1] = v24;
          v21 += 16;
          v19 += 2;
        }
        while (v21 != v22);
      }
      goto LABEL_183;
    }
    __break(0xC471u);
LABEL_235:
    JUMPOUT(0x195CC7524);
  }
  v25 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 40) + 8) + 528);
  if (v26
    && (v27 = *(_QWORD *)(v26 + 8)) != 0
    && (v28 = *(_QWORD *)(v27 + 24)) != 0
    && (v29 = *(_QWORD *)(v28 + 8)) != 0)
  {
    v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v29 + 48) + 16) + 792))(*(_QWORD *)(*(_QWORD *)(v29 + 48) + 16));
    v31 = *((_QWORD *)this + 3);
    if (v31)
      v25 = *(_QWORD *)(v31 + 8);
    else
      v25 = 0;
  }
  else
  {
    v30 = 0;
  }
  WebCore::HTMLInputElement::dataList(v25, &v122);
  v33 = v122;
  if (v122)
  {
    v121 = v122;
    v34 = WebCore::FilteredElementDescendantRange<WebCore::HTMLOptionElement,&WebCore::HTMLDataListElement::isSuggestion>::first((uint64_t *)&v121, v32);
    if (!v34)
    {
LABEL_151:
      if (v122)
      {
        if (*((_DWORD *)v122 + 6) == 2)
        {
          if ((*((_WORD *)v122 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v122, v35);
        }
        else
        {
          *((_DWORD *)v122 + 6) -= 2;
        }
      }
      goto LABEL_154;
    }
    v36 = (WebCore::Node *)v34;
LABEL_44:
    v116 = 0;
    v117 = 0;
    WebCore::HTMLOptionElement::value(v36, (WTF::StringImpl *)v35, &v120);
    v38 = v120;
    v120 = 0;
    v39 = v116;
    v116 = v38;
    if (v39)
    {
      v40 = *(_DWORD *)v39 - 2;
      if (*(_DWORD *)v39 == 2)
      {
        WTF::StringImpl::destroy(v39, v37);
        v39 = v120;
        v120 = 0;
        if (!v39)
          goto LABEL_47;
        v40 = *(_DWORD *)v39 - 2;
        if (*(_DWORD *)v39 == 2)
        {
          WTF::StringImpl::destroy(v39, v73);
          goto LABEL_47;
        }
      }
      *(_DWORD *)v39 = v40;
    }
LABEL_47:
    v41 = *((_QWORD *)this + 3);
    if (v41)
      v42 = *(_QWORD *)(v41 + 8);
    else
      v42 = 0;
    if (!WebCore::InputType::isValidValue(*(WebCore::InputType **)(v42 + 240), (const WTF::String *)&v116))goto LABEL_75;
    v43 = v116;
    v44 = v116 ? *((_DWORD *)v116 + 1) : 0;
    if ((*(_DWORD *)(*(_QWORD *)(v42 + 240) + 12) & 0x2A8820) != 0)
    {
      v45 = *(_DWORD *)(v42 + 176);
      if (v45 >= 1 && v44 && v45 > v44)
        goto LABEL_75;
    }
    if (v116)
      v43 = *((_DWORD *)v116 + 1);
    if ((*(_DWORD *)(*(_QWORD *)(v42 + 240) + 12) & 0x2A8820) != 0)
    {
      v46 = *(_DWORD *)(v42 + 172);
      if (v46 >= 0x80000)
        v46 = 0x80000;
      if (v46 < v43)
        goto LABEL_75;
    }
    (*(void (**)(WTF::StringImpl **__return_ptr, WebCore::TextFieldInputType *, WTF::StringImpl **))(*(_QWORD *)this + 296))(&v120, this, &v116);
    v48 = v120;
    v120 = 0;
    v49 = v116;
    v116 = v48;
    if (v49)
    {
      v50 = *(_DWORD *)v49 - 2;
      if (*(_DWORD *)v49 != 2)
      {
LABEL_62:
        *(_DWORD *)v49 = v50;
        goto LABEL_63;
      }
      WTF::StringImpl::destroy(v49, v47);
      v49 = v120;
      v120 = 0;
      if (v49)
      {
        v50 = *(_DWORD *)v49 - 2;
        if (*(_DWORD *)v49 != 2)
          goto LABEL_62;
        WTF::StringImpl::destroy(v49, v47);
      }
    }
LABEL_63:
    WebCore::HTMLOptionElement::label(v36, v47);
    v53 = v120;
    v120 = 0;
    v54 = v117;
    v117 = v53;
    if (v54)
    {
      v55 = *(_DWORD *)v54 - 2;
      if (*(_DWORD *)v54 == 2)
      {
        WTF::StringImpl::destroy(v54, v51);
        v54 = v120;
        v120 = 0;
        if (!v54)
          goto LABEL_66;
        v55 = *(_DWORD *)v54 - 2;
        if (*(_DWORD *)v54 == 2)
        {
          WTF::StringImpl::destroy(v54, v74);
          goto LABEL_66;
        }
      }
      *(_DWORD *)v54 = v55;
    }
LABEL_66:
    if (WTF::equal(v116, v117, v52))
    {
      v56 = v117;
      v117 = 0;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2)
          WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v35);
        else
          *(_DWORD *)v56 -= 2;
      }
    }
    v57 = v123;
    if (v123 && *((_DWORD *)v123 + 1))
    {
      if (!v116)
        goto LABEL_118;
      if (!WTF::StringImpl::startsWithIgnoringASCIICase())
      {
        v57 = v123;
        if (!v123)
        {
          v35 = 0;
LABEL_119:
          if (v116 && WTF::StringImpl::findIgnoringASCIICase() != -1)
            goto LABEL_143;
          if (v30)
          {
            if (v123)
              v35 = (void *)*((_QWORD *)v123 + 1);
            else
              v35 = 0;
            if (!v117)
            {
              v117 = 0;
              goto LABEL_78;
            }
            if (WTF::StringImpl::findIgnoringASCIICase() != -1)
            {
LABEL_143:
              if (HIDWORD(v125) == (_DWORD)v125)
              {
                v75 = (WTF::StringImpl **)WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v124, HIDWORD(v125) + 1, (unint64_t)&v116);
                v76 = HIDWORD(v125) + 1;
                v77 = (WTF::StringImpl **)((char *)v124 + 16 * HIDWORD(v125));
                v78 = *v75;
                *v75 = 0;
                *v77 = v78;
                v79 = v75[1];
                v75[1] = 0;
              }
              else
              {
                v76 = HIDWORD(v125) + 1;
                v77 = (WTF::StringImpl **)((char *)v124 + 16 * HIDWORD(v125));
                v80 = v116;
                v116 = 0;
                *v77 = v80;
                v79 = v117;
                v117 = 0;
              }
              v77[1] = v79;
              HIDWORD(v125) = v76;
            }
          }
LABEL_75:
          v64 = v117;
          v117 = 0;
          if (v64)
          {
            if (*(_DWORD *)v64 == 2)
              WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v35);
            else
              *(_DWORD *)v64 -= 2;
          }
LABEL_78:
          v65 = v116;
          v116 = 0;
          if (v65)
          {
            if (*(_DWORD *)v65 == 2)
              WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v35);
            else
              *(_DWORD *)v65 -= 2;
          }
          while (1)
          {
            v66 = (WebCore::Node *)*((_QWORD *)v36 + 10);
            if (!v66)
              break;
LABEL_82:
            while (1)
            {
              v36 = v66;
              v67 = *((_WORD *)v66 + 14);
              if ((v67 & 0x10) != 0
                && *(_QWORD *)(*((_QWORD *)v36 + 12) + 24) == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
              {
                break;
              }
              if ((v67 & 4) != 0)
              {
                v66 = (WebCore::Node *)*((_QWORD *)v36 + 10);
                if (v66)
                  continue;
              }
              if (v36 == v33)
                goto LABEL_151;
              while (1)
              {
                v66 = (WebCore::Node *)*((_QWORD *)v36 + 7);
                if (v66)
                  break;
                v36 = (WebCore::Node *)*((_QWORD *)v36 + 4);
                if (v36)
                  v68 = v36 == v33;
                else
                  v68 = 1;
                if (v68)
                  goto LABEL_151;
              }
            }
            if (!*((_BYTE *)v36 + 112))
            {
              v70 = *((_QWORD *)v36 + 4);
              if (!v70
                || (*(_WORD *)(v70 + 28) & 0x10) == 0
                || *(_QWORD *)(*(_QWORD *)(v70 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24)
                || !*(_BYTE *)(v70 + 112))
              {
                WebCore::HTMLOptionElement::value(v36, (WTF::StringImpl *)v35, &v116);
                v71 = v116;
                if (v116)
                {
                  v72 = *((_DWORD *)v116 + 1);
                  v116 = 0;
                  if (*(_DWORD *)v71 == 2)
                  {
                    WTF::StringImpl::destroy(v71, (WTF::StringImpl *)v35);
                    if (v72)
                      goto LABEL_44;
                  }
                  else
                  {
                    *(_DWORD *)v71 -= 2;
                    if (v72)
                      goto LABEL_44;
                  }
                }
              }
            }
          }
          if (v36 != v33)
          {
            do
            {
              v66 = (WebCore::Node *)*((_QWORD *)v36 + 7);
              if (v66)
                goto LABEL_82;
              v36 = (WebCore::Node *)*((_QWORD *)v36 + 4);
              if (v36)
                v69 = v36 == v33;
              else
                v69 = 1;
            }
            while (!v69);
          }
          goto LABEL_151;
        }
LABEL_118:
        v35 = (void *)*((_QWORD *)v57 + 1);
        goto LABEL_119;
      }
    }
    if (HIDWORD(v127) == (_DWORD)v127)
    {
      v58 = (WTF::StringImpl **)WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((unsigned int *)&v126, HIDWORD(v127) + 1, (unint64_t)&v116);
      v59 = HIDWORD(v127) + 1;
      v60 = (WTF::StringImpl **)((char *)v126 + 16 * HIDWORD(v127));
      v61 = *v58;
      *v58 = 0;
      *v60 = v61;
      v62 = v58[1];
      v58[1] = 0;
    }
    else
    {
      v59 = HIDWORD(v127) + 1;
      v60 = (WTF::StringImpl **)((char *)v126 + 16 * HIDWORD(v127));
      v63 = v116;
      v116 = 0;
      *v60 = v63;
      v62 = v117;
      v117 = 0;
    }
    v60[1] = v62;
    HIDWORD(v127) = v59;
    goto LABEL_75;
  }
LABEL_154:
  v81 = HIDWORD(v125);
  v82 = HIDWORD(v125) + (unint64_t)HIDWORD(v127);
  if (v82 > v127)
  {
    v83 = v127 + ((unint64_t)v127 >> 2);
    if (v83 >= 0x10)
      v84 = v83 + 1;
    else
      v84 = 16;
    if (v84 <= v82)
      v85 = HIDWORD(v125) + (unint64_t)HIDWORD(v127);
    else
      v85 = v84;
    WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((unsigned int *)&v126, v85);
  }
  if ((_DWORD)v81)
  {
    v86 = v124;
    v87 = (WTF *)((char *)v124 + 16 * v81);
    v88 = HIDWORD(v127);
    v89 = v126;
    do
    {
      v90 = (_QWORD *)((char *)v89 + 16 * v88++);
      v91 = *(_QWORD *)v86;
      *(_QWORD *)v86 = 0;
      *v90 = v91;
      v92 = *((_QWORD *)v86 + 1);
      *((_QWORD *)v86 + 1) = 0;
      v90[1] = v92;
      v86 = (WTF *)((char *)v86 + 16);
    }
    while (v86 != v87);
    HIDWORD(v127) = v88;
  }
  v93 = v123;
  if (v123)
    *(_DWORD *)v123 += 2;
  v94 = HIDWORD(v127);
  v117 = 0;
  v118 = 0;
  v116 = v93;
  v119 = HIDWORD(v127);
  if (HIDWORD(v127))
  {
    if (HIDWORD(v127) >> 28)
    {
      __break(0xC471u);
      goto LABEL_235;
    }
    v95 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(16 * HIDWORD(v127)));
    v118 = v94;
    v117 = v95;
    v96 = v126;
    v97 = (WTF *)((char *)v126 + 16 * v94);
    do
    {
      v98 = *(_DWORD **)v96;
      if (*(_QWORD *)v96)
        *v98 += 2;
      *(_QWORD *)v95 = v98;
      v99 = (_DWORD *)*((_QWORD *)v96 + 1);
      if (v99)
        *v99 += 2;
      *((_QWORD *)v95 + 1) = v99;
      v96 = (WTF *)((char *)v96 + 16);
      v95 = (WTF::StringImpl *)((char *)v95 + 16);
    }
    while (v96 != v97);
  }
  std::pair<WTF::String,WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]((uint64_t)v16, (WTF::StringImpl *)&v116);
  if (v119)
  {
    v112 = 16 * v119;
    v113 = (WTF::StringImpl **)((char *)v117 + 8);
    do
    {
      v114 = *v113;
      *v113 = 0;
      if (v114)
      {
        if (*(_DWORD *)v114 == 2)
          WTF::StringImpl::destroy(v114, v17);
        else
          *(_DWORD *)v114 -= 2;
      }
      v115 = *(v113 - 1);
      *(v113 - 1) = 0;
      if (v115)
      {
        if (*(_DWORD *)v115 == 2)
          WTF::StringImpl::destroy(v115, v17);
        else
          *(_DWORD *)v115 -= 2;
      }
      v113 += 2;
      v112 -= 16;
    }
    while (v112);
  }
  v100 = v117;
  if (v117)
  {
    v117 = 0;
    v118 = 0;
    WTF::fastFree(v100, v17);
  }
  v101 = v116;
  v116 = 0;
  if (v101)
  {
    if (*(_DWORD *)v101 == 2)
      WTF::StringImpl::destroy(v101, v17);
    else
      *(_DWORD *)v101 -= 2;
  }
  v102 = v126;
  v126 = 0;
  *(_QWORD *)a3 = v102;
  HIDWORD(v127) = 0;
  *(_DWORD *)(a3 + 8) = v127;
  *(_DWORD *)(a3 + 12) = v94;
LABEL_183:
  result = v123;
  v123 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
    else
      *(_DWORD *)result -= 2;
  }
  v104 = v124;
  if (HIDWORD(v125))
  {
    v106 = 16 * HIDWORD(v125);
    v107 = (WTF::StringImpl **)((char *)v124 + 8);
    do
    {
      v108 = *v107;
      *v107 = 0;
      if (v108)
      {
        if (*(_DWORD *)v108 == 2)
          WTF::StringImpl::destroy(v108, v17);
        else
          *(_DWORD *)v108 -= 2;
      }
      result = *(v107 - 1);
      *(v107 - 1) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
        else
          *(_DWORD *)result -= 2;
      }
      v107 += 2;
      v106 -= 16;
    }
    while (v106);
  }
  if (v104)
    result = (WTF::StringImpl *)WTF::fastFree(v104, v17);
  v105 = v126;
  if (HIDWORD(v127))
  {
    v109 = 16 * HIDWORD(v127);
    v110 = (WTF::StringImpl **)((char *)v126 + 8);
    do
    {
      v111 = *v110;
      *v110 = 0;
      if (v111)
      {
        if (*(_DWORD *)v111 == 2)
          WTF::StringImpl::destroy(v111, v17);
        else
          *(_DWORD *)v111 -= 2;
      }
      result = *(v110 - 1);
      *(v110 - 1) = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v17);
        else
          *(_DWORD *)result -= 2;
      }
      v110 += 2;
      v109 -= 16;
    }
    while (v109);
  }
  if (v105)
    return (WTF::StringImpl *)WTF::fastFree(v105, v17);
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::TextFieldInputType::suggestions@<X0>(WebCore::TextFieldInputType *this@<X0>, const WTF::StringImpl *a2@<X2>, uint64_t a3@<X8>)
{
  return WebCore::TextFieldInputType::suggestions((WebCore::TextFieldInputType *)((char *)this - 56), a2, a3);
}

WTF::StringImpl *WebCore::TextFieldInputType::didSelectDataListOption(WebCore::TextFieldInputType *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  _BYTE v6[8];
  WTF::StringImpl *v7;
  char v8;

  v2 = *((_QWORD *)this + 3);
  if (v2)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  result = (WTF::StringImpl *)WebCore::HTMLInputElement::setValue(v3, (uint64_t)a2, (const WTF::StringImpl *)2, 0, (uint64_t)v6);
  if (v8)
  {
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

WTF::StringImpl *`non-virtual thunk to'WebCore::TextFieldInputType::didSelectDataListOption(WebCore::TextFieldInputType *this, const WTF::String *a2)
{
  uint64_t v2;
  uint64_t v3;
  WTF::StringImpl *result;
  WTF::StringImpl *v5;
  _BYTE v6[8];
  WTF::StringImpl *v7;
  char v8;

  v2 = *((_QWORD *)this - 4);
  if (v2)
    v3 = *(_QWORD *)(v2 + 8);
  else
    v3 = 0;
  result = (WTF::StringImpl *)WebCore::HTMLInputElement::setValue(v3, (uint64_t)a2, (const WTF::StringImpl *)2, 0, (uint64_t)v6);
  if (v8)
  {
    result = v7;
    v7 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::TextFieldInputType::didCloseSuggestions(WebCore::TextFieldInputType *this)
{
  WTF::StringImpl *v2;
  WTF *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  WTF::StringImpl **v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  __int128 v11;
  uint64_t v12;
  _BYTE v13[20];

  v11 = 0uLL;
  v12 = 0;
  std::pair<WTF::String,WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>::operator=[abi:sn180100]((uint64_t)this + 88, (WTF::StringImpl *)&v11);
  if (HIDWORD(v12))
  {
    v7 = 16 * HIDWORD(v12);
    v8 = (WTF::StringImpl **)(*((_QWORD *)&v11 + 1) + 8);
    do
    {
      v9 = *v8;
      *v8 = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v2);
        else
          *(_DWORD *)v9 -= 2;
      }
      v10 = *(v8 - 1);
      *(v8 - 1) = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v2);
        else
          *(_DWORD *)v10 -= 2;
      }
      v8 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  v3 = (WTF *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    *((_QWORD *)&v11 + 1) = 0;
    LODWORD(v12) = 0;
    WTF::fastFree(v3, v2);
  }
  v4 = (WTF::StringImpl *)v11;
  *(_QWORD *)&v11 = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  result = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 64) & 0xFFFFFFFFFFFFLL;
  if (result)
  {
    if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195CC771CLL);
    }
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x18) + 8) + 40)
                                                                                           + 8)
                                                                               + 1944)
                                                                   + 24)
                                                       + 8)
                                           + 40)
                               + 8)
                   + 3382))
    {
      LOBYTE(v11) = 0;
      LOBYTE(v12) = 0;
      v13[0] = 0;
      v13[16] = 0;
      return WebCore::RenderObject::issueRepaint(result, &v11, 0, 0, (uint64_t)v13);
    }
  }
  return result;
}

uint64_t `non-virtual thunk to'WebCore::TextFieldInputType::didCloseSuggestions(WebCore::TextFieldInputType *this)
{
  return WebCore::TextFieldInputType::didCloseSuggestions((WebCore::TextFieldInputType *)((char *)this - 56));
}

BOOL WebCore::TextFieldInputType::isPresentingAttachedView(WebCore::TextFieldInputType *this)
{
  return *((_QWORD *)this + 14) != 0;
}

uint64_t WebCore::TextFieldInputType::isFocusingWithDataListDropdown(WebCore::TextFieldInputType *this)
{
  return *((unsigned __int8 *)this + 72);
}

void WebCore::ResetInputType::~ResetInputType(WebCore::ResetInputType *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E33D5AC0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E33D5AC0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::fastFree(this, a2);
}

void WebCore::SearchInputType::~SearchInputType(WebCore::SearchInputType *this)
{
  WebCore::TimerBase *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *((_QWORD *)this + 24) = off_1E31F7378;
  v2 = (WebCore::SearchInputType *)((char *)this + 192);
  v3 = *((_QWORD *)this + 30);
  *((_QWORD *)v2 + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  v5 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v4);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v4);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  WebCore::TextFieldInputType::~TextFieldInputType(this, v4);
}

{
  WebCore::TimerBase *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  void *v8;

  *((_QWORD *)this + 24) = off_1E31F7378;
  v2 = (WebCore::SearchInputType *)((char *)this + 192);
  v3 = *((_QWORD *)this + 30);
  *((_QWORD *)v2 + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  v5 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v4);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v4);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  WebCore::TextFieldInputType::~TextFieldInputType(this, v4);
  WTF::fastFree(v7, v8);
}

void `non-virtual thunk to'WebCore::SearchInputType::~SearchInputType(WebCore::SearchInputType *this)
{
  WebCore::TimerBase *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *((_QWORD *)this + 20) = off_1E31F7378;
  v2 = (WebCore::SearchInputType *)((char *)this + 160);
  v3 = *((_QWORD *)this + 26);
  *((_QWORD *)v2 + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  v5 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v4);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v4);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::SearchInputType *)((char *)this - 32), v4);
}

{
  WebCore::TimerBase *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  void *v8;

  *((_QWORD *)this + 20) = off_1E31F7378;
  v2 = (WebCore::SearchInputType *)((char *)this + 160);
  v3 = *((_QWORD *)this + 26);
  *((_QWORD *)v2 + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  v5 = *((_QWORD *)this + 19);
  *((_QWORD *)this + 19) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v4);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v4);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::SearchInputType *)((char *)this - 32), v4);
  WTF::fastFree(v7, v8);
}

{
  WebCore::TimerBase *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *((_QWORD *)this + 18) = off_1E31F7378;
  v2 = (WebCore::SearchInputType *)((char *)this + 144);
  v3 = *((_QWORD *)this + 24);
  *((_QWORD *)v2 + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  v5 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v4);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v4);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::SearchInputType *)((char *)this - 48), v4);
}

{
  WebCore::TimerBase *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  void *v8;

  *((_QWORD *)this + 18) = off_1E31F7378;
  v2 = (WebCore::SearchInputType *)((char *)this + 144);
  v3 = *((_QWORD *)this + 24);
  *((_QWORD *)v2 + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  v5 = *((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v4);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v4);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::SearchInputType *)((char *)this - 48), v4);
  WTF::fastFree(v7, v8);
}

{
  WebCore::TimerBase *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *((_QWORD *)this + 17) = off_1E31F7378;
  v2 = (WebCore::SearchInputType *)((char *)this + 136);
  v3 = *((_QWORD *)this + 23);
  *((_QWORD *)v2 + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  v5 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v4);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v4);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::SearchInputType *)((char *)this - 56), v4);
}

{
  WebCore::TimerBase *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  void *v8;

  *((_QWORD *)this + 17) = off_1E31F7378;
  v2 = (WebCore::SearchInputType *)((char *)this + 136);
  v3 = *((_QWORD *)this + 23);
  *((_QWORD *)v2 + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  v5 = *((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v4);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v4);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::SearchInputType *)((char *)this - 56), v4);
  WTF::fastFree(v7, v8);
}

{
  WebCore::TimerBase *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  *((_QWORD *)this + 16) = off_1E31F7378;
  v2 = (WebCore::SearchInputType *)((char *)this + 128);
  v3 = *((_QWORD *)this + 22);
  *((_QWORD *)v2 + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  v5 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v4);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v4);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::SearchInputType *)((char *)this - 64), v4);
}

{
  WebCore::TimerBase *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;
  void *v8;

  *((_QWORD *)this + 16) = off_1E31F7378;
  v2 = (WebCore::SearchInputType *)((char *)this + 128);
  v3 = *((_QWORD *)this + 22);
  *((_QWORD *)v2 + 6) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  WebCore::TimerBase::~TimerBase(v2);
  v5 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v5)
  {
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v4);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  v6 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v6)
  {
    if (*(_DWORD *)(v6 + 24) == 2)
    {
      if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v6, v4);
    }
    else
    {
      *(_DWORD *)(v6 + 24) -= 2;
    }
  }
  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::SearchInputType *)((char *)this - 64), v4);
  WTF::fastFree(v7, v8);
}

void WebCore::SubmitInputType::~SubmitInputType(WebCore::SubmitInputType *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E33D5AC0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)this = off_1E33D5AC0;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v6 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v6)
      {
        v9 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v6));
        v3 = v9;
      }
      v7 = *(WTF **)(v3 + 16);
      if (v7)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v8 = v3;
        WTF::fastFree(v7, a2);
        v3 = v8;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  WTF::fastFree(this, a2);
}

void WebCore::TelephoneInputType::~TelephoneInputType(WebCore::TelephoneInputType *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::TextFieldInputType::~TextFieldInputType(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::TelephoneInputType::~TelephoneInputType(WebCore::TelephoneInputType *this, void *a2)
{
  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::TelephoneInputType *)((char *)this - 32), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::TelephoneInputType *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

{
  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::TelephoneInputType *)((char *)this - 48), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::TelephoneInputType *)((char *)this - 48), a2);
  WTF::fastFree(v2, v3);
}

{
  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::TelephoneInputType *)((char *)this - 56), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::TelephoneInputType *)((char *)this - 56), a2);
  WTF::fastFree(v2, v3);
}

{
  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::TelephoneInputType *)((char *)this - 64), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::TelephoneInputType *)((char *)this - 64), a2);
  WTF::fastFree(v2, v3);
}

void WebCore::TextDocument::~TextDocument(WebCore::TextDocument *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E33BA1B0;
  *((_QWORD *)this + 24) = &unk_1E33BA500;
  *((_QWORD *)this + 36) = &unk_1E33BA6C0;
  *((_QWORD *)this + 63) = &unk_1E33BA6E8;
  *((_QWORD *)this + 64) = &unk_1E33BA710;
  *((_QWORD *)this + 68) = &unk_1E33BA740;
  *((_QWORD *)this + 69) = &unk_1E33BA768;
  v3 = *((_QWORD *)this + 440);
  if (v3)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 439);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  WebCore::Document::~Document(this, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  bmalloc::api *v5;
  void *v6;

  *(_QWORD *)this = off_1E33BA1B0;
  *((_QWORD *)this + 24) = &unk_1E33BA500;
  *((_QWORD *)this + 36) = &unk_1E33BA6C0;
  *((_QWORD *)this + 63) = &unk_1E33BA6E8;
  *((_QWORD *)this + 64) = &unk_1E33BA710;
  *((_QWORD *)this + 68) = &unk_1E33BA740;
  *((_QWORD *)this + 69) = &unk_1E33BA768;
  v3 = *((_QWORD *)this + 440);
  if (v3)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v3, a2);
  v4 = *((_QWORD *)this + 439);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  WebCore::Document::~Document(this, a2);
  bmalloc::api::isoDeallocate(v5, v6);
}

void `non-virtual thunk to'WebCore::TextDocument::~TextDocument(WebCore::TextDocument *this, void *a2)
{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;

  *((_QWORD *)this - 24) = off_1E33BA1B0;
  v3 = (WebCore::TextDocument *)((char *)this - 192);
  *(_QWORD *)this = &unk_1E33BA500;
  *((_QWORD *)this + 12) = &unk_1E33BA6C0;
  *((_QWORD *)this + 39) = &unk_1E33BA6E8;
  *((_QWORD *)this + 40) = &unk_1E33BA710;
  *((_QWORD *)this + 44) = &unk_1E33BA740;
  *((_QWORD *)this + 45) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 416);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 415);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  *((_QWORD *)this - 24) = off_1E33BA1B0;
  v3 = (WebCore::TextDocument *)((char *)this - 192);
  *(_QWORD *)this = &unk_1E33BA500;
  *((_QWORD *)this + 12) = &unk_1E33BA6C0;
  *((_QWORD *)this + 39) = &unk_1E33BA6E8;
  *((_QWORD *)this + 40) = &unk_1E33BA710;
  *((_QWORD *)this + 44) = &unk_1E33BA740;
  *((_QWORD *)this + 45) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 416);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 415);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WebCore::TextDocument *)((char *)this - 288);
  *((_QWORD *)this - 36) = off_1E33BA1B0;
  *((_QWORD *)this - 12) = &unk_1E33BA500;
  *(_QWORD *)this = &unk_1E33BA6C0;
  *((_QWORD *)this + 27) = &unk_1E33BA6E8;
  *((_QWORD *)this + 28) = &unk_1E33BA710;
  *((_QWORD *)this + 32) = &unk_1E33BA740;
  *((_QWORD *)this + 33) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 404);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 403);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WebCore::TextDocument *)((char *)this - 288);
  *((_QWORD *)this - 36) = off_1E33BA1B0;
  *((_QWORD *)this - 12) = &unk_1E33BA500;
  *(_QWORD *)this = &unk_1E33BA6C0;
  *((_QWORD *)this + 27) = &unk_1E33BA6E8;
  *((_QWORD *)this + 28) = &unk_1E33BA710;
  *((_QWORD *)this + 32) = &unk_1E33BA740;
  *((_QWORD *)this + 33) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 404);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 403);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WebCore::TextDocument *)((char *)this - 504);
  *((_QWORD *)this - 63) = off_1E33BA1B0;
  *((_QWORD *)this - 39) = &unk_1E33BA500;
  *((_QWORD *)this - 27) = &unk_1E33BA6C0;
  *(_QWORD *)this = &unk_1E33BA6E8;
  *((_QWORD *)this + 1) = &unk_1E33BA710;
  *((_QWORD *)this + 5) = &unk_1E33BA740;
  *((_QWORD *)this + 6) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 377);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 376);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WebCore::TextDocument *)((char *)this - 504);
  *((_QWORD *)this - 63) = off_1E33BA1B0;
  *((_QWORD *)this - 39) = &unk_1E33BA500;
  *((_QWORD *)this - 27) = &unk_1E33BA6C0;
  *(_QWORD *)this = &unk_1E33BA6E8;
  *((_QWORD *)this + 1) = &unk_1E33BA710;
  *((_QWORD *)this + 5) = &unk_1E33BA740;
  *((_QWORD *)this + 6) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 377);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 376);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WebCore::TextDocument *)((char *)this - 512);
  *((_QWORD *)this - 64) = off_1E33BA1B0;
  *((_QWORD *)this - 40) = &unk_1E33BA500;
  *((_QWORD *)this - 28) = &unk_1E33BA6C0;
  *((_QWORD *)this - 1) = &unk_1E33BA6E8;
  *(_QWORD *)this = &unk_1E33BA710;
  *((_QWORD *)this + 4) = &unk_1E33BA740;
  *((_QWORD *)this + 5) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 376);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 375);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WebCore::TextDocument *)((char *)this - 512);
  *((_QWORD *)this - 64) = off_1E33BA1B0;
  *((_QWORD *)this - 40) = &unk_1E33BA500;
  *((_QWORD *)this - 28) = &unk_1E33BA6C0;
  *((_QWORD *)this - 1) = &unk_1E33BA6E8;
  *(_QWORD *)this = &unk_1E33BA710;
  *((_QWORD *)this + 4) = &unk_1E33BA740;
  *((_QWORD *)this + 5) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 376);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 375);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WebCore::TextDocument *)((char *)this - 544);
  *((_QWORD *)this - 68) = off_1E33BA1B0;
  *((_QWORD *)this - 44) = &unk_1E33BA500;
  *((_QWORD *)this - 32) = &unk_1E33BA6C0;
  *((_QWORD *)this - 5) = &unk_1E33BA6E8;
  *((_QWORD *)this - 4) = &unk_1E33BA710;
  *(_QWORD *)this = &unk_1E33BA740;
  *((_QWORD *)this + 1) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 372);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 371);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WebCore::TextDocument *)((char *)this - 544);
  *((_QWORD *)this - 68) = off_1E33BA1B0;
  *((_QWORD *)this - 44) = &unk_1E33BA500;
  *((_QWORD *)this - 32) = &unk_1E33BA6C0;
  *((_QWORD *)this - 5) = &unk_1E33BA6E8;
  *((_QWORD *)this - 4) = &unk_1E33BA710;
  *(_QWORD *)this = &unk_1E33BA740;
  *((_QWORD *)this + 1) = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 372);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 371);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (WebCore::TextDocument *)((char *)this - 552);
  *((_QWORD *)this - 69) = off_1E33BA1B0;
  *((_QWORD *)this - 45) = &unk_1E33BA500;
  *((_QWORD *)this - 33) = &unk_1E33BA6C0;
  *((_QWORD *)this - 6) = &unk_1E33BA6E8;
  *((_QWORD *)this - 5) = &unk_1E33BA710;
  *((_QWORD *)this - 1) = &unk_1E33BA740;
  *(_QWORD *)this = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 371);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 370);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
}

{
  WebCore::Document *v3;
  uint64_t v4;
  uint64_t v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WebCore::TextDocument *)((char *)this - 552);
  *((_QWORD *)this - 69) = off_1E33BA1B0;
  *((_QWORD *)this - 45) = &unk_1E33BA500;
  *((_QWORD *)this - 33) = &unk_1E33BA6C0;
  *((_QWORD *)this - 6) = &unk_1E33BA6E8;
  *((_QWORD *)this - 5) = &unk_1E33BA710;
  *((_QWORD *)this - 1) = &unk_1E33BA740;
  *(_QWORD *)this = &unk_1E33BA768;
  v4 = *((_QWORD *)this + 371);
  if (v4)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v4, a2);
  v5 = *((_QWORD *)this + 370);
  if (v5)
    WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WebCore::TreeScopeOrderedMap::MapEntry,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::TreeScopeOrderedMap::MapEntry>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::deallocateTable(v5, a2);
  WebCore::Document::~Document(v3, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

void WebCore::SubmitEvent::~SubmitEvent(WebCore::SubmitEvent *this, void *a2)
{
  uint64_t v3;

  *(_QWORD *)this = off_1E33D9410;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  WebCore::Event::~Event(this, a2);
}

{
  uint64_t v3;
  bmalloc::api *v4;
  void *v5;

  *(_QWORD *)this = off_1E33D9410;
  v3 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::SearchInputType::*&)(void),WebCore::SearchInputType*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::TextFieldInputType::createContainer(WebCore::TextFieldInputType::PreserveSelectionRange)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  *a1 = &off_1E33DA018;
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::TextFieldInputType::createContainer(WebCore::TextFieldInputType::PreserveSelectionRange)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)this = &off_1E33DA018;
  v3 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      v7 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v7)
      {
        v10 = v3;
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v3 + 16), (WTF::StringImpl *)(*(_QWORD *)(v3 + 16) + 32 * v7));
        v3 = v10;
      }
      v8 = *(WTF **)(v3 + 16);
      if (v8)
      {
        *(_QWORD *)(v3 + 16) = 0;
        *(_DWORD *)(v3 + 24) = 0;
        v9 = v3;
        WTF::fastFree(v8, a2);
        v3 = v9;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

void WTF::Detail::CallableWrapper<WebCore::TextFieldInputType::createContainer(WebCore::TextFieldInputType::PreserveSelectionRange)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  WebCore::Element *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16[2];
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  int v30;
  char v31;
  uint64_t v32;
  int v33;
  char v34;
  __int16 v35;
  char v36;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    v3 = *(WebCore::Element **)(v1 + 8);
    if (v3)
    {
      if ((*((_BYTE *)v3 + 54) & 2) != 0 && WebCore::Element::isUserActionElementFocused(v3))
      {
        v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
        v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 40) + 8) + 3064);
        v6 = *(_QWORD *)(v5 + 56);
        if (v6)
          *(_DWORD *)(v6 + 24) += 2;
        v17 = v6;
        v18 = *(_DWORD *)(v5 + 64);
        v19 = *(_BYTE *)(v5 + 68);
        v7 = *(_QWORD *)(v5 + 72);
        if (v7)
          *(_DWORD *)(v7 + 24) += 2;
        v20 = v7;
        v21 = *(_DWORD *)(v5 + 80);
        v22 = *(_BYTE *)(v5 + 84);
        v8 = *(_QWORD *)(v5 + 88);
        if (v8)
          *(_DWORD *)(v8 + 24) += 2;
        v23 = v8;
        v24 = *(_DWORD *)(v5 + 96);
        v25 = *(_BYTE *)(v5 + 100);
        v9 = *(_QWORD *)(v5 + 104);
        if (v9)
          *(_DWORD *)(v9 + 24) += 2;
        v26 = v9;
        v27 = *(_DWORD *)(v5 + 112);
        v28 = *(_BYTE *)(v5 + 116);
        v10 = *(_QWORD *)(v5 + 120);
        if (v10)
          *(_DWORD *)(v10 + 24) += 2;
        v29 = v10;
        v30 = *(_DWORD *)(v5 + 128);
        v31 = *(_BYTE *)(v5 + 132);
        v11 = *(_QWORD *)(v5 + 136);
        if (v11)
          *(_DWORD *)(v11 + 24) += 2;
        v32 = v11;
        v34 = *(_BYTE *)(v5 + 148);
        v33 = *(_DWORD *)(v5 + 144);
        v35 = *(_WORD *)(v5 + 152);
        v36 = *(_BYTE *)(v5 + 154);
        v12 = *(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL;
        if (v12)
          v12 = *(_QWORD *)((*(_QWORD *)(v4 + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
        if (v10 == v12)
        {
          v13 = *(_DWORD *)(a1 + 8);
          v14 = *(_DWORD *)(a1 + 12);
          v15 = *(_DWORD *)(a1 + 16);
          v16[0] = 0;
          v16[1] = 0;
          WebCore::HTMLTextFormControlElement::setSelectionRange(v4, v13, v14, v15, 3, v16, 0);
        }
        WebCore::VisibleSelection::~VisibleSelection((WebCore::VisibleSelection *)&v17);
      }
    }
  }
}

unint64_t WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(unsigned int *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)a1[3] <= a3)
  {
    v9 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v9 >= 0x10)
      v10 = v9 + 1;
    else
      v10 = 16;
    if (v10 > a2)
      a2 = v10;
    WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = a1[2] + ((unint64_t)a1[2] >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

unsigned int *WTF::Vector<WebCore::DataListSuggestion,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(unsigned int *result, unint64_t a2)
{
  unsigned int v2;
  unsigned int *v3;
  WTF *v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  unsigned int *v7;
  unsigned int **v8;
  unsigned int **v9;
  unsigned int *v10;
  unsigned int *v11;
  WTF::StringImpl *v12;

  if (result[2] < a2)
  {
    v2 = a2;
    if (a2 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v3 = result;
      v4 = *(WTF **)result;
      v5 = result[3];
      result = (unsigned int *)WTF::fastMalloc((WTF *)(16 * a2));
      v3[2] = v2;
      *(_QWORD *)v3 = result;
      if ((_DWORD)v5)
      {
        v7 = result;
        v8 = (unsigned int **)((char *)v4 + 16 * v5);
        v9 = (unsigned int **)v4;
        do
        {
          v10 = *v9;
          *v9 = 0;
          *(_QWORD *)v7 = v10;
          v11 = v9[1];
          v9[1] = 0;
          *((_QWORD *)v7 + 1) = v11;
          v12 = (WTF::StringImpl *)v9[1];
          v9[1] = 0;
          if (v12)
          {
            if (*(_DWORD *)v12 == 2)
              WTF::StringImpl::destroy(v12, v6);
            else
              *(_DWORD *)v12 -= 2;
          }
          result = *v9;
          *v9 = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v6);
            else
              *result -= 2;
          }
          v9 += 2;
          v7 += 4;
        }
        while (v9 != v8);
      }
      if (v4)
      {
        if (*(WTF **)v3 == v4)
        {
          *(_QWORD *)v3 = 0;
          v3[2] = 0;
        }
        return (unsigned int *)WTF::fastFree(v4, v6);
      }
    }
  }
  return result;
}

WTF::StringImpl **WebCore::TimeInputType::formControlType(WebCore::TimeInputType *this)
{
  _QWORD v2[2];

  {
    v2[0] = "time";
    v2[1] = 5;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::InputTypeNames::time(void)::name, (uint64_t)v2);
  }
  return &WebCore::InputTypeNames::time(void)::name;
}

uint64_t WebCore::TimeInputType::dateType(WebCore::TimeInputType *this)
{
  return 4;
}

void WebCore::TimeInputType::defaultValueForStepUp(WebCore::TimeInputType *this@<X0>, uint64_t a2@<X8>)
{
  double v3;
  double v4;
  uint64_t v5;
  double v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[40];
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  WTF::WallTime::now(this);
  v4 = v3 * 1000.0;
  v5 = WTF::calculateLocalTimeOffset();
  WebCore::DateComponents::fromMillisecondsSinceMidnight(v4 + (double)(int)((double)SHIDWORD(v5) / 60000.0) * 60000.0, (uint64_t)v10);
  if (v10[36])
  {
    v6 = WebCore::DateComponents::millisecondsSinceEpoch((WebCore::DateComponents *)v10);
    if ((*(_QWORD *)&v6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      *(_QWORD *)a2 = 0;
      *(_WORD *)(a2 + 8) = 0;
      if (fabs(v6) == INFINITY)
      {
        *(_DWORD *)(a2 + 12) = 0;
        *(_DWORD *)(a2 + 16) = v6 < 0.0;
      }
      else
      {
        *(_QWORD *)(a2 + 12) = 2;
      }
    }
    else
    {
      v7 = (const char *)WTF::numberToString();
      v8 = (uint64_t)v7;
      v9 = 0x100000000;
      if (v7)
        v9 = strlen(v7) | 0x100000000;
      WebCore::Decimal::fromString(v8, v9, a2);
    }
  }
  else
  {
    *(_QWORD *)(a2 + 12) = 3;
    *(_QWORD *)a2 = 0;
    *(_WORD *)(a2 + 8) = 0;
  }
}

void WebCore::TimeInputType::createStepRange(_QWORD *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  double v40;
  double v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  _BYTE v50[24];
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v50[12] = 3;
  *(_QWORD *)v50 = 0;
  *(_WORD *)&v50[8] = 0;
  WebCore::InputType::findStepBase(a1, (uint64_t)v50, (uint64_t)&v48);
  v6 = *(_QWORD *)(*(_QWORD *)(a1[3] + 8) + 104);
  if (v6
    && ((v7 = *(_DWORD *)(v6 + 4), (v7 & 1) != 0)
      ? (v8 = *(_QWORD *)(v6 + 40), LODWORD(v9) = *(_DWORD *)(v6 + 52))
      : (v8 = v6 + 32, LODWORD(v9) = v7 >> 5),
        (_DWORD)v9))
  {
    v9 = v9;
    v10 = (uint64_t *)(v8 + 8);
    while (1)
    {
      v11 = *(v10 - 1);
      if (v11 == WebCore::HTMLNames::minAttr
        || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 24)
        && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 32))
      {
        break;
      }
      v10 += 2;
      if (!--v9)
      {
        v10 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v10 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v12 = (const char *)WTF::numberToString();
  v13 = (uint64_t)v12;
  v14 = 0x100000000;
  if (v12)
    v14 = strlen(v12) | 0x100000000;
  WebCore::Decimal::fromString(v13, v14, (uint64_t)&v44);
  v15 = *v10;
  if (*v10)
  {
    v16 = *(_QWORD *)(v15 + 8);
    v17 = *(unsigned int *)(v15 + 4) | ((unint64_t)((*(_DWORD *)(v15 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v16 = 0;
    v17 = 0x100000000;
  }
  (*(void (**)(_BYTE *__return_ptr, _QWORD *, uint64_t, unint64_t))(*a1 + 936))(v50, a1, v16, v17);
  if (v51)
  {
    v40 = WebCore::DateComponents::millisecondsSinceEpoch((WebCore::DateComponents *)v50);
    WebCore::Decimal::fromDouble(v40, (uint64_t)&v46);
  }
  else
  {
    v46 = v44;
    v47 = v45;
  }
  v18 = *(_QWORD *)(*(_QWORD *)(a1[3] + 8) + 104);
  if (v18
    && ((v19 = *(_DWORD *)(v18 + 4), (v19 & 1) != 0)
      ? (v20 = *(_QWORD *)(v18 + 40), LODWORD(v21) = *(_DWORD *)(v18 + 52))
      : (v20 = v18 + 32, LODWORD(v21) = v19 >> 5),
        (_DWORD)v21))
  {
    v21 = v21;
    v22 = (uint64_t *)(v20 + 8);
    while (1)
    {
      v23 = *(v22 - 1);
      if (v23 == WebCore::HTMLNames::maxAttr
        || *(_QWORD *)(v23 + 24) == *(_QWORD *)(WebCore::HTMLNames::maxAttr + 24)
        && *(_QWORD *)(v23 + 32) == *(_QWORD *)(WebCore::HTMLNames::maxAttr + 32))
      {
        break;
      }
      v22 += 2;
      if (!--v21)
      {
        v22 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v22 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v24 = (const char *)WTF::numberToString();
  v25 = (uint64_t)v24;
  v26 = 0x100000000;
  if (v24)
    v26 = strlen(v24) | 0x100000000;
  WebCore::Decimal::fromString(v25, v26, (uint64_t)&v42);
  v27 = *v22;
  if (*v22)
  {
    v28 = *(_QWORD *)(v27 + 8);
    v29 = *(unsigned int *)(v27 + 4) | ((unint64_t)((*(_DWORD *)(v27 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v28 = 0;
    v29 = 0x100000000;
  }
  (*(void (**)(_BYTE *__return_ptr, _QWORD *, uint64_t, unint64_t))(*a1 + 936))(v50, a1, v28, v29);
  if (v51)
  {
    v41 = WebCore::DateComponents::millisecondsSinceEpoch((WebCore::DateComponents *)v50);
    WebCore::Decimal::fromDouble(v41, (uint64_t)&v44);
  }
  else
  {
    v44 = v42;
    v45 = v43;
  }
  v30 = *(_QWORD *)(*(_QWORD *)(a1[3] + 8) + 104);
  if (v30
    && ((v31 = *(_DWORD *)(v30 + 4), (v31 & 1) != 0)
      ? (v32 = *(_QWORD *)(v30 + 40), LODWORD(v33) = *(_DWORD *)(v30 + 52))
      : (v32 = v30 + 32, LODWORD(v33) = v31 >> 5),
        (_DWORD)v33))
  {
    v33 = v33;
    v34 = (uint64_t *)(v32 + 8);
    while (1)
    {
      v35 = *(v34 - 1);
      if (v35 == WebCore::HTMLNames::stepAttr
        || *(_QWORD *)(v35 + 24) == *(_QWORD *)(WebCore::HTMLNames::stepAttr + 24)
        && *(_QWORD *)(v35 + 32) == *(_QWORD *)(WebCore::HTMLNames::stepAttr + 32))
      {
        break;
      }
      v34 += 2;
      if (!--v33)
      {
        v34 = (uint64_t *)MEMORY[0x1E0CBF2F8];
        break;
      }
    }
  }
  else
  {
    v34 = (uint64_t *)MEMORY[0x1E0CBF2F8];
  }
  v36 = *v34;
  if (v36)
  {
    v37 = *(_QWORD *)(v36 + 8);
    v38 = *(unsigned int *)(v36 + 4) | ((unint64_t)((*(_DWORD *)(v36 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v37 = 0;
    v38 = 0x100000000;
  }
  WebCore::StepRange::parseStep(a2, (int *)&WebCore::timeStepDescription, v37, v38, (uint64_t)v50);
  *(_OWORD *)a3 = v44;
  *(_QWORD *)(a3 + 16) = v45;
  *(_OWORD *)(a3 + 24) = v46;
  *(_QWORD *)(a3 + 40) = v47;
  v39 = *(_DWORD *)&v50[12] & 0xFFFFFFFD;
  if ((*(_DWORD *)&v50[12] & 0xFFFFFFFD) != 0)
  {
    *(_OWORD *)(a3 + 48) = *(_OWORD *)v50;
    *(_QWORD *)(a3 + 64) = *(_QWORD *)&v50[16];
  }
  else
  {
    *(_QWORD *)(a3 + 60) = 1;
    *(_QWORD *)(a3 + 48) = 1;
    *(_WORD *)(a3 + 56) = 0;
  }
  if ((HIDWORD(v48) & 0xFFFFFFFD) != 0)
  {
    *(_OWORD *)(a3 + 72) = v48;
    *(_QWORD *)(a3 + 88) = v49;
  }
  else
  {
    *(_QWORD *)(a3 + 84) = 1;
    *(_QWORD *)(a3 + 72) = 1;
    *(_WORD *)(a3 + 80) = 0;
  }
  *(_OWORD *)(a3 + 96) = WebCore::timeStepDescription;
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 113) = v39 != 0;
  *(_BYTE *)(a3 + 114) = 1;
}

void WebCore::TimeInputType::parseToDateComponents(unsigned __int8 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  __int128 v4;
  char v5;
  __int128 v6;
  __int128 v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;

  if (!(_DWORD)a2)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 36) = 0;
    return;
  }
  if ((a2 & 0xFF00000000) != 0)
  {
    v9 = a1;
    v10 = a2;
    LOBYTE(v8) = 0;
    v6 = 0u;
    v7 = 0u;
    if (!WebCore::DateComponents::parseTime<unsigned char>((uint64_t)&v6, &v9))
      goto LABEL_9;
  }
  else
  {
    v9 = a1;
    v10 = a2;
    LOBYTE(v8) = 0;
    v6 = 0u;
    v7 = 0u;
    if (!WebCore::DateComponents::parseTime<char16_t>((uint64_t)&v6, (unsigned __int16 **)&v9))
    {
LABEL_9:
      v5 = 0;
      *(_BYTE *)a3 = 0;
      goto LABEL_10;
    }
  }
  if (v10)
    goto LABEL_9;
  v4 = v7;
  *(_OWORD *)a3 = v6;
  *(_OWORD *)(a3 + 16) = v4;
  *(_DWORD *)(a3 + 32) = v8;
  v5 = 1;
LABEL_10:
  *(_BYTE *)(a3 + 36) = v5;
}

void WebCore::TimeInputType::setMillisecondToDateComponents(double a1@<D0>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  int v6;
  long double v7;
  int v8;
  long double v9;
  int v10;
  char v11;

  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    v11 = 0;
    *(_BYTE *)a2 = 0;
  }
  else
  {
    v4 = fmod(round(a1), 86400000.0);
    v5 = v4;
    if (v4 < 0.0)
      v5 = v4 + 86400000.0;
    v6 = (int)fmod(v5, 1000.0);
    v7 = floor(v5 / 1000.0);
    v8 = (int)fmod(v7, 60.0);
    v9 = floor(v7 / 60.0);
    v10 = (int)fmod(v9, 60.0);
    *(_DWORD *)a2 = v6;
    *(_DWORD *)(a2 + 4) = v8;
    *(_DWORD *)(a2 + 8) = v10;
    *(_DWORD *)(a2 + 12) = (int)(v9 / 60.0);
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_BYTE *)(a2 + 32) = 4;
    v11 = 1;
  }
  *(_BYTE *)(a2 + 36) = v11;
}

BOOL WebCore::TimeInputType::isValidFormat(uint64_t a1, int a2)
{
  return (~a2 & 0xB0) == 0;
}

void WebCore::TimeInputType::formatDateTimeFieldsState(uint64_t a1@<X1>, WTF::StringImpl **a2@<X8>)
{
  WTF::StringImpl *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  unsigned int v14;
  int v15;
  BOOL v16;
  int v17;
  char v18;
  _OWORD *v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  int v29;
  BOOL v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  uint64_t v34;
  _DWORD *v35;
  char *v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  BOOL v42;
  uint64_t v43;
  _WORD *v44;
  uint64_t v45;
  _BYTE *v46;
  WTF::StringImpl *v47;
  _BYTE *v48;
  size_t v49;
  int v50;
  _BYTE *v51;
  unsigned int v52;
  char *v53;
  uint64_t v54;
  size_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  __int128 v59;
  char *v60;
  int8x16_t v61;
  __int128 v62;
  __int128 v63;
  char *v64;
  char *v65;
  char *v66;
  __int16 v67;
  int v68;
  _WORD *v69;
  unsigned int v70;
  _WORD *v71;
  unint64_t v72;
  _WORD *v73;
  uint64_t v74;
  uint64_t v75;
  _WORD *v76;
  unsigned __int128 *v78;
  unsigned __int128 *v79;
  unsigned __int128 v80;
  char v81;
  WTF::StringImpl *v82;
  uint64_t v83;
  unsigned int v84;
  _DWORD *v85;
  uint64_t v86;
  unsigned int v87;
  _BYTE v88[12];
  int8x16x2_t v89;
  int8x16x2_t v90;
  int8x16x2_t v91;

  *(_QWORD *)&v88[4] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 28))
  {
    if (*(_BYTE *)(a1 + 36) && *(_BYTE *)(a1 + 57) != 0)
    {
      v6 = 0;
      v7 = *(_DWORD *)(a1 + 24) % 0xCu;
      v8 = *(_DWORD *)(a1 + 32);
      if (*(_BYTE *)(a1 + 56))
        v9 = 12;
      else
        v9 = 0;
      v10 = v9 + v7;
      v86 = 0x200000030;
      v87 = v9 + v7;
      v11 = v8;
      v83 = 0x200000030;
      v84 = v8;
      v12 = v10;
      do
      {
        ++v6;
        v13 = v12 > 9;
        v12 /= 0xAu;
      }
      while (v13);
      v14 = 0;
      do
      {
        ++v14;
        v13 = v11 > 9;
        v11 /= 0xAu;
      }
      while (v13);
      if (v6 <= 2)
        v6 = 2;
      if (v14 <= 2)
        v15 = 2;
      else
        v15 = v14;
      if (v15 < 0
        || ((v16 = __OFADD__(v15, 1), v17 = v15 + 1, !v16) ? (v18 = 0) : (v18 = 1),
            (v6 & 0x80000000) != 0 || (v18 & 1) != 0 || __OFADD__(v6, v17)))
      {
        v82 = 0;
      }
      else
      {
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>>(v6 + v17, 1, (unsigned __int8 *)&v86, v10, 58, (unsigned __int8 *)&v83, v8, &v82);
        v20 = v82;
        if (v82)
        {
          if (!*(_BYTE *)(a1 + 52))
          {
            if (!*(_BYTE *)(a1 + 44))
            {
              *a2 = v82;
              return;
            }
            v37 = 0;
            v38 = *((_DWORD *)v82 + 1);
            *(_DWORD *)v82 += 2;
            v39 = *(_DWORD *)(a1 + 40);
            v40 = v39;
            do
            {
              ++v37;
              v13 = v40 > 9;
              v40 /= 0xAu;
            }
            while (v13);
            if (v37 <= 2)
              v37 = 2;
            if ((v37 & 0x80000000) == 0)
            {
              v16 = __OFADD__(v37, 1);
              v41 = v37 + 1;
              v42 = v16;
              if ((v38 & 0x80000000) == 0 && !v42)
              {
                v43 = v38 + v41;
                if (!__OFADD__(v38, v41))
                {
                  if ((*((_BYTE *)v20 + 16) & 4) != 0)
                  {
                    if ((v43 & 0x80000000) == 0)
                    {
                      WTF::tryFastCompactMalloc((WTF *)(v43 + 20));
                      v35 = (_DWORD *)v86;
                      if (v86)
                      {
                        v48 = (_BYTE *)(v86 + 20);
                        *(_DWORD *)v86 = 2;
                        v35[1] = v43;
                        *((_QWORD *)v35 + 1) = v35 + 5;
                        v35[4] = 4;
                        v19 = (_OWORD *)*((_QWORD *)v20 + 1);
                        v49 = *((unsigned int *)v20 + 1);
                        if ((*((_BYTE *)v20 + 16) & 4) != 0)
                        {
                          if ((_DWORD)v49)
                          {
                            if ((_DWORD)v49 == 1)
                              *v48 = *(_BYTE *)v19;
                            else
                              memcpy(v35 + 5, v19, v49);
                          }
                        }
                        else
                        {
                          if (v49 < 0x10)
                          {
                            v78 = (unsigned __int128 *)(v35 + 5);
                          }
                          else
                          {
                            v78 = (unsigned __int128 *)&v48[v49 & 0xFFFFFFF0];
                            v79 = (unsigned __int128 *)(v35 + 5);
                            do
                            {
                              v80 = (unsigned __int128)vld2q_s8((const char *)v19);
                              v19 += 2;
                              *v79++ = v80;
                            }
                            while (v79 != v78);
                          }
                          while (v78 != (unsigned __int128 *)&v48[v49])
                          {
                            v81 = *(_BYTE *)v19;
                            v19 = (_OWORD *)((char *)v19 + 2);
                            *(_BYTE *)v78 = v81;
                            v78 = (unsigned __int128 *)((char *)v78 + 1);
                          }
                        }
                        v50 = 0;
                        v51 = &v48[*((unsigned int *)v20 + 1)];
                        *v51 = 58;
                        v52 = v39;
                        do
                        {
                          --v50;
                          v13 = v52 > 9;
                          v52 /= 0xAu;
                        }
                        while (v13);
                        v53 = v51 + 1;
                        if (-v50 != 1 && v50 != 0)
                        {
                          v54 = 0;
                        }
                        else
                        {
                          v54 = (v50 + 2);
                          if (v54 <= 1)
                            v55 = 1;
                          else
                            v55 = v54;
                          memset(v53, 48, v55);
                        }
                        v56 = 0;
                        do
                        {
                          v88[v56--] = (v39 % 0xA) | 0x30;
                          v13 = v39 > 9;
                          v39 /= 0xAu;
                        }
                        while (v13);
                        if (v56 + 14 <= 13)
                          memcpy(&v53[v54], &v88[v56 + 1], -v56);
                        goto LABEL_83;
                      }
                    }
                  }
                  else if (v43 <= 0x7FFFFFEF)
                  {
                    WTF::tryFastCompactMalloc((WTF *)(2 * v43 + 20));
                    v35 = (_DWORD *)v86;
                    if (v86)
                    {
                      v44 = (_WORD *)(v86 + 20);
                      *(_DWORD *)v86 = 2;
                      v35[1] = v43;
                      *((_QWORD *)v35 + 1) = v35 + 5;
                      v35[4] = 0;
                      v19 = (_OWORD *)*((_QWORD *)v20 + 1);
                      v45 = *((unsigned int *)v20 + 1);
                      if ((*((_BYTE *)v20 + 16) & 4) != 0)
                      {
                        v57 = (char *)&v44[v45];
                        if (v45 >= 0x40)
                        {
                          v58 = (char *)&v44[v45 & 0xFFFFFFC0];
                          v59 = 0uLL;
                          v60 = (char *)(v35 + 5);
                          do
                          {
                            v89.val[0] = (int8x16_t)*v19;
                            v61 = *((int8x16_t *)v19 + 1);
                            v90.val[0] = (int8x16_t)v19[2];
                            v62 = v19[3];
                            v19 += 4;
                            v63 = v62;
                            v90.val[1] = 0uLL;
                            v91.val[0] = v61;
                            v89.val[1] = 0uLL;
                            v64 = v60;
                            vst2q_s8(v64, v89);
                            v64 += 32;
                            v91.val[1] = 0uLL;
                            vst2q_s8(v64, v91);
                            v65 = v60 + 64;
                            vst2q_s8(v65, v90);
                            v66 = v60 + 96;
                            vst2q_s8(v66, *(int8x16x2_t *)(&v59 - 1));
                            v60 += 128;
                          }
                          while (v60 != v58);
                        }
                        else
                        {
                          v58 = (char *)(v35 + 5);
                        }
                        while (v58 != v57)
                        {
                          v67 = *(unsigned __int8 *)v19;
                          v19 = (_OWORD *)((char *)v19 + 1);
                          *(_WORD *)v58 = v67;
                          v58 += 2;
                        }
                      }
                      else if ((_DWORD)v45 == 1)
                      {
                        *v44 = *(_WORD *)v19;
                      }
                      else if ((_DWORD)v45)
                      {
                        memcpy(v35 + 5, v19, 2 * v45);
                      }
                      v68 = 0;
                      v69 = &v44[*((unsigned int *)v20 + 1)];
                      *v69 = 58;
                      v70 = v39;
                      do
                      {
                        --v68;
                        v13 = v70 > 9;
                        v70 /= 0xAu;
                      }
                      while (v13);
                      v71 = v69 + 1;
                      if (-v68 != 1 && v68 != 0)
                      {
                        v74 = 0;
                      }
                      else
                      {
                        v72 = (v68 + 2);
                        if (v72 <= 1)
                          v72 = 1;
                        v73 = v71;
                        do
                        {
                          *v73++ = 48;
                          --v72;
                        }
                        while (v72);
                        v74 = (v68 + 2);
                      }
                      v75 = 0;
                      do
                      {
                        v88[v75--] = (v39 % 0xA) | 0x30;
                        v13 = v39 > 9;
                        v39 /= 0xAu;
                      }
                      while (v13);
                      if (v75 + 14 <= 13)
                      {
                        v76 = &v71[v74];
                        do
                          *v76++ = v88[v75 + 1];
                        while (!__CFADD__(v75++, 1));
                      }
                      goto LABEL_83;
                    }
                  }
                }
              }
            }
            goto LABEL_148;
          }
          v21 = 0;
          *(_DWORD *)v82 += 2;
          if (*(_BYTE *)(a1 + 44))
            v22 = *(_DWORD *)(a1 + 40);
          else
            v22 = 0;
          v23 = *(_DWORD *)(a1 + 48);
          v24 = v23;
          v86 = 0x200000030;
          v87 = v22;
          v83 = 0x300000030;
          v84 = v23;
          v25 = *((_DWORD *)v20 + 1);
          v26 = v22;
          do
          {
            ++v21;
            v13 = v26 > 9;
            v26 /= 0xAu;
          }
          while (v13);
          v27 = 0;
          do
          {
            ++v27;
            v13 = v24 > 9;
            v24 /= 0xAu;
          }
          while (v13);
          if (v21 <= 2)
            v21 = 2;
          if (v27 <= 3)
            v28 = 3;
          else
            v28 = v27;
          if (v28 < 0)
            goto LABEL_148;
          v16 = __OFADD__(v28, 1);
          v29 = v28 + 1;
          v30 = v16;
          if ((v21 & 0x80000000) != 0)
            goto LABEL_148;
          if (v30)
            goto LABEL_148;
          v16 = __OFADD__(v21, v29);
          v31 = v21 + v29;
          if (v16)
            goto LABEL_148;
          v16 = __OFADD__(v31, 1);
          v32 = v31 + 1;
          v33 = v16;
          if (v25 < 0)
            goto LABEL_148;
          if (v33)
            goto LABEL_148;
          v34 = v25 + v32;
          if (__OFADD__(v25, v32))
            goto LABEL_148;
          if ((*((_BYTE *)v20 + 16) & 4) != 0)
          {
            if ((_DWORD)v34)
            {
              if ((v34 & 0x80000000) == 0)
              {
                WTF::tryFastCompactMalloc((WTF *)(v34 + 20));
                v35 = v85;
                if (v85)
                {
                  v46 = v85 + 5;
                  *v85 = 2;
                  v35[1] = v34;
                  *((_QWORD *)v35 + 1) = v35 + 5;
                  v35[4] = 4;
                  WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>>(v46, (uint64_t)v20, 58, (uint64_t)&v86, v22, 46, (uint64_t)&v83, v23);
                  goto LABEL_83;
                }
              }
LABEL_148:
              *a2 = 0;
              __break(0xC471u);
              JUMPOUT(0x195CC9D34);
            }
          }
          else if ((_DWORD)v34)
          {
            if (v34 <= 0x7FFFFFEF)
            {
              WTF::tryFastCompactMalloc((WTF *)(2 * v34 + 20));
              v35 = v85;
              if (v85)
              {
                v36 = (char *)(v85 + 5);
                *v85 = 2;
                v35[1] = v34;
                *((_QWORD *)v35 + 1) = v35 + 5;
                v35[4] = 0;
                WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::PaddingSpecification<unsigned int>,void>>(v36, (uint64_t)v20, 58, (unsigned __int8 *)&v86, v22, 46, (unsigned __int8 *)&v83, v23);
LABEL_83:
                *a2 = (WTF::StringImpl *)v35;
                if (*(_DWORD *)v20 == 2)
                  WTF::StringImpl::destroy(v20, (WTF::StringImpl *)v19);
                else
                  *(_DWORD *)v20 -= 2;
                v47 = v82;
                v82 = 0;
                if (v47)
                {
                  if (*(_DWORD *)v47 == 2)
                    WTF::StringImpl::destroy(v47, (WTF::StringImpl *)v19);
                  else
                    *(_DWORD *)v47 -= 2;
                }
                return;
              }
            }
            goto LABEL_148;
          }
          v35 = (_DWORD *)MEMORY[0x1E0CBEF70];
          *MEMORY[0x1E0CBEF70] += 2;
          goto LABEL_83;
        }
      }
      __break(0xC471u);
      JUMPOUT(0x195CC9D40);
    }
  }
  v5 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *(_DWORD *)v5 += 2;
  *a2 = v5;
}

WTF::StringImpl *WebCore::TimeInputType::setupLayoutParameters(uint64_t a1, uint64_t a2, _DWORD *a3, __n128 a4)
{
  BOOL v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *result;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  _BYTE v23[12];
  int v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  _BYTE v30[12];
  int v31;
  WTF::StringImpl *v32[3];
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;

  if (*a3)
  {
    *(_BYTE *)(a2 + 24) = 1;
    goto LABEL_21;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 208))(v32, a1, 1);
  v28 = v33;
  v29 = v34;
  v27 = 1;
  v25 = 1000;
  v26 = 0;
  a4.n128_f64[0] = WebCore::Decimal::remainder((WebCore::Decimal *)&v28, (const WebCore::Decimal *)&v25, (uint64_t)v30);
  if (v31 != 3)
  {
    *(_BYTE *)(a2 + 24) = 1;
    goto LABEL_21;
  }
  v21 = v35;
  v22 = v36;
  v20 = 1;
  v18 = 1000;
  v19 = 0;
  a4.n128_f64[0] = WebCore::Decimal::remainder((WebCore::Decimal *)&v21, (const WebCore::Decimal *)&v18, (uint64_t)v23);
  v7 = v24 == 3;
  *(_BYTE *)(a2 + 24) = v24 != 3;
  if (!v7)
    goto LABEL_21;
  if (a3[1])
    goto LABEL_21;
  (*(void (**)(WTF::StringImpl **__return_ptr, uint64_t, uint64_t, __n128))(*(_QWORD *)a1 + 208))(v32, a1, 1, a4);
  v28 = v33;
  v29 = v34;
  v27 = 1;
  v25 = 60000;
  v26 = 0;
  a4.n128_f64[0] = WebCore::Decimal::remainder((WebCore::Decimal *)&v28, (const WebCore::Decimal *)&v25, (uint64_t)v30);
  if (v31 != 3
    || (v21 = v35,
        v22 = v36,
        v20 = 1,
        v18 = 60000,
        v19 = 0,
        a4.n128_f64[0] = WebCore::Decimal::remainder((WebCore::Decimal *)&v21, (const WebCore::Decimal *)&v18, (uint64_t)v23), v24 != 3))
  {
LABEL_21:
    (*(void (**)(WTF::StringImpl **__return_ptr, __n128))(**(_QWORD **)(a2 + 16) + 24))(v32, a4);
    v16 = v32[0];
    v32[0] = 0;
    v10 = *(WTF::StringImpl **)a2;
    *(_QWORD *)a2 = v16;
    if (!v10)
      goto LABEL_11;
    v17 = *(_DWORD *)v10 - 2;
    if (*(_DWORD *)v10 == 2)
    {
      WTF::StringImpl::destroy(v10, v15);
      v10 = v32[0];
      v32[0] = 0;
      if (!v10)
        goto LABEL_11;
      v17 = *(_DWORD *)v10 - 2;
      if (*(_DWORD *)v10 == 2)
      {
LABEL_18:
        WTF::StringImpl::destroy(v10, v14);
        goto LABEL_11;
      }
    }
    *(_DWORD *)v10 = v17;
    goto LABEL_11;
  }
  (*(void (**)(WTF::StringImpl **__return_ptr, double))(**(_QWORD **)(a2 + 16) + 32))(v32, a4.n128_f64[0]);
  v9 = v32[0];
  v32[0] = 0;
  v10 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v9;
  if (!v10)
    goto LABEL_11;
  v11 = *(_DWORD *)v10 - 2;
  if (*(_DWORD *)v10 != 2)
    goto LABEL_10;
  WTF::StringImpl::destroy(v10, v8);
  v10 = v32[0];
  v32[0] = 0;
  if (v10)
  {
    v11 = *(_DWORD *)v10 - 2;
    if (*(_DWORD *)v10 != 2)
    {
LABEL_10:
      *(_DWORD *)v10 = v11;
      goto LABEL_11;
    }
    goto LABEL_18;
  }
LABEL_11:
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  result = *(WTF::StringImpl **)(a2 + 8);
  *(WTF::StringImpl **)(a2 + 8) = v32[0];
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v12);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::TimeRanges::create@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;

  result = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *a1 = result;
  return result;
}

uint64_t WebCore::TimeRanges::TimeRanges(uint64_t this)
{
  *(_DWORD *)this = 1;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

{
  *(_DWORD *)this = 1;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

void WebCore::TimeRanges::create(double a1@<D0>, double a2@<D1>, _QWORD *a3@<X8>)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v7 = 1;
  *(_QWORD *)&v11 = WTF::MediaTime::createWithDouble((WTF::MediaTime *)v7, a1);
  *((_QWORD *)&v11 + 1) = v8;
  *(_QWORD *)&v10 = WTF::MediaTime::createWithDouble((WTF::MediaTime *)v11, a2);
  *((_QWORD *)&v10 + 1) = v9;
  v7[2] = 0;
  v7[1] = 0;
  WebCore::PlatformTimeRanges::add((WebCore::PlatformTimeRanges *)(v7 + 1), &v11, &v10, 0);
  *a3 = v7;
}

WebCore::TimeRanges *WebCore::TimeRanges::TimeRanges(WebCore::TimeRanges *this, double a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;

  *(_DWORD *)this = 1;
  *(_QWORD *)&v9 = WTF::MediaTime::createWithDouble(this, a2);
  *((_QWORD *)&v9 + 1) = v5;
  *(_QWORD *)&v8 = WTF::MediaTime::createWithDouble((WTF::MediaTime *)v9, a3);
  *((_QWORD *)&v8 + 1) = v6;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  WebCore::PlatformTimeRanges::add((WebCore::TimeRanges *)((char *)this + 8), &v9, &v8, 0);
  return this;
}

{
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;

  *(_DWORD *)this = 1;
  *(_QWORD *)&v9 = WTF::MediaTime::createWithDouble(this, a2);
  *((_QWORD *)&v9 + 1) = v5;
  *(_QWORD *)&v8 = WTF::MediaTime::createWithDouble((WTF::MediaTime *)v9, a3);
  *((_QWORD *)&v8 + 1) = v6;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = 0;
  WebCore::PlatformTimeRanges::add((WebCore::TimeRanges *)((char *)this + 8), &v9, &v8, 0);
  return this;
}

uint64_t WebCore::TimeRanges::start@<X0>(WebCore::TimeRanges *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  __int128 v7;

  if (*((_DWORD *)this + 5) <= a2)
  {
    result = WTF::MediaTime::zeroTime(this);
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v5 = 1;
  }
  else
  {
    v7 = *(_OWORD *)(*((_QWORD *)this + 1) + 32 * a2);
    result = WTF::MediaTime::toDouble((WTF::MediaTime *)&v7);
    v5 = 0;
    *(_QWORD *)a3 = v6;
  }
  *(_DWORD *)(a3 + 16) = v5;
  return result;
}

uint64_t WebCore::TimeRanges::end@<X0>(WebCore::TimeRanges *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  __int128 v7;

  if (*((_DWORD *)this + 5) <= a2)
  {
    result = WTF::MediaTime::zeroTime(this);
    *(_BYTE *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    v5 = 1;
  }
  else
  {
    v7 = *(_OWORD *)(*((_QWORD *)this + 1) + 32 * a2 + 16);
    result = WTF::MediaTime::toDouble((WTF::MediaTime *)&v7);
    v5 = 0;
    *(_QWORD *)a3 = v6;
  }
  *(_DWORD *)(a3 + 16) = v5;
  return result;
}

uint64_t WebCore::TimeRanges::copy@<X0>(WebCore::TimeRanges *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  result = WTF::fastMalloc((WTF *)0x18);
  v5 = result;
  *(_DWORD *)result = 1;
  v6 = *((unsigned int *)this + 5);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = v6;
  if (!(_DWORD)v6)
  {
LABEL_6:
    *a2 = v5;
    return result;
  }
  if (!(v6 >> 27))
  {
    result = WTF::fastMalloc((WTF *)(32 * v6));
    *(_DWORD *)(v5 + 16) = v6;
    *(_QWORD *)(v5 + 8) = result;
    v7 = *((unsigned int *)this + 5);
    if ((_DWORD)v7)
    {
      v8 = (__int128 *)*((_QWORD *)this + 1);
      v9 = 32 * v7;
      do
      {
        v10 = *v8;
        v11 = v8[1];
        v8 += 2;
        *(_OWORD *)result = v10;
        *(_OWORD *)(result + 16) = v11;
        result += 32;
        v9 -= 32;
      }
      while (v9);
    }
    goto LABEL_6;
  }
  __break(0xC471u);
  return result;
}

WTF *WebCore::TimeRanges::intersectWith(WebCore::TimeRanges *this, __int128 **a2)
{
  return WebCore::PlatformTimeRanges::intersectWith((WebCore::TimeRanges *)((char *)this + 8), a2 + 1);
}

uint64_t WebCore::TimeRanges::length(WebCore::TimeRanges *this)
{
  return *((unsigned int *)this + 5);
}

void WebCore::TimeRanges::add(WTF::MediaTime *a1, int a2, double a3, double a4)
{
  WebCore::PlatformTimeRanges *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  v6 = (WTF::MediaTime *)((char *)a1 + 8);
  *(_QWORD *)&v10 = WTF::MediaTime::createWithDouble(a1, a3);
  *((_QWORD *)&v10 + 1) = v7;
  *(_QWORD *)&v9 = WTF::MediaTime::createWithDouble((WTF::MediaTime *)v10, a4);
  *((_QWORD *)&v9 + 1) = v8;
  WebCore::PlatformTimeRanges::add(v6, &v10, &v9, a2);
}

uint64_t WebCore::TimeRanges::contain(WebCore::TimeRanges *this, double a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];
  __int128 v14;

  v12[0] = WTF::MediaTime::createWithDouble(this, a2);
  v12[1] = v3;
  if (!*((_DWORD *)this + 5))
    return 0;
  v4 = 0;
  v5 = 0;
  while (1)
  {
    v14 = *(_OWORD *)(*((_QWORD *)this + 1) + v4);
    v6 = WTF::MediaTime::compare((WTF::MediaTime *)v12, (const WTF::MediaTime *)&v14);
    if ((v6 & 0x80000000) == 0)
    {
      if (v5 >= *((unsigned int *)this + 5))
      {
        v8 = (_QWORD *)WTF::MediaTime::zeroTime((WTF::MediaTime *)v6);
        v9 = v8 + 1;
      }
      else
      {
        v7 = *((_QWORD *)this + 1) + v4;
        v8 = (_QWORD *)(v7 + 16);
        v9 = (uint64_t *)(v7 + 24);
      }
      v10 = *v9;
      v13[0] = *v8;
      v13[1] = v10;
      if ((int)WTF::MediaTime::compare((WTF::MediaTime *)v12, (const WTF::MediaTime *)v13) < 1)
        break;
    }
    ++v5;
    v4 += 32;
    if (v5 >= *((unsigned int *)this + 5))
      return 0;
  }
  return 1;
}

uint64_t WebCore::TimeRanges::nearest(WebCore::TimeRanges *this, double a2)
{
  WebCore::PlatformTimeRanges *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[2];
  _QWORD v7[2];

  v2 = (WebCore::TimeRanges *)((char *)this + 8);
  v6[0] = WTF::MediaTime::createWithDouble(this, a2);
  v6[1] = v3;
  v7[0] = WebCore::PlatformTimeRanges::nearest(v2, (const WTF::MediaTime *)v6);
  v7[1] = v4;
  return WTF::MediaTime::toDouble((WTF::MediaTime *)v7);
}

uint64_t WebCore::TypeAhead::handleEvent(WebCore::TypeAhead *this, WebCore::KeyboardEvent *a2, char a3)
{
  int v6;
  double v7;
  double v8;
  WTF::StringImpl *v9;
  unsigned __int16 v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl **v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  int v26;
  unsigned int v27;
  int v28;
  BOOL v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  WTF::StringImpl *v37;
  char v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  unsigned __int16 v55;
  WTF::StringImpl *v56;

  if (*((double *)a2 + 7) < *((double *)this + 1))
    return 0xFFFFFFFFLL;
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 24))(*(_QWORD *)this);
  v7 = *((double *)a2 + 7);
  v8 = v7 - *((double *)this + 1);
  *((double *)this + 1) = v7;
  v10 = WebCore::KeyboardEvent::charCode(a2);
  v55 = v10;
  if (v8 > 1.0)
  {
    v11 = (WTF::StringImpl *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v9);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = (WTF::StringImpl *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, v9);
      else
        *(_DWORD *)v12 -= 2;
    }
    *((_DWORD *)this + 10) = 0;
  }
  v13 = (WTF::StringImpl **)((char *)this + 24);
  LOWORD(v56) = v10;
  v14 = *((_QWORD *)this + 4);
  if (!v14)
    goto LABEL_13;
  v15 = *((unsigned int *)this + 10);
  if (v15 >= *(_DWORD *)(v14 + 4) || *v13)
    goto LABEL_13;
  if ((*(_BYTE *)(v14 + 16) & 4) != 0)
  {
    if (v10 > 0xFFu)
    {
LABEL_13:
      WTF::StringBuilder::append();
      goto LABEL_14;
    }
    v23 = *(_QWORD *)(v14 + 8);
    *((_DWORD *)this + 10) = v15 + 1;
    *(_BYTE *)(v23 + v15) = v10;
  }
  else
  {
    v22 = *(_QWORD *)(v14 + 8);
    *((_DWORD *)this + 10) = v15 + 1;
    *(_WORD *)(v22 + 2 * v15) = v10;
  }
LABEL_14:
  if (v6 < 1)
    return 0xFFFFFFFFLL;
  v54 = 0;
  if ((a3 & 2) != 0 && v55 == *((unsigned __int16 *)this + 8))
  {
    WTF::String::String();
    v16 = v56;
    v56 = 0;
    v54 = v16;
LABEL_36:
    *((_WORD *)this + 8) = v55;
    goto LABEL_37;
  }
  if ((a3 & 1) != 0)
  {
    v18 = *v13;
    if (*v13
      || (WTF::StringBuilder::shrinkToFit((WebCore::TypeAhead *)((char *)this + 24)),
          WTF::StringBuilder::reifyString((WebCore::TypeAhead *)((char *)this + 24)),
          (v18 = *v13) != 0))
    {
      *(_DWORD *)v18 += 2;
    }
    v19 = v54;
    v54 = v18;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v9);
      else
        *(_DWORD *)v19 -= 2;
    }
    v20 = *((_DWORD *)this + 10);
    if ((v20 & 0x80000000) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195CCAA28);
    }
    if (v20 >= 2)
    {
      v21 = 0;
      *((_WORD *)this + 8) = 0;
      goto LABEL_38;
    }
    goto LABEL_36;
  }
LABEL_37:
  v21 = 1;
LABEL_38:
  if (!v54 || !*((_DWORD *)v54 + 1))
    goto LABEL_39;
  v26 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 16))(*(_QWORD *)this);
  v27 = (v26 & ~(v26 >> 31)) + v21;
  WTF::String::foldCase((WTF::String *)&v54);
  v28 = 0;
  v17 = v27 % v6;
  v29 = 1;
  do
  {
    (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t))(**(_QWORD **)this + 32))(&v52, *(_QWORD *)this, v17);
    v30 = v52;
    if (v52)
    {
      v31 = *((unsigned int *)v52 + 1);
      if ((_DWORD)v31)
      {
        v32 = 0;
        while (1)
        {
          if (!v52)
            goto LABEL_95;
          if (v32 >= *((unsigned int *)v52 + 1))
            goto LABEL_66;
          v33 = *((_QWORD *)v52 + 1);
          if ((*((_BYTE *)v52 + 16) & 4) != 0)
          {
            v34 = *(unsigned __int8 *)(v33 + v32);
            if (v34 != 160)
              goto LABEL_53;
          }
          else
          {
            v34 = *(unsigned __int16 *)(v33 + 2 * v32);
            if (v34 != 160)
            {
              if (v34 <= 0xFF)
              {
LABEL_53:
                if ((v34 > 0x20u || ((1 << v34) & 0x100003600) == 0) && v34 != 11)
                  goto LABEL_66;
                goto LABEL_61;
              }
              if (MEMORY[0x19AEA858C]() != 9)
                goto LABEL_66;
            }
          }
LABEL_61:
          if (v31 == ++v32)
          {
            LODWORD(v32) = v31;
LABEL_66:
            v30 = v52;
            if (!v52)
              goto LABEL_95;
            if ((_DWORD)v32 || *((_DWORD *)v52 + 1) > v31)
            {
              WTF::StringImpl::substring(v52);
              v51 = v56;
              goto LABEL_70;
            }
            break;
          }
        }
      }
      *(_DWORD *)v30 += 2;
      v51 = v30;
    }
    else
    {
LABEL_95:
      v51 = 0;
    }
LABEL_70:
    WTF::String::foldCase((WTF::String *)&v51);
    v37 = v53;
    if (v53)
    {
      v9 = (WTF::StringImpl *)*((_QWORD *)v53 + 1);
      v37 = (WTF::StringImpl *)*((unsigned int *)v53 + 1);
    }
    else
    {
      v9 = 0;
    }
    if (v56)
    {
      v38 = WTF::StringImpl::startsWith();
      v39 = v56;
      v56 = 0;
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, v9);
        else
          *(_DWORD *)v39 -= 2;
      }
    }
    else
    {
      v38 = v37 == 0;
      v56 = 0;
    }
    v40 = v51;
    v51 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v9);
      else
        *(_DWORD *)v40 -= 2;
    }
    v41 = v52;
    v52 = 0;
    if (!v41)
      goto LABEL_82;
    if (*(_DWORD *)v41 != 2)
    {
      *(_DWORD *)v41 -= 2;
LABEL_82:
      if ((v38 & 1) != 0)
        break;
      goto LABEL_83;
    }
    WTF::StringImpl::destroy(v41, v9);
    if ((v38 & 1) != 0)
      break;
LABEL_83:
    ++v28;
    if ((_DWORD)v17 + 1 == v6)
      v17 = 0;
    else
      v17 = (v17 + 1);
    v29 = v28 < v6;
  }
  while (v28 != v6);
  v42 = v53;
  v53 = 0;
  v13 = (WTF::StringImpl **)((char *)this + 24);
  if (!v42)
    goto LABEL_99;
  if (*(_DWORD *)v42 == 2)
  {
    WTF::StringImpl::destroy(v42, v9);
    if (v29)
      goto LABEL_120;
LABEL_39:
    if ((a3 & 4) == 0)
      goto LABEL_40;
    v24 = (WTF::StringImpl *)*((_QWORD *)this + 4);
    if (v24)
    {
      v25 = (WTF::StringImpl *)*((_QWORD *)this + 4);
    }
    else
    {
      v25 = *v13;
      if (!*v13)
        goto LABEL_103;
    }
    if ((*((_BYTE *)v25 + 16) & 4) == 0)
    {
      v46 = *((unsigned int *)this + 10);
      if ((_DWORD)v46)
      {
        if (*v13)
          v24 = *v13;
        if ((v46 & 0x80000000) != 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195CCAA70);
        }
        v47 = *((_QWORD *)v24 + 1);
      }
      else
      {
        v47 = 0;
      }
      v45 = WTF::parseInteger<int,char16_t>(v47, v46, 10, 1);
LABEL_115:
      if ((v45 & 0xFF00000000) != 0)
        v48 = v45;
      else
        v48 = 0;
      v17 = (v48 - 1);
      if (v48 >= 1 && v48 <= v6)
        goto LABEL_120;
LABEL_40:
      v17 = 0xFFFFFFFFLL;
      goto LABEL_120;
    }
LABEL_103:
    v43 = *((unsigned int *)this + 10);
    if ((_DWORD)v43)
    {
      if (*v13)
        v24 = *v13;
      if ((v43 & 0x80000000) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195CCAA48);
      }
      v44 = *((_QWORD *)v24 + 1);
    }
    else
    {
      v44 = 0;
    }
    v45 = WTF::parseInteger<int,unsigned char>(v44, v43, 10, 1);
    goto LABEL_115;
  }
  *(_DWORD *)v42 -= 2;
LABEL_99:
  if (!v29)
    goto LABEL_39;
LABEL_120:
  v49 = v54;
  v54 = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v9);
    else
      *(_DWORD *)v49 -= 2;
  }
  return v17;
}

WTF::StringImpl *WebCore::URLDecomposition::origin@<X0>(WebCore::URLDecomposition *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  WTF::StringImpl *v6;
  unsigned int v7;
  unsigned int v8;
  WTF::StringImpl *result;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WebCore::URLDecomposition *v13;
  WTF::StringImpl *v14[5];
  uint64_t v15;
  char v16;
  char *v17;

  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)this + 16))(v14);
  WebCore::SecurityOrigin::create((WebCore::SecurityOrigin *)v14, &v15);
  v3 = v15;
  v4 = *(unsigned int *)(v15 + 32);
  if ((_DWORD)v4 == 1)
    goto LABEL_25;
  if ((_DWORD)v4 == -1)
  {
    v13 = (WebCore::URLDecomposition *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF::StringImpl *)WebCore::URLDecomposition::protocol(v13);
  }
  v17 = &v16;
  v5 = (_QWORD *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18SecurityOriginData8protocolEvEUlRKNS9_5TupleEE_JZNKS9_8protocolEvEUlRKNS8_16ProcessQualifiedINS6_23ObjectIdentifierGenericINS8_26OpaqueOriginIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEE_EEEEEJRKNS0_6__implIJSA_SK_EEEEEEDcOT_DpOT0____fmatrix_1[v4])(&v17, v15 + 8);
  if (MEMORY[0x19AEA53F4](*v5, "file", 4) && *(_BYTE *)(v3 + 59))
LABEL_25:
    WTF::StringImpl::createWithoutCopyingNonEmpty();
  else
    WebCore::SecurityOriginData::toString((WebCore::SecurityOriginData *)(v3 + 8), a2);
  v15 = 0;
  do
  {
    v7 = __ldaxr((unsigned int *)v3);
    v8 = v7 - 1;
  }
  while (__stlxr(v8, (unsigned int *)v3));
  if (!v8)
  {
    atomic_store(1u, (unsigned int *)v3);
    v10 = *(WTF::StringImpl **)(v3 + 48);
    *(_QWORD *)(v3 + 48) = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, v6);
      else
        *(_DWORD *)v10 -= 2;
    }
    v11 = *(WTF::StringImpl **)(v3 + 40);
    *(_QWORD *)(v3 + 40) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v6);
      else
        *(_DWORD *)v11 -= 2;
    }
    v12 = *(unsigned int *)(v3 + 32);
    if ((_DWORD)v12 != -1)
      ((void (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18SecurityOriginData5TupleENS6_16ProcessQualifiedIN3WTF23ObjectIdentifierGenericINS6_26OpaqueOriginIdentifierTypeENSA_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_9[v12])(&v17, v3 + 8);
    *(_DWORD *)(v3 + 32) = -1;
    WTF::fastFree((WTF *)v3, v6);
  }
  result = v14[0];
  v14[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::URLDecomposition::protocol@<X0>(WebCore::URLDecomposition *this@<X0>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *v3;
  uint64_t result;
  uint64_t v5;
  _BYTE *v6;
  WTF::StringImpl *v7[5];

  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)this + 16))(v7);
  if (WTF::protocolIsJavaScript())
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    goto LABEL_6;
  }
  result = WTF::URL::protocol((WTF::URL *)v7);
  if ((v5 & 0x80000000) != 0 || (v6 = (_BYTE *)result, result = (v5 + 1), __OFADD__((_DWORD)v5, 1)))
  {
    *a2 = 0;
    goto LABEL_12;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>>(result, (v5 & 0xFF00000000) != 0, v6, v5, 58, a2);
  if (!*a2)
  {
LABEL_12:
    __break(0xC471u);
    return result;
  }
LABEL_6:
  result = (uint64_t)v7[0];
  v7[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::URLDecomposition::host(WebCore::URLDecomposition *this)
{
  WTF::StringImpl *v1;
  WTF::StringImpl *result;
  WTF::StringImpl *v3[5];

  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)this + 16))(v3);
  WTF::URL::hostAndPort((WTF::URL *)v3);
  result = v3[0];
  v3[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v1);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::URLDecomposition::setHost(uint64_t a1, uint64_t a2, int a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  char v8;

  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)a1 + 16))(&v7);
  if ((a3 || (WTF::URL::protocolIs() & 1) != 0 || (WTF::URL::hasSpecialScheme((WTF::URL *)&v7) & 1) == 0)
    && (v8 & 4) == 0)
  {
    WTF::URL::setHostAndPort();
    if ((v8 & 1) != 0)
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)a1 + 24))(a1, &v7);
  }
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::URLDecomposition::hostname(WebCore::URLDecomposition *this)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4[5];

  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)this + 16))(v4);
  WTF::URL::host((WTF::URL *)v4);
  if ((v1 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  result = v4[0];
  v4[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::URLDecomposition::setHostname(uint64_t a1, uint64_t a2, int a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *result;
  WTF::StringImpl *v7;
  char v8;

  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)a1 + 16))(&v7);
  if ((a3 || (WTF::URL::protocolIs() & 1) != 0 || (WTF::URL::hasSpecialScheme((WTF::URL *)&v7) & 1) == 0)
    && (v8 & 4) == 0)
  {
    WTF::URL::setHost();
    if ((v8 & 1) != 0)
      (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)a1 + 24))(a1, &v7);
  }
  result = v7;
  v7 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v5);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::URLDecomposition::port@<X0>(WebCore::URLDecomposition *this@<X0>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *v3;
  int v4;
  WTF::StringImpl *result;
  _DWORD *v6;
  WTF::StringImpl *v7[5];

  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)this + 16))(v7);
  v4 = WTF::URL::port((WTF::URL *)v7);
  result = v7[0];
  v7[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  if ((v4 & 0xFF0000) != 0)
    return (WTF::StringImpl *)WTF::String::number((WTF::String *)(unsigned __int16)v4);
  v6 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v6 += 2;
  *a2 = v6;
  return result;
}

WTF::StringImpl *WebCore::URLDecomposition::setPort(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  WTF::StringImpl *v6;
  uint64_t v7;
  unsigned int v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  WTF::StringImpl *result;
  WTF::StringImpl *v20[5];

  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)a1 + 16))(v20);
  WTF::URL::host((WTF::URL *)v20);
  if (!(_DWORD)v6 || (WTF::URL::protocolIs() & 1) != 0)
    goto LABEL_31;
  WTF::URL::protocol((WTF::URL *)v20);
  v7 = a3;
  if (!(_DWORD)a3)
    goto LABEL_30;
  if ((a3 & 0xFF00000000) == 0)
  {
    v8 = 0;
    v9 = 0;
    while (1)
    {
      v11 = *a2++;
      v10 = v11;
      v12 = (1 << v11) & 0x2600;
      if (v11 > 0xD || v12 == 0)
      {
        if (v10 - 48 > 9)
          goto LABEL_28;
        v8 = v10 + 10 * v8 - 48;
        if (HIWORD(v8))
          goto LABEL_31;
        v9 = 1;
      }
      if (!--v7)
        goto LABEL_26;
    }
  }
  v14 = 0;
  v9 = 0;
  while (1)
  {
    v16 = *(unsigned __int8 *)a2;
    a2 = (unsigned __int16 *)((char *)a2 + 1);
    v15 = v16;
    v17 = (1 << v16) & 0x2600;
    if (v16 > 0xD || v17 == 0)
      break;
LABEL_25:
    if (!--v7)
    {
LABEL_26:
      if ((v9 & 1) == 0)
        goto LABEL_30;
      goto LABEL_29;
    }
  }
  if (v15 - 48 <= 9)
  {
    v14 = v15 + 10 * v14 - 48;
    if (HIWORD(v14))
      goto LABEL_31;
    v9 = 1;
    goto LABEL_25;
  }
LABEL_28:
  if ((v9 & 1) == 0)
    goto LABEL_31;
LABEL_29:
  WTF::isDefaultPortForProtocol();
LABEL_30:
  WTF::URL::setPort();
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)a1 + 24))(a1, v20);
LABEL_31:
  result = v20[0];
  v20[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::URLDecomposition::pathname(WebCore::URLDecomposition *this)
{
  uint64_t v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4[5];

  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)this + 16))(v4);
  WTF::URL::path((WTF::URL *)v4);
  if ((v1 & 0xFF00000000) != 0)
    WTF::String::String();
  else
    WTF::String::String();
  result = v4[0];
  v4[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::URLDecomposition::search@<X0>(WebCore::URLDecomposition *this@<X0>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *result;
  _DWORD *v6;
  WTF::StringImpl *v7[5];

  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)this + 16))(v7);
  WTF::URL::query((WTF::URL *)v7);
  if ((_DWORD)v3)
  {
    WTF::URL::queryWithLeadingQuestionMark((WTF::URL *)v7);
    if ((v4 & 0xFF00000000) != 0)
      WTF::String::String();
    else
      WTF::String::String();
  }
  else
  {
    v6 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v6 += 2;
    *a2 = v6;
  }
  result = v7[0];
  v7[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::URLDecomposition::setSearch(WebCore::URLDecomposition *this, const WTF::String *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *result;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8[5];
  WTF::StringImpl *v9;

  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)this + 16))(v8);
  if (*(_QWORD *)a2 && *(_DWORD *)(*(_QWORD *)a2 + 4) && (WTF::StringImpl::replace(), (v6 = v9) != 0))
  {
    WTF::URL::setQuery();
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v7);
    else
      *(_DWORD *)v6 -= 2;
  }
  else
  {
    WTF::URL::setQuery();
  }
  (*(void (**)(WebCore::URLDecomposition *, WTF::StringImpl **))(*(_QWORD *)this + 24))(this, v8);
  result = v8[0];
  v8[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::URLDecomposition::hash@<X0>(WebCore::URLDecomposition *this@<X0>, _QWORD *a2@<X8>)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *result;
  _DWORD *v6;
  WTF::StringImpl *v7[5];

  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)this + 16))(v7);
  WTF::URL::fragmentIdentifier((WTF::URL *)v7);
  if ((_DWORD)v3)
  {
    WTF::URL::fragmentIdentifierWithLeadingNumberSign((WTF::URL *)v7);
    if ((v4 & 0xFF00000000) != 0)
      WTF::String::String();
    else
      WTF::String::String();
  }
  else
  {
    v6 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v6 += 2;
    *a2 = v6;
  }
  result = v7[0];
  v7[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl *WebCore::URLDecomposition::setHash(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  int v3;
  WTF::StringImpl *result;
  unint64_t v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8[6];
  uint64_t v9;

  v3 = a3;
  v8[5] = a2;
  v9 = a3;
  (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)a1 + 16))(v8);
  if (!v3)
  {
    WTF::URL::removeFragmentIdentifier((WTF::URL *)v8);
    goto LABEL_11;
  }
  result = (WTF::StringImpl *)WTF::StringView::startsWith();
  if ((_DWORD)result && v9 >= 2)
  {
    v6 = v9 - 1;
    if (BYTE4(v9))
    {
      if (v6 >= v6)
        goto LABEL_10;
LABEL_17:
      __break(1u);
      return result;
    }
    if (v6 < v6)
      goto LABEL_17;
  }
LABEL_10:
  WTF::URL::setFragmentIdentifier();
LABEL_11:
  (*(void (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)a1 + 24))(a1, v8);
  result = v8[0];
  v8[0] = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t *WebCore::URLInputType::formControlType(WebCore::URLInputType *this)
{
  return &WebCore::urlAtomData;
}

BOOL WebCore::URLInputType::typeMismatchFor(WebCore::URLInputType *this, WTF::StringImpl **a2)
{
  WTF::StringImpl *v2;
  _BOOL8 v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *v10;

  v2 = *a2;
  if (!*a2 || !*((_DWORD *)v2 + 1))
    return 0;
  *(_DWORD *)v2 += 2;
  v10 = v2;
  MEMORY[0x19AEA52D4](&v8, &v10, 0);
  v6 = v10;
  v10 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  v3 = (v9 & 1) == 0;
  v7 = v8;
  v8 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v3;
}

BOOL WebCore::URLInputType::typeMismatch(WebCore::URLInputType *this, WTF::StringImpl *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _DWORD *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _BOOL8 v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int v18;
  WTF::StringImpl *v19;

  v2 = *((_QWORD *)this + 3);
  if (v2)
    v3 = *(_QWORD **)(v2 + 8);
  else
    v3 = 0;
  v4 = (_DWORD *)v3[30];
  if (v4[3] != 64)
  {
    v5 = (WTF::StringImpl *)v3[27];
    if (v5)
    {
      *(_DWORD *)v5 += 2;
      v16 = v5;
      goto LABEL_24;
    }
    v6 = v3[13];
    if (v6)
    {
      v7 = *(_DWORD *)(v6 + 4);
      if ((v7 & 1) != 0)
      {
        v8 = *(_QWORD *)(v6 + 40);
        LODWORD(v9) = *(_DWORD *)(v6 + 52);
        if ((_DWORD)v9)
        {
LABEL_8:
          v9 = v9;
          v10 = (_QWORD *)(v8 + 8);
          while (1)
          {
            v11 = *(v10 - 1);
            if (v11 == WebCore::HTMLNames::valueAttr
              || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 24)
              && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::valueAttr + 32))
            {
              goto LABEL_17;
            }
            v10 += 2;
            if (!--v9)
            {
              v10 = (_QWORD *)MEMORY[0x1E0CBF2F8];
              goto LABEL_17;
            }
          }
        }
      }
      else
      {
        v8 = v6 + 32;
        LODWORD(v9) = v7 >> 5;
        if ((_DWORD)v9)
          goto LABEL_8;
      }
    }
    v10 = (_QWORD *)MEMORY[0x1E0CBF2F8];
LABEL_17:
    if (*v10)
    {
      (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v4 + 296))(&v16);
      v5 = v16;
      if (v16)
        goto LABEL_24;
      v16 = 0;
      v4 = (_DWORD *)v3[30];
    }
    (*(void (**)(WTF::StringImpl **__return_ptr))(*(_QWORD *)v4 + 64))(&v16);
    goto LABEL_19;
  }
  WebCore::FileInputType::firstElementPathForInputValue((uint64_t)v4, &v16);
LABEL_19:
  v5 = v16;
  if (!v16)
    return 0;
LABEL_24:
  if (!*((_DWORD *)v5 + 1))
  {
    v12 = 0;
    v16 = 0;
LABEL_34:
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, a2);
    else
      *(_DWORD *)v5 -= 2;
    return v12;
  }
  *(_DWORD *)v5 += 2;
  v19 = v5;
  MEMORY[0x19AEA52D4](&v17, &v19, 0);
  v13 = v19;
  v19 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, a2);
    else
      *(_DWORD *)v13 -= 2;
  }
  v12 = (v18 & 1) == 0;
  v14 = v17;
  v17 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, a2);
    else
      *(_DWORD *)v14 -= 2;
  }
  v5 = v16;
  v16 = 0;
  if (v5)
    goto LABEL_34;
  return v12;
}

WTF::StringImpl *WebCore::URLInputType::sanitizeValue(WebCore::URLInputType *this, const WTF::String *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *result;
  WTF::StringImpl *v4;

  WebCore::TextFieldInputType::sanitizeValue(a2, &v4);
  WTF::String::trim();
  result = v4;
  v4 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::URLRegistry::forEach(_QWORD *a1)
{
  unsigned int v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  void *v8;
  int v9;
  WTF *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  void *__dst;
  uint64_t v15;

  __dst = 0;
  v15 = 0;
  if (__ldaxr(WebCore::allRegistriesLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::allRegistriesLock))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](WebCore::allRegistriesLock);
LABEL_5:
  {
    v3 = dword_1EE2F5A64;
  }
  else
  {
    v3 = 0;
    WebCore::allRegistries(void)::list = 0;
    *(_QWORD *)&dword_1EE2F5A60 = 0;
  }
  if (HIDWORD(v15) <= v3)
  {
    if (v3 > v15)
      WTF::Vector<std::pair<int,int>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(&__dst, v3);
    v3 = HIDWORD(v15);
  }
  v4 = WebCore::allRegistries(void)::list;
  v5 = (char *)__dst;
  if (v3)
  {
    v6 = v3;
    memmove(__dst, (const void *)WebCore::allRegistries(void)::list, 8 * v3);
    v4 = WebCore::allRegistries(void)::list;
  }
  else
  {
    v6 = 0;
  }
  result = (uint64_t)memcpy(&v5[8 * v6], (const void *)(v4 + 8 * v6), 8 * dword_1EE2F5A64 - 8 * v6);
  HIDWORD(v15) = dword_1EE2F5A64;
  v9 = __ldxr(WebCore::allRegistriesLock);
  if (v9 != 1)
  {
    __clrex();
    goto LABEL_19;
  }
  if (__stlxr(0, WebCore::allRegistriesLock))
LABEL_19:
    result = WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allRegistriesLock);
  v10 = (WTF *)__dst;
  if (HIDWORD(v15))
  {
    v11 = 8 * HIDWORD(v15);
    v12 = (uint64_t *)__dst;
    do
    {
      v13 = *v12++;
      result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 16))(*a1, v13);
      v11 -= 8;
    }
    while (v11);
  }
  if (v10)
    return WTF::fastFree(v10, v8);
  return result;
}

WebCore::URLRegistry *WebCore::URLRegistry::URLRegistry(WebCore::URLRegistry *this)
{
  int v3;
  int v4;
  WebCore::URLRegistry *v6;

  *(_QWORD *)this = off_1E33DB150;
  if (__ldaxr(WebCore::allRegistriesLock))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEA534C](WebCore::allRegistriesLock);
    goto LABEL_4;
  }
  if (__stxr(1u, WebCore::allRegistriesLock))
    goto LABEL_3;
LABEL_4:
  {
    WebCore::allRegistries(void)::list = 0;
    *(_QWORD *)&dword_1EE2F5A60 = 0;
    v6 = this;
    goto LABEL_6;
  }
  v3 = dword_1EE2F5A64;
  v6 = this;
  if (dword_1EE2F5A64 == dword_1EE2F5A60)
  {
LABEL_6:
    WTF::Vector<WebCore::URLRegistry *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::URLRegistry *>((uint64_t)&WebCore::allRegistries(void)::list, (unint64_t)&v6);
    goto LABEL_7;
  }
  *(_QWORD *)(WebCore::allRegistries(void)::list + 8 * dword_1EE2F5A64) = this;
  dword_1EE2F5A64 = v3 + 1;
LABEL_7:
  v4 = __ldxr(WebCore::allRegistriesLock);
  if (v4 == 1)
  {
    if (!__stlxr(0, WebCore::allRegistriesLock))
      return this;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::allRegistriesLock);
  return this;
}

void WebCore::URLRegistry::~URLRegistry(WebCore::URLRegistry *this)
{
  *(_QWORD *)this = off_1E33DB150;
  __break(0xC471u);
}

WebCore::URLSearchParams *WebCore::URLSearchParams::URLSearchParams(WebCore::URLSearchParams *this, const WTF::String *a2, WebCore::DOMURL *a3)
{
  WebCore::DOMURL *v3;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;

  *(_DWORD *)this = 1;
  if (a3)
  {
    v3 = a3;
    v6 = *((_QWORD *)a3 + 2);
    if (v6)
      goto LABEL_12;
    v6 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v6 = 1;
    *(_QWORD *)(v6 + 8) = v3;
    v11 = (unsigned int *)*((_QWORD *)v3 + 2);
    *((_QWORD *)v3 + 2) = v6;
    if (!v11)
      goto LABEL_12;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (v13)
      goto LABEL_11;
    goto LABEL_23;
  }
  v6 = 0;
  while (1)
  {
    *((_QWORD *)this + 1) = v6;
    if (!*(_QWORD *)a2)
      break;
    v7 = WTF::StringImpl::startsWith();
    v8 = *(_QWORD *)a2;
    if (!v7)
      break;
    if (!v8)
      break;
    v15 = *(unsigned int *)(v8 + 4);
    if (v15 < 2)
      break;
    v10 = (v15 - 1);
    v16 = v15 - 1;
    v11 = (unsigned int *)*(unsigned __int8 *)(v8 + 16);
    if ((v11 & 4) != 0)
    {
      if (v16 >= v10)
        break;
    }
    else if (v16 >= v10)
    {
      break;
    }
    __break(1u);
LABEL_23:
    atomic_store(1u, v11);
    WTF::fastFree((WTF *)v11, (void *)v10);
LABEL_11:
    v6 = *((_QWORD *)v3 + 2);
    if (v6)
    {
      do
LABEL_12:
        v14 = __ldaxr((unsigned int *)v6);
      while (__stlxr(v14 + 1, (unsigned int *)v6));
    }
  }
  WTF::URLParser::parseURLEncodedForm();
  return this;
}

void WebCore::URLSearchParams::~URLSearchParams(WebCore::URLSearchParams *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WTF::StringImpl **v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v8 = 16 * v3;
    v9 = (WTF::StringImpl **)(*((_QWORD *)this + 2) + 8);
    do
    {
      v10 = *v9;
      *v9 = 0;
      if (v10)
      {
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, a2);
        else
          *(_DWORD *)v10 -= 2;
      }
      v11 = *(v9 - 1);
      *(v9 - 1) = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      v9 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  v4 = (WTF *)*((_QWORD *)this + 2);
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
  {
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
    }
  }
}

uint64_t WebCore::URLSearchParams::has(WebCore::URLSearchParams *this, const WTF::StringImpl **a2, const WTF::StringImpl **a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v7;
  WTF **i;
  char v9;

  v3 = *((unsigned int *)this + 7);
  if (!(_DWORD)v3)
    return 0;
  v7 = 16 * v3;
  for (i = (WTF **)(*((_QWORD *)this + 2) + 8); ; i += 2)
  {
    if (WTF::equal(*(i - 1), *a2, (const WTF::StringImpl *)a3))
    {
      if (!*a3)
        break;
      v9 = WTF::equal(*i, *a3, (const WTF::StringImpl *)a3);
      if ((v9 & 1) != 0)
        break;
    }
    result = 0;
    v7 -= 16;
    if (!v7)
      return result;
  }
  return 1;
}

WTF::StringImpl *WebCore::URLSearchParams::sort(WebCore::URLSearchParams *this)
{
  uint64_t v2;
  unint64_t v3;
  const std::nothrow_t *v4;
  unint64_t v5;
  const WTF::StringImpl **v6;
  BOOL v7;
  const WTF::StringImpl **v8;

  v2 = *((_QWORD *)this + 2);
  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v4 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v5 = *((unsigned int *)this + 7);
    while (1)
    {
      v6 = (const WTF::StringImpl **)operator new(16 * v5, v4);
      if (v6)
        break;
      v7 = v5 > 1;
      v5 >>= 1;
      if (!v7)
        goto LABEL_5;
    }
    v8 = v6;
    std::__stable_sort<std::_ClassicAlgPolicy,WebCore::URLSearchParams::sort(void)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *>(v2, (const WTF::StringImpl *)(v2 + 16 * v3), v3, v6, v5);
    operator delete(v8);
  }
  else
  {
LABEL_5:
    std::__stable_sort<std::_ClassicAlgPolicy,WebCore::URLSearchParams::sort(void)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *>(v2, (const WTF::StringImpl *)(v2 + 16 * v3), v3, 0, 0);
  }
  return WebCore::URLSearchParams::updateURL(this);
}

WTF::StringImpl *WebCore::URLSearchParams::updateURL(WTF::StringImpl *this)
{
  uint64_t v1;
  WebCore::URLDecomposition *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  v1 = *((_QWORD *)this + 1);
  if (v1)
  {
    v2 = *(WebCore::URLDecomposition **)(v1 + 8);
    if (v2)
    {
      WTF::URLParser::serialize();
      WebCore::URLDecomposition::setSearch(v2, (const WTF::String *)&v4);
      this = v4;
      v4 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v3);
        else
          *(_DWORD *)this -= 2;
      }
    }
  }
  return this;
}

WTF::StringImpl *WebCore::URLSearchParams::set(WebCore::URLSearchParams *this, const WTF::StringImpl **a2, const WTF::String *a3)
{
  char *v6;
  uint64_t v7;
  WTF **v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v23;
  const WTF::StringImpl *v24;
  WTF *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl **v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  int v30;
  int v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl **v34;
  WTF::StringImpl *v35;
  WTF::StringImpl **v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;

  v6 = (char *)this + 16;
  v7 = *((unsigned int *)this + 7);
  if ((_DWORD)v7)
  {
    v8 = (WTF **)(*((_QWORD *)this + 2) + 8);
    v9 = 16 * v7;
    while (!WTF::equal(*(v8 - 1), *a2, a3))
    {
      v8 += 2;
      v9 -= 16;
      if (!v9)
        goto LABEL_5;
    }
    if ((WTF::equal(*v8, *(const WTF::StringImpl **)a3, a3) & 1) == 0)
    {
      v25 = *(WTF **)a3;
      if (*(_QWORD *)a3)
        *(_DWORD *)v25 += 2;
      v26 = *v8;
      *v8 = v25;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v23);
        else
          *(_DWORD *)v26 -= 2;
      }
    }
    v27 = (WTF::StringImpl **)*((_QWORD *)this + 2);
    v28 = *((unsigned int *)this + 7);
    v29 = &v27[2 * v28];
    if ((_DWORD)v28)
    {
      v30 = 0;
      v31 = 0;
      v32 = *((_QWORD *)this + 2);
      v33 = (WTF::StringImpl *)&v27[2 * v28];
      v34 = (WTF::StringImpl **)v33;
      do
      {
        if (WTF::equal(*v27, *a2, v24))
        {
          if (v30)
          {
            v36 = v27;
            if (v34 != (WTF::StringImpl **)(*((_QWORD *)this + 2) + 16 * *((unsigned int *)this + 7)))
            {
              if (v27 == (WTF::StringImpl **)v33)
              {
                v36 = v34;
              }
              else
              {
                WTF::VectorMover<false,WTF::KeyValuePair<WTF::String,WTF::String>>::moveOverlapping(v33, (WTF::StringImpl *)v27, v34);
                v36 = (WTF::StringImpl **)((char *)v34 + v32 - (_QWORD)v33);
              }
            }
            v37 = v27[1];
            v27[1] = 0;
            if (v37)
            {
              if (*(_DWORD *)v37 == 2)
                WTF::StringImpl::destroy(v37, v35);
              else
                *(_DWORD *)v37 -= 2;
            }
            v38 = *v27;
            *v27 = 0;
            if (v38)
            {
              if (*(_DWORD *)v38 == 2)
                WTF::StringImpl::destroy(v38, v35);
              else
                *(_DWORD *)v38 -= 2;
            }
            v33 = (WTF::StringImpl *)(v27 + 2);
            ++v31;
            v30 = 1;
            v34 = v36;
          }
          else
          {
            v30 = 1;
          }
        }
        v27 += 2;
        v32 += 16;
      }
      while (v27 < v29);
      v27 = (WTF::StringImpl **)*((_QWORD *)this + 2);
      LODWORD(v28) = *((_DWORD *)this + 7);
      v29 = v34;
    }
    else
    {
      v31 = 0;
      v33 = (WTF::StringImpl *)&v27[2 * v28];
    }
    v39 = (WTF::StringImpl *)&v27[2 * v28];
    if (v33 != v39)
    {
      WTF::VectorMover<false,WTF::KeyValuePair<WTF::String,WTF::String>>::moveOverlapping(v33, v39, v29);
      LODWORD(v28) = *((_DWORD *)this + 7);
    }
    *((_DWORD *)this + 7) = v28 - v31;
    return WebCore::URLSearchParams::updateURL(this);
  }
  else
  {
LABEL_5:
    v10 = *a2;
    if (*a2)
      *(_DWORD *)v10 += 2;
    v40 = v10;
    v11 = *(WTF::StringImpl **)a3;
    if (*(_QWORD *)a3)
      *(_DWORD *)v11 += 2;
    v41 = v11;
    v12 = *((unsigned int *)this + 7);
    if ((_DWORD)v12 == *((_DWORD *)this + 6))
    {
      v13 = (uint64_t *)WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v6, v12 + 1, (unint64_t)&v40);
      v14 = *((unsigned int *)this + 7);
      v15 = (_QWORD *)(*((_QWORD *)this + 2) + 16 * v14);
      v16 = *v13;
      *v13 = 0;
      *v15 = v16;
      v17 = v13[1];
      v13[1] = 0;
      v15[1] = v17;
      v18 = v41;
      *((_DWORD *)this + 7) = v14 + 1;
      v41 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v18 -= 2;
      }
    }
    else
    {
      v19 = *((_QWORD *)this + 2);
      v40 = 0;
      v20 = (WTF::StringImpl **)(v19 + 16 * v12);
      *v20 = v10;
      v20[1] = v11;
      *((_DWORD *)this + 7) = v12 + 1;
      v41 = 0;
    }
    v21 = v40;
    v40 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v21 -= 2;
    }
    return WebCore::URLSearchParams::updateURL(this);
  }
}

WTF::StringImpl *WebCore::URLSearchParams::append(WebCore::URLSearchParams *this, WTF::StringImpl **a2, WTF::StringImpl **a3)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;

  v4 = *a2;
  if (*a2)
    *(_DWORD *)v4 += 2;
  v17 = v4;
  v5 = *a3;
  if (*a3)
    *(_DWORD *)v5 += 2;
  v18 = v5;
  v6 = *((unsigned int *)this + 7);
  if ((_DWORD)v6 == *((_DWORD *)this + 6))
  {
    v7 = (uint64_t *)WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)this + 16, v6 + 1, (unint64_t)&v17);
    v8 = *((unsigned int *)this + 7);
    v9 = (_QWORD *)(*((_QWORD *)this + 2) + 16 * v8);
    v10 = *v7;
    *v7 = 0;
    *v9 = v10;
    v11 = v7[1];
    v7[1] = 0;
    v9[1] = v11;
    v12 = v18;
    *((_DWORD *)this + 7) = v8 + 1;
    v18 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 2)
        WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
      else
        *(_DWORD *)v12 -= 2;
    }
  }
  else
  {
    v13 = *((_QWORD *)this + 2);
    v17 = 0;
    v14 = (WTF::StringImpl **)(v13 + 16 * v6);
    *v14 = v4;
    v14[1] = v5;
    *((_DWORD *)this + 7) = v6 + 1;
    v18 = 0;
  }
  v15 = v17;
  v17 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v15 -= 2;
  }
  return WebCore::URLSearchParams::updateURL(this);
}

unsigned int *WebCore::URLSearchParams::getAll@<X0>(unsigned int *this@<X0>, const WTF::StringImpl **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF::StringImpl **v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v4 = this[7];
  if (!(_DWORD)v4)
    goto LABEL_17;
  if (!(v4 >> 29))
  {
    v6 = (uint64_t)this;
    v7 = WTF::fastMalloc((WTF *)(8 * v4));
    *(_DWORD *)(a3 + 8) = v4;
    *(_QWORD *)a3 = v7;
    v9 = *(unsigned int *)(v6 + 28);
    if ((_DWORD)v9)
    {
      v10 = *(_QWORD *)(v6 + 16);
      v11 = 16 * v9;
      v12 = (WTF::StringImpl **)(v10 + 8);
      do
      {
        if (WTF::equal(*(v12 - 1), *a2, v8))
        {
          v14 = *v12;
          if (*v12)
            *(_DWORD *)v14 += 2;
          v22 = v14;
          v15 = *(unsigned int *)(a3 + 12);
          if ((_DWORD)v15 == *(_DWORD *)(a3 + 8))
          {
            v18 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a3, v15 + 1, (unint64_t)&v22);
            v15 = *(unsigned int *)(a3 + 12);
            v19 = *(_QWORD *)a3;
            v20 = *v18;
            *v18 = 0;
            *(_QWORD *)(v19 + 8 * v15) = v20;
          }
          else
          {
            v16 = *(_QWORD *)a3;
            v22 = 0;
            *(_QWORD *)(v16 + 8 * v15) = v14;
          }
          *(_DWORD *)(a3 + 12) = v15 + 1;
          v17 = v22;
          v22 = 0;
          if (v17)
          {
            if (*(_DWORD *)v17 == 2)
              WTF::StringImpl::destroy(v17, v13);
            else
              *(_DWORD *)v17 -= 2;
          }
        }
        v12 += 2;
        v11 -= 16;
      }
      while (v11);
      v21 = (WTF::StringImpl *)*(unsigned int *)(a3 + 12);
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)a3, v21);
    }
LABEL_17:
    v21 = 0;
    return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrinkCapacity((unsigned int *)a3, v21);
  }
  __break(0xC471u);
  return this;
}

WTF::StringImpl *WebCore::URLSearchParams::remove(WebCore::URLSearchParams *this, const WTF::StringImpl **a2, const WTF::StringImpl **a3)
{
  const WTF::StringImpl **v5[2];

  v5[0] = a2;
  v5[1] = a3;
  WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<WebCore::URLSearchParams::remove(WTF::String const&,WTF::String const&)::$_0>((unsigned int *)this + 4, v5, (const WTF::StringImpl *)a3);
  return WebCore::URLSearchParams::updateURL(this);
}

unsigned int *WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::removeAllMatching<WebCore::URLSearchParams::remove(WTF::String const&,WTF::String const&)::$_0>(unsigned int *result, const WTF::StringImpl ***a2, const WTF::StringImpl *a3)
{
  unsigned int *v3;
  WTF **v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  int v8;
  WTF **v9;
  WTF::StringImpl *v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  WTF::StringImpl **v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;

  v3 = result;
  v4 = *(WTF ***)result;
  v5 = result[3];
  v6 = (WTF::StringImpl **)(*(_QWORD *)result + 16 * v5);
  if ((_DWORD)v5)
  {
    v8 = 0;
    v9 = *(WTF ***)result;
    v10 = (WTF::StringImpl *)(*(_QWORD *)result + 16 * v5);
    v11 = (WTF::StringImpl **)v10;
    do
    {
      result = (unsigned int *)WTF::equal(*v4, **a2, a3);
      if ((_DWORD)result)
      {
        v12 = *a2[1];
        if (!v12 || (result = (unsigned int *)WTF::equal(v4[1], v12, a3), (_DWORD)result))
        {
          v13 = v4;
          if (v11 != (WTF::StringImpl **)(*(_QWORD *)v3 + 16 * v3[3]))
          {
            if (v4 == (WTF **)v10)
            {
              v13 = v11;
            }
            else
            {
              WTF::VectorMover<false,WTF::KeyValuePair<WTF::String,WTF::String>>::moveOverlapping(v10, (WTF::StringImpl *)v4, v11);
              v13 = (WTF::StringImpl **)((char *)v11 + (char *)v9 - (char *)v10);
            }
          }
          v14 = v4[1];
          v4[1] = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v12);
            else
              *(_DWORD *)v14 -= 2;
          }
          result = (unsigned int *)*v4;
          *v4 = 0;
          if (result)
          {
            if (*result == 2)
              result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v12);
            else
              *result -= 2;
          }
          v10 = (WTF::StringImpl *)(v4 + 2);
          ++v8;
          v11 = v13;
        }
      }
      v4 += 2;
      v9 += 2;
    }
    while (v4 < v6);
    v4 = *(WTF ***)v3;
    LODWORD(v5) = v3[3];
    v6 = v11;
  }
  else
  {
    v8 = 0;
    v10 = (WTF::StringImpl *)(*(_QWORD *)result + 16 * v5);
  }
  v15 = (WTF::StringImpl *)&v4[2 * v5];
  if (v10 != v15)
  {
    result = (unsigned int *)WTF::VectorMover<false,WTF::KeyValuePair<WTF::String,WTF::String>>::moveOverlapping(v10, v15, v6);
    LODWORD(v5) = v3[3];
  }
  v3[3] = v5 - v8;
  return result;
}

uint64_t WebCore::URLSearchParams::toString(WebCore::URLSearchParams *this)
{
  return WTF::URLParser::serialize();
}

WTF::StringImpl *WebCore::URLSearchParams::updateFromAssociatedURL(WebCore::URLSearchParams *this)
{
  uint64_t v2;
  WebCore::URLDecomposition *v3;
  WTF::StringImpl *result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl **v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF *v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;

  v2 = *((_QWORD *)this + 1);
  if (v2)
    v3 = *(WebCore::URLDecomposition **)(v2 + 8);
  else
    v3 = 0;
  WebCore::URLDecomposition::search(v3, &v17);
  if (!v17)
    goto LABEL_13;
  result = (WTF::StringImpl *)WTF::StringImpl::startsWith();
  if (!(_DWORD)result)
    goto LABEL_13;
  if (!v17)
    goto LABEL_13;
  v5 = *((unsigned int *)v17 + 1);
  if (v5 < 2)
    goto LABEL_13;
  v6 = (v5 - 1);
  v7 = v5 - 1;
  if ((*((_BYTE *)v17 + 16) & 4) != 0)
  {
    if (v7 >= v6)
      goto LABEL_13;
LABEL_34:
    __break(1u);
    return result;
  }
  if (v7 < v6)
    goto LABEL_34;
LABEL_13:
  WTF::URLParser::parseURLEncodedForm();
  v9 = *((unsigned int *)this + 7);
  if ((_DWORD)v9)
  {
    v10 = 16 * v9;
    v11 = (WTF::StringImpl **)(*((_QWORD *)this + 2) + 8);
    do
    {
      v12 = *v11;
      *v11 = 0;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v8);
        else
          *(_DWORD *)v12 -= 2;
      }
      v13 = *(v11 - 1);
      *(v11 - 1) = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v8);
        else
          *(_DWORD *)v13 -= 2;
      }
      v11 += 2;
      v10 -= 16;
    }
    while (v10);
  }
  v14 = (WTF *)*((_QWORD *)this + 2);
  if (v14)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v14, v8);
  }
  *((_QWORD *)this + 2) = v15;
  *((_QWORD *)this + 3) = v16;
  result = v17;
  v17 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v8);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WTF::StringImpl **WebCore::URLSearchParams::Iterator::next@<X0>(WTF::StringImpl **this@<X0>, WTF::StringImpl *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v3;
  unint64_t v4;
  _QWORD *v5;
  _DWORD *v6;
  _DWORD **v7;
  _DWORD *v8;
  _DWORD *v9;
  WTF::StringImpl *v10[2];

  v3 = *this;
  v4 = (unint64_t)this[1];
  if (v4 < *((unsigned int *)*this + 7))
  {
    this[1] = (WTF::StringImpl *)(v4 + 1);
    v5 = (_QWORD *)(*((_QWORD *)v3 + 2) + 16 * v4);
    v8 = (_DWORD *)*v5;
    v7 = (_DWORD **)(v5 + 1);
    v6 = v8;
    if (v8)
      *v6 += 2;
    v9 = *v7;
    if (v9)
      *v9 += 2;
    v10[0] = 0;
    v10[1] = 0;
    *(_QWORD *)a3 = v6;
    *(_QWORD *)(a3 + 8) = v9;
    *(_BYTE *)(a3 + 16) = 1;
    return WTF::KeyValuePair<WTF::String,WTF::String>::~KeyValuePair(v10, a2);
  }
  else
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  return this;
}

void `non-virtual thunk to'WebCore::TextInputType::~TextInputType(WebCore::TextInputType *this, void *a2)
{
  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::TextInputType *)((char *)this - 32), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::TextInputType *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

{
  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::TextInputType *)((char *)this - 48), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::TextInputType *)((char *)this - 48), a2);
  WTF::fastFree(v2, v3);
}

{
  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::TextInputType *)((char *)this - 56), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::TextInputType *)((char *)this - 56), a2);
  WTF::fastFree(v2, v3);
}

{
  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::TextInputType *)((char *)this - 64), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::TextInputType *)((char *)this - 64), a2);
  WTF::fastFree(v2, v3);
}

void WebCore::TimeInputType::~TimeInputType(WebCore::TimeInputType *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::BaseDateAndTimeInputType::~BaseDateAndTimeInputType(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::TimeInputType::~TimeInputType(WebCore::TimeInputType *this, void *a2)
{
  WebCore::BaseDateAndTimeInputType::~BaseDateAndTimeInputType((WebCore::TimeInputType *)((char *)this - 32), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::BaseDateAndTimeInputType::~BaseDateAndTimeInputType((WebCore::TimeInputType *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

{
  WebCore::BaseDateAndTimeInputType::~BaseDateAndTimeInputType((WebCore::TimeInputType *)((char *)this - 40), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::BaseDateAndTimeInputType::~BaseDateAndTimeInputType((WebCore::TimeInputType *)((char *)this - 40), a2);
  WTF::fastFree(v2, v3);
}

void WebCore::URLInputType::~URLInputType(WebCore::URLInputType *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::TextFieldInputType::~TextFieldInputType(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::URLInputType::~URLInputType(WebCore::URLInputType *this, void *a2)
{
  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::URLInputType *)((char *)this - 32), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::URLInputType *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

{
  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::URLInputType *)((char *)this - 48), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::URLInputType *)((char *)this - 48), a2);
  WTF::fastFree(v2, v3);
}

{
  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::URLInputType *)((char *)this - 56), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::URLInputType *)((char *)this - 56), a2);
  WTF::fastFree(v2, v3);
}

{
  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::URLInputType *)((char *)this - 64), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::TextFieldInputType::~TextFieldInputType((WebCore::URLInputType *)((char *)this - 64), a2);
  WTF::fastFree(v2, v3);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::URLSearchParams::create(std::variant<WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)::$_0,WebCore::URLSearchParams::create(std::variant<WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &)::$_1,WebCore::URLSearchParams::create(std::variant<WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &)::$_2> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &>@<X0>(unsigned int *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl **v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  WTF::StringImpl **v13;
  WTF::StringImpl **v14;
  WTF::StringImpl **v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int v23;
  WTF *v24;
  WTF *v25;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v28;
  WTF::StringImpl **v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF *v34;
  uint64_t v35;

  v3 = *(_QWORD *)a1;
  v4 = a1[3];
  v34 = 0;
  v35 = 0;
  if ((_DWORD)v4)
  {
    v5 = 16 * v4;
    while (*(_DWORD *)(v3 + 12) == 2)
    {
      v6 = *(WTF::StringImpl ***)v3;
      v7 = **(WTF::StringImpl ***)v3;
      if (v7)
        *(_DWORD *)v7 += 2;
      v32 = v7;
      v8 = v6[1];
      if (v8)
        *(_DWORD *)v8 += 2;
      v33 = v8;
      v9 = HIDWORD(v35);
      if (HIDWORD(v35) == (_DWORD)v35)
      {
        v10 = (_QWORD *)WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v34, HIDWORD(v35) + 1, (unint64_t)&v32);
        v9 = HIDWORD(v35);
        v11 = (_QWORD *)((char *)v34 + 16 * HIDWORD(v35));
        v12 = *v10;
        *v10 = 0;
        v13 = (WTF::StringImpl **)(v10 + 1);
        *v11 = v12;
        v14 = (WTF::StringImpl **)(v11 + 1);
      }
      else
      {
        v15 = (WTF::StringImpl **)((char *)v34 + 16 * HIDWORD(v35));
        v32 = 0;
        *v15 = v7;
        v14 = v15 + 1;
        v13 = &v33;
      }
      v16 = *v13;
      *v13 = 0;
      *v14 = v16;
      HIDWORD(v35) = v9 + 1;
      v17 = v33;
      v33 = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a1);
        else
          *(_DWORD *)v17 -= 2;
      }
      v18 = v32;
      v32 = 0;
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, (WTF::StringImpl *)a1);
        else
          *(_DWORD *)v18 -= 2;
      }
      v3 += 16;
      v5 -= 16;
      if (!v5)
        goto LABEL_21;
    }
    *(_BYTE *)a2 = 33;
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 1;
    v23 = HIDWORD(v35);
  }
  else
  {
LABEL_21:
    result = WTF::fastMalloc((WTF *)0x20);
    v20 = result;
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    v21 = HIDWORD(v35);
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 28) = v21;
    if ((_DWORD)v21)
    {
      if (v21 >> 28)
      {
        __break(0xC471u);
        return result;
      }
      v22 = (_QWORD *)WTF::fastMalloc((WTF *)(16 * v21));
      *(_DWORD *)(v20 + 24) = v21;
      *(_QWORD *)(v20 + 16) = v22;
      v23 = HIDWORD(v35);
      if (HIDWORD(v35))
      {
        v24 = v34;
        v25 = (WTF *)((char *)v34 + 16 * HIDWORD(v35));
        do
        {
          v26 = *(_DWORD **)v24;
          if (*(_QWORD *)v24)
            *v26 += 2;
          *v22 = v26;
          v27 = (_DWORD *)*((_QWORD *)v24 + 1);
          if (v27)
            *v27 += 2;
          v22[1] = v27;
          v24 = (WTF *)((char *)v24 + 16);
          v22 += 2;
        }
        while (v24 != v25);
      }
    }
    else
    {
      v23 = 0;
    }
    *(_QWORD *)a2 = v20;
    *(_DWORD *)(a2 + 16) = 0;
  }
  result = (uint64_t)v34;
  if (!v23)
  {
    if (!v34)
      return result;
LABEL_49:
    v34 = 0;
    LODWORD(v35) = 0;
    return WTF::fastFree((WTF *)result, a1);
  }
  v28 = 16 * v23;
  v29 = (WTF::StringImpl **)((char *)v34 + 8);
  do
  {
    v30 = *v29;
    *v29 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, (WTF::StringImpl *)a1);
      else
        *(_DWORD *)v30 -= 2;
    }
    v31 = *(v29 - 1);
    *(v29 - 1) = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, (WTF::StringImpl *)a1);
      else
        *(_DWORD *)v31 -= 2;
    }
    v29 += 2;
    v28 -= 16;
  }
  while (v28);
  result = (uint64_t)v34;
  if (v34)
    goto LABEL_49;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::URLSearchParams::create(std::variant<WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)::$_0,WebCore::URLSearchParams::create(std::variant<WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &)::$_1,WebCore::URLSearchParams::create(std::variant<WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &)::$_2> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;

  result = WTF::fastMalloc((WTF *)0x20);
  v5 = result;
  *(_DWORD *)result = 1;
  v6 = *((unsigned int *)a1 + 3);
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 28) = v6;
  if (!(_DWORD)v6)
  {
LABEL_10:
    *(_QWORD *)a2 = v5;
    *(_DWORD *)(a2 + 16) = 0;
    return result;
  }
  if (!(v6 >> 28))
  {
    result = WTF::fastMalloc((WTF *)(16 * v6));
    *(_DWORD *)(v5 + 24) = v6;
    *(_QWORD *)(v5 + 16) = result;
    v7 = *((unsigned int *)a1 + 3);
    if ((_DWORD)v7)
    {
      v8 = *a1;
      v9 = *a1 + 16 * v7;
      do
      {
        v10 = *(_DWORD **)v8;
        if (*(_QWORD *)v8)
          *v10 += 2;
        *(_QWORD *)result = v10;
        v11 = *(_DWORD **)(v8 + 8);
        if (v11)
          *v11 += 2;
        *(_QWORD *)(result + 8) = v11;
        v8 += 16;
        result += 16;
      }
      while (v8 != v9);
    }
    goto LABEL_10;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::URLSearchParams::create(std::variant<WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &&)::$_0,WebCore::URLSearchParams::create(std::variant<WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &)::$_1,WebCore::URLSearchParams::create(std::variant<WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &)::$_2> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::Vector<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::Vector<WTF::KeyValuePair<WTF::String,WTF::String>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::String> &>@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = 0;
  if (!*a1)
    goto LABEL_3;
  result = WTF::StringImpl::startsWith();
  v6 = *a1;
  if (!(_DWORD)result)
    goto LABEL_3;
  if (!v6)
    goto LABEL_3;
  v7 = *(unsigned int *)(v6 + 4);
  if (v7 < 2)
    goto LABEL_3;
  v8 = (v7 - 1);
  v9 = v7 - 1;
  if ((*(_BYTE *)(v6 + 16) & 4) != 0)
  {
    if (v9 >= v8)
    {
LABEL_3:
      result = WTF::URLParser::parseURLEncodedForm();
      *(_QWORD *)a2 = v4;
      *(_DWORD *)(a2 + 16) = 0;
      return result;
    }
  }
  else if (v9 >= v8)
  {
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::StringView,void>,WTF::StringTypeAdapter<char,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, _BYTE *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, _QWORD *a6@<X8>)
{
  int v9;
  _DWORD *v11;
  _BYTE *v12;
  unsigned __int128 *v13;
  unsigned __int128 *v14;
  unsigned __int128 v15;
  char v16;
  _DWORD *v17;
  uint64_t v18;

  v9 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v11 = v17;
        if (v17)
        {
          v12 = v17 + 5;
          *v17 = 2;
          v11[1] = v9;
          *((_QWORD *)v11 + 1) = v11 + 5;
          v11[4] = 4;
          if ((a4 & 0xFF00000000) != 0)
          {
            if ((_DWORD)a4)
            {
              if ((_DWORD)a4 == 1)
                *v12 = *a3;
              else
                result = (uint64_t)memcpy(v11 + 5, a3, a4);
            }
          }
          else
          {
            v13 = (unsigned __int128 *)(v11 + 5);
            if (a4 >= 0x10)
            {
              v13 = (unsigned __int128 *)&v12[a4 & 0xFFFFFFF0];
              v14 = (unsigned __int128 *)(v11 + 5);
              do
              {
                v15 = (unsigned __int128)vld2q_s8(a3);
                a3 += 32;
                *v14++ = v15;
              }
              while (v14 != v13);
            }
            while (v13 != (unsigned __int128 *)&v12[a4])
            {
              v16 = *a3;
              a3 += 2;
              *(_BYTE *)v13 = v16;
              v13 = (unsigned __int128 *)((char *)v13 + 1);
            }
          }
          v12[a4] = a5;
        }
        goto LABEL_10;
      }
LABEL_17:
      v11 = 0;
      goto LABEL_10;
    }
LABEL_16:
    v11 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_10;
  }
  if (!(_DWORD)result)
    goto LABEL_16;
  if (result > 0x7FFFFFEF)
    goto LABEL_17;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v11 = v17;
  if (v17)
  {
    *v17 = 2;
    v11[1] = v9;
    *((_QWORD *)v11 + 1) = v11 + 5;
    v11[4] = 0;
    v17 = a3;
    v18 = a4;
    result = (uint64_t)WTF::StringView::getCharacters<char16_t>(&v17, (char *)v11 + 20);
    *((_WORD *)v11 + v18 + 10) = a5;
  }
LABEL_10:
  *a6 = v11;
  return result;
}

uint64_t WTF::Vector<WebCore::URLRegistry *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::URLRegistry *>(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)WTF::Vector<WTF::Ref<WebCore::MutationRecord,WTF::RawPtrTraits<WebCore::MutationRecord>,WTF::DefaultRefDerefTraits<WebCore::MutationRecord>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *v3;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t std::__stable_sort<std::_ClassicAlgPolicy,WebCore::URLSearchParams::sort(void)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *>(uint64_t result, const WTF::StringImpl *a2, unint64_t a3, const WTF::StringImpl **a4, uint64_t a5)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  unint64_t v11;
  _QWORD *v12;
  const WTF::StringImpl *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  const WTF::StringImpl **v17;
  WTF::StringImpl *v18;
  const WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  const WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl **i;
  const WTF::StringImpl **v24;
  const WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned int v33;
  unsigned int v34;
  BOOL v35;
  unsigned __int16 *v36;
  unsigned __int16 *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned __int16 *v40;
  unsigned __int8 *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned __int8 *v44;
  unsigned __int16 *v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  uint64_t j;
  WTF::StringImpl **v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  const WTF::StringImpl **v54;
  WTF::StringImpl *v55;
  const WTF::StringImpl *v56;
  const WTF::StringImpl **v57;
  const WTF::StringImpl **v58;
  const WTF::StringImpl **v59;
  const WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  const WTF::StringImpl *v62;
  WTF *v63;
  WTF::StringImpl *v64;
  const WTF::StringImpl *v65;
  uint64_t v66;
  const WTF::StringImpl **v67;
  const WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  const WTF::StringImpl *v70;
  uint64_t v71;
  const WTF::StringImpl **v72;
  const WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  const WTF::StringImpl *v75;
  unint64_t v76;
  WTF::StringImpl **v77;
  WTF::StringImpl *v78;

  if (a3 < 2)
    return result;
  v6 = result;
  if (a3 == 2)
  {
    v7 = (const WTF::StringImpl *)((char *)a2 - 16);
    result = WTF::codePointCompare(*((WTF **)a2 - 2), *(const WTF::StringImpl **)result, (const WTF::StringImpl *)2);
    if ((result & 0x80000000) != 0)
      return (uint64_t)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::String> *&,WTF::KeyValuePair<WTF::String,WTF::String> *&>((WTF::StringImpl **)v6, v7);
    return result;
  }
  if ((uint64_t)a3 > 0)
  {
    v11 = a3 >> 1;
    v12 = (_QWORD *)(result + 16 * (a3 >> 1));
    v13 = (const WTF::StringImpl *)(a3 >> 1);
    if ((uint64_t)a3 <= a5)
    {
      std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::URLSearchParams::sort(void)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *>(result, v12, v13, a4);
      v54 = &a4[2 * v11];
      result = std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::URLSearchParams::sort(void)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *>(v6 + 16 * (a3 >> 1), a2, (const WTF::StringImpl *)(a3 - (a3 >> 1)), v54);
      v57 = &a4[2 * a3];
      v58 = v54;
      v59 = a4;
      while (v58 != v57)
      {
        if ((WTF::codePointCompare(*v58, *v59, v56) & 0x80000000) != 0)
        {
          v63 = *v58;
          *v58 = 0;
          v64 = *(WTF::StringImpl **)v6;
          *(_QWORD *)v6 = v63;
          if (v64)
          {
            if (*(_DWORD *)v64 == 2)
              WTF::StringImpl::destroy(v64, v55);
            else
              *(_DWORD *)v64 -= 2;
          }
          v65 = v58[1];
          v58[1] = 0;
          result = *(_QWORD *)(v6 + 8);
          *(_QWORD *)(v6 + 8) = v65;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v55);
            else
              *(_DWORD *)result -= 2;
          }
          v58 += 2;
        }
        else
        {
          v60 = *v59;
          *v59 = 0;
          v61 = *(WTF::StringImpl **)v6;
          *(_QWORD *)v6 = v60;
          if (v61)
          {
            if (*(_DWORD *)v61 == 2)
              WTF::StringImpl::destroy(v61, v55);
            else
              *(_DWORD *)v61 -= 2;
          }
          v62 = v59[1];
          v59[1] = 0;
          result = *(_QWORD *)(v6 + 8);
          *(_QWORD *)(v6 + 8) = v62;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v55);
            else
              *(_DWORD *)result -= 2;
          }
          v59 += 2;
        }
        v6 += 16;
        if (v59 == v54)
        {
          if (v58 != v57)
          {
            v71 = 0;
            do
            {
              v72 = &v58[v71];
              v73 = v58[v71];
              v58[v71] = 0;
              v74 = *(WTF::StringImpl **)(v6 + v71 * 8);
              *(_QWORD *)(v6 + v71 * 8) = v73;
              if (v74)
              {
                if (*(_DWORD *)v74 == 2)
                  WTF::StringImpl::destroy(v74, v55);
                else
                  *(_DWORD *)v74 -= 2;
              }
              v75 = v72[1];
              v72[1] = 0;
              result = *(_QWORD *)(v6 + v71 * 8 + 8);
              *(_QWORD *)(v6 + v71 * 8 + 8) = v75;
              if (result)
              {
                if (*(_DWORD *)result == 2)
                  result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v55);
                else
                  *(_DWORD *)result -= 2;
              }
              v71 += 2;
            }
            while (v72 + 2 != v57);
          }
          goto LABEL_133;
        }
      }
      if (v59 != v54)
      {
        v66 = 0;
        do
        {
          v67 = &v59[v66];
          v68 = v59[v66];
          v59[v66] = 0;
          v69 = *(WTF::StringImpl **)(v6 + v66 * 8);
          *(_QWORD *)(v6 + v66 * 8) = v68;
          if (v69)
          {
            if (*(_DWORD *)v69 == 2)
              WTF::StringImpl::destroy(v69, v55);
            else
              *(_DWORD *)v69 -= 2;
          }
          v70 = v67[1];
          v67[1] = 0;
          result = *(_QWORD *)(v6 + v66 * 8 + 8);
          *(_QWORD *)(v6 + v66 * 8 + 8) = v70;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v55);
            else
              *(_DWORD *)result -= 2;
          }
          v66 += 2;
        }
        while (v67 + 2 != v54);
      }
LABEL_133:
      if (a4)
      {
        v76 = a3;
        v77 = a4 + 1;
        do
        {
          v78 = *v77;
          *v77 = 0;
          if (v78)
          {
            if (*(_DWORD *)v78 == 2)
              WTF::StringImpl::destroy(v78, v55);
            else
              *(_DWORD *)v78 -= 2;
          }
          result = (uint64_t)*(v77 - 1);
          *(v77 - 1) = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v55);
            else
              *(_DWORD *)result -= 2;
          }
          v77 += 2;
          --v76;
        }
        while (v76);
      }
    }
    else
    {
      std::__stable_sort<std::_ClassicAlgPolicy,WebCore::URLSearchParams::sort(void)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *>(result, v12, v13, a4, a5);
      std::__stable_sort<std::_ClassicAlgPolicy,WebCore::URLSearchParams::sort(void)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *>(v6 + 16 * (a3 >> 1), a2, a3 - (a3 >> 1), a4, a5);
      return std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::URLSearchParams::sort(void)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *>(v6, (WTF::StringImpl *)(v6 + 16 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), (uint64_t)a4, a5);
    }
    return result;
  }
  if ((const WTF::StringImpl *)result == a2)
    return result;
  v14 = (_QWORD *)(result + 16);
  if ((const WTF::StringImpl *)(result + 16) == a2)
    return result;
  v15 = 0;
  v16 = (_QWORD *)result;
  do
  {
    v17 = (const WTF::StringImpl **)v16;
    v16 = v14;
    result = WTF::codePointCompare(v17[2], *v17, (const WTF::StringImpl *)a3);
    if ((result & 0x80000000) == 0)
      goto LABEL_80;
    v19 = (const WTF::StringImpl *)*v16;
    *v16 = 0;
    v20 = v17[3];
    v17[3] = 0;
    v21 = *v17;
    v22 = 0;
    if (v19)
    {
      for (i = (WTF::StringImpl **)v16; ; v22 = *i)
      {
        v24 = i;
        i = v17;
        *v17 = 0;
        *v24 = v21;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v18);
          else
            *(_DWORD *)v22 -= 2;
        }
        v25 = v17[1];
        v17[1] = 0;
        v26 = v24[1];
        v24[1] = v25;
        if (v26)
        {
          if (*(_DWORD *)v26 == 2)
            WTF::StringImpl::destroy(v26, v18);
          else
            *(_DWORD *)v26 -= 2;
        }
        if (v17 == (const WTF::StringImpl **)v6)
          goto LABEL_73;
        v17 -= 2;
        v21 = *(i - 2);
        if (!v21)
          goto LABEL_74;
        v27 = *((_DWORD *)v21 + 4);
        v28 = *((_DWORD *)v19 + 1);
        v29 = *((_DWORD *)v21 + 1);
        v30 = v29 >= v28 ? v28 : v29;
        if ((*((_BYTE *)v19 + 16) & 4) == 0)
          break;
        if ((v27 & 4) != 0)
        {
          if ((_DWORD)v30)
          {
            v31 = (unsigned __int8 *)*((_QWORD *)v21 + 1);
            v32 = (unsigned __int8 *)*((_QWORD *)v19 + 1);
            do
            {
              v33 = *v32;
              v34 = *v31;
              v35 = v33 > v34;
              if (v33 != v34)
                goto LABEL_56;
              ++v32;
              ++v31;
            }
            while (--v30);
          }
LABEL_50:
          if (v29 < v28)
            v48 = 1;
          else
            v48 = -1;
          if (v28 == v29 || (v48 & 0x80000000) == 0)
            goto LABEL_74;
          continue;
        }
        if (!(_DWORD)v30)
          goto LABEL_50;
        v40 = (unsigned __int16 *)*((_QWORD *)v21 + 1);
        v41 = (unsigned __int8 *)*((_QWORD *)v19 + 1);
        while (1)
        {
          v42 = *v41;
          v43 = *v40;
          if (v43 != v42)
            break;
          ++v41;
          ++v40;
          if (!--v30)
            goto LABEL_50;
        }
        if (v43 < v42)
          goto LABEL_74;
LABEL_57:
        ;
      }
      if ((v27 & 4) != 0)
      {
        if ((_DWORD)v30)
        {
          v44 = (unsigned __int8 *)*((_QWORD *)v21 + 1);
          v45 = (unsigned __int16 *)*((_QWORD *)v19 + 1);
          while (1)
          {
            v46 = *v45;
            v47 = *v44;
            v35 = v46 > v47;
            if (v46 != v47)
              break;
            ++v45;
            ++v44;
            if (!--v30)
              goto LABEL_50;
          }
LABEL_56:
          if (v35)
            goto LABEL_74;
          goto LABEL_57;
        }
      }
      else if ((_DWORD)v30)
      {
        v36 = (unsigned __int16 *)*((_QWORD *)v21 + 1);
        v37 = (unsigned __int16 *)*((_QWORD *)v19 + 1);
        while (1)
        {
          v38 = *v37;
          v39 = *v36;
          v35 = v38 > v39;
          if (v38 != v39)
            goto LABEL_56;
          ++v37;
          ++v36;
          if (!--v30)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
    for (j = v15; ; j -= 16)
    {
      v50 = (WTF::StringImpl **)(v6 + j);
      *v50 = 0;
      v50[2] = v21;
      if (v22)
      {
        if (*(_DWORD *)v22 == 2)
          WTF::StringImpl::destroy(v22, v18);
        else
          *(_DWORD *)v22 -= 2;
      }
      v51 = v50[1];
      v50[1] = 0;
      v52 = v50[3];
      v50[3] = v51;
      if (!v52)
        goto LABEL_67;
      if (*(_DWORD *)v52 != 2)
      {
        *(_DWORD *)v52 -= 2;
LABEL_67:
        if (!j)
          goto LABEL_73;
        goto LABEL_68;
      }
      WTF::StringImpl::destroy(v52, v18);
      if (!j)
      {
LABEL_73:
        i = (WTF::StringImpl **)v6;
        goto LABEL_74;
      }
LABEL_68:
      v21 = *(const WTF::StringImpl **)(v6 + j - 16);
      if (!v21)
      {
        i = v17;
        goto LABEL_74;
      }
      if (!*((_DWORD *)v21 + 1))
        break;
      v17 -= 2;
      v22 = *v50;
    }
    i = (WTF::StringImpl **)(v6 + j);
LABEL_74:
    v53 = *i;
    *i = v19;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
        WTF::StringImpl::destroy(v53, v18);
      else
        *(_DWORD *)v53 -= 2;
    }
    result = (uint64_t)i[1];
    i[1] = v20;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v18);
      else
        *(_DWORD *)result -= 2;
    }
LABEL_80:
    v14 = v16 + 2;
    v15 += 16;
  }
  while (v16 + 2 != (_QWORD *)a2);
  return result;
}

WTF::StringImpl *std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::String> *&,WTF::KeyValuePair<WTF::String,WTF::String> *&>(WTF::StringImpl **a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *result;

  v5 = *a1;
  v4 = a1[1];
  *a1 = 0;
  a1[1] = 0;
  v6 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  v7 = *a1;
  *a1 = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v9 = a1[1];
  a1[1] = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, a2);
    else
      *(_DWORD *)v9 -= 2;
  }
  v10 = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = v5;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, a2);
    else
      *(_DWORD *)v10 -= 2;
  }
  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = v4;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,WebCore::URLSearchParams::sort(void)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *>(uint64_t result, _QWORD *a2, const WTF::StringImpl *a3, const WTF::StringImpl **a4)
{
  WTF **v4;
  uint64_t v7;
  const WTF::StringImpl *v8;
  uint64_t *v9;
  _QWORD *v10;
  const WTF::StringImpl *v11;
  WTF *v12;
  WTF *v13;
  const WTF::StringImpl *v14;
  const WTF::StringImpl *v15;
  uint64_t v16;
  const WTF::StringImpl **v17;
  const WTF::StringImpl **v18;
  uint64_t v19;
  const WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  const WTF::StringImpl *v22;
  const WTF::StringImpl *v23;
  __int128 v24;
  WTF::StringImpl **v25;
  WTF **v26;
  uint64_t v27;
  uint64_t v28;
  const WTF::StringImpl *v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned int v36;
  unsigned int v37;
  BOOL v38;
  int v39;
  unsigned __int16 *v40;
  unsigned __int16 *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned __int16 *v44;
  unsigned __int8 *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned __int8 *v48;
  unsigned __int16 *v49;
  unsigned int v50;
  unsigned int v51;
  WTF::StringImpl *v52;
  const WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  const WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  _QWORD *v58;
  const WTF::StringImpl *v59;
  unint64_t v60;
  const WTF::StringImpl *v61;
  WTF *v62;
  WTF *v63;
  unint64_t v64;
  _QWORD *v65;
  WTF **v66;
  WTF *v67;
  WTF *v68;
  WTF *v69;
  WTF *v70;
  const WTF::StringImpl *v71;
  uint64_t v72;
  unint64_t v73;
  WTF **v74;
  _QWORD *v75;
  WTF *v76;
  WTF *v77;

  if (!a3)
    return result;
  v4 = a4;
  v7 = result;
  if (a3 == (const WTF::StringImpl *)2)
  {
    result = WTF::codePointCompare((WTF *)*(a2 - 2), *(const WTF::StringImpl **)result, (const WTF::StringImpl *)2);
    v10 = v4 + 3;
    if ((result & 0x80000000) != 0)
    {
      v69 = (WTF *)*(a2 - 2);
      *(a2 - 2) = 0;
      *v4 = v69;
      v70 = (WTF *)*(a2 - 1);
      *(a2 - 1) = 0;
      v4[1] = v70;
      v71 = *(const WTF::StringImpl **)v7;
      *(_QWORD *)v7 = 0;
      v9 = (uint64_t *)(v7 + 8);
      v4[2] = v71;
    }
    else
    {
      v11 = *(const WTF::StringImpl **)v7;
      *(_QWORD *)v7 = 0;
      *v4 = v11;
      v12 = *(WTF **)(v7 + 8);
      *(_QWORD *)(v7 + 8) = 0;
      v4[1] = v12;
      v13 = (WTF *)*(a2 - 2);
      *(a2 - 2) = 0;
      v4[2] = v13;
      v9 = a2 - 1;
    }
    goto LABEL_86;
  }
  if (a3 == (const WTF::StringImpl *)1)
  {
    v8 = *(const WTF::StringImpl **)result;
    *(_QWORD *)result = 0;
    v9 = (uint64_t *)(result + 8);
    *a4 = v8;
    v10 = a4 + 1;
LABEL_86:
    v72 = *v9;
    *v9 = 0;
    *v10 = v72;
    return result;
  }
  if ((uint64_t)a3 <= 8)
  {
    if ((_QWORD *)result == a2)
      return result;
    v14 = *(const WTF::StringImpl **)result;
    *(_QWORD *)result = 0;
    *a4 = v14;
    v15 = *(const WTF::StringImpl **)(result + 8);
    *(_QWORD *)(result + 8) = 0;
    a4[1] = v15;
    v16 = result + 16;
    if ((_QWORD *)(result + 16) == a2)
      return result;
    v17 = a4;
    v18 = a4;
    while (1)
    {
      v19 = v7;
      v7 = v16;
      v20 = *v18;
      v18 += 2;
      result = WTF::codePointCompare(*(WTF **)(v19 + 16), v20, a3);
      if ((result & 0x80000000) == 0)
      {
        v22 = *(const WTF::StringImpl **)v7;
        *(_QWORD *)v7 = 0;
        v17[2] = v22;
        v23 = *(const WTF::StringImpl **)(v19 + 24);
        *(_QWORD *)(v19 + 24) = 0;
        v17[3] = v23;
        goto LABEL_71;
      }
      v24 = *(_OWORD *)v17;
      *v17 = 0;
      v17[1] = 0;
      *((_OWORD *)v17 + 1) = v24;
      v25 = v4;
      if (v17 == v4)
        goto LABEL_65;
      v26 = v17;
      while (1)
      {
        v28 = (uint64_t)*(v26 - 2);
        v26 -= 2;
        v27 = v28;
        v29 = *(const WTF::StringImpl **)v7;
        if (!*(_QWORD *)v7)
        {
          if (!v27)
            goto LABEL_64;
          if (*(_DWORD *)(v27 + 4))
            v39 = -1;
          else
            v39 = 0;
LABEL_50:
          if ((v39 & 0x80000000) == 0)
            goto LABEL_64;
          goto LABEL_53;
        }
        if (!v27)
          goto LABEL_64;
        v30 = *(_DWORD *)(v27 + 16);
        v31 = *((_DWORD *)v29 + 1);
        v32 = *(_DWORD *)(v27 + 4);
        v33 = v32 >= v31 ? v31 : v32;
        if ((*((_BYTE *)v29 + 16) & 4) != 0)
          break;
        if ((v30 & 4) != 0)
        {
          if (!(_DWORD)v33)
            goto LABEL_46;
          v48 = *(unsigned __int8 **)(v27 + 8);
          v49 = (unsigned __int16 *)*((_QWORD *)v29 + 1);
          while (1)
          {
            v50 = *v49;
            v51 = *v48;
            v38 = v50 > v51;
            if (v50 != v51)
              break;
            ++v49;
            ++v48;
            if (!--v33)
              goto LABEL_46;
          }
        }
        else
        {
          if (!(_DWORD)v33)
            goto LABEL_46;
          v40 = *(unsigned __int16 **)(v27 + 8);
          v41 = (unsigned __int16 *)*((_QWORD *)v29 + 1);
          while (1)
          {
            v42 = *v41;
            v43 = *v40;
            v38 = v42 > v43;
            if (v42 != v43)
              break;
            ++v41;
            ++v40;
            if (!--v33)
              goto LABEL_46;
          }
        }
LABEL_52:
        if (v38)
          goto LABEL_64;
LABEL_53:
        *(v17 - 2) = 0;
        v52 = *v17;
        *v17 = (const WTF::StringImpl *)v27;
        if (v52)
        {
          if (*(_DWORD *)v52 == 2)
            WTF::StringImpl::destroy(v52, v21);
          else
            *(_DWORD *)v52 -= 2;
        }
        v53 = *(v17 - 1);
        *(v17 - 1) = 0;
        v54 = v17[1];
        v17[1] = v53;
        if (v54)
        {
          if (*(_DWORD *)v54 == 2)
            WTF::StringImpl::destroy(v54, v21);
          else
            *(_DWORD *)v54 -= 2;
        }
        v17 = v26;
        if (v26 == v4)
        {
          v25 = v4;
          goto LABEL_65;
        }
      }
      if ((v30 & 4) != 0)
        break;
      if (!(_DWORD)v33)
      {
LABEL_46:
        if (v32 < v31)
          v39 = 1;
        else
          v39 = -1;
        if (v31 == v32)
          goto LABEL_64;
        goto LABEL_50;
      }
      v44 = *(unsigned __int16 **)(v27 + 8);
      v45 = (unsigned __int8 *)*((_QWORD *)v29 + 1);
      while (1)
      {
        v46 = *v45;
        v47 = *v44;
        if (v47 != v46)
          break;
        ++v45;
        ++v44;
        if (!--v33)
          goto LABEL_46;
      }
      if (v47 >= v46)
        goto LABEL_53;
LABEL_64:
      v25 = v17;
LABEL_65:
      v55 = *(const WTF::StringImpl **)v7;
      *(_QWORD *)v7 = 0;
      v56 = *v25;
      *v25 = v55;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2)
          WTF::StringImpl::destroy(v56, v21);
        else
          *(_DWORD *)v56 -= 2;
      }
      v57 = *(WTF::StringImpl **)(v19 + 24);
      *(_QWORD *)(v19 + 24) = 0;
      result = (uint64_t)v25[1];
      v25[1] = v57;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v21);
        else
          *(_DWORD *)result -= 2;
      }
LABEL_71:
      v16 = v7 + 16;
      v17 = v18;
      if ((_QWORD *)(v7 + 16) == a2)
        return result;
    }
    if (!(_DWORD)v33)
      goto LABEL_46;
    v34 = *(unsigned __int8 **)(v27 + 8);
    v35 = (unsigned __int8 *)*((_QWORD *)v29 + 1);
    while (1)
    {
      v36 = *v35;
      v37 = *v34;
      v38 = v36 > v37;
      if (v36 != v37)
        goto LABEL_52;
      ++v35;
      ++v34;
      if (!--v33)
        goto LABEL_46;
    }
  }
  v58 = (_QWORD *)(result + 16 * ((unint64_t)a3 >> 1));
  std::__stable_sort<std::_ClassicAlgPolicy,WebCore::URLSearchParams::sort(void)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *>(result, v58, (unint64_t)a3 >> 1, a4, (unint64_t)a3 >> 1);
  result = std::__stable_sort<std::_ClassicAlgPolicy,WebCore::URLSearchParams::sort(void)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *>(v7 + 16 * ((unint64_t)a3 >> 1), a2, (char *)a3 - ((unint64_t)a3 >> 1), &v4[2 * ((unint64_t)a3 >> 1)], (char *)a3 - ((unint64_t)a3 >> 1));
  v60 = v7 + 16 * ((unint64_t)a3 >> 1);
  while ((_QWORD *)v60 != a2)
  {
    result = WTF::codePointCompare(*(WTF **)v60, *(const WTF::StringImpl **)v7, v59);
    if ((result & 0x80000000) != 0)
    {
      v63 = *(WTF **)v60;
      *(_QWORD *)v60 = 0;
      *v4 = v63;
      v62 = *(WTF **)(v60 + 8);
      *(_QWORD *)(v60 + 8) = 0;
      v60 += 16;
    }
    else
    {
      v61 = *(const WTF::StringImpl **)v7;
      *(_QWORD *)v7 = 0;
      *v4 = v61;
      v62 = *(WTF **)(v7 + 8);
      *(_QWORD *)(v7 + 8) = 0;
      v7 += 16;
    }
    v4[1] = v62;
    v4 += 2;
    if ((_QWORD *)v7 == v58)
    {
      if ((_QWORD *)v60 != a2)
      {
        v64 = 0;
        do
        {
          v65 = (_QWORD *)(v60 + v64);
          v66 = &v4[v64 / 8];
          v67 = *(WTF **)(v60 + v64);
          *v65 = 0;
          *v66 = v67;
          v68 = *(WTF **)(v60 + v64 + 8);
          v65[1] = 0;
          v66[1] = v68;
          v64 += 16;
        }
        while (v65 + 2 != a2);
      }
      return result;
    }
  }
  if ((_QWORD *)v7 != v58)
  {
    v73 = 0;
    do
    {
      v74 = &v4[v73 / 8];
      v75 = (_QWORD *)(v7 + v73);
      v76 = *(WTF **)(v7 + v73);
      *v75 = 0;
      *v74 = v76;
      v77 = *(WTF **)(v7 + v73 + 8);
      v75[1] = 0;
      v74[1] = v77;
      v73 += 16;
    }
    while (v75 + 2 != v58);
  }
  return result;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::URLSearchParams::sort(void)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *>(uint64_t result, WTF::StringImpl *a2, const WTF::StringImpl *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  WTF::StringImpl **v10;
  WTF::StringImpl **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  const WTF::StringImpl **v17;
  uint64_t v18;
  uint64_t v19;
  WTF **v20;
  WTF::StringImpl **v21;
  unint64_t v22;
  const WTF::StringImpl **v23;
  const WTF::StringImpl **v24;
  const WTF::StringImpl **v25;
  const WTF::StringImpl *v26;
  uint64_t v27;
  unint64_t v28;
  WTF **v29;
  WTF **v30;
  WTF *v31;
  int v32;
  WTF::StringImpl *i;
  WTF::StringImpl **v34;
  WTF::StringImpl **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  WTF::StringImpl **v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WTF::StringImpl **v47;
  WTF::StringImpl **v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  WTF *v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  uint64_t v69;
  uint64_t v70;
  WTF::StringImpl **v71;
  WTF::StringImpl *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  WTF::StringImpl **v80;
  WTF::StringImpl *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl **v86;

  if (a5)
  {
    v8 = a5;
    v10 = (WTF::StringImpl **)a3;
    v11 = (WTF::StringImpl **)a2;
    v12 = result;
    while (a4 > a7 && v8 > a7)
    {
      if (!a4)
        return result;
      v13 = 0;
      v14 = -a4;
      while (1)
      {
        result = WTF::codePointCompare(*v11, *(const WTF::StringImpl **)(v12 + v13), a3);
        if ((result & 0x80000000) != 0)
          break;
        v13 += 16;
        if (__CFADD__(v14++, 1))
          return result;
      }
      v16 = -v14;
      v17 = (const WTF::StringImpl **)(v12 + v13);
      v85 = a7;
      v86 = v10;
      v84 = v12 + v13;
      if (-v14 >= v8)
      {
        if (v14 == -1)
          return (uint64_t)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::String> *&,WTF::KeyValuePair<WTF::String,WTF::String> *&>((WTF::StringImpl **)(v12 + v13), (WTF::StringImpl *)v11);
        if (v14 > 0)
          v16 = 1 - v14;
        v27 = v16 >> 1;
        v23 = (const WTF::StringImpl **)(v12 + 16 * (v16 >> 1) + v13);
        if (v10 == v11)
        {
          v20 = v11;
        }
        else
        {
          v28 = ((char *)v10 - (char *)v11) >> 4;
          v20 = v11;
          do
          {
            v29 = &v20[2 * (v28 >> 1)];
            v31 = *v29;
            v30 = v29 + 2;
            v32 = WTF::codePointCompare(v31, *v23, a3);
            if (v32 >= 0)
              v28 >>= 1;
            else
              v28 += ~(v28 >> 1);
            if (v32 < 0)
              v20 = v30;
          }
          while (v28);
        }
        v19 = ((char *)v20 - (char *)v11) >> 4;
      }
      else
      {
        if (v8 >= 0)
          v18 = v8;
        else
          v18 = v8 + 1;
        v19 = v18 >> 1;
        v20 = &v11[2 * (v18 >> 1)];
        if (v17 == v11)
        {
          v23 = v11;
          v21 = v11;
        }
        else
        {
          v82 = v18 >> 1;
          v21 = (WTF::StringImpl **)(v12 + v13);
          v22 = ((uint64_t)v11 - v12 - v13) >> 4;
          v23 = v17;
          do
          {
            v24 = &v23[2 * (v22 >> 1)];
            v26 = *v24;
            v25 = v24 + 2;
            if ((int)WTF::codePointCompare(*v20, v26, a3) < 0)
            {
              v22 >>= 1;
            }
            else
            {
              v23 = v25;
              v22 += ~(v22 >> 1);
            }
          }
          while (v22);
          v19 = v82;
        }
        v27 = ((char *)v23 - (char *)v21) >> 4;
      }
      v10 = v20;
      if (v23 != v11)
      {
        v10 = v23;
        if (v11 != v20)
        {
          v83 = v19;
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::String> *&,WTF::KeyValuePair<WTF::String,WTF::String> *&>(v23, (WTF::StringImpl *)v11);
          v10 = v23 + 2;
          for (i = (WTF::StringImpl *)(v11 + 2); i != (WTF::StringImpl *)v20; i = (WTF::StringImpl *)((char *)i + 16))
          {
            if (v10 == v11)
              v11 = (WTF::StringImpl **)i;
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::String> *&,WTF::KeyValuePair<WTF::String,WTF::String> *&>(v10, i);
            v10 += 2;
          }
          if (v10 == v11)
          {
            v10 = v11;
          }
          else
          {
            v34 = v10;
            v35 = v11;
            do
            {
              while (1)
              {
                std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:sn180100]<WTF::KeyValuePair<WTF::String,WTF::String> *&,WTF::KeyValuePair<WTF::String,WTF::String> *&>(v34, (WTF::StringImpl *)v11);
                v34 += 2;
                v11 += 2;
                if (v11 == v20)
                  break;
                if (v34 == v35)
                  v35 = v11;
              }
              v11 = v35;
            }
            while (v34 != v35);
          }
          v19 = v83;
        }
      }
      a4 = -(v27 + v14);
      v36 = v8 - v19;
      if (v27 + v19 >= v8 - (v27 + v19) - v14)
      {
        v38 = v19;
        result = std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::URLSearchParams::sort(void)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *>(v10, v20, v86, -(v27 + v14), v36, a6, v85);
        v20 = v23;
        v36 = v38;
        a4 = v27;
        a7 = v85;
        v12 = v84;
      }
      else
      {
        v37 = v27;
        a7 = v85;
        result = std::__inplace_merge<std::_ClassicAlgPolicy,WebCore::URLSearchParams::sort(void)::$_0 &,WTF::KeyValuePair<WTF::String,WTF::String> *>(v84, v23, v10, v37, v19, a6, v85);
        v12 = (uint64_t)v10;
        v10 = v86;
      }
      v11 = v20;
      v8 = v36;
      if (!v36)
        return result;
    }
    if (a4 <= v8)
    {
      if ((WTF::StringImpl **)v12 == v11)
        return result;
      v55 = 0;
      v40 = 0;
      v41 = a6;
      do
      {
        v56 = (_QWORD *)(a6 + v55);
        v57 = (_QWORD *)(v12 + v55);
        v58 = *(_QWORD *)(v12 + v55);
        *v57 = 0;
        *v56 = v58;
        v59 = *(_QWORD *)(v12 + v55 + 8);
        v57[1] = 0;
        v56[1] = v59;
        ++v40;
        v55 += 16;
      }
      while (v57 + 2 != v11);
      if (v55)
      {
        v60 = a6 + v55;
        v61 = a6 + v55 - 16;
        v62 = a6;
        while (v11 != v10)
        {
          if ((WTF::codePointCompare(*v11, *(const WTF::StringImpl **)v62, a3) & 0x80000000) != 0)
          {
            v66 = *v11;
            *v11 = 0;
            v67 = *(WTF::StringImpl **)v12;
            *(_QWORD *)v12 = v66;
            if (v67)
            {
              if (*(_DWORD *)v67 == 2)
                WTF::StringImpl::destroy(v67, a2);
              else
                *(_DWORD *)v67 -= 2;
            }
            v68 = v11[1];
            v11[1] = 0;
            result = *(_QWORD *)(v12 + 8);
            *(_QWORD *)(v12 + 8) = v68;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
              else
                *(_DWORD *)result -= 2;
            }
            v11 += 2;
          }
          else
          {
            v63 = *(const WTF::StringImpl **)v62;
            *(_QWORD *)v62 = 0;
            v64 = *(WTF::StringImpl **)v12;
            *(_QWORD *)v12 = v63;
            if (v64)
            {
              if (*(_DWORD *)v64 == 2)
                WTF::StringImpl::destroy(v64, a2);
              else
                *(_DWORD *)v64 -= 2;
            }
            v65 = *(_QWORD *)(v62 + 8);
            *(_QWORD *)(v62 + 8) = 0;
            result = *(_QWORD *)(v12 + 8);
            *(_QWORD *)(v12 + 8) = v65;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
              else
                *(_DWORD *)result -= 2;
            }
            v62 += 16;
          }
          v12 += 16;
          if (v60 == v62)
            goto LABEL_137;
        }
        v75 = 0;
        do
        {
          v76 = v62 + v75;
          v77 = *(_QWORD *)(v62 + v75);
          *(_QWORD *)(v62 + v75) = 0;
          v78 = *(WTF::StringImpl **)(v12 + v75);
          *(_QWORD *)(v12 + v75) = v77;
          if (v78)
          {
            if (*(_DWORD *)v78 == 2)
              WTF::StringImpl::destroy(v78, a2);
            else
              *(_DWORD *)v78 -= 2;
          }
          v79 = *(_QWORD *)(v76 + 8);
          *(_QWORD *)(v76 + 8) = 0;
          result = *(_QWORD *)(v12 + v75 + 8);
          *(_QWORD *)(v12 + v75 + 8) = v79;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
            else
              *(_DWORD *)result -= 2;
          }
          v75 += 16;
        }
        while (v61 != v76);
      }
    }
    else
    {
      if (v11 == v10)
        return result;
      v39 = 0;
      v40 = 0;
      v41 = a6;
      do
      {
        v42 = (WTF::StringImpl **)(a6 + v39 * 8);
        v43 = &v11[v39];
        v44 = v11[v39];
        *v43 = 0;
        *v42 = v44;
        v45 = v11[v39 + 1];
        v43[1] = 0;
        v42[1] = v45;
        ++v40;
        v39 += 2;
      }
      while (v43 + 2 != v10);
      if (v39 * 8)
      {
        v46 = a6 + v39 * 8;
        while (v11 != (WTF::StringImpl **)v12)
        {
          v47 = v11 - 2;
          v48 = (WTF::StringImpl **)(v46 - 16);
          if ((WTF::codePointCompare(*(WTF **)(v46 - 16), *(v11 - 2), a3) & 0x80000000) != 0)
          {
            v52 = *v47;
            *v47 = 0;
            v53 = *(v10 - 2);
            *(v10 - 2) = v52;
            if (v53)
            {
              if (*(_DWORD *)v53 == 2)
                WTF::StringImpl::destroy(v53, a2);
              else
                *(_DWORD *)v53 -= 2;
            }
            v54 = *(v11 - 1);
            *(v11 - 1) = 0;
            result = (uint64_t)*(v10 - 1);
            *(v10 - 1) = v54;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
              else
                *(_DWORD *)result -= 2;
            }
          }
          else
          {
            v49 = *v48;
            *v48 = 0;
            v50 = *(v10 - 2);
            *(v10 - 2) = v49;
            if (v50)
            {
              if (*(_DWORD *)v50 == 2)
                WTF::StringImpl::destroy(v50, a2);
              else
                *(_DWORD *)v50 -= 2;
            }
            v51 = *(WTF::StringImpl **)(v46 - 8);
            *(_QWORD *)(v46 - 8) = 0;
            result = (uint64_t)*(v10 - 1);
            *(v10 - 1) = v51;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
              else
                *(_DWORD *)result -= 2;
            }
            v47 = v11;
            v46 -= 16;
          }
          v10 -= 2;
          v11 = v47;
          if (v46 == a6)
            goto LABEL_137;
        }
        v69 = 0;
        do
        {
          v70 = v46 + v69 * 8;
          v71 = &v10[v69];
          v72 = *(WTF::StringImpl **)(v46 + v69 * 8 - 16);
          *(_QWORD *)(v46 + v69 * 8 - 16) = 0;
          v73 = v10[v69 - 2];
          v10[v69 - 2] = v72;
          if (v73)
          {
            if (*(_DWORD *)v73 == 2)
              WTF::StringImpl::destroy(v73, a2);
            else
              *(_DWORD *)v73 -= 2;
          }
          v74 = *(WTF::StringImpl **)(v70 - 8);
          *(_QWORD *)(v70 - 8) = 0;
          result = (uint64_t)*(v71 - 1);
          *(v71 - 1) = v74;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
            else
              *(_DWORD *)result -= 2;
          }
          v69 -= 2;
        }
        while (v46 + v69 * 8 != a6);
      }
    }
LABEL_137:
    if (v41)
    {
      v80 = (WTF::StringImpl **)(a6 + 8);
      do
      {
        v81 = *v80;
        *v80 = 0;
        if (v81)
        {
          if (*(_DWORD *)v81 == 2)
            WTF::StringImpl::destroy(v81, a2);
          else
            *(_DWORD *)v81 -= 2;
        }
        result = (uint64_t)*(v80 - 1);
        *(v80 - 1) = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
          else
            *(_DWORD *)result -= 2;
        }
        v80 += 2;
        --v40;
      }
      while (v40);
    }
  }
  return result;
}

WTF::StringImpl *WTF::VectorMover<false,WTF::KeyValuePair<WTF::String,WTF::String>>::moveOverlapping(WTF::StringImpl *result, WTF::StringImpl *a2, WTF::StringImpl **a3)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  _QWORD *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;

  v3 = a3;
  v4 = a2;
  v5 = result;
  if (result <= (WTF::StringImpl *)a3)
  {
    if (a2 != result)
    {
      v9 = (WTF::StringImpl **)((char *)a3 + ((a2 - result) & 0xFFFFFFFFFFFFFFF0) - 8);
      v10 = a2;
      do
      {
        v11 = *((_QWORD *)v10 - 2);
        v10 = (WTF::StringImpl *)((char *)v10 - 16);
        *(_QWORD *)v10 = 0;
        *(v9 - 1) = v11;
        v12 = *((_QWORD *)v10 + 1);
        *((_QWORD *)v10 + 1) = 0;
        *v9 = v12;
        v13 = (WTF::StringImpl *)*((_QWORD *)v10 + 1);
        *((_QWORD *)v10 + 1) = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, a2);
          else
            *(_DWORD *)v13 -= 2;
        }
        result = (WTF::StringImpl *)*((_QWORD *)v4 - 2);
        *((_QWORD *)v4 - 2) = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
          else
            *(_DWORD *)result -= 2;
        }
        v9 -= 2;
        v4 = v10;
      }
      while (v10 != v5);
    }
  }
  else
  {
    while (v5 != v4)
    {
      v6 = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      *v3 = v6;
      v7 = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      v3[1] = v7;
      v8 = (WTF::StringImpl *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 2)
          WTF::StringImpl::destroy(v8, a2);
        else
          *(_DWORD *)v8 -= 2;
      }
      result = *(WTF::StringImpl **)v5;
      *(_QWORD *)v5 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 16);
      v3 += 2;
    }
  }
  return result;
}

void WebCore::ValidatedFormListedElement::~ValidatedFormListedElement(WebCore::ValidatedFormListedElement *this, WTF::StringImpl *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t Ref;
  const WebCore::Style::RuleSet *v16;
  __int16 v17;
  char v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  __int16 v23;
  WebCore::Style::Scope *v24;
  _BOOL4 v25;
  _BOOL4 v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL4 v32;
  _BOOL4 v33;
  void *v34;
  const WebCore::Style::RuleSet *v35;
  _BOOL4 v36;
  int v37;
  int v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  WebCore::ChildListMutationAccumulator *v73;
  uint64_t v74;
  WTF *v75;
  uint64_t v76;
  WTF *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  WTF *v81;
  WTF *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  WTF *v86;
  uint64_t v87;
  uint64_t *v88;
  _QWORD *v89;
  WebCore::Node *v90;
  WebCore::Event *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  _BOOL4 v94;
  uint64_t v95;
  WebCore::Style::Scope *v96[2];
  BOOL v97;
  BOOL v98;
  BOOL v99;
  WTF::StringImpl *v100[2];
  __int128 v101;
  uint64_t v102;
  Inspector::InspectorDebuggerAgent *v103;

  *(_QWORD *)this = off_1E33DBBB8;
  v3 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (!v3)
    goto LABEL_117;
  v4 = *(WTF::StringImpl **)(*((_QWORD *)v3 + 1) + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v4 + 5) + 8) + 528);
  if (!v5
    || (v6 = *(_QWORD *)(v5 + 8)) == 0
    || (v7 = *(_QWORD *)(v6 + 24)) == 0
    || (v8 = *(_QWORD *)(v7 + 8)) == 0
    || (v9 = *(_QWORD *)(v8 + 232)) == 0)
  {
    v10 = *((_QWORD *)v3 + 4);
    if (!v10)
    {
LABEL_90:
      v44 = (WTF::StringImpl *)*((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 2) = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 2)
          WTF::StringImpl::destroy(v44, v4);
        else
          *(_DWORD *)v44 -= 2;
      }
      goto LABEL_93;
    }
    *(_DWORD *)(v10 + 24) += 2;
    if ((*((_QWORD *)v4 + 9) & 0xFFFFFFFFFFFFLL) != 0)
      v11 = *(_QWORD *)((*((_QWORD *)v4 + 9) & 0xFFFFFFFFFFFFLL) + 0x58);
    else
      v11 = 0;
    *(_DWORD *)(v11 + 24) += 2;
    v12 = *((_QWORD *)v3 + 5);
    *((_QWORD *)v3 + 5) = 0;
    if (v12)
    {
      if (*(_DWORD *)(v12 + 24) == 2)
      {
        if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v12);
      }
      else
      {
        *(_DWORD *)(v12 + 24) -= 2;
      }
    }
    v13 = *((_QWORD *)v3 + 6);
    *((_QWORD *)v3 + 6) = 0;
    if (v13)
    {
      if (*(_DWORD *)(v13 + 24) == 2)
      {
        if ((*(_WORD *)(v13 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v13);
      }
      else
      {
        *(_DWORD *)(v13 + 24) -= 2;
      }
    }
    *(_DWORD *)(v11 + 24) += 2;
    v14 = *(_DWORD *)(v10 + 24);
    *(_DWORD *)(v10 + 24) = v14 + 2;
    if (*(_QWORD *)(v10 + 32) != v11)
    {
LABEL_79:
      if (*(_DWORD *)(v10 + 24) == 2)
      {
        if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v10);
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
      }
      if (*(_DWORD *)(v11 + 24) == 2)
      {
        if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v11);
      }
      else
      {
        *(_DWORD *)(v11 + 24) -= 2;
      }
      v43 = *((_QWORD *)v3 + 4);
      *((_QWORD *)v3 + 4) = 0;
      if (v43)
      {
        if (*(_DWORD *)(v43 + 24) == 2)
        {
          if ((*(_WORD *)(v43 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v43);
        }
        else
        {
          *(_DWORD *)(v43 + 24) -= 2;
        }
      }
      if (*(_DWORD *)(v11 + 24) == 2)
      {
        if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v11);
      }
      else
      {
        *(_DWORD *)(v11 + 24) -= 2;
      }
      if (*(_DWORD *)(v10 + 24) == 2)
      {
        if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v10);
      }
      else
      {
        *(_DWORD *)(v10 + 24) -= 2;
      }
      goto LABEL_90;
    }
    *(_DWORD *)(v10 + 24) = v14 + 4;
    v103 = (Inspector::InspectorDebuggerAgent *)v10;
    ++WebCore::ScriptDisallowedScope::s_count;
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v11 + 40) + 8) + 3364) & 1) != 0)
    {
      WebCore::ChildListMutationAccumulator::getOrCreate((WebCore::ChildListMutationAccumulator *)v11, (uint64_t *)v100);
      v73 = v100[0];
      if (v100[0])
      {
        if (*((_QWORD *)v100[0] + 10))
          WebCore::ChildListMutationAccumulator::willRemoveChild(v100[0], (WebCore::Node *)v10);
        if (*(_DWORD *)v73 == 1)
        {
          WebCore::ChildListMutationAccumulator::~ChildListMutationAccumulator(v73, v72);
          WTF::fastFree(v82, v83);
        }
        else
        {
          --*(_DWORD *)v73;
        }
      }
    }
    --WebCore::ScriptDisallowedScope::s_count;
    WebCore::Node::notifyMutationObserversNodeWillDetach((WebCore::Node *)v10);
    Ref = (uint64_t)WebCore::dispatchChildRemovalEvents(&v103);
    if (*(_QWORD *)(v10 + 32) == v11)
    {
      v17 = *(_WORD *)(v10 + 28);
      if ((v17 & 4) == 0 || (*(_WORD *)(v10 + 78) & 0x3FF) == 0)
      {
LABEL_22:
        *(_OWORD *)v100 = 0u;
        v101 = 0u;
        if ((v17 & 2) != 0)
          v18 = 3;
        else
          v18 = 6;
        if ((v17 & 8) != 0)
          v18 = 1;
        LOBYTE(v100[0]) = v18;
        if ((v17 & 8) != 0)
          v19 = (WTF::StringImpl *)v10;
        else
          v19 = 0;
        v102 = 0;
        v100[1] = v19;
        v20 = v10;
        do
          v20 = *(_QWORD *)(v20 + 48) & 0xFFFFFFFFFFFFLL;
        while (v20 && (*(_WORD *)(v20 + 28) & 8) == 0);
        *(_QWORD *)&v101 = v20;
        v21 = v10;
        do
          v21 = *(_QWORD *)(v21 + 56);
        while (v21 && (*(_WORD *)(v21 + 28) & 8) == 0);
        *((_QWORD *)&v101 + 1) = v21;
        LOBYTE(v102) = 1;
        if ((v17 & 8) != 0)
          v22 = 2;
        else
          v22 = 1;
        BYTE1(v102) = v22;
        ++WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
        ++WebCore::ScriptDisallowedScope::s_count;
        v23 = *(_WORD *)(v11 + 28);
        if ((v23 & 8) != 0)
          v24 = (WebCore::Style::Scope *)v11;
        else
          v24 = 0;
        v96[0] = v24;
        v96[1] = (WebCore::Style::Scope *)v100;
        if ((v23 & 8) != 0)
        {
          v94 = WebCore::Element::needsStyleInvalidation((WebCore::Element *)v11);
          v97 = v94;
          if (v94)
          {
            v26 = *(_BYTE *)(WebCore::Style::Scope::forNode(v96[0], v4) + 236) != 0;
            v25 = v97;
          }
          else
          {
            v25 = 0;
            v26 = 0;
          }
        }
        else
        {
          v25 = 0;
          v26 = 0;
          v97 = 0;
        }
        v98 = v26;
        v99 = *(_QWORD *)(v11 + 80) == 0;
        if (v25 && v26)
          WebCore::Style::ChildChangeInvalidation::invalidateForHasBeforeMutation(v96, (uint64_t)v4, v16);
        if ((*(_WORD *)(v11 + 28) & 0x80) != 0 || (*(_BYTE *)(v11 + 22) & 0x10) != 0)
        {
          v27 = *(_QWORD **)(v11 + 40);
          v78 = *v27;
          if ((*(_WORD *)(*v27 + 28) & 0x80) == 0)
            v78 = 0;
          v79 = *(_QWORD *)(v78 + 224);
          if (v79)
          {
            ++*(_DWORD *)(v79 + 12);
            *(_BYTE *)(v79 + 9) = 0;
          }
        }
        else
        {
          v27 = *(_QWORD **)(v11 + 40);
        }
        v28 = v27[1];
        *(_DWORD *)(v28 + 24) += 2;
        WebCore::Document::nodeWillBeRemoved((WebCore::Document *)v28, (WebCore::Node *)v10);
        if (*(_DWORD *)(v28 + 24) == 2)
        {
          if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v28);
        }
        else
        {
          *(_DWORD *)(v28 + 24) -= 2;
        }
        v29 = *(_QWORD *)(v10 + 48);
        v30 = v29 & 0xFFFFFFFFFFFFLL;
        if ((v29 & 0xFFFFFFFFFFFFLL) != 0)
          *(_DWORD *)((v29 & 0xFFFFFFFFFFFFLL) + 0x18) += 2;
        v31 = *(_QWORD *)(v10 + 56);
        if (v31)
          *(_DWORD *)(v31 + 24) += 2;
        WebCore::ContainerNode::removeBetween((WebCore::ContainerNode *)v11, (WebCore::Node *)v30, (WebCore::Node *)v31, (WebCore::Node *)v10);
        v32 = (*(_BYTE *)(v11 + 22) & 0x18) == 0;
        if ((*(_BYTE *)(v10 + 22) & 8) != 0)
          v33 = WebCore::notifyNodeRemovedFromDocument(v11, v32, v10);
        else
          v33 = WebCore::notifyNodeRemovedFromTree(v11, v32, v10);
        v36 = v33;
        if (v31)
        {
          if (*(_DWORD *)(v31 + 24) == 2)
          {
            if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v31);
          }
          else
          {
            *(_DWORD *)(v31 + 24) -= 2;
          }
        }
        if (v30)
        {
          if (*(_DWORD *)(v30 + 24) == 2)
          {
            if ((*(_WORD *)(v30 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v30);
          }
          else
          {
            *(_DWORD *)(v30 + 24) -= 2;
          }
        }
        if (v97)
        {
          if (v98)
            WebCore::Style::ChildChangeInvalidation::invalidateForHasAfterMutation(v96, (uint64_t)v34, v35);
          WebCore::Style::ChildChangeInvalidation::invalidateAfterChange((uint64_t)v96);
        }
        --WebCore::ScriptDisallowedScope::s_count;
        v37 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
        if (WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount == 1
          && WebCore::WidgetHierarchyUpdatesSuspensionScope::s_haveScheduledWidgetToMove)
        {
          WebCore::WidgetHierarchyUpdatesSuspensionScope::moveWidgets((WebCore::WidgetHierarchyUpdatesSuspensionScope *)v96, v34);
          v37 = WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount;
        }
        WebCore::WidgetHierarchyUpdatesSuspensionScope::s_widgetHierarchyUpdateSuspendCount = v37 - 1;
        if (v36)
        {
          v71 = *(_QWORD *)(v10 + 8);
          if ((!v71 || (*(_BYTE *)(v71 + 8) & 3) != 0 || !*(_QWORD *)v71)
            && (*(_WORD *)(v10 + 28) & 4) != 0
            && *(_QWORD *)(v10 + 80))
          {
            WebCore::willCreatePossiblyOrphanedTreeByRemovalSlowCase((WebCore::Node *)v10, (WebCore::Node *)v34);
          }
        }
        Ref = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v11 + 376))(v11, v100);
        v38 = 1;
        goto LABEL_70;
      }
      Ref = WebCore::disconnectSubframes((WebCore::Node *)v10, 0);
      if (*(_QWORD *)(v10 + 32) == v11)
      {
        v17 = *(_WORD *)(v10 + 28);
        goto LABEL_22;
      }
    }
    v38 = 0;
LABEL_70:
    if (*(_DWORD *)(v10 + 24) == 2)
    {
      if ((*(_WORD *)(v10 + 30) & 0x400) == 0)
        Ref = WebCore::Node::removedLastRef((WebCore::Node *)v10);
    }
    else
    {
      *(_DWORD *)(v10 + 24) -= 2;
    }
    if (v38)
    {
      v39 = *(uint64_t **)(v11 + 40);
      v40 = v39[1];
      v41 = *(_DWORD *)(v40 + 24);
      *(_DWORD *)(v40 + 24) = v41 + 2;
      if (*(_QWORD *)(v40 + 1808))
      {
        v65 = *v39;
        if (!v65
          || (*(_WORD *)(v65 + 28) & 0x80) == 0
          || (v66 = *(_QWORD *)(v65 + 200)) == 0
          || (v67 = *(_QWORD *)(v66 + 8)) == 0
          || (*(_WORD *)(v67 + 28) & 0x20) == 0
          || *(_QWORD *)(*(_QWORD *)(v67 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::useTag + 24))
        {
          WebCore::Document::checkedSVGExtensions((WebCore::Document *)v40, v100);
          v68 = v100[0];
          v69 = (WTF *)*((_QWORD *)v100[0] + 7);
          v70 = *((unsigned int *)v100[0] + 17);
          *((_QWORD *)v100[0] + 7) = 0;
          *((_QWORD *)v68 + 8) = 0;
          if ((_DWORD)v70)
          {
            v84 = 8 * v70;
            v85 = 8 * v70;
            v86 = v69;
            do
            {
              v87 = *(_QWORD *)v86;
              v86 = (WTF *)((char *)v86 + 8);
              (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v87 + 1240))(v87, &WebCore::SVGNames::hrefAttr);
              v85 -= 8;
            }
            while (v85);
            v88 = (uint64_t *)v69;
            do
            {
              Ref = *v88;
              *v88 = 0;
              if (Ref)
              {
                if (*(_DWORD *)(Ref + 24) == 2)
                {
                  if ((*(_WORD *)(Ref + 30) & 0x400) == 0)
                    Ref = WebCore::Node::removedLastRef((WebCore::Node *)Ref);
                }
                else
                {
                  *(_DWORD *)(Ref + 24) -= 2;
                }
              }
              ++v88;
              v84 -= 8;
            }
            while (v84);
          }
          if (v69)
            Ref = WTF::fastFree(v69, v4);
          if (v68)
          {
            if (!*(_DWORD *)v68)
            {
              __break(0xC471u);
              JUMPOUT(0x195CCECD0);
            }
            --*(_DWORD *)v68;
          }
          v41 = *(_DWORD *)(v40 + 24) - 2;
        }
      }
      if (v41)
      {
        *(_DWORD *)(v40 + 24) = v41;
      }
      else if ((*(_WORD *)(v40 + 30) & 0x400) == 0)
      {
        Ref = WebCore::Node::removedLastRef((WebCore::Node *)v40);
      }
      if ((*(_BYTE *)(v11 + 22) & 0x10) == 0)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(v11 + 40) + 8);
        if (!*(_BYTE *)(v42 + 3268) && (*(_WORD *)(v42 + 3292) & 1) != 0)
        {
          v89 = (_QWORD *)(WebCore::eventNames((WebCore *)Ref) + 56);
          if (*(_QWORD *)(v11 + 32)
            || (v95 = *(_QWORD *)(v11 + 16), (v95 & 0x1000000000000) != 0)
            && WebCore::EventListenerMap::find((v95 & 0xFFFFFFFFFFFFLL) + 16, v89))
          {
            v100[0] = 0;
            v96[0] = 0;
            v90 = (WebCore::Node *)WebCore::MutationEvent::operator new(112);
            WebCore::MutationEvent::MutationEvent((uint64_t)v90, v89, 1, 0, 0, (_DWORD **)v100, (_DWORD **)v96);
            WebCore::EventDispatcher::dispatchScopedEvent((WebCore::EventDispatcher *)v11, v90, v91);
            if (*((_DWORD *)v90 + 4) == 1)
              (*(void (**)(WebCore::Node *))(*(_QWORD *)v90 + 8))(v90);
            else
              --*((_DWORD *)v90 + 4);
            v92 = v96[0];
            v96[0] = 0;
            if (v92)
            {
              if (*(_DWORD *)v92 == 2)
                WTF::StringImpl::destroy(v92, v4);
              else
                *(_DWORD *)v92 -= 2;
            }
            v93 = v100[0];
            v100[0] = 0;
            if (v93)
            {
              if (*(_DWORD *)v93 == 2)
                WTF::StringImpl::destroy(v93, v4);
              else
                *(_DWORD *)v93 -= 2;
            }
          }
        }
      }
    }
    goto LABEL_79;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
LABEL_93:
  v45 = *((_QWORD *)v3 + 6);
  *((_QWORD *)v3 + 6) = 0;
  if (v45)
  {
    if (*(_DWORD *)(v45 + 24) == 2)
    {
      if ((*(_WORD *)(v45 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v45);
    }
    else
    {
      *(_DWORD *)(v45 + 24) -= 2;
    }
  }
  v46 = *((_QWORD *)v3 + 5);
  *((_QWORD *)v3 + 5) = 0;
  if (v46)
  {
    if (*(_DWORD *)(v46 + 24) == 2)
    {
      if ((*(_WORD *)(v46 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v46);
    }
    else
    {
      *(_DWORD *)(v46 + 24) -= 2;
    }
  }
  v47 = *((_QWORD *)v3 + 4);
  *((_QWORD *)v3 + 4) = 0;
  if (v47)
  {
    if (*(_DWORD *)(v47 + 24) == 2)
    {
      if ((*(_WORD *)(v47 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v47);
    }
    else
    {
      *(_DWORD *)(v47 + 24) -= 2;
    }
  }
  v48 = *((_QWORD *)v3 + 3);
  *((_QWORD *)v3 + 3) = 0;
  if (v48)
    (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
  v49 = (WTF::StringImpl *)*((_QWORD *)v3 + 2);
  *((_QWORD *)v3 + 2) = 0;
  if (v49)
  {
    if (*(_DWORD *)v49 == 2)
      WTF::StringImpl::destroy(v49, v4);
    else
      *(_DWORD *)v49 -= 2;
  }
  v50 = *((_QWORD *)v3 + 1);
  *((_QWORD *)v3 + 1) = 0;
  if (v50)
  {
    do
    {
      v51 = __ldaxr((unsigned int *)v50);
      v52 = v51 - 1;
    }
    while (__stlxr(v52, (unsigned int *)v50));
    if (!v52)
    {
      atomic_store(1u, (unsigned int *)v50);
      v80 = *(unsigned int *)(v50 + 28);
      if ((_DWORD)v80)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v50 + 16), (WTF::StringImpl *)(*(_QWORD *)(v50 + 16) + 32 * v80));
      v81 = *(WTF **)(v50 + 16);
      if (v81)
      {
        *(_QWORD *)(v50 + 16) = 0;
        *(_DWORD *)(v50 + 24) = 0;
        WTF::fastFree(v81, v4);
      }
      WTF::fastFree((WTF *)v50, v4);
    }
  }
  if (*(_QWORD *)v3)
  {
    *(_QWORD *)(*(_QWORD *)v3 + 8) = 0;
    v53 = *(unsigned int **)v3;
    *(_QWORD *)v3 = 0;
    if (v53)
    {
      do
      {
        v54 = __ldaxr(v53);
        v55 = v54 - 1;
      }
      while (__stlxr(v55, v53));
      if (!v55)
      {
        atomic_store(1u, v53);
        WTF::fastFree((WTF *)v53, v4);
      }
    }
  }
  else
  {
    *(_QWORD *)v3 = 0;
  }
  WTF::fastFree(v3, v4);
LABEL_117:
  *(_QWORD *)this = off_1E33B31D0;
  v56 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
      WTF::StringImpl::destroy(v56, a2);
    else
      *(_DWORD *)v56 -= 2;
  }
  v57 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  *(_QWORD *)this = off_1E33B3CE0;
  v58 = *((_QWORD *)this + 1);
  if (v58 && *(_QWORD *)(v58 + 8))
  {
    __break(0xC471u);
    JUMPOUT(0x195CCEDB0);
  }
  v59 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v59)
  {
    do
    {
      v60 = __ldaxr((unsigned int *)v59);
      v61 = v60 - 1;
    }
    while (__stlxr(v61, (unsigned int *)v59));
    if (!v61)
    {
      atomic_store(1u, (unsigned int *)v59);
      v74 = *(unsigned int *)(v59 + 28);
      if ((_DWORD)v74)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v59 + 16), (WTF::StringImpl *)(*(_QWORD *)(v59 + 16) + 32 * v74));
      v75 = *(WTF **)(v59 + 16);
      if (v75)
      {
        *(_QWORD *)(v59 + 16) = 0;
        *(_DWORD *)(v59 + 24) = 0;
        WTF::fastFree(v75, a2);
      }
      WTF::fastFree((WTF *)v59, a2);
    }
  }
  v62 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v62)
  {
    do
    {
      v63 = __ldaxr((unsigned int *)v62);
      v64 = v63 - 1;
    }
    while (__stlxr(v64, (unsigned int *)v62));
    if (!v64)
    {
      atomic_store(1u, (unsigned int *)v62);
      v76 = *(unsigned int *)(v62 + 28);
      if ((_DWORD)v76)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v62 + 16), (WTF::StringImpl *)(*(_QWORD *)(v62 + 16) + 32 * v76));
      v77 = *(WTF **)(v62 + 16);
      if (v77)
      {
        *(_QWORD *)(v62 + 16) = 0;
        *(_DWORD *)(v62 + 24) = 0;
        WTF::fastFree(v77, a2);
      }
      WTF::fastFree((WTF *)v62, a2);
    }
  }
}

uint64_t WebCore::ValidatedFormListedElement::computeWillValidate(WebCore::ValidatedFormListedElement *this)
{
  char v2;
  uint64_t v3;
  int v4;

  v2 = *((_BYTE *)this + 50);
  if ((v2 & 3) == 2)
  {
    v3 = (*(uint64_t (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)this + 24))(this);
    v4 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 8) + 3288);
    if (v4)
      LOBYTE(v4) = WebCore::ancestorsOfType<WebCore::HTMLDataListElement>(v3) != 0;
    v2 = *((_BYTE *)this + 50) & 0xFC | v4;
    *((_BYTE *)this + 50) = v2;
  }
  if ((v2 & 3) != 0)
    return 0;
  if ((*((_BYTE *)this + 48) & 0x38) == 0)
    return 1;
  if ((*((_BYTE *)this + 48) & 0x18) != 0)
    return 0;
  if ((*((_BYTE *)this + 48) & 0x20) == 0)
    return 1;
  return (*(unsigned int (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)this + 344))(this) ^ 1;
}

uint64_t WebCore::ancestorsOfType<WebCore::HTMLDataListElement>(uint64_t a1)
{
  uint64_t result;
  __int16 v2;

  result = *(_QWORD *)(a1 + 32);
  if (result)
  {
    v2 = *(_WORD *)(result + 28);
    if ((v2 & 8) != 0)
    {
      while ((v2 & 0x10) == 0
           || (v2 & 0x110) == 0x110
           || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::datalistTag + 24))
      {
        result = *(_QWORD *)(result + 32);
        if (!result)
          break;
        v2 = *(_WORD *)(result + 28);
        if ((v2 & 8) == 0)
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::ValidatedFormListedElement::updateVisibleValidationMessage(_QWORD *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  WebCore::ValidationMessage *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  void *v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t StatusReg;
  unsigned int *v73;
  unsigned int v74;
  _QWORD *v75;
  WebCore::Element *(*v76)(WebCore::ValidationMessage *);
  WTF::MonotonicTime *v77;
  double v78;
  int v79;
  BOOL v80;
  int v81;
  int v82;
  WTF::StringImpl *v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  WTF *v86;
  uint64_t v87;
  WTF *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;

  result = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 528);
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 24);
      if (v7)
      {
        if (*(_QWORD *)(v7 + 8))
        {
          if ((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) == 0)
            goto LABEL_11;
          if ((*(_BYTE *)((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195CCF778);
          }
          if ((*(unsigned int (**)(_QWORD *))(*a1 + 272))(a1))
          {
            (*(void (**)(WTF::StringImpl **__return_ptr, _QWORD *))(*a1 + 216))(&v89, a1);
            WTF::String::trim();
            v9 = v89;
            v10 = (uint64_t)v90;
            v89 = 0;
            v90 = 0;
            if (v9)
            {
              if (*(_DWORD *)v9 == 2)
                WTF::StringImpl::destroy(v9, v8);
              else
                *(_DWORD *)v9 -= 2;
            }
          }
          else
          {
LABEL_11:
            v10 = 0;
          }
          v11 = a1[5];
          if (!v11)
          {
            v11 = WTF::fastMalloc((WTF *)0x38);
            v12 = *a2;
            *(_QWORD *)v11 = 0;
            v13 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v12);
            if (v13)
            {
              do
                v14 = __ldaxr(v13);
              while (__stlxr(v14 + 1, v13));
            }
            *(_QWORD *)(v11 + 8) = v13;
            *(_OWORD *)(v11 + 16) = 0u;
            *(_OWORD *)(v11 + 32) = 0u;
            *(_QWORD *)(v11 + 48) = 0;
            v15 = (WebCore::ValidationMessage *)a1[5];
            a1[5] = v11;
            if (v15)
            {
              v16 = *(WTF::StringImpl **)(*((_QWORD *)v15 + 1) + 8);
              v17 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v16 + 5) + 8) + 528);
              if (v17
                && (v18 = *(_QWORD *)(v17 + 8)) != 0
                && (v19 = *(_QWORD *)(v18 + 24)) != 0
                && (v20 = *(_QWORD *)(v19 + 8)) != 0
                && (v21 = *(_QWORD *)(v20 + 232)) != 0)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
              }
              else
              {
                WebCore::ValidationMessage::deleteBubbleTree(v15, v16);
              }
              v23 = *((_QWORD *)v15 + 6);
              *((_QWORD *)v15 + 6) = 0;
              if (v23)
              {
                if (*(_DWORD *)(v23 + 24) == 2)
                {
                  if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v23);
                }
                else
                {
                  *(_DWORD *)(v23 + 24) -= 2;
                }
              }
              v24 = *((_QWORD *)v15 + 5);
              *((_QWORD *)v15 + 5) = 0;
              if (v24)
              {
                if (*(_DWORD *)(v24 + 24) == 2)
                {
                  if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v24);
                }
                else
                {
                  *(_DWORD *)(v24 + 24) -= 2;
                }
              }
              v25 = *((_QWORD *)v15 + 4);
              *((_QWORD *)v15 + 4) = 0;
              if (v25)
              {
                if (*(_DWORD *)(v25 + 24) == 2)
                {
                  if ((*(_WORD *)(v25 + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)v25);
                }
                else
                {
                  *(_DWORD *)(v25 + 24) -= 2;
                }
              }
              v26 = *((_QWORD *)v15 + 3);
              *((_QWORD *)v15 + 3) = 0;
              if (v26)
                (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
              v27 = (WTF::StringImpl *)*((_QWORD *)v15 + 2);
              *((_QWORD *)v15 + 2) = 0;
              if (v27)
              {
                if (*(_DWORD *)v27 == 2)
                  WTF::StringImpl::destroy(v27, v22);
                else
                  *(_DWORD *)v27 -= 2;
              }
              v28 = *((_QWORD *)v15 + 1);
              *((_QWORD *)v15 + 1) = 0;
              if (v28)
              {
                do
                {
                  v29 = __ldaxr((unsigned int *)v28);
                  v30 = v29 - 1;
                }
                while (__stlxr(v30, (unsigned int *)v28));
                if (!v30)
                {
                  atomic_store(1u, (unsigned int *)v28);
                  v85 = *(unsigned int *)(v28 + 28);
                  if ((_DWORD)v85)
                    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v28 + 16), (WTF::StringImpl *)(*(_QWORD *)(v28 + 16) + 32 * v85));
                  v86 = *(WTF **)(v28 + 16);
                  if (v86)
                  {
                    *(_QWORD *)(v28 + 16) = 0;
                    *(_DWORD *)(v28 + 24) = 0;
                    WTF::fastFree(v86, v22);
                  }
                  WTF::fastFree((WTF *)v28, v22);
                }
              }
              if (*(_QWORD *)v15)
              {
                *(_QWORD *)(*(_QWORD *)v15 + 8) = 0;
                v31 = *(unsigned int **)v15;
                *(_QWORD *)v15 = 0;
                if (v31)
                {
                  do
                  {
                    v32 = __ldaxr(v31);
                    v33 = v32 - 1;
                  }
                  while (__stlxr(v33, v31));
                  if (!v33)
                  {
                    atomic_store(1u, v31);
                    WTF::fastFree((WTF *)v31, v22);
                  }
                }
              }
              else
              {
                *(_QWORD *)v15 = 0;
              }
              WTF::fastFree(v15, v22);
              v11 = a1[5];
            }
          }
          v34 = *a2;
          v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 8) + 40) + 8) + 528);
          if (v35
            && (v36 = *(_QWORD *)(v35 + 8)) != 0
            && (v37 = *(_QWORD *)(v36 + 24)) != 0
            && (v38 = *(_QWORD *)(v37 + 8)) != 0
            && (v39 = *(_QWORD *)(v38 + 232)) != 0)
          {
            if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 40))(v39) & 1) != 0)
              goto LABEL_67;
          }
          else
          {
            v40 = *(_QWORD *)(v11 + 16);
            if (v40 && *(_DWORD *)(v40 + 4))
            {
LABEL_67:
              result = WebCore::ValidationMessage::requestToHideMessage((WebCore::ValidationMessage *)v11);
              if (!v10)
                return result;
              goto LABEL_102;
            }
          }
          if (v10)
            *(_DWORD *)v10 += 2;
          v90 = (WTF::StringImpl *)v10;
          v41 = *(_QWORD *)(*(_QWORD *)(v11 + 8) + 8);
          v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v41 + 40) + 8) + 528);
          if (v42
            && (v43 = *(_QWORD *)(v42 + 8)) != 0
            && (v44 = *(_QWORD *)(v43 + 24)) != 0
            && (v45 = *(_QWORD *)(v44 + 8)) != 0)
          {
            if (!v10 || *(_QWORD *)(v45 + 232))
              goto LABEL_84;
          }
          else if (!v10)
          {
            v46 = 0;
            goto LABEL_97;
          }
          v48 = *(_DWORD *)(v10 + 4);
          v46 = (WTF::StringImpl *)v10;
          if (!v48)
            goto LABEL_85;
          v49 = *(_QWORD *)(v41 + 104);
          if (v49)
          {
            v50 = *(_DWORD *)(v49 + 4);
            if ((v50 & 1) != 0)
            {
              v51 = *(_QWORD *)(v49 + 40);
              LODWORD(v52) = *(_DWORD *)(v49 + 52);
              if ((_DWORD)v52)
              {
LABEL_73:
                v52 = v52;
                v53 = (uint64_t *)(v51 + 8);
                while (1)
                {
                  v54 = *(v53 - 1);
                  if (v54 == WebCore::HTMLNames::titleAttr
                    || *(_QWORD *)(v54 + 24) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 24)
                    && *(_QWORD *)(v54 + 32) == *(_QWORD *)(WebCore::HTMLNames::titleAttr + 32))
                  {
                    break;
                  }
                  v53 += 2;
                  if (!--v52)
                  {
                    v53 = (uint64_t *)MEMORY[0x1E0CBF2F8];
                    break;
                  }
                }
LABEL_83:
                v55 = *v53;
                if (*v53)
                {
                  v79 = *(_DWORD *)(v55 + 4);
                  if (v79)
                  {
                    *(_DWORD *)v10 += 2;
                    *(_DWORD *)v55 += 2;
                    if (v79 < 0 || (v80 = __OFADD__(v79, 1), v81 = v79 + 1, v80) || v48 < 0 || __OFADD__(v48, v81))
                    {
                      v89 = 0;
                    }
                    else
                    {
                      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
                        v82 = (*(unsigned __int8 *)(v55 + 16) >> 2) & 1;
                      else
                        v82 = 0;
                      WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>,WTF::StringTypeAdapter<WTF::AtomString,void>>((v48 + v81), v82, v10, 10, v55, &v89);
                      v46 = v89;
                      if (v89)
                      {
                        v89 = 0;
                        v90 = v46;
                        if (*(_DWORD *)v10 == 2)
                        {
                          WTF::StringImpl::destroy((WTF::StringImpl *)v10, v83);
                          v84 = v89;
                          v89 = 0;
                          if (v84)
                          {
                            if (*(_DWORD *)v84 == 2)
                              WTF::StringImpl::destroy(v84, v83);
                            else
                              *(_DWORD *)v84 -= 2;
                          }
                        }
                        else
                        {
                          *(_DWORD *)v10 -= 2;
                          v89 = 0;
                        }
                        if (*(_DWORD *)v55 == 2)
                          WTF::StringImpl::destroy((WTF::StringImpl *)v55, v83);
                        else
                          *(_DWORD *)v55 -= 2;
                        if (*(_DWORD *)v10 == 2)
                          WTF::StringImpl::destroy((WTF::StringImpl *)v10, v83);
                        else
                          *(_DWORD *)v10 -= 2;
LABEL_85:
                        if (*((_DWORD *)v46 + 1))
                        {
                          v56 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>(v34);
                          if (v56)
                          {
                            do
                              v58 = __ldaxr(v56);
                            while (__stlxr(v58 + 1, v56));
                          }
                          v59 = *(_QWORD *)(v11 + 8);
                          *(_QWORD *)(v11 + 8) = v56;
                          if (v59)
                          {
                            do
                            {
                              v60 = __ldaxr((unsigned int *)v59);
                              v61 = v60 - 1;
                            }
                            while (__stlxr(v61, (unsigned int *)v59));
                            if (!v61)
                            {
                              atomic_store(1u, (unsigned int *)v59);
                              v87 = *(unsigned int *)(v59 + 28);
                              if ((_DWORD)v87)
                                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v59 + 16), (WTF::StringImpl *)(*(_QWORD *)(v59 + 16) + 32 * v87));
                              v88 = *(WTF **)(v59 + 16);
                              if (v88)
                              {
                                *(_QWORD *)(v59 + 16) = 0;
                                *(_DWORD *)(v59 + 24) = 0;
                                WTF::fastFree(v88, v57);
                              }
                              WTF::fastFree((WTF *)v59, v57);
                            }
                          }
                          v62 = *(WTF::StringImpl **)(*(_QWORD *)(v11 + 8) + 8);
                          v63 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v62 + 5) + 8) + 528);
                          if (v63
                            && (v64 = *(_QWORD *)(v63 + 8)) != 0
                            && (v65 = *(_QWORD *)(v64 + 24)) != 0
                            && (v66 = *(_QWORD *)(v65 + 8)) != 0
                            && (v67 = *(_QWORD *)(v66 + 232)) != 0)
                          {
                            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v67 + 16))(v67);
                          }
                          else
                          {
                            v68 = v90;
                            if (v90)
                              *(_DWORD *)v90 += 2;
                            v69 = *(WTF::StringImpl **)(v11 + 16);
                            *(_QWORD *)(v11 + 16) = v68;
                            if (v69)
                            {
                              if (*(_DWORD *)v69 == 2)
                                WTF::StringImpl::destroy(v69, v62);
                              else
                                *(_DWORD *)v69 -= 2;
                            }
                            v70 = *(_QWORD *)(v11 + 32);
                            v71 = WTF::fastMalloc((WTF *)0x38);
                            *(_QWORD *)v71 = off_1E3407128;
                            StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
                            *(_OWORD *)(v71 + 8) = 0u;
                            *(_OWORD *)(v71 + 24) = 0u;
                            v73 = *(unsigned int **)(StatusReg + 736);
                            if (!v73)
                              v73 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
                            do
                              v74 = __ldaxr(v73);
                            while (__stlxr(v74 + 1, v73));
                            *(_QWORD *)(v71 + 40) = v73;
                            *(_QWORD *)v71 = off_1E31F7378;
                            v75 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
                            *v75 = off_1E33DBD60;
                            if (v70)
                              v76 = (WebCore::Element *(*)(WebCore::ValidationMessage *))WebCore::ValidationMessage::setMessageDOMAndStartTimer;
                            else
                              v76 = WebCore::ValidationMessage::buildBubbleTree;
                            v75[1] = v76;
                            v75[2] = 0;
                            v75[3] = v11;
                            *(_QWORD *)(v71 + 48) = v75;
                            v77 = *(WTF::MonotonicTime **)(v11 + 24);
                            *(_QWORD *)(v11 + 24) = v71;
                            if (v77)
                            {
                              v77 = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)v77 + 8))(v77);
                              v71 = *(_QWORD *)(v11 + 24);
                            }
                            *(_QWORD *)(v71 + 24) = 0;
                            WTF::MonotonicTime::now(v77);
                            result = WebCore::TimerBase::setNextFireTime(v71, v78 + 0.0);
                          }
                          v46 = v90;
                          goto LABEL_98;
                        }
LABEL_97:
                        result = WebCore::ValidationMessage::requestToHideMessage((WebCore::ValidationMessage *)v11);
LABEL_98:
                        v90 = 0;
                        if (v46)
                        {
                          if (*(_DWORD *)v46 == 2)
                          {
                            result = WTF::StringImpl::destroy(v46, v47);
                            if (!v10)
                              return result;
                            goto LABEL_102;
                          }
                          *(_DWORD *)v46 -= 2;
                        }
                        if (!v10)
                          return result;
LABEL_102:
                        if (*(_DWORD *)v10 == 2)
                          return WTF::StringImpl::destroy((WTF::StringImpl *)v10, v47);
                        *(_DWORD *)v10 -= 2;
                        return result;
                      }
                    }
                    __break(0xC471u);
                    JUMPOUT(0x195CCF7FCLL);
                  }
                }
LABEL_84:
                v46 = (WTF::StringImpl *)v10;
                if (!v10)
                  goto LABEL_97;
                goto LABEL_85;
              }
            }
            else
            {
              v51 = v49 + 32;
              LODWORD(v52) = v50 >> 5;
              if ((_DWORD)v52)
                goto LABEL_73;
            }
          }
          v53 = (uint64_t *)MEMORY[0x1E0CBF2F8];
          goto LABEL_83;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::ValidationMessage::requestToHideMessage(WebCore::ValidationMessage *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t StatusReg;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  WTF::MonotonicTime *v13;
  double v14;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 40) + 8) + 528);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          v6 = *(_QWORD *)(v5 + 232);
          if (v6)
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
        }
      }
    }
  }
  v8 = WTF::fastMalloc((WTF *)0x38);
  *(_QWORD *)v8 = off_1E3407128;
  StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
  *(_OWORD *)(v8 + 8) = 0u;
  *(_OWORD *)(v8 + 24) = 0u;
  v10 = *(unsigned int **)(StatusReg + 736);
  if (!v10)
    v10 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + 1, v10));
  *(_QWORD *)(v8 + 40) = v10;
  *(_QWORD *)v8 = off_1E31F7378;
  v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
  *v12 = off_1E33DBD60;
  v12[1] = WebCore::ValidationMessage::deleteBubbleTree;
  v12[2] = 0;
  v12[3] = this;
  *(_QWORD *)(v8 + 48) = v12;
  v13 = (WTF::MonotonicTime *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = v8;
  if (v13)
  {
    v13 = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)v13 + 8))(v13);
    v8 = *((_QWORD *)this + 3);
  }
  *(_QWORD *)(v8 + 24) = 0;
  WTF::MonotonicTime::now(v13);
  return WebCore::TimerBase::setNextFireTime(v8, v14 + 0.0);
}

uint64_t WebCore::ValidatedFormListedElement::checkValidity(_BYTE *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _BOOL4 v13;
  _DWORD *v14;
  uint64_t result;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  _QWORD *v27;

  if (!(*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 272))(a1) || (a1[48] & 1) != 0)
    return 1;
  v4 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 16))(a1);
  v5 = v4;
  *(_DWORD *)(v4 + 24) += 2;
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 8);
  *(_DWORD *)(v6 + 24) += 2;
  v7 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 96)) == 0)
    v8 = WebCore::threadGlobalDataSlow((WebCore *)v4);
  v9 = *(_QWORD *)(v8 + 40);
  if (!v9)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v8);
    v9 = *(_QWORD *)(v8 + 40);
  }
  v10 = bmalloc::api::isoAllocate();
  WTF::MonotonicTime::now((WTF::MonotonicTime *)v10);
  *(_QWORD *)v10 = off_1E33A4B48;
  *(_QWORD *)(v10 + 8) = 0;
  v12 = *(_DWORD *)(v10 + 20) & 0xFFC00000 | 0x1E8204;
  v13 = *(_QWORD *)(v9 + 1032) != 0;
  *(_DWORD *)(v10 + 16) = 1;
  *(_DWORD *)(v10 + 20) = v12 | v13;
  v14 = *(_DWORD **)(v9 + 1032);
  if (v14)
    *v14 += 2;
  *(_QWORD *)(v10 + 24) = v14;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = 0;
  *(_QWORD *)(v10 + 48) = 0;
  *(_QWORD *)(v10 + 56) = v11;
  *(_QWORD *)(v10 + 64) = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, v10);
  if (a2
    && (*(_DWORD *)(v10 + 20) & 0x40) == 0
    && (*(_BYTE *)(v5 + 22) & 8) != 0
    && v6 == *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8))
  {
    v17 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v17 == *(_DWORD *)(a2 + 8))
    {
      v18 = v17 + (v17 >> 2);
      if (v18 >= 0x10)
        v19 = v18 + 1;
      else
        v19 = 16;
      if (v19 <= v17 + 1)
        v20 = v17 + 1;
      else
        v20 = v19;
      if (v20 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v21 = *(_QWORD **)a2;
      v22 = (void *)WTF::fastMalloc((WTF *)(8 * v20));
      *(_DWORD *)(a2 + 8) = v20;
      *(_QWORD *)a2 = v22;
      memcpy(v22, v21, 8 * v17);
      if (v21)
      {
        if (*(_QWORD **)a2 == v21)
        {
          *(_QWORD *)a2 = 0;
          *(_DWORD *)(a2 + 8) = 0;
        }
        WTF::fastFree((WTF *)v21, v23);
      }
      v24 = *(unsigned int *)(a2 + 12);
      v25 = *(_QWORD **)a2;
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 88))(a1);
      v26 = *(_DWORD *)(a2 + 12);
      v25[v24] = a1;
    }
    else
    {
      v27 = *(_QWORD **)a2;
      (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 88))(a1);
      v27[v17] = a1;
      v26 = *(_DWORD *)(a2 + 12);
    }
    *(_DWORD *)(a2 + 12) = v26 + 1;
  }
  if (*(_DWORD *)(v10 + 16) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  else
    --*(_DWORD *)(v10 + 16);
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v16);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v16);
    return 0;
  }
  else
  {
    result = 0;
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::ValidatedFormListedElement::reportValidity(WebCore::ValidatedFormListedElement *this)
{
  void *v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  int v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  WebCore::HTMLElement *v16;
  WTF *v17;
  uint64_t v18;

  v17 = 0;
  v18 = 0;
  v3 = WebCore::ValidatedFormListedElement::checkValidity(this, (uint64_t)&v17);
  v4 = HIDWORD(v18);
  if ((v3 & 1) == 0 && HIDWORD(v18))
  {
    v5 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)this
                                                                                                  + 16))(this)
                               + 40)
                   + 8);
    *(_DWORD *)(v5 + 24) += 2;
    WebCore::Document::updateLayout(v5, 2u, 0);
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v6);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
    v7 = (*(uint64_t (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)this + 368))(this);
    if (v7)
    {
      v9 = v7;
      v10 = *(_DWORD *)(v7 + 24);
      *(_DWORD *)(v7 + 24) = v10 + 2;
      if ((*(_BYTE *)(v7 + 22) & 8) != 0)
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 552))(v7) & 1) != 0)
        {
          v16 = (WebCore::HTMLElement *)v9;
          WebCore::ValidatedFormListedElement::focusAndShowValidationMessage(this, &v16);
          if (*(_DWORD *)(v9 + 24) == 2)
          {
            if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v9, v2);
          }
          else
          {
            *(_DWORD *)(v9 + 24) -= 2;
          }
          goto LABEL_14;
        }
        v10 = *(_DWORD *)(v9 + 24) - 2;
      }
      if (v10)
      {
        *(_DWORD *)(v9 + 24) = v10;
      }
      else if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v9, v8);
      }
    }
    WebCore::ValidatedFormListedElement::reportNonFocusableControlError(this);
LABEL_14:
    v4 = HIDWORD(v18);
  }
  if (v4)
  {
    v11 = v17;
    v12 = 8 * v4;
    do
    {
      v13 = *(_QWORD *)v11;
      *(_QWORD *)v11 = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 96))(v13);
      v11 = (WTF *)((char *)v11 + 8);
      v12 -= 8;
    }
    while (v12);
  }
  v14 = v17;
  if (v17)
  {
    v17 = 0;
    LODWORD(v18) = 0;
    WTF::fastFree(v14, v2);
  }
  return v3;
}

uint64_t WebCore::ValidatedFormListedElement::focusableValidationAnchorElement@<X0>(WebCore::ValidatedFormListedElement *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  int v5;

  result = (*(uint64_t (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)this + 368))(this);
  if (result)
  {
    v4 = result;
    v5 = *(_DWORD *)(result + 24);
    *(_DWORD *)(result + 24) = v5 + 2;
    *a2 = result;
    if ((*(_BYTE *)(result + 22) & 8) != 0)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 552))(result);
      if ((result & 1) != 0)
        return result;
      v5 = *(_DWORD *)(v4 + 24) - 2;
    }
    if (v5)
    {
      *(_DWORD *)(v4 + 24) = v5;
    }
    else if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
    {
      result = WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
  }
  *a2 = 0;
  return result;
}

uint64_t WebCore::ValidatedFormListedElement::focusAndShowValidationMessage(WebCore::ValidatedFormListedElement *a1, WebCore::HTMLElement **a2)
{
  char v4;
  WebCore::HTMLElement *v5;
  WebCore::HTMLElement *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::Page *v10;
  WTF *v12;
  void *v13;
  int v14;
  __int16 v15;

  (*(void (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)a1 + 88))(a1);
  v4 = *((_BYTE *)a1 + 49);
  *((_BYTE *)a1 + 49) = 1;
  v5 = *a2;
  v15 = 0;
  v14 = 0;
  (*(void (**)(WebCore::HTMLElement *, int *))(*(_QWORD *)v5 + 656))(v5, &v14);
  v6 = *a2;
  v7 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*a2 + 5) + 8) + 528);
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 24);
      if (v9)
      {
        v10 = *(WebCore::Page **)(v9 + 8);
        if (v10)
        {
          ++*(_DWORD *)v10;
          WebCore::Page::scheduleValidationMessageUpdate(v10, a1, v6);
          if (*(_DWORD *)v10 == 1)
          {
            WebCore::Page::~Page((uint64_t)v10);
            WTF::fastFree(v12, v13);
          }
          else
          {
            --*(_DWORD *)v10;
          }
        }
      }
    }
  }
  *((_BYTE *)a1 + 49) = v4;
  return (*(uint64_t (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)a1 + 96))(a1);
}

WTF::StringImpl *WebCore::ValidatedFormListedElement::reportNonFocusableControlError(WebCore::ValidatedFormListedElement *this)
{
  WTF::StringImpl *result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  _BYTE *v11;
  int8x16_t *v12;
  size_t v13;
  _BYTE *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  unsigned __int128 *v17;
  unsigned __int128 *v18;
  unsigned __int128 v19;
  __int8 v20;
  _WORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  char *v30;
  char *v31;
  char *v32;
  __int16 v33;
  _WORD *v34;
  WTF::StringImpl *v35;
  int8x16x2_t v36;
  int8x16x2_t v37;
  int8x16x2_t v38;

  result = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)this + 16))(this);
  v3 = *(_QWORD **)(*((_QWORD *)result + 5) + 8);
  v4 = v3[66];
  if (!v4 || !*(_QWORD *)(v4 + 8))
    return result;
  v5 = *(_QWORD *)(*(uint64_t (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)this + 128))(this);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 + 4);
    *(_DWORD *)v5 += 2;
    if (v6 < 0)
      goto LABEL_40;
  }
  else
  {
    v6 = 0;
  }
  v7 = __OFADD__(v6, 19);
  v8 = v6 + 19;
  if (v7 || (v9 = (v8 + 35), __OFADD__(v8, 35)))
  {
LABEL_40:
    __break(0xC471u);
    JUMPOUT(0x195CD01BCLL);
  }
  if (!v5)
  {
    WTF::tryFastCompactMalloc((WTF *)(v9 + 20));
    v16 = v35;
    if (v35)
    {
      *(_OWORD *)((char *)v35 + 20) = *(_OWORD *)"An invalid form control with name='";
      *(_DWORD *)v16 = 2;
      *((_DWORD *)v16 + 1) = v9;
      *((_QWORD *)v16 + 1) = (char *)v16 + 20;
      *((_DWORD *)v16 + 4) = 4;
      qmemcpy((char *)v16 + 36, "control with name='' is not focusable.", 38);
      v35 = v16;
      goto LABEL_17;
    }
    goto LABEL_40;
  }
  if ((*(_BYTE *)(v5 + 16) & 4) == 0)
  {
    if (v9 <= 0x7FFFFFEF)
    {
      WTF::tryFastCompactMalloc((WTF *)(2 * (v8 + 35) + 20));
      v10 = v35;
      if (v35)
      {
        *(_DWORD *)v35 = 2;
        *((_DWORD *)v10 + 1) = v9;
        *(_OWORD *)((char *)v10 + 20) = xmmword_1969F13D0;
        *((_QWORD *)v10 + 1) = (char *)v10 + 20;
        *((_DWORD *)v10 + 4) = 0;
        v21 = (_WORD *)((char *)v10 + 90);
        *(_OWORD *)((char *)v10 + 36) = xmmword_1969F13E0;
        *(_OWORD *)((char *)v10 + 52) = xmmword_1969F13F0;
        *(_OWORD *)((char *)v10 + 68) = xmmword_1969F1400;
        *((_DWORD *)v10 + 21) = 3997797;
        *((_WORD *)v10 + 44) = 39;
        v12 = *(int8x16_t **)(v5 + 8);
        v22 = *(unsigned int *)(v5 + 4);
        if ((*(_BYTE *)(v5 + 16) & 4) != 0)
        {
          v23 = (char *)&v21[v22];
          if (v22 >= 0x40)
          {
            v24 = (char *)&v21[v22 & 0xFFFFFFC0];
            v25 = 0uLL;
            v26 = (char *)v10 + 90;
            do
            {
              v36.val[0] = *v12;
              v27 = v12[1];
              v37.val[0] = v12[2];
              v28 = v12[3];
              v12 += 4;
              v29 = v28;
              v37.val[1] = 0uLL;
              v38.val[0] = v27;
              v36.val[1] = 0uLL;
              v30 = v26;
              vst2q_s8(v30, v36);
              v30 += 32;
              v38.val[1] = 0uLL;
              vst2q_s8(v30, v38);
              v31 = v26 + 64;
              vst2q_s8(v31, v37);
              v32 = v26 + 96;
              vst2q_s8(v32, *(int8x16x2_t *)(&v25 - 1));
              v26 += 128;
            }
            while (v26 != v24);
          }
          else
          {
            v24 = (char *)v10 + 90;
          }
          while (v24 != v23)
          {
            v33 = v12->u8[0];
            v12 = (int8x16_t *)((char *)v12 + 1);
            *(_WORD *)v24 = v33;
            v24 += 2;
          }
        }
        else if ((_DWORD)v22 == 1)
        {
          *v21 = v12->i16[0];
        }
        else if ((_DWORD)v22)
        {
          memcpy((char *)v10 + 90, v12, 2 * v22);
        }
        v34 = &v21[*(unsigned int *)(v5 + 4)];
        *(_OWORD *)v34 = xmmword_1969F1410;
        *((_OWORD *)v34 + 1) = xmmword_1969F1420;
        *((_DWORD *)v34 + 8) = 6619244;
        v34[18] = 46;
        goto LABEL_15;
      }
    }
    goto LABEL_40;
  }
  WTF::tryFastCompactMalloc((WTF *)(v9 + 20));
  v10 = v35;
  if (!v35)
    goto LABEL_40;
  *(_OWORD *)((char *)v35 + 20) = *(_OWORD *)"An invalid form control with name='";
  *(_DWORD *)v10 = 2;
  *((_DWORD *)v10 + 1) = v9;
  *((_QWORD *)v10 + 1) = (char *)v10 + 20;
  *((_DWORD *)v10 + 4) = 4;
  *(_DWORD *)((char *)v10 + 51) = 658335085;
  *(_OWORD *)((char *)v10 + 36) = *(_OWORD *)"control with name='";
  v11 = (char *)v10 + 55;
  v12 = *(int8x16_t **)(v5 + 8);
  v13 = *(unsigned int *)(v5 + 4);
  if ((*(_BYTE *)(v5 + 16) & 4) != 0)
  {
    if ((_DWORD)v13)
    {
      if ((_DWORD)v13 == 1)
        *v11 = v12->i8[0];
      else
        memcpy((char *)v10 + 55, v12, v13);
    }
  }
  else
  {
    if (v13 < 0x10)
    {
      v17 = (unsigned __int128 *)((char *)v10 + 55);
    }
    else
    {
      v17 = (unsigned __int128 *)&v11[v13 & 0xFFFFFFF0];
      v18 = (unsigned __int128 *)((char *)v10 + 55);
      do
      {
        v19 = (unsigned __int128)vld2q_s8(v12->i8);
        v12 += 2;
        *v18++ = v19;
      }
      while (v18 != v17);
    }
    while (v17 != (unsigned __int128 *)&v11[v13])
    {
      v20 = v12->i8[0];
      v12 = (int8x16_t *)((char *)v12 + 2);
      *(_BYTE *)v17 = v20;
      v17 = (unsigned __int128 *)((char *)v17 + 1);
    }
  }
  v14 = &v11[*(unsigned int *)(v5 + 4)];
  *(_OWORD *)v14 = *(_OWORD *)"' is not focusable.";
  *(_DWORD *)(v14 + 15) = 778398818;
LABEL_15:
  v35 = v10;
  if (*(_DWORD *)v5 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, (WTF::StringImpl *)v12);
  else
    *(_DWORD *)v5 -= 2;
LABEL_17:
  WebCore::Document::addConsoleMessage(v3, 6, 2, &v35, 0);
  result = v35;
  v35 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v15);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::ValidationMessage::isVisible(WebCore::ValidationMessage *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 40) + 8) + 528);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      if (v3)
      {
        v4 = *(_QWORD *)(v3 + 8);
        if (v4)
        {
          v5 = *(_QWORD *)(v4 + 232);
          if (v5)
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
        }
      }
    }
  }
  v7 = *((_QWORD *)this + 2);
  return v7 && *(_DWORD *)(v7 + 4) != 0;
}

BOOL WebCore::ValidationMessage::shadowTreeContains(WebCore::ValidationMessage *this, const WebCore::Node *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 40) + 8) + 528);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 24);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          if (*(_QWORD *)(v5 + 232))
            return 0;
        }
      }
    }
  }
  v6 = *((_QWORD *)this + 4);
  return v6 && *(_QWORD *)(v6 + 40) == *((_QWORD *)a2 + 5);
}

uint64_t WebCore::ValidatedFormListedElement::isFocusingWithValidationMessage(WebCore::ValidatedFormListedElement *this)
{
  return *((unsigned __int8 *)this + 49);
}

_BYTE *WebCore::ValidatedFormListedElement::setDisabledInternal(_BYTE *this, int a2, int a3)
{
  char v3;
  char v4;
  char v5;
  char v6;
  _BYTE *v7;
  char v10;
  void *v11;
  char v12;
  char v13;
  void *v14;
  _BYTE v15[4];
  _BYTE v16[8];
  uint64_t v17;
  _BYTE *v18;
  unsigned __int8 *v19;
  char v20;
  unsigned __int8 *v21[2];

  v3 = this[48];
  v16[0] = 0;
  v20 = 0;
  if ((((a2 | a3) ^ ((v3 & 0x18) != 0)) & 1) != 0)
  {
    v7 = this;
    v10 = a2 | a3;
    v11 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)this + 16))();
    v15[0] = 22;
    v15[1] = v10;
    v15[2] = 25;
    v15[3] = v10 ^ 1;
    v21[0] = v15;
    v21[1] = (unsigned __int8 *)2;
    std::optional<WebCore::Style::PseudoClassChangeInvalidation>::emplace[abi:sn180100]<WebCore::Element &,std::initializer_list<std::pair<WebCore::CSSSelectorPseudoClass,BOOL>> &,void>((uint64_t)v16, v11, v21);
    if (a2)
      v12 = 8;
    else
      v12 = 0;
    if (a3)
      v13 = 16;
    else
      v13 = 0;
    v7[48] = v13 | v12 | v7[48] & 0xE7;
    this = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v7 + 352))(v7);
    if (v20)
    {
      if (v16[0])
        WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v17, &v19);
      if (v19)
        WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v19, v14);
      this = v18;
      if (v18)
        return (_BYTE *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v18, v14);
    }
  }
  else
  {
    if (a2)
      v4 = 8;
    else
      v4 = 0;
    v5 = v3 & 0xE7;
    if (a3)
      v6 = 16;
    else
      v6 = 0;
    this[48] = v6 | v4 | v5;
  }
  return this;
}

const WebCore::HTMLElement *WebCore::removeInvalidElementToAncestorFromInsertionPoint(const WebCore::HTMLElement *this, const WebCore::HTMLElement *a2, WebCore::ContainerNode *a3)
{
  const WebCore::HTMLElement *v3;
  WebCore::HTMLFieldSetElement *v4;

  if (a2)
  {
    if ((*((_WORD *)a2 + 14) & 8) != 0)
    {
      v3 = this;
      this = (const WebCore::HTMLElement *)WebCore::lineageOfType<WebCore::HTMLFieldSetElement>((uint64_t)a2);
      if (this)
      {
        v4 = this;
        do
        {
          WebCore::HTMLFieldSetElement::removeInvalidDescendant(v4, v3);
          this = (const WebCore::HTMLElement *)WebCore::findElementAncestorOfType<WebCore::HTMLFieldSetElement>((uint64_t)v4);
          v4 = this;
        }
        while (this);
      }
    }
  }
  return this;
}

unsigned __int8 *WebCore::ValidatedFormListedElement::parseAttribute(unsigned __int8 *this, const WebCore::QualifiedName *a2, const WTF::AtomString *a3)
{
  uint64_t v3;
  WebCore::HTMLMaybeFormAssociatedCustomElement *v4;
  uint64_t v5;
  WebCore::HTMLMaybeFormAssociatedCustomElement *v6;
  const WebCore::QualifiedName *v7;
  const WebCore::QualifiedName *v8;
  WebCore::FormListedElement *v9;
  unsigned __int8 *v10;
  const WTF::AtomString *v11;
  const WTF::AtomString *v12;

  v3 = *(_QWORD *)a2;
  if (*(_QWORD *)a2 == WebCore::HTMLNames::disabledAttr)
  {
    v7 = a2;
    v11 = a3;
    v9 = (WebCore::FormListedElement *)this;
    v4 = (WebCore::HTMLMaybeFormAssociatedCustomElement *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)this + 16))(this);
    v5 = *(_QWORD *)(*((_QWORD *)v4 + 12) + 24);
    if (v5 == *(_QWORD *)(WebCore::HTMLNames::buttonTag + 24))
      return WebCore::ValidatedFormListedElement::setDisabledInternal(v9, *(_QWORD *)v11 != 0, (*((unsigned __int8 *)v9 + 48) >> 4) & 1);
    if (v5 == *(_QWORD *)(WebCore::HTMLNames::inputTag + 24))
      return WebCore::ValidatedFormListedElement::setDisabledInternal(v9, *(_QWORD *)v11 != 0, (*((unsigned __int8 *)v9 + 48) >> 4) & 1);
    if (v5 == *(_QWORD *)(WebCore::HTMLNames::selectTag + 24))
      return WebCore::ValidatedFormListedElement::setDisabledInternal(v9, *(_QWORD *)v11 != 0, (*((unsigned __int8 *)v9 + 48) >> 4) & 1);
    if (v5 == *(_QWORD *)(WebCore::HTMLNames::textareaTag + 24))
      return WebCore::ValidatedFormListedElement::setDisabledInternal(v9, *(_QWORD *)v11 != 0, (*((unsigned __int8 *)v9 + 48) >> 4) & 1);
    if (v5 == *(_QWORD *)(WebCore::HTMLNames::optgroupTag + 24))
      return WebCore::ValidatedFormListedElement::setDisabledInternal(v9, *(_QWORD *)v11 != 0, (*((unsigned __int8 *)v9 + 48) >> 4) & 1);
    if (v5 == *(_QWORD *)(WebCore::HTMLNames::optionTag + 24))
      return WebCore::ValidatedFormListedElement::setDisabledInternal(v9, *(_QWORD *)v11 != 0, (*((unsigned __int8 *)v9 + 48) >> 4) & 1);
    if (v5 == *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
      return WebCore::ValidatedFormListedElement::setDisabledInternal(v9, *(_QWORD *)v11 != 0, (*((unsigned __int8 *)v9 + 48) >> 4) & 1);
    v6 = v4;
    if ((*(unsigned int (**)(void))(*(_QWORD *)v4 + 856))())
    {
      if (WebCore::HTMLMaybeFormAssociatedCustomElement::isFormAssociatedCustomElement(v6))
        return WebCore::ValidatedFormListedElement::setDisabledInternal(v9, *(_QWORD *)v11 != 0, (*((unsigned __int8 *)v9 + 48) >> 4) & 1);
    }
    a2 = v7;
    this = (unsigned __int8 *)v9;
    v3 = *(_QWORD *)v7;
    a3 = v11;
  }
  if (v3 == WebCore::HTMLNames::readonlyAttr)
  {
    v8 = a2;
    v12 = a3;
    v10 = this;
    if (((*(uint64_t (**)(void))(*(_QWORD *)this + 344))() & 1) != 0)
      return WebCore::ValidatedFormListedElement::parseReadOnlyAttribute(v10, v12);
    this = v10;
    v3 = *(_QWORD *)v8;
    a3 = v12;
  }
  if (v3 == WebCore::HTMLNames::formAttr)
    return (unsigned __int8 *)WebCore::FormListedElement::parseFormAttribute((WebCore::FormListedElement *)this, a3);
  return this;
}

unsigned __int8 *WebCore::ValidatedFormListedElement::parseReadOnlyAttribute(unsigned __int8 *this, const WTF::AtomString *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int v14;
  BOOL v15;
  char v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;

  v2 = *(_QWORD *)a2;
  if ((((*(_QWORD *)a2 == 0) ^ ((this[48] & 0x20) >> 5)) & 1) != 0)
    return this;
  v3 = this;
  v4 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)this + 288))(this);
  v5 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v3 + 16))(v3);
  if ((*(_BYTE *)(v5 + 22) & 8) == 0)
    goto LABEL_21;
  v6 = *(uint64_t **)(v5 + 40);
  v7 = v6[1];
  if (!*(_QWORD *)(v7 + 1944) || *(_BYTE *)(v7 + 3405))
    goto LABEL_21;
  if ((*(_BYTE *)(v5 + 70) & 4) != 0)
  {
    v11 = *v6;
    v12 = (*(_WORD *)(v11 + 28) & 0x80) == 0 || v11 == 0;
    v13 = v11 + 216;
    if (v12)
      v13 = v7 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v13 + 236))
      goto LABEL_21;
  }
  v8 = *(_QWORD *)(v7 + 1272);
  if (v8 && (*(_BYTE *)(v8 + 70) & 4) != 0)
  {
LABEL_21:
    LOBYTE(v18) = 0;
    v20 = 0;
    v21 = 0;
    v19 = v5;
  }
  else
  {
    if (*(_BYTE *)(v7 + 3362)
      || (v9 = *(unsigned __int8 *)(v7 + 3390), !*(_BYTE *)(v7 + 3390))
      && (*(_BYTE *)(v7 + 70) & 8) == 0
      && !*(_QWORD *)(v7 + 1560)
      && (v10 = *(_QWORD *)(v7 + 1328), !*(_BYTE *)(v10 + 233))
      && !*(_BYTE *)(v10 + 234))
    {
      LOBYTE(v18) = 1;
      v20 = 0;
      v21 = 0;
      v19 = v5;
LABEL_29:
      if (v2)
        v4 = 0;
      WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v18, (WTF::StringImpl *)0x42, v4, 0);
      WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v18, (WTF::StringImpl *)0x41, v4 ^ 1, 0);
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v19, &v20);
      goto LABEL_32;
    }
    v14 = *(unsigned __int8 *)(v7 + 3391);
    if (v9)
      v15 = v14 == 0;
    else
      v15 = 0;
    v16 = !v15;
    LOBYTE(v18) = v16;
    v20 = 0;
    v21 = 0;
    v19 = v5;
    if (!v15)
      goto LABEL_29;
  }
LABEL_32:
  v3[48] = v3[48] & 0xDF | (32 * (v2 != 0));
  (*(void (**)(unsigned __int8 *))(*(_QWORD *)v3 + 360))(v3);
  if ((_BYTE)v18)
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v19, &v21);
  if (v21)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v21, v17);
  this = v20;
  if (v20)
    return (unsigned __int8 *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v20, v17);
  return this;
}

uint64_t WebCore::ValidatedFormListedElement::insertedIntoAncestor(WebCore::ValidationMessage **a1, char a2, uint64_t a3)
{
  int v6;
  char v7;
  const WebCore::HTMLElement *v8;
  int v9;
  void *v10;
  uint64_t v11;
  __int16 v12;
  _BOOL4 v13;
  int v14;
  char v15;
  char v16;
  char v17;
  uint64_t result;
  void *v19;
  uint64_t v20;
  WebCore::ValidationMessage *v21;
  WebCore::ValidationMessage *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  WebCore::ValidationMessage *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  const WTF::AtomString *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  WebCore::ValidationMessage *v40;
  WebCore::ValidationMessage *v41;
  char v42;
  int v43;
  int v44;
  WebCore::ValidationMessage *v45;
  WebCore::ValidationMessage *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  WebCore::ValidationMessage *v50;
  int v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  WTF *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  BOOL v60;
  __int16 v61;
  __int16 v62;
  const WebCore::HTMLElement **v63;
  WebCore::ContainerNode *v64;
  WebCore::ValidationMessage *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t i;
  uint64_t v70;
  unint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  void *v75;
  char v76;
  void *v77;
  int v78;
  uint64_t v79;
  void *v80;
  WebCore::Element *v81;
  unsigned int v82;
  int v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  __int16 v93;
  WebCore::ValidationMessage *v94;
  __int16 v95;
  int v96;
  BOOL v97;
  char v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  WebCore::ValidationMessage *v102;
  uint64_t v103;
  WebCore::HTMLFieldSetElement *v104;
  WebCore::HTMLFormElement *v105;
  uint64_t v106;
  uint64_t v107;
  WebCore::AXObjectCache *v108;
  WebCore::AXObjectCache *v109;
  int v110;
  char v111;
  _BYTE v112[4];
  WebCore::Node *v113;
  uint64_t v114;
  unsigned __int8 *v115;
  unsigned __int8 *v116;
  char v117;
  unsigned __int8 *v118[2];

  *((_BYTE *)a1 + 50) = *((_BYTE *)a1 + 50) & 0xFC | 2;
  v6 = (*((uint64_t (**)(WebCore::ValidationMessage **))*a1 + 42))(a1);
  v7 = *((_BYTE *)a1 + 48);
  if ((v7 & 4) != 0 && ((v6 ^ ((v7 & 2) == 0)) & 1) != 0)
    goto LABEL_3;
  if (v6)
    v42 = 6;
  else
    v42 = 4;
  *((_BYTE *)a1 + 48) = v7 & 0xF9 | v42;
  if (!*((_DWORD *)a1 + 13))
  {
    v43 = (*((uint64_t (**)(WebCore::ValidationMessage **))*a1 + 34))(a1);
    v44 = (*((uint64_t (**)(WebCore::ValidationMessage **))*a1 + 28))(a1);
    if (((v44 ^ (((_BYTE)a1[6] & 1) == 0)) & 1) != 0)
    {
LABEL_62:
      v45 = a1[5];
      if (v45)
      {
        if (WebCore::ValidationMessage::isVisible(v45))
        {
          WebCore::ValidatedFormListedElement::focusableValidationAnchorElement((WebCore::ValidatedFormListedElement *)a1, &v113);
          if (v113)
          {
            v118[0] = (unsigned __int8 *)v113;
            WebCore::ValidatedFormListedElement::updateVisibleValidationMessage(a1, (uint64_t *)v118);
            WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref((uint64_t *)v118);
          }
        }
      }
      goto LABEL_63;
    }
    v111 = v7;
    v78 = v44;
    v79 = (*((uint64_t (**)(WebCore::ValidationMessage **))*a1 + 2))(a1);
    v81 = (WebCore::Element *)v79;
    v82 = *((unsigned __int8 *)a1 + 48);
    if ((v82 & 0x40) != 0)
      v83 = v78;
    else
      v83 = 0;
    if ((*(_BYTE *)(v79 + 22) & 8) == 0)
      goto LABEL_193;
    v84 = *(uint64_t **)(v79 + 40);
    v85 = v84[1];
    if (!*(_QWORD *)(v85 + 1944) || *(_BYTE *)(v85 + 3405))
      goto LABEL_193;
    if ((*(_BYTE *)(v79 + 70) & 4) != 0)
    {
      v89 = *v84;
      v90 = (*(_WORD *)(v89 + 28) & 0x80) == 0 || v89 == 0;
      v91 = v89 + 216;
      if (v90)
        v91 = v85 + 1328;
      if (!*(_BYTE *)(*(_QWORD *)v91 + 236))
        goto LABEL_193;
    }
    v86 = *(_QWORD *)(v85 + 1272);
    if (v86)
    {
      if ((*(_BYTE *)(v86 + 70) & 4) != 0)
      {
LABEL_193:
        LOBYTE(v113) = 0;
        v115 = 0;
        v116 = 0;
        v114 = v79;
        goto LABEL_194;
      }
    }
    if (!*(_BYTE *)(v85 + 3362)
      && ((v87 = *(unsigned __int8 *)(v85 + 3390), *(_BYTE *)(v85 + 3390))
       || (*(_BYTE *)(v85 + 70) & 8) != 0
       || *(_QWORD *)(v85 + 1560)
       || (v88 = *(_QWORD *)(v85 + 1328), *(_BYTE *)(v88 + 233))
       || *(_BYTE *)(v88 + 234)))
    {
      v96 = *(unsigned __int8 *)(v85 + 3391);
      if (v87)
        v97 = v96 == 0;
      else
        v97 = 0;
      v98 = !v97;
      LOBYTE(v113) = v98;
      v115 = 0;
      v116 = 0;
      v114 = v79;
      if (v97)
      {
LABEL_194:
        LOBYTE(v82) = v82 & 0xFE | v78;
        *((_BYTE *)a1 + 48) = v82;
        if (!v43)
        {
LABEL_200:
          if (WebCore::Document::hasEverCreatedAnAXObjectCache)
          {
            v108 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*((_QWORD *)v81 + 5) + 8));
            if (v108)
            {
              v109 = v108;
              ++*((_DWORD *)v108 + 2);
              WebCore::AXObjectCache::onValidityChange(v108, v81);
              v110 = *((_DWORD *)v109 + 2);
              if (!v110)
              {
                result = 286;
                __break(0xC471u);
                return result;
              }
              *((_DWORD *)v109 + 2) = v110 - 1;
            }
          }
          if ((_BYTE)v113)
            WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v114, &v116);
          if (v116)
            WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v116, v80);
          if (v115)
            WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v115, v80);
          v7 = v111;
          goto LABEL_62;
        }
        v82 = (char)v82;
        if ((v78 & 1) != 0)
        {
          if ((v82 & 0x80000000) == 0)
          {
            v100 = *((_QWORD *)v81 + 4);
            if (v100)
            {
              if ((*(_WORD *)(v100 + 28) & 8) != 0)
              {
                v101 = WebCore::lineageOfType<WebCore::HTMLFieldSetElement>(v100);
                if (v101)
                {
                  v104 = (WebCore::HTMLFieldSetElement *)v101;
                  do
                  {
                    WebCore::HTMLFieldSetElement::removeInvalidDescendant(v104, v81);
                    v104 = (WebCore::HTMLFieldSetElement *)WebCore::findElementAncestorOfType<WebCore::HTMLFieldSetElement>((uint64_t)v104);
                  }
                  while (v104);
                }
              }
            }
          }
          v102 = a1[1];
          if (v102)
          {
            v103 = *((_QWORD *)v102 + 1);
            if (v103)
              WebCore::HTMLFormElement::removeInvalidFormControlIfNeeded(v103, v81);
          }
          goto LABEL_200;
        }
        if ((v82 & 0x80000000) != 0
          || (v92 = *((_QWORD *)v81 + 4)) == 0
          || (v93 = *(_WORD *)(v92 + 28), (v93 & 8) == 0))
        {
LABEL_199:
          v94 = a1[1];
          if (v94)
          {
            v105 = (WebCore::HTMLFormElement *)*((_QWORD *)v94 + 1);
            if (v105)
              WebCore::HTMLFormElement::addInvalidFormControl(v105, v81);
          }
          goto LABEL_200;
        }
        if ((v93 & 0x10) == 0
          || *(_QWORD *)(*(_QWORD *)(v92 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
        {
          v92 = *(_QWORD *)(v92 + 32);
          if (!v92)
            goto LABEL_199;
          v95 = *(_WORD *)(v92 + 28);
          if ((v95 & 8) == 0)
            goto LABEL_199;
          while ((v95 & 0x10) == 0
               || *(_QWORD *)(*(_QWORD *)(v92 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
          {
            v92 = *(_QWORD *)(v92 + 32);
            if (v92)
            {
              v95 = *(_WORD *)(v92 + 28);
              if ((v95 & 8) != 0)
                continue;
            }
            goto LABEL_199;
          }
        }
        do
        {
          WebCore::HTMLFieldSetElement::addInvalidDescendant((WebCore::HTMLFieldSetElement *)v92, v81);
          v92 = WebCore::findElementAncestorOfType<WebCore::HTMLFieldSetElement>(v92);
        }
        while (v92);
        goto LABEL_199;
      }
    }
    else
    {
      LOBYTE(v113) = 1;
      v115 = 0;
      v116 = 0;
      v114 = v79;
    }
    v99 = (v78 ^ 1) & (v82 >> 6);
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)&v113, (WTF::StringImpl *)0x4E, v78, 0);
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)&v113, (WTF::StringImpl *)0x29, v78 ^ 1, 0);
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)&v113, (WTF::StringImpl *)0x4D, v83, 0);
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation((uint64_t *)&v113, (WTF::StringImpl *)0x4C, v99, 0);
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v114, &v115);
    LOBYTE(v82) = *((_BYTE *)a1 + 48);
    goto LABEL_194;
  }
LABEL_63:
  if (((_BYTE)a1[6] & 2) == 0 && (v7 & 1) == 0)
  {
    v63 = (const WebCore::HTMLElement **)(*((uint64_t (**)(WebCore::ValidationMessage **))*a1 + 2))(a1);
    WebCore::removeInvalidElementToAncestorFromInsertionPoint((const WebCore::HTMLElement *)v63, v63[4], v64);
    v65 = a1[1];
    if (v65)
    {
      v66 = *((_QWORD *)v65 + 1);
      if (v66)
      {
        *(_DWORD *)(v66 + 24) += 2;
        WebCore::HTMLFormElement::removeInvalidFormControlIfNeeded(v66, (const WebCore::HTMLElement *)v63);
        if (*(_DWORD *)(v66 + 24) == 2)
        {
          if ((*(_WORD *)(v66 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v66, v67);
        }
        else
        {
          *(_DWORD *)(v66 + 24) -= 2;
        }
      }
    }
  }
  if (((_BYTE)a1[6] & 2) == 0)
  {
    v46 = a1[5];
    if (v46)
      WebCore::ValidationMessage::requestToHideMessage(v46);
  }
LABEL_3:
  v8 = (const WebCore::HTMLElement *)(*((uint64_t (**)(WebCore::ValidationMessage **))*a1 + 2))(a1);
  if ((*((unsigned int (**)(WebCore::ValidationMessage **))*a1 + 34))(a1))
  {
    if (((_BYTE)a1[6] & 1) == 0)
    {
      v61 = *(_WORD *)(a3 + 28);
      if ((v61 & 8) != 0)
      {
        if ((v61 & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(a3 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
        {
          do
          {
LABEL_238:
            WebCore::HTMLFieldSetElement::addInvalidDescendant((WebCore::HTMLFieldSetElement *)a3, v8);
            a3 = WebCore::findElementAncestorOfType<WebCore::HTMLFieldSetElement>(a3);
          }
          while (a3);
          goto LABEL_5;
        }
        a3 = *(_QWORD *)(a3 + 32);
        if (a3)
        {
          v62 = *(_WORD *)(a3 + 28);
          if ((v62 & 8) != 0)
          {
            while ((v62 & 0x10) == 0
                 || *(_QWORD *)(*(_QWORD *)(a3 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
            {
              a3 = *(_QWORD *)(a3 + 32);
              if (a3)
              {
                v62 = *(_WORD *)(a3 + 28);
                if ((v62 & 8) != 0)
                  continue;
              }
              goto LABEL_5;
            }
            goto LABEL_238;
          }
        }
      }
    }
  }
LABEL_5:
  if (*(_DWORD *)(*(_QWORD *)(*((_QWORD *)v8 + 5) + 8) + 3284))
  {
    v9 = (_BYTE)a1[6] & 8;
    v11 = *(_QWORD *)((*((uint64_t (**)(WebCore::ValidationMessage **))*a1 + 3))(a1) + 32);
    if (v11 && (v12 = *(_WORD *)(v11 + 28), (v12 & 8) != 0))
    {
      v47 = 0;
      while (1)
      {
        v48 = v11;
        if ((v12 & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
        {
          v70 = *(_QWORD *)(v11 + 104);
          if (v70)
          {
            v71 = *(unsigned int *)(v70 + 4);
            if ((v71 & 1) != 0)
            {
              v72 = *(uint64_t **)(v70 + 40);
              v73 = *(unsigned int *)(v70 + 52);
            }
            else
            {
              v72 = (uint64_t *)(v70 + 32);
              v73 = v71 >> 5;
            }
            if (v73)
              break;
          }
        }
LABEL_70:
        *(_DWORD *)(v48 + 24) += 2;
        if (v47)
        {
          if (*(_DWORD *)(v47 + 24) == 2)
          {
            if ((*(_WORD *)(v47 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v47, v10);
          }
          else
          {
            *(_DWORD *)(v47 + 24) -= 2;
          }
        }
        v11 = *(_QWORD *)(v48 + 32);
        if (v11)
        {
          v12 = *(_WORD *)(v11 + 28);
          v47 = v48;
          if ((v12 & 8) != 0)
            continue;
        }
        v13 = 0;
        v47 = v48;
        goto LABEL_79;
      }
      while (1)
      {
        v74 = *v72;
        if (*v72 == WebCore::HTMLNames::disabledAttr
          || *(_QWORD *)(v74 + 24) == *(_QWORD *)(WebCore::HTMLNames::disabledAttr + 24)
          && *(_QWORD *)(v74 + 32) == *(_QWORD *)(WebCore::HTMLNames::disabledAttr + 32))
        {
          break;
        }
        v72 += 2;
        if (!--v73)
          goto LABEL_70;
      }
      if (!v47)
      {
        v13 = 1;
        goto LABEL_9;
      }
      v13 = (*(_WORD *)(v47 + 28) & 0x10) == 0
         || *(_QWORD *)(*(_QWORD *)(v47 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::legendTag + 24)
         || v47 != WebCore::HTMLFieldSetElement::legend((WebCore::HTMLFieldSetElement *)v48);
LABEL_79:
      if (*(_DWORD *)(v47 + 24) == 2)
      {
        if ((*(_WORD *)(v47 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v47, v10);
      }
      else
      {
        *(_DWORD *)(v47 + 24) -= 2;
      }
    }
    else
    {
      v13 = 0;
    }
LABEL_9:
    if (v9)
      v14 = 1;
    else
      v14 = v13;
    v15 = *((_BYTE *)a1 + 48);
    LOBYTE(v113) = 0;
    v117 = 0;
    if (((v14 ^ ((v15 & 0x18) != 0)) & 1) != 0)
    {
      v75 = (void *)(*((uint64_t (**)(WebCore::ValidationMessage **))*a1 + 2))(a1);
      v112[0] = 22;
      v112[1] = v14;
      v112[2] = 25;
      v112[3] = v14 ^ 1;
      v118[0] = v112;
      v118[1] = (unsigned __int8 *)2;
      std::optional<WebCore::Style::PseudoClassChangeInvalidation>::emplace[abi:sn180100]<WebCore::Element &,std::initializer_list<std::pair<WebCore::CSSSelectorPseudoClass,BOOL>> &,void>((uint64_t)&v113, v75, v118);
      if (v13)
        v76 = 16;
      else
        v76 = 0;
      *((_BYTE *)a1 + 48) = v76 | v9 | (_BYTE)a1[6] & 0xE7;
      (*((void (**)(WebCore::ValidationMessage **))*a1 + 44))(a1);
      if (v117)
      {
        if ((_BYTE)v113)
          WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v114, &v116);
        if (v116)
          WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v116, v77);
        if (v115)
          WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v115, v77);
      }
    }
    else
    {
      v16 = v15 & 0xE7;
      if (v13)
        v17 = 16;
      else
        v17 = 0;
      *((_BYTE *)a1 + 48) = v17 | v9 | v16;
    }
  }
  result = (*((uint64_t (**)(WebCore::ValidationMessage **))*a1 + 2))(a1);
  v20 = result;
  v21 = a1[2];
  if (v21)
  {
    result = *((_QWORD *)v21 + 1);
    if (result)
    {
      if ((*(_BYTE *)(result + 22) & 8) == 0)
      {
        a1[2] = 0;
        do
        {
LABEL_105:
          v52 = __ldaxr((unsigned int *)v21);
          v53 = v52 - 1;
        }
        while (__stlxr(v53, (unsigned int *)v21));
        if (!v53)
        {
          atomic_store(1u, (unsigned int *)v21);
          v54 = *((unsigned int *)v21 + 7);
          if ((_DWORD)v54)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v21 + 2), (WTF::StringImpl *)(*((_QWORD *)v21 + 2) + 32 * v54));
          v55 = (WTF *)*((_QWORD *)v21 + 2);
          if (v55)
          {
            *((_QWORD *)v21 + 2) = 0;
            *((_DWORD *)v21 + 6) = 0;
            WTF::fastFree(v55, v19);
          }
          result = WTF::fastFree(v21, v19);
        }
        goto LABEL_18;
      }
      v49 = *(_DWORD *)(result + 24) + 2;
      *(_DWORD *)(result + 24) = v49;
      v113 = (WebCore::Node *)result;
      v50 = a1[1];
      if (v50 && result == *((_QWORD *)v50 + 1))
      {
        v113 = 0;
      }
      else
      {
        (*((void (**)(WebCore::ValidationMessage **, WebCore::Node **))*a1 + 10))(a1, &v113);
        result = (uint64_t)v113;
        v113 = 0;
        if (!result)
          goto LABEL_104;
        v49 = *(_DWORD *)(result + 24);
      }
      v51 = v49 - 2;
      if (v51)
      {
        *(_DWORD *)(result + 24) = v51;
      }
      else if ((*(_WORD *)(result + 30) & 0x400) == 0)
      {
        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v19);
      }
LABEL_104:
      v21 = a1[2];
      a1[2] = 0;
      if (!v21)
        goto LABEL_18;
      goto LABEL_105;
    }
  }
LABEL_18:
  v22 = a1[1];
  if (v22)
  {
    v56 = *((_QWORD *)v22 + 1);
    if (v56)
    {
      if ((*(_BYTE *)(v20 + 22) & 8) != 0)
      {
        v57 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 40) + 8) + 1272);
      }
      else
      {
        v68 = *(_QWORD *)(v20 + 32);
        v57 = v20;
        if (v68)
        {
          v57 = v20;
          if ((*(_WORD *)(v68 + 28) & 8) != 0)
          {
            do
            {
              v57 = v68;
              v68 = *(_QWORD *)(v68 + 32);
            }
            while (v68 && (*(_WORD *)(v68 + 28) & 8) != 0);
          }
        }
      }
      if ((*(_BYTE *)(v56 + 22) & 8) != 0)
      {
        v56 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v56 + 40) + 8) + 1272);
      }
      else
      {
        for (i = *(_QWORD *)(v56 + 32); i; i = *(_QWORD *)(i + 32))
        {
          if ((*(_WORD *)(i + 28) & 8) == 0)
            break;
          v56 = i;
        }
      }
      if (v57 != v56)
      {
        v113 = 0;
        (*((void (**)(WebCore::ValidationMessage **, WebCore::Node **))*a1 + 10))(a1, &v113);
        result = (uint64_t)v113;
        v113 = 0;
        if (result)
        {
          if (*(_DWORD *)(result + 24) == 2)
          {
            if ((*(_WORD *)(result + 30) & 0x400) == 0)
              result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v58);
          }
          else
          {
            *(_DWORD *)(result + 24) -= 2;
          }
        }
      }
    }
  }
  if ((a2 & 1) == 0)
  {
    v28 = a1[1];
    if (v28)
    {
      v29 = *((_QWORD *)v28 + 1);
      if (v29)
      {
        v30 = 0;
        *(_DWORD *)(v29 + 24) += 2;
LABEL_31:
        v31 = (*((uint64_t (**)(WebCore::ValidationMessage **))*a1 + 2))(a1);
        v33 = v31;
        if ((*(_BYTE *)(v31 + 22) & 8) == 0)
          goto LABEL_41;
        v34 = *(_QWORD *)(v31 + 104);
        if (v34)
        {
          v35 = *(_DWORD *)(v34 + 4);
          if ((v35 & 1) != 0)
          {
            v36 = *(_QWORD *)(v34 + 40);
            LODWORD(v37) = *(_DWORD *)(v34 + 52);
            if ((_DWORD)v37)
            {
LABEL_35:
              v37 = v37;
              v32 = (const WTF::AtomString *)(v36 + 8);
              while (1)
              {
                v38 = *((_QWORD *)v32 - 1);
                if (v38 == WebCore::HTMLNames::formAttr
                  || *(_QWORD *)(v38 + 24) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 24)
                  && *(_QWORD *)(v38 + 32) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 32))
                {
                  break;
                }
                v32 = (const WTF::AtomString *)((char *)v32 + 16);
                if (!--v37)
                {
                  v32 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
                  break;
                }
              }
LABEL_40:
              if (*(_QWORD *)v32)
              {
                WebCore::TreeScope::getElementById(*(unsigned int **)(v31 + 40), v32, (uint64_t *)&v113);
                result = (uint64_t)v113;
                if (!v113)
                  goto LABEL_45;
                if ((*((_WORD *)v113 + 14) & 0x10) == 0
                  || *(_QWORD *)(*((_QWORD *)v113 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::formTag + 24))
                {
                  v113 = 0;
                  if (*(_DWORD *)(result + 24) == 2)
                  {
                    if ((*(_WORD *)(result + 30) & 0x400) == 0)
                      WebCore::Node::removedLastRef((WebCore::Node *)result, v32);
                  }
                  else
                  {
                    *(_DWORD *)(result + 24) -= 2;
                  }
                  goto LABEL_44;
                }
                v113 = 0;
                v106 = v33;
                do
                {
                  v107 = v106;
                  v106 = *(_QWORD *)(v106 + 32);
                }
                while (v106);
                if (v107 == **(_QWORD **)(v33 + 40))
                  goto LABEL_45;
                if (*(_DWORD *)(result + 24) == 2)
                {
                  if ((*(_WORD *)(result + 30) & 0x400) == 0)
                    WebCore::Node::removedLastRef((WebCore::Node *)result, v32);
                }
                else
                {
                  *(_DWORD *)(result + 24) -= 2;
                }
              }
LABEL_41:
              result = v29;
              if (v30)
              {
                result = *(_QWORD *)(v33 + 32);
                if (!result)
                {
LABEL_45:
                  v118[0] = (unsigned __int8 *)result;
                  v40 = a1[1];
                  if (v40)
                    v40 = (WebCore::ValidationMessage *)*((_QWORD *)v40 + 1);
                  if ((WebCore::ValidationMessage *)result != v40)
                  {
                    (*((void (**)(WebCore::ValidationMessage **, unsigned __int8 **))*a1 + 10))(a1, v118);
                    result = (uint64_t)v118[0];
                  }
                  v118[0] = 0;
                  if (result)
                  {
                    if (*(_DWORD *)(result + 24) == 2)
                    {
                      if ((*(_WORD *)(result + 30) & 0x400) == 0)
                        result = (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)result, v32);
                    }
                    else
                    {
                      *(_DWORD *)(result + 24) -= 2;
                    }
                  }
                  v41 = a1[1];
                  if (v41)
                  {
                    v59 = *((_QWORD *)v41 + 1);
                    v60 = !v59 || v29 == v59;
                    if (!v60 && (*(_BYTE *)(v59 + 22) & 8) != 0)
                      result = WebCore::Document::didAssociateFormControl(*(_QWORD *)(*(_QWORD *)(v33 + 40) + 8), (WebCore::Element *)v33);
                  }
                  if ((v30 & 1) == 0)
                  {
                    if (*(_DWORD *)(v29 + 24) == 2)
                    {
                      if ((*(_WORD *)(v29 + 30) & 0x400) == 0)
                        return (uint64_t)WebCore::Node::removedLastRef((WebCore::Node *)v29, v32);
                    }
                    else
                    {
                      *(_DWORD *)(v29 + 24) -= 2;
                    }
                  }
                  return result;
                }
                v39 = *(_WORD *)(result + 28);
                if ((v39 & 8) == 0)
                {
LABEL_44:
                  result = 0;
                  goto LABEL_45;
                }
                while ((v39 & 0x10) == 0
                     || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::formTag + 24))
                {
                  result = *(_QWORD *)(result + 32);
                  if (!result)
                    goto LABEL_45;
                  v39 = *(_WORD *)(result + 28);
                  if ((v39 & 8) == 0)
                    goto LABEL_44;
                }
              }
              *(_DWORD *)(result + 24) += 2;
              goto LABEL_45;
            }
          }
          else
          {
            v36 = v34 + 32;
            LODWORD(v37) = v35 >> 5;
            if ((_DWORD)v37)
              goto LABEL_35;
          }
        }
        v32 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
        goto LABEL_40;
      }
    }
    else
    {
      v29 = 0;
    }
    v30 = 1;
    goto LABEL_31;
  }
  v23 = *(_QWORD *)(v20 + 104);
  if (!v23)
    return result;
  v24 = *(_DWORD *)(v23 + 4);
  if ((v24 & 1) != 0)
  {
    v25 = *(uint64_t **)(v23 + 40);
    LODWORD(v26) = *(_DWORD *)(v23 + 52);
    if (!(_DWORD)v26)
      return result;
  }
  else
  {
    v25 = (uint64_t *)(v23 + 32);
    LODWORD(v26) = v24 >> 5;
    if (!(_DWORD)v26)
      return result;
  }
  v26 = v26;
  while (1)
  {
    v27 = *v25;
    if (*v25 == WebCore::HTMLNames::formAttr
      || *(_QWORD *)(v27 + 24) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 24)
      && *(_QWORD *)(v27 + 32) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 32))
    {
      break;
    }
    v25 += 2;
    if (!--v26)
      return result;
  }
  return WebCore::FormListedElement::resetFormAttributeTargetObserver((WebCore::FormListedElement *)a1);
}

BOOL WebCore::ValidatedFormListedElement::computeIsDisabledByFieldsetAncestor(WebCore::ValidatedFormListedElement *this)
{
  void *v1;
  uint64_t v2;
  __int16 v3;
  _BOOL8 v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)((*(uint64_t (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)this + 24))(this) + 32);
  if (!v2)
    return 0;
  v3 = *(_WORD *)(v2 + 28);
  if ((v3 & 8) == 0)
    return 0;
  v6 = 0;
  while (1)
  {
    v7 = v2;
    if ((v3 & 0x10) != 0
      && *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
    {
      v8 = *(_QWORD *)(v2 + 104);
      if (v8)
      {
        v9 = *(unsigned int *)(v8 + 4);
        if ((v9 & 1) != 0)
        {
          v10 = *(uint64_t **)(v8 + 40);
          v11 = *(unsigned int *)(v8 + 52);
        }
        else
        {
          v10 = (uint64_t *)(v8 + 32);
          v11 = v9 >> 5;
        }
        if (v11)
          break;
      }
    }
LABEL_8:
    *(_DWORD *)(v7 + 24) += 2;
    if (v6)
    {
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v6, v1);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
    }
    v2 = *(_QWORD *)(v7 + 32);
    if (v2)
    {
      v3 = *(_WORD *)(v2 + 28);
      v6 = v7;
      if ((v3 & 8) != 0)
        continue;
    }
    v4 = 0;
    goto LABEL_17;
  }
  while (1)
  {
    v12 = *v10;
    if (*v10 == WebCore::HTMLNames::disabledAttr
      || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::HTMLNames::disabledAttr + 24)
      && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::HTMLNames::disabledAttr + 32))
    {
      break;
    }
    v10 += 2;
    if (!--v11)
      goto LABEL_8;
  }
  v14 = v6;
  if (!v6)
    return 1;
  if ((*(_WORD *)(v6 + 28) & 0x10) != 0
    && *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::legendTag + 24))
  {
    v13 = WebCore::HTMLFieldSetElement::legend((WebCore::HTMLFieldSetElement *)v7);
    v7 = v14;
    v4 = v14 != v13;
  }
  else
  {
    v4 = 1;
    v7 = v6;
  }
LABEL_17:
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v1);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  return v4;
}

_QWORD *WebCore::ValidatedFormListedElement::willChangeForm(_QWORD *this)
{
  uint64_t v1;
  uint64_t v2;
  const WebCore::HTMLElement *v3;

  v1 = this[1];
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = (const WebCore::HTMLElement *)(*(uint64_t (**)(_QWORD *))(*this + 16))(this);
      return (_QWORD *)WebCore::HTMLFormElement::removeInvalidFormControlIfNeeded(v2, v3);
    }
  }
  return this;
}

uint64_t WebCore::ValidatedFormListedElement::didChangeForm(uint64_t this)
{
  int v1;
  uint64_t v2;
  WebCore::HTMLFormElement *v3;
  const WebCore::HTMLElement *v4;

  v1 = WebCore::ScriptDisallowedScope::s_count++;
  v2 = *(_QWORD *)(this + 8);
  if (v2)
  {
    v3 = *(WebCore::HTMLFormElement **)(v2 + 8);
    if (v3)
    {
      if ((*(_BYTE *)(this + 48) & 7) == 6)
      {
        v4 = (const WebCore::HTMLElement *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 16))(this);
        this = WebCore::HTMLFormElement::addInvalidFormControl(v3, v4);
        v1 = WebCore::ScriptDisallowedScope::s_count - 1;
      }
    }
  }
  WebCore::ScriptDisallowedScope::s_count = v1;
  return this;
}

uint64_t WebCore::ValidatedFormListedElement::formWillBeDestroyed(uint64_t this)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  void *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WTF *v9;
  WTF *v10;

  v1 = this;
  v2 = *(_BYTE *)(this + 48) | 0x80;
  *(_BYTE *)(this + 48) = v2;
  v3 = *(_QWORD *)(this + 8);
  if (v3 && *(_QWORD *)(v3 + 8))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)this + 256))(this);
    v5 = *(unsigned int **)(v1 + 8);
    *(_QWORD *)(v1 + 8) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        atomic_store(1u, v5);
        v10 = (WTF *)v5;
        v8 = v5[7];
        if ((_DWORD)v8)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v10 + 2), (WTF::StringImpl *)(*((_QWORD *)v10 + 2) + 32 * v8));
        v9 = (WTF *)*((_QWORD *)v10 + 2);
        if (v9)
        {
          *((_QWORD *)v10 + 2) = 0;
          *((_DWORD *)v10 + 6) = 0;
          WTF::fastFree(v9, v4);
        }
        WTF::fastFree(v10, v4);
      }
    }
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 264))(v1);
    v2 = *(_BYTE *)(v1 + 48);
  }
  *(_BYTE *)(v1 + 48) = v2 & 0x7F;
  return this;
}

unsigned int *WebCore::ValidatedFormListedElement::didFinishInsertingNode(WebCore::ValidatedFormListedElement *this)
{
  uint64_t v2;
  unsigned int *v3;
  int v4;
  uint64_t v5;
  const WTF::AtomString *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *result;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  WebCore::Node *v22;

  v2 = *((_QWORD *)this + 1);
  if (!v2)
  {
    v3 = 0;
LABEL_3:
    v4 = 1;
    goto LABEL_4;
  }
  v3 = *(unsigned int **)(v2 + 8);
  if (!v3)
    goto LABEL_3;
  v4 = 0;
  v3[6] += 2;
LABEL_4:
  v5 = (*(uint64_t (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)this + 16))(this);
  v7 = v5;
  if ((*(_BYTE *)(v5 + 22) & 8) == 0)
  {
LABEL_14:
    result = v3;
    if (v4)
    {
      result = *(unsigned int **)(v7 + 32);
      if (!result)
        goto LABEL_18;
      v14 = *((_WORD *)result + 14);
      if ((v14 & 8) == 0)
        goto LABEL_17;
      while ((v14 & 0x10) == 0
           || *(_QWORD *)(*((_QWORD *)result + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::formTag + 24))
      {
        result = (unsigned int *)*((_QWORD *)result + 4);
        if (!result)
          goto LABEL_18;
        v14 = *((_WORD *)result + 14);
        if ((v14 & 8) == 0)
          goto LABEL_17;
      }
    }
    result[6] += 2;
    goto LABEL_18;
  }
  v8 = *(_QWORD *)(v5 + 104);
  if (!v8)
    goto LABEL_36;
  v9 = *(_DWORD *)(v8 + 4);
  if ((v9 & 1) == 0)
  {
    v10 = v8 + 32;
    LODWORD(v11) = v9 >> 5;
    if ((_DWORD)v11)
      goto LABEL_8;
LABEL_36:
    v6 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v10 = *(_QWORD *)(v8 + 40);
  LODWORD(v11) = *(_DWORD *)(v8 + 52);
  if (!(_DWORD)v11)
    goto LABEL_36;
LABEL_8:
  v11 = v11;
  v6 = (const WTF::AtomString *)(v10 + 8);
  while (1)
  {
    v12 = *((_QWORD *)v6 - 1);
    if (v12 == WebCore::HTMLNames::formAttr
      || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 24)
      && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::HTMLNames::formAttr + 32))
    {
      break;
    }
    v6 = (const WTF::AtomString *)((char *)v6 + 16);
    if (!--v11)
    {
      v6 = (const WTF::AtomString *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  if (!*(_QWORD *)v6)
    goto LABEL_14;
  WebCore::TreeScope::getElementById(*(unsigned int **)(v5 + 40), v6, (uint64_t *)&v22);
  result = (unsigned int *)v22;
  if (v22)
  {
    if ((*((_WORD *)v22 + 14) & 0x10) == 0
      || *(_QWORD *)(*((_QWORD *)v22 + 12) + 24) != *(_QWORD *)(WebCore::HTMLNames::formTag + 24))
    {
      v22 = 0;
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)result, v6);
      }
      else
      {
        result[6] -= 2;
      }
LABEL_17:
      result = 0;
      goto LABEL_18;
    }
    v22 = 0;
    v19 = v7;
    do
    {
      v20 = v19;
      v19 = *(_QWORD *)(v19 + 32);
    }
    while (v19);
    if (v20 != **(_QWORD **)(v7 + 40))
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)result, v6);
      }
      else
      {
        result[6] -= 2;
      }
      goto LABEL_14;
    }
  }
LABEL_18:
  v21 = result;
  v15 = *((_QWORD *)this + 1);
  if (v15)
    v15 = *(_QWORD *)(v15 + 8);
  if (result != (unsigned int *)v15)
  {
    (*(void (**)(WebCore::ValidatedFormListedElement *, unsigned int **))(*(_QWORD *)this + 80))(this, &v21);
    result = v21;
  }
  v21 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        result = WebCore::Node::removedLastRef((WebCore::Node *)result, v6);
    }
    else
    {
      result[6] -= 2;
    }
  }
  v16 = *((_QWORD *)this + 1);
  if (v16)
  {
    v17 = *(_QWORD *)(v16 + 8);
    v18 = !v17 || v3 == (unsigned int *)v17;
    if (!v18 && (*(_BYTE *)(v17 + 22) & 8) != 0)
      result = (unsigned int *)WebCore::Document::didAssociateFormControl(*(_QWORD *)(*(_QWORD *)(v7 + 40) + 8), (WebCore::Element *)v7);
  }
  if ((v4 & 1) == 0)
  {
    if (v3[6] == 2)
    {
      if ((*((_WORD *)v3 + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v3, v6);
    }
    else
    {
      v3[6] -= 2;
    }
  }
  return result;
}

uint64_t WebCore::ValidatedFormListedElement::setCustomValidity(WebCore::ValidatedFormListedElement *this, const WTF::String *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;

  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v3 += 2;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  return WebCore::ValidatedFormListedElement::updateValidity((uint64_t)this);
}

uint64_t WebCore::ValidatedFormListedElement::endDelayingUpdateValidity(uint64_t this)
{
  int v1;
  WebCore::ValidatedFormListedElement *v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  void *v7;
  const WebCore::HTMLElement *v8;
  unsigned int v9;
  int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  BOOL v25;
  char v26;
  int v27;
  uint64_t v28;
  const WebCore::HTMLElement *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const WebCore::HTMLElement *v33;
  WebCore::HTMLFieldSetElement *v34;
  uint64_t v35;
  const WebCore::HTMLElement *v36;
  uint64_t v37;
  WebCore::HTMLFormElement *v38;
  WebCore::Element *v39;
  WebCore::AXObjectCache *v40;
  WebCore::Element *v41;
  WebCore::AXObjectCache *v42;
  int v43;
  const WebCore::HTMLElement *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;

  v1 = *(_DWORD *)(this + 52) - 1;
  *(_DWORD *)(this + 52) = v1;
  if (v1)
    return this;
  v2 = (WebCore::ValidatedFormListedElement *)this;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 272))(this);
  v4 = (*(uint64_t (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)v2 + 224))(v2);
  if (((v4 ^ ((*((_BYTE *)v2 + 48) & 1) == 0)) & 1) == 0)
  {
    v5 = v4;
    v6 = (*(uint64_t (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)v2 + 16))(v2);
    v8 = (const WebCore::HTMLElement *)v6;
    v9 = *((unsigned __int8 *)v2 + 48);
    if ((v9 & 0x40) != 0)
      v10 = v5;
    else
      v10 = 0;
    if ((*(_BYTE *)(v6 + 22) & 8) == 0)
      goto LABEL_27;
    v11 = *(uint64_t **)(v6 + 40);
    v12 = v11[1];
    if (!*(_QWORD *)(v12 + 1944) || *(_BYTE *)(v12 + 3405))
      goto LABEL_27;
    if ((*(_BYTE *)(v6 + 70) & 4) != 0)
    {
      v16 = *v11;
      v17 = (*(_WORD *)(v16 + 28) & 0x80) == 0 || v16 == 0;
      v18 = v16 + 216;
      if (v17)
        v18 = v12 + 1328;
      if (!*(_BYTE *)(*(_QWORD *)v18 + 236))
        goto LABEL_27;
    }
    v13 = *(_QWORD *)(v12 + 1272);
    if (v13)
    {
      if ((*(_BYTE *)(v13 + 70) & 4) != 0)
      {
LABEL_27:
        LOBYTE(v47) = 0;
        v49 = 0;
        v50 = 0;
        v48 = v6;
        goto LABEL_28;
      }
    }
    v45 = v10;
    if (!*(_BYTE *)(v12 + 3362)
      && ((v14 = *(unsigned __int8 *)(v12 + 3390), *(_BYTE *)(v12 + 3390))
       || (*(_BYTE *)(v12 + 70) & 8) != 0
       || *(_QWORD *)(v12 + 1560)
       || (v15 = *(_QWORD *)(v12 + 1328), *(_BYTE *)(v15 + 233))
       || *(_BYTE *)(v15 + 234)))
    {
      v24 = *(unsigned __int8 *)(v12 + 3391);
      if (v14)
        v25 = v24 == 0;
      else
        v25 = 0;
      v26 = !v25;
      LOBYTE(v47) = v26;
      v49 = 0;
      v50 = 0;
      v48 = v6;
      if (v25)
      {
LABEL_28:
        v19 = v9 & 0xFE | v5;
        *((_BYTE *)v2 + 48) = v19;
        if (!v3)
          goto LABEL_34;
        if ((v5 & 1) != 0)
        {
          if ((v19 & 0x80000000) == 0)
          {
            v28 = *((_QWORD *)v8 + 4);
            if (v28)
            {
              if ((*(_WORD *)(v28 + 28) & 8) != 0)
              {
                v29 = v8;
                v30 = WebCore::lineageOfType<WebCore::HTMLFieldSetElement>(v28);
                v8 = v29;
                if (v30)
                {
                  v34 = (WebCore::HTMLFieldSetElement *)v30;
                  do
                  {
                    WebCore::HTMLFieldSetElement::removeInvalidDescendant(v34, v29);
                    v35 = WebCore::findElementAncestorOfType<WebCore::HTMLFieldSetElement>((uint64_t)v34);
                    v8 = v29;
                    v34 = (WebCore::HTMLFieldSetElement *)v35;
                  }
                  while (v35);
                }
              }
            }
          }
          v31 = *((_QWORD *)v2 + 1);
          if (!v31)
            goto LABEL_34;
          v32 = *(_QWORD *)(v31 + 8);
          if (!v32)
            goto LABEL_34;
          v33 = v8;
          WebCore::HTMLFormElement::removeInvalidFormControlIfNeeded(v32, v8);
LABEL_75:
          v8 = v33;
LABEL_34:
          if (WebCore::Document::hasEverCreatedAnAXObjectCache)
          {
            v39 = v8;
            v40 = (WebCore::AXObjectCache *)WebCore::Document::existingAXObjectCacheSlow(*(WebCore::Document **)(*((_QWORD *)v8 + 5) + 8));
            if (v40)
            {
              v41 = v39;
              v42 = v40;
              ++*((_DWORD *)v40 + 2);
              WebCore::AXObjectCache::onValidityChange(v40, v41);
              v43 = *((_DWORD *)v42 + 2);
              if (!v43)
              {
                this = 286;
                __break(0xC471u);
                return this;
              }
              *((_DWORD *)v42 + 2) = v43 - 1;
            }
          }
          if ((_BYTE)v47)
            WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v48, &v50);
          if (v50)
            WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v50, v7);
          if (v49)
            WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v49, v7);
          goto LABEL_3;
        }
        if ((v19 & 0x80000000) == 0)
        {
          v20 = *((_QWORD *)v8 + 4);
          if (v20)
          {
            v21 = *(_WORD *)(v20 + 28);
            if ((v21 & 8) != 0)
            {
              if ((v21 & 0x10) == 0
                || *(_QWORD *)(*(_QWORD *)(v20 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
              {
                v20 = *(_QWORD *)(v20 + 32);
                if (!v20)
                  goto LABEL_33;
                v23 = *(_WORD *)(v20 + 28);
                if ((v23 & 8) == 0)
                  goto LABEL_33;
                while ((v23 & 0x10) == 0
                     || *(_QWORD *)(*(_QWORD *)(v20 + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
                {
                  v20 = *(_QWORD *)(v20 + 32);
                  if (v20)
                  {
                    v23 = *(_WORD *)(v20 + 28);
                    if ((v23 & 8) != 0)
                      continue;
                  }
                  goto LABEL_33;
                }
              }
              do
              {
                v36 = v8;
                WebCore::HTMLFieldSetElement::addInvalidDescendant((WebCore::HTMLFieldSetElement *)v20, v8);
                v37 = WebCore::findElementAncestorOfType<WebCore::HTMLFieldSetElement>(v20);
                v8 = v36;
                v20 = v37;
              }
              while (v37);
            }
          }
        }
LABEL_33:
        v22 = *((_QWORD *)v2 + 1);
        if (!v22)
          goto LABEL_34;
        v38 = *(WebCore::HTMLFormElement **)(v22 + 8);
        if (!v38)
          goto LABEL_34;
        v33 = v8;
        WebCore::HTMLFormElement::addInvalidFormControl(v38, v8);
        goto LABEL_75;
      }
    }
    else
    {
      LOBYTE(v47) = 1;
      v49 = 0;
      v50 = 0;
      v48 = v6;
    }
    v27 = (v5 ^ 1) & (v9 >> 6);
    v44 = (const WebCore::HTMLElement *)v6;
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v47, (WTF::StringImpl *)0x4E, v5, 0);
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v47, (WTF::StringImpl *)0x29, v5 ^ 1, 0);
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v47, (WTF::StringImpl *)0x4D, v45, 0);
    WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v47, (WTF::StringImpl *)0x4C, v27, 0);
    WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v48, &v49);
    v8 = v44;
    LOBYTE(v9) = *((_BYTE *)v2 + 48);
    goto LABEL_28;
  }
LABEL_3:
  this = *((_QWORD *)v2 + 5);
  if (this)
  {
    this = WebCore::ValidationMessage::isVisible((WebCore::ValidationMessage *)this);
    if ((_DWORD)this)
    {
      this = WebCore::ValidatedFormListedElement::focusableValidationAnchorElement(v2, &v47);
      if (v47)
      {
        v46 = v47;
        WebCore::ValidatedFormListedElement::updateVisibleValidationMessage(v2, &v46);
        return (uint64_t)WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref(&v46);
      }
    }
  }
  return this;
}

BOOL WebCore::ValidatedFormListedElement::shouldAutocomplete(WebCore::ValidatedFormListedElement *this)
{
  uint64_t v1;
  WebCore::HTMLFormElement *v3;

  v1 = *((_QWORD *)this + 1);
  return !v1 || (v3 = *(WebCore::HTMLFormElement **)(v1 + 8)) == 0 || WebCore::HTMLFormElement::shouldAutocomplete(v3);
}

void WebCore::ValidatedFormListedElement::saveFormControlState(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

WTF *WebCore::ValidatedFormListedElement::restoreFormControlStateIfNecessary(WebCore::ValidatedFormListedElement *this)
{
  uint64_t v2;
  WTF::StringImpl *v3;
  WTF *result;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WebCore::FormController *v7;
  WTF *v8;
  void *v9;
  WTF *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF *v13;
  int v14;
  unsigned int v15;

  v2 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)this + 16))(this)
                             + 40)
                 + 8);
  v3 = *(WTF::StringImpl **)(v2 + 1352);
  if (!v3)
  {
    v3 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v3 = 0;
    *((_QWORD *)v3 + 1) = 0;
    v7 = *(WebCore::FormController **)(v2 + 1352);
    *(_QWORD *)(v2 + 1352) = v3;
    if (v7)
    {
      WebCore::FormController::~FormController(v7, v6);
      WTF::fastFree(v8, v9);
      v3 = *(WTF::StringImpl **)(v2 + 1352);
    }
  }
  result = (WTF *)(*(uint64_t (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)this + 304))(this);
  if ((_DWORD)result)
  {
    result = (WTF *)(*(uint64_t (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)this + 24))(this);
    if ((*((_BYTE *)result + 22) & 8) != 0)
    {
      result = (WTF *)(*(uint64_t (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)this + 296))(this);
      if ((_DWORD)result)
      {
        WebCore::FormController::takeStateForFormElement(v3, this, &v13);
        if (v15)
        {
          (*(void (**)(WebCore::ValidatedFormListedElement *, WTF **))(*(_QWORD *)this + 320))(this, &v13);
          if (v15)
          {
            v10 = v13;
            v11 = 8 * v15;
            do
            {
              v12 = *(WTF::StringImpl **)v10;
              *(_QWORD *)v10 = 0;
              if (v12)
              {
                if (*(_DWORD *)v12 == 2)
                  WTF::StringImpl::destroy(v12, v5);
                else
                  *(_DWORD *)v12 -= 2;
              }
              v10 = (WTF *)((char *)v10 + 8);
              v11 -= 8;
            }
            while (v11);
          }
        }
        result = v13;
        if (v13)
        {
          v13 = 0;
          v14 = 0;
          return (WTF *)WTF::fastFree(result, v5);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::ValidatedFormListedElement::matchesValidPseudoClass(WebCore::ValidatedFormListedElement *this)
{
  uint64_t result;

  result = (*(uint64_t (**)(WebCore::ValidatedFormListedElement *))(*(_QWORD *)this + 272))(this);
  if ((_DWORD)result)
    return *((_BYTE *)this + 48) & 1;
  return result;
}

unsigned __int8 *WebCore::ValidatedFormListedElement::setInteractedWithSinceLastFormSubmitEvent(unsigned __int8 *this, int a2)
{
  int v2;
  unsigned __int8 *v3;
  void *v4;
  uint64_t v5;
  _BOOL4 v6;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;

  if (((((this[48] & 0x40) == 0) ^ a2) & 1) != 0)
    return this;
  v2 = a2;
  v3 = this;
  v5 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)this + 16))(this);
  if (v2)
  {
    if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v3 + 272))(v3))
      v2 = v3[48] & 1;
    else
      v2 = 0;
    if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)v3 + 272))(v3))
      v6 = (v3[48] & 1) == 0;
    else
      v6 = 0;
    v7 = 64;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  if ((*(_BYTE *)(v5 + 22) & 8) == 0)
    goto LABEL_27;
  v8 = *(uint64_t **)(v5 + 40);
  v9 = v8[1];
  if (!*(_QWORD *)(v9 + 1944) || *(_BYTE *)(v9 + 3405))
    goto LABEL_27;
  if ((*(_BYTE *)(v5 + 70) & 4) != 0)
  {
    v13 = *v8;
    v14 = (*(_WORD *)(v13 + 28) & 0x80) == 0 || v13 == 0;
    v15 = v13 + 216;
    if (v14)
      v15 = v9 + 1328;
    if (!*(_BYTE *)(*(_QWORD *)v15 + 236))
      goto LABEL_27;
  }
  v10 = *(_QWORD *)(v9 + 1272);
  if (v10 && (*(_BYTE *)(v10 + 70) & 4) != 0)
  {
LABEL_27:
    LOBYTE(v20) = 0;
    v22 = 0;
    v23 = 0;
    v21 = v5;
  }
  else
  {
    if (*(_BYTE *)(v9 + 3362)
      || (v11 = *(unsigned __int8 *)(v9 + 3390), !*(_BYTE *)(v9 + 3390))
      && (*(_BYTE *)(v9 + 70) & 8) == 0
      && !*(_QWORD *)(v9 + 1560)
      && (v12 = *(_QWORD *)(v9 + 1328), !*(_BYTE *)(v12 + 233))
      && !*(_BYTE *)(v12 + 234))
    {
      LOBYTE(v20) = 1;
      v22 = 0;
      v23 = 0;
      v21 = v5;
      goto LABEL_41;
    }
    v16 = *(unsigned __int8 *)(v9 + 3391);
    if (v11)
      v17 = v16 == 0;
    else
      v17 = 0;
    v18 = !v17;
    LOBYTE(v20) = v18;
    v22 = 0;
    v23 = 0;
    v21 = v5;
    if (!v17)
    {
LABEL_41:
      WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v20, (WTF::StringImpl *)0x4D, v2, 0);
      WebCore::Style::PseudoClassChangeInvalidation::computeInvalidation(&v20, (WTF::StringImpl *)0x4C, v6, 0);
      WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v21, &v22);
      v19 = v20;
      v3[48] = v3[48] & 0xBF | v7;
      if (v19)
        WebCore::Style::Invalidator::invalidateWithMatchElementRuleSets(v21, &v23);
      goto LABEL_29;
    }
  }
  v3[48] = v3[48] & 0xBF | v7;
LABEL_29:
  if (v23)
    WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v23, v4);
  this = v22;
  if (v22)
    return (unsigned __int8 *)WTF::HashTable<WebCore::Style::MatchElement,WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::HashMap<WebCore::Style::MatchElement,WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<WebCore::Style::MatchElement>,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>,WTF::HashTraits<WTF::Vector<WTF::RefPtr<WebCore::Style::RuleSet const,WTF::RawPtrTraits<WebCore::Style::RuleSet const>,WTF::DefaultRefDerefTraits<WebCore::Style::RuleSet const>>,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::StrongEnumHashTraits<WebCore::Style::MatchElement>>::deallocateTable((uint64_t)v22, v4);
  return this;
}

WTF::StringImpl *WebCore::ValidationMessage::deleteBubbleTree(WebCore::ValidationMessage *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *result;
  uint64_t v9;
  WTF::StringImpl *v10;
  char v11;

  v3 = *((_QWORD *)this + 4);
  if (v3)
  {
    *(_DWORD *)(v3 + 24) += 2;
    if ((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 72) & 0xFFFFFFFFFFFFLL) != 0)
      v4 = *(_QWORD *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 72) & 0xFFFFFFFFFFFFLL) + 0x58);
    else
      v4 = 0;
    *(_DWORD *)(v4 + 24) += 2;
    v5 = *((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = 0;
    if (v5)
    {
      if (*(_DWORD *)(v5 + 24) == 2)
      {
        if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v5);
      }
      else
      {
        *(_DWORD *)(v5 + 24) -= 2;
      }
    }
    v6 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (v6)
    {
      if (*(_DWORD *)(v6 + 24) == 2)
      {
        if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v6);
      }
      else
      {
        *(_DWORD *)(v6 + 24) -= 2;
      }
    }
    WebCore::ContainerNode::removeChild((WebCore::ContainerNode *)v4, (WebCore::Node *)v3, &v9);
    if (v11 && v10)
    {
      if (*(_DWORD *)v10 == 2)
        WTF::StringImpl::destroy(v10, a2);
      else
        *(_DWORD *)v10 -= 2;
    }
    v7 = *((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;
    if (v7)
    {
      if (*(_DWORD *)(v7 + 24) == 2)
      {
        if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v7);
      }
      else
      {
        *(_DWORD *)(v7 + 24) -= 2;
      }
    }
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v4);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  result = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

WebCore::Element *WebCore::ValidationMessage::buildBubbleTree(WebCore::ValidationMessage *this)
{
  WebCore::Element *result;
  uint64_t v3;
  WebCore::Document *v4;
  uint64_t v5;
  WebCore::Node *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::StyledElement *v19;
  WTF::StringImpl *v20;
  WebCore::MutableStyleProperties *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  WTF::String *v24;
  __n128 v25;
  int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t *v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t *v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t *v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t *v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  WebCore::Node *v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t *v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  WebCore::Node *v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t *v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  char v110[8];
  WTF::StringImpl *v111;
  char v112;
  char v113[8];
  WTF::StringImpl *v114;
  char v115;
  char v116[8];
  WTF::StringImpl *v117;
  char v118;
  char v119[8];
  WTF::StringImpl *v120;
  char v121;
  char v122[8];
  WTF::StringImpl *v123;
  char v124;
  char v125[8];
  WTF::StringImpl *v126;
  char v127;
  char v128[8];
  WTF::StringImpl *v129;
  char v130;
  char v131[8];
  WTF::StringImpl *v132;
  char v133;
  int *v134;

  result = *(WebCore::Element **)(*((_QWORD *)this + 1) + 8);
  if ((*((_QWORD *)result + 8) & 0xFFFFFFFFFFFFLL) == 0)
    return result;
  if ((*(_BYTE *)((*((_QWORD *)result + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195CD3360);
  }
  v3 = WebCore::Element::ensureUserAgentShadowRoot(result);
  *(_DWORD *)(v3 + 24) += 2;
  ++WebCore::ScriptDisallowedScope::s_count;
  v4 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 8) + 40) + 8);
  v5 = bmalloc::api::isoAllocate();
  v6 = (WebCore::Node *)v5;
  *(_OWORD *)(v5 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v5 + 24) = 0x101C00000002;
  *(_QWORD *)(v5 + 32) = 0;
  v7 = (_DWORD *)((char *)v4 + 96);
  *(_QWORD *)(v5 + 40) = (char *)v4 + 96;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  ++*((_DWORD *)v4 + 831);
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 88) = 0;
  v8 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v5 + 96) = v8;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)v5 = off_1E33B9CC0;
  v9 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v6;
  if (v9)
  {
    if (*(_DWORD *)(v9 + 24) == 2)
    {
      if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v9);
        v6 = (WebCore::Node *)*((_QWORD *)this + 4);
      }
    }
    else
    {
      *(_DWORD *)(v9 + 24) -= 2;
    }
  }
  WebCore::ContainerNode::appendChild(v3, v6, (uint64_t)v131);
  if (v133)
  {
    v11 = v132;
    v132 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
  }
  v12 = (WTF::StringImpl *)*((_QWORD *)this + 4);
  {
    WTF::AtomStringImpl::add();
    WebCore::UserAgentParts::webkitValidationBubble(void)::webkitValidationBubble = (uint64_t)v134;
  }
  v13 = *((_QWORD *)v12 + 13);
  if (!v13)
    goto LABEL_26;
  v14 = *(_DWORD *)(v13 + 4);
  if ((v14 & 1) != 0)
  {
    v15 = *(uint64_t **)(v13 + 40);
    v16 = *(_DWORD *)(v13 + 52);
    if (!v16)
    {
LABEL_26:
      v17 = 0xFFFFFFFFLL;
      goto LABEL_27;
    }
  }
  else
  {
    v15 = (uint64_t *)(v13 + 32);
    v16 = v14 >> 5;
    if (!v16)
      goto LABEL_26;
  }
  v17 = 0;
  while (1)
  {
    v18 = *v15;
    if (*v15 == WebCore::HTMLNames::useragentpartAttr
      || *(_QWORD *)(v18 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
      && *(_QWORD *)(v18 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
    {
      break;
    }
    ++v17;
    v15 += 2;
    if (v16 == v17)
      goto LABEL_26;
  }
LABEL_27:
  WebCore::Element::setAttributeInternal(v12, v17, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, (WTF::StringImpl **)&WebCore::UserAgentParts::webkitValidationBubble(void)::webkitValidationBubble, 0);
  v19 = (WebCore::StyledElement *)*((_QWORD *)this + 4);
  v21 = WebCore::StyledElement::ensureMutableInlineStyle(v19, v20);
  WebCore::staticCSSValuePool[4868] += 2;
  v134 = &WebCore::staticCSSValuePool[4868];
  WebCore::MutableStyleProperties::setProperty(v21, 202, &v134, 0);
  v26 = v134;
  v134 = 0;
  if (v26)
  {
    if (*v26 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v26, v22);
    else
      *v26 -= 2;
  }
  WebCore::StyledElement::inlineStyleChanged(v19, (uint64_t)v22, v23, v24, v25);
  v27 = bmalloc::api::isoAllocate();
  v28 = v27;
  *(_OWORD *)(v27 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v27 + 24) = 0x101C00000002;
  *(_QWORD *)(v27 + 32) = 0;
  *(_QWORD *)(v27 + 40) = v7;
  *(_OWORD *)(v27 + 48) = 0u;
  *(_OWORD *)(v27 + 64) = 0u;
  ++*((_DWORD *)v4 + 831);
  *(_QWORD *)(v27 + 80) = 0;
  *(_QWORD *)(v27 + 88) = 0;
  v29 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v27 + 96) = v29;
  *(_QWORD *)(v27 + 104) = 0;
  *(_QWORD *)v27 = off_1E33B9CC0;
  WebCore::ContainerNode::appendChild(*((_QWORD *)this + 4), (WebCore::Node *)v27, (uint64_t)v128);
  if (v130)
  {
    v31 = v129;
    v129 = 0;
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v30);
      else
        *(_DWORD *)v31 -= 2;
    }
  }
  {
    WTF::AtomStringImpl::add();
    WebCore::UserAgentParts::webkitValidationBubbleArrowClipper(void)::webkitValidationBubbleArrowClipper = (uint64_t)v134;
  }
  v32 = *(_QWORD *)(v28 + 104);
  if (!v32)
    goto LABEL_51;
  v33 = *(_DWORD *)(v32 + 4);
  if ((v33 & 1) != 0)
  {
    v34 = *(uint64_t **)(v32 + 40);
    v35 = *(_DWORD *)(v32 + 52);
    if (!v35)
    {
LABEL_51:
      v36 = 0xFFFFFFFFLL;
      goto LABEL_52;
    }
  }
  else
  {
    v34 = (uint64_t *)(v32 + 32);
    v35 = v33 >> 5;
    if (!v35)
      goto LABEL_51;
  }
  v36 = 0;
  while (1)
  {
    v37 = *v34;
    if (*v34 == WebCore::HTMLNames::useragentpartAttr
      || *(_QWORD *)(v37 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
      && *(_QWORD *)(v37 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
    {
      break;
    }
    ++v36;
    v34 += 2;
    if (v35 == v36)
      goto LABEL_51;
  }
LABEL_52:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v28, v36, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, (WTF::StringImpl **)&WebCore::UserAgentParts::webkitValidationBubbleArrowClipper(void)::webkitValidationBubbleArrowClipper, 0);
  v38 = bmalloc::api::isoAllocate();
  v39 = v38;
  *(_OWORD *)(v38 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v38 + 24) = 0x101C00000002;
  *(_QWORD *)(v38 + 32) = 0;
  *(_QWORD *)(v38 + 40) = v7;
  *(_OWORD *)(v38 + 48) = 0u;
  *(_OWORD *)(v38 + 64) = 0u;
  ++*((_DWORD *)v4 + 831);
  *(_QWORD *)(v38 + 80) = 0;
  *(_QWORD *)(v38 + 88) = 0;
  v40 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v38 + 96) = v40;
  *(_QWORD *)(v38 + 104) = 0;
  *(_QWORD *)v38 = off_1E33B9CC0;
  WebCore::ContainerNode::appendChild(v28, (WebCore::Node *)v38, (uint64_t)v125);
  if (v127)
  {
    v42 = v126;
    v126 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 2)
        WTF::StringImpl::destroy(v42, v41);
      else
        *(_DWORD *)v42 -= 2;
    }
  }
  {
    WTF::AtomStringImpl::add();
    WebCore::UserAgentParts::webkitValidationBubbleArrow(void)::webkitValidationBubbleArrow = (uint64_t)v134;
  }
  v43 = *(_QWORD *)(v39 + 104);
  if (!v43)
    goto LABEL_72;
  v44 = *(_DWORD *)(v43 + 4);
  if ((v44 & 1) != 0)
  {
    v45 = *(uint64_t **)(v43 + 40);
    v46 = *(_DWORD *)(v43 + 52);
    if (!v46)
    {
LABEL_72:
      v47 = 0xFFFFFFFFLL;
      goto LABEL_73;
    }
  }
  else
  {
    v45 = (uint64_t *)(v43 + 32);
    v46 = v44 >> 5;
    if (!v46)
      goto LABEL_72;
  }
  v47 = 0;
  while (1)
  {
    v48 = *v45;
    if (*v45 == WebCore::HTMLNames::useragentpartAttr
      || *(_QWORD *)(v48 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
      && *(_QWORD *)(v48 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
    {
      break;
    }
    ++v47;
    v45 += 2;
    if (v46 == v47)
      goto LABEL_72;
  }
LABEL_73:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v39, v47, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, (WTF::StringImpl **)&WebCore::UserAgentParts::webkitValidationBubbleArrow(void)::webkitValidationBubbleArrow, 0);
  v49 = bmalloc::api::isoAllocate();
  v50 = v49;
  *(_OWORD *)(v49 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v49 + 24) = 0x101C00000002;
  *(_QWORD *)(v49 + 32) = 0;
  *(_QWORD *)(v49 + 40) = v7;
  *(_OWORD *)(v49 + 48) = 0u;
  *(_OWORD *)(v49 + 64) = 0u;
  ++*((_DWORD *)v4 + 831);
  *(_QWORD *)(v49 + 80) = 0;
  *(_QWORD *)(v49 + 88) = 0;
  v51 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v49 + 96) = v51;
  *(_QWORD *)(v49 + 104) = 0;
  *(_QWORD *)v49 = off_1E33B9CC0;
  WebCore::ContainerNode::appendChild(*((_QWORD *)this + 4), (WebCore::Node *)v49, (uint64_t)v122);
  if (v124)
  {
    v53 = v123;
    v123 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
        WTF::StringImpl::destroy(v53, v52);
      else
        *(_DWORD *)v53 -= 2;
    }
  }
  {
    WTF::AtomStringImpl::add();
    WebCore::UserAgentParts::webkitValidationBubbleMessage(void)::webkitValidationBubbleMessage = (uint64_t)v134;
  }
  v54 = *(_QWORD *)(v50 + 104);
  if (!v54)
    goto LABEL_93;
  v55 = *(_DWORD *)(v54 + 4);
  if ((v55 & 1) != 0)
  {
    v56 = *(uint64_t **)(v54 + 40);
    v57 = *(_DWORD *)(v54 + 52);
    if (!v57)
    {
LABEL_93:
      v58 = 0xFFFFFFFFLL;
      goto LABEL_94;
    }
  }
  else
  {
    v56 = (uint64_t *)(v54 + 32);
    v57 = v55 >> 5;
    if (!v57)
      goto LABEL_93;
  }
  v58 = 0;
  while (1)
  {
    v59 = *v56;
    if (*v56 == WebCore::HTMLNames::useragentpartAttr
      || *(_QWORD *)(v59 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
      && *(_QWORD *)(v59 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
    {
      break;
    }
    ++v58;
    v56 += 2;
    if (v57 == v58)
      goto LABEL_93;
  }
LABEL_94:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v50, v58, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, (WTF::StringImpl **)&WebCore::UserAgentParts::webkitValidationBubbleMessage(void)::webkitValidationBubbleMessage, 0);
  v60 = bmalloc::api::isoAllocate();
  v61 = v60;
  *(_OWORD *)(v60 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v60 + 24) = 0x101C00000002;
  *(_QWORD *)(v60 + 32) = 0;
  *(_QWORD *)(v60 + 40) = v7;
  *(_OWORD *)(v60 + 48) = 0u;
  *(_OWORD *)(v60 + 64) = 0u;
  ++*((_DWORD *)v4 + 831);
  *(_QWORD *)(v60 + 80) = 0;
  *(_QWORD *)(v60 + 88) = 0;
  v62 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v60 + 96) = v62;
  *(_QWORD *)(v60 + 104) = 0;
  *(_QWORD *)v60 = off_1E33B9CC0;
  WebCore::ContainerNode::appendChild(v50, (WebCore::Node *)v60, (uint64_t)v119);
  if (v121)
  {
    v64 = v120;
    v120 = 0;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2)
        WTF::StringImpl::destroy(v64, v63);
      else
        *(_DWORD *)v64 -= 2;
    }
  }
  {
    WTF::AtomStringImpl::add();
    WebCore::UserAgentParts::webkitValidationBubbleIcon(void)::webkitValidationBubbleIcon = (uint64_t)v134;
  }
  v65 = *(_QWORD *)(v61 + 104);
  if (!v65)
    goto LABEL_114;
  v66 = *(_DWORD *)(v65 + 4);
  if ((v66 & 1) != 0)
  {
    v67 = *(uint64_t **)(v65 + 40);
    v68 = *(_DWORD *)(v65 + 52);
    if (!v68)
    {
LABEL_114:
      v69 = 0xFFFFFFFFLL;
      goto LABEL_115;
    }
  }
  else
  {
    v67 = (uint64_t *)(v65 + 32);
    v68 = v66 >> 5;
    if (!v68)
      goto LABEL_114;
  }
  v69 = 0;
  while (1)
  {
    v70 = *v67;
    if (*v67 == WebCore::HTMLNames::useragentpartAttr
      || *(_QWORD *)(v70 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
      && *(_QWORD *)(v70 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
    {
      break;
    }
    ++v69;
    v67 += 2;
    if (v68 == v69)
      goto LABEL_114;
  }
LABEL_115:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v61, v69, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, (WTF::StringImpl **)&WebCore::UserAgentParts::webkitValidationBubbleIcon(void)::webkitValidationBubbleIcon, 0);
  v71 = bmalloc::api::isoAllocate();
  v72 = v71;
  *(_OWORD *)(v71 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v71 + 24) = 0x101C00000002;
  *(_QWORD *)(v71 + 32) = 0;
  *(_QWORD *)(v71 + 40) = v7;
  *(_OWORD *)(v71 + 48) = 0u;
  *(_OWORD *)(v71 + 64) = 0u;
  ++*((_DWORD *)v4 + 831);
  *(_QWORD *)(v71 + 80) = 0;
  *(_QWORD *)(v71 + 88) = 0;
  v73 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v71 + 96) = v73;
  *(_QWORD *)(v71 + 104) = 0;
  *(_QWORD *)v71 = off_1E33B9CC0;
  WebCore::ContainerNode::appendChild(v50, (WebCore::Node *)v71, (uint64_t)v116);
  if (v118)
  {
    v75 = v117;
    v117 = 0;
    if (v75)
    {
      if (*(_DWORD *)v75 == 2)
        WTF::StringImpl::destroy(v75, v74);
      else
        *(_DWORD *)v75 -= 2;
    }
  }
  {
    WTF::AtomStringImpl::add();
    WebCore::UserAgentParts::webkitValidationBubbleTextBlock(void)::webkitValidationBubbleTextBlock = (uint64_t)v134;
  }
  v76 = *(_QWORD *)(v72 + 104);
  if (!v76)
    goto LABEL_135;
  v77 = *(_DWORD *)(v76 + 4);
  if ((v77 & 1) != 0)
  {
    v78 = *(uint64_t **)(v76 + 40);
    v79 = *(_DWORD *)(v76 + 52);
    if (!v79)
    {
LABEL_135:
      v80 = 0xFFFFFFFFLL;
      goto LABEL_136;
    }
  }
  else
  {
    v78 = (uint64_t *)(v76 + 32);
    v79 = v77 >> 5;
    if (!v79)
      goto LABEL_135;
  }
  v80 = 0;
  while (1)
  {
    v81 = *v78;
    if (*v78 == WebCore::HTMLNames::useragentpartAttr
      || *(_QWORD *)(v81 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
      && *(_QWORD *)(v81 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
    {
      break;
    }
    ++v80;
    v78 += 2;
    if (v79 == v80)
      goto LABEL_135;
  }
LABEL_136:
  WebCore::Element::setAttributeInternal((WTF::StringImpl *)v72, v80, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, (WTF::StringImpl **)&WebCore::UserAgentParts::webkitValidationBubbleTextBlock(void)::webkitValidationBubbleTextBlock, 0);
  v82 = bmalloc::api::isoAllocate();
  v83 = (WebCore::Node *)v82;
  *(_OWORD *)(v82 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v82 + 24) = 0x101C00000002;
  *(_QWORD *)(v82 + 32) = 0;
  *(_QWORD *)(v82 + 40) = v7;
  *(_OWORD *)(v82 + 48) = 0u;
  *(_OWORD *)(v82 + 64) = 0u;
  ++*((_DWORD *)v4 + 831);
  *(_QWORD *)(v82 + 80) = 0;
  *(_QWORD *)(v82 + 88) = 0;
  v84 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v82 + 96) = v84;
  *(_QWORD *)(v82 + 104) = 0;
  *(_QWORD *)v82 = off_1E33B9CC0;
  v85 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = v83;
  if (v85)
  {
    if (*(_DWORD *)(v85 + 24) == 2)
    {
      if ((*(_WORD *)(v85 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v85);
        v83 = (WebCore::Node *)*((_QWORD *)this + 5);
      }
    }
    else
    {
      *(_DWORD *)(v85 + 24) -= 2;
    }
  }
  WebCore::ContainerNode::appendChild(v72, v83, (uint64_t)v113);
  if (v115)
  {
    v87 = v114;
    v114 = 0;
    if (v87)
    {
      if (*(_DWORD *)v87 == 2)
        WTF::StringImpl::destroy(v87, v86);
      else
        *(_DWORD *)v87 -= 2;
    }
  }
  v88 = (WTF::StringImpl *)*((_QWORD *)this + 5);
  {
    v109 = (WTF::StringImpl *)*((_QWORD *)this + 5);
    WTF::AtomStringImpl::add();
    v88 = v109;
    WebCore::UserAgentParts::webkitValidationBubbleHeading(void)::webkitValidationBubbleHeading = (uint64_t)v134;
  }
  v89 = *((_QWORD *)v88 + 13);
  if (!v89)
    goto LABEL_159;
  v90 = *(_DWORD *)(v89 + 4);
  if ((v90 & 1) != 0)
  {
    v91 = *(uint64_t **)(v89 + 40);
    v92 = *(_DWORD *)(v89 + 52);
    if (!v92)
    {
LABEL_159:
      v93 = 0xFFFFFFFFLL;
      goto LABEL_160;
    }
  }
  else
  {
    v91 = (uint64_t *)(v89 + 32);
    v92 = v90 >> 5;
    if (!v92)
      goto LABEL_159;
  }
  v93 = 0;
  while (1)
  {
    v94 = *v91;
    if (*v91 == WebCore::HTMLNames::useragentpartAttr
      || *(_QWORD *)(v94 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
      && *(_QWORD *)(v94 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
    {
      break;
    }
    ++v93;
    v91 += 2;
    if (v92 == v93)
      goto LABEL_159;
  }
LABEL_160:
  WebCore::Element::setAttributeInternal(v88, v93, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, (WTF::StringImpl **)&WebCore::UserAgentParts::webkitValidationBubbleHeading(void)::webkitValidationBubbleHeading, 0);
  v95 = bmalloc::api::isoAllocate();
  v96 = (WebCore::Node *)v95;
  *(_OWORD *)(v95 + 8) = xmmword_1968BC9D0;
  *(_QWORD *)(v95 + 24) = 0x101C00000002;
  *(_QWORD *)(v95 + 32) = 0;
  *(_QWORD *)(v95 + 40) = v7;
  *(_OWORD *)(v95 + 48) = 0u;
  *(_OWORD *)(v95 + 64) = 0u;
  ++*((_DWORD *)v4 + 831);
  *(_QWORD *)(v95 + 80) = 0;
  *(_QWORD *)(v95 + 88) = 0;
  v97 = WebCore::HTMLNames::divTag;
  if (WebCore::HTMLNames::divTag)
    ++*(_DWORD *)WebCore::HTMLNames::divTag;
  *(_QWORD *)(v95 + 96) = v97;
  *(_QWORD *)(v95 + 104) = 0;
  *(_QWORD *)v95 = off_1E33B9CC0;
  v98 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = v96;
  if (v98)
  {
    if (*(_DWORD *)(v98 + 24) == 2)
    {
      if ((*(_WORD *)(v98 + 30) & 0x400) == 0)
      {
        WebCore::Node::removedLastRef((WebCore::Node *)v98);
        v96 = (WebCore::Node *)*((_QWORD *)this + 6);
      }
    }
    else
    {
      *(_DWORD *)(v98 + 24) -= 2;
    }
  }
  WebCore::ContainerNode::appendChild(v72, v96, (uint64_t)v110);
  if (v112)
  {
    v100 = v111;
    v111 = 0;
    if (v100)
    {
      if (*(_DWORD *)v100 == 2)
        WTF::StringImpl::destroy(v100, v99);
      else
        *(_DWORD *)v100 -= 2;
    }
  }
  v101 = (WTF::StringImpl *)*((_QWORD *)this + 6);
  {
    v108 = (WTF::StringImpl *)*((_QWORD *)this + 6);
    WTF::AtomStringImpl::add();
    v101 = v108;
    WebCore::UserAgentParts::webkitValidationBubbleBody(void)::webkitValidationBubbleBody = (uint64_t)v134;
  }
  v102 = *((_QWORD *)v101 + 13);
  if (v102)
  {
    v103 = *(_DWORD *)(v102 + 4);
    if ((v103 & 1) != 0)
    {
      v104 = *(uint64_t **)(v102 + 40);
      v105 = *(_DWORD *)(v102 + 52);
      if (!v105)
      {
LABEL_184:
        v106 = 0xFFFFFFFFLL;
        goto LABEL_185;
      }
    }
    else
    {
      v104 = (uint64_t *)(v102 + 32);
      v105 = v103 >> 5;
      if (!v105)
        goto LABEL_184;
    }
    v106 = 0;
    while (1)
    {
      v107 = *v104;
      if (*v104 == WebCore::HTMLNames::useragentpartAttr
        || *(_QWORD *)(v107 + 24) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 24)
        && *(_QWORD *)(v107 + 32) == *(_QWORD *)(WebCore::HTMLNames::useragentpartAttr + 32))
      {
        goto LABEL_185;
      }
      ++v106;
      v104 += 2;
      if (v105 == v106)
        goto LABEL_184;
    }
  }
  v106 = 0xFFFFFFFFLL;
LABEL_185:
  WebCore::Element::setAttributeInternal(v101, v106, (WebCore::TreeScope *)&WebCore::HTMLNames::useragentpartAttr, (WTF::StringImpl **)&WebCore::UserAgentParts::webkitValidationBubbleBody(void)::webkitValidationBubbleBody, 0);
  WebCore::ValidationMessage::setMessageDOMAndStartTimer(this);
  result = (WebCore::Element *)WebCore::Document::scheduleToAdjustValidationMessagePosition(v4, this);
  if (*(_DWORD *)(v72 + 24) == 2)
  {
    if ((*(_WORD *)(v72 + 30) & 0x400) == 0)
      result = (WebCore::Element *)WebCore::Node::removedLastRef((WebCore::Node *)v72);
  }
  else
  {
    *(_DWORD *)(v72 + 24) -= 2;
  }
  if (*(_DWORD *)(v61 + 24) == 2)
  {
    if ((*(_WORD *)(v61 + 30) & 0x400) == 0)
      result = (WebCore::Element *)WebCore::Node::removedLastRef((WebCore::Node *)v61);
  }
  else
  {
    *(_DWORD *)(v61 + 24) -= 2;
  }
  if (*(_DWORD *)(v50 + 24) == 2)
  {
    if ((*(_WORD *)(v50 + 30) & 0x400) == 0)
      result = (WebCore::Element *)WebCore::Node::removedLastRef((WebCore::Node *)v50);
  }
  else
  {
    *(_DWORD *)(v50 + 24) -= 2;
  }
  if (*(_DWORD *)(v39 + 24) == 2)
  {
    if ((*(_WORD *)(v39 + 30) & 0x400) == 0)
      result = (WebCore::Element *)WebCore::Node::removedLastRef((WebCore::Node *)v39);
  }
  else
  {
    *(_DWORD *)(v39 + 24) -= 2;
  }
  if (*(_DWORD *)(v28 + 24) == 2)
  {
    if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
      result = (WebCore::Element *)WebCore::Node::removedLastRef((WebCore::Node *)v28);
  }
  else
  {
    *(_DWORD *)(v28 + 24) -= 2;
  }
  --WebCore::ScriptDisallowedScope::s_count;
  if (*(_DWORD *)(v3 + 24) == 2)
  {
    if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
      return (WebCore::Element *)WebCore::Node::removedLastRef((WebCore::Node *)v3);
  }
  else
  {
    *(_DWORD *)(v3 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::ValidationMessage::setMessageDOMAndStartTimer(WebCore::ValidationMessage *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  WebCore::ContainerNode *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  WTF::StringImpl **v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t StatusReg;
  unsigned int *v44;
  unsigned int v45;
  _QWORD *v46;
  unint64_t v47;
  WTF::MonotonicTime *v48;
  uint64_t v49;
  double v50;
  double v51;
  double v52;
  _BYTE v53[8];
  WTF::StringImpl *v54;
  char v55;
  _BYTE v56[8];
  WTF::StringImpl *v57;
  char v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  char v62;
  uint64_t *v63;
  unsigned int v64;
  unsigned int v65;
  BOOL v66;
  uint64_t v67;
  unint64_t v68;
  __int16 v69;
  char v70;

  WebCore::ContainerNode::removeChildren(*((_QWORD *)this + 5));
  WebCore::ContainerNode::removeChildren(*((_QWORD *)this + 6));
  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 40) + 8);
  *(_DWORD *)(v2 + 24) += 2;
  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 + 16);
    v5 = *(_QWORD *)(v3 + 8);
    LODWORD(v3) = *(_DWORD *)(v3 + 4);
    v6 = (v4 >> 2) & 1;
  }
  else
  {
    v5 = 0;
    v6 = 1;
  }
  v67 = v5;
  v68 = v3 | (unint64_t)(v6 << 32);
  v69 = 10;
  v70 = 0;
  v63 = &v67;
  v64 = 0;
  v66 = (_DWORD)v3 == 0;
  result = WTF::StringView::SplitResult::Iterator::findNextSubstring((WTF::StringView::SplitResult::Iterator *)&v63);
  if (v64 != (_DWORD)v68 || !v66)
  {
    v8 = (WebCore::ContainerNode *)*((_QWORD *)this + 5);
    v9 = *((unsigned int *)v63 + 2);
    if (v9 <= v64)
      goto LABEL_15;
    LODWORD(v10) = v65;
    if (v9 - v64 <= v65)
    {
      if (!v64)
      {
        v10 = v63[1];
        goto LABEL_14;
      }
      LODWORD(v10) = v9 - v64;
    }
    v10 = v10;
    v11 = v9 - v64;
    if (*((_BYTE *)v63 + 12))
    {
      if (v11 >= v10)
      {
        v10 = v10 | 0x100000000;
        goto LABEL_14;
      }
LABEL_100:
      __break(1u);
      return result;
    }
    if (v11 < v10)
      goto LABEL_100;
LABEL_14:
    if ((v10 & 0xFF00000000) == 0)
    {
      WTF::String::String();
      goto LABEL_16;
    }
LABEL_15:
    WTF::String::String();
LABEL_16:
    WebCore::HTMLElement::setInnerText(v8, (WTF *)&v59, &v60);
    if (v62)
    {
      v13 = v61;
      v61 = 0;
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v12);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
    v14 = v59;
    v59 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v12);
      else
        *(_DWORD *)v14 -= 2;
    }
    result = WTF::StringView::SplitResult::Iterator::operator++();
    v15 = *(_DWORD *)(result + 8);
    v16 = *(unsigned __int8 *)(result + 16);
    v17 = v64;
    v18 = v66;
    if (v64 != (_DWORD)v68 || !v66)
    {
      v19 = v2 + 96;
      v20 = (WTF::StringImpl **)MEMORY[0x1E0CBF738];
      do
      {
        if (v17 != v15 || (v21 = v15, v18 != v16))
        {
          v22 = *((_QWORD *)this + 6);
          v23 = bmalloc::api::isoAllocate();
          v24 = v23;
          *(_OWORD *)(v23 + 8) = xmmword_1968BC9D0;
          *(_QWORD *)(v23 + 24) = 0x101C00000002;
          *(_QWORD *)(v23 + 32) = 0;
          *(_QWORD *)(v23 + 40) = v19;
          *(_OWORD *)(v23 + 48) = 0u;
          *(_OWORD *)(v23 + 64) = 0u;
          ++*(_DWORD *)(v2 + 3324);
          *(_QWORD *)(v23 + 80) = 0;
          *(_QWORD *)(v23 + 88) = 0;
          v25 = WebCore::HTMLNames::brTag;
          if (WebCore::HTMLNames::brTag)
            ++*(_DWORD *)WebCore::HTMLNames::brTag;
          *(_QWORD *)(v23 + 96) = v25;
          *(_QWORD *)(v23 + 104) = 0;
          *(_QWORD *)v23 = off_1E33B4C28;
          result = WebCore::ContainerNode::appendChild(v22, (WebCore::Node *)v23, (uint64_t)v56);
          if (v58)
          {
            result = (uint64_t)v57;
            v57 = 0;
            if (result)
            {
              if (*(_DWORD *)result == 2)
                result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v26);
              else
                *(_DWORD *)result -= 2;
            }
          }
          if (*(_DWORD *)(v24 + 24) == 2)
          {
            if ((*(_WORD *)(v24 + 30) & 0x400) == 0)
              result = WebCore::Node::removedLastRef((WebCore::Node *)v24);
          }
          else
          {
            *(_DWORD *)(v24 + 24) -= 2;
          }
          v21 = v64;
        }
        v27 = *((_QWORD *)this + 6);
        v28 = *((unsigned int *)v63 + 2);
        if (v28 <= v21)
        {
LABEL_47:
          WTF::String::String();
          goto LABEL_48;
        }
        LODWORD(v29) = v65;
        if (v28 - v21 <= v65)
        {
          if (!v21)
          {
            v29 = v63[1];
            goto LABEL_46;
          }
          LODWORD(v29) = v28 - v21;
        }
        v29 = v29;
        v30 = v28 - v21;
        if (*((_BYTE *)v63 + 12))
        {
          if (v30 < v29)
            goto LABEL_100;
          v29 = v29 | 0x100000000;
        }
        else if (v30 < v29)
        {
          goto LABEL_100;
        }
LABEL_46:
        if ((v29 & 0xFF00000000) != 0)
          goto LABEL_47;
        WTF::String::String();
LABEL_48:
        v31 = bmalloc::api::isoAllocate();
        v32 = v31;
        *(_OWORD *)(v31 + 8) = xmmword_1968BC9D0;
        *(_QWORD *)(v31 + 24) = 0x300300000002;
        *(_QWORD *)(v31 + 32) = 0;
        *(_QWORD *)(v31 + 40) = v19;
        *(_OWORD *)(v31 + 48) = 0u;
        *(_OWORD *)(v31 + 64) = 0u;
        ++*(_DWORD *)(v2 + 3324);
        v33 = v59;
        if (v59 || (v33 = *v20) != 0)
          *(_DWORD *)v33 += 2;
        *(_QWORD *)(v31 + 80) = v33;
        *(_QWORD *)v31 = off_1E33A8078;
        WebCore::ContainerNode::appendChild(v27, (WebCore::Node *)v31, (uint64_t)v53);
        if (v55)
        {
          v35 = v54;
          v54 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
              WTF::StringImpl::destroy(v35, v34);
            else
              *(_DWORD *)v35 -= 2;
          }
        }
        if (*(_DWORD *)(v32 + 24) == 2)
        {
          if ((*(_WORD *)(v32 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v32);
        }
        else
        {
          *(_DWORD *)(v32 + 24) -= 2;
        }
        v36 = v59;
        v59 = 0;
        if (v36)
        {
          if (*(_DWORD *)v36 == 2)
            WTF::StringImpl::destroy(v36, v34);
          else
            *(_DWORD *)v36 -= 2;
        }
        result = WTF::StringView::SplitResult::Iterator::operator++();
        v17 = v64;
        v18 = v66;
      }
      while (v64 != (_DWORD)v68 || !v66);
    }
  }
  v37 = *(_QWORD *)(v2 + 528);
  if (v37
    && (v38 = *(_QWORD *)(v37 + 8)) != 0
    && (v39 = *(_QWORD *)(v38 + 24)) != 0
    && (v40 = *(_QWORD *)(v39 + 8)) != 0
    && (v41 = *(_DWORD *)(*(_QWORD *)(v40 + 112) + 608), v41 > 0))
  {
    v42 = WTF::fastMalloc((WTF *)0x38);
    *(_QWORD *)v42 = off_1E3407128;
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    *(_OWORD *)(v42 + 8) = 0u;
    *(_OWORD *)(v42 + 24) = 0u;
    v44 = *(unsigned int **)(StatusReg + 736);
    if (!v44)
      v44 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 + 1, v44));
    *(_QWORD *)(v42 + 40) = v44;
    *(_QWORD *)v42 = off_1E31F7378;
    v46 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
    *v46 = off_1E33DBD60;
    v46[1] = WebCore::ValidationMessage::deleteBubbleTree;
    v46[2] = 0;
    v46[3] = this;
    *(_QWORD *)(v42 + 48) = v46;
    v48 = (WTF::MonotonicTime *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v42;
    if (v48)
    {
      v48 = (WTF::MonotonicTime *)(*(uint64_t (**)(WTF::MonotonicTime *))(*(_QWORD *)v48 + 8))(v48);
      v42 = *((_QWORD *)this + 3);
    }
    v49 = *((_QWORD *)this + 2);
    if (v49)
    {
      LODWORD(v47) = *(_DWORD *)(v49 + 4);
      v50 = (double)v47 * 0.001;
    }
    else
    {
      v50 = 0.0;
    }
    v51 = fmax(v50 * (double)v41, 5.0);
    *(_QWORD *)(v42 + 24) = 0;
    WTF::MonotonicTime::now(v48);
    result = WebCore::TimerBase::setNextFireTime(v42, v51 + v52);
  }
  else
  {
    result = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (result)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v2);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::ValidationMessage::adjustBubblePosition(uint64_t this)
{
  uint64_t v1;
  int v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unsigned int v9;
  int v10;
  int v11;
  double v12;
  double v13;
  WebCore::RenderObject *v14;
  WebCore::RenderObject *v15;
  WebCore::RenderObject *v16;
  void *v17;
  uint64_t v18;
  WTF *v19;
  WTF *v20;
  _OWORD v21[4];
  char v22;
  WTF *v23;
  WTF *v24;
  uint64_t v25;
  char v26;
  __int16 v27;
  int v28;
  int v29;

  if (!*(_QWORD *)(this + 32))
    return this;
  v1 = this;
  this = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 8) + 8) + 64) & 0xFFFFFFFFFFFFLL;
  if (!this)
    return this;
  if ((*(_BYTE *)(this + 45) & 2) != 0)
    goto LABEL_43;
  this = WebCore::RenderObject::absoluteBoundingBoxRect((WebCore::RenderObject *)this, 1, 0);
  if (v2 >= -33554432)
    v4 = v2 << 6;
  else
    v4 = 0x80000000;
  if (v2 <= 0x1FFFFFF)
    v5 = v4;
  else
    v5 = 0x7FFFFFFF;
  v6 = v3 << 6;
  if (v3 < -33554432)
    v6 = 0x80000000;
  if (v3 <= 0x1FFFFFF)
    v7 = v6;
  else
    v7 = 0x7FFFFFFF;
  if ((int)v5 >= 1 && v7 >= 1)
  {
    v9 = HIDWORD(this) << 6;
    if (SHIDWORD(this) < -33554432)
      v9 = 0x80000000;
    if (SHIDWORD(this) <= 0x1FFFFFF)
      v10 = v9;
    else
      v10 = 0x7FFFFFFF;
    if ((int)this >= -33554432)
      v11 = (_DWORD)this << 6;
    else
      v11 = 0x80000000;
    if ((int)this > 0x1FFFFFF)
      v11 = 0x7FFFFFFF;
    v12 = (double)v11 * 0.015625;
    v13 = (double)v10 * 0.015625;
    v14 = (WebCore::RenderObject *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 64) & 0xFFFFFFFFFFFFLL);
    if (!v14)
      goto LABEL_37;
    if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(v1 + 32) + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
    {
      v15 = WebCore::RenderObject::containingBlock(v14);
      if (v15)
      {
        v16 = v15;
        v22 = 0;
        v24 = 0;
        v25 = 0;
        v23 = 0;
        v26 = 0;
        memset(v21, 0, 41);
        v27 = 1;
        v28 = 0;
        v29 = 0;
        (*(void (**)(WebCore::RenderObject *, _QWORD, _OWORD *, uint64_t, _QWORD))(*(_QWORD *)v15 + 576))(v15, 0, v21, 4, 0);
        WebCore::TransformState::flatten((WebCore::TransformState *)v21, 0);
        v18 = *(_QWORD *)&v21[0];
        v19 = v24;
        v24 = 0;
        if (v19)
          WTF::fastFree(v19, v17);
        v20 = v23;
        v23 = 0;
        if (v20)
          WTF::fastFree(v20, v17);
        v12 = v12
            - (float)(*(float *)&v18
                    + (float)((float)(*(int (**)(WebCore::RenderObject *))(*(_QWORD *)v16 + 1016))(v16)
                            * 0.015625));
        v13 = v13
            - (float)(*((float *)&v18 + 1)
                    + (float)((float)(*(int (**)(WebCore::RenderObject *))(*(_QWORD *)v16 + 1000))(v16)
                            * 0.015625));
      }
LABEL_37:
      WebCore::StyledElement::setInlineStyleProperty(*(WebCore::StyledElement **)(v1 + 32), (WTF::StringImpl *)0x1C1, 6, 0, (double)v7 * 0.015625 + v13);
      if (v5 <= 0xFFF)
      {
        if ((double)(v5 >> 1) * 0.015625 + v12 + -32.0 >= 0.0)
          v12 = (double)(v5 >> 1) * 0.015625 + v12 + -32.0;
        else
          v12 = 0.0;
      }
      return WebCore::StyledElement::setInlineStyleProperty(*(WebCore::StyledElement **)(v1 + 32), (WTF::StringImpl *)0x18F, 6, 0, v12);
    }
LABEL_43:
    __break(0xC471u);
    JUMPOUT(0x195CD3D68);
  }
  return this;
}

WTF::StringImpl **WebCore::WeekInputType::formControlType(WebCore::WeekInputType *this)
{
  _QWORD v2[2];

  {
    v2[0] = "week";
    v2[1] = 5;
    WTF::NeverDestroyed<WTF::AtomString const,WTF::MainThreadAccessTraits>::NeverDestroyed<WTF::ASCIILiteral>(&WebCore::InputTypeNames::week(void)::name, (uint64_t)v2);
  }
  return &WebCore::InputTypeNames::week(void)::name;
}

uint64_t WebCore::WeekInputType::dateType(WebCore::WeekInputType *this)
{
  return 5;
}

void WebCore::WeekInputType::createStepRange(_QWORD *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v39;
  double v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  _BYTE v50[24];
  _BYTE v51[24];
  __int128 v52;
  uint64_t v53;
  _QWORD v54[4];
  char v55;
  _BYTE v56[120];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v56[12] = 0x100000001;
  *(_QWORD *)v56 = 259200000;
  *(_WORD *)&v56[8] = 0;
  WebCore::InputType::findStepBase(a1, (uint64_t)v56, (uint64_t)&v52);
  v6 = *(_QWORD *)(*(_QWORD *)(a1[3] + 8) + 104);
  if (!v6)
    goto LABEL_12;
  v7 = *(_DWORD *)(v6 + 4);
  if ((v7 & 1) == 0)
  {
    v8 = v6 + 32;
    LODWORD(v9) = v7 >> 5;
    if ((_DWORD)v9)
      goto LABEL_4;
LABEL_12:
    v10 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_13;
  }
  v8 = *(_QWORD *)(v6 + 40);
  LODWORD(v9) = *(_DWORD *)(v6 + 52);
  if (!(_DWORD)v9)
    goto LABEL_12;
LABEL_4:
  v9 = v9;
  v10 = (uint64_t *)(v8 + 8);
  while (1)
  {
    v11 = *(v10 - 1);
    if (v11 == WebCore::HTMLNames::minAttr
      || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 24)
      && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::minAttr + 32))
    {
      break;
    }
    v10 += 2;
    if (!--v9)
    {
      v10 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_13:
  v12 = (const char *)WTF::numberToString();
  v13 = (uint64_t)v12;
  v14 = 0x100000000;
  if (v12)
    v14 = strlen(v12) | 0x100000000;
  WebCore::Decimal::fromString(v13, v14, (uint64_t)v50);
  v15 = *v10;
  if (*v10)
  {
    v16 = *(_QWORD *)(v15 + 8);
    v17 = *(unsigned int *)(v15 + 4) | ((unint64_t)((*(_DWORD *)(v15 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v16 = 0;
    v17 = 0x100000000;
  }
  (*(void (**)(_QWORD *__return_ptr, _QWORD *, uint64_t, unint64_t))(*a1 + 936))(v54, a1, v16, v17);
  if (v55)
  {
    v40 = WebCore::DateComponents::millisecondsSinceEpoch((WebCore::DateComponents *)v54);
    if ((*(_QWORD *)&v40 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      *(_QWORD *)v51 = 0;
      *(_WORD *)&v51[8] = 0;
      if (fabs(v40) == INFINITY)
      {
        *(_DWORD *)&v51[12] = 0;
        *(_DWORD *)&v51[16] = v40 < 0.0;
      }
      else
      {
        *(_QWORD *)&v51[12] = 2;
      }
    }
    else
    {
      v41 = (const char *)WTF::numberToString();
      v42 = (uint64_t)v41;
      v43 = 0x100000000;
      if (v41)
        v43 = strlen(v41) | 0x100000000;
      WebCore::Decimal::fromString(v42, v43, (uint64_t)v51);
    }
  }
  else
  {
    *(_OWORD *)v51 = *(_OWORD *)v50;
    *(_QWORD *)&v51[16] = *(_QWORD *)&v50[16];
  }
  v18 = *(_QWORD *)(*(_QWORD *)(a1[3] + 8) + 104);
  if (!v18)
    goto LABEL_30;
  v19 = *(_DWORD *)(v18 + 4);
  if ((v19 & 1) == 0)
  {
    v20 = v18 + 32;
    LODWORD(v21) = v19 >> 5;
    if ((_DWORD)v21)
      goto LABEL_22;
LABEL_30:
    v22 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_31;
  }
  v20 = *(_QWORD *)(v18 + 40);
  LODWORD(v21) = *(_DWORD *)(v18 + 52);
  if (!(_DWORD)v21)
    goto LABEL_30;
LABEL_22:
  v21 = v21;
  v22 = (uint64_t *)(v20 + 8);
  while (1)
  {
    v23 = *(v22 - 1);
    if (v23 == WebCore::HTMLNames::maxAttr
      || *(_QWORD *)(v23 + 24) == *(_QWORD *)(WebCore::HTMLNames::maxAttr + 24)
      && *(_QWORD *)(v23 + 32) == *(_QWORD *)(WebCore::HTMLNames::maxAttr + 32))
    {
      break;
    }
    v22 += 2;
    if (!--v21)
    {
      v22 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_31:
  v24 = (const char *)WTF::numberToString();
  v25 = (uint64_t)v24;
  v26 = 0x100000000;
  if (v24)
    v26 = strlen(v24) | 0x100000000;
  WebCore::Decimal::fromString(v25, v26, (uint64_t)&v48);
  v27 = *v22;
  if (*v22)
  {
    v28 = *(_QWORD *)(v27 + 8);
    v29 = *(unsigned int *)(v27 + 4) | ((unint64_t)((*(_DWORD *)(v27 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v28 = 0;
    v29 = 0x100000000;
  }
  (*(void (**)(_QWORD *__return_ptr, _QWORD *, uint64_t, unint64_t))(*a1 + 936))(v54, a1, v28, v29);
  if (v55)
  {
    v44 = WebCore::DateComponents::millisecondsSinceEpoch((WebCore::DateComponents *)v54);
    if ((*(_QWORD *)&v44 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      *(_QWORD *)v50 = 0;
      *(_WORD *)&v50[8] = 0;
      if (fabs(v44) == INFINITY)
      {
        *(_DWORD *)&v50[12] = 0;
        *(_DWORD *)&v50[16] = v44 < 0.0;
      }
      else
      {
        *(_QWORD *)&v50[12] = 2;
      }
    }
    else
    {
      v45 = (const char *)WTF::numberToString();
      v46 = (uint64_t)v45;
      v47 = 0x100000000;
      if (v45)
        v47 = strlen(v45) | 0x100000000;
      WebCore::Decimal::fromString(v46, v47, (uint64_t)v50);
    }
  }
  else
  {
    *(_OWORD *)v50 = v48;
    *(_QWORD *)&v50[16] = v49;
  }
  v30 = *(_QWORD *)(*(_QWORD *)(a1[3] + 8) + 104);
  if (!v30)
    goto LABEL_48;
  v31 = *(_DWORD *)(v30 + 4);
  if ((v31 & 1) == 0)
  {
    v32 = v30 + 32;
    LODWORD(v33) = v31 >> 5;
    if ((_DWORD)v33)
      goto LABEL_40;
LABEL_48:
    v34 = (uint64_t *)MEMORY[0x1E0CBF2F8];
    goto LABEL_49;
  }
  v32 = *(_QWORD *)(v30 + 40);
  LODWORD(v33) = *(_DWORD *)(v30 + 52);
  if (!(_DWORD)v33)
    goto LABEL_48;
LABEL_40:
  v33 = v33;
  v34 = (uint64_t *)(v32 + 8);
  while (1)
  {
    v35 = *(v34 - 1);
    if (v35 == WebCore::HTMLNames::stepAttr
      || *(_QWORD *)(v35 + 24) == *(_QWORD *)(WebCore::HTMLNames::stepAttr + 24)
      && *(_QWORD *)(v35 + 32) == *(_QWORD *)(WebCore::HTMLNames::stepAttr + 32))
    {
      break;
    }
    v34 += 2;
    if (!--v33)
    {
      v34 = (uint64_t *)MEMORY[0x1E0CBF2F8];
      break;
    }
  }
LABEL_49:
  v36 = *v34;
  if (v36)
  {
    v37 = *(_QWORD *)(v36 + 8);
    v38 = *(unsigned int *)(v36 + 4) | ((unint64_t)((*(_DWORD *)(v36 + 16) >> 2) & 1) << 32);
  }
  else
  {
    v37 = 0;
    v38 = 0x100000000;
  }
  WebCore::StepRange::parseStep(a2, (int *)&WebCore::weekStepDescription, v37, v38, (uint64_t)v56);
  *(_OWORD *)a3 = *(_OWORD *)v50;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)&v50[16];
  *(_OWORD *)(a3 + 24) = *(_OWORD *)v51;
  *(_QWORD *)(a3 + 40) = *(_QWORD *)&v51[16];
  v39 = *(_DWORD *)&v56[12] & 0xFFFFFFFD;
  if ((*(_DWORD *)&v56[12] & 0xFFFFFFFD) != 0)
  {
    *(_OWORD *)(a3 + 48) = *(_OWORD *)v56;
    *(_QWORD *)(a3 + 64) = *(_QWORD *)&v56[16];
  }
  else
  {
    *(_QWORD *)(a3 + 60) = 1;
    *(_QWORD *)(a3 + 48) = 1;
    *(_WORD *)(a3 + 56) = 0;
  }
  if ((HIDWORD(v52) & 0xFFFFFFFD) != 0)
  {
    *(_OWORD *)(a3 + 72) = v52;
    *(_QWORD *)(a3 + 88) = v53;
  }
  else
  {
    *(_QWORD *)(a3 + 84) = 1;
    *(_QWORD *)(a3 + 72) = 1;
    *(_WORD *)(a3 + 80) = 0;
  }
  *(_OWORD *)(a3 + 96) = WebCore::weekStepDescription;
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 113) = v39 != 0;
  *(_BYTE *)(a3 + 114) = 0;
}

void WebCore::WeekInputType::parseToDateComponents(unsigned __int16 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  __int128 v4;
  char v5;
  __int128 v6;
  __int128 v7;
  int v8;
  unsigned __int16 *v9;
  uint64_t v10;

  if (!(_DWORD)a2)
  {
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 36) = 0;
    return;
  }
  if ((a2 & 0xFF00000000) != 0)
  {
    v9 = a1;
    v10 = a2;
    LOBYTE(v8) = 0;
    v6 = 0u;
    v7 = 0u;
    if (!WebCore::DateComponents::parseWeek<unsigned char>((uint64_t)&v6, (uint64_t)&v9))
      goto LABEL_9;
  }
  else
  {
    v9 = a1;
    v10 = a2;
    LOBYTE(v8) = 0;
    v6 = 0u;
    v7 = 0u;
    if (!WebCore::DateComponents::parseWeek<char16_t>((uint64_t)&v6, &v9))
    {
LABEL_9:
      v5 = 0;
      *(_BYTE *)a3 = 0;
      goto LABEL_10;
    }
  }
  if (v10)
    goto LABEL_9;
  v4 = v7;
  *(_OWORD *)a3 = v6;
  *(_OWORD *)(a3 + 16) = v4;
  *(_DWORD *)(a3 + 32) = v8;
  v5 = 1;
LABEL_10:
  *(_BYTE *)(a3 + 36) = v5;
}

uint64_t WebCore::WeekInputType::setMillisecondToDateComponents@<X0>(double a1@<D0>, uint64_t a2@<X8>)
{
  uint64_t result;
  __int128 v5;
  char v6;
  __int128 v7;
  __int128 v8;
  int v9;

  LOBYTE(v9) = 0;
  v7 = 0u;
  v8 = 0u;
  result = WebCore::DateComponents::setMillisecondsSinceEpochForWeek((WebCore::DateComponents *)&v7, a1);
  if ((result & 1) != 0)
  {
    v5 = v8;
    *(_OWORD *)a2 = v7;
    *(_OWORD *)(a2 + 16) = v5;
    *(_DWORD *)(a2 + 32) = v9;
    v6 = 1;
  }
  else
  {
    v6 = 0;
    *(_BYTE *)a2 = 0;
  }
  *(_BYTE *)(a2 + 36) = v6;
  return result;
}

BOOL WebCore::WeekInputType::isValidFormat(uint64_t a1, int a2)
{
  return (~a2 & 5) == 0;
}

void WebCore::WeekInputType::formatDateTimeFieldsState(_QWORD *a1@<X8>)
{
  _DWORD *v1;

  v1 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v1 += 2;
  *a1 = v1;
}

void `non-virtual thunk to'WebCore::WeekInputType::formatDateTimeFieldsState(_QWORD *a1@<X8>)
{
  _DWORD *v1;

  v1 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v1 += 2;
  *a1 = v1;
}

uint64_t **WebCore::CanvasFilterContextSwitcher::create@<X0>(uint64_t **this@<X0>, WebCore::CanvasRenderingContext2DBase *a2@<X1>, uint64_t **a3@<X8>)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t *v6;
  WTF *v7;
  void *v8;
  WebCore::Filter *v9;
  uint64_t **v11;
  uint64_t v12;
  WTF *v13;
  uint64_t *v14;
  WebCore::Filter *v15;

  v4 = *((_DWORD *)this + 33);
  if (!v4)
  {
    __break(0xC471u);
    goto LABEL_17;
  }
  if (!*((_DWORD *)&this[15][70 * v4 - 40] - 1))
  {
LABEL_3:
    *a3 = 0;
    return this;
  }
  v11 = a3;
  v12 = (uint64_t)this;
  this = (uint64_t **)((uint64_t **(*)(WebCore::Filter **__return_ptr))(*this)[33])(&v15);
  if (!v15)
  {
    a3 = v11;
    goto LABEL_3;
  }
  std::make_unique[abi:sn180100]<WebCore::CanvasFilterContextSwitcher,WebCore::CanvasRenderingContext2DBase &>((WebCore::CanvasRenderingContext2DBase::State *)v12, &v14);
  if (v14)
  {
    WebCore::CanvasLayerContextSwitcher::create((_BYTE *)v12, a2, &v15, (uint64_t *)&v13);
    if (v13)
    {
      v5 = *(_DWORD *)(v12 + 132);
      if (v5)
      {
        WTF::RefPtr<WebCore::CanvasLayerContextSwitcher,WTF::RawPtrTraits<WebCore::CanvasLayerContextSwitcher>,WTF::DefaultRefDerefTraits<WebCore::CanvasLayerContextSwitcher>>::operator=((WTF **)(*(_QWORD *)(v12 + 120) + 560 * v5 - 8), &v13);
        v6 = v14;
        v14 = 0;
        *v11 = v6;
        v7 = v13;
        v13 = 0;
        if (v7)
          WTF::RefCounted<WebCore::CanvasLayerContextSwitcher>::deref((uint64_t)v7);
        goto LABEL_12;
      }
      __break(0xC471u);
LABEL_17:
      JUMPOUT(0x195CD4620);
    }
  }
  *v11 = 0;
LABEL_12:
  this = std::unique_ptr<WebCore::CanvasFilterContextSwitcher>::~unique_ptr[abi:sn180100](&v14);
  v9 = v15;
  v15 = 0;
  if (v9)
    return (uint64_t **)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)v9 + 1, v8);
  return this;
}

void WebCore::CanvasLayerContextSwitcher::create(_BYTE *a1@<X0>, const WebCore::FloatRect *a2@<X1>, WebCore::Filter **a3@<X2>, uint64_t *a4@<X8>)
{
  WebCore::DestinationColorSpace *v8;
  uint64_t v9;
  unint64_t v10;
  const void *v11;
  CFTypeRef v12;
  WTF **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  float v18;
  char v19;
  CFTypeRef cf;
  WTF **v21;

  v8 = (WebCore::DestinationColorSpace *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 240))(a1);
  if (!v8)
  {
    *a4 = 0;
    return;
  }
  v9 = (uint64_t)v8;
  if (a1[802] && a1[802] == 1)
  {
    v11 = (const void *)*WebCore::DestinationColorSpace::DisplayP3(v8);
  }
  else
  {
    v10 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v10 != -1)
    {
      v21 = (WTF **)&v19;
      cf = &v21;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &cf, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    v11 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  }
  cf = v11;
  if (v11)
    CFRetain(v11);
  WebCore::GraphicsContextSwitcher::create(v9, a2, (uint64_t)&cf, a3, 0, &v21);
  v12 = cf;
  cf = 0;
  if (v12)
    CFRelease(v12);
  v13 = v21;
  if (v21)
  {
    v14 = WTF::fastMalloc((WTF *)0x30);
    *(_DWORD *)v14 = 1;
    *(_QWORD *)(v14 + 8) = a1;
    v15 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 240))(a1);
    *(_QWORD *)(v14 + 16) = v15;
    *(_OWORD *)(v14 + 24) = *(_OWORD *)a2;
    *(_QWORD *)(v14 + 40) = v13;
    v16 = *(_QWORD *)(v14 + 8);
    v17 = *(_DWORD *)(v16 + 132);
    if (!v17)
    {
      __break(0xC471u);
      return;
    }
    v18 = *(double *)(*(_QWORD *)(v16 + 120) + 560 * v17 - 464);
    (*((void (**)(WTF **, uint64_t, float))*v13 + 6))(v13, v15, v18);
  }
  else
  {
    v14 = 0;
  }
  *a4 = v14;
}

WebCore::DestinationColorSpace *WTF::RefPtr<WebCore::CanvasLayerContextSwitcher,WTF::RawPtrTraits<WebCore::CanvasLayerContextSwitcher>,WTF::DefaultRefDerefTraits<WebCore::CanvasLayerContextSwitcher>>::operator=(WTF **this, WTF **a2)
{
  WTF *v3;
  WTF *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  void *v9;
  uint64_t v10;

  v3 = *a2;
  *a2 = 0;
  v4 = *this;
  *this = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      v6 = *((_QWORD *)v4 + 5);
      v7 = *((_QWORD *)v4 + 2);
      v8 = WebCore::DestinationColorSpace::SRGB((WebCore::DestinationColorSpace *)this);
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v6 + 56))(v6, v7, v8);
      v10 = *((_QWORD *)v4 + 5);
      *((_QWORD *)v4 + 5) = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      WTF::fastFree(v4, v9);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return (WebCore::DestinationColorSpace *)this;
}

uint64_t **std::unique_ptr<WebCore::CanvasFilterContextSwitcher>::~unique_ptr[abi:sn180100](uint64_t **a1)
{
  uint64_t *v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    WebCore::CanvasRenderingContext2DBase::restore(*v2);
    WTF::fastFree((WTF *)v2, v3);
  }
  return a1;
}

uint64_t WebCore::CanvasFilterContextSwitcher::expandedBounds(uint64_t this)
{
  unsigned int v1;
  uint64_t v2;

  v1 = *(_DWORD *)(*(_QWORD *)this + 132);
  if (v1)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 120) + 560 * v1 - 8);
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 8) + 272))(*(_QWORD *)(v2 + 8), v2 + 24);
  }
  else
  {
    __break(0xC471u);
  }
  return this;
}

WebCore::CanvasGradient *WebCore::CanvasGradient::CanvasGradient(WebCore::CanvasGradient *this, const WebCore::FloatPoint *a2, const WebCore::FloatPoint *a3, WebCore::CanvasRenderingContext *a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  WTF *v9;
  WTF *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  void *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  BOOL v21;
  WTF *v22;
  WTF *v23;
  WTF *v24;
  uint64_t v25;
  _BYTE v26[40];
  __int128 v27;
  int v28;

  *(_DWORD *)this = 1;
  v6 = *(_QWORD *)a3;
  *(_QWORD *)&v27 = *(_QWORD *)a2;
  *((_QWORD *)&v27 + 1) = v6;
  v28 = 0;
  v24 = (WTF *)v26;
  v25 = 2;
  v26[32] = 1;
  v7 = WTF::fastMalloc((WTF *)0xC8);
  *((_QWORD *)this + 1) = WebCore::Gradient::Gradient(v7, &v27, 0x600000000, 1, 0, (uint64_t *)&v24, 0, 0);
  v9 = v24;
  if (HIDWORD(v25))
  {
    v10 = (WTF *)((char *)v24 + 16 * HIDWORD(v25));
    do
    {
      v11 = *((_QWORD *)v9 + 1);
      if ((v11 & 0x8000000000000) != 0)
      {
        v22 = v10;
        v23 = v9;
        v19 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
        do
        {
          v20 = __ldaxr(v19);
          v21 = --v20 == 0;
        }
        while (__stlxr(v20, v19));
        v10 = v22;
        if (v21)
        {
          atomic_store(1u, v19);
          WTF::fastFree((WTF *)v19, v8);
          v10 = v22;
          v9 = v23;
        }
      }
      v9 = (WTF *)((char *)v9 + 16);
    }
    while (v9 != v10);
    v9 = v24;
  }
  if (v26 != (_BYTE *)v9 && v9)
  {
    v24 = 0;
    LODWORD(v25) = 0;
    WTF::fastFree(v9, v8);
  }
  v12 = *((_QWORD *)a4 + 2);
  if (v12)
    goto LABEL_25;
  v12 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v12 = 1;
  *(_QWORD *)(v12 + 8) = a4;
  v16 = (unsigned int *)*((_QWORD *)a4 + 2);
  *((_QWORD *)a4 + 2) = v12;
  if (!v16)
    goto LABEL_25;
  do
  {
    v17 = __ldaxr(v16);
    v18 = v17 - 1;
  }
  while (__stlxr(v18, v16));
  if (!v18)
  {
    atomic_store(1u, v16);
    WTF::fastFree((WTF *)v16, v15);
  }
  v12 = *((_QWORD *)a4 + 2);
  if (v12)
  {
LABEL_25:
    do
      v13 = __ldaxr((unsigned int *)v12);
    while (__stlxr(v13 + 1, (unsigned int *)v12));
  }
  *((_QWORD *)this + 2) = v12;
  return this;
}

WebCore::CanvasGradient *WebCore::CanvasGradient::CanvasGradient(WebCore::CanvasGradient *this, const WebCore::FloatPoint *a2, float a3, const WebCore::FloatPoint *a4, float a5, WebCore::CanvasRenderingContext *a6)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  WTF *v11;
  WTF *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  unsigned int v18;
  void *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  WTF *v24;
  WTF *v25;
  WTF *v26;
  uint64_t v27;
  _BYTE v28[40];
  __int128 v29;
  float v30;
  float v31;
  uint64_t v32;

  *(_DWORD *)this = 1;
  v8 = *(_QWORD *)a4;
  *(_QWORD *)&v29 = *(_QWORD *)a2;
  *((_QWORD *)&v29 + 1) = v8;
  v30 = a3;
  v31 = a5;
  v32 = 0x13F800000;
  v26 = (WTF *)v28;
  v27 = 2;
  v28[32] = 1;
  v9 = WTF::fastMalloc((WTF *)0xC8);
  *((_QWORD *)this + 1) = WebCore::Gradient::Gradient(v9, &v29, 0x600000000, 1, 0, (uint64_t *)&v26, 0, 0);
  v11 = v26;
  if (HIDWORD(v27))
  {
    v12 = (WTF *)((char *)v26 + 16 * HIDWORD(v27));
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if ((v13 & 0x8000000000000) != 0)
      {
        v24 = v12;
        v25 = v11;
        v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
        do
        {
          v15 = __ldaxr(v14);
          v16 = --v15 == 0;
        }
        while (__stlxr(v15, v14));
        v12 = v24;
        if (v16)
        {
          atomic_store(1u, v14);
          WTF::fastFree((WTF *)v14, v10);
          v12 = v24;
          v11 = v25;
        }
      }
      v11 = (WTF *)((char *)v11 + 16);
    }
    while (v11 != v12);
    v11 = v26;
  }
  if (v28 != (_BYTE *)v11 && v11)
  {
    v26 = 0;
    LODWORD(v27) = 0;
    WTF::fastFree(v11, v10);
  }
  v17 = *((_QWORD *)a6 + 2);
  if (v17)
    goto LABEL_25;
  v17 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v17 = 1;
  *(_QWORD *)(v17 + 8) = a6;
  v21 = (unsigned int *)*((_QWORD *)a6 + 2);
  *((_QWORD *)a6 + 2) = v17;
  if (!v21)
    goto LABEL_25;
  do
  {
    v22 = __ldaxr(v21);
    v23 = v22 - 1;
  }
  while (__stlxr(v23, v21));
  if (!v23)
  {
    atomic_store(1u, v21);
    WTF::fastFree((WTF *)v21, v20);
  }
  v17 = *((_QWORD *)a6 + 2);
  if (v17)
  {
LABEL_25:
    do
      v18 = __ldaxr((unsigned int *)v17);
    while (__stlxr(v18 + 1, (unsigned int *)v17));
  }
  *((_QWORD *)this + 2) = v17;
  return this;
}

WebCore::CanvasGradient *WebCore::CanvasGradient::CanvasGradient(WebCore::CanvasGradient *this, const WebCore::FloatPoint *a2, float a3, WebCore::CanvasRenderingContext *a4)
{
  uint64_t v6;
  void *v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  void *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  WTF *v21;
  WTF *v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[40];
  __int128 v26;
  int v27;

  *(_DWORD *)this = 1;
  *(_QWORD *)&v26 = *(_QWORD *)a2;
  *((float *)&v26 + 2) = a3;
  v27 = 2;
  v23 = (WTF *)v25;
  v24 = 2;
  v25[32] = 1;
  v6 = WTF::fastMalloc((WTF *)0xC8);
  *((_QWORD *)this + 1) = WebCore::Gradient::Gradient(v6, &v26, 0x600000000, 1, 0, (uint64_t *)&v23, 0, 0);
  v8 = v23;
  if (HIDWORD(v24))
  {
    v9 = (WTF *)((char *)v23 + 16 * HIDWORD(v24));
    do
    {
      v10 = *((_QWORD *)v8 + 1);
      if ((v10 & 0x8000000000000) != 0)
      {
        v21 = v9;
        v22 = v8;
        v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
        do
        {
          v12 = __ldaxr(v11);
          v13 = --v12 == 0;
        }
        while (__stlxr(v12, v11));
        v9 = v21;
        if (v13)
        {
          atomic_store(1u, v11);
          WTF::fastFree((WTF *)v11, v7);
          v9 = v21;
          v8 = v22;
        }
      }
      v8 = (WTF *)((char *)v8 + 16);
    }
    while (v8 != v9);
    v8 = v23;
  }
  if (v25 != (_BYTE *)v8 && v8)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    WTF::fastFree(v8, v7);
  }
  v14 = *((_QWORD *)a4 + 2);
  if (v14)
    goto LABEL_25;
  v14 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v14 = 1;
  *(_QWORD *)(v14 + 8) = a4;
  v18 = (unsigned int *)*((_QWORD *)a4 + 2);
  *((_QWORD *)a4 + 2) = v14;
  if (!v18)
    goto LABEL_25;
  do
  {
    v19 = __ldaxr(v18);
    v20 = v19 - 1;
  }
  while (__stlxr(v20, v18));
  if (!v20)
  {
    atomic_store(1u, v18);
    WTF::fastFree((WTF *)v18, v17);
  }
  v14 = *((_QWORD *)a4 + 2);
  if (v14)
  {
LABEL_25:
    do
      v15 = __ldaxr((unsigned int *)v14);
    while (__stlxr(v15 + 1, (unsigned int *)v14));
  }
  *((_QWORD *)this + 2) = v14;
  return this;
}

void WebCore::CanvasGradient::~CanvasGradient(WebCore::CanvasGradient *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;

  v3 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  v6 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (__ldaxr((unsigned __int8 *)v7))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v7))
    {
LABEL_9:
      v9 = *(_QWORD *)(v7 + 8);
      v10 = v9 - 1;
      *(_QWORD *)(v7 + 8) = v9 - 1;
      if (v9 == 1)
      {
        v14 = *(_QWORD *)(v7 + 16);
        v11 = *(_QWORD *)(v7 + 24);
        *(_QWORD *)(v7 + 24) = 0;
        v12 = v14 != 0;
      }
      else
      {
        v11 = 0;
        v12 = 1;
      }
      v13 = __ldxr((unsigned __int8 *)v7);
      if (v13 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v7))
          goto LABEL_13;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v7);
LABEL_13:
      if (!v10)
      {
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        if (!v12)
          WTF::fastFree((WTF *)v7, a2);
      }
      return;
    }
    MEMORY[0x19AEA534C](v7);
    goto LABEL_9;
  }
}

unsigned int *WebCore::CanvasGradient::addColorStop@<X0>(unsigned int *this@<X0>, WebCore::ScriptExecutionContext *a2@<X1>, double a3@<D0>, unsigned int **a4@<X2>, uint64_t a5@<X8>)
{
  unsigned int *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  float v17;
  uint64_t v18;
  uint64_t v19;

  if (a3 < 0.0 || a3 > 1.0)
  {
    *(_BYTE *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_BYTE *)(a5 + 16) = 1;
  }
  else
  {
    v8 = this;
    this = (unsigned int *)WebCore::parseColor(a4, a2, &v19);
    v10 = v19;
    if ((v19 & 0x4000000000000) != 0)
    {
      v11 = *((_QWORD *)v8 + 1);
      v12 = a3;
      v17 = v12;
      v18 = v19;
      v19 = 0;
      this = WebCore::Gradient::addColorStop(v11, &v17);
      if ((v18 & 0x8000000000000) != 0)
      {
        this = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
        do
        {
          v15 = __ldaxr(this);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, this));
        if (!v16)
        {
          atomic_store(1u, this);
          this = (unsigned int *)WTF::fastFree((WTF *)this, v9);
        }
      }
      *(_QWORD *)a5 = 0;
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      v10 = v19;
    }
    else
    {
      *(_BYTE *)a5 = 9;
      *(_QWORD *)(a5 + 8) = 0;
      *(_BYTE *)(a5 + 16) = 1;
    }
    if ((v10 & 0x8000000000000) != 0)
    {
      this = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
      do
      {
        v13 = __ldaxr(this);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, this));
      if (!v14)
      {
        atomic_store(1u, this);
        return (unsigned int *)WTF::fastFree((WTF *)this, v9);
      }
    }
  }
  return this;
}

void WebCore::WeekInputType::~WeekInputType(WebCore::WeekInputType *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::BaseDateAndTimeInputType::~BaseDateAndTimeInputType(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::WeekInputType::~WeekInputType(WebCore::WeekInputType *this, void *a2)
{
  WebCore::BaseDateAndTimeInputType::~BaseDateAndTimeInputType((WebCore::WeekInputType *)((char *)this - 32), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::BaseDateAndTimeInputType::~BaseDateAndTimeInputType((WebCore::WeekInputType *)((char *)this - 32), a2);
  WTF::fastFree(v2, v3);
}

{
  WebCore::BaseDateAndTimeInputType::~BaseDateAndTimeInputType((WebCore::WeekInputType *)((char *)this - 40), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::BaseDateAndTimeInputType::~BaseDateAndTimeInputType((WebCore::WeekInputType *)((char *)this - 40), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::lineageOfType<WebCore::HTMLFieldSetElement>(uint64_t result)
{
  __int16 v1;

  if ((*(_WORD *)(result + 28) & 0x10) == 0
    || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
  {
    result = *(_QWORD *)(result + 32);
    if (result)
    {
      v1 = *(_WORD *)(result + 28);
      if ((v1 & 8) != 0)
      {
        while ((v1 & 0x10) == 0
             || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::HTMLNames::fieldsetTag + 24))
        {
          result = *(_QWORD *)(result + 32);
          if (!result)
            break;
          v1 = *(_WORD *)(result + 28);
          if ((v1 & 8) == 0)
            return 0;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::ValidationMessage::*&)(void),WebCore::ValidationMessage*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

WebCore::CanvasRenderingContext2DBase::State *std::make_unique[abi:sn180100]<WebCore::CanvasFilterContextSwitcher,WebCore::CanvasRenderingContext2DBase &>@<X0>(WebCore::CanvasRenderingContext2DBase::State *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  WebCore::CanvasRenderingContext2DBase::State *result;

  v4 = (_QWORD *)WTF::fastMalloc((WTF *)8);
  *v4 = a1;
  ++*((_DWORD *)a1 + 178);
  result = WebCore::CanvasRenderingContext2DBase::realizeSaves(a1);
  *a2 = v4;
  return result;
}

uint64_t WTF::RefCounted<WebCore::CanvasLayerContextSwitcher>::deref(uint64_t result)
{
  WTF *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  char v7;
  char **v8;
  char *v9;

  v1 = (WTF *)result;
  if (*(_DWORD *)result == 1)
  {
    v2 = *(_QWORD *)(result + 40);
    v3 = *(_QWORD *)(result + 16);
    v4 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v4 != -1)
    {
      v9 = &v7;
      v8 = &v9;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v2 + 56))(v2, v3, &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
    v6 = *((_QWORD *)v1 + 5);
    *((_QWORD *)v1 + 5) = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    return WTF::fastFree(v1, v5);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::CanvasPath::closePath(uint64_t this)
{
  uint64_t v1;
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[32];
  __int128 v9;
  int v10;

  v1 = this;
  v2 = *(_DWORD *)(this + 72);
  if (v2 == 2)
  {
    this = *(_QWORD *)(this + 16);
    if (!this)
      return this;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 200))(this);
    if ((this & 1) != 0)
      return this;
    v2 = *(_DWORD *)(v1 + 72);
  }
  else if (!v2)
  {
    return this;
  }
  if (v2 != 2)
  {
    if (v2 != 1)
      return this;
    this = WebCore::PathStream::computeHasSubpaths((unsigned int *)(v1 + 16), 1);
    if ((this & 1) == 0)
      return this;
LABEL_11:
    v3 = *(_DWORD *)(v1 + 72);
    if (v3 == 2)
    {
      v5 = *(_QWORD *)(v1 + 16);
      if (!v5)
        goto LABEL_21;
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 200))(v5);
      if ((this & 1) != 0)
        return this;
      v3 = *(_DWORD *)(v1 + 72);
    }
    else if (!v3)
    {
      return this;
    }
    if (v3 == 2)
    {
      v7 = *(_QWORD *)(v1 + 16);
      if (!v7)
        goto LABEL_21;
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 208))(v7);
      if ((this & 1) != 0)
        return this;
      if (*(_DWORD *)(v1 + 72) != 1)
      {
LABEL_21:
        v6 = WebCore::Path::ensureImpl((WebCore::Path *)(v1 + 8));
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 120))(v6);
      }
      v4 = *(_DWORD *)(v1 + 68);
    }
    else
    {
      if (v3 != 1)
        goto LABEL_21;
      v4 = *(_DWORD *)(v1 + 68);
      if (v4 == 6 || v4 == 15)
        return this;
    }
    if (v4 == 5)
    {
      *(_OWORD *)v8 = *(_OWORD *)(v1 + 16);
      *(_QWORD *)&v8[13] = *(_QWORD *)(v1 + 29);
      *(_OWORD *)(v1 + 32) = *(_OWORD *)&v8[16];
      *(_OWORD *)(v1 + 48) = v9;
      *(_OWORD *)(v1 + 16) = *(_OWORD *)v8;
      *(_DWORD *)(v1 + 64) = v10;
      *(_DWORD *)(v1 + 68) = 6;
      return this;
    }
    goto LABEL_21;
  }
  this = *(_QWORD *)(v1 + 16);
  if (this)
  {
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 216))(this);
    if ((_DWORD)this)
      goto LABEL_11;
  }
  return this;
}

uint64_t WebCore::CanvasPath::moveTo(uint64_t this, float a2, float a3)
{
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int **v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  char v33;
  __int128 v34;
  _BYTE v35[32];
  uint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if ((LODWORD(a2) & 0x7FFFFFFFu) <= 0x7F7FFFFF && (LODWORD(a3) & 0x7FFFFFFFu) <= 0x7F7FFFFF)
  {
    v5 = this;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 16))(this);
    if ((_DWORD)this)
    {
      v6 = *(_DWORD *)(v5 + 72);
      if (v6 == 2)
      {
        v15 = v5 + 16;
        this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 16) + 200))(*(_QWORD *)(v5 + 16));
        v6 = *(_DWORD *)(v5 + 72);
        if (!(_DWORD)this)
        {
LABEL_6:
          if (v6 == 1)
          {
            v8 = WTF::fastMalloc((WTF *)0x20);
            *(_DWORD *)(v8 + 8) = 1;
            *(_QWORD *)v8 = off_1E340EC98;
            v19 = *(_OWORD *)(v5 + 32);
            v34 = *(_OWORD *)(v5 + 16);
            *(_OWORD *)v35 = v19;
            *(_OWORD *)&v35[16] = *(_OWORD *)(v5 + 48);
            v36 = *(_QWORD *)(v5 + 64);
            *(_QWORD *)(v8 + 16) = 0;
            *(_QWORD *)(v8 + 24) = 0;
            v20 = WTF::fastMalloc((WTF *)0x38);
            *(_DWORD *)(v8 + 24) = 1;
            *(_QWORD *)(v8 + 16) = v20;
            v21 = v20 + 56 * *(unsigned int *)(v8 + 28);
            *(_OWORD *)v21 = v34;
            *(_OWORD *)(v21 + 16) = *(_OWORD *)v35;
            *(_OWORD *)(v21 + 32) = *(_OWORD *)&v35[16];
            *(_QWORD *)(v21 + 48) = v36;
            ++*(_DWORD *)(v8 + 28);
            v9 = *(unsigned int *)(v5 + 72);
            if ((_DWORD)v9 == -1)
            {
LABEL_33:
              *(_QWORD *)(v5 + 16) = v8;
              *(_DWORD *)(v5 + 72) = 2;
              return (*(uint64_t (**)(uint64_t, float, float))(*(_QWORD *)v8 + 32))(v8, a2, a3);
            }
            v10 = (unsigned int **)(v5 + 16);
            if ((_DWORD)v9 == 2)
            {
              v11 = *v10;
              *v10 = (unsigned int *)v8;
              if (v11)
              {
                v22 = v11 + 2;
                do
                {
                  v23 = __ldaxr(v22);
                  v14 = --v23 == 0;
                }
                while (__stlxr(v23, v22));
                goto LABEL_29;
              }
              return (*(uint64_t (**)(uint64_t, float, float))(*(_QWORD *)v8 + 32))(v8, a2, a3);
            }
          }
          else
          {
            if (v6 == 2)
            {
              v7 = atomic_load((unsigned int *)(*(_QWORD *)(v5 + 16) + 8));
              v8 = *(_QWORD *)(v5 + 16);
              if (v7 != 1)
              {
                (*(void (**)(__int128 *__return_ptr, _QWORD))(*(_QWORD *)v8 + 24))(&v34, *(_QWORD *)(v5 + 16));
                v24 = v34;
                *(_QWORD *)&v34 = 0;
                v25 = *(unsigned int **)(v5 + 16);
                *(_QWORD *)(v5 + 16) = v24;
                if (v25)
                {
                  v26 = v25 + 2;
                  do
                  {
                    v27 = __ldaxr(v26);
                    v28 = v27 - 1;
                  }
                  while (__stlxr(v28, v26));
                  if (!v28)
                  {
                    atomic_store(1u, v25 + 2);
                    (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 8))(v25);
                  }
                  v29 = (unsigned int *)v34;
                  *(_QWORD *)&v34 = 0;
                  if (v29)
                  {
                    v30 = v29 + 2;
                    do
                    {
                      v31 = __ldaxr(v30);
                      v32 = v31 - 1;
                    }
                    while (__stlxr(v32, v30));
                    if (!v32)
                    {
                      atomic_store(1u, v29 + 2);
                      (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 8))(v29);
                    }
                  }
                }
                v8 = *(_QWORD *)(v5 + 16);
              }
              if (v8)
                return (*(uint64_t (**)(uint64_t, float, float))(*(_QWORD *)v8 + 32))(v8, a2, a3);
            }
            v8 = WTF::fastMalloc((WTF *)0x20);
            *(_DWORD *)(v8 + 8) = 1;
            *(_QWORD *)v8 = off_1E340EC98;
            *(_QWORD *)(v8 + 16) = 0;
            *(_QWORD *)(v8 + 24) = 0;
            v9 = *(unsigned int *)(v5 + 72);
            if ((_DWORD)v9 == -1)
              goto LABEL_33;
            v10 = (unsigned int **)(v5 + 16);
            if ((_DWORD)v9 == 2)
            {
              v11 = *v10;
              *v10 = (unsigned int *)v8;
              if (v11)
              {
                v12 = v11 + 2;
                do
                {
                  v13 = __ldaxr(v12);
                  v14 = --v13 == 0;
                }
                while (__stlxr(v13, v12));
LABEL_29:
                if (v14)
                {
                  atomic_store(1u, v11 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
                }
                return (*(uint64_t (**)(uint64_t, float, float))(*(_QWORD *)v8 + 32))(v8, a2, a3);
              }
              return (*(uint64_t (**)(uint64_t, float, float))(*(_QWORD *)v8 + 32))(v8, a2, a3);
            }
          }
          ((void (*)(__int128 *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v9])(&v34, v10);
          goto LABEL_33;
        }
        v16 = LODWORD(a2) | ((unint64_t)LODWORD(a3) << 32);
        if (v6 == -1)
          goto LABEL_22;
        if (v6 == 1)
        {
          *(_QWORD *)(v5 + 16) = v16;
          *(_DWORD *)(v5 + 68) = 0;
          return this;
        }
      }
      else
      {
        if (v6)
          goto LABEL_6;
        v16 = LODWORD(a2) | ((unint64_t)LODWORD(a3) << 32);
        v15 = v5 + 16;
      }
      this = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v6])(&v33, v15);
LABEL_22:
      *(_QWORD *)(v5 + 16) = v16;
      v17 = v34;
      v18 = *(_OWORD *)v35;
      *(_OWORD *)(v15 + 36) = *(_OWORD *)&v35[12];
      *(_OWORD *)(v15 + 24) = v18;
      *(_OWORD *)(v15 + 8) = v17;
      *(_DWORD *)(v15 + 52) = 0;
      *(_DWORD *)(v5 + 72) = 1;
    }
  }
  return this;
}

void WebCore::CanvasPath::lineTo(WebCore::CanvasPath *this, float a2, float a3)
{
  uint64_t *v3;
  int v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  int v13;
  __int128 v14;
  int v15;
  unsigned int **v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int **v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int v49;
  BOOL v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int *v59;
  unsigned int *v60;
  unsigned int v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int *v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  __int128 *v69;
  __int128 v70;
  _BYTE v71[32];
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  if ((LODWORD(a2) & 0x7FFFFFFFu) <= 0x7F7FFFFF
    && (LODWORD(a3) & 0x7FFFFFFFu) <= 0x7F7FFFFF
    && (*(unsigned int (**)(WebCore::CanvasPath *))(*(_QWORD *)this + 16))(this))
  {
    v7 = *((_DWORD *)this + 18);
    if (v7 != 2)
    {
      if (v7)
        goto LABEL_6;
      goto LABEL_81;
    }
    v3 = (uint64_t *)((char *)this + 16);
    v10 = *((_QWORD *)this + 2);
    v8 = 0.0;
    if (!v10)
      goto LABEL_12;
    v32 = (*(uint64_t (**)(uint64_t, float, float))(*(_QWORD *)v10 + 200))(v10, 0.0, 0.0);
    v7 = *((_DWORD *)this + 18);
    if (!v32)
    {
LABEL_6:
      v8 = 0.0;
      if (v7 == 2)
      {
        v31 = *((_QWORD *)this + 2);
        if (v31)
        {
          if ((*(float (**)(uint64_t, float, float))(*(_QWORD *)v31 + 224))(v31, 0.0, 0.0) != a2)
            goto LABEL_14;
          goto LABEL_13;
        }
      }
      else if (v7 == 1)
      {
        v67 = 0;
        v68 = 0;
        *(_QWORD *)&v70 = &v67;
        *((_QWORD *)&v70 + 1) = &v68;
        v9 = *((unsigned int *)this + 17);
        if ((_DWORD)v9 == -1)
        {
          std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_67;
        }
        v69 = &v70;
        if (((float (*)(__int128 **, char *, float, float))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11PathSegment17calculateEndPointERKNS8_10FloatPointERSA_E3__0JEEEEEJRKNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcOT_DpOT0____fmatrix[v9])(&v69, (char *)this + 16, 0.0, 0.0) != a2)
        {
LABEL_14:
          v11 = *((_DWORD *)this + 18);
          if (v11 != 2)
          {
            if (!v11)
            {
              v12 = LODWORD(a2) | ((unint64_t)LODWORD(a3) << 32);
              v3 = (uint64_t *)((char *)this + 16);
              goto LABEL_17;
            }
LABEL_20:
            if (v11 == 2)
            {
              v26 = atomic_load((unsigned int *)(*((_QWORD *)this + 2) + 8));
              v17 = *((_QWORD *)this + 2);
              if (v26 != 1)
              {
                (*(void (**)(__int128 *__return_ptr, _QWORD))(*(_QWORD *)v17 + 24))(&v70, *((_QWORD *)this + 2));
                v35 = v70;
                *(_QWORD *)&v70 = 0;
                v36 = (unsigned int *)*((_QWORD *)this + 2);
                *((_QWORD *)this + 2) = v35;
                if (v36)
                {
                  v37 = v36 + 2;
                  do
                  {
                    v38 = __ldaxr(v37);
                    v39 = v38 - 1;
                  }
                  while (__stlxr(v39, v37));
                  if (!v39)
                  {
                    atomic_store(1u, v36 + 2);
                    (*(void (**)(unsigned int *))(*(_QWORD *)v36 + 8))(v36);
                  }
                  v40 = (unsigned int *)v70;
                  *(_QWORD *)&v70 = 0;
                  if (v40)
                  {
                    v41 = v40 + 2;
                    do
                    {
                      v42 = __ldaxr(v41);
                      v43 = v42 - 1;
                    }
                    while (__stlxr(v43, v41));
                    if (!v43)
                    {
                      atomic_store(1u, v40 + 2);
                      (*(void (**)(unsigned int *))(*(_QWORD *)v40 + 8))(v40);
                    }
                  }
                }
                v17 = *((_QWORD *)this + 2);
              }
              if (v17)
                goto LABEL_52;
            }
            else if (v11 == 1)
            {
              if (*((_DWORD *)this + 17))
              {
                v16 = (unsigned int **)((char *)this + 16);
                v17 = WTF::fastMalloc((WTF *)0x20);
                *(_DWORD *)(v17 + 8) = 1;
                *(_QWORD *)v17 = off_1E340EC98;
                v18 = *((_OWORD *)this + 2);
                v70 = *((_OWORD *)this + 1);
                *(_OWORD *)v71 = v18;
                *(_OWORD *)&v71[16] = *((_OWORD *)this + 3);
                v72 = *((_QWORD *)this + 8);
                *(_QWORD *)(v17 + 16) = 0;
                *(_QWORD *)(v17 + 24) = 0;
                v19 = WTF::fastMalloc((WTF *)0x38);
                *(_DWORD *)(v17 + 24) = 1;
                *(_QWORD *)(v17 + 16) = v19;
                v20 = v19 + 56 * *(unsigned int *)(v17 + 28);
                *(_OWORD *)v20 = v70;
                *(_OWORD *)(v20 + 16) = *(_OWORD *)v71;
                *(_OWORD *)(v20 + 32) = *(_OWORD *)&v71[16];
                *(_QWORD *)(v20 + 48) = v72;
                ++*(_DWORD *)(v17 + 28);
                v21 = *((unsigned int *)this + 18);
                if ((_DWORD)v21 != -1)
                {
                  if ((_DWORD)v21 == 2)
                  {
                    v22 = *v16;
                    *v16 = (unsigned int *)v17;
                    if (v22)
                    {
                      v23 = v22 + 2;
                      do
                      {
                        v24 = __ldaxr(v23);
                        v25 = --v24 == 0;
                      }
                      while (__stlxr(v24, v23));
LABEL_36:
                      if (v25)
                      {
                        atomic_store(1u, v22 + 2);
                        (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
                      }
                      goto LABEL_52;
                    }
                    goto LABEL_52;
                  }
                  ((void (*)(__int128 *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v21])(&v70, (char *)this + 16);
                }
                goto LABEL_51;
              }
              *((float *)this + 6) = a2;
              *((float *)this + 7) = a3;
LABEL_55:
              *((_DWORD *)this + 17) = 11;
              return;
            }
            v17 = WTF::fastMalloc((WTF *)0x20);
            *(_DWORD *)(v17 + 8) = 1;
            *(_QWORD *)v17 = off_1E340EC98;
            *(_QWORD *)(v17 + 16) = 0;
            *(_QWORD *)(v17 + 24) = 0;
            v27 = *((unsigned int *)this + 18);
            if ((_DWORD)v27 != -1)
            {
              v28 = (unsigned int **)((char *)this + 16);
              if ((_DWORD)v27 == 2)
              {
                v22 = *v28;
                *v28 = (unsigned int *)v17;
                if (v22)
                {
                  v29 = v22 + 2;
                  do
                  {
                    v30 = __ldaxr(v29);
                    v25 = --v30 == 0;
                  }
                  while (__stlxr(v30, v29));
                  goto LABEL_36;
                }
LABEL_52:
                (*(void (**)(uint64_t, float, float))(*(_QWORD *)v17 + 40))(v17, a2, a3);
                return;
              }
              ((void (*)(__int128 *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v27])(&v70, v28);
            }
LABEL_51:
            *((_QWORD *)this + 2) = v17;
            *((_DWORD *)this + 18) = 2;
            goto LABEL_52;
          }
          v3 = (uint64_t *)((char *)this + 16);
          v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 200))(*((_QWORD *)this + 2));
          v11 = *((_DWORD *)this + 18);
          if (!v15)
            goto LABEL_20;
LABEL_67:
          v12 = LODWORD(a2) | ((unint64_t)LODWORD(a3) << 32);
          if (v11 == -1)
            goto LABEL_18;
          if (v11 != 1)
          {
LABEL_17:
            ((void (*)(__int128 **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v11])(&v69, v3);
LABEL_18:
            *((_QWORD *)this + 2) = 0;
            v3[1] = v12;
            v13 = *(_DWORD *)&v71[16];
            v14 = *(_OWORD *)v71;
            *((_OWORD *)v3 + 1) = v70;
            *((_OWORD *)v3 + 2) = v14;
            *((_DWORD *)v3 + 12) = v13;
            *((_DWORD *)v3 + 13) = 11;
LABEL_84:
            *((_DWORD *)this + 18) = 1;
            return;
          }
          *((_QWORD *)this + 2) = 0;
          *((_QWORD *)this + 3) = v12;
          goto LABEL_55;
        }
LABEL_13:
        if (v8 == a3)
          return;
        goto LABEL_14;
      }
LABEL_12:
      if (a2 != 0.0)
        goto LABEL_14;
      goto LABEL_13;
    }
    if (v7 == 2)
    {
      v33 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 200))(*((_QWORD *)this + 2));
      v7 = *((_DWORD *)this + 18);
      if (v33)
      {
        v34 = LODWORD(a2) | ((unint64_t)LODWORD(a3) << 32);
        if (v7 == -1)
        {
LABEL_83:
          *((_QWORD *)this + 2) = v34;
          v51 = v70;
          v52 = *(_OWORD *)v71;
          *(_OWORD *)((char *)v3 + 36) = *(_OWORD *)&v71[12];
          *(_OWORD *)(v3 + 3) = v52;
          *(_OWORD *)(v3 + 1) = v51;
          *((_DWORD *)v3 + 13) = 0;
          goto LABEL_84;
        }
        if (v7 == 1)
        {
          *((_QWORD *)this + 2) = v34;
          *((_DWORD *)this + 17) = 0;
          return;
        }
LABEL_82:
        ((void (*)(__int128 **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v7])(&v69, v3);
        goto LABEL_83;
      }
    }
    else if (!v7)
    {
LABEL_81:
      v7 = 0;
      v34 = LODWORD(a2) | ((unint64_t)LODWORD(a3) << 32);
      v3 = (uint64_t *)((char *)this + 16);
      goto LABEL_82;
    }
    if (v7 == 1)
    {
      v45 = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)(v45 + 8) = 1;
      *(_QWORD *)v45 = off_1E340EC98;
      v53 = *((_OWORD *)this + 2);
      v70 = *(_OWORD *)v3;
      *(_OWORD *)v71 = v53;
      *(_OWORD *)&v71[16] = *((_OWORD *)this + 3);
      v72 = *((_QWORD *)this + 8);
      *(_QWORD *)(v45 + 16) = 0;
      *(_QWORD *)(v45 + 24) = 0;
      v54 = WTF::fastMalloc((WTF *)0x38);
      *(_DWORD *)(v45 + 24) = 1;
      *(_QWORD *)(v45 + 16) = v54;
      v55 = v54 + 56 * *(unsigned int *)(v45 + 28);
      *(_OWORD *)v55 = v70;
      *(_OWORD *)(v55 + 16) = *(_OWORD *)v71;
      *(_OWORD *)(v55 + 32) = *(_OWORD *)&v71[16];
      *(_QWORD *)(v55 + 48) = v72;
      ++*(_DWORD *)(v45 + 28);
      v46 = *((unsigned int *)this + 18);
      if ((_DWORD)v46 == -1)
      {
LABEL_94:
        *((_QWORD *)this + 2) = v45;
        *((_DWORD *)this + 18) = 2;
        goto LABEL_95;
      }
      if ((_DWORD)v46 == 2)
      {
        v47 = (unsigned int *)*v3;
        *v3 = v45;
        if (v47)
        {
          v56 = v47 + 2;
          do
          {
            v57 = __ldaxr(v56);
            v50 = --v57 == 0;
          }
          while (__stlxr(v57, v56));
LABEL_90:
          if (v50)
          {
            atomic_store(1u, v47 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v47 + 8))(v47);
          }
        }
LABEL_95:
        (*(void (**)(uint64_t, float, float))(*(_QWORD *)v45 + 32))(v45, a2, a3);
        return;
      }
    }
    else
    {
      if (v7 == 2)
      {
        v44 = atomic_load((unsigned int *)(*v3 + 8));
        v45 = *v3;
        if (v44 != 1)
        {
          (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v45 + 24))(&v70, *v3);
          v58 = v70;
          *(_QWORD *)&v70 = 0;
          v59 = (unsigned int *)*v3;
          *v3 = v58;
          if (v59)
          {
            v60 = v59 + 2;
            do
            {
              v61 = __ldaxr(v60);
              v62 = v61 - 1;
            }
            while (__stlxr(v62, v60));
            if (!v62)
            {
              atomic_store(1u, v59 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v59 + 8))(v59);
            }
            v63 = (unsigned int *)v70;
            *(_QWORD *)&v70 = 0;
            if (v63)
            {
              v64 = v63 + 2;
              do
              {
                v65 = __ldaxr(v64);
                v66 = v65 - 1;
              }
              while (__stlxr(v66, v64));
              if (!v66)
              {
                atomic_store(1u, v63 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v63 + 8))(v63);
              }
            }
          }
          v45 = *v3;
        }
        if (v45)
          goto LABEL_95;
      }
      v45 = WTF::fastMalloc((WTF *)0x20);
      *(_DWORD *)(v45 + 8) = 1;
      *(_QWORD *)v45 = off_1E340EC98;
      *(_QWORD *)(v45 + 16) = 0;
      *(_QWORD *)(v45 + 24) = 0;
      v46 = *((unsigned int *)this + 18);
      if ((_DWORD)v46 == -1)
        goto LABEL_94;
      if ((_DWORD)v46 == 2)
      {
        v47 = (unsigned int *)*v3;
        *v3 = v45;
        if (v47)
        {
          v48 = v47 + 2;
          do
          {
            v49 = __ldaxr(v48);
            v50 = --v49 == 0;
          }
          while (__stlxr(v49, v48));
          goto LABEL_90;
        }
        goto LABEL_95;
      }
    }
    ((void (*)(__int128 *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v46])(&v70, (char *)this + 16);
    goto LABEL_94;
  }
}

void WebCore::CanvasPath::quadraticCurveTo(WebCore::CanvasPath *this, float a2, float a3, float a4, float a5)
{
  char *v5;
  int v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  int v20;
  unsigned int **v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int **v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  _BYTE v49[32];
  __int128 v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if ((LODWORD(a2) & 0x7FFFFFFFu) > 0x7F7FFFFF
    || (LODWORD(a3) & 0x7FFFFFFFu) > 0x7F7FFFFF
    || (LODWORD(a4) & 0x7FFFFFFFu) > 0x7F7FFFFF
    || (LODWORD(a5) & 0x7FFFFFFFu) > 0x7F7FFFFF
    || !(*(unsigned int (**)(WebCore::CanvasPath *))(*(_QWORD *)this + 16))(this))
  {
    return;
  }
  v11 = *((_DWORD *)this + 18);
  if (v11 == 2)
  {
    v15 = *((_QWORD *)this + 2);
    v12 = 0.0;
    v13 = 0.0;
    if (!v15)
      goto LABEL_14;
    if (!(*(unsigned int (**)(uint64_t, float, float))(*(_QWORD *)v15 + 200))(v15, 0.0, 0.0))
      goto LABEL_45;
  }
  else if (v11)
  {
    goto LABEL_8;
  }
  *(float *)v49 = a2;
  *(float *)&v49[4] = a3;
  WebCore::Path::moveTo((WebCore::CanvasPath *)((char *)this + 8), (const WebCore::FloatPoint *)v49);
LABEL_45:
  v11 = *((_DWORD *)this + 18);
LABEL_8:
  v12 = 0.0;
  if (v11 == 2)
  {
    v36 = *((_QWORD *)this + 2);
    v13 = 0.0;
    if (v36)
      (*(void (**)(uint64_t, float, float))(*(_QWORD *)v36 + 224))(v36, 0.0, 0.0);
  }
  else
  {
    v13 = 0.0;
    if (v11 == 1)
    {
      v46 = 0;
      v47 = 0;
      *(_QWORD *)v49 = &v46;
      *(_QWORD *)&v49[8] = &v47;
      v14 = *((unsigned int *)this + 17);
      if ((_DWORD)v14 == -1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_68;
      }
      v48 = v49;
      if (((float (*)(_BYTE **, char *, float, float))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11PathSegment17calculateEndPointERKNS8_10FloatPointERSA_E3__0JEEEEEJRKNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcOT_DpOT0____fmatrix[v14])(&v48, (char *)this + 16, 0.0, 0.0) != a4)
      {
LABEL_16:
        v16 = *((_DWORD *)this + 18);
        if (v16 != 2)
        {
          if (!v16)
          {
            v17 = LODWORD(a2) | ((unint64_t)LODWORD(a3) << 32);
            v18 = LODWORD(a4) | ((unint64_t)LODWORD(a5) << 32);
            v5 = (char *)this + 16;
            goto LABEL_19;
          }
LABEL_22:
          if (v16 == 2)
          {
            v31 = atomic_load((unsigned int *)(*((_QWORD *)this + 2) + 8));
            v22 = *((_QWORD *)this + 2);
            if (v31 != 1)
            {
              (*(void (**)(_BYTE *__return_ptr, _QWORD))(*(_QWORD *)v22 + 24))(v49, *((_QWORD *)this + 2));
              v37 = *(_QWORD *)v49;
              *(_QWORD *)v49 = 0;
              v38 = (unsigned int *)*((_QWORD *)this + 2);
              *((_QWORD *)this + 2) = v37;
              if (v38)
              {
                v39 = v38 + 2;
                do
                {
                  v40 = __ldaxr(v39);
                  v41 = v40 - 1;
                }
                while (__stlxr(v41, v39));
                if (!v41)
                {
                  atomic_store(1u, v38 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
                }
                v42 = *(unsigned int **)v49;
                *(_QWORD *)v49 = 0;
                if (v42)
                {
                  v43 = v42 + 2;
                  do
                  {
                    v44 = __ldaxr(v43);
                    v45 = v44 - 1;
                  }
                  while (__stlxr(v45, v43));
                  if (!v45)
                  {
                    atomic_store(1u, v42 + 2);
                    (*(void (**)(unsigned int *))(*(_QWORD *)v42 + 8))(v42);
                  }
                }
              }
              v22 = *((_QWORD *)this + 2);
            }
            if (v22)
              goto LABEL_50;
          }
          else if (v16 == 1)
          {
            if (*((_DWORD *)this + 17))
            {
              v21 = (unsigned int **)((char *)this + 16);
              v22 = WTF::fastMalloc((WTF *)0x20);
              *(_DWORD *)(v22 + 8) = 1;
              *(_QWORD *)v22 = off_1E340EC98;
              v23 = *((_OWORD *)this + 2);
              *(_OWORD *)v49 = *((_OWORD *)this + 1);
              *(_OWORD *)&v49[16] = v23;
              v50 = *((_OWORD *)this + 3);
              v51 = *((_QWORD *)this + 8);
              *(_QWORD *)(v22 + 16) = 0;
              *(_QWORD *)(v22 + 24) = 0;
              v24 = WTF::fastMalloc((WTF *)0x38);
              *(_DWORD *)(v22 + 24) = 1;
              *(_QWORD *)(v22 + 16) = v24;
              v25 = v24 + 56 * *(unsigned int *)(v22 + 28);
              *(_OWORD *)v25 = *(_OWORD *)v49;
              *(_OWORD *)(v25 + 16) = *(_OWORD *)&v49[16];
              *(_OWORD *)(v25 + 32) = v50;
              *(_QWORD *)(v25 + 48) = v51;
              ++*(_DWORD *)(v22 + 28);
              v26 = *((unsigned int *)this + 18);
              if ((_DWORD)v26 != -1)
              {
                if ((_DWORD)v26 == 2)
                {
                  v27 = *v21;
                  *v21 = (unsigned int *)v22;
                  if (v27)
                  {
                    v28 = v27 + 2;
                    do
                    {
                      v29 = __ldaxr(v28);
                      v30 = --v29 == 0;
                    }
                    while (__stlxr(v29, v28));
LABEL_38:
                    if (v30)
                    {
                      atomic_store(1u, v27 + 2);
                      (*(void (**)(unsigned int *))(*(_QWORD *)v27 + 8))(v27);
                    }
                    goto LABEL_50;
                  }
                  goto LABEL_50;
                }
                ((void (*)(_BYTE *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v26])(v49, (char *)this + 16);
              }
              goto LABEL_49;
            }
            *((float *)this + 6) = a2;
            *((float *)this + 7) = a3;
            *((float *)this + 8) = a4;
            *((float *)this + 9) = a5;
LABEL_53:
            *((_DWORD *)this + 17) = 12;
            return;
          }
          v22 = WTF::fastMalloc((WTF *)0x20);
          *(_DWORD *)(v22 + 8) = 1;
          *(_QWORD *)v22 = off_1E340EC98;
          *(_QWORD *)(v22 + 16) = 0;
          *(_QWORD *)(v22 + 24) = 0;
          v32 = *((unsigned int *)this + 18);
          if ((_DWORD)v32 != -1)
          {
            v33 = (unsigned int **)((char *)this + 16);
            if ((_DWORD)v32 == 2)
            {
              v27 = *v33;
              *v33 = (unsigned int *)v22;
              if (v27)
              {
                v34 = v27 + 2;
                do
                {
                  v35 = __ldaxr(v34);
                  v30 = --v35 == 0;
                }
                while (__stlxr(v35, v34));
                goto LABEL_38;
              }
LABEL_50:
              (*(void (**)(uint64_t, float, float, float, float))(*(_QWORD *)v22 + 48))(v22, a2, a3, a4, a5);
              return;
            }
            ((void (*)(_BYTE *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v32])(v49, v33);
          }
LABEL_49:
          *((_QWORD *)this + 2) = v22;
          *((_DWORD *)this + 18) = 2;
          goto LABEL_50;
        }
        v5 = (char *)this + 16;
        v20 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 200))(*((_QWORD *)this + 2));
        v16 = *((_DWORD *)this + 18);
        if (!v20)
          goto LABEL_22;
LABEL_68:
        v17 = LODWORD(a2) | ((unint64_t)LODWORD(a3) << 32);
        v18 = LODWORD(a4) | ((unint64_t)LODWORD(a5) << 32);
        if (v16 == -1)
          goto LABEL_20;
        if (v16 != 1)
        {
LABEL_19:
          ((void (*)(_BYTE **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v16])(&v48, v5);
LABEL_20:
          *((_QWORD *)this + 2) = 0;
          *((_QWORD *)v5 + 1) = v17;
          *((_QWORD *)v5 + 2) = v18;
          v19 = *(_OWORD *)&v49[12];
          *(_OWORD *)(v5 + 24) = *(_OWORD *)v49;
          *(_OWORD *)(v5 + 36) = v19;
          *((_DWORD *)v5 + 13) = 12;
          *((_DWORD *)this + 18) = 1;
          return;
        }
        *((_QWORD *)this + 2) = 0;
        *((_QWORD *)this + 3) = v17;
        *((_QWORD *)this + 4) = v18;
        goto LABEL_53;
      }
      goto LABEL_15;
    }
  }
LABEL_14:
  if (v13 != a4)
    goto LABEL_16;
LABEL_15:
  if (v12 != a5 || a4 != a2 || a5 != a3)
    goto LABEL_16;
}

void WebCore::CanvasPath::bezierCurveTo(WebCore::CanvasPath *this, float a2, float a3, float a4, float a5, float a6, float a7)
{
  char *v7;
  int v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unsigned int **v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  BOOL v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int **v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  __int128 *v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  if ((LODWORD(a2) & 0x7FFFFFFFu) > 0x7F7FFFFF
    || (LODWORD(a3) & 0x7FFFFFFFu) > 0x7F7FFFFF
    || (LODWORD(a4) & 0x7FFFFFFFu) > 0x7F7FFFFF
    || (LODWORD(a5) & 0x7FFFFFFFu) > 0x7F7FFFFF
    || (LODWORD(a6) & 0x7FFFFFFFu) > 0x7F7FFFFF
    || (LODWORD(a7) & 0x7FFFFFFFu) > 0x7F7FFFFF
    || !(*(unsigned int (**)(WebCore::CanvasPath *))(*(_QWORD *)this + 16))(this))
  {
    return;
  }
  v15 = *((_DWORD *)this + 18);
  if (v15 == 2)
  {
    v19 = *((_QWORD *)this + 2);
    v16 = 0.0;
    v17 = 0.0;
    if (!v19)
      goto LABEL_16;
    if (!(*(unsigned int (**)(uint64_t, float, float))(*(_QWORD *)v19 + 200))(v19, 0.0, 0.0))
      goto LABEL_47;
  }
  else if (v15)
  {
    goto LABEL_10;
  }
  *(_QWORD *)&v53 = __PAIR64__(LODWORD(a3), LODWORD(a2));
  WebCore::Path::moveTo((WebCore::CanvasPath *)((char *)this + 8), (const WebCore::FloatPoint *)&v53);
LABEL_47:
  v15 = *((_DWORD *)this + 18);
LABEL_10:
  v16 = 0.0;
  if (v15 == 2)
  {
    v40 = *((_QWORD *)this + 2);
    v17 = 0.0;
    if (v40)
      (*(void (**)(uint64_t, float, float))(*(_QWORD *)v40 + 224))(v40, 0.0, 0.0);
  }
  else
  {
    v17 = 0.0;
    if (v15 == 1)
    {
      v50 = 0;
      v51 = 0;
      *(_QWORD *)&v53 = &v50;
      *((_QWORD *)&v53 + 1) = &v51;
      v18 = *((unsigned int *)this + 17);
      if ((_DWORD)v18 == -1)
      {
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_72;
      }
      v52 = &v53;
      if (((float (*)(__int128 **, char *, float, float))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11PathSegment17calculateEndPointERKNS8_10FloatPointERSA_E3__0JEEEEEJRKNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcOT_DpOT0____fmatrix[v18])(&v52, (char *)this + 16, 0.0, 0.0) != a6)
      {
LABEL_18:
        v20 = *((_DWORD *)this + 18);
        if (v20 != 2)
        {
          if (!v20)
          {
            v21 = LODWORD(a2) | ((unint64_t)LODWORD(a3) << 32);
            v22 = LODWORD(a4) | ((unint64_t)LODWORD(a5) << 32);
            v23 = LODWORD(a6) | ((unint64_t)LODWORD(a7) << 32);
            v7 = (char *)this + 16;
            goto LABEL_21;
          }
LABEL_24:
          if (v20 == 2)
          {
            v35 = atomic_load((unsigned int *)(*((_QWORD *)this + 2) + 8));
            v26 = *((_QWORD *)this + 2);
            if (v35 != 1)
            {
              (*(void (**)(__int128 *__return_ptr, _QWORD))(*(_QWORD *)v26 + 24))(&v53, *((_QWORD *)this + 2));
              v41 = v53;
              *(_QWORD *)&v53 = 0;
              v42 = (unsigned int *)*((_QWORD *)this + 2);
              *((_QWORD *)this + 2) = v41;
              if (v42)
              {
                v43 = v42 + 2;
                do
                {
                  v44 = __ldaxr(v43);
                  v45 = v44 - 1;
                }
                while (__stlxr(v45, v43));
                if (!v45)
                {
                  atomic_store(1u, v42 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v42 + 8))(v42);
                }
                v46 = (unsigned int *)v53;
                *(_QWORD *)&v53 = 0;
                if (v46)
                {
                  v47 = v46 + 2;
                  do
                  {
                    v48 = __ldaxr(v47);
                    v49 = v48 - 1;
                  }
                  while (__stlxr(v49, v47));
                  if (!v49)
                  {
                    atomic_store(1u, v46 + 2);
                    (*(void (**)(unsigned int *))(*(_QWORD *)v46 + 8))(v46);
                  }
                }
              }
              v26 = *((_QWORD *)this + 2);
            }
            if (v26)
              goto LABEL_52;
          }
          else if (v20 == 1)
          {
            if (*((_DWORD *)this + 17))
            {
              v25 = (unsigned int **)((char *)this + 16);
              v26 = WTF::fastMalloc((WTF *)0x20);
              *(_DWORD *)(v26 + 8) = 1;
              *(_QWORD *)v26 = off_1E340EC98;
              v27 = *((_OWORD *)this + 2);
              v53 = *((_OWORD *)this + 1);
              v54 = v27;
              v55 = *((_OWORD *)this + 3);
              v56 = *((_QWORD *)this + 8);
              *(_QWORD *)(v26 + 16) = 0;
              *(_QWORD *)(v26 + 24) = 0;
              v28 = WTF::fastMalloc((WTF *)0x38);
              *(_DWORD *)(v26 + 24) = 1;
              *(_QWORD *)(v26 + 16) = v28;
              v29 = v28 + 56 * *(unsigned int *)(v26 + 28);
              *(_OWORD *)v29 = v53;
              *(_OWORD *)(v29 + 16) = v54;
              *(_OWORD *)(v29 + 32) = v55;
              *(_QWORD *)(v29 + 48) = v56;
              ++*(_DWORD *)(v26 + 28);
              v30 = *((unsigned int *)this + 18);
              if ((_DWORD)v30 != -1)
              {
                if ((_DWORD)v30 == 2)
                {
                  v31 = *v25;
                  *v25 = (unsigned int *)v26;
                  if (v31)
                  {
                    v32 = v31 + 2;
                    do
                    {
                      v33 = __ldaxr(v32);
                      v34 = --v33 == 0;
                    }
                    while (__stlxr(v33, v32));
LABEL_40:
                    if (v34)
                    {
                      atomic_store(1u, v31 + 2);
                      (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 8))(v31);
                    }
                    goto LABEL_52;
                  }
                  goto LABEL_52;
                }
                ((void (*)(__int128 *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v30])(&v53, (char *)this + 16);
              }
              goto LABEL_51;
            }
            *((float *)this + 6) = a2;
            *((float *)this + 7) = a3;
            *((float *)this + 8) = a4;
            *((float *)this + 9) = a5;
            *((float *)this + 10) = a6;
            *((float *)this + 11) = a7;
LABEL_55:
            *((_DWORD *)this + 17) = 13;
            return;
          }
          v26 = WTF::fastMalloc((WTF *)0x20);
          *(_DWORD *)(v26 + 8) = 1;
          *(_QWORD *)v26 = off_1E340EC98;
          *(_QWORD *)(v26 + 16) = 0;
          *(_QWORD *)(v26 + 24) = 0;
          v36 = *((unsigned int *)this + 18);
          if ((_DWORD)v36 != -1)
          {
            v37 = (unsigned int **)((char *)this + 16);
            if ((_DWORD)v36 == 2)
            {
              v31 = *v37;
              *v37 = (unsigned int *)v26;
              if (v31)
              {
                v38 = v31 + 2;
                do
                {
                  v39 = __ldaxr(v38);
                  v34 = --v39 == 0;
                }
                while (__stlxr(v39, v38));
                goto LABEL_40;
              }
LABEL_52:
              *(_QWORD *)&v53 = __PAIR64__(LODWORD(a3), LODWORD(a2));
              *((_QWORD *)&v53 + 1) = __PAIR64__(LODWORD(a5), LODWORD(a4));
              *(_QWORD *)&v54 = __PAIR64__(LODWORD(a7), LODWORD(a6));
              (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v26 + 56))(v26, &v53);
              return;
            }
            ((void (*)(__int128 *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v36])(&v53, v37);
          }
LABEL_51:
          *((_QWORD *)this + 2) = v26;
          *((_DWORD *)this + 18) = 2;
          goto LABEL_52;
        }
        v7 = (char *)this + 16;
        v24 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 200))(*((_QWORD *)this + 2));
        v20 = *((_DWORD *)this + 18);
        if (!v24)
          goto LABEL_24;
LABEL_72:
        v21 = LODWORD(a2) | ((unint64_t)LODWORD(a3) << 32);
        v22 = LODWORD(a4) | ((unint64_t)LODWORD(a5) << 32);
        v23 = LODWORD(a6) | ((unint64_t)LODWORD(a7) << 32);
        if (v20 == -1)
          goto LABEL_22;
        if (v20 != 1)
        {
LABEL_21:
          ((void (*)(__int128 **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v20])(&v52, v7);
LABEL_22:
          *((_QWORD *)this + 2) = 0;
          *((_QWORD *)this + 3) = v21;
          *((_QWORD *)this + 4) = v22;
          *((_QWORD *)this + 5) = v23;
          *((_OWORD *)this + 3) = v53;
          *((_DWORD *)this + 16) = v54;
          *(_QWORD *)((char *)this + 68) = 0x10000000DLL;
          return;
        }
        *((_QWORD *)this + 2) = 0;
        *((_QWORD *)this + 3) = v21;
        *((_QWORD *)this + 4) = v22;
        *((_QWORD *)this + 5) = v23;
        goto LABEL_55;
      }
      goto LABEL_17;
    }
  }
LABEL_16:
  if (v17 != a6)
    goto LABEL_18;
LABEL_17:
  if (v16 != a7 || a6 != a2 || a7 != a3 || a6 != a4 || a7 != a5)
    goto LABEL_18;
}

void WebCore::CanvasPath::arcTo(WebCore::CanvasPath *this@<X0>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>, float a6@<S4>, uint64_t a7@<X8>)
{
  int v14;
  uint64_t v15;
  const WebCore::FloatPoint *v16;
  float v17;
  float v18;
  _BOOL4 v19;
  int v20;
  uint64_t v21;
  float v22;
  float v23;
  _DWORD v24[2];
  _DWORD v25[2];
  _DWORD v26[2];

  if ((LODWORD(a2) & 0x7FFFFFFFu) <= 0x7F7FFFFF
    && (LODWORD(a3) & 0x7FFFFFFFu) <= 0x7F7FFFFF
    && (LODWORD(a4) & 0x7FFFFFFFu) <= 0x7F7FFFFF
    && (LODWORD(a5) & 0x7FFFFFFFu) <= 0x7F7FFFFF
    && (LODWORD(a6) & 0x7FFFFFFFu) < 0x7F800000)
  {
    if (a6 < 0.0)
    {
      *(_BYTE *)a7 = 0;
      *(_QWORD *)(a7 + 8) = 0;
      *(_BYTE *)(a7 + 16) = 1;
      return;
    }
    if (((*(uint64_t (**)(WebCore::CanvasPath *))(*(_QWORD *)this + 16))(this) & 1) != 0)
    {
      *(float *)v25 = a2;
      *(float *)&v25[1] = a3;
      *(float *)v24 = a4;
      *(float *)&v24[1] = a5;
      v14 = *((_DWORD *)this + 18);
      if (v14 == 2)
      {
        v15 = *((_QWORD *)this + 2);
        if (v15 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 200))(v15))
          goto LABEL_14;
      }
      else if (!v14)
      {
LABEL_14:
        v16 = (const WebCore::FloatPoint *)v25;
LABEL_26:
        WebCore::Path::moveTo((WebCore::CanvasPath *)((char *)this + 8), v16);
        goto LABEL_32;
      }
      WebCore::Path::currentPoint((WebCore::CanvasPath *)((char *)this + 8));
      if (v18 != a2 || v17 != a3)
      {
        v19 = a2 == a4;
        if (a3 != a5)
          v19 = 0;
        if (a6 != 0.0 && !v19)
        {
          WebCore::Path::addArcTo((uint64_t)this + 8, (const WebCore::FloatPoint *)v25, (const WebCore::FloatPoint *)v24, a6);
          goto LABEL_32;
        }
      }
      if (!(*(unsigned int (**)(WebCore::CanvasPath *))(*(_QWORD *)this + 16))(this))
        goto LABEL_32;
      *(float *)v26 = a2;
      *(float *)&v26[1] = a3;
      v20 = *((_DWORD *)this + 18);
      if (v20 == 2)
      {
        v21 = *((_QWORD *)this + 2);
        if (v21 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 200))(v21))
          goto LABEL_25;
      }
      else if (!v20)
      {
LABEL_25:
        v16 = (const WebCore::FloatPoint *)v26;
        goto LABEL_26;
      }
      WebCore::Path::currentPoint((WebCore::CanvasPath *)((char *)this + 8));
      if (v23 != a2 || v22 != a3)
        WebCore::Path::addLineTo((uint64_t)this + 8, (const WebCore::FloatPoint *)v26);
    }
  }
LABEL_32:
  *(_QWORD *)a7 = 0;
  *(_QWORD *)(a7 + 8) = 0;
  *(_QWORD *)(a7 + 16) = 0;
}

void WebCore::CanvasPath::arc(WebCore::CanvasPath *this@<X0>, unsigned int a2@<S0>, unsigned int a3@<S1>, float a4@<S2>, float a5@<S3>, float a6@<S4>, int a7@<W1>, _QWORD *a8@<X8>)
{
  __n128 v16;
  __n128 v17;
  float v18;
  float v19;
  char v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int **v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  BOOL v29;
  char *v30;
  int v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  __float2 v48;
  char v49;
  _OWORD v50[2];
  __int128 v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  if ((a2 & 0x7FFFFFFF) > 0x7F7FFFFF
    || (a3 & 0x7FFFFFFF) > 0x7F7FFFFF
    || (LODWORD(a4) & 0x7FFFFFFFu) > 0x7F7FFFFF
    || (LODWORD(a5) & 0x7FFFFFFFu) > 0x7F7FFFFF
    || (LODWORD(a6) & 0x7FFFFFFFu) >= 0x7F800000)
  {
    goto LABEL_40;
  }
  if (a4 >= 0.0)
  {
    if (((*(uint64_t (**)(WebCore::CanvasPath *))(*(_QWORD *)this + 16))(this) & 1) == 0)
      goto LABEL_40;
    v16.n128_f32[0] = fmodf(a5, 6.2832);
    if (v16.n128_f32[0] >= 0.0)
      v18 = v16.n128_f32[0];
    else
      v18 = v16.n128_f32[0] + 6.2832;
    v19 = (float)(v18 - a5) + a6;
    if (a7)
    {
      v16.n128_f32[0] = v18 - v19;
      v17.n128_u32[0] = 1086918619;
      if ((float)(v18 - v19) < 6.2832)
        goto LABEL_17;
      v16.n128_u32[0] = -1060565029;
    }
    else
    {
      v17.n128_f32[0] = v19 - v18;
      v16.n128_u32[0] = 1086918619;
      if ((float)(v19 - v18) < 6.2832)
        goto LABEL_17;
    }
    v19 = v18 + v16.n128_f32[0];
LABEL_17:
    if (a4 == 0.0 || v18 == v19)
    {
      v48 = __sincosf_stret(v18);
      WebCore::CanvasPath::lineTo(this, *(float *)&a2 + (float)(a4 * v48.__cosval), *(float *)&a3 + (float)(a4 * v48.__sinval));
      goto LABEL_40;
    }
    if ((LODWORD(v18) & 0x7FFFFFFFu) > 0x7F7FFFFF || (LODWORD(v19) & 0x7FFFFFFFu) > 0x7F7FFFFF)
      goto LABEL_40;
    v20 = a7 ^ 1;
    v21 = *((_DWORD *)this + 18);
    if (v21 != 2)
    {
      if (v21)
        goto LABEL_23;
      v32 = a2 | ((unint64_t)a3 << 32);
      v30 = (char *)this + 16;
      goto LABEL_38;
    }
    v30 = (char *)this + 16;
    v31 = (*(uint64_t (**)(_QWORD, __n128, __n128))(**((_QWORD **)this + 2) + 200))(*((_QWORD *)this + 2), v16, v17);
    v21 = *((_DWORD *)this + 18);
    if (!v31)
    {
LABEL_23:
      if (v21 == 1)
      {
        v23 = WTF::fastMalloc((WTF *)0x20);
        *(_DWORD *)(v23 + 8) = 1;
        *(_QWORD *)v23 = off_1E340EC98;
        v34 = *((_OWORD *)this + 2);
        v50[0] = *((_OWORD *)this + 1);
        v50[1] = v34;
        v51 = *((_OWORD *)this + 3);
        v52 = *((_QWORD *)this + 8);
        *(_QWORD *)(v23 + 16) = 0;
        *(_QWORD *)(v23 + 24) = 0;
        v35 = WTF::fastMalloc((WTF *)0x38);
        *(_DWORD *)(v23 + 24) = 1;
        *(_QWORD *)(v23 + 16) = v35;
        v36 = v35 + 56 * *(unsigned int *)(v23 + 28);
        *(_OWORD *)v36 = v50[0];
        *(_OWORD *)(v36 + 16) = v50[1];
        *(_OWORD *)(v36 + 32) = v51;
        *(_QWORD *)(v36 + 48) = v52;
        ++*(_DWORD *)(v23 + 28);
        v24 = *((unsigned int *)this + 18);
        if ((_DWORD)v24 == -1)
        {
LABEL_50:
          *((_QWORD *)this + 2) = v23;
          *((_DWORD *)this + 18) = 2;
          goto LABEL_51;
        }
        v25 = (unsigned int **)((char *)this + 16);
        if ((_DWORD)v24 == 2)
        {
          v26 = *v25;
          *v25 = (unsigned int *)v23;
          if (v26)
          {
            v37 = v26 + 2;
            do
            {
              v38 = __ldaxr(v37);
              v29 = --v38 == 0;
            }
            while (__stlxr(v38, v37));
            goto LABEL_46;
          }
LABEL_51:
          *(_QWORD *)&v50[0] = __PAIR64__(a3, a2);
          *((_QWORD *)&v50[0] + 1) = __PAIR64__(LODWORD(v18), LODWORD(a4));
          *(float *)&v50[1] = v19;
          BYTE4(v50[1]) = v20;
          (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v23 + 72))(v23, v50);
          goto LABEL_40;
        }
      }
      else
      {
        if (v21 == 2)
        {
          v22 = atomic_load((unsigned int *)(*((_QWORD *)this + 2) + 8));
          v23 = *((_QWORD *)this + 2);
          if (v22 != 1)
          {
            (*(void (**)(_OWORD *__return_ptr, _QWORD, __n128, __n128))(*(_QWORD *)v23 + 24))(v50, *((_QWORD *)this + 2), v16, v17);
            v39 = *(_QWORD *)&v50[0];
            *(_QWORD *)&v50[0] = 0;
            v40 = (unsigned int *)*((_QWORD *)this + 2);
            *((_QWORD *)this + 2) = v39;
            if (v40)
            {
              v41 = v40 + 2;
              do
              {
                v42 = __ldaxr(v41);
                v43 = v42 - 1;
              }
              while (__stlxr(v43, v41));
              if (!v43)
              {
                atomic_store(1u, v40 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v40 + 8))(v40);
              }
              v44 = *(unsigned int **)&v50[0];
              *(_QWORD *)&v50[0] = 0;
              if (v44)
              {
                v45 = v44 + 2;
                do
                {
                  v46 = __ldaxr(v45);
                  v47 = v46 - 1;
                }
                while (__stlxr(v47, v45));
                if (!v47)
                {
                  atomic_store(1u, v44 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v44 + 8))(v44);
                }
              }
            }
            v23 = *((_QWORD *)this + 2);
          }
          if (v23)
            goto LABEL_51;
        }
        v23 = WTF::fastMalloc((WTF *)0x20);
        *(_DWORD *)(v23 + 8) = 1;
        *(_QWORD *)v23 = off_1E340EC98;
        *(_QWORD *)(v23 + 16) = 0;
        *(_QWORD *)(v23 + 24) = 0;
        v24 = *((unsigned int *)this + 18);
        if ((_DWORD)v24 == -1)
          goto LABEL_50;
        v25 = (unsigned int **)((char *)this + 16);
        if ((_DWORD)v24 == 2)
        {
          v26 = *v25;
          *v25 = (unsigned int *)v23;
          if (v26)
          {
            v27 = v26 + 2;
            do
            {
              v28 = __ldaxr(v27);
              v29 = --v28 == 0;
            }
            while (__stlxr(v28, v27));
LABEL_46:
            if (v29)
            {
              atomic_store(1u, v26 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
            }
            goto LABEL_51;
          }
          goto LABEL_51;
        }
      }
      ((void (*)(_OWORD *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v24])(v50, v25);
      goto LABEL_50;
    }
    v32 = a2 | ((unint64_t)a3 << 32);
    if (v21 == -1)
      goto LABEL_39;
    if (v21 != 1)
    {
LABEL_38:
      ((void (*)(char *, char *, __n128, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v21])(&v49, v30, v16, v17);
LABEL_39:
      *((_QWORD *)this + 2) = v32;
      *((float *)v30 + 2) = a4;
      *((float *)v30 + 3) = v18;
      *((float *)v30 + 4) = v19;
      v30[20] = v20;
      v33 = *(_OWORD *)((char *)v50 + 15);
      *(_OWORD *)(v30 + 21) = v50[0];
      *(_OWORD *)(v30 + 36) = v33;
      *((_DWORD *)v30 + 13) = 5;
      *((_DWORD *)this + 18) = 1;
      goto LABEL_40;
    }
    *((_QWORD *)this + 2) = v32;
    *((float *)this + 6) = a4;
    *((float *)this + 7) = v18;
    *((float *)this + 8) = v19;
    *((_BYTE *)this + 36) = v20;
    *((_DWORD *)this + 17) = 5;
LABEL_40:
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0;
    return;
  }
  *(_BYTE *)a8 = 0;
  a8[1] = 0;
  *((_BYTE *)a8 + 16) = 1;
}

void WebCore::CanvasPath::ellipse(WebCore::CanvasPath *this@<X0>, unsigned int a2@<S0>, unsigned int a3@<S1>, float a4@<S2>, float a5@<S3>, float a6@<S4>, float a7@<S5>, float a8@<S6>, int a9@<W1>, uint64_t a10@<X8>)
{
  float v20;
  float v21;
  float v22;
  float v23;
  BOOL v24;
  float v25;
  __double2 v26;
  __float2 v27;
  double v28;
  double v29;
  double v30;
  double v31;
  float v32;
  __double2 v33;
  __float2 v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  float v40;
  float v41;
  BOOL v42;
  int v43;
  uint64_t v44;
  float v45;
  float v46;
  float v48;
  __float2 v49;
  double v50;
  double v51;
  float v52;
  float v53;
  BOOL v54;
  int v55;
  uint64_t v56;
  float v57;
  float v58;
  float v60;
  __float2 v61;
  double v62;
  double v63;
  float v64;
  float v65;
  BOOL v66;
  int v67;
  uint64_t v68;
  float v69;
  float v70;
  __float2 v72;
  double v73;
  double v74;
  float v75;
  float v76;
  BOOL v77;
  int v78;
  uint64_t v79;
  float v80;
  float v81;
  double v83;
  double v84;
  double v85;
  double v86;
  double v87;
  unint64_t v88;

  if ((a2 & 0x7FFFFFFF) <= 0x7F7FFFFF
    && (a3 & 0x7FFFFFFF) <= 0x7F7FFFFF
    && (LODWORD(a4) & 0x7FFFFFFFu) <= 0x7F7FFFFF
    && (LODWORD(a5) & 0x7FFFFFFFu) <= 0x7F7FFFFF
    && (LODWORD(a6) & 0x7FFFFFFFu) <= 0x7F7FFFFF
    && (LODWORD(a7) & 0x7FFFFFFFu) <= 0x7F7FFFFF
    && (LODWORD(a8) & 0x7FFFFFFFu) < 0x7F800000)
  {
    if (a4 < 0.0 || a5 < 0.0)
    {
      *(_BYTE *)a10 = 0;
      *(_QWORD *)(a10 + 8) = 0;
      *(_BYTE *)(a10 + 16) = 1;
      return;
    }
    if (((*(uint64_t (**)(WebCore::CanvasPath *))(*(_QWORD *)this + 16))(this) & 1) != 0)
    {
      v20 = 6.2832;
      v21 = fmodf(a7, 6.2832);
      if (v21 >= 0.0)
        v22 = v21;
      else
        v22 = v21 + 6.2832;
      v23 = (float)(v22 - a7) + a8;
      if (a9)
      {
        if ((float)(v22 - v23) < 6.2832)
          goto LABEL_21;
        v20 = -6.2832;
      }
      else if ((float)(v23 - v22) < 6.2832)
      {
        goto LABEL_21;
      }
      v23 = v22 + v20;
LABEL_21:
      v24 = a5 == 0.0 && a4 == 0.0;
      if (v24 || v22 == v23)
      {
        v87 = *(float *)&a3 + 0.0;
        v25 = v22;
        v26 = __sincos_stret(a6);
        v27 = __sincosf_stret(v25);
        v28 = (float)(v27.__cosval * a4);
        v29 = (float)(v27.__sinval * a5);
        v30 = *(float *)&a2
            + 0.0
            + (v26.__cosval * 0.0 - v26.__sinval) * v29
            + (v26.__cosval + v26.__sinval * 0.0) * v28;
        v31 = (v26.__cosval - v26.__sinval * 0.0) * v29 + (v26.__sinval + v26.__cosval * 0.0) * v28;
        goto LABEL_85;
      }
      if (a4 != 0.0 && a5 != 0.0)
      {
        v88 = __PAIR64__(a3, a2);
        WebCore::Path::addEllipse((WebCore::CanvasPath *)((char *)this + 8), (uint64_t *)&v88, a9 ^ 1, a4, a5, a6, v22, v23);
        goto LABEL_101;
      }
      v86 = *(float *)&a2 + 0.0;
      v87 = *(float *)&a3 + 0.0;
      v32 = v22;
      v33 = __sincos_stret(a6);
      v34 = __sincosf_stret(v32);
      v35 = (float)(v34.__cosval * a4);
      v36 = (float)(v34.__sinval * a5);
      v83 = v33.__cosval * 0.0 - v33.__sinval;
      v84 = v33.__cosval + v33.__sinval * 0.0;
      v37 = v83 * v36 + v84 * v35;
      v38 = v33.__cosval - v33.__sinval * 0.0;
      v85 = v33.__sinval + v33.__cosval * 0.0;
      v39 = v38 * v36 + v85 * v35;
      v40 = v86 + v37;
      v41 = v87 + v39;
      v42 = (LODWORD(v40) & 0x7FFFFFFFu) <= 0x7F7FFFFF && COERCE_UNSIGNED_INT(fabs(v87 + v39)) <= 0x7F7FFFFF;
      if (!v42 || !(*(unsigned int (**)(WebCore::CanvasPath *))(*(_QWORD *)this + 16))(this))
        goto LABEL_46;
      v88 = __PAIR64__(LODWORD(v41), LODWORD(v40));
      v43 = *((_DWORD *)this + 18);
      if (v43 == 2)
      {
        v44 = *((_QWORD *)this + 2);
        if (v44 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v44 + 200))(v44))
          goto LABEL_38;
      }
      else if (!v43)
      {
LABEL_38:
        WebCore::Path::moveTo((WebCore::CanvasPath *)((char *)this + 8), (const WebCore::FloatPoint *)&v88);
LABEL_46:
        v48 = v32 - fmodf(v32, 1.5708);
        if ((a9 & 1) != 0)
        {
          if (v48 > v23)
          {
            while (1)
            {
              v49 = __sincosf_stret(v48);
              v50 = (float)(v49.__cosval * a4);
              v51 = (float)(v49.__sinval * a5);
              v52 = v86 + v83 * v51 + v84 * v50;
              v53 = v87 + v38 * v51 + v85 * v50;
              v54 = (LODWORD(v52) & 0x7FFFFFFFu) <= 0x7F7FFFFF
                 && COERCE_UNSIGNED_INT(fabs(v87 + v38 * v51 + v85 * v50)) <= 0x7F7FFFFF;
              if (v54 && (*(unsigned int (**)(WebCore::CanvasPath *))(*(_QWORD *)this + 16))(this))
              {
                v88 = __PAIR64__(LODWORD(v53), LODWORD(v52));
                v55 = *((_DWORD *)this + 18);
                if (v55 == 2)
                {
                  v56 = *((_QWORD *)this + 2);
                  if (!v56 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v56 + 200))(v56))
                  {
LABEL_59:
                    WebCore::Path::currentPoint((WebCore::CanvasPath *)((char *)this + 8));
                    if (v58 != v52 || v57 != v53)
                      WebCore::Path::addLineTo((uint64_t)this + 8, (const WebCore::FloatPoint *)&v88);
                    goto LABEL_64;
                  }
                }
                else if (v55)
                {
                  goto LABEL_59;
                }
                WebCore::Path::moveTo((WebCore::CanvasPath *)((char *)this + 8), (const WebCore::FloatPoint *)&v88);
              }
LABEL_64:
              v48 = v48 + -1.5708;
              if (v48 <= v23)
                goto LABEL_84;
            }
          }
          goto LABEL_84;
        }
        v60 = v48 + 1.5708;
        if (v60 >= v23)
        {
LABEL_84:
          v72 = __sincosf_stret(v23);
          v73 = (float)(v72.__cosval * a4);
          v74 = (float)(v72.__sinval * a5);
          v30 = v86 + v83 * v74 + v84 * v73;
          v31 = v38 * v74 + v85 * v73;
LABEL_85:
          v75 = v30;
          v76 = v87 + v31;
          v77 = (LODWORD(v75) & 0x7FFFFFFFu) <= 0x7F7FFFFF && COERCE_UNSIGNED_INT(fabs(v87 + v31)) <= 0x7F7FFFFF;
          if (!v77 || !(*(unsigned int (**)(WebCore::CanvasPath *))(*(_QWORD *)this + 16))(this))
            goto LABEL_101;
          v88 = __PAIR64__(LODWORD(v76), LODWORD(v75));
          v78 = *((_DWORD *)this + 18);
          if (v78 == 2)
          {
            v79 = *((_QWORD *)this + 2);
            if (v79 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v79 + 200))(v79))
              goto LABEL_93;
          }
          else if (!v78)
          {
LABEL_93:
            WebCore::Path::moveTo((WebCore::CanvasPath *)((char *)this + 8), (const WebCore::FloatPoint *)&v88);
            goto LABEL_101;
          }
          WebCore::Path::currentPoint((WebCore::CanvasPath *)((char *)this + 8));
          if (v81 != v75 || v80 != v76)
            WebCore::Path::addLineTo((uint64_t)this + 8, (const WebCore::FloatPoint *)&v88);
          goto LABEL_101;
        }
        while (1)
        {
          v61 = __sincosf_stret(v60);
          v62 = (float)(v61.__cosval * a4);
          v63 = (float)(v61.__sinval * a5);
          v64 = v86 + v83 * v63 + v84 * v62;
          v65 = v87 + v38 * v63 + v85 * v62;
          v66 = (LODWORD(v64) & 0x7FFFFFFFu) <= 0x7F7FFFFF
             && COERCE_UNSIGNED_INT(fabs(v87 + v38 * v63 + v85 * v62)) <= 0x7F7FFFFF;
          if (v66 && (*(unsigned int (**)(WebCore::CanvasPath *))(*(_QWORD *)this + 16))(this))
          {
            v88 = __PAIR64__(LODWORD(v65), LODWORD(v64));
            v67 = *((_DWORD *)this + 18);
            if (v67 == 2)
            {
              v68 = *((_QWORD *)this + 2);
              if (!v68 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v68 + 200))(v68))
              {
LABEL_78:
                WebCore::Path::currentPoint((WebCore::CanvasPath *)((char *)this + 8));
                if (v70 != v64 || v69 != v65)
                  WebCore::Path::addLineTo((uint64_t)this + 8, (const WebCore::FloatPoint *)&v88);
                goto LABEL_83;
              }
            }
            else if (v67)
            {
              goto LABEL_78;
            }
            WebCore::Path::moveTo((WebCore::CanvasPath *)((char *)this + 8), (const WebCore::FloatPoint *)&v88);
          }
LABEL_83:
          v60 = v60 + 1.5708;
          if (v60 >= v23)
            goto LABEL_84;
        }
      }
      WebCore::Path::currentPoint((WebCore::CanvasPath *)((char *)this + 8));
      if (v46 != v40 || v45 != v41)
        WebCore::Path::addLineTo((uint64_t)this + 8, (const WebCore::FloatPoint *)&v88);
      goto LABEL_46;
    }
  }
LABEL_101:
  *(_QWORD *)a10 = 0;
  *(_QWORD *)(a10 + 8) = 0;
  *(_QWORD *)(a10 + 16) = 0;
}

WTF *WebCore::CanvasPath::roundRect@<X0>(WTF *result@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>, float a5@<S0>, float a6@<S1>, float a7@<S2>, float a8@<S3>)
{
  float v10;
  float v12;
  uint64_t v13;
  WTF *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  WebCore::Path *v27;
  _BOOL4 v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  _BOOL4 v36;
  float v37;
  BOOL v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  _BOOL4 v47;
  float v48;
  float v49;
  __n128 v50;
  float v51;
  float v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  __int128 v57;
  int v58;
  uint64_t v59;
  float v60;
  float v61;
  unint64_t v62;
  float v63;
  float v64;
  float v65;
  WTF *v66;
  uint64_t v67;
  _BYTE v68[32];
  uint64_t v69;
  _BYTE *v70;
  _BYTE v71[32];
  __int128 v72;
  int v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  if ((LODWORD(a5) & 0x7FFFFFFFu) > 0x7F7FFFFF
    || (v10 = a6, (LODWORD(a6) & 0x7FFFFFFFu) > 0x7F7FFFFF)
    || (LODWORD(a7) & 0x7FFFFFFFu) > 0x7F7FFFFF
    || (v12 = a8, (LODWORD(a8) & 0x7FFFFFFFu) >= 0x7F800000))
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return result;
  }
  if (a3 - 5 <= 0xFFFFFFFFFFFFFFFBLL)
  {
    v70 = (_BYTE *)a3;
    *(_QWORD *)v71 = "radii must contain at least 1 element, up to 4. It contained ";
    *(_DWORD *)&v71[8] = 61;
    v66 = (WTF *)" elements.";
    LODWORD(v67) = 10;
    result = (WTF *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<unsigned long long,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v71, (unint64_t *)&v70, (uint64_t)&v66, &v69);
    v13 = v69;
    if (!v69)
    {
      __break(0xC471u);
      JUMPOUT(0x195CD7C80);
    }
    *(_BYTE *)a4 = 32;
    a4[1] = v13;
    *((_BYTE *)a4 + 16) = 1;
    return result;
  }
  v15 = result;
  v66 = (WTF *)v68;
  v67 = 4;
  v16 = 40 * a3;
  do
  {
    LOBYTE(v64) = 0;
    *(_QWORD *)v71 = &v66;
    *(_QWORD *)&v71[8] = &v64;
    *(_QWORD *)&v71[16] = &v66;
    *(_QWORD *)&v71[24] = &v64;
    v17 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v17 == -1)
    {
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_126:
      __break(0xC471u);
      JUMPOUT(0x195CD7C78);
    }
    v70 = v71;
    ((void (*)(_BYTE **, uint64_t))off_1E33DC770[v17])(&v70, a2);
    if (*((unsigned __int8 *)a4 + 16) | LOBYTE(v64))
      goto LABEL_121;
    a2 += 40;
    v16 -= 40;
  }
  while (v16);
  if (a7 != 0.0 && v12 != 0.0)
  {
    switch(HIDWORD(v67))
    {
      case 1:
        v19 = *(float *)v66;
        v20 = *((float *)v66 + 1);
        v21 = v20;
        v22 = *(float *)v66;
        v23 = v20;
        v24 = *(float *)v66;
        v25 = v20;
        v26 = *(float *)v66;
        goto LABEL_26;
      case 2:
        v19 = *(float *)v66;
        v20 = *((float *)v66 + 1);
        v22 = *((float *)v66 + 2);
        v21 = *((float *)v66 + 3);
        v23 = v20;
        v24 = *(float *)v66;
        goto LABEL_24;
      case 3:
        v19 = *(float *)v66;
        v20 = *((float *)v66 + 1);
        v22 = *((float *)v66 + 2);
        v21 = *((float *)v66 + 3);
        v24 = *((float *)v66 + 4);
        v23 = *((float *)v66 + 5);
LABEL_24:
        v25 = v21;
        v26 = v22;
        goto LABEL_26;
      case 4:
        v19 = *(float *)v66;
        v20 = *((float *)v66 + 1);
        v22 = *((float *)v66 + 2);
        v21 = *((float *)v66 + 3);
        v24 = *((float *)v66 + 4);
        v23 = *((float *)v66 + 5);
        v26 = *((float *)v66 + 6);
        v25 = *((float *)v66 + 7);
LABEL_26:
        v28 = a7 >= 0.0;
        v29 = fabsf(a7);
        if (a7 < 0.0)
          v30 = v21;
        else
          v30 = v20;
        if (a7 < 0.0)
          v31 = v22;
        else
          v31 = v19;
        if (a7 < 0.0)
        {
          v32 = v25;
        }
        else
        {
          v20 = v21;
          v19 = v22;
          v32 = v23;
        }
        if (a7 < 0.0)
          v33 = v26;
        else
          v33 = v24;
        if (a7 < 0.0)
        {
          v34 = v29;
        }
        else
        {
          v23 = v25;
          v24 = v26;
          v34 = a7;
        }
        if (a7 < 0.0)
          v35 = a5 - v29;
        else
          v35 = a5;
        v63 = v35;
        v36 = a7 < 0.0;
        v37 = fabsf(v12);
        v38 = v12 < 0.0;
        if (v12 < 0.0)
          v39 = v23;
        else
          v39 = v30;
        if (v12 < 0.0)
          v40 = v24;
        else
          v40 = v31;
        if (v12 < 0.0)
          v41 = v32;
        else
          v41 = v20;
        if (v12 < 0.0)
          v42 = v33;
        else
          v42 = v19;
        if (v12 < 0.0)
          v43 = v20;
        else
          v43 = v32;
        if (v12 < 0.0)
          v44 = v19;
        else
          v44 = v33;
        if (v12 < 0.0)
          v45 = v30;
        else
          v45 = v23;
        if (v12 < 0.0)
          v46 = v31;
        else
          v46 = v24;
        if (v12 < 0.0)
          v47 = v36;
        else
          v47 = v28;
        if (v12 < 0.0)
          v12 = v37;
        if (v38)
          v10 = v10 - v37;
        v48 = v34 / (float)(v40 + v42);
        if ((float)(v12 / (float)(v41 + v43)) < v48)
          v48 = v12 / (float)(v41 + v43);
        if ((float)(v34 / (float)(v44 + v46)) < v48)
          v48 = v34 / (float)(v44 + v46);
        if ((float)(v12 / (float)(v39 + v45)) < v48)
          v48 = v12 / (float)(v39 + v45);
        v60 = v34;
        if (v48 >= 1.0)
        {
          v61 = v43;
          v62 = __PAIR64__(LODWORD(v41), LODWORD(v42));
        }
        else
        {
          v40 = v40 * v48;
          v39 = v39 * v48;
          *(float *)&v62 = v42 * v48;
          *((float *)&v62 + 1) = v41 * v48;
          v46 = v46 * v48;
          v45 = v45 * v48;
          v44 = v44 * v48;
          v61 = v43 * v48;
        }
        v49 = v63;
        *(float *)v71 = v63 + v40;
        *(float *)&v71[4] = v10;
        WebCore::Path::moveTo((WTF *)((char *)v15 + 8), (const WebCore::FloatPoint *)v71);
        if (v47)
        {
          *(float *)v71 = v63;
          *(float *)&v71[4] = v10;
          *(float *)&v71[8] = v60;
          *(float *)&v71[12] = v12;
          *(float *)&v71[16] = v40;
          *(float *)&v71[20] = v39;
          *(_QWORD *)&v71[24] = v62;
          *(_QWORD *)&v72 = __PAIR64__(LODWORD(v45), LODWORD(v46));
          *((_QWORD *)&v72 + 1) = __PAIR64__(LODWORD(v61), LODWORD(v44));
          v50.n128_f64[0] = WebCore::Path::addRoundedRect((WTF *)((char *)v15 + 8), (WebCore::FloatRect *)v71, 0);
        }
        else
        {
          if (v39 > 0.0 || v40 > 0.0)
          {
            *(float *)v71 = v63 + (float)(v40 * 0.44772);
            *(float *)&v71[4] = v10;
            *(float *)&v70 = v63;
            *((float *)&v70 + 1) = v10 + (float)(v39 * 0.44772);
            v64 = v63;
            v65 = v10 + v39;
            WebCore::Path::addBezierCurveTo((uint64_t)v15 + 8, (const WebCore::FloatPoint *)v71, (const WebCore::FloatPoint *)&v70, (const WebCore::FloatPoint *)&v64);
          }
          v51 = v12 + v10;
          v49 = v63;
          *(float *)v71 = v63;
          *(float *)&v71[4] = v51 - v45;
          WebCore::Path::addLineTo((uint64_t)v15 + 8, (const WebCore::FloatPoint *)v71);
          if (v45 > 0.0 || v46 > 0.0)
          {
            *(float *)v71 = v63;
            *(float *)&v71[4] = v51 - (float)(v45 * 0.44772);
            *(float *)&v70 = v63 + (float)(v46 * 0.44772);
            *((float *)&v70 + 1) = v51;
            v64 = v63 + v46;
            v65 = v51;
            WebCore::Path::addBezierCurveTo((uint64_t)v15 + 8, (const WebCore::FloatPoint *)v71, (const WebCore::FloatPoint *)&v70, (const WebCore::FloatPoint *)&v64);
          }
          v52 = v60 + v63;
          *(float *)v71 = (float)(v60 + v63) - v44;
          *(float *)&v71[4] = v51;
          WebCore::Path::addLineTo((uint64_t)v15 + 8, (const WebCore::FloatPoint *)v71);
          if (v61 > 0.0 || v44 > 0.0)
          {
            *(float *)v71 = v52 - (float)(v44 * 0.44772);
            *(float *)&v71[4] = v51;
            *(float *)&v70 = v60 + v63;
            *((float *)&v70 + 1) = v51 - (float)(v61 * 0.44772);
            v64 = v60 + v63;
            v65 = v51 - v61;
            WebCore::Path::addBezierCurveTo((uint64_t)v15 + 8, (const WebCore::FloatPoint *)v71, (const WebCore::FloatPoint *)&v70, (const WebCore::FloatPoint *)&v64);
          }
          *(float *)v71 = v60 + v63;
          *(float *)&v71[4] = v10 + *((float *)&v62 + 1);
          WebCore::Path::addLineTo((uint64_t)v15 + 8, (const WebCore::FloatPoint *)v71);
          if (*((float *)&v62 + 1) > 0.0 || *(float *)&v62 > 0.0)
          {
            *(float *)v71 = v60 + v63;
            *(float *)&v71[4] = v10 + (float)(*((float *)&v62 + 1) * 0.44772);
            *(float *)&v70 = v52 - (float)(*(float *)&v62 * 0.44772);
            *((float *)&v70 + 1) = v10;
            v64 = v52 - *(float *)&v62;
            v65 = v10;
            WebCore::Path::addBezierCurveTo((uint64_t)v15 + 8, (const WebCore::FloatPoint *)v71, (const WebCore::FloatPoint *)&v70, (const WebCore::FloatPoint *)&v64);
          }
          *(float *)v71 = v63 + v40;
          *(float *)&v71[4] = v10;
          WebCore::Path::addLineTo((uint64_t)v15 + 8, (const WebCore::FloatPoint *)v71);
        }
        v53 = *((_DWORD *)v15 + 18);
        if (v53 == 2)
        {
          v54 = *((_QWORD *)v15 + 2);
          if (!v54)
            goto LABEL_117;
          if (((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v54 + 200))(v54, v50) & 1) != 0)
            goto LABEL_118;
          v53 = *((_DWORD *)v15 + 18);
        }
        else if (!v53)
        {
          goto LABEL_118;
        }
        if (v53 == 2)
        {
          v56 = *((_QWORD *)v15 + 2);
          if (v56)
          {
            if (((*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v56 + 208))(v56, v50) & 1) != 0)
              goto LABEL_118;
            if (*((_DWORD *)v15 + 18) == 1)
            {
              v55 = *((_DWORD *)v15 + 17);
              goto LABEL_115;
            }
          }
        }
        else if (v53 == 1)
        {
          v55 = *((_DWORD *)v15 + 17);
          if (v55 != 6 && v55 != 15)
          {
LABEL_115:
            if (v55 == 5)
            {
              *(_OWORD *)v71 = *((_OWORD *)v15 + 1);
              *(_QWORD *)&v71[13] = *(_QWORD *)((char *)v15 + 29);
              v57 = v72;
              *((_OWORD *)v15 + 2) = *(_OWORD *)&v71[16];
              *((_OWORD *)v15 + 3) = v57;
              v58 = v73;
              *((_OWORD *)v15 + 1) = *(_OWORD *)v71;
              *((_DWORD *)v15 + 16) = v58;
              *((_DWORD *)v15 + 17) = 6;
              goto LABEL_118;
            }
            goto LABEL_117;
          }
LABEL_118:
          *(float *)v71 = v49;
          *(float *)&v71[4] = v10;
          v27 = (WTF *)((char *)v15 + 8);
          goto LABEL_119;
        }
LABEL_117:
        v59 = WebCore::Path::ensureImpl((WTF *)((char *)v15 + 8));
        (*(void (**)(uint64_t))(*(_QWORD *)v59 + 120))(v59);
        goto LABEL_118;
      default:
        goto LABEL_126;
    }
  }
  if (!(*(unsigned int (**)(WTF *))(*(_QWORD *)v15 + 16))(v15))
    goto LABEL_120;
  v27 = (WTF *)((char *)v15 + 8);
  if (a7 != 0.0 || v12 != 0.0)
  {
    *(float *)v71 = a5;
    *(float *)&v71[4] = v10;
    *(float *)&v71[8] = a7;
    *(float *)&v71[12] = v12;
    WebCore::Path::addRect(v27, (const WebCore::FloatRect *)v71);
    goto LABEL_120;
  }
  *(float *)v71 = a5;
  *(float *)&v71[4] = v10;
LABEL_119:
  WebCore::Path::moveTo(v27, (const WebCore::FloatPoint *)v71);
LABEL_120:
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
LABEL_121:
  result = v66;
  if (v68 != (_BYTE *)v66 && v66)
  {
    v66 = 0;
    LODWORD(v67) = 0;
    return (WTF *)WTF::fastFree(result, v18);
  }
  return result;
}

WebCore::CanvasRenderingContext *WebCore::CanvasRenderingContext::CanvasRenderingContext(WebCore::CanvasRenderingContext *this, WebCore::CanvasBase *a2)
{
  int v4;
  uint64_t v6;
  WebCore::CanvasRenderingContext *v7;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = off_1E33DC248;
  *((_WORD *)this + 12) = 0;
  *((_QWORD *)this + 4) = a2;
  if (__ldaxr(WebCore::CanvasRenderingContext::s_instancesLock))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEA534C](WebCore::CanvasRenderingContext::s_instancesLock);
    goto LABEL_4;
  }
  if (__stxr(1u, WebCore::CanvasRenderingContext::s_instancesLock))
    goto LABEL_3;
LABEL_4:
  {
    WebCore::CanvasRenderingContext::instances(void)::instances = 0;
  }
  v7 = this;
  WTF::HashTable<WebCore::CanvasRenderingContext *,WebCore::CanvasRenderingContext *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>>::add(&WebCore::CanvasRenderingContext::instances(void)::instances, (uint64_t *)&v7, (uint64_t)&v6);
  v4 = __ldxr(WebCore::CanvasRenderingContext::s_instancesLock);
  if (v4 == 1)
  {
    if (!__stlxr(0, WebCore::CanvasRenderingContext::s_instancesLock))
      return this;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::CanvasRenderingContext::s_instancesLock);
  return this;
}

void WebCore::CanvasRenderingContext::~CanvasRenderingContext(unsigned int **this)
{
  _QWORD *v3;
  void *v4;
  int v5;
  unsigned int *v6;
  unsigned int **v7;

  *this = (unsigned int *)off_1E33DC248;
  if (__ldaxr(WebCore::CanvasRenderingContext::s_instancesLock))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEA534C](WebCore::CanvasRenderingContext::s_instancesLock);
    goto LABEL_4;
  }
  if (__stxr(1u, WebCore::CanvasRenderingContext::s_instancesLock))
    goto LABEL_3;
LABEL_4:
  {
    WebCore::CanvasRenderingContext::instances(void)::instances = 0;
  }
  v7 = this;
  v3 = (_QWORD *)WTF::HashTable<WebCore::CanvasRenderingContext *,WebCore::CanvasRenderingContext *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::CanvasRenderingContext *>,WTF::DefaultHash<WebCore::CanvasRenderingContext *>>,WebCore::CanvasRenderingContext *>(&WebCore::CanvasRenderingContext::instances(void)::instances, (uint64_t *)&v7);
  WTF::HashSet<WebCore::CanvasRenderingContext *,WTF::DefaultHash<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>,WTF::HashTableTraits>::remove(&WebCore::CanvasRenderingContext::instances(void)::instances, v3);
  v5 = __ldxr(WebCore::CanvasRenderingContext::s_instancesLock);
  if (v5 != 1)
  {
    __clrex();
    goto LABEL_10;
  }
  if (__stlxr(0, WebCore::CanvasRenderingContext::s_instancesLock))
LABEL_10:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::CanvasRenderingContext::s_instancesLock);
  WTF::CanMakeWeakPtrBase<WTF::WeakPtrFactory<WebCore::CookieStorageObserver,WTF::DefaultWeakPtrImpl>,(WTF::WeakPtrFactoryInitialization)1>::~CanMakeWeakPtrBase(this + 2, v4);
  v6 = this[1];
  if (v6)
  {
    *((_QWORD *)v6 + 1) = 3;
    this[1] = 0;
  }
}

{
  bmalloc::api *v1;
  void *v2;

  WebCore::CanvasRenderingContext::~CanvasRenderingContext(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::CanvasRenderingContext::ref(WebCore::CanvasRenderingContext *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4));
}

uint64_t WebCore::CanvasRenderingContext::deref(WebCore::CanvasRenderingContext *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 24))(*((_QWORD *)this + 4));
}

uint64_t WebCore::CanvasRenderingContext::surfaceBufferToImageBuffer@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;

  v3 = *(_QWORD *)(result + 32);
  if (!*(_BYTE *)(v3 + 73))
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 160))(*(_QWORD *)(result + 32));
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    goto LABEL_12;
  v5 = *(_QWORD *)(v4 + 8);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_7;
  }
  result = MEMORY[0x19AEA534C](v5);
LABEL_7:
  ++*(_QWORD *)(v5 + 8);
  v7 = __ldxr((unsigned __int8 *)v5);
  if (v7 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v5))
      goto LABEL_12;
  }
  else
  {
    __clrex();
  }
  result = WTF::Lock::unlockSlow((WTF::Lock *)v5);
LABEL_12:
  *a2 = v4;
  return result;
}

uint64_t WebCore::CanvasRenderingContext::isSurfaceBufferTransparentBlack()
{
  return 0;
}

uint64_t WebCore::CanvasRenderingContext::delegatesDisplay(WebCore::CanvasRenderingContext *this)
{
  return 0;
}

void WebCore::CanvasRenderingContext::layerContentsDisplayDelegate(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *WebCore::CanvasRenderingContext::setContentsToLayer(WebCore::CanvasRenderingContext *this, WebCore::GraphicsLayer *a2)
{
  _DWORD *result;
  _DWORD *v4;

  (*(void (**)(_DWORD **__return_ptr))(*(_QWORD *)this + 128))(&v4);
  (*(void (**)(WebCore::GraphicsLayer *, _DWORD **, uint64_t))(*(_QWORD *)a2 + 544))(a2, &v4, 3);
  result = v4;
  v4 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

void WebCore::CanvasRenderingContext::transferToImageBuffer(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::CanvasRenderingContext::pixelFormat(WebCore::CanvasRenderingContext *this)
{
  return 1;
}

CFTypeRef WebCore::CanvasRenderingContext::colorSpace@<X0>(_QWORD *a1@<X8>)
{
  unint64_t v3;
  CFTypeRef result;
  char v5;
  char **v6;
  char *v7;

  v3 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v3 != -1)
  {
    v7 = &v5;
    v6 = &v7;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v6, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  result = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  *a1 = WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (result)
    return CFRetain(result);
  return result;
}

uint64_t WebCore::CanvasRenderingContext::willReadFrequently(WebCore::CanvasRenderingContext *this)
{
  return 0;
}

uint64_t WebCore::CanvasRenderingContext::taintsOrigin(WebCore::CanvasRenderingContext *this, const WebCore::CachedImage *a2)
{
  unsigned __int16 *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;
  int v7;
  WTF::StringImpl *v8;
  char v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  void *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  WTF::StringImpl *v17[5];

  if (!a2)
    return 0;
  v2 = (unsigned __int16 *)((char *)a2 + 557);
  if ((*(_WORD *)((char *)a2 + 557) >> 5) - 3 <= 1 && (*((_BYTE *)a2 + 720) & 0x10) != 0)
  {
    WebCore::CachedImage::brokenImage(1.0, (uint64_t)v17);
    v14 = (unsigned int *)v17[0];
    if (v17[0])
    {
      v3 = (WTF::StringImpl *)*((_QWORD *)v17[0] + 1);
      v17[0] = 0;
      do
      {
        v15 = __ldaxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
      {
        atomic_store(1u, v14);
        WTF::fastFree((WTF *)v14, v13);
      }
    }
    else
    {
      v3 = 0;
    }
  }
  else
  {
    v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 86);
    if (v3)
      goto LABEL_4;
    {
      v3 = (WTF::StringImpl *)WebCore::Image::nullImage(void)::nullImage;
    }
    else
    {
      WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)v17);
      v3 = v17[0];
      WebCore::Image::nullImage(void)::nullImage = (uint64_t)v17[0];
    }
  }
  if (!v3)
    return 0;
LABEL_4:
  ++*((_DWORD *)v3 + 2);
  v4 = *((_QWORD *)v3 + 4);
  if (v4 && (v5 = *(_DWORD **)(v4 + 8)) != 0)
  {
    v5[2] += 2;
    (*(void (**)(WTF::StringImpl **__return_ptr, _DWORD *))(*(_QWORD *)v5 + 16))(v17, v5);
    v6 = v5[2] - 1;
    if (v5[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
      v6 = v5[2];
    }
    else
    {
      v5[2] = v6;
    }
    v7 = v6 - 1;
    if (v7)
      v5[2] = v7;
    else
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
  }
  else
  {
    v17[0] = 0;
    WTF::URL::invalidate((WTF::URL *)v17);
  }
  v9 = WTF::URL::protocolIs();
  v10 = v17[0];
  v17[0] = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  if ((v9 & 1) != 0)
  {
    v11 = 0;
  }
  else if (((*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v3 + 120))(v3) & 1) != 0)
  {
    v11 = 1;
  }
  else
  {
    v11 = (*v2 >> 1) & 1;
  }
  if (*((_DWORD *)v3 + 2) == 1)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v3 + 8))(v3);
  else
    --*((_DWORD *)v3 + 2);
  return v11;
}

uint64_t WebCore::CanvasRenderingContext2D::CanvasRenderingContext2D(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  int v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E33DC248;
  *(_WORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  if (__ldaxr(WebCore::CanvasRenderingContext::s_instancesLock))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEA534C](WebCore::CanvasRenderingContext::s_instancesLock);
    goto LABEL_4;
  }
  if (__stxr(1u, WebCore::CanvasRenderingContext::s_instancesLock))
    goto LABEL_3;
LABEL_4:
  {
    WebCore::CanvasRenderingContext::instances(void)::instances = 0;
  }
  v12 = a1;
  WTF::HashTable<WebCore::CanvasRenderingContext *,WebCore::CanvasRenderingContext *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>>::add(&WebCore::CanvasRenderingContext::instances(void)::instances, &v12, (uint64_t)&v11);
  v8 = __ldxr(WebCore::CanvasRenderingContext::s_instancesLock);
  if (v8 == 1)
  {
    if (!__stlxr(0, WebCore::CanvasRenderingContext::s_instancesLock))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::CanvasRenderingContext::s_instancesLock);
LABEL_11:
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)a1 = off_1E33DC498;
  *(_QWORD *)(a1 + 40) = &unk_1E33DC5D0;
  *(_QWORD *)(a1 + 120) = a1 + 136;
  *(_QWORD *)(a1 + 128) = 0x100000001;
  WebCore::CanvasRenderingContext2DBase::State::State((WebCore::CanvasRenderingContext2DBase::State *)(a1 + 136));
  *(_DWORD *)(a1 + 712) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_BYTE *)(a1 + 716) = a4;
  *(_DWORD *)(a1 + 792) = 0;
  v9 = *a3;
  *(_DWORD *)(a1 + 808) = *((_DWORD *)a3 + 2);
  *(_QWORD *)(a1 + 800) = v9;
  *(_BYTE *)(a1 + 812) = 0;
  *(_QWORD *)a1 = off_1E33DC338;
  *(_QWORD *)(a1 + 40) = &unk_1E33DC470;
  return a1;
}

uint64_t WebCore::CanvasRenderingContext2DBase::CanvasRenderingContext2DBase(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  int v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1E33DC248;
  *(_WORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  if (__ldaxr(WebCore::CanvasRenderingContext::s_instancesLock))
  {
    __clrex();
LABEL_3:
    MEMORY[0x19AEA534C](WebCore::CanvasRenderingContext::s_instancesLock);
    goto LABEL_4;
  }
  if (__stxr(1u, WebCore::CanvasRenderingContext::s_instancesLock))
    goto LABEL_3;
LABEL_4:
  {
    WebCore::CanvasRenderingContext::instances(void)::instances = 0;
  }
  v12 = a1;
  WTF::HashTable<WebCore::CanvasRenderingContext *,WebCore::CanvasRenderingContext *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>>::add(&WebCore::CanvasRenderingContext::instances(void)::instances, &v12, (uint64_t)&v11);
  v8 = __ldxr(WebCore::CanvasRenderingContext::s_instancesLock);
  if (v8 == 1)
  {
    if (!__stlxr(0, WebCore::CanvasRenderingContext::s_instancesLock))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::CanvasRenderingContext::s_instancesLock);
LABEL_11:
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)a1 = off_1E33DC498;
  *(_QWORD *)(a1 + 40) = &unk_1E33DC5D0;
  *(_QWORD *)(a1 + 120) = a1 + 136;
  *(_QWORD *)(a1 + 128) = 0x100000001;
  WebCore::CanvasRenderingContext2DBase::State::State((WebCore::CanvasRenderingContext2DBase::State *)(a1 + 136));
  *(_DWORD *)(a1 + 712) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_BYTE *)(a1 + 716) = a4;
  *(_DWORD *)(a1 + 792) = 0;
  v9 = *a3;
  *(_DWORD *)(a1 + 808) = *((_DWORD *)a3 + 2);
  *(_QWORD *)(a1 + 800) = v9;
  *(_BYTE *)(a1 + 812) = 0;
  return a1;
}

void WebCore::CanvasRenderingContext2DBase::~CanvasRenderingContext2DBase(WebCore::CanvasRenderingContext2DBase *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;

  *(_QWORD *)this = off_1E33DC498;
  *((_QWORD *)this + 5) = &unk_1E33DC5D0;
  v3 = *((unsigned int *)this + 198);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore28CanvasRenderingContext2DBase25CachedContentsTransparentENS7_21CachedContentsUnknownENS7_23CachedContentsImageDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v3])(&v5, (char *)this + 720);
  *((_DWORD *)this + 198) = -1;
  WTF::Vector<WebCore::CanvasRenderingContext2DBase::State,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 120, a2);
  *((_QWORD *)this + 5) = off_1E32CDB50;
  v4 = *((unsigned int *)this + 28);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_1[v4])(&v6, (char *)this + 56);
  *((_DWORD *)this + 28) = -1;
  WebCore::CanvasRenderingContext::~CanvasRenderingContext((unsigned int **)this);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::CanvasRenderingContext2DBase::~CanvasRenderingContext2DBase(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::CanvasRenderingContext2D::~CanvasRenderingContext2D(WebCore::CanvasRenderingContext2D *this, void *a2)
{
  WebCore::CanvasRenderingContext2DBase::~CanvasRenderingContext2DBase((WebCore::CanvasRenderingContext2D *)((char *)this - 40), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::CanvasRenderingContext2DBase::~CanvasRenderingContext2DBase((WebCore::CanvasRenderingContext2D *)((char *)this - 40), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::CanvasRenderingContext2D::~CanvasRenderingContext2D(WebCore::CanvasRenderingContext2D *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::CanvasRenderingContext2DBase::~CanvasRenderingContext2DBase(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::CanvasRenderingContext2D::setFilterStringWithoutUpdatingStyle(WebCore::CanvasRenderingContext2D *this@<X0>, unsigned int **a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  const WebCore::Document *v10;
  WTF::StringImpl *v11;
  _BYTE v12[8];
  WTF::StringImpl *v13;
  char v14;

  v6 = *((_QWORD *)this + 4);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6) & 1) == 0)
    goto LABEL_17;
  v8 = *(_QWORD *)(*(_QWORD *)(v6 - 72) + 8);
  *(_DWORD *)(v8 + 24) += 2;
  if ((*(_QWORD *)(*(_QWORD *)(v8 + 680) + 664) & 0x400000000000) == 0)
    goto LABEL_11;
  WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v8);
  v9 = *((_QWORD *)this + 4);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9) & 1) == 0)
  {
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x195CD8744);
  }
  v12[0] = 0;
  v14 = 0;
  v10 = (const WebCore::Document *)(*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)(v9 - 112) + 264))(v9 - 112, v12);
  if (v14)
  {
    v11 = v13;
    v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
      {
        WTF::StringImpl::destroy(v11, v7);
        if (v10)
          goto LABEL_9;
        goto LABEL_11;
      }
      *(_DWORD *)v11 -= 2;
    }
  }
  if (v10)
  {
LABEL_9:
    WebCore::CSSPropertyParserWorkerSafe::parseFilterString(a2, (WebCore::Style *)v8, v10, *((unsigned __int8 *)this + 716), a3);
    goto LABEL_12;
  }
LABEL_11:
  *a3 = 0;
  a3[16] = 0;
LABEL_12:
  if (*(_DWORD *)(v8 + 24) == 2)
  {
    if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v8, v7);
  }
  else
  {
    *(_DWORD *)(v8 + 24) -= 2;
  }
}

void WebCore::CanvasRenderingContext2D::createFilter(WebCore::CanvasRenderingContext2D *this@<X0>, const WebCore::FloatRect *a2@<X1>, float **a3@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  const WebCore::SVGFilter *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  float *v28;
  uint64_t v29;
  int v30;
  int v31;
  float v32;
  float v33;
  float v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  WTF *v41;
  void *v42;
  char v43;
  float **v44;
  float *v45;

  if (*((float *)a2 + 2) <= 0.0)
    goto LABEL_34;
  if (*((float *)a2 + 3) <= 0.0)
    goto LABEL_34;
  v6 = (*(uint64_t (**)(WebCore::CanvasRenderingContext2D *))(*(_QWORD *)this + 224))(this);
  if (!v6)
    goto LABEL_34;
  v7 = *((_DWORD *)this + 33);
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x195CD8ACCLL);
  }
  v8 = *(_QWORD *)(*((_QWORD *)this + 15) + 560 * v7 - 8);
  if (v8)
  {
    v9 = *(_DWORD *)v8 + 1;
    *(_DWORD *)v8 = v9;
    if (*(_QWORD *)(v8 + 16))
    {
      v10 = (const WebCore::SVGFilter *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 40) + 16))(*(_QWORD *)(v8 + 40));
      v9 = *(_DWORD *)v8;
    }
    else
    {
      v10 = 0;
    }
    v11 = v9 - 1;
    if (v11)
    {
      *(_DWORD *)v8 = v11;
      if (!v10)
        goto LABEL_34;
    }
    else
    {
      v36 = *(_QWORD *)(v8 + 40);
      v37 = *(_QWORD *)(v8 + 16);
      v38 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
      if (v38 != -1)
      {
        v45 = (float *)&v43;
        v44 = &v45;
        std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v44, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v36 + 56))(v36, v37, &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
      v40 = *(_QWORD *)(v8 + 40);
      *(_QWORD *)(v8 + 40) = 0;
      if (v40)
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
      WTF::fastFree((WTF *)v8, v39);
      if (!v10)
        goto LABEL_34;
    }
  }
  else
  {
    v10 = (const WebCore::SVGFilter *)v6;
  }
  v12 = *((_QWORD *)this + 4);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12) & 1) == 0)
    goto LABEL_43;
  v13 = *(_QWORD *)(v12 - 48) & 0xFFFFFFFFFFFFLL;
  if (!v13)
  {
LABEL_34:
    *a3 = 0;
    return;
  }
  if ((*(_BYTE *)(v13 + 45) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195CD8A7CLL);
  }
  ++*(_DWORD *)(v13 + 16);
  v14 = *((_QWORD *)this + 4);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195CD8A9CLL);
  }
  v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 - 72) + 8) + 528);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 24);
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 8);
        if (v18)
        {
          ++*(_DWORD *)v18;
          v19 = *(unsigned int *)(*(_QWORD *)(v18 + 112) + 720) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v18 + 112) + 724) << 32);
          if ((v19 & 0x2000000000) != 0)
            v20 = 3;
          else
            v20 = 1;
          v21 = *((_DWORD *)this + 33);
          if (v21)
          {
            v22 = *((_QWORD *)this + 15) + 560 * v21 - 336;
            __asm { FMOV            V0.2S, #1.0 }
            v44 = _D0;
            WebCore::CSSFilter::create(v13, v22, v20 | (v19 >> 36) & 4, &v44, (float *)a2, v10, (uint64_t *)&v45);
            v28 = v45;
            if (v45)
            {
              v29 = WebCore::CanvasRenderingContext2D::calculateFilterOutsets(this, a2);
              v32 = *((float *)a2 + 1) - (float)(int)v29;
              v33 = *((float *)a2 + 2) + (float)((float)v31 + (float)SHIDWORD(v29));
              v34 = (float)((float)(int)v29 + (float)v30) + *((float *)a2 + 3);
              v28[15] = *(float *)a2 - (float)v31;
              v28[16] = v32;
              v28[17] = v33;
              v28[18] = v34;
              WebCore::Filter::clampFilterRegionIfNeeded((WebCore::Filter *)v28);
            }
            *a3 = v28;
            if (*(_DWORD *)v18 == 1)
            {
              WebCore::Page::~Page(v18);
              WTF::fastFree(v41, v42);
            }
            else
            {
              --*(_DWORD *)v18;
            }
            goto LABEL_27;
          }
LABEL_43:
          __break(0xC471u);
          JUMPOUT(0x195CD8A5CLL);
        }
      }
    }
  }
  *a3 = 0;
LABEL_27:
  v35 = *(_DWORD *)(v13 + 16);
  if (!v35)
  {
    __break(0xC471u);
    JUMPOUT(0x195CD8ABCLL);
  }
  *(_DWORD *)(v13 + 16) = v35 - 1;
}

uint64_t WebCore::CanvasRenderingContext2DBase::effectiveDrawingContext(WebCore::CanvasRenderingContext2DBase *this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  char v12;
  char **v13;
  char *v14;

  result = (*(uint64_t (**)(WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)this + 224))(this);
  v3 = result;
  if (!result)
    return v3;
  v4 = *((_DWORD *)this + 33);
  if (v4)
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 15) + 560 * v4 - 8);
    if (!v5)
      return v3;
    v6 = (*(_DWORD *)v5)++;
    if (*(_QWORD *)(v5 + 16))
    {
      v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 40) + 16))(*(_QWORD *)(v5 + 40));
      v6 = *(_DWORD *)v5 - 1;
      if (*(_DWORD *)v5 != 1)
      {
LABEL_6:
        *(_DWORD *)v5 = v6;
        return v3;
      }
    }
    else
    {
      v3 = 0;
      if (v6)
        goto LABEL_6;
    }
    v7 = *(_QWORD *)(v5 + 40);
    v8 = *(_QWORD *)(v5 + 16);
    v9 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v9 != -1)
    {
      v14 = &v12;
      v13 = &v14;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v13, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v7 + 56))(v7, v8, &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
    v11 = *(_QWORD *)(v5 + 40);
    *(_QWORD *)(v5 + 40) = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    WTF::fastFree((WTF *)v5, v10);
    return v3;
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::CanvasRenderingContext2D::calculateFilterOutsets(WebCore::CanvasRenderingContext2D *this, const WebCore::FloatRect *a2)
{
  unsigned int v2;
  uint64_t v5;
  const WebCore::FloatRect *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  int v10;

  v2 = *((_DWORD *)this + 33);
  if (!v2)
  {
    __break(0xC471u);
    JUMPOUT(0x195CD8D3CLL);
  }
  if (!*(_DWORD *)(*((_QWORD *)this + 15) + 560 * v2 - 324))
    return 0;
  v5 = *((_QWORD *)this + 4);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5) & 1) == 0)
    goto LABEL_14;
  v7 = *(_QWORD *)(v5 - 48) & 0xFFFFFFFFFFFFLL;
  if (!v7)
    return 0;
  if ((*(_BYTE *)(v7 + 45) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195CD8D14);
  }
  ++*(_DWORD *)(v7 + 16);
  v8 = *((_DWORD *)this + 33);
  if (!v8)
  {
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x195CD8CF4);
  }
  result = WebCore::CSSFilter::calculateOutsets((WebCore::CSSFilter *)v7, (unsigned int ***)(*((_QWORD *)this + 15) + 560 * v8 - 336), a2, v6);
  v10 = *(_DWORD *)(v7 + 16);
  if (!v10)
  {
    __break(0xC471u);
    JUMPOUT(0x195CD8D34);
  }
  *(_DWORD *)(v7 + 16) = v10 - 1;
  return result;
}

uint64_t WebCore::CanvasRenderingContext2D::drawFocusIfNeededInternal(WebCore::CanvasRenderingContext2D *this, const WebCore::Path *a2, WebCore::Element *a3)
{
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::Element *v21;
  __int16 v22;
  WebCore::Element *v23;
  int v24;
  WebCore::Document *v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  const WebCore::RenderStyle *v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  int32x2_t *v36;
  uint64_t v37;
  void *v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int v53;
  char v54;
  float32x4_t *v55;
  float32x4_t v56;
  char v57;

  result = (*(uint64_t (**)(WebCore::CanvasRenderingContext2D *))(*(_QWORD *)this + 224))(this);
  v7 = result;
  if (result)
  {
    v8 = *((_DWORD *)this + 33);
    if (!v8)
    {
      __break(0xC471u);
      JUMPOUT(0x195CD9188);
    }
    v9 = *(_QWORD *)(*((_QWORD *)this + 15) + 560 * v8 - 8);
    if (v9)
    {
      v10 = *(_DWORD *)v9 + 1;
      *(_DWORD *)v9 = v10;
      if (*(_QWORD *)(v9 + 16))
      {
        result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 40) + 16))(*(_QWORD *)(v9 + 40));
        v7 = result;
        v10 = *(_DWORD *)v9;
      }
      else
      {
        v7 = 0;
      }
      v11 = v10 - 1;
      if (v11)
      {
        *(_DWORD *)v9 = v11;
      }
      else
      {
        v12 = *(_QWORD *)(v9 + 40);
        v13 = *(_QWORD *)(v9 + 16);
        v14 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
        if (v14 != -1)
        {
          v56.i64[0] = (uint64_t)&v54;
          v55 = &v56;
          std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v55, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v12 + 56))(v12, v13, &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
        v16 = *(_QWORD *)(v9 + 40);
        *(_QWORD *)(v9 + 40) = 0;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        result = WTF::fastFree((WTF *)v9, v15);
      }
    }
  }
  if ((*((_BYTE *)a3 + 54) & 2) != 0)
  {
    result = WebCore::Element::isUserActionElementFocused(a3);
    if ((_DWORD)result)
    {
      v17 = *((_DWORD *)this + 33);
      if (!v17)
      {
        __break(0xC471u);
        JUMPOUT(0x195CD91B8);
      }
      if (*(_BYTE *)(*((_QWORD *)this + 15) + 560 * v17 - 400))
      {
        v18 = *((_DWORD *)a2 + 16);
        if (v18 == 2)
        {
          v19 = *((_QWORD *)a2 + 1);
          if (v19)
          {
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 200))(v19);
            if ((result & 1) != 0)
              return result;
          }
        }
        else if (!v18)
        {
          return result;
        }
        v20 = *((_QWORD *)this + 4);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 32))(v20);
        if ((result & 1) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x195CD90BCLL);
        }
        v21 = (WebCore::Element *)(v20 - 112);
        v22 = *(_WORD *)(v20 - 84);
        if ((v22 & 0xF000) == 0x9000)
        {
          if (**((WebCore::Element ***)a3 + 5) != v21 || (*((_WORD *)a3 + 14) & 0xF000) == 0x9000)
            return result;
          v24 = (*((unsigned __int8 *)a3 + 22) >> 3) & 1;
        }
        else
        {
          if ((v22 & 4) == 0
            || !*(_QWORD *)(v20 - 32)
            || ((*((unsigned __int8 *)a3 + 22) ^ *(unsigned __int8 *)(v20 - 90)) & 8) != 0)
          {
            return result;
          }
          v23 = a3;
          do
          {
            v23 = (WebCore::Element *)*((_QWORD *)v23 + 4);
            v24 = v23 != 0;
          }
          while (v23 != v21 && v23 != 0);
        }
        if (v24 && v7 != 0)
        {
          {
            v47 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
            *(_OWORD *)(v47 + 40) = 0u;
            *(_OWORD *)(v47 + 24) = 0u;
            *(_QWORD *)v47 = &off_1E335BC30;
          }
          v27 = *(WebCore::Document **)(*((_QWORD *)a3 + 5) + 8);
          v28 = *((_QWORD *)this + 4);
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x195CD90DCLL);
          }
          v56.i8[0] = 0;
          v57 = 0;
          v30 = (const WebCore::RenderStyle *)(*(uint64_t (**)(uint64_t, float32x4_t *))(*(_QWORD *)(v28 - 112)
                                                                                                + 264))(v28 - 112, &v56);
          if (v57)
          {
            v31 = (WTF::StringImpl *)v56.i64[1];
            v56.i64[1] = 0;
            if (v31)
            {
              if (*(_DWORD *)v31 == 2)
                WTF::StringImpl::destroy(v31, v29);
              else
                *(_DWORD *)v31 -= 2;
            }
          }
          v32 = WebCore::Document::styleColorOptions(v27, v30);
          v33 = (*(uint64_t (**)(uint64_t *, uint64_t))(WebCore::RenderTheme::singleton(void)::theme + 1072))(&WebCore::RenderTheme::singleton(void)::theme, v32);
          v34 = *(_QWORD *)(v33 + 32);
          if ((v34 & 0x4000000000000) != 0)
            goto LABEL_47;
          v37 = v33;
          (*(void (**)(float32x4_t *__return_ptr, uint64_t *, uint64_t))(WebCore::RenderTheme::singleton(void)::theme
                                                                                + 240))(&v56, &WebCore::RenderTheme::singleton(void)::theme, v32);
          v39 = *(_QWORD *)(v37 + 32);
          v40 = v56.i64[0];
          if ((v39 & 0x8000000000000) != 0)
          {
            if ((v56.i64[0] & 0x8000000000000) == 0
              || *(float *)((v39 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v56.i64[0] & 0xFFFFFFFFFFFFLL) + 4)
              || *(float *)((v39 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v56.i64[0] & 0xFFFFFFFFFFFFLL) + 8)
              || *(float *)((v39 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v56.i64[0] & 0xFFFFFFFFFFFFLL) + 0xC)
              || *(float *)((v39 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v56.i64[0] & 0xFFFFFFFFFFFFLL) + 0x10)
              || HIBYTE(v39) != HIBYTE(v56.i64[0])
              || BYTE6(v39) != v56.u8[6])
            {
              v51 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFLL);
              do
              {
                v52 = __ldaxr(v51);
                v53 = v52 - 1;
              }
              while (__stlxr(v53, v51));
              if (!v53)
              {
                atomic_store(1u, v51);
                WTF::fastFree((WTF *)v51, v38);
              }
              goto LABEL_56;
            }
          }
          else
          {
            if (v39 != v56.i64[0] || (v56.i64[0] & 0x8000000000000) != 0)
            {
LABEL_56:
              *(_QWORD *)(v37 + 32) = v56.i64[0];
LABEL_57:
              v34 = *(_QWORD *)(v37 + 32);
LABEL_47:
              v56.i64[0] = v34;
              if ((v34 & 0x8000000000000) != 0)
              {
                v45 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFLL);
                do
                  v46 = __ldaxr(v45);
                while (__stlxr(v46 + 1, v45));
              }
              (*(void (**)(uint64_t, const WebCore::Path *, float32x4_t *, float))(*(_QWORD *)v7 + 616))(v7, a2, &v56, 1.0);
              if ((v56.i64[0] & 0x8000000000000) != 0)
              {
                v48 = (unsigned int *)(v56.i64[0] & 0xFFFFFFFFFFFFLL);
                do
                {
                  v49 = __ldaxr(v48);
                  v50 = v49 - 1;
                }
                while (__stlxr(v50, v48));
                if (!v50)
                {
                  atomic_store(1u, v48);
                  WTF::fastFree((WTF *)v48, v35);
                }
              }
              v36 = (int32x2_t *)*((_QWORD *)this + 4);
              v56.i64[0] = 0;
              *(float32x2_t *)&v56.u32[2] = vcvt_f32_s32(v36[1]);
              v57 = 1;
              return WebCore::CanvasRenderingContext2DBase::didDraw((uint64_t)this, &v56, 0xFu);
            }
            v40 = *(_QWORD *)(v37 + 32);
          }
          if ((v40 & 0x8000000000000) != 0)
          {
            v42 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFLL);
            do
            {
              v43 = __ldaxr(v42);
              v44 = v43 - 1;
            }
            while (__stlxr(v44, v42));
            if (!v44)
            {
              atomic_store(1u, v42);
              WTF::fastFree((WTF *)v42, v38);
            }
          }
          goto LABEL_57;
        }
      }
    }
  }
  return result;
}

void WebCore::CanvasRenderingContext2D::setFontWithoutUpdatingStyle(WebCore::CanvasRenderingContext2D *this, WTF **a2, const WTF::StringImpl *a3)
{
  WTF::StringImpl **v3;
  WTF *v5;
  unsigned int v6;
  unsigned int *v7;
  void *v8;
  unsigned int v9;
  WebCore::FontCascadeFonts *v10;
  int v11;
  uint64_t v12;
  WebCore::CSSParserTokenRange *v13;
  __int128 *v14;
  unint64_t v15;
  char v16;
  unsigned int v17;
  __int128 *v18;
  unsigned int v19;
  WTF::StringImpl *v20;
  _DWORD *v21;
  WTF *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  WTF *v28;
  WTF::StringImpl *v29;
  WTF *v30;
  unsigned int *v31;
  WebCore::Document *v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  WTF::StringImpl *v36;
  WebCore::FontSelector *v37;
  unsigned int *v38;
  void *v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  void *v44;
  uint64_t v45;
  WTF::StringImpl **v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  uint64_t v49;
  WTF::StringImpl **v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  unsigned int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  uint64_t v58;
  uint64_t v59;
  WTF::StringImpl **v60;
  _OWORD v61[6];
  uint64_t v62;
  char v63;
  _DWORD *v64;
  __int16 v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int16 v70;
  int v71;
  unsigned int v72;
  __int16 v73;
  char v74;
  WTF *v75;
  int v76;
  __int16 v77;
  uint64_t v78;
  WTF::StringImpl *v79;
  char v80;
  __int128 *v81;
  unsigned int v82;
  WTF *v83;
  int v84;
  __int16 v85;
  char v86;
  unsigned __int16 v87[84];
  WTF *v88;
  int v89;
  unsigned int v90;
  char v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  ++WebCore::ScriptDisallowedScope::s_count;
  v5 = *a2;
  if (!*a2 || !*((_DWORD *)v5 + 1))
    goto LABEL_2;
  v6 = *((_DWORD *)this + 33);
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x195CD995CLL);
  }
  v7 = (unsigned int *)a2;
  if (WTF::equal(v5, *(const WTF::StringImpl **)(*((_QWORD *)this + 15) + 560 * v6 - 320), a3))
  {
    v9 = *((_DWORD *)this + 33);
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x195CD9964);
    }
    v10 = *(WebCore::FontCascadeFonts **)(*((_QWORD *)this + 15) + 560 * v9 - 88);
    if (v10)
    {
      v11 = (*(_DWORD *)v10)++;
      v12 = *((_QWORD *)v10 + 14);
      if (v11)
      {
        *(_DWORD *)v10 = v11;
      }
      else
      {
        WebCore::FontCascadeFonts::~FontCascadeFonts(v10, v8);
        WTF::fastFree(v43, v44);
      }
      if (v12)
        goto LABEL_2;
    }
  }
  v13 = (WebCore::CSSParserTokenRange *)*((unsigned __int8 *)this + 716);
  WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)&v78, (unsigned int **)v7, 0, 0);
  v14 = v81;
  v15 = (unint64_t)v81 + 24 * v82;
  *(_QWORD *)&v61[0] = v81;
  *((_QWORD *)&v61[0] + 1) = v15;
  v17 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  while (1)
  {
    if ((unint64_t)v14 < v15 || (v16 & 1) != 0)
    {
      v18 = (unint64_t)v14 >= v15 ? &WebCore::CSSParserTokenRange::eofToken(void)::eofToken : v14;
      v19 = *(_DWORD *)v18;
    }
    else
    {
      v19 = v17 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v19;
      v16 = 1;
      v17 = v19;
    }
    if ((v19 & 0x3F) != 0x10)
      break;
    v14 = (__int128 *)((char *)v14 + 24);
    *(_QWORD *)&v61[0] = v14;
  }
  WebCore::CSSPropertyParserHelpers::consumeFontRaw((unint64_t)v61, v13, (uint64_t)v87);
  WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)&v78, v20);
  if (!v91)
    goto LABEL_2;
  v62 = 256;
  memset(v61, 0, sizeof(v61));
  v63 = 0;
  v21 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v21 += 2;
  v64 = v21;
  v65 = 0;
  v66 = 2143289344;
  v67 = 0;
  v68 = 0;
  v69 = 26216000;
  v70 = 257;
  v71 = 0;
  v72 = v72 & 0x80000000 | 0xE000;
  v73 = 0;
  v74 &= 0xFCu;
  v22 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v22 = 0x100000001;
  *((_QWORD *)v22 + 1) = 0;
  v75 = v22;
  v76 = 0;
  v77 &= 0xFC00u;
  v23 = *((_QWORD *)this + 4);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 32))(v23) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195CD98B0);
  }
  LOBYTE(v78) = 0;
  v80 = 0;
  v25 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)(v23 - 112) + 264))(v23 - 112, &v78);
  if (v80)
  {
    v26 = v79;
    v79 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v24);
      else
        *(_DWORD *)v26 -= 2;
    }
  }
  if (!v25)
  {
    if ((_MergedGlobals_196 & 1) == 0)
    {
      WTF::AtomStringImpl::add();
      qword_1ECE836B8 = v78;
      _MergedGlobals_196 = 1;
    }
    WebCore::FontCascadeDescription::setOneFamily((uint64_t)v75, v24);
    v76 = 1092616192;
    v71 = 1092616192;
    goto LABEL_33;
  }
  v3 = (WTF::StringImpl **)&v76;
  v27 = *(_QWORD *)(v25 + 32);
  WebCore::FontDescription::FontDescription((WebCore::FontDescription *)&v78, (const WebCore::FontDescription *)(v27 + 48));
  v28 = *(WTF **)(v27 + 216);
  ++*(_DWORD *)v28;
  v83 = v28;
  v84 = *(_DWORD *)(v27 + 224);
  v85 = *(_WORD *)(v27 + 228);
  WebCore::FontDescription::operator=((uint64_t)v61, &v78);
  v30 = v83;
  v83 = 0;
  v31 = (unsigned int *)v75;
  v75 = v30;
  if (v31)
  {
    if (*v31 == 1)
    {
      v49 = v31[1];
      if ((_DWORD)v49)
      {
        v50 = (WTF::StringImpl **)(v31 + 2);
        v51 = 8 * v49;
        do
        {
          v52 = *v50;
          *v50 = 0;
          if (v52)
          {
            if (*(_DWORD *)v52 == 2)
            {
              v59 = v51;
              v60 = v50;
              WTF::StringImpl::destroy(v52, v29);
              v51 = v59;
              v50 = v60;
            }
            else
            {
              *(_DWORD *)v52 -= 2;
            }
          }
          ++v50;
          v51 -= 8;
        }
        while (v51);
      }
      WTF::fastFree((WTF *)v31, v29);
      v53 = (unsigned int *)v83;
      v76 = v84;
      v77 = v85;
      v83 = 0;
      if (v53)
      {
        if (*v53 == 1)
        {
          v55 = v53[1];
          if ((_DWORD)v55)
          {
            v3 = (WTF::StringImpl **)(v53 + 2);
            v56 = 8 * v55;
            do
            {
              v57 = *v3;
              *v3 = 0;
              if (v57)
              {
                if (*(_DWORD *)v57 == 2)
                  WTF::StringImpl::destroy(v57, v29);
                else
                  *(_DWORD *)v57 -= 2;
              }
              ++v3;
              v56 -= 8;
            }
            while (v56);
          }
          WTF::fastFree((WTF *)v53, v29);
        }
        else
        {
          --*v53;
        }
      }
      goto LABEL_32;
    }
    --*v31;
  }
  v76 = v84;
  v77 = v85;
LABEL_32:
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)&v78, v29);
LABEL_33:
  v32 = (WebCore::Document *)*((_QWORD *)this + 4);
  if (((*(uint64_t (**)(WebCore::Document *))(*(_QWORD *)v32 + 32))(v32) & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_104;
  }
  if (!v91)
    goto LABEL_104;
  v32 = *(WebCore::Document **)(*((_QWORD *)v32 - 9) + 8);
  WebCore::Style::resolveForFontRaw(v87, (uint64_t)v61, (int *)v32 + 48, (WebCore::FontCascade *)&v78);
  if (v86)
  {
    v7 = *(unsigned int **)v7;
    if (v7)
      *v7 += 2;
    if (*((_DWORD *)this + 178))
    {
      WebCore::CanvasRenderingContext2DBase::realizeSavesLoop(this);
      if (*((_DWORD *)this + 178))
      {
        {
          WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl += 2;
          WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage = (uint64_t)&WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl;
        }
        v58 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 144))(*((_QWORD *)this + 4));
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v58 + 248))(v58, 6, 2, &WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage, 0);
      }
    }
    v34 = *((unsigned int *)this + 33);
    if (!(_DWORD)v34)
    {
      __break(0xC471u);
      JUMPOUT(0x195CD999CLL);
    }
    v3 = (WTF::StringImpl **)(v34 - 1);
    v35 = (WTF::StringImpl **)(*((_QWORD *)this + 15) + 560 * (v34 - 1) + 240);
    if (v7)
      *v7 += 2;
    v36 = *v35;
    *v35 = (WTF::StringImpl *)v7;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
      {
        WTF::StringImpl::destroy(v36, v33);
        v54 = *((unsigned int *)this + 33);
        if (!(_DWORD)v54)
        {
          __break(0xC471u);
          JUMPOUT(0x195CD99A4);
        }
        v3 = (WTF::StringImpl **)(v54 - 1);
      }
      else
      {
        *(_DWORD *)v36 -= 2;
      }
    }
    this = (WebCore::CanvasRenderingContext2D *)*((_QWORD *)this + 15);
    v37 = (WebCore::FontSelector *)*((_QWORD *)v32 + 331);
    if (!v37)
      goto LABEL_105;
    while (!v86)
    {
LABEL_104:
      __break(1u);
LABEL_105:
      v37 = (WebCore::FontSelector *)WebCore::Document::ensureFontSelector(v32);
    }
    WebCore::CanvasRenderingContext2DBase::FontProxy::initialize((WebCore::CanvasRenderingContext2D *)((char *)this + 560 * (_QWORD)v3 + 248), v37, (const WebCore::FontCascade *)&v78);
    if (v7)
    {
      if (*v7 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v7, v33);
      else
        *v7 -= 2;
    }
    if (v86)
      WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)&v78, v33);
  }
  v38 = (unsigned int *)v75;
  v75 = 0;
  if (v38)
  {
    if (*v38 == 1)
    {
      v45 = v38[1];
      if ((_DWORD)v45)
      {
        v46 = (WTF::StringImpl **)(v38 + 2);
        v47 = 8 * v45;
        do
        {
          v48 = *v46;
          *v46 = 0;
          if (v48)
          {
            if (*(_DWORD *)v48 == 2)
              WTF::StringImpl::destroy(v48, v33);
            else
              *(_DWORD *)v48 -= 2;
          }
          ++v46;
          v47 -= 8;
        }
        while (v47);
      }
      WTF::fastFree((WTF *)v38, v33);
    }
    else
    {
      --*v38;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v61, v33);
  if (v91)
  {
    v40 = (unsigned int *)v88;
    if (v90)
    {
      v41 = 16 * v90;
      do
      {
        v42 = v40[2];
        if ((_DWORD)v42 != -1)
          ((void (*)(uint64_t *, unsigned int *))off_1E33DC6A0[v42])(&v78, v40);
        v40[2] = -1;
        v40 += 4;
        v41 -= 16;
      }
      while (v41);
      v40 = (unsigned int *)v88;
    }
    if (v40)
    {
      v88 = 0;
      v89 = 0;
      WTF::fastFree((WTF *)v40, v39);
    }
  }
LABEL_2:
  --WebCore::ScriptDisallowedScope::s_count;
}

BOOL WebCore::CanvasRenderingContext2DBase::FontProxy::realized(WebCore::CanvasRenderingContext2DBase::FontProxy *this, void *a2)
{
  int v2;
  uint64_t v3;
  WTF *v5;
  void *v6;

  if (this)
  {
    v2 = (*(_DWORD *)this)++;
    v3 = *((_QWORD *)this + 14);
    if (v2)
    {
      *(_DWORD *)this = v2;
    }
    else
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(this, a2);
      WTF::fastFree(v5, v6);
    }
  }
  else
  {
    v3 = 0;
  }
  return v3 != 0;
}

uint64_t WebCore::FontCascadeDescription::setOneFamily(uint64_t this, const WTF::AtomString *a2)
{
  uint64_t v2;
  WTF::StringImpl *v3;

  if (*(_DWORD *)(this + 4))
  {
    v2 = qword_1ECE836B8;
    if (qword_1ECE836B8)
      *(_DWORD *)qword_1ECE836B8 += 2;
    v3 = *(WTF::StringImpl **)(this + 8);
    *(_QWORD *)(this + 8) = v2;
    if (v3)
    {
      if (*(_DWORD *)v3 == 2)
        return WTF::StringImpl::destroy(v3, a2);
      else
        *(_DWORD *)v3 -= 2;
    }
  }
  else
  {
    this = 146;
    __break(0xC471u);
  }
  return this;
}

WebCore::CanvasRenderingContext2DBase::State *WebCore::CanvasRenderingContext2DBase::realizeSaves(WebCore::CanvasRenderingContext2DBase::State *this)
{
  WebCore::CanvasRenderingContext2DBase::State *v1;
  uint64_t v2;

  if (*((_DWORD *)this + 178))
  {
    v1 = this;
    this = WebCore::CanvasRenderingContext2DBase::realizeSavesLoop(this);
    if (*((_DWORD *)v1 + 178))
    {
      {
        WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl += 2;
        WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage = (uint64_t)&WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl;
      }
      v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v1 + 4) + 144))(*((_QWORD *)v1 + 4));
      return (WebCore::CanvasRenderingContext2DBase::State *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v2 + 248))(v2, 6, 2, &WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage, 0);
    }
  }
  return this;
}

uint64_t WebCore::CanvasRenderingContext2DBase::FontProxy::initialize(WebCore::CanvasRenderingContext2DBase::FontProxy *this, WebCore::FontSelector *a2, const WebCore::FontCascade *a3)
{
  WebCore::FontCascadeFonts *v6;
  int v7;
  uint64_t v8;
  WebCore *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  WebCore *v14;
  WebCore::FontCascadeFonts *v15;
  int v16;
  uint64_t v17;
  WebCore::FontCascadeFonts *v19;
  int v20;
  uint64_t v21;
  WTF *v22;
  void *v23;
  WTF *v24;
  void *v25;
  WTF *v26;
  void *v27;
  WebCore *v28;

  v6 = (WebCore::FontCascadeFonts *)*((_QWORD *)this + 28);
  if (v6)
  {
    v7 = (*(_DWORD *)v6)++;
    v8 = *((_QWORD *)v6 + 14);
    if (v7)
    {
      *(_DWORD *)v6 = v7;
    }
    else
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v6, a2);
      WTF::fastFree(v22, v23);
    }
    if (v8)
    {
      v19 = (WebCore::FontCascadeFonts *)*((_QWORD *)this + 28);
      v20 = (*(_DWORD *)v19)++;
      v21 = *((_QWORD *)v19 + 14);
      if (v20)
      {
        *(_DWORD *)v19 = v20;
      }
      else
      {
        WebCore::FontCascadeFonts::~FontCascadeFonts(v19, a2);
        WTF::fastFree(v26, v27);
      }
      (*(void (**)(uint64_t, WebCore::CanvasRenderingContext2DBase::FontProxy *))(*(_QWORD *)v21 + 64))(v21, this);
    }
  }
  v9 = (WebCore *)WebCore::FontCascade::operator=((uint64_t)this + 8, (uint64_t)a3);
  ++*((_DWORD *)a2 + 2);
  v28 = a2;
  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v10 || (v11 = *(_QWORD *)(v10 + 96)) == 0)
    v11 = WebCore::threadGlobalDataSlow(v9);
  v12 = *(_QWORD *)(v11 + 80);
  if (!v12)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v11);
    v12 = *(_QWORD *)(v11 + 80);
  }
  WebCore::FontCache::updateFontCascade(v12, (uint64_t)this + 8, &v28);
  v14 = v28;
  v28 = 0;
  if (v14)
  {
    if (*((_DWORD *)v14 + 2) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v14 + 8))(v14);
    else
      --*((_DWORD *)v14 + 2);
  }
  v15 = (WebCore::FontCascadeFonts *)*((_QWORD *)this + 28);
  v16 = (*(_DWORD *)v15)++;
  v17 = *((_QWORD *)v15 + 14);
  if (v16)
  {
    *(_DWORD *)v15 = v16;
  }
  else
  {
    WebCore::FontCascadeFonts::~FontCascadeFonts(v15, v13);
    WTF::fastFree(v24, v25);
  }
  return (*(uint64_t (**)(uint64_t, WebCore::CanvasRenderingContext2DBase::FontProxy *))(*(_QWORD *)v17 + 56))(v17, this);
}

BOOL WebCore::CanvasRenderingContext2D::direction(WebCore::CanvasRenderingContext2D *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = *((unsigned int *)this + 33);
  if (!(_DWORD)v1)
  {
    __break(0xC471u);
    JUMPOUT(0x195CD9DFCLL);
  }
  v3 = v1 - 1;
  v4 = *((_QWORD *)this + 15);
  if (*(_DWORD *)(v4 + 560 * v3 + 208) == 2)
  {
    v5 = *((_QWORD *)this + 4);
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5) & 1) == 0
      || (WebCore::Document::updateStyleIfNeeded(*(WebCore::Document **)(*(_QWORD *)(v5 - 72) + 8)),
          v6 = *((unsigned int *)this + 33),
          !(_DWORD)v6))
    {
      __break(0xC471u);
      JUMPOUT(0x195CD9DD4);
    }
    v4 = *((_QWORD *)this + 15);
    v3 = v6 - 1;
  }
  v7 = *(_DWORD *)(v4 + 560 * v3 + 208);
  if (v7 != 2)
  {
    if (v7)
      return v7 == 1;
    return 0;
  }
  v8 = *((_QWORD *)this + 4);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195CD9DF4);
  }
  if ((*(_QWORD *)(v8 - 40) & 0xFFFFFFFFFFFFLL) != 0)
  {
    v10 = *(_QWORD *)((*(_QWORD *)(v8 - 40) & 0xFFFFFFFFFFFFLL) + 0x30);
    if (v10)
      return (*(_DWORD *)(v10 + 40) >> 26) & 1;
    v10 = *(_QWORD *)((*(_QWORD *)(v8 - 40) & 0xFFFFFFFFFFFFLL) + 0x38);
    if (v10)
    {
      v12 = *(_QWORD *)(v10 + 16) & 0x1FLL;
      if (v12 == 26 || v12 == 18)
        return (*(_DWORD *)(v10 + 40) >> 26) & 1;
    }
  }
  v9 = *(_QWORD *)(v8 - 48) & 0xFFFFFFFFFFFFLL;
  if (!v9)
    return 0;
  if ((*(_BYTE *)((*(_QWORD *)(v8 - 48) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    v9 = *(_QWORD *)((*(_QWORD *)(v8 - 48) & 0xFFFFFFFFFFFFLL) + 0x20);
    if (v9)
      v9 = *(_QWORD *)(v9 + 8);
  }
  v10 = v9 + 80;
  return (*(_DWORD *)(v10 + 40) >> 26) & 1;
}

unsigned int *WebCore::CanvasRenderingContext2D::drawTextInternal(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, char a5, double a6, double a7)
{
  uint64_t v14;
  uint64_t v15;
  WebCore::ResourceLoadObserver *updated;
  unsigned int *result;
  WTF::StringImpl *v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  WTF::StringImpl *v26;
  char v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t *v31;
  int v32;
  WTF::StringImpl *v33;
  int v34;
  char v35;
  uint64_t v36;
  int v37;
  char v38;
  char v39;
  WTF::StringImpl *v40;

  v14 = *(_QWORD *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14) & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_53;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v14 - 72) + 8);
  *(_DWORD *)(v15 + 24) += 2;
  updated = (WebCore::ResourceLoadObserver *)WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v15);
  ++WebCore::ScriptDisallowedScope::s_count;
  if ((*(_QWORD *)(*(_QWORD *)(v15 + 680) + 704) & 0x4000) != 0)
  {
    v31 = WebCore::ResourceLoadObserver::shared(updated);
    (*(void (**)(uint64_t *, uint64_t, uint64_t *))(*v31 + 56))(v31, v15, a2);
  }
  result = (unsigned int *)WebCore::CanvasRenderingContext2DBase::canDrawText(a1, a3, a4, a5, a6, a7);
  if ((_DWORD)result)
  {
    WebCore::CanvasRenderingContext2DBase::normalizeSpaces(a2, &v40);
    v19 = *(_DWORD *)(a1 + 132);
    if (v19)
    {
      v20 = *(_DWORD *)(*(_QWORD *)(a1 + 120) + 560 * v19 - 352);
      v21 = *(_QWORD *)(a1 + 32);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195CDA0CCLL);
      }
      if ((*(_QWORD *)(v21 - 40) & 0xFFFFFFFFFFFFLL) == 0
        || (v22 = *(_QWORD *)((*(_QWORD *)(v21 - 40) & 0xFFFFFFFFFFFFLL) + 0x30)) == 0
        && ((v22 = *(_QWORD *)((*(_QWORD *)(v21 - 40) & 0xFFFFFFFFFFFFLL) + 0x38)) == 0
         || ((v29 = *(_QWORD *)(v22 + 16) & 0x1FLL, v29 != 26) ? (v30 = v29 == 18) : (v30 = 1), !v30)))
      {
        v22 = *(_QWORD *)(v21 - 48) & 0xFFFFFFFFFFFFLL;
        if (v22)
        {
          if ((*(_BYTE *)((*(_QWORD *)(v21 - 48) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            v22 = *(_QWORD *)((*(_QWORD *)(v21 - 48) & 0xFFFFFFFFFFFFLL) + 0x20);
            if (v22)
              v22 = *(_QWORD *)(v22 + 8);
          }
          v22 += 80;
        }
      }
      if (v20 == 2)
      {
        if (v22)
        {
          v23 = (*(unsigned __int8 *)(v22 + 43) >> 2) & 1;
LABEL_14:
          v24 = (*(_DWORD *)(v22 + 16) >> 22) & 7;
          if (v24 == 5 || v24 == 2)
            LOBYTE(v22) = 4;
          else
            LOBYTE(v22) = 0;
          goto LABEL_20;
        }
        v23 = 0;
      }
      else
      {
        v23 = v20 == 1;
        if (v22)
          goto LABEL_14;
      }
LABEL_20:
      v32 = 0;
      v26 = v40;
      if (v40)
        *(_DWORD *)v40 += 2;
      v33 = v26;
      v34 = 0;
      v35 = 1;
      v36 = 0x3F80000000000000;
      v37 = 0;
      v38 = 4;
      if (v23)
        v27 = 10;
      else
        v27 = 8;
      v39 = v27 | v22;
      WebCore::CanvasRenderingContext2DBase::drawTextUnchecked(a1, (uint64_t)&v32, a3, a4, a5, a6, a7);
      v28 = v33;
      v33 = 0;
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v18);
        else
          *(_DWORD *)v28 -= 2;
      }
      result = (unsigned int *)v40;
      v40 = 0;
      if (result)
      {
        if (*result == 2)
          result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v18);
        else
          *result -= 2;
      }
      goto LABEL_31;
    }
    __break(0xC471u);
LABEL_53:
    JUMPOUT(0x195CDA0ACLL);
  }
LABEL_31:
  --WebCore::ScriptDisallowedScope::s_count;
  if (*(_DWORD *)(v15 + 24) == 2)
  {
    if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v15, v18);
  }
  else
  {
    *(_DWORD *)(v15 + 24) -= 2;
  }
  return result;
}

unsigned int *WebCore::CanvasRenderingContext2D::measureText@<X0>(WebCore::CanvasRenderingContext2D *this@<X0>, const WTF::String *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  WebCore::ResourceLoadObserver *updated;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  WTF::StringImpl *v16;
  char v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unsigned int *result;
  uint64_t v21;
  BOOL v22;
  uint64_t *v23;
  WebCore::ResourceLoadObserver *v24;
  uint64_t *v25;
  int v26;
  WTF::StringImpl *v27;
  int v28;
  char v29;
  uint64_t v30;
  int v31;
  char v32;
  char v33;
  WTF::StringImpl *v34;

  v6 = *((_QWORD *)this + 4);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6) & 1) == 0)
  {
    __break(0xC471u);
    goto LABEL_52;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(v6 - 72) + 8);
  *(_DWORD *)(v7 + 24) += 2;
  updated = (WebCore::ResourceLoadObserver *)WebCore::Document::updateStyleIfNeeded((WebCore::Document *)v7);
  ++WebCore::ScriptDisallowedScope::s_count;
  if ((*(_QWORD *)(*(_QWORD *)(v7 + 680) + 704) & 0x4000) != 0)
  {
    v23 = WebCore::ResourceLoadObserver::shared(updated);
    v24 = (WebCore::ResourceLoadObserver *)(*(uint64_t (**)(uint64_t *, uint64_t, const WTF::String *))(*v23 + 56))(v23, v7, a2);
    v25 = WebCore::ResourceLoadObserver::shared(v24);
    (*(void (**)(uint64_t *, uint64_t))(*v25 + 48))(v25, v7);
  }
  WebCore::CanvasRenderingContext2DBase::normalizeSpaces((uint64_t *)a2, &v34);
  v9 = *((_DWORD *)this + 33);
  if (!v9)
  {
    __break(0xC471u);
LABEL_52:
    JUMPOUT(0x195CDA370);
  }
  v10 = *(_DWORD *)(*((_QWORD *)this + 15) + 560 * v9 - 352);
  v11 = *((_QWORD *)this + 4);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195CDA390);
  }
  if ((*(_QWORD *)(v11 - 40) & 0xFFFFFFFFFFFFLL) == 0
    || (v12 = *(_QWORD *)((*(_QWORD *)(v11 - 40) & 0xFFFFFFFFFFFFLL) + 0x30)) == 0
    && ((v12 = *(_QWORD *)((*(_QWORD *)(v11 - 40) & 0xFFFFFFFFFFFFLL) + 0x38)) == 0
     || ((v21 = *(_QWORD *)(v12 + 16) & 0x1FLL, v21 != 26) ? (v22 = v21 == 18) : (v22 = 1), !v22)))
  {
    v12 = *(_QWORD *)(v11 - 48) & 0xFFFFFFFFFFFFLL;
    if (v12)
    {
      if ((*(_BYTE *)((*(_QWORD *)(v11 - 48) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        v12 = *(_QWORD *)((*(_QWORD *)(v11 - 48) & 0xFFFFFFFFFFFFLL) + 0x20);
        if (v12)
          v12 = *(_QWORD *)(v12 + 8);
      }
      v12 += 80;
    }
  }
  if (v10 == 2)
  {
    if (!v12)
    {
      v13 = 0;
      goto LABEL_19;
    }
    v13 = (*(unsigned __int8 *)(v12 + 43) >> 2) & 1;
  }
  else
  {
    v13 = v10 == 1;
    if (!v12)
      goto LABEL_19;
  }
  v14 = (*(_DWORD *)(v12 + 16) >> 22) & 7;
  if (v14 == 5 || v14 == 2)
    LOBYTE(v12) = 4;
  else
    LOBYTE(v12) = 0;
LABEL_19:
  v26 = 0;
  v16 = v34;
  if (v34)
    *(_DWORD *)v34 += 2;
  v27 = v16;
  v28 = 0;
  v29 = 1;
  v30 = 0x3F80000000000000;
  v31 = 0;
  v32 = 4;
  if (v13)
    v17 = 10;
  else
    v17 = 8;
  v33 = v17 | v12;
  WebCore::CanvasRenderingContext2DBase::measureTextInternal(this, (const WebCore::TextRun *)&v26, a3);
  v19 = v27;
  v27 = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, v18);
    else
      *(_DWORD *)v19 -= 2;
  }
  result = (unsigned int *)v34;
  v34 = 0;
  if (result)
  {
    if (*result == 2)
      result = (unsigned int *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v18);
    else
      *result -= 2;
  }
  --WebCore::ScriptDisallowedScope::s_count;
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v7, v18);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  return result;
}

uint64_t *WebCore::CanvasRenderingContext2DBase::normalizeSpaces@<X0>(uint64_t *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  int v18;
  char v19;

  v4 = *this;
  if (!*this)
    goto LABEL_8;
  v5 = this;
  v6 = *(_QWORD *)(v4 + 8);
  v7 = *(unsigned int *)(v4 + 4);
  if ((*(_BYTE *)(v4 + 16) & 4) != 0)
  {
    if ((_DWORD)v7)
    {
      v8 = 0;
      while (*(unsigned __int8 *)(v6 + v8) - 9 >= 5)
      {
        if (v7 == ++v8)
          goto LABEL_7;
      }
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  if (!(_DWORD)v7)
  {
LABEL_7:
    *(_DWORD *)v4 += 2;
LABEL_8:
    *a2 = v4;
    return this;
  }
  v8 = 0;
  while (*(unsigned __int16 *)(v6 + 2 * v8) - 9 >= 5)
  {
    if (v7 == ++v8)
      goto LABEL_7;
  }
LABEL_14:
  if ((v7 & 0x80000000) != 0)
  {
    __break(0xC471u);
    goto LABEL_27;
  }
  v9 = (char *)WTF::fastMalloc((WTF *)(2 * v7));
  v10 = *v5;
  v17 = 0;
  if (v10)
  {
    v11 = *(unsigned __int8 *)(v10 + 16);
    v12 = *(_QWORD *)(v10 + 8);
    LODWORD(v10) = *(_DWORD *)(v10 + 4);
    v17 = v12;
    v13 = (v11 >> 2) & 1;
  }
  else
  {
    LOBYTE(v13) = 1;
  }
  v18 = v10;
  v19 = v13;
  WTF::StringView::getCharacters<char16_t>(&v17, v9);
  if (v8 >= v7)
  {
    __break(0xC471u);
LABEL_27:
    JUMPOUT(0x195CDA564);
  }
  *(_WORD *)&v9[2 * v8] = 32;
  if (v8 + 1 < v7)
  {
    v14 = ~v8 + v7;
    v15 = &v9[2 * v8 + 2];
    do
    {
      if (*(unsigned __int16 *)v15 - 9 <= 4)
        *(_WORD *)v15 = 32;
      v15 += 2;
      --v14;
    }
    while (v14);
  }
  WTF::StringImpl::create();
  return (uint64_t *)WTF::fastFree((WTF *)v9, v16);
}

double WebCore::CanvasRenderingContext2DBase::measureTextInternal@<D0>(WebCore::CanvasRenderingContext2DBase *this@<X0>, const WebCore::TextRun *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  WebCore::FontCascade *v7;
  void *v8;
  uint64_t v9;
  float v10;
  char v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  float32x2_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  int v20;
  int v21;
  float32x2_t v22;
  float32x2_t v23;
  int v24;
  double v25;
  double v26;
  double v27;
  double result;
  int v29;
  int v30;
  BOOL v31;
  int v32;
  int v33;

  v6 = WTF::fastMalloc((WTF *)0x68);
  *(_DWORD *)v6 = 1;
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  *(_OWORD *)(v6 + 40) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *a3 = v6;
  v7 = (WebCore::FontCascade *)((*(uint64_t (**)(WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)this + 288))(this)
                              + 8);
  v9 = WebCore::FontCascade::metricsOfPrimaryFont(v7, v8);
  v10 = WebCore::FontCascade::width((uint64_t)v7, (uint64_t)a2);
  *(double *)(v6 + 8) = v10;
  v11 = *((_BYTE *)a2 + 37);
  v12 = (*(uint64_t (**)(WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)this + 288))(this);
  v14 = WebCore::FontCascade::metricsOfPrimaryFont((WebCore::FontCascade *)(v12 + 8), v13);
  v16 = *((unsigned int *)this + 33);
  if (!(_DWORD)v16)
  {
    __break(0xC471u);
    JUMPOUT(0x195CDA7B8);
  }
  v17 = v16 - 1;
  v18 = *((_QWORD *)this + 15);
  v19 = 0.0;
  v15.i32[0] = 0;
  switch(*(_DWORD *)(v18 + 560 * v17 + 204))
  {
    case 1:
    case 5:
      v15.f32[0] = (float)*(int *)(v14 + 44);
      break;
    case 2:
      v29 = *(_DWORD *)(v14 + 44);
      v30 = *(_DWORD *)(v14 + 48);
      v31 = __OFADD__(v30, v29);
      v32 = v30 + v29;
      if (v32 < 0 != v31)
        ++v32;
      v33 = (v32 >> 1) - v30;
      goto LABEL_11;
    case 3:
    case 4:
      v33 = -*(_DWORD *)(v14 + 48);
LABEL_11:
      v15.f32[0] = (float)v33;
      break;
    default:
      break;
  }
  v20 = *(_DWORD *)(v18 + 560 * v17 + 200);
  if (v20)
  {
    switch(v20)
    {
      case 3:
        v19 = v10 * -0.5;
        goto LABEL_6;
      case 1:
        if ((v11 & 2) != 0)
          goto LABEL_6;
        break;
      case 4:
        break;
      default:
        goto LABEL_6;
    }
    goto LABEL_5;
  }
  if ((v11 & 2) != 0)
LABEL_5:
    v19 = -v10;
LABEL_6:
  v21 = *(_DWORD *)(v9 + 48);
  v22 = vmul_f32(vcvt_f32_s32(0), (float32x2_t)vdup_n_s32(0x3C800000u));
  v23.i32[0] = vsub_f32(v22, v15).u32[0];
  v23.i32[1] = vadd_f32(v22, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v15, 0)).i32[1];
  v24 = *(_DWORD *)(v9 + 44);
  *(float64x2_t *)(v6 + 48) = vcvtq_f64_f32(v23);
  v25 = (float)((float)v24 - v15.f32[0]);
  v26 = (float)(v15.f32[0] + (float)v21);
  *(double *)(v6 + 32) = v25;
  *(double *)(v6 + 40) = v26;
  *(double *)(v6 + 64) = v25;
  *(double *)(v6 + 72) = v26;
  *(double *)(v6 + 80) = v25;
  *(double *)(v6 + 88) = (float)-v15.f32[0];
  *(double *)(v6 + 96) = (float)((float)-v21 - v15.f32[0]);
  v27 = (float)((float)((float)0 * 0.015625) - v19);
  result = (float)(v19 + (float)(v10 + (float)((float)0 * 0.015625)));
  *(double *)(v6 + 16) = v27;
  *(double *)(v6 + 24) = result;
  return result;
}

uint64_t WebCore::CanvasRenderingContext2D::fontProxy(WebCore::CanvasRenderingContext2D *this, void *a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  WebCore::FontCascadeFonts *v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  WTF *v11;
  void *v12;

  ++WebCore::ScriptDisallowedScope::s_count;
  v3 = *((unsigned int *)this + 33);
  if (!(_DWORD)v3)
    goto LABEL_14;
  v5 = v3 - 1;
  v6 = *((_QWORD *)this + 15);
  v7 = *(WebCore::FontCascadeFonts **)(v6 + 560 * (v3 - 1) + 472);
  if (v7)
  {
    v8 = (*(_DWORD *)v7)++;
    v9 = *((_QWORD *)v7 + 14);
    if (v8)
    {
      *(_DWORD *)v7 = v8;
    }
    else
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v7, a2);
      WTF::fastFree(v11, v12);
      LODWORD(v3) = *((_DWORD *)this + 33);
    }
    if (v9)
      goto LABEL_6;
    if ((_DWORD)v3)
    {
      v6 = *((_QWORD *)this + 15);
      v5 = v3 - 1;
      goto LABEL_13;
    }
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x195CDA878);
  }
LABEL_13:
  WebCore::CanvasRenderingContext2D::setFontWithoutUpdatingStyle(this, (WTF **)(v6 + 560 * v5 + 240), a3);
  LODWORD(v3) = *((_DWORD *)this + 33);
LABEL_6:
  if (!(_DWORD)v3)
  {
    __break(0xC471u);
    JUMPOUT(0x195CDA880);
  }
  result = *((_QWORD *)this + 15) + 560 * v3 - 312;
  --WebCore::ScriptDisallowedScope::s_count;
  return result;
}

uint64_t WebCore::CanvasRenderingContext2DBase::canDrawText(uint64_t a1, char a2, uint64_t a3, char a4, double a5, double a6)
{
  WebCore::FontCascadeFonts *v12;
  void *v13;
  int v14;
  uint64_t v15;
  uint64_t result;
  unsigned int v17;
  uint64_t v18;
  WebCore::Gradient *v19;
  WTF *v20;
  void *v21;
  WebCore::Gradient *v22;

  v12 = *(WebCore::FontCascadeFonts **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 288))(a1) + 224);
  if (!v12)
    return 0;
  v14 = (*(_DWORD *)v12)++;
  v15 = *((_QWORD *)v12 + 14);
  if (v14)
  {
    *(_DWORD *)v12 = v14;
  }
  else
  {
    WebCore::FontCascadeFonts::~FontCascadeFonts(v12, v13);
    WTF::fastFree(v20, v21);
  }
  if (!v15)
    return 0;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
  if (!result)
    return 0;
  v17 = *(_DWORD *)(a1 + 132);
  if (v17)
  {
    v18 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 120) + 560 * v17 - 400);
    if (!(_DWORD)v18)
      return v18;
    if ((*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || (*(_QWORD *)&a6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    {
      return 0;
    }
    if (a4)
    {
      v18 = 0;
      if ((a3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)&a3 <= 0.0)
        return v18;
    }
    if (*(_DWORD *)(result + 176) != 1 || *(_DWORD *)(result + 120))
      v19 = 0;
    else
      v19 = *(WebCore::Gradient **)(result + 112);
    if ((a2 & 1) != 0)
    {
      if (*(_DWORD *)(result + 88) == 1 && !*(_DWORD *)(result + 32))
      {
        v22 = *(WebCore::Gradient **)(result + 24);
        if (v22)
        {
LABEL_28:
          if ((WebCore::Gradient::isZeroSize(v22) & 1) != 0)
            return 0;
        }
      }
    }
    else if (v19)
    {
      v22 = v19;
      goto LABEL_28;
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

unsigned __int8 **WebCore::CanvasRenderingContext2DBase::drawTextUnchecked(uint64_t a1, uint64_t a2, int a3, uint64_t a4, char a5, double a6, double a7)
{
  WebCore::FontCascade *v14;
  void *v15;
  _DWORD *v16;
  float v17;
  _BOOL4 v18;
  float v19;
  float v20;
  char v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  int v32;
  float v33;
  float v34;
  int v35;
  int v36;
  BOOL v37;
  int v38;
  int v39;
  float32_t v40;
  float v41;
  uint64_t v42;
  void *v43;
  float *v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t *v56;
  unsigned __int8 **result;
  void *v58;
  int v59;
  int v60;
  int v61;
  int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  WebCore::CanvasGradient *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  WebCore::DestinationColorSpace *shouldDrawShadows;
  int v72;
  uint64_t v73;
  float v74;
  float v75;
  uint64_t v76;
  float v77;
  float v78;
  float v79;
  void *v80;
  void *v81;
  unsigned int *v82;
  unsigned int v83;
  BOOL v84;
  float v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  void *v90;
  uint64_t *v91;
  WebCore::GraphicsContext *v92;
  WebCore::GraphicsContext *v93;
  void *v94;
  int v95;
  void *v96;
  float v97;
  float v98;
  float v99;
  float v100;
  void *v101;
  uint64_t v102;
  WTF *v103;
  int v104;
  WebCore::Pattern *v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int v109;
  WTF *v110;
  void *v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int *v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int *v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  BOOL v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  char v127;
  int v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float32x4_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  WebCore::CanvasFilterContextSwitcher *v137;
  float32x4_t v138;
  unint64_t v139;

  v14 = (WebCore::FontCascade *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 288))(a1) + 8);
  v16 = (_DWORD *)WebCore::FontCascade::metricsOfPrimaryFont(v14, v15);
  v17 = WebCore::FontCascade::width((uint64_t)v14, a2);
  v18 = a5 != 0 && *(double *)&a4 < v17;
  v19 = *(double *)&a4;
  if (v18)
    v20 = v19;
  else
    v20 = v17;
  v21 = *(_BYTE *)(a2 + 37);
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 288))(a1);
  v24 = WebCore::FontCascade::metricsOfPrimaryFont((WebCore::FontCascade *)(v22 + 8), v23);
  v25 = *(unsigned int *)(a1 + 132);
  if (!(_DWORD)v25)
  {
    __break(0xC471u);
    JUMPOUT(0x195CDB3B0);
  }
  v26 = v25 - 1;
  v27 = *(_QWORD *)(a1 + 120);
  v28 = 0.0;
  v29 = 0.0;
  switch(*(_DWORD *)(v27 + 560 * v26 + 204))
  {
    case 1:
    case 5:
      v29 = (float)*(int *)(v24 + 44);
      break;
    case 2:
      v59 = *(_DWORD *)(v24 + 44);
      v60 = *(_DWORD *)(v24 + 48);
      v37 = __OFADD__(v60, v59);
      v61 = v60 + v59;
      if (v61 < 0 != v37)
        ++v61;
      v62 = (v61 >> 1) - v60;
      goto LABEL_40;
    case 3:
    case 4:
      v62 = -*(_DWORD *)(v24 + 48);
LABEL_40:
      v29 = (float)v62;
      break;
    default:
      break;
  }
  v32 = *(_DWORD *)(v27 + 560 * v26 + 200);
  switch(v32)
  {
    case 0:
      if ((v21 & 2) == 0)
        break;
      goto LABEL_8;
    case 3:
      v28 = v20 * -0.5;
      break;
    case 1:
      if ((v21 & 2) == 0)
LABEL_8:
        v28 = -v20;
      break;
    case 4:
      goto LABEL_8;
  }
  v30 = a6;
  v33 = v28 + v30;
  v31 = a7;
  v34 = v29 + v31;
  v139 = __PAIR64__(LODWORD(v34), LODWORD(v33));
  v35 = v16[11];
  v36 = v16[12];
  v37 = __OFADD__(v36, v35);
  v38 = v36 + v35;
  if (v38 < 0 != v37)
    v39 = v38 + 1;
  else
    v39 = v38;
  v40 = (float)(v34 - (float)v35) - (float)(int)v16[13];
  v41 = (float)(int)v16[14];
  v138.f32[0] = v33 - (float)(v39 >> 1);
  v138.f32[1] = v40;
  v138.f32[2] = v20 + (float)v38;
  v138.f32[3] = v41;
  if ((a3 & 1) == 0)
  {
    WebCore::CanvasRenderingContext2DBase::inflatedStrokeRect(a1, (const WebCore::FloatRect *)&v138);
    v138.i64[0] = __PAIR64__(v64, v63);
    v138.i64[1] = __PAIR64__(v66, v65);
  }
  WebCore::CanvasFilterContextSwitcher::create((uint64_t **)a1, (WebCore::CanvasRenderingContext2DBase *)&v138, (uint64_t **)&v137);
  v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
  v44 = (float *)v42;
  v45 = *(_DWORD *)(a1 + 132);
  if (a3)
  {
    if (!v45)
    {
      __break(0xC471u);
      JUMPOUT(0x195CDB490);
    }
    v46 = *(_QWORD *)(a1 + 120) + 560 * v45 - 528;
  }
  else
  {
    if (!v45)
    {
      __break(0xC471u);
      goto LABEL_107;
    }
    v46 = *(_QWORD *)(a1 + 120) + 560 * v45 - 544;
  }
  v47 = *(_DWORD *)(v46 + 8);
  if (v47 == 1)
  {
    v122 = v18;
    v123 = v46;
    v67 = *(WebCore::CanvasGradient **)v46;
    *(_DWORD *)v67 = **(_DWORD **)v46 + 1;
    WTF::RefCounted<WebCore::CanvasGradient>::deref(v67, v43);
  }
  else
  {
    if (v47 != 2)
    {
      if (a3)
        v48 = 1;
      else
        v48 = 2;
      if (*(unsigned __int8 *)(v42 + 341) != v48)
      {
        *(_BYTE *)(v42 + 341) = v48;
        *(_DWORD *)(v42 + 184) |= 0x200u;
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 88))(v42, v42 + 8);
      (*(void (**)(float *, uint64_t))(*(_QWORD *)v44 + 96))(v44, 1);
      if (v18)
      {
        (*(void (**)(float *, float, float))(*(_QWORD *)v44 + 648))(v44, *(float *)&v139, *((float *)&v139 + 1));
        v85 = v19 / v17;
        if (v17 <= 0.0)
          v85 = 0.0;
        v133.i64[0] = LODWORD(v85) | 0x3F80000000000000;
        (*(void (**)(float *, float32x4_t *))(*(_QWORD *)v44 + 632))(v44, &v133);
        v139 = 0;
      }
      v49 = *(_DWORD *)(a1 + 132);
      if (v49)
      {
        v50 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 120) + 560 * v49 - 456);
        if (v50 > 9)
          goto LABEL_46;
        if (((1 << v50) & 0x298) != 0)
        {
          v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
          v52 = *(_DWORD *)(a1 + 132);
          if (!v52)
          {
            __break(0xC471u);
            JUMPOUT(0x195CDB3C8);
          }
          v53 = *(_QWORD *)(a1 + 120) + 560 * v52 - 560;
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v51 + 600))(v51, *(unsigned __int8 *)(v53 + 104), *(unsigned __int8 *)(v53 + 105));
          v54 = 1;
          (*(void (**)(float *, WebCore::FontCascade *, uint64_t, unint64_t *, uint64_t))(*(_QWORD *)v44 + 536))(v44, v14, a2, &v139, 1);
          v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
          (*(void (**)(uint64_t))(*(_QWORD *)v55 + 608))(v55);
          goto LABEL_30;
        }
        if (v50 == 1)
        {
          WebCore::CanvasRenderingContext2DBase::clearCanvas((WebCore::CanvasRenderingContext2DBase *)a1);
          v54 = 1;
          (*(void (**)(float *, WebCore::FontCascade *, uint64_t, unint64_t *, uint64_t))(*(_QWORD *)v44 + 536))(v44, v14, a2, &v139, 1);
        }
        else
        {
LABEL_46:
          (*(void (**)(float *, WebCore::FontCascade *, uint64_t, unint64_t *, uint64_t))(*(_QWORD *)v44 + 536))(v44, v14, a2, &v139, 1);
          v54 = 0;
        }
LABEL_30:
        v56 = (uint64_t *)v137;
        if (v137)
        {
          WebCore::CanvasFilterContextSwitcher::expandedBounds((uint64_t)v137);
          v133.i64[0] = __PAIR64__(v87, v86);
          v133.i64[1] = __PAIR64__(v89, v88);
        }
        else
        {
          v133 = v138;
        }
        WebCore::CanvasRenderingContext2DBase::didDraw(a1, v54, &v133, 0xFu);
        result = (unsigned __int8 **)(*(uint64_t (**)(float *, uint64_t))(*(_QWORD *)v44 + 104))(v44, 1);
        goto LABEL_33;
      }
LABEL_108:
      __break(0xC471u);
      JUMPOUT(0x195CDB3C0);
    }
    v122 = v18;
    v123 = v46;
    v103 = *(WTF **)v46;
    v104 = **(_DWORD **)v46;
    *(_DWORD *)v103 = v104 + 1;
    if (v104)
    {
      *(_DWORD *)v103 = v104;
    }
    else
    {
      v105 = (WebCore::Pattern *)*((_QWORD *)v103 + 1);
      *((_QWORD *)v103 + 1) = 0;
      if (v105)
      {
        if (*(_DWORD *)v105 == 1)
        {
          WebCore::Pattern::~Pattern(v105);
          WTF::fastFree(v110, v111);
        }
        else
        {
          --*(_DWORD *)v105;
        }
      }
      WTF::fastFree(v103, v43);
    }
  }
  v68 = WebCore::enclosingIntRect((WebCore *)&v138, (const WebCore::FloatRect *)v43);
  v70 = v69;
  shouldDrawShadows = (WebCore::DestinationColorSpace *)WebCore::CanvasRenderingContext2DBase::shouldDrawShadows(a1);
  if ((shouldDrawShadows & 1) != 0)
  {
    (*(void (**)(float *, uint64_t))(*(_QWORD *)v44 + 96))(v44, 1);
    v133.i8[0] = 0;
    v136 = 0;
    v72 = *((unsigned __int8 *)v44 + 232);
    if (*((_BYTE *)v44 + 232))
    {
      v133.i64[0] = *((_QWORD *)v44 + 25);
      v133.f32[2] = v44[52];
      v73 = *((_QWORD *)v44 + 27);
      v134 = v73;
      if ((v73 & 0x8000000000000) != 0)
      {
        v108 = (unsigned int *)(v73 & 0xFFFFFFFFFFFFLL);
        do
          v109 = __ldaxr(v108);
        while (__stlxr(v109 + 1, v108));
      }
      v135 = *((_QWORD *)v44 + 28);
      v136 = 1;
    }
    v129 = (float)(int)v68;
    v130 = (float)SHIDWORD(v68);
    v74 = (float)(int)v70;
    v75 = (float)SHIDWORD(v70);
    v131 = (float)(int)v70;
    v132 = (float)SHIDWORD(v70);
    if (v72)
    {
      v76 = *(uint64_t *)((char *)v133.i64 + 4);
      v77 = v133.f32[2] * 1.4;
      v78 = (float)(2 * HIDWORD(v70));
      v131 = (float)(v74 + v77) + v77;
      v132 = (float)(v75 + v77) + v77;
      v79 = v133.f32[0];
      v129 = (float)((float)(int)v68 - v77) - v133.f32[0];
      v130 = (float)((float)SHIDWORD(v68) - v77) - v133.f32[1];
      (*(void (**)(float *, float *))(*(_QWORD *)v44 + 456))(v44, &v129);
      *(float *)&v124 = v79 + 0.0;
      *((float *)&v124 + 1) = *(float *)&v76 + v78;
      v125 = HIDWORD(v76);
      v126 = v134;
      if ((v134 & 0x8000000000000) != 0)
      {
        v106 = (unsigned int *)(v134 & 0xFFFFFFFFFFFFLL);
        do
          v107 = __ldaxr(v106);
        while (__stlxr(v107 + 1, v106));
      }
      v127 = 1;
      v128 = 1065353216;
      WebCore::GraphicsContext::setDropShadow((uint64_t)v44, &v124);
      if ((v126 & 0x8000000000000) != 0)
      {
        v112 = (unsigned int *)(v126 & 0xFFFFFFFFFFFFLL);
        do
        {
          v113 = __ldaxr(v112);
          v114 = v113 - 1;
        }
        while (__stlxr(v114, v112));
        if (!v114)
        {
          atomic_store(1u, v112);
          WTF::fastFree((WTF *)v112, v80);
        }
      }
      if (a3)
      {
        v124 = 0x11040000000000FFLL;
        WebCore::GraphicsContext::setFillColor((WebCore::GraphicsContext *)v44, (const WebCore::Color *)&v124);
        if ((v124 & 0x8000000000000) != 0)
        {
          v82 = (unsigned int *)(v124 & 0xFFFFFFFFFFFFLL);
          do
          {
            v83 = __ldaxr(v82);
            v84 = --v83 == 0;
          }
          while (__stlxr(v83, v82));
          goto LABEL_125;
        }
      }
      else
      {
        v124 = 0x11040000000000FFLL;
        WebCore::GraphicsContext::setStrokeColor((WebCore::GraphicsContext *)v44, (const WebCore::Color *)&v124);
        if ((v124 & 0x8000000000000) != 0)
        {
          v82 = (unsigned int *)(v124 & 0xFFFFFFFFFFFFLL);
          do
          {
            v121 = __ldaxr(v82);
            v84 = --v121 == 0;
          }
          while (__stlxr(v121, v82));
LABEL_125:
          if (v84)
          {
            atomic_store(1u, v82);
            WTF::fastFree((WTF *)v82, v81);
          }
        }
      }
      *(float *)&v124 = *(float *)&v139 + 0.0;
      *((float *)&v124 + 1) = *((float *)&v139 + 1) + v78;
      (*(void (**)(float *, WebCore::FontCascade *, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v44 + 536))(v44, v14, a2, &v124, 1);
      std::optional<WebCore::GraphicsDropShadow>::~optional((uint64_t)&v133, v90);
      shouldDrawShadows = (WebCore::DestinationColorSpace *)(*(uint64_t (**)(float *, uint64_t))(*(_QWORD *)v44 + 104))(v44, 1);
      goto LABEL_74;
    }
LABEL_107:
    __break(1u);
    goto LABEL_108;
  }
  v74 = (float)(int)v70;
  v75 = (float)SHIDWORD(v70);
LABEL_74:
  v133.i64[0] = __PAIR64__(LODWORD(v75), LODWORD(v74));
  v91 = WebCore::DestinationColorSpace::SRGB(shouldDrawShadows);
  (*(void (**)(uint64_t *__return_ptr, float *, float32x4_t *, uint64_t *, _QWORD))(*(_QWORD *)v44 + 336))(&v124, v44, &v133, v91, 0);
  result = (unsigned __int8 **)v124;
  if (v124)
  {
    v92 = (WebCore::GraphicsContext *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v124 + 16))(v124);
    v93 = v92;
    if (a3)
    {
      v133.i64[0] = 0x11040000000000FFLL;
      WebCore::GraphicsContext::setFillColor(v92, (const WebCore::Color *)&v133);
      if ((v133.i64[0] & 0x8000000000000) != 0)
      {
        v115 = (unsigned int *)(v133.i64[0] & 0xFFFFFFFFFFFFLL);
        do
        {
          v116 = __ldaxr(v115);
          v117 = v116 - 1;
        }
        while (__stlxr(v117, v115));
        if (!v117)
        {
          atomic_store(1u, v115);
          WTF::fastFree((WTF *)v115, v94);
        }
      }
      v95 = 1;
    }
    else
    {
      v133.i64[0] = 0x11040000000000FFLL;
      WebCore::GraphicsContext::setStrokeColor(v92, (const WebCore::Color *)&v133);
      if ((v133.i64[0] & 0x8000000000000) != 0)
      {
        v118 = (unsigned int *)(v133.i64[0] & 0xFFFFFFFFFFFFLL);
        do
        {
          v119 = __ldaxr(v118);
          v120 = v119 - 1;
        }
        while (__stlxr(v120, v118));
        if (!v120)
        {
          atomic_store(1u, v118);
          WTF::fastFree((WTF *)v118, v96);
        }
      }
      v97 = v44[47];
      if (*((float *)v93 + 47) != v97)
      {
        *((float *)v93 + 47) = v97;
        *((_DWORD *)v93 + 46) |= 8u;
      }
      (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v93 + 88))(v93, (uint64_t)v93 + 8);
      v95 = 2;
    }
    if (*((unsigned __int8 *)v93 + 341) != v95)
    {
      *((_BYTE *)v93 + 341) = v95;
      *((_DWORD *)v93 + 46) |= 0x200u;
    }
    (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v93 + 88))(v93, (uint64_t)v93 + 8);
    if (v122)
    {
      v98 = (float)(int)v68;
      v99 = (float)SHIDWORD(v68);
      (*(void (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)v93 + 648))(v93, *(float *)&v139 - (float)(int)v68, *((float *)&v139 + 1) - (float)SHIDWORD(v68));
      v100 = v19 / v17;
      if (v17 <= 0.0)
        v100 = 0.0;
      v133.i64[0] = LODWORD(v100) | 0x3F80000000000000;
      (*(void (**)(WebCore::GraphicsContext *, float32x4_t *))(*(_QWORD *)v93 + 632))(v93, &v133);
      v133.i64[0] = 0;
      (*(void (**)(WebCore::GraphicsContext *, WebCore::FontCascade *, uint64_t, float32x4_t *, uint64_t))(*(_QWORD *)v93 + 536))(v93, v14, a2, &v133, 1);
    }
    else
    {
      (*(void (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)v93 + 648))(v93, (float)-(int)v68, (float)(int)((unint64_t)-(uint64_t)(v68 & 0xFFFFFFFF00000000) >> 32));
      (*(void (**)(WebCore::GraphicsContext *, WebCore::FontCascade *, uint64_t, unint64_t *, uint64_t))(*(_QWORD *)v93 + 536))(v93, v14, a2, &v139, 1);
      v98 = (float)(int)v68;
      v99 = (float)SHIDWORD(v68);
    }
    (*(void (**)(float *, uint64_t))(*(_QWORD *)v44 + 96))(v44, 1);
    v133.i64[0] = __PAIR64__(LODWORD(v99), LODWORD(v98));
    v133.i64[1] = __PAIR64__(LODWORD(v75), LODWORD(v74));
    (*(void (**)(float *, uint64_t, float32x4_t *))(*(_QWORD *)v44 + 504))(v44, v124, &v133);
    WebCore::CanvasStyle::applyFillColor(v123, (uint64_t)v44);
    v133.i64[0] = __PAIR64__(LODWORD(v99), LODWORD(v98));
    v133.i64[1] = __PAIR64__(LODWORD(v75), LODWORD(v74));
    (*(void (**)(float *, float32x4_t *, uint64_t))(*(_QWORD *)v44 + 216))(v44, &v133, 1);
    v133.i64[0] = __PAIR64__(LODWORD(v99), LODWORD(v98));
    v133.i64[1] = __PAIR64__(LODWORD(v75), LODWORD(v74));
    WebCore::CanvasRenderingContext2DBase::didDraw(a1, 0, &v133, 0xFu);
    result = (unsigned __int8 **)(*(uint64_t (**)(float *, uint64_t))(*(_QWORD *)v44 + 104))(v44, 1);
    v102 = v124;
    v124 = 0;
    if (v102)
      result = WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v102 + 8), v101);
  }
  v56 = (uint64_t *)v137;
LABEL_33:
  if (v56)
  {
    WebCore::CanvasRenderingContext2DBase::restore(*v56);
    return (unsigned __int8 **)WTF::fastFree((WTF *)v56, v58);
  }
  return result;
}

void `non-virtual thunk to'WebCore::CanvasRenderingContext2DBase::~CanvasRenderingContext2DBase(WebCore::CanvasRenderingContext2DBase *this, void *a2)
{
  WebCore::CanvasRenderingContext2DBase::~CanvasRenderingContext2DBase((WebCore::CanvasRenderingContext2DBase *)((char *)this - 40), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::CanvasRenderingContext2DBase::~CanvasRenderingContext2DBase((WebCore::CanvasRenderingContext2DBase *)((char *)this - 40), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

BOOL WebCore::CanvasRenderingContext2DBase::isSurfaceBufferTransparentBlack(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 32) + 73) == 0;
}

uint64_t WebCore::CanvasRenderingContext2DBase::hasDeferredOperations(WebCore::CanvasRenderingContext2DBase *this)
{
  return *((unsigned __int8 *)this + 812);
}

uint64_t WebCore::CanvasRenderingContext2DBase::flushDeferredOperations(uint64_t this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  int v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t v14;

  *(_BYTE *)(this + 812) = 0;
  v1 = *(_QWORD *)(this + 32);
  if (!*(_BYTE *)(v1 + 73))
    this = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 160))(*(_QWORD *)(this + 32));
  v2 = *(_QWORD **)(v1 + 16);
  if (v2)
  {
    v3 = v2[1];
    if (__ldaxr((unsigned __int8 *)v3))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v3))
    {
LABEL_7:
      ++*(_QWORD *)(v3 + 8);
      v5 = __ldxr((unsigned __int8 *)v3);
      if (v5 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v3))
        {
LABEL_12:
          this = (*(uint64_t (**)(_QWORD *))(*v2 + 32))(v2);
          v7 = v2[1];
          if (__ldaxr((unsigned __int8 *)v7))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v7))
          {
LABEL_15:
            v9 = *(_QWORD *)(v7 + 8);
            v10 = v9 - 1;
            *(_QWORD *)(v7 + 8) = v9 - 1;
            if (v9 == 1)
            {
              v14 = *(_QWORD *)(v7 + 16);
              v11 = *(_QWORD *)(v7 + 24);
              *(_QWORD *)(v7 + 24) = 0;
              v12 = v14 != 0;
            }
            else
            {
              v11 = 0;
              v12 = 1;
            }
            v13 = __ldxr((unsigned __int8 *)v7);
            if (v13 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v7))
                goto LABEL_19;
            }
            else
            {
              __clrex();
            }
            this = WTF::Lock::unlockSlow((WTF::Lock *)v7);
LABEL_19:
            if (!v10)
            {
              if (v11)
                this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
              if (!v12)
                return WTF::fastFree((WTF *)v7, v6);
            }
            return this;
          }
          this = MEMORY[0x19AEA534C](v7);
          goto LABEL_15;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v3);
      goto LABEL_12;
    }
    MEMORY[0x19AEA534C](v3);
    goto LABEL_7;
  }
  return this;
}

uint64_t WebCore::CanvasRenderingContext2DBase::reset(WebCore::CanvasRenderingContext2DBase *this, void *a2)
{
  unsigned int v3;
  _QWORD *v4;
  WebCore::CanvasRenderingContext2DBase::State *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _QWORD *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  float32x2_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  WTF *v25;
  uint64_t v26;
  __int128 v27;
  char *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  char *v33;
  WTF::StringImpl *v34;
  WebCore::FontCascadeFonts *v35;
  int v36;
  uint64_t v37;
  void *v38;
  WebCore::FontCascadeFonts *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  int32x2_t *v48;
  WebCore::FontCascadeFonts *v49;
  int v50;
  uint64_t v51;
  WTF *v52;
  void *v53;
  WTF *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  WTF *v61;
  void *v62;
  unsigned __int8 *v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  WebCore::FontCascadeFonts *v67;
  int v68;
  uint64_t v69;
  unsigned int **v70;
  unsigned int **v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  WTF *v76;
  void *v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  uint64_t v81;
  float32x2_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  __int128 v87;
  __int128 v88;
  int v89;
  unint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE v98[28];
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  void (**v103)(WebCore::CanvasRenderingContext2DBase::FontProxy *__hidden);
  uint64_t v104;
  int v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  uint64_t v112;
  char v113;
  _DWORD *v114;
  __int16 v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int16 v120;
  int v121;
  unsigned int v122;
  __int16 v123;
  char v124;
  _QWORD *v125;
  int v126;
  __int16 v127;
  int v128;
  __int16 v129;
  char v130;
  int v131;
  __int16 v132;
  char v133;
  _QWORD v134[2];
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  char v140;
  char **v141;
  char *v142;

  v3 = *((_DWORD *)this + 33);
  if (v3 >= 2)
  {
    v63 = (unsigned __int8 *)(*(uint64_t (**)(WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)this + 232))(this);
    if (v63)
      WebCore::GraphicsContext::unwindStateStack(v63, v3 - 1);
    v3 = *((_DWORD *)this + 33);
  }
  v4 = (_QWORD *)((char *)this + 120);
  if (v3)
  {
    if (v3 != 1)
    {
      v5 = (WebCore::CanvasRenderingContext2DBase::State *)(*v4 + 560);
      v6 = 560 * v3 - 560;
      do
      {
        WebCore::CanvasRenderingContext2DBase::State::~State(v5, a2);
        v5 = (WebCore::CanvasRenderingContext2DBase::State *)(v7 + 560);
        v6 -= 560;
      }
      while (v6);
    }
  }
  else
  {
    if (!*((_DWORD *)this + 32))
      WTF::Vector<WebCore::CanvasRenderingContext2DBase::State,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>((uint64_t)this + 120, 0x10uLL);
    v64 = *v4;
    if (*v4)
    {
      v65 = *((_DWORD *)this + 33);
      if (v65 != 1)
      {
        v66 = 560 * v65;
        do
        {
          WebCore::CanvasRenderingContext2DBase::State::State((WebCore::CanvasRenderingContext2DBase::State *)(v64 + v66));
          v66 += 560;
        }
        while (v66 != 560);
      }
    }
  }
  *((_DWORD *)this + 33) = 1;
  v81 = 0;
  v82 = 0;
  v83 = 0x11040000000000FFLL;
  v84 = 0;
  v85 = 0x11040000000000FFLL;
  v86 = 0;
  *(_QWORD *)&v87 = 0x3FF0000000000000;
  WORD4(v87) = 0;
  v88 = 0x4024000000000000uLL;
  v89 = 0;
  v90 = 0x1104000000000000;
  *(_QWORD *)&v91 = 0x3FF0000000000000;
  WORD4(v91) = 258;
  v94 = xmmword_1969F14A0;
  v93 = unk_1969F1490;
  v92 = constinit_2;
  v95 = 1;
  v97 = 0;
  *(_QWORD *)v98 = 0;
  v96 = 0;
  v98[8] = 1;
  *(_OWORD *)&v98[12] = xmmword_1969F1460;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v100 = 0;
  v101 = 0;
  v99 = v142;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v102 = v142;
  v103 = &off_1E33DC5F8;
  v104 = 0;
  v105 = 0;
  v112 = 256;
  v106 = 0u;
  v107 = 0u;
  v108 = 0u;
  v109 = 0u;
  v110 = 0u;
  v111 = 0u;
  v113 = 0;
  v8 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v8 += 2;
  v114 = v8;
  v115 = 0;
  v116 = 2143289344;
  v117 = 0;
  v118 = 0;
  v119 = 26216000;
  v120 = 257;
  v121 = 0;
  v122 = v122 & 0x80000000 | 0xE000;
  v123 = 0;
  v124 &= 0xFCu;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = 0x100000001;
  v9[1] = 0;
  v125 = v9;
  v126 = 0;
  v127 &= 0xFC00u;
  v128 = 0;
  v129 = 4;
  v130 = 0;
  v131 = 0;
  v132 = 4;
  v133 = 0;
  *(_QWORD *)((char *)v134 + 7) = 0;
  v138 = 0u;
  v137 = 0u;
  v136 = 0u;
  v135 = 0u;
  v134[0] = 0;
  v139 = 0;
  if (!*((_DWORD *)this + 33))
  {
    __break(0xC471u);
    JUMPOUT(0x195CDBECCLL);
  }
  v11 = *v4;
  v12 = v81;
  v81 = 0;
  v13 = *(WTF::StringImpl **)v11;
  *(_QWORD *)v11 = v12;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v10);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = v82;
  v82 = 0;
  v15 = *(WTF::StringImpl **)(v11 + 8);
  *(float32x2_t *)(v11 + 8) = v14;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v10);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = *(unsigned int *)(v11 + 24);
  if ((_DWORD)v16 == -1)
  {
    if (v84 != -1)
      goto LABEL_17;
  }
  else
  {
    if (v84 != -1)
    {
LABEL_17:
      v142 = (char *)(v11 + 16);
      ((void (*)(char **))*(&off_1E33DC6E0 + v84))(&v142);
      goto LABEL_18;
    }
    ((void (*)(char **, uint64_t))off_1E33DC6C8[v16])(&v142, v11 + 16);
    *(_DWORD *)(v11 + 24) = -1;
  }
LABEL_18:
  v17 = (void *)(v11 + 32);
  v18 = *(unsigned int *)(v11 + 40);
  if ((_DWORD)v18 == -1)
  {
    if (v86 != -1)
      goto LABEL_20;
  }
  else
  {
    if (v86 != -1)
    {
LABEL_20:
      v142 = (char *)(v11 + 32);
      ((void (*)(char **))*(&off_1E33DC6E0 + v86))(&v142);
      goto LABEL_21;
    }
    ((void (*)(char **, void *))off_1E33DC6C8[v18])(&v142, v17);
    *(_DWORD *)(v11 + 40) = -1;
  }
LABEL_21:
  v19 = v87;
  v20 = v88;
  *(_DWORD *)(v11 + 80) = v89;
  *(_OWORD *)(v11 + 48) = v19;
  *(_OWORD *)(v11 + 64) = v20;
  v21 = *(_QWORD *)(v11 + 88);
  if ((v21 & 0x8000000000000) != 0)
  {
    v78 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFLL);
    if ((v90 & 0x8000000000000) == 0
      || *(float *)((v21 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v90 & 0xFFFFFFFFFFFFLL) + 4)
      || *(float *)((v21 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v90 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v21 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v90 & 0xFFFFFFFFFFFFLL) + 0xC)
      || *(float *)((v21 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v90 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v21) != HIBYTE(v90)
      || BYTE6(v21) != BYTE6(v90))
    {
      do
      {
        v79 = __ldaxr(v78);
        v80 = v79 - 1;
      }
      while (__stlxr(v80, v78));
      if (!v80)
      {
        atomic_store(1u, v78);
        WTF::fastFree((WTF *)v78, v17);
      }
      goto LABEL_24;
    }
  }
  else if (v21 != v90 || (v90 & 0x8000000000000) != 0)
  {
LABEL_24:
    *(_QWORD *)(v11 + 88) = v90;
    v90 = 0;
  }
  *(_OWORD *)(v11 + 96) = v91;
  v22 = v92;
  v23 = v93;
  v24 = v94;
  *(_BYTE *)(v11 + 160) = v95;
  *(_OWORD *)(v11 + 128) = v23;
  *(_OWORD *)(v11 + 144) = v24;
  *(_OWORD *)(v11 + 112) = v22;
  v25 = *(WTF **)(v11 + 168);
  if (v25)
  {
    *(_QWORD *)(v11 + 168) = 0;
    *(_DWORD *)(v11 + 176) = 0;
    WTF::fastFree(v25, v17);
  }
  v26 = v96;
  v96 = 0;
  *(_QWORD *)(v11 + 168) = v26;
  LODWORD(v26) = v97;
  LODWORD(v97) = 0;
  *(_DWORD *)(v11 + 176) = v26;
  LODWORD(v26) = HIDWORD(v97);
  HIDWORD(v97) = 0;
  *(_DWORD *)(v11 + 180) = v26;
  v27 = *(_OWORD *)v98;
  *(_OWORD *)(v11 + 196) = *(_OWORD *)&v98[12];
  *(_OWORD *)(v11 + 184) = v27;
  v28 = v99;
  v99 = 0;
  v29 = *(WTF::StringImpl **)(v11 + 216);
  *(_QWORD *)(v11 + 216) = v28;
  if (v29)
  {
    if (*(_DWORD *)v29 == 2)
      WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)v29 -= 2;
  }
  v30 = *(unsigned int *)(v11 + 236);
  if ((_DWORD)v30)
  {
    v70 = *(unsigned int ***)(v11 + 224);
    v71 = &v70[v30];
    do
    {
      v72 = *v70;
      *v70 = 0;
      if (v72)
      {
        v73 = v72 + 2;
        do
        {
          v74 = __ldaxr(v73);
          v75 = v74 - 1;
        }
        while (__stlxr(v75, v73));
        if (!v75)
        {
          atomic_store(1u, v72 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v72 + 8))(v72);
        }
      }
      ++v70;
    }
    while (v70 != v71);
  }
  v31 = *(WTF **)(v11 + 224);
  if (v31)
  {
    *(_QWORD *)(v11 + 224) = 0;
    *(_DWORD *)(v11 + 232) = 0;
    WTF::fastFree(v31, v17);
  }
  v32 = v100;
  v100 = 0;
  *(_QWORD *)(v11 + 224) = v32;
  LODWORD(v32) = v101;
  LODWORD(v101) = 0;
  *(_DWORD *)(v11 + 232) = v32;
  LODWORD(v32) = HIDWORD(v101);
  HIDWORD(v101) = 0;
  *(_DWORD *)(v11 + 236) = v32;
  v33 = v102;
  v102 = 0;
  v34 = *(WTF::StringImpl **)(v11 + 240);
  *(_QWORD *)(v11 + 240) = v33;
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)v34 -= 2;
  }
  v35 = *(WebCore::FontCascadeFonts **)(v11 + 472);
  if (v35)
  {
    v36 = (*(_DWORD *)v35)++;
    v37 = *((_QWORD *)v35 + 14);
    if (v36)
    {
      *(_DWORD *)v35 = v36;
    }
    else
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v35, v17);
      WTF::fastFree(v52, v53);
    }
    if (v37)
    {
      v49 = *(WebCore::FontCascadeFonts **)(v11 + 472);
      v50 = (*(_DWORD *)v49)++;
      v51 = *((_QWORD *)v49 + 14);
      if (v50)
      {
        *(_DWORD *)v49 = v50;
      }
      else
      {
        WebCore::FontCascadeFonts::~FontCascadeFonts(v49, v17);
        WTF::fastFree(v61, v62);
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v51 + 64))(v51, v11 + 248);
    }
  }
  WebCore::FontCascade::operator=(v11 + 256, (uint64_t)&v104);
  v39 = *(WebCore::FontCascadeFonts **)(v11 + 472);
  if (v39)
  {
    v40 = (*(_DWORD *)v39)++;
    v41 = *((_QWORD *)v39 + 14);
    if (v40)
    {
      *(_DWORD *)v39 = v40;
    }
    else
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v39, v38);
      WTF::fastFree(v54, v55);
    }
    if (v41)
    {
      v67 = *(WebCore::FontCascadeFonts **)(v11 + 472);
      v68 = (*(_DWORD *)v67)++;
      v69 = *((_QWORD *)v67 + 14);
      if (v68)
      {
        *(_DWORD *)v67 = v68;
      }
      else
      {
        WebCore::FontCascadeFonts::~FontCascadeFonts(v67, v38);
        WTF::fastFree(v76, v77);
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v69 + 56))(v69, v11 + 248);
    }
  }
  v42 = v139;
  v139 = 0;
  v43 = *(WTF **)(v11 + 552);
  *(_QWORD *)(v11 + 552) = v42;
  if (v43)
  {
    if (*(_DWORD *)v43 == 1)
    {
      v56 = *((_QWORD *)v43 + 5);
      v57 = *((_QWORD *)v43 + 2);
      v58 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
      if (v58 != -1)
      {
        v142 = &v140;
        v141 = &v142;
        std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v141, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v56 + 56))(v56, v57, &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
      v60 = *((_QWORD *)v43 + 5);
      *((_QWORD *)v43 + 5) = 0;
      if (v60)
        (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
      WTF::fastFree(v43, v59);
    }
    else
    {
      --*(_DWORD *)v43;
    }
  }
  WebCore::CanvasRenderingContext2DBase::State::~State((WebCore::CanvasRenderingContext2DBase::State *)&v81, v38);
  v44 = *((unsigned int *)this + 28);
  if ((_DWORD)v44 != -1)
  {
    if (!(_DWORD)v44)
      goto LABEL_51;
    ((void (*)(uint64_t *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[v44])(&v81, (char *)this + 56);
  }
  *((_DWORD *)this + 28) = 0;
LABEL_51:
  *((_DWORD *)this + 178) = 0;
  v45 = *((unsigned int *)this + 198);
  if ((_DWORD)v45 != -1)
    ((void (*)(uint64_t *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore28CanvasRenderingContext2DBase25CachedContentsTransparentENS7_21CachedContentsUnknownENS7_23CachedContentsImageDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v45])(&v81, (char *)this + 720);
  *((_DWORD *)this + 198) = 0;
  *((_BYTE *)this + 812) = 0;
  *(_OWORD *)((char *)this + 696) = 0u;
  result = (*(uint64_t (**)(WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)this + 232))(this);
  if (result)
  {
    v47 = result;
    WebCore::CanvasBase::resetGraphicsContextState(*((_QWORD *)this + 4));
    v48 = (int32x2_t *)*((_QWORD *)this + 4);
    v81 = 0;
    v82 = vcvt_f32_s32(v48[1]);
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v47 + 280))(v47, &v81);
  }
  return result;
}

double WebCore::CanvasRenderingContext2DBase::clearAccumulatedDirtyRect(WebCore::CanvasRenderingContext2DBase *this)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)this + 696) = 0u;
  return result;
}

WebCore::CanvasRenderingContext2DBase::State *WebCore::CanvasRenderingContext2DBase::State::State(WebCore::CanvasRenderingContext2DBase::State *this)
{
  _DWORD *v2;
  char v3;
  _QWORD *v4;
  uint64_t v6;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0x11040000000000FFLL;
  *((_DWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0x11040000000000FFLL;
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 6) = 0x3FF0000000000000;
  *((_WORD *)this + 28) = 0;
  *((_QWORD *)this + 8) = 0x4024000000000000;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  *((_QWORD *)this + 11) = 0x1104000000000000;
  *((_QWORD *)this + 12) = 0x3FF0000000000000;
  *((_WORD *)this + 52) = 258;
  *((_OWORD *)this + 8) = unk_1969F1490;
  *((_OWORD *)this + 9) = xmmword_1969F14A0;
  *((_OWORD *)this + 7) = constinit_2;
  *((_BYTE *)this + 160) = 1;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_BYTE *)this + 192) = 1;
  *(_OWORD *)((char *)this + 196) = xmmword_1969F1460;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 27) = v6;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  *((_QWORD *)this + 30) = v6;
  *((_QWORD *)this + 31) = &off_1E33DC5F8;
  *((_QWORD *)this + 32) = 0;
  *((_DWORD *)this + 66) = 0;
  *((_QWORD *)this + 46) = 0;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 20) = 0u;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((_BYTE *)this + 369) = 1;
  *((_BYTE *)this + 376) = 0;
  v2 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v2 += 2;
  *((_QWORD *)this + 48) = v2;
  *((_WORD *)this + 196) = 0;
  *((_DWORD *)this + 99) = 2143289344;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 0;
  *((_QWORD *)this + 52) = 26216000;
  *((_WORD *)this + 212) = 257;
  *((_DWORD *)this + 107) = 0;
  *((_DWORD *)this + 108) = *((_DWORD *)this + 108) & 0x80000000 | 0xE000;
  v3 = *((_BYTE *)this + 438);
  *((_WORD *)this + 218) = 0;
  *((_BYTE *)this + 438) = v3 & 0xFC;
  v4 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v4 = 0x100000001;
  v4[1] = 0;
  *((_QWORD *)this + 55) = v4;
  *((_DWORD *)this + 112) = 0;
  *((_WORD *)this + 226) &= 0xFC00u;
  *((_DWORD *)this + 114) = 0;
  *((_WORD *)this + 230) = 4;
  *((_BYTE *)this + 462) = 0;
  *((_DWORD *)this + 116) = 0;
  *((_WORD *)this + 234) = 4;
  *((_BYTE *)this + 470) = 0;
  *(_QWORD *)((char *)this + 479) = 0;
  *((_QWORD *)this + 59) = 0;
  *((_QWORD *)this + 69) = 0;
  *(_OWORD *)((char *)this + 536) = 0u;
  *(_OWORD *)((char *)this + 520) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *(_OWORD *)((char *)this + 488) = 0u;
  return this;
}

WTF::StringImpl *WebCore::CanvasRenderingContext2DBase::State::fontString@<X0>(WebCore::CanvasRenderingContext2DBase::FontProxy **this@<X0>, void *a2@<X1>, WTF::StringImpl **a3@<X8>)
{
  int v5;
  int v6;
  const char *v7;
  size_t v8;
  const char *v9;
  size_t v10;
  WTF::StringImpl *result;
  char *v12;
  WTF::StringImpl *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  WebCore::CanvasRenderingContext2DBase::FontProxy *v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  const char *v25;
  unint64_t v26;
  const WTF::String *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WebCore::CanvasRenderingContext2DBase::FontProxy *v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  const char *v39;
  unint64_t v40;
  const WTF::String *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  WTF::StringImpl *v50;
  int v51;
  char v52;
  char __s[16];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _OWORD __src[7];
  __int128 v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  if (!WebCore::CanvasRenderingContext2DBase::FontProxy::realized(this[59], a2))
    return (WTF::StringImpl *)WTF::StringImpl::createWithoutCopyingNonEmpty();
  v49 = 0;
  v50 = 0;
  v51 = 0;
  v52 = 1;
  v5 = *((unsigned __int8 *)this + 422) << 16;
  v6 = (_DWORD)this[54] & 0x1C000000;
  if (v5)
    v7 = "italic ";
  else
    v7 = "";
  if (v5)
    v8 = 7;
  else
    v8 = 0;
  if (v6 == 0x4000000)
    v9 = "small-caps ";
  else
    v9 = "";
  if (v6 == 0x4000000)
    v10 = 11;
  else
    v10 = 0;
  WTF::numberToString();
  HIDWORD(v60) = strlen(__s);
  v12 = (char *)MEMORY[0x19AEA4824](&v49);
  if (v12)
  {
    v14 = v12;
    v65 = v57;
    v66 = v58;
    v67 = v59;
    v68 = v60;
    v61 = *(_OWORD *)__s;
    v62 = v54;
    v63 = v55;
    v64 = v56;
    if ((_DWORD)v8)
      memcpy(v12, v7, v8);
    v15 = &v14[v8];
    if ((_DWORD)v10)
      memcpy(v15, v9, v10);
    v16 = &v15[v10];
    __src[4] = v65;
    __src[5] = v66;
    __src[6] = v67;
    v70 = v68;
    __src[0] = v61;
    __src[1] = v62;
    __src[2] = v63;
    __src[3] = v64;
    v17 = HIDWORD(v68);
    if (HIDWORD(v68))
    {
      if (HIDWORD(v68) == 1)
        *v16 = __src[0];
      else
        memcpy(v16, __src, HIDWORD(v70));
    }
    *(_WORD *)&v16[v17] = 30832;
  }
  v18 = this[55];
  if (*((_DWORD *)v18 + 1))
  {
    *(_QWORD *)&v61 = 0;
    DWORD2(v61) = 0;
    LOBYTE(v19) = 1;
    BYTE12(v61) = 1;
    v20 = *((_QWORD *)v18 + 1);
    if (v20)
    {
      v21 = *(unsigned __int8 *)(v20 + 16);
      v22 = *(_QWORD *)(v20 + 8);
      LODWORD(v20) = *(_DWORD *)(v20 + 4);
      *(_QWORD *)&v61 = v22;
      v19 = (v21 >> 2) & 1;
    }
    DWORD2(v61) = v20;
    BYTE12(v61) = v19;
    if ((WTF::StringView::startsWith() & 1) == 0)
    {
      LODWORD(v26) = BYTE12(v61);
      goto LABEL_38;
    }
    if (DWORD2(v61) < 9)
      goto LABEL_92;
    v24 = DWORD2(v61) - 8;
    v23 = v24;
    if (BYTE12(v61))
    {
      if (v24 < v24)
        goto LABEL_91;
      v25 = (const char *)(v61 + 8);
      v23 = v24 | 0x100000000;
    }
    else
    {
      if (v24 < v24)
        goto LABEL_91;
      v25 = (const char *)(v61 + 16);
    }
    while (1)
    {
      *(_QWORD *)&v61 = v25;
      DWORD2(v61) = v23;
      v26 = HIDWORD(v23);
      BYTE12(v61) = BYTE4(v23);
LABEL_38:
      if ((_DWORD)v26)
        WTF::String::String();
      else
        WTF::String::String();
      WebCore::serializeFontFamily((unsigned __int8 ***)&v47, v27, &v48);
      *(_QWORD *)&__src[0] = " ";
      DWORD2(__src[0]) = 1;
      v28 = v48;
      *(_QWORD *)__s = v48;
      WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v49, (uint64_t)__src, (uint64_t *)__s);
      if (v28)
      {
        if (*(_DWORD *)v28 == 2)
          WTF::StringImpl::destroy(v28, v13);
        else
          *(_DWORD *)v28 -= 2;
      }
      v29 = v47;
      v47 = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v13);
        else
          *(_DWORD *)v29 -= 2;
      }
      v30 = this[55];
      v31 = *((unsigned int *)v30 + 1);
      if (v31 < 2)
        break;
      v32 = 2;
      while (v32 - 1 < v31)
      {
        *(_QWORD *)&v61 = 0;
        DWORD2(v61) = 0;
        LOBYTE(v33) = 1;
        BYTE12(v61) = 1;
        v34 = *((_QWORD *)v30 + v32);
        if (v34)
        {
          v35 = *(unsigned __int8 *)(v34 + 16);
          v36 = *(_QWORD *)(v34 + 8);
          LODWORD(v34) = *(_DWORD *)(v34 + 4);
          *(_QWORD *)&v61 = v36;
          v33 = (v35 >> 2) & 1;
        }
        DWORD2(v61) = v34;
        BYTE12(v61) = v33;
        if ((WTF::StringView::startsWith() & 1) != 0)
        {
          if (DWORD2(v61) < 9)
          {
            v37 = 0x100000000;
            v39 = "";
          }
          else
          {
            v38 = DWORD2(v61) - 8;
            v37 = v38;
            if (BYTE12(v61))
            {
              if (v38 < v38)
                goto LABEL_91;
              v39 = (const char *)(v61 + 8);
              v37 = v38 | 0x100000000;
            }
            else
            {
              if (v38 < v38)
                goto LABEL_91;
              v39 = (const char *)(v61 + 16);
            }
          }
          *(_QWORD *)&v61 = v39;
          DWORD2(v61) = v37;
          v40 = HIDWORD(v37);
          BYTE12(v61) = BYTE4(v37);
        }
        else
        {
          LODWORD(v40) = BYTE12(v61);
        }
        if ((_DWORD)v40)
          WTF::String::String();
        else
          WTF::String::String();
        WebCore::serializeFontFamily((unsigned __int8 ***)&v47, v41, &v48);
        *(_QWORD *)&__src[0] = ", ";
        DWORD2(__src[0]) = 2;
        v42 = v48;
        *(_QWORD *)__s = v48;
        WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>((WTF::StringBuilder *)&v49, (uint64_t)__src, (uint64_t *)__s);
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
            WTF::StringImpl::destroy(v42, v13);
          else
            *(_DWORD *)v42 -= 2;
        }
        v43 = v47;
        v47 = 0;
        if (v43)
        {
          if (*(_DWORD *)v43 == 2)
            WTF::StringImpl::destroy(v43, v13);
          else
            *(_DWORD *)v43 -= 2;
        }
        v30 = this[55];
        v31 = *((unsigned int *)v30 + 1);
        if (v32++ >= v31)
          goto LABEL_75;
      }
      __break(0xC471u);
LABEL_91:
      __break(1u);
LABEL_92:
      v23 = 0x100000000;
      v25 = "";
    }
  }
LABEL_75:
  v45 = v49;
  if (v49
    || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v49),
        WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v49),
        (v45 = v49) != 0))
  {
    *(_DWORD *)v45 += 2;
  }
  *a3 = v45;
  v46 = v50;
  v50 = 0;
  if (v46)
  {
    if (*(_DWORD *)v46 == 2)
      WTF::StringImpl::destroy(v46, v13);
    else
      *(_DWORD *)v46 -= 2;
  }
  result = v49;
  v49 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v13);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::CanvasRenderingContext2DBase::FontProxy::~FontProxy(WebCore::CanvasRenderingContext2DBase::FontProxy *this, void *a2)
{
  WebCore::FontCascadeFonts *v3;
  int v4;
  uint64_t v5;
  WebCore::FontCascadeFonts *v6;
  int v7;
  uint64_t v8;
  WTF *v9;
  void *v10;
  WTF *v11;
  void *v12;

  v3 = (WebCore::FontCascadeFonts *)*((_QWORD *)this + 28);
  if (v3)
  {
    v4 = (*(_DWORD *)v3)++;
    v5 = *((_QWORD *)v3 + 14);
    if (v4)
    {
      *(_DWORD *)v3 = v4;
    }
    else
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v3, a2);
      WTF::fastFree(v9, v10);
    }
    if (v5)
    {
      v6 = (WebCore::FontCascadeFonts *)*((_QWORD *)this + 28);
      v7 = (*(_DWORD *)v6)++;
      v8 = *((_QWORD *)v6 + 14);
      if (v7)
      {
        *(_DWORD *)v6 = v7;
      }
      else
      {
        WebCore::FontCascadeFonts::~FontCascadeFonts(v6, a2);
        WTF::fastFree(v11, v12);
      }
      (*(void (**)(uint64_t, WebCore::CanvasRenderingContext2DBase::FontProxy *))(*(_QWORD *)v8 + 64))(v8, this);
    }
  }
  WebCore::FontCascade::~FontCascade((WebCore::CanvasRenderingContext2DBase::FontProxy *)((char *)this + 8), a2);
}

{
  WebCore::CanvasRenderingContext2DBase::FontProxy::~FontProxy(this, a2);
  JUMPOUT(0x19AEA7644);
}

WebCore::CanvasRenderingContext2DBase::FontProxy *WebCore::CanvasRenderingContext2DBase::FontProxy::FontProxy(WebCore::CanvasRenderingContext2DBase::FontProxy *this, const WebCore::CanvasRenderingContext2DBase::FontProxy *a2)
{
  void *v3;
  WebCore::FontCascadeFonts *v4;
  int v5;
  uint64_t v6;
  WebCore::FontCascadeFonts *v7;
  int v8;
  uint64_t v9;
  WTF *v11;
  void *v12;
  WTF *v13;
  void *v14;

  *(_QWORD *)this = &off_1E33DC5F8;
  WebCore::FontCascade::FontCascade((WebCore::CanvasRenderingContext2DBase::FontProxy *)((char *)this + 8), (const WebCore::CanvasRenderingContext2DBase::FontProxy *)((char *)a2 + 8));
  v4 = (WebCore::FontCascadeFonts *)*((_QWORD *)this + 28);
  if (v4)
  {
    v5 = (*(_DWORD *)v4)++;
    v6 = *((_QWORD *)v4 + 14);
    if (v5)
    {
      *(_DWORD *)v4 = v5;
    }
    else
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v4, v3);
      WTF::fastFree(v11, v12);
    }
    if (v6)
    {
      v7 = (WebCore::FontCascadeFonts *)*((_QWORD *)this + 28);
      v8 = (*(_DWORD *)v7)++;
      v9 = *((_QWORD *)v7 + 14);
      if (v8)
      {
        *(_DWORD *)v7 = v8;
      }
      else
      {
        WebCore::FontCascadeFonts::~FontCascadeFonts(v7, v3);
        WTF::fastFree(v13, v14);
      }
      (*(void (**)(uint64_t, WebCore::CanvasRenderingContext2DBase::FontProxy *))(*(_QWORD *)v9 + 56))(v9, this);
    }
  }
  return this;
}

WebCore::FontCascadeFonts *WebCore::CanvasRenderingContext2DBase::FontProxy::fontsNeedUpdate(WebCore::CanvasRenderingContext2DBase::FontProxy *this, WebCore::FontSelector *a2)
{
  WebCore::FontCascadeFonts *v4;
  int v5;
  uint64_t v6;
  WebCore::FontCascadeFonts *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  WebCore *v14;
  WebCore::FontCascadeFonts *result;
  int v16;
  uint64_t v17;
  WebCore::FontCascadeFonts *v18;
  int v19;
  uint64_t v20;
  WTF *v21;
  void *v22;
  WTF *v23;
  void *v24;
  WTF *v25;
  void *v26;
  WTF *v27;
  void *v28;
  WebCore *v29;

  v4 = (WebCore::FontCascadeFonts *)*((_QWORD *)this + 28);
  if (v4)
  {
    v5 = (*(_DWORD *)v4)++;
    v6 = *((_QWORD *)v4 + 14);
    if (v5)
    {
      *(_DWORD *)v4 = v5;
      if (!v6)
        goto LABEL_7;
    }
    else
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v4, a2);
      v4 = (WebCore::FontCascadeFonts *)WTF::fastFree(v21, v22);
      if (!v6)
        goto LABEL_7;
    }
    v7 = (WebCore::FontCascadeFonts *)*((_QWORD *)this + 28);
    v8 = (*(_DWORD *)v7)++;
    v9 = *((_QWORD *)v7 + 14);
    if (v8)
    {
      *(_DWORD *)v7 = v8;
    }
    else
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v7, a2);
      WTF::fastFree(v25, v26);
    }
    v4 = (WebCore::FontCascadeFonts *)(*(uint64_t (**)(uint64_t, WebCore::CanvasRenderingContext2DBase::FontProxy *))(*(_QWORD *)v9 + 64))(v9, this);
  }
LABEL_7:
  ++*((_DWORD *)a2 + 2);
  v29 = a2;
  v10 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v10 || (v11 = *(_QWORD *)(v10 + 96)) == 0)
    v11 = WebCore::threadGlobalDataSlow(v4);
  v12 = *(_QWORD *)(v11 + 80);
  if (!v12)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v11);
    v12 = *(_QWORD *)(v11 + 80);
  }
  WebCore::FontCache::updateFontCascade(v12, (uint64_t)this + 8, &v29);
  v14 = v29;
  v29 = 0;
  if (v14)
  {
    if (*((_DWORD *)v14 + 2) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v14 + 8))(v14);
    else
      --*((_DWORD *)v14 + 2);
  }
  result = (WebCore::FontCascadeFonts *)*((_QWORD *)this + 28);
  if (result)
  {
    v16 = (*(_DWORD *)result)++;
    v17 = *((_QWORD *)result + 14);
    if (v16)
    {
      *(_DWORD *)result = v16;
      if (!v17)
        return result;
    }
    else
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(result, v13);
      result = (WebCore::FontCascadeFonts *)WTF::fastFree(v23, v24);
      if (!v17)
        return result;
    }
    v18 = (WebCore::FontCascadeFonts *)*((_QWORD *)this + 28);
    v19 = (*(_DWORD *)v18)++;
    v20 = *((_QWORD *)v18 + 14);
    if (v19)
    {
      *(_DWORD *)v18 = v19;
    }
    else
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v18, v13);
      WTF::fastFree(v27, v28);
    }
    return (WebCore::FontCascadeFonts *)(*(uint64_t (**)(uint64_t, WebCore::CanvasRenderingContext2DBase::FontProxy *))(*(_QWORD *)v20 + 56))(v20, this);
  }
  return result;
}

WebCore::CanvasRenderingContext2DBase::State *WebCore::CanvasRenderingContext2DBase::realizeSavesLoop(WebCore::CanvasRenderingContext2DBase *this)
{
  char *v2;
  WebCore::CanvasRenderingContext2DBase::State *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::CanvasRenderingContext2DBase::State *v7;
  const WebCore::CanvasRenderingContext2DBase::State *v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  WebCore::CanvasRenderingContext2DBase::State *v12;
  const WebCore::CanvasRenderingContext2DBase::State *v13;
  int v14;

  v2 = (char *)this + 120;
  result = (WebCore::CanvasRenderingContext2DBase::State *)(*(uint64_t (**)(WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)this + 224))(this);
  if (result)
  {
    v4 = (uint64_t)result;
    do
    {
      v5 = *((unsigned int *)this + 33);
      if (v5 > 0x4000)
        break;
      if (!(_DWORD)v5)
        goto LABEL_18;
      v6 = *((_QWORD *)this + 15);
      if ((_DWORD)v5 == *((_DWORD *)this + 32))
      {
        v8 = (const WebCore::CanvasRenderingContext2DBase::State *)WTF::Vector<WebCore::CanvasRenderingContext2DBase::State,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v5 + 1, v6 + 560 * v5 - 560);
        v7 = (WebCore::CanvasRenderingContext2DBase::State *)(*((_QWORD *)this + 15)
                                                            + 560 * *((unsigned int *)this + 33));
      }
      else
      {
        v7 = (WebCore::CanvasRenderingContext2DBase::State *)(v6 + 560 * v5);
        v8 = (WebCore::CanvasRenderingContext2DBase::State *)((char *)v7 - 560);
      }
      WebCore::CanvasRenderingContext2DBase::State::State(v7, v8);
      ++*((_DWORD *)this + 33);
      result = (WebCore::CanvasRenderingContext2DBase::State *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 96))(v4, 1);
      v9 = *((_DWORD *)this + 178) - 1;
      *((_DWORD *)this + 178) = v9;
    }
    while (v9);
  }
  else
  {
    v10 = *((_DWORD *)this + 33);
    while (v10 <= 0x4000)
    {
      if (!v10)
      {
LABEL_18:
        __break(0xC471u);
        return result;
      }
      v11 = *((_QWORD *)this + 15);
      if (v10 == *((_DWORD *)this + 32))
      {
        v13 = (const WebCore::CanvasRenderingContext2DBase::State *)WTF::Vector<WebCore::CanvasRenderingContext2DBase::State,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v2, v10 + 1, v11 + 560 * v10 - 560);
        v12 = (WebCore::CanvasRenderingContext2DBase::State *)(*((_QWORD *)this + 15)
                                                             + 560 * *((unsigned int *)this + 33));
      }
      else
      {
        v12 = (WebCore::CanvasRenderingContext2DBase::State *)(v11 + 560 * v10);
        v13 = (WebCore::CanvasRenderingContext2DBase::State *)((char *)v12 - 560);
      }
      result = WebCore::CanvasRenderingContext2DBase::State::State(v12, v13);
      v10 = *((_DWORD *)this + 33) + 1;
      *((_DWORD *)this + 33) = v10;
      v14 = *((_DWORD *)this + 178) - 1;
      *((_DWORD *)this + 178) = v14;
      if (!v14)
        return result;
    }
  }
  return result;
}

uint64_t WebCore::CanvasRenderingContext2DBase::restore(uint64_t this)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  void *v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v13;
  BOOL v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  float64x2_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  char v25;

  v1 = this;
  v2 = *(_DWORD *)(this + 712);
  if (v2)
  {
    *(_DWORD *)(this + 712) = v2 - 1;
  }
  else
  {
    v3 = *(_DWORD *)(this + 132);
    if (v3 >= 2)
    {
      WebCore::Path::transform((WebCore::Path *)(this + 48), (float64x2_t *)(*(_QWORD *)(this + 120) + 560 * v3 - 448));
      v5 = *(unsigned int *)(v1 + 132);
      if (!(_DWORD)v5
        || (WebCore::CanvasRenderingContext2DBase::State::~State((WebCore::CanvasRenderingContext2DBase::State *)(*(_QWORD *)(v1 + 120) + 560 * (v5 - 1)), v4), *(_DWORD *)(v1 + 132) = v5 - 1, (_DWORD)v5 == 1))
      {
        __break(0xC471u);
        JUMPOUT(0x195CDCE14);
      }
      v6 = *(double *)(*(_QWORD *)(v1 + 120) + 560 * v5 - 1008);
      v8 = *(double *)(*(_QWORD *)(v1 + 120) + 560 * v5 - 992);
      v7 = *(double *)(*(_QWORD *)(v1 + 120) + 560 * v5 - 984);
      v9 = *(double *)(*(_QWORD *)(v1 + 120) + 560 * v5 - 1000);
      v10 = v6 * v7 - v9 * v8;
      v11 = fabs(v10);
      if ((unint64_t)(*(_QWORD *)&v11 - 0x10000000000000) >> 53 <= 0x3FE
        || (unint64_t)(*(_QWORD *)&v11 - 1) <= 0xFFFFFFFFFFFFELL)
      {
        v13 = 1.0;
        if (v6 == 1.0 && v9 == 0.0 && (v8 == 0.0 ? (v14 = v7 == 1.0) : (v14 = 0), v14))
        {
          v18 = -*(double *)(*(_QWORD *)(v1 + 120) + 560 * v5 - 976);
          v19 = -*(double *)(*(_QWORD *)(v1 + 120) + 560 * v5 - 968);
          v20.f64[1] = 0.0;
          v21 = 0.0;
          v15 = 1.0;
        }
        else
        {
          v13 = v7 / v10;
          v15 = v6 / v10;
          v17 = *(double *)(*(_QWORD *)(v1 + 120) + 560 * v5 - 976);
          v16 = *(double *)(*(_QWORD *)(v1 + 120) + 560 * v5 - 968);
          v18 = (v8 * v16 - v7 * v17) / v10;
          v20.f64[1] = -v9 / v10;
          v21 = -v8 / v10;
          v19 = (v9 * v17 - v6 * v16) / v10;
        }
        v20.f64[0] = v13;
        v22 = v15;
        v23 = v18;
        v24 = v19;
        v25 = 1;
        WebCore::Path::transform((WebCore::Path *)(v1 + 48), &v20);
      }
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 224))(v1);
      if (this)
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)this + 104))(this, 1);
    }
  }
  return this;
}

WTF::StringImpl *WebCore::CanvasRenderingContext2DBase::beginLayer(WebCore::CanvasRenderingContext2DBase *this)
{
  int v2;
  unsigned int v3;
  int32x2_t *v4;
  void *v5;
  WebCore::Filter *v6;
  WebCore::Filter *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  WebCore::Filter *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  int32x2_t *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  int v28;
  WTF::StringImpl *v29;
  __n128 v30;
  WTF::StringImpl *v31;
  __n128 v32;
  __n128 v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  const WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *result;
  WebCore::Filter *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF *v61;
  WTF::StringImpl *v62;
  float32x2_t v63;
  WebCore::Filter *v64;
  char v65;
  WebCore::Filter **v66;
  WebCore::Filter *v67;

  v2 = *((_DWORD *)this + 178);
  *((_DWORD *)this + 178) = v2 + 1;
  if (v2 != -1)
  {
    WebCore::CanvasRenderingContext2DBase::realizeSavesLoop(this);
    if (*((_DWORD *)this + 178))
    {
      {
        WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl += 2;
        WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage = (uint64_t)&WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl;
      }
      v60 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 144))(*((_QWORD *)this + 4));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v60 + 248))(v60, 6, 2, &WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage, 0);
    }
  }
  v64 = 0;
  v3 = *((_DWORD *)this + 33);
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x195CDD384);
  }
  if (*(_DWORD *)(*((_QWORD *)this + 15) + 560 * v3 - 324))
  {
    v4 = (int32x2_t *)*((_QWORD *)this + 4);
    v62 = 0;
    v63 = vcvt_f32_s32(v4[1]);
    (*(void (**)(WebCore::Filter **__return_ptr, WebCore::CanvasRenderingContext2DBase *, WTF::StringImpl **))(*(_QWORD *)this + 264))(&v67, this, &v62);
    v6 = v67;
    v67 = 0;
    v7 = v64;
    v64 = v6;
    if (v7)
    {
      v8 = *((_QWORD *)v7 + 1);
      if (__ldaxr((unsigned __int8 *)v8))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v8))
      {
        goto LABEL_10;
      }
      MEMORY[0x19AEA534C](v8);
LABEL_10:
      v10 = *(_QWORD *)(v8 + 8);
      v11 = v10 - 1;
      *(_QWORD *)(v8 + 8) = v10 - 1;
      if (v10 == 1)
      {
        v58 = *(_QWORD *)(v8 + 16);
        v12 = *(_QWORD *)(v8 + 24);
        *(_QWORD *)(v8 + 24) = 0;
        v13 = v58 != 0;
      }
      else
      {
        v12 = 0;
        v13 = 1;
      }
      v14 = __ldxr((unsigned __int8 *)v8);
      if (v14 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v8))
        {
          if (v11)
            goto LABEL_22;
LABEL_18:
          if (v12)
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
          if (!v13)
            WTF::fastFree((WTF *)v8, v5);
LABEL_22:
          v15 = v67;
          v67 = 0;
          if (!v15)
            goto LABEL_39;
          v16 = *((_QWORD *)v15 + 1);
          if (__ldaxr((unsigned __int8 *)v16))
          {
            __clrex();
          }
          else if (!__stxr(1u, (unsigned __int8 *)v16))
          {
            goto LABEL_27;
          }
          MEMORY[0x19AEA534C](v16);
LABEL_27:
          v18 = *(_QWORD *)(v16 + 8);
          v19 = v18 - 1;
          *(_QWORD *)(v16 + 8) = v18 - 1;
          if (v18 == 1)
          {
            v59 = *(_QWORD *)(v16 + 16);
            v20 = *(_QWORD *)(v16 + 24);
            *(_QWORD *)(v16 + 24) = 0;
            v21 = v59 != 0;
          }
          else
          {
            v20 = 0;
            v21 = 1;
          }
          v22 = __ldxr((unsigned __int8 *)v16);
          if (v22 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v16))
            {
              if (v19)
                goto LABEL_39;
LABEL_35:
              if (v20)
                (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
              if (!v21)
                WTF::fastFree((WTF *)v16, v5);
              goto LABEL_39;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v16);
          if (v19)
            goto LABEL_39;
          goto LABEL_35;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v8);
      if (v11)
        goto LABEL_22;
      goto LABEL_18;
    }
  }
LABEL_39:
  v23 = (int32x2_t *)*((_QWORD *)this + 4);
  v62 = 0;
  v63 = vcvt_f32_s32(v23[1]);
  WebCore::CanvasLayerContextSwitcher::create(this, (const WebCore::FloatRect *)&v62, &v64, (uint64_t *)&v61);
  v24 = *((_DWORD *)this + 33);
  if (!v24)
  {
    __break(0xC471u);
    JUMPOUT(0x195CDD38CLL);
  }
  v25 = *((_QWORD *)this + 15) + 560 * v24;
  v26 = (uint64_t)v61;
  v61 = 0;
  v27 = *(WTF **)(v25 - 8);
  *(_QWORD *)(v25 - 8) = v26;
  if (v27)
  {
    v28 = *(_DWORD *)v27 - 1;
    if (*(_DWORD *)v27 != 1)
    {
LABEL_42:
      *(_DWORD *)v27 = v28;
      goto LABEL_43;
    }
    v47 = *((_QWORD *)v27 + 5);
    v48 = *((_QWORD *)v27 + 2);
    v49 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v49 != -1)
    {
      v67 = (WebCore::Filter *)&v65;
      v66 = &v67;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v66, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v47 + 56))(v47, v48, &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
    v51 = *((_QWORD *)v27 + 5);
    *((_QWORD *)v27 + 5) = 0;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
    WTF::fastFree(v27, v50);
    v27 = v61;
    v61 = 0;
    if (v27)
    {
      v28 = *(_DWORD *)v27 - 1;
      if (*(_DWORD *)v27 != 1)
        goto LABEL_42;
      v52 = *((_QWORD *)v27 + 5);
      v53 = *((_QWORD *)v27 + 2);
      v54 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
      if (v54 != -1)
      {
        v67 = (WebCore::Filter *)&v65;
        v66 = &v67;
        std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v66, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v52 + 56))(v52, v53, &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
      v56 = *((_QWORD *)v27 + 5);
      *((_QWORD *)v27 + 5) = 0;
      if (v56)
        (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
      WTF::fastFree(v27, v55);
    }
  }
LABEL_43:
  WebCore::CanvasRenderingContext2DBase::setGlobalAlpha((uint64_t)this, 1.0);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::CanvasRenderingContext2DBase::setGlobalCompositeOperation(this, (const WTF::String *)&v62);
  v31 = v62;
  v62 = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v29);
    else
      *(_DWORD *)v31 -= 2;
  }
  v30.n128_u32[0] = 0;
  WebCore::CanvasRenderingContext2DBase::setShadowOffsetX((uint64_t)this, v30);
  v32.n128_u32[0] = 0;
  WebCore::CanvasRenderingContext2DBase::setShadowOffsetY((uint64_t)this, v32);
  v33.n128_u32[0] = 0;
  WebCore::CanvasRenderingContext2DBase::setShadowBlur((uint64_t)this, v33);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::CanvasRenderingContext2DBase::setShadowColor((const WTF::String **)this, (unsigned int **)&v62);
  v35 = v62;
  v62 = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v34);
    else
      *(_DWORD *)v35 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::CanvasRenderingContext2DBase::setFilterString(this, &v62, v36);
  result = v62;
  v62 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v37);
    else
      *(_DWORD *)result -= 2;
  }
  v39 = v64;
  v64 = 0;
  if (v39)
  {
    v40 = *((_QWORD *)v39 + 1);
    if (__ldaxr((unsigned __int8 *)v40))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v40))
    {
      goto LABEL_57;
    }
    result = (WTF::StringImpl *)MEMORY[0x19AEA534C](v40);
LABEL_57:
    v42 = *(_QWORD *)(v40 + 8);
    v43 = v42 - 1;
    *(_QWORD *)(v40 + 8) = v42 - 1;
    if (v42 == 1)
    {
      v57 = *(_QWORD *)(v40 + 16);
      v44 = *(_QWORD *)(v40 + 24);
      *(_QWORD *)(v40 + 24) = 0;
      v45 = v57 != 0;
    }
    else
    {
      v44 = 0;
      v45 = 1;
    }
    v46 = __ldxr((unsigned __int8 *)v40);
    if (v46 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v40))
      {
        if (v43)
          return result;
LABEL_65:
        if (v44)
          result = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
        if (!v45)
          return (WTF::StringImpl *)WTF::fastFree((WTF *)v40, v37);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v40);
    if (v43)
      return result;
    goto LABEL_65;
  }
  return result;
}

uint64_t WebCore::CanvasRenderingContext2DBase::setGlobalAlpha(uint64_t this, double a2)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  float v7;

  if (a2 >= 0.0 && a2 <= 1.0)
  {
    v4 = this;
    v5 = *(_DWORD *)(this + 132);
    if (!v5)
      goto LABEL_13;
    if (*(double *)(*(_QWORD *)(this + 120) + 560 * v5 - 464) == a2)
      return this;
    WebCore::CanvasRenderingContext2DBase::realizeSaves((WebCore::CanvasRenderingContext2DBase::State *)this);
    v6 = *(_DWORD *)(v4 + 132);
    if (!v6)
    {
LABEL_13:
      __break(0xC471u);
      JUMPOUT(0x195CDD490);
    }
    *(double *)(*(_QWORD *)(v4 + 120) + 560 * v6 - 464) = a2;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 240))(v4);
    if (this)
    {
      v7 = a2;
      if (*(float *)(this + 336) != v7)
      {
        *(float *)(this + 336) = v7;
        *(_DWORD *)(this + 184) |= 0x100u;
      }
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)this + 88))(this, this + 8);
    }
  }
  return this;
}

uint64_t WebCore::CanvasRenderingContext2DBase::setGlobalCompositeOperation(WebCore::CanvasRenderingContext2DBase *this, const WTF::String *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  unsigned __int8 v13;
  unsigned __int8 v14;

  v14 = 2;
  v13 = 1;
  result = WebCore::parseCompositeAndBlendOperator(a2, (char *)&v14, (char *)&v13);
  if ((_DWORD)result)
  {
    v4 = *((unsigned int *)this + 33);
    if (!(_DWORD)v4)
    {
      __break(0xC471u);
      JUMPOUT(0x195CDD610);
    }
    v5 = v4 - 1;
    v6 = *((_QWORD *)this + 15);
    v7 = v14;
    if (*(unsigned __int8 *)(v6 + 560 * v5 + 104) != v14 || *(unsigned __int8 *)(v6 + 560 * v5 + 105) != v13)
    {
      if (*((_DWORD *)this + 178))
      {
        WebCore::CanvasRenderingContext2DBase::realizeSavesLoop(this);
        if (*((_DWORD *)this + 178))
        {
          {
            WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl += 2;
            WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage = (uint64_t)&WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl;
          }
          v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 144))(*((_QWORD *)this + 4));
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v12 + 248))(v12, 6, 2, &WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage, 0);
        }
      }
      v8 = *((_DWORD *)this + 33);
      if (!v8)
      {
        __break(0xC471u);
        JUMPOUT(0x195CDD618);
      }
      v9 = *((_QWORD *)this + 15) + 560 * v8 - 560;
      *(_BYTE *)(v9 + 104) = v7;
      v10 = v13;
      *(_BYTE *)(v9 + 105) = v13;
      result = (*(uint64_t (**)(WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)this + 240))(this);
      if (result)
      {
        if (*(unsigned __int8 *)(result + 194) != v7 || *(unsigned __int8 *)(result + 195) != v10)
        {
          *(_WORD *)(result + 194) = v7 | ((_WORD)v10 << 8);
          *(_DWORD *)(result + 184) |= 0x20u;
        }
        return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 88))(result, result + 8);
      }
    }
  }
  return result;
}

uint64_t WebCore::CanvasRenderingContext2DBase::setShadowOffsetX(uint64_t this, __n128 a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned __int32 v5;
  uint64_t v6;

  if ((a2.n128_u32[0] & 0x7FFFFFFF) <= 0x7F7FFFFF)
  {
    v2 = *(_DWORD *)(this + 132);
    if (!v2)
    {
      __break(0xC471u);
      JUMPOUT(0x195CDD740);
    }
    if (*(float *)(*(_QWORD *)(this + 120) + 560 * v2 - 488) != a2.n128_f32[0])
    {
      if (*(_DWORD *)(this + 712))
      {
        v6 = this;
        v5 = a2.n128_u32[0];
        WebCore::CanvasRenderingContext2DBase::realizeSavesLoop((WebCore::CanvasRenderingContext2DBase *)this);
        a2.n128_u32[0] = v5;
        this = v6;
        if (*(_DWORD *)(v6 + 712))
        {
          {
            WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl += 2;
            WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage = (uint64_t)&WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl;
          }
          v4 = (*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(v6 + 32) + 144))(*(_QWORD *)(v6 + 32), a2);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v4 + 248))(v4, 6, 2, &WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage, 0);
          this = v6;
          a2.n128_u32[0] = v5;
        }
      }
      v3 = *(_DWORD *)(this + 132);
      if (!v3)
      {
        __break(0xC471u);
        JUMPOUT(0x195CDD748);
      }
      *(_DWORD *)(*(_QWORD *)(this + 120) + 560 * v3 - 488) = a2.n128_u32[0];
      return WebCore::CanvasRenderingContext2DBase::applyShadow((WebCore::CanvasRenderingContext2DBase *)this);
    }
  }
  return this;
}

uint64_t WebCore::CanvasRenderingContext2DBase::setShadowOffsetY(uint64_t this, __n128 a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned __int32 v5;
  uint64_t v6;

  if ((a2.n128_u32[0] & 0x7FFFFFFF) <= 0x7F7FFFFF)
  {
    v2 = *(_DWORD *)(this + 132);
    if (!v2)
    {
      __break(0xC471u);
      JUMPOUT(0x195CDD870);
    }
    if (*(float *)(*(_QWORD *)(this + 120) + 560 * v2 - 484) != a2.n128_f32[0])
    {
      if (*(_DWORD *)(this + 712))
      {
        v6 = this;
        v5 = a2.n128_u32[0];
        WebCore::CanvasRenderingContext2DBase::realizeSavesLoop((WebCore::CanvasRenderingContext2DBase *)this);
        a2.n128_u32[0] = v5;
        this = v6;
        if (*(_DWORD *)(v6 + 712))
        {
          {
            WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl += 2;
            WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage = (uint64_t)&WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl;
          }
          v4 = (*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(v6 + 32) + 144))(*(_QWORD *)(v6 + 32), a2);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v4 + 248))(v4, 6, 2, &WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage, 0);
          this = v6;
          a2.n128_u32[0] = v5;
        }
      }
      v3 = *(_DWORD *)(this + 132);
      if (!v3)
      {
        __break(0xC471u);
        JUMPOUT(0x195CDD878);
      }
      *(_DWORD *)(*(_QWORD *)(this + 120) + 560 * v3 - 484) = a2.n128_u32[0];
      return WebCore::CanvasRenderingContext2DBase::applyShadow((WebCore::CanvasRenderingContext2DBase *)this);
    }
  }
  return this;
}

uint64_t WebCore::CanvasRenderingContext2DBase::setShadowBlur(uint64_t this, __n128 a2)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned __int32 v8;
  uint64_t v9;

  if (a2.n128_i32[0] > -1 && ((a2.n128_u32[0] & 0x7FFFFFFF) - 0x800000) >> 24 < 0x7F
    || a2.n128_u32[0] - 1 < 0x7FFFFF
    || (a2.n128_u32[0] & 0x7FFFFFFF) == 0)
  {
    v5 = *(_DWORD *)(this + 132);
    if (!v5)
    {
      __break(0xC471u);
      JUMPOUT(0x195CDD9BCLL);
    }
    if (*(float *)(*(_QWORD *)(this + 120) + 560 * v5 - 480) != a2.n128_f32[0])
    {
      if (*(_DWORD *)(this + 712))
      {
        v9 = this;
        v8 = a2.n128_u32[0];
        WebCore::CanvasRenderingContext2DBase::realizeSavesLoop((WebCore::CanvasRenderingContext2DBase *)this);
        a2.n128_u32[0] = v8;
        this = v9;
        if (*(_DWORD *)(v9 + 712))
        {
          {
            WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl += 2;
            WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage = (uint64_t)&WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl;
          }
          v7 = (*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(v9 + 32) + 144))(*(_QWORD *)(v9 + 32), a2);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v7 + 248))(v7, 6, 2, &WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage, 0);
          this = v9;
          a2.n128_u32[0] = v8;
        }
      }
      v6 = *(_DWORD *)(this + 132);
      if (!v6)
      {
        __break(0xC471u);
        JUMPOUT(0x195CDD9C4);
      }
      *(_DWORD *)(*(_QWORD *)(this + 120) + 560 * v6 - 480) = a2.n128_u32[0];
      return WebCore::CanvasRenderingContext2DBase::applyShadow((WebCore::CanvasRenderingContext2DBase *)this);
    }
  }
  return this;
}

void WebCore::CanvasRenderingContext2DBase::setShadowColor(const WTF::String **this, unsigned int **a2)
{
  void *v3;
  unint64_t v4;
  unsigned int v5;
  unint64_t v6;
  unsigned int v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  BOOL v20;
  unint64_t *v21;
  unint64_t v22;

  WebCore::parseColor(a2, this[4], (uint64_t *)&v22);
  v4 = v22;
  if ((v22 & 0x4000000000000) != 0)
  {
    v5 = *((_DWORD *)this + 33);
    if (!v5)
    {
      __break(0xC471u);
      JUMPOUT(0x195CDDC9CLL);
    }
    v6 = *((_QWORD *)this[15] + 70 * v5 - 59);
    if ((v6 & 0x8000000000000) != 0)
    {
      if ((v22 & 0x8000000000000) == 0
        || *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 4)
        || *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 8)
        || *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 0xC)
        || *(float *)((v6 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 0x10)
        || HIBYTE(v6) != HIBYTE(v22)
        || BYTE6(v6) != BYTE6(v22))
      {
LABEL_6:
        if (*((_DWORD *)this + 178))
        {
          WebCore::CanvasRenderingContext2DBase::realizeSavesLoop((WebCore::CanvasRenderingContext2DBase *)this);
          if (*((_DWORD *)this + 178))
          {
            {
              WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl += 2;
              WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage = (uint64_t)&WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl;
            }
            v14 = (*(uint64_t (**)(const WTF::String *))(*(_QWORD *)this[4] + 144))(this[4]);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v14 + 248))(v14, 6, 2, &WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage, 0);
          }
        }
        v7 = *((_DWORD *)this + 33);
        if (!v7)
        {
          __break(0xC471u);
          JUMPOUT(0x195CDDCA4);
        }
        v8 = (unint64_t *)((char *)this[15] + 560 * v7 - 472);
        v9 = *v8;
        if ((*v8 & 0x8000000000000) != 0)
        {
          if ((v22 & 0x8000000000000) == 0
            || *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 4)
            || *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 8)
            || *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 0xC)
            || *(float *)((v9 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 0x10)
            || HIBYTE(v9) != HIBYTE(v22)
            || BYTE6(v9) != BYTE6(v22))
          {
            v21 = v8;
            v18 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
            do
            {
              v19 = __ldaxr(v18);
              v20 = --v19 == 0;
            }
            while (__stlxr(v19, v18));
            v8 = v21;
            if (v20)
            {
              atomic_store(1u, v18);
              WTF::fastFree((WTF *)v18, v3);
              v8 = v21;
            }
            goto LABEL_13;
          }
        }
        else if (v9 != v22 || (v22 & 0x8000000000000) != 0)
        {
LABEL_13:
          v11 = v22;
          *v8 = v22;
          if ((v11 & 0x8000000000000) != 0)
          {
            v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 + 1, v12));
          }
        }
        WebCore::CanvasRenderingContext2DBase::applyShadow((WebCore::CanvasRenderingContext2DBase *)this);
        v4 = v22;
      }
    }
    else if ((v22 & 0x8000000000000) != 0 || v6 != v22)
    {
      goto LABEL_6;
    }
  }
  if ((v4 & 0x8000000000000) != 0)
  {
    v15 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
    {
      v16 = __ldaxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
    {
      atomic_store(1u, v15);
      WTF::fastFree((WTF *)v15, v3);
    }
  }
}

uint64_t WebCore::CanvasRenderingContext2DBase::setFilterString(WebCore::CanvasRenderingContext2DBase *this, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  unsigned int v3;
  uint64_t result;
  WTF::StringImpl *v7;
  unsigned int v8;
  WTF::StringImpl **v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  WTF *v17;
  WTF *v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int **v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  WTF *v30;
  int v31;
  unsigned int v32;
  char v33;

  v3 = *((_DWORD *)this + 33);
  if (!v3)
  {
    __break(0xC471u);
    JUMPOUT(0x195CDDF74);
  }
  result = WTF::equal(*(WTF **)(*((_QWORD *)this + 15) + 560 * v3 - 344), *a2, a3);
  if ((result & 1) == 0)
  {
    result = (uint64_t)*a2;
    if (*a2)
    {
      if (*(_DWORD *)(result + 4))
      {
        result = MEMORY[0x19AEA53F4]();
        if ((result & 1) == 0)
        {
          result = MEMORY[0x19AEA53F4](*a2, "undefined", 9);
          if ((result & 1) == 0)
          {
            result = (uint64_t)(*(_QWORD *(**)(WTF **__return_ptr, WebCore::CanvasRenderingContext2DBase *, const WTF::StringImpl **))(*(_QWORD *)this + 256))(&v30, this, a2);
            if (v33)
            {
              if (*((_DWORD *)this + 178))
              {
                WebCore::CanvasRenderingContext2DBase::realizeSavesLoop(this);
                if (*((_DWORD *)this + 178))
                {
                  {
                    WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl += 2;
                    WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage = (uint64_t)&WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl;
                  }
                  v29 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 144))(*((_QWORD *)this + 4));
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v29 + 248))(v29, 6, 2, &WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage, 0);
                }
              }
              v8 = *((_DWORD *)this + 33);
              if (v8)
              {
                v9 = (WTF::StringImpl **)(*((_QWORD *)this + 15) + 560 * v8 - 344);
                v10 = *a2;
                if (*a2)
                  *(_DWORD *)v10 += 2;
                v11 = *v9;
                *v9 = v10;
                if (v11)
                {
                  if (*(_DWORD *)v11 == 2)
                    WTF::StringImpl::destroy(v11, v7);
                  else
                    *(_DWORD *)v11 -= 2;
                }
                if (v33)
                {
                  v12 = *((_DWORD *)this + 33);
                  if (v12)
                  {
                    v13 = *((_QWORD *)this + 15) + 560 * v12;
                    v14 = v13 - 336;
                    v15 = *(unsigned int *)(v13 - 324);
                    if ((_DWORD)v15)
                    {
                      v23 = *(unsigned int ***)v14;
                      v24 = *(_QWORD *)v14 + 8 * v15;
                      do
                      {
                        v25 = *v23;
                        *v23 = 0;
                        if (v25)
                        {
                          v26 = v25 + 2;
                          do
                          {
                            v27 = __ldaxr(v26);
                            v28 = v27 - 1;
                          }
                          while (__stlxr(v28, v26));
                          if (!v28)
                          {
                            atomic_store(1u, v25 + 2);
                            (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 8))(v25);
                          }
                        }
                        ++v23;
                      }
                      while (v23 != (unsigned int **)v24);
                    }
                    result = *(_QWORD *)v14;
                    if (*(_QWORD *)v14)
                    {
                      *(_QWORD *)v14 = 0;
                      *(_DWORD *)(v14 + 8) = 0;
                      result = WTF::fastFree((WTF *)result, v7);
                    }
                    v16 = v30;
                    v30 = 0;
                    *(_QWORD *)v14 = v16;
                    LODWORD(v16) = v31;
                    v31 = 0;
                    *(_DWORD *)(v14 + 8) = (_DWORD)v16;
                    LODWORD(v16) = v32;
                    v32 = 0;
                    *(_DWORD *)(v14 + 12) = (_DWORD)v16;
                    if (v33)
                    {
                      if (v32)
                      {
                        v17 = v30;
                        v18 = (WTF *)((char *)v30 + 8 * v32);
                        do
                        {
                          v19 = *(unsigned int **)v17;
                          *(_QWORD *)v17 = 0;
                          if (v19)
                          {
                            v20 = v19 + 2;
                            do
                            {
                              v21 = __ldaxr(v20);
                              v22 = v21 - 1;
                            }
                            while (__stlxr(v22, v20));
                            if (!v22)
                            {
                              atomic_store(1u, v19 + 2);
                              (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
                            }
                          }
                          v17 = (WTF *)((char *)v17 + 8);
                        }
                        while (v17 != v18);
                      }
                      result = (uint64_t)v30;
                      if (v30)
                      {
                        v30 = 0;
                        v31 = 0;
                        return WTF::fastFree((WTF *)result, v7);
                      }
                    }
                    return result;
                  }
LABEL_49:
                  __break(0xC471u);
                  JUMPOUT(0x195CDDF84);
                }
              }
              else
              {
                __break(0xC471u);
              }
              __break(1u);
              goto LABEL_49;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::CanvasRenderingContext2DBase::endLayer(int32x2_t **this)
{
  int32x2_t *v2;
  uint64_t v4;
  float32x4_t v5;
  char v6;

  if (*((_DWORD *)this + 178))
  {
    WebCore::CanvasRenderingContext2DBase::realizeSavesLoop((WebCore::CanvasRenderingContext2DBase *)this);
    if (*((_DWORD *)this + 178))
    {
      {
        WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl += 2;
        WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage = (uint64_t)&WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl;
      }
      v4 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)this[4] + 144))(this[4]);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v4 + 248))(v4, 6, 2, &WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage, 0);
    }
  }
  WebCore::CanvasRenderingContext2DBase::restore((uint64_t)this);
  v2 = this[4];
  v5.i64[0] = 0;
  *(float32x2_t *)&v5.u32[2] = vcvt_f32_s32(v2[1]);
  v6 = 1;
  return WebCore::CanvasRenderingContext2DBase::didDraw((uint64_t)this, &v5, 0xFu);
}

uint64_t WebCore::CanvasRenderingContext2DBase::setStrokeStyle(uint64_t this, _DWORD *a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  WebCore::Pattern *v24;
  WTF *v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v2 = *(_DWORD *)(this + 132);
  if (!v2)
  {
    __break(0xC471u);
    JUMPOUT(0x195CDE324);
  }
  v4 = this;
  v5 = *(_QWORD *)(this + 120) + 560 * v2;
  v6 = a2[2];
  if (*(_DWORD *)(v5 - 536) | v6)
    goto LABEL_9;
  v7 = (_QWORD *)(v5 - 544);
  v8 = *(_QWORD *)(v5 - 544);
  v9 = *(_QWORD *)a2;
  if ((v8 & 0x8000000000000) != 0)
  {
    if ((v9 & 0x8000000000000) != 0)
    {
      v28 = *(_OWORD *)((v8 & 0xFFFFFFFFFFFFLL) + 4);
      v27 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFLL) + 4);
      this = WebCore::operator==<float,4ul>((float *)&v28, (float *)&v27);
      if ((_DWORD)this)
      {
        if (HIBYTE(*v7) == HIBYTE(*(_QWORD *)a2)
          && BYTE6(*v7) == BYTE6(*(_QWORD *)a2))
        {
          return this;
        }
      }
    }
    goto LABEL_8;
  }
  if (v8 != v9 || (v9 & 0x8000000000000) != 0)
  {
LABEL_8:
    v6 = a2[2];
LABEL_9:
    if (v6 == 2)
      goto LABEL_31;
    v11 = (_QWORD *)(v4 + 32);
    while (1)
    {
      if (*(_DWORD *)(v4 + 712))
      {
        WebCore::CanvasRenderingContext2DBase::realizeSavesLoop((WebCore::CanvasRenderingContext2DBase *)v4);
        if (*(_DWORD *)(v4 + 712))
        {
          {
            WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl += 2;
            WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage = (uint64_t)&WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl;
          }
          v20 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v11 + 144))(*v11);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v20 + 248))(v20, 6, 2, &WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage, 0);
        }
      }
      v12 = *(_DWORD *)(v4 + 132);
      if (!v12)
      {
        __break(0xC471u);
        JUMPOUT(0x195CDE32CLL);
      }
      v13 = *(_QWORD *)(v4 + 120) + 560 * v12;
      v14 = (uint64_t *)(v13 - 560);
      v15 = v13 - 544;
      v16 = *(unsigned int *)(v13 - 536);
      v17 = a2[2];
      if ((_DWORD)v16 == -1)
      {
        if ((_DWORD)v17 != -1)
        {
LABEL_15:
          *(_QWORD *)&v28 = v15;
          ((void (*)(__int128 *, uint64_t, _DWORD *))*(&off_1E33DC6E0 + v17))(&v28, v15, a2);
        }
      }
      else
      {
        if ((_DWORD)v17 != -1)
          goto LABEL_15;
        ((void (*)(__int128 *, uint64_t))off_1E33DC6C8[v16])(&v28, v15);
        *(_DWORD *)(v15 + 8) = -1;
      }
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 240))(v4);
      if (!this)
        return this;
      *(_QWORD *)&v28 = this;
      *((_QWORD *)&v28 + 1) = this;
      v29 = this;
      v18 = *(unsigned int *)(v15 + 8);
      if ((_DWORD)v18 != -1)
      {
        *(_QWORD *)&v27 = &v28;
        ((void (*)(__int128 *, uint64_t))off_1E33DC928[v18])(&v27, v15);
        this = *v14;
        *v14 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            return WTF::StringImpl::destroy((WTF::StringImpl *)this, v19);
          else
            *(_DWORD *)this -= 2;
        }
        return this;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_31:
      v21 = *(_QWORD *)a2;
      v22 = **(_DWORD **)a2;
      **(_DWORD **)a2 = v22 + 1;
      v23 = *(_QWORD *)(v4 + 32);
      v11 = (_QWORD *)(v4 + 32);
      if (*(_BYTE *)(v23 + 72) && !*(_BYTE *)(v21 + 16))
        *(_BYTE *)(v23 + 72) = 0;
      if (v22)
      {
        *(_DWORD *)v21 = v22;
      }
      else
      {
        v24 = *(WebCore::Pattern **)(v21 + 8);
        *(_QWORD *)(v21 + 8) = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 1)
          {
            WebCore::Pattern::~Pattern(v24);
            WTF::fastFree(v25, v26);
          }
          else
          {
            --*(_DWORD *)v24;
          }
        }
        WTF::fastFree((WTF *)v21, a2);
      }
    }
  }
  return this;
}

uint64_t WebCore::CanvasRenderingContext2DBase::setStrokeStyle(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  WTF *v8;
  _QWORD *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  WTF *v19;
  int v20;
  uint64_t v21;
  WebCore::Pattern *v22;
  WTF *v23;
  void *v24;
  WTF *v25;
  unsigned int v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  if (*(_BYTE *)(a2 + 16))
  {
    v2 = a2;
    v3 = this;
    LOBYTE(v25) = 0;
    v26 = -1;
    v4 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v4 != -1)
    {
      this = ((uint64_t (*)(__int128 *, WTF **, uint64_t))off_1E33DC6F8[v4])(&v28, &v25, a2);
      v26 = v4;
    }
    v5 = *(_DWORD *)(v3 + 132);
    if (!v5)
    {
      __break(0xC471u);
      JUMPOUT(0x195CDE658);
    }
    v6 = *(_QWORD *)(v3 + 120) + 560 * v5;
    if (*(_DWORD *)(v6 - 536) | v4)
      goto LABEL_12;
    v7 = (_QWORD *)(v6 - 544);
    v8 = *(WTF **)(v6 - 544);
    if (((unint64_t)v8 & 0x8000000000000) != 0)
    {
      if (((unint64_t)v25 & 0x8000000000000) != 0)
      {
        v28 = *(_OWORD *)(((unint64_t)v8 & 0xFFFFFFFFFFFFLL) + 4);
        v27 = *(_OWORD *)(((unint64_t)v25 & 0xFFFFFFFFFFFFLL) + 4);
        this = WebCore::operator==<float,4ul>((float *)&v28, (float *)&v27);
        if ((_DWORD)this)
        {
          if (HIBYTE(*v7) == (unint64_t)v25 >> 56 && BYTE6(*v7) == BYTE6(v25))
            goto LABEL_24;
        }
      }
      goto LABEL_11;
    }
    if (v8 != v25 || ((unint64_t)v25 & 0x8000000000000) != 0)
    {
LABEL_11:
      LODWORD(v4) = v26;
LABEL_12:
      if ((_DWORD)v4 == 2)
        goto LABEL_36;
      v10 = (_QWORD *)(v3 + 32);
      while (1)
      {
        if (*(_DWORD *)(v3 + 712))
        {
          WebCore::CanvasRenderingContext2DBase::realizeSavesLoop((WebCore::CanvasRenderingContext2DBase *)v3);
          if (*(_DWORD *)(v3 + 712))
          {
            {
              WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl += 2;
              WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage = (uint64_t)&WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl;
            }
            v18 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v10 + 144))(*v10);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v18 + 248))(v18, 6, 2, &WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage, 0);
          }
        }
        v11 = *(_DWORD *)(v3 + 132);
        if (!v11)
        {
          __break(0xC471u);
          JUMPOUT(0x195CDE660);
        }
        v12 = *(_QWORD *)(v3 + 120) + 560 * v11;
        v13 = (uint64_t *)(v12 - 560);
        v14 = v12 - 544;
        v15 = *(unsigned int *)(v12 - 536);
        if ((_DWORD)v15 == -1)
        {
          if (v26 != -1)
          {
LABEL_18:
            *(_QWORD *)&v28 = v12 - 544;
            ((void (*)(__int128 *, uint64_t, WTF **))*(&off_1E33DC6E0 + v26))(&v28, v14, &v25);
          }
        }
        else
        {
          if (v26 != -1)
            goto LABEL_18;
          ((void (*)(__int128 *, uint64_t, uint64_t))off_1E33DC6C8[v15])(&v28, v14, v2);
          *(_DWORD *)(v14 + 8) = -1;
        }
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 240))(v3);
        if (!this)
          break;
        *(_QWORD *)&v28 = this;
        *((_QWORD *)&v28 + 1) = this;
        v29 = this;
        v16 = *(unsigned int *)(v14 + 8);
        if ((_DWORD)v16 != -1)
        {
          *(_QWORD *)&v27 = &v28;
          ((void (*)(__int128 *, uint64_t))off_1E33DC928[v16])(&v27, v14);
          this = *v13;
          *v13 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v17);
            else
              *(_DWORD *)this -= 2;
          }
          break;
        }
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_36:
        v19 = v25;
        v20 = (*(_DWORD *)v25)++;
        v21 = *(_QWORD *)(v3 + 32);
        v10 = (_QWORD *)(v3 + 32);
        if (*(_BYTE *)(v21 + 72) && !*((_BYTE *)v19 + 16))
          *(_BYTE *)(v21 + 72) = 0;
        if (v20)
        {
          *(_DWORD *)v19 = v20;
        }
        else
        {
          v22 = (WebCore::Pattern *)*((_QWORD *)v19 + 1);
          *((_QWORD *)v19 + 1) = 0;
          if (v22)
          {
            if (*(_DWORD *)v22 == 1)
            {
              WebCore::Pattern::~Pattern(v22);
              WTF::fastFree(v23, v24);
            }
            else
            {
              --*(_DWORD *)v22;
            }
          }
          WTF::fastFree(v19, (void *)a2);
        }
      }
    }
LABEL_24:
    if (v26 != -1)
      return ((uint64_t (*)(__int128 *, WTF **))off_1E33DC6C8[v26])(&v28, &v25);
  }
  return this;
}

uint64_t WebCore::CanvasRenderingContext2DBase::setFillStyle(uint64_t this, _DWORD *a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  WebCore::Pattern *v26;
  WTF *v27;
  void *v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v2 = *(_DWORD *)(this + 132);
  if (!v2)
  {
    __break(0xC471u);
    JUMPOUT(0x195CDE940);
  }
  v4 = this;
  v5 = *(_QWORD *)(this + 120) + 560 * v2;
  v6 = a2[2];
  if (*(_DWORD *)(v5 - 520) | v6)
    goto LABEL_9;
  v7 = (_QWORD *)(v5 - 528);
  v8 = *(_QWORD *)(v5 - 528);
  v9 = *(_QWORD *)a2;
  if ((v8 & 0x8000000000000) != 0)
  {
    if ((v9 & 0x8000000000000) != 0)
    {
      v30 = *(_OWORD *)((v8 & 0xFFFFFFFFFFFFLL) + 4);
      v29 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFLL) + 4);
      this = WebCore::operator==<float,4ul>((float *)&v30, (float *)&v29);
      if ((_DWORD)this)
      {
        if (HIBYTE(*v7) == HIBYTE(*(_QWORD *)a2)
          && BYTE6(*v7) == BYTE6(*(_QWORD *)a2))
        {
          return this;
        }
      }
    }
    goto LABEL_8;
  }
  if (v8 != v9 || (v9 & 0x8000000000000) != 0)
  {
LABEL_8:
    v6 = a2[2];
LABEL_9:
    if (v6 == 2)
      goto LABEL_31;
    v11 = (_QWORD *)(v4 + 32);
    while (1)
    {
      if (*(_DWORD *)(v4 + 712))
      {
        WebCore::CanvasRenderingContext2DBase::realizeSavesLoop((WebCore::CanvasRenderingContext2DBase *)v4);
        if (*(_DWORD *)(v4 + 712))
        {
          {
            WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl += 2;
            WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage = (uint64_t)&WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl;
          }
          v22 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v11 + 144))(*v11);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v22 + 248))(v22, 6, 2, &WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage, 0);
        }
      }
      v12 = *(unsigned int *)(v4 + 132);
      if (!(_DWORD)v12)
      {
        __break(0xC471u);
        JUMPOUT(0x195CDE948);
      }
      v13 = v12 - 1;
      v14 = *(_QWORD *)(v4 + 120);
      v15 = v14 + 560 * (v12 - 1);
      v16 = v15 + 32;
      v17 = *(unsigned int *)(v15 + 40);
      v18 = a2[2];
      if ((_DWORD)v17 == -1)
      {
        if ((_DWORD)v18 != -1)
        {
LABEL_15:
          *(_QWORD *)&v30 = v16;
          ((void (*)(__int128 *, uint64_t, _DWORD *))*(&off_1E33DC6E0 + v18))(&v30, v16, a2);
        }
      }
      else
      {
        if ((_DWORD)v18 != -1)
          goto LABEL_15;
        ((void (*)(__int128 *, uint64_t))off_1E33DC6C8[v17])(&v30, v16);
        *(_DWORD *)(v16 + 8) = -1;
      }
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 240))(v4);
      if (!this)
        return this;
      *(_QWORD *)&v30 = this;
      *((_QWORD *)&v30 + 1) = this;
      v31 = this;
      v19 = *(unsigned int *)(v16 + 8);
      if ((_DWORD)v19 != -1)
      {
        *(_QWORD *)&v29 = &v30;
        ((void (*)(__int128 *, uint64_t))off_1E33DC940[v19])(&v29, v16);
        v21 = v14 + 560 * v13;
        this = *(_QWORD *)(v21 + 8);
        *(_QWORD *)(v21 + 8) = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
            return WTF::StringImpl::destroy((WTF::StringImpl *)this, v20);
          else
            *(_DWORD *)this -= 2;
        }
        return this;
      }
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_31:
      v23 = *(_QWORD *)a2;
      v24 = **(_DWORD **)a2;
      **(_DWORD **)a2 = v24 + 1;
      v25 = *(_QWORD *)(v4 + 32);
      v11 = (_QWORD *)(v4 + 32);
      if (*(_BYTE *)(v25 + 72) && !*(_BYTE *)(v23 + 16))
        *(_BYTE *)(v25 + 72) = 0;
      if (v24)
      {
        *(_DWORD *)v23 = v24;
      }
      else
      {
        v26 = *(WebCore::Pattern **)(v23 + 8);
        *(_QWORD *)(v23 + 8) = 0;
        if (v26)
        {
          if (*(_DWORD *)v26 == 1)
          {
            WebCore::Pattern::~Pattern(v26);
            WTF::fastFree(v27, v28);
          }
          else
          {
            --*(_DWORD *)v26;
          }
        }
        WTF::fastFree((WTF *)v23, a2);
      }
    }
  }
  return this;
}

uint64_t WebCore::CanvasStyle::applyFillColor(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;

  v6[0] = a2;
  v6[1] = a2;
  v6[2] = a2;
  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2 == -1)
  {
    v4 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::CanvasRenderingContext2DBase::setFillStyle(v4, v5);
  }
  else
  {
    v7 = v6;
    return ((uint64_t (*)(_QWORD **, uint64_t))off_1E33DC940[v2])(&v7, a1);
  }
}

uint64_t WebCore::CanvasRenderingContext2DBase::setFillStyle(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  WTF *v8;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  WTF *v21;
  int v22;
  uint64_t v23;
  WebCore::Pattern *v24;
  WTF *v25;
  void *v26;
  WTF *v27;
  unsigned int v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  if (*(_BYTE *)(a2 + 16))
  {
    v2 = a2;
    v3 = this;
    LOBYTE(v27) = 0;
    v28 = -1;
    v4 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v4 != -1)
    {
      this = ((uint64_t (*)(__int128 *, WTF **, uint64_t))off_1E33DC6F8[v4])(&v30, &v27, a2);
      v28 = v4;
    }
    v5 = *(_DWORD *)(v3 + 132);
    if (!v5)
    {
      __break(0xC471u);
      JUMPOUT(0x195CDECD0);
    }
    v6 = *(_QWORD *)(v3 + 120) + 560 * v5;
    if (*(_DWORD *)(v6 - 520) | v4)
      goto LABEL_12;
    v7 = (_QWORD *)(v6 - 528);
    v8 = *(WTF **)(v6 - 528);
    if (((unint64_t)v8 & 0x8000000000000) != 0)
    {
      if (((unint64_t)v27 & 0x8000000000000) != 0)
      {
        v30 = *(_OWORD *)(((unint64_t)v8 & 0xFFFFFFFFFFFFLL) + 4);
        v29 = *(_OWORD *)(((unint64_t)v27 & 0xFFFFFFFFFFFFLL) + 4);
        this = WebCore::operator==<float,4ul>((float *)&v30, (float *)&v29);
        if ((_DWORD)this)
        {
          if (HIBYTE(*v7) == (unint64_t)v27 >> 56 && BYTE6(*v7) == BYTE6(v27))
            goto LABEL_24;
        }
      }
      goto LABEL_11;
    }
    if (v8 != v27 || ((unint64_t)v27 & 0x8000000000000) != 0)
    {
LABEL_11:
      LODWORD(v4) = v28;
LABEL_12:
      if ((_DWORD)v4 == 2)
        goto LABEL_36;
      v10 = (_QWORD *)(v3 + 32);
      while (1)
      {
        if (*(_DWORD *)(v3 + 712))
        {
          WebCore::CanvasRenderingContext2DBase::realizeSavesLoop((WebCore::CanvasRenderingContext2DBase *)v3);
          if (*(_DWORD *)(v3 + 712))
          {
            {
              WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl += 2;
              WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage = (uint64_t)&WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl;
            }
            v20 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v10 + 144))(*v10);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v20 + 248))(v20, 6, 2, &WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage, 0);
          }
        }
        v11 = *(unsigned int *)(v3 + 132);
        if (!(_DWORD)v11)
        {
          __break(0xC471u);
          JUMPOUT(0x195CDECD8);
        }
        v12 = v11 - 1;
        v13 = *(_QWORD *)(v3 + 120);
        v14 = v13 + 560 * (v11 - 1);
        v15 = v14 + 32;
        v16 = *(unsigned int *)(v14 + 40);
        if ((_DWORD)v16 == -1)
        {
          if (v28 != -1)
          {
LABEL_18:
            *(_QWORD *)&v30 = v14 + 32;
            ((void (*)(__int128 *, uint64_t, WTF **))*(&off_1E33DC6E0 + v28))(&v30, v15, &v27);
          }
        }
        else
        {
          if (v28 != -1)
            goto LABEL_18;
          ((void (*)(__int128 *, uint64_t, uint64_t))off_1E33DC6C8[v16])(&v30, v15, v2);
          *(_DWORD *)(v15 + 8) = -1;
        }
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 240))(v3);
        if (!this)
          break;
        *(_QWORD *)&v30 = this;
        *((_QWORD *)&v30 + 1) = this;
        v31 = this;
        v17 = *(unsigned int *)(v15 + 8);
        if ((_DWORD)v17 != -1)
        {
          *(_QWORD *)&v29 = &v30;
          ((void (*)(__int128 *, uint64_t))off_1E33DC940[v17])(&v29, v15);
          v19 = v13 + 560 * v12;
          this = *(_QWORD *)(v19 + 8);
          *(_QWORD *)(v19 + 8) = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
              this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v18);
            else
              *(_DWORD *)this -= 2;
          }
          break;
        }
        std::__throw_bad_variant_access[abi:sn180100]();
LABEL_36:
        v21 = v27;
        v22 = (*(_DWORD *)v27)++;
        v23 = *(_QWORD *)(v3 + 32);
        v10 = (_QWORD *)(v3 + 32);
        if (*(_BYTE *)(v23 + 72) && !*((_BYTE *)v21 + 16))
          *(_BYTE *)(v23 + 72) = 0;
        if (v22)
        {
          *(_DWORD *)v21 = v22;
        }
        else
        {
          v24 = (WebCore::Pattern *)*((_QWORD *)v21 + 1);
          *((_QWORD *)v21 + 1) = 0;
          if (v24)
          {
            if (*(_DWORD *)v24 == 1)
            {
              WebCore::Pattern::~Pattern(v24);
              WTF::fastFree(v25, v26);
            }
            else
            {
              --*(_DWORD *)v24;
            }
          }
          WTF::fastFree(v21, (void *)a2);
        }
      }
    }
LABEL_24:
    if (v28 != -1)
      return ((uint64_t (*)(__int128 *, WTF **))off_1E33DC6C8[v28])(&v30, &v27);
  }
  return this;
}

uint64_t WebCore::CanvasRenderingContext2DBase::setLineCap(uint64_t this, int a2)
{
  unsigned __int8 v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;

  if (a2 == 2)
    v2 = 2;
  else
    v2 = a2 == 1;
  v3 = *(_DWORD *)(this + 132);
  if (!v3)
    goto LABEL_10;
  v4 = this;
  if (*(unsigned __int8 *)(*(_QWORD *)(this + 120) + 560 * v3 - 504) == v2)
    return this;
  WebCore::CanvasRenderingContext2DBase::realizeSaves((WebCore::CanvasRenderingContext2DBase::State *)this);
  v5 = *(_DWORD *)(v4 + 132);
  if (!v5)
  {
LABEL_10:
    __break(0xC471u);
    JUMPOUT(0x195CDEDB8);
  }
  *(_BYTE *)(*(_QWORD *)(v4 + 120) + 560 * v5 - 504) = v2;
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 240))(v4);
  if (this)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)this + 296))(this, v2);
  return this;
}

uint64_t WebCore::CanvasRenderingContext2DBase::setLineJoin(uint64_t this, int a2)
{
  char v2;
  unsigned __int8 v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  if (a2 == 1)
    v2 = 2;
  else
    v2 = 1;
  if (a2 == 2)
    v3 = 0;
  else
    v3 = v2;
  v4 = *(_DWORD *)(this + 132);
  if (!v4)
  {
    __break(0xC471u);
    JUMPOUT(0x195CDEEBCLL);
  }
  v5 = this;
  if (*(unsigned __int8 *)(*(_QWORD *)(this + 120) + 560 * v4 - 503) != v3)
  {
    if (*(_DWORD *)(this + 712))
    {
      WebCore::CanvasRenderingContext2DBase::realizeSavesLoop((WebCore::CanvasRenderingContext2DBase *)this);
      if (*(_DWORD *)(v5 + 712))
      {
        {
          WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl += 2;
          WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage = (uint64_t)&WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl;
        }
        v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 32) + 144))(*(_QWORD *)(v5 + 32));
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v7 + 248))(v7, 6, 2, &WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage, 0);
      }
    }
    v6 = *(_DWORD *)(v5 + 132);
    if (!v6)
    {
      __break(0xC471u);
      JUMPOUT(0x195CDEEC4);
    }
    *(_BYTE *)(*(_QWORD *)(v5 + 120) + 560 * v6 - 503) = v3;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 240))(v5);
    if (this)
      return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)this + 312))(this, v3);
  }
  return this;
}

uint64_t WebCore::CanvasRenderingContext2DBase::setMiterLimit(uint64_t this, double a2)
{
  unsigned int v5;
  unsigned int v6;
  float v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 >= 0.0 && ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 <= 0x3FE
    || (unint64_t)(*(_QWORD *)&a2 - 1) <= 0xFFFFFFFFFFFFELL)
  {
    v5 = *(_DWORD *)(this + 132);
    if (!v5)
    {
      __break(0xC471u);
      JUMPOUT(0x195CDF028);
    }
    if (*(double *)(*(_QWORD *)(this + 120) + 560 * v5 - 496) != a2)
    {
      if (*(_DWORD *)(this + 712))
      {
        v9 = this;
        WebCore::CanvasRenderingContext2DBase::realizeSavesLoop((WebCore::CanvasRenderingContext2DBase *)this);
        this = v9;
        if (*(_DWORD *)(v9 + 712))
        {
          {
            WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl += 2;
            WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage = (uint64_t)&WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl;
          }
          v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 32) + 144))(*(_QWORD *)(v9 + 32));
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v8 + 248))(v8, 6, 2, &WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage, 0);
          this = v9;
        }
      }
      v6 = *(_DWORD *)(this + 132);
      if (!v6)
      {
        __break(0xC471u);
        JUMPOUT(0x195CDF030);
      }
      *(double *)(*(_QWORD *)(this + 120) + 560 * v6 - 496) = a2;
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 240))(this);
      if (this)
      {
        v7 = a2;
        return (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)this + 320))(this, v7);
      }
    }
  }
  return this;
}

uint64_t WebCore::CanvasRenderingContext2DBase::applyShadow(WebCore::CanvasRenderingContext2DBase *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  float v9;
  unsigned int *v10;
  float v11;
  unsigned int v12;
  void *v13;
  void *v14;
  unsigned int v15;
  unsigned int v16;
  float v17;
  float v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  char v32;

  result = (*(uint64_t (**)(WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)this + 240))(this);
  if (!result)
    return result;
  v3 = *((unsigned int *)this + 33);
  if (!(_DWORD)v3)
  {
    __break(0xC471u);
    JUMPOUT(0x195CDF2D0);
  }
  v4 = result;
  v5 = v3 - 1;
  v6 = *((_QWORD *)this + 15);
  v7 = *(_QWORD *)(v6 + 560 * v5 + 88);
  if ((v7 & 0x8000000000000) != 0)
  {
    if (*(float *)((v7 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
    {
LABEL_5:
      v29 = 0.0;
      v28 = 0;
      v30 = 0x1104000000000000;
      v31 = 0x3F80000000000001;
      v32 = 1;
      WebCore::GraphicsContextState::setDropShadow(result + 8, (uint64_t)&v28);
      if (v32 && (v30 & 0x8000000000000) != 0)
      {
        v22 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFLL);
        do
        {
          v23 = __ldaxr(v22);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v22));
        if (!v24)
        {
          atomic_store(1u, v22);
          WTF::fastFree((WTF *)v22, v8);
        }
      }
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 88))(v4, v4 + 8);
    }
  }
  else if (!*(_QWORD *)(v6 + 560 * v5 + 88))
  {
    goto LABEL_5;
  }
  v9 = *(float *)(v6 + 560 * v5 + 80);
  if (v9 == 0.0)
  {
    v17 = *(float *)(v6 + 560 * v5 + 72);
    if (v17 == 0.0)
      goto LABEL_23;
    if (v17 < 0.0)
      v17 = -v17;
    if (v17 < 0.00000011921)
    {
LABEL_23:
      v18 = *(float *)(v6 + 560 * v5 + 76);
      if (v18 == 0.0)
        goto LABEL_5;
      if (v18 < 0.0)
        v18 = -v18;
      if (v18 < 0.00000011921)
        goto LABEL_5;
    }
  }
  v10 = (unsigned int *)(v6 + 560 * v5 + 72);
  if (*(_BYTE *)(result + 345))
    v11 = -*(float *)(v6 + 560 * v5 + 76);
  else
    v11 = *(float *)(v6 + 560 * v5 + 76);
  v12 = *v10;
  if ((v7 & 0x8000000000000) != 0)
  {
    v19 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 + 1, v19));
    v28 = __PAIR64__(LODWORD(v11), v12);
    v29 = v9;
    v30 = v7;
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 + 1, v19));
  }
  else
  {
    LODWORD(v28) = *v10;
    *((float *)&v28 + 1) = v11;
    v29 = v9;
    v30 = v7;
  }
  v31 = 0x3F80000000000001;
  v32 = 1;
  WebCore::GraphicsContextState::setDropShadow(result + 8, (uint64_t)&v28);
  if (v32)
  {
    if ((v30 & 0x8000000000000) != 0)
    {
      v25 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFLL);
      do
      {
        v26 = __ldaxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
      {
        atomic_store(1u, v25);
        WTF::fastFree((WTF *)v25, v13);
      }
    }
  }
  result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 88))(v4, v4 + 8);
  if ((v7 & 0x8000000000000) != 0)
  {
    result = v7 & 0xFFFFFFFFFFFFLL;
    do
    {
      v15 = __ldaxr((unsigned int *)result);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, (unsigned int *)result));
    if (!v16)
    {
      atomic_store(1u, (unsigned int *)result);
      return WTF::fastFree((WTF *)result, v14);
    }
  }
  return result;
}

void WebCore::parseColor(unsigned int **this@<X0>, const WTF::String *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  unsigned int *v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  WebCore::Node *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  __int16 v24;
  void *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  __int16 v41;
  void (***v42)(WebCore::CanvasStyleColorResolutionDelegate *__hidden);
  int v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  void (**v56)(WebCore::CanvasStyleColorResolutionDelegate *__hidden);
  WebCore::Node *v57;
  char v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;

  v7 = (*(uint64_t (**)(const WTF::String *))(*(_QWORD *)a2 + 96))(a2);
  v14 = *this;
  if (*this)
  {
    v15 = (char *)*((_QWORD *)v14 + 1);
    v16 = v14[1] | ((unint64_t)((v14[4] >> 2) & 1) << 32);
  }
  else
  {
    v15 = 0;
    v16 = 0x100000000;
  }
  v17 = WebCore::CSSParserFastPaths::parseSimpleColor(v15, (const char *)v16, *(_BYTE *)(v7 + 48) != 1, v8, v9, v10, v11, v12, v13);
  if (BYTE4(v17))
  {
    *a3 = bswap32(v17) | 0x1104000000000000;
    return;
  }
  if (((*(uint64_t (**)(const WTF::String *))(*(_QWORD *)a2 + 32))(a2) & 1) != 0)
  {
    *((_DWORD *)a2 - 22) += 2;
    v41 = 1792;
    v42 = 0;
    v43 = 0;
    LOBYTE(v44) = 0;
    v45 = 0;
    LOBYTE(v46) = 0;
    v47 = 0;
    LOBYTE(v48) = 0;
    v49 = 0;
    LOBYTE(v50) = 0;
    v51 = 0;
    LOBYTE(v52) = 0;
    v53 = 0;
    LOBYTE(v54) = 0;
    v55 = 0;
    v56 = off_1E33DC660;
    v57 = (const WTF::String *)((char *)a2 - 112);
    v58 = 1;
  }
  else
  {
    v23 = (*(uint64_t (**)(const WTF::String *))(*(_QWORD *)a2 + 144))(a2);
    if (!v23 || *(_BYTE *)(v23 + 274))
      v24 = 3;
    else
      v24 = 7;
    v60 = 0;
    v59 = 0;
    v61 = 0x11040000000000FFLL;
    v62 = 1;
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v66 = 0;
    v67 = 0;
    v68 = 0;
    v69 = 0;
    v70 = 0;
    v71 = 0;
    v72 = 0;
    v41 = v24 << 8;
    WebCore::CSSUnresolvedColorResolutionContext::CSSUnresolvedColorResolutionContext((uint64_t)&v42, &v59);
    LOBYTE(v56) = 0;
    v58 = 0;
    WebCore::CSSUnresolvedColorResolutionContext::~CSSUnresolvedColorResolutionContext((WebCore::CSSUnresolvedColorResolutionContext *)&v59, v25);
    if (!v58)
      goto LABEL_7;
  }
  v42 = &v56;
LABEL_7:
  WebCore::CSSPropertyParserHelpers::parseColorRawSlow(this, v7, &v41, (uint64_t)&v42, a3);
  if (v58)
  {
    v19 = v57;
    v57 = 0;
    if (v19)
    {
      if (*((_DWORD *)v19 + 6) == 2)
      {
        if ((*((_WORD *)v19 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v19, v18);
      }
      else
      {
        *((_DWORD *)v19 + 6) -= 2;
      }
    }
  }
  if (v55)
  {
    if ((v54 & 0x8000000000000) != 0)
    {
      v26 = (unsigned int *)(v54 & 0xFFFFFFFFFFFFLL);
      do
      {
        v27 = __ldaxr(v26);
        v28 = v27 - 1;
      }
      while (__stlxr(v28, v26));
      if (!v28)
      {
        atomic_store(1u, v26);
        WTF::fastFree((WTF *)v26, v18);
      }
    }
  }
  if (v53)
  {
    if ((v52 & 0x8000000000000) != 0)
    {
      v29 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFLL);
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
      {
        atomic_store(1u, v29);
        WTF::fastFree((WTF *)v29, v18);
      }
    }
  }
  if (v51)
  {
    if ((v50 & 0x8000000000000) != 0)
    {
      v32 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFLL);
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        atomic_store(1u, v32);
        WTF::fastFree((WTF *)v32, v18);
      }
    }
  }
  if (v49)
  {
    if ((v48 & 0x8000000000000) != 0)
    {
      v35 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFLL);
      do
      {
        v36 = __ldaxr(v35);
        v37 = v36 - 1;
      }
      while (__stlxr(v37, v35));
      if (!v37)
      {
        atomic_store(1u, v35);
        WTF::fastFree((WTF *)v35, v18);
      }
    }
  }
  if (v47)
  {
    if ((v46 & 0x8000000000000) != 0)
    {
      v38 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFLL);
      do
      {
        v39 = __ldaxr(v38);
        v40 = v39 - 1;
      }
      while (__stlxr(v40, v38));
      if (!v40)
      {
        atomic_store(1u, v38);
        WTF::fastFree((WTF *)v38, v18);
      }
    }
  }
  if (v45 && (v44 & 0x8000000000000) != 0)
  {
    v20 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFLL);
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, v18);
    }
  }
}

double WebCore::CanvasRenderingContext2DBase::setLineDash(WebCore::CanvasRenderingContext2DBase *this, unsigned int *a2)
{
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  double *v10;
  uint64_t v11;
  double result;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;

  v4 = a2[3];
  if ((_DWORD)v4)
  {
    result = **(double **)a2;
    if ((*(_QWORD *)&result & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || result < 0.0)
      return result;
    v13 = 0;
    while (v4 - 1 != v13)
    {
      result = *(double *)(*(_QWORD *)a2 + 8 + 8 * v13++);
      if ((*(_QWORD *)&result & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || result < 0.0)
      {
        if (v13 >= v4)
          break;
        return result;
      }
    }
  }
  if (*((_DWORD *)this + 178))
  {
    WebCore::CanvasRenderingContext2DBase::realizeSavesLoop(this);
    if (*((_DWORD *)this + 178))
    {
      {
        WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl += 2;
        WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage = (uint64_t)&WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl;
      }
      v15 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 144))(*((_QWORD *)this + 4));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v15 + 248))(v15, 6, 2, &WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage, 0);
    }
  }
  v5 = *((_DWORD *)this + 33);
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x195CDF84CLL);
  }
  v6 = *((_QWORD *)this + 15) + 560 * v5;
  v7 = v6 - 392;
  v8 = a2[3];
  if ((unsigned int *)(v6 - 392) != a2)
  {
    if (*(_DWORD *)(v6 - 380) > v8)
    {
      *(_DWORD *)(v6 - 380) = v8;
    }
    else
    {
      v9 = v8 > *(_DWORD *)(v6 - 384);
      v8 = *(_DWORD *)(v6 - 380);
      if (v9)
      {
        WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(v7, a2);
        WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(v7, a2[3]);
        v8 = *(_DWORD *)(v7 + 12);
      }
    }
    v10 = *(double **)a2;
    if (v8)
    {
      memmove(*(void **)v7, v10, 8 * v8);
      v11 = *(unsigned int *)(v7 + 12);
      v10 = *(double **)a2;
    }
    else
    {
      v11 = 0;
    }
    memcpy((void *)(*(_QWORD *)v7 + 8 * v11), &v10[v11], 8 * a2[3] - 8 * v11);
    *(_DWORD *)(v7 + 12) = a2[3];
    v8 = a2[3];
  }
  if ((v8 & 1) != 0)
  {
    v14 = *((_DWORD *)this + 33);
    if (!v14)
    {
      __break(0xC471u);
      JUMPOUT(0x195CDF854);
    }
    WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>((void **)(*((_QWORD *)this + 15) + 560 * v14 - 392), *(void **)a2, v8);
  }
  WebCore::CanvasRenderingContext2DBase::applyLineDash(this);
  return result;
}

uint64_t WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, const void **a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  if (a2 != (const void **)a1)
  {
    v4 = *(_DWORD *)(a1 + 12);
    v5 = *((_DWORD *)a2 + 3);
    if (v4 > v5)
    {
      *(_DWORD *)(a1 + 12) = v5;
      v4 = v5;
    }
    else if (v5 > *(_DWORD *)(a1 + 8))
    {
      WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(a1, a2);
      WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *((unsigned int *)a2 + 3));
      v4 = *(_DWORD *)(a1 + 12);
    }
    if (v4)
    {
      memmove(*(void **)a1, *a2, 8 * v4);
      v6 = *(unsigned int *)(a1 + 12);
    }
    else
    {
      v6 = 0;
    }
    memcpy((void *)(*(_QWORD *)a1 + 8 * v6), (char *)*a2 + 8 * v6, (_BYTE *)*a2 + 8 * *((unsigned int *)a2 + 3) - ((_BYTE *)*a2 + 8 * v6));
    *(_DWORD *)(a1 + 12) = *((_DWORD *)a2 + 3);
  }
  return a1;
}

void **WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(void **result, void *__src, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  unint64_t v15;

  if (a3)
  {
    v4 = (uint64_t)result;
    v5 = a3;
    v6 = *((unsigned int *)result + 2);
    v7 = *((unsigned int *)result + 3);
    v8 = v7 + a3;
    if (v8 > v6)
    {
      v9 = v6 + (v6 >> 2);
      if (v9 >= 0x10)
        v10 = v9 + 1;
      else
        v10 = 16;
      if (v10 <= v8)
        v11 = v7 + a3;
      else
        v11 = v10;
      if (v11 >> 29)
        goto LABEL_17;
      v12 = *result;
      v13 = (void *)WTF::fastMalloc((WTF *)(8 * v11));
      *(_DWORD *)(v4 + 8) = v11;
      *(_QWORD *)v4 = v13;
      memcpy(v13, v12, 8 * v7);
      if (v12)
      {
        if (*(void **)v4 == v12)
        {
          *(_QWORD *)v4 = 0;
          *(_DWORD *)(v4 + 8) = 0;
        }
        WTF::fastFree((WTF *)v12, v14);
      }
    }
    v15 = *(unsigned int *)(v4 + 12);
    if (v8 >= v15)
    {
      result = (void **)memcpy((void *)(*(_QWORD *)v4 + 8 * v15), __src, 8 * v5);
      *(_DWORD *)(v4 + 12) = v8;
      return result;
    }
LABEL_17:
    __break(0xC471u);
    JUMPOUT(0x195CDFA14);
  }
  return result;
}

WTF *WebCore::CanvasRenderingContext2DBase::applyLineDash(WebCore::CanvasRenderingContext2DBase *this)
{
  WTF *result;
  uint64_t v3;
  WTF *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  int v18;
  int v19;

  result = (WTF *)(*(uint64_t (**)(WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)this + 240))(this);
  if (result)
  {
    v3 = *((unsigned int *)this + 33);
    if ((_DWORD)v3)
    {
      v4 = result;
      v5 = v3 - 1;
      v6 = *((_QWORD *)this + 15);
      v7 = *(unsigned int *)(v6 + 560 * v5 + 180);
      v17 = 0;
      v18 = 0;
      v19 = v7;
      if ((_DWORD)v7)
      {
        if (v7 >> 29)
        {
          __break(0xC471u);
          JUMPOUT(0x195CDFB40);
        }
        v8 = (WTF *)WTF::fastMalloc((WTF *)(8 * v7));
        v18 = v7;
        v17 = v8;
        v9 = *((unsigned int *)this + 33);
        if (!(_DWORD)v9)
        {
          __break(0xC471u);
          JUMPOUT(0x195CDFB48);
        }
        v6 = *((_QWORD *)this + 15);
        v5 = v9 - 1;
      }
      else
      {
        v8 = 0;
      }
      v10 = v6 + 560 * v5;
      v11 = *(unsigned int *)(v10 + 180);
      if (!(_DWORD)v11)
      {
LABEL_8:
        v12 = *(double *)(v6 + 560 * v5 + 184);
        (*(void (**)(WTF *, WTF **, float))(*(_QWORD *)v4 + 304))(v4, &v17, v12);
        result = v17;
        if (v17)
        {
          v17 = 0;
          v18 = 0;
          return (WTF *)WTF::fastFree(result, v13);
        }
        return result;
      }
      v14 = 0;
      v15 = (_QWORD *)(v10 + 168);
      v16 = 8 * v11;
      while (8 * v7 != v14)
      {
        *(_QWORD *)((char *)v8 + v14) = *(_QWORD *)(*v15 + v14);
        v14 += 8;
        if (v16 == v14)
          goto LABEL_8;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x195CDFB38);
  }
  return result;
}

double WebCore::CanvasRenderingContext2DBase::setWebkitLineDash(WebCore::CanvasRenderingContext2DBase *this, const void **a2)
{
  unint64_t v4;
  unsigned int v5;
  double result;
  unint64_t v7;
  uint64_t v8;

  v4 = *((unsigned int *)a2 + 3);
  if ((_DWORD)v4)
  {
    result = *(double *)*a2;
    if ((*(_QWORD *)&result & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || result < 0.0)
      return result;
    v7 = 0;
    while (v4 - 1 != v7)
    {
      result = *((double *)*a2 + ++v7);
      if ((*(_QWORD *)&result & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || result < 0.0)
      {
        if (v7 >= v4)
          break;
        return result;
      }
    }
  }
  if (*((_DWORD *)this + 178))
  {
    WebCore::CanvasRenderingContext2DBase::realizeSavesLoop(this);
    if (*((_DWORD *)this + 178))
    {
      {
        WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl += 2;
        WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage = (uint64_t)&WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl;
      }
      v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 144))(*((_QWORD *)this + 4));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v8 + 248))(v8, 6, 2, &WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage, 0);
    }
  }
  v5 = *((_DWORD *)this + 33);
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x195CDFC6CLL);
  }
  WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(*((_QWORD *)this + 15) + 560 * v5 - 392, a2);
  WebCore::CanvasRenderingContext2DBase::applyLineDash(this);
  return result;
}

WTF *WebCore::CanvasRenderingContext2DBase::setLineDashOffset(WTF *this, double a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v3 = (uint64_t)this;
    v4 = *((_DWORD *)this + 33);
    if (v4)
    {
      if (*(double *)(*((_QWORD *)this + 15) + 560 * v4 - 376) == a2)
        return this;
      WebCore::CanvasRenderingContext2DBase::realizeSaves(this);
      v5 = *(_DWORD *)(v3 + 132);
      if (v5)
      {
        *(double *)(*(_QWORD *)(v3 + 120) + 560 * v5 - 376) = a2;
        return WebCore::CanvasRenderingContext2DBase::applyLineDash((WebCore::CanvasRenderingContext2DBase *)v3);
      }
    }
    __break(0xC471u);
    JUMPOUT(0x195CDFD38);
  }
  return this;
}

void WebCore::CanvasRenderingContext2DBase::scale(WebCore::CanvasRenderingContext2DBase *this, double a2, double a3)
{
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float64x2_t v15;
  __int128 v16;
  double v17;
  double v18;
  unsigned int v20;
  uint64_t v21;
  float64x2_t v22;
  unsigned int v23;
  uint64_t v24;
  float64x2_t v27;
  double v28;
  double v29;
  __int128 v30;
  float64x2_t v31;
  float64x2_t v32;
  __int128 v33;

  v4 = (*(uint64_t (**)(WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)this + 240))(this);
  v6 = a2;
  v5 = a3;
  if (v4)
  {
    v7 = *((unsigned int *)this + 33);
    if (!(_DWORD)v7)
    {
      __break(0xC471u);
      JUMPOUT(0x195CDFF40);
    }
    v8 = v7 - 1;
    v9 = *((_QWORD *)this + 15);
    if (*(_BYTE *)(v9 + 560 * (v7 - 1) + 160))
      v10 = (*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
    else
      v10 = 0;
    if (v10 && (*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v12 = v4;
      v13 = 0;
      v14 = v9 + 560 * v8;
      v15 = *(float64x2_t *)(v14 + 128);
      v31 = *(float64x2_t *)(v14 + 112);
      v32 = v15;
      v16 = *(_OWORD *)(v14 + 144);
      v31 = vmulq_n_f64(v31, a2);
      v32 = vmulq_n_f64(v15, a3);
      v33 = v16;
      do
      {
        v17 = *(double *)(v14 + 112 + v13 * 8);
        v18 = v31.f64[v13];
        if (v17 != v18)
          break;
      }
      while (v13++ != 5);
      if (v17 != v18)
      {
        if (*((_DWORD *)this + 178))
        {
          WebCore::CanvasRenderingContext2DBase::realizeSavesLoop(this);
          v6 = a2;
          v5 = a3;
          if (*((_DWORD *)this + 178))
          {
            {
              WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl += 2;
              WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage = (uint64_t)&WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl;
            }
            v24 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 144))(*((_QWORD *)this + 4));
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v24 + 248))(v24, 6, 2, &WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage, 0);
            v6 = a2;
            v5 = a3;
          }
        }
        v20 = *((_DWORD *)this + 33);
        if (v6 == 0.0 || v5 == 0.0)
        {
          if (!v20)
          {
            __break(0xC471u);
            JUMPOUT(0x195CDFF50);
          }
          *(_BYTE *)(*((_QWORD *)this + 15) + 560 * v20 - 400) = 0;
        }
        else
        {
          if (!v20)
          {
            __break(0xC471u);
            JUMPOUT(0x195CDFF48);
          }
          v21 = *((_QWORD *)this + 15) + 560 * v20 - 560;
          v22 = v32;
          *(float64x2_t *)(v21 + 112) = v31;
          *(float64x2_t *)(v21 + 128) = v22;
          *(_OWORD *)(v21 + 144) = v33;
          *(float *)&v23 = v6;
          *(float *)v22.f64 = v5;
          *(_QWORD *)&v27.f64[0] = __PAIR64__(LODWORD(v22.f64[0]), v23);
          (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v12 + 632))(v12, &v27);
          v30 = xmmword_1969F14A0;
          v27.f64[0] = 1.0 / a2;
          v27.f64[1] = 1.0 / a2 * 0.0;
          v28 = 1.0 / a3 * 0.0;
          v29 = 1.0 / a3;
          WebCore::Path::transform((WebCore::CanvasRenderingContext2DBase *)((char *)this + 48), &v27);
        }
      }
    }
  }
}

void WebCore::CanvasRenderingContext2DBase::rotate(WebCore::CanvasRenderingContext2DBase *this, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  float64x2_t *v10;
  float64x2_t *v11;
  float64x2_t v12;
  __double2 v13;
  uint64_t v14;
  float64x2_t v15;
  float64x2_t v16;
  double v17;
  double v18;
  unsigned int v20;
  uint64_t v21;
  float64x2_t v22;
  float v23;
  uint64_t v24;
  float64x2_t v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;

  v4 = (*(uint64_t (**)(WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)this + 240))(this);
  if (v4)
  {
    v5 = *((unsigned int *)this + 33);
    if (!(_DWORD)v5)
    {
      __break(0xC471u);
      JUMPOUT(0x195CE0168);
    }
    v6 = v5 - 1;
    v7 = *((_QWORD *)this + 15);
    if (*(_BYTE *)(v7 + 560 * v6 + 160))
      v8 = (*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
    else
      v8 = 0;
    if (v8)
    {
      v9 = v4;
      v10 = (float64x2_t *)(v7 + 560 * v6);
      v11 = v10 + 7;
      v12 = v10[8];
      v30 = v10[7];
      v31 = v12;
      v32 = v10[9];
      v13 = __sincos_stret(a2);
      v14 = 0;
      v15 = vaddq_f64(vmlaq_f64(vmulq_f64(v31, (float64x2_t)0), (float64x2_t)0, v30), v32);
      v16 = vmlsq_lane_f64(vmulq_n_f64(v31, v13.__cosval), v30, v13.__sinval, 0);
      v30 = vmlaq_n_f64(vmulq_n_f64(v31, v13.__sinval), v30, v13.__cosval);
      v31 = v16;
      v32 = v15;
      do
      {
        v17 = v11->f64[v14];
        v18 = v30.f64[v14];
        if (v17 != v18)
          break;
      }
      while (v14++ != 5);
      if (v17 != v18)
      {
        if (*((_DWORD *)this + 178))
        {
          WebCore::CanvasRenderingContext2DBase::realizeSavesLoop(this);
          if (*((_DWORD *)this + 178))
          {
            {
              WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl += 2;
              WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage = (uint64_t)&WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl;
            }
            v24 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 144))(*((_QWORD *)this + 4));
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v24 + 248))(v24, 6, 2, &WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage, 0);
          }
        }
        v20 = *((_DWORD *)this + 33);
        if (!v20)
        {
          __break(0xC471u);
          JUMPOUT(0x195CE0170);
        }
        v21 = *((_QWORD *)this + 15) + 560 * v20 - 560;
        v22 = v31;
        *(float64x2_t *)(v21 + 112) = v30;
        *(float64x2_t *)(v21 + 128) = v22;
        *(float64x2_t *)(v21 + 144) = v32;
        v23 = a2;
        (*(void (**)(uint64_t, float))(*(_QWORD *)v9 + 640))(v9, v23);
        v25.f64[0] = v13.__cosval + v13.__sinval * -0.0;
        v25.f64[1] = v13.__cosval * 0.0 - v13.__sinval;
        v26 = v13.__sinval + v13.__cosval * 0.0;
        v27 = v13.__cosval + v13.__sinval * 0.0;
        v28 = 0;
        v29 = 0;
        WebCore::Path::transform((WebCore::CanvasRenderingContext2DBase *)((char *)this + 48), &v25);
      }
    }
  }
}

void WebCore::CanvasRenderingContext2DBase::translate(WebCore::CanvasRenderingContext2DBase *this, double a2, double a3)
{
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  double v16;
  uint64_t v17;
  _OWORD *v18;
  double v19;
  double v20;
  BOOL v21;
  unsigned int v22;
  _OWORD *v23;
  __int128 v24;
  float v25;
  uint64_t v26;
  float64x2_t v27[2];
  double v28;
  double v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v6 = (*(uint64_t (**)(WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)this + 240))(this);
  if (v6)
  {
    v8 = *((unsigned int *)this + 33);
    if (!(_DWORD)v8)
    {
      __break(0xC471u);
      JUMPOUT(0x195CE03A4);
    }
    v9 = v8 - 1;
    v10 = *((_QWORD *)this + 15);
    if (*(_BYTE *)(v10 + 560 * v9 + 160))
      v11 = (*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
    else
      v11 = 0;
    if (v11 && (*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      v13 = v6;
      v14 = (_OWORD *)(v10 + 560 * v9);
      v15 = v14[8];
      v30 = v14[7];
      v31 = v15;
      v32 = v14[9];
      v7.n128_u64[0] = v30;
      if (*(double *)&v30 == 1.0
        && *((double *)&v30 + 1) == 0.0
        && *(double *)&v15 == 0.0
        && *((double *)&v15 + 1) == 1.0)
      {
        *(double *)&v32 = *(double *)&v32 + a2;
        v16 = a3;
      }
      else
      {
        v7.n128_f64[0] = *(double *)&v15 * a3 + a2 * *(double *)&v30 + *(double *)&v32;
        *(double *)&v32 = v7.n128_f64[0];
        v16 = *((double *)&v15 + 1) * a3 + a2 * *((double *)&v30 + 1);
      }
      v17 = 0;
      v18 = v14 + 7;
      *((double *)&v32 + 1) = v16 + *((double *)&v32 + 1);
      do
      {
        v19 = *(double *)((char *)v18 + v17);
        v20 = *(double *)((char *)&v30 + v17);
        if (v19 != v20)
          break;
        v21 = v17 == 40;
        v17 += 8;
      }
      while (!v21);
      if (v19 != v20)
      {
        if (*((_DWORD *)this + 178))
        {
          WebCore::CanvasRenderingContext2DBase::realizeSavesLoop(this);
          if (*((_DWORD *)this + 178))
          {
            {
              WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl += 2;
              WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage = (uint64_t)&WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl;
            }
            v26 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 144))(*((_QWORD *)this + 4));
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v26 + 248))(v26, 6, 2, &WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage, 0);
          }
        }
        v22 = *((_DWORD *)this + 33);
        if (!v22)
        {
          __break(0xC471u);
          JUMPOUT(0x195CE03ACLL);
        }
        v23 = (_OWORD *)(*((_QWORD *)this + 15) + 560 * v22 - 560);
        v24 = v31;
        v23[7] = v30;
        v23[8] = v24;
        v23[9] = v32;
        v25 = a2;
        *(float *)&v24 = a3;
        (*(void (**)(uint64_t, float, float, __n128))(*(_QWORD *)v13 + 648))(v13, v25, *(float *)&v24, v7);
        v27[0] = (float64x2_t)constinit_2;
        v27[1] = (float64x2_t)unk_1969F1490;
        v28 = 0.0 - a2;
        v29 = 0.0 - a3;
        WebCore::Path::transform((WebCore::CanvasRenderingContext2DBase *)((char *)this + 48), v27);
      }
    }
  }
}

void WebCore::CanvasRenderingContext2DBase::transform(WebCore::CanvasRenderingContext2DBase *this, float64_t a2, float64_t a3, double a4, double a5, double a6, double a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  BOOL v34;
  unsigned int v35;
  _OWORD *v36;
  __int128 v37;
  unsigned int v38;
  float64x2_t v39[3];
  char v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  float64x2_t v44;
  double v45;
  double v46;
  double v47;
  double v48;

  v14 = (*(uint64_t (**)(WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)this + 240))(this);
  if (!v14)
    return;
  v15 = *((unsigned int *)this + 33);
  if (!(_DWORD)v15)
  {
    __break(0xC471u);
    goto LABEL_37;
  }
  v16 = v15 - 1;
  v17 = *((_QWORD *)this + 15);
  if (*(_BYTE *)(v17 + 560 * (v15 - 1) + 160))
    v18 = (*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL;
  else
    v18 = 0;
  if (!v18
    || (*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)&a6 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
    || (*(_QWORD *)&a7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
  {
    return;
  }
  v24 = v14;
  v25 = 0;
  v26 = (_OWORD *)(v17 + 560 * v16);
  v44.f64[0] = a2;
  v44.f64[1] = a3;
  v45 = a4;
  v46 = a5;
  v47 = a6;
  v48 = a7;
  v27 = v26[8];
  v41 = v26[7];
  v42 = v27;
  v43 = v26[9];
  v28 = *(double *)&v27 * a3 + a2 * *(double *)&v41;
  v29 = *(double *)&v27 * a5 + a4 * *(double *)&v41;
  v30 = *((double *)&v27 + 1) * a5 + a4 * *((double *)&v41 + 1);
  v31 = *(double *)&v43 + *(double *)&v27 * a7 + a6 * *(double *)&v41;
  *(double *)&v27 = *((double *)&v27 + 1) * a7 + a6 * *((double *)&v41 + 1) + *((double *)&v43 + 1);
  *(double *)&v41 = v28;
  *((double *)&v41 + 1) = *((double *)&v27 + 1) * a3 + a2 * *((double *)&v41 + 1);
  *(double *)&v42 = v29;
  *((double *)&v42 + 1) = v30;
  *(double *)&v43 = v31;
  *((_QWORD *)&v43 + 1) = v27;
  do
  {
    v32 = *(double *)((char *)v26 + v25 + 112);
    v33 = *(double *)((char *)&v41 + v25);
    if (v32 != v33)
      break;
    v34 = v25 == 40;
    v25 += 8;
  }
  while (!v34);
  if (v32 == v33)
    return;
  WebCore::CanvasRenderingContext2DBase::realizeSaves(this);
  WebCore::AffineTransform::inverse(&v44, (uint64_t)v39);
  if (!v40)
  {
    v38 = *((_DWORD *)this + 33);
    if (v38)
    {
      *(_BYTE *)(*((_QWORD *)this + 15) + 560 * v38 - 400) = 0;
      return;
    }
    __break(0xC471u);
LABEL_37:
    JUMPOUT(0x195CE05E8);
  }
  v35 = *((_DWORD *)this + 33);
  if (!v35)
  {
    __break(0xC471u);
    JUMPOUT(0x195CE05F0);
  }
  v36 = (_OWORD *)(*((_QWORD *)this + 15) + 560 * v35 - 560);
  v37 = v42;
  v36[7] = v41;
  v36[8] = v37;
  v36[9] = v43;
  (*(void (**)(uint64_t, float64x2_t *))(*(_QWORD *)v24 + 656))(v24, &v44);
  WebCore::Path::transform((WebCore::CanvasRenderingContext2DBase *)((char *)this + 48), v39);
}

void WebCore::CanvasRenderingContext2DBase::resetTransform(WebCore::CanvasRenderingContext2DBase *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  float64x2_t v6;
  float64x2_t v7;
  int v8;
  unsigned int v9;
  _OWORD *v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD v13[6];
  float64x2_t v14[3];

  v2 = (*(uint64_t (**)(WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)this + 240))(this);
  if (v2)
  {
    v3 = *((_DWORD *)this + 33);
    if (!v3)
    {
      __break(0xC471u);
      JUMPOUT(0x195CE074CLL);
    }
    v4 = v2;
    v5 = *((_QWORD *)this + 15) + 560 * v3 - 560;
    v7 = *(float64x2_t *)(v5 + 128);
    v6 = *(float64x2_t *)(v5 + 144);
    v14[0] = *(float64x2_t *)(v5 + 112);
    v14[1] = v7;
    v14[2] = v6;
    v8 = *(unsigned __int8 *)(v5 + 160);
    if (*((_DWORD *)this + 178))
    {
      WebCore::CanvasRenderingContext2DBase::realizeSavesLoop(this);
      if (*((_DWORD *)this + 178))
      {
        {
          WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl += 2;
          WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage = (uint64_t)&WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl;
        }
        v12 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 144))(*((_QWORD *)this + 4));
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v12 + 248))(v12, 6, 2, &WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage, 0);
      }
    }
    (*(void (**)(_QWORD *__return_ptr, WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)this + 248))(v13, this);
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 664))(v4, v13);
    v9 = *((_DWORD *)this + 33);
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x195CE0754);
    }
    v10 = (_OWORD *)(*((_QWORD *)this + 15) + 560 * v9 - 560);
    v10[7] = constinit_2;
    v10[8] = unk_1969F1490;
    v10[9] = xmmword_1969F14A0;
    if (v8)
      WebCore::Path::transform((WebCore::CanvasRenderingContext2DBase *)((char *)this + 48), v14);
    v11 = *((_DWORD *)this + 33);
    if (!v11)
    {
      __break(0xC471u);
      JUMPOUT(0x195CE075CLL);
    }
    *(_BYTE *)(*((_QWORD *)this + 15) + 560 * v11 - 400) = 1;
  }
}

void WebCore::CanvasRenderingContext2DBase::setTransform(WebCore::CanvasRenderingContext2DBase *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v6;
  float64_t v7;
  float64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int **v16;
  const WTF::StringImpl *v17;
  _BYTE v18[8];
  WTF::StringImpl *v19;
  char v20;

  WebCore::DOMMatrixReadOnly::validateAndFixup(a2, (uint64_t)v18);
  if (v20)
  {
    v6 = v19;
    *(_BYTE *)a3 = v18[0];
    *(_QWORD *)(a3 + 8) = v6;
    *(_BYTE *)(a3 + 16) = 1;
  }
  else if (*(_BYTE *)(a2 + 104)
         && *(_BYTE *)(a2 + 120)
         && *(_BYTE *)(a2 + 136)
         && *(_BYTE *)(a2 + 152)
         && *(_BYTE *)(a2 + 168)
         && *(_BYTE *)(a2 + 184))
  {
    v7 = *(double *)(a2 + 96);
    v8 = *(double *)(a2 + 112);
    v9 = *(double *)(a2 + 128);
    v10 = *(double *)(a2 + 144);
    v11 = *(double *)(a2 + 160);
    v12 = *(double *)(a2 + 176);
    if ((*(uint64_t (**)(WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)a1 + 240))(a1)
      && (*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(_QWORD *)&v9 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(_QWORD *)&v11 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
      && (*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
    {
      WebCore::CanvasRenderingContext2DBase::resetTransform(a1);
      WebCore::CanvasRenderingContext2DBase::transform(a1, v7, v8, v9, v10, v11, v12);
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    if (v20)
    {
      v14 = v19;
      v19 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v13);
        else
          *(_DWORD *)v14 -= 2;
      }
    }
  }
  else
  {
    v15 = std::__throw_bad_optional_access[abi:sn180100]();
    WebCore::CanvasRenderingContext2DBase::setStrokeColor(v15, v16, v17);
  }
}

uint64_t WebCore::CanvasRenderingContext2DBase::setStrokeColor(uint64_t a1, unsigned int **a2, const WTF::StringImpl *a3)
{
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  int v15;
  unint64_t v16;
  void *v17;
  WTF *v18;
  WTF *v19;
  char v20;
  unsigned int v21;
  __int128 *v22;
  unsigned int v23;
  unsigned int v24;
  __int128 *v25;
  char v26;
  unsigned int v27;
  __int128 *v28;
  unsigned int v29;
  WTF::StringImpl *v30;
  WTF *v31;
  WTF *v32;
  WTF *v34;
  WebCore::Node *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  unsigned int v46;
  uint64_t v47;
  WTF::StringImpl **v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t *v55;
  unsigned int *v56;
  WTF *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  void *v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  WebCore::Pattern *v73;
  unsigned int *v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int *v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int *v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int *v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int *v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  WTF *v94;
  void *v95;
  uint64_t v96;
  int v97;
  char v98;
  char v99[8];
  int v100;
  char v101;
  __int128 v102;
  int v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  char v113;
  uint64_t v114;
  char v115;
  void (**v116)(WebCore::CanvasStyleColorResolutionDelegate *__hidden);
  WebCore::Node *v117;
  char v118;
  uint64_t v119;
  __int128 *v120;
  __int128 *v121;
  __int128 v122;
  uint64_t v123;
  char v124;
  char v125;
  char v126;
  WTF *v127;
  int v128;
  unsigned int v129;
  _BYTE v130[768];
  WTF *v131;
  int v132;
  unsigned int v133;
  WTF::StringImpl *v134;
  unint64_t v135;
  unsigned int v136;
  int v137;
  char v138;
  _BYTE v139[8];
  int v140;
  char *v141;
  char **v142;

  if (((unint64_t)a3 & 0xFF00000000) != 0)
  {
    WebCore::CanvasStyle::createFromStringWithOverrideAlpha((WebCore::CanvasStyle *)v99, a2, *(float *)&a3, *(WebCore::CanvasBase **)(a1 + 32));
    result = WebCore::CanvasRenderingContext2DBase::setStrokeStyle(a1, (uint64_t)v99);
    if (v101 && v100 != -1)
      return ((uint64_t (*)(__int128 *, char *))off_1E33DC6C8[v100])(&v122, v99);
    return result;
  }
  v5 = *(_DWORD *)(a1 + 132);
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x195CE145CLL);
  }
  result = WTF::equal((WTF *)*a2, *(const WTF::StringImpl **)(*(_QWORD *)(a1 + 120) + 560 * v5 - 560), a3);
  if ((result & 1) != 0)
    return result;
  if (*(_DWORD *)(a1 + 712))
  {
    WebCore::CanvasRenderingContext2DBase::realizeSavesLoop((WebCore::CanvasRenderingContext2DBase *)a1);
    if (*(_DWORD *)(a1 + 712))
    {
      {
        WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl += 2;
        WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage = (uint64_t)&WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl;
      }
      v63 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 144))(*(_QWORD *)(a1 + 32));
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v63 + 248))(v63, 6, 2, &WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage, 0);
    }
  }
  v7 = *(_QWORD *)(a1 + 32);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
  v15 = *(unsigned __int8 *)(v8 + 48);
  if (!*a2)
  {
    v16 = WebCore::CSSParserFastPaths::parseSimpleColor(0, (const char *)0x100000000, v15 != 1, v9, v10, v11, v12, v13, v14);
    if (!BYTE4(v16))
      goto LABEL_7;
LABEL_68:
    v8 = bswap32(v16) | 0x1104000000000000;
    goto LABEL_69;
  }
  v16 = WebCore::CSSParserFastPaths::parseSimpleColor(*((char **)*a2 + 1), (const char *)((*a2)[1] | ((unint64_t)(((*a2)[4] >> 2) & 1) << 32)), v15 != 1, v9, v10, v11, v12, v13, v14);
  if (BYTE4(v16))
    goto LABEL_68;
LABEL_7:
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7) & 1) != 0)
  {
    *(_DWORD *)(v7 - 88) += 2;
    LOWORD(v102) = 1792;
    v103 = 0;
    LOBYTE(v104) = 0;
    v105 = 0;
    LOBYTE(v106) = 0;
    v107 = 0;
    LOBYTE(v108) = 0;
    v109 = 0;
    LOBYTE(v110) = 0;
    v111 = 0;
    LOBYTE(v112) = 0;
    v113 = 0;
    LOBYTE(v114) = 0;
    v115 = 0;
    v116 = off_1E33DC660;
    v117 = (WebCore::Node *)(v7 - 112);
    v118 = 1;
    *((_QWORD *)&v102 + 1) = &v116;
  }
  else
  {
    v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 144))(v7);
    if (!v60 || *(_BYTE *)(v60 + 274))
      v62 = 3;
    else
      v62 = 7;
    DWORD2(v122) = 0;
    *(_QWORD *)&v122 = 0;
    v124 = 1;
    v125 = 0;
    v126 = 0;
    LOBYTE(v127) = 0;
    LOBYTE(v128) = 0;
    v130[0] = 0;
    v130[8] = 0;
    v130[16] = 0;
    v130[24] = 0;
    v130[32] = 0;
    v130[40] = 0;
    LOWORD(v102) = v62 << 8;
    *((_QWORD *)&v102 + 1) = 0;
    v103 = 0;
    v104 = 0x11040000000000FFLL;
    v123 = 0;
    v105 = 1;
    LOBYTE(v106) = 0;
    v107 = 0;
    LOBYTE(v108) = 0;
    v109 = 0;
    LOBYTE(v110) = 0;
    v111 = 0;
    LOBYTE(v112) = 0;
    v113 = 0;
    LOBYTE(v114) = 0;
    v115 = 0;
    LOBYTE(v116) = 0;
    v118 = 0;
    WebCore::CSSUnresolvedColorResolutionContext::~CSSUnresolvedColorResolutionContext((WebCore::CSSUnresolvedColorResolutionContext *)&v122, v61);
  }
  WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)&v122, a2, 0, 0);
  v18 = v127;
  v19 = (WTF *)((char *)v127 + 24 * v129);
  v121 = (__int128 *)v19;
  v21 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  do
  {
    if (v18 < v19 || (v20 & 1) != 0)
    {
      if (v18 >= v19)
        v22 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      else
        v22 = (__int128 *)v18;
      v23 = *(_DWORD *)v22;
    }
    else
    {
      v23 = v21 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v23;
      v20 = 1;
      v21 = v23;
    }
    v18 = (WTF *)((char *)v18 + 24);
  }
  while ((v23 & 0x3F) == 0x10);
  v120 = (__int128 *)((char *)v18 - 24);
  v139[0] = BYTE1(v102);
  v139[1] = v102;
  v24 = *(unsigned __int8 *)(v8 + 53);
  v139[2] = (*(_WORD *)(v8 + 51) & 0x20) != 0;
  v139[3] = v24 >> 7;
  v139[4] = *(_BYTE *)(v8 + 48);
  v140 = 0;
  WebCore::CSSPropertyParserHelpers::consumeColor((uint64_t)&v135, (WebCore::CSSPropertyParserHelpers *)&v120, (uint64_t)v139);
  if (v138)
  {
    v141 = (char *)&v102 + 8;
    if (v137 == -1)
      goto LABEL_146;
    v142 = &v141;
    ((void (*)(uint64_t *__return_ptr, char ***, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor11createColorERKNS8_35CSSUnresolvedColorResolutionContextEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSM_INS8_17HSLFunctionModernEEENSM_INS8_11HWBFunctionEEENSM_INS8_11LabFunctionEEENSM_INS8_11LCHFunctionEEENSM_INS8_13OKLabFunctionEEENSM_INS8_13OKLCHFunctionEEENSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEENSM_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEENSM_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEENSM_INS11_INS8_21ExtendedLinearEncodedIfS1J_EEEEEENSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSM_INS1R_INS1S_IfLS1T_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v137])(&v119, &v142, &v135);
    if (v138 && v137 != -1)
      ((void (*)(char ***, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v137])(&v142, &v135);
  }
  else
  {
    v119 = 0;
  }
  v25 = v120;
  v27 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  do
  {
    if (v25 < v121 || (v26 & 1) != 0)
    {
      if (v25 >= v121)
        v28 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      else
        v28 = v25;
      v29 = *(_DWORD *)v28;
    }
    else
    {
      v29 = v27 & 0xFF000000 | 0x1E;
      WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v29;
      v26 = 1;
      v27 = v29;
    }
    v25 = (__int128 *)((char *)v25 + 24);
  }
  while ((v29 & 0x3F) == 0x10);
  v120 = (__int128 *)((char *)v25 - 24);
  v8 = v119;
  if ((__int128 *)((char *)v25 - 24) != v121)
  {
    if ((v119 & 0x8000000000000) != 0)
    {
      v77 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFLL);
      do
        v78 = __ldaxr(v77);
      while (__stlxr(v78 - 1, v77));
      if (v78 == 1)
      {
        atomic_store(1u, v77);
        WTF::fastFree((WTF *)v77, v17);
      }
    }
    v8 = 0;
  }
  v30 = v134;
  v134 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)v30 -= 2;
  }
  if (v133)
  {
    v57 = v131;
    v58 = 8 * v133;
    do
    {
      v59 = *(WTF::StringImpl **)v57;
      *(_QWORD *)v57 = 0;
      if (v59)
      {
        if (*(_DWORD *)v59 == 2)
          WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v17);
        else
          *(_DWORD *)v59 -= 2;
      }
      v57 = (WTF *)((char *)v57 + 8);
      v58 -= 8;
    }
    while (v58);
  }
  v31 = v131;
  if (v131)
  {
    v131 = 0;
    v132 = 0;
    WTF::fastFree(v31, v17);
  }
  v32 = v127;
  if (v130 != (_BYTE *)v127 && v127 != 0)
  {
    v127 = 0;
    v128 = 0;
    WTF::fastFree(v32, v17);
  }
  v34 = (WTF *)v122;
  if (&v123 != (uint64_t *)v122)
    goto LABEL_147;
  while (1)
  {
    if (!v118)
      goto LABEL_48;
    v35 = v117;
    v117 = 0;
    if (!v35)
      goto LABEL_48;
    if (*((_DWORD *)v35 + 6) == 2)
    {
      if ((*((_WORD *)v35 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v35, v17);
LABEL_48:
      if (v115)
        goto LABEL_49;
      goto LABEL_50;
    }
    *((_DWORD *)v35 + 6) -= 2;
    if (v115)
    {
LABEL_49:
      if ((v114 & 0x8000000000000) != 0)
      {
        v79 = (unsigned int *)(v114 & 0xFFFFFFFFFFFFLL);
        do
        {
          v80 = __ldaxr(v79);
          v81 = v80 - 1;
        }
        while (__stlxr(v81, v79));
        if (!v81)
        {
          atomic_store(1u, v79);
          WTF::fastFree((WTF *)v79, v17);
        }
      }
    }
LABEL_50:
    if (v113)
    {
      if ((v112 & 0x8000000000000) != 0)
      {
        v82 = (unsigned int *)(v112 & 0xFFFFFFFFFFFFLL);
        do
        {
          v83 = __ldaxr(v82);
          v84 = v83 - 1;
        }
        while (__stlxr(v84, v82));
        if (!v84)
        {
          atomic_store(1u, v82);
          WTF::fastFree((WTF *)v82, v17);
        }
      }
    }
    if (v111)
    {
      if ((v110 & 0x8000000000000) != 0)
      {
        v85 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFLL);
        do
        {
          v86 = __ldaxr(v85);
          v87 = v86 - 1;
        }
        while (__stlxr(v87, v85));
        if (!v87)
        {
          atomic_store(1u, v85);
          WTF::fastFree((WTF *)v85, v17);
        }
      }
    }
    if (v109)
    {
      if ((v108 & 0x8000000000000) != 0)
      {
        v88 = (unsigned int *)(v108 & 0xFFFFFFFFFFFFLL);
        do
        {
          v89 = __ldaxr(v88);
          v90 = v89 - 1;
        }
        while (__stlxr(v90, v88));
        if (!v90)
        {
          atomic_store(1u, v88);
          WTF::fastFree((WTF *)v88, v17);
        }
      }
    }
    if (v107)
    {
      if ((v106 & 0x8000000000000) != 0)
      {
        v91 = (unsigned int *)(v106 & 0xFFFFFFFFFFFFLL);
        do
        {
          v92 = __ldaxr(v91);
          v93 = v92 - 1;
        }
        while (__stlxr(v93, v91));
        if (!v93)
        {
          atomic_store(1u, v91);
          WTF::fastFree((WTF *)v91, v17);
        }
      }
    }
    if (v105)
    {
      if ((v104 & 0x8000000000000) != 0)
      {
        v36 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFLL);
        do
        {
          v37 = __ldaxr(v36);
          v38 = v37 - 1;
        }
        while (__stlxr(v38, v36));
        if (!v38)
        {
          atomic_store(1u, v36);
          WTF::fastFree((WTF *)v36, v17);
        }
      }
    }
LABEL_69:
    if ((v8 & 0x4000000000000) != 0)
    {
      v39 = v8 & 0x8000000000000;
      if ((v8 & 0x8000000000000) != 0)
      {
        v65 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 + 1, v65));
        v96 = v8;
        do
          v67 = __ldaxr(v65);
        while (__stlxr(v67 + 1, v65));
        v97 = 0;
        do
        {
          v68 = __ldaxr(v65);
          v69 = v68 - 1;
        }
        while (__stlxr(v69, v65));
        if (!v69)
        {
          atomic_store(1u, v65);
          WTF::fastFree((WTF *)v65, v17);
        }
      }
      else
      {
        v96 = v8;
        v97 = 0;
      }
      v98 = 1;
    }
    else
    {
      LOBYTE(v96) = 0;
      v98 = 0;
      v39 = v8 & 0x8000000000000;
    }
    if (v39)
    {
      v74 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
      do
      {
        v75 = __ldaxr(v74);
        v76 = v75 - 1;
      }
      while (__stlxr(v76, v74));
      if (!v76)
      {
        atomic_store(1u, v74);
        WTF::fastFree((WTF *)v74, v17);
      }
    }
    if (!v98)
      goto LABEL_106;
    LOBYTE(v135) = 0;
    v136 = -1;
    v40 = v97;
    if (v97 != -1)
    {
      ((void (*)(__int128 *, unint64_t *, uint64_t *))off_1E33DC6F8[v97])(&v122, &v135, &v96);
      v136 = v40;
    }
    v41 = *(_DWORD *)(a1 + 132);
    if (!v41)
    {
      __break(0xC471u);
      JUMPOUT(0x195CE1464);
    }
    v42 = *(_QWORD *)(a1 + 120) + 560 * v41;
    if (!(*(_DWORD *)(v42 - 536) | v40))
    {
      v43 = (_QWORD *)(v42 - 544);
      v44 = *(_QWORD *)(v42 - 544);
      if ((v44 & 0x8000000000000) != 0)
      {
        if ((v135 & 0x8000000000000) != 0)
        {
          v122 = *(_OWORD *)((v44 & 0xFFFFFFFFFFFFLL) + 4);
          v102 = *(_OWORD *)((v135 & 0xFFFFFFFFFFFFLL) + 4);
          if (WebCore::operator==<float,4ul>((float *)&v122, (float *)&v102)
            && HIBYTE(*v43) == HIBYTE(v135)
            && BYTE6(*v43) == BYTE6(v135))
          {
            goto LABEL_100;
          }
        }
      }
      else if (v44 == v135 && (v135 & 0x8000000000000) == 0)
      {
        goto LABEL_100;
      }
      v40 = v136;
    }
    if (v40 == 2)
    {
      v70 = v135;
      v71 = (*(_DWORD *)v135)++;
      v72 = *(_QWORD *)(a1 + 32);
      if (*(_BYTE *)(v72 + 72) && !*(_BYTE *)(v70 + 16))
        *(_BYTE *)(v72 + 72) = 0;
      if (v71)
      {
        *(_DWORD *)v70 = v71;
      }
      else
      {
        v73 = *(WebCore::Pattern **)(v70 + 8);
        *(_QWORD *)(v70 + 8) = 0;
        if (v73)
        {
          if (*(_DWORD *)v73 == 1)
          {
            WebCore::Pattern::~Pattern(v73);
            WTF::fastFree(v94, v95);
          }
          else
          {
            --*(_DWORD *)v73;
          }
        }
        WTF::fastFree((WTF *)v70, v17);
      }
    }
    if (*(_DWORD *)(a1 + 712))
    {
      WebCore::CanvasRenderingContext2DBase::realizeSavesLoop((WebCore::CanvasRenderingContext2DBase *)a1);
      if (*(_DWORD *)(a1 + 712))
      {
        {
          WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl += 2;
          WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage = (uint64_t)&WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl;
        }
        v64 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 144))(*(_QWORD *)(a1 + 32));
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v64 + 248))(v64, 6, 2, &WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage, 0);
      }
    }
    v46 = *(_DWORD *)(a1 + 132);
    if (!v46)
    {
      __break(0xC471u);
      JUMPOUT(0x195CE146CLL);
    }
    v47 = *(_QWORD *)(a1 + 120) + 560 * v46;
    v48 = (WTF::StringImpl **)(v47 - 560);
    v8 = v47 - 544;
    v49 = *(unsigned int *)(v47 - 536);
    if ((_DWORD)v49 == -1)
    {
      if (v136 != -1)
      {
LABEL_90:
        *(_QWORD *)&v122 = v47 - 544;
        ((void (*)(__int128 *, uint64_t, unint64_t *))*(&off_1E33DC6E0 + v136))(&v122, v8, &v135);
        v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
        if (!v50)
          goto LABEL_100;
        goto LABEL_96;
      }
    }
    else
    {
      if (v136 != -1)
        goto LABEL_90;
      ((void (*)(__int128 *, uint64_t))off_1E33DC6C8[v49])(&v122, v8);
      *(_DWORD *)(v8 + 8) = -1;
    }
    v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
    if (!v50)
      goto LABEL_100;
LABEL_96:
    *(_QWORD *)&v122 = v50;
    *((_QWORD *)&v122 + 1) = v50;
    v123 = v50;
    v51 = *(unsigned int *)(v8 + 8);
    if ((_DWORD)v51 != -1)
      break;
LABEL_146:
    v34 = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_147:
    if (v34)
    {
      *(_QWORD *)&v122 = 0;
      DWORD2(v122) = 0;
      WTF::fastFree(v34, v17);
    }
  }
  *(_QWORD *)&v102 = &v122;
  ((void (*)(__int128 *, uint64_t))off_1E33DC928[v51])(&v102, v8);
  v52 = *v48;
  *v48 = 0;
  if (!v52)
  {
LABEL_100:
    v53 = v136;
    if (v136 == -1)
      goto LABEL_102;
    goto LABEL_101;
  }
  if (*(_DWORD *)v52 != 2)
  {
    *(_DWORD *)v52 -= 2;
    goto LABEL_100;
  }
  WTF::StringImpl::destroy(v52, (WTF::StringImpl *)v17);
  v53 = v136;
  if (v136 != -1)
LABEL_101:
    ((void (*)(__int128 *, unint64_t *))off_1E33DC6C8[v53])(&v122, &v135);
LABEL_102:
  if (v98)
  {
    if (v97 != -1)
      ((void (*)(__int128 *, uint64_t *))off_1E33DC6C8[v97])(&v122, &v96);
    v97 = -1;
  }
LABEL_106:
  v54 = *(_DWORD *)(a1 + 132);
  if (!v54)
  {
    __break(0xC471u);
    JUMPOUT(0x195CE1474);
  }
  v55 = (uint64_t *)(*(_QWORD *)(a1 + 120) + 560 * v54 - 560);
  v56 = *a2;
  if (*a2)
    *v56 += 2;
  result = *v55;
  *v55 = (uint64_t)v56;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v17);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void WebCore::CanvasStyle::createFromStringWithOverrideAlpha(WebCore::CanvasStyle *this, unsigned int **a2, float a3, WebCore::CanvasBase *a4)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;

  WebCore::parseColor(a2, a4, &v20);
  v7 = v20;
  if ((v20 & 0x4000000000000) == 0)
  {
    *(_BYTE *)this = 0;
    *((_BYTE *)this + 16) = 0;
    goto LABEL_8;
  }
  WebCore::Color::colorWithAlpha((uint64_t)&v20, a3, &v19);
  v8 = v19;
  if (v19)
  {
    v19 = 0;
    *(_QWORD *)this = v8;
    if ((v8 & 0x8000000000000) != 0)
    {
      v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
      *((_DWORD *)this + 2) = 0;
      do
      {
        v11 = __ldaxr(v9);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v9));
      if (!v12)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, v6);
      }
      goto LABEL_6;
    }
  }
  else
  {
    *(_QWORD *)this = 0;
  }
  *((_DWORD *)this + 2) = 0;
LABEL_6:
  *((_BYTE *)this + 16) = 1;
  if ((v19 & 0x8000000000000) != 0)
  {
    v16 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, v6);
    }
  }
  v7 = v20;
LABEL_8:
  if ((v7 & 0x8000000000000) != 0)
  {
    v13 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
    {
      atomic_store(1u, v13);
      WTF::fastFree((WTF *)v13, v6);
    }
  }
}

uint64_t WebCore::CanvasRenderingContext2DBase::setStrokeColor(uint64_t this, float a2, float a3)
{
  float v3;
  float v4;
  BOOL v5;
  float v6;
  unsigned int v7;
  uint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;

  v3 = 1.0;
  if (a2 <= 1.0)
    v4 = a2;
  else
    v4 = 1.0;
  v5 = a2 < 0.0;
  v6 = 0.0;
  if (v5)
    v4 = 0.0;
  if (a3 <= 1.0)
    v3 = a3;
  if (a3 >= 0.0)
    v6 = v3;
  v7 = *(_DWORD *)(this + 132);
  if (!v7)
  {
    __break(0xC471u);
    return this;
  }
  v8 = *(_QWORD *)(this + 120) + 560 * v7;
  if (*(_DWORD *)(v8 - 536))
  {
    v9 = v4 * 255.0;
    v10 = v6 * 255.0;
LABEL_13:
    v11 = llroundf(v9);
    v12 = 255;
    if (v11 >= 255)
      v11 = 255;
    v13 = v11 & ~(v11 >> 63);
    v14 = llroundf(v10);
    if (v14 < 255)
      v12 = v14;
    v20 = bswap32((v13 << 16) | ((v12 & ~(v12 >> 63)) << 24) | (v13 << 8) | v13) | 0x1104000000000000;
    v21 = 0;
    this = WebCore::CanvasRenderingContext2DBase::setStrokeStyle(this, &v20);
    if (v21 != -1)
      return ((uint64_t (*)(char *, uint64_t *))off_1E33DC6C8[v21])(&v22, &v20);
    return this;
  }
  v15 = (uint64_t *)(v8 - 544);
  v9 = v4 * 255.0;
  v10 = v6 * 255.0;
  v16 = llroundf(v4 * 255.0);
  v17 = 255;
  if (v16 >= 255)
    v16 = 255;
  v18 = llroundf(v10);
  if (v18 < 255)
    v17 = v18;
  v19 = *v15;
  if ((v19 & 0x8000000000000) != 0
    || v19 != (bswap32(((v17 & ~(v17 >> 63)) << 24) | ((v16 & ~(v16 >> 63)) << 16) | ((v16 & ~(v16 >> 63)) << 8) | v16 & ~(v16 >> 63)) | 0x1104000000000000))
  {
    goto LABEL_13;
  }
  return this;
}

uint64_t WebCore::CanvasRenderingContext2DBase::setStrokeColor(uint64_t this, float a2, float a3, float a4, float a5)
{
  float v5;
  BOOL v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  unsigned int v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;

  if (a2 <= 1.0)
    v5 = a2;
  else
    v5 = 1.0;
  v6 = a2 < 0.0;
  v7 = 0.0;
  if (v6)
    v8 = 0.0;
  else
    v8 = v5;
  if (a3 <= 1.0)
    v9 = a3;
  else
    v9 = 1.0;
  if (a3 < 0.0)
    v9 = 0.0;
  if (a4 <= 1.0)
    v10 = a4;
  else
    v10 = 1.0;
  if (a4 < 0.0)
    v10 = 0.0;
  if (a5 <= 1.0)
    v11 = a5;
  else
    v11 = 1.0;
  if (a5 >= 0.0)
    v7 = v11;
  v12 = *(_DWORD *)(this + 132);
  if (!v12)
  {
    __break(0xC471u);
    return this;
  }
  v13 = *(_QWORD *)(this + 120) + 560 * v12;
  if (*(_DWORD *)(v13 - 536))
  {
    v14 = v8 * 255.0;
    v15 = v9 * 255.0;
    v16 = v10 * 255.0;
    v17 = v7 * 255.0;
LABEL_25:
    v18 = llroundf(v14);
    v19 = 255;
    if (v18 >= 255)
      v18 = 255;
    v20 = llroundf(v15);
    v21 = v18 & ~(v18 >> 63);
    if (v20 >= 255)
      v22 = 255;
    else
      v22 = v20;
    v23 = v22 & ~(v22 >> 63);
    v24 = llroundf(v16);
    if (v24 >= 255)
      v24 = 255;
    v25 = v24 & ~(v24 >> 63);
    v26 = llroundf(v17);
    if (v26 < 255)
      v19 = v26;
    v34 = bswap32((v25 << 16) | ((v19 & ~(v19 >> 63)) << 24) | (v23 << 8) | v21) | 0x1104000000000000;
    v35 = 0;
    this = WebCore::CanvasRenderingContext2DBase::setStrokeStyle(this, &v34);
    if (v35 != -1)
      return ((uint64_t (*)(char *, uint64_t *))off_1E33DC6C8[v35])(&v36, &v34);
    return this;
  }
  v27 = (uint64_t *)(v13 - 544);
  v14 = v8 * 255.0;
  v15 = v9 * 255.0;
  v16 = v10 * 255.0;
  v17 = v7 * 255.0;
  v28 = llroundf(v8 * 255.0);
  v29 = 255;
  if (v28 >= 255)
    v28 = 255;
  v30 = llroundf(v9 * 255.0);
  if (v30 >= 255)
    v30 = 255;
  v31 = llroundf(v10 * 255.0);
  if (v31 >= 255)
    v31 = 255;
  v32 = llroundf(v17);
  if (v32 < 255)
    v29 = v32;
  v33 = *v27;
  if ((v33 & 0x8000000000000) != 0
    || v33 != (bswap32(((v29 & ~(v29 >> 63)) << 24) | ((v31 & ~(v31 >> 63)) << 16) | ((v30 & ~(v30 >> 63)) << 8) | v28 & ~(v28 >> 63)) | 0x1104000000000000))
  {
    goto LABEL_25;
  }
  return this;
}

uint64_t WebCore::CanvasRenderingContext2DBase::setFillColor(uint64_t a1, unsigned int **a2, const WTF::StringImpl *a3)
{
  unsigned int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  unsigned int *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  WTF *v20;
  WTF *v21;
  char v22;
  unsigned int v23;
  __int128 *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  __int128 *v29;
  char v30;
  unsigned int v31;
  __int128 *v32;
  unsigned int v33;
  WTF::StringImpl *v34;
  WTF *v35;
  WTF *v36;
  WTF *v38;
  WebCore::Node *v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  unsigned int v56;
  uint64_t *v57;
  unsigned int *v58;
  WTF *v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  uint64_t v62;
  void *v63;
  __int16 v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int *v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  WebCore::Pattern *v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  WTF *v99;
  void *v100;
  uint64_t v101;
  int v102;
  char v103;
  char v104[8];
  int v105;
  char v106;
  __int128 v107;
  int v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  char v120;
  void (**v121)(WebCore::CanvasStyleColorResolutionDelegate *__hidden);
  WebCore::Node *v122;
  char v123;
  uint64_t v124;
  __int128 *v125;
  __int128 *v126;
  WTF *v127[2];
  WTF *v128;
  char v129;
  char v130;
  char v131;
  WTF *v132;
  int v133;
  unsigned int v134;
  _BYTE v135[768];
  WTF *v136;
  int v137;
  unsigned int v138;
  WTF::StringImpl *v139;
  unint64_t v140;
  unsigned int v141;
  int v142;
  char v143;
  _BYTE v144[8];
  int v145;
  char *v146;
  char **v147;

  if (((unint64_t)a3 & 0xFF00000000) != 0)
  {
LABEL_142:
    WebCore::CanvasStyle::createFromStringWithOverrideAlpha((WebCore::CanvasStyle *)v104, a2, *(float *)&a3, *(WebCore::CanvasBase **)(a1 + 32));
    result = WebCore::CanvasRenderingContext2DBase::setFillStyle(a1, (uint64_t)v104);
    if (v106 && v105 != -1)
      return ((uint64_t (*)(WTF **, char *))off_1E33DC6C8[v105])(v127, v104);
    return result;
  }
  v5 = *(_DWORD *)(a1 + 132);
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x195CE24D0);
  }
  result = WTF::equal((WTF *)*a2, *(const WTF::StringImpl **)(*(_QWORD *)(a1 + 120) + 560 * v5 - 552), a3);
  if ((result & 1) == 0)
  {
    if (*(_DWORD *)(a1 + 712))
    {
      WebCore::CanvasRenderingContext2DBase::realizeSavesLoop((WebCore::CanvasRenderingContext2DBase *)a1);
      if (*(_DWORD *)(a1 + 712))
      {
        {
          WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl += 2;
          WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage = (uint64_t)&WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl;
        }
        v65 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 144))(*(_QWORD *)(a1 + 32));
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v65 + 248))(v65, 6, 2, &WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage, 0);
      }
    }
    v7 = *(_QWORD *)(a1 + 32);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 96))(v7);
    v15 = *a2;
    if (*a2)
    {
      v16 = (char *)*((_QWORD *)v15 + 1);
      v17 = v15[1] | ((unint64_t)((v15[4] >> 2) & 1) << 32);
    }
    else
    {
      v16 = 0;
      v17 = 0x100000000;
    }
    v18 = WebCore::CSSParserFastPaths::parseSimpleColor(v16, (const char *)v17, *(_BYTE *)(v8 + 48) != 1, v9, v10, v11, v12, v13, v14);
    if (BYTE4(v18))
    {
      v27 = bswap32(v18) | 0x1104000000000000;
    }
    else
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7) & 1) != 0)
      {
        *(_DWORD *)(v7 - 88) += 2;
        LOWORD(v107) = 1792;
        v108 = 0;
        LOBYTE(v109) = 0;
        v110 = 0;
        LOBYTE(v111) = 0;
        v112 = 0;
        LOBYTE(v113) = 0;
        v114 = 0;
        LOBYTE(v115) = 0;
        v116 = 0;
        LOBYTE(v117) = 0;
        v118 = 0;
        LOBYTE(v119) = 0;
        v120 = 0;
        v121 = off_1E33DC660;
        v122 = (WebCore::Node *)(v7 - 112);
        v123 = 1;
        *((_QWORD *)&v107 + 1) = &v121;
      }
      else
      {
        v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 144))(v7);
        if (!v62 || *(_BYTE *)(v62 + 274))
          v64 = 3;
        else
          v64 = 7;
        LODWORD(v127[1]) = 0;
        v127[0] = 0;
        v129 = 1;
        v130 = 0;
        v131 = 0;
        LOBYTE(v132) = 0;
        LOBYTE(v133) = 0;
        v135[0] = 0;
        v135[8] = 0;
        v135[16] = 0;
        v135[24] = 0;
        v135[32] = 0;
        v135[40] = 0;
        LOWORD(v107) = v64 << 8;
        *((_QWORD *)&v107 + 1) = 0;
        v108 = 0;
        v109 = 0x11040000000000FFLL;
        v128 = 0;
        v110 = 1;
        LOBYTE(v111) = 0;
        v112 = 0;
        LOBYTE(v113) = 0;
        v114 = 0;
        LOBYTE(v115) = 0;
        v116 = 0;
        LOBYTE(v117) = 0;
        v118 = 0;
        LOBYTE(v119) = 0;
        v120 = 0;
        LOBYTE(v121) = 0;
        v123 = 0;
        WebCore::CSSUnresolvedColorResolutionContext::~CSSUnresolvedColorResolutionContext((WebCore::CSSUnresolvedColorResolutionContext *)v127, v63);
      }
      WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v127, a2, 0, 0);
      v20 = v132;
      v21 = (WTF *)((char *)v132 + 24 * v134);
      v126 = (__int128 *)v21;
      v23 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      do
      {
        if (v20 < v21 || (v22 & 1) != 0)
        {
          if (v20 >= v21)
            v24 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          else
            v24 = (__int128 *)v20;
          v25 = *(_DWORD *)v24;
        }
        else
        {
          v25 = v23 & 0xFF000000 | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v25;
          v22 = 1;
          v23 = v25;
        }
        v20 = (WTF *)((char *)v20 + 24);
      }
      while ((v25 & 0x3F) == 0x10);
      v125 = (__int128 *)((char *)v20 - 24);
      v144[0] = BYTE1(v107);
      v144[1] = v107;
      v26 = *(unsigned __int8 *)(v8 + 53);
      v144[2] = (*(_WORD *)(v8 + 51) & 0x20) != 0;
      v144[3] = v26 >> 7;
      v144[4] = *(_BYTE *)(v8 + 48);
      v145 = 0;
      WebCore::CSSPropertyParserHelpers::consumeColor((uint64_t)&v140, (WebCore::CSSPropertyParserHelpers *)&v125, (uint64_t)v144);
      if (v143)
      {
        v146 = (char *)&v107 + 8;
        if (v142 == -1)
        {
LABEL_141:
          std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_142;
        }
        v147 = &v146;
        ((void (*)(uint64_t *__return_ptr, char ***, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore18CSSUnresolvedColor11createColorERKNS8_35CSSUnresolvedColorResolutionContextEE3__0JEEEEEJRKNS0_6__implIJNS8_26CSSUnresolvedAbsoluteColorENS8_25CSSUnresolvedColorKeywordENS8_21CSSUnresolvedColorHexENS8_21CSSUnresolvedColorMixENS8_22CSSUnresolvedLightDarkENS8_26CSSUnresolvedRelativeColorINS8_25RGBFunctionModernRelativeEEENSM_INS8_17HSLFunctionModernEEENSM_INS8_11HWBFunctionEEENSM_INS8_11LabFunctionEEENSM_INS8_11LCHFunctionEEENSM_INS8_13OKLabFunctionEEENSM_INS8_13OKLCHFunctionEEENSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_19DisplayP3DescriptorEEEEEEENSM_INS11_INS12_IfNS8_21ProPhotoRGBDescriptorEEEEEEENSM_INS11_INS12_IfNS8_17Rec2020DescriptorEEEEEEENSM_INS11_INS12_IfNS8_15SRGBADescriptorEEEEEEENSM_INS11_INS8_21ExtendedLinearEncodedIfS1J_EEEEEENSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEENSM_INS1R_INS1S_IfLS1T_1EEEEEEEEEEEEEDcOT_DpOT0____fmatrix[v142])(&v124, &v147, &v140);
        if (v143 && v142 != -1)
          ((void (*)(char ***, unint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore26CSSUnresolvedAbsoluteColorENS6_25CSSUnresolvedColorKeywordENS6_21CSSUnresolvedColorHexENS6_21CSSUnresolvedColorMixENS6_22CSSUnresolvedLightDarkENS6_26CSSUnresolvedRelativeColorINS6_25RGBFunctionModernRelativeEEENSC_INS6_17HSLFunctionModernEEENSC_INS6_11HWBFunctionEEENSC_INS6_11LabFunctionEEENSC_INS6_11LCHFunctionEEENSC_INS6_13OKLabFunctionEEENSC_INS6_13OKLCHFunctionEEENSC_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_19DisplayP3DescriptorEEEEEEENSC_INSR_INSS_IfNS6_21ProPhotoRGBDescriptorEEEEEEENSC_INSR_INSS_IfNS6_17Rec2020DescriptorEEEEEEENSC_INSR_INSS_IfNS6_15SRGBADescriptorEEEEEEENSC_INSR_INS6_21ExtendedLinearEncodedIfS19_EEEEEENSC_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEENSC_INS1H_INS1I_IfLS1J_1EEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS1S_EEEDcOS1T_DpOT0____fmatrix[v142])(&v147, &v140);
      }
      else
      {
        v124 = 0;
      }
      v29 = v125;
      v31 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
      do
      {
        if (v29 < v126 || (v30 & 1) != 0)
        {
          if (v29 >= v126)
            v32 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
          else
            v32 = v29;
          v33 = *(_DWORD *)v32;
        }
        else
        {
          v33 = v31 & 0xFF000000 | 0x1E;
          WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v33;
          v30 = 1;
          v31 = v33;
        }
        v29 = (__int128 *)((char *)v29 + 24);
      }
      while ((v33 & 0x3F) == 0x10);
      v125 = (__int128 *)((char *)v29 - 24);
      v27 = v124;
      if ((__int128 *)((char *)v29 - 24) != v126)
      {
        if ((v124 & 0x8000000000000) != 0)
        {
          v79 = (unsigned int *)(v124 & 0xFFFFFFFFFFFFLL);
          do
            v80 = __ldaxr(v79);
          while (__stlxr(v80 - 1, v79));
          if (v80 == 1)
          {
            atomic_store(1u, v79);
            WTF::fastFree((WTF *)v79, v19);
          }
        }
        v27 = 0;
      }
      v34 = v139;
      v139 = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v19);
        else
          *(_DWORD *)v34 -= 2;
      }
      if (v138)
      {
        v59 = v136;
        v60 = 8 * v138;
        do
        {
          v61 = *(WTF::StringImpl **)v59;
          *(_QWORD *)v59 = 0;
          if (v61)
          {
            if (*(_DWORD *)v61 == 2)
              WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v19);
            else
              *(_DWORD *)v61 -= 2;
          }
          v59 = (WTF *)((char *)v59 + 8);
          v60 -= 8;
        }
        while (v60);
      }
      v35 = v136;
      if (v136)
      {
        v136 = 0;
        v137 = 0;
        WTF::fastFree(v35, v19);
      }
      v36 = v132;
      if (v135 != (_BYTE *)v132 && v132 != 0)
      {
        v132 = 0;
        v133 = 0;
        WTF::fastFree(v36, v19);
      }
      v38 = v127[0];
      if (&v128 != (WTF **)v127[0] && v127[0])
      {
        v127[0] = 0;
        LODWORD(v127[1]) = 0;
        WTF::fastFree(v38, v19);
      }
      if (v123)
      {
        v39 = v122;
        v122 = 0;
        if (v39)
        {
          if (*((_DWORD *)v39 + 6) == 2)
          {
            if ((*((_WORD *)v39 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v39, v19);
          }
          else
          {
            *((_DWORD *)v39 + 6) -= 2;
          }
        }
      }
      if (v120)
      {
        if ((v119 & 0x8000000000000) != 0)
        {
          v81 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFLL);
          do
          {
            v82 = __ldaxr(v81);
            v83 = v82 - 1;
          }
          while (__stlxr(v83, v81));
          if (!v83)
          {
            atomic_store(1u, v81);
            WTF::fastFree((WTF *)v81, v19);
          }
        }
      }
      if (v118)
      {
        if ((v117 & 0x8000000000000) != 0)
        {
          v84 = (unsigned int *)(v117 & 0xFFFFFFFFFFFFLL);
          do
          {
            v85 = __ldaxr(v84);
            v86 = v85 - 1;
          }
          while (__stlxr(v86, v84));
          if (!v86)
          {
            atomic_store(1u, v84);
            WTF::fastFree((WTF *)v84, v19);
          }
        }
      }
      if (v116)
      {
        if ((v115 & 0x8000000000000) != 0)
        {
          v87 = (unsigned int *)(v115 & 0xFFFFFFFFFFFFLL);
          do
          {
            v88 = __ldaxr(v87);
            v89 = v88 - 1;
          }
          while (__stlxr(v89, v87));
          if (!v89)
          {
            atomic_store(1u, v87);
            WTF::fastFree((WTF *)v87, v19);
          }
        }
      }
      if (v114)
      {
        if ((v113 & 0x8000000000000) != 0)
        {
          v90 = (unsigned int *)(v113 & 0xFFFFFFFFFFFFLL);
          do
          {
            v91 = __ldaxr(v90);
            v92 = v91 - 1;
          }
          while (__stlxr(v92, v90));
          if (!v92)
          {
            atomic_store(1u, v90);
            WTF::fastFree((WTF *)v90, v19);
          }
        }
      }
      if (v112)
      {
        if ((v111 & 0x8000000000000) != 0)
        {
          v93 = (unsigned int *)(v111 & 0xFFFFFFFFFFFFLL);
          do
          {
            v94 = __ldaxr(v93);
            v95 = v94 - 1;
          }
          while (__stlxr(v95, v93));
          if (!v95)
          {
            atomic_store(1u, v93);
            WTF::fastFree((WTF *)v93, v19);
          }
        }
      }
      if (v110)
      {
        if ((v109 & 0x8000000000000) != 0)
        {
          v96 = (unsigned int *)(v109 & 0xFFFFFFFFFFFFLL);
          do
          {
            v97 = __ldaxr(v96);
            v98 = v97 - 1;
          }
          while (__stlxr(v98, v96));
          if (!v98)
          {
            atomic_store(1u, v96);
            WTF::fastFree((WTF *)v96, v19);
          }
        }
      }
      if ((v27 & 0x4000000000000) == 0)
      {
        LOBYTE(v101) = 0;
        v103 = 0;
        v28 = v27 & 0x8000000000000;
        goto LABEL_67;
      }
    }
    v28 = v27 & 0x8000000000000;
    if ((v27 & 0x8000000000000) != 0)
    {
      v67 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFLL);
      do
        v68 = __ldaxr(v67);
      while (__stlxr(v68 + 1, v67));
      v101 = v27;
      do
        v69 = __ldaxr(v67);
      while (__stlxr(v69 + 1, v67));
      v102 = 0;
      do
      {
        v70 = __ldaxr(v67);
        v71 = v70 - 1;
      }
      while (__stlxr(v71, v67));
      if (!v71)
      {
        atomic_store(1u, v67);
        WTF::fastFree((WTF *)v67, v19);
      }
    }
    else
    {
      v101 = v27;
      v102 = 0;
    }
    v103 = 1;
LABEL_67:
    if (v28)
    {
      v76 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFLL);
      do
      {
        v77 = __ldaxr(v76);
        v78 = v77 - 1;
      }
      while (__stlxr(v78, v76));
      if (!v78)
      {
        atomic_store(1u, v76);
        WTF::fastFree((WTF *)v76, v19);
      }
    }
    if (!v103)
      goto LABEL_96;
    LOBYTE(v140) = 0;
    v141 = -1;
    v40 = v102;
    if (v102 != -1)
    {
      ((void (*)(WTF **, unint64_t *, uint64_t *))off_1E33DC6F8[v102])(v127, &v140, &v101);
      v141 = v40;
    }
    v41 = *(_DWORD *)(a1 + 132);
    if (!v41)
    {
      __break(0xC471u);
      JUMPOUT(0x195CE24D8);
    }
    v42 = *(_QWORD *)(a1 + 120) + 560 * v41;
    if (!(*(_DWORD *)(v42 - 520) | v40))
    {
      v43 = (_QWORD *)(v42 - 528);
      v44 = *(_QWORD *)(v42 - 528);
      if ((v44 & 0x8000000000000) != 0)
      {
        if ((v140 & 0x8000000000000) != 0)
        {
          *(_OWORD *)v127 = *(_OWORD *)((v44 & 0xFFFFFFFFFFFFLL) + 4);
          v107 = *(_OWORD *)((v140 & 0xFFFFFFFFFFFFLL) + 4);
          if (WebCore::operator==<float,4ul>((float *)v127, (float *)&v107)
            && HIBYTE(*v43) == HIBYTE(v140)
            && BYTE6(*v43) == BYTE6(v140))
          {
            goto LABEL_90;
          }
        }
      }
      else if (v44 == v140 && (v140 & 0x8000000000000) == 0)
      {
        goto LABEL_90;
      }
      v40 = v141;
    }
    if (v40 == 2)
    {
      v72 = v140;
      v73 = (*(_DWORD *)v140)++;
      v74 = *(_QWORD *)(a1 + 32);
      if (*(_BYTE *)(v74 + 72) && !*(_BYTE *)(v72 + 16))
        *(_BYTE *)(v74 + 72) = 0;
      if (v73)
      {
        *(_DWORD *)v72 = v73;
      }
      else
      {
        v75 = *(WebCore::Pattern **)(v72 + 8);
        *(_QWORD *)(v72 + 8) = 0;
        if (v75)
        {
          if (*(_DWORD *)v75 == 1)
          {
            WebCore::Pattern::~Pattern(v75);
            WTF::fastFree(v99, v100);
          }
          else
          {
            --*(_DWORD *)v75;
          }
        }
        WTF::fastFree((WTF *)v72, v19);
      }
    }
    if (*(_DWORD *)(a1 + 712))
    {
      WebCore::CanvasRenderingContext2DBase::realizeSavesLoop((WebCore::CanvasRenderingContext2DBase *)a1);
      if (*(_DWORD *)(a1 + 712))
      {
        {
          WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl += 2;
          WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage = (uint64_t)&WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::$_0::operator() const(void)::impl;
        }
        v66 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 144))(*(_QWORD *)(a1 + 32));
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v66 + 248))(v66, 6, 2, &WebCore::CanvasRenderingContext2DBase::realizeSaves(void)::consoleMessage, 0);
      }
    }
    v46 = *(unsigned int *)(a1 + 132);
    if (!(_DWORD)v46)
    {
      __break(0xC471u);
      JUMPOUT(0x195CE24E0);
    }
    v47 = v46 - 1;
    v48 = *(_QWORD *)(a1 + 120);
    v49 = v48 + 560 * (v46 - 1);
    v50 = v49 + 32;
    v51 = *(unsigned int *)(v49 + 40);
    if ((_DWORD)v51 == -1)
    {
      if (v141 != -1)
        goto LABEL_84;
    }
    else
    {
      if (v141 != -1)
      {
LABEL_84:
        v127[0] = (WTF *)(v49 + 32);
        ((void (*)(WTF **, uint64_t, unint64_t *))*(&off_1E33DC6E0 + v141))(v127, v50, &v140);
        goto LABEL_85;
      }
      ((void (*)(WTF **, uint64_t))off_1E33DC6C8[v51])(v127, v50);
      *(_DWORD *)(v50 + 8) = -1;
    }
LABEL_85:
    v52 = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
    if (v52)
    {
      v127[0] = v52;
      v127[1] = v52;
      v128 = v52;
      v53 = *(unsigned int *)(v50 + 8);
      if ((_DWORD)v53 != -1)
      {
        *(_QWORD *)&v107 = v127;
        ((void (*)(__int128 *, uint64_t))off_1E33DC940[v53])(&v107, v50);
        v54 = v48 + 560 * v47;
        v55 = *(WTF::StringImpl **)(v54 + 8);
        *(_QWORD *)(v54 + 8) = 0;
        if (v55)
        {
          if (*(_DWORD *)v55 == 2)
            WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v19);
          else
            *(_DWORD *)v55 -= 2;
        }
        goto LABEL_90;
      }
      goto LABEL_141;
    }
LABEL_90:
    if (v141 != -1)
      ((void (*)(WTF **, unint64_t *))off_1E33DC6C8[v141])(v127, &v140);
    if (v103)
    {
      if (v102 != -1)
        ((void (*)(WTF **, uint64_t *))off_1E33DC6C8[v102])(v127, &v101);
      v102 = -1;
    }
LABEL_96:
    v56 = *(_DWORD *)(a1 + 132);
    if (!v56)
    {
      __break(0xC471u);
      JUMPOUT(0x195CE24E8);
    }
    v57 = (uint64_t *)(*(_QWORD *)(a1 + 120) + 560 * v56 - 552);
    v58 = *a2;
    if (*a2)
      *v58 += 2;
    result = *v57;
    *v57 = (uint64_t)v58;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v19);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::CanvasRenderingContext2DBase::setFillColor(uint64_t this, float a2, float a3)
{
  float v3;
  float v4;
  BOOL v5;
  float v6;
  unsigned int v7;
  uint64_t v8;
  float v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char v22;

  v3 = 1.0;
  if (a2 <= 1.0)
    v4 = a2;
  else
    v4 = 1.0;
  v5 = a2 < 0.0;
  v6 = 0.0;
  if (v5)
    v4 = 0.0;
  if (a3 <= 1.0)
    v3 = a3;
  if (a3 >= 0.0)
    v6 = v3;
  v7 = *(_DWORD *)(this + 132);
  if (!v7)
  {
    __break(0xC471u);
    return this;
  }
  v8 = *(_QWORD *)(this + 120) + 560 * v7;
  if (*(_DWORD *)(v8 - 520))
  {
    v9 = v4 * 255.0;
    v10 = v6 * 255.0;
LABEL_13:
    v11 = llroundf(v9);
    v12 = 255;
    if (v11 >= 255)
      v11 = 255;
    v13 = v11 & ~(v11 >> 63);
    v14 = llroundf(v10);
    if (v14 < 255)
      v12 = v14;
    v20 = bswap32((v13 << 16) | ((v12 & ~(v12 >> 63)) << 24) | (v13 << 8) | v13) | 0x1104000000000000;
    v21 = 0;
    this = WebCore::CanvasRenderingContext2DBase::setFillStyle(this, &v20);
    if (v21 != -1)
      return ((uint64_t (*)(char *, uint64_t *))off_1E33DC6C8[v21])(&v22, &v20);
    return this;
  }
  v15 = (uint64_t *)(v8 - 528);
  v9 = v4 * 255.0;
  v10 = v6 * 255.0;
  v16 = llroundf(v4 * 255.0);
  v17 = 255;
  if (v16 >= 255)
    v16 = 255;
  v18 = llroundf(v10);
  if (v18 < 255)
    v17 = v18;
  v19 = *v15;
  if ((v19 & 0x8000000000000) != 0
    || v19 != (bswap32(((v17 & ~(v17 >> 63)) << 24) | ((v16 & ~(v16 >> 63)) << 16) | ((v16 & ~(v16 >> 63)) << 8) | v16 & ~(v16 >> 63)) | 0x1104000000000000))
  {
    goto LABEL_13;
  }
  return this;
}

uint64_t WebCore::CanvasRenderingContext2DBase::setFillColor(uint64_t this, float a2, float a3, float a4, float a5)
{
  float v5;
  BOOL v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  unsigned int v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  char v36;

  if (a2 <= 1.0)
    v5 = a2;
  else
    v5 = 1.0;
  v6 = a2 < 0.0;
  v7 = 0.0;
  if (v6)
    v8 = 0.0;
  else
    v8 = v5;
  if (a3 <= 1.0)
    v9 = a3;
  else
    v9 = 1.0;
  if (a3 < 0.0)
    v9 = 0.0;
  if (a4 <= 1.0)
    v10 = a4;
  else
    v10 = 1.0;
  if (a4 < 0.0)
    v10 = 0.0;
  if (a5 <= 1.0)
    v11 = a5;
  else
    v11 = 1.0;
  if (a5 >= 0.0)
    v7 = v11;
  v12 = *(_DWORD *)(this + 132);
  if (!v12)
  {
    __break(0xC471u);
    return this;
  }
  v13 = *(_QWORD *)(this + 120) + 560 * v12;
  if (*(_DWORD *)(v13 - 520))
  {
    v14 = v8 * 255.0;
    v15 = v9 * 255.0;
    v16 = v10 * 255.0;
    v17 = v7 * 255.0;
LABEL_25:
    v18 = llroundf(v14);
    v19 = 255;
    if (v18 >= 255)
      v18 = 255;
    v20 = llroundf(v15);
    v21 = v18 & ~(v18 >> 63);
    if (v20 >= 255)
      v22 = 255;
    else
      v22 = v20;
    v23 = v22 & ~(v22 >> 63);
    v24 = llroundf(v16);
    if (v24 >= 255)
      v24 = 255;
    v25 = v24 & ~(v24 >> 63);
    v26 = llroundf(v17);
    if (v26 < 255)
      v19 = v26;
    v34 = bswap32((v25 << 16) | ((v19 & ~(v19 >> 63)) << 24) | (v23 << 8) | v21) | 0x1104000000000000;
    v35 = 0;
    this = WebCore::CanvasRenderingContext2DBase::setFillStyle(this, &v34);
    if (v35 != -1)
      return ((uint64_t (*)(char *, uint64_t *))off_1E33DC6C8[v35])(&v36, &v34);
    return this;
  }
  v27 = (uint64_t *)(v13 - 528);
  v14 = v8 * 255.0;
  v15 = v9 * 255.0;
  v16 = v10 * 255.0;
  v17 = v7 * 255.0;
  v28 = llroundf(v8 * 255.0);
  v29 = 255;
  if (v28 >= 255)
    v28 = 255;
  v30 = llroundf(v9 * 255.0);
  if (v30 >= 255)
    v30 = 255;
  v31 = llroundf(v10 * 255.0);
  if (v31 >= 255)
    v31 = 255;
  v32 = llroundf(v17);
  if (v32 < 255)
    v29 = v32;
  v33 = *v27;
  if ((v33 & 0x8000000000000) != 0
    || v33 != (bswap32(((v29 & ~(v29 >> 63)) << 24) | ((v31 & ~(v31 >> 63)) << 16) | ((v30 & ~(v30 >> 63)) << 8) | v28 & ~(v28 >> 63)) | 0x1104000000000000))
  {
    goto LABEL_25;
  }
  return this;
}

uint64_t WebCore::CanvasRenderingContext2DBase::fill(uint64_t a1, uint64_t a2)
{
  float64x2_t *v2;
  uint64_t v3;
  float v4;
  unsigned int v5;
  uint64_t v7;
  WTF *v8;
  CGFloat a;
  uint64_t result;
  void *v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double *v62;
  double v63;
  double v64;
  double v65;
  double v66;
  float v67;
  float v68;
  float v69;
  float v70;
  uint64_t v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  CGMutablePathRef v86;
  const void *v87;
  uint64_t v88;
  uint64_t v89;
  WTF::StringImpl **v90;
  WTF *v91;
  uint64_t v92;
  WebCore::FontCascadeFonts **v93;
  WebCore::FontCascadeFonts *v94;
  int v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  uint64_t v107;
  WTF *v108;
  uint64_t v109;
  WTF *v110;
  WTF::StringImpl *v111;
  WTF *v112;
  unsigned int **v113;
  WTF *v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  uint64_t v117;
  WTF **v118;
  uint64_t v119;
  WTF *v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  uint64_t v123;
  WTF *v124;
  _QWORD *v125;
  WTF *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _DWORD *v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  double v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v145;
  double v147;
  double v148;
  double v149;
  double v150;
  _BOOL4 v151;
  _BOOL4 v152;
  double v153;
  BOOL v154;
  BOOL v155;
  int v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  CGMutablePathRef v160;
  const void *v161;
  uint64_t v162;
  CGFloat v163;
  unsigned int *v164;
  CGFloat v165;
  unsigned int *v166;
  float v167;
  float v168;
  float v169;
  float v170;
  unsigned int *v171;
  unsigned int *v172;
  unsigned int v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  void *v178;
  uint64_t v179;
  WTF *v180;
  void *v181;
  WTF *v182;
  void *v183;
  WTF *v184;
  void *v185;
  double v186;
  double v187;
  double v188;
  double v189;
  float v190;
  float v191;
  double v192;
  double v193;
  float v194;
  float v195;
  double v196;
  double v197;
  double v198;
  double v199;
  double v200;
  float v201;
  float v202;
  double v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v209;
  float v210;
  float v212;
  float v213;
  float v215;
  float v216;
  uint64_t v218;
  WTF::StringImpl **v219;
  uint64_t v220;
  WTF::StringImpl *v221;
  uint64_t v222;
  uint64_t v223;
  unsigned int *v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int *v227;
  unsigned int *v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int *v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int *v234;
  unsigned int *v235;
  unsigned int v236;
  unsigned int v237;
  uint64_t v238;
  uint64_t v239;
  WTF::StringImpl **v244;
  uint64_t v245;
  WTF::StringImpl *v246;
  WTF::StringImpl **v247;
  uint64_t v248;
  WTF::StringImpl *v249;
  unsigned int *v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int v256;
  int32x4_t v257;
  uint64_t v258;
  float32x4_t v259;
  float32x4_t v260;
  __int128 v261;
  unsigned int *v262;
  unsigned int v263;
  unsigned int v264;
  float v265;
  float v266;
  float v267;
  float v268;
  float v269;
  float v270;
  WebCore::Path *v271;
  double v272;
  CGAffineTransform transform;
  char v274;
  CGAffineTransform *p_transform;
  CGAffineTransform v276;

  v5 = *(_DWORD *)(a1 + 132);
  if (!v5)
  {
    __break(0xC471u);
    JUMPOUT(0x195CE3E58);
  }
  v7 = a1;
  v8 = (WTF *)(a1 + 48);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 120) + 560 * v5 - 324))
  {
    WebCore::Path::fastBoundingRect((WebCore::Path *)(a1 + 48));
    *(_QWORD *)&transform.a = __PAIR64__(v254, v253);
    *(_QWORD *)&transform.b = __PAIR64__(v256, v255);
    WebCore::CanvasFilterContextSwitcher::create((uint64_t **)v7, (WebCore::CanvasRenderingContext2DBase *)&transform, (uint64_t **)&v276);
    a = v276.a;
    v276.a = 0.0;
    std::unique_ptr<WebCore::CanvasFilterContextSwitcher>::~unique_ptr[abi:sn180100]((uint64_t **)&v276);
  }
  else
  {
    a = 0.0;
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 240))(v7);
  if (result)
  {
    v12 = *(_DWORD *)(v7 + 132);
    if (!v12)
    {
      __break(0xC471u);
      JUMPOUT(0x195CE3E60);
    }
    if (*(_BYTE *)(*(_QWORD *)(v7 + 120) + 560 * v12 - 400))
    {
      v13 = result;
      if (*(_DWORD *)(result + 88) != 1)
        goto LABEL_8;
      if (*(_DWORD *)(result + 32))
        goto LABEL_8;
      v222 = *(_QWORD *)(result + 24);
      if (!v222)
        goto LABEL_8;
      v223 = *(unsigned int *)(v222 + 76);
      if ((_DWORD)v223 == -1)
        goto LABEL_389;
      *(_QWORD *)&transform.a = &v276;
      result = ((uint64_t (*)(CGAffineTransform *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore8Gradient10isZeroSizeEvE3__0JZNKS9_10isZeroSizeEvE3__1ZNKS9_10isZeroSizeEvE3__2EEEEEJRKNS0_6__implIJNS9_10LinearDataENS9_10RadialDataENS9_9ConicDataEEEEEEEDcOT_DpOT0____fmatrix[v223])(&transform, v222 + 48);
      if ((result & 1) == 0)
      {
LABEL_8:
        v14 = *(_DWORD *)(v7 + 112);
        if (v14 == 2)
        {
          v47 = *(_QWORD *)(v7 + 56);
          if (v47)
          {
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 200))(v47);
            if ((result & 1) != 0)
              goto LABEL_31;
          }
        }
        else if (!v14)
        {
          goto LABEL_31;
        }
        v2 = (float64x2_t *)(v13 + 8);
        LODWORD(v3) = *(unsigned __int8 *)(v13 + 192);
        if (((_DWORD)a2 != 0) == (*(_BYTE *)(v13 + 192) == 0))
        {
          *(_BYTE *)(v13 + 192) = (_DWORD)a2 != 0;
          *(_DWORD *)(v13 + 184) |= 2u;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 88))(v13, v13 + 8);
        v15 = *(_DWORD *)(v7 + 132);
        if (!v15)
        {
          __break(0xC471u);
          JUMPOUT(0x195CE3E68);
        }
        v16 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 120) + 560 * v15 - 456);
        if (v16 <= 9)
        {
          if (((1 << v16) & 0x298) != 0)
          {
            v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 240))(v7);
            v18 = *(_DWORD *)(v7 + 132);
            if (!v18)
            {
              __break(0xC471u);
              JUMPOUT(0x195CE3E70);
            }
            v19 = *(_QWORD *)(v7 + 120) + 560 * v18 - 560;
            (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v17 + 600))(v17, *(unsigned __int8 *)(v19 + 104), *(unsigned __int8 *)(v19 + 105));
            (*(void (**)(uint64_t, WTF *))(*(_QWORD *)v13 + 176))(v13, v8);
            v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 240))(v7);
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 608))(v20);
            goto LABEL_17;
          }
          if (v16 == 1)
          {
            WebCore::CanvasRenderingContext2DBase::clearCanvas((WebCore::CanvasRenderingContext2DBase *)v7);
            (*(void (**)(uint64_t, WTF *))(*(_QWORD *)v13 + 176))(v13, v8);
LABEL_17:
            v21 = 1;
LABEL_18:
            if (*(float *)(v7 + 696) == 0.0
              && *(float *)(v7 + 700) == 0.0
              && (v22 = *(_QWORD *)(v7 + 32), *(float *)(v7 + 704) == (float)*(int *)(v22 + 8))
              && *(float *)(v7 + 708) == (float)*(int *)(v22 + 12))
            {
              v23 = *(unsigned int *)(v7 + 792);
              if ((_DWORD)v23 != -1)
                ((void (*)(CGAffineTransform *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore28CanvasRenderingContext2DBase25CachedContentsTransparentENS7_21CachedContentsUnknownENS7_23CachedContentsImageDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v23])(&transform, v7 + 720);
              *(_DWORD *)(v7 + 792) = 1;
              if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 240))(v7))
                goto LABEL_28;
              *(_BYTE *)(v7 + 812) = 1;
            }
            else
            {
              a2 = v7 + 696;
              if (!v21)
              {
                if (a == 0.0)
                {
                  WebCore::Path::fastBoundingRect(v8);
                  v53 = v167;
                  v54 = v168;
                  v4 = v169;
                  v55 = v170;
                }
                else
                {
                  v48 = *(_DWORD *)(**(_QWORD **)&a + 132);
                  if (!v48)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195CE3E98);
                  }
                  v49 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)&a + 120) + 560 * v48 - 8);
                  v50 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v49 + 8) + 272))(*(_QWORD *)(v49 + 8), v49 + 24);
                  v53 = *(float *)(v49 + 24) - (float)v52;
                  v54 = *(float *)(v49 + 28) - (float)(int)v50;
                  v4 = *(float *)(v49 + 32) + (float)((float)v52 + (float)SHIDWORD(v50));
                  v55 = *(float *)(v49 + 36) + (float)((float)(int)v50 + (float)v51);
                }
                v56 = *(unsigned int *)(v7 + 792);
                if ((_DWORD)v56 != -1)
                  ((void (*)(CGAffineTransform *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore28CanvasRenderingContext2DBase25CachedContentsTransparentENS7_21CachedContentsUnknownENS7_23CachedContentsImageDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v56])(&transform, v7 + 720);
                *(_DWORD *)(v7 + 792) = 1;
                v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 240))(v7);
                if (!v57)
                  goto LABEL_28;
                *(_BYTE *)(v7 + 812) = 1;
                if (v4 <= 0.0 || v55 <= 0.0)
                  goto LABEL_28;
                v58 = *(unsigned int *)(v7 + 132);
                if (!(_DWORD)v58)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195CE3E90);
                }
                v59 = v58 - 1;
                v60 = *(_QWORD *)(v7 + 120);
                if (!*(_BYTE *)(v60 + 560 * v59 + 160))
                  goto LABEL_28;
                v8 = (WTF *)v57;
                v61 = v60 + 560 * v59;
                v63 = *(double *)(v61 + 112);
                v64 = *(double *)(v61 + 120);
                v62 = (double *)(v61 + 112);
                v66 = v62[2];
                v65 = v62[3];
                if (v63 == 1.0 && v64 == 0.0 && v66 == 0.0 && v65 == 1.0)
                {
                  v67 = v62[4];
                  v68 = v62[5];
                  v69 = v53 + v67;
                  v70 = v54 + v68;
                }
                else
                {
                  v186 = v66 * v54;
                  v187 = v62[4];
                  v188 = v62[5];
                  v189 = v65 * v54;
                  v190 = v186 + v63 * v53 + v187;
                  v191 = v188 + v189 + v64 * v53;
                  v192 = (float)(v53 + v4);
                  v193 = v188 + v189 + v64 * v192;
                  v194 = v187 + v186 + v63 * v192;
                  v195 = v193;
                  v196 = (float)(v54 + v55);
                  v197 = v66 * v196;
                  v198 = v187 + v197 + v63 * v192;
                  v199 = v65 * v196;
                  v200 = v188 + v199 + v64 * v192;
                  v201 = v198;
                  v202 = v200;
                  v203 = v187 + v197 + v63 * v53;
                  v204 = v203;
                  v205 = v188 + v199 + v64 * v53;
                  if (v204 >= v201)
                    v69 = v198;
                  else
                    v69 = v203;
                  if (v194 >= v190)
                    v206 = v190;
                  else
                    v206 = v194;
                  if (v69 >= v206)
                    v69 = v206;
                  v207 = fabsf(v69);
                  if (v207 == INFINITY || v207 > 2147500000.0)
                    v69 = (float)((SLODWORD(v69) >> 31) ^ 0x7FFFFFFF);
                  if (v205 >= v202)
                    v70 = v202;
                  else
                    v70 = v205;
                  if (v195 >= v191)
                    v209 = v191;
                  else
                    v209 = v195;
                  if (v70 >= v209)
                    v70 = v209;
                  v210 = fabsf(v70);
                  if (v210 == INFINITY || v210 > 2147500000.0)
                    v70 = (float)((SLODWORD(v70) >> 31) ^ 0x7FFFFFFF);
                  if (v190 < v194)
                    v190 = v194;
                  if (v201 >= v204)
                    v212 = v198;
                  else
                    v212 = v204;
                  if (v190 < v212)
                    v190 = v212;
                  v213 = fabsf(v190);
                  if (v213 == INFINITY || v213 > 2147500000.0)
                    v190 = (float)((SLODWORD(v190) >> 31) ^ 0x7FFFFFFF);
                  if (v191 < v195)
                    v191 = v195;
                  if (v202 >= v205)
                    v215 = v202;
                  else
                    v215 = v205;
                  if (v191 < v215)
                    v191 = v215;
                  v216 = fabsf(v191);
                  if (v216 == INFINITY || v216 > 2147500000.0)
                    v191 = (float)((SLODWORD(v191) >> 31) ^ 0x7FFFFFFF);
                  v4 = v190 - v69;
                  v55 = v191 - v70;
                }
                *(_QWORD *)&v276.a = __PAIR64__(LODWORD(v70), LODWORD(v69));
                *(_QWORD *)&v276.b = __PAIR64__(LODWORD(v55), LODWORD(v4));
                v71 = *(_QWORD *)(v60 + 560 * v59 + 88);
                if ((v71 & 0x8000000000000) == 0)
                {
                  if (!*(_QWORD *)(v60 + 560 * v59 + 88))
                    goto LABEL_88;
                  goto LABEL_391;
                }
                goto LABEL_390;
              }
              v29 = *(_QWORD *)(v7 + 32);
              v30 = *(_DWORD *)(v29 + 8);
              v8 = (WTF *)*(unsigned int *)(v29 + 12);
              v31 = *(unsigned int *)(v7 + 792);
              if ((_DWORD)v31 != -1)
                ((void (*)(CGAffineTransform *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore28CanvasRenderingContext2DBase25CachedContentsTransparentENS7_21CachedContentsUnknownENS7_23CachedContentsImageDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v31])(&transform, v7 + 720);
              *(_DWORD *)(v7 + 792) = 1;
              v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 240))(v7);
              if (!v32)
                goto LABEL_28;
              *(_BYTE *)(v7 + 812) = 1;
              if (v30 < 1 || (int)v8 < 1)
                goto LABEL_28;
              v33 = *(_DWORD *)(v7 + 132);
              if (!v33)
              {
                __break(0xC471u);
                JUMPOUT(0x195CE3E88);
              }
              if (!*(_BYTE *)(*(_QWORD *)(v7 + 120) + 560 * v33 - 400))
                goto LABEL_28;
              v34 = (float)v30;
              v35 = (float)(int)v8;
              v36 = *(float *)a2;
              if (*(float *)a2 > 0.0
                || (float)(v36 + *(float *)(v7 + 704)) < v34
                || (v37 = *(float *)(v7 + 700), v37 > 0.0)
                || (float)(v37 + *(float *)(v7 + 708)) < v35)
              {
                if (*(_BYTE *)(v32 + 342))
                {
                  v34 = (float)(v34 + 1.0) + 1.0;
                  if (v34 <= 0.0)
                    goto LABEL_111;
                  v35 = (float)(v35 + 1.0) + 1.0;
                  if (v35 <= 0.0)
                    goto LABEL_111;
                  v38 = *(float *)(v7 + 704);
                  if (v38 > 0.0)
                  {
                    v39 = *(float *)(v7 + 708);
                    if (v39 > 0.0)
                    {
                      if (v36 <= -1.0)
                        v40 = *(float *)a2;
                      else
                        v40 = -1.0;
                      v41 = *(float *)(v7 + 700);
                      if (v41 <= -1.0)
                        v42 = *(float *)(v7 + 700);
                      else
                        v42 = -1.0;
                      v43 = v36 + v38;
                      v44 = v34 + -1.0;
                      if (v43 < v44)
                        v43 = v44;
                      v45 = v35 + -1.0;
                      if ((float)(v39 + v41) >= v45)
                        v45 = v39 + v41;
                      *(float *)(v7 + 696) = v40;
                      *(float *)(v7 + 700) = v42;
                      v46 = v43 - v40;
                      goto LABEL_109;
                    }
                  }
                  __asm { FMOV            V0.2S, #-1.0 }
                }
                else
                {
                  v265 = *(float *)(v7 + 704);
                  if (v265 > 0.0)
                  {
                    v266 = *(float *)(v7 + 708);
                    if (v266 > 0.0)
                    {
                      v267 = 0.0;
                      if (v36 <= 0.0)
                        v268 = *(float *)a2;
                      else
                        v268 = 0.0;
                      v269 = *(float *)(v7 + 700);
                      if (v269 <= 0.0)
                        v267 = *(float *)(v7 + 700);
                      v270 = v36 + v265;
                      if (v270 < v34)
                        v270 = (float)v30;
                      if ((float)(v266 + v269) >= v35)
                        v35 = v266 + v269;
                      *(float *)(v7 + 696) = v268;
                      *(float *)(v7 + 700) = v267;
                      *(float *)(v7 + 704) = v270 - v268;
                      v82 = v35 - v267;
                      goto LABEL_110;
                    }
                  }
                  _D0 = 0;
                }
                *(_QWORD *)(v7 + 696) = _D0;
                *(float *)(v7 + 704) = v34;
                *(float *)(v7 + 708) = v35;
                goto LABEL_111;
              }
            }
            goto LABEL_26;
          }
        }
        (*(void (**)(uint64_t, WTF *))(*(_QWORD *)v13 + 176))(v13, v8);
        v21 = 0;
        goto LABEL_18;
      }
    }
  }
LABEL_31:
  while (a != 0.0)
  {
    v13 = **(_QWORD **)&a;
    v25 = *(_DWORD *)(**(_QWORD **)&a + 712);
    if (v25)
    {
      *(_DWORD *)(v13 + 712) = v25 - 1;
      return WTF::fastFree(*(WTF **)&a, v11);
    }
    v26 = *(_DWORD *)(v13 + 132);
    if (v26 < 2)
      return WTF::fastFree(*(WTF **)&a, v11);
    v271 = (WebCore::Path *)(v13 + 48);
    v27 = *(_QWORD *)(v13 + 120);
    v2 = (float64x2_t *)(v27 + 560 * v26 - 448);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(*v2, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64(*(float64x2_t *)(v27 + 560 * v26 - 432), (float64x2_t)xmmword_1968A14C0))))) & 1) == 0&& *(double *)(v27 + 560 * v26 - 416) == 0.0&& *(double *)(v27 + 560 * v26 - 408) == 0.0)
    {
      goto LABEL_121;
    }
    v28 = *(_DWORD *)(v13 + 112);
    if (v28 == 2)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 56) + 200))(*(_QWORD *)(v13 + 56)) & 1) != 0)
        goto LABEL_121;
      v28 = *(_DWORD *)(v13 + 112);
    }
    else if (!v28)
    {
      goto LABEL_121;
    }
    if (v28 != 1)
      goto LABEL_115;
    *(_QWORD *)&v276.a = v2;
    v238 = *(unsigned int *)(v13 + 108);
    if ((_DWORD)v238 == -1)
      goto LABEL_389;
    *(_QWORD *)&transform.a = &v276;
    if ((((uint64_t (*)(CGAffineTransform *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore11PathSegment9transformERKNS8_15AffineTransformEE3__0JEEEEEJRNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcOT_DpOT0____fmatrix[v238])(&transform, v13 + 56) & 1) == 0)
    {
      v28 = *(_DWORD *)(v13 + 112);
LABEL_115:
      if (v28 != 2)
        goto LABEL_119;
      v83 = atomic_load((unsigned int *)(*(_QWORD *)(v13 + 56) + 8));
      v84 = *(_QWORD *)(v13 + 56);
      if (v83 != 1)
      {
        (*(void (**)(CGAffineTransform *__return_ptr))(*(_QWORD *)v84 + 24))(&transform);
        v163 = transform.a;
        transform.a = 0.0;
        v164 = *(unsigned int **)(v13 + 56);
        *(CGFloat *)(v13 + 56) = v163;
        if (v164)
        {
          v224 = v164 + 2;
          do
          {
            v225 = __ldaxr(v224);
            v226 = v225 - 1;
          }
          while (__stlxr(v226, v224));
          if (!v226)
          {
            atomic_store(1u, v164 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v164 + 8))(v164);
          }
          v227 = *(unsigned int **)&transform.a;
          transform.a = 0.0;
          if (v227)
          {
            v228 = v227 + 2;
            do
            {
              v229 = __ldaxr(v228);
              v230 = v229 - 1;
            }
            while (__stlxr(v230, v228));
            if (!v230)
            {
              atomic_store(1u, v227 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v227 + 8))(v227);
            }
          }
        }
        v84 = *(_QWORD *)(v13 + 56);
      }
      if (!v84 || ((*(uint64_t (**)(uint64_t, float64x2_t *))(*(_QWORD *)v84 + 144))(v84, v2) & 1) == 0)
      {
LABEL_119:
        v85 = WebCore::Path::ensurePlatformPathImpl(v271);
        transform = *(CGAffineTransform *)v2->f64;
        v86 = CGPathCreateMutableCopyByTransformingPath(*(CGPathRef *)(v85 + 16), &transform);
        v87 = *(const void **)(v85 + 16);
        *(_QWORD *)(v85 + 16) = v86;
        if (v87)
          CFRelease(v87);
      }
    }
LABEL_121:
    v272 = a;
    v3 = *(unsigned int *)(v13 + 132);
    if (!(_DWORD)v3)
    {
      __break(0xC471u);
      JUMPOUT(0x195CE3E78);
    }
    v88 = v3 - 1;
    v89 = *(_QWORD *)(v13 + 120);
    v90 = (WTF::StringImpl **)(v89 + 560 * (v3 - 1));
    v91 = v90[69];
    v90[69] = 0;
    if (v91)
    {
      if (*(_DWORD *)v91 == 1)
      {
        v175 = *((_QWORD *)v91 + 5);
        v176 = *((_QWORD *)v91 + 2);
        v177 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
        if (v177 != -1)
        {
          *(_QWORD *)&transform.a = &p_transform;
          *(_QWORD *)&v276.a = &transform;
          std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v276, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v175 + 56))(v175, v176, &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
        v179 = *((_QWORD *)v91 + 5);
        *((_QWORD *)v91 + 5) = 0;
        if (v179)
          (*(void (**)(uint64_t))(*(_QWORD *)v179 + 8))(v179);
        WTF::fastFree(v91, v178);
      }
      else
      {
        --*(_DWORD *)v91;
      }
    }
    v92 = v89 + 560 * v88;
    v93 = (WebCore::FontCascadeFonts **)(v92 + 472);
    v94 = *(WebCore::FontCascadeFonts **)(v92 + 472);
    if (v94)
    {
      v95 = (*(_DWORD *)v94)++;
      v96 = *((_QWORD *)v94 + 14);
      if (v95)
      {
        *(_DWORD *)v94 = v95;
      }
      else
      {
        WebCore::FontCascadeFonts::~FontCascadeFonts(v94, v11);
        WTF::fastFree(v180, v181);
        v94 = *v93;
      }
      if (v96)
      {
        v97 = (*(_DWORD *)v94)++;
        v98 = *((_QWORD *)v94 + 14);
        if (v97)
        {
          *(_DWORD *)v94 = v97;
        }
        else
        {
          WebCore::FontCascadeFonts::~FontCascadeFonts(v94, v11);
          WTF::fastFree(v184, v185);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v98 + 64))(v98, v92 + 248);
        v94 = *v93;
      }
      *v93 = 0;
      if (v94)
      {
        if (*(_DWORD *)v94 == 1)
        {
          WebCore::FontCascadeFonts::~FontCascadeFonts(v94, v11);
          WTF::fastFree(v182, v183);
        }
        else
        {
          --*(_DWORD *)v94;
        }
      }
    }
    else
    {
      *v93 = 0;
    }
    v8 = (WTF *)(v89 + 560 * v88);
    if (*((_BYTE *)v8 + 468) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v89 + 560 * v88 + 464));
    }
    if (*(_BYTE *)(v89 + 560 * v88 + 460) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v8 + 114));
    }
    v99 = v89 + 560 * v88;
    a2 = v99 + 272;
    v100 = *(unsigned int **)(v99 + 440);
    *(_QWORD *)(v99 + 440) = 0;
    if (v100)
    {
      if (*v100 == 1)
      {
        v218 = v100[1];
        if ((_DWORD)v218)
        {
          v219 = (WTF::StringImpl **)(v100 + 2);
          v220 = 8 * v218;
          do
          {
            v221 = *v219;
            *v219 = 0;
            if (v221)
            {
              if (*(_DWORD *)v221 == 2)
                WTF::StringImpl::destroy(v221, (WTF::StringImpl *)v11);
              else
                *(_DWORD *)v221 -= 2;
            }
            ++v219;
            v220 -= 8;
          }
          while (v220);
        }
        WTF::fastFree((WTF *)v100, v11);
      }
      else
      {
        --*v100;
      }
    }
    v101 = *(WTF::StringImpl **)(a2 + 136);
    *(_QWORD *)(a2 + 136) = 0;
    if (v101)
    {
      if (*(_DWORD *)v101 == 2)
        WTF::StringImpl::destroy(v101, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v101 -= 2;
    }
    v102 = *(WTF::StringImpl **)(a2 + 128);
    *(_QWORD *)(a2 + 128) = 0;
    if (v102)
    {
      if (*(_DWORD *)v102 == 2)
        WTF::StringImpl::destroy(v102, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v102 -= 2;
    }
    v103 = *(WTF::StringImpl **)(a2 + 112);
    *(_QWORD *)(a2 + 112) = 0;
    if (v103)
    {
      if (*(_DWORD *)v103 == 2)
        WTF::StringImpl::destroy(v103, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v103 -= 2;
    }
    v104 = *(WTF::StringImpl **)(a2 + 88);
    *(_QWORD *)(a2 + 88) = 0;
    if (v104)
    {
      if (*(_DWORD *)v104 == 2)
        WTF::StringImpl::destroy(v104, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v104 -= 2;
    }
    v105 = *(WTF::StringImpl **)(a2 + 80);
    *(_QWORD *)(a2 + 80) = 0;
    if (v105)
    {
      if (*(_DWORD *)v105 == 2)
        WTF::StringImpl::destroy(v105, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v105 -= 2;
    }
    v106 = *(WTF::StringImpl **)(a2 + 72);
    *(_QWORD *)(a2 + 72) = 0;
    if (v106)
    {
      if (*(_DWORD *)v106 == 2)
        WTF::StringImpl::destroy(v106, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v106 -= 2;
    }
    v107 = *(unsigned int *)(a2 + 68);
    if ((_DWORD)v107)
    {
      v244 = *(WTF::StringImpl ***)(a2 + 56);
      v245 = 8 * v107;
      do
      {
        v246 = *v244;
        *v244 = 0;
        if (v246)
        {
          if (*(_DWORD *)v246 == 2)
            WTF::StringImpl::destroy(v246, (WTF::StringImpl *)v11);
          else
            *(_DWORD *)v246 -= 2;
        }
        ++v244;
        v245 -= 8;
      }
      while (v245);
    }
    v108 = *(WTF **)(a2 + 56);
    if (v108)
    {
      *(_QWORD *)(a2 + 56) = 0;
      *(_DWORD *)(a2 + 64) = 0;
      WTF::fastFree(v108, v11);
    }
    v109 = *(unsigned int *)(a2 + 52);
    if ((_DWORD)v109)
    {
      v247 = *(WTF::StringImpl ***)(a2 + 40);
      v248 = 8 * v109;
      do
      {
        v249 = *v247;
        *v247 = 0;
        if (v249)
        {
          if (*(_DWORD *)v249 == 2)
            WTF::StringImpl::destroy(v249, (WTF::StringImpl *)v11);
          else
            *(_DWORD *)v249 -= 2;
        }
        ++v247;
        v248 -= 8;
      }
      while (v248);
    }
    v110 = *(WTF **)(a2 + 40);
    if (v110)
    {
      *(_QWORD *)(a2 + 40) = 0;
      *(_DWORD *)(a2 + 48) = 0;
      WTF::fastFree(v110, v11);
    }
    v111 = *(WTF::StringImpl **)(a2 + 32);
    *(_QWORD *)(a2 + 32) = 0;
    if (v111)
    {
      if (*(_DWORD *)v111 == 2)
        WTF::StringImpl::destroy(v111, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v111 -= 2;
    }
    v112 = *(WTF **)(a2 + 16);
    if (v112)
    {
      *(_QWORD *)(a2 + 16) = 0;
      *(_DWORD *)(a2 + 24) = 0;
      WTF::fastFree(v112, v11);
    }
    v113 = (unsigned int **)((char *)v8 + 256);
    v114 = *(WTF **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
      WTF::fastFree(v114, v11);
    }
    if (*v113)
    {
      *((_QWORD *)*v113 + 1) = 0;
      v250 = *v113;
      *v113 = 0;
      if (v250)
      {
        do
        {
          v251 = __ldaxr(v250);
          v252 = v251 - 1;
        }
        while (__stlxr(v252, v250));
        if (!v252)
        {
          atomic_store(1u, v250);
          WTF::fastFree((WTF *)v250, v11);
        }
      }
    }
    else
    {
      *v113 = 0;
    }
    v115 = v89 + 560 * v88;
    v116 = *(WTF::StringImpl **)(v115 + 240);
    *(_QWORD *)(v115 + 240) = 0;
    if (v116)
    {
      if (*(_DWORD *)v116 == 2)
        WTF::StringImpl::destroy(v116, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v116 -= 2;
    }
    v117 = v89 + 560 * v88;
    v118 = (WTF **)(v117 + 224);
    v119 = *(unsigned int *)(v117 + 236);
    if ((_DWORD)v119)
    {
      v8 = *v118;
      a2 = (uint64_t)*v118 + 8 * v119;
      do
      {
        v171 = *(unsigned int **)v8;
        *(_QWORD *)v8 = 0;
        if (v171)
        {
          v172 = v171 + 2;
          do
          {
            v173 = __ldaxr(v172);
            v174 = v173 - 1;
          }
          while (__stlxr(v174, v172));
          if (!v174)
          {
            atomic_store(1u, v171 + 2);
            (*(void (**)(unsigned int *))(*(_QWORD *)v171 + 8))(v171);
          }
        }
        v8 = (WTF *)((char *)v8 + 8);
      }
      while (v8 != (WTF *)a2);
    }
    v120 = *v118;
    if (*v118)
    {
      *v118 = 0;
      *(_DWORD *)(v89 + 560 * v88 + 232) = 0;
      WTF::fastFree(v120, v11);
    }
    v121 = v89 + 560 * v88;
    v122 = *(WTF::StringImpl **)(v121 + 216);
    *(_QWORD *)(v121 + 216) = 0;
    if (v122)
    {
      if (*(_DWORD *)v122 == 2)
        WTF::StringImpl::destroy(v122, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v122 -= 2;
    }
    v123 = v89 + 560 * v88;
    v126 = *(WTF **)(v123 + 168);
    v125 = (_QWORD *)(v123 + 168);
    v124 = v126;
    if (v126)
    {
      *v125 = 0;
      *(_DWORD *)(v89 + 560 * v88 + 176) = 0;
      WTF::fastFree(v124, v11);
    }
    v127 = *(_QWORD *)(v89 + 560 * v88 + 88);
    if ((v127 & 0x8000000000000) != 0)
    {
      v262 = (unsigned int *)(v127 & 0xFFFFFFFFFFFFLL);
      do
      {
        v263 = __ldaxr(v262);
        v264 = v263 - 1;
      }
      while (__stlxr(v264, v262));
      if (!v264)
      {
        atomic_store(1u, v262);
        WTF::fastFree((WTF *)v262, v11);
      }
    }
    v128 = v89 + 560 * v88;
    v131 = *(_DWORD *)(v128 + 40);
    v130 = (_DWORD *)(v128 + 40);
    v129 = v131;
    if (v131 != -1)
      ((void (*)(CGAffineTransform *, uint64_t))off_1E33DC6C8[v129])(&transform, v89 + 560 * v88 + 32);
    v7 = 0xFFFFFFFFLL;
    *v130 = -1;
    v132 = v89 + 560 * v88;
    v134 = *(_DWORD *)(v132 + 24);
    v2 = (float64x2_t *)(v132 + 24);
    v133 = v134;
    if (v134 != -1)
      ((void (*)(CGAffineTransform *, uint64_t))off_1E33DC6C8[v133])(&transform, v89 + 560 * v88 + 16);
    LODWORD(v2->f64[0]) = -1;
    v135 = v89 + 560 * v88;
    v136 = *(WTF::StringImpl **)(v135 + 8);
    *(_QWORD *)(v135 + 8) = 0;
    if (v136)
    {
      if (*(_DWORD *)v136 == 2)
        WTF::StringImpl::destroy(v136, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v136 -= 2;
    }
    v137 = *v90;
    *v90 = 0;
    a = v272;
    if (v137)
    {
      if (*(_DWORD *)v137 == 2)
        WTF::StringImpl::destroy(v137, (WTF::StringImpl *)v11);
      else
        *(_DWORD *)v137 -= 2;
    }
    *(_DWORD *)(v13 + 132) = v88;
    if ((_DWORD)v3 == 1)
    {
      __break(0xC471u);
      JUMPOUT(0x195CE3E80);
    }
    v138 = *(double *)(*(_QWORD *)(v13 + 120) + 560 * v3 - 1008);
    v140 = *(double *)(*(_QWORD *)(v13 + 120) + 560 * v3 - 992);
    v139 = *(double *)(*(_QWORD *)(v13 + 120) + 560 * v3 - 984);
    v141 = *(double *)(*(_QWORD *)(v13 + 120) + 560 * v3 - 1000);
    v142 = v138 * v139 - v141 * v140;
    v143 = fabs(v142);
    if ((unint64_t)(*(_QWORD *)&v143 - 0x10000000000000) >> 53 > 0x3FE
      && (unint64_t)(*(_QWORD *)&v143 - 1) > 0xFFFFFFFFFFFFELL)
    {
      goto LABEL_230;
    }
    if ((v145 = 1.0, v138 == 1.0) && v141 == 0.0 && (v140 == 0.0 ? (_ZF = v139 == 1.0) : (_ZF = 0), _ZF))
    {
      v150 = -*(double *)(*(_QWORD *)(v13 + 120) + 560 * v3 - 976);
      v153 = -*(double *)(*(_QWORD *)(v13 + 120) + 560 * v3 - 968);
      transform.b = 0.0;
      transform.c = 0.0;
      v152 = 1;
      v151 = 1;
      v147 = 1.0;
    }
    else
    {
      v145 = v139 / v142;
      v147 = v138 / v142;
      v149 = *(double *)(*(_QWORD *)(v13 + 120) + 560 * v3 - 976);
      v148 = *(double *)(*(_QWORD *)(v13 + 120) + 560 * v3 - 968);
      v150 = (v140 * v148 - v139 * v149) / v142;
      transform.b = -v141 / v142;
      transform.c = -v140 / v142;
      v151 = transform.b == 0.0;
      v152 = transform.c == 0.0;
      v153 = (v141 * v149 - v138 * v148) / v142;
    }
    transform.a = v145;
    transform.d = v147;
    transform.tx = v150;
    transform.ty = v153;
    v274 = 1;
    if (v145 == 1.0)
    {
      v154 = !v151 || !v152;
      v155 = !v154 && v147 == 1.0;
      if (v155 && v150 == 0.0 && v153 == 0.0)
        goto LABEL_230;
    }
    v156 = *(_DWORD *)(v13 + 112);
    if (v156 == 2)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v13 + 56) + 200))(*(_QWORD *)(v13 + 56)) & 1) != 0)
        goto LABEL_230;
      v156 = *(_DWORD *)(v13 + 112);
    }
    else if (!v156)
    {
      goto LABEL_230;
    }
    if (v156 != 1)
      goto LABEL_224;
    p_transform = &transform;
    v239 = *(unsigned int *)(v13 + 108);
    if ((_DWORD)v239 != -1)
    {
      *(_QWORD *)&v276.a = &p_transform;
      if ((((uint64_t (*)(CGAffineTransform *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore11PathSegment9transformERKNS8_15AffineTransformEE3__0JEEEEEJRNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcOT_DpOT0____fmatrix[v239])(&v276, v13 + 56) & 1) == 0)
      {
        v156 = *(_DWORD *)(v13 + 112);
LABEL_224:
        if (v156 != 2)
          goto LABEL_228;
        v157 = atomic_load((unsigned int *)(*(_QWORD *)(v13 + 56) + 8));
        v158 = *(_QWORD *)(v13 + 56);
        if (v157 != 1)
        {
          (*(void (**)(CGAffineTransform *__return_ptr))(*(_QWORD *)v158 + 24))(&v276);
          v165 = v276.a;
          v276.a = 0.0;
          v166 = *(unsigned int **)(v13 + 56);
          *(CGFloat *)(v13 + 56) = v165;
          if (v166)
          {
            v231 = v166 + 2;
            do
            {
              v232 = __ldaxr(v231);
              v233 = v232 - 1;
            }
            while (__stlxr(v233, v231));
            if (!v233)
            {
              atomic_store(1u, v166 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v166 + 8))(v166);
            }
            v234 = *(unsigned int **)&v276.a;
            v276.a = 0.0;
            if (v234)
            {
              v235 = v234 + 2;
              do
              {
                v236 = __ldaxr(v235);
                v237 = v236 - 1;
              }
              while (__stlxr(v237, v235));
              if (!v237)
              {
                atomic_store(1u, v234 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v234 + 8))(v234);
              }
            }
          }
          v158 = *(_QWORD *)(v13 + 56);
        }
        if (!v158
          || ((*(uint64_t (**)(uint64_t, CGAffineTransform *))(*(_QWORD *)v158 + 144))(v158, &transform) & 1) == 0)
        {
LABEL_228:
          v159 = WebCore::Path::ensurePlatformPathImpl(v271);
          v276 = transform;
          v160 = CGPathCreateMutableCopyByTransformingPath(*(CGPathRef *)(v159 + 16), &v276);
          v161 = *(const void **)(v159 + 16);
          *(_QWORD *)(v159 + 16) = v160;
          if (v161)
            CFRelease(v161);
        }
      }
LABEL_230:
      v162 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 224))(v13);
      if (v162)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v162 + 104))(v162, 1);
      return WTF::fastFree(*(WTF **)&a, v11);
    }
LABEL_389:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_390:
    if (*(float *)((v71 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
    {
LABEL_391:
      v257.i32[3] = HIDWORD(v276.b);
      *(_OWORD *)&transform.a = *(_OWORD *)&v276.a;
      v258 = v60 + 560 * v59;
      v257.i64[0] = *(_QWORD *)(v258 + 72);
      v257.i32[2] = *(_DWORD *)(v258 + 80);
      v259 = (float32x4_t)vdupq_laneq_s32(v257, 2);
      v257.i32[3] = v257.i32[2];
      v260 = vaddq_f32((float32x4_t)v257, *(float32x4_t *)&v276.a);
      *(_QWORD *)&v261 = vsubq_f32(v260, v259).u64[0];
      *((_QWORD *)&v261 + 1) = vaddq_f32(v260, v259).i64[1];
      *(_OWORD *)&transform.a = v261;
      WebCore::FloatRect::unite((float32x2_t *)&v276, (float32x2_t *)&transform);
      v69 = *(float *)&v276.a;
      v4 = *(float *)&v276.b;
    }
LABEL_88:
    v72 = *(float *)a2;
    if (*(float *)a2 <= v69
      && (float)(v72 + *(float *)(v7 + 704)) >= (float)(v69 + v4)
      && (v73 = *(float *)(v7 + 700), v73 <= *((float *)&v276.a + 1))
      && (float)(v73 + *(float *)(v7 + 708)) >= (float)(*((float *)&v276.a + 1) + *((float *)&v276.b + 1)))
    {
LABEL_26:
      v24 = *(_QWORD *)(v7 + 32);
      LOBYTE(transform.a) = 0;
      LOBYTE(transform.c) = 0;
    }
    else
    {
      v74 = *((float *)&v276.b + 1);
      if (*((_BYTE *)v8 + 342))
      {
        v69 = v69 + -1.0;
        v4 = (float)(v4 + 1.0) + 1.0;
        *(float *)&v276.a = v69;
        *((float *)&v276.a + 1) = *((float *)&v276.a + 1) + -1.0;
        v74 = (float)(*((float *)&v276.b + 1) + 1.0) + 1.0;
        *(float *)&v276.b = v4;
        *((float *)&v276.b + 1) = v74;
      }
      if (v4 > 0.0 && v74 > 0.0)
      {
        v75 = *(float *)(v7 + 704);
        if (v75 <= 0.0 || (v76 = *(float *)(v7 + 708), v76 <= 0.0))
        {
          *(_OWORD *)a2 = *(_OWORD *)&v276.a;
        }
        else
        {
          if (v69 >= v72)
            v77 = v72;
          else
            v77 = v69;
          v78 = *(float *)(v7 + 700);
          if (*((float *)&v276.a + 1) >= v78)
            v42 = *(float *)(v7 + 700);
          else
            v42 = *((float *)&v276.a + 1);
          v79 = v72 + v75;
          v80 = v4 + v69;
          if (v79 >= v80)
            v80 = v79;
          v45 = v76 + v78;
          v81 = v74 + *((float *)&v276.a + 1);
          if ((float)(v76 + v78) < v81)
            v45 = v81;
          *(float *)(v7 + 696) = v77;
          *(float *)(v7 + 700) = v42;
          v46 = v80 - v77;
LABEL_109:
          *(float *)(v7 + 704) = v46;
          v82 = v45 - v42;
LABEL_110:
          *(float *)(v7 + 708) = v82;
        }
      }
LABEL_111:
      v24 = *(_QWORD *)(v7 + 32);
      *(_OWORD *)&transform.a = *(_OWORD *)a2;
      LOBYTE(transform.c) = 1;
    }
    (*(void (**)(uint64_t, CGAffineTransform *, uint64_t))(*(_QWORD *)v24 + 104))(v24, &transform, 1);
LABEL_28:
    if (((_DWORD)v3 != 0) == (*(_BYTE *)(v13 + 192) == 0))
    {
      *(_BYTE *)(v13 + 192) = v3;
      *(_DWORD *)(v13 + 184) |= 2u;
    }
    result = (*(uint64_t (**)(uint64_t, float64x2_t *))(*(_QWORD *)v13 + 88))(v13, v2);
  }
  return result;
}

uint64_t WebCore::CanvasRenderingContext2DBase::fillInternal(uint64_t a1, WebCore::Path *this, int a3)
{
  unsigned int v3;
  uint64_t *v7;
  uint64_t result;
  unsigned int v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  float32x4_t *v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  unsigned int v29;
  float v30;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  float v39;
  float v40;
  unsigned int v41;
  unsigned int v42;
  float v43;
  float v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  float v59;
  unsigned int v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  int32x4_t v65;
  uint64_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  char v72;

  v3 = *(_DWORD *)(a1 + 132);
  if (!v3)
  {
    __break(0xC471u);
    goto LABEL_86;
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 120) + 560 * v3 - 324))
  {
    WebCore::Path::fastBoundingRect(this);
    v71.i64[0] = __PAIR64__(v62, v61);
    v71.i64[1] = __PAIR64__(v64, v63);
    WebCore::CanvasFilterContextSwitcher::create((uint64_t **)a1, (WebCore::CanvasRenderingContext2DBase *)&v71, (uint64_t **)&v70);
    v7 = (uint64_t *)v70.i64[0];
    v70.i64[0] = 0;
    std::unique_ptr<WebCore::CanvasFilterContextSwitcher>::~unique_ptr[abi:sn180100]((uint64_t **)&v70);
  }
  else
  {
    v7 = 0;
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
  if (result)
  {
    v9 = *(_DWORD *)(a1 + 132);
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x195CE4550);
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 120) + 560 * v9 - 400))
    {
      v10 = result;
      if (*(_DWORD *)(result + 88) != 1
        || *(_DWORD *)(result + 32)
        || (result = *(_QWORD *)(result + 24)) == 0
        || (result = (uint64_t)WebCore::Gradient::isZeroSize((WebCore::Gradient *)result), (result & 1) == 0))
      {
        v11 = *((_DWORD *)this + 16);
        if (v11 == 2)
        {
          v36 = *((_QWORD *)this + 1);
          if (v36)
          {
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 200))(v36);
            if ((result & 1) != 0)
              goto LABEL_30;
          }
        }
        else if (!v11)
        {
          goto LABEL_30;
        }
        v12 = *(unsigned __int8 *)(v10 + 192);
        if ((a3 != 0) == (*(_BYTE *)(v10 + 192) == 0))
        {
          *(_BYTE *)(v10 + 192) = a3 != 0;
          *(_DWORD *)(v10 + 184) |= 2u;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 88))(v10, v10 + 8);
        v13 = *(_DWORD *)(a1 + 132);
        if (!v13)
        {
          __break(0xC471u);
          JUMPOUT(0x195CE4558);
        }
        v14 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 120) + 560 * v13 - 456);
        if (v14 <= 9)
        {
          if (((1 << v14) & 0x298) != 0)
          {
            WebCore::CanvasRenderingContext2DBase::beginCompositeLayer((WebCore::CanvasRenderingContext2DBase *)a1);
            (*(void (**)(uint64_t, WebCore::Path *))(*(_QWORD *)v10 + 176))(v10, this);
            v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
            (*(void (**)(uint64_t))(*(_QWORD *)v15 + 608))(v15);
LABEL_16:
            v16 = 1;
            goto LABEL_17;
          }
          if (v14 == 1)
          {
            WebCore::CanvasRenderingContext2DBase::clearCanvas((WebCore::CanvasRenderingContext2DBase *)a1);
            (*(void (**)(uint64_t, WebCore::Path *))(*(_QWORD *)v10 + 176))(v10, this);
            goto LABEL_16;
          }
        }
        (*(void (**)(uint64_t, WebCore::Path *))(*(_QWORD *)v10 + 176))(v10, this);
        v16 = 0;
LABEL_17:
        if (*(float *)(a1 + 696) == 0.0 && *(float *)(a1 + 700) == 0.0)
        {
          v17 = *(_QWORD *)(a1 + 32);
          if (*(float *)(a1 + 704) == (float)*(int *)(v17 + 8) && *(float *)(a1 + 708) == (float)*(int *)(v17 + 12))
          {
            v18 = *(unsigned int *)(a1 + 792);
            if ((_DWORD)v18 != -1)
              ((void (*)(float32x4_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore28CanvasRenderingContext2DBase25CachedContentsTransparentENS7_21CachedContentsUnknownENS7_23CachedContentsImageDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v18])(&v71, a1 + 720);
            *(_DWORD *)(a1 + 792) = 1;
            if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1))
              goto LABEL_27;
            *(_BYTE *)(a1 + 812) = 1;
            goto LABEL_25;
          }
        }
        v21 = (float32x4_t *)(a1 + 696);
        if (v16)
        {
          v22 = *(_QWORD *)(a1 + 32);
          v24 = *(_DWORD *)(v22 + 8);
          v23 = *(_DWORD *)(v22 + 12);
          v25 = *(unsigned int *)(a1 + 792);
          if ((_DWORD)v25 != -1)
            ((void (*)(float32x4_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore28CanvasRenderingContext2DBase25CachedContentsTransparentENS7_21CachedContentsUnknownENS7_23CachedContentsImageDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v25])(&v71, a1 + 720);
          *(_DWORD *)(a1 + 792) = 1;
          v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
          if (!v26)
            goto LABEL_27;
          v27 = (float)v24;
          v28 = (float)v23;
          *(_BYTE *)(a1 + 812) = 1;
          v70.i64[0] = 0;
          v70.f32[2] = (float)v24;
          v70.f32[3] = (float)v23;
          if (v24 < 1 || v23 < 1)
            goto LABEL_27;
          v29 = *(_DWORD *)(a1 + 132);
          if (!v29)
          {
            __break(0xC471u);
            JUMPOUT(0x195CE4560);
          }
          if (!*(_BYTE *)(*(_QWORD *)(a1 + 120) + 560 * v29 - 400))
            goto LABEL_27;
          if (v21->f32[0] > 0.0
            || (float)(v21->f32[0] + *(float *)(a1 + 704)) < v27
            || (v30 = *(float *)(a1 + 700), v30 > 0.0)
            || (float)(v30 + *(float *)(a1 + 708)) < v28)
          {
            if (*(_BYTE *)(v26 + 342))
            {
              __asm { FMOV            V3.2S, #-1.0 }
              v70.i64[0] = _D3;
              v70.f32[2] = (float)(v27 + 1.0) + 1.0;
              v70.f32[3] = (float)(v28 + 1.0) + 1.0;
            }
LABEL_68:
            WebCore::FloatRect::unite((float32x2_t *)(a1 + 696), (float32x2_t *)&v70);
            v19 = *(_QWORD *)(a1 + 32);
            v71 = *v21;
            v72 = 1;
            goto LABEL_26;
          }
          goto LABEL_25;
        }
        if (v7)
          WebCore::CanvasFilterContextSwitcher::expandedBounds((uint64_t)v7);
        else
          WebCore::Path::fastBoundingRect(this);
        v41 = v37;
        v42 = v38;
        v43 = v39;
        v44 = v40;
        v45 = *(unsigned int *)(a1 + 792);
        if ((_DWORD)v45 != -1)
          ((void (*)(float32x4_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore28CanvasRenderingContext2DBase25CachedContentsTransparentENS7_21CachedContentsUnknownENS7_23CachedContentsImageDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v45])(&v71, a1 + 720);
        *(_DWORD *)(a1 + 792) = 1;
        v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
        if (!v46)
          goto LABEL_27;
        *(_BYTE *)(a1 + 812) = 1;
        v70.i64[0] = __PAIR64__(v42, v41);
        v70.i64[1] = __PAIR64__(LODWORD(v44), LODWORD(v43));
        if (v43 <= 0.0 || v44 <= 0.0)
          goto LABEL_27;
        v47 = *(unsigned int *)(a1 + 132);
        if (!(_DWORD)v47)
        {
          __break(0xC471u);
          JUMPOUT(0x195CE4568);
        }
        v48 = v47 - 1;
        v49 = *(_QWORD *)(a1 + 120);
        if (!*(_BYTE *)(v49 + 560 * v48 + 160))
          goto LABEL_27;
        v50 = v46;
        v51 = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)(v49 + 560 * v48 + 112), (const WebCore::FloatRect *)&v70);
        v70.i64[0] = __PAIR64__(v52, LODWORD(v51));
        v70.i64[1] = __PAIR64__(v54, v53);
        v55 = *(unsigned int *)(a1 + 132);
        if ((_DWORD)v55)
        {
          v56 = v55 - 1;
          v57 = *(_QWORD *)(a1 + 120);
          v58 = *(_QWORD *)(v57 + 560 * v56 + 88);
          if ((v58 & 0x8000000000000) != 0)
          {
            if (*(float *)((v58 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
              goto LABEL_62;
          }
          else if (!*(_QWORD *)(v57 + 560 * v56 + 88))
          {
LABEL_62:
            if (v21->f32[0] > v51
              || (float)(v21->f32[0] + *(float *)(a1 + 704)) < (float)(v51 + v70.f32[2])
              || (v59 = *(float *)(a1 + 700), v59 > v70.f32[1])
              || (float)(v59 + *(float *)(a1 + 708)) < (float)(v70.f32[1] + v70.f32[3]))
            {
              if (*(_BYTE *)(v50 + 342))
              {
                v70.f32[0] = v51 + -1.0;
                v70.f32[1] = v70.f32[1] + -1.0;
                __asm { FMOV            V1.2S, #1.0 }
                *(float32x2_t *)&v70.u32[2] = vadd_f32(vadd_f32(*(float32x2_t *)&v70.u32[2], _D1), _D1);
              }
              goto LABEL_68;
            }
LABEL_25:
            v19 = *(_QWORD *)(a1 + 32);
            v71.i8[0] = 0;
            v72 = 0;
LABEL_26:
            (*(void (**)(uint64_t, float32x4_t *, uint64_t))(*(_QWORD *)v19 + 104))(v19, &v71, 1);
LABEL_27:
            if ((v12 != 0) == (*(_BYTE *)(v10 + 192) == 0))
            {
              *(_BYTE *)(v10 + 192) = v12;
              *(_DWORD *)(v10 + 184) |= 2u;
            }
            result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 88))(v10, v10 + 8);
            goto LABEL_30;
          }
          v65.i32[3] = v70.i32[3];
          v71 = v70;
          v66 = v57 + 560 * v56;
          v65.i64[0] = *(_QWORD *)(v66 + 72);
          v65.i32[2] = *(_DWORD *)(v66 + 80);
          v67 = (float32x4_t)vdupq_laneq_s32(v65, 2);
          v65.i32[3] = v65.i32[2];
          v68 = vaddq_f32((float32x4_t)v65, v70);
          v69.i64[0] = vsubq_f32(v68, v67).u64[0];
          v69.i64[1] = vaddq_f32(v68, v67).i64[1];
          v71 = v69;
          WebCore::FloatRect::unite((float32x2_t *)&v70, (float32x2_t *)&v71);
          v51 = v70.f32[0];
          goto LABEL_62;
        }
        __break(0xC471u);
LABEL_86:
        JUMPOUT(0x195CE4548);
      }
    }
  }
LABEL_30:
  if (v7)
  {
    WebCore::CanvasRenderingContext2DBase::restore(*v7);
    return WTF::fastFree((WTF *)v7, v20);
  }
  return result;
}

uint64_t WebCore::CanvasRenderingContext2DBase::stroke(WebCore::CanvasRenderingContext2DBase *this)
{
  unsigned int v1;
  WebCore::CanvasRenderingContext2DBase *v2;
  char *v3;
  WTF *v4;
  uint64_t result;
  void *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  float64x2_t *v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  float v49;
  float v50;
  float v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  double *v59;
  double v60;
  double v61;
  double v62;
  double v63;
  float v64;
  float v65;
  float v66;
  float v67;
  uint64_t v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  unsigned int v80;
  uint64_t v81;
  uint64_t v82;
  CGMutablePathRef v83;
  const void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  WTF::StringImpl **v88;
  WTF *v89;
  uint64_t v90;
  WebCore::FontCascadeFonts **v91;
  WebCore::FontCascadeFonts *v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  uint64_t v107;
  WTF *v108;
  uint64_t v109;
  WTF *v110;
  WTF::StringImpl *v111;
  WTF *v112;
  unsigned int **v113;
  WTF *v114;
  uint64_t v115;
  WTF::StringImpl *v116;
  uint64_t v117;
  unsigned int ***v118;
  uint64_t v119;
  WTF *v120;
  uint64_t v121;
  WTF::StringImpl *v122;
  uint64_t v123;
  WTF *v124;
  _QWORD *v125;
  WTF *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _DWORD *v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  double *v138;
  double v139;
  double v140;
  double v141;
  double v142;
  double v143;
  double v144;
  BOOL v145;
  double v146;
  double v148;
  double v149;
  double v150;
  double v151;
  _BOOL4 v152;
  _BOOL4 v153;
  double v154;
  BOOL v155;
  BOOL v156;
  int v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  CGMutablePathRef v161;
  const void *v162;
  uint64_t v163;
  CGFloat a;
  unsigned int *v165;
  CGFloat v166;
  unsigned int *v167;
  int v168;
  float v169;
  float v170;
  float v171;
  float v172;
  uint64_t v173;
  uint64_t v174;
  float v175;
  float v176;
  float v177;
  unsigned int **v178;
  uint64_t v179;
  unsigned int *v180;
  unsigned int *v181;
  unsigned int v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  void *v187;
  uint64_t v188;
  WTF *v189;
  void *v190;
  WTF *v191;
  void *v192;
  WTF *v193;
  void *v194;
  double v195;
  double v196;
  double v197;
  double v198;
  float v199;
  float v200;
  double v201;
  double v202;
  float v203;
  float v204;
  double v205;
  double v206;
  double v207;
  double v208;
  double v209;
  float v210;
  float v211;
  double v212;
  float v213;
  float v214;
  float v215;
  float v216;
  float v218;
  float v219;
  float v221;
  float v222;
  float v224;
  float v225;
  uint64_t v227;
  WTF::StringImpl **v228;
  uint64_t v229;
  WTF::StringImpl *v230;
  unsigned int *v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int *v234;
  unsigned int *v235;
  unsigned int v236;
  unsigned int v237;
  unsigned int *v238;
  unsigned int v239;
  unsigned int v240;
  unsigned int *v241;
  unsigned int *v242;
  unsigned int v243;
  unsigned int v244;
  uint64_t v245;
  int *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  float v251;
  uint64_t v252;
  uint64_t v253;
  WTF::StringImpl **v258;
  uint64_t v259;
  WTF::StringImpl *v260;
  WTF::StringImpl **v261;
  uint64_t v262;
  WTF::StringImpl *v263;
  unsigned int *v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  unsigned int v270;
  unsigned int v271;
  unsigned int v272;
  unsigned int v273;
  unsigned int v274;
  int32x4_t v275;
  uint64_t v276;
  float32x4_t v277;
  float32x4_t v278;
  __int128 v279;
  unsigned int *v280;
  unsigned int v281;
  unsigned int v282;
  float v283;
  float v284;
  float v285;
  float v286;
  float v287;
  float v288;
  WebCore::Path *v289;
  WTF *v290;
  uint64_t v291;
  uint64_t v292;
  CGAffineTransform transform;
  char v294;
  CGAffineTransform *p_transform;
  CGAffineTransform v296;

  v1 = *((_DWORD *)this + 33);
  if (!v1)
  {
    __break(0xC471u);
    JUMPOUT(0x195CE5BF8);
  }
  v2 = this;
  v3 = (char *)this + 48;
  if (*(_DWORD *)(*((_QWORD *)this + 15) + 560 * v1 - 324))
  {
    WebCore::Path::fastBoundingRect((WebCore::CanvasRenderingContext2DBase *)((char *)this + 48));
    *(_QWORD *)&v296.a = __PAIR64__(v268, v267);
    *(_QWORD *)&v296.b = __PAIR64__(v270, v269);
    WebCore::CanvasRenderingContext2DBase::inflatedStrokeRect((uint64_t)v2, (const WebCore::FloatRect *)&v296);
    *(_QWORD *)&transform.a = __PAIR64__(v272, v271);
    *(_QWORD *)&transform.b = __PAIR64__(v274, v273);
    WebCore::CanvasFilterContextSwitcher::create((uint64_t **)v2, (WebCore::CanvasRenderingContext2DBase *)&transform, (uint64_t **)&p_transform);
    v4 = (WTF *)p_transform;
    p_transform = 0;
    std::unique_ptr<WebCore::CanvasFilterContextSwitcher>::~unique_ptr[abi:sn180100]((uint64_t **)&p_transform);
  }
  else
  {
    v4 = 0;
  }
  result = (*(uint64_t (**)(WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)v2 + 240))(v2);
  if (!result)
    goto LABEL_26;
  v7 = *((_DWORD *)v2 + 33);
  if (!v7)
  {
    __break(0xC471u);
    JUMPOUT(0x195CE5C00);
  }
  if (!*(_BYTE *)(*((_QWORD *)v2 + 15) + 560 * v7 - 400))
    goto LABEL_26;
  v8 = result;
  if (*(_DWORD *)(result + 176) == 1 && !*(_DWORD *)(result + 120))
  {
    result = *(_QWORD *)(result + 112);
    if (result)
    {
      result = (uint64_t)WebCore::Gradient::isZeroSize((WebCore::Gradient *)result);
      if ((result & 1) != 0)
        goto LABEL_26;
    }
  }
  v9 = *((_DWORD *)v2 + 28);
  if (v9 == 2)
  {
    v43 = *((_QWORD *)v2 + 7);
    if (v43)
    {
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 200))(v43);
      if ((result & 1) != 0)
        goto LABEL_26;
    }
  }
  else if (!v9)
  {
    goto LABEL_26;
  }
  v10 = *((_DWORD *)v2 + 33);
  if (!v10)
  {
    __break(0xC471u);
    JUMPOUT(0x195CE5C08);
  }
  v11 = *(unsigned __int8 *)(*((_QWORD *)v2 + 15) + 560 * v10 - 456);
  if (v11 > 9)
    goto LABEL_234;
  if (((1 << v11) & 0x298) != 0)
  {
    v12 = (*(uint64_t (**)(WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)v2 + 240))(v2);
    v13 = *((_DWORD *)v2 + 33);
    if (!v13)
    {
      __break(0xC471u);
      JUMPOUT(0x195CE5C10);
    }
    v14 = *((_QWORD *)v2 + 15) + 560 * v13 - 560;
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v12 + 600))(v12, *(unsigned __int8 *)(v14 + 104), *(unsigned __int8 *)(v14 + 105));
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v8 + 184))(v8, v3);
    v15 = (*(uint64_t (**)(WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)v2 + 240))(v2);
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 608))(v15);
    goto LABEL_15;
  }
  if (v11 != 1)
  {
LABEL_234:
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v8 + 184))(v8, v3);
    v16 = 0;
    goto LABEL_16;
  }
  WebCore::CanvasRenderingContext2DBase::clearCanvas(v2);
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v8 + 184))(v8, v3);
LABEL_15:
  v16 = 1;
LABEL_16:
  if (*((float *)v2 + 174) == 0.0
    && *((float *)v2 + 175) == 0.0
    && (v17 = *((_QWORD *)v2 + 4), *((float *)v2 + 176) == (float)*(int *)(v17 + 8))
    && *((float *)v2 + 177) == (float)*(int *)(v17 + 12))
  {
    v18 = *((unsigned int *)v2 + 198);
    if ((_DWORD)v18 != -1)
      ((void (*)(CGAffineTransform *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore28CanvasRenderingContext2DBase25CachedContentsTransparentENS7_21CachedContentsUnknownENS7_23CachedContentsImageDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v18])(&transform, (char *)v2 + 720);
    *((_DWORD *)v2 + 198) = 1;
    result = (*(uint64_t (**)(WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)v2 + 240))(v2);
    if (result)
    {
      *((_BYTE *)v2 + 812) = 1;
      goto LABEL_24;
    }
  }
  else
  {
    v23 = (float64x2_t *)((char *)v2 + 696);
    if (!v16)
    {
      if (!v4)
      {
        v168 = *((_DWORD *)v2 + 28);
        v169 = 0.0;
        if (v168 == 2)
        {
          v245 = *((_QWORD *)v2 + 7);
          v170 = 0.0;
          v171 = 0.0;
          v172 = 0.0;
          if (v245)
            (*(void (**)(uint64_t, float, float, float, float))(*(_QWORD *)v245 + 232))(v245, 0.0, 0.0, 0.0, 0.0);
        }
        else
        {
          v170 = 0.0;
          v171 = 0.0;
          v172 = 0.0;
          if (v168 == 1)
          {
            v291 = 0;
            v292 = 0;
            *(_OWORD *)&v296.a = xmmword_1969F1470;
            *(_QWORD *)&transform.a = &v291;
            *(_QWORD *)&transform.b = &v292;
            *(_QWORD *)&transform.c = &v296;
            v173 = *((unsigned int *)v2 + 27);
            if ((_DWORD)v173 == -1)
              goto LABEL_399;
            p_transform = &transform;
            ((void (*)(CGAffineTransform **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11PathSegment22extendFastBoundingRectERKNS8_10FloatPointESC_RNS8_9FloatRectEE3__0JEEEEEJRKNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcOT_DpOT0____fmatrix[v173])(&p_transform, (char *)v2 + 56);
            *(_QWORD *)&transform.a = &v291;
            *(_QWORD *)&transform.b = &v292;
            v174 = *((unsigned int *)v2 + 27);
            if ((_DWORD)v174 == -1)
              goto LABEL_399;
            p_transform = &transform;
            v175 = ((float (*)(CGAffineTransform **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11PathSegment17calculateEndPointERKNS8_10FloatPointERSA_E3__0JEEEEEJRKNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcOT_DpOT0____fmatrix[v174])(&p_transform, (char *)v2 + 56);
            v177 = v176;
            v171 = *((float *)&v296.a + 1);
            v172 = *(float *)&v296.a;
            v170 = *((float *)&v296.b + 1);
            v169 = *(float *)&v296.b;
            if (*(float *)&v296.a == 1.7014e38 && *((float *)&v296.a + 1) == 1.7014e38)
            {
              v171 = 1.7014e38;
              if (*(float *)&v296.b == -3.4028e38)
              {
                v172 = 1.7014e38;
                if (*((float *)&v296.b + 1) == -3.4028e38)
                {
                  v172 = fminf(v175, 1.7014e38);
                  v171 = fminf(v177, 1.7014e38);
                  v169 = fmaxf(v175, -1.7014e38) - v172;
                  v170 = fmaxf(v177, -1.7014e38) - v171;
                }
              }
              else
              {
                v172 = 1.7014e38;
              }
            }
          }
        }
        v246 = &webThreadDelegateMessageScopeCount;
          goto LABEL_356;
        goto LABEL_400;
      }
      v44 = *(_DWORD *)(*(_QWORD *)v4 + 132);
      if (!v44)
      {
        __break(0xC471u);
        JUMPOUT(0x195CE5C38);
      }
      v45 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 120) + 560 * v44 - 8);
      v46 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v45 + 8) + 272))(*(_QWORD *)(v45 + 8), v45 + 24);
      v49 = *(float *)(v45 + 24) - (float)v48;
      v50 = *(float *)(v45 + 28) - (float)(int)v46;
      v51 = *(float *)(v45 + 32) + (float)((float)v48 + (float)SHIDWORD(v46));
      v52 = *(float *)(v45 + 36) + (float)((float)(int)v46 + (float)v47);
      v53 = *((unsigned int *)v2 + 198);
      if ((_DWORD)v53 == -1)
        goto LABEL_70;
      goto LABEL_69;
    }
    v25 = *((_QWORD *)v2 + 4);
    v27 = *(_DWORD *)(v25 + 8);
    v26 = *(_DWORD *)(v25 + 12);
    v28 = *((unsigned int *)v2 + 198);
    if ((_DWORD)v28 != -1)
      ((void (*)(CGAffineTransform *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore28CanvasRenderingContext2DBase25CachedContentsTransparentENS7_21CachedContentsUnknownENS7_23CachedContentsImageDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v28])(&transform, (char *)v2 + 720);
    *((_DWORD *)v2 + 198) = 1;
    result = (*(uint64_t (**)(WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)v2 + 240))(v2);
    if (result)
    {
      *((_BYTE *)v2 + 812) = 1;
      if (v27 >= 1 && v26 >= 1)
      {
        v29 = *((_DWORD *)v2 + 33);
        if (!v29)
        {
          __break(0xC471u);
          JUMPOUT(0x195CE5C28);
        }
        if (*(_BYTE *)(*((_QWORD *)v2 + 15) + 560 * v29 - 400))
        {
          v30 = (float)v27;
          v31 = (float)v26;
          v32 = *(float *)v23->f64;
          if (*(float *)v23->f64 > 0.0
            || (float)(v32 + *((float *)v2 + 176)) < v30
            || (v33 = *((float *)v2 + 175), v33 > 0.0)
            || (float)(v33 + *((float *)v2 + 177)) < v31)
          {
            if (*(_BYTE *)(result + 342))
            {
              v30 = (float)(v30 + 1.0) + 1.0;
              if (v30 <= 0.0)
                goto LABEL_105;
              v31 = (float)(v31 + 1.0) + 1.0;
              if (v31 <= 0.0)
                goto LABEL_105;
              v34 = *((float *)v2 + 176);
              if (v34 > 0.0)
              {
                v35 = *((float *)v2 + 177);
                if (v35 > 0.0)
                {
                  if (v32 <= -1.0)
                    v36 = *(float *)v23->f64;
                  else
                    v36 = -1.0;
                  v37 = *((float *)v2 + 175);
                  if (v37 <= -1.0)
                    v38 = *((float *)v2 + 175);
                  else
                    v38 = -1.0;
                  v39 = v32 + v34;
                  v40 = v30 + -1.0;
                  if (v39 < v40)
                    v39 = v40;
                  v41 = v31 + -1.0;
                  if ((float)(v35 + v37) >= v41)
                    v41 = v35 + v37;
                  *((float *)v2 + 174) = v36;
                  *((float *)v2 + 175) = v38;
                  v42 = v39 - v36;
                  goto LABEL_103;
                }
              }
              __asm { FMOV            V0.2S, #-1.0 }
            }
            else
            {
              v283 = *((float *)v2 + 176);
              if (v283 > 0.0)
              {
                v284 = *((float *)v2 + 177);
                if (v284 > 0.0)
                {
                  v285 = 0.0;
                  if (v32 <= 0.0)
                    v286 = *(float *)v23->f64;
                  else
                    v286 = 0.0;
                  v287 = *((float *)v2 + 175);
                  if (v287 <= 0.0)
                    v285 = *((float *)v2 + 175);
                  v288 = v32 + v283;
                  if (v288 < v30)
                    v288 = (float)v27;
                  if ((float)(v284 + v287) >= v31)
                    v31 = v284 + v287;
                  *((float *)v2 + 174) = v286;
                  *((float *)v2 + 175) = v285;
                  *((float *)v2 + 176) = v288 - v286;
                  v79 = v31 - v285;
                  goto LABEL_104;
                }
              }
              _D0 = 0;
            }
            *((_QWORD *)v2 + 87) = _D0;
            *((float *)v2 + 176) = v30;
            *((float *)v2 + 177) = v31;
            goto LABEL_105;
          }
          goto LABEL_24;
        }
      }
    }
  }
LABEL_26:
  while (v4)
  {
    v2 = *(WebCore::CanvasRenderingContext2DBase **)v4;
    v20 = *(_DWORD *)(*(_QWORD *)v4 + 712);
    if (v20)
    {
      *((_DWORD *)v2 + 178) = v20 - 1;
      return WTF::fastFree(v4, v6);
    }
    v21 = *((_DWORD *)v2 + 33);
    if (v21 < 2)
      return WTF::fastFree(v4, v6);
    v289 = (WebCore::CanvasRenderingContext2DBase *)((char *)v2 + 48);
    v22 = *((_QWORD *)v2 + 15);
    v23 = (float64x2_t *)(v22 + 560 * v21 - 448);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(*v23, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64(*(float64x2_t *)(v22 + 560 * v21 - 432), (float64x2_t)xmmword_1968A14C0))))) & 1) == 0&& *(double *)(v22 + 560 * v21 - 416) == 0.0&& *(double *)(v22 + 560 * v21 - 408) == 0.0)
    {
      goto LABEL_115;
    }
    v24 = *((_DWORD *)v2 + 28);
    if (v24 == 2)
    {
      if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)v2 + 7) + 200))(*((_QWORD *)v2 + 7)) & 1) != 0)
        goto LABEL_115;
      v24 = *((_DWORD *)v2 + 28);
    }
    else if (!v24)
    {
      goto LABEL_115;
    }
    if (v24 != 1)
      goto LABEL_109;
    *(_QWORD *)&v296.a = v23;
    v252 = *((unsigned int *)v2 + 27);
    if ((_DWORD)v252 != -1)
    {
      *(_QWORD *)&transform.a = &v296;
      if ((((uint64_t (*)(CGAffineTransform *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore11PathSegment9transformERKNS8_15AffineTransformEE3__0JEEEEEJRNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcOT_DpOT0____fmatrix[v252])(&transform, (char *)v2 + 56) & 1) == 0)
      {
        v24 = *((_DWORD *)v2 + 28);
LABEL_109:
        if (v24 != 2)
          goto LABEL_113;
        v80 = atomic_load((unsigned int *)(*((_QWORD *)v2 + 7) + 8));
        v81 = *((_QWORD *)v2 + 7);
        if (v80 != 1)
        {
          (*(void (**)(CGAffineTransform *__return_ptr))(*(_QWORD *)v81 + 24))(&transform);
          a = transform.a;
          transform.a = 0.0;
          v165 = (unsigned int *)*((_QWORD *)v2 + 7);
          *((CGFloat *)v2 + 7) = a;
          if (v165)
          {
            v231 = v165 + 2;
            do
            {
              v232 = __ldaxr(v231);
              v233 = v232 - 1;
            }
            while (__stlxr(v233, v231));
            if (!v233)
            {
              atomic_store(1u, v165 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v165 + 8))(v165);
            }
            v234 = *(unsigned int **)&transform.a;
            transform.a = 0.0;
            if (v234)
            {
              v235 = v234 + 2;
              do
              {
                v236 = __ldaxr(v235);
                v237 = v236 - 1;
              }
              while (__stlxr(v237, v235));
              if (!v237)
              {
                atomic_store(1u, v234 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v234 + 8))(v234);
              }
            }
          }
          v81 = *((_QWORD *)v2 + 7);
        }
        if (!v81 || ((*(uint64_t (**)(uint64_t, float64x2_t *))(*(_QWORD *)v81 + 144))(v81, v23) & 1) == 0)
        {
LABEL_113:
          v82 = WebCore::Path::ensurePlatformPathImpl(v289);
          transform = *(CGAffineTransform *)v23->f64;
          v83 = CGPathCreateMutableCopyByTransformingPath(*(CGPathRef *)(v82 + 16), &transform);
          v84 = *(const void **)(v82 + 16);
          *(_QWORD *)(v82 + 16) = v83;
          if (v84)
            CFRelease(v84);
        }
      }
LABEL_115:
      v290 = v4;
      v85 = *((unsigned int *)v2 + 33);
      if (!(_DWORD)v85)
      {
        __break(0xC471u);
        JUMPOUT(0x195CE5C18);
      }
      v86 = v85 - 1;
      v87 = *((_QWORD *)v2 + 15);
      v88 = (WTF::StringImpl **)(v87 + 560 * (v85 - 1));
      v89 = v88[69];
      v88[69] = 0;
      if (v89)
      {
        if (*(_DWORD *)v89 == 1)
        {
          v184 = *((_QWORD *)v89 + 5);
          v185 = *((_QWORD *)v89 + 2);
          v186 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
          if (v186 != -1)
          {
            *(_QWORD *)&transform.a = &p_transform;
            *(_QWORD *)&v296.a = &transform;
            std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v296, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v184 + 56))(v184, v185, &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
          v188 = *((_QWORD *)v89 + 5);
          *((_QWORD *)v89 + 5) = 0;
          if (v188)
            (*(void (**)(uint64_t))(*(_QWORD *)v188 + 8))(v188);
          WTF::fastFree(v89, v187);
        }
        else
        {
          --*(_DWORD *)v89;
        }
      }
      v90 = v87 + 560 * v86;
      v91 = (WebCore::FontCascadeFonts **)(v90 + 472);
      v92 = *(WebCore::FontCascadeFonts **)(v90 + 472);
      if (v92)
      {
        v93 = (*(_DWORD *)v92)++;
        v94 = *((_QWORD *)v92 + 14);
        if (v93)
        {
          *(_DWORD *)v92 = v93;
        }
        else
        {
          WebCore::FontCascadeFonts::~FontCascadeFonts(v92, v6);
          WTF::fastFree(v189, v190);
          v92 = *v91;
        }
        if (v94)
        {
          v95 = (*(_DWORD *)v92)++;
          v96 = *((_QWORD *)v92 + 14);
          if (v95)
          {
            *(_DWORD *)v92 = v95;
          }
          else
          {
            WebCore::FontCascadeFonts::~FontCascadeFonts(v92, v6);
            WTF::fastFree(v193, v194);
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v96 + 64))(v96, v90 + 248);
          v92 = *v91;
        }
        *v91 = 0;
        if (v92)
        {
          if (*(_DWORD *)v92 == 1)
          {
            WebCore::FontCascadeFonts::~FontCascadeFonts(v92, v6);
            WTF::fastFree(v191, v192);
          }
          else
          {
            --*(_DWORD *)v92;
          }
        }
      }
      else
      {
        *v91 = 0;
      }
      v97 = v87 + 560 * v86;
      if (*(_BYTE *)(v97 + 468) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v87 + 560 * v86 + 464));
      }
      if (*(_BYTE *)(v87 + 560 * v86 + 460) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v97 + 456));
      }
      v98 = v87 + 560 * v86;
      v99 = v98 + 272;
      v100 = *(unsigned int **)(v98 + 440);
      *(_QWORD *)(v98 + 440) = 0;
      if (v100)
      {
        if (*v100 == 1)
        {
          v227 = v100[1];
          if ((_DWORD)v227)
          {
            v228 = (WTF::StringImpl **)(v100 + 2);
            v229 = 8 * v227;
            do
            {
              v230 = *v228;
              *v228 = 0;
              if (v230)
              {
                if (*(_DWORD *)v230 == 2)
                  WTF::StringImpl::destroy(v230, (WTF::StringImpl *)v6);
                else
                  *(_DWORD *)v230 -= 2;
              }
              ++v228;
              v229 -= 8;
            }
            while (v229);
          }
          WTF::fastFree((WTF *)v100, v6);
        }
        else
        {
          --*v100;
        }
      }
      v101 = *(WTF::StringImpl **)(v99 + 136);
      *(_QWORD *)(v99 + 136) = 0;
      if (v101)
      {
        if (*(_DWORD *)v101 == 2)
          WTF::StringImpl::destroy(v101, (WTF::StringImpl *)v6);
        else
          *(_DWORD *)v101 -= 2;
      }
      v102 = *(WTF::StringImpl **)(v99 + 128);
      *(_QWORD *)(v99 + 128) = 0;
      if (v102)
      {
        if (*(_DWORD *)v102 == 2)
          WTF::StringImpl::destroy(v102, (WTF::StringImpl *)v6);
        else
          *(_DWORD *)v102 -= 2;
      }
      v103 = *(WTF::StringImpl **)(v99 + 112);
      *(_QWORD *)(v99 + 112) = 0;
      if (v103)
      {
        if (*(_DWORD *)v103 == 2)
          WTF::StringImpl::destroy(v103, (WTF::StringImpl *)v6);
        else
          *(_DWORD *)v103 -= 2;
      }
      v104 = *(WTF::StringImpl **)(v99 + 88);
      *(_QWORD *)(v99 + 88) = 0;
      if (v104)
      {
        if (*(_DWORD *)v104 == 2)
          WTF::StringImpl::destroy(v104, (WTF::StringImpl *)v6);
        else
          *(_DWORD *)v104 -= 2;
      }
      v105 = *(WTF::StringImpl **)(v99 + 80);
      *(_QWORD *)(v99 + 80) = 0;
      if (v105)
      {
        if (*(_DWORD *)v105 == 2)
          WTF::StringImpl::destroy(v105, (WTF::StringImpl *)v6);
        else
          *(_DWORD *)v105 -= 2;
      }
      v106 = *(WTF::StringImpl **)(v99 + 72);
      *(_QWORD *)(v99 + 72) = 0;
      if (v106)
      {
        if (*(_DWORD *)v106 == 2)
          WTF::StringImpl::destroy(v106, (WTF::StringImpl *)v6);
        else
          *(_DWORD *)v106 -= 2;
      }
      v107 = *(unsigned int *)(v99 + 68);
      if ((_DWORD)v107)
      {
        v258 = *(WTF::StringImpl ***)(v99 + 56);
        v259 = 8 * v107;
        do
        {
          v260 = *v258;
          *v258 = 0;
          if (v260)
          {
            if (*(_DWORD *)v260 == 2)
              WTF::StringImpl::destroy(v260, (WTF::StringImpl *)v6);
            else
              *(_DWORD *)v260 -= 2;
          }
          ++v258;
          v259 -= 8;
        }
        while (v259);
      }
      v108 = *(WTF **)(v99 + 56);
      if (v108)
      {
        *(_QWORD *)(v99 + 56) = 0;
        *(_DWORD *)(v99 + 64) = 0;
        WTF::fastFree(v108, v6);
      }
      v109 = *(unsigned int *)(v99 + 52);
      if ((_DWORD)v109)
      {
        v261 = *(WTF::StringImpl ***)(v99 + 40);
        v262 = 8 * v109;
        do
        {
          v263 = *v261;
          *v261 = 0;
          if (v263)
          {
            if (*(_DWORD *)v263 == 2)
              WTF::StringImpl::destroy(v263, (WTF::StringImpl *)v6);
            else
              *(_DWORD *)v263 -= 2;
          }
          ++v261;
          v262 -= 8;
        }
        while (v262);
      }
      v110 = *(WTF **)(v99 + 40);
      if (v110)
      {
        *(_QWORD *)(v99 + 40) = 0;
        *(_DWORD *)(v99 + 48) = 0;
        WTF::fastFree(v110, v6);
      }
      v111 = *(WTF::StringImpl **)(v99 + 32);
      *(_QWORD *)(v99 + 32) = 0;
      if (v111)
      {
        if (*(_DWORD *)v111 == 2)
          WTF::StringImpl::destroy(v111, (WTF::StringImpl *)v6);
        else
          *(_DWORD *)v111 -= 2;
      }
      v112 = *(WTF **)(v99 + 16);
      if (v112)
      {
        *(_QWORD *)(v99 + 16) = 0;
        *(_DWORD *)(v99 + 24) = 0;
        WTF::fastFree(v112, v6);
      }
      v113 = (unsigned int **)(v97 + 256);
      v114 = *(WTF **)v99;
      if (*(_QWORD *)v99)
      {
        *(_QWORD *)v99 = 0;
        *(_DWORD *)(v99 + 8) = 0;
        WTF::fastFree(v114, v6);
      }
      if (*v113)
      {
        *((_QWORD *)*v113 + 1) = 0;
        v264 = *v113;
        *v113 = 0;
        if (v264)
        {
          do
          {
            v265 = __ldaxr(v264);
            v266 = v265 - 1;
          }
          while (__stlxr(v266, v264));
          if (!v266)
          {
            atomic_store(1u, v264);
            WTF::fastFree((WTF *)v264, v6);
          }
        }
      }
      else
      {
        *v113 = 0;
      }
      v115 = v87 + 560 * v86;
      v116 = *(WTF::StringImpl **)(v115 + 240);
      *(_QWORD *)(v115 + 240) = 0;
      if (v116)
      {
        if (*(_DWORD *)v116 == 2)
          WTF::StringImpl::destroy(v116, (WTF::StringImpl *)v6);
        else
          *(_DWORD *)v116 -= 2;
      }
      v117 = v87 + 560 * v86;
      v118 = (unsigned int ***)(v117 + 224);
      v119 = *(unsigned int *)(v117 + 236);
      if ((_DWORD)v119)
      {
        v178 = *v118;
        v179 = (uint64_t)&(*v118)[v119];
        do
        {
          v180 = *v178;
          *v178 = 0;
          if (v180)
          {
            v181 = v180 + 2;
            do
            {
              v182 = __ldaxr(v181);
              v183 = v182 - 1;
            }
            while (__stlxr(v183, v181));
            if (!v183)
            {
              atomic_store(1u, v180 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v180 + 8))(v180);
            }
          }
          ++v178;
        }
        while (v178 != (unsigned int **)v179);
      }
      v120 = (WTF *)*v118;
      if (*v118)
      {
        *v118 = 0;
        *(_DWORD *)(v87 + 560 * v86 + 232) = 0;
        WTF::fastFree(v120, v6);
      }
      v121 = v87 + 560 * v86;
      v122 = *(WTF::StringImpl **)(v121 + 216);
      *(_QWORD *)(v121 + 216) = 0;
      if (v122)
      {
        if (*(_DWORD *)v122 == 2)
          WTF::StringImpl::destroy(v122, (WTF::StringImpl *)v6);
        else
          *(_DWORD *)v122 -= 2;
      }
      v123 = v87 + 560 * v86;
      v126 = *(WTF **)(v123 + 168);
      v125 = (_QWORD *)(v123 + 168);
      v124 = v126;
      if (v126)
      {
        *v125 = 0;
        *(_DWORD *)(v87 + 560 * v86 + 176) = 0;
        WTF::fastFree(v124, v6);
      }
      v127 = *(_QWORD *)(v87 + 560 * v86 + 88);
      if ((v127 & 0x8000000000000) != 0)
      {
        v280 = (unsigned int *)(v127 & 0xFFFFFFFFFFFFLL);
        do
        {
          v281 = __ldaxr(v280);
          v282 = v281 - 1;
        }
        while (__stlxr(v282, v280));
        if (!v282)
        {
          atomic_store(1u, v280);
          WTF::fastFree((WTF *)v280, v6);
        }
      }
      v128 = v87 + 560 * v86;
      v131 = *(_DWORD *)(v128 + 40);
      v130 = (_DWORD *)(v128 + 40);
      v129 = v131;
      if (v131 != -1)
        ((void (*)(CGAffineTransform *, uint64_t))off_1E33DC6C8[v129])(&transform, v87 + 560 * v86 + 32);
      *v130 = -1;
      v132 = v87 + 560 * v86;
      v134 = *(_DWORD *)(v132 + 24);
      v23 = (float64x2_t *)(v132 + 24);
      v133 = v134;
      if (v134 != -1)
        ((void (*)(CGAffineTransform *, uint64_t))off_1E33DC6C8[v133])(&transform, v87 + 560 * v86 + 16);
      LODWORD(v23->f64[0]) = -1;
      v135 = v87 + 560 * v86;
      v136 = *(WTF::StringImpl **)(v135 + 8);
      *(_QWORD *)(v135 + 8) = 0;
      if (v136)
      {
        if (*(_DWORD *)v136 == 2)
          WTF::StringImpl::destroy(v136, (WTF::StringImpl *)v6);
        else
          *(_DWORD *)v136 -= 2;
      }
      v137 = *v88;
      *v88 = 0;
      if (v137)
      {
        if (*(_DWORD *)v137 == 2)
          WTF::StringImpl::destroy(v137, (WTF::StringImpl *)v6);
        else
          *(_DWORD *)v137 -= 2;
      }
      *((_DWORD *)v2 + 33) = v86;
      if ((_DWORD)v85 == 1)
      {
        __break(0xC471u);
        JUMPOUT(0x195CE5C20);
      }
      v138 = (double *)(*((_QWORD *)v2 + 15) + 560 * v85 - 1008);
      v139 = *v138;
      v141 = *(double *)(*((_QWORD *)v2 + 15) + 560 * v85 - 992);
      v140 = *(double *)(*((_QWORD *)v2 + 15) + 560 * v85 - 984);
      v142 = *(double *)(*((_QWORD *)v2 + 15) + 560 * v85 - 1000);
      v143 = *v138 * v140 - v142 * v141;
      v144 = fabs(v143);
      v145 = (unint64_t)(*(_QWORD *)&v144 - 0x10000000000000) >> 53 > 0x3FE
          && (unint64_t)(*(_QWORD *)&v144 - 1) > 0xFFFFFFFFFFFFELL;
      v4 = v290;
      if (v145)
        goto LABEL_224;
      if ((v146 = 1.0, v139 == 1.0) && v142 == 0.0 && (v141 == 0.0 ? (_ZF = v140 == 1.0) : (_ZF = 0), _ZF))
      {
        v151 = -v138[4];
        v154 = -v138[5];
        transform.b = 0.0;
        transform.c = 0.0;
        v153 = 1;
        v152 = 1;
        v148 = 1.0;
      }
      else
      {
        v146 = v140 / v143;
        v148 = v139 / v143;
        v150 = v138[4];
        v149 = v138[5];
        v151 = (v141 * v149 - v140 * v150) / v143;
        transform.b = -v142 / v143;
        transform.c = -v141 / v143;
        v152 = transform.b == 0.0;
        v153 = transform.c == 0.0;
        v154 = (v142 * v150 - v139 * v149) / v143;
      }
      transform.a = v146;
      transform.d = v148;
      transform.tx = v151;
      transform.ty = v154;
      v294 = 1;
      if (v146 == 1.0)
      {
        v155 = !v152 || !v153;
        v156 = !v155 && v148 == 1.0;
        if (v156 && v151 == 0.0 && v154 == 0.0)
          goto LABEL_224;
      }
      v157 = *((_DWORD *)v2 + 28);
      if (v157 == 2)
      {
        if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)v2 + 7) + 200))(*((_QWORD *)v2 + 7)) & 1) != 0)
          goto LABEL_224;
        v157 = *((_DWORD *)v2 + 28);
      }
      else if (!v157)
      {
        goto LABEL_224;
      }
      if (v157 != 1)
        goto LABEL_218;
      p_transform = &transform;
      v253 = *((unsigned int *)v2 + 27);
      if ((_DWORD)v253 != -1)
      {
        *(_QWORD *)&v296.a = &p_transform;
        if ((((uint64_t (*)(CGAffineTransform *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore11PathSegment9transformERKNS8_15AffineTransformEE3__0JEEEEEJRNS0_6__implIJNS8_10PathMoveToENS8_10PathLineToENS8_15PathQuadCurveToENS8_17PathBezierCurveToENS8_9PathArcToENS8_7PathArcENS8_13PathClosedArcENS8_11PathEllipseENS8_17PathEllipseInRectENS8_8PathRectENS8_15PathRoundedRectENS8_12PathDataLineENS8_17PathDataQuadCurveENS8_19PathDataBezierCurveENS8_11PathDataArcENS8_16PathCloseSubpathEEEEEEEDcOT_DpOT0____fmatrix[v253])(&v296, (char *)v2 + 56) & 1) == 0)
        {
          v157 = *((_DWORD *)v2 + 28);
LABEL_218:
          if (v157 != 2)
            goto LABEL_222;
          v158 = atomic_load((unsigned int *)(*((_QWORD *)v2 + 7) + 8));
          v159 = *((_QWORD *)v2 + 7);
          if (v158 != 1)
          {
            (*(void (**)(CGAffineTransform *__return_ptr))(*(_QWORD *)v159 + 24))(&v296);
            v166 = v296.a;
            v296.a = 0.0;
            v167 = (unsigned int *)*((_QWORD *)v2 + 7);
            *((CGFloat *)v2 + 7) = v166;
            if (v167)
            {
              v238 = v167 + 2;
              do
              {
                v239 = __ldaxr(v238);
                v240 = v239 - 1;
              }
              while (__stlxr(v240, v238));
              if (!v240)
              {
                atomic_store(1u, v167 + 2);
                (*(void (**)(unsigned int *))(*(_QWORD *)v167 + 8))(v167);
              }
              v241 = *(unsigned int **)&v296.a;
              v296.a = 0.0;
              if (v241)
              {
                v242 = v241 + 2;
                do
                {
                  v243 = __ldaxr(v242);
                  v244 = v243 - 1;
                }
                while (__stlxr(v244, v242));
                if (!v244)
                {
                  atomic_store(1u, v241 + 2);
                  (*(void (**)(unsigned int *))(*(_QWORD *)v241 + 8))(v241);
                }
              }
            }
            v159 = *((_QWORD *)v2 + 7);
          }
          if (!v159
            || ((*(uint64_t (**)(uint64_t, CGAffineTransform *))(*(_QWORD *)v159 + 144))(v159, &transform) & 1) == 0)
          {
LABEL_222:
            v160 = WebCore::Path::ensurePlatformPathImpl(v289);
            v296 = transform;
            v161 = CGPathCreateMutableCopyByTransformingPath(*(CGPathRef *)(v160 + 16), &v296);
            v162 = *(const void **)(v160 + 16);
            *(_QWORD *)(v160 + 16) = v161;
            if (v162)
              CFRelease(v162);
          }
        }
LABEL_224:
        v163 = (*(uint64_t (**)(WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)v2 + 224))(v2);
        if (v163)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v163 + 104))(v163, 1);
        return WTF::fastFree(v4, v6);
      }
    }
LABEL_399:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_400:
    WebCore::CanvasRenderingContext2DBase::inflatedStrokeRect(WebCore::FloatRect const&)const::root2 = 1068827891;
    *((_BYTE *)v246 + 2712) = 1;
LABEL_356:
    v247 = *((unsigned int *)v2 + 33);
    if (!(_DWORD)v247)
    {
      __break(0xC471u);
      JUMPOUT(0x195CE5C40);
    }
    v248 = v247 - 1;
    v249 = *((_QWORD *)v2 + 15);
    v250 = v249 + 560 * v248;
    v251 = *(double *)(v250 + 48) * 0.5;
    if (*(_BYTE *)(v250 + 57))
    {
      if (*(_BYTE *)(v249 + 560 * v248 + 56) == 2)
        v251 = *(float *)&WebCore::CanvasRenderingContext2DBase::inflatedStrokeRect(WebCore::FloatRect const&)const::root2
             * v251;
    }
    else
    {
      v251 = *(double *)(v249 + 560 * v248 + 64) * v251;
    }
    v49 = v172 - v251;
    v51 = v251 + (float)(v169 + v251);
    v50 = v171 - v251;
    v52 = v251 + (float)(v170 + v251);
    v53 = *((unsigned int *)v2 + 198);
    if ((_DWORD)v53 != -1)
LABEL_69:
      ((void (*)(CGAffineTransform *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore28CanvasRenderingContext2DBase25CachedContentsTransparentENS7_21CachedContentsUnknownENS7_23CachedContentsImageDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v53])(&transform, (char *)v2 + 720);
LABEL_70:
    *((_DWORD *)v2 + 198) = 1;
    result = (*(uint64_t (**)(WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)v2 + 240))(v2);
    if (result)
    {
      *((_BYTE *)v2 + 812) = 1;
      if (v51 > 0.0 && v52 > 0.0)
      {
        v54 = *((unsigned int *)v2 + 33);
        if (!(_DWORD)v54)
        {
          __break(0xC471u);
          JUMPOUT(0x195CE5C30);
        }
        v55 = v54 - 1;
        v56 = *((_QWORD *)v2 + 15);
        if (*(_BYTE *)(v56 + 560 * v55 + 160))
        {
          v57 = result;
          v58 = v56 + 560 * v55;
          v60 = *(double *)(v58 + 112);
          v61 = *(double *)(v58 + 120);
          v59 = (double *)(v58 + 112);
          v63 = v59[2];
          v62 = v59[3];
          if (v60 == 1.0 && v61 == 0.0 && v63 == 0.0 && v62 == 1.0)
          {
            v64 = v59[4];
            v65 = v59[5];
            v66 = v49 + v64;
            v67 = v50 + v65;
          }
          else
          {
            v195 = v63 * v50;
            v196 = v59[4];
            v197 = v59[5];
            v198 = v62 * v50;
            v199 = v195 + v60 * v49 + v196;
            v200 = v197 + v198 + v61 * v49;
            v201 = (float)(v49 + v51);
            v202 = v197 + v198 + v61 * v201;
            v203 = v196 + v195 + v60 * v201;
            v204 = v202;
            v205 = (float)(v50 + v52);
            v206 = v63 * v205;
            v207 = v196 + v206 + v60 * v201;
            v208 = v62 * v205;
            v209 = v197 + v208 + v61 * v201;
            v210 = v207;
            v211 = v209;
            v212 = v196 + v206 + v60 * v49;
            v213 = v212;
            v214 = v197 + v208 + v61 * v49;
            if (v213 >= v210)
              v66 = v207;
            else
              v66 = v212;
            if (v203 >= v199)
              v215 = v199;
            else
              v215 = v203;
            if (v66 >= v215)
              v66 = v215;
            v216 = fabsf(v66);
            if (v216 == INFINITY || v216 > 2147500000.0)
              v66 = (float)((SLODWORD(v66) >> 31) ^ 0x7FFFFFFF);
            if (v214 >= v211)
              v67 = v211;
            else
              v67 = v214;
            if (v204 >= v200)
              v218 = v200;
            else
              v218 = v204;
            if (v67 >= v218)
              v67 = v218;
            v219 = fabsf(v67);
            if (v219 == INFINITY || v219 > 2147500000.0)
              v67 = (float)((SLODWORD(v67) >> 31) ^ 0x7FFFFFFF);
            if (v199 < v203)
              v199 = v203;
            if (v210 >= v213)
              v221 = v207;
            else
              v221 = v213;
            if (v199 < v221)
              v199 = v221;
            v222 = fabsf(v199);
            if (v222 == INFINITY || v222 > 2147500000.0)
              v199 = (float)((SLODWORD(v199) >> 31) ^ 0x7FFFFFFF);
            if (v200 < v204)
              v200 = v204;
            if (v211 >= v214)
              v224 = v211;
            else
              v224 = v214;
            if (v200 < v224)
              v200 = v224;
            v225 = fabsf(v200);
            if (v225 == INFINITY || v225 > 2147500000.0)
              v200 = (float)((SLODWORD(v200) >> 31) ^ 0x7FFFFFFF);
            v51 = v199 - v66;
            v52 = v200 - v67;
          }
          *(_QWORD *)&v296.a = __PAIR64__(LODWORD(v67), LODWORD(v66));
          *(_QWORD *)&v296.b = __PAIR64__(LODWORD(v52), LODWORD(v51));
          v68 = *(_QWORD *)(v56 + 560 * v55 + 88);
          if ((v68 & 0x8000000000000) != 0)
          {
            if (*(float *)((v68 & 0xFFFFFFFFFFFFLL) + 0x10) > 0.0)
            {
LABEL_404:
              v275.i32[3] = HIDWORD(v296.b);
              *(_OWORD *)&transform.a = *(_OWORD *)&v296.a;
              v276 = v56 + 560 * v55;
              v275.i64[0] = *(_QWORD *)(v276 + 72);
              v275.i32[2] = *(_DWORD *)(v276 + 80);
              v277 = (float32x4_t)vdupq_laneq_s32(v275, 2);
              v275.i32[3] = v275.i32[2];
              v278 = vaddq_f32((float32x4_t)v275, *(float32x4_t *)&v296.a);
              *(_QWORD *)&v279 = vsubq_f32(v278, v277).u64[0];
              *((_QWORD *)&v279 + 1) = vaddq_f32(v278, v277).i64[1];
              *(_OWORD *)&transform.a = v279;
              WebCore::FloatRect::unite((float32x2_t *)&v296, (float32x2_t *)&transform);
              v66 = *(float *)&v296.a;
              v51 = *(float *)&v296.b;
            }
          }
          else if (*(_QWORD *)(v56 + 560 * v55 + 88))
          {
            goto LABEL_404;
          }
          v69 = *(float *)v23->f64;
          if (*(float *)v23->f64 <= v66
            && (float)(v69 + *((float *)v2 + 176)) >= (float)(v66 + v51)
            && (v70 = *((float *)v2 + 175), v70 <= *((float *)&v296.a + 1))
            && (float)(v70 + *((float *)v2 + 177)) >= (float)(*((float *)&v296.a + 1) + *((float *)&v296.b + 1)))
          {
LABEL_24:
            v19 = *((_QWORD *)v2 + 4);
            LOBYTE(transform.a) = 0;
            LOBYTE(transform.c) = 0;
          }
          else
          {
            v71 = *((float *)&v296.b + 1);
            if (*(_BYTE *)(v57 + 342))
            {
              v66 = v66 + -1.0;
              v51 = (float)(v51 + 1.0) + 1.0;
              *(float *)&v296.a = v66;
              *((float *)&v296.a + 1) = *((float *)&v296.a + 1) + -1.0;
              v71 = (float)(*((float *)&v296.b + 1) + 1.0) + 1.0;
              *(float *)&v296.b = v51;
              *((float *)&v296.b + 1) = v71;
            }
            if (v51 > 0.0 && v71 > 0.0)
            {
              v72 = *((float *)v2 + 176);
              if (v72 <= 0.0 || (v73 = *((float *)v2 + 177), v73 <= 0.0))
              {
                *v23 = *(float64x2_t *)&v296.a;
              }
              else
              {
                if (v66 >= v69)
                  v74 = v69;
                else
                  v74 = v66;
                v75 = *((float *)v2 + 175);
                if (*((float *)&v296.a + 1) >= v75)
                  v38 = *((float *)v2 + 175);
                else
                  v38 = *((float *)&v296.a + 1);
                v76 = v69 + v72;
                v77 = v51 + v66;
                if (v76 >= v77)
                  v77 = v76;
                v41 = v73 + v75;
                v78 = v71 + *((float *)&v296.a + 1);
                if ((float)(v73 + v75) < v78)
                  v41 = v78;
                *((float *)v2 + 174) = v74;
                *((float *)v2 + 175) = v38;
                v42 = v77 - v74;
LABEL_103:
                *((float *)v2 + 176) = v42;
                v79 = v41 - v38;
LABEL_104:
                *((float *)v2 + 177) = v79;
              }
            }
LABEL_105:
            v19 = *((_QWORD *)v2 + 4);
            *(float64x2_t *)&transform.a = *v23;
            LOBYTE(transform.c) = 1;
          }
          result = (*(uint64_t (**)(uint64_t, CGAffineTransform *, uint64_t))(*(_QWORD *)v19 + 104))(v19, &transform, 1);
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::CanvasRenderingContext2DBase::strokeInternal(float32x2_t *this, const WebCore::Path *a2)
{
  unsigned __int32 v2;
  uint64_t *v5;
  uint64_t result;
  unsigned __int32 v7;
  uint64_t v8;
  int v9;
  unsigned __int32 v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  float32x2_t v14;
  uint64_t v15;
  float32x2_t v16;
  void *v17;
  float *v18;
  float32x2_t v19;
  int v20;
  int v21;
  uint64_t v22;
  float v23;
  float v24;
  unsigned __int32 v25;
  float v26;
  uint64_t v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float32x2_t v44;
  uint64_t v45;
  float v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  float32x2_t v52;
  uint64_t v53;
  float v54;
  float v56;
  float v57;
  float v58;
  float v59;
  uint64_t v60;
  uint64_t v61;
  float32x2_t v62;
  uint64_t v63;
  float v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  int32x4_t v73;
  uint64_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  uint64_t *v78;
  float32x4_t v79;
  float32x4_t v80;
  char v81;

  v2 = this[16].u32[1];
  if (!v2)
  {
    __break(0xC471u);
    goto LABEL_89;
  }
  if (*(_DWORD *)(*(_QWORD *)&this[15] + 560 * v2 - 324))
  {
    WebCore::Path::fastBoundingRect(a2);
    v79.i64[0] = __PAIR64__(v66, v65);
    v79.i64[1] = __PAIR64__(v68, v67);
    WebCore::CanvasRenderingContext2DBase::inflatedStrokeRect((uint64_t)this, (const WebCore::FloatRect *)&v79);
    v80.i64[0] = __PAIR64__(v70, v69);
    v80.i64[1] = __PAIR64__(v72, v71);
    WebCore::CanvasFilterContextSwitcher::create((uint64_t **)this, (WebCore::CanvasRenderingContext2DBase *)&v80, &v78);
    v5 = v78;
    v78 = 0;
    std::unique_ptr<WebCore::CanvasFilterContextSwitcher>::~unique_ptr[abi:sn180100](&v78);
  }
  else
  {
    v5 = 0;
  }
  result = (*(uint64_t (**)(float32x2_t *))(*(_QWORD *)this + 240))(this);
  if (result)
  {
    v7 = this[16].u32[1];
    if (!v7)
    {
      __break(0xC471u);
      JUMPOUT(0x195CE6318);
    }
    if (*(_BYTE *)(*(_QWORD *)&this[15] + 560 * v7 - 400))
    {
      v8 = result;
      if (*(_DWORD *)(result + 176) != 1
        || *(_DWORD *)(result + 120)
        || (result = *(_QWORD *)(result + 112)) == 0
        || (result = (uint64_t)WebCore::Gradient::isZeroSize((WebCore::Gradient *)result), (result & 1) == 0))
      {
        v9 = *((_DWORD *)a2 + 16);
        if (v9 == 2)
        {
          v32 = *((_QWORD *)a2 + 1);
          if (v32)
          {
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v32 + 200))(v32);
            if ((result & 1) != 0)
              goto LABEL_25;
          }
        }
        else if (!v9)
        {
          goto LABEL_25;
        }
        v10 = this[16].u32[1];
        if (!v10)
        {
          __break(0xC471u);
          JUMPOUT(0x195CE6320);
        }
        v11 = *(unsigned __int8 *)(*(_QWORD *)&this[15] + 560 * v10 - 456);
        if (v11 <= 9)
        {
          if (((1 << v11) & 0x298) != 0)
          {
            WebCore::CanvasRenderingContext2DBase::beginCompositeLayer((WebCore::CanvasRenderingContext2DBase *)this);
            (*(void (**)(uint64_t, const WebCore::Path *))(*(_QWORD *)v8 + 184))(v8, a2);
            v12 = (*(uint64_t (**)(float32x2_t *))(*(_QWORD *)this + 240))(this);
            (*(void (**)(uint64_t))(*(_QWORD *)v12 + 608))(v12);
LABEL_14:
            v13 = 1;
            goto LABEL_15;
          }
          if (v11 == 1)
          {
            WebCore::CanvasRenderingContext2DBase::clearCanvas((WebCore::CanvasRenderingContext2DBase *)this);
            (*(void (**)(uint64_t, const WebCore::Path *))(*(_QWORD *)v8 + 184))(v8, a2);
            goto LABEL_14;
          }
        }
        (*(void (**)(uint64_t, const WebCore::Path *))(*(_QWORD *)v8 + 184))(v8, a2);
        v13 = 0;
LABEL_15:
        if (this[87].f32[0] == 0.0 && this[87].f32[1] == 0.0)
        {
          v14 = this[4];
          if (this[88].f32[0] == (float)*(int *)(*(_QWORD *)&v14 + 8)
            && this[88].f32[1] == (float)*(int *)(*(_QWORD *)&v14 + 12))
          {
            v15 = this[99].u32[0];
            if ((_DWORD)v15 != -1)
              ((void (*)(float32x4_t *, float32x2_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore28CanvasRenderingContext2DBase25CachedContentsTransparentENS7_21CachedContentsUnknownENS7_23CachedContentsImageDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v15])(&v80, &this[90]);
            this[99].i32[0] = 1;
            result = (*(uint64_t (**)(float32x2_t *))(*(_QWORD *)this + 240))(this);
            if (!result)
              goto LABEL_25;
            this[101].i8[4] = 1;
            goto LABEL_23;
          }
        }
        v18 = (float *)&this[87];
        if (v13)
        {
          v19 = this[4];
          v21 = *(_DWORD *)(*(_QWORD *)&v19 + 8);
          v20 = *(_DWORD *)(*(_QWORD *)&v19 + 12);
          v22 = this[99].u32[0];
          if ((_DWORD)v22 != -1)
            ((void (*)(float32x4_t *, float32x2_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore28CanvasRenderingContext2DBase25CachedContentsTransparentENS7_21CachedContentsUnknownENS7_23CachedContentsImageDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v22])(&v80, &this[90]);
          this[99].i32[0] = 1;
          result = (*(uint64_t (**)(float32x2_t *))(*(_QWORD *)this + 240))(this);
          if (!result)
            goto LABEL_25;
          v23 = (float)v21;
          v24 = (float)v20;
          this[101].i8[4] = 1;
          v79.i64[0] = 0;
          v79.f32[2] = (float)v21;
          v79.f32[3] = (float)v20;
          if (v21 < 1 || v20 < 1)
            goto LABEL_25;
          v25 = this[16].u32[1];
          if (!v25)
          {
            __break(0xC471u);
            JUMPOUT(0x195CE6328);
          }
          if (!*(_BYTE *)(*(_QWORD *)&this[15] + 560 * v25 - 400))
            goto LABEL_25;
          if (*v18 <= 0.0 && (float)(*v18 + this[88].f32[0]) >= v23)
          {
            v26 = this[87].f32[1];
            if (v26 <= 0.0 && (float)(v26 + this[88].f32[1]) >= v24)
              goto LABEL_23;
          }
          if (*(_BYTE *)(result + 342))
          {
            __asm { FMOV            V3.2S, #-1.0 }
            v79.i64[0] = _D3;
            v79.f32[2] = (float)(v23 + 1.0) + 1.0;
            v79.f32[3] = (float)(v24 + 1.0) + 1.0;
          }
          goto LABEL_63;
        }
        if (v5)
        {
          WebCore::CanvasFilterContextSwitcher::expandedBounds((uint64_t)v5);
          v34 = v33;
          v36 = v35;
          v38 = v37;
          v40 = v39;
          goto LABEL_47;
        }
        WebCore::Path::fastBoundingRect(a2);
        {
          WebCore::CanvasRenderingContext2DBase::inflatedStrokeRect(WebCore::FloatRect const&)const::root2 = 1068827891;
        }
        v60 = this[16].u32[1];
        if ((_DWORD)v60)
        {
          v61 = v60 - 1;
          v62 = this[15];
          v63 = *(_QWORD *)&v62 + 560 * v61;
          v64 = *(double *)(v63 + 48) * 0.5;
          if (*(_BYTE *)(v63 + 57))
          {
            if (*(_BYTE *)(*(_QWORD *)&v62 + 560 * v61 + 56) == 2)
              v64 = *(float *)&WebCore::CanvasRenderingContext2DBase::inflatedStrokeRect(WebCore::FloatRect const&)const::root2
                  * v64;
          }
          else
          {
            v64 = *(double *)(*(_QWORD *)&v62 + 560 * v61 + 64) * v64;
          }
          v34 = v56 - v64;
          v38 = v64 + (float)(v58 + v64);
          v36 = v57 - v64;
          v40 = v64 + (float)(v59 + v64);
LABEL_47:
          v41 = this[99].u32[0];
          if ((_DWORD)v41 != -1)
            ((void (*)(float32x4_t *, float32x2_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore28CanvasRenderingContext2DBase25CachedContentsTransparentENS7_21CachedContentsUnknownENS7_23CachedContentsImageDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v41])(&v80, &this[90]);
          this[99].i32[0] = 1;
          result = (*(uint64_t (**)(float32x2_t *))(*(_QWORD *)this + 240))(this);
          if (!result)
            goto LABEL_25;
          this[101].i8[4] = 1;
          v79.i64[0] = __PAIR64__(LODWORD(v36), LODWORD(v34));
          v79.i64[1] = __PAIR64__(LODWORD(v40), LODWORD(v38));
          if (v38 <= 0.0 || v40 <= 0.0)
            goto LABEL_25;
          v42 = this[16].u32[1];
          if (!(_DWORD)v42)
          {
            __break(0xC471u);
            JUMPOUT(0x195CE6330);
          }
          v43 = v42 - 1;
          v44 = this[15];
          if (!*(_BYTE *)(*(_QWORD *)&v44 + 560 * v43 + 160))
            goto LABEL_25;
          v45 = result;
          v46 = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)(*(_QWORD *)&v44 + 560 * v43 + 112), (const WebCore::FloatRect *)&v79);
          v79.i64[0] = __PAIR64__(v47, LODWORD(v46));
          v79.i64[1] = __PAIR64__(v49, v48);
          v50 = this[16].u32[1];
          if (!(_DWORD)v50)
          {
            __break(0xC471u);
            JUMPOUT(0x195CE6338);
          }
          v51 = v50 - 1;
          v52 = this[15];
          v53 = *(_QWORD *)(*(_QWORD *)&v52 + 560 * v51 + 88);
          if ((v53 & 0x8000000000000) != 0)
          {
            if (*(float *)((v53 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
              goto LABEL_57;
          }
          else if (!*(_QWORD *)(*(_QWORD *)&v52 + 560 * v51 + 88))
          {
            goto LABEL_57;
          }
          v73.i32[3] = v79.i32[3];
          v80 = v79;
          v74 = *(_QWORD *)&v52 + 560 * v51;
          v73.i64[0] = *(_QWORD *)(v74 + 72);
          v73.i32[2] = *(_DWORD *)(v74 + 80);
          v75 = (float32x4_t)vdupq_laneq_s32(v73, 2);
          v73.i32[3] = v73.i32[2];
          v76 = vaddq_f32((float32x4_t)v73, v79);
          v77.i64[0] = vsubq_f32(v76, v75).u64[0];
          v77.i64[1] = vaddq_f32(v76, v75).i64[1];
          v80 = v77;
          WebCore::FloatRect::unite((float32x2_t *)&v79, (float32x2_t *)&v80);
          v46 = v79.f32[0];
LABEL_57:
          if (*v18 <= v46 && (float)(*v18 + this[88].f32[0]) >= (float)(v46 + v79.f32[2]))
          {
            v54 = this[87].f32[1];
            if (v54 <= v79.f32[1] && (float)(v54 + this[88].f32[1]) >= (float)(v79.f32[1] + v79.f32[3]))
            {
LABEL_23:
              v16 = this[4];
              v80.i8[0] = 0;
              v81 = 0;
LABEL_24:
              result = (*(uint64_t (**)(float32x2_t, float32x4_t *, uint64_t))(**(_QWORD **)&v16 + 104))(v16, &v80, 1);
              goto LABEL_25;
            }
          }
          if (*(_BYTE *)(v45 + 342))
          {
            v79.f32[0] = v46 + -1.0;
            v79.f32[1] = v79.f32[1] + -1.0;
            __asm { FMOV            V1.2S, #1.0 }
            *(float32x2_t *)&v79.u32[2] = vadd_f32(vadd_f32(*(float32x2_t *)&v79.u32[2], _D1), _D1);
          }
LABEL_63:
          WebCore::FloatRect::unite(this + 87, (float32x2_t *)&v79);
          v16 = this[4];
          v80 = *(float32x4_t *)v18;
          v81 = 1;
          goto LABEL_24;
        }
        __break(0xC471u);
LABEL_89:
        JUMPOUT(0x195CE6310);
      }
    }
  }
LABEL_25:
  if (v5)
  {
    WebCore::CanvasRenderingContext2DBase::restore(*v5);
    return WTF::fastFree((WTF *)v5, v17);
  }
  return result;
}

uint64_t WebCore::CanvasRenderingContext2DBase::clipInternal(unsigned int *a1, uint64_t a2, int a3)
{
  uint64_t result;
  unsigned int v7;
  uint64_t v8;

  result = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 240))(a1);
  if (result)
  {
    v7 = a1[33];
    if (v7)
    {
      if (*(_BYTE *)(*((_QWORD *)a1 + 15) + 560 * v7 - 400))
      {
        v8 = result;
        WebCore::CanvasRenderingContext2DBase::realizeSaves((WebCore::CanvasRenderingContext2DBase::State *)a1);
        return (*(uint64_t (**)(uint64_t, uint64_t, BOOL))(*(_QWORD *)v8 + 496))(v8, a2, a3 != 0);
      }
    }
    else
    {
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebCore::CanvasRenderingContext2DBase::beginCompositeLayer(WebCore::CanvasRenderingContext2DBase *this)
{
  uint64_t result;
  unsigned int v3;
  uint64_t v4;

  result = (*(uint64_t (**)(WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)this + 240))(this);
  v3 = *((_DWORD *)this + 33);
  if (v3)
  {
    v4 = *((_QWORD *)this + 15) + 560 * v3 - 560;
    return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)result + 600))(result, *(unsigned __int8 *)(v4 + 104), *(unsigned __int8 *)(v4 + 105));
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::CanvasRenderingContext2DBase::clearCanvas(WebCore::CanvasRenderingContext2DBase *this)
{
  uint64_t result;
  uint64_t v3;
  float v4;
  unsigned int v5;
  uint64_t v6;
  float v7;
  float v8;

  result = (*(uint64_t (**)(WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)this + 240))(this);
  if (result)
  {
    v3 = result;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 96))(result, 1);
    (*(void (**)(uint64_t *__return_ptr, WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)this + 248))(&v6, this);
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 664))(v3, &v6);
    v4 = (float)(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 4) + 56))(*((_QWORD *)this + 4));
    v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 64))(*((_QWORD *)this + 4));
    v6 = 0;
    v7 = v4;
    v8 = (float)v5;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 280))(v3, &v6);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 104))(v3, 1);
  }
  return result;
}

uint64_t WebCore::CanvasRenderingContext2DBase::inflatedStrokeRect(uint64_t this, const WebCore::FloatRect *a2)
{
  {
    WebCore::CanvasRenderingContext2DBase::inflatedStrokeRect(WebCore::FloatRect const&)const::root2 = 1068827891;
  }
  if (!*(_DWORD *)(this + 132))
    __break(0xC471u);
  return this;
}

uint64_t WebCore::CanvasRenderingContext2DBase::isPointInPathInternal(uint64_t a1, uint64_t a2, int a3, double a4, double a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v24;
  BOOL v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  __int128 *v31;
  char v32;
  float v33;
  float v34;
  double v35;
  double v36;
  float v37;
  float v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  char v48;
  float v49[2];

  if ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
    if (!result)
      return result;
    v11 = *(unsigned int *)(a1 + 132);
    if (!(_DWORD)v11)
    {
      __break(0xC471u);
      return result;
    }
    v12 = v11 - 1;
    v13 = *(_QWORD *)(a1 + 120);
    if (*(_BYTE *)(v13 + 560 * v12 + 160))
    {
      v14 = v13 + 560 * v12;
      v16 = *(double *)(v14 + 112);
      v15 = (double *)(v14 + 112);
      v17 = v16;
      v19 = v15[2];
      v18 = v15[3];
      v20 = v15[1];
      v21 = v16 * v18 - v20 * v19;
      v22 = fabs(v21);
      if ((unint64_t)(*(_QWORD *)&v22 - 0x10000000000000) >> 53 > 0x3FE
        && (unint64_t)(*(_QWORD *)&v22 - 1) > 0xFFFFFFFFFFFFELL)
      {
        v32 = 0;
        v31 = &constinit_2;
        v26 = 1.0;
        v30 = 0.0;
        v29 = 0.0;
        v24 = 1.0;
      }
      else
      {
        v24 = 1.0;
        if (v17 == 1.0 && v20 == 0.0 && (v19 == 0.0 ? (v25 = v18 == 1.0) : (v25 = 0), v25))
        {
          v29 = -v15[4];
          v30 = -v15[5];
          v43 = 0.0;
          v44 = 0.0;
          v26 = 1.0;
        }
        else
        {
          v24 = v18 / v21;
          v26 = v17 / v21;
          v28 = v15[4];
          v27 = v15[5];
          v29 = (v19 * v27 - v18 * v28) / v21;
          v43 = -v20 / v21;
          v44 = -v19 / v21;
          v30 = (v20 * v28 - v17 * v27) / v21;
        }
        v45 = v26;
        v46 = v29;
        v31 = (__int128 *)&v42;
        v32 = 1;
        v47 = v30;
      }
      v48 = v32;
      v33 = a4;
      v34 = a5;
      v35 = v33;
      v36 = v34;
      v37 = v29 + *((double *)v31 + 2) * v36 + v24 * v35;
      v38 = v30 + v26 * v36 + *((double *)v31 + 1) * v35;
      v49[0] = v37;
      v49[1] = v38;
      v39 = *(_DWORD *)(a2 + 64);
      if (v39 == 2)
      {
        v40 = *(_QWORD *)(a2 + 8);
        if (v40 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 200))(v40) & 1) != 0)
          return 0;
      }
      else if (!v39)
      {
        return 0;
      }
      v41 = WebCore::Path::ensurePlatformPathImpl((WebCore::Path *)a2);
      return WebCore::PathCG::contains(v41, v49, a3 != 0);
    }
  }
  return 0;
}

uint64_t WebCore::CanvasRenderingContext2DBase::isPointInStrokeInternal(WebCore::CanvasRenderingContext2DBase *this, const WebCore::Path *a2, double a3, double a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v20;
  BOOL v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  __int128 *v27;
  char v28;
  float v29;
  float v30;
  double v31;
  double v32;
  float v33;
  float v34;
  _QWORD *v35;
  int v36;
  _BOOL8 v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  char v46;
  float v47[2];

  if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  if ((*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  result = (*(uint64_t (**)(WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)this + 240))(this);
  if (!result)
    return 0;
  v9 = *((unsigned int *)this + 33);
  if ((_DWORD)v9)
  {
    v10 = v9 - 1;
    v11 = *((_QWORD *)this + 15);
    if (*(_BYTE *)(v11 + 560 * v10 + 160))
    {
      v12 = (double *)(v11 + 560 * v10);
      v13 = v12[14];
      v15 = v12[16];
      v14 = v12[17];
      v16 = v12[15];
      v17 = v13 * v14 - v16 * v15;
      v18 = fabs(v17);
      if ((unint64_t)(*(_QWORD *)&v18 - 0x10000000000000) >> 53 > 0x3FE
        && (unint64_t)(*(_QWORD *)&v18 - 1) > 0xFFFFFFFFFFFFELL)
      {
        v28 = 0;
        v27 = &constinit_2;
        v22 = 1.0;
        v26 = 0.0;
        v25 = 0.0;
        v20 = 1.0;
      }
      else
      {
        v20 = 1.0;
        if (v13 == 1.0 && v16 == 0.0 && (v15 == 0.0 ? (v21 = v14 == 1.0) : (v21 = 0), v21))
        {
          v25 = -v12[18];
          v26 = -v12[19];
          v41 = 0.0;
          v42 = 0.0;
          v22 = 1.0;
        }
        else
        {
          v20 = v14 / v17;
          v22 = v13 / v17;
          v24 = v12[18];
          v23 = v12[19];
          v25 = (v15 * v23 - v14 * v24) / v17;
          v41 = -v16 / v17;
          v42 = -v15 / v17;
          v26 = (v16 * v24 - v13 * v23) / v17;
        }
        v43 = v22;
        v44 = v25;
        v27 = (__int128 *)&v40;
        v28 = 1;
        v45 = v26;
      }
      v46 = v28;
      v29 = a3;
      v30 = a4;
      v31 = v29;
      v32 = v30;
      v33 = v25 + *((double *)v27 + 2) * v32 + v20 * v31;
      v34 = v26 + v22 * v32 + *((double *)v27 + 1) * v31;
      v47[0] = v33;
      v47[1] = v34;
      v35 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v35 = off_1E33DC7B8;
      v35[1] = v12;
      v40 = v35;
      v36 = *((_DWORD *)a2 + 16);
      if (v36 == 2)
      {
        v38 = *((_QWORD *)a2 + 1);
        if (v38 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 200))(v38) & 1) != 0)
          goto LABEL_25;
      }
      else if (!v36)
      {
LABEL_25:
        v37 = 0;
LABEL_27:
        (*(void (**)(_QWORD *))(*v35 + 8))(v35);
        return v37;
      }
      v39 = WebCore::Path::ensurePlatformPathImpl(a2);
      v37 = WebCore::PathCG::strokeContains(v39, v47, &v40);
      goto LABEL_27;
    }
    return 0;
  }
  __break(0xC471u);
  return result;
}

float *WebCore::CanvasRenderingContext2DBase::clearRect(float *this, __n128 a2, double a3, double a4, double a5)
{
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  void *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  float32x4_t v28;
  char v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char v33;
  int v34;
  float32x4_t v35;

  if ((a2.n128_u64[0] & 0x7FFFFFFFFFFFFFFFLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(_QWORD *)&a4 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && (*(_QWORD *)&a5 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL)
  {
    v5 = (uint64_t)this;
    if (a4 != 0.0 || a5 != 0.0)
    {
      v6 = a4 < 0.0 ? -a4 : a4;
      v7 = a4 < 0.0 ? a2.n128_f64[0] + a4 : a2.n128_f64[0];
      v8 = a5 < 0.0 ? a3 + a5 : a3;
      v9 = a5 < 0.0 ? -a5 : a5;
      a2.n128_f64[0] = -a5;
      this = (float *)(*(uint64_t (**)(float *, __n128))(*(_QWORD *)this + 240))(this, a2);
      if (this)
      {
        v10 = *(unsigned int *)(v5 + 132);
        if (!(_DWORD)v10)
        {
          __break(0xC471u);
          goto LABEL_59;
        }
        v11 = v10 - 1;
        v12 = *(_QWORD *)(v5 + 120);
        if (!*(_BYTE *)(v12 + 560 * v11 + 160))
          return this;
        v13 = this;
        *(float *)&v14 = v7;
        *(float *)&v15 = v8;
        *(float *)&v16 = v6;
        *(float *)&v17 = v9;
        v35.i64[0] = __PAIR64__(v15, v14);
        v35.i64[1] = __PAIR64__(v17, v16);
        v18 = *(_QWORD *)(v12 + 560 * v11 + 88);
        if ((v18 & 0x8000000000000) != 0)
        {
          if (*(float *)((v18 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
            goto LABEL_23;
        }
        else if (!*(_QWORD *)(v12 + 560 * v11 + 88))
        {
          goto LABEL_23;
        }
        if (*(float *)(v12 + 560 * v11 + 80) != 0.0
          || !WebCore::FloatSize::isZero((WebCore::FloatSize *)(v12 + 560 * v11 + 72)))
        {
          (*(void (**)(float *, uint64_t))(*(_QWORD *)v13 + 96))(v13, 1);
          v31 = 0;
          v30 = 0;
          v32 = 0x1104000000000000;
          v33 = 1;
          v34 = 1065353216;
          WebCore::GraphicsContext::setDropShadow((uint64_t)v13, &v30);
          if ((v32 & 0x8000000000000) != 0)
          {
            v25 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFLL);
            do
            {
              v26 = __ldaxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
            {
              atomic_store(1u, v25);
              WTF::fastFree((WTF *)v25, v24);
            }
          }
          v19 = 1;
          goto LABEL_24;
        }
LABEL_23:
        v19 = 0;
LABEL_24:
        v20 = *(unsigned int *)(v5 + 132);
        if (!(_DWORD)v20)
        {
          __break(0xC471u);
          JUMPOUT(0x195CE6D58);
        }
        v21 = v20 - 1;
        v22 = *(_QWORD *)(v5 + 120);
        if (*(double *)(v22 + 560 * v21 + 96) == 1.0)
        {
          if (*(_BYTE *)(v22 + 560 * v21 + 104) == 2)
          {
            (*(void (**)(float *, float32x4_t *))(*(_QWORD *)v13 + 280))(v13, &v35);
            if ((v19 & 1) == 0)
            {
LABEL_28:
              v28 = v35;
              v29 = 1;
              return (float *)WebCore::CanvasRenderingContext2DBase::didDraw(v5, &v28, 7u);
            }
LABEL_45:
            (*(void (**)(float *, uint64_t))(*(_QWORD *)v13 + 104))(v13, 1);
            goto LABEL_28;
          }
          if ((v19 & 1) == 0)
            (*(void (**)(float *, uint64_t))(*(_QWORD *)v13 + 96))(v13, 1);
          goto LABEL_41;
        }
        if ((v19 & 1) == 0)
          (*(void (**)(float *, uint64_t))(*(_QWORD *)v13 + 96))(v13, 1);
        if (v13[84] != 1.0)
        {
          v13[84] = 1.0;
          *((_DWORD *)v13 + 46) |= 0x100u;
        }
        (*(void (**)(float *, _DWORD *))(*(_QWORD *)v13 + 88))(v13, (_DWORD *)v13 + 2);
        v23 = *(_DWORD *)(v5 + 132);
        if (v23)
        {
          if (*(_BYTE *)(*(_QWORD *)(v5 + 120) + 560 * v23 - 456) == 2)
          {
LABEL_44:
            (*(void (**)(float *, float32x4_t *))(*(_QWORD *)v13 + 280))(v13, &v35);
            goto LABEL_45;
          }
LABEL_41:
          if (*((_BYTE *)v13 + 194) != 2 || *((_BYTE *)v13 + 195) != 1)
          {
            *((_WORD *)v13 + 97) = 258;
            *((_DWORD *)v13 + 46) |= 0x20u;
          }
          (*(void (**)(float *, _DWORD *))(*(_QWORD *)v13 + 88))(v13, (_DWORD *)v13 + 2);
          goto LABEL_44;
        }
        __break(0xC471u);
LABEL_59:
        JUMPOUT(0x195CE6D50);
      }
    }
  }
  return this;
}

uint64_t WebCore::validateRectForCanvas(WebCore *this, double *a2, double *a3, double *a4, double *a5)
{
  double v5;
  double v6;

  if ((*(_QWORD *)this & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  if ((*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  v5 = *a3;
  if ((*(_QWORD *)a3 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  v6 = *a4;
  if ((*(_QWORD *)a4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v5 == 0.0 && v6 == 0.0)
    return 0;
  if (v5 < 0.0)
  {
    *a3 = -v5;
    *(double *)this = v5 + *(double *)this;
    v6 = *a4;
  }
  if (v6 < 0.0)
  {
    *a4 = -v6;
    *a2 = v6 + *a2;
  }
  return 1;
}

BOOL WebCore::CanvasRenderingContext2DBase::shouldDrawShadows(_BOOL8 this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned int *)(this + 132);
  if (!(_DWORD)v1)
  {
    __break(0xC471u);
    return this;
  }
  v2 = v1 - 1;
  v3 = *(_QWORD *)(this + 120);
  v4 = *(_QWORD *)(v3 + 560 * v2 + 88);
  if ((v4 & 0x8000000000000) != 0)
  {
    if (*(float *)((v4 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
      return 0;
  }
  else if (!*(_QWORD *)(v3 + 560 * v2 + 88))
  {
    return 0;
  }
  return *(float *)(v3 + 560 * v2 + 80) != 0.0
      || !WebCore::FloatSize::isZero((WebCore::FloatSize *)(v3 + 560 * v2 + 72));
}

uint64_t WebCore::GraphicsContext::setDropShadow(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v3 = a1 + 8;
  v12 = *a2;
  v13 = *((_DWORD *)a2 + 2);
  v4 = a2[2];
  v14 = v4;
  if ((v4 & 0x8000000000000) != 0)
  {
    v7 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFLL);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  v15 = a2[3];
  v16 = 1;
  WebCore::GraphicsContextState::setDropShadow(a1 + 8, (uint64_t)&v12);
  if (v16)
  {
    if ((v14 & 0x8000000000000) != 0)
    {
      v9 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, v5);
      }
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, v3);
}

uint64_t WebCore::CanvasRenderingContext2DBase::didDraw(uint64_t a1, float32x4_t *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t result;
  __int32 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  __int32 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float32x4_t *v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  int32x4_t v34;
  uint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  char v41;

  if ((a3 & 0x10) == 0)
  {
    v6 = *(unsigned int *)(a1 + 792);
    if ((_DWORD)v6 != -1)
      ((void (*)(float32x4_t *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore28CanvasRenderingContext2DBase25CachedContentsTransparentENS7_21CachedContentsUnknownENS7_23CachedContentsImageDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v6])(&v40, a1 + 720);
    *(_DWORD *)(a1 + 792) = 1;
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
  if (result)
  {
    *(_BYTE *)(a1 + 812) = 1;
    if (!a2[1].i8[0])
      goto LABEL_21;
    v39 = *a2;
    v8 = v39.i32[2];
    if (v39.f32[2] > 0.0 && v39.f32[3] > 0.0)
    {
      v9 = *(unsigned int *)(a1 + 132);
      if ((_DWORD)v9)
      {
        v10 = v9 - 1;
        v11 = *(_QWORD *)(a1 + 120);
        if (!*(_BYTE *)(v11 + 560 * v10 + 160))
          return result;
        v12 = result;
        if ((a3 & 1) != 0)
        {
          v39.i32[0] = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)(v11 + 560 * v10 + 112), (const WebCore::FloatRect *)&v39);
          *(uint64_t *)((char *)v39.i64 + 4) = __PAIR64__(v8, v13);
          v39.i32[3] = v14;
        }
        if ((a3 & 2) == 0)
        {
LABEL_17:
          v19 = *(float *)(a1 + 696);
          v20 = v39.f32[0];
          if (v19 > v39.f32[0]
            || (float)(v19 + *(float *)(a1 + 704)) < (float)(v39.f32[0] + *(float *)&v8)
            || (v21 = *(float *)(a1 + 700), v21 > v39.f32[1])
            || (float)(v21 + *(float *)(a1 + 708)) < (float)(v39.f32[1] + v39.f32[3]))
          {
            v24 = v39.f32[3];
            if (*(_BYTE *)(v12 + 342))
            {
              v20 = v39.f32[0] + -1.0;
              *(float *)&v8 = (float)(*(float *)&v8 + 1.0) + 1.0;
              v39.f32[0] = v39.f32[0] + -1.0;
              v39.f32[1] = v39.f32[1] + -1.0;
              v24 = (float)(v39.f32[3] + 1.0) + 1.0;
              v39.i32[2] = v8;
              v39.f32[3] = v24;
            }
            v25 = (float32x4_t *)(a1 + 696);
            if (*(float *)&v8 > 0.0 && v24 > 0.0)
            {
              v26 = *(float *)(a1 + 704);
              if (v26 <= 0.0 || (v27 = *(float *)(a1 + 708), v27 <= 0.0))
              {
                *v25 = v39;
              }
              else
              {
                if (v20 >= v19)
                  v28 = v19;
                else
                  v28 = v20;
                v29 = *(float *)(a1 + 700);
                if (v39.f32[1] >= v29)
                  v30 = *(float *)(a1 + 700);
                else
                  v30 = v39.f32[1];
                v31 = v19 + v26;
                v32 = *(float *)&v8 + v20;
                if (v31 < v32)
                  v31 = v32;
                v33 = v27 + v29;
                if ((float)(v27 + v29) < (float)(v24 + v39.f32[1]))
                  v33 = v24 + v39.f32[1];
                *(float *)(a1 + 696) = v28;
                *(float *)(a1 + 700) = v30;
                *(float *)(a1 + 704) = v31 - v28;
                *(float *)(a1 + 708) = v33 - v30;
              }
            }
            v22 = (a3 >> 3) & 1;
            v23 = *(_QWORD *)(a1 + 32);
            v40 = *v25;
            v41 = 1;
            return (*(uint64_t (**)(uint64_t, float32x4_t *, uint64_t))(*(_QWORD *)v23 + 104))(v23, &v40, v22);
          }
LABEL_21:
          v22 = (a3 >> 3) & 1;
          v23 = *(_QWORD *)(a1 + 32);
          v40.i8[0] = 0;
          v41 = 0;
          return (*(uint64_t (**)(uint64_t, float32x4_t *, uint64_t))(*(_QWORD *)v23 + 104))(v23, &v40, v22);
        }
        v15 = *(unsigned int *)(a1 + 132);
        if ((_DWORD)v15)
        {
          v16 = v15 - 1;
          v17 = *(_QWORD *)(a1 + 120);
          v18 = *(_QWORD *)(v17 + 560 * v16 + 88);
          if ((v18 & 0x8000000000000) != 0)
          {
            if (*(float *)((v18 & 0xFFFFFFFFFFFFLL) + 0x10) <= 0.0)
              goto LABEL_17;
          }
          else if (!*(_QWORD *)(v17 + 560 * v16 + 88))
          {
            goto LABEL_17;
          }
          v34.i32[3] = v39.i32[3];
          v40 = v39;
          v35 = v17 + 560 * v16;
          v34.i64[0] = *(_QWORD *)(v35 + 72);
          v34.i32[2] = *(_DWORD *)(v35 + 80);
          v36 = (float32x4_t)vdupq_laneq_s32(v34, 2);
          v34.i32[3] = v34.i32[2];
          v37 = vaddq_f32((float32x4_t)v34, v39);
          v38.i64[0] = vsubq_f32(v37, v36).u64[0];
          v38.i64[1] = vaddq_f32(v37, v36).i64[1];
          v40 = v38;
          WebCore::FloatRect::unite((float32x2_t *)&v39, (float32x2_t *)&v40);
          v8 = v39.i32[2];
          goto LABEL_17;
        }
        __break(0xC471u);
      }
      else
      {
        __break(0xC471u);
      }
      JUMPOUT(0x195CE7268);
    }
  }
  return result;
}

uint64_t WebCore::CanvasRenderingContext2DBase::fillRect(uint64_t **this, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8, double *a9)
{
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  float v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  float32_t v35;
  WTF *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  unsigned int v41;
  WebCore::Gradient *v42;
  WTF *v43;
  float32x4_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  float32x4_t v49[2];
  uint64_t v50;
  _DWORD v51[2];
  _DWORD v52[2];
  _DWORD v53[2];
  float32x4_t v54;
  float v55;
  float v56;
  __int32 v57;
  float v58;

  v47 = a3;
  v48 = a2;
  v45 = a5;
  v46 = a4;
  result = WebCore::validateRectForCanvas((WebCore *)&v48, &v47, &v46, &v45, a9);
  if ((_DWORD)result)
  {
    *(float *)&v11 = v48;
    *(float *)&v12 = v47;
    *(float *)&v13 = v46;
    *(float *)&v14 = v45;
    v44.i64[0] = __PAIR64__(v12, v11);
    v44.i64[1] = __PAIR64__(v14, v13);
    WebCore::CanvasFilterContextSwitcher::create(this, (WebCore::CanvasRenderingContext2DBase *)&v44, (uint64_t **)&v43);
    result = ((uint64_t (*)(uint64_t **))(*this)[30])(this);
    if (!result)
    {
LABEL_21:
      v36 = v43;
      if (v43)
      {
        WebCore::CanvasRenderingContext2DBase::restore(*(_QWORD *)v43);
        return WTF::fastFree(v36, v37);
      }
      return result;
    }
    v15 = *((_DWORD *)this + 33);
    if (!v15)
      goto LABEL_35;
    if (!LOBYTE(this[15][70 * v15 - 50]))
      goto LABEL_21;
    v16 = result;
    if (*(_DWORD *)(result + 88) == 1 && !*(_DWORD *)(result + 32))
    {
      v42 = *(WebCore::Gradient **)(result + 24);
      if (v42)
      {
        result = (uint64_t)WebCore::Gradient::isZeroSize(v42);
        if ((result & 1) != 0)
          goto LABEL_21;
      }
    }
    v54.i64[0] = v44.i64[0];
    v54.f32[2] = v44.f32[0] + v44.f32[2];
    v54.i32[3] = v44.i32[1];
    v55 = v44.f32[0] + v44.f32[2];
    v56 = v44.f32[1] + v44.f32[3];
    v57 = v44.i32[0];
    v58 = v44.f32[1] + v44.f32[3];
    v17 = (float)(*(unsigned int (**)(uint64_t *))(*this[4] + 56))(this[4]);
    v18 = (*(uint64_t (**)(uint64_t *))(*this[4] + 64))(this[4]);
    v50 = 0;
    *(float *)v51 = v17;
    v51[1] = 0;
    *(float *)v52 = v17;
    *(float *)&v52[1] = (float)v18;
    v53[0] = 0;
    *(float *)&v53[1] = (float)v18;
    v19 = *((unsigned int *)this + 33);
    if (!(_DWORD)v19)
    {
      __break(0xC471u);
      JUMPOUT(0x195CE7678);
    }
    v20 = v19 - 1;
    v21 = this[15];
    WebCore::AffineTransform::mapQuad((float64x2_t *)&v21[70 * v19 - 56], &v54, v49);
    if (WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)v49, (const WebCore::FloatPoint *)&v50)
      && WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)v49, (const WebCore::FloatPoint *)v51)
      && WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)v49, (const WebCore::FloatPoint *)v52)
      && WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)v49, (const WebCore::FloatPoint *)v53))
    {
      goto LABEL_11;
    }
    v23 = LOBYTE(v21[70 * v20 + 13]);
    if (v23 <= 9)
    {
      if (((1 << v23) & 0x298) != 0)
      {
        v24 = ((uint64_t (*)(uint64_t **))(*this)[30])(this);
        v25 = *((_DWORD *)this + 33);
        if (v25)
        {
          v26 = (uint64_t)&this[15][70 * v25 - 70];
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v24 + 600))(v24, *(unsigned __int8 *)(v26 + 104), *(unsigned __int8 *)(v26 + 105));
          v22 = 1;
          (*(void (**)(uint64_t, float32x4_t *, uint64_t))(*(_QWORD *)v16 + 216))(v16, &v44, 1);
          v27 = ((uint64_t (*)(uint64_t **))(*this)[30])(this);
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 608))(v27);
          goto LABEL_16;
        }
LABEL_35:
        __break(0xC471u);
        JUMPOUT(0x195CE7670);
      }
      if (v23 == 1)
      {
        v38 = ((uint64_t (*)(uint64_t **))(*this)[30])(this);
        if (v38)
        {
          v39 = v38;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 96))(v38, 1);
          ((void (*)(float32x4_t *__return_ptr, uint64_t **))(*this)[31])(&v54, this);
          (*(void (**)(uint64_t, float32x4_t *))(*(_QWORD *)v39 + 664))(v39, &v54);
          v40 = (float)(*(unsigned int (**)(uint64_t *))(*this[4] + 56))(this[4]);
          v41 = (*(uint64_t (**)(uint64_t *))(*this[4] + 64))(this[4]);
          v54.i64[0] = 0;
          v54.f32[2] = v40;
          v54.f32[3] = (float)v41;
          (*(void (**)(uint64_t, float32x4_t *))(*(_QWORD *)v39 + 280))(v39, &v54);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 104))(v39, 1);
        }
LABEL_11:
        v22 = 1;
        (*(void (**)(uint64_t, float32x4_t *, uint64_t))(*(_QWORD *)v16 + 216))(v16, &v44, 1);
LABEL_16:
        if (v43)
        {
          v28 = *(_DWORD *)(*(_QWORD *)v43 + 132);
          if (!v28)
          {
            __break(0xC471u);
            JUMPOUT(0x195CE7680);
          }
          v29 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v43 + 120) + 560 * v28 - 8);
          v30 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v29 + 8) + 272))(*(_QWORD *)(v29 + 8), v29 + 24);
          *(float *)&v33 = *(float *)(v29 + 28) - (float)(int)v30;
          *(float *)&v34 = *(float *)(v29 + 32) + (float)((float)v32 + (float)SHIDWORD(v30));
          v35 = *(float *)(v29 + 36) + (float)((float)(int)v30 + (float)v31);
          v54.f32[0] = *(float *)(v29 + 24) - (float)v32;
          *(uint64_t *)((char *)v54.i64 + 4) = __PAIR64__(v34, v33);
          v54.f32[3] = v35;
        }
        else
        {
          v54 = v44;
        }
        result = WebCore::CanvasRenderingContext2DBase::didDraw((uint64_t)this, v22, &v54, 0xFu);
        goto LABEL_21;
      }
    }
    (*(void (**)(uint64_t, float32x4_t *, uint64_t))(*(_QWORD *)v16 + 216))(v16, &v44, 1);
    v22 = 0;
    goto LABEL_16;
  }
  return result;
}

uint64_t WebCore::CanvasRenderingContext2DBase::didDraw(uint64_t a1, int a2, float32x4_t *a3, unsigned int a4)
{
  unsigned int v5;
  uint64_t v6;
  BOOL v7;
  int32x2_t *v8;
  float32x4_t v10;
  char v11;

  v5 = a4;
  if (*(float *)(a1 + 696) == 0.0
    && *(float *)(a1 + 700) == 0.0
    && ((v6 = *(_QWORD *)(a1 + 32), *(float *)(a1 + 704) == (float)*(int *)(v6 + 8))
      ? (v7 = *(float *)(a1 + 708) == (float)*(int *)(v6 + 12))
      : (v7 = 0),
        v7))
  {
    v10.i8[0] = 0;
    v11 = 0;
  }
  else
  {
    if (a2)
    {
      v5 = a4 & 8 | 4;
      v8 = *(int32x2_t **)(a1 + 32);
      v10.i64[0] = 0;
      *(float32x2_t *)&v10.u32[2] = vcvt_f32_s32(v8[1]);
    }
    else
    {
      v10 = *a3;
    }
    v11 = 1;
  }
  return WebCore::CanvasRenderingContext2DBase::didDraw(a1, &v10, v5);
}

uint64_t WebCore::CanvasRenderingContext2DBase::strokeRect(WebCore::CanvasRenderingContext2DBase *this, double a2, double a3, double a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8, double *a9)
{
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  double v16;
  float32x2_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  float v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  float32_t v36;
  float32_t v37;
  float32_t v38;
  WTF *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  unsigned int v44;
  unsigned int v45;
  float v46;
  float v47;
  WebCore::Gradient *v48;
  WTF *v49;
  float32x4_t v50;
  float32x4_t v51;
  double v52;
  double v53;
  double v54;
  double v55;
  float32x4_t v56;

  v54 = a3;
  v55 = a2;
  v52 = a5;
  v53 = a4;
  result = WebCore::validateRectForCanvas((WebCore *)&v55, &v54, &v53, &v52, a9);
  if ((_DWORD)result)
  {
    *(float *)&v11 = v55;
    *(float *)&v12 = v54;
    *(float *)&v13 = v53;
    *(float *)&v14 = v52;
    v51.i64[0] = __PAIR64__(v12, v11);
    v51.i64[1] = __PAIR64__(v14, v13);
    v50 = v51;
    v15 = *((_DWORD *)this + 33);
    if (!v15)
    {
      __break(0xC471u);
      JUMPOUT(0x195CE7B08);
    }
    v16 = *(double *)(*((_QWORD *)this + 15) + 560 * v15 - 512) * 0.5;
    *(float *)&v16 = v16;
    v17 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v16, 0);
    *(float32x2_t *)v50.f32 = vsub_f32(*(float32x2_t *)v50.f32, v17);
    *(float32x2_t *)&v50.u32[2] = vadd_f32(vadd_f32(*(float32x2_t *)&v50.u32[2], v17), v17);
    WebCore::CanvasFilterContextSwitcher::create((uint64_t **)this, (WebCore::CanvasRenderingContext2DBase *)&v50, (uint64_t **)&v49);
    result = (*(uint64_t (**)(WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)this + 240))(this);
    if (!result)
      goto LABEL_19;
    v18 = *((unsigned int *)this + 33);
    if (!(_DWORD)v18)
    {
      __break(0xC471u);
      JUMPOUT(0x195CE7B10);
    }
    v19 = *((_QWORD *)this + 15);
    if (!*(_BYTE *)(v19 + 560 * (v18 - 1) + 160) || *(double *)(v19 + 560 * (v18 - 1) + 48) < 0.0)
      goto LABEL_19;
    v20 = result;
    if (*(_DWORD *)(result + 176) == 1 && !*(_DWORD *)(result + 120))
    {
      v48 = *(WebCore::Gradient **)(result + 112);
      if (v48)
      {
        result = (uint64_t)WebCore::Gradient::isZeroSize(v48);
        if ((result & 1) != 0)
        {
LABEL_19:
          v39 = v49;
          if (v49)
          {
            WebCore::CanvasRenderingContext2DBase::restore(*(_QWORD *)v49);
            return WTF::fastFree(v39, v40);
          }
          return result;
        }
        LODWORD(v18) = *((_DWORD *)this + 33);
        if (!(_DWORD)v18)
          goto LABEL_38;
      }
    }
    v21 = v18 - 1;
    v22 = *((_QWORD *)this + 15);
    v23 = *(unsigned __int8 *)(v22 + 560 * v21 + 104);
    if (v23 <= 9)
    {
      if (((1 << v23) & 0x298) != 0)
      {
        v24 = (*(uint64_t (**)(WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)this + 240))(this);
        v25 = *((_DWORD *)this + 33);
        if (!v25)
        {
          __break(0xC471u);
          JUMPOUT(0x195CE7B18);
        }
        v26 = *((_QWORD *)this + 15) + 560 * v25 - 560;
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v24 + 600))(v24, *(unsigned __int8 *)(v26 + 104), *(unsigned __int8 *)(v26 + 105));
        v27 = *((_DWORD *)this + 33);
        if (!v27)
        {
          __break(0xC471u);
          JUMPOUT(0x195CE7B20);
        }
        v28 = *(double *)(*((_QWORD *)this + 15) + 560 * v27 - 512);
        (*(void (**)(uint64_t, float32x4_t *, float))(*(_QWORD *)v20 + 288))(v20, &v51, v28);
        v29 = (*(uint64_t (**)(WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)this + 240))(this);
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 608))(v29);
LABEL_13:
        v30 = 1;
LABEL_14:
        if (v49)
        {
          v31 = *(_DWORD *)(*(_QWORD *)v49 + 132);
          if (!v31)
          {
            __break(0xC471u);
            JUMPOUT(0x195CE7B28);
          }
          v32 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v49 + 120) + 560 * v31 - 8);
          v33 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v32 + 8) + 272))(*(_QWORD *)(v32 + 8), v32 + 24);
          v36 = *(float *)(v32 + 28) - (float)(int)v33;
          v37 = *(float *)(v32 + 32) + (float)((float)v35 + (float)SHIDWORD(v33));
          v38 = *(float *)(v32 + 36) + (float)((float)(int)v33 + (float)v34);
          v56.f32[0] = *(float *)(v32 + 24) - (float)v35;
          v56.f32[1] = v36;
          v56.f32[2] = v37;
          v56.f32[3] = v38;
        }
        else
        {
          v56 = v50;
        }
        result = WebCore::CanvasRenderingContext2DBase::didDraw((uint64_t)this, v30, &v56, 0xFu);
        goto LABEL_19;
      }
      if (v23 == 1)
      {
        v41 = (*(uint64_t (**)(WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)this + 240))(this);
        if (v41)
        {
          v42 = v41;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v41 + 96))(v41, 1);
          (*(void (**)(float32x4_t *__return_ptr, WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)this + 248))(&v56, this);
          (*(void (**)(uint64_t, float32x4_t *))(*(_QWORD *)v42 + 664))(v42, &v56);
          v43 = (float)(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 4) + 56))(*((_QWORD *)this + 4));
          v44 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 64))(*((_QWORD *)this + 4));
          v56.i64[0] = 0;
          v56.f32[2] = v43;
          v56.f32[3] = (float)v44;
          (*(void (**)(uint64_t, float32x4_t *))(*(_QWORD *)v42 + 280))(v42, &v56);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 104))(v42, 1);
        }
        v45 = *((_DWORD *)this + 33);
        if (!v45)
        {
LABEL_38:
          __break(0xC471u);
          JUMPOUT(0x195CE7B00);
        }
        v46 = *(double *)(*((_QWORD *)this + 15) + 560 * v45 - 512);
        (*(void (**)(uint64_t, float32x4_t *, float))(*(_QWORD *)v20 + 288))(v20, &v51, v46);
        goto LABEL_13;
      }
    }
    v47 = *(double *)(v22 + 560 * v21 + 48);
    (*(void (**)(uint64_t, float32x4_t *, float))(*(_QWORD *)v20 + 288))(v20, &v51, v47);
    v30 = 0;
    goto LABEL_14;
  }
  return result;
}

void WebCore::CanvasRenderingContext2DBase::setShadow(uint64_t a1, unsigned int **this, uint64_t a3, float a4, float a5, float a6)
{
  float v10;
  uint64_t v11;
  void *v12;
  unint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v10 = *(float *)&a3;
  v11 = a3 & 0xFF00000000;
  v24 = 0x1104000000000000;
  if (!*this
    || (WebCore::parseColor(this, *(const WTF::String **)(a1 + 32), (uint64_t *)&v23),
        v13 = v23,
        v23 == 0x1104000000000000))
  {
    v13 = 0x1104000000000000;
  }
  else
  {
    v24 = v23;
    if ((v23 & 0x4000000000000) == 0)
      goto LABEL_11;
  }
  v23 = __PAIR64__(LODWORD(a5), LODWORD(a4));
  if (v11)
  {
    WebCore::Color::colorWithAlpha((uint64_t)&v24, v10, (uint64_t *)&v22);
  }
  else
  {
    v22 = v13;
    if ((v13 & 0x8000000000000) != 0)
    {
      v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
    }
  }
  WebCore::CanvasRenderingContext2DBase::setShadow(a1, (const WebCore::FloatSize *)&v23, a6, (const WebCore::Color *)&v22);
  if ((v22 & 0x8000000000000) != 0)
  {
    v19 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL);
    do
    {
      v20 = __ldaxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
    {
      atomic_store(1u, v19);
      WTF::fastFree((WTF *)v19, v12);
    }
  }
  v13 = v24;
LABEL_11:
  if ((v13 & 0x8000000000000) != 0)
  {
    v16 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      atomic_store(1u, v16);
      WTF::fastFree((WTF *)v16, v12);
    }
  }
}

uint64_t WebCore::CanvasRenderingContext2DBase::setShadow(uint64_t this, const WebCore::FloatSize *a2, float a3, const WebCore::Color *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  BOOL shouldDrawShadows;
  void *v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  float *v21;
  unint64_t v22;
  unint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;

  v4 = *(unsigned int *)(this + 132);
  if (!(_DWORD)v4)
  {
    __break(0xC471u);
    JUMPOUT(0x195CE7F18);
  }
  v8 = this;
  v9 = v4 - 1;
  v10 = *(_QWORD *)(this + 120);
  v11 = v10 + 560 * v9;
  v12 = *(float *)(v11 + 72) == *(float *)a2 && *(float *)(v11 + 76) == *((float *)a2 + 1);
  if (!v12 || *(float *)(v10 + 560 * v9 + 80) != a3)
    goto LABEL_13;
  v13 = *(_QWORD *)(v10 + 560 * v9 + 88);
  v14 = *(_QWORD *)a4;
  if ((v13 & 0x8000000000000) != 0)
  {
    if ((v14 & 0x8000000000000) != 0
      && *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v14 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v14 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v14 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v14 & 0xFFFFFFFFFFFFLL) + 0x10)
      && HIBYTE(v13) == HIBYTE(v14)
      && BYTE6(v13) == BYTE6(v14))
    {
      return this;
    }
LABEL_13:
    shouldDrawShadows = WebCore::CanvasRenderingContext2DBase::shouldDrawShadows(this);
    WebCore::CanvasRenderingContext2DBase::realizeSaves((WebCore::CanvasRenderingContext2DBase::State *)v8);
    v18 = *(_DWORD *)(v8 + 132);
    if (!v18)
    {
      __break(0xC471u);
      JUMPOUT(0x195CE7F20);
    }
    *(_QWORD *)(*(_QWORD *)(v8 + 120) + 560 * v18 - 488) = *(_QWORD *)a2;
    v19 = *(_DWORD *)(v8 + 132);
    if (!v19)
    {
      __break(0xC471u);
      JUMPOUT(0x195CE7F28);
    }
    v21 = (float *)(*(_QWORD *)(v8 + 120) + 560 * v19 - 472);
    v20 = *(_QWORD *)v21;
    *(v21 - 2) = a3;
    v22 = *(_QWORD *)a4;
    if ((v20 & 0x8000000000000) != 0)
    {
      if ((v22 & 0x8000000000000) == 0
        || *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 4)
        || *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 8)
        || *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 0xC)
        || *(float *)((v20 & 0xFFFFFFFFFFFFLL) + 0x10) != *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 0x10)
        || HIBYTE(v20) != HIBYTE(v22)
        || BYTE6(v20) != BYTE6(v22))
      {
        v27 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
        do
        {
          v28 = __ldaxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
        {
          atomic_store(1u, v27);
          WTF::fastFree((WTF *)v27, v17);
        }
        goto LABEL_20;
      }
    }
    else if (v20 != v22 || (v22 & 0x8000000000000) != 0)
    {
LABEL_20:
      v24 = *(_QWORD *)a4;
      *(_QWORD *)v21 = *(_QWORD *)a4;
      if ((v24 & 0x8000000000000) != 0)
      {
        v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFLL);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 + 1, v25));
      }
    }
    if (shouldDrawShadows)
      return WebCore::CanvasRenderingContext2DBase::applyShadow((WebCore::CanvasRenderingContext2DBase *)v8);
    this = WebCore::CanvasRenderingContext2DBase::shouldDrawShadows(v8);
    if ((_DWORD)this)
      return WebCore::CanvasRenderingContext2DBase::applyShadow((WebCore::CanvasRenderingContext2DBase *)v8);
    return this;
  }
  if (v13 != v14 || (v14 & 0x8000000000000) != 0)
    goto LABEL_13;
  return this;
}

uint64_t WebCore::CanvasRenderingContext2DBase::setShadow(WebCore::CanvasRenderingContext2DBase *this, float a2, float a3, float a4, float a5, float a6)
{
  uint64_t v6;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v15;
  _DWORD v16[2];
  uint64_t v17;
  uint64_t v18;

  v17 = v6;
  v18 = v7;
  *(float *)v16 = a2;
  *(float *)&v16[1] = a3;
  v8 = 1.0;
  if (a5 <= 1.0)
    v9 = a5;
  else
    v9 = 1.0;
  if (a5 < 0.0)
    v9 = 0.0;
  if (a6 <= 1.0)
    v8 = a6;
  if (a6 < 0.0)
    v8 = 0.0;
  v10 = llroundf(v9 * 255.0);
  v11 = 255;
  if (v10 >= 255)
    v10 = 255;
  v12 = v10 & ~(v10 >> 63);
  v13 = llroundf(v8 * 255.0);
  if (v13 < 255)
    v11 = v13;
  v15 = bswap32(((v11 & ~(v11 >> 63)) << 24) | (v12 << 16) | (v12 << 8) | v12) | 0x1104000000000000;
  return WebCore::CanvasRenderingContext2DBase::setShadow((uint64_t)this, (const WebCore::FloatSize *)v16, a4, (const WebCore::Color *)&v15);
}

uint64_t WebCore::CanvasRenderingContext2DBase::setShadow(WebCore::CanvasRenderingContext2DBase *this, float a2, float a3, float a4, float a5, float a6, float a7, float a8)
{
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v25;
  _DWORD v26[2];
  uint64_t v27;
  uint64_t v28;

  v27 = v8;
  v28 = v9;
  *(float *)v26 = a2;
  *(float *)&v26[1] = a3;
  v10 = 1.0;
  if (a5 <= 1.0)
    v11 = a5;
  else
    v11 = 1.0;
  if (a5 < 0.0)
    v11 = 0.0;
  if (a6 <= 1.0)
    v12 = a6;
  else
    v12 = 1.0;
  if (a6 >= 0.0)
    v13 = v12;
  else
    v13 = 0.0;
  if (a7 <= 1.0)
    v14 = a7;
  else
    v14 = 1.0;
  if (a7 >= 0.0)
    v15 = v14;
  else
    v15 = 0.0;
  if (a8 <= 1.0)
    v10 = a8;
  if (a8 < 0.0)
    v10 = 0.0;
  v16 = llroundf(v11 * 255.0);
  v17 = 255;
  if (v16 >= 255)
    v16 = 255;
  v18 = v16 & ~(v16 >> 63);
  v19 = llroundf(v13 * 255.0);
  if (v19 >= 255)
    v19 = 255;
  v20 = v19 & ~(v19 >> 63);
  v21 = llroundf(v15 * 255.0);
  if (v21 >= 255)
    v21 = 255;
  v22 = v21 & ~(v21 >> 63);
  v23 = llroundf(v10 * 255.0);
  if (v23 < 255)
    v17 = v23;
  v25 = bswap32(((v17 & ~(v17 >> 63)) << 24) | (v22 << 16) | (v20 << 8) | v18) | 0x1104000000000000;
  return WebCore::CanvasRenderingContext2DBase::setShadow((uint64_t)this, (const WebCore::FloatSize *)v26, a4, (const WebCore::Color *)&v25);
}

BOOL WebCore::FloatSize::isZero(WebCore::FloatSize *this)
{
  float v1;
  float v2;
  float v3;

  v1 = *(float *)this;
  if (*(float *)this != 0.0)
  {
    if (v1 < 0.0)
      v1 = -v1;
    if (v1 >= 0.00000011921)
      return 0;
  }
  v2 = *((float *)this + 1);
  v3 = 0.0;
  if (v2 != 0.0)
  {
    if (v2 < 0.0)
      v3 = -v2;
    else
      v3 = *((float *)this + 1);
  }
  return v3 < 0.00000011921;
}

WebCore::CanvasRenderingContext *WebCore::CanvasRenderingContext2DBase::drawImage@<X0>(WebCore::CanvasRenderingContext *result@<X0>, _QWORD *a2@<X1>, float *a3@<X2>, float *a4@<X3>, unsigned __int8 *a5@<X4>, unsigned __int8 *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::CanvasRenderingContext *v16;
  uint64_t v17;
  double v18;
  float v19;
  float v20;
  double v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  const WebCore::RenderObject *v27;
  uint64_t v28;
  const WebCore::CachedImage *v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  float v34;
  float v35;
  _BYTE v36[8];
  WTF::StringImpl *v37;
  char v38;

  v8 = a2[22];
  if ((*(_BYTE *)(v8 + 128) & 8) == 0 || (v9 = *(_QWORD *)(v8 + 24)) == 0 || (v10 = *(_QWORD *)(v9 + 8)) == 0)
  {
    *(_QWORD *)a7 = 0;
    *(_QWORD *)(a7 + 8) = 0;
    *(_QWORD *)(a7 + 16) = 0;
    return result;
  }
  if ((*(_WORD *)(v10 + 557) & 0xE0) == 0x80)
  {
    result = (WebCore::CanvasRenderingContext *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a7 = 8;
    *(_BYTE *)(a7 + 16) = 1;
    return result;
  }
  v16 = result;
  v17 = a2[8];
  if ((v17 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v17 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195CE83F8);
  }
  v18 = WebCore::CachedImage::imageSizeForRenderer(v10, v17 & 0xFFFFFFFFFFFFLL, 0) * 64.0;
  if (v18 >= 2147483650.0)
  {
    v20 = 33554000.0;
  }
  else if (v18 <= -2147483650.0)
  {
    v20 = -33554000.0;
  }
  else
  {
    v20 = (float)(int)v18 * 0.015625;
  }
  v21 = v19 * 64.0;
  if (v21 >= 2147483650.0)
  {
    v22 = 33554000.0;
  }
  else if (v21 <= -2147483650.0)
  {
    v22 = -33554000.0;
  }
  else
  {
    v22 = (float)(int)v21 * 0.015625;
  }
  v23 = *(_QWORD *)(a2[22] + 24);
  v33 = 0;
  v34 = v20;
  v35 = v22;
  if (!v23 || (v24 = *(_QWORD *)(v23 + 8)) == 0 || *(char *)(v24 + 720) < 0)
  {
    if ((a2[8] & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((*(_BYTE *)((a2[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195CE8418);
      }
      v25 = (a2[8] & 0xFFFFFFFFFFFFLL) + 104;
      goto LABEL_19;
    }
    v36[0] = 0;
    v38 = 0;
    v31 = (*(uint64_t (**)(_QWORD *, _BYTE *))(*a2 + 264))(a2, v36);
    if (v38)
    {
      v32 = v37;
      v37 = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, v30);
        else
          *(_DWORD *)v32 -= 2;
      }
    }
    if (v31)
    {
      v25 = v31 + 24;
LABEL_19:
      v26 = ((unint64_t)*(unsigned int *)(*(_QWORD *)v25 + 232) >> 15) & 1;
      goto LABEL_20;
    }
  }
  v26 = 0;
LABEL_20:
  v27 = (const WebCore::RenderObject *)(a2[8] & 0xFFFFFFFFFFFFLL);
  if (v27 && (*(_BYTE *)((a2[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195CE8438);
  }
  result = (WebCore::CanvasRenderingContext *)WebCore::CanvasRenderingContext2DBase::drawImage((unsigned int *)a7, (uint64_t **)v16, *(_QWORD *)(a2[5] + 8), (WebCore::CachedImage *)v10, v27, (uint64_t)&v33, a3, a4, a5, a6, v26);
  if (!*(_BYTE *)(a7 + 16) && *(_BYTE *)(*((_QWORD *)v16 + 4) + 72))
  {
    v28 = *(_QWORD *)(a2[22] + 24);
    if (v28)
      v29 = *(const WebCore::CachedImage **)(v28 + 8);
    else
      v29 = 0;
    result = (WebCore::CanvasRenderingContext *)WebCore::CanvasRenderingContext::taintsOrigin(result, v29);
    if ((_DWORD)result)
      *(_BYTE *)(*((_QWORD *)v16 + 4) + 72) = 0;
  }
  return result;
}

unsigned int *WebCore::CanvasRenderingContext2DBase::drawImage(unsigned int *result, uint64_t **this, uint64_t a3, WebCore::CachedImage *a4, const WebCore::RenderObject *a5, uint64_t a6, float *a7, float *a8, unsigned __int8 *a9, unsigned __int8 *a10, uint64_t a11)
{
  unsigned int *v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  unsigned int v31;
  unsigned int *v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  unsigned int **v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  float v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  void *v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int v57;
  WebCore::CanvasFilterContextSwitcher *v58;
  void *v59;
  unsigned int v60;
  WebCore::DestinationColorSpace *v61;
  uint64_t *v62;
  void *v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int *v73;
  WebCore::CanvasFilterContextSwitcher *v74;
  float32x4_t v75;
  _DWORD v76[4];
  float32x4_t v77[2];
  uint64_t v78;
  _DWORD v79[2];
  _DWORD v80[2];
  _DWORD v81[2];
  float32x4_t v82;
  float v83;
  float v84;
  __int32 v85;
  float v86;

  v11 = result;
  v12 = *a8;
  if ((*(_DWORD *)a8 & 0x7FFFFFFFu) > 0x7F7FFFFF)
    goto LABEL_83;
  v13 = a8[1];
  if ((LODWORD(v13) & 0x7FFFFFFFu) > 0x7F7FFFFF)
    goto LABEL_83;
  v14 = a8[2];
  if ((LODWORD(v14) & 0x7FFFFFFFu) > 0x7F7FFFFF)
    goto LABEL_83;
  v15 = a8[3];
  if ((LODWORD(v15) & 0x7FFFFFFFu) > 0x7F7FFFFF)
    goto LABEL_83;
  v16 = *a7;
  if ((*(_DWORD *)a7 & 0x7FFFFFFFu) > 0x7F7FFFFF)
    goto LABEL_83;
  v17 = a7[1];
  if ((LODWORD(v17) & 0x7FFFFFFFu) > 0x7F7FFFFF)
    goto LABEL_83;
  v18 = a7[2];
  if ((LODWORD(v18) & 0x7FFFFFFFu) > 0x7F7FFFFF)
    goto LABEL_83;
  v19 = a7[3];
  if ((LODWORD(v19) & 0x7FFFFFFFu) >= 0x7F800000 || v18 == 0.0 || v19 == 0.0 || v14 == 0.0 || v15 == 0.0)
    goto LABEL_83;
  v20 = v16 + v18;
  if ((float)(v16 + v18) >= v16)
    v20 = *a7;
  if ((float)(v17 + v19) < v17)
    v17 = v17 + v19;
  if (v18 < 0.0)
    v18 = -v18;
  v21 = -v19;
  if (v19 >= 0.0)
    v21 = a7[3];
  *(float *)v76 = v20;
  *(float *)&v76[1] = v17;
  *(float *)&v76[2] = v18;
  *(float *)&v76[3] = v21;
  v22 = v12 + v14;
  if ((float)(v12 + v14) >= v12)
    v22 = v12;
  if ((float)(v13 + v15) >= v13)
    v23 = v13;
  else
    v23 = v13 + v15;
  if (v14 >= 0.0)
    v24 = v14;
  else
    v24 = -v14;
  v25 = -v15;
  if (v15 >= 0.0)
    v25 = v15;
  v75.i64[0] = __PAIR64__(LODWORD(v23), LODWORD(v22));
  v75.i64[1] = __PAIR64__(LODWORD(v25), LODWORD(v24));
  if (v18 <= 0.0 || v21 <= 0.0 || v24 <= 0.0 || v25 <= 0.0)
  {
LABEL_83:
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    *((_QWORD *)result + 2) = 0;
    return result;
  }
  WebCore::CanvasFilterContextSwitcher::create(this, (WebCore::CanvasRenderingContext2DBase *)&v75, (uint64_t **)&v74);
  result = (unsigned int *)((uint64_t (*)(uint64_t **))(*this)[30])(this);
  if (result)
  {
    v31 = *((_DWORD *)this + 33);
    if (!v31)
    {
      __break(0xC471u);
      JUMPOUT(0x195CE8C0CLL);
    }
    if (LOBYTE(this[15][70 * v31 - 50]))
    {
      v32 = result;
      result = (unsigned int *)WebCore::CachedImage::imageForRenderer(a4, a5);
      if (result)
      {
        v33 = result;
        ++result[2];
        v34 = *((_QWORD *)result + 4);
        if (v34)
        {
          v35 = *(_QWORD *)(v34 + 8);
          if (v35)
            ++*(_DWORD *)(v35 + 8);
        }
        else
        {
          v35 = 0;
        }
        if (((*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 56))(result) & 1) != 0
          || (*(unsigned int (**)(unsigned int *))(*(_QWORD *)v33 + 64))(v33))
        {
          v37 = (unsigned int *)*((_QWORD *)v33 + 4);
          *((_QWORD *)v33 + 4) = 0;
          if (v37)
          {
            do
            {
              v38 = __ldaxr(v37);
              v39 = v38 - 1;
            }
            while (__stlxr(v39, v37));
            if (!v39)
            {
              atomic_store(1u, v37);
              WTF::fastFree((WTF *)v37, v36);
            }
          }
          v82.i64[0] = *(_QWORD *)(a6 + 8);
          (*(void (**)(unsigned int *, float32x4_t *))(*(_QWORD *)v33 + 128))(v33, &v82);
        }
        v40 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v33 + 16))(v33);
        v73 = v11;
        if (v40)
        {
          ++v33[2];
          v61 = (WebCore::DestinationColorSpace *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)v33 + 112))(v33);
          if (!(_DWORD)v61 || (*(_QWORD *)(*(_QWORD *)(a3 + 680) + 664) & 0x4000000) != 0)
          {
            v41 = (unsigned int **)v33;
          }
          else
          {
            v62 = WebCore::DestinationColorSpace::SRGB(v61);
            (*(void (**)(uint64_t *__return_ptr, unsigned int *, uint64_t *))(*(_QWORD *)v33 + 288))(&v78, v33, v62);
            result = (unsigned int *)WebCore::BitmapImage::create(&v78, (uint64_t *)&v82);
            v41 = (unsigned int **)v82.i64[0];
            v82.i64[0] = 0;
            if (v33[2] == 1)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
              result = (unsigned int *)v82.i64[0];
              v82.i64[0] = 0;
              if (result)
              {
                if (result[2] == 1)
                  result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
                else
                  --result[2];
              }
            }
            else
            {
              --v33[2];
              v82.i64[0] = 0;
            }
            v64 = v78;
            v78 = 0;
            if (v64)
              result = (unsigned int *)WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v64 + 8), v63);
            if (!v41)
            {
              v41 = (unsigned int **)v33;
LABEL_75:
              *(_QWORD *)v11 = 0;
              *((_QWORD *)v11 + 1) = 0;
              *((_QWORD *)v11 + 2) = 0;
              if (v35)
              {
                if (*(_DWORD *)(v35 + 8) == 1)
                  result = (unsigned int *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
                else
                  --*(_DWORD *)(v35 + 8);
              }
              if (*((_DWORD *)v41 + 2) == 1)
                result = (unsigned int *)(*((uint64_t (**)(unsigned int **))*v41 + 1))(v41);
              else
                --*((_DWORD *)v41 + 2);
              goto LABEL_80;
            }
            ++*((_DWORD *)v41 + 2);
            if (v33[2] == 1)
              (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
            else
              --v33[2];
          }
          if (*((_DWORD *)v41 + 2) == 1)
            (*((void (**)(unsigned int **))*v41 + 1))(v41);
          else
            --*((_DWORD *)v41 + 2);
        }
        else
        {
          v41 = (unsigned int **)v33;
        }
        v42 = *(_QWORD *)(a3 + 680);
        if (*(_BYTE *)(v42 + 247))
          LODWORD(v43) = *(_BYTE *)(v42 + 246) != 0;
        else
          v43 = (*(_QWORD *)(v42 + 696) >> 28) & 1;
        v44 = *a9;
        v45 = *a10;
        v46 = *(_QWORD *)(v42 + 680);
        if ((_DWORD)v43)
          v47 = 0x200000;
        else
          v47 = 0;
        v82.i64[0] = v75.i64[0];
        v82.f32[2] = v75.f32[0] + v75.f32[2];
        v82.i32[3] = v75.i32[1];
        v83 = v75.f32[0] + v75.f32[2];
        v84 = v75.f32[1] + v75.f32[3];
        v85 = v75.i32[0];
        v86 = v75.f32[1] + v75.f32[3];
        v48 = (float)(*(unsigned int (**)(uint64_t *))(*this[4] + 56))(this[4]);
        v49 = (*(uint64_t (**)(uint64_t *))(*this[4] + 64))(this[4]);
        v78 = 0;
        *(float *)v79 = v48;
        v79[1] = 0;
        *(float *)v80 = v48;
        *(float *)&v80[1] = (float)v49;
        v81[0] = 0;
        *(float *)&v81[1] = (float)v49;
        v50 = *((_DWORD *)this + 33);
        if (!v50)
        {
          __break(0xC471u);
          JUMPOUT(0x195CE8C14);
        }
        v51 = v47 | (v46 >> 3) & 0x100000 | (v45 | (v44 << 8)) & 0xF1F | ((a11 & 0xF) << 12) | 0x20;
        WebCore::AffineTransform::mapQuad((float64x2_t *)&this[15][70 * v50 - 56], &v82, v77);
        if (WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)v77, (const WebCore::FloatPoint *)&v78)
          && WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)v77, (const WebCore::FloatPoint *)v79)
          && WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)v77, (const WebCore::FloatPoint *)v80))
        {
          v11 = v73;
          if (WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)v77, (const WebCore::FloatPoint *)v81))
            goto LABEL_61;
        }
        else
        {
          v11 = v73;
        }
        v60 = *a9;
        if (v60 > 9)
          goto LABEL_109;
        if (((1 << v60) & 0x298) != 0)
        {
          WebCore::CanvasRenderingContext2DBase::fullCanvasCompositedDrawImage<WebCore::Image>(this, (uint64_t)v41, (const WebCore::FloatRect *)&v75, (uint64_t)v76, v60);
          goto LABEL_62;
        }
        if (v60 != 1)
        {
LABEL_109:
          (*(void (**)(unsigned int *, unsigned int **, float32x4_t *, _DWORD *, uint64_t))(*(_QWORD *)v32 + 360))(v32, v41, &v75, v76, v51);
          v52 = 0;
LABEL_63:
          if (v74)
          {
            WebCore::CanvasFilterContextSwitcher::expandedBounds((uint64_t)v74);
            v82.i64[0] = __PAIR64__(v66, v65);
            v82.i64[1] = __PAIR64__(v68, v67);
          }
          else
          {
            v82 = v75;
          }
          if (v40)
            v53 = 7;
          else
            v53 = 15;
          WebCore::CanvasRenderingContext2DBase::didDraw((uint64_t)this, v52, &v82, v53);
          if (((*((uint64_t (**)(unsigned int **))*v41 + 7))(v41) & 1) != 0
            || (result = (unsigned int *)(*((uint64_t (**)(unsigned int **))*v41 + 8))(v41), (_DWORD)result))
          {
            if (v35)
            {
              result = *(unsigned int **)(v35 + 16);
              if (result)
                goto LABEL_132;
              result = (unsigned int *)WTF::fastCompactMalloc((WTF *)0x10);
              *result = 1;
              *((_QWORD *)result + 1) = v35;
              v70 = *(unsigned int **)(v35 + 16);
              *(_QWORD *)(v35 + 16) = result;
              if (!v70)
                goto LABEL_132;
              do
              {
                v71 = __ldaxr(v70);
                v72 = v71 - 1;
              }
              while (__stlxr(v72, v70));
              if (!v72)
              {
                atomic_store(1u, v70);
                WTF::fastFree((WTF *)v70, v54);
              }
              result = *(unsigned int **)(v35 + 16);
              if (result)
              {
LABEL_132:
                do
                  v69 = __ldaxr(result);
                while (__stlxr(v69 + 1, result));
              }
              v11 = v73;
            }
            else
            {
              result = 0;
            }
            v55 = v41[4];
            v41[4] = result;
            if (v55)
            {
              do
              {
                v56 = __ldaxr(v55);
                v57 = v56 - 1;
              }
              while (__stlxr(v57, v55));
              if (!v57)
              {
                atomic_store(1u, v55);
                result = (unsigned int *)WTF::fastFree((WTF *)v55, v54);
              }
            }
          }
          goto LABEL_75;
        }
        WebCore::CanvasRenderingContext2DBase::clearCanvas((WebCore::CanvasRenderingContext2DBase *)this);
LABEL_61:
        (*(void (**)(unsigned int *, unsigned int **, float32x4_t *, _DWORD *, uint64_t))(*(_QWORD *)v32
                                                                                                  + 360))(v32, v41, &v75, v76, v51);
LABEL_62:
        v52 = 1;
        goto LABEL_63;
      }
    }
  }
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
LABEL_80:
  v58 = v74;
  if (v74)
  {
    WebCore::CanvasRenderingContext2DBase::restore(*(_QWORD *)v74);
    return (unsigned int *)WTF::fastFree(v58, v59);
  }
  return result;
}

WebCore::CanvasRenderingContext *WebCore::CanvasRenderingContext2DBase::drawImage(WebCore::CanvasRenderingContext *result, uint64_t a2, _QWORD *a3, float *a4, float *a5, unsigned __int8 *a6, unsigned __int8 *a7)
{
  WebCore::CanvasRenderingContext *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v16;
  double v17;
  float v18;
  float v19;
  double v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  const WebCore::CachedImage *v24;
  uint64_t v25;
  float v26;
  float v27;

  v7 = result;
  v8 = a3[37];
  if (v8 && (v9 = *(_QWORD *)(v8 + 8)) != 0)
  {
    if ((*(_WORD *)(v9 + 557) & 0xE0) == 0x80)
    {
      result = (WebCore::CanvasRenderingContext *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)v7 = 8;
      *((_BYTE *)v7 + 16) = 1;
    }
    else
    {
      v16 = a3[8];
      if ((v16 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v16 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195CE8E18);
      }
      v17 = WebCore::CachedImage::imageSizeForRenderer(v9, v16 & 0xFFFFFFFFFFFFLL, 0) * 64.0;
      if (v17 >= 2147483650.0)
      {
        v19 = 33554000.0;
      }
      else if (v17 <= -2147483650.0)
      {
        v19 = -33554000.0;
      }
      else
      {
        v19 = (float)(int)v17 * 0.015625;
      }
      v20 = v18 * 64.0;
      if (v20 >= 2147483650.0)
      {
        v21 = 33554000.0;
      }
      else if (v20 <= -2147483650.0)
      {
        v21 = -33554000.0;
      }
      else
      {
        v21 = (float)(int)v20 * 0.015625;
      }
      v22 = a3[8];
      v25 = 0;
      v26 = v19;
      v27 = v21;
      if ((v22 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v22 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      {
        __break(0xC471u);
        JUMPOUT(0x195CE8E38);
      }
      result = (WebCore::CanvasRenderingContext *)WebCore::CanvasRenderingContext2DBase::drawImage((unsigned int *)v7, (uint64_t **)a2, *(_QWORD *)(a3[5] + 8), (WebCore::CachedImage *)v9, (const WebCore::RenderObject *)(v22 & 0xFFFFFFFFFFFFLL), (uint64_t)&v25, a4, a5, a6, a7, 0);
      if (!*((_BYTE *)v7 + 16) && *(_BYTE *)(*(_QWORD *)(a2 + 32) + 72))
      {
        v23 = a3[37];
        if (v23)
          v24 = *(const WebCore::CachedImage **)(v23 + 8);
        else
          v24 = 0;
        result = (WebCore::CanvasRenderingContext *)WebCore::CanvasRenderingContext::taintsOrigin(result, v24);
        if ((_DWORD)result)
          *(_BYTE *)(*(_QWORD *)(a2 + 32) + 72) = 0;
      }
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    *((_QWORD *)result + 2) = 0;
  }
  return result;
}

void WebCore::CanvasRenderingContext2DBase::drawImage(WebCore::CanvasRenderingContext2DBase *this, WebCore::CSSStyleImageValue *a2, const WebCore::FloatRect *a3, const WebCore::FloatRect *a4, float *a5)
{
  uint64_t v6;
  uint64_t v7;
  WebCore::CachedImage *v8;
  uint64_t v10;
  float v14;
  float v15;
  double v16;
  float v17;
  double v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;

  v6 = *((_QWORD *)a3 + 5);
  if (*(_BYTE *)(v6 + 64)
    && (v7 = *(_QWORD *)(v6 + 56)) != 0
    && (v8 = *(WebCore::CachedImage **)(v7 + 8)) != 0
    && (v10 = *((_QWORD *)a3 + 6)) != 0
    && *(_QWORD *)(v10 + 8))
  {
    v14 = -33554000.0;
    v16 = WebCore::CachedImage::imageSizeForRenderer((uint64_t)v8, 0, 0) * 64.0;
    if (v16 >= 2147483650.0)
    {
      v17 = 33554000.0;
    }
    else
    {
      v17 = -33554000.0;
      if (v16 > -2147483650.0)
        v17 = (float)(int)v16 * 0.015625;
    }
    v18 = v15 * 64.0;
    if (v18 >= 2147483650.0)
    {
      v14 = 33554000.0;
    }
    else if (v18 > -2147483650.0)
    {
      v14 = (float)(int)v18 * 0.015625;
    }
    v21 = 0;
    v22 = v17;
    v23 = v14;
    v19 = *((_DWORD *)a2 + 33);
    if (v19)
    {
      v20 = *((_QWORD *)a2 + 15) + 560 * v19 - 560;
      WebCore::CanvasRenderingContext2DBase::drawImage((unsigned int *)this, (uint64_t **)a2, *(_QWORD *)(*((_QWORD *)a3 + 6) + 8), v8, 0, (uint64_t)&v21, (float *)a4, a5, (unsigned __int8 *)(v20 + 104), (unsigned __int8 *)(v20 + 105), 0);
      if (!*((_BYTE *)this + 16))
        *(_BYTE *)(*((_QWORD *)a2 + 4) + 72) = 0;
    }
    else
    {
      __break(0xC471u);
    }
  }
  else
  {
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
  }
}

uint64_t WebCore::CanvasRenderingContext2DBase::drawImage(WebCore::CanvasRenderingContext2DBase *this, WebCore::WebCodecsVideoFrame *a2, const WebCore::FloatRect *a3, float32x2_t *a4)
{
  uint64_t result;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  int v12;
  _BOOL8 v14;
  int8x8_t v15;
  int8x8_t v16;
  float32x2_t v17;
  float32x4_t v18;
  float32x2_t v19;
  float v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  float32x4_t v25;
  float32x4_t v26[2];
  uint64_t v27;
  _DWORD v28[2];
  _DWORD v29[2];
  _DWORD v30[2];
  float32x4_t v31;
  float32x2_t v32;
  float32x2_t v33;

  if (*((_BYTE *)a3 + 152))
  {
    result = WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)this = 8;
    *((_BYTE *)this + 16) = 1;
  }
  else
  {
    result = (*(uint64_t (**)(WebCore::WebCodecsVideoFrame *))(*(_QWORD *)a2 + 240))(a2);
    if (result && (v9 = (unsigned int *)*((_QWORD *)a3 + 3)) != 0)
    {
      v10 = v9 + 2;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
      if (*((_BYTE *)a3 + 36))
      {
        v12 = *((_DWORD *)a3 + 8);
        v14 = v12 == 6 || v12 == 8;
      }
      else
      {
        v14 = 0;
      }
      (*(void (**)(uint64_t, unsigned int *, float32x2_t *, _BOOL8))(*(_QWORD *)result + 440))(result, v9, a4, v14);
      v15 = (int8x8_t)a4[1];
      v16 = (int8x8_t)vadd_f32(*a4, (float32x2_t)v15);
      v17 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*a4, (float32x2_t)v16), v16, (int8x8_t)*a4);
      *(float32x2_t *)v18.f32 = v17;
      *(int8x8_t *)&v18.u32[2] = vbsl_s8((int8x8_t)vcltz_f32((float32x2_t)v15), (int8x8_t)vneg_f32((float32x2_t)v15), v15);
      v25 = v18;
      v19 = vadd_f32(*(float32x2_t *)&v18.u32[2], v17);
      *(float32x2_t *)v31.f32 = v17;
      v31.i64[1] = __PAIR64__(v17.u32[1], v19.u32[0]);
      v17.i32[1] = v19.i32[1];
      v32 = v19;
      v33 = v17;
      v20 = (float)(*(unsigned int (**)(_QWORD))(**((_QWORD **)a2 + 4) + 56))(*((_QWORD *)a2 + 4));
      result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 4) + 64))(*((_QWORD *)a2 + 4));
      v27 = 0;
      *(float *)v28 = v20;
      v28[1] = 0;
      *(float *)v29 = v20;
      *(float *)&v29[1] = (float)result;
      v30[0] = 0;
      *(float *)&v30[1] = (float)result;
      v21 = *((_DWORD *)a2 + 33);
      if (v21)
      {
        WebCore::AffineTransform::mapQuad((float64x2_t *)(*((_QWORD *)a2 + 15) + 560 * v21 - 448), &v31, v26);
        v22 = WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)v26, (const WebCore::FloatPoint *)&v27)
           && WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)v26, (const WebCore::FloatPoint *)v28)
           && WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)v26, (const WebCore::FloatPoint *)v29)
           && WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)v26, (const WebCore::FloatPoint *)v30);
        result = WebCore::CanvasRenderingContext2DBase::didDraw((uint64_t)a2, v22, &v25, 0xFu);
        *(_QWORD *)this = 0;
        *((_QWORD *)this + 1) = 0;
        *((_QWORD *)this + 2) = 0;
        do
        {
          v23 = __ldaxr(v10);
          v24 = v23 - 1;
        }
        while (__stlxr(v24, v10));
        if (!v24)
        {
          atomic_store(1u, v9 + 2);
          return (*(uint64_t (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
        }
      }
      else
      {
        __break(0xC471u);
      }
    }
    else
    {
      *(_QWORD *)this = 0;
      *((_QWORD *)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
    }
  }
  return result;
}

_QWORD *WebCore::CanvasRenderingContext2DBase::fullCanvasCompositedDrawImage<WebCore::Image>(_QWORD **a1, uint64_t a2, const WebCore::FloatRect *a3, uint64_t a4, int a5)
{
  unint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *result;
  _QWORD *v15;
  float v17;
  unsigned int v18;
  unint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  _QWORD v43[3];
  float v44[2];
  uint64_t v45;
  _QWORD v46[2];
  unint64_t v47;
  uint64_t *v48;
  float v49;
  float v50;

  v47 = 0;
  WebCore::CanvasRenderingContext2DBase::calculateCompositingBufferRect<WebCore::FloatRect>((uint64_t)a1, a3, &v47);
  v11 = v10;
  v46[0] = v12;
  v46[1] = v10;
  v13 = HIDWORD(v10);
  result = (_QWORD *)((uint64_t (*)(_QWORD **))(*a1)[30])(a1);
  v15 = result;
  if (v11 < 1 || (int)v13 <= 0)
  {
    if (result)
    {
      (*(void (**)(_QWORD *, uint64_t))(*result + 96))(result, 1);
      ((void (*)(uint64_t **__return_ptr, _QWORD **))(*a1)[31])(&v48, a1);
      (*(void (**)(_QWORD *, uint64_t **))(*v15 + 664))(v15, &v48);
      v17 = (float)(*(unsigned int (**)(_QWORD *))(*a1[4] + 56))(a1[4]);
      v18 = (*(uint64_t (**)(_QWORD *))(*a1[4] + 64))(a1[4]);
      v48 = 0;
      v49 = v17;
      v50 = (float)v18;
      (*(void (**)(_QWORD *, uint64_t **))(*v15 + 280))(v15, &v48);
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*v15 + 104))(v15, 1);
    }
  }
  else if (result)
  {
    v44[0] = (float)v11;
    v44[1] = (float)(int)v13;
    v19 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v19 != -1)
    {
      v48 = &v45;
      v43[0] = &v48;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, v43, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD *, float *, uint64_t *, _QWORD, _QWORD, float))(*v15 + 328))(&v45, v15, v44, &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 0, 0, 1.0);
    if (v45)
    {
      v43[1] = *((_QWORD *)a3 + 1);
      v43[0] = 0;
      (*(void (**)(uint64_t **__return_ptr, _QWORD *, uint64_t))(*v15 + 672))(&v48, v15, 1);
      v21 = floorf(WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)&v48, (const WebCore::FloatRect *)v43));
      v22 = 2147500000.0;
      if (v21 < 2147500000.0)
      {
        v22 = -2147500000.0;
        if (v21 > -2147500000.0)
          v22 = (float)(int)v21;
      }
      v23 = floorf(v20);
      v24 = 2147500000.0;
      if (v23 < 2147500000.0)
      {
        v24 = -2147500000.0;
        if (v23 > -2147500000.0)
          v24 = (float)(int)v23;
      }
      v25 = v22 > -2147500000.0 ? (int)v22 : 0x80000000;
      v26 = v22 < 2147500000.0 ? v25 : 0x7FFFFFFF;
      v27 = v24 > -2147500000.0 && v24 < 2147500000.0;
      v28 = v27 ? (float)-(int)v24 : -2147500000.0;
      v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
      (*(void (**)(uint64_t, float, float))(*(_QWORD *)v29 + 648))(v29, (float)-v26, v28);
      v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
      (*(void (**)(uint64_t, float, float))(*(_QWORD *)v30 + 648))(v30, (float)(int)v47, (float)SHIDWORD(v47));
      v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
      (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v31 + 656))(v31, &v48);
      v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
      (*(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v32 + 360))(v32, a2, v43, a4, 4641);
      result = (_QWORD *)WebCore::CanvasRenderingContext2DBase::compositeBuffer(a1, v45, (int *)v46, a5);
      v34 = v45;
      v45 = 0;
      if (v34)
      {
        v35 = *(_QWORD *)(v34 + 8);
        if (__ldaxr((unsigned __int8 *)v35))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v35))
        {
          goto LABEL_35;
        }
        result = (_QWORD *)MEMORY[0x19AEA534C](v35);
LABEL_35:
        v37 = *(_QWORD *)(v35 + 8);
        v38 = v37 - 1;
        *(_QWORD *)(v35 + 8) = v37 - 1;
        if (v37 == 1)
        {
          v42 = *(_QWORD *)(v35 + 16);
          v39 = *(_QWORD *)(v35 + 24);
          *(_QWORD *)(v35 + 24) = 0;
          v40 = v42 != 0;
        }
        else
        {
          v39 = 0;
          v40 = 1;
        }
        v41 = __ldxr((unsigned __int8 *)v35);
        if (v41 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v35))
          {
LABEL_42:
            if (!v38)
            {
              if (v39)
                result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
              if (!v40)
                return (_QWORD *)WTF::fastFree((WTF *)v35, v33);
            }
            return result;
          }
        }
        else
        {
          __clrex();
        }
        result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v35);
        goto LABEL_42;
      }
    }
  }
  return result;
}

uint64_t WebCore::CanvasRenderingContext2DBase::drawImage(uint64_t this, uint64_t **a2, const WebCore::FloatRect *a3, float32x2_t *a4, float32x2_t *a5)
{
  _QWORD *v5;
  BOOL v6;
  int8x8_t v7;
  int8x8_t v8;
  int8x8_t v9;
  int8x8_t v10;
  int8x8_t v11;
  int8x8_t v12;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  float v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  uint64_t v29;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  float v37;
  float v38;
  float v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  unsigned int v52;
  unsigned int v53;
  unint64_t v54;
  const void *v55;
  CFTypeRef v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  void *v64;
  CFTypeRef *v65;
  unsigned __int8 *v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int v77;
  WTF *v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  WTF *v82;
  __int128 v83;
  float32x2_t v84;
  const void *v85;
  float32x4_t v86[2];
  CFTypeRef *v87;
  _DWORD v88[2];
  _DWORD v89[2];
  _DWORD v90[2];
  CFTypeRef cf[2];
  float v92;
  float v93;
  int v94;
  float v95;
  char v96;

  v5 = (_QWORD *)this;
  if (*((_DWORD *)a3 + 2))
    v6 = *((_DWORD *)a3 + 3) == 0;
  else
    v6 = 1;
  if (v6)
  {
    *(_BYTE *)this = 8;
    *(_QWORD *)(this + 8) = 0;
    *(_BYTE *)(this + 16) = 1;
    return this;
  }
  v7 = (int8x8_t)a4[1];
  if (*(float *)v7.i32 == 0.0)
    goto LABEL_28;
  if (*(float *)&v7.i32[1] == 0.0)
    goto LABEL_28;
  v8 = (int8x8_t)vadd_f32((float32x2_t)v7, *a4);
  v9 = vbsl_s8((int8x8_t)vcltz_f32((float32x2_t)v7), (int8x8_t)vneg_f32((float32x2_t)v7), v7);
  v84 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*a4, (float32x2_t)v8), v8, (int8x8_t)*a4);
  v85 = (const void *)v9;
  v10 = (int8x8_t)a5[1];
  v11 = (int8x8_t)vadd_f32(*a5, (float32x2_t)v10);
  v12 = vbsl_s8((int8x8_t)vcltz_f32((float32x2_t)v10), (int8x8_t)vneg_f32((float32x2_t)v10), v10);
  *(int8x8_t *)&v83 = vbsl_s8((int8x8_t)vcgt_f32(*a5, (float32x2_t)v11), v11, (int8x8_t)*a5);
  *((int8x8_t *)&v83 + 1) = v12;
  if (*(float *)v9.i32 <= 0.0
    || *(float *)&v9.i32[1] <= 0.0
    || *(float *)v12.i32 <= 0.0
    || *(float *)&v12.i32[1] <= 0.0)
  {
LABEL_28:
    *(_QWORD *)this = 0;
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
    return this;
  }
  WebCore::CanvasFilterContextSwitcher::create(a2, (WebCore::CanvasRenderingContext2DBase *)&v83, (uint64_t **)&v82);
  this = ((uint64_t (*)(uint64_t **))(*a2)[30])(a2);
  if (!this)
    goto LABEL_30;
  v15 = *((_DWORD *)a2 + 33);
  if (!v15)
  {
    __break(0xC471u);
    goto LABEL_127;
  }
  if (!LOBYTE(a2[15][70 * v15 - 50]))
  {
LABEL_30:
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    goto LABEL_117;
  }
  v16 = this;
  (*(void (**)(const WebCore::FloatRect *))(*(_QWORD *)a3 + 16))(a3);
  v17 = a2[4];
  if (*((_BYTE *)v17 + 72) && !*((_BYTE *)a3 + 72))
    *((_BYTE *)v17 + 72) = 0;
  v18 = (*(uint64_t (**)(const WebCore::FloatRect *))(*(_QWORD *)a3 + 88))(a3);
  if (!v18)
  {
    if (!*((_BYTE *)a3 + 73))
      (*(void (**)(const WebCore::FloatRect *))(*(_QWORD *)a3 + 160))(a3);
    v74 = *((_QWORD *)a3 + 2);
    if (!v74)
    {
LABEL_114:
      v81 = v74;
      if (v74)
        goto LABEL_21;
      goto LABEL_115;
    }
    v75 = *(_QWORD *)(v74 + 8);
    if (__ldaxr((unsigned __int8 *)v75))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v75))
    {
      goto LABEL_109;
    }
    MEMORY[0x19AEA534C](v75);
LABEL_109:
    ++*(_QWORD *)(v75 + 8);
    v77 = __ldxr((unsigned __int8 *)v75);
    if (v77 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v75))
        goto LABEL_114;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v75);
    goto LABEL_114;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v18 + 104))(&v81, v18, 0);
  if (v81)
  {
LABEL_21:
    cf[0] = (CFTypeRef)v83;
    *(float *)&cf[1] = *(float *)&v83 + *((float *)&v83 + 2);
    HIDWORD(cf[1]) = DWORD1(v83);
    v92 = *(float *)&v83 + *((float *)&v83 + 2);
    v93 = *((float *)&v83 + 1) + *((float *)&v83 + 3);
    v94 = v83;
    v95 = *((float *)&v83 + 1) + *((float *)&v83 + 3);
    v19 = (float)(*(unsigned int (**)(uint64_t *))(*a2[4] + 56))(a2[4]);
    v20 = (*(uint64_t (**)(uint64_t *))(*a2[4] + 64))(a2[4]);
    v87 = 0;
    *(float *)v88 = v19;
    v88[1] = 0;
    *(float *)v89 = v19;
    *(float *)&v89[1] = (float)v20;
    v90[0] = 0;
    *(float *)&v90[1] = (float)v20;
    v21 = *((unsigned int *)a2 + 33);
    if (!(_DWORD)v21)
    {
      __break(0xC471u);
      JUMPOUT(0x195CE9EFCLL);
    }
    v22 = v21 - 1;
    v23 = a2[15];
    WebCore::AffineTransform::mapQuad((float64x2_t *)&v23[70 * v21 - 56], (float32x4_t *)cf, v86);
    v24 = WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)v86, (const WebCore::FloatPoint *)&v87);
    if (v24)
    {
      v24 = WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)v86, (const WebCore::FloatPoint *)v88);
      if (v24)
      {
        v24 = WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)v86, (const WebCore::FloatPoint *)v89);
        if (v24)
        {
          v24 = WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)v86, (const WebCore::FloatPoint *)v90);
          if (v24)
          {
            v25 = v81;
            v26 = (uint64_t)&v23[70 * v22];
LABEL_27:
            (*(void (**)(uint64_t, uint64_t, __int128 *, float32x2_t *, unint64_t))(*(_QWORD *)v16
                                                                                                  + 384))(v16, v25, &v83, &v84, *(_BYTE *)(v26 + 105) & 0x1F | ((unint64_t)(*(_BYTE *)(v26 + 104) & 0xF) << 8) | 0x1020);
LABEL_34:
            v28 = 1;
LABEL_35:
            if ((*(uint64_t (**)(const WebCore::FloatRect *))(*(_QWORD *)a3 + 88))(a3)
              && (v29 = (*(uint64_t (**)(const WebCore::FloatRect *))(*(_QWORD *)a3 + 88))(a3),
                  (*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29)))
            {
              if (*((int *)a3 + 15) <= 0 || *((_DWORD *)a3 + 14) <= 0)
                v31 = 7;
              else
                v31 = 15;
            }
            else
            {
              v31 = 15;
            }
            if (v82)
            {
              v32 = *(_DWORD *)(*(_QWORD *)v82 + 132);
              if (!v32)
              {
                __break(0xC471u);
                JUMPOUT(0x195CE9F04);
              }
              v33 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v82 + 120) + 560 * v32 - 8);
              v34 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v33 + 8) + 272))(*(_QWORD *)(v33 + 8), v33 + 24);
              v37 = *(float *)(v33 + 28) - (float)(int)v34;
              v38 = *(float *)(v33 + 32) + (float)((float)v36 + (float)SHIDWORD(v34));
              v39 = *(float *)(v33 + 36) + (float)((float)(int)v34 + (float)v35);
              *(float *)cf = *(float *)(v33 + 24) - (float)v36;
              *((float *)cf + 1) = v37;
              *(float *)&cf[1] = v38;
              *((float *)&cf[1] + 1) = v39;
            }
            else
            {
              *(_OWORD *)cf = v83;
            }
            WebCore::CanvasRenderingContext2DBase::didDraw((uint64_t)a2, v28, (float32x4_t *)cf, v31);
            *v5 = 0;
            v5[1] = 0;
            v5[2] = 0;
            v41 = v81;
            v81 = 0;
            if (!v41)
              goto LABEL_116;
            v42 = *(_QWORD *)(v41 + 8);
            if (__ldaxr((unsigned __int8 *)v42))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v42))
            {
              goto LABEL_53;
            }
            MEMORY[0x19AEA534C](v42);
LABEL_53:
            v44 = *(_QWORD *)(v42 + 8);
            v45 = v44 - 1;
            *(_QWORD *)(v42 + 8) = v44 - 1;
            if (v44 == 1)
            {
              v73 = *(_QWORD *)(v42 + 16);
              v46 = *(_QWORD *)(v42 + 24);
              *(_QWORD *)(v42 + 24) = 0;
              v47 = v73 != 0;
            }
            else
            {
              v46 = 0;
              v47 = 1;
            }
            v48 = __ldxr((unsigned __int8 *)v42);
            if (v48 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v42))
              {
LABEL_60:
                if (!v45)
                {
                  if (v46)
                    (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
                  if (!v47)
                    WTF::fastFree((WTF *)v42, v40);
                }
                goto LABEL_116;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v42);
            goto LABEL_60;
          }
        }
      }
    }
    v27 = LOBYTE(v23[70 * v22 + 13]);
    if (v27 > 9)
      goto LABEL_71;
    if (((1 << v27) & 0x298) != 0)
    {
      WebCore::CanvasRenderingContext2DBase::fullCanvasCompositedDrawImage<WebCore::ImageBuffer>(a2, v81, (const WebCore::FloatRect *)&v83, (uint64_t)&v84, v27);
      goto LABEL_34;
    }
    if (v27 != 1)
    {
LABEL_71:
      (*(void (**)(uint64_t, uint64_t, __int128 *, float32x2_t *, unint64_t))(*(_QWORD *)v16 + 384))(v16, v81, &v83, &v84, BYTE1(v23[70 * v22 + 13]) & 0x1F | ((unint64_t)(v27 & 0xF) << 8) | 0x1020);
      v28 = 0;
      goto LABEL_35;
    }
    if (a2[4] != (uint64_t *)a3)
    {
      v49 = ((uint64_t (*)(uint64_t **))(*a2)[30])(a2);
      if (v49)
      {
        v50 = v49;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v49 + 96))(v49, 1);
        ((void (*)(CFTypeRef *__return_ptr, uint64_t **))(*a2)[31])(cf, a2);
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v50 + 664))(v50, cf);
        v51 = (float)(*(unsigned int (**)(uint64_t *))(*a2[4] + 56))(a2[4]);
        v52 = (*(uint64_t (**)(uint64_t *))(*a2[4] + 64))(a2[4]);
        cf[0] = 0;
        *(float *)&cf[1] = v51;
        *((float *)&cf[1] + 1) = (float)v52;
        (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v50 + 280))(v50, cf);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v50 + 104))(v50, 1);
      }
      v53 = *((_DWORD *)a2 + 33);
      if (!v53)
      {
        __break(0xC471u);
        JUMPOUT(0x195CE9F0CLL);
      }
      v25 = v81;
      v26 = (uint64_t)&a2[15][70 * v53 - 70];
      goto LABEL_27;
    }
    v86[0].i64[0] = (uint64_t)v85;
    if (*((_BYTE *)a2 + 802) && *((_BYTE *)a2 + 802) == 1)
    {
      v55 = (const void *)*WebCore::DestinationColorSpace::DisplayP3((WebCore::DestinationColorSpace *)v24);
    }
    else
    {
      v54 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
      if (v54 != -1)
      {
        cf[0] = &v96;
        v87 = cf;
        std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v87, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
      }
      v55 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
    }
    cf[0] = v55;
    if (v55)
      CFRetain(v55);
    (*(void (**)(CFTypeRef **__return_ptr, uint64_t, float32x4_t *, CFTypeRef *, _QWORD, _QWORD, float))(*(_QWORD *)v16 + 328))(&v87, v16, v86, cf, 0, 0, 1.0);
    v56 = cf[0];
    cf[0] = 0;
    if (v56)
      CFRelease(v56);
    if (!v87)
      goto LABEL_34;
    v57 = (*((uint64_t (**)(CFTypeRef *))*v87 + 2))(v87);
    cf[0] = (CFTypeRef)vneg_f32(v84);
    WebCore::GraphicsContext::drawImageBuffer(v57, v81, (uint64_t *)cf);
    v58 = ((uint64_t (*)(uint64_t **))(*a2)[30])(a2);
    if (v58)
    {
      v59 = v58;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v58 + 96))(v58, 1);
      ((void (*)(CFTypeRef *__return_ptr, uint64_t **))(*a2)[31])(cf, a2);
      (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v59 + 664))(v59, cf);
      v60 = (float)(*(unsigned int (**)(uint64_t *))(*a2[4] + 56))(a2[4]);
      v61 = (*(uint64_t (**)(uint64_t *))(*a2[4] + 64))(a2[4]);
      cf[0] = 0;
      *(float *)&cf[1] = v60;
      *((float *)&cf[1] + 1) = (float)v61;
      (*(void (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v59 + 280))(v59, cf);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v59 + 104))(v59, 1);
    }
    cf[0] = 0;
    cf[1] = v85;
    v62 = *((_DWORD *)a2 + 33);
    if (v62)
    {
      v63 = (uint64_t)&a2[15][70 * v62 - 70];
      (*(void (**)(uint64_t, CFTypeRef *, __int128 *, CFTypeRef *, unint64_t))(*(_QWORD *)v16 + 384))(v16, v87, &v83, cf, *(_BYTE *)(v63 + 105) & 0x1F | ((unint64_t)(*(_BYTE *)(v63 + 104) & 0xF) << 8) | 0x1020);
      v65 = v87;
      v87 = 0;
      if (!v65)
        goto LABEL_34;
      v66 = (unsigned __int8 *)v65[1];
      if (__ldaxr(v66))
      {
        __clrex();
      }
      else if (!__stxr(1u, v66))
      {
        goto LABEL_89;
      }
      MEMORY[0x19AEA534C](v66);
LABEL_89:
      v68 = *((_QWORD *)v66 + 1);
      v69 = v68 - 1;
      *((_QWORD *)v66 + 1) = v68 - 1;
      if (v68 == 1)
      {
        v80 = *((_QWORD *)v66 + 2);
        v70 = *((_QWORD *)v66 + 3);
        *((_QWORD *)v66 + 3) = 0;
        v71 = v80 != 0;
      }
      else
      {
        v70 = 0;
        v71 = 1;
      }
      v72 = __ldxr(v66);
      if (v72 == 1)
      {
        if (!__stlxr(0, v66))
        {
LABEL_96:
          if (!v69)
          {
            if (v70)
              (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
            if (!v71)
              WTF::fastFree((WTF *)v66, v64);
          }
          goto LABEL_34;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v66);
      goto LABEL_96;
    }
    __break(0xC471u);
LABEL_127:
    JUMPOUT(0x195CE9EF4);
  }
LABEL_115:
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
LABEL_116:
  this = (*(uint64_t (**)(const WebCore::FloatRect *))(*(_QWORD *)a3 + 24))(a3);
LABEL_117:
  v78 = v82;
  if (v82)
  {
    WebCore::CanvasRenderingContext2DBase::restore(*(_QWORD *)v82);
    return WTF::fastFree(v78, v79);
  }
  return this;
}

_QWORD *WebCore::CanvasRenderingContext2DBase::fullCanvasCompositedDrawImage<WebCore::ImageBuffer>(_QWORD **a1, uint64_t a2, const WebCore::FloatRect *a3, uint64_t a4, int a5)
{
  unint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *result;
  _QWORD *v15;
  float v17;
  unsigned int v18;
  unint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  _QWORD v43[3];
  float v44[2];
  uint64_t v45;
  _QWORD v46[2];
  unint64_t v47;
  uint64_t *v48;
  float v49;
  float v50;

  v47 = 0;
  WebCore::CanvasRenderingContext2DBase::calculateCompositingBufferRect<WebCore::FloatRect>((uint64_t)a1, a3, &v47);
  v11 = v10;
  v46[0] = v12;
  v46[1] = v10;
  v13 = HIDWORD(v10);
  result = (_QWORD *)((uint64_t (*)(_QWORD **))(*a1)[30])(a1);
  v15 = result;
  if (v11 < 1 || (int)v13 <= 0)
  {
    if (result)
    {
      (*(void (**)(_QWORD *, uint64_t))(*result + 96))(result, 1);
      ((void (*)(uint64_t **__return_ptr, _QWORD **))(*a1)[31])(&v48, a1);
      (*(void (**)(_QWORD *, uint64_t **))(*v15 + 664))(v15, &v48);
      v17 = (float)(*(unsigned int (**)(_QWORD *))(*a1[4] + 56))(a1[4]);
      v18 = (*(uint64_t (**)(_QWORD *))(*a1[4] + 64))(a1[4]);
      v48 = 0;
      v49 = v17;
      v50 = (float)v18;
      (*(void (**)(_QWORD *, uint64_t **))(*v15 + 280))(v15, &v48);
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*v15 + 104))(v15, 1);
    }
  }
  else if (result)
  {
    v44[0] = (float)v11;
    v44[1] = (float)(int)v13;
    v19 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v19 != -1)
    {
      v48 = &v45;
      v43[0] = &v48;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, v43, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD *, float *, uint64_t *, _QWORD, _QWORD, float))(*v15 + 328))(&v45, v15, v44, &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 0, 0, 1.0);
    if (v45)
    {
      v43[1] = *((_QWORD *)a3 + 1);
      v43[0] = 0;
      (*(void (**)(uint64_t **__return_ptr, _QWORD *, uint64_t))(*v15 + 672))(&v48, v15, 1);
      v21 = floorf(WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)&v48, (const WebCore::FloatRect *)v43));
      v22 = 2147500000.0;
      if (v21 < 2147500000.0)
      {
        v22 = -2147500000.0;
        if (v21 > -2147500000.0)
          v22 = (float)(int)v21;
      }
      v23 = floorf(v20);
      v24 = 2147500000.0;
      if (v23 < 2147500000.0)
      {
        v24 = -2147500000.0;
        if (v23 > -2147500000.0)
          v24 = (float)(int)v23;
      }
      v25 = v22 > -2147500000.0 ? (int)v22 : 0x80000000;
      v26 = v22 < 2147500000.0 ? v25 : 0x7FFFFFFF;
      v27 = v24 > -2147500000.0 && v24 < 2147500000.0;
      v28 = v27 ? (float)-(int)v24 : -2147500000.0;
      v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
      (*(void (**)(uint64_t, float, float))(*(_QWORD *)v29 + 648))(v29, (float)-v26, v28);
      v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
      (*(void (**)(uint64_t, float, float))(*(_QWORD *)v30 + 648))(v30, (float)(int)v47, (float)SHIDWORD(v47));
      v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
      (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v31 + 656))(v31, &v48);
      v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45);
      (*(void (**)(uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v32 + 384))(v32, a2, v43, a4, 4641);
      result = (_QWORD *)WebCore::CanvasRenderingContext2DBase::compositeBuffer(a1, v45, (int *)v46, a5);
      v34 = v45;
      v45 = 0;
      if (v34)
      {
        v35 = *(_QWORD *)(v34 + 8);
        if (__ldaxr((unsigned __int8 *)v35))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v35))
        {
          goto LABEL_35;
        }
        result = (_QWORD *)MEMORY[0x19AEA534C](v35);
LABEL_35:
        v37 = *(_QWORD *)(v35 + 8);
        v38 = v37 - 1;
        *(_QWORD *)(v35 + 8) = v37 - 1;
        if (v37 == 1)
        {
          v42 = *(_QWORD *)(v35 + 16);
          v39 = *(_QWORD *)(v35 + 24);
          *(_QWORD *)(v35 + 24) = 0;
          v40 = v42 != 0;
        }
        else
        {
          v39 = 0;
          v40 = 1;
        }
        v41 = __ldxr((unsigned __int8 *)v35);
        if (v41 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v35))
          {
LABEL_42:
            if (!v38)
            {
              if (v39)
                result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
              if (!v40)
                return (_QWORD *)WTF::fastFree((WTF *)v35, v33);
            }
            return result;
          }
        }
        else
        {
          __clrex();
        }
        result = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v35);
        goto LABEL_42;
      }
    }
  }
  return result;
}

CFTypeRef WebCore::CanvasRenderingContext2DBase::colorSpace@<X0>(WebCore::CanvasRenderingContext2DBase *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v3;
  CFTypeRef result;
  uint64_t *v5;
  char v6;
  char **v7;
  char *v8;

  if (*((_BYTE *)this + 802))
  {
    if (*((_BYTE *)this + 802) == 1)
      v5 = WebCore::DestinationColorSpace::DisplayP3(this);
    else
      v5 = WebCore::DestinationColorSpace::SRGB(this);
    result = (CFTypeRef)*v5;
  }
  else
  {
    v3 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v3 != -1)
    {
      v8 = &v6;
      v7 = &v8;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v7, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    result = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  }
  *a2 = result;
  if (result)
    return CFRetain(result);
  return result;
}

_QWORD *WebCore::CanvasRenderingContext2DBase::drawImage(_QWORD *this, uint64_t **a2, const WebCore::FloatRect *a3, float32x2_t *a4, float32x2_t *a5)
{
  _QWORD *v5;
  int8x8_t v6;
  int8x8_t v7;
  int8x8_t v8;
  int8x8_t v9;
  int8x8_t v10;
  int8x8_t v11;
  int8x8_t v12;
  unsigned int v15;
  WebCore::GraphicsContext *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int16 v22;
  WebCore::ThreadableBlobRegistry *v23;
  float v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  char v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  float32_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  int v45;
  float v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  unsigned __int8 *v50;
  int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  float32_t v60;
  WTF *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  int v71;
  char canRequest;
  uint64_t v73;
  float32x2_t v74;
  int8x8_t v75;
  WTF *v76;
  float32x4_t v77;
  float32x2_t v78[2];
  float32x4_t v79[2];
  uint64_t v80;
  _DWORD v81[2];
  _DWORD v82[2];
  _DWORD v83[2];
  float32x4_t v84;
  float v85;
  float v86;
  __int32 v87;
  float v88;

  v5 = this;
  if (*((_DWORD *)a3 + 226) <= 1u)
    goto LABEL_2;
  v6 = (int8x8_t)a4[1];
  if (*(float *)v6.i32 == 0.0)
    goto LABEL_2;
  if (*(float *)&v6.i32[1] == 0.0)
    goto LABEL_2;
  v7 = vbsl_s8((int8x8_t)vcltz_f32((float32x2_t)v6), (int8x8_t)vneg_f32((float32x2_t)v6), v6);
  v8 = (int8x8_t)vadd_f32((float32x2_t)v6, *a4);
  v9 = vbsl_s8((int8x8_t)vcgt_f32(*a4, (float32x2_t)v8), v8, (int8x8_t)*a4);
  v78[0] = (float32x2_t)v9;
  v78[1] = (float32x2_t)v7;
  v10 = (int8x8_t)a5[1];
  v11 = (int8x8_t)vadd_f32(*a5, (float32x2_t)v10);
  v12 = vbsl_s8((int8x8_t)vcltz_f32((float32x2_t)v10), (int8x8_t)vneg_f32((float32x2_t)v10), v10);
  *(int8x8_t *)v77.f32 = vbsl_s8((int8x8_t)vcgt_f32(*a5, (float32x2_t)v11), v11, (int8x8_t)*a5);
  *(int8x8_t *)&v77.u32[2] = v12;
  if (*(float *)v7.i32 <= 0.0
    || *(float *)&v7.i32[1] <= 0.0
    || *(float *)v12.i32 <= 0.0
    || *(float *)&v12.i32[1] <= 0.0)
  {
LABEL_2:
    *this = 0;
    this[1] = 0;
    this[2] = 0;
    return this;
  }
  v74 = (float32x2_t)v7;
  v75 = v9;
  WebCore::CanvasFilterContextSwitcher::create(a2, (WebCore::CanvasRenderingContext2DBase *)&v77, (uint64_t **)&v76);
  this = (_QWORD *)((uint64_t (*)(uint64_t **))(*a2)[30])(a2);
  if (!this)
    goto LABEL_72;
  v15 = *((_DWORD *)a2 + 33);
  if (!v15)
    goto LABEL_102;
  if (!LOBYTE(a2[15][70 * v15 - 50]))
  {
LABEL_72:
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    goto LABEL_73;
  }
  v16 = (WebCore::GraphicsContext *)this;
  v17 = a2[4];
  if (*((_BYTE *)v17 + 72))
  {
    v18 = (*(uint64_t (**)(uint64_t *))(*v17 + 80))(v17);
    v19 = *((_QWORD *)a3 + 142);
    if (!v19)
      goto LABEL_19;
    v20 = v18;
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v19 + 72) + 808))(*(_QWORD *)(v19 + 72)) & 1) != 0)
      goto LABEL_19;
    v21 = *((_QWORD *)a3 + 142);
    if (!v21)
      goto LABEL_19;
    v22 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v21 + 72) + 816))(*(_QWORD *)(v21 + 72), v20);
    if (v22 >= 0x100u)
    {
      v32 = v22;
      v17 = a2[4];
      if (v32)
LABEL_96:
        *((_BYTE *)v17 + 72) = 0;
    }
    else
    {
      v23 = (WebCore::ThreadableBlobRegistry *)(v21 + 104);
      if ((WTF::URL::protocolIs() & 1) != 0)
      {
LABEL_19:
        v17 = a2[4];
        goto LABEL_20;
      }
      {
        WebCore::EmptyOriginAccessPatterns::singleton(void)::instance = (uint64_t)&off_1E3400560;
      }
      canRequest = WebCore::SecurityOrigin::canRequest(v20, v23, (uint64_t (***)(_QWORD, uint64_t))&WebCore::EmptyOriginAccessPatterns::singleton(void)::instance);
      v17 = a2[4];
      if ((canRequest & 1) == 0)
        goto LABEL_96;
    }
  }
LABEL_20:
  v84.i64[0] = v77.i64[0];
  v84.f32[2] = v77.f32[0] + v77.f32[2];
  v84.i32[3] = v77.i32[1];
  v85 = v77.f32[0] + v77.f32[2];
  v86 = v77.f32[1] + v77.f32[3];
  v87 = v77.i32[0];
  v88 = v77.f32[1] + v77.f32[3];
  v24 = (float)(*(unsigned int (**)(uint64_t *))(*v17 + 56))(v17);
  v25 = (*(uint64_t (**)(uint64_t *))(*a2[4] + 64))(a2[4]);
  v80 = 0;
  *(float *)v81 = v24;
  v81[1] = 0;
  *(float *)v82 = v24;
  *(float *)&v82[1] = (float)v25;
  v83[0] = 0;
  *(float *)&v83[1] = (float)v25;
  v26 = *((_DWORD *)a2 + 33);
  if (!v26)
  {
    __break(0xC471u);
    JUMPOUT(0x195CEAB0CLL);
  }
  WebCore::AffineTransform::mapQuad((float64x2_t *)&a2[15][70 * v26 - 56], &v84, v79);
  v27 = WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)v79, (const WebCore::FloatPoint *)&v80)
     && WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)v79, (const WebCore::FloatPoint *)v81)
     && WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)v79, (const WebCore::FloatPoint *)v82)
     && WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)v79, (const WebCore::FloatPoint *)v83);
  if (!(*(unsigned int (**)(WebCore::GraphicsContext *))(*(_QWORD *)v16 + 16))(v16)
    || (v28 = *((_QWORD *)a3 + 142)) == 0
    || !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v28 + 72) + 688))(*(_QWORD *)(v28 + 72))
    || (v29 = *((_QWORD *)a3 + 142)) == 0)
  {
LABEL_44:
    (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v16 + 96))(v16, 1);
    (*(void (**)(WebCore::GraphicsContext *, float32x4_t *))(*(_QWORD *)v16 + 456))(v16, &v77);
    (*(void (**)(WebCore::GraphicsContext *, float32_t, float32_t))(*(_QWORD *)v16 + 648))(v16, v77.f32[0], v77.f32[1]);
    *(float32x2_t *)v84.f32 = vdiv_f32(*(float32x2_t *)&v77.u32[2], v74);
    (*(void (**)(WebCore::GraphicsContext *, float32x4_t *))(*(_QWORD *)v16 + 632))(v16, &v84);
    (*(void (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)v16 + 648))(v16, -*(float *)v75.i32, -*(float *)&v75.i32[1]);
    v42 = *((_QWORD *)a3 + 142);
    if (!v42)
      goto LABEL_67;
    v43 = *(unsigned __int8 **)v42;
    if (__ldaxr(*(unsigned __int8 **)v42))
    {
      __clrex();
    }
    else if (!__stxr(1u, v43))
    {
      goto LABEL_49;
    }
    MEMORY[0x19AEA534C](v43);
LABEL_49:
    ++*((_QWORD *)v43 + 1);
    v45 = __ldxr(v43);
    if (v45 == 1)
    {
      if (!__stlxr(0, v43))
      {
LABEL_54:
        v46 = (*(float (**)(_QWORD))(**(_QWORD **)(v42 + 72) + 288))(*(_QWORD *)(v42 + 72));
        v48 = v47;
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v42);
        v49 = *((_QWORD *)a3 + 142);
        v84.i64[0] = 0;
        v84.i64[1] = __PAIR64__(v48, LODWORD(v46));
        if (v49)
        {
          v50 = *(unsigned __int8 **)v49;
          if (__ldaxr(*(unsigned __int8 **)v49))
          {
            __clrex();
          }
          else if (!__stxr(1u, v50))
          {
            goto LABEL_59;
          }
          MEMORY[0x19AEA534C](v50);
LABEL_59:
          ++*((_QWORD *)v50 + 1);
          v52 = __ldxr(v50);
          if (v52 == 1)
          {
            if (!__stlxr(0, v50))
              goto LABEL_64;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v50);
LABEL_64:
          if (!*(_BYTE *)(v49 + 225))
          {
            *(_BYTE *)(v49 + 225) = 1;
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v49 + 72) + 320))(*(_QWORD *)(v49 + 72), 1);
            WebCore::HTMLMediaElement::visibilityStateChanged(a3);
          }
          (*(void (**)(WebCore::GraphicsContext *, uint64_t, float32x4_t *))(*(_QWORD *)v16 + 432))(v16, v49, &v84);
          WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v49);
        }
LABEL_67:
        (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)v16 + 104))(v16, 1);
        if (v76)
        {
          v53 = *(_DWORD *)(*(_QWORD *)v76 + 132);
          if (!v53)
          {
            __break(0xC471u);
            JUMPOUT(0x195CEAB14);
          }
          v54 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v76 + 120) + 560 * v53 - 8);
          v55 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v54 + 8) + 272))(*(_QWORD *)(v54 + 8), v54 + 24);
          *(float *)&v58 = *(float *)(v54 + 28) - (float)(int)v55;
          *(float *)&v59 = *(float *)(v54 + 32) + (float)((float)v57 + (float)SHIDWORD(v55));
          v60 = *(float *)(v54 + 36) + (float)((float)(int)v55 + (float)v56);
          v84.f32[0] = *(float *)(v54 + 24) - (float)v57;
          *(uint64_t *)((char *)v84.i64 + 4) = __PAIR64__(v59, v58);
          v84.f32[3] = v60;
        }
        else
        {
          v84 = v77;
        }
        this = (_QWORD *)WebCore::CanvasRenderingContext2DBase::didDraw((uint64_t)a2, v27, &v84, 7u);
        goto LABEL_72;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v43);
    goto LABEL_54;
  }
  v30 = *(unsigned __int8 **)v29;
  if (__ldaxr(*(unsigned __int8 **)v29))
  {
    __clrex();
  }
  else if (!__stxr(1u, v30))
  {
    goto LABEL_35;
  }
  MEMORY[0x19AEA534C](v30);
LABEL_35:
  ++*((_QWORD *)v30 + 1);
  v33 = __ldxr(v30);
  if (v33 != 1)
  {
    __clrex();
    goto LABEL_39;
  }
  if (__stlxr(0, v30))
LABEL_39:
    WTF::Lock::unlockSlow((WTF::Lock *)v30);
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v29 + 72) + 672))(&v80);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v29);
  if (!v80)
    goto LABEL_44;
  WebCore::GraphicsContext::drawNativeImage(v16, v80, (uint64_t)&v77, v78, 4641);
  if (v76)
  {
    v34 = *(_DWORD *)(*(_QWORD *)v76 + 132);
    if (v34)
    {
      v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v76 + 120) + 560 * v34 - 8);
      v36 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v35 + 8) + 272))(*(_QWORD *)(v35 + 8), v35 + 24);
      *(float *)&v39 = *(float *)(v35 + 28) - (float)(int)v36;
      *(float *)&v40 = *(float *)(v35 + 32) + (float)((float)v38 + (float)SHIDWORD(v36));
      v41 = *(float *)(v35 + 36) + (float)((float)(int)v36 + (float)v37);
      v84.f32[0] = *(float *)(v35 + 24) - (float)v38;
      *(uint64_t *)((char *)v84.i64 + 4) = __PAIR64__(v40, v39);
      v84.f32[3] = v41;
      goto LABEL_76;
    }
LABEL_102:
    __break(0xC471u);
    JUMPOUT(0x195CEAB04);
  }
  v84 = v77;
LABEL_76:
  this = (_QWORD *)WebCore::CanvasRenderingContext2DBase::didDraw((uint64_t)a2, v27, &v84, 7u);
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
  v64 = v80;
  v80 = 0;
  if (v64)
  {
    v65 = *(_QWORD *)(v64 + 8);
    if (__ldaxr((unsigned __int8 *)v65))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v65))
    {
      goto LABEL_81;
    }
    this = (_QWORD *)MEMORY[0x19AEA534C](v65);
LABEL_81:
    v67 = *(_QWORD *)(v65 + 8);
    v68 = v67 - 1;
    *(_QWORD *)(v65 + 8) = v67 - 1;
    if (v67 == 1)
    {
      v73 = *(_QWORD *)(v65 + 16);
      v69 = *(_QWORD *)(v65 + 24);
      *(_QWORD *)(v65 + 24) = 0;
      v70 = v73 != 0;
    }
    else
    {
      v69 = 0;
      v70 = 1;
    }
    v71 = __ldxr((unsigned __int8 *)v65);
    if (v71 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v65))
      {
LABEL_88:
        if (!v68)
        {
          if (v69)
            this = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
          if (!v70)
            this = (_QWORD *)WTF::fastFree((WTF *)v65, v63);
        }
        goto LABEL_73;
      }
    }
    else
    {
      __clrex();
    }
    this = (_QWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v65);
    goto LABEL_88;
  }
LABEL_73:
  v61 = v76;
  if (v76)
  {
    WebCore::CanvasRenderingContext2DBase::restore(*(_QWORD *)v76);
    return (_QWORD *)WTF::fastFree(v61, v62);
  }
  return this;
}

uint64_t WebCore::CanvasRenderingContext2DBase::drawImage(uint64_t this, uint64_t **a2, const WebCore::FloatRect *a3, const WebCore::FloatRect *a4, float *a5)
{
  _QWORD *v5;
  uint64_t v6;
  float v7;
  BOOL v8;
  BOOL v9;
  float v10;
  BOOL v11;
  BOOL v12;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  unsigned int v19;
  float v20;
  unsigned int v21;
  float v22;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v31;
  uint64_t *v32;
  float v33;
  float v34;
  float v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  float v48;
  float v49;
  float v50;
  void *v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  int v58;
  WTF *v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  float v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  WTF *v67;
  _BYTE v68[20];
  float v69;
  int v70;
  float v71;
  float32x4_t v72[2];
  uint64_t v73;
  _DWORD v74[2];
  _DWORD v75[2];
  _DWORD v76[2];

  v5 = (_QWORD *)this;
  v6 = *((_QWORD *)a3 + 2);
  if (!v6
    || ((v7 = *(float *)(v6 + 16), v7 < 2147500000.0) ? (v8 = v7 <= -2147500000.0) : (v8 = 1),
        !v8 ? (v9 = (int)v7 == 0) : (v9 = 0),
        v9
     || ((v10 = *(float *)(v6 + 20), v10 < 2147500000.0) ? (v11 = v10 <= -2147500000.0) : (v11 = 1),
         !v11 ? (v12 = (int)v10 == 0) : (v12 = 0),
         v12)))
  {
    *(_BYTE *)this = 8;
    *(_QWORD *)(this + 8) = 0;
    *(_BYTE *)(this + 16) = 1;
    return this;
  }
  v14 = *((float *)a4 + 1);
  v15 = *((float *)a4 + 2);
  v16 = *((float *)a4 + 3);
  if ((float)(v14 + v16) < v14)
    v14 = v14 + v16;
  v17 = -v15;
  if (v15 >= 0.0)
    v17 = *((float *)a4 + 2);
  if (v16 < 0.0)
    v16 = -v16;
  if (v17 <= 0.0 || v16 <= 0.0)
    goto LABEL_46;
  v18 = *(float *)a4 + v15;
  if (v18 >= *(float *)a4)
    v18 = *(float *)a4;
  v19 = (int)fmaxf(v7, -2147500000.0);
  v20 = v7 >= 2147500000.0 ? 2147500000.0 : (float)v19;
  if (v18 < 0.0
    || (float)(v17 + v18) > v20
    || v14 < 0.0
    || ((v21 = (int)fmaxf(v10, -2147500000.0), v10 >= 2147500000.0) ? (v22 = 2147500000.0) : (v22 = (float)v21),
        (float)(v16 + v14) > v22 || a5[2] == 0.0 || a5[3] == 0.0))
  {
LABEL_46:
    *(_QWORD *)this = 0;
    *(_QWORD *)(this + 8) = 0;
    *(_QWORD *)(this + 16) = 0;
    return this;
  }
  WebCore::CanvasFilterContextSwitcher::create(a2, (WebCore::CanvasRenderingContext2DBase *)a5, (uint64_t **)&v67);
  this = ((uint64_t (*)(uint64_t **))(*a2)[30])(a2);
  if (this)
  {
    v26 = *((_DWORD *)a2 + 33);
    if (!v26)
      goto LABEL_101;
    if (LOBYTE(a2[15][70 * v26 - 50]))
    {
      v27 = *((_QWORD *)a3 + 2);
      if (v27)
      {
        v28 = this;
        v29 = *(_QWORD *)(v27 + 8);
        if (__ldaxr((unsigned __int8 *)v29))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v29))
        {
          goto LABEL_50;
        }
        MEMORY[0x19AEA534C](v29);
LABEL_50:
        ++*(_QWORD *)(v29 + 8);
        v31 = __ldxr((unsigned __int8 *)v29);
        if (v31 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v29))
          {
LABEL_55:
            v32 = a2[4];
            if (*((_BYTE *)v32 + 72) && (*((_BYTE *)a3 + 32) & 1) == 0)
              *((_BYTE *)v32 + 72) = 0;
            v33 = a5[1];
            *(float *)v68 = *a5;
            *(float *)&v68[4] = v33;
            v34 = a5[3];
            *(float *)&v68[8] = *(float *)v68 + a5[2];
            *(_QWORD *)&v68[12] = __PAIR64__(*(unsigned int *)&v68[8], LODWORD(v33));
            v69 = v33 + v34;
            v70 = *(_DWORD *)v68;
            v71 = v33 + v34;
            v35 = (float)(*(unsigned int (**)(uint64_t *))(*v32 + 56))(v32);
            v36 = (*(uint64_t (**)(uint64_t *))(*a2[4] + 64))(a2[4]);
            v73 = 0;
            *(float *)v74 = v35;
            v74[1] = 0;
            *(float *)v75 = v35;
            *(float *)&v75[1] = (float)v36;
            v76[0] = 0;
            *(float *)&v76[1] = (float)v36;
            v37 = *((unsigned int *)a2 + 33);
            if (!(_DWORD)v37)
            {
              __break(0xC471u);
              JUMPOUT(0x195CEB130);
            }
            v38 = v37 - 1;
            v39 = a2[15];
            WebCore::AffineTransform::mapQuad((float64x2_t *)&v39[70 * v37 - 56], (float32x4_t *)v68, v72);
            if (WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)v72, (const WebCore::FloatPoint *)&v73)
              && WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)v72, (const WebCore::FloatPoint *)v74)
              && WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)v72, (const WebCore::FloatPoint *)v75)
              && WebCore::FloatQuad::containsPoint((WebCore::FloatQuad *)v72, (const WebCore::FloatPoint *)v76))
            {
              v40 = (uint64_t)&v39[70 * v38];
LABEL_64:
              (*(void (**)(uint64_t, uint64_t, float *, const WebCore::FloatRect *, unint64_t))(*(_QWORD *)v28 + 384))(v28, v27, a5, a4, *(_BYTE *)(v40 + 105) & 0x1F | ((unint64_t)(*(_BYTE *)(v40 + 104) & 0xF) << 8) | 0x1020);
LABEL_68:
              v42 = 1;
              goto LABEL_69;
            }
            v41 = LOBYTE(v39[70 * v38 + 13]);
            if (v41 > 9)
              goto LABEL_96;
            if (((1 << v41) & 0x298) != 0)
            {
              WebCore::CanvasRenderingContext2DBase::fullCanvasCompositedDrawImage<WebCore::ImageBuffer>(a2, v27, (const WebCore::FloatRect *)a5, (uint64_t)a4, v41);
              goto LABEL_68;
            }
            if (v41 != 1)
            {
LABEL_96:
              (*(void (**)(uint64_t, uint64_t, float *, const WebCore::FloatRect *, unint64_t))(*(_QWORD *)v28 + 384))(v28, v27, a5, a4, BYTE1(v39[70 * v38 + 13]) & 0x1F | ((unint64_t)(v41 & 0xF) << 8) | 0x1020);
              v42 = 0;
LABEL_69:
              if (v67)
              {
                v43 = *(_DWORD *)(*(_QWORD *)v67 + 132);
                if (!v43)
                {
                  __break(0xC471u);
                  JUMPOUT(0x195CEB138);
                }
                v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v67 + 120) + 560 * v43 - 8);
                v45 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v44 + 8) + 272))(*(_QWORD *)(v44 + 8), v44 + 24);
                v48 = *(float *)(v44 + 28) - (float)(int)v45;
                v49 = *(float *)(v44 + 32) + (float)((float)v47 + (float)SHIDWORD(v45));
                v50 = *(float *)(v44 + 36) + (float)((float)(int)v45 + (float)v46);
                *(float *)v68 = *(float *)(v44 + 24) - (float)v47;
                *(float *)&v68[4] = v48;
                *(float *)&v68[8] = v49;
                *(float *)&v68[12] = v50;
              }
              else
              {
                *(_OWORD *)v68 = *(_OWORD *)a5;
              }
              this = WebCore::CanvasRenderingContext2DBase::didDraw((uint64_t)a2, v42, (float32x4_t *)v68, 7u);
              *v5 = 0;
              v5[1] = 0;
              v5[2] = 0;
              v52 = *(_QWORD *)(v27 + 8);
              if (__ldaxr((unsigned __int8 *)v52))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v52))
              {
                goto LABEL_77;
              }
              this = MEMORY[0x19AEA534C](v52);
LABEL_77:
              v54 = *(_QWORD *)(v52 + 8);
              v55 = v54 - 1;
              *(_QWORD *)(v52 + 8) = v54 - 1;
              if (v54 == 1)
              {
                v66 = *(_QWORD *)(v52 + 16);
                v56 = *(_QWORD *)(v52 + 24);
                *(_QWORD *)(v52 + 24) = 0;
                v57 = v66 != 0;
              }
              else
              {
                v56 = 0;
                v57 = 1;
              }
              v58 = __ldxr((unsigned __int8 *)v52);
              if (v58 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v52))
                {
LABEL_84:
                  if (!v55)
                  {
                    if (v56)
                      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
                    if (!v57)
                      this = WTF::fastFree((WTF *)v52, v51);
                  }
                  goto LABEL_89;
                }
              }
              else
              {
                __clrex();
              }
              this = WTF::Lock::unlockSlow((WTF::Lock *)v52);
              goto LABEL_84;
            }
            v61 = ((uint64_t (*)(uint64_t **))(*a2)[30])(a2);
            if (v61)
            {
              v62 = v61;
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v61 + 96))(v61, 1);
              ((void (*)(_BYTE *__return_ptr, uint64_t **))(*a2)[31])(v68, a2);
              (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v62 + 664))(v62, v68);
              v63 = (float)(*(unsigned int (**)(uint64_t *))(*a2[4] + 56))(a2[4]);
              v64 = (*(uint64_t (**)(uint64_t *))(*a2[4] + 64))(a2[4]);
              *(_QWORD *)v68 = 0;
              *(float *)&v68[8] = v63;
              *(float *)&v68[12] = (float)v64;
              (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v62 + 280))(v62, v68);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v62 + 104))(v62, 1);
            }
            v65 = *((_DWORD *)a2 + 33);
            if (v65)
            {
              v40 = (uint64_t)&a2[15][70 * v65 - 70];
              goto LABEL_64;
            }
LABEL_101:
            __break(0xC471u);
            JUMPOUT(0x195CEB128);
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v29);
        goto LABEL_55;
      }
    }
  }
  *v5 = 0;
  v5[1] = 0;
  v5[2] = 0;
LABEL_89:
  v59 = v67;
  if (v67)
  {
    WebCore::CanvasRenderingContext2DBase::restore(*(_QWORD *)v67);
    return WTF::fastFree(v59, v60);
  }
  return this;
}

uint64_t WebCore::CanvasRenderingContext2DBase::compositeBuffer(_DWORD *a1, uint64_t a2, int *a3, int a4)
{
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  float v14;
  float v15;
  float v16;
  _OWORD v17[3];
  uint64_t v18;
  unint64_t v19;

  v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 4) + 56))(*((_QWORD *)a1 + 4));
  v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 4) + 64))(*((_QWORD *)a1 + 4));
  v18 = 0;
  v19 = __PAIR64__(v9, v8);
  (*(void (**)(_OWORD *__return_ptr, _DWORD *))(*(_QWORD *)a1 + 248))(v17, a1);
  v18 = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)v17, (const WebCore::IntRect *)&v18);
  v19 = v10;
  result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 240))(a1);
  if (result)
  {
    v12 = result;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)result + 96))(result, 1);
    v17[0] = constinit_2;
    v17[1] = unk_1969F1490;
    v17[2] = xmmword_1969F14A0;
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v12 + 664))(v12, v17);
    if (*(unsigned __int8 *)(v12 + 194) != a4 || *(_BYTE *)(v12 + 195) != 1)
    {
      *(_WORD *)(v12 + 194) = a4 | 0x100;
      *(_DWORD *)(v12 + 184) |= 0x20u;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 88))(v12, v12 + 8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 96))(v12, 1);
    v14 = (float)a3[1];
    *(float *)v17 = (float)*a3;
    *((float *)v17 + 1) = v14;
    v15 = (float)a3[3];
    *((float *)v17 + 2) = (float)a3[2];
    *((float *)v17 + 3) = v15;
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v12 + 472))(v12, v17);
    *(float *)v17 = (float)(int)v18;
    *((float *)v17 + 1) = (float)SHIDWORD(v18);
    *((float *)v17 + 2) = (float)(int)v19;
    *((float *)v17 + 3) = (float)SHIDWORD(v19);
    (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v12 + 280))(v12, v17);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 104))(v12, 1);
    v16 = (float)a3[1];
    *(float *)v17 = (float)*a3;
    *((float *)v17 + 1) = v16;
    if (a1[33])
    {
      WebCore::GraphicsContext::drawImageBuffer(v12, a2, (uint64_t *)v17);
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 104))(v12, 1);
    }
    else
    {
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t WebCore::CanvasRenderingContext2DBase::createPattern@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  char v7;
  char v8;
  uint64_t v9;
  uint64_t result;
  WebCore::CanvasRenderingContext2DBase *v12;
  WebCore::CachedImage *v13;
  WebCore::RenderElement *v14;
  BOOL v15;
  BOOL v16;
  char v17;
  char v18;
  _QWORD v19[3];
  _QWORD *v20;

  if (*a3 && *(_DWORD *)(*a3 + 4) && (MEMORY[0x19AEA53F4]() & 1) == 0)
  {
    if ((MEMORY[0x19AEA53F4](*a3, "no-repeat", 9) & 1) != 0)
    {
      v7 = 0;
      v8 = 0;
    }
    else if ((MEMORY[0x19AEA53F4](*a3, "repeat-x", 8) & 1) != 0)
    {
      v8 = 0;
      v7 = 1;
    }
    else
    {
      result = MEMORY[0x19AEA53F4](*a3, "repeat-y", 8);
      v8 = 1;
      if ((result & 1) == 0)
      {
        *(_BYTE *)a4 = 9;
        *(_QWORD *)(a4 + 8) = 0;
        *(_DWORD *)(a4 + 16) = 1;
        return result;
      }
      v7 = 0;
    }
  }
  else
  {
    v7 = 1;
    v8 = 1;
  }
  v18 = v7;
  v17 = v8;
  v19[0] = a1;
  v19[1] = &v18;
  v19[2] = &v17;
  v9 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v9 == -1)
  {
    v12 = (WebCore::CanvasRenderingContext2DBase *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::CanvasRenderingContext2DBase::createPattern(v12, v13, v14, v15, v16);
  }
  else
  {
    v20 = v19;
    return ((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore28CanvasRenderingContext2DBase13createPatternEONS_7variantIJNS6_6RefPtrINS8_16HTMLImageElementENS6_12RawPtrTraitsISC_EENS6_21DefaultRefDerefTraitsISC_EEEENSB_INS8_15SVGImageElementENSD_ISI_EENSF_ISI_EEEENSB_INS8_17HTMLCanvasElementENSD_ISM_EENSF_ISM_EEEENSB_INS8_11ImageBitmapENSD_ISQ_EENSF_ISQ_EEEENSB_INS8_18CSSStyleImageValueENSD_ISU_EENSF_ISU_EEEENSB_INS8_15OffscreenCanvasENSD_ISY_EENSF_ISY_EEEENSB_INS8_16HTMLVideoElementENSD_IS12_EENSF_IS12_EEEENSB_INS8_19WebCodecsVideoFrameENSD_IS16_EENSF_IS16_EEEEEEERKNS6_6StringEE3__0JEEEEEJRNS0_6__implIJSH_SL_SP_ST_SX_S11_S15_S19_EEEEEEDcOT_DpOT0____fmatrix[v9])(&v20, a2);
  }
}

_DWORD *WebCore::CanvasRenderingContext2DBase::createPattern(WebCore::CanvasRenderingContext2DBase *this, WebCore::CachedImage *a2, WebCore::RenderElement *a3, const WebCore::RenderObject *a4, char a5, char a6)
{
  uint64_t v11;
  uint64_t *v12;
  BOOL isCORSSameOrigin;
  uint64_t v14;
  _DWORD *result;
  _DWORD *v16;
  unint64_t v17;
  BOOL v18;
  char v19;
  char v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  void *v24;
  int v25;
  int v26;
  WebCore::CanvasRenderingContext2DBase *v27;
  __int128 v28;
  uint64_t v29;
  void *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  WebCore::CanvasRenderingContext2DBase *v35;
  uint64_t v36;
  int v37;
  _BYTE *v38;
  int v39;
  _BYTE v40[8];
  int v41;
  unsigned __int8 v42;
  uint64_t v43;
  char v44;
  _BYTE v45[54];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  (*(void (**)(WebCore::CachedImage *))(*(_QWORD *)a2 + 80))(a2);
  v11 = *((_QWORD *)a3 + 50);
  if (v11)
  {
    v12 = (uint64_t *)(v11 + 320);
  }
  else
  {
    v34 = atomic_load(&WebCore::CachedResource::resourceError(void)const::onceFlag);
    if (v34 != -1)
    {
      *(_QWORD *)v45 = &v36;
      v38 = v45;
      std::__call_once(&WebCore::CachedResource::resourceError(void)const::onceFlag, &v38, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::CachedResource::resourceError(void)::$_0 &&>>);
    }
    v12 = &WebCore::CachedResource::resourceError(void)const::emptyError;
  }
  if (*((_BYTE *)v12 + 60))
    isCORSSameOrigin = 0;
  else
    isCORSSameOrigin = WebCore::CachedResource::isCORSSameOrigin(a3);
  if ((*(_WORD *)((char *)a3 + 557) >> 5) - 3 <= 1 && (*((_BYTE *)a3 + 720) & 0x10) != 0)
  {
    WebCore::CachedImage::brokenImage(1.0, (uint64_t)v45);
    v31 = *(unsigned int **)v45;
    if (*(_QWORD *)v45)
    {
      v14 = *(_QWORD *)(*(_QWORD *)v45 + 8);
      *(_QWORD *)v45 = 0;
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        atomic_store(1u, v31);
        WTF::fastFree((WTF *)v31, v30);
      }
    }
    else
    {
      v14 = 0;
    }
  }
  else
  {
    v14 = *((_QWORD *)a3 + 86);
    if (!v14)
    {
      {
        v14 = WebCore::Image::nullImage(void)::nullImage;
      }
      else
      {
        WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)v45);
        v14 = *(_QWORD *)v45;
        WebCore::Image::nullImage(void)::nullImage = *(_QWORD *)v45;
      }
    }
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 56))(v14) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 64))(v14))
  {
    isCORSSameOrigin = 0;
  }
  result = WebCore::CachedImage::imageForRenderer(a3, a4);
  if (result)
  {
    v16 = result;
    ++result[2];
    v17 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v17 != -1)
    {
      *(_QWORD *)v45 = &v36;
      v38 = v45;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v38, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    result = (*(_QWORD *(**)(uint64_t *__return_ptr, _DWORD *, uint64_t *))(*(_QWORD *)v16 + 288))(&v43, v16, &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
    if (v43)
    {
      v35 = this;
      v36 = v43;
      v18 = isCORSSameOrigin;
      v19 = a5;
      v20 = a6;
      v43 = 0;
      v37 = 0;
      LOBYTE(v38) = 0;
      v39 = -1;
      _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ImageBufferENSC_ISH_EENSE_ISH_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISQ_LNS0_6_TraitE1EEEEEvRSR_OT_EUlRSX_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SP_EEEOS15_EEEDcSX_DpT0_((uint64_t)v45, &v38, &v36);
      v39 = 0;
      v40[0] = 0;
      v42 = 0;
      v21 = WTF::fastMalloc((WTF *)0x18);
      *(_DWORD *)v21 = 1;
      *(_OWORD *)&v45[6] = constinit_2;
      *(_OWORD *)&v45[22] = unk_1969F1490;
      *(_OWORD *)&v45[38] = xmmword_1969F14A0;
      result = (_DWORD *)WTF::fastMalloc((WTF *)0x68);
      v22 = result;
      *((_BYTE *)result + 8) = 0;
      *result = 1;
      result[4] = -1;
      v23 = v39;
      if (v39 != -1)
      {
        result = (_DWORD *)((uint64_t (*)(char *, _DWORD *, _BYTE **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JSU_ST_EEEDcmSW_DpOT0____fdiagonal[v39])(&v44, result + 2, &v38);
        v22[4] = v23;
      }
      *((_BYTE *)v22 + 24) = 0;
      v24 = v22 + 6;
      *((_BYTE *)v22 + 40) = 0;
      v25 = v42;
      if (v42)
      {
        v22[8] = -1;
        v26 = v41;
        if (v41 == -1)
        {
          v25 = 1;
        }
        else
        {
          result = (_DWORD *)((uint64_t (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JSU_ST_EEEDcmSW_DpOT0____fdiagonal[v41])(&v44);
          v22[8] = v26;
          v25 = v42;
        }
        v27 = v35;
        *((_BYTE *)v22 + 40) = 1;
      }
      else
      {
        v27 = v35;
      }
      v28 = *(_OWORD *)&v45[16];
      *(_OWORD *)((char *)v22 + 50) = *(_OWORD *)v45;
      *((_BYTE *)v22 + 48) = v19;
      *((_BYTE *)v22 + 49) = v20;
      *(_OWORD *)((char *)v22 + 66) = v28;
      *(_OWORD *)((char *)v22 + 82) = *(_OWORD *)&v45[32];
      *((_QWORD *)v22 + 12) = *(_QWORD *)&v45[46];
      *(_QWORD *)(v21 + 8) = v22;
      *(_BYTE *)(v21 + 16) = v18;
      *(_QWORD *)v27 = v21;
      *((_DWORD *)v27 + 4) = 0;
      if (v25)
      {
        if (v41 != -1)
          result = (_DWORD *)((uint64_t (*)(_BYTE *, _BYTE *))off_1E33DC740[v41])(v45, v40);
        v41 = -1;
      }
      if (v39 != -1)
        result = (_DWORD *)((uint64_t (*)(_BYTE *, _BYTE **))off_1E33DC740[v39])(v45, &v38);
      v39 = -1;
      if (v37 != -1)
        result = (_DWORD *)((uint64_t (*)(_BYTE *, uint64_t *))off_1E33DC740[v37])(v45, &v36);
      v29 = v43;
      v43 = 0;
      if (v29)
        result = WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v29 + 8), v24);
    }
    else
    {
      *(_BYTE *)this = 8;
      *((_QWORD *)this + 1) = 0;
      *((_DWORD *)this + 4) = 1;
    }
    if (v16[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  else
  {
    *(_BYTE *)this = 8;
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 1;
  }
  return result;
}

unsigned __int8 **WebCore::CanvasRenderingContext2DBase::createPattern(WebCore::CanvasRenderingContext2DBase *this, WebCore::CanvasBase *a2, char a3, char a4)
{
  unsigned __int8 **result;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unsigned __int8 **v14;
  int v15;
  void *v16;
  int v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _BYTE *v23;
  int v24;
  char v25[8];
  int v26;
  unsigned __int8 v27;
  uint64_t v28;
  char v29;
  _BYTE v30[54];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  result = (unsigned __int8 **)(*(uint64_t (**)(WebCore::CanvasBase *))(*(_QWORD *)a2 + 56))(a2);
  if (!(_DWORD)result)
    goto LABEL_12;
  result = (unsigned __int8 **)(*(uint64_t (**)(WebCore::CanvasBase *))(*(_QWORD *)a2 + 64))(a2);
  if (!(_DWORD)result)
    goto LABEL_12;
  result = (unsigned __int8 **)(*(uint64_t (**)(WebCore::CanvasBase *))(*(_QWORD *)a2 + 112))(a2);
  if (!result)
    goto LABEL_12;
  v9 = (uint64_t)result;
  v10 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v10 != -1)
  {
    *(_QWORD *)v30 = &v21;
    v23 = v30;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v23, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  result = (unsigned __int8 **)(*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v9 + 288))(&v28, v9, &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
  v11 = v28;
  if (v28)
  {
    v28 = 0;
    v21 = v11;
    v22 = 0;
    LOBYTE(v23) = 0;
    v24 = -1;
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ImageBufferENSC_ISH_EENSE_ISH_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISQ_LNS0_6_TraitE1EEEEEvRSR_OT_EUlRSX_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SP_EEEOS15_EEEDcSX_DpT0_((uint64_t)v30, &v23, &v21);
    v24 = 0;
    v25[0] = 0;
    v27 = 0;
    v12 = *((_BYTE *)a2 + 72);
    v13 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v13 = 1;
    *(_OWORD *)&v30[6] = constinit_2;
    *(_OWORD *)&v30[22] = unk_1969F1490;
    *(_OWORD *)&v30[38] = xmmword_1969F14A0;
    result = (unsigned __int8 **)WTF::fastMalloc((WTF *)0x68);
    v14 = result;
    *((_BYTE *)result + 8) = 0;
    *(_DWORD *)result = 1;
    *((_DWORD *)result + 4) = -1;
    v15 = v24;
    if (v24 != -1)
    {
      result = (unsigned __int8 **)((uint64_t (*)(char *, unsigned __int8 **, _BYTE **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JSU_ST_EEEDcmSW_DpOT0____fdiagonal[v24])(&v29, result + 1, &v23);
      *((_DWORD *)v14 + 4) = v15;
    }
    *((_BYTE *)v14 + 24) = 0;
    v16 = v14 + 3;
    *((_BYTE *)v14 + 40) = 0;
    v17 = v27;
    if (v27)
    {
      *((_DWORD *)v14 + 8) = -1;
      v18 = v26;
      if (v26 == -1)
      {
        v17 = 1;
      }
      else
      {
        result = (unsigned __int8 **)((uint64_t (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JSU_ST_EEEDcmSW_DpOT0____fdiagonal[v26])(&v29);
        *((_DWORD *)v14 + 8) = v18;
        v17 = v27;
      }
      *((_BYTE *)v14 + 40) = 1;
    }
    v19 = *(_OWORD *)&v30[16];
    *(_OWORD *)((char *)v14 + 50) = *(_OWORD *)v30;
    *((_BYTE *)v14 + 48) = a3;
    *((_BYTE *)v14 + 49) = a4;
    *(_OWORD *)((char *)v14 + 66) = v19;
    *(_OWORD *)((char *)v14 + 82) = *(_OWORD *)&v30[32];
    v14[12] = *(unsigned __int8 **)&v30[46];
    *(_QWORD *)(v13 + 8) = v14;
    *(_BYTE *)(v13 + 16) = v12;
    *(_QWORD *)this = v13;
    *((_DWORD *)this + 4) = 0;
    if (v17)
    {
      if (v26 != -1)
        result = (unsigned __int8 **)((uint64_t (*)(_BYTE *, char *))off_1E33DC740[v26])(v30, v25);
      v26 = -1;
    }
    if (v24 != -1)
      result = (unsigned __int8 **)((uint64_t (*)(_BYTE *, _BYTE **))off_1E33DC740[v24])(v30, &v23);
    v24 = -1;
    if (v22 != -1)
      result = (unsigned __int8 **)((uint64_t (*)(_BYTE *, uint64_t *))off_1E33DC740[v22])(v30, &v21);
    v20 = v28;
    v28 = 0;
    if (v20)
      return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v20 + 8), v16);
  }
  else
  {
LABEL_12:
    *(_BYTE *)this = 8;
    *((_QWORD *)this + 1) = 0;
    *((_DWORD *)this + 4) = 1;
  }
  return result;
}

uint64_t WebCore::CanvasRenderingContext2DBase::pixelFormat(WebCore::CanvasRenderingContext2DBase *this)
{
  return 1;
}

uint64_t WebCore::CanvasRenderingContext2DBase::drawingContext(WebCore::CanvasRenderingContext2DBase *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  v1 = *((_QWORD *)this + 4);
  if (!*(_BYTE *)(v1 + 73))
  {
    v3 = *((_QWORD *)this + 4);
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 160))(v1);
    v1 = v3;
  }
  result = *(_QWORD *)(v1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t WebCore::CanvasRenderingContext2DBase::existingDrawingContext(WebCore::CanvasRenderingContext2DBase *this)
{
  if (*(_BYTE *)(*((_QWORD *)this + 4) + 73))
    return (*(uint64_t (**)(WebCore::CanvasRenderingContext2DBase *))(*(_QWORD *)this + 224))(this);
  else
    return 0;
}

__n128 WebCore::CanvasRenderingContext2DBase::baseTransform@<Q0>(WebCore::CanvasRenderingContext2DBase *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __n128 result;
  uint64_t v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 4);
  if (!*(_BYTE *)(v2 + 73))
  {
    v6 = a2;
    v7 = *((_QWORD *)this + 4);
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 160))(v2);
    a2 = v6;
    v2 = v7;
  }
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_OWORD *)(v3 + 72);
  *(_OWORD *)a2 = *(_OWORD *)(v3 + 56);
  *(_OWORD *)(a2 + 16) = v4;
  result = *(__n128 *)(v3 + 88);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

uint64_t WebCore::CanvasRenderingContext2DBase::prepareForDisplay(WebCore::CanvasRenderingContext2DBase *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  v1 = *((_QWORD *)this + 4);
  if (!*(_BYTE *)(v1 + 73))
  {
    v3 = *((_QWORD *)this + 4);
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 160))(v1);
    v1 = v3;
  }
  result = *(_QWORD *)(v1 + 16);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t WebCore::CanvasRenderingContext2DBase::needsPreparationForDisplay(WebCore::CanvasRenderingContext2DBase *this)
{
  return 0;
}

uint64_t WebCore::CanvasRenderingContext2DBase::evictCachedImageData(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = this;
  v2 = *(unsigned int *)(this + 792);
  if ((_DWORD)v2 != -1)
    this = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore28CanvasRenderingContext2DBase25CachedContentsTransparentENS7_21CachedContentsUnknownENS7_23CachedContentsImageDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v2])(&v3, this + 720);
  *(_DWORD *)(v1 + 792) = 1;
  return this;
}

void WebCore::CanvasRenderingContext2DBase::getImageData(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  _BYTE *v9;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  const void *v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  CFTypeRef v29;
  CFTypeRef v30;
  _DWORD *v31;
  uint64_t v32;
  JSC::ArrayBuffer *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  BOOL v38;
  WebCore::DestinationColorSpace *v39;
  unint64_t v40;
  const void *v41;
  char v42;
  WTF::StringImpl **v43;
  WTF::StringImpl *v44;
  CFTypeRef v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  uint64_t *v56;
  WTF::StringImpl **v57;
  uint64_t v58;
  _DWORD v59[2];
  uint64_t v60;
  WTF::StringImpl *v61;
  CFTypeRef cf;
  int v63;
  uint64_t v64;
  _DWORD *v65;
  CFTypeRef v66;
  int v67;
  uint64_t v68;
  _DWORD *v69;
  WTF::StringImpl **v70;

  if (!a4 || !a5)
  {
    *(_BYTE *)a7 = 0;
LABEL_70:
    *(_QWORD *)(a7 + 8) = 0;
    *(_DWORD *)(a7 + 16) = 1;
    return;
  }
  v9 = *(_BYTE **)(a1 + 32);
  if (!v9[72])
  {
    if ((byte_1ECE836B1 & 1) == 0)
    {
      WebCore::CanvasRenderingContext2DBase::getImageData(int,int,int,int,std::optional<WebCore::ImageDataSettings>)::$_0::operator() const(void)::impl += 2;
      qword_1ECE836C0 = &WebCore::CanvasRenderingContext2DBase::getImageData(int,int,int,int,std::optional<WebCore::ImageDataSettings>)::$_0::operator() const(void)::impl;
      byte_1ECE836B1 = 1;
    }
    v37 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v9 + 144))(v9);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v37 + 248))(v37, 8, 2, &qword_1ECE836C0, 0);
    *(_BYTE *)a7 = 14;
    goto LABEL_70;
  }
  v11 = a4;
  v12 = a3;
  v13 = a2;
  if (a4 < 0)
  {
    v13 = a4 + a2;
    v11 = -a4;
  }
  if (a5 < 0)
  {
    v12 = a5 + a3;
    a5 = -a5;
  }
  v59[0] = v13;
  v59[1] = v12;
  v60 = __PAIR64__(a5, v11);
  v14 = *(unsigned __int8 *)(a1 + 802);
  if ((a6 & 0xFF0000) != 0 && (a6 & 0xFF00) != 0)
    v14 = a6;
  v15 = *(_DWORD *)(a1 + 792);
  if (v15 == 2)
  {
LABEL_15:
    v16 = *(_QWORD *)(a1 + 720);
    *(_QWORD *)(a1 + 720) = 0;
    *(_QWORD *)(a1 + 728) = off_1E33DC988;
    v17 = *(_QWORD *)(a1 + 776);
    *(_QWORD *)(a1 + 776) = 0;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(a1 + 728));
    v18 = *(_DWORD **)(a1 + 720);
    *(_QWORD *)(a1 + 720) = 0;
    if (v18)
    {
      if (v18[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
      else
        --v18[2];
    }
    *(_DWORD *)(a1 + 792) = 1;
    if (v13 | v12 || __PAIR64__(HIDWORD(v60), v11) != *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8))
    {
      v58 = 0;
      if (!v16)
        goto LABEL_76;
      goto LABEL_49;
    }
    if (__PAIR64__(HIDWORD(v60), v11) != *(_QWORD *)(v16 + 32) || *(unsigned __int8 *)(a1 + 802) != v14)
    {
      v58 = 0;
LABEL_49:
      if (*(_DWORD *)(v16 + 8) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      else
        --*(_DWORD *)(v16 + 8);
      goto LABEL_51;
    }
    v19 = *(const void **)(v16 + 24);
    v70 = *(WTF::StringImpl ***)(v16 + 32);
    v20 = (int)v70;
    v21 = *(_QWORD *)(v16 + 56);
    *(_QWORD *)(v16 + 56) = 0;
    v69 = (_DWORD *)v21;
    v22 = 4 * v20;
    LOWORD(v65) = *(_WORD *)(v16 + 16);
    v66 = v19;
    if (v19)
      CFRetain(v19);
    v67 = v22;
    v23 = *(_QWORD *)(v21 + 32);
    v24 = MEMORY[0x1E0CC10F8];
    if (v23)
    {
      v25 = *(_QWORD *)(v23 + 16);
      if (!v25)
      {
LABEL_32:
        v68 = v25;
        LOWORD(v61) = 1;
        v27 = *(const void **)(v16 + 24);
        cf = v27;
        if (v27)
        {
          CFRetain(v27);
          v23 = *(_QWORD *)(v21 + 32);
        }
        v63 = v22;
        if (v23)
        {
          v23 = *(_QWORD *)(v23 + 16);
          if (v23)
          {
            v28 = *(_QWORD *)(v24 + 56);
            if (v28 && (*(_BYTE *)(v24 + 34) || !*MEMORY[0x1E0CC10F0]))
            {
              if ((v23 & 0x3FFFFFFFFLL) + v28)
              {
                v23 = *(_QWORD *)(v21 + 24);
                if (v23 && (*(_BYTE *)(v24 + 34) || !*MEMORY[0x1E0CC10F0]))
                  v23 = (v23 & 0x3FFFFFFFFLL) + v28;
              }
              else
              {
                v23 = 0;
              }
            }
            else
            {
              v23 = *(_QWORD *)(v21 + 24);
            }
          }
        }
        v64 = v23;
        WebCore::convertImagePixels((unsigned __int8 *)&v65, (unsigned __int8 *)&v61, (int *)&v70);
        WebCore::ImageData::create((unsigned int *)&v70, (uint64_t *)&v69, *(_BYTE *)(a1 + 802), &v58);
        v29 = cf;
        cf = 0;
        if (v29)
          CFRelease(v29);
        v30 = v66;
        v66 = 0;
        if (v30)
          CFRelease(v30);
        v31 = v69;
        v69 = 0;
        if (v31)
        {
          if (*v31 == 1)
            JSC::ArrayBufferView::operator delete();
          else
            --*v31;
        }
        goto LABEL_49;
      }
      v26 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
      if (!v26 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
      {
        v25 = *(_QWORD *)(v21 + 24);
        goto LABEL_32;
      }
      if ((v25 & 0x3FFFFFFFFLL) + v26)
      {
        v25 = *(_QWORD *)(v21 + 24);
        if (v25 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
          v25 = (v25 & 0x3FFFFFFFFLL) + v26;
        goto LABEL_32;
      }
    }
    v25 = 0;
    goto LABEL_32;
  }
  if (v15 == 1)
    goto LABEL_76;
  if (v15)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_15;
  }
  v32 = v60;
  if ((v60 & 0x80000000) != 0)
    goto LABEL_76;
  if (((v60 >> 32) * (unint64_t)v60) >> 32)
    goto LABEL_76;
  if ((HIDWORD(v60) * v60) >> 30)
    goto LABEL_76;
  v33 = (JSC::ArrayBuffer *)(4 * HIDWORD(v60) * v60);
  if ((v33 & 0x80000000) != 0)
    goto LABEL_76;
  JSC::GenericTypedArrayView<JSC::Uint8ClampedAdaptor>::tryCreateUninitialized(v33, (uint64_t *)&v65);
  if (!v65)
    goto LABEL_76;
  v34 = WTF::fastMalloc((WTF *)0x20);
  v35 = (uint64_t)v65;
  v65 = 0;
  *(_DWORD *)v34 = 1;
  *(_QWORD *)(v34 + 4) = v32;
  *(_QWORD *)(v34 + 16) = v35;
  *(_BYTE *)(v34 + 24) = v14;
  v58 = v34;
  v36 = v65;
  v65 = 0;
  if (v36)
  {
    if (*v36 == 1)
    {
      JSC::ArrayBufferView::operator delete();
      v35 = *(_QWORD *)(v34 + 16);
    }
    else
    {
      --*v36;
    }
  }
  JSC::GenericTypedArrayView<JSC::Uint8ClampedAdaptor>::zeroFill(v35);
LABEL_51:
  if (v58)
  {
    *(_QWORD *)a7 = v58;
    *(_DWORD *)(a7 + 16) = 0;
    return;
  }
LABEL_76:
  v38 = 1;
  WebCore::CanvasBase::makeRenderingResultsAvailable(*(_QWORD *)(a1 + 32), 1, (uint64_t *)&v69);
  if (v69)
  {
    LOWORD(v65) = 1;
    if (v14)
    {
      if (v14 == 1)
        v56 = WebCore::DestinationColorSpace::DisplayP3(v39);
      else
        v56 = WebCore::DestinationColorSpace::SRGB(v39);
      v41 = (const void *)*v56;
    }
    else
    {
      v40 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
      if (v40 != -1)
      {
        v61 = (WTF::StringImpl *)&v58;
        v70 = &v61;
        std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v70, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
      }
      v41 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
    }
    v66 = v41;
    if (v41)
      CFRetain(v41);
    v61 = (WTF::StringImpl *)off_1E340D360;
    (*(void (**)(WTF::StringImpl ***__return_ptr, _DWORD *, _DWORD **, _DWORD *, WTF::StringImpl **))(*(_QWORD *)v69 + 88))(&v57, v69, &v65, v59, &v61);
    if (v57)
    {
      v42 = (*((uint64_t (**)(WTF::StringImpl **))*v57 + 2))(v57);
      v43 = v57;
      v57 = 0;
      if ((v42 & 1) != 0)
      {
        if (v43)
        {
          v70 = v43;
          WebCore::ImageData::create((uint64_t *)&v70, (uint64_t *)&v61);
          *(_QWORD *)a7 = v61;
          *(_DWORD *)(a7 + 16) = 0;
          if (*((_DWORD *)v43 + 2) == 1)
            (*((void (**)(WTF::StringImpl **))*v43 + 1))(v43);
          else
            --*((_DWORD *)v43 + 2);
LABEL_88:
          v45 = v66;
          v66 = 0;
          if (v45)
            CFRelease(v45);
          goto LABEL_90;
        }
      }
      else if (v43)
      {
        if (*((_DWORD *)v43 + 2) == 1)
          (*((void (**)(WTF::StringImpl **))*v43 + 1))(v43);
        else
          --*((_DWORD *)v43 + 2);
      }
    }
    else
    {
      v57 = 0;
    }
    v54 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 144))(*(_QWORD *)(a1 + 32));
    WTF::makeString<WTF::ASCIILiteral,int,WTF::ASCIILiteral,int>(&v61, v60, HIDWORD(v60));
    (*(void (**)(uint64_t, uint64_t, uint64_t, WTF::StringImpl **, _QWORD))(*(_QWORD *)v54 + 248))(v54, 6, 2, &v61, 0);
    v55 = v61;
    v61 = 0;
    if (v55)
    {
      if (*(_DWORD *)v55 == 2)
        WTF::StringImpl::destroy(v55, v44);
      else
        *(_DWORD *)v55 -= 2;
    }
    *(_BYTE *)a7 = 8;
    *(_QWORD *)(a7 + 8) = 0;
    *(_DWORD *)(a7 + 16) = 1;
    goto LABEL_88;
  }
  WebCore::ImageData::createUninitialized(v60, HIDWORD(v60), *(_BYTE *)(a1 + 802), a6, a7);
  if (!*(_DWORD *)(a7 + 16))
    JSC::GenericTypedArrayView<JSC::Uint8ClampedAdaptor>::zeroFill(*(_QWORD *)(*(_QWORD *)a7 + 16));
LABEL_90:
  v46 = (uint64_t)v69;
  v69 = 0;
  if (!v46)
    return;
  v47 = *(_QWORD *)(v46 + 8);
  if (__ldaxr((unsigned __int8 *)v47))
  {
    __clrex();
LABEL_93:
    MEMORY[0x19AEA534C](v47);
    goto LABEL_94;
  }
  if (__stxr(1u, (unsigned __int8 *)v47))
    goto LABEL_93;
LABEL_94:
  v49 = *(_QWORD *)(v47 + 8);
  v50 = v49 - 1;
  *(_QWORD *)(v47 + 8) = v49 - 1;
  if (v49 == 1)
  {
    v53 = *(_QWORD *)(v47 + 16);
    v51 = *(_QWORD *)(v47 + 24);
    *(_QWORD *)(v47 + 24) = 0;
    v38 = v53 != 0;
  }
  else
  {
    v51 = 0;
  }
  v52 = __ldxr((unsigned __int8 *)v47);
  if (v52 != 1)
  {
    __clrex();
    goto LABEL_100;
  }
  if (__stlxr(0, (unsigned __int8 *)v47))
LABEL_100:
    WTF::Lock::unlockSlow((WTF::Lock *)v47);
  if (!v50)
  {
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
    if (!v38)
      WTF::fastFree((WTF *)v47, v44);
  }
}

uint64_t WTF::makeString<WTF::ASCIILiteral,int,WTF::ASCIILiteral,int>(_QWORD *a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;
  unsigned int v5;
  const char *v6;
  int v7;
  unsigned int v8;
  const char *v9;
  int v10;

  v9 = "Unable to get image data from canvas. Requested size was ";
  v10 = 57;
  v8 = a2;
  v6 = " x ";
  v7 = 3;
  v5 = a3;
  result = WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>((uint64_t)&v9, &v8, (uint64_t)&v6, &v5, a1);
  if (!*a1)
    __break(0xC471u);
  return result;
}

WebCore::DestinationColorSpace *WebCore::CanvasRenderingContext2DBase::putImageData(WebCore::DestinationColorSpace *this, WebCore::ImageData *a2, int a3, int a4, int a5, int a6, int a7, int a8)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  int v26;
  unint64_t v27;
  int v28;
  int v29;
  float v30;
  int v31;
  int v32;
  float v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  const void *v54;
  char v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t StatusReg;
  unsigned int *v71;
  unsigned int v72;
  __int16 *v73;
  CFTypeRef v74;
  CFTypeRef v75;
  CFTypeRef v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  int v83;
  uint64_t v84;
  uint64_t *v85;
  WebCore::ImageData *v86;
  float32x4_t v87;
  char v88;
  _QWORD v89[2];
  _DWORD v90[2];
  __int16 **v91;
  CFTypeRef cf;
  int v93;
  uint64_t v94;
  __int16 *v95;
  CFTypeRef v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  __int16 v100;
  CFTypeRef v101;
  unint64_t v102;
  _BYTE v103[9];

  v15 = (uint64_t)this;
  v16 = *((_QWORD *)this + 4);
  if (!*(_BYTE *)(v16 + 73))
    this = (WebCore::DestinationColorSpace *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v16 + 160))(*((_QWORD *)this + 4));
  v17 = *(_QWORD *)(v16 + 16);
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 8);
    if (__ldaxr((unsigned __int8 *)v18))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v18))
    {
LABEL_7:
      ++*(_QWORD *)(v18 + 8);
      v20 = __ldxr((unsigned __int8 *)v18);
      if (v20 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v18))
        {
LABEL_12:
          v21 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 32);
          if (!v21
            || (v22 = *(_QWORD *)(v21 + 16)) == 0
            || (v23 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) != 0
            && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
            && !((v22 & 0x3FFFFFFFFLL) + v23))
          {
LABEL_110:
            v77 = *(_QWORD *)(v17 + 8);
            if (__ldaxr((unsigned __int8 *)v77))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v77))
            {
LABEL_113:
              v79 = *(_QWORD *)(v77 + 8);
              v80 = v79 - 1;
              *(_QWORD *)(v77 + 8) = v79 - 1;
              if (v79 == 1)
              {
                v84 = *(_QWORD *)(v77 + 16);
                v81 = *(_QWORD *)(v77 + 24);
                *(_QWORD *)(v77 + 24) = 0;
                v82 = v84 != 0;
              }
              else
              {
                v81 = 0;
                v82 = 1;
              }
              v83 = __ldxr((unsigned __int8 *)v77);
              if (v83 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v77))
                  goto LABEL_117;
              }
              else
              {
                __clrex();
              }
              this = (WebCore::DestinationColorSpace *)WTF::Lock::unlockSlow((WTF::Lock *)v77);
LABEL_117:
              if (!v80)
              {
                if (v81)
                  this = (WebCore::DestinationColorSpace *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
                if (!v82)
                  return (WebCore::DestinationColorSpace *)WTF::fastFree((WTF *)v77, a2);
              }
              return this;
            }
            this = (WebCore::DestinationColorSpace *)MEMORY[0x19AEA534C](v77);
            goto LABEL_113;
          }
          if (a7 < 0)
          {
            a5 += a7;
            a7 = -a7;
          }
          if (a8 < 0)
          {
            a6 += a8;
            a8 = -a8;
          }
          v90[0] = a3;
          v90[1] = a4;
          v86 = a2;
          v24 = *(_QWORD *)((char *)a2 + 4);
          v25 = a5 & ~(a5 >> 31);
          if ((int)v24 >= a5 + a7)
            v26 = a5 + a7;
          else
            v26 = v24;
          v27 = HIDWORD(v24);
          if (SHIDWORD(v24) >= a6 + a8)
            v28 = a6 + a8;
          else
            v28 = HIDWORD(v24);
          if (v25 >= v26 || (v29 = a6 & ~(a6 >> 31), v29 >= v28))
          {
            v25 = 0;
            v29 = 0;
            v26 = 0;
            v28 = 0;
          }
          v30 = *(float *)(v17 + 16);
          if (v30 >= 2147500000.0)
          {
            v31 = 0x7FFFFFFF;
          }
          else if (v30 <= -2147500000.0)
          {
            v31 = 0x80000000;
          }
          else
          {
            v31 = (int)v30;
          }
          v32 = v25 + a3;
          v33 = *(float *)(v17 + 20);
          if (v33 >= 2147500000.0)
          {
            v34 = 0x7FFFFFFF;
          }
          else if (v33 <= -2147500000.0)
          {
            v34 = 0x80000000;
          }
          else
          {
            v34 = (int)v33;
          }
          v35 = v32 & ~(v32 >> 31);
          v36 = v26 + a3;
          if (v31 < v36)
            v36 = v31;
          v37 = v28 + a4;
          if (v34 < v37)
            v37 = v34;
          if (v35 >= v36 || (v38 = (v29 + a4) & ~((v29 + a4) >> 31), (int)v38 >= v37))
          {
            v35 = 0;
            v38 = 0;
            v36 = 0;
            v37 = 0;
          }
          v39 = (v36 - v35);
          v40 = (v37 - v38);
          v41 = v39 | (v40 << 32);
          v42 = v35 | (unint64_t)(v38 << 32);
          if ((int)v39 >= 1 && (int)v40 >= 1)
          {
            v43 = v38 - a4;
            v44 = (v35 - a3) & ~((v35 - a3) >> 31);
            v45 = v39 + v35 - a3;
            if ((int)v24 < v45)
              v45 = v24;
            v46 = v40 + v43;
            if (SHIDWORD(v24) < (int)v40 + v43)
              v46 = HIDWORD(v24);
            if (v44 >= v45 || (v47 = v43 & ~(v43 >> 31), (int)v47 >= v46))
            {
              v44 = 0;
              v47 = 0;
              v45 = 0;
              v46 = 0;
            }
            v42 = v44 | (unint64_t)(v47 << 32);
            v41 = (v45 - v44) | ((unint64_t)(v46 - v47) << 32);
          }
          v48 = 0;
          v89[0] = v42;
          v89[1] = v41;
          if ((int)v41 < 1 || SHIDWORD(v41) < 1)
          {
LABEL_109:
            v87.f32[0] = (float)v35;
            v87.f32[1] = (float)(int)v38;
            v87.f32[2] = (float)(int)v39;
            v87.f32[3] = (float)(int)v40;
            v88 = 1;
            this = (WebCore::DestinationColorSpace *)WebCore::CanvasRenderingContext2DBase::didDraw(v15, &v87, v48);
            goto LABEL_110;
          }
          if (a3 || a4 || v42 || v24 != v41 || *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8) != v24)
            goto LABEL_134;
          v102 = v24;
          if ((v24 & 0x80000000) == 0)
            v49 = v24;
          else
            v49 = -(int)v24;
          if ((v24 & 0x8000000000000000) != 0)
            LODWORD(v27) = -HIDWORD(v24);
          v50 = v27 * (unint64_t)v49;
          if ((v50 & 0xFFFFFFFF00000000) != 0)
          {
            __break(0xC471u);
            return this;
          }
          if (v50 > 0xE10)
            goto LABEL_134;
          v51 = *((unsigned __int8 *)v86 + 24);
          if (v51 != *(unsigned __int8 *)(v15 + 802))
            goto LABEL_134;
          v52 = MEMORY[0x1E0CC10F8];
          if (*((_BYTE *)v86 + 24))
          {
            if (v51 == 1)
              v85 = WebCore::DestinationColorSpace::DisplayP3(this);
            else
              v85 = WebCore::DestinationColorSpace::SRGB(this);
            v54 = (const void *)*v85;
            if (*v85)
            {
LABEL_69:
              CFRetain(v54);
              LODWORD(v24) = v102;
              v100 = 0;
              v101 = v54;
              CFRetain(v54);
              v55 = 0;
              goto LABEL_70;
            }
          }
          else
          {
            v53 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
            if (v53 != -1)
            {
              v95 = &v100;
              v91 = &v95;
              std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v91, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
            }
            v54 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
            if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
              goto LABEL_69;
            LODWORD(v24) = v102;
          }
          v54 = 0;
          v100 = 0;
          v101 = 0;
          v55 = 1;
LABEL_70:
          WebCore::ByteArrayPixelBuffer::tryCreate((JSC::ArrayBuffer *)&v100, &v102, &v99);
          if (!v99)
          {
            v73 = 0;
            goto LABEL_100;
          }
          v56 = 4 * v24;
          LOWORD(v95) = 1;
          v96 = v54;
          if ((v55 & 1) == 0)
            CFRetain(v54);
          v97 = v56;
          v57 = *((_QWORD *)v86 + 2);
          v58 = *(_QWORD *)(v57 + 32);
          if (v58)
          {
            v59 = *(_QWORD *)(v58 + 16);
            if (v59)
            {
              v60 = *(_QWORD *)(v52 + 56);
              if (!v60 || !*(_BYTE *)(v52 + 34) && *MEMORY[0x1E0CC10F0])
              {
                v61 = *(_QWORD *)(v57 + 24);
                goto LABEL_81;
              }
              if ((v59 & 0x3FFFFFFFFLL) + v60)
              {
                v61 = *(_QWORD *)(v57 + 24);
                if (v61 && (*(_BYTE *)(v52 + 34) || !*MEMORY[0x1E0CC10F0]))
                  v61 = (v61 & 0x3FFFFFFFFLL) + v60;
LABEL_81:
                v98 = v61;
                LOWORD(v91) = v100;
                cf = v101;
                if (v101)
                  CFRetain(v101);
                v93 = v56;
                v62 = v99;
                v63 = *(_QWORD *)(v99 + 56);
                v64 = *(_QWORD *)(v63 + 32);
                if (v64)
                {
                  v65 = *(_QWORD *)(v64 + 16);
                  if (v65)
                  {
                    v66 = *(_QWORD *)(v52 + 56);
                    if (!v66 || !*(_BYTE *)(v52 + 34) && *MEMORY[0x1E0CC10F0])
                    {
                      v67 = *(_QWORD *)(v63 + 24);
                      goto LABEL_91;
                    }
                    if ((v65 & 0x3FFFFFFFFLL) + v66)
                    {
                      v67 = *(_QWORD *)(v63 + 24);
                      if (v67 && (*(_BYTE *)(v52 + 34) || !*MEMORY[0x1E0CC10F0]))
                        v67 = (v67 & 0x3FFFFFFFFLL) + v66;
                      goto LABEL_91;
                    }
                  }
                }
                v67 = 0;
LABEL_91:
                v94 = v67;
                WebCore::convertImagePixels((unsigned __int8 *)&v95, (unsigned __int8 *)&v91, (int *)&v102);
                v68 = *(unsigned int *)(v15 + 792);
                if ((_DWORD)v68 != -1)
                  ((void (*)(_BYTE *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore28CanvasRenderingContext2DBase25CachedContentsTransparentENS7_21CachedContentsUnknownENS7_23CachedContentsImageDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSD_EEEDcOSE_DpOT0____fmatrix[v68])(v103, v15 + 720);
                *(_DWORD *)(v15 + 792) = -1;
                ++*(_DWORD *)(v62 + 8);
                *(_QWORD *)(v15 + 720) = v62;
                v69 = (_QWORD *)WTF::fastMalloc((WTF *)0x20);
                *v69 = off_1E33DC910;
                v69[1] = WebCore::CanvasRenderingContext2DBase::evictCachedImageData;
                v69[2] = 0;
                v69[3] = v15;
                *(_QWORD *)(v15 + 728) = off_1E3407128;
                StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
                *(_OWORD *)(v15 + 736) = 0u;
                *(_OWORD *)(v15 + 752) = 0u;
                v71 = *(unsigned int **)(StatusReg + 736);
                if (!v71)
                  v71 = (unsigned int *)WTF::Thread::initializeCurrentTLS(0);
                do
                  v72 = __ldaxr(v71);
                while (__stlxr(v72 + 1, v71));
                *(_QWORD *)(v15 + 768) = v71;
                *(_QWORD *)(v15 + 728) = off_1E33DC988;
                *(_QWORD *)(v15 + 776) = v69;
                *(_QWORD *)(v15 + 784) = 0x4014000000000000;
                *(_DWORD *)(v15 + 792) = 2;
                v73 = (__int16 *)v99;
                v74 = cf;
                cf = 0;
                if (v74)
                  CFRelease(v74);
                v75 = v96;
                v96 = 0;
                if (v75)
                  CFRelease(v75);
LABEL_100:
                v76 = v101;
                v101 = 0;
                if (v76)
                  CFRelease(v76);
                if ((v55 & 1) == 0)
                  CFRelease(v54);
                if (v73)
                {
                  v48 = 16;
                  goto LABEL_106;
                }
LABEL_134:
                WebCore::ImageData::pixelBuffer(v86, &v95);
                v48 = 0;
                v73 = v95;
LABEL_106:
                (*(void (**)(uint64_t, __int16 *, _QWORD *, _DWORD *, _QWORD))(*(_QWORD *)v17 + 96))(v17, v73, v89, v90, 0);
                if (v73)
                {
                  if (*((_DWORD *)v73 + 2) == 1)
                    (*(void (**)(__int16 *))(*(_QWORD *)v73 + 8))(v73);
                  else
                    --*((_DWORD *)v73 + 2);
                }
                goto LABEL_109;
              }
            }
          }
          v61 = 0;
          goto LABEL_81;
        }
      }
      else
      {
        __clrex();
      }
      this = (WebCore::DestinationColorSpace *)WTF::Lock::unlockSlow((WTF::Lock *)v18);
      goto LABEL_12;
    }
    this = (WebCore::DestinationColorSpace *)MEMORY[0x19AEA534C](v18);
    goto LABEL_7;
  }
  return this;
}

WTF::StringImpl *WebCore::CanvasRenderingContext2DBase::drawText(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, char a5, double a6, double a7)
{
  WTF::StringImpl *result;
  unsigned int v15;
  int v16;
  WTF::StringImpl *v17;
  char v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  int v21;
  WTF::StringImpl *v22;
  int v23;
  char v24;
  uint64_t v25;
  int v26;
  char v27;
  char v28;
  WTF::StringImpl *v29;

  result = (WTF::StringImpl *)WebCore::CanvasRenderingContext2DBase::canDrawText(a1, a3, a4, a5, a6, a7);
  if ((_DWORD)result)
  {
    result = (WTF::StringImpl *)WebCore::CanvasRenderingContext2DBase::normalizeSpaces(a2, &v29);
    v15 = *(_DWORD *)(a1 + 132);
    if (v15)
    {
      v16 = *(_DWORD *)(*(_QWORD *)(a1 + 120) + 560 * v15 - 352);
      v21 = 0;
      v17 = v29;
      if (v29)
        *(_DWORD *)v29 += 2;
      v22 = v17;
      v23 = 0;
      v24 = 1;
      v25 = 0x3F80000000000000;
      v26 = 0;
      v27 = 4;
      if (v16 == 1)
        v18 = 10;
      else
        v18 = 8;
      v28 = v18;
      WebCore::CanvasRenderingContext2DBase::drawTextUnchecked(a1, (uint64_t)&v21, a3, a4, a5, a6, a7);
      v20 = v22;
      v22 = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v19);
        else
          *(_DWORD *)v20 -= 2;
      }
      result = v29;
      v29 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v19);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      __break(0xC471u);
    }
  }
  return result;
}

uint64_t std::optional<WebCore::GraphicsDropShadow>::~optional(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  BOOL v7;

  v2 = a1;
  if (*(_BYTE *)(a1 + 32))
  {
    v3 = *(_QWORD *)(a1 + 16);
    if ((v3 & 0x8000000000000) != 0)
    {
      v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
      do
      {
        v6 = __ldaxr(v5);
        v7 = --v6 == 0;
      }
      while (__stlxr(v6, v5));
      v2 = a1;
      if (v7)
      {
        atomic_store(1u, v5);
        WTF::fastFree((WTF *)v5, a2);
        return a1;
      }
    }
  }
  return v2;
}

uint64_t *WebCore::CanvasRenderingContext2DBase::measureTextInternal@<X0>(WebCore::CanvasRenderingContext2DBase *this@<X0>, const WTF::String *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *result;
  unsigned int v6;
  int v7;
  WTF::StringImpl *v8;
  char v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  int v14;
  char v15;
  uint64_t v16;
  int v17;
  char v18;
  char v19;
  uint64_t *v20;

  result = WebCore::CanvasRenderingContext2DBase::normalizeSpaces((uint64_t *)a2, &v20);
  v6 = *((_DWORD *)this + 33);
  if (v6)
  {
    v7 = *(_DWORD *)(*((_QWORD *)this + 15) + 560 * v6 - 352);
    v12 = 0;
    v8 = (WTF::StringImpl *)v20;
    if (v20)
      *(_DWORD *)v20 += 2;
    v13 = v8;
    v14 = 0;
    v15 = 1;
    v16 = 0x3F80000000000000;
    v17 = 0;
    v18 = 4;
    if (v7 == 1)
      v9 = 10;
    else
      v9 = 8;
    v19 = v9;
    WebCore::CanvasRenderingContext2DBase::measureTextInternal(this, (const WebCore::TextRun *)&v12, a3);
    v11 = v13;
    v13 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    result = v20;
    v20 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (uint64_t *)WTF::StringImpl::destroy((WTF::StringImpl *)result, v10);
      else
        *(_DWORD *)result -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::CanvasRenderingContext2DBase::willReadFrequently(WebCore::CanvasRenderingContext2DBase *this)
{
  return *((unsigned __int8 *)this + 801);
}

uint64_t WebCore::CanvasRenderingContext2DBase::adjustImageBufferOptionsForTesting(uint64_t a1, uint64_t a2)
{
  int v3;
  unsigned int v4;

  if (*(_BYTE *)(a1 + 808))
  {
    v3 = *(_DWORD *)(a1 + 804);
    v4 = a2 & 0xFFFFFFFC | 2;
    if (v3)
      v4 = a2;
    if (v3 == 1)
      return a2 | 3;
    else
      return v4;
  }
  return a2;
}

WTF::StringImpl *WebCore::CanvasStyleColorResolutionDelegate::currentColor@<X0>(WTF::StringImpl *this@<X0>, WTF::StringBuilder *a2@<X2>, WTF::String *a3@<X3>, uint64_t *a4@<X8>, __n128 a5@<Q0>)
{
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  WebCore::CSSParserContext *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  WebCore::Node *v22;
  uint64_t v23;
  uint64_t v24;
  const WebCore::Document *v25;
  WebCore::CSSParserContext *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl **v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  WTF::StringImpl *v34;
  __int16 v35;
  uint64_t v36;
  int v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  WebCore::Node *v51;
  char v52;
  uint64_t v53;
  int v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  char v66;

  v6 = *((_QWORD *)this + 1);
  if ((*(_BYTE *)(v6 + 22) & 8) == 0
    || (v7 = *(_QWORD *)(v6 + 104)) == 0
    || (v8 = this, (this = *(WTF::StringImpl **)(v7 + 8)) == 0))
  {
    *a4 = 0x11040000000000FFLL;
    return this;
  }
  WebCore::StyleProperties::serializeLonghandValue((uint64_t)this, 5, a2, a3, (WebCore *)&v34, a5);
  v15 = *((_QWORD *)v8 + 1);
  v16 = *(WebCore::CSSParserContext **)(v15 + 264);
  if (!v16)
  {
    v24 = v15;
    v25 = *(const WebCore::Document **)(*(_QWORD *)(v15 + 40) + 8);
    v16 = (WebCore::CSSParserContext *)WTF::fastMalloc((WTF *)0x40);
    v26 = WebCore::CSSParserContext::CSSParserContext(v16, v25);
    v28 = *(WTF::StringImpl ***)(v24 + 264);
    *(_QWORD *)(v24 + 264) = v26;
    if (v28)
    {
      v29 = v28[5];
      v28[5] = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v27);
        else
          *(_DWORD *)v29 -= 2;
      }
      v30 = *v28;
      *v28 = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v27);
        else
          *(_DWORD *)v30 -= 2;
      }
      WTF::fastFree((WTF *)v28, v27);
      v16 = *(WebCore::CSSParserContext **)(v24 + 264);
    }
  }
  if (v34)
  {
    v17 = (char *)*((_QWORD *)v34 + 1);
    v18 = *((unsigned int *)v34 + 1) | ((unint64_t)((*((_DWORD *)v34 + 4) >> 2) & 1) << 32);
  }
  else
  {
    v17 = 0;
    v18 = 0x100000000;
  }
  v19 = WebCore::CSSParserFastPaths::parseSimpleColor(v17, (const char *)v18, *((_BYTE *)v16 + 48) != 1, v9, v10, v11, v12, v13, v14);
  if (!BYTE4(v19))
  {
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v64 = 0;
    v65 = 0;
    v66 = 0;
    v53 = 0;
    v54 = 0;
    v35 = 1792;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 0;
    v52 = 0;
    WebCore::CSSUnresolvedColorResolutionContext::~CSSUnresolvedColorResolutionContext((WebCore::CSSUnresolvedColorResolutionContext *)&v53, v20);
    WebCore::CSSPropertyParserHelpers::parseColorRawSlow((unsigned int **)&v34, (uint64_t)v16, &v35, (uint64_t)&v36, &v53);
    if (v52)
    {
      v22 = v51;
      v51 = 0;
      if (v22)
      {
        if (*((_DWORD *)v22 + 6) == 2)
        {
          if ((*((_WORD *)v22 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v22, v21);
        }
        else
        {
          *((_DWORD *)v22 + 6) -= 2;
        }
      }
    }
    WebCore::CSSUnresolvedColorResolutionContext::~CSSUnresolvedColorResolutionContext((WebCore::CSSUnresolvedColorResolutionContext *)&v36, v21);
    v23 = v53;
    if ((v53 & 0x4000000000000) != 0)
      goto LABEL_13;
LABEL_16:
    *a4 = 0x11040000000000FFLL;
    if ((v23 & 0x8000000000000) != 0)
    {
      v31 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
      do
      {
        v32 = __ldaxr(v31);
        v33 = v32 - 1;
      }
      while (__stlxr(v33, v31));
      if (!v33)
      {
        atomic_store(1u, v31);
        WTF::fastFree((WTF *)v31, v20);
      }
    }
    goto LABEL_17;
  }
  v23 = bswap32(v19) | 0x1104000000000000;
  v53 = v23;
  if ((v23 & 0x4000000000000) == 0)
    goto LABEL_16;
LABEL_13:
  *a4 = v23;
LABEL_17:
  this = v34;
  v34 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, (WTF::StringImpl *)v20);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

WTF::StringImpl *WebCore::parseColor@<X0>(unsigned int **this@<X0>, const WTF::String *a2@<X1>, uint64_t *a3@<X8>)
{
  double v7;
  double v8;
  double v9;
  double v10;
  WTF::StringImpl *v11;
  double v12;
  double v13;
  unint64_t v14;
  unsigned int *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  __int16 v20;
  void *v21;
  WebCore::Node *v22;
  WTF::StringImpl *result;
  WTF::StringImpl *v24;
  __int128 v25;
  __int128 v26;
  WTF::StringImpl *v27;
  __int128 v28;
  __int128 v29;
  WTF::StringImpl *v30;
  uint64_t v31;
  __int16 v32;
  char *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  WebCore::Node *v49;
  char v50;
  char **v51;
  int v52;
  uint64_t v53;
  char v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;

  v24 = 0;
  WTF::URL::invalidate((WTF::URL *)&v24);
  v11 = v24;
  if (v24)
    *(_DWORD *)v24 += 2;
  v27 = v11;
  v12 = *(double *)&v25;
  v13 = *(double *)&v26;
  v28 = v25;
  v29 = v26;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v14 = atomic_load(&WebCore::StaticCSSValuePool::init(void)::onceKey);
  if (v14 != -1)
  {
    v33 = &v65;
    v51 = &v33;
    std::__call_once(&WebCore::StaticCSSValuePool::init(void)::onceKey, &v51, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::StaticCSSValuePool::init(void)::$_0 &&>>);
  }
  v15 = *this;
  if (*this)
  {
    v16 = (char *)*((_QWORD *)v15 + 1);
    v17 = v15[1] | ((unint64_t)((v15[4] >> 2) & 1) << 32);
  }
  else
  {
    v16 = 0;
    v17 = 0x100000000;
  }
  v18 = WebCore::CSSParserFastPaths::parseSimpleColor(v16, (const char *)v17, v31 != 1, v13, v12, v7, v8, v9, v10);
  if (BYTE4(v18))
  {
    *a3 = bswap32(v18) | 0x1104000000000000;
  }
  else
  {
    if (*((_BYTE *)a2 + 274))
      v20 = 3;
    else
      v20 = 7;
    v52 = 0;
    v51 = 0;
    v54 = 1;
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v64 = 0;
    LOWORD(v33) = v20 << 8;
    v34 = 0;
    v35 = 0;
    v36 = 0x11040000000000FFLL;
    v53 = 0;
    v37 = 1;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v50 = 0;
    WebCore::CSSUnresolvedColorResolutionContext::~CSSUnresolvedColorResolutionContext((WebCore::CSSUnresolvedColorResolutionContext *)&v51, v19);
    WebCore::CSSPropertyParserHelpers::parseColorRawSlow(this, (uint64_t)&v27, &v33, (uint64_t)&v34, a3);
    if (v50)
    {
      v22 = v49;
      v49 = 0;
      if (v22)
      {
        if (*((_DWORD *)v22 + 6) == 2)
        {
          if ((*((_WORD *)v22 + 15) & 0x400) == 0)
            WebCore::Node::removedLastRef(v22, v21);
        }
        else
        {
          *((_DWORD *)v22 + 6) -= 2;
        }
      }
    }
    WebCore::CSSUnresolvedColorResolutionContext::~CSSUnresolvedColorResolutionContext((WebCore::CSSUnresolvedColorResolutionContext *)&v34, v21);
  }
  if (v30)
  {
    if (*(_DWORD *)v30 == 2)
      WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v19);
    else
      *(_DWORD *)v30 -= 2;
  }
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, (WTF::StringImpl *)v19);
    else
      *(_DWORD *)v27 -= 2;
  }
  result = v24;
  v24 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v19);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::CanvasRenderingContext::isWebGPU(WebCore::CanvasRenderingContext *this)
{
  return 0;
}

uint64_t WebCore::CanvasRenderingContext::isGPUBased(WebCore::CanvasRenderingContext *this)
{
  return 0;
}

uint64_t WebCore::CanvasRenderingContext::compositingResultsNeedUpdating(WebCore::CanvasRenderingContext *this)
{
  return 0;
}

uint64_t WebCore::CanvasRenderingContext::needsPreparationForDisplay(WebCore::CanvasRenderingContext *this)
{
  return 0;
}

uint64_t WebCore::CanvasRenderingContext2DBase::is2dBase(WebCore::CanvasRenderingContext2DBase *this)
{
  return 1;
}

uint64_t WebCore::CanvasRenderingContext2D::is2d(WebCore::CanvasRenderingContext2D *this)
{
  return 1;
}

uint64_t WebCore::CanvasRenderingContext2DBase::hasInvertibleTransform(uint64_t this)
{
  unsigned int v1;

  v1 = *(_DWORD *)(this + 132);
  if (v1)
    return *(unsigned __int8 *)(*(_QWORD *)(this + 120) + 560 * v1 - 400);
  __break(0xC471u);
  return this;
}

uint64_t `non-virtual thunk to'WebCore::CanvasRenderingContext2DBase::hasInvertibleTransform(uint64_t this)
{
  unsigned int v1;

  v1 = *(_DWORD *)(this + 92);
  if (v1)
    return *(unsigned __int8 *)(*(_QWORD *)(this + 80) + 560 * v1 - 400);
  __break(0xC471u);
  return this;
}

void WebCore::CanvasRenderingContext2DBase::setFilterStringWithoutUpdatingStyle(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

void WebCore::CanvasRenderingContext2DBase::createFilter(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t WebCore::CanvasRenderingContext2DBase::calculateFilterOutsets(WebCore::CanvasRenderingContext2DBase *this, const WebCore::FloatRect *a2)
{
  return 0;
}

uint64_t WebCore::CanvasRenderingContext2DBase::fontProxy(WebCore::CanvasRenderingContext2DBase *this)
{
  return 0;
}

void WebCore::CanvasStyleColorResolutionDelegate::~CanvasStyleColorResolutionDelegate(WebCore::CanvasStyleColorResolutionDelegate *this, void *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
}

{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (*(_DWORD *)(v3 + 24) == 2)
    {
      if ((*(_WORD *)(v3 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v3, a2);
    }
    else
    {
      *(_DWORD *)(v3 + 24) -= 2;
    }
  }
  JUMPOUT(0x19AEA7644);
}

uint64_t WebCore::FontDescription::operator=(uint64_t a1, uint64_t *a2)
{
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  __int128 v15;

  v4 = *(WTF **)a1;
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(a1 + 8) = v5;
  LODWORD(v5) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 12) = v5;
  v6 = *(WTF **)(a1 + 16);
  if (v6)
  {
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    WTF::fastFree(v6, a2);
  }
  v7 = a2[2];
  a2[2] = 0;
  *(_QWORD *)(a1 + 16) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 6);
  *((_DWORD *)a2 + 6) = 0;
  *(_DWORD *)(a1 + 24) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 7);
  *((_DWORD *)a2 + 7) = 0;
  *(_DWORD *)(a1 + 28) = v7;
  WebCore::FontVariantAlternatesValues::operator=(a1 + 32, (WTF::StringImpl *)(a2 + 4));
  *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
  v9 = a2[14];
  a2[14] = 0;
  v10 = *(WTF::StringImpl **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = v9;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v8);
    else
      *(_DWORD *)v10 -= 2;
  }
  *(_QWORD *)(a1 + 120) = a2[15];
  v11 = a2[16];
  a2[16] = 0;
  v12 = *(WTF::StringImpl **)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v8);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = a2[17];
  a2[17] = 0;
  v14 = *(WTF::StringImpl **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v13;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v8);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = *((_OWORD *)a2 + 9);
  *(_QWORD *)(a1 + 159) = *(uint64_t *)((char *)a2 + 159);
  *(_OWORD *)(a1 + 144) = v15;
  return a1;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore28CanvasRenderingContext2DBase25CachedContentsTransparentENS9_21CachedContentsUnknownENS9_23CachedContentsImageDataEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SB_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  WebCore::TimerBase *v3;
  uint64_t v4;
  _DWORD *result;

  *(_QWORD *)(a2 + 8) = off_1E33DC988;
  v3 = (WebCore::TimerBase *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 56) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WebCore::TimerBase::~TimerBase(v3);
  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

void WebCore::DeferrableOneShotTimer::~DeferrableOneShotTimer(WebCore::DeferrableOneShotTimer *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E33DC988;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  WebCore::TimerBase::~TimerBase(this);
}

{
  uint64_t v2;
  WTF *v3;
  void *v4;

  *(_QWORD *)this = off_1E33DC988;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  WebCore::TimerBase::~TimerBase(this);
  WTF::fastFree(v3, v4);
}

uint64_t WebCore::DeferrableOneShotTimer::fired(WebCore::DeferrableOneShotTimer *this)
{
  uint64_t v2;
  double v3;
  double v4;

  v2 = *((_QWORD *)this + 4);
  if ((v2 & 0x2000000000000) == 0)
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 6) + 16))(*((_QWORD *)this + 6));
  v3 = *((double *)this + 7);
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = v2 & 0xFDFFFFFFFFFFFFLL;
  WTF::MonotonicTime::now(this);
  return WebCore::TimerBase::setNextFireTime((uint64_t)this, v3 + v4);
}

void WebCore::CanvasRenderingContext2DBase::State::~State(WebCore::CanvasRenderingContext2DBase::State *this, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  WTF *v7;
  WTF::StringImpl *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unsigned int **v15;
  unsigned int **v16;
  unsigned int *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  char v29;
  char **v30;
  char *v31;

  v3 = (WTF *)*((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v21 = *((_QWORD *)v3 + 5);
      v22 = *((_QWORD *)v3 + 2);
      v23 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
      if (v23 != -1)
      {
        v31 = &v29;
        v30 = &v31;
        std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v30, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v21 + 56))(v21, v22, &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
      v25 = *((_QWORD *)v3 + 5);
      *((_QWORD *)v3 + 5) = 0;
      if (v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      WTF::fastFree(v3, v24);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  WebCore::CanvasRenderingContext2DBase::FontProxy::~FontProxy((WebCore::CanvasRenderingContext2DBase::State *)((char *)this + 248), a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = *((unsigned int *)this + 59);
  if ((_DWORD)v6)
  {
    v15 = (unsigned int **)*((_QWORD *)this + 28);
    v16 = &v15[v6];
    do
    {
      v17 = *v15;
      *v15 = 0;
      if (v17)
      {
        v18 = v17 + 2;
        do
        {
          v19 = __ldaxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
        {
          atomic_store(1u, v17 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v17 + 8))(v17);
        }
      }
      ++v15;
    }
    while (v15 != v16);
  }
  v7 = (WTF *)*((_QWORD *)this + 28);
  if (v7)
  {
    *((_QWORD *)this + 28) = 0;
    *((_DWORD *)this + 58) = 0;
    WTF::fastFree(v7, v4);
  }
  v8 = (WTF::StringImpl *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v4);
    else
      *(_DWORD *)v8 -= 2;
  }
  v9 = (WTF *)*((_QWORD *)this + 21);
  if (v9)
  {
    *((_QWORD *)this + 21) = 0;
    *((_DWORD *)this + 44) = 0;
    WTF::fastFree(v9, v4);
  }
  v10 = *((_QWORD *)this + 11);
  if ((v10 & 0x8000000000000) != 0)
  {
    v26 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
    do
    {
      v27 = __ldaxr(v26);
      v28 = v27 - 1;
    }
    while (__stlxr(v28, v26));
    if (!v28)
    {
      atomic_store(1u, v26);
      WTF::fastFree((WTF *)v26, v4);
    }
  }
  v11 = *((unsigned int *)this + 10);
  if ((_DWORD)v11 != -1)
    ((void (*)(char **, char *))off_1E33DC6C8[v11])(&v31, (char *)this + 32);
  *((_DWORD *)this + 10) = -1;
  v12 = *((unsigned int *)this + 6);
  if ((_DWORD)v12 != -1)
    ((void (*)(char **, char *))off_1E33DC6C8[v12])(&v31, (char *)this + 16);
  *((_DWORD *)this + 6) = -1;
  v13 = (WTF::StringImpl *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v4);
    else
      *(_DWORD *)v13 -= 2;
  }
  v14 = *(WTF::StringImpl **)this;
  *(_QWORD *)this = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v4);
    else
      *(_DWORD *)v14 -= 2;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore5ColorEN3WTF3RefINS8_14CanvasGradientENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEENSB_INS8_13CanvasPatternENSD_ISI_EENSF_ISI_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SH_SL_EEEEEEDcSP_DpT0_(uint64_t a1, _QWORD *a2)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  if ((*a2 & 0x8000000000000) != 0)
  {
    v2 = (unsigned int *)(*a2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v3 = __ldaxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      atomic_store(1u, v2);
      WTF::fastFree((WTF *)v2, a2);
    }
  }
}

WebCore::CanvasGradient *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore5ColorEN3WTF3RefINS8_14CanvasGradientENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEENSB_INS8_13CanvasPatternENSD_ISI_EENSF_ISI_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SH_SL_EEEEEEDcSP_DpT0_(uint64_t a1, WebCore::CanvasGradient **a2)
{
  WebCore::CanvasGradient *result;
  WTF *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::CanvasGradient::~CanvasGradient(result, a2);
      return (WebCore::CanvasGradient *)WTF::fastFree(v3, v4);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore5ColorEN3WTF3RefINS8_14CanvasGradientENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEENSB_INS8_13CanvasPatternENSD_ISI_EENSF_ISI_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSN_1EJS9_SH_SL_EEEEEEDcSP_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  v2 = *a2;
  *a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = *((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 1)
        {
          if (*(_BYTE *)(v3 + 40))
          {
            v5 = *(unsigned int *)(v3 + 32);
            if ((_DWORD)v5 != -1)
              ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v5])(&v7, v3 + 24);
            *(_DWORD *)(v3 + 32) = -1;
          }
          v6 = *(unsigned int *)(v3 + 16);
          if ((_DWORD)v6 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v6])(&v8, v3 + 8);
          *(_DWORD *)(v3 + 16) = -1;
          WTF::fastFree((WTF *)v3, a2);
        }
        else
        {
          --*(_DWORD *)v3;
        }
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return result;
}

float _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore5ColorEN3WTF3RefINS8_14CanvasGradientENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEENSB_INS8_13CanvasPatternENSD_ISI_EENSF_ISI_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJS9_SH_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t *a1, unint64_t *a2, unint64_t *a3, float result)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  char v14;

  v5 = *a1;
  v6 = *(unsigned int *)(*a1 + 8);
  if ((_DWORD)v6 == -1)
    goto LABEL_10;
  if ((_DWORD)v6)
  {
    ((void (*)(char *, uint64_t))off_1E33DC6C8[v6])(&v14, v5);
LABEL_10:
    *(_QWORD *)v5 = 0;
    if (*a3)
    {
      *(_QWORD *)v5 = *a3;
      *a3 = 0;
    }
    *(_DWORD *)(v5 + 8) = 0;
    return result;
  }
  v7 = *a2;
  v8 = *a3;
  if ((*a2 & 0x8000000000000) != 0)
  {
    if ((v8 & 0x8000000000000) == 0
      || (result = *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 0x10),
          *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 4) != *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 4))
      || *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 8) != *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 8)
      || *(float *)((v7 & 0xFFFFFFFFFFFFLL) + 0xC) != *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 0xC)
      || result != *(float *)((v8 & 0xFFFFFFFFFFFFLL) + 0x10)
      || HIBYTE(v7) != HIBYTE(v8)
      || BYTE6(v7) != BYTE6(v8))
    {
      v10 = a2;
      v11 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFLL);
      do
      {
        v12 = __ldaxr(v11);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v11));
      if (!v13)
      {
        atomic_store(1u, v11);
        WTF::fastFree((WTF *)v11, a2);
        a2 = v10;
      }
      goto LABEL_8;
    }
  }
  else if (v7 != v8 || (v8 & 0x8000000000000) != 0)
  {
LABEL_8:
    *a2 = *a3;
    *a3 = 0;
  }
  return result;
}

WebCore::CanvasGradient *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore5ColorEN3WTF3RefINS8_14CanvasGradientENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEENSB_INS8_13CanvasPatternENSD_ISI_EENSF_ISI_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJS9_SH_SL_EEEOS10_EEEDcSS_DpT0_(WebCore::CanvasGradient *result, WebCore::CanvasGradient **a2, WebCore::CanvasGradient **a3)
{
  uint64_t v4;
  uint64_t v5;
  WebCore::CanvasGradient *v6;
  WebCore::CanvasGradient *v7;
  WTF *v8;
  void *v9;
  char v10;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = (WebCore::CanvasGradient *)((uint64_t (*)(char *, uint64_t))off_1E33DC6C8[v5])(&v10, v4);
LABEL_7:
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::CanvasGradient::~CanvasGradient(result, a2);
      return (WebCore::CanvasGradient *)WTF::fastFree(v8, v9);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore5ColorEN3WTF3RefINS8_14CanvasGradientENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEENSB_INS8_13CanvasPatternENSD_ISI_EENSF_ISI_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISM_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSQ_1EJS9_SH_SL_EEEOS10_EEEDcSS_DpT0_(uint64_t result, WTF **a2, WTF **a3)
{
  uint64_t v4;
  uint64_t v5;
  WTF *v6;
  WTF *v7;
  WTF *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 2)
  {
    result = ((uint64_t (*)(char *, uint64_t))off_1E33DC6C8[v5])(&v12, v4);
LABEL_7:
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v8;
    *(_DWORD *)(v4 + 8) = 2;
    return result;
  }
  v6 = *a3;
  *a3 = 0;
  v7 = *a2;
  *a2 = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      v9 = *((_QWORD *)v7 + 1);
      *((_QWORD *)v7 + 1) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          if (*(_BYTE *)(v9 + 40))
          {
            v10 = *(unsigned int *)(v9 + 32);
            if ((_DWORD)v10 != -1)
              ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v10])(&v13, v9 + 24);
            *(_DWORD *)(v9 + 32) = -1;
          }
          v11 = *(unsigned int *)(v9 + 16);
          if ((_DWORD)v11 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v11])(&v14, v9 + 8);
          *(_DWORD *)(v9 + 16) = -1;
          WTF::fastFree((WTF *)v9, a2);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
      return WTF::fastFree(v7, a2);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore5ColorEN3WTF3RefINS8_14CanvasGradientENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEENSB_INS8_13CanvasPatternENSD_ISI_EENSF_ISI_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRST_OT0_E_JRNS0_6__baseILSQ_1EJS9_SH_SL_EEEOS11_EEEDcST_DpT0_(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = 0;
  if (*a3)
  {
    *a2 = *a3;
    *a3 = 0;
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore5ColorEN3WTF3RefINS8_14CanvasGradientENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEENSB_INS8_13CanvasPatternENSD_ISI_EENSF_ISI_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRST_OT0_E_JRNS0_6__baseILSQ_1EJS9_SH_SL_EEEOS11_EEEDcST_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore5ColorEN3WTF3RefINS8_14CanvasGradientENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEENSB_INS8_13CanvasPatternENSD_ISI_EENSF_ISI_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRST_OT0_E_JRNS0_6__baseILSQ_1EJS9_SH_SL_EEEOS11_EEEDcST_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11CanvasStyle5visitIJZNSA_L14toStyleVariantERKSB_E3__0ZNSA_L14toStyleVariantESE_E3__1ZNSA_L14toStyleVariantESE_E3__2EEEDcDpOT_EUlRKNSA_5ColorEE_JZNKSC_IJSF_SG_SH_EEESI_SL_EUlRKNS8_3RefINSA_14CanvasGradientENS8_12RawPtrTraitsISR_EENS8_21DefaultRefDerefTraitsISR_EEEEE_ZNKSC_IJSF_SG_SH_EEESI_SL_EUlRKNSQ_INSA_13CanvasPatternENSS_IS10_EENSU_IS10_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSM_SW_S13_EEEEEEDcT_DpT0_@<X0>(WebCore *this@<X1>, uint64_t a2@<X8>)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;
  int v5;
  WTF::StringImpl *v6;

  WebCore::serializationForHTML(this, &v6);
  result = v6;
  if (v6)
  {
    v5 = *(_DWORD *)v6;
    *(_DWORD *)v6 += 2;
    *(_QWORD *)a2 = result;
    *(_DWORD *)(a2 + 8) = 0;
    v6 = 0;
    if (v5)
      *(_DWORD *)result = v5;
    else
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v3);
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11CanvasStyle5visitIJZNSA_L14toStyleVariantERKSB_E3__0ZNSA_L14toStyleVariantESE_E3__1ZNSA_L14toStyleVariantESE_E3__2EEEDcDpOT_EUlRKNSA_5ColorEE_JZNKSC_IJSF_SG_SH_EEESI_SL_EUlRKNS8_3RefINSA_14CanvasGradientENS8_12RawPtrTraitsISR_EENS8_21DefaultRefDerefTraitsISR_EEEEE_ZNKSC_IJSF_SG_SH_EEESI_SL_EUlRKNSQ_INSA_13CanvasPatternENSS_IS10_EENSU_IS10_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSM_SW_S13_EEEEEEDcT_DpT0_(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  if (*a1)
    ++*v2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IONS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore11CanvasStyle5visitIJZNSA_L14toStyleVariantERKSB_E3__0ZNSA_L14toStyleVariantESE_E3__1ZNSA_L14toStyleVariantESE_E3__2EEEDcDpOT_EUlRKNSA_5ColorEE_JZNKSC_IJSF_SG_SH_EEESI_SL_EUlRKNS8_3RefINSA_14CanvasGradientENS8_12RawPtrTraitsISR_EENS8_21DefaultRefDerefTraitsISR_EEEEE_ZNKSC_IJSF_SG_SH_EEESI_SL_EUlRKNSQ_INSA_13CanvasPatternENSS_IS10_EENSU_IS10_EEEEE_EEEEEJRKNS0_6__baseILNS0_6_TraitE1EJSM_SW_S13_EEEEEEDcT_DpT0_(_DWORD **a1@<X1>, uint64_t a2@<X8>)
{
  _DWORD *v2;

  v2 = *a1;
  if (*a1)
    ++*v2;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 2;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ImageBufferENSC_ISH_EENSE_ISH_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSG_SK_SP_EEEEEEDcST_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v2 = *a2;
  *a2 = 0;
  if (!v2)
    return result;
  v3 = *(_QWORD *)(v2 + 8);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v3);
LABEL_6:
  v6 = *(_QWORD *)(v3 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v3 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v11 = *(_QWORD *)(v3 + 16);
    v8 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    v9 = v11 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v3);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (v7)
      return result;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
    goto LABEL_13;
  if (v7)
    return result;
LABEL_14:
  if (v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    return WTF::fastFree((WTF *)v3, a2);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ImageBufferENSC_ISH_EENSE_ISH_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSR_1EJSG_SK_SP_EEEEEEDcST_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v2 = *a2;
  *a2 = 0;
  if (!v2)
    return result;
  v3 = *(_QWORD *)(v2 + 8);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_7;
  }
  result = MEMORY[0x19AEA534C](v3);
LABEL_7:
  v6 = *(_QWORD *)(v3 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v3 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v11 = *(_QWORD *)(v3 + 16);
    v8 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    v9 = v11 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v3);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
LABEL_13:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v7)
  {
    if (v8)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (!v9)
      return WTF::fastFree((WTF *)v3, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS9_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSJ_1EJS8_SA_SE_EEERKSV_EEEDcSN_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 56);
  if ((_DWORD)v2 != -1)
  {
    if (!(_DWORD)v2)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_1[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 56) = 0;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS9_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSJ_1EJS8_SA_SE_EEERKSV_EEEDcSN_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char v11;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 56);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
    {
      result = *(__n128 *)a3;
      v7 = *(_OWORD *)(a3 + 16);
      v8 = *(_OWORD *)(a3 + 32);
      *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 16) = v7;
      *(_OWORD *)(a2 + 32) = v8;
      *(__n128 *)a2 = result;
      return result;
    }
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_1[v5])(&v11, v4);
  }
  *(_DWORD *)(v4 + 56) = -1;
  result = *(__n128 *)a3;
  v9 = *(_OWORD *)(a3 + 16);
  v10 = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(v4 + 48) = *(_QWORD *)(a3 + 48);
  *(_OWORD *)(v4 + 16) = v9;
  *(_OWORD *)(v4 + 32) = v10;
  *(__n128 *)v4 = result;
  *(_DWORD *)(v4 + 56) = 1;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS9_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISF_LNS0_6_TraitE1EEEEEvOT_EUlRSN_OT0_E_JRNS0_6__baseILSJ_1EJS8_SA_SE_EEERKSV_EEEDcSN_DpT0_(unsigned int *result, unsigned int **a2, unsigned int **a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  char v15;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 56);
  if ((_DWORD)v5 == -1)
    goto LABEL_11;
  if ((_DWORD)v5 != 2)
  {
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_1[v5])(&v15, v4);
LABEL_11:
    *(_DWORD *)(v4 + 56) = -1;
    v12 = *a3;
    v13 = *a3 + 2;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 + 1, v13));
    *(_QWORD *)v4 = v12;
    *(_DWORD *)(v4 + 56) = 2;
    return result;
  }
  v6 = *a3;
  v7 = *a3 + 2;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 1, v7));
  result = *a2;
  *a2 = v6;
  if (result)
  {
    v9 = result + 2;
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, result + 2);
      return (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  return result;
}

uint64_t *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasPath::roundRect(float,float,float,float,std::span<std::variant<double,WebCore::DOMPointInit> const,18446744073709551615ul>)::$_0,WebCore::CanvasPath::roundRect(float,float,float,float,std::span<std::variant<double,WebCore::DOMPointInit> const,18446744073709551615ul>)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,double,WebCore::DOMPointInit> const&>@<X0>(uint64_t *result@<X0>, double *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *result;
  v5 = *a2;
  if ((*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    **(_BYTE **)(v4 + 24) = 1;
    a3[1] = 0;
    a3[2] = 0;
    *a3 = 0;
  }
  else if (v5 >= 0.0)
  {
    v6 = *(_QWORD *)(v4 + 16);
    v7 = v5;
    *(float *)&v11 = v7;
    *((float *)&v11 + 1) = v7;
    v8 = *(unsigned int *)(v6 + 12);
    if ((_DWORD)v8 == *(_DWORD *)(v6 + 8))
    {
      result = (uint64_t *)WTF::Vector<WebCore::FloatPoint,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6, (void *)(v8 + 1), (unint64_t)&v11);
      v8 = *(unsigned int *)(v6 + 12);
      v9 = *(_QWORD *)v6;
      v10 = *result;
    }
    else
    {
      v9 = *(_QWORD *)v6;
      v10 = v11;
    }
    *(_QWORD *)(v9 + 8 * v8) = v10;
    ++*(_DWORD *)(v6 + 12);
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    result = (uint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
    *(_BYTE *)a3 = 32;
    *((_BYTE *)a3 + 16) = 1;
  }
  return result;
}

unint64_t *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasPath::roundRect(float,float,float,float,std::span<std::variant<double,WebCore::DOMPointInit> const,18446744073709551615ul>)::$_0,WebCore::CanvasPath::roundRect(float,float,float,float,std::span<std::variant<double,WebCore::DOMPointInit> const,18446744073709551615ul>)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,double,WebCore::DOMPointInit> const&>@<X0>(unint64_t *result@<X0>, double *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v4;
  double v5;
  double v6;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v4 = *result;
  v5 = *a2;
  v6 = a2[1];
  if ((*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && ((_QWORD)a2[1] & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    if (v5 < 0.0 || v6 < 0.0)
    {
      result = (unint64_t *)WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_BYTE *)a3 = 32;
      *(_BYTE *)(a3 + 16) = 1;
    }
    else
    {
      v8 = *(_QWORD *)v4;
      *(float *)&v9 = v5;
      *(float *)&v10 = v6;
      v14 = __PAIR64__(v10, v9);
      v11 = *(unsigned int *)(v8 + 12);
      if ((_DWORD)v11 == *(_DWORD *)(v8 + 8))
      {
        result = (unint64_t *)WTF::Vector<WebCore::FloatPoint,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v8, (void *)(v11 + 1), (unint64_t)&v14);
        v11 = *(unsigned int *)(v8 + 12);
        v12 = *(_QWORD *)v8;
        v13 = *result;
      }
      else
      {
        v12 = *(_QWORD *)v8;
        v13 = v14;
      }
      *(_QWORD *)(v12 + 8 * v11) = v13;
      ++*(_DWORD *)(v8 + 12);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
  }
  else
  {
    **(_BYTE **)(v4 + 8) = 1;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
  }
  return result;
}

char *WTF::Vector<WebCore::FloatPoint,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, void *a2, unint64_t a3)
{
  unint64_t v3;
  WTF *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  WTF *v21;
  uint64_t v22;

  v3 = a3;
  v5 = *(WTF **)a1;
  if (*(_QWORD *)a1 <= a3)
  {
    v6 = *(unsigned int *)(a1 + 12);
    if ((unint64_t)v5 + 8 * v6 > a3)
    {
      v7 = *(unsigned int *)(a1 + 8);
      v8 = v7 + (v7 >> 2);
      if (v8 >= 0x10)
        v9 = v8 + 1;
      else
        v9 = 16;
      if (v9 <= (unint64_t)a2)
        v10 = (unint64_t)a2;
      else
        v10 = v9;
      if (v10 <= v7)
      {
        v21 = *(WTF **)a1;
        return (char *)v21 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
      if (v10 < 5)
      {
        v11 = a1 + 16;
        *(_QWORD *)a1 = a1 + 16;
        *(_DWORD *)(a1 + 8) = 4;
        goto LABEL_34;
      }
      if (!(v10 >> 29))
      {
        v11 = WTF::fastMalloc((WTF *)(8 * v10));
        *(_DWORD *)(a1 + 8) = v10;
        *(_QWORD *)a1 = v11;
LABEL_34:
        v22 = 0;
        do
        {
          *(_QWORD *)(v11 + v22) = *(_QWORD *)((char *)v5 + v22);
          v22 += 8;
        }
        while (8 * v6 != v22);
        v21 = *(WTF **)a1;
        if ((WTF *)(a1 + 16) != v5 && v5)
        {
          if (v21 == v5)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
          }
          WTF::fastFree(v5, a2);
          v21 = *(WTF **)a1;
        }
        return (char *)v21 + 8 * ((uint64_t)(v3 - (_QWORD)v5) >> 3);
      }
LABEL_43:
      __break(0xC471u);
      JUMPOUT(0x195CEE818);
    }
  }
  v12 = *(unsigned int *)(a1 + 8);
  v13 = v12 + (v12 >> 2);
  if (v13 >= 0x10)
    v14 = v13 + 1;
  else
    v14 = 16;
  if (v14 <= (unint64_t)a2)
    v15 = (unint64_t)a2;
  else
    v15 = v14;
  if (v15 > v12)
  {
    v16 = *(unsigned int *)(a1 + 12);
    if (v15 < 5)
    {
      v17 = (_QWORD *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 4;
      if (!(_DWORD)v16)
        goto LABEL_27;
    }
    else
    {
      if (v15 >> 29)
        goto LABEL_43;
      v17 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v15));
      *(_DWORD *)(a1 + 8) = v15;
      *(_QWORD *)a1 = v17;
      if (!(_DWORD)v16)
        goto LABEL_27;
    }
    v18 = 8 * v16;
    v19 = v5;
    do
    {
      v20 = *(_QWORD *)v19;
      v19 = (WTF *)((char *)v19 + 8);
      *v17++ = v20;
      v18 -= 8;
    }
    while (v18);
LABEL_27:
    if ((WTF *)(a1 + 16) != v5 && v5)
    {
      if (*(WTF **)a1 == v5)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v5, a2);
    }
  }
  return (char *)v3;
}

uint64_t *WTF::HashTable<WebCore::CanvasRenderingContext *,WebCore::CanvasRenderingContext *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>>::add@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v4;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;

  v4 = result;
  v6 = *result;
  if (*result
    || (result = WTF::HashTable<WebCore::CanvasRenderingContext *,WebCore::CanvasRenderingContext *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>>::expand(result, 0), (v6 = *v4) != 0))
  {
    v7 = 0;
    v8 = *(_DWORD *)(v6 - 8);
  }
  else
  {
    v8 = 0;
    v7 = 1;
  }
  v9 = *a2;
  v10 = ~(*a2 << 32) + *a2;
  v11 = 9
      * (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) ^ (((v10 ^ (v10 >> 22)) + ~((v10 ^ (v10 >> 22)) << 13)) >> 8));
  v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
  v13 = v8 & ((v12 >> 31) ^ v12);
  v14 = (uint64_t *)(v6 + 8 * v13);
  v15 = *v14;
  if (*v14)
  {
    v16 = 0;
    v17 = 1;
    do
    {
      if (v15 == v9)
      {
        if ((v7 & 1) != 0)
          v26 = 0;
        else
          v26 = *(unsigned int *)(v6 - 4);
        v25 = 0;
        v24 = v6 + 8 * v26;
        goto LABEL_18;
      }
      if (v15 == -1)
        v16 = v14;
      v13 = (v13 + v17) & v8;
      v14 = (uint64_t *)(v6 + 8 * v13);
      v15 = *v14;
      ++v17;
    }
    while (*v14);
    if (v16)
    {
      *v16 = 0;
      --*(_DWORD *)(*v4 - 16);
      v9 = *a2;
      v14 = v16;
    }
  }
  *v14 = v9;
  v18 = *v4;
  if (*v4)
    v19 = *(_DWORD *)(v18 - 12) + 1;
  else
    v19 = 1;
  *(_DWORD *)(v18 - 12) = v19;
  v20 = *v4;
  if (*v4)
    v21 = *(_DWORD *)(v20 - 12);
  else
    v21 = 0;
  v22 = (*(_DWORD *)(v20 - 16) + v21);
  v23 = *(unsigned int *)(v20 - 4);
  if (v23 > 0x400)
  {
    if (v23 > 2 * v22)
      goto LABEL_17;
LABEL_20:
    result = WTF::HashTable<WebCore::CanvasRenderingContext *,WebCore::CanvasRenderingContext *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>>::expand(v4, v14);
    v14 = result;
    v20 = *v4;
    if (*v4)
      v23 = *(unsigned int *)(v20 - 4);
    else
      v23 = 0;
    goto LABEL_17;
  }
  if (3 * v23 <= 4 * v22)
    goto LABEL_20;
LABEL_17:
  v24 = v20 + 8 * v23;
  v25 = 1;
LABEL_18:
  *(_QWORD *)a3 = v14;
  *(_QWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 16) = v25;
  return result;
}

_QWORD *WTF::HashTable<WebCore::CanvasRenderingContext *,WebCore::CanvasRenderingContext *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>>::expand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<WebCore::CanvasRenderingContext *,WebCore::CanvasRenderingContext *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>>::rehash(a1, v5, a2);
}

_QWORD *WTF::HashTable<WebCore::CanvasRenderingContext *,WebCore::CanvasRenderingContext *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>>::rehash(uint64_t *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(8 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (uint64_t *)(v6 + 8 * v11);
      v14 = *v13;
      if ((unint64_t)(*v13 + 1) >= 2)
      {
        v15 = *a1;
        v16 = *a1 ? *(_DWORD *)(v15 - 8) : 0;
        v17 = (~(v14 << 32) + v14) ^ ((unint64_t)(~(v14 << 32) + v14) >> 22);
        v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
        v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
        v20 = v16 & ((v19 >> 31) ^ v19);
        v21 = 1;
        do
        {
          v22 = v20;
          v23 = *(_QWORD *)(v15 + 8 * v20);
          v20 = (v20 + v21++) & v16;
        }
        while (v23);
        v24 = (_QWORD *)(v15 + 8 * v22);
        *v24 = v14;
        if (v13 == a3)
          v12 = v24;
      }
      ++v11;
    }
    while (v11 != v7);
  }
  else
  {
    v12 = 0;
  }
  if (v6)
    WTF::fastFree((WTF *)(v6 - 16), v10);
  return v12;
}

uint64_t WTF::HashSet<WebCore::CanvasRenderingContext *,WTF::DefaultHash<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>,WTF::HashTableTraits>::remove(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;

  if (!*a1)
  {
    if (a2)
    {
      v2 = 0;
      goto LABEL_3;
    }
    return 0;
  }
  v2 = *a1 + 8 * *(unsigned int *)(*a1 - 4);
  if ((_QWORD *)v2 == a2)
    return 0;
LABEL_3:
  if ((_QWORD *)v2 != a2)
    WTF::HashTable<WebCore::CanvasRenderingContext *,WebCore::CanvasRenderingContext *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>>::remove(a1, a2);
  return 1;
}

uint64_t *WTF::HashTable<WebCore::CanvasRenderingContext *,WebCore::CanvasRenderingContext *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>>::remove(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  *a2 = -1;
  ++*(_DWORD *)(*result - 16);
  v2 = *result;
  if (*result)
    v3 = *(_DWORD *)(v2 - 12) - 1;
  else
    v3 = -1;
  *(_DWORD *)(v2 - 12) = v3;
  v4 = *result;
  if (*result)
  {
    v5 = 6 * *(_DWORD *)(v4 - 12);
    v6 = *(_DWORD *)(v4 - 4);
    if (v5 < v6 && v6 >= 9)
      return WTF::HashTable<WebCore::CanvasRenderingContext *,WebCore::CanvasRenderingContext *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>>::rehash(result, v6 >> 1, 0);
  }
  return result;
}

uint64_t WTF::HashTable<WebCore::CanvasRenderingContext *,WebCore::CanvasRenderingContext *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::CanvasRenderingContext *>,WTF::DefaultHash<WebCore::CanvasRenderingContext *>>,WebCore::CanvasRenderingContext *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *a1;
  if (!*a1)
    return 0;
  result = WTF::HashTable<WebCore::CanvasRenderingContext *,WebCore::CanvasRenderingContext *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::CanvasRenderingContext *>,WTF::DefaultHash<WebCore::CanvasRenderingContext *>>,WebCore::CanvasRenderingContext *>(*a1, *a2);
  if (!result)
    return v2 + 8 * *(unsigned int *)(v2 - 4);
  return result;
}

uint64_t WTF::HashTable<WebCore::CanvasRenderingContext *,WebCore::CanvasRenderingContext *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>,WTF::HashTraits<WebCore::CanvasRenderingContext *>>::lookup<WTF::IdentityHashTranslator<WTF::HashTraits<WebCore::CanvasRenderingContext *>,WTF::DefaultHash<WebCore::CanvasRenderingContext *>>,WebCore::CanvasRenderingContext *>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if (result)
  {
    v3 = result;
    v4 = *(_DWORD *)(result - 8);
    v5 = WTF::PtrHashBase<WTF::AtomString *,false>::hash(a2) & v4;
    v6 = *(_QWORD *)(v3 + 8 * v5);
    if (v6 == a2)
    {
      return v3 + 8 * v5;
    }
    else
    {
      v7 = 1;
      while (v6)
      {
        v5 = ((_DWORD)v5 + v7) & v4;
        v6 = *(_QWORD *)(v3 + 8 * v5);
        ++v7;
        if (v6 == a2)
          return v3 + 8 * v5;
      }
      return 0;
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::CanvasRenderingContext2DBase::State,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  unsigned int v3;
  WebCore::CanvasRenderingContext2DBase::State *v4;
  uint64_t v5;
  uint64_t v6;
  WTF *v7;

  v3 = *(_DWORD *)(a1 + 12);
  if (v3)
  {
    v4 = *(WebCore::CanvasRenderingContext2DBase::State **)a1;
    v5 = 560 * v3;
    do
    {
      WebCore::CanvasRenderingContext2DBase::State::~State(v4, a2);
      v4 = (WebCore::CanvasRenderingContext2DBase::State *)(v6 + 560);
      v5 -= 560;
    }
    while (v5);
  }
  v7 = *(WTF **)a1;
  if (a1 + 16 != *(_QWORD *)a1 && v7 != 0)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v7, a2);
  }
  return a1;
}

void WTF::Vector<WebCore::CanvasRenderingContext2DBase::State,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  WTF *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char v31;
  char v32;

  if (*(unsigned int *)(a1 + 8) < a2)
  {
    v3 = *(WTF **)a1;
    v4 = *(_DWORD *)(a1 + 12);
    if (a2 < 2)
    {
      v6 = a1 + 16;
      *(_QWORD *)a1 = a1 + 16;
      *(_DWORD *)(a1 + 8) = 1;
    }
    else
    {
      if (a2 >= 0x750751)
      {
        __break(0xC471u);
        return;
      }
      v5 = 560 * a2;
      v6 = WTF::fastMalloc((WTF *)(560 * a2));
      *(_DWORD *)(a1 + 8) = v5 / 0x230;
      *(_QWORD *)a1 = v6;
    }
    if (v4)
    {
      v7 = 0;
      v8 = 560 * v4;
      do
      {
        v9 = (char *)v3 + v7;
        v10 = v6 + v7;
        v11 = *(_QWORD *)((char *)v3 + v7);
        *(_QWORD *)v9 = 0;
        *(_QWORD *)v10 = v11;
        v12 = *(_QWORD *)((char *)v3 + v7 + 8);
        *((_QWORD *)v9 + 1) = 0;
        *(_QWORD *)(v10 + 8) = v12;
        *(_BYTE *)(v6 + v7 + 16) = 0;
        *(_DWORD *)(v10 + 24) = -1;
        v13 = *(unsigned int *)((char *)v3 + v7 + 24);
        if ((_DWORD)v13 != -1)
        {
          ((void (*)(char *, uint64_t, char *))off_1E33DC6F8[v13])(&v31, v6 + v7 + 16, v9 + 16);
          *(_DWORD *)(v10 + 24) = v13;
        }
        *(_BYTE *)(v10 + 32) = 0;
        *(_DWORD *)(v10 + 40) = -1;
        v14 = *((unsigned int *)v9 + 10);
        if ((_DWORD)v14 != -1)
        {
          ((void (*)(char *, uint64_t, char *))off_1E33DC6F8[v14])(&v32, v10 + 32, (char *)v3 + v7 + 32);
          *(_DWORD *)(v10 + 40) = v14;
        }
        v15 = v6 + v7;
        v16 = (char *)v3 + v7;
        v17 = *(_OWORD *)((char *)v3 + v7 + 48);
        v18 = *(_OWORD *)((char *)v3 + v7 + 64);
        *(_DWORD *)(v15 + 80) = *(_DWORD *)((char *)v3 + v7 + 80);
        *(_OWORD *)(v15 + 48) = v17;
        *(_OWORD *)(v15 + 64) = v18;
        *(_QWORD *)(v15 + 88) = 0;
        v19 = *(_QWORD *)((char *)v3 + v7 + 88);
        if (v19)
        {
          *(_QWORD *)(v15 + 88) = v19;
          *((_QWORD *)v16 + 11) = 0;
        }
        *(_OWORD *)(v15 + 96) = *((_OWORD *)v16 + 6);
        v20 = *((_OWORD *)v16 + 7);
        v21 = *((_OWORD *)v16 + 8);
        v22 = *((_OWORD *)v16 + 9);
        *(_BYTE *)(v15 + 160) = v16[160];
        *(_OWORD *)(v15 + 128) = v21;
        *(_OWORD *)(v15 + 144) = v22;
        *(_OWORD *)(v15 + 112) = v20;
        *(_QWORD *)(v15 + 168) = 0;
        *(_QWORD *)(v15 + 176) = 0;
        v23 = *((_QWORD *)v16 + 21);
        *((_QWORD *)v16 + 21) = 0;
        *(_QWORD *)(v15 + 168) = v23;
        LODWORD(v23) = *((_DWORD *)v16 + 44);
        *((_DWORD *)v16 + 44) = 0;
        *(_DWORD *)(v15 + 176) = v23;
        LODWORD(v23) = *((_DWORD *)v16 + 45);
        *((_DWORD *)v16 + 45) = 0;
        *(_DWORD *)(v15 + 180) = v23;
        v24 = *(_OWORD *)(v16 + 184);
        *(_OWORD *)(v15 + 196) = *(_OWORD *)(v16 + 196);
        *(_OWORD *)(v15 + 184) = v24;
        v25 = *((_QWORD *)v16 + 27);
        *((_QWORD *)v16 + 27) = 0;
        *(_QWORD *)(v15 + 224) = 0;
        *(_QWORD *)(v15 + 232) = 0;
        *(_QWORD *)(v15 + 216) = v25;
        v26 = *((_QWORD *)v16 + 28);
        *((_QWORD *)v16 + 28) = 0;
        *(_QWORD *)(v15 + 224) = v26;
        LODWORD(v26) = *((_DWORD *)v16 + 58);
        *((_DWORD *)v16 + 58) = 0;
        *(_DWORD *)(v15 + 232) = v26;
        LODWORD(v26) = *((_DWORD *)v16 + 59);
        *((_DWORD *)v16 + 59) = 0;
        *(_DWORD *)(v15 + 236) = v26;
        v27 = *((_QWORD *)v16 + 30);
        *((_QWORD *)v16 + 30) = 0;
        *(_QWORD *)(v15 + 240) = v27;
        WebCore::CanvasRenderingContext2DBase::FontProxy::FontProxy((WebCore::CanvasRenderingContext2DBase::FontProxy *)(v15 + 248), (const WebCore::CanvasRenderingContext2DBase::FontProxy *)(v16 + 248));
        v28 = *((_QWORD *)v16 + 69);
        *((_QWORD *)v16 + 69) = 0;
        *(_QWORD *)(v15 + 552) = v28;
        WebCore::CanvasRenderingContext2DBase::State::~State((WTF *)((char *)v3 + v7), v29);
        v7 += 560;
      }
      while (v8 != v7);
    }
    if ((WTF *)(a1 + 16) != v3 && v3 != 0)
    {
      if (*(WTF **)a1 == v3)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree(v3, (void *)a2);
    }
  }
}

WebCore::CanvasRenderingContext2DBase::State *WebCore::CanvasRenderingContext2DBase::State::State(WebCore::CanvasRenderingContext2DBase::State *this, const WebCore::CanvasRenderingContext2DBase::State *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  void *v15;
  __int128 v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  unsigned int *v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  char v31;
  char v32;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  *(_QWORD *)this = v4;
  v5 = (_DWORD *)*((_QWORD *)a2 + 1);
  if (v5)
    *v5 += 2;
  *((_BYTE *)this + 16) = 0;
  *((_QWORD *)this + 1) = v5;
  *((_DWORD *)this + 6) = -1;
  v6 = *((unsigned int *)a2 + 6);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(char *))off_1E33DC790[v6])(&v31);
    *((_DWORD *)this + 6) = v6;
  }
  *((_BYTE *)this + 32) = 0;
  *((_DWORD *)this + 10) = -1;
  v7 = *((unsigned int *)a2 + 10);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(char *))off_1E33DC790[v7])(&v32);
    *((_DWORD *)this + 10) = v7;
  }
  v8 = *((_OWORD *)a2 + 3);
  v9 = *((_OWORD *)a2 + 4);
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  *((_OWORD *)this + 3) = v8;
  *((_OWORD *)this + 4) = v9;
  v10 = *((_QWORD *)a2 + 11);
  *((_QWORD *)this + 11) = v10;
  if ((v10 & 0x8000000000000) != 0)
  {
    v22 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 + 1, v22));
  }
  *((_OWORD *)this + 6) = *((_OWORD *)a2 + 6);
  v11 = *((_OWORD *)a2 + 7);
  v12 = *((_OWORD *)a2 + 8);
  v13 = *((_OWORD *)a2 + 9);
  *((_BYTE *)this + 160) = *((_BYTE *)a2 + 160);
  *((_OWORD *)this + 8) = v12;
  *((_OWORD *)this + 9) = v13;
  *((_OWORD *)this + 7) = v11;
  v14 = *((unsigned int *)a2 + 45);
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_DWORD *)this + 45) = v14;
  if ((_DWORD)v14)
  {
    if (v14 >> 29)
      goto LABEL_31;
    v15 = (void *)WTF::fastMalloc((WTF *)(8 * v14));
    *((_DWORD *)this + 44) = v14;
    *((_QWORD *)this + 21) = v15;
    memcpy(v15, *((const void **)a2 + 21), 8 * *((unsigned int *)a2 + 45));
  }
  v16 = *(_OWORD *)((char *)a2 + 184);
  *(_OWORD *)((char *)this + 196) = *(_OWORD *)((char *)a2 + 196);
  *(_OWORD *)((char *)this + 184) = v16;
  v17 = (_DWORD *)*((_QWORD *)a2 + 27);
  if (v17)
    *v17 += 2;
  v18 = *((unsigned int *)a2 + 59);
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 27) = v17;
  *((_DWORD *)this + 59) = v18;
  if ((_DWORD)v18)
  {
    if (!(v18 >> 29))
    {
      v24 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v18));
      *((_DWORD *)this + 58) = v18;
      *((_QWORD *)this + 28) = v24;
      v25 = *((unsigned int *)a2 + 59);
      if ((_DWORD)v25)
      {
        v26 = (_QWORD *)*((_QWORD *)a2 + 28);
        v27 = &v26[v25];
        do
        {
          v28 = *v26;
          v29 = (unsigned int *)(*v26 + 8);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 + 1, v29));
          *v24++ = v28;
          ++v26;
        }
        while (v26 != v27);
      }
      goto LABEL_16;
    }
LABEL_31:
    __break(0xC471u);
    JUMPOUT(0x195CEF1DCLL);
  }
LABEL_16:
  v19 = (_DWORD *)*((_QWORD *)a2 + 30);
  if (v19)
    *v19 += 2;
  *((_QWORD *)this + 30) = v19;
  WebCore::CanvasRenderingContext2DBase::FontProxy::FontProxy((WebCore::CanvasRenderingContext2DBase::State *)((char *)this + 248), (const WebCore::CanvasRenderingContext2DBase::State *)((char *)a2 + 248));
  v20 = (_DWORD *)*((_QWORD *)a2 + 69);
  if (v20)
    ++*v20;
  *((_QWORD *)this + 69) = v20;
  return this;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore5ColorEN3WTF3RefINS8_14CanvasGradientENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEENSB_INS8_13CanvasPatternENSD_ISI_EENSF_ISI_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SH_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *a3;
  *a2 = *a3;
  if ((v3 & 0x8000000000000) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore5ColorEN3WTF3RefINS8_14CanvasGradientENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEENSB_INS8_13CanvasPatternENSD_ISI_EENSF_ISI_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SH_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  *v3 = **a3 + 1;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore5ColorEN3WTF3RefINS8_14CanvasGradientENSA_12RawPtrTraitsISC_EENSA_21DefaultRefDerefTraitsISC_EEEENSB_INS8_13CanvasPatternENSD_ISI_EENSF_ISI_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISM_LNS0_6_TraitE1EEEEEvRSN_OT_EUlRSV_OT0_E_JRNS0_6__baseILSQ_1EJS9_SH_SL_EEERKS13_EEEDcSV_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  *v3 = **a3 + 1;
  *a2 = v3;
}

unint64_t WTF::Vector<WebCore::CanvasRenderingContext2DBase::State,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 560 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WebCore::CanvasRenderingContext2DBase::State,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  else
  {
    v6 = a3 - v5;
    v7 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v7 >= 0x10)
      v8 = v7 + 1;
    else
      v8 = 16;
    if (v8 > a2)
      a2 = v8;
    WTF::Vector<WebCore::CanvasRenderingContext2DBase::State,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

uint64_t WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::clear(uint64_t result, void *a2)
{
  WTF *v2;

  if (*(_DWORD *)(result + 8))
  {
    if (*(_DWORD *)(result + 12))
      *(_DWORD *)(result + 12) = 0;
    v2 = *(WTF **)result;
    if (*(_QWORD *)result)
    {
      *(_QWORD *)result = 0;
      *(_DWORD *)(result + 8) = 0;
      return WTF::fastFree(v2, a2);
    }
  }
  return result;
}

uint64_t WTF::Vector<double,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  int v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (*(unsigned int *)(result + 8) >= a2)
    return 1;
  v2 = a2;
  if (!(a2 >> 29))
  {
    v3 = result;
    v4 = *(void **)result;
    v5 = *(unsigned int *)(result + 12);
    v6 = (void *)WTF::fastMalloc((WTF *)(8 * a2));
    *(_DWORD *)(v3 + 8) = v2;
    *(_QWORD *)v3 = v6;
    memcpy(v6, v4, 8 * v5);
    if (v4)
    {
      if (*(void **)v3 == v4)
      {
        *(_QWORD *)v3 = 0;
        *(_DWORD *)(v3 + 8) = 0;
      }
      WTF::fastFree((WTF *)v4, v7);
    }
    return 1;
  }
  __break(0xC471u);
  return result;
}

WTF *WTF::Detail::CallableWrapper<WebCore::CanvasRenderingContext2DBase::isPointInStrokeInternal(WebCore::Path const&,double,double)::$_0,void,WebCore::GraphicsContext &>::call(uint64_t a1, uint64_t a2)
{
  float v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  float v12;
  void *v13;
  WTF *result;
  WTF *v15;
  int v16;
  int v17;

  v4 = *(double *)(*(_QWORD *)(a1 + 8) + 48);
  if (*(float *)(a2 + 188) != v4)
  {
    *(float *)(a2 + 188) = v4;
    *(_DWORD *)(a2 + 184) |= 8u;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 88))(a2, a2 + 8);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 296))(a2, *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 56));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 312))(a2, *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 57));
  v5 = *(double *)(*(_QWORD *)(a1 + 8) + 64);
  (*(void (**)(uint64_t, float))(*(_QWORD *)a2 + 320))(a2, v5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(unsigned int *)(v6 + 180);
  v15 = 0;
  v16 = 0;
  v17 = v7;
  if ((_DWORD)v7)
  {
    if (v7 >> 29)
      goto LABEL_12;
    v8 = (WTF *)WTF::fastMalloc((WTF *)(8 * v7));
    v16 = v7;
    v15 = v8;
    v9 = *(unsigned int *)(v6 + 180);
    if ((_DWORD)v9)
    {
      v10 = *(uint64_t **)(v6 + 168);
      while (v7)
      {
        v11 = *v10++;
        *(_QWORD *)v8 = v11;
        v8 = (WTF *)((char *)v8 + 8);
        --v7;
        if (!--v9)
          goto LABEL_9;
      }
LABEL_12:
      __break(0xC471u);
      JUMPOUT(0x195CEF4E4);
    }
  }
LABEL_9:
  v12 = *(double *)(*(_QWORD *)(a1 + 8) + 184);
  (*(void (**)(uint64_t, WTF **, float))(*(_QWORD *)a2 + 304))(a2, &v15, v12);
  result = v15;
  if (v15)
  {
    v15 = 0;
    v16 = 0;
    return (WTF *)WTF::fastFree(result, v13);
  }
  return result;
}

WebCore::CanvasRenderingContext *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&,float,float)::$_0,WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &,float,float)::$_1,WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &,float,float)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  float v13;
  int v14;
  int v15;
  double v16;
  int v17;
  _WORD *v18;
  unsigned int v19;
  WTF *v20;
  float v21;
  double v22;
  int v23;
  double v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  double v29;
  uint64_t v30;
  double v31;
  unint64_t v32;
  unint64_t v33;
  float v34;
  unsigned int v35;
  uint64_t v36;
  double v38;
  float v39;
  int v40;
  WTF *v41;
  uint64_t v42;
  void *v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  void *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  WTF *v51;
  float v52[4];
  WTF *v53;
  float v54;
  float v55;

  v5 = *a1;
  v6 = **a1;
  v7 = *a2;
  v8 = *(_QWORD *)(*(_QWORD *)(*a2 + 176) + 24);
  if (!v8)
  {
    v42 = *(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v42 || (*(_BYTE *)(v42 + 45) & 2) == 0)
      goto LABEL_60;
LABEL_62:
    __break(0xC471u);
    goto LABEL_90;
  }
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(_QWORD *)(v7 + 64);
  v11 = v10 & 0xFFFFFFFFFFFFLL;
  if ((v10 & 0xFFFFFFFFFFFFLL) == 0)
  {
    if (v9)
    {
      v38 = WebCore::CachedImage::imageSizeForRenderer(*(_QWORD *)(v8 + 8), v10 & 0xFFFFFFFFFFFFLL, 0) * 64.0;
      if (v38 > -2147483650.0)
        v40 = (int)v38;
      else
        v40 = 0x80000000;
      if (v38 < 2147483650.0)
        v15 = v40;
      else
        v15 = 0x7FFFFFFF;
      v24 = v39 * 64.0;
      if (v24 < 2147483650.0)
        goto LABEL_27;
LABEL_51:
      v17 = 0x7FFFFFFF;
      goto LABEL_29;
    }
    goto LABEL_60;
  }
  if ((*(_BYTE *)((v10 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    goto LABEL_62;
  if (!v9)
  {
LABEL_60:
    v15 = 0;
    v17 = 0;
    goto LABEL_29;
  }
  v12 = WebCore::CachedImage::imageSizeForRenderer(*(_QWORD *)(v8 + 8), v11, 0) * 64.0;
  if (v12 > -2147483650.0)
    v14 = (int)v12;
  else
    v14 = 0x80000000;
  if (v12 < 2147483650.0)
    v15 = v14;
  else
    v15 = 0x7FFFFFFF;
  v16 = v13 * 64.0;
  if (v16 >= 2147483650.0)
  {
    v17 = 0x7FFFFFFF;
  }
  else if (v16 <= -2147483650.0)
  {
    v17 = 0x80000000;
  }
  else
  {
    v17 = (int)v16;
  }
  if ((((*(_BYTE *)(v11 + 52) & 7) == 3) & *(_BYTE *)(v11 + 53)) != 1)
    goto LABEL_29;
  v18 = (_WORD *)(v9 + 557);
  v19 = (*(_WORD *)(v9 + 557) >> 5) - 3;
  if (v19 <= 1 && (*(_BYTE *)(v9 + 720) & 0x10) != 0)
  {
    WebCore::CachedImage::brokenImage(1.0, (uint64_t)&v53);
    v44 = (unsigned int *)v53;
    if (v53)
    {
      v51 = (WTF *)*((_QWORD *)v53 + 1);
      v53 = 0;
      do
      {
        v45 = __ldaxr(v44);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, v44));
      if (!v46)
      {
        atomic_store(1u, v44);
        WTF::fastFree((WTF *)v44, v43);
      }
    }
    else
    {
      v51 = 0;
    }
    v41 = v51;
    v18 = (_WORD *)(v9 + 557);
    goto LABEL_54;
  }
  if (!*(_QWORD *)(v9 + 688))
  {
    {
      v41 = (WTF *)WebCore::Image::nullImage(void)::nullImage;
    }
    else
    {
      WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)&v53);
      v18 = (_WORD *)(v9 + 557);
      v41 = v53;
      WebCore::Image::nullImage(void)::nullImage = (uint64_t)v53;
    }
LABEL_54:
    if (!v41)
      goto LABEL_29;
    v19 = (*v18 >> 5) - 3;
  }
  if (v19 <= 1 && (*(_BYTE *)(v9 + 720) & 0x10) != 0)
  {
    WebCore::CachedImage::brokenImage(1.0, (uint64_t)&v53);
    v48 = (unsigned int *)v53;
    if (v53)
    {
      v20 = (WTF *)*((_QWORD *)v53 + 1);
      v53 = 0;
      do
      {
        v49 = __ldaxr(v48);
        v50 = v49 - 1;
      }
      while (__stlxr(v50, v48));
      if (!v50)
      {
        atomic_store(1u, v48);
        WTF::fastFree((WTF *)v48, v47);
      }
    }
    else
    {
      v20 = 0;
    }
  }
  else
  {
    v20 = *(WTF **)(v9 + 688);
    if (!v20)
    {
      {
        v20 = (WTF *)WebCore::Image::nullImage(void)::nullImage;
      }
      else
      {
        WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)&v53);
        v20 = v53;
        WebCore::Image::nullImage(void)::nullImage = (uint64_t)v53;
      }
    }
  }
  if (((*(uint64_t (**)(WTF *))(*(_QWORD *)v20 + 144))(v20) & 1) == 0)
  {
    v21 = *(float *)(v11 + 236);
    v22 = (float)((float)((float)v15 * 0.015625) * v21) * 64.0;
    if (v22 > -2147483650.0)
      v23 = (int)v22;
    else
      v23 = 0x80000000;
    if (v22 < 2147483650.0)
      v15 = v23;
    else
      v15 = 0x7FFFFFFF;
    v24 = (float)((float)((float)v17 * 0.015625) * v21) * 64.0;
    if (v24 < 2147483650.0)
    {
LABEL_27:
      if (v24 <= -2147483650.0)
        v17 = 0x80000000;
      else
        v17 = (int)v24;
      goto LABEL_29;
    }
    goto LABEL_51;
  }
LABEL_29:
  v25 = (_QWORD *)*a2;
  v26 = *(_QWORD *)(*(_QWORD *)(*a2 + 176) + 24);
  if (v26)
    v27 = *(_QWORD *)(v26 + 8);
  else
    v27 = 0;
  if ((v25[8] & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v25[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195CEF90CLL);
  }
  if (v27)
  {
    v29 = WebCore::CachedImage::imageSizeForRenderer(v27, v25[8] & 0xFFFFFFFFFFFFLL, 0) * 64.0;
    if (v29 >= 2147483650.0)
    {
      v30 = 0x7FFFFFFFLL;
    }
    else if (v29 <= -2147483650.0)
    {
      v30 = 0x80000000;
    }
    else
    {
      v30 = (int)v29;
    }
    v31 = v28 * 64.0;
    if (v31 >= 2147483650.0)
    {
      v32 = 0x7FFFFFFF00000000;
    }
    else if (v31 <= -2147483650.0)
    {
      v32 = 0x8000000000000000;
    }
    else
    {
      v32 = (unint64_t)(int)v31 << 32;
    }
    v33 = v32 | v30;
    v25 = (_QWORD *)*a2;
  }
  else
  {
    v33 = 0;
  }
  v53 = 0;
  v54 = (float)(int)v33 * 0.015625;
  v55 = (float)SHIDWORD(v33) * 0.015625;
  v34 = *(float *)v5[2];
  v52[0] = *(float *)v5[1];
  v52[1] = v34;
  v52[2] = (float)v15 * 0.015625;
  v52[3] = (float)v17 * 0.015625;
  v35 = *(_DWORD *)(v6 + 132);
  if (!v35)
  {
    __break(0xC471u);
LABEL_90:
    JUMPOUT(0x195CEF8ECLL);
  }
  v36 = *(_QWORD *)(v6 + 120) + 560 * v35;
  return WebCore::CanvasRenderingContext2DBase::drawImage((WebCore::CanvasRenderingContext *)v6, v25, (float *)&v53, v52, (unsigned __int8 *)(v36 - 456), (unsigned __int8 *)(v36 - 455), a3);
}

WebCore::CanvasRenderingContext *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&,float,float)::$_0,WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &,float,float)::$_1,WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &,float,float)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, WebCore::CanvasRenderingContext *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  float v13;
  int v14;
  int v15;
  double v16;
  int v17;
  _WORD *v18;
  unsigned int v19;
  WTF *v20;
  float v21;
  double v22;
  int v23;
  double v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  double v30;
  uint64_t v31;
  double v32;
  unint64_t v33;
  unint64_t v34;
  float v35;
  unsigned int v36;
  uint64_t v37;
  double v39;
  float v40;
  int v41;
  WTF *v42;
  uint64_t v43;
  void *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  void *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  WTF *v52;
  float v53[4];
  WTF *v54;
  float v55;
  float v56;

  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 24);
  v7 = *a2;
  v8 = *(_QWORD *)(*a2 + 296);
  if (!v8)
  {
    v43 = *(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL;
    if (!v43 || (*(_BYTE *)(v43 + 45) & 2) == 0)
      goto LABEL_60;
LABEL_62:
    __break(0xC471u);
    goto LABEL_90;
  }
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(_QWORD *)(v7 + 64);
  v11 = v10 & 0xFFFFFFFFFFFFLL;
  if ((v10 & 0xFFFFFFFFFFFFLL) == 0)
  {
    if (v9)
    {
      v39 = WebCore::CachedImage::imageSizeForRenderer(*(_QWORD *)(v8 + 8), v10 & 0xFFFFFFFFFFFFLL, 0) * 64.0;
      if (v39 > -2147483650.0)
        v41 = (int)v39;
      else
        v41 = 0x80000000;
      if (v39 < 2147483650.0)
        v15 = v41;
      else
        v15 = 0x7FFFFFFF;
      v24 = v40 * 64.0;
      if (v24 < 2147483650.0)
        goto LABEL_27;
LABEL_51:
      v17 = 0x7FFFFFFF;
      goto LABEL_29;
    }
    goto LABEL_60;
  }
  if ((*(_BYTE *)((v10 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    goto LABEL_62;
  if (!v9)
  {
LABEL_60:
    v15 = 0;
    v17 = 0;
    goto LABEL_29;
  }
  v12 = WebCore::CachedImage::imageSizeForRenderer(*(_QWORD *)(v8 + 8), v11, 0) * 64.0;
  if (v12 > -2147483650.0)
    v14 = (int)v12;
  else
    v14 = 0x80000000;
  if (v12 < 2147483650.0)
    v15 = v14;
  else
    v15 = 0x7FFFFFFF;
  v16 = v13 * 64.0;
  if (v16 >= 2147483650.0)
  {
    v17 = 0x7FFFFFFF;
  }
  else if (v16 <= -2147483650.0)
  {
    v17 = 0x80000000;
  }
  else
  {
    v17 = (int)v16;
  }
  if ((((*(_BYTE *)(v11 + 52) & 7) == 3) & *(_BYTE *)(v11 + 53)) != 1)
    goto LABEL_29;
  v18 = (_WORD *)(v9 + 557);
  v19 = (*(_WORD *)(v9 + 557) >> 5) - 3;
  if (v19 <= 1 && (*(_BYTE *)(v9 + 720) & 0x10) != 0)
  {
    WebCore::CachedImage::brokenImage(1.0, (uint64_t)&v54);
    v45 = (unsigned int *)v54;
    if (v54)
    {
      v52 = (WTF *)*((_QWORD *)v54 + 1);
      v54 = 0;
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (!v47)
      {
        atomic_store(1u, v45);
        WTF::fastFree((WTF *)v45, v44);
      }
    }
    else
    {
      v52 = 0;
    }
    v42 = v52;
    v18 = (_WORD *)(v9 + 557);
    goto LABEL_54;
  }
  if (!*(_QWORD *)(v9 + 688))
  {
    {
      v42 = (WTF *)WebCore::Image::nullImage(void)::nullImage;
    }
    else
    {
      WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)&v54);
      v18 = (_WORD *)(v9 + 557);
      v42 = v54;
      WebCore::Image::nullImage(void)::nullImage = (uint64_t)v54;
    }
LABEL_54:
    if (!v42)
      goto LABEL_29;
    v19 = (*v18 >> 5) - 3;
  }
  if (v19 <= 1 && (*(_BYTE *)(v9 + 720) & 0x10) != 0)
  {
    WebCore::CachedImage::brokenImage(1.0, (uint64_t)&v54);
    v49 = (unsigned int *)v54;
    if (v54)
    {
      v20 = (WTF *)*((_QWORD *)v54 + 1);
      v54 = 0;
      do
      {
        v50 = __ldaxr(v49);
        v51 = v50 - 1;
      }
      while (__stlxr(v51, v49));
      if (!v51)
      {
        atomic_store(1u, v49);
        WTF::fastFree((WTF *)v49, v48);
      }
    }
    else
    {
      v20 = 0;
    }
  }
  else
  {
    v20 = *(WTF **)(v9 + 688);
    if (!v20)
    {
      {
        v20 = (WTF *)WebCore::Image::nullImage(void)::nullImage;
      }
      else
      {
        WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)&v54);
        v20 = v54;
        WebCore::Image::nullImage(void)::nullImage = (uint64_t)v54;
      }
    }
  }
  if (((*(uint64_t (**)(WTF *))(*(_QWORD *)v20 + 144))(v20) & 1) == 0)
  {
    v21 = *(float *)(v11 + 236);
    v22 = (float)((float)((float)v15 * 0.015625) * v21) * 64.0;
    if (v22 > -2147483650.0)
      v23 = (int)v22;
    else
      v23 = 0x80000000;
    if (v22 < 2147483650.0)
      v15 = v23;
    else
      v15 = 0x7FFFFFFF;
    v24 = (float)((float)((float)v17 * 0.015625) * v21) * 64.0;
    if (v24 < 2147483650.0)
    {
LABEL_27:
      if (v24 <= -2147483650.0)
        v17 = 0x80000000;
      else
        v17 = (int)v24;
      goto LABEL_29;
    }
    goto LABEL_51;
  }
LABEL_29:
  v25 = (_QWORD *)*a2;
  v26 = *(_QWORD *)(*a2 + 296);
  if (v26)
    v27 = *(_QWORD *)(v26 + 8);
  else
    v27 = 0;
  v28 = v25[8];
  if ((v28 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v28 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x195CEFE80);
  }
  if (v27)
  {
    v30 = WebCore::CachedImage::imageSizeForRenderer(v27, v28 & 0xFFFFFFFFFFFFLL, 0) * 64.0;
    if (v30 >= 2147483650.0)
    {
      v31 = 0x7FFFFFFFLL;
    }
    else if (v30 <= -2147483650.0)
    {
      v31 = 0x80000000;
    }
    else
    {
      v31 = (int)v30;
    }
    v32 = v29 * 64.0;
    if (v32 >= 2147483650.0)
    {
      v33 = 0x7FFFFFFF00000000;
    }
    else if (v32 <= -2147483650.0)
    {
      v33 = 0x8000000000000000;
    }
    else
    {
      v33 = (unint64_t)(int)v32 << 32;
    }
    v34 = v33 | v31;
    v25 = (_QWORD *)*a2;
  }
  else
  {
    v34 = 0;
  }
  v54 = 0;
  v55 = (float)(int)v34 * 0.015625;
  v56 = (float)SHIDWORD(v34) * 0.015625;
  v35 = **(float **)(v5 + 40);
  v53[0] = **(float **)(v5 + 32);
  v53[1] = v35;
  v53[2] = (float)v15 * 0.015625;
  v53[3] = (float)v17 * 0.015625;
  v36 = *(_DWORD *)(v6 + 132);
  if (!v36)
  {
    __break(0xC471u);
LABEL_90:
    JUMPOUT(0x195CEFE60);
  }
  v37 = *(_QWORD *)(v6 + 120) + 560 * v36;
  return WebCore::CanvasRenderingContext2DBase::drawImage(a3, v6, v25, (float *)&v54, v53, (unsigned __int8 *)(v37 - 456), (unsigned __int8 *)(v37 - 455));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&,float,float)::$_0,WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &,float,float)::$_1,WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &,float,float)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  const WebCore::FloatRect *v4;
  float v5;
  float v6;
  uint64_t **v7;
  __int32 v8;
  float32x2_t v10;
  float v11;
  float v12;
  float32x2_t v13;
  float v14;
  float v15;

  v3 = *a1;
  v4 = (const WebCore::FloatRect *)(*(_QWORD *)a2 + 112);
  v5 = (float)*(int *)(*(_QWORD *)a2 + 120);
  v6 = (float)*(int *)(*(_QWORD *)a2 + 124);
  v13 = 0;
  v14 = v5;
  v15 = v6;
  v7 = *(uint64_t ***)(v3 + 48);
  v8 = **(_DWORD **)(v3 + 64);
  v10.i32[0] = **(_DWORD **)(v3 + 56);
  v10.i32[1] = v8;
  v11 = v5;
  v12 = v6;
  return WebCore::CanvasRenderingContext2DBase::drawImage(a3, v7, v4, &v13, &v10);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&,float,float)::$_0,WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &,float,float)::$_1,WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &,float,float)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(uint64_t *a1@<X0>, const WebCore::FloatRect **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t **v7;
  const WebCore::FloatRect *v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  BOOL v13;
  float v14;
  float v16;
  float v18[4];
  uint64_t v19;
  float v20;
  float v21;

  v6 = *a1;
  v7 = *(uint64_t ***)(*a1 + 48);
  v8 = *a2;
  v9 = *((_QWORD *)*a2 + 2);
  if (v9)
  {
    v11 = *(float *)(v9 + 16);
    v10 = *(float *)(v9 + 20);
    v12 = 2147500000.0;
    v13 = v11 > -2147500000.0 && v11 < 2147500000.0;
    v14 = (float)(int)v11;
    if (!v13)
      v14 = 2147500000.0;
    if (v10 < 2147500000.0 && v10 > -2147500000.0)
      v12 = (float)(int)v10;
  }
  else
  {
    v14 = 0.0;
    v12 = 0.0;
  }
  v19 = 0;
  v20 = v14;
  v21 = v12;
  v16 = **(float **)(v6 + 64);
  v18[0] = **(float **)(v6 + 56);
  v18[1] = v16;
  v18[2] = v14;
  v18[3] = v12;
  return WebCore::CanvasRenderingContext2DBase::drawImage(a3, v7, v8, (const WebCore::FloatRect *)&v19, v18);
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&,float,float)::$_0,WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &,float,float)::$_1,WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &,float,float)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>(uint64_t *a1@<X0>, const WebCore::FloatRect **a2@<X1>, WebCore::CanvasRenderingContext2DBase *a3@<X8>)
{
  uint64_t v5;
  WebCore::CSSStyleImageValue *v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  double v12;
  float v13;
  double v14;
  const WebCore::FloatRect *v15;
  float v16;
  float v17[4];
  uint64_t v18;
  float v19;
  float v20;

  v5 = *a1;
  v6 = *(WebCore::CSSStyleImageValue **)(*a1 + 48);
  v7 = *((_QWORD *)*a2 + 5);
  v8 = 0.0;
  if (*(_BYTE *)(v7 + 64) && (v9 = *(_QWORD *)(v7 + 56)) != 0)
  {
    v10 = *(_QWORD *)(v9 + 8);
    v11 = 0.0;
    if (v10)
    {
      v12 = WebCore::CachedImage::imageSizeForRenderer(v10, 0, 0) * 64.0;
      if (v12 >= 2147483650.0)
      {
        v8 = 33554000.0;
      }
      else if (v12 <= -2147483650.0)
      {
        v8 = -33554000.0;
      }
      else
      {
        v8 = (float)(int)v12 * 0.015625;
      }
      v14 = v13 * 64.0;
      if (v14 >= 2147483650.0)
      {
        v11 = 33554000.0;
      }
      else if (v14 <= -2147483650.0)
      {
        v11 = -33554000.0;
      }
      else
      {
        v11 = (float)(int)v14 * 0.015625;
      }
    }
  }
  else
  {
    v11 = 0.0;
  }
  v15 = *a2;
  v18 = 0;
  v19 = v8;
  v20 = v11;
  v16 = **(float **)(v5 + 64);
  v17[0] = **(float **)(v5 + 56);
  v17[1] = v16;
  v17[2] = v8;
  v17[3] = v11;
  WebCore::CanvasRenderingContext2DBase::drawImage(a3, v6, v15, (const WebCore::FloatRect *)&v18, v17);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&,float,float)::$_0,WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &,float,float)::$_1,WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &,float,float)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  const WebCore::FloatRect *v4;
  float v5;
  float v6;
  uint64_t **v7;
  __int32 v8;
  float32x2_t v10;
  float v11;
  float v12;
  float32x2_t v13;
  float v14;
  float v15;

  v3 = *a1;
  v4 = (const WebCore::FloatRect *)(*(_QWORD *)a2 + 32);
  v5 = (float)*(int *)(*(_QWORD *)a2 + 40);
  v6 = (float)*(int *)(*(_QWORD *)a2 + 44);
  v13 = 0;
  v14 = v5;
  v15 = v6;
  v7 = *(uint64_t ***)(v3 + 48);
  v8 = **(_DWORD **)(v3 + 64);
  v10.i32[0] = **(_DWORD **)(v3 + 56);
  v10.i32[1] = v8;
  v11 = v5;
  v12 = v6;
  return WebCore::CanvasRenderingContext2DBase::drawImage(a3, v7, v4, &v13, &v10);
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&,float,float)::$_0,WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &,float,float)::$_1,WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &,float,float)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(uint64_t *a1@<X0>, const WebCore::FloatRect **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t **v5;
  const WebCore::FloatRect *v6;
  uint64_t v7;
  unsigned __int8 *v9;
  int v11;
  float v12;
  int v13;
  int v14;
  __int32 v15;
  float32x2_t v17;
  float v18;
  int v19;
  float32x2_t v20;
  float v21;
  int v22;

  v4 = *a1;
  v5 = *(uint64_t ***)(*a1 + 48);
  v6 = *a2;
  v7 = *((_QWORD *)*a2 + 142);
  if (!v7)
  {
    v12 = 0.0;
    v14 = 0;
    goto LABEL_12;
  }
  v9 = *(unsigned __int8 **)v7;
  if (__ldaxr(*(unsigned __int8 **)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v9);
LABEL_6:
  ++*((_QWORD *)v9 + 1);
  v11 = __ldxr(v9);
  if (v11 == 1)
  {
    if (!__stlxr(0, v9))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v9);
LABEL_11:
  v12 = (*(float (**)(_QWORD))(**(_QWORD **)(v7 + 72) + 288))(*(_QWORD *)(v7 + 72));
  v14 = v13;
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v7);
  v6 = *a2;
LABEL_12:
  v20 = 0;
  v21 = v12;
  v22 = v14;
  v15 = **(_DWORD **)(v4 + 64);
  v17.i32[0] = **(_DWORD **)(v4 + 56);
  v17.i32[1] = v15;
  v18 = v12;
  v19 = v14;
  return WebCore::CanvasRenderingContext2DBase::drawImage(a3, v5, v6, &v20, &v17);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&,float,float)::$_0,WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &,float,float)::$_1,WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &,float,float)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(uint64_t a1@<X0>, const WebCore::FloatRect **a2@<X1>, WebCore::CanvasRenderingContext2DBase *a3@<X8>)
{
  const WebCore::FloatRect *v3;
  float32x2_t v4;
  WebCore::WebCodecsVideoFrame *v5;
  __int32 v6;
  float32x2_t v8[2];

  v3 = *a2;
  v4 = vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)((char *)*a2 + 56)));
  v5 = *(WebCore::WebCodecsVideoFrame **)(*(_QWORD *)a1 + 48);
  v6 = **(_DWORD **)(*(_QWORD *)a1 + 64);
  v8[0].i32[0] = **(_DWORD **)(*(_QWORD *)a1 + 56);
  v8[0].i32[1] = v6;
  v8[1] = v4;
  return WebCore::CanvasRenderingContext2DBase::drawImage(a3, v5, v3, v8);
}

WebCore::CanvasRenderingContext *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&,float,float,float,float)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(uint64_t **a1@<X0>, _QWORD **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  double v11;
  uint64_t v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  float v16;
  float v17;
  float v18;
  unsigned int v19;
  uint64_t v20;
  float v22[4];
  uint64_t v23;
  float v24;
  float v25;

  v5 = *a1;
  v6 = *a2;
  v7 = *(_QWORD *)(v6[22] + 24);
  if (v7)
    v8 = *(_QWORD *)(v7 + 8);
  else
    v8 = 0;
  v9 = *v5;
  if ((v6[8] & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v6[8] & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    goto LABEL_22;
  if (v8)
  {
    v11 = WebCore::CachedImage::imageSizeForRenderer(v8, v6[8] & 0xFFFFFFFFFFFFLL, 0) * 64.0;
    if (v11 >= 2147483650.0)
      v12 = 0x7FFFFFFFLL;
    else
      v12 = v11 <= -2147483650.0 ? 0x80000000 : (int)v11;
    v13 = v10 * 64.0;
    if (v13 >= 2147483650.0)
      v14 = 0x7FFFFFFF00000000;
    else
      v14 = v13 <= -2147483650.0 ? 0x8000000000000000 : (unint64_t)(int)v13 << 32;
    v15 = v14 | v12;
    v6 = *a2;
  }
  else
  {
    v15 = 0;
  }
  v23 = 0;
  v24 = (float)(int)v15 * 0.015625;
  v25 = (float)SHIDWORD(v15) * 0.015625;
  v16 = *(float *)v5[2];
  v17 = *(float *)v5[3];
  v18 = *(float *)v5[4];
  v22[0] = *(float *)v5[1];
  v22[1] = v16;
  v22[2] = v17;
  v22[3] = v18;
  v19 = *(_DWORD *)(v9 + 132);
  if (!v19)
  {
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x195CF0560);
  }
  v20 = *(_QWORD *)(v9 + 120) + 560 * v19;
  return WebCore::CanvasRenderingContext2DBase::drawImage((WebCore::CanvasRenderingContext *)v9, v6, (float *)&v23, v22, (unsigned __int8 *)(v20 - 456), (unsigned __int8 *)(v20 - 455), a3);
}

WebCore::CanvasRenderingContext *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&,float,float,float,float)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, WebCore::CanvasRenderingContext *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  double v12;
  uint64_t v13;
  double v14;
  unint64_t v15;
  unint64_t v16;
  float v17;
  float v18;
  float v19;
  unsigned int v20;
  uint64_t v21;
  float v23[4];
  uint64_t v24;
  float v25;
  float v26;

  v5 = *a1;
  v6 = *(_QWORD **)a2;
  v7 = *(_QWORD *)(*(_QWORD *)a2 + 296);
  if (v7)
    v8 = *(_QWORD *)(v7 + 8);
  else
    v8 = 0;
  v9 = *(_QWORD *)v5;
  v10 = v6[8];
  if ((v10 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v10 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    goto LABEL_22;
  if (v8)
  {
    v12 = WebCore::CachedImage::imageSizeForRenderer(v8, v10 & 0xFFFFFFFFFFFFLL, 0) * 64.0;
    if (v12 >= 2147483650.0)
      v13 = 0x7FFFFFFFLL;
    else
      v13 = v12 <= -2147483650.0 ? 0x80000000 : (int)v12;
    v14 = v11 * 64.0;
    if (v14 >= 2147483650.0)
      v15 = 0x7FFFFFFF00000000;
    else
      v15 = v14 <= -2147483650.0 ? 0x8000000000000000 : (unint64_t)(int)v14 << 32;
    v16 = v15 | v13;
    v6 = *(_QWORD **)a2;
  }
  else
  {
    v16 = 0;
  }
  v24 = 0;
  v25 = (float)(int)v16 * 0.015625;
  v26 = (float)SHIDWORD(v16) * 0.015625;
  v17 = **(float **)(v5 + 16);
  v18 = **(float **)(v5 + 24);
  v19 = **(float **)(v5 + 32);
  v23[0] = **(float **)(v5 + 8);
  v23[1] = v17;
  v23[2] = v18;
  v23[3] = v19;
  v20 = *(_DWORD *)(v9 + 132);
  if (!v20)
  {
LABEL_22:
    __break(0xC471u);
    JUMPOUT(0x195CF0700);
  }
  v21 = *(_QWORD *)(v9 + 120) + 560 * v20;
  return WebCore::CanvasRenderingContext2DBase::drawImage(a3, v9, v6, (float *)&v24, v23, (unsigned __int8 *)(v21 - 456), (unsigned __int8 *)(v21 - 455));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&,float,float,float,float)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(uint64_t ****a1@<X0>, int32x2_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t ***v3;
  uint64_t **v4;
  unsigned int v5;
  __int32 *v6;
  unsigned int v7;
  int32x2_t v8;
  const WebCore::FloatRect *v9;
  int v10;
  unint64_t v12;
  __int32 v13;
  int v14;
  float32x2_t v15[2];

  v3 = *a1;
  v4 = **a1;
  v5 = *(_DWORD *)(*a1)[1];
  v6 = (__int32 *)(*a1)[3];
  v7 = *(_DWORD *)(*a1)[2];
  v8 = (*a2)[15];
  v9 = (const WebCore::FloatRect *)&(*a2)[14];
  v15[0] = 0;
  v15[1] = vcvt_f32_s32(v8);
  v8.i32[0] = *v6;
  v10 = *(_DWORD *)v3[4];
  v12 = __PAIR64__(v7, v5);
  v13 = v8.i32[0];
  v14 = v10;
  return WebCore::CanvasRenderingContext2DBase::drawImage(a3, v4, v9, v15, (float32x2_t *)&v12);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&,float,float,float,float)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(uint64_t ****a1@<X0>, const WebCore::FloatRect **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t ***v6;
  uint64_t **v7;
  const WebCore::FloatRect *v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  BOOL v13;
  float v14;
  float v16;
  float v17;
  float v18;
  float v20[4];
  uint64_t v21;
  float v22;
  float v23;

  v6 = *a1;
  v7 = **a1;
  v8 = *a2;
  v9 = *((_QWORD *)*a2 + 2);
  if (v9)
  {
    v11 = *(float *)(v9 + 16);
    v10 = *(float *)(v9 + 20);
    v12 = 2147500000.0;
    v13 = v11 > -2147500000.0 && v11 < 2147500000.0;
    v14 = (float)(int)v11;
    if (!v13)
      v14 = 2147500000.0;
    if (v10 < 2147500000.0 && v10 > -2147500000.0)
      v12 = (float)(int)v10;
  }
  else
  {
    v14 = 0.0;
    v12 = 0.0;
  }
  v21 = 0;
  v22 = v14;
  v23 = v12;
  v16 = *(float *)v6[2];
  v17 = *(float *)v6[3];
  v18 = *(float *)v6[4];
  v20[0] = *(float *)v6[1];
  v20[1] = v16;
  v20[2] = v17;
  v20[3] = v18;
  return WebCore::CanvasRenderingContext2DBase::drawImage(a3, v7, v8, (const WebCore::FloatRect *)&v21, v20);
}

float std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&,float,float,float,float)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<S0>(WebCore::CSSStyleImageValue ***a1@<X0>, const WebCore::FloatRect **a2@<X1>, WebCore::CanvasRenderingContext2DBase *a3@<X8>)
{
  WebCore::CSSStyleImageValue **v5;
  WebCore::CSSStyleImageValue *v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  double v12;
  float v13;
  double v14;
  float *v15;
  float v16;
  const WebCore::FloatRect *v17;
  float v18;
  float v19;
  float v20;
  float result;
  float v22[4];
  uint64_t v23;
  float v24;
  float v25;

  v5 = *a1;
  v6 = **a1;
  v7 = *((_QWORD *)*a2 + 5);
  v8 = 0.0;
  if (*(_BYTE *)(v7 + 64) && (v9 = *(_QWORD *)(v7 + 56)) != 0)
  {
    v10 = *(_QWORD *)(v9 + 8);
    v11 = 0.0;
    if (v10)
    {
      v12 = WebCore::CachedImage::imageSizeForRenderer(v10, 0, 0) * 64.0;
      if (v12 >= 2147483650.0)
      {
        v8 = 33554000.0;
      }
      else if (v12 <= -2147483650.0)
      {
        v8 = -33554000.0;
      }
      else
      {
        v8 = (float)(int)v12 * 0.015625;
      }
      v14 = v13 * 64.0;
      if (v14 >= 2147483650.0)
      {
        v11 = 33554000.0;
      }
      else if (v14 <= -2147483650.0)
      {
        v11 = -33554000.0;
      }
      else
      {
        v11 = (float)(int)v14 * 0.015625;
      }
    }
  }
  else
  {
    v11 = 0.0;
  }
  v15 = (float *)v5[2];
  v16 = *(float *)v5[1];
  v17 = *a2;
  v23 = 0;
  v24 = v8;
  v25 = v11;
  v18 = *v15;
  v19 = *(float *)v5[3];
  v20 = *(float *)v5[4];
  v22[0] = v16;
  v22[1] = v18;
  v22[2] = v19;
  v22[3] = v20;
  WebCore::CanvasRenderingContext2DBase::drawImage(a3, v6, v17, (const WebCore::FloatRect *)&v23, v22);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&,float,float,float,float)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(uint64_t ****a1@<X0>, int32x2_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t ***v3;
  uint64_t **v4;
  unsigned int v5;
  __int32 *v6;
  unsigned int v7;
  int32x2_t v8;
  const WebCore::FloatRect *v9;
  int v10;
  unint64_t v12;
  __int32 v13;
  int v14;
  float32x2_t v15[2];

  v3 = *a1;
  v4 = **a1;
  v5 = *(_DWORD *)(*a1)[1];
  v6 = (__int32 *)(*a1)[3];
  v7 = *(_DWORD *)(*a1)[2];
  v8 = (*a2)[5];
  v9 = (const WebCore::FloatRect *)&(*a2)[4];
  v15[0] = 0;
  v15[1] = vcvt_f32_s32(v8);
  v8.i32[0] = *v6;
  v10 = *(_DWORD *)v3[4];
  v12 = __PAIR64__(v7, v5);
  v13 = v8.i32[0];
  v14 = v10;
  return WebCore::CanvasRenderingContext2DBase::drawImage(a3, v4, v9, v15, (float32x2_t *)&v12);
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&,float,float,float,float)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(uint64_t ****a1@<X0>, const WebCore::FloatRect **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t ***v4;
  uint64_t **v5;
  const WebCore::FloatRect *v6;
  uint64_t v7;
  unsigned __int8 *v9;
  int v11;
  float v12;
  int v13;
  int v14;
  uint64_t **v15;
  unsigned int v16;
  int v17;
  int v18;
  unint64_t v20;
  int v21;
  int v22;
  float32x2_t v23;
  float v24;
  int v25;

  v4 = *a1;
  v5 = **a1;
  v6 = *a2;
  v7 = *((_QWORD *)*a2 + 142);
  if (!v7)
  {
    v12 = 0.0;
    v14 = 0;
    goto LABEL_12;
  }
  v9 = *(unsigned __int8 **)v7;
  if (__ldaxr(*(unsigned __int8 **)v7))
  {
    __clrex();
  }
  else if (!__stxr(1u, v9))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v9);
LABEL_6:
  ++*((_QWORD *)v9 + 1);
  v11 = __ldxr(v9);
  if (v11 == 1)
  {
    if (!__stlxr(0, v9))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v9);
LABEL_11:
  v12 = (*(float (**)(_QWORD))(**(_QWORD **)(v7 + 72) + 288))(*(_QWORD *)(v7 + 72));
  v14 = v13;
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v7);
  v6 = *a2;
LABEL_12:
  v15 = v4[2];
  v16 = *(_DWORD *)v4[1];
  v23 = 0;
  v24 = v12;
  v25 = v14;
  v17 = *(_DWORD *)v4[3];
  v18 = *(_DWORD *)v4[4];
  v20 = __PAIR64__(*(_DWORD *)v15, v16);
  v21 = v17;
  v22 = v18;
  return WebCore::CanvasRenderingContext2DBase::drawImage(a3, v5, v6, &v23, (float32x2_t *)&v20);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&,float,float,float,float)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(WebCore::WebCodecsVideoFrame ***a1@<X0>, const WebCore::FloatRect **a2@<X1>, WebCore::CanvasRenderingContext2DBase *a3@<X8>)
{
  WebCore::WebCodecsVideoFrame *v3;
  __int32 v4;
  const WebCore::FloatRect *v5;
  int v6;
  int v7;
  float32x2_t v9;
  int v10;
  int v11;

  v3 = **a1;
  v4 = *(_DWORD *)(*a1)[2];
  v5 = *a2;
  v6 = *(_DWORD *)(*a1)[3];
  v7 = *(_DWORD *)(*a1)[4];
  v9.i32[0] = *(_DWORD *)(*a1)[1];
  v9.i32[1] = v4;
  v10 = v6;
  v11 = v7;
  return WebCore::CanvasRenderingContext2DBase::drawImage(a3, v3, v5, &v9);
}

WebCore::CanvasRenderingContext *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&,float,float,float,float,float,float,float,float)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(WebCore::CanvasRenderingContext ***a1@<X0>, _QWORD **a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::CanvasRenderingContext **v3;
  WebCore::CanvasRenderingContext *result;
  float v5;
  float v6;
  float *v7;
  float v8;
  float v9;
  float *v10;
  float v11;
  _QWORD *v12;
  float v13;
  float v14;
  unsigned int v15;
  uint64_t v16;
  float v17[4];
  float v18[4];

  v3 = *a1;
  result = **a1;
  v5 = *(float *)v3[2];
  v6 = *(float *)v3[3];
  v7 = (float *)v3[5];
  v8 = *(float *)v3[4];
  v18[0] = *(float *)v3[1];
  v18[1] = v5;
  v9 = *v7;
  v10 = (float *)v3[7];
  v11 = *(float *)v3[6];
  v12 = *a2;
  v18[2] = v6;
  v18[3] = v8;
  v13 = *v10;
  v14 = *(float *)v3[8];
  v17[0] = v9;
  v17[1] = v11;
  v17[2] = v13;
  v17[3] = v14;
  v15 = *((_DWORD *)result + 33);
  if (v15)
  {
    v16 = *((_QWORD *)result + 15) + 560 * v15;
    return WebCore::CanvasRenderingContext2DBase::drawImage(result, v12, v18, v17, (unsigned __int8 *)(v16 - 456), (unsigned __int8 *)(v16 - 455), a3);
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

WebCore::CanvasRenderingContext *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&,float,float,float,float,float,float,float,float)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(uint64_t **a1@<X0>, _QWORD **a2@<X1>, WebCore::CanvasRenderingContext *a3@<X8>)
{
  WebCore::CanvasRenderingContext *result;
  uint64_t *v6;
  uint64_t v7;
  float v8;
  float v9;
  float *v10;
  float v11;
  float v12;
  float *v13;
  float v14;
  _QWORD *v15;
  float v16;
  float v17;
  unsigned int v18;
  uint64_t v19;
  float v20[4];
  float v21[4];

  result = a3;
  v6 = *a1;
  v7 = **a1;
  v8 = *(float *)(*a1)[2];
  v9 = *(float *)(*a1)[3];
  v10 = (float *)(*a1)[5];
  v11 = *(float *)(*a1)[4];
  v21[0] = *(float *)(*a1)[1];
  v21[1] = v8;
  v12 = *v10;
  v13 = (float *)v6[7];
  v14 = *(float *)v6[6];
  v15 = *a2;
  v21[2] = v9;
  v21[3] = v11;
  v16 = *v13;
  v17 = *(float *)v6[8];
  v20[0] = v12;
  v20[1] = v14;
  v20[2] = v16;
  v20[3] = v17;
  v18 = *(_DWORD *)(v7 + 132);
  if (v18)
  {
    v19 = *(_QWORD *)(v7 + 120) + 560 * v18;
    return WebCore::CanvasRenderingContext2DBase::drawImage(result, v7, v15, v21, v20, (unsigned __int8 *)(v19 - 456), (unsigned __int8 *)(v19 - 455));
  }
  else
  {
    __break(0xC471u);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&,float,float,float,float,float,float,float,float)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(uint64_t ****a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t ***v3;
  uint64_t **v4;
  __int32 v5;
  int v6;
  uint64_t **v7;
  int v8;
  unsigned int v9;
  uint64_t **v10;
  unsigned int v11;
  const WebCore::FloatRect *v12;
  int v13;
  int v14;
  unint64_t v16;
  int v17;
  int v18;
  float32x2_t v19;
  int v20;
  int v21;

  v3 = *a1;
  v4 = **a1;
  v5 = *(_DWORD *)(*a1)[2];
  v6 = *(_DWORD *)(*a1)[3];
  v7 = (*a1)[5];
  v8 = *(_DWORD *)(*a1)[4];
  v19.i32[0] = *(_DWORD *)(*a1)[1];
  v19.i32[1] = v5;
  v9 = *(_DWORD *)v7;
  v10 = v3[7];
  v11 = *(_DWORD *)v3[6];
  v12 = (const WebCore::FloatRect *)(*a2 + 112);
  v20 = v6;
  v21 = v8;
  v13 = *(_DWORD *)v10;
  v14 = *(_DWORD *)v3[8];
  v16 = __PAIR64__(v11, v9);
  v17 = v13;
  v18 = v14;
  return WebCore::CanvasRenderingContext2DBase::drawImage(a3, v4, v12, &v19, (float32x2_t *)&v16);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&,float,float,float,float,float,float,float,float)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(uint64_t ****a1@<X0>, const WebCore::FloatRect **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t ***v3;
  uint64_t **v4;
  int v5;
  int v6;
  float *v7;
  int v8;
  float v9;
  const WebCore::FloatRect *v10;
  float v11;
  float v12;
  float v14[4];
  _DWORD v15[4];

  v3 = *a1;
  v4 = **a1;
  v5 = *(_DWORD *)(*a1)[2];
  v6 = *(_DWORD *)(*a1)[3];
  v7 = (float *)(*a1)[5];
  v8 = *(_DWORD *)(*a1)[4];
  v15[0] = *(_DWORD *)(*a1)[1];
  v15[1] = v5;
  v15[2] = v6;
  v15[3] = v8;
  v9 = *(float *)v3[6];
  v10 = *a2;
  v11 = *(float *)v3[7];
  v12 = *(float *)v3[8];
  v14[0] = *v7;
  v14[1] = v9;
  v14[2] = v11;
  v14[3] = v12;
  return WebCore::CanvasRenderingContext2DBase::drawImage(a3, v4, v10, (const WebCore::FloatRect *)v15, v14);
}

float std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&,float,float,float,float,float,float,float,float)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<S0>(WebCore::CSSStyleImageValue ***a1@<X0>, const WebCore::FloatRect **a2@<X1>, WebCore::CanvasRenderingContext2DBase *a3@<X8>)
{
  WebCore::CSSStyleImageValue **v3;
  WebCore::CSSStyleImageValue *v4;
  int v5;
  int v6;
  float *v7;
  int v8;
  float v9;
  float *v10;
  float v11;
  const WebCore::FloatRect *v12;
  float v13;
  float v14;
  float result;
  float v16[4];
  _DWORD v17[4];

  v3 = *a1;
  v4 = **a1;
  v5 = *(_DWORD *)(*a1)[2];
  v6 = *(_DWORD *)(*a1)[3];
  v7 = (float *)(*a1)[5];
  v8 = *(_DWORD *)(*a1)[4];
  v17[0] = *(_DWORD *)(*a1)[1];
  v17[1] = v5;
  v9 = *v7;
  v10 = (float *)v3[7];
  v11 = *(float *)v3[6];
  v12 = *a2;
  v17[2] = v6;
  v17[3] = v8;
  v13 = *v10;
  v14 = *(float *)v3[8];
  v16[0] = v9;
  v16[1] = v11;
  v16[2] = v13;
  v16[3] = v14;
  WebCore::CanvasRenderingContext2DBase::drawImage(a3, v4, v12, (const WebCore::FloatRect *)v17, v16);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&,float,float,float,float,float,float,float,float)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(uint64_t ****a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t ***v3;
  uint64_t **v4;
  __int32 v5;
  int v6;
  uint64_t **v7;
  int v8;
  unsigned int v9;
  uint64_t **v10;
  unsigned int v11;
  const WebCore::FloatRect *v12;
  int v13;
  int v14;
  unint64_t v16;
  int v17;
  int v18;
  float32x2_t v19;
  int v20;
  int v21;

  v3 = *a1;
  v4 = **a1;
  v5 = *(_DWORD *)(*a1)[2];
  v6 = *(_DWORD *)(*a1)[3];
  v7 = (*a1)[5];
  v8 = *(_DWORD *)(*a1)[4];
  v19.i32[0] = *(_DWORD *)(*a1)[1];
  v19.i32[1] = v5;
  v9 = *(_DWORD *)v7;
  v10 = v3[7];
  v11 = *(_DWORD *)v3[6];
  v12 = (const WebCore::FloatRect *)(*a2 + 32);
  v20 = v6;
  v21 = v8;
  v13 = *(_DWORD *)v10;
  v14 = *(_DWORD *)v3[8];
  v16 = __PAIR64__(v11, v9);
  v17 = v13;
  v18 = v14;
  return WebCore::CanvasRenderingContext2DBase::drawImage(a3, v4, v12, &v19, (float32x2_t *)&v16);
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&,float,float,float,float,float,float,float,float)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(uint64_t ****a1@<X0>, const WebCore::FloatRect **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t ***v3;
  uint64_t **v4;
  __int32 v5;
  int v6;
  uint64_t **v7;
  int v8;
  unsigned int v9;
  uint64_t **v10;
  unsigned int v11;
  const WebCore::FloatRect *v12;
  int v13;
  int v14;
  unint64_t v16;
  int v17;
  int v18;
  float32x2_t v19;
  int v20;
  int v21;

  v3 = *a1;
  v4 = **a1;
  v5 = *(_DWORD *)(*a1)[2];
  v6 = *(_DWORD *)(*a1)[3];
  v7 = (*a1)[5];
  v8 = *(_DWORD *)(*a1)[4];
  v19.i32[0] = *(_DWORD *)(*a1)[1];
  v19.i32[1] = v5;
  v9 = *(_DWORD *)v7;
  v10 = v3[7];
  v11 = *(_DWORD *)v3[6];
  v12 = *a2;
  v20 = v6;
  v21 = v8;
  v13 = *(_DWORD *)v10;
  v14 = *(_DWORD *)v3[8];
  v16 = __PAIR64__(v11, v9);
  v17 = v13;
  v18 = v14;
  return WebCore::CanvasRenderingContext2DBase::drawImage(a3, v4, v12, &v19, (float32x2_t *)&v16);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::drawImage(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&,float,float,float,float,float,float,float,float)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(WebCore::WebCodecsVideoFrame ***a1@<X0>, const WebCore::FloatRect **a2@<X1>, WebCore::CanvasRenderingContext2DBase *a3@<X8>)
{
  const WebCore::FloatRect *v3;
  WebCore::WebCodecsVideoFrame *v4;
  __int32 v5;
  int v6;
  int v7;
  float32x2_t v9;
  int v10;
  int v11;

  v3 = *a2;
  v4 = **a1;
  v5 = *(_DWORD *)(*a1)[6];
  v6 = *(_DWORD *)(*a1)[7];
  v7 = *(_DWORD *)(*a1)[8];
  v9.i32[0] = *(_DWORD *)(*a1)[5];
  v9.i32[1] = v5;
  v10 = v6;
  v11 = v7;
  return WebCore::CanvasRenderingContext2DBase::drawImage(a3, v4, v3, &v9);
}

void WebCore::CanvasRenderingContext2DBase::calculateCompositingBufferRect<WebCore::FloatRect>(uint64_t a1, const WebCore::FloatRect *a2, unint64_t *a3)
{
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  double v9;
  unsigned int v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  int v24;
  unint64_t v25;
  float v26;
  float v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  float64x2_t v37[3];
  char v38[8];
  _BYTE v39[56];
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 56))(*(_QWORD *)(a1 + 32));
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 64))(*(_QWORD *)(a1 + 32));
  v35 = 0;
  v36 = __PAIR64__(v7, v6);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 248))(&v41, a1);
  v35 = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)&v41, (const WebCore::IntRect *)&v35);
  v36 = v8;
  v43 = 0;
  v9 = WebCore::Path::addRect((WebCore::Path *)&v41, a2);
  v40 = 0;
  if (v43 == -1)
  {
    v40 = -1;
  }
  else
  {
    *(_QWORD *)&v37[0].f64[0] = v39;
    ((void (*)(float64x2_t *, double))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_1[v43])(v37, v9);
  }
  v10 = *(_DWORD *)(a1 + 132);
  if (!v10)
  {
    __break(0xC471u);
    return;
  }
  WebCore::Path::transform((WebCore::Path *)v38, (float64x2_t *)(*(_QWORD *)(a1 + 120) + 560 * v10 - 448));
  (*(void (**)(float64x2_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 248))(v37, a1);
  WebCore::Path::transform((WebCore::Path *)v38, v37);
  if (v43 != -1)
    ((void (*)(float64x2_t *, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_1[v43])(v37, &v42);
  WebCore::Path::fastBoundingRect((WebCore::Path *)v38);
  v15 = floorf(v11);
  v16 = 2147500000.0;
  if (v15 < 2147500000.0)
  {
    v16 = -2147500000.0;
    if (v15 > -2147500000.0)
      v16 = (float)(int)v15;
  }
  v17 = floorf(v12);
  v18 = 2147500000.0;
  if (v17 < 2147500000.0)
  {
    v18 = -2147500000.0;
    if (v17 > -2147500000.0)
      v18 = (float)(int)v17;
  }
  v19 = v12 + v14;
  v20 = ceilf(v11 + v13);
  v21 = 2147500000.0;
  if (v20 < 2147500000.0)
  {
    v21 = -2147500000.0;
    if (v20 > -2147500000.0)
      v21 = (float)(int)v20;
  }
  v22 = ceilf(v19);
  v23 = 2147500000.0;
  if (v22 < 2147500000.0)
  {
    v23 = -2147500000.0;
    if (v22 > -2147500000.0)
      v23 = (float)(int)v22;
  }
  if (v16 >= 2147500000.0)
  {
    v24 = 0x7FFFFFFF;
  }
  else if (v16 <= -2147500000.0)
  {
    v24 = 0x80000000;
  }
  else
  {
    v24 = (int)v16;
  }
  if (v18 >= 2147500000.0)
  {
    v25 = 0x7FFFFFFF00000000;
  }
  else if (v18 <= -2147500000.0)
  {
    v25 = 0x8000000000000000;
  }
  else
  {
    v25 = (unint64_t)(int)v18 << 32;
  }
  v26 = v21 - v16;
  v27 = v23 - v18;
  if (v26 >= 2147500000.0)
  {
    v28 = 0x7FFFFFFF;
  }
  else if (v26 <= -2147500000.0)
  {
    v28 = 0x80000000;
  }
  else
  {
    v28 = (int)v26;
  }
  if (v27 >= 2147500000.0)
  {
    v29 = 0x7FFFFFFF;
  }
  else if (v27 <= -2147500000.0)
  {
    v29 = 0x80000000;
  }
  else
  {
    v29 = (int)v27;
  }
  if (v24 <= (int)v35)
    v30 = v35;
  else
    v30 = v24;
  if (SHIDWORD(v25) <= SHIDWORD(v35))
    v31 = HIDWORD(v35);
  else
    v31 = HIDWORD(v25);
  v32 = v28 + v24;
  if ((int)v36 + (int)v35 >= v32)
    v33 = v32;
  else
    v33 = v36 + v35;
  if (HIDWORD(v36) + HIDWORD(v35) >= v29 + HIDWORD(v25))
    v34 = v29 + HIDWORD(v25);
  else
    v34 = HIDWORD(v36) + HIDWORD(v35);
  if (v30 < v33 && (int)v31 < v34)
  {
    if (!a3)
      goto LABEL_47;
    goto LABEL_46;
  }
  v30 = 0;
  v31 = 0;
  if (a3)
LABEL_46:
    *a3 = (v25 - (v31 << 32)) | (v24 - v30);
LABEL_47:
  if (v40 != -1)
    ((void (*)(uint64_t *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_1[v40])(&v41, v39);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::setStrokeStyle(std::variant<WTF::String,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>> &&)::$_0,WebCore::CanvasRenderingContext2DBase::setStrokeStyle(std::variant<WTF::String,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>> &)::$_1,WebCore::CanvasRenderingContext2DBase::setStrokeStyle(std::variant<WTF::String,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>> &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>> &&>(uint64_t **a1, unsigned int **a2)
{
  return WebCore::CanvasRenderingContext2DBase::setStrokeColor(**a1, a2, 0);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::setStrokeStyle(std::variant<WTF::String,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>> &&)::$_0,WebCore::CanvasRenderingContext2DBase::setStrokeStyle(std::variant<WTF::String,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>> &)::$_1,WebCore::CanvasRenderingContext2DBase::setStrokeStyle(std::variant<WTF::String,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>> &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>> &&>(uint64_t a1, WebCore::CanvasGradient **a2)
{
  uint64_t v2;
  WebCore::CanvasGradient *v3;
  uint64_t result;
  void *v5;
  WTF *v6;
  void *v7;
  WebCore::CanvasGradient *v8;
  int v9;
  char v10;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v3 = *a2;
  *a2 = 0;
  ++*(_DWORD *)v3;
  v8 = v3;
  v9 = 1;
  result = WebCore::CanvasRenderingContext2DBase::setStrokeStyle(v2, &v8);
  if (v9 != -1)
    result = ((uint64_t (*)(char *, WebCore::CanvasGradient **))off_1E33DC6C8[v9])(&v10, &v8);
  v9 = -1;
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::CanvasGradient::~CanvasGradient(v3, v5);
    return WTF::fastFree(v6, v7);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::setStrokeStyle(std::variant<WTF::String,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>> &&)::$_0,WebCore::CanvasRenderingContext2DBase::setStrokeStyle(std::variant<WTF::String,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>> &)::$_1,WebCore::CanvasRenderingContext2DBase::setStrokeStyle(std::variant<WTF::String,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>> &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>> &&>(uint64_t a1, WTF **a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  int v10;
  char v11;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v3 = *a2;
  *a2 = 0;
  ++*(_DWORD *)v3;
  v9 = v3;
  v10 = 2;
  result = WebCore::CanvasRenderingContext2DBase::setStrokeStyle(v2, &v9);
  if (v10 != -1)
    result = ((uint64_t (*)(char *, WTF **))off_1E33DC6C8[v10])(&v11, &v9);
  v10 = -1;
  if (*(_DWORD *)v3 == 1)
  {
    v6 = *((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 1)
      {
        if (*(_BYTE *)(v6 + 40))
        {
          v7 = *(unsigned int *)(v6 + 32);
          if ((_DWORD)v7 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v7])(&v11, v6 + 24);
          *(_DWORD *)(v6 + 32) = -1;
        }
        v8 = *(unsigned int *)(v6 + 16);
        if ((_DWORD)v8 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v8])(&v11, v6 + 8);
        *(_DWORD *)(v6 + 16) = -1;
        WTF::fastFree((WTF *)v6, v5);
      }
      else
      {
        --*(_DWORD *)v6;
      }
    }
    return WTF::fastFree(v3, v5);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::setFillStyle(std::variant<WTF::String,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>> &&)::$_0,WebCore::CanvasRenderingContext2DBase::setFillStyle(std::variant<WTF::String,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>> &)::$_1,WebCore::CanvasRenderingContext2DBase::setFillStyle(std::variant<WTF::String,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>> &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>> &&>(uint64_t **a1, unsigned int **a2)
{
  return WebCore::CanvasRenderingContext2DBase::setFillColor(**a1, a2, 0);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::setFillStyle(std::variant<WTF::String,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>> &&)::$_0,WebCore::CanvasRenderingContext2DBase::setFillStyle(std::variant<WTF::String,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>> &)::$_1,WebCore::CanvasRenderingContext2DBase::setFillStyle(std::variant<WTF::String,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>> &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>> &&>(uint64_t a1, WebCore::CanvasGradient **a2)
{
  uint64_t v2;
  WebCore::CanvasGradient *v3;
  uint64_t result;
  void *v5;
  WTF *v6;
  void *v7;
  WebCore::CanvasGradient *v8;
  int v9;
  char v10;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v3 = *a2;
  *a2 = 0;
  ++*(_DWORD *)v3;
  v8 = v3;
  v9 = 1;
  result = WebCore::CanvasRenderingContext2DBase::setFillStyle(v2, &v8);
  if (v9 != -1)
    result = ((uint64_t (*)(char *, WebCore::CanvasGradient **))off_1E33DC6C8[v9])(&v10, &v8);
  v9 = -1;
  if (*(_DWORD *)v3 == 1)
  {
    WebCore::CanvasGradient::~CanvasGradient(v3, v5);
    return WTF::fastFree(v6, v7);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::setFillStyle(std::variant<WTF::String,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>> &&)::$_0,WebCore::CanvasRenderingContext2DBase::setFillStyle(std::variant<WTF::String,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>> &)::$_1,WebCore::CanvasRenderingContext2DBase::setFillStyle(std::variant<WTF::String,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>> &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::String,WTF::RefPtr<WebCore::CanvasGradient,WTF::RawPtrTraits<WebCore::CanvasGradient>,WTF::DefaultRefDerefTraits<WebCore::CanvasGradient>>,WTF::RefPtr<WebCore::CanvasPattern,WTF::RawPtrTraits<WebCore::CanvasPattern>,WTF::DefaultRefDerefTraits<WebCore::CanvasPattern>>> &&>(uint64_t a1, WTF **a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  int v10;
  char v11;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v3 = *a2;
  *a2 = 0;
  ++*(_DWORD *)v3;
  v9 = v3;
  v10 = 2;
  result = WebCore::CanvasRenderingContext2DBase::setFillStyle(v2, &v9);
  if (v10 != -1)
    result = ((uint64_t (*)(char *, WTF **))off_1E33DC6C8[v10])(&v11, &v9);
  v10 = -1;
  if (*(_DWORD *)v3 == 1)
  {
    v6 = *((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 1)
      {
        if (*(_BYTE *)(v6 + 40))
        {
          v7 = *(unsigned int *)(v6 + 32);
          if ((_DWORD)v7 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v7])(&v11, v6 + 24);
          *(_DWORD *)(v6 + 32) = -1;
        }
        v8 = *(unsigned int *)(v6 + 16);
        if ((_DWORD)v8 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v8])(&v11, v6 + 8);
        *(_DWORD *)(v6 + 16) = -1;
        WTF::fastFree((WTF *)v6, v5);
      }
      else
      {
        --*(_DWORD *)v6;
      }
    }
    return WTF::fastFree(v3, v5);
  }
  else
  {
    --*(_DWORD *)v3;
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::createPattern(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&,WTF::String const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, WebCore::CanvasRenderingContext2DBase *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  WebCore::RenderElement *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  WebCore::CanvasRenderingContext2DBase *v19;
  uint64_t v20;
  unsigned int *v21;
  _BYTE v22[21];
  unsigned int v23[2];

  v3 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(*a2 + 176) + 24);
  if (!v4)
    goto LABEL_3;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_3;
  v6 = **a1;
  v7 = *(unsigned __int8 *)(*a1)[1];
  v8 = *(unsigned __int8 *)(*a1)[2];
  v9 = *(_QWORD *)(v5 + 8);
  v19 = a3;
  if (!v9)
  {
    v9 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 8) = v5;
    v16 = *(unsigned int **)(v5 + 8);
    *(_QWORD *)(v5 + 8) = v9;
    if (v16)
    {
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, a2);
      }
      v9 = *(_QWORD *)(v5 + 8);
      a3 = v19;
      if (!v9)
      {
LABEL_3:
        v21 = 0;
        goto LABEL_4;
      }
    }
  }
  do
    v10 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v10 + 1, (unsigned int *)v9));
  v21 = (unsigned int *)v9;
  v11 = *(_QWORD *)(v9 + 8);
  a3 = v19;
  if (!v11)
    goto LABEL_4;
  *(_QWORD *)v23 = &v21;
  ++*(_DWORD *)(v11 + 548);
  v12 = *(_QWORD *)(v11 + 488);
  if (v12 && *(_QWORD *)(v12 + 8))
  {
    WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v11 + 464), (uint64_t *)v23, (uint64_t)v22);
    a3 = v19;
    if (!v21)
      goto LABEL_4;
    v11 = *((_QWORD *)v21 + 1);
    if (!v11)
      goto LABEL_4;
  }
  else
  {
    a3 = v19;
  }
  if ((*(_BYTE *)(*(_QWORD *)(v3 + 176) + 128) & 8) == 0)
  {
LABEL_4:
    *(_QWORD *)a3 = 0;
    *((_DWORD *)a3 + 4) = 0;
    goto LABEL_5;
  }
  if ((*(_WORD *)(v11 + 557) & 0xE0) == 0x60)
  {
    *(_BYTE *)v19 = 8;
    *((_QWORD *)v19 + 1) = 0;
    *((_DWORD *)v19 + 4) = 1;
    goto LABEL_5;
  }
  *(_DWORD *)&v22[3] = 0;
  *(_DWORD *)v22 = 0;
  *(unsigned int *)((char *)v23 + 3) = 0;
  v23[0] = 0;
  v20 = 0;
  v13 = *(_DWORD **)(v11 + 688);
  if (v13)
  {
    ++v13[2];
    (*(void (**)(_DWORD *, _BYTE *, unsigned int *, uint64_t *))(*(_QWORD *)v13 + 160))(v13, v22, v23, &v20);
    if (v13[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    else
      --v13[2];
  }
  if (v22[4] && v22[4] != 11)
  {
    if (v22[6])
    {
      if (*(float *)v22 == 0.0)
        goto LABEL_37;
    }
    else if (!*(_DWORD *)v22)
    {
      goto LABEL_37;
    }
  }
  if (!LOBYTE(v23[1]) || LOBYTE(v23[1]) == 11)
  {
LABEL_26:
    if (v21)
      v14 = (WebCore::RenderElement *)*((_QWORD *)v21 + 1);
    else
      v14 = 0;
    v15 = *(_QWORD *)(v3 + 64);
    if ((v15 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v15 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195CF1978);
    }
    WebCore::CanvasRenderingContext2DBase::createPattern(v19, *(WebCore::CachedImage **)(v6 + 32), v14, (const WebCore::RenderObject *)(v15 & 0xFFFFFFFFFFFFLL), v7 != 0, v8 != 0);
    goto LABEL_38;
  }
  if (BYTE2(v23[1]))
  {
    if (*(float *)v23 != 0.0)
      goto LABEL_26;
  }
  else if (v23[0])
  {
    goto LABEL_26;
  }
LABEL_37:
  *(_QWORD *)v19 = 0;
  *((_DWORD *)v19 + 4) = 0;
LABEL_38:
  if (LOBYTE(v23[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v23[0]);
  }
  if (v22[4] == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)v22);
  }
LABEL_5:
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v21, a2);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::createPattern(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&,WTF::String const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>(uint64_t **a1@<X0>, uint64_t *a2@<X1>, WebCore::CanvasRenderingContext2DBase *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  WebCore::RenderElement *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  WebCore::CanvasRenderingContext2DBase *v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22[2];
  unsigned int v23[2];

  v3 = *a2;
  v4 = *(_QWORD *)(*a2 + 296);
  if (!v4)
    goto LABEL_3;
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5)
    goto LABEL_3;
  v6 = **a1;
  v7 = *(unsigned __int8 *)(*a1)[1];
  v8 = *(unsigned __int8 *)(*a1)[2];
  v9 = *(_QWORD *)(v5 + 8);
  v19 = a3;
  if (!v9)
  {
    v9 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 8) = v5;
    v16 = *(unsigned int **)(v5 + 8);
    *(_QWORD *)(v5 + 8) = v9;
    if (v16)
    {
      do
      {
        v17 = __ldaxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
      {
        atomic_store(1u, v16);
        WTF::fastFree((WTF *)v16, a2);
      }
      v9 = *(_QWORD *)(v5 + 8);
      a3 = v19;
      if (!v9)
      {
LABEL_3:
        v21 = 0;
LABEL_4:
        *(_QWORD *)a3 = 0;
        *((_DWORD *)a3 + 4) = 0;
        goto LABEL_5;
      }
    }
  }
  do
    v10 = __ldaxr((unsigned int *)v9);
  while (__stlxr(v10 + 1, (unsigned int *)v9));
  v21 = (unsigned int *)v9;
  v11 = *(_QWORD *)(v9 + 8);
  a3 = v19;
  if (!v11)
    goto LABEL_4;
  *(_QWORD *)v23 = &v21;
  ++*(_DWORD *)(v11 + 548);
  v12 = *(_QWORD *)(v11 + 488);
  if (v12)
  {
    if (*(_QWORD *)(v12 + 8))
    {
      WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v11 + 464), (uint64_t *)v23, (uint64_t)v22);
      a3 = v19;
      if (!v21)
        goto LABEL_4;
      v11 = *((_QWORD *)v21 + 1);
      if (!v11)
        goto LABEL_4;
    }
  }
  if ((*(_WORD *)(v11 + 557) >> 5) - 3 <= 1)
  {
    *(_BYTE *)v19 = 8;
    *((_QWORD *)v19 + 1) = 0;
    *((_DWORD *)v19 + 4) = 1;
    goto LABEL_5;
  }
  v13 = *(_DWORD **)(v11 + 688);
  if (!v13)
  {
    {
      if (WebCore::Image::nullImage(void)::nullImage)
      {
LABEL_34:
        v13 = *(_DWORD **)(*((_QWORD *)v21 + 1) + 688);
        goto LABEL_14;
      }
    }
    else
    {
      WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)v22);
      WebCore::Image::nullImage(void)::nullImage = *(_QWORD *)v22;
      if (*(_QWORD *)v22)
        goto LABEL_34;
    }
    a3 = v19;
    goto LABEL_4;
  }
LABEL_14:
  *(unsigned int *)((char *)v22 + 3) = 0;
  v22[0] = 0;
  *(unsigned int *)((char *)v23 + 3) = 0;
  v23[0] = 0;
  v20 = 0;
  if (v13)
  {
    ++v13[2];
    (*(void (**)(_DWORD *, unsigned int *, unsigned int *, uint64_t *))(*(_QWORD *)v13 + 160))(v13, v22, v23, &v20);
    if (v13[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    else
      --v13[2];
  }
  if (LOBYTE(v22[1]) && LOBYTE(v22[1]) != 11)
  {
    if (BYTE2(v22[1]))
    {
      if (*(float *)v22 == 0.0)
        goto LABEL_36;
    }
    else if (!v22[0])
    {
      goto LABEL_36;
    }
  }
  if (!LOBYTE(v23[1]) || LOBYTE(v23[1]) == 11)
  {
LABEL_25:
    if (v21)
      v14 = (WebCore::RenderElement *)*((_QWORD *)v21 + 1);
    else
      v14 = 0;
    v15 = *(_QWORD *)(v3 + 64);
    if ((v15 & 0xFFFFFFFFFFFFLL) != 0 && (*(_BYTE *)((v15 & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x195CF1CE0);
    }
    WebCore::CanvasRenderingContext2DBase::createPattern(v19, *(WebCore::CachedImage **)(v6 + 32), v14, (const WebCore::RenderObject *)(v15 & 0xFFFFFFFFFFFFLL), v7 != 0, v8 != 0);
    goto LABEL_37;
  }
  if (BYTE2(v23[1]))
  {
    if (*(float *)v23 != 0.0)
      goto LABEL_25;
  }
  else if (v23[0])
  {
    goto LABEL_25;
  }
LABEL_36:
  *(_QWORD *)v19 = 0;
  *((_DWORD *)v19 + 4) = 0;
LABEL_37:
  if (LOBYTE(v23[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v23[0]);
  }
  if (LOBYTE(v22[1]) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v22[0]);
  }
LABEL_5:
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v21, a2);
}

unsigned __int8 **std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::createPattern(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&,WTF::String const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, WebCore::CanvasRenderingContext2DBase *a3@<X8>)
{
  return WebCore::CanvasRenderingContext2DBase::createPattern(a3, (WebCore::CanvasBase *)(*(_QWORD *)a2 + 112), **(_BYTE **)(*(_QWORD *)a1 + 8), **(_BYTE **)(*(_QWORD *)a1 + 16));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::createPattern(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&,WTF::String const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  int v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;
  _BYTE v22[8];
  int v23;
  unsigned __int8 v24;
  char v25;
  _BYTE v26[54];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  v5 = *(_QWORD *)(*a2 + 16);
  if (!v5)
  {
    *(_BYTE *)a3 = 8;
    *(_QWORD *)(a3 + 8) = 0;
    *(_DWORD *)(a3 + 16) = 1;
    return result;
  }
  v6 = **(_BYTE **)(*(_QWORD *)result + 8);
  v7 = **(_BYTE **)(*(_QWORD *)result + 16);
  v8 = *(_QWORD *)(v5 + 8);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_6:
  ++*(_QWORD *)(v8 + 8);
  v10 = __ldxr((unsigned __int8 *)v8);
  if (v10 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v8))
      goto LABEL_11;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v8);
LABEL_11:
  v18 = v5;
  v19 = 1;
  LOBYTE(v20) = 0;
  v21 = -1;
  _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ImageBufferENSC_ISH_EENSE_ISH_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISQ_LNS0_6_TraitE1EEEEEvRSR_OT_EUlRSX_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SP_EEEOS15_EEEDcSX_DpT0_((uint64_t)v26, &v20, &v18);
  v21 = 1;
  v22[0] = 0;
  v24 = 0;
  v11 = *(_BYTE *)(v4 + 32) & 1;
  v12 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v12 = 1;
  *(_OWORD *)&v26[6] = constinit_2;
  *(_OWORD *)&v26[22] = unk_1969F1490;
  *(_OWORD *)&v26[38] = xmmword_1969F14A0;
  result = WTF::fastMalloc((WTF *)0x68);
  v13 = result;
  *(_BYTE *)(result + 8) = 0;
  *(_DWORD *)result = 1;
  *(_DWORD *)(result + 16) = -1;
  v14 = v21;
  if (v21 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JSU_ST_EEEDcmSW_DpOT0____fdiagonal[v21])(&v25, result + 8, &v20);
    *(_DWORD *)(v13 + 16) = v14;
  }
  *(_BYTE *)(v13 + 24) = 0;
  *(_BYTE *)(v13 + 40) = 0;
  v15 = v24;
  if (v24)
  {
    *(_DWORD *)(v13 + 32) = -1;
    v16 = v23;
    if (v23 == -1)
    {
      v15 = 1;
    }
    else
    {
      result = ((uint64_t (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JSU_ST_EEEDcmSW_DpOT0____fdiagonal[v23])(&v25);
      *(_DWORD *)(v13 + 32) = v16;
      v15 = v24;
    }
    *(_BYTE *)(v13 + 40) = 1;
  }
  v17 = *(_OWORD *)&v26[16];
  *(_OWORD *)(v13 + 50) = *(_OWORD *)v26;
  *(_BYTE *)(v13 + 48) = v6;
  *(_BYTE *)(v13 + 49) = v7;
  *(_OWORD *)(v13 + 66) = v17;
  *(_OWORD *)(v13 + 82) = *(_OWORD *)&v26[32];
  *(_QWORD *)(v13 + 96) = *(_QWORD *)&v26[46];
  *(_QWORD *)(v12 + 8) = v13;
  *(_BYTE *)(v12 + 16) = v11;
  *(_QWORD *)a3 = v12;
  *(_DWORD *)(a3 + 16) = 0;
  if (v15)
  {
    if (v23 != -1)
      result = ((uint64_t (*)(_BYTE *, _BYTE *))off_1E33DC740[v23])(v26, v22);
    v23 = -1;
  }
  if (v21 != -1)
    result = ((uint64_t (*)(_BYTE *, uint64_t *))off_1E33DC740[v21])(v26, &v20);
  v21 = -1;
  if (v19 != -1)
    return ((uint64_t (*)(_BYTE *, uint64_t *))off_1E33DC740[v19])(v26, &v18);
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::createPattern(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&,WTF::String const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 33;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
}

unsigned __int8 **std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::createPattern(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&,WTF::String const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, WebCore::CanvasRenderingContext2DBase *a3@<X8>)
{
  return WebCore::CanvasRenderingContext2DBase::createPattern(a3, (WebCore::CanvasBase *)(*(_QWORD *)a2 + 32), **(_BYTE **)(*(_QWORD *)a1 + 8), **(_BYTE **)(*(_QWORD *)a1 + 16));
}

unsigned __int8 **std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::createPattern(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&,WTF::String const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>@<X0>(unsigned __int8 **result@<X0>, WebCore::HTMLMediaElement **a2@<X1>, uint64_t a3@<X8>)
{
  WebCore::HTMLMediaElement *v4;
  uint64_t v5;
  char v6;
  char v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  WebCore::ThreadableBlobRegistry *v14;
  char *v15;
  char v16;
  uint64_t v17;
  unsigned __int8 *v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 **v23;
  int v24;
  void *v25;
  int v26;
  int v27;
  unsigned __int8 *v28;
  __n128 v29;
  uint64_t v30;
  unsigned __int8 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  int v37;
  float v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  const void *v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  int v49;
  float v50;
  int v51;
  int v52;
  uint64_t v53;
  unsigned __int8 *v54;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unsigned __int8 **v59;
  int v60;
  void *v61;
  int v62;
  int v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  int v72;
  int canRequest;
  uint64_t v74;
  unint64_t v75;
  int v76;
  _BYTE *v77;
  int v78;
  char v79[8];
  int v80;
  unsigned __int8 v81;
  unsigned __int8 **v82;
  char v83;
  _BYTE cf[54];
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v4 = *a2;
  if (*((int *)*a2 + 226) <= 1)
  {
LABEL_2:
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 16) = 0;
    return result;
  }
  v5 = *(_QWORD *)*result;
  v6 = **((_BYTE **)*result + 1);
  v7 = **((_BYTE **)*result + 2);
  v8 = *(_BYTE **)(v5 + 32);
  if (v8[72])
  {
    v9 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 80))(v8);
    v10 = *((_QWORD *)v4 + 142);
    if (!v10)
      goto LABEL_9;
    v11 = v9;
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v10 + 72) + 808))(*(_QWORD *)(v10 + 72)) & 1) != 0)
      goto LABEL_9;
    v12 = *((_QWORD *)v4 + 142);
    if (!v12)
      goto LABEL_9;
    v13 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v12 + 72) + 816))(*(_QWORD *)(v12 + 72), v11);
    if (v13 >= 0x100u)
    {
      v15 = (char *)(*(_QWORD *)(v5 + 32) + 72);
      if (!(_BYTE)v13)
        goto LABEL_10;
    }
    else
    {
      v14 = (WebCore::ThreadableBlobRegistry *)(v12 + 104);
      if ((WTF::URL::protocolIs() & 1) != 0)
      {
LABEL_9:
        v15 = (char *)(*(_QWORD *)(v5 + 32) + 72);
LABEL_10:
        v16 = *v15;
        goto LABEL_12;
      }
      {
        WebCore::EmptyOriginAccessPatterns::singleton(void)::instance = (uint64_t)&off_1E3400560;
      }
      canRequest = WebCore::SecurityOrigin::canRequest(v11, v14, (uint64_t (***)(_QWORD, uint64_t))&WebCore::EmptyOriginAccessPatterns::singleton(void)::instance);
      v15 = (char *)(*(_QWORD *)(v5 + 32) + 72);
      if (canRequest)
        goto LABEL_10;
    }
    v16 = 0;
    *v15 = 0;
  }
  else
  {
    v16 = 0;
  }
LABEL_12:
  v17 = *((_QWORD *)v4 + 142);
  if (!v17)
    goto LABEL_28;
  v18 = *(unsigned __int8 **)v17;
  if (__ldaxr(*(unsigned __int8 **)v17))
  {
    __clrex();
  }
  else if (!__stxr(1u, v18))
  {
    goto LABEL_17;
  }
  MEMORY[0x19AEA534C](v18);
LABEL_17:
  ++*((_QWORD *)v18 + 1);
  v20 = __ldxr(v18);
  if (v20 != 1)
  {
    __clrex();
    goto LABEL_21;
  }
  if (__stlxr(0, v18))
LABEL_21:
    WTF::Lock::unlockSlow((WTF::Lock *)v18);
  (*(void (**)(unsigned __int8 ***__return_ptr))(**(_QWORD **)(v17 + 72) + 672))(&v82);
  WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v17);
  v21 = (uint64_t)v82;
  if (v82)
  {
    v82 = 0;
    v75 = v21;
    v76 = 0;
    LOBYTE(v77) = 0;
    v78 = -1;
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ImageBufferENSC_ISH_EENSE_ISH_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISQ_LNS0_6_TraitE1EEEEEvRSR_OT_EUlRSX_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SP_EEEOS15_EEEDcSX_DpT0_((uint64_t)cf, &v77, (uint64_t *)&v75);
    v78 = 0;
    v79[0] = 0;
    v81 = 0;
    v22 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v22 = 1;
    *(_OWORD *)&cf[6] = constinit_2;
    *(_OWORD *)&cf[22] = unk_1969F1490;
    *(_OWORD *)&cf[38] = xmmword_1969F14A0;
    result = (unsigned __int8 **)WTF::fastMalloc((WTF *)0x68);
    v23 = result;
    *((_BYTE *)result + 8) = 0;
    *(_DWORD *)result = 1;
    *((_DWORD *)result + 4) = -1;
    v24 = v78;
    if (v78 != -1)
    {
      result = (unsigned __int8 **)((uint64_t (*)(char *, unsigned __int8 **, _BYTE **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JSU_ST_EEEDcmSW_DpOT0____fdiagonal[v78])(&v83, result + 1, &v77);
      *((_DWORD *)v23 + 4) = v24;
    }
    *((_BYTE *)v23 + 24) = 0;
    v25 = v23 + 3;
    *((_BYTE *)v23 + 40) = 0;
    v26 = v81;
    if (v81)
    {
      *((_DWORD *)v23 + 8) = -1;
      v27 = v80;
      if (v80 == -1)
      {
        v26 = 1;
      }
      else
      {
        result = (unsigned __int8 **)((uint64_t (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JSU_ST_EEEDcmSW_DpOT0____fdiagonal[v80])(&v83);
        *((_DWORD *)v23 + 8) = v27;
        v26 = v81;
      }
      *((_BYTE *)v23 + 40) = 1;
    }
    v32 = *(_OWORD *)&cf[16];
    *(_OWORD *)((char *)v23 + 50) = *(_OWORD *)cf;
    *((_BYTE *)v23 + 48) = v6;
    *((_BYTE *)v23 + 49) = v7;
    *(_OWORD *)((char *)v23 + 66) = v32;
    *(_OWORD *)((char *)v23 + 82) = *(_OWORD *)&cf[32];
    v23[12] = *(unsigned __int8 **)&cf[46];
    *(_QWORD *)(v22 + 8) = v23;
    *(_BYTE *)(v22 + 16) = v16;
    *(_QWORD *)a3 = v22;
    *(_DWORD *)(a3 + 16) = 0;
    if (v26)
    {
      if (v80 != -1)
        result = (unsigned __int8 **)((uint64_t (*)(_BYTE *, char *))off_1E33DC740[v80])(cf, v79);
      v80 = -1;
    }
    if (v78 != -1)
      result = (unsigned __int8 **)((uint64_t (*)(_BYTE *, _BYTE **))off_1E33DC740[v78])(cf, &v77);
    v78 = -1;
    if (v76 != -1)
      result = (unsigned __int8 **)((uint64_t (*)(_BYTE *, unint64_t *))off_1E33DC740[v76])(cf, &v75);
    v33 = (uint64_t)v82;
    v82 = 0;
    if (v33)
      return WTF::ThreadSafeRefCountedAndCanMakeThreadSafeWeakPtr<WebCore::WorkerOrWorkletThread,(WTF::DestructionThread)0>::deref((unsigned __int8 **)(v33 + 8), v25);
    return result;
  }
LABEL_28:
  v28 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 224))(v5);
  if (v28)
  {
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 224))(v5);
    v28 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v30 + 136))(v30);
    v31 = v28;
  }
  else
  {
    v31 = 0;
  }
  v34 = *((_QWORD *)v4 + 142);
  if (!v34)
  {
    v38 = 0.0;
    v40 = 0;
    goto LABEL_55;
  }
  v35 = *(unsigned __int8 **)v34;
  if (__ldaxr(*(unsigned __int8 **)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, v35))
  {
    goto LABEL_49;
  }
  MEMORY[0x19AEA534C](v35);
LABEL_49:
  ++*((_QWORD *)v35 + 1);
  v37 = __ldxr(v35);
  if (v37 == 1)
  {
    if (!__stlxr(0, v35))
      goto LABEL_54;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v35);
LABEL_54:
  v38 = (*(float (**)(_QWORD))(**(_QWORD **)(v34 + 72) + 288))(*(_QWORD *)(v34 + 72));
  v40 = v39;
  v28 = WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v34);
LABEL_55:
  v75 = __PAIR64__(v40, LODWORD(v38));
  if (*(_BYTE *)(v5 + 802) && *(_BYTE *)(v5 + 802) == 1)
  {
    v42 = (const void *)*WebCore::DestinationColorSpace::DisplayP3((WebCore::DestinationColorSpace *)v28);
  }
  else
  {
    v41 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v41 != -1)
    {
      *(_QWORD *)cf = &v82;
      v77 = cf;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v77, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    v42 = (const void *)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  }
  *(_QWORD *)cf = v42;
  if (v42)
    CFRetain(v42);
  WebCore::HTMLVideoElement::createBufferForPainting((uint64_t)v4, (float *)&v75, v31, (CFTypeRef *)cf, 1, (uint64_t *)&v82, v29);
  v43 = *(const void **)cf;
  *(_QWORD *)cf = 0;
  if (v43)
    CFRelease(v43);
  result = v82;
  if (!v82)
    goto LABEL_2;
  v44 = (*((uint64_t (**)(unsigned __int8 **))*v82 + 2))(v82);
  v45 = *((_QWORD *)v4 + 142);
  if (v45)
  {
    v46 = v44;
    v47 = *(unsigned __int8 **)v45;
    if (__ldaxr(*(unsigned __int8 **)v45))
    {
      __clrex();
    }
    else if (!__stxr(1u, v47))
    {
      goto LABEL_69;
    }
    MEMORY[0x19AEA534C](v47);
LABEL_69:
    ++*((_QWORD *)v47 + 1);
    v49 = __ldxr(v47);
    if (v49 == 1)
    {
      if (!__stlxr(0, v47))
      {
LABEL_74:
        v50 = (*(float (**)(_QWORD))(**(_QWORD **)(v45 + 72) + 288))(*(_QWORD *)(v45 + 72));
        v52 = v51;
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v45);
        v53 = *((_QWORD *)v4 + 142);
        *(_QWORD *)cf = 0;
        *(float *)&cf[8] = v50;
        *(_DWORD *)&cf[12] = v52;
        if (!v53)
          goto LABEL_87;
        v54 = *(unsigned __int8 **)v53;
        if (__ldaxr(*(unsigned __int8 **)v53))
        {
          __clrex();
        }
        else if (!__stxr(1u, v54))
        {
          goto LABEL_79;
        }
        MEMORY[0x19AEA534C](v54);
LABEL_79:
        ++*((_QWORD *)v54 + 1);
        v56 = __ldxr(v54);
        if (v56 == 1)
        {
          if (!__stlxr(0, v54))
            goto LABEL_84;
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v54);
LABEL_84:
        if (!*(_BYTE *)(v53 + 225))
        {
          *(_BYTE *)(v53 + 225) = 1;
          (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v53 + 72) + 320))(*(_QWORD *)(v53 + 72), 1);
          WebCore::HTMLMediaElement::visibilityStateChanged(v4);
        }
        (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v46 + 432))(v46, v53, cf);
        WTF::ThreadSafeWeakPtrControlBlock::strongDeref<WebCore::MediaPlayer,(WTF::DestructionThread)1>(*(unsigned __int8 **)v53);
        goto LABEL_87;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v47);
    goto LABEL_74;
  }
LABEL_87:
  v57 = (uint64_t)v82;
  v82 = 0;
  v75 = v57;
  v76 = 1;
  LOBYTE(v77) = 0;
  v78 = -1;
  _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ImageBufferENSC_ISH_EENSE_ISH_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISQ_LNS0_6_TraitE1EEEEEvRSR_OT_EUlRSX_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SP_EEEOS15_EEEDcSX_DpT0_((uint64_t)cf, &v77, (uint64_t *)&v75);
  v78 = 1;
  v79[0] = 0;
  v81 = 0;
  v58 = WTF::fastMalloc((WTF *)0x18);
  *(_DWORD *)v58 = 1;
  *(_OWORD *)&cf[6] = constinit_2;
  *(_OWORD *)&cf[22] = unk_1969F1490;
  *(_OWORD *)&cf[38] = xmmword_1969F14A0;
  result = (unsigned __int8 **)WTF::fastMalloc((WTF *)0x68);
  v59 = result;
  *(_DWORD *)result = 1;
  *((_BYTE *)result + 8) = 0;
  *((_DWORD *)result + 4) = -1;
  v60 = v78;
  if (v78 != -1)
  {
    result = (unsigned __int8 **)((uint64_t (*)(char *, unsigned __int8 **, _BYTE **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JSU_ST_EEEDcmSW_DpOT0____fdiagonal[v78])(&v83, result + 1, &v77);
    *((_DWORD *)v59 + 4) = v60;
  }
  *((_BYTE *)v59 + 24) = 0;
  v61 = v59 + 3;
  *((_BYTE *)v59 + 40) = 0;
  v62 = v81;
  if (v81)
  {
    *((_DWORD *)v59 + 8) = -1;
    v63 = v80;
    if (v80 == -1)
    {
      v62 = 1;
    }
    else
    {
      result = (unsigned __int8 **)((uint64_t (*)(char *))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JSU_ST_EEEDcmSW_DpOT0____fdiagonal[v80])(&v83);
      *((_DWORD *)v59 + 8) = v63;
      v62 = v81;
    }
    *((_BYTE *)v59 + 40) = 1;
  }
  *((_BYTE *)v59 + 48) = v6;
  *((_BYTE *)v59 + 49) = v7;
  v64 = *(_OWORD *)&cf[16];
  *(_OWORD *)((char *)v59 + 50) = *(_OWORD *)cf;
  *(_OWORD *)((char *)v59 + 66) = v64;
  *(_OWORD *)((char *)v59 + 82) = *(_OWORD *)&cf[32];
  v59[12] = *(unsigned __int8 **)&cf[46];
  *(_QWORD *)(v58 + 8) = v59;
  *(_BYTE *)(v58 + 16) = v16;
  *(_QWORD *)a3 = v58;
  *(_DWORD *)(a3 + 16) = 0;
  if (v62)
  {
    if (v80 != -1)
      result = (unsigned __int8 **)((uint64_t (*)(_BYTE *, char *))off_1E33DC740[v80])(cf, v79);
    v80 = -1;
  }
  if (v78 != -1)
    result = (unsigned __int8 **)((uint64_t (*)(_BYTE *, _BYTE **))off_1E33DC740[v78])(cf, &v77);
  v78 = -1;
  if (v76 != -1)
    result = (unsigned __int8 **)((uint64_t (*)(_BYTE *, unint64_t *))off_1E33DC740[v76])(cf, &v75);
  v65 = (uint64_t)v82;
  v82 = 0;
  if (v65)
  {
    v66 = *(_QWORD *)(v65 + 8);
    if (__ldaxr((unsigned __int8 *)v66))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v66))
    {
      goto LABEL_109;
    }
    result = (unsigned __int8 **)MEMORY[0x19AEA534C](v66);
LABEL_109:
    v68 = *(_QWORD *)(v66 + 8);
    v69 = v68 - 1;
    *(_QWORD *)(v66 + 8) = v68 - 1;
    if (v68 == 1)
    {
      v74 = *(_QWORD *)(v66 + 16);
      v70 = *(_QWORD *)(v66 + 24);
      *(_QWORD *)(v66 + 24) = 0;
      v71 = v74 != 0;
    }
    else
    {
      v70 = 0;
      v71 = 1;
    }
    v72 = __ldxr((unsigned __int8 *)v66);
    if (v72 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v66))
      {
LABEL_116:
        if (!v69)
        {
          if (v70)
            result = (unsigned __int8 **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
          if (!v71)
            return (unsigned __int8 **)WTF::fastFree((WTF *)v66, v61);
        }
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = (unsigned __int8 **)WTF::Lock::unlockSlow((WTF::Lock *)v66);
    goto LABEL_116;
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasRenderingContext2DBase::createPattern(std::variant<WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &&,WTF::String const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::HTMLImageElement,WTF::RawPtrTraits<WebCore::HTMLImageElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLImageElement>>,WTF::RefPtr<WebCore::SVGImageElement,WTF::RawPtrTraits<WebCore::SVGImageElement>,WTF::DefaultRefDerefTraits<WebCore::SVGImageElement>>,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::RefPtr<WebCore::ImageBitmap,WTF::RawPtrTraits<WebCore::ImageBitmap>,WTF::DefaultRefDerefTraits<WebCore::ImageBitmap>>,WTF::RefPtr<WebCore::CSSStyleImageValue,WTF::RawPtrTraits<WebCore::CSSStyleImageValue>,WTF::DefaultRefDerefTraits<WebCore::CSSStyleImageValue>>,WTF::RefPtr<WebCore::OffscreenCanvas,WTF::RawPtrTraits<WebCore::OffscreenCanvas>,WTF::DefaultRefDerefTraits<WebCore::OffscreenCanvas>>,WTF::RefPtr<WebCore::HTMLVideoElement,WTF::RawPtrTraits<WebCore::HTMLVideoElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLVideoElement>>,WTF::RefPtr<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>> &>(uint64_t a1@<X8>)
{
  *(_BYTE *)a1 = 33;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 1;
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::CanvasRenderingContext2DBase::*&)(void),WebCore::CanvasRenderingContext2DBase*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unsigned int *a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned int v6;
  int v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  char v17;
  int v18;
  int v19;
  BOOL v20;
  uint64_t v21;
  _BYTE *v22;
  size_t v23;
  uint64_t v24;
  char *v25;
  _BYTE *v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;

  v6 = *a2;
  if ((*a2 & 0x80000000) != 0)
  {
    v27 = -v6;
    v7 = 1;
    do
    {
      ++v7;
      v28 = v27 >= 0xA;
      v27 /= 0xAu;
    }
    while (v28);
  }
  else
  {
    v7 = 0;
    v8 = *a2;
    do
    {
      ++v7;
      v9 = v8 > 9;
      v8 /= 0xAu;
    }
    while (v9);
  }
  v10 = *(_DWORD *)(a3 + 8);
  v11 = *a4;
  if ((*a4 & 0x80000000) != 0)
  {
    v29 = -v11;
    v12 = 1;
    do
    {
      ++v12;
      v28 = v29 >= 0xA;
      v29 /= 0xAu;
    }
    while (v28);
  }
  else
  {
    v12 = 0;
    v13 = *a4;
    do
    {
      ++v12;
      v9 = v13 > 9;
      v13 /= 0xAu;
    }
    while (v9);
  }
  if ((v12 | v10) < 0)
    goto LABEL_28;
  v14 = 0;
  v15 = __OFADD__(v10, v12);
  v16 = v10 + v12;
  v17 = v15;
  if (v7 < 0 || (v17 & 1) != 0)
    goto LABEL_26;
  v14 = 0;
  v18 = *(_DWORD *)(result + 8);
  v15 = __OFADD__(v7, v16);
  v19 = v7 + v16;
  v20 = v15;
  if (v18 < 0 || v20)
    goto LABEL_26;
  v21 = (v18 + v19);
  if (__OFADD__(v18, v19))
    goto LABEL_28;
  if (!(_DWORD)v21)
  {
    v14 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_26;
  }
  if ((v21 & 0x80000000) != 0)
  {
LABEL_28:
    v14 = 0;
    goto LABEL_26;
  }
  v22 = *(_BYTE **)result;
  v23 = *(unsigned int *)(result + 8);
  v25 = *(char **)a3;
  v24 = *(_QWORD *)(a3 + 8);
  result = WTF::tryFastCompactMalloc((WTF *)(v21 + 20));
  v14 = v30;
  if (v30)
  {
    v26 = (_BYTE *)(v30 + 20);
    *(_DWORD *)v30 = 2;
    *(_DWORD *)(v30 + 4) = v21;
    *(_QWORD *)(v30 + 8) = v30 + 20;
    *(_DWORD *)(v30 + 16) = 4;
    if ((_DWORD)v23)
    {
      if ((_DWORD)v23 == 1)
        *v26 = *v22;
      else
        memcpy((void *)(v30 + 20), v22, v23);
    }
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>(&v26[v23], v6, v25, v24, v11);
  }
LABEL_26:
  *a5 = v14;
  return result;
}

char *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<int,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<int,void>>(char *__dst, unsigned int a2, char *__src, unsigned int a4, unsigned int a5)
{
  unsigned int v8;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  _BYTE *v13;
  size_t v14;
  unsigned int v15;
  char *v16;
  char *result;
  uint64_t v18;
  _BYTE *v19;
  size_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  BOOL v26;
  _BYTE v27[13];
  uint64_t v28;

  v8 = a2;
  v28 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  if ((a2 & 0x80000000) != 0)
  {
    v21 = -a2;
    do
    {
      v27[v10-- + 12] = (v21 % 0xA) | 0x30;
      v12 = v21 > 9;
      v21 /= 0xAu;
    }
    while (v12);
    v22 = v10 + 12;
    v13 = &v27[v10 + 12];
    *v13 = 45;
    if (v10 + 14 > 14)
      goto LABEL_7;
    if (v22 <= 12)
      v22 = 12;
    v14 = v22 - v10 - 11;
  }
  else
  {
    v11 = a2;
    do
    {
      v27[v10-- + 12] = (v11 % 0xA) | 0x30;
      v12 = v11 > 9;
      v11 /= 0xAu;
    }
    while (v12);
    if (v10 + 14 > 13)
      goto LABEL_7;
    v13 = &v27[v10 + 13];
    v14 = -v10;
  }
  memcpy(__dst, v13, v14);
LABEL_7:
  if ((v8 & 0x80000000) != 0)
  {
    v25 = -v8;
    v15 = 1;
    do
    {
      ++v15;
      v26 = v25 >= 0xA;
      v25 /= 0xAu;
    }
    while (v26);
  }
  else
  {
    v15 = 0;
    do
    {
      ++v15;
      v12 = v8 > 9;
      v8 /= 0xAu;
    }
    while (v12);
  }
  v16 = &__dst[v15];
  if (a4)
  {
    if (a4 == 1)
      *v16 = *__src;
    else
      memcpy(v16, __src, a4);
  }
  result = &v16[a4];
  v18 = 0;
  if ((a5 & 0x80000000) != 0)
  {
    v23 = -a5;
    do
    {
      v27[v18-- + 12] = (v23 % 0xA) | 0x30;
      v12 = v23 > 9;
      v23 /= 0xAu;
    }
    while (v12);
    v24 = v18 + 12;
    v19 = &v27[v18 + 12];
    *v19 = 45;
    if (v18 + 14 <= 14)
    {
      if (v24 <= 12)
        v24 = 12;
      v20 = v24 - v18 - 11;
      return (char *)memcpy(result, v19, v20);
    }
  }
  else
  {
    do
    {
      v27[v18-- + 12] = (a5 % 0xA) | 0x30;
      v12 = a5 > 9;
      a5 /= 0xAu;
    }
    while (v12);
    if (v18 + 14 <= 13)
    {
      v19 = &v27[v18 + 13];
      v20 = -v18;
      return (char *)memcpy(result, v19, v20);
    }
  }
  return result;
}

uint64_t WebCore::CSSUnresolvedColorResolutionContext::CSSUnresolvedColorResolutionContext(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  *(_BYTE *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = 0;
  if (*((_BYTE *)a2 + 24))
  {
    *(_QWORD *)(result + 16) = 0;
    v3 = a2[2];
    if (v3)
    {
      *(_QWORD *)(result + 16) = v3;
      a2[2] = 0;
    }
    *(_BYTE *)(result + 24) = 1;
  }
  *(_BYTE *)(result + 32) = 0;
  *(_BYTE *)(result + 40) = 0;
  if (*((_BYTE *)a2 + 40))
  {
    *(_QWORD *)(result + 32) = 0;
    v4 = a2[4];
    if (v4)
    {
      *(_QWORD *)(result + 32) = v4;
      a2[4] = 0;
    }
    *(_BYTE *)(result + 40) = 1;
  }
  *(_BYTE *)(result + 48) = 0;
  *(_BYTE *)(result + 56) = 0;
  if (*((_BYTE *)a2 + 56))
  {
    *(_QWORD *)(result + 48) = 0;
    v5 = a2[6];
    if (v5)
    {
      *(_QWORD *)(result + 48) = v5;
      a2[6] = 0;
    }
    *(_BYTE *)(result + 56) = 1;
  }
  *(_BYTE *)(result + 64) = 0;
  *(_BYTE *)(result + 72) = 0;
  if (*((_BYTE *)a2 + 72))
  {
    *(_QWORD *)(result + 64) = 0;
    v6 = a2[8];
    if (v6)
    {
      *(_QWORD *)(result + 64) = v6;
      a2[8] = 0;
    }
    *(_BYTE *)(result + 72) = 1;
  }
  *(_BYTE *)(result + 80) = 0;
  *(_BYTE *)(result + 88) = 0;
  if (*((_BYTE *)a2 + 88))
  {
    *(_QWORD *)(result + 80) = 0;
    v7 = a2[10];
    if (v7)
    {
      *(_QWORD *)(result + 80) = v7;
      a2[10] = 0;
    }
    *(_BYTE *)(result + 88) = 1;
  }
  *(_BYTE *)(result + 96) = 0;
  *(_BYTE *)(result + 104) = 0;
  if (*((_BYTE *)a2 + 104))
  {
    *(_QWORD *)(result + 96) = 0;
    v8 = a2[12];
    if (v8)
    {
      *(_QWORD *)(result + 96) = v8;
      a2[12] = 0;
    }
    *(_BYTE *)(result + 104) = 1;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasStyle::applyStrokeColor(WebCore::GraphicsContext &)::$_0,WebCore::CanvasStyle::applyStrokeColor(WebCore::GraphicsContext &)::$_1,WebCore::CanvasStyle::applyStrokeColor(WebCore::GraphicsContext &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Color,WTF::Ref<WebCore::CanvasGradient,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::Color<WebCore::CanvasPattern,WebCore::CanvasGradient<WTF::Ref<WebCore::CanvasGradient,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::CanvasGradient,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>> const&>(WebCore::GraphicsContext ***a1, const WebCore::Color *a2)
{
  return WebCore::GraphicsContext::setStrokeColor(**a1, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasStyle::applyStrokeColor(WebCore::GraphicsContext &)::$_0,WebCore::CanvasStyle::applyStrokeColor(WebCore::GraphicsContext &)::$_1,WebCore::CanvasStyle::applyStrokeColor(WebCore::GraphicsContext &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Color,WTF::Ref<WebCore::CanvasGradient,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::Color<WebCore::CanvasPattern,WebCore::CanvasGradient<WTF::Ref<WebCore::CanvasGradient,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::CanvasGradient,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>> const&>(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  __int128 v18[3];
  uint64_t v19;

  v2 = *(_DWORD **)(*(_QWORD *)a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_5:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
  v19 = v3;
  v18[0] = constinit_2;
  v18[1] = unk_1969F1490;
  v18[2] = xmmword_1969F14A0;
  WebCore::SourceBrush::setGradient((uint64_t)(v2 + 24), &v19, v18);
  v2[46] |= 4u;
  result = (*(uint64_t (**)(_DWORD *, _DWORD *))(*(_QWORD *)v2 + 88))(v2, v2 + 2);
  v9 = v19;
  v19 = 0;
  if (!v9)
    return result;
  v10 = *(_QWORD *)(v9 + 8);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_15;
  }
  result = MEMORY[0x19AEA534C](v10);
LABEL_15:
  v12 = *(_QWORD *)(v10 + 8);
  v13 = v12 - 1;
  *(_QWORD *)(v10 + 8) = v12 - 1;
  if (v12 == 1)
  {
    v17 = *(_QWORD *)(v10 + 16);
    v14 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    v15 = v17 != 0;
  }
  else
  {
    v14 = 0;
    v15 = 1;
  }
  v16 = __ldxr((unsigned __int8 *)v10);
  if (v16 != 1)
  {
    __clrex();
LABEL_22:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v10);
    if (v13)
      return result;
    goto LABEL_23;
  }
  if (__stlxr(0, (unsigned __int8 *)v10))
    goto LABEL_22;
  if (v13)
    return result;
LABEL_23:
  if (v14)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (!v15)
    return WTF::fastFree((WTF *)v10, v8);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasStyle::applyStrokeColor(WebCore::GraphicsContext &)::$_0,WebCore::CanvasStyle::applyStrokeColor(WebCore::GraphicsContext &)::$_1,WebCore::CanvasStyle::applyStrokeColor(WebCore::GraphicsContext &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Color,WTF::Ref<WebCore::CanvasGradient,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::Color<WebCore::CanvasPattern,WebCore::CanvasGradient<WTF::Ref<WebCore::CanvasGradient,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::CanvasGradient,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  char v6;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v3 = *(_DWORD **)(*(_QWORD *)a2 + 8);
  ++*v3;
  v4 = *(unsigned int *)(v2 + 176);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v4])(&v6, v2 + 112);
  *(_QWORD *)(v2 + 112) = v3;
  *(_DWORD *)(v2 + 176) = 2;
  *(_DWORD *)(v2 + 184) |= 4u;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 88))(v2, v2 + 8);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasStyle::applyFillColor(WebCore::GraphicsContext &)::$_0,WebCore::CanvasStyle::applyFillColor(WebCore::GraphicsContext &)::$_1,WebCore::CanvasStyle::applyFillColor(WebCore::GraphicsContext &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Color,WTF::Ref<WebCore::CanvasGradient,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::Color<WebCore::CanvasPattern,WebCore::CanvasGradient<WTF::Ref<WebCore::CanvasGradient,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::CanvasGradient,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>> const&>(WebCore::GraphicsContext ***a1, const WebCore::Color *a2)
{
  return WebCore::GraphicsContext::setFillColor(**a1, a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasStyle::applyFillColor(WebCore::GraphicsContext &)::$_0,WebCore::CanvasStyle::applyFillColor(WebCore::GraphicsContext &)::$_1,WebCore::CanvasStyle::applyFillColor(WebCore::GraphicsContext &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Color,WTF::Ref<WebCore::CanvasGradient,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::Color<WebCore::CanvasPattern,WebCore::CanvasGradient<WTF::Ref<WebCore::CanvasGradient,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::CanvasGradient,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>> const&>(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  __int128 v18[3];
  uint64_t v19;

  v2 = *(_DWORD **)(*(_QWORD *)a1 + 8);
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 8);
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_5:
  ++*(_QWORD *)(v4 + 8);
  v6 = __ldxr((unsigned __int8 *)v4);
  if (v6 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
LABEL_9:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
  v19 = v3;
  v18[0] = constinit_2;
  v18[1] = unk_1969F1490;
  v18[2] = xmmword_1969F14A0;
  WebCore::SourceBrush::setGradient((uint64_t)(v2 + 2), &v19, v18);
  v2[46] |= 1u;
  result = (*(uint64_t (**)(_DWORD *, _DWORD *))(*(_QWORD *)v2 + 88))(v2, v2 + 2);
  v9 = v19;
  v19 = 0;
  if (!v9)
    return result;
  v10 = *(_QWORD *)(v9 + 8);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_15;
  }
  result = MEMORY[0x19AEA534C](v10);
LABEL_15:
  v12 = *(_QWORD *)(v10 + 8);
  v13 = v12 - 1;
  *(_QWORD *)(v10 + 8) = v12 - 1;
  if (v12 == 1)
  {
    v17 = *(_QWORD *)(v10 + 16);
    v14 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    v15 = v17 != 0;
  }
  else
  {
    v14 = 0;
    v15 = 1;
  }
  v16 = __ldxr((unsigned __int8 *)v10);
  if (v16 != 1)
  {
    __clrex();
LABEL_22:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v10);
    if (v13)
      return result;
    goto LABEL_23;
  }
  if (__stlxr(0, (unsigned __int8 *)v10))
    goto LABEL_22;
  if (v13)
    return result;
LABEL_23:
  if (v14)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  if (!v15)
    return WTF::fastFree((WTF *)v10, v8);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::CanvasStyle::applyFillColor(WebCore::GraphicsContext &)::$_0,WebCore::CanvasStyle::applyFillColor(WebCore::GraphicsContext &)::$_1,WebCore::CanvasStyle::applyFillColor(WebCore::GraphicsContext &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::Color,WTF::Ref<WebCore::CanvasGradient,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>,WebCore::Color<WebCore::CanvasPattern,WebCore::CanvasGradient<WTF::Ref<WebCore::CanvasGradient,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>,WTF::RawPtrTraits<WTF::Ref><WTF::Ref<WebCore::CanvasGradient,WTF::RawPtrTraits<WTF::Ref>,WTF::DefaultRefDerefTraits<WTF::Ref>>>>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  char v6;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v3 = *(_DWORD **)(*(_QWORD *)a2 + 8);
  ++*v3;
  v4 = *(unsigned int *)(v2 + 88);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v4])(&v6, v2 + 24);
  *(_QWORD *)(v2 + 24) = v3;
  *(_DWORD *)(v2 + 88) = 2;
  *(_DWORD *)(v2 + 184) |= 1u;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 88))(v2, v2 + 8);
}

WebCore::EXTColorBufferFloat *WebCore::EXTColorBufferFloat::EXTColorBufferFloat(WebCore::EXTColorBufferFloat *this, WebCore::WebGLRenderingContextBase *a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  _DWORD *v11;
  char v12;
  WTF::StringImpl *v13;

  *((_QWORD *)this + 1) = 0x300000001;
  *((_QWORD *)this + 2) = a2;
  *(_QWORD *)this = off_1E33DC9B0;
  v4 = (_DWORD *)*((_QWORD *)a2 + 11);
  if (v4)
    ++v4[2];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v4 + 1968))(v4, &v13);
  v6 = v13;
  v13 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
  else
    --v4[2];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(_DWORD **__return_ptr, WebCore::WebGLRenderingContextBase *, WTF::StringImpl **))(*(_QWORD *)a2 + 48))(&v11, a2, &v13);
  if (v12)
  {
    v8 = v11;
    v11 = 0;
    if (v8)
    {
      if (v8[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
      else
        --v8[2];
    }
  }
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  return this;
}

uint64_t WebCore::EXTColorBufferHalfFloat::supported(WebCore::EXTColorBufferHalfFloat *this, WebCore::GraphicsContextGL *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if ((*(unsigned int (**)(WebCore::EXTColorBufferHalfFloat *, WTF::StringImpl **))(*(_QWORD *)this + 1960))(this, &v9))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = (*(uint64_t (**)(WebCore::EXTColorBufferHalfFloat *, WTF::StringImpl **))(*(_QWORD *)this + 1960))(this, &v8);
    v5 = v8;
    v8 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  else
  {
    v4 = 0;
  }
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  return v4;
}

WTF::StringImpl *WebCore::EXTDisjointTimerQuery::deleteQueryEXT(WTF::StringImpl *this, WebCore::WebGLTimerQueryEXT *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::Lock *v14;
  char v15;

  if (!*((_QWORD *)this + 2))
    return this;
  v3 = (unsigned __int8 *)*((_QWORD *)this + 2);
  this = (WTF::StringImpl *)(v3 + 96);
  v14 = (WTF::Lock *)(v3 + 96);
  v15 = 1;
  if (__ldaxr(v3 + 96))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)this))
  {
    goto LABEL_6;
  }
  this = (WTF::StringImpl *)MEMORY[0x19AEA534C]();
LABEL_6:
  if (a2)
  {
    v5 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = *((_QWORD *)v5 + 1);
      if (v6)
        v5 = (unsigned __int8 *)(v6 - 8);
      else
        v5 = 0;
    }
    if (v5 == v3)
    {
      if (!*((_BYTE *)a2 + 32))
      {
        if (*((WebCore::WebGLTimerQueryEXT **)v3 + 116) == a2)
        {
          *((_QWORD *)v3 + 116) = 0;
          if (*((_DWORD *)a2 + 2) == 1)
          {
            (*(void (**)(WebCore::WebGLTimerQueryEXT *))(*(_QWORD *)a2 + 8))(a2);
            v11 = *((_QWORD *)v3 + 116);
            if (v11)
              *(_DWORD *)(v11 + 36) = 35007;
          }
          else
          {
            --*((_DWORD *)a2 + 2);
          }
          v7 = (_DWORD *)*((_QWORD *)v3 + 11);
          if (v7)
            ++v7[2];
          this = (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *, uint64_t))(*(_QWORD *)v7 + 2032))(v7, 35007);
          if (v7[2] == 1)
            this = (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
          else
            --v7[2];
        }
        v8 = (_DWORD *)*((_QWORD *)v3 + 11);
        if (v8)
        {
          ++v8[2];
          *((_BYTE *)a2 + 32) = 1;
          if (*((_DWORD *)a2 + 6))
          {
            v9 = *((_QWORD *)a2 + 2);
            if (v9)
            {
              if (*(_QWORD *)(v9 + 8))
              {
                if (!*((_DWORD *)a2 + 7))
                {
                  this = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::WebGLTimerQueryEXT *, WTF::Lock **, _DWORD *))(*(_QWORD *)a2 + 16))(a2, &v14, v8);
                  if (!*((_DWORD *)a2 + 7))
                    *((_DWORD *)a2 + 6) = 0;
                }
              }
            }
          }
          if (v8[2] == 1)
            this = (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
          else
            --v8[2];
        }
        else
        {
          *((_BYTE *)a2 + 32) = 1;
          if (*((_DWORD *)a2 + 6))
          {
            v12 = *((_QWORD *)a2 + 2);
            if (v12)
            {
              v13 = *(_QWORD *)(v12 + 8);
              if (v13)
              {
                if (!*((_DWORD *)a2 + 7))
                {
                  if (!*(_QWORD *)(v13 + 80)
                    || (this = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::WebGLTimerQueryEXT *, WTF::Lock **))(*(_QWORD *)a2 + 16))(a2, &v14), !*((_DWORD *)a2 + 7)))
                  {
                    *((_DWORD *)a2 + 6) = 0;
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      this = WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v3, 1282, (uint64_t)"delete", 7, (uint64_t)"object does not belong to this context", 39);
    }
  }
  if (v15)
  {
    this = v14;
    v10 = __ldxr((unsigned __int8 *)v14);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v14))
        return this;
    }
    else
    {
      __clrex();
    }
    return (WTF::StringImpl *)WTF::Lock::unlockSlow(this);
  }
  return this;
}

WTF::StringImpl *WebCore::EXTDisjointTimerQuery::beginQueryEXT(WTF::StringImpl *this, uint64_t a2, WebCore::WebGLTimerQueryEXT *a3, uint64_t a4)
{
  int v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  int v14;
  int v15;
  int v16;
  WebCore::WebGLTimerQueryEXT *v17;
  uint64_t (*v18)();
  int v19;
  WebCore::WebGLTimerQueryEXT *v20;
  _DWORD *v21;

  if (*((_QWORD *)this + 2))
  {
    v5 = a2;
    v6 = *((_QWORD *)this + 2);
    v7 = (unsigned __int8 *)(v6 + 96);
    if (__ldaxr((unsigned __int8 *)(v6 + 96)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v7))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v6 + 96);
LABEL_6:
    v9 = *((_QWORD *)a3 + 2);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
        v9 = v10 - 8;
      else
        v9 = 0;
    }
    if (v9 != v6)
    {
      v11 = "object does not belong to this context";
      v12 = 39;
LABEL_12:
      v13 = (WTF::StringImpl *)v6;
      v14 = 1282;
LABEL_13:
      this = WebCore::WebGLRenderingContextBase::synthesizeGLError(v13, v14, (uint64_t)"beginQueryEXT", 14, (uint64_t)v11, v12);
      goto LABEL_14;
    }
    v11 = "attempt to use a deleted object";
    v12 = 32;
    if (!*((_DWORD *)a3 + 6) || *((_BYTE *)a3 + 32))
      goto LABEL_12;
    if (v5 != 35007)
    {
      v11 = "invalid target";
      v13 = (WTF::StringImpl *)v6;
      v14 = 1280;
      v12 = 15;
      goto LABEL_13;
    }
    v16 = *((_DWORD *)a3 + 9);
    if (v16 && v16 != 35007)
    {
      v11 = "query type does not match target";
      v13 = (WTF::StringImpl *)v6;
      v14 = 1282;
      v12 = 33;
      goto LABEL_13;
    }
    v17 = *(WebCore::WebGLTimerQueryEXT **)(v6 + 928);
    v18 = WTF::RefPtr<WebCore::WebGLTimerQueryEXT,WTF::RawPtrTraits<WebCore::WebGLTimerQueryEXT>,WTF::DefaultRefDerefTraits<WebCore::WebGLTimerQueryEXT>>::unspecifiedBoolTypeInstance;
    if (!v17)
      v18 = 0;
    if (v18)
    {
      v11 = "query object of target is already active";
      v13 = (WTF::StringImpl *)v6;
      v14 = 1282;
      v12 = 41;
      goto LABEL_13;
    }
    v19 = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = v19 + 1;
    if (v17 == a3)
    {
      if (v19)
        *((_DWORD *)a3 + 2) = v19;
      else
        (*(void (**)(WebCore::WebGLTimerQueryEXT *, uint64_t, WebCore::WebGLTimerQueryEXT *, uint64_t, const char *, uint64_t))(*(_QWORD *)a3 + 8))(a3, a2, a3, a4, "attempt to use a deleted object", 32);
      goto LABEL_37;
    }
    *(_QWORD *)(v6 + 928) = a3;
    v20 = a3;
    if (v17)
    {
      if (*((_DWORD *)v17 + 2) == 1)
      {
        (*(void (**)(WebCore::WebGLTimerQueryEXT *, uint64_t, WebCore::WebGLTimerQueryEXT *, uint64_t, const char *, uint64_t))(*(_QWORD *)v17 + 8))(v17, a2, a3, a4, "attempt to use a deleted object", 32);
        v20 = *(WebCore::WebGLTimerQueryEXT **)(v6 + 928);
        if (!v20)
          goto LABEL_37;
      }
      else
      {
        --*((_DWORD *)v17 + 2);
        v20 = a3;
      }
    }
    *((_DWORD *)v20 + 9) = 35007;
LABEL_37:
    v21 = *(_DWORD **)(v6 + 88);
    if (v21)
      ++v21[2];
    this = (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *, uint64_t, _QWORD, uint64_t, const char *, uint64_t))(*(_QWORD *)v21 + 2024))(v21, 35007, *((unsigned int *)a3 + 6), a4, v11, v12);
    if (v21[2] == 1)
      this = (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v21 + 16))(v21);
    else
      --v21[2];
LABEL_14:
    v15 = __ldxr(v7);
    if (v15 == 1)
    {
      if (!__stlxr(0, v7))
        return this;
    }
    else
    {
      __clrex();
    }
    return (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v7);
  }
  return this;
}

WTF::StringImpl *WebCore::EXTDisjointTimerQuery::endQueryEXT(WTF::StringImpl *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v5;
  uint64_t (*v7)();
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  const char *v14;
  WTF::StringImpl *v15;
  int v16;
  uint64_t v17;
  int v18;
  WTF::StringImpl *v19;

  if (*((_QWORD *)this + 2))
  {
    v2 = *((_QWORD *)this + 2);
    v3 = *(_QWORD *)(v2 + 56);
    if (v3)
    {
      if (*(_QWORD *)(v3 + 8))
      {
        v5 = (unsigned __int8 *)(v2 + 96);
        if (__ldaxr((unsigned __int8 *)(v2 + 96)))
        {
          __clrex();
        }
        else if (!__stxr(1u, v5))
        {
          goto LABEL_8;
        }
        MEMORY[0x19AEA534C](v2 + 96);
LABEL_8:
        if (a2 == 35007)
        {
          if (*(_QWORD *)(v2 + 928))
            v7 = WTF::RefPtr<WebCore::WebGLTimerQueryEXT,WTF::RawPtrTraits<WebCore::WebGLTimerQueryEXT>,WTF::DefaultRefDerefTraits<WebCore::WebGLTimerQueryEXT>>::unspecifiedBoolTypeInstance;
          else
            v7 = 0;
          if (v7)
          {
            v8 = *(_DWORD **)(v2 + 88);
            if (v8)
              ++v8[2];
            (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v8 + 2032))(v8, 35007);
            if (v8[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
            else
              --v8[2];
            v9 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8);
            if (v9)
              v10 = v9 - 96;
            else
              v10 = 0;
            v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 104))(v10);
            v12 = *(_QWORD *)(v2 + 928);
            *(_QWORD *)(v2 + 928) = 0;
            v13 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v13 = &off_1E33DCB00;
            *((_QWORD *)v13 + 1) = v12;
            v19 = v13;
            WebCore::EventLoopTaskGroup::queueMicrotask(v11, (uint64_t *)&v19);
            this = v19;
            if (v19)
              this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v19 + 8))(v19);
LABEL_25:
            v18 = __ldxr(v5);
            if (v18 == 1)
            {
              if (!__stlxr(0, v5))
                return this;
            }
            else
            {
              __clrex();
            }
            return (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)(v2 + 96));
          }
          v14 = "query object of target is not active";
          v15 = (WTF::StringImpl *)v2;
          v16 = 1282;
          v17 = 37;
        }
        else
        {
          v14 = "invalid target";
          v15 = (WTF::StringImpl *)v2;
          v16 = 1280;
          v17 = 15;
        }
        this = WebCore::WebGLRenderingContextBase::synthesizeGLError(v15, v16, (uint64_t)"endQueryEXT", 12, (uint64_t)v14, v17);
        goto LABEL_25;
      }
    }
  }
  return this;
}

WTF::StringImpl *WebCore::EXTDisjointTimerQuery::queryCounterEXT(WTF::StringImpl *this, WebCore::WebGLTimerQueryEXT *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  int v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  if (*((_QWORD *)this + 2))
  {
    v3 = *((_QWORD *)this + 2);
    v4 = *(_QWORD *)(v3 + 56);
    if (v4)
    {
      if (*(_QWORD *)(v4 + 8))
      {
        v6 = *((_QWORD *)a2 + 2);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 8);
          if (v7)
            v6 = v7 - 8;
          else
            v6 = 0;
        }
        if (v6 != v3)
        {
          v8 = "object does not belong to this context";
          v9 = 39;
          return WebCore::WebGLRenderingContextBase::synthesizeGLError(*((WTF::StringImpl **)this + 2), 1282, (uint64_t)"queryCounterEXT", 16, (uint64_t)v8, v9);
        }
        v8 = "attempt to use a deleted object";
        v9 = 32;
        if (!*((_DWORD *)a2 + 6) || *((_BYTE *)a2 + 32))
          return WebCore::WebGLRenderingContextBase::synthesizeGLError(*((WTF::StringImpl **)this + 2), 1282, (uint64_t)"queryCounterEXT", 16, (uint64_t)v8, v9);
        if (a3 == 36392)
        {
          v10 = *((_DWORD *)a2 + 9);
          if (v10 && v10 != 36392)
          {
            return WebCore::WebGLRenderingContextBase::synthesizeGLError(*((WTF::StringImpl **)this + 2), 1282, (uint64_t)"queryCounterEXT", 16, (uint64_t)"query type does not match target", 33);
          }
          else
          {
            *((_DWORD *)a2 + 9) = 36392;
            v11 = *(_DWORD **)(v3 + 88);
            if (v11)
              ++v11[2];
            (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 2040))(v11);
            if (v11[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
            else
              --v11[2];
            v12 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8);
            if (v12)
              v13 = v12 - 96;
            else
              v13 = 0;
            v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 104))(v13);
            v15 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v15 = off_1E33DCB28;
            *((_QWORD *)v15 + 1) = a2;
            v16 = v15;
            WebCore::EventLoopTaskGroup::queueMicrotask(v14, (uint64_t *)&v16);
            this = v16;
            if (v16)
              return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v16 + 8))(v16);
          }
        }
        else
        {
          return WebCore::WebGLRenderingContextBase::synthesizeGLError(*((WTF::StringImpl **)this + 2), 1280, (uint64_t)"queryCounterEXT", 16, (uint64_t)"invalid target", 15);
        }
      }
    }
  }
  return this;
}

WTF::StringImpl *WebCore::EXTDisjointTimerQuery::getQueryEXT@<X0>(WTF::StringImpl *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  _DWORD *v8;

  if (!*((_QWORD *)this + 2))
    goto LABEL_17;
  this = (WTF::StringImpl *)*((_QWORD *)this + 2);
  if (a2 != 35007 && a2 != 36392)
  {
    v6 = "invalid target";
    v7 = 15;
    goto LABEL_16;
  }
  if (a3 != 34916)
  {
    if (a3 == 34917)
    {
      if (a2 == 35007)
      {
        v5 = *((_QWORD *)this + 116);
        if (v5)
          ++*(_DWORD *)(v5 + 8);
        *(_QWORD *)a4 = v5;
        *(_DWORD *)(a4 + 16) = 22;
        return this;
      }
LABEL_17:
      *(_QWORD *)a4 = 0;
      *(_DWORD *)(a4 + 16) = 0;
      return this;
    }
    v6 = "invalid parameter name";
    v7 = 23;
LABEL_16:
    this = WebCore::WebGLRenderingContextBase::synthesizeGLError(this, 1280, (uint64_t)"getQueryEXT", 12, (uint64_t)v6, v7);
    goto LABEL_17;
  }
  v8 = (_DWORD *)*((_QWORD *)this + 11);
  if (v8)
    ++v8[2];
  this = (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 2048))(v8);
  *(_DWORD *)a4 = (_DWORD)this;
  *(_DWORD *)(a4 + 16) = 2;
  if (v8[2] == 1)
    return (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
  --v8[2];
  return this;
}

WTF::StringImpl *WebCore::EXTDisjointTimerQuery::getQueryObjectEXT@<X0>(WTF::StringImpl *this@<X0>, WebCore::WebGLTimerQueryEXT *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  int v11;
  int v12;

  if (!*((_QWORD *)this + 2))
    goto LABEL_10;
  this = (WTF::StringImpl *)*((_QWORD *)this + 2);
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  if (v5)
  {
    v6 = *((_QWORD *)v5 + 1);
    if (v6)
      v5 = (WTF::StringImpl *)(v6 - 8);
    else
      v5 = 0;
  }
  if (v5 != this)
  {
    v7 = "object does not belong to this context";
    v8 = 39;
LABEL_8:
    v9 = 1282;
LABEL_9:
    this = WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v9, (uint64_t)"getQueryObjectEXT", 18, (uint64_t)v7, v8);
LABEL_10:
    *(_QWORD *)a4 = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return this;
  }
  v7 = "attempt to use a deleted object";
  v8 = 32;
  if (!*((_DWORD *)a2 + 6) || *((_BYTE *)a2 + 32))
    goto LABEL_8;
  if (!*((_DWORD *)a2 + 9))
  {
    v7 = "query has not been used";
    v9 = 1282;
    v8 = 24;
    goto LABEL_9;
  }
  if (*((WebCore::WebGLTimerQueryEXT **)this + 116) == a2)
  {
    v7 = "query is currently active";
    v9 = 1282;
    v8 = 26;
    goto LABEL_9;
  }
  if (a3 == 34919)
  {
    if (*((_BYTE *)a2 + 33))
    {
      v10 = (_DWORD *)*((_QWORD *)this + 11);
      if (v10)
        ++v10[2];
      this = (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 2056))(v10);
      *(_BYTE *)a4 = (_DWORD)this != 0;
      v11 = 1;
      goto LABEL_27;
    }
    *(_BYTE *)a4 = 0;
    v12 = 1;
LABEL_32:
    *(_DWORD *)(a4 + 16) = v12;
    return this;
  }
  if (a3 != 34918)
  {
    v7 = "invalid parameter name";
    v9 = 1280;
    v8 = 23;
    goto LABEL_9;
  }
  if (!*((_BYTE *)a2 + 33))
  {
    *(_DWORD *)a4 = 0;
    v12 = 2;
    goto LABEL_32;
  }
  v10 = (_DWORD *)*((_QWORD *)this + 11);
  if (v10)
    ++v10[2];
  this = (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 2064))(v10);
  *(_QWORD *)a4 = this;
  v11 = 5;
LABEL_27:
  *(_DWORD *)(a4 + 16) = v11;
  if (v10[2] == 1)
    return (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
  --v10[2];
  return this;
}

WTF::StringImpl *WebCore::EXTDisjointTimerQueryWebGL2::queryCounterEXT(WTF::StringImpl *this, WebCore::WebGLQuery *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  int v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;

  if (*((_QWORD *)this + 2))
  {
    v3 = *((_QWORD *)this + 2);
    v4 = *(_QWORD *)(v3 + 56);
    if (v4)
    {
      if (*(_QWORD *)(v4 + 8))
      {
        v6 = *((_QWORD *)a2 + 2);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 8);
          if (v7)
            v6 = v7 - 8;
          else
            v6 = 0;
        }
        if (v6 != v3)
        {
          v8 = "object does not belong to this context";
          v9 = 39;
          return WebCore::WebGLRenderingContextBase::synthesizeGLError(*((WTF::StringImpl **)this + 2), 1282, (uint64_t)"queryCounterEXT", 16, (uint64_t)v8, v9);
        }
        v8 = "attempt to use a deleted object";
        v9 = 32;
        if (!*((_DWORD *)a2 + 6) || *((_BYTE *)a2 + 32))
          return WebCore::WebGLRenderingContextBase::synthesizeGLError(*((WTF::StringImpl **)this + 2), 1282, (uint64_t)"queryCounterEXT", 16, (uint64_t)v8, v9);
        if (a3 == 36392)
        {
          v10 = *((_DWORD *)a2 + 9);
          if (v10 && v10 != 36392)
          {
            return WebCore::WebGLRenderingContextBase::synthesizeGLError(*((WTF::StringImpl **)this + 2), 1282, (uint64_t)"queryCounterEXT", 16, (uint64_t)"query type does not match target", 33);
          }
          else
          {
            *((_DWORD *)a2 + 9) = 36392;
            v11 = *(_DWORD **)(v3 + 88);
            if (v11)
              ++v11[2];
            (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 2040))(v11);
            if (v11[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
            else
              --v11[2];
            v12 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8);
            if (v12)
              v13 = v12 - 96;
            else
              v13 = 0;
            v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 104))(v13);
            v15 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
            *(_QWORD *)v15 = off_1E33DCB60;
            *((_QWORD *)v15 + 1) = a2;
            v16 = v15;
            WebCore::EventLoopTaskGroup::queueMicrotask(v14, (uint64_t *)&v16);
            this = v16;
            if (v16)
              return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v16 + 8))(v16);
          }
        }
        else
        {
          return WebCore::WebGLRenderingContextBase::synthesizeGLError(*((WTF::StringImpl **)this + 2), 1280, (uint64_t)"queryCounterEXT", 16, (uint64_t)"invalid target", 15);
        }
      }
    }
  }
  return this;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::EXTDisjointTimerQuery::endQueryEXT(unsigned int)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33DCB00;
  a1[1] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::EXTDisjointTimerQuery::endQueryEXT(unsigned int)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33DCB00;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::EXTDisjointTimerQuery::endQueryEXT(unsigned int)::$_0,void>::call(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 33) = 1;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::EXTDisjointTimerQuery::queryCounterEXT(WebCore::WebGLTimerQueryEXT &,unsigned int)::$_0,void>::call(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 33) = 1;
  return result;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::EXTDisjointTimerQueryWebGL2::queryCounterEXT(WebCore::WebGLQuery &,unsigned int)::$_0,void>::call(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 33) = 1;
  return result;
}

WebCore::EXTTextureCompressionBPTC *WebCore::EXTTextureCompressionBPTC::EXTTextureCompressionBPTC(WebCore::EXTTextureCompressionBPTC *this, WebCore::WebGLRenderingContextBase *a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int **v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  int *v12;
  uint64_t v13;
  int v14;
  int *v15;
  uint64_t v16;
  int v17;
  int *v18;
  int *v19;
  uint64_t v20;
  int v21;
  WTF::StringImpl *v23;

  *((_QWORD *)this + 1) = 0xE00000001;
  *((_QWORD *)this + 2) = a2;
  *(_QWORD *)this = off_1E33DCC08;
  v4 = (_DWORD *)*((_QWORD *)a2 + 11);
  if (v4)
    ++v4[2];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v4 + 1968))(v4, &v23);
  v6 = v23;
  v23 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
  else
    --v4[2];
  LODWORD(v23) = 36492;
  v7 = (int **)((char *)a2 + 216);
  v8 = *((unsigned int *)a2 + 57);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = *v7;
    while (v10[v9] != 36492)
    {
      if (v8 == ++v9)
        goto LABEL_12;
    }
  }
  else
  {
LABEL_12:
    if ((_DWORD)v8 == *((_DWORD *)a2 + 56))
    {
      v12 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v8 + 1, (unint64_t)&v23);
      v8 = *((unsigned int *)a2 + 57);
      v10 = (int *)*((_QWORD *)a2 + 27);
      v11 = *v12;
    }
    else
    {
      v10 = *v7;
      v11 = 36492;
    }
    v10[v8] = v11;
    v8 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v8;
  }
  LODWORD(v23) = 36493;
  if ((_DWORD)v8)
  {
    v13 = 0;
    while (v10[v13] != 36493)
    {
      if (v8 == ++v13)
        goto LABEL_20;
    }
  }
  else
  {
LABEL_20:
    if ((_DWORD)v8 == *((_DWORD *)a2 + 56))
    {
      v15 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v8 + 1, (unint64_t)&v23);
      v8 = *((unsigned int *)a2 + 57);
      v10 = (int *)*((_QWORD *)a2 + 27);
      v14 = *v15;
    }
    else
    {
      v14 = 36493;
    }
    v10[v8] = v14;
    v8 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v8;
  }
  LODWORD(v23) = 36494;
  if ((_DWORD)v8)
  {
    v16 = 0;
    while (v10[v16] != 36494)
    {
      if (v8 == ++v16)
        goto LABEL_28;
    }
  }
  else
  {
LABEL_28:
    if ((_DWORD)v8 == *((_DWORD *)a2 + 56))
    {
      v18 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v8 + 1, (unint64_t)&v23);
      v8 = *((unsigned int *)a2 + 57);
      v10 = (int *)*((_QWORD *)a2 + 27);
      v17 = *v18;
    }
    else
    {
      v17 = 36494;
    }
    v10[v8] = v17;
    v8 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v8;
  }
  LODWORD(v23) = 36495;
  if ((_DWORD)v8)
  {
    v19 = v10;
    v20 = v8;
    while (1)
    {
      v21 = *v19++;
      if (v21 == 36495)
        break;
      if (!--v20)
        goto LABEL_36;
    }
  }
  else
  {
LABEL_36:
    if ((_DWORD)v8 == *((_DWORD *)a2 + 56))
      *(_DWORD *)(*((_QWORD *)a2 + 27) + 4 * *((unsigned int *)a2 + 57)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v8 + 1, (unint64_t)&v23);
    else
      v10[v8] = 36495;
    ++*((_DWORD *)a2 + 57);
  }
  return this;
}

WebCore::EXTTextureCompressionRGTC *WebCore::EXTTextureCompressionRGTC::EXTTextureCompressionRGTC(WebCore::EXTTextureCompressionRGTC *this, WebCore::WebGLRenderingContextBase *a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int **v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  int *v12;
  uint64_t v13;
  int v14;
  int *v15;
  uint64_t v16;
  int v17;
  int *v18;
  int *v19;
  uint64_t v20;
  int v21;
  WTF::StringImpl *v23;

  *((_QWORD *)this + 1) = 0xF00000001;
  *((_QWORD *)this + 2) = a2;
  *(_QWORD *)this = off_1E33DCC28;
  v4 = (_DWORD *)*((_QWORD *)a2 + 11);
  if (v4)
    ++v4[2];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v4 + 1968))(v4, &v23);
  v6 = v23;
  v23 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
  else
    --v4[2];
  LODWORD(v23) = 36283;
  v7 = (int **)((char *)a2 + 216);
  v8 = *((unsigned int *)a2 + 57);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = *v7;
    while (v10[v9] != 36283)
    {
      if (v8 == ++v9)
        goto LABEL_12;
    }
  }
  else
  {
LABEL_12:
    if ((_DWORD)v8 == *((_DWORD *)a2 + 56))
    {
      v12 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v8 + 1, (unint64_t)&v23);
      v8 = *((unsigned int *)a2 + 57);
      v10 = (int *)*((_QWORD *)a2 + 27);
      v11 = *v12;
    }
    else
    {
      v10 = *v7;
      v11 = 36283;
    }
    v10[v8] = v11;
    v8 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v8;
  }
  LODWORD(v23) = 36284;
  if ((_DWORD)v8)
  {
    v13 = 0;
    while (v10[v13] != 36284)
    {
      if (v8 == ++v13)
        goto LABEL_20;
    }
  }
  else
  {
LABEL_20:
    if ((_DWORD)v8 == *((_DWORD *)a2 + 56))
    {
      v15 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v8 + 1, (unint64_t)&v23);
      v8 = *((unsigned int *)a2 + 57);
      v10 = (int *)*((_QWORD *)a2 + 27);
      v14 = *v15;
    }
    else
    {
      v14 = 36284;
    }
    v10[v8] = v14;
    v8 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v8;
  }
  LODWORD(v23) = 36285;
  if ((_DWORD)v8)
  {
    v16 = 0;
    while (v10[v16] != 36285)
    {
      if (v8 == ++v16)
        goto LABEL_28;
    }
  }
  else
  {
LABEL_28:
    if ((_DWORD)v8 == *((_DWORD *)a2 + 56))
    {
      v18 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v8 + 1, (unint64_t)&v23);
      v8 = *((unsigned int *)a2 + 57);
      v10 = (int *)*((_QWORD *)a2 + 27);
      v17 = *v18;
    }
    else
    {
      v17 = 36285;
    }
    v10[v8] = v17;
    v8 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v8;
  }
  LODWORD(v23) = 36286;
  if ((_DWORD)v8)
  {
    v19 = v10;
    v20 = v8;
    while (1)
    {
      v21 = *v19++;
      if (v21 == 36286)
        break;
      if (!--v20)
        goto LABEL_36;
    }
  }
  else
  {
LABEL_36:
    if ((_DWORD)v8 == *((_DWORD *)a2 + 56))
      *(_DWORD *)(*((_QWORD *)a2 + 27) + 4 * *((unsigned int *)a2 + 57)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v8 + 1, (unint64_t)&v23);
    else
      v10[v8] = 36286;
    ++*((_DWORD *)a2 + 57);
  }
  return this;
}

WebCore::GPUBasedCanvasRenderingContext *WebCore::GPUBasedCanvasRenderingContext::GPUBasedCanvasRenderingContext(WebCore::GPUBasedCanvasRenderingContext *this, WebCore::CanvasBase *a2)
{
  WebCore::ContextDestructionObserver *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  WebCore::ContextDestructionObserver *v12;

  v4 = (WebCore::CanvasRenderingContext *)((char *)WebCore::CanvasRenderingContext::CanvasRenderingContext(this, a2) + 40);
  v5 = (*(uint64_t (**)(WebCore::CanvasBase *))(*(_QWORD *)a2 + 144))(a2);
  v6 = v5;
  if (v5 && !*(_BYTE *)(v5 + 274))
  {
    v7 = v5 - 192;
    v8 = *(_QWORD *)(v5 + 512);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
        v7 = v9;
    }
    v6 = v7 + 192;
  }
  *((_QWORD *)this + 5) = &off_1E33A18C0;
  *((_QWORD *)this + 6) = 0;
  WebCore::ContextDestructionObserver::observeContext(v4, (WebCore::ScriptExecutionContext *)v6);
  *((_QWORD *)this + 5) = &off_1E33A0540;
  *((_QWORD *)this + 7) = 0;
  if (v6)
  {
    if (*(_BYTE *)(v6 + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x195CF4A40);
    }
    v12 = v4;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v6 + 128), (uint64_t *)&v12, (uint64_t)&v11);
  }
  *(_QWORD *)this = off_1E33DCD48;
  *((_QWORD *)this + 5) = &unk_1E33DCE50;
  return this;
}

WebCore::GPUCanvasContext *WebCore::GPUCanvasContext::GPUCanvasContext(WebCore::GPUCanvasContext *this, WebCore::CanvasBase *a2)
{
  WebCore::ContextDestructionObserver *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  WebCore::ContextDestructionObserver *v12;

  v4 = (WebCore::CanvasRenderingContext *)((char *)WebCore::CanvasRenderingContext::CanvasRenderingContext(this, a2) + 40);
  v5 = (*(uint64_t (**)(WebCore::CanvasBase *))(*(_QWORD *)a2 + 144))(a2);
  v6 = v5;
  if (v5 && !*(_BYTE *)(v5 + 274))
  {
    v7 = v5 - 192;
    v8 = *(_QWORD *)(v5 + 512);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
        v7 = v9;
    }
    v6 = v7 + 192;
  }
  *((_QWORD *)this + 5) = &off_1E33A18C0;
  *((_QWORD *)this + 6) = 0;
  WebCore::ContextDestructionObserver::observeContext(v4, (WebCore::ScriptExecutionContext *)v6);
  *((_QWORD *)this + 5) = &off_1E33A0540;
  *((_QWORD *)this + 7) = 0;
  if (v6)
  {
    if (*(_BYTE *)(v6 + 278))
    {
      __break(0xC471u);
      JUMPOUT(0x195CF4B3CLL);
    }
    v12 = v4;
    WTF::HashTable<WebCore::ActiveDOMObject *,WebCore::ActiveDOMObject *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>,WTF::HashTraits<WebCore::ActiveDOMObject *>>::add((uint64_t *)(v6 + 128), (uint64_t *)&v12, (uint64_t)&v11);
  }
  *(_QWORD *)this = off_1E33DCEA8;
  *((_QWORD *)this + 5) = &unk_1E33DCFD0;
  return this;
}

void WebCore::ImageBitmapRenderingContext::~ImageBitmapRenderingContext(unsigned int **this)
{
  bmalloc::api *v1;
  void *v2;

  WebCore::CanvasRenderingContext::~CanvasRenderingContext(this);
  bmalloc::api::isoDeallocate(v1, v2);
}

uint64_t WebCore::ImageBitmapRenderingContext::setOutputBitmap(WebCore::ImageBitmapRenderingContext *this, uint64_t *a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *a2;
  if (!*a2)
  {
    result = WebCore::ImageBitmapRenderingContext::setBlank(this);
    *(_BYTE *)(*((_QWORD *)this + 4) + 72) = 1;
    return result;
  }
  *((_DWORD *)this + 10) = 0;
  v4 = (_BYTE *)*((_QWORD *)this + 4);
  v4[72] = *(_BYTE *)(v3 + 32) & 1;
  v16 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0;
  result = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v4 + 72))(v4, &v16);
  v7 = v16;
  v16 = 0;
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (__ldaxr((unsigned __int8 *)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v8))
    {
      goto LABEL_8;
    }
    result = MEMORY[0x19AEA534C](v8);
LABEL_8:
    v10 = *(_QWORD *)(v8 + 8);
    v11 = v10 - 1;
    *(_QWORD *)(v8 + 8) = v10 - 1;
    if (v10 == 1)
    {
      v15 = *(_QWORD *)(v8 + 16);
      v12 = *(_QWORD *)(v8 + 24);
      *(_QWORD *)(v8 + 24) = 0;
      v13 = v15 != 0;
    }
    else
    {
      v12 = 0;
      v13 = 1;
    }
    v14 = __ldxr((unsigned __int8 *)v8);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
      {
        if (v11)
          return result;
LABEL_16:
        if (v12)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        if (!v13)
          return WTF::fastFree((WTF *)v8, v6);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v11)
      return result;
    goto LABEL_16;
  }
  return result;
}

uint64_t WebCore::ImageBitmapRenderingContext::setBlank(WebCore::ImageBitmapRenderingContext *this)
{
  float v2;
  unsigned int v3;
  unint64_t v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  float v16[2];
  char v17;
  char **v18;
  char *v19;
  uint64_t v20;

  *((_DWORD *)this + 10) = 1;
  v2 = (float)(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 4) + 56))(*((_QWORD *)this + 4));
  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 64))(*((_QWORD *)this + 4));
  v16[0] = v2;
  v16[1] = (float)v3;
  v4 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v4 != -1)
  {
    v19 = &v17;
    v18 = &v19;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v18, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  v19 = 0;
  v20 = 0;
  WebCore::ImageBuffer::create<WebCore::ImageBufferCGBitmapBackend,WebCore::ImageBuffer>(v16, (CFTypeRef *)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 1, 0, (uint64_t *)&v18, 1.0);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v20 + 4));
  result = (*(uint64_t (**)(_QWORD, char ***))(**((_QWORD **)this + 4) + 72))(*((_QWORD *)this + 4), &v18);
  v7 = (uint64_t)v18;
  v18 = 0;
  if (v7)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (__ldaxr((unsigned __int8 *)v8))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v8))
    {
      goto LABEL_8;
    }
    result = MEMORY[0x19AEA534C](v8);
LABEL_8:
    v10 = *(_QWORD *)(v8 + 8);
    v11 = v10 - 1;
    *(_QWORD *)(v8 + 8) = v10 - 1;
    if (v10 == 1)
    {
      v15 = *(_QWORD *)(v8 + 16);
      v12 = *(_QWORD *)(v8 + 24);
      *(_QWORD *)(v8 + 24) = 0;
      v13 = v15 != 0;
    }
    else
    {
      v12 = 0;
      v13 = 1;
    }
    v14 = __ldxr((unsigned __int8 *)v8);
    if (v14 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v8))
      {
        if (v11)
          return result;
LABEL_16:
        if (v12)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        if (!v13)
          return WTF::fastFree((WTF *)v8, v6);
        return result;
      }
    }
    else
    {
      __clrex();
    }
    result = WTF::Lock::unlockSlow((WTF::Lock *)v8);
    if (v11)
      return result;
    goto LABEL_16;
  }
  return result;
}

WebCore::ImageBitmapRenderingContext *WebCore::ImageBitmapRenderingContext::transferFromImageBitmap@<X0>(WebCore::ImageBitmapRenderingContext *result@<X0>, bmalloc::api **a2@<X1>, uint64_t a3@<X8>)
{
  bmalloc::api *v4;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  bmalloc::api *v25;
  uint64_t v26;

  v4 = *a2;
  if (!*a2)
  {
    v26 = 0;
    result = (WebCore::ImageBitmapRenderingContext *)WebCore::ImageBitmapRenderingContext::setOutputBitmap(result, &v26);
    goto LABEL_24;
  }
  if (!*((_QWORD *)v4 + 2))
  {
    *(_BYTE *)a3 = 8;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 1;
    return result;
  }
  ++*((_DWORD *)v4 + 2);
  v25 = v4;
  result = (WebCore::ImageBitmapRenderingContext *)WebCore::ImageBitmapRenderingContext::setOutputBitmap(result, (uint64_t *)&v25);
  v25 = 0;
  if (*((_DWORD *)v4 + 2) != 1)
  {
    --*((_DWORD *)v4 + 2);
    goto LABEL_5;
  }
  v15 = *((_QWORD *)v4 + 2);
  *((_QWORD *)v4 + 2) = 0;
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 8);
    if (__ldaxr((unsigned __int8 *)v16))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v16))
    {
      goto LABEL_30;
    }
    MEMORY[0x19AEA534C](v16);
LABEL_30:
    v18 = *(_QWORD *)(v16 + 8);
    v19 = v18 - 1;
    *(_QWORD *)(v16 + 8) = v18 - 1;
    if (v18 == 1)
    {
      v24 = *(_QWORD *)(v16 + 16);
      v20 = *(_QWORD *)(v16 + 24);
      *(_QWORD *)(v16 + 24) = 0;
      v21 = v24 != 0;
    }
    else
    {
      v20 = 0;
      v21 = 1;
    }
    v22 = __ldxr((unsigned __int8 *)v16);
    if (v22 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v16))
      {
LABEL_37:
        if (!v19)
        {
          if (v20)
            (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
          if (!v21)
            WTF::fastFree((WTF *)v16, v6);
        }
        goto LABEL_42;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v16);
    goto LABEL_37;
  }
LABEL_42:
  if (*(_QWORD *)v4)
  {
    *(_QWORD *)(*(_QWORD *)v4 + 8) = 3;
    *(_QWORD *)v4 = 0;
  }
  result = (WebCore::ImageBitmapRenderingContext *)bmalloc::api::isoDeallocate(v4, v6);
LABEL_5:
  v7 = *((_QWORD *)*a2 + 2);
  *((_QWORD *)*a2 + 2) = 0;
  if (!v7)
    goto LABEL_24;
  v8 = *(_QWORD *)(v7 + 8);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_12;
  }
  result = (WebCore::ImageBitmapRenderingContext *)MEMORY[0x19AEA534C](v8);
LABEL_12:
  v10 = *(_QWORD *)(v8 + 8);
  v11 = v10 - 1;
  *(_QWORD *)(v8 + 8) = v10 - 1;
  if (v10 == 1)
  {
    v23 = *(_QWORD *)(v8 + 16);
    v12 = *(_QWORD *)(v8 + 24);
    *(_QWORD *)(v8 + 24) = 0;
    v13 = v23 != 0;
  }
  else
  {
    v12 = 0;
    v13 = 1;
  }
  v14 = __ldxr((unsigned __int8 *)v8);
  if (v14 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v8))
    {
      if (!v11)
        goto LABEL_20;
      goto LABEL_24;
    }
  }
  else
  {
    __clrex();
  }
  result = (WebCore::ImageBitmapRenderingContext *)WTF::Lock::unlockSlow((WTF::Lock *)v8);
  if (!v11)
  {
LABEL_20:
    if (v12)
      result = (WebCore::ImageBitmapRenderingContext *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    if (!v13)
      result = (WebCore::ImageBitmapRenderingContext *)WTF::fastFree((WTF *)v8, v6);
  }
LABEL_24:
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

void WebCore::ImageBitmapRenderingContext::transferToImageBuffer(WebCore::ImageBitmapRenderingContext *this@<X0>, uint64_t *a2@<X8>)
{
  int32x2_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v8;

  v4 = (int32x2_t *)*((_QWORD *)this + 4);
  if (!v4[9].i8[1])
  {
    WebCore::CanvasBase::allocateImageBuffer(v4, a2);
    return;
  }
  v5 = (uint64_t)v4[2];
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 8);
    if (__ldaxr((unsigned __int8 *)v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v6))
    {
      goto LABEL_8;
    }
    MEMORY[0x19AEA534C](v6);
LABEL_8:
    ++*(_QWORD *)(v6 + 8);
    v8 = __ldxr((unsigned __int8 *)v6);
    if (v8 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v6))
        goto LABEL_13;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_13:
    WebCore::ImageBitmapRenderingContext::setBlank(this);
    *a2 = v5;
    return;
  }
  *a2 = 0;
}

uint64_t WebCore::ImageBitmapRenderingContext::isBitmapRenderer(WebCore::ImageBitmapRenderingContext *this)
{
  return 1;
}

uint64_t WebCore::GPUCanvasContext::isWebGPU(WebCore::GPUCanvasContext *this)
{
  return 1;
}

WebCore::OESTextureFloat *WebCore::OESTextureFloat::OESTextureFloat(WebCore::OESTextureFloat *this, WebCore::WebGLRenderingContextBase *a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  _DWORD *v11;
  char v12;
  WTF::StringImpl *v13;

  *((_QWORD *)this + 1) = 0x1C00000001;
  *((_QWORD *)this + 2) = a2;
  *(_QWORD *)this = off_1E33DD278;
  v4 = (_DWORD *)*((_QWORD *)a2 + 11);
  if (v4)
    ++v4[2];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v4 + 1968))(v4, &v13);
  v6 = v13;
  v13 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
  else
    --v4[2];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(_DWORD **__return_ptr, WebCore::WebGLRenderingContextBase *, WTF::StringImpl **))(*(_QWORD *)a2 + 48))(&v11, a2, &v13);
  if (v12)
  {
    v8 = v11;
    v11 = 0;
    if (v8)
    {
      if (v8[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
      else
        --v8[2];
    }
  }
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  return this;
}

WebCore::OESTextureHalfFloat *WebCore::OESTextureHalfFloat::OESTextureHalfFloat(WebCore::OESTextureHalfFloat *this, WebCore::WebGLRenderingContextBase *a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  _DWORD *v11;
  char v12;
  WTF::StringImpl *v13;

  *((_QWORD *)this + 1) = 0x1E00000001;
  *((_QWORD *)this + 2) = a2;
  *(_QWORD *)this = off_1E33DD2B8;
  v4 = (_DWORD *)*((_QWORD *)a2 + 11);
  if (v4)
    ++v4[2];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v4 + 1968))(v4, &v13);
  v6 = v13;
  v13 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
  else
    --v4[2];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(_DWORD **__return_ptr, WebCore::WebGLRenderingContextBase *, WTF::StringImpl **))(*(_QWORD *)a2 + 48))(&v11, a2, &v13);
  if (v12)
  {
    v8 = v11;
    v11 = 0;
    if (v8)
    {
      if (v8[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
      else
        --v8[2];
    }
  }
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  return this;
}

WTF::StringImpl *WebCore::OESVertexArrayObject::deleteVertexArrayOES(WTF::StringImpl *this, WebCore::WebGLVertexArrayObjectOES *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::Lock *v13;
  char v14;

  if (!*((_QWORD *)this + 2))
    return this;
  v3 = (unsigned __int8 *)*((_QWORD *)this + 2);
  this = (WTF::StringImpl *)(v3 + 96);
  v13 = (WTF::Lock *)(v3 + 96);
  v14 = 1;
  if (__ldaxr(v3 + 96))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)this))
  {
    goto LABEL_6;
  }
  this = (WTF::StringImpl *)MEMORY[0x19AEA534C]();
LABEL_6:
  if (!a2)
    goto LABEL_25;
  v5 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
  if (v5)
  {
    v6 = *((_QWORD *)v5 + 1);
    if (v6)
      v5 = (unsigned __int8 *)(v6 - 8);
    else
      v5 = 0;
  }
  if (v5 != v3)
  {
    this = WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v3, 1282, (uint64_t)"delete", 7, (uint64_t)"object does not belong to this context", 39);
    goto LABEL_25;
  }
  if (!*((_BYTE *)a2 + 32))
  {
    if (*((_DWORD *)a2 + 9) && *((WebCore::WebGLVertexArrayObjectOES **)v3 + 18) == a2)
    {
      v10 = *((_QWORD *)v3 + 17);
      if (v10)
        ++*(_DWORD *)(v10 + 8);
      if ((WebCore::WebGLVertexArrayObjectOES *)v10 != a2)
      {
        *((_QWORD *)v3 + 18) = v10;
        if (*((_DWORD *)a2 + 2) == 1)
        {
          this = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::WebGLVertexArrayObjectOES *))(*(_QWORD *)a2 + 8))(a2);
          v10 = *((_QWORD *)v3 + 18);
          if (!v10)
            goto LABEL_16;
        }
        else
        {
          --*((_DWORD *)a2 + 2);
          if (!v10)
            goto LABEL_16;
        }
        *(_BYTE *)(v10 + 40) = 1;
        goto LABEL_16;
      }
      if (*((_DWORD *)a2 + 2) == 1)
        this = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::WebGLVertexArrayObjectOES *))(*(_QWORD *)a2 + 8))(a2);
      else
        --*((_DWORD *)a2 + 2);
    }
LABEL_16:
    v7 = (_DWORD *)*((_QWORD *)v3 + 11);
    if (v7)
    {
      ++v7[2];
      *((_BYTE *)a2 + 32) = 1;
      if (*((_DWORD *)a2 + 6))
      {
        v8 = *((_QWORD *)a2 + 2);
        if (v8)
        {
          if (*(_QWORD *)(v8 + 8))
          {
            if (!*((_DWORD *)a2 + 7))
            {
              this = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::WebGLVertexArrayObjectOES *, WTF::Lock **, _DWORD *))(*(_QWORD *)a2 + 16))(a2, &v13, v7);
              if (!*((_DWORD *)a2 + 7))
                *((_DWORD *)a2 + 6) = 0;
            }
          }
        }
      }
      if (v7[2] == 1)
        this = (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 16))(v7);
      else
        --v7[2];
    }
    else
    {
      *((_BYTE *)a2 + 32) = 1;
      if (*((_DWORD *)a2 + 6))
      {
        v11 = *((_QWORD *)a2 + 2);
        if (v11)
        {
          v12 = *(_QWORD *)(v11 + 8);
          if (v12)
          {
            if (!*((_DWORD *)a2 + 7))
            {
              if (!*(_QWORD *)(v12 + 80)
                || (this = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::WebGLVertexArrayObjectOES *, WTF::Lock **))(*(_QWORD *)a2 + 16))(a2, &v13), !*((_DWORD *)a2 + 7)))
              {
                *((_DWORD *)a2 + 6) = 0;
              }
            }
          }
        }
      }
    }
  }
LABEL_25:
  if (v14)
  {
    this = v13;
    v9 = __ldxr((unsigned __int8 *)v13);
    if (v9 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
        return this;
    }
    else
    {
      __clrex();
    }
    return (WTF::StringImpl *)WTF::Lock::unlockSlow(this);
  }
  return this;
}

WTF::StringImpl *WebCore::OESVertexArrayObject::bindVertexArrayOES(WTF::StringImpl *this, WebCore::WebGLVertexArrayObjectOES *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl **v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;

  if (*((_QWORD *)this + 2))
  {
    v3 = *((_QWORD *)this + 2);
    v4 = (unsigned __int8 *)(v3 + 96);
    if (__ldaxr((unsigned __int8 *)(v3 + 96)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v4))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C](v3 + 96);
LABEL_6:
    if (a2)
    {
      v6 = *((_QWORD *)a2 + 2);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
          v6 = v7 - 8;
        else
          v6 = 0;
      }
      if (v6 != v3)
      {
        v8 = "object does not belong to this context";
        v9 = 39;
LABEL_13:
        this = WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v3, 1282, (uint64_t)"bindVertexArrayOES", 19, (uint64_t)v8, v9);
        goto LABEL_45;
      }
      v8 = "attempt to use a deleted object";
      v9 = 32;
      if (!*((_DWORD *)a2 + 6) || *((_BYTE *)a2 + 32))
        goto LABEL_13;
    }
    v10 = *(_DWORD **)(v3 + 88);
    if (v10)
      ++v10[2];
    if (a2 && *((_DWORD *)a2 + 9) && *((_DWORD *)a2 + 6))
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 1232))(v10);
      v11 = *((_DWORD *)a2 + 2);
      *((_DWORD *)a2 + 2) = v11 + 1;
      this = *(WTF::StringImpl **)(v3 + 144);
      if (this == a2)
      {
        if (v11)
          *((_DWORD *)a2 + 2) = v11;
        else
          this = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::WebGLVertexArrayObjectOES *))(*(_QWORD *)a2 + 8))(a2);
        goto LABEL_43;
      }
      *(_QWORD *)(v3 + 144) = a2;
      if (!this)
        goto LABEL_25;
      if (*((_DWORD *)this + 2) != 1)
      {
        --*((_DWORD *)this + 2);
LABEL_25:
        *((_BYTE *)a2 + 40) = 1;
        goto LABEL_43;
      }
      this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 8))(this);
      a2 = *(WebCore::WebGLVertexArrayObjectOES **)(v3 + 144);
      if (a2)
        goto LABEL_25;
LABEL_43:
      if (v10[2] == 1)
        this = (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
      else
        --v10[2];
LABEL_45:
      v16 = __ldxr(v4);
      if (v16 == 1)
      {
        if (!__stlxr(0, v4))
          return this;
      }
      else
      {
        __clrex();
      }
      return (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
    }
    (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v10 + 1232))(v10, 0);
    this = *(WTF::StringImpl **)(v3 + 136);
    if (this)
    {
      v12 = *((_DWORD *)this + 2);
      *((_DWORD *)this + 2) = v12 + 1;
      v15 = *(WTF::StringImpl **)(v3 + 144);
      v14 = (WTF::StringImpl **)(v3 + 144);
      v13 = v15;
      if (v15 == this)
      {
        if (v12)
          *((_DWORD *)this + 2) = v12;
        else
          this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 8))(this);
        goto LABEL_43;
      }
    }
    else
    {
      v17 = *(WTF::StringImpl **)(v3 + 144);
      v14 = (WTF::StringImpl **)(v3 + 144);
      v13 = v17;
      if (!v17)
        goto LABEL_43;
    }
    *v14 = this;
    if (v13)
    {
      if (*((_DWORD *)v13 + 2) == 1)
      {
        (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v13 + 8))(v13);
        this = *v14;
        if (!*v14)
          goto LABEL_43;
LABEL_32:
        *((_BYTE *)this + 40) = 1;
        goto LABEL_43;
      }
      --*((_DWORD *)v13 + 2);
    }
    if (!this)
      goto LABEL_43;
    goto LABEL_32;
  }
  return this;
}

void `non-virtual thunk to'WebCore::OffscreenCanvasRenderingContext2D::~OffscreenCanvasRenderingContext2D(WebCore::OffscreenCanvasRenderingContext2D *this, void *a2)
{
  WebCore::CanvasRenderingContext2DBase::~CanvasRenderingContext2DBase((WebCore::OffscreenCanvasRenderingContext2D *)((char *)this - 40), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::CanvasRenderingContext2DBase::~CanvasRenderingContext2DBase((WebCore::OffscreenCanvasRenderingContext2D *)((char *)this - 40), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::OffscreenCanvasRenderingContext2D::~OffscreenCanvasRenderingContext2D(WebCore::OffscreenCanvasRenderingContext2D *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::CanvasRenderingContext2DBase::~CanvasRenderingContext2DBase(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::OffscreenCanvasRenderingContext2D::setFont(WebCore::OffscreenCanvasRenderingContext2D *this, unsigned int **a2)
{
  const WTF::StringImpl *v4;
  int *v5;
  unsigned int *v6;
  unsigned int v7;
  void *v8;
  unsigned int v9;
  WebCore::FontCascadeFonts *v10;
  int v11;
  uint64_t v12;
  WebCore::CSSParserTokenRange *v13;
  __int128 *v14;
  unint64_t v15;
  __int128 *v16;
  __int128 *v17;
  WTF::StringImpl *v18;
  unsigned int *v19;
  WTF::StringImpl *v20;
  unsigned int v21;
  WTF::StringImpl **v22;
  WTF::StringImpl *v23;
  _DWORD *v24;
  WTF *v25;
  WTF::StringImpl *v26;
  WTF *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  unsigned int v31;
  uint64_t v32;
  WebCore::FontSelector *v33;
  unsigned int *v34;
  WTF::StringImpl *v35;
  unsigned int *v36;
  uint64_t v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  uint64_t v41;
  WTF::StringImpl **v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  __int128 *v46;
  _OWORD v47[6];
  uint64_t v48;
  char v49;
  _DWORD *v50;
  __int16 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;
  int v57;
  unsigned int v58;
  __int16 v59;
  char v60;
  WTF *v61;
  int v62;
  __int16 v63;
  WTF::StringImpl *v64[6];
  __int128 *v65;
  unsigned int v66;
  char v67;
  unsigned __int16 v68[84];
  unsigned int *v69;
  int v70;
  unsigned int v71;
  char v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v5 = (int *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 144))(*((_QWORD *)this + 4));
  v6 = *a2;
  if (!*a2 || !v6[1])
    return;
  v7 = *((_DWORD *)this + 33);
  if (!v7)
  {
    __break(0xC471u);
    goto LABEL_79;
  }
  if (WTF::equal((WTF *)v6, *(const WTF::StringImpl **)(*((_QWORD *)this + 15) + 560 * v7 - 320), v4))
  {
    v9 = *((_DWORD *)this + 33);
    if (!v9)
    {
      __break(0xC471u);
      JUMPOUT(0x195CF5E1CLL);
    }
    v10 = *(WebCore::FontCascadeFonts **)(*((_QWORD *)this + 15) + 560 * v9 - 88);
    if (v10)
    {
      v11 = (*(_DWORD *)v10)++;
      v12 = *((_QWORD *)v10 + 14);
      if (v11)
      {
        *(_DWORD *)v10 = v11;
        if (v12)
          return;
      }
      else
      {
        WebCore::FontCascadeFonts::~FontCascadeFonts(v10, v8);
        WTF::fastFree(v39, v40);
        if (v12)
          return;
      }
    }
  }
  v13 = (WebCore::CSSParserTokenRange *)*((unsigned __int8 *)this + 716);
  WebCore::CSSTokenizer::CSSTokenizer((WebCore::CSSTokenizer *)v64, a2, 0, 0);
  v14 = v65;
  v15 = (unint64_t)v65 + 24 * v66;
  *(_QWORD *)&v47[0] = v65;
  *((_QWORD *)&v47[0] + 1) = v15;
  v16 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
  while (1)
  {
    v17 = v14;
    if ((unint64_t)v14 >= v15)
    {
      v17 = v16;
      {
        v45 = v15;
        v46 = v14;
        v16 = (__int128 *)WebCore::CSSParserToken::CSSParserToken((uint64_t)v16, 30, 0);
        v15 = v45;
        v14 = v46;
        v17 = v16;
      }
    }
    if ((*(_DWORD *)v17 & 0x3F) != 0x10)
      break;
    v14 = (__int128 *)((char *)v14 + 24);
    *(_QWORD *)&v47[0] = v14;
  }
  WebCore::CSSPropertyParserHelpers::consumeFontRaw((unint64_t)v47, v13, (uint64_t)v68);
  WebCore::CSSTokenizer::~CSSTokenizer((WebCore::CSSTokenizer *)v64, v18);
  if (v72)
  {
    v19 = *a2;
    if (v19)
      *v19 += 2;
    WebCore::CanvasRenderingContext2DBase::realizeSaves(this);
    v21 = *((_DWORD *)this + 33);
    if (!v21)
    {
      __break(0xC471u);
      JUMPOUT(0x195CF5E24);
    }
    v22 = (WTF::StringImpl **)(*((_QWORD *)this + 15) + 560 * v21 - 320);
    if (v19)
      *v19 += 2;
    v23 = *v22;
    *v22 = (WTF::StringImpl *)v19;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v20);
      else
        *(_DWORD *)v23 -= 2;
    }
    v48 = 256;
    memset(v47, 0, sizeof(v47));
    v49 = 0;
    v24 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
    if (*MEMORY[0x1E0CBF2F8])
      *v24 += 2;
    v50 = v24;
    v51 = 0;
    v52 = 2143289344;
    v53 = 0;
    v54 = 0;
    v55 = 26216000;
    v56 = 257;
    v57 = 0;
    v58 = v58 & 0x80000000 | 0xE000;
    v59 = 0;
    v60 &= 0xFCu;
    v25 = (WTF *)WTF::fastMalloc((WTF *)0x10);
    *(_QWORD *)v25 = 0x100000001;
    *((_QWORD *)v25 + 1) = 0;
    v61 = v25;
    v62 = 0;
    v63 &= 0xFC00u;
    WTF::AtomStringImpl::add();
    v27 = v61;
    if (!*((_DWORD *)v61 + 1))
    {
      __break(0xC471u);
      goto LABEL_74;
    }
    v28 = v64[0];
    if (v64[0])
      *(_DWORD *)v64[0] += 2;
    v29 = (WTF::StringImpl *)*((_QWORD *)v27 + 1);
    *((_QWORD *)v27 + 1) = v28;
    if (v29)
    {
      if (*(_DWORD *)v29 == 2)
      {
        WTF::StringImpl::destroy(v29, v26);
        if (v28)
        {
LABEL_34:
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v26);
          else
            *(_DWORD *)v28 -= 2;
        }
LABEL_36:
        v62 = 1092616192;
        v57 = 1092616192;
        if (!v72)
          goto LABEL_74;
        WebCore::Style::resolveForFontRaw(v68, (uint64_t)v47, v5, (WebCore::FontCascade *)v64);
        if (!v67)
        {
LABEL_42:
          v34 = (unsigned int *)v61;
          v61 = 0;
          if (v34)
          {
            if (*v34 == 1)
            {
              v41 = v34[1];
              if ((_DWORD)v41)
              {
                v42 = (WTF::StringImpl **)(v34 + 2);
                v43 = 8 * v41;
                do
                {
                  v44 = *v42;
                  *v42 = 0;
                  if (v44)
                  {
                    if (*(_DWORD *)v44 == 2)
                      WTF::StringImpl::destroy(v44, v30);
                    else
                      *(_DWORD *)v44 -= 2;
                  }
                  ++v42;
                  v43 -= 8;
                }
                while (v43);
              }
              WTF::fastFree((WTF *)v34, v30);
            }
            else
            {
              --*v34;
            }
          }
          WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v47, v30);
          if (v19)
          {
            if (*v19 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v19, v35);
            else
              *v19 -= 2;
          }
          if (v72)
          {
            v36 = v69;
            if (v71)
            {
              v37 = 16 * v71;
              do
              {
                v38 = v36[2];
                if ((_DWORD)v38 != -1)
                  ((void (*)(WTF::StringImpl **, unsigned int *))off_1E33DDA90[v38])(v64, v36);
                v36[2] = -1;
                v36 += 4;
                v37 -= 16;
              }
              while (v37);
              v36 = v69;
            }
            if (v36)
            {
              v69 = 0;
              v70 = 0;
              WTF::fastFree((WTF *)v36, v35);
            }
          }
          return;
        }
        v31 = *((_DWORD *)this + 33);
        if (v31)
        {
          v32 = *((_QWORD *)this + 15);
          v33 = (WebCore::FontSelector *)(*(uint64_t (**)(int *))(*(_QWORD *)v5 + 304))(v5);
          if (v67)
          {
            WebCore::CanvasRenderingContext2DBase::FontProxy::initialize((WebCore::CanvasRenderingContext2DBase::FontProxy *)(v32 + 560 * v31 - 312), v33, (const WebCore::FontCascade *)v64);
            if (v67)
              WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)v64, v30);
            goto LABEL_42;
          }
LABEL_74:
          __break(1u);
        }
        __break(0xC471u);
LABEL_79:
        JUMPOUT(0x195CF5E14);
      }
      *(_DWORD *)v29 -= 2;
    }
    if (v28)
      goto LABEL_34;
    goto LABEL_36;
  }
}

void WebCore::OffscreenCanvasRenderingContext2D::transferToImageBuffer(WebCore::OffscreenCanvasRenderingContext2D *this@<X0>, uint64_t *a2@<X8>)
{
  int32x2_t *v3;
  WebCore::ImageBuffer *v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  unsigned int v8;
  uint64_t v9;
  float v10;
  float v11;

  v3 = (int32x2_t *)*((_QWORD *)this + 4);
  if (v3[9].i8[1])
  {
    v4 = (WebCore::ImageBuffer *)v3[2];
    if (v4)
    {
      WebCore::ImageBuffer::clone(v4, a2);
      v5 = (*(uint64_t (**)(WebCore::OffscreenCanvasRenderingContext2D *))(*(_QWORD *)this + 240))(this);
      if (v5)
      {
        v6 = v5;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 96))(v5, 1);
        (*(void (**)(uint64_t *__return_ptr, WebCore::OffscreenCanvasRenderingContext2D *))(*(_QWORD *)this + 248))(&v9, this);
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 664))(v6, &v9);
        v7 = (float)(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 4) + 56))(*((_QWORD *)this + 4));
        v8 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 4) + 64))(*((_QWORD *)this + 4));
        v9 = 0;
        v10 = v7;
        v11 = (float)v8;
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 280))(v6, &v9);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 104))(v6, 1);
      }
    }
    else
    {
      *a2 = 0;
    }
  }
  else
  {
    WebCore::CanvasBase::allocateImageBuffer(v3, a2);
  }
}

uint64_t WebCore::OffscreenCanvasRenderingContext2D::fontProxy(WebCore::OffscreenCanvasRenderingContext2D *this, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  WebCore::FontCascadeFonts *v6;
  int v7;
  uint64_t v8;
  WTF *v10;
  void *v11;

  v2 = *((unsigned int *)this + 33);
  if (!(_DWORD)v2)
    goto LABEL_14;
  v4 = v2 - 1;
  v5 = *((_QWORD *)this + 15);
  v6 = *(WebCore::FontCascadeFonts **)(v5 + 560 * (v2 - 1) + 472);
  if (!v6)
  {
LABEL_7:
    WebCore::OffscreenCanvasRenderingContext2D::setFont(this, (unsigned int **)(v5 + 560 * v4 + 240));
    LODWORD(v2) = *((_DWORD *)this + 33);
    goto LABEL_8;
  }
  v7 = (*(_DWORD *)v6)++;
  v8 = *((_QWORD *)v6 + 14);
  if (v7)
  {
    *(_DWORD *)v6 = v7;
    if (v8)
      goto LABEL_8;
LABEL_5:
    if ((_DWORD)v2)
    {
      v5 = *((_QWORD *)this + 15);
      v4 = v2 - 1;
      goto LABEL_7;
    }
LABEL_14:
    __break(0xC471u);
    JUMPOUT(0x195CF5FE4);
  }
  WebCore::FontCascadeFonts::~FontCascadeFonts(v6, a2);
  WTF::fastFree(v10, v11);
  LODWORD(v2) = *((_DWORD *)this + 33);
  if (!v8)
    goto LABEL_5;
LABEL_8:
  if (!(_DWORD)v2)
  {
    __break(0xC471u);
    JUMPOUT(0x195CF5FECLL);
  }
  return *((_QWORD *)this + 15) + 560 * v2 - 312;
}

void WebCore::PaintRenderingContext2D::~PaintRenderingContext2D(WebCore::PaintRenderingContext2D *this, void *a2)
{
  WebCore::DisplayList::DrawingContext *v3;
  WTF *v4;
  void *v5;

  v3 = (WebCore::DisplayList::DrawingContext *)*((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v3)
  {
    WebCore::DisplayList::DrawingContext::~DrawingContext(v3);
    WTF::fastFree(v4, v5);
  }
  WebCore::CanvasRenderingContext2DBase::~CanvasRenderingContext2DBase(this, a2);
}

{
  WebCore::DisplayList::DrawingContext *v3;
  WTF *v4;
  void *v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WebCore::DisplayList::DrawingContext *)*((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v3)
  {
    WebCore::DisplayList::DrawingContext::~DrawingContext(v3);
    WTF::fastFree(v4, v5);
  }
  WebCore::CanvasRenderingContext2DBase::~CanvasRenderingContext2DBase(this, a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

void `non-virtual thunk to'WebCore::PaintRenderingContext2D::~PaintRenderingContext2D(WebCore::PaintRenderingContext2D *this, void *a2)
{
  WebCore::DisplayList::DrawingContext *v3;
  WTF *v4;
  void *v5;

  v3 = (WebCore::DisplayList::DrawingContext *)*((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v3)
  {
    WebCore::DisplayList::DrawingContext::~DrawingContext(v3);
    WTF::fastFree(v4, v5);
  }
  WebCore::CanvasRenderingContext2DBase::~CanvasRenderingContext2DBase((WebCore::PaintRenderingContext2D *)((char *)this - 40), a2);
}

{
  WebCore::DisplayList::DrawingContext *v3;
  WTF *v4;
  void *v5;
  bmalloc::api *v6;
  void *v7;

  v3 = (WebCore::DisplayList::DrawingContext *)*((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v3)
  {
    WebCore::DisplayList::DrawingContext::~DrawingContext(v3);
    WTF::fastFree(v4, v5);
  }
  WebCore::CanvasRenderingContext2DBase::~CanvasRenderingContext2DBase((WebCore::PaintRenderingContext2D *)((char *)this - 40), a2);
  bmalloc::api::isoDeallocate(v6, v7);
}

uint64_t WebCore::PaintRenderingContext2D::drawingContext(WebCore::PaintRenderingContext2D *this)
{
  uint64_t v1;
  int32x2_t *v3;
  float32x2_t v4;
  unint64_t v5;
  void *v6;
  WebCore::DisplayList::DrawingContext *v7;
  WTF *v8;
  void *v9;
  _OWORD v11[3];
  _QWORD v12[2];
  int v13;
  uint64_t v14[44];

  v14[43] = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 102);
  if (!v1)
  {
    v3 = (int32x2_t *)*((_QWORD *)this + 4);
    v1 = WTF::fastMalloc((WTF *)0xF30);
    v4 = vcvt_f32_s32(v3[1]);
    v11[0] = xmmword_1969F16A0;
    v11[1] = unk_1969F16B0;
    v11[2] = xmmword_1969F16C0;
    v5 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v5 != -1)
    {
      v14[0] = (uint64_t)&v13;
      v12[0] = v14;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, v12, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    v13 = 0;
    WebCore::GraphicsContextState::GraphicsContextState((uint64_t)v14, &v13, 0);
    v12[0] = 0;
    v12[1] = v4;
    WebCore::DisplayList::Recorder::Recorder(v1, 1, v14, (const WebCore::FloatRect *)v12, (long double *)v11, (const void **)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 0);
    *(_QWORD *)v1 = off_1E34136B0;
    *(_QWORD *)(v1 + 3824) = v1 + 3832;
    WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)v14, v6);
    *(_BYTE *)(v1 + 3880) = 0;
    *(_OWORD *)(v1 + 3848) = 0u;
    *(_OWORD *)(v1 + 3864) = 0u;
    *(_OWORD *)(v1 + 3832) = 0u;
    v7 = (WebCore::DisplayList::DrawingContext *)*((_QWORD *)this + 102);
    *((_QWORD *)this + 102) = v1;
    if (v7)
    {
      WebCore::DisplayList::DrawingContext::~DrawingContext(v7);
      WTF::fastFree(v8, v9);
      return *((_QWORD *)this + 102);
    }
  }
  return v1;
}

uint64_t WebCore::PaintRenderingContext2D::existingDrawingContext(WebCore::PaintRenderingContext2D *this)
{
  return *((_QWORD *)this + 102);
}

double WebCore::PaintRenderingContext2D::baseTransform@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *a1 = xmmword_1969F16A0;
  a1[1] = unk_1969F16B0;
  result = 0.0;
  a1[2] = xmmword_1969F16C0;
  return result;
}

uint64_t WebCore::PaintRenderingContext2D::replayDisplayList(uint64_t this, WebCore::GraphicsContext *a2)
{
  uint64_t v2;
  _DWORD *v3;
  _QWORD *v4;
  int v5;
  int32x2_t *v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::GraphicsContext *v10;
  uint64_t v11;
  _QWORD v12[2];
  WTF *v13[4];
  _QWORD v14[3];
  uint64_t v15;

  v2 = *(_QWORD *)(this + 816);
  if (v2 && *(_DWORD *)(v2 + 3844))
  {
    v3 = (_DWORD *)(v2 + 3832);
    {
      v4 = (_QWORD *)WebCore::ControlFactory::shared(void)::shared;
      v5 = *(_DWORD *)(WebCore::ControlFactory::shared(void)::shared + 8) + 1;
    }
    else
    {
      v10 = a2;
      v11 = this;
      v9 = *(_QWORD *)(this + 816);
      v8 = WTF::fastMalloc((WTF *)0x10);
      v2 = v9;
      a2 = v10;
      v4 = (_QWORD *)v8;
      this = v11;
      *v4 = off_1E3351410;
      v4[1] = 1;
      WebCore::ControlFactory::shared(void)::shared = (uint64_t)v4;
      v5 = 2;
    }
    v14[0] = a2;
    v14[1] = v3;
    v14[2] = v2 + 3848;
    *((_DWORD *)v4 + 2) = v5;
    v15 = (uint64_t)v4;
    v6 = *(int32x2_t **)(this + 32);
    v12[0] = 0;
    v12[1] = vcvt_f32_s32(v6[1]);
    WebCore::DisplayList::Replayer::replay((uint64_t)v14, (const WebCore::FloatRect *)v12, 0, (uint64_t *)v13);
    v7 = v13[0];
    v13[0] = 0;
    if (v7)
      std::default_delete<WebCore::DisplayList::DisplayList>::operator()[abi:sn180100]((int)v13, v7);
    WebCore::DisplayList::DisplayList::clear(v3, v7);
    this = v15;
    v15 = 0;
    if (this)
    {
      if (*(_DWORD *)(this + 8) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
      else
        --*(_DWORD *)(this + 8);
    }
  }
  return this;
}

void WebCore::Path2D::~Path2D(WebCore::Path2D *this)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E32CDB50;
  v2 = *((unsigned int *)this + 18);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_2[v2])(&v3, (char *)this + 16);
  *((_DWORD *)this + 18) = -1;
}

{
  uint64_t v2;
  char v3;

  *(_QWORD *)this = off_1E32CDB50;
  v2 = *((unsigned int *)this + 18);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_2[v2])(&v3, (char *)this + 16);
  *((_DWORD *)this + 18) = -1;
}

void WebCore::Path2D::~Path2D(WebCore::Path2D *this, void *a2)
{
  uint64_t v3;
  char v4;

  *(_QWORD *)this = off_1E32CDB50;
  v3 = *((unsigned int *)this + 18);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_2[v3])(&v4, (char *)this + 16);
  *((_DWORD *)this + 18) = -1;
  WTF::fastFree(this, a2);
}

void WebCore::Path2D::addPath(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  WTF::StringImpl *v8;
  char v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  int v16;
  uint64_t v17;
  double v18;
  WebCore::PathCG *v20;
  CGPathRef *v21;
  WTF::StringImpl *v22;
  _QWORD v23[6];
  _BYTE v24[8];
  WTF::StringImpl *v25;
  char v26;

  WebCore::DOMMatrixReadOnly::validateAndFixup(a3, (uint64_t)v24);
  if (v26)
  {
    v9 = v24[0];
    *(_QWORD *)(a4 + 8) = v25;
    *(_BYTE *)a4 = v9;
    *(_BYTE *)(a4 + 16) = 1;
    return;
  }
  if (*(_BYTE *)(a3 + 8))
    v10 = *(double *)a3;
  else
    v10 = 1.0;
  if (*(_BYTE *)(a3 + 24))
    v11 = *(double *)(a3 + 16);
  else
    v11 = 0.0;
  if (*(_BYTE *)(a3 + 40))
    v12 = *(double *)(a3 + 32);
  else
    v12 = 0.0;
  if (*(_BYTE *)(a3 + 56))
    v13 = *(double *)(a3 + 48);
  else
    v13 = 1.0;
  v14 = *(double *)(a3 + 64);
  if (!*(_BYTE *)(a3 + 72))
    v14 = 0.0;
  v15 = *(double *)(a3 + 80);
  if (!*(_BYTE *)(a3 + 88))
    v15 = 0.0;
  *(double *)v23 = v10;
  *(double *)&v23[1] = v11;
  *(double *)&v23[2] = v12;
  *(double *)&v23[3] = v13;
  *(double *)&v23[4] = v14;
  *(double *)&v23[5] = v15;
  v16 = *(_DWORD *)(a2 + 72);
  if (v16 != 2)
  {
    if (!v16)
      goto LABEL_29;
LABEL_24:
    v18 = fabs(v10 * v13 - v11 * v12);
    if ((unint64_t)(*(_QWORD *)&v18 - 0x10000000000000) >> 53 <= 0x3FE
      || (unint64_t)(*(_QWORD *)&v18 - 1) <= 0xFFFFFFFFFFFFELL)
    {
      v20 = (WebCore::PathCG *)WebCore::Path::ensurePlatformPathImpl((WebCore::Path *)(a1 + 8));
      v21 = (CGPathRef *)WebCore::Path::ensurePlatformPathImpl((WebCore::Path *)(a2 + 8));
      WebCore::PathCG::addPath(v20, v21, (const WebCore::AffineTransform *)v23);
    }
    goto LABEL_29;
  }
  v17 = *(_QWORD *)(a2 + 16);
  if (!v17 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 200))(v17) & 1) == 0)
    goto LABEL_24;
LABEL_29:
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (v26)
  {
    v22 = v25;
    v25 = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 2)
        WTF::StringImpl::destroy(v22, v8);
      else
        *(_DWORD *)v22 -= 2;
    }
  }
}

void WebCore::PlaceholderRenderingContextSource::setPlaceholderBuffer(WebCore::PlaceholderRenderingContextSource *this, WebCore::ImageBuffer *a2)
{
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;

  WebCore::ImageBuffer::clone(a2, (uint64_t *)&v29);
  v3 = v29;
  if (!v29)
    return;
  v29 = 0;
  (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*v3 + 152))(&v28, v3);
  v5 = v3[1];
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v5);
LABEL_6:
  v7 = *(_QWORD *)(v5 + 8);
  v8 = v7 - 1;
  *(_QWORD *)(v5 + 8) = v7 - 1;
  if (v7 == 1)
  {
    v25 = *(_QWORD *)(v5 + 16);
    v9 = *(_QWORD *)(v5 + 24);
    *(_QWORD *)(v5 + 24) = 0;
    v10 = v25 != 0;
  }
  else
  {
    v9 = 0;
    v10 = 1;
  }
  v11 = __ldxr((unsigned __int8 *)v5);
  if (v11 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v5);
    if (v8)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
    goto LABEL_13;
  if (v8)
    goto LABEL_18;
LABEL_14:
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (!v10)
    WTF::fastFree((WTF *)v5, v4);
LABEL_18:
  v12 = v28;
  if (v28)
  {
    v13 = (unsigned int *)*((_QWORD *)this + 2);
    if (v13)
    {
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 + 1, v13));
      v12 = v28;
    }
    v28 = 0;
    v15 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
    *v15 = &off_1E33DDE98;
    v15[1] = v13;
    v15[2] = v12;
    v27 = v15;
    WTF::callOnMainThread();
    if (v27)
      (*(void (**)(_QWORD *))(*v27 + 8))(v27);
    v16 = v28;
    v28 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  v17 = (uint64_t)v29;
  v29 = 0;
  if (v17)
  {
    v18 = *(_QWORD *)(v17 + 8);
    if (__ldaxr((unsigned __int8 *)v18))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v18))
    {
      goto LABEL_31;
    }
    MEMORY[0x19AEA534C](v18);
LABEL_31:
    v20 = *(_QWORD *)(v18 + 8);
    v21 = v20 - 1;
    *(_QWORD *)(v18 + 8) = v20 - 1;
    if (v20 == 1)
    {
      v26 = *(_QWORD *)(v18 + 16);
      v22 = *(_QWORD *)(v18 + 24);
      *(_QWORD *)(v18 + 24) = 0;
      v23 = v26 != 0;
    }
    else
    {
      v22 = 0;
      v23 = 1;
    }
    v24 = __ldxr((unsigned __int8 *)v18);
    if (v24 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v18))
      {
        if (v21)
          return;
LABEL_39:
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        if (!v23)
          WTF::fastFree((WTF *)v18, v4);
        return;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v18);
    if (v21)
      return;
    goto LABEL_39;
  }
}

uint64_t WebCore::PlaceholderRenderingContext::create@<X0>(WebCore::PlaceholderRenderingContext *this@<X0>, WebCore::CanvasRenderingContext **a2@<X8>)
{
  WebCore::CanvasRenderingContext *v5;
  uint64_t v6;
  uint64_t result;
  unsigned int v8;
  void *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;

  v5 = (WebCore::CanvasRenderingContext *)bmalloc::api::isoAllocate();
  *(_QWORD *)WebCore::CanvasRenderingContext::CanvasRenderingContext(v5, (WebCore::PlaceholderRenderingContext *)((char *)this + 112)) = off_1E33DD688;
  v6 = WTF::fastMalloc((WTF *)0x28);
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)v6 = off_1E33DD658;
  result = *((_QWORD *)v5 + 2);
  if (result)
    goto LABEL_12;
  result = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)result = 1;
  *(_QWORD *)(result + 8) = v5;
  v10 = (unsigned int *)*((_QWORD *)v5 + 2);
  *((_QWORD *)v5 + 2) = result;
  if (!v10)
    goto LABEL_12;
  do
  {
    v11 = __ldaxr(v10);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, v10));
  if (!v12)
  {
    atomic_store(1u, v10);
    WTF::fastFree((WTF *)v10, v9);
  }
  result = *((_QWORD *)v5 + 2);
  if (result)
  {
LABEL_12:
    do
      v8 = __ldaxr((unsigned int *)result);
    while (__stlxr(v8 + 1, (unsigned int *)result));
  }
  *(_QWORD *)(v6 + 16) = result;
  *(_QWORD *)v6 = off_1E33DDD60;
  *(_BYTE *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  *((_QWORD *)v5 + 5) = v6;
  *a2 = v5;
  return result;
}

uint64_t WebCore::PlaceholderRenderingContext::setContentsToLayer(WebCore::PlaceholderRenderingContext *this, WebCore::GraphicsLayer *a2)
{
  return (*(uint64_t (**)(_QWORD, WebCore::GraphicsLayer *))(**((_QWORD **)this + 5) + 24))(*((_QWORD *)this + 5), a2);
}

uint64_t WebCore::toPredefinedColorSpace(WebCore *this, const WebCore::DestinationColorSpace *a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  char v7;
  char **v8;
  char *v9;

  v2 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v2 != -1)
  {
    v9 = &v7;
    v8 = &v9;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v8, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  v3 = CGColorSpaceEqualToColorSpace();
  if ((v3 & 1) != 0)
  {
    v4 = 0;
    v5 = 1;
  }
  else
  {
    WebCore::DestinationColorSpace::DisplayP3((WebCore::DestinationColorSpace *)v3);
    v4 = CGColorSpaceEqualToColorSpace();
    v5 = v4;
  }
  return v4 | (v5 << 8);
}

void WebCore::WebGL2RenderingContext::~WebGL2RenderingContext(WebCore::WebGL2RenderingContext *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD **v8;
  uint64_t v9;
  _DWORD *v10;
  WTF *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD **v16;
  uint64_t v17;
  _DWORD *v18;
  WTF *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v3 = (_DWORD *)*((_QWORD *)this + 116);
  if (v3)
  {
    *((_QWORD *)this + 116) = 0;
    if (v3[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      v36 = *((_QWORD *)this + 116);
      if (v36)
        *(_BYTE *)(v36 + 48) = 1;
    }
    else
    {
      --v3[2];
    }
  }
  v4 = (_DWORD *)*((_QWORD *)this + 117);
  if (v4)
  {
    *((_QWORD *)this + 117) = 0;
    if (v4[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      v37 = *((_QWORD *)this + 117);
      if (v37)
        *(_BYTE *)(v37 + 35) = 1;
    }
    else
    {
      --v4[2];
    }
  }
  v5 = (_DWORD *)*((_QWORD *)this + 123);
  if (v5)
  {
    *((_QWORD *)this + 123) = 0;
    if (v5[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
      v38 = *((_QWORD *)this + 123);
      if (v38 && !*(_DWORD *)(v38 + 36))
        *(_DWORD *)(v38 + 36) = 35982;
    }
    else
    {
      --v5[2];
    }
  }
  v6 = (_DWORD *)*((_QWORD *)this + 124);
  if (v6)
  {
    *((_QWORD *)this + 124) = 0;
    if (v6[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
      v39 = *((_QWORD *)this + 124);
      if (v39 && !*(_DWORD *)(v39 + 36))
        *(_DWORD *)(v39 + 36) = 35345;
    }
    else
    {
      --v6[2];
    }
  }
  if (*((_DWORD *)this + 252))
  {
    v7 = *((unsigned int *)this + 253);
    if ((_DWORD)v7)
    {
      v8 = (_DWORD **)*((_QWORD *)this + 125);
      v9 = 8 * v7;
      do
      {
        v10 = *v8;
        *v8 = 0;
        if (v10)
        {
          if (v10[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
          else
            --v10[2];
        }
        ++v8;
        v9 -= 8;
      }
      while (v9);
      *((_DWORD *)this + 253) = 0;
    }
    v11 = (WTF *)*((_QWORD *)this + 125);
    if (v11)
    {
      *((_QWORD *)this + 125) = 0;
      *((_DWORD *)this + 252) = 0;
      WTF::fastFree(v11, a2);
    }
  }
  v12 = (_DWORD *)*((_QWORD *)this + 127);
  *((_QWORD *)this + 127) = 0;
  if (v12)
  {
    if (v12[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    else
      --v12[2];
  }
  v13 = (_DWORD *)*((_QWORD *)this + 128);
  *((_QWORD *)this + 128) = 0;
  if (v13)
  {
    if (v13[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
    else
      --v13[2];
  }
  v14 = (_DWORD *)*((_QWORD *)this + 129);
  *((_QWORD *)this + 129) = 0;
  if (v14)
  {
    if (v14[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
    else
      --v14[2];
  }
  v15 = *((unsigned int *)this + 263);
  if ((_DWORD)v15)
  {
    v16 = (_DWORD **)*((_QWORD *)this + 130);
    v17 = 8 * v15;
    do
    {
      v18 = *v16;
      *v16 = 0;
      if (v18)
      {
        if (v18[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
        else
          --v18[2];
      }
      ++v16;
      v17 -= 8;
    }
    while (v17);
  }
  v19 = (WTF *)*((_QWORD *)this + 130);
  if (v19)
  {
    *((_QWORD *)this + 130) = 0;
    *((_DWORD *)this + 262) = 0;
    WTF::fastFree(v19, a2);
  }
  v20 = (_DWORD *)*((_QWORD *)this + 129);
  *((_QWORD *)this + 129) = 0;
  if (v20)
  {
    if (v20[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
    else
      --v20[2];
  }
  v21 = (_DWORD *)*((_QWORD *)this + 128);
  *((_QWORD *)this + 128) = 0;
  if (v21)
  {
    if (v21[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
    else
      --v21[2];
  }
  v22 = (_DWORD *)*((_QWORD *)this + 127);
  *((_QWORD *)this + 127) = 0;
  if (v22)
  {
    if (v22[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
    else
      --v22[2];
  }
  v23 = *((unsigned int *)this + 253);
  v24 = (WTF *)*((_QWORD *)this + 125);
  if ((_DWORD)v23)
  {
    v25 = 8 * v23;
    do
    {
      v26 = *(_DWORD **)v24;
      *(_QWORD *)v24 = 0;
      if (v26)
      {
        if (v26[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
        else
          --v26[2];
      }
      v24 = (WTF *)((char *)v24 + 8);
      v25 -= 8;
    }
    while (v25);
    v24 = (WTF *)*((_QWORD *)this + 125);
  }
  if (v24)
  {
    *((_QWORD *)this + 125) = 0;
    *((_DWORD *)this + 252) = 0;
    WTF::fastFree(v24, a2);
  }
  v27 = (_DWORD *)*((_QWORD *)this + 124);
  *((_QWORD *)this + 124) = 0;
  if (v27)
  {
    if (v27[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v27 + 8))(v27);
    else
      --v27[2];
  }
  v28 = (_DWORD *)*((_QWORD *)this + 123);
  *((_QWORD *)this + 123) = 0;
  if (v28)
  {
    if (v28[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
    else
      --v28[2];
  }
  v29 = (_DWORD *)*((_QWORD *)this + 122);
  *((_QWORD *)this + 122) = 0;
  if (v29)
  {
    if (v29[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
    else
      --v29[2];
  }
  v30 = (_DWORD *)*((_QWORD *)this + 121);
  *((_QWORD *)this + 121) = 0;
  if (v30)
  {
    if (v30[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
    else
      --v30[2];
  }
  v31 = (_DWORD *)*((_QWORD *)this + 120);
  *((_QWORD *)this + 120) = 0;
  if (v31)
  {
    if (v31[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 8))(v31);
    else
      --v31[2];
  }
  v32 = (_DWORD *)*((_QWORD *)this + 119);
  *((_QWORD *)this + 119) = 0;
  if (v32)
  {
    if (v32[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
    else
      --v32[2];
  }
  v33 = (_DWORD *)*((_QWORD *)this + 118);
  *((_QWORD *)this + 118) = 0;
  if (v33)
  {
    if (v33[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v33 + 8))(v33);
    else
      --v33[2];
  }
  v34 = (_DWORD *)*((_QWORD *)this + 117);
  *((_QWORD *)this + 117) = 0;
  if (v34)
  {
    if (v34[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 8))(v34);
    else
      --v34[2];
  }
  v35 = (_DWORD *)*((_QWORD *)this + 116);
  *((_QWORD *)this + 116) = 0;
  if (v35)
  {
    if (v35[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
    else
      --v35[2];
  }
  WebCore::WebGLRenderingContextBase::~WebGLRenderingContextBase(this, a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::WebGL2RenderingContext::~WebGL2RenderingContext(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void `non-virtual thunk to'WebCore::WebGL2RenderingContext::~WebGL2RenderingContext(WebCore::WebGL2RenderingContext *this, void *a2)
{
  WebCore::WebGL2RenderingContext::~WebGL2RenderingContext((WebCore::WebGL2RenderingContext *)((char *)this - 8), a2);
}

{
  WebCore::WebGL2RenderingContext::~WebGL2RenderingContext((WebCore::WebGL2RenderingContext *)((char *)this - 48), a2);
}

{
  WebCore::WebGL2RenderingContext::~WebGL2RenderingContext((WebCore::WebGL2RenderingContext *)((char *)this - 72), a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::WebGL2RenderingContext::~WebGL2RenderingContext((WebCore::WebGL2RenderingContext *)((char *)this - 8), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::WebGL2RenderingContext::~WebGL2RenderingContext((WebCore::WebGL2RenderingContext *)((char *)this - 48), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::WebGL2RenderingContext::~WebGL2RenderingContext((WebCore::WebGL2RenderingContext *)((char *)this - 72), a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

void WebCore::WebGL2RenderingContext::initializeContextState(WebCore::WebGL2RenderingContext *this)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  WebCore::WebGL2RenderingContext *v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _DWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  WTF *v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  WTF *v30;
  _DWORD *v31;
  _DWORD *v32;
  _DWORD **v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  int v42;
  _BOOL4 v43;
  _BOOL4 v44;
  _BOOL4 v45;
  BOOL v46;
  int v47;
  int v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  _DWORD **v52;
  uint64_t v53;
  _DWORD *v54;
  WTF *v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  void *v63;
  void *v64;
  char *v65;
  _DWORD **v66;
  uint64_t v67;
  _DWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  WebCore::WebGLRenderingContextBase::initializeContextState(this);
  v2 = (_DWORD *)*((_QWORD *)this + 116);
  if (v2)
  {
    *((_QWORD *)this + 116) = 0;
    if (v2[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
      v69 = *((_QWORD *)this + 116);
      if (v69)
        *(_BYTE *)(v69 + 48) = 1;
    }
    else
    {
      --v2[2];
    }
  }
  v3 = (_DWORD *)*((_QWORD *)this + 119);
  if (v3)
  {
    *((_QWORD *)this + 119) = 0;
    if (v3[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
      v70 = *((_QWORD *)this + 119);
      if (v70 && !*(_DWORD *)(v70 + 36))
        *(_DWORD *)(v70 + 36) = 36662;
    }
    else
    {
      --v3[2];
    }
  }
  v4 = (_DWORD *)*((_QWORD *)this + 120);
  if (v4)
  {
    *((_QWORD *)this + 120) = 0;
    if (v4[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
      v71 = *((_QWORD *)this + 120);
      if (v71 && !*(_DWORD *)(v71 + 36))
        *(_DWORD *)(v71 + 36) = 36663;
    }
    else
    {
      --v4[2];
    }
  }
  v5 = (_DWORD *)*((_QWORD *)this + 121);
  if (v5)
  {
    *((_QWORD *)this + 121) = 0;
    if (v5[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
      v72 = *((_QWORD *)this + 121);
      if (v72 && !*(_DWORD *)(v72 + 36))
        *(_DWORD *)(v72 + 36) = 35051;
    }
    else
    {
      --v5[2];
    }
  }
  v6 = (_DWORD *)*((_QWORD *)this + 122);
  if (v6)
  {
    *((_QWORD *)this + 122) = 0;
    if (v6[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
      v73 = *((_QWORD *)this + 122);
      if (v73 && !*(_DWORD *)(v73 + 36))
        *(_DWORD *)(v73 + 36) = 35052;
    }
    else
    {
      --v6[2];
    }
  }
  v7 = (_DWORD *)*((_QWORD *)this + 123);
  if (v7)
  {
    *((_QWORD *)this + 123) = 0;
    if (v7[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
      v74 = *((_QWORD *)this + 123);
      if (v74 && !*(_DWORD *)(v74 + 36))
        *(_DWORD *)(v74 + 36) = 35982;
    }
    else
    {
      --v7[2];
    }
  }
  v8 = (_DWORD *)*((_QWORD *)this + 124);
  if (v8)
  {
    *((_QWORD *)this + 124) = 0;
    if (v8[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
      v75 = *((_QWORD *)this + 124);
      if (v75 && !*(_DWORD *)(v75 + 36))
        *(_DWORD *)(v75 + 36) = 35345;
    }
    else
    {
      --v8[2];
    }
  }
  v9 = *((_QWORD *)this + 11);
  LODWORD(v76) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v9 + 472))(v9, 35979, &v76, 1);
  *((_DWORD *)this + 265) = v76;
  WebCore::WebGLTransformFeedback::create(this, v10, &v76);
  v11 = v76;
  v12 = (_DWORD *)*((_QWORD *)this + 118);
  *((_QWORD *)this + 118) = v76;
  if (!v12)
  {
LABEL_25:
    if (v11)
      goto LABEL_26;
LABEL_119:
    v14 = (_DWORD *)*((_QWORD *)this + 117);
    if (!v14)
      goto LABEL_33;
    v15 = (uint64_t *)((char *)this + 936);
    *((_QWORD *)this + 117) = 0;
    goto LABEL_28;
  }
  if (v12[2] != 1)
  {
    --v12[2];
    goto LABEL_25;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
  v11 = *((_QWORD *)this + 118);
  if (!v11)
    goto LABEL_119;
LABEL_26:
  v13 = *(_DWORD *)(v11 + 8);
  *(_DWORD *)(v11 + 8) = v13 + 1;
  v14 = (_DWORD *)*((_QWORD *)this + 117);
  if (v14 == (_DWORD *)v11)
  {
    if (v13)
      *(_DWORD *)(v11 + 8) = v13;
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    goto LABEL_33;
  }
  v15 = (uint64_t *)((char *)this + 936);
  *((_QWORD *)this + 117) = v11;
  if (!v14)
  {
LABEL_30:
    *(_BYTE *)(v11 + 35) = 1;
    goto LABEL_33;
  }
LABEL_28:
  if (v14[2] != 1)
  {
    --v14[2];
    if (!v11)
      goto LABEL_33;
    goto LABEL_30;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
  v11 = *v15;
  if (*v15)
    goto LABEL_30;
LABEL_33:
  v16 = *((_QWORD *)this + 118);
  if (v16)
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 11) + 1800))(*((_QWORD *)this + 11), 36386, *(unsigned int *)(v16 + 24));
  v17 = *((_QWORD *)this + 11);
  LODWORD(v76) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v17 + 472))(v17, 35375, &v76, 1);
  v18 = v76;
  v19 = (int)v76;
  v20 = *((unsigned int *)this + 253);
  if (v20 >= (int)v76)
  {
    if (v20 != (int)v76)
    {
      v33 = (_DWORD **)(*((_QWORD *)this + 125) + 8 * (int)v76);
      v34 = 8 * v20 - 8 * (int)v76;
      do
      {
        v35 = *v33;
        *v33 = 0;
        if (v35)
        {
          if (v35[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 8))(v35);
          else
            --v35[2];
        }
        ++v33;
        v34 -= 8;
      }
      while (v34);
    }
  }
  else
  {
    v21 = *((unsigned int *)this + 252);
    if (v21 < (int)v76)
    {
      v22 = v21 + (v21 >> 2);
      if (v22 >= 0x10)
        v23 = v22 + 1;
      else
        v23 = 16;
      if (v23 <= (int)v76)
        v24 = (int)v76;
      else
        v24 = v23;
      if (v24 >> 29)
        goto LABEL_144;
      v25 = (WTF *)*((_QWORD *)this + 125);
      v26 = WTF::fastMalloc((WTF *)(8 * v24));
      *((_DWORD *)this + 252) = v24;
      *((_QWORD *)this + 125) = v26;
      if ((_DWORD)v20)
      {
        v28 = (_QWORD *)v26;
        v29 = 8 * v20;
        v30 = v25;
        do
        {
          v31 = *(_DWORD **)v30;
          *(_QWORD *)v30 = 0;
          *v28 = v31;
          v32 = *(_DWORD **)v30;
          *(_QWORD *)v30 = 0;
          if (v32)
          {
            if (v32[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
            else
              --v32[2];
          }
          ++v28;
          v30 = (WTF *)((char *)v30 + 8);
          v29 -= 8;
        }
        while (v29);
      }
      if (v25)
      {
        if (*((WTF **)this + 125) == v25)
        {
          *((_QWORD *)this + 125) = 0;
          *((_DWORD *)this + 252) = 0;
        }
        WTF::fastFree(v25, v27);
      }
    }
    v36 = *((_QWORD *)this + 125);
    if (v36)
    {
      v37 = *((unsigned int *)this + 253);
      if (v37 != v19)
        bzero((void *)(v36 + 8 * v37), ((8 * v19 - 8 * v37 - 8) & 0xFFFFFFFFFFFFFFF8) + 8);
    }
  }
  *((_DWORD *)this + 253) = v18;
  v38 = *((_QWORD *)this + 11);
  LODWORD(v76) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v38 + 472))(v38, 35380, &v76, 1);
  *((_DWORD *)this + 264) = v76;
  v39 = *((_QWORD *)this + 11);
  LODWORD(v76) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v39 + 472))(v39, 32883, &v76, 1);
  v40 = v76;
  *((_DWORD *)this + 266) = v76;
  v41 = HIWORD(v40);
  if (v40 >= 0x10000)
  {
    v42 = 17;
  }
  else
  {
    v41 = v40;
    v42 = 1;
  }
  v43 = v41 > 0xFF;
  if (v41 >= 0x100)
    v41 >>= 8;
  v44 = v41 > 0xF;
  if (v41 >= 0x10)
    v41 >>= 4;
  v45 = v41 > 3;
  if (v41 >= 4)
    v41 >>= 2;
  v46 = v41 > 1;
  v47 = v42 | (8 * v43) | (4 * v44) | (2 * v45);
  if (v46)
    ++v47;
  if (v40 >= 1)
    v48 = v47;
  else
    v48 = 0;
  *((_DWORD *)this + 267) = v48;
  v49 = *((_QWORD *)this + 11);
  LODWORD(v76) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v49 + 472))(v49, 35071, &v76, 1);
  *((_DWORD *)this + 268) = v76;
  if (*((_DWORD *)this + 262))
  {
    v51 = *((unsigned int *)this + 263);
    if ((_DWORD)v51)
    {
      v52 = (_DWORD **)*((_QWORD *)this + 130);
      v53 = 8 * v51;
      do
      {
        v54 = *v52;
        *v52 = 0;
        if (v54)
        {
          if (v54[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v54 + 8))(v54);
          else
            --v54[2];
        }
        ++v52;
        v53 -= 8;
      }
      while (v53);
      *((_DWORD *)this + 263) = 0;
    }
    v55 = (WTF *)*((_QWORD *)this + 130);
    if (v55)
    {
      *((_QWORD *)this + 130) = 0;
      *((_DWORD *)this + 262) = 0;
      WTF::fastFree(v55, v50);
    }
  }
  v56 = *((unsigned int *)this + 51);
  v57 = *((unsigned int *)this + 263);
  if (v57 >= v56)
  {
    if ((_DWORD)v57 != (_DWORD)v56)
    {
      v66 = (_DWORD **)(*((_QWORD *)this + 130) + 8 * v56);
      v67 = 8 * v57 - 8 * v56;
      do
      {
        v68 = *v66;
        *v66 = 0;
        if (v68)
        {
          if (v68[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v68 + 8))(v68);
          else
            --v68[2];
        }
        ++v66;
        v67 -= 8;
      }
      while (v67);
    }
    goto LABEL_108;
  }
  v58 = *((unsigned int *)this + 262);
  v59 = (char *)*((_QWORD *)this + 130);
  if (v58 < v56)
  {
    v60 = v58 + (v58 >> 2);
    if (v60 >= 0x10)
      v61 = v60 + 1;
    else
      v61 = 16;
    if (v61 <= v56)
      v62 = *((unsigned int *)this + 51);
    else
      v62 = v61;
    if (!(v62 >> 29))
    {
      v63 = (void *)WTF::fastMalloc((WTF *)(8 * v62));
      *((_DWORD *)this + 262) = v62;
      *((_QWORD *)this + 130) = v63;
      memcpy(v63, v59, 8 * v57);
      v65 = (char *)*((_QWORD *)this + 130);
      if (!v59)
      {
        v59 = (char *)*((_QWORD *)this + 130);
        if (!v65)
          goto LABEL_108;
        goto LABEL_106;
      }
      if (v65 == v59)
      {
        *((_QWORD *)this + 130) = 0;
        *((_DWORD *)this + 262) = 0;
      }
      WTF::fastFree((WTF *)v59, v64);
      v59 = (char *)*((_QWORD *)this + 130);
      goto LABEL_105;
    }
LABEL_144:
    __break(0xC471u);
    JUMPOUT(0x195CF7668);
  }
LABEL_105:
  if (v59)
LABEL_106:
    bzero(&v59[8 * *((unsigned int *)this + 263)], 8 * v56 - 8 * *((unsigned int *)this + 263));
LABEL_108:
  *((_DWORD *)this + 263) = v56;
}

uint64_t WebCore::WebGL2RenderingContext::getInt64Parameter(WebCore::WebGL2RenderingContext *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 488))(*((_QWORD *)this + 11));
}

_DWORD *WebCore::WebGL2RenderingContext::initializeDefaultObjects(WebCore::WebGL2RenderingContext *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  void *v5;
  WTF *v6;
  WTF *v7;
  void *v8;
  WTF *v9;
  _DWORD *v10;
  int v11;
  int v12;
  uint64_t v13;
  _DWORD *result;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  WTF *v20;

  LODWORD(v2) = *(_DWORD *)(*((_QWORD *)this + 5) + 8);
  LODWORD(v3) = *(_DWORD *)(*((_QWORD *)this + 5) + 12);
  v4 = *((_DWORD *)this + 64);
  if (v4 >= *((_DWORD *)this + 62))
    v4 = *((_DWORD *)this + 62);
  if (v4 < (int)v2)
    LODWORD(v2) = v4;
  if (v4 < (int)v3)
    LODWORD(v3) = v4;
  if ((int)v2 >= *((_DWORD *)this + 65))
    LODWORD(v2) = *((_DWORD *)this + 65);
  if ((int)v2 <= 1)
    v2 = 1;
  else
    v2 = v2;
  if ((int)v3 >= *((_DWORD *)this + 66))
    LODWORD(v3) = *((_DWORD *)this + 66);
  if ((int)v3 <= 1)
    v3 = 1;
  else
    v3 = v3;
  WebCore::WebGLDefaultFramebuffer::create((uint64_t)this, v2 | (v3 << 32), (uint64_t *)&v20);
  v6 = v20;
  v20 = 0;
  v7 = (WTF *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = v6;
  if (v7)
  {
    WTF::fastFree(v7, v5);
    v9 = v20;
    v20 = 0;
    if (v9)
      WTF::fastFree(v9, v8);
  }
  v10 = (_DWORD *)*((_QWORD *)this + 11);
  if (v10)
    ++v10[2];
  v11 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v10 + 1208))(v10);
  v12 = v11;
  if (v10[2] == 1)
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 16))(v10);
    if (v12)
      goto LABEL_24;
  }
  else
  {
    --v10[2];
    if (v11)
    {
LABEL_24:
      v13 = WTF::fastMalloc((WTF *)0x50);
      result = (_DWORD *)WebCore::WebGLVertexArrayObjectBase::WebGLVertexArrayObjectBase(v13, (uint64_t)this, v12, 0);
      *(_QWORD *)result = off_1E33DEF00;
      goto LABEL_27;
    }
  }
  result = 0;
LABEL_27:
  v15 = (_DWORD *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = result;
  if (!v15)
    goto LABEL_30;
  if (v15[2] != 1)
  {
    --v15[2];
LABEL_30:
    if (result)
      goto LABEL_31;
LABEL_42:
    v18 = (_QWORD *)((char *)this + 144);
    v17 = (_DWORD *)*((_QWORD *)this + 18);
    if (!v17)
      goto LABEL_38;
    *v18 = 0;
    goto LABEL_33;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
  result = (_DWORD *)*((_QWORD *)this + 17);
  if (!result)
    goto LABEL_42;
LABEL_31:
  v16 = result[2];
  result[2] = v16 + 1;
  v18 = (_QWORD *)((char *)this + 144);
  v17 = (_DWORD *)*((_QWORD *)this + 18);
  if (v17 == result)
  {
    if (v16)
      result[2] = v16;
    else
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    goto LABEL_38;
  }
  *v18 = result;
  if (!v17)
    goto LABEL_35;
LABEL_33:
  if (v17[2] != 1)
  {
    --v17[2];
    if (!result)
      goto LABEL_38;
    goto LABEL_35;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
  result = (_DWORD *)*v18;
  if (*v18)
LABEL_35:
    *((_BYTE *)result + 40) = 1;
LABEL_38:
  v19 = *((_QWORD *)this + 17);
  if (v19)
    return (_DWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 11) + 1232))(*((_QWORD *)this + 11), *(unsigned int *)(v19 + 24));
  return result;
}

uint64_t WebCore::WebGL2RenderingContext::validateBufferTarget(WTF::StringImpl *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result;

  result = 1;
  if (a4 <= 35344)
  {
    if ((a4 - 34962) < 2 || (a4 - 35051) < 2)
      return result;
LABEL_8:
    WebCore::WebGLRenderingContextBase::synthesizeGLError(a1, 1280, a2, a3, (uint64_t)"invalid target", 15);
    return 0;
  }
  if ((a4 - 36662) >= 2 && a4 != 35345 && a4 != 35982)
    goto LABEL_8;
  return result;
}

uint64_t WebCore::WebGL2RenderingContext::validateBufferDataParameters(WTF::StringImpl *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t result;

  result = WebCore::WebGL2RenderingContext::validateBufferDataTarget((uint64_t)a1, a2, a3, a4);
  if (result)
  {
    if ((a5 - 35040) > 0xA || ((1 << (a5 + 32)) & 0x777) == 0)
    {
      WebCore::WebGLRenderingContextBase::synthesizeGLError(a1, 1280, a2, a3, (uint64_t)"invalid usage", 14);
      return 0;
    }
  }
  return result;
}

uint64_t WebCore::WebGL2RenderingContext::validateBufferDataTarget(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *i;
  const char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  if (a4 > 35344)
  {
    if (a4 > 36661)
    {
      if (a4 == 36662)
      {
        v6 = (uint64_t *)(a1 + 952);
      }
      else
      {
        if (a4 != 36663)
          goto LABEL_42;
        v6 = (uint64_t *)(a1 + 960);
      }
    }
    else if (a4 == 35345)
    {
      v6 = (uint64_t *)(a1 + 992);
    }
    else
    {
      if (a4 != 35982)
        goto LABEL_42;
      v6 = (uint64_t *)(a1 + 984);
    }
  }
  else if (a4 > 35050)
  {
    if (a4 == 35051)
    {
      v6 = (uint64_t *)(a1 + 968);
    }
    else
    {
      if (a4 != 35052)
        goto LABEL_42;
      v6 = (uint64_t *)(a1 + 976);
    }
  }
  else
  {
    if (a4 != 34962)
    {
      if (a4 == 34963)
      {
        v6 = (uint64_t *)(*(_QWORD *)(a1 + 144) + 48);
        goto LABEL_20;
      }
LABEL_42:
      v11 = "invalid target";
      v12 = 1280;
      v13 = a3;
      v14 = 15;
      goto LABEL_43;
    }
    v6 = (uint64_t *)(a1 + 120);
  }
LABEL_20:
  v7 = *v6;
  if (!v7)
  {
    v11 = "no buffer";
    v12 = 1282;
    v13 = a3;
    v14 = 10;
LABEL_43:
    WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)a1, v12, a2, v13, (uint64_t)v11, v14);
    return 0;
  }
  v8 = *(_QWORD *)(a1 + 936);
  v9 = *(unsigned int *)(v8 + 52);
  if ((_DWORD)v9)
  {
    for (i = *(_QWORD **)(v8 + 40); *i != v7; ++i)
    {
      if (!--v9)
        return v7;
    }
    v15 = *(unsigned int *)(a1 + 1012);
    if ((_DWORD)v15)
    {
      v16 = *(_QWORD **)(a1 + 1000);
      while (*v16 != v7)
      {
        ++v16;
        if (!--v15)
          goto LABEL_31;
      }
      goto LABEL_41;
    }
LABEL_31:
    v17 = *(_QWORD *)(a1 + 144);
    v18 = *(unsigned int *)(v17 + 68);
    if ((_DWORD)v18)
    {
      v19 = (_QWORD *)(*(_QWORD *)(v17 + 56) + 8);
      while (*v19 != v7)
      {
        v19 += 7;
        if (!--v18)
          goto LABEL_35;
      }
      goto LABEL_41;
    }
LABEL_35:
    if (*(_QWORD *)(a1 + 120) == v7
      || *(_QWORD *)(a1 + 952) == v7
      || *(_QWORD *)(a1 + 960) == v7
      || *(_QWORD *)(a1 + 968) == v7
      || *(_QWORD *)(a1 + 976) == v7
      || *(_QWORD *)(a1 + 992) == v7)
    {
LABEL_41:
      v11 = "buffer is bound to an indexed transform feedback binding point and some other binding point";
      v12 = 1282;
      v13 = a3;
      v14 = 92;
      goto LABEL_43;
    }
  }
  return v7;
}

uint64_t WebCore::WebGL2RenderingContext::validateAndCacheBufferBinding(WTF::StringImpl *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, _DWORD *a6)
{
  WTF::StringImpl *v6;
  int v7;
  const char *v9;
  uint64_t result;
  uint64_t v11;
  int v14;
  const char *v15;
  uint64_t v16;
  int v17;
  _DWORD *v18;
  _QWORD *v19;
  int v20;
  _DWORD *v21;
  _QWORD *v22;
  _DWORD *v23;
  _QWORD *v24;
  _DWORD *v25;
  _QWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  _QWORD *v29;
  _DWORD *v30;
  _QWORD *v31;
  _DWORD *v32;
  _QWORD *v33;
  _DWORD *v34;

  v6 = a1;
  if (a5 > 35344)
  {
    if ((a5 - 36662) >= 2 && a5 != 35345 && a5 != 35982)
      goto LABEL_52;
  }
  else if ((a5 - 34962) >= 2 && (a5 - 35051) >= 2)
  {
LABEL_52:
    v15 = "invalid target";
    v14 = 1280;
    v16 = 15;
    goto LABEL_53;
  }
  if (!a6)
    goto LABEL_33;
  v7 = a6[9];
  if (v7 > 35344)
  {
    if ((v7 - 36662) >= 2 && v7 != 35345 && v7 != 35982)
      goto LABEL_33;
  }
  else if ((v7 - 35051) >= 2 && v7 != 34962)
  {
    if (v7 == 34963)
    {
      v9 = "element array buffers can not be bound to a different target";
      result = 1;
      v11 = 61;
      if (a5 <= 35344)
      {
        if ((a5 - 35051) < 2 || a5 == 34962)
          goto LABEL_32;
        goto LABEL_36;
      }
      if (a5 <= 36661)
      {
        if (a5 == 35345 || a5 == 35982)
          goto LABEL_32;
        return result;
      }
LABEL_99:
      if (a5 != 36662)
      {
        if (a5 != 36663)
          return result;
LABEL_101:
        v17 = a6[2];
        a6[2] = v17 + 1;
        v23 = (_DWORD *)*((_QWORD *)v6 + 120);
        if (v23 != a6)
        {
          v24 = (_QWORD *)((char *)v6 + 960);
          *v24 = a6;
          if (!v23)
          {
LABEL_105:
            if (!a6[9])
            {
              v20 = 36663;
              goto LABEL_113;
            }
            return 1;
          }
LABEL_103:
          if (v23[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
            a6 = (_DWORD *)*v24;
            if (!*v24)
              return 1;
          }
          else
          {
            --v23[2];
            if (!a6)
              return 1;
          }
          goto LABEL_105;
        }
LABEL_114:
        if (v17)
          a6[2] = v17;
        else
          (*(void (**)(_DWORD *))(*(_QWORD *)a6 + 8))(a6);
        return 1;
      }
      goto LABEL_107;
    }
LABEL_33:
    result = 1;
    if (a5 <= 35344)
    {
      if (a5 <= 35050)
      {
        if (a5 != 34962)
        {
LABEL_36:
          if (a5 != 34963)
            return result;
          WebCore::WebGLVertexArrayObjectBase::setElementArrayBuffer(*((_QWORD *)v6 + 18), a2, a6);
          return 1;
        }
        if (!a6)
        {
          v34 = (_DWORD *)*((_QWORD *)v6 + 15);
          v26 = (_QWORD *)((char *)v6 + 120);
          v25 = v34;
          if (!v34)
            return 1;
          *v26 = 0;
LABEL_74:
          if (v25[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
            a6 = (_DWORD *)*v26;
            if (!*v26)
              return 1;
          }
          else
          {
            --v25[2];
            if (!a6)
              return 1;
          }
LABEL_76:
          if (a6[9])
            return 1;
          v20 = 34962;
          goto LABEL_113;
        }
LABEL_72:
        v17 = a6[2];
        a6[2] = v17 + 1;
        v27 = (_DWORD *)*((_QWORD *)v6 + 15);
        v26 = (_QWORD *)((char *)v6 + 120);
        v25 = v27;
        if (v27 == a6)
          goto LABEL_114;
        *v26 = a6;
        if (!v25)
          goto LABEL_76;
        goto LABEL_74;
      }
      if (a5 != 35051)
      {
        if (a5 != 35052)
          return result;
        if (!a6)
        {
          v21 = (_DWORD *)*((_QWORD *)v6 + 122);
          if (!v21)
            return 1;
          v22 = (_QWORD *)((char *)v6 + 976);
          *v22 = 0;
LABEL_62:
          if (v21[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v21 + 8))(v21);
            a6 = (_DWORD *)*v22;
            if (!*v22)
              return 1;
          }
          else
          {
            --v21[2];
            if (!a6)
              return 1;
          }
LABEL_64:
          if (a6[9])
            return 1;
          v20 = 35052;
          goto LABEL_113;
        }
LABEL_60:
        v17 = a6[2];
        a6[2] = v17 + 1;
        v21 = (_DWORD *)*((_QWORD *)v6 + 122);
        if (v21 == a6)
          goto LABEL_114;
        v22 = (_QWORD *)((char *)v6 + 976);
        *v22 = a6;
        if (!v21)
          goto LABEL_64;
        goto LABEL_62;
      }
      if (!a6)
      {
        v30 = (_DWORD *)*((_QWORD *)v6 + 121);
        if (!v30)
          return 1;
        v31 = (_QWORD *)((char *)v6 + 968);
        *v31 = 0;
LABEL_88:
        if (v30[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v30 + 8))(v30);
          a6 = (_DWORD *)*v31;
          if (!*v31)
            return 1;
        }
        else
        {
          --v30[2];
          if (!a6)
            return 1;
        }
LABEL_90:
        if (a6[9])
          return 1;
        v20 = 35051;
        goto LABEL_113;
      }
LABEL_86:
      v17 = a6[2];
      a6[2] = v17 + 1;
      v30 = (_DWORD *)*((_QWORD *)v6 + 121);
      if (v30 == a6)
        goto LABEL_114;
      v31 = (_QWORD *)((char *)v6 + 968);
      *v31 = a6;
      if (!v30)
        goto LABEL_90;
      goto LABEL_88;
    }
    if (a5 > 36661)
    {
      if (a5 != 36662)
      {
        if (a5 != 36663)
          return result;
        if (!a6)
        {
          v23 = (_DWORD *)*((_QWORD *)v6 + 120);
          if (!v23)
            return 1;
          v24 = (_QWORD *)((char *)v6 + 960);
          *v24 = 0;
          goto LABEL_103;
        }
        goto LABEL_101;
      }
      if (!a6)
      {
        v32 = (_DWORD *)*((_QWORD *)v6 + 119);
        if (!v32)
          return 1;
        v33 = (_QWORD *)((char *)v6 + 952);
        *v33 = 0;
        goto LABEL_109;
      }
LABEL_107:
      v17 = a6[2];
      a6[2] = v17 + 1;
      v32 = (_DWORD *)*((_QWORD *)v6 + 119);
      if (v32 == a6)
        goto LABEL_114;
      v33 = (_QWORD *)((char *)v6 + 952);
      *v33 = a6;
      if (!v32)
      {
LABEL_111:
        if (!a6[9])
        {
          v20 = 36662;
          goto LABEL_113;
        }
        return 1;
      }
LABEL_109:
      if (v32[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
        a6 = (_DWORD *)*v33;
        if (!*v33)
          return 1;
      }
      else
      {
        --v32[2];
        if (!a6)
          return 1;
      }
      goto LABEL_111;
    }
    if (a5 != 35345)
    {
      if (a5 != 35982)
        return result;
      if (!a6)
      {
        v18 = (_DWORD *)*((_QWORD *)v6 + 123);
        if (!v18)
          return 1;
        v19 = (_QWORD *)((char *)v6 + 984);
        *v19 = 0;
LABEL_48:
        if (v18[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
          a6 = (_DWORD *)*v19;
          if (!*v19)
            return 1;
        }
        else
        {
          --v18[2];
          if (!a6)
            return 1;
        }
LABEL_50:
        if (a6[9])
          return 1;
        v20 = 35982;
LABEL_113:
        a6[9] = v20;
        return 1;
      }
LABEL_46:
      v17 = a6[2];
      a6[2] = v17 + 1;
      v18 = (_DWORD *)*((_QWORD *)v6 + 123);
      if (v18 == a6)
        goto LABEL_114;
      v19 = (_QWORD *)((char *)v6 + 984);
      *v19 = a6;
      if (!v18)
        goto LABEL_50;
      goto LABEL_48;
    }
    if (!a6)
    {
      v28 = (_DWORD *)*((_QWORD *)v6 + 124);
      if (!v28)
        return 1;
      v29 = (_QWORD *)((char *)v6 + 992);
      *v29 = 0;
LABEL_81:
      if (v28[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v28 + 8))(v28);
        a6 = (_DWORD *)*v29;
        if (!*v29)
          return 1;
      }
      else
      {
        --v28[2];
        if (!a6)
          return 1;
      }
LABEL_83:
      if (a6[9])
        return 1;
      v20 = 35345;
      goto LABEL_113;
    }
LABEL_79:
    v17 = a6[2];
    a6[2] = v17 + 1;
    v28 = (_DWORD *)*((_QWORD *)v6 + 124);
    if (v28 == a6)
      goto LABEL_114;
    v29 = (_QWORD *)((char *)v6 + 992);
    *v29 = a6;
    if (!v28)
      goto LABEL_83;
    goto LABEL_81;
  }
  result = 1;
  if (a5 > 35344)
  {
    if (a5 > 36661)
      goto LABEL_99;
    if (a5 != 35345)
    {
      if (a5 != 35982)
        return result;
      goto LABEL_46;
    }
    goto LABEL_79;
  }
  if (a5 > 35050)
  {
    if (a5 != 35051)
    {
      if (a5 != 35052)
        return result;
      goto LABEL_60;
    }
    goto LABEL_86;
  }
  if (a5 == 34962)
    goto LABEL_72;
  if (a5 == 34963)
  {
    v9 = "buffers bound to non ELEMENT_ARRAY_BUFFER targets can not be bound to ELEMENT_ARRAY_BUFFER target";
    v11 = 98;
LABEL_32:
    a1 = v6;
    v14 = 1282;
    v15 = v9;
    v16 = v11;
LABEL_53:
    WebCore::WebGLRenderingContextBase::synthesizeGLError(a1, v14, a3, a4, (uint64_t)v15, v16);
    return 0;
  }
  return result;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::validateTexImageBinding@<X0>(WTF::StringImpl *result@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  const char *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  const char *v14;
  int v15;
  uint64_t v16;

  v7 = "texSubImage3D";
  v8 = "texImage2D";
  v9 = 14;
  v10 = 11;
  switch(a2)
  {
    case 0:
      return WebCore::WebGLRenderingContextBase::validateTexture2DBinding(result, (uint64_t)v8, v10, a3, a4);
    case 1:
      v8 = "texSubImage2D";
      v10 = 14;
      return WebCore::WebGLRenderingContextBase::validateTexture2DBinding(result, (uint64_t)v8, v10, a3, a4);
    case 2:
      v7 = "texImage3D";
      v9 = 11;
      goto LABEL_5;
    case 3:
      goto LABEL_5;
    default:
      v7 = (const char *)&str_191_3;
      v9 = 1;
      v8 = (const char *)&str_191_3;
      v10 = 1;
      if ((a2 & 0xFFFFFFFE) != 2)
        return WebCore::WebGLRenderingContextBase::validateTexture2DBinding(result, (uint64_t)v8, v10, a3, a4);
LABEL_5:
      if (a3 == 32879)
      {
        v13 = *((_QWORD *)result + 26);
        if (v13 >= *((unsigned int *)result + 51))
        {
          __break(0xC471u);
          JUMPOUT(0x195CF82FCLL);
        }
        v12 = *(_QWORD *)(*((_QWORD *)result + 24) + 32 * v13 + 16);
        if (v12)
          goto LABEL_9;
LABEL_13:
        v14 = "no texture bound to target";
        v15 = 1282;
        v16 = 27;
        goto LABEL_15;
      }
      if (a3 == 35866)
      {
        v11 = *((_QWORD *)result + 26);
        if (v11 >= *((unsigned int *)result + 51))
        {
          __break(0xC471u);
          JUMPOUT(0x195CF82F4);
        }
        v12 = *(_QWORD *)(*((_QWORD *)result + 24) + 32 * v11 + 24);
        if (v12)
        {
LABEL_9:
          ++*(_DWORD *)(v12 + 8);
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      v14 = "invalid texture target";
      v15 = 1280;
      v16 = 23;
LABEL_15:
      result = WebCore::WebGLRenderingContextBase::synthesizeGLError(result, v15, (uint64_t)v7, v9, (uint64_t)v14, v16);
      v12 = 0;
LABEL_16:
      *a4 = v12;
      return result;
  }
}

uint64_t WebCore::WebGL2RenderingContext::maxTextureLevelForTarget(WebCore::WebGL2RenderingContext *this, int a2)
{
  uint64_t result;

  result = 0;
  if (a2 <= 34068)
  {
    if (a2 == 3553)
      return *((unsigned int *)this + 67);
    if (a2 == 32879)
      return *((unsigned int *)this + 267);
  }
  else
  {
    if ((a2 - 34069) < 6)
      return *((unsigned int *)this + 68);
    if (a2 == 35866)
      return *((unsigned int *)this + 67);
  }
  return result;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::sliceArrayBufferView@<X0>(WTF::StringImpl *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, unsigned int a6@<W5>, uint64_t *a7@<X8>)
{
  WTF::StringImpl *v9;
  char v11;
  unsigned int v12;
  unint64_t v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  const char *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  BOOL v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v91;
  unint64_t v92;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int v100;
  unint64_t v101;
  _BOOL4 v102;
  int v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  int *v118;
  uint64_t v119;
  void *v120;
  WTF *v121;
  WTF *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int *v128;

  v9 = result;
  v11 = 0;
  switch(*(_BYTE *)(a4 + 4))
  {
    case 0:
      v30 = "Invalid type of Array Buffer View";
      v31 = 1282;
      v32 = a2;
      v33 = a3;
      v34 = 34;
      goto LABEL_39;
    case 4:
    case 5:
      v11 = 1;
      goto LABEL_5;
    case 6:
    case 7:
    case 8:
      v11 = 2;
      goto LABEL_5;
    case 9:
    case 0xA:
    case 0xB:
      v11 = 3;
      goto LABEL_5;
    default:
LABEL_5:
      v12 = 1 << v11;
      v13 = a5 * (unint64_t)(1 << v11);
      v14 = (v13 & 0xFFFFFFFF00000000) != 0;
      if ((v13 & 0xFFFFFFFF00000000) != 0)
        v13 = 0;
      else
        v13 = v13;
      if (a6)
        goto LABEL_18;
      v15 = *(_QWORD *)(a4 + 32);
      if (!v15)
        goto LABEL_16;
      v16 = *(_QWORD *)(v15 + 16);
      if (!v16)
        goto LABEL_208;
      v17 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
      if (v17 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v16 & 0x3FFFFFFFFLL) + v17))
        goto LABEL_208;
      v18 = *(_BYTE *)(a4 + 6);
      if ((v18 & 3) != 0)
      {
        if (*(_BYTE *)(v15 + 64) && (v125 = *(_QWORD *)(v15 + 32)) != 0)
        {
          v88 = atomic_load((unint64_t *)(v125 + 32));
          v18 = *(_BYTE *)(a4 + 6);
        }
        else
        {
          v88 = *(_QWORD *)(v15 + 48);
        }
        v89 = *(_QWORD *)(a4 + 8);
        if ((v18 & 4) != 0)
        {
          v87 = v88 >= v89;
          v96 = v88 - v89;
          if (v87)
          {
LABEL_208:
            v15 = 0;
          }
          else
          {
            if ((*(_BYTE *)(a4 + 4) - 4) > 7u)
              LOBYTE(v97) = 0;
            else
              v97 = qword_1969F16F0[(char)(*(_BYTE *)(a4 + 4) - 4)];
            v15 = (-1 << v97) & v96;
          }
        }
        else if (*(_QWORD *)(a4 + 16) + v89 <= v88 && v88 >= v89)
        {
          v15 = 0;
        }
        else
        {
          v15 = *(_QWORD *)(a4 + 16);
        }
      }
      else
      {
        v15 = *(_QWORD *)(a4 + 16);
      }
LABEL_16:
      v19 = v15 >> v11;
      a6 = v19 - a5;
      if (v19 < a5 || HIDWORD(v15))
        goto LABEL_38;
LABEL_18:
      v20 = a6 * (unint64_t)v12;
      v21 = (v20 & 0xFFFFFFFF00000000) != 0 || v14;
      if ((v21 & 1) != 0)
        goto LABEL_38;
      v22 = *(_QWORD *)(a4 + 32);
      if (!v22)
        goto LABEL_29;
      v23 = *(_QWORD *)(v22 + 16);
      if (!v23)
        goto LABEL_204;
      v24 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
      if (v24 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v23 & 0x3FFFFFFFFLL) + v24))
        goto LABEL_204;
      v25 = *(_BYTE *)(a4 + 6);
      if ((v25 & 3) != 0)
      {
        if (*(_BYTE *)(v22 + 64) && (v124 = *(_QWORD *)(v22 + 32)) != 0)
        {
          v85 = atomic_load((unint64_t *)(v124 + 32));
          v25 = *(_BYTE *)(a4 + 6);
        }
        else
        {
          v85 = *(_QWORD *)(v22 + 48);
        }
        v86 = *(_QWORD *)(a4 + 8);
        if ((v25 & 4) != 0)
        {
          v87 = v85 >= v86;
          v94 = v85 - v86;
          if (v87)
          {
LABEL_204:
            v22 = 0;
          }
          else
          {
            if ((*(_BYTE *)(a4 + 4) - 4) > 7u)
              LOBYTE(v95) = 0;
            else
              v95 = qword_1969F16F0[(char)(*(_BYTE *)(a4 + 4) - 4)];
            v22 = (-1 << v95) & v94;
          }
        }
        else
        {
          v87 = *(_QWORD *)(a4 + 16) + v86 <= v85 && v85 >= v86;
          if (v87)
            v22 = 0;
          else
            v22 = *(_QWORD *)(a4 + 16);
        }
      }
      else
      {
        v22 = *(_QWORD *)(a4 + 16);
      }
LABEL_29:
      if (v22 < v13)
        goto LABEL_38;
      v26 = *(_QWORD *)(a4 + 32);
      if (!v26)
        goto LABEL_37;
      v27 = *(_QWORD *)(v26 + 16);
      if (!v27)
        goto LABEL_222;
      v28 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
      if (v28 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v27 & 0x3FFFFFFFFLL) + v28))
        goto LABEL_222;
      v29 = *(_BYTE *)(a4 + 6);
      if ((v29 & 3) != 0)
      {
        if (*(_BYTE *)(v26 + 64) && (v126 = *(_QWORD *)(v26 + 32)) != 0)
        {
          v91 = atomic_load((unint64_t *)(v126 + 32));
          v29 = *(_BYTE *)(a4 + 6);
        }
        else
        {
          v91 = *(_QWORD *)(v26 + 48);
        }
        v92 = *(_QWORD *)(a4 + 8);
        if ((v29 & 4) != 0)
        {
          v87 = v91 >= v92;
          v104 = v91 - v92;
          if (v87)
          {
LABEL_222:
            v26 = 0;
          }
          else
          {
            if ((*(_BYTE *)(a4 + 4) - 4) > 7u)
              LOBYTE(v105) = 0;
            else
              v105 = qword_1969F16F0[(char)(*(_BYTE *)(a4 + 4) - 4)];
            v26 = (-1 << v105) & v104;
          }
        }
        else if (*(_QWORD *)(a4 + 16) + v92 <= v91 && v91 >= v92)
        {
          v26 = 0;
        }
        else
        {
          v26 = *(_QWORD *)(a4 + 16);
        }
      }
      else
      {
        v26 = *(_QWORD *)(a4 + 16);
      }
LABEL_37:
      if (v26 - v13 >= v20)
      {
        v36 = *(int **)(a4 + 32);
        if (v36
          && (v37 = *((_QWORD *)v36 + 2)) != 0
          && ((v38 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
           || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
           || (v37 & 0x3FFFFFFFFLL) + v38))
        {
          v39 = *(unsigned __int8 *)(a4 + 6);
          if ((v39 & 3) != 0)
          {
            v98 = *(_QWORD *)(a4 + 32);
            if (*((_BYTE *)v36 + 64) && (v127 = *(_QWORD *)(v98 + 32)) != 0)
            {
              v99 = atomic_load((unint64_t *)(v127 + 32));
              v39 = *(unsigned __int8 *)(a4 + 6);
              v98 = *(_QWORD *)(a4 + 32);
            }
            else
            {
              v99 = *(_QWORD *)(v98 + 48);
            }
            v100 = (v39 >> 2) & 1;
            v101 = *(_QWORD *)(a4 + 8);
            v102 = v101 <= v99;
            if (*(_QWORD *)(a4 + 16) + v101 <= v99)
              v103 = 1;
            else
              v103 = v100;
            if ((v102 & v103) != 0)
              LODWORD(v40) = 0;
            else
              v40 = *(_QWORD *)(a4 + 8);
            v36 = (int *)v98;
          }
          else
          {
            v40 = *(_QWORD *)(a4 + 8);
          }
        }
        else
        {
          LODWORD(v40) = 0;
        }
        v41 = (v13 + v40);
        switch(*(_BYTE *)(a4 + 4))
        {
          case 1:
            if (!v36)
              goto LABEL_173;
            v59 = *((_QWORD *)v36 + 2);
            if (!v59)
              goto LABEL_173;
            v60 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
            if (v60
              && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
              && !((v59 & 0x3FFFFFFFFLL) + v60))
            {
              goto LABEL_173;
            }
            v44 = *v36;
            *v36 += 2;
            v128 = v36;
            if (*((_BYTE *)v36 + 64) && (v110 = *((_QWORD *)v36 + 4)) != 0)
              v61 = *(_QWORD *)(v110 + 32);
            else
              v61 = *((_QWORD *)v36 + 6);
            v87 = v61 >= v41;
            v62 = v61 - v41;
            if (v87 && v62 >= a6)
              goto LABEL_284;
            goto LABEL_285;
          case 2:
          case 0xC:
            if (!v36)
              goto LABEL_173;
            v42 = *((_QWORD *)v36 + 2);
            if (!v42)
              goto LABEL_173;
            v43 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
            if (v43
              && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
              && !((v42 & 0x3FFFFFFFFLL) + v43))
            {
              goto LABEL_173;
            }
            v44 = *v36;
            *v36 += 2;
            v128 = v36;
            if (*((_BYTE *)v36 + 64) && (v106 = *((_QWORD *)v36 + 4)) != 0)
              v45 = *(_QWORD *)(v106 + 32);
            else
              v45 = *((_QWORD *)v36 + 6);
            v87 = v45 >= v41;
            v46 = v45 - v41;
            if (v87 && v46 >= a6)
              goto LABEL_284;
            goto LABEL_285;
          case 3:
            if (!v36)
              goto LABEL_173;
            v63 = *((_QWORD *)v36 + 2);
            if (!v63)
              goto LABEL_173;
            v64 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
            if (v64
              && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
              && !((v63 & 0x3FFFFFFFFLL) + v64))
            {
              goto LABEL_173;
            }
            v44 = *v36;
            *v36 += 2;
            v128 = v36;
            if (*((_BYTE *)v36 + 64) && (v111 = *((_QWORD *)v36 + 4)) != 0)
              v65 = *(_QWORD *)(v111 + 32);
            else
              v65 = *((_QWORD *)v36 + 6);
            v87 = v65 >= v41;
            v66 = v65 - v41;
            if (v87 && v66 >= a6)
              goto LABEL_284;
            goto LABEL_285;
          case 4:
            if (!v36)
              goto LABEL_173;
            v51 = *((_QWORD *)v36 + 2);
            if (!v51)
              goto LABEL_173;
            v52 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
            if (v52
              && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
              && !((v51 & 0x3FFFFFFFFLL) + v52))
            {
              goto LABEL_173;
            }
            v44 = *v36;
            *v36 += 2;
            v128 = v36;
            if (*((_BYTE *)v36 + 64) && (v108 = *((_QWORD *)v36 + 4)) != 0)
              v53 = *(_QWORD *)(v108 + 32);
            else
              v53 = *((_QWORD *)v36 + 6);
            v87 = v53 >= v41;
            v54 = v53 - v41;
            if (v87 && (v41 & 1) == 0 && v54 >> 1 >= a6)
              goto LABEL_284;
            goto LABEL_285;
          case 5:
            if (!v36)
              goto LABEL_173;
            v71 = *((_QWORD *)v36 + 2);
            if (!v71)
              goto LABEL_173;
            v72 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
            if (v72
              && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
              && !((v71 & 0x3FFFFFFFFLL) + v72))
            {
              goto LABEL_173;
            }
            v44 = *v36;
            *v36 += 2;
            v128 = v36;
            if (*((_BYTE *)v36 + 64) && (v113 = *((_QWORD *)v36 + 4)) != 0)
              v73 = *(_QWORD *)(v113 + 32);
            else
              v73 = *((_QWORD *)v36 + 6);
            v87 = v73 >= v41;
            v74 = v73 - v41;
            if (v87 && (v41 & 1) == 0 && v74 >> 1 >= a6)
              goto LABEL_284;
            goto LABEL_285;
          case 6:
            if (!v36)
              goto LABEL_173;
            v75 = *((_QWORD *)v36 + 2);
            if (!v75)
              goto LABEL_173;
            v76 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
            if (v76
              && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
              && !((v75 & 0x3FFFFFFFFLL) + v76))
            {
              goto LABEL_173;
            }
            v44 = *v36;
            *v36 += 2;
            v128 = v36;
            if (*((_BYTE *)v36 + 64) && (v114 = *((_QWORD *)v36 + 4)) != 0)
              v77 = *(_QWORD *)(v114 + 32);
            else
              v77 = *((_QWORD *)v36 + 6);
            v87 = v77 >= v41;
            v78 = v77 - v41;
            if (v87 && (v41 & 3) == 0 && v78 >> 2 >= a6)
              goto LABEL_284;
            goto LABEL_285;
          case 7:
            if (!v36)
              goto LABEL_173;
            v67 = *((_QWORD *)v36 + 2);
            if (!v67)
              goto LABEL_173;
            v68 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
            if (v68
              && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
              && !((v67 & 0x3FFFFFFFFLL) + v68))
            {
              goto LABEL_173;
            }
            v44 = *v36;
            *v36 += 2;
            v128 = v36;
            if (*((_BYTE *)v36 + 64) && (v112 = *((_QWORD *)v36 + 4)) != 0)
              v69 = *(_QWORD *)(v112 + 32);
            else
              v69 = *((_QWORD *)v36 + 6);
            v87 = v69 >= v41;
            v70 = v69 - v41;
            if (v87 && (v41 & 3) == 0 && v70 >> 2 >= a6)
              goto LABEL_284;
            goto LABEL_285;
          case 8:
            if (!v36)
              goto LABEL_173;
            v79 = *((_QWORD *)v36 + 2);
            if (!v79)
              goto LABEL_173;
            v80 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
            if (v80
              && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
              && !((v79 & 0x3FFFFFFFFLL) + v80))
            {
              goto LABEL_173;
            }
            v44 = *v36;
            *v36 += 2;
            v128 = v36;
            if (*((_BYTE *)v36 + 64) && (v115 = *((_QWORD *)v36 + 4)) != 0)
              v81 = *(_QWORD *)(v115 + 32);
            else
              v81 = *((_QWORD *)v36 + 6);
            v87 = v81 >= v41;
            v82 = v81 - v41;
            if (v87 && (v41 & 3) == 0 && v82 >> 2 >= a6)
              goto LABEL_284;
            goto LABEL_285;
          case 9:
            if (!v36)
              goto LABEL_173;
            v55 = *((_QWORD *)v36 + 2);
            if (!v55)
              goto LABEL_173;
            v56 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
            if (v56
              && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
              && !((v55 & 0x3FFFFFFFFLL) + v56))
            {
              goto LABEL_173;
            }
            v44 = *v36;
            *v36 += 2;
            v128 = v36;
            if (*((_BYTE *)v36 + 64) && (v109 = *((_QWORD *)v36 + 4)) != 0)
              v57 = *(_QWORD *)(v109 + 32);
            else
              v57 = *((_QWORD *)v36 + 6);
            v87 = v57 >= v41;
            v58 = v57 - v41;
            if (v87 && (v41 & 7) == 0 && v58 >> 3 >= a6)
              goto LABEL_284;
            goto LABEL_285;
          case 0xA:
            if (!v36)
              goto LABEL_173;
            v83 = *((_QWORD *)v36 + 2);
            if (!v83)
              goto LABEL_173;
            v84 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
            if (v84
              && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0])
              && !((v83 & 0x3FFFFFFFFLL) + v84))
            {
              goto LABEL_173;
            }
            v44 = *v36;
            *v36 += 2;
            v128 = v36;
            if (*((_BYTE *)v36 + 64) && (v123 = *((_QWORD *)v36 + 4)) != 0)
              v116 = *(_QWORD *)(v123 + 32);
            else
              v116 = *((_QWORD *)v36 + 6);
            v87 = v116 >= v41;
            v117 = v116 - v41;
            if (v87 && (v41 & 7) == 0 && v117 >> 3 >= a6)
              goto LABEL_284;
            goto LABEL_285;
          case 0xB:
            if (v36
              && (v47 = *((_QWORD *)v36 + 2)) != 0
              && ((v48 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
               || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
               || (v47 & 0x3FFFFFFFFLL) + v48))
            {
              v44 = *v36;
              *v36 += 2;
              v128 = v36;
              if (*((_BYTE *)v36 + 64) && (v107 = *((_QWORD *)v36 + 4)) != 0)
                v49 = *(_QWORD *)(v107 + 32);
              else
                v49 = *((_QWORD *)v36 + 6);
              v87 = v49 >= v41;
              v50 = v49 - v41;
              if (!v87 || (v41 & 7) != 0 || v50 >> 3 < a6)
              {
LABEL_285:
                v35 = 0;
              }
              else
              {
LABEL_284:
                v35 = WTF::fastMalloc((WTF *)0x28);
                result = (WTF::StringImpl *)JSC::ArrayBufferView::ArrayBufferView();
                v36 = v128;
                v44 = *v128 - 2;
              }
              *v36 = v44;
              if (v44)
              {
                if (v35)
                  goto LABEL_41;
              }
              else
              {
                v118 = v36;
                v119 = *((_QWORD *)v36 + 10);
                if (v119)
                {
                  *(_QWORD *)(v119 + 8) = 3;
                  *((_QWORD *)v118 + 10) = 0;
                }
                if ((v118[18] & 1) == 0)
                  JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v118 + 18));
                JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v118 + 4));
                v121 = (WTF *)*((_QWORD *)v118 + 1);
                if ((v121 & 1) == 0 && v121)
                {
                  v122 = *(WTF **)v121;
                  if (*(_QWORD *)v121)
                  {
                    *(_QWORD *)v121 = 0;
                    *((_DWORD *)v121 + 2) = 0;
                    WTF::fastFree(v122, v120);
                  }
                  WTF::fastFree(v121, v120);
                }
                result = (WTF::StringImpl *)WTF::fastFree((WTF *)v118, v120);
                if (v35)
                  goto LABEL_41;
              }
            }
            else
            {
LABEL_173:
              v35 = 0;
            }
            result = WebCore::WebGLRenderingContextBase::synthesizeGLError(v9, 1285, a2, a3, (uint64_t)"Could not create intermediate ArrayBufferView", 46);
            goto LABEL_41;
          default:
            goto LABEL_40;
        }
      }
LABEL_38:
      v30 = "srcOffset or length is out of bounds";
      v31 = 1281;
      v32 = a2;
      v33 = a3;
      v34 = 37;
LABEL_39:
      result = WebCore::WebGLRenderingContextBase::synthesizeGLError(result, v31, v32, v33, (uint64_t)v30, v34);
LABEL_40:
      v35 = 0;
LABEL_41:
      *a7 = v35;
      return result;
  }
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::pixelStorei(WTF::StringImpl *this, int a2, unsigned int a3)
{
  if (!*((_BYTE *)this + 364))
  {
    if ((a3 & 0x80000000) != 0)
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, 1281, (uint64_t)"pixelStorei", 12, (uint64_t)"negative value", 15);
    if (a2 > 3330)
    {
      if (a2 > 32876)
      {
        if (a2 == 32877)
        {
          *((_DWORD *)this + 85) = a3;
          return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 720))(*((_QWORD *)this + 11));
        }
        if (a2 == 32878)
        {
          *((_DWORD *)this + 82) = a3;
          return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 720))(*((_QWORD *)this + 11));
        }
      }
      else
      {
        if (a2 == 3331)
        {
          *((_DWORD *)this + 78) = a3;
          return this;
        }
        if (a2 == 3332)
        {
          *((_DWORD *)this + 77) = a3;
          return this;
        }
      }
    }
    else if (a2 > 3315)
    {
      if (a2 == 3316)
      {
        *((_DWORD *)this + 83) = a3;
        return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 720))(*((_QWORD *)this + 11));
      }
      if (a2 == 3330)
      {
        *((_DWORD *)this + 75) = a3;
        return this;
      }
    }
    else
    {
      if (a2 == 3314)
      {
        *((_DWORD *)this + 81) = a3;
        return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 720))(*((_QWORD *)this + 11));
      }
      if (a2 == 3315)
      {
        *((_DWORD *)this + 84) = a3;
        return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 720))(*((_QWORD *)this + 11));
      }
    }
    return WebCore::WebGLRenderingContextBase::pixelStorei(this, a2, a3);
  }
  return this;
}

uint64_t WebCore::WebGL2RenderingContext::copyBufferSubData(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  int v14;
  const char *v15;
  WTF::StringImpl *v16;
  int v17;
  uint64_t v18;

  if (!*(_BYTE *)(this + 364))
  {
    v11 = this;
    this = WebCore::WebGL2RenderingContext::validateBufferDataTarget(this, (uint64_t)"copyBufferSubData", 18, a2);
    if (this)
    {
      v12 = (_DWORD *)this;
      ++*(_DWORD *)(this + 8);
      this = WebCore::WebGL2RenderingContext::validateBufferDataTarget(v11, (uint64_t)"copyBufferSubData", 18, a3);
      if (!this)
      {
LABEL_14:
        if (v12[2] == 1)
          return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
        --v12[2];
        return this;
      }
      v13 = (_DWORD *)this;
      ++*(_DWORD *)(this + 8);
      if ((a5 | a4 | a6) < 0)
      {
        v15 = "offset < 0";
        v16 = (WTF::StringImpl *)v11;
        v17 = 1281;
        v18 = 11;
        goto LABEL_9;
      }
      v14 = *(_DWORD *)(this + 36);
      if (v12[9] == 34963)
      {
        if (v14 != 34963)
        {
LABEL_7:
          v15 = "Cannot copy into an element buffer destination from a non-element buffer source";
          v16 = (WTF::StringImpl *)v11;
          v17 = 1282;
          v18 = 80;
LABEL_9:
          this = (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError(v16, v17, (uint64_t)"copyBufferSubData", 18, (uint64_t)v15, v18);
          goto LABEL_12;
        }
      }
      else if (v14 == 34963)
      {
        goto LABEL_7;
      }
      this = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v11 + 88)
                                                                                            + 1240))(*(_QWORD *)(v11 + 88), a2, a3, a4, a5, a6);
LABEL_12:
      if (v13[2] == 1)
        this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
      else
        --v13[2];
      goto LABEL_14;
    }
  }
  return this;
}

uint64_t WebCore::WebGL2RenderingContext::getBufferSubData(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, unsigned int a5, unsigned int a6)
{
  WTF::StringImpl *v11;
  _DWORD *v12;
  uint64_t v13;
  char v14;
  const char *v15;
  WTF::StringImpl *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t v36;
  uint64_t v37;

  if (!*(_BYTE *)(result + 364))
  {
    v11 = (WTF::StringImpl *)result;
    result = WebCore::WebGL2RenderingContext::validateBufferDataTarget(result, (uint64_t)"getBufferSubData", 17, a2);
    if (result)
    {
      v12 = (_DWORD *)result;
      ++*(_DWORD *)(result + 8);
      v13 = *a4;
      if (!*a4)
      {
        v15 = "Null dstData";
        v16 = v11;
        v17 = 1282;
        v18 = 13;
LABEL_35:
        result = (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError(v16, v17, (uint64_t)"getBufferSubData", 17, (uint64_t)v15, v18);
        goto LABEL_36;
      }
      v14 = 0;
      switch(*(_BYTE *)(v13 + 4))
      {
        case 0:
          v15 = "Invalid type of Array Buffer View";
          v16 = v11;
          v17 = 1282;
          v18 = 34;
          goto LABEL_35;
        case 4:
        case 5:
          v14 = 1;
          break;
        case 6:
        case 7:
        case 8:
          v14 = 2;
          break;
        case 9:
        case 0xA:
        case 0xB:
          v14 = 3;
          break;
        default:
          break;
      }
      v19 = *(_QWORD *)(v13 + 32);
      if (v19)
      {
        v20 = *(_QWORD *)(v19 + 16);
        if (v20)
        {
          if ((v21 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
            || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
            || (v20 & 0x3FFFFFFFFLL) + v21)
          {
            v22 = *(_BYTE *)(v13 + 6);
            if ((v22 & 3) == 0)
            {
              v23 = *(_QWORD *)(v13 + 16);
              goto LABEL_16;
            }
            if (*(_BYTE *)(v19 + 64) && (v37 = *(_QWORD *)(v19 + 32)) != 0)
            {
              v31 = atomic_load((unint64_t *)(v37 + 32));
              v22 = *(_BYTE *)(v13 + 6);
            }
            else
            {
              v31 = *(_QWORD *)(v19 + 48);
            }
            v32 = *(_QWORD *)(v13 + 8);
            if ((v22 & 4) == 0)
            {
              v23 = *(_QWORD *)(v13 + 16);
              v33 = v23 + v32 <= v31 && v31 >= v32;
              if (v33)
                v23 = 0;
LABEL_16:
              v24 = v23 >> v14;
              if (v23 >> v14 < a5)
              {
                v15 = "dstOffset is larger than the length of the destination buffer.";
                v16 = v11;
                v17 = 1281;
                v18 = 63;
                goto LABEL_35;
              }
              v25 = a6;
              if (!a6)
                v25 = v24 - a5;
              if (__CFADD__(a5, v25))
              {
                v15 = "dstOffset + copyLength is too high";
                v16 = v11;
                v17 = 1281;
                v18 = 35;
                goto LABEL_35;
              }
              if (v24 < a5 + v25)
              {
                v15 = "end of written destination is past the end of the buffer";
                v16 = v11;
                v17 = 1281;
                v18 = 57;
                goto LABEL_35;
              }
              if (a3 < 0)
              {
                v15 = "srcByteOffset is less than 0";
                v16 = v11;
                v17 = 1281;
                v18 = 29;
                goto LABEL_35;
              }
              if (!v25)
                goto LABEL_36;
              v26 = *a4;
              v27 = *(_QWORD *)(*a4 + 32);
              if (v27)
              {
                v28 = *(_QWORD *)(v27 + 16);
                if (v28)
                {
                  v29 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
                  if (!v29 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
                  {
                    v30 = *(_QWORD *)(v26 + 24);
                    goto LABEL_61;
                  }
                  if ((v28 & 0x3FFFFFFFFLL) + v29)
                  {
                    v30 = *(_QWORD *)(v26 + 24);
                    if (v30 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
                      v30 = (v30 & 0x3FFFFFFFFLL) + v29;
                    goto LABEL_61;
                  }
                }
              }
              v30 = 0;
LABEL_61:
              result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, unint64_t, unint64_t))(**((_QWORD **)v11 + 11) + 1248))(*((_QWORD **)v11 + 11), a2, a3, v30 + ((unint64_t)a5 << v14), (unint64_t)v25 << v14);
LABEL_36:
              if (v12[2] == 1)
                return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
              --v12[2];
              return result;
            }
            v33 = v31 >= v32;
            v34 = v31 - v32;
            if (!v33)
            {
              v35 = *(_BYTE *)(v13 + 4) - 4;
              if (v35 > 7u)
                LOBYTE(v36) = 0;
              else
                v36 = qword_1969F16F0[(char)v35];
              v23 = (-1 << v36) & v34;
              goto LABEL_16;
            }
          }
        }
      }
      v23 = 0;
      goto LABEL_16;
    }
  }
  return result;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::bindFramebuffer(WTF::StringImpl *this, uint64_t a2, WebCore::WebGLFramebuffer *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  int v14;
  WebCore::WebGLFramebuffer *v15;
  WebCore::WebGLFramebuffer **v16;
  WebCore::WebGLFramebuffer *v17;
  int v18;
  WebCore::WebGLFramebuffer *v19;
  WebCore::WebGLFramebuffer **v20;
  WebCore::WebGLFramebuffer *v21;
  uint64_t v22;
  int v23;

  if (!*((_BYTE *)this + 364))
  {
    v5 = (uint64_t)this;
    v6 = (unsigned __int8 *)this + 96;
    if (__ldaxr((unsigned __int8 *)this + 96))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C]((char *)this + 96);
LABEL_6:
    if (a3)
    {
      v8 = *((_QWORD *)a3 + 2);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9)
          v8 = v9 - 8;
        else
          v8 = 0;
      }
      if (v8 != v5)
      {
        v10 = "object does not belong to this context";
        v11 = 39;
LABEL_13:
        v12 = (WTF::StringImpl *)v5;
        v13 = 1282;
LABEL_14:
        this = WebCore::WebGLRenderingContextBase::synthesizeGLError(v12, v13, (uint64_t)"bindFramebuffer", 16, (uint64_t)v10, v11);
        goto LABEL_42;
      }
      v10 = "attempt to use a deleted object";
      v11 = 32;
      if (!*((_DWORD *)a3 + 6) || *((_BYTE *)a3 + 32))
        goto LABEL_13;
    }
    if ((_DWORD)a2 != 36160)
    {
      if ((_DWORD)a2 == 36009)
        goto LABEL_30;
      if ((_DWORD)a2 != 36008)
      {
        v10 = "invalid target";
        v12 = (WTF::StringImpl *)v5;
        v13 = 1280;
        v11 = 15;
        goto LABEL_14;
      }
    }
    if (a3)
    {
      v14 = *((_DWORD *)a3 + 2);
      *((_DWORD *)a3 + 2) = v14 + 1;
      v15 = *(WebCore::WebGLFramebuffer **)(v5 + 928);
      if (v15 == a3)
      {
        if (v14)
          *((_DWORD *)a3 + 2) = v14;
        else
          (*(void (**)(WebCore::WebGLFramebuffer *))(*(_QWORD *)a3 + 8))(a3);
        goto LABEL_29;
      }
      v16 = (WebCore::WebGLFramebuffer **)(v5 + 928);
      *(_QWORD *)(v5 + 928) = a3;
      v17 = a3;
      if (!v15)
      {
LABEL_25:
        *((_BYTE *)v17 + 48) = 1;
        goto LABEL_29;
      }
    }
    else
    {
      v15 = *(WebCore::WebGLFramebuffer **)(v5 + 928);
      if (!v15)
        goto LABEL_29;
      v16 = (WebCore::WebGLFramebuffer **)(v5 + 928);
      *(_QWORD *)(v5 + 928) = 0;
    }
    if (*((_DWORD *)v15 + 2) != 1)
    {
      --*((_DWORD *)v15 + 2);
      v17 = a3;
      if (!a3)
        goto LABEL_29;
      goto LABEL_25;
    }
    (*(void (**)(WebCore::WebGLFramebuffer *))(*(_QWORD *)v15 + 8))(v15);
    v17 = *v16;
    if (!*v16)
    {
LABEL_29:
      if ((_DWORD)a2 != 36160)
        goto LABEL_36;
LABEL_30:
      if (a3)
      {
        v18 = *((_DWORD *)a3 + 2);
        *((_DWORD *)a3 + 2) = v18 + 1;
        v20 = (WebCore::WebGLFramebuffer **)(v5 + 176);
        v19 = *(WebCore::WebGLFramebuffer **)(v5 + 176);
        if (v19 == a3)
        {
          if (v18)
            *((_DWORD *)a3 + 2) = v18;
          else
            (*(void (**)(WebCore::WebGLFramebuffer *))(*(_QWORD *)a3 + 8))(a3);
          goto LABEL_40;
        }
        *v20 = a3;
        v21 = a3;
        if (!v19)
          goto LABEL_35;
      }
      else
      {
        v20 = (WebCore::WebGLFramebuffer **)(v5 + 176);
        v19 = *(WebCore::WebGLFramebuffer **)(v5 + 176);
        if (!v19)
          goto LABEL_37;
        *v20 = 0;
      }
      if (*((_DWORD *)v19 + 2) == 1)
      {
        (*(void (**)(WebCore::WebGLFramebuffer *))(*(_QWORD *)v19 + 8))(v19);
        v21 = *v20;
        if (!*v20)
        {
LABEL_36:
          if (!a3)
          {
LABEL_37:
            v22 = 0;
LABEL_41:
            this = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v5 + 88) + 56))(*(_QWORD *)(v5 + 88), a2, v22);
LABEL_42:
            v23 = __ldxr(v6);
            if (v23 == 1)
            {
              if (!__stlxr(0, v6))
                return this;
            }
            else
            {
              __clrex();
            }
            return (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
          }
LABEL_40:
          v22 = *((unsigned int *)a3 + 6);
          goto LABEL_41;
        }
      }
      else
      {
        --*((_DWORD *)v19 + 2);
        v21 = a3;
        if (!a3)
          goto LABEL_36;
      }
LABEL_35:
      *((_BYTE *)v21 + 48) = 1;
      goto LABEL_36;
    }
    goto LABEL_25;
  }
  return this;
}

WTF::Lock *WebCore::WebGL2RenderingContext::deleteFramebuffer(WebCore::WebGL2RenderingContext *this, WebCore::WebGLFramebuffer *a2)
{
  WTF::Lock *v4;
  WTF::Lock *result;
  WebCore::WebGLFramebuffer *v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::Lock *v15;
  char v16;

  v4 = (WebCore::WebGL2RenderingContext *)((char *)this + 96);
  v15 = v4;
  v16 = 1;
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]();
LABEL_5:
  result = (WTF::Lock *)WebCore::WebGLRenderingContextBase::deleteObject((uint64_t)this, (uint64_t)&v15, a2);
  if (!(_DWORD)result)
    goto LABEL_26;
  v7 = (WebCore::WebGLFramebuffer *)*((_QWORD *)this + 116);
  if (*((WebCore::WebGLFramebuffer **)this + 22) == a2)
  {
    if (v7 == a2)
    {
      if (a2)
      {
        *((_QWORD *)this + 22) = 0;
        if (*((_DWORD *)a2 + 2) == 1)
        {
          (*(void (**)(WebCore::WebGLFramebuffer *))(*(_QWORD *)a2 + 8))(a2);
          v13 = *((_QWORD *)this + 22);
          if (v13)
            *(_BYTE *)(v13 + 48) = 1;
        }
        else
        {
          --*((_DWORD *)a2 + 2);
        }
        v9 = (_DWORD *)*((_QWORD *)this + 116);
        if (v9)
        {
          *((_QWORD *)this + 116) = 0;
          if (v9[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
            v14 = *((_QWORD *)this + 116);
            if (v14)
              *(_BYTE *)(v14 + 48) = 1;
          }
          else
          {
            --v9[2];
          }
        }
      }
      v8 = 36160;
    }
    else
    {
      if (a2)
      {
        *((_QWORD *)this + 22) = 0;
        if (*((_DWORD *)a2 + 2) == 1)
        {
          (*(void (**)(WebCore::WebGLFramebuffer *))(*(_QWORD *)a2 + 8))(a2);
          v12 = *((_QWORD *)this + 22);
          if (v12)
            *(_BYTE *)(v12 + 48) = 1;
        }
        else
        {
          --*((_DWORD *)a2 + 2);
        }
      }
      v8 = 36009;
    }
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 11) + 56))(*((_QWORD *)this + 11), 36008, 0);
  }
  else
  {
    if (v7 != a2)
      goto LABEL_26;
    if (a2)
    {
      *((_QWORD *)this + 116) = 0;
      if (*((_DWORD *)a2 + 2) == 1)
      {
        (*(void (**)(WebCore::WebGLFramebuffer *))(*(_QWORD *)a2 + 8))(a2);
        v11 = *((_QWORD *)this + 116);
        if (v11)
          *(_BYTE *)(v11 + 48) = 1;
      }
      else
      {
        --*((_DWORD *)a2 + 2);
      }
    }
    v8 = 36008;
  }
  result = (WTF::Lock *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 11) + 56))(*((_QWORD *)this + 11), v8, 0);
LABEL_26:
  if (v16)
  {
    result = v15;
    v10 = __ldxr((unsigned __int8 *)v15);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v15))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::framebufferTextureLayer(WTF::StringImpl *this, int a2, unsigned int a3, WebCore::WebGLTexture *a4, unsigned int a5, uint64_t a6)
{
  WTF::StringImpl *v11;
  int v12;
  const char *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  int v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  int v19;
  int v20;
  char v21;
  int v22;
  WebCore::WebGLFramebuffer **v23;
  WebCore::WebGLFramebuffer *v24;
  _QWORD v25[2];
  int v26;
  char v27;

  if (*((_BYTE *)this + 364))
    return this;
  v11 = this;
  if (!(*(unsigned int (**)(WTF::StringImpl *))(*(_QWORD *)this + 296))(this))
  {
    v13 = "invalid target";
    v14 = 15;
LABEL_8:
    v15 = v11;
    v16 = 1280;
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(v15, v16, (uint64_t)"framebufferTextureLayer", 24, (uint64_t)v13, v14);
  }
  if ((int)a3 > 36095)
  {
    if (a3 == 36096)
      goto LABEL_12;
    v12 = 36128;
  }
  else
  {
    if (a3 == 33306)
      goto LABEL_12;
    v12 = 36064;
  }
  if (a3 != v12)
  {
    if (*((_QWORD *)v11 + 100))
    {
      if (a3 < 0x8CE1)
      {
LABEL_34:
        v13 = "invalid attachment";
        v14 = 19;
        goto LABEL_8;
      }
    }
    else
    {
      v21 = (*(uint64_t (**)(uint64_t))(*((_QWORD *)v11 + 1) + 40))((uint64_t)v11 + 8);
      v13 = "invalid attachment";
      v14 = 19;
      if (a3 < 0x8CE1 || (v21 & 1) == 0)
        goto LABEL_8;
    }
    if ((*(unsigned int (**)(WTF::StringImpl *))(*(_QWORD *)v11 + 152))(v11) + 36064 > a3)
      goto LABEL_12;
    goto LABEL_34;
  }
LABEL_12:
  if (a4)
  {
    v17 = (WTF::StringImpl *)*((_QWORD *)a4 + 2);
    if (v17)
    {
      v18 = *((_QWORD *)v17 + 1);
      if (v18)
        v17 = (WTF::StringImpl *)(v18 - 8);
      else
        v17 = 0;
    }
    if (v17 != v11)
    {
      v13 = "object does not belong to this context";
      v14 = 39;
LABEL_19:
      v15 = v11;
      v16 = 1282;
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(v15, v16, (uint64_t)"framebufferTextureLayer", 24, (uint64_t)v13, v14);
    }
    v13 = "attempt to use a deleted object";
    v14 = 32;
    if (!*((_DWORD *)a4 + 6) || *((_BYTE *)a4 + 32))
      goto LABEL_19;
    v19 = *((_DWORD *)a4 + 9);
    if (v19 != 32879 && v19 != 35866)
    {
      v13 = "invalid texture type";
LABEL_54:
      v15 = v11;
      v16 = 1282;
      v14 = 21;
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(v15, v16, (uint64_t)"framebufferTextureLayer", 24, (uint64_t)v13, v14);
    }
    if ((a6 & 0x80000000) != 0
      || (v19 == 35866 ? (v20 = *((_DWORD *)v11 + 268)) : (v20 = *((_DWORD *)v11 + 266)), v20 <= (int)a6))
    {
      v13 = "layer out of range";
      goto LABEL_56;
    }
    if ((a5 & 0x80000000) != 0)
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(v11, 1281, (uint64_t)"framebufferTextureLayer", 24, (uint64_t)"level < 0", 10);
    v22 = (*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v11 + 288))(v11);
    if (v22 && v22 <= (int)a5)
    {
      v13 = "level out of range";
LABEL_56:
      v15 = v11;
      v16 = 1281;
      v14 = 19;
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(v15, v16, (uint64_t)"framebufferTextureLayer", 24, (uint64_t)v13, v14);
    }
  }
  if (a2 == 36160 || a2 == 36009)
  {
    v23 = (WebCore::WebGLFramebuffer **)((char *)v11 + 176);
  }
  else
  {
    if (a2 != 36008)
    {
LABEL_53:
      v13 = "no framebuffer bound";
      goto LABEL_54;
    }
    v23 = (WebCore::WebGLFramebuffer **)((char *)v11 + 928);
  }
  v24 = *v23;
  if (!*v23 || !*((_DWORD *)v24 + 6))
    goto LABEL_53;
  if (a4)
    ++*((_DWORD *)a4 + 2);
  v25[0] = a4;
  v25[1] = a5 | (unint64_t)(a6 << 32);
  v26 = 2;
  this = (WTF::StringImpl *)WebCore::WebGLFramebuffer::setAttachmentForBoundFramebuffer(v24, a2, a3, (uint64_t)v25);
  if (v26 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17WebGLRenderbufferENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS8_16WebGLFramebuffer17TextureAttachmentENSF_22TextureLayerAttachmentEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSK_EEEDcOSL_DpOT0____fmatrix[v26])(&v27, v25);
  return this;
}

uint64_t WebCore::WebGL2RenderingContext::getFramebufferBinding(WebCore::WebGL2RenderingContext *this, int a2)
{
  char *v2;

  if (a2 == 36160 || a2 == 36009)
  {
    v2 = (char *)this + 176;
    return *(_QWORD *)v2;
  }
  if (a2 == 36008)
  {
    v2 = (char *)this + 928;
    return *(_QWORD *)v2;
  }
  return 0;
}

uint64_t WebCore::WebGL2RenderingContext::getInternalformatParameter@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  int v9;
  const char *v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  WTF *v14;
  char v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;

  if (*(_BYTE *)(this + 364))
    goto LABEL_16;
  v6 = this;
  if (a4 != 32937)
  {
    v10 = "invalid parameter name";
LABEL_15:
    this = (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)this, 1280, (uint64_t)"getInternalformatParameter", 27, (uint64_t)v10, 23);
LABEL_16:
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 16) = 0;
    return this;
  }
  if ((int)a3 <= 32992)
  {
    if ((a3 - 27324) <= 4 && ((1 << (a3 + 68)) & 0x13) != 0)
      goto LABEL_14;
    goto LABEL_18;
  }
  if ((int)a3 <= 37792)
  {
    if ((_DWORD)a3 != 32993)
    {
      v9 = 33191;
      goto LABEL_13;
    }
LABEL_14:
    v10 = "invalid internalformat";
    goto LABEL_15;
  }
  if ((_DWORD)a3 == 38586)
    goto LABEL_14;
  v9 = 37793;
LABEL_13:
  if ((_DWORD)a3 == v9)
    goto LABEL_14;
LABEL_18:
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 88) + 520))(*(_QWORD *)(this + 88));
  if (v11)
    *(_BYTE *)(v6 + 112) |= v11;
  v12 = *(_QWORD *)(v6 + 88);
  v23 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t))(*(_QWORD *)v12 + 1296))(v12, a2, a3, 37760, &v23, 1);
  v13 = v23;
  this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 88) + 520))(*(_QWORD *)(v6 + 88));
  if ((_BYTE)this)
  {
    *(_BYTE *)(v6 + 112) |= this;
    goto LABEL_16;
  }
  if ((v13 & 0x80000000) != 0)
    goto LABEL_16;
  if ((_DWORD)v13)
  {
    if (v13 >> 30)
    {
      __break(0xC471u);
      return this;
    }
    v14 = (WTF *)WTF::fastMalloc((WTF *)(4 * v13));
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, WTF *, unint64_t))(**(_QWORD **)(v6 + 88) + 1296))(*(_QWORD *)(v6 + 88), a2, a3, 32937, v14, v13);
    v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 88) + 520))(*(_QWORD *)(v6 + 88));
    if (v15)
    {
      *(_BYTE *)(v6 + 112) |= v15;
      *(_QWORD *)a5 = 0;
      *(_DWORD *)(a5 + 16) = 0;
      return WTF::fastFree(v14, v16);
    }
  }
  else
  {
    v14 = 0;
  }
  this = JSC::GenericTypedArrayView<JSC::Int32Adaptor>::tryCreate(v13, &v22);
  v17 = v22;
  if (v22)
  {
    v18 = *(_QWORD *)(v22 + 32);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 16);
      if (v19)
      {
        v20 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        if (!v20 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
        {
          v21 = *(_QWORD *)(v22 + 24);
          goto LABEL_41;
        }
        if ((v19 & 0x3FFFFFFFFLL) + v20)
        {
          v21 = *(_QWORD *)(v22 + 24);
          if (v21 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
            v21 = (v21 & 0x3FFFFFFFFLL) + v20;
          goto LABEL_41;
        }
      }
    }
    v21 = 0;
LABEL_41:
    this = (uint64_t)memcpy((void *)v21, v14, 4 * v13);
    v17 = v22;
  }
  *(_QWORD *)a5 = v17;
  *(_DWORD *)(a5 + 16) = 12;
  if (v14)
    return WTF::fastFree(v14, v16);
  return this;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::invalidateFramebuffer(WTF::StringImpl *result, uint64_t a2, uint64_t a3)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  const char *v12;
  unsigned int v13;
  void *v14;

  if (!*((_BYTE *)result + 364))
  {
    v5 = result;
    v6 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v6)
    {
      if (v6 >> 30)
      {
        __break(0xC471u);
        return result;
      }
      v7 = (void *)WTF::fastMalloc((WTF *)(4 * v6));
      memcpy(v7, *(const void **)a3, 4 * *(unsigned int *)(a3 + 12));
    }
    else
    {
      v7 = 0;
    }
    if ((_DWORD)a2 == 36160 || (_DWORD)a2 == 36009)
    {
      v8 = (_QWORD *)((char *)v5 + 176);
      if (!(_DWORD)v6)
        goto LABEL_17;
    }
    else
    {
      if ((_DWORD)a2 != 36008)
      {
        v12 = "invalid target";
        v9 = 15;
        goto LABEL_20;
      }
      v8 = (_QWORD *)((char *)v5 + 928);
      if (!(_DWORD)v6)
      {
LABEL_17:
        result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD *, uint64_t, void *, uint64_t))(**((_QWORD **)v5 + 11)
                                                                                                  + 1272))(*((_QWORD **)v5 + 11), a2, v7, v6);
        if (!v7)
          return result;
        return (WTF::StringImpl *)WTF::fastFree((WTF *)v7, v14);
      }
    }
    if (*v8)
      goto LABEL_17;
    v9 = 19;
    v10 = v7;
    v11 = v6;
    v12 = "invalid attachment";
    while (1)
    {
      v13 = *v10 - 6144;
      if (v13 > 2)
        break;
      *v10++ = 32 * v13 + 36064;
      if (!--v11)
        goto LABEL_17;
    }
LABEL_20:
    result = WebCore::WebGLRenderingContextBase::synthesizeGLError(v5, 1280, (uint64_t)"invalidateFramebuffer", 22, (uint64_t)v12, v9);
    if (!v7)
      return result;
    return (WTF::StringImpl *)WTF::fastFree((WTF *)v7, v14);
  }
  return result;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::invalidateSubFramebuffer(WTF::StringImpl *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  WTF::StringImpl *v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  const char *v20;
  unsigned int v21;
  void *v22;

  if (!*((_BYTE *)result + 364))
  {
    v13 = result;
    v14 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v14)
    {
      if (v14 >> 30)
      {
        __break(0xC471u);
        return result;
      }
      v15 = (void *)WTF::fastMalloc((WTF *)(4 * v14));
      memcpy(v15, *(const void **)a3, 4 * *(unsigned int *)(a3 + 12));
    }
    else
    {
      v15 = 0;
    }
    if ((_DWORD)a2 == 36160 || (_DWORD)a2 == 36009)
    {
      v16 = (_QWORD *)((char *)v13 + 176);
      if (!(_DWORD)v14)
        goto LABEL_17;
    }
    else
    {
      if ((_DWORD)a2 != 36008)
      {
        v20 = "invalid target";
        v17 = 15;
        goto LABEL_20;
      }
      v16 = (_QWORD *)((char *)v13 + 928);
      if (!(_DWORD)v14)
      {
LABEL_17:
        result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD *, uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**((_QWORD **)v13 + 11) + 1280))(*((_QWORD **)v13 + 11), a2, v15, v14, a4, a5, a6, a7);
        if (!v15)
          return result;
        return (WTF::StringImpl *)WTF::fastFree((WTF *)v15, v22);
      }
    }
    if (*v16)
      goto LABEL_17;
    v17 = 19;
    v18 = v15;
    v19 = v14;
    v20 = "invalid attachment";
    while (1)
    {
      v21 = *v18 - 6144;
      if (v21 > 2)
        break;
      *v18++ = 32 * v21 + 36064;
      if (!--v19)
        goto LABEL_17;
    }
LABEL_20:
    result = WebCore::WebGLRenderingContextBase::synthesizeGLError(v13, 1280, (uint64_t)"invalidateSubFramebuffer", 25, (uint64_t)v20, v17);
    if (!v15)
      return result;
    return (WTF::StringImpl *)WTF::fastFree((WTF *)v15, v22);
  }
  return result;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::renderbufferStorageImpl(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8)
{
  int v12;
  const char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  WTF::StringImpl *result;
  int v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  uint64_t v23;
  uint64_t v24;

  if (a4 <= 34040)
  {
    if (a4 > 33188)
    {
      switch(a4)
      {
        case 33321:
        case 33323:
          goto LABEL_48;
        case 33322:
        case 33324:
          goto LABEL_20;
        case 33325:
        case 33327:
          goto LABEL_31;
        case 33326:
        case 33328:
          goto LABEL_37;
        case 33329:
        case 33330:
        case 33331:
        case 33332:
        case 33333:
        case 33334:
        case 33335:
        case 33336:
        case 33337:
        case 33338:
        case 33339:
        case 33340:
          goto LABEL_23;
        default:
          if ((a4 - 33189) >= 2)
            goto LABEL_46;
          goto LABEL_48;
      }
    }
    if ((a4 - 32854) >= 4 && a4 != 32849)
    {
      if (a4 == 32859)
      {
LABEL_20:
        if (!*(_QWORD *)(a1 + 584))
        {
          v13 = "EXT_texture_norm16 not enabled";
          v14 = 1280;
          v15 = a7;
          v16 = a8;
          v17 = 31;
          return WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)a1, v14, v15, v16, (uint64_t)v13, v17);
        }
        goto LABEL_48;
      }
LABEL_46:
      v13 = "invalid internalformat";
      v14 = 1280;
      v15 = a7;
      v16 = a8;
      v17 = 23;
      return WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)a1, v14, v15, v16, (uint64_t)v13, v17);
    }
    goto LABEL_48;
  }
  if (a4 > 36193)
  {
    if ((a4 - 36194) <= 0x2C)
    {
      if (((1 << (a4 - 98)) & 0x104104104000) != 0)
        goto LABEL_23;
      if (a4 == 36194)
        goto LABEL_48;
    }
    if ((a4 - 36756) <= 7)
    {
      v12 = 1 << (a4 + 108);
      if ((v12 & 0xB) != 0)
      {
        if (!*(_QWORD *)(a1 + 536))
        {
          v13 = "EXT_render_snorm not enabled";
          v14 = 1280;
          v15 = a7;
          v16 = a8;
          v17 = 29;
          return WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)a1, v14, v15, v16, (uint64_t)v13, v17);
        }
        goto LABEL_48;
      }
      if ((v12 & 0xB0) != 0)
      {
        if (!*(_QWORD *)(a1 + 536) || !*(_QWORD *)(a1 + 584))
        {
          v13 = "EXT_render_snorm or EXT_texture_norm16 not enabled";
          v14 = 1280;
          v15 = a7;
          v16 = a8;
          v17 = 51;
          return WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)a1, v14, v15, v16, (uint64_t)v13, v17);
        }
        goto LABEL_48;
      }
    }
    if (a4 != 36975)
      goto LABEL_46;
LABEL_23:
    if (a3 >= 1)
    {
      v13 = "for integer formats, samples > 0 is not allowed";
      v14 = 1282;
      v15 = a7;
      v16 = a8;
      v17 = 48;
      return WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)a1, v14, v15, v16, (uint64_t)v13, v17);
    }
    goto LABEL_48;
  }
  if (a4 > 35900)
  {
    if (a4 <= 36011)
    {
      if (a4 == 35901)
      {
        if (!*(_QWORD *)(a1 + 856))
        {
          v13 = "WEBGL_render_shared_exponent not enabled";
          v14 = 1280;
          v15 = a7;
          v16 = a8;
          v17 = 41;
          return WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)a1, v14, v15, v16, (uint64_t)v13, v17);
        }
        v24 = **(_QWORD **)(a1 + 88);
        if (a3)
          v22 = *(uint64_t (**)(void))(v24 + 1304);
        else
          v22 = *(uint64_t (**)(void))(v24 + 736);
        goto LABEL_51;
      }
      v20 = 35907;
    }
    else
    {
      if ((a4 - 36012) < 2)
        goto LABEL_48;
      v20 = 36168;
    }
    if (a4 != v20)
      goto LABEL_46;
    goto LABEL_48;
  }
  if (a4 > 34841)
  {
    if (a4 == 34842)
    {
LABEL_31:
      if (!*(_QWORD *)(a1 + 464) && !*(_QWORD *)(a1 + 472))
      {
        v13 = "EXT_color_buffer_float or EXT_color_buffer_half_float not enabled";
        v14 = 1280;
        v15 = a7;
        v16 = a8;
        v17 = 66;
        return WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)a1, v14, v15, v16, (uint64_t)v13, v17);
      }
      goto LABEL_48;
    }
    if (a4 == 35056)
    {
LABEL_48:
      v21 = **(_QWORD **)(a1 + 88);
      if (a3)
        v22 = *(uint64_t (**)(void))(v21 + 1304);
      else
        v22 = *(uint64_t (**)(void))(v21 + 736);
      goto LABEL_51;
    }
    v18 = 35898;
LABEL_36:
    if (a4 != v18)
      goto LABEL_46;
LABEL_37:
    if (!*(_QWORD *)(a1 + 464))
    {
      v13 = "EXT_color_buffer_float not enabled";
      v14 = 1280;
      v15 = a7;
      v16 = a8;
      v17 = 35;
      return WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)a1, v14, v15, v16, (uint64_t)v13, v17);
    }
    goto LABEL_48;
  }
  if (a4 != 34041)
  {
    v18 = 34836;
    goto LABEL_36;
  }
  if (a3)
  {
    v13 = "invalid internalformat for samples > 0";
    v14 = 1282;
    v15 = a7;
    v16 = a8;
    v17 = 39;
    return WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)a1, v14, v15, v16, (uint64_t)v13, v17);
  }
  v22 = *(uint64_t (**)(void))(**(_QWORD **)(a1 + 88) + 736);
LABEL_51:
  result = (WTF::StringImpl *)v22();
  v23 = *(_QWORD *)(a1 + 184);
  *(_DWORD *)(v23 + 36) = a4;
  *(_DWORD *)(v23 + 40) = a5;
  *(_DWORD *)(v23 + 44) = a6;
  *(_BYTE *)(v23 + 48) = 1;
  return result;
}

void WebCore::WebGL2RenderingContext::getTexParameter(WebCore::WebGL2RenderingContext *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _DWORD *v8;
  int v9;
  uint64_t (*v10)(void);
  int v11;
  _DWORD *v12;

  if (*((_BYTE *)this + 364))
    goto LABEL_2;
  WebCore::WebGLRenderingContextBase::validateTextureBinding(this, (uint64_t)"getTexParameter", 16, a2, &v12);
  v8 = v12;
  v12 = 0;
  if (!v8)
    goto LABEL_2;
  if (v8[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
  else
    --v8[2];
  if ((int)a3 <= 33502)
  {
    if ((a3 - 33082) < 2)
    {
      *(float *)a4 = (*(float (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 11) + 584))(*((_QWORD *)this + 11), a2, a3);
      v11 = 6;
      goto LABEL_20;
    }
    if ((a3 - 33084) < 2)
      goto LABEL_14;
    v9 = 32882;
LABEL_13:
    if ((_DWORD)a3 == v9)
      goto LABEL_14;
LABEL_24:
    WebCore::WebGLRenderingContextBase::getTexParameter(this, a2, a3, a4);
    return;
  }
  if ((int)a3 > 37097)
  {
    if ((_DWORD)a3 != 37098)
    {
      if ((_DWORD)a3 == 37167)
      {
        *(_BYTE *)a4 = (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 11) + 592))(*((_QWORD *)this + 11), a2, 37167) != 0;
        v11 = 1;
        goto LABEL_20;
      }
      goto LABEL_24;
    }
    if (*((_QWORD *)this + 108))
    {
      v10 = *(uint64_t (**)(void))(**((_QWORD **)this + 11) + 592);
      goto LABEL_15;
    }
    WebCore::WebGLRenderingContextBase::synthesizeGLError(this, 1280, (uint64_t)"getTexParameter", 16, (uint64_t)"invalid parameter name, WEBGL_stencil_texturing not enabled", 60);
LABEL_2:
    *(_QWORD *)a4 = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return;
  }
  if ((a3 - 34892) >= 2)
  {
    v9 = 33503;
    goto LABEL_13;
  }
LABEL_14:
  v10 = *(uint64_t (**)(void))(**((_QWORD **)this + 11) + 592);
LABEL_15:
  *(_DWORD *)a4 = v10();
  v11 = 2;
LABEL_20:
  *(_DWORD *)(a4 + 16) = v11;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::texStorage2D(WTF::StringImpl *this, int a2, int a3, int a4)
{
  unint64_t v4;
  _DWORD *v5;
  int v6;
  unint64_t v7;
  const char *v8;
  int v9;
  uint64_t v10;

  if (!*((_BYTE *)this + 364))
  {
    if (a2 == 34067)
    {
      v7 = *((_QWORD *)this + 26);
      if (v7 < *((unsigned int *)this + 51))
      {
        v5 = *(_DWORD **)(*((_QWORD *)this + 24) + 32 * v7 + 8);
        if (v5)
        {
LABEL_6:
          ++v5[2];
          if (a4 <= 32992)
          {
            if ((a4 - 27324) <= 4 && ((1 << (a4 + 68)) & 0x13) != 0)
              goto LABEL_21;
            goto LABEL_25;
          }
          if (a4 > 37792)
          {
            if (a4 != 38586)
            {
              v6 = 37793;
LABEL_20:
              if (a4 == v6)
                goto LABEL_21;
LABEL_25:
              this = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 1312))(*((_QWORD *)this + 11));
LABEL_22:
              if (v5[2] == 1)
                return (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
              --v5[2];
              return this;
            }
          }
          else if (a4 != 32993)
          {
            v6 = 33191;
            goto LABEL_20;
          }
LABEL_21:
          this = WebCore::WebGLRenderingContextBase::synthesizeGLError(this, 1280, (uint64_t)"texStorage2D", 13, (uint64_t)"invalid internalformat", 23);
          goto LABEL_22;
        }
        goto LABEL_12;
      }
    }
    else
    {
      if (a2 != 3553)
      {
        v8 = "invalid texture target";
        v9 = 1280;
        v10 = 23;
        return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v9, (uint64_t)"texStorage2D", 13, (uint64_t)v8, v10);
      }
      v4 = *((_QWORD *)this + 26);
      if (v4 < *((unsigned int *)this + 51))
      {
        v5 = *(_DWORD **)(*((_QWORD *)this + 24) + 32 * v4);
        if (v5)
          goto LABEL_6;
LABEL_12:
        v8 = "no texture";
        v9 = 1282;
        v10 = 11;
        return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v9, (uint64_t)"texStorage2D", 13, (uint64_t)v8, v10);
      }
    }
    __break(0xC471u);
    JUMPOUT(0x195CFAAB0);
  }
  return this;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::texStorage3D(WTF::StringImpl *this, int a2, int a3, int a4)
{
  unint64_t v4;
  _DWORD *v5;
  int v6;
  unint64_t v7;
  const char *v8;
  int v9;
  uint64_t v10;

  if (!*((_BYTE *)this + 364))
  {
    if (a2 == 32879)
    {
      v7 = *((_QWORD *)this + 26);
      if (v7 < *((unsigned int *)this + 51))
      {
        v5 = *(_DWORD **)(*((_QWORD *)this + 24) + 32 * v7 + 16);
        if (v5)
        {
LABEL_6:
          ++v5[2];
          if (a4 <= 32992)
          {
            if ((a4 - 27324) <= 4 && ((1 << (a4 + 68)) & 0x13) != 0)
              goto LABEL_21;
            goto LABEL_25;
          }
          if (a4 > 37792)
          {
            if (a4 != 38586)
            {
              v6 = 37793;
LABEL_20:
              if (a4 == v6)
                goto LABEL_21;
LABEL_25:
              this = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 1320))(*((_QWORD *)this + 11));
LABEL_22:
              if (v5[2] == 1)
                return (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
              --v5[2];
              return this;
            }
          }
          else if (a4 != 32993)
          {
            v6 = 33191;
            goto LABEL_20;
          }
LABEL_21:
          this = WebCore::WebGLRenderingContextBase::synthesizeGLError(this, 1280, (uint64_t)"texStorage3D", 13, (uint64_t)"invalid internalformat", 23);
          goto LABEL_22;
        }
        goto LABEL_12;
      }
    }
    else
    {
      if (a2 != 35866)
      {
        v8 = "invalid texture target";
        v9 = 1280;
        v10 = 23;
        return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v9, (uint64_t)"texStorage3D", 13, (uint64_t)v8, v10);
      }
      v4 = *((_QWORD *)this + 26);
      if (v4 < *((unsigned int *)this + 51))
      {
        v5 = *(_DWORD **)(*((_QWORD *)this + 24) + 32 * v4 + 24);
        if (v5)
          goto LABEL_6;
LABEL_12:
        v8 = "no texture bound to target";
        v9 = 1282;
        v10 = 27;
        return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v9, (uint64_t)"texStorage3D", 13, (uint64_t)v8, v10);
      }
    }
    __break(0xC471u);
    JUMPOUT(0x195CFAC54);
  }
  return this;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::texImage2D(WTF::StringImpl *result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, int a7, unsigned int a8, int a9, JSC::ArrayBufferView **a10)
{
  uint64_t (*v10)();

  if (!*((_BYTE *)result + 364))
  {
    if (*((_QWORD *)result + 122))
      v10 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
    else
      v10 = 0;
    if (v10)
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(result, 1282, (uint64_t)"texImage2D", 11, (uint64_t)"a buffer is bound to PIXEL_UNPACK_BUFFER", 41);
    else
      return (WTF::StringImpl *)WebCore::WebGLRenderingContextBase::texImageArrayBufferViewHelper(result, 0, a2, a3, a4, a5, a6, 1, a7, a8, a9, 0, 0, 0, a10, 0, 0);
  }
  return result;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::texImage2D@<X0>(WTF::StringImpl *result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X6>, _QWORD *a8@<X8>, uint64_t a9, uint64_t a10)
{
  WTF::StringImpl *v11;
  uint64_t (*v12)();
  uint64_t v18;
  int v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28[8];
  int v29;
  char v30;
  WTF::StringImpl *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl **v44;

  if (*((_BYTE *)result + 364))
    goto LABEL_7;
  v11 = result;
  if (*((_QWORD *)result + 122))
    v12 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
  else
    v12 = 0;
  if (v12)
  {
    result = WebCore::WebGLRenderingContextBase::synthesizeGLError(result, 1282, (uint64_t)"texImage2D", 11, (uint64_t)"a buffer is bound to PIXEL_UNPACK_BUFFER", 41);
LABEL_7:
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0;
    return result;
  }
  v28[0] = 0;
  v30 = 0;
  if (!*(_BYTE *)(a7 + 16))
  {
    result = WebCore::WebGLRenderingContextBase::synthesizeGLError(result, 1281, (uint64_t)"texImage2D", 11, (uint64_t)"source is null", 15);
    *a8 = 0;
    a8[1] = 0;
    a8[2] = 0;
    goto LABEL_17;
  }
  v29 = -1;
  v18 = *(unsigned int *)(a7 + 8);
  if ((_DWORD)v18 == -1)
  {
    v30 = 1;
    goto LABEL_15;
  }
  result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_9ImageDataENSA_ISF_EENSC_ISF_EEEENS7_INS8_16HTMLImageElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_17HTMLCanvasElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_15OffscreenCanvasENSA_ISV_EENSC_ISV_EEEENS7_INS8_19WebCodecsVideoFrameENSA_ISZ_EENSC_ISZ_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS13_LNS0_6_TraitE1EEEEEvRS14_OT_EUlRS1C_OT0_E_JS1B_S1A_EEEDcmS1D_DpOT0____fdiagonal[v18])(&v31, v28, a7);
  v29 = v18;
  v19 = *((unsigned __int8 *)v11 + 364);
  v30 = 1;
  if (!v19)
  {
LABEL_15:
    v31 = v11;
    v32 = 0;
    v33 = a2;
    v34 = a3;
    v35 = a4;
    v36 = 0;
    v37 = a5;
    v38 = a6;
    v40 = 0;
    v39 = 0;
    v41 = 0;
    v42 = -1;
    v43 = 1;
    if ((_DWORD)v18 == -1)
    {
      v20 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::WebGL2RenderingContext::texImage2D(v20, v21, v22, v23, v24, v25, v26, v27, a9, a10);
    }
    v44 = &v31;
    result = (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl ***, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN7WebCore25WebGLRenderingContextBase20texImageSourceHelperENS7_18TexImageFunctionIDEjiiijjiiiRKNS6_7IntRectEiiONS_7variantIJN3WTF6RefPtrINS6_11ImageBitmapENSD_12RawPtrTraitsISF_EENSD_21DefaultRefDerefTraitsISF_EEEENSE_INS6_9ImageDataENSG_ISL_EENSI_ISL_EEEENSE_INS6_16HTMLImageElementENSG_ISP_EENSI_ISP_EEEENSE_INS6_17HTMLCanvasElementENSG_IST_EENSI_IST_EEEENSE_INS6_16HTMLVideoElementENSG_ISX_EENSI_ISX_EEEENSE_INS6_15OffscreenCanvasENSG_IS11_EENSI_IS11_EEEENSE_INS6_19WebCodecsVideoFrameENSG_IS15_EENSI_IS15_EEEEEEEE3__0EEJRNS0_6__implIJSK_SO_SS_SW_S10_S14_S18_EEEEEEDcOT_DpOT0____fmatrix[v18])(&v44, v28);
LABEL_17:
    if (!v30)
      return result;
    goto LABEL_18;
  }
  *a8 = 0;
  a8[1] = 0;
  a8[2] = 0;
LABEL_18:
  if (v29 != -1)
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_9ImageDataENSA_ISF_EENSC_ISF_EEEENS7_INS8_16HTMLImageElementENSA_ISJ_EENSC_ISJ_EEEENS7_INS8_17HTMLCanvasElementENSA_ISN_EENSC_ISN_EEEENS7_INS8_16HTMLVideoElementENSA_ISR_EENSC_ISR_EEEENS7_INS8_15OffscreenCanvasENSA_ISV_EENSC_ISV_EEEENS7_INS8_19WebCodecsVideoFrameENSA_ISZ_EENSC_ISZ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS15_EEEDcOS16_DpOT0____fmatrix[v29])(&v31, v28);
  return result;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::texImage2D(WTF::StringImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t (*v18)();
  WTF::StringImpl *v19;

  if (!*((_BYTE *)this + 364))
  {
    v17 = (uint64_t)this;
    WebCore::WebGLRenderingContextBase::validateTexture2DBinding(this, (uint64_t)"texImage2D", 11, a2, &v19);
    this = v19;
    if (v19)
    {
      if (*((_DWORD *)v19 + 2) == 1)
        (*(void (**)(void))(*(_QWORD *)v19 + 8))();
      else
        --*((_DWORD *)v19 + 2);
      if (*(_QWORD *)(v17 + 976))
        v18 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
      else
        v18 = 0;
      if (v18)
      {
        if (*(_BYTE *)(v17 + 344) || *(_BYTE *)(v17 + 345))
        {
          return WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v17, 1282, (uint64_t)"texImage2D", 11, (uint64_t)"FLIP_Y or PREMULTIPLY_ALPHA isn't allowed while uploading from PBO", 67);
        }
        else
        {
          this = (WTF::StringImpl *)WebCore::WebGLRenderingContextBase::validateTexFunc((WTF::StringImpl *)v17, 0, 8, a2, a3, a4, a5, a6, 1, a7, a8, a9, 0, 0, 0);
          if ((_DWORD)this)
            return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v17 + 88) + 1128))(*(_QWORD *)(v17 + 88), a2, a3, a4, a5, a6, a7, a8, a9, a10);
        }
      }
      else
      {
        return WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v17, 1282, (uint64_t)"texImage2D", 11, (uint64_t)"no bound PIXEL_UNPACK_BUFFER", 29);
      }
    }
  }
  return this;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::texImage3D(WTF::StringImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  int v21;
  uint64_t (*v22)();
  const char *v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  if (!*((_BYTE *)this + 364))
  {
    v17 = (uint64_t)this;
    v18 = a10;
    if ((_DWORD)a2 == 32879)
    {
      v26 = *((_QWORD *)this + 26);
      if (v26 < *((unsigned int *)this + 51))
      {
        v20 = *(_DWORD **)(*((_QWORD *)this + 24) + 32 * v26 + 16);
        if (v20)
        {
LABEL_7:
          v21 = v20[2];
          v20[2] = v21 + 1;
          if (v21)
          {
            v20[2] = v21;
          }
          else
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
            v18 = a10;
          }
          if (*(_QWORD *)(v17 + 976))
            v22 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
          else
            v22 = 0;
          if (v22)
          {
            if (!*(_BYTE *)(v17 + 344) && !*(_BYTE *)(v17 + 345))
            {
              v27 = v18;
              this = (WTF::StringImpl *)WebCore::WebGLRenderingContextBase::validateTexFunc((WTF::StringImpl *)v17, 2, 8, a2, a3, a4, a5, a6, a7, a8, a9, SHIDWORD(a9), 0, 0, 0);
              if ((_DWORD)this)
                return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v17 + 88) + 1336))(*(_QWORD *)(v17 + 88), a2, a3, a4, a5, a6, a7, a8, a9, v27);
              return this;
            }
            v23 = "FLIP_Y or PREMULTIPLY_ALPHA isn't allowed for uploading 3D textures";
            this = (WTF::StringImpl *)v17;
            v24 = 1282;
            v25 = 68;
          }
          else
          {
            v23 = "no bound PIXEL_UNPACK_BUFFER";
            this = (WTF::StringImpl *)v17;
            v24 = 1282;
            v25 = 29;
          }
          return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v24, (uint64_t)"texImage3D", 11, (uint64_t)v23, v25);
        }
LABEL_18:
        v23 = "no texture bound to target";
        this = (WTF::StringImpl *)v17;
        v24 = 1282;
        v25 = 27;
        return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v24, (uint64_t)"texImage3D", 11, (uint64_t)v23, v25);
      }
    }
    else
    {
      if ((_DWORD)a2 != 35866)
      {
        v23 = "invalid texture target";
        v24 = 1280;
        v25 = 23;
        return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v24, (uint64_t)"texImage3D", 11, (uint64_t)v23, v25);
      }
      v19 = *((_QWORD *)this + 26);
      if (v19 < *((unsigned int *)this + 51))
      {
        v20 = *(_DWORD **)(*((_QWORD *)this + 24) + 32 * v19 + 24);
        if (v20)
          goto LABEL_7;
        goto LABEL_18;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x195CFB2F4);
  }
  return this;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::texSubImage2D(WTF::StringImpl *result, uint64_t a2, uint64_t a3, unsigned int a4, int a5, unsigned int a6, uint64_t a7, unsigned int a8, int a9, JSC::ArrayBufferView **a10)
{
  uint64_t (*v10)();

  if (!*((_BYTE *)result + 364))
  {
    if (*((_QWORD *)result + 122))
      v10 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
    else
      v10 = 0;
    if (v10)
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(result, 1282, (uint64_t)"texSubImage2D", 14, (uint64_t)"a buffer is bound to PIXEL_UNPACK_BUFFER", 41);
    else
      return (WTF::StringImpl *)WebCore::WebGLRenderingContextBase::texImageArrayBufferViewHelper(result, 1, a2, a3, 0, a6, a7, 1, 0, a8, a9, a4, a5, 0, a10, 1, 0);
  }
  return result;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::texSubImage2D@<X0>(WTF::StringImpl *result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t (*v12)();
  const char *v13;
  const char *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  __int128 v37;
  uint64_t v38;
  WTF::StringImpl **v39;

  if (*((_BYTE *)result + 364))
    goto LABEL_8;
  if (*((_QWORD *)result + 122))
    v12 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
  else
    v12 = 0;
  if (v12)
  {
    v13 = "texSubImage2D";
    v14 = "a buffer is bound to PIXEL_UNPACK_BUFFER";
    v15 = 1282;
    v16 = 41;
LABEL_7:
    result = WebCore::WebGLRenderingContextBase::synthesizeGLError(result, v15, (uint64_t)v13, 14, (uint64_t)v14, v16);
LABEL_8:
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
    return result;
  }
  if (!*(_BYTE *)(a8 + 16))
  {
    v13 = "texSubImage2D";
    v14 = "source is null";
    v15 = 1281;
    v16 = 15;
    goto LABEL_7;
  }
  v26 = result;
  v27 = 1;
  v28 = a2;
  v29 = a3;
  v30 = 0;
  v31 = 0;
  v32 = a6;
  v33 = a7;
  v34 = a4;
  v35 = a5;
  v36 = 0;
  v37 = xmmword_1968C18F0;
  v38 = 1;
  v17 = *(unsigned int *)(a8 + 8);
  if ((_DWORD)v17 == -1)
  {
    v18 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::WebGL2RenderingContext::texSubImage2D(v18, v19, v20, v21, v22, v23, v24, v25, a10, a11);
  }
  else
  {
    v39 = &v26;
    return (WTF::StringImpl *)((uint64_t (*)(WTF::StringImpl ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN7WebCore25WebGLRenderingContextBase20texImageSourceHelperENS7_18TexImageFunctionIDEjiiijjiiiRKNS6_7IntRectEiiONS_7variantIJN3WTF6RefPtrINS6_11ImageBitmapENSD_12RawPtrTraitsISF_EENSD_21DefaultRefDerefTraitsISF_EEEENSE_INS6_9ImageDataENSG_ISL_EENSI_ISL_EEEENSE_INS6_16HTMLImageElementENSG_ISP_EENSI_ISP_EEEENSE_INS6_17HTMLCanvasElementENSG_IST_EENSI_IST_EEEENSE_INS6_16HTMLVideoElementENSG_ISX_EENSI_ISX_EEEENSE_INS6_15OffscreenCanvasENSG_IS11_EENSI_IS11_EEEENSE_INS6_19WebCodecsVideoFrameENSG_IS15_EENSI_IS15_EEEEEEEE3__0EEJRNS0_6__implIJSK_SO_SS_SW_S10_S14_S18_EEEEEEDcOT_DpOT0____fmatrix[v17])(&v39, a8);
  }
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::texSubImage2D(WTF::StringImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t (*v18)();
  WTF::StringImpl *v19;

  if (!*((_BYTE *)this + 364))
  {
    v17 = (uint64_t)this;
    WebCore::WebGLRenderingContextBase::validateTexture2DBinding(this, (uint64_t)"texSubImage2D", 14, a2, &v19);
    this = v19;
    if (v19)
    {
      if (*((_DWORD *)v19 + 2) == 1)
        (*(void (**)(void))(*(_QWORD *)v19 + 8))();
      else
        --*((_DWORD *)v19 + 2);
      if (*(_QWORD *)(v17 + 976))
        v18 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
      else
        v18 = 0;
      if (v18)
      {
        if (*(_BYTE *)(v17 + 344) || *(_BYTE *)(v17 + 345))
        {
          return WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v17, 1282, (uint64_t)"texSubImage2D", 14, (uint64_t)"FLIP_Y or PREMULTIPLY_ALPHA isn't allowed while uploading from PBO", 67);
        }
        else
        {
          this = (WTF::StringImpl *)WebCore::WebGLRenderingContextBase::validateTexFunc((WTF::StringImpl *)v17, 1, 8, a2, a3, 0, a6, a7, 1, 0, a8, a9, a4, a5, 0);
          if ((_DWORD)this)
            return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v17 + 88) + 1144))(*(_QWORD *)(v17 + 88), a2, a3, a4, a5, a6, a7, a8, a9, a10);
        }
      }
      else
      {
        return WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v17, 1282, (uint64_t)"texSubImage2D", 14, (uint64_t)"no bound PIXEL_UNPACK_BUFFER", 29);
      }
    }
  }
  return this;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::texSubImage3D(WTF::StringImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  _DWORD *v22;
  int v23;
  uint64_t (*v24)();
  const char *v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;

  if (!*((_BYTE *)this + 364))
  {
    v18 = (uint64_t)this;
    v19 = a11;
    v20 = a9;
    if ((_DWORD)a2 == 32879)
    {
      v28 = *((_QWORD *)this + 26);
      if (v28 < *((unsigned int *)this + 51))
      {
        v22 = *(_DWORD **)(*((_QWORD *)this + 24) + 32 * v28 + 16);
        if (v22)
        {
LABEL_7:
          v23 = v22[2];
          v22[2] = v23 + 1;
          if (v23)
          {
            v22[2] = v23;
          }
          else
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
            v20 = a9;
            v19 = a11;
          }
          if (*(_QWORD *)(v18 + 976))
            v24 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
          else
            v24 = 0;
          if (v24)
          {
            if (!*(_BYTE *)(v18 + 344) && !*(_BYTE *)(v18 + 345))
            {
              v30 = v19;
              v29 = v20;
              this = (WTF::StringImpl *)WebCore::WebGLRenderingContextBase::validateTexFunc((WTF::StringImpl *)v18, 3, 8, a2, a3, 0, a7, a8, v20, 0, SHIDWORD(a9), a10, a4, a5, a6);
              if ((_DWORD)this)
                return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(**(_QWORD **)(v18 + 88) + 1352))(*(_QWORD *)(v18 + 88), a2, a3, a4, a5, a6, a7, a8, __PAIR64__(HIDWORD(a9), v29), a10, v30);
              return this;
            }
            v25 = "FLIP_Y or PREMULTIPLY_ALPHA isn't allowed for uploading 3D textures";
            this = (WTF::StringImpl *)v18;
            v26 = 1282;
            v27 = 68;
          }
          else
          {
            v25 = "no bound PIXEL_UNPACK_BUFFER";
            this = (WTF::StringImpl *)v18;
            v26 = 1282;
            v27 = 29;
          }
          return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v26, (uint64_t)"texSubImage3D", 14, (uint64_t)v25, v27);
        }
LABEL_18:
        v25 = "no texture bound to target";
        this = (WTF::StringImpl *)v18;
        v26 = 1282;
        v27 = 27;
        return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v26, (uint64_t)"texSubImage3D", 14, (uint64_t)v25, v27);
      }
    }
    else
    {
      if ((_DWORD)a2 != 35866)
      {
        v25 = "invalid texture target";
        v26 = 1280;
        v27 = 23;
        return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v26, (uint64_t)"texSubImage3D", 14, (uint64_t)v25, v27);
      }
      v21 = *((_QWORD *)this + 26);
      if (v21 < *((unsigned int *)this + 51))
      {
        v22 = *(_DWORD **)(*((_QWORD *)this + 24) + 32 * v21 + 24);
        if (v22)
          goto LABEL_7;
        goto LABEL_18;
      }
    }
    __break(0xC471u);
    JUMPOUT(0x195CFB8D8);
  }
  return this;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::copyTexSubImage3D(WTF::StringImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12, uint64_t a13)
{
  uint64_t v20;
  unint64_t v21;
  _DWORD *v22;
  int v23;
  unint64_t v24;
  const char *v25;
  int v26;
  uint64_t v27;

  if (*((_BYTE *)this + 364))
    return this;
  v20 = (uint64_t)this;
  if ((_DWORD)a2 == 32879)
  {
    v24 = *((_QWORD *)this + 26);
    if (v24 < *((unsigned int *)this + 51))
    {
      v22 = *(_DWORD **)(*((_QWORD *)this + 24) + 32 * v24 + 16);
      if (v22)
        goto LABEL_6;
      goto LABEL_11;
    }
LABEL_15:
    __break(0xC471u);
    JUMPOUT(0x195CFBA80);
  }
  if ((_DWORD)a2 != 35866)
  {
    v25 = "invalid texture target";
    v26 = 1280;
    v27 = 23;
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v26, (uint64_t)"copyTexSubImage3D", 18, (uint64_t)v25, v27);
  }
  v21 = *((_QWORD *)this + 26);
  if (v21 >= *((unsigned int *)this + 51))
    goto LABEL_15;
  v22 = *(_DWORD **)(*((_QWORD *)this + 24) + 32 * v21 + 24);
  if (!v22)
  {
LABEL_11:
    v25 = "no texture bound to target";
    this = (WTF::StringImpl *)v20;
    v26 = 1282;
    v27 = 27;
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v26, (uint64_t)"copyTexSubImage3D", 18, (uint64_t)v25, v27);
  }
LABEL_6:
  v23 = v22[2];
  v22[2] = v23 + 1;
  if (v23)
    v22[2] = v23;
  else
    (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
  WebCore::WebGLRenderingContextBase::clearIfComposited(v20, 1, 0, a9, a10, a11, a12);
  return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v20 + 88) + 1360))(*(_QWORD *)(v20 + 88), a2, a3, a4, a5, a6, a7, a8, a13);
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::compressedTexImage2D(WTF::StringImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t v18;
  int *v19;
  int v20;
  WTF::StringImpl *v21;

  if (!*((_BYTE *)this + 364))
  {
    v9 = (uint64_t)this;
    if (*((_QWORD *)this + 122))
      v10 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
    else
      v10 = 0;
    if (v10)
    {
      WebCore::WebGLRenderingContextBase::validateTexture2DBinding(this, (uint64_t)"compressedTexImage2D", 21, a2, &v21);
      this = v21;
      if (v21)
      {
        if (*((_DWORD *)v21 + 2) == 1)
          (*(void (**)(void))(*(_QWORD *)v21 + 8))();
        else
          --*((_DWORD *)v21 + 2);
        v18 = *(unsigned int *)(v9 + 228);
        if ((_DWORD)v18)
        {
          v19 = *(int **)(v9 + 216);
          while (1)
          {
            v20 = *v19++;
            if (v20 == (_DWORD)a4)
              break;
            if (!--v18)
              return WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v9, 1280, (uint64_t)"compressedTexImage2D", 21, (uint64_t)"invalid format", 15);
          }
          return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v9 + 88) + 1160))(*(_QWORD *)(v9 + 88), a2, a3, a4, a5, a6, a7, a8, a9);
        }
        else
        {
          return WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v9, 1280, (uint64_t)"compressedTexImage2D", 21, (uint64_t)"invalid format", 15);
        }
      }
    }
    else
    {
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, 1282, (uint64_t)"compressedTexImage2D", 21, (uint64_t)"no bound PIXEL_UNPACK_BUFFER", 29);
    }
  }
  return this;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::compressedTexImage2D(WTF::StringImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, JSC::ArrayBufferView *a8, unsigned int a9, unsigned int a10)
{
  WTF::StringImpl *v10;
  uint64_t (*v11)();
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;

  if (!*((_BYTE *)this + 364))
  {
    v10 = this;
    if (*((_QWORD *)this + 122))
      v11 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
    else
      v11 = 0;
    if (v11)
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, 1282, (uint64_t)"compressedTexImage2D", 21, (uint64_t)"a buffer is bound to PIXEL_UNPACK_BUFFER", 41);
    WebCore::WebGLRenderingContextBase::validateTexture2DBinding(this, (uint64_t)"compressedTexImage2D", 21, a2, &v44);
    this = v44;
    if (v44)
    {
      if (*((_DWORD *)v44 + 2) == 1)
        (*(void (**)(void))(*(_QWORD *)v44 + 8))();
      else
        --*((_DWORD *)v44 + 2);
      this = WebCore::WebGL2RenderingContext::sliceArrayBufferView(v10, (uint64_t)"compressedTexImage2D", 21, (uint64_t)a8, a9, a10, (uint64_t *)&v44);
      if (v44)
      {
        v19 = *((_QWORD *)v44 + 4);
        if (v19)
        {
          v20 = *(_QWORD *)(v19 + 16);
          if (v20)
          {
            if ((v21 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
              || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
              || (v20 & 0x3FFFFFFFFLL) + v21)
            {
              v22 = *((_BYTE *)v44 + 6);
              if ((v22 & 3) == 0)
              {
                v23 = *((_QWORD *)v44 + 2);
                goto LABEL_19;
              }
              if (*(_BYTE *)(v19 + 64) && (v42 = *(_QWORD *)(v19 + 32)) != 0)
              {
                v31 = atomic_load((unint64_t *)(v42 + 32));
                v22 = *((_BYTE *)v44 + 6);
              }
              else
              {
                v31 = *(_QWORD *)(v19 + 48);
              }
              v32 = *((_QWORD *)v44 + 1);
              if ((v22 & 4) == 0)
              {
                v33 = *((_QWORD *)v44 + 2) + v32 <= v31 && v31 >= v32;
                if (v33)
                  v23 = 0;
                else
                  v23 = *((_QWORD *)v44 + 2);
                goto LABEL_19;
              }
              v33 = v31 >= v32;
              v34 = v31 - v32;
              if (!v33)
              {
                if ((*((_BYTE *)v44 + 4) - 4) > 7u)
                  LOBYTE(v35) = 0;
                else
                  v35 = qword_1969F16F0[(char)(*((_BYTE *)v44 + 4) - 4)];
                v23 = (-1 << v35) & v34;
LABEL_19:
                v24 = *((_QWORD *)v44 + 4);
                if (!v24 || (v25 = *(_QWORD *)(v24 + 16)) == 0)
                {
                  v28 = 0;
                  goto LABEL_29;
                }
                v26 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
                if (!v26 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
                {
                  v28 = *((_QWORD *)v44 + 3);
LABEL_51:
                  v36 = *((_BYTE *)v44 + 6);
                  if ((v36 & 3) == 0)
                  {
                    v30 = *((_QWORD *)v44 + 2);
LABEL_53:
                    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**((_QWORD **)v10 + 11) + 1152))(*((_QWORD **)v10 + 11), a2, a3, a4, a5, a6, a7, v23, v28, v30);
                    this = v44;
                    if (v44)
                    {
                      if (*(_DWORD *)v44 == 1)
                        return (WTF::StringImpl *)JSC::ArrayBufferView::operator delete();
                      else
                        --*(_DWORD *)v44;
                    }
                    return this;
                  }
                  if (*(_BYTE *)(v24 + 64) && (v43 = *(_QWORD *)(v24 + 32)) != 0)
                  {
                    v37 = atomic_load((unint64_t *)(v43 + 32));
                    v36 = *((_BYTE *)v44 + 6);
                  }
                  else
                  {
                    v37 = *(_QWORD *)(v24 + 48);
                  }
                  v38 = *((_QWORD *)v44 + 1);
                  if ((v36 & 4) == 0)
                  {
                    v30 = *((_QWORD *)v44 + 2);
                    if (v30 + v38 <= v37 && v37 >= v38)
                      v30 = 0;
                    goto LABEL_53;
                  }
                  v33 = v37 >= v38;
                  v40 = v37 - v38;
                  if (!v33)
                  {
                    if ((*((_BYTE *)v44 + 4) - 4) > 7u)
                      LOBYTE(v41) = 0;
                    else
                      v41 = qword_1969F16F0[(char)(*((_BYTE *)v44 + 4) - 4)];
                    v30 = (-1 << v41) & v40;
                    goto LABEL_53;
                  }
LABEL_29:
                  v30 = 0;
                  goto LABEL_53;
                }
                v27 = v25 & 0x3FFFFFFFFLL;
                if (v27 + v26)
                {
                  v28 = *((_QWORD *)v44 + 3);
                  if (v28)
                  {
                    if (!*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
                      goto LABEL_51;
                    v28 = (v28 & 0x3FFFFFFFFLL) + v26;
                  }
                }
                else
                {
                  v28 = 0;
                }
                v29 = -v26;
                if ((*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && v27 == v29)
                  goto LABEL_29;
                goto LABEL_51;
              }
            }
          }
        }
        v23 = 0;
        goto LABEL_19;
      }
    }
  }
  return this;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::compressedTexImage3D(WTF::StringImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  WTF::StringImpl *v10;
  uint64_t (*v11)();
  unint64_t v19;
  _DWORD *v20;
  int v21;
  const char *v22;
  int v23;
  uint64_t v24;
  unint64_t v25;

  if (*((_BYTE *)this + 364))
    return this;
  v10 = this;
  if (*((_QWORD *)this + 122))
    v11 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
  else
    v11 = 0;
  if (!v11)
  {
    v22 = "no bound PIXEL_UNPACK_BUFFER";
    v23 = 1282;
    v24 = 29;
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v23, (uint64_t)"compressedTexImage3D", 21, (uint64_t)v22, v24);
  }
  if ((_DWORD)a2 == 32879)
  {
    v25 = *((_QWORD *)this + 26);
    if (v25 < *((unsigned int *)this + 51))
    {
      v20 = *(_DWORD **)(*((_QWORD *)this + 24) + 32 * v25 + 16);
      if (v20)
        goto LABEL_10;
      goto LABEL_16;
    }
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x195CFC1A0);
  }
  if ((_DWORD)a2 != 35866)
  {
    v22 = "invalid texture target";
    v23 = 1280;
    v24 = 23;
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v23, (uint64_t)"compressedTexImage3D", 21, (uint64_t)v22, v24);
  }
  v19 = *((_QWORD *)this + 26);
  if (v19 >= *((unsigned int *)this + 51))
    goto LABEL_20;
  v20 = *(_DWORD **)(*((_QWORD *)this + 24) + 32 * v19 + 24);
  if (!v20)
  {
LABEL_16:
    v22 = "no texture bound to target";
    this = v10;
    v23 = 1282;
    v24 = 27;
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v23, (uint64_t)"compressedTexImage3D", 21, (uint64_t)v22, v24);
  }
LABEL_10:
  v21 = v20[2];
  v20[2] = v21 + 1;
  if (v21)
    v20[2] = v21;
  else
    (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
  return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**((_QWORD **)v10 + 11) + 1376))(*((_QWORD *)v10 + 11), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::compressedTexImage3D(WTF::StringImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, JSC::ArrayBufferView *a9, unsigned int a10, unsigned int a11)
{
  WTF::StringImpl *v11;
  uint64_t (*v12)();
  const char *v13;
  int v14;
  uint64_t v15;
  unint64_t v22;
  _DWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  char v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  WTF::StringImpl *v52;

  if (*((_BYTE *)this + 364))
    return this;
  v11 = this;
  if (*((_QWORD *)this + 122))
    v12 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
  else
    v12 = 0;
  if (v12)
  {
    v13 = "a buffer is bound to PIXEL_UNPACK_BUFFER";
    v14 = 1282;
    v15 = 41;
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v14, (uint64_t)"compressedTexImage3D", 21, (uint64_t)v13, v15);
  }
  if ((_DWORD)a2 != 32879)
  {
    if ((_DWORD)a2 != 35866)
    {
      v13 = "invalid texture target";
      v14 = 1280;
      v15 = 23;
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v14, (uint64_t)"compressedTexImage3D", 21, (uint64_t)v13, v15);
    }
    v22 = *((_QWORD *)this + 26);
    if (v22 < *((unsigned int *)this + 51))
    {
      v23 = *(_DWORD **)(*((_QWORD *)this + 24) + 32 * v22 + 24);
      if (v23)
        goto LABEL_13;
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(v11, 1282, (uint64_t)"compressedTexImage3D", 21, (uint64_t)"no texture bound to target", 27);
    }
LABEL_89:
    __break(0xC471u);
    JUMPOUT(0x195CFC5E0);
  }
  v37 = *((_QWORD *)this + 26);
  if (v37 >= *((unsigned int *)this + 51))
    goto LABEL_89;
  v23 = *(_DWORD **)(*((_QWORD *)this + 24) + 32 * v37 + 16);
  if (!v23)
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(v11, 1282, (uint64_t)"compressedTexImage3D", 21, (uint64_t)"no texture bound to target", 27);
LABEL_13:
  v24 = v23[2];
  v23[2] = v24 + 1;
  if (v24)
    v23[2] = v24;
  else
    (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
  this = WebCore::WebGL2RenderingContext::sliceArrayBufferView(v11, (uint64_t)"compressedTexImage3D", 21, (uint64_t)a9, a10, a11, (uint64_t *)&v52);
  if (v52)
  {
    v25 = *((_QWORD *)v52 + 4);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 16);
      if (v26)
      {
        if ((v27 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
          || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
          || (v26 & 0x3FFFFFFFFLL) + v27)
        {
          v28 = *((_BYTE *)v52 + 6);
          if ((v28 & 3) == 0)
          {
            v29 = *((_QWORD *)v52 + 2);
            goto LABEL_23;
          }
          if (*(_BYTE *)(v25 + 64) && (v49 = *(_QWORD *)(v25 + 32)) != 0)
          {
            v38 = atomic_load((unint64_t *)(v49 + 32));
            v28 = *((_BYTE *)v52 + 6);
          }
          else
          {
            v38 = *(_QWORD *)(v25 + 48);
          }
          v39 = *((_QWORD *)v52 + 1);
          if ((v28 & 4) == 0)
          {
            v29 = *((_QWORD *)v52 + 2);
            v40 = v29 + v39 <= v38 && v38 >= v39;
            if (v40)
              LODWORD(v29) = 0;
LABEL_23:
            v30 = *((_QWORD *)v52 + 4);
            if (!v30 || (v31 = *(_QWORD *)(v30 + 16)) == 0)
            {
              v34 = 0;
              goto LABEL_33;
            }
            v32 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
            if (!v32 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
            {
              v34 = *((_QWORD *)v52 + 3);
LABEL_59:
              v43 = *((_BYTE *)v52 + 6);
              if ((v43 & 3) == 0)
              {
                v36 = *((_QWORD *)v52 + 2);
LABEL_61:
                (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _DWORD, uint64_t, uint64_t))(**((_QWORD **)v11 + 11) + 1368))(*((_QWORD **)v11 + 11), a2, a3, a4, a5, a6, a7, a8, v29, v34, v36);
                this = v52;
                if (v52)
                {
                  if (*(_DWORD *)v52 == 1)
                    return (WTF::StringImpl *)JSC::ArrayBufferView::operator delete();
                  else
                    --*(_DWORD *)v52;
                }
                return this;
              }
              if (*(_BYTE *)(v30 + 64) && (v50 = *(_QWORD *)(v30 + 32)) != 0)
              {
                v44 = atomic_load((unint64_t *)(v50 + 32));
                v43 = *((_BYTE *)v52 + 6);
              }
              else
              {
                v44 = *(_QWORD *)(v30 + 48);
              }
              v45 = *((_QWORD *)v52 + 1);
              if ((v43 & 4) == 0)
              {
                v36 = *((_QWORD *)v52 + 2);
                if (v36 + v45 <= v44 && v44 >= v45)
                  v36 = 0;
                goto LABEL_61;
              }
              v40 = v44 >= v45;
              v47 = v44 - v45;
              if (!v40)
              {
                if ((*((_BYTE *)v52 + 4) - 4) > 7u)
                  LOBYTE(v48) = 0;
                else
                  v48 = qword_1969F16F0[(char)(*((_BYTE *)v52 + 4) - 4)];
                v36 = (-1 << v48) & v47;
                goto LABEL_61;
              }
LABEL_33:
              v36 = 0;
              goto LABEL_61;
            }
            v33 = v31 & 0x3FFFFFFFFLL;
            if (v33 + v32)
            {
              v34 = *((_QWORD *)v52 + 3);
              if (v34)
              {
                if (!*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
                  goto LABEL_59;
                v34 = (v34 & 0x3FFFFFFFFLL) + v32;
              }
            }
            else
            {
              v34 = 0;
            }
            v35 = -v32;
            if ((*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && v33 == v35)
              goto LABEL_33;
            goto LABEL_59;
          }
          v40 = v38 >= v39;
          v41 = v38 - v39;
          if (!v40)
          {
            if ((*((_BYTE *)v52 + 4) - 4) > 7u)
              LOBYTE(v42) = 0;
            else
              v42 = qword_1969F16F0[(char)(*((_BYTE *)v52 + 4) - 4)];
            v29 = (-1 << v42) & v41;
            goto LABEL_23;
          }
        }
      }
    }
    LODWORD(v29) = 0;
    goto LABEL_23;
  }
  return this;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::compressedTexSubImage2D(WTF::StringImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, JSC::ArrayBufferView *a9, unsigned int a10, unsigned int a11)
{
  WTF::StringImpl *v11;
  uint64_t (*v12)();
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v45;

  if (!*((_BYTE *)this + 364))
  {
    v11 = this;
    if (*((_QWORD *)this + 122))
      v12 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
    else
      v12 = 0;
    if (v12)
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, 1282, (uint64_t)"compressedTexSubImage2D", 24, (uint64_t)"a buffer is bound to PIXEL_UNPACK_BUFFER", 41);
    WebCore::WebGLRenderingContextBase::validateTexture2DBinding(this, (uint64_t)"compressedTexSubImage2D", 24, a2, &v45);
    this = v45;
    if (v45)
    {
      if (*((_DWORD *)v45 + 2) == 1)
        (*(void (**)(void))(*(_QWORD *)v45 + 8))();
      else
        --*((_DWORD *)v45 + 2);
      this = WebCore::WebGL2RenderingContext::sliceArrayBufferView(v11, (uint64_t)"compressedTexSubImage2D", 24, (uint64_t)a9, a10, a11, (uint64_t *)&v45);
      if (v45)
      {
        v19 = *((_QWORD *)v45 + 4);
        if (v19)
        {
          v20 = *(_QWORD *)(v19 + 16);
          if (v20)
          {
            if ((v21 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
              || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
              || (v20 & 0x3FFFFFFFFLL) + v21)
            {
              v22 = *((_BYTE *)v45 + 6);
              if ((v22 & 3) == 0)
              {
                v23 = *((_QWORD *)v45 + 2);
                goto LABEL_19;
              }
              if (*(_BYTE *)(v19 + 64) && (v42 = *(_QWORD *)(v19 + 32)) != 0)
              {
                v31 = atomic_load((unint64_t *)(v42 + 32));
                v22 = *((_BYTE *)v45 + 6);
              }
              else
              {
                v31 = *(_QWORD *)(v19 + 48);
              }
              v32 = *((_QWORD *)v45 + 1);
              if ((v22 & 4) == 0)
              {
                v23 = *((_QWORD *)v45 + 2);
                v33 = v23 + v32 <= v31 && v31 >= v32;
                if (v33)
                  LODWORD(v23) = 0;
LABEL_19:
                v24 = *((_QWORD *)v45 + 4);
                if (!v24 || (v25 = *(_QWORD *)(v24 + 16)) == 0)
                {
                  v28 = 0;
                  goto LABEL_29;
                }
                v26 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
                if (!v26 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
                {
                  v28 = *((_QWORD *)v45 + 3);
LABEL_51:
                  v36 = *((_BYTE *)v45 + 6);
                  if ((v36 & 3) == 0)
                  {
                    v30 = *((_QWORD *)v45 + 2);
LABEL_53:
                    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _DWORD, uint64_t, uint64_t))(**((_QWORD **)v11 + 11) + 1168))(*((_QWORD **)v11 + 11), a2, a3, a4, a5, a6, a7, a8, v23, v28, v30);
                    this = v45;
                    if (v45)
                    {
                      if (*(_DWORD *)v45 == 1)
                        return (WTF::StringImpl *)JSC::ArrayBufferView::operator delete();
                      else
                        --*(_DWORD *)v45;
                    }
                    return this;
                  }
                  if (*(_BYTE *)(v24 + 64) && (v43 = *(_QWORD *)(v24 + 32)) != 0)
                  {
                    v37 = atomic_load((unint64_t *)(v43 + 32));
                    v36 = *((_BYTE *)v45 + 6);
                  }
                  else
                  {
                    v37 = *(_QWORD *)(v24 + 48);
                  }
                  v38 = *((_QWORD *)v45 + 1);
                  if ((v36 & 4) == 0)
                  {
                    v30 = *((_QWORD *)v45 + 2);
                    if (v30 + v38 <= v37 && v37 >= v38)
                      v30 = 0;
                    goto LABEL_53;
                  }
                  v33 = v37 >= v38;
                  v40 = v37 - v38;
                  if (!v33)
                  {
                    if ((*((_BYTE *)v45 + 4) - 4) > 7u)
                      LOBYTE(v41) = 0;
                    else
                      v41 = qword_1969F16F0[(char)(*((_BYTE *)v45 + 4) - 4)];
                    v30 = (-1 << v41) & v40;
                    goto LABEL_53;
                  }
LABEL_29:
                  v30 = 0;
                  goto LABEL_53;
                }
                v27 = v25 & 0x3FFFFFFFFLL;
                if (v27 + v26)
                {
                  v28 = *((_QWORD *)v45 + 3);
                  if (v28)
                  {
                    if (!*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
                      goto LABEL_51;
                    v28 = (v28 & 0x3FFFFFFFFLL) + v26;
                  }
                }
                else
                {
                  v28 = 0;
                }
                v29 = -v26;
                if ((*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && v27 == v29)
                  goto LABEL_29;
                goto LABEL_51;
              }
              v33 = v31 >= v32;
              v34 = v31 - v32;
              if (!v33)
              {
                if ((*((_BYTE *)v45 + 4) - 4) > 7u)
                  LOBYTE(v35) = 0;
                else
                  v35 = qword_1969F16F0[(char)(*((_BYTE *)v45 + 4) - 4)];
                v23 = (-1 << v35) & v34;
                goto LABEL_19;
              }
            }
          }
        }
        LODWORD(v23) = 0;
        goto LABEL_19;
      }
    }
  }
  return this;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::compressedTexSubImage3D(WTF::StringImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  WTF::StringImpl *v11;
  uint64_t (*v12)();
  unsigned int v20;
  unsigned int v21;
  unint64_t v22;
  _DWORD *v23;
  int v24;
  const char *v25;
  int v26;
  uint64_t v27;
  unint64_t v28;

  if (*((_BYTE *)this + 364))
    return this;
  v11 = this;
  if (*((_QWORD *)this + 122))
    v12 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
  else
    v12 = 0;
  if (!v12)
  {
    v25 = "no bound PIXEL_UNPACK_BUFFER";
    v26 = 1282;
    v27 = 29;
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v26, (uint64_t)"compressedTexSubImage3D", 24, (uint64_t)v25, v27);
  }
  v20 = HIDWORD(a9);
  v21 = a9;
  if ((_DWORD)a2 == 32879)
  {
    v28 = *((_QWORD *)this + 26);
    if (v28 < *((unsigned int *)this + 51))
    {
      v23 = *(_DWORD **)(*((_QWORD *)this + 24) + 32 * v28 + 16);
      if (v23)
        goto LABEL_10;
      goto LABEL_16;
    }
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x195CFCB9CLL);
  }
  if ((_DWORD)a2 != 35866)
  {
    v25 = "invalid texture target";
    v26 = 1280;
    v27 = 23;
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v26, (uint64_t)"compressedTexSubImage3D", 24, (uint64_t)v25, v27);
  }
  v22 = *((_QWORD *)this + 26);
  if (v22 >= *((unsigned int *)this + 51))
    goto LABEL_20;
  v23 = *(_DWORD **)(*((_QWORD *)this + 24) + 32 * v22 + 24);
  if (!v23)
  {
LABEL_16:
    v25 = "no texture bound to target";
    this = v11;
    v26 = 1282;
    v27 = 27;
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v26, (uint64_t)"compressedTexSubImage3D", 24, (uint64_t)v25, v27);
  }
LABEL_10:
  v24 = v23[2];
  v23[2] = v24 + 1;
  if (v24)
  {
    v23[2] = v24;
  }
  else
  {
    (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
    v21 = a9;
    v20 = HIDWORD(a9);
  }
  return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(**((_QWORD **)v11 + 11) + 1392))(*((_QWORD *)v11 + 11), a2, a3, a4, a5, a6, a7, a8, __PAIR64__(v20, v21), a10, a11);
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::compressedTexSubImage3D(WTF::StringImpl *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, JSC::ArrayBufferView *a10, unsigned int a11, unsigned int a12)
{
  WTF::StringImpl *v12;
  uint64_t (*v13)();
  const char *v14;
  int v15;
  uint64_t v16;
  unint64_t v23;
  _DWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  WTF::StringImpl *v53;

  if (*((_BYTE *)this + 364))
    return this;
  v12 = this;
  if (*((_QWORD *)this + 122))
    v13 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
  else
    v13 = 0;
  if (v13)
  {
    v14 = "a buffer is bound to PIXEL_UNPACK_BUFFER";
    v15 = 1282;
    v16 = 41;
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v15, (uint64_t)"compressedTexSubImage3D", 24, (uint64_t)v14, v16);
  }
  if ((_DWORD)a2 != 32879)
  {
    if ((_DWORD)a2 != 35866)
    {
      v14 = "invalid texture target";
      v15 = 1280;
      v16 = 23;
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v15, (uint64_t)"compressedTexSubImage3D", 24, (uint64_t)v14, v16);
    }
    v23 = *((_QWORD *)this + 26);
    if (v23 < *((unsigned int *)this + 51))
    {
      v24 = *(_DWORD **)(*((_QWORD *)this + 24) + 32 * v23 + 24);
      if (v24)
        goto LABEL_13;
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(v12, 1282, (uint64_t)"compressedTexSubImage3D", 24, (uint64_t)"no texture bound to target", 27);
    }
LABEL_89:
    __break(0xC471u);
    JUMPOUT(0x195CFCFF0);
  }
  v38 = *((_QWORD *)this + 26);
  if (v38 >= *((unsigned int *)this + 51))
    goto LABEL_89;
  v24 = *(_DWORD **)(*((_QWORD *)this + 24) + 32 * v38 + 16);
  if (!v24)
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(v12, 1282, (uint64_t)"compressedTexSubImage3D", 24, (uint64_t)"no texture bound to target", 27);
LABEL_13:
  v25 = v24[2];
  v24[2] = v25 + 1;
  if (v25)
    v24[2] = v25;
  else
    (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
  this = WebCore::WebGL2RenderingContext::sliceArrayBufferView(v12, (uint64_t)"compressedTexSubImage3D", 24, (uint64_t)a10, a11, a12, (uint64_t *)&v53);
  if (v53)
  {
    v26 = *((_QWORD *)v53 + 4);
    if (v26)
    {
      v27 = *(_QWORD *)(v26 + 16);
      if (v27)
      {
        if ((v28 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
          || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
          || (v27 & 0x3FFFFFFFFLL) + v28)
        {
          v29 = *((_BYTE *)v53 + 6);
          if ((v29 & 3) == 0)
          {
            v30 = *((_QWORD *)v53 + 2);
            goto LABEL_23;
          }
          if (*(_BYTE *)(v26 + 64) && (v50 = *(_QWORD *)(v26 + 32)) != 0)
          {
            v39 = atomic_load((unint64_t *)(v50 + 32));
            v29 = *((_BYTE *)v53 + 6);
          }
          else
          {
            v39 = *(_QWORD *)(v26 + 48);
          }
          v40 = *((_QWORD *)v53 + 1);
          if ((v29 & 4) == 0)
          {
            v30 = *((_QWORD *)v53 + 2);
            v41 = v30 + v40 <= v39 && v39 >= v40;
            if (v41)
              LODWORD(v30) = 0;
LABEL_23:
            v31 = *((_QWORD *)v53 + 4);
            if (!v31 || (v32 = *(_QWORD *)(v31 + 16)) == 0)
            {
              v35 = 0;
              goto LABEL_33;
            }
            v33 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
            if (!v33 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
            {
              v35 = *((_QWORD *)v53 + 3);
LABEL_59:
              v44 = *((_BYTE *)v53 + 6);
              if ((v44 & 3) == 0)
              {
                v37 = *((_QWORD *)v53 + 2);
LABEL_61:
                (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _DWORD, uint64_t, uint64_t))(**((_QWORD **)v12 + 11) + 1384))(*((_QWORD **)v12 + 11), a2, a3, a4, a5, a6, a7, a8, a9, v30, v35, v37);
                this = v53;
                if (v53)
                {
                  if (*(_DWORD *)v53 == 1)
                    return (WTF::StringImpl *)JSC::ArrayBufferView::operator delete();
                  else
                    --*(_DWORD *)v53;
                }
                return this;
              }
              if (*(_BYTE *)(v31 + 64) && (v51 = *(_QWORD *)(v31 + 32)) != 0)
              {
                v45 = atomic_load((unint64_t *)(v51 + 32));
                v44 = *((_BYTE *)v53 + 6);
              }
              else
              {
                v45 = *(_QWORD *)(v31 + 48);
              }
              v46 = *((_QWORD *)v53 + 1);
              if ((v44 & 4) == 0)
              {
                v37 = *((_QWORD *)v53 + 2);
                if (v37 + v46 <= v45 && v45 >= v46)
                  v37 = 0;
                goto LABEL_61;
              }
              v41 = v45 >= v46;
              v48 = v45 - v46;
              if (!v41)
              {
                if ((*((_BYTE *)v53 + 4) - 4) > 7u)
                  LOBYTE(v49) = 0;
                else
                  v49 = qword_1969F16F0[(char)(*((_BYTE *)v53 + 4) - 4)];
                v37 = (-1 << v49) & v48;
                goto LABEL_61;
              }
LABEL_33:
              v37 = 0;
              goto LABEL_61;
            }
            v34 = v32 & 0x3FFFFFFFFLL;
            if (v34 + v33)
            {
              v35 = *((_QWORD *)v53 + 3);
              if (v35)
              {
                if (!*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
                  goto LABEL_59;
                v35 = (v35 & 0x3FFFFFFFFLL) + v33;
              }
            }
            else
            {
              v35 = 0;
            }
            v36 = -v33;
            if ((*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && v34 == v36)
              goto LABEL_33;
            goto LABEL_59;
          }
          v41 = v39 >= v40;
          v42 = v39 - v40;
          if (!v41)
          {
            if ((*((_BYTE *)v53 + 4) - 4) > 7u)
              LOBYTE(v43) = 0;
            else
              v43 = qword_1969F16F0[(char)(*((_BYTE *)v53 + 4) - 4)];
            v30 = (-1 << v43) & v42;
            goto LABEL_23;
          }
        }
      }
    }
    LODWORD(v30) = 0;
    goto LABEL_23;
  }
  return this;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::vertexAttribI4iv(WTF::StringImpl *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  const char *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char *v15;

  if (!*((_BYTE *)result + 364))
  {
    v4 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v4 == -1)
      goto LABEL_14;
    v6 = result;
    v15 = &v14;
    v7 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore25WebGLRenderingContextBase9TypedListIN3JSC21GenericTypedArrayViewINSB_12Int32AdaptorEEEiE4dataEvEUlRKNS6_6RefPtrISE_NS6_12RawPtrTraitsISE_EENS6_21DefaultRefDerefTraitsISE_EEEEE_JZNKSF_4dataEvEUlRKNS6_6VectorIiLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEE_EEEEEJRKNS0_6__implIJSL_SS_EEEEEEDcOT_DpOT0____fmatrix[v4])(&v15, a3);
    if (!v7)
    {
      v10 = "no array";
      v11 = v6;
      v12 = 9;
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(v11, 1281, (uint64_t)"vertexAttribI4iv", 17, (uint64_t)v10, v12);
    }
    v8 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v8 == -1)
    {
LABEL_14:
      result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
    }
    else
    {
      v9 = (_OWORD *)v7;
      v15 = &v14;
      if (((int (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore25WebGLRenderingContextBase9TypedListIN3JSC21GenericTypedArrayViewINSB_12Int32AdaptorEEEiE6lengthEvEUlRKNS6_6RefPtrISE_NS6_12RawPtrTraitsISE_EENS6_21DefaultRefDerefTraitsISE_EEEEE_JZNKSF_6lengthEvEUlRKNS6_6VectorIiLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEE_EEEEEJRKNS0_6__implIJSL_SS_EEEEEEDcOT_DpOT0____fmatrix[v8])(&v15, a3) <= 3)
      {
        v10 = "array too small";
        v11 = v6;
        v12 = 16;
        return WebCore::WebGLRenderingContextBase::synthesizeGLError(v11, 1281, (uint64_t)"vertexAttribI4iv", 17, (uint64_t)v10, v12);
      }
      if (*((_DWORD *)v6 + 41) <= a2)
      {
        v10 = "index out of range";
        v11 = v6;
        v12 = 19;
        return WebCore::WebGLRenderingContextBase::synthesizeGLError(v11, 1281, (uint64_t)"vertexAttribI4iv", 17, (uint64_t)v10, v12);
      }
      result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t, _OWORD *))(**((_QWORD **)v6 + 11) + 1528))(*((_QWORD *)v6 + 11), a2, v9);
      if (*((_DWORD *)v6 + 41) > a2)
      {
        v13 = *((_QWORD *)v6 + 19) + 20 * a2;
        *(_DWORD *)v13 = 5124;
        *(_OWORD *)(v13 + 4) = *v9;
        return result;
      }
    }
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::vertexAttribI4uiv(WTF::StringImpl *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  const char *v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char *v15;

  if (!*((_BYTE *)result + 364))
  {
    v4 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v4 == -1)
      goto LABEL_14;
    v6 = result;
    v15 = &v14;
    v7 = ((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore25WebGLRenderingContextBase9TypedListIN3JSC21GenericTypedArrayViewINSB_13Uint32AdaptorEEEjE4dataEvEUlRKNS6_6RefPtrISE_NS6_12RawPtrTraitsISE_EENS6_21DefaultRefDerefTraitsISE_EEEEE_JZNKSF_4dataEvEUlRKNS6_6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEE_EEEEEJRKNS0_6__implIJSL_SS_EEEEEEDcOT_DpOT0____fmatrix[v4])(&v15, a3);
    if (!v7)
    {
      v10 = "no array";
      v11 = v6;
      v12 = 9;
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(v11, 1281, (uint64_t)"vertexAttribI4uiv", 18, (uint64_t)v10, v12);
    }
    v8 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v8 == -1)
    {
LABEL_14:
      result = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
    }
    else
    {
      v9 = (_OWORD *)v7;
      v15 = &v14;
      if (((int (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore25WebGLRenderingContextBase9TypedListIN3JSC21GenericTypedArrayViewINSB_13Uint32AdaptorEEEjE6lengthEvEUlRKNS6_6RefPtrISE_NS6_12RawPtrTraitsISE_EENS6_21DefaultRefDerefTraitsISE_EEEEE_JZNKSF_6lengthEvEUlRKNS6_6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEE_EEEEEJRKNS0_6__implIJSL_SS_EEEEEEDcOT_DpOT0____fmatrix[v8])(&v15, a3) <= 3)
      {
        v10 = "array too small";
        v11 = v6;
        v12 = 16;
        return WebCore::WebGLRenderingContextBase::synthesizeGLError(v11, 1281, (uint64_t)"vertexAttribI4uiv", 18, (uint64_t)v10, v12);
      }
      if (*((_DWORD *)v6 + 41) <= a2)
      {
        v10 = "index out of range";
        v11 = v6;
        v12 = 19;
        return WebCore::WebGLRenderingContextBase::synthesizeGLError(v11, 1281, (uint64_t)"vertexAttribI4uiv", 18, (uint64_t)v10, v12);
      }
      result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t, _OWORD *))(**((_QWORD **)v6 + 11) + 1544))(*((_QWORD *)v6 + 11), a2, v9);
      if (*((_DWORD *)v6 + 41) > a2)
      {
        v13 = *((_QWORD *)v6 + 19) + 20 * a2;
        *(_DWORD *)v13 = 5125;
        *(_OWORD *)(v13 + 4) = *v9;
        return result;
      }
    }
    __break(0xC471u);
  }
  return result;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::vertexAttribIPointer(WebCore::WebGL2RenderingContext *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  WTF::StringImpl *result;
  const char *v14;
  WTF::StringImpl *v15;
  int v16;
  uint64_t v17;
  uint64_t (*v18)();
  int v19;
  int v20;
  WTF::Lock *v21;
  char v22;

  result = (WebCore::WebGL2RenderingContext *)((char *)this + 96);
  v21 = result;
  v22 = 1;
  if (__ldaxr((unsigned __int8 *)result))
  {
    __clrex();
LABEL_4:
    result = (WTF::StringImpl *)MEMORY[0x19AEA534C]();
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)result))
    goto LABEL_4;
LABEL_5:
  if (*((_BYTE *)this + 364))
    goto LABEL_27;
  if ((a4 - 5120) >= 7)
    goto LABEL_25;
  if (*((_DWORD *)this + 41) <= a2)
  {
    v14 = "index out of range";
    v15 = this;
    v16 = 1281;
    v17 = 19;
    goto LABEL_26;
  }
  if ((a3 - 5) <= 0xFFFFFFFB)
  {
    v14 = "bad size";
    v15 = this;
    v16 = 1281;
    v17 = 9;
LABEL_26:
    result = WebCore::WebGLRenderingContextBase::synthesizeGLError(v15, v16, (uint64_t)"vertexAttribIPointer", 21, (uint64_t)v14, v17);
    goto LABEL_27;
  }
  if (a5 >= 0x100)
  {
    v14 = "bad stride";
LABEL_15:
    v15 = this;
    v16 = 1281;
    v17 = 11;
    goto LABEL_26;
  }
  if (a6 >> 31)
  {
    v14 = "bad offset";
    goto LABEL_15;
  }
  v18 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
  if (!*((_QWORD *)this + 15))
    v18 = 0;
  if (a6 && !v18)
  {
    v14 = "no bound ARRAY_BUFFER";
    v15 = this;
    v16 = 1282;
    v17 = 22;
    goto LABEL_26;
  }
  if ((a4 - 5120) >= 7)
  {
LABEL_25:
    v14 = "invalid type";
    v15 = this;
    v16 = 1280;
    v17 = 13;
    goto LABEL_26;
  }
  v19 = dword_1969F16D0[(int)a4 - 5120];
  if (a5 % v19 || ((v19 - 1) & a6) != 0)
  {
    v14 = "stride or offset not valid for type";
    v15 = this;
    v16 = 1282;
    v17 = 36;
    goto LABEL_26;
  }
  WebCore::WebGLVertexArrayObjectBase::setVertexAttribState(*((_QWORD *)this + 18), (uint64_t)&v21, a2, v19 * a3, a3, a4, 0, a5, a6, 1, *((_DWORD **)this + 15));
  result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))(**((_QWORD **)this + 11) + 1552))(*((_QWORD *)this + 11), a2, a3, a4, a5, a6);
LABEL_27:
  if (v22)
  {
    result = v21;
    v20 = __ldxr((unsigned __int8 *)v21);
    if (v20 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v21))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::StringImpl *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WebCore::WebGL2RenderingContext::drawRangeElements(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __n128 a8, __n128 a9, __n128 a10, __n128 a11)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)();
  unsigned int v23;
  unsigned int v24;
  int32x2_t *v26;
  WebCore::InspectorInstrumentation *v27;
  WebCore::ScriptExecutionContext *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)();
  WTF::StringImpl *v37;
  uint64_t v38;
  float32x2_t v39;
  uint64_t v40;
  __int128 v41;
  char v42;
  uint64_t v43;

  if (*(_BYTE *)(this + 364))
    return this;
  v17 = this;
  v18 = *(_QWORD *)(this + 144);
  if (*(_BYTE *)(v18 + 73))
  {
    if (!*(_BYTE *)(v18 + 72))
      return (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)this, 1282, (uint64_t)"drawRangeElements", 18, (uint64_t)"no buffer is bound to enabled attribute", 40);
  }
  else
  {
    v19 = *(unsigned int *)(v18 + 68);
    if ((_DWORD)v19)
    {
      v20 = 56 * v19;
      v21 = *(_QWORD *)(v18 + 56) + 8;
      while (1)
      {
        if (*(_BYTE *)(v21 - 8))
        {
          v22 = *(_QWORD *)v21
              ? WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance
              : 0;
          if (!v22 || !*(_DWORD *)(*(_QWORD *)v21 + 24))
            break;
        }
        v21 += 56;
        v20 -= 56;
        if (!v20)
          goto LABEL_15;
      }
      *(_WORD *)(v18 + 72) = 256;
      return (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)this, 1282, (uint64_t)"drawRangeElements", 18, (uint64_t)"no buffer is bound to enabled attribute", 40);
    }
LABEL_15:
    *(_WORD *)(v18 + 72) = 257;
  }
  if (!*(_QWORD *)(this + 168)
    || (v23 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter)) == 0
    || (v37 = *(WTF::StringImpl **)(this + 168),
        (v27 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 40) + 144))(*(_QWORD *)(this + 40))) == 0)
    || (v29 = WebCore::InspectorInstrumentation::instrumentingAgents(v27, v28)) == 0
    || (v30 = *(_QWORD *)(v29 + 96)) == 0
    || (this = WebCore::InspectorCanvasAgent::isWebGLProgramDisabled(v30, v37), (this & 1) == 0))
  {
    WebCore::WebGLRenderingContextBase::clearIfComposited(v17, 0, 0, a8, a9, a10, a11);
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = xmmword_1969F12B0;
    v42 = 0;
    if (*(_QWORD *)(v17 + 168)
      && (v24 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter)) != 0
      && (v31 = *(WTF::StringImpl **)(v17 + 168),
          (v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40))) != 0)
      && (v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33)) != 0
      && (v35 = *(_QWORD *)(v34 + 96)) != 0
      && WebCore::InspectorCanvasAgent::isWebGLProgramHighlighted(v35, v31)
      && (*(_QWORD *)(v17 + 176)
        ? (v36 = WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance)
        : (v36 = 0),
          !v36))
    {
      v43 = v17;
      WebCore::ScopedInspectorShaderProgramHighlight::showHighlight((WebCore::ScopedInspectorShaderProgramHighlight *)&v38);
    }
    else
    {
      v43 = 0;
    }
    this = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v17 + 88) + 1560))(*(_QWORD *)(v17 + 88), a2, a3, a4, a5, a6, a7);
    if (v43)
      this = WebCore::ScopedInspectorShaderProgramHighlight::hideHighlight((WebCore::ScopedInspectorShaderProgramHighlight *)&v38);
    if (!*(_BYTE *)(v17 + 425)
      && !(*(_QWORD *)(v17 + 176)
         ? WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance
         : 0))
    {
      *(_BYTE *)(v17 + 432) = 1;
      if (*(_BYTE *)(v17 + 434))
        *(_BYTE *)(v17 + 434) = 0;
      v26 = *(int32x2_t **)(v17 + 40);
      v38 = 0;
      v39 = vcvt_f32_s32(v26[1]);
      LOBYTE(v40) = 1;
      return (*(uint64_t (**)(int32x2_t *, uint64_t *, _QWORD))(*(_QWORD *)v26 + 104))(v26, &v38, 0);
    }
  }
  return this;
}

WTF *WebCore::WebGL2RenderingContext::drawBuffers(WTF *result, unsigned int *a2)
{
  WTF *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v11;
  uint64_t v12;
  uint64_t (*v13)();
  int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t i;
  uint64_t v19;
  unsigned int v20;
  int v22;
  int v23;
  int v24;

  if (!*((_BYTE *)result + 364))
  {
    v3 = result;
    v4 = a2[3];
    v5 = *(unsigned int **)a2;
    if ((int)v4 < 1)
    {
LABEL_14:
      if (*((_QWORD *)v3 + 22))
        v13 = WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance;
      else
        v13 = 0;
      if (v13)
      {
        v14 = *((_DWORD *)v3 + 70);
        if (!v14)
        {
          v15 = *((_QWORD *)v3 + 11);
          v24 = 0;
          (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)v15 + 472))(v15, 34852, &v24, 1);
          v14 = v24;
          *((_DWORD *)v3 + 70) = v24;
        }
        if (v14 >= (int)v4)
        {
          if ((int)v4 < 1)
          {
            return WebCore::WebGLFramebuffer::drawBuffers(*((_QWORD *)v3 + 22), (WTF *)a2);
          }
          else
          {
            for (i = 36064; ; ++i)
            {
              v20 = *v5++;
              v19 = v20;
              if (v20 && i != v19)
                break;
              if (!--v4)
                return WebCore::WebGLFramebuffer::drawBuffers(*((_QWORD *)v3 + 22), (WTF *)a2);
            }
            return WebCore::WebGLRenderingContextBase::synthesizeGLError(v3, 1282, (uint64_t)"drawBuffers", 12, (uint64_t)"COLOR_ATTACHMENTi or NONE", 26);
          }
        }
        else
        {
          return WebCore::WebGLRenderingContextBase::synthesizeGLError(v3, 1281, (uint64_t)"drawBuffers", 12, (uint64_t)"more than max draw buffers", 27);
        }
      }
      else if ((_DWORD)v4 == 1)
      {
        v16 = *v5;
        if (*v5 && v16 != 1029)
        {
          return WebCore::WebGLRenderingContextBase::synthesizeGLError(v3, 1282, (uint64_t)"drawBuffers", 12, (uint64_t)"BACK or NONE", 13);
        }
        else
        {
          if (v16 == 1029)
            v17 = 36064;
          else
            v17 = 0;
          v22 = v17;
          result = (WTF *)(*(uint64_t (**)(_QWORD, int *, uint64_t))(**((_QWORD **)v3 + 11) + 1568))(*((_QWORD *)v3 + 11), &v22, 1);
          *((_DWORD *)v3 + 72) = *v5;
        }
      }
      else
      {
        return WebCore::WebGLRenderingContextBase::synthesizeGLError(v3, 1282, (uint64_t)"drawBuffers", 12, (uint64_t)"more than one buffer", 21);
      }
    }
    else
    {
      v6 = *(unsigned int **)a2;
      v7 = a2[3];
      while (1)
      {
        v9 = *v6++;
        v8 = v9;
        if (v9)
        {
          if (v8 != 1029 && v8 != 36064)
          {
            if (v8 < 0x8CE1)
              break;
            v11 = *((_DWORD *)v3 + 71);
            if (!v11)
            {
              v12 = *((_QWORD *)v3 + 11);
              v23 = 0;
              (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(*(_QWORD *)v12 + 472))(v12, 34852, &v23, 1);
              v11 = v23;
              *((_DWORD *)v3 + 71) = v23;
            }
            if (v8 >= v11 + 36064)
              break;
          }
        }
        if (!--v7)
          goto LABEL_14;
      }
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(v3, 1280, (uint64_t)"drawBuffers", 12, (uint64_t)"invalid buffer", 15);
    }
  }
  return result;
}

uint64_t WebCore::WebGL2RenderingContext::maxColorAttachments(WebCore::WebGL2RenderingContext *this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int v4;

  result = *((unsigned int *)this + 71);
  if (!(_DWORD)result)
  {
    v3 = *((_QWORD *)this + 11);
    v4 = 0;
    (*(void (**)(uint64_t, uint64_t, unsigned int *, uint64_t))(*(_QWORD *)v3 + 472))(v3, 34852, &v4, 1);
    result = v4;
    *((_DWORD *)this + 71) = v4;
  }
  return result;
}

uint64_t WebCore::WebGL2RenderingContext::maxDrawBuffers(WebCore::WebGL2RenderingContext *this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int v4;

  result = *((unsigned int *)this + 70);
  if (!(_DWORD)result)
  {
    v3 = *((_QWORD *)this + 11);
    v4 = 0;
    (*(void (**)(uint64_t, uint64_t, unsigned int *, uint64_t))(*(_QWORD *)v3 + 472))(v3, 34852, &v4, 1);
    result = v4;
    *((_DWORD *)this + 70) = v4;
  }
  return result;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::validateClearBuffer<int,JSC::GenericTypedArrayView<JSC::Int32Adaptor>>@<X0>(WTF::StringImpl *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, unsigned int a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  unint64_t v15;
  uint64_t v16;
  WTF::StringImpl *result;
  char v18;
  const char *v19;
  WTF::StringImpl *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char *v28;

  v8 = *(unsigned int *)(a5 + 16);
  if ((_DWORD)v8 == -1)
    goto LABEL_15;
  v28 = &v27;
  v15 = ((int (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore25WebGLRenderingContextBase9TypedListIN3JSC21GenericTypedArrayViewINSB_12Int32AdaptorEEEiE6lengthEvEUlRKNS6_6RefPtrISE_NS6_12RawPtrTraitsISE_EENS6_21DefaultRefDerefTraitsISE_EEEEE_JZNKSF_6lengthEvEUlRKNS6_6VectorIiLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEE_EEEEEJRKNS0_6__implIJSL_SS_EEEEEEDcOT_DpOT0____fmatrix[v8])(&v28, a5)- (unint64_t)a6;
  if (v15 != (int)v15)
    goto LABEL_9;
  if ((a4 - 6145) >= 2)
  {
    if (a4 != 6144)
    {
      v19 = "invalid buffer";
      v20 = a1;
      v21 = 1280;
      v22 = a2;
      v23 = a3;
      v24 = 15;
      goto LABEL_10;
    }
    if ((int)v15 > 3)
    {
      v25 = *(unsigned int *)(a5 + 16);
      if ((_DWORD)v25 != -1)
      {
        v28 = &v27;
        result = (WTF::StringImpl *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore25WebGLRenderingContextBase9TypedListIN3JSC21GenericTypedArrayViewINSB_12Int32AdaptorEEEiE4dataEvEUlRKNS6_6RefPtrISE_NS6_12RawPtrTraitsISE_EENS6_21DefaultRefDerefTraitsISE_EEEEE_JZNKSF_4dataEvEUlRKNS6_6VectorIiLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEE_EEEEEJRKNS0_6__implIJSL_SS_EEEEEEDcOT_DpOT0____fmatrix[v25])(&v28, a5);
        *(_QWORD *)a7 = (char *)result + 4 * a6;
        *(_QWORD *)(a7 + 8) = 4;
        v18 = 1;
        goto LABEL_11;
      }
      goto LABEL_15;
    }
LABEL_9:
    v19 = "invalid array size / srcOffset";
    v20 = a1;
    v21 = 1281;
    v22 = a2;
    v23 = a3;
    v24 = 31;
LABEL_10:
    result = WebCore::WebGLRenderingContextBase::synthesizeGLError(v20, v21, v22, v23, (uint64_t)v19, v24);
    v18 = 0;
    *(_BYTE *)a7 = 0;
    goto LABEL_11;
  }
  if ((int)v15 <= 0)
    goto LABEL_9;
  v16 = *(unsigned int *)(a5 + 16);
  if ((_DWORD)v16 != -1)
  {
    v28 = &v27;
    result = (WTF::StringImpl *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore25WebGLRenderingContextBase9TypedListIN3JSC21GenericTypedArrayViewINSB_12Int32AdaptorEEEiE4dataEvEUlRKNS6_6RefPtrISE_NS6_12RawPtrTraitsISE_EENS6_21DefaultRefDerefTraitsISE_EEEEE_JZNKSF_4dataEvEUlRKNS6_6VectorIiLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEE_EEEEEJRKNS0_6__implIJSL_SS_EEEEEEDcOT_DpOT0____fmatrix[v16])(&v28, a5);
    v18 = 1;
    *(_QWORD *)a7 = (char *)result + 4 * a6;
    *(_QWORD *)(a7 + 8) = 1;
LABEL_11:
    *(_BYTE *)(a7 + 16) = v18;
    return result;
  }
LABEL_15:
  v26 = std::__throw_bad_variant_access[abi:sn180100]();
  return (WTF::StringImpl *)WebCore::WebGL2RenderingContext::validateClearBuffer<unsigned int,JSC::GenericTypedArrayView<JSC::Uint32Adaptor>>(v26);
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::validateClearBuffer<unsigned int,JSC::GenericTypedArrayView<JSC::Uint32Adaptor>>@<X0>(WTF::StringImpl *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, unsigned int a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  unint64_t v15;
  uint64_t v16;
  WTF::StringImpl *result;
  char v18;
  const char *v19;
  WTF::StringImpl *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char *v28;

  v8 = *(unsigned int *)(a5 + 16);
  if ((_DWORD)v8 == -1)
    goto LABEL_15;
  v28 = &v27;
  v15 = ((int (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore25WebGLRenderingContextBase9TypedListIN3JSC21GenericTypedArrayViewINSB_13Uint32AdaptorEEEjE6lengthEvEUlRKNS6_6RefPtrISE_NS6_12RawPtrTraitsISE_EENS6_21DefaultRefDerefTraitsISE_EEEEE_JZNKSF_6lengthEvEUlRKNS6_6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEE_EEEEEJRKNS0_6__implIJSL_SS_EEEEEEDcOT_DpOT0____fmatrix[v8])(&v28, a5)- (unint64_t)a6;
  if (v15 != (int)v15)
    goto LABEL_9;
  if ((a4 - 6145) >= 2)
  {
    if (a4 != 6144)
    {
      v19 = "invalid buffer";
      v20 = a1;
      v21 = 1280;
      v22 = a2;
      v23 = a3;
      v24 = 15;
      goto LABEL_10;
    }
    if ((int)v15 > 3)
    {
      v25 = *(unsigned int *)(a5 + 16);
      if ((_DWORD)v25 != -1)
      {
        v28 = &v27;
        result = (WTF::StringImpl *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore25WebGLRenderingContextBase9TypedListIN3JSC21GenericTypedArrayViewINSB_13Uint32AdaptorEEEjE4dataEvEUlRKNS6_6RefPtrISE_NS6_12RawPtrTraitsISE_EENS6_21DefaultRefDerefTraitsISE_EEEEE_JZNKSF_4dataEvEUlRKNS6_6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEE_EEEEEJRKNS0_6__implIJSL_SS_EEEEEEDcOT_DpOT0____fmatrix[v25])(&v28, a5);
        *(_QWORD *)a7 = (char *)result + 4 * a6;
        *(_QWORD *)(a7 + 8) = 4;
        v18 = 1;
        goto LABEL_11;
      }
      goto LABEL_15;
    }
LABEL_9:
    v19 = "invalid array size / srcOffset";
    v20 = a1;
    v21 = 1281;
    v22 = a2;
    v23 = a3;
    v24 = 31;
LABEL_10:
    result = WebCore::WebGLRenderingContextBase::synthesizeGLError(v20, v21, v22, v23, (uint64_t)v19, v24);
    v18 = 0;
    *(_BYTE *)a7 = 0;
    goto LABEL_11;
  }
  if ((int)v15 <= 0)
    goto LABEL_9;
  v16 = *(unsigned int *)(a5 + 16);
  if ((_DWORD)v16 != -1)
  {
    v28 = &v27;
    result = (WTF::StringImpl *)((uint64_t (*)(char **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore25WebGLRenderingContextBase9TypedListIN3JSC21GenericTypedArrayViewINSB_13Uint32AdaptorEEEjE4dataEvEUlRKNS6_6RefPtrISE_NS6_12RawPtrTraitsISE_EENS6_21DefaultRefDerefTraitsISE_EEEEE_JZNKSF_4dataEvEUlRKNS6_6VectorIjLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEEE_EEEEEJRKNS0_6__implIJSL_SS_EEEEEEDcOT_DpOT0____fmatrix[v16])(&v28, a5);
    v18 = 1;
    *(_QWORD *)a7 = (char *)result + 4 * a6;
    *(_QWORD *)(a7 + 8) = 1;
LABEL_11:
    *(_BYTE *)(a7 + 16) = v18;
    return result;
  }
LABEL_15:
  v26 = std::__throw_bad_variant_access[abi:sn180100]();
  return (WTF::StringImpl *)WebCore::WebGL2RenderingContext::clearBufferfv(v26);
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::clearBufferfv(WTF::StringImpl *result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  __n128 v11;
  int32x2_t *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD v21[2];
  char v22;
  _QWORD v23[2];
  char v24;

  if (!*((_BYTE *)result + 364))
  {
    v7 = (uint64_t)result;
    result = WebCore::WebGL2RenderingContext::validateClearBuffer<float,JSC::GenericTypedArrayView<JSC::Float32Adaptor>>(result, (uint64_t)"clearBufferfv", 14, a2, a4, a5, (uint64_t)v21);
    if (v22)
    {
      WebCore::WebGLRenderingContextBase::clearIfComposited(v7, 0, 0, v8, v9, v10, v11);
      if (v22)
      {
        result = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v7 + 88) + 1592))(*(_QWORD *)(v7 + 88), a2, a3, v21[0], v21[1]);
        if (!*(_BYTE *)(v7 + 425)
          && !(*(_QWORD *)(v7 + 176)
             ? WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance
             : 0))
        {
          *(_BYTE *)(v7 + 432) = 1;
          if (*(_BYTE *)(v7 + 434))
            *(_BYTE *)(v7 + 434) = 0;
          v13 = *(int32x2_t **)(v7 + 40);
          v23[0] = 0;
          v23[1] = vcvt_f32_s32(v13[1]);
          v24 = 1;
          return (WTF::StringImpl *)(*(uint64_t (**)(int32x2_t *, _QWORD *, _QWORD))(*(_QWORD *)v13 + 104))(v13, v23, 0);
        }
      }
      else
      {
        v14 = (WTF::StringImpl *)std::__throw_bad_optional_access[abi:sn180100]();
        return WebCore::WebGL2RenderingContext::validateClearBuffer<float,JSC::GenericTypedArrayView<JSC::Float32Adaptor>>(v14, v15, v16, v17, v18, v19, v20);
      }
    }
  }
  return result;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::validateClearBuffer<float,JSC::GenericTypedArrayView<JSC::Float32Adaptor>>@<X0>(WTF::StringImpl *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, unsigned int a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  unint64_t v15;
  uint64_t v16;
  WTF::StringImpl *result;
  char v18;
  const char *v19;
  WTF::StringImpl *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::WebGL2RenderingContext *v26;
  WebCore::WebGLQuery *v27;
  char v28;
  char *v29;

  v8 = *(unsigned int *)(a5 + 16);
  if ((_DWORD)v8 == -1)
    goto LABEL_15;
  v29 = &v28;
  v15 = ((int (*)(char **, uint64_t))off_1E33DDF10[v8])(&v29, a5) - (unint64_t)a6;
  if (v15 != (int)v15)
    goto LABEL_9;
  if ((a4 - 6145) >= 2)
  {
    if (a4 != 6144)
    {
      v19 = "invalid buffer";
      v20 = a1;
      v21 = 1280;
      v22 = a2;
      v23 = a3;
      v24 = 15;
      goto LABEL_10;
    }
    if ((int)v15 > 3)
    {
      v25 = *(unsigned int *)(a5 + 16);
      if ((_DWORD)v25 != -1)
      {
        v29 = &v28;
        result = (WTF::StringImpl *)((uint64_t (*)(char **, uint64_t))off_1E33DDF20[v25])(&v29, a5);
        *(_QWORD *)a7 = (char *)result + 4 * a6;
        *(_QWORD *)(a7 + 8) = 4;
        v18 = 1;
        goto LABEL_11;
      }
      goto LABEL_15;
    }
LABEL_9:
    v19 = "invalid array size / srcOffset";
    v20 = a1;
    v21 = 1281;
    v22 = a2;
    v23 = a3;
    v24 = 31;
LABEL_10:
    result = WebCore::WebGLRenderingContextBase::synthesizeGLError(v20, v21, v22, v23, (uint64_t)v19, v24);
    v18 = 0;
    *(_BYTE *)a7 = 0;
    goto LABEL_11;
  }
  if ((int)v15 <= 0)
    goto LABEL_9;
  v16 = *(unsigned int *)(a5 + 16);
  if ((_DWORD)v16 != -1)
  {
    v29 = &v28;
    result = (WTF::StringImpl *)((uint64_t (*)(char **, uint64_t))off_1E33DDF20[v16])(&v29, a5);
    v18 = 1;
    *(_QWORD *)a7 = (char *)result + 4 * a6;
    *(_QWORD *)(a7 + 8) = 1;
LABEL_11:
    *(_BYTE *)(a7 + 16) = v18;
    return result;
  }
LABEL_15:
  v26 = (WebCore::WebGL2RenderingContext *)std::__throw_bad_variant_access[abi:sn180100]();
  return (WTF::StringImpl *)WebCore::WebGL2RenderingContext::deleteQuery(v26, v27);
}

WTF::Lock *WebCore::WebGL2RenderingContext::deleteQuery(WebCore::WebGL2RenderingContext *this, WebCore::WebGLQuery *a2)
{
  WTF::Lock *result;
  WebCore::WebGL2RenderingContext *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  int v10;
  char *v11;
  _DWORD *v12;
  WTF::Lock *v13;
  char v14;

  result = (WebCore::WebGL2RenderingContext *)((char *)this + 96);
  v13 = result;
  v14 = 1;
  if (__ldaxr((unsigned __int8 *)result))
  {
    __clrex();
LABEL_4:
    result = (WTF::Lock *)MEMORY[0x19AEA534C]();
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)result))
    goto LABEL_4;
LABEL_5:
  if (a2 && !*((_BYTE *)this + 364) && *((_DWORD *)a2 + 6))
  {
    v6 = (WebCore::WebGL2RenderingContext *)*((_QWORD *)a2 + 2);
    if (v6)
    {
      v7 = *((_QWORD *)v6 + 1);
      if (v7)
        v6 = (WebCore::WebGL2RenderingContext *)(v7 - 8);
      else
        v6 = 0;
    }
    if (v6 != this)
    {
      v8 = "object does not belong to this context";
      v9 = 39;
LABEL_16:
      result = WebCore::WebGLRenderingContextBase::synthesizeGLError(this, 1282, (uint64_t)"deleteQuery", 12, (uint64_t)v8, v9);
      goto LABEL_17;
    }
    if (*((_BYTE *)a2 + 32))
    {
      v8 = "attempt to use a deleted object";
      v9 = 32;
      goto LABEL_16;
    }
    if (!*((_DWORD *)a2 + 9))
      goto LABEL_34;
    if (*((WebCore::WebGLQuery **)this + 127) == a2)
    {
      v11 = (char *)this + 1016;
    }
    else if (*((WebCore::WebGLQuery **)this + 128) == a2)
    {
      v11 = (char *)this + 1024;
    }
    else
    {
      if (*((WebCore::WebGLQuery **)this + 129) != a2)
      {
LABEL_34:
        result = (WTF::Lock *)WebCore::WebGLRenderingContextBase::deleteObject((uint64_t)this, (uint64_t)&v13, a2);
        goto LABEL_17;
      }
      v11 = (char *)this + 1032;
    }
    (*(void (**)(_QWORD))(**((_QWORD **)this + 11) + 1640))(*((_QWORD *)this + 11));
    v12 = *(_DWORD **)v11;
    *(_QWORD *)v11 = 0;
    if (v12)
    {
      if (v12[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
      else
        --v12[2];
    }
    goto LABEL_34;
  }
LABEL_17:
  if (v14)
  {
    result = v13;
    v10 = __ldxr((unsigned __int8 *)v13);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::beginQuery(WTF::StringImpl *this, uint64_t a2, WebCore::WebGLQuery *a3)
{
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  if (!*((_BYTE *)this + 364))
  {
    v5 = (uint64_t)this;
    v6 = (unsigned __int8 *)this + 96;
    if (__ldaxr((unsigned __int8 *)this + 96))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C]((char *)this + 96);
LABEL_6:
    v8 = *((_QWORD *)a3 + 2);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (v9)
        v8 = v9 - 8;
      else
        v8 = 0;
    }
    if (v8 != v5)
    {
      v10 = "object does not belong to this context";
      v11 = 39;
LABEL_12:
      v12 = (WTF::StringImpl *)v5;
      v13 = 1282;
      goto LABEL_13;
    }
    v10 = "attempt to use a deleted object";
    v11 = 32;
    if (!*((_DWORD *)a3 + 6) || *((_BYTE *)a3 + 32))
      goto LABEL_12;
    v15 = 0;
    if ((int)a2 > 35975)
    {
      if ((_DWORD)a2 != 36202)
      {
        if ((_DWORD)a2 != 35976)
        {
LABEL_35:
          v10 = "invalid target";
          v12 = (WTF::StringImpl *)v5;
          v13 = 1280;
          v11 = 15;
          goto LABEL_13;
        }
        v15 = 1;
      }
    }
    else if ((_DWORD)a2 == 35007)
    {
      if (!*(_QWORD *)(v5 + 504))
      {
        v10 = "invalid target, EXT_disjoint_timer_query_webgl2 not enabled";
        v12 = (WTF::StringImpl *)v5;
        v13 = 1280;
        v11 = 60;
        goto LABEL_13;
      }
      v15 = 2;
    }
    else if ((_DWORD)a2 != 35887)
    {
      goto LABEL_35;
    }
    v16 = *((_DWORD *)a3 + 9);
    if (!v16 || v16 == (_DWORD)a2)
    {
      v17 = v5 + 8 * v15;
      if (!*(_QWORD *)(v17 + 1016))
      {
        ++*((_DWORD *)a3 + 2);
        *(_QWORD *)(v17 + 1016) = a3;
        this = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 88) + 1632))(*(_QWORD *)(v5 + 88), a2);
        *((_DWORD *)a3 + 9) = a2;
LABEL_14:
        v14 = __ldxr(v6);
        if (v14 == 1)
        {
          if (!__stlxr(0, v6))
            return this;
        }
        else
        {
          __clrex();
        }
        return (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
      }
      v10 = "query object of target is already active";
      v12 = (WTF::StringImpl *)v5;
      v13 = 1282;
      v11 = 41;
    }
    else
    {
      v10 = "query type does not match target";
      v12 = (WTF::StringImpl *)v5;
      v13 = 1282;
      v11 = 33;
    }
LABEL_13:
    this = WebCore::WebGLRenderingContextBase::synthesizeGLError(v12, v13, (uint64_t)"beginQuery", 11, (uint64_t)v10, v11);
    goto LABEL_14;
  }
  return this;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::endQuery(WTF::StringImpl *this, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  const char *v16;
  WTF::StringImpl *v17;
  int v18;
  uint64_t v19;
  WTF::StringImpl *v20;

  v3 = (uint64_t)this;
  v4 = (unsigned __int8 *)this + 96;
  if (__ldaxr((unsigned __int8 *)this + 96))
  {
    __clrex();
LABEL_4:
    this = (WTF::StringImpl *)MEMORY[0x19AEA534C]((char *)this + 96);
    goto LABEL_5;
  }
  if (__stxr(1u, v4))
    goto LABEL_4;
LABEL_5:
  if (!*(_BYTE *)(v3 + 364))
  {
    v7 = *(_QWORD *)(v3 + 56);
    if (v7)
    {
      if (*(_QWORD *)(v7 + 8))
      {
        v8 = 0;
        if ((int)a2 > 35975)
        {
          if ((_DWORD)a2 != 36202)
          {
            if ((_DWORD)a2 != 35976)
            {
LABEL_29:
              v16 = "invalid target";
              v17 = (WTF::StringImpl *)v3;
              v18 = 1280;
              v19 = 15;
              goto LABEL_31;
            }
            v8 = 1;
          }
        }
        else if ((_DWORD)a2 == 35007)
        {
          if (!*(_QWORD *)(v3 + 504))
          {
            v16 = "invalid target, EXT_disjoint_timer_query_webgl2 not enabled";
            v17 = (WTF::StringImpl *)v3;
            v18 = 1280;
            v19 = 60;
            goto LABEL_31;
          }
          v8 = 2;
        }
        else if ((_DWORD)a2 != 35887)
        {
          goto LABEL_29;
        }
        v9 = v3 + 8 * v8;
        if (!*(_QWORD *)(v9 + 1016))
        {
          v16 = "query object of target is not active";
          v17 = (WTF::StringImpl *)v3;
          v18 = 1282;
          v19 = 37;
LABEL_31:
          this = WebCore::WebGLRenderingContextBase::synthesizeGLError(v17, v18, (uint64_t)"endQuery", 9, (uint64_t)v16, v19);
          goto LABEL_6;
        }
        v10 = (uint64_t *)(v9 + 1016);
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v3 + 88) + 1640))(*(_QWORD *)(v3 + 88), a2);
        v11 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 8);
        if (v11)
          v12 = v11 - 96;
        else
          v12 = 0;
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 104))(v12);
        v14 = *v10;
        *v10 = 0;
        v15 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)0x10);
        *(_QWORD *)v15 = &off_1E33DDF40;
        *((_QWORD *)v15 + 1) = v14;
        v20 = v15;
        WebCore::EventLoopTaskGroup::queueMicrotask(v13, (uint64_t *)&v20);
        this = v20;
        if (v20)
          this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)v20 + 8))(v20);
      }
    }
  }
LABEL_6:
  v6 = __ldxr(v4);
  if (v6 != 1)
  {
    __clrex();
    return (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  }
  if (__stlxr(0, v4))
    return (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
  return this;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::getQuery@<X0>(WTF::StringImpl *this@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, _DWORD *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  int v10;
  int v11;

  if (*((_BYTE *)this + 364))
    goto LABEL_2;
  v6 = *((_QWORD *)this + 7);
  if (!v6 || !*(_QWORD *)(v6 + 8))
    goto LABEL_2;
  v7 = 0;
  v8 = "invalid target";
  v9 = 15;
  if (a2 <= 35975)
  {
    if (a2 == 35007)
    {
      if (!*((_QWORD *)this + 63))
      {
        v8 = "invalid target, EXT_disjoint_timer_query_webgl2 not enabled";
        v9 = 60;
        goto LABEL_30;
      }
      v7 = 2;
      if (a3 == 34916)
      {
        this = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, const char *, uint64_t))(**((_QWORD **)this + 11) + 1648))(*((_QWORD *)this + 11), 35007, 34916, a4, "invalid target", 15);
        *a5 = (_DWORD)this;
        a5[4] = 2;
        return this;
      }
    }
    else if (a2 != 35887)
    {
      goto LABEL_30;
    }
  }
  else
  {
    switch(a2)
    {
      case 35976:
        v7 = 1;
        break;
      case 36202:
        break;
      case 36392:
        if (!*((_QWORD *)this + 63))
        {
          v8 = "invalid target, EXT_disjoint_timer_query_webgl2 not enabled";
          v9 = 60;
          goto LABEL_30;
        }
        if (a3 != 34917)
        {
          if (a3 == 34916)
          {
            this = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, const char *, uint64_t))(**((_QWORD **)this + 11) + 1648))(*((_QWORD *)this + 11), 36392, 34916, a4, "invalid target", 15);
            *a5 = (_DWORD)this;
            v10 = 2;
LABEL_24:
            a5[4] = v10;
            return this;
          }
          goto LABEL_25;
        }
        goto LABEL_2;
      default:
LABEL_30:
        this = WebCore::WebGLRenderingContextBase::synthesizeGLError(this, 1280, (uint64_t)"getQuery", 9, (uint64_t)v8, v9);
        goto LABEL_2;
    }
  }
  if (a3 != 34917)
  {
LABEL_25:
    v8 = "invalid parameter name";
    v9 = 23;
    goto LABEL_30;
  }
  this = (WTF::StringImpl *)*((_QWORD *)this + v7 + 127);
  if (!this)
  {
LABEL_2:
    *(_QWORD *)a5 = 0;
    a5[4] = 0;
    return this;
  }
  v11 = *((_DWORD *)this + 2);
  *((_DWORD *)this + 2) = v11 + 1;
  if (*((_DWORD *)this + 9) == a2)
  {
    *(_QWORD *)a5 = this;
    v10 = 18;
    goto LABEL_24;
  }
  *(_QWORD *)a5 = 0;
  a5[4] = 0;
  if (!v11)
    return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 8))(this);
  *((_DWORD *)this + 2) = v11;
  return this;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::getQueryParameter@<X0>(WTF::StringImpl *this@<X0>, WebCore::WebGLQuery *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  WTF::StringImpl *v12;

  if (*((_BYTE *)this + 364))
    goto LABEL_10;
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  if (v5)
  {
    v6 = *((_QWORD *)v5 + 1);
    if (v6)
      v5 = (WTF::StringImpl *)(v6 - 8);
    else
      v5 = 0;
  }
  if (v5 != this)
  {
    v7 = "object does not belong to this context";
    v8 = 39;
LABEL_8:
    v9 = 1282;
LABEL_9:
    this = WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v9, (uint64_t)"getQueryParameter", 18, (uint64_t)v7, v8);
LABEL_10:
    v10 = 0;
    *(_QWORD *)a4 = 0;
    goto LABEL_11;
  }
  v7 = "attempt to use a deleted object";
  v8 = 32;
  if (!*((_DWORD *)a2 + 6) || *((_BYTE *)a2 + 32))
    goto LABEL_8;
  v11 = *((_DWORD *)a2 + 9);
  if (!v11)
  {
    v7 = "query has not been used by beginQuery";
    v9 = 1282;
    v8 = 38;
    goto LABEL_9;
  }
  if (*((WebCore::WebGLQuery **)this + 127) == a2)
  {
    v12 = (WTF::StringImpl *)((char *)this + 1016);
  }
  else if (*((WebCore::WebGLQuery **)this + 128) == a2)
  {
    v12 = (WTF::StringImpl *)((char *)this + 1024);
  }
  else
  {
    v12 = (WTF::StringImpl *)((char *)this + 1032);
    if (*((WebCore::WebGLQuery **)this + 129) != a2)
      v12 = (WTF::StringImpl *)((char *)this + 1040);
  }
  if (v12 != (WTF::StringImpl *)((char *)this + 1040))
  {
    v7 = "query is currently active";
    v9 = 1282;
    v8 = 26;
    goto LABEL_9;
  }
  if (a3 == 34919)
  {
    if (*((_BYTE *)a2 + 33))
    {
      this = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 1656))(*((_QWORD *)this + 11));
      *(_BYTE *)a4 = (_DWORD)this != 0;
    }
    else
    {
      *(_BYTE *)a4 = 0;
    }
    v10 = 1;
  }
  else
  {
    if (a3 != 34918)
    {
      v7 = "invalid parameter name";
      v9 = 1280;
      v8 = 23;
      goto LABEL_9;
    }
    if (*((_BYTE *)a2 + 33))
    {
      if (v11 == 36392 || v11 == 35007)
      {
        this = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 2064))(*((_QWORD *)this + 11));
        *(_QWORD *)a4 = this;
        v10 = 5;
      }
      else
      {
        this = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 1656))(*((_QWORD *)this + 11));
        *(_DWORD *)a4 = (_DWORD)this;
        v10 = 3;
      }
    }
    else
    {
      *(_DWORD *)a4 = 0;
      v10 = 2;
    }
  }
LABEL_11:
  *(_DWORD *)(a4 + 16) = v10;
  return this;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::bindSampler(WTF::StringImpl *this, uint64_t a2, WebCore::WebGLSampler *a3)
{
  WTF::StringImpl *v5;
  unsigned __int8 *v6;
  WTF::StringImpl *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  if (!*((_BYTE *)this + 364))
  {
    v5 = this;
    v6 = (unsigned __int8 *)this + 96;
    if (__ldaxr((unsigned __int8 *)this + 96))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_6;
    }
    this = (WTF::StringImpl *)MEMORY[0x19AEA534C]((char *)this + 96);
LABEL_6:
    if (a3)
    {
      v8 = (WTF::StringImpl *)*((_QWORD *)a3 + 2);
      if (v8)
      {
        v9 = *((_QWORD *)v8 + 1);
        if (v9)
          v8 = (WTF::StringImpl *)(v9 - 8);
        else
          v8 = 0;
      }
      if (v8 != v5)
      {
        v10 = "object does not belong to this context";
        v11 = 39;
LABEL_13:
        v12 = v5;
        v13 = 1282;
        goto LABEL_21;
      }
      v10 = "attempt to use a deleted object";
      v11 = 32;
      if (!*((_DWORD *)a3 + 6) || *((_BYTE *)a3 + 32))
        goto LABEL_13;
    }
    if (*((_DWORD *)v5 + 263) > a2)
    {
      if (*(WebCore::WebGLSampler **)(*((_QWORD *)v5 + 130) + 8 * a2) != a3)
      {
        if (a3)
          v14 = *((unsigned int *)a3 + 6);
        else
          v14 = 0;
        this = (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)v5 + 11) + 1688))(*((_QWORD *)v5 + 11), a2, v14);
        if (*((_DWORD *)v5 + 263) <= a2)
        {
          __break(0xC471u);
          return this;
        }
        v16 = *((_QWORD *)v5 + 130);
        if (a3)
          ++*((_DWORD *)a3 + 2);
        this = *(WTF::StringImpl **)(v16 + 8 * a2);
        *(_QWORD *)(v16 + 8 * a2) = a3;
        if (this)
        {
          if (*((_DWORD *)this + 2) == 1)
            this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 8))(this);
          else
            --*((_DWORD *)this + 2);
        }
      }
LABEL_22:
      v15 = __ldxr(v6);
      if (v15 == 1)
      {
        if (!__stlxr(0, v6))
          return this;
      }
      else
      {
        __clrex();
      }
      return (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
    }
    v10 = "invalid texture unit";
    v12 = v5;
    v13 = 1281;
    v11 = 21;
LABEL_21:
    this = WebCore::WebGLRenderingContextBase::synthesizeGLError(v12, v13, (uint64_t)"bindSampler", 12, (uint64_t)v10, v11);
    goto LABEL_22;
  }
  return this;
}

void WebCore::WebGL2RenderingContext::getSamplerParameter(WebCore::WebGL2RenderingContext *this@<X0>, WebCore::WebGLSampler *a2@<X1>, int a3@<W2>, float *a4@<X8>)
{
  WebCore::WebGL2RenderingContext *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  int v9;
  int v10;
  float (*v11)(void);

  if (*((_BYTE *)this + 364))
    goto LABEL_10;
  v5 = (WebCore::WebGL2RenderingContext *)*((_QWORD *)a2 + 2);
  if (v5)
  {
    v6 = *((_QWORD *)v5 + 1);
    if (v6)
      v5 = (WebCore::WebGL2RenderingContext *)(v6 - 8);
    else
      v5 = 0;
  }
  if (v5 == this)
  {
    v7 = "attempt to use a deleted object";
    v8 = 32;
    if (!*((_DWORD *)a2 + 6) || *((_BYTE *)a2 + 32))
      goto LABEL_8;
    if (a3 <= 33081)
    {
      if ((a3 - 10240) >= 4 && a3 != 32882)
        goto LABEL_26;
LABEL_20:
      *(_DWORD *)a4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 1720))(*((_QWORD *)this + 11));
      v10 = 2;
      goto LABEL_11;
    }
    if ((a3 - 33082) < 2)
    {
      v11 = *(float (**)(void))(**((_QWORD **)this + 11) + 1712);
    }
    else
    {
      if ((a3 - 34892) < 2)
        goto LABEL_20;
      if (a3 != 34046)
      {
LABEL_26:
        v7 = "invalid parameter name";
        v9 = 1280;
        v8 = 23;
        goto LABEL_9;
      }
      if (!*((_QWORD *)this + 71))
      {
        v7 = "invalid parameter name, EXT_texture_filter_anisotropic not enabled";
        v9 = 1280;
        v8 = 67;
        goto LABEL_9;
      }
      v11 = *(float (**)(void))(**((_QWORD **)this + 11) + 1712);
    }
    *a4 = v11();
    v10 = 6;
    goto LABEL_11;
  }
  v7 = "object does not belong to this context";
  v8 = 39;
LABEL_8:
  v9 = 1282;
LABEL_9:
  WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v9, (uint64_t)"getSamplerParameter", 20, (uint64_t)v7, v8);
LABEL_10:
  v10 = 0;
  *(_QWORD *)a4 = 0;
LABEL_11:
  *((_DWORD *)a4 + 4) = v10;
}

_BYTE *WebCore::WebGL2RenderingContext::fenceSync@<X0>(_BYTE *this@<X0>, int a2@<W1>, int a3@<W2>, unsigned int **a4@<X8>)
{
  _BYTE *v5;
  const char *v6;
  int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int *v12;
  _BYTE *v13;

  if (this[364])
    goto LABEL_7;
  v5 = this;
  if (a2 != 37143)
  {
    v6 = "condition must be SYNC_GPU_COMMANDS_COMPLETE";
    v7 = 1280;
    v8 = 45;
    goto LABEL_6;
  }
  if (a3)
  {
    v6 = "flags must be zero";
    v7 = 1281;
    v8 = 19;
LABEL_6:
    this = WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)this, v7, (uint64_t)"fenceSync", 10, (uint64_t)v6, v8);
LABEL_7:
    *a4 = 0;
    return this;
  }
  this = WebCore::WebGLSync::create((WebCore::WebGLSync *)this, &v12);
  v9 = v12;
  if (v12)
  {
    v10 = *((_QWORD *)v5 + 5);
    ++v12[2];
    v11 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v11 = &off_1E33DEF38;
    v11[1] = v9;
    v13 = v11;
    (*(void (**)(uint64_t, uint64_t, _BYTE **))(*(_QWORD *)v10 + 128))(v10, 21, &v13);
    this = v13;
    v13 = 0;
    if (this)
      this = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)this + 8))(this);
  }
  *a4 = v9;
  return this;
}

uint64_t WebCore::WebGL2RenderingContext::clientWaitSync(WebCore::WebGL2RenderingContext *this, WebCore::WebGLSync *a2, unsigned int a3, uint64_t a4)
{
  WebCore::WebGL2RenderingContext *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  int v10;

  if (*((_BYTE *)this + 364))
    return 37149;
  v6 = (WebCore::WebGL2RenderingContext *)*((_QWORD *)a2 + 2);
  if (v6)
  {
    v7 = *((_QWORD *)v6 + 1);
    if (v7)
      v6 = (WebCore::WebGL2RenderingContext *)(v7 - 8);
    else
      v6 = 0;
  }
  if (v6 != this)
  {
    v8 = "object does not belong to this context";
    v9 = 39;
LABEL_8:
    v10 = 1282;
LABEL_9:
    WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v10, (uint64_t)"clientWaitSync", 15, (uint64_t)v8, v9);
    return 37149;
  }
  v8 = "attempt to use a deleted object";
  v9 = 32;
  if (!*((_DWORD *)a2 + 6) || *((_BYTE *)a2 + 32))
    goto LABEL_8;
  if (a4)
  {
    v8 = "timeout > MAX_CLIENT_WAIT_TIMEOUT_WEBGL";
    v10 = 1282;
    v9 = 40;
    goto LABEL_9;
  }
  if (a3 >= 2)
  {
    v8 = "invalid flags";
    v10 = 1281;
    v9 = 14;
    goto LABEL_9;
  }
  if (*((_DWORD *)a2 + 9) == 37145)
    return 37146;
  if (a3)
    (*(void (**)(_QWORD))(**((_QWORD **)this + 11) + 384))(*((_QWORD *)this + 11));
  WebCore::WebGLSync::updateCache((uint64_t)a2, this);
  if (*((_DWORD *)a2 + 9) == 37145)
    return 37148;
  else
    return 37147;
}

WTF::Lock *WebCore::WebGL2RenderingContext::deleteTransformFeedback(WebCore::WebGL2RenderingContext *this, WebCore::WebGLTransformFeedback *a2)
{
  WTF::Lock *result;
  WebCore::WebGL2RenderingContext *v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  WTF::Lock *v15;
  char v16;

  result = (WebCore::WebGL2RenderingContext *)((char *)this + 96);
  v15 = result;
  v16 = 1;
  if (__ldaxr((unsigned __int8 *)result))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)result))
  {
    goto LABEL_5;
  }
  result = (WTF::Lock *)MEMORY[0x19AEA534C]();
LABEL_5:
  if (a2 && !*((_BYTE *)this + 364))
  {
    v6 = (WebCore::WebGL2RenderingContext *)*((_QWORD *)a2 + 2);
    if (v6)
    {
      v7 = *((_QWORD *)v6 + 1);
      if (v7)
        v6 = (WebCore::WebGL2RenderingContext *)(v7 - 8);
      else
        v6 = 0;
    }
    if (v6 != this)
    {
      v8 = "delete";
      v9 = "object does not belong to this context";
      v10 = this;
      v11 = 7;
      v12 = 39;
LABEL_13:
      result = WebCore::WebGLRenderingContextBase::synthesizeGLError(v10, 1282, (uint64_t)v8, v11, (uint64_t)v9, v12);
      goto LABEL_15;
    }
    if (!*((_BYTE *)a2 + 32))
    {
      if (*((_BYTE *)a2 + 33))
      {
        v8 = "deleteTransformFeedback";
        v9 = "attempt to delete an active transform feedback object";
        v10 = this;
        v11 = 24;
        v12 = 54;
        goto LABEL_13;
      }
      result = (WTF::Lock *)WebCore::WebGLRenderingContextBase::deleteObject((uint64_t)this, (uint64_t)&v15, a2);
      if ((_DWORD)result)
      {
        if (*((WebCore::WebGLTransformFeedback **)this + 117) == a2)
        {
          v14 = *((_QWORD *)this + 118);
          if (v14)
            ++*(_DWORD *)(v14 + 8);
          if ((WebCore::WebGLTransformFeedback *)v14 == a2)
          {
            if (*((_DWORD *)a2 + 2) == 1)
              result = (WTF::Lock *)(*(uint64_t (**)(WebCore::WebGLTransformFeedback *))(*(_QWORD *)a2 + 8))(a2);
            else
              --*((_DWORD *)a2 + 2);
          }
          else
          {
            *((_QWORD *)this + 117) = v14;
            if (*((_DWORD *)a2 + 2) != 1)
            {
              --*((_DWORD *)a2 + 2);
              if (!v14)
                goto LABEL_15;
              goto LABEL_31;
            }
            result = (WTF::Lock *)(*(uint64_t (**)(WebCore::WebGLTransformFeedback *))(*(_QWORD *)a2 + 8))(a2);
            v14 = *((_QWORD *)this + 117);
            if (v14)
LABEL_31:
              *(_BYTE *)(v14 + 35) = 1;
          }
        }
      }
    }
  }
LABEL_15:
  if (v16)
  {
    result = v15;
    v13 = __ldxr((unsigned __int8 *)v15);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v15))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::bindTransformFeedback(WTF::StringImpl *this, int a2, WebCore::WebGLTransformFeedback *a3)
{
  WTF::StringImpl *v5;
  unsigned __int8 *v6;
  WTF::StringImpl *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;

  if (!*((_BYTE *)this + 364))
  {
    v5 = this;
    v6 = (unsigned __int8 *)this + 96;
    if (__ldaxr((unsigned __int8 *)this + 96))
    {
      __clrex();
    }
    else if (!__stxr(1u, v6))
    {
      goto LABEL_6;
    }
    MEMORY[0x19AEA534C]((char *)this + 96);
LABEL_6:
    if (a3)
    {
      v8 = (WTF::StringImpl *)*((_QWORD *)a3 + 2);
      if (v8)
      {
        v9 = *((_QWORD *)v8 + 1);
        if (v9)
          v8 = (WTF::StringImpl *)(v9 - 8);
        else
          v8 = 0;
      }
      if (v8 != v5)
      {
        v10 = "object does not belong to this context";
        v11 = 39;
LABEL_13:
        v12 = v5;
        v13 = 1282;
LABEL_27:
        this = WebCore::WebGLRenderingContextBase::synthesizeGLError(v12, v13, (uint64_t)"bindTransformFeedback", 22, (uint64_t)v10, v11);
        goto LABEL_28;
      }
      v10 = "attempt to use a deleted object";
      v11 = 32;
      if (!*((_DWORD *)a3 + 6) || *((_BYTE *)a3 + 32))
        goto LABEL_13;
    }
    if (a2 != 36386)
    {
      v10 = "target must be TRANSFORM_FEEDBACK";
      v12 = v5;
      v13 = 1280;
      v11 = 34;
      goto LABEL_27;
    }
    v14 = *((_QWORD *)v5 + 117);
    if (*(_BYTE *)(v14 + 33) && !*(_BYTE *)(v14 + 34))
    {
      v10 = "transform feedback is active and not paused";
      v12 = v5;
      v13 = 1282;
      v11 = 44;
      goto LABEL_27;
    }
    if (!a3)
      a3 = (WebCore::WebGLTransformFeedback *)*((_QWORD *)v5 + 118);
    (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)v5 + 11) + 1800))(*((_QWORD *)v5 + 11), 36386, *((unsigned int *)a3 + 6));
    v15 = *((_DWORD *)a3 + 2);
    *((_DWORD *)a3 + 2) = v15 + 1;
    this = (WTF::StringImpl *)*((_QWORD *)v5 + 117);
    if (this == a3)
    {
      if (v15)
        *((_DWORD *)a3 + 2) = v15;
      else
        this = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::WebGLTransformFeedback *))(*(_QWORD *)a3 + 8))(a3);
    }
    else
    {
      *((_QWORD *)v5 + 117) = a3;
      if (!this)
      {
LABEL_25:
        *((_BYTE *)a3 + 35) = 1;
        goto LABEL_28;
      }
      if (*((_DWORD *)this + 2) != 1)
      {
        --*((_DWORD *)this + 2);
        goto LABEL_25;
      }
      this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 8))(this);
      a3 = (WebCore::WebGLTransformFeedback *)*((_QWORD *)v5 + 117);
      if (a3)
        goto LABEL_25;
    }
LABEL_28:
    v16 = __ldxr(v6);
    if (v16 == 1)
    {
      if (!__stlxr(0, v6))
        return this;
    }
    else
    {
      __clrex();
    }
    return (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
  }
  return this;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::beginTransformFeedback(WTF::StringImpl *this, uint64_t a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  const char *v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v20;
  uint64_t v21;
  int v22;

  if (!*((_BYTE *)this + 364))
  {
    v3 = this;
    if (a2 > 4 || ((1 << a2) & 0x13) == 0)
    {
      v5 = "invalid transform feedback primitive mode";
      v6 = 1280;
      v7 = 42;
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v6, (uint64_t)"beginTransformFeedback", 23, (uint64_t)v5, v7);
    }
    v4 = *((_QWORD *)this + 21);
    if (!v4)
    {
      v5 = "no program is active";
      v6 = 1282;
      v7 = 21;
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v6, (uint64_t)"beginTransformFeedback", 23, (uint64_t)v5, v7);
    }
    if (*(_BYTE *)(*((_QWORD *)this + 117) + 33))
    {
      v5 = "transform feedback is already active";
      v6 = 1282;
      v7 = 37;
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v6, (uint64_t)"beginTransformFeedback", 23, (uint64_t)v5, v7);
    }
    if (!*(_BYTE *)(v4 + 80))
    {
      if (*(_DWORD *)(v4 + 24))
      {
        v14 = *(_QWORD *)(v4 + 16);
        if (v14)
        {
          v15 = *(_QWORD *)(v14 + 8);
          if (v15)
          {
            v16 = *(_DWORD **)(v15 + 80);
            if (v16)
            {
              ++v16[2];
              v17 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v16 + 504))(v16);
              *(_DWORD *)(v4 + 56) = v17;
              if (v17)
                *(_DWORD *)(v4 + 88) = *(_DWORD *)(v4 + 84);
              *(_BYTE *)(v4 + 80) = 1;
              if (v16[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 16))(v16);
              else
                --v16[2];
            }
          }
        }
      }
    }
    v8 = *(unsigned int *)(v4 + 88);
    if (!(_DWORD)v8)
    {
      v5 = "current active program does not specify any transform feedback varyings to record";
      this = v3;
      v6 = 1282;
      v7 = 82;
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v6, (uint64_t)"beginTransformFeedback", 23, (uint64_t)v5, v7);
    }
    v9 = *((_QWORD *)v3 + 117);
    if (*(_DWORD *)(v9 + 52) < v8 || (v10 = *(_QWORD **)(v9 + 40), !*v10))
    {
LABEL_17:
      v5 = "not enough transform feedback buffers bound";
      this = v3;
      v6 = 1282;
      v7 = 44;
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v6, (uint64_t)"beginTransformFeedback", 23, (uint64_t)v5, v7);
    }
    v11 = 0;
    v12 = v10 + 1;
    while (v8 - 1 != v11)
    {
      if (!v12[v11++])
      {
        if (v11 < v8)
          goto LABEL_17;
        break;
      }
    }
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v3 + 11) + 1808))(*((_QWORD *)v3 + 11), a2);
    v18 = (unsigned __int8 *)v3 + 96;
    if (__ldaxr((unsigned __int8 *)v3 + 96))
    {
      __clrex();
    }
    else if (!__stxr(1u, v18))
    {
      goto LABEL_32;
    }
    MEMORY[0x19AEA534C]((char *)v3 + 96);
LABEL_32:
    v20 = *((_QWORD *)v3 + 117);
    v21 = *((_QWORD *)v3 + 21);
    ++*(_DWORD *)(v21 + 8);
    this = *(WTF::StringImpl **)(v20 + 56);
    *(_QWORD *)(v20 + 56) = v21;
    if (this)
    {
      if (*((_DWORD *)this + 2) == 1)
        this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 8))(this);
      else
        --*((_DWORD *)this + 2);
    }
    *(_DWORD *)(v20 + 36) = *(_DWORD *)(v21 + 60);
    *(_WORD *)(*((_QWORD *)v3 + 117) + 33) = 1;
    v22 = __ldxr(v18);
    if (v22 == 1)
    {
      if (!__stlxr(0, v18))
        return this;
    }
    else
    {
      __clrex();
    }
    return (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::StringImpl *)((char *)v3 + 96));
  }
  return this;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::transformFeedbackVaryings(WTF::StringImpl *result, uint64_t a2, uint64_t a3, int a4)
{
  WTF::StringImpl *v4;
  uint64_t v5;
  const char *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;

  if (!*((_BYTE *)result + 364))
  {
    v4 = *(WTF::StringImpl **)(a2 + 16);
    if (v4)
    {
      v5 = *((_QWORD *)v4 + 1);
      if (v5)
        v4 = (WTF::StringImpl *)(v5 - 8);
      else
        v4 = 0;
    }
    if (v4 != result)
    {
      v6 = "object does not belong to this context";
      v7 = 1282;
      v8 = 39;
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(result, v7, (uint64_t)"transformFeedbackVaryings", 26, (uint64_t)v6, v8);
    }
    v9 = *(unsigned int *)(a2 + 24);
    if (!(_DWORD)v9)
    {
      v6 = "attempt to use a deleted object";
      v7 = 1281;
      v8 = 32;
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(result, v7, (uint64_t)"transformFeedbackVaryings", 26, (uint64_t)v6, v8);
    }
    if (a4 == 35980)
    {
      v10 = *(_DWORD *)(a3 + 12) != 0;
    }
    else
    {
      if (a4 != 35981)
      {
        v6 = "invalid buffer mode";
        v7 = 1280;
        v8 = 20;
        return WebCore::WebGLRenderingContextBase::synthesizeGLError(result, v7, (uint64_t)"transformFeedbackVaryings", 26, (uint64_t)v6, v8);
      }
      v10 = *(_DWORD *)(a3 + 12);
      if (v10 > *((_DWORD *)result + 265))
      {
        v6 = "too many varyings";
        v7 = 1281;
        v8 = 18;
        return WebCore::WebGLRenderingContextBase::synthesizeGLError(result, v7, (uint64_t)"transformFeedbackVaryings", 26, (uint64_t)v6, v8);
      }
    }
    *(_DWORD *)(a2 + 84) = v10;
    return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)result + 11) + 1824))(*((_QWORD *)result + 11), v9);
  }
  return result;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::getTransformFeedbackVarying@<X0>(WTF::StringImpl *this@<X0>, WebCore::WebGLProgram *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  const char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  int v19;
  int v20;
  WTF::StringImpl *v21;
  int v22;
  int v23;

  if (*((_BYTE *)this + 364))
    goto LABEL_10;
  v7 = this;
  v8 = *((_QWORD *)a2 + 2);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
      v10 = (WTF::StringImpl *)(v9 - 8);
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  if (v10 != this)
  {
    v11 = "object does not belong to this context";
    v12 = 1282;
    v13 = 39;
LABEL_9:
    this = WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v12, (uint64_t)"getTransformFeedbackVarying", 28, (uint64_t)v11, v13);
LABEL_10:
    *a4 = 0;
    return this;
  }
  if (!*((_DWORD *)a2 + 6))
  {
    v11 = "attempt to use a deleted object";
    v12 = 1281;
    v13 = 32;
    goto LABEL_9;
  }
  if (v8)
  {
    if (!*((_BYTE *)a2 + 80))
    {
      v14 = *(_QWORD *)(v8 + 8);
      if (v14)
      {
        v15 = *(_DWORD **)(v14 + 80);
        if (v15)
        {
          ++v15[2];
          v16 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v15 + 504))(v15);
          *((_DWORD *)a2 + 14) = v16;
          if (v16)
            *((_DWORD *)a2 + 22) = *((_DWORD *)a2 + 21);
          *((_BYTE *)a2 + 80) = 1;
          if (v15[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
          else
            --v15[2];
        }
      }
    }
  }
  if (!*((_DWORD *)a2 + 14))
  {
    v11 = "program not linked";
    this = v7;
    v12 = 1282;
    v13 = 19;
    goto LABEL_9;
  }
  v21 = 0;
  (*(void (**)(_QWORD, _QWORD, uint64_t, WTF::StringImpl **))(**((_QWORD **)v7 + 11) + 1832))(*((_QWORD *)v7 + 11), *((unsigned int *)a2 + 6), a3, &v21);
  v18 = 0;
  this = v21;
  if (v21)
  {
    v19 = v22;
    if (v22)
    {
      v20 = v23;
      if (v23)
      {
        v18 = WTF::fastMalloc((WTF *)0x18);
        *(_DWORD *)v18 = 1;
        this = v21;
        if (v21)
          *(_DWORD *)v21 += 2;
        *(_QWORD *)(v18 + 8) = this;
        *(_DWORD *)(v18 + 16) = v19;
        *(_DWORD *)(v18 + 20) = v20;
      }
    }
  }
  *a4 = v18;
  v21 = 0;
  if (this)
  {
    if (*(_DWORD *)this == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(this, v17);
    else
      *(_DWORD *)this -= 2;
  }
  return this;
}

uint64_t WebCore::WebGL2RenderingContext::setIndexedBufferBinding(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, uint64_t a6)
{
  uint64_t v6;
  WTF::Lock *v13;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  WTF::Lock *v28;
  int v29;
  uint64_t v31;
  _DWORD *v32;
  WTF::Lock *v33;
  char v34;

  if (*(_BYTE *)(a1 + 364))
    return 0;
  v13 = (WTF::Lock *)(a1 + 96);
  v33 = v13;
  v34 = 1;
  if (__ldaxr((unsigned __int8 *)v13))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v13))
  {
    goto LABEL_7;
  }
  MEMORY[0x19AEA534C]();
LABEL_7:
  if (a6)
  {
    v15 = *(_QWORD *)(a6 + 16);
    if (v15)
    {
      v16 = *(_QWORD *)(v15 + 8);
      if (v16)
        v15 = v16 - 8;
      else
        v15 = 0;
    }
    if (v15 != a1)
    {
      v17 = "object does not belong to this context";
      v18 = 39;
LABEL_14:
      v19 = (WTF::StringImpl *)a1;
      v20 = 1282;
      v21 = a2;
      v22 = a3;
LABEL_38:
      WebCore::WebGLRenderingContextBase::synthesizeGLError(v19, v20, v21, v22, (uint64_t)v17, v18);
      goto LABEL_39;
    }
    v17 = "attempt to use a deleted object";
    v18 = 32;
    if (!*(_DWORD *)(a6 + 24) || *(_BYTE *)(a6 + 32))
      goto LABEL_14;
  }
  if (a4 == 35345)
  {
    v23 = *(_DWORD *)(a1 + 1012);
  }
  else
  {
    if (a4 != 35982)
    {
      v17 = "invalid target";
      v19 = (WTF::StringImpl *)a1;
      v20 = 1280;
      v21 = a2;
      v22 = a3;
      v18 = 15;
      goto LABEL_38;
    }
    if (*(_BYTE *)(*(_QWORD *)(a1 + 936) + 33))
    {
      v17 = "transform feedback is active";
      v19 = (WTF::StringImpl *)a1;
      v20 = 1282;
      v21 = a2;
      v22 = a3;
      v18 = 29;
      goto LABEL_38;
    }
    v23 = *(_DWORD *)(a1 + 1060);
  }
  if (v23 <= a5)
  {
    v17 = "index out of range";
    v19 = (WTF::StringImpl *)a1;
    v20 = 1281;
    v21 = a2;
    v22 = a3;
    v18 = 19;
    goto LABEL_38;
  }
  if (!WebCore::WebGL2RenderingContext::validateAndCacheBufferBinding((WTF::StringImpl *)a1, (uint64_t)&v33, a2, a3, a4, (_DWORD *)a6))
  {
LABEL_39:
    v6 = 0;
    goto LABEL_40;
  }
  if (a4 != 35345)
  {
    v24 = *(_QWORD *)(a1 + 936);
    if (a6)
      ++*(_DWORD *)(a6 + 8);
    if (*(_DWORD *)(v24 + 52) > a5)
    {
      v25 = *(_QWORD *)(v24 + 40);
      v26 = *(_DWORD **)(v25 + 8 * a5);
      if (v26 != (_DWORD *)a6)
      {
        *(_QWORD *)(v25 + 8 * a5) = a6;
        if (v26)
        {
          if (v26[2] == 1)
          {
            (*(void (**)(_DWORD *))(*(_QWORD *)v26 + 8))(v26);
            a6 = *(_QWORD *)(v25 + 8 * a5);
            if (!a6)
              goto LABEL_61;
LABEL_34:
            if (!*(_DWORD *)(a6 + 36))
            {
              v27 = 35982;
LABEL_57:
              *(_DWORD *)(a6 + 36) = v27;
              goto LABEL_61;
            }
            goto LABEL_61;
          }
          --v26[2];
        }
        if (!a6)
          goto LABEL_61;
        goto LABEL_34;
      }
LABEL_58:
      if (a6)
      {
        if (*(_DWORD *)(a6 + 8) == 1)
          (*(void (**)(uint64_t))(*(_QWORD *)a6 + 8))(a6);
        else
          --*(_DWORD *)(a6 + 8);
      }
      goto LABEL_61;
    }
LABEL_67:
    __break(0xC471u);
    JUMPOUT(0x195CFFC24);
  }
  if (a6)
    ++*(_DWORD *)(a6 + 8);
  if (*(_DWORD *)(a1 + 1012) <= a5)
    goto LABEL_67;
  v31 = *(_QWORD *)(a1 + 1000);
  v32 = *(_DWORD **)(v31 + 8 * a5);
  if (v32 == (_DWORD *)a6)
    goto LABEL_58;
  *(_QWORD *)(v31 + 8 * a5) = a6;
  if (!v32)
    goto LABEL_54;
  if (v32[2] != 1)
  {
    --v32[2];
LABEL_54:
    if (!a6)
      goto LABEL_61;
    goto LABEL_55;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
  a6 = *(_QWORD *)(v31 + 8 * a5);
  if (!a6)
    goto LABEL_61;
LABEL_55:
  if (!*(_DWORD *)(a6 + 36))
  {
    v27 = 35345;
    goto LABEL_57;
  }
LABEL_61:
  v6 = 1;
LABEL_40:
  if (v34)
  {
    v28 = v33;
    v29 = __ldxr((unsigned __int8 *)v33);
    if (v29 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v33))
        return v6;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow(v28);
  }
  return v6;
}

uint64_t WebCore::WebGL2RenderingContext::bindBufferRange(WebCore::WebGL2RenderingContext *this, uint64_t a2, uint64_t a3, WebCore::WebGLBuffer *a4, uint64_t a5, uint64_t a6)
{
  const char *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  if ((_DWORD)a2 == 35345)
  {
    if (a5 % *((int *)this + 264))
    {
      v12 = "invalid offset";
      v13 = 15;
      return (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError(this, 1281, (uint64_t)"bindBufferRange", 16, (uint64_t)v12, v13);
    }
    result = WebCore::WebGL2RenderingContext::setIndexedBufferBinding((uint64_t)this, (uint64_t)"bindBufferRange", 16, 35345, a3, (uint64_t)a4);
    if ((_DWORD)result)
      goto LABEL_6;
  }
  else
  {
    if ((_DWORD)a2 == 35982 && ((a6 | a5) & 3) != 0)
    {
      v12 = "invalid offset or size";
      v13 = 23;
      return (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError(this, 1281, (uint64_t)"bindBufferRange", 16, (uint64_t)v12, v13);
    }
    result = WebCore::WebGL2RenderingContext::setIndexedBufferBinding((uint64_t)this, (uint64_t)"bindBufferRange", 16, a2, a3, (uint64_t)a4);
    if ((result & 1) != 0)
    {
LABEL_6:
      if (a4)
        v15 = *((unsigned int *)a4 + 6);
      else
        v15 = 0;
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**((_QWORD **)this + 11)
                                                                                            + 1864))(*((_QWORD *)this + 11), a2, a3, v15, a5, a6);
    }
  }
  return result;
}

uint64_t WebCore::WebGL2RenderingContext::getIndexedParameter@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  int v6;
  uint64_t v7;
  int16x8_t v8;
  const char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int32x4_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(this + 364))
    goto LABEL_2;
  if ((int)a2 <= 35367)
  {
    if ((int)a2 <= 32967)
    {
      if ((_DWORD)a2 != 3107)
      {
        v6 = 32777;
LABEL_19:
        if ((_DWORD)a2 == v6)
          goto LABEL_20;
LABEL_30:
        v9 = "invalid parameter name";
        v10 = 1280;
        v11 = 23;
        goto LABEL_32;
      }
    }
    else if ((a2 - 32968) >= 4)
    {
      v6 = 34877;
      goto LABEL_19;
    }
LABEL_20:
    if (*(_QWORD *)(this + 616))
    {
      if ((_DWORD)a2 == 3107)
      {
        (*(void (**)(_QWORD, uint64_t, uint64_t, int32x4_t *))(**(_QWORD **)(this + 88) + 480))(*(_QWORD *)(this + 88), a2, a3, &v15);
        this = WTF::fastMalloc((WTF *)4);
        v8 = (int16x8_t)vtstq_s32(v15, v15);
        *(int8x8_t *)v8.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v8), (int8x8_t)0x1000100010001);
        *(_DWORD *)this = vmovn_s16(v8).u32[0];
        *(_QWORD *)a4 = this;
        *(_QWORD *)(a4 + 8) = 0x400000004;
        v5 = 8;
      }
      else
      {
        v12 = *(_QWORD *)(this + 88);
        v15 = 0uLL;
        this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int32x4_t *))(*(_QWORD *)v12 + 480))(v12, a2, a3, &v15);
        *(_DWORD *)a4 = v15.i32[0];
        v5 = 2;
      }
      goto LABEL_3;
    }
    v9 = "invalid parameter name, OES_draw_buffers_indexed not enabled";
    v10 = 1280;
    v11 = 61;
LABEL_32:
    this = (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)this, v10, (uint64_t)"getIndexedParameter", 20, (uint64_t)v9, v11);
LABEL_2:
    v5 = 0;
    *(_QWORD *)a4 = 0;
    goto LABEL_3;
  }
  if ((int)a2 > 35971)
  {
    if ((a2 - 35972) >= 2)
    {
      if ((_DWORD)a2 != 35983)
        goto LABEL_30;
      v13 = *(_QWORD *)(this + 936);
      if (*(_DWORD *)(v13 + 52) <= a3)
      {
        this = (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)this, 1281, (uint64_t)"getIndexedParameter", 20, (uint64_t)"index out of range", 19);
        v14 = 0;
        v5 = 0;
      }
      else
      {
        v14 = *(_QWORD *)(*(_QWORD *)(v13 + 40) + 8 * a3);
        if (v14)
          ++*(_DWORD *)(v14 + 8);
        v5 = 15;
      }
      *(_QWORD *)a4 = v14;
      goto LABEL_3;
    }
LABEL_16:
    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 88) + 496))(*(_QWORD *)(this + 88));
    *(_QWORD *)a4 = this;
    v5 = 4;
    goto LABEL_3;
  }
  if ((a2 - 35369) < 2)
    goto LABEL_16;
  if ((_DWORD)a2 != 35368)
    goto LABEL_30;
  if (*(_DWORD *)(this + 1012) <= a3)
  {
    v9 = "index out of range";
    v10 = 1281;
    v11 = 19;
    goto LABEL_32;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(this + 1000) + 8 * a3);
  if (v7)
    ++*(_DWORD *)(v7 + 8);
  *(_QWORD *)a4 = v7;
  v5 = 15;
LABEL_3:
  *(_DWORD *)(a4 + 16) = v5;
  return this;
}

_QWORD *WebCore::WebGL2RenderingContext::getActiveUniforms@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, int a3@<W3>, uint64_t a4@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  const char *v7;
  int v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  WTF *v14;
  WTF *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  int v21;
  WTF *v22;
  WTF *v23;

  if (*((_BYTE *)result + 364))
    goto LABEL_9;
  v5 = *(_QWORD **)(a2 + 16);
  if (v5)
  {
    v6 = v5[1];
    if (v6)
      v5 = (_QWORD *)(v6 - 8);
    else
      v5 = 0;
  }
  if (v5 != result)
  {
    v7 = "object does not belong to this context";
    v8 = 1282;
    v9 = 39;
LABEL_8:
    result = WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)result, v8, (uint64_t)"getActiveUniforms", 18, (uint64_t)v7, v9);
LABEL_9:
    *(_QWORD *)a4 = 0;
    *(_DWORD *)(a4 + 16) = 0;
    return result;
  }
  if (!*(_DWORD *)(a2 + 24))
  {
    v7 = "attempt to use a deleted object";
    v8 = 1281;
    v9 = 32;
    goto LABEL_8;
  }
  switch(a3)
  {
    case 35383:
      (*(void (**)(WTF **__return_ptr))(*(_QWORD *)result[11] + 1880))(&v22);
      v11 = HIDWORD(v23);
      if (HIDWORD(v23))
      {
        if (HIDWORD(v23) >> 30)
        {
          __break(0xC471u);
          JUMPOUT(0x195D0028CLL);
        }
        v12 = WTF::fastMalloc((WTF *)(4 * HIDWORD(v23)));
        LODWORD(v13) = HIDWORD(v23);
        if (HIDWORD(v23))
        {
          v13 = 0;
          v15 = v22;
          do
          {
            *(_DWORD *)(v12 + 4 * v13) = *((_DWORD *)v15 + v13);
            ++v13;
          }
          while (v13 < HIDWORD(v23));
        }
      }
      else
      {
        LODWORD(v13) = 0;
        v12 = 0;
      }
      goto LABEL_35;
    case 35384:
      (*(void (**)(WTF **__return_ptr))(*(_QWORD *)result[11] + 1880))(&v22);
      v11 = HIDWORD(v23);
      if (HIDWORD(v23))
      {
        if (HIDWORD(v23) >> 30)
        {
          __break(0xC471u);
          JUMPOUT(0x195D00284);
        }
        v12 = WTF::fastMalloc((WTF *)(4 * HIDWORD(v23)));
        LODWORD(v13) = HIDWORD(v23);
        if (HIDWORD(v23))
        {
          v13 = 0;
          v14 = v22;
          do
          {
            *(_DWORD *)(v12 + 4 * v13) = *((_DWORD *)v14 + v13);
            ++v13;
          }
          while (v13 < HIDWORD(v23));
        }
      }
      else
      {
        v12 = 0;
        LODWORD(v13) = 0;
      }
LABEL_35:
      *(_QWORD *)a4 = v12;
      *(_DWORD *)(a4 + 8) = v11;
      *(_DWORD *)(a4 + 12) = v13;
      v21 = 10;
      goto LABEL_36;
    case 35386:
    case 35387:
    case 35388:
    case 35389:
      result = (*(_QWORD *(**)(WTF **__return_ptr))(*(_QWORD *)result[11] + 1880))(&v22);
      *(_QWORD *)a4 = v22;
      *(_QWORD *)(a4 + 8) = v23;
      *(_DWORD *)(a4 + 16) = 9;
      return result;
    case 35390:
      (*(void (**)(WTF **__return_ptr))(*(_QWORD *)result[11] + 1880))(&v22);
      v16 = HIDWORD(v23);
      if (HIDWORD(v23))
      {
        v17 = WTF::fastMalloc((WTF *)HIDWORD(v23));
        v18 = HIDWORD(v23);
        if (HIDWORD(v23))
        {
          v19 = 0;
          v20 = v22;
          do
          {
            *(_BYTE *)(v17 + v19) = *((_DWORD *)v20 + v19) != 0;
            ++v19;
          }
          while (v18 != v19);
        }
      }
      else
      {
        v17 = 0;
        LODWORD(v18) = 0;
      }
      *(_QWORD *)a4 = v17;
      *(_DWORD *)(a4 + 8) = v16;
      *(_DWORD *)(a4 + 12) = v18;
      v21 = 8;
LABEL_36:
      *(_DWORD *)(a4 + 16) = v21;
      result = v22;
      if (v22)
      {
        v22 = 0;
        LODWORD(v23) = 0;
        result = (_QWORD *)WTF::fastFree((WTF *)result, v10);
      }
      break;
    default:
      v7 = "invalid parameter name";
      v8 = 1280;
      v9 = 23;
      goto LABEL_8;
  }
  return result;
}

uint64_t WebCore::WebGL2RenderingContext::getActiveUniformBlockParameter@<X0>(uint64_t this@<X0>, WebCore::WebGLProgram *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (*(_BYTE *)(this + 364))
    goto LABEL_9;
  v8 = this;
  v9 = *((_QWORD *)a2 + 2);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
      v9 = v10 - 8;
    else
      v9 = 0;
  }
  if (v9 != this)
  {
    v11 = "object does not belong to this context";
    v12 = 1282;
    v13 = 39;
LABEL_8:
    this = (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)this, v12, (uint64_t)"getActiveUniformBlockParameter", 31, (uint64_t)v11, v13);
LABEL_9:
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 16) = 0;
    return this;
  }
  if (!*((_DWORD *)a2 + 6))
  {
    v11 = "attempt to use a deleted object";
    v12 = 1281;
    v13 = 32;
    goto LABEL_8;
  }
  v14 = a4 - 63;
  if ((a4 - 35391) > 7)
    goto LABEL_27;
  if (((1 << v14) & 0xB) != 0)
  {
    v16 = *(_QWORD *)(this + 88);
    LODWORD(v22) = 0;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 1912))(v16);
    *(_DWORD *)a5 = 0;
    *(_DWORD *)(a5 + 16) = 3;
    return this;
  }
  if (((1 << v14) & 0xA0) != 0)
  {
    v15 = *(_QWORD *)(this + 88);
    LODWORD(v22) = 0;
    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 1912))(v15);
    *(_BYTE *)a5 = 0;
    *(_DWORD *)(a5 + 16) = 1;
    return this;
  }
  if (a4 != 35395)
  {
LABEL_27:
    v11 = "invalid parameter name";
    v12 = 1280;
    v13 = 23;
    goto LABEL_8;
  }
  v17 = *(_QWORD *)(this + 88);
  LODWORD(v22) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 1912))(v17);
  (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v8 + 88) + 1912))(*(_QWORD *)(v8 + 88), *((unsigned int *)a2 + 6), a3, 35395, 0, 0);
  this = JSC::GenericTypedArrayView<JSC::Uint32Adaptor>::tryCreate(0, &v22);
  v18 = v22;
  if (v22)
  {
    v19 = *(_QWORD *)(v22 + 32);
    if (v19)
    {
      v20 = *(_QWORD *)(v19 + 16);
      if (v20)
      {
        v21 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
        if (!v21 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
        {
          this = *(_QWORD *)(v22 + 24);
          goto LABEL_31;
        }
        if ((v20 & 0x3FFFFFFFFLL) + v21)
        {
          this = *(_QWORD *)(v22 + 24);
          if (this && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
            this = (this & 0x3FFFFFFFFLL) + v21;
          goto LABEL_31;
        }
      }
    }
    this = 0;
LABEL_31:
    v18 = v22;
  }
  *(_QWORD *)a5 = v18;
  *(_DWORD *)(a5 + 16) = 13;
  return this;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::getActiveUniformBlockName@<X0>(WTF::StringImpl *this@<X0>, WebCore::WebGLProgram *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  const char *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  int v17;
  uint64_t v18;

  if (*((_BYTE *)this + 364))
    goto LABEL_10;
  v7 = this;
  v8 = *((_QWORD *)a2 + 2);
  if (v8)
  {
    v9 = *(_QWORD *)(v8 + 8);
    if (v9)
      v10 = (WTF::StringImpl *)(v9 - 8);
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  if (v10 != this)
  {
    v11 = "object does not belong to this context";
    v12 = 1282;
    v13 = 39;
LABEL_9:
    this = WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v12, (uint64_t)"getActiveUniformBlockName", 26, (uint64_t)v11, v13);
LABEL_10:
    *(_QWORD *)a4 = 0;
    *(_DWORD *)(a4 + 16) = 7;
    return this;
  }
  if (!*((_DWORD *)a2 + 6))
  {
    v11 = "attempt to use a deleted object";
    v12 = 1281;
    v13 = 32;
    goto LABEL_9;
  }
  if (v8)
  {
    if (!*((_BYTE *)a2 + 80))
    {
      v14 = *(_QWORD *)(v8 + 8);
      if (v14)
      {
        v15 = *(_DWORD **)(v14 + 80);
        if (v15)
        {
          ++v15[2];
          v16 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v15 + 504))(v15);
          *((_DWORD *)a2 + 14) = v16;
          if (v16)
            *((_DWORD *)a2 + 22) = *((_DWORD *)a2 + 21);
          *((_BYTE *)a2 + 80) = 1;
          if (v15[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 16))(v15);
          else
            --v15[2];
        }
      }
    }
  }
  if (*((_DWORD *)a2 + 14))
  {
    this = (WTF::StringImpl *)(*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD *, _QWORD, uint64_t))(**((_QWORD **)v7 + 11) + 1896))(&v18, *((_QWORD **)v7 + 11), *((unsigned int *)a2 + 6), a3);
    if (v18)
      v17 = 7;
    else
      v17 = 0;
    *(_QWORD *)a4 = v18;
    *(_DWORD *)(a4 + 16) = v17;
  }
  else
  {
    this = WebCore::WebGLRenderingContextBase::synthesizeGLError(v7, 1282, (uint64_t)"getActiveUniformBlockName", 26, (uint64_t)"program not linked", 19);
    *(_QWORD *)a4 = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return this;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::deleteVertexArray(WebCore::WebGL2RenderingContext *this, WebCore::WebGLVertexArrayObject *a2)
{
  WTF::StringImpl *result;
  WebCore::WebGL2RenderingContext *v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  WTF::Lock *v16;
  char v17;

  result = (WebCore::WebGL2RenderingContext *)((char *)this + 96);
  v16 = result;
  v17 = 1;
  if (__ldaxr((unsigned __int8 *)result))
  {
    __clrex();
LABEL_4:
    result = (WTF::StringImpl *)MEMORY[0x19AEA534C]();
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)result))
    goto LABEL_4;
LABEL_5:
  if (a2 && !*((_BYTE *)this + 364))
  {
    v6 = (WebCore::WebGL2RenderingContext *)*((_QWORD *)a2 + 2);
    if (v6)
    {
      v7 = *((_QWORD *)v6 + 1);
      if (v7)
        v6 = (WebCore::WebGL2RenderingContext *)(v7 - 8);
      else
        v6 = 0;
    }
    if (v6 == this)
    {
      if (!*((_BYTE *)a2 + 32))
      {
        if (*((_DWORD *)a2 + 9) && *((WebCore::WebGLVertexArrayObject **)this + 18) == a2)
        {
          (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 11) + 1232))(*((_QWORD *)this + 11), *(unsigned int *)(*((_QWORD *)this + 17) + 24));
          v8 = (WTF::StringImpl *)*((_QWORD *)this + 17);
          if (v8)
            ++*((_DWORD *)v8 + 2);
          v9 = (WTF::StringImpl *)*((_QWORD *)this + 18);
          result = v8;
          if (v9 != v8)
          {
            *((_QWORD *)this + 18) = v8;
            v10 = v8;
            if (v9)
            {
              if (*((_DWORD *)v9 + 2) == 1)
              {
                (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v9 + 8))(v9);
                v10 = (WTF::StringImpl *)*((_QWORD *)this + 18);
              }
              else
              {
                --*((_DWORD *)v9 + 2);
                v10 = v8;
              }
            }
            result = 0;
            if (v10)
              *((_BYTE *)v10 + 40) = 1;
          }
          if (result)
          {
            if (*((_DWORD *)result + 2) == 1)
              result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
            else
              --*((_DWORD *)result + 2);
          }
        }
        v11 = (_DWORD *)*((_QWORD *)this + 11);
        if (v11)
        {
          ++v11[2];
          *((_BYTE *)a2 + 32) = 1;
          if (*((_DWORD *)a2 + 6))
          {
            v12 = *((_QWORD *)a2 + 2);
            if (v12)
            {
              if (*(_QWORD *)(v12 + 8))
              {
                if (!*((_DWORD *)a2 + 7))
                {
                  result = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::WebGLVertexArrayObject *, WTF::Lock **, _DWORD *))(*(_QWORD *)a2 + 16))(a2, &v16, v11);
                  if (!*((_DWORD *)a2 + 7))
                    *((_DWORD *)a2 + 6) = 0;
                }
              }
            }
          }
          if (v11[2] == 1)
            result = (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
          else
            --v11[2];
        }
        else
        {
          *((_BYTE *)a2 + 32) = 1;
          if (*((_DWORD *)a2 + 6))
          {
            v14 = *((_QWORD *)a2 + 2);
            if (v14)
            {
              v15 = *(_QWORD *)(v14 + 8);
              if (v15)
              {
                if (!*((_DWORD *)a2 + 7))
                {
                  if (!*(_QWORD *)(v15 + 80)
                    || (result = (WTF::StringImpl *)(*(uint64_t (**)(WebCore::WebGLVertexArrayObject *, WTF::Lock **))(*(_QWORD *)a2 + 16))(a2, &v16), !*((_DWORD *)a2 + 7)))
                  {
                    *((_DWORD *)a2 + 6) = 0;
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      result = WebCore::WebGLRenderingContextBase::synthesizeGLError(this, 1282, (uint64_t)"delete", 7, (uint64_t)"object does not belong to this context", 39);
    }
  }
  if (v17)
  {
    result = v16;
    v13 = __ldxr((unsigned __int8 *)v16);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v16))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::StringImpl *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::bindVertexArray(WTF::StringImpl *this, WebCore::WebGLVertexArrayObject *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  int v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  int v14;
  uint64_t (*v15)(void);

  if (!*((_BYTE *)this + 364))
  {
    v3 = (uint64_t)this;
    v4 = (unsigned __int8 *)this + 96;
    if (__ldaxr((unsigned __int8 *)this + 96))
    {
      __clrex();
    }
    else if (!__stxr(1u, v4))
    {
      if (!a2)
        goto LABEL_22;
LABEL_6:
      v6 = *((_QWORD *)a2 + 2);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
          v6 = v7 - 8;
        else
          v6 = 0;
      }
      if (v6 != v3)
      {
        v8 = "object does not belong to this context";
        v9 = 39;
LABEL_13:
        this = WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v3, 1282, (uint64_t)"bindVertexArray", 16, (uint64_t)v8, v9);
        goto LABEL_33;
      }
      v8 = "attempt to use a deleted object";
      v9 = 32;
      if (!*((_DWORD *)a2 + 6) || *((_BYTE *)a2 + 32))
        goto LABEL_13;
      if (*((_DWORD *)a2 + 9))
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 88) + 1232))(*(_QWORD *)(v3 + 88));
        v10 = *((_DWORD *)a2 + 2);
        *((_DWORD *)a2 + 2) = v10 + 1;
        this = *(WTF::StringImpl **)(v3 + 144);
        if (this != a2)
        {
          *(_QWORD *)(v3 + 144) = a2;
          if (!this)
          {
LABEL_21:
            *((_BYTE *)a2 + 40) = 1;
            goto LABEL_33;
          }
          if (*((_DWORD *)this + 2) != 1)
          {
            --*((_DWORD *)this + 2);
            goto LABEL_21;
          }
          this = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)this + 8))(this);
          a2 = *(WebCore::WebGLVertexArrayObject **)(v3 + 144);
          if (a2)
            goto LABEL_21;
LABEL_33:
          v14 = __ldxr(v4);
          if (v14 == 1)
          {
            if (!__stlxr(0, v4))
              return this;
          }
          else
          {
            __clrex();
          }
          return (WTF::StringImpl *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
        }
        if (v10)
        {
          *((_DWORD *)a2 + 2) = v10;
          goto LABEL_33;
        }
        v15 = *(uint64_t (**)(void))(*(_QWORD *)a2 + 8);
      }
      else
      {
LABEL_22:
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(v3 + 88) + 1232))(*(_QWORD *)(v3 + 88), *(unsigned int *)(*(_QWORD *)(v3 + 136) + 24));
        v11 = *(WTF::StringImpl **)(v3 + 136);
        if (v11)
          ++*((_DWORD *)v11 + 2);
        v12 = *(WTF::StringImpl **)(v3 + 144);
        this = v11;
        if (v12 != v11)
        {
          *(_QWORD *)(v3 + 144) = v11;
          v13 = v11;
          if (v12)
          {
            if (*((_DWORD *)v12 + 2) == 1)
            {
              (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v12 + 8))(v12);
              v13 = *(WTF::StringImpl **)(v3 + 144);
            }
            else
            {
              --*((_DWORD *)v12 + 2);
              v13 = v11;
            }
          }
          this = 0;
          if (v13)
            *((_BYTE *)v13 + 40) = 1;
        }
        if (!this)
          goto LABEL_33;
        if (*((_DWORD *)this + 2) != 1)
        {
          --*((_DWORD *)this + 2);
          goto LABEL_33;
        }
        v15 = *(uint64_t (**)(void))(*(_QWORD *)this + 8);
      }
      this = (WTF::StringImpl *)v15();
      goto LABEL_33;
    }
    MEMORY[0x19AEA534C]((char *)this + 96);
    goto LABEL_6;
  }
  return this;
}

uint64_t WebCore::WebGL2RenderingContext::getExtension@<X0>(uint64_t this@<X0>, const WTF::String *a2@<X1>, _BYTE *a3@<X8>)
{
  char v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WebCore::GraphicsContextGL *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  int v22;
  BOOL v23;
  _QWORD *v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v29;
  unsigned __int8 *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  char v38;
  _QWORD *v39;
  _DWORD *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  int v44;
  unsigned __int8 *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  WTF::StringImpl *v52;
  char v53;
  _QWORD *v54;
  _DWORD *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  int v59;
  unsigned __int8 *v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  _QWORD *v67;
  _DWORD *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  int v72;
  unsigned __int8 *v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  char v81;
  WebCore::EXTColorBufferFloat *v82;
  unsigned __int8 *v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  char v93;
  _QWORD *v94;
  _DWORD *v95;
  WTF::StringImpl *v96;
  WTF::StringImpl *v97;
  unsigned __int8 *v99;
  uint64_t v100;
  int v101;
  int v102;
  uint64_t v103;
  WTF::StringImpl *v104;
  char v105;
  _QWORD *v106;
  _DWORD *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  unsigned __int8 *v111;
  int v112;
  int v113;
  int v114;
  int v115;
  uint64_t v116;
  WTF::StringImpl *v117;
  char v118;
  _QWORD *v119;
  _DWORD *v120;
  WTF::StringImpl *v121;
  WTF::StringImpl *v122;
  int v124;
  unsigned __int8 *v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  WebCore::WebGLCompressedTextureASTC *v131;
  int v133;
  int v134;
  int v135;
  int v136;
  uint64_t v137;
  WTF::StringImpl *v138;
  char v139;
  _QWORD *v140;
  _DWORD *v141;
  WTF::StringImpl *v142;
  WTF::StringImpl *v143;
  unsigned __int8 *v145;
  uint64_t v146;
  int v147;
  int v148;
  uint64_t v149;
  WTF::StringImpl *v150;
  char v151;
  WebCore::WebGLCompressedTextureS3TCsRGB *v152;
  unsigned __int8 *v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  _QWORD *v160;
  unsigned __int8 *v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  uint64_t v168;
  WTF::StringImpl *v169;
  char v170;
  _QWORD *v171;
  _DWORD *v172;
  WTF::StringImpl *v173;
  WTF::StringImpl *v174;
  unsigned __int8 *v176;
  uint64_t v177;
  int v178;
  int v179;
  BOOL v180;
  WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance *v181;
  uint64_t v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  uint64_t v189;
  int v190;
  int v191;
  unsigned __int8 *v192;
  uint64_t v193;
  int v194;
  int v195;
  int v196;
  uint64_t v197;
  WTF::StringImpl *v198;
  char v199;
  _QWORD *v200;
  _DWORD *v201;
  WTF::StringImpl *v202;
  WTF::StringImpl *v203;
  unsigned __int8 *v205;
  uint64_t v206;
  int v207;
  int v208;
  uint64_t v209;
  WTF::StringImpl *v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  _DWORD *v215;
  WTF::StringImpl *v216;
  WTF::StringImpl *v217;
  int v219;
  unsigned __int8 *v220;
  int v221;
  int v222;
  int v223;
  int v224;
  int v225;
  uint64_t v226;
  WTF::StringImpl *v227;
  char v228;
  _QWORD *v229;
  _DWORD *v230;
  WTF::StringImpl *v231;
  WTF::StringImpl *v232;
  int v234;
  int v235;
  int v236;
  int v237;
  int v238;
  int v239;
  int v240;
  uint64_t v241;
  WTF::StringImpl *v242;
  char v243;
  WebCore::EXTTextureCompressionBPTC *v244;
  int v246;
  int v247;
  int v248;
  int v249;
  int v250;
  int v251;
  int v252;
  uint64_t v253;
  WTF::StringImpl *v254;
  char v255;
  WebCore::EXTTextureCompressionRGTC *v256;
  int v258;
  int v259;
  int v260;
  uint64_t v261;
  WTF::StringImpl *v262;
  char v263;
  _QWORD *v264;
  _DWORD *v265;
  WTF::StringImpl *v266;
  WTF::StringImpl *v267;
  int v269;
  int v270;
  int v271;
  int v272;
  int v273;
  int v274;
  int v275;
  int v276;
  int v277;
  int v278;
  uint64_t v279;
  int v280;
  int v281;
  int v282;
  int v283;
  int v284;
  uint64_t v285;
  WTF::StringImpl *v286;
  char v287;
  _QWORD *v288;
  _DWORD *v289;
  WTF::StringImpl *v290;
  WTF::StringImpl *v291;
  int v293;
  int v294;
  uint64_t v295;
  int v296;
  int v297;
  int v298;
  int v299;
  uint64_t v300;
  int v301;
  int v302;
  uint64_t v303;
  int v304;
  int v305;
  unsigned __int8 *v306;
  uint64_t v307;
  int v308;
  int v309;
  uint64_t v310;
  WTF::StringImpl *v311;
  char v312;
  _QWORD *v313;
  _DWORD *v314;
  WTF::StringImpl *v315;
  WTF::StringImpl *v316;
  unsigned __int8 *v318;
  uint64_t v319;
  int v320;
  int v321;
  uint64_t v322;
  WTF::StringImpl *v323;
  char v324;
  _QWORD *v325;
  _DWORD *v326;
  WTF::StringImpl *v327;
  WTF::StringImpl *v328;
  int v330;
  int v331;
  int v332;
  int v333;
  int v334;
  int v335;
  uint64_t v336;
  WTF::StringImpl *v337;
  char v338;
  WebCore::WebGLCompressedTextureETC *v339;
  int v341;
  int v342;
  int v343;
  int v344;
  int v345;
  int v346;
  uint64_t v347;
  WTF::StringImpl *v348;
  char v349;
  _QWORD *v350;
  _DWORD *v351;
  WTF::StringImpl *v352;
  WTF::StringImpl *v353;
  int v355;
  int v356;
  unsigned __int8 *v357;
  uint64_t v358;
  int v359;
  int v360;
  int v361;
  int v362;
  int v363;
  int v364;
  int v365;
  int v366;
  int v367;
  int v368;
  uint64_t v369;
  int v370;
  int v371;
  uint64_t v372;
  int v373;
  int v374;
  int v375;
  int v376;
  uint64_t v377;
  int v378;
  int v379;
  int v380;
  int v381;
  int v382;
  int v383;
  int v384;
  int v385;
  uint64_t v386;
  WTF::StringImpl *v387;
  char v388;
  WebCore::WebGLCompressedTextureETC1 *v389;
  unsigned __int8 *v391;
  int v392;
  int v393;
  int v394;
  int v395;
  int v396;
  uint64_t v397;
  WTF::StringImpl *v398;
  char v399;
  _QWORD *v400;
  _DWORD *v401;
  WTF::StringImpl *v402;
  WTF::StringImpl *v403;
  uint64_t v405;
  int v406;
  int v407;
  uint64_t v408;
  int v409;
  int v410;
  uint64_t v411;
  WTF::StringImpl *v412;
  char v413;
  _QWORD *v414;
  _DWORD *v415;
  WTF::StringImpl *v416;
  WTF::StringImpl *v417;
  int v419;
  int v420;
  int v421;
  int v422;
  int v423;
  uint64_t v424;
  WTF::StringImpl *v425;
  char v426;
  _QWORD *v427;
  _DWORD *v428;
  WTF::StringImpl *v429;
  WTF::StringImpl *v430;
  int v432;
  int v433;
  unsigned __int8 *v434;
  uint64_t v435;
  int v436;
  int v437;
  uint64_t v438;
  WTF::StringImpl *v439;
  char v440;
  WebCore::WebGLCompressedTexturePVRTC *v441;
  WebCore::ScriptExecutionContext *v443;
  int v444;
  int v445;
  int v446;
  int v447;
  uint64_t v448;
  int v449;
  int v450;
  int v451;
  int v452;
  int v453;
  int v454;
  int v455;
  int v456;
  int v457;
  int v458;
  int v459;
  unsigned __int8 *v460;
  uint64_t v461;
  int v462;
  int v463;
  int v464;
  int v465;
  int v466;
  int v467;
  uint64_t v468;
  WTF::StringImpl *v469;
  char v470;
  _QWORD *v471;
  _DWORD *v472;
  WTF::StringImpl *v473;
  WTF::StringImpl *v474;
  uint64_t v476;
  int v477;
  int v478;
  int v479;
  int v480;
  int v481;
  int v482;
  int v483;
  uint64_t v484;
  WTF::StringImpl *v485;
  char v486;
  _QWORD *v487;
  _DWORD *v488;
  WTF::StringImpl *v489;
  WTF::StringImpl *v490;
  uint64_t v492;
  int v493;
  int v494;
  WebCore::ScriptExecutionContext *v495;
  int v496;
  int v497;
  WebCore::ScriptExecutionContext *v498;
  uint64_t v499;
  int v500;
  int v501;
  int v502;
  int v503;
  int v504;
  int v505;
  int v506;
  int v507;
  WebCore::WebGLCompressedTextureS3TC *v508;
  uint64_t v510;
  int v511;
  int v512;
  uint64_t v513;
  int v514;
  int v515;
  WebCore::ScriptExecutionContext *v516;
  uint64_t v517;
  int v518;
  int v519;
  WebCore::ScriptExecutionContext *v520;
  WebCore::ScriptExecutionContext *v521;
  WebCore::ScriptExecutionContext *v522;
  WebCore::ScriptExecutionContext *v523;
  WebCore::ScriptExecutionContext *v524;
  WebCore::ScriptExecutionContext *v525;
  WebCore::ScriptExecutionContext *v526;
  WebCore::ScriptExecutionContext *v527;
  int v528;
  int v529;
  int v530;
  int v531;
  int v532;
  WebCore::ScriptExecutionContext *v533;
  WebCore::ScriptExecutionContext *v534;
  WebCore::ScriptExecutionContext *v535;
  WebCore::ScriptExecutionContext *v536;
  WebCore::ScriptExecutionContext *v537;
  WebCore::ScriptExecutionContext *v538;
  WebCore::ScriptExecutionContext *v539;
  WebCore::ScriptExecutionContext *v540;
  WebCore::ScriptExecutionContext *v541;
  WebCore::ScriptExecutionContext *v542;
  WebCore::ScriptExecutionContext *v543;
  WebCore::ScriptExecutionContext *v544;
  WebCore::ScriptExecutionContext *v545;
  WebCore::ScriptExecutionContext *v546;
  WebCore::ScriptExecutionContext *v547;
  WebCore::ScriptExecutionContext *v548;
  WebCore::ScriptExecutionContext *v549;
  WebCore::ScriptExecutionContext *v550;
  WebCore::ScriptExecutionContext *v551;
  WebCore::ScriptExecutionContext *v552;
  WebCore::ScriptExecutionContext *v553;
  unsigned __int8 *v554;
  uint64_t v555;
  int v556;
  int v557;
  int v558;
  int v559;
  int v560;
  uint64_t v561;
  WTF::StringImpl *v562;
  char v563;
  _QWORD *v564;
  _DWORD *v565;
  WTF::StringImpl *v566;
  WTF::StringImpl *v567;
  int v569;
  int v570;
  int v571;
  int v572;
  unsigned __int8 *v573;
  uint64_t v574;
  int v575;
  int v576;
  int v577;
  int v578;
  int v579;
  _QWORD *v580;
  int v582;
  int v583;
  int v584;
  uint64_t v585;
  WTF::StringImpl *v586;
  char v587;
  WebCore::WebGLPolygonMode *v588;
  int v590;
  int v591;
  int v592;
  int v593;
  int v594;
  int v595;
  int v596;
  WebCore::ScriptExecutionContext *v597;
  WebCore::ScriptExecutionContext *v598;
  WebCore::ScriptExecutionContext *v599;
  uint64_t v600;
  int v601;
  int v602;
  int v603;
  int v604;
  int v605;
  uint64_t v606;
  WTF::StringImpl *v607;
  char v608;
  _QWORD *v609;
  _DWORD *v610;
  WTF::StringImpl *v611;
  WTF::StringImpl *v612;
  int v614;
  int v615;
  int v616;
  int v617;
  unsigned __int8 *v618;
  uint64_t v619;
  int v620;
  int v621;
  WebCore::WebGLMultiDraw *v622;
  int v624;
  WebCore::ScriptExecutionContext *v625;
  WebCore::ScriptExecutionContext *v626;
  WTF::StringImpl *v627;

  if (*(_BYTE *)(this + 364))
    goto LABEL_2;
  v6 = this;
  v7 = *(_QWORD *)(*(_QWORD *)(this + 56) + 8);
  v8 = v7 ? v7 - 96 : 0;
  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 136))(v8);
  v10 = *(_QWORD *)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_2;
  v11 = 0;
  v12 = *(_QWORD *)(this + 472);
  v13 = *(_DWORD *)(v10 + 4);
  switch(v13)
  {
    case 15:
LABEL_578:
      v192 = *(unsigned __int8 **)(v10 + 8);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
      {
        v193 = MEMORY[0x1E0CBF868];
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v192) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
          goto LABEL_2;
        v194 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88);
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v192[1]) == v194
          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v192[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
        {
          v195 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v192[3]);
          if (v195 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v192[4]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v192[5]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
          {
            v196 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v192[6]);
            if (v196 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v192[7]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v192[8]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104)
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v192[9]) == v195
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v192[10]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99)
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v192[11]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v192[12]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v192[13]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v192[14]) == v196)
            {
              goto LABEL_594;
            }
          }
        }
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v192[1]) != v194)
          goto LABEL_2;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v192[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
          goto LABEL_2;
        v258 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v192[3]);
        if (v258 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
          goto LABEL_2;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v192[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102))
          goto LABEL_2;
        v259 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v192[5]);
        if (v259 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v192[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v192[7]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v192[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v192[9]) != v258
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v192[10]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v192[11]) != v259
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v192[12]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v192[13]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
        {
          goto LABEL_2;
        }
        v260 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v192[14]);
      }
      else
      {
        v193 = MEMORY[0x1E0CBF868];
        if ((*(unsigned __int16 *)v192 | (32 * (*(unsigned __int16 *)v192 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
          goto LABEL_2;
        v269 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88);
        if ((*((unsigned __int16 *)v192 + 1) | (32 * (*((unsigned __int16 *)v192 + 1) - 65 < 0x1A))) == v269
          && (*((unsigned __int16 *)v192 + 2) | (32 * (*((unsigned __int16 *)v192 + 2) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
        {
          v270 = *((unsigned __int16 *)v192 + 3) | (32 * (*((unsigned __int16 *)v192 + 3) - 65 < 0x1A));
          if (v270 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
            && (*((unsigned __int16 *)v192 + 4) | (32 * (*((unsigned __int16 *)v192 + 4) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
            && (*((unsigned __int16 *)v192 + 5) | (32 * (*((unsigned __int16 *)v192 + 5) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
          {
            v271 = *((unsigned __int16 *)v192 + 6) | (32 * (*((unsigned __int16 *)v192 + 6) - 65 < 0x1A));
            if (v271 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
              && (*((unsigned __int16 *)v192 + 7) | (32 * (*((unsigned __int16 *)v192 + 7) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
              && (*((unsigned __int16 *)v192 + 8) | (32 * (*((unsigned __int16 *)v192 + 8) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104)
              && (*((unsigned __int16 *)v192 + 9) | (32 * (*((unsigned __int16 *)v192 + 9) - 65 < 0x1A))) == v270
              && (*((unsigned __int16 *)v192 + 10) | (32 * (*((unsigned __int16 *)v192 + 10) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99)
              && (*((unsigned __int16 *)v192 + 11) | (32 * (*((unsigned __int16 *)v192 + 11) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
              && (*((unsigned __int16 *)v192 + 12) | (32 * (*((unsigned __int16 *)v192 + 12) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
              && (*((unsigned __int16 *)v192 + 13) | (32 * (*((unsigned __int16 *)v192 + 13) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
              && (*((unsigned __int16 *)v192 + 14) | (32 * (*((unsigned __int16 *)v192 + 14) - 65 < 0x1A))) == v271)
            {
LABEL_594:
              v197 = *(_QWORD *)(v6 + 88);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v199 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v197 + 1960))(v197, &v627);
              this = (uint64_t)v627;
              v627 = 0;
              if (this)
              {
                if (*(_DWORD *)this == 2)
                {
                  this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v198);
                  if ((v199 & 1) == 0)
                    goto LABEL_2;
                  goto LABEL_598;
                }
                *(_DWORD *)this -= 2;
              }
              if ((v199 & 1) == 0)
                goto LABEL_2;
LABEL_598:
              if (!*(_QWORD *)(v6 + 488))
              {
                v200 = (_QWORD *)bmalloc::api::isoAllocate();
                v200[1] = 0x600000001;
                v200[2] = v6;
                *v200 = off_1E33DCA10;
                v201 = *(_DWORD **)(v6 + 88);
                if (v201)
                  ++v201[2];
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v201 + 1968))(v201, &v627);
                v203 = v627;
                v627 = 0;
                if (v203)
                {
                  if (*(_DWORD *)v203 == 2)
                    WTF::StringImpl::destroy(v203, v202);
                  else
                    *(_DWORD *)v203 -= 2;
                }
                if (v201[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v201 + 16))(v201);
                else
                  --v201[2];
                this = *(_QWORD *)(v6 + 488);
                *(_QWORD *)(v6 + 488) = v200;
                if (this)
                {
                  if (*(_DWORD *)(this + 8) == 1)
                    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                  else
                    --*(_DWORD *)(this + 8);
                }
                if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                {
                  this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                  if (this)
                  {
                    this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v521);
                    if (this)
                    {
                      this = *(_QWORD *)(this + 96);
                      if (this)
                        this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                    }
                  }
                }
              }
              v29 = *(_QWORD *)(v6 + 488);
              goto LABEL_1993;
            }
          }
        }
        if ((*((unsigned __int16 *)v192 + 1) | (32 * (*((unsigned __int16 *)v192 + 1) - 65 < 0x1A))) != v269)
          goto LABEL_2;
        if ((*((unsigned __int16 *)v192 + 2) | (32 * (*((unsigned __int16 *)v192 + 2) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
          goto LABEL_2;
        v272 = *((unsigned __int16 *)v192 + 3) | (32 * (*((unsigned __int16 *)v192 + 3) - 65 < 0x1A));
        if (v272 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
          goto LABEL_2;
        if ((*((unsigned __int16 *)v192 + 4) | (32 * (*((unsigned __int16 *)v192 + 4) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102))
          goto LABEL_2;
        v273 = *((unsigned __int16 *)v192 + 5) | (32 * (*((unsigned __int16 *)v192 + 5) - 65 < 0x1A));
        if (v273 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
          || (*((unsigned __int16 *)v192 + 6) | (32 * (*((unsigned __int16 *)v192 + 6) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
          || (*((unsigned __int16 *)v192 + 7) | (32 * (*((unsigned __int16 *)v192 + 7) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
          || (*((unsigned __int16 *)v192 + 8) | (32 * (*((unsigned __int16 *)v192 + 8) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
          || (*((unsigned __int16 *)v192 + 9) | (32 * (*((unsigned __int16 *)v192 + 9) - 65 < 0x1A))) != v272
          || (*((unsigned __int16 *)v192 + 10) | (32 * (*((unsigned __int16 *)v192 + 10) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
          || (*((unsigned __int16 *)v192 + 11) | (32 * (*((unsigned __int16 *)v192 + 11) - 65 < 0x1A))) != v273
          || (*((unsigned __int16 *)v192 + 12) | (32 * (*((unsigned __int16 *)v192 + 12) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
          || (*((unsigned __int16 *)v192 + 13) | (32 * (*((unsigned __int16 *)v192 + 13) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
        {
          goto LABEL_2;
        }
        v260 = *((unsigned __int16 *)v192 + 14) | (32 * (*((unsigned __int16 *)v192 + 14) - 65 < 0x1A));
      }
      if (v260 != *(unsigned __int8 *)(v193 + 100))
        goto LABEL_2;
      v261 = *(_QWORD *)(v6 + 88);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v263 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v261 + 1960))(v261, &v627);
      this = (uint64_t)v627;
      v627 = 0;
      if (!this)
        goto LABEL_775;
      if (*(_DWORD *)this == 2)
      {
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v262);
        if ((v263 & 1) == 0)
          goto LABEL_2;
      }
      else
      {
        *(_DWORD *)this -= 2;
LABEL_775:
        if ((v263 & 1) == 0)
          goto LABEL_2;
      }
      if (!*(_QWORD *)(v6 + 512))
      {
        v264 = (_QWORD *)bmalloc::api::isoAllocate();
        v264[1] = 0x900000001;
        v264[2] = v6;
        *v264 = off_1E33DCA70;
        v265 = *(_DWORD **)(v6 + 88);
        if (v265)
          ++v265[2];
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v265 + 1968))(v265, &v627);
        v267 = v627;
        v627 = 0;
        if (v267)
        {
          if (*(_DWORD *)v267 == 2)
            WTF::StringImpl::destroy(v267, v266);
          else
            *(_DWORD *)v267 -= 2;
        }
        if (v265[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v265 + 16))(v265);
        else
          --v265[2];
        this = *(_QWORD *)(v6 + 512);
        *(_QWORD *)(v6 + 512) = v264;
        if (this)
        {
          if (*(_DWORD *)(this + 8) == 1)
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
          else
            --*(_DWORD *)(this + 8);
        }
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
          if (this)
          {
            this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v545);
            if (this)
            {
              this = *(_QWORD *)(this + 96);
              if (this)
                this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
            }
          }
        }
      }
      v29 = *(_QWORD *)(v6 + 512);
      goto LABEL_1993;
    case 16:
      v44 = *(_DWORD *)(v10 + 16);
      v45 = *(unsigned __int8 **)(v10 + 8);
      if ((v44 & 4) != 0)
      {
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v45) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
          goto LABEL_1912;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88))
          goto LABEL_1912;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
          goto LABEL_1912;
        v46 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[3]);
        if (v46 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
          goto LABEL_1912;
        v47 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[4]);
        if (v47 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
          goto LABEL_1912;
        v48 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[5]);
        if (v48 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
          goto LABEL_1912;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105))
          goto LABEL_1912;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[7]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
          goto LABEL_1912;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[8]) != v46)
          goto LABEL_1912;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[9]) != v47)
          goto LABEL_1912;
        v49 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[10]);
        if (v49 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[11]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[12]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[13]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[14]) != v49)
        {
          goto LABEL_1912;
        }
        v50 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[15]);
      }
      else
      {
        if ((*(unsigned __int16 *)v45 | (32 * (*(unsigned __int16 *)v45 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
          goto LABEL_1912;
        if ((*((unsigned __int16 *)v45 + 1) | (32 * (*((unsigned __int16 *)v45 + 1) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88))
          goto LABEL_1912;
        if ((*((unsigned __int16 *)v45 + 2) | (32 * (*((unsigned __int16 *)v45 + 2) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
          goto LABEL_1912;
        v186 = *((unsigned __int16 *)v45 + 3) | (32 * (*((unsigned __int16 *)v45 + 3) - 65 < 0x1A));
        if (v186 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
          goto LABEL_1912;
        v187 = *((unsigned __int16 *)v45 + 4) | (32 * (*((unsigned __int16 *)v45 + 4) - 65 < 0x1A));
        if (v187 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
          goto LABEL_1912;
        v48 = *((unsigned __int16 *)v45 + 5) | (32 * (*((unsigned __int16 *)v45 + 5) - 65 < 0x1A));
        if (v48 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
          goto LABEL_1912;
        if ((*((unsigned __int16 *)v45 + 6) | (32 * (*((unsigned __int16 *)v45 + 6) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105))
          goto LABEL_1912;
        if ((*((unsigned __int16 *)v45 + 7) | (32 * (*((unsigned __int16 *)v45 + 7) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
          goto LABEL_1912;
        if ((*((unsigned __int16 *)v45 + 8) | (32 * (*((unsigned __int16 *)v45 + 8) - 65 < 0x1A))) != v186)
          goto LABEL_1912;
        if ((*((unsigned __int16 *)v45 + 9) | (32 * (*((unsigned __int16 *)v45 + 9) - 65 < 0x1A))) != v187)
          goto LABEL_1912;
        v188 = *((unsigned __int16 *)v45 + 10) | (32 * (*((unsigned __int16 *)v45 + 10) - 65 < 0x1A));
        if (v188 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
          || (*((unsigned __int16 *)v45 + 11) | (32 * (*((unsigned __int16 *)v45 + 11) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
          || (*((unsigned __int16 *)v45 + 12) | (32 * (*((unsigned __int16 *)v45 + 12) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
          || (*((unsigned __int16 *)v45 + 13) | (32 * (*((unsigned __int16 *)v45 + 13) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
          || (*((unsigned __int16 *)v45 + 14) | (32 * (*((unsigned __int16 *)v45 + 14) - 65 < 0x1A))) != v188)
        {
          goto LABEL_1912;
        }
        v50 = *((unsigned __int16 *)v45 + 15) | (32 * (*((unsigned __int16 *)v45 + 15) - 65 < 0x1A));
      }
      if (v50 == v48)
      {
        v51 = *(_QWORD *)(v6 + 88);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v53 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v51 + 1960))(v51, &v627);
        this = (uint64_t)v627;
        v627 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
          {
            this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v52);
            if ((v53 & 1) == 0)
              goto LABEL_2;
            goto LABEL_123;
          }
          *(_DWORD *)this -= 2;
        }
        if ((v53 & 1) == 0)
          goto LABEL_2;
LABEL_123:
        if (!*(_QWORD *)(v6 + 456))
        {
          v54 = (_QWORD *)bmalloc::api::isoAllocate();
          v54[1] = 0x200000001;
          v54[2] = v6;
          *v54 = off_1E33DC640;
          v55 = *(_DWORD **)(v6 + 88);
          if (v55)
            ++v55[2];
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v55 + 1968))(v55, &v627);
          v57 = v627;
          v627 = 0;
          if (v57)
          {
            if (*(_DWORD *)v57 == 2)
              WTF::StringImpl::destroy(v57, v56);
            else
              *(_DWORD *)v57 -= 2;
          }
          if (v55[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v55 + 16))(v55);
          else
            --v55[2];
          this = *(_QWORD *)(v6 + 456);
          *(_QWORD *)(v6 + 456) = v54;
          if (this)
          {
            if (*(_DWORD *)(this + 8) == 1)
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
            else
              --*(_DWORD *)(this + 8);
          }
          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
          {
            this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
            if (this)
            {
              this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v522);
              if (this)
              {
                this = *(_QWORD *)(this + 96);
                if (this)
                  this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
              }
            }
          }
        }
        v29 = *(_QWORD *)(v6 + 456);
        goto LABEL_1993;
      }
LABEL_1912:
      if ((v44 & 4) != 0)
      {
        v600 = MEMORY[0x1E0CBF868];
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v45) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
          goto LABEL_1968;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88))
          goto LABEL_1968;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
          goto LABEL_1968;
        v601 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[3]);
        if (v601 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
          goto LABEL_1968;
        v602 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[4]);
        if (v602 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
          goto LABEL_1968;
        v603 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[5]);
        if (v603 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
          goto LABEL_1968;
        v604 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[6]);
        if (v604 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[7]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[8]) != v603
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[9]) != v602
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[10]) != v601
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[11]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[12]) != v604
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[13]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[14]) != v602)
        {
          goto LABEL_1968;
        }
        v605 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v45[15]);
      }
      else
      {
        v600 = MEMORY[0x1E0CBF868];
        if ((*(unsigned __int16 *)v45 | (32 * (*(unsigned __int16 *)v45 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
          goto LABEL_1968;
        if ((*((unsigned __int16 *)v45 + 1) | (32 * (*((unsigned __int16 *)v45 + 1) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88))
          goto LABEL_1968;
        if ((*((unsigned __int16 *)v45 + 2) | (32 * (*((unsigned __int16 *)v45 + 2) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
          goto LABEL_1968;
        v614 = *((unsigned __int16 *)v45 + 3) | (32 * (*((unsigned __int16 *)v45 + 3) - 65 < 0x1A));
        if (v614 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
          goto LABEL_1968;
        v615 = *((unsigned __int16 *)v45 + 4) | (32 * (*((unsigned __int16 *)v45 + 4) - 65 < 0x1A));
        if (v615 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
          goto LABEL_1968;
        v616 = *((unsigned __int16 *)v45 + 5) | (32 * (*((unsigned __int16 *)v45 + 5) - 65 < 0x1A));
        if (v616 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
          goto LABEL_1968;
        v617 = *((unsigned __int16 *)v45 + 6) | (32 * (*((unsigned __int16 *)v45 + 6) - 65 < 0x1A));
        if (v617 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
          || (*((unsigned __int16 *)v45 + 7) | (32 * (*((unsigned __int16 *)v45 + 7) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
          || (*((unsigned __int16 *)v45 + 8) | (32 * (*((unsigned __int16 *)v45 + 8) - 65 < 0x1A))) != v616
          || (*((unsigned __int16 *)v45 + 9) | (32 * (*((unsigned __int16 *)v45 + 9) - 65 < 0x1A))) != v615
          || (*((unsigned __int16 *)v45 + 10) | (32 * (*((unsigned __int16 *)v45 + 10) - 65 < 0x1A))) != v614
          || (*((unsigned __int16 *)v45 + 11) | (32 * (*((unsigned __int16 *)v45 + 11) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
          || (*((unsigned __int16 *)v45 + 12) | (32 * (*((unsigned __int16 *)v45 + 12) - 65 < 0x1A))) != v617
          || (*((unsigned __int16 *)v45 + 13) | (32 * (*((unsigned __int16 *)v45 + 13) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
          || (*((unsigned __int16 *)v45 + 14) | (32 * (*((unsigned __int16 *)v45 + 14) - 65 < 0x1A))) != v615)
        {
          goto LABEL_1968;
        }
        v605 = *((unsigned __int16 *)v45 + 15) | (32 * (*((unsigned __int16 *)v45 + 15) - 65 < 0x1A));
      }
      if (v605 != *(unsigned __int8 *)(v600 + 109))
        goto LABEL_1968;
      v606 = *(_QWORD *)(v6 + 88);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v608 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v606 + 1960))(v606, &v627);
      this = (uint64_t)v627;
      v627 = 0;
      if (!this)
        goto LABEL_1933;
      if (*(_DWORD *)this == 2)
      {
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v607);
        if ((v608 & 1) == 0)
          goto LABEL_2;
      }
      else
      {
        *(_DWORD *)this -= 2;
LABEL_1933:
        if ((v608 & 1) == 0)
          goto LABEL_2;
      }
      if (!*(_QWORD *)(v6 + 536))
      {
        v609 = (_QWORD *)bmalloc::api::isoAllocate();
        v609[1] = 0xC00000001;
        v609[2] = v6;
        *v609 = off_1E33DCBC8;
        v610 = *(_DWORD **)(v6 + 88);
        if (v610)
          ++v610[2];
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v610 + 1968))(v610, &v627);
        v612 = v627;
        v627 = 0;
        if (v612)
        {
          if (*(_DWORD *)v612 == 2)
            WTF::StringImpl::destroy(v612, v611);
          else
            *(_DWORD *)v612 -= 2;
        }
        if (v610[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v610 + 16))(v610);
        else
          --v610[2];
        this = *(_QWORD *)(v6 + 536);
        *(_QWORD *)(v6 + 536) = v609;
        if (this)
        {
          if (*(_DWORD *)(this + 8) == 1)
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
          else
            --*(_DWORD *)(this + 8);
        }
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
          if (this)
          {
            this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v625);
            if (this)
            {
              this = *(_QWORD *)(this + 96);
              if (this)
                this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
            }
          }
        }
      }
      v29 = *(_QWORD *)(v6 + 536);
      goto LABEL_1993;
    case 18:
LABEL_1747:
      v554 = *(unsigned __int8 **)(v10 + 8);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
      {
        v555 = MEMORY[0x1E0CBF868];
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v554) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
          goto LABEL_1807;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v554[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88))
          goto LABEL_1807;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v554[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
          goto LABEL_1807;
        v556 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v554[3]);
        if (v556 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
          goto LABEL_1807;
        v557 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v554[4]);
        if (v557 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
          goto LABEL_1807;
        v558 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v554[5]);
        if (v558 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
          goto LABEL_1807;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v554[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120))
          goto LABEL_1807;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v554[7]) != v557)
          goto LABEL_1807;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v554[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117))
          goto LABEL_1807;
        v559 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v554[9]);
        if (v559 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v554[10]) != v558
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v554[11]) != v556
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v554[12]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v554[13]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v554[14]) != v559
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v554[15]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v554[16]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 49))
        {
          goto LABEL_1807;
        }
        v560 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v554[17]);
      }
      else
      {
        v555 = MEMORY[0x1E0CBF868];
        if ((*(unsigned __int16 *)v554 | (32 * (*(unsigned __int16 *)v554 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
          goto LABEL_1807;
        if ((*((unsigned __int16 *)v554 + 1) | (32 * (*((unsigned __int16 *)v554 + 1) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88))
          goto LABEL_1807;
        if ((*((unsigned __int16 *)v554 + 2) | (32 * (*((unsigned __int16 *)v554 + 2) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
          goto LABEL_1807;
        v569 = *((unsigned __int16 *)v554 + 3) | (32 * (*((unsigned __int16 *)v554 + 3) - 65 < 0x1A));
        if (v569 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
          goto LABEL_1807;
        v570 = *((unsigned __int16 *)v554 + 4) | (32 * (*((unsigned __int16 *)v554 + 4) - 65 < 0x1A));
        if (v570 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
          goto LABEL_1807;
        v571 = *((unsigned __int16 *)v554 + 5) | (32 * (*((unsigned __int16 *)v554 + 5) - 65 < 0x1A));
        if (v571 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
          goto LABEL_1807;
        if ((*((unsigned __int16 *)v554 + 6) | (32 * (*((unsigned __int16 *)v554 + 6) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120))
          goto LABEL_1807;
        if ((*((unsigned __int16 *)v554 + 7) | (32 * (*((unsigned __int16 *)v554 + 7) - 65 < 0x1A))) != v570)
          goto LABEL_1807;
        if ((*((unsigned __int16 *)v554 + 8) | (32 * (*((unsigned __int16 *)v554 + 8) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117))
          goto LABEL_1807;
        v572 = *((unsigned __int16 *)v554 + 9) | (32 * (*((unsigned __int16 *)v554 + 9) - 65 < 0x1A));
        if (v572 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
          || (*((unsigned __int16 *)v554 + 10) | (32 * (*((unsigned __int16 *)v554 + 10) - 65 < 0x1A))) != v571
          || (*((unsigned __int16 *)v554 + 11) | (32 * (*((unsigned __int16 *)v554 + 11) - 65 < 0x1A))) != v569
          || (*((unsigned __int16 *)v554 + 12) | (32 * (*((unsigned __int16 *)v554 + 12) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
          || (*((unsigned __int16 *)v554 + 13) | (32 * (*((unsigned __int16 *)v554 + 13) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
          || (*((unsigned __int16 *)v554 + 14) | (32 * (*((unsigned __int16 *)v554 + 14) - 65 < 0x1A))) != v572
          || (*((unsigned __int16 *)v554 + 15) | (32 * (*((unsigned __int16 *)v554 + 15) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
          || (*((unsigned __int16 *)v554 + 16) | (32 * (*((unsigned __int16 *)v554 + 16) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 49))
        {
          goto LABEL_1807;
        }
        v560 = *((unsigned __int16 *)v554 + 17) | (32 * (*((unsigned __int16 *)v554 + 17) - 65 < 0x1A));
      }
      if (v560 != *(unsigned __int8 *)(v555 + 54))
        goto LABEL_1807;
      v561 = *(_QWORD *)(v6 + 88);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v563 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v561 + 1960))(v561, &v627);
      this = (uint64_t)v627;
      v627 = 0;
      if (!this)
        goto LABEL_1770;
      if (*(_DWORD *)this == 2)
      {
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v562);
        if ((v563 & 1) == 0)
          goto LABEL_2;
      }
      else
      {
        *(_DWORD *)this -= 2;
LABEL_1770:
        if ((v563 & 1) == 0)
          goto LABEL_2;
      }
      if (!*(_QWORD *)(v6 + 584))
      {
        v564 = (_QWORD *)bmalloc::api::isoAllocate();
        v564[1] = 0x1200000001;
        v564[2] = v6;
        *v564 = off_1E33DCC88;
        v565 = *(_DWORD **)(v6 + 88);
        if (v565)
          ++v565[2];
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v565 + 1968))(v565, &v627);
        v567 = v627;
        v627 = 0;
        if (v567)
        {
          if (*(_DWORD *)v567 == 2)
            WTF::StringImpl::destroy(v567, v566);
          else
            *(_DWORD *)v567 -= 2;
        }
        if (v565[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v565 + 16))(v565);
        else
          --v565[2];
        this = *(_QWORD *)(v6 + 584);
        *(_QWORD *)(v6 + 584) = v564;
        if (this)
        {
          if (*(_DWORD *)(this + 8) == 1)
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
          else
            --*(_DWORD *)(this + 8);
        }
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
          if (this)
          {
            this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v598);
            if (this)
            {
              this = *(_QWORD *)(this + 96);
              if (this)
                this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
            }
          }
        }
      }
      v29 = *(_QWORD *)(v6 + 584);
      goto LABEL_1993;
    case 22:
      v72 = *(_DWORD *)(v10 + 16);
      v73 = *(unsigned __int8 **)(v10 + 8);
      if ((v72 & 4) != 0)
      {
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v73) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88)
          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
        {
          v74 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[3]);
          if (v74 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[4]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
          {
            v75 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[5]);
            if (v75 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
            {
              v76 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[6]);
              if (v76 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[7]) == v75)
              {
                v77 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[8]);
                if (v77 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[9]) == v74
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[10]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 98)
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[11]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 117))
                {
                  v78 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[12]);
                  if (v78 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[13]) == v78)
                  {
                    this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101);
                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[14]) == (_DWORD)this
                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[15]) == v77
                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[16]) == v74
                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[17]) == v78
                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[18]) == v76
                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[19]) == v75
                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[20]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[21]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                    {
                      goto LABEL_201;
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        if ((*(unsigned __int16 *)v73 | (32 * (*(unsigned __int16 *)v73 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
          && (*((unsigned __int16 *)v73 + 1) | (32 * (*((unsigned __int16 *)v73 + 1) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88)
          && (*((unsigned __int16 *)v73 + 2) | (32 * (*((unsigned __int16 *)v73 + 2) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
        {
          v274 = *((unsigned __int16 *)v73 + 3) | (32 * (*((unsigned __int16 *)v73 + 3) - 65 < 0x1A));
          if (v274 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
            && (*((unsigned __int16 *)v73 + 4) | (32 * (*((unsigned __int16 *)v73 + 4) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
          {
            v275 = *((unsigned __int16 *)v73 + 5) | (32 * (*((unsigned __int16 *)v73 + 5) - 65 < 0x1A));
            if (v275 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
            {
              v276 = *((unsigned __int16 *)v73 + 6) | (32 * (*((unsigned __int16 *)v73 + 6) - 65 < 0x1A));
              if (v276 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                && (*((unsigned __int16 *)v73 + 7) | (32 * (*((unsigned __int16 *)v73 + 7) - 65 < 0x1A))) == v275)
              {
                v277 = *((unsigned __int16 *)v73 + 8) | (32 * (*((unsigned __int16 *)v73 + 8) - 65 < 0x1A));
                if (v277 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                  && (*((unsigned __int16 *)v73 + 9) | (32 * (*((unsigned __int16 *)v73 + 9) - 65 < 0x1A))) == v274
                  && (*((unsigned __int16 *)v73 + 10) | (32 * (*((unsigned __int16 *)v73 + 10) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
                  && (*((unsigned __int16 *)v73 + 11) | (32 * (*((unsigned __int16 *)v73 + 11) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117))
                {
                  v278 = *((unsigned __int16 *)v73 + 12) | (32
                                                          * (*((unsigned __int16 *)v73 + 12) - 65 < 0x1A));
                  if (v278 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
                    && (*((unsigned __int16 *)v73 + 13) | (32
                                                         * (*((unsigned __int16 *)v73 + 13) - 65 < 0x1A))) == v278
                    && (*((unsigned __int16 *)v73 + 14) | (32
                                                         * (*((unsigned __int16 *)v73 + 14) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                    && (*((unsigned __int16 *)v73 + 15) | (32
                                                         * (*((unsigned __int16 *)v73 + 15) - 65 < 0x1A))) == v277
                    && (*((unsigned __int16 *)v73 + 16) | (32
                                                         * (*((unsigned __int16 *)v73 + 16) - 65 < 0x1A))) == v274
                    && (*((unsigned __int16 *)v73 + 17) | (32
                                                         * (*((unsigned __int16 *)v73 + 17) - 65 < 0x1A))) == v278
                    && (*((unsigned __int16 *)v73 + 18) | (32
                                                         * (*((unsigned __int16 *)v73 + 18) - 65 < 0x1A))) == v276
                    && (*((unsigned __int16 *)v73 + 19) | (32
                                                         * (*((unsigned __int16 *)v73 + 19) - 65 < 0x1A))) == v275
                    && (*((unsigned __int16 *)v73 + 20) | (32
                                                         * (*((unsigned __int16 *)v73 + 20) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
                    && (*((unsigned __int16 *)v73 + 21) | (32
                                                         * (*((unsigned __int16 *)v73 + 21) - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                  {
LABEL_201:
                    v79 = *(_QWORD *)(v6 + 88);
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v81 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v79 + 1960))(v79, &v627);
                    this = (uint64_t)v627;
                    v627 = 0;
                    if (this)
                    {
                      if (*(_DWORD *)this == 2)
                      {
                        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v80);
                        if ((v81 & 1) == 0)
                          goto LABEL_2;
                        goto LABEL_205;
                      }
                      *(_DWORD *)this -= 2;
                    }
                    if ((v81 & 1) == 0)
                      goto LABEL_2;
LABEL_205:
                    if (!*(_QWORD *)(v6 + 464))
                    {
                      v82 = (WebCore::EXTColorBufferFloat *)bmalloc::api::isoAllocate();
                      WebCore::EXTColorBufferFloat::EXTColorBufferFloat(v82, (WebCore::WebGLRenderingContextBase *)v6);
                      this = *(_QWORD *)(v6 + 464);
                      *(_QWORD *)(v6 + 464) = v82;
                      if (this)
                      {
                        if (*(_DWORD *)(this + 8) == 1)
                          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                        else
                          --*(_DWORD *)(this + 8);
                      }
                      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                      {
                        this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                        if (this)
                        {
                          this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v527);
                          if (this)
                          {
                            this = *(_QWORD *)(this + 96);
                            if (this)
                              this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                          }
                        }
                      }
                    }
                    v29 = *(_QWORD *)(v6 + 464);
                    goto LABEL_1993;
                  }
                }
              }
            }
          }
        }
        v72 = *(_DWORD *)(v10 + 16);
        v73 = *(unsigned __int8 **)(v10 + 8);
      }
      if ((v72 & 4) != 0)
      {
        v279 = MEMORY[0x1E0CBF868];
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v73) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
          goto LABEL_1423;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88))
          goto LABEL_1423;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
          goto LABEL_1423;
        v280 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[3]);
        if (v280 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
          goto LABEL_1423;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
          goto LABEL_1423;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[5]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
          goto LABEL_1423;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
          goto LABEL_1423;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[7]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
          goto LABEL_1423;
        v281 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[8]);
        if (v281 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
          goto LABEL_1423;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[9]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
          goto LABEL_1423;
        v282 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[10]);
        if (v282 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 118))
          goto LABEL_1423;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[11]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
          goto LABEL_1423;
        v283 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[12]);
        if (v283 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[13]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[14]) != v282
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[15]) != v281
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[16]) != v280
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[17]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[18]) != v281
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[19]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[20]) != v283)
        {
          goto LABEL_1423;
        }
        v284 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v73[21]);
      }
      else
      {
        v279 = MEMORY[0x1E0CBF868];
        if ((*(unsigned __int16 *)v73 | (32 * (*(unsigned __int16 *)v73 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
          goto LABEL_1423;
        if ((*((unsigned __int16 *)v73 + 1) | (32 * (*((unsigned __int16 *)v73 + 1) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88))
          goto LABEL_1423;
        if ((*((unsigned __int16 *)v73 + 2) | (32 * (*((unsigned __int16 *)v73 + 2) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
          goto LABEL_1423;
        v456 = *((unsigned __int16 *)v73 + 3) | (32 * (*((unsigned __int16 *)v73 + 3) - 65 < 0x1A));
        if (v456 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
          goto LABEL_1423;
        if ((*((unsigned __int16 *)v73 + 4) | (32 * (*((unsigned __int16 *)v73 + 4) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
          goto LABEL_1423;
        if ((*((unsigned __int16 *)v73 + 5) | (32 * (*((unsigned __int16 *)v73 + 5) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
          goto LABEL_1423;
        if ((*((unsigned __int16 *)v73 + 6) | (32 * (*((unsigned __int16 *)v73 + 6) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
          goto LABEL_1423;
        if ((*((unsigned __int16 *)v73 + 7) | (32 * (*((unsigned __int16 *)v73 + 7) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
          goto LABEL_1423;
        v457 = *((unsigned __int16 *)v73 + 8) | (32 * (*((unsigned __int16 *)v73 + 8) - 65 < 0x1A));
        if (v457 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
          goto LABEL_1423;
        if ((*((unsigned __int16 *)v73 + 9) | (32 * (*((unsigned __int16 *)v73 + 9) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
          goto LABEL_1423;
        v458 = *((unsigned __int16 *)v73 + 10) | (32 * (*((unsigned __int16 *)v73 + 10) - 65 < 0x1A));
        if (v458 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 118))
          goto LABEL_1423;
        if ((*((unsigned __int16 *)v73 + 11) | (32 * (*((unsigned __int16 *)v73 + 11) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
          goto LABEL_1423;
        v459 = *((unsigned __int16 *)v73 + 12) | (32 * (*((unsigned __int16 *)v73 + 12) - 65 < 0x1A));
        if (v459 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
          || (*((unsigned __int16 *)v73 + 13) | (32 * (*((unsigned __int16 *)v73 + 13) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
          || (*((unsigned __int16 *)v73 + 14) | (32 * (*((unsigned __int16 *)v73 + 14) - 65 < 0x1A))) != v458
          || (*((unsigned __int16 *)v73 + 15) | (32 * (*((unsigned __int16 *)v73 + 15) - 65 < 0x1A))) != v457
          || (*((unsigned __int16 *)v73 + 16) | (32 * (*((unsigned __int16 *)v73 + 16) - 65 < 0x1A))) != v456
          || (*((unsigned __int16 *)v73 + 17) | (32 * (*((unsigned __int16 *)v73 + 17) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
          || (*((unsigned __int16 *)v73 + 18) | (32 * (*((unsigned __int16 *)v73 + 18) - 65 < 0x1A))) != v457
          || (*((unsigned __int16 *)v73 + 19) | (32 * (*((unsigned __int16 *)v73 + 19) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
          || (*((unsigned __int16 *)v73 + 20) | (32 * (*((unsigned __int16 *)v73 + 20) - 65 < 0x1A))) != v459)
        {
          goto LABEL_1423;
        }
        v284 = *((unsigned __int16 *)v73 + 21) | (32 * (*((unsigned __int16 *)v73 + 21) - 65 < 0x1A));
      }
      if (v284 != *(unsigned __int8 *)(v279 + 104))
        goto LABEL_1423;
      v285 = *(_QWORD *)(v6 + 88);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v287 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v285 + 1960))(v285, &v627);
      this = (uint64_t)v627;
      v627 = 0;
      if (!this)
        goto LABEL_894;
      if (*(_DWORD *)this == 2)
      {
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v286);
        if ((v287 & 1) == 0)
          goto LABEL_2;
      }
      else
      {
        *(_DWORD *)this -= 2;
LABEL_894:
        if ((v287 & 1) == 0)
          goto LABEL_2;
      }
      if (!*(_QWORD *)(v6 + 480))
      {
        v288 = (_QWORD *)bmalloc::api::isoAllocate();
        v288[1] = 0x500000001;
        v288[2] = v6;
        *v288 = off_1E33DC9F0;
        v289 = *(_DWORD **)(v6 + 88);
        if (v289)
          ++v289[2];
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v289 + 1968))(v289, &v627);
        v291 = v627;
        v627 = 0;
        if (v291)
        {
          if (*(_DWORD *)v291 == 2)
            WTF::StringImpl::destroy(v291, v290);
          else
            *(_DWORD *)v291 -= 2;
        }
        if (v289[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v289 + 16))(v289);
        else
          --v289[2];
        this = *(_QWORD *)(v6 + 480);
        *(_QWORD *)(v6 + 480) = v288;
        if (this)
        {
          if (*(_DWORD *)(this + 8) == 1)
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
          else
            --*(_DWORD *)(this + 8);
        }
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
          if (this)
          {
            this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v542);
            if (this)
            {
              this = *(_QWORD *)(this + 96);
              if (this)
                this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
            }
          }
        }
      }
      v29 = *(_QWORD *)(v6 + 480);
      goto LABEL_1993;
    case 24:
LABEL_638:
      v219 = *(_DWORD *)(v10 + 16);
      v220 = *(unsigned __int8 **)(v10 + 8);
      if ((v219 & 4) != 0)
      {
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v220) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
          goto LABEL_1280;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88))
          goto LABEL_1280;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
          goto LABEL_1280;
        v221 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[3]);
        if (v221 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
          goto LABEL_1280;
        v222 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[4]);
        if (v222 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
          goto LABEL_1280;
        v223 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[5]);
        if (v223 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
          goto LABEL_1280;
        v224 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[6]);
        if (v224 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
          goto LABEL_1280;
        this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 121);
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[7]) != (_DWORD)this)
          goto LABEL_1280;
        this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103);
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[8]) != (_DWORD)this)
          goto LABEL_1280;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[9]) != v223)
          goto LABEL_1280;
        this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110);
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[10]) != (_DWORD)this)
          goto LABEL_1280;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[11]) != v221)
          goto LABEL_1280;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[12]) != v223)
          goto LABEL_1280;
        v225 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[13]);
        if (v225 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[14]) != v225
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[15]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[16]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[17]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[18]) != v221
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[19]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[20]) != v224
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[21]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[22]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[23]) != v222)
        {
          goto LABEL_1280;
        }
      }
      else
      {
        if ((*(unsigned __int16 *)v220 | (32 * (*(unsigned __int16 *)v220 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
          goto LABEL_1254;
        v295 = 1u;
        do
        {
          if (v295 == 24)
            goto LABEL_663;
          v296 = *(unsigned __int16 *)&v220[2 * v295] | (32
                                                       * (*(unsigned __int16 *)&v220[2 * v295] - 65 < 0x1A));
          v297 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aExtPolygonOffs[v295++]);
        }
        while (v296 == v297);
        if ((unint64_t)(v295 - 2) < 0x17)
        {
          v11 = 0;
          switch(v13)
          {
            case 24:
              goto LABEL_1254;
            case 25:
            case 26:
            case 29:
            case 31:
            case 33:
            case 34:
            case 35:
            case 36:
              goto LABEL_9;
            case 27:
              goto LABEL_1036;
            case 28:
              goto LABEL_681;
            case 30:
              goto LABEL_935;
            case 32:
              goto LABEL_958;
            case 37:
              goto LABEL_1255;
            default:
              if (v13 == 18)
                goto LABEL_1747;
              goto LABEL_9;
          }
        }
      }
LABEL_663:
      v226 = *(_QWORD *)(v6 + 88);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v228 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v226 + 1960))(v226, &v627);
      this = (uint64_t)v627;
      v627 = 0;
      if (!this)
        goto LABEL_666;
      if (*(_DWORD *)this == 2)
      {
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v227);
        if ((v228 & 1) == 0)
          goto LABEL_2;
      }
      else
      {
        *(_DWORD *)this -= 2;
LABEL_666:
        if ((v228 & 1) == 0)
          goto LABEL_2;
      }
      if (!*(_QWORD *)(v6 + 528))
      {
        v229 = (_QWORD *)bmalloc::api::isoAllocate();
        v229[1] = 0xB00000001;
        v229[2] = v6;
        *v229 = off_1E33DCBA8;
        v230 = *(_DWORD **)(v6 + 88);
        if (v230)
          ++v230[2];
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v230 + 1968))(v230, &v627);
        v232 = v627;
        v627 = 0;
        if (v232)
        {
          if (*(_DWORD *)v232 == 2)
            WTF::StringImpl::destroy(v232, v231);
          else
            *(_DWORD *)v232 -= 2;
        }
        if (v230[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v230 + 16))(v230);
        else
          --v230[2];
        this = *(_QWORD *)(v6 + 528);
        *(_QWORD *)(v6 + 528) = v229;
        if (this)
        {
          if (*(_DWORD *)(this + 8) == 1)
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
          else
            --*(_DWORD *)(this + 8);
        }
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
          if (this)
          {
            this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v535);
            if (this)
            {
              this = *(_QWORD *)(this + 96);
              if (this)
                this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
            }
          }
        }
      }
      v29 = *(_QWORD *)(v6 + 528);
      goto LABEL_1993;
    case 27:
      v59 = *(_DWORD *)(v10 + 16);
      v60 = *(unsigned __int8 **)(v10 + 8);
      if ((v59 & 4) != 0)
      {
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v60) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88)
          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
        {
          v61 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[3]);
          if (v61 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[4]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
          {
            v62 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[5]);
            if (v62 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
            {
              v63 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[6]);
              if (v63 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[7]) == v62)
              {
                v64 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[8]);
                if (v64 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[9]) == v61)
                {
                  this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98);
                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[10]) == (_DWORD)this)
                  {
                    this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117);
                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[11]) == (_DWORD)this)
                    {
                      v65 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[12]);
                      this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102);
                      if (v65 == (_DWORD)this)
                      {
                        this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[13]);
                        if ((_DWORD)this == v65)
                        {
                          this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[14]);
                          v9 = (WebCore::GraphicsContextGL *)*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101);
                          if ((_DWORD)this == (_DWORD)v9)
                          {
                            this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[15]);
                            if ((_DWORD)this == v64 && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[16]) == v61)
                            {
                              this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104);
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[17]) == (_DWORD)this)
                              {
                                v66 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[18]);
                                this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97);
                                if (v66 == (_DWORD)this)
                                {
                                  this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[19]);
                                  if ((_DWORD)this == v63)
                                  {
                                    this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[20]);
                                    if ((_DWORD)this == v65)
                                    {
                                      this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[21]);
                                      if ((_DWORD)this == v61
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[22]) == v65
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[23]) == v63
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[24]) == v62
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[25]) == v66
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[26]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                                      {
LABEL_164:
                                        this = WebCore::EXTColorBufferHalfFloat::supported(*(WebCore::EXTColorBufferHalfFloat **)(v6 + 88), v9);
                                        if ((this & 1) == 0)
                                          goto LABEL_2;
                                        if (!*(_QWORD *)(v6 + 472))
                                        {
                                          v67 = (_QWORD *)bmalloc::api::isoAllocate();
                                          v67[1] = 0x400000001;
                                          v67[2] = v6;
                                          *v67 = off_1E33DC9D0;
                                          v68 = *(_DWORD **)(v6 + 88);
                                          if (v68)
                                            ++v68[2];
                                          WTF::StringImpl::createWithoutCopyingNonEmpty();
                                          (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v68 + 1968))(v68, &v627);
                                          v70 = v627;
                                          v627 = 0;
                                          if (v70)
                                          {
                                            if (*(_DWORD *)v70 == 2)
                                              WTF::StringImpl::destroy(v70, v69);
                                            else
                                              *(_DWORD *)v70 -= 2;
                                          }
                                          if (v68[2] == 1)
                                            (*(void (**)(_DWORD *))(*(_QWORD *)v68 + 16))(v68);
                                          else
                                            --v68[2];
                                          this = *(_QWORD *)(v6 + 472);
                                          *(_QWORD *)(v6 + 472) = v67;
                                          if (this)
                                          {
                                            if (*(_DWORD *)(this + 8) == 1)
                                              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                                            else
                                              --*(_DWORD *)(this + 8);
                                          }
                                          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                                          {
                                            this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                                            if (this)
                                            {
                                              this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v537);
                                              if (this)
                                              {
                                                this = *(_QWORD *)(this + 96);
                                                if (this)
                                                  this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                                              }
                                            }
                                          }
                                        }
                                        v29 = *(_QWORD *)(v6 + 472);
                                        goto LABEL_1993;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      else
      {
        if ((*(unsigned __int16 *)v60 | (32 * (*(unsigned __int16 *)v60 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
        {
          v189 = 1u;
          while (v189 != 27)
          {
            v190 = *(unsigned __int16 *)&v60[2 * v189] | (32
                                                        * (*(unsigned __int16 *)&v60[2 * v189] - 65 < 0x1A));
            v191 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aExtColorBuffer[v189++]);
            if (v190 != v191)
            {
              if ((unint64_t)(v189 - 2) < 0x1A)
              {
                v11 = 0;
                switch(v13)
                {
                  case 15:
                    goto LABEL_578;
                  case 16:
                    v44 = *(_DWORD *)(v10 + 16);
                    v45 = *(unsigned __int8 **)(v10 + 8);
                    goto LABEL_1912;
                  case 18:
                    goto LABEL_1747;
                  case 24:
                    goto LABEL_638;
                  case 27:
                    goto LABEL_1036;
                  case 28:
                    goto LABEL_680;
                  case 30:
                    goto LABEL_935;
                  case 31:
                    goto LABEL_611;
                  case 32:
                    goto LABEL_958;
                  case 37:
                    goto LABEL_1255;
                  default:
                    goto LABEL_9;
                }
              }
              goto LABEL_164;
            }
          }
          goto LABEL_164;
        }
LABEL_1036:
        v59 = *(_DWORD *)(v10 + 16);
        v60 = *(unsigned __int8 **)(v10 + 8);
      }
      if ((v59 & 4) != 0)
      {
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v60) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 75))
          goto LABEL_2;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 72))
          goto LABEL_2;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 82))
          goto LABEL_2;
        v341 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[3]);
        if (v341 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
          goto LABEL_2;
        v342 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[4]);
        if (v342 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
          goto LABEL_2;
        v343 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[5]);
        if (v343 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
          goto LABEL_2;
        v344 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[6]);
        if (v344 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
          goto LABEL_2;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[7]) != v343)
          goto LABEL_2;
        v345 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[8]);
        if (v345 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
          goto LABEL_2;
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[9]) != v345)
          goto LABEL_2;
        v346 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[10]);
        if (v346 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[11]) != v345
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[12]) != v341
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[13]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[14]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[15]) != v343
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[16]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[17]) != v346
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[18]) != v344
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[19]) != v341
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[20]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[21]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[22]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[23]) != v342
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[24]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[25]) != v345
          || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v60[26]) != v346)
        {
          goto LABEL_2;
        }
      }
      else
      {
        if ((*(unsigned __int16 *)v60 | (32 * (*(unsigned __int16 *)v60 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 75))
          goto LABEL_2;
        v405 = 1u;
        do
        {
          if (v405 == 27)
            goto LABEL_1065;
          v406 = *(unsigned __int16 *)&v60[2 * v405] | (32
                                                      * (*(unsigned __int16 *)&v60[2 * v405] - 65 < 0x1A));
          v407 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aKhrParallelSha[v405++]);
        }
        while (v406 == v407);
        if ((unint64_t)(v405 - 2) < 0x1A)
          goto LABEL_1252;
      }
LABEL_1065:
      v347 = *(_QWORD *)(v6 + 88);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v349 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v347 + 1960))(v347, &v627);
      this = (uint64_t)v627;
      v627 = 0;
      if (!this)
        goto LABEL_1068;
      if (*(_DWORD *)this == 2)
      {
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v348);
        if ((v349 & 1) == 0)
          goto LABEL_2;
      }
      else
      {
        *(_DWORD *)this -= 2;
LABEL_1068:
        if ((v349 & 1) == 0)
          goto LABEL_2;
      }
      if (!*(_QWORD *)(v6 + 600))
      {
        v350 = (_QWORD *)bmalloc::api::isoAllocate();
        v350[1] = 0x1400000001;
        v350[2] = v6;
        *v350 = off_1E33DD118;
        v351 = *(_DWORD **)(v6 + 88);
        if (v351)
          ++v351[2];
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v351 + 1968))(v351, &v627);
        v353 = v627;
        v627 = 0;
        if (v353)
        {
          if (*(_DWORD *)v353 == 2)
            WTF::StringImpl::destroy(v353, v352);
          else
            *(_DWORD *)v353 -= 2;
        }
        if (v351[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v351 + 16))(v351);
        else
          --v351[2];
        this = *(_QWORD *)(v6 + 600);
        *(_QWORD *)(v6 + 600) = v350;
        if (this)
        {
          if (*(_DWORD *)(this + 8) == 1)
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
          else
            --*(_DWORD *)(this + 8);
        }
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
          if (this)
          {
            this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v546);
            if (this)
            {
              this = *(_QWORD *)(this + 96);
              if (this)
                this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
            }
          }
        }
      }
      v29 = *(_QWORD *)(v6 + 600);
      goto LABEL_1993;
    case 28:
LABEL_680:
      v219 = *(_DWORD *)(v10 + 16);
      v220 = *(unsigned __int8 **)(v10 + 8);
LABEL_681:
      if ((v219 & 4) != 0)
      {
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v220) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
        {
          v234 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 88);
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[1]) == v234
            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
          {
            v235 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[3]);
            if (v235 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
            {
              v236 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[4]);
              if (v236 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
              {
                v237 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[5]);
                if (v237 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[6]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 120)
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[7]) == v236
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[8]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 117))
                {
                  v9 = (WebCore::GraphicsContextGL *)*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[9]);
                  if ((_DWORD)v9 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[10]) == v237
                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[11]) == v235)
                  {
                    v238 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[12]);
                    if (v238 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
                    {
                      this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[13]);
                      if ((_DWORD)this == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[14]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109))
                      {
                        v239 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[15]);
                        if (v239 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[16]) == (_DWORD)v9)
                        {
                          v9 = (WebCore::GraphicsContextGL *)*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[17]);
                          if ((_DWORD)v9 == v237)
                          {
                            v240 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[18]);
                            v9 = (WebCore::GraphicsContextGL *)*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115);
                            if (v240 == (_DWORD)v9)
                            {
                              v9 = (WebCore::GraphicsContextGL *)*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[19]);
                              if ((_DWORD)v9 == v240)
                              {
                                v9 = (WebCore::GraphicsContextGL *)*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105);
                                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[20]) == (_DWORD)v9
                                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[21]) == (_DWORD)this)
                                {
                                  this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110);
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[22]) == (_DWORD)this
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[23]) == v235
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[24]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[25]) == v239
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[26]) == v236
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[27]) == v238)
                                  {
                                    goto LABEL_710;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[1]) == v234
            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 84))
          {
            v246 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[3]);
            if (v246 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
            {
              v247 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[4]);
              if (v247 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
              {
                v248 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[5]);
                if (v248 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[6]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 120)
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[7]) == v247
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[8]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 117))
                {
                  v249 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[9]);
                  if (v249 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[10]) == v248
                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[11]) == v246)
                  {
                    v250 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[12]);
                    if (v250 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
                    {
                      v251 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[13]);
                      this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111);
                      if (v251 == (_DWORD)this)
                      {
                        this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[14]);
                        v9 = (WebCore::GraphicsContextGL *)*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109);
                        if ((_DWORD)this == (_DWORD)v9)
                        {
                          this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[15]);
                          v9 = (WebCore::GraphicsContextGL *)*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112);
                          if ((_DWORD)this == (_DWORD)v9)
                          {
                            this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[16]);
                            if ((_DWORD)this == v249)
                            {
                              this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[17]);
                              if ((_DWORD)this == v248)
                              {
                                v252 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[18]);
                                this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115);
                                if (v252 == (_DWORD)this)
                                {
                                  this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[19]);
                                  if ((_DWORD)this == v252)
                                  {
                                    this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105);
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[20]) == (_DWORD)this
                                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[21]) == v251
                                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[22]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
                                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[23]) == v246
                                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[24]) == v249
                                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[25]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103)
                                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[26]) == v247
                                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[27]) == v250)
                                    {
LABEL_747:
                                      v253 = *(_QWORD *)(v6 + 88);
                                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                                      v255 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v253 + 1960))(v253, &v627);
                                      this = (uint64_t)v627;
                                      v627 = 0;
                                      if (this)
                                      {
                                        if (*(_DWORD *)this == 2)
                                        {
                                          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v254);
                                          if ((v255 & 1) == 0)
                                            goto LABEL_2;
                                          goto LABEL_751;
                                        }
                                        *(_DWORD *)this -= 2;
                                      }
                                      if ((v255 & 1) == 0)
                                        goto LABEL_2;
LABEL_751:
                                      if (!*(_QWORD *)(v6 + 560))
                                      {
                                        v256 = (WebCore::EXTTextureCompressionRGTC *)bmalloc::api::isoAllocate();
                                        WebCore::EXTTextureCompressionRGTC::EXTTextureCompressionRGTC(v256, (WebCore::WebGLRenderingContextBase *)v6);
                                        this = *(_QWORD *)(v6 + 560);
                                        *(_QWORD *)(v6 + 560) = v256;
                                        if (this)
                                        {
                                          if (*(_DWORD *)(this + 8) == 1)
                                            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                                          else
                                            --*(_DWORD *)(this + 8);
                                        }
                                        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                                        {
                                          this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                                          if (this)
                                          {
                                            this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v549);
                                            if (this)
                                            {
                                              this = *(_QWORD *)(this + 96);
                                              if (this)
                                                this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                                            }
                                          }
                                        }
                                      }
                                      v29 = *(_QWORD *)(v6 + 560);
                                      goto LABEL_1993;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_981:
        v124 = *(_DWORD *)(v10 + 16);
        v125 = *(unsigned __int8 **)(v10 + 8);
        if ((v124 & 4) != 0)
        {
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v125) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87)
            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66)
            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[3]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71)
            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[4]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
          {
            v330 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[5]);
            if (v330 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
            {
              v331 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[6]);
              if (v331 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99)
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[7]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                             + 111)
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[8]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                             + 109)
                && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[9]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                             + 112))
              {
                v332 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[10]);
                if (v332 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                {
                  v333 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[11]);
                  if (v333 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                  {
                    v334 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[12]);
                    if (v334 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[13]) == v334
                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[14]) == v333
                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[15]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[16]) == v330)
                    {
                      v335 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[17]);
                      if (v335 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[18]) == v333
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[19]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[20]) == v335
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[21]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[22]) == v332
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[23]) == v333
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[24]) == v330
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[25]) == v333
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[26]) == v335
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[27]) == v331)
                      {
                        goto LABEL_1010;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          v126 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87);
          if (v126 == (unsigned __int16)(*(_WORD *)v125 | (32 * (*(unsigned __int16 *)v125 - 65 < 0x1A))))
          {
            v377 = 1u;
            while (v377 != 28)
            {
              v378 = *(unsigned __int16 *)&v125[2 * v377] | (32
                                                           * (*(unsigned __int16 *)&v125[2 * v377] - 65 < 0x1A));
              v379 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aWebglCompresse_0[v377++]);
              if (v378 != v379)
              {
                if ((unint64_t)(v377 - 2) >= 0x1B)
                  break;
                goto LABEL_1152;
              }
            }
LABEL_1010:
            v336 = *(_QWORD *)(v6 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v338 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v336 + 1960))(v336, &v627);
            this = (uint64_t)v627;
            v627 = 0;
            if (this)
            {
              if (*(_DWORD *)this == 2)
              {
                this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v337);
                if ((v338 & 1) == 0)
                  goto LABEL_2;
LABEL_1014:
                if (!*(_QWORD *)(v6 + 736))
                {
                  v339 = (WebCore::WebGLCompressedTextureETC *)bmalloc::api::isoAllocate();
                  WebCore::WebGLCompressedTextureETC::WebGLCompressedTextureETC(v339, (WebCore::WebGLRenderingContextBase *)v6);
                  this = *(_QWORD *)(v6 + 736);
                  *(_QWORD *)(v6 + 736) = v339;
                  if (this)
                  {
                    if (*(_DWORD *)(this + 8) == 1)
                      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                    else
                      --*(_DWORD *)(this + 8);
                  }
                  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                  {
                    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                    if (this)
                    {
                      this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v544);
                      if (this)
                      {
                        this = *(_QWORD *)(this + 96);
                        if (this)
                          this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                      }
                    }
                  }
                }
                v29 = *(_QWORD *)(v6 + 736);
                goto LABEL_1993;
              }
              *(_DWORD *)this -= 2;
            }
            if ((v338 & 1) == 0)
              goto LABEL_2;
            goto LABEL_1014;
          }
        }
LABEL_1193:
        v391 = *(unsigned __int8 **)(v10 + 8);
        if ((*(_BYTE *)(v10 + 16) & 4) != 0)
        {
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v391) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
            goto LABEL_2;
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v391[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
            goto LABEL_2;
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v391[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
            goto LABEL_2;
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v391[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
            goto LABEL_2;
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v391[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
            goto LABEL_2;
          v392 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v391[5]);
          if (v392 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
            goto LABEL_2;
          v393 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v391[6]);
          if (v393 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
            goto LABEL_2;
          v394 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v391[7]);
          if (v394 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
            goto LABEL_2;
          v395 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v391[8]);
          if (v395 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
            goto LABEL_2;
          v396 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v391[9]);
          if (v396 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v391[10]) != v394
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v391[11]) != v393
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v391[12]) != v392
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v391[13]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v391[14]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v391[15]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v391[16]) != v393
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v391[17]) != v394
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v391[18]) != v396
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v391[19]) != v392
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v391[20]) != v394
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v391[21]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v391[22]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v391[23]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v391[24]) != v395
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v391[25]) != v394
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v391[26]) != v395
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v391[27]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
          {
            goto LABEL_2;
          }
        }
        else
        {
          if ((*(unsigned __int16 *)v391 | (32 * (*(unsigned __int16 *)v391 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
            goto LABEL_2;
          v513 = 1u;
          while (v513 != 28)
          {
            v514 = *(unsigned __int16 *)&v391[2 * v513] | (32
                                                         * (*(unsigned __int16 *)&v391[2 * v513] - 65 < 0x1A));
            v515 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aWebglRenderSha[v513++]);
            if (v514 != v515)
            {
              if ((unint64_t)(v513 - 2) < 0x1B)
                goto LABEL_2;
              break;
            }
          }
        }
        v397 = *(_QWORD *)(v6 + 88);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v399 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v397 + 1960))(v397, &v627);
        this = (uint64_t)v627;
        v627 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
          {
            this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v398);
            if ((v399 & 1) == 0)
              goto LABEL_2;
LABEL_1226:
            if (!*(_QWORD *)(v6 + 856))
            {
              v400 = (_QWORD *)bmalloc::api::isoAllocate();
              v400[1] = 0x3400000001;
              v400[2] = v6;
              *v400 = off_1E33DE640;
              v401 = *(_DWORD **)(v6 + 88);
              if (v401)
                ++v401[2];
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v401 + 1968))(v401, &v627);
              v403 = v627;
              v627 = 0;
              if (v403)
              {
                if (*(_DWORD *)v403 == 2)
                  WTF::StringImpl::destroy(v403, v402);
                else
                  *(_DWORD *)v403 -= 2;
              }
              if (v401[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v401 + 16))(v401);
              else
                --v401[2];
              this = *(_QWORD *)(v6 + 856);
              *(_QWORD *)(v6 + 856) = v400;
              if (this)
              {
                if (*(_DWORD *)(this + 8) == 1)
                  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                else
                  --*(_DWORD *)(this + 8);
              }
              if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
              {
                this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                if (this)
                {
                  this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v550);
                  if (this)
                  {
                    this = *(_QWORD *)(this + 96);
                    if (this)
                      this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                  }
                }
              }
            }
            v29 = *(_QWORD *)(v6 + 856);
            goto LABEL_1993;
          }
          *(_DWORD *)this -= 2;
        }
        if ((v399 & 1) == 0)
          goto LABEL_2;
        goto LABEL_1226;
      }
      v298 = *(unsigned __int16 *)v220 | (32 * (*(unsigned __int16 *)v220 - 65 < 0x1A));
      v299 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69);
      if (v298 != v299)
        goto LABEL_981;
      v300 = 1u;
      do
      {
        if (v300 == 28)
          goto LABEL_710;
        v301 = *(unsigned __int16 *)&v220[2 * v300] | (32
                                                     * (*(unsigned __int16 *)&v220[2 * v300] - 65 < 0x1A));
        v302 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aExtTextureComp[v300++]);
      }
      while (v301 == v302);
      if ((unint64_t)(v300 - 2) <= 0x1A)
      {
        if (v298 == v299)
        {
          v303 = 1u;
          do
          {
            if (v303 == 28)
              goto LABEL_747;
            v304 = *(unsigned __int16 *)&v220[2 * v303] | (32
                                                         * (*(unsigned __int16 *)&v220[2 * v303] - 65 < 0x1A));
            v305 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aExtTextureComp_0[v303++]);
          }
          while (v304 == v305);
          if ((unint64_t)(v303 - 2) >= 0x1B)
            goto LABEL_747;
        }
LABEL_934:
        v11 = 0;
        switch(v13)
        {
          case 24:
            goto LABEL_1254;
          case 25:
          case 26:
          case 28:
          case 29:
          case 31:
            goto LABEL_9;
          case 27:
            goto LABEL_1036;
          case 30:
            goto LABEL_935;
          case 32:
            goto LABEL_958;
          default:
            if (v13 == 18)
              goto LABEL_1747;
            if (v13 == 37)
              goto LABEL_1255;
            goto LABEL_9;
        }
      }
LABEL_710:
      v241 = *(_QWORD *)(v6 + 88);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v243 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v241 + 1960))(v241, &v627);
      this = (uint64_t)v627;
      v627 = 0;
      if (this)
      {
        if (*(_DWORD *)this == 2)
        {
          this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v242);
          if ((v243 & 1) != 0)
            goto LABEL_714;
          goto LABEL_2;
        }
        *(_DWORD *)this -= 2;
      }
      if ((v243 & 1) != 0)
      {
LABEL_714:
        if (!*(_QWORD *)(v6 + 552))
        {
          v244 = (WebCore::EXTTextureCompressionBPTC *)bmalloc::api::isoAllocate();
          WebCore::EXTTextureCompressionBPTC::EXTTextureCompressionBPTC(v244, (WebCore::WebGLRenderingContextBase *)v6);
          this = *(_QWORD *)(v6 + 552);
          *(_QWORD *)(v6 + 552) = v244;
          if (this)
          {
            if (*(_DWORD *)(this + 8) == 1)
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
            else
              --*(_DWORD *)(this + 8);
          }
          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
          {
            this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
            if (this)
            {
              this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v539);
              if (this)
              {
                this = *(_QWORD *)(this + 96);
                if (this)
                  this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
              }
            }
          }
        }
        v29 = *(_QWORD *)(v6 + 552);
        goto LABEL_1993;
      }
LABEL_2:
      v4 = 0;
      *a3 = 0;
LABEL_3:
      a3[8] = v4;
      return this;
    case 30:
LABEL_935:
      v306 = *(unsigned __int8 **)(v10 + 8);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
      {
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v306) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
        {
          v307 = 1u;
          while (v307 != 30)
          {
            v308 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v306[v307]);
            v309 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aExtTextureFilt[v307++]);
            if (v308 != v309)
              goto LABEL_940;
          }
LABEL_941:
          v310 = *(_QWORD *)(v6 + 88);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v312 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v310 + 1960))(v310, &v627);
          this = (uint64_t)v627;
          v627 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
            {
              this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v311);
              if ((v312 & 1) == 0)
                goto LABEL_2;
              goto LABEL_945;
            }
            *(_DWORD *)this -= 2;
          }
          if ((v312 & 1) == 0)
            goto LABEL_2;
LABEL_945:
          if (!*(_QWORD *)(v6 + 568))
          {
            v313 = (_QWORD *)bmalloc::api::isoAllocate();
            v313[1] = 0x1000000001;
            v313[2] = v6;
            *v313 = off_1E33DCC48;
            v314 = *(_DWORD **)(v6 + 88);
            if (v314)
              ++v314[2];
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v314 + 1968))(v314, &v627);
            v316 = v627;
            v627 = 0;
            if (v316)
            {
              if (*(_DWORD *)v316 == 2)
                WTF::StringImpl::destroy(v316, v315);
              else
                *(_DWORD *)v316 -= 2;
            }
            if (v314[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v314 + 16))(v314);
            else
              --v314[2];
            this = *(_QWORD *)(v6 + 568);
            *(_QWORD *)(v6 + 568) = v313;
            if (this)
            {
              if (*(_DWORD *)(this + 8) == 1)
                this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
              else
                --*(_DWORD *)(this + 8);
            }
            if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
            {
              this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
              if (this)
              {
                this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v495);
                if (this)
                {
                  this = *(_QWORD *)(this + 96);
                  if (this)
                    this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                }
              }
            }
          }
          v29 = *(_QWORD *)(v6 + 568);
          goto LABEL_1993;
        }
LABEL_1092:
        v15 = 0;
        goto LABEL_1093;
      }
      if ((*(unsigned __int16 *)v306 | (32 * (*(unsigned __int16 *)v306 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
        goto LABEL_1092;
      v307 = 1u;
      do
      {
        if (v307 == 30)
          goto LABEL_941;
        v355 = *(unsigned __int16 *)&v306[2 * v307] | (32
                                                     * (*(unsigned __int16 *)&v306[2 * v307] - 65 < 0x1A));
        v356 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aExtTextureFilt[v307++]);
      }
      while (v355 == v356);
LABEL_940:
      if ((unint64_t)(v307 - 2) >= 0x1D)
        goto LABEL_941;
LABEL_1252:
      if (v13 != 37)
      {
        if (v13 == 24)
        {
LABEL_1254:
          v219 = *(_DWORD *)(v10 + 16);
          v220 = *(unsigned __int8 **)(v10 + 8);
LABEL_1280:
          if ((v219 & 4) != 0)
          {
            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v220) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79)
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 83))
            {
              v419 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[3]);
              if (v419 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
              {
                v420 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[4]);
                if (v420 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                {
                  v421 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[5]);
                  if (v421 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[6]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                 + 97)
                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[7]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                 + 119)
                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[8]) == v419
                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[9]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                 + 98)
                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[10]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                  + 117))
                  {
                    v422 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[11]);
                    if (v422 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[12]) == v422)
                    {
                      v423 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[13]);
                      if (v423 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[14]) == v421
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[15]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[16]) == v419
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[17]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[18]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[19]) == v420
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[20]) == v423
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[21]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[22]) == v423
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[23]) == v420)
                      {
                        goto LABEL_1305;
                      }
                    }
                  }
                }
              }
            }
          }
          else if ((*(unsigned __int16 *)v220 | (32 * (*(unsigned __int16 *)v220 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
          {
            v476 = 1u;
            while (v476 != 24)
            {
              v477 = *(unsigned __int16 *)&v220[2 * v476] | (32
                                                           * (*(unsigned __int16 *)&v220[2 * v476] - 65 < 0x1A));
              v478 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aOesDrawBuffers[v476++]);
              if (v477 != v478)
              {
                if ((unint64_t)(v476 - 2) >= 0x17)
                  break;
                v11 = 1;
                goto LABEL_9;
              }
            }
LABEL_1305:
            v424 = *(_QWORD *)(v6 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v426 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v424 + 1960))(v424, &v627);
            this = (uint64_t)v627;
            v627 = 0;
            if (this)
            {
              if (*(_DWORD *)this == 2)
              {
                this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v425);
                if ((v426 & 1) == 0)
                  goto LABEL_2;
                goto LABEL_1309;
              }
              *(_DWORD *)this -= 2;
            }
            if ((v426 & 1) == 0)
              goto LABEL_2;
LABEL_1309:
            if (!*(_QWORD *)(v6 + 616))
            {
              v427 = (_QWORD *)bmalloc::api::isoAllocate();
              v427[1] = 0x1600000001;
              v427[2] = v6;
              *v427 = off_1E33DD158;
              v428 = *(_DWORD **)(v6 + 88);
              if (v428)
                ++v428[2];
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v428 + 1968))(v428, &v627);
              v430 = v627;
              v627 = 0;
              if (v430)
              {
                if (*(_DWORD *)v430 == 2)
                  WTF::StringImpl::destroy(v430, v429);
                else
                  *(_DWORD *)v430 -= 2;
              }
              if (v428[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v428 + 16))(v428);
              else
                --v428[2];
              this = *(_QWORD *)(v6 + 616);
              *(_QWORD *)(v6 + 616) = v427;
              if (this)
              {
                if (*(_DWORD *)(this + 8) == 1)
                  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                else
                  --*(_DWORD *)(this + 8);
              }
              if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
              {
                this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                if (this)
                {
                  this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v547);
                  if (this)
                  {
                    this = *(_QWORD *)(this + 96);
                    if (this)
                      this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                  }
                }
              }
            }
            v29 = *(_QWORD *)(v6 + 616);
            goto LABEL_1993;
          }
          goto LABEL_1475;
        }
LABEL_1279:
        v11 = 0;
LABEL_9:
        if (v13 != 20)
        {
          if (v13 != 36)
            goto LABEL_11;
          v99 = *(unsigned __int8 **)(v10 + 8);
          if ((*(_BYTE *)(v10 + 16) & 4) != 0)
          {
            if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v99) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
              goto LABEL_2;
            v100 = 1u;
            while (v100 != 36)
            {
              v101 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v99[v100]);
              v102 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aOesShaderMulti[v100++]);
              if (v101 != v102)
                goto LABEL_255;
            }
          }
          else
          {
            if ((*(unsigned __int16 *)v99 | (32 * (*(unsigned __int16 *)v99 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
            {
LABEL_11:
              if (!v11)
              {
                v14 = 0;
                goto LABEL_13;
              }
LABEL_1475:
              v124 = *(_DWORD *)(v10 + 16);
              v125 = *(unsigned __int8 **)(v10 + 8);
              if ((v124 & 4) != 0)
              {
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v125) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79)
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 69)
                  && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 83))
                {
                  v479 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[3]);
                  if (v479 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                  {
                    v480 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[4]);
                    if (v480 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                    {
                      v481 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[5]);
                      if (v481 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[6]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[7]) == v480
                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[8]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117))
                      {
                        v482 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[9]);
                        if (v482 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[10]) == v481
                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[11]) == v479)
                        {
                          this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102);
                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[12]) == (_DWORD)this)
                          {
                            this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[13]);
                            if ((_DWORD)this == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
                            {
                              v9 = (WebCore::GraphicsContextGL *)*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111);
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[14]) == (_DWORD)v9)
                              {
                                v483 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[15]);
                                v9 = (WebCore::GraphicsContextGL *)*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97);
                                if (v483 == (_DWORD)v9)
                                {
                                  v9 = (WebCore::GraphicsContextGL *)*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[16]);
                                  if ((_DWORD)v9 == v480
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[17]) == v479
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[18]) == (_DWORD)this
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[19]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[20]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[21]) == v481
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[22]) == v483
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[23]) == v482)
                                  {
                                    goto LABEL_1500;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                goto LABEL_354;
              }
              if ((*(unsigned __int16 *)v125 | (32 * (*(unsigned __int16 *)v125 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
              {
                v492 = 1u;
                while (v492 != 24)
                {
                  v493 = *(unsigned __int16 *)&v125[2 * v492] | (32
                                                               * (*(unsigned __int16 *)&v125[2 * v492]
                                                                - 65 < 0x1A));
                  v494 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aOesTextureFloa[v492++]);
                  if (v493 != v494)
                  {
                    if ((unint64_t)(v492 - 2) >= 0x17)
                      break;
                    goto LABEL_1527;
                  }
                }
LABEL_1500:
                v484 = *(_QWORD *)(v6 + 88);
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v486 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v484 + 1960))(v484, &v627);
                this = (uint64_t)v627;
                v627 = 0;
                if (this)
                {
                  if (*(_DWORD *)this == 2)
                  {
                    this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v485);
                    if ((v486 & 1) == 0)
                      goto LABEL_2;
                    goto LABEL_1504;
                  }
                  *(_DWORD *)this -= 2;
                }
                if ((v486 & 1) == 0)
                  goto LABEL_2;
LABEL_1504:
                if (!*(_QWORD *)(v6 + 672))
                {
                  v487 = (_QWORD *)bmalloc::api::isoAllocate();
                  v487[1] = 0x1D00000001;
                  v487[2] = v6;
                  *v487 = off_1E33DD298;
                  v488 = *(_DWORD **)(v6 + 88);
                  if (v488)
                    ++v488[2];
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v488 + 1968))(v488, &v627);
                  v490 = v627;
                  v627 = 0;
                  if (v490)
                  {
                    if (*(_DWORD *)v490 == 2)
                      WTF::StringImpl::destroy(v490, v489);
                    else
                      *(_DWORD *)v490 -= 2;
                  }
                  if (v488[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v488 + 16))(v488);
                  else
                    --v488[2];
                  this = *(_QWORD *)(v6 + 672);
                  *(_QWORD *)(v6 + 672) = v487;
                  if (this)
                  {
                    if (*(_DWORD *)(this + 8) == 1)
                      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                    else
                      --*(_DWORD *)(this + 8);
                  }
                  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                  {
                    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                    if (this)
                    {
                      this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v536);
                      if (this)
                      {
                        this = *(_QWORD *)(this + 96);
                        if (this)
                          this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                      }
                    }
                  }
                }
                v29 = *(_QWORD *)(v6 + 672);
                goto LABEL_1993;
              }
LABEL_1527:
              v14 = 1;
LABEL_13:
              if (v13 != 25)
              {
LABEL_14:
                if (!v14)
                  goto LABEL_15;
                v124 = *(_DWORD *)(v10 + 16);
                v125 = *(unsigned __int8 **)(v10 + 8);
LABEL_354:
                if ((v124 & 4) != 0)
                {
                  v126 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87);
                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v125) == v126)
                  {
                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66)
                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[3]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71)
                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[4]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                    {
                      v133 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[5]);
                      if (v133 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                      {
                        v134 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[6]);
                        if (v134 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
                        {
                          v135 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[7]);
                          if (v135 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
                          {
                            v136 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[8]);
                            if (v136 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[9]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112)
                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[10]) == v133
                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[11]) == v134
                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[12]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[13]) == v135
                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[14]) == v135
                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[15]) == v133
                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[16]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[17]) == v136
                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[18]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[19]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[20]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[21]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[22]) == v134
                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[23]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                            {
                              goto LABEL_379;
                            }
                          }
                        }
                      }
                    }
LABEL_15:
                    if (v13 != 29)
                    {
                      if (v13 == 28)
                        goto LABEL_981;
                      goto LABEL_17;
                    }
                    v124 = *(_DWORD *)(v10 + 16);
                    v125 = *(unsigned __int8 **)(v10 + 8);
                    if ((v124 & 4) != 0)
                    {
                      v126 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v125);
                      if (v126 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                      {
                        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[1]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69)
                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66)
                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[3]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71)
                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[4]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                        {
                          v127 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[5]);
                          if (v127 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                          {
                            v128 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[6]);
                            if (v128 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99)
                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[7]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[8]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[9]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
                            {
                              v129 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[10]);
                              if (v129 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                              {
                                this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[11]);
                                if ((_DWORD)this == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                                {
                                  v130 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[12]);
                                  v9 = (WebCore::GraphicsContextGL *)*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115);
                                  if (v130 == (_DWORD)v9)
                                  {
                                    v9 = (WebCore::GraphicsContextGL *)*(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                          + v125[13]);
                                    if ((_DWORD)v9 == v130)
                                    {
                                      v9 = (WebCore::GraphicsContextGL *)*(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                            + v125[14]);
                                      if ((_DWORD)v9 == (_DWORD)this)
                                      {
                                        v9 = (WebCore::GraphicsContextGL *)*(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                              + v125[15]);
                                        if ((_DWORD)v9 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                                        {
                                          v9 = (WebCore::GraphicsContextGL *)*(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                + v125[16]);
                                          if ((_DWORD)v9 == v127)
                                          {
                                            v9 = (WebCore::GraphicsContextGL *)*(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                  + v125[17]);
                                            if ((_DWORD)v9 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[18]) == (_DWORD)this
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[19]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[20]) == (_DWORD)v9
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[21]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[22]) == v129
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[23]) == (_DWORD)this
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[24]) == v127
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[25]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[26]) == v130
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[27]) == (_DWORD)v9
                                              && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[28]) == v128)
                                            {
LABEL_346:
                                              this = WebCore::WebGLCompressedTextureASTC::supported(*(WebCore::WebGLCompressedTextureASTC **)(v6 + 88), v9);
                                              if ((this & 1) == 0)
                                                goto LABEL_2;
                                              if (!*(_QWORD *)(v6 + 728))
                                              {
                                                v131 = (WebCore::WebGLCompressedTextureASTC *)bmalloc::api::isoAllocate();
                                                WebCore::WebGLCompressedTextureASTC::WebGLCompressedTextureASTC(v131, (WebCore::WebGLRenderingContextBase *)v6);
                                                this = *(_QWORD *)(v6 + 728);
                                                *(_QWORD *)(v6 + 728) = v131;
                                                if (this)
                                                {
                                                  if (*(_DWORD *)(this + 8) == 1)
                                                    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                                                  else
                                                    --*(_DWORD *)(this + 8);
                                                }
                                                if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                                                {
                                                  this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40)
                                                                                           + 144))(*(_QWORD *)(v6 + 40));
                                                  if (this)
                                                  {
                                                    this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v543);
                                                    if (this)
                                                    {
                                                      this = *(_QWORD *)(this + 96);
                                                      if (this)
                                                        this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                                                    }
                                                  }
                                                }
                                              }
                                              v29 = *(_QWORD *)(v6 + 728);
                                              goto LABEL_1993;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      else
                      {
                        v126 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87);
                      }
                    }
                    else
                    {
                      v126 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87);
                      if (v126 == (unsigned __int16)(*(_WORD *)v125 | (32
                                                                      * (*(unsigned __int16 *)v125 - 65 < 0x1A))))
                      {
                        v372 = 1u;
                        while (v372 != 29)
                        {
                          v373 = *(unsigned __int16 *)&v125[2 * v372] | (32
                                                                       * (*(unsigned __int16 *)&v125[2 * v372]
                                                                        - 65 < 0x1A));
                          v374 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aWebglCompresse[v372++]);
                          if (v373 != v374)
                          {
                            if ((unint64_t)(v372 - 2) >= 0x1C)
                              goto LABEL_346;
                            goto LABEL_1152;
                          }
                        }
                        goto LABEL_346;
                      }
                    }
LABEL_1153:
                    if ((v124 & 4) != 0)
                    {
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v125) != v126)
                        goto LABEL_1548;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                        goto LABEL_1548;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                        goto LABEL_1548;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                        goto LABEL_1548;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                        goto LABEL_1548;
                      v380 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[5]);
                      if (v380 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                        goto LABEL_1548;
                      v381 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[6]);
                      if (v381 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
                        goto LABEL_1548;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[7]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
                        goto LABEL_1548;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109))
                        goto LABEL_1548;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[9]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
                        goto LABEL_1548;
                      v382 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[10]);
                      if (v382 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                        goto LABEL_1548;
                      v383 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[11]);
                      if (v383 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                        goto LABEL_1548;
                      v384 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[12]);
                      this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115);
                      if (v384 != (_DWORD)this)
                        goto LABEL_1548;
                      this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[13]);
                      if ((_DWORD)this != v384)
                        goto LABEL_1548;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[14]) != v383)
                        goto LABEL_1548;
                      this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100);
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[15]) != (_DWORD)this)
                        goto LABEL_1548;
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[16]) != v380)
                        goto LABEL_1548;
                      v385 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[17]);
                      this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116);
                      if (v385 != (_DWORD)this
                        || (this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[18]), (_DWORD)this != v383)
                        || (this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[19]),
                            v9 = (WebCore::GraphicsContextGL *)*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120),
                            (_DWORD)this != (_DWORD)v9)
                        || (this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[20]), (_DWORD)this != v385)
                        || (this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[21]),
                            v9 = (WebCore::GraphicsContextGL *)*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117),
                            (_DWORD)this != (_DWORD)v9)
                        || (this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[22]), (_DWORD)this != v382)
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[23]) != v383
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[24]) != v380
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[25]) != v383
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[26]) != v385
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[27]) != v381
                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[28]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 49))
                      {
LABEL_1548:
                        if ((v124 & 4) != 0)
                        {
                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v125) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                            goto LABEL_52;
                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                            goto LABEL_52;
                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                            goto LABEL_52;
                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                            goto LABEL_52;
                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                            goto LABEL_52;
                          v502 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[5]);
                          if (v502 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                            goto LABEL_52;
                          v503 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[6]);
                          if (v503 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
                            goto LABEL_52;
                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[7]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
                            goto LABEL_52;
                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109))
                            goto LABEL_52;
                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[9]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
                            goto LABEL_52;
                          v504 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[10]);
                          if (v504 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                            goto LABEL_52;
                          v505 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[11]);
                          if (v505 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                            goto LABEL_52;
                          v506 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[12]);
                          if (v506 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
                            goto LABEL_52;
                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[13]) != v506)
                            goto LABEL_52;
                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[14]) != v505)
                            goto LABEL_52;
                          this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100);
                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[15]) != (_DWORD)this)
                            goto LABEL_52;
                          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[16]) != v502)
                            goto LABEL_52;
                          v507 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[17]);
                          this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116);
                          if (v507 != (_DWORD)this)
                            goto LABEL_52;
                          this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[18]);
                          if ((_DWORD)this != v505)
                            goto LABEL_52;
                          this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[19]);
                          v9 = (WebCore::GraphicsContextGL *)*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120);
                          if ((_DWORD)this != (_DWORD)v9)
                            goto LABEL_52;
                          this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[20]);
                          if ((_DWORD)this != v507)
                            goto LABEL_52;
                          this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[21]);
                          v9 = (WebCore::GraphicsContextGL *)*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117);
                          if ((_DWORD)this != (_DWORD)v9)
                            goto LABEL_52;
                          this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[22]);
                          if ((_DWORD)this != v504
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[23]) != v505
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[24]) != v502
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[25]) != v506
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[26]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 51)
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[27]) != v507
                            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v125[28]) != v503)
                          {
                            goto LABEL_52;
                          }
                        }
                        else
                        {
                          if ((*(unsigned __int16 *)v125 | (32 * (*(unsigned __int16 *)v125 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                          {
LABEL_21:
                            if (v13 > 33)
                            {
                              if (v13 != 34)
                              {
                                if (v13 == 46)
                                {
                                  v16 = *(unsigned __int8 **)(v10 + 8);
                                  if ((*(_BYTE *)(v10 + 16) & 4) != 0)
                                  {
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v16) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                      goto LABEL_2;
                                    v17 = 1u;
                                    while (v17 != 46)
                                    {
                                      v18 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v16[v17]);
                                      v19 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                               + aWebglDrawInsta[v17++]);
                                      if (v18 != v19)
                                        goto LABEL_29;
                                    }
                                  }
                                  else
                                  {
                                    if ((*(unsigned __int16 *)v16 | (32
                                                                    * (*(unsigned __int16 *)v16 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                      goto LABEL_2;
                                    v17 = 1u;
                                    while (v17 != 46)
                                    {
                                      v454 = *(unsigned __int16 *)&v16[2 * v17] | (32
                                                                                 * (*(unsigned __int16 *)&v16[2 * v17]
                                                                                  - 65 < 0x1A));
                                      v455 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                + aWebglDrawInsta[v17++]);
                                      if (v454 != v455)
                                      {
LABEL_29:
                                        if ((unint64_t)(v17 - 2) < 0x2D)
                                          goto LABEL_52;
                                        break;
                                      }
                                    }
                                  }
                                  v20 = *(_QWORD *)(v6 + 88);
                                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                                  v22 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v20 + 1960))(v20, &v627);
                                  this = (uint64_t)v627;
                                  v627 = 0;
                                  if (this)
                                  {
                                    if (*(_DWORD *)this == 2)
                                      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v21);
                                    else
                                      *(_DWORD *)this -= 2;
                                  }
                                  if (v22)
                                    v23 = (v12 & 0x100000) == 0;
                                  else
                                    v23 = 1;
                                  if (v23)
                                    goto LABEL_2;
                                  if (!*(_QWORD *)(v6 + 808))
                                  {
                                    v24 = (_QWORD *)bmalloc::api::isoAllocate();
                                    v24[1] = 0x2E00000001;
                                    v24[2] = v6;
                                    *v24 = off_1E33DE280;
                                    v25 = *(_DWORD **)(v6 + 88);
                                    if (v25)
                                      ++v25[2];
                                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                                    (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v25 + 1968))(v25, &v627);
                                    v27 = v627;
                                    v627 = 0;
                                    if (v27)
                                    {
                                      if (*(_DWORD *)v27 == 2)
                                        WTF::StringImpl::destroy(v27, v26);
                                      else
                                        *(_DWORD *)v27 -= 2;
                                    }
                                    if (v25[2] == 1)
                                      (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 16))(v25);
                                    else
                                      --v25[2];
                                    this = *(_QWORD *)(v6 + 808);
                                    *(_QWORD *)(v6 + 808) = v24;
                                    if (this)
                                    {
                                      if (*(_DWORD *)(this + 8) == 1)
                                        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                                      else
                                        --*(_DWORD *)(this + 8);
                                    }
                                    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                                    {
                                      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                                      if (this)
                                      {
                                        this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v525);
                                        if (this)
                                        {
                                          this = *(_QWORD *)(this + 96);
                                          if (this)
                                            this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                                        }
                                      }
                                    }
                                  }
                                  v29 = *(_QWORD *)(v6 + 808);
LABEL_1993:
                                  ++*(_DWORD *)(v29 + 8);
                                  *(_QWORD *)a3 = v29;
                                  v4 = 1;
                                  goto LABEL_3;
                                }
LABEL_52:
                                if (v13 > 27)
                                {
                                  if (v13 == 52)
                                  {
                                    v176 = *(unsigned __int8 **)(v10 + 8);
                                    if ((*(_BYTE *)(v10 + 16) & 4) != 0)
                                    {
                                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v176) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                        goto LABEL_2;
                                      v177 = 1u;
                                      while (v177 != 52)
                                      {
                                        v178 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v176[v177]);
                                        v179 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                  + aWebglMultiDraw_0[v177++]);
                                        if (v178 != v179)
                                          goto LABEL_487;
                                      }
                                    }
                                    else
                                    {
                                      if ((*(unsigned __int16 *)v176 | (32
                                                                       * (*(unsigned __int16 *)v176 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                        goto LABEL_2;
                                      v177 = 1u;
                                      while (v177 != 52)
                                      {
                                        v496 = *(unsigned __int16 *)&v176[2 * v177] | (32
                                                                                     * (*(unsigned __int16 *)&v176[2 * v177]
                                                                                      - 65 < 0x1A));
                                        v497 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                  + aWebglMultiDraw_0[v177++]);
                                        if (v496 != v497)
                                        {
LABEL_487:
                                          if ((unint64_t)(v177 - 2) < 0x33)
                                            goto LABEL_2;
                                          break;
                                        }
                                      }
                                    }
                                    this = WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance::supported(*(WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance **)(v6 + 88), v9);
                                    if ((_DWORD)this)
                                      v180 = (v12 & 0x100000) == 0;
                                    else
                                      v180 = 1;
                                    if (v180)
                                      goto LABEL_2;
                                    if (!*(_QWORD *)(v6 + 832))
                                    {
                                      v181 = (WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance *)bmalloc::api::isoAllocate();
                                      WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance::WebGLMultiDrawInstancedBaseVertexBaseInstance(v181, (WebCore::WebGLRenderingContextBase *)v6);
                                      this = *(_QWORD *)(v6 + 832);
                                      *(_QWORD *)(v6 + 832) = v181;
                                      if (this)
                                      {
                                        if (*(_DWORD *)(this + 8) == 1)
                                          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                                        else
                                          --*(_DWORD *)(this + 8);
                                      }
                                      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                                      {
                                        this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                                        if (this)
                                        {
                                          this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v533);
                                          if (this)
                                          {
                                            this = *(_QWORD *)(this + 96);
                                            if (this)
                                              this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                                          }
                                        }
                                      }
                                    }
                                    v29 = *(_QWORD *)(v6 + 832);
                                    goto LABEL_1993;
                                  }
                                  if (v13 == 28)
                                    goto LABEL_1193;
LABEL_59:
                                  if (v13 != 23)
                                    goto LABEL_2;
                                  v30 = *(unsigned __int8 **)(v10 + 8);
                                  if ((*(_BYTE *)(v10 + 16) & 4) != 0)
                                  {
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v30) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                      goto LABEL_2;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v30[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                                      goto LABEL_2;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v30[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                      goto LABEL_2;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v30[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                      goto LABEL_2;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v30[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                      goto LABEL_2;
                                    v31 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v30[5]);
                                    if (v31 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                      goto LABEL_2;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v30[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
                                      goto LABEL_2;
                                    v32 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v30[7]);
                                    if (v32 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116))
                                      goto LABEL_2;
                                    v33 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v30[8]);
                                    if (v33 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                                      goto LABEL_2;
                                    v34 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v30[9]);
                                    if (v34 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
                                      goto LABEL_2;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v30[10]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99))
                                      goto LABEL_2;
                                    v35 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v30[11]);
                                    if (v35 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v30[12]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v30[13]) != v31
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v30[14]) != v32
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v30[15]) != v33
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v30[16]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v30[17]) != v32
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v30[18]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v30[19]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v30[20]) != v35
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v30[21]) != v34
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v30[22]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103))
                                    {
                                      goto LABEL_2;
                                    }
                                  }
                                  else
                                  {
                                    if ((*(unsigned __int16 *)v30 | (32
                                                                    * (*(unsigned __int16 *)v30 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                      goto LABEL_2;
                                    v517 = 1u;
                                    while (v517 != 23)
                                    {
                                      v518 = *(unsigned __int16 *)&v30[2 * v517] | (32
                                                                                  * (*(unsigned __int16 *)&v30[2 * v517]
                                                                                   - 65 < 0x1A));
                                      v519 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                + aWebglStencilTe[v517++]);
                                      if (v518 != v519)
                                      {
                                        if ((unint64_t)(v517 - 2) < 0x16)
                                          goto LABEL_2;
                                        break;
                                      }
                                    }
                                  }
                                  v36 = *(_QWORD *)(v6 + 88);
                                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                                  v38 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v36 + 1960))(v36, &v627);
                                  this = (uint64_t)v627;
                                  v627 = 0;
                                  if (this)
                                  {
                                    if (*(_DWORD *)this == 2)
                                    {
                                      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v37);
                                      if ((v38 & 1) == 0)
                                        goto LABEL_2;
                                      goto LABEL_88;
                                    }
                                    *(_DWORD *)this -= 2;
                                  }
                                  if ((v38 & 1) == 0)
                                    goto LABEL_2;
LABEL_88:
                                  if (!*(_QWORD *)(v6 + 864))
                                  {
                                    v39 = (_QWORD *)bmalloc::api::isoAllocate();
                                    v39[1] = 0x3500000001;
                                    v39[2] = v6;
                                    *v39 = off_1E33DEE40;
                                    v40 = *(_DWORD **)(v6 + 88);
                                    if (v40)
                                      ++v40[2];
                                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                                    (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v40 + 1968))(v40, &v627);
                                    v42 = v627;
                                    v627 = 0;
                                    if (v42)
                                    {
                                      if (*(_DWORD *)v42 == 2)
                                        WTF::StringImpl::destroy(v42, v41);
                                      else
                                        *(_DWORD *)v42 -= 2;
                                    }
                                    if (v40[2] == 1)
                                      (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 16))(v40);
                                    else
                                      --v40[2];
                                    this = *(_QWORD *)(v6 + 864);
                                    *(_QWORD *)(v6 + 864) = v39;
                                    if (this)
                                    {
                                      if (*(_DWORD *)(this + 8) == 1)
                                        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                                      else
                                        --*(_DWORD *)(this + 8);
                                    }
                                    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                                    {
                                      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                                      if (this)
                                      {
                                        this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v548);
                                        if (this)
                                        {
                                          this = *(_QWORD *)(this + 96);
                                          if (this)
                                            this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                                        }
                                      }
                                    }
                                  }
                                  v29 = *(_QWORD *)(v6 + 864);
                                  goto LABEL_1993;
                                }
                                if (v13 != 18)
                                {
                                  if (v13 == 16)
                                  {
LABEL_1968:
                                    v618 = *(unsigned __int8 **)(v10 + 8);
                                    if ((*(_BYTE *)(v10 + 16) & 4) != 0)
                                    {
                                      v619 = MEMORY[0x1E0CBF868];
                                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v618) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                        goto LABEL_2;
                                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v618[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                                        goto LABEL_2;
                                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v618[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                        goto LABEL_2;
                                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v618[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                        goto LABEL_2;
                                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v618[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                        goto LABEL_2;
                                      v620 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v618[5]);
                                      if (v620 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
                                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v618[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
                                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v618[7]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v618[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v618[9]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v618[10]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
                                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v618[11]) != v620
                                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v618[12]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
                                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v618[13]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                                        || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v618[14]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
                                      {
                                        goto LABEL_2;
                                      }
                                      v621 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v618[15]);
                                    }
                                    else
                                    {
                                      v619 = MEMORY[0x1E0CBF868];
                                      if ((*(unsigned __int16 *)v618 | (32
                                                                       * (*(unsigned __int16 *)v618 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                        goto LABEL_2;
                                      if ((*((unsigned __int16 *)v618 + 1) | (32
                                                                             * (*((unsigned __int16 *)v618
                                                                                              + 1)
                                                                              - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                                        goto LABEL_2;
                                      if ((*((unsigned __int16 *)v618 + 2) | (32
                                                                             * (*((unsigned __int16 *)v618
                                                                                              + 2)
                                                                              - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                        goto LABEL_2;
                                      if ((*((unsigned __int16 *)v618 + 3) | (32
                                                                             * (*((unsigned __int16 *)v618
                                                                                              + 3)
                                                                              - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                        goto LABEL_2;
                                      if ((*((unsigned __int16 *)v618 + 4) | (32
                                                                             * (*((unsigned __int16 *)v618
                                                                                              + 4)
                                                                              - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                        goto LABEL_2;
                                      v624 = *((unsigned __int16 *)v618 + 5) | (32
                                                                              * (*((unsigned __int16 *)v618
                                                                                               + 5)
                                                                               - 65 < 0x1A));
                                      if (v624 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
                                        || (*((unsigned __int16 *)v618 + 6) | (32
                                                                             * (*((unsigned __int16 *)v618
                                                                                              + 6)
                                                                              - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
                                        || (*((unsigned __int16 *)v618 + 7) | (32
                                                                             * (*((unsigned __int16 *)v618
                                                                                              + 7)
                                                                              - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117)
                                        || (*((unsigned __int16 *)v618 + 8) | (32
                                                                             * (*((unsigned __int16 *)v618
                                                                                              + 8)
                                                                              - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                                        || (*((unsigned __int16 *)v618 + 9) | (32
                                                                             * (*((unsigned __int16 *)v618
                                                                                              + 9)
                                                                              - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                                        || (*((unsigned __int16 *)v618 + 10) | (32
                                                                              * (*((unsigned __int16 *)v618
                                                                                               + 10)
                                                                               - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
                                        || (*((unsigned __int16 *)v618 + 11) | (32
                                                                              * (*((unsigned __int16 *)v618
                                                                                               + 11)
                                                                               - 65 < 0x1A))) != v624
                                        || (*((unsigned __int16 *)v618 + 12) | (32
                                                                              * (*((unsigned __int16 *)v618
                                                                                               + 12)
                                                                               - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100)
                                        || (*((unsigned __int16 *)v618 + 13) | (32
                                                                              * (*((unsigned __int16 *)v618
                                                                                               + 13)
                                                                               - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
                                        || (*((unsigned __int16 *)v618 + 14) | (32
                                                                              * (*((unsigned __int16 *)v618
                                                                                               + 14)
                                                                               - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
                                      {
                                        goto LABEL_2;
                                      }
                                      v621 = *((unsigned __int16 *)v618 + 15) | (32
                                                                               * (*((unsigned __int16 *)v618
                                                                                                + 15)
                                                                                - 65 < 0x1A));
                                    }
                                    if (v621 != *(unsigned __int8 *)(v619 + 119))
                                      goto LABEL_2;
                                    this = WebCore::WebGLMultiDraw::supported(*(WebCore::WebGLMultiDraw **)(v6 + 88), v9);
                                    if ((this & 1) == 0)
                                      goto LABEL_2;
                                    if (!*(_QWORD *)(v6 + 824))
                                    {
                                      v622 = (WebCore::WebGLMultiDraw *)bmalloc::api::isoAllocate();
                                      WebCore::WebGLMultiDraw::WebGLMultiDraw(v622, (WebCore::WebGLRenderingContextBase *)v6);
                                      this = *(_QWORD *)(v6 + 824);
                                      *(_QWORD *)(v6 + 824) = v622;
                                      if (this)
                                      {
                                        if (*(_DWORD *)(this + 8) == 1)
                                          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                                        else
                                          --*(_DWORD *)(this + 8);
                                      }
                                      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                                      {
                                        this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                                        if (this)
                                        {
                                          this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v626);
                                          if (this)
                                          {
                                            this = *(_QWORD *)(this + 96);
                                            if (this)
                                              this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                                          }
                                        }
                                      }
                                    }
                                    v29 = *(_QWORD *)(v6 + 824);
                                    goto LABEL_1993;
                                  }
                                  if (v13 != 22)
                                    goto LABEL_59;
LABEL_1423:
                                  v460 = *(unsigned __int8 **)(v10 + 8);
                                  if ((*(_BYTE *)(v10 + 16) & 4) != 0)
                                  {
                                    v461 = MEMORY[0x1E0CBF868];
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v460) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                      goto LABEL_2;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v460[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                                      goto LABEL_2;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v460[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                      goto LABEL_2;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v460[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                      goto LABEL_2;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v460[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                      goto LABEL_2;
                                    v462 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v460[5]);
                                    if (v462 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                      goto LABEL_2;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v460[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
                                      goto LABEL_2;
                                    v463 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v460[7]);
                                    if (v463 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                                      goto LABEL_2;
                                    v464 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v460[8]);
                                    if (v464 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
                                      goto LABEL_2;
                                    v465 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v460[9]);
                                    if (v465 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 118))
                                      goto LABEL_2;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v460[10]) != v464)
                                      goto LABEL_2;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v460[11]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 107))
                                      goto LABEL_2;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v460[12]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105))
                                      goto LABEL_2;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v460[13]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
                                      goto LABEL_2;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v460[14]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103))
                                      goto LABEL_2;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v460[15]) != v462)
                                      goto LABEL_2;
                                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v460[16]) != v465)
                                      goto LABEL_2;
                                    v466 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v460[17]);
                                    if (v466 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v460[18]) != v463
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v460[19]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                                      || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v460[20]) != v466)
                                    {
                                      goto LABEL_2;
                                    }
                                    v467 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v460[21]);
                                  }
                                  else
                                  {
                                    v461 = MEMORY[0x1E0CBF868];
                                    if ((*(unsigned __int16 *)v460 | (32
                                                                     * (*(unsigned __int16 *)v460 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                      goto LABEL_2;
                                    if ((*((unsigned __int16 *)v460 + 1) | (32
                                                                           * (*((unsigned __int16 *)v460
                                                                                            + 1)
                                                                            - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                                      goto LABEL_2;
                                    if ((*((unsigned __int16 *)v460 + 2) | (32
                                                                           * (*((unsigned __int16 *)v460
                                                                                            + 2)
                                                                            - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                      goto LABEL_2;
                                    if ((*((unsigned __int16 *)v460 + 3) | (32
                                                                           * (*((unsigned __int16 *)v460
                                                                                            + 3)
                                                                            - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                      goto LABEL_2;
                                    if ((*((unsigned __int16 *)v460 + 4) | (32
                                                                           * (*((unsigned __int16 *)v460
                                                                                            + 4)
                                                                            - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                      goto LABEL_2;
                                    v528 = *((unsigned __int16 *)v460 + 5) | (32
                                                                            * (*((unsigned __int16 *)v460
                                                                                             + 5)
                                                                             - 65 < 0x1A));
                                    if (v528 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                      goto LABEL_2;
                                    if ((*((unsigned __int16 *)v460 + 6) | (32
                                                                           * (*((unsigned __int16 *)v460
                                                                                            + 6)
                                                                            - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
                                      goto LABEL_2;
                                    v529 = *((unsigned __int16 *)v460 + 7) | (32
                                                                            * (*((unsigned __int16 *)v460
                                                                                             + 7)
                                                                             - 65 < 0x1A));
                                    if (v529 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                                      goto LABEL_2;
                                    v530 = *((unsigned __int16 *)v460 + 8) | (32
                                                                            * (*((unsigned __int16 *)v460
                                                                                             + 8)
                                                                             - 65 < 0x1A));
                                    if (v530 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
                                      goto LABEL_2;
                                    v531 = *((unsigned __int16 *)v460 + 9) | (32
                                                                            * (*((unsigned __int16 *)v460
                                                                                             + 9)
                                                                             - 65 < 0x1A));
                                    if (v531 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 118))
                                      goto LABEL_2;
                                    if ((*((unsigned __int16 *)v460 + 10) | (32
                                                                            * (*((unsigned __int16 *)v460
                                                                                             + 10)
                                                                             - 65 < 0x1A))) != v530)
                                      goto LABEL_2;
                                    if ((*((unsigned __int16 *)v460 + 11) | (32
                                                                            * (*((unsigned __int16 *)v460
                                                                                             + 11)
                                                                             - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 107))
                                      goto LABEL_2;
                                    if ((*((unsigned __int16 *)v460 + 12) | (32
                                                                            * (*((unsigned __int16 *)v460
                                                                                             + 12)
                                                                             - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105))
                                      goto LABEL_2;
                                    if ((*((unsigned __int16 *)v460 + 13) | (32
                                                                            * (*((unsigned __int16 *)v460
                                                                                             + 13)
                                                                             - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
                                      goto LABEL_2;
                                    if ((*((unsigned __int16 *)v460 + 14) | (32
                                                                            * (*((unsigned __int16 *)v460
                                                                                             + 14)
                                                                             - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103))
                                      goto LABEL_2;
                                    if ((*((unsigned __int16 *)v460 + 15) | (32
                                                                            * (*((unsigned __int16 *)v460
                                                                                             + 15)
                                                                             - 65 < 0x1A))) != v528)
                                      goto LABEL_2;
                                    if ((*((unsigned __int16 *)v460 + 16) | (32
                                                                            * (*((unsigned __int16 *)v460
                                                                                             + 16)
                                                                             - 65 < 0x1A))) != v531)
                                      goto LABEL_2;
                                    v532 = *((unsigned __int16 *)v460 + 17) | (32
                                                                             * (*((unsigned __int16 *)v460
                                                                                              + 17)
                                                                              - 65 < 0x1A));
                                    if (v532 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                                      || (*((unsigned __int16 *)v460 + 18) | (32
                                                                            * (*((unsigned __int16 *)v460
                                                                                             + 18)
                                                                             - 65 < 0x1A))) != v529
                                      || (*((unsigned __int16 *)v460 + 19) | (32
                                                                            * (*((unsigned __int16 *)v460
                                                                                             + 19)
                                                                             - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                                      || (*((unsigned __int16 *)v460 + 20) | (32
                                                                            * (*((unsigned __int16 *)v460
                                                                                             + 20)
                                                                             - 65 < 0x1A))) != v532)
                                    {
                                      goto LABEL_2;
                                    }
                                    v467 = *((unsigned __int16 *)v460 + 21) | (32
                                                                             * (*((unsigned __int16 *)v460
                                                                                              + 21)
                                                                              - 65 < 0x1A));
                                  }
                                  if (v467 != *(unsigned __int8 *)(v461 + 120))
                                    goto LABEL_2;
                                  v468 = *(_QWORD *)(v6 + 88);
                                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                                  v470 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v468
                                                                                                + 1960))(v468, &v627);
                                  this = (uint64_t)v627;
                                  v627 = 0;
                                  if (this)
                                  {
                                    if (*(_DWORD *)this == 2)
                                    {
                                      this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v469);
                                      if ((v470 & 1) == 0)
                                        goto LABEL_2;
                                      goto LABEL_1451;
                                    }
                                    *(_DWORD *)this -= 2;
                                  }
                                  if ((v470 & 1) == 0)
                                    goto LABEL_2;
LABEL_1451:
                                  if (!*(_QWORD *)(v6 + 848))
                                  {
                                    v471 = (_QWORD *)bmalloc::api::isoAllocate();
                                    v471[1] = 0x3300000001;
                                    v471[2] = v6;
                                    *v471 = off_1E33DE438;
                                    v472 = *(_DWORD **)(v6 + 88);
                                    if (v472)
                                      ++v472[2];
                                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                                    (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v472 + 1968))(v472, &v627);
                                    v474 = v627;
                                    v627 = 0;
                                    if (v474)
                                    {
                                      if (*(_DWORD *)v474 == 2)
                                        WTF::StringImpl::destroy(v474, v473);
                                      else
                                        *(_DWORD *)v474 -= 2;
                                    }
                                    if (v472[2] == 1)
                                      (*(void (**)(_DWORD *))(*(_QWORD *)v472 + 16))(v472);
                                    else
                                      --v472[2];
                                    this = *(_QWORD *)(v6 + 848);
                                    *(_QWORD *)(v6 + 848) = v471;
                                    if (this)
                                    {
                                      if (*(_DWORD *)(this + 8) == 1)
                                        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                                      else
                                        --*(_DWORD *)(this + 8);
                                    }
                                    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                                    {
                                      this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                                      if (this)
                                      {
                                        this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v553);
                                        if (this)
                                        {
                                          this = *(_QWORD *)(this + 96);
                                          if (this)
                                            this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                                        }
                                      }
                                    }
                                  }
                                  v29 = *(_QWORD *)(v6 + 848);
                                  goto LABEL_1993;
                                }
LABEL_1807:
                                v573 = *(unsigned __int8 **)(v10 + 8);
                                if ((*(_BYTE *)(v10 + 16) & 4) != 0)
                                {
                                  v574 = MEMORY[0x1E0CBF868];
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v573) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                    goto LABEL_2;
                                  v575 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69);
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[1]) == v575
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[2]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66)
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[3]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71)
                                    && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[4]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                  {
                                    v576 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[5]);
                                    if (v576 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
                                      && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[6]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
                                    {
                                      v577 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[7]);
                                      if (v577 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                                        && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[8]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
                                      {
                                        v578 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[9]);
                                        if (v578 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[10]) == v576
                                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[11]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99)
                                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[12]) == v577
                                          && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[13]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
                                        {
                                          v579 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[14]);
                                          if (v579 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[15]) == v578
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[16]) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                                            && *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[17]) == v579)
                                          {
LABEL_1826:
                                            if (!*(_QWORD *)(v6 + 816))
                                            {
                                              v580 = (_QWORD *)bmalloc::api::isoAllocate();
                                              v580[1] = 0x2F00000001;
                                              v580[2] = v6;
                                              *v580 = off_1E33DE338;
                                              this = *(_QWORD *)(v6 + 816);
                                              *(_QWORD *)(v6 + 816) = v580;
                                              if (this)
                                              {
                                                if (*(_DWORD *)(this + 8) == 1)
                                                  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                                                else
                                                  --*(_DWORD *)(this + 8);
                                              }
                                              if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                                              {
                                                this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                                                if (this)
                                                {
                                                  this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v597);
                                                  if (this)
                                                  {
                                                    this = *(_QWORD *)(this + 96);
                                                    if (this)
                                                      this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                                                  }
                                                }
                                              }
                                            }
                                            v29 = *(_QWORD *)(v6 + 816);
                                            goto LABEL_1993;
                                          }
                                        }
                                      }
                                    }
                                  }
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[1]) != v575)
                                    goto LABEL_2;
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                    goto LABEL_2;
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                    goto LABEL_2;
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                    goto LABEL_2;
                                  v582 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[5]);
                                  if (v582 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                    goto LABEL_2;
                                  if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
                                    goto LABEL_2;
                                  v583 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[7]);
                                  if (v583 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                                    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                                    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[9]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 121)
                                    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[10]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103)
                                    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[11]) != v583
                                    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[12]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
                                    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[13]) != v582
                                    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[14]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
                                    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[15]) != v583
                                    || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[16]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                                  {
                                    goto LABEL_2;
                                  }
                                  v584 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v573[17]);
                                }
                                else
                                {
                                  v574 = MEMORY[0x1E0CBF868];
                                  if ((*(unsigned __int16 *)v573 | (32
                                                                   * (*(unsigned __int16 *)v573 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                    goto LABEL_2;
                                  v590 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69);
                                  if ((*((unsigned __int16 *)v573 + 1) | (32
                                                                         * (*((unsigned __int16 *)v573 + 1)
                                                                          - 65 < 0x1A))) == v590
                                    && (*((unsigned __int16 *)v573 + 2) | (32
                                                                         * (*((unsigned __int16 *)v573 + 2)
                                                                          - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66)
                                    && (*((unsigned __int16 *)v573 + 3) | (32
                                                                         * (*((unsigned __int16 *)v573 + 3)
                                                                          - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71)
                                    && (*((unsigned __int16 *)v573 + 4) | (32
                                                                         * (*((unsigned __int16 *)v573 + 4)
                                                                          - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                  {
                                    v591 = *((unsigned __int16 *)v573 + 5) | (32
                                                                            * (*((unsigned __int16 *)v573
                                                                                             + 5)
                                                                             - 65 < 0x1A));
                                    if (v591 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95)
                                      && (*((unsigned __int16 *)v573 + 6) | (32
                                                                           * (*((unsigned __int16 *)v573
                                                                                            + 6)
                                                                            - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
                                    {
                                      v592 = *((unsigned __int16 *)v573 + 7) | (32
                                                                              * (*((unsigned __int16 *)v573
                                                                                               + 7)
                                                                               - 65 < 0x1A));
                                      if (v592 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                                        && (*((unsigned __int16 *)v573 + 8) | (32
                                                                             * (*((unsigned __int16 *)v573
                                                                                              + 8)
                                                                              - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
                                      {
                                        v593 = *((unsigned __int16 *)v573 + 9) | (32
                                                                                * (*((unsigned __int16 *)v573
                                                                                                 + 9)
                                                                                 - 65 < 0x1A));
                                        if (v593 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
                                          && (*((unsigned __int16 *)v573 + 10) | (32
                                                                                * (*((unsigned __int16 *)v573
                                                                                                 + 10)
                                                                                 - 65 < 0x1A))) == v591
                                          && (*((unsigned __int16 *)v573 + 11) | (32
                                                                                * (*((unsigned __int16 *)v573
                                                                                                 + 11)
                                                                                 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99)
                                          && (*((unsigned __int16 *)v573 + 12) | (32
                                                                                * (*((unsigned __int16 *)v573
                                                                                                 + 12)
                                                                                 - 65 < 0x1A))) == v592
                                          && (*((unsigned __int16 *)v573 + 13) | (32
                                                                                * (*((unsigned __int16 *)v573
                                                                                                 + 13)
                                                                                 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
                                        {
                                          v594 = *((unsigned __int16 *)v573 + 14) | (32
                                                                                   * (*((unsigned __int16 *)v573 + 14)
                                                                                    - 65 < 0x1A));
                                          if (v594 == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 116)
                                            && (*((unsigned __int16 *)v573 + 15) | (32
                                                                                  * (*((unsigned __int16 *)v573 + 15)
                                                                                   - 65 < 0x1A))) == v593
                                            && (*((unsigned __int16 *)v573 + 16) | (32
                                                                                  * (*((unsigned __int16 *)v573 + 16)
                                                                                   - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 120)
                                            && (*((unsigned __int16 *)v573 + 17) | (32
                                                                                  * (*((unsigned __int16 *)v573 + 17)
                                                                                   - 65 < 0x1A))) == v594)
                                          {
                                            goto LABEL_1826;
                                          }
                                        }
                                      }
                                    }
                                  }
                                  if ((*((unsigned __int16 *)v573 + 1) | (32
                                                                         * (*((unsigned __int16 *)v573 + 1)
                                                                          - 65 < 0x1A))) != v590)
                                    goto LABEL_2;
                                  if ((*((unsigned __int16 *)v573 + 2) | (32
                                                                         * (*((unsigned __int16 *)v573 + 2)
                                                                          - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                    goto LABEL_2;
                                  if ((*((unsigned __int16 *)v573 + 3) | (32
                                                                         * (*((unsigned __int16 *)v573 + 3)
                                                                          - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                    goto LABEL_2;
                                  if ((*((unsigned __int16 *)v573 + 4) | (32
                                                                         * (*((unsigned __int16 *)v573 + 4)
                                                                          - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                    goto LABEL_2;
                                  v595 = *((unsigned __int16 *)v573 + 5) | (32
                                                                          * (*((unsigned __int16 *)v573 + 5)
                                                                           - 65 < 0x1A));
                                  if (v595 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                    goto LABEL_2;
                                  if ((*((unsigned __int16 *)v573 + 6) | (32
                                                                         * (*((unsigned __int16 *)v573 + 6)
                                                                          - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
                                    goto LABEL_2;
                                  v596 = *((unsigned __int16 *)v573 + 7) | (32
                                                                          * (*((unsigned __int16 *)v573 + 7)
                                                                           - 65 < 0x1A));
                                  if (v596 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111)
                                    || (*((unsigned __int16 *)v573 + 8) | (32
                                                                         * (*((unsigned __int16 *)v573 + 8)
                                                                          - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108)
                                    || (*((unsigned __int16 *)v573 + 9) | (32
                                                                         * (*((unsigned __int16 *)v573 + 9)
                                                                          - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 121)
                                    || (*((unsigned __int16 *)v573 + 10) | (32
                                                                          * (*((unsigned __int16 *)v573
                                                                                           + 10)
                                                                           - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103)
                                    || (*((unsigned __int16 *)v573 + 11) | (32
                                                                          * (*((unsigned __int16 *)v573
                                                                                           + 11)
                                                                           - 65 < 0x1A))) != v596
                                    || (*((unsigned __int16 *)v573 + 12) | (32
                                                                          * (*((unsigned __int16 *)v573
                                                                                           + 12)
                                                                           - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
                                    || (*((unsigned __int16 *)v573 + 13) | (32
                                                                          * (*((unsigned __int16 *)v573
                                                                                           + 13)
                                                                           - 65 < 0x1A))) != v595
                                    || (*((unsigned __int16 *)v573 + 14) | (32
                                                                          * (*((unsigned __int16 *)v573
                                                                                           + 14)
                                                                           - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109)
                                    || (*((unsigned __int16 *)v573 + 15) | (32
                                                                          * (*((unsigned __int16 *)v573
                                                                                           + 15)
                                                                           - 65 < 0x1A))) != v596
                                    || (*((unsigned __int16 *)v573 + 16) | (32
                                                                          * (*((unsigned __int16 *)v573
                                                                                           + 16)
                                                                           - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                                  {
                                    goto LABEL_2;
                                  }
                                  v584 = *((unsigned __int16 *)v573 + 17) | (32
                                                                           * (*((unsigned __int16 *)v573
                                                                                            + 17)
                                                                            - 65 < 0x1A));
                                }
                                if (v584 != *(unsigned __int8 *)(v574 + 101))
                                  goto LABEL_2;
                                v585 = *(_QWORD *)(v6 + 88);
                                WTF::StringImpl::createWithoutCopyingNonEmpty();
                                v587 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v585 + 1960))(v585, &v627);
                                this = (uint64_t)v627;
                                v627 = 0;
                                if (this)
                                {
                                  if (*(_DWORD *)this == 2)
                                  {
                                    this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v586);
                                    if ((v587 & 1) == 0)
                                      goto LABEL_2;
                                    goto LABEL_1854;
                                  }
                                  *(_DWORD *)this -= 2;
                                }
                                if ((v587 & 1) == 0)
                                  goto LABEL_2;
LABEL_1854:
                                if (!*(_QWORD *)(v6 + 840))
                                {
                                  v588 = (WebCore::WebGLPolygonMode *)bmalloc::api::isoAllocate();
                                  WebCore::WebGLPolygonMode::WebGLPolygonMode(v588, (WebCore::WebGLRenderingContextBase *)v6);
                                  this = *(_QWORD *)(v6 + 840);
                                  *(_QWORD *)(v6 + 840) = v588;
                                  if (this)
                                  {
                                    if (*(_DWORD *)(this + 8) == 1)
                                      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                                    else
                                      --*(_DWORD *)(this + 8);
                                  }
                                  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                                  {
                                    this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                                    if (this)
                                    {
                                      this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v599);
                                      if (this)
                                      {
                                        this = *(_QWORD *)(this + 96);
                                        if (this)
                                          this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                                      }
                                    }
                                  }
                                }
                                v29 = *(_QWORD *)(v6 + 840);
                                goto LABEL_1993;
                              }
                              v145 = *(unsigned __int8 **)(v10 + 8);
                              if ((*(_BYTE *)(v10 + 16) & 4) != 0)
                              {
                                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v145) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                  goto LABEL_2;
                                v146 = 1u;
                                while (v146 != 34)
                                {
                                  v147 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v145[v146]);
                                  v148 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                            + aWebglCompresse_4[v146++]);
                                  if (v147 != v148)
                                    goto LABEL_401;
                                }
                              }
                              else
                              {
                                if ((*(unsigned __int16 *)v145 | (32
                                                                 * (*(unsigned __int16 *)v145 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                  goto LABEL_2;
                                v146 = 1u;
                                while (v146 != 34)
                                {
                                  v446 = *(unsigned __int16 *)&v145[2 * v146] | (32
                                                                               * (*(unsigned __int16 *)&v145[2 * v146]
                                                                                - 65 < 0x1A));
                                  v447 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                            + aWebglCompresse_4[v146++]);
                                  if (v446 != v447)
                                  {
LABEL_401:
                                    if ((unint64_t)(v146 - 2) < 0x21)
                                      goto LABEL_52;
                                    break;
                                  }
                                }
                              }
                              v149 = *(_QWORD *)(v6 + 88);
                              WTF::StringImpl::createWithoutCopyingNonEmpty();
                              v151 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v149 + 1960))(v149, &v627);
                              this = (uint64_t)v627;
                              v627 = 0;
                              if (this)
                              {
                                if (*(_DWORD *)this == 2)
                                {
                                  this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v150);
                                  if ((v151 & 1) == 0)
                                    goto LABEL_2;
                                  goto LABEL_406;
                                }
                                *(_DWORD *)this -= 2;
                              }
                              if ((v151 & 1) == 0)
                                goto LABEL_2;
LABEL_406:
                              if (!*(_QWORD *)(v6 + 768))
                              {
                                v152 = (WebCore::WebGLCompressedTextureS3TCsRGB *)bmalloc::api::isoAllocate();
                                WebCore::WebGLCompressedTextureS3TCsRGB::WebGLCompressedTextureS3TCsRGB(v152, (WebCore::WebGLRenderingContextBase *)v6);
                                this = *(_QWORD *)(v6 + 768);
                                *(_QWORD *)(v6 + 768) = v152;
                                if (this)
                                {
                                  if (*(_DWORD *)(this + 8) == 1)
                                    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                                  else
                                    --*(_DWORD *)(this + 8);
                                }
                                if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                                {
                                  this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                                  if (this)
                                  {
                                    this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v523);
                                    if (this)
                                    {
                                      this = *(_QWORD *)(this + 96);
                                      if (this)
                                        this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                                    }
                                  }
                                }
                              }
                              v29 = *(_QWORD *)(v6 + 768);
                              goto LABEL_1993;
                            }
                            if (v13 == 25)
                            {
                              v154 = *(unsigned __int8 **)(v10 + 8);
                              if ((*(_BYTE *)(v10 + 16) & 4) != 0)
                              {
                                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v154) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                  goto LABEL_2;
                                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                                  goto LABEL_2;
                                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                  goto LABEL_2;
                                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                  goto LABEL_2;
                                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                  goto LABEL_2;
                                v155 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[5]);
                                if (v155 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                  goto LABEL_2;
                                v156 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[6]);
                                if (v156 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                                  goto LABEL_2;
                                v157 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[7]);
                                if (v157 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                                  goto LABEL_2;
                                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98))
                                  goto LABEL_2;
                                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[9]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117))
                                  goto LABEL_2;
                                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[10]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103))
                                  goto LABEL_2;
                                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[11]) != v155)
                                  goto LABEL_2;
                                v158 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[12]);
                                if (v158 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                                  goto LABEL_2;
                                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[13]) != v157)
                                  goto LABEL_2;
                                v159 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[14]);
                                if (v159 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110)
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[15]) != v156
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[16]) != v157
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[17]) != v158
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[18]) != v157
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[19]) != v158
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[20]) != v155
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[21]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[22]) != v159
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[23]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102)
                                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v154[24]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 111))
                                {
                                  goto LABEL_2;
                                }
                              }
                              else
                              {
                                if ((*(unsigned __int16 *)v154 | (32
                                                                 * (*(unsigned __int16 *)v154 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                  goto LABEL_2;
                                v448 = 1u;
                                while (v448 != 25)
                                {
                                  v449 = *(unsigned __int16 *)&v154[2 * v448] | (32
                                                                               * (*(unsigned __int16 *)&v154[2 * v448]
                                                                                - 65 < 0x1A));
                                  v450 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                            + aWebglDebugRend[v448++]);
                                  if (v449 != v450)
                                  {
                                    if ((unint64_t)(v448 - 2) < 0x18)
                                      goto LABEL_52;
                                    break;
                                  }
                                }
                              }
                              if (!*(_QWORD *)(v6 + 776))
                              {
                                v160 = (_QWORD *)bmalloc::api::isoAllocate();
                                v160[1] = 0x2A00000001;
                                v160[2] = v6;
                                *v160 = off_1E33DE200;
                                this = *(_QWORD *)(v6 + 776);
                                *(_QWORD *)(v6 + 776) = v160;
                                if (this)
                                {
                                  if (*(_DWORD *)(this + 8) == 1)
                                    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                                  else
                                    --*(_DWORD *)(this + 8);
                                }
                                if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                                {
                                  this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                                  if (this)
                                  {
                                    this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v526);
                                    if (this)
                                    {
                                      this = *(_QWORD *)(this + 96);
                                      if (this)
                                        this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                                    }
                                  }
                                }
                              }
                              v29 = *(_QWORD *)(v6 + 776);
                              goto LABEL_1993;
                            }
                            if (v13 != 19)
                              goto LABEL_52;
                            v162 = *(unsigned __int8 **)(v10 + 8);
                            if ((*(_BYTE *)(v10 + 16) & 4) != 0)
                            {
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v162) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                goto LABEL_2;
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v162[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                                goto LABEL_2;
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v162[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                goto LABEL_2;
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v162[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                goto LABEL_2;
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v162[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                goto LABEL_2;
                              v163 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v162[5]);
                              if (v163 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                goto LABEL_2;
                              v164 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v162[6]);
                              if (v164 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                                goto LABEL_2;
                              v165 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v162[7]);
                              if (v165 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                                goto LABEL_2;
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v162[8]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98))
                                goto LABEL_2;
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v162[9]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117))
                                goto LABEL_2;
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v162[10]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103))
                                goto LABEL_2;
                              if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v162[11]) != v163)
                                goto LABEL_2;
                              v166 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v162[12]);
                              if (v166 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
                                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v162[13]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104)
                                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v162[14]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
                                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v162[15]) != v164
                                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v162[16]) != v165
                                || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v162[17]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                              {
                                goto LABEL_2;
                              }
                              v167 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v162[18]);
                            }
                            else
                            {
                              if ((*(unsigned __int16 *)v162 | (32
                                                               * (*(unsigned __int16 *)v162 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                                goto LABEL_2;
                              if ((*((unsigned __int16 *)v162 + 1) | (32
                                                                     * (*((unsigned __int16 *)v162 + 1)
                                                                      - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
                                goto LABEL_2;
                              if ((*((unsigned __int16 *)v162 + 2) | (32
                                                                     * (*((unsigned __int16 *)v162 + 2)
                                                                      - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 66))
                                goto LABEL_2;
                              if ((*((unsigned __int16 *)v162 + 3) | (32
                                                                     * (*((unsigned __int16 *)v162 + 3)
                                                                      - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 71))
                                goto LABEL_2;
                              if ((*((unsigned __int16 *)v162 + 4) | (32
                                                                     * (*((unsigned __int16 *)v162 + 4)
                                                                      - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 76))
                                goto LABEL_2;
                              v451 = *((unsigned __int16 *)v162 + 5) | (32
                                                                      * (*((unsigned __int16 *)v162 + 5)
                                                                       - 65 < 0x1A));
                              if (v451 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                                goto LABEL_2;
                              v452 = *((unsigned __int16 *)v162 + 6) | (32
                                                                      * (*((unsigned __int16 *)v162 + 6)
                                                                       - 65 < 0x1A));
                              if (v452 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                                goto LABEL_2;
                              v453 = *((unsigned __int16 *)v162 + 7) | (32
                                                                      * (*((unsigned __int16 *)v162 + 7)
                                                                       - 65 < 0x1A));
                              if (v453 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                                goto LABEL_2;
                              if ((*((unsigned __int16 *)v162 + 8) | (32
                                                                     * (*((unsigned __int16 *)v162 + 8)
                                                                      - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98))
                                goto LABEL_2;
                              if ((*((unsigned __int16 *)v162 + 9) | (32
                                                                     * (*((unsigned __int16 *)v162 + 9)
                                                                      - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117))
                                goto LABEL_2;
                              if ((*((unsigned __int16 *)v162 + 10) | (32
                                                                      * (*((unsigned __int16 *)v162 + 10)
                                                                       - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 103))
                                goto LABEL_2;
                              if ((*((unsigned __int16 *)v162 + 11) | (32
                                                                      * (*((unsigned __int16 *)v162 + 11)
                                                                       - 65 < 0x1A))) != v451)
                                goto LABEL_2;
                              v166 = *((unsigned __int16 *)v162 + 12) | (32
                                                                       * (*((unsigned __int16 *)v162 + 12)
                                                                        - 65 < 0x1A));
                              if (v166 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115)
                                || (*((unsigned __int16 *)v162 + 13) | (32
                                                                      * (*((unsigned __int16 *)v162 + 13)
                                                                       - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 104)
                                || (*((unsigned __int16 *)v162 + 14) | (32
                                                                      * (*((unsigned __int16 *)v162 + 14)
                                                                       - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97)
                                || (*((unsigned __int16 *)v162 + 15) | (32
                                                                      * (*((unsigned __int16 *)v162 + 15)
                                                                       - 65 < 0x1A))) != v452
                                || (*((unsigned __int16 *)v162 + 16) | (32
                                                                      * (*((unsigned __int16 *)v162 + 16)
                                                                       - 65 < 0x1A))) != v453
                                || (*((unsigned __int16 *)v162 + 17) | (32
                                                                      * (*((unsigned __int16 *)v162 + 17)
                                                                       - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114))
                              {
                                goto LABEL_2;
                              }
                              v167 = *((unsigned __int16 *)v162 + 18) | (32
                                                                       * (*((unsigned __int16 *)v162 + 18)
                                                                        - 65 < 0x1A));
                            }
                            if (v167 != v166)
                              goto LABEL_2;
                            v168 = *(_QWORD *)(v6 + 88);
                            WTF::StringImpl::createWithoutCopyingNonEmpty();
                            v170 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v168 + 1960))(v168, &v627);
                            this = (uint64_t)v627;
                            v627 = 0;
                            if (this)
                            {
                              if (*(_DWORD *)this == 2)
                              {
                                this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v169);
                                if ((v170 & 1) == 0)
                                  goto LABEL_2;
                                goto LABEL_469;
                              }
                              *(_DWORD *)this -= 2;
                            }
                            if ((v170 & 1) == 0)
                              goto LABEL_2;
LABEL_469:
                            if (!*(_QWORD *)(v6 + 784))
                            {
                              v171 = (_QWORD *)bmalloc::api::isoAllocate();
                              v171[1] = 0x2B00000001;
                              v171[2] = v6;
                              *v171 = off_1E33DE220;
                              v172 = *(_DWORD **)(v6 + 88);
                              if (v172)
                                ++v172[2];
                              WTF::StringImpl::createWithoutCopyingNonEmpty();
                              (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v172 + 1968))(v172, &v627);
                              v174 = v627;
                              v627 = 0;
                              if (v174)
                              {
                                if (*(_DWORD *)v174 == 2)
                                  WTF::StringImpl::destroy(v174, v173);
                                else
                                  *(_DWORD *)v174 -= 2;
                              }
                              if (v172[2] == 1)
                                (*(void (**)(_DWORD *))(*(_QWORD *)v172 + 16))(v172);
                              else
                                --v172[2];
                              this = *(_QWORD *)(v6 + 784);
                              *(_QWORD *)(v6 + 784) = v171;
                              if (this)
                              {
                                if (*(_DWORD *)(this + 8) == 1)
                                  this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                                else
                                  --*(_DWORD *)(this + 8);
                              }
                              if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                              {
                                this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                                if (this)
                                {
                                  this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v540);
                                  if (this)
                                  {
                                    this = *(_QWORD *)(this + 96);
                                    if (this)
                                      this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                                  }
                                }
                              }
                            }
                            v29 = *(_QWORD *)(v6 + 784);
                            goto LABEL_1993;
                          }
                          v510 = 1u;
                          while (v510 != 29)
                          {
                            v511 = *(unsigned __int16 *)&v125[2 * v510] | (32
                                                                         * (*(unsigned __int16 *)&v125[2 * v510]
                                                                          - 65 < 0x1A));
                            v512 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aWebglCompresse_3[v510++]);
                            if (v511 != v512)
                            {
                              if ((unint64_t)(v510 - 2) < 0x1C)
                                goto LABEL_21;
                              break;
                            }
                          }
                        }
                        this = WebCore::WebGLCompressedTextureS3TC::supported(*(WebCore::WebGLCompressedTextureS3TC **)(v6 + 88), v9);
                        if ((this & 1) == 0)
                          goto LABEL_2;
                        if (!*(_QWORD *)(v6 + 760))
                        {
                          v508 = (WebCore::WebGLCompressedTextureS3TC *)bmalloc::api::isoAllocate();
                          WebCore::WebGLCompressedTextureS3TC::WebGLCompressedTextureS3TC(v508, (WebCore::WebGLRenderingContextBase *)v6);
                          this = *(_QWORD *)(v6 + 760);
                          *(_QWORD *)(v6 + 760) = v508;
                          if (this)
                          {
                            if (*(_DWORD *)(this + 8) == 1)
                              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                            else
                              --*(_DWORD *)(this + 8);
                          }
                          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                          {
                            this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                            if (this)
                            {
                              this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v551);
                              if (this)
                              {
                                this = *(_QWORD *)(this + 96);
                                if (this)
                                  this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                              }
                            }
                          }
                        }
                        v29 = *(_QWORD *)(v6 + 760);
                        goto LABEL_1993;
                      }
                    }
                    else
                    {
                      if (v126 != (unsigned __int16)(*(_WORD *)v125 | (32
                                                                      * (*(unsigned __int16 *)v125 - 65 < 0x1A))))
                      {
LABEL_1547:
                        v124 = *(_DWORD *)(v10 + 16);
                        v125 = *(unsigned __int8 **)(v10 + 8);
                        goto LABEL_1548;
                      }
                      v499 = 1u;
                      while (v499 != 29)
                      {
                        v500 = *(unsigned __int16 *)&v125[2 * v499] | (32
                                                                     * (*(unsigned __int16 *)&v125[2 * v499]
                                                                      - 65 < 0x1A));
                        v501 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aWebglCompresse_1[v499++]);
                        if (v500 != v501)
                        {
                          if ((unint64_t)(v499 - 2) >= 0x1C)
                            break;
                          v15 = 1;
                          goto LABEL_18;
                        }
                      }
                    }
                    v386 = *(_QWORD *)(v6 + 88);
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v388 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v386 + 1960))(v386, &v627);
                    this = (uint64_t)v627;
                    v627 = 0;
                    if (this)
                    {
                      if (*(_DWORD *)this == 2)
                      {
                        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v387);
                        if ((v388 & 1) == 0)
                          goto LABEL_2;
                        goto LABEL_1187;
                      }
                      *(_DWORD *)this -= 2;
                    }
                    if ((v388 & 1) == 0)
                      goto LABEL_2;
LABEL_1187:
                    if (!*(_QWORD *)(v6 + 744))
                    {
                      v389 = (WebCore::WebGLCompressedTextureETC1 *)bmalloc::api::isoAllocate();
                      WebCore::WebGLCompressedTextureETC1::WebGLCompressedTextureETC1(v389, (WebCore::WebGLRenderingContextBase *)v6);
                      this = *(_QWORD *)(v6 + 744);
                      *(_QWORD *)(v6 + 744) = v389;
                      if (this)
                      {
                        if (*(_DWORD *)(this + 8) == 1)
                          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                        else
                          --*(_DWORD *)(this + 8);
                      }
                      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                      {
                        this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                        if (this)
                        {
                          this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v552);
                          if (this)
                          {
                            this = *(_QWORD *)(this + 96);
                            if (this)
                              this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                          }
                        }
                      }
                    }
                    v29 = *(_QWORD *)(v6 + 744);
                    goto LABEL_1993;
                  }
                }
                else
                {
                  v126 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87);
                  if (v126 == (unsigned __int16)(*(_WORD *)v125 | (32
                                                                  * (*(unsigned __int16 *)v125 - 65 < 0x1A))))
                  {
                    v183 = 1u;
                    while (v183 != 24)
                    {
                      v184 = *(unsigned __int16 *)&v125[2 * v183] | (32
                                                                   * (*(unsigned __int16 *)&v125[2 * v183]
                                                                    - 65 < 0x1A));
                      v185 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aWebglClipCullD[v183++]);
                      if (v184 != v185)
                      {
                        if ((unint64_t)(v183 - 2) >= 0x17)
                          break;
                        goto LABEL_1152;
                      }
                    }
LABEL_379:
                    v137 = *(_QWORD *)(v6 + 88);
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v139 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v137 + 1960))(v137, &v627);
                    this = (uint64_t)v627;
                    v627 = 0;
                    if (this)
                    {
                      if (*(_DWORD *)this == 2)
                      {
                        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v138);
                        if ((v139 & 1) == 0)
                          goto LABEL_2;
                        goto LABEL_383;
                      }
                      *(_DWORD *)this -= 2;
                    }
                    if ((v139 & 1) == 0)
                      goto LABEL_2;
LABEL_383:
                    if (!*(_QWORD *)(v6 + 712))
                    {
                      v140 = (_QWORD *)bmalloc::api::isoAllocate();
                      v140[1] = 0x2200000001;
                      v140[2] = v6;
                      *v140 = off_1E33DDFC8;
                      v141 = *(_DWORD **)(v6 + 88);
                      if (v141)
                        ++v141[2];
                      WTF::StringImpl::createWithoutCopyingNonEmpty();
                      (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v141 + 1968))(v141, &v627);
                      v143 = v627;
                      v627 = 0;
                      if (v143)
                      {
                        if (*(_DWORD *)v143 == 2)
                          WTF::StringImpl::destroy(v143, v142);
                        else
                          *(_DWORD *)v143 -= 2;
                      }
                      if (v141[2] == 1)
                        (*(void (**)(_DWORD *))(*(_QWORD *)v141 + 16))(v141);
                      else
                        --v141[2];
                      this = *(_QWORD *)(v6 + 712);
                      *(_QWORD *)(v6 + 712) = v140;
                      if (this)
                      {
                        if (*(_DWORD *)(this + 8) == 1)
                          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                        else
                          --*(_DWORD *)(this + 8);
                      }
                      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                      {
                        this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                        if (this)
                        {
                          this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v524);
                          if (this)
                          {
                            this = *(_QWORD *)(this + 96);
                            if (this)
                              this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                          }
                        }
                      }
                    }
                    v29 = *(_QWORD *)(v6 + 712);
                    goto LABEL_1993;
                  }
                }
LABEL_1152:
                if (v13 != 29)
                {
LABEL_17:
                  v15 = 0;
LABEL_18:
                  if (v13 == 30)
                  {
LABEL_1093:
                    v357 = *(unsigned __int8 **)(v10 + 8);
                    if ((*(_BYTE *)(v10 + 16) & 4) != 0)
                    {
                      if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v357) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                        goto LABEL_2;
                      v358 = 1u;
                      while (v358 != 30)
                      {
                        v359 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v357[v358]);
                        v360 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aWebglCompresse_2[v358++]);
                        if (v359 != v360)
                          goto LABEL_1098;
                      }
                      goto LABEL_1344;
                    }
                    if ((*(unsigned __int16 *)v357 | (32 * (*(unsigned __int16 *)v357 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                    {
                      v358 = 1u;
                      while (v358 != 30)
                      {
                        v375 = *(unsigned __int16 *)&v357[2 * v358] | (32
                                                                     * (*(unsigned __int16 *)&v357[2 * v358]
                                                                      - 65 < 0x1A));
                        v376 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aWebglCompresse_2[v358++]);
                        if (v375 != v376)
                        {
LABEL_1098:
                          if ((unint64_t)(v358 - 2) < 0x1D)
                            goto LABEL_20;
                          goto LABEL_1344;
                        }
                      }
                      goto LABEL_1344;
                    }
LABEL_20:
                    if (!v15)
                      goto LABEL_21;
                    goto LABEL_1547;
                  }
                  if (v13 != 37)
                    goto LABEL_20;
LABEL_1338:
                  v434 = *(unsigned __int8 **)(v10 + 8);
                  if ((*(_BYTE *)(v10 + 16) & 4) != 0)
                  {
                    if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v434) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                 + 87))
                      goto LABEL_2;
                    v435 = 1u;
                    while (v435 != 37)
                    {
                      v436 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v434[v435]);
                      v437 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aWebkitWebglCom[v435++]);
                      if (v436 != v437)
                        goto LABEL_1343;
                    }
LABEL_1344:
                    v438 = *(_QWORD *)(v6 + 88);
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v440 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v438 + 1960))(v438, &v627);
                    this = (uint64_t)v627;
                    v627 = 0;
                    if (this)
                    {
                      if (*(_DWORD *)this == 2)
                      {
                        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v439);
                        if ((v440 & 1) == 0)
                          goto LABEL_2;
                        goto LABEL_1348;
                      }
                      *(_DWORD *)this -= 2;
                    }
                    if ((v440 & 1) == 0)
                      goto LABEL_2;
LABEL_1348:
                    if (!*(_QWORD *)(v6 + 752))
                    {
                      v441 = (WebCore::WebGLCompressedTexturePVRTC *)bmalloc::api::isoAllocate();
                      WebCore::WebGLCompressedTexturePVRTC::WebGLCompressedTexturePVRTC(v441, (WebCore::WebGLRenderingContextBase *)v6);
                      this = *(_QWORD *)(v6 + 752);
                      *(_QWORD *)(v6 + 752) = v441;
                      if (this)
                      {
                        if (*(_DWORD *)(this + 8) == 1)
                          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                        else
                          --*(_DWORD *)(this + 8);
                      }
                      if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                      {
                        this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                        if (this)
                        {
                          this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v443);
                          if (this)
                          {
                            this = *(_QWORD *)(this + 96);
                            if (this)
                              this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                          }
                        }
                      }
                    }
                    v29 = *(_QWORD *)(v6 + 752);
                    goto LABEL_1993;
                  }
                  if ((*(unsigned __int16 *)v434 | (32 * (*(unsigned __int16 *)v434 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                  {
                    v435 = 1u;
                    while (v435 != 37)
                    {
                      v444 = *(unsigned __int16 *)&v434[2 * v435] | (32
                                                                   * (*(unsigned __int16 *)&v434[2 * v435]
                                                                    - 65 < 0x1A));
                      v445 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aWebkitWebglCom[v435++]);
                      if (v444 != v445)
                      {
LABEL_1343:
                        if ((unint64_t)(v435 - 2) < 0x24)
                          goto LABEL_20;
                        goto LABEL_1344;
                      }
                    }
                    goto LABEL_1344;
                  }
                  goto LABEL_20;
                }
                goto LABEL_1153;
              }
              v111 = *(unsigned __int8 **)(v10 + 8);
              if ((*(_BYTE *)(v10 + 16) & 4) != 0)
              {
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v111) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                  goto LABEL_14;
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v111[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 69))
                  goto LABEL_14;
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v111[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 66))
                  goto LABEL_14;
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v111[3]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 71))
                  goto LABEL_14;
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v111[4]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 76))
                  goto LABEL_14;
                v112 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v111[5]);
                if (v112 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
                  goto LABEL_14;
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v111[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 98))
                  goto LABEL_14;
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v111[7]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                               + 108))
                  goto LABEL_14;
                v113 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v111[8]);
                if (v113 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101))
                  goto LABEL_14;
                v114 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v111[9]);
                if (v114 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 110))
                  goto LABEL_14;
                v115 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v111[10]);
                if (v115 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 100))
                  goto LABEL_14;
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v111[11]) != v112)
                  goto LABEL_14;
                this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 102);
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v111[12]) != (_DWORD)this)
                  goto LABEL_14;
                this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 117);
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v111[13]) != (_DWORD)this)
                  goto LABEL_14;
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v111[14]) != v114)
                  goto LABEL_14;
                this = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 99);
                if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v111[15]) != (_DWORD)this
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v111[16]) != v112
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v111[17]) != v113
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v111[18]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                + 120)
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v111[19]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868]
                                                                                                + 116)
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v111[20]) != v113
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v111[21]) != v114
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v111[22]) != v115
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v111[23]) != v113
                  || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v111[24]) != v115)
                {
                  goto LABEL_14;
                }
              }
              else
              {
                if ((*(unsigned __int16 *)v111 | (32 * (*(unsigned __int16 *)v111 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 87))
                  goto LABEL_14;
                v369 = 1u;
                while (v369 != 25)
                {
                  v370 = *(unsigned __int16 *)&v111[2 * v369] | (32
                                                               * (*(unsigned __int16 *)&v111[2 * v369]
                                                                - 65 < 0x1A));
                  v371 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aWebglBlendFunc[v369++]);
                  if (v370 != v371)
                  {
                    if ((unint64_t)(v369 - 2) < 0x18)
                      goto LABEL_14;
                    break;
                  }
                }
              }
              v116 = *(_QWORD *)(v6 + 88);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v118 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v116 + 1960))(v116, &v627);
              this = (uint64_t)v627;
              v627 = 0;
              if (this)
              {
                if (*(_DWORD *)this == 2)
                {
                  this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v117);
                  if ((v118 & 1) == 0)
                    goto LABEL_2;
                  goto LABEL_303;
                }
                *(_DWORD *)this -= 2;
              }
              if ((v118 & 1) == 0)
                goto LABEL_2;
LABEL_303:
              if (!*(_QWORD *)(v6 + 704))
              {
                v119 = (_QWORD *)bmalloc::api::isoAllocate();
                v119[1] = 0x2100000001;
                v119[2] = v6;
                *v119 = off_1E33DD778;
                v120 = *(_DWORD **)(v6 + 88);
                if (v120)
                  ++v120[2];
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v120 + 1968))(v120, &v627);
                v122 = v627;
                v627 = 0;
                if (v122)
                {
                  if (*(_DWORD *)v122 == 2)
                    WTF::StringImpl::destroy(v122, v121);
                  else
                    *(_DWORD *)v122 -= 2;
                }
                if (v120[2] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v120 + 16))(v120);
                else
                  --v120[2];
                this = *(_QWORD *)(v6 + 704);
                *(_QWORD *)(v6 + 704) = v119;
                if (this)
                {
                  if (*(_DWORD *)(this + 8) == 1)
                    this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
                  else
                    --*(_DWORD *)(this + 8);
                }
                if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
                {
                  this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
                  if (this)
                  {
                    this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v541);
                    if (this)
                    {
                      this = *(_QWORD *)(this + 96);
                      if (this)
                        this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                    }
                  }
                }
              }
              v29 = *(_QWORD *)(v6 + 704);
              goto LABEL_1993;
            }
            v100 = 1u;
            while (v100 != 36)
            {
              v367 = *(unsigned __int16 *)&v99[2 * v100] | (32
                                                          * (*(unsigned __int16 *)&v99[2 * v100] - 65 < 0x1A));
              v368 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aOesShaderMulti[v100++]);
              if (v367 != v368)
              {
LABEL_255:
                if ((unint64_t)(v100 - 2) < 0x23)
                  goto LABEL_11;
                break;
              }
            }
          }
          v103 = *(_QWORD *)(v6 + 88);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v105 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v103 + 1960))(v103, &v627);
          this = (uint64_t)v627;
          v627 = 0;
          if (this)
          {
            if (*(_DWORD *)this == 2)
            {
              this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v104);
              if ((v105 & 1) == 0)
                goto LABEL_2;
              goto LABEL_260;
            }
            *(_DWORD *)this -= 2;
          }
          if ((v105 & 1) == 0)
            goto LABEL_2;
LABEL_260:
          if (!*(_QWORD *)(v6 + 648))
          {
            v106 = (_QWORD *)bmalloc::api::isoAllocate();
            v106[1] = 0x1A00000001;
            v106[2] = v6;
            *v106 = off_1E33DD238;
            v107 = *(_DWORD **)(v6 + 88);
            if (v107)
              ++v107[2];
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v107 + 1968))(v107, &v627);
            v109 = v627;
            v627 = 0;
            if (v109)
            {
              if (*(_DWORD *)v109 == 2)
                WTF::StringImpl::destroy(v109, v108);
              else
                *(_DWORD *)v109 -= 2;
            }
            if (v107[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v107 + 16))(v107);
            else
              --v107[2];
            this = *(_QWORD *)(v6 + 648);
            *(_QWORD *)(v6 + 648) = v106;
            if (this)
            {
              if (*(_DWORD *)(this + 8) == 1)
                this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
              else
                --*(_DWORD *)(this + 8);
            }
            if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
            {
              this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
              if (this)
              {
                this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v520);
                if (this)
                {
                  this = *(_QWORD *)(this + 96);
                  if (this)
                    this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
                }
              }
            }
          }
          v29 = *(_QWORD *)(v6 + 648);
          goto LABEL_1993;
        }
        v84 = *(unsigned __int8 **)(v10 + 8);
        if ((*(_BYTE *)(v10 + 16) & 4) != 0)
        {
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v84) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
            goto LABEL_2;
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[1]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
            goto LABEL_2;
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[2]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 83))
            goto LABEL_2;
          v85 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[3]);
          if (v85 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
            goto LABEL_2;
          v86 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[4]);
          if (v86 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
            goto LABEL_2;
          v87 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[5]);
          if (v87 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
            goto LABEL_2;
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[6]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109))
            goto LABEL_2;
          if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[7]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
            goto LABEL_2;
          v88 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[8]);
          if (v88 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
            goto LABEL_2;
          v89 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[9]);
          if (v89 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[10]) != v85
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[11]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 118)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[12]) != v87
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[13]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[14]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[15]) != v87
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[16]) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[17]) != v88
            || *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[18]) != v89)
          {
            goto LABEL_2;
          }
          v90 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v84[19]);
        }
        else
        {
          if ((*(unsigned __int16 *)v84 | (32 * (*(unsigned __int16 *)v84 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 79))
            goto LABEL_2;
          if ((*((unsigned __int16 *)v84 + 1) | (32 * (*((unsigned __int16 *)v84 + 1) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
            goto LABEL_2;
          if ((*((unsigned __int16 *)v84 + 2) | (32 * (*((unsigned __int16 *)v84 + 2) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 83))
            goto LABEL_2;
          v363 = *((unsigned __int16 *)v84 + 3) | (32 * (*((unsigned __int16 *)v84 + 3) - 65 < 0x1A));
          if (v363 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 95))
            goto LABEL_2;
          v86 = *((unsigned __int16 *)v84 + 4) | (32 * (*((unsigned __int16 *)v84 + 4) - 65 < 0x1A));
          if (v86 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 115))
            goto LABEL_2;
          v364 = *((unsigned __int16 *)v84 + 5) | (32 * (*((unsigned __int16 *)v84 + 5) - 65 < 0x1A));
          if (v364 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 97))
            goto LABEL_2;
          if ((*((unsigned __int16 *)v84 + 6) | (32 * (*((unsigned __int16 *)v84 + 6) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 109))
            goto LABEL_2;
          if ((*((unsigned __int16 *)v84 + 7) | (32 * (*((unsigned __int16 *)v84 + 7) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 112))
            goto LABEL_2;
          v365 = *((unsigned __int16 *)v84 + 8) | (32 * (*((unsigned __int16 *)v84 + 8) - 65 < 0x1A));
          if (v365 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 108))
            goto LABEL_2;
          v366 = *((unsigned __int16 *)v84 + 9) | (32 * (*((unsigned __int16 *)v84 + 9) - 65 < 0x1A));
          if (v366 != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 101)
            || (*((unsigned __int16 *)v84 + 10) | (32 * (*((unsigned __int16 *)v84 + 10) - 65 < 0x1A))) != v363
            || (*((unsigned __int16 *)v84 + 11) | (32 * (*((unsigned __int16 *)v84 + 11) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 118)
            || (*((unsigned __int16 *)v84 + 12) | (32 * (*((unsigned __int16 *)v84 + 12) - 65 < 0x1A))) != v364
            || (*((unsigned __int16 *)v84 + 13) | (32 * (*((unsigned __int16 *)v84 + 13) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 114)
            || (*((unsigned __int16 *)v84 + 14) | (32 * (*((unsigned __int16 *)v84 + 14) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 105)
            || (*((unsigned __int16 *)v84 + 15) | (32 * (*((unsigned __int16 *)v84 + 15) - 65 < 0x1A))) != v364
            || (*((unsigned __int16 *)v84 + 16) | (32 * (*((unsigned __int16 *)v84 + 16) - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 98)
            || (*((unsigned __int16 *)v84 + 17) | (32 * (*((unsigned __int16 *)v84 + 17) - 65 < 0x1A))) != v365
            || (*((unsigned __int16 *)v84 + 18) | (32 * (*((unsigned __int16 *)v84 + 18) - 65 < 0x1A))) != v366)
          {
            goto LABEL_2;
          }
          v90 = *((unsigned __int16 *)v84 + 19) | (32 * (*((unsigned __int16 *)v84 + 19) - 65 < 0x1A));
        }
        if (v90 != v86)
          goto LABEL_2;
        v91 = *(_QWORD *)(v6 + 88);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v93 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v91 + 1960))(v91, &v627);
        this = (uint64_t)v627;
        v627 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
          {
            this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v92);
            if ((v93 & 1) == 0)
              goto LABEL_2;
            goto LABEL_237;
          }
          *(_DWORD *)this -= 2;
        }
        if ((v93 & 1) == 0)
          goto LABEL_2;
LABEL_237:
        if (!*(_QWORD *)(v6 + 640))
        {
          v94 = (_QWORD *)bmalloc::api::isoAllocate();
          v94[1] = 0x1900000001;
          v94[2] = v6;
          *v94 = off_1E33DD218;
          v95 = *(_DWORD **)(v6 + 88);
          if (v95)
            ++v95[2];
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v95 + 1968))(v95, &v627);
          v97 = v627;
          v627 = 0;
          if (v97)
          {
            if (*(_DWORD *)v97 == 2)
              WTF::StringImpl::destroy(v97, v96);
            else
              *(_DWORD *)v97 -= 2;
          }
          if (v95[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v95 + 16))(v95);
          else
            --v95[2];
          this = *(_QWORD *)(v6 + 640);
          *(_QWORD *)(v6 + 640) = v94;
          if (this)
          {
            if (*(_DWORD *)(this + 8) == 1)
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
            else
              --*(_DWORD *)(this + 8);
          }
          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
          {
            this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
            if (this)
            {
              this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v538);
              if (this)
              {
                this = *(_QWORD *)(this + 96);
                if (this)
                  this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
              }
            }
          }
        }
        v29 = *(_QWORD *)(v6 + 640);
        goto LABEL_1993;
      }
LABEL_1255:
      v219 = *(_DWORD *)(v10 + 16);
      v220 = *(unsigned __int8 **)(v10 + 8);
      if ((v219 & 4) != 0)
      {
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v220) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 78))
        {
          v408 = 1u;
          while (v408 != 37)
          {
            v409 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v220[v408]);
            v410 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aNvShaderNopers[v408++]);
            if (v409 != v410)
              goto LABEL_1260;
          }
          goto LABEL_1261;
        }
      }
      else if ((*(unsigned __int16 *)v220 | (32 * (*(unsigned __int16 *)v220 - 65 < 0x1A))) == *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 78))
      {
        v408 = 1u;
        while (v408 != 37)
        {
          v432 = *(unsigned __int16 *)&v220[2 * v408] | (32
                                                       * (*(unsigned __int16 *)&v220[2 * v408] - 65 < 0x1A));
          v433 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aNvShaderNopers[v408++]);
          if (v432 != v433)
          {
LABEL_1260:
            if ((unint64_t)(v408 - 2) >= 0x24)
              break;
            if (v13 == 24)
              goto LABEL_1280;
            goto LABEL_1279;
          }
        }
LABEL_1261:
        v411 = *(_QWORD *)(v6 + 88);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v413 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v411 + 1960))(v411, &v627);
        this = (uint64_t)v627;
        v627 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 2)
          {
            this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v412);
            if ((v413 & 1) == 0)
              goto LABEL_2;
            goto LABEL_1265;
          }
          *(_DWORD *)this -= 2;
        }
        if ((v413 & 1) == 0)
          goto LABEL_2;
LABEL_1265:
        if (!*(_QWORD *)(v6 + 608))
        {
          v414 = (_QWORD *)bmalloc::api::isoAllocate();
          v414[1] = 0x1500000001;
          v414[2] = v6;
          *v414 = off_1E33DD138;
          v415 = *(_DWORD **)(v6 + 88);
          if (v415)
            ++v415[2];
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v415 + 1968))(v415, &v627);
          v417 = v627;
          v627 = 0;
          if (v417)
          {
            if (*(_DWORD *)v417 == 2)
              WTF::StringImpl::destroy(v417, v416);
            else
              *(_DWORD *)v417 -= 2;
          }
          if (v415[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v415 + 16))(v415);
          else
            --v415[2];
          this = *(_QWORD *)(v6 + 608);
          *(_QWORD *)(v6 + 608) = v414;
          if (this)
          {
            if (*(_DWORD *)(this + 8) == 1)
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
            else
              --*(_DWORD *)(this + 8);
          }
          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
          {
            this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
            if (this)
            {
              this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v516);
              if (this)
              {
                this = *(_QWORD *)(this + 96);
                if (this)
                  this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
              }
            }
          }
        }
        v29 = *(_QWORD *)(v6 + 608);
        goto LABEL_1993;
      }
      v15 = 0;
      goto LABEL_1338;
    case 31:
LABEL_611:
      v205 = *(unsigned __int8 **)(v10 + 8);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
      {
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v205) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
          goto LABEL_2;
        v206 = 1u;
        while (v206 != 31)
        {
          v207 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v205[v206]);
          v208 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aExtDisjointTim[v206++]);
          if (v207 != v208)
            goto LABEL_616;
        }
      }
      else
      {
        if ((*(unsigned __int16 *)v205 | (32 * (*(unsigned __int16 *)v205 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
          goto LABEL_2;
        v206 = 1u;
        do
        {
          if (v206 == 31)
            goto LABEL_617;
          v293 = *(unsigned __int16 *)&v205[2 * v206] | (32
                                                       * (*(unsigned __int16 *)&v205[2 * v206] - 65 < 0x1A));
          v294 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aExtDisjointTim[v206++]);
        }
        while (v293 == v294);
LABEL_616:
        if ((unint64_t)(v206 - 2) < 0x1E)
          goto LABEL_934;
      }
LABEL_617:
      v209 = *(_QWORD *)(v6 + 88);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v211 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v209 + 1960))(v209, &v627);
      this = (uint64_t)v627;
      v627 = 0;
      if (!this)
        goto LABEL_620;
      if (*(_DWORD *)this == 2)
      {
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v210);
        if (!v211)
          goto LABEL_2;
      }
      else
      {
        *(_DWORD *)this -= 2;
LABEL_620:
        if (!v211)
          goto LABEL_2;
      }
      v212 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 8);
      if (v212)
        v213 = v212 - 96;
      else
        v213 = 0;
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v213 + 136))(v213);
      if ((*(_QWORD *)(this + 472) & 0x800000) != 0)
      {
        if (!*(_QWORD *)(v6 + 504))
        {
          v214 = (_QWORD *)bmalloc::api::isoAllocate();
          v214[1] = 0x800000001;
          v214[2] = v6;
          *v214 = off_1E33DCA50;
          v215 = *(_DWORD **)(v6 + 88);
          if (v215)
            ++v215[2];
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v215 + 1968))(v215, &v627);
          v217 = v627;
          v627 = 0;
          if (v217)
          {
            if (*(_DWORD *)v217 == 2)
              WTF::StringImpl::destroy(v217, v216);
            else
              *(_DWORD *)v217 -= 2;
          }
          if (v215[2] == 1)
            (*(void (**)(_DWORD *))(*(_QWORD *)v215 + 16))(v215);
          else
            --v215[2];
          this = *(_QWORD *)(v6 + 504);
          *(_QWORD *)(v6 + 504) = v214;
          if (this)
          {
            if (*(_DWORD *)(this + 8) == 1)
              this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
            else
              --*(_DWORD *)(this + 8);
          }
          if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
          {
            this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
            if (this)
            {
              this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v534);
              if (this)
              {
                this = *(_QWORD *)(this + 96);
                if (this)
                  this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
              }
            }
          }
        }
        v29 = *(_QWORD *)(v6 + 504);
        goto LABEL_1993;
      }
      goto LABEL_2;
    case 32:
LABEL_958:
      v318 = *(unsigned __int8 **)(v10 + 8);
      if ((*(_BYTE *)(v10 + 16) & 4) != 0)
      {
        if (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *v318) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
          goto LABEL_2;
        v319 = 1u;
        do
        {
          if (v319 == 32)
            goto LABEL_964;
          v320 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + v318[v319]);
          v321 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aExtTextureMirr[v319++]);
        }
        while (v320 == v321);
      }
      else
      {
        if ((*(unsigned __int16 *)v318 | (32 * (*(unsigned __int16 *)v318 - 65 < 0x1A))) != *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + 69))
          goto LABEL_2;
        v319 = 1u;
        do
        {
          if (v319 == 32)
            goto LABEL_964;
          v361 = *(unsigned __int16 *)&v318[2 * v319] | (32
                                                       * (*(unsigned __int16 *)&v318[2 * v319] - 65 < 0x1A));
          v362 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + aExtTextureMirr[v319++]);
        }
        while (v361 == v362);
      }
      if ((unint64_t)(v319 - 2) < 0x1F)
        goto LABEL_1279;
LABEL_964:
      v322 = *(_QWORD *)(v6 + 88);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v324 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v322 + 1960))(v322, &v627);
      this = (uint64_t)v627;
      v627 = 0;
      if (!this)
        goto LABEL_967;
      if (*(_DWORD *)this == 2)
      {
        this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v323);
        if ((v324 & 1) == 0)
          goto LABEL_2;
      }
      else
      {
        *(_DWORD *)this -= 2;
LABEL_967:
        if ((v324 & 1) == 0)
          goto LABEL_2;
      }
      if (!*(_QWORD *)(v6 + 576))
      {
        v325 = (_QWORD *)bmalloc::api::isoAllocate();
        v325[1] = 0x1100000001;
        v325[2] = v6;
        *v325 = off_1E33DCC68;
        v326 = *(_DWORD **)(v6 + 88);
        if (v326)
          ++v326[2];
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v326 + 1968))(v326, &v627);
        v328 = v627;
        v627 = 0;
        if (v328)
        {
          if (*(_DWORD *)v328 == 2)
            WTF::StringImpl::destroy(v328, v327);
          else
            *(_DWORD *)v328 -= 2;
        }
        if (v326[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v326 + 16))(v326);
        else
          --v326[2];
        this = *(_QWORD *)(v6 + 576);
        *(_QWORD *)(v6 + 576) = v325;
        if (this)
        {
          if (*(_DWORD *)(this + 8) == 1)
            this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
          else
            --*(_DWORD *)(this + 8);
        }
        if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
        {
          this = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 40) + 144))(*(_QWORD *)(v6 + 40));
          if (this)
          {
            this = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)this, v498);
            if (this)
            {
              this = *(_QWORD *)(this + 96);
              if (this)
                this = WebCore::InspectorCanvasAgent::didEnableExtension(this, (WebCore::WebGLRenderingContextBase *)v6, a2);
            }
          }
        }
      }
      v29 = *(_QWORD *)(v6 + 576);
      goto LABEL_1993;
    case 37:
      goto LABEL_1255;
    default:
      goto LABEL_9;
  }
}

uint64_t WebCore::WebGL2RenderingContext::getSupportedExtensions@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  char v10;
  WTF::StringImpl *v11;
  _QWORD *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;
  WebCore::GraphicsContextGL *v17;
  unsigned int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  char v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  char v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  WTF::StringImpl *v33;
  char v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  char v38;
  WTF::StringImpl *v39;
  uint64_t v40;
  _QWORD *v41;
  void *v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  char v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  WTF::StringImpl *v48;
  int v49;
  WTF::StringImpl *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  void *v55;
  uint64_t v56;
  WTF::StringImpl *v57;
  int v58;
  WTF::StringImpl *v59;
  uint64_t v60;
  _QWORD *v61;
  void *v62;
  uint64_t v63;
  WTF::StringImpl *v64;
  int v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  _QWORD *v68;
  void *v69;
  uint64_t v70;
  WTF::StringImpl *v71;
  int v72;
  WTF::StringImpl *v73;
  uint64_t v74;
  _QWORD *v75;
  void *v76;
  uint64_t v77;
  WTF::StringImpl *v78;
  int v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  _QWORD *v82;
  void *v83;
  uint64_t v84;
  WTF::StringImpl *v85;
  int v86;
  WTF::StringImpl *v87;
  uint64_t v88;
  _QWORD *v89;
  void *v90;
  uint64_t v91;
  WTF::StringImpl *v92;
  int v93;
  WTF::StringImpl *v94;
  uint64_t v95;
  _QWORD *v96;
  void *v97;
  uint64_t v98;
  WTF::StringImpl *v99;
  int v100;
  WTF::StringImpl *v101;
  uint64_t v102;
  _QWORD *v103;
  void *v104;
  uint64_t v105;
  WTF::StringImpl *v106;
  int v107;
  WTF::StringImpl *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  _QWORD *v112;
  void *v113;
  uint64_t v114;
  WTF::StringImpl *v115;
  int v116;
  WTF::StringImpl *v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  void *v122;
  uint64_t v123;
  WTF::StringImpl *v124;
  int v125;
  WTF::StringImpl *v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  _QWORD *v130;
  void *v131;
  uint64_t v132;
  WTF::StringImpl *v133;
  int v134;
  WTF::StringImpl *v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  _QWORD *v139;
  void *v140;
  uint64_t v141;
  WTF::StringImpl *v142;
  int v143;
  WTF::StringImpl *v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  _QWORD *v148;
  void *v149;
  uint64_t v150;
  WTF::StringImpl *v151;
  int v152;
  WTF::StringImpl *v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  _QWORD *v157;
  void *v158;
  uint64_t v159;
  WTF::StringImpl *v160;
  int v161;
  WTF::StringImpl *v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  _QWORD *v166;
  void *v167;
  uint64_t v168;
  WTF::StringImpl *v169;
  int v170;
  WTF::StringImpl *v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  _QWORD *v175;
  void *v176;
  uint64_t v177;
  WTF::StringImpl *v178;
  int v179;
  WTF::StringImpl *v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  _QWORD *v184;
  void *v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  _QWORD *v189;
  void *v190;
  uint64_t v191;
  WTF::StringImpl *v192;
  int v193;
  WTF::StringImpl *v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  _QWORD *v198;
  void *v199;
  uint64_t v200;
  WTF::StringImpl *v201;
  int v202;
  WTF::StringImpl *v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  _QWORD *v207;
  void *v208;
  uint64_t v209;
  WTF::StringImpl *v210;
  int v211;
  WTF::StringImpl *v212;
  uint64_t v213;
  unint64_t v214;
  unint64_t v215;
  _QWORD *v216;
  void *v217;
  uint64_t v218;
  WTF::StringImpl *v219;
  int v220;
  WTF::StringImpl *v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  _QWORD *v225;
  void *v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  _QWORD *v230;
  void *v231;
  uint64_t v232;
  WTF::StringImpl *v233;
  int v234;
  WTF::StringImpl *v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  _QWORD *v239;
  void *v240;
  unsigned int v241;
  unint64_t v242;
  unint64_t v243;
  _QWORD *v244;
  void *v245;
  uint64_t v246;
  uint64_t v247;
  WTF::StringImpl *v248;
  int v249;
  WTF::StringImpl *v250;
  unint64_t v251;
  unint64_t v252;
  _QWORD *v253;
  void *v254;
  _QWORD *v255;
  uint64_t v256;
  WTF::StringImpl *v257;
  int v258;
  WTF::StringImpl *v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  _QWORD *v263;
  void *v264;
  _QWORD *v265;
  uint64_t v266;
  WebCore::GraphicsContextGL *v267;
  unint64_t v268;
  unint64_t v269;
  uint64_t v270;
  _QWORD *v271;
  void *v272;
  _QWORD *v273;
  uint64_t v274;
  WebCore::GraphicsContextGL *v275;
  unint64_t v276;
  unint64_t v277;
  _QWORD *v278;
  void *v279;
  _QWORD *v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  _QWORD *v284;
  void *v285;
  _QWORD *v286;
  uint64_t v287;
  WTF::StringImpl *v288;
  int v289;
  WTF::StringImpl *v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  _QWORD *v294;
  void *v295;
  _QWORD *v296;
  uint64_t v297;
  WTF::StringImpl *v298;
  int v299;
  WTF::StringImpl *v300;
  uint64_t v301;
  unint64_t v302;
  unint64_t v303;
  _QWORD *v304;
  void *v305;
  _QWORD *v306;
  uint64_t v307;
  WTF::StringImpl *v308;
  int v309;
  WTF::StringImpl *v310;
  uint64_t v311;
  unint64_t v312;
  unint64_t v313;
  _QWORD *v314;
  void *v315;
  _QWORD *v316;
  uint64_t v317;
  WTF::StringImpl *v318;
  int v319;
  uint64_t v320;
  unint64_t v321;
  unint64_t v322;
  uint64_t v323;
  _QWORD *v324;
  void *v325;
  _QWORD *v326;
  WTF::StringImpl *v327;

  if (!*(_BYTE *)(this + 364))
  {
    v4 = this;
    v5 = *(_QWORD *)(*(_QWORD *)(this + 56) + 8);
    if (v5)
      v6 = v5 - 96;
    else
      v6 = 0;
    v7 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 136))(v6) + 472);
    v8 = *(_QWORD *)(v4 + 88);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v8 + 1960))(v8, &v327);
    v11 = v327;
    v327 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
      {
        WTF::StringImpl::destroy(v11, v9);
        if ((v10 & 1) != 0)
        {
LABEL_10:
          v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          *v12 = v327;
          v13 = *(_QWORD *)(v4 + 88);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v15 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v13 + 1960))(v13, &v327);
          v16 = v327;
          v327 = 0;
          if (v16)
          {
            if (*(_DWORD *)v16 == 2)
            {
              WTF::StringImpl::destroy(v16, v14);
              if (v15)
                goto LABEL_14;
              goto LABEL_24;
            }
            *(_DWORD *)v16 -= 2;
          }
          if (v15)
          {
LABEL_14:
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v12[1] = v327;
            v18 = 2;
LABEL_21:
            if ((WebCore::EXTColorBufferHalfFloat::supported(*(WebCore::EXTColorBufferHalfFloat **)(v4 + 88), v17) & 1) == 0)
            {
LABEL_27:
              LODWORD(v24) = 16;
              goto LABEL_28;
            }
            v23 = v18;
LABEL_26:
            ++v18;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v12[v23] = v327;
            goto LABEL_27;
          }
LABEL_24:
          if ((WebCore::EXTColorBufferHalfFloat::supported(*(WebCore::EXTColorBufferHalfFloat **)(v4 + 88), v14) & 1) != 0)
          {
            v23 = 1;
            v18 = 1;
            goto LABEL_26;
          }
          v32 = *(_QWORD *)(v4 + 88);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v34 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v32 + 1960))(v32, &v327);
          v35 = v327;
          v327 = 0;
          if (v35)
          {
            if (*(_DWORD *)v35 == 2)
            {
              WTF::StringImpl::destroy(v35, v33);
              if ((v34 & 1) != 0)
                goto LABEL_40;
              goto LABEL_59;
            }
            *(_DWORD *)v35 -= 2;
          }
          if ((v34 & 1) != 0)
          {
LABEL_40:
            LODWORD(v24) = 16;
            v29 = 1;
            v18 = 1;
            goto LABEL_41;
          }
LABEL_59:
          v43 = *(_QWORD *)(v4 + 88);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v45 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v43 + 1960))(v43, &v327);
          v46 = v327;
          v327 = 0;
          if (v46)
          {
            if (*(_DWORD *)v46 == 2)
              WTF::StringImpl::destroy(v46, v44);
            else
              *(_DWORD *)v46 -= 2;
          }
          LODWORD(v24) = 16;
          v18 = 1;
          if ((v45 & 1) == 0)
          {
LABEL_65:
            v47 = *(_QWORD *)(v4 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v49 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v47 + 1960))(v47, &v327);
            v50 = v327;
            v327 = 0;
            if (v50)
            {
              if (*(_DWORD *)v50 == 2)
              {
                WTF::StringImpl::destroy(v50, v48);
                if (!v49)
                  goto LABEL_79;
                goto LABEL_69;
              }
              *(_DWORD *)v50 -= 2;
            }
            if (!v49)
              goto LABEL_79;
LABEL_69:
            v51 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8);
            if (v51)
              v52 = v51 - 96;
            else
              v52 = 0;
            if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 136))(v52) + 472) & 0x800000) != 0)
            {
              v53 = v18;
              if (v18 == (_DWORD)v24)
              {
                v54 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
                memcpy(v54, v12, 8 * v18);
                if (v12)
                {
                  LODWORD(v24) = 16 * (v54 != v12);
                  if (v54 == v12)
                    v54 = 0;
                  WTF::fastFree((WTF *)v12, v55);
                }
                else
                {
                  LODWORD(v24) = 16;
                }
                v12 = v54;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v54[v18++] = v327;
              }
              else
              {
                ++v18;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v12[v53] = v327;
              }
            }
LABEL_79:
            v56 = *(_QWORD *)(v4 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v58 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v56 + 1960))(v56, &v327);
            v59 = v327;
            v327 = 0;
            if (v59)
            {
              if (*(_DWORD *)v59 == 2)
              {
                WTF::StringImpl::destroy(v59, v57);
                if (!v58)
                  goto LABEL_88;
                goto LABEL_83;
              }
              *(_DWORD *)v59 -= 2;
            }
            if (!v58)
              goto LABEL_88;
LABEL_83:
            v60 = v18;
            if (v18 == (_DWORD)v24)
            {
              v61 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
              memcpy(v61, v12, 8 * v18);
              if (v12)
              {
                LODWORD(v24) = 16 * (v61 != v12);
                if (v61 == v12)
                  v61 = 0;
                WTF::fastFree((WTF *)v12, v62);
              }
              else
              {
                LODWORD(v24) = 16;
              }
              v12 = v61;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v61[v18++] = v327;
            }
            else
            {
              ++v18;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v12[v60] = v327;
            }
LABEL_88:
            v63 = *(_QWORD *)(v4 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v65 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v63 + 1960))(v63, &v327);
            v66 = v327;
            v327 = 0;
            if (v66)
            {
              if (*(_DWORD *)v66 == 2)
              {
                WTF::StringImpl::destroy(v66, v64);
                if (!v65)
                  goto LABEL_97;
                goto LABEL_92;
              }
              *(_DWORD *)v66 -= 2;
            }
            if (!v65)
              goto LABEL_97;
LABEL_92:
            v67 = v18;
            if (v18 == (_DWORD)v24)
            {
              v68 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
              memcpy(v68, v12, 8 * v18);
              if (v12)
              {
                LODWORD(v24) = 16 * (v68 != v12);
                if (v68 == v12)
                  v68 = 0;
                WTF::fastFree((WTF *)v12, v69);
              }
              else
              {
                LODWORD(v24) = 16;
              }
              v12 = v68;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v68[v18++] = v327;
            }
            else
            {
              ++v18;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v12[v67] = v327;
            }
LABEL_97:
            v70 = *(_QWORD *)(v4 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v72 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v70 + 1960))(v70, &v327);
            v73 = v327;
            v327 = 0;
            if (v73)
            {
              if (*(_DWORD *)v73 == 2)
              {
                WTF::StringImpl::destroy(v73, v71);
                if (!v72)
                  goto LABEL_106;
                goto LABEL_101;
              }
              *(_DWORD *)v73 -= 2;
            }
            if (!v72)
              goto LABEL_106;
LABEL_101:
            v74 = v18;
            if (v18 == (_DWORD)v24)
            {
              v75 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
              memcpy(v75, v12, 8 * v18);
              if (v12)
              {
                LODWORD(v24) = 16 * (v75 != v12);
                if (v75 == v12)
                  v75 = 0;
                WTF::fastFree((WTF *)v12, v76);
              }
              else
              {
                LODWORD(v24) = 16;
              }
              v12 = v75;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v75[v18++] = v327;
            }
            else
            {
              ++v18;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v12[v74] = v327;
            }
LABEL_106:
            v77 = *(_QWORD *)(v4 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v79 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v77 + 1960))(v77, &v327);
            v80 = v327;
            v327 = 0;
            if (v80)
            {
              if (*(_DWORD *)v80 == 2)
              {
                WTF::StringImpl::destroy(v80, v78);
                if (!v79)
                  goto LABEL_115;
                goto LABEL_110;
              }
              *(_DWORD *)v80 -= 2;
            }
            if (!v79)
              goto LABEL_115;
LABEL_110:
            v81 = v18;
            if (v18 == (_DWORD)v24)
            {
              v82 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
              memcpy(v82, v12, 8 * v18);
              if (v12)
              {
                LODWORD(v24) = 16 * (v82 != v12);
                if (v82 == v12)
                  v82 = 0;
                WTF::fastFree((WTF *)v12, v83);
              }
              else
              {
                LODWORD(v24) = 16;
              }
              v12 = v82;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v82[v18++] = v327;
            }
            else
            {
              ++v18;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v12[v81] = v327;
            }
LABEL_115:
            v84 = *(_QWORD *)(v4 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v86 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v84 + 1960))(v84, &v327);
            v87 = v327;
            v327 = 0;
            if (v87)
            {
              if (*(_DWORD *)v87 == 2)
              {
                WTF::StringImpl::destroy(v87, v85);
                if (!v86)
                  goto LABEL_124;
                goto LABEL_119;
              }
              *(_DWORD *)v87 -= 2;
            }
            if (!v86)
              goto LABEL_124;
LABEL_119:
            v88 = v18;
            if (v18 == (_DWORD)v24)
            {
              v89 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
              memcpy(v89, v12, 8 * v18);
              if (v12)
              {
                LODWORD(v24) = 16 * (v89 != v12);
                if (v89 == v12)
                  v89 = 0;
                WTF::fastFree((WTF *)v12, v90);
              }
              else
              {
                LODWORD(v24) = 16;
              }
              v12 = v89;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v89[v18++] = v327;
            }
            else
            {
              ++v18;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v12[v88] = v327;
            }
LABEL_124:
            v91 = *(_QWORD *)(v4 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v93 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v91 + 1960))(v91, &v327);
            v94 = v327;
            v327 = 0;
            if (v94)
            {
              if (*(_DWORD *)v94 == 2)
              {
                WTF::StringImpl::destroy(v94, v92);
                if (!v93)
                  goto LABEL_133;
                goto LABEL_128;
              }
              *(_DWORD *)v94 -= 2;
            }
            if (!v93)
              goto LABEL_133;
LABEL_128:
            v95 = v18;
            if (v18 == (_DWORD)v24)
            {
              v96 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
              memcpy(v96, v12, 8 * v18);
              if (v12)
              {
                LODWORD(v24) = 16 * (v96 != v12);
                if (v96 == v12)
                  v96 = 0;
                WTF::fastFree((WTF *)v12, v97);
              }
              else
              {
                LODWORD(v24) = 16;
              }
              v12 = v96;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v96[v18++] = v327;
            }
            else
            {
              ++v18;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v12[v95] = v327;
            }
LABEL_133:
            v98 = *(_QWORD *)(v4 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v100 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v98 + 1960))(v98, &v327);
            v101 = v327;
            v327 = 0;
            if (v101)
            {
              if (*(_DWORD *)v101 == 2)
              {
                WTF::StringImpl::destroy(v101, v99);
                if (!v100)
                  goto LABEL_142;
                goto LABEL_137;
              }
              *(_DWORD *)v101 -= 2;
            }
            if (!v100)
              goto LABEL_142;
LABEL_137:
            v102 = v18;
            if (v18 == (_DWORD)v24)
            {
              v103 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
              memcpy(v103, v12, 8 * v18);
              if (v12)
              {
                LODWORD(v24) = 16 * (v103 != v12);
                if (v103 == v12)
                  v103 = 0;
                WTF::fastFree((WTF *)v12, v104);
              }
              else
              {
                LODWORD(v24) = 16;
              }
              v12 = v103;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v103[v18++] = v327;
            }
            else
            {
              ++v18;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v12[v102] = v327;
            }
LABEL_142:
            v105 = *(_QWORD *)(v4 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v107 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v105 + 1960))(v105, &v327);
            v108 = v327;
            v327 = 0;
            if (v108)
            {
              if (*(_DWORD *)v108 == 2)
              {
                WTF::StringImpl::destroy(v108, v106);
                if (!v107)
                  goto LABEL_156;
                goto LABEL_146;
              }
              *(_DWORD *)v108 -= 2;
            }
            if (!v107)
              goto LABEL_156;
LABEL_146:
            v109 = v18;
            if (v18 == (_DWORD)v24)
            {
              v110 = v18 + ((unint64_t)v18 >> 2);
              if (v110 >= 0x10)
                v111 = v110 + 1;
              else
                v111 = 16;
              if (v111 <= (unint64_t)v18 + 1)
                v24 = v18 + 1;
              else
                v24 = v111;
              v112 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v24));
              memcpy(v112, v12, 8 * v18);
              if (v12)
              {
                if (v112 == v12)
                {
                  LODWORD(v24) = 0;
                  v112 = 0;
                }
                WTF::fastFree((WTF *)v12, v113);
              }
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v112[v18++] = v327;
              v12 = v112;
            }
            else
            {
              ++v18;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v12[v109] = v327;
            }
LABEL_156:
            v114 = *(_QWORD *)(v4 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v116 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v114 + 1960))(v114, &v327);
            v117 = v327;
            v327 = 0;
            if (v117)
            {
              if (*(_DWORD *)v117 == 2)
              {
                WTF::StringImpl::destroy(v117, v115);
                if (!v116)
                  goto LABEL_170;
                goto LABEL_160;
              }
              *(_DWORD *)v117 -= 2;
            }
            if (!v116)
              goto LABEL_170;
LABEL_160:
            v118 = v18;
            if (v18 == (_DWORD)v24)
            {
              v119 = v18 + ((unint64_t)v18 >> 2);
              if (v119 >= 0x10)
                v120 = v119 + 1;
              else
                v120 = 16;
              if (v120 <= (unint64_t)v18 + 1)
                v24 = v18 + 1;
              else
                v24 = v120;
              v121 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v24));
              memcpy(v121, v12, 8 * v18);
              if (v12)
              {
                if (v121 == v12)
                {
                  LODWORD(v24) = 0;
                  v121 = 0;
                }
                WTF::fastFree((WTF *)v12, v122);
              }
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v121[v18++] = v327;
              v12 = v121;
            }
            else
            {
              ++v18;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v12[v118] = v327;
            }
LABEL_170:
            v123 = *(_QWORD *)(v4 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v125 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v123 + 1960))(v123, &v327);
            v126 = v327;
            v327 = 0;
            if (v126)
            {
              if (*(_DWORD *)v126 == 2)
              {
                WTF::StringImpl::destroy(v126, v124);
                if (!v125)
                  goto LABEL_184;
                goto LABEL_174;
              }
              *(_DWORD *)v126 -= 2;
            }
            if (!v125)
              goto LABEL_184;
LABEL_174:
            v127 = v18;
            if (v18 == (_DWORD)v24)
            {
              v128 = v18 + ((unint64_t)v18 >> 2);
              if (v128 >= 0x10)
                v129 = v128 + 1;
              else
                v129 = 16;
              if (v129 <= (unint64_t)v18 + 1)
                v24 = v18 + 1;
              else
                v24 = v129;
              v130 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v24));
              memcpy(v130, v12, 8 * v18);
              if (v12)
              {
                if (v130 == v12)
                {
                  LODWORD(v24) = 0;
                  v130 = 0;
                }
                WTF::fastFree((WTF *)v12, v131);
              }
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v130[v18++] = v327;
              v12 = v130;
            }
            else
            {
              ++v18;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v12[v127] = v327;
            }
LABEL_184:
            v132 = *(_QWORD *)(v4 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v134 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v132 + 1960))(v132, &v327);
            v135 = v327;
            v327 = 0;
            if (v135)
            {
              if (*(_DWORD *)v135 == 2)
              {
                WTF::StringImpl::destroy(v135, v133);
                if (!v134)
                  goto LABEL_198;
                goto LABEL_188;
              }
              *(_DWORD *)v135 -= 2;
            }
            if (!v134)
              goto LABEL_198;
LABEL_188:
            v136 = v18;
            if (v18 == (_DWORD)v24)
            {
              v137 = v18 + ((unint64_t)v18 >> 2);
              if (v137 >= 0x10)
                v138 = v137 + 1;
              else
                v138 = 16;
              if (v138 <= (unint64_t)v18 + 1)
                v24 = v18 + 1;
              else
                v24 = v138;
              v139 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v24));
              memcpy(v139, v12, 8 * v18);
              if (v12)
              {
                if (v139 == v12)
                {
                  LODWORD(v24) = 0;
                  v139 = 0;
                }
                WTF::fastFree((WTF *)v12, v140);
              }
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v139[v18++] = v327;
              v12 = v139;
            }
            else
            {
              ++v18;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v12[v136] = v327;
            }
LABEL_198:
            v141 = *(_QWORD *)(v4 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v143 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v141 + 1960))(v141, &v327);
            v144 = v327;
            v327 = 0;
            if (v144)
            {
              if (*(_DWORD *)v144 == 2)
              {
                WTF::StringImpl::destroy(v144, v142);
                if (!v143)
                  goto LABEL_212;
                goto LABEL_202;
              }
              *(_DWORD *)v144 -= 2;
            }
            if (!v143)
              goto LABEL_212;
LABEL_202:
            v145 = v18;
            if (v18 == (_DWORD)v24)
            {
              v146 = v18 + ((unint64_t)v18 >> 2);
              if (v146 >= 0x10)
                v147 = v146 + 1;
              else
                v147 = 16;
              if (v147 <= (unint64_t)v18 + 1)
                v24 = v18 + 1;
              else
                v24 = v147;
              v148 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v24));
              memcpy(v148, v12, 8 * v18);
              if (v12)
              {
                if (v148 == v12)
                {
                  LODWORD(v24) = 0;
                  v148 = 0;
                }
                WTF::fastFree((WTF *)v12, v149);
              }
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v148[v18++] = v327;
              v12 = v148;
            }
            else
            {
              ++v18;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v12[v145] = v327;
            }
LABEL_212:
            v150 = *(_QWORD *)(v4 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v152 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v150 + 1960))(v150, &v327);
            v153 = v327;
            v327 = 0;
            if (v153)
            {
              if (*(_DWORD *)v153 == 2)
              {
                WTF::StringImpl::destroy(v153, v151);
                if (!v152)
                  goto LABEL_226;
                goto LABEL_216;
              }
              *(_DWORD *)v153 -= 2;
            }
            if (!v152)
              goto LABEL_226;
LABEL_216:
            v154 = v18;
            if (v18 == (_DWORD)v24)
            {
              v155 = v18 + ((unint64_t)v18 >> 2);
              if (v155 >= 0x10)
                v156 = v155 + 1;
              else
                v156 = 16;
              if (v156 <= (unint64_t)v18 + 1)
                v24 = v18 + 1;
              else
                v24 = v156;
              v157 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v24));
              memcpy(v157, v12, 8 * v18);
              if (v12)
              {
                if (v157 == v12)
                {
                  LODWORD(v24) = 0;
                  v157 = 0;
                }
                WTF::fastFree((WTF *)v12, v158);
              }
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v157[v18++] = v327;
              v12 = v157;
            }
            else
            {
              ++v18;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v12[v154] = v327;
            }
LABEL_226:
            v159 = *(_QWORD *)(v4 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v161 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v159 + 1960))(v159, &v327);
            v162 = v327;
            v327 = 0;
            if (v162)
            {
              if (*(_DWORD *)v162 == 2)
              {
                WTF::StringImpl::destroy(v162, v160);
                if (!v161)
                  goto LABEL_240;
                goto LABEL_230;
              }
              *(_DWORD *)v162 -= 2;
            }
            if (!v161)
              goto LABEL_240;
LABEL_230:
            v163 = v18;
            if (v18 == (_DWORD)v24)
            {
              v164 = v18 + ((unint64_t)v18 >> 2);
              if (v164 >= 0x10)
                v165 = v164 + 1;
              else
                v165 = 16;
              if (v165 <= (unint64_t)v18 + 1)
                v24 = v18 + 1;
              else
                v24 = v165;
              v166 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v24));
              memcpy(v166, v12, 8 * v18);
              if (v12)
              {
                if (v166 == v12)
                {
                  LODWORD(v24) = 0;
                  v166 = 0;
                }
                WTF::fastFree((WTF *)v12, v167);
              }
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v166[v18++] = v327;
              v12 = v166;
            }
            else
            {
              ++v18;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v12[v163] = v327;
            }
LABEL_240:
            v168 = *(_QWORD *)(v4 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v170 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v168 + 1960))(v168, &v327);
            v171 = v327;
            v327 = 0;
            if (v171)
            {
              if (*(_DWORD *)v171 == 2)
              {
                WTF::StringImpl::destroy(v171, v169);
                if (!v170)
                  goto LABEL_254;
                goto LABEL_244;
              }
              *(_DWORD *)v171 -= 2;
            }
            if (!v170)
              goto LABEL_254;
LABEL_244:
            v172 = v18;
            if (v18 == (_DWORD)v24)
            {
              v173 = v18 + ((unint64_t)v18 >> 2);
              if (v173 >= 0x10)
                v174 = v173 + 1;
              else
                v174 = 16;
              if (v174 <= (unint64_t)v18 + 1)
                v24 = v18 + 1;
              else
                v24 = v174;
              v175 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v24));
              memcpy(v175, v12, 8 * v18);
              if (v12)
              {
                if (v175 == v12)
                {
                  LODWORD(v24) = 0;
                  v175 = 0;
                }
                WTF::fastFree((WTF *)v12, v176);
              }
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v175[v18++] = v327;
              v12 = v175;
            }
            else
            {
              ++v18;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v12[v172] = v327;
            }
LABEL_254:
            v177 = *(_QWORD *)(v4 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v179 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v177 + 1960))(v177, &v327);
            v180 = v327;
            v327 = 0;
            if (v180)
            {
              if (*(_DWORD *)v180 == 2)
              {
                WTF::StringImpl::destroy(v180, v178);
                if (!v179)
                  goto LABEL_268;
                goto LABEL_258;
              }
              *(_DWORD *)v180 -= 2;
            }
            if (!v179)
              goto LABEL_268;
LABEL_258:
            v181 = v18;
            if (v18 == (_DWORD)v24)
            {
              v182 = v18 + ((unint64_t)v18 >> 2);
              if (v182 >= 0x10)
                v183 = v182 + 1;
              else
                v183 = 16;
              if (v183 <= (unint64_t)v18 + 1)
                v24 = v18 + 1;
              else
                v24 = v183;
              v184 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v24));
              memcpy(v184, v12, 8 * v18);
              if (v12)
              {
                if (v184 == v12)
                {
                  LODWORD(v24) = 0;
                  v184 = 0;
                }
                WTF::fastFree((WTF *)v12, v185);
              }
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v184[v18++] = v327;
              v12 = v184;
            }
            else
            {
              ++v18;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v12[v181] = v327;
            }
LABEL_268:
            if (WebCore::WebGLCompressedTextureASTC::supported(*(WebCore::WebGLCompressedTextureASTC **)(v4 + 88), v178))
            {
              v186 = v18;
              if (v18 == (_DWORD)v24)
              {
                v187 = v18 + ((unint64_t)v18 >> 2);
                if (v187 >= 0x10)
                  v188 = v187 + 1;
                else
                  v188 = 16;
                if (v188 <= (unint64_t)v18 + 1)
                  v24 = v18 + 1;
                else
                  v24 = v188;
                v189 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v24));
                memcpy(v189, v12, 8 * v18);
                if (v12)
                {
                  if (v189 == v12)
                  {
                    LODWORD(v24) = 0;
                    v189 = 0;
                  }
                  WTF::fastFree((WTF *)v12, v190);
                }
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v189[v18++] = v327;
                v12 = v189;
              }
              else
              {
                ++v18;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v12[v186] = v327;
              }
            }
            v191 = *(_QWORD *)(v4 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v193 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v191 + 1960))(v191, &v327);
            v194 = v327;
            v327 = 0;
            if (v194)
            {
              if (*(_DWORD *)v194 == 2)
              {
                WTF::StringImpl::destroy(v194, v192);
                if (!v193)
                  goto LABEL_293;
                goto LABEL_283;
              }
              *(_DWORD *)v194 -= 2;
            }
            if (!v193)
              goto LABEL_293;
LABEL_283:
            v195 = v18;
            if (v18 == (_DWORD)v24)
            {
              v196 = v18 + ((unint64_t)v18 >> 2);
              if (v196 >= 0x10)
                v197 = v196 + 1;
              else
                v197 = 16;
              if (v197 <= (unint64_t)v18 + 1)
                v24 = v18 + 1;
              else
                v24 = v197;
              v198 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v24));
              memcpy(v198, v12, 8 * v18);
              if (v12)
              {
                if (v198 == v12)
                {
                  LODWORD(v24) = 0;
                  v198 = 0;
                }
                WTF::fastFree((WTF *)v12, v199);
              }
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v198[v18++] = v327;
              v12 = v198;
            }
            else
            {
              ++v18;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v12[v195] = v327;
            }
LABEL_293:
            v200 = *(_QWORD *)(v4 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v202 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v200 + 1960))(v200, &v327);
            v203 = v327;
            v327 = 0;
            if (v203)
            {
              if (*(_DWORD *)v203 == 2)
              {
                WTF::StringImpl::destroy(v203, v201);
                if (!v202)
                  goto LABEL_307;
                goto LABEL_297;
              }
              *(_DWORD *)v203 -= 2;
            }
            if (!v202)
              goto LABEL_307;
LABEL_297:
            v204 = v18;
            if (v18 == (_DWORD)v24)
            {
              v205 = v18 + ((unint64_t)v18 >> 2);
              if (v205 >= 0x10)
                v206 = v205 + 1;
              else
                v206 = 16;
              if (v206 <= (unint64_t)v18 + 1)
                v24 = v18 + 1;
              else
                v24 = v206;
              v207 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v24));
              memcpy(v207, v12, 8 * v18);
              if (v12)
              {
                if (v207 == v12)
                {
                  LODWORD(v24) = 0;
                  v207 = 0;
                }
                WTF::fastFree((WTF *)v12, v208);
              }
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v207[v18++] = v327;
              v12 = v207;
            }
            else
            {
              ++v18;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v12[v204] = v327;
            }
LABEL_307:
            v209 = *(_QWORD *)(v4 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v211 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v209 + 1960))(v209, &v327);
            v212 = v327;
            v327 = 0;
            if (v212)
            {
              if (*(_DWORD *)v212 == 2)
              {
                WTF::StringImpl::destroy(v212, v210);
                if (!v211)
                  goto LABEL_321;
                goto LABEL_311;
              }
              *(_DWORD *)v212 -= 2;
            }
            if (!v211)
              goto LABEL_321;
LABEL_311:
            v213 = v18;
            if (v18 == (_DWORD)v24)
            {
              v214 = v18 + ((unint64_t)v18 >> 2);
              if (v214 >= 0x10)
                v215 = v214 + 1;
              else
                v215 = 16;
              if (v215 <= (unint64_t)v18 + 1)
                v24 = v18 + 1;
              else
                v24 = v215;
              v216 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v24));
              memcpy(v216, v12, 8 * v18);
              if (v12)
              {
                if (v216 == v12)
                {
                  LODWORD(v24) = 0;
                  v216 = 0;
                }
                WTF::fastFree((WTF *)v12, v217);
              }
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v216[v18++] = v327;
              v12 = v216;
            }
            else
            {
              ++v18;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v12[v213] = v327;
            }
LABEL_321:
            v218 = *(_QWORD *)(v4 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v220 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v218 + 1960))(v218, &v327);
            v221 = v327;
            v327 = 0;
            if (v221)
            {
              if (*(_DWORD *)v221 == 2)
              {
                WTF::StringImpl::destroy(v221, v219);
                if (!v220)
                  goto LABEL_335;
                goto LABEL_325;
              }
              *(_DWORD *)v221 -= 2;
            }
            if (!v220)
              goto LABEL_335;
LABEL_325:
            v222 = v18;
            if (v18 == (_DWORD)v24)
            {
              v223 = v18 + ((unint64_t)v18 >> 2);
              if (v223 >= 0x10)
                v224 = v223 + 1;
              else
                v224 = 16;
              if (v224 <= (unint64_t)v18 + 1)
                v24 = v18 + 1;
              else
                v24 = v224;
              v225 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v24));
              memcpy(v225, v12, 8 * v18);
              if (v12)
              {
                if (v225 == v12)
                {
                  LODWORD(v24) = 0;
                  v225 = 0;
                }
                WTF::fastFree((WTF *)v12, v226);
              }
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v225[v18++] = v327;
              v12 = v225;
            }
            else
            {
              ++v18;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v12[v222] = v327;
            }
LABEL_335:
            if (WebCore::WebGLCompressedTextureS3TC::supported(*(WebCore::WebGLCompressedTextureS3TC **)(v4 + 88), v219))
            {
              v227 = v18;
              if (v18 == (_DWORD)v24)
              {
                v228 = v18 + ((unint64_t)v18 >> 2);
                if (v228 >= 0x10)
                  v229 = v228 + 1;
                else
                  v229 = 16;
                if (v229 <= (unint64_t)v18 + 1)
                  v24 = v18 + 1;
                else
                  v24 = v229;
                v230 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v24));
                memcpy(v230, v12, 8 * v18);
                if (v12)
                {
                  if (v230 == v12)
                  {
                    LODWORD(v24) = 0;
                    v230 = 0;
                  }
                  WTF::fastFree((WTF *)v12, v231);
                }
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v230[v18++] = v327;
                v12 = v230;
              }
              else
              {
                ++v18;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v12[v227] = v327;
              }
            }
            v232 = *(_QWORD *)(v4 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v234 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v232 + 1960))(v232, &v327);
            v235 = v327;
            v327 = 0;
            if (v235)
            {
              if (*(_DWORD *)v235 == 2)
              {
                WTF::StringImpl::destroy(v235, v233);
                if (!v234)
                  goto LABEL_360;
                goto LABEL_350;
              }
              *(_DWORD *)v235 -= 2;
            }
            if (!v234)
              goto LABEL_360;
LABEL_350:
            v236 = v18;
            if (v18 == (_DWORD)v24)
            {
              v237 = v18 + ((unint64_t)v18 >> 2);
              if (v237 >= 0x10)
                v238 = v237 + 1;
              else
                v238 = 16;
              if (v238 <= (unint64_t)v18 + 1)
                v24 = v18 + 1;
              else
                v24 = v238;
              v239 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v24));
              memcpy(v239, v12, 8 * v18);
              if (v12)
              {
                if (v239 == v12)
                {
                  LODWORD(v24) = 0;
                  v239 = 0;
                }
                WTF::fastFree((WTF *)v12, v240);
              }
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v239[v18++] = v327;
              v12 = v239;
            }
            else
            {
              ++v18;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v12[v236] = v327;
            }
LABEL_360:
            v241 = v18;
            if (v18 == (_DWORD)v24)
            {
              v242 = v18 + ((unint64_t)v18 >> 2);
              if (v242 >= 0x10)
                v243 = v242 + 1;
              else
                v243 = 16;
              if (v243 <= (unint64_t)v18 + 1)
                v24 = v18 + 1;
              else
                v24 = v243;
              v244 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v24));
              memcpy(v244, v12, 8 * v18);
              if (v12)
              {
                if (v244 == v12)
                {
                  LODWORD(v24) = 0;
                  v244 = 0;
                }
                WTF::fastFree((WTF *)v12, v245);
              }
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v244[v18] = v327;
              v12 = v244;
            }
            else
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v12[v18] = v327;
            }
            v246 = v18 + 1;
            v247 = *(_QWORD *)(v4 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v249 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v247 + 1960))(v247, &v327);
            v250 = v327;
            v327 = 0;
            if (v250)
            {
              if (*(_DWORD *)v250 == 2)
              {
                WTF::StringImpl::destroy(v250, v248);
                if (!v249)
                  goto LABEL_386;
                goto LABEL_374;
              }
              *(_DWORD *)v250 -= 2;
            }
            if (!v249)
              goto LABEL_386;
LABEL_374:
            if ((_DWORD)v246 == (_DWORD)v24)
            {
              v251 = ((unint64_t)v24 >> 2) + v24;
              if (v251 >= 0x10)
                v252 = v251 + 1;
              else
                v252 = 16;
              if (v252 <= v246 + 1)
                v24 = v246 + 1;
              else
                v24 = v252;
              v253 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v24));
              memcpy(v253, v12, 8 * v246);
              if (v253 == v12)
              {
                LODWORD(v24) = 0;
                v255 = 0;
              }
              else
              {
                v255 = v253;
              }
              WTF::fastFree((WTF *)v12, v254);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v255[v246] = v327;
              LODWORD(v246) = v241 + 2;
              v12 = v253;
            }
            else
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v12[v246] = v327;
              LODWORD(v246) = v241 + 2;
            }
LABEL_386:
            v256 = *(_QWORD *)(v4 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v258 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v256 + 1960))(v256, &v327);
            v259 = v327;
            v327 = 0;
            if (v259)
            {
              if (*(_DWORD *)v259 == 2)
              {
                WTF::StringImpl::destroy(v259, v257);
                if (!v258)
                  goto LABEL_403;
                goto LABEL_390;
              }
              *(_DWORD *)v259 -= 2;
            }
            if (!v258)
              goto LABEL_403;
LABEL_390:
            if ((v7 & 0x100000) != 0)
            {
              v260 = v246;
              if ((_DWORD)v246 == (_DWORD)v24)
              {
                v261 = v246 + ((unint64_t)v246 >> 2);
                if (v261 >= 0x10)
                  v262 = v261 + 1;
                else
                  v262 = 16;
                if (v262 <= (unint64_t)v246 + 1)
                  v24 = v246 + 1;
                else
                  v24 = v262;
                v263 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v24));
                memcpy(v263, v12, 8 * v246);
                if (v263 == v12)
                {
                  LODWORD(v24) = 0;
                  v265 = 0;
                }
                else
                {
                  v265 = v263;
                }
                WTF::fastFree((WTF *)v12, v264);
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v265[v246] = v327;
                LODWORD(v246) = v246 + 1;
                v12 = v263;
              }
              else
              {
                LODWORD(v246) = v246 + 1;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v12[v260] = v327;
              }
            }
LABEL_403:
            v266 = v246;
            if ((_DWORD)v246 == (_DWORD)v24)
            {
              v268 = v246 + ((unint64_t)v246 >> 2);
              if (v268 >= 0x10)
                v269 = v268 + 1;
              else
                v269 = 16;
              if (v269 <= (unint64_t)v246 + 1)
                v270 = v246 + 1;
              else
                v270 = v269;
              v271 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v270));
              memcpy(v271, v12, 8 * v266);
              if (v271 == v12)
                LODWORD(v24) = 0;
              else
                LODWORD(v24) = v270;
              if (v271 == v12)
                v273 = 0;
              else
                v273 = v271;
              WTF::fastFree((WTF *)v12, v272);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v273[v266] = v327;
              v12 = v271;
            }
            else
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v12[v246] = v327;
            }
            v274 = (v266 + 1);
            if (WebCore::WebGLMultiDraw::supported(*(WebCore::WebGLMultiDraw **)(v4 + 88), v267))
            {
              if ((_DWORD)v274 == (_DWORD)v24)
              {
                v276 = ((unint64_t)v24 >> 2) + v24;
                if (v276 >= 0x10)
                  v277 = v276 + 1;
                else
                  v277 = 16;
                if (v277 <= v274 + 1)
                  v24 = v274 + 1;
                else
                  v24 = v277;
                v278 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v24));
                memcpy(v278, v12, 8 * v274);
                if (v278 == v12)
                {
                  LODWORD(v24) = 0;
                  v280 = 0;
                }
                else
                {
                  v280 = v278;
                }
                WTF::fastFree((WTF *)v12, v279);
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v280[v274] = v327;
                LODWORD(v274) = v266 + 2;
                v12 = v278;
              }
              else
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v12[v274] = v327;
                LODWORD(v274) = v266 + 2;
              }
            }
            if (WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance::supported(*(WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance **)(v4 + 88), v275)&& (v7 & 0x100000) != 0)
            {
              v281 = v274;
              if ((_DWORD)v274 == (_DWORD)v24)
              {
                v282 = v274 + ((unint64_t)v274 >> 2);
                if (v282 >= 0x10)
                  v283 = v282 + 1;
                else
                  v283 = 16;
                if (v283 <= (unint64_t)v274 + 1)
                  v24 = v274 + 1;
                else
                  v24 = v283;
                v284 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v24));
                memcpy(v284, v12, 8 * v274);
                if (v284 == v12)
                {
                  LODWORD(v24) = 0;
                  v286 = 0;
                }
                else
                {
                  v286 = v284;
                }
                WTF::fastFree((WTF *)v12, v285);
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v286[v274] = v327;
                LODWORD(v274) = v274 + 1;
                v12 = v284;
              }
              else
              {
                LODWORD(v274) = v274 + 1;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v12[v281] = v327;
              }
            }
            v287 = *(_QWORD *)(v4 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v289 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v287 + 1960))(v287, &v327);
            v290 = v327;
            v327 = 0;
            if (v290)
            {
              if (*(_DWORD *)v290 == 2)
              {
                WTF::StringImpl::destroy(v290, v288);
                if (!v289)
                  goto LABEL_461;
                goto LABEL_449;
              }
              *(_DWORD *)v290 -= 2;
            }
            if (!v289)
              goto LABEL_461;
LABEL_449:
            v291 = v274;
            if ((_DWORD)v274 == (_DWORD)v24)
            {
              v292 = v274 + ((unint64_t)v274 >> 2);
              if (v292 >= 0x10)
                v293 = v292 + 1;
              else
                v293 = 16;
              if (v293 <= (unint64_t)v274 + 1)
                v24 = v274 + 1;
              else
                v24 = v293;
              v294 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v24));
              memcpy(v294, v12, 8 * v274);
              if (v294 == v12)
              {
                LODWORD(v24) = 0;
                v296 = 0;
              }
              else
              {
                v296 = v294;
              }
              WTF::fastFree((WTF *)v12, v295);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v296[v274] = v327;
              LODWORD(v274) = v274 + 1;
              v12 = v294;
            }
            else
            {
              LODWORD(v274) = v274 + 1;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v12[v291] = v327;
            }
LABEL_461:
            v297 = *(_QWORD *)(v4 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v299 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v297 + 1960))(v297, &v327);
            v300 = v327;
            v327 = 0;
            if (v300)
            {
              if (*(_DWORD *)v300 == 2)
              {
                WTF::StringImpl::destroy(v300, v298);
                if (!v299)
                  goto LABEL_477;
                goto LABEL_465;
              }
              *(_DWORD *)v300 -= 2;
            }
            if (!v299)
              goto LABEL_477;
LABEL_465:
            v301 = v274;
            if ((_DWORD)v274 == (_DWORD)v24)
            {
              v302 = v274 + ((unint64_t)v274 >> 2);
              if (v302 >= 0x10)
                v303 = v302 + 1;
              else
                v303 = 16;
              if (v303 <= (unint64_t)v274 + 1)
                v24 = v274 + 1;
              else
                v24 = v303;
              v304 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v24));
              memcpy(v304, v12, 8 * v274);
              if (v304 == v12)
              {
                LODWORD(v24) = 0;
                v306 = 0;
              }
              else
              {
                v306 = v304;
              }
              WTF::fastFree((WTF *)v12, v305);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v306[v274] = v327;
              LODWORD(v274) = v274 + 1;
              v12 = v304;
            }
            else
            {
              LODWORD(v274) = v274 + 1;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v12[v301] = v327;
            }
LABEL_477:
            v307 = *(_QWORD *)(v4 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v309 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v307 + 1960))(v307, &v327);
            v310 = v327;
            v327 = 0;
            if (v310)
            {
              if (*(_DWORD *)v310 == 2)
              {
                WTF::StringImpl::destroy(v310, v308);
                if (!v309)
                  goto LABEL_493;
                goto LABEL_481;
              }
              *(_DWORD *)v310 -= 2;
            }
            if (!v309)
              goto LABEL_493;
LABEL_481:
            v311 = v274;
            if ((_DWORD)v274 == (_DWORD)v24)
            {
              v312 = v274 + ((unint64_t)v274 >> 2);
              if (v312 >= 0x10)
                v313 = v312 + 1;
              else
                v313 = 16;
              if (v313 <= (unint64_t)v274 + 1)
                v24 = v274 + 1;
              else
                v24 = v313;
              v314 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v24));
              memcpy(v314, v12, 8 * v274);
              if (v314 == v12)
              {
                LODWORD(v24) = 0;
                v316 = 0;
              }
              else
              {
                v316 = v314;
              }
              WTF::fastFree((WTF *)v12, v315);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v316[v274] = v327;
              LODWORD(v274) = v274 + 1;
              v12 = v314;
            }
            else
            {
              LODWORD(v274) = v274 + 1;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v12[v311] = v327;
            }
LABEL_493:
            v317 = *(_QWORD *)(v4 + 88);
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v319 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v317 + 1960))(v317, &v327);
            this = (uint64_t)v327;
            v327 = 0;
            if (this)
            {
              if (*(_DWORD *)this == 2)
              {
                this = WTF::StringImpl::destroy((WTF::StringImpl *)this, v318);
                if (v319)
                {
LABEL_497:
                  v320 = v274;
                  if ((_DWORD)v274 == (_DWORD)v24)
                  {
                    v321 = v274 + ((unint64_t)v274 >> 2);
                    if (v321 >= 0x10)
                      v322 = v321 + 1;
                    else
                      v322 = 16;
                    if (v322 <= (unint64_t)v274 + 1)
                      v323 = v274 + 1;
                    else
                      v323 = v322;
                    v324 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v323));
                    memcpy(v324, v12, 8 * v274);
                    if (v324 == v12)
                      LODWORD(v24) = 0;
                    else
                      LODWORD(v24) = v323;
                    if (v324 == v12)
                      v326 = 0;
                    else
                      v326 = v324;
                    WTF::fastFree((WTF *)v12, v325);
                    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v326[v274] = v327;
                    LODWORD(v274) = v274 + 1;
                    v12 = v324;
                  }
                  else
                  {
                    LODWORD(v274) = v274 + 1;
                    this = WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v12[v320] = v327;
                  }
                }
LABEL_512:
                *(_QWORD *)a2 = v12;
                v3 = 1;
                *(_DWORD *)(a2 + 8) = v24;
                *(_DWORD *)(a2 + 12) = v274;
                goto LABEL_513;
              }
              *(_DWORD *)this -= 2;
            }
            if (v319)
              goto LABEL_497;
            goto LABEL_512;
          }
          v40 = 1;
LABEL_64:
          ++v18;
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v12[v40] = v327;
          goto LABEL_65;
        }
LABEL_16:
        v19 = *(_QWORD *)(v4 + 88);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v21 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v19 + 1960))(v19, &v327);
        v22 = v327;
        v327 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
          {
            WTF::StringImpl::destroy(v22, v20);
            if ((v21 & 1) != 0)
              goto LABEL_20;
            goto LABEL_55;
          }
          *(_DWORD *)v22 -= 2;
        }
        if ((v21 & 1) != 0)
        {
LABEL_20:
          v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          *v12 = v327;
          v18 = 1;
          goto LABEL_21;
        }
LABEL_55:
        if ((WebCore::EXTColorBufferHalfFloat::supported(*(WebCore::EXTColorBufferHalfFloat **)(v4 + 88), v20) & 1) != 0)
        {
          v12 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          *v12 = v327;
          LODWORD(v24) = 16;
          v18 = 1;
        }
        else
        {
          v18 = 0;
          LODWORD(v24) = 0;
          v12 = 0;
        }
LABEL_28:
        v25 = *(_QWORD *)(v4 + 88);
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v27 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v25 + 1960))(v25, &v327);
        v28 = v327;
        v327 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
          {
            WTF::StringImpl::destroy(v28, v26);
            if ((v27 & 1) == 0)
              goto LABEL_42;
LABEL_32:
            v29 = v18;
            if (v18 == (_DWORD)v24)
            {
              v30 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
              memcpy(v30, v12, 8 * v18);
              if (v12)
              {
                LODWORD(v24) = 16 * (v30 != v12);
                if (v30 == v12)
                  v30 = 0;
                WTF::fastFree((WTF *)v12, v31);
              }
              else
              {
                LODWORD(v24) = 16;
              }
              v12 = v30;
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v30[v18++] = v327;
LABEL_42:
              v36 = *(_QWORD *)(v4 + 88);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v38 = (*(uint64_t (**)(uint64_t, WTF::StringImpl **))(*(_QWORD *)v36 + 1960))(v36, &v327);
              v39 = v327;
              v327 = 0;
              if (v39)
              {
                if (*(_DWORD *)v39 == 2)
                {
                  WTF::StringImpl::destroy(v39, v37);
                  if ((v38 & 1) == 0)
                    goto LABEL_65;
LABEL_46:
                  v40 = v18;
                  if (v18 == (_DWORD)v24)
                  {
                    v41 = (_QWORD *)WTF::fastMalloc((WTF *)0x80);
                    memcpy(v41, v12, 8 * v18);
                    if (v12)
                    {
                      LODWORD(v24) = 16 * (v41 != v12);
                      if (v41 == v12)
                        v41 = 0;
                      WTF::fastFree((WTF *)v12, v42);
                    }
                    else
                    {
                      LODWORD(v24) = 16;
                    }
                    v12 = v41;
                    WTF::StringImpl::createWithoutCopyingNonEmpty();
                    v41[v18++] = v327;
                    goto LABEL_65;
                  }
                  goto LABEL_64;
                }
                *(_DWORD *)v39 -= 2;
              }
              if ((v38 & 1) == 0)
                goto LABEL_65;
              goto LABEL_46;
            }
LABEL_41:
            ++v18;
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v12[v29] = v327;
            goto LABEL_42;
          }
          *(_DWORD *)v28 -= 2;
        }
        if ((v27 & 1) == 0)
          goto LABEL_42;
        goto LABEL_32;
      }
      *(_DWORD *)v11 -= 2;
    }
    if ((v10 & 1) != 0)
      goto LABEL_10;
    goto LABEL_16;
  }
  v3 = 0;
  *(_BYTE *)a2 = 0;
LABEL_513:
  *(_BYTE *)(a2 + 16) = v3;
  return this;
}

uint64_t WebCore::WebGL2RenderingContext::getFramebufferAttachmentParameter@<X0>(uint64_t this@<X0>, int a2@<W1>, unsigned int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  _BOOL4 v22;
  _BOOL4 v23;
  const char *v24;
  WTF::StringImpl *v25;
  int v26;
  uint64_t v27;
  uint64_t (*v28)(void);
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  int v35;
  int v36;
  int v37;
  WebCore::WebGL2RenderingContext *v38;
  int v39;
  uint64_t v40;
  int v41;
  unsigned __int8 v42;
  uint64_t v43;
  int v44;
  char v45;
  char v46;
  uint64_t *v47;

  if (*(_BYTE *)(this + 364))
    goto LABEL_2;
  v6 = this;
  if ((a2 - 36008) >= 2 && a2 != 36160)
  {
    v12 = "invalid target";
    v13 = 1280;
    v14 = 15;
LABEL_20:
    this = (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)this, v13, (uint64_t)"getFramebufferAttachmentParameter", 34, (uint64_t)v12, v14);
LABEL_2:
    *(_QWORD *)a5 = 0;
    *(_DWORD *)(a5 + 16) = 0;
    return this;
  }
  v10 = 176;
  if (a2 == 36008)
    v10 = 928;
  v11 = *(_QWORD *)(this + v10);
  if (v11)
  {
    ++*(_DWORD *)(v11 + 8);
    if (a3 == 33306 || a3 == 36096 || a3 == 36128)
    {
      LOBYTE(v43) = 0;
      v45 = 0;
      if (a3 == 33306)
      {
        WebCore::WebGLFramebuffer::getAttachmentObject((_QWORD *)v11, 36096, (uint64_t)&v40);
        if (v45 != v42)
        {
          if (v45)
          {
            if (v44 != -1)
              ((void (*)(uint64_t **, uint64_t *))off_1E33DDE18[v44])(&v47, &v43);
            v44 = -1;
            v45 = 0;
          }
          else
          {
            LOBYTE(v43) = 0;
            v44 = -1;
            v18 = v41;
            if (v41 != -1)
            {
              ((void (*)(uint64_t **, uint64_t *, uint64_t *))off_1E33DDE38[v41])(&v47, &v43, &v40);
              v44 = v18;
            }
            v45 = 1;
          }
          goto LABEL_54;
        }
        if (!v45)
          goto LABEL_57;
        if (v44 == -1)
        {
          if (v41 == -1)
            goto LABEL_54;
        }
        else if (v41 == -1)
        {
          ((void (*)(uint64_t **, uint64_t *))off_1E33DDE18[v44])(&v47, &v43);
          v44 = -1;
LABEL_54:
          if (v42 && v41 != -1)
            ((void (*)(uint64_t **, uint64_t *))off_1E33DDE18[v41])(&v47, &v40);
LABEL_57:
          this = (uint64_t)WebCore::WebGLFramebuffer::getAttachmentObject((_QWORD *)v11, 36128, (uint64_t)&v40);
          v20 = v42;
          v21 = (v45 != 0) ^ (v42 != 0);
          if (!v45 || !v42)
            goto LABEL_67;
          v22 = v41 == v44;
          v23 = v41 == -1;
          if (v41 == -1)
            v22 = 0;
          if (v44 != -1)
            v23 = v22;
          v21 = !v23;
          if (v44 != -1 && v22)
          {
            v47 = (uint64_t *)&v46;
            this = ((uint64_t (*)(uint64_t **, uint64_t *, uint64_t *))off_1E33DDE48[v44])(&v47, &v43, &v40);
            if ((this & 1) == 0)
            {
              v20 = v42;
              goto LABEL_71;
            }
          }
          else
          {
LABEL_67:
            if (!v21)
            {
LABEL_71:
              if (v20 && v41 != -1)
                this = ((uint64_t (*)(uint64_t **, uint64_t *))off_1E33DDE18[v41])(&v47, &v40);
              v19 = 1;
LABEL_75:
              if (v45)
              {
                if (a4 <= 36047)
                {
                  if ((a4 - 33298) >= 6 && a4 != 33296)
                  {
                    if (a4 == 33297)
                    {
                      if (v19)
                      {
                        v24 = "component type cannot be queried for DEPTH_STENCIL_ATTACHMENT";
                        v25 = (WTF::StringImpl *)v6;
                        v26 = 1282;
                        v27 = 62;
LABEL_96:
                        this = (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError(v25, v26, (uint64_t)"getFramebufferAttachmentParameter", 34, (uint64_t)v24, v27);
                        goto LABEL_97;
                      }
                      v28 = *(uint64_t (**)(void))(**(_QWORD **)(v6 + 88) + 528);
                      goto LABEL_88;
                    }
                    goto LABEL_94;
                  }
LABEL_87:
                  v28 = *(uint64_t (**)(void))(**(_QWORD **)(v6 + 88) + 528);
LABEL_88:
                  this = v28();
                  *(_DWORD *)a5 = this;
                  v29 = 2;
LABEL_104:
                  *(_DWORD *)(a5 + 16) = v29;
                  goto LABEL_105;
                }
                if ((a4 - 36050) < 3)
                {
                  if (v44 == 1)
                    goto LABEL_87;
LABEL_94:
                  v24 = "invalid parameter name";
                  v25 = (WTF::StringImpl *)v6;
                  v26 = 1280;
                  goto LABEL_95;
                }
                if (a4 == 36049)
                {
                  if (v44 == 1)
                  {
                    v31 = v43;
                    v43 = 0;
                    *(_QWORD *)a5 = v31;
                    v29 = 21;
                  }
                  else
                  {
                    if (v44)
                    {
                      v38 = (WebCore::WebGL2RenderingContext *)std::__throw_bad_variant_access[abi:sn180100]();
                      return WebCore::WebGL2RenderingContext::validateFramebufferTarget(v38, v39);
                    }
                    v32 = v43;
                    v43 = 0;
                    *(_QWORD *)a5 = v32;
                    v29 = 19;
                  }
                  goto LABEL_104;
                }
                if (a4 != 36048)
                  goto LABEL_94;
                if (v44 == 1)
                  v30 = 5890;
                else
                  v30 = 36161;
                *(_DWORD *)a5 = v30;
              }
              else
              {
                if (a4 == 36049)
                {
LABEL_97:
                  *(_QWORD *)a5 = 0;
                  *(_DWORD *)(a5 + 16) = 0;
LABEL_105:
                  if (v45 && v44 != -1)
                    this = ((uint64_t (*)(uint64_t *, uint64_t *))off_1E33DDE18[v44])(&v40, &v43);
                  goto LABEL_108;
                }
                if (a4 != 36048)
                {
                  v24 = "invalid parameter name";
                  v25 = (WTF::StringImpl *)v6;
                  v26 = 1282;
LABEL_95:
                  v27 = 23;
                  goto LABEL_96;
                }
                *(_DWORD *)a5 = 0;
              }
              v29 = 3;
              goto LABEL_104;
            }
          }
          this = (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v6, 1282, (uint64_t)"getFramebufferAttachmentParameter", 34, (uint64_t)"different objects bound to DEPTH_ATTACHMENT and STENCIL_ATTACHMENT", 67);
          *(_QWORD *)a5 = 0;
          *(_DWORD *)(a5 + 16) = 0;
          if (v42 && v41 != -1)
            this = ((uint64_t (*)(uint64_t **, uint64_t *))off_1E33DDE18[v41])(&v47, &v40);
          goto LABEL_105;
        }
        v47 = &v43;
        ((void (*)(uint64_t **, uint64_t *, uint64_t *))off_1E33DDE28[v41])(&v47, &v43, &v40);
        goto LABEL_54;
      }
    }
    else
    {
      if (a3 >> 5 < 0x467)
        goto LABEL_39;
      v15 = *(_DWORD *)(this + 284);
      if (!v15)
      {
        v16 = *(_QWORD *)(this + 88);
        LODWORD(v43) = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v16 + 472))(v16, 34852, &v43, 1);
        v15 = v43;
        *(_DWORD *)(v6 + 284) = v43;
      }
      if (v15 + 36064 <= a3)
      {
LABEL_39:
        this = (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v6, 1280, (uint64_t)"getFramebufferAttachmentParameter", 34, (uint64_t)"invalid attachment", 19);
        *(_QWORD *)a5 = 0;
        *(_DWORD *)(a5 + 16) = 0;
LABEL_108:
        if (*(_DWORD *)(v11 + 8) == 1)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
        --*(_DWORD *)(v11 + 8);
        return this;
      }
      LOBYTE(v43) = 0;
      v45 = 0;
    }
    this = (uint64_t)WebCore::WebGLFramebuffer::getAttachmentObject((_QWORD *)v11, a3, (uint64_t)&v40);
    if (v45 != v42)
    {
      if (v45)
      {
        if (v44 != -1)
          this = ((uint64_t (*)(uint64_t **, uint64_t *))off_1E33DDE18[v44])(&v47, &v43);
        v44 = -1;
        v45 = 0;
      }
      else
      {
        LOBYTE(v43) = 0;
        v44 = -1;
        v17 = v41;
        if (v41 != -1)
        {
          this = ((uint64_t (*)(uint64_t **, uint64_t *, uint64_t *))off_1E33DDE38[v41])(&v47, &v43, &v40);
          v44 = v17;
        }
        v45 = 1;
      }
      goto LABEL_48;
    }
    if (!v45)
    {
LABEL_51:
      v19 = 0;
      goto LABEL_75;
    }
    if (v44 == -1)
    {
      if (v41 == -1)
        goto LABEL_48;
    }
    else if (v41 == -1)
    {
      this = ((uint64_t (*)(uint64_t **, uint64_t *))off_1E33DDE18[v44])(&v47, &v43);
      v44 = -1;
LABEL_48:
      if (v42 && v41 != -1)
        this = ((uint64_t (*)(uint64_t **, uint64_t *))off_1E33DDE18[v41])(&v47, &v40);
      goto LABEL_51;
    }
    v47 = &v43;
    this = ((uint64_t (*)(uint64_t **, uint64_t *, uint64_t *))off_1E33DDE28[v41])(&v47, &v43, &v40);
    goto LABEL_48;
  }
  if (a3 - 6145 >= 2 && a3 != 1029)
  {
    v12 = "invalid attachment";
    v13 = 1280;
    v14 = 19;
    goto LABEL_20;
  }
  if (a3 == 6145)
  {
    if (!*(_BYTE *)(this + 369))
    {
LABEL_120:
      if (a4 != 36048)
      {
        v12 = "invalid parameter name";
        v13 = 1282;
LABEL_145:
        v14 = 23;
        goto LABEL_20;
      }
      *(_DWORD *)a5 = 0;
      goto LABEL_131;
    }
  }
  else if (a3 == 6146 && !*(_BYTE *)(this + 370))
  {
    goto LABEL_120;
  }
  switch(a4)
  {
    case 33296:
      v34 = 9729;
      goto LABEL_130;
    case 33297:
      v34 = 35863;
      goto LABEL_130;
    case 33298:
    case 33299:
    case 33300:
      v33 = a3 == 1029;
      goto LABEL_138;
    case 33301:
      if (a3 == 1029)
      {
        v36 = *(unsigned __int8 *)(this + 368);
LABEL_141:
        v37 = 8 * v36;
      }
      else
      {
        v37 = 0;
      }
LABEL_142:
      *(_DWORD *)a5 = v37;
      v35 = 2;
      goto LABEL_143;
    case 33302:
      if (a3 == 6145)
        v37 = 24;
      else
        v37 = 0;
      goto LABEL_142;
    case 33303:
      v33 = a3 == 6146;
LABEL_138:
      v36 = v33;
      goto LABEL_141;
    default:
      if (a4 != 36048)
      {
        v12 = "invalid parameter name";
        v13 = 1280;
        goto LABEL_145;
      }
      v34 = 33304;
LABEL_130:
      *(_DWORD *)a5 = v34;
      break;
  }
LABEL_131:
  v35 = 3;
LABEL_143:
  *(_DWORD *)(a5 + 16) = v35;
  return this;
}

BOOL WebCore::WebGL2RenderingContext::validateFramebufferTarget(WebCore::WebGL2RenderingContext *this, int a2)
{
  return (a2 - 36008) < 2 || a2 == 36160;
}

WTF::Lock *WebCore::WebGL2RenderingContext::addMembersToOpaqueRoots(WTF::Lock **this, JSC::AbstractSlotVisitor *a2)
{
  WTF::Lock *v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  WTF::Lock *v13;
  WTF::Lock *v14;
  uint64_t (*v15)();
  WTF::Lock *v16;
  uint64_t v17;
  WTF::Lock *v18;
  WTF::Lock *v19;
  uint64_t v20;
  WTF::Lock *v21;
  uint64_t v22;
  WTF::Lock *v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  WTF::Lock *v32;
  WTF::Lock *result;
  uint64_t (*v34)();
  WTF::Lock *v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  unsigned int v42;
  WTF::Lock *v43;
  WTF::Lock *v44;
  BOOL v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  WTF::Lock *v53;
  WTF::Lock *v54;
  BOOL v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unsigned int v61;
  unsigned int v62;
  WTF::Lock *v63;
  WTF::Lock *v64;
  BOOL v65;
  uint64_t v66;
  int v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int v71;
  unsigned int v72;
  WTF::Lock *v73;
  WTF::Lock *v74;
  BOOL v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unsigned int v81;
  unsigned int v82;
  WTF::Lock *v83;
  WTF::Lock *v84;
  BOOL v85;
  uint64_t v86;
  int v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unsigned int v91;
  unsigned int v92;
  WTF::Lock *v93;
  uint64_t v94;
  WTF::Lock *v95;
  WTF::Lock *v96;
  uint64_t v97;
  BOOL v98;
  uint64_t v99;
  int v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  WTF::Lock *v107;
  BOOL v108;
  uint64_t v109;
  int v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unsigned int v114;
  unsigned int v115;
  WTF::Lock *v116;
  WTF::Lock *v117;
  BOOL v118;
  uint64_t v119;
  int v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unsigned int v124;
  unsigned int v125;
  WTF::Lock *v126;
  WTF::Lock *v127;
  BOOL v128;
  uint64_t v129;
  int v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unsigned int v134;
  unsigned int v135;
  WTF::Lock *v136;
  uint64_t v137;
  WTF::Lock *v138;
  WTF::Lock *v139;
  uint64_t v140;
  BOOL v141;
  uint64_t v142;
  int v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unsigned int v147;
  unsigned int v148;
  uint64_t v149;
  int v150;
  WTF::Lock *v151;
  char v152;
  _QWORD v153[3];
  _QWORD *v154;

  WebCore::WebGLRenderingContextBase::addMembersToOpaqueRoots((WebCore::WebGLRenderingContextBase *)this, a2);
  v151 = (WTF::Lock *)(this + 12);
  v152 = 1;
  if (__ldaxr((unsigned __int8 *)this + 96))
  {
    __clrex();
LABEL_4:
    MEMORY[0x19AEA534C]();
    goto LABEL_5;
  }
  if (__stxr(1u, (unsigned __int8 *)this + 96))
    goto LABEL_4;
LABEL_5:
  v5 = this[116];
  if (v5 && !*((_BYTE *)a2 + 130))
  {
    v6 = *(_QWORD *)(*((_QWORD *)a2 + 15) + 48);
    v7 = *(_DWORD *)(v6 + 4);
    v8 = ((unint64_t)v5 + ~((_QWORD)v5 << 32)) ^ (((unint64_t)v5 + ~((_QWORD)v5 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = v11;
    while (1)
    {
      v13 = *(WTF::Lock **)(v6 + 8 * v12 + 16);
      if (!v13)
        break;
      if (v5 == v13)
        goto LABEL_16;
      v12 = (v12 + 1) & v7;
      if (v12 == v11)
      {
        __break(0xC471u);
        JUMPOUT(0x195D0CA50);
      }
    }
    if (WTF::ConcurrentPtrHashSet::addSlow())
    {
      if (*((_BYTE *)a2 + 131))
        (*(void (**)(JSC::AbstractSlotVisitor *, WTF::Lock *))(*(_QWORD *)a2 + 144))(a2, v5);
      ++*((_QWORD *)a2 + 9);
    }
  }
LABEL_16:
  v14 = this[116];
  v15 = WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance;
  if (!v14)
    v15 = 0;
  if (!v15)
    goto LABEL_40;
  v16 = (WTF::Lock *)*((_QWORD *)v14 + 5);
  if (!v16)
  {
    v19 = 0;
    v17 = 0;
LABEL_28:
    v18 = (WTF::Lock *)((char *)v16 + 32 * v17);
    goto LABEL_29;
  }
  v17 = *((unsigned int *)v16 - 1);
  v18 = (WTF::Lock *)((char *)v16 + 32 * v17);
  if (!*((_DWORD *)v16 - 3))
  {
    v19 = (WTF::Lock *)((char *)v16 + 32 * v17);
    goto LABEL_28;
  }
  v19 = v16;
  if ((_DWORD)v17)
  {
    v20 = 32 * v17;
    v19 = v16;
    while ((*(_DWORD *)v19 + 1) <= 1)
    {
      v19 = (WTF::Lock *)((char *)v19 + 32);
      v20 -= 32;
      if (!v20)
      {
        v19 = v18;
        break;
      }
    }
  }
LABEL_29:
  if (v16)
    v21 = (WTF::Lock *)((char *)v16 + 32 * *((unsigned int *)v16 - 1));
  else
    v21 = 0;
  if (v21 != v19)
  {
    while (1)
    {
      v153[0] = a2;
      v153[1] = a2;
      v153[2] = a2;
      v22 = *((unsigned int *)v19 + 6);
      if ((_DWORD)v22 == -1)
        break;
      v154 = v153;
      ((void (*)(_QWORD **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCoreL28entryAddMembersToOpaqueRootsERKNS_7variantIJNS6_6RefPtrINS8_17WebGLRenderbufferENS6_12RawPtrTraitsISB_EENS6_21DefaultRefDerefTraitsISB_EEEENS8_16WebGLFramebuffer17TextureAttachmentENSH_22TextureLayerAttachmentEEEERKNS6_14AbstractLockerERN3JSC19AbstractSlotVisitorEE3__0JZNS8_L28entryAddMembersToOpaqueRootsESM_SP_SS_E3__1ZNS8_L28entryAddMembersToOpaqueRootsESM_SP_SS_E3__2EEEEEJRKNS0_6__implIJSG_SI_SJ_EEEEEEDcOT_DpOT0____fmatrix[v22])(&v154, (char *)v19 + 8);
      v23 = (WTF::Lock *)((char *)v19 + 32);
      v19 = v18;
      if (v23 != v18)
      {
        v19 = v23;
        while ((*(_DWORD *)v19 + 1) <= 1)
        {
          v19 = (WTF::Lock *)((char *)v19 + 32);
          if (v19 == v18)
          {
            v19 = v18;
            break;
          }
        }
      }
      if (v19 == v21)
        goto LABEL_40;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_222;
  }
LABEL_40:
  v18 = this[117];
  if (v18)
    v24 = *((_BYTE *)a2 + 130) == 0;
  else
    v24 = 0;
  if (v24)
  {
    v25 = *(_QWORD *)(*((_QWORD *)a2 + 15) + 48);
    v26 = *(_DWORD *)(v25 + 4);
    v27 = ((unint64_t)v18 + ~((_QWORD)v18 << 32)) ^ (((unint64_t)v18 + ~((_QWORD)v18 << 32)) >> 22);
    v28 = 9 * ((v27 + ~(v27 << 13)) ^ ((v27 + ~(v27 << 13)) >> 8));
    v29 = (v28 ^ (v28 >> 15)) + ~((v28 ^ (v28 >> 15)) << 27);
    v30 = v26 & ((v29 >> 31) ^ v29);
    v31 = v30;
    while (1)
    {
      v32 = *(WTF::Lock **)(v25 + 8 * v31 + 16);
      if (!v32)
        break;
      if (v18 == v32)
        goto LABEL_53;
      v31 = (v31 + 1) & v26;
      if (v31 == v30)
      {
        __break(0xC471u);
        JUMPOUT(0x195D0CC14);
      }
    }
    if (WTF::ConcurrentPtrHashSet::addSlow())
    {
      if (!*((_BYTE *)a2 + 131))
      {
LABEL_52:
        ++*((_QWORD *)a2 + 9);
        goto LABEL_53;
      }
LABEL_222:
      (*(void (**)(JSC::AbstractSlotVisitor *, WTF::Lock *))(*(_QWORD *)a2 + 144))(a2, v18);
      goto LABEL_52;
    }
  }
LABEL_53:
  result = this[117];
  v34 = WTF::RefPtr<WebCore::WebGLTransformFeedback,WTF::RawPtrTraits<WebCore::WebGLTransformFeedback>,WTF::DefaultRefDerefTraits<WebCore::WebGLTransformFeedback>>::unspecifiedBoolTypeInstance;
  if (!result)
    v34 = 0;
  if (v34)
    result = (WTF::Lock *)WebCore::WebGLTransformFeedback::addMembersToOpaqueRoots((uint64_t)result, (uint64_t)&v151, (uint64_t)a2);
  v35 = this[119];
  if (v35 && !*((_BYTE *)a2 + 130))
  {
    result = (WTF::Lock *)*((_QWORD *)a2 + 15);
    v36 = *((_QWORD *)result + 6);
    v37 = *(_DWORD *)(v36 + 4);
    v38 = ((unint64_t)v35 + ~((_QWORD)v35 << 32)) ^ (((unint64_t)v35 + ~((_QWORD)v35 << 32)) >> 22);
    v39 = 9 * ((v38 + ~(v38 << 13)) ^ ((v38 + ~(v38 << 13)) >> 8));
    v40 = (v39 ^ (v39 >> 15)) + ~((v39 ^ (v39 >> 15)) << 27);
    v41 = v37 & ((v40 >> 31) ^ v40);
    v42 = v41;
    while (1)
    {
      v43 = *(WTF::Lock **)(v36 + 8 * v42 + 16);
      if (!v43)
        break;
      if (v35 == v43)
        goto LABEL_68;
      v42 = (v42 + 1) & v37;
      if (v42 == v41)
      {
        __break(0xC471u);
        JUMPOUT(0x195D0CCF4);
      }
    }
    result = (WTF::Lock *)WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*((_BYTE *)a2 + 131))
        result = (WTF::Lock *)(*(uint64_t (**)(JSC::AbstractSlotVisitor *, WTF::Lock *))(*(_QWORD *)a2 + 144))(a2, v35);
      ++*((_QWORD *)a2 + 9);
    }
  }
LABEL_68:
  v44 = this[120];
  if (v44)
    v45 = *((_BYTE *)a2 + 130) == 0;
  else
    v45 = 0;
  if (v45)
  {
    result = (WTF::Lock *)*((_QWORD *)a2 + 15);
    v46 = *((_QWORD *)result + 6);
    v47 = *(_DWORD *)(v46 + 4);
    v48 = ((unint64_t)v44 + ~((_QWORD)v44 << 32)) ^ (((unint64_t)v44 + ~((_QWORD)v44 << 32)) >> 22);
    v49 = 9 * ((v48 + ~(v48 << 13)) ^ ((v48 + ~(v48 << 13)) >> 8));
    v50 = (v49 ^ (v49 >> 15)) + ~((v49 ^ (v49 >> 15)) << 27);
    v51 = v47 & ((v50 >> 31) ^ v50);
    v52 = v51;
    while (1)
    {
      v53 = *(WTF::Lock **)(v46 + 8 * v52 + 16);
      if (!v53)
        break;
      if (v44 == v53)
        goto LABEL_82;
      v52 = (v52 + 1) & v47;
      if (v52 == v51)
      {
        __break(0xC471u);
        JUMPOUT(0x195D0CDB4);
      }
    }
    result = (WTF::Lock *)WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*((_BYTE *)a2 + 131))
        result = (WTF::Lock *)(*(uint64_t (**)(JSC::AbstractSlotVisitor *, WTF::Lock *))(*(_QWORD *)a2 + 144))(a2, v44);
      ++*((_QWORD *)a2 + 9);
    }
  }
LABEL_82:
  v54 = this[121];
  if (v54)
    v55 = *((_BYTE *)a2 + 130) == 0;
  else
    v55 = 0;
  if (v55)
  {
    result = (WTF::Lock *)*((_QWORD *)a2 + 15);
    v56 = *((_QWORD *)result + 6);
    v57 = *(_DWORD *)(v56 + 4);
    v58 = ((unint64_t)v54 + ~((_QWORD)v54 << 32)) ^ (((unint64_t)v54 + ~((_QWORD)v54 << 32)) >> 22);
    v59 = 9 * ((v58 + ~(v58 << 13)) ^ ((v58 + ~(v58 << 13)) >> 8));
    v60 = (v59 ^ (v59 >> 15)) + ~((v59 ^ (v59 >> 15)) << 27);
    v61 = v57 & ((v60 >> 31) ^ v60);
    v62 = v61;
    while (1)
    {
      v63 = *(WTF::Lock **)(v56 + 8 * v62 + 16);
      if (!v63)
        break;
      if (v54 == v63)
        goto LABEL_96;
      v62 = (v62 + 1) & v57;
      if (v62 == v61)
      {
        __break(0xC471u);
        JUMPOUT(0x195D0CE74);
      }
    }
    result = (WTF::Lock *)WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*((_BYTE *)a2 + 131))
        result = (WTF::Lock *)(*(uint64_t (**)(JSC::AbstractSlotVisitor *, WTF::Lock *))(*(_QWORD *)a2 + 144))(a2, v54);
      ++*((_QWORD *)a2 + 9);
    }
  }
LABEL_96:
  v64 = this[122];
  if (v64)
    v65 = *((_BYTE *)a2 + 130) == 0;
  else
    v65 = 0;
  if (v65)
  {
    result = (WTF::Lock *)*((_QWORD *)a2 + 15);
    v66 = *((_QWORD *)result + 6);
    v67 = *(_DWORD *)(v66 + 4);
    v68 = ((unint64_t)v64 + ~((_QWORD)v64 << 32)) ^ (((unint64_t)v64 + ~((_QWORD)v64 << 32)) >> 22);
    v69 = 9 * ((v68 + ~(v68 << 13)) ^ ((v68 + ~(v68 << 13)) >> 8));
    v70 = (v69 ^ (v69 >> 15)) + ~((v69 ^ (v69 >> 15)) << 27);
    v71 = v67 & ((v70 >> 31) ^ v70);
    v72 = v71;
    while (1)
    {
      v73 = *(WTF::Lock **)(v66 + 8 * v72 + 16);
      if (!v73)
        break;
      if (v64 == v73)
        goto LABEL_110;
      v72 = (v72 + 1) & v67;
      if (v72 == v71)
      {
        __break(0xC471u);
        JUMPOUT(0x195D0CF34);
      }
    }
    result = (WTF::Lock *)WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*((_BYTE *)a2 + 131))
        result = (WTF::Lock *)(*(uint64_t (**)(JSC::AbstractSlotVisitor *, WTF::Lock *))(*(_QWORD *)a2 + 144))(a2, v64);
      ++*((_QWORD *)a2 + 9);
    }
  }
LABEL_110:
  v74 = this[123];
  if (v74)
    v75 = *((_BYTE *)a2 + 130) == 0;
  else
    v75 = 0;
  if (v75)
  {
    result = (WTF::Lock *)*((_QWORD *)a2 + 15);
    v76 = *((_QWORD *)result + 6);
    v77 = *(_DWORD *)(v76 + 4);
    v78 = ((unint64_t)v74 + ~((_QWORD)v74 << 32)) ^ (((unint64_t)v74 + ~((_QWORD)v74 << 32)) >> 22);
    v79 = 9 * ((v78 + ~(v78 << 13)) ^ ((v78 + ~(v78 << 13)) >> 8));
    v80 = (v79 ^ (v79 >> 15)) + ~((v79 ^ (v79 >> 15)) << 27);
    v81 = v77 & ((v80 >> 31) ^ v80);
    v82 = v81;
    while (1)
    {
      v83 = *(WTF::Lock **)(v76 + 8 * v82 + 16);
      if (!v83)
        break;
      if (v74 == v83)
        goto LABEL_124;
      v82 = (v82 + 1) & v77;
      if (v82 == v81)
      {
        __break(0xC471u);
        JUMPOUT(0x195D0CFF4);
      }
    }
    result = (WTF::Lock *)WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*((_BYTE *)a2 + 131))
        result = (WTF::Lock *)(*(uint64_t (**)(JSC::AbstractSlotVisitor *, WTF::Lock *))(*(_QWORD *)a2 + 144))(a2, v74);
      ++*((_QWORD *)a2 + 9);
    }
  }
LABEL_124:
  v84 = this[124];
  if (v84)
    v85 = *((_BYTE *)a2 + 130) == 0;
  else
    v85 = 0;
  if (v85)
  {
    result = (WTF::Lock *)*((_QWORD *)a2 + 15);
    v86 = *((_QWORD *)result + 6);
    v87 = *(_DWORD *)(v86 + 4);
    v88 = ((unint64_t)v84 + ~((_QWORD)v84 << 32)) ^ (((unint64_t)v84 + ~((_QWORD)v84 << 32)) >> 22);
    v89 = 9 * ((v88 + ~(v88 << 13)) ^ ((v88 + ~(v88 << 13)) >> 8));
    v90 = (v89 ^ (v89 >> 15)) + ~((v89 ^ (v89 >> 15)) << 27);
    v91 = v87 & ((v90 >> 31) ^ v90);
    v92 = v91;
    while (1)
    {
      v93 = *(WTF::Lock **)(v86 + 8 * v92 + 16);
      if (!v93)
        break;
      if (v84 == v93)
        goto LABEL_138;
      v92 = (v92 + 1) & v87;
      if (v92 == v91)
      {
        __break(0xC471u);
        JUMPOUT(0x195D0D0B4);
      }
    }
    result = (WTF::Lock *)WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*((_BYTE *)a2 + 131))
        result = (WTF::Lock *)(*(uint64_t (**)(JSC::AbstractSlotVisitor *, WTF::Lock *))(*(_QWORD *)a2 + 144))(a2, v84);
      ++*((_QWORD *)a2 + 9);
    }
  }
LABEL_138:
  v94 = *((unsigned int *)this + 253);
  if ((_DWORD)v94)
  {
    v95 = this[125];
    v96 = (WTF::Lock *)((char *)v95 + 8 * v94);
    do
    {
      v97 = *(_QWORD *)v95;
      if (*(_QWORD *)v95)
        v98 = *((_BYTE *)a2 + 130) == 0;
      else
        v98 = 0;
      if (v98)
      {
        result = (WTF::Lock *)*((_QWORD *)a2 + 15);
        v99 = *((_QWORD *)result + 6);
        v100 = *(_DWORD *)(v99 + 4);
        v101 = (~(v97 << 32) + v97) ^ ((unint64_t)(~(v97 << 32) + v97) >> 22);
        v102 = 9 * ((v101 + ~(v101 << 13)) ^ ((v101 + ~(v101 << 13)) >> 8));
        v103 = (v102 ^ (v102 >> 15)) + ~((v102 ^ (v102 >> 15)) << 27);
        v104 = v100 & ((v103 >> 31) ^ v103);
        v105 = v104;
        while (1)
        {
          v106 = *(_QWORD *)(v99 + 8 * v105 + 16);
          if (!v106)
            break;
          if (v97 == v106)
            goto LABEL_154;
          v105 = (v105 + 1) & v100;
          if (v105 == v104)
          {
            __break(0xC471u);
            JUMPOUT(0x195D0D4FCLL);
          }
        }
        result = (WTF::Lock *)WTF::ConcurrentPtrHashSet::addSlow();
        if ((_DWORD)result)
        {
          if (*((_BYTE *)a2 + 131))
            result = (WTF::Lock *)(*(uint64_t (**)(JSC::AbstractSlotVisitor *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v97);
          ++*((_QWORD *)a2 + 9);
        }
      }
LABEL_154:
      v95 = (WTF::Lock *)((char *)v95 + 8);
    }
    while (v95 != v96);
  }
  v107 = this[127];
  if (v107)
    v108 = *((_BYTE *)a2 + 130) == 0;
  else
    v108 = 0;
  if (v108)
  {
    result = (WTF::Lock *)*((_QWORD *)a2 + 15);
    v109 = *((_QWORD *)result + 6);
    v110 = *(_DWORD *)(v109 + 4);
    v111 = ((unint64_t)v107 + ~((_QWORD)v107 << 32)) ^ (((unint64_t)v107 + ~((_QWORD)v107 << 32)) >> 22);
    v112 = 9 * ((v111 + ~(v111 << 13)) ^ ((v111 + ~(v111 << 13)) >> 8));
    v113 = (v112 ^ (v112 >> 15)) + ~((v112 ^ (v112 >> 15)) << 27);
    v114 = v110 & ((v113 >> 31) ^ v113);
    v115 = v114;
    while (1)
    {
      v116 = *(WTF::Lock **)(v109 + 8 * v115 + 16);
      if (!v116)
        break;
      if (v107 == v116)
        goto LABEL_169;
      v115 = (v115 + 1) & v110;
      if (v115 == v114)
      {
LABEL_192:
        __break(0xC471u);
        JUMPOUT(0x195D0D398);
      }
    }
    result = (WTF::Lock *)WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*((_BYTE *)a2 + 131))
        result = (WTF::Lock *)(*(uint64_t (**)(JSC::AbstractSlotVisitor *, WTF::Lock *))(*(_QWORD *)a2 + 144))(a2, v107);
      ++*((_QWORD *)a2 + 9);
    }
  }
LABEL_169:
  v117 = this[128];
  if (v117)
    v118 = *((_BYTE *)a2 + 130) == 0;
  else
    v118 = 0;
  if (v118)
  {
    result = (WTF::Lock *)*((_QWORD *)a2 + 15);
    v119 = *((_QWORD *)result + 6);
    v120 = *(_DWORD *)(v119 + 4);
    v121 = ((unint64_t)v117 + ~((_QWORD)v117 << 32)) ^ (((unint64_t)v117 + ~((_QWORD)v117 << 32)) >> 22);
    v122 = 9 * ((v121 + ~(v121 << 13)) ^ ((v121 + ~(v121 << 13)) >> 8));
    v123 = (v122 ^ (v122 >> 15)) + ~((v122 ^ (v122 >> 15)) << 27);
    v124 = v120 & ((v123 >> 31) ^ v123);
    v125 = v124;
    while (1)
    {
      v126 = *(WTF::Lock **)(v119 + 8 * v125 + 16);
      if (!v126)
        break;
      if (v117 == v126)
        goto LABEL_183;
      v125 = (v125 + 1) & v120;
      if (v125 == v124)
        goto LABEL_192;
    }
    result = (WTF::Lock *)WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*((_BYTE *)a2 + 131))
        result = (WTF::Lock *)(*(uint64_t (**)(JSC::AbstractSlotVisitor *, WTF::Lock *))(*(_QWORD *)a2 + 144))(a2, v117);
      ++*((_QWORD *)a2 + 9);
    }
  }
LABEL_183:
  v127 = this[129];
  if (v127)
    v128 = *((_BYTE *)a2 + 130) == 0;
  else
    v128 = 0;
  if (v128)
  {
    result = (WTF::Lock *)*((_QWORD *)a2 + 15);
    v129 = *((_QWORD *)result + 6);
    v130 = *(_DWORD *)(v129 + 4);
    v131 = ((unint64_t)v127 + ~((_QWORD)v127 << 32)) ^ (((unint64_t)v127 + ~((_QWORD)v127 << 32)) >> 22);
    v132 = 9 * ((v131 + ~(v131 << 13)) ^ ((v131 + ~(v131 << 13)) >> 8));
    v133 = (v132 ^ (v132 >> 15)) + ~((v132 ^ (v132 >> 15)) << 27);
    v134 = v130 & ((v133 >> 31) ^ v133);
    v135 = v134;
    while (1)
    {
      v136 = *(WTF::Lock **)(v129 + 8 * v135 + 16);
      if (!v136)
        break;
      if (v127 == v136)
        goto LABEL_197;
      v135 = (v135 + 1) & v130;
      if (v135 == v134)
        goto LABEL_192;
    }
    result = (WTF::Lock *)WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*((_BYTE *)a2 + 131))
        result = (WTF::Lock *)(*(uint64_t (**)(JSC::AbstractSlotVisitor *, WTF::Lock *))(*(_QWORD *)a2 + 144))(a2, v127);
      ++*((_QWORD *)a2 + 9);
    }
  }
LABEL_197:
  v137 = *((unsigned int *)this + 263);
  if ((_DWORD)v137)
  {
    v138 = this[130];
    v139 = (WTF::Lock *)((char *)v138 + 8 * v137);
    do
    {
      v140 = *(_QWORD *)v138;
      if (*(_QWORD *)v138)
        v141 = *((_BYTE *)a2 + 130) == 0;
      else
        v141 = 0;
      if (v141)
      {
        result = (WTF::Lock *)*((_QWORD *)a2 + 15);
        v142 = *((_QWORD *)result + 6);
        v143 = *(_DWORD *)(v142 + 4);
        v144 = (~(v140 << 32) + v140) ^ ((unint64_t)(~(v140 << 32) + v140) >> 22);
        v145 = 9 * ((v144 + ~(v144 << 13)) ^ ((v144 + ~(v144 << 13)) >> 8));
        v146 = (v145 ^ (v145 >> 15)) + ~((v145 ^ (v145 >> 15)) << 27);
        v147 = v143 & ((v146 >> 31) ^ v146);
        v148 = v147;
        while (1)
        {
          v149 = *(_QWORD *)(v142 + 8 * v148 + 16);
          if (!v149)
            break;
          if (v140 == v149)
            goto LABEL_213;
          v148 = (v148 + 1) & v143;
          if (v148 == v147)
          {
            __break(0xC471u);
            JUMPOUT(0x195D0D51CLL);
          }
        }
        result = (WTF::Lock *)WTF::ConcurrentPtrHashSet::addSlow();
        if ((_DWORD)result)
        {
          if (*((_BYTE *)a2 + 131))
            result = (WTF::Lock *)(*(uint64_t (**)(JSC::AbstractSlotVisitor *, uint64_t))(*(_QWORD *)a2 + 144))(a2, v140);
          ++*((_QWORD *)a2 + 9);
        }
      }
LABEL_213:
      v138 = (WTF::Lock *)((char *)v138 + 8);
    }
    while (v138 != v139);
  }
  if (v152)
  {
    result = v151;
    v150 = __ldxr((unsigned __int8 *)v151);
    if (v150 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v151))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WebCore::WebGL2RenderingContext::getParameter@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)();
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;

  if (*(_BYTE *)(this + 364))
    goto LABEL_2;
  v4 = this;
  if ((int)a2 > 35367)
  {
    if ((int)a2 <= 36005)
    {
      if ((int)a2 <= 35657)
      {
        switch((int)a2)
        {
          case 35368:
            v5 = *(_QWORD *)(this + 992);
            if (v5)
              goto LABEL_8;
            goto LABEL_9;
          case 35369:
          case 35370:
          case 35372:
          case 35378:
            return WebCore::WebGLRenderingContextBase::getParameter(this, a2, a3);
          case 35371:
            v36 = *(_QWORD *)(this + 88);
            LODWORD(v54) = 0;
            v13 = *(uint64_t (**)(void))(*(_QWORD *)v36 + 472);
            goto LABEL_171;
          case 35373:
            v35 = *(_QWORD *)(this + 88);
            LODWORD(v54) = 0;
            v13 = *(uint64_t (**)(void))(*(_QWORD *)v35 + 472);
            goto LABEL_171;
          case 35374:
            v37 = *(_QWORD *)(this + 88);
            LODWORD(v54) = 0;
            v13 = *(uint64_t (**)(void))(*(_QWORD *)v37 + 472);
            goto LABEL_171;
          case 35375:
            v38 = *(_QWORD *)(this + 88);
            LODWORD(v54) = 0;
            v13 = *(uint64_t (**)(void))(*(_QWORD *)v38 + 472);
            goto LABEL_171;
          case 35376:
            v27 = *(uint64_t (**)(void))(**(_QWORD **)(this + 88) + 488);
            goto LABEL_160;
          case 35377:
            v27 = *(uint64_t (**)(void))(**(_QWORD **)(this + 88) + 488);
            goto LABEL_160;
          case 35379:
            v27 = *(uint64_t (**)(void))(**(_QWORD **)(this + 88) + 488);
            goto LABEL_160;
          case 35380:
            v39 = *(_QWORD *)(this + 88);
            LODWORD(v54) = 0;
            v13 = *(uint64_t (**)(void))(*(_QWORD *)v39 + 472);
            goto LABEL_171;
          default:
            if ((_DWORD)a2 != 35657)
              return WebCore::WebGLRenderingContextBase::getParameter(this, a2, a3);
            v33 = *(_QWORD *)(this + 88);
            LODWORD(v54) = 0;
            v13 = *(uint64_t (**)(void))(*(_QWORD *)v33 + 472);
            break;
        }
        goto LABEL_171;
      }
      if ((int)a2 > 35868)
      {
        switch((int)a2)
        {
          case 35977:
            v16 = *(_QWORD *)(this + 88);
            LOBYTE(v54) = 0;
            v17 = *(uint64_t (**)(void))(*(_QWORD *)v16 + 512);
            goto LABEL_152;
          case 35978:
            v51 = *(_QWORD *)(this + 88);
            LODWORD(v54) = 0;
            v13 = *(uint64_t (**)(void))(*(_QWORD *)v51 + 472);
            goto LABEL_171;
          case 35979:
            v52 = *(_QWORD *)(this + 88);
            LODWORD(v54) = 0;
            v13 = *(uint64_t (**)(void))(*(_QWORD *)v52 + 472);
            goto LABEL_171;
          case 35980:
          case 35981:
          case 35982:
            return WebCore::WebGLRenderingContextBase::getParameter(this, a2, a3);
          case 35983:
            v5 = *(_QWORD *)(this + 984);
            if (!v5)
              goto LABEL_9;
            goto LABEL_8;
          default:
            if ((_DWORD)a2 != 35869)
            {
              if ((_DWORD)a2 != 35968)
                return WebCore::WebGLRenderingContextBase::getParameter(this, a2, a3);
              v28 = *(_QWORD *)(this + 88);
              LODWORD(v54) = 0;
              v13 = *(uint64_t (**)(void))(*(_QWORD *)v28 + 472);
              goto LABEL_171;
            }
            v53 = *(_QWORD *)(this + 208);
            if (v53 >= *(unsigned int *)(this + 204))
            {
              __break(0xC471u);
              JUMPOUT(0x195D0E128);
            }
            v15 = *(_QWORD *)(*(_QWORD *)(this + 192) + 32 * v53 + 24);
            if (v15)
              goto LABEL_54;
            break;
        }
LABEL_55:
        *(_QWORD *)a3 = v15;
        v6 = 21;
        goto LABEL_173;
      }
      if ((int)a2 <= 35722)
      {
        if ((_DWORD)a2 == 35658)
        {
          v31 = *(_QWORD *)(this + 88);
          LODWORD(v54) = 0;
          v13 = *(uint64_t (**)(void))(*(_QWORD *)v31 + 472);
          goto LABEL_171;
        }
        if ((_DWORD)a2 == 35659)
        {
          v12 = *(_QWORD *)(this + 88);
          LODWORD(v54) = 0;
          v13 = *(uint64_t (**)(void))(*(_QWORD *)v12 + 472);
LABEL_171:
          this = v13();
          v7 = v54;
          goto LABEL_172;
        }
        return WebCore::WebGLRenderingContextBase::getParameter(this, a2, a3);
      }
      if ((_DWORD)a2 == 35723)
      {
        v32 = *(_QWORD *)(this + 88);
        LODWORD(v54) = 0;
        v13 = *(uint64_t (**)(void))(*(_QWORD *)v32 + 472);
        goto LABEL_171;
      }
      if ((_DWORD)a2 != 35724)
        return WebCore::WebGLRenderingContextBase::getParameter(this, a2, a3);
      goto LABEL_91;
    }
    if ((int)a2 <= 36442)
    {
      if ((int)a2 > 36202)
      {
        if ((int)a2 > 36387)
        {
          if ((_DWORD)a2 != 36388)
          {
            if ((_DWORD)a2 == 36389)
            {
              v47 = 0;
              v48 = *(_QWORD *)(this + 936);
              if (*(_QWORD *)(this + 944) != v48 && v48)
              {
                ++*(_DWORD *)(v48 + 8);
                v47 = v48;
              }
              *(_QWORD *)a3 = v47;
              v6 = 23;
              goto LABEL_173;
            }
            if ((_DWORD)a2 != 36431)
              return WebCore::WebGLRenderingContextBase::getParameter(this, a2, a3);
            if (*(_QWORD *)(this + 848))
            {
              v8 = *(_QWORD *)(this + 88);
              LODWORD(v54) = 0;
              v9 = *(uint64_t (**)(void))(*(_QWORD *)v8 + 472);
LABEL_85:
              this = v9();
              *(_DWORD *)a3 = v54;
              v6 = 3;
              goto LABEL_173;
            }
            v23 = "invalid parameter name, WEBGL_provoking_vertex not enabled";
            v24 = 59;
            goto LABEL_178;
          }
          v45 = *(_QWORD *)(this + 88);
          LOBYTE(v54) = 0;
          v17 = *(uint64_t (**)(void))(*(_QWORD *)v45 + 512);
LABEL_152:
          this = v17();
          *(_BYTE *)a3 = (_BYTE)v54 != 0;
          *(_DWORD *)(a3 + 16) = 1;
          return this;
        }
        if ((_DWORD)a2 != 36203)
        {
          if ((_DWORD)a2 != 36387)
            return WebCore::WebGLRenderingContextBase::getParameter(this, a2, a3);
          v26 = *(_QWORD *)(this + 88);
          LOBYTE(v54) = 0;
          v17 = *(uint64_t (**)(void))(*(_QWORD *)v26 + 512);
          goto LABEL_152;
        }
        v27 = *(uint64_t (**)(void))(**(_QWORD **)(this + 88) + 488);
        goto LABEL_160;
      }
      if ((int)a2 <= 36062)
      {
        if ((_DWORD)a2 == 36006)
        {
          v21 = *(_QWORD *)(this + 176);
          if (!v21)
          {
LABEL_144:
            *(_QWORD *)a3 = v21;
            v6 = 16;
            goto LABEL_173;
          }
        }
        else
        {
          if ((_DWORD)a2 != 36010)
            return WebCore::WebGLRenderingContextBase::getParameter(this, a2, a3);
          v21 = *(_QWORD *)(this + 928);
          if (!v21)
            goto LABEL_144;
        }
        ++*(_DWORD *)(v21 + 8);
        goto LABEL_144;
      }
      if ((_DWORD)a2 == 36063)
      {
        v7 = *(_DWORD *)(this + 284);
        if (!v7)
        {
          v42 = *(_QWORD *)(this + 88);
          LODWORD(v54) = 0;
          this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v42 + 472))(v42, 34852, &v54, 1);
          v7 = v54;
          *(_DWORD *)(v4 + 284) = v54;
        }
        goto LABEL_172;
      }
      if ((_DWORD)a2 != 36183)
        return WebCore::WebGLRenderingContextBase::getParameter(this, a2, a3);
      v7 = *(_DWORD *)(this + 276);
LABEL_172:
      *(_DWORD *)a3 = v7;
      v6 = 2;
      goto LABEL_173;
    }
    if ((int)a2 > 36662)
    {
      if ((int)a2 > 37153)
      {
        if ((_DWORD)a2 == 37154)
        {
          v46 = *(_QWORD *)(this + 88);
          LODWORD(v54) = 0;
          v13 = *(uint64_t (**)(void))(*(_QWORD *)v46 + 472);
          goto LABEL_171;
        }
        if ((_DWORD)a2 == 37157)
        {
          v49 = *(_QWORD *)(this + 88);
          LODWORD(v54) = 0;
          v13 = *(uint64_t (**)(void))(*(_QWORD *)v49 + 472);
          goto LABEL_171;
        }
        if ((_DWORD)a2 != 37447)
          return WebCore::WebGLRenderingContextBase::getParameter(this, a2, a3);
        *(_QWORD *)a3 = 0;
        goto LABEL_161;
      }
      if ((_DWORD)a2 != 36663)
      {
        if ((_DWORD)a2 != 37137)
          return WebCore::WebGLRenderingContextBase::getParameter(this, a2, a3);
        v27 = *(uint64_t (**)(void))(**(_QWORD **)(this + 88) + 488);
LABEL_160:
        this = v27();
        *(_QWORD *)a3 = this;
LABEL_161:
        v6 = 4;
        goto LABEL_173;
      }
      v5 = *(_QWORD *)(this + 960);
      if (!v5)
        goto LABEL_9;
LABEL_8:
      ++*(_DWORD *)(v5 + 8);
LABEL_9:
      *(_QWORD *)a3 = v5;
      v6 = 15;
      goto LABEL_173;
    }
    if ((a2 - 36443) >= 3)
    {
      if ((_DWORD)a2 != 36662)
        return WebCore::WebGLRenderingContextBase::getParameter(this, a2, a3);
      v5 = *(_QWORD *)(this + 952);
      if (!v5)
        goto LABEL_9;
      goto LABEL_8;
    }
    if (*(_QWORD *)(this + 648))
    {
      v22 = *(_QWORD *)(this + 88);
      if ((_DWORD)a2 == 36445)
      {
        LODWORD(v54) = 0;
        v13 = *(uint64_t (**)(void))(*(_QWORD *)v22 + 472);
        goto LABEL_171;
      }
      LODWORD(v54) = 0;
      this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v22 + 464))(v22, a2, &v54, 1);
      *(_DWORD *)a3 = v54;
      v6 = 6;
      goto LABEL_173;
    }
    v23 = "invalid parameter name, OES_shader_multisample_interpolation not enabled";
    v24 = 73;
LABEL_178:
    this = (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)this, 1280, (uint64_t)"getParameter", 13, (uint64_t)v23, v24);
    goto LABEL_2;
  }
  if ((int)a2 <= 32873)
  {
    if ((int)a2 <= 3377)
    {
      if ((int)a2 <= 3315)
      {
        switch((_DWORD)a2)
        {
          case 0xC02:
            v29 = *(_QWORD *)(this + 88);
            LODWORD(v54) = 0;
            this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v29 + 472))(v29, a2, &v54, 1);
            v7 = v54;
            if (*(_QWORD *)(v4 + 928))
              v30 = WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance;
            else
              v30 = 0;
            if (!v30 && (_DWORD)v54)
              v7 = 1029;
            goto LABEL_172;
          case 0xCF2:
            v7 = *(_DWORD *)(this + 324);
            break;
          case 0xCF3:
            v7 = *(_DWORD *)(this + 336);
            break;
          default:
            return WebCore::WebGLRenderingContextBase::getParameter(this, a2, a3);
        }
      }
      else if ((int)a2 > 3330)
      {
        if ((_DWORD)a2 == 3331)
        {
          v7 = *(_DWORD *)(this + 312);
        }
        else
        {
          if ((_DWORD)a2 != 3332)
            return WebCore::WebGLRenderingContextBase::getParameter(this, a2, a3);
          v7 = *(_DWORD *)(this + 308);
        }
      }
      else if ((_DWORD)a2 == 3316)
      {
        v7 = *(_DWORD *)(this + 332);
      }
      else
      {
        if ((_DWORD)a2 != 3330)
          return WebCore::WebGLRenderingContextBase::getParameter(this, a2, a3);
        v7 = *(_DWORD *)(this + 300);
      }
      goto LABEL_172;
    }
    if ((a2 - 12288) >= 8 && (_DWORD)a2 != 3378)
    {
      if ((_DWORD)a2 != 7938)
        return WebCore::WebGLRenderingContextBase::getParameter(this, a2, a3);
LABEL_91:
      this = WTF::StringImpl::createWithoutCopyingNonEmpty();
      *(_QWORD *)a3 = v54;
      v6 = 7;
      goto LABEL_173;
    }
    goto LABEL_67;
  }
  if ((int)a2 <= 34044)
  {
    if ((int)a2 <= 32999)
    {
      switch((int)a2)
      {
        case 32874:
          v14 = *(_QWORD *)(this + 208);
          if (v14 >= *(unsigned int *)(this + 204))
          {
            __break(0xC471u);
            JUMPOUT(0x195D0E120);
          }
          v15 = *(_QWORD *)(*(_QWORD *)(this + 192) + 32 * v14 + 16);
          if (v15)
LABEL_54:
            ++*(_DWORD *)(v15 + 8);
          goto LABEL_55;
        case 32877:
          v7 = *(_DWORD *)(this + 340);
          goto LABEL_172;
        case 32878:
          v7 = *(_DWORD *)(this + 328);
          goto LABEL_172;
        case 32883:
          v34 = *(_QWORD *)(this + 88);
          LODWORD(v54) = 0;
          v13 = *(uint64_t (**)(void))(*(_QWORD *)v34 + 472);
          goto LABEL_171;
        default:
          return WebCore::WebGLRenderingContextBase::getParameter(this, a2, a3);
      }
    }
    if ((a2 - 33529) >= 2)
    {
      if ((_DWORD)a2 == 33000)
      {
        v50 = *(_QWORD *)(this + 88);
        LODWORD(v54) = 0;
        v13 = *(uint64_t (**)(void))(*(_QWORD *)v50 + 472);
        goto LABEL_171;
      }
      if ((_DWORD)a2 == 33001)
      {
        v19 = *(_QWORD *)(this + 88);
        LODWORD(v54) = 0;
        v13 = *(uint64_t (**)(void))(*(_QWORD *)v19 + 472);
        goto LABEL_171;
      }
      return WebCore::WebGLRenderingContextBase::getParameter(this, a2, a3);
    }
LABEL_67:
    if (*(_QWORD *)(this + 712))
    {
      v20 = *(_QWORD *)(this + 88);
      if ((a2 & 0xFFFFFFF8) != 0x3000)
      {
        LODWORD(v54) = 0;
        v9 = *(uint64_t (**)(void))(*(_QWORD *)v20 + 472);
        goto LABEL_85;
      }
      LOBYTE(v54) = 0;
      v17 = *(uint64_t (**)(void))(*(_QWORD *)v20 + 512);
      goto LABEL_152;
    }
    v23 = "invalid parameter name, WEBGL_clip_cull_distance not enabled";
    v24 = 61;
    goto LABEL_178;
  }
  if ((int)a2 > 35054)
  {
    if ((int)a2 > 35075)
    {
      switch((_DWORD)a2)
      {
        case 0x8904:
          v43 = *(_QWORD *)(this + 88);
          LODWORD(v54) = 0;
          v13 = *(uint64_t (**)(void))(*(_QWORD *)v43 + 472);
          goto LABEL_171;
        case 0x8905:
          v44 = *(_QWORD *)(this + 88);
          LODWORD(v54) = 0;
          v13 = *(uint64_t (**)(void))(*(_QWORD *)v44 + 472);
          goto LABEL_171;
        case 0x8919:
          v10 = *(_QWORD *)(this + 208);
          if (v10 >= *(unsigned int *)(this + 1052))
          {
            __break(0xC471u);
            JUMPOUT(0x195D0E118);
          }
          v11 = *(_QWORD *)(*(_QWORD *)(this + 1040) + 8 * v10);
          if (v11)
            ++*(_DWORD *)(v11 + 8);
          *(_QWORD *)a3 = v11;
          v6 = 20;
          goto LABEL_173;
      }
      return WebCore::WebGLRenderingContextBase::getParameter(this, a2, a3);
    }
    if ((_DWORD)a2 != 35055)
    {
      if ((_DWORD)a2 == 35071)
      {
        v25 = *(_QWORD *)(this + 88);
        LODWORD(v54) = 0;
        v13 = *(uint64_t (**)(void))(*(_QWORD *)v25 + 472);
        goto LABEL_171;
      }
      return WebCore::WebGLRenderingContextBase::getParameter(this, a2, a3);
    }
    v5 = *(_QWORD *)(this + 976);
    if (!v5)
      goto LABEL_9;
    goto LABEL_8;
  }
  if ((int)a2 > 34851)
  {
    if ((_DWORD)a2 == 34852)
    {
      v7 = *(_DWORD *)(this + 280);
      if (!v7)
      {
        v41 = *(_QWORD *)(this + 88);
        LODWORD(v54) = 0;
        this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v41 + 472))(v41, 34852, &v54, 1);
        v7 = v54;
        *(_DWORD *)(v4 + 280) = v54;
      }
      goto LABEL_172;
    }
    if ((_DWORD)a2 != 35053)
      return WebCore::WebGLRenderingContextBase::getParameter(this, a2, a3);
    v5 = *(_QWORD *)(this + 968);
    if (!v5)
      goto LABEL_9;
    goto LABEL_8;
  }
  if ((_DWORD)a2 == 34045)
  {
    v40 = *(_QWORD *)(this + 88);
    LODWORD(v54) = 0;
    v13 = *(uint64_t (**)(void))(*(_QWORD *)v40 + 472);
    goto LABEL_171;
  }
  if ((_DWORD)a2 != 34229)
    return WebCore::WebGLRenderingContextBase::getParameter(this, a2, a3);
  v18 = *(_QWORD *)(this + 144);
  if (!*(_DWORD *)(v18 + 36))
  {
LABEL_2:
    *(_QWORD *)a3 = 0;
    *(_DWORD *)(a3 + 16) = 0;
    return this;
  }
  ++*(_DWORD *)(v18 + 8);
  *(_QWORD *)a3 = v18;
  v6 = 24;
LABEL_173:
  *(_DWORD *)(a3 + 16) = v6;
  return this;
}

uint64_t WebCore::WebGL2RenderingContext::validateCapability(WTF::StringImpl *a1, uint64_t a2, uint64_t a3, int a4)
{
  if ((a4 - 12288) >= 8)
  {
    if (a4 == 35977)
      return 1;
    return WebCore::WebGLRenderingContextBase::validateCapability(a1, a2, a3, a4);
  }
  else
  {
    if (*((_QWORD *)a1 + 89))
      return 1;
    WebCore::WebGLRenderingContextBase::synthesizeGLError(a1, 1280, a2, a3, (uint64_t)"invalid capability, WEBGL_clip_cull_distance not enabled", 57);
    return 0;
  }
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::readPixels(WTF::StringImpl *result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, WebCore::GraphicsContextGL *a6, uint64_t a7, uint64_t *a8)
{
  uint64_t (*v8)();

  if (!*((_BYTE *)result + 364))
  {
    if (*((_QWORD *)result + 121))
      v8 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
    else
      v8 = 0;
    if (v8)
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(result, 1282, (uint64_t)"readPixels", 11, (uint64_t)"a buffer is bound to PIXEL_PACK_BUFFER", 39);
    else
      return WebCore::WebGLRenderingContextBase::readPixels(result, a2, a3, a4, a5, a6, a7, a8);
  }
  return result;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::readPixels(WTF::StringImpl *this, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, WebCore::GraphicsContextGL *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t (*v9)();
  const char *v12;
  const char *v13;
  int v14;
  uint64_t v15;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  uint64_t v30;
  const char *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  _DWORD v34[4];
  char v35;

  if (!*((_BYTE *)this + 364))
  {
    v8 = (uint64_t)this;
    if (*((_QWORD *)this + 121))
      v9 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
    else
      v9 = 0;
    if (!v9)
    {
      v12 = "readPixels";
      v13 = "no buffer is bound to PIXEL_PACK_BUFFER";
      v14 = 1282;
      v15 = 40;
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v14, (uint64_t)v12, 11, (uint64_t)v13, v15);
    }
    if (a8 < 0)
    {
      v12 = "readPixels";
      v13 = "negative offset";
      v14 = 1281;
      v15 = 16;
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v14, (uint64_t)v12, 11, (uint64_t)v13, v15);
    }
    if ((_DWORD)a7 == 34042)
    {
      v12 = "readPixels";
      v13 = "invalid type UNSIGNED_INT_24_8";
      v14 = 1280;
      v15 = 31;
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v14, (uint64_t)v12, 11, (uint64_t)v13, v15);
    }
    this = (WTF::StringImpl *)WebCore::GraphicsContextGL::computeBytesPerGroup(a6, a7);
    if (!(_DWORD)this)
      return WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v8, 1280, (uint64_t)"readPixels", 11, (uint64_t)"invalid format or type", 23);
    if (((a5 | a4) & 0x80000000) != 0)
    {
      v12 = "readPixels";
      v13 = "invalid dimensions";
      this = (WTF::StringImpl *)v8;
      v14 = 1281;
      v15 = 19;
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, v14, (uint64_t)v12, 11, (uint64_t)v13, v15);
    }
    v21 = *(_DWORD *)(v8 + 300);
    if (!v21)
      v21 = a4;
    if (v21 < (int)a4)
      return WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v8, 1282, (uint64_t)"readPixels", 11, (uint64_t)"invalid pack parameters", 24);
    v22 = *(_DWORD *)(v8 + 308);
    v23 = __OFADD__(v22, a4);
    v24 = v22 + a4;
    if (v23)
    {
      __break(0xC471u);
    }
    else
    {
      if (v24 > v21)
        return WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v8, 1282, (uint64_t)"readPixels", 11, (uint64_t)"invalid pack parameters", 24);
      v25 = a4 | (unint64_t)(a5 << 32);
      WebCore::GraphicsContextGL::computeImageSize(a6, a7, v25, 1, (unsigned int *)(v8 + 296), (uint64_t)v34);
      if (v35)
      {
        v23 = __OFADD__(a8, v34[0]);
        v30 = a8 + v34[0];
        if (!v23)
        {
          WebCore::WebGLRenderingContextBase::clearIfComposited(v8, 1, 0, v26, v27, v28, v29);
          return (WTF::StringImpl *)(*(uint64_t (**)(_QWORD, unint64_t, uint64_t, WebCore::GraphicsContextGL *, uint64_t, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v8 + 88) + 1112))(*(_QWORD *)(v8 + 88), a2 | (unint64_t)(a3 << 32), v25, a6, a7, v30, *(unsigned int *)(v8 + 296), *(unsigned int *)(v8 + 300));
        }
        v31 = "invalid pack parameters";
        v32 = (WTF::StringImpl *)v8;
        v33 = 24;
      }
      else
      {
        v31 = "invalid texture dimensions";
        v32 = (WTF::StringImpl *)v8;
        v33 = 27;
      }
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(v32, 1281, (uint64_t)"readPixels", 11, (uint64_t)v31, v33);
    }
  }
  return this;
}

WTF::StringImpl *WebCore::WebGL2RenderingContext::readPixels(WTF::StringImpl *this, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, WebCore::GraphicsContextGL *a6, uint64_t a7, JSC::ArrayBufferView *a8, unsigned int a9)
{
  WTF::StringImpl *v9;
  uint64_t (*v10)();
  WTF::StringImpl *v17;

  if (!*((_BYTE *)this + 364))
  {
    v9 = this;
    if (*((_QWORD *)this + 121))
      v10 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
    else
      v10 = 0;
    if (v10)
    {
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(this, 1282, (uint64_t)"readPixels", 11, (uint64_t)"a buffer is bound to PIXEL_PACK_BUFFER", 39);
    }
    else
    {
      this = WebCore::WebGL2RenderingContext::sliceArrayBufferView(this, (uint64_t)"readPixels", 11, (uint64_t)a8, a9, 0, (uint64_t *)&v17);
      if (v17)
      {
        WebCore::WebGLRenderingContextBase::readPixels(v9, a2, a3, a4, a5, a6, a7, (uint64_t *)&v17);
        this = v17;
        v17 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 1)
            return (WTF::StringImpl *)JSC::ArrayBufferView::operator delete();
          else
            --*(_DWORD *)this;
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::WebGL2RenderingContext::uncacheDeletedBuffer(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v8;
  _DWORD *v10;
  _DWORD *v12;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _DWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _DWORD *v26;
  _DWORD *v27;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = *(_DWORD **)(a1 + 952);
  if (v6 == a3 && v6 != 0)
  {
    *(_QWORD *)(a1 + 952) = 0;
    if (a3[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a3 + 8))(a3);
      v30 = *(_QWORD *)(a1 + 952);
      if (v30 && !*(_DWORD *)(v30 + 36))
        *(_DWORD *)(v30 + 36) = 36662;
    }
    else
    {
      --a3[2];
    }
  }
  v8 = *(_DWORD **)(a1 + 960);
  if (v8 == a3 && v8 != 0)
  {
    *(_QWORD *)(a1 + 960) = 0;
    if (a3[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a3 + 8))(a3);
      v31 = *(_QWORD *)(a1 + 960);
      if (v31 && !*(_DWORD *)(v31 + 36))
        *(_DWORD *)(v31 + 36) = 36663;
    }
    else
    {
      --a3[2];
    }
  }
  v10 = *(_DWORD **)(a1 + 968);
  if (v10 == a3 && v10 != 0)
  {
    *(_QWORD *)(a1 + 968) = 0;
    if (a3[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a3 + 8))(a3);
      v32 = *(_QWORD *)(a1 + 968);
      if (v32 && !*(_DWORD *)(v32 + 36))
        *(_DWORD *)(v32 + 36) = 35051;
    }
    else
    {
      --a3[2];
    }
  }
  v12 = *(_DWORD **)(a1 + 976);
  if (v12 == a3 && v12 != 0)
  {
    *(_QWORD *)(a1 + 976) = 0;
    if (a3[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a3 + 8))(a3);
      v33 = *(_QWORD *)(a1 + 976);
      if (v33 && !*(_DWORD *)(v33 + 36))
        *(_DWORD *)(v33 + 36) = 35052;
    }
    else
    {
      --a3[2];
    }
  }
  v14 = *(_DWORD **)(a1 + 984);
  if (v14 == a3 && v14)
  {
    *(_QWORD *)(a1 + 984) = 0;
    if (a3[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a3 + 8))(a3);
      v34 = *(_QWORD *)(a1 + 984);
      if (v34 && !*(_DWORD *)(v34 + 36))
        *(_DWORD *)(v34 + 36) = 35982;
    }
    else
    {
      --a3[2];
    }
  }
  v15 = *(_DWORD **)(a1 + 992);
  if (v15 == a3 && v15)
  {
    *(_QWORD *)(a1 + 992) = 0;
    if (a3[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a3 + 8))(a3);
      v35 = *(_QWORD *)(a1 + 992);
      if (v35 && !*(_DWORD *)(v35 + 36))
        *(_DWORD *)(v35 + 36) = 35345;
    }
    else
    {
      --a3[2];
    }
  }
  v16 = *(_QWORD *)(a1 + 936);
  v17 = *(unsigned int *)(v16 + 52);
  if ((_DWORD)v17)
  {
    v18 = *(_QWORD **)(v16 + 40);
    v19 = 8 * v17;
    do
    {
      if ((_DWORD *)*v18 == a3 && *v18 != 0)
      {
        *v18 = 0;
        if (a3[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)a3 + 8))(a3);
          v21 = (_DWORD *)*v18;
          if (*v18 && !v21[9])
            v21[9] = 35982;
        }
        else
        {
          --a3[2];
        }
      }
      ++v18;
      v19 -= 8;
    }
    while (v19);
  }
  v22 = *(unsigned int *)(a1 + 1012);
  if ((_DWORD)v22)
  {
    v23 = *(_QWORD **)(a1 + 1000);
    v24 = 8 * v22;
    do
    {
      if ((_DWORD *)*v23 == a3 && *v23 != 0)
      {
        *v23 = 0;
        if (a3[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)a3 + 8))(a3);
          v26 = (_DWORD *)*v23;
          if (*v23 && !v26[9])
            v26[9] = 35345;
        }
        else
        {
          --a3[2];
        }
      }
      ++v23;
      v24 -= 8;
    }
    while (v24);
  }
  v27 = *(_DWORD **)(a1 + 120);
  if (v27 == a3 && v27 != 0)
  {
    *(_QWORD *)(a1 + 120) = 0;
    if (a3[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)a3 + 8))(a3);
      v36 = *(_QWORD *)(a1 + 120);
      if (v36 && !*(_DWORD *)(v36 + 36))
        *(_DWORD *)(v36 + 36) = 34962;
    }
    else
    {
      --a3[2];
    }
  }
  return WebCore::WebGLVertexArrayObjectBase::unbindBuffer(*(_QWORD *)(a1 + 144), a2, (uint64_t)a3);
}

uint64_t WebCore::OffscreenCanvasRenderingContext2D::isOffscreen2d(WebCore::OffscreenCanvasRenderingContext2D *this)
{
  return 1;
}

uint64_t WebCore::PaintRenderingContext2D::isPaint(WebCore::PaintRenderingContext2D *this)
{
  return 1;
}

uint64_t WebCore::PaintRenderingContext2D::effectiveDrawingContext(WebCore::PaintRenderingContext2D *this)
{
  uint64_t v1;
  int32x2_t *v3;
  float32x2_t v4;
  unint64_t v5;
  void *v6;
  WebCore::DisplayList::DrawingContext *v7;
  WTF *v8;
  void *v9;
  _OWORD v11[3];
  _QWORD v12[2];
  int v13;
  uint64_t v14[44];

  v14[43] = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 102);
  if (!v1)
  {
    v3 = (int32x2_t *)*((_QWORD *)this + 4);
    v1 = WTF::fastMalloc((WTF *)0xF30);
    v4 = vcvt_f32_s32(v3[1]);
    v11[0] = xmmword_1969F16A0;
    v11[1] = unk_1969F16B0;
    v11[2] = xmmword_1969F16C0;
    v5 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
    if (v5 != -1)
    {
      v14[0] = (uint64_t)&v13;
      v12[0] = v14;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, v12, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    v13 = 0;
    WebCore::GraphicsContextState::GraphicsContextState((uint64_t)v14, &v13, 0);
    v12[0] = 0;
    v12[1] = v4;
    WebCore::DisplayList::Recorder::Recorder(v1, 1, v14, (const WebCore::FloatRect *)v12, (long double *)v11, (const void **)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 0);
    *(_QWORD *)v1 = off_1E34136B0;
    *(_QWORD *)(v1 + 3824) = v1 + 3832;
    WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)v14, v6);
    *(_BYTE *)(v1 + 3880) = 0;
    *(_OWORD *)(v1 + 3848) = 0u;
    *(_OWORD *)(v1 + 3864) = 0u;
    *(_OWORD *)(v1 + 3832) = 0u;
    v7 = (WebCore::DisplayList::DrawingContext *)*((_QWORD *)this + 102);
    *((_QWORD *)this + 102) = v1;
    if (v7)
    {
      WebCore::DisplayList::DrawingContext::~DrawingContext(v7);
      WTF::fastFree(v8, v9);
      return *((_QWORD *)this + 102);
    }
  }
  return v1;
}

void WebCore::PlaceholderRenderingContext::~PlaceholderRenderingContext(WebCore::PlaceholderRenderingContext *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  WebCore::CanvasRenderingContext::~CanvasRenderingContext((unsigned int **)this);
}

{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  bmalloc::api *v6;
  void *v7;

  v2 = (unsigned int *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v2 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
    }
  }
  WebCore::CanvasRenderingContext::~CanvasRenderingContext((unsigned int **)this);
  bmalloc::api::isoDeallocate(v6, v7);
}

uint64_t WebCore::PlaceholderRenderingContext::isPlaceholder(WebCore::PlaceholderRenderingContext *this)
{
  return 1;
}

uint64_t WebCore::PlaceholderRenderingContext::delegatesDisplay(WebCore::PlaceholderRenderingContext *this)
{
  return 1;
}

uint64_t WebCore::WebGLRenderingContextBase::compositingResultsNeedUpdating(WebCore::WebGLRenderingContextBase *this)
{
  return *((unsigned __int8 *)this + 432);
}

uint64_t WebCore::WebGLRenderingContextBase::needsPreparationForDisplay(WebCore::WebGLRenderingContextBase *this)
{
  return 1;
}

uint64_t WebCore::WebGL2RenderingContext::isWebGL2(WebCore::WebGL2RenderingContext *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::WebGL2RenderingContext::isWebGL2(WebCore::WebGL2RenderingContext *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::WebGLRenderingContextBase::compositingResultsNeedUpdating(WebCore::WebGLRenderingContextBase *this)
{
  return *((unsigned __int8 *)this + 424);
}

uint64_t `non-virtual thunk to'WebCore::WebGLRenderingContextBase::needsPreparationForDisplay(WebCore::WebGLRenderingContextBase *this)
{
  return 1;
}

void std::default_delete<WebCore::DisplayList::DisplayList>::operator()[abi:sn180100](int a1, WTF *this)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  WTF *v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  char v12;
  char v13;

  if (this)
  {
    v3 = *((_QWORD *)this + 2);
    if (v3)
    {
      v4 = *(unsigned int *)(v3 - 4);
      if ((_DWORD)v4)
      {
        v5 = v3 + 8;
        do
        {
          if (*(_QWORD *)(v5 - 8) != -1)
          {
            v6 = *(unsigned int *)(v5 + 8);
            if ((_DWORD)v6 != -1)
              ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3WTF3RefIN7WebCore11ImageBufferENS7_12RawPtrTraitsISA_EENS7_21DefaultRefDerefTraitsISA_EEEENS8_INS9_17RenderingResourceENSB_ISG_EENSD_ISG_EEEENS8_INS9_4FontENSB_ISK_EENSD_ISK_EEEENS8_INS9_22FontCustomPlatformDataENSB_ISO_EENSD_ISO_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSU_EEEDcOSV_DpOT0____fmatrix[v6])(&v12, v5);
            *(_DWORD *)(v5 + 8) = -1;
          }
          v5 += 24;
          --v4;
        }
        while (v4);
      }
      WTF::fastFree((WTF *)(v3 - 16), this);
    }
    v7 = *((_DWORD *)this + 3);
    v8 = *(WTF **)this;
    if (v7)
    {
      v9 = 360 * v7;
      v10 = (_DWORD *)((char *)v8 + 352);
      do
      {
        v11 = *v10;
        if ((_DWORD)v11 != -1)
          ((void (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS7_22BeginTransparencyLayerENS7_39BeginTransparencyLayerWithCompositeModeENS7_9ClearRectENS7_15ClearDropShadowENS7_4ClipENS7_15ClipRoundedRectENS7_7ClipOutENS7_18ClipOutRoundedRectENS7_13ClipOutToPathENS7_8ClipPathENS7_17ClipToImageBufferENS7_14ConcatenateCTMENS7_15DrawControlPartENS7_25DrawDotsForDocumentMarkerENS7_11DrawEllipseENS7_23DrawFilteredImageBufferENS7_17DrawFocusRingPathENS7_18DrawFocusRingRectsENS7_10DrawGlyphsENS7_20DrawDecomposedGlyphsENS7_20DrawDisplayListItemsENS7_15DrawImageBufferENS7_8DrawLineENS7_16DrawLinesForTextENS7_15DrawNativeImageENS7_8DrawPathENS7_11DrawPatternENS7_8DrawRectENS7_15DrawSystemImageENS7_20EndTransparencyLayerENS7_18FillCompositedRectENS7_11FillEllipseENS7_15FillPathSegmentENS7_8FillPathENS7_8FillRectENS7_17FillRectWithColorENS7_20FillRectWithGradientENS7_37FillRectWithGradientAndSpaceTransformENS7_23FillRectWithRoundedHoleENS7_15FillRoundedRectENS7_9ResetClipENS7_7RestoreENS7_6RotateENS7_4SaveENS7_5ScaleENS7_6SetCTMENS7_18SetInlineFillColorENS7_15SetInlineStrokeENS7_10SetLineCapENS7_11SetLineDashENS7_11SetLineJoinENS7_13SetMiterLimitENS7_8SetStateENS7_13StrokeEllipseENS7_10StrokeLineENS7_17StrokePathSegmentENS7_10StrokePathENS7_10StrokeRectENS7_9TranslateENS7_8FillLineENS7_7FillArcENS7_13FillClosedArcENS7_13FillQuadCurveENS7_15FillBezierCurveENS7_9StrokeArcENS7_15StrokeClosedArcENS7_15StrokeQuadCurveENS7_17StrokeBezierCurveENS7_18PaintFrameForMediaENS7_16ApplyFillPatternENS7_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS2A_EEEDcOS2B_DpOT0____fmatrix[v11])(&v13, v10 - 86);
        *v10 = -1;
        v10 += 90;
        v9 -= 360;
      }
      while (v9);
      v8 = *(WTF **)this;
    }
    if (v8)
    {
      *(_QWORD *)this = 0;
      *((_DWORD *)this + 2) = 0;
      WTF::fastFree(v8, this);
    }
    WTF::fastFree(this, this);
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3WTF3RefIN7WebCore11ImageBufferENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_17RenderingResourceENSD_ISI_EENSF_ISI_EEEENSA_INSB_4FontENSD_ISM_EENSF_ISM_EEEENSA_INSB_22FontCustomPlatformDataENSD_ISQ_EENSF_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS8_SH_SL_SP_ST_EEEEEEDcSX_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v2 = *a2;
  *a2 = 0;
  if (!v2)
    return result;
  v3 = *(_QWORD *)(v2 + 8);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_7;
  }
  result = MEMORY[0x19AEA534C](v3);
LABEL_7:
  v6 = *(_QWORD *)(v3 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v3 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v11 = *(_QWORD *)(v3 + 16);
    v8 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    v9 = v11 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v3);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
LABEL_13:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v3);
  if (!v7)
  {
    if (v8)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (!v9)
      return WTF::fastFree((WTF *)v3, a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3WTF3RefIN7WebCore11ImageBufferENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_17RenderingResourceENSD_ISI_EENSF_ISI_EEEENSA_INSB_4FontENSD_ISM_EENSF_ISM_EEEENSA_INSB_22FontCustomPlatformDataENSD_ISQ_EENSF_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS8_SH_SL_SP_ST_EEEEEEDcSX_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v2 = *a2;
  *a2 = 0;
  if (!v2)
    return result;
  v3 = *(_QWORD *)(v2 + 8);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v3);
LABEL_6:
  v6 = *(_QWORD *)(v3 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v3 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v11 = *(_QWORD *)(v3 + 16);
    v8 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    v9 = v11 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v3);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (v7)
      return result;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
    goto LABEL_13;
  if (v7)
    return result;
LABEL_14:
  if (v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    return WTF::fastFree((WTF *)v3, a2);
  return result;
}

WTF **_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3WTF3RefIN7WebCore11ImageBufferENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_17RenderingResourceENSD_ISI_EENSF_ISI_EEEENSA_INSB_4FontENSD_ISM_EENSF_ISM_EEEENSA_INSB_22FontCustomPlatformDataENSD_ISQ_EENSF_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS8_SH_SL_SP_ST_EEEEEEDcSX_DpT0_(uint64_t a1, WTF ***a2)
{
  WTF **result;
  WTF *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      WebCore::Font::~Font(result);
      return (WTF **)WTF::fastFree(v3, v4);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN3WTF3RefIN7WebCore11ImageBufferENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_17RenderingResourceENSD_ISI_EENSF_ISI_EEEENSA_INSB_4FontENSD_ISM_EENSF_ISM_EEEENSA_INSB_22FontCustomPlatformDataENSD_ISQ_EENSF_ISQ_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSV_1EJS8_SH_SL_SP_ST_EEEEEEDcSX_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  WTF::StringImpl *v3;
  void *v4;
  const void *v5;

  v2 = *(uint64_t **)a2;
  *(_QWORD *)a2 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (WTF::StringImpl *)v2[3];
      v2[3] = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
      WTF::Ref<WebCore::SharedBuffer,WTF::RawPtrTraits<WebCore::SharedBuffer>,WTF::DefaultRefDerefTraits<WebCore::SharedBuffer>>::~Ref(v2 + 2, a2);
      v5 = (const void *)v2[1];
      v2[1] = 0;
      if (v5)
        CFRelease(v5);
      WTF::fastFree((WTF *)v2, v4);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm9EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_2[v3])(&v5, a2 + 8);
  *(_DWORD *)(a2 + 64) = -1;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm10EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_2[v3])(&v5, a2 + 8);
  *(_DWORD *)(a2 + 64) = -1;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm13EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *result;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;

  v2 = a2[11];
  if ((v2 & 0x8000000000000) != 0)
  {
    v11 = a2;
    v5 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
      a2 = v11;
    }
  }
  v3 = a2[10];
  if ((v3 & 0x8000000000000) != 0)
  {
    v12 = a2;
    v8 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v9 = __ldaxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
    {
      atomic_store(1u, v8);
      WTF::fastFree((WTF *)v8, a2);
      a2 = v12;
    }
  }
  result = (_DWORD *)*a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm14EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = a2[3];
  if ((v2 & 0x8000000000000) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm16EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v2 = a2[4];
  a2[4] = 0;
  if (!v2)
    return result;
  v3 = *(_QWORD *)(v2 + 8);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v3);
LABEL_6:
  v6 = *(_QWORD *)(v3 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v3 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v11 = *(_QWORD *)(v3 + 16);
    v8 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    v9 = v11 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v3);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (v7)
      return result;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
    goto LABEL_13;
  if (v7)
    return result;
LABEL_14:
  if (v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    return WTF::fastFree((WTF *)v3, a2);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm17EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 80);
  if ((v3 & 0x8000000000000) != 0)
  {
    v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, (void *)a2);
    }
  }
  v4 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_2[v4])(&v8, a2 + 8);
  *(_DWORD *)(a2 + 64) = -1;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm18EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  WTF *result;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;

  v2 = a2[3];
  if ((v2 & 0x8000000000000) != 0)
  {
    v7 = a2;
    v4 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
      a2 = v7;
    }
  }
  result = (WTF *)*a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm19EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF *v3;
  WTF *result;

  v3 = *(WTF **)(a2 + 24);
  if (v3)
  {
    *(_QWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 32) = 0;
    WTF::fastFree(v3, (void *)a2);
  }
  result = *(WTF **)(a2 + 8);
  if (result)
  {
    *(_QWORD *)(a2 + 8) = 0;
    *(_DWORD *)(a2 + 16) = 0;
    return (WTF *)WTF::fastFree(result, (void *)a2);
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm21EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, _DWORD *a2)
{
  unsigned int v3;
  WTF *result;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  char v8;

  v3 = a2[3];
  result = *(WTF **)a2;
  if (v3)
  {
    v5 = 360 * v3;
    v6 = (_DWORD *)((char *)result + 352);
    do
    {
      v7 = *v6;
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS7_22BeginTransparencyLayerENS7_39BeginTransparencyLayerWithCompositeModeENS7_9ClearRectENS7_15ClearDropShadowENS7_4ClipENS7_15ClipRoundedRectENS7_7ClipOutENS7_18ClipOutRoundedRectENS7_13ClipOutToPathENS7_8ClipPathENS7_17ClipToImageBufferENS7_14ConcatenateCTMENS7_15DrawControlPartENS7_25DrawDotsForDocumentMarkerENS7_11DrawEllipseENS7_23DrawFilteredImageBufferENS7_17DrawFocusRingPathENS7_18DrawFocusRingRectsENS7_10DrawGlyphsENS7_20DrawDecomposedGlyphsENS7_20DrawDisplayListItemsENS7_15DrawImageBufferENS7_8DrawLineENS7_16DrawLinesForTextENS7_15DrawNativeImageENS7_8DrawPathENS7_11DrawPatternENS7_8DrawRectENS7_15DrawSystemImageENS7_20EndTransparencyLayerENS7_18FillCompositedRectENS7_11FillEllipseENS7_15FillPathSegmentENS7_8FillPathENS7_8FillRectENS7_17FillRectWithColorENS7_20FillRectWithGradientENS7_37FillRectWithGradientAndSpaceTransformENS7_23FillRectWithRoundedHoleENS7_15FillRoundedRectENS7_9ResetClipENS7_7RestoreENS7_6RotateENS7_4SaveENS7_5ScaleENS7_6SetCTMENS7_18SetInlineFillColorENS7_15SetInlineStrokeENS7_10SetLineCapENS7_11SetLineDashENS7_11SetLineJoinENS7_13SetMiterLimitENS7_8SetStateENS7_13StrokeEllipseENS7_10StrokeLineENS7_17StrokePathSegmentENS7_10StrokePathENS7_10StrokeRectENS7_9TranslateENS7_8FillLineENS7_7FillArcENS7_13FillClosedArcENS7_13FillQuadCurveENS7_15FillBezierCurveENS7_9StrokeArcENS7_15StrokeClosedArcENS7_15StrokeQuadCurveENS7_17StrokeBezierCurveENS7_18PaintFrameForMediaENS7_16ApplyFillPatternENS7_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS2A_EEEDcOS2B_DpOT0____fmatrix[v7])(&v8, v6 - 86);
      *v6 = -1;
      v6 += 90;
      v5 -= 360;
    }
    while (v5);
    result = *(WTF **)a2;
  }
  if (result)
  {
    *(_QWORD *)a2 = 0;
    a2[2] = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm24EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF *result;

  result = *(WTF **)(a2 + 16);
  if (result)
  {
    *(_QWORD *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 24) = 0;
    return (WTF *)WTF::fastFree(result, (void *)a2);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm26EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_2[v3])(&v5, a2 + 8);
  *(_DWORD *)(a2 + 64) = -1;
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm29EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm31EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = a2[2];
  if ((v2 & 0x8000000000000) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm34EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_2[v3])(&v5, a2 + 8);
  *(_DWORD *)(a2 + 64) = -1;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm36EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = a2[2];
  if ((v2 & 0x8000000000000) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm37EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v2 = a2[2];
  a2[2] = 0;
  if (!v2)
    return result;
  v3 = *(_QWORD *)(v2 + 8);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v3);
LABEL_6:
  v6 = *(_QWORD *)(v3 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v3 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v11 = *(_QWORD *)(v3 + 16);
    v8 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    v9 = v11 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v3);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (v7)
      return result;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
    goto LABEL_13;
  if (v7)
    return result;
LABEL_14:
  if (v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    return WTF::fastFree((WTF *)v3, a2);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm38EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;

  v2 = a2[2];
  a2[2] = 0;
  if (!v2)
    return result;
  v3 = *(_QWORD *)(v2 + 8);
  if (__ldaxr((unsigned __int8 *)v3))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v3))
  {
    goto LABEL_6;
  }
  result = MEMORY[0x19AEA534C](v3);
LABEL_6:
  v6 = *(_QWORD *)(v3 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v3 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v11 = *(_QWORD *)(v3 + 16);
    v8 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v3 + 24) = 0;
    v9 = v11 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v3);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v3);
    if (v7)
      return result;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v3))
    goto LABEL_13;
  if (v7)
    return result;
LABEL_14:
  if (v8)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    return WTF::fastFree((WTF *)v3, a2);
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm39EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = a2[8];
  if ((v2 & 0x8000000000000) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm40EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = a2[6];
  if ((v2 & 0x8000000000000) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm50EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm53EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(int a1, WebCore::GraphicsContextState *this)
{
  WebCore::GraphicsContextState::~GraphicsContextState(this, this);
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm57EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore11DisplayList22ApplyDeviceScaleFactorENS9_22BeginTransparencyLayerENS9_39BeginTransparencyLayerWithCompositeModeENS9_9ClearRectENS9_15ClearDropShadowENS9_4ClipENS9_15ClipRoundedRectENS9_7ClipOutENS9_18ClipOutRoundedRectENS9_13ClipOutToPathENS9_8ClipPathENS9_17ClipToImageBufferENS9_14ConcatenateCTMENS9_15DrawControlPartENS9_25DrawDotsForDocumentMarkerENS9_11DrawEllipseENS9_23DrawFilteredImageBufferENS9_17DrawFocusRingPathENS9_18DrawFocusRingRectsENS9_10DrawGlyphsENS9_20DrawDecomposedGlyphsENS9_20DrawDisplayListItemsENS9_15DrawImageBufferENS9_8DrawLineENS9_16DrawLinesForTextENS9_15DrawNativeImageENS9_8DrawPathENS9_11DrawPatternENS9_8DrawRectENS9_15DrawSystemImageENS9_20EndTransparencyLayerENS9_18FillCompositedRectENS9_11FillEllipseENS9_15FillPathSegmentENS9_8FillPathENS9_8FillRectENS9_17FillRectWithColorENS9_20FillRectWithGradientENS9_37FillRectWithGradientAndSpaceTransformENS9_23FillRectWithRoundedHoleENS9_15FillRoundedRectENS9_9ResetClipENS9_7RestoreENS9_6RotateENS9_4SaveENS9_5ScaleENS9_6SetCTMENS9_18SetInlineFillColorENS9_15SetInlineStrokeENS9_10SetLineCapENS9_11SetLineDashENS9_11SetLineJoinENS9_13SetMiterLimitENS9_8SetStateENS9_13StrokeEllipseENS9_10StrokeLineENS9_17StrokePathSegmentENS9_10StrokePathENS9_10StrokeRectENS9_9TranslateENS9_8FillLineENS9_7FillArcENS9_13FillClosedArcENS9_13FillQuadCurveENS9_15FillBezierCurveENS9_9StrokeArcENS9_15StrokeClosedArcENS9_15StrokeQuadCurveENS9_17StrokeBezierCurveENS9_18PaintFrameForMediaENS9_16ApplyFillPatternENS9_18ApplyStrokePatternEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS2B_1EJSA_SB_SC_SD_SE_SF_SG_SH_SI_SJ_SK_SL_SM_SN_SO_SP_SQ_SR_SS_ST_SU_SV_SW_SX_SY_SZ_S10_S11_S12_S13_S14_S15_S16_S17_S18_S19_S1A_S1B_S1C_S1D_S1E_S1F_S1G_S1H_S1I_S1J_S1K_S1L_S1M_S1N_S1O_S1P_S1Q_S1R_S1S_S1T_S1U_S1V_S1W_S1X_S1Y_S1Z_S20_S21_S22_S23_S24_S25_S26_S27_S28_S29_EEEEEEDcS2D_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 64);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_2[v3])(&v5, a2 + 8);
  *(_DWORD *)(a2 + 64) = -1;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18GraphicsDropShadowENS8_20GraphicsGaussianBlurENS8_19GraphicsColorMatrixEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJS9_SA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = a2[2];
  if ((v2 & 0x8000000000000) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
}

void WebCore::`anonymous namespace'::DelegatedDisplayPlaceholderRenderingContextSource::~DelegatedDisplayPlaceholderRenderingContextSource(WebCore::_anonymous_namespace_::DelegatedDisplayPlaceholderRenderingContextSource *this, void *a2)
{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  *(_QWORD *)this = off_1E33DD658;
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
}

{
  _DWORD *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  *(_QWORD *)this = off_1E33DD658;
  v4 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  WTF::fastFree(this, a2);
}

void WebCore::`anonymous namespace'::DelegatedDisplayPlaceholderRenderingContextSource::setPlaceholderBuffer(WebCore::_anonymous_namespace_::DelegatedDisplayPlaceholderRenderingContextSource *this, WebCore::ImageBuffer *a2)
{
  unsigned __int8 *v4;
  uint64_t v6;
  int v7;

  v4 = (unsigned __int8 *)this + 24;
  if (__ldaxr((unsigned __int8 *)this + 24))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 24);
LABEL_5:
  v6 = *((_QWORD *)this + 4);
  if (v6)
    (*(void (**)(uint64_t, WebCore::ImageBuffer *))(*(_QWORD *)v6 + 40))(v6, a2);
  v7 = __ldxr(v4);
  if (v7 == 1)
  {
    if (!__stlxr(0, v4))
      goto LABEL_12;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v4);
LABEL_12:
  WebCore::PlaceholderRenderingContextSource::setPlaceholderBuffer(this, a2);
}

_DWORD *WebCore::`anonymous namespace'::DelegatedDisplayPlaceholderRenderingContextSource::setContentsToLayer(WebCore::_anonymous_namespace_::DelegatedDisplayPlaceholderRenderingContextSource *this, WebCore::GraphicsLayer *a2)
{
  unsigned __int8 *v4;
  _DWORD *v6;
  _DWORD *result;
  int v8;
  int v9;
  _DWORD *v10;

  v4 = (unsigned __int8 *)this + 24;
  if (__ldaxr((unsigned __int8 *)this + 24))
  {
    __clrex();
  }
  else if (!__stxr(1u, v4))
  {
    goto LABEL_5;
  }
  MEMORY[0x19AEA534C]((char *)this + 24);
LABEL_5:
  (*(void (**)(_DWORD **__return_ptr, WebCore::GraphicsLayer *, _QWORD))(*(_QWORD *)a2 + 552))(&v10, a2, *((_QWORD *)this + 4));
  v6 = v10;
  v10 = 0;
  result = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v6;
  if (!result)
    goto LABEL_8;
  v8 = result[2] - 1;
  if (result[2] != 1)
    goto LABEL_7;
  (*(void (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
  result = v10;
  v10 = 0;
  if (result)
  {
    v8 = result[2] - 1;
    if (result[2] != 1)
    {
LABEL_7:
      result[2] = v8;
      goto LABEL_8;
    }
    result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
  }
LABEL_8:
  v9 = __ldxr(v4);
  if (v9 == 1)
  {
    if (!__stlxr(0, v4))
      return result;
  }
  else
  {
    __clrex();
  }
  return (_DWORD *)WTF::Lock::unlockSlow((WTF::Lock *)v4);
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17WebGLRenderbufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_16WebGLFramebuffer17TextureAttachmentENSH_22TextureLayerAttachmentEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSG_SI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17WebGLRenderbufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_16WebGLFramebuffer17TextureAttachmentENSH_22TextureLayerAttachmentEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSG_SI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17WebGLRenderbufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_16WebGLFramebuffer17TextureAttachmentENSH_22TextureLayerAttachmentEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSL_1EJSG_SI_SJ_EEEEEEDcSN_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_17HTMLCanvasElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IS11_EENSE_IS11_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS15_LNS0_6_TraitE1EEEEEvRS16_OT_EUlRS1E_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEERKS1M_EEEDcS1E_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 8);
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_17HTMLCanvasElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IS11_EENSE_IS11_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS15_LNS0_6_TraitE1EEEEEvRS16_OT_EUlRS1E_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEERKS1M_EEEDcS1E_DpT0_(uint64_t a1, _QWORD *a2, _DWORD **a3)
{
  _DWORD *v3;

  v3 = *a3;
  if (*a3)
    ++*v3;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_17HTMLCanvasElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IS11_EENSE_IS11_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS15_LNS0_6_TraitE1EEEEEvRS16_OT_EUlRS1E_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEERKS1M_EEEDcS1E_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    *(_DWORD *)(v3 + 24) += 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_17HTMLCanvasElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IS11_EENSE_IS11_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS15_LNS0_6_TraitE1EEEEEvRS16_OT_EUlRS1E_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEERKS1M_EEEDcS1E_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    *(_DWORD *)(v3 + 24) += 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_17HTMLCanvasElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IS11_EENSE_IS11_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS15_LNS0_6_TraitE1EEEEEvRS16_OT_EUlRS1E_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEERKS1M_EEEDcS1E_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    *(_DWORD *)(v3 + 24) += 2;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_17HTMLCanvasElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IS11_EENSE_IS11_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS15_LNS0_6_TraitE1EEEEEvRS16_OT_EUlRS1E_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEERKS1M_EEEDcS1E_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 24);
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore11ImageBitmapENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_9ImageDataENSC_ISH_EENSE_ISH_EEEENS9_INSA_16HTMLImageElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_17HTMLCanvasElementENSC_ISP_EENSE_ISP_EEEENS9_INSA_16HTMLVideoElementENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_19WebCodecsVideoFrameENSC_IS11_EENSE_IS11_EEEEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorIS15_LNS0_6_TraitE1EEEEEvRS16_OT_EUlRS1E_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEERKS1M_EEEDcS1E_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 16);
  *a2 = v3;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17WebGLRenderbufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12WebGLTextureENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17WebGLRenderbufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12WebGLTextureENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17WebGLRenderbufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12WebGLTextureENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOSZ_EEEDcSR_DpT0_(_DWORD *result, _DWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E33DDE18[v5])(&v8, v4);
LABEL_7:
    v7 = (_DWORD *)*a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 0;
    return result;
  }
  v6 = (_DWORD *)*a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17WebGLRenderbufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12WebGLTextureENSC_ISH_EENSE_ISH_EEEEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISL_LNS0_6_TraitE1EEEEEvOT_EUlRSR_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOSZ_EEEDcSR_DpT0_(_DWORD *result, _DWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 8);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5 != 1)
  {
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E33DDE18[v5])(&v8, v4);
LABEL_7:
    v7 = (_DWORD *)*a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 8) = 1;
    return result;
  }
  v6 = (_DWORD *)*a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17WebGLRenderbufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12WebGLTextureENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17WebGLRenderbufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_12WebGLTextureENSC_ISH_EENSE_ISH_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISL_LNS0_6_TraitE1EEEEEvRSM_OT_EUlRSS_OT0_E_JRNS0_6__baseILSP_1EJSG_SK_EEEOS10_EEEDcSS_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::not_equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::WebGLRenderbuffer,std::__variant_detail::_Trait::RawPtrTraits<WebCore>,std::__variant_detail::_Trait::DefaultRefDerefTraits<WebCore>>,WTF<WTF::RefPtr::WebGLTexture,WebCore::WebGLRenderbuffer<WTF::RefPtr<WebCore::WebGLRenderbuffer,std::__variant_detail::_Trait::RawPtrTraits<WebCore>,std::__variant_detail::_Trait::DefaultRefDerefTraits<WebCore>>>,std::__variant_detail::_Trait::RawPtrTraits<WebCore><WTF::RefPtr<WebCore::WebGLRenderbuffer,std::__variant_detail::_Trait::RawPtrTraits<WebCore>,std::__variant_detail::_Trait::DefaultRefDerefTraits<WebCore>>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::WebGLRenderbuffer,std::__variant_detail::_Trait::RawPtrTraits<WebCore>,std::__variant_detail::_Trait::DefaultRefDerefTraits<WebCore>>,WTF<WTF::RefPtr::WebGLTexture,WebCore::WebGLRenderbuffer<WTF::RefPtr<WebCore::WebGLRenderbuffer,std::__variant_detail::_Trait::RawPtrTraits<WebCore>,std::__variant_detail::_Trait::DefaultRefDerefTraits<WebCore>>>,std::__variant_detail::_Trait::RawPtrTraits<WebCore><WTF::RefPtr<WebCore::WebGLRenderbuffer,std::__variant_detail::_Trait::RawPtrTraits<WebCore>,std::__variant_detail::_Trait::DefaultRefDerefTraits<WebCore>>>>> const>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 != *a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::not_equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::WebGLRenderbuffer,std::__variant_detail::_Trait::RawPtrTraits<WebCore>,std::__variant_detail::_Trait::DefaultRefDerefTraits<WebCore>>,WTF<WTF::RefPtr::WebGLTexture,WebCore::WebGLRenderbuffer<WTF::RefPtr<WebCore::WebGLRenderbuffer,std::__variant_detail::_Trait::RawPtrTraits<WebCore>,std::__variant_detail::_Trait::DefaultRefDerefTraits<WebCore>>>,std::__variant_detail::_Trait::RawPtrTraits<WebCore><WTF::RefPtr<WebCore::WebGLRenderbuffer,std::__variant_detail::_Trait::RawPtrTraits<WebCore>,std::__variant_detail::_Trait::DefaultRefDerefTraits<WebCore>>>>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::WebGLRenderbuffer,std::__variant_detail::_Trait::RawPtrTraits<WebCore>,std::__variant_detail::_Trait::DefaultRefDerefTraits<WebCore>>,WTF<WTF::RefPtr::WebGLTexture,WebCore::WebGLRenderbuffer<WTF::RefPtr<WebCore::WebGLRenderbuffer,std::__variant_detail::_Trait::RawPtrTraits<WebCore>,std::__variant_detail::_Trait::DefaultRefDerefTraits<WebCore>>>,std::__variant_detail::_Trait::RawPtrTraits<WebCore><WTF::RefPtr<WebCore::WebGLRenderbuffer,std::__variant_detail::_Trait::RawPtrTraits<WebCore>,std::__variant_detail::_Trait::DefaultRefDerefTraits<WebCore>>>>> const>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 != *a3;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::PlaceholderRenderingContextSource::setPlaceholderBuffer(WebCore::ImageBuffer &)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *a1 = &off_1E33DDE98;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)a1[1];
  a1[1] = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PlaceholderRenderingContextSource::setPlaceholderBuffer(WebCore::ImageBuffer &)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  *(_QWORD *)this = &off_1E33DDE98;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
  {
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      WTF::fastFree((WTF *)v4, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::PlaceholderRenderingContextSource::setPlaceholderBuffer(WebCore::ImageBuffer &)::$_0,void>::call(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(result + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 8);
    if (v2)
    {
      v3 = result;
      (*(void (**)(_QWORD))(**(_QWORD **)(v2 + 32) + 16))(*(_QWORD *)(v2 + 32));
      v4 = *(_QWORD *)(v3 + 16);
      *(_QWORD *)(v3 + 16) = 0;
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 32) - 72) + 8);
      v6 = *(_QWORD *)(v5 + 704);
      if (v6)
      {
        v7 = *(_QWORD *)(v6 + 8);
        if (v7)
          v5 = v7;
      }
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 192) + 200))(v5 + 192);
      if (v8)
      {
        v31 = v4;
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v8 + 48))(&v30, v8, &v31);
        v9 = v31;
        v31 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
      }
      else
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v30, v4);
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      }
      v10 = v30;
      if (!v30)
        return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 32) + 24))(*(_QWORD *)(v2 + 32));
      v30 = 0;
      v31 = v10;
      (*(void (**)(_QWORD, uint64_t *))(**(_QWORD **)(v2 + 32) + 72))(*(_QWORD *)(v2 + 32), &v31);
      v12 = v31;
      v31 = 0;
      if (!v12)
      {
LABEL_28:
        v20 = v30;
        v30 = 0;
        if (!v20)
          return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 32) + 24))(*(_QWORD *)(v2 + 32));
        v21 = *(_QWORD *)(v20 + 8);
        if (__ldaxr((unsigned __int8 *)v21))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v21))
        {
          goto LABEL_33;
        }
        MEMORY[0x19AEA534C](v21);
LABEL_33:
        v23 = *(_QWORD *)(v21 + 8);
        v24 = v23 - 1;
        *(_QWORD *)(v21 + 8) = v23 - 1;
        if (v23 == 1)
        {
          v29 = *(_QWORD *)(v21 + 16);
          v25 = *(_QWORD *)(v21 + 24);
          *(_QWORD *)(v21 + 24) = 0;
          v26 = v29 != 0;
        }
        else
        {
          v25 = 0;
          v26 = 1;
        }
        v27 = __ldxr((unsigned __int8 *)v21);
        if (v27 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v21))
          {
            if (!v24)
              goto LABEL_41;
            return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 32) + 24))(*(_QWORD *)(v2 + 32));
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v21);
        if (!v24)
        {
LABEL_41:
          if (v25)
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
          if (!v26)
            WTF::fastFree((WTF *)v21, v11);
        }
        return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 32) + 24))(*(_QWORD *)(v2 + 32));
      }
      v13 = *(_QWORD *)(v12 + 8);
      if (__ldaxr((unsigned __int8 *)v13))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v13))
      {
        goto LABEL_16;
      }
      MEMORY[0x19AEA534C](v13);
LABEL_16:
      v15 = *(_QWORD *)(v13 + 8);
      v16 = v15 - 1;
      *(_QWORD *)(v13 + 8) = v15 - 1;
      if (v15 == 1)
      {
        v28 = *(_QWORD *)(v13 + 16);
        v17 = *(_QWORD *)(v13 + 24);
        *(_QWORD *)(v13 + 24) = 0;
        v18 = v28 != 0;
      }
      else
      {
        v17 = 0;
        v18 = 1;
      }
      v19 = __ldxr((unsigned __int8 *)v13);
      if (v19 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v13))
        {
          if (v16)
            goto LABEL_28;
LABEL_24:
          if (v17)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          if (!v18)
            WTF::fastFree((WTF *)v13, v11);
          goto LABEL_28;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v13);
      if (v16)
        goto LABEL_28;
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t JSC::GenericTypedArrayView<JSC::Int32Adaptor>::tryCreate@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  result = JSC::ArrayBuffer::tryCreate();
  v5 = (_QWORD *)v13;
  if (v13)
  {
    if (*(_BYTE *)(v13 + 64) && (v12 = *(_QWORD *)(v13 + 32)) != 0)
      v6 = *(_QWORD *)(v12 + 32);
    else
      v6 = *(_QWORD *)(v13 + 48);
    if (a1 <= v6 >> 2)
    {
      WTF::fastMalloc((WTF *)0x28);
      result = JSC::ArrayBufferView::ArrayBufferView();
      v5 = (_QWORD *)v13;
      *a2 = result;
    }
    else
    {
      *a2 = 0;
    }
    v7 = *(_DWORD *)v5 == 2;
    *(_DWORD *)v5 -= 2;
    if (v7)
    {
      v8 = v5[10];
      if (v8)
      {
        *(_QWORD *)(v8 + 8) = 3;
        v5[10] = 0;
      }
      if ((v5[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v5 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v5 + 2));
      v10 = (WTF *)v5[1];
      if ((v10 & 1) == 0 && v10)
      {
        v11 = *(WTF **)v10;
        if (*(_QWORD *)v10)
        {
          *(_QWORD *)v10 = 0;
          *((_DWORD *)v10 + 2) = 0;
          WTF::fastFree(v11, v9);
        }
        WTF::fastFree(v10, v9);
      }
      return WTF::fastFree((WTF *)v5, v9);
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::WebGLRenderingContextBase::TypedList<JSC::GenericTypedArrayView<JSC::Int32Adaptor>,int>::data(void)::{lambda(WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Int32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Int32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Int32Adaptor>>> const&)#1},WebCore::WebGLRenderingContextBase::TypedList<JSC::GenericTypedArrayView<JSC::Int32Adaptor>,int>::data(void)::{lambda(WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Int32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Int32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Int32Adaptor>>>,WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = *a2;
  v3 = *(_QWORD *)(*a2 + 32);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (!v5 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
    return *(_QWORD *)(v2 + 24);
  if (!((v4 & 0x3FFFFFFFFLL) + v5))
    return 0;
  result = *(_QWORD *)(v2 + 24);
  if (result && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
    return (result & 0x3FFFFFFFFLL) + v5;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::WebGLRenderingContextBase::TypedList<JSC::GenericTypedArrayView<JSC::Int32Adaptor>,int>::data(void)::{lambda(WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Int32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Int32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Int32Adaptor>>> const&)#1},WebCore::WebGLRenderingContextBase::TypedList<JSC::GenericTypedArrayView<JSC::Int32Adaptor>,int>::data(void)::{lambda(WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Int32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Int32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Int32Adaptor>>>,WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::WebGLRenderingContextBase::TypedList<JSC::GenericTypedArrayView<JSC::Int32Adaptor>,int>::length(void)::{lambda(WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Int32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Int32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Int32Adaptor>>> const&)#1},WebCore::WebGLRenderingContextBase::TypedList<JSC::GenericTypedArrayView<JSC::Int32Adaptor>,int>::length(void)::{lambda(WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Int32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Int32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Int32Adaptor>>>,WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *a2;
  v3 = *(_QWORD *)(*a2 + 32);
  if (!v3)
    goto LABEL_21;
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    goto LABEL_21;
  v5 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v5 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v4 & 0x3FFFFFFFFLL) + v5))
    goto LABEL_21;
  v6 = *(_BYTE *)(v2 + 6);
  if ((v6 & 3) == 0)
  {
    v7 = *(_QWORD *)(v2 + 16);
    return v7 >> 2;
  }
  if (*(_BYTE *)(v3 + 64) && (v15 = *(_QWORD *)(v3 + 32)) != 0)
  {
    v9 = atomic_load((unint64_t *)(v15 + 32));
    v6 = *(_BYTE *)(v2 + 6);
  }
  else
  {
    v9 = *(_QWORD *)(v3 + 48);
  }
  v10 = *(_QWORD *)(v2 + 8);
  if ((v6 & 4) == 0)
  {
    v7 = *(_QWORD *)(v2 + 16);
    v11 = v7 + v10 <= v9 && v9 >= v10;
    if (v11)
      v7 = 0;
    return v7 >> 2;
  }
  v11 = v9 >= v10;
  v12 = v9 - v10;
  if (v11)
  {
LABEL_21:
    v7 = 0;
    return v7 >> 2;
  }
  v13 = *(_BYTE *)(v2 + 4) - 4;
  if (v13 > 7u)
    LOBYTE(v14) = 0;
  else
    v14 = qword_1969F16F0[(char)v13];
  v7 = (-1 << v14) & v12;
  return v7 >> 2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::WebGLRenderingContextBase::TypedList<JSC::GenericTypedArrayView<JSC::Int32Adaptor>,int>::length(void)::{lambda(WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Int32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Int32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Int32Adaptor>>> const&)#1},WebCore::WebGLRenderingContextBase::TypedList<JSC::GenericTypedArrayView<JSC::Int32Adaptor>,int>::length(void)::{lambda(WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Int32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Int32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Int32Adaptor>>>,WTF::Vector<int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 12);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::WebGLRenderingContextBase::TypedList<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>,unsigned int>::data(void)::{lambda(WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>>> const&)#1},WebCore::WebGLRenderingContextBase::TypedList<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>,unsigned int>::data(void)::{lambda(WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>>>,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = *a2;
  v3 = *(_QWORD *)(*a2 + 32);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (!v5 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
    return *(_QWORD *)(v2 + 24);
  if (!((v4 & 0x3FFFFFFFFLL) + v5))
    return 0;
  result = *(_QWORD *)(v2 + 24);
  if (result && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
    return (result & 0x3FFFFFFFFLL) + v5;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::WebGLRenderingContextBase::TypedList<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>,unsigned int>::data(void)::{lambda(WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>>> const&)#1},WebCore::WebGLRenderingContextBase::TypedList<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>,unsigned int>::data(void)::{lambda(WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>>>,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::WebGLRenderingContextBase::TypedList<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>,unsigned int>::length(void)::{lambda(WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>>> const&)#1},WebCore::WebGLRenderingContextBase::TypedList<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>,unsigned int>::length(void)::{lambda(WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>>>,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *a2;
  v3 = *(_QWORD *)(*a2 + 32);
  if (!v3)
    goto LABEL_21;
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    goto LABEL_21;
  v5 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v5 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v4 & 0x3FFFFFFFFLL) + v5))
    goto LABEL_21;
  v6 = *(_BYTE *)(v2 + 6);
  if ((v6 & 3) == 0)
  {
    v7 = *(_QWORD *)(v2 + 16);
    return v7 >> 2;
  }
  if (*(_BYTE *)(v3 + 64) && (v15 = *(_QWORD *)(v3 + 32)) != 0)
  {
    v9 = atomic_load((unint64_t *)(v15 + 32));
    v6 = *(_BYTE *)(v2 + 6);
  }
  else
  {
    v9 = *(_QWORD *)(v3 + 48);
  }
  v10 = *(_QWORD *)(v2 + 8);
  if ((v6 & 4) == 0)
  {
    v7 = *(_QWORD *)(v2 + 16);
    v11 = v7 + v10 <= v9 && v9 >= v10;
    if (v11)
      v7 = 0;
    return v7 >> 2;
  }
  v11 = v9 >= v10;
  v12 = v9 - v10;
  if (v11)
  {
LABEL_21:
    v7 = 0;
    return v7 >> 2;
  }
  v13 = *(_BYTE *)(v2 + 4) - 4;
  if (v13 > 7u)
    LOBYTE(v14) = 0;
  else
    v14 = qword_1969F16F0[(char)v13];
  v7 = (-1 << v14) & v12;
  return v7 >> 2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::WebGLRenderingContextBase::TypedList<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>,unsigned int>::length(void)::{lambda(WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>>> const&)#1},WebCore::WebGLRenderingContextBase::TypedList<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>,unsigned int>::length(void)::{lambda(WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Uint32Adaptor>>>,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 12);
}

unint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::WebGLRenderingContextBase::TypedList<JSC::GenericTypedArrayView<JSC::Float32Adaptor>,float>::length(void)::{lambda(WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Float32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Float32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Float32Adaptor>>> const&)#1},WebCore::WebGLRenderingContextBase::TypedList<JSC::GenericTypedArrayView<JSC::Float32Adaptor>,float>::length(void)::{lambda(WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Float32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Float32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Float32Adaptor>>>,WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *a2;
  v3 = *(_QWORD *)(*a2 + 32);
  if (!v3)
    goto LABEL_21;
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    goto LABEL_21;
  v5 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (v5 && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]) && !((v4 & 0x3FFFFFFFFLL) + v5))
    goto LABEL_21;
  v6 = *(_BYTE *)(v2 + 6);
  if ((v6 & 3) == 0)
  {
    v7 = *(_QWORD *)(v2 + 16);
    return v7 >> 2;
  }
  if (*(_BYTE *)(v3 + 64) && (v15 = *(_QWORD *)(v3 + 32)) != 0)
  {
    v9 = atomic_load((unint64_t *)(v15 + 32));
    v6 = *(_BYTE *)(v2 + 6);
  }
  else
  {
    v9 = *(_QWORD *)(v3 + 48);
  }
  v10 = *(_QWORD *)(v2 + 8);
  if ((v6 & 4) == 0)
  {
    v7 = *(_QWORD *)(v2 + 16);
    v11 = v7 + v10 <= v9 && v9 >= v10;
    if (v11)
      v7 = 0;
    return v7 >> 2;
  }
  v11 = v9 >= v10;
  v12 = v9 - v10;
  if (v11)
  {
LABEL_21:
    v7 = 0;
    return v7 >> 2;
  }
  v13 = *(_BYTE *)(v2 + 4) - 4;
  if (v13 > 7u)
    LOBYTE(v14) = 0;
  else
    v14 = qword_1969F16F0[(char)v13];
  v7 = (-1 << v14) & v12;
  return v7 >> 2;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::WebGLRenderingContextBase::TypedList<JSC::GenericTypedArrayView<JSC::Float32Adaptor>,float>::length(void)::{lambda(WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Float32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Float32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Float32Adaptor>>> const&)#1},WebCore::WebGLRenderingContextBase::TypedList<JSC::GenericTypedArrayView<JSC::Float32Adaptor>,float>::length(void)::{lambda(WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Float32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Float32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Float32Adaptor>>>,WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 12);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::WebGLRenderingContextBase::TypedList<JSC::GenericTypedArrayView<JSC::Float32Adaptor>,float>::data(void)::{lambda(WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Float32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Float32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Float32Adaptor>>> const&)#1},WebCore::WebGLRenderingContextBase::TypedList<JSC::GenericTypedArrayView<JSC::Float32Adaptor>,float>::data(void)::{lambda(WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Float32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Float32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Float32Adaptor>>>,WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = *a2;
  v3 = *(_QWORD *)(*a2 + 32);
  if (!v3)
    return 0;
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56);
  if (!v5 || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0])
    return *(_QWORD *)(v2 + 24);
  if (!((v4 & 0x3FFFFFFFFLL) + v5))
    return 0;
  result = *(_QWORD *)(v2 + 24);
  if (result && (*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) || !*MEMORY[0x1E0CC10F0]))
    return (result & 0x3FFFFFFFFLL) + v5;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::WebGLRenderingContextBase::TypedList<JSC::GenericTypedArrayView<JSC::Float32Adaptor>,float>::data(void)::{lambda(WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Float32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Float32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Float32Adaptor>>> const&)#1},WebCore::WebGLRenderingContextBase::TypedList<JSC::GenericTypedArrayView<JSC::Float32Adaptor>,float>::data(void)::{lambda(WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<JSC::GenericTypedArrayView<JSC::Float32Adaptor>,WTF::RawPtrTraits<JSC::GenericTypedArrayView<JSC::Float32Adaptor>>,WTF::DefaultRefDerefTraits<JSC::GenericTypedArrayView<JSC::Float32Adaptor>>>,WTF::Vector<float,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>> const&>(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::WebGL2RenderingContext::endQuery(unsigned int)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  _DWORD *v2;

  v2 = (_DWORD *)a1[1];
  *a1 = &off_1E33DDF40;
  a1[1] = 0;
  if (v2)
  {
    if (v2[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
    else
      --v2[2];
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebGL2RenderingContext::endQuery(unsigned int)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  _DWORD *v3;

  v3 = (_DWORD *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E33DDF40;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::WebGL2RenderingContext::endQuery(unsigned int)::$_0,void>::call(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + 33) = 1;
  return result;
}

uint64_t JSC::GenericTypedArrayView<JSC::Uint32Adaptor>::tryCreate@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;

  result = JSC::ArrayBuffer::tryCreate();
  v5 = (_QWORD *)v13;
  if (v13)
  {
    if (*(_BYTE *)(v13 + 64) && (v12 = *(_QWORD *)(v13 + 32)) != 0)
      v6 = *(_QWORD *)(v12 + 32);
    else
      v6 = *(_QWORD *)(v13 + 48);
    if (a1 <= v6 >> 2)
    {
      WTF::fastMalloc((WTF *)0x28);
      result = JSC::ArrayBufferView::ArrayBufferView();
      v5 = (_QWORD *)v13;
      *a2 = result;
    }
    else
    {
      *a2 = 0;
    }
    v7 = *(_DWORD *)v5 == 2;
    *(_DWORD *)v5 -= 2;
    if (v7)
    {
      v8 = v5[10];
      if (v8)
      {
        *(_QWORD *)(v8 + 8) = 3;
        v5[10] = 0;
      }
      if ((v5[9] & 1) == 0)
        JSC::InlineWatchpointSet::freeFat((JSC::InlineWatchpointSet *)(v5 + 9));
      JSC::ArrayBufferContents::~ArrayBufferContents((JSC::ArrayBufferContents *)(v5 + 2));
      v10 = (WTF *)v5[1];
      if ((v10 & 1) == 0 && v10)
      {
        v11 = *(WTF **)v10;
        if (*(_QWORD *)v10)
        {
          *(_QWORD *)v10 = 0;
          *((_DWORD *)v10 + 2) = 0;
          WTF::fastFree(v11, v9);
        }
        WTF::fastFree(v10, v9);
      }
      return WTF::fastFree((WTF *)v5, v9);
    }
  }
  else
  {
    *a2 = 0;
  }
  return result;
}

unsigned int *WebCore::WebGLBuffer::create@<X0>(WebCore::WebGLBuffer *this@<X0>, WebCore::WebGLRenderingContextBase *a2@<X1>, unsigned int **a3@<X8>)
{
  _DWORD *v5;
  unsigned int *result;
  unsigned int v7;
  unsigned int *v8;
  void *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  v5 = (_DWORD *)*((_QWORD *)this + 11);
  if (v5)
    ++v5[2];
  result = (unsigned int *)(*(uint64_t (**)(_DWORD *, WebCore::WebGLRenderingContextBase *))(*(_QWORD *)v5 + 192))(v5, a2);
  v7 = result;
  if (v5[2] != 1)
  {
    --v5[2];
    if ((_DWORD)result)
      goto LABEL_5;
LABEL_14:
    v8 = 0;
    goto LABEL_15;
  }
  result = (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
  if (!v7)
    goto LABEL_14;
LABEL_5:
  result = (unsigned int *)WTF::fastMalloc((WTF *)0x28);
  v8 = result;
  result[2] = 1;
  *(_QWORD *)result = off_1E33DE398;
  if (!*((_QWORD *)this + 115))
  {
    v10 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = (char *)this + 8;
    result = (unsigned int *)*((_QWORD *)this + 115);
    *((_QWORD *)this + 115) = v10;
    if (result)
    {
      do
      {
        v11 = __ldaxr(result);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, result));
      if (!v12)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
    }
  }
  v13 = (unsigned int *)*((_QWORD *)this + 115);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  *((_QWORD *)v8 + 2) = v13;
  v8[6] = v7;
  v8[7] = 0;
  *((_BYTE *)v8 + 32) = 0;
  *(_QWORD *)v8 = off_1E33DDFA0;
  v8[9] = 0;
LABEL_15:
  *a3 = v8;
  return result;
}

void WebCore::WebGLBuffer::~WebGLBuffer(WebCore::WebGLBuffer *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v3 = *((_QWORD *)this + 2);
  if (!v3)
  {
    *(_QWORD *)this = off_1E33DE398;
    *((_QWORD *)this + 2) = 0;
    return;
  }
  if (*(_QWORD *)(v3 + 8))
  {
    WebCore::WebGLObject::runDestructor(this);
    v3 = *((_QWORD *)this + 2);
    *(_QWORD *)this = off_1E33DE398;
    *((_QWORD *)this + 2) = 0;
    if (!v3)
      return;
  }
  else
  {
    *(_QWORD *)this = off_1E33DE398;
    *((_QWORD *)this + 2) = 0;
  }
  do
  {
    v4 = __ldaxr((unsigned int *)v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, (unsigned int *)v3));
  if (!v5)
  {
    atomic_store(1u, (unsigned int *)v3);
    WTF::fastFree((WTF *)v3, a2);
  }
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 8))
    {
      WebCore::WebGLObject::runDestructor(this);
      v3 = *((_QWORD *)this + 2);
      *(_QWORD *)this = off_1E33DE398;
      *((_QWORD *)this + 2) = 0;
      if (!v3)
        goto LABEL_10;
    }
    else
    {
      *(_QWORD *)this = off_1E33DE398;
      *((_QWORD *)this + 2) = 0;
    }
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  else
  {
    *(_QWORD *)this = off_1E33DE398;
    *((_QWORD *)this + 2) = 0;
  }
LABEL_10:
  WTF::fastFree(this, a2);
}

uint64_t WebCore::WebGLBuffer::deleteObjectImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 248))(a3, a4);
}

WebCore::WebGLColorBufferFloat *WebCore::WebGLColorBufferFloat::WebGLColorBufferFloat(WebCore::WebGLColorBufferFloat *this, WebCore::WebGLRenderingContextBase *a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  WTF::StringImpl *v11;
  _DWORD *v13;
  char v14;
  WTF::StringImpl *v15;

  *((_QWORD *)this + 1) = 0x2300000001;
  *((_QWORD *)this + 2) = a2;
  *(_QWORD *)this = off_1E33DDFE8;
  v4 = (_DWORD *)*((_QWORD *)a2 + 11);
  if (v4)
    ++v4[2];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v4 + 1968))(v4, &v15);
  v6 = v15;
  v15 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v4 + 1968))(v4, &v15);
  v8 = v15;
  v15 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(_DWORD **__return_ptr, WebCore::WebGLRenderingContextBase *, WTF::StringImpl **))(*(_QWORD *)a2 + 48))(&v13, a2, &v15);
  if (v14)
  {
    v10 = v13;
    v13 = 0;
    if (v10)
    {
      if (v10[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
      else
        --v10[2];
    }
  }
  v11 = v15;
  v15 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
  else
    --v4[2];
  return this;
}

uint64_t WebCore::WebGLColorBufferFloat::supported(WebCore::WebGLColorBufferFloat *this, WebCore::GraphicsContextGL *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if ((*(unsigned int (**)(WebCore::WebGLColorBufferFloat *, WTF::StringImpl **))(*(_QWORD *)this + 1960))(this, &v9))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = (*(uint64_t (**)(WebCore::WebGLColorBufferFloat *, WTF::StringImpl **))(*(_QWORD *)this + 1960))(this, &v8);
    v5 = v8;
    v8 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  else
  {
    v4 = 0;
  }
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  return v4;
}

WebCore::WebGLCompressedTextureASTC *WebCore::WebGLCompressedTextureASTC::WebGLCompressedTextureASTC(WebCore::WebGLCompressedTextureASTC *this, WebCore::WebGLRenderingContextBase *a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  char v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  char v12;
  _DWORD *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  int **v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  int *v23;
  uint64_t v24;
  int v25;
  int *v26;
  uint64_t v27;
  int v28;
  int *v29;
  uint64_t v30;
  int v31;
  int *v32;
  uint64_t v33;
  int v34;
  int *v35;
  uint64_t v36;
  int v37;
  int *v38;
  uint64_t v39;
  int v40;
  int *v41;
  uint64_t v42;
  int v43;
  int *v44;
  uint64_t v45;
  int v46;
  int *v47;
  uint64_t v48;
  int v49;
  int *v50;
  uint64_t v51;
  int v52;
  int *v53;
  uint64_t v54;
  int v55;
  int *v56;
  uint64_t v57;
  int v58;
  int *v59;
  uint64_t v60;
  int v61;
  int *v62;
  uint64_t v63;
  int v64;
  int *v65;
  uint64_t v66;
  int v67;
  int *v68;
  uint64_t v69;
  int v70;
  int *v71;
  uint64_t v72;
  int v73;
  int *v74;
  uint64_t v75;
  int v76;
  int *v77;
  uint64_t v78;
  int v79;
  int *v80;
  uint64_t v81;
  int *v82;
  int v83;
  int *v84;
  uint64_t v85;
  int *v86;
  int v87;
  int *v88;
  uint64_t v89;
  int v90;
  int *v91;
  uint64_t v92;
  int v93;
  int *v94;
  uint64_t v95;
  int v96;
  int *v97;
  uint64_t v98;
  int v99;
  int *v100;
  uint64_t v101;
  int v102;
  int *v103;
  int *v104;
  uint64_t v105;
  int v106;
  int v107;
  int *v108;
  WTF::StringImpl *v110;

  *((_QWORD *)this + 1) = 0x2400000001;
  *((_QWORD *)this + 2) = a2;
  *(_QWORD *)this = off_1E33DE008;
  v4 = (_DWORD *)*((_QWORD *)a2 + 11);
  if (v4)
    ++v4[2];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v6 = (*(uint64_t (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v4 + 1960))(v4, &v110);
  v7 = v110;
  v110 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v5);
    else
      *(_DWORD *)v7 -= 2;
  }
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
  else
    --v4[2];
  *((_BYTE *)this + 24) = *((_BYTE *)this + 24) & 0xFE | v6;
  v8 = (_DWORD *)*((_QWORD *)a2 + 11);
  if (v8)
    ++v8[2];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v10 = (*(uint64_t (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v8 + 1960))(v8, &v110);
  v11 = v110;
  v110 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v9);
    else
      *(_DWORD *)v11 -= 2;
  }
  if (v8[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 16))(v8);
  else
    --v8[2];
  if (v10)
    v12 = 2;
  else
    v12 = 0;
  *((_BYTE *)this + 24) = *((_BYTE *)this + 24) & 0xFD | v12;
  v13 = (_DWORD *)*((_QWORD *)a2 + 11);
  if (v13)
    ++v13[2];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v13 + 1968))(v13, &v110);
  v15 = v110;
  v110 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v14);
    else
      *(_DWORD *)v15 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v13 + 1968))(v13, &v110);
  v17 = v110;
  v110 = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  LODWORD(v110) = 37808;
  v18 = (int **)((char *)a2 + 216);
  v19 = *((unsigned int *)a2 + 57);
  if ((_DWORD)v19)
  {
    v20 = 0;
    v21 = *v18;
    while (v21[v20] != 37808)
    {
      if (v19 == ++v20)
        goto LABEL_30;
    }
  }
  else
  {
LABEL_30:
    if ((_DWORD)v19 == *((_DWORD *)a2 + 56))
    {
      v23 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v19 + 1, (unint64_t)&v110);
      v19 = *((unsigned int *)a2 + 57);
      v21 = (int *)*((_QWORD *)a2 + 27);
      v22 = *v23;
    }
    else
    {
      v21 = *v18;
      v22 = 37808;
    }
    v21[v19] = v22;
    v19 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v19;
  }
  LODWORD(v110) = 37809;
  if ((_DWORD)v19)
  {
    v24 = 0;
    while (v21[v24] != 37809)
    {
      if (v19 == ++v24)
        goto LABEL_38;
    }
  }
  else
  {
LABEL_38:
    if ((_DWORD)v19 == *((_DWORD *)a2 + 56))
    {
      v26 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v19 + 1, (unint64_t)&v110);
      v19 = *((unsigned int *)a2 + 57);
      v21 = (int *)*((_QWORD *)a2 + 27);
      v25 = *v26;
    }
    else
    {
      v25 = 37809;
    }
    v21[v19] = v25;
    v19 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v19;
  }
  LODWORD(v110) = 37810;
  if ((_DWORD)v19)
  {
    v27 = 0;
    while (v21[v27] != 37810)
    {
      if (v19 == ++v27)
        goto LABEL_46;
    }
  }
  else
  {
LABEL_46:
    if ((_DWORD)v19 == *((_DWORD *)a2 + 56))
    {
      v29 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v19 + 1, (unint64_t)&v110);
      v19 = *((unsigned int *)a2 + 57);
      v21 = (int *)*((_QWORD *)a2 + 27);
      v28 = *v29;
    }
    else
    {
      v28 = 37810;
    }
    v21[v19] = v28;
    v19 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v19;
  }
  LODWORD(v110) = 37811;
  if ((_DWORD)v19)
  {
    v30 = 0;
    while (v21[v30] != 37811)
    {
      if (v19 == ++v30)
        goto LABEL_54;
    }
  }
  else
  {
LABEL_54:
    if ((_DWORD)v19 == *((_DWORD *)a2 + 56))
    {
      v32 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v19 + 1, (unint64_t)&v110);
      v19 = *((unsigned int *)a2 + 57);
      v21 = (int *)*((_QWORD *)a2 + 27);
      v31 = *v32;
    }
    else
    {
      v31 = 37811;
    }
    v21[v19] = v31;
    v19 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v19;
  }
  LODWORD(v110) = 37812;
  if ((_DWORD)v19)
  {
    v33 = 0;
    while (v21[v33] != 37812)
    {
      if (v19 == ++v33)
        goto LABEL_62;
    }
  }
  else
  {
LABEL_62:
    if ((_DWORD)v19 == *((_DWORD *)a2 + 56))
    {
      v35 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v19 + 1, (unint64_t)&v110);
      v19 = *((unsigned int *)a2 + 57);
      v21 = (int *)*((_QWORD *)a2 + 27);
      v34 = *v35;
    }
    else
    {
      v34 = 37812;
    }
    v21[v19] = v34;
    v19 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v19;
  }
  LODWORD(v110) = 37813;
  if ((_DWORD)v19)
  {
    v36 = 0;
    while (v21[v36] != 37813)
    {
      if (v19 == ++v36)
        goto LABEL_70;
    }
  }
  else
  {
LABEL_70:
    if ((_DWORD)v19 == *((_DWORD *)a2 + 56))
    {
      v38 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v19 + 1, (unint64_t)&v110);
      v19 = *((unsigned int *)a2 + 57);
      v21 = (int *)*((_QWORD *)a2 + 27);
      v37 = *v38;
    }
    else
    {
      v37 = 37813;
    }
    v21[v19] = v37;
    v19 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v19;
  }
  LODWORD(v110) = 37814;
  if ((_DWORD)v19)
  {
    v39 = 0;
    while (v21[v39] != 37814)
    {
      if (v19 == ++v39)
        goto LABEL_78;
    }
  }
  else
  {
LABEL_78:
    if ((_DWORD)v19 == *((_DWORD *)a2 + 56))
    {
      v41 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v19 + 1, (unint64_t)&v110);
      v19 = *((unsigned int *)a2 + 57);
      v21 = (int *)*((_QWORD *)a2 + 27);
      v40 = *v41;
    }
    else
    {
      v40 = 37814;
    }
    v21[v19] = v40;
    v19 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v19;
  }
  LODWORD(v110) = 37815;
  if ((_DWORD)v19)
  {
    v42 = 0;
    while (v21[v42] != 37815)
    {
      if (v19 == ++v42)
        goto LABEL_86;
    }
  }
  else
  {
LABEL_86:
    if ((_DWORD)v19 == *((_DWORD *)a2 + 56))
    {
      v44 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v19 + 1, (unint64_t)&v110);
      v19 = *((unsigned int *)a2 + 57);
      v21 = (int *)*((_QWORD *)a2 + 27);
      v43 = *v44;
    }
    else
    {
      v43 = 37815;
    }
    v21[v19] = v43;
    v19 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v19;
  }
  LODWORD(v110) = 37816;
  if ((_DWORD)v19)
  {
    v45 = 0;
    while (v21[v45] != 37816)
    {
      if (v19 == ++v45)
        goto LABEL_94;
    }
  }
  else
  {
LABEL_94:
    if ((_DWORD)v19 == *((_DWORD *)a2 + 56))
    {
      v47 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v19 + 1, (unint64_t)&v110);
      v19 = *((unsigned int *)a2 + 57);
      v21 = (int *)*((_QWORD *)a2 + 27);
      v46 = *v47;
    }
    else
    {
      v46 = 37816;
    }
    v21[v19] = v46;
    v19 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v19;
  }
  LODWORD(v110) = 37817;
  if ((_DWORD)v19)
  {
    v48 = 0;
    while (v21[v48] != 37817)
    {
      if (v19 == ++v48)
        goto LABEL_102;
    }
  }
  else
  {
LABEL_102:
    if ((_DWORD)v19 == *((_DWORD *)a2 + 56))
    {
      v50 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v19 + 1, (unint64_t)&v110);
      v19 = *((unsigned int *)a2 + 57);
      v21 = (int *)*((_QWORD *)a2 + 27);
      v49 = *v50;
    }
    else
    {
      v49 = 37817;
    }
    v21[v19] = v49;
    v19 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v19;
  }
  LODWORD(v110) = 37818;
  if ((_DWORD)v19)
  {
    v51 = 0;
    while (v21[v51] != 37818)
    {
      if (v19 == ++v51)
        goto LABEL_110;
    }
  }
  else
  {
LABEL_110:
    if ((_DWORD)v19 == *((_DWORD *)a2 + 56))
    {
      v53 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v19 + 1, (unint64_t)&v110);
      v19 = *((unsigned int *)a2 + 57);
      v21 = (int *)*((_QWORD *)a2 + 27);
      v52 = *v53;
    }
    else
    {
      v52 = 37818;
    }
    v21[v19] = v52;
    v19 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v19;
  }
  LODWORD(v110) = 37819;
  if ((_DWORD)v19)
  {
    v54 = 0;
    while (v21[v54] != 37819)
    {
      if (v19 == ++v54)
        goto LABEL_118;
    }
  }
  else
  {
LABEL_118:
    if ((_DWORD)v19 == *((_DWORD *)a2 + 56))
    {
      v56 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v19 + 1, (unint64_t)&v110);
      v19 = *((unsigned int *)a2 + 57);
      v21 = (int *)*((_QWORD *)a2 + 27);
      v55 = *v56;
    }
    else
    {
      v55 = 37819;
    }
    v21[v19] = v55;
    v19 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v19;
  }
  LODWORD(v110) = 37820;
  if ((_DWORD)v19)
  {
    v57 = 0;
    while (v21[v57] != 37820)
    {
      if (v19 == ++v57)
        goto LABEL_126;
    }
  }
  else
  {
LABEL_126:
    if ((_DWORD)v19 == *((_DWORD *)a2 + 56))
    {
      v59 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v19 + 1, (unint64_t)&v110);
      v19 = *((unsigned int *)a2 + 57);
      v21 = (int *)*((_QWORD *)a2 + 27);
      v58 = *v59;
    }
    else
    {
      v58 = 37820;
    }
    v21[v19] = v58;
    v19 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v19;
  }
  LODWORD(v110) = 37821;
  if ((_DWORD)v19)
  {
    v60 = 0;
    while (v21[v60] != 37821)
    {
      if (v19 == ++v60)
        goto LABEL_134;
    }
  }
  else
  {
LABEL_134:
    if ((_DWORD)v19 == *((_DWORD *)a2 + 56))
    {
      v62 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v19 + 1, (unint64_t)&v110);
      v19 = *((unsigned int *)a2 + 57);
      v21 = (int *)*((_QWORD *)a2 + 27);
      v61 = *v62;
    }
    else
    {
      v61 = 37821;
    }
    v21[v19] = v61;
    v19 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v19;
  }
  LODWORD(v110) = 37840;
  if ((_DWORD)v19)
  {
    v63 = 0;
    while (v21[v63] != 37840)
    {
      if (v19 == ++v63)
        goto LABEL_142;
    }
  }
  else
  {
LABEL_142:
    if ((_DWORD)v19 == *((_DWORD *)a2 + 56))
    {
      v65 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v19 + 1, (unint64_t)&v110);
      v19 = *((unsigned int *)a2 + 57);
      v21 = (int *)*((_QWORD *)a2 + 27);
      v64 = *v65;
    }
    else
    {
      v64 = 37840;
    }
    v21[v19] = v64;
    v19 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v19;
  }
  LODWORD(v110) = 37841;
  if ((_DWORD)v19)
  {
    v66 = 0;
    while (v21[v66] != 37841)
    {
      if (v19 == ++v66)
        goto LABEL_150;
    }
  }
  else
  {
LABEL_150:
    if ((_DWORD)v19 == *((_DWORD *)a2 + 56))
    {
      v68 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v19 + 1, (unint64_t)&v110);
      v19 = *((unsigned int *)a2 + 57);
      v21 = (int *)*((_QWORD *)a2 + 27);
      v67 = *v68;
    }
    else
    {
      v67 = 37841;
    }
    v21[v19] = v67;
    v19 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v19;
  }
  LODWORD(v110) = 37842;
  if ((_DWORD)v19)
  {
    v69 = 0;
    while (v21[v69] != 37842)
    {
      if (v19 == ++v69)
        goto LABEL_158;
    }
  }
  else
  {
LABEL_158:
    if ((_DWORD)v19 == *((_DWORD *)a2 + 56))
    {
      v71 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v19 + 1, (unint64_t)&v110);
      v19 = *((unsigned int *)a2 + 57);
      v21 = (int *)*((_QWORD *)a2 + 27);
      v70 = *v71;
    }
    else
    {
      v70 = 37842;
    }
    v21[v19] = v70;
    v19 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v19;
  }
  LODWORD(v110) = 37843;
  if ((_DWORD)v19)
  {
    v72 = 0;
    while (v21[v72] != 37843)
    {
      if (v19 == ++v72)
        goto LABEL_166;
    }
  }
  else
  {
LABEL_166:
    if ((_DWORD)v19 == *((_DWORD *)a2 + 56))
    {
      v74 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v19 + 1, (unint64_t)&v110);
      v19 = *((unsigned int *)a2 + 57);
      v21 = (int *)*((_QWORD *)a2 + 27);
      v73 = *v74;
    }
    else
    {
      v73 = 37843;
    }
    v21[v19] = v73;
    v19 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v19;
  }
  LODWORD(v110) = 37844;
  if ((_DWORD)v19)
  {
    v75 = 0;
    while (v21[v75] != 37844)
    {
      if (v19 == ++v75)
        goto LABEL_174;
    }
  }
  else
  {
LABEL_174:
    if ((_DWORD)v19 == *((_DWORD *)a2 + 56))
    {
      v77 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v19 + 1, (unint64_t)&v110);
      v19 = *((unsigned int *)a2 + 57);
      v21 = (int *)*((_QWORD *)a2 + 27);
      v76 = *v77;
    }
    else
    {
      v76 = 37844;
    }
    v21[v19] = v76;
    v19 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v19;
  }
  LODWORD(v110) = 37845;
  if ((_DWORD)v19)
  {
    v78 = 0;
    while (v21[v78] != 37845)
    {
      if (v19 == ++v78)
        goto LABEL_182;
    }
  }
  else
  {
LABEL_182:
    if ((_DWORD)v19 == *((_DWORD *)a2 + 56))
    {
      v80 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v19 + 1, (unint64_t)&v110);
      v19 = *((unsigned int *)a2 + 57);
      v21 = (int *)*((_QWORD *)a2 + 27);
      v79 = *v80;
    }
    else
    {
      v79 = 37845;
    }
    v21[v19] = v79;
    v19 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v19;
  }
  LODWORD(v110) = 37846;
  if ((_DWORD)v19)
  {
    v81 = 0;
    while (v21[v81] != 37846)
    {
      if (v19 == ++v81)
        goto LABEL_190;
    }
  }
  else
  {
LABEL_190:
    if ((_DWORD)v19 == *((_DWORD *)a2 + 56))
    {
      v84 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v19 + 1, (unint64_t)&v110);
      v19 = *((unsigned int *)a2 + 57);
      v82 = (int *)*((_QWORD *)a2 + 27);
      v83 = *v84;
    }
    else
    {
      v82 = *v18;
      v83 = 37846;
    }
    v82[v19] = v83;
    v19 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v19;
  }
  LODWORD(v110) = 37847;
  if ((_DWORD)v19)
  {
    v85 = 0;
    v86 = *v18;
    while (v86[v85] != 37847)
    {
      if (v19 == ++v85)
        goto LABEL_198;
    }
  }
  else
  {
LABEL_198:
    if ((_DWORD)v19 == *((_DWORD *)a2 + 56))
    {
      v88 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v19 + 1, (unint64_t)&v110);
      v19 = *((unsigned int *)a2 + 57);
      v86 = (int *)*((_QWORD *)a2 + 27);
      v87 = *v88;
    }
    else
    {
      v86 = *v18;
      v87 = 37847;
    }
    v86[v19] = v87;
    v19 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v19;
  }
  LODWORD(v110) = 37848;
  if ((_DWORD)v19)
  {
    v89 = 0;
    while (v86[v89] != 37848)
    {
      if (v19 == ++v89)
        goto LABEL_206;
    }
  }
  else
  {
LABEL_206:
    if ((_DWORD)v19 == *((_DWORD *)a2 + 56))
    {
      v91 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v19 + 1, (unint64_t)&v110);
      v19 = *((unsigned int *)a2 + 57);
      v86 = (int *)*((_QWORD *)a2 + 27);
      v90 = *v91;
    }
    else
    {
      v90 = 37848;
    }
    v86[v19] = v90;
    v19 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v19;
  }
  LODWORD(v110) = 37849;
  if ((_DWORD)v19)
  {
    v92 = 0;
    while (v86[v92] != 37849)
    {
      if (v19 == ++v92)
        goto LABEL_214;
    }
  }
  else
  {
LABEL_214:
    if ((_DWORD)v19 == *((_DWORD *)a2 + 56))
    {
      v94 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v19 + 1, (unint64_t)&v110);
      v19 = *((unsigned int *)a2 + 57);
      v86 = (int *)*((_QWORD *)a2 + 27);
      v93 = *v94;
    }
    else
    {
      v93 = 37849;
    }
    v86[v19] = v93;
    v19 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v19;
  }
  LODWORD(v110) = 37850;
  if ((_DWORD)v19)
  {
    v95 = 0;
    while (v86[v95] != 37850)
    {
      if (v19 == ++v95)
        goto LABEL_222;
    }
  }
  else
  {
LABEL_222:
    if ((_DWORD)v19 == *((_DWORD *)a2 + 56))
    {
      v97 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v19 + 1, (unint64_t)&v110);
      v19 = *((unsigned int *)a2 + 57);
      v86 = (int *)*((_QWORD *)a2 + 27);
      v96 = *v97;
    }
    else
    {
      v96 = 37850;
    }
    v86[v19] = v96;
    v19 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v19;
  }
  LODWORD(v110) = 37851;
  if ((_DWORD)v19)
  {
    v98 = 0;
    while (v86[v98] != 37851)
    {
      if (v19 == ++v98)
        goto LABEL_230;
    }
  }
  else
  {
LABEL_230:
    if ((_DWORD)v19 == *((_DWORD *)a2 + 56))
    {
      v100 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v19 + 1, (unint64_t)&v110);
      v19 = *((unsigned int *)a2 + 57);
      v86 = (int *)*((_QWORD *)a2 + 27);
      v99 = *v100;
    }
    else
    {
      v99 = 37851;
    }
    v86[v19] = v99;
    v19 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v19;
  }
  LODWORD(v110) = 37852;
  if ((_DWORD)v19)
  {
    v101 = 0;
    while (v86[v101] != 37852)
    {
      if (v19 == ++v101)
        goto LABEL_238;
    }
  }
  else
  {
LABEL_238:
    if ((_DWORD)v19 == *((_DWORD *)a2 + 56))
    {
      v103 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v19 + 1, (unint64_t)&v110);
      v19 = *((unsigned int *)a2 + 57);
      v86 = (int *)*((_QWORD *)a2 + 27);
      v102 = *v103;
    }
    else
    {
      v102 = 37852;
    }
    v86[v19] = v102;
    v19 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v19;
  }
  LODWORD(v110) = 37853;
  if ((_DWORD)v19)
  {
    v104 = v86;
    v105 = v19;
    while (1)
    {
      v106 = *v104++;
      if (v106 == 37853)
        break;
      if (!--v105)
        goto LABEL_246;
    }
  }
  else
  {
LABEL_246:
    if ((_DWORD)v19 == *((_DWORD *)a2 + 56))
    {
      v108 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v19 + 1, (unint64_t)&v110);
      v19 = *((unsigned int *)a2 + 57);
      v86 = (int *)*((_QWORD *)a2 + 27);
      v107 = *v108;
    }
    else
    {
      v107 = 37853;
    }
    v86[v19] = v107;
    ++*((_DWORD *)a2 + 57);
  }
  if (v13[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 16))(v13);
  else
    --v13[2];
  return this;
}

uint64_t WebCore::WebGLCompressedTextureASTC::supported(WebCore::WebGLCompressedTextureASTC *this, WebCore::GraphicsContextGL *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (((*(uint64_t (**)(WebCore::WebGLCompressedTextureASTC *, WTF::StringImpl **))(*(_QWORD *)this + 1960))(this, &v9) & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = (*(uint64_t (**)(WebCore::WebGLCompressedTextureASTC *, WTF::StringImpl **))(*(_QWORD *)this + 1960))(this, &v8);
    v5 = v8;
    v8 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  return v4;
}

WebCore::WebGLCompressedTextureETC *WebCore::WebGLCompressedTextureETC::WebGLCompressedTextureETC(WebCore::WebGLCompressedTextureETC *this, WebCore::WebGLRenderingContextBase *a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int **v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  int *v12;
  uint64_t v13;
  int v14;
  int *v15;
  uint64_t v16;
  int v17;
  int *v18;
  uint64_t v19;
  int v20;
  int *v21;
  uint64_t v22;
  int v23;
  int *v24;
  uint64_t v25;
  int v26;
  int *v27;
  uint64_t v28;
  int v29;
  int *v30;
  uint64_t v31;
  int v32;
  int *v33;
  uint64_t v34;
  int v35;
  int *v36;
  int *v37;
  uint64_t v38;
  int v39;
  WTF::StringImpl *v41;

  *((_QWORD *)this + 1) = 0x2500000001;
  *((_QWORD *)this + 2) = a2;
  *(_QWORD *)this = off_1E33DE028;
  v4 = (_DWORD *)*((_QWORD *)a2 + 11);
  if (v4)
    ++v4[2];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v4 + 1968))(v4, &v41);
  v6 = v41;
  v41 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
  else
    --v4[2];
  LODWORD(v41) = 37488;
  v7 = (int **)((char *)a2 + 216);
  v8 = *((unsigned int *)a2 + 57);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = *v7;
    while (v10[v9] != 37488)
    {
      if (v8 == ++v9)
        goto LABEL_12;
    }
  }
  else
  {
LABEL_12:
    if ((_DWORD)v8 == *((_DWORD *)a2 + 56))
    {
      v12 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v8 + 1, (unint64_t)&v41);
      v8 = *((unsigned int *)a2 + 57);
      v10 = (int *)*((_QWORD *)a2 + 27);
      v11 = *v12;
    }
    else
    {
      v10 = *v7;
      v11 = 37488;
    }
    v10[v8] = v11;
    v8 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v8;
  }
  LODWORD(v41) = 37489;
  if ((_DWORD)v8)
  {
    v13 = 0;
    while (v10[v13] != 37489)
    {
      if (v8 == ++v13)
        goto LABEL_20;
    }
  }
  else
  {
LABEL_20:
    if ((_DWORD)v8 == *((_DWORD *)a2 + 56))
    {
      v15 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v8 + 1, (unint64_t)&v41);
      v8 = *((unsigned int *)a2 + 57);
      v10 = (int *)*((_QWORD *)a2 + 27);
      v14 = *v15;
    }
    else
    {
      v14 = 37489;
    }
    v10[v8] = v14;
    v8 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v8;
  }
  LODWORD(v41) = 37490;
  if ((_DWORD)v8)
  {
    v16 = 0;
    while (v10[v16] != 37490)
    {
      if (v8 == ++v16)
        goto LABEL_28;
    }
  }
  else
  {
LABEL_28:
    if ((_DWORD)v8 == *((_DWORD *)a2 + 56))
    {
      v18 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v8 + 1, (unint64_t)&v41);
      v8 = *((unsigned int *)a2 + 57);
      v10 = (int *)*((_QWORD *)a2 + 27);
      v17 = *v18;
    }
    else
    {
      v17 = 37490;
    }
    v10[v8] = v17;
    v8 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v8;
  }
  LODWORD(v41) = 37491;
  if ((_DWORD)v8)
  {
    v19 = 0;
    while (v10[v19] != 37491)
    {
      if (v8 == ++v19)
        goto LABEL_36;
    }
  }
  else
  {
LABEL_36:
    if ((_DWORD)v8 == *((_DWORD *)a2 + 56))
    {
      v21 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v8 + 1, (unint64_t)&v41);
      v8 = *((unsigned int *)a2 + 57);
      v10 = (int *)*((_QWORD *)a2 + 27);
      v20 = *v21;
    }
    else
    {
      v20 = 37491;
    }
    v10[v8] = v20;
    v8 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v8;
  }
  LODWORD(v41) = 37492;
  if ((_DWORD)v8)
  {
    v22 = 0;
    while (v10[v22] != 37492)
    {
      if (v8 == ++v22)
        goto LABEL_44;
    }
  }
  else
  {
LABEL_44:
    if ((_DWORD)v8 == *((_DWORD *)a2 + 56))
    {
      v24 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v8 + 1, (unint64_t)&v41);
      v8 = *((unsigned int *)a2 + 57);
      v10 = (int *)*((_QWORD *)a2 + 27);
      v23 = *v24;
    }
    else
    {
      v23 = 37492;
    }
    v10[v8] = v23;
    v8 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v8;
  }
  LODWORD(v41) = 37493;
  if ((_DWORD)v8)
  {
    v25 = 0;
    while (v10[v25] != 37493)
    {
      if (v8 == ++v25)
        goto LABEL_52;
    }
  }
  else
  {
LABEL_52:
    if ((_DWORD)v8 == *((_DWORD *)a2 + 56))
    {
      v27 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v8 + 1, (unint64_t)&v41);
      v8 = *((unsigned int *)a2 + 57);
      v10 = (int *)*((_QWORD *)a2 + 27);
      v26 = *v27;
    }
    else
    {
      v26 = 37493;
    }
    v10[v8] = v26;
    v8 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v8;
  }
  LODWORD(v41) = 37494;
  if ((_DWORD)v8)
  {
    v28 = 0;
    while (v10[v28] != 37494)
    {
      if (v8 == ++v28)
        goto LABEL_60;
    }
  }
  else
  {
LABEL_60:
    if ((_DWORD)v8 == *((_DWORD *)a2 + 56))
    {
      v30 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v8 + 1, (unint64_t)&v41);
      v8 = *((unsigned int *)a2 + 57);
      v10 = (int *)*((_QWORD *)a2 + 27);
      v29 = *v30;
    }
    else
    {
      v29 = 37494;
    }
    v10[v8] = v29;
    v8 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v8;
  }
  LODWORD(v41) = 37495;
  if ((_DWORD)v8)
  {
    v31 = 0;
    while (v10[v31] != 37495)
    {
      if (v8 == ++v31)
        goto LABEL_68;
    }
  }
  else
  {
LABEL_68:
    if ((_DWORD)v8 == *((_DWORD *)a2 + 56))
    {
      v33 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v8 + 1, (unint64_t)&v41);
      v8 = *((unsigned int *)a2 + 57);
      v10 = (int *)*((_QWORD *)a2 + 27);
      v32 = *v33;
    }
    else
    {
      v32 = 37495;
    }
    v10[v8] = v32;
    v8 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v8;
  }
  LODWORD(v41) = 37496;
  if ((_DWORD)v8)
  {
    v34 = 0;
    while (v10[v34] != 37496)
    {
      if (v8 == ++v34)
        goto LABEL_76;
    }
  }
  else
  {
LABEL_76:
    if ((_DWORD)v8 == *((_DWORD *)a2 + 56))
    {
      v36 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v8 + 1, (unint64_t)&v41);
      v8 = *((unsigned int *)a2 + 57);
      v10 = (int *)*((_QWORD *)a2 + 27);
      v35 = *v36;
    }
    else
    {
      v35 = 37496;
    }
    v10[v8] = v35;
    v8 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v8;
  }
  LODWORD(v41) = 37497;
  if ((_DWORD)v8)
  {
    v37 = v10;
    v38 = v8;
    while (1)
    {
      v39 = *v37++;
      if (v39 == 37497)
        break;
      if (!--v38)
        goto LABEL_84;
    }
  }
  else
  {
LABEL_84:
    if ((_DWORD)v8 == *((_DWORD *)a2 + 56))
      *(_DWORD *)(*((_QWORD *)a2 + 27) + 4 * *((unsigned int *)a2 + 57)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v8 + 1, (unint64_t)&v41);
    else
      v10[v8] = 37497;
    ++*((_DWORD *)a2 + 57);
  }
  return this;
}

WebCore::WebGLCompressedTextureETC1 *WebCore::WebGLCompressedTextureETC1::WebGLCompressedTextureETC1(WebCore::WebGLCompressedTextureETC1 *this, WebCore::WebGLRenderingContextBase *a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int **v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int v11;
  int *v12;
  int v13;
  int *v14;
  WTF::StringImpl *v16;
  int v17;

  *((_QWORD *)this + 1) = 0x2600000001;
  *((_QWORD *)this + 2) = a2;
  *(_QWORD *)this = off_1E33DE048;
  v4 = (_DWORD *)*((_QWORD *)a2 + 11);
  if (v4)
    ++v4[2];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v4 + 1968))(v4, &v16);
  v6 = v16;
  v16 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
  else
    --v4[2];
  v17 = 36196;
  v7 = (int **)((char *)a2 + 216);
  v8 = *((unsigned int *)a2 + 57);
  if ((_DWORD)v8)
  {
    v9 = *v7;
    v10 = *((unsigned int *)a2 + 57);
    while (1)
    {
      v11 = *v9++;
      if (v11 == 36196)
        break;
      if (!--v10)
        goto LABEL_12;
    }
  }
  else
  {
LABEL_12:
    if ((_DWORD)v8 == *((_DWORD *)a2 + 56))
    {
      v14 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v7, v8 + 1, (unint64_t)&v17);
      v8 = *((unsigned int *)a2 + 57);
      v12 = (int *)*((_QWORD *)a2 + 27);
      v13 = *v14;
    }
    else
    {
      v12 = *v7;
      v13 = 36196;
    }
    v12[v8] = v13;
    ++*((_DWORD *)a2 + 57);
  }
  return this;
}

WebCore::WebGLCompressedTexturePVRTC *WebCore::WebGLCompressedTexturePVRTC::WebGLCompressedTexturePVRTC(WebCore::WebGLCompressedTexturePVRTC *this, WebCore::WebGLRenderingContextBase *a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int **v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  int *v12;
  uint64_t v13;
  int v14;
  int *v15;
  uint64_t v16;
  int v17;
  int *v18;
  int *v19;
  uint64_t v20;
  int v21;
  WTF::StringImpl *v23;

  *((_QWORD *)this + 1) = 0x2700000001;
  *((_QWORD *)this + 2) = a2;
  *(_QWORD *)this = off_1E33DE068;
  v4 = (_DWORD *)*((_QWORD *)a2 + 11);
  if (v4)
    ++v4[2];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v4 + 1968))(v4, &v23);
  v6 = v23;
  v23 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
  else
    --v4[2];
  LODWORD(v23) = 35840;
  v7 = (int **)((char *)a2 + 216);
  v8 = *((unsigned int *)a2 + 57);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = *v7;
    while (v10[v9] != 35840)
    {
      if (v8 == ++v9)
        goto LABEL_12;
    }
  }
  else
  {
LABEL_12:
    if ((_DWORD)v8 == *((_DWORD *)a2 + 56))
    {
      v12 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v8 + 1, (unint64_t)&v23);
      v8 = *((unsigned int *)a2 + 57);
      v10 = (int *)*((_QWORD *)a2 + 27);
      v11 = *v12;
    }
    else
    {
      v10 = *v7;
      v11 = 35840;
    }
    v10[v8] = v11;
    v8 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v8;
  }
  LODWORD(v23) = 35841;
  if ((_DWORD)v8)
  {
    v13 = 0;
    while (v10[v13] != 35841)
    {
      if (v8 == ++v13)
        goto LABEL_20;
    }
  }
  else
  {
LABEL_20:
    if ((_DWORD)v8 == *((_DWORD *)a2 + 56))
    {
      v15 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v8 + 1, (unint64_t)&v23);
      v8 = *((unsigned int *)a2 + 57);
      v10 = (int *)*((_QWORD *)a2 + 27);
      v14 = *v15;
    }
    else
    {
      v14 = 35841;
    }
    v10[v8] = v14;
    v8 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v8;
  }
  LODWORD(v23) = 35842;
  if ((_DWORD)v8)
  {
    v16 = 0;
    while (v10[v16] != 35842)
    {
      if (v8 == ++v16)
        goto LABEL_28;
    }
  }
  else
  {
LABEL_28:
    if ((_DWORD)v8 == *((_DWORD *)a2 + 56))
    {
      v18 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v8 + 1, (unint64_t)&v23);
      v8 = *((unsigned int *)a2 + 57);
      v10 = (int *)*((_QWORD *)a2 + 27);
      v17 = *v18;
    }
    else
    {
      v17 = 35842;
    }
    v10[v8] = v17;
    v8 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v8;
  }
  LODWORD(v23) = 35843;
  if ((_DWORD)v8)
  {
    v19 = v10;
    v20 = v8;
    while (1)
    {
      v21 = *v19++;
      if (v21 == 35843)
        break;
      if (!--v20)
        goto LABEL_36;
    }
  }
  else
  {
LABEL_36:
    if ((_DWORD)v8 == *((_DWORD *)a2 + 56))
      *(_DWORD *)(*((_QWORD *)a2 + 27) + 4 * *((unsigned int *)a2 + 57)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v8 + 1, (unint64_t)&v23);
    else
      v10[v8] = 35843;
    ++*((_DWORD *)a2 + 57);
  }
  return this;
}

WebCore::WebGLCompressedTextureS3TC *WebCore::WebGLCompressedTextureS3TC::WebGLCompressedTextureS3TC(WebCore::WebGLCompressedTextureS3TC *this, WebCore::WebGLRenderingContextBase *a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int **v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  int *v16;
  uint64_t v17;
  int v18;
  int *v19;
  uint64_t v20;
  int v21;
  int *v22;
  int *v23;
  uint64_t v24;
  int v25;
  WTF::StringImpl *v27;

  *((_QWORD *)this + 1) = 0x2800000001;
  *((_QWORD *)this + 2) = a2;
  *(_QWORD *)this = off_1E33DE088;
  v4 = (_DWORD *)*((_QWORD *)a2 + 11);
  if (v4)
    ++v4[2];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v4 + 1968))(v4, &v27);
  v6 = v27;
  v27 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v4 + 1968))(v4, &v27);
  v8 = v27;
  v27 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v4 + 1968))(v4, &v27);
  v10 = v27;
  v27 = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 2)
      WTF::StringImpl::destroy(v10, v9);
    else
      *(_DWORD *)v10 -= 2;
  }
  LODWORD(v27) = 33776;
  v11 = (int **)((char *)a2 + 216);
  v12 = *((unsigned int *)a2 + 57);
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = *v11;
    while (v14[v13] != 33776)
    {
      if (v12 == ++v13)
        goto LABEL_16;
    }
  }
  else
  {
LABEL_16:
    if ((_DWORD)v12 == *((_DWORD *)a2 + 56))
    {
      v16 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v12 + 1, (unint64_t)&v27);
      v12 = *((unsigned int *)a2 + 57);
      v14 = (int *)*((_QWORD *)a2 + 27);
      v15 = *v16;
    }
    else
    {
      v14 = *v11;
      v15 = 33776;
    }
    v14[v12] = v15;
    v12 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v12;
  }
  LODWORD(v27) = 33777;
  if ((_DWORD)v12)
  {
    v17 = 0;
    while (v14[v17] != 33777)
    {
      if (v12 == ++v17)
        goto LABEL_24;
    }
  }
  else
  {
LABEL_24:
    if ((_DWORD)v12 == *((_DWORD *)a2 + 56))
    {
      v19 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v12 + 1, (unint64_t)&v27);
      v12 = *((unsigned int *)a2 + 57);
      v14 = (int *)*((_QWORD *)a2 + 27);
      v18 = *v19;
    }
    else
    {
      v18 = 33777;
    }
    v14[v12] = v18;
    v12 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v12;
  }
  LODWORD(v27) = 33778;
  if ((_DWORD)v12)
  {
    v20 = 0;
    while (v14[v20] != 33778)
    {
      if (v12 == ++v20)
        goto LABEL_32;
    }
  }
  else
  {
LABEL_32:
    if ((_DWORD)v12 == *((_DWORD *)a2 + 56))
    {
      v22 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v12 + 1, (unint64_t)&v27);
      v12 = *((unsigned int *)a2 + 57);
      v14 = (int *)*((_QWORD *)a2 + 27);
      v21 = *v22;
    }
    else
    {
      v21 = 33778;
    }
    v14[v12] = v21;
    v12 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v12;
  }
  LODWORD(v27) = 33779;
  if ((_DWORD)v12)
  {
    v23 = v14;
    v24 = v12;
    while (1)
    {
      v25 = *v23++;
      if (v25 == 33779)
        break;
      if (!--v24)
        goto LABEL_40;
    }
  }
  else
  {
LABEL_40:
    if ((_DWORD)v12 == *((_DWORD *)a2 + 56))
      *(_DWORD *)(*((_QWORD *)a2 + 27) + 4 * *((unsigned int *)a2 + 57)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v12 + 1, (unint64_t)&v27);
    else
      v14[v12] = 33779;
    ++*((_DWORD *)a2 + 57);
  }
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
  else
    --v4[2];
  return this;
}

uint64_t WebCore::WebGLCompressedTextureS3TC::supported(WebCore::WebGLCompressedTextureS3TC *this, WebCore::GraphicsContextGL *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if ((*(unsigned int (**)(WebCore::WebGLCompressedTextureS3TC *, WTF::StringImpl **))(*(_QWORD *)this
                                                                                                 + 1960))(this, &v11))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    if ((*(unsigned int (**)(WebCore::WebGLCompressedTextureS3TC *, WTF::StringImpl **))(*(_QWORD *)this + 1960))(this, &v10))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v4 = (*(uint64_t (**)(WebCore::WebGLCompressedTextureS3TC *, WTF::StringImpl **))(*(_QWORD *)this
                                                                                                + 1960))(this, &v9);
      v5 = v9;
      v9 = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, v3);
        else
          *(_DWORD *)v5 -= 2;
      }
    }
    else
    {
      v4 = 0;
    }
    v6 = v10;
    v10 = 0;
    if (v6)
    {
      if (*(_DWORD *)v6 == 2)
        WTF::StringImpl::destroy(v6, v3);
      else
        *(_DWORD *)v6 -= 2;
    }
  }
  else
  {
    v4 = 0;
  }
  v7 = v11;
  v11 = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, v3);
    else
      *(_DWORD *)v7 -= 2;
  }
  return v4;
}

WebCore::WebGLCompressedTextureS3TCsRGB *WebCore::WebGLCompressedTextureS3TCsRGB::WebGLCompressedTextureS3TCsRGB(WebCore::WebGLCompressedTextureS3TCsRGB *this, WebCore::WebGLRenderingContextBase *a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  int **v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  int *v12;
  uint64_t v13;
  int v14;
  int *v15;
  uint64_t v16;
  int v17;
  int *v18;
  int *v19;
  uint64_t v20;
  int v21;
  WTF::StringImpl *v23;

  *((_QWORD *)this + 1) = 0x2900000001;
  *((_QWORD *)this + 2) = a2;
  *(_QWORD *)this = off_1E33DE118;
  v4 = (_DWORD *)*((_QWORD *)a2 + 11);
  if (v4)
    ++v4[2];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v4 + 1968))(v4, &v23);
  v6 = v23;
  v23 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
  else
    --v4[2];
  LODWORD(v23) = 35916;
  v7 = (int **)((char *)a2 + 216);
  v8 = *((unsigned int *)a2 + 57);
  if ((_DWORD)v8)
  {
    v9 = 0;
    v10 = *v7;
    while (v10[v9] != 35916)
    {
      if (v8 == ++v9)
        goto LABEL_12;
    }
  }
  else
  {
LABEL_12:
    if ((_DWORD)v8 == *((_DWORD *)a2 + 56))
    {
      v12 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v8 + 1, (unint64_t)&v23);
      v8 = *((unsigned int *)a2 + 57);
      v10 = (int *)*((_QWORD *)a2 + 27);
      v11 = *v12;
    }
    else
    {
      v10 = *v7;
      v11 = 35916;
    }
    v10[v8] = v11;
    v8 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v8;
  }
  LODWORD(v23) = 35917;
  if ((_DWORD)v8)
  {
    v13 = 0;
    while (v10[v13] != 35917)
    {
      if (v8 == ++v13)
        goto LABEL_20;
    }
  }
  else
  {
LABEL_20:
    if ((_DWORD)v8 == *((_DWORD *)a2 + 56))
    {
      v15 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v8 + 1, (unint64_t)&v23);
      v8 = *((unsigned int *)a2 + 57);
      v10 = (int *)*((_QWORD *)a2 + 27);
      v14 = *v15;
    }
    else
    {
      v14 = 35917;
    }
    v10[v8] = v14;
    v8 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v8;
  }
  LODWORD(v23) = 35918;
  if ((_DWORD)v8)
  {
    v16 = 0;
    while (v10[v16] != 35918)
    {
      if (v8 == ++v16)
        goto LABEL_28;
    }
  }
  else
  {
LABEL_28:
    if ((_DWORD)v8 == *((_DWORD *)a2 + 56))
    {
      v18 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v8 + 1, (unint64_t)&v23);
      v8 = *((unsigned int *)a2 + 57);
      v10 = (int *)*((_QWORD *)a2 + 27);
      v17 = *v18;
    }
    else
    {
      v17 = 35918;
    }
    v10[v8] = v17;
    v8 = (*((_DWORD *)a2 + 57) + 1);
    *((_DWORD *)a2 + 57) = v8;
  }
  LODWORD(v23) = 35919;
  if ((_DWORD)v8)
  {
    v19 = v10;
    v20 = v8;
    while (1)
    {
      v21 = *v19++;
      if (v21 == 35919)
        break;
      if (!--v20)
        goto LABEL_36;
    }
  }
  else
  {
LABEL_36:
    if ((_DWORD)v8 == *((_DWORD *)a2 + 56))
      *(_DWORD *)(*((_QWORD *)a2 + 27) + 4 * *((unsigned int *)a2 + 57)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)a2 + 216, v8 + 1, (unint64_t)&v23);
    else
      v10[v8] = 35919;
    ++*((_DWORD *)a2 + 57);
  }
  return this;
}

void WebCore::WebGLContextEvent::~WebGLContextEvent(WebCore::WebGLContextEvent *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::Event::~Event(this, a2);
}

{
  WTF::StringImpl *v3;
  bmalloc::api *v4;
  void *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::Event::~Event(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

WTF::StringImpl *WebCore::WebGLDebugShaders::getTranslatedShaderSource@<X0>(WTF::StringImpl *this@<X0>, WebCore::WebGLShader *a2@<X1>, _QWORD *a3@<X8>)
{
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  const char *v7;
  int v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;

  if (!*((_QWORD *)this + 2))
  {
    *a3 = 0;
    return this;
  }
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  v5 = (WTF::StringImpl *)*((_QWORD *)a2 + 2);
  if (v5)
  {
    v6 = *((_QWORD *)v5 + 1);
    if (v6)
      v5 = (WTF::StringImpl *)(v6 - 8);
    else
      v5 = 0;
  }
  if (v5 != v4)
  {
    v7 = "object does not belong to this context";
    v8 = 1282;
    v9 = 39;
LABEL_8:
    this = WebCore::WebGLRenderingContextBase::synthesizeGLError(v4, v8, (uint64_t)"getTranslatedShaderSource", 26, (uint64_t)v7, v9);
    v10 = (_DWORD *)*MEMORY[0x1E0CBF738];
    if (*MEMORY[0x1E0CBF738])
      *v10 += 2;
    *a3 = v10;
    return this;
  }
  if (!*((_DWORD *)a2 + 6))
  {
    v7 = "attempt to use a deleted object";
    v8 = 1281;
    v9 = 32;
    goto LABEL_8;
  }
  v11 = (_DWORD *)*((_QWORD *)v4 + 11);
  if (v11)
    ++v11[2];
  this = (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 1984))(v11);
  if (v11[2] == 1)
    return (WTF::StringImpl *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
  --v11[2];
  return this;
}

uint64_t WebCore::WebGLDefaultFramebuffer::create@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  _DWORD *v11;
  uint64_t result;

  v6 = WTF::fastMalloc((WTF *)0x18);
  *(_QWORD *)v6 = a1;
  *(_QWORD *)(v6 + 8) = 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v8 = *(_DWORD *)(v7 + 8);
    *(_DWORD *)(v7 + 8) = v8 + 1;
  }
  else
  {
    v8 = MEMORY[8] - 1;
  }
  v9 = *(_QWORD *)(v7 + 33);
  if (v8)
    *(_DWORD *)(v7 + 8) = v8;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  *(_BYTE *)(v6 + 16) = *(_BYTE *)(v6 + 16) & 0xFC | BYTE2(v9) & 1 | (v9 >> 7) & 2;
  if ((v9 & 0x10000000000) == 0)
  {
    v10 = (v9 & 0x10000) != 0 ? 17408 : 0x4000;
    *(_DWORD *)(v6 + 8) = v10;
    if (((v9 >> 7) & 2) != 0)
      *(_DWORD *)(v6 + 8) = v10 | 0x100;
  }
  *a3 = v6;
  v11 = *(_DWORD **)(*(_QWORD *)v6 + 88);
  if (v11)
    ++v11[2];
  result = (*(uint64_t (**)(_DWORD *, unint64_t, unint64_t))(*(_QWORD *)v11 + 2224))(v11, a2, HIDWORD(a2));
  if (v11[2] == 1)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 16))(v11);
  --v11[2];
  return result;
}

WTF *WebCore::WebGLDrawBuffers::drawBuffersWEBGL(WTF *result, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t (*v6)();
  unsigned int v7;
  int v8;
  _DWORD *v9;
  uint64_t i;
  uint64_t v11;
  unsigned int v12;
  const char *v14;
  int v15;

  if (*((_QWORD *)result + 2))
  {
    v3 = *((_QWORD *)result + 2);
    v4 = a2[3];
    v5 = *(unsigned int **)a2;
    if (*(_QWORD *)(v3 + 176))
      v6 = WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance;
    else
      v6 = 0;
    if (v6)
    {
      if ((*(int (**)(_QWORD))(*(_QWORD *)v3 + 144))(*((_QWORD *)result + 2)) < (int)v4)
        return WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v3, 1281, (uint64_t)"drawBuffersWEBGL", 17, (uint64_t)"more than max draw buffers", 27);
      if ((int)v4 < 1)
        return WebCore::WebGLFramebuffer::drawBuffers(*(_QWORD *)(v3 + 176), (WTF *)a2);
      for (i = 36064; ; ++i)
      {
        v12 = *v5++;
        v11 = v12;
        if (v12 && i != v11)
          break;
        if (!--v4)
          return WebCore::WebGLFramebuffer::drawBuffers(*(_QWORD *)(v3 + 176), (WTF *)a2);
      }
      v14 = "COLOR_ATTACHMENTi_EXT or NONE";
      return WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v3, 1282, (uint64_t)"drawBuffersWEBGL", 17, (uint64_t)v14, 30);
    }
    if ((_DWORD)v4 != 1)
    {
      v14 = "more or fewer than one buffer";
      return WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v3, 1282, (uint64_t)"drawBuffersWEBGL", 17, (uint64_t)v14, 30);
    }
    v7 = *v5;
    if (*v5 && v7 != 1029)
    {
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(*((WTF::StringImpl **)result + 2), 1282, (uint64_t)"drawBuffersWEBGL", 17, (uint64_t)"BACK or NONE", 13);
    }
    else
    {
      if (v7 == 1029)
        v8 = 36064;
      else
        v8 = 0;
      v15 = v8;
      v9 = *(_DWORD **)(v3 + 88);
      if (v9)
        ++v9[2];
      result = (WTF *)(*(uint64_t (**)(_DWORD *, int *, uint64_t))(*(_QWORD *)v9 + 1992))(v9, &v15, 1);
      if (v9[2] == 1)
        result = (WTF *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v9 + 16))(v9);
      else
        --v9[2];
      *(_DWORD *)(v3 + 288) = *v5;
    }
  }
  return result;
}

uint64_t WebCore::WebGLDrawInstancedBaseVertexBaseInstance::drawArraysInstancedBaseInstanceWEBGL(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __n128 a7, __n128 a8, __n128 a9, __n128 a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)();
  WTF::StringImpl *v21;
  unsigned int v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  _DWORD *v25;
  int32x2_t *v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)();
  uint64_t v37;
  float32x2_t v38;
  uint64_t v39;
  __int128 v40;
  char v41;
  uint64_t v42;

  if (*(_QWORD *)(this + 16))
  {
    v15 = *(_QWORD *)(this + 16);
    v16 = *(_QWORD *)(v15 + 144);
    if (*(_BYTE *)(v16 + 73))
    {
      if (!*(_BYTE *)(v16 + 72))
        return (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v15, 1282, (uint64_t)"drawArraysInstancedBaseInstanceWEBGL", 37, (uint64_t)"no buffer is bound to enabled attribute", 40);
    }
    else
    {
      v17 = *(unsigned int *)(v16 + 68);
      if ((_DWORD)v17)
      {
        v18 = 56 * v17;
        v19 = *(_QWORD *)(v16 + 56) + 8;
        while (1)
        {
          if (*(_BYTE *)(v19 - 8))
          {
            v20 = *(_QWORD *)v19
                ? WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance
                : 0;
            if (!v20 || !*(_DWORD *)(*(_QWORD *)v19 + 24))
              break;
          }
          v19 += 56;
          v18 -= 56;
          if (!v18)
            goto LABEL_14;
        }
        *(_WORD *)(v16 + 72) = 256;
        return (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v15, 1282, (uint64_t)"drawArraysInstancedBaseInstanceWEBGL", 37, (uint64_t)"no buffer is bound to enabled attribute", 40);
      }
LABEL_14:
      *(_WORD *)(v16 + 72) = 257;
    }
    v21 = *(WTF::StringImpl **)(v15 + 168);
    if (!v21
      || (v22 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter)) == 0
      || (v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 40) + 144))(*(_QWORD *)(v15 + 40))) == 0
      || (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) == 0
      || (v31 = *(_QWORD *)(v30 + 96)) == 0
      || (this = WebCore::InspectorCanvasAgent::isWebGLProgramDisabled(v31, v21), (this & 1) == 0))
    {
      WebCore::WebGLRenderingContextBase::clearIfComposited(v15, 0, 0, a7, a8, a9, a10);
      v37 = 0;
      v38 = 0;
      v39 = 0;
      v40 = xmmword_1969F12B0;
      v41 = 0;
      v23 = *(WTF::StringImpl **)(v15 + 168);
      if (v23
        && (v24 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter)) != 0
        && (v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 40)
                                                                                         + 144))(*(_QWORD *)(v15 + 40))) != 0
        && (v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33)) != 0
        && (v35 = *(_QWORD *)(v34 + 96)) != 0
        && WebCore::InspectorCanvasAgent::isWebGLProgramHighlighted(v35, v23)
        && (*(_QWORD *)(v15 + 176)
          ? (v36 = WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance)
          : (v36 = 0),
            !v36))
      {
        v42 = v15;
        WebCore::ScopedInspectorShaderProgramHighlight::showHighlight((WebCore::ScopedInspectorShaderProgramHighlight *)&v37);
      }
      else
      {
        v42 = 0;
      }
      v25 = *(_DWORD **)(v15 + 88);
      if (v25)
        ++v25[2];
      this = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25 + 2136))(v25, a2, a3, a4, a5, a6);
      if (v25[2] == 1)
        this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v25 + 16))(v25);
      else
        --v25[2];
      if (v42)
        this = WebCore::ScopedInspectorShaderProgramHighlight::hideHighlight((WebCore::ScopedInspectorShaderProgramHighlight *)&v37);
      if (!*(_BYTE *)(v15 + 425)
        && !(*(_QWORD *)(v15 + 176)
           ? WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance
           : 0))
      {
        *(_BYTE *)(v15 + 432) = 1;
        if (*(_BYTE *)(v15 + 434))
          *(_BYTE *)(v15 + 434) = 0;
        v27 = *(int32x2_t **)(v15 + 40);
        v37 = 0;
        v38 = vcvt_f32_s32(v27[1]);
        LOBYTE(v39) = 1;
        return (*(uint64_t (**)(int32x2_t *, uint64_t *, _QWORD))(*(_QWORD *)v27 + 104))(v27, &v37, 0);
      }
    }
  }
  return this;
}

uint64_t WebCore::WebGLDrawInstancedBaseVertexBaseInstance::drawElementsInstancedBaseVertexBaseInstanceWEBGL(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, __n128 a10, __n128 a11, __n128 a12)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)();
  WTF::StringImpl *v25;
  unsigned int v26;
  WTF::StringImpl *v27;
  unsigned int v28;
  _DWORD *v29;
  int32x2_t *v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)();
  uint64_t v41;
  float32x2_t v42;
  uint64_t v43;
  __int128 v44;
  char v45;
  uint64_t v46;

  if (*(_QWORD *)(this + 16))
  {
    v19 = *(_QWORD *)(this + 16);
    v20 = *(_QWORD *)(v19 + 144);
    if (*(_BYTE *)(v20 + 73))
    {
      if (!*(_BYTE *)(v20 + 72))
        return (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v19, 1282, (uint64_t)"drawElementsInstancedBaseVertexBaseInstanceWEBGL", 49, (uint64_t)"no buffer is bound to enabled attribute", 40);
    }
    else
    {
      v21 = *(unsigned int *)(v20 + 68);
      if ((_DWORD)v21)
      {
        v22 = 56 * v21;
        v23 = *(_QWORD *)(v20 + 56) + 8;
        while (1)
        {
          if (*(_BYTE *)(v23 - 8))
          {
            v24 = *(_QWORD *)v23
                ? WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance
                : 0;
            if (!v24 || !*(_DWORD *)(*(_QWORD *)v23 + 24))
              break;
          }
          v23 += 56;
          v22 -= 56;
          if (!v22)
            goto LABEL_14;
        }
        *(_WORD *)(v20 + 72) = 256;
        return (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v19, 1282, (uint64_t)"drawElementsInstancedBaseVertexBaseInstanceWEBGL", 49, (uint64_t)"no buffer is bound to enabled attribute", 40);
      }
LABEL_14:
      *(_WORD *)(v20 + 72) = 257;
    }
    v25 = *(WTF::StringImpl **)(v19 + 168);
    if (!v25
      || (v26 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter)) == 0
      || (v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v19 + 40) + 144))(*(_QWORD *)(v19 + 40))) == 0
      || (v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33)) == 0
      || (v35 = *(_QWORD *)(v34 + 96)) == 0
      || (this = WebCore::InspectorCanvasAgent::isWebGLProgramDisabled(v35, v25), (this & 1) == 0))
    {
      WebCore::WebGLRenderingContextBase::clearIfComposited(v19, 0, 0, a9, a10, a11, a12);
      v41 = 0;
      v42 = 0;
      v43 = 0;
      v44 = xmmword_1969F12B0;
      v45 = 0;
      v27 = *(WTF::StringImpl **)(v19 + 168);
      if (v27
        && (v28 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter)) != 0
        && (v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v19 + 40)
                                                                                         + 144))(*(_QWORD *)(v19 + 40))) != 0
        && (v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37)) != 0
        && (v39 = *(_QWORD *)(v38 + 96)) != 0
        && WebCore::InspectorCanvasAgent::isWebGLProgramHighlighted(v39, v27)
        && (*(_QWORD *)(v19 + 176)
          ? (v40 = WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance)
          : (v40 = 0),
            !v40))
      {
        v46 = v19;
        WebCore::ScopedInspectorShaderProgramHighlight::showHighlight((WebCore::ScopedInspectorShaderProgramHighlight *)&v41);
      }
      else
      {
        v46 = 0;
      }
      v29 = *(_DWORD **)(v19 + 88);
      if (v29)
        ++v29[2];
      this = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29 + 2144))(v29, a2, a3, a4, a5, a6, a7, a8);
      if (v29[2] == 1)
        this = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v29 + 16))(v29);
      else
        --v29[2];
      if (v46)
        this = WebCore::ScopedInspectorShaderProgramHighlight::hideHighlight((WebCore::ScopedInspectorShaderProgramHighlight *)&v41);
      if (!*(_BYTE *)(v19 + 425)
        && !(*(_QWORD *)(v19 + 176)
           ? WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance
           : 0))
      {
        *(_BYTE *)(v19 + 432) = 1;
        if (*(_BYTE *)(v19 + 434))
          *(_BYTE *)(v19 + 434) = 0;
        v31 = *(int32x2_t **)(v19 + 40);
        v41 = 0;
        v42 = vcvt_f32_s32(v31[1]);
        LOBYTE(v43) = 1;
        return (*(uint64_t (**)(int32x2_t *, uint64_t *, _QWORD))(*(_QWORD *)v31 + 104))(v31, &v41, 0);
      }
    }
  }
  return this;
}

unsigned int *WebCore::WebGLFramebuffer::create@<X0>(WebCore::WebGLFramebuffer *this@<X0>, WebCore::WebGLRenderingContextBase *a2@<X1>, unsigned int **a3@<X8>)
{
  _DWORD *v5;
  unsigned int *result;
  unsigned int v7;
  unsigned int *v8;
  void *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  v5 = (_DWORD *)*((_QWORD *)this + 11);
  if (v5)
    ++v5[2];
  result = (unsigned int *)(*(uint64_t (**)(_DWORD *, WebCore::WebGLRenderingContextBase *))(*(_QWORD *)v5 + 200))(v5, a2);
  v7 = result;
  if (v5[2] != 1)
  {
    --v5[2];
    if ((_DWORD)result)
      goto LABEL_5;
LABEL_14:
    v8 = 0;
    goto LABEL_15;
  }
  result = (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
  if (!v7)
    goto LABEL_14;
LABEL_5:
  result = (unsigned int *)WTF::fastMalloc((WTF *)0x58);
  v8 = result;
  result[2] = 1;
  *(_QWORD *)result = off_1E33DE398;
  if (!*((_QWORD *)this + 115))
  {
    v10 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = (char *)this + 8;
    result = (unsigned int *)*((_QWORD *)this + 115);
    *((_QWORD *)this + 115) = v10;
    if (result)
    {
      do
      {
        v11 = __ldaxr(result);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, result));
      if (!v12)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
    }
  }
  v13 = (unsigned int *)*((_QWORD *)this + 115);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  *((_QWORD *)v8 + 2) = v13;
  v8[6] = v7;
  v8[7] = 0;
  *((_BYTE *)v8 + 32) = 0;
  *(_QWORD *)v8 = off_1E33DE310;
  *((_QWORD *)v8 + 5) = 0;
  *((_BYTE *)v8 + 48) = 0;
  *(_OWORD *)(v8 + 14) = 0u;
  *(_OWORD *)(v8 + 18) = 0u;
LABEL_15:
  *a3 = v8;
  return result;
}

void WebCore::WebGLFramebuffer::~WebGLFramebuffer(WebCore::WebGLFramebuffer *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  char v13;

  v3 = *((_QWORD *)this + 2);
  if (v3 && *(_QWORD *)(v3 + 8))
    WebCore::WebGLObject::runDestructor(this);
  v4 = (WTF *)*((_QWORD *)this + 9);
  if (v4)
  {
    *((_QWORD *)this + 9) = 0;
    *((_DWORD *)this + 20) = 0;
    WTF::fastFree(v4, a2);
  }
  v5 = (WTF *)*((_QWORD *)this + 7);
  if (v5)
  {
    *((_QWORD *)this + 7) = 0;
    *((_DWORD *)this + 16) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = *((_QWORD *)this + 5);
  if (v6)
  {
    v7 = *(unsigned int *)(v6 - 4);
    if ((_DWORD)v7)
    {
      v8 = (_DWORD *)(v6 + 24);
      do
      {
        if (*(v8 - 6) != -1)
        {
          v9 = *v8;
          if ((_DWORD)v9 != -1)
            ((void (*)(char *, _DWORD *))off_1E33DE448[v9])(&v13, v8 - 4);
          *v8 = -1;
        }
        v8 += 8;
        --v7;
      }
      while (v7);
    }
    WTF::fastFree((WTF *)(v6 - 16), a2);
  }
  *(_QWORD *)this = off_1E33DE398;
  v10 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v10)
  {
    do
    {
      v11 = __ldaxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
    {
      atomic_store(1u, v10);
      WTF::fastFree((WTF *)v10, a2);
    }
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::WebGLFramebuffer::~WebGLFramebuffer(this, a2);
  WTF::fastFree(v2, v3);
}

WTF::Lock *WebCore::WebGLObject::runDestructor(WebCore::WebGLObject *this)
{
  uint64_t v2;
  uint64_t v3;
  WTF::Lock *result;
  unsigned __int8 v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  WTF::Lock *v12;
  char v13;

  v2 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
  if (v2)
    v3 = v2 - 8;
  else
    v3 = 0;
  result = (WTF::Lock *)(v3 + 96);
  v5 = atomic_load((unsigned __int8 *)(v3 + 96));
  if ((v5 & 1) != 0)
  {
    *((_BYTE *)this + 32) = 1;
    if (*((_DWORD *)this + 6))
    {
      v7 = *((_QWORD *)this + 2);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 8);
        if (v8)
        {
          if (!*((_DWORD *)this + 7))
          {
            if (!*(_QWORD *)(v8 + 80)
              || (result = (WTF::Lock *)(*(uint64_t (**)(WebCore::WebGLObject *, WTF::Lock **))(*(_QWORD *)this + 16))(this, &v12), !*((_DWORD *)this + 7)))
            {
              *((_DWORD *)this + 6) = 0;
            }
          }
        }
      }
    }
    return result;
  }
  v12 = result;
  v13 = 1;
  if (__ldaxr((unsigned __int8 *)result))
  {
    __clrex();
LABEL_15:
    result = (WTF::Lock *)MEMORY[0x19AEA534C]();
    goto LABEL_16;
  }
  if (__stxr(1u, (unsigned __int8 *)result))
    goto LABEL_15;
LABEL_16:
  *((_BYTE *)this + 32) = 1;
  if (*((_DWORD *)this + 6))
  {
    v9 = *((_QWORD *)this + 2);
    if (v9)
    {
      v10 = *(_QWORD *)(v9 + 8);
      if (v10)
      {
        if (!*((_DWORD *)this + 7))
        {
          if (!*(_QWORD *)(v10 + 80)
            || (result = (WTF::Lock *)(*(uint64_t (**)(WebCore::WebGLObject *, WTF::Lock **))(*(_QWORD *)this + 16))(this, &v12), !*((_DWORD *)this + 7)))
          {
            *((_DWORD *)this + 6) = 0;
          }
        }
      }
    }
  }
  if (v13)
  {
    result = v12;
    v11 = __ldxr((unsigned __int8 *)v12);
    if (v11 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v12))
        return result;
    }
    else
    {
      __clrex();
    }
    return (WTF::Lock *)WTF::Lock::unlockSlow(result);
  }
  return result;
}

uint64_t WebCore::WebGLFramebuffer::setAttachmentForBoundFramebuffer(WebCore::WebGLFramebuffer *a1, int a2, int a3, uint64_t a4)
{
  int v5;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _BYTE v22[16];
  int v23;
  _BYTE v24[16];
  int v25;
  int v26;
  int v27;
  _DWORD *v28;
  _QWORD *v29;
  int *v30;
  int *v31;
  _QWORD *v32;
  int *v33;
  int *v34;
  _QWORD *v35;
  int *v36;
  int *v37;
  _QWORD *v38;

  v5 = a3;
  v8 = *((_QWORD *)a1 + 5);
  if (v8)
    v9 = *(_DWORD *)(v8 - 12);
  else
    v9 = 0;
  v10 = *(_QWORD *)(*((_QWORD *)a1 + 2) + 8);
  if (v10)
    v11 = v10 - 8;
  else
    v11 = 0;
  v12 = *(_DWORD **)(v11 + 88);
  if (v12)
    ++v12[2];
  if (a3 == 33306)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v11 + 8) + 40))(v11 + 8))
    {
      v24[0] = 0;
      v25 = -1;
      v13 = *(unsigned int *)(a4 + 16);
      if ((_DWORD)v13 != -1)
      {
        ((void (*)(_QWORD **, _BYTE *, uint64_t))off_1E33DE460[v13])(&v29, v24, a4);
        v25 = v13;
      }
      WebCore::WebGLFramebuffer::setAttachmentInternal((uint64_t)a1, 36128, (uint64_t)v24);
      if (v25 != -1)
        ((void (*)(_QWORD **, _BYTE *))off_1E33DE448[v25])(&v29, v24);
      v25 = -1;
      v26 = 36128;
      v27 = a2;
      v28 = v12;
      v29 = &v28;
      v30 = &v27;
      v31 = &v26;
      v32 = &v28;
      v33 = &v27;
      v34 = &v26;
      v35 = &v28;
      v36 = &v27;
      v37 = &v26;
      v14 = *(unsigned int *)(a4 + 16);
      if ((_DWORD)v14 == -1)
        goto LABEL_32;
      v38 = &v29;
      ((void (*)(_QWORD **, uint64_t))off_1E33DE478[v14])(&v38, a4);
      v5 = 36096;
    }
    else
    {
      v5 = 33306;
    }
  }
  v22[0] = 0;
  v23 = -1;
  v15 = *(unsigned int *)(a4 + 16);
  if ((_DWORD)v15 != -1)
  {
    ((void (*)(_QWORD **, _BYTE *, uint64_t))off_1E33DE460[v15])(&v29, v22, a4);
    v23 = v15;
  }
  WebCore::WebGLFramebuffer::setAttachmentInternal((uint64_t)a1, v5, (uint64_t)v22);
  if (v23 != -1)
    ((void (*)(_QWORD **, _BYTE *))off_1E33DE448[v23])(&v29, v22);
  v23 = -1;
  v26 = v5;
  v27 = a2;
  v28 = v12;
  v29 = &v28;
  v30 = &v27;
  v31 = &v26;
  v32 = &v28;
  v33 = &v27;
  v34 = &v26;
  v35 = &v28;
  v36 = &v27;
  v37 = &v26;
  v16 = *(unsigned int *)(a4 + 16);
  if ((_DWORD)v16 == -1)
  {
LABEL_32:
    v19 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::WebGLFramebuffer::setAttachmentInternal(v19, v20, v21);
  }
  v38 = &v29;
  result = ((uint64_t (*)(_QWORD **, uint64_t))off_1E33DE478[v16])(&v38, a4);
  v18 = *((_QWORD *)a1 + 5);
  if (v18)
    LODWORD(v18) = *(_DWORD *)(v18 - 12);
  if (v9 != (_DWORD)v18)
    result = WebCore::WebGLFramebuffer::drawBuffersIfNecessary(a1, 0);
  if (v12)
  {
    if (v12[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v12 + 16))(v12);
    else
      --v12[2];
  }
  return result;
}

uint64_t WebCore::WebGLFramebuffer::setAttachmentInternal(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v9;
  uint64_t *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  _DWORD *v31;
  uint64_t v32;
  _BOOL4 v34;
  BOOL v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  WebCore::WebGLFramebuffer *v57;
  char v58;
  WTF::Lock *v59;
  char v60;
  _DWORD *v61;
  WTF::Lock **v62;
  _QWORD *v63;
  WTF::Lock **v64;
  _QWORD *v65;
  WTF::Lock **v66;
  _QWORD *v67;
  WTF::Lock ***v68;

  v3 = *(_QWORD *)(result + 16);
  if (!v3)
    return result;
  v4 = *(_QWORD *)(v3 + 8);
  if (!v4)
    return result;
  v7 = result;
  result = v4 + 88;
  v59 = (WTF::Lock *)(v4 + 88);
  v60 = 1;
  if (__ldaxr((unsigned __int8 *)(v4 + 88)))
  {
    __clrex();
LABEL_6:
    result = MEMORY[0x19AEA534C]();
    goto LABEL_7;
  }
  if (__stxr(1u, (unsigned __int8 *)result))
    goto LABEL_6;
LABEL_7:
  v10 = (uint64_t *)(v7 + 40);
  v9 = *(_QWORD *)(v7 + 40);
  if (v9)
  {
    v11 = *(_DWORD *)(v9 - 8);
    v12 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v13 = (v12 ^ (v12 >> 6)) + ~((v12 ^ (v12 >> 6)) << 11);
    v14 = v11 & (v13 ^ HIWORD(v13));
    v15 = *(_DWORD *)(v9 + 32 * v14);
    if (v15 != a2)
    {
      v16 = 1;
      while (v15)
      {
        v14 = ((_DWORD)v14 + v16) & v11;
        v15 = *(_DWORD *)(v9 + 32 * v14);
        ++v16;
        if (v15 == a2)
          goto LABEL_14;
      }
      v14 = *(unsigned int *)(v9 - 4);
    }
LABEL_14:
    if (v14 != *(_DWORD *)(v9 - 4))
    {
      v29 = (_DWORD *)(v9 + 32 * v14);
      v31 = v29 + 6;
      v30 = v29[6];
      v32 = *(unsigned int *)(a3 + 16);
      v34 = v30 == (_DWORD)v32 && v30 != -1;
      if ((_DWORD)v32 == -1 || !v34)
      {
        v35 = v30 == -1;
        if ((_DWORD)v32 == -1)
          v36 = v35;
        else
          v36 = v34;
        if ((v36 & 1) != 0)
          goto LABEL_85;
      }
      else
      {
        v62 = (WTF::Lock **)&v68;
        result = ((uint64_t (*)(WTF::Lock ***, uint64_t, _DWORD *))off_1E33DE520[v32])(&v62, a3, v29 + 2);
        if ((result & 1) != 0)
          goto LABEL_85;
      }
      v37 = *(_QWORD *)(*(_QWORD *)(v7 + 16) + 8);
      if (v37)
        v38 = v37 - 8;
      else
        v38 = 0;
      v39 = *(_DWORD **)(v38 + 88);
      if (v39)
        ++v39[2];
      v61 = v39;
      v62 = &v59;
      v63 = &v61;
      v64 = &v59;
      v65 = &v61;
      v66 = &v59;
      v67 = &v61;
      v40 = *v31;
      if ((_DWORD)v40 == -1)
        goto LABEL_95;
      v68 = &v62;
      ((void (*)(WTF::Lock ****, _DWORD *))off_1E33DE4F0[v40])(&v68, v29 + 2);
      if (v39)
      {
        if (v39[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v39 + 16))(v39);
        else
          --v39[2];
      }
      v41 = *v10;
      if (!*v10 || (v41 += 32 * *(unsigned int *)(v41 - 4), (_DWORD *)v41 != v29))
      {
        if ((_DWORD *)v41 != v29)
        {
          v42 = -1;
          *v29 = -1;
          v43 = *v31;
          if ((_DWORD)v43 != -1)
            ((void (*)(WTF::Lock ***, _DWORD *))off_1E33DE448[v43])(&v62, v29 + 2);
          *v31 = -1;
          ++*(_DWORD *)(*v10 - 16);
          v44 = *v10;
          if (*v10)
            v42 = *(_DWORD *)(v44 - 12) - 1;
          *(_DWORD *)(v44 - 12) = v42;
          v45 = *v10;
          if (*v10)
          {
            v46 = 6 * *(_DWORD *)(v45 - 12);
            v47 = *(_DWORD *)(v45 - 4);
            if (v46 < v47 && v47 >= 9)
              WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(v10, v47 >> 1, 0);
          }
        }
      }
    }
  }
  v17 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v17 == -1)
    goto LABEL_95;
  v68 = (WTF::Lock ***)&v61;
  ((void (*)(WTF::Lock ***__return_ptr, WTF::Lock ****, uint64_t))off_1E33DE490[v17])(&v62, &v68, a3);
  if ((_DWORD)v63 == -1)
    goto LABEL_95;
  v68 = (WTF::Lock ***)&v61;
  result = ((uint64_t (*)(WTF::Lock ****, WTF::Lock ***))off_1E33DE538[v63])(&v68, &v62);
  v18 = result;
  if ((_DWORD)v63 != -1)
    result = ((uint64_t (*)(WTF::Lock ****, WTF::Lock ***))off_1E33DE4A8[v63])(&v68, &v62);
  if (v18)
  {
    v19 = *v10;
    if (*v10
      || (WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(v10, 8u, 0), (v19 = *v10) != 0))
    {
      v20 = *(_DWORD *)(v19 - 8);
    }
    else
    {
      v20 = 0;
    }
    v21 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
    v22 = v20 & (((v21 ^ (v21 >> 6)) + ~((v21 ^ (v21 >> 6)) << 11)) ^ (((v21 ^ (v21 >> 6)) + ~((v21 ^ (v21 >> 6)) << 11)) >> 16));
    v23 = v19 + 32 * v22;
    v24 = *(_DWORD *)v23;
    if (*(_DWORD *)v23)
    {
      v25 = 0;
      v26 = 1;
      while (v24 != a2)
      {
        if (v24 == -1)
          v25 = v23;
        v22 = ((_DWORD)v22 + v26) & v20;
        v23 = v19 + 32 * v22;
        v24 = *(_DWORD *)v23;
        ++v26;
        if (!*(_DWORD *)v23)
        {
          if (v25)
          {
            *(_DWORD *)v25 = 0;
            *(_QWORD *)(v25 + 8) = 0;
            *(_DWORD *)(v25 + 24) = 0;
            --*(_DWORD *)(*v10 - 16);
            v23 = v25;
          }
          goto LABEL_31;
        }
      }
LABEL_83:
      v55 = *(unsigned int *)(v23 + 24);
      if ((_DWORD)v55 != -1)
      {
        v62 = (WTF::Lock **)&v68;
        result = ((uint64_t (*)(WTF::Lock ***, uint64_t))off_1E33DE548[v55])(&v62, v23 + 8);
        goto LABEL_85;
      }
LABEL_95:
      v57 = (WebCore::WebGLFramebuffer *)std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::WebGLFramebuffer::drawBuffersIfNecessary(v57, v58);
    }
LABEL_31:
    *(_DWORD *)v23 = a2;
    v27 = *(unsigned int *)(v23 + 24);
    v28 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v27 == -1)
    {
      if ((_DWORD)v28 == -1)
        goto LABEL_70;
    }
    else if ((_DWORD)v28 == -1)
    {
      ((void (*)(WTF::Lock ***, uint64_t))off_1E33DE448[v27])(&v62, v23 + 8);
      *(_DWORD *)(v23 + 24) = -1;
      goto LABEL_70;
    }
    v62 = (WTF::Lock **)(v23 + 8);
    ((void (*)(WTF::Lock ***))off_1E33DE560[v28])(&v62);
LABEL_70:
    v48 = *v10;
    if (*v10)
      v49 = *(_DWORD *)(v48 - 12) + 1;
    else
      v49 = 1;
    *(_DWORD *)(v48 - 12) = v49;
    v50 = *v10;
    if (*v10)
      v51 = *(_DWORD *)(v50 - 12);
    else
      v51 = 0;
    v52 = (*(_DWORD *)(v50 - 16) + v51);
    v53 = *(unsigned int *)(v50 - 4);
    if (v53 > 0x400)
    {
      if (v53 > 2 * v52)
        goto LABEL_83;
    }
    else
    {
      if (3 * v53 > 4 * v52)
        goto LABEL_83;
      if (!(_DWORD)v53)
      {
        v54 = 8;
        goto LABEL_82;
      }
    }
    v54 = (_DWORD)v53 << (6 * *(_DWORD *)(v50 - 12) >= (2 * v53));
LABEL_82:
    v23 = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(v10, v54, (int *)v23);
    goto LABEL_83;
  }
LABEL_85:
  if (v60)
  {
    result = (uint64_t)v59;
    v56 = __ldxr((unsigned __int8 *)v59);
    if (v56 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v59))
        return result;
    }
    else
    {
      __clrex();
    }
    return WTF::Lock::unlockSlow((WTF::Lock *)result);
  }
  return result;
}

uint64_t WebCore::WebGLFramebuffer::drawBuffersIfNecessary(WebCore::WebGLFramebuffer *this, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD *v28;

  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (v5)
      v6 = v5 - 8;
    else
      v6 = 0;
  }
  else
  {
    v6 = 0;
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v6 + 8) + 40))(v6 + 8);
  if ((result & 1) != 0
    || ((v8 = *(_QWORD *)(*((_QWORD *)this + 2) + 8)) != 0 ? (v9 = v8 - 8) : (v9 = 0), *(_QWORD *)(v9 + 800)))
  {
    if (*((_DWORD *)this + 17))
    {
      v10 = 0;
      v11 = *((_QWORD *)this + 7);
      while (1)
      {
        v12 = *(_DWORD *)(v11 + 4 * v10);
        if (!v12)
          goto LABEL_22;
        v13 = *((_QWORD *)this + 5);
        if (!v13)
          goto LABEL_22;
        v14 = *(_DWORD *)(v13 - 8);
        v15 = 9 * ((v12 + ~(v12 << 15)) ^ ((v12 + ~(v12 << 15)) >> 10));
        v16 = (v15 ^ (v15 >> 6)) + ~((v15 ^ (v15 >> 6)) << 11);
        v17 = v14 & (v16 ^ HIWORD(v16));
        v18 = *(_DWORD *)(v13 + 32 * v17);
        if (v18 != v12)
          break;
LABEL_19:
        if (v10 >= *((unsigned int *)this + 21))
          goto LABEL_47;
        v20 = *((_QWORD *)this + 9);
        if (*(_DWORD *)(v20 + 4 * v10) == v12)
          goto LABEL_26;
        *(_DWORD *)(v20 + 4 * v10) = v12;
LABEL_25:
        a2 = 1;
LABEL_26:
        if (++v10 >= *((unsigned int *)this + 17))
          goto LABEL_27;
      }
      v19 = 1;
      while (v18)
      {
        v17 = (v17 + v19) & v14;
        v18 = *(_DWORD *)(v13 + 32 * v17);
        ++v19;
        if (v18 == v12)
          goto LABEL_19;
      }
LABEL_22:
      if (v10 >= *((unsigned int *)this + 21))
      {
LABEL_47:
        __break(0xC471u);
        JUMPOUT(0x195D1442CLL);
      }
      v21 = *((_QWORD *)this + 9);
      if (!*(_DWORD *)(v21 + 4 * v10))
        goto LABEL_26;
      *(_DWORD *)(v21 + 4 * v10) = 0;
      goto LABEL_25;
    }
LABEL_27:
    if ((a2 & 1) != 0)
    {
      v22 = *((_QWORD *)this + 2);
      if (v22)
      {
        v23 = *(_QWORD *)(v22 + 8);
        if (v23)
          v24 = v23 - 8;
        else
          v24 = 0;
      }
      else
      {
        v24 = 0;
      }
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v24 + 8) + 40))(v24 + 8);
      v26 = *(_QWORD *)(*((_QWORD *)this + 2) + 8);
      if (v26)
        v27 = v26 - 8;
      else
        v27 = 0;
      v28 = *(_DWORD **)(v27 + 88);
      if (v25)
      {
        if (v28)
          ++v28[2];
        result = (*(uint64_t (**)(_DWORD *, _QWORD, _QWORD))(*(_QWORD *)v28 + 1568))(v28, *((_QWORD *)this + 9), *((unsigned int *)this + 21));
      }
      else
      {
        if (v28)
          ++v28[2];
        result = (*(uint64_t (**)(_DWORD *, _QWORD, _QWORD))(*(_QWORD *)v28 + 1992))(v28, *((_QWORD *)this + 9), *((unsigned int *)this + 21));
      }
      if (v28[2] == 1)
        return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v28 + 16))(v28);
      else
        --v28[2];
    }
  }
  return result;
}

_QWORD *WebCore::WebGLFramebuffer::getAttachmentObject@<X0>(_QWORD *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  char *v22;

  if (!*((_DWORD *)this + 6))
    goto LABEL_10;
  v4 = this[5];
  if (!v4)
    goto LABEL_10;
  v5 = *(_DWORD *)(v4 - 8);
  v6 = 9 * ((~(a2 << 15) + a2) ^ ((~(a2 << 15) + a2) >> 10));
  v7 = (v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11);
  v8 = v5 & (v7 ^ HIWORD(v7));
  v9 = *(_DWORD *)(v4 + 32 * v8);
  if (v9 != a2)
  {
    v10 = 1;
    while (v9)
    {
      v8 = ((_DWORD)v8 + v10) & v5;
      v9 = *(_DWORD *)(v4 + 32 * v8);
      ++v10;
      if (v9 == a2)
        goto LABEL_9;
    }
    v8 = *(unsigned int *)(v4 - 4);
  }
LABEL_9:
  if (v8 != *(_DWORD *)(v4 - 4))
  {
    v11 = v4 + 32 * v8;
    v12 = *(unsigned int *)(v11 + 24);
    if ((_DWORD)v12 == -1)
    {
      v15 = std::__throw_bad_variant_access[abi:sn180100]();
      return (_QWORD *)WebCore::WebGLFramebuffer::removeAttachmentFromBoundFramebuffer(v15, v16, v17, v18);
    }
    else
    {
      v22 = &v21;
      this = ((_QWORD *(*)(uint64_t *__return_ptr, char **, uint64_t))off_1E33DE490[v12])(&v19, &v22, v11 + 8);
      *(_BYTE *)a3 = 0;
      *(_DWORD *)(a3 + 8) = -1;
      v13 = v20;
      if (v20 == -1)
      {
        *(_BYTE *)(a3 + 16) = 1;
      }
      else
      {
        this = (_QWORD *)((uint64_t (*)(char **, uint64_t, uint64_t *))off_1E33DE4B8[v20])(&v22, a3, &v19);
        *(_DWORD *)(a3 + 8) = v13;
        v14 = v20;
        *(_BYTE *)(a3 + 16) = 1;
        if ((_DWORD)v14 != -1)
          return (_QWORD *)((uint64_t (*)(char **, uint64_t *))off_1E33DE4A8[v14])(&v22, &v19);
      }
    }
  }
  else
  {
LABEL_10:
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 16) = 0;
  }
  return this;
}

uint64_t WebCore::WebGLFramebuffer::removeAttachmentFromBoundFramebuffer(uint64_t result, _QWORD *a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  _BOOL4 v19;
  char v20;
  char v21;
  int *v22;
  int v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  int v34;
  WebCore::WebGLFramebuffer *v35;
  _DWORD *v38;
  _QWORD v39[2];
  int v40;
  int v41;
  int v42;
  _DWORD *v43;
  _QWORD *v44;
  int *v45;
  int *v46;
  _QWORD *v47;
  int *v48;
  int *v49;
  _QWORD *v50;
  int *v51;
  int *v52;
  _QWORD v53[2];

  if (!*(_DWORD *)(result + 24))
    return result;
  v6 = (uint64_t *)(result + 40);
  v5 = *(_QWORD *)(result + 40);
  if (v5)
    v34 = *(_DWORD *)(v5 - 12);
  else
    v34 = 0;
  v35 = (WebCore::WebGLFramebuffer *)result;
  v7 = *(_QWORD *)(*(_QWORD *)(result + 16) + 8);
  if (v7)
    v8 = v7 - 8;
  else
    v8 = 0;
  v9 = *(_DWORD **)(v8 + 88);
  if (v9)
    ++v9[2];
  v38 = v9;
  while (1)
  {
    v10 = *v6;
    if (!*v6)
    {
      v13 = 0;
      v11 = 0;
LABEL_21:
      v12 = (int *)(v10 + 32 * v11);
      goto LABEL_22;
    }
    v11 = *(unsigned int *)(v10 - 4);
    v12 = (int *)(v10 + 32 * v11);
    if (!*(_DWORD *)(v10 - 12))
    {
      v13 = (int *)(v10 + 32 * v11);
      goto LABEL_21;
    }
    v13 = (int *)*v6;
    if ((_DWORD)v11)
    {
      v14 = 32 * v11;
      v13 = (int *)*v6;
      while ((*v13 + 1) <= 1)
      {
        v13 += 8;
        v14 -= 32;
        if (!v14)
        {
          v13 = v12;
          if (v10)
            goto LABEL_23;
          goto LABEL_25;
        }
      }
    }
LABEL_22:
    if (!v10)
      break;
    while (1)
    {
LABEL_23:
      if (v13 == (int *)(v10 + 32 * *(unsigned int *)(v10 - 4)))
      {
        v32 = *(_DWORD *)(v10 - 12);
        goto LABEL_64;
      }
LABEL_26:
      v15 = v13[6];
      if ((_DWORD)v15 == -1)
        goto LABEL_71;
      v39[0] = v53;
      ((void (*)(_QWORD **__return_ptr, _QWORD *, int *))off_1E33DE490[v15])(&v44, v39, v13 + 2);
      v16 = v45;
      v17 = *(unsigned int *)(a4 + 8);
      v18 = v17 == 0xFFFFFFFFLL;
      v19 = v17 != 0xFFFFFFFFLL && v17 == v45;
      if (v45 == 0xFFFFFFFFLL)
        v20 = v18;
      else
        v20 = v19;
      v21 = v20 ^ 1;
      if ((_DWORD)v45 != -1 && v19)
      {
        v39[0] = v53;
        v21 = ((uint64_t (*)(_QWORD *, _QWORD **, uint64_t))off_1E33DE4C8[v45])(v39, &v44, a4);
        v16 = v45;
      }
      if (v16 != 0xFFFFFFFFLL)
        ((void (*)(_QWORD *, _QWORD **))off_1E33DE4A8[v16])(v39, &v44);
      if ((v21 & 1) == 0)
        break;
      v22 = v13 + 8;
      v13 = v12;
      if (v22 != v12)
      {
        v13 = v22;
        while ((*v13 + 1) <= 1)
        {
          v13 += 8;
          if (v13 == v12)
          {
            v13 = v12;
            break;
          }
        }
      }
      v10 = *v6;
      if (!*v6)
        goto LABEL_25;
    }
    v23 = *v13;
    LOBYTE(v39[0]) = 0;
    v40 = -1;
    v24 = v13[6];
    if ((_DWORD)v24 != -1)
    {
      ((void (*)(_QWORD **, _QWORD *, int *))off_1E33DE4D8[v24])(&v44, v39, v13 + 2);
      v40 = v24;
    }
    v25 = (int *)*v6;
    if (!*v6 || (v25 += 8 * *(v25 - 1), v25 != v13))
    {
      if (v25 != v13)
      {
        *v13 = -1;
        v26 = v13[6];
        if ((_DWORD)v26 != -1)
          ((void (*)(_QWORD **, int *))off_1E33DE448[v26])(&v44, v13 + 2);
        v27 = -1;
        v13[6] = -1;
        ++*(_DWORD *)(*v6 - 16);
        v28 = *v6;
        if (*v6)
          v27 = *(_DWORD *)(v28 - 12) - 1;
        *(_DWORD *)(v28 - 12) = v27;
        v29 = *v6;
        if (*v6)
        {
          v30 = 6 * *(_DWORD *)(v29 - 12);
          v31 = *(_DWORD *)(v29 - 4);
          if (v30 < v31 && v31 >= 9)
            WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(v6, v31 >> 1, 0);
        }
      }
    }
    v43 = v38;
    v44 = a2;
    v45 = (int *)&v43;
    v46 = (int *)a2;
    v47 = &v43;
    v48 = (int *)a2;
    v49 = (int *)&v43;
    if (v40 == -1)
      goto LABEL_71;
    v53[0] = &v44;
    ((void (*)(_QWORD *, _QWORD *))off_1E33DE4F0[v40])(v53, v39);
    v43 = v38;
    v44 = &v43;
    v41 = v23;
    v42 = a3;
    v45 = &v42;
    v46 = &v41;
    v47 = &v43;
    v48 = &v42;
    v49 = &v41;
    v50 = &v43;
    v51 = &v42;
    v52 = &v41;
    if (v40 == -1)
    {
LABEL_71:
      v33 = std::__throw_bad_variant_access[abi:sn180100]();
      return WebCore::WebGLFramebuffer::deleteObjectImpl(v33);
    }
    v53[0] = &v44;
    ((void (*)(_QWORD *, _QWORD *))off_1E33DE478[v40])(v53, v39);
    if (v40 != -1)
      ((void (*)(_QWORD **, _QWORD *))off_1E33DE448[v40])(&v44, v39);
  }
LABEL_25:
  if (v13)
    goto LABEL_26;
  v32 = 0;
LABEL_64:
  result = (uint64_t)v35;
  if (v34 != v32)
    result = WebCore::WebGLFramebuffer::drawBuffersIfNecessary(v35, 0);
  if (v38)
  {
    if (v38[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v38 + 16))(v38);
    else
      --v38[2];
  }
  return result;
}

WTF *WebCore::WebGLFramebuffer::deleteObjectImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  _QWORD v19[6];
  _QWORD *v20;

  v7 = *(_QWORD *)(a1 + 40);
  if (v7)
  {
    v8 = *(unsigned int *)(v7 - 4);
    v9 = (_DWORD *)(v7 + 32 * v8);
    if (*(_DWORD *)(v7 - 12))
    {
      v10 = *(_DWORD **)(a1 + 40);
      if ((_DWORD)v8)
      {
        v11 = 32 * v8;
        v10 = *(_DWORD **)(a1 + 40);
        while ((*v10 + 1) <= 1)
        {
          v10 += 8;
          v11 -= 32;
          if (!v11)
          {
            v10 = v9;
            goto LABEL_8;
          }
        }
      }
      goto LABEL_8;
    }
    v10 = (_DWORD *)(v7 + 32 * v8);
  }
  else
  {
    v10 = 0;
    v8 = 0;
  }
  v9 = (_DWORD *)(v7 + 32 * v8);
  if (v7)
  {
LABEL_8:
    v12 = (_DWORD *)(v7 + 32 * *(unsigned int *)(v7 - 4));
    goto LABEL_13;
  }
  v12 = 0;
LABEL_13:
  if (v12 == v10)
    return (WTF *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 256))(a3, a4);
  while (1)
  {
    v18 = a3;
    v19[0] = a2;
    v19[1] = &v18;
    v19[2] = a2;
    v19[3] = &v18;
    v19[4] = a2;
    v19[5] = &v18;
    v13 = v10[6];
    if ((_DWORD)v13 == -1)
      break;
    v20 = v19;
    ((void (*)(_QWORD **, _DWORD *))off_1E33DE4F0[v13])(&v20, v10 + 2);
    v14 = v10 + 8;
    v10 = v9;
    if (v14 != v9)
    {
      v10 = v14;
      while ((*v10 + 1) <= 1)
      {
        v10 += 8;
        if (v10 == v9)
        {
          v10 = v9;
          break;
        }
      }
    }
    if (v10 == v12)
      return (WTF *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 256))(a3, a4);
  }
  v16 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::WebGLFramebuffer::drawBuffers(v16, v17);
}

WTF *WebCore::WebGLFramebuffer::drawBuffers(uint64_t a1, WTF *a2)
{
  WTF *result;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v11;
  void *v12;

  result = WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((WTF *)(a1 + 56), a2);
  v4 = *(unsigned int *)(a1 + 68);
  v5 = *(unsigned int *)(a1 + 84);
  if (v5 >= v4)
  {
    *(_DWORD *)(a1 + 84) = v4;
    if (!(_DWORD)v4)
      return (WTF *)WebCore::WebGLFramebuffer::drawBuffersIfNecessary((WebCore::WebGLFramebuffer *)a1, 1);
LABEL_16:
    bzero(*(void **)(a1 + 72), 4 * v4);
    return (WTF *)WebCore::WebGLFramebuffer::drawBuffersIfNecessary((WebCore::WebGLFramebuffer *)a1, 1);
  }
  v6 = *(unsigned int *)(a1 + 80);
  if (v6 >= v4)
  {
LABEL_14:
    *(_DWORD *)(a1 + 84) = v4;
    goto LABEL_16;
  }
  v7 = v6 + (v6 >> 2);
  if (v7 >= 0x10)
    v8 = v7 + 1;
  else
    v8 = 16;
  if (v8 <= v4)
    v9 = *(unsigned int *)(a1 + 68);
  else
    v9 = v8;
  if (!(v9 >> 30))
  {
    v10 = *(void **)(a1 + 72);
    v11 = (void *)WTF::fastMalloc((WTF *)(4 * v9));
    *(_DWORD *)(a1 + 80) = v9;
    *(_QWORD *)(a1 + 72) = v11;
    memcpy(v11, v10, 4 * v5);
    if (v10)
    {
      if (*(void **)(a1 + 72) == v10)
      {
        *(_QWORD *)(a1 + 72) = 0;
        *(_DWORD *)(a1 + 80) = 0;
      }
      WTF::fastFree((WTF *)v10, v12);
    }
    goto LABEL_14;
  }
  __break(0xC471u);
  return result;
}

WebCore::WebGLMultiDraw *WebCore::WebGLMultiDraw::WebGLMultiDraw(WebCore::WebGLMultiDraw *this, WebCore::WebGLRenderingContextBase *a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  _DWORD *v11;
  char v12;
  WTF::StringImpl *v13;

  *((_QWORD *)this + 1) = 0x3000000001;
  *((_QWORD *)this + 2) = a2;
  *(_QWORD *)this = off_1E33DE358;
  v4 = (_DWORD *)*((_QWORD *)a2 + 11);
  if (v4)
    ++v4[2];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v4 + 1968))(v4, &v13);
  v6 = v13;
  v13 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
  else
    --v4[2];
  if ((*(unsigned int (**)(char *))(*((_QWORD *)a2 + 1) + 32))((char *)a2 + 8))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    (*(void (**)(_DWORD **__return_ptr, WebCore::WebGLRenderingContextBase *, WTF::StringImpl **))(*(_QWORD *)a2 + 48))(&v11, a2, &v13);
    if (v12)
    {
      v8 = v11;
      v11 = 0;
      if (v8)
      {
        if (v8[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
        else
          --v8[2];
      }
    }
    v9 = v13;
    v13 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v7);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  return this;
}

uint64_t WebCore::WebGLMultiDraw::supported(WebCore::WebGLMultiDraw *this, WebCore::GraphicsContextGL *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if ((*(unsigned int (**)(WebCore::WebGLMultiDraw *, WTF::StringImpl **))(*(_QWORD *)this + 1960))(this, &v9))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = (*(uint64_t (**)(WebCore::WebGLMultiDraw *, WTF::StringImpl **))(*(_QWORD *)this + 1960))(this, &v8);
    v5 = v8;
    v8 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  else
  {
    v4 = 0;
  }
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  return v4;
}

uint64_t WebCore::WebGLMultiDraw::multiDrawArraysWEBGL(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned int a6, signed int a7)
{
  uint64_t v8;
  uint64_t v10;
  int v15;
  const char *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  int v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)();
  WTF::StringImpl *v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  unsigned int v33;
  _DWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int32x2_t *v41;
  WebCore::InspectorInstrumentation *v42;
  WebCore::ScriptExecutionContext *v43;
  uint64_t v44;
  uint64_t v45;
  WebCore::InspectorInstrumentation *v46;
  WebCore::ScriptExecutionContext *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)();
  uint64_t v51;
  _QWORD v52[3];
  char **v53;
  float32x2_t v54;
  uint64_t v55;
  __int128 v56;
  char v57;
  uint64_t v58;
  char v59;
  char *v60;

  if (!*(_QWORD *)(result + 16))
    return result;
  v8 = *(_QWORD *)(result + 16);
  if (a7 < 0)
    return (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError(*(WTF::StringImpl **)(result + 16), 1281, (uint64_t)"multiDrawArraysWEBGL", 21, (uint64_t)"negative drawcount", 19);
  v10 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v10 == -1)
    goto LABEL_68;
  v53 = &v60;
  v15 = ((uint64_t (*)(char ***, uint64_t))off_1E33DE598[v10])(&v53, a3);
  if (v15 < a7)
  {
LABEL_5:
    v16 = "drawcount out of bounds";
    v17 = 24;
LABEL_10:
    v18 = (WTF::StringImpl *)v8;
    return (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError(v18, 1282, (uint64_t)"multiDrawArraysWEBGL", 21, (uint64_t)v16, v17);
  }
  if (v15 - a7 < a4)
  {
    v16 = "firstsOffset out of bounds";
LABEL_9:
    v17 = 27;
    goto LABEL_10;
  }
  v19 = *(unsigned int *)(a5 + 16);
  if ((_DWORD)v19 == -1)
    goto LABEL_68;
  v53 = &v60;
  v20 = ((uint64_t (*)(char ***, uint64_t))off_1E33DE598[v19])(&v53, a5);
  if (v20 < a7)
    goto LABEL_5;
  if (v20 - a7 < a6)
  {
    v16 = "countsOffset out of bounds";
    goto LABEL_9;
  }
  v25 = *(_QWORD *)(v8 + 144);
  if (*(_BYTE *)(v25 + 73))
  {
    if (!*(_BYTE *)(v25 + 72))
    {
LABEL_52:
      v16 = "no buffer is bound to enabled attribute";
      v18 = (WTF::StringImpl *)v8;
      v17 = 40;
      return (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError(v18, 1282, (uint64_t)"multiDrawArraysWEBGL", 21, (uint64_t)v16, v17);
    }
  }
  else
  {
    v26 = *(unsigned int *)(v25 + 68);
    if ((_DWORD)v26)
    {
      v27 = 56 * v26;
      v28 = *(_QWORD *)(v25 + 56) + 8;
      while (1)
      {
        if (*(_BYTE *)(v28 - 8))
        {
          v29 = *(_QWORD *)v28
              ? WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance
              : 0;
          if (!v29 || !*(_DWORD *)(*(_QWORD *)v28 + 24))
            break;
        }
        v28 += 56;
        v27 -= 56;
        if (!v27)
          goto LABEL_29;
      }
      *(_WORD *)(v25 + 72) = 256;
      goto LABEL_52;
    }
LABEL_29:
    *(_WORD *)(v25 + 72) = 257;
  }
  v30 = *(WTF::StringImpl **)(v8 + 168);
  if (!v30
    || (v31 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter)) == 0
    || (v42 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 40) + 144))(*(_QWORD *)(v8 + 40))) == 0
    || (v44 = WebCore::InspectorInstrumentation::instrumentingAgents(v42, v43)) == 0
    || (v45 = *(_QWORD *)(v44 + 96)) == 0
    || (result = WebCore::InspectorCanvasAgent::isWebGLProgramDisabled(v45, v30), (result & 1) == 0))
  {
    WebCore::WebGLRenderingContextBase::clearIfComposited(v8, 0, 0, v21, v22, v23, v24);
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v56 = xmmword_1969F12B0;
    v57 = 0;
    v32 = *(WTF::StringImpl **)(v8 + 168);
    if (v32
      && (v33 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter)) != 0
      && (v46 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 40) + 144))(*(_QWORD *)(v8 + 40))) != 0
      && (v48 = WebCore::InspectorInstrumentation::instrumentingAgents(v46, v47)) != 0
      && (v49 = *(_QWORD *)(v48 + 96)) != 0
      && WebCore::InspectorCanvasAgent::isWebGLProgramHighlighted(v49, v32)
      && (*(_QWORD *)(v8 + 176)
        ? (v50 = WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance)
        : (v50 = 0),
          !v50))
    {
      v58 = v8;
      WebCore::ScopedInspectorShaderProgramHighlight::showHighlight((WebCore::ScopedInspectorShaderProgramHighlight *)&v53);
    }
    else
    {
      v58 = 0;
    }
    v34 = *(_DWORD **)(v8 + 88);
    if (v34)
      ++v34[2];
    v35 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v35 != -1)
    {
      v60 = &v59;
      v36 = ((uint64_t (*)(char **, uint64_t))off_1E33DE5A8[v35])(&v60, a3);
      v37 = *(unsigned int *)(a5 + 16);
      if ((_DWORD)v37 != -1)
      {
        v60 = &v59;
        v38 = v36 + 4 * a4;
        v39 = ((uint64_t (*)(char **, uint64_t))off_1E33DE5A8[v37])(&v60, a5);
        v52[0] = a7;
        v52[1] = v38;
        v52[2] = v39 + 4 * a6;
        result = (*(uint64_t (**)(_DWORD *, uint64_t, _QWORD *))(*(_QWORD *)v34 + 1928))(v34, a2, v52);
        if (v34[2] == 1)
          result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v34 + 16))(v34);
        else
          --v34[2];
        if (v58)
          result = WebCore::ScopedInspectorShaderProgramHighlight::hideHighlight((WebCore::ScopedInspectorShaderProgramHighlight *)&v53);
        if (!*(_BYTE *)(v8 + 425)
          && !(*(_QWORD *)(v8 + 176)
             ? WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance
             : 0))
        {
          *(_BYTE *)(v8 + 432) = 1;
          if (*(_BYTE *)(v8 + 434))
            *(_BYTE *)(v8 + 434) = 0;
          v41 = *(int32x2_t **)(v8 + 40);
          v53 = 0;
          v54 = vcvt_f32_s32(v41[1]);
          LOBYTE(v55) = 1;
          return (*(uint64_t (**)(int32x2_t *, char ***, _QWORD))(*(_QWORD *)v41 + 104))(v41, &v53, 0);
        }
        return result;
      }
    }
LABEL_68:
    v51 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::WebGLMultiDraw::multiDrawArraysInstancedWEBGL(v51);
  }
  return result;
}

uint64_t WebCore::WebGLMultiDraw::multiDrawArraysInstancedWEBGL(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7, unsigned int a8, signed int a9)
{
  uint64_t v9;
  uint64_t v11;
  int v18;
  const char *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)();
  WTF::StringImpl *v35;
  unsigned int v36;
  WTF::StringImpl *v37;
  unsigned int v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int32x2_t *v49;
  WebCore::InspectorInstrumentation *v50;
  WebCore::ScriptExecutionContext *v51;
  uint64_t v52;
  uint64_t v53;
  WebCore::InspectorInstrumentation *v54;
  WebCore::ScriptExecutionContext *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)();
  uint64_t v59;
  _QWORD v60[4];
  char **v61;
  float32x2_t v62;
  uint64_t v63;
  __int128 v64;
  char v65;
  uint64_t v66;
  char v67;
  char *v68;

  if (!*(_QWORD *)(result + 16))
    return result;
  v9 = *(_QWORD *)(result + 16);
  if (a9 < 0)
    return (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError(*(WTF::StringImpl **)(result + 16), 1281, (uint64_t)"multiDrawArraysInstancedWEBGL", 30, (uint64_t)"negative drawcount", 19);
  v11 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v11 == -1)
    goto LABEL_73;
  v61 = &v68;
  v18 = ((uint64_t (*)(char ***, uint64_t))off_1E33DE598[v11])(&v61, a3);
  if (v18 < a9)
  {
LABEL_5:
    v19 = "drawcount out of bounds";
    v20 = 24;
LABEL_10:
    v21 = (WTF::StringImpl *)v9;
    return (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError(v21, 1282, (uint64_t)"multiDrawArraysInstancedWEBGL", 30, (uint64_t)v19, v20);
  }
  if (v18 - a9 < a4)
  {
    v19 = "firstsOffset out of bounds";
LABEL_9:
    v20 = 27;
    goto LABEL_10;
  }
  v22 = *(unsigned int *)(a5 + 16);
  if ((_DWORD)v22 == -1)
    goto LABEL_73;
  v61 = &v68;
  v23 = ((uint64_t (*)(char ***, uint64_t))off_1E33DE598[v22])(&v61, a5);
  if (v23 < a9)
    goto LABEL_5;
  if (v23 - a9 < a6)
  {
    v19 = "countsOffset out of bounds";
    goto LABEL_9;
  }
  v24 = *(unsigned int *)(a7 + 16);
  if ((_DWORD)v24 == -1)
    goto LABEL_73;
  v61 = &v68;
  v25 = ((uint64_t (*)(char ***, uint64_t))off_1E33DE598[v24])(&v61, a7);
  if (v25 < a9)
    goto LABEL_5;
  if (v25 - a9 < a8)
  {
    v19 = "instanceCountsOffset out of bounds";
    v20 = 35;
    goto LABEL_10;
  }
  v30 = *(_QWORD *)(v9 + 144);
  if (*(_BYTE *)(v30 + 73))
  {
    if (!*(_BYTE *)(v30 + 72))
    {
LABEL_57:
      v19 = "no buffer is bound to enabled attribute";
      v21 = (WTF::StringImpl *)v9;
      v20 = 40;
      return (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError(v21, 1282, (uint64_t)"multiDrawArraysInstancedWEBGL", 30, (uint64_t)v19, v20);
    }
  }
  else
  {
    v31 = *(unsigned int *)(v30 + 68);
    if ((_DWORD)v31)
    {
      v32 = 56 * v31;
      v33 = *(_QWORD *)(v30 + 56) + 8;
      while (1)
      {
        if (*(_BYTE *)(v33 - 8))
        {
          v34 = *(_QWORD *)v33
              ? WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance
              : 0;
          if (!v34 || !*(_DWORD *)(*(_QWORD *)v33 + 24))
            break;
        }
        v33 += 56;
        v32 -= 56;
        if (!v32)
          goto LABEL_33;
      }
      *(_WORD *)(v30 + 72) = 256;
      goto LABEL_57;
    }
LABEL_33:
    *(_WORD *)(v30 + 72) = 257;
  }
  v35 = *(WTF::StringImpl **)(v9 + 168);
  if (!v35
    || (v36 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter)) == 0
    || (v50 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 40) + 144))(*(_QWORD *)(v9 + 40))) == 0
    || (v52 = WebCore::InspectorInstrumentation::instrumentingAgents(v50, v51)) == 0
    || (v53 = *(_QWORD *)(v52 + 96)) == 0
    || (result = WebCore::InspectorCanvasAgent::isWebGLProgramDisabled(v53, v35), (result & 1) == 0))
  {
    WebCore::WebGLRenderingContextBase::clearIfComposited(v9, 0, 0, v26, v27, v28, v29);
    v61 = 0;
    v62 = 0;
    v63 = 0;
    v64 = xmmword_1969F12B0;
    v65 = 0;
    v37 = *(WTF::StringImpl **)(v9 + 168);
    if (v37
      && (v38 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter)) != 0
      && (v54 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 40) + 144))(*(_QWORD *)(v9 + 40))) != 0
      && (v56 = WebCore::InspectorInstrumentation::instrumentingAgents(v54, v55)) != 0
      && (v57 = *(_QWORD *)(v56 + 96)) != 0
      && WebCore::InspectorCanvasAgent::isWebGLProgramHighlighted(v57, v37)
      && (*(_QWORD *)(v9 + 176)
        ? (v58 = WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance)
        : (v58 = 0),
          !v58))
    {
      v66 = v9;
      WebCore::ScopedInspectorShaderProgramHighlight::showHighlight((WebCore::ScopedInspectorShaderProgramHighlight *)&v61);
    }
    else
    {
      v66 = 0;
    }
    v39 = *(_DWORD **)(v9 + 88);
    if (v39)
      ++v39[2];
    v40 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v40 != -1)
    {
      v68 = &v67;
      v41 = ((uint64_t (*)(char **, uint64_t))off_1E33DE5A8[v40])(&v68, a3);
      v42 = *(unsigned int *)(a5 + 16);
      if ((_DWORD)v42 != -1)
      {
        v43 = v41;
        v68 = &v67;
        v44 = ((uint64_t (*)(char **, uint64_t))off_1E33DE5A8[v42])(&v68, a5);
        v45 = *(unsigned int *)(a7 + 16);
        if ((_DWORD)v45 != -1)
        {
          v68 = &v67;
          v46 = v44 + 4 * a6;
          v47 = ((uint64_t (*)(char **, uint64_t))off_1E33DE5A8[v45])(&v68, a7);
          v60[0] = a9;
          v60[1] = v43 + 4 * a4;
          v60[2] = v46;
          v60[3] = v47 + 4 * a8;
          result = (*(uint64_t (**)(_DWORD *, uint64_t, _QWORD *))(*(_QWORD *)v39 + 1936))(v39, a2, v60);
          if (v39[2] == 1)
            result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v39 + 16))(v39);
          else
            --v39[2];
          if (v66)
            result = WebCore::ScopedInspectorShaderProgramHighlight::hideHighlight((WebCore::ScopedInspectorShaderProgramHighlight *)&v61);
          if (!*(_BYTE *)(v9 + 425)
            && !(*(_QWORD *)(v9 + 176)
               ? WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance
               : 0))
          {
            *(_BYTE *)(v9 + 432) = 1;
            if (*(_BYTE *)(v9 + 434))
              *(_BYTE *)(v9 + 434) = 0;
            v49 = *(int32x2_t **)(v9 + 40);
            v61 = 0;
            v62 = vcvt_f32_s32(v49[1]);
            LOBYTE(v63) = 1;
            return (*(uint64_t (**)(int32x2_t *, char ***, _QWORD))(*(_QWORD *)v49 + 104))(v49, &v61, 0);
          }
          return result;
        }
      }
    }
LABEL_73:
    v59 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::WebGLMultiDraw::multiDrawElementsWEBGL(v59);
  }
  return result;
}

uint64_t WebCore::WebGLMultiDraw::multiDrawElementsWEBGL(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, unsigned int a7, signed int a8)
{
  uint64_t v9;
  uint64_t v11;
  int v17;
  const char *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  int v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)();
  WTF::StringImpl *v32;
  unsigned int v33;
  WTF::StringImpl *v34;
  unsigned int v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int32x2_t *v43;
  WebCore::InspectorInstrumentation *v44;
  WebCore::ScriptExecutionContext *v45;
  uint64_t v46;
  uint64_t v47;
  WebCore::InspectorInstrumentation *v48;
  WebCore::ScriptExecutionContext *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)();
  uint64_t v53;
  _QWORD v54[3];
  char **v55;
  float32x2_t v56;
  uint64_t v57;
  __int128 v58;
  char v59;
  uint64_t v60;
  char v61;
  char *v62;

  if (!*(_QWORD *)(result + 16))
    return result;
  v9 = *(_QWORD *)(result + 16);
  if (a8 < 0)
    return (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError(*(WTF::StringImpl **)(result + 16), 1281, (uint64_t)"multiDrawElementsWEBGL", 23, (uint64_t)"negative drawcount", 19);
  v11 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v11 == -1)
    goto LABEL_67;
  v55 = &v62;
  v17 = ((uint64_t (*)(char ***, uint64_t))off_1E33DE598[v11])(&v55, a3);
  if (v17 < a8)
  {
LABEL_5:
    v18 = "drawcount out of bounds";
    v19 = 24;
LABEL_9:
    v20 = (WTF::StringImpl *)v9;
    return (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError(v20, 1282, (uint64_t)"multiDrawElementsWEBGL", 23, (uint64_t)v18, v19);
  }
  if (v17 - a8 < a4)
  {
    v18 = "countsOffset out of bounds";
    v19 = 27;
    goto LABEL_9;
  }
  v21 = *(unsigned int *)(a6 + 16);
  if ((_DWORD)v21 == -1)
    goto LABEL_67;
  v55 = &v62;
  v22 = ((uint64_t (*)(char ***, uint64_t))off_1E33DE598[v21])(&v55, a6);
  if (v22 < a8)
    goto LABEL_5;
  if (v22 - a8 < a7)
  {
    v18 = "offsetsOffset out of bounds";
    v19 = 28;
    goto LABEL_9;
  }
  v27 = *(_QWORD *)(v9 + 144);
  if (*(_BYTE *)(v27 + 73))
  {
    if (!*(_BYTE *)(v27 + 72))
    {
LABEL_51:
      v18 = "no buffer is bound to enabled attribute";
      v20 = (WTF::StringImpl *)v9;
      v19 = 40;
      return (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError(v20, 1282, (uint64_t)"multiDrawElementsWEBGL", 23, (uint64_t)v18, v19);
    }
  }
  else
  {
    v28 = *(unsigned int *)(v27 + 68);
    if ((_DWORD)v28)
    {
      v29 = 56 * v28;
      v30 = *(_QWORD *)(v27 + 56) + 8;
      while (1)
      {
        if (*(_BYTE *)(v30 - 8))
        {
          v31 = *(_QWORD *)v30
              ? WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance
              : 0;
          if (!v31 || !*(_DWORD *)(*(_QWORD *)v30 + 24))
            break;
        }
        v30 += 56;
        v29 -= 56;
        if (!v29)
          goto LABEL_28;
      }
      *(_WORD *)(v27 + 72) = 256;
      goto LABEL_51;
    }
LABEL_28:
    *(_WORD *)(v27 + 72) = 257;
  }
  v32 = *(WTF::StringImpl **)(v9 + 168);
  if (!v32
    || (v33 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter)) == 0
    || (v44 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 40) + 144))(*(_QWORD *)(v9 + 40))) == 0
    || (v46 = WebCore::InspectorInstrumentation::instrumentingAgents(v44, v45)) == 0
    || (v47 = *(_QWORD *)(v46 + 96)) == 0
    || (result = WebCore::InspectorCanvasAgent::isWebGLProgramDisabled(v47, v32), (result & 1) == 0))
  {
    WebCore::WebGLRenderingContextBase::clearIfComposited(v9, 0, 0, v23, v24, v25, v26);
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v58 = xmmword_1969F12B0;
    v59 = 0;
    v34 = *(WTF::StringImpl **)(v9 + 168);
    if (v34
      && (v35 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter)) != 0
      && (v48 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 40) + 144))(*(_QWORD *)(v9 + 40))) != 0
      && (v50 = WebCore::InspectorInstrumentation::instrumentingAgents(v48, v49)) != 0
      && (v51 = *(_QWORD *)(v50 + 96)) != 0
      && WebCore::InspectorCanvasAgent::isWebGLProgramHighlighted(v51, v34)
      && (*(_QWORD *)(v9 + 176)
        ? (v52 = WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance)
        : (v52 = 0),
          !v52))
    {
      v60 = v9;
      WebCore::ScopedInspectorShaderProgramHighlight::showHighlight((WebCore::ScopedInspectorShaderProgramHighlight *)&v55);
    }
    else
    {
      v60 = 0;
    }
    v36 = *(_DWORD **)(v9 + 88);
    if (v36)
      ++v36[2];
    v37 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v37 != -1)
    {
      v62 = &v61;
      v38 = ((uint64_t (*)(char **, uint64_t))off_1E33DE5A8[v37])(&v62, a3);
      v39 = *(unsigned int *)(a6 + 16);
      if ((_DWORD)v39 != -1)
      {
        v62 = &v61;
        v40 = v38 + 4 * a4;
        v41 = ((uint64_t (*)(char **, uint64_t))off_1E33DE5A8[v39])(&v62, a6);
        v54[0] = a8;
        v54[1] = v40;
        v54[2] = v41 + 4 * a7;
        result = (*(uint64_t (**)(_DWORD *, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v36 + 1944))(v36, a2, v54, a5);
        if (v36[2] == 1)
          result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v36 + 16))(v36);
        else
          --v36[2];
        if (v60)
          result = WebCore::ScopedInspectorShaderProgramHighlight::hideHighlight((WebCore::ScopedInspectorShaderProgramHighlight *)&v55);
        if (!*(_BYTE *)(v9 + 425)
          && !(*(_QWORD *)(v9 + 176)
             ? WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance
             : 0))
        {
          *(_BYTE *)(v9 + 432) = 1;
          if (*(_BYTE *)(v9 + 434))
            *(_BYTE *)(v9 + 434) = 0;
          v43 = *(int32x2_t **)(v9 + 40);
          v55 = 0;
          v56 = vcvt_f32_s32(v43[1]);
          LOBYTE(v57) = 1;
          return (*(uint64_t (**)(int32x2_t *, char ***, _QWORD))(*(_QWORD *)v43 + 104))(v43, &v55, 0);
        }
        return result;
      }
    }
LABEL_67:
    v53 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::WebGLMultiDraw::multiDrawElementsInstancedWEBGL(v53);
  }
  return result;
}

WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance *WebCore::WebGLMultiDraw::multiDrawElementsInstancedWEBGL(WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance *result, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, unsigned int a9, signed int a10)
{
  WTF::StringImpl *v10;
  uint64_t v12;
  int v19;
  const char *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  WTF::StringImpl *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)();
  unsigned int v37;
  unsigned int v38;
  _DWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int32x2_t *v49;
  WebCore::InspectorInstrumentation *v50;
  WebCore::ScriptExecutionContext *v51;
  uint64_t v52;
  uint64_t v53;
  WebCore::InspectorInstrumentation *v54;
  WebCore::ScriptExecutionContext *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)();
  WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance *v59;
  WebCore::WebGLRenderingContextBase *v60;
  _DWORD *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  _QWORD v65[4];
  char **v66;
  float32x2_t v67;
  uint64_t v68;
  __int128 v69;
  char v70;
  uint64_t v71;
  char v72;
  char *v73;

  if (!*((_QWORD *)result + 2))
    return result;
  v10 = (WTF::StringImpl *)*((_QWORD *)result + 2);
  if (a10 < 0)
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(v10, 1281, (uint64_t)"multiDrawElementsInstancedWEBGL", 32, (uint64_t)"negative drawcount", 19);
  v64 = (uint64_t)v10;
  v12 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v12 == -1)
    goto LABEL_74;
  v66 = &v73;
  v19 = ((uint64_t (*)(char ***, uint64_t))off_1E33DE598[v12])(&v66, a3);
  if (v19 < a10)
  {
LABEL_5:
    v20 = "drawcount out of bounds";
    v21 = 24;
LABEL_9:
    v22 = (WTF::StringImpl *)v64;
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(v22, 1282, (uint64_t)"multiDrawElementsInstancedWEBGL", 32, (uint64_t)v20, v21);
  }
  if (v19 - a10 < a4)
  {
    v20 = "countsOffset out of bounds";
    v21 = 27;
    goto LABEL_9;
  }
  v23 = *(unsigned int *)(a6 + 16);
  if ((_DWORD)v23 == -1)
    goto LABEL_74;
  v66 = &v73;
  v24 = ((uint64_t (*)(char ***, uint64_t))off_1E33DE598[v23])(&v66, a6);
  if (v24 < a10)
    goto LABEL_5;
  if (v24 - a10 < a7)
  {
    v20 = "offsetsOffset out of bounds";
    v21 = 28;
    goto LABEL_9;
  }
  v25 = *(unsigned int *)(a8 + 16);
  if ((_DWORD)v25 == -1)
    goto LABEL_74;
  v66 = &v73;
  v26 = ((uint64_t (*)(char ***, uint64_t))off_1E33DE598[v25])(&v66, a8);
  if (v26 < a10)
  {
    v20 = "drawcount out of bounds";
    v21 = 24;
    v31 = (WTF::StringImpl *)v64;
LABEL_21:
    v22 = v31;
    return WebCore::WebGLRenderingContextBase::synthesizeGLError(v22, 1282, (uint64_t)"multiDrawElementsInstancedWEBGL", 32, (uint64_t)v20, v21);
  }
  v31 = (WTF::StringImpl *)v64;
  if (v26 - a10 < a9)
  {
    v20 = "instanceCountsOffset out of bounds";
    v21 = 35;
    goto LABEL_21;
  }
  v32 = *(_QWORD *)(v64 + 144);
  if (*(_BYTE *)(v32 + 73))
  {
    if (!*(_BYTE *)(v32 + 72))
    {
LABEL_58:
      v20 = "no buffer is bound to enabled attribute";
      v22 = (WTF::StringImpl *)v64;
      v21 = 40;
      return WebCore::WebGLRenderingContextBase::synthesizeGLError(v22, 1282, (uint64_t)"multiDrawElementsInstancedWEBGL", 32, (uint64_t)v20, v21);
    }
  }
  else
  {
    v33 = *(unsigned int *)(v32 + 68);
    if ((_DWORD)v33)
    {
      v34 = 56 * v33;
      v35 = *(_QWORD *)(v32 + 56) + 8;
      while (1)
      {
        if (*(_BYTE *)(v35 - 8))
        {
          v36 = *(_QWORD *)v35
              ? WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance
              : 0;
          if (!v36 || !*(_DWORD *)(*(_QWORD *)v35 + 24))
            break;
        }
        v35 += 56;
        v34 -= 56;
        if (!v34)
          goto LABEL_34;
      }
      *(_WORD *)(v32 + 72) = 256;
      goto LABEL_58;
    }
LABEL_34:
    *(_WORD *)(v32 + 72) = 257;
  }
  if (!*(_QWORD *)(v64 + 168)
    || (v37 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter)) == 0
    || (v62 = *(WTF::StringImpl **)(v64 + 168),
        (v50 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v64 + 40) + 144))(*(_QWORD *)(v64 + 40))) == 0)
    || (v52 = WebCore::InspectorInstrumentation::instrumentingAgents(v50, v51)) == 0
    || (v53 = *(_QWORD *)(v52 + 96)) == 0
    || (result = (WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance *)WebCore::InspectorCanvasAgent::isWebGLProgramDisabled(v53, v62), (result & 1) == 0))
  {
    WebCore::WebGLRenderingContextBase::clearIfComposited(v64, 0, 0, v27, v28, v29, v30);
    v66 = 0;
    v67 = 0;
    v68 = 0;
    v69 = xmmword_1969F12B0;
    v70 = 0;
    if (*(_QWORD *)(v64 + 168)
      && (v38 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter)) != 0
      && (v63 = *(WTF::StringImpl **)(v64 + 168),
          (v54 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v64 + 40) + 144))(*(_QWORD *)(v64 + 40))) != 0)
      && (v56 = WebCore::InspectorInstrumentation::instrumentingAgents(v54, v55)) != 0
      && (v57 = *(_QWORD *)(v56 + 96)) != 0
      && WebCore::InspectorCanvasAgent::isWebGLProgramHighlighted(v57, v63)
      && (*(_QWORD *)(v64 + 176)
        ? (v58 = WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance)
        : (v58 = 0),
          !v58))
    {
      v71 = v64;
      WebCore::ScopedInspectorShaderProgramHighlight::showHighlight((WebCore::ScopedInspectorShaderProgramHighlight *)&v66);
    }
    else
    {
      v71 = 0;
    }
    v39 = *(_DWORD **)(v64 + 88);
    if (v39)
      ++v39[2];
    v61 = v39;
    v40 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v40 != -1)
    {
      v73 = &v72;
      v41 = ((uint64_t (*)(char **, uint64_t))off_1E33DE5A8[v40])(&v73, a3);
      v42 = *(unsigned int *)(a6 + 16);
      if ((_DWORD)v42 != -1)
      {
        v43 = v41;
        v73 = &v72;
        v44 = ((uint64_t (*)(char **, uint64_t))off_1E33DE5A8[v42])(&v73, a6);
        v45 = *(unsigned int *)(a8 + 16);
        if ((_DWORD)v45 != -1)
        {
          v73 = &v72;
          v46 = v44 + 4 * a7;
          v47 = ((uint64_t (*)(char **, uint64_t))off_1E33DE5A8[v45])(&v73, a8);
          v65[0] = a10;
          v65[1] = v43 + 4 * a4;
          v65[2] = v46;
          v65[3] = v47 + 4 * a9;
          result = (WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance *)(*(uint64_t (**)(_DWORD *, uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v61 + 1952))(v61, a2, v65, a5);
          if (v61[2] == 1)
            result = (WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v61 + 16))(v61);
          else
            --v61[2];
          if (v71)
            result = (WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance *)WebCore::ScopedInspectorShaderProgramHighlight::hideHighlight((WebCore::ScopedInspectorShaderProgramHighlight *)&v66);
          if (!*(_BYTE *)(v64 + 425)
            && !(*(_QWORD *)(v64 + 176)
               ? WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance
               : 0))
          {
            *(_BYTE *)(v64 + 432) = 1;
            if (*(_BYTE *)(v64 + 434))
              *(_BYTE *)(v64 + 434) = 0;
            v49 = *(int32x2_t **)(v64 + 40);
            v66 = 0;
            v67 = vcvt_f32_s32(v49[1]);
            LOBYTE(v68) = 1;
            return (WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance *)(*(uint64_t (**)(int32x2_t *, char ***, _QWORD))(*(_QWORD *)v49 + 104))(v49, &v66, 0);
          }
          return result;
        }
      }
    }
LABEL_74:
    v59 = (WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance *)std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance::WebGLMultiDrawInstancedBaseVertexBaseInstance(v59, v60);
  }
  return result;
}

WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance *WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance::WebGLMultiDrawInstancedBaseVertexBaseInstance(WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance *this, WebCore::WebGLRenderingContextBase *a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  _DWORD *v11;
  char v12;
  WTF::StringImpl *v13;

  *((_QWORD *)this + 1) = 0x3100000001;
  *((_QWORD *)this + 2) = a2;
  *(_QWORD *)this = off_1E33DE378;
  v4 = (_DWORD *)*((_QWORD *)a2 + 11);
  if (v4)
    ++v4[2];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v4 + 1968))(v4, &v13);
  v6 = v13;
  v13 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
  else
    --v4[2];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(_DWORD **__return_ptr, WebCore::WebGLRenderingContextBase *, WTF::StringImpl **))(*(_QWORD *)a2 + 48))(&v11, a2, &v13);
  if (v12)
  {
    v8 = v11;
    v11 = 0;
    if (v8)
    {
      if (v8[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
      else
        --v8[2];
    }
  }
  v9 = v13;
  v13 = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v7);
    else
      *(_DWORD *)v9 -= 2;
  }
  return this;
}

uint64_t WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance::supported(WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance *this, WebCore::GraphicsContextGL *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;

  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if ((*(unsigned int (**)(WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance *, WTF::StringImpl **))(*(_QWORD *)this + 1960))(this, &v9))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v4 = (*(uint64_t (**)(WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance *, WTF::StringImpl **))(*(_QWORD *)this + 1960))(this, &v8);
    v5 = v8;
    v8 = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 2)
        WTF::StringImpl::destroy(v5, v3);
      else
        *(_DWORD *)v5 -= 2;
    }
  }
  else
  {
    v4 = 0;
  }
  v6 = v9;
  v9 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v3);
    else
      *(_DWORD *)v6 -= 2;
  }
  return v4;
}

uint64_t WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance::multiDrawArraysInstancedBaseInstanceWEBGL(uint64_t result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7, unsigned int a8, uint64_t a9, unsigned int a10, signed int a11)
{
  uint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v14;
  int v20;
  const char *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  int v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)();
  unsigned int v40;
  unsigned int v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int32x2_t *v55;
  WebCore::InspectorInstrumentation *v56;
  WebCore::ScriptExecutionContext *v57;
  uint64_t v58;
  uint64_t v59;
  WebCore::InspectorInstrumentation *v60;
  WebCore::ScriptExecutionContext *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)();
  _DWORD *v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  uint64_t v69;
  _QWORD v70[5];
  char **v71;
  float32x2_t v72;
  uint64_t v73;
  __int128 v74;
  char v75;
  uint64_t v76;
  char v77;
  char *v78;

  v11 = a10;
  if (!*(_QWORD *)(result + 16))
    return result;
  v12 = *(WTF::StringImpl **)(result + 16);
  if (a11 < 0)
    return (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError(v12, 1281, (uint64_t)"multiDrawArraysInstancedBaseInstanceWEBGL", 42, (uint64_t)"negative drawcount", 19);
  v69 = (uint64_t)v12;
  v14 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v14 == -1)
    goto LABEL_66;
  v71 = &v78;
  v20 = ((uint64_t (*)(char ***, uint64_t))off_1E33DE598[v14])(&v71, a3);
  if (v20 < a11)
  {
LABEL_5:
    v21 = "drawcount out of bounds";
    v22 = 24;
LABEL_10:
    v23 = (WTF::StringImpl *)v69;
    return (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError(v23, 1282, (uint64_t)"multiDrawArraysInstancedBaseInstanceWEBGL", 42, (uint64_t)v21, v22);
  }
  if (v20 - a11 < a4)
  {
    v21 = "firstsOffset out of bounds";
LABEL_9:
    v22 = 27;
    goto LABEL_10;
  }
  v24 = *(unsigned int *)(a5 + 16);
  if ((_DWORD)v24 == -1)
    goto LABEL_66;
  v71 = &v78;
  v25 = ((uint64_t (*)(char ***, uint64_t))off_1E33DE598[v24])(&v71, a5);
  if (v25 < a11)
    goto LABEL_5;
  if (v25 - a11 < a6)
  {
    v21 = "countsOffset out of bounds";
    goto LABEL_9;
  }
  v26 = *(unsigned int *)(a7 + 16);
  if ((_DWORD)v26 == -1)
    goto LABEL_66;
  v71 = &v78;
  v27 = ((uint64_t (*)(char ***, uint64_t))off_1E33DE598[v26])(&v71, a7);
  if (v27 < a11)
  {
    v21 = "drawcount out of bounds";
    v22 = 24;
    v28 = (WTF::StringImpl *)v69;
LABEL_27:
    v23 = v28;
    return (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError(v23, 1282, (uint64_t)"multiDrawArraysInstancedBaseInstanceWEBGL", 42, (uint64_t)v21, v22);
  }
  v28 = (WTF::StringImpl *)v69;
  if (v27 - a11 < a8)
  {
    v21 = "instanceCountsOffset out of bounds";
    v22 = 35;
    goto LABEL_27;
  }
  v29 = *(unsigned int *)(a9 + 16);
  if ((_DWORD)v29 == -1)
    goto LABEL_66;
  v71 = &v78;
  v30 = ((uint64_t (*)(char ***, uint64_t))off_1E33DE5C8[v29])(&v71, a9);
  if (v30 < a11)
  {
    v21 = "drawcount out of bounds";
    v22 = 24;
    goto LABEL_27;
  }
  if (v30 - a11 < a10)
  {
    v21 = "baseInstancesOffset out of bounds";
    v22 = 34;
    goto LABEL_27;
  }
  v35 = *(_QWORD *)(v69 + 144);
  if (*(_BYTE *)(v35 + 73))
  {
    if (!*(_BYTE *)(v35 + 72))
    {
LABEL_64:
      v21 = "no buffer is bound to enabled attribute";
      v23 = (WTF::StringImpl *)v69;
      v22 = 40;
      return (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError(v23, 1282, (uint64_t)"multiDrawArraysInstancedBaseInstanceWEBGL", 42, (uint64_t)v21, v22);
    }
  }
  else
  {
    v36 = *(unsigned int *)(v35 + 68);
    if ((_DWORD)v36)
    {
      v37 = 56 * v36;
      v38 = *(_QWORD *)(v35 + 56) + 8;
      while (1)
      {
        if (*(_BYTE *)(v38 - 8))
        {
          v39 = *(_QWORD *)v38
              ? WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance
              : 0;
          if (!v39 || !*(_DWORD *)(*(_QWORD *)v38 + 24))
            break;
        }
        v38 += 56;
        v37 -= 56;
        if (!v37)
          goto LABEL_40;
      }
      *(_WORD *)(v35 + 72) = 256;
      goto LABEL_64;
    }
LABEL_40:
    *(_WORD *)(v35 + 72) = 257;
  }
  if (!*(_QWORD *)(v69 + 168)
    || (v40 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter)) == 0
    || (v66 = *(WTF::StringImpl **)(v69 + 168),
        (v56 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v69 + 40) + 144))(*(_QWORD *)(v69 + 40))) == 0)
    || (v58 = WebCore::InspectorInstrumentation::instrumentingAgents(v56, v57)) == 0
    || (v59 = *(_QWORD *)(v58 + 96)) == 0
    || (result = WebCore::InspectorCanvasAgent::isWebGLProgramDisabled(v59, v66), (result & 1) == 0))
  {
    WebCore::WebGLRenderingContextBase::clearIfComposited(v69, 0, 0, v31, v32, v33, v34);
    v71 = 0;
    v72 = 0;
    v73 = 0;
    v74 = xmmword_1969F12B0;
    v75 = 0;
    if (*(_QWORD *)(v69 + 168)
      && (v41 = atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter)) != 0
      && (v67 = *(WTF::StringImpl **)(v69 + 168),
          (v60 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v69 + 40) + 144))(*(_QWORD *)(v69 + 40))) != 0)
      && (v62 = WebCore::InspectorInstrumentation::instrumentingAgents(v60, v61)) != 0
      && (v63 = *(_QWORD *)(v62 + 96)) != 0
      && WebCore::InspectorCanvasAgent::isWebGLProgramHighlighted(v63, v67)
      && (*(_QWORD *)(v69 + 176)
        ? (v64 = WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance)
        : (v64 = 0),
          !v64))
    {
      v76 = v69;
      WebCore::ScopedInspectorShaderProgramHighlight::showHighlight((WebCore::ScopedInspectorShaderProgramHighlight *)&v71);
    }
    else
    {
      v76 = 0;
    }
    v42 = *(_DWORD **)(v69 + 88);
    if (v42)
      ++v42[2];
    v65 = v42;
    v43 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v43 != -1)
    {
      v78 = &v77;
      v44 = ((uint64_t (*)(char **, uint64_t))off_1E33DE5A8[v43])(&v78, a3);
      v45 = *(unsigned int *)(a5 + 16);
      if ((_DWORD)v45 != -1)
      {
        v46 = v44;
        v78 = &v77;
        v47 = ((uint64_t (*)(char **, uint64_t))off_1E33DE5A8[v45])(&v78, a5);
        v48 = *(unsigned int *)(a7 + 16);
        if ((_DWORD)v48 != -1)
        {
          v49 = v47;
          v78 = &v77;
          v50 = ((uint64_t (*)(char **, uint64_t))off_1E33DE5A8[v48])(&v78, a7);
          v51 = *(unsigned int *)(a9 + 16);
          if ((_DWORD)v51 != -1)
          {
            v78 = &v77;
            v52 = v50 + 4 * a8;
            v53 = ((uint64_t (*)(char **, uint64_t))off_1E33DE5D8[v51])(&v78, a9);
            v70[0] = a11;
            v70[1] = v46 + 4 * a4;
            v70[2] = v49 + 4 * a6;
            v70[3] = v52;
            v70[4] = v53 + 4 * a10;
            result = (*(uint64_t (**)(_DWORD *, _QWORD, _QWORD *))(*(_QWORD *)v65 + 2152))(v65, a2, v70);
            if (v65[2] == 1)
              result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v65 + 16))(v65);
            else
              --v65[2];
            v11 = v69;
            if (!v76)
            {
LABEL_55:
              if (!*(_BYTE *)(v11 + 425)
                && !(*(_QWORD *)(v11 + 176)
                   ? WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance
                   : 0))
              {
                *(_BYTE *)(v11 + 432) = 1;
                if (*(_BYTE *)(v11 + 434))
                  *(_BYTE *)(v11 + 434) = 0;
                v55 = *(int32x2_t **)(v11 + 40);
                v71 = 0;
                v72 = vcvt_f32_s32(v55[1]);
                LOBYTE(v73) = 1;
                return (*(uint64_t (**)(int32x2_t *, char ***, _QWORD))(*(_QWORD *)v55 + 104))(v55, &v71, 0);
              }
              return result;
            }
LABEL_67:
            result = WebCore::ScopedInspectorShaderProgramHighlight::hideHighlight((WebCore::ScopedInspectorShaderProgramHighlight *)&v71);
            goto LABEL_55;
          }
        }
      }
    }
LABEL_66:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_67;
  }
  return result;
}

uint64_t WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance::multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL(uint64_t result, unsigned int a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t a6, unsigned int a7, uint64_t a8, unsigned int a9, uint64_t a10, unsigned int a11, uint64_t a12, unsigned int a13, signed int a14)
{
  WTF::StringImpl *v14;
  uint64_t v16;
  int v21;
  const char *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)();
  WTF::StringImpl *v44;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  int32x2_t *v63;
  WebCore::InspectorInstrumentation *v64;
  WebCore::ScriptExecutionContext *v65;
  uint64_t v66;
  uint64_t v67;
  WTF::StringImpl *v68;
  WebCore::InspectorInstrumentation *v69;
  WebCore::ScriptExecutionContext *v70;
  uint64_t v71;
  uint64_t v72;
  _BOOL4 isWebGLProgramHighlighted;
  _DWORD *v75;
  WTF::StringImpl *v76;
  WTF::StringImpl *v79;
  _QWORD v80[6];
  _QWORD *v81;
  float32x2_t v82;
  uint64_t v83;
  __int128 v84;
  char v85;
  WTF::StringImpl *v86;
  char v87;
  _QWORD v88[2];

  if (!*(_QWORD *)(result + 16))
    return result;
  v14 = *(WTF::StringImpl **)(result + 16);
  if (a14 < 0)
    return (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError(v14, 1281, (uint64_t)"multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL", 54, (uint64_t)"negative drawcount", 19);
  v79 = v14;
  v16 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v16 == -1)
    goto LABEL_67;
  v81 = v88;
  v21 = ((uint64_t (*)(_QWORD **, uint64_t))off_1E33DE598[v16])(&v81, a3);
  if (v21 < a14)
  {
LABEL_5:
    v22 = "drawcount out of bounds";
    v23 = 24;
LABEL_9:
    v24 = v79;
    return (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError(v24, 1282, (uint64_t)"multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL", 54, (uint64_t)v22, v23);
  }
  if (v21 - a14 < a4)
  {
    v22 = "countsOffset out of bounds";
    v23 = 27;
    goto LABEL_9;
  }
  v25 = *(unsigned int *)(a6 + 16);
  if ((_DWORD)v25 == -1)
    goto LABEL_67;
  v81 = v88;
  v26 = ((uint64_t (*)(_QWORD **, uint64_t))off_1E33DE598[v25])(&v81, a6);
  if (v26 < a14)
    goto LABEL_5;
  if (v26 - a14 < a7)
  {
    v22 = "offsetsOffset out of bounds";
    v23 = 28;
    goto LABEL_9;
  }
  v27 = *(unsigned int *)(a8 + 16);
  if ((_DWORD)v27 == -1)
    goto LABEL_67;
  v81 = v88;
  v28 = ((uint64_t (*)(_QWORD **, uint64_t))off_1E33DE598[v27])(&v81, a8);
  if (v28 < a14)
    goto LABEL_5;
  if (v28 - a14 < a9)
  {
    v22 = "instanceCountsOffset out of bounds";
    v23 = 35;
    goto LABEL_9;
  }
  v29 = *(unsigned int *)(a10 + 16);
  if ((_DWORD)v29 == -1)
    goto LABEL_67;
  v81 = v88;
  v30 = ((uint64_t (*)(_QWORD **, uint64_t))off_1E33DE598[v29])(&v81, a10);
  if (v30 < a14)
    goto LABEL_5;
  if (v30 - a14 < a11)
  {
    v22 = "baseVerticesOffset out of bounds";
    v23 = 33;
    goto LABEL_9;
  }
  v31 = *(unsigned int *)(a12 + 16);
  if ((_DWORD)v31 == -1)
    goto LABEL_67;
  v81 = v88;
  v32 = ((uint64_t (*)(_QWORD **))off_1E33DE5C8[v31])(&v81);
  if (v32 < a14)
    goto LABEL_5;
  if (v32 - a14 < a13)
  {
    v22 = "baseInstancesOffset out of bounds";
    v23 = 34;
    goto LABEL_9;
  }
  v37 = (uint64_t)v79;
  v38 = *((_QWORD *)v79 + 18);
  if (*(_BYTE *)(v38 + 73))
  {
    if (!*(_BYTE *)(v38 + 72))
    {
LABEL_65:
      v22 = "no buffer is bound to enabled attribute";
      v24 = v79;
      v23 = 40;
      return (uint64_t)WebCore::WebGLRenderingContextBase::synthesizeGLError(v24, 1282, (uint64_t)"multiDrawElementsInstancedBaseVertexBaseInstanceWEBGL", 54, (uint64_t)v22, v23);
    }
  }
  else
  {
    v39 = *(unsigned int *)(v38 + 68);
    if ((_DWORD)v39)
    {
      v40 = 56 * v39;
      v41 = *(_QWORD *)(v38 + 56) + 8;
      while (1)
      {
        if (*(_BYTE *)(v41 - 8))
        {
          v42 = *(_QWORD *)v41
              ? WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance
              : 0;
          if (!v42 || !*(_DWORD *)(*(_QWORD *)v41 + 24))
            break;
        }
        v41 += 56;
        v40 -= 56;
        if (!v40)
          goto LABEL_40;
      }
      *(_WORD *)(v38 + 72) = 256;
      goto LABEL_65;
    }
LABEL_40:
    *(_WORD *)(v38 + 72) = 257;
  }
  if (!*((_QWORD *)v79 + 21))
    goto LABEL_43;
  if (!atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    goto LABEL_43;
  v76 = (WTF::StringImpl *)*((_QWORD *)v79 + 21);
  v64 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v79 + 5) + 144))(*((_QWORD *)v79 + 5));
  v37 = (uint64_t)v79;
  if (!v64
    || (v66 = WebCore::InspectorInstrumentation::instrumentingAgents(v64, v65), v37 = (uint64_t)v79, !v66)
    || (v67 = *(_QWORD *)(v66 + 96)) == 0
    || (result = WebCore::InspectorCanvasAgent::isWebGLProgramDisabled(v67, v76), v37 = (uint64_t)v79, (result & 1) == 0))
  {
LABEL_43:
    WebCore::WebGLRenderingContextBase::clearIfComposited(v37, 0, 0, v33, v34, v35, v36);
    v44 = v79;
    v81 = 0;
    v82 = 0;
    v83 = 0;
    v84 = xmmword_1969F12B0;
    v85 = 0;
    if (!*((_QWORD *)v79 + 21))
      goto LABEL_45;
    if (!atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
      goto LABEL_45;
    v68 = (WTF::StringImpl *)*((_QWORD *)v79 + 21);
    v69 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v79 + 5) + 144))(*((_QWORD *)v79 + 5));
    v44 = v79;
    if (!v69)
      goto LABEL_45;
    v71 = WebCore::InspectorInstrumentation::instrumentingAgents(v69, v70);
    v44 = v79;
    if (!v71)
      goto LABEL_45;
    v72 = *(_QWORD *)(v71 + 96);
    if (!v72)
      goto LABEL_45;
    isWebGLProgramHighlighted = WebCore::InspectorCanvasAgent::isWebGLProgramHighlighted(v72, v68);
    v44 = v79;
    if (!isWebGLProgramHighlighted)
      goto LABEL_45;
    if (!(*((_QWORD *)v79 + 22)
         ? WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance
         : 0))
    {
      v86 = v79;
      WebCore::ScopedInspectorShaderProgramHighlight::showHighlight((WebCore::ScopedInspectorShaderProgramHighlight *)&v81);
      v44 = v79;
    }
    else
    {
LABEL_45:
      v86 = 0;
    }
    v46 = (_DWORD *)*((_QWORD *)v44 + 11);
    if (v46)
      ++v46[2];
    v75 = v46;
    v47 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v47 != -1)
    {
      v88[0] = &v87;
      v48 = ((uint64_t (*)(_QWORD *, uint64_t))off_1E33DE5A8[v47])(v88, a3);
      v49 = *(unsigned int *)(a6 + 16);
      if ((_DWORD)v49 != -1)
      {
        v50 = v48;
        v88[0] = &v87;
        v51 = ((uint64_t (*)(_QWORD *, uint64_t))off_1E33DE5A8[v49])(v88, a6);
        v52 = *(unsigned int *)(a8 + 16);
        if ((_DWORD)v52 != -1)
        {
          v53 = v51;
          v88[0] = &v87;
          v54 = ((uint64_t (*)(_QWORD *, uint64_t))off_1E33DE5A8[v52])(v88, a8);
          v55 = *(unsigned int *)(a10 + 16);
          if ((_DWORD)v55 != -1)
          {
            v56 = v54;
            v88[0] = &v87;
            v57 = ((uint64_t (*)(_QWORD *, uint64_t))off_1E33DE5A8[v55])(v88, a10);
            v58 = *(unsigned int *)(a12 + 16);
            if ((_DWORD)v58 != -1)
            {
              v88[0] = &v87;
              v59 = v57 + 4 * a11;
              v60 = ((uint64_t (*)(_QWORD *))off_1E33DE5D8[v58])(v88);
              v80[0] = a14;
              v80[1] = v50 + 4 * a4;
              v80[2] = v53 + 4 * a7;
              v80[3] = v56 + 4 * a9;
              v80[4] = v59;
              v80[5] = v60 + 4 * a13;
              result = (*(uint64_t (**)(_DWORD *, _QWORD, _QWORD *, _QWORD))(*(_QWORD *)v75 + 2160))(v75, a2, v80, a5);
              if (v75[2] == 1)
                result = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v75 + 16))(v75);
              else
                --v75[2];
              v61 = v79;
              if (!v86)
              {
LABEL_56:
                if (!*((_BYTE *)v61 + 425)
                  && !(*((_QWORD *)v61 + 22)
                     ? WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance
                     : 0))
                {
                  *((_BYTE *)v61 + 432) = 1;
                  if (*((_BYTE *)v61 + 434))
                    *((_BYTE *)v79 + 434) = 0;
                  v63 = (int32x2_t *)*((_QWORD *)v79 + 5);
                  v81 = 0;
                  v82 = vcvt_f32_s32(v63[1]);
                  LOBYTE(v83) = 1;
                  return (*(uint64_t (**)(int32x2_t *, _QWORD **, _QWORD))(*(_QWORD *)v63 + 104))(v63, &v81, 0);
                }
                return result;
              }
LABEL_68:
              result = WebCore::ScopedInspectorShaderProgramHighlight::hideHighlight((WebCore::ScopedInspectorShaderProgramHighlight *)&v81);
              v61 = v79;
              goto LABEL_56;
            }
          }
        }
      }
    }
LABEL_67:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_68;
  }
  return result;
}

WebCore::WebGLPolygonMode *WebCore::WebGLPolygonMode::WebGLPolygonMode(WebCore::WebGLPolygonMode *this, WebCore::WebGLRenderingContextBase *a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v10;

  *((_QWORD *)this + 1) = 0x3200000001;
  *((_QWORD *)this + 2) = a2;
  *(_QWORD *)this = off_1E33DE3C0;
  v4 = (_DWORD *)*((_QWORD *)a2 + 11);
  if (v4)
    ++v4[2];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  (*(void (**)(_DWORD *, WTF::StringImpl **))(*(_QWORD *)v4 + 1968))(v4, &v10);
  v6 = v10;
  v10 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
  else
    --v4[2];
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::WebGLRenderingContextBase::printToConsole((uint64_t)a2, 1, (uint64_t)&v10);
  v8 = v10;
  v10 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 2)
      WTF::StringImpl::destroy(v8, v7);
    else
      *(_DWORD *)v8 -= 2;
  }
  return this;
}

WebCore::WebGLProgram *WebCore::WebGLProgram::WebGLProgram(WebCore::WebGLProgram *this, WebCore::WebGLRenderingContextBase *a2, int a3)
{
  void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::ScriptExecutionContext *v15;
  int v17;
  _BYTE v19[24];
  WebCore::WebGLRenderingContextBase *v20;
  WebCore::WebGLProgram *v21;

  *((_DWORD *)this + 2) = 1;
  *(_QWORD *)this = off_1E33DE398;
  if (!*((_QWORD *)a2 + 115))
  {
    v7 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 8) = (char *)a2 + 8;
    v8 = (unsigned int *)*((_QWORD *)a2 + 115);
    *((_QWORD *)a2 + 115) = v7;
    if (v8)
    {
      do
      {
        v9 = __ldaxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
      {
        atomic_store(1u, v8);
        WTF::fastFree((WTF *)v8, v6);
      }
    }
  }
  v11 = (unsigned int *)*((_QWORD *)a2 + 115);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 + 1, v11));
  *((_QWORD *)this + 2) = v11;
  *((_DWORD *)this + 6) = a3;
  *((_DWORD *)this + 7) = 0;
  *((_BYTE *)this + 32) = 0;
  v13 = *((_QWORD *)a2 + 7);
  if (v13)
  {
    v14 = *(_QWORD *)(v13 + 8);
    if (v14)
      v15 = (WebCore::ScriptExecutionContext *)(v14 - 96);
    else
      v15 = 0;
  }
  else
  {
    v15 = 0;
  }
  *((_QWORD *)this + 5) = &off_1E33A18C0;
  *((_QWORD *)this + 6) = 0;
  WebCore::ContextDestructionObserver::observeContext((WebCore::WebGLProgram *)((char *)this + 40), v15);
  *(_QWORD *)this = off_1E33DE3E0;
  *((_QWORD *)this + 5) = &unk_1E33DE410;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_BYTE *)this + 80) = 1;
  *((_DWORD *)this + 21) = 0;
  *((_DWORD *)this + 22) = 0;
  if (__ldaxr(WebCore::WebGLProgram::s_instancesLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::WebGLProgram::s_instancesLock))
  {
    goto LABEL_16;
  }
  MEMORY[0x19AEA534C](WebCore::WebGLProgram::s_instancesLock);
LABEL_16:
  {
    WebCore::WebGLProgram::instances(void)::instances = 0;
  }
  v20 = a2;
  v21 = this;
  WTF::HashMap<WebCore::WebGLProgram *,WebCore::WebGLRenderingContextBase *,WTF::DefaultHash<WebCore::WebGLProgram *>,WTF::HashTraits<WebCore::WebGLProgram *>,WTF::HashTraits<WebCore::WebGLRenderingContextBase *>,WTF::HashTableTraits>::add<WebCore::WebGLRenderingContextBase *>(&WebCore::WebGLProgram::instances(void)::instances, (uint64_t *)&v21, (uint64_t *)&v20, (uint64_t)v19);
  v17 = __ldxr(WebCore::WebGLProgram::s_instancesLock);
  if (v17 == 1)
  {
    if (!__stlxr(0, WebCore::WebGLProgram::s_instancesLock))
      return this;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::WebGLProgram::s_instancesLock);
  return this;
}

uint64_t *WTF::HashMap<WebCore::WebGLProgram *,WebCore::WebGLRenderingContextBase *,WTF::DefaultHash<WebCore::WebGLProgram *>,WTF::HashTraits<WebCore::WebGLProgram *>,WTF::HashTraits<WebCore::WebGLRenderingContextBase *>,WTF::HashTableTraits>::add<WebCore::WebGLRenderingContextBase *>@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v6 = result;
  v8 = *result;
  if (*result
    || (result = (uint64_t *)WTF::HashTable<void const*,WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,JSC::Bindings::ObjcInstance *,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<JSC::Bindings::ObjcInstance *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(result, 8u, 0), (v8 = *v6) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = *a2;
  v12 = ~(*a2 << 32) + *a2;
  v13 = 9
      * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
  v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
  v15 = v10 & ((v14 >> 31) ^ v14);
  v16 = (uint64_t *)(v8 + 16 * v15);
  v17 = *v16;
  if (*v16)
  {
    v18 = 0;
    v19 = 1;
    do
    {
      if (v17 == v11)
      {
        if ((v9 & 1) != 0)
          v22 = 0;
        else
          v22 = *(unsigned int *)(v8 - 4);
        v28 = 0;
        v29 = v8 + 16 * v22;
        goto LABEL_33;
      }
      if (v17 == -1)
        v18 = v16;
      v15 = (v15 + v19) & v10;
      v16 = (uint64_t *)(v8 + 16 * v15);
      v17 = *v16;
      ++v19;
    }
    while (*v16);
    if (v18)
    {
      *v18 = 0;
      v18[1] = 0;
      --*(_DWORD *)(*v6 - 16);
      v11 = *a2;
      v16 = v18;
    }
  }
  *v16 = v11;
  v16[1] = *a3;
  v20 = *v6;
  if (*v6)
    v21 = *(_DWORD *)(v20 - 12) + 1;
  else
    v21 = 1;
  *(_DWORD *)(v20 - 12) = v21;
  v23 = *v6;
  if (*v6)
    v24 = *(_DWORD *)(v23 - 12);
  else
    v24 = 0;
  v25 = (*(_DWORD *)(v23 - 16) + v24);
  v26 = *(unsigned int *)(v23 - 4);
  if (v26 > 0x400)
  {
    if (v26 <= 2 * v25)
      goto LABEL_28;
  }
  else if (3 * v26 <= 4 * v25)
  {
    if (!(_DWORD)v26)
    {
      v27 = 8;
      goto LABEL_29;
    }
LABEL_28:
    v27 = (_DWORD)v26 << (6 * *(_DWORD *)(v23 - 12) >= (2 * v26));
LABEL_29:
    result = (uint64_t *)WTF::HashTable<void const*,WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,JSC::Bindings::ObjcInstance *,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<JSC::Bindings::ObjcInstance *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(v6, v27, v16);
    v16 = result;
    v23 = *v6;
    if (*v6)
      v26 = *(unsigned int *)(v23 - 4);
    else
      v26 = 0;
  }
  v29 = v23 + 16 * v26;
  v28 = 1;
LABEL_33:
  *(_QWORD *)a4 = v16;
  *(_QWORD *)(a4 + 8) = v29;
  *(_BYTE *)(a4 + 16) = v28;
  return result;
}

void WebCore::WebGLProgram::~WebGLProgram(WebCore::WebGLProgram *this, WebCore::ScriptExecutionContext *a2)
{
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  WebCore::WebGLProgram *v10;
  int v11;
  int v12;
  unsigned int v13;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  void *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const WTF::StringImpl *v26;
  WTF::StringImpl *v27;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v23 = *((_QWORD *)this + 6);
    if (v23)
    {
      v24 = *(_QWORD *)(v23 + 8);
      if (v24)
      {
        v25 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)(v24 - 96), a2);
        if (v25)
        {
          v27 = *(WTF::StringImpl **)(v25 + 96);
          if (v27)
            WebCore::InspectorCanvasAgent::willDestroyWebGLProgram(v27, this, v26);
        }
      }
    }
  }
  if (__ldaxr(WebCore::WebGLProgram::s_instancesLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::WebGLProgram::s_instancesLock))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](WebCore::WebGLProgram::s_instancesLock);
LABEL_6:
  {
    if (WebCore::WebGLProgram::instances(void)::instances)
    {
      v5 = *(_DWORD *)(WebCore::WebGLProgram::instances(void)::instances - 8);
      v6 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
      v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
      v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
      v9 = v5 & ((v8 >> 31) ^ v8);
      v10 = *(WebCore::WebGLProgram **)(WebCore::WebGLProgram::instances(void)::instances + 16 * v9);
      if (v10 != this)
      {
        v11 = 1;
        while (v10)
        {
          v9 = ((_DWORD)v9 + v11) & v5;
          v10 = *(WebCore::WebGLProgram **)(WebCore::WebGLProgram::instances(void)::instances + 16 * v9);
          ++v11;
          if (v10 == this)
            goto LABEL_14;
        }
        v9 = *(unsigned int *)(WebCore::WebGLProgram::instances(void)::instances - 4);
      }
LABEL_14:
      if (v9 != *(_DWORD *)(WebCore::WebGLProgram::instances(void)::instances - 4))
      {
        *(_QWORD *)(WebCore::WebGLProgram::instances(void)::instances + 16 * v9) = -1;
        ++*(_DWORD *)(WebCore::WebGLProgram::instances(void)::instances - 16);
        v12 = WebCore::WebGLProgram::instances(void)::instances
            ? *(_DWORD *)(WebCore::WebGLProgram::instances(void)::instances - 12) - 1
            : -1;
        *(_DWORD *)(WebCore::WebGLProgram::instances(void)::instances - 12) = v12;
        if (WebCore::WebGLProgram::instances(void)::instances)
        {
          v13 = *(_DWORD *)(WebCore::WebGLProgram::instances(void)::instances - 4);
          if (6 * *(_DWORD *)(WebCore::WebGLProgram::instances(void)::instances - 12) < v13 && v13 >= 9)
            WTF::HashTable<void const*,WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void const*,JSC::Bindings::ObjcInstance *>>,WTF::DefaultHash<void const*>,WTF::HashMap<void const*,JSC::Bindings::ObjcInstance *,WTF::DefaultHash<void const*>,WTF::HashTraits<void const*>,WTF::HashTraits<JSC::Bindings::ObjcInstance *>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void const*>>::rehash(&WebCore::WebGLProgram::instances(void)::instances, v13 >> 1, 0);
        }
      }
    }
  }
  else
  {
    WebCore::WebGLProgram::instances(void)::instances = 0;
  }
  v15 = __ldxr(WebCore::WebGLProgram::s_instancesLock);
  if (v15 == 1)
  {
    if (!__stlxr(0, WebCore::WebGLProgram::s_instancesLock))
      goto LABEL_30;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)WebCore::WebGLProgram::s_instancesLock);
LABEL_30:
  v16 = *((_QWORD *)this + 2);
  if (v16 && *(_QWORD *)(v16 + 8))
    WebCore::WebGLObject::runDestructor(this);
  v17 = (_DWORD *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v17)
  {
    if (v17[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v17 + 8))(v17);
    else
      --v17[2];
  }
  v18 = (_DWORD *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v18)
  {
    if (v18[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
    else
      --v18[2];
  }
  WebCore::ContextDestructionObserver::~ContextDestructionObserver((WebCore::WebGLProgram *)((char *)this + 40), a2);
  *(_QWORD *)this = off_1E33DE398;
  v20 = (unsigned int *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v20)
  {
    do
    {
      v21 = __ldaxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
    {
      atomic_store(1u, v20);
      WTF::fastFree((WTF *)v20, v19);
    }
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::WebGLProgram::~WebGLProgram(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::WebGLProgram::~WebGLProgram(WebCore::WebGLProgram *this, WebCore::ScriptExecutionContext *a2)
{
  WebCore::WebGLProgram::~WebGLProgram((WebCore::WebGLProgram *)((char *)this - 40), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::WebGLProgram::~WebGLProgram((WebCore::WebGLProgram *)((char *)this - 40), a2);
  WTF::fastFree(v2, v3);
}

unsigned int *WebCore::WebGLProgram::contextDestroyed(WebCore::WebGLProgram *this, WebCore::ScriptExecutionContext *a2)
{
  unsigned int *result;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v7 = *((_QWORD *)this + 6);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)(v8 - 96), a2);
        if (v9)
        {
          v11 = *(WTF::StringImpl **)(v9 + 96);
          if (v11)
            WebCore::InspectorCanvasAgent::willDestroyWebGLProgram(v11, this, v10);
        }
      }
    }
  }
  result = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (result)
  {
    do
    {
      v5 = __ldaxr(result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, result));
    if (!v6)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

unsigned int *`non-virtual thunk to'WebCore::WebGLProgram::contextDestroyed(WebCore::WebGLProgram *this, WebCore::ScriptExecutionContext *a2)
{
  unsigned int *result;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v7 = *((_QWORD *)this + 1);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + 8);
      if (v8)
      {
        v9 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)(v8 - 96), a2);
        if (v9)
        {
          v11 = *(WTF::StringImpl **)(v9 + 96);
          if (v11)
            WebCore::InspectorCanvasAgent::willDestroyWebGLProgram(v11, (WebCore::WebGLProgram *)((char *)this - 40), v10);
        }
      }
    }
  }
  result = (unsigned int *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (result)
  {
    do
    {
      v5 = __ldaxr(result);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, result));
    if (!v6)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, a2);
    }
  }
  return result;
}

_DWORD *WebCore::WebGLProgram::deleteObjectImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _DWORD *result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  result = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 264))(a3, a4);
  v8 = *(_QWORD *)(a1 + 64);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 + 28);
    if (v9)
      *(_DWORD *)(v8 + 28) = --v9;
    if (*(_BYTE *)(v8 + 32))
    {
      *(_BYTE *)(v8 + 32) = 1;
      if (*(_DWORD *)(v8 + 24))
      {
        v10 = *(_QWORD *)(v8 + 16);
        if (v10)
        {
          if (!v9)
          {
            if (*(_QWORD *)(v10 + 8))
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, a2, a3);
              if (!*(_DWORD *)(v8 + 28))
                *(_DWORD *)(v8 + 24) = 0;
            }
          }
        }
      }
    }
    result = *(_DWORD **)(a1 + 64);
    *(_QWORD *)(a1 + 64) = 0;
    if (result)
    {
      if (result[2] == 1)
        result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
  }
  v11 = *(_QWORD *)(a1 + 72);
  if (v11)
  {
    v12 = *(_DWORD *)(v11 + 28);
    if (v12)
      *(_DWORD *)(v11 + 28) = --v12;
    if (*(_BYTE *)(v11 + 32))
    {
      *(_BYTE *)(v11 + 32) = 1;
      if (*(_DWORD *)(v11 + 24))
      {
        v13 = *(_QWORD *)(v11 + 16);
        if (v13)
        {
          if (!v12)
          {
            if (*(_QWORD *)(v13 + 8))
            {
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, a2, a3);
              if (!*(_DWORD *)(v11 + 28))
                *(_DWORD *)(v11 + 24) = 0;
            }
          }
        }
      }
    }
    result = *(_DWORD **)(a1 + 72);
    *(_QWORD *)(a1 + 72) = 0;
    if (result)
    {
      if (result[2] == 1)
        return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
      else
        --result[2];
    }
  }
  return result;
}

uint64_t WebCore::WebGLProgram::addMembersToOpaqueRoots(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;

  v4 = result;
  v5 = *(_QWORD *)(result + 64);
  if (v5)
    v6 = *(_BYTE *)(a3 + 130) == 0;
  else
    v6 = 0;
  if (v6)
  {
    result = *(_QWORD *)(a3 + 120);
    v7 = *(_QWORD *)(result + 48);
    v8 = *(_DWORD *)(v7 + 4);
    v9 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = v12;
    while (1)
    {
      v14 = *(_QWORD *)(v7 + 8 * v13 + 16);
      if (!v14)
        break;
      if (v5 == v14)
        goto LABEL_15;
      v13 = (v13 + 1) & v8;
      if (v13 == v12)
      {
        __break(0xC471u);
        JUMPOUT(0x195D1777CLL);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a3 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 144))(a3, v5);
      ++*(_QWORD *)(a3 + 72);
    }
  }
LABEL_15:
  v15 = *(_QWORD *)(v4 + 72);
  if (v15)
    v16 = *(_BYTE *)(a3 + 130) == 0;
  else
    v16 = 0;
  if (v16)
  {
    result = *(_QWORD *)(a3 + 120);
    v17 = *(_QWORD *)(result + 48);
    v18 = *(_DWORD *)(v17 + 4);
    v19 = (~(v15 << 32) + v15) ^ ((unint64_t)(~(v15 << 32) + v15) >> 22);
    v20 = 9 * ((v19 + ~(v19 << 13)) ^ ((v19 + ~(v19 << 13)) >> 8));
    v21 = (v20 ^ (v20 >> 15)) + ~((v20 ^ (v20 >> 15)) << 27);
    v22 = v18 & ((v21 >> 31) ^ v21);
    v23 = v22;
    while (1)
    {
      v24 = *(_QWORD *)(v17 + 8 * v23 + 16);
      if (!v24)
        break;
      if (v15 == v24)
        return result;
      v23 = (v23 + 1) & v18;
      if (v23 == v22)
      {
        __break(0xC471u);
        JUMPOUT(0x195D1783CLL);
      }
    }
    result = WTF::ConcurrentPtrHashSet::addSlow();
    if ((_DWORD)result)
    {
      if (*(_BYTE *)(a3 + 131))
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 144))(a3, v15);
      ++*(_QWORD *)(a3 + 72);
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17WebGLRenderbufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_16WebGLFramebuffer17TextureAttachmentENSH_22TextureLayerAttachmentEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJSG_SI_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 8);
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17WebGLRenderbufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_16WebGLFramebuffer17TextureAttachmentENSH_22TextureLayerAttachmentEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJSG_SI_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 8);
  *a2 = v3;
  a2[1] = a3[1];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17WebGLRenderbufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_16WebGLFramebuffer17TextureAttachmentENSH_22TextureLayerAttachmentEEEEE19__generic_constructB8sn180100IRKNS0_18__copy_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRST_OT0_E_JRNS0_6__baseILSO_1EJSG_SI_SJ_EEERKS11_EEEDcST_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  if (*a3)
    ++*(_DWORD *)(v3 + 8);
  *a2 = v3;
  a2[1] = a3[1];
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::entryContextSetAttachment(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&,WebCore::GraphicsContextGL *,unsigned int,unsigned int)::$_0,WebCore::entryContextSetAttachment(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&,WebCore::GraphicsContextGL *,unsigned int,unsigned int)::$_1,WebCore::entryContextSetAttachment(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&,WebCore::GraphicsContextGL *,unsigned int,unsigned int)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&>(unsigned int ***a1, _DWORD **a2)
{
  unsigned int **v2;
  _DWORD *v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  if (!*a2)
    return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(**(_QWORD **)*v2 + 392))(*(_QWORD *)*v2, *v2[1], *v2[2], 36161, 0);
  ++v3[2];
  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(**(_QWORD **)*v2 + 392))(*(_QWORD *)*v2, *v2[1], *v2[2], 36161, v3[6]);
  if (v3[2] == 1)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::entryContextSetAttachment(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&,WebCore::GraphicsContextGL *,unsigned int,unsigned int)::$_0,WebCore::entryContextSetAttachment(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&,WebCore::GraphicsContextGL *,unsigned int,unsigned int)::$_1,WebCore::entryContextSetAttachment(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&,WebCore::GraphicsContextGL *,unsigned int,unsigned int)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v2 = *a1;
  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    ++v3[2];
  v4 = *(unsigned int *)(a2 + 8);
  v5 = *(unsigned int *)(a2 + 12);
  v6 = **(_QWORD **)(v2 + 24);
  v7 = **(unsigned int **)(v2 + 32);
  v8 = **(unsigned int **)(v2 + 40);
  if (!v3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6 + 400))(v6, v7, v8, v4, 0, v5);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v6 + 400))(v6, v7, v8, v4, v3[6], v5);
  if (v3[2] == 1)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::entryContextSetAttachment(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&,WebCore::GraphicsContextGL *,unsigned int,unsigned int)::$_0,WebCore::entryContextSetAttachment(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&,WebCore::GraphicsContextGL *,unsigned int,unsigned int)::$_1,WebCore::entryContextSetAttachment(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&,WebCore::GraphicsContextGL *,unsigned int,unsigned int)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v2 = *a1;
  v3 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    ++v3[2];
  v4 = *(unsigned int *)(a2 + 8);
  v5 = *(unsigned int *)(a2 + 12);
  v6 = **(_QWORD **)(v2 + 48);
  v7 = **(unsigned int **)(v2 + 56);
  v8 = **(unsigned int **)(v2 + 64);
  if (!v3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v6 + 1264))(v6, v7, v8, 0, v4, v5);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v6 + 1264))(v6, v7, v8, v3[6], v4, v5);
  if (v3[2] == 1)
    return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::entryObject(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&)::$_0,WebCore::entryObject(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&)::$_1,WebCore::entryObject(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
    ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::entryObject(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&)::$_0,WebCore::entryObject(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&)::$_1,WebCore::entryObject(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
    ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::entryObject(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&)::$_0,WebCore::entryObject(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&)::$_1,WebCore::entryObject(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  if (*a1)
    ++*(_DWORD *)(v2 + 8);
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17WebGLRenderbufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_16WebGLFramebuffer17TextureAttachmentENSH_22TextureLayerAttachmentEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJSG_SI_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17WebGLRenderbufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_16WebGLFramebuffer17TextureAttachmentENSH_22TextureLayerAttachmentEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJSG_SI_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  a2[1] = a3[1];
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17WebGLRenderbufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_16WebGLFramebuffer17TextureAttachmentENSH_22TextureLayerAttachmentEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISK_LNS0_6_TraitE1EEEEEvRSL_OT_EUlRSR_OT0_E_JRNS0_6__baseILSO_1EJSG_SI_SJ_EEEOSZ_EEEDcSR_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
  a2[1] = a3[1];
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::entryDetachAndClear(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> &,WTF::AbstractLocker const&,WebCore::GraphicsContextGL *)::$_0,WebCore::entryDetachAndClear(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> &,WTF::AbstractLocker const&,WebCore::GraphicsContextGL *)::$_1,WebCore::entryDetachAndClear(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> &,WTF::AbstractLocker const&,WebCore::GraphicsContextGL *)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> &>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *result;

  v3 = **a1;
  v4 = *(_QWORD *)(*a1)[1];
  v5 = *a2;
  v6 = *(_DWORD *)(*a2 + 28);
  if (v6)
    *(_DWORD *)(v5 + 28) = --v6;
  if (*(_BYTE *)(v5 + 32))
  {
    *(_BYTE *)(v5 + 32) = 1;
    if (*(_DWORD *)(v5 + 24))
    {
      v7 = *(_QWORD *)(v5 + 16);
      if (v7)
      {
        if (!v6)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
          {
            if (!v4 && !*(_QWORD *)(v8 + 80)
              || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3), !*(_DWORD *)(v5 + 28)))
            {
              *(_DWORD *)(v5 + 24) = 0;
            }
          }
        }
      }
    }
  }
  result = (_DWORD *)*a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::entryDetachAndClear(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> &,WTF::AbstractLocker const&,WebCore::GraphicsContextGL *)::$_0,WebCore::entryDetachAndClear(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> &,WTF::AbstractLocker const&,WebCore::GraphicsContextGL *)::$_1,WebCore::entryDetachAndClear(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> &,WTF::AbstractLocker const&,WebCore::GraphicsContextGL *)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> &>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *result;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  v4 = **(_QWORD **)(*(_QWORD *)a1 + 24);
  v5 = *a2;
  v6 = *(_DWORD *)(*a2 + 28);
  if (v6)
    *(_DWORD *)(v5 + 28) = --v6;
  if (*(_BYTE *)(v5 + 32))
  {
    *(_BYTE *)(v5 + 32) = 1;
    if (*(_DWORD *)(v5 + 24))
    {
      v7 = *(_QWORD *)(v5 + 16);
      if (v7)
      {
        if (!v6)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
          {
            if (!v4 && !*(_QWORD *)(v8 + 80)
              || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3), !*(_DWORD *)(v5 + 28)))
            {
              *(_DWORD *)(v5 + 24) = 0;
            }
          }
        }
      }
    }
  }
  result = (_DWORD *)*a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::entryDetachAndClear(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> &,WTF::AbstractLocker const&,WebCore::GraphicsContextGL *)::$_0,WebCore::entryDetachAndClear(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> &,WTF::AbstractLocker const&,WebCore::GraphicsContextGL *)::$_1,WebCore::entryDetachAndClear(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> &,WTF::AbstractLocker const&,WebCore::GraphicsContextGL *)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> &>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *result;

  v3 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  v4 = **(_QWORD **)(*(_QWORD *)a1 + 40);
  v5 = *a2;
  v6 = *(_DWORD *)(*a2 + 28);
  if (v6)
    *(_DWORD *)(v5 + 28) = --v6;
  if (*(_BYTE *)(v5 + 32))
  {
    *(_BYTE *)(v5 + 32) = 1;
    if (*(_DWORD *)(v5 + 24))
    {
      v7 = *(_QWORD *)(v5 + 16);
      if (v7)
      {
        if (!v6)
        {
          v8 = *(_QWORD *)(v7 + 8);
          if (v8)
          {
            if (!v4 && !*(_QWORD *)(v8 + 80)
              || ((*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v3), !*(_DWORD *)(v5 + 28)))
            {
              *(_DWORD *)(v5 + 24) = 0;
            }
          }
        }
      }
    }
  }
  result = (_DWORD *)*a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::entryAddMembersToOpaqueRoots(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&,WTF::AbstractLocker const&,JSC::AbstractSlotVisitor &)::$_0,WebCore::entryAddMembersToOpaqueRoots(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&,WTF::AbstractLocker const&,JSC::AbstractSlotVisitor &)::$_1,WebCore::entryAddMembersToOpaqueRoots(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&,WTF::AbstractLocker const&,JSC::AbstractSlotVisitor &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&>(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  v2 = *a2;
  if (*a2)
  {
    v3 = **(_QWORD **)result;
    if (!*(_BYTE *)(v3 + 130))
    {
      result = *(_QWORD *)(v3 + 120);
      v4 = *(_QWORD *)(result + 48);
      v5 = *(_DWORD *)(v4 + 4);
      v6 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
      v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
      v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
      v9 = v5 & ((v8 >> 31) ^ v8);
      v10 = v9;
      while (1)
      {
        v11 = *(_QWORD *)(v4 + 8 * v10 + 16);
        if (!v11)
          break;
        if (v2 == v11)
          return result;
        v10 = (v10 + 1) & v5;
        if (v10 == v9)
        {
          __break(0xC471u);
          JUMPOUT(0x195D17E88);
        }
      }
      result = WTF::ConcurrentPtrHashSet::addSlow();
      if ((_DWORD)result)
      {
        if (*(_BYTE *)(v3 + 131))
          result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 144))(v3, v2);
        ++*(_QWORD *)(v3 + 72);
      }
    }
  }
  return result;
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::entryAddMembersToOpaqueRoots(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&,WTF::AbstractLocker const&,JSC::AbstractSlotVisitor &)::$_0,WebCore::entryAddMembersToOpaqueRoots(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&,WTF::AbstractLocker const&,JSC::AbstractSlotVisitor &)::$_1,WebCore::entryAddMembersToOpaqueRoots(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&,WTF::AbstractLocker const&,JSC::AbstractSlotVisitor &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&>(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(_QWORD *)(*result + 8);
    if (!*(_BYTE *)(v3 + 130))
    {
      result = *(_QWORD **)(v3 + 120);
      v4 = result[6];
      v5 = *(_DWORD *)(v4 + 4);
      v6 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
      v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
      v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
      v9 = v5 & ((v8 >> 31) ^ v8);
      v10 = v9;
      while (1)
      {
        v11 = *(_QWORD *)(v4 + 8 * v10 + 16);
        if (!v11)
          break;
        if (v2 == v11)
          return result;
        v10 = (v10 + 1) & v5;
        if (v10 == v9)
        {
          __break(0xC471u);
          JUMPOUT(0x195D17F7CLL);
        }
      }
      result = (_QWORD *)WTF::ConcurrentPtrHashSet::addSlow();
      if ((_DWORD)result)
      {
        if (*(_BYTE *)(v3 + 131))
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 144))(v3, v2);
        ++*(_QWORD *)(v3 + 72);
      }
    }
  }
  return result;
}

_QWORD *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::entryAddMembersToOpaqueRoots(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&,WTF::AbstractLocker const&,JSC::AbstractSlotVisitor &)::$_0,WebCore::entryAddMembersToOpaqueRoots(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&,WTF::AbstractLocker const&,JSC::AbstractSlotVisitor &)::$_1,WebCore::entryAddMembersToOpaqueRoots(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&,WTF::AbstractLocker const&,JSC::AbstractSlotVisitor &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&>(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;

  v2 = *a2;
  if (*a2)
  {
    v3 = *(_QWORD *)(*result + 16);
    if (!*(_BYTE *)(v3 + 130))
    {
      result = *(_QWORD **)(v3 + 120);
      v4 = result[6];
      v5 = *(_DWORD *)(v4 + 4);
      v6 = (~(v2 << 32) + v2) ^ ((unint64_t)(~(v2 << 32) + v2) >> 22);
      v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
      v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
      v9 = v5 & ((v8 >> 31) ^ v8);
      v10 = v9;
      while (1)
      {
        v11 = *(_QWORD *)(v4 + 8 * v10 + 16);
        if (!v11)
          break;
        if (v2 == v11)
          return result;
        v10 = (v10 + 1) & v5;
        if (v10 == v9)
        {
          __break(0xC471u);
          JUMPOUT(0x195D18070);
        }
      }
      result = (_QWORD *)WTF::ConcurrentPtrHashSet::addSlow();
      if ((_DWORD)result)
      {
        if (*(_BYTE *)(v3 + 131))
          result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 144))(v3, v2);
        ++*(_QWORD *)(v3 + 72);
      }
    }
  }
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::WebGLRenderbuffer,std::__variant_detail::_Trait::RawPtrTraits<WebCore>,std::__variant_detail::_Trait::DefaultRefDerefTraits<WebCore>>,WTF::RefPtr::WebGLFramebuffer::TextureAttachment,WTF::RefPtr<WebCore::WebGLRenderbuffer,std::__variant_detail::_Trait::RawPtrTraits<WebCore>,std::__variant_detail::_Trait::DefaultRefDerefTraits<WebCore>>::TextureLayerAttachment> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::WebGLRenderbuffer,std::__variant_detail::_Trait::RawPtrTraits<WebCore>,std::__variant_detail::_Trait::DefaultRefDerefTraits<WebCore>>,WTF::RefPtr::WebGLFramebuffer::TextureAttachment,WTF::RefPtr<WebCore::WebGLRenderbuffer,std::__variant_detail::_Trait::RawPtrTraits<WebCore>,std::__variant_detail::_Trait::DefaultRefDerefTraits<WebCore>>::TextureLayerAttachment> const>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::WebGLRenderbuffer,std::__variant_detail::_Trait::RawPtrTraits<WebCore>,std::__variant_detail::_Trait::DefaultRefDerefTraits<WebCore>>,WTF::RefPtr::WebGLFramebuffer::TextureAttachment,WTF::RefPtr<WebCore::WebGLRenderbuffer,std::__variant_detail::_Trait::RawPtrTraits<WebCore>,std::__variant_detail::_Trait::DefaultRefDerefTraits<WebCore>>::TextureLayerAttachment> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::WebGLRenderbuffer,std::__variant_detail::_Trait::RawPtrTraits<WebCore>,std::__variant_detail::_Trait::DefaultRefDerefTraits<WebCore>>,WTF::RefPtr::WebGLFramebuffer::TextureAttachment,WTF::RefPtr<WebCore::WebGLRenderbuffer,std::__variant_detail::_Trait::RawPtrTraits<WebCore>,std::__variant_detail::_Trait::DefaultRefDerefTraits<WebCore>>::TextureLayerAttachment> const>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3 && a2[1] == a3[1];
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::WebGLRenderbuffer,std::__variant_detail::_Trait::RawPtrTraits<WebCore>,std::__variant_detail::_Trait::DefaultRefDerefTraits<WebCore>>,WTF::RefPtr::WebGLFramebuffer::TextureAttachment,WTF::RefPtr<WebCore::WebGLRenderbuffer,std::__variant_detail::_Trait::RawPtrTraits<WebCore>,std::__variant_detail::_Trait::DefaultRefDerefTraits<WebCore>>::TextureLayerAttachment> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::WebGLRenderbuffer,std::__variant_detail::_Trait::RawPtrTraits<WebCore>,std::__variant_detail::_Trait::DefaultRefDerefTraits<WebCore>>,WTF::RefPtr::WebGLFramebuffer::TextureAttachment,WTF::RefPtr<WebCore::WebGLRenderbuffer,std::__variant_detail::_Trait::RawPtrTraits<WebCore>,std::__variant_detail::_Trait::DefaultRefDerefTraits<WebCore>>::TextureLayerAttachment> const>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 == *a3 && a2[1] == a3[1];
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::entryHasObject(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WTF::RefPtr<WebCore::WebGLTexture,WTF::RawPtrTraits<std::__variant_detail::_Trait>,WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>> &&>(uint64_t a1, _QWORD *a2)
{
  uint64_t (*v2)();

  v2 = WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>::unspecifiedBoolTypeInstance;
  if (!*a2)
    v2 = 0;
  return v2 != 0;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::entryHasObject(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WTF::RefPtr<WebCore::WebGLTexture,WTF::RawPtrTraits<std::__variant_detail::_Trait>,WTF::DefaultRefDerefTraits<std::__variant_detail::_Trait>>> &&>(uint64_t a1, _QWORD *a2)
{
  uint64_t (*v2)();

  v2 = WTF::RefPtr<WebCore::WebGLTexture,WTF::RawPtrTraits<WebCore::WebGLTexture>,WTF::DefaultRefDerefTraits<WebCore::WebGLTexture>>::unspecifiedBoolTypeInstance;
  if (!*a2)
    v2 = 0;
  return v2 != 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::entryAttach(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> &)::$_0,WebCore::entryAttach(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> &)::$_1,WebCore::entryAttach(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> &>(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(*(_QWORD *)a2 + 28);
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::entryAttach(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> &)::$_0,WebCore::entryAttach(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> &)::$_1,WebCore::entryAttach(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> &>(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(*(_QWORD *)a2 + 28);
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::entryAttach(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> &)::$_0,WebCore::entryAttach(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> &)::$_1,WebCore::entryAttach(std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> &)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment> &>(uint64_t a1, uint64_t a2)
{
  ++*(_DWORD *)(*(_QWORD *)a2 + 28);
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment>>>,WTF::DefaultHash<unsigned int>,WTF::HashMap<unsigned int,std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment>,WTF::DefaultHash<unsigned int>,WTF::HashTraits<unsigned int>,WTF::HashTraits<std::variant<WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>,WebCore::WebGLFramebuffer::TextureAttachment,WebCore::WebGLFramebuffer::TextureLayerAttachment>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<unsigned int>>::rehash(uint64_t *a1, unsigned int a2, int *a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t result;
  char v36;
  char v37;
  char v38;
  char v39;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = a2;
  v8 = WTF::fastMalloc((WTF *)((32 * a2) | 0x10));
  if (a2)
  {
    v10 = v8 + 24;
    do
    {
      *(_DWORD *)(v10 - 8) = 0;
      *(_QWORD *)v10 = 0;
      *(_DWORD *)(v10 + 16) = 0;
      v10 += 32;
      --v7;
    }
    while (v7);
  }
  *a1 = v8 + 16;
  *(_DWORD *)(v8 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = v5;
    do
    {
      v14 = (int *)(v4 + 32 * v11);
      v15 = *v14;
      if (*v14 != -1)
      {
        if (v15)
        {
          v20 = *a1;
          if (*a1)
            v21 = *(_DWORD *)(v20 - 8);
          else
            v21 = 0;
          v22 = 0;
          v23 = 9 * ((v15 + ~(v15 << 15)) ^ ((v15 + ~(v15 << 15)) >> 10));
          v24 = ((v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11)) ^ (((v23 ^ (v23 >> 6)) + ~((v23 ^ (v23 >> 6)) << 11)) >> 16);
          do
          {
            v25 = v24 & v21;
            v24 = ++v22 + v25;
          }
          while (*(_DWORD *)(v20 + 32 * v25));
          v26 = v20 + 32 * v25;
          v27 = (_DWORD *)(v26 + 24);
          if (*(_DWORD *)(v26 + 24) != -1)
          {
            ((void (*)(char *, uint64_t))off_1E33DE448[*(unsigned int *)(v26 + 24)])(&v37, v26 + 8);
            v15 = *v14;
          }
          *(_DWORD *)v26 = v15;
          *(_BYTE *)(v26 + 8) = 0;
          v9 = (void *)(v26 + 8);
          *v27 = -1;
          v28 = v4 + 32 * v11;
          v31 = *(_DWORD *)(v28 + 24);
          v29 = (_DWORD *)(v28 + 24);
          v30 = v31;
          if (v31 != -1)
          {
            ((void (*)(char *, void *, uint64_t))off_1E33DE4D8[v30])(&v38, v9, v4 + 32 * v11 + 8);
            *v27 = v30;
            v32 = *v29;
            if ((_DWORD)v32 != -1)
              ((void (*)(char *, uint64_t))off_1E33DE448[v32])(&v39, v4 + 32 * v11 + 8);
          }
          *v29 = -1;
          if (v14 == a3)
            v12 = v26;
        }
        else
        {
          v16 = v4 + 32 * v11;
          v19 = *(_DWORD *)(v16 + 24);
          v18 = (_DWORD *)(v16 + 24);
          v17 = v19;
          if (v19 != -1)
            ((void (*)(char *, uint64_t))off_1E33DE448[v17])(&v36, v4 + 32 * v11 + 8);
          *v18 = -1;
        }
      }
      ++v11;
    }
    while (v11 != v13);
  }
  else
  {
    v12 = 0;
    result = 0;
    if (!v4)
      return result;
  }
  WTF::fastFree((WTF *)(v4 - 16), v9);
  return v12;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17WebGLRenderbufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_16WebGLFramebuffer17TextureAttachmentENSH_22TextureLayerAttachmentEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJSG_SI_SJ_EEEOSY_EEEDcSQ_DpT0_(_DWORD *result, _DWORD **a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  char v8;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_7;
  if ((_DWORD)v5)
  {
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E33DE448[v5])(&v8, v4);
LABEL_7:
    v7 = (_DWORD *)*a3;
    *a3 = 0;
    *(_QWORD *)v4 = v7;
    *(_DWORD *)(v4 + 16) = 0;
    return result;
  }
  v6 = (_DWORD *)*a3;
  *a3 = 0;
  result = *a2;
  *a2 = v6;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17WebGLRenderbufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_16WebGLFramebuffer17TextureAttachmentENSH_22TextureLayerAttachmentEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJSG_SI_SJ_EEEOSY_EEEDcSQ_DpT0_(_DWORD *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_8;
  if ((_DWORD)v5 != 1)
  {
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E33DE448[v5])(&v9, v4);
LABEL_8:
    *(_DWORD *)(v4 + 16) = -1;
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v8;
    *(_QWORD *)(v4 + 8) = a3[1];
    *(_DWORD *)(v4 + 16) = 1;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = v7;
  if (result)
  {
    if (result[2] == 1)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  *(_QWORD *)(a2 + 8) = a3[1];
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN3WTF6RefPtrIN7WebCore17WebGLRenderbufferENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_16WebGLFramebuffer17TextureAttachmentENSH_22TextureLayerAttachmentEEEEE16__generic_assignB8sn180100INS0_17__move_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSQ_OT0_E_JRNS0_6__baseILSO_1EJSG_SI_SJ_EEEOSY_EEEDcSQ_DpT0_(_DWORD *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_8;
  if ((_DWORD)v5 != 2)
  {
    result = (_DWORD *)((uint64_t (*)(char *, uint64_t))off_1E33DE448[v5])(&v9, v4);
LABEL_8:
    *(_DWORD *)(v4 + 16) = -1;
    v8 = *a3;
    *a3 = 0;
    *(_QWORD *)v4 = v8;
    *(_QWORD *)(v4 + 8) = a3[1];
    *(_DWORD *)(v4 + 16) = 2;
    return result;
  }
  v7 = *a3;
  *a3 = 0;
  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = v7;
  if (result)
  {
    if (result[2] == 1)
      result = (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  *(_QWORD *)(a2 + 8) = a3[1];
  return result;
}

unsigned int *WebCore::WebGLQuery::create@<X0>(WebCore::WebGLQuery *this@<X0>, WebCore::WebGLRenderingContextBase *a2@<X1>, unsigned int **a3@<X8>)
{
  _DWORD *v5;
  unsigned int *result;
  unsigned int v7;
  unsigned int *v8;
  void *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;

  v5 = (_DWORD *)*((_QWORD *)this + 11);
  if (v5)
    ++v5[2];
  result = (unsigned int *)(*(uint64_t (**)(_DWORD *, WebCore::WebGLRenderingContextBase *))(*(_QWORD *)v5 + 1608))(v5, a2);
  v7 = result;
  if (v5[2] != 1)
  {
    --v5[2];
    if ((_DWORD)result)
      goto LABEL_5;
LABEL_14:
    v8 = 0;
    goto LABEL_15;
  }
  result = (unsigned int *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 16))(v5);
  if (!v7)
    goto LABEL_14;
LABEL_5:
  result = (unsigned int *)WTF::fastMalloc((WTF *)0x28);
  v8 = result;
  result[2] = 1;
  *(_QWORD *)result = off_1E33DE398;
  if (!*((_QWORD *)this + 115))
  {
    v10 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = (char *)this + 8;
    result = (unsigned int *)*((_QWORD *)this + 115);
    *((_QWORD *)this + 115) = v10;
    if (result)
    {
      do
      {
        v11 = __ldaxr(result);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, result));
      if (!v12)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v9);
      }
    }
  }
  v13 = (unsigned int *)*((_QWORD *)this + 115);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 + 1, v13));
  *((_QWORD *)v8 + 2) = v13;
  v8[6] = v7;
  v8[7] = 0;
  *((_WORD *)v8 + 16) = 0;
  *(_QWORD *)v8 = off_1E33DE618;
  v8[9] = 0;
LABEL_15:
  *a3 = v8;
  return result;
}

void WebCore::WebGLQuery::~WebGLQuery(WebCore::WebGLQuery *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v3 = *((_QWORD *)this + 2);
  if (!v3)
  {
    *(_QWORD *)this = off_1E33DE398;
    *((_QWORD *)this + 2) = 0;
    return;
  }
  if (*(_QWORD *)(v3 + 8))
  {
    WebCore::WebGLObject::runDestructor(this);
    v3 = *((_QWORD *)this + 2);
    *(_QWORD *)this = off_1E33DE398;
    *((_QWORD *)this + 2) = 0;
    if (!v3)
      return;
  }
  else
  {
    *(_QWORD *)this = off_1E33DE398;
    *((_QWORD *)this + 2) = 0;
  }
  do
  {
    v4 = __ldaxr((unsigned int *)v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, (unsigned int *)v3));
  if (!v5)
  {
    atomic_store(1u, (unsigned int *)v3);
    WTF::fastFree((WTF *)v3, a2);
  }
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 8))
    {
      WebCore::WebGLObject::runDestructor(this);
      v3 = *((_QWORD *)this + 2);
      *(_QWORD *)this = off_1E33DE398;
      *((_QWORD *)this + 2) = 0;
      if (!v3)
        goto LABEL_10;
    }
    else
    {
      *(_QWORD *)this = off_1E33DE398;
      *((_QWORD *)this + 2) = 0;
    }
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  else
  {
    *(_QWORD *)this = off_1E33DE398;
    *((_QWORD *)this + 2) = 0;
  }
LABEL_10:
  WTF::fastFree(this, a2);
}

uint64_t WebCore::WebGLQuery::deleteObjectImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 1616))(a3, a4);
}

void WebCore::WebGLRenderbuffer::~WebGLRenderbuffer(WebCore::WebGLRenderbuffer *this, void *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v3 = *((_QWORD *)this + 2);
  if (!v3)
  {
    *(_QWORD *)this = off_1E33DE398;
    *((_QWORD *)this + 2) = 0;
    return;
  }
  if (*(_QWORD *)(v3 + 8))
  {
    WebCore::WebGLObject::runDestructor(this);
    v3 = *((_QWORD *)this + 2);
    *(_QWORD *)this = off_1E33DE398;
    *((_QWORD *)this + 2) = 0;
    if (!v3)
      return;
  }
  else
  {
    *(_QWORD *)this = off_1E33DE398;
    *((_QWORD *)this + 2) = 0;
  }
  do
  {
    v4 = __ldaxr((unsigned int *)v3);
    v5 = v4 - 1;
  }
  while (__stlxr(v5, (unsigned int *)v3));
  if (!v5)
  {
    atomic_store(1u, (unsigned int *)v3);
    WTF::fastFree((WTF *)v3, a2);
  }
}

{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 8))
    {
      WebCore::WebGLObject::runDestructor(this);
      v3 = *((_QWORD *)this + 2);
      *(_QWORD *)this = off_1E33DE398;
      *((_QWORD *)this + 2) = 0;
      if (!v3)
        goto LABEL_10;
    }
    else
    {
      *(_QWORD *)this = off_1E33DE398;
      *((_QWORD *)this + 2) = 0;
    }
    do
    {
      v4 = __ldaxr((unsigned int *)v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, (unsigned int *)v3));
    if (!v5)
    {
      atomic_store(1u, (unsigned int *)v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  else
  {
    *(_QWORD *)this = off_1E33DE398;
    *((_QWORD *)this + 2) = 0;
  }
LABEL_10:
  WTF::fastFree(this, a2);
}

uint64_t WebCore::WebGLRenderbuffer::deleteObjectImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 272))(a3, a4);
}

void WebCore::WebGLRenderingContextBase::~WebGLRenderingContextBase(WebCore::WebGLRenderingContextBase *this, void *a2)
{
  unsigned int **v3;
  WebCore::ActiveDOMObject *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD **v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  unsigned __int8 *v18;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  void *v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  _DWORD *v40;
  _DWORD *v41;
  _DWORD *v42;
  _DWORD *v43;
  _DWORD *v44;
  _DWORD *v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  _DWORD *v49;
  _DWORD *v50;
  _DWORD *v51;
  _DWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  _DWORD *v55;
  _DWORD *v56;
  _DWORD *v57;
  _DWORD *v58;
  _DWORD *v59;
  _DWORD *v60;
  _DWORD *v61;
  _DWORD *v62;
  _DWORD *v63;
  _DWORD *v64;
  _DWORD *v65;
  _DWORD *v66;
  _DWORD *v67;
  _DWORD *v68;
  _DWORD *v69;
  _DWORD *v70;
  _DWORD *v71;
  _DWORD *v72;
  _DWORD *v73;
  _DWORD *v74;
  _DWORD *v75;
  _DWORD *v76;
  _DWORD *v77;
  _DWORD *v78;
  _DWORD *v79;
  _DWORD *v80;
  _DWORD *v81;
  _DWORD *v82;
  _DWORD *v83;
  _DWORD *v84;
  _DWORD *v85;
  _DWORD *v86;
  _DWORD *v87;
  _DWORD *v88;
  _DWORD *v89;
  _DWORD *v90;
  _DWORD *v91;
  uint64_t v92;
  WTF *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  const void *v97;
  uint64_t v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  int v104;
  uint64_t v105;
  WTF *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _DWORD *v110;
  _DWORD *v111;
  _DWORD *v112;
  _DWORD *v113;
  WTF *v114;
  _DWORD *v115;
  _DWORD *v116;
  _DWORD *v117;
  WTF *v118;
  _DWORD *v119;
  _DWORD *v120;
  WTF *v121;
  _DWORD *v122;
  void *v123;
  _DWORD *v124;
  uint64_t v125;
  unsigned int *v126;
  unsigned int v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;

  *(_QWORD *)this = off_1E33DE688;
  *((_QWORD *)this + 1) = &unk_1E33DE800;
  v3 = (unsigned int **)((char *)this + 8);
  *((_QWORD *)this + 6) = &unk_1E33DE908;
  v4 = (WebCore::WebGLRenderingContextBase *)((char *)this + 48);
  *((_QWORD *)this + 9) = &unk_1E33DE960;
  v5 = (_DWORD *)*((_QWORD *)this + 15);
  if (v5)
  {
    *((_QWORD *)this + 15) = 0;
    if (v5[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
      v129 = *((_QWORD *)this + 15);
      if (v129 && !*(_DWORD *)(v129 + 36))
        *(_DWORD *)(v129 + 36) = 34962;
    }
    else
    {
      --v5[2];
    }
  }
  v6 = (_DWORD *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  v7 = (_DWORD *)*((_QWORD *)this + 18);
  if (v7)
  {
    *((_QWORD *)this + 18) = 0;
    if (v7[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
      v130 = *((_QWORD *)this + 18);
      if (v130)
        *(_BYTE *)(v130 + 40) = 1;
    }
    else
    {
      --v7[2];
    }
  }
  v8 = (_DWORD *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v8)
  {
    if (v8[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
    else
      --v8[2];
  }
  v9 = (_DWORD *)*((_QWORD *)this + 22);
  if (v9)
  {
    *((_QWORD *)this + 22) = 0;
    if (v9[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
      v131 = *((_QWORD *)this + 22);
      if (v131)
        *(_BYTE *)(v131 + 48) = 1;
    }
    else
    {
      --v9[2];
    }
  }
  v10 = (_DWORD *)*((_QWORD *)this + 23);
  if (v10)
  {
    *((_QWORD *)this + 23) = 0;
    if (v10[2] == 1)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
      v132 = *((_QWORD *)this + 23);
      if (v132)
        *(_BYTE *)(v132 + 49) = 1;
    }
    else
    {
      --v10[2];
    }
  }
  v11 = *((unsigned int *)this + 51);
  if ((_DWORD)v11)
  {
    v12 = 32 * v11;
    v13 = (_DWORD **)(*((_QWORD *)this + 24) + 8);
    do
    {
      v14 = *(v13 - 1);
      if (v14)
      {
        *(v13 - 1) = 0;
        if (v14[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
          v16 = (uint64_t)*(v13 - 1);
          if (v16 && *(_DWORD *)(v16 + 24) && !*(_DWORD *)(v16 + 36))
            *(_DWORD *)(v16 + 36) = 3553;
        }
        else
        {
          --v14[2];
        }
      }
      v15 = *v13;
      if (*v13)
      {
        *v13 = 0;
        if (v15[2] == 1)
        {
          (*(void (**)(_DWORD *))(*(_QWORD *)v15 + 8))(v15);
          v17 = *v13;
          if (*v13 && v17[6] && !v17[9])
            v17[9] = 34067;
        }
        else
        {
          --v15[2];
        }
      }
      v13 += 4;
      v12 -= 32;
    }
    while (v12);
  }
  v18 = (unsigned __int8 *)this + 96;
  if (__ldaxr((unsigned __int8 *)this + 96))
  {
    __clrex();
LABEL_40:
    MEMORY[0x19AEA534C]((char *)this + 96);
    goto LABEL_41;
  }
  if (__stxr(1u, v18))
    goto LABEL_40;
LABEL_41:
  v20 = *((_QWORD *)this + 115);
  *((_QWORD *)this + 115) = 0;
  if (v20)
  {
    *(_QWORD *)(v20 + 8) = 0;
    do
    {
      v21 = __ldaxr((unsigned int *)v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, (unsigned int *)v20));
    if (!v22)
    {
      atomic_store(1u, (unsigned int *)v20);
      WTF::fastFree((WTF *)v20, a2);
    }
  }
  v23 = __ldxr(v18);
  if (v23 != 1)
  {
    __clrex();
    goto LABEL_50;
  }
  if (__stlxr(0, v18))
LABEL_50:
    WTF::Lock::unlockSlow((WebCore::WebGLRenderingContextBase *)((char *)this + 96));
  WebCore::WebGLRenderingContextBase::loseExtensions(this, 0);
  WebCore::WebGLRenderingContextBase::destroyGraphicsContextGL(this);
  if (__ldaxr(WebCore::WebGLProgram::s_instancesLock))
  {
    __clrex();
  }
  else if (!__stxr(1u, WebCore::WebGLProgram::s_instancesLock))
  {
    goto LABEL_55;
  }
  MEMORY[0x19AEA534C](WebCore::WebGLProgram::s_instancesLock);
LABEL_55:
  {
    if (WebCore::WebGLProgram::instances(void)::instances
      && *(_DWORD *)(WebCore::WebGLProgram::instances(void)::instances - 12))
    {
      v26 = *(unsigned int *)(WebCore::WebGLProgram::instances(void)::instances - 4);
      if ((_DWORD)v26)
      {
        v27 = 16 * v26;
        v28 = (_QWORD *)WebCore::WebGLProgram::instances(void)::instances;
        while ((unint64_t)(*v28 + 1) <= 1)
        {
          v28 += 2;
          v27 -= 16;
          if (!v27)
            goto LABEL_70;
        }
      }
      else
      {
        v28 = (_QWORD *)WebCore::WebGLProgram::instances(void)::instances;
      }
      v29 = WebCore::WebGLProgram::instances(void)::instances + 16 * v26;
      if ((_QWORD *)v29 != v28)
      {
LABEL_65:
        if ((WebCore::WebGLRenderingContextBase *)v28[1] == this)
          v28[1] = 0;
        while (1)
        {
          v28 += 2;
          if (v28 == (_QWORD *)v29)
            break;
          if ((unint64_t)(*v28 + 1) > 1)
          {
            if (v28 != (_QWORD *)v29)
              goto LABEL_65;
            break;
          }
        }
      }
    }
  }
  else
  {
    WebCore::WebGLProgram::instances(void)::instances = 0;
  }
LABEL_70:
  v30 = __ldxr(WebCore::WebGLProgram::s_instancesLock);
  if (v30 != 1)
  {
    __clrex();
    goto LABEL_74;
  }
  if (__stlxr(0, WebCore::WebGLProgram::s_instancesLock))
LABEL_74:
    WTF::Lock::unlockSlow((WTF::Lock *)WebCore::WebGLProgram::s_instancesLock);
  v31 = *((_QWORD *)this + 115);
  if (v31)
  {
    *(_QWORD *)(v31 + 8) = 0;
    v32 = (unsigned int *)*((_QWORD *)this + 115);
    *((_QWORD *)this + 115) = 0;
    if (v32)
    {
      do
      {
        v33 = __ldaxr(v32);
        v34 = v33 - 1;
      }
      while (__stlxr(v34, v32));
      if (!v34)
      {
        atomic_store(1u, v32);
        WTF::fastFree((WTF *)v32, v24);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 115) = 0;
  }
  v35 = *((_QWORD *)this + 112);
  if (v35)
    WTF::fastFree((WTF *)(v35 - 16), v24);
  v36 = *((_QWORD *)this + 111);
  if (v36)
    WTF::fastFree((WTF *)(v36 - 16), v24);
  v37 = *((_QWORD *)this + 110);
  if (v37)
    WTF::fastFree((WTF *)(v37 - 16), v24);
  v38 = (_DWORD *)*((_QWORD *)this + 108);
  *((_QWORD *)this + 108) = 0;
  if (v38)
  {
    if (v38[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v38 + 8))(v38);
    else
      --v38[2];
  }
  v39 = (_DWORD *)*((_QWORD *)this + 107);
  *((_QWORD *)this + 107) = 0;
  if (v39)
  {
    if (v39[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v39 + 8))(v39);
    else
      --v39[2];
  }
  v40 = (_DWORD *)*((_QWORD *)this + 106);
  *((_QWORD *)this + 106) = 0;
  if (v40)
  {
    if (v40[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v40 + 8))(v40);
    else
      --v40[2];
  }
  v41 = (_DWORD *)*((_QWORD *)this + 105);
  *((_QWORD *)this + 105) = 0;
  if (v41)
  {
    if (v41[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 8))(v41);
    else
      --v41[2];
  }
  v42 = (_DWORD *)*((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = 0;
  if (v42)
  {
    if (v42[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v42 + 8))(v42);
    else
      --v42[2];
  }
  v43 = (_DWORD *)*((_QWORD *)this + 103);
  *((_QWORD *)this + 103) = 0;
  if (v43)
  {
    if (v43[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v43 + 8))(v43);
    else
      --v43[2];
  }
  v44 = (_DWORD *)*((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v44)
  {
    if (v44[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v44 + 8))(v44);
    else
      --v44[2];
  }
  v45 = (_DWORD *)*((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v45)
  {
    if (v45[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v45 + 8))(v45);
    else
      --v45[2];
  }
  v46 = (_DWORD *)*((_QWORD *)this + 100);
  *((_QWORD *)this + 100) = 0;
  if (v46)
  {
    if (v46[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 8))(v46);
    else
      --v46[2];
  }
  v47 = (_DWORD *)*((_QWORD *)this + 99);
  *((_QWORD *)this + 99) = 0;
  if (v47)
  {
    if (v47[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v47 + 8))(v47);
    else
      --v47[2];
  }
  v48 = (_DWORD *)*((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = 0;
  if (v48)
  {
    if (v48[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v48 + 8))(v48);
    else
      --v48[2];
  }
  v49 = (_DWORD *)*((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v49)
  {
    if (v49[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v49 + 8))(v49);
    else
      --v49[2];
  }
  v50 = (_DWORD *)*((_QWORD *)this + 96);
  *((_QWORD *)this + 96) = 0;
  if (v50)
  {
    if (v50[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v50 + 8))(v50);
    else
      --v50[2];
  }
  v51 = (_DWORD *)*((_QWORD *)this + 95);
  *((_QWORD *)this + 95) = 0;
  if (v51)
  {
    if (v51[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v51 + 8))(v51);
    else
      --v51[2];
  }
  v52 = (_DWORD *)*((_QWORD *)this + 94);
  *((_QWORD *)this + 94) = 0;
  if (v52)
  {
    if (v52[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v52 + 8))(v52);
    else
      --v52[2];
  }
  v53 = (_DWORD *)*((_QWORD *)this + 93);
  *((_QWORD *)this + 93) = 0;
  if (v53)
  {
    if (v53[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v53 + 8))(v53);
    else
      --v53[2];
  }
  v54 = (_DWORD *)*((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v54)
  {
    if (v54[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v54 + 8))(v54);
    else
      --v54[2];
  }
  v55 = (_DWORD *)*((_QWORD *)this + 91);
  *((_QWORD *)this + 91) = 0;
  if (v55)
  {
    if (v55[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v55 + 8))(v55);
    else
      --v55[2];
  }
  v56 = (_DWORD *)*((_QWORD *)this + 90);
  *((_QWORD *)this + 90) = 0;
  if (v56)
  {
    if (v56[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v56 + 8))(v56);
    else
      --v56[2];
  }
  v57 = (_DWORD *)*((_QWORD *)this + 89);
  *((_QWORD *)this + 89) = 0;
  if (v57)
  {
    if (v57[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v57 + 8))(v57);
    else
      --v57[2];
  }
  v58 = (_DWORD *)*((_QWORD *)this + 88);
  *((_QWORD *)this + 88) = 0;
  if (v58)
  {
    if (v58[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v58 + 8))(v58);
    else
      --v58[2];
  }
  v59 = (_DWORD *)*((_QWORD *)this + 87);
  *((_QWORD *)this + 87) = 0;
  if (v59)
  {
    if (v59[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v59 + 8))(v59);
    else
      --v59[2];
  }
  v60 = (_DWORD *)*((_QWORD *)this + 86);
  *((_QWORD *)this + 86) = 0;
  if (v60)
  {
    if (v60[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v60 + 8))(v60);
    else
      --v60[2];
  }
  v61 = (_DWORD *)*((_QWORD *)this + 85);
  *((_QWORD *)this + 85) = 0;
  if (v61)
  {
    if (v61[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v61 + 8))(v61);
    else
      --v61[2];
  }
  v62 = (_DWORD *)*((_QWORD *)this + 84);
  *((_QWORD *)this + 84) = 0;
  if (v62)
  {
    if (v62[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v62 + 8))(v62);
    else
      --v62[2];
  }
  v63 = (_DWORD *)*((_QWORD *)this + 83);
  *((_QWORD *)this + 83) = 0;
  if (v63)
  {
    if (v63[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v63 + 8))(v63);
    else
      --v63[2];
  }
  v64 = (_DWORD *)*((_QWORD *)this + 82);
  *((_QWORD *)this + 82) = 0;
  if (v64)
  {
    if (v64[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v64 + 8))(v64);
    else
      --v64[2];
  }
  v65 = (_DWORD *)*((_QWORD *)this + 81);
  *((_QWORD *)this + 81) = 0;
  if (v65)
  {
    if (v65[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v65 + 8))(v65);
    else
      --v65[2];
  }
  v66 = (_DWORD *)*((_QWORD *)this + 80);
  *((_QWORD *)this + 80) = 0;
  if (v66)
  {
    if (v66[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v66 + 8))(v66);
    else
      --v66[2];
  }
  v67 = (_DWORD *)*((_QWORD *)this + 79);
  *((_QWORD *)this + 79) = 0;
  if (v67)
  {
    if (v67[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v67 + 8))(v67);
    else
      --v67[2];
  }
  v68 = (_DWORD *)*((_QWORD *)this + 78);
  *((_QWORD *)this + 78) = 0;
  if (v68)
  {
    if (v68[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v68 + 8))(v68);
    else
      --v68[2];
  }
  v69 = (_DWORD *)*((_QWORD *)this + 77);
  *((_QWORD *)this + 77) = 0;
  if (v69)
  {
    if (v69[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v69 + 8))(v69);
    else
      --v69[2];
  }
  v70 = (_DWORD *)*((_QWORD *)this + 76);
  *((_QWORD *)this + 76) = 0;
  if (v70)
  {
    if (v70[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v70 + 8))(v70);
    else
      --v70[2];
  }
  v71 = (_DWORD *)*((_QWORD *)this + 75);
  *((_QWORD *)this + 75) = 0;
  if (v71)
  {
    if (v71[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v71 + 8))(v71);
    else
      --v71[2];
  }
  v72 = (_DWORD *)*((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = 0;
  if (v72)
  {
    if (v72[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v72 + 8))(v72);
    else
      --v72[2];
  }
  v73 = (_DWORD *)*((_QWORD *)this + 73);
  *((_QWORD *)this + 73) = 0;
  if (v73)
  {
    if (v73[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v73 + 8))(v73);
    else
      --v73[2];
  }
  v74 = (_DWORD *)*((_QWORD *)this + 72);
  *((_QWORD *)this + 72) = 0;
  if (v74)
  {
    if (v74[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v74 + 8))(v74);
    else
      --v74[2];
  }
  v75 = (_DWORD *)*((_QWORD *)this + 71);
  *((_QWORD *)this + 71) = 0;
  if (v75)
  {
    if (v75[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v75 + 8))(v75);
    else
      --v75[2];
  }
  v76 = (_DWORD *)*((_QWORD *)this + 70);
  *((_QWORD *)this + 70) = 0;
  if (v76)
  {
    if (v76[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v76 + 8))(v76);
    else
      --v76[2];
  }
  v77 = (_DWORD *)*((_QWORD *)this + 69);
  *((_QWORD *)this + 69) = 0;
  if (v77)
  {
    if (v77[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v77 + 8))(v77);
    else
      --v77[2];
  }
  v78 = (_DWORD *)*((_QWORD *)this + 68);
  *((_QWORD *)this + 68) = 0;
  if (v78)
  {
    if (v78[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v78 + 8))(v78);
    else
      --v78[2];
  }
  v79 = (_DWORD *)*((_QWORD *)this + 67);
  *((_QWORD *)this + 67) = 0;
  if (v79)
  {
    if (v79[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v79 + 8))(v79);
    else
      --v79[2];
  }
  v80 = (_DWORD *)*((_QWORD *)this + 66);
  *((_QWORD *)this + 66) = 0;
  if (v80)
  {
    if (v80[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v80 + 8))(v80);
    else
      --v80[2];
  }
  v81 = (_DWORD *)*((_QWORD *)this + 65);
  *((_QWORD *)this + 65) = 0;
  if (v81)
  {
    if (v81[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v81 + 8))(v81);
    else
      --v81[2];
  }
  v82 = (_DWORD *)*((_QWORD *)this + 64);
  *((_QWORD *)this + 64) = 0;
  if (v82)
  {
    if (v82[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v82 + 8))(v82);
    else
      --v82[2];
  }
  v83 = (_DWORD *)*((_QWORD *)this + 63);
  *((_QWORD *)this + 63) = 0;
  if (v83)
  {
    if (v83[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v83 + 8))(v83);
    else
      --v83[2];
  }
  v84 = (_DWORD *)*((_QWORD *)this + 62);
  *((_QWORD *)this + 62) = 0;
  if (v84)
  {
    if (v84[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v84 + 8))(v84);
    else
      --v84[2];
  }
  v85 = (_DWORD *)*((_QWORD *)this + 61);
  *((_QWORD *)this + 61) = 0;
  if (v85)
  {
    if (v85[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v85 + 8))(v85);
    else
      --v85[2];
  }
  v86 = (_DWORD *)*((_QWORD *)this + 60);
  *((_QWORD *)this + 60) = 0;
  if (v86)
  {
    if (v86[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v86 + 8))(v86);
    else
      --v86[2];
  }
  v87 = (_DWORD *)*((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v87)
  {
    if (v87[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v87 + 8))(v87);
    else
      --v87[2];
  }
  v88 = (_DWORD *)*((_QWORD *)this + 58);
  *((_QWORD *)this + 58) = 0;
  if (v88)
  {
    if (v88[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v88 + 8))(v88);
    else
      --v88[2];
  }
  v89 = (_DWORD *)*((_QWORD *)this + 57);
  *((_QWORD *)this + 57) = 0;
  if (v89)
  {
    if (v89[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v89 + 8))(v89);
    else
      --v89[2];
  }
  v90 = (_DWORD *)*((_QWORD *)this + 56);
  *((_QWORD *)this + 56) = 0;
  if (v90)
  {
    if (v90[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v90 + 8))(v90);
    else
      --v90[2];
  }
  v91 = (_DWORD *)*((_QWORD *)this + 55);
  *((_QWORD *)this + 55) = 0;
  if (v91)
  {
    if (v91[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v91 + 8))(v91);
    else
      --v91[2];
  }
  v92 = *((unsigned int *)this + 61);
  v93 = (WTF *)*((_QWORD *)this + 29);
  if ((_DWORD)v92)
  {
    v94 = (char *)v93 + 8;
    v95 = 24 * v92;
    while (!v94[8])
    {
LABEL_255:
      v94 += 24;
      v95 -= 24;
      if (!v95)
      {
        v93 = (WTF *)*((_QWORD *)this + 29);
        goto LABEL_274;
      }
    }
    v96 = *(_QWORD *)v94;
    *(_QWORD *)v94 = 0;
    if (!v96)
    {
LABEL_253:
      v97 = (const void *)*((_QWORD *)v94 - 1);
      *((_QWORD *)v94 - 1) = 0;
      if (v97)
        CFRelease(v97);
      goto LABEL_255;
    }
    v98 = *(_QWORD *)(v96 + 8);
    if (__ldaxr((unsigned __int8 *)v98))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v98))
    {
      goto LABEL_261;
    }
    MEMORY[0x19AEA534C](v98);
LABEL_261:
    v100 = *(_QWORD *)(v98 + 8);
    v101 = v100 - 1;
    *(_QWORD *)(v98 + 8) = v100 - 1;
    if (v100 == 1)
    {
      v105 = *(_QWORD *)(v98 + 16);
      v102 = *(_QWORD *)(v98 + 24);
      *(_QWORD *)(v98 + 24) = 0;
      v103 = v105 != 0;
    }
    else
    {
      v102 = 0;
      v103 = 1;
    }
    v104 = __ldxr((unsigned __int8 *)v98);
    if (v104 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v98))
      {
LABEL_268:
        if (!v101)
        {
          if (v102)
            (*(void (**)(uint64_t))(*(_QWORD *)v102 + 8))(v102);
          if (!v103)
            WTF::fastFree((WTF *)v98, v24);
        }
        goto LABEL_253;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v98);
    goto LABEL_268;
  }
LABEL_274:
  if (v93)
  {
    *((_QWORD *)this + 29) = 0;
    *((_DWORD *)this + 60) = 0;
    WTF::fastFree(v93, v24);
  }
  v106 = (WTF *)*((_QWORD *)this + 27);
  if (v106)
  {
    *((_QWORD *)this + 27) = 0;
    *((_DWORD *)this + 56) = 0;
    WTF::fastFree(v106, v24);
  }
  v107 = *((unsigned int *)this + 51);
  if ((_DWORD)v107)
  {
    v108 = 32 * v107;
    v109 = *((_QWORD *)this + 24) + 16;
    do
    {
      v110 = *(_DWORD **)(v109 + 8);
      *(_QWORD *)(v109 + 8) = 0;
      if (v110)
      {
        if (v110[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v110 + 8))(v110);
        else
          --v110[2];
      }
      v111 = *(_DWORD **)v109;
      *(_QWORD *)v109 = 0;
      if (v111)
      {
        if (v111[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v111 + 8))(v111);
        else
          --v111[2];
      }
      v112 = *(_DWORD **)(v109 - 8);
      *(_QWORD *)(v109 - 8) = 0;
      if (v112)
      {
        if (v112[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v112 + 8))(v112);
        else
          --v112[2];
      }
      v113 = *(_DWORD **)(v109 - 16);
      *(_QWORD *)(v109 - 16) = 0;
      if (v113)
      {
        if (v113[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v113 + 8))(v113);
        else
          --v113[2];
      }
      v109 += 32;
      v108 -= 32;
    }
    while (v108);
  }
  v114 = (WTF *)*((_QWORD *)this + 24);
  if (v114)
  {
    *((_QWORD *)this + 24) = 0;
    *((_DWORD *)this + 50) = 0;
    WTF::fastFree(v114, v24);
  }
  v115 = (_DWORD *)*((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v115)
  {
    if (v115[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v115 + 8))(v115);
    else
      --v115[2];
  }
  v116 = (_DWORD *)*((_QWORD *)this + 22);
  *((_QWORD *)this + 22) = 0;
  if (v116)
  {
    if (v116[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v116 + 8))(v116);
    else
      --v116[2];
  }
  v117 = (_DWORD *)*((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v117)
  {
    if (v117[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v117 + 8))(v117);
    else
      --v117[2];
  }
  v118 = (WTF *)*((_QWORD *)this + 19);
  if (v118)
  {
    *((_QWORD *)this + 19) = 0;
    *((_DWORD *)this + 40) = 0;
    WTF::fastFree(v118, v24);
  }
  v119 = (_DWORD *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v119)
  {
    if (v119[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v119 + 8))(v119);
    else
      --v119[2];
  }
  v120 = (_DWORD *)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v120)
  {
    if (v120[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v120 + 8))(v120);
    else
      --v120[2];
  }
  v121 = (WTF *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 16) = 0;
  if (v121)
    WTF::fastFree(v121, v24);
  v122 = (_DWORD *)*((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v122)
  {
    if (v122[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v122 + 8))(v122);
    else
      --v122[2];
  }
  WebCore::EventLoopTimerHandle::~EventLoopTimerHandle((WebCore::WebGLRenderingContextBase *)((char *)this + 104), v24);
  v124 = (_DWORD *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v124)
  {
    if (v124[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v124 + 16))(v124);
    else
      --v124[2];
  }
  v125 = *((_QWORD *)this + 10);
  if (v125)
  {
    *(_QWORD *)(v125 + 8) = 0;
    v126 = (unsigned int *)*((_QWORD *)this + 10);
    *((_QWORD *)this + 10) = 0;
    if (v126)
    {
      do
      {
        v127 = __ldaxr(v126);
        v128 = v127 - 1;
      }
      while (__stlxr(v128, v126));
      if (!v128)
      {
        atomic_store(1u, v126);
        WTF::fastFree((WTF *)v126, v123);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 10) = 0;
  }
  WebCore::ActiveDOMObject::~ActiveDOMObject(v4, v123);
  WebCore::CanvasRenderingContext::~CanvasRenderingContext(v3);
}

void WebCore::WebGLRenderingContext::~WebGLRenderingContext(WebCore::WebGLRenderingContext *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;

  v3 = (_DWORD *)*((_QWORD *)this + 116);
  if (!v3)
    goto LABEL_4;
  *((_QWORD *)this + 116) = 0;
  if (v3[2] != 1)
  {
    --v3[2];
LABEL_4:
    *((_QWORD *)this + 116) = 0;
    goto LABEL_5;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  v4 = (_DWORD *)*((_QWORD *)this + 116);
  if (!v4)
    goto LABEL_4;
  v4[9] = 35007;
  *((_QWORD *)this + 116) = 0;
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  else
    --v4[2];
LABEL_5:
  WebCore::WebGLRenderingContextBase::~WebGLRenderingContextBase(this, a2);
}

{
  _DWORD *v3;
  bmalloc::api *v4;
  void *v5;
  _DWORD *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 116);
  if (!v3)
    goto LABEL_4;
  *((_QWORD *)this + 116) = 0;
  if (v3[2] != 1)
  {
    --v3[2];
LABEL_4:
    *((_QWORD *)this + 116) = 0;
    goto LABEL_5;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  v6 = (_DWORD *)*((_QWORD *)this + 116);
  if (!v6)
    goto LABEL_4;
  v6[9] = 35007;
  *((_QWORD *)this + 116) = 0;
  if (v6[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
  else
    --v6[2];
LABEL_5:
  WebCore::WebGLRenderingContextBase::~WebGLRenderingContextBase(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

void `non-virtual thunk to'WebCore::WebGLRenderingContext::~WebGLRenderingContext(WebCore::WebGLRenderingContext *this, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;

  v3 = (_DWORD *)*((_QWORD *)this + 115);
  if (!v3)
    goto LABEL_4;
  *((_QWORD *)this + 115) = 0;
  if (v3[2] != 1)
  {
    --v3[2];
LABEL_4:
    *((_QWORD *)this + 115) = 0;
    goto LABEL_5;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  v4 = (_DWORD *)*((_QWORD *)this + 115);
  if (!v4)
    goto LABEL_4;
  v4[9] = 35007;
  *((_QWORD *)this + 115) = 0;
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  else
    --v4[2];
LABEL_5:
  WebCore::WebGLRenderingContextBase::~WebGLRenderingContextBase((WebCore::WebGLRenderingContext *)((char *)this - 8), a2);
}

{
  _DWORD *v3;
  _DWORD *v4;

  v3 = (_DWORD *)*((_QWORD *)this + 110);
  if (!v3)
    goto LABEL_4;
  *((_QWORD *)this + 110) = 0;
  if (v3[2] != 1)
  {
    --v3[2];
LABEL_4:
    *((_QWORD *)this + 110) = 0;
    goto LABEL_5;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  v4 = (_DWORD *)*((_QWORD *)this + 110);
  if (!v4)
    goto LABEL_4;
  v4[9] = 35007;
  *((_QWORD *)this + 110) = 0;
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  else
    --v4[2];
LABEL_5:
  WebCore::WebGLRenderingContextBase::~WebGLRenderingContextBase((WebCore::WebGLRenderingContext *)((char *)this - 48), a2);
}

{
  _DWORD *v3;
  _DWORD *v4;

  v3 = (_DWORD *)*((_QWORD *)this + 107);
  if (!v3)
    goto LABEL_4;
  *((_QWORD *)this + 107) = 0;
  if (v3[2] != 1)
  {
    --v3[2];
LABEL_4:
    *((_QWORD *)this + 107) = 0;
    goto LABEL_5;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  v4 = (_DWORD *)*((_QWORD *)this + 107);
  if (!v4)
    goto LABEL_4;
  v4[9] = 35007;
  *((_QWORD *)this + 107) = 0;
  if (v4[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  else
    --v4[2];
LABEL_5:
  WebCore::WebGLRenderingContextBase::~WebGLRenderingContextBase((WebCore::WebGLRenderingContext *)((char *)this - 72), a2);
}

{
  _DWORD *v3;
  bmalloc::api *v4;
  void *v5;
  _DWORD *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 115);
  if (!v3)
    goto LABEL_4;
  *((_QWORD *)this + 115) = 0;
  if (v3[2] != 1)
  {
    --v3[2];
LABEL_4:
    *((_QWORD *)this + 115) = 0;
    goto LABEL_5;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  v6 = (_DWORD *)*((_QWORD *)this + 115);
  if (!v6)
    goto LABEL_4;
  v6[9] = 35007;
  *((_QWORD *)this + 115) = 0;
  if (v6[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
  else
    --v6[2];
LABEL_5:
  WebCore::WebGLRenderingContextBase::~WebGLRenderingContextBase((WebCore::WebGLRenderingContext *)((char *)this - 8), a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

{
  _DWORD *v3;
  bmalloc::api *v4;
  void *v5;
  _DWORD *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 110);
  if (!v3)
    goto LABEL_4;
  *((_QWORD *)this + 110) = 0;
  if (v3[2] != 1)
  {
    --v3[2];
LABEL_4:
    *((_QWORD *)this + 110) = 0;
    goto LABEL_5;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  v6 = (_DWORD *)*((_QWORD *)this + 110);
  if (!v6)
    goto LABEL_4;
  v6[9] = 35007;
  *((_QWORD *)this + 110) = 0;
  if (v6[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
  else
    --v6[2];
LABEL_5:
  WebCore::WebGLRenderingContextBase::~WebGLRenderingContextBase((WebCore::WebGLRenderingContext *)((char *)this - 48), a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

{
  _DWORD *v3;
  bmalloc::api *v4;
  void *v5;
  _DWORD *v6;

  v3 = (_DWORD *)*((_QWORD *)this + 107);
  if (!v3)
    goto LABEL_4;
  *((_QWORD *)this + 107) = 0;
  if (v3[2] != 1)
  {
    --v3[2];
LABEL_4:
    *((_QWORD *)this + 107) = 0;
    goto LABEL_5;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  v6 = (_DWORD *)*((_QWORD *)this + 107);
  if (!v6)
    goto LABEL_4;
  v6[9] = 35007;
  *((_QWORD *)this + 107) = 0;
  if (v6[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
  else
    --v6[2];
LABEL_5:
  WebCore::WebGLRenderingContextBase::~WebGLRenderingContextBase((WebCore::WebGLRenderingContext *)((char *)this - 72), a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

