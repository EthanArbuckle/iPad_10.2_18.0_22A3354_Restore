void WTF::Detail::CallableWrapper<WebCore::AudioSampleDataConverter::updateBufferedAmount(unsigned long,unsigned long)::$_2,void>::call()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = qword_1ECE7CD60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1940B8000, v0, OS_LOG_TYPE_DEFAULT, "AudioSampleDataConverter::updateBufferedAmount going down to regular buffer", v1, 2u);
  }
}

void WTF::Detail::CallableWrapper<WebCore::AudioSampleDataConverter::updateBufferedAmount(unsigned long,unsigned long)::$_3,void>::call()
{
  NSObject *v0;
  uint8_t v1[16];

  v0 = qword_1ECE7CD60;
  if (os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl(&dword_1940B8000, v0, OS_LOG_TYPE_DEFAULT, "AudioSampleDataConverter::updateBufferedAmount going up to regular buffer", v1, 2u);
  }
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AudioSampleDataSource::pushSamplesInternal(AudioBufferList const&,WTF::MediaTime const&,unsigned long)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  *a1 = &off_1E331A258;
  v2 = a1[7];
  a1[7] = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E331A460;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainRunLoop();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return a1;
}

void sub_1950362DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioSampleDataSource::pushSamplesInternal(AudioBufferList const&,WTF::MediaTime const&,unsigned long)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  *(_QWORD *)this = &off_1E331A258;
  v3 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E331A460;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainRunLoop();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return WTF::fastFree(this, a2);
}

void sub_1950363A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AudioSampleDataSource::pushSamplesInternal(AudioBufferList const&,WTF::MediaTime const&,unsigned long)::$_0,void>::call(_QWORD *result)
{
  _QWORD *v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  char *v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  WTF::String *v18;
  WTF::Logger *v19;
  uint64_t v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  WTF::Logger *v25;
  _QWORD *v26;
  uint64_t v27;
  WTF::StringImpl **v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  int v34;
  uint64_t v35;
  WTF::Logger::LogSiteIdentifier *v36;
  WTF::Logger *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  __int128 buf;
  int v47;
  WTF::StringImpl *v48;
  int v49;
  WTF::StringImpl *v50;
  int v51;
  WTF::StringImpl *v52[3];

  v52[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*(_QWORD *)(result[6] + 368) + 12))
  {
    v1 = result;
    v36 = (WTF::Logger::LogSiteIdentifier *)(result + 1);
    WTF::Logger::LogSiteIdentifier::toString((WTF::Logger::LogSiteIdentifier *)(result + 1));
    WTF::String::String((WTF::String *)&v41, "needed more data, pushing ");
    WTF::String::number((WTF::String *)v1[5]);
    WTF::String::String((WTF::String *)&v39, " samples");
    v37 = v41;
    v45 = v40;
    *(_QWORD *)&buf = v42;
    v44 = v39;
    result = (_QWORD *)WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((uint64_t)&buf, (uint64_t *)&v37, (uint64_t *)&v45, (uint64_t *)&v44, &v43);
    if (v43)
    {
      v3 = v39;
      v39 = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, v2);
        else
          *(_DWORD *)v3 -= 2;
      }
      v4 = v40;
      v40 = 0;
      if (v4)
      {
        if (*(_DWORD *)v4 == 2)
          WTF::StringImpl::destroy(v4, v2);
        else
          *(_DWORD *)v4 -= 2;
      }
      v5 = v41;
      v41 = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 2)
          WTF::StringImpl::destroy(v5, v2);
        else
          *(_DWORD *)v5 -= 2;
      }
      v6 = v42;
      v42 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, v2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = qword_1ECE7CD60;
      v8 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v8)
      {
        WTF::String::utf8();
        v10 = v37 ? (char *)v37 + 16 : 0;
        LODWORD(buf) = 136446210;
        *(_QWORD *)((char *)&buf + 4) = v10;
        _os_log_impl(&dword_1940B8000, v7, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
        v8 = (uint64_t)v37;
        v37 = 0;
        if (v8)
        {
          if (*(_DWORD *)v8 == 1)
            v8 = WTF::fastFree((WTF *)v8, v9);
          else
            --*(_DWORD *)v8;
        }
      }
      if (WebCore::LogWebRTC)
      {
        v11 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
        while (1)
        {
          v12 = *v11;
          if ((v12 & 1) != 0)
            break;
          v13 = __ldaxr(v11);
          if (v13 == v12)
          {
            if (!__stxr(v12 | 1, v11))
            {
              v14 = WTF::Logger::observers((WTF::Logger *)v8);
              v15 = *(unsigned int *)(v14 + 12);
              if ((_DWORD)v15)
              {
                v16 = *(uint64_t **)v14;
                v35 = *(_QWORD *)v14 + 8 * v15;
                do
                {
                  v17 = *v16;
                  LODWORD(buf) = 0;
                  WTF::Logger::LogSiteIdentifier::toString(v36);
                  v47 = 0;
                  WTF::String::String((WTF::String *)&v48, "needed more data, pushing ");
                  v18 = (WTF::String *)v1[5];
                  v49 = 0;
                  WTF::String::number(v18);
                  v51 = 0;
                  WTF::String::String((WTF::String *)v52, " samples");
                  v37 = 0;
                  v38 = 0;
                  v19 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x40);
                  LODWORD(v38) = 4;
                  v37 = v19;
                  v20 = HIDWORD(v38);
                  *((_DWORD *)v19 + 4 * HIDWORD(v38)) = buf;
                  v21 = *((_QWORD *)&buf + 1);
                  if (*((_QWORD *)&buf + 1))
                    **((_DWORD **)&buf + 1) += 2;
                  *((_QWORD *)v19 + 2 * v20 + 1) = v21;
                  *((_DWORD *)v19 + 4 * (v20 + 1)) = v47;
                  v22 = v48;
                  if (v48)
                    *(_DWORD *)v48 += 2;
                  *((_QWORD *)v19 + 2 * (v20 + 1) + 1) = v22;
                  *((_DWORD *)v19 + 4 * (v20 + 2)) = v49;
                  v23 = v50;
                  if (v50)
                    *(_DWORD *)v50 += 2;
                  *((_QWORD *)v19 + 2 * (v20 + 2) + 1) = v23;
                  *((_DWORD *)v19 + 4 * (v20 + 3)) = v51;
                  v24 = v52[0];
                  if (v52[0])
                    *(_DWORD *)v52[0] += 2;
                  *((_QWORD *)v19 + 2 * (v20 + 3) + 1) = v24;
                  HIDWORD(v38) = v20 + 4;
                  (*(void (**)(uint64_t, char *, _QWORD, WTF::Logger **))(*(_QWORD *)v17 + 16))(v17, &WebCore::LogWebRTC, 0, &v37);
                  v25 = v37;
                  if (HIDWORD(v38))
                  {
                    v26 = v1;
                    v27 = 16 * HIDWORD(v38);
                    v28 = (WTF::StringImpl **)((char *)v37 + 8);
                    do
                    {
                      v29 = *v28;
                      *v28 = 0;
                      if (v29)
                      {
                        if (*(_DWORD *)v29 == 2)
                          WTF::StringImpl::destroy(v29, (WTF::StringImpl *)v9);
                        else
                          *(_DWORD *)v29 -= 2;
                      }
                      v28 += 2;
                      v27 -= 16;
                    }
                    while (v27);
                    v25 = v37;
                    v1 = v26;
                  }
                  if (v25)
                  {
                    v37 = 0;
                    LODWORD(v38) = 0;
                    WTF::fastFree(v25, v9);
                  }
                  v30 = v52[0];
                  v52[0] = 0;
                  if (v30)
                  {
                    if (*(_DWORD *)v30 == 2)
                      WTF::StringImpl::destroy(v30, (WTF::StringImpl *)v9);
                    else
                      *(_DWORD *)v30 -= 2;
                  }
                  v31 = v50;
                  v50 = 0;
                  if (v31)
                  {
                    if (*(_DWORD *)v31 == 2)
                      WTF::StringImpl::destroy(v31, (WTF::StringImpl *)v9);
                    else
                      *(_DWORD *)v31 -= 2;
                  }
                  v32 = v48;
                  v48 = 0;
                  if (v32)
                  {
                    if (*(_DWORD *)v32 == 2)
                      WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v9);
                    else
                      *(_DWORD *)v32 -= 2;
                  }
                  v33 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
                  *((_QWORD *)&buf + 1) = 0;
                  if (v33)
                  {
                    if (*(_DWORD *)v33 == 2)
                      WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v9);
                    else
                      *(_DWORD *)v33 -= 2;
                  }
                  ++v16;
                }
                while (v16 != (uint64_t *)v35);
              }
              v34 = __ldxr(v11);
              if (v34 == 1)
              {
                if (!__stlxr(0, v11))
                  break;
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
              break;
            }
          }
          else
          {
            __clrex();
          }
        }
      }
      result = v43;
      v43 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          return (_QWORD *)WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v9);
        else
          *(_DWORD *)result -= 2;
      }
    }
    else
    {
      __break(0xC471u);
    }
  }
  return result;
}

void sub_1950368EC(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, WTF *a14, int a15, int a16, WTF::StringImpl *a17, WTF::StringImpl *a18, WTF::StringImpl *a19, uint64_t a20,WTF::StringImpl *a21,uint64_t a22,uint64_t a23,char a24,WTF::StringImpl *a25,uint64_t a26,WTF::StringImpl *a27,uint64_t a28,WTF::StringImpl *a29,uint64_t a30,WTF::StringImpl *a31)
{
  if (a21)
  {
    if (*(_DWORD *)a21 == 2)
      WTF::StringImpl::destroy(a21, a2);
    else
      *(_DWORD *)a21 -= 2;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::AudioSampleDataSource::pullSamples(AudioBufferList &,unsigned long,unsigned long long,double,WebCore::AudioSampleDataSource::PullMode)::$_0,void>::~CallableWrapper(_QWORD *a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v7;
  _QWORD *v8;

  *a1 = &off_1E331A280;
  v2 = a1[11];
  a1[11] = 0;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v7 = off_1E331A460;
      v7[1] = v3;
      v8 = v7;
      WTF::ensureOnMainRunLoop();
      if (v8)
        (*(void (**)(_QWORD *))(*v8 + 8))(v8);
    }
  }
  return a1;
}

void sub_195036BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::AudioSampleDataSource::pullSamples(AudioBufferList &,unsigned long,unsigned long long,double,WebCore::AudioSampleDataSource::PullMode)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v8;
  _QWORD *v9;

  *(_QWORD *)this = &off_1E331A280;
  v3 = *((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
    {
      v5 = __ldaxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
    {
      atomic_store(1u, v4);
      v8 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
      *v8 = off_1E331A460;
      v8[1] = v4;
      v9 = v8;
      WTF::ensureOnMainRunLoop();
      if (v9)
        (*(void (**)(_QWORD *))(*v9 + 8))(v9);
    }
  }
  return WTF::fastFree(this, a2);
}

void sub_195036C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

WTF::StringImpl *WTF::Detail::CallableWrapper<WebCore::AudioSampleDataSource::pullSamples(AudioBufferList &,unsigned long,unsigned long long,double,WebCore::AudioSampleDataSource::PullMode)::$_0,void>::call(WTF::StringImpl *result)
{
  WTF::String **v1;
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  int v4;
  WTF::StringImpl *v5;
  int v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  int v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  _BOOL8 v23;
  int v24;
  BOOL v25;
  int v26;
  BOOL v27;
  int v28;
  BOOL v29;
  int v30;
  BOOL v31;
  int v32;
  BOOL v33;
  int v34;
  BOOL v35;
  int v36;
  BOOL v37;
  int v38;
  BOOL v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  WTF::Logger *v52;
  char *v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  NSObject *v67;
  uint64_t v68;
  void *v69;
  char *v70;
  unsigned __int8 *v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  WTF::String *v78;
  WTF::String *v79;
  WTF::String *v80;
  WTF::String *v81;
  WTF::String *v82;
  WTF::Logger *v83;
  uint64_t v84;
  uint64_t v85;
  WTF::StringImpl *v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  WTF::StringImpl *v89;
  WTF::StringImpl *v90;
  WTF::StringImpl *v91;
  WTF::StringImpl *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  WTF::Logger *v97;
  uint64_t v98;
  WTF::StringImpl **v99;
  WTF::StringImpl *v100;
  WTF::StringImpl *v101;
  WTF::StringImpl *v102;
  WTF::StringImpl *v103;
  WTF::StringImpl *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  WTF::StringImpl *v109;
  WTF::StringImpl *v110;
  WTF::StringImpl *v111;
  WTF::StringImpl *v112;
  int v113;
  char *v114;
  uint64_t v115;
  WTF::String *v116;
  WTF::StringImpl *v117;
  WTF::String *v118;
  WTF::StringImpl *v119;
  WTF::String *v120;
  WTF::StringImpl *v121;
  WTF::Logger::LogSiteIdentifier *v122;
  WTF::Logger *v123;
  uint64_t v124;
  WTF::StringImpl *v125;
  WTF::StringImpl *v126;
  WTF::StringImpl *v127;
  WTF::StringImpl *v128;
  WTF::StringImpl *v129;
  WTF::StringImpl *v130;
  WTF::StringImpl *v131;
  WTF::StringImpl *v132;
  WTF::StringImpl *v133;
  WTF::StringImpl *v134;
  WTF::StringImpl *v135;
  WTF::StringImpl *v136;
  WTF::StringImpl *v137;
  WTF::StringImpl *v138;
  WTF::StringImpl *v139;
  __int128 buf;
  int v141;
  WTF::StringImpl *v142;
  int v143;
  WTF::StringImpl *v144;
  int v145;
  WTF::StringImpl *v146;
  int v147;
  WTF::StringImpl *v148;
  int v149;
  WTF::StringImpl *v150;
  int v151;
  WTF::StringImpl *v152;
  int v153;
  WTF::StringImpl *v154;
  int v155;
  WTF::StringImpl *v156;
  int v157;
  WTF::StringImpl *v158;
  int v159;
  WTF::StringImpl *v160;
  int v161;
  WTF::StringImpl *v162[3];

  v162[1] = *(WTF::StringImpl **)MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(*(_QWORD *)(*((_QWORD *)result + 10) + 368) + 12))
    return result;
  v1 = (WTF::String **)result;
  v122 = (WTF::StringImpl *)((char *)result + 8);
  WTF::Logger::LogSiteIdentifier::toString((WTF::StringImpl *)((char *)result + 8));
  WTF::String::String((WTF::String *)&v135, "need more data, sample ");
  WTF::String::number(v1[5]);
  WTF::String::String((WTF::String *)&v133, " with offset ");
  WTF::String::number(v1[9]);
  WTF::String::String((WTF::String *)&v131, ", trying to get ");
  WTF::String::number(v1[8]);
  WTF::String::String((WTF::String *)&v129, " samples, but not completely in range [");
  WTF::String::number(v1[6]);
  WTF::String::String((WTF::String *)&v127, " .. ");
  WTF::String::number(v1[7]);
  WTF::String::String((WTF::String *)&v125, "]");
  v2 = v136;
  v3 = v134;
  if (v136)
    v4 = *((_DWORD *)v136 + 1);
  else
    v4 = 0;
  v5 = v133;
  if (v135)
    v6 = *((_DWORD *)v135 + 1);
  else
    v6 = 0;
  v7 = v132;
  if (v134)
    v8 = *((_DWORD *)v134 + 1);
  else
    v8 = 0;
  v9 = v131;
  if (v133)
    v10 = *((_DWORD *)v133 + 1);
  else
    v10 = 0;
  v11 = v130;
  if (v132)
    v12 = *((_DWORD *)v132 + 1);
  else
    v12 = 0;
  v13 = v129;
  if (v131)
    v14 = *((_DWORD *)v131 + 1);
  else
    v14 = 0;
  v15 = (int)v128;
  if (v130)
    v16 = *((_DWORD *)v130 + 1);
  else
    v16 = 0;
  v17 = (int)v127;
  if (v129)
    v18 = *((_DWORD *)v129 + 1);
  else
    v18 = 0;
  v19 = (int)v126;
  v121 = v128;
  if (v128)
    v15 = *((_DWORD *)v128 + 1);
  v20 = (int)v125;
  v120 = v127;
  if (v127)
    v17 = *((_DWORD *)v127 + 1);
  v119 = v126;
  if (v126)
    v19 = *((_DWORD *)v126 + 1);
  v118 = v125;
  if (v125)
    v20 = *((_DWORD *)v125 + 1);
  if ((v20 | v19) < 0)
    goto LABEL_288;
  v21 = __OFADD__(v19, v20);
  v22 = v19 + v20;
  v23 = v21;
  if (v17 < 0 || v23)
    goto LABEL_288;
  v21 = __OFADD__(v17, v22);
  v24 = v17 + v22;
  v25 = v21;
  if (v15 < 0 || v25)
    goto LABEL_288;
  v21 = __OFADD__(v15, v24);
  v26 = v15 + v24;
  v27 = v21;
  if (v18 < 0 || v27)
    goto LABEL_288;
  v21 = __OFADD__(v18, v26);
  v28 = v18 + v26;
  v29 = v21;
  if (v16 < 0 || v29)
    goto LABEL_288;
  v21 = __OFADD__(v16, v28);
  v30 = v16 + v28;
  v31 = v21;
  if (v14 < 0 || v31)
    goto LABEL_288;
  v21 = __OFADD__(v14, v30);
  v32 = v14 + v30;
  v33 = v21;
  if (v12 < 0 || v33)
    goto LABEL_288;
  v21 = __OFADD__(v12, v32);
  v34 = v12 + v32;
  v35 = v21;
  if (v10 < 0 || v35)
    goto LABEL_288;
  v21 = __OFADD__(v10, v34);
  v36 = v10 + v34;
  v37 = v21;
  if (v8 < 0 || v37)
    goto LABEL_288;
  v21 = __OFADD__(v8, v36);
  v38 = v8 + v36;
  v39 = v21;
  if (v6 < 0 || v39)
    goto LABEL_288;
  v21 = __OFADD__(v6, v38);
  v40 = v6 + v38;
  v41 = v21;
  if (v4 < 0)
    goto LABEL_288;
  if (v41)
    goto LABEL_288;
  v42 = (v4 + v40);
  if (__OFADD__(v4, v40))
    goto LABEL_288;
  v117 = v135;
  if (v136 && (*((_BYTE *)v136 + 16) & 4) == 0
    || v135 && (*((_BYTE *)v135 + 16) & 4) == 0
    || v134 && (*((_BYTE *)v134 + 16) & 4) == 0
    || v133 && (*((_BYTE *)v133 + 16) & 4) == 0
    || v132 && (*((_BYTE *)v132 + 16) & 4) == 0
    || v131 && (*((_BYTE *)v131 + 16) & 4) == 0
    || v130 && (*((_BYTE *)v130 + 16) & 4) == 0
    || v129 && (*((_BYTE *)v129 + 16) & 4) == 0
    || v128 && (*((_BYTE *)v128 + 16) & 4) == 0
    || v127 && (*((_BYTE *)v127 + 16) & 4) == 0
    || v126 && (*((_BYTE *)v126 + 16) & 4) == 0)
  {
    goto LABEL_102;
  }
  if (v125)
  {
    if ((*((_BYTE *)v125 + 16) & 4) == 0)
    {
LABEL_102:
      if ((_DWORD)v42)
      {
        if (v42 <= 0x7FFFFFEF)
        {
          WTF::tryFastCompactMalloc((WTF *)(2 * v42 + 20));
          v43 = buf;
          if ((_QWORD)buf)
          {
            v116 = v13;
            v44 = (uint64_t)v11;
            v45 = (uint64_t)v9;
            v46 = (uint64_t)v7;
            v47 = buf + 20;
            *(_DWORD *)buf = 2;
            *(_DWORD *)(v43 + 4) = v42;
            *(_QWORD *)(v43 + 8) = v43 + 20;
            *(_DWORD *)(v43 + 16) = 0;
            v138 = v2;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v138, (char *)(v43 + 20));
            v48 = (uint64_t)v138;
            if (v138)
              v48 = *((unsigned int *)v138 + 1);
            v49 = (char *)(v47 + 2 * v48);
            v139 = v117;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v139, v49);
            v50 = (uint64_t)v139;
            if (v139)
              v50 = *((unsigned int *)v139 + 1);
            v51 = &v49[2 * v50];
            v123 = v3;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v123, v51);
            v52 = v123;
            if (v123)
              v52 = (WTF::Logger *)*((unsigned int *)v123 + 1);
            v53 = &v51[2 * (_QWORD)v52];
            *(_QWORD *)&buf = v5;
            WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&buf, v53);
            v54 = buf;
            if ((_QWORD)buf)
              v54 = *(unsigned int *)(buf + 4);
            WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v53[2 * v54], v46, v45, v44, (uint64_t)v116, (uint64_t)v121, (uint64_t)v120, (uint64_t)v119, (uint64_t)v118);
            goto LABEL_114;
          }
        }
LABEL_288:
        v137 = 0;
        __break(0xC471u);
        JUMPOUT(0x195037A58);
      }
      goto LABEL_289;
    }
    if ((_DWORD)v42)
    {
      if ((v42 & 0x80000000) != 0)
        goto LABEL_288;
      goto LABEL_284;
    }
LABEL_289:
    v43 = MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_114;
  }
  if (!(_DWORD)v42)
    goto LABEL_289;
  v118 = 0;
  if ((v42 & 0x80000000) != 0)
    goto LABEL_288;
LABEL_284:
  WTF::tryFastCompactMalloc((WTF *)(v42 + 20));
  v43 = buf;
  if (!(_QWORD)buf)
    goto LABEL_288;
  v114 = (char *)(buf + 20);
  *(_DWORD *)buf = 2;
  *(_DWORD *)(v43 + 4) = v42;
  *(_QWORD *)(v43 + 8) = v43 + 20;
  *(_DWORD *)(v43 + 16) = 4;
  WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v114, (uint64_t)v2, (uint64_t)v117, (uint64_t)v3, (uint64_t)v5, (uint64_t)v7, (uint64_t)v9, (uint64_t)v11, (uint64_t)v13, (uint64_t)v121, (uint64_t)v120, (uint64_t)v119, (uint64_t)v118);
LABEL_114:
  v137 = (WTF::StringImpl *)v43;
  v55 = v125;
  v125 = 0;
  if (v55)
  {
    if (*(_DWORD *)v55 == 2)
      WTF::StringImpl::destroy(v55, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)v55 -= 2;
  }
  v56 = v126;
  v126 = 0;
  if (v56)
  {
    if (*(_DWORD *)v56 == 2)
      WTF::StringImpl::destroy(v56, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)v56 -= 2;
  }
  v57 = v127;
  v127 = 0;
  if (v57)
  {
    if (*(_DWORD *)v57 == 2)
      WTF::StringImpl::destroy(v57, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)v57 -= 2;
  }
  v58 = v128;
  v128 = 0;
  if (v58)
  {
    if (*(_DWORD *)v58 == 2)
      WTF::StringImpl::destroy(v58, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)v58 -= 2;
  }
  v59 = v129;
  v129 = 0;
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
      WTF::StringImpl::destroy(v59, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)v59 -= 2;
  }
  v60 = v130;
  v130 = 0;
  if (v60)
  {
    if (*(_DWORD *)v60 == 2)
      WTF::StringImpl::destroy(v60, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)v60 -= 2;
  }
  v61 = v131;
  v131 = 0;
  if (v61)
  {
    if (*(_DWORD *)v61 == 2)
      WTF::StringImpl::destroy(v61, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)v61 -= 2;
  }
  v62 = v132;
  v132 = 0;
  if (v62)
  {
    if (*(_DWORD *)v62 == 2)
      WTF::StringImpl::destroy(v62, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)v62 -= 2;
  }
  v63 = v133;
  v133 = 0;
  if (v63)
  {
    if (*(_DWORD *)v63 == 2)
      WTF::StringImpl::destroy(v63, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)v63 -= 2;
  }
  v64 = v134;
  v134 = 0;
  if (v64)
  {
    if (*(_DWORD *)v64 == 2)
      WTF::StringImpl::destroy(v64, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)v64 -= 2;
  }
  v65 = v135;
  v135 = 0;
  if (v65)
  {
    if (*(_DWORD *)v65 == 2)
      WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)v65 -= 2;
  }
  v66 = v136;
  v136 = 0;
  if (v66)
  {
    if (*(_DWORD *)v66 == 2)
      WTF::StringImpl::destroy(v66, (WTF::StringImpl *)v23);
    else
      *(_DWORD *)v66 -= 2;
  }
  v67 = qword_1ECE7CD60;
  v68 = os_log_type_enabled((os_log_t)qword_1ECE7CD60, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v68)
  {
    WTF::String::utf8();
    v70 = v123 ? (char *)v123 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v70;
    _os_log_impl(&dword_1940B8000, v67, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v68 = (uint64_t)v123;
    v123 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 1)
        v68 = WTF::fastFree((WTF *)v68, v69);
      else
        --*(_DWORD *)v68;
    }
  }
  if (WebCore::LogWebRTC && byte_1ECE7CD50)
  {
    v71 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v72 = *v71;
      if ((v72 & 1) != 0)
        break;
      v73 = __ldaxr(v71);
      if (v73 == v72)
      {
        if (!__stxr(v72 | 1, v71))
        {
          v74 = WTF::Logger::observers((WTF::Logger *)v68);
          v75 = *(unsigned int *)(v74 + 12);
          if ((_DWORD)v75)
          {
            v76 = *(uint64_t **)v74;
            v115 = *(_QWORD *)v74 + 8 * v75;
            do
            {
              v77 = *v76;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(v122);
              v141 = 0;
              WTF::String::String((WTF::String *)&v142, "need more data, sample ");
              v78 = v1[5];
              v143 = 0;
              WTF::String::number(v78);
              v145 = 0;
              WTF::String::String((WTF::String *)&v146, " with offset ");
              v79 = v1[9];
              v147 = 0;
              WTF::String::number(v79);
              v149 = 0;
              WTF::String::String((WTF::String *)&v150, ", trying to get ");
              v80 = v1[8];
              v151 = 0;
              WTF::String::number(v80);
              v153 = 0;
              WTF::String::String((WTF::String *)&v154, " samples, but not completely in range [");
              v81 = v1[6];
              v155 = 0;
              WTF::String::number(v81);
              v157 = 0;
              WTF::String::String((WTF::String *)&v158, " .. ");
              v82 = v1[7];
              v159 = 0;
              WTF::String::number(v82);
              v161 = 0;
              WTF::String::String((WTF::String *)v162, "]");
              v123 = 0;
              v124 = 0;
              v83 = (WTF::Logger *)WTF::fastMalloc((WTF *)0xC0);
              LODWORD(v124) = 12;
              v123 = v83;
              v84 = HIDWORD(v124);
              *((_DWORD *)v83 + 4 * HIDWORD(v124)) = buf;
              v85 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v83 + 2 * v84 + 1) = v85;
              *((_DWORD *)v83 + 4 * (v84 + 1)) = v141;
              v86 = v142;
              if (v142)
                *(_DWORD *)v142 += 2;
              *((_QWORD *)v83 + 2 * (v84 + 1) + 1) = v86;
              *((_DWORD *)v83 + 4 * (v84 + 2)) = v143;
              v87 = v144;
              if (v144)
                *(_DWORD *)v144 += 2;
              *((_QWORD *)v83 + 2 * (v84 + 2) + 1) = v87;
              *((_DWORD *)v83 + 4 * (v84 + 3)) = v145;
              v88 = v146;
              if (v146)
                *(_DWORD *)v146 += 2;
              *((_QWORD *)v83 + 2 * (v84 + 3) + 1) = v88;
              *((_DWORD *)v83 + 4 * (v84 + 4)) = v147;
              v89 = v148;
              if (v148)
                *(_DWORD *)v148 += 2;
              *((_QWORD *)v83 + 2 * (v84 + 4) + 1) = v89;
              *((_DWORD *)v83 + 4 * (v84 + 5)) = v149;
              v90 = v150;
              if (v150)
                *(_DWORD *)v150 += 2;
              *((_QWORD *)v83 + 2 * (v84 + 5) + 1) = v90;
              *((_DWORD *)v83 + 4 * (v84 + 6)) = v151;
              v91 = v152;
              if (v152)
                *(_DWORD *)v152 += 2;
              *((_QWORD *)v83 + 2 * (v84 + 6) + 1) = v91;
              *((_DWORD *)v83 + 4 * (v84 + 7)) = v153;
              v92 = v154;
              if (v154)
                *(_DWORD *)v154 += 2;
              *((_QWORD *)v83 + 2 * (v84 + 7) + 1) = v92;
              *((_DWORD *)v83 + 4 * (v84 + 8)) = v155;
              v93 = v156;
              if (v156)
                *(_DWORD *)v156 += 2;
              *((_QWORD *)v83 + 2 * (v84 + 8) + 1) = v93;
              *((_DWORD *)v83 + 4 * (v84 + 9)) = v157;
              v94 = v158;
              if (v158)
                *(_DWORD *)v158 += 2;
              *((_QWORD *)v83 + 2 * (v84 + 9) + 1) = v94;
              *((_DWORD *)v83 + 4 * (v84 + 10)) = v159;
              v95 = v160;
              if (v160)
                *(_DWORD *)v160 += 2;
              *((_QWORD *)v83 + 2 * (v84 + 10) + 1) = v95;
              *((_DWORD *)v83 + 4 * (v84 + 11)) = v161;
              v96 = v162[0];
              if (v162[0])
                *(_DWORD *)v162[0] += 2;
              *((_QWORD *)v83 + 2 * (v84 + 11) + 1) = v96;
              HIDWORD(v124) = v84 + 12;
              (*(void (**)(uint64_t, char *, uint64_t, WTF::Logger **))(*(_QWORD *)v77 + 16))(v77, &WebCore::LogWebRTC, 1, &v123);
              v97 = v123;
              if (HIDWORD(v124))
              {
                v98 = 16 * HIDWORD(v124);
                v99 = (WTF::StringImpl **)((char *)v123 + 8);
                do
                {
                  v100 = *v99;
                  *v99 = 0;
                  if (v100)
                  {
                    if (*(_DWORD *)v100 == 2)
                      WTF::StringImpl::destroy(v100, (WTF::StringImpl *)v69);
                    else
                      *(_DWORD *)v100 -= 2;
                  }
                  v99 += 2;
                  v98 -= 16;
                }
                while (v98);
                v97 = v123;
              }
              if (v97)
              {
                v123 = 0;
                LODWORD(v124) = 0;
                WTF::fastFree(v97, v69);
              }
              v101 = v162[0];
              v162[0] = 0;
              if (v101)
              {
                if (*(_DWORD *)v101 == 2)
                  WTF::StringImpl::destroy(v101, (WTF::StringImpl *)v69);
                else
                  *(_DWORD *)v101 -= 2;
              }
              v102 = v160;
              v160 = 0;
              if (v102)
              {
                if (*(_DWORD *)v102 == 2)
                  WTF::StringImpl::destroy(v102, (WTF::StringImpl *)v69);
                else
                  *(_DWORD *)v102 -= 2;
              }
              v103 = v158;
              v158 = 0;
              if (v103)
              {
                if (*(_DWORD *)v103 == 2)
                  WTF::StringImpl::destroy(v103, (WTF::StringImpl *)v69);
                else
                  *(_DWORD *)v103 -= 2;
              }
              v104 = v156;
              v156 = 0;
              if (v104)
              {
                if (*(_DWORD *)v104 == 2)
                  WTF::StringImpl::destroy(v104, (WTF::StringImpl *)v69);
                else
                  *(_DWORD *)v104 -= 2;
              }
              v105 = v154;
              v154 = 0;
              if (v105)
              {
                if (*(_DWORD *)v105 == 2)
                  WTF::StringImpl::destroy(v105, (WTF::StringImpl *)v69);
                else
                  *(_DWORD *)v105 -= 2;
              }
              v106 = v152;
              v152 = 0;
              if (v106)
              {
                if (*(_DWORD *)v106 == 2)
                  WTF::StringImpl::destroy(v106, (WTF::StringImpl *)v69);
                else
                  *(_DWORD *)v106 -= 2;
              }
              v107 = v150;
              v150 = 0;
              if (v107)
              {
                if (*(_DWORD *)v107 == 2)
                  WTF::StringImpl::destroy(v107, (WTF::StringImpl *)v69);
                else
                  *(_DWORD *)v107 -= 2;
              }
              v108 = v148;
              v148 = 0;
              if (v108)
              {
                if (*(_DWORD *)v108 == 2)
                  WTF::StringImpl::destroy(v108, (WTF::StringImpl *)v69);
                else
                  *(_DWORD *)v108 -= 2;
              }
              v109 = v146;
              v146 = 0;
              if (v109)
              {
                if (*(_DWORD *)v109 == 2)
                  WTF::StringImpl::destroy(v109, (WTF::StringImpl *)v69);
                else
                  *(_DWORD *)v109 -= 2;
              }
              v110 = v144;
              v144 = 0;
              if (v110)
              {
                if (*(_DWORD *)v110 == 2)
                  WTF::StringImpl::destroy(v110, (WTF::StringImpl *)v69);
                else
                  *(_DWORD *)v110 -= 2;
              }
              v111 = v142;
              v142 = 0;
              if (v111)
              {
                if (*(_DWORD *)v111 == 2)
                  WTF::StringImpl::destroy(v111, (WTF::StringImpl *)v69);
                else
                  *(_DWORD *)v111 -= 2;
              }
              v112 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v112)
              {
                if (*(_DWORD *)v112 == 2)
                  WTF::StringImpl::destroy(v112, (WTF::StringImpl *)v69);
                else
                  *(_DWORD *)v112 -= 2;
              }
              ++v76;
            }
            while (v76 != (uint64_t *)v115);
          }
          v113 = __ldxr(v71);
          if (v113 == 1)
          {
            if (!__stlxr(0, v71))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = v137;
  v137 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)v69);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_195037A78(_Unwind_Exception *a1, WTF::StringImpl *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,WTF *a34,uint64_t a35,WTF::StringImpl *a36,WTF::StringImpl *a37,WTF::StringImpl *a38,WTF::StringImpl *a39,WTF::StringImpl *a40,WTF::StringImpl *a41,WTF::StringImpl *a42,WTF::StringImpl *a43,WTF::StringImpl *a44,WTF::StringImpl *a45,WTF::StringImpl *a46,WTF::StringImpl *a47)
{
  WTF::StringImpl *v47;

  if (*(_DWORD *)v47 == 2)
    WTF::StringImpl::destroy(v47, a2);
  else
    *(_DWORD *)v47 -= 2;
  if (a36)
  {
    if (*(_DWORD *)a36 == 2)
      WTF::StringImpl::destroy(a36, a2);
    else
      *(_DWORD *)a36 -= 2;
  }
  if (a37)
  {
    if (*(_DWORD *)a37 == 2)
      WTF::StringImpl::destroy(a37, a2);
    else
      *(_DWORD *)a37 -= 2;
  }
  if (a38)
  {
    if (*(_DWORD *)a38 == 2)
      WTF::StringImpl::destroy(a38, a2);
    else
      *(_DWORD *)a38 -= 2;
  }
  if (a39)
  {
    if (*(_DWORD *)a39 == 2)
      WTF::StringImpl::destroy(a39, a2);
    else
      *(_DWORD *)a39 -= 2;
  }
  if (a40)
  {
    if (*(_DWORD *)a40 == 2)
      WTF::StringImpl::destroy(a40, a2);
    else
      *(_DWORD *)a40 -= 2;
  }
  if (a41)
  {
    if (*(_DWORD *)a41 == 2)
      WTF::StringImpl::destroy(a41, a2);
    else
      *(_DWORD *)a41 -= 2;
  }
  if (a42)
  {
    if (*(_DWORD *)a42 == 2)
      WTF::StringImpl::destroy(a42, a2);
    else
      *(_DWORD *)a42 -= 2;
  }
  if (a43)
  {
    if (*(_DWORD *)a43 == 2)
      WTF::StringImpl::destroy(a43, a2);
    else
      *(_DWORD *)a43 -= 2;
  }
  if (a44)
  {
    if (*(_DWORD *)a44 == 2)
      WTF::StringImpl::destroy(a44, a2);
    else
      *(_DWORD *)a44 -= 2;
  }
  if (a45)
  {
    if (*(_DWORD *)a45 == 2)
      WTF::StringImpl::destroy(a45, a2);
    else
      *(_DWORD *)a45 -= 2;
  }
  if (a46)
  {
    if (*(_DWORD *)a46 == 2)
      WTF::StringImpl::destroy(a46, a2);
    else
      *(_DWORD *)a46 -= 2;
  }
  if (a47)
  {
    if (*(_DWORD *)a47 == 2)
      WTF::StringImpl::destroy(a47, a2);
    else
      *(_DWORD *)a47 -= 2;
  }
  _Unwind_Resume(a1);
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  char *v21;
  size_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  size_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  size_t v30;
  uint64_t i;
  uint64_t v32;
  uint64_t v33;
  char *v35;
  unsigned __int128 *v36;
  unsigned __int128 v37;
  char *v38;
  unsigned __int128 *v39;
  unsigned __int128 v40;
  unsigned __int128 *v41;
  unsigned __int128 *v42;
  unsigned __int128 *v43;
  unsigned __int128 v44;
  char v45;
  char v46;
  char v47;

  if (a2)
  {
    v21 = *(char **)(a2 + 8);
    v22 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      if ((_DWORD)v22)
      {
        if ((_DWORD)v22 == 1)
          *__dst = *v21;
        else
          memcpy(__dst, v21, v22);
      }
    }
    else
    {
      if (v22 < 0x10)
      {
        v35 = __dst;
      }
      else
      {
        v35 = &__dst[v22 & 0xFFFFFFF0];
        v36 = (unsigned __int128 *)__dst;
        do
        {
          v37 = (unsigned __int128)vld2q_s8(v21);
          v21 += 32;
          *v36++ = v37;
        }
        while (v36 != (unsigned __int128 *)v35);
      }
      while (v35 != &__dst[v22])
      {
        v45 = *v21;
        v21 += 2;
        *v35++ = v45;
      }
    }
    v23 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v23 = 0;
  }
  v24 = &__dst[v23];
  if (a3)
  {
    v25 = *(char **)(a3 + 8);
    v26 = *(unsigned int *)(a3 + 4);
    if ((*(_BYTE *)(a3 + 16) & 4) != 0)
    {
      if ((_DWORD)v26)
      {
        if ((_DWORD)v26 == 1)
          *v24 = *v25;
        else
          memcpy(v24, v25, v26);
      }
    }
    else
    {
      if (v26 < 0x10)
      {
        v38 = v24;
      }
      else
      {
        v38 = &v24[v26 & 0xFFFFFFF0];
        v39 = (unsigned __int128 *)v24;
        do
        {
          v40 = (unsigned __int128)vld2q_s8(v25);
          v25 += 32;
          *v39++ = v40;
        }
        while (v39 != (unsigned __int128 *)v38);
      }
      while (v38 != &v24[v26])
      {
        v46 = *v25;
        v25 += 2;
        *v38++ = v46;
      }
    }
    v27 = *(unsigned int *)(a3 + 4);
  }
  else
  {
    v27 = 0;
  }
  v28 = &v24[v27];
  if (a4)
  {
    v29 = *(char **)(a4 + 8);
    v30 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      v32 = a13;
      i = a11;
      if ((_DWORD)v30)
      {
        if ((_DWORD)v30 == 1)
          *v28 = *v29;
        else
          memcpy(v28, v29, v30);
      }
    }
    else
    {
      v41 = (unsigned __int128 *)&v28[v30];
      if (v30 < 0x10)
      {
        v42 = (unsigned __int128 *)v28;
      }
      else
      {
        v42 = (unsigned __int128 *)&v28[v30 & 0xFFFFFFF0];
        v43 = (unsigned __int128 *)v28;
        do
        {
          v44 = (unsigned __int128)vld2q_s8(v29);
          v29 += 32;
          *v43++ = v44;
        }
        while (v43 != v42);
      }
      v32 = a13;
      for (i = a11; v42 != v41; v42 = (unsigned __int128 *)((char *)v42 + 1))
      {
        v47 = *v29;
        v29 += 2;
        *(_BYTE *)v42 = v47;
      }
    }
    v33 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v33 = 0;
    v32 = a13;
    i = a11;
  }
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v28[v33], a5, a6, a7, a8, a9, a10, i, a12, v32);
}

_BYTE *WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  char *v18;
  size_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  size_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  size_t v27;
  uint64_t v28;
  char *v30;
  unsigned __int128 *v31;
  unsigned __int128 v32;
  char *v33;
  unsigned __int128 *v34;
  unsigned __int128 v35;
  unsigned __int128 *v36;
  unsigned __int128 *v37;
  unsigned __int128 v38;
  char v39;
  char v40;
  char v41;

  if (a2)
  {
    v18 = *(char **)(a2 + 8);
    v19 = *(unsigned int *)(a2 + 4);
    if ((*(_BYTE *)(a2 + 16) & 4) != 0)
    {
      if ((_DWORD)v19)
      {
        if ((_DWORD)v19 == 1)
          *__dst = *v18;
        else
          memcpy(__dst, v18, v19);
      }
    }
    else
    {
      if (v19 < 0x10)
      {
        v30 = __dst;
      }
      else
      {
        v30 = &__dst[v19 & 0xFFFFFFF0];
        v31 = (unsigned __int128 *)__dst;
        do
        {
          v32 = (unsigned __int128)vld2q_s8(v18);
          v18 += 32;
          *v31++ = v32;
        }
        while (v31 != (unsigned __int128 *)v30);
      }
      while (v30 != &__dst[v19])
      {
        v39 = *v18;
        v18 += 2;
        *v30++ = v39;
      }
    }
    v20 = *(unsigned int *)(a2 + 4);
  }
  else
  {
    v20 = 0;
  }
  v21 = &__dst[v20];
  if (a3)
  {
    v22 = *(char **)(a3 + 8);
    v23 = *(unsigned int *)(a3 + 4);
    if ((*(_BYTE *)(a3 + 16) & 4) != 0)
    {
      if ((_DWORD)v23)
      {
        if ((_DWORD)v23 == 1)
          *v21 = *v22;
        else
          memcpy(v21, v22, v23);
      }
    }
    else
    {
      if (v23 < 0x10)
      {
        v33 = v21;
      }
      else
      {
        v33 = &v21[v23 & 0xFFFFFFF0];
        v34 = (unsigned __int128 *)v21;
        do
        {
          v35 = (unsigned __int128)vld2q_s8(v22);
          v22 += 32;
          *v34++ = v35;
        }
        while (v34 != (unsigned __int128 *)v33);
      }
      while (v33 != &v21[v23])
      {
        v40 = *v22;
        v22 += 2;
        *v33++ = v40;
      }
    }
    v24 = *(unsigned int *)(a3 + 4);
  }
  else
  {
    v24 = 0;
  }
  v25 = &v21[v24];
  if (a4)
  {
    v26 = *(char **)(a4 + 8);
    v27 = *(unsigned int *)(a4 + 4);
    if ((*(_BYTE *)(a4 + 16) & 4) != 0)
    {
      if ((_DWORD)v27)
      {
        if ((_DWORD)v27 == 1)
          *v25 = *v26;
        else
          memcpy(v25, v26, v27);
      }
    }
    else
    {
      if (v27 < 0x10)
      {
        v36 = (unsigned __int128 *)&v21[v24];
      }
      else
      {
        v36 = (unsigned __int128 *)&v25[v27 & 0xFFFFFFF0];
        v37 = (unsigned __int128 *)&v21[v24];
        do
        {
          v38 = (unsigned __int128)vld2q_s8(v26);
          v26 += 32;
          *v37++ = v38;
        }
        while (v37 != v36);
      }
      while (v36 != (unsigned __int128 *)&v25[v27])
      {
        v41 = *v26;
        v26 += 2;
        *(_BYTE *)v36 = v41;
        v36 = (unsigned __int128 *)((char *)v36 + 1);
      }
    }
    v28 = *(unsigned int *)(a4 + 4);
  }
  else
  {
    v28 = 0;
  }
  return WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v25[v28], a5, a6, a7, a8, a9, a10);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::MediaSessionManagerCocoa::*&)(void),WebCore::MediaSessionManagerCocoa*&>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSessionManagerCocoa::updateSessionState(void)::$_0,void,WebCore::PlatformMediaSession &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  _DWORD *v6;
  _DWORD *v7;
  _BYTE *v8;

  result = (***(uint64_t (****)(_QWORD))(a2 + 32))(*(_QWORD *)(a2 + 32));
  v5 = result;
  switch((int)result)
  {
    case 1:
      v6 = *(_DWORD **)(a1 + 8);
      goto LABEL_8;
    case 2:
      v7 = *(_DWORD **)(a1 + 16);
      goto LABEL_5;
    case 3:
      v7 = *(_DWORD **)(a1 + 32);
LABEL_5:
      ++*v7;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 72))(*(_QWORD *)(a2 + 32));
      if ((_DWORD)result)
      {
        result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 192))(*(_QWORD *)(a2 + 32));
        if ((_DWORD)result)
        {
          v6 = *(_DWORD **)(a1 + 24);
LABEL_8:
          ++*v6;
        }
      }
      break;
    case 4:
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 72))(*(_QWORD *)(a2 + 32));
      if ((_DWORD)result)
      {
        ++**(_DWORD **)(a1 + 40);
        result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 88))(*(_QWORD *)(a2 + 32));
        if ((_DWORD)result)
          result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 96))(*(_QWORD *)(a2 + 32));
        **(_BYTE **)(a1 + 48) |= result;
      }
      break;
    default:
      break;
  }
  if (!**(_BYTE **)(a1 + 56))
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 104))(a2);
    if ((result & 1) != 0
      || (v5 & 0xFE) == 2
      && (result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 96))(*(_QWORD *)(a2 + 32)),
          (_DWORD)result)
      && ((result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 88))(*(_QWORD *)(a2 + 32)),
           (result & 1) != 0)
       || *(_BYTE *)(a2 + 76)
       || *(_BYTE *)(a2 + 75)))
    {
      v8 = *(_BYTE **)(a1 + 64);
      **(_BYTE **)(a1 + 56) = 1;
      *v8 |= v5 == 2;
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 88))(*(_QWORD *)(a2 + 32));
      **(_BYTE **)(a1 + 48) |= result;
    }
  }
  return result;
}

char *WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(char *__dst, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v31 = a2;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v31, __dst);
  v20 = v31;
  if (v31)
    v20 = *(unsigned int *)(v31 + 4);
  v21 = &__dst[2 * v20];
  v32 = a3;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v32, v21);
  v22 = v32;
  if (v32)
    v22 = *(unsigned int *)(v32 + 4);
  v23 = &v21[2 * v22];
  v33 = a4;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v33, v23);
  v24 = v33;
  if (v33)
    v24 = *(unsigned int *)(v33 + 4);
  v25 = &v23[2 * v24];
  v34 = a5;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v34, v25);
  v26 = v34;
  if (v34)
    v26 = *(unsigned int *)(v34 + 4);
  v27 = &v25[2 * v26];
  v35 = a6;
  WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>(&v35, v27);
  v28 = v35;
  if (v35)
    v28 = *(unsigned int *)(v35 + 4);
  return WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(&v27[2 * v28], a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t WTF::tryMakeStringFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X7>, _QWORD *a9@<X8>, uint64_t *a10)
{
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  int v34;
  BOOL v35;
  BOOL v36;
  int v37;
  int v38;
  BOOL v39;
  int v40;
  BOOL v41;
  int v42;
  BOOL v43;
  int v44;
  char v45;
  int v46;
  char v47;
  int v48;
  unsigned int v49;
  uint64_t v50;

  v17 = *a1;
  if (*a1)
    v18 = *(_DWORD *)(v17 + 4);
  else
    v18 = 0;
  v19 = *a2;
  if (*a2)
    v20 = *(_DWORD *)(v19 + 4);
  else
    v20 = 0;
  v21 = *a3;
  if (*a3)
    v22 = *(_DWORD *)(v21 + 4);
  else
    v22 = 0;
  v23 = *a4;
  if (*a4)
    v24 = *(_DWORD *)(v23 + 4);
  else
    v24 = 0;
  v25 = *a5;
  if (*a5)
    v26 = *(_DWORD *)(v25 + 4);
  else
    v26 = 0;
  v27 = *a6;
  if (*a6)
    v28 = *(_DWORD *)(v27 + 4);
  else
    v28 = 0;
  v29 = *a7;
  if (v29)
    v30 = *(_DWORD *)(v29 + 4);
  else
    v30 = 0;
  v31 = *a8;
  if (v31)
    result = *(unsigned int *)(v31 + 4);
  else
    result = 0;
  v33 = *a10;
  if (*a10)
    v34 = *(_DWORD *)(v33 + 4);
  else
    v34 = 0;
  if (((v34 | result) & 0x80000000) != 0)
    goto LABEL_86;
  v35 = __OFADD__((_DWORD)result, v34);
  result = (result + v34);
  v36 = v35;
  if (v30 < 0 || v36)
    goto LABEL_86;
  v35 = __OFADD__(v30, (_DWORD)result);
  v37 = v30 + result;
  result = v35;
  if (v28 < 0 || (result & 1) != 0)
    goto LABEL_86;
  v35 = __OFADD__(v28, v37);
  v38 = v28 + v37;
  v39 = v35;
  if (v26 < 0 || v39)
    goto LABEL_86;
  v35 = __OFADD__(v26, v38);
  v40 = v26 + v38;
  v41 = v35;
  if (v24 < 0 || v41)
    goto LABEL_86;
  v35 = __OFADD__(v24, v40);
  v42 = v24 + v40;
  v43 = v35;
  if (v22 < 0
    || v43
    || ((v35 = __OFADD__(v22, v42), v44 = v22 + v42, !v35) ? (v45 = 0) : (v45 = 1),
        v20 < 0
     || (v45 & 1) != 0
     || ((v35 = __OFADD__(v20, v44), v46 = v20 + v44, !v35) ? (v47 = 0) : (v47 = 1),
         v18 < 0 || (v47 & 1) != 0 || (result = (v18 + v46), __OFADD__(v18, v46)))))
  {
LABEL_86:
    *a9 = 0;
    return result;
  }
  if ((!v17 || (*(_BYTE *)(v17 + 16) & 4) != 0)
    && (!v19 || (*(_BYTE *)(v19 + 16) & 4) != 0)
    && (!v21 || (*(_BYTE *)(v21 + 16) & 4) != 0)
    && (!v23 || (*(_BYTE *)(v23 + 16) & 4) != 0)
    && (!v25 || (*(_BYTE *)(v25 + 16) & 4) != 0)
    && (!v27 || (*(_BYTE *)(v27 + 16) & 4) != 0)
    && (!v29 || (*(_BYTE *)(v29 + 16) & 4) != 0))
  {
    if (v31)
    {
      v49 = *(_DWORD *)(v31 + 16);
      v48 = (v49 >> 2) & 1;
      if (!v33 || (v49 & 4) == 0)
        goto LABEL_71;
    }
    else if (!v33)
    {
      v48 = 1;
      goto LABEL_71;
    }
    v48 = (*(unsigned __int8 *)(v33 + 16) >> 2) & 1;
  }
  else
  {
    v48 = 0;
  }
LABEL_71:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v48, v17, v19, v21, v23, v25, v27, &v50, v29, v31, v33);
  *a9 = v50;
  return result;
}

uint64_t WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v15;
  _DWORD *v20;
  char *v21;
  unint64_t v24;
  _DWORD *v27;

  v15 = result;
  if (a2)
  {
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) == 0)
      {
        result = WTF::tryFastCompactMalloc((WTF *)(result + 20));
        v20 = v27;
        if (v27)
        {
          v21 = (char *)(v27 + 5);
          *v27 = 2;
          v20[1] = v15;
          *((_QWORD *)v20 + 1) = v20 + 5;
          v20[4] = 4;
          result = (uint64_t)WTF::stringTypeAdapterAccumulator<unsigned char,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(v21, a3, a4, a5, a6, a7, a8, a10, a11, a12);
        }
        goto LABEL_12;
      }
LABEL_14:
      v20 = 0;
      goto LABEL_12;
    }
LABEL_13:
    v20 = (_DWORD *)MEMORY[0x1E0CBEF70];
    *MEMORY[0x1E0CBEF70] += 2;
    goto LABEL_12;
  }
  if (!(_DWORD)result)
    goto LABEL_13;
  if (result > 0x7FFFFFEF)
    goto LABEL_14;
  result = WTF::tryFastCompactMalloc((WTF *)(2 * result + 20));
  v20 = v27;
  if (v27)
  {
    *v27 = 2;
    v20[1] = v15;
    *((_QWORD *)v20 + 1) = v20 + 5;
    v20[4] = 0;
    v27 = (_DWORD *)a3;
    WTF::StringTypeAdapter<WTF::StringImpl *,void>::writeTo<char16_t>((uint64_t *)&v27, (char *)v20 + 20);
    v24 = (unint64_t)v27;
    if (v27)
      v24 = v27[1];
    result = (uint64_t)WTF::stringTypeAdapterAccumulator<char16_t,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>((char *)v20 + 2 * v24 + 20, a4, a5, a6, a7, a8, a10, a11, a12);
  }
LABEL_12:
  *a9 = v20;
  return result;
}

void sub_195038AFC(_Unwind_Exception *exception_object, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;

  if (*(_DWORD *)v2 == 2)
    WTF::StringImpl::destroy(v2, a2);
  else
    *(_DWORD *)v2 -= 2;
  _Unwind_Resume(exception_object);
}

void WTF::Detail::CallableWrapper<WebCore::MediaSessionManagerCocoa::beginInterruption(WebCore::PlatformMediaSessionInterruptionType)::$_0,void,WebCore::PlatformMediaSession &>::call(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 75) = 0;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSessionManagerCocoa::scheduleSessionStatusUpdate(void)::$_0,void>::call(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(v1 + 320);
  if (*(_DWORD *)(v1 + 44) && (v3 = **(_QWORD **)(v1 + 32)) != 0 && (v4 = *(_QWORD *)(v3 + 8)) != 0)
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 32) + 64))(*(_QWORD *)(v4 + 32));
  else
    v5 = 0;
  v6 = *(_QWORD *)(v2 + 8);
  if (v6)
  {
    if (*(unsigned __int8 *)(v6 + 40) != v5)
    {
      *(_BYTE *)(v6 + 40) = v5;
      if (!*(_BYTE *)(v6 + 32))
      {
        v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v7 = off_1E3405DC0;
        v7[1] = v6;
        v11 = v7;
        WebCore::MainThreadDeferrableTask::scheduleTask(v6 + 24, (uint64_t *)&v11);
        v8 = (uint64_t)v11;
        v11 = 0;
        if (v8)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
    }
  }
  WebCore::MediaSessionManagerCocoa::updateNowPlayingInfo((WebCore::MediaSessionManagerCocoa *)v1);
  v9 = WTF::fastMalloc((WTF *)0x10);
  *(_QWORD *)v9 = off_1E331A348;
  v11 = (_QWORD *)v9;
  WebCore::PlatformMediaSessionManager::forEachSession(v1, &v11);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

uint64_t _ZN3WTF6Detail15CallableWrapperIZZN7WebCore24MediaSessionManagerCocoa27scheduleSessionStatusUpdateEvEN3__0clEvEUlRT_E_vJRNS2_20PlatformMediaSessionEEE4callES9_(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 160))(a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaSessionManagerCocoa::sessionWillEndPlayback(WebCore::PlatformMediaSession &,WebCore::DelayCallingUpdateNowPlaying)::$_0,void>::~CallableWrapper(_QWORD *a1, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)a1[1];
  *a1 = &off_1E331A370;
  a1[1] = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSessionManagerCocoa::sessionWillEndPlayback(WebCore::PlatformMediaSession &,WebCore::DelayCallingUpdateNowPlaying)::$_0,void>::~CallableWrapper(WTF *this, void *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v3 = (unsigned int *)*((_QWORD *)this + 1);
  *(_QWORD *)this = &off_1E331A370;
  *((_QWORD *)this + 1) = 0;
  if (v3)
  {
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      atomic_store(1u, v3);
      WTF::fastFree((WTF *)v3, a2);
    }
  }
  return WTF::fastFree(this, a2);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::MediaSessionManagerCocoa::sessionWillEndPlayback(WebCore::PlatformMediaSession &,WebCore::DelayCallingUpdateNowPlaying)::$_0,void>::call(_QWORD *result)
{
  uint64_t v1;

  v1 = result[1];
  if (v1)
  {
    result = *(_QWORD **)(v1 + 8);
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 160))(result);
  }
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::MediaSessionManagerCocoa::sessionWillEndPlayback(WebCore::PlatformMediaSession &,WebCore::DelayCallingUpdateNowPlaying)::$_1,void>::call(uint64_t a1)
{
  WebCore::MediaSessionManagerCocoa::updateNowPlayingInfo(*(WebCore::MediaSessionManagerCocoa **)(a1 + 8));
}

BOOL WTF::Detail::CallableWrapper<WebCore::MediaSessionManagerCocoa::sessionWillEndPlayback(WebCore::PlatformMediaSession &,WebCore::DelayCallingUpdateNowPlaying)::$_2,BOOL,WebCore::PlatformMediaSession const&>::call(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 48) == 2;
}

uint64_t WTF::Logger::log<WTF::Logger::LogSiteIdentifier,void const*>(uint64_t a1, unsigned int a2, WTF::Logger::LogSiteIdentifier *this)
{
  uint64_t result;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  char *v16;
  unsigned __int8 *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  WTF::Logger *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::Logger *v29;
  uint64_t v30;
  WTF::StringImpl **v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  int v35;
  WTF::Logger *v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  __int128 buf;
  int v43;
  WTF::StringImpl *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  WTF::Logger::LogSiteIdentifier::toString(this);
  result = WTF::LogArgument<void const*>::toString();
  if (!v40)
  {
    v6 = 0;
    if (v39)
      goto LABEL_3;
LABEL_72:
    v7 = 0;
    goto LABEL_4;
  }
  v6 = *((_DWORD *)v40 + 1);
  if (!v39)
    goto LABEL_72;
LABEL_3:
  v7 = *((_DWORD *)v39 + 1);
LABEL_4:
  if ((v7 | v6) < 0)
    goto LABEL_75;
  result = (v6 + v7);
  if (__OFADD__(v6, v7))
    goto LABEL_75;
  if (v40)
  {
    v8 = *((_DWORD *)v40 + 4);
    v9 = (v8 >> 2) & 1;
    if (v39 && (v8 & 4) != 0)
      goto LABEL_9;
  }
  else
  {
    if (v39)
    {
LABEL_9:
      v9 = (*((unsigned __int8 *)v39 + 16) >> 2) & 1;
      goto LABEL_10;
    }
    v9 = 1;
  }
LABEL_10:
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v9, (uint64_t)v40, (uint64_t)v39, &buf);
  v41 = (WTF::StringImpl *)buf;
  if (!(_QWORD)buf)
  {
LABEL_75:
    __break(0xC471u);
    return result;
  }
  v11 = v39;
  v39 = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v10);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = v40;
  v40 = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(NSObject **)(a1 + 32);
  v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
  if ((_DWORD)v14)
  {
    WTF::String::utf8();
    v16 = v37 ? (char *)v37 + 16 : 0;
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v16;
    _os_log_impl(&dword_1940B8000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s", (uint8_t *)&buf, 0xCu);
    v14 = (uint64_t)v37;
    v37 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 1)
        v14 = WTF::fastFree((WTF *)v14, v15);
      else
        --*(_DWORD *)v14;
    }
  }
  if (*(_BYTE *)a1 && *(unsigned __int8 *)(a1 + 16) >= a2)
  {
    v17 = (unsigned __int8 *)MEMORY[0x1E0CBF890];
    while (1)
    {
      v18 = *v17;
      if ((v18 & 1) != 0)
        break;
      v19 = __ldaxr(v17);
      if (v19 == v18)
      {
        if (!__stxr(v18 | 1, v17))
        {
          v20 = WTF::Logger::observers((WTF::Logger *)v14);
          v21 = *(unsigned int *)(v20 + 12);
          if ((_DWORD)v21)
          {
            v22 = *(uint64_t **)v20;
            v23 = *(_QWORD *)v20 + 8 * v21;
            do
            {
              v24 = *v22;
              LODWORD(buf) = 0;
              WTF::Logger::LogSiteIdentifier::toString(this);
              v43 = 0;
              WTF::LogArgument<void const*>::toString();
              v37 = 0;
              v38 = 0;
              v25 = (WTF::Logger *)WTF::fastMalloc((WTF *)0x20);
              LODWORD(v38) = 2;
              v37 = v25;
              v26 = HIDWORD(v38);
              *((_DWORD *)v25 + 4 * HIDWORD(v38)) = buf;
              v27 = *((_QWORD *)&buf + 1);
              if (*((_QWORD *)&buf + 1))
                **((_DWORD **)&buf + 1) += 2;
              *((_QWORD *)v25 + 2 * v26 + 1) = v27;
              *((_DWORD *)v25 + 4 * (v26 + 1)) = v43;
              v28 = v44;
              if (v44)
                *(_DWORD *)v44 += 2;
              *((_QWORD *)v25 + 2 * (v26 + 1) + 1) = v28;
              HIDWORD(v38) = v26 + 2;
              (*(void (**)(uint64_t, uint64_t, _QWORD, WTF::Logger **))(*(_QWORD *)v24 + 16))(v24, a1, a2, &v37);
              v29 = v37;
              if (HIDWORD(v38))
              {
                v30 = 16 * HIDWORD(v38);
                v31 = (WTF::StringImpl **)((char *)v37 + 8);
                do
                {
                  v32 = *v31;
                  *v31 = 0;
                  if (v32)
                  {
                    if (*(_DWORD *)v32 == 2)
                      WTF::StringImpl::destroy(v32, (WTF::StringImpl *)v15);
                    else
                      *(_DWORD *)v32 -= 2;
                  }
                  v31 += 2;
                  v30 -= 16;
                }
                while (v30);
                v29 = v37;
              }
              if (v29)
              {
                v37 = 0;
                LODWORD(v38) = 0;
                WTF::fastFree(v29, v15);
              }
              v33 = v44;
              v44 = 0;
              if (v33)
              {
                if (*(_DWORD *)v33 == 2)
                  WTF::StringImpl::destroy(v33, (WTF::StringImpl *)v15);
                else
                  *(_DWORD *)v33 -= 2;
              }
              v34 = (WTF::StringImpl *)*((_QWORD *)&buf + 1);
              *((_QWORD *)&buf + 1) = 0;
              if (v34)
              {
                if (*(_DWORD *)v34 == 2)
                  WTF::StringImpl::destroy(v34, (WTF::StringImpl *)v15);
                else
                  *(_DWORD *)v34 -= 2;
              }
              ++v22;
            }
            while (v22 != (uint64_t *)v23);
          }
          v35 = __ldxr(v17);
          if (v35 == 1)
          {
            if (!__stlxr(0, v17))
              break;
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
          break;
        }
      }
      else
      {
        __clrex();
      }
    }
  }
  result = (uint64_t)v41;
  v41 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return WTF::StringImpl::destroy((WTF::StringImpl *)result, (WTF::StringImpl *)v15);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

void sub_195039158(_Unwind_Exception *exception_object, WTF::StringImpl *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, WTF *a10, int a11, int a12, WTF::StringImpl *a13, uint64_t a14, WTF::StringImpl *a15, uint64_t a16, WTF::StringImpl *a17, uint64_t a18, WTF::StringImpl *a19)
{
  unsigned __int8 *v19;
  int v21;

  v21 = __ldxr(v19);
  if (v21 == 1)
  {
    if (!__stlxr(0, v19))
    {
LABEL_6:
      if (a15)
      {
        if (*(_DWORD *)a15 == 2)
          WTF::StringImpl::destroy(a15, a2);
        else
          *(_DWORD *)a15 -= 2;
      }
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow(MEMORY[0x1E0CBF890]);
  goto LABEL_6;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSessionManagerCocoa::nowPlayingEligibleSession(void)::$_0,BOOL,WebCore::PlatformMediaSession const&>::call(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 216))(*(_QWORD *)(a2 + 32));
}

uint64_t WTF::Detail::CallableWrapper<WebCore::MediaSessionManagerCocoa::updateActiveNowPlayingSession(WTF::CheckedPtr<WebCore::PlatformMediaSession,WTF::RawPtrTraits<WebCore::PlatformMediaSession>>)::$_0,void,WebCore::PlatformMediaSession&>::call(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = **(_QWORD **)(result + 8) == a2;
  if (*(unsigned __int8 *)(a2 + 77) != v2)
  {
    *(_BYTE *)(a2 + 77) = v2;
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 240))(*(_QWORD *)(a2 + 32));
  }
  return result;
}

uint64_t WTF::RefCounted<WebCore::AuthorizationChecker>::deref(uint64_t result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  id *v4;
  void *v5;
  id v6;

  v2 = result;
  if (*(_DWORD *)result == 1)
  {
    v3 = *(_QWORD *)(result + 16);
    *(_QWORD *)(v2 + 16) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *(id **)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    if (v4)
    {
      objc_msgSend(*v4, "stop");
      v6 = *v4;
      *v4 = 0;
      if (v6)
        CFRelease(v6);
      WTF::fastFree((WTF *)v4, v5);
    }
    return WTF::fastFree((WTF *)(v2 - 8), a2);
  }
  else
  {
    --*(_DWORD *)result;
  }
  return result;
}

void sub_195039390(_Unwind_Exception *exception_object)
{
  const void **v1;
  const void *v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    CFRelease(v3);
  _Unwind_Resume(exception_object);
}

_QWORD *WTF::Detail::CallableWrapper<WebCore::CoreLocationGeolocationProvider::requestAuthorization(WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(_QWORD *a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E331A438;
  v3 = a1[2];
  a1[2] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[1];
  a1[1] = 0;
  if (v4)
    WTF::RefCounted<WebCore::AuthorizationChecker>::deref(v4 + 8, a2);
  return a1;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CoreLocationGeolocationProvider::requestAuthorization(WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::~CallableWrapper(WTF *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E331A438;
  v3 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    WTF::RefCounted<WebCore::AuthorizationChecker>::deref(v4 + 8, a2);
  return WTF::fastFree(this, a2);
}

uint64_t WTF::Detail::CallableWrapper<WebCore::CoreLocationGeolocationProvider::requestAuthorization(WebCore::RegistrableDomain const&,WTF::CompletionHandler<void ()(BOOL)> &&)::$_0,void,BOOL>::call(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
}

void sub_195039498(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

WTF *WebCore::JSWGSLLanguageFeatures::destroy(WebCore::JSWGSLLanguageFeatures *this, JSC::JSCell *a2)
{
  WTF *result;

  result = (WTF *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, a2);
    else
      --*(_DWORD *)result;
  }
  return result;
}

uint64_t WebCore::JSWGSLLanguageFeatures::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWGSLLanguageFeaturesPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWGSLLanguageFeaturesPrototype::create(WebCore::JSWGSLLanguageFeaturesPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t Direct;
  unint64_t v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  JSC::Structure *v16;
  int v17;
  unint64_t v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  uint64_t v22;
  int *v23;
  JSC::Structure **v24;
  int *v25;
  int v26;
  int v27;
  JSC::Structure *v28;
  int v29;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v19 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v19);
    *((_QWORD *)this + 4865) = SlowCase + (int)v19;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<7u>(this, (uint64_t)&WebCore::JSWGSLLanguageFeatures::s_info, &WebCore::JSWGSLLanguageFeaturesPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = v6[381];
  v10 = *(_QWORD *)(v9 + 2712);
  Direct = JSC::JSObject::getDirect(SlowCase, this, *(_QWORD *)(*(_QWORD *)(v9 + 48) + 3024));
  v20 = 0;
  v21 = SlowCase;
  v22 = 0x1000000FFFFFFFFLL;
  v23 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)SlowCase, this, v10, Direct, 4, (uint64_t)&v20);
  v12 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v14 = JSC::JSString::create((uint64_t)this, &v20);
  v15 = v20;
  v20 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v13);
    else
      *(_DWORD *)v15 -= 2;
  }
  v16 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v29 = *(_DWORD *)SlowCase;
  v28 = v16;
  v17 = JSC::Structure::outOfLineCapacity(v16);
  v26 = 0;
  v27 = v17;
  v20 = (WTF::StringImpl *)&v27;
  v21 = SlowCase;
  v22 = (uint64_t)this;
  v23 = &v29;
  v24 = &v28;
  v25 = &v26;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v16, this, v12, 6, (uint64_t)&v20);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v26, v14);
  *((_DWORD *)v16 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWGSLLanguageFeatures>,(WebCore::DOMConstructorID)46>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 368);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSWGSLLanguageFeatures>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSWGSLLanguageFeatures::s_info
         + ~((_QWORD)&WebCore::JSWGSLLanguageFeatures::s_info << 32)) ^ (((unint64_t)&WebCore::JSWGSLLanguageFeatures::s_info
                                                                        + ~((_QWORD)&WebCore::JSWGSLLanguageFeatures::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSWGSLLanguageFeatures::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSWGSLLanguageFeatures::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSWGSLLanguageFeaturesPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWGSLLanguageFeaturesPrototype::create((WebCore::JSWGSLLanguageFeaturesPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSWGSLLanguageFeatures::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWGSLLanguageFeatures::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 368) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWGSLLanguageFeaturesConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWGSLLanguageFeaturesPrototype::s_info != (char **)(16
                                                                    * *(unsigned int *)(16
                                                                                      * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                      + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWGSLLanguageFeatures>,(WebCore::DOMConstructorID)46>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsWGSLLanguageFeatures_size(WebCore *this, JSC::JSGlobalObject *a2, JSC::JSObject *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  char BackingSet;
  WTF::StringImpl *v11;
  JSC::Structure *v12;
  _DWORD *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v17[2];

  if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeGetterTypeError();
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSWGSLLanguageFeatures::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSWGSLLanguageFeatures::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeGetterTypeError();
  BackingSet = WebCore::getBackingSet((unint64_t)this, a2, a3);
  v12 = v11;
  if (BackingSet)
  {
    v17[0] = this;
    v17[1] = v11;
    WebCore::WGSLLanguageFeatures::initializeSetLike(*((_QWORD *)a2 + 3), v17);
  }
  v13 = (_DWORD *)MEMORY[0x1E0CBEBC8];
  *MEMORY[0x1E0CBEBC8] += 2;
  v15 = JSC::JSObject::get(v12, this, (unint64_t)v13);
  if (*v13 == 2)
    WTF::StringImpl::destroy(MEMORY[0x1E0CBEBC8], v14);
  else
    *v13 -= 2;
  return v15;
}

uint64_t WebCore::JSWGSLLanguageFeaturesOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSWGSLLanguageFeaturesOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
    return (_QWORD *)WTF::fastFree(v3, a2);
  --*(_DWORD *)v3;
  return result;
}

unint64_t WebCore::wrap<WebCore::WGSLLanguageFeatures>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWGSLLanguageFeatures::s_info
         + ~((_QWORD)&WebCore::JSWGSLLanguageFeatures::s_info << 32)) ^ (((unint64_t)&WebCore::JSWGSLLanguageFeatures::s_info
                                                                        + ~((_QWORD)&WebCore::JSWGSLLanguageFeatures::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWGSLLanguageFeatures::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWGSLLanguageFeatures::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSWGSLLanguageFeaturesPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWGSLLanguageFeaturesPrototype::create((WebCore::JSWGSLLanguageFeaturesPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSWGSLLanguageFeatures::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWGSLLanguageFeatures::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 368);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 368))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 368);
    *(_QWORD *)(v36 + 368) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 368);
  *(_QWORD *)(v32 + 368) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336EE0 & 1) == 0)
  {
    qword_1EE336ED8 = (uint64_t)&off_1E3320420;
    byte_1EE336EE0 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336ED8;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

uint64_t WebCore::JSWakeLock::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWakeLock>,(WebCore::DOMConstructorID)199>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1592);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSWakeLock>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSWakeLock::s_info + ~((_QWORD)&WebCore::JSWakeLock::s_info << 32)) ^ (((unint64_t)&WebCore::JSWakeLock::s_info + ~((_QWORD)&WebCore::JSWakeLock::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSWakeLock::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSWakeLock::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSWakeLockPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWakeLockPrototype::create((WebCore::JSWakeLockPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSWakeLock::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWakeLock::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1592) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWakeLockConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWakeLockPrototype::s_info != (char **)(16
                                                        * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWakeLock>,(WebCore::DOMConstructorID)199>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSWakeLockOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

uint64_t WebCore::JSWakeLockSentinel::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24) - 32);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWakeLockSentinelPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWakeLockSentinelPrototype::create(WebCore::JSWakeLockSentinelPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>(this, (uint64_t)&WebCore::JSWakeLockSentinel::s_info, &WebCore::JSWakeLockSentinelPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWakeLockSentinel>,(WebCore::DOMConstructorID)200>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1600);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v37) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v35 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v35);
    v5[2] = SlowCase + (int)v35;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v37, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSWakeLockSentinel>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v36 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v36);
    v10[2848] = v2 + (int)v36;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v37);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v37);
  v14 = v37;
  v37 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v37);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSWakeLockSentinel::s_info + ~((_QWORD)&WebCore::JSWakeLockSentinel::s_info << 32)) ^ (((unint64_t)&WebCore::JSWakeLockSentinel::s_info + ~((_QWORD)&WebCore::JSWakeLockSentinel::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSWakeLockSentinel::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSWakeLockSentinel::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSWakeLockSentinelPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v31 = (JSC::JSCell *)WebCore::JSWakeLockSentinelPrototype::create((WebCore::JSWakeLockSentinelPrototype *)a1, Structure, v29, v30);
  v32 = WebCore::JSWakeLockSentinel::createStructure((uint64_t *)a1, a2, v31);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSWakeLockSentinel::s_info);
LABEL_22:
  v33 = *(_QWORD *)(v26 + 48);
  v37 = 0;
  v38 = v2;
  v39 = -1;
  v40 = 0x1000000;
  v41 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v37);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 1600) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWakeLockSentinelConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWakeLockSentinelPrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWakeLockSentinel>,(WebCore::DOMConstructorID)200>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsWakeLockSentinel_released(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(*(_QWORD *)(a2 + 24) + 25))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsWakeLockSentinel_type(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*((_QWORD *)a2 + 3) + 24);
  if ((_MergedGlobals_1290[0] & 1) == 0)
  {
    WebCore::convertEnumerationToString(WebCore::WakeLockType)::$_0::operator() const(void)::impl += 2;
    qword_1EE336ED0 = (uint64_t)&WebCore::convertEnumerationToString(WebCore::WakeLockType)::$_0::operator() const(void)::impl;
    _MergedGlobals_1290[0] = 1;
  }
  v5 = *(_QWORD *)&_MergedGlobals_1290[8 * v4 + 16];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

uint64_t WebCore::jsWakeLockSentinel_onrelease(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v12;
  bmalloc::api *v13;
  void *v14;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 - 2);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v10 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1648), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 - 2) == 1)
  {
    WebCore::EventTarget::~EventTarget(v5, v9);
    WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore *)((char *)v5 - 32), v12);
    bmalloc::api::isoDeallocate(v13, v14);
  }
  else
  {
    --*((_DWORD *)v5 - 2);
  }
  return v10;
}

BOOL WebCore::setJSWakeLockSentinel_onrelease(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v17;
  bmalloc::api *v18;
  void *v19;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSWakeLockSentinel::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSWakeLockSentinel::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 - 2);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1648), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 - 2) == 1)
      {
        WebCore::EventTarget::~EventTarget(v11, v15);
        WebCore::ActiveDOMObject::~ActiveDOMObject((WebCore::EventTarget *)((char *)v11 - 32), v17);
        bmalloc::api::isoDeallocate(v18, v19);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 - 2);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::JSWakeLockSentinelOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v6 = *(_QWORD *)(v5 - 24);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (*(_QWORD *)(v5 - 16)
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 32) + 64))(v5 - 32), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

_QWORD *WebCore::JSWakeLockSentinelOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  _QWORD *result;
  WebCore::ActiveDOMObject *v4;
  int v5;
  uint64_t v6;
  void *v7;
  bmalloc::api *v8;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  WebCore::ActiveDOMObject *v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  _QWORD *v30;

  result = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v4 = (WebCore::ActiveDOMObject *)(result - 4);
  v5 = *((_DWORD *)result - 2);
  *((_DWORD *)result - 2) = v5 + 1;
  if (*(_DWORD *)(a3 + 48))
  {
    v12 = *(_QWORD *)(a3 + 32);
    v10 = (uint64_t *)(a3 + 32);
    v11 = v12;
    if (v12)
    {
      v13 = *(_DWORD *)(v11 - 8);
      v14 = ((unint64_t)v4 + ~((_QWORD)v4 << 32)) ^ (((unint64_t)v4 + ~((_QWORD)v4 << 32)) >> 22);
      v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v17 = v13 & ((v16 >> 31) ^ v16);
      v18 = *(WebCore::ActiveDOMObject **)(v11 + 16 * v17);
      if (v18 != v4)
      {
        v19 = 1;
        while (v18)
        {
          v17 = ((_DWORD)v17 + v19) & v13;
          v18 = *(WebCore::ActiveDOMObject **)(v11 + 16 * v17);
          ++v19;
          if (v18 == v4)
            goto LABEL_12;
        }
        v17 = *(unsigned int *)(v11 - 4);
      }
LABEL_12:
      if (v17 != *(_DWORD *)(v11 - 4))
      {
        v20 = (_QWORD *)(v11 + 16 * v17);
        *v20 = -1;
        v23 = v20[1];
        v22 = v20 + 1;
        v21 = v23;
        if (v23)
        {
          *(_QWORD *)(v21 + 8) = 3;
          *v22 = 0;
        }
        ++*(_DWORD *)(*v10 - 16);
        v24 = *v10;
        if (*v10)
          v25 = *(_DWORD *)(v24 - 12) - 1;
        else
          v25 = -1;
        *(_DWORD *)(v24 - 12) = v25;
        v26 = *v10;
        if (*v10)
        {
          v27 = 6 * *(_DWORD *)(v26 - 12);
          v28 = *(_DWORD *)(v26 - 4);
          if (v27 < v28 && v28 >= 9)
          {
            v30 = result;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v10, v28 >> 1, 0);
            result = v30;
          }
        }
      }
    }
    v5 = *((_DWORD *)result - 2) - 1;
  }
  else
  {
    v6 = result[1];
    if (v6)
    {
      *(_QWORD *)(v6 + 8) = 3;
      result[1] = 0;
    }
  }
  if (v5)
  {
    *((_DWORD *)result - 2) = v5;
  }
  else
  {
    WebCore::EventTarget::~EventTarget((WebCore::EventTarget *)result, a2);
    WebCore::ActiveDOMObject::~ActiveDOMObject(v4, v7);
    return (_QWORD *)bmalloc::api::isoDeallocate(v8, v9);
  }
  return result;
}

unint64_t WebCore::wrap<WebCore::WakeLockSentinel>(int a1, JSC::VM *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  WebCore::JSEventTarget *v17;
  JSC::JSCell *v18;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v20;
  JSC::Structure *v21;
  JSC::JSCell *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  WTF *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  WTF *v39;
  void *v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *Allocator;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  WTF *v62;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v51 = *(_QWORD *)(v5 + 32);
    if (!v51)
      goto LABEL_5;
    v52 = *(_DWORD *)(v51 - 8);
    v53 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v54 = 9 * ((v53 + ~(v53 << 13)) ^ ((v53 + ~(v53 << 13)) >> 8));
    v55 = (v54 ^ (v54 >> 15)) + ~((v54 ^ (v54 >> 15)) << 27);
    v56 = v52 & ((v55 >> 31) ^ v55);
    v57 = *(_QWORD *)(v51 + 16 * v56);
    if (v57 != a3)
    {
      v58 = 1;
      while (v57)
      {
        v56 = ((_DWORD)v56 + v58) & v52;
        v57 = *(_QWORD *)(v51 + 16 * v56);
        ++v58;
        if (v57 == a3)
          goto LABEL_66;
      }
      goto LABEL_5;
    }
LABEL_66:
    v6 = *(_QWORD *)(v51 + 16 * v56 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 40);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  ++*(_DWORD *)(a3 + 24);
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 != &off_1E33668C8)
  {
    __break(0xC471u);
    JUMPOUT(0x19503BD90);
  }
  v8 = *((_QWORD *)a2 + 412);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSWakeLockSentinel::s_info + ~((_QWORD)&WebCore::JSWakeLockSentinel::s_info << 32)) ^ (((unint64_t)&WebCore::JSWakeLockSentinel::s_info + ~((_QWORD)&WebCore::JSWakeLockSentinel::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSWakeLockSentinel::s_info)
    {
LABEL_11:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_13;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSWakeLockSentinel::s_info)
          goto LABEL_11;
      }
    }
  }
  v17 = (WebCore::JSEventTarget *)*((_QWORD *)a2 + 7);
  v18 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v17, a2, (WebCore::JSDOMGlobalObject *)a3);
  Structure = WebCore::JSWakeLockSentinelPrototype::createStructure((uint64_t *)v17, (uint64_t)a2, v18);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v22 = (JSC::JSCell *)WebCore::JSWakeLockSentinelPrototype::create(v17, Structure, v20, v21);
  v23 = WebCore::JSWakeLockSentinel::createStructure((uint64_t *)v17, (uint64_t)a2, v22);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v23, (uint64_t)&WebCore::JSWakeLockSentinel::s_info);
LABEL_13:
  v24 = *((_QWORD *)a2 + 7);
  v25 = *(_QWORD *)(v24 + 41456);
  v26 = *(_QWORD *)(v25 + 23536);
  v27 = *(_QWORD **)(v26 + 1624);
  if (v27)
    goto LABEL_36;
  v28 = *(_QWORD *)(v25 + 22648);
  if (__ldaxr((unsigned __int8 *)v28))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v28))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v28);
LABEL_18:
  v30 = *(_QWORD *)(v28 + 2824);
  v60 = *(_QWORD *)(v30 + 1624);
  if (!v60)
  {
    v31 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v62, "IsoSpace T");
    v61 = 0;
    MEMORY[0x19AEA3204](v31, &v62, v24 + 192, v24 + 1872, 32, 8, &v61);
    v33 = (uint64_t)v61;
    v61 = 0;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = v62;
    v62 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
        WTF::fastFree(v34, v32);
      else
        --*(_DWORD *)v34;
    }
    v60 = v31;
    v35 = *(_QWORD *)(v30 + 1624);
    *(_QWORD *)(v30 + 1624) = v31;
    if (v35)
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = *(unsigned int *)(v28 + 2844);
    if ((_DWORD)v36 == *(_DWORD *)(v28 + 2840))
    {
      v37 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v28 + 2832, v36 + 1, (unint64_t)&v60);
      v36 = *(unsigned int *)(v28 + 2844);
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = *v37;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v28 + 2832) + 8 * v36) = v31;
    }
    *(_DWORD *)(v28 + 2844) = v36 + 1;
  }
  v27 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v38 = *(_QWORD *)(v26 + 1624);
  *(_QWORD *)(v26 + 1624) = v27;
  if (v38)
  {
    v39 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v39, v40);
  }
  v41 = __ldxr((unsigned __int8 *)v28);
  if (v41 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v28))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v28);
LABEL_36:
  SlowCase = v27[3];
  if (SlowCase < v27[4])
  {
LABEL_37:
    v27[3] = SlowCase + 32;
    goto LABEL_38;
  }
  SlowCase = v27[5];
  if ((SlowCase & 1) == 0)
  {
    v59 = *(_QWORD *)(SlowCase + 8) ^ v27[6];
    v27[4] = SlowCase + HIDWORD(v59);
    v27[5] = SlowCase + (int)v59;
    goto LABEL_37;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3 + 32;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v42 = *((_QWORD *)a2 + 415);
  if ((byte_1EE336F00 & 1) == 0)
  {
    qword_1EE336EF8 = (uint64_t)&off_1E3320480;
    byte_1EE336F00 = 1;
  }
  if (!*(_DWORD *)(v42 + 48))
  {
    if ((SlowCase & 8) != 0)
      v43 = (SlowCase - 112) | 1;
    else
      v43 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v43 & 1) != 0)
      v44 = v43 + 47;
    else
      v44 = *(_QWORD *)v43 + 32;
    Allocator = *(_QWORD **)(v44 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v44 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE336EF8;
    Allocator[2] = v42;
    v46 = *(_QWORD *)(a3 + 40);
    *(_QWORD *)(a3 + 40) = Allocator;
    if (!v46)
      return SlowCase;
LABEL_60:
    *(_QWORD *)(v46 + 8) = 3;
    return SlowCase;
  }
  v62 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  v50 = *(_QWORD **)(v49 + 16);
  if (!v50)
    v50 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *v50;
  *v50 = SlowCase;
  v50[1] = &qword_1EE336EF8;
  v50[2] = v42;
  v61 = v50;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v42 + 32), (uint64_t *)&v62, (uint64_t *)&v61);
  v46 = (uint64_t)v61;
  if (v61)
    goto LABEL_60;
  return SlowCase;
}

uint64_t WebCore::JSDOMConstructor<WebCore::JSWaveShaperNode>::construct(WebCore::JSDOMGlobalObject *a1, uint64_t a2)
{
  WTF::StringImpl *v2;
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v7;
  JSC::JSGlobalObject *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  JSCell *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  JSC::VM *v16;
  uint64_t v17;
  int v18;
  char **v19;
  BOOL v20;
  uint64_t v22;
  JSC::JSCell *v23;
  uint64_t Object;
  JSC::Structure *v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  char v28;
  unsigned __int8 v29;
  uint64_t v30;
  WTF *v31;
  int v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  int v39;
  WTF::StringImpl *v40;
  void *v41;
  WebCore::JSDOMGlobalObject *v42;
  WTF *v43;
  JSC::VM *v44;
  JSC::VM *v45;
  WTF::StringImpl *v46;
  WebCore::AudioNode *v47;
  JSC::JSCell *v48;
  JSC::JSGlobalObject *v49;
  JSC::JSObject *v50;
  JSC::JSGlobalObject *v51;
  JSC::VM *v52;
  JSC::JSObject *v53;
  JSC::Structure *v54;
  JSC::VM *FunctionRealm;
  uint64_t v56;
  unsigned int v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char **v62;
  int v63;
  JSC::JSCell *v64;
  unint64_t Structure;
  JSC::Structure *v66;
  JSC::JSCell *v67;
  uint64_t v68;
  unint64_t SubclassStructure;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72;
  unint64_t v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  WTF::StringImpl *v76;
  unint64_t v77;
  WTF::StringImpl *v78;
  WTF::StringImpl *v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  WTF::StringImpl *v82;
  unint64_t v83;
  WTF::StringImpl *v84;
  uint64_t v85;
  JSValue v86;
  WTF::StringImpl *v87;
  WTF::StringImpl *v88;
  JSValue v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  char v94;
  char v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  WTF::StringImpl *v99[2];
  uint64_t v100;
  WTF *v101;
  WTF::StringImpl *v102;
  char v103;
  int v104;
  int v105[2];
  WTF::StringImpl *v106;
  int v107;
  JSC::VM *v108;
  __int16 v109;
  char v110;
  __int16 v111;
  char v112;
  __int16 v113;
  char v114;
  char v115;
  JSC::VM *v116;
  __int128 v117;
  uint64_t v118;
  WTF *v119;
  WTF::StringImpl *v120;
  char v121;
  int v122;
  int v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v108 = v5;
  v6 = *(_QWORD *)(a2 + 24);
  v7 = WebCore::JSDOMGlobalObject::scriptExecutionContext(a1);
  if (v7 && *(_BYTE *)(v7 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19503C6B4);
  }
  v11 = v7 - 192;
  if (!v7)
    v11 = 0;
  if ((*(_DWORD *)(*(_QWORD *)(v11 + 680) + 720) & 0x20) == 0)
  {
    JSC::throwTypeError();
    return 2;
  }
  v13 = *(int *)(a2 + 32);
  if ((_DWORD)v13 == 1)
  {
    v86.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, v8);
    return JSC::VM::throwException(v5, a1, v86);
  }
  v14 = 2;
  v15 = *(_QWORD *)(a2 + 48);
  v16 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v116 = v16;
  if ((v15 & 0xFFFE000000000002) != 0)
    goto LABEL_19;
  v17 = *(unsigned int *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C);
  v18 = *(_DWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x4C) != 0;
  v19 = (char **)(16 * v17);
  if ((_DWORD)v17)
    v20 = v19 == &WebCore::JSBaseAudioContext::s_info;
  else
    v20 = 1;
  if (!v20)
  {
    do
    {
      v19 = (char **)v19[2];
      v18 = v19 != 0;
    }
    while (v19 != &WebCore::JSBaseAudioContext::s_info && v19 != 0);
  }
  if ((v18 & 1) == 0)
  {
LABEL_19:
    WebCore::throwArgumentTypeError((uint64_t)a1, (uint64_t)&v116, 0, "context", 8, "WaveShaperNode", 15, v9, 0, 0, "BaseAudioContext", 17);
    return 0;
  }
  v22 = *(_QWORD *)(v15 + 24);
  v98 = v6;
  if ((unint64_t)(v13 - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    *(_QWORD *)v105 = v16;
    goto LABEL_31;
  }
  v23 = *(JSC::JSCell **)(a2 + 56);
  *(_QWORD *)v105 = v16;
  if (((unint64_t)v23 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_31:
    LODWORD(v30) = 0;
    v31 = 0;
    v32 = 0;
    LOBYTE(v33) = 0;
    v34 = 0;
    LOBYTE(v35) = 0;
    v36 = 0;
    v29 = 0;
    v37 = 0;
    goto LABEL_32;
  }
  v97 = v22;
  if (((unint64_t)v23 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v23)) == 0)
  {
    JSC::throwTypeError();
    v12 = 0;
    v39 = 1;
    v123 = 1;
LABEL_66:
    ((void (*)(WTF::StringImpl **, __int128 *))off_1E3320D40[v39])(v99, &v117);
    return (uint64_t)v12;
  }
  v25 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v27 = JSC::JSObject::get(v25, a1, (unint64_t)v99[0]);
  if (v99[0])
  {
    if (*(_DWORD *)v99[0] == 2)
      WTF::StringImpl::destroy(v99[0], v26);
    else
      *(_DWORD *)v99[0] -= 2;
  }
  if (*((_DWORD *)v16 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v16))
    goto LABEL_146;
  if (v27 == 10)
  {
    v28 = 0;
    v29 = 0;
  }
  else
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, v27, v99);
    if (HIDWORD(v99[0]))
      goto LABEL_146;
    v29 = v99[0];
    v93 = LODWORD(v99[0]) >> 8;
    v28 = 1;
  }
  WTF::AtomStringImpl::addLiteral();
  v71 = v99[0];
  v73 = JSC::JSObject::get(v25, a1, (unint64_t)v99[0]);
  if (v71)
  {
    if (*(_DWORD *)v71 == 2)
      WTF::StringImpl::destroy(v71, v72);
    else
      *(_DWORD *)v71 -= 2;
  }
  if (*((_DWORD *)v16 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v16))
    goto LABEL_146;
  if (v73 == 10)
  {
    v96 = 0;
    LOBYTE(v35) = 0;
    goto LABEL_79;
  }
  v99[0] = *((WTF::StringImpl **)a1 + 7);
  v74 = v99[0];
  v35 = WebCore::parseEnumeration<WebCore::ChannelCountMode>(a1, v73);
  if (*((_DWORD *)v74 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v74) & 1) != 0)
  {
LABEL_146:
    v123 = 1;
LABEL_153:
    v12 = 0;
    v39 = 1;
    goto LABEL_66;
  }
  if ((v35 & 0xFF00000000) == 0)
  {
    JSC::throwTypeError();
    goto LABEL_146;
  }
  v92 = v35 >> 8;
  v96 = 1;
LABEL_79:
  WTF::AtomStringImpl::addLiteral();
  v75 = v99[0];
  v77 = JSC::JSObject::get(v25, a1, (unint64_t)v99[0]);
  if (v75)
  {
    if (*(_DWORD *)v75 == 2)
      WTF::StringImpl::destroy(v75, v76);
    else
      *(_DWORD *)v75 -= 2;
  }
  if (*((_DWORD *)v16 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v16))
    goto LABEL_150;
  v95 = v28;
  if (v77 != 10)
  {
    v99[0] = *((WTF::StringImpl **)a1 + 7);
    v78 = v99[0];
    v33 = WebCore::parseEnumeration<WebCore::ChannelInterpretation>(a1, v77);
    if (!*((_DWORD *)v78 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v78) & 1) == 0)
    {
      if ((v33 & 0xFF00000000) != 0)
      {
        v91 = v33 >> 8;
        v94 = 1;
        goto LABEL_88;
      }
      JSC::throwTypeError();
    }
LABEL_150:
    v123 = 1;
    goto LABEL_153;
  }
  v94 = 0;
  LOBYTE(v33) = 0;
LABEL_88:
  WTF::AtomStringImpl::addLiteral();
  v79 = v99[0];
  v81 = JSC::JSObject::get(v25, a1, (unint64_t)v99[0]);
  if (v79)
  {
    if (*(_DWORD *)v79 == 2)
      WTF::StringImpl::destroy(v79, v80);
    else
      *(_DWORD *)v79 -= 2;
  }
  if (*((_DWORD *)v16 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v16))
    goto LABEL_150;
  if (v81 == 10)
  {
    v32 = 0;
    v31 = 0;
  }
  else
  {
    WebCore::Detail::NumericSequenceConverterImpl<WebCore::IDLSequence<WebCore::IDLFloat>>::convert(v81, a1, (uint64_t)v99);
    if ((_DWORD)v100)
    {
      v123 = 1;
      if ((_DWORD)v100 != -1)
        ((void (*)(char *, WTF::StringImpl **))off_1E3320DC8[v100])(&v115, v99);
      goto LABEL_153;
    }
    v31 = v99[0];
    v2 = v99[1];
    v32 = 1;
  }
  WTF::AtomStringImpl::addLiteral();
  v82 = v99[0];
  v83 = JSC::JSObject::get(v25, a1, (unint64_t)v99[0]);
  if (v82)
  {
    if (*(_DWORD *)v82 == 2)
      WTF::StringImpl::destroy(v82, v8);
    else
      *(_DWORD *)v82 -= 2;
  }
  if (*((_DWORD *)v16 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) != 0)
    goto LABEL_155;
  if (v83 != 10)
  {
    v99[0] = *((WTF::StringImpl **)a1 + 7);
    v84 = v99[0];
    v30 = WebCore::parseEnumeration<WebCore::OverSampleType>(a1, v83);
    if (!*((_DWORD *)v84 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v84) & 1) == 0)
    {
      v22 = v97;
      v37 = v95;
      v36 = v96;
      v14 = v92;
      v18 = v93;
      v34 = v94;
      v10 = v91;
      if ((v30 & 0xFF00000000) != 0)
        goto LABEL_32;
      JSC::throwTypeError();
    }
LABEL_155:
    v39 = 1;
    v22 = v97;
    v38 = v98;
    goto LABEL_35;
  }
  LODWORD(v30) = 0;
  v22 = v97;
  v37 = v95;
  v36 = v96;
  v14 = v92;
  v18 = v93;
  v34 = v94;
  v10 = v91;
LABEL_32:
  LODWORD(v117) = v29 | (v18 << 8);
  BYTE4(v117) = v37;
  *(_WORD *)((char *)&v117 + 5) = v113;
  BYTE7(v117) = v114;
  DWORD2(v117) = v35 | (v14 << 8);
  BYTE12(v117) = v36;
  *(_WORD *)((char *)&v117 + 13) = v111;
  HIBYTE(v117) = v112;
  LODWORD(v118) = v33 | (v10 << 8);
  BYTE4(v118) = v34;
  HIBYTE(v118) = v110;
  *(_WORD *)((char *)&v118 + 5) = v109;
  LOBYTE(v119) = 0;
  v121 = 0;
  if (v32)
  {
    v119 = v31;
    v120 = v2;
    v121 = 1;
    v31 = 0;
  }
  v38 = v98;
  v39 = 0;
  v122 = v30;
LABEL_35:
  v123 = v39;
  if (v32 && v31)
  {
    v85 = v22;
    WTF::fastFree(v31, v8);
    v22 = v85;
    v39 = v123;
  }
  if (v39)
  {
    v12 = 0;
    if (v39 == -1)
      return (uint64_t)v12;
    goto LABEL_66;
  }
  *(_OWORD *)v99 = v117;
  v100 = v118;
  LOBYTE(v101) = 0;
  v103 = 0;
  if (v121)
  {
    v101 = v119;
    v40 = v120;
    v119 = 0;
    v120 = 0;
    v102 = v40;
    v103 = 1;
  }
  v104 = v122;
  WebCore::WaveShaperNode::create((unsigned int *)(v22 - 32), (uint64_t)v99, (uint64_t)v105);
  if (v103)
  {
    v43 = v101;
    if (v101)
    {
      v101 = 0;
      LODWORD(v102) = 0;
      WTF::fastFree(v43, v41);
    }
  }
  v44 = v108;
  if (*((_DWORD *)v108 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v108) & 1) != 0)
    goto LABEL_126;
  if (!v107)
  {
    v45 = *(JSC::VM **)(v38 + 40);
    v46 = *(WTF::StringImpl **)v105;
    *(_QWORD *)v105 = 0;
    v99[0] = v46;
    if (*(uint64_t (***)(WebCore::AudioNode *__hidden))v46 != off_1E336BD78)
    {
      __break(0xC471u);
      JUMPOUT(0x19503C798);
    }
    v12 = (JSCell *)WebCore::createWrapper<WebCore::WaveShaperNode,WebCore::WaveShaperNode>(v45, (uint64_t *)v99, v42);
    v47 = v99[0];
    v99[0] = 0;
    if (v47)
      WebCore::AudioNode::deref(v47);
    goto LABEL_49;
  }
  if (v107 == 1)
  {
    v87 = (WTF::StringImpl *)LOBYTE(v105[0]);
    LOBYTE(v99[0]) = v105[0];
    v88 = v106;
    v106 = 0;
    v99[1] = v88;
    if (!*((_QWORD *)v44 + 2))
    {
      v89.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)LOBYTE(v105[0]), (JSC::JSGlobalObject *)&v99[1]);
      JSC::VM::throwException(v44, a1, v89);
      v88 = v99[1];
    }
    v99[1] = 0;
    if (v88)
    {
      if (*(_DWORD *)v88 == 2)
        WTF::StringImpl::destroy(v88, v87);
      else
        *(_DWORD *)v88 -= 2;
    }
    v12 = 0;
LABEL_49:
    if (*((_DWORD *)v44 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v44) & 1) != 0)
    {
LABEL_126:
      v12 = 0;
LABEL_64:
      if (v107 != -1)
        ((void (*)(WTF::StringImpl **, int *))off_1E3320D30[v107])(v99, v105);
      goto LABEL_66;
    }
    v48 = *(JSC::JSCell **)(a2 + 40);
    if (((unint64_t)v48 & 0xFFFE000000000002) != 0
      || (v49 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v48)) == 0
      || (v51 = v49, v49 == *(JSC::JSGlobalObject **)(a2 + 24))
      || (v52 = (JSC::VM *)*((_QWORD *)a1 + 7),
          FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, v49, v50),
          *((_DWORD *)v52 + 20))
      && (JSC::VM::hasExceptionsAfterHandlingTraps(v52) & 1) != 0)
    {
LABEL_63:
      if (!*((_DWORD *)v44 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v44) & 1) == 0)
        goto LABEL_64;
      goto LABEL_126;
    }
    v56 = *((_QWORD *)FunctionRealm + 412);
    if (v56)
    {
      v57 = *(_DWORD *)(v56 - 8);
      v58 = ((unint64_t)&WebCore::JSWaveShaperNode::s_info + ~((_QWORD)&WebCore::JSWaveShaperNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSWaveShaperNode::s_info + ~((_QWORD)&WebCore::JSWaveShaperNode::s_info << 32)) >> 22);
      v59 = 9 * ((v58 + ~(v58 << 13)) ^ ((v58 + ~(v58 << 13)) >> 8));
      v60 = (v59 ^ (v59 >> 15)) + ~((v59 ^ (v59 >> 15)) << 27);
      v61 = v57 & ((v60 >> 31) ^ v60);
      v62 = *(char ***)(v56 + 16 * v61);
      if (v62 == &WebCore::JSWaveShaperNode::s_info)
      {
LABEL_59:
        v53 = *(JSC::JSObject **)(v56 + 16 * v61 + 8);
        if (v53)
        {
LABEL_61:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v51, v53, v54);
          if (!*((_DWORD *)v52 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v52) & 1) == 0)
            JSC::JSObject::setStructure(v12, v52, SubclassStructure);
          goto LABEL_63;
        }
      }
      else
      {
        v63 = 1;
        while (v62)
        {
          v61 = ((_DWORD)v61 + v63) & v57;
          v62 = *(char ***)(v56 + 16 * v61);
          ++v63;
          if (v62 == &WebCore::JSWaveShaperNode::s_info)
            goto LABEL_59;
        }
      }
    }
    v64 = (JSC::JSCell *)WebCore::JSAudioNode::prototype(v52, FunctionRealm, v53);
    Structure = WebCore::JSWaveShaperNodePrototype::createStructure((uint64_t *)v52, (uint64_t)FunctionRealm, v64);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v67 = (JSC::JSCell *)WebCore::JSWaveShaperNodePrototype::create(v52, FunctionRealm, Structure, v66);
    v68 = WebCore::JSWaveShaperNode::createStructure((uint64_t *)v52, (uint64_t)FunctionRealm, v67);
    v53 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v68, (uint64_t)&WebCore::JSWaveShaperNode::s_info);
    goto LABEL_61;
  }
  v90 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::JSWaveShaperNode::analyzeHeap(v90);
}

uint64_t WebCore::JSWaveShaperNode::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSAudioNode::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSAudioNode::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSAudioNode::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWaveShaperNodePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWaveShaperNodePrototype::create(WebCore::JSWaveShaperNodePrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>(this, (uint64_t)&WebCore::JSWaveShaperNode::s_info, &WebCore::JSWaveShaperNodePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWaveShaperNode>,(WebCore::DOMConstructorID)266>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2128);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSAudioNode>,(WebCore::DOMConstructorID)237>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSWaveShaperNode>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSWaveShaperNode::s_info + ~((_QWORD)&WebCore::JSWaveShaperNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSWaveShaperNode::s_info + ~((_QWORD)&WebCore::JSWaveShaperNode::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSWaveShaperNode::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSWaveShaperNode::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSAudioNode::prototype((WebCore::JSAudioNode *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSWaveShaperNodePrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSWaveShaperNodePrototype::create((WebCore::JSWaveShaperNodePrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSWaveShaperNode::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSWaveShaperNode::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2128) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWaveShaperNodeConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWaveShaperNodePrototype::s_info != (char **)(16
                                                              * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWaveShaperNode>,(WebCore::DOMConstructorID)266>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsWaveShaperNode_curve(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  JSC::ArrayBufferView *v5;
  JSC::ArrayBufferView *v7;

  v3 = *(JSC::JSGlobalObject **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  WebCore::WaveShaperNode::curveForBindings(*(_QWORD **)(a2 + 24), &v7);
  if (!v7)
    return 2;
  v4 = JSC::ArrayBufferView::wrap(v7, a1, v3);
  v5 = v7;
  v7 = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*(_DWORD *)v5;
  }
  return v4;
}

BOOL WebCore::setJSWaveShaperNode_curve(JSC *a1, uint64_t a2, uint64_t this)
{
  _DWORD *v3;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  int v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  JSValue v24;
  WTF::StringImpl *v25;
  _DWORD *v26;
  int v27;
  _DWORD *v28;
  WTF::StringImpl *v29;
  int v30[2];
  WTF::StringImpl *v31;
  char v32;

  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWaveShaperNode::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWaveShaperNode::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(_QWORD **)(a2 + 24);
  if ((this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v3 = 0;
    v27 = 0;
LABEL_32:
    v26 = 0;
    v28 = v3;
    WebCore::WaveShaperNode::setCurveForBindings(v11, &v28, (uint64_t)v30);
    v18 = v28;
    v28 = 0;
    if (v18)
    {
      if (*v18 == 1)
        JSC::ArrayBufferView::operator delete();
      else
        --*v18;
    }
    if (v32)
    {
      v22 = (WTF::StringImpl *)LOBYTE(v30[0]);
      LOBYTE(v28) = v30[0];
      v23 = v31;
      v31 = 0;
      v29 = v23;
      if (!*((_QWORD *)v5 + 2))
      {
        v24.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)LOBYTE(v30[0]), (JSC::JSGlobalObject *)&v29);
        JSC::VM::throwException(v5, a1, v24);
        v23 = v29;
      }
      v29 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v22);
        else
          *(_DWORD *)v23 -= 2;
      }
      if (v32)
      {
        v25 = v31;
        v31 = 0;
        if (v25)
        {
          if (*(_DWORD *)v25 == 2)
            WTF::StringImpl::destroy(v25, v22);
          else
            *(_DWORD *)v25 -= 2;
        }
      }
    }
    v19 = 0;
    v20 = 1;
    goto LABEL_37;
  }
  v28 = (_DWORD *)*((_QWORD *)a1 + 7);
  if ((this & 0xFFFE000000000002) != 0)
    goto LABEL_30;
  if (*(_BYTE *)(this + 5) != 46)
    goto LABEL_30;
  JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::possiblySharedTypedImpl(this, v30);
  v3 = *(_DWORD **)v30;
  if (!*(_QWORD *)v30)
    goto LABEL_30;
  v12 = *(_QWORD *)(*(_QWORD *)v30 + 32);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 16);
    if (v13)
    {
      if ((v14 = *(_QWORD *)(MEMORY[0x1E0CC10F8] + 56)) == 0
        || !*(_BYTE *)(MEMORY[0x1E0CC10F8] + 34) && *MEMORY[0x1E0CC10F0]
        || (v13 & 0x3FFFFFFFFLL) + v14)
      {
        if (*(_QWORD *)(v12 + 32)
           ? WTF::RefPtr<JSC::SharedArrayBufferContents,WTF::RawPtrTraits<JSC::SharedArrayBufferContents>,WTF::DefaultRefDerefTraits<JSC::SharedArrayBufferContents>>::unspecifiedBoolTypeInstance
           : 0)
        {
          *(_QWORD *)v30 = 0;
          goto LABEL_28;
        }
      }
    }
  }
  if ((*(_BYTE *)(*(_QWORD *)v30 + 6) & 3) != 0)
  {
LABEL_28:
    if (*v3 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*v3;
LABEL_30:
    WebCore::throwAttributeTypeError((int)a1, (int)&v28, "WaveShaperNode", 15, "curve", 6, "Float32Array", 13);
    v16 = 0;
    v17 = 1;
    LODWORD(v31) = 1;
    goto LABEL_31;
  }
  v17 = 0;
  LODWORD(v31) = 0;
  *(_QWORD *)v30 = 0;
  v16 = 1;
  v26 = v3;
LABEL_31:
  v27 = v17;
  ((void (*)(_DWORD **, int *))off_1E3330D30[v17])(&v28, v30);
  if (v16)
    goto LABEL_32;
  v20 = 0;
  v19 = 1;
LABEL_37:
  ((void (*)(int *, _DWORD **))off_1E3330D40[v19])(v30, &v26);
  return v20;
}

uint64_t WebCore::jsWaveShaperNode_oversample(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;

  v2 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 152) + 56);
  if (v2 == 2)
    v3 = 2;
  else
    v3 = v2 == 1;
  return WebCore::convertEnumerationToJS<WebCore::OverSampleType>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)v3);
}

BOOL WebCore::setJSWaveShaperNode_oversample(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  JSC::VM *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  _BOOL8 result;
  char hasExceptionsAfterHandlingTraps;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSWaveShaperNode::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSWaveShaperNode::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(_QWORD *)(a2 + 24);
  v10 = WebCore::parseEnumeration<WebCore::OverSampleType>(a1, (unint64_t)this);
  v11 = v10;
  v12 = BYTE4(v10);
  if (!*((_DWORD *)v3 + 20))
  {
    if (!BYTE4(v10))
      return 0;
    goto LABEL_14;
  }
  hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v3);
  result = 0;
  if ((hasExceptionsAfterHandlingTraps & 1) == 0 && v12)
  {
LABEL_14:
    WebCore::WaveShaperNode::setOversampleForBindings(v9, v11);
    return 1;
  }
  return result;
}

uint64_t WebCore::JSWaveShaperNode::subspaceForImpl(WebCore::JSWaveShaperNode *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 2152);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 2152);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 2152);
    *(_QWORD *)(v8 + 2152) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 2152);
  *(_QWORD *)(v3 + 2152) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::createWrapper<WebCore::WaveShaperNode,WebCore::WaveShaperNode>(JSC::VM *a1, uint64_t *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSAudioNode *v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  JSC::Structure *v18;
  JSC::JSCell *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (!v6)
    goto LABEL_7;
  v7 = *(_DWORD *)(v6 - 8);
  v8 = ((unint64_t)&WebCore::JSWaveShaperNode::s_info + ~((_QWORD)&WebCore::JSWaveShaperNode::s_info << 32)) ^ (((unint64_t)&WebCore::JSWaveShaperNode::s_info + ~((_QWORD)&WebCore::JSWaveShaperNode::s_info << 32)) >> 22);
  v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
  v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
  v11 = v7 & ((v10 >> 31) ^ v10);
  v12 = *(char ***)(v6 + 16 * v11);
  if (v12 != &WebCore::JSWaveShaperNode::s_info)
  {
    v13 = 1;
    while (v12)
    {
      v11 = ((_DWORD)v11 + v13) & v7;
      v12 = *(char ***)(v6 + 16 * v11);
      ++v13;
      if (v12 == &WebCore::JSWaveShaperNode::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
  if (!v14)
  {
LABEL_7:
    v15 = (WebCore::JSAudioNode *)*((_QWORD *)a1 + 7);
    v16 = (JSC::JSCell *)WebCore::JSAudioNode::prototype(v15, a1, a3);
    Structure = WebCore::JSWaveShaperNodePrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v19 = (JSC::JSCell *)WebCore::JSWaveShaperNodePrototype::create(v15, a1, Structure, v18);
    v20 = WebCore::JSWaveShaperNode::createStructure((uint64_t *)v15, (uint64_t)a1, v19);
    v14 = WebCore::cacheDOMStructure((JSCell *)a1, v20, (uint64_t)&WebCore::JSWaveShaperNode::s_info);
  }
  v21 = WebCore::JSWaveShaperNode::create(v14, a1, a2);
  WebCore::cacheWrapper<WebCore::AnalyserNode,WebCore::JSAnalyserNode>(*((_QWORD *)a1 + 415), v5, v21);
  return v21;
}

uint64_t WebCore::wrap<WebCore::WaveShaperNode>(int a1, JSC::VM *a2, WebCore::AudioNode *this)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  WebCore::JSDOMGlobalObject *v8;
  WebCore::AudioNode *v9;
  uint64_t result;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  WebCore::AudioNode *v17;
  int v18;
  WebCore::AudioNode *v19;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v11 = *(_QWORD *)(v5 + 32);
    if (!v11)
      goto LABEL_5;
    v12 = *(_DWORD *)(v11 - 8);
    v13 = ((unint64_t)this + ~((_QWORD)this << 32)) ^ (((unint64_t)this + ~((_QWORD)this << 32)) >> 22);
    v14 = 9 * ((v13 + ~(v13 << 13)) ^ ((v13 + ~(v13 << 13)) >> 8));
    v15 = (v14 ^ (v14 >> 15)) + ~((v14 ^ (v14 >> 15)) << 27);
    v16 = v12 & ((v15 >> 31) ^ v15);
    v17 = *(WebCore::AudioNode **)(v11 + 16 * v16);
    if (v17 != this)
    {
      v18 = 1;
      while (v17)
      {
        v16 = ((_DWORD)v16 + v18) & v12;
        v17 = *(WebCore::AudioNode **)(v11 + 16 * v16);
        ++v18;
        if (v17 == this)
          goto LABEL_14;
      }
      goto LABEL_5;
    }
LABEL_14:
    v6 = *(_QWORD *)(v11 + 16 * v16 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *((_QWORD *)this + 1);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    v7 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return v7;
  }
LABEL_5:
  WebCore::AudioNode::ref(this);
  v19 = this;
  if (*(uint64_t (***)(WebCore::AudioNode *__hidden))this == off_1E336BD78)
  {
    v7 = WebCore::createWrapper<WebCore::WaveShaperNode,WebCore::WaveShaperNode>(a2, (uint64_t *)&v19, v8);
    v9 = v19;
    v19 = 0;
    if (v9)
      WebCore::AudioNode::deref(v9);
    return v7;
  }
  result = 319;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebAnimation::prototype(WebCore::JSWebAnimation *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  uint64_t v13;
  JSC::JSCell *v14;
  unint64_t Structure;
  JSC::Structure *v16;
  JSC::JSCell *v17;
  uint64_t v18;

  v5 = *((_QWORD *)a2 + 412);
  if (!v5)
    goto LABEL_7;
  v6 = *(_DWORD *)(v5 - 8);
  v7 = ((unint64_t)&WebCore::JSWebAnimation::s_info + ~((_QWORD)&WebCore::JSWebAnimation::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebAnimation::s_info + ~((_QWORD)&WebCore::JSWebAnimation::s_info << 32)) >> 22);
  v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
  v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
  v10 = v6 & ((v9 >> 31) ^ v9);
  v11 = *(char ***)(v5 + 16 * v10);
  if (v11 != &WebCore::JSWebAnimation::s_info)
  {
    v12 = 1;
    while (v11)
    {
      v10 = ((_DWORD)v10 + v12) & v6;
      v11 = *(char ***)(v5 + 16 * v10);
      ++v12;
      if (v11 == &WebCore::JSWebAnimation::s_info)
        goto LABEL_6;
    }
    goto LABEL_7;
  }
LABEL_6:
  v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
  if (!v13)
  {
LABEL_7:
    v14 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(this, a2, a3);
    Structure = WebCore::JSWebAnimationPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v14);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v17 = (JSC::JSCell *)WebCore::JSWebAnimationPrototype::create(this, a2, Structure, v16);
    v18 = WebCore::JSWebAnimation::createStructure((uint64_t *)this, (uint64_t)a2, v17);
    v13 = WebCore::cacheDOMStructure((JSCell *)a2, v18, (uint64_t)&WebCore::JSWebAnimation::s_info);
  }
  return *(_QWORD *)(v13 + 48);
}

uint64_t WebCore::JSWebAnimation::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebAnimation::JSWebAnimation(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v4;
  return result;
}

{
  uint64_t v4;
  uint64_t result;

  v4 = *a4;
  *a4 = 0;
  result = WebCore::JSDOMObject::JSDOMObject(a1, a2);
  *(_QWORD *)(result + 24) = v4;
  return result;
}

uint64_t WebCore::JSWebAnimation::protectedWrapped@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 24);
  ++*(_DWORD *)(v2 + 24);
  *a2 = v2;
  return this;
}

unint64_t WebCore::JSWebAnimation::createPrototype(WebCore::JSWebAnimation *this, JSC::VM *a2, WebCore::JSDOMGlobalObject *a3)
{
  JSC::JSCell *v5;
  unint64_t Structure;
  JSC::Structure *v7;

  v5 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(this, a2, a3);
  Structure = WebCore::JSWebAnimationPrototype::createStructure((uint64_t *)this, (uint64_t)a2, v5);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  return WebCore::JSWebAnimationPrototype::create(this, a2, Structure, v7);
}

uint64_t WebCore::JSWebAnimationPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebAnimationPrototype::create(WebCore::JSWebAnimationPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  uint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  WTF::StringImpl *v17;
  JSC::Structure *v18;
  int v19;
  unint64_t v21;
  WTF::StringImpl *v22[6];
  int v23;
  int v24;
  JSC::Structure *v25;
  int v26;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v21 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v21);
    *((_QWORD *)this + 4865) = SlowCase + (int)v21;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<24u>(this, (uint64_t)&WebCore::JSWebAnimation::s_info, (uint64_t)&WebCore::JSWebAnimationPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                         + 0x28));
  if (v9 && *(_BYTE *)(v9 + 274))
  {
    __break(0xC471u);
    JUMPOUT(0x19503E18CLL);
  }
  v10 = v9 - 192;
  if (!v9)
    v10 = 0;
  if ((*(_QWORD *)(*(_QWORD *)(v10 + 680) + 704) & 0x20000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v11 = v22[0];
    v12 = *((_DWORD *)this + 23281);
    *((_DWORD *)this + 23281) = 1;
    LODWORD(v22[0]) = -1;
    WORD2(v22[0]) = 1;
    JSC::JSObject::deleteProperty();
    *((_DWORD *)this + 23281) = v12;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v13);
      else
        *(_DWORD *)v11 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v14 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v16 = JSC::JSString::create((uint64_t)this, v22);
  v17 = v22[0];
  v22[0] = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v15);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v26 = *(_DWORD *)SlowCase;
  v25 = v18;
  v19 = JSC::Structure::outOfLineCapacity(v18);
  v23 = 0;
  v24 = v19;
  v22[0] = (WTF::StringImpl *)&v24;
  v22[1] = (WTF::StringImpl *)SlowCase;
  v22[2] = this;
  v22[3] = (WTF::StringImpl *)&v26;
  v22[4] = (WTF::StringImpl *)&v25;
  v22[5] = (WTF::StringImpl *)&v23;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v18, this, v14, 6, (uint64_t)v22);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v23, v16);
  *((_DWORD *)v18 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWebAnimation>,(WebCore::DOMConstructorID)328>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::JSDOMGlobalObject *v17;
  uint64_t v18;
  unint64_t v20;
  unint64_t v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t v26;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2624);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v22) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v20 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v20);
    v5[2] = SlowCase + (int)v20;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v22, &WebCore::JSDOMConstructor<WebCore::JSWebAnimation>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v21 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v21);
    v10[2848] = v2 + (int)v21;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000000, 6, (uint64_t)&v22);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v22);
  v16 = *(_QWORD *)(v5[227] + 2160);
  v18 = WebCore::JSWebAnimation::prototype((WebCore::JSWebAnimation *)a1, (JSC::VM *)a2, v17);
  v22 = 0;
  v23 = v2;
  v24 = -1;
  v25 = 0x1000000;
  v26 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v16, v18, 14, (uint64_t)&v22);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2624) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebAnimationConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebAnimationPrototype::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWebAnimation>,(WebCore::DOMConstructorID)328>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsWebAnimation_id(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 144);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

BOOL WebCore::setJSWebAnimation_id(JSC::JSGlobalObject *a1, unint64_t a2, unint64_t this)
{
  JSC::VM *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  WebCore::WebAnimation *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  uint64_t v14;
  uint64_t v15;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  WTF::StringImpl *v22;
  unint64_t v23;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSWebAnimation::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSWebAnimation::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(WebCore::WebAnimation **)(a2 + 24);
  v23 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v10 = *(WTF::StringImpl **)(this + 8);
    if ((v10 & 1) != 0)
    {
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, a1);
      if (!v10)
        goto LABEL_17;
    }
    else if (!v10)
    {
LABEL_17:
      v22 = v10;
      goto LABEL_18;
    }
    *(_DWORD *)v10 += 2;
    goto LABEL_17;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v23, a1);
LABEL_18:
  if (*((_DWORD *)v3 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v3);
    v11 = v22;
    if (hasExceptionsAfterHandlingTraps)
    {
      v21 = 1;
      v22 = 0;
      if (v11)
      {
        if (*(_DWORD *)v11 == 2)
          WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v11 -= 2;
      }
      v15 = 0;
      v14 = 1;
      goto LABEL_26;
    }
  }
  else
  {
    v11 = v22;
  }
  v21 = 0;
  v20 = 0;
  v12 = (WTF::StringImpl *)*((_QWORD *)v9 + 18);
  *((_QWORD *)v9 + 18) = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
  {
    v14 = *((_QWORD *)v9 + 5);
    if (!v14)
      goto LABEL_25;
    v14 = *(_QWORD *)(v14 + 8);
    if (!v14)
      goto LABEL_25;
    v18 = WebCore::InspectorInstrumentation::instrumentingAgents((WebCore::InspectorInstrumentation *)(v14 - 96), (WebCore::ScriptExecutionContext *)a2);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 80);
      if (v19)
        WebCore::InspectorAnimationAgent::didChangeWebAnimationName(v19, v9);
    }
  }
  v14 = 0;
LABEL_25:
  v15 = 1;
LABEL_26:
  ((void (*)(unint64_t *, uint64_t *))off_1E3321590[v14])(&v23, &v20);
  return v15;
}

unint64_t WebCore::jsWebAnimation_effect(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 56);
  if (v2)
    return WebCore::wrap<WebCore::AnimationEffect>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v2);
  else
    return 2;
}

uint64_t WebCore::setJSWebAnimation_effect(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _BOOL4 v11;
  char **v12;
  BOOL v13;
  _DWORD *v16;
  _DWORD *v17;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSWebAnimation::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSWebAnimation::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  if ((a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v9 = 0;
  }
  else
  {
    v17 = *(_DWORD **)(a1 + 56);
    if ((a3 & 0xFFFE000000000002) != 0)
      goto LABEL_25;
    v10 = *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C);
    v11 = *(_DWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C) != 0;
    v12 = (char **)(16 * v10);
    if ((_DWORD)v10)
      v13 = v12 == &WebCore::JSAnimationEffect::s_info;
    else
      v13 = 1;
    if (!v13)
    {
      do
      {
        v12 = (char **)v12[2];
        v11 = v12 != 0;
      }
      while (v12 != &WebCore::JSAnimationEffect::s_info && v12 != 0);
    }
    if (!v11 || (v9 = *(_DWORD **)(a3 + 24)) == 0)
    {
LABEL_25:
      WebCore::throwAttributeTypeError(a1, (int)&v17, "Animation", 10, "effect", 7, "AnimationEffect", 16);
      return 0;
    }
    ++v9[2];
  }
  v17 = v9;
  (*(void (**)(uint64_t, _DWORD **))(*(_QWORD *)v8 + 128))(v8, &v17);
  v16 = v17;
  v17 = 0;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  return 1;
}

unint64_t WebCore::jsWebAnimation_timeline(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 64);
  if (v2)
    return WebCore::wrap<WebCore::AnimationTimeline>(a1, *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28), v2);
  else
    return 2;
}

uint64_t WebCore::setJSWebAnimation_timeline(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  _BOOL4 v11;
  char **v12;
  BOOL v13;
  _DWORD *v16;
  _DWORD *v17;

  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSWebAnimation::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSWebAnimation::s_info && v5 != 0);
  }
  if (!v4)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v8 = *(_QWORD *)(a2 + 24);
  if ((a3 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v9 = 0;
  }
  else
  {
    v17 = *(_DWORD **)(a1 + 56);
    if ((a3 & 0xFFFE000000000002) != 0)
      goto LABEL_25;
    v10 = *(unsigned int *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C);
    v11 = *(_DWORD *)(16 * (*(_DWORD *)a3 & 0xFFFFFFFE) + 0x4C) != 0;
    v12 = (char **)(16 * v10);
    if ((_DWORD)v10)
      v13 = v12 == &WebCore::JSAnimationTimeline::s_info;
    else
      v13 = 1;
    if (!v13)
    {
      do
      {
        v12 = (char **)v12[2];
        v11 = v12 != 0;
      }
      while (v12 != &WebCore::JSAnimationTimeline::s_info && v12 != 0);
    }
    if (!v11 || (v9 = *(_DWORD **)(a3 + 24)) == 0)
    {
LABEL_25:
      WebCore::throwAttributeTypeError(a1, (int)&v17, "Animation", 10, "timeline", 9, "AnimationTimeline", 18);
      return 0;
    }
    ++v9[2];
  }
  v17 = v9;
  (*(void (**)(uint64_t, _DWORD **))(*(_QWORD *)v8 + 136))(v8, &v17);
  v16 = v17;
  v17 = 0;
  if (v16)
  {
    if (v16[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v16 + 8))(v16);
    else
      --v16[2];
  }
  return 1;
}

uint64_t WebCore::jsWebAnimation_startTime(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  char v5;
  double v6;
  uint64_t v7;
  JSC::JSGlobalObject *v9;
  uint64_t v10;
  int v11;
  _BYTE v12[40];
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t *v16[5];

  v3 = *(uint64_t **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 160))(*(_QWORD *)(a2 + 24));
  if (!v5)
    return 2;
  v10 = v4;
  v11 = 0;
  LOBYTE(v13) = 0;
  v14 = 0;
  v15 = 0;
  v16[0] = &v15;
  v16[1] = &v13;
  v16[2] = a1;
  v16[3] = v3;
  v16[4] = &v10;
  v6 = _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_9IDLDoubleENS_12IDLInterfaceINS_15CSSNumericValueEEEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJdN3WTF6RefPtrIS6_NSH_12RawPtrTraitsIS6_EENSH_21DefaultRefDerefTraitsIS6_EEEEEEEEUlTyvE_JNSF_17integral_constantIlLl0EEENSS_IlLl1EEEEEET_SV_(v16, (uint64_t)v12);
  if (v14)
  {
    v7 = v13;
    if (v11 != -1)
      ((void (*)(uint64_t **, uint64_t *, double))off_1E3330D50[v11])(v16, &v10, v6);
    return v7;
  }
  v9 = (JSC::JSGlobalObject *)std::__throw_bad_optional_access[abi:sn180100]();
  return WebCore::setJSWebAnimation_startTime(v9);
}

BOOL WebCore::setJSWebAnimation_startTime(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  int v13;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSValue v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  char v21;
  _BYTE v22[8];
  WTF::StringImpl *v23;
  char v24;
  char v25;
  _BYTE v26[8];
  uint64_t v27;
  int v28;
  char v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSWebAnimation::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSWebAnimation::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  WebCore::Converter<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLDouble,WebCore::IDLInterface<WebCore::CSSNumericValue>>>>::convert((uint64_t)v26, a1, a3);
  v11 = v30;
  v12 = v30 == 0;
  if (!v30)
  {
    v22[0] = 0;
    v24 = 0;
    if (v29)
    {
      LODWORD(v23) = -1;
      v13 = v28;
      if (v28 != -1)
      {
        ((void (*)(uint64_t *, _BYTE *, uint64_t *))off_1E3330D60[v28])(&v19, v22, &v27);
        LODWORD(v23) = v13;
      }
      v24 = 1;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v10 + 168))(&v19, v10, v22);
    if (v24 && (_DWORD)v23 != -1)
      ((void (*)(char *, _BYTE *))off_1E3330D50[v23])(&v25, v22);
    if (v21)
    {
      v15 = (WTF::StringImpl *)v19;
      v22[0] = v19;
      v16 = v20;
      v20 = 0;
      v23 = v16;
      if (!*((_QWORD *)v4 + 2))
      {
        v17.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)v19, (JSC::JSGlobalObject *)&v23);
        JSC::VM::throwException(v4, a1, v17);
        v16 = v23;
      }
      v23 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
      if (v21)
      {
        v18 = v20;
        v20 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v15);
          else
            *(_DWORD *)v18 -= 2;
        }
      }
    }
    v11 = v30;
  }
  if (v11 != -1)
    ((void (*)(_BYTE *, uint64_t *))off_1E3330D80[v11])(v22, &v27);
  return v12;
}

uint64_t WebCore::jsWebAnimation_currentTime(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  char v5;
  double v6;
  uint64_t v7;
  JSC::JSGlobalObject *v9;
  uint64_t v10;
  int v11;
  _BYTE v12[40];
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t *v16[5];

  v3 = *(uint64_t **)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 176))(*(_QWORD *)(a2 + 24));
  if (!v5)
    return 2;
  v10 = v4;
  v11 = 0;
  LOBYTE(v13) = 0;
  v14 = 0;
  v15 = 0;
  v16[0] = &v15;
  v16[1] = &v13;
  v16[2] = a1;
  v16[3] = v3;
  v16[4] = &v10;
  v6 = _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_9IDLDoubleENS_12IDLInterfaceINS_15CSSNumericValueEEEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJdN3WTF6RefPtrIS6_NSH_12RawPtrTraitsIS6_EENSH_21DefaultRefDerefTraitsIS6_EEEEEEEEUlTyvE_JNSF_17integral_constantIlLl0EEENSS_IlLl1EEEEEET_SV_(v16, (uint64_t)v12);
  if (v14)
  {
    v7 = v13;
    if (v11 != -1)
      ((void (*)(uint64_t **, uint64_t *, double))off_1E3330D50[v11])(v16, &v10, v6);
    return v7;
  }
  v9 = (JSC::JSGlobalObject *)std::__throw_bad_optional_access[abi:sn180100]();
  return WebCore::setJSWebAnimation_currentTime(v9);
}

BOOL WebCore::setJSWebAnimation_currentTime(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3)
{
  JSC::VM *v4;
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  _BOOL8 v12;
  int v13;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSValue v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  char v21;
  _BYTE v22[8];
  WTF::StringImpl *v23;
  char v24;
  char v25;
  _BYTE v26[8];
  uint64_t v27;
  int v28;
  char v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v5 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSWebAnimation::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSWebAnimation::s_info && v7 != 0);
  }
  if (!v6)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v10 = *(_QWORD *)(a2 + 24);
  WebCore::Converter<WebCore::IDLNullable<WebCore::IDLUnion<WebCore::IDLDouble,WebCore::IDLInterface<WebCore::CSSNumericValue>>>>::convert((uint64_t)v26, a1, a3);
  v11 = v30;
  v12 = v30 == 0;
  if (!v30)
  {
    v22[0] = 0;
    v24 = 0;
    if (v29)
    {
      LODWORD(v23) = -1;
      v13 = v28;
      if (v28 != -1)
      {
        ((void (*)(uint64_t *, _BYTE *, uint64_t *))off_1E3330D60[v28])(&v19, v22, &v27);
        LODWORD(v23) = v13;
      }
      v24 = 1;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)v10 + 184))(&v19, v10, v22);
    if (v24 && (_DWORD)v23 != -1)
      ((void (*)(char *, _BYTE *))off_1E3330D50[v23])(&v25, v22);
    if (v21)
    {
      v15 = (WTF::StringImpl *)v19;
      v22[0] = v19;
      v16 = v20;
      v20 = 0;
      v23 = v16;
      if (!*((_QWORD *)v4 + 2))
      {
        v17.super.isa = (Class)WebCore::createDOMException(a1, (JSC::JSGlobalObject *)v19, (JSC::JSGlobalObject *)&v23);
        JSC::VM::throwException(v4, a1, v17);
        v16 = v23;
      }
      v23 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
      if (v21)
      {
        v18 = v20;
        v20 = 0;
        if (v18)
        {
          if (*(_DWORD *)v18 == 2)
            WTF::StringImpl::destroy(v18, v15);
          else
            *(_DWORD *)v18 -= 2;
        }
      }
    }
    v11 = v30;
  }
  if (v11 != -1)
    ((void (*)(_BYTE *, uint64_t *))off_1E3330D80[v11])(v22, &v27);
  return v12;
}

unint64_t WebCore::jsWebAnimation_playbackRate(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;

  v2 = *(double *)(*(_QWORD *)(a2 + 24) + 120) + 0.0;
  if (COERCE__INT64(fabs(v2)) <= 0x7FEFFFFFFFFFFFFFLL
    && (v3 = (int)v2, v2 == (double)(int)v3)
    && ((_DWORD)v3 || (*(_QWORD *)&v2 & 0x8000000000000000) == 0))
  {
    return v3 | 0xFFFE000000000000;
  }
  else
  {
    return *(_QWORD *)&v2 + 0x2000000000000;
  }
}

BOOL WebCore::setJSWebAnimation_playbackRate(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t a3, __n128 a4)
{
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::WebAnimation *v11;
  double v12;
  JSC::VM *v14;
  unint64_t v15;

  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebAnimation::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebAnimation::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(WebCore::WebAnimation **)(a2 + 24);
  v15 = a3;
  if (a3 >= 0xFFFE000000000000)
  {
    v12 = (double)(int)a3;
  }
  else if (a3 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v14 = v5;
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v15, a1);
    v5 = v14;
    v12 = a4.n128_f64[0];
  }
  else
  {
    *(_QWORD *)&v12 = a3 - 0x2000000000000;
  }
  if (!*((_DWORD *)v5 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) == 0)
  {
    if ((*(_QWORD *)&v12 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
    {
      a4.n128_f64[0] = v12;
      WebCore::WebAnimation::setPlaybackRate(v11, a4);
      return 1;
    }
    JSC::throwTypeError();
  }
  return 0;
}

unint64_t WebCore::jsWebAnimation_frameRate(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  JSC::JSGlobalObject *v7;
  int v8;
  JSC::JSRopeString *v9;

  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 248))(*(_QWORD *)(a2 + 24));
  if (HIDWORD(v3) == -1)
    v4 = -1;
  else
    v4 = HIDWORD(v3);
  if (v4 == 1)
  {
    if (HIDWORD(v3) == 1)
      return WebCore::convertEnumerationToJS<WebCore::AnimationFrameRatePreset>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)v3);
    goto LABEL_13;
  }
  if (!v4)
  {
    if (!HIDWORD(v3))
    {
      if ((v3 & 0x80000000) != 0)
        return COERCE__INT64((double)v3) + 0x2000000000000;
      else
        return v3 | 0xFFFE000000000000;
    }
LABEL_13:
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v7 = (JSC::JSGlobalObject *)std::__throw_bad_optional_access[abi:sn180100]();
  return WebCore::setJSWebAnimation_frameRate(v7, v8, v9);
}

BOOL WebCore::setJSWebAnimation_frameRate(JSC::JSGlobalObject *a1, uint64_t a2, unint64_t this)
{
  JSC::VM *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSWebAnimation::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSWebAnimation::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(_QWORD *)(a2 + 24);
  if (this >> 49)
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(a1, this, &v13);
    if (HIDWORD(v13))
      return 0;
    v12 = v13;
  }
  else
  {
    v13 = *((_QWORD *)a1 + 7);
    v11 = WebCore::parseEnumeration<WebCore::AnimationFrameRatePreset>(a1, this);
    if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
      return 0;
    if (v11 <= 0xFFu)
    {
      JSC::throwTypeError();
      return 0;
    }
    v12 = v11 | 0x100000000;
  }
  v13 = v12;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 256))(v9, &v13);
  return 1;
}

uint64_t WebCore::jsWebAnimation_playState(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 192))(*(_QWORD *)(a2 + 24));
  v5 = *(_QWORD *)(a1 + 56);
  v6 = (uint64_t *)(v5 + 41968);
  if ((byte_1EE336EC1 & 1) == 0)
  {
    _MergedGlobals_28 += 2;
    byte_1EE336EC1 = 1;
    qword_1EE3371A0 = (uint64_t)&_MergedGlobals_28;
    dword_1ECE7A410 += 2;
    qword_1EE3371A8 = (uint64_t)&dword_1ECE7A410;
    dword_1ECE7A430 += 2;
    qword_1EE3371B0 = (uint64_t)&dword_1ECE7A430;
    dword_1ECE7A450 += 2;
    qword_1EE3371B8 = (uint64_t)&dword_1ECE7A450;
  }
  v7 = *(_QWORD *)&_MergedGlobals_1290[8 * v4 + 736];
  if (!v7)
    return *v6;
  v8 = *(_DWORD *)v7;
  v9 = *(_DWORD *)(v7 + 4);
  *(_DWORD *)v7 += 2;
  if (v9)
  {
    if (v9 != 1)
    {
LABEL_6:
      v10 = *(_QWORD *)(v5 + 64760);
      if (!v10 || v7 != *(_QWORD *)(v10 + 8))
      {
        v10 = JSC::jsStringWithCacheSlowCase();
        v8 = *(_DWORD *)v7 - 2;
      }
      goto LABEL_9;
    }
    v12 = *(unsigned __int8 **)(v7 + 8);
    if ((*(_BYTE *)(v7 + 16) & 4) != 0)
    {
      v13 = *v12;
    }
    else
    {
      v14 = *(unsigned __int16 *)v12;
      if (v14 > 0xFF)
        goto LABEL_6;
      v13 = v14;
    }
    v10 = *(_QWORD *)(v5 + 8 * v13 + 42216);
  }
  else
  {
    v10 = *v6;
  }
LABEL_9:
  if (v8)
    *(_DWORD *)v7 = v8;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v7, v3);
  return v10;
}

uint64_t WebCore::jsWebAnimation_replaceState(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v12;
  unsigned int v13;
  unsigned int v14;

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 200))(*(_QWORD *)(a2 + 24));
  v5 = *(_QWORD *)(a1 + 56);
  v6 = (uint64_t *)(v5 + 41968);
  if ((byte_1EE336EC2 & 1) == 0)
  {
    dword_1ECE7A470 += 2;
    byte_1EE336EC2 = 1;
    qword_1EE337158 = (uint64_t)&dword_1ECE7A470;
    dword_1ECE7A490 += 2;
    qword_1EE337160 = (uint64_t)&dword_1ECE7A490;
    dword_1ECE7A4B0 += 2;
    qword_1EE337168 = (uint64_t)&dword_1ECE7A4B0;
  }
  v7 = *(_QWORD *)&_MergedGlobals_1290[8 * v4 + 664];
  if (!v7)
    return *v6;
  v8 = *(_DWORD *)v7;
  v9 = *(_DWORD *)(v7 + 4);
  *(_DWORD *)v7 += 2;
  if (v9)
  {
    if (v9 != 1)
    {
LABEL_6:
      v10 = *(_QWORD *)(v5 + 64760);
      if (!v10 || v7 != *(_QWORD *)(v10 + 8))
      {
        v10 = JSC::jsStringWithCacheSlowCase();
        v8 = *(_DWORD *)v7 - 2;
      }
      goto LABEL_9;
    }
    v12 = *(unsigned __int8 **)(v7 + 8);
    if ((*(_BYTE *)(v7 + 16) & 4) != 0)
    {
      v13 = *v12;
    }
    else
    {
      v14 = *(unsigned __int16 *)v12;
      if (v14 > 0xFF)
        goto LABEL_6;
      v13 = v14;
    }
    v10 = *(_QWORD *)(v5 + 8 * v13 + 42216);
  }
  else
  {
    v10 = *v6;
  }
LABEL_9:
  if (v8)
    *(_DWORD *)v7 = v8;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v7, v3);
  return v10;
}

uint64_t WebCore::jsWebAnimation_pending(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 208))(*(_QWORD *)(a2 + 24)))
    return 7;
  else
    return 6;
}

uint64_t WebCore::jsWebAnimation_onfinish(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 808), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
    (*(void (**)(WebCore *))(*(_QWORD *)v5 + 72))(v5);
  else
    --*((_DWORD *)v5 + 6);
  return v9;
}

BOOL WebCore::setJSWebAnimation_onfinish(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSWebAnimation::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSWebAnimation::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 808), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)v11 + 72))(v11);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsWebAnimation_oncancel(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 344), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
    (*(void (**)(WebCore *))(*(_QWORD *)v5 + 72))(v5);
  else
    --*((_DWORD *)v5 + 6);
  return v9;
}

BOOL WebCore::setJSWebAnimation_oncancel(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSWebAnimation::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSWebAnimation::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 344), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)v11 + 72))(v11);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsWebAnimation_onremove(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(WebCore **)(a2 + 24);
  ++*((_DWORD *)v5 + 6);
  v6 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 96)) == 0)
    v7 = WebCore::threadGlobalDataSlow(a1);
  v8 = *(_QWORD *)(v7 + 40);
  if (!v8)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v7);
    v8 = *(_QWORD *)(v7 + 40);
  }
  v9 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v8 + 1656), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  if (*((_DWORD *)v5 + 6) == 1)
    (*(void (**)(WebCore *))(*(_QWORD *)v5 + 72))(v5);
  else
    --*((_DWORD *)v5 + 6);
  return v9;
}

BOOL WebCore::setJSWebAnimation_onremove(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) == 0)
  {
    v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
    v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
    v8 = (char **)(16 * v6);
    if ((_DWORD)v6)
      v9 = v8 == &WebCore::JSWebAnimation::s_info;
    else
      v9 = 1;
    if (!v9)
    {
      do
      {
        v8 = (char **)v8[2];
        v7 = v8 != 0;
      }
      while (v8 != &WebCore::JSWebAnimation::s_info && v8 != 0);
    }
    if (v7)
    {
      v11 = *(WebCore::EventTarget **)(a2 + 24);
      ++*((_DWORD *)v11 + 6);
      v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
      if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
        v13 = WebCore::threadGlobalDataSlow(a1);
      v14 = *(_QWORD *)(v13 + 40);
      if (!v14)
      {
        WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v13);
        v14 = *(_QWORD *)(v13 + 40);
      }
      WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v14 + 1656), a3, (_DWORD *)a2);
      if (*((_DWORD *)v11 + 6) == 1)
      {
        (*(void (**)(WebCore::EventTarget *))(*(_QWORD *)v11 + 72))(v11);
        if (a3)
        {
LABEL_19:
          if ((a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
            JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
        }
      }
      else
      {
        --*((_DWORD *)v11 + 6);
        if (a3)
          goto LABEL_19;
      }
      return 1;
    }
  }
  return JSC::throwDOMAttributeSetterTypeError() != 0;
}

uint64_t WebCore::jsWebAnimation_ready(JSC::JSGlobalObject *a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  unint64_t v8;
  _QWORD *v9;
  JSC::Structure *v10;

  if ((a2 & 0xFFFE000000000002) != 0)
    return WebCore::rejectPromiseWithGetterTypeError(a1, (JSC **)&WebCore::JSWebAnimation::s_info, a3);
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSWebAnimation::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSWebAnimation::s_info && v5 != 0);
  }
  if (!v4)
    return WebCore::rejectPromiseWithGetterTypeError(a1, (JSC **)&WebCore::JSWebAnimation::s_info, a3);
  v8 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v9 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 216))(*(_QWORD *)(a2 + 24));
  return WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>::promise(v9, v8, v10);
}

uint64_t WebCore::jsWebAnimation_finished(JSC::JSGlobalObject *a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v3;
  BOOL v4;
  char **v5;
  BOOL v6;
  unint64_t v8;
  _QWORD *v9;
  JSC::Structure *v10;

  if ((a2 & 0xFFFE000000000002) != 0)
    return WebCore::rejectPromiseWithGetterTypeError(a1, (JSC **)&WebCore::JSWebAnimation::s_info, a3);
  v3 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v4 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v5 = (char **)(16 * v3);
  if ((_DWORD)v3)
    v6 = v5 == &WebCore::JSWebAnimation::s_info;
  else
    v6 = 1;
  if (!v6)
  {
    do
    {
      v5 = (char **)v5[2];
      v4 = v5 != 0;
    }
    while (v5 != &WebCore::JSWebAnimation::s_info && v5 != 0);
  }
  if (!v4)
    return WebCore::rejectPromiseWithGetterTypeError(a1, (JSC **)&WebCore::JSWebAnimation::s_info, a3);
  v8 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v9 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 224))(*(_QWORD *)(a2 + 24));
  return WebCore::DOMPromiseProxyWithResolveCallback<WebCore::IDLInterface<WebCore::WebAnimation>>::promise(v9, v8, v10);
}

uint64_t WebCore::JSWebAnimation::subspaceForImpl(WebCore::JSWebAnimation *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  WTF *v17;
  void *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  WTF *v23;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 2664);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  v21 = *(_QWORD *)(v8 + 2664);
  if (!v21)
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v23, "IsoSpace T");
    v22 = 0;
    MEMORY[0x19AEA3204](v9, &v23, (char *)this + 192, (char *)this + 1872, 32, 8, &v22);
    v11 = v22;
    v22 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v23;
    v23 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v21 = v9;
    v13 = *(_QWORD *)(v8 + 2664);
    *(_QWORD *)(v8 + 2664) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    v14 = *(unsigned int *)(v6 + 2844);
    if ((_DWORD)v14 == *(_DWORD *)(v6 + 2840))
    {
      v15 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v6 + 2832, v14 + 1, (unint64_t)&v21);
      v14 = *(unsigned int *)(v6 + 2844);
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = *v15;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 2832) + 8 * v14) = v9;
    }
    *(_DWORD *)(v6 + 2844) = v14 + 1;
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v16 = *(_QWORD *)(v3 + 2664);
  *(_QWORD *)(v3 + 2664) = v4;
  if (v16)
  {
    v17 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v17, v18);
  }
  v19 = __ldxr((unsigned __int8 *)v6);
  if (v19 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

uint64_t WebCore::JSWebAnimationOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD **)(*(_QWORD *)a2 + 24);
  v6 = v5[5];
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (v5[6] || (result = (*(uint64_t (**)(_QWORD *))(v5[4] + 64))(v5 + 4), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

uint64_t WebCore::JSWebAnimationOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v26;

  result = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v4 = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 24) = v4 + 1;
  v5 = result + 8;
  if (!result)
    v5 = 0;
  if (*(_DWORD *)(a3 + 48))
  {
    v8 = *(_QWORD *)(a3 + 32);
    v6 = (uint64_t *)(a3 + 32);
    v7 = v8;
    if (v8)
    {
      v9 = *(_DWORD *)(v7 - 8);
      v10 = (~(result << 32) + result) ^ ((unint64_t)(~(result << 32) + result) >> 22);
      v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
      v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
      v13 = v9 & ((v12 >> 31) ^ v12);
      v14 = *(_QWORD *)(v7 + 16 * v13);
      if (v14 != result)
      {
        v15 = 1;
        while (v14)
        {
          v13 = ((_DWORD)v13 + v15) & v9;
          v14 = *(_QWORD *)(v7 + 16 * v13);
          ++v15;
          if (v14 == result)
            goto LABEL_14;
        }
        v13 = *(unsigned int *)(v7 - 4);
      }
LABEL_14:
      if (v13 != *(_DWORD *)(v7 - 4))
      {
        v16 = (_QWORD *)(v7 + 16 * v13);
        *v16 = -1;
        v19 = v16[1];
        v18 = v16 + 1;
        v17 = v19;
        if (v19)
        {
          *(_QWORD *)(v17 + 8) = 3;
          *v18 = 0;
        }
        ++*(_DWORD *)(*v6 - 16);
        v20 = *v6;
        if (*v6)
          v21 = *(_DWORD *)(v20 - 12) - 1;
        else
          v21 = -1;
        *(_DWORD *)(v20 - 12) = v21;
        v22 = *v6;
        if (*v6)
        {
          v23 = 6 * *(_DWORD *)(v22 - 12);
          v24 = *(_DWORD *)(v22 - 4);
          if (v23 < v24 && v24 >= 9)
          {
            v26 = result;
            WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v6, v24 >> 1, 0);
            result = v26;
          }
        }
      }
    }
    v4 = *(_DWORD *)(result + 24) - 1;
  }
  else if (*(_QWORD *)v5)
  {
    *(_QWORD *)(*(_QWORD *)v5 + 8) = 3;
    *(_QWORD *)v5 = 0;
  }
  if (!v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 72))(result);
  *(_DWORD *)(result + 24) = v4;
  return result;
}

uint64_t WebCore::JSWebAnimation::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSWebAnimation::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSWebAnimation::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

uint64_t WebCore::parseEnumeration<WebCore::WebCodecsAlphaOption>(JSC::JSGlobalObject *a1, unint64_t this)
{
  JSC::JSGlobalObject *v3;
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  uint64_t v9;
  char **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v19;
  unint64_t v20;

  v3 = a1;
  v20 = this;
  if ((this & 0xFFFE000000000002) == 0 && *(_BYTE *)(this + 5) == 2)
  {
    v4 = *(_QWORD *)(this + 8);
    if ((v4 & 1) != 0)
    {
      v4 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)this, v3);
      if (!v4)
      {
LABEL_6:
        if (v4)
          goto LABEL_7;
        return 0;
      }
    }
    else if (!v4)
    {
      goto LABEL_6;
    }
    *(_DWORD *)v4 += 2;
    goto LABEL_6;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v20, a1);
  v4 = v19;
  if (!v19)
    return 0;
LABEL_7:
  v5 = *(_DWORD *)(v4 + 16);
  v6 = *(const char **)(v4 + 8);
  v7 = *(_DWORD *)(v4 + 4);
  if (v6 != "discard" && v7 == 7)
  {
    if ((v5 & 4) != 0)
    {
      if (*v6 != 100 || *(_DWORD *)(v6 + 1) != 1633907561 || *(_DWORD *)(v6 + 3) != 1685217635)
        goto LABEL_16;
    }
    else
    {
      if (*(_WORD *)v6 != 100)
        goto LABEL_16;
      v13 = *(_QWORD *)(v6 + 2);
      v14 = *(_QWORD *)(v6 + 6);
      if (v13 != 0x61006300730069 || v14 != 0x64007200610063)
        goto LABEL_16;
    }
LABEL_41:
    v12 = &WebCore::parseEnumerationFromString<WebCore::WebCodecsAlphaOption>(WTF::String const&)::mappings;
    goto LABEL_42;
  }
  if (v6 == "discard" && v7 == 7)
    goto LABEL_41;
  if (v6 == "keep" || v7 != 4)
  {
    if (v7 != 4 || v6 != "keep")
      goto LABEL_16;
    goto LABEL_30;
  }
  if ((v5 & 4) == 0)
  {
    if (*(_WORD *)v6 != 107)
      goto LABEL_16;
    if (*((_DWORD *)v6 + 1) != 7340133 || *(_DWORD *)(v6 + 2) != 6619237)
      goto LABEL_16;
    goto LABEL_30;
  }
  if (*v6 != 107 || *(_WORD *)(v6 + 1) != 25957 || *((_WORD *)v6 + 1) != 28773)
  {
LABEL_16:
    v9 = 0;
    goto LABEL_43;
  }
LABEL_30:
  v12 = &off_1E331B198;
LABEL_42:
  v9 = *((unsigned int *)v12 + 4) | 0x100000000;
LABEL_43:
  if (*(_DWORD *)v4 == 2)
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, v3);
  else
    *(_DWORD *)v4 -= 2;
  return v9;
}

uint64_t WebCore::convertDictionary<WebCore::WebCodecsAudioData::CopyToOptions>(uint64_t result, JSC::JSGlobalObject *a2, JSC::JSCell *this)
{
  WTF::StringImpl *v3;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  JSC::VM *v7;
  char v8;
  uint64_t v9;
  char v10;
  unsigned __int8 v11;
  WTF::StringImpl *v12;
  uint64_t Object;
  JSC::Structure *v15;
  WTF::StringImpl *v16;
  unint64_t v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  unsigned int v28;
  __int16 v29;
  char v30;
  _BYTE v31[7];
  _BYTE v32[7];
  WTF::StringImpl *v33;

  v6 = result;
  v7 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if (((unint64_t)this & 0xFFFE000000000002) == 0)
    {
      Object = JSC::JSCell::getObject(this);
      if (Object)
      {
        v15 = (JSC::Structure *)Object;
        WTF::AtomStringImpl::addLiteral();
        v17 = JSC::JSObject::get(v15, a2, (unint64_t)v33);
        if (v33)
        {
          if (*(_DWORD *)v33 == 2)
            WTF::StringImpl::destroy(v33, v16);
          else
            *(_DWORD *)v33 -= 2;
        }
        if (*((_DWORD *)v7 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v7);
          if ((result & 1) != 0)
            goto LABEL_43;
        }
        if (v17 == 10)
        {
          v8 = 0;
          LOBYTE(v9) = 0;
          goto LABEL_14;
        }
        v33 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
        v9 = WebCore::parseEnumeration<WebCore::AudioSampleFormat>(a2, v17);
        if (*((_DWORD *)v33 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v33);
          if ((result & 1) != 0)
            goto LABEL_43;
        }
        if ((v9 & 0xFF00000000) != 0)
        {
          v28 = v9 >> 8;
          v8 = 1;
LABEL_14:
          WTF::AtomStringImpl::addLiteral();
          v19 = JSC::JSObject::get(v15, a2, (unint64_t)v33);
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v18);
            else
              *(_DWORD *)v33 -= 2;
          }
          if (*((_DWORD *)v7 + 20))
          {
            result = JSC::VM::hasExceptionsAfterHandlingTraps(v7);
            if ((result & 1) != 0)
              goto LABEL_43;
          }
          if (v19 == 10)
          {
            v10 = 0;
            v11 = 0;
          }
          else
          {
            result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(a2, v19, &v33);
            v11 = v33;
            if ((unint64_t)v33 >> 32)
              goto LABEL_43;
            v27 = (unint64_t)v33 >> 8;
            v10 = 1;
          }
          WTF::AtomStringImpl::addLiteral();
          v20 = v33;
          v22 = JSC::JSObject::get(v15, a2, (unint64_t)v33);
          if (v20)
          {
            if (*(_DWORD *)v20 == 2)
              WTF::StringImpl::destroy(v20, v21);
            else
              *(_DWORD *)v20 -= 2;
          }
          if (*((_DWORD *)v7 + 20))
          {
            result = JSC::VM::hasExceptionsAfterHandlingTraps(v7);
            if ((result & 1) != 0)
              goto LABEL_43;
          }
          if (v22 == 10)
          {
            v12 = 0;
          }
          else
          {
            result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(a2, v22, &v33);
            v12 = v33;
            if ((unint64_t)v33 >> 32)
              goto LABEL_43;
          }
          WTF::AtomStringImpl::addLiteral();
          v23 = v33;
          result = JSC::JSObject::get(v15, a2, (unint64_t)v33);
          v25 = result;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              result = WTF::StringImpl::destroy(v23, v24);
            else
              *(_DWORD *)v23 -= 2;
          }
          if (!*((_DWORD *)v7 + 20) || (result = JSC::VM::hasExceptionsAfterHandlingTraps(v7), (result & 1) == 0))
          {
            if (v25 == 10)
            {
              v4 = v28;
              v5 = v27;
              goto LABEL_36;
            }
            result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(a2, v25, &v33);
            v3 = v33;
            v4 = v28;
            v5 = v27;
            if (!((unint64_t)v33 >> 32))
              goto LABEL_36;
          }
LABEL_43:
          v26 = 1;
          goto LABEL_37;
        }
      }
    }
    result = JSC::throwTypeError();
    goto LABEL_43;
  }
  v8 = 0;
  LOBYTE(v9) = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
LABEL_36:
  v26 = 0;
  *(_QWORD *)v6 = v3;
  *(_QWORD *)(v6 + 8) = v12;
  *(_BYTE *)(v6 + 16) = 1;
  *(_DWORD *)(v6 + 17) = *(_DWORD *)v32;
  *(_DWORD *)(v6 + 20) = *(_DWORD *)&v32[3];
  *(_QWORD *)(v6 + 24) = v11 | (v5 << 8);
  *(_BYTE *)(v6 + 32) = v10;
  *(_DWORD *)(v6 + 33) = *(_DWORD *)v31;
  *(_DWORD *)(v6 + 36) = *(_DWORD *)&v31[3];
  *(_DWORD *)(v6 + 40) = v9 | (v4 << 8);
  *(_BYTE *)(v6 + 44) = v8;
  *(_WORD *)(v6 + 45) = v29;
  *(_BYTE *)(v6 + 47) = v30;
LABEL_37:
  *(_DWORD *)(v6 + 48) = v26;
  return result;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSWebCodecsAudioData>::construct(JSC *this, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  JSC::JSCell *v6;
  uint64_t Object;
  JSC::Structure *v8;
  WTF::StringImpl *v9;
  JSC::JSArrayBufferView *v10;
  int v11;
  int v12;
  JSC::VM *v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  JSCell *v16;
  JSC::JSCell *v17;
  JSC::JSGlobalObject *v18;
  JSC::JSObject *v19;
  JSC::JSGlobalObject *v20;
  JSC::VM *v21;
  JSC::Structure *v22;
  uint64_t FunctionRealm;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char **v30;
  int v31;
  JSC::JSObject *v32;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v34;
  JSC::Structure *v35;
  JSC::JSCell *v36;
  uint64_t v37;
  unint64_t SubclassStructure;
  WTF::StringImpl *v40;
  int v41;
  int v42;
  uint64_t (*v43)();
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  JSC::VM *v52;
  uint64_t v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  unint64_t v59;
  int v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  WTF::StringImpl *v64;
  double v65;
  float v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  unint64_t v69;
  int v70;
  JSValue v71;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  JSValue v75;
  char hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v77;
  WebCore::JSWebCodecsAudioData *v78;
  JSCell *v79;
  double v80;
  __int128 v81;
  char v82[8];
  int v83;
  __int128 v84;
  int v85;
  JSC::VM *v86;
  WTF::StringImpl *v87;
  int v88;
  WTF::StringImpl *v89[2];
  uint64_t v90;
  int v91;
  __int128 v92;
  JSC::VM *v93;
  uint64_t *v94;
  WTF::StringImpl *v95;
  WTF::StringImpl *v96;
  int v97;
  int v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v3 = (JSC::VM *)*((_QWORD *)this + 7);
  v86 = v3;
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v71.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, this, v71);
  }
  v5 = *(_QWORD *)(a2 + 24);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40)))
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(this, &v86, (uint64_t)"AudioData", 10);
  v6 = *(JSC::JSCell **)(a2 + 48);
  v93 = (JSC::VM *)*((_QWORD *)this + 7);
  if (((unint64_t)v6 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    LODWORD(v89[0]) = 0;
    v89[1] = 0;
    v90 = 0;
    v91 = 0;
    goto LABEL_12;
  }
  if (((unint64_t)v6 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v6)) == 0)
  {
    JSC::throwTypeError();
    v16 = 0;
    v11 = 1;
    v85 = 1;
    goto LABEL_46;
  }
  v8 = (JSC::Structure *)Object;
  LODWORD(v89[0]) = 0;
  v89[1] = 0;
  v90 = 0;
  v91 = 0;
  WTF::AtomStringImpl::addLiteral();
  v10 = (JSC::JSArrayBufferView *)JSC::JSObject::get(v8, this, v81);
  if ((_QWORD)v81)
  {
    if (*(_DWORD *)v81 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v81, v9);
    else
      *(_DWORD *)v81 -= 2;
  }
  if (*((_DWORD *)v93 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v93))
    goto LABEL_13;
  if (v10 == (JSC::JSArrayBufferView *)10)
  {
LABEL_12:
    WebCore::throwRequiredMemberTypeError((int)this, (int)&v93, "data", 5, "AudioDataInit", 14, "(ArrayBufferView or ArrayBuffer)", 33);
LABEL_13:
    v85 = 1;
    goto LABEL_14;
  }
  v87 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  v40 = (WTF::StringImpl *)JSC::JSArrayBuffer::toWrapped((uint64_t)v87, (uint64_t)v10);
  if (v40)
  {
    *(_DWORD *)v40 += 2;
    DWORD2(v81) = 1;
    *(_QWORD *)&v81 = 0;
    v96 = v40;
    v97 = 1;
    v98 = 0;
    _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_((uint64_t)&v94);
    v41 = v98;
    if (!v98)
    {
      v42 = v97;
      LOBYTE(v87) = 0;
      v88 = -1;
      if (v97 == -1)
      {
        LOBYTE(v81) = 0;
        DWORD2(v81) = -1;
        if (v91 == -1)
          goto LABEL_58;
        ((void (*)(uint64_t **, uint64_t *))off_1E3321198[v91])(&v94, &v90);
        v91 = -1;
LABEL_56:
        if (DWORD2(v81) != -1)
          ((void (*)(uint64_t **, __int128 *))off_1E3321198[DWORD2(v81)])(&v94, &v81);
LABEL_58:
        DWORD2(v81) = -1;
        if (v88 != -1)
          ((void (*)(uint64_t **, WTF::StringImpl **))off_1E3321198[v88])(&v94, &v87);
        WTF::AtomStringImpl::addLiteral();
        v44 = (WTF::StringImpl *)v81;
        v46 = JSC::JSObject::get(v8, this, v81);
        if (v44)
        {
          if (*(_DWORD *)v44 == 2)
            WTF::StringImpl::destroy(v44, v45);
          else
            *(_DWORD *)v44 -= 2;
        }
        if (*((_DWORD *)v93 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v93))
          goto LABEL_83;
        if (v46 == 10)
        {
          v47 = "format";
          v48 = "AudioSampleFormat";
          v49 = (int)this;
          v50 = 7;
          v51 = 18;
          goto LABEL_82;
        }
        *(_QWORD *)&v81 = *((_QWORD *)this + 7);
        v52 = (JSC::VM *)v81;
        v53 = WebCore::parseEnumeration<WebCore::AudioSampleFormat>(this, v46);
        if (*((_DWORD *)v52 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v52) & 1) != 0)
          goto LABEL_83;
        if ((v53 & 0xFF00000000) == 0)
        {
          JSC::throwTypeError();
          goto LABEL_83;
        }
        LODWORD(v89[0]) = v53;
        WTF::AtomStringImpl::addLiteral();
        v54 = (WTF::StringImpl *)v81;
        v56 = JSC::JSObject::get(v8, this, v81);
        if (v54)
        {
          if (*(_DWORD *)v54 == 2)
            WTF::StringImpl::destroy(v54, v55);
          else
            *(_DWORD *)v54 -= 2;
        }
        if (*((_DWORD *)v93 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v93))
          goto LABEL_83;
        if (v56 == 10)
        {
          v47 = "numberOfChannels";
          v48 = "unsigned long";
          v49 = (int)this;
          v50 = 17;
        }
        else
        {
          WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, v56, &v81);
          if (DWORD1(v81))
            goto LABEL_83;
          *((_QWORD *)&v92 + 1) = v81;
          WTF::AtomStringImpl::addLiteral();
          v57 = (WTF::StringImpl *)v81;
          v59 = JSC::JSObject::get(v8, this, v81);
          if (v57)
          {
            if (*(_DWORD *)v57 == 2)
              WTF::StringImpl::destroy(v57, v58);
            else
              *(_DWORD *)v57 -= 2;
          }
          if (*((_DWORD *)v93 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v93))
            goto LABEL_83;
          if (v59 != 10)
          {
            WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, v59, &v81);
            if (DWORD1(v81))
              goto LABEL_83;
            *(_QWORD *)&v92 = v81;
            WTF::AtomStringImpl::addLiteral();
            v61 = (WTF::StringImpl *)v81;
            v63 = JSC::JSObject::get(v8, this, v81);
            if (v61)
            {
              if (*(_DWORD *)v61 == 2)
                WTF::StringImpl::destroy(v61, v62);
              else
                *(_DWORD *)v61 -= 2;
            }
            if (*((_DWORD *)v93 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v93))
              goto LABEL_83;
            if (v63 == 10)
            {
              v47 = "sampleRate";
              v48 = "float";
              v49 = (int)this;
              v50 = 11;
              v51 = 6;
            }
            else
            {
              *(_QWORD *)&v81 = v63;
              v64 = (WTF::StringImpl *)*((_QWORD *)this + 7);
              v87 = v64;
              if (v63 >= 0xFFFE000000000000)
              {
                v65 = (double)(int)v63;
              }
              else if (v63 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
              {
                v77 = v64;
                JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v81, this);
                v64 = v77;
              }
              else
              {
                *(_QWORD *)&v65 = v63 - 0x2000000000000;
              }
              if (*((_DWORD *)v64 + 20))
              {
                v80 = v65;
                hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v64);
                v65 = v80;
                if ((hasExceptionsAfterHandlingTraps & 1) != 0)
                  goto LABEL_83;
              }
              if ((*(_QWORD *)&v65 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
                || v65 < -3.40282347e38
                || v65 > 3.40282347e38)
              {
                JSC::throwTypeError();
                goto LABEL_83;
              }
              v66 = v65;
              *((float *)v89 + 1) = v66;
              WTF::AtomStringImpl::addLiteral();
              v67 = (WTF::StringImpl *)v81;
              v69 = JSC::JSObject::get(v8, this, v81);
              if (v67)
              {
                if (*(_DWORD *)v67 == 2)
                  WTF::StringImpl::destroy(v67, v68);
                else
                  *(_DWORD *)v67 -= 2;
              }
              if (*((_DWORD *)v93 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v93))
                goto LABEL_83;
              if (v69 != 10)
              {
                WebCore::convertToIntegerEnforceRange<WebCore::IDLLongLong>(this, v69, (uint64_t)&v87);
                if (!v88)
                {
                  v89[1] = v87;
                  v81 = *(_OWORD *)v89;
                  v82[0] = 0;
                  v83 = -1;
                  v70 = v91;
                  if (v91 != -1)
                  {
                    ((void (*)(uint64_t **, char *, uint64_t *))off_1E33211A8[v91])(&v94, v82, &v90);
                    v83 = v70;
                  }
                  v60 = 0;
                  v84 = v92;
                  goto LABEL_84;
                }
LABEL_83:
                v60 = 1;
LABEL_84:
                v85 = v60;
                v41 = v98;
                goto LABEL_85;
              }
              v47 = "timestamp";
              v48 = "long long";
              v49 = (int)this;
              v50 = 10;
              v51 = 10;
            }
LABEL_82:
            WebCore::throwRequiredMemberTypeError(v49, (int)&v93, v47, v50, "AudioDataInit", 14, v48, v51);
            goto LABEL_83;
          }
          v47 = "numberOfFrames";
          v48 = "unsigned long";
          v49 = (int)this;
          v50 = 15;
        }
        v51 = 14;
        goto LABEL_82;
      }
LABEL_55:
      v43 = off_1E33211A8[v42];
      ((void (*)(uint64_t **, WTF::StringImpl **, WTF::StringImpl **))v43)(&v94, &v87, &v96);
      v88 = v42;
      LOBYTE(v81) = 0;
      DWORD2(v81) = -1;
      ((void (*)(uint64_t **, __int128 *, WTF::StringImpl **))v43)(&v94, &v81, &v87);
      DWORD2(v81) = v42;
      v94 = &v90;
      ((void (*)(uint64_t **, uint64_t *, __int128 *))off_1E33211B8[v42])(&v94, &v90, &v81);
      goto LABEL_56;
    }
  }
  else
  {
    JSC::JSArrayBufferView::toWrapped(v10, (JSC::ArrayBufferView **)&v81);
    if ((_QWORD)v81)
    {
      v42 = 0;
      v96 = (WTF::StringImpl *)v81;
      v97 = 0;
      v98 = 0;
      LOBYTE(v87) = 0;
      v88 = -1;
      goto LABEL_55;
    }
    JSC::throwTypeError();
    v41 = 1;
    v98 = 1;
  }
  v85 = 1;
LABEL_85:
  if (v41 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33211C8[v41])(&v87, &v96);
LABEL_14:
  if (v91 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3321198[v91])(&v95, &v90);
  v11 = v85;
  if (v85)
  {
    v16 = 0;
    goto LABEL_45;
  }
  *(_OWORD *)v89 = v81;
  LOBYTE(v90) = 0;
  v91 = -1;
  v12 = v83;
  if (v83 != -1)
  {
    ((void (*)(WTF::StringImpl **, uint64_t *, char *))off_1E33211A8[v83])(&v95, &v90, v82);
    v91 = v12;
  }
  v92 = v84;
  WebCore::WebCodecsAudioData::create((int *)v89, (uint64_t)&v95);
  if (v91 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3321198[v91])(&v87, &v90);
  v13 = v86;
  if (*((_DWORD *)v86 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v86) & 1) != 0)
    goto LABEL_137;
  if (!v97)
  {
    v14 = *(_QWORD *)(v5 + 40);
    v15 = v95;
    v95 = 0;
    v89[0] = v15;
    if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))v15 != &off_1E336C7C8)
    {
      __break(0xC471u);
      JUMPOUT(0x195041524);
    }
    v16 = (JSCell *)WebCore::createWrapper<WebCore::WebCodecsAudioData,WebCore::WebCodecsAudioData>(v14, v89);
    if (v89[0])
    {
      if (*((_DWORD *)v89[0] + 4) == 1)
        (*(void (**)(void))(*(_QWORD *)v89[0] + 16))();
      else
        --*((_DWORD *)v89[0] + 4);
    }
    goto LABEL_27;
  }
  if (v97 == 1)
  {
    v73 = (WTF::StringImpl *)v95;
    LOBYTE(v89[0]) = (_BYTE)v95;
    v74 = v96;
    v96 = 0;
    v89[1] = v74;
    if (!*((_QWORD *)v13 + 2))
    {
      v75.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v95, (JSC::JSGlobalObject *)&v89[1]);
      JSC::VM::throwException(v13, this, v75);
      v74 = v89[1];
    }
    v89[1] = 0;
    if (v74)
    {
      if (*(_DWORD *)v74 == 2)
        WTF::StringImpl::destroy(v74, v73);
      else
        *(_DWORD *)v74 -= 2;
    }
    v16 = 0;
LABEL_27:
    if (*((_DWORD *)v13 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v13) & 1) != 0)
      goto LABEL_137;
    v17 = *(JSC::JSCell **)(a2 + 40);
    if (((unint64_t)v17 & 0xFFFE000000000002) != 0
      || (v18 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v17)) == 0
      || (v20 = v18, v18 == *(JSC::JSGlobalObject **)(a2 + 24))
      || (v21 = (JSC::VM *)*((_QWORD *)this + 7),
          FunctionRealm = JSC::getFunctionRealm(this, v18, v19),
          *((_DWORD *)v21 + 20))
      && (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
    {
LABEL_41:
      if (!*((_DWORD *)v13 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v13) & 1) == 0)
      {
LABEL_42:
        if (v97 != -1)
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33211D8[v97])(v89, &v95);
        v11 = v85;
LABEL_45:
        if (v11 == -1)
          return v16;
LABEL_46:
        ((void (*)(WTF::StringImpl **, __int128 *))off_1E33211E8[v11])(v89, &v81);
        return v16;
      }
LABEL_137:
      v16 = 0;
      goto LABEL_42;
    }
    v24 = *(_QWORD *)(FunctionRealm + 3296);
    if (v24)
    {
      v25 = *(_DWORD *)(v24 - 8);
      v26 = ((unint64_t)&WebCore::JSWebCodecsAudioData::s_info
           + ~((_QWORD)&WebCore::JSWebCodecsAudioData::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebCodecsAudioData::s_info
                                                                        + ~((_QWORD)&WebCore::JSWebCodecsAudioData::s_info << 32)) >> 22);
      v27 = 9 * ((v26 + ~(v26 << 13)) ^ ((v26 + ~(v26 << 13)) >> 8));
      v28 = (v27 ^ (v27 >> 15)) + ~((v27 ^ (v27 >> 15)) << 27);
      v29 = v25 & ((v28 >> 31) ^ v28);
      v30 = *(char ***)(v24 + 16 * v29);
      if (v30 == &WebCore::JSWebCodecsAudioData::s_info)
      {
LABEL_37:
        v32 = *(JSC::JSObject **)(v24 + 16 * v29 + 8);
        if (v32)
        {
LABEL_39:
          SubclassStructure = JSC::InternalFunction::createSubclassStructure(this, v20, v32, v22);
          if (!*((_DWORD *)v21 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) == 0)
            JSC::JSObject::setStructure(v16, v21, SubclassStructure);
          goto LABEL_41;
        }
      }
      else
      {
        v31 = 1;
        while (v30)
        {
          v29 = ((_DWORD)v29 + v31) & v25;
          v30 = *(char ***)(v24 + 16 * v29);
          ++v31;
          if (v30 == &WebCore::JSWebCodecsAudioData::s_info)
            goto LABEL_37;
        }
      }
    }
    Structure = WebCore::JSWebCodecsAudioDataPrototype::createStructure((uint64_t *)v21, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v36 = (JSC::JSCell *)WebCore::JSWebCodecsAudioDataPrototype::create(v21, Structure, v34, v35);
    v37 = WebCore::JSWebCodecsAudioData::createStructure((uint64_t *)v21, FunctionRealm, v36);
    v32 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v37, (uint64_t)&WebCore::JSWebCodecsAudioData::s_info);
    goto LABEL_39;
  }
  v78 = (WebCore::JSWebCodecsAudioData *)std::__throw_bad_variant_access[abi:sn180100]();
  return (JSCell *)WebCore::JSWebCodecsAudioData::destroy(v78, v79);
}

_DWORD *WebCore::JSWebCodecsAudioData::destroy(WebCore::JSWebCodecsAudioData *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

uint64_t WebCore::JSWebCodecsAudioData::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebCodecsAudioData::estimatedSize(WebCore::JSWebCodecsAudioData *this, JSC::JSCell *a2, JSC::VM *a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = JSC::JSObject::estimatedSize(this, a2, a3);
  v5 = *(_QWORD *)(*((_QWORD *)this + 3) + 24);
  if (v5)
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 64))(v5);
  return v5 + v4;
}

uint64_t WebCore::JSWebCodecsAudioData::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  JSC::JSObject::visitChildren();
  result = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  if (*(_BYTE *)(a2 + 184))
  {
    *(_QWORD *)(a2 + 144) += result;
    v5 = *(_QWORD *)(a2 + 160);
    v6 = __CFADD__(v5, result);
    v7 = v5 + result;
    if (v6)
      *(_BYTE *)(a2 + 152) = 1;
    else
      *(_QWORD *)(a2 + 160) = v7;
  }
  return result;
}

uint64_t WebCore::JSWebCodecsAudioData::visitChildren(WebCore::JSWebCodecsAudioData *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];
  uint64_t v10;
  char v11;

  v9[0] = a2;
  v9[1] = this;
  v11 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v10 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v9;
    JSC::JSObject::visitChildren();
    v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 24);
    if (v6)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
    else
      v7 = 0;
    result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 96))(a2, v7);
    *(_QWORD *)(v9[0] + 88) = v10;
  }
  return result;
}

uint64_t WebCore::JSWebCodecsAudioDataPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebCodecsAudioDataPrototype::create(WebCore::JSWebCodecsAudioDataPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<11u>(this, (uint64_t)&WebCore::JSWebCodecsAudioData::s_info, (uint64_t)&WebCore::JSWebCodecsAudioDataPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWebCodecsAudioData>,(WebCore::DOMConstructorID)272>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2176);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSWebCodecsAudioData>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000001, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSWebCodecsAudioData::s_info
         + ~((_QWORD)&WebCore::JSWebCodecsAudioData::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebCodecsAudioData::s_info
                                                                      + ~((_QWORD)&WebCore::JSWebCodecsAudioData::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSWebCodecsAudioData::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSWebCodecsAudioData::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSWebCodecsAudioDataPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebCodecsAudioDataPrototype::create((WebCore::JSWebCodecsAudioDataPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSWebCodecsAudioData::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebCodecsAudioData::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2176) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebCodecsAudioDataConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebCodecsAudioDataPrototype::s_info != (char **)(16
                                                                  * *(unsigned int *)(16
                                                                                    * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                    + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWebCodecsAudioData>,(WebCore::DOMConstructorID)272>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsWebCodecsAudioData_format(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 24);
  if (!v3)
    return 2;
  v4 = (WTF::StringImpl *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  return WebCore::convertEnumerationToJS<WebCore::AudioSampleFormat>(*(_QWORD *)(a1 + 56), v4);
}

unint64_t WebCore::jsWebCodecsAudioData_sampleRate(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 24);
  if (v2)
    v3 = (float)(unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  else
    v3 = 0.0;
  v4 = (int)v3;
  if ((double)(int)v4 == v3 && ((_DWORD)v4 || (LODWORD(v3) & 0x80000000) == 0))
    return v4 | 0xFFFE000000000000;
  else
    return COERCE__INT64(v3) + 0x2000000000000;
}

unint64_t WebCore::jsWebCodecsAudioData_numberOfFrames(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 24);
  if (v2 && (LODWORD(v2) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2), (v2 & 0x80000000) != 0))
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsWebCodecsAudioData_numberOfChannels(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 24);
  if (v2 && (LODWORD(v2) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2), (v2 & 0x80000000) != 0))
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

unint64_t WebCore::jsWebCodecsAudioData_duration(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  char v4;
  double v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 24);
  if (!v2)
    return 2;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  if (!v4)
    return 2;
  if (HIDWORD(v3))
  {
    v6 = (double)v3;
  }
  else
  {
    if ((v3 & 0x80000000) == 0)
      return v3 | 0xFFFE000000000000;
    v6 = (double)v3;
  }
  return *(_QWORD *)&v6 + 0x2000000000000;
}

unint64_t WebCore::jsWebCodecsAudioData_timestamp(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 24);
  if (v2 && (v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2), v2 != (int)v2))
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::JSWebCodecsAudioDataOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSWebCodecsAudioDataOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[4];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[4] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
  --v3[4];
  return result;
}

unint64_t WebCore::createWrapper<WebCore::WebCodecsAudioData,WebCore::WebCodecsAudioData>(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  int v35;
  unint64_t SlowCase;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *Allocator;
  unint64_t v44;
  _QWORD *v45;
  WTF *v46;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSWebCodecsAudioData::s_info
        + ~((_QWORD)&WebCore::JSWebCodecsAudioData::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebCodecsAudioData::s_info
                                                                     + ~((_QWORD)&WebCore::JSWebCodecsAudioData::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSWebCodecsAudioData::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSWebCodecsAudioData::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSWebCodecsAudioDataPrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSWebCodecsAudioDataPrototype::create((WebCore::JSWebCodecsAudioDataPrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSWebCodecsAudioData::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSWebCodecsAudioData::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 2200);
  if (v23)
    goto LABEL_28;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  if (!*(_QWORD *)(v26 + 2200))
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v46, "IsoSpace T");
    v45 = 0;
    MEMORY[0x19AEA3204](v27, &v46, v20 + 192, v20 + 1872, 32, 8, &v45);
    v29 = (uint64_t)v45;
    v45 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v46;
    v46 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v31 = *(_QWORD *)(v26 + 2200);
    *(_QWORD *)(v26 + 2200) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v32 = *(_QWORD *)(v22 + 2200);
  *(_QWORD *)(v22 + 2200) = v23;
  if (v32)
  {
    v33 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v33, v34);
  }
  v35 = __ldxr((unsigned __int8 *)v24);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_28:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_29:
    v23[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v44 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v44);
    v23[5] = SlowCase + (int)v44;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v37 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v37;
  if (*(_BYTE *)(v20 + 755))
  {
    __dmb(0xAu);
    v37 = *(WTF **)(SlowCase + 24);
  }
  v38 = *((_QWORD *)v37 + 3);
  if (v38 && (unint64_t)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 64))(v38) >= 0x101)
    JSC::Heap::reportExtraMemoryAllocatedSlowCase();
  v39 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE336F10 & 1) == 0)
  {
    qword_1EE336F08 = (uint64_t)&off_1E33204B0;
    byte_1EE336F10 = 1;
  }
  v46 = v4;
  if ((SlowCase & 8) != 0)
    v40 = (SlowCase - 112) | 1;
  else
    v40 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v40 & 1) != 0)
    v41 = v40 + 47;
  else
    v41 = *(_QWORD *)v40 + 32;
  Allocator = *(_QWORD **)(v41 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v41 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336F08;
  Allocator[2] = v39;
  v45 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v39 + 32), (uint64_t *)&v46, (uint64_t *)&v45);
  if (v45)
    v45[1] = 3;
  return SlowCase;
}

uint64_t WebCore::wrap<WebCore::WebCodecsAudioData>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WTF *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  WTF *v14;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(WTF **)(v3 + 16 * v8);
    if (v9 == a3)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11)
            return v12;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(WTF **)(v3 + 16 * v8);
        ++v10;
        if (v9 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 4);
  v14 = a3;
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 == &off_1E336C7C8)
  {
    v12 = WebCore::createWrapper<WebCore::WebCodecsAudioData,WebCore::WebCodecsAudioData>(a2, &v14);
    if (v14)
    {
      if (*((_DWORD *)v14 + 4) == 1)
        (*(void (**)(void))(*(_QWORD *)v14 + 16))();
      else
        --*((_DWORD *)v14 + 4);
    }
    return v12;
  }
  result = 642;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebCodecsAudioData::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSWebCodecsAudioData::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSWebCodecsAudioData::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

void WebCore::JSWebCodecsAudioDataOutputCallback::~JSWebCodecsAudioDataOutputCallback(WebCore::JSWebCodecsAudioDataOutputCallback *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::JSAbortAlgorithm::~JSAbortAlgorithm(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::JSWebCodecsAudioDataOutputCallback::handleEvent(uint64_t **this, WebCore::WebCodecsAudioData *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  JSC::Structure *v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v14;
  _BYTE v15[8];
  uint64_t v16;
  WTF *v17;
  _OWORD v18[4];
  uint64_t v19;
  _BYTE v20[8];
  uint64_t *v21;

  if (!WebCore::ActiveDOMCallback::canInvokeCallback((WebCore::ActiveDOMCallback *)this, a2))
    return 2;
  ++*((_DWORD *)this + 4);
  v4 = *this[3];
  if (!v4 || (*(_BYTE *)(v4 + 8) & 3) != 0)
    v5 = 0;
  else
    v5 = *(_QWORD *)v4;
  MEMORY[0x19AEA3294](v20, *(_QWORD *)(v5 + 56));
  v15[0] = 0;
  v17 = (WTF *)((char *)v18 + 8);
  memset(v18, 0, sizeof(v18));
  v19 = 0;
  v6 = (void *)WebCore::wrap<WebCore::WebCodecsAudioData>(v5, v5, a2);
  *((_QWORD *)&v18[0] + 1) = v6;
  v16 = 0x800000001;
  v21 = 0;
  v7 = this[3];
  v8 = *v7;
  if (*v7
    && (*(_BYTE *)(v8 + 8) & 3) == 0
    && *(_QWORD *)v8
    && ((v9 = v7[2]) == 0 || (*(_BYTE *)(v9 + 8) & 3) != 0 ? (v10 = 0) : (v10 = *(JSC::Structure **)v9),
        WebCore::JSCallbackData::invokeCallback(*(JSC::JSGlobalObject **)v8, v10, 10, (uint64_t)v15, 0, 0, (uint64_t *)&v21), (v6 = v21) != 0))
  {
    WebCore::reportException(*(JSC::JSGlobalObject **)(16 * (**(_DWORD **)this[3][2] & 0xFFFFFFFE) + 0x28), (uint64_t)v21, 0, 0, 0);
    v11 = 1;
  }
  else
  {
    v11 = 0;
  }
  v12 = *(uint64_t **)&v18[0];
  if (*(_QWORD *)&v18[0])
  {
    v21 = &v16;
    v14 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v18[0], (uint64_t *)&v21);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v12, v14);
  }
  if (v17 != (WTF *)((char *)v18 + 8) && v17)
    WTF::fastFree(v17, v6);
  MEMORY[0x19AEA32A0](v20);
  if (*((_DWORD *)this + 4) == 1)
    ((void (*)(uint64_t **))(*this)[2])(this);
  else
    --*((_DWORD *)this + 4);
  return v11;
}

uint64_t WebCore::JSWebCodecsAudioDataOutputCallback::visitJSFunction(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 16);
  if (!v3 || (v3[1] & 3) != 0)
    v4 = 0;
  else
    v4 = *v3;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v4);
}

{
  return WebCore::JSCallbackData::visitJSFunction<JSC::SlotVisitor>(*(_QWORD *)(a1 + 24), a2);
}

uint64_t WebCore::JSWebCodecsAudioDecoder::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  WebCore::JSEventTarget::visitOutputConstraints<JSC::AbstractSlotVisitor>(a1, a2);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 48) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 48), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 56) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 56), a2);
}

uint64_t WebCore::JSWebCodecsAudioDecoder::visitOutputConstraints<JSC::SlotVisitor>(uint64_t a1, uint64_t a2)
{
  WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 48), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 56), a2);
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSWebCodecsAudioDecoder>::construct(unint64_t this, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  uint64_t v6;
  JSC::JSCell *v7;
  uint64_t v8;
  uint64_t Object;
  JSC::Structure *v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  JSCell *v13;
  int v14;
  unsigned int v16;
  WebCore::JSWebCodecsErrorCallback *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  WebCore::ScriptExecutionContext *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __int128 v32;
  WebCore::JSDOMGlobalObject *v33;
  void *v34;
  JSC::JSCell *v35;
  JSC::JSGlobalObject *v36;
  JSC::JSObject *v37;
  JSC::JSGlobalObject *v38;
  JSC::VM *v39;
  JSC::JSObject *v40;
  JSC::Structure *v41;
  JSC::VM *FunctionRealm;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char **v49;
  int v50;
  JSC::JSCell *v51;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v53;
  JSC::Structure *v54;
  JSC::JSCell *v55;
  uint64_t v56;
  unint64_t SubclassStructure;
  uint64_t (***v58)(WebCore::ContextDestructionObserver *__hidden);
  uint64_t (**v59)(WebCore::ContextDestructionObserver *__hidden);
  uint64_t (*v61)(WebCore::ContextDestructionObserver *__hidden);
  uint64_t v62;
  uint64_t (*v63)(WebCore::ContextDestructionObserver *__hidden);
  BOOL v64;
  int v65;
  JSValue v66;
  uint64_t (*v68)(WebCore::ContextDestructionObserver *__hidden);
  _QWORD *v69;
  uint64_t v70;
  uint64_t Allocator;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  JSC::VM *v75;
  JSC::VM *v76;
  uint64_t (***v77)(WebCore::ContextDestructionObserver *__hidden);
  int v78;
  __int128 v79;
  JSC::VM *v80;
  uint64_t v81;
  __int128 v82;
  int v83;

  v3 = *(JSC::VM **)(this + 56);
  v76 = v3;
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v66.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)this, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, (JSC::JSGlobalObject *)this, v66);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError((JSC *)this, &v76, (uint64_t)"AudioDecoder", 13);
  v7 = *(JSC::JSCell **)(a2 + 48);
  v80 = *(JSC::VM **)(this + 56);
  if (((unint64_t)v7 & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if (((unint64_t)v7 & 0xFFFE000000000002) != 0 || (v8 = v6, (Object = JSC::JSCell::getObject(v7)) == 0))
    {
      JSC::throwTypeError();
      goto LABEL_12;
    }
    v10 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v12 = JSC::JSObject::get(v10, (JSC::JSGlobalObject *)this, v82);
    if ((_QWORD)v82)
    {
      if (*(_DWORD *)v82 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v82, v11);
      else
        *(_DWORD *)v82 -= 2;
    }
    if (*((_DWORD *)v80 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v80) & 1) != 0)
      goto LABEL_12;
    if (v12 != 10)
    {
      v77 = *(uint64_t (****)(WebCore::ContextDestructionObserver *__hidden))(this + 56);
      if ((v12 & 0xFFFE000000000002) != 0
        || (v16 = *(unsigned __int8 *)(v12 + 5), v16 < 0x17)
        || (v16 & 0xFE) != 0x1A
        && ((*(_BYTE *)(v12 + 6) & 4) == 0
         || ((*(void (**)(__int128 *__return_ptr, unint64_t))(16
                                                                              * *(unsigned int *)(16
                                                                                                * (*(_DWORD *)v12 & 0xFFFFFFFE)
                                                                                                + 0x4C)
                                                                              + 0x38))(&v82, v12), !(_BYTE)v82)))
      {
        JSC::throwTypeError();
        v17 = 0;
        v14 = 1;
        DWORD2(v79) = 1;
        v83 = 1;
        v21 = 1;
        goto LABEL_38;
      }
      v17 = (WebCore::JSWebCodecsErrorCallback *)WTF::fastMalloc((WTF *)0x20);
      WebCore::JSWebCodecsErrorCallback::JSWebCodecsErrorCallback(v17, v12, (WebCore::JSDOMGlobalObject *)this);
      DWORD2(v79) = 0;
      *(_QWORD *)&v79 = 0;
      WTF::AtomStringImpl::addLiteral();
      v18 = (WTF::StringImpl *)v82;
      v20 = JSC::JSObject::get(v10, (JSC::JSGlobalObject *)this, v82);
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v19);
        else
          *(_DWORD *)v18 -= 2;
      }
      if (!*((_DWORD *)v80 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v80))
      {
        if (v20 != 10)
        {
          v81 = *(_QWORD *)(this + 56);
          v75 = v3;
          if ((v20 & 0xFFFE000000000002) == 0
            && (v22 = *(unsigned __int8 *)(v20 + 5), v22 >= 0x17)
            && ((v22 & 0xFE) == 0x1A
             || (*(_BYTE *)(v20 + 6) & 4) != 0
             && ((*(void (**)(__int128 *__return_ptr, uint64_t))(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)v20 & 0xFFFFFFFE)
                                                                                           + 0x4C)
                                                                         + 0x38))(&v82, v20), (_BYTE)v82)))
          {
            v23 = WTF::fastMalloc((WTF *)0x20);
            v24 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
            *(_DWORD *)(v23 + 16) = 1;
            *(_QWORD *)v23 = &off_1E33A18C0;
            *(_QWORD *)(v23 + 8) = 0;
            WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v23, v24);
            *(_QWORD *)v23 = &off_1E331B3C0;
            v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            if ((this & 8) != 0)
              v26 = ((this - 112) | 1) + 47;
            else
              v26 = *(_QWORD *)(this & 0xFFFFFFFFFFFFC000) + 32;
            v27 = *(_QWORD **)(v26 + 16);
            if (!v27)
            {
              v69 = v25;
              v70 = v26;
              Allocator = JSC::WeakSet::findAllocator();
              v26 = v70;
              v27 = (_QWORD *)Allocator;
              v25 = v69;
            }
            *(_QWORD *)(v26 + 16) = *v27;
            v27[1] = 0;
            v27[2] = 0;
            *v27 = this;
            *v25 = v27;
            v25[1] = &off_1E32268A0;
            v28 = v25 + 1;
            if ((v20 & 8) != 0)
              v29 = ((v20 - 112) | 1) + 47;
            else
              v29 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFC000) + 32;
            v30 = *(_QWORD **)(v29 + 16);
            if (!v30)
            {
              v74 = v25;
              v72 = v29;
              v73 = JSC::WeakSet::findAllocator();
              v29 = v72;
              v30 = (_QWORD *)v73;
              v25 = v74;
            }
            v14 = 0;
            v31 = 0;
            *(_QWORD *)(v29 + 16) = *v30;
            *v30 = v20;
            v30[1] = v28;
            v30[2] = v23;
            v25[2] = v30;
            *(_QWORD *)(v23 + 24) = v25;
            v78 = 0;
            v77 = 0;
            *(_QWORD *)&v82 = v23;
            *((_QWORD *)&v82 + 1) = v17;
            v17 = 0;
          }
          else
          {
            JSC::throwTypeError();
            v14 = 1;
            v78 = 1;
            v31 = 1;
          }
          v83 = v14;
          ((void (*)(uint64_t *, uint64_t (****)(WebCore::ContextDestructionObserver *__hidden)))off_1E33213C0[v31])(&v81, &v77);
          v21 = 0;
          v3 = v75;
LABEL_38:
          ((void (*)(uint64_t (****)(WebCore::ContextDestructionObserver *__hidden), __int128 *))off_1E33213D0[v21])(&v77, &v79);
          if (v17)
          {
            if (*((_DWORD *)v17 + 4) == 1)
            {
              (*(void (**)(WebCore::JSWebCodecsErrorCallback *))(*(_QWORD *)v17 + 16))(v17);
              v14 = v83;
              if (!v83)
              {
LABEL_42:
                v32 = v82;
                v82 = 0uLL;
                v79 = v32;
                WebCore::WebCodecsAudioDecoder::create(v8, &v79, (uint64_t *)&v77);
                if (*((_QWORD *)&v79 + 1))
                {
                  if (*(_DWORD *)(*((_QWORD *)&v79 + 1) + 16) == 1)
                    (*(void (**)(void))(**((_QWORD **)&v79 + 1) + 16))();
                  else
                    --*(_DWORD *)(*((_QWORD *)&v79 + 1) + 16);
                }
                if ((_QWORD)v79)
                {
                  if (*(_DWORD *)(v79 + 16) == 1)
                    (*(void (**)(void))(*(_QWORD *)v79 + 16))();
                  else
                    --*(_DWORD *)(v79 + 16);
                }
                if (*v77 != &off_1E336C7F0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1950433A4);
                }
                v13 = (JSCell *)WebCore::createWrapper<WebCore::WebCodecsAudioDecoder,WebCore::WebCodecsAudioDecoder>(*(JSC::VM **)(v5 + 40), (WTF **)&v77, v33);
                v35 = *(JSC::JSCell **)(a2 + 40);
                if (((unint64_t)v35 & 0xFFFE000000000002) != 0
                  || (v36 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v35)) == 0
                  || (v38 = v36, v36 == *(JSC::JSGlobalObject **)(a2 + 24))
                  || (v39 = *(JSC::VM **)(this + 56),
                      FunctionRealm = (JSC::VM *)JSC::getFunctionRealm((JSC *)this, v36, v37),
                      *((_DWORD *)v39 + 20))
                  && (JSC::VM::hasExceptionsAfterHandlingTraps(v39) & 1) != 0)
                {
LABEL_62:
                  if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
                    v13 = 0;
                  v58 = v77;
                  v77 = 0;
                  if (!v58)
                    goto LABEL_80;
                  v59 = v58[3];
                  if (__ldaxr((unsigned __int8 *)v59))
                  {
                    __clrex();
                  }
                  else if (!__stxr(1u, (unsigned __int8 *)v59))
                  {
                    goto LABEL_68;
                  }
                  MEMORY[0x19AEA534C](v59);
LABEL_68:
                  v61 = v59[1];
                  v62 = (uint64_t)v61 - 1;
                  v59[1] = (uint64_t (*)(WebCore::ContextDestructionObserver *__hidden))((char *)v61 - 1);
                  if (v61 == (uint64_t (*)(WebCore::ContextDestructionObserver *__hidden))1)
                  {
                    v68 = v59[2];
                    v63 = v59[3];
                    v59[3] = 0;
                    v64 = v68 != 0;
                  }
                  else
                  {
                    v63 = 0;
                    v64 = 1;
                  }
                  v65 = __ldxr((unsigned __int8 *)v59);
                  if (v65 == 1)
                  {
                    if (!__stlxr(0, (unsigned __int8 *)v59))
                    {
LABEL_75:
                      if (!v62)
                      {
                        if (v63)
                          (*(void (**)(uint64_t (*)(WebCore::ContextDestructionObserver *__hidden)))(*(_QWORD *)v63 + 16))(v63);
                        if (!v64)
                          WTF::fastFree((WTF *)v59, v34);
                      }
LABEL_80:
                      v14 = v83;
                      goto LABEL_81;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow((WTF::Lock *)v59);
                  goto LABEL_75;
                }
                v43 = *((_QWORD *)FunctionRealm + 412);
                if (v43)
                {
                  v44 = *(_DWORD *)(v43 - 8);
                  v45 = ((unint64_t)&WebCore::JSWebCodecsAudioDecoder::s_info
                       + ~((_QWORD)&WebCore::JSWebCodecsAudioDecoder::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebCodecsAudioDecoder::s_info
                                                                                       + ~((_QWORD)&WebCore::JSWebCodecsAudioDecoder::s_info << 32)) >> 22);
                  v46 = 9 * ((v45 + ~(v45 << 13)) ^ ((v45 + ~(v45 << 13)) >> 8));
                  v47 = (v46 ^ (v46 >> 15)) + ~((v46 ^ (v46 >> 15)) << 27);
                  v48 = v44 & ((v47 >> 31) ^ v47);
                  v49 = *(char ***)(v43 + 16 * v48);
                  if (v49 == &WebCore::JSWebCodecsAudioDecoder::s_info)
                  {
LABEL_58:
                    v40 = *(JSC::JSObject **)(v43 + 16 * v48 + 8);
                    if (v40)
                    {
LABEL_60:
                      SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v38, v40, v41);
                      if (!*((_DWORD *)v39 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v39) & 1) == 0)
                        JSC::JSObject::setStructure(v13, v39, SubclassStructure);
                      goto LABEL_62;
                    }
                  }
                  else
                  {
                    v50 = 1;
                    while (v49)
                    {
                      v48 = ((_DWORD)v48 + v50) & v44;
                      v49 = *(char ***)(v43 + 16 * v48);
                      ++v50;
                      if (v49 == &WebCore::JSWebCodecsAudioDecoder::s_info)
                        goto LABEL_58;
                    }
                  }
                }
                v51 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v39, FunctionRealm, v40);
                Structure = WebCore::JSWebCodecsAudioDecoderPrototype::createStructure((uint64_t *)v39, (uint64_t)FunctionRealm, v51);
                *(_DWORD *)(Structure + 16) |= 0x80000u;
                v55 = (JSC::JSCell *)WebCore::JSWebCodecsAudioDecoderPrototype::create(v39, Structure, v53, v54);
                v56 = WebCore::JSWebCodecsAudioDecoder::createStructure((uint64_t *)v39, (uint64_t)FunctionRealm, v55);
                v40 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v56, (uint64_t)&WebCore::JSWebCodecsAudioDecoder::s_info);
                goto LABEL_60;
              }
LABEL_85:
              v13 = 0;
LABEL_81:
              if (v14 == -1)
                return v13;
              goto LABEL_13;
            }
            --*((_DWORD *)v17 + 4);
          }
          if (!v14)
            goto LABEL_42;
          goto LABEL_85;
        }
        WebCore::throwRequiredMemberTypeError(this, (int)&v80, "output", 7, "WebCodecsAudioDecoderInit", 26, "WebCodecsAudioDataOutputCallback", 33);
      }
      v21 = 0;
      v14 = 1;
      v83 = 1;
      goto LABEL_38;
    }
  }
  WebCore::throwRequiredMemberTypeError(this, (int)&v80, "error", 6, "WebCodecsAudioDecoderInit", 26, "WebCodecsErrorCallback", 23);
LABEL_12:
  v13 = 0;
  v14 = 1;
  v83 = 1;
LABEL_13:
  ((void (*)(__int128 *, __int128 *))off_1E33213E0[v14])(&v79, &v82);
  return v13;
}

uint64_t WebCore::JSWebCodecsAudioDecoder::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24) - 32);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebCodecsAudioDecoder::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 48), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 56), a2);
}

uint64_t WebCore::JSWebCodecsAudioDecoder::visitChildren(WebCore::JSWebCodecsAudioDecoder *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    WebCore::JSEventTarget::visitChildren(this, a2, a3);
    (*(void (**)(_QWORD, JSC::JSCell *))(**(_QWORD **)(*((_QWORD *)this + 3) + 48) + 24))(*(_QWORD *)(*((_QWORD *)this + 3) + 48), a2);
    result = (*(uint64_t (**)(_QWORD, JSC::JSCell *))(**(_QWORD **)(*((_QWORD *)this + 3) + 56) + 24))(*(_QWORD *)(*((_QWORD *)this + 3) + 56), a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSWebCodecsAudioDecoderPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebCodecsAudioDecoderPrototype::create(WebCore::JSWebCodecsAudioDecoderPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<9u>(this, (uint64_t)&WebCore::JSWebCodecsAudioDecoder::s_info, (uint64_t)&WebCore::JSWebCodecsAudioDecoderPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWebCodecsAudioDecoder>,(WebCore::DOMConstructorID)273>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v37;
  unint64_t v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2184);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v39) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v37 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v37);
    v5[2] = SlowCase + (int)v37;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v39, &WebCore::JSDOMConstructor<WebCore::JSWebCodecsAudioDecoder>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v38 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v38);
    v10[2848] = v2 + (int)v38;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v39 = 0;
  v40 = v2;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v39);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v39);
  v14 = v39;
  v39 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v39 = 0;
  v40 = v2;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v39);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (!v18)
    goto LABEL_21;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = ((unint64_t)&WebCore::JSWebCodecsAudioDecoder::s_info
       + ~((_QWORD)&WebCore::JSWebCodecsAudioDecoder::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebCodecsAudioDecoder::s_info
                                                                       + ~((_QWORD)&WebCore::JSWebCodecsAudioDecoder::s_info << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = *(char ***)(v18 + 16 * v23);
  if (v24 != &WebCore::JSWebCodecsAudioDecoder::s_info)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v19;
      v24 = *(char ***)(v18 + 16 * v23);
      ++v25;
      if (v24 == &WebCore::JSWebCodecsAudioDecoder::s_info)
        goto LABEL_20;
    }
    goto LABEL_21;
  }
LABEL_20:
  v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
  if (!v26)
  {
LABEL_21:
    v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)a1, (JSC::VM *)a2, v16);
    Structure = WebCore::JSWebCodecsAudioDecoderPrototype::createStructure((uint64_t *)a1, a2, v27);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v31 = (JSC::JSCell *)WebCore::JSWebCodecsAudioDecoderPrototype::create((WebCore::JSWebCodecsAudioDecoderPrototype *)a1, Structure, v29, v30);
    v32 = WebCore::JSWebCodecsAudioDecoder::createStructure((uint64_t *)a1, a2, v31);
    v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSWebCodecsAudioDecoder::s_info);
  }
  v33 = *(_QWORD *)(v26 + 48);
  v39 = 0;
  v40 = v2;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v39);
  if ((*(_BYTE *)((16 * *(unsigned int *)v2) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)v2, (JSC::VM *)a1);
  WTF::AtomStringImpl::addLiteral();
  v34 = v39;
  JSC::reifyStaticProperty((JSC::VM *)a1, (uint64_t)&WebCore::JSWebCodecsAudioDecoder::s_info, (unint64_t *)&v39, (uint64_t)&WebCore::JSWebCodecsAudioDecoderConstructorTableValues, (unsigned __int8 *)v2);
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v35);
    else
      *(_DWORD *)v34 -= 2;
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2184) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebCodecsAudioDecoderConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebCodecsAudioDecoderPrototype::s_info != (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWebCodecsAudioDecoder>,(WebCore::DOMConstructorID)273>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsWebCodecsAudioDecoder_state(uint64_t a1, uint64_t a2)
{
  return WebCore::convertEnumerationToJS<WebCore::WebCodecsCodecState>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*(unsigned int *)(*(_QWORD *)(a2 + 24) + 24));
}

unint64_t WebCore::jsWebCodecsAudioDecoder_decodeQueueSize(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) | 0xFFFE000000000000;
}

uint64_t WebCore::jsWebCodecsAudioDecoder_ondequeue(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v22;

  v5 = *(WebCore **)(a2 + 24);
  v6 = *((_QWORD *)v5 - 1);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  a1 = (WebCore *)MEMORY[0x19AEA534C](v6);
LABEL_5:
  ++*(_QWORD *)(v6 + 8);
  v8 = __ldxr((unsigned __int8 *)v6);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  a1 = (WebCore *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_10:
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(a1);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  v13 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v11 + 592), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  v14 = *((_QWORD *)v5 - 1);
  if (__ldaxr((unsigned __int8 *)v14))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v14))
  {
    goto LABEL_19;
  }
  MEMORY[0x19AEA534C](v14);
LABEL_19:
  v16 = *(_QWORD *)(v14 + 8);
  v17 = v16 - 1;
  *(_QWORD *)(v14 + 8) = v16 - 1;
  if (v16 == 1)
  {
    v22 = *(_QWORD *)(v14 + 16);
    v18 = *(_QWORD *)(v14 + 24);
    *(_QWORD *)(v14 + 24) = 0;
    v19 = v22 != 0;
  }
  else
  {
    v18 = 0;
    v19 = 1;
  }
  v20 = __ldxr((unsigned __int8 *)v14);
  if (v20 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v14))
    {
      if (v17)
        return v13;
      goto LABEL_27;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v14);
  if (v17)
    return v13;
LABEL_27:
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
  if (!v19)
    WTF::fastFree((WTF *)v14, v12);
  return v13;
}

uint64_t WebCore::setJSWebCodecsAudioDecoder_ondequeue(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  uint64_t v27;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebCodecsAudioDecoder::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebCodecsAudioDecoder::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(WebCore::EventTarget **)(a2 + 24);
  v12 = *((_QWORD *)v11 - 1);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_16;
  }
  a1 = (WebCore *)MEMORY[0x19AEA534C](v12);
LABEL_16:
  ++*(_QWORD *)(v12 + 8);
  v14 = __ldxr((unsigned __int8 *)v12);
  if (v14 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v12))
      goto LABEL_21;
  }
  else
  {
    __clrex();
  }
  a1 = (WebCore *)WTF::Lock::unlockSlow((WTF::Lock *)v12);
LABEL_21:
  v15 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v15 || (v16 = *(_QWORD *)(v15 + 96)) == 0)
    v16 = WebCore::threadGlobalDataSlow(a1);
  v17 = *(_QWORD *)(v16 + 40);
  if (!v17)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v16);
    v17 = *(_QWORD *)(v16 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v17 + 592), a3, (_DWORD *)a2);
  v19 = *((_QWORD *)v11 - 1);
  if (__ldaxr((unsigned __int8 *)v19))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v19))
  {
    goto LABEL_30;
  }
  MEMORY[0x19AEA534C](v19);
LABEL_30:
  v21 = *(_QWORD *)(v19 + 8);
  v22 = v21 - 1;
  *(_QWORD *)(v19 + 8) = v21 - 1;
  if (v21 == 1)
  {
    v27 = *(_QWORD *)(v19 + 16);
    v23 = *(_QWORD *)(v19 + 24);
    *(_QWORD *)(v19 + 24) = 0;
    v24 = v27 != 0;
  }
  else
  {
    v23 = 0;
    v24 = 1;
  }
  v25 = __ldxr((unsigned __int8 *)v19);
  if (v25 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v19))
    {
      if (!v22)
        goto LABEL_38;
      goto LABEL_42;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v19);
  if (!v22)
  {
LABEL_38:
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
    if (!v24)
      WTF::fastFree((WTF *)v19, v18);
  }
LABEL_42:
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::JSWebCodecsAudioDecoderOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v6 = *(_QWORD *)(v5 - 24);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (*(_QWORD *)(v5 - 16)
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 32) + 64))(v5 - 32), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

uint64_t WebCore::JSWebCodecsAudioDecoderOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v37;

  v4 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](v5);
LABEL_5:
  ++*(_QWORD *)(v5 + 8);
  v8 = __ldxr((unsigned __int8 *)v5);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_9:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (*(_DWORD *)(a3 + 48))
  {
    v19 = *(_QWORD *)(a3 + 32);
    v18 = (uint64_t *)(a3 + 32);
    v17 = v19;
    if (v19)
    {
      v20 = *(_DWORD *)(v17 - 8);
      v21 = ~((v4 - 32) << 32) + v4 - 32;
      v22 = (v21 ^ (v21 >> 22)) + ~((v21 ^ (v21 >> 22)) << 13);
      v23 = (9 * (v22 ^ (v22 >> 8))) ^ ((9 * (v22 ^ (v22 >> 8))) >> 15);
      v24 = v20 & (((v23 + ~(v23 << 27)) >> 31) ^ ((_DWORD)v23 + ~((_DWORD)v23 << 27)));
      v25 = *(_QWORD *)(v17 + 16 * v24);
      if (v25 != v4 - 32)
      {
        v26 = 1;
        while (v25)
        {
          v24 = ((_DWORD)v24 + v26) & v20;
          v25 = *(_QWORD *)(v17 + 16 * v24);
          ++v26;
          if (v25 == v4 - 32)
            goto LABEL_35;
        }
        v24 = *(unsigned int *)(v17 - 4);
      }
LABEL_35:
      if (v24 != *(_DWORD *)(v17 - 4))
      {
        v27 = (_QWORD *)(v17 + 16 * v24);
        *v27 = -1;
        v30 = v27[1];
        v29 = v27 + 1;
        v28 = v30;
        if (v30)
        {
          *(_QWORD *)(v28 + 8) = 3;
          *v29 = 0;
        }
        ++*(_DWORD *)(*v18 - 16);
        v31 = *v18;
        if (*v18)
          v32 = *(_DWORD *)(v31 - 12) - 1;
        else
          v32 = -1;
        *(_DWORD *)(v31 - 12) = v32;
        v33 = *v18;
        if (*v18)
        {
          v34 = 6 * *(_DWORD *)(v33 - 12);
          v35 = *(_DWORD *)(v33 - 4);
          if (v34 < v35 && v35 >= 9)
            result = (uint64_t)WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v18, v35 >> 1, 0);
        }
      }
    }
  }
  else
  {
    v9 = *(_QWORD *)(v4 + 8);
    if (v9)
    {
      *(_QWORD *)(v9 + 8) = 3;
      *(_QWORD *)(v4 + 8) = 0;
    }
  }
  v10 = *(_QWORD *)(v4 - 8);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_17;
  }
  result = MEMORY[0x19AEA534C](v10);
LABEL_17:
  v12 = *(_QWORD *)(v10 + 8);
  v13 = v12 - 1;
  *(_QWORD *)(v10 + 8) = v12 - 1;
  if (v12 == 1)
  {
    v37 = *(_QWORD *)(v10 + 16);
    v14 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    v15 = v37 != 0;
  }
  else
  {
    v14 = 0;
    v15 = 1;
  }
  v16 = __ldxr((unsigned __int8 *)v10);
  if (v16 != 1)
  {
    __clrex();
LABEL_24:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v10);
    if (v13)
      return result;
    goto LABEL_25;
  }
  if (__stlxr(0, (unsigned __int8 *)v10))
    goto LABEL_24;
  if (v13)
    return result;
LABEL_25:
  if (v14)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  if (!v15)
    return WTF::fastFree((WTF *)v10, a2);
  return result;
}

unint64_t WebCore::createWrapper<WebCore::WebCodecsAudioDecoder,WebCore::WebCodecsAudioDecoder>(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSEventTarget *v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v18;
  JSC::Structure *v19;
  JSC::JSCell *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  unint64_t SlowCase;
  WTF *v41;
  char *v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *Allocator;
  uint64_t v48;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  WTF *v56;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&WebCore::JSWebCodecsAudioDecoder::s_info
        + ~((_QWORD)&WebCore::JSWebCodecsAudioDecoder::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebCodecsAudioDecoder::s_info
                                                                        + ~((_QWORD)&WebCore::JSWebCodecsAudioDecoder::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &WebCore::JSWebCodecsAudioDecoder::s_info)
    {
LABEL_6:
      v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v14)
        goto LABEL_8;
    }
    else
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v13;
        if (v12 == &WebCore::JSWebCodecsAudioDecoder::s_info)
          goto LABEL_6;
      }
    }
  }
  v15 = (WebCore::JSEventTarget *)*((_QWORD *)a1 + 7);
  v16 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v15, a1, a3);
  Structure = WebCore::JSWebCodecsAudioDecoderPrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v20 = (JSC::JSCell *)WebCore::JSWebCodecsAudioDecoderPrototype::create(v15, Structure, v18, v19);
  v21 = WebCore::JSWebCodecsAudioDecoder::createStructure((uint64_t *)v15, (uint64_t)a1, v20);
  v14 = WebCore::cacheDOMStructure((JSCell *)a1, v21, (uint64_t)&WebCore::JSWebCodecsAudioDecoder::s_info);
LABEL_8:
  v22 = *((_QWORD *)a1 + 7);
  v23 = *(_QWORD *)(v22 + 41456);
  v24 = *(_QWORD *)(v23 + 23536);
  v25 = *(_QWORD **)(v24 + 2208);
  if (v25)
    goto LABEL_31;
  v26 = *(_QWORD *)(v23 + 22648);
  if (__ldaxr((unsigned __int8 *)v26))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v26))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v26);
LABEL_13:
  v28 = *(_QWORD *)(v26 + 2824);
  v54 = *(_QWORD *)(v28 + 2208);
  if (!v54)
  {
    v29 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v56, "IsoSpace T");
    v55 = 0;
    MEMORY[0x19AEA3204](v29, &v56, v22 + 192, v22 + 1872, 32, 8, &v55);
    v31 = (uint64_t)v55;
    v55 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v56;
    v56 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 1)
        WTF::fastFree(v32, v30);
      else
        --*(_DWORD *)v32;
    }
    v54 = v29;
    v33 = *(_QWORD *)(v28 + 2208);
    *(_QWORD *)(v28 + 2208) = v29;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = *(unsigned int *)(v26 + 2844);
    if ((_DWORD)v34 == *(_DWORD *)(v26 + 2840))
    {
      v35 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v26 + 2832, v34 + 1, (unint64_t)&v54);
      v34 = *(unsigned int *)(v26 + 2844);
      *(_QWORD *)(*(_QWORD *)(v26 + 2832) + 8 * v34) = *v35;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v26 + 2832) + 8 * v34) = v29;
    }
    *(_DWORD *)(v26 + 2844) = v34 + 1;
  }
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v24 + 2208);
  *(_QWORD *)(v24 + 2208) = v25;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v26);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v26))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_31:
  SlowCase = v25[3];
  if (SlowCase < v25[4])
  {
LABEL_32:
    v25[3] = SlowCase + 32;
    goto LABEL_33;
  }
  SlowCase = v25[5];
  if ((SlowCase & 1) == 0)
  {
    v53 = *(_QWORD *)(SlowCase + 8) ^ v25[6];
    v25[4] = SlowCase + HIDWORD(v53);
    v25[5] = SlowCase + (int)v53;
    goto LABEL_32;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  v41 = *a2;
  *a2 = 0;
  v42 = (char *)v41 + 32;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v14);
  *(_QWORD *)(SlowCase + 24) = v42;
  if (*(_BYTE *)(v22 + 755))
    __dmb(0xAu);
  v43 = *((_QWORD *)a1 + 415);
  if ((byte_1EE336F20 & 1) == 0)
  {
    qword_1EE336F18 = (uint64_t)&off_1E33204E0;
    byte_1EE336F20 = 1;
  }
  if (v5)
    v44 = (uint64_t *)((char *)v5 + 40);
  else
    v44 = 0;
  if (!*(_DWORD *)(v43 + 48))
  {
    if ((SlowCase & 8) != 0)
      v45 = (SlowCase - 112) | 1;
    else
      v45 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v45 & 1) != 0)
      v46 = v45 + 47;
    else
      v46 = *(_QWORD *)v45 + 32;
    Allocator = *(_QWORD **)(v46 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v46 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE336F18;
    Allocator[2] = v43;
    v48 = *v44;
    *v44 = (uint64_t)Allocator;
    if (!v48)
      return SlowCase;
LABEL_58:
    *(_QWORD *)(v48 + 8) = 3;
    return SlowCase;
  }
  v56 = v5;
  if ((SlowCase & 8) != 0)
    v50 = (SlowCase - 112) | 1;
  else
    v50 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v50 & 1) != 0)
    v51 = v50 + 47;
  else
    v51 = *(_QWORD *)v50 + 32;
  v52 = *(_QWORD **)(v51 + 16);
  if (!v52)
    v52 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v51 + 16) = *v52;
  *v52 = SlowCase;
  v52[1] = &qword_1EE336F18;
  v52[2] = v43;
  v55 = v52;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v43 + 32), (uint64_t *)&v56, (uint64_t *)&v55);
  v48 = (uint64_t)v55;
  if (v55)
    goto LABEL_58;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::WebCodecsAudioDecoder>(int a1, JSC::VM *a2, WTF *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v10;
  void *v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  WTF *v27;
  int v28;
  uint64_t v29;
  WTF *v30;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v21 = *(_QWORD *)(v5 + 32);
    if (!v21)
      goto LABEL_5;
    v22 = *(_DWORD *)(v21 - 8);
    v23 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
    v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
    v26 = v22 & ((v25 >> 31) ^ v25);
    v27 = *(WTF **)(v21 + 16 * v26);
    if (v27 != a3)
    {
      v28 = 1;
      while (v27)
      {
        v26 = ((_DWORD)v26 + v28) & v22;
        v27 = *(WTF **)(v21 + 16 * v26);
        ++v28;
        if (v27 == a3)
          goto LABEL_38;
      }
      goto LABEL_5;
    }
LABEL_38:
    v6 = *(_QWORD *)(v21 + 16 * v26 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *((_QWORD *)a3 + 5);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    v7 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return v7;
  }
LABEL_5:
  v8 = *((_QWORD *)a3 + 3);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_9:
  ++*(_QWORD *)(v8 + 8);
  v10 = __ldxr((unsigned __int8 *)v8);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
  v30 = a3;
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 != &off_1E336C7F0)
  {
    __break(0xC471u);
    JUMPOUT(0x195044CDCLL);
  }
  v7 = WebCore::createWrapper<WebCore::WebCodecsAudioDecoder,WebCore::WebCodecsAudioDecoder>(a2, &v30, a3);
  v12 = v30;
  v30 = 0;
  if (v12)
  {
    v13 = *((_QWORD *)v12 + 3);
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v13);
LABEL_20:
    v15 = *(_QWORD *)(v13 + 8);
    v16 = v15 - 1;
    *(_QWORD *)(v13 + 8) = v15 - 1;
    if (v15 == 1)
    {
      v29 = *(_QWORD *)(v13 + 16);
      v17 = *(_QWORD *)(v13 + 24);
      *(_QWORD *)(v13 + 24) = 0;
      v18 = v29 != 0;
    }
    else
    {
      v17 = 0;
      v18 = 1;
    }
    v19 = __ldxr((unsigned __int8 *)v13);
    if (v19 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
      {
        if (v16)
          return v7;
        goto LABEL_28;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
    if (v16)
      return v7;
LABEL_28:
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
    if (!v18)
      WTF::fastFree((WTF *)v13, v11);
  }
  return v7;
}

WTF::StringImpl *WebCore::convertDictionary<WebCore::WebCodecsAudioDecoderConfig>(uint64_t a1, JSC::VM **a2, JSC::JSCell *this)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  JSC::VM *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  JSC::JSArrayBufferView *v15;
  WTF::StringImpl *v16;
  int v17;
  int v18;
  uint64_t (*v19)();
  int v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  unint64_t v23;
  char *v24;
  int v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl *v32;
  int v33;
  WTF::StringImpl *result;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v36;
  int v37;
  WTF::StringImpl *v38;
  _BYTE v39[8];
  int v40;
  char v41;
  __int128 v42;
  JSC::VM *v43;
  WTF::StringImpl *v44;
  int v45;
  char v46;
  JSC::VM *v47;
  unint64_t v48;
  WTF::StringImpl *v49;
  int v50;
  int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v43 = a2[7];
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v38 = 0;
    v39[0] = 0;
    v41 = 0;
    goto LABEL_10;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
  {
    result = (WTF::StringImpl *)JSC::throwTypeError();
    *(_DWORD *)(a1 + 48) = 1;
    return result;
  }
  v6 = (JSC::Structure *)Object;
  v38 = 0;
  v39[0] = 0;
  v41 = 0;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, v48);
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v48, v7);
    else
      *(_DWORD *)v48 -= 2;
  }
  if (*((_DWORD *)v43 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v43))
    goto LABEL_11;
  if (v8 != 10)
  {
    v48 = v8;
    v9 = a2[7];
    if ((v8 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v8 + 5) != 2)
    {
      JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v48, (JSC::JSGlobalObject *)a2);
LABEL_18:
      if (*((_DWORD *)v9 + 20))
      {
        hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v9);
        v11 = v44;
        if (hasExceptionsAfterHandlingTraps)
        {
          v37 = 1;
          v44 = 0;
          if (v11)
          {
            if (*(_DWORD *)v11 == 2)
              WTF::StringImpl::destroy(v11, v7);
            else
              *(_DWORD *)v11 -= 2;
          }
          v31 = 1;
          v30 = 1;
          goto LABEL_76;
        }
      }
      else
      {
        v11 = v44;
      }
      v37 = 0;
      v36 = 0;
      v12 = v38;
      v38 = v11;
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v7);
        else
          *(_DWORD *)v12 -= 2;
      }
      WTF::AtomStringImpl::addLiteral();
      v13 = (WTF::StringImpl *)v48;
      v15 = (JSC::JSArrayBufferView *)JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, v48);
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v14);
        else
          *(_DWORD *)v13 -= 2;
      }
      if (*((_DWORD *)v43 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v43) & 1) != 0)
        goto LABEL_68;
      if (v15 == (JSC::JSArrayBufferView *)10)
      {
LABEL_54:
        WTF::AtomStringImpl::addLiteral();
        v21 = (WTF::StringImpl *)v48;
        v23 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, v48);
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v22);
          else
            *(_DWORD *)v21 -= 2;
        }
        if (*((_DWORD *)v43 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v43) & 1) != 0)
          goto LABEL_68;
        if (v23 == 10)
        {
          v24 = "numberOfChannels";
          v25 = (int)a2;
          v26 = 17;
        }
        else
        {
          WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>((WTF::StringImpl *)a2, v23, &v48);
          if (HIDWORD(v48))
            goto LABEL_68;
          *((_QWORD *)&v42 + 1) = v48;
          WTF::AtomStringImpl::addLiteral();
          v27 = (WTF::StringImpl *)v48;
          v29 = JSC::JSObject::get(v6, (JSC::JSGlobalObject *)a2, v48);
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, v28);
            else
              *(_DWORD *)v27 -= 2;
          }
          if (*((_DWORD *)v43 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v43) & 1) != 0)
            goto LABEL_68;
          if (v29 != 10)
          {
            WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>((WTF::StringImpl *)a2, v29, &v48);
            if (!HIDWORD(v48))
            {
              v32 = v38;
              *(_QWORD *)&v42 = v48;
              v38 = 0;
              *(_QWORD *)a1 = v32;
              *(_BYTE *)(a1 + 8) = 0;
              *(_BYTE *)(a1 + 24) = 0;
              if (v41)
              {
                *(_DWORD *)(a1 + 16) = -1;
                v33 = v40;
                if (v40 != -1)
                {
                  ((void (*)(unint64_t *, uint64_t, _BYTE *))off_1E33211A8[v40])(&v48, a1 + 8, v39);
                  *(_DWORD *)(a1 + 16) = v33;
                }
                *(_BYTE *)(a1 + 24) = 1;
              }
              v31 = 0;
              v30 = 0;
              *(_OWORD *)(a1 + 32) = v42;
              goto LABEL_76;
            }
LABEL_68:
            v30 = 0;
            v31 = 1;
LABEL_76:
            *(_DWORD *)(a1 + 48) = v31;
            goto LABEL_77;
          }
          v24 = "sampleRate";
          v25 = (int)a2;
          v26 = 11;
        }
        WebCore::throwRequiredMemberTypeError(v25, (int)&v43, v24, v26, "WebCodecsAudioDecoderConfig", 28, "unsigned long", 14);
        goto LABEL_68;
      }
      v47 = a2[7];
      v16 = (WTF::StringImpl *)JSC::JSArrayBuffer::toWrapped((uint64_t)v47, (uint64_t)v15);
      if (v16)
      {
        *(_DWORD *)v16 += 2;
        v45 = 1;
        v44 = 0;
        v49 = v16;
        v50 = 1;
        v51 = 0;
        _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ArrayBufferENSC_ISH_EENSE_ISH_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSG_SK_EEEEEEDcSO_DpT0_((uint64_t)&v46);
        v17 = v51;
        if (!v51)
        {
          v18 = v50;
          LOBYTE(v44) = 0;
          v45 = -1;
          if (v50 == -1)
          {
            if (v41)
            {
              if (v40 == -1)
              {
LABEL_50:
                v20 = 1;
                v17 = v51;
LABEL_51:
                if (v17 != -1)
                  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33211C8[v17])(&v44, &v49);
                if (!v20)
                {
                  v30 = 0;
LABEL_77:
                  ((void (*)(unint64_t *, uint64_t *))off_1E3321590[v30])(&v48, &v36);
                  goto LABEL_78;
                }
                goto LABEL_54;
              }
              ((void (*)(JSC::VM **, _BYTE *))off_1E3321198[v40])(&v47, v39);
              v40 = -1;
LABEL_48:
              if (v45 != -1)
                ((void (*)(JSC::VM **, WTF::StringImpl **))off_1E3321198[v45])(&v47, &v44);
              goto LABEL_50;
            }
            v39[0] = 0;
            v40 = -1;
LABEL_47:
            v41 = 1;
            goto LABEL_48;
          }
LABEL_36:
          v19 = off_1E33211A8[v18];
          ((void (*)(JSC::VM **, WTF::StringImpl **, WTF::StringImpl **))v19)(&v47, &v44, &v49);
          v45 = v18;
          if (v41)
          {
            v47 = (JSC::VM *)v39;
            ((void (*)(JSC::VM **, _BYTE *, WTF::StringImpl **))off_1E33211B8[v18])(&v47, v39, &v44);
            goto LABEL_48;
          }
          v39[0] = 0;
          v40 = -1;
          ((void (*)(JSC::VM **, _BYTE *, WTF::StringImpl **))v19)(&v47, v39, &v44);
          v40 = v18;
          goto LABEL_47;
        }
      }
      else
      {
        JSC::JSArrayBufferView::toWrapped(v15, &v44);
        if (v44)
        {
          v18 = 0;
          v49 = v44;
          v50 = 0;
          v51 = 0;
          LOBYTE(v44) = 0;
          v45 = -1;
          goto LABEL_36;
        }
        JSC::throwTypeError();
        v17 = 1;
        v51 = 1;
      }
      v20 = 0;
      *(_DWORD *)(a1 + 48) = 1;
      goto LABEL_51;
    }
    v10 = *(WTF::StringImpl **)(v8 + 8);
    if ((v10 & 1) != 0)
    {
      v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, (JSC::JSGlobalObject *)a2);
      if (!v10)
        goto LABEL_17;
    }
    else if (!v10)
    {
LABEL_17:
      v44 = v10;
      goto LABEL_18;
    }
    *(_DWORD *)v10 += 2;
    goto LABEL_17;
  }
LABEL_10:
  WebCore::throwRequiredMemberTypeError((int)a2, (int)&v43, "codec", 6, "WebCodecsAudioDecoderConfig", 28, "DOMString", 10);
LABEL_11:
  *(_DWORD *)(a1 + 48) = 1;
LABEL_78:
  if (v41)
  {
    if (v40 != -1)
      ((void (*)(unint64_t *, _BYTE *))off_1E3321198[v40])(&v48, v39);
    v40 = -1;
  }
  result = v38;
  v38 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::convertDictionaryToJS(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSC::ArrayBuffer *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  unint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  uint64_t v26;
  uint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  unsigned __int8 *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  _BYTE v35[8];
  int v36;
  _BYTE v37[40];
  uint64_t v38;
  char v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v8 = 8 * *(unsigned __int8 *)(v7 + 14);
  v9 = JSC::allocateCell<JSC::JSFinalObject>(v6, v8 + 16);
  v10 = *(_DWORD *)(v7 + 8);
  *(_DWORD *)v9 = v7 >> 4;
  *(_DWORD *)(v9 + 4) = v10;
  *(_QWORD *)(v9 + 8) = 0;
  bzero((void *)(v9 + 16), v8);
  if (*(_BYTE *)(v6 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *a3;
  if (!*a3 || (v13 = *(_DWORD *)(v12 + 4)) == 0)
  {
    v14 = *(_QWORD *)(v11 + 41968);
    goto LABEL_9;
  }
  if (v13 == 1)
  {
    v31 = *(unsigned __int8 **)(v12 + 8);
    if ((*(_BYTE *)(v12 + 16) & 4) != 0)
    {
      v32 = *v31;
    }
    else
    {
      v33 = *(unsigned __int16 *)v31;
      if (v33 > 0xFF)
        goto LABEL_6;
      v32 = v33;
    }
    v14 = *(_QWORD *)(v11 + 8 * v32 + 42216);
    goto LABEL_9;
  }
LABEL_6:
  v14 = *(_QWORD *)(v11 + 64760);
  if (!v14 || v12 != *(_QWORD *)(v14 + 8))
    v14 = JSC::jsStringWithCacheSlowCase();
LABEL_9:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v15 = v41;
  v41 = 0;
  v42 = (uint64_t *)v9;
  v43 = 0x1000000FFFFFFFFLL;
  v44 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v15, v14, 0, (uint64_t)&v41);
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v16);
    else
      *(_DWORD *)v15 -= 2;
  }
  if (!*((_BYTE *)a3 + 24))
  {
LABEL_24:
    v22 = a3[5];
    if ((int)v22 < 0)
      v23 = COERCE__INT64((double)v22) + 0x2000000000000;
    else
      v23 = a3[5] | 0xFFFE000000000000;
    if (!*(_DWORD *)(v6 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) == 0)
    {
      WTF::AtomStringImpl::addLiteral();
      v24 = v41;
      v41 = 0;
      v42 = (uint64_t *)v9;
      v43 = 0x1000000FFFFFFFFLL;
      v44 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v24, v23, 0, (uint64_t)&v41);
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, v25);
        else
          *(_DWORD *)v24 -= 2;
      }
      v26 = a3[4];
      v27 = (v26 & 0x80000000) != 0
          ? COERCE__INT64((double)v26) + 0x2000000000000
          : a3[4] | 0xFFFE000000000000;
      if (!*(_DWORD *)(v6 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) == 0)
      {
        WTF::AtomStringImpl::addLiteral();
        v28 = v41;
        v41 = 0;
        v42 = (uint64_t *)v9;
        v43 = 0x1000000FFFFFFFFLL;
        v44 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v28, v27, 0, (uint64_t)&v41);
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v29);
          else
            *(_DWORD *)v28 -= 2;
        }
        return v9;
      }
    }
    return 0;
  }
  v35[0] = 0;
  v36 = -1;
  v18 = *((unsigned int *)a3 + 4);
  if ((_DWORD)v18 == -1)
  {
    v18 = -1;
  }
  else
  {
    ((void (*)(WTF::StringImpl **, _BYTE *, uint64_t *))off_1E3330D90[v18])(&v41, v35, a3 + 1);
    v36 = v18;
  }
  LOBYTE(v38) = 0;
  v39 = 0;
  v40 = v18;
  v41 = (WTF::StringImpl *)&v40;
  v42 = &v38;
  v43 = a1;
  v44 = a2;
  v45 = v35;
  _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_18IDLArrayBufferViewENS_14IDLArrayBufferEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6RefPtrINS8_15ArrayBufferViewENSF_12RawPtrTraitsISH_EENSF_21DefaultRefDerefTraitsISH_EEEENSG_INS8_11ArrayBufferENSI_ISN_EENSK_ISN_EEEEEEEEUlTyvE_JNSD_17integral_constantIlLl0EEENSV_IlLl1EEEEEET_SY_((uint64_t)&v41, v17, (uint64_t)v37);
  if (v39)
  {
    v19 = v38;
    if (v36 != -1)
      ((void (*)(WTF::StringImpl **, _BYTE *))off_1E3321198[v36])(&v41, v35);
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v20 = v41;
    v41 = 0;
    v42 = (uint64_t *)v9;
    v43 = 0x1000000FFFFFFFFLL;
    v44 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v20, v19, 0, (uint64_t)&v41);
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v21);
      else
        *(_DWORD *)v20 -= 2;
    }
    goto LABEL_24;
  }
  v34 = std::__throw_bad_optional_access[abi:sn180100]();
  return WebCore::convertDictionaryToJS(v34);
}

{
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSC::ArrayBuffer *v17;
  uint64_t v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  unint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  unint64_t v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  uint64_t v33;
  unint64_t v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  unint64_t v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  unsigned __int8 *v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  _BYTE v52[8];
  int v53;
  _BYTE v54[40];
  uint64_t v55;
  char v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  _BYTE *v62;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v8 = 8 * *(unsigned __int8 *)(v7 + 14);
  v9 = JSC::allocateCell<JSC::JSFinalObject>(v6, v8 + 16);
  v10 = *(_DWORD *)(v7 + 8);
  *(_DWORD *)v9 = v7 >> 4;
  *(_DWORD *)(v9 + 4) = v10;
  *(_QWORD *)(v9 + 8) = 0;
  bzero((void *)(v9 + 16), v8);
  if (*(_BYTE *)(v6 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *a3;
  if (!*a3 || (v13 = *(_DWORD *)(v12 + 4)) == 0)
  {
    v14 = *(_QWORD *)(v11 + 41968);
    goto LABEL_9;
  }
  if (v13 == 1)
  {
    v48 = *(unsigned __int8 **)(v12 + 8);
    if ((*(_BYTE *)(v12 + 16) & 4) != 0)
    {
      v49 = *v48;
    }
    else
    {
      v50 = *(unsigned __int16 *)v48;
      if (v50 > 0xFF)
        goto LABEL_6;
      v49 = v50;
    }
    v14 = *(_QWORD *)(v11 + 8 * v49 + 42216);
    goto LABEL_9;
  }
LABEL_6:
  v14 = *(_QWORD *)(v11 + 64760);
  if (!v14 || v12 != *(_QWORD *)(v14 + 8))
    v14 = JSC::jsStringWithCacheSlowCase();
LABEL_9:
  if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
    return 0;
  WTF::AtomStringImpl::addLiteral();
  v15 = v58;
  v58 = 0;
  v59 = (uint64_t *)v9;
  v60 = 0x1000000FFFFFFFFLL;
  v61 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v15, v14, 0, (uint64_t)&v58);
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v16);
    else
      *(_DWORD *)v15 -= 2;
  }
  if (*((_BYTE *)a3 + 56))
  {
    v18 = a3[6];
    if ((int)v18 < 0)
      v19 = COERCE__INT64((double)v18) + 0x2000000000000;
    else
      v19 = a3[6] | 0xFFFE000000000000;
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v20 = v58;
    v58 = 0;
    v59 = (uint64_t *)v9;
    v60 = 0x1000000FFFFFFFFLL;
    v61 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v20, v19, 0, (uint64_t)&v58);
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v21);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
  if (*((_BYTE *)a3 + 40))
  {
    v22 = a3[4];
    if ((int)v22 < 0)
      v23 = COERCE__INT64((double)v22) + 0x2000000000000;
    else
      v23 = a3[4] | 0xFFFE000000000000;
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v24 = v58;
    v58 = 0;
    v59 = (uint64_t *)v9;
    v60 = 0x1000000FFFFFFFFLL;
    v61 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v24, v23, 0, (uint64_t)&v58);
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v25);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  if (*((_BYTE *)a3 + 104))
  {
    v58 = (WTF::StringImpl *)a3[12];
    v26 = WebCore::convertDictionaryToJS(a1, a2, (unsigned __int8 *)&v58);
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v27 = v58;
    v58 = 0;
    v59 = (uint64_t *)v9;
    v60 = 0x1000000FFFFFFFFLL;
    v61 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v27, v26, 0, (uint64_t)&v58);
    if (v27)
    {
      if (*(_DWORD *)v27 == 2)
        WTF::StringImpl::destroy(v27, v28);
      else
        *(_DWORD *)v27 -= 2;
    }
  }
  if (!*((_BYTE *)a3 + 24))
  {
LABEL_45:
    if (*((_BYTE *)a3 + 88))
    {
      v33 = a3[10];
      if ((v33 & 0x80000000) != 0)
        v34 = COERCE__INT64((double)v33) + 0x2000000000000;
      else
        v34 = a3[10] | 0xFFFE000000000000;
      if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
        return 0;
      WTF::AtomStringImpl::addLiteral();
      v35 = v58;
      v58 = 0;
      v59 = (uint64_t *)v9;
      v60 = 0x1000000FFFFFFFFLL;
      v61 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v35, v34, 0, (uint64_t)&v58);
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v36);
        else
          *(_DWORD *)v35 -= 2;
      }
    }
    if (*((_BYTE *)a3 + 72))
    {
      v37 = a3[8];
      if ((v37 & 0x80000000) != 0)
        v38 = COERCE__INT64((double)v37) + 0x2000000000000;
      else
        v38 = a3[8] | 0xFFFE000000000000;
      if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
        return 0;
      WTF::AtomStringImpl::addLiteral();
      v39 = v58;
      v58 = 0;
      v59 = (uint64_t *)v9;
      v60 = 0x1000000FFFFFFFFLL;
      v61 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v39, v38, 0, (uint64_t)&v58);
      if (v39)
      {
        if (*(_DWORD *)v39 == 2)
          WTF::StringImpl::destroy(v39, v40);
        else
          *(_DWORD *)v39 -= 2;
      }
    }
    v41 = WebCore::convertEnumerationToJS<WebCore::HardwareAcceleration>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*((unsigned int *)a3 + 27));
    if (!*(_DWORD *)(v6 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) == 0)
    {
      WTF::AtomStringImpl::addLiteral();
      v42 = v58;
      v58 = 0;
      v59 = (uint64_t *)v9;
      v60 = 0x1000000FFFFFFFFLL;
      v61 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v42, v41, 0, (uint64_t)&v58);
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v43);
        else
          *(_DWORD *)v42 -= 2;
      }
      if (!*((_BYTE *)a3 + 113))
        return v9;
      v44 = *((_BYTE *)a3 + 112) ? 7 : 6;
      if (!*(_DWORD *)(v6 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) == 0)
      {
        WTF::AtomStringImpl::addLiteral();
        v45 = v58;
        v58 = 0;
        v59 = (uint64_t *)v9;
        v60 = 0x1000000FFFFFFFFLL;
        v61 = 0;
        JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v45, v44, 0, (uint64_t)&v58);
        if (v45)
        {
          if (*(_DWORD *)v45 == 2)
            WTF::StringImpl::destroy(v45, v46);
          else
            *(_DWORD *)v45 -= 2;
        }
        return v9;
      }
    }
    return 0;
  }
  v52[0] = 0;
  v53 = -1;
  v29 = *((unsigned int *)a3 + 4);
  if ((_DWORD)v29 == -1)
  {
    v29 = -1;
  }
  else
  {
    ((void (*)(WTF::StringImpl **, _BYTE *, uint64_t *))off_1E3330D90[v29])(&v58, v52, a3 + 1);
    v53 = v29;
  }
  LOBYTE(v55) = 0;
  v56 = 0;
  v57 = v29;
  v58 = (WTF::StringImpl *)&v57;
  v59 = &v55;
  v60 = a1;
  v61 = a2;
  v62 = v52;
  _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_18IDLArrayBufferViewENS_14IDLArrayBufferEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6RefPtrINS8_15ArrayBufferViewENSF_12RawPtrTraitsISH_EENSF_21DefaultRefDerefTraitsISH_EEEENSG_INS8_11ArrayBufferENSI_ISN_EENSK_ISN_EEEEEEEEUlTyvE_JNSD_17integral_constantIlLl0EEENSV_IlLl1EEEEEET_SY_((uint64_t)&v58, v17, (uint64_t)v54);
  if (v56)
  {
    v30 = v55;
    if (v53 != -1)
      ((void (*)(WTF::StringImpl **, _BYTE *))off_1E3321198[v53])(&v58, v52);
    if (*(_DWORD *)(v6 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v6) & 1) != 0)
      return 0;
    WTF::AtomStringImpl::addLiteral();
    v31 = v58;
    v58 = 0;
    v59 = (uint64_t *)v9;
    v60 = 0x1000000FFFFFFFFLL;
    v61 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v9, (JSC::VM *)v6, (unint64_t)v31, v30, 0, (uint64_t)&v58);
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v32);
      else
        *(_DWORD *)v31 -= 2;
    }
    goto LABEL_45;
  }
  v51 = std::__throw_bad_optional_access[abi:sn180100]();
  return WebCore::convertDictionaryToJS(v51);
}

uint64_t WebCore::JSWebCodecsAudioEncoder::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  WebCore::JSEventTarget::visitOutputConstraints<JSC::AbstractSlotVisitor>(a1, a2);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 48) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 48), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 56) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 56), a2);
}

uint64_t WebCore::JSWebCodecsAudioEncoder::visitOutputConstraints<JSC::SlotVisitor>(uint64_t a1, uint64_t a2)
{
  WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 48), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 56), a2);
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSWebCodecsAudioEncoder>::construct(unint64_t this, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  uint64_t v6;
  JSC::JSCell *v7;
  uint64_t v8;
  uint64_t Object;
  JSC::Structure *v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  JSCell *v13;
  int v14;
  unsigned int v16;
  WebCore::JSWebCodecsErrorCallback *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  WebCore::ScriptExecutionContext *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __int128 v32;
  WebCore::JSDOMGlobalObject *v33;
  void *v34;
  JSC::JSCell *v35;
  JSC::JSGlobalObject *v36;
  JSC::JSObject *v37;
  JSC::JSGlobalObject *v38;
  JSC::VM *v39;
  JSC::JSObject *v40;
  JSC::Structure *v41;
  JSC::VM *FunctionRealm;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char **v49;
  int v50;
  JSC::JSCell *v51;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v53;
  JSC::Structure *v54;
  JSC::JSCell *v55;
  uint64_t v56;
  unint64_t SubclassStructure;
  uint64_t (***v58)(WebCore::ContextDestructionObserver *__hidden);
  uint64_t (**v59)(WebCore::ContextDestructionObserver *__hidden);
  uint64_t (*v61)(WebCore::ContextDestructionObserver *__hidden);
  uint64_t v62;
  uint64_t (*v63)(WebCore::ContextDestructionObserver *__hidden);
  BOOL v64;
  int v65;
  JSValue v66;
  uint64_t (*v68)(WebCore::ContextDestructionObserver *__hidden);
  _QWORD *v69;
  uint64_t v70;
  uint64_t Allocator;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  JSC::VM *v75;
  JSC::VM *v76;
  uint64_t (***v77)(WebCore::ContextDestructionObserver *__hidden);
  int v78;
  __int128 v79;
  JSC::VM *v80;
  uint64_t v81;
  __int128 v82;
  int v83;

  v3 = *(JSC::VM **)(this + 56);
  v76 = v3;
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v66.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)this, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, (JSC::JSGlobalObject *)this, v66);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError((JSC *)this, &v76, (uint64_t)"AudioEncoder", 13);
  v7 = *(JSC::JSCell **)(a2 + 48);
  v80 = *(JSC::VM **)(this + 56);
  if (((unint64_t)v7 & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if (((unint64_t)v7 & 0xFFFE000000000002) != 0 || (v8 = v6, (Object = JSC::JSCell::getObject(v7)) == 0))
    {
      JSC::throwTypeError();
      goto LABEL_12;
    }
    v10 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v12 = JSC::JSObject::get(v10, (JSC::JSGlobalObject *)this, v82);
    if ((_QWORD)v82)
    {
      if (*(_DWORD *)v82 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v82, v11);
      else
        *(_DWORD *)v82 -= 2;
    }
    if (*((_DWORD *)v80 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v80) & 1) != 0)
      goto LABEL_12;
    if (v12 != 10)
    {
      v77 = *(uint64_t (****)(WebCore::ContextDestructionObserver *__hidden))(this + 56);
      if ((v12 & 0xFFFE000000000002) != 0
        || (v16 = *(unsigned __int8 *)(v12 + 5), v16 < 0x17)
        || (v16 & 0xFE) != 0x1A
        && ((*(_BYTE *)(v12 + 6) & 4) == 0
         || ((*(void (**)(__int128 *__return_ptr, unint64_t))(16
                                                                              * *(unsigned int *)(16
                                                                                                * (*(_DWORD *)v12 & 0xFFFFFFFE)
                                                                                                + 0x4C)
                                                                              + 0x38))(&v82, v12), !(_BYTE)v82)))
      {
        JSC::throwTypeError();
        v17 = 0;
        v14 = 1;
        DWORD2(v79) = 1;
        v83 = 1;
        v21 = 1;
        goto LABEL_38;
      }
      v17 = (WebCore::JSWebCodecsErrorCallback *)WTF::fastMalloc((WTF *)0x20);
      WebCore::JSWebCodecsErrorCallback::JSWebCodecsErrorCallback(v17, v12, (WebCore::JSDOMGlobalObject *)this);
      DWORD2(v79) = 0;
      *(_QWORD *)&v79 = 0;
      WTF::AtomStringImpl::addLiteral();
      v18 = (WTF::StringImpl *)v82;
      v20 = JSC::JSObject::get(v10, (JSC::JSGlobalObject *)this, v82);
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v19);
        else
          *(_DWORD *)v18 -= 2;
      }
      if (!*((_DWORD *)v80 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v80))
      {
        if (v20 != 10)
        {
          v81 = *(_QWORD *)(this + 56);
          v75 = v3;
          if ((v20 & 0xFFFE000000000002) == 0
            && (v22 = *(unsigned __int8 *)(v20 + 5), v22 >= 0x17)
            && ((v22 & 0xFE) == 0x1A
             || (*(_BYTE *)(v20 + 6) & 4) != 0
             && ((*(void (**)(__int128 *__return_ptr, uint64_t))(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)v20 & 0xFFFFFFFE)
                                                                                           + 0x4C)
                                                                         + 0x38))(&v82, v20), (_BYTE)v82)))
          {
            v23 = WTF::fastMalloc((WTF *)0x20);
            v24 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
            *(_DWORD *)(v23 + 16) = 1;
            *(_QWORD *)v23 = &off_1E33A18C0;
            *(_QWORD *)(v23 + 8) = 0;
            WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v23, v24);
            *(_QWORD *)v23 = &off_1E331BC10;
            v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            if ((this & 8) != 0)
              v26 = ((this - 112) | 1) + 47;
            else
              v26 = *(_QWORD *)(this & 0xFFFFFFFFFFFFC000) + 32;
            v27 = *(_QWORD **)(v26 + 16);
            if (!v27)
            {
              v69 = v25;
              v70 = v26;
              Allocator = JSC::WeakSet::findAllocator();
              v26 = v70;
              v27 = (_QWORD *)Allocator;
              v25 = v69;
            }
            *(_QWORD *)(v26 + 16) = *v27;
            v27[1] = 0;
            v27[2] = 0;
            *v27 = this;
            *v25 = v27;
            v25[1] = &off_1E32268A0;
            v28 = v25 + 1;
            if ((v20 & 8) != 0)
              v29 = ((v20 - 112) | 1) + 47;
            else
              v29 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFC000) + 32;
            v30 = *(_QWORD **)(v29 + 16);
            if (!v30)
            {
              v74 = v25;
              v72 = v29;
              v73 = JSC::WeakSet::findAllocator();
              v29 = v72;
              v30 = (_QWORD *)v73;
              v25 = v74;
            }
            v14 = 0;
            v31 = 0;
            *(_QWORD *)(v29 + 16) = *v30;
            *v30 = v20;
            v30[1] = v28;
            v30[2] = v23;
            v25[2] = v30;
            *(_QWORD *)(v23 + 24) = v25;
            v78 = 0;
            v77 = 0;
            *(_QWORD *)&v82 = v23;
            *((_QWORD *)&v82 + 1) = v17;
            v17 = 0;
          }
          else
          {
            JSC::throwTypeError();
            v14 = 1;
            v78 = 1;
            v31 = 1;
          }
          v83 = v14;
          ((void (*)(uint64_t *, uint64_t (****)(WebCore::ContextDestructionObserver *__hidden)))off_1E33215A0[v31])(&v81, &v77);
          v21 = 0;
          v3 = v75;
LABEL_38:
          ((void (*)(uint64_t (****)(WebCore::ContextDestructionObserver *__hidden), __int128 *))off_1E33213D0[v21])(&v77, &v79);
          if (v17)
          {
            if (*((_DWORD *)v17 + 4) == 1)
            {
              (*(void (**)(WebCore::JSWebCodecsErrorCallback *))(*(_QWORD *)v17 + 16))(v17);
              v14 = v83;
              if (!v83)
              {
LABEL_42:
                v32 = v82;
                v82 = 0uLL;
                v79 = v32;
                WebCore::WebCodecsAudioEncoder::create(v8, &v79, (uint64_t *)&v77);
                if (*((_QWORD *)&v79 + 1))
                {
                  if (*(_DWORD *)(*((_QWORD *)&v79 + 1) + 16) == 1)
                    (*(void (**)(void))(**((_QWORD **)&v79 + 1) + 16))();
                  else
                    --*(_DWORD *)(*((_QWORD *)&v79 + 1) + 16);
                }
                if ((_QWORD)v79)
                {
                  if (*(_DWORD *)(v79 + 16) == 1)
                    (*(void (**)(void))(*(_QWORD *)v79 + 16))();
                  else
                    --*(_DWORD *)(v79 + 16);
                }
                if (*v77 != &off_1E336C8E0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1950462F0);
                }
                v13 = (JSCell *)WebCore::createWrapper<WebCore::WebCodecsAudioEncoder,WebCore::WebCodecsAudioEncoder>(*(JSC::VM **)(v5 + 40), (WTF **)&v77, v33);
                v35 = *(JSC::JSCell **)(a2 + 40);
                if (((unint64_t)v35 & 0xFFFE000000000002) != 0
                  || (v36 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v35)) == 0
                  || (v38 = v36, v36 == *(JSC::JSGlobalObject **)(a2 + 24))
                  || (v39 = *(JSC::VM **)(this + 56),
                      FunctionRealm = (JSC::VM *)JSC::getFunctionRealm((JSC *)this, v36, v37),
                      *((_DWORD *)v39 + 20))
                  && (JSC::VM::hasExceptionsAfterHandlingTraps(v39) & 1) != 0)
                {
LABEL_62:
                  if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
                    v13 = 0;
                  v58 = v77;
                  v77 = 0;
                  if (!v58)
                    goto LABEL_80;
                  v59 = v58[3];
                  if (__ldaxr((unsigned __int8 *)v59))
                  {
                    __clrex();
                  }
                  else if (!__stxr(1u, (unsigned __int8 *)v59))
                  {
                    goto LABEL_68;
                  }
                  MEMORY[0x19AEA534C](v59);
LABEL_68:
                  v61 = v59[1];
                  v62 = (uint64_t)v61 - 1;
                  v59[1] = (uint64_t (*)(WebCore::ContextDestructionObserver *__hidden))((char *)v61 - 1);
                  if (v61 == (uint64_t (*)(WebCore::ContextDestructionObserver *__hidden))1)
                  {
                    v68 = v59[2];
                    v63 = v59[3];
                    v59[3] = 0;
                    v64 = v68 != 0;
                  }
                  else
                  {
                    v63 = 0;
                    v64 = 1;
                  }
                  v65 = __ldxr((unsigned __int8 *)v59);
                  if (v65 == 1)
                  {
                    if (!__stlxr(0, (unsigned __int8 *)v59))
                    {
LABEL_75:
                      if (!v62)
                      {
                        if (v63)
                          (*(void (**)(uint64_t (*)(WebCore::ContextDestructionObserver *__hidden)))(*(_QWORD *)v63 + 16))(v63);
                        if (!v64)
                          WTF::fastFree((WTF *)v59, v34);
                      }
LABEL_80:
                      v14 = v83;
                      goto LABEL_81;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow((WTF::Lock *)v59);
                  goto LABEL_75;
                }
                v43 = *((_QWORD *)FunctionRealm + 412);
                if (v43)
                {
                  v44 = *(_DWORD *)(v43 - 8);
                  v45 = ((unint64_t)&WebCore::JSWebCodecsAudioEncoder::s_info
                       + ~((_QWORD)&WebCore::JSWebCodecsAudioEncoder::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebCodecsAudioEncoder::s_info
                                                                                       + ~((_QWORD)&WebCore::JSWebCodecsAudioEncoder::s_info << 32)) >> 22);
                  v46 = 9 * ((v45 + ~(v45 << 13)) ^ ((v45 + ~(v45 << 13)) >> 8));
                  v47 = (v46 ^ (v46 >> 15)) + ~((v46 ^ (v46 >> 15)) << 27);
                  v48 = v44 & ((v47 >> 31) ^ v47);
                  v49 = *(char ***)(v43 + 16 * v48);
                  if (v49 == &WebCore::JSWebCodecsAudioEncoder::s_info)
                  {
LABEL_58:
                    v40 = *(JSC::JSObject **)(v43 + 16 * v48 + 8);
                    if (v40)
                    {
LABEL_60:
                      SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v38, v40, v41);
                      if (!*((_DWORD *)v39 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v39) & 1) == 0)
                        JSC::JSObject::setStructure(v13, v39, SubclassStructure);
                      goto LABEL_62;
                    }
                  }
                  else
                  {
                    v50 = 1;
                    while (v49)
                    {
                      v48 = ((_DWORD)v48 + v50) & v44;
                      v49 = *(char ***)(v43 + 16 * v48);
                      ++v50;
                      if (v49 == &WebCore::JSWebCodecsAudioEncoder::s_info)
                        goto LABEL_58;
                    }
                  }
                }
                v51 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v39, FunctionRealm, v40);
                Structure = WebCore::JSWebCodecsAudioEncoderPrototype::createStructure((uint64_t *)v39, (uint64_t)FunctionRealm, v51);
                *(_DWORD *)(Structure + 16) |= 0x80000u;
                v55 = (JSC::JSCell *)WebCore::JSWebCodecsAudioEncoderPrototype::create(v39, Structure, v53, v54);
                v56 = WebCore::JSWebCodecsAudioEncoder::createStructure((uint64_t *)v39, (uint64_t)FunctionRealm, v55);
                v40 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v56, (uint64_t)&WebCore::JSWebCodecsAudioEncoder::s_info);
                goto LABEL_60;
              }
LABEL_85:
              v13 = 0;
LABEL_81:
              if (v14 == -1)
                return v13;
              goto LABEL_13;
            }
            --*((_DWORD *)v17 + 4);
          }
          if (!v14)
            goto LABEL_42;
          goto LABEL_85;
        }
        WebCore::throwRequiredMemberTypeError(this, (int)&v80, "output", 7, "WebCodecsAudioEncoderInit", 26, "WebCodecsEncodedAudioChunkOutputCallback", 41);
      }
      v21 = 0;
      v14 = 1;
      v83 = 1;
      goto LABEL_38;
    }
  }
  WebCore::throwRequiredMemberTypeError(this, (int)&v80, "error", 6, "WebCodecsAudioEncoderInit", 26, "WebCodecsErrorCallback", 23);
LABEL_12:
  v13 = 0;
  v14 = 1;
  v83 = 1;
LABEL_13:
  ((void (*)(__int128 *, __int128 *))off_1E33215B0[v14])(&v79, &v82);
  return v13;
}

uint64_t WebCore::JSWebCodecsAudioEncoder::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24) - 32);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebCodecsAudioEncoder::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 48), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 56), a2);
}

uint64_t WebCore::JSWebCodecsAudioEncoder::visitChildren(WebCore::JSWebCodecsAudioEncoder *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    WebCore::JSEventTarget::visitChildren(this, a2, a3);
    (*(void (**)(_QWORD, JSC::JSCell *))(**(_QWORD **)(*((_QWORD *)this + 3) + 48) + 24))(*(_QWORD *)(*((_QWORD *)this + 3) + 48), a2);
    result = (*(uint64_t (**)(_QWORD, JSC::JSCell *))(**(_QWORD **)(*((_QWORD *)this + 3) + 56) + 24))(*(_QWORD *)(*((_QWORD *)this + 3) + 56), a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSWebCodecsAudioEncoderPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebCodecsAudioEncoderPrototype::create(WebCore::JSWebCodecsAudioEncoderPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<9u>(this, (uint64_t)&WebCore::JSWebCodecsAudioEncoder::s_info, (uint64_t)&WebCore::JSWebCodecsAudioEncoderPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWebCodecsAudioEncoder>,(WebCore::DOMConstructorID)274>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v37;
  unint64_t v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2192);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v39) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v37 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v37);
    v5[2] = SlowCase + (int)v37;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v39, &WebCore::JSDOMConstructor<WebCore::JSWebCodecsAudioEncoder>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v38 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v38);
    v10[2848] = v2 + (int)v38;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v39 = 0;
  v40 = v2;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v39);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v39);
  v14 = v39;
  v39 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v39 = 0;
  v40 = v2;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v39);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (!v18)
    goto LABEL_21;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = ((unint64_t)&WebCore::JSWebCodecsAudioEncoder::s_info
       + ~((_QWORD)&WebCore::JSWebCodecsAudioEncoder::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebCodecsAudioEncoder::s_info
                                                                       + ~((_QWORD)&WebCore::JSWebCodecsAudioEncoder::s_info << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = *(char ***)(v18 + 16 * v23);
  if (v24 != &WebCore::JSWebCodecsAudioEncoder::s_info)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v19;
      v24 = *(char ***)(v18 + 16 * v23);
      ++v25;
      if (v24 == &WebCore::JSWebCodecsAudioEncoder::s_info)
        goto LABEL_20;
    }
    goto LABEL_21;
  }
LABEL_20:
  v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
  if (!v26)
  {
LABEL_21:
    v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)a1, (JSC::VM *)a2, v16);
    Structure = WebCore::JSWebCodecsAudioEncoderPrototype::createStructure((uint64_t *)a1, a2, v27);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v31 = (JSC::JSCell *)WebCore::JSWebCodecsAudioEncoderPrototype::create((WebCore::JSWebCodecsAudioEncoderPrototype *)a1, Structure, v29, v30);
    v32 = WebCore::JSWebCodecsAudioEncoder::createStructure((uint64_t *)a1, a2, v31);
    v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSWebCodecsAudioEncoder::s_info);
  }
  v33 = *(_QWORD *)(v26 + 48);
  v39 = 0;
  v40 = v2;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v39);
  if ((*(_BYTE *)((16 * *(unsigned int *)v2) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)v2, (JSC::VM *)a1);
  WTF::AtomStringImpl::addLiteral();
  v34 = v39;
  JSC::reifyStaticProperty((JSC::VM *)a1, (uint64_t)&WebCore::JSWebCodecsAudioEncoder::s_info, (unint64_t *)&v39, (uint64_t)&WebCore::JSWebCodecsAudioEncoderConstructorTableValues, (unsigned __int8 *)v2);
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v35);
    else
      *(_DWORD *)v34 -= 2;
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2192) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebCodecsAudioEncoderConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebCodecsAudioEncoderPrototype::s_info != (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWebCodecsAudioEncoder>,(WebCore::DOMConstructorID)274>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsWebCodecsAudioEncoder_state(uint64_t a1, uint64_t a2)
{
  return WebCore::convertEnumerationToJS<WebCore::WebCodecsCodecState>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*(unsigned int *)(*(_QWORD *)(a2 + 24) + 24));
}

unint64_t WebCore::jsWebCodecsAudioEncoder_encodeQueueSize(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) | 0xFFFE000000000000;
}

uint64_t WebCore::jsWebCodecsAudioEncoder_ondequeue(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v22;

  v5 = *(WebCore **)(a2 + 24);
  v6 = *((_QWORD *)v5 - 1);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  a1 = (WebCore *)MEMORY[0x19AEA534C](v6);
LABEL_5:
  ++*(_QWORD *)(v6 + 8);
  v8 = __ldxr((unsigned __int8 *)v6);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  a1 = (WebCore *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_10:
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(a1);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  v13 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v11 + 592), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  v14 = *((_QWORD *)v5 - 1);
  if (__ldaxr((unsigned __int8 *)v14))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v14))
  {
    goto LABEL_19;
  }
  MEMORY[0x19AEA534C](v14);
LABEL_19:
  v16 = *(_QWORD *)(v14 + 8);
  v17 = v16 - 1;
  *(_QWORD *)(v14 + 8) = v16 - 1;
  if (v16 == 1)
  {
    v22 = *(_QWORD *)(v14 + 16);
    v18 = *(_QWORD *)(v14 + 24);
    *(_QWORD *)(v14 + 24) = 0;
    v19 = v22 != 0;
  }
  else
  {
    v18 = 0;
    v19 = 1;
  }
  v20 = __ldxr((unsigned __int8 *)v14);
  if (v20 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v14))
    {
      if (v17)
        return v13;
      goto LABEL_27;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v14);
  if (v17)
    return v13;
LABEL_27:
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
  if (!v19)
    WTF::fastFree((WTF *)v14, v12);
  return v13;
}

uint64_t WebCore::setJSWebCodecsAudioEncoder_ondequeue(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  uint64_t v27;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebCodecsAudioEncoder::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebCodecsAudioEncoder::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(WebCore::EventTarget **)(a2 + 24);
  v12 = *((_QWORD *)v11 - 1);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_16;
  }
  a1 = (WebCore *)MEMORY[0x19AEA534C](v12);
LABEL_16:
  ++*(_QWORD *)(v12 + 8);
  v14 = __ldxr((unsigned __int8 *)v12);
  if (v14 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v12))
      goto LABEL_21;
  }
  else
  {
    __clrex();
  }
  a1 = (WebCore *)WTF::Lock::unlockSlow((WTF::Lock *)v12);
LABEL_21:
  v15 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v15 || (v16 = *(_QWORD *)(v15 + 96)) == 0)
    v16 = WebCore::threadGlobalDataSlow(a1);
  v17 = *(_QWORD *)(v16 + 40);
  if (!v17)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v16);
    v17 = *(_QWORD *)(v16 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v17 + 592), a3, (_DWORD *)a2);
  v19 = *((_QWORD *)v11 - 1);
  if (__ldaxr((unsigned __int8 *)v19))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v19))
  {
    goto LABEL_30;
  }
  MEMORY[0x19AEA534C](v19);
LABEL_30:
  v21 = *(_QWORD *)(v19 + 8);
  v22 = v21 - 1;
  *(_QWORD *)(v19 + 8) = v21 - 1;
  if (v21 == 1)
  {
    v27 = *(_QWORD *)(v19 + 16);
    v23 = *(_QWORD *)(v19 + 24);
    *(_QWORD *)(v19 + 24) = 0;
    v24 = v27 != 0;
  }
  else
  {
    v23 = 0;
    v24 = 1;
  }
  v25 = __ldxr((unsigned __int8 *)v19);
  if (v25 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v19))
    {
      if (!v22)
        goto LABEL_38;
      goto LABEL_42;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v19);
  if (!v22)
  {
LABEL_38:
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
    if (!v24)
      WTF::fastFree((WTF *)v19, v18);
  }
LABEL_42:
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::JSWebCodecsAudioEncoderOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v6 = *(_QWORD *)(v5 - 24);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (*(_QWORD *)(v5 - 16)
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 32) + 64))(v5 - 32), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

uint64_t WebCore::JSWebCodecsAudioEncoderOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v37;

  v4 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](v5);
LABEL_5:
  ++*(_QWORD *)(v5 + 8);
  v8 = __ldxr((unsigned __int8 *)v5);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_9:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (*(_DWORD *)(a3 + 48))
  {
    v19 = *(_QWORD *)(a3 + 32);
    v18 = (uint64_t *)(a3 + 32);
    v17 = v19;
    if (v19)
    {
      v20 = *(_DWORD *)(v17 - 8);
      v21 = ~((v4 - 32) << 32) + v4 - 32;
      v22 = (v21 ^ (v21 >> 22)) + ~((v21 ^ (v21 >> 22)) << 13);
      v23 = (9 * (v22 ^ (v22 >> 8))) ^ ((9 * (v22 ^ (v22 >> 8))) >> 15);
      v24 = v20 & (((v23 + ~(v23 << 27)) >> 31) ^ ((_DWORD)v23 + ~((_DWORD)v23 << 27)));
      v25 = *(_QWORD *)(v17 + 16 * v24);
      if (v25 != v4 - 32)
      {
        v26 = 1;
        while (v25)
        {
          v24 = ((_DWORD)v24 + v26) & v20;
          v25 = *(_QWORD *)(v17 + 16 * v24);
          ++v26;
          if (v25 == v4 - 32)
            goto LABEL_35;
        }
        v24 = *(unsigned int *)(v17 - 4);
      }
LABEL_35:
      if (v24 != *(_DWORD *)(v17 - 4))
      {
        v27 = (_QWORD *)(v17 + 16 * v24);
        *v27 = -1;
        v30 = v27[1];
        v29 = v27 + 1;
        v28 = v30;
        if (v30)
        {
          *(_QWORD *)(v28 + 8) = 3;
          *v29 = 0;
        }
        ++*(_DWORD *)(*v18 - 16);
        v31 = *v18;
        if (*v18)
          v32 = *(_DWORD *)(v31 - 12) - 1;
        else
          v32 = -1;
        *(_DWORD *)(v31 - 12) = v32;
        v33 = *v18;
        if (*v18)
        {
          v34 = 6 * *(_DWORD *)(v33 - 12);
          v35 = *(_DWORD *)(v33 - 4);
          if (v34 < v35 && v35 >= 9)
            result = (uint64_t)WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v18, v35 >> 1, 0);
        }
      }
    }
  }
  else
  {
    v9 = *(_QWORD *)(v4 + 8);
    if (v9)
    {
      *(_QWORD *)(v9 + 8) = 3;
      *(_QWORD *)(v4 + 8) = 0;
    }
  }
  v10 = *(_QWORD *)(v4 - 8);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_17;
  }
  result = MEMORY[0x19AEA534C](v10);
LABEL_17:
  v12 = *(_QWORD *)(v10 + 8);
  v13 = v12 - 1;
  *(_QWORD *)(v10 + 8) = v12 - 1;
  if (v12 == 1)
  {
    v37 = *(_QWORD *)(v10 + 16);
    v14 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    v15 = v37 != 0;
  }
  else
  {
    v14 = 0;
    v15 = 1;
  }
  v16 = __ldxr((unsigned __int8 *)v10);
  if (v16 != 1)
  {
    __clrex();
LABEL_24:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v10);
    if (v13)
      return result;
    goto LABEL_25;
  }
  if (__stlxr(0, (unsigned __int8 *)v10))
    goto LABEL_24;
  if (v13)
    return result;
LABEL_25:
  if (v14)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  if (!v15)
    return WTF::fastFree((WTF *)v10, a2);
  return result;
}

unint64_t WebCore::createWrapper<WebCore::WebCodecsAudioEncoder,WebCore::WebCodecsAudioEncoder>(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSEventTarget *v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v18;
  JSC::Structure *v19;
  JSC::JSCell *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  unint64_t SlowCase;
  WTF *v41;
  char *v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *Allocator;
  uint64_t v48;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  WTF *v56;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&WebCore::JSWebCodecsAudioEncoder::s_info
        + ~((_QWORD)&WebCore::JSWebCodecsAudioEncoder::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebCodecsAudioEncoder::s_info
                                                                        + ~((_QWORD)&WebCore::JSWebCodecsAudioEncoder::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &WebCore::JSWebCodecsAudioEncoder::s_info)
    {
LABEL_6:
      v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v14)
        goto LABEL_8;
    }
    else
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v13;
        if (v12 == &WebCore::JSWebCodecsAudioEncoder::s_info)
          goto LABEL_6;
      }
    }
  }
  v15 = (WebCore::JSEventTarget *)*((_QWORD *)a1 + 7);
  v16 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v15, a1, a3);
  Structure = WebCore::JSWebCodecsAudioEncoderPrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v20 = (JSC::JSCell *)WebCore::JSWebCodecsAudioEncoderPrototype::create(v15, Structure, v18, v19);
  v21 = WebCore::JSWebCodecsAudioEncoder::createStructure((uint64_t *)v15, (uint64_t)a1, v20);
  v14 = WebCore::cacheDOMStructure((JSCell *)a1, v21, (uint64_t)&WebCore::JSWebCodecsAudioEncoder::s_info);
LABEL_8:
  v22 = *((_QWORD *)a1 + 7);
  v23 = *(_QWORD *)(v22 + 41456);
  v24 = *(_QWORD *)(v23 + 23536);
  v25 = *(_QWORD **)(v24 + 2216);
  if (v25)
    goto LABEL_31;
  v26 = *(_QWORD *)(v23 + 22648);
  if (__ldaxr((unsigned __int8 *)v26))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v26))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v26);
LABEL_13:
  v28 = *(_QWORD *)(v26 + 2824);
  v54 = *(_QWORD *)(v28 + 2216);
  if (!v54)
  {
    v29 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v56, "IsoSpace T");
    v55 = 0;
    MEMORY[0x19AEA3204](v29, &v56, v22 + 192, v22 + 1872, 32, 8, &v55);
    v31 = (uint64_t)v55;
    v55 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v56;
    v56 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 1)
        WTF::fastFree(v32, v30);
      else
        --*(_DWORD *)v32;
    }
    v54 = v29;
    v33 = *(_QWORD *)(v28 + 2216);
    *(_QWORD *)(v28 + 2216) = v29;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = *(unsigned int *)(v26 + 2844);
    if ((_DWORD)v34 == *(_DWORD *)(v26 + 2840))
    {
      v35 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v26 + 2832, v34 + 1, (unint64_t)&v54);
      v34 = *(unsigned int *)(v26 + 2844);
      *(_QWORD *)(*(_QWORD *)(v26 + 2832) + 8 * v34) = *v35;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v26 + 2832) + 8 * v34) = v29;
    }
    *(_DWORD *)(v26 + 2844) = v34 + 1;
  }
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v24 + 2216);
  *(_QWORD *)(v24 + 2216) = v25;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v26);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v26))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_31:
  SlowCase = v25[3];
  if (SlowCase < v25[4])
  {
LABEL_32:
    v25[3] = SlowCase + 32;
    goto LABEL_33;
  }
  SlowCase = v25[5];
  if ((SlowCase & 1) == 0)
  {
    v53 = *(_QWORD *)(SlowCase + 8) ^ v25[6];
    v25[4] = SlowCase + HIDWORD(v53);
    v25[5] = SlowCase + (int)v53;
    goto LABEL_32;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  v41 = *a2;
  *a2 = 0;
  v42 = (char *)v41 + 32;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v14);
  *(_QWORD *)(SlowCase + 24) = v42;
  if (*(_BYTE *)(v22 + 755))
    __dmb(0xAu);
  v43 = *((_QWORD *)a1 + 415);
  if ((byte_1EE336F30 & 1) == 0)
  {
    qword_1EE336F28 = (uint64_t)&off_1E3320510;
    byte_1EE336F30 = 1;
  }
  if (v5)
    v44 = (uint64_t *)((char *)v5 + 40);
  else
    v44 = 0;
  if (!*(_DWORD *)(v43 + 48))
  {
    if ((SlowCase & 8) != 0)
      v45 = (SlowCase - 112) | 1;
    else
      v45 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v45 & 1) != 0)
      v46 = v45 + 47;
    else
      v46 = *(_QWORD *)v45 + 32;
    Allocator = *(_QWORD **)(v46 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v46 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE336F28;
    Allocator[2] = v43;
    v48 = *v44;
    *v44 = (uint64_t)Allocator;
    if (!v48)
      return SlowCase;
LABEL_58:
    *(_QWORD *)(v48 + 8) = 3;
    return SlowCase;
  }
  v56 = v5;
  if ((SlowCase & 8) != 0)
    v50 = (SlowCase - 112) | 1;
  else
    v50 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v50 & 1) != 0)
    v51 = v50 + 47;
  else
    v51 = *(_QWORD *)v50 + 32;
  v52 = *(_QWORD **)(v51 + 16);
  if (!v52)
    v52 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v51 + 16) = *v52;
  *v52 = SlowCase;
  v52[1] = &qword_1EE336F28;
  v52[2] = v43;
  v55 = v52;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v43 + 32), (uint64_t *)&v56, (uint64_t *)&v55);
  v48 = (uint64_t)v55;
  if (v55)
    goto LABEL_58;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::WebCodecsAudioEncoder>(int a1, JSC::VM *a2, WTF *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v10;
  void *v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  WTF *v27;
  int v28;
  uint64_t v29;
  WTF *v30;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v21 = *(_QWORD *)(v5 + 32);
    if (!v21)
      goto LABEL_5;
    v22 = *(_DWORD *)(v21 - 8);
    v23 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
    v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
    v26 = v22 & ((v25 >> 31) ^ v25);
    v27 = *(WTF **)(v21 + 16 * v26);
    if (v27 != a3)
    {
      v28 = 1;
      while (v27)
      {
        v26 = ((_DWORD)v26 + v28) & v22;
        v27 = *(WTF **)(v21 + 16 * v26);
        ++v28;
        if (v27 == a3)
          goto LABEL_38;
      }
      goto LABEL_5;
    }
LABEL_38:
    v6 = *(_QWORD *)(v21 + 16 * v26 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *((_QWORD *)a3 + 5);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    v7 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return v7;
  }
LABEL_5:
  v8 = *((_QWORD *)a3 + 3);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_9:
  ++*(_QWORD *)(v8 + 8);
  v10 = __ldxr((unsigned __int8 *)v8);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
  v30 = a3;
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 != &off_1E336C8E0)
  {
    __break(0xC471u);
    JUMPOUT(0x195047C28);
  }
  v7 = WebCore::createWrapper<WebCore::WebCodecsAudioEncoder,WebCore::WebCodecsAudioEncoder>(a2, &v30, a3);
  v12 = v30;
  v30 = 0;
  if (v12)
  {
    v13 = *((_QWORD *)v12 + 3);
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v13);
LABEL_20:
    v15 = *(_QWORD *)(v13 + 8);
    v16 = v15 - 1;
    *(_QWORD *)(v13 + 8) = v15 - 1;
    if (v15 == 1)
    {
      v29 = *(_QWORD *)(v13 + 16);
      v17 = *(_QWORD *)(v13 + 24);
      *(_QWORD *)(v13 + 24) = 0;
      v18 = v29 != 0;
    }
    else
    {
      v17 = 0;
      v18 = 1;
    }
    v19 = __ldxr((unsigned __int8 *)v13);
    if (v19 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
      {
        if (v16)
          return v7;
        goto LABEL_28;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
    if (v16)
      return v7;
LABEL_28:
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
    if (!v18)
      WTF::fastFree((WTF *)v13, v11);
  }
  return v7;
}

uint64_t WebCore::convertDictionary<WebCore::WebCodecsAudioEncoderConfig>(uint64_t a1, JSC::JSGlobalObject *a2, JSC::JSCell *this)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  JSC::JSCell *v8;
  char v9;
  char v10;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unsigned __int8 v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  uint64_t v19;
  JSC::VM *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  JSC::VM *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  JSC::JSCell *v29;
  unsigned __int8 v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  char *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  JSC::JSCell *v40;
  char v41;
  char v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  WTF::StringImpl *v49;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v51;
  char v52;
  char v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  unsigned __int8 v57;
  unint64_t v58;
  char v59;
  _BYTE v60[48];
  int v61;
  uint64_t v62;
  int v63;
  int v64;
  __int16 v65;
  _BYTE v66[7];
  __int128 v67;
  _OWORD v68[2];
  _BYTE v69[7];
  JSC::VM *v70;
  WTF::StringImpl *v71;

  v70 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_33:
    result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)&v70, "codec", 6, "WebCodecsAudioEncoderConfig", 28, "DOMString", 10);
    goto LABEL_34;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0)
    goto LABEL_92;
  Object = JSC::JSCell::getObject(this);
  if (!Object)
    goto LABEL_92;
  v6 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v8 = (JSC::JSCell *)JSC::JSObject::get(v6, a2, *(unint64_t *)v60);
  if (*(_QWORD *)v60)
  {
    if (**(_DWORD **)v60 == 2)
      WTF::StringImpl::destroy(*(WTF::StringImpl **)v60, v7);
    else
      **(_DWORD **)v60 -= 2;
  }
  if (*((_DWORD *)v70 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v70);
    if ((_DWORD)result)
      goto LABEL_34;
  }
  if (v8 == (JSC::JSCell *)10)
  {
    v9 = 0;
    v10 = 0;
  }
  else
  {
    result = WebCore::convertDictionary<WebCore::AacEncoderConfig>(v8, (unint64_t)a2, (uint64_t)v60);
    if (*(_DWORD *)&v60[4])
      goto LABEL_34;
    v9 = v60[0];
    v10 = 1;
  }
  WTF::AtomStringImpl::addLiteral();
  v12 = *(WTF::StringImpl **)v60;
  v14 = JSC::JSObject::get(v6, a2, *(unint64_t *)v60);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v13);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (*((_DWORD *)v70 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v70);
    if ((_DWORD)result)
      goto LABEL_34;
  }
  if (v14 == 10)
  {
    v59 = 0;
    v15 = 0;
    v58 = 0;
    goto LABEL_20;
  }
  result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(a2, v14, (uint64_t)v60);
  if (*(_DWORD *)&v60[8])
  {
LABEL_34:
    *(_DWORD *)(a1 + 136) = 1;
    return result;
  }
  v15 = v60[0];
  v58 = *(_QWORD *)v60 & 0xFFFFFFFFFFFFFF00;
  v59 = 1;
LABEL_20:
  WTF::AtomStringImpl::addLiteral();
  v16 = *(WTF::StringImpl **)v60;
  v18 = JSC::JSObject::get(v6, a2, *(unint64_t *)v60);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v17);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (*((_DWORD *)v70 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v70);
    if ((_DWORD)result)
      goto LABEL_34;
  }
  if (v18 == 10)
  {
    LODWORD(v19) = 1;
    goto LABEL_28;
  }
  *(_QWORD *)v60 = *((_QWORD *)a2 + 7);
  v20 = *(JSC::VM **)v60;
  v19 = WebCore::parseEnumeration<WebCore::BitrateMode>(a2, v18);
  if (*((_DWORD *)v20 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v20);
    if ((result & 1) != 0)
      goto LABEL_34;
  }
  if ((v19 & 0xFF00000000) == 0)
  {
LABEL_92:
    result = JSC::throwTypeError();
    goto LABEL_34;
  }
LABEL_28:
  WTF::AtomStringImpl::addLiteral();
  v21 = *(WTF::StringImpl **)v60;
  v23 = JSC::JSObject::get(v6, a2, *(unint64_t *)v60);
  if (v21)
  {
    if (*(_DWORD *)v21 == 2)
      WTF::StringImpl::destroy(v21, v22);
    else
      *(_DWORD *)v21 -= 2;
  }
  if (*((_DWORD *)v70 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v70);
    if ((_DWORD)result)
      goto LABEL_34;
  }
  if (v23 == 10)
    goto LABEL_33;
  *(_QWORD *)v60 = v23;
  v24 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if ((v23 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v23 + 5) == 2)
  {
    v25 = *(WTF::StringImpl **)(v23 + 8);
    if ((v25 & 1) != 0)
    {
      v25 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v23, a2);
      if (!v25)
        goto LABEL_40;
    }
    else if (!v25)
    {
LABEL_40:
      v71 = v25;
      goto LABEL_41;
    }
    *(_DWORD *)v25 += 2;
    goto LABEL_40;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v60, a2);
LABEL_41:
  if (*((_DWORD *)v24 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v24);
    v26 = v71;
    if (hasExceptionsAfterHandlingTraps)
    {
      v46 = 1;
      v63 = 1;
      v71 = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 2)
          WTF::StringImpl::destroy(v26, v51);
        else
          *(_DWORD *)v26 -= 2;
      }
      v26 = 0;
      *(_DWORD *)(a1 + 136) = 1;
      goto LABEL_76;
    }
  }
  else
  {
    v26 = v71;
  }
  v63 = 0;
  v62 = 0;
  WTF::AtomStringImpl::addLiteral();
  v27 = *(WTF::StringImpl **)v60;
  v29 = (JSC::JSCell *)JSC::JSObject::get(v6, a2, *(unint64_t *)v60);
  if (v27)
  {
    if (*(_DWORD *)v27 == 2)
      WTF::StringImpl::destroy(v27, v28);
    else
      *(_DWORD *)v27 -= 2;
  }
  if (*((_DWORD *)v70 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v70))
    goto LABEL_73;
  v57 = v15;
  if (v29 == (JSC::JSCell *)10)
  {
    v56 = 0;
    v30 = 0;
    v55 = 0;
  }
  else
  {
    WebCore::convertDictionary<WebCore::FlacEncoderConfig>(v29, (unint64_t)a2, (uint64_t)v60);
    if (*(_DWORD *)&v60[16])
      goto LABEL_73;
    v30 = v60[0];
    v54 = *(_QWORD *)&v60[8];
    v55 = *(_QWORD *)v60 & 0xFFFFFFFFFFFFFF00;
    v56 = 1;
  }
  WTF::AtomStringImpl::addLiteral();
  v31 = *(WTF::StringImpl **)v60;
  v33 = JSC::JSObject::get(v6, a2, *(unint64_t *)v60);
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v32);
    else
      *(_DWORD *)v31 -= 2;
  }
  if (*((_DWORD *)v70 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v70))
    goto LABEL_73;
  if (v33 == 10)
  {
    v34 = "numberOfChannels";
    v35 = (int)a2;
    v36 = 17;
LABEL_72:
    WebCore::throwRequiredMemberTypeError(v35, (int)&v70, v34, v36, "WebCodecsAudioEncoderConfig", 28, "unsigned long", 14);
    goto LABEL_73;
  }
  v53 = v10;
  WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(a2, v33, v60);
  v37 = *(_QWORD *)v60;
  if (HIDWORD(*(_QWORD *)v60))
    goto LABEL_73;
  WTF::AtomStringImpl::addLiteral();
  v38 = *(WTF::StringImpl **)v60;
  v40 = (JSC::JSCell *)JSC::JSObject::get(v6, a2, *(unint64_t *)v60);
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v39);
    else
      *(_DWORD *)v38 -= 2;
  }
  if (*((_DWORD *)v70 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v70))
    goto LABEL_73;
  v52 = v9;
  if (v40 == (JSC::JSCell *)10)
  {
    v41 = 0;
    v42 = 0;
    goto LABEL_66;
  }
  WebCore::convertDictionary<WebCore::OpusEncoderConfig>(v40, (unint64_t)a2, (uint64_t)v60);
  if (v61)
  {
LABEL_73:
    v46 = 0;
    *(_DWORD *)(a1 + 136) = 1;
    goto LABEL_76;
  }
  v41 = v60[0];
  v67 = *(_OWORD *)&v60[1];
  v68[0] = *(_OWORD *)&v60[17];
  *(_OWORD *)((char *)v68 + 15) = *(_OWORD *)&v60[32];
  v42 = 1;
LABEL_66:
  WTF::AtomStringImpl::addLiteral();
  v43 = *(WTF::StringImpl **)v60;
  v45 = JSC::JSObject::get(v6, a2, *(unint64_t *)v60);
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v44);
    else
      *(_DWORD *)v43 -= 2;
  }
  if (*((_DWORD *)v70 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v70))
    goto LABEL_73;
  if (v45 == 10)
  {
    v34 = "sampleRate";
    v35 = (int)a2;
    v36 = 11;
    goto LABEL_72;
  }
  WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(a2, v45, v60);
  v47 = *(_QWORD *)v60;
  if (HIDWORD(*(_QWORD *)v60))
    goto LABEL_73;
  v46 = 0;
  v48 = v68[0];
  *(_OWORD *)(a1 + 49) = v67;
  *(_QWORD *)a1 = v26;
  *(_QWORD *)(a1 + 8) = v47;
  *(_QWORD *)(a1 + 16) = v37;
  *(_QWORD *)(a1 + 24) = v58 | v57;
  *(_BYTE *)(a1 + 32) = v59;
  *(_DWORD *)(a1 + 33) = *(_DWORD *)v69;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)&v69[3];
  *(_DWORD *)(a1 + 40) = v19;
  *(_BYTE *)(a1 + 48) = v41;
  *(_OWORD *)(a1 + 65) = v48;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)((char *)v68 + 15);
  *(_BYTE *)(a1 + 96) = v42;
  *(_DWORD *)(a1 + 100) = *(_DWORD *)&v66[3];
  *(_DWORD *)(a1 + 97) = *(_DWORD *)v66;
  *(_BYTE *)(a1 + 104) = v52;
  *(_BYTE *)(a1 + 105) = v53;
  *(_WORD *)(a1 + 110) = v65;
  *(_DWORD *)(a1 + 106) = v64;
  *(_QWORD *)(a1 + 112) = v55 | v30;
  *(_QWORD *)(a1 + 120) = v54;
  *(_BYTE *)(a1 + 128) = v56;
  *(_DWORD *)(a1 + 136) = 0;
  v26 = 0;
LABEL_76:
  result = ((uint64_t (*)(_BYTE *, uint64_t *))off_1E3321590[v46])(v60, &v62);
  if (v26)
  {
    if (*(_DWORD *)v26 == 2)
      return WTF::StringImpl::destroy(v26, v49);
    else
      *(_DWORD *)v26 -= 2;
  }
  return result;
}

uint64_t WebCore::convertEnumerationToJS<WebCore::WebCodecsCodecState>(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)(a1 + 41968);
  if ((byte_1EE336EC4 & 1) == 0)
  {
    dword_1ECE7A510 += 2;
    byte_1EE336EC4 = 1;
    qword_1EE337170 = (uint64_t)&dword_1ECE7A510;
    dword_1ECE7A530 += 2;
    qword_1EE337178 = (uint64_t)&dword_1ECE7A530;
    dword_1ECE7A550 += 2;
    qword_1EE337180 = (uint64_t)&dword_1ECE7A550;
  }
  v3 = *(_QWORD *)&_MergedGlobals_1290[8 * (int)a2 + 688];
  if (!v3)
    return *v2;
  v4 = *(_DWORD *)v3;
  v5 = *(_DWORD *)(v3 + 4);
  *(_DWORD *)v3 += 2;
  if (v5)
  {
    if (v5 != 1)
    {
LABEL_6:
      v6 = *(_QWORD *)(a1 + 64760);
      if (!v6 || v3 != *(_QWORD *)(v6 + 8))
      {
        v6 = JSC::jsStringWithCacheSlowCase();
        v4 = *(_DWORD *)v3 - 2;
      }
      goto LABEL_9;
    }
    v8 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v9 = *v8;
    }
    else
    {
      v10 = *(unsigned __int16 *)v8;
      if (v10 > 0xFF)
        goto LABEL_6;
      v9 = v10;
    }
    v6 = *(_QWORD *)(a1 + 8 * v9 + 42216);
  }
  else
  {
    v6 = *v2;
  }
LABEL_9:
  if (v4)
    *(_DWORD *)v3 = v4;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v3, a2);
  return v6;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSWebCodecsEncodedAudioChunk>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::JSGlobalObject *v2;
  JSC::VM *v3;
  uint64_t v4;
  uint64_t v5;
  JSC::JSCell *v6;
  uint64_t Object;
  JSC::Structure *v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  int v11;
  int v12;
  WTF *v13;
  WTF *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  WTF *v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  void *v27;
  JSCell *v28;
  JSC::JSCell *v29;
  JSC::JSGlobalObject *v30;
  JSC::JSObject *v31;
  JSC::JSGlobalObject *v32;
  JSC::VM *v33;
  JSC::Structure *v34;
  uint64_t FunctionRealm;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char **v42;
  int v43;
  JSC::JSObject *v44;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v46;
  JSC::Structure *v47;
  JSC::JSCell *v48;
  uint64_t v49;
  unint64_t SubclassStructure;
  WTF *v51;
  int v53;
  uint64_t v54;
  JSC::JSGlobalObject *v55;
  uint64_t (*v56)();
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  unint64_t v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  unint64_t v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  int v68;
  const char *v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  char **v76;
  unsigned int v77;
  int v78;
  JSValue v79;
  WTF *v80;
  JSC::VM *v82;
  JSC *v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE v86[25];
  char v87[8];
  int v88;
  int v89;
  uint64_t v90;
  int v91;
  _BYTE v92[25];
  uint64_t v93;
  int v94;
  JSC::VM *v95;
  uint64_t *v96;
  WTF *v97;
  uint64_t v98;
  unsigned int v99;
  int v100;
  uint64_t v101;

  v2 = a1;
  v101 = *MEMORY[0x1E0C80C00];
  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v79.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, v2, v79);
  }
  v4 = a2;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(JSC::JSCell **)(a2 + 48);
  v95 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v85 = v5;
  if (((unint64_t)v6 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v92[0] = 0;
    *(_QWORD *)&v92[8] = 0;
    v92[16] = 0;
    v92[24] = 0;
    v93 = 0;
    v94 = 0;
LABEL_11:
    WebCore::throwRequiredMemberTypeError((int)v2, (int)&v95, "data", 5, "WebCodecsEncodedAudioChunkInit", 31, "(ArrayBufferView or ArrayBuffer)", 33);
    v89 = 1;
    goto LABEL_12;
  }
  if (((unint64_t)v6 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v6)) == 0)
  {
    JSC::throwTypeError();
    v28 = 0;
    v11 = 1;
    v89 = 1;
    goto LABEL_45;
  }
  v8 = (JSC::Structure *)Object;
  v84 = v4;
  v92[0] = 0;
  *(_QWORD *)&v92[8] = 0;
  v92[16] = 0;
  v92[24] = 0;
  v93 = 0;
  v94 = 0;
  WTF::AtomStringImpl::addLiteral();
  v10 = JSC::JSObject::get(v8, v2, *(unint64_t *)v86);
  if (*(_QWORD *)v86)
  {
    if (**(_DWORD **)v86 == 2)
      WTF::StringImpl::destroy(*(WTF::StringImpl **)v86, v9);
    else
      **(_DWORD **)v86 -= 2;
  }
  if (*((_DWORD *)v95 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v95))
  {
    v89 = 1;
    goto LABEL_12;
  }
  if (v10 == 10)
    goto LABEL_11;
  WebCore::convert<WebCore::IDLAllowSharedAdaptor<WebCore::IDLUnion<WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer>>>(v10, (uint64_t)v2, (uint64_t)&v97);
  v53 = v100;
  if (!v100)
  {
    LOBYTE(v90) = 0;
    v91 = -1;
    v54 = v99;
    if (v99 == -1)
    {
      v86[0] = 0;
      *(_DWORD *)&v86[8] = -1;
      if (v94 == -1)
        goto LABEL_54;
      ((void (*)(uint64_t **, uint64_t *))off_1E3321198[v94])(&v96, &v93);
      v94 = -1;
    }
    else
    {
      v55 = v2;
      v56 = off_1E33211A8[v99];
      ((void (*)(_BYTE *, uint64_t *, uint64_t *))v56)(v86, &v90, &v98);
      v91 = v54;
      v86[0] = 0;
      *(_DWORD *)&v86[8] = -1;
      ((void (*)(uint64_t **, _BYTE *, uint64_t *))v56)(&v96, v86, &v90);
      v2 = v55;
      *(_DWORD *)&v86[8] = v54;
      v96 = &v93;
      ((void (*)(uint64_t **, uint64_t *, _BYTE *))off_1E33211B8[v54])(&v96, &v93, v86);
    }
    if (*(_DWORD *)&v86[8] != -1)
      ((void (*)(uint64_t **, _BYTE *))off_1E3321198[*(unsigned int *)&v86[8]])(&v96, v86);
LABEL_54:
    *(_DWORD *)&v86[8] = -1;
    if (v91 != -1)
      ((void (*)(uint64_t **, uint64_t *))off_1E3321198[v91])(&v96, &v90);
    WTF::AtomStringImpl::addLiteral();
    v57 = *(WTF::StringImpl **)v86;
    v59 = JSC::JSObject::get(v8, v2, *(unint64_t *)v86);
    if (v57)
    {
      if (*(_DWORD *)v57 == 2)
        WTF::StringImpl::destroy(v57, v58);
      else
        *(_DWORD *)v57 -= 2;
    }
    if (*((_DWORD *)v95 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v95))
      goto LABEL_76;
    if (v59 != 10)
    {
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(v2, v59, (uint64_t)&v90);
      if (v91)
        goto LABEL_76;
      *(_QWORD *)&v92[16] = v90;
      v92[24] = 1;
    }
    WTF::AtomStringImpl::addLiteral();
    v60 = *(WTF::StringImpl **)v86;
    v62 = JSC::JSObject::get(v8, v2, *(unint64_t *)v86);
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
        WTF::StringImpl::destroy(v60, v61);
      else
        *(_DWORD *)v60 -= 2;
    }
    if (*((_DWORD *)v95 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v95))
      goto LABEL_76;
    if (v62 == 10)
    {
LABEL_70:
      WTF::AtomStringImpl::addLiteral();
      v63 = *(WTF::StringImpl **)v86;
      v65 = JSC::JSObject::get(v8, v2, *(unint64_t *)v86);
      if (v63)
      {
        if (*(_DWORD *)v63 == 2)
          WTF::StringImpl::destroy(v63, v64);
        else
          *(_DWORD *)v63 -= 2;
      }
      if (*((_DWORD *)v95 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v95))
        goto LABEL_76;
      if (v65 == 10)
      {
        WebCore::throwRequiredMemberTypeError((int)v2, (int)&v95, "type", 5, "WebCodecsEncodedAudioChunkInit", 31, "WebCodecsEncodedAudioChunkType", 31);
        goto LABEL_76;
      }
      v66 = (uint64_t *)*((_QWORD *)v2 + 7);
      v96 = v66;
      *(_QWORD *)v86 = v65;
      if ((v65 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v65 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v86, v2);
        v67 = v90;
LABEL_83:
        v4 = v84;
        if (!v67)
        {
          v77 = 0;
LABEL_102:
          if (!*((_DWORD *)v66 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v66) & 1) == 0)
          {
            if (v77 > 0xFF)
            {
              v92[0] = v77 != 0;
              *(_OWORD *)&v86[9] = *(_OWORD *)&v92[9];
              *(_OWORD *)v86 = *(_OWORD *)v92;
              v87[0] = 0;
              v88 = -1;
              v78 = v94;
              if (v94 != -1)
              {
                ((void (*)(uint64_t *, char *, uint64_t *))off_1E33211A8[v94])(&v90, v87, &v93);
                v88 = v78;
              }
              v89 = 0;
              goto LABEL_107;
            }
            JSC::throwTypeError();
          }
          v89 = 1;
LABEL_107:
          v53 = v100;
          goto LABEL_108;
        }
        v68 = *(_DWORD *)(v67 + 16);
        v69 = *(const char **)(v67 + 8);
        v70 = *(_DWORD *)(v67 + 4);
        if (v69 == "delta" || v70 != 5)
        {
          if (v69 != "delta" || v70 != 5)
          {
            if (v69 == "key" || v70 != 3)
            {
              if (v70 != 3 || v69 != "key")
              {
                v71 = 0;
                v72 = 0;
                v4 = v84;
LABEL_100:
                v77 = v72 | (v71 << 8);
                v90 = 0;
                if (*(_DWORD *)v67 == 2)
                  WTF::StringImpl::destroy((WTF::StringImpl *)v67, v64);
                else
                  *(_DWORD *)v67 -= 2;
                goto LABEL_102;
              }
              v76 = &off_1E331BEB0;
              v4 = v84;
            }
            else
            {
              if ((v68 & 4) != 0)
              {
                if (*v69 != 107 || *(_WORD *)(v69 + 1) != 31077)
                  goto LABEL_90;
              }
              else if (*(_WORD *)v69 != 107 || *(_DWORD *)(v69 + 2) != 7929957)
              {
                goto LABEL_90;
              }
              v76 = &off_1E331BEB0;
            }
LABEL_99:
            v72 = *((unsigned __int8 *)v76 + 16);
            v71 = 1;
            goto LABEL_100;
          }
        }
        else if ((v68 & 4) != 0)
        {
          if (*v69 != 100 || *(_WORD *)(v69 + 1) != 27749 || *(_WORD *)(v69 + 3) != 24948)
          {
LABEL_90:
            v71 = 0;
            v72 = 0;
            goto LABEL_100;
          }
        }
        else if (*(_WORD *)v69 != 100 || *(_QWORD *)(v69 + 2) != 0x610074006C0065)
        {
          goto LABEL_90;
        }
        v76 = &WebCore::parseEnumerationFromString<WebCore::WebCodecsEncodedVideoChunkType>(WTF::String const&)::mappings;
        goto LABEL_99;
      }
      v67 = *(_QWORD *)(v65 + 8);
      if ((v67 & 1) != 0)
      {
        v67 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v65, v2);
        if (!v67)
          goto LABEL_82;
      }
      else if (!v67)
      {
LABEL_82:
        v90 = v67;
        goto LABEL_83;
      }
      *(_DWORD *)v67 += 2;
      goto LABEL_82;
    }
    WebCore::convertToIntegerEnforceRange<WebCore::IDLLongLong>(v2, v62, (uint64_t)&v90);
    if (!v91)
    {
      *(_QWORD *)&v92[8] = v90;
      goto LABEL_70;
    }
LABEL_76:
    v89 = 1;
    v4 = v84;
    goto LABEL_107;
  }
  v89 = 1;
LABEL_108:
  if (v53 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E33211C8[v53])(&v90, &v98);
LABEL_12:
  if (v94 != -1)
    ((void (*)(WTF **, uint64_t *))off_1E3321198[v94])(&v97, &v93);
  v11 = v89;
  if (v89)
    goto LABEL_155;
  *(_OWORD *)v92 = *(_OWORD *)v86;
  *(_OWORD *)&v92[9] = *(_OWORD *)&v86[9];
  LOBYTE(v93) = 0;
  v94 = -1;
  v12 = v88;
  if (v88 != -1)
  {
    ((void (*)(WTF **, uint64_t *, char *))off_1E33211A8[v88])(&v97, &v93, v87);
    v94 = v12;
  }
  v82 = v3;
  v83 = v2;
  v13 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v13 = 1;
  if (v94 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_155:
    v28 = 0;
    goto LABEL_44;
  }
  v14 = v13;
  v15 = v92[0];
  v16 = *(_QWORD *)&v92[8];
  v17 = *(_QWORD *)&v92[16];
  v18 = v92[24];
  v97 = (WTF *)&v90;
  v19 = ((uint64_t (*)(WTF **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZNK7WebCore12BufferSource4spanEvEUlRT_E_EEJRKNS0_6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSE_INSF_11ArrayBufferENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOS8_DpOT0____fmatrix_3[v94])(&v97, &v93);
  v21 = v20;
  if (v20)
  {
    if ((unint64_t)v20 >> 32)
    {
      __break(0xC471u);
      JUMPOUT(0x19504993CLL);
    }
    v22 = v19;
    v23 = WTF::fastMalloc(v20);
    v24 = v23;
    v25 = 0;
    do
    {
      *((_BYTE *)v25 + v23) = *((_BYTE *)v25 + v22);
      v25 = (WTF *)((char *)v25 + 1);
    }
    while (v21 != v25);
  }
  else
  {
    v24 = 0;
  }
  v26 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v26 = 1;
  *(_BYTE *)(v26 + 8) = v15;
  *(_QWORD *)(v26 + 16) = v16;
  *(_QWORD *)(v26 + 24) = v17;
  *(_BYTE *)(v26 + 32) = v18;
  *(_QWORD *)(v26 + 40) = v24;
  *(_DWORD *)(v26 + 48) = (_DWORD)v21;
  *(_DWORD *)(v26 + 52) = (_DWORD)v21;
  *((_QWORD *)v14 + 1) = v26;
  v97 = v14;
  if (v94 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E3321198[v94])(&v90, &v93);
  v28 = (JSCell *)WebCore::createWrapper<WebCore::WebCodecsEncodedAudioChunk,WebCore::WebCodecsEncodedAudioChunk>(*(_QWORD *)(v85 + 40), &v97);
  v29 = *(JSC::JSCell **)(v4 + 40);
  if (((unint64_t)v29 & 0xFFFE000000000002) != 0)
    goto LABEL_39;
  v30 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v29);
  if (!v30)
    goto LABEL_39;
  v32 = v30;
  if (v30 == *(JSC::JSGlobalObject **)(v4 + 24))
    goto LABEL_39;
  v33 = (JSC::VM *)*((_QWORD *)v83 + 7);
  FunctionRealm = JSC::getFunctionRealm(v83, v30, v31);
  if (*((_DWORD *)v33 + 20))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps(v33) & 1) != 0)
      goto LABEL_39;
  }
  v36 = *(_QWORD *)(FunctionRealm + 3296);
  if (!v36)
    goto LABEL_36;
  v37 = *(_DWORD *)(v36 - 8);
  v38 = ((unint64_t)&WebCore::JSWebCodecsEncodedAudioChunk::s_info
       + ~((_QWORD)&WebCore::JSWebCodecsEncodedAudioChunk::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebCodecsEncodedAudioChunk::s_info
                                                                            + ~((_QWORD)&WebCore::JSWebCodecsEncodedAudioChunk::s_info << 32)) >> 22);
  v39 = 9 * ((v38 + ~(v38 << 13)) ^ ((v38 + ~(v38 << 13)) >> 8));
  v40 = (v39 ^ (v39 >> 15)) + ~((v39 ^ (v39 >> 15)) << 27);
  v41 = v37 & ((v40 >> 31) ^ v40);
  v42 = *(char ***)(v36 + 16 * v41);
  if (v42 != &WebCore::JSWebCodecsEncodedAudioChunk::s_info)
  {
    v43 = 1;
    while (v42)
    {
      v41 = ((_DWORD)v41 + v43) & v37;
      v42 = *(char ***)(v36 + 16 * v41);
      ++v43;
      if (v42 == &WebCore::JSWebCodecsEncodedAudioChunk::s_info)
        goto LABEL_35;
    }
    goto LABEL_36;
  }
LABEL_35:
  v44 = *(JSC::JSObject **)(v36 + 16 * v41 + 8);
  if (!v44)
  {
LABEL_36:
    Structure = WebCore::JSWebCodecsEncodedAudioChunkPrototype::createStructure((uint64_t *)v33, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v48 = (JSC::JSCell *)WebCore::JSWebCodecsEncodedAudioChunkPrototype::create(v33, Structure, v46, v47);
    v49 = WebCore::JSWebCodecsEncodedAudioChunk::createStructure((uint64_t *)v33, FunctionRealm, v48);
    v44 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v49, (uint64_t)&WebCore::JSWebCodecsEncodedAudioChunk::s_info);
  }
  SubclassStructure = JSC::InternalFunction::createSubclassStructure(v83, v32, v44, v34);
  if (!*((_DWORD *)v33 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v33) & 1) == 0)
    JSC::JSObject::setStructure(v28, v33, SubclassStructure);
LABEL_39:
  if (*((_DWORD *)v82 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v82) & 1) != 0)
    v28 = 0;
  v51 = v97;
  v97 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 1)
    {
      v73 = *((_QWORD *)v51 + 1);
      *((_QWORD *)v51 + 1) = 0;
      if (v73)
      {
        do
        {
          v74 = __ldaxr((unsigned int *)v73);
          v75 = v74 - 1;
        }
        while (__stlxr(v75, (unsigned int *)v73));
        if (!v75)
        {
          atomic_store(1u, (unsigned int *)v73);
          v80 = *(WTF **)(v73 + 40);
          if (v80)
          {
            *(_QWORD *)(v73 + 40) = 0;
            *(_DWORD *)(v73 + 48) = 0;
            WTF::fastFree(v80, v27);
          }
          WTF::fastFree((WTF *)v73, v27);
        }
      }
      WTF::fastFree(v51, v27);
    }
    else
    {
      --*(_DWORD *)v51;
    }
  }
  v11 = v89;
LABEL_44:
  if (v11 != -1)
LABEL_45:
    ((void (*)(_BYTE *, _BYTE *))off_1E3321760[v11])(v92, v86);
  return v28;
}

_QWORD *WebCore::JSWebCodecsEncodedAudioChunk::destroy(WebCore::JSWebCodecsEncodedAudioChunk *this, JSC::JSCell *a2)
{
  _QWORD *result;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  _QWORD *v8;
  WTF *v9;

  result = (_QWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      v4 = result[1];
      result[1] = 0;
      if (v4)
      {
        do
        {
          v5 = __ldaxr((unsigned int *)v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, (unsigned int *)v4));
        if (!v6)
        {
          v8 = result;
          v9 = (WTF *)v4;
          atomic_store(1u, (unsigned int *)v4);
          v7 = *(WTF **)(v4 + 40);
          if (v7)
          {
            *(_QWORD *)(v4 + 40) = 0;
            *(_DWORD *)(v4 + 48) = 0;
            WTF::fastFree(v7, a2);
          }
          WTF::fastFree(v9, a2);
          result = v8;
        }
      }
      return (_QWORD *)WTF::fastFree((WTF *)result, a2);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::JSWebCodecsEncodedAudioChunk::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebCodecsEncodedAudioChunkPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebCodecsEncodedAudioChunkPrototype::create(WebCore::JSWebCodecsEncodedAudioChunkPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSWebCodecsEncodedAudioChunk::s_info, &WebCore::JSWebCodecsEncodedAudioChunkPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWebCodecsEncodedAudioChunk>,(WebCore::DOMConstructorID)275>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2200);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSWebCodecsEncodedAudioChunk>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000001, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSWebCodecsEncodedAudioChunk::s_info
         + ~((_QWORD)&WebCore::JSWebCodecsEncodedAudioChunk::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebCodecsEncodedAudioChunk::s_info
                                                                              + ~((_QWORD)&WebCore::JSWebCodecsEncodedAudioChunk::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSWebCodecsEncodedAudioChunk::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSWebCodecsEncodedAudioChunk::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSWebCodecsEncodedAudioChunkPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebCodecsEncodedAudioChunkPrototype::create((WebCore::JSWebCodecsEncodedAudioChunkPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSWebCodecsEncodedAudioChunk::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebCodecsEncodedAudioChunk::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2200) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebCodecsEncodedAudioChunkConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebCodecsEncodedAudioChunkPrototype::s_info != (char **)(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                            + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWebCodecsEncodedAudioChunk>,(WebCore::DOMConstructorID)275>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsWebCodecsEncodedAudioChunk_type(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 8);
  if ((byte_1EE336EC5 & 1) == 0)
  {
    dword_1ECE7A570 += 2;
    byte_1EE336EC5 = 1;
    qword_1EE337138 = (uint64_t)&dword_1ECE7A570;
    dword_1ECE7A590 += 2;
    qword_1EE337140 = (uint64_t)&dword_1ECE7A590;
  }
  v5 = *(_QWORD *)&_MergedGlobals_1290[8 * v4 + 632];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

unint64_t WebCore::jsWebCodecsEncodedAudioChunk_timestamp(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 16);
  v3 = v2 == (int)v2;
  v4 = COERCE__INT64((double)v2) + 0x2000000000000;
  if (v3)
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 16) | 0xFFFE000000000000;
  else
    return v4;
}

unint64_t WebCore::jsWebCodecsEncodedAudioChunk_duration(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  double v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  if (!*(_BYTE *)(v2 + 32))
    return 2;
  v3 = *(_QWORD *)(v2 + 24);
  if (HIDWORD(v3))
  {
    v5 = (double)v3;
  }
  else
  {
    if ((v3 & 0x80000000) == 0)
      return v3 | 0xFFFE000000000000;
    v5 = (double)v3;
  }
  return *(_QWORD *)&v5 + 0x2000000000000;
}

unint64_t WebCore::jsWebCodecsEncodedAudioChunk_byteLength(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 52);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::JSWebCodecsEncodedAudioChunkOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSWebCodecsEncodedAudioChunkOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  WTF *v27;
  WTF *v28;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = *((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      do
      {
        v25 = __ldaxr((unsigned int *)v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, (unsigned int *)v24));
      if (!v26)
      {
        atomic_store(1u, (unsigned int *)v24);
        v28 = (WTF *)v24;
        v27 = *(WTF **)(v24 + 40);
        if (v27)
        {
          *(_QWORD *)(v24 + 40) = 0;
          *(_DWORD *)(v24 + 48) = 0;
          WTF::fastFree(v27, a2);
        }
        WTF::fastFree(v28, a2);
      }
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::createWrapper<WebCore::WebCodecsEncodedAudioChunk,WebCore::WebCodecsEncodedAudioChunk>(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  int v35;
  unint64_t SlowCase;
  WTF *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *Allocator;
  unint64_t v43;
  _QWORD *v44;
  WTF *v45;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSWebCodecsEncodedAudioChunk::s_info
        + ~((_QWORD)&WebCore::JSWebCodecsEncodedAudioChunk::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebCodecsEncodedAudioChunk::s_info
                                                                             + ~((_QWORD)&WebCore::JSWebCodecsEncodedAudioChunk::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSWebCodecsEncodedAudioChunk::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSWebCodecsEncodedAudioChunk::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSWebCodecsEncodedAudioChunkPrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSWebCodecsEncodedAudioChunkPrototype::create((WebCore::JSWebCodecsEncodedAudioChunkPrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSWebCodecsEncodedAudioChunk::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSWebCodecsEncodedAudioChunk::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 2224);
  if (v23)
    goto LABEL_28;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  if (!*(_QWORD *)(v26 + 2224))
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v45, "IsoSpace T");
    v44 = 0;
    MEMORY[0x19AEA3204](v27, &v45, v20 + 192, v20 + 1872, 32, 8, &v44);
    v29 = (uint64_t)v44;
    v44 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v45;
    v45 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v31 = *(_QWORD *)(v26 + 2224);
    *(_QWORD *)(v26 + 2224) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v32 = *(_QWORD *)(v22 + 2224);
  *(_QWORD *)(v22 + 2224) = v23;
  if (v32)
  {
    v33 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v33, v34);
  }
  v35 = __ldxr((unsigned __int8 *)v24);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_28:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_29:
    v23[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v43);
    v23[5] = SlowCase + (int)v43;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v37 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v37;
  if (*(_BYTE *)(v20 + 755))
    __dmb(0xAu);
  v38 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE336F40 & 1) == 0)
  {
    qword_1EE336F38 = (uint64_t)&off_1E3320540;
    byte_1EE336F40 = 1;
  }
  v45 = v4;
  if ((SlowCase & 8) != 0)
    v39 = (SlowCase - 112) | 1;
  else
    v39 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v39 & 1) != 0)
    v40 = v39 + 47;
  else
    v40 = *(_QWORD *)v39 + 32;
  Allocator = *(_QWORD **)(v40 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v40 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336F38;
  Allocator[2] = v38;
  v44 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v38 + 32), (uint64_t *)&v45, (uint64_t *)&v44);
  if (v44)
    v44[1] = 3;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::WebCodecsEncodedAudioChunk>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WTF *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  WTF *v14;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  WTF *v19;
  WTF *v20;
  WTF *v21;
  WTF *v22;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(WTF **)(v3 + 16 * v8);
    if (v9 == a3)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11)
            return v12;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(WTF **)(v3 + 16 * v8);
        ++v10;
        if (v9 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v22 = a3;
  v12 = WebCore::createWrapper<WebCore::WebCodecsEncodedAudioChunk,WebCore::WebCodecsEncodedAudioChunk>(a2, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
    {
      v16 = *((_QWORD *)v14 + 1);
      *((_QWORD *)v14 + 1) = 0;
      if (v16)
      {
        do
        {
          v17 = __ldaxr((unsigned int *)v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, (unsigned int *)v16));
        if (!v18)
        {
          v20 = v14;
          v21 = (WTF *)v16;
          atomic_store(1u, (unsigned int *)v16);
          v19 = *(WTF **)(v16 + 40);
          if (v19)
          {
            *(_QWORD *)(v16 + 40) = 0;
            *(_DWORD *)(v16 + 48) = 0;
            WTF::fastFree(v19, v13);
          }
          WTF::fastFree(v21, v13);
          v14 = v20;
        }
      }
      WTF::fastFree(v14, v13);
    }
    else
    {
      --*(_DWORD *)v14;
    }
  }
  return v12;
}

void WebCore::JSWebCodecsEncodedAudioChunkOutputCallback::~JSWebCodecsEncodedAudioChunkOutputCallback(WebCore::JSWebCodecsEncodedAudioChunkOutputCallback *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::JSAbortAlgorithm::~JSAbortAlgorithm(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::JSWebCodecsEncodedAudioChunkOutputCallback::handleEvent(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  JSC::Structure *v24;
  uint64_t v25;
  uint64_t *v26;
  JSValue v28;
  _QWORD *v29;
  char v30[8];
  uint64_t v31;
  WTF *v32;
  _OWORD v33[4];
  uint64_t v34;
  _BYTE v35[8];
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  __int128 v41;
  char v42;

  if (!WebCore::ActiveDOMCallback::canInvokeCallback((WebCore::ActiveDOMCallback *)a1, a2))
    return 2;
  ++*(_DWORD *)(a1 + 16);
  v6 = **(_QWORD **)(a1 + 24);
  if (!v6 || (*(_BYTE *)(v6 + 8) & 3) != 0)
    v7 = 0;
  else
    v7 = *(_QWORD *)v6;
  MEMORY[0x19AEA3294](v35, *(_QWORD *)(v7 + 56));
  v30[0] = 0;
  v32 = (WTF *)((char *)v33 + 8);
  memset(v33, 0, sizeof(v33));
  v34 = 0;
  *((_QWORD *)&v33[0] + 1) = WebCore::wrap<WebCore::WebCodecsEncodedAudioChunk>(v7, v7, (WTF *)a2);
  v31 = 0x800000001;
  v8 = *(_QWORD *)(v7 + 56);
  v9 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v10 = 8 * *(unsigned __int8 *)(v9 + 14);
  v11 = JSC::allocateCell<JSC::JSFinalObject>(v8, v10 + 16);
  v12 = *(_DWORD *)(v9 + 8);
  *(_DWORD *)v11 = v9 >> 4;
  *(_DWORD *)(v11 + 4) = v12;
  *(_QWORD *)(v11 + 8) = 0;
  bzero((void *)(v11 + 16), v10);
  if (*(_BYTE *)(v8 + 755))
    __dmb(0xAu);
  if (*(_BYTE *)(a3 + 48))
  {
    v14 = *(WTF::StringImpl **)a3;
    if (*(_QWORD *)a3)
      *(_DWORD *)v14 += 2;
    v36 = v14;
    LOBYTE(v37) = 0;
    LOBYTE(v40) = 0;
    if (*(_BYTE *)(a3 + 24))
    {
      v38 = -1;
      v15 = *(unsigned int *)(a3 + 16);
      if ((_DWORD)v15 != -1)
      {
        ((void (*)(char *, unint64_t *, uint64_t))off_1E3330D90[v15])(&v42, &v37, a3 + 8);
        v38 = v15;
      }
      LOBYTE(v40) = 1;
    }
    v41 = *(_OWORD *)(a3 + 32);
    v17 = WebCore::convertDictionaryToJS(v7, v7, (uint64_t *)&v36);
    if ((_BYTE)v40)
    {
      if (v38 != -1)
        ((void (*)(char *, unint64_t *))off_1E3321198[v38])(&v42, &v37);
      v38 = -1;
    }
    v18 = v36;
    v36 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v16);
      else
        *(_DWORD *)v18 -= 2;
    }
    if (*(_DWORD *)(v8 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8) & 1) != 0)
    {
      v11 = 0;
    }
    else
    {
      WTF::AtomStringImpl::addLiteral();
      v19 = v36;
      v36 = 0;
      v37 = v11;
      v38 = -1;
      v39 = 0x1000000;
      v40 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v11, (JSC::VM *)v8, (unint64_t)v19, v17, 0, (uint64_t)&v36);
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, v13);
        else
          *(_DWORD *)v19 -= 2;
      }
    }
  }
  v20 = v31;
  if ((_DWORD)v31 == HIDWORD(v31) || v32 != (WTF *)((char *)v33 + 8) && v32)
  {
    v28.super.isa = (Class)v11;
    if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v31, v28) == 1)
      v30[0] = 1;
  }
  else
  {
    *((_QWORD *)v32 + v31) = v11;
    LODWORD(v31) = v20 + 1;
  }
  v36 = 0;
  v21 = *(uint64_t **)(a1 + 24);
  v22 = *v21;
  if (*v21
    && (*(_BYTE *)(v22 + 8) & 3) == 0
    && *(_QWORD *)v22
    && ((v23 = v21[2]) == 0 || (*(_BYTE *)(v23 + 8) & 3) != 0 ? (v24 = 0) : (v24 = *(JSC::Structure **)v23),
        WebCore::JSCallbackData::invokeCallback(*(JSC::JSGlobalObject **)v22, v24, 10, (uint64_t)v30, 0, 0, (uint64_t *)&v36), (v13 = v36) != 0))
  {
    WebCore::reportException(*(JSC::JSGlobalObject **)(16 * (***(_DWORD ***)(*(_QWORD *)(a1 + 24) + 16) & 0xFFFFFFFE) + 0x28), (uint64_t)v36, 0, 0, 0);
    v25 = 1;
  }
  else
  {
    v25 = 0;
  }
  v26 = *(uint64_t **)&v33[0];
  if (*(_QWORD *)&v33[0])
  {
    v36 = (WTF::StringImpl *)&v31;
    v29 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v33[0], (uint64_t *)&v36);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v26, v29);
  }
  if (v32 != (WTF *)((char *)v33 + 8) && v32)
    WTF::fastFree(v32, v13);
  MEMORY[0x19AEA32A0](v35);
  if (*(_DWORD *)(a1 + 16) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  else
    --*(_DWORD *)(a1 + 16);
  return v25;
}

uint64_t WebCore::JSWebCodecsEncodedAudioChunkOutputCallback::visitJSFunction(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 16);
  if (!v3 || (v3[1] & 3) != 0)
    v4 = 0;
  else
    v4 = *v3;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v4);
}

{
  return WebCore::JSCallbackData::visitJSFunction<JSC::SlotVisitor>(*(_QWORD *)(a1 + 24), a2);
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSWebCodecsEncodedVideoChunk>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  JSC::JSGlobalObject *v2;
  JSC::VM *v3;
  uint64_t v4;
  uint64_t v5;
  JSC::JSCell *v6;
  uint64_t Object;
  JSC::Structure *v8;
  WTF::StringImpl *v9;
  unint64_t v10;
  int v11;
  int v12;
  WTF *v13;
  WTF *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  WTF *v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  void *v27;
  JSCell *v28;
  JSC::JSCell *v29;
  JSC::JSGlobalObject *v30;
  JSC::JSObject *v31;
  JSC::JSGlobalObject *v32;
  JSC::VM *v33;
  JSC::Structure *v34;
  uint64_t FunctionRealm;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char **v42;
  int v43;
  JSC::JSObject *v44;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v46;
  JSC::Structure *v47;
  JSC::JSCell *v48;
  uint64_t v49;
  unint64_t SubclassStructure;
  WTF *v51;
  int v53;
  uint64_t v54;
  JSC::JSGlobalObject *v55;
  uint64_t (*v56)();
  WTF::StringImpl *v57;
  WTF::StringImpl *v58;
  unint64_t v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  unint64_t v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  int v68;
  const char *v69;
  int v70;
  int v71;
  int v72;
  uint64_t v73;
  unsigned int v74;
  unsigned int v75;
  char **v76;
  unsigned int v77;
  int v78;
  JSValue v79;
  WTF *v80;
  JSC::VM *v82;
  JSC *v83;
  uint64_t v84;
  uint64_t v85;
  _BYTE v86[25];
  char v87[8];
  int v88;
  int v89;
  uint64_t v90;
  int v91;
  _BYTE v92[25];
  uint64_t v93;
  int v94;
  JSC::VM *v95;
  uint64_t *v96;
  WTF *v97;
  uint64_t v98;
  unsigned int v99;
  int v100;
  uint64_t v101;

  v2 = a1;
  v101 = *MEMORY[0x1E0C80C00];
  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v79.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, v2, v79);
  }
  v4 = a2;
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(JSC::JSCell **)(a2 + 48);
  v95 = (JSC::VM *)*((_QWORD *)a1 + 7);
  v85 = v5;
  if (((unint64_t)v6 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v92[0] = 0;
    *(_QWORD *)&v92[8] = 0;
    v92[16] = 0;
    v92[24] = 0;
    v93 = 0;
    v94 = 0;
LABEL_11:
    WebCore::throwRequiredMemberTypeError((int)v2, (int)&v95, "data", 5, "WebCodecsEncodedVideoChunkInit", 31, "(ArrayBufferView or ArrayBuffer)", 33);
    v89 = 1;
    goto LABEL_12;
  }
  if (((unint64_t)v6 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v6)) == 0)
  {
    JSC::throwTypeError();
    v28 = 0;
    v11 = 1;
    v89 = 1;
    goto LABEL_45;
  }
  v8 = (JSC::Structure *)Object;
  v84 = v4;
  v92[0] = 0;
  *(_QWORD *)&v92[8] = 0;
  v92[16] = 0;
  v92[24] = 0;
  v93 = 0;
  v94 = 0;
  WTF::AtomStringImpl::addLiteral();
  v10 = JSC::JSObject::get(v8, v2, *(unint64_t *)v86);
  if (*(_QWORD *)v86)
  {
    if (**(_DWORD **)v86 == 2)
      WTF::StringImpl::destroy(*(WTF::StringImpl **)v86, v9);
    else
      **(_DWORD **)v86 -= 2;
  }
  if (*((_DWORD *)v95 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v95))
  {
    v89 = 1;
    goto LABEL_12;
  }
  if (v10 == 10)
    goto LABEL_11;
  WebCore::convert<WebCore::IDLAllowSharedAdaptor<WebCore::IDLUnion<WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer>>>(v10, (uint64_t)v2, (uint64_t)&v97);
  v53 = v100;
  if (!v100)
  {
    LOBYTE(v90) = 0;
    v91 = -1;
    v54 = v99;
    if (v99 == -1)
    {
      v86[0] = 0;
      *(_DWORD *)&v86[8] = -1;
      if (v94 == -1)
        goto LABEL_54;
      ((void (*)(uint64_t **, uint64_t *))off_1E3321198[v94])(&v96, &v93);
      v94 = -1;
    }
    else
    {
      v55 = v2;
      v56 = off_1E33211A8[v99];
      ((void (*)(_BYTE *, uint64_t *, uint64_t *))v56)(v86, &v90, &v98);
      v91 = v54;
      v86[0] = 0;
      *(_DWORD *)&v86[8] = -1;
      ((void (*)(uint64_t **, _BYTE *, uint64_t *))v56)(&v96, v86, &v90);
      v2 = v55;
      *(_DWORD *)&v86[8] = v54;
      v96 = &v93;
      ((void (*)(uint64_t **, uint64_t *, _BYTE *))off_1E33211B8[v54])(&v96, &v93, v86);
    }
    if (*(_DWORD *)&v86[8] != -1)
      ((void (*)(uint64_t **, _BYTE *))off_1E3321198[*(unsigned int *)&v86[8]])(&v96, v86);
LABEL_54:
    *(_DWORD *)&v86[8] = -1;
    if (v91 != -1)
      ((void (*)(uint64_t **, uint64_t *))off_1E3321198[v91])(&v96, &v90);
    WTF::AtomStringImpl::addLiteral();
    v57 = *(WTF::StringImpl **)v86;
    v59 = JSC::JSObject::get(v8, v2, *(unint64_t *)v86);
    if (v57)
    {
      if (*(_DWORD *)v57 == 2)
        WTF::StringImpl::destroy(v57, v58);
      else
        *(_DWORD *)v57 -= 2;
    }
    if (*((_DWORD *)v95 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v95))
      goto LABEL_76;
    if (v59 != 10)
    {
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(v2, v59, (uint64_t)&v90);
      if (v91)
        goto LABEL_76;
      *(_QWORD *)&v92[16] = v90;
      v92[24] = 1;
    }
    WTF::AtomStringImpl::addLiteral();
    v60 = *(WTF::StringImpl **)v86;
    v62 = JSC::JSObject::get(v8, v2, *(unint64_t *)v86);
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
        WTF::StringImpl::destroy(v60, v61);
      else
        *(_DWORD *)v60 -= 2;
    }
    if (*((_DWORD *)v95 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v95))
      goto LABEL_76;
    if (v62 == 10)
    {
LABEL_70:
      WTF::AtomStringImpl::addLiteral();
      v63 = *(WTF::StringImpl **)v86;
      v65 = JSC::JSObject::get(v8, v2, *(unint64_t *)v86);
      if (v63)
      {
        if (*(_DWORD *)v63 == 2)
          WTF::StringImpl::destroy(v63, v64);
        else
          *(_DWORD *)v63 -= 2;
      }
      if (*((_DWORD *)v95 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v95))
        goto LABEL_76;
      if (v65 == 10)
      {
        WebCore::throwRequiredMemberTypeError((int)v2, (int)&v95, "type", 5, "WebCodecsEncodedVideoChunkInit", 31, "WebCodecsEncodedVideoChunkType", 31);
        goto LABEL_76;
      }
      v66 = (uint64_t *)*((_QWORD *)v2 + 7);
      v96 = v66;
      *(_QWORD *)v86 = v65;
      if ((v65 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v65 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v86, v2);
        v67 = v90;
LABEL_83:
        v4 = v84;
        if (!v67)
        {
          v77 = 0;
LABEL_102:
          if (!*((_DWORD *)v66 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v66) & 1) == 0)
          {
            if (v77 > 0xFF)
            {
              v92[0] = v77 != 0;
              *(_OWORD *)&v86[9] = *(_OWORD *)&v92[9];
              *(_OWORD *)v86 = *(_OWORD *)v92;
              v87[0] = 0;
              v88 = -1;
              v78 = v94;
              if (v94 != -1)
              {
                ((void (*)(uint64_t *, char *, uint64_t *))off_1E33211A8[v94])(&v90, v87, &v93);
                v88 = v78;
              }
              v89 = 0;
              goto LABEL_107;
            }
            JSC::throwTypeError();
          }
          v89 = 1;
LABEL_107:
          v53 = v100;
          goto LABEL_108;
        }
        v68 = *(_DWORD *)(v67 + 16);
        v69 = *(const char **)(v67 + 8);
        v70 = *(_DWORD *)(v67 + 4);
        if (v69 == "delta" || v70 != 5)
        {
          if (v69 != "delta" || v70 != 5)
          {
            if (v69 == "key" || v70 != 3)
            {
              if (v70 != 3 || v69 != "key")
              {
                v71 = 0;
                v72 = 0;
                v4 = v84;
LABEL_100:
                v77 = v72 | (v71 << 8);
                v90 = 0;
                if (*(_DWORD *)v67 == 2)
                  WTF::StringImpl::destroy((WTF::StringImpl *)v67, v64);
                else
                  *(_DWORD *)v67 -= 2;
                goto LABEL_102;
              }
              v76 = &off_1E331BEB0;
              v4 = v84;
            }
            else
            {
              if ((v68 & 4) != 0)
              {
                if (*v69 != 107 || *(_WORD *)(v69 + 1) != 31077)
                  goto LABEL_90;
              }
              else if (*(_WORD *)v69 != 107 || *(_DWORD *)(v69 + 2) != 7929957)
              {
                goto LABEL_90;
              }
              v76 = &off_1E331BEB0;
            }
LABEL_99:
            v72 = *((unsigned __int8 *)v76 + 16);
            v71 = 1;
            goto LABEL_100;
          }
        }
        else if ((v68 & 4) != 0)
        {
          if (*v69 != 100 || *(_WORD *)(v69 + 1) != 27749 || *(_WORD *)(v69 + 3) != 24948)
          {
LABEL_90:
            v71 = 0;
            v72 = 0;
            goto LABEL_100;
          }
        }
        else if (*(_WORD *)v69 != 100 || *(_QWORD *)(v69 + 2) != 0x610074006C0065)
        {
          goto LABEL_90;
        }
        v76 = &WebCore::parseEnumerationFromString<WebCore::WebCodecsEncodedVideoChunkType>(WTF::String const&)::mappings;
        goto LABEL_99;
      }
      v67 = *(_QWORD *)(v65 + 8);
      if ((v67 & 1) != 0)
      {
        v67 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v65, v2);
        if (!v67)
          goto LABEL_82;
      }
      else if (!v67)
      {
LABEL_82:
        v90 = v67;
        goto LABEL_83;
      }
      *(_DWORD *)v67 += 2;
      goto LABEL_82;
    }
    WebCore::convertToIntegerEnforceRange<WebCore::IDLLongLong>(v2, v62, (uint64_t)&v90);
    if (!v91)
    {
      *(_QWORD *)&v92[8] = v90;
      goto LABEL_70;
    }
LABEL_76:
    v89 = 1;
    v4 = v84;
    goto LABEL_107;
  }
  v89 = 1;
LABEL_108:
  if (v53 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E33211C8[v53])(&v90, &v98);
LABEL_12:
  if (v94 != -1)
    ((void (*)(WTF **, uint64_t *))off_1E3321198[v94])(&v97, &v93);
  v11 = v89;
  if (v89)
    goto LABEL_155;
  *(_OWORD *)v92 = *(_OWORD *)v86;
  *(_OWORD *)&v92[9] = *(_OWORD *)&v86[9];
  LOBYTE(v93) = 0;
  v94 = -1;
  v12 = v88;
  if (v88 != -1)
  {
    ((void (*)(WTF **, uint64_t *, char *))off_1E33211A8[v88])(&v97, &v93, v87);
    v94 = v12;
  }
  v82 = v3;
  v83 = v2;
  v13 = (WTF *)WTF::fastMalloc((WTF *)0x10);
  *(_DWORD *)v13 = 1;
  if (v94 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_155:
    v28 = 0;
    goto LABEL_44;
  }
  v14 = v13;
  v15 = v92[0];
  v16 = *(_QWORD *)&v92[8];
  v17 = *(_QWORD *)&v92[16];
  v18 = v92[24];
  v97 = (WTF *)&v90;
  v19 = ((uint64_t (*)(WTF **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZNK7WebCore12BufferSource4spanEvEUlRT_E_EEJRKNS0_6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSE_INSF_11ArrayBufferENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOS8_DpOT0____fmatrix_3[v94])(&v97, &v93);
  v21 = v20;
  if (v20)
  {
    if ((unint64_t)v20 >> 32)
    {
      __break(0xC471u);
      JUMPOUT(0x19504BB5CLL);
    }
    v22 = v19;
    v23 = WTF::fastMalloc(v20);
    v24 = v23;
    v25 = 0;
    do
    {
      *((_BYTE *)v25 + v23) = *((_BYTE *)v25 + v22);
      v25 = (WTF *)((char *)v25 + 1);
    }
    while (v21 != v25);
  }
  else
  {
    v24 = 0;
  }
  v26 = WTF::fastMalloc((WTF *)0x38);
  *(_DWORD *)v26 = 1;
  *(_BYTE *)(v26 + 8) = v15;
  *(_QWORD *)(v26 + 16) = v16;
  *(_QWORD *)(v26 + 24) = v17;
  *(_BYTE *)(v26 + 32) = v18;
  *(_QWORD *)(v26 + 40) = v24;
  *(_DWORD *)(v26 + 48) = (_DWORD)v21;
  *(_DWORD *)(v26 + 52) = (_DWORD)v21;
  *((_QWORD *)v14 + 1) = v26;
  v97 = v14;
  if (v94 != -1)
    ((void (*)(uint64_t *, uint64_t *))off_1E3321198[v94])(&v90, &v93);
  v28 = (JSCell *)WebCore::createWrapper<WebCore::WebCodecsEncodedVideoChunk,WebCore::WebCodecsEncodedVideoChunk>(*(_QWORD *)(v85 + 40), &v97);
  v29 = *(JSC::JSCell **)(v4 + 40);
  if (((unint64_t)v29 & 0xFFFE000000000002) != 0)
    goto LABEL_39;
  v30 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v29);
  if (!v30)
    goto LABEL_39;
  v32 = v30;
  if (v30 == *(JSC::JSGlobalObject **)(v4 + 24))
    goto LABEL_39;
  v33 = (JSC::VM *)*((_QWORD *)v83 + 7);
  FunctionRealm = JSC::getFunctionRealm(v83, v30, v31);
  if (*((_DWORD *)v33 + 20))
  {
    if ((JSC::VM::hasExceptionsAfterHandlingTraps(v33) & 1) != 0)
      goto LABEL_39;
  }
  v36 = *(_QWORD *)(FunctionRealm + 3296);
  if (!v36)
    goto LABEL_36;
  v37 = *(_DWORD *)(v36 - 8);
  v38 = ((unint64_t)&WebCore::JSWebCodecsEncodedVideoChunk::s_info
       + ~((_QWORD)&WebCore::JSWebCodecsEncodedVideoChunk::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebCodecsEncodedVideoChunk::s_info
                                                                            + ~((_QWORD)&WebCore::JSWebCodecsEncodedVideoChunk::s_info << 32)) >> 22);
  v39 = 9 * ((v38 + ~(v38 << 13)) ^ ((v38 + ~(v38 << 13)) >> 8));
  v40 = (v39 ^ (v39 >> 15)) + ~((v39 ^ (v39 >> 15)) << 27);
  v41 = v37 & ((v40 >> 31) ^ v40);
  v42 = *(char ***)(v36 + 16 * v41);
  if (v42 != &WebCore::JSWebCodecsEncodedVideoChunk::s_info)
  {
    v43 = 1;
    while (v42)
    {
      v41 = ((_DWORD)v41 + v43) & v37;
      v42 = *(char ***)(v36 + 16 * v41);
      ++v43;
      if (v42 == &WebCore::JSWebCodecsEncodedVideoChunk::s_info)
        goto LABEL_35;
    }
    goto LABEL_36;
  }
LABEL_35:
  v44 = *(JSC::JSObject **)(v36 + 16 * v41 + 8);
  if (!v44)
  {
LABEL_36:
    Structure = WebCore::JSWebCodecsEncodedVideoChunkPrototype::createStructure((uint64_t *)v33, FunctionRealm, *(JSC::JSCell **)(FunctionRealm + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v48 = (JSC::JSCell *)WebCore::JSWebCodecsEncodedVideoChunkPrototype::create(v33, Structure, v46, v47);
    v49 = WebCore::JSWebCodecsEncodedVideoChunk::createStructure((uint64_t *)v33, FunctionRealm, v48);
    v44 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v49, (uint64_t)&WebCore::JSWebCodecsEncodedVideoChunk::s_info);
  }
  SubclassStructure = JSC::InternalFunction::createSubclassStructure(v83, v32, v44, v34);
  if (!*((_DWORD *)v33 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v33) & 1) == 0)
    JSC::JSObject::setStructure(v28, v33, SubclassStructure);
LABEL_39:
  if (*((_DWORD *)v82 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v82) & 1) != 0)
    v28 = 0;
  v51 = v97;
  v97 = 0;
  if (v51)
  {
    if (*(_DWORD *)v51 == 1)
    {
      v73 = *((_QWORD *)v51 + 1);
      *((_QWORD *)v51 + 1) = 0;
      if (v73)
      {
        do
        {
          v74 = __ldaxr((unsigned int *)v73);
          v75 = v74 - 1;
        }
        while (__stlxr(v75, (unsigned int *)v73));
        if (!v75)
        {
          atomic_store(1u, (unsigned int *)v73);
          v80 = *(WTF **)(v73 + 40);
          if (v80)
          {
            *(_QWORD *)(v73 + 40) = 0;
            *(_DWORD *)(v73 + 48) = 0;
            WTF::fastFree(v80, v27);
          }
          WTF::fastFree((WTF *)v73, v27);
        }
      }
      WTF::fastFree(v51, v27);
    }
    else
    {
      --*(_DWORD *)v51;
    }
  }
  v11 = v89;
LABEL_44:
  if (v11 != -1)
LABEL_45:
    ((void (*)(_BYTE *, _BYTE *))off_1E3321860[v11])(v92, v86);
  return v28;
}

_QWORD *WebCore::JSWebCodecsEncodedVideoChunk::destroy(WebCore::JSWebCodecsEncodedVideoChunk *this, JSC::JSCell *a2)
{
  _QWORD *result;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  WTF *v7;
  _QWORD *v8;
  WTF *v9;

  result = (_QWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
    {
      v4 = result[1];
      result[1] = 0;
      if (v4)
      {
        do
        {
          v5 = __ldaxr((unsigned int *)v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, (unsigned int *)v4));
        if (!v6)
        {
          v8 = result;
          v9 = (WTF *)v4;
          atomic_store(1u, (unsigned int *)v4);
          v7 = *(WTF **)(v4 + 40);
          if (v7)
          {
            *(_QWORD *)(v4 + 40) = 0;
            *(_DWORD *)(v4 + 48) = 0;
            WTF::fastFree(v7, a2);
          }
          WTF::fastFree(v9, a2);
          result = v8;
        }
      }
      return (_QWORD *)WTF::fastFree((WTF *)result, a2);
    }
    else
    {
      --*(_DWORD *)result;
    }
  }
  return result;
}

uint64_t WebCore::JSWebCodecsEncodedVideoChunk::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebCodecsEncodedVideoChunkPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebCodecsEncodedVideoChunkPrototype::create(WebCore::JSWebCodecsEncodedVideoChunkPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<6u>(this, (uint64_t)&WebCore::JSWebCodecsEncodedVideoChunk::s_info, &WebCore::JSWebCodecsEncodedVideoChunkPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWebCodecsEncodedVideoChunk>,(WebCore::DOMConstructorID)276>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2208);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSWebCodecsEncodedVideoChunk>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000001, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSWebCodecsEncodedVideoChunk::s_info
         + ~((_QWORD)&WebCore::JSWebCodecsEncodedVideoChunk::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebCodecsEncodedVideoChunk::s_info
                                                                              + ~((_QWORD)&WebCore::JSWebCodecsEncodedVideoChunk::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSWebCodecsEncodedVideoChunk::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSWebCodecsEncodedVideoChunk::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSWebCodecsEncodedVideoChunkPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebCodecsEncodedVideoChunkPrototype::create((WebCore::JSWebCodecsEncodedVideoChunkPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSWebCodecsEncodedVideoChunk::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebCodecsEncodedVideoChunk::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2208) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebCodecsEncodedVideoChunkConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebCodecsEncodedVideoChunkPrototype::s_info != (char **)(16
                                                                          * *(unsigned int *)(16
                                                                                            * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                            + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWebCodecsEncodedVideoChunk>,(WebCore::DOMConstructorID)276>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsWebCodecsEncodedVideoChunk_type(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned __int8 *v10;
  unsigned int v11;
  unsigned int v12;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 8);
  if ((byte_1EE336EC6 & 1) == 0)
  {
    dword_1ECE7A5B0 += 2;
    byte_1EE336EC6 = 1;
    qword_1EE337148 = (uint64_t)&dword_1ECE7A5B0;
    dword_1ECE7A5D0 += 2;
    qword_1EE337150 = (uint64_t)&dword_1ECE7A5D0;
  }
  v5 = *(_QWORD *)&_MergedGlobals_1290[8 * v4 + 648];
  if (!v5)
    return *v3;
  v6 = *(_DWORD *)v5;
  v7 = *(_DWORD *)(v5 + 4);
  *(_DWORD *)v5 += 2;
  if (v7)
  {
    if (v7 != 1)
    {
LABEL_6:
      v8 = *(_QWORD *)(v2 + 64760);
      if (!v8 || v5 != *(_QWORD *)(v8 + 8))
      {
        v8 = JSC::jsStringWithCacheSlowCase();
        v6 = *(_DWORD *)v5 - 2;
      }
      goto LABEL_9;
    }
    v10 = *(unsigned __int8 **)(v5 + 8);
    if ((*(_BYTE *)(v5 + 16) & 4) != 0)
    {
      v11 = *v10;
    }
    else
    {
      v12 = *(unsigned __int16 *)v10;
      if (v12 > 0xFF)
        goto LABEL_6;
      v11 = v12;
    }
    v8 = *(_QWORD *)(v2 + 8 * v11 + 42216);
  }
  else
  {
    v8 = *v3;
  }
LABEL_9:
  if (v6)
    *(_DWORD *)v5 = v6;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v5, a2);
  return v8;
}

unint64_t WebCore::jsWebCodecsEncodedVideoChunk_timestamp(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 16);
  v3 = v2 == (int)v2;
  v4 = COERCE__INT64((double)v2) + 0x2000000000000;
  if (v3)
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 16) | 0xFFFE000000000000;
  else
    return v4;
}

unint64_t WebCore::jsWebCodecsEncodedVideoChunk_duration(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  double v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
  if (!*(_BYTE *)(v2 + 32))
    return 2;
  v3 = *(_QWORD *)(v2 + 24);
  if (HIDWORD(v3))
  {
    v5 = (double)v3;
  }
  else
  {
    if ((v3 & 0x80000000) == 0)
      return v3 | 0xFFFE000000000000;
    v5 = (double)v3;
  }
  return *(_QWORD *)&v5 + 0x2000000000000;
}

unint64_t WebCore::jsWebCodecsEncodedVideoChunk_byteLength(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 52);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::JSWebCodecsEncodedVideoChunkOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSWebCodecsEncodedVideoChunkOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  WTF *v27;
  WTF *v28;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = *((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      do
      {
        v25 = __ldaxr((unsigned int *)v24);
        v26 = v25 - 1;
      }
      while (__stlxr(v26, (unsigned int *)v24));
      if (!v26)
      {
        atomic_store(1u, (unsigned int *)v24);
        v28 = (WTF *)v24;
        v27 = *(WTF **)(v24 + 40);
        if (v27)
        {
          *(_QWORD *)(v24 + 40) = 0;
          *(_DWORD *)(v24 + 48) = 0;
          WTF::fastFree(v27, a2);
        }
        WTF::fastFree(v28, a2);
      }
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::createWrapper<WebCore::WebCodecsEncodedVideoChunk,WebCore::WebCodecsEncodedVideoChunk>(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  int v35;
  unint64_t SlowCase;
  WTF *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *Allocator;
  unint64_t v43;
  _QWORD *v44;
  WTF *v45;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSWebCodecsEncodedVideoChunk::s_info
        + ~((_QWORD)&WebCore::JSWebCodecsEncodedVideoChunk::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebCodecsEncodedVideoChunk::s_info
                                                                             + ~((_QWORD)&WebCore::JSWebCodecsEncodedVideoChunk::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSWebCodecsEncodedVideoChunk::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSWebCodecsEncodedVideoChunk::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSWebCodecsEncodedVideoChunkPrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSWebCodecsEncodedVideoChunkPrototype::create((WebCore::JSWebCodecsEncodedVideoChunkPrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSWebCodecsEncodedVideoChunk::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSWebCodecsEncodedVideoChunk::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 2232);
  if (v23)
    goto LABEL_28;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  if (!*(_QWORD *)(v26 + 2232))
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v45, "IsoSpace T");
    v44 = 0;
    MEMORY[0x19AEA3204](v27, &v45, v20 + 192, v20 + 1872, 32, 8, &v44);
    v29 = (uint64_t)v44;
    v44 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v45;
    v45 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v31 = *(_QWORD *)(v26 + 2232);
    *(_QWORD *)(v26 + 2232) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v32 = *(_QWORD *)(v22 + 2232);
  *(_QWORD *)(v22 + 2232) = v23;
  if (v32)
  {
    v33 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v33, v34);
  }
  v35 = __ldxr((unsigned __int8 *)v24);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_28:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_29:
    v23[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v43);
    v23[5] = SlowCase + (int)v43;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v37 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v37;
  if (*(_BYTE *)(v20 + 755))
    __dmb(0xAu);
  v38 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE336F50 & 1) == 0)
  {
    qword_1EE336F48 = (uint64_t)&off_1E3320570;
    byte_1EE336F50 = 1;
  }
  v45 = v4;
  if ((SlowCase & 8) != 0)
    v39 = (SlowCase - 112) | 1;
  else
    v39 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v39 & 1) != 0)
    v40 = v39 + 47;
  else
    v40 = *(_QWORD *)v39 + 32;
  Allocator = *(_QWORD **)(v40 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v40 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336F48;
  Allocator[2] = v38;
  v44 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v38 + 32), (uint64_t *)&v45, (uint64_t *)&v44);
  if (v44)
    v44[1] = 3;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::WebCodecsEncodedVideoChunk>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WTF *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  WTF *v14;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  WTF *v19;
  WTF *v20;
  WTF *v21;
  WTF *v22;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(WTF **)(v3 + 16 * v8);
    if (v9 == a3)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11)
            return v12;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(WTF **)(v3 + 16 * v8);
        ++v10;
        if (v9 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v22 = a3;
  v12 = WebCore::createWrapper<WebCore::WebCodecsEncodedVideoChunk,WebCore::WebCodecsEncodedVideoChunk>(a2, &v22);
  v14 = v22;
  v22 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
    {
      v16 = *((_QWORD *)v14 + 1);
      *((_QWORD *)v14 + 1) = 0;
      if (v16)
      {
        do
        {
          v17 = __ldaxr((unsigned int *)v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, (unsigned int *)v16));
        if (!v18)
        {
          v20 = v14;
          v21 = (WTF *)v16;
          atomic_store(1u, (unsigned int *)v16);
          v19 = *(WTF **)(v16 + 40);
          if (v19)
          {
            *(_QWORD *)(v16 + 40) = 0;
            *(_DWORD *)(v16 + 48) = 0;
            WTF::fastFree(v19, v13);
          }
          WTF::fastFree(v21, v13);
          v14 = v20;
        }
      }
      WTF::fastFree(v14, v13);
    }
    else
    {
      --*(_DWORD *)v14;
    }
  }
  return v12;
}

void WebCore::JSWebCodecsEncodedVideoChunkOutputCallback::~JSWebCodecsEncodedVideoChunkOutputCallback(WebCore::JSWebCodecsEncodedVideoChunkOutputCallback *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::JSAbortAlgorithm::~JSAbortAlgorithm(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::JSWebCodecsEncodedVideoChunkOutputCallback::handleEvent(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  int v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  size_t v25;
  unint64_t v26;
  int v27;
  unint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  JSC::Structure *v36;
  uint64_t v37;
  uint64_t *v38;
  JSValue v40;
  _QWORD *v41;
  char v42[8];
  uint64_t v43;
  WTF *v44;
  _OWORD v45[4];
  uint64_t v46;
  _BYTE v47[8];
  WTF::StringImpl *v48;
  unint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int16 v58;
  _BYTE v59[9];

  if (!WebCore::ActiveDOMCallback::canInvokeCallback((WebCore::ActiveDOMCallback *)a1, a2))
    return 2;
  ++*(_DWORD *)(a1 + 16);
  v6 = **(_QWORD **)(a1 + 24);
  if (!v6 || (*(_BYTE *)(v6 + 8) & 3) != 0)
    v7 = 0;
  else
    v7 = *(_QWORD *)v6;
  MEMORY[0x19AEA3294](v47, *(_QWORD *)(v7 + 56));
  v42[0] = 0;
  v44 = (WTF *)((char *)v45 + 8);
  memset(v45, 0, sizeof(v45));
  v46 = 0;
  *((_QWORD *)&v45[0] + 1) = WebCore::wrap<WebCore::WebCodecsEncodedVideoChunk>(v7, v7, (WTF *)a2);
  v43 = 0x800000001;
  v8 = *(_QWORD *)(v7 + 56);
  v9 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v10 = 8 * *(unsigned __int8 *)(v9 + 14);
  v11 = JSC::allocateCell<JSC::JSFinalObject>(v8, v10 + 16);
  v12 = *(_DWORD *)(v9 + 8);
  *(_DWORD *)v11 = v9 >> 4;
  *(_DWORD *)(v11 + 4) = v12;
  *(_QWORD *)(v11 + 8) = 0;
  bzero((void *)(v11 + 16), v10);
  if (*(_BYTE *)(v8 + 755))
    __dmb(0xAu);
  if (*(_BYTE *)(a3 + 120))
  {
    v14 = *(WTF::StringImpl **)a3;
    if (*(_QWORD *)a3)
      *(_DWORD *)v14 += 2;
    v48 = v14;
    LOBYTE(v49) = 0;
    LOBYTE(v52) = 0;
    if (*(_BYTE *)(a3 + 24))
    {
      v50 = -1;
      v15 = *(unsigned int *)(a3 + 16);
      if ((_DWORD)v15 != -1)
      {
        ((void (*)(_BYTE *, unint64_t *, uint64_t))off_1E3330D90[v15])(v59, &v49, a3 + 8);
        v50 = v15;
      }
      LOBYTE(v52) = 1;
    }
    v16 = *(_OWORD *)(a3 + 80);
    v55 = *(_OWORD *)(a3 + 64);
    v56 = v16;
    v57 = *(_OWORD *)(a3 + 96);
    v58 = *(_WORD *)(a3 + 112);
    v17 = *(_OWORD *)(a3 + 48);
    v53 = *(_OWORD *)(a3 + 32);
    v54 = v17;
    v19 = WebCore::convertDictionaryToJS(v7, v7, (uint64_t *)&v48);
    if ((_BYTE)v52)
    {
      if (v50 != -1)
        ((void (*)(_BYTE *, unint64_t *))off_1E3321198[v50])(v59, &v49);
      v50 = -1;
    }
    v20 = v48;
    v48 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v18);
      else
        *(_DWORD *)v20 -= 2;
    }
    if (*(_DWORD *)(v8 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8) & 1) != 0)
      goto LABEL_72;
    WTF::AtomStringImpl::addLiteral();
    v21 = v48;
    v48 = 0;
    v49 = v11;
    v50 = -1;
    v51 = 0x1000000;
    v52 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v11, (JSC::VM *)v8, (unint64_t)v21, v19, 0, (uint64_t)&v48);
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v13);
      else
        *(_DWORD *)v21 -= 2;
    }
  }
  if (!*(_BYTE *)(a3 + 136))
    goto LABEL_39;
  v22 = *(_QWORD *)(a3 + 128);
  v23 = *(_QWORD *)(v7 + 56);
  v24 = JSC::StructureCache::emptyObjectStructureForPrototype();
  v25 = 8 * *(unsigned __int8 *)(v24 + 14);
  v26 = JSC::allocateCell<JSC::JSFinalObject>(v23, v25 + 16);
  v27 = *(_DWORD *)(v24 + 8);
  *(_DWORD *)v26 = v24 >> 4;
  *(_DWORD *)(v26 + 4) = v27;
  *(_QWORD *)(v26 + 8) = 0;
  bzero((void *)(v26 + 16), v25);
  if (*(_BYTE *)(v23 + 755))
    __dmb(0xAu);
  if ((v22 & 0xFF00000000) != 0)
  {
    if ((v22 & 0x80000000) != 0)
      v28 = COERCE__INT64((double)v22) + 0x2000000000000;
    else
      v28 = v22 | 0xFFFE000000000000;
    if (*(_DWORD *)(v23 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v23) & 1) != 0)
    {
      v26 = 0;
    }
    else
    {
      WTF::AtomStringImpl::addLiteral();
      v29 = v48;
      v48 = 0;
      v49 = v26;
      v50 = -1;
      v51 = 0x1000000;
      v52 = 0;
      JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v26, (JSC::VM *)v23, (unint64_t)v29, v28, 0, (uint64_t)&v48);
      if (v29)
      {
        if (*(_DWORD *)v29 == 2)
          WTF::StringImpl::destroy(v29, v30);
        else
          *(_DWORD *)v29 -= 2;
      }
    }
  }
  if (!*(_DWORD *)(v8 + 80) || (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v8) & 1) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v31 = v48;
    v48 = 0;
    v49 = v11;
    v50 = -1;
    v51 = 0x1000000;
    v52 = 0;
    JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v11, (JSC::VM *)v8, (unint64_t)v31, v26, 0, (uint64_t)&v48);
    if (v31)
    {
      if (*(_DWORD *)v31 == 2)
        WTF::StringImpl::destroy(v31, v13);
      else
        *(_DWORD *)v31 -= 2;
    }
    goto LABEL_39;
  }
LABEL_72:
  v11 = 0;
LABEL_39:
  v32 = v43;
  if ((_DWORD)v43 == HIDWORD(v43) || v44 != (WTF *)((char *)v45 + 8) && v44)
  {
    v40.super.isa = (Class)v11;
    if (JSC::MarkedVectorBase::slowAppend((JSC::MarkedVectorBase *)&v43, v40) == 1)
      v42[0] = 1;
  }
  else
  {
    *((_QWORD *)v44 + v43) = v11;
    LODWORD(v43) = v32 + 1;
  }
  v48 = 0;
  v33 = *(uint64_t **)(a1 + 24);
  v34 = *v33;
  if (*v33
    && (*(_BYTE *)(v34 + 8) & 3) == 0
    && *(_QWORD *)v34
    && ((v35 = v33[2]) == 0 || (*(_BYTE *)(v35 + 8) & 3) != 0 ? (v36 = 0) : (v36 = *(JSC::Structure **)v35),
        WebCore::JSCallbackData::invokeCallback(*(JSC::JSGlobalObject **)v34, v36, 10, (uint64_t)v42, 0, 0, (uint64_t *)&v48), (v13 = v48) != 0))
  {
    WebCore::reportException(*(JSC::JSGlobalObject **)(16 * (***(_DWORD ***)(*(_QWORD *)(a1 + 24) + 16) & 0xFFFFFFFE) + 0x28), (uint64_t)v48, 0, 0, 0);
    v37 = 1;
  }
  else
  {
    v37 = 0;
  }
  v38 = *(uint64_t **)&v45[0];
  if (*(_QWORD *)&v45[0])
  {
    v48 = (WTF::StringImpl *)&v43;
    v41 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v45[0], (uint64_t *)&v48);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v38, v41);
  }
  if (v44 != (WTF *)((char *)v45 + 8) && v44)
    WTF::fastFree(v44, v13);
  MEMORY[0x19AEA32A0](v47);
  if (*(_DWORD *)(a1 + 16) == 1)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  else
    --*(_DWORD *)(a1 + 16);
  return v37;
}

uint64_t WebCore::JSWebCodecsEncodedVideoChunkOutputCallback::visitJSFunction(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 16);
  if (!v3 || (v3[1] & 3) != 0)
    v4 = 0;
  else
    v4 = *v3;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v4);
}

{
  return WebCore::JSCallbackData::visitJSFunction<JSC::SlotVisitor>(*(_QWORD *)(a1 + 24), a2);
}

WebCore::JSWebCodecsErrorCallback *WebCore::JSWebCodecsErrorCallback::JSWebCodecsErrorCallback(WebCore::JSWebCodecsErrorCallback *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3)
{
  WebCore::ScriptExecutionContext *v6;
  _QWORD *v7;
  _QWORD *Allocator;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  v6 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(a3);
  *((_DWORD *)this + 4) = 1;
  *(_QWORD *)this = &off_1E33A18C0;
  *((_QWORD *)this + 1) = 0;
  WebCore::ContextDestructionObserver::observeContext(this, v6);
  *(_QWORD *)this = &off_1E331BED8;
  v7 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  Allocator = 0;
  if (a3)
  {
    v16 = v7;
    if ((a3 & 8) != 0)
      v12 = ((unint64_t)a3 - 112) | 1;
    else
      v12 = (unint64_t)a3 & 0xFFFFFFFFFFFFC000;
    if ((v12 & 1) != 0)
      v13 = v12 + 47;
    else
      v13 = *(_QWORD *)v12 + 32;
    Allocator = *(_QWORD **)(v13 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v13 + 16) = *Allocator;
    *Allocator = a3;
    Allocator[1] = 0;
    Allocator[2] = 0;
    v7 = v16;
  }
  *v7 = Allocator;
  v7[1] = &off_1E32268A0;
  v9 = v7 + 1;
  if (a2)
  {
    v17 = v7;
    if ((a2 & 8) != 0)
      v14 = (a2 - 112) | 1;
    else
      v14 = a2 & 0xFFFFFFFFFFFFC000;
    if ((v14 & 1) != 0)
      v15 = v14 + 47;
    else
      v15 = *(_QWORD *)v14 + 32;
    v10 = *(_QWORD **)(v15 + 16);
    if (!v10)
      v10 = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v15 + 16) = *v10;
    *v10 = a2;
    v10[1] = v9;
    v10[2] = this;
    v7 = v17;
  }
  else
  {
    v10 = 0;
  }
  v7[2] = v10;
  *((_QWORD *)this + 3) = v7;
  return this;
}

void WebCore::JSWebCodecsErrorCallback::~JSWebCodecsErrorCallback(WebCore::JSWebCodecsErrorCallback *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::JSAbortAlgorithm::~JSAbortAlgorithm(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::JSWebCodecsErrorCallback::handleEvent(uint64_t **this, WebCore::DOMException *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  JSC::Structure *v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v14;
  _BYTE v15[8];
  uint64_t v16;
  WTF *v17;
  _OWORD v18[4];
  uint64_t v19;
  _BYTE v20[8];
  uint64_t *v21;

  if (!WebCore::ActiveDOMCallback::canInvokeCallback((WebCore::ActiveDOMCallback *)this, a2))
    return 2;
  ++*((_DWORD *)this + 4);
  v4 = *this[3];
  if (!v4 || (*(_BYTE *)(v4 + 8) & 3) != 0)
    v5 = 0;
  else
    v5 = *(_QWORD *)v4;
  MEMORY[0x19AEA3294](v20, *(_QWORD *)(v5 + 56));
  v15[0] = 0;
  v17 = (WTF *)((char *)v18 + 8);
  memset(v18, 0, sizeof(v18));
  v19 = 0;
  v6 = (void *)WebCore::wrap<WebCore::DOMException>(v5, v5, a2);
  *((_QWORD *)&v18[0] + 1) = v6;
  v16 = 0x800000001;
  v21 = 0;
  v7 = this[3];
  v8 = *v7;
  if (*v7
    && (*(_BYTE *)(v8 + 8) & 3) == 0
    && *(_QWORD *)v8
    && ((v9 = v7[2]) == 0 || (*(_BYTE *)(v9 + 8) & 3) != 0 ? (v10 = 0) : (v10 = *(JSC::Structure **)v9),
        WebCore::JSCallbackData::invokeCallback(*(JSC::JSGlobalObject **)v8, v10, 10, (uint64_t)v15, 0, 0, (uint64_t *)&v21), (v6 = v21) != 0))
  {
    WebCore::reportException(*(JSC::JSGlobalObject **)(16 * (**(_DWORD **)this[3][2] & 0xFFFFFFFE) + 0x28), (uint64_t)v21, 0, 0, 0);
    v11 = 1;
  }
  else
  {
    v11 = 0;
  }
  v12 = *(uint64_t **)&v18[0];
  if (*(_QWORD *)&v18[0])
  {
    v21 = &v16;
    v14 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v18[0], (uint64_t *)&v21);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v12, v14);
  }
  if (v17 != (WTF *)((char *)v18 + 8) && v17)
    WTF::fastFree(v17, v6);
  MEMORY[0x19AEA32A0](v20);
  if (*((_DWORD *)this + 4) == 1)
    ((void (*)(uint64_t **))(*this)[2])(this);
  else
    --*((_DWORD *)this + 4);
  return v11;
}

uint64_t WebCore::JSWebCodecsErrorCallback::visitJSFunction(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 16);
  if (!v3 || (v3[1] & 3) != 0)
    v4 = 0;
  else
    v4 = *v3;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v4);
}

{
  return WebCore::JSCallbackData::visitJSFunction<JSC::SlotVisitor>(*(_QWORD *)(a1 + 24), a2);
}

uint64_t WebCore::JSWebCodecsVideoDecoder::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  WebCore::JSEventTarget::visitOutputConstraints<JSC::AbstractSlotVisitor>(a1, a2);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 48) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 48), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 56) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 56), a2);
}

uint64_t WebCore::JSWebCodecsVideoDecoder::visitOutputConstraints<JSC::SlotVisitor>(uint64_t a1, uint64_t a2)
{
  WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 48), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 56), a2);
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSWebCodecsVideoDecoder>::construct(unint64_t this, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  uint64_t v6;
  JSC::JSCell *v7;
  uint64_t v8;
  uint64_t Object;
  JSC::Structure *v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  JSCell *v13;
  int v14;
  unsigned int v16;
  WebCore::JSWebCodecsErrorCallback *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  WebCore::ScriptExecutionContext *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __int128 v32;
  WebCore::JSDOMGlobalObject *v33;
  void *v34;
  JSC::JSCell *v35;
  JSC::JSGlobalObject *v36;
  JSC::JSObject *v37;
  JSC::JSGlobalObject *v38;
  JSC::VM *v39;
  JSC::JSObject *v40;
  JSC::Structure *v41;
  JSC::VM *FunctionRealm;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char **v49;
  int v50;
  JSC::JSCell *v51;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v53;
  JSC::Structure *v54;
  JSC::JSCell *v55;
  uint64_t v56;
  unint64_t SubclassStructure;
  uint64_t (***v58)(WebCore::ContextDestructionObserver *__hidden);
  uint64_t (**v59)(WebCore::ContextDestructionObserver *__hidden);
  uint64_t (*v61)(WebCore::ContextDestructionObserver *__hidden);
  uint64_t v62;
  uint64_t (*v63)(WebCore::ContextDestructionObserver *__hidden);
  BOOL v64;
  int v65;
  JSValue v66;
  uint64_t (*v68)(WebCore::ContextDestructionObserver *__hidden);
  _QWORD *v69;
  uint64_t v70;
  uint64_t Allocator;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  JSC::VM *v75;
  JSC::VM *v76;
  uint64_t (***v77)(WebCore::ContextDestructionObserver *__hidden);
  int v78;
  __int128 v79;
  JSC::VM *v80;
  uint64_t v81;
  __int128 v82;
  int v83;

  v3 = *(JSC::VM **)(this + 56);
  v76 = v3;
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v66.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)this, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, (JSC::JSGlobalObject *)this, v66);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError((JSC *)this, &v76, (uint64_t)"VideoDecoder", 13);
  v7 = *(JSC::JSCell **)(a2 + 48);
  v80 = *(JSC::VM **)(this + 56);
  if (((unint64_t)v7 & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if (((unint64_t)v7 & 0xFFFE000000000002) != 0 || (v8 = v6, (Object = JSC::JSCell::getObject(v7)) == 0))
    {
      JSC::throwTypeError();
      goto LABEL_12;
    }
    v10 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v12 = JSC::JSObject::get(v10, (JSC::JSGlobalObject *)this, v82);
    if ((_QWORD)v82)
    {
      if (*(_DWORD *)v82 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v82, v11);
      else
        *(_DWORD *)v82 -= 2;
    }
    if (*((_DWORD *)v80 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v80) & 1) != 0)
      goto LABEL_12;
    if (v12 != 10)
    {
      v77 = *(uint64_t (****)(WebCore::ContextDestructionObserver *__hidden))(this + 56);
      if ((v12 & 0xFFFE000000000002) != 0
        || (v16 = *(unsigned __int8 *)(v12 + 5), v16 < 0x17)
        || (v16 & 0xFE) != 0x1A
        && ((*(_BYTE *)(v12 + 6) & 4) == 0
         || ((*(void (**)(__int128 *__return_ptr, unint64_t))(16
                                                                              * *(unsigned int *)(16
                                                                                                * (*(_DWORD *)v12 & 0xFFFFFFFE)
                                                                                                + 0x4C)
                                                                              + 0x38))(&v82, v12), !(_BYTE)v82)))
      {
        JSC::throwTypeError();
        v17 = 0;
        v14 = 1;
        DWORD2(v79) = 1;
        v83 = 1;
        v21 = 1;
        goto LABEL_38;
      }
      v17 = (WebCore::JSWebCodecsErrorCallback *)WTF::fastMalloc((WTF *)0x20);
      WebCore::JSWebCodecsErrorCallback::JSWebCodecsErrorCallback(v17, v12, (WebCore::JSDOMGlobalObject *)this);
      DWORD2(v79) = 0;
      *(_QWORD *)&v79 = 0;
      WTF::AtomStringImpl::addLiteral();
      v18 = (WTF::StringImpl *)v82;
      v20 = JSC::JSObject::get(v10, (JSC::JSGlobalObject *)this, v82);
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v19);
        else
          *(_DWORD *)v18 -= 2;
      }
      if (!*((_DWORD *)v80 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v80))
      {
        if (v20 != 10)
        {
          v81 = *(_QWORD *)(this + 56);
          v75 = v3;
          if ((v20 & 0xFFFE000000000002) == 0
            && (v22 = *(unsigned __int8 *)(v20 + 5), v22 >= 0x17)
            && ((v22 & 0xFE) == 0x1A
             || (*(_BYTE *)(v20 + 6) & 4) != 0
             && ((*(void (**)(__int128 *__return_ptr, uint64_t))(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)v20 & 0xFFFFFFFE)
                                                                                           + 0x4C)
                                                                         + 0x38))(&v82, v20), (_BYTE)v82)))
          {
            v23 = WTF::fastMalloc((WTF *)0x20);
            v24 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
            *(_DWORD *)(v23 + 16) = 1;
            *(_QWORD *)v23 = &off_1E33A18C0;
            *(_QWORD *)(v23 + 8) = 0;
            WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v23, v24);
            *(_QWORD *)v23 = &off_1E331C720;
            v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            if ((this & 8) != 0)
              v26 = ((this - 112) | 1) + 47;
            else
              v26 = *(_QWORD *)(this & 0xFFFFFFFFFFFFC000) + 32;
            v27 = *(_QWORD **)(v26 + 16);
            if (!v27)
            {
              v69 = v25;
              v70 = v26;
              Allocator = JSC::WeakSet::findAllocator();
              v26 = v70;
              v27 = (_QWORD *)Allocator;
              v25 = v69;
            }
            *(_QWORD *)(v26 + 16) = *v27;
            v27[1] = 0;
            v27[2] = 0;
            *v27 = this;
            *v25 = v27;
            v25[1] = &off_1E32268A0;
            v28 = v25 + 1;
            if ((v20 & 8) != 0)
              v29 = ((v20 - 112) | 1) + 47;
            else
              v29 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFC000) + 32;
            v30 = *(_QWORD **)(v29 + 16);
            if (!v30)
            {
              v74 = v25;
              v72 = v29;
              v73 = JSC::WeakSet::findAllocator();
              v29 = v72;
              v30 = (_QWORD *)v73;
              v25 = v74;
            }
            v14 = 0;
            v31 = 0;
            *(_QWORD *)(v29 + 16) = *v30;
            *v30 = v20;
            v30[1] = v28;
            v30[2] = v23;
            v25[2] = v30;
            *(_QWORD *)(v23 + 24) = v25;
            v78 = 0;
            v77 = 0;
            *(_QWORD *)&v82 = v23;
            *((_QWORD *)&v82 + 1) = v17;
            v17 = 0;
          }
          else
          {
            JSC::throwTypeError();
            v14 = 1;
            v78 = 1;
            v31 = 1;
          }
          v83 = v14;
          ((void (*)(uint64_t *, uint64_t (****)(WebCore::ContextDestructionObserver *__hidden)))off_1E3321960[v31])(&v81, &v77);
          v21 = 0;
          v3 = v75;
LABEL_38:
          ((void (*)(uint64_t (****)(WebCore::ContextDestructionObserver *__hidden), __int128 *))off_1E33213D0[v21])(&v77, &v79);
          if (v17)
          {
            if (*((_DWORD *)v17 + 4) == 1)
            {
              (*(void (**)(WebCore::JSWebCodecsErrorCallback *))(*(_QWORD *)v17 + 16))(v17);
              v14 = v83;
              if (!v83)
              {
LABEL_42:
                v32 = v82;
                v82 = 0uLL;
                v79 = v32;
                WebCore::WebCodecsVideoDecoder::create(v8, &v79, (uint64_t *)&v77);
                if (*((_QWORD *)&v79 + 1))
                {
                  if (*(_DWORD *)(*((_QWORD *)&v79 + 1) + 16) == 1)
                    (*(void (**)(void))(**((_QWORD **)&v79 + 1) + 16))();
                  else
                    --*(_DWORD *)(*((_QWORD *)&v79 + 1) + 16);
                }
                if ((_QWORD)v79)
                {
                  if (*(_DWORD *)(v79 + 16) == 1)
                    (*(void (**)(void))(*(_QWORD *)v79 + 16))();
                  else
                    --*(_DWORD *)(v79 + 16);
                }
                if (*v77 != &off_1E336C9D0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x19504DFE4);
                }
                v13 = (JSCell *)WebCore::createWrapper<WebCore::WebCodecsVideoDecoder,WebCore::WebCodecsVideoDecoder>(*(JSC::VM **)(v5 + 40), (WTF **)&v77, v33);
                v35 = *(JSC::JSCell **)(a2 + 40);
                if (((unint64_t)v35 & 0xFFFE000000000002) != 0
                  || (v36 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v35)) == 0
                  || (v38 = v36, v36 == *(JSC::JSGlobalObject **)(a2 + 24))
                  || (v39 = *(JSC::VM **)(this + 56),
                      FunctionRealm = (JSC::VM *)JSC::getFunctionRealm((JSC *)this, v36, v37),
                      *((_DWORD *)v39 + 20))
                  && (JSC::VM::hasExceptionsAfterHandlingTraps(v39) & 1) != 0)
                {
LABEL_62:
                  if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
                    v13 = 0;
                  v58 = v77;
                  v77 = 0;
                  if (!v58)
                    goto LABEL_80;
                  v59 = v58[3];
                  if (__ldaxr((unsigned __int8 *)v59))
                  {
                    __clrex();
                  }
                  else if (!__stxr(1u, (unsigned __int8 *)v59))
                  {
                    goto LABEL_68;
                  }
                  MEMORY[0x19AEA534C](v59);
LABEL_68:
                  v61 = v59[1];
                  v62 = (uint64_t)v61 - 1;
                  v59[1] = (uint64_t (*)(WebCore::ContextDestructionObserver *__hidden))((char *)v61 - 1);
                  if (v61 == (uint64_t (*)(WebCore::ContextDestructionObserver *__hidden))1)
                  {
                    v68 = v59[2];
                    v63 = v59[3];
                    v59[3] = 0;
                    v64 = v68 != 0;
                  }
                  else
                  {
                    v63 = 0;
                    v64 = 1;
                  }
                  v65 = __ldxr((unsigned __int8 *)v59);
                  if (v65 == 1)
                  {
                    if (!__stlxr(0, (unsigned __int8 *)v59))
                    {
LABEL_75:
                      if (!v62)
                      {
                        if (v63)
                          (*(void (**)(uint64_t (*)(WebCore::ContextDestructionObserver *__hidden)))(*(_QWORD *)v63 + 16))(v63);
                        if (!v64)
                          WTF::fastFree((WTF *)v59, v34);
                      }
LABEL_80:
                      v14 = v83;
                      goto LABEL_81;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow((WTF::Lock *)v59);
                  goto LABEL_75;
                }
                v43 = *((_QWORD *)FunctionRealm + 412);
                if (v43)
                {
                  v44 = *(_DWORD *)(v43 - 8);
                  v45 = ((unint64_t)&WebCore::JSWebCodecsVideoDecoder::s_info
                       + ~((_QWORD)&WebCore::JSWebCodecsVideoDecoder::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebCodecsVideoDecoder::s_info
                                                                                       + ~((_QWORD)&WebCore::JSWebCodecsVideoDecoder::s_info << 32)) >> 22);
                  v46 = 9 * ((v45 + ~(v45 << 13)) ^ ((v45 + ~(v45 << 13)) >> 8));
                  v47 = (v46 ^ (v46 >> 15)) + ~((v46 ^ (v46 >> 15)) << 27);
                  v48 = v44 & ((v47 >> 31) ^ v47);
                  v49 = *(char ***)(v43 + 16 * v48);
                  if (v49 == &WebCore::JSWebCodecsVideoDecoder::s_info)
                  {
LABEL_58:
                    v40 = *(JSC::JSObject **)(v43 + 16 * v48 + 8);
                    if (v40)
                    {
LABEL_60:
                      SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v38, v40, v41);
                      if (!*((_DWORD *)v39 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v39) & 1) == 0)
                        JSC::JSObject::setStructure(v13, v39, SubclassStructure);
                      goto LABEL_62;
                    }
                  }
                  else
                  {
                    v50 = 1;
                    while (v49)
                    {
                      v48 = ((_DWORD)v48 + v50) & v44;
                      v49 = *(char ***)(v43 + 16 * v48);
                      ++v50;
                      if (v49 == &WebCore::JSWebCodecsVideoDecoder::s_info)
                        goto LABEL_58;
                    }
                  }
                }
                v51 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v39, FunctionRealm, v40);
                Structure = WebCore::JSWebCodecsVideoDecoderPrototype::createStructure((uint64_t *)v39, (uint64_t)FunctionRealm, v51);
                *(_DWORD *)(Structure + 16) |= 0x80000u;
                v55 = (JSC::JSCell *)WebCore::JSWebCodecsVideoDecoderPrototype::create(v39, Structure, v53, v54);
                v56 = WebCore::JSWebCodecsVideoDecoder::createStructure((uint64_t *)v39, (uint64_t)FunctionRealm, v55);
                v40 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v56, (uint64_t)&WebCore::JSWebCodecsVideoDecoder::s_info);
                goto LABEL_60;
              }
LABEL_85:
              v13 = 0;
LABEL_81:
              if (v14 == -1)
                return v13;
              goto LABEL_13;
            }
            --*((_DWORD *)v17 + 4);
          }
          if (!v14)
            goto LABEL_42;
          goto LABEL_85;
        }
        WebCore::throwRequiredMemberTypeError(this, (int)&v80, "output", 7, "WebCodecsVideoDecoderInit", 26, "WebCodecsVideoFrameOutputCallback", 34);
      }
      v21 = 0;
      v14 = 1;
      v83 = 1;
      goto LABEL_38;
    }
  }
  WebCore::throwRequiredMemberTypeError(this, (int)&v80, "error", 6, "WebCodecsVideoDecoderInit", 26, "WebCodecsErrorCallback", 23);
LABEL_12:
  v13 = 0;
  v14 = 1;
  v83 = 1;
LABEL_13:
  ((void (*)(__int128 *, __int128 *))off_1E3321970[v14])(&v79, &v82);
  return v13;
}

uint64_t WebCore::JSWebCodecsVideoDecoder::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24) - 32);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebCodecsVideoDecoder::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 48), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 56), a2);
}

uint64_t WebCore::JSWebCodecsVideoDecoder::visitChildren(WebCore::JSWebCodecsVideoDecoder *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    WebCore::JSEventTarget::visitChildren(this, a2, a3);
    (*(void (**)(_QWORD, JSC::JSCell *))(**(_QWORD **)(*((_QWORD *)this + 3) + 48) + 24))(*(_QWORD *)(*((_QWORD *)this + 3) + 48), a2);
    result = (*(uint64_t (**)(_QWORD, JSC::JSCell *))(**(_QWORD **)(*((_QWORD *)this + 3) + 56) + 24))(*(_QWORD *)(*((_QWORD *)this + 3) + 56), a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSWebCodecsVideoDecoderPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebCodecsVideoDecoderPrototype::create(WebCore::JSWebCodecsVideoDecoderPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<9u>(this, (uint64_t)&WebCore::JSWebCodecsVideoDecoder::s_info, (uint64_t)&WebCore::JSWebCodecsVideoDecoderPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWebCodecsVideoDecoder>,(WebCore::DOMConstructorID)277>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v37;
  unint64_t v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2216);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v39) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v37 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v37);
    v5[2] = SlowCase + (int)v37;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v39, &WebCore::JSDOMConstructor<WebCore::JSWebCodecsVideoDecoder>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v38 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v38);
    v10[2848] = v2 + (int)v38;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v39 = 0;
  v40 = v2;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v39);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v39);
  v14 = v39;
  v39 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v39 = 0;
  v40 = v2;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v39);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (!v18)
    goto LABEL_21;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = ((unint64_t)&WebCore::JSWebCodecsVideoDecoder::s_info
       + ~((_QWORD)&WebCore::JSWebCodecsVideoDecoder::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebCodecsVideoDecoder::s_info
                                                                       + ~((_QWORD)&WebCore::JSWebCodecsVideoDecoder::s_info << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = *(char ***)(v18 + 16 * v23);
  if (v24 != &WebCore::JSWebCodecsVideoDecoder::s_info)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v19;
      v24 = *(char ***)(v18 + 16 * v23);
      ++v25;
      if (v24 == &WebCore::JSWebCodecsVideoDecoder::s_info)
        goto LABEL_20;
    }
    goto LABEL_21;
  }
LABEL_20:
  v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
  if (!v26)
  {
LABEL_21:
    v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)a1, (JSC::VM *)a2, v16);
    Structure = WebCore::JSWebCodecsVideoDecoderPrototype::createStructure((uint64_t *)a1, a2, v27);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v31 = (JSC::JSCell *)WebCore::JSWebCodecsVideoDecoderPrototype::create((WebCore::JSWebCodecsVideoDecoderPrototype *)a1, Structure, v29, v30);
    v32 = WebCore::JSWebCodecsVideoDecoder::createStructure((uint64_t *)a1, a2, v31);
    v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSWebCodecsVideoDecoder::s_info);
  }
  v33 = *(_QWORD *)(v26 + 48);
  v39 = 0;
  v40 = v2;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v39);
  if ((*(_BYTE *)((16 * *(unsigned int *)v2) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)v2, (JSC::VM *)a1);
  WTF::AtomStringImpl::addLiteral();
  v34 = v39;
  JSC::reifyStaticProperty((JSC::VM *)a1, (uint64_t)&WebCore::JSWebCodecsVideoDecoder::s_info, (unint64_t *)&v39, (uint64_t)&WebCore::JSWebCodecsVideoDecoderConstructorTableValues, (unsigned __int8 *)v2);
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v35);
    else
      *(_DWORD *)v34 -= 2;
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2216) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebCodecsVideoDecoderConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebCodecsVideoDecoderPrototype::s_info != (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWebCodecsVideoDecoder>,(WebCore::DOMConstructorID)277>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsWebCodecsVideoDecoder_state(uint64_t a1, uint64_t a2)
{
  return WebCore::convertEnumerationToJS<WebCore::WebCodecsCodecState>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*(unsigned int *)(*(_QWORD *)(a2 + 24) + 24));
}

unint64_t WebCore::jsWebCodecsVideoDecoder_decodeQueueSize(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) | 0xFFFE000000000000;
}

uint64_t WebCore::jsWebCodecsVideoDecoder_ondequeue(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v22;

  v5 = *(WebCore **)(a2 + 24);
  v6 = *((_QWORD *)v5 - 1);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  a1 = (WebCore *)MEMORY[0x19AEA534C](v6);
LABEL_5:
  ++*(_QWORD *)(v6 + 8);
  v8 = __ldxr((unsigned __int8 *)v6);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  a1 = (WebCore *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_10:
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(a1);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  v13 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v11 + 592), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  v14 = *((_QWORD *)v5 - 1);
  if (__ldaxr((unsigned __int8 *)v14))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v14))
  {
    goto LABEL_19;
  }
  MEMORY[0x19AEA534C](v14);
LABEL_19:
  v16 = *(_QWORD *)(v14 + 8);
  v17 = v16 - 1;
  *(_QWORD *)(v14 + 8) = v16 - 1;
  if (v16 == 1)
  {
    v22 = *(_QWORD *)(v14 + 16);
    v18 = *(_QWORD *)(v14 + 24);
    *(_QWORD *)(v14 + 24) = 0;
    v19 = v22 != 0;
  }
  else
  {
    v18 = 0;
    v19 = 1;
  }
  v20 = __ldxr((unsigned __int8 *)v14);
  if (v20 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v14))
    {
      if (v17)
        return v13;
      goto LABEL_27;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v14);
  if (v17)
    return v13;
LABEL_27:
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
  if (!v19)
    WTF::fastFree((WTF *)v14, v12);
  return v13;
}

uint64_t WebCore::setJSWebCodecsVideoDecoder_ondequeue(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  uint64_t v27;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebCodecsVideoDecoder::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebCodecsVideoDecoder::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(WebCore::EventTarget **)(a2 + 24);
  v12 = *((_QWORD *)v11 - 1);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_16;
  }
  a1 = (WebCore *)MEMORY[0x19AEA534C](v12);
LABEL_16:
  ++*(_QWORD *)(v12 + 8);
  v14 = __ldxr((unsigned __int8 *)v12);
  if (v14 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v12))
      goto LABEL_21;
  }
  else
  {
    __clrex();
  }
  a1 = (WebCore *)WTF::Lock::unlockSlow((WTF::Lock *)v12);
LABEL_21:
  v15 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v15 || (v16 = *(_QWORD *)(v15 + 96)) == 0)
    v16 = WebCore::threadGlobalDataSlow(a1);
  v17 = *(_QWORD *)(v16 + 40);
  if (!v17)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v16);
    v17 = *(_QWORD *)(v16 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v17 + 592), a3, (_DWORD *)a2);
  v19 = *((_QWORD *)v11 - 1);
  if (__ldaxr((unsigned __int8 *)v19))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v19))
  {
    goto LABEL_30;
  }
  MEMORY[0x19AEA534C](v19);
LABEL_30:
  v21 = *(_QWORD *)(v19 + 8);
  v22 = v21 - 1;
  *(_QWORD *)(v19 + 8) = v21 - 1;
  if (v21 == 1)
  {
    v27 = *(_QWORD *)(v19 + 16);
    v23 = *(_QWORD *)(v19 + 24);
    *(_QWORD *)(v19 + 24) = 0;
    v24 = v27 != 0;
  }
  else
  {
    v23 = 0;
    v24 = 1;
  }
  v25 = __ldxr((unsigned __int8 *)v19);
  if (v25 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v19))
    {
      if (!v22)
        goto LABEL_38;
      goto LABEL_42;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v19);
  if (!v22)
  {
LABEL_38:
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
    if (!v24)
      WTF::fastFree((WTF *)v19, v18);
  }
LABEL_42:
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::JSWebCodecsVideoDecoderOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v6 = *(_QWORD *)(v5 - 24);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (*(_QWORD *)(v5 - 16)
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 32) + 64))(v5 - 32), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

uint64_t WebCore::JSWebCodecsVideoDecoderOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v37;

  v4 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](v5);
LABEL_5:
  ++*(_QWORD *)(v5 + 8);
  v8 = __ldxr((unsigned __int8 *)v5);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_9:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (*(_DWORD *)(a3 + 48))
  {
    v19 = *(_QWORD *)(a3 + 32);
    v18 = (uint64_t *)(a3 + 32);
    v17 = v19;
    if (v19)
    {
      v20 = *(_DWORD *)(v17 - 8);
      v21 = ~((v4 - 32) << 32) + v4 - 32;
      v22 = (v21 ^ (v21 >> 22)) + ~((v21 ^ (v21 >> 22)) << 13);
      v23 = (9 * (v22 ^ (v22 >> 8))) ^ ((9 * (v22 ^ (v22 >> 8))) >> 15);
      v24 = v20 & (((v23 + ~(v23 << 27)) >> 31) ^ ((_DWORD)v23 + ~((_DWORD)v23 << 27)));
      v25 = *(_QWORD *)(v17 + 16 * v24);
      if (v25 != v4 - 32)
      {
        v26 = 1;
        while (v25)
        {
          v24 = ((_DWORD)v24 + v26) & v20;
          v25 = *(_QWORD *)(v17 + 16 * v24);
          ++v26;
          if (v25 == v4 - 32)
            goto LABEL_35;
        }
        v24 = *(unsigned int *)(v17 - 4);
      }
LABEL_35:
      if (v24 != *(_DWORD *)(v17 - 4))
      {
        v27 = (_QWORD *)(v17 + 16 * v24);
        *v27 = -1;
        v30 = v27[1];
        v29 = v27 + 1;
        v28 = v30;
        if (v30)
        {
          *(_QWORD *)(v28 + 8) = 3;
          *v29 = 0;
        }
        ++*(_DWORD *)(*v18 - 16);
        v31 = *v18;
        if (*v18)
          v32 = *(_DWORD *)(v31 - 12) - 1;
        else
          v32 = -1;
        *(_DWORD *)(v31 - 12) = v32;
        v33 = *v18;
        if (*v18)
        {
          v34 = 6 * *(_DWORD *)(v33 - 12);
          v35 = *(_DWORD *)(v33 - 4);
          if (v34 < v35 && v35 >= 9)
            result = (uint64_t)WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v18, v35 >> 1, 0);
        }
      }
    }
  }
  else
  {
    v9 = *(_QWORD *)(v4 + 8);
    if (v9)
    {
      *(_QWORD *)(v9 + 8) = 3;
      *(_QWORD *)(v4 + 8) = 0;
    }
  }
  v10 = *(_QWORD *)(v4 - 8);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_17;
  }
  result = MEMORY[0x19AEA534C](v10);
LABEL_17:
  v12 = *(_QWORD *)(v10 + 8);
  v13 = v12 - 1;
  *(_QWORD *)(v10 + 8) = v12 - 1;
  if (v12 == 1)
  {
    v37 = *(_QWORD *)(v10 + 16);
    v14 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    v15 = v37 != 0;
  }
  else
  {
    v14 = 0;
    v15 = 1;
  }
  v16 = __ldxr((unsigned __int8 *)v10);
  if (v16 != 1)
  {
    __clrex();
LABEL_24:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v10);
    if (v13)
      return result;
    goto LABEL_25;
  }
  if (__stlxr(0, (unsigned __int8 *)v10))
    goto LABEL_24;
  if (v13)
    return result;
LABEL_25:
  if (v14)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  if (!v15)
    return WTF::fastFree((WTF *)v10, a2);
  return result;
}

unint64_t WebCore::createWrapper<WebCore::WebCodecsVideoDecoder,WebCore::WebCodecsVideoDecoder>(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSEventTarget *v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v18;
  JSC::Structure *v19;
  JSC::JSCell *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  unint64_t SlowCase;
  WTF *v41;
  char *v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *Allocator;
  uint64_t v48;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  WTF *v56;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&WebCore::JSWebCodecsVideoDecoder::s_info
        + ~((_QWORD)&WebCore::JSWebCodecsVideoDecoder::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebCodecsVideoDecoder::s_info
                                                                        + ~((_QWORD)&WebCore::JSWebCodecsVideoDecoder::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &WebCore::JSWebCodecsVideoDecoder::s_info)
    {
LABEL_6:
      v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v14)
        goto LABEL_8;
    }
    else
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v13;
        if (v12 == &WebCore::JSWebCodecsVideoDecoder::s_info)
          goto LABEL_6;
      }
    }
  }
  v15 = (WebCore::JSEventTarget *)*((_QWORD *)a1 + 7);
  v16 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v15, a1, a3);
  Structure = WebCore::JSWebCodecsVideoDecoderPrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v20 = (JSC::JSCell *)WebCore::JSWebCodecsVideoDecoderPrototype::create(v15, Structure, v18, v19);
  v21 = WebCore::JSWebCodecsVideoDecoder::createStructure((uint64_t *)v15, (uint64_t)a1, v20);
  v14 = WebCore::cacheDOMStructure((JSCell *)a1, v21, (uint64_t)&WebCore::JSWebCodecsVideoDecoder::s_info);
LABEL_8:
  v22 = *((_QWORD *)a1 + 7);
  v23 = *(_QWORD *)(v22 + 41456);
  v24 = *(_QWORD *)(v23 + 23536);
  v25 = *(_QWORD **)(v24 + 2240);
  if (v25)
    goto LABEL_31;
  v26 = *(_QWORD *)(v23 + 22648);
  if (__ldaxr((unsigned __int8 *)v26))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v26))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v26);
LABEL_13:
  v28 = *(_QWORD *)(v26 + 2824);
  v54 = *(_QWORD *)(v28 + 2240);
  if (!v54)
  {
    v29 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v56, "IsoSpace T");
    v55 = 0;
    MEMORY[0x19AEA3204](v29, &v56, v22 + 192, v22 + 1872, 32, 8, &v55);
    v31 = (uint64_t)v55;
    v55 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v56;
    v56 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 1)
        WTF::fastFree(v32, v30);
      else
        --*(_DWORD *)v32;
    }
    v54 = v29;
    v33 = *(_QWORD *)(v28 + 2240);
    *(_QWORD *)(v28 + 2240) = v29;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = *(unsigned int *)(v26 + 2844);
    if ((_DWORD)v34 == *(_DWORD *)(v26 + 2840))
    {
      v35 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v26 + 2832, v34 + 1, (unint64_t)&v54);
      v34 = *(unsigned int *)(v26 + 2844);
      *(_QWORD *)(*(_QWORD *)(v26 + 2832) + 8 * v34) = *v35;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v26 + 2832) + 8 * v34) = v29;
    }
    *(_DWORD *)(v26 + 2844) = v34 + 1;
  }
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v24 + 2240);
  *(_QWORD *)(v24 + 2240) = v25;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v26);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v26))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_31:
  SlowCase = v25[3];
  if (SlowCase < v25[4])
  {
LABEL_32:
    v25[3] = SlowCase + 32;
    goto LABEL_33;
  }
  SlowCase = v25[5];
  if ((SlowCase & 1) == 0)
  {
    v53 = *(_QWORD *)(SlowCase + 8) ^ v25[6];
    v25[4] = SlowCase + HIDWORD(v53);
    v25[5] = SlowCase + (int)v53;
    goto LABEL_32;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  v41 = *a2;
  *a2 = 0;
  v42 = (char *)v41 + 32;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v14);
  *(_QWORD *)(SlowCase + 24) = v42;
  if (*(_BYTE *)(v22 + 755))
    __dmb(0xAu);
  v43 = *((_QWORD *)a1 + 415);
  if ((byte_1EE336F60 & 1) == 0)
  {
    qword_1EE336F58 = (uint64_t)&off_1E33205A0;
    byte_1EE336F60 = 1;
  }
  if (v5)
    v44 = (uint64_t *)((char *)v5 + 40);
  else
    v44 = 0;
  if (!*(_DWORD *)(v43 + 48))
  {
    if ((SlowCase & 8) != 0)
      v45 = (SlowCase - 112) | 1;
    else
      v45 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v45 & 1) != 0)
      v46 = v45 + 47;
    else
      v46 = *(_QWORD *)v45 + 32;
    Allocator = *(_QWORD **)(v46 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v46 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE336F58;
    Allocator[2] = v43;
    v48 = *v44;
    *v44 = (uint64_t)Allocator;
    if (!v48)
      return SlowCase;
LABEL_58:
    *(_QWORD *)(v48 + 8) = 3;
    return SlowCase;
  }
  v56 = v5;
  if ((SlowCase & 8) != 0)
    v50 = (SlowCase - 112) | 1;
  else
    v50 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v50 & 1) != 0)
    v51 = v50 + 47;
  else
    v51 = *(_QWORD *)v50 + 32;
  v52 = *(_QWORD **)(v51 + 16);
  if (!v52)
    v52 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v51 + 16) = *v52;
  *v52 = SlowCase;
  v52[1] = &qword_1EE336F58;
  v52[2] = v43;
  v55 = v52;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v43 + 32), (uint64_t *)&v56, (uint64_t *)&v55);
  v48 = (uint64_t)v55;
  if (v55)
    goto LABEL_58;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::WebCodecsVideoDecoder>(int a1, JSC::VM *a2, WTF *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v10;
  void *v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  WTF *v27;
  int v28;
  uint64_t v29;
  WTF *v30;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v21 = *(_QWORD *)(v5 + 32);
    if (!v21)
      goto LABEL_5;
    v22 = *(_DWORD *)(v21 - 8);
    v23 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
    v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
    v26 = v22 & ((v25 >> 31) ^ v25);
    v27 = *(WTF **)(v21 + 16 * v26);
    if (v27 != a3)
    {
      v28 = 1;
      while (v27)
      {
        v26 = ((_DWORD)v26 + v28) & v22;
        v27 = *(WTF **)(v21 + 16 * v26);
        ++v28;
        if (v27 == a3)
          goto LABEL_38;
      }
      goto LABEL_5;
    }
LABEL_38:
    v6 = *(_QWORD *)(v21 + 16 * v26 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *((_QWORD *)a3 + 5);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    v7 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return v7;
  }
LABEL_5:
  v8 = *((_QWORD *)a3 + 3);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_9:
  ++*(_QWORD *)(v8 + 8);
  v10 = __ldxr((unsigned __int8 *)v8);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
  v30 = a3;
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 != &off_1E336C9D0)
  {
    __break(0xC471u);
    JUMPOUT(0x19504F91CLL);
  }
  v7 = WebCore::createWrapper<WebCore::WebCodecsVideoDecoder,WebCore::WebCodecsVideoDecoder>(a2, &v30, a3);
  v12 = v30;
  v30 = 0;
  if (v12)
  {
    v13 = *((_QWORD *)v12 + 3);
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v13);
LABEL_20:
    v15 = *(_QWORD *)(v13 + 8);
    v16 = v15 - 1;
    *(_QWORD *)(v13 + 8) = v15 - 1;
    if (v15 == 1)
    {
      v29 = *(_QWORD *)(v13 + 16);
      v17 = *(_QWORD *)(v13 + 24);
      *(_QWORD *)(v13 + 24) = 0;
      v18 = v29 != 0;
    }
    else
    {
      v17 = 0;
      v18 = 1;
    }
    v19 = __ldxr((unsigned __int8 *)v13);
    if (v19 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
      {
        if (v16)
          return v7;
        goto LABEL_28;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
    if (v16)
      return v7;
LABEL_28:
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
    if (!v18)
      WTF::fastFree((WTF *)v13, v11);
  }
  return v7;
}

WTF::StringImpl *WebCore::convertDictionary<WebCore::WebCodecsVideoDecoderConfig>(uint64_t a1, JSC::JSGlobalObject *a2, JSC::JSCell *this)
{
  unint64_t v5;
  JSC::Structure *Object;
  WTF::StringImpl *v7;
  uint64_t v8;
  JSC::VM *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  JSC::JSCell *v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t (*v27)();
  int v28;
  uint64_t v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  unint64_t v38;
  uint64_t v39;
  JSC::VM *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  unint64_t v43;
  JSC::VM *v44;
  double v45;
  __int16 v46;
  WTF::StringImpl *v47;
  int v48;
  __int128 v49;
  __int128 v50;
  WTF::StringImpl *result;
  int hasExceptionsAfterHandlingTraps;
  BOOL v53;
  int v54;
  uint64_t v55;
  int *v56;
  int v57;
  WTF::StringImpl *v58;
  int v59;
  uint64_t v60;
  int v61;
  WTF::StringImpl *v62;
  _BYTE v63[8];
  int v64;
  char v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int16 v71;
  JSC::VM *v72;
  _BYTE *v73;
  _BYTE v74[12];
  int v75;
  unsigned int v76;
  int v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v72 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v5 = (unint64_t)this & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    Object = 0;
  }
  else if (((unint64_t)this & 0xFFFE000000000002) != 0
         || (Object = (JSC::Structure *)JSC::JSCell::getObject(this)) == 0)
  {
    result = (WTF::StringImpl *)JSC::throwTypeError();
    *(_DWORD *)(a1 + 120) = 1;
    return result;
  }
  v62 = 0;
  v63[0] = 0;
  v65 = 0;
  LOBYTE(v66) = 0;
  BYTE8(v66) = 0;
  LOBYTE(v67) = 0;
  BYTE8(v67) = 0;
  LOBYTE(v68) = 0;
  BYTE8(v68) = 0;
  LOBYTE(v69) = 0;
  BYTE8(v69) = 0;
  LOBYTE(v70) = 0;
  BYTE8(v70) = 0;
  HIDWORD(v70) = 0;
  v71 = 0;
  if (v5 != 2)
  {
    WTF::AtomStringImpl::addLiteral();
    v8 = JSC::JSObject::get(Object, a2, *(unint64_t *)v74);
    if (*(_QWORD *)v74)
    {
      if (**(_DWORD **)v74 == 2)
        WTF::StringImpl::destroy(*(WTF::StringImpl **)v74, v7);
      else
        **(_DWORD **)v74 -= 2;
    }
    if (*((_DWORD *)v72 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v72))
      goto LABEL_12;
    if (v8 != 10)
    {
      *(_QWORD *)v74 = v8;
      v9 = (JSC::VM *)*((_QWORD *)a2 + 7);
      if ((v8 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v8 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v74, a2);
LABEL_19:
        if (*((_DWORD *)v9 + 20))
        {
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v9);
          v11 = v58;
          if (hasExceptionsAfterHandlingTraps)
          {
            v29 = 1;
            v61 = 1;
            v58 = 0;
            if (v11)
            {
              if (*(_DWORD *)v11 == 2)
                WTF::StringImpl::destroy(v11, v7);
              else
                *(_DWORD *)v11 -= 2;
            }
            *(_DWORD *)(a1 + 120) = 1;
            goto LABEL_123;
          }
        }
        else
        {
          v11 = v58;
        }
        v61 = 0;
        v60 = 0;
        v12 = v62;
        v62 = v11;
        if (v12)
        {
          if (*(_DWORD *)v12 == 2)
            WTF::StringImpl::destroy(v12, v7);
          else
            *(_DWORD *)v12 -= 2;
        }
        WTF::AtomStringImpl::addLiteral();
        v13 = *(WTF::StringImpl **)v74;
        v15 = JSC::JSObject::get(Object, a2, *(unint64_t *)v74);
        if (v13)
        {
          if (*(_DWORD *)v13 == 2)
            WTF::StringImpl::destroy(v13, v14);
          else
            *(_DWORD *)v13 -= 2;
        }
        if (*((_DWORD *)v72 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v72))
          goto LABEL_167;
        if (v15 != 10)
        {
          WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(a2, v15, v74);
          if (*(_DWORD *)&v74[4])
            goto LABEL_167;
          if (!BYTE8(v67))
            BYTE8(v67) = 1;
          *(_QWORD *)&v67 = *(_QWORD *)v74;
        }
        WTF::AtomStringImpl::addLiteral();
        v16 = *(WTF::StringImpl **)v74;
        v18 = JSC::JSObject::get(Object, a2, *(unint64_t *)v74);
        if (v16)
        {
          if (*(_DWORD *)v16 == 2)
            WTF::StringImpl::destroy(v16, v17);
          else
            *(_DWORD *)v16 -= 2;
        }
        if (*((_DWORD *)v72 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v72))
          goto LABEL_167;
        if (v18 != 10)
        {
          WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(a2, v18, v74);
          if (*(_DWORD *)&v74[4])
            goto LABEL_167;
          if (!BYTE8(v66))
            BYTE8(v66) = 1;
          *(_QWORD *)&v66 = *(_QWORD *)v74;
        }
        WTF::AtomStringImpl::addLiteral();
        v19 = *(WTF::StringImpl **)v74;
        v21 = (JSC::JSCell *)JSC::JSObject::get(Object, a2, *(unint64_t *)v74);
        if (v19)
        {
          if (*(_DWORD *)v19 == 2)
            WTF::StringImpl::destroy(v19, v20);
          else
            *(_DWORD *)v19 -= 2;
        }
        if (*((_DWORD *)v72 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v72))
          goto LABEL_167;
        if (v21 != (JSC::JSCell *)10)
        {
          WebCore::convertDictionary<WebCore::PlatformVideoColorSpace>(v21, (uint64_t)a2, (uint64_t)v74);
          if (v75)
            goto LABEL_167;
          if (!BYTE8(v70))
            BYTE8(v70) = 1;
          *(_QWORD *)&v70 = *(_QWORD *)&v74[4];
        }
        WTF::AtomStringImpl::addLiteral();
        v22 = *(WTF::StringImpl **)v74;
        v24 = JSC::JSObject::get(Object, a2, *(unint64_t *)v74);
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v23);
          else
            *(_DWORD *)v22 -= 2;
        }
        if (*((_DWORD *)v72 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v72))
          goto LABEL_167;
        if (v24 == 10)
        {
LABEL_81:
          WTF::AtomStringImpl::addLiteral();
          v30 = *(WTF::StringImpl **)v74;
          v32 = JSC::JSObject::get(Object, a2, *(unint64_t *)v74);
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v31);
            else
              *(_DWORD *)v30 -= 2;
          }
          if (*((_DWORD *)v72 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v72))
            goto LABEL_167;
          if (v32 != 10)
          {
            WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(a2, v32, v74);
            if (*(_DWORD *)&v74[4])
              goto LABEL_167;
            if (!BYTE8(v69))
              BYTE8(v69) = 1;
            *(_QWORD *)&v69 = *(_QWORD *)v74;
          }
          WTF::AtomStringImpl::addLiteral();
          v33 = *(WTF::StringImpl **)v74;
          v35 = JSC::JSObject::get(Object, a2, *(unint64_t *)v74);
          if (v33)
          {
            if (*(_DWORD *)v33 == 2)
              WTF::StringImpl::destroy(v33, v34);
            else
              *(_DWORD *)v33 -= 2;
          }
          if (*((_DWORD *)v72 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v72))
            goto LABEL_167;
          if (v35 != 10)
          {
            WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(a2, v35, v74);
            if (*(_DWORD *)&v74[4])
              goto LABEL_167;
            if (!BYTE8(v68))
              BYTE8(v68) = 1;
            *(_QWORD *)&v68 = *(_QWORD *)v74;
          }
          WTF::AtomStringImpl::addLiteral();
          v36 = *(WTF::StringImpl **)v74;
          v38 = JSC::JSObject::get(Object, a2, *(unint64_t *)v74);
          if (v36)
          {
            if (*(_DWORD *)v36 == 2)
              WTF::StringImpl::destroy(v36, v37);
            else
              *(_DWORD *)v36 -= 2;
          }
          if (*((_DWORD *)v72 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v72))
            goto LABEL_167;
          if (v38 == 10)
          {
            LODWORD(v39) = 0;
            goto LABEL_107;
          }
          *(_QWORD *)v74 = *((_QWORD *)a2 + 7);
          v40 = *(JSC::VM **)v74;
          v39 = WebCore::parseEnumeration<WebCore::HardwareAcceleration>(a2, v38);
          if (*((_DWORD *)v40 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v40) & 1) != 0)
            goto LABEL_167;
          if ((v39 & 0xFF00000000) != 0)
          {
LABEL_107:
            HIDWORD(v70) = v39;
            WTF::AtomStringImpl::addLiteral();
            v41 = *(WTF::StringImpl **)v74;
            v43 = JSC::JSObject::get(Object, a2, *(unint64_t *)v74);
            if (v41)
            {
              if (*(_DWORD *)v41 == 2)
                WTF::StringImpl::destroy(v41, v42);
              else
                *(_DWORD *)v41 -= 2;
            }
            if (*((_DWORD *)v72 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v72))
              goto LABEL_167;
            if (v43 == 10)
              goto LABEL_118;
            v44 = (JSC::VM *)*((_QWORD *)a2 + 7);
            if (v43 >= 0xFFFE000000000000)
            {
              v53 = (_DWORD)v43 == 0;
              goto LABEL_183;
            }
            *(_QWORD *)&v45 = v43 - 0x2000000000000;
            if (v43 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
            {
              if (v45 <= 0.0)
              {
                v46 = v45 < 0.0;
                goto LABEL_116;
              }
            }
            else
            {
              if ((v43 & 0xFFFE000000000002) != 0)
              {
                v46 = v43 == 7;
                goto LABEL_116;
              }
              v54 = *(unsigned __int8 *)(v43 + 5);
              if (v54 == 3)
              {
                v57 = *(_DWORD *)(v43 + 8);
LABEL_179:
                v53 = v57 == 0;
                goto LABEL_183;
              }
              if (v54 == 2)
              {
                v55 = *(_QWORD *)(v43 + 8);
                if ((v55 & 1) != 0)
                  v56 = (int *)(v43 + 16);
                else
                  v56 = (int *)(v55 + 4);
                v57 = *v56;
                goto LABEL_179;
              }
              if ((*(_BYTE *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0xA) & 1) != 0)
              {
                v53 = *(_QWORD *)(16 * (*(_DWORD *)v43 & 0xFFFFFFFE) + 0x28) == (_QWORD)a2;
LABEL_183:
                v46 = !v53;
                goto LABEL_116;
              }
            }
            v46 = 1;
LABEL_116:
            if (*((_DWORD *)v44 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v44))
              goto LABEL_167;
            v71 = v46 | 0x100;
LABEL_118:
            v47 = v62;
            v62 = 0;
            *(_QWORD *)a1 = v47;
            *(_BYTE *)(a1 + 8) = 0;
            *(_BYTE *)(a1 + 24) = 0;
            if (v65)
            {
              *(_DWORD *)(a1 + 16) = -1;
              v48 = v64;
              if (v64 != -1)
              {
                ((void (*)(_BYTE *, uint64_t, _BYTE *))off_1E33211A8[v64])(v74, a1 + 8, v63);
                *(_DWORD *)(a1 + 16) = v48;
              }
              *(_BYTE *)(a1 + 24) = 1;
            }
            v29 = 0;
            v49 = v69;
            *(_OWORD *)(a1 + 64) = v68;
            *(_OWORD *)(a1 + 80) = v49;
            *(_OWORD *)(a1 + 96) = v70;
            *(_WORD *)(a1 + 112) = v71;
            v50 = v67;
            *(_OWORD *)(a1 + 32) = v66;
            *(_OWORD *)(a1 + 48) = v50;
            *(_DWORD *)(a1 + 120) = 0;
            goto LABEL_123;
          }
          JSC::throwTypeError();
LABEL_167:
          v29 = 0;
          *(_DWORD *)(a1 + 120) = 1;
          goto LABEL_123;
        }
        WebCore::convert<WebCore::IDLAllowSharedAdaptor<WebCore::IDLUnion<WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer>>>(v24, (uint64_t)a2, (uint64_t)v74);
        v25 = v77;
        if (v77)
        {
          *(_DWORD *)(a1 + 120) = 1;
          v28 = v25;
LABEL_77:
          if (v28 != -1)
            ((void (*)(WTF::StringImpl **, _BYTE *))off_1E33211C8[v28])(&v58, &v74[8]);
          if (v25)
          {
            v29 = 0;
LABEL_123:
            ((void (*)(_BYTE *, uint64_t *))off_1E3321590[v29])(v74, &v60);
            goto LABEL_124;
          }
          goto LABEL_81;
        }
        LOBYTE(v58) = 0;
        v59 = -1;
        v26 = v76;
        if (v76 == -1)
        {
          if (v65)
          {
            if (v64 == -1)
            {
LABEL_76:
              v28 = v77;
              goto LABEL_77;
            }
            ((void (*)(_BYTE **, _BYTE *))off_1E3321198[v64])(&v73, v63);
            v64 = -1;
LABEL_74:
            if (v59 != -1)
              ((void (*)(_BYTE **, WTF::StringImpl **))off_1E3321198[v59])(&v73, &v58);
            goto LABEL_76;
          }
          v63[0] = 0;
          v64 = -1;
        }
        else
        {
          v27 = off_1E33211A8[v76];
          ((void (*)(_BYTE **, WTF::StringImpl **, _BYTE *))v27)(&v73, &v58, &v74[8]);
          v59 = v26;
          if (v65)
          {
            v73 = v63;
            ((void (*)(_BYTE **, _BYTE *, WTF::StringImpl **))off_1E33211B8[v26])(&v73, v63, &v58);
            goto LABEL_74;
          }
          v63[0] = 0;
          v64 = -1;
          ((void (*)(_BYTE **, _BYTE *, WTF::StringImpl **))v27)(&v73, v63, &v58);
          v64 = v26;
        }
        v65 = 1;
        goto LABEL_74;
      }
      v10 = *(WTF::StringImpl **)(v8 + 8);
      if ((v10 & 1) != 0)
      {
        v10 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v8, a2);
        if (!v10)
          goto LABEL_18;
      }
      else if (!v10)
      {
LABEL_18:
        v58 = v10;
        goto LABEL_19;
      }
      *(_DWORD *)v10 += 2;
      goto LABEL_18;
    }
  }
  WebCore::throwRequiredMemberTypeError((int)a2, (int)&v72, "codec", 6, "WebCodecsVideoDecoderConfig", 28, "DOMString", 10);
LABEL_12:
  *(_DWORD *)(a1 + 120) = 1;
LABEL_124:
  if (v65)
  {
    if (v64 != -1)
      ((void (*)(_BYTE *, _BYTE *))off_1E3321198[v64])(v74, v63);
    v64 = -1;
  }
  result = v62;
  v62 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v7);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::JSWebCodecsVideoEncoder::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, uint64_t a2)
{
  WebCore::JSEventTarget::visitOutputConstraints<JSC::AbstractSlotVisitor>(a1, a2);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 48) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 48), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 56) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 56), a2);
}

uint64_t WebCore::JSWebCodecsVideoEncoder::visitOutputConstraints<JSC::SlotVisitor>(uint64_t a1, uint64_t a2)
{
  WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 48), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 56), a2);
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSWebCodecsVideoEncoder>::construct(unint64_t this, uint64_t a2)
{
  JSC::VM *v3;
  uint64_t v5;
  uint64_t v6;
  JSC::JSCell *v7;
  uint64_t v8;
  uint64_t Object;
  JSC::Structure *v10;
  WTF::StringImpl *v11;
  unint64_t v12;
  JSCell *v13;
  int v14;
  unsigned int v16;
  WebCore::JSWebCodecsErrorCallback *v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  WebCore::ScriptExecutionContext *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  __int128 v32;
  WebCore::JSDOMGlobalObject *v33;
  _DWORD *v34;
  _DWORD *v35;
  void *v36;
  JSC::JSCell *v37;
  JSC::JSGlobalObject *v38;
  JSC::JSObject *v39;
  JSC::JSGlobalObject *v40;
  JSC::VM *v41;
  JSC::JSObject *v42;
  JSC::Structure *v43;
  JSC::VM *FunctionRealm;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char **v51;
  int v52;
  JSC::JSCell *v53;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v55;
  JSC::Structure *v56;
  JSC::JSCell *v57;
  uint64_t v58;
  unint64_t SubclassStructure;
  uint64_t (***v60)(WebCore::ContextDestructionObserver *__hidden);
  uint64_t (**v61)(WebCore::ContextDestructionObserver *__hidden);
  uint64_t (*v63)(WebCore::ContextDestructionObserver *__hidden);
  uint64_t v64;
  uint64_t (*v65)(WebCore::ContextDestructionObserver *__hidden);
  BOOL v66;
  int v67;
  JSValue v68;
  uint64_t (*v70)(WebCore::ContextDestructionObserver *__hidden);
  _QWORD *v71;
  uint64_t v72;
  uint64_t Allocator;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  JSC::VM *v77;
  JSC::VM *v78;
  uint64_t (***v79)(WebCore::ContextDestructionObserver *__hidden);
  int v80;
  __int128 v81;
  JSC::VM *v82;
  uint64_t v83;
  __int128 v84;
  int v85;

  v3 = *(JSC::VM **)(this + 56);
  v78 = v3;
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v68.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)this, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v3, (JSC::JSGlobalObject *)this, v68);
  }
  v5 = *(_QWORD *)(a2 + 24);
  v6 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v5 + 40));
  if (!v6)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError((JSC *)this, &v78, (uint64_t)"VideoEncoder", 13);
  v7 = *(JSC::JSCell **)(a2 + 48);
  v82 = *(JSC::VM **)(this + 56);
  if (((unint64_t)v7 & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if (((unint64_t)v7 & 0xFFFE000000000002) != 0 || (v8 = v6, (Object = JSC::JSCell::getObject(v7)) == 0))
    {
      JSC::throwTypeError();
      goto LABEL_12;
    }
    v10 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v12 = JSC::JSObject::get(v10, (JSC::JSGlobalObject *)this, v84);
    if ((_QWORD)v84)
    {
      if (*(_DWORD *)v84 == 2)
        WTF::StringImpl::destroy((WTF::StringImpl *)v84, v11);
      else
        *(_DWORD *)v84 -= 2;
    }
    if (*((_DWORD *)v82 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v82) & 1) != 0)
      goto LABEL_12;
    if (v12 != 10)
    {
      v79 = *(uint64_t (****)(WebCore::ContextDestructionObserver *__hidden))(this + 56);
      if ((v12 & 0xFFFE000000000002) != 0
        || (v16 = *(unsigned __int8 *)(v12 + 5), v16 < 0x17)
        || (v16 & 0xFE) != 0x1A
        && ((*(_BYTE *)(v12 + 6) & 4) == 0
         || ((*(void (**)(__int128 *__return_ptr, unint64_t))(16
                                                                              * *(unsigned int *)(16
                                                                                                * (*(_DWORD *)v12 & 0xFFFFFFFE)
                                                                                                + 0x4C)
                                                                              + 0x38))(&v84, v12), !(_BYTE)v84)))
      {
        JSC::throwTypeError();
        v17 = 0;
        v14 = 1;
        DWORD2(v81) = 1;
        v85 = 1;
        v21 = 1;
        goto LABEL_38;
      }
      v17 = (WebCore::JSWebCodecsErrorCallback *)WTF::fastMalloc((WTF *)0x20);
      WebCore::JSWebCodecsErrorCallback::JSWebCodecsErrorCallback(v17, v12, (WebCore::JSDOMGlobalObject *)this);
      DWORD2(v81) = 0;
      *(_QWORD *)&v81 = 0;
      WTF::AtomStringImpl::addLiteral();
      v18 = (WTF::StringImpl *)v84;
      v20 = JSC::JSObject::get(v10, (JSC::JSGlobalObject *)this, v84);
      if (v18)
      {
        if (*(_DWORD *)v18 == 2)
          WTF::StringImpl::destroy(v18, v19);
        else
          *(_DWORD *)v18 -= 2;
      }
      if (!*((_DWORD *)v82 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v82))
      {
        if (v20 != 10)
        {
          v83 = *(_QWORD *)(this + 56);
          v77 = v3;
          if ((v20 & 0xFFFE000000000002) == 0
            && (v22 = *(unsigned __int8 *)(v20 + 5), v22 >= 0x17)
            && ((v22 & 0xFE) == 0x1A
             || (*(_BYTE *)(v20 + 6) & 4) != 0
             && ((*(void (**)(__int128 *__return_ptr, uint64_t))(16
                                                                         * *(unsigned int *)(16
                                                                                           * (*(_DWORD *)v20 & 0xFFFFFFFE)
                                                                                           + 0x4C)
                                                                         + 0x38))(&v84, v20), (_BYTE)v84)))
          {
            v23 = WTF::fastMalloc((WTF *)0x20);
            v24 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext((WebCore::JSDOMGlobalObject *)this);
            *(_DWORD *)(v23 + 16) = 1;
            *(_QWORD *)v23 = &off_1E33A18C0;
            *(_QWORD *)(v23 + 8) = 0;
            WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v23, v24);
            *(_QWORD *)v23 = &off_1E331BE60;
            v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
            if ((this & 8) != 0)
              v26 = ((this - 112) | 1) + 47;
            else
              v26 = *(_QWORD *)(this & 0xFFFFFFFFFFFFC000) + 32;
            v27 = *(_QWORD **)(v26 + 16);
            if (!v27)
            {
              v71 = v25;
              v72 = v26;
              Allocator = JSC::WeakSet::findAllocator();
              v26 = v72;
              v27 = (_QWORD *)Allocator;
              v25 = v71;
            }
            *(_QWORD *)(v26 + 16) = *v27;
            v27[1] = 0;
            v27[2] = 0;
            *v27 = this;
            *v25 = v27;
            v25[1] = &off_1E32268A0;
            v28 = v25 + 1;
            if ((v20 & 8) != 0)
              v29 = ((v20 - 112) | 1) + 47;
            else
              v29 = *(_QWORD *)(v20 & 0xFFFFFFFFFFFFC000) + 32;
            v30 = *(_QWORD **)(v29 + 16);
            if (!v30)
            {
              v76 = v25;
              v74 = v29;
              v75 = JSC::WeakSet::findAllocator();
              v29 = v74;
              v30 = (_QWORD *)v75;
              v25 = v76;
            }
            v14 = 0;
            v31 = 0;
            *(_QWORD *)(v29 + 16) = *v30;
            *v30 = v20;
            v30[1] = v28;
            v30[2] = v23;
            v25[2] = v30;
            *(_QWORD *)(v23 + 24) = v25;
            v80 = 0;
            v79 = 0;
            *(_QWORD *)&v84 = v23;
            *((_QWORD *)&v84 + 1) = v17;
            v17 = 0;
          }
          else
          {
            JSC::throwTypeError();
            v14 = 1;
            v80 = 1;
            v31 = 1;
          }
          v85 = v14;
          ((void (*)(uint64_t *, uint64_t (****)(WebCore::ContextDestructionObserver *__hidden)))off_1E3321B20[v31])(&v83, &v79);
          v21 = 0;
          v3 = v77;
LABEL_38:
          ((void (*)(uint64_t (****)(WebCore::ContextDestructionObserver *__hidden), __int128 *))off_1E33213D0[v21])(&v79, &v81);
          if (v17)
          {
            if (*((_DWORD *)v17 + 4) == 1)
            {
              (*(void (**)(WebCore::JSWebCodecsErrorCallback *))(*(_QWORD *)v17 + 16))(v17);
              v14 = v85;
              if (!v85)
              {
LABEL_42:
                v32 = v84;
                v84 = 0uLL;
                v81 = v32;
                WebCore::WebCodecsVideoEncoder::create(v8, &v81, (uint64_t *)&v79);
                v34 = (_DWORD *)*((_QWORD *)&v81 + 1);
                *((_QWORD *)&v81 + 1) = 0;
                if (v34)
                {
                  if (v34[4] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 16))(v34);
                  else
                    --v34[4];
                }
                v35 = (_DWORD *)v81;
                *(_QWORD *)&v81 = 0;
                if (v35)
                {
                  if (v35[4] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v35 + 16))(v35);
                  else
                    --v35[4];
                }
                if (*v79 != &off_1E336CAC0)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1950515F0);
                }
                v13 = (JSCell *)WebCore::createWrapper<WebCore::WebCodecsVideoEncoder,WebCore::WebCodecsVideoEncoder>(*(JSC::VM **)(v5 + 40), (WTF **)&v79, v33);
                v37 = *(JSC::JSCell **)(a2 + 40);
                if (((unint64_t)v37 & 0xFFFE000000000002) != 0
                  || (v38 = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v37)) == 0
                  || (v40 = v38, v38 == *(JSC::JSGlobalObject **)(a2 + 24))
                  || (v41 = *(JSC::VM **)(this + 56),
                      FunctionRealm = (JSC::VM *)JSC::getFunctionRealm((JSC *)this, v38, v39),
                      *((_DWORD *)v41 + 20))
                  && (JSC::VM::hasExceptionsAfterHandlingTraps(v41) & 1) != 0)
                {
LABEL_62:
                  if (*((_DWORD *)v3 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v3) & 1) != 0)
                    v13 = 0;
                  v60 = v79;
                  v79 = 0;
                  if (!v60)
                    goto LABEL_80;
                  v61 = v60[3];
                  if (__ldaxr((unsigned __int8 *)v61))
                  {
                    __clrex();
                  }
                  else if (!__stxr(1u, (unsigned __int8 *)v61))
                  {
                    goto LABEL_68;
                  }
                  MEMORY[0x19AEA534C](v61);
LABEL_68:
                  v63 = v61[1];
                  v64 = (uint64_t)v63 - 1;
                  v61[1] = (uint64_t (*)(WebCore::ContextDestructionObserver *__hidden))((char *)v63 - 1);
                  if (v63 == (uint64_t (*)(WebCore::ContextDestructionObserver *__hidden))1)
                  {
                    v70 = v61[2];
                    v65 = v61[3];
                    v61[3] = 0;
                    v66 = v70 != 0;
                  }
                  else
                  {
                    v65 = 0;
                    v66 = 1;
                  }
                  v67 = __ldxr((unsigned __int8 *)v61);
                  if (v67 == 1)
                  {
                    if (!__stlxr(0, (unsigned __int8 *)v61))
                    {
LABEL_75:
                      if (!v64)
                      {
                        if (v65)
                          (*(void (**)(uint64_t (*)(WebCore::ContextDestructionObserver *__hidden)))(*(_QWORD *)v65 + 16))(v65);
                        if (!v66)
                          WTF::fastFree((WTF *)v61, v36);
                      }
LABEL_80:
                      v14 = v85;
                      goto LABEL_81;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow((WTF::Lock *)v61);
                  goto LABEL_75;
                }
                v45 = *((_QWORD *)FunctionRealm + 412);
                if (v45)
                {
                  v46 = *(_DWORD *)(v45 - 8);
                  v47 = ((unint64_t)&WebCore::JSWebCodecsVideoEncoder::s_info
                       + ~((_QWORD)&WebCore::JSWebCodecsVideoEncoder::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebCodecsVideoEncoder::s_info
                                                                                       + ~((_QWORD)&WebCore::JSWebCodecsVideoEncoder::s_info << 32)) >> 22);
                  v48 = 9 * ((v47 + ~(v47 << 13)) ^ ((v47 + ~(v47 << 13)) >> 8));
                  v49 = (v48 ^ (v48 >> 15)) + ~((v48 ^ (v48 >> 15)) << 27);
                  v50 = v46 & ((v49 >> 31) ^ v49);
                  v51 = *(char ***)(v45 + 16 * v50);
                  if (v51 == &WebCore::JSWebCodecsVideoEncoder::s_info)
                  {
LABEL_58:
                    v42 = *(JSC::JSObject **)(v45 + 16 * v50 + 8);
                    if (v42)
                    {
LABEL_60:
                      SubclassStructure = JSC::InternalFunction::createSubclassStructure((JSC::InternalFunction *)this, v40, v42, v43);
                      if (!*((_DWORD *)v41 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v41) & 1) == 0)
                        JSC::JSObject::setStructure(v13, v41, SubclassStructure);
                      goto LABEL_62;
                    }
                  }
                  else
                  {
                    v52 = 1;
                    while (v51)
                    {
                      v50 = ((_DWORD)v50 + v52) & v46;
                      v51 = *(char ***)(v45 + 16 * v50);
                      ++v52;
                      if (v51 == &WebCore::JSWebCodecsVideoEncoder::s_info)
                        goto LABEL_58;
                    }
                  }
                }
                v53 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v41, FunctionRealm, v42);
                Structure = WebCore::JSWebCodecsVideoEncoderPrototype::createStructure((uint64_t *)v41, (uint64_t)FunctionRealm, v53);
                *(_DWORD *)(Structure + 16) |= 0x80000u;
                v57 = (JSC::JSCell *)WebCore::JSWebCodecsVideoEncoderPrototype::create(v41, Structure, v55, v56);
                v58 = WebCore::JSWebCodecsVideoEncoder::createStructure((uint64_t *)v41, (uint64_t)FunctionRealm, v57);
                v42 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v58, (uint64_t)&WebCore::JSWebCodecsVideoEncoder::s_info);
                goto LABEL_60;
              }
LABEL_85:
              v13 = 0;
LABEL_81:
              if (v14 == -1)
                return v13;
              goto LABEL_13;
            }
            --*((_DWORD *)v17 + 4);
          }
          if (!v14)
            goto LABEL_42;
          goto LABEL_85;
        }
        WebCore::throwRequiredMemberTypeError(this, (int)&v82, "output", 7, "WebCodecsVideoEncoderInit", 26, "WebCodecsEncodedVideoChunkOutputCallback", 41);
      }
      v21 = 0;
      v14 = 1;
      v85 = 1;
      goto LABEL_38;
    }
  }
  WebCore::throwRequiredMemberTypeError(this, (int)&v82, "error", 6, "WebCodecsVideoEncoderInit", 26, "WebCodecsErrorCallback", 23);
LABEL_12:
  v13 = 0;
  v14 = 1;
  v85 = 1;
LABEL_13:
  ((void (*)(__int128 *, __int128 *))off_1E3321B30[v14])(&v81, &v84);
  return v13;
}

uint64_t WebCore::JSWebCodecsVideoEncoder::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24) - 32);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEventTarget::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEventTarget::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebCodecsVideoEncoder::visitChildren(uint64_t a1, uint64_t a2)
{
  JSC::JSObject::visitChildren();
  WebCore::JSEventTarget::visitAdditionalChildren<JSC::SlotVisitor>(a1, a2);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 48) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 48), a2);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 24) + 56) + 32))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 56), a2);
}

uint64_t WebCore::JSWebCodecsVideoEncoder::visitChildren(WebCore::JSWebCodecsVideoEncoder *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    WebCore::JSEventTarget::visitChildren(this, a2, a3);
    (*(void (**)(_QWORD, JSC::JSCell *))(**(_QWORD **)(*((_QWORD *)this + 3) + 48) + 24))(*(_QWORD *)(*((_QWORD *)this + 3) + 48), a2);
    result = (*(uint64_t (**)(_QWORD, JSC::JSCell *))(**(_QWORD **)(*((_QWORD *)this + 3) + 56) + 24))(*(_QWORD *)(*((_QWORD *)this + 3) + 56), a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSWebCodecsVideoEncoderPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebCodecsVideoEncoderPrototype::create(WebCore::JSWebCodecsVideoEncoderPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<9u>(this, (uint64_t)&WebCore::JSWebCodecsVideoEncoder::s_info, (uint64_t)&WebCore::JSWebCodecsVideoEncoderPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWebCodecsVideoEncoder>,(WebCore::DOMConstructorID)278>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v29;
  JSC::Structure *v30;
  JSC::JSCell *v31;
  uint64_t v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v37;
  unint64_t v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2224);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEventTarget>,(WebCore::DOMConstructorID)450>(a1, a2);
  v7 = v6;
  LODWORD(v39) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v37 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v37);
    v5[2] = SlowCase + (int)v37;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v39, &WebCore::JSDOMConstructor<WebCore::JSWebCodecsVideoEncoder>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 >= v10[2847])
  {
    v2 = v10[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v38 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v38);
    v10[2848] = v2 + (int)v38;
  }
  v10[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v39 = 0;
  v40 = v2;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v39);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v39);
  v14 = v39;
  v39 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v39 = 0;
  v40 = v2;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v39);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (!v18)
    goto LABEL_21;
  v19 = *(_DWORD *)(v18 - 8);
  v20 = ((unint64_t)&WebCore::JSWebCodecsVideoEncoder::s_info
       + ~((_QWORD)&WebCore::JSWebCodecsVideoEncoder::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebCodecsVideoEncoder::s_info
                                                                       + ~((_QWORD)&WebCore::JSWebCodecsVideoEncoder::s_info << 32)) >> 22);
  v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
  v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
  v23 = v19 & ((v22 >> 31) ^ v22);
  v24 = *(char ***)(v18 + 16 * v23);
  if (v24 != &WebCore::JSWebCodecsVideoEncoder::s_info)
  {
    v25 = 1;
    while (v24)
    {
      v23 = ((_DWORD)v23 + v25) & v19;
      v24 = *(char ***)(v18 + 16 * v23);
      ++v25;
      if (v24 == &WebCore::JSWebCodecsVideoEncoder::s_info)
        goto LABEL_20;
    }
    goto LABEL_21;
  }
LABEL_20:
  v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
  if (!v26)
  {
LABEL_21:
    v27 = (JSC::JSCell *)WebCore::JSEventTarget::prototype((WebCore::JSEventTarget *)a1, (JSC::VM *)a2, v16);
    Structure = WebCore::JSWebCodecsVideoEncoderPrototype::createStructure((uint64_t *)a1, a2, v27);
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v31 = (JSC::JSCell *)WebCore::JSWebCodecsVideoEncoderPrototype::create((WebCore::JSWebCodecsVideoEncoderPrototype *)a1, Structure, v29, v30);
    v32 = WebCore::JSWebCodecsVideoEncoder::createStructure((uint64_t *)a1, a2, v31);
    v26 = WebCore::cacheDOMStructure((JSCell *)a2, v32, (uint64_t)&WebCore::JSWebCodecsVideoEncoder::s_info);
  }
  v33 = *(_QWORD *)(v26 + 48);
  v39 = 0;
  v40 = v2;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v33, 14, (uint64_t)&v39);
  if ((*(_BYTE *)((16 * *(unsigned int *)v2) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)v2, (JSC::VM *)a1);
  WTF::AtomStringImpl::addLiteral();
  v34 = v39;
  JSC::reifyStaticProperty((JSC::VM *)a1, (uint64_t)&WebCore::JSWebCodecsVideoEncoder::s_info, (unint64_t *)&v39, (uint64_t)&WebCore::JSWebCodecsVideoEncoderConstructorTableValues, (unsigned __int8 *)v2);
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v35);
    else
      *(_DWORD *)v34 -= 2;
  }
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2224) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebCodecsVideoEncoderConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebCodecsVideoEncoderPrototype::s_info != (char **)(16
                                                                     * *(unsigned int *)(16
                                                                                       * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                       + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWebCodecsVideoEncoder>,(WebCore::DOMConstructorID)278>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsWebCodecsVideoEncoder_state(uint64_t a1, uint64_t a2)
{
  return WebCore::convertEnumerationToJS<WebCore::WebCodecsCodecState>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*(unsigned int *)(*(_QWORD *)(a2 + 24) + 24));
}

unint64_t WebCore::jsWebCodecsVideoEncoder_encodeQueueSize(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) | 0xFFFE000000000000;
}

uint64_t WebCore::jsWebCodecsVideoEncoder_ondequeue(WebCore *a1, uint64_t a2, uint64_t a3, WebCore::DOMWrapperWorld *a4)
{
  WebCore *v5;
  uint64_t v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v22;

  v5 = *(WebCore **)(a2 + 24);
  v6 = *((_QWORD *)v5 - 1);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v6))
  {
    goto LABEL_5;
  }
  a1 = (WebCore *)MEMORY[0x19AEA534C](v6);
LABEL_5:
  ++*(_QWORD *)(v6 + 8);
  v8 = __ldxr((unsigned __int8 *)v6);
  if (v8 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      goto LABEL_10;
  }
  else
  {
    __clrex();
  }
  a1 = (WebCore *)WTF::Lock::unlockSlow((WTF::Lock *)v6);
LABEL_10:
  v9 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v9 || (v10 = *(_QWORD *)(v9 + 96)) == 0)
    v10 = WebCore::threadGlobalDataSlow(a1);
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v10);
    v11 = *(_QWORD *)(v10 + 40);
  }
  v13 = WebCore::eventHandlerAttribute(v5, (WebCore::EventTarget *)(v11 + 592), *(const WTF::AtomString **)(*(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28) + 3320), a4);
  v14 = *((_QWORD *)v5 - 1);
  if (__ldaxr((unsigned __int8 *)v14))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v14))
  {
    goto LABEL_19;
  }
  MEMORY[0x19AEA534C](v14);
LABEL_19:
  v16 = *(_QWORD *)(v14 + 8);
  v17 = v16 - 1;
  *(_QWORD *)(v14 + 8) = v16 - 1;
  if (v16 == 1)
  {
    v22 = *(_QWORD *)(v14 + 16);
    v18 = *(_QWORD *)(v14 + 24);
    *(_QWORD *)(v14 + 24) = 0;
    v19 = v22 != 0;
  }
  else
  {
    v18 = 0;
    v19 = 1;
  }
  v20 = __ldxr((unsigned __int8 *)v14);
  if (v20 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v14))
    {
      if (v17)
        return v13;
      goto LABEL_27;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v14);
  if (v17)
    return v13;
LABEL_27:
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
  if (!v19)
    WTF::fastFree((WTF *)v14, v12);
  return v13;
}

uint64_t WebCore::setJSWebCodecsVideoEncoder_ondequeue(WebCore *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::EventTarget *v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  uint64_t v27;

  v3 = *((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v6 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebCodecsVideoEncoder::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebCodecsVideoEncoder::s_info && v8 != 0);
  }
  if (!v7)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v11 = *(WebCore::EventTarget **)(a2 + 24);
  v12 = *((_QWORD *)v11 - 1);
  if (__ldaxr((unsigned __int8 *)v12))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v12))
  {
    goto LABEL_16;
  }
  a1 = (WebCore *)MEMORY[0x19AEA534C](v12);
LABEL_16:
  ++*(_QWORD *)(v12 + 8);
  v14 = __ldxr((unsigned __int8 *)v12);
  if (v14 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v12))
      goto LABEL_21;
  }
  else
  {
    __clrex();
  }
  a1 = (WebCore *)WTF::Lock::unlockSlow((WTF::Lock *)v12);
LABEL_21:
  v15 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v15 || (v16 = *(_QWORD *)(v15 + 96)) == 0)
    v16 = WebCore::threadGlobalDataSlow(a1);
  v17 = *(_QWORD *)(v16 + 40);
  if (!v17)
  {
    WebCore::ThreadGlobalData::initializeEventNames((WebCore::EventNames **)v16);
    v17 = *(_QWORD *)(v16 + 40);
  }
  WebCore::EventTarget::setAttributeEventListener<WebCore::JSEventListener>(v11, (WTF::StringImpl **)(v17 + 592), a3, (_DWORD *)a2);
  v19 = *((_QWORD *)v11 - 1);
  if (__ldaxr((unsigned __int8 *)v19))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v19))
  {
    goto LABEL_30;
  }
  MEMORY[0x19AEA534C](v19);
LABEL_30:
  v21 = *(_QWORD *)(v19 + 8);
  v22 = v21 - 1;
  *(_QWORD *)(v19 + 8) = v21 - 1;
  if (v21 == 1)
  {
    v27 = *(_QWORD *)(v19 + 16);
    v23 = *(_QWORD *)(v19 + 24);
    *(_QWORD *)(v19 + 24) = 0;
    v24 = v27 != 0;
  }
  else
  {
    v23 = 0;
    v24 = 1;
  }
  v25 = __ldxr((unsigned __int8 *)v19);
  if (v25 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v19))
    {
      if (!v22)
        goto LABEL_38;
      goto LABEL_42;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v19);
  if (!v22)
  {
LABEL_38:
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 16))(v23);
    if (!v24)
      WTF::fastFree((WTF *)v19, v18);
  }
LABEL_42:
  if (a3 && (a3 & 0xFFFE000000000002) == 0 && *(_DWORD *)(v3 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(v3 + 192), (const JSCell *)a2);
  return 1;
}

uint64_t WebCore::JSWebCodecsVideoEncoderOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v6 = *(_QWORD *)(v5 - 24);
  if (!v6)
    return 0;
  v7 = *(_QWORD *)(v6 + 8);
  if (!v7 || *(_BYTE *)(v7 + 180))
    return 0;
  if (*(_QWORD *)(v5 - 16)
    || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 - 32) + 64))(v5 - 32), (_DWORD)result))
  {
    if (a5)
    {
      *a5 = "ActiveDOMObject with pending activity";
      a5[1] = 38;
    }
    return 1;
  }
  return result;
}

uint64_t WebCore::JSWebCodecsVideoEncoderOwner::finalize(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v37;

  v4 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  v5 = *(_QWORD *)(v4 - 8);
  if (__ldaxr((unsigned __int8 *)v5))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v5))
  {
    goto LABEL_5;
  }
  result = MEMORY[0x19AEA534C](v5);
LABEL_5:
  ++*(_QWORD *)(v5 + 8);
  v8 = __ldxr((unsigned __int8 *)v5);
  if (v8 != 1)
  {
    __clrex();
    goto LABEL_9;
  }
  if (__stlxr(0, (unsigned __int8 *)v5))
LABEL_9:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v5);
  if (*(_DWORD *)(a3 + 48))
  {
    v19 = *(_QWORD *)(a3 + 32);
    v18 = (uint64_t *)(a3 + 32);
    v17 = v19;
    if (v19)
    {
      v20 = *(_DWORD *)(v17 - 8);
      v21 = ~((v4 - 32) << 32) + v4 - 32;
      v22 = (v21 ^ (v21 >> 22)) + ~((v21 ^ (v21 >> 22)) << 13);
      v23 = (9 * (v22 ^ (v22 >> 8))) ^ ((9 * (v22 ^ (v22 >> 8))) >> 15);
      v24 = v20 & (((v23 + ~(v23 << 27)) >> 31) ^ ((_DWORD)v23 + ~((_DWORD)v23 << 27)));
      v25 = *(_QWORD *)(v17 + 16 * v24);
      if (v25 != v4 - 32)
      {
        v26 = 1;
        while (v25)
        {
          v24 = ((_DWORD)v24 + v26) & v20;
          v25 = *(_QWORD *)(v17 + 16 * v24);
          ++v26;
          if (v25 == v4 - 32)
            goto LABEL_35;
        }
        v24 = *(unsigned int *)(v17 - 4);
      }
LABEL_35:
      if (v24 != *(_DWORD *)(v17 - 4))
      {
        v27 = (_QWORD *)(v17 + 16 * v24);
        *v27 = -1;
        v30 = v27[1];
        v29 = v27 + 1;
        v28 = v30;
        if (v30)
        {
          *(_QWORD *)(v28 + 8) = 3;
          *v29 = 0;
        }
        ++*(_DWORD *)(*v18 - 16);
        v31 = *v18;
        if (*v18)
          v32 = *(_DWORD *)(v31 - 12) - 1;
        else
          v32 = -1;
        *(_DWORD *)(v31 - 12) = v32;
        v33 = *v18;
        if (*v18)
        {
          v34 = 6 * *(_DWORD *)(v33 - 12);
          v35 = *(_DWORD *)(v33 - 4);
          if (v34 < v35 && v35 >= 9)
            result = (uint64_t)WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v18, v35 >> 1, 0);
        }
      }
    }
  }
  else
  {
    v9 = *(_QWORD *)(v4 + 8);
    if (v9)
    {
      *(_QWORD *)(v9 + 8) = 3;
      *(_QWORD *)(v4 + 8) = 0;
    }
  }
  v10 = *(_QWORD *)(v4 - 8);
  if (__ldaxr((unsigned __int8 *)v10))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v10))
  {
    goto LABEL_17;
  }
  result = MEMORY[0x19AEA534C](v10);
LABEL_17:
  v12 = *(_QWORD *)(v10 + 8);
  v13 = v12 - 1;
  *(_QWORD *)(v10 + 8) = v12 - 1;
  if (v12 == 1)
  {
    v37 = *(_QWORD *)(v10 + 16);
    v14 = *(_QWORD *)(v10 + 24);
    *(_QWORD *)(v10 + 24) = 0;
    v15 = v37 != 0;
  }
  else
  {
    v14 = 0;
    v15 = 1;
  }
  v16 = __ldxr((unsigned __int8 *)v10);
  if (v16 != 1)
  {
    __clrex();
LABEL_24:
    result = WTF::Lock::unlockSlow((WTF::Lock *)v10);
    if (v13)
      return result;
    goto LABEL_25;
  }
  if (__stlxr(0, (unsigned __int8 *)v10))
    goto LABEL_24;
  if (v13)
    return result;
LABEL_25:
  if (v14)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
  if (!v15)
    return WTF::fastFree((WTF *)v10, a2);
  return result;
}

unint64_t WebCore::createWrapper<WebCore::WebCodecsVideoEncoder,WebCore::WebCodecsVideoEncoder>(JSC::VM *a1, WTF **a2, WebCore::JSDOMGlobalObject *a3)
{
  WTF *v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char **v12;
  int v13;
  unint64_t v14;
  WebCore::JSEventTarget *v15;
  JSC::JSCell *v16;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v18;
  JSC::Structure *v19;
  JSC::JSCell *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  WTF *v37;
  void *v38;
  int v39;
  unint64_t SlowCase;
  WTF *v41;
  char *v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *Allocator;
  uint64_t v48;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  WTF *v56;

  v5 = *a2;
  v6 = *((_QWORD *)a1 + 412);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 - 8);
    v8 = ((unint64_t)&WebCore::JSWebCodecsVideoEncoder::s_info
        + ~((_QWORD)&WebCore::JSWebCodecsVideoEncoder::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebCodecsVideoEncoder::s_info
                                                                        + ~((_QWORD)&WebCore::JSWebCodecsVideoEncoder::s_info << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(char ***)(v6 + 16 * v11);
    if (v12 == &WebCore::JSWebCodecsVideoEncoder::s_info)
    {
LABEL_6:
      v14 = *(_QWORD *)(v6 + 16 * v11 + 8);
      if (v14)
        goto LABEL_8;
    }
    else
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(char ***)(v6 + 16 * v11);
        ++v13;
        if (v12 == &WebCore::JSWebCodecsVideoEncoder::s_info)
          goto LABEL_6;
      }
    }
  }
  v15 = (WebCore::JSEventTarget *)*((_QWORD *)a1 + 7);
  v16 = (JSC::JSCell *)WebCore::JSEventTarget::prototype(v15, a1, a3);
  Structure = WebCore::JSWebCodecsVideoEncoderPrototype::createStructure((uint64_t *)v15, (uint64_t)a1, v16);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v20 = (JSC::JSCell *)WebCore::JSWebCodecsVideoEncoderPrototype::create(v15, Structure, v18, v19);
  v21 = WebCore::JSWebCodecsVideoEncoder::createStructure((uint64_t *)v15, (uint64_t)a1, v20);
  v14 = WebCore::cacheDOMStructure((JSCell *)a1, v21, (uint64_t)&WebCore::JSWebCodecsVideoEncoder::s_info);
LABEL_8:
  v22 = *((_QWORD *)a1 + 7);
  v23 = *(_QWORD *)(v22 + 41456);
  v24 = *(_QWORD *)(v23 + 23536);
  v25 = *(_QWORD **)(v24 + 2248);
  if (v25)
    goto LABEL_31;
  v26 = *(_QWORD *)(v23 + 22648);
  if (__ldaxr((unsigned __int8 *)v26))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v26))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v26);
LABEL_13:
  v28 = *(_QWORD *)(v26 + 2824);
  v54 = *(_QWORD *)(v28 + 2248);
  if (!v54)
  {
    v29 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v56, "IsoSpace T");
    v55 = 0;
    MEMORY[0x19AEA3204](v29, &v56, v22 + 192, v22 + 1872, 32, 8, &v55);
    v31 = (uint64_t)v55;
    v55 = 0;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    v32 = v56;
    v56 = 0;
    if (v32)
    {
      if (*(_DWORD *)v32 == 1)
        WTF::fastFree(v32, v30);
      else
        --*(_DWORD *)v32;
    }
    v54 = v29;
    v33 = *(_QWORD *)(v28 + 2248);
    *(_QWORD *)(v28 + 2248) = v29;
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
    v34 = *(unsigned int *)(v26 + 2844);
    if ((_DWORD)v34 == *(_DWORD *)(v26 + 2840))
    {
      v35 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v26 + 2832, v34 + 1, (unint64_t)&v54);
      v34 = *(unsigned int *)(v26 + 2844);
      *(_QWORD *)(*(_QWORD *)(v26 + 2832) + 8 * v34) = *v35;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v26 + 2832) + 8 * v34) = v29;
    }
    *(_DWORD *)(v26 + 2844) = v34 + 1;
  }
  v25 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v36 = *(_QWORD *)(v24 + 2248);
  *(_QWORD *)(v24 + 2248) = v25;
  if (v36)
  {
    v37 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v37, v38);
  }
  v39 = __ldxr((unsigned __int8 *)v26);
  if (v39 != 1)
  {
    __clrex();
    goto LABEL_30;
  }
  if (__stlxr(0, (unsigned __int8 *)v26))
LABEL_30:
    WTF::Lock::unlockSlow((WTF::Lock *)v26);
LABEL_31:
  SlowCase = v25[3];
  if (SlowCase < v25[4])
  {
LABEL_32:
    v25[3] = SlowCase + 32;
    goto LABEL_33;
  }
  SlowCase = v25[5];
  if ((SlowCase & 1) == 0)
  {
    v53 = *(_QWORD *)(SlowCase + 8) ^ v25[6];
    v25[4] = SlowCase + HIDWORD(v53);
    v25[5] = SlowCase + (int)v53;
    goto LABEL_32;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_33:
  *(_DWORD *)SlowCase = 0;
  v41 = *a2;
  *a2 = 0;
  v42 = (char *)v41 + 32;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v14);
  *(_QWORD *)(SlowCase + 24) = v42;
  if (*(_BYTE *)(v22 + 755))
    __dmb(0xAu);
  v43 = *((_QWORD *)a1 + 415);
  if ((byte_1EE336F70 & 1) == 0)
  {
    qword_1EE336F68 = (uint64_t)&off_1E33205D0;
    byte_1EE336F70 = 1;
  }
  if (v5)
    v44 = (uint64_t *)((char *)v5 + 40);
  else
    v44 = 0;
  if (!*(_DWORD *)(v43 + 48))
  {
    if ((SlowCase & 8) != 0)
      v45 = (SlowCase - 112) | 1;
    else
      v45 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v45 & 1) != 0)
      v46 = v45 + 47;
    else
      v46 = *(_QWORD *)v45 + 32;
    Allocator = *(_QWORD **)(v46 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v46 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE336F68;
    Allocator[2] = v43;
    v48 = *v44;
    *v44 = (uint64_t)Allocator;
    if (!v48)
      return SlowCase;
LABEL_58:
    *(_QWORD *)(v48 + 8) = 3;
    return SlowCase;
  }
  v56 = v5;
  if ((SlowCase & 8) != 0)
    v50 = (SlowCase - 112) | 1;
  else
    v50 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v50 & 1) != 0)
    v51 = v50 + 47;
  else
    v51 = *(_QWORD *)v50 + 32;
  v52 = *(_QWORD **)(v51 + 16);
  if (!v52)
    v52 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v51 + 16) = *v52;
  *v52 = SlowCase;
  v52[1] = &qword_1EE336F68;
  v52[2] = v43;
  v55 = v52;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v43 + 32), (uint64_t *)&v56, (uint64_t *)&v55);
  v48 = (uint64_t)v55;
  if (v55)
    goto LABEL_58;
  return SlowCase;
}

unint64_t WebCore::wrap<WebCore::WebCodecsVideoEncoder>(int a1, JSC::VM *a2, WTF *a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v10;
  void *v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v21;
  unsigned int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  WTF *v27;
  int v28;
  uint64_t v29;
  WTF *v30;

  v5 = *((_QWORD *)a2 + 415);
  if (*(_DWORD *)(v5 + 48))
  {
    v21 = *(_QWORD *)(v5 + 32);
    if (!v21)
      goto LABEL_5;
    v22 = *(_DWORD *)(v21 - 8);
    v23 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v24 = 9 * ((v23 + ~(v23 << 13)) ^ ((v23 + ~(v23 << 13)) >> 8));
    v25 = (v24 ^ (v24 >> 15)) + ~((v24 ^ (v24 >> 15)) << 27);
    v26 = v22 & ((v25 >> 31) ^ v25);
    v27 = *(WTF **)(v21 + 16 * v26);
    if (v27 != a3)
    {
      v28 = 1;
      while (v27)
      {
        v26 = ((_DWORD)v26 + v28) & v22;
        v27 = *(WTF **)(v21 + 16 * v26);
        ++v28;
        if (v27 == a3)
          goto LABEL_38;
      }
      goto LABEL_5;
    }
LABEL_38:
    v6 = *(_QWORD *)(v21 + 16 * v26 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *((_QWORD *)a3 + 5);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    v7 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return v7;
  }
LABEL_5:
  v8 = *((_QWORD *)a3 + 3);
  if (__ldaxr((unsigned __int8 *)v8))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v8))
  {
    goto LABEL_9;
  }
  MEMORY[0x19AEA534C](v8);
LABEL_9:
  ++*(_QWORD *)(v8 + 8);
  v10 = __ldxr((unsigned __int8 *)v8);
  if (v10 != 1)
  {
    __clrex();
    goto LABEL_13;
  }
  if (__stlxr(0, (unsigned __int8 *)v8))
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v8);
  v30 = a3;
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 != &off_1E336CAC0)
  {
    __break(0xC471u);
    JUMPOUT(0x195052F28);
  }
  v7 = WebCore::createWrapper<WebCore::WebCodecsVideoEncoder,WebCore::WebCodecsVideoEncoder>(a2, &v30, a3);
  v12 = v30;
  v30 = 0;
  if (v12)
  {
    v13 = *((_QWORD *)v12 + 3);
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
      goto LABEL_20;
    }
    MEMORY[0x19AEA534C](v13);
LABEL_20:
    v15 = *(_QWORD *)(v13 + 8);
    v16 = v15 - 1;
    *(_QWORD *)(v13 + 8) = v15 - 1;
    if (v15 == 1)
    {
      v29 = *(_QWORD *)(v13 + 16);
      v17 = *(_QWORD *)(v13 + 24);
      *(_QWORD *)(v13 + 24) = 0;
      v18 = v29 != 0;
    }
    else
    {
      v17 = 0;
      v18 = 1;
    }
    v19 = __ldxr((unsigned __int8 *)v13);
    if (v19 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
      {
        if (v16)
          return v7;
        goto LABEL_28;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
    if (v16)
      return v7;
LABEL_28:
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
    if (!v18)
      WTF::fastFree((WTF *)v13, v11);
  }
  return v7;
}

uint64_t WebCore::convertDictionary<WebCore::WebCodecsVideoEncoderConfig>(uint64_t a1, JSC::JSGlobalObject *a2, JSC::JSCell *this)
{
  uint64_t Object;
  JSC::Structure *v6;
  WTF::StringImpl *v7;
  unint64_t v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  JSC::JSCell *v11;
  char v12;
  unsigned __int8 v13;
  unsigned int v14;
  uint64_t result;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  unint64_t v18;
  char v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  unint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  JSC::VM *v28;
  _DWORD *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v36;
  unsigned __int8 v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  double v41;
  JSC::VM *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  unint64_t v45;
  uint64_t v46;
  JSC::VM *v47;
  WTF::StringImpl *v48;
  WTF::StringImpl *v49;
  unint64_t v50;
  unint64_t v51;
  WTF::StringImpl *v52;
  int v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  unint64_t v56;
  JSC::VM *v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  uint64_t v61;
  JSC::VM *v62;
  WTF::StringImpl *v63;
  uint64_t v64;
  int v65;
  WTF::StringImpl *v66;
  WTF::StringImpl *v67;
  unint64_t v68;
  unint64_t v69;
  int v70;
  int v71;
  WTF::StringImpl *v72;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v74;
  int v75;
  WTF::StringImpl *v76;
  double v77;
  int v78;
  unint64_t v79;
  int v80;
  char v81;
  char v82;
  uint64_t v83;
  char v84;
  unsigned __int8 v85;
  uint64_t v86;
  char v87;
  unsigned __int8 v88;
  unsigned int v89;
  char v90;
  unint64_t v91;
  unsigned __int8 v92;
  unint64_t v93;
  int v94;
  WTF::StringImpl *v95;
  int v96;
  _BYTE v97[7];
  _BYTE v98[7];
  _BYTE v99[7];
  _BYTE v100[7];
  JSC::VM *v101;
  WTF::StringImpl *v102;
  _QWORD v103[2];

  v101 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) == 2)
  {
LABEL_41:
    result = (uint64_t)WebCore::throwRequiredMemberTypeError((int)a2, (int)&v101, "codec", 6, "WebCodecsVideoEncoderConfig", 28, "DOMString", 10);
    goto LABEL_42;
  }
  if (((unint64_t)this & 0xFFFE000000000002) != 0)
    goto LABEL_160;
  Object = JSC::JSCell::getObject(this);
  if (!Object)
    goto LABEL_160;
  v6 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v8 = JSC::JSObject::get(v6, a2, (unint64_t)v95);
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
      WTF::StringImpl::destroy(v95, v7);
    else
      *(_DWORD *)v95 -= 2;
  }
  if (*((_DWORD *)v101 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v101);
    if ((_DWORD)result)
      goto LABEL_42;
  }
  if (v8 == 10)
  {
    LODWORD(v9) = 1;
  }
  else
  {
    v95 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
    v9 = WebCore::parseEnumeration<WebCore::WebCodecsAlphaOption>(a2, v8);
    if (*((_DWORD *)v95 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v95);
      if ((result & 1) != 0)
        goto LABEL_42;
    }
    if ((v9 & 0xFF00000000) == 0)
      goto LABEL_160;
  }
  WTF::AtomStringImpl::addLiteral();
  v11 = (JSC::JSCell *)JSC::JSObject::get(v6, a2, (unint64_t)v95);
  if (v95)
  {
    if (*(_DWORD *)v95 == 2)
      WTF::StringImpl::destroy(v95, v10);
    else
      *(_DWORD *)v95 -= 2;
  }
  if (*((_DWORD *)v101 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v101);
    if ((_DWORD)result)
      goto LABEL_42;
  }
  if (v11 == (JSC::JSCell *)10)
  {
    v12 = 0;
    v13 = 0;
    v14 = 0;
  }
  else
  {
    result = WebCore::convertDictionary<WebCore::AvcEncoderConfig>(v11, (uint64_t)a2, &v95);
    if (HIDWORD(v95))
      goto LABEL_42;
    v13 = v95;
    v14 = v95 & 0xFFFFFF00;
    v12 = 1;
  }
  WTF::AtomStringImpl::addLiteral();
  v16 = v95;
  v18 = JSC::JSObject::get(v6, a2, (unint64_t)v95);
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v17);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (*((_DWORD *)v101 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v101);
    if ((_DWORD)result)
      goto LABEL_42;
  }
  if (v18 == 10)
  {
    v19 = 0;
    v91 = 0;
    v92 = 0;
    goto LABEL_28;
  }
  result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(a2, v18, (uint64_t)&v95);
  if (v96)
  {
LABEL_42:
    *(_DWORD *)(a1 + 120) = 1;
    return result;
  }
  v92 = v95;
  v91 = (unint64_t)v95 & 0xFFFFFFFFFFFFFF00;
  v19 = 1;
LABEL_28:
  WTF::AtomStringImpl::addLiteral();
  v20 = v95;
  v22 = JSC::JSObject::get(v6, a2, (unint64_t)v95);
  if (v20)
  {
    if (*(_DWORD *)v20 == 2)
      WTF::StringImpl::destroy(v20, v21);
    else
      *(_DWORD *)v20 -= 2;
  }
  if (*((_DWORD *)v101 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v101);
    if ((_DWORD)result)
      goto LABEL_42;
  }
  v90 = v19;
  if (v22 == 10)
  {
    LODWORD(v23) = 1;
    goto LABEL_36;
  }
  v95 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
  v24 = v95;
  v23 = WebCore::parseEnumeration<WebCore::BitrateMode>(a2, v22);
  if (*((_DWORD *)v24 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v24);
    if ((result & 1) != 0)
      goto LABEL_42;
  }
  if ((v23 & 0xFF00000000) == 0)
  {
LABEL_160:
    result = JSC::throwTypeError();
    goto LABEL_42;
  }
LABEL_36:
  WTF::AtomStringImpl::addLiteral();
  v25 = v95;
  v27 = JSC::JSObject::get(v6, a2, (unint64_t)v95);
  if (v25)
  {
    if (*(_DWORD *)v25 == 2)
      WTF::StringImpl::destroy(v25, v26);
    else
      *(_DWORD *)v25 -= 2;
  }
  if (*((_DWORD *)v101 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v101);
    if ((_DWORD)result)
      goto LABEL_42;
  }
  if (v27 == 10)
    goto LABEL_41;
  v93 = v27;
  v28 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if ((v27 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v27 + 5) == 2)
  {
    v29 = *(_DWORD **)(v27 + 8);
    if ((v29 & 1) != 0)
    {
      v29 = *(_DWORD **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v27, a2);
      if (!v29)
        goto LABEL_48;
    }
    else if (!v29)
    {
LABEL_48:
      v103[0] = v29;
      goto LABEL_49;
    }
    *v29 += 2;
    goto LABEL_48;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v93, a2);
LABEL_49:
  v89 = v14;
  if (*((_DWORD *)v28 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v28);
    v30 = (WTF::StringImpl *)v103[0];
    if (hasExceptionsAfterHandlingTraps)
    {
      v96 = 1;
      v103[0] = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 2)
          WTF::StringImpl::destroy(v30, v74);
        else
          *(_DWORD *)v30 -= 2;
      }
      v30 = 0;
      v52 = 0;
      v53 = 1;
      v51 = 1;
      goto LABEL_130;
    }
  }
  else
  {
    v30 = (WTF::StringImpl *)v103[0];
  }
  v96 = 0;
  v95 = 0;
  WTF::AtomStringImpl::addLiteral();
  v31 = (WTF::StringImpl *)v93;
  v33 = JSC::JSObject::get(v6, a2, v93);
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v32);
    else
      *(_DWORD *)v31 -= 2;
  }
  if (*((_DWORD *)v101 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v101) & 1) != 0)
    goto LABEL_93;
  if (v33 == 10)
  {
    v87 = 0;
    v88 = 0;
    v86 = 0;
  }
  else
  {
    WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(a2, v33, &v93);
    if (HIDWORD(v93))
      goto LABEL_93;
    v88 = v93;
    v86 = v93 & 0xFFFFFF00;
    v87 = 1;
  }
  WTF::AtomStringImpl::addLiteral();
  v34 = (WTF::StringImpl *)v93;
  v36 = JSC::JSObject::get(v6, a2, v93);
  if (v34)
  {
    if (*(_DWORD *)v34 == 2)
      WTF::StringImpl::destroy(v34, v35);
    else
      *(_DWORD *)v34 -= 2;
  }
  if (*((_DWORD *)v101 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v101) & 1) != 0)
    goto LABEL_93;
  v85 = v13;
  if (v36 == 10)
  {
    v84 = 0;
    v37 = 0;
    v83 = 0;
    goto LABEL_67;
  }
  WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(a2, v36, &v93);
  v37 = v93;
  if (HIDWORD(v93))
  {
LABEL_93:
    v51 = 0;
    v52 = 0;
    goto LABEL_94;
  }
  v83 = v93 & 0xFFFFFF00;
  v84 = 1;
LABEL_67:
  WTF::AtomStringImpl::addLiteral();
  v38 = (WTF::StringImpl *)v93;
  v40 = JSC::JSObject::get(v6, a2, v93);
  if (v38)
  {
    if (*(_DWORD *)v38 == 2)
      WTF::StringImpl::destroy(v38, v39);
    else
      *(_DWORD *)v38 -= 2;
  }
  if (*((_DWORD *)v101 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v101) & 1) != 0)
    goto LABEL_93;
  if (v40 == 10)
  {
    v82 = 0;
    v41 = 0.0;
  }
  else
  {
    v93 = v40;
    v42 = (JSC::VM *)*((_QWORD *)a2 + 7);
    v103[0] = v42;
    if (v40 >= 0xFFFE000000000000)
    {
      v41 = (double)(int)v40;
    }
    else if (v40 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v93, a2);
      v41 = v77;
    }
    else
    {
      *(_QWORD *)&v41 = v40 - 0x2000000000000;
    }
    if (*((_DWORD *)v42 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v42) & 1) != 0)
      goto LABEL_93;
    if ((*(_QWORD *)&v41 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      JSC::throwTypeError();
      goto LABEL_93;
    }
    v82 = 1;
  }
  WTF::AtomStringImpl::addLiteral();
  v43 = (WTF::StringImpl *)v93;
  v45 = JSC::JSObject::get(v6, a2, v93);
  if (v43)
  {
    if (*(_DWORD *)v43 == 2)
      WTF::StringImpl::destroy(v43, v44);
    else
      *(_DWORD *)v43 -= 2;
  }
  if (*((_DWORD *)v101 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v101) & 1) != 0)
    goto LABEL_93;
  v81 = v12;
  if (v45 == 10)
  {
    LODWORD(v46) = 0;
  }
  else
  {
    v93 = *((_QWORD *)a2 + 7);
    v47 = (JSC::VM *)v93;
    v46 = WebCore::parseEnumeration<WebCore::HardwareAcceleration>(a2, v45);
    if (*((_DWORD *)v47 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v47) & 1) != 0)
      goto LABEL_93;
    if ((v46 & 0xFF00000000) == 0)
      goto LABEL_193;
  }
  WTF::AtomStringImpl::addLiteral();
  v48 = (WTF::StringImpl *)v93;
  v50 = JSC::JSObject::get(v6, a2, v93);
  if (v48)
  {
    if (*(_DWORD *)v48 == 2)
      WTF::StringImpl::destroy(v48, v49);
    else
      *(_DWORD *)v48 -= 2;
  }
  if (*((_DWORD *)v101 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v101) & 1) != 0)
    goto LABEL_93;
  if (v50 == 10)
  {
    WebCore::throwRequiredMemberTypeError((int)a2, (int)&v101, "height", 7, "WebCodecsVideoEncoderConfig", 28, "unsigned long", 14);
    goto LABEL_93;
  }
  WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(a2, v50, &v93);
  v79 = v93;
  if (HIDWORD(v93))
    goto LABEL_93;
  WTF::AtomStringImpl::addLiteral();
  v54 = (WTF::StringImpl *)v93;
  v56 = JSC::JSObject::get(v6, a2, v93);
  if (v54)
  {
    if (*(_DWORD *)v54 == 2)
      WTF::StringImpl::destroy(v54, v55);
    else
      *(_DWORD *)v54 -= 2;
  }
  if (*((_DWORD *)v101 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v101) & 1) != 0)
    goto LABEL_93;
  v80 = v9;
  if (v56 == 10)
  {
    v78 = 0;
    goto LABEL_105;
  }
  v93 = *((_QWORD *)a2 + 7);
  v57 = (JSC::VM *)v93;
  v58 = WebCore::parseEnumeration<WebCore::LatencyMode>(a2, v56);
  if (*((_DWORD *)v57 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v57) & 1) != 0)
    goto LABEL_93;
  if ((v58 & 0xFF00000000) == 0)
  {
LABEL_193:
    JSC::throwTypeError();
    goto LABEL_93;
  }
  v78 = v58;
LABEL_105:
  WTF::AtomStringImpl::addLiteral();
  v59 = (WTF::StringImpl *)v93;
  v61 = JSC::JSObject::get(v6, a2, v93);
  if (v59)
  {
    if (*(_DWORD *)v59 == 2)
      WTF::StringImpl::destroy(v59, v60);
    else
      *(_DWORD *)v59 -= 2;
  }
  if (*((_DWORD *)v101 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v101) & 1) != 0)
    goto LABEL_93;
  if (v61 == 10)
  {
    v52 = 0;
LABEL_121:
    WTF::AtomStringImpl::addLiteral();
    v66 = (WTF::StringImpl *)v93;
    v68 = JSC::JSObject::get(v6, a2, v93);
    if (v66)
    {
      if (*(_DWORD *)v66 == 2)
        WTF::StringImpl::destroy(v66, v67);
      else
        *(_DWORD *)v66 -= 2;
    }
    if (!*((_DWORD *)v101 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v101) & 1) == 0)
    {
      if (v68 == 10)
      {
        WebCore::throwRequiredMemberTypeError((int)a2, (int)&v101, "width", 6, "WebCodecsVideoEncoderConfig", 28, "unsigned long", 14);
      }
      else
      {
        WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(a2, v68, &v93);
        v69 = v93;
        v51 = HIDWORD(v93);
        if (!HIDWORD(v93))
        {
          v53 = 0;
          *(_QWORD *)a1 = v30;
          *(_QWORD *)(a1 + 8) = v69;
          *(_QWORD *)(a1 + 16) = v79;
          *(_QWORD *)(a1 + 24) = v83 | v37;
          *(_BYTE *)(a1 + 32) = v84;
          *(_DWORD *)(a1 + 33) = *(_DWORD *)v100;
          *(_DWORD *)(a1 + 36) = *(_DWORD *)&v100[3];
          *(_QWORD *)(a1 + 40) = v86 | v88;
          *(_BYTE *)(a1 + 48) = v87;
          *(_DWORD *)(a1 + 49) = *(_DWORD *)v99;
          *(_DWORD *)(a1 + 52) = *(_DWORD *)&v99[3];
          *(_QWORD *)(a1 + 56) = v91 | v92;
          *(_BYTE *)(a1 + 64) = v90;
          v70 = *(_DWORD *)v98;
          *(_DWORD *)(a1 + 68) = *(_DWORD *)&v98[3];
          *(_DWORD *)(a1 + 65) = v70;
          *(double *)(a1 + 72) = v41;
          *(_BYTE *)(a1 + 80) = v82;
          v71 = *(_DWORD *)v97;
          *(_DWORD *)(a1 + 84) = *(_DWORD *)&v97[3];
          *(_DWORD *)(a1 + 88) = v46;
          *(_DWORD *)(a1 + 81) = v71;
          *(_DWORD *)(a1 + 92) = v80;
          *(_QWORD *)(a1 + 96) = v52;
          *(_DWORD *)(a1 + 104) = v23;
          *(_DWORD *)(a1 + 108) = v78;
          *(_DWORD *)(a1 + 112) = v89 | v85;
          *(_BYTE *)(a1 + 116) = v81;
          v30 = 0;
          v52 = 0;
          goto LABEL_130;
        }
      }
      v51 = 0;
      v53 = 1;
LABEL_130:
      *(_DWORD *)(a1 + 120) = v53;
      goto LABEL_131;
    }
    v51 = 0;
LABEL_94:
    v53 = 1;
    goto LABEL_130;
  }
  v103[0] = v61;
  v62 = (JSC::VM *)*((_QWORD *)a2 + 7);
  if ((v61 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v61 + 5) == 2)
  {
    v63 = *(WTF::StringImpl **)(v61 + 8);
    if ((v63 & 1) != 0)
    {
      v63 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v61, a2);
      if (!v63)
        goto LABEL_116;
    }
    else if (!v63)
    {
LABEL_116:
      v102 = v63;
      goto LABEL_117;
    }
    *(_DWORD *)v63 += 2;
    goto LABEL_116;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v103, a2);
LABEL_117:
  if (!*((_DWORD *)v62 + 20))
  {
    v52 = v102;
LABEL_119:
    v64 = 0;
    v94 = 0;
    v93 = 0;
    v65 = 1;
    goto LABEL_120;
  }
  v75 = JSC::VM::hasExceptionsAfterHandlingTraps(v62);
  v52 = v102;
  if (!v75)
    goto LABEL_119;
  v64 = 1;
  v94 = 1;
  v102 = 0;
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
      WTF::StringImpl::destroy(v52, v76);
    else
      *(_DWORD *)v52 -= 2;
  }
  v65 = 0;
  v52 = 0;
  *(_DWORD *)(a1 + 120) = 1;
LABEL_120:
  ((void (*)(_QWORD *, unint64_t *))off_1E3321590[v64])(v103, &v93);
  if (v65)
    goto LABEL_121;
  v51 = 0;
LABEL_131:
  result = ((uint64_t (*)(unint64_t *, WTF::StringImpl **))off_1E3321590[v51])(&v93, &v95);
  if (v52)
  {
    if (*(_DWORD *)v52 == 2)
    {
      result = WTF::StringImpl::destroy(v52, v72);
      if (!v30)
        return result;
      goto LABEL_135;
    }
    *(_DWORD *)v52 -= 2;
  }
  if (!v30)
    return result;
LABEL_135:
  if (*(_DWORD *)v30 == 2)
    return WTF::StringImpl::destroy(v30, v72);
  *(_DWORD *)v30 -= 2;
  return result;
}

uint64_t WebCore::convertDictionary<WebCore::WebCodecsVideoFrame::Init>(uint64_t result, JSC::JSGlobalObject *a2, JSC::JSCell *this, double a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  JSC::VM *v10;
  int v11;
  char v12;
  unsigned __int8 v13;
  char v14;
  unsigned __int8 v15;
  char v16;
  unsigned __int8 v17;
  char v18;
  unint64_t v19;
  char v20;
  __int128 v21;
  uint64_t Object;
  JSC::Structure *v24;
  WTF::StringImpl *v25;
  WTF::StringImpl *v26;
  unint64_t v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  unint64_t v33;
  unint64_t v34;
  JSC::VM *v35;
  double v36;
  double v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  JSC::VM *v41;
  double v42;
  double v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  JSC::JSCell *v46;
  int v47;
  int v48;
  JSC::VM *v49;
  double v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  unsigned __int8 v55;
  double v56;
  char v57;
  char v58;
  int v59;
  _OWORD v60[2];
  int v61;
  _BYTE v62[7];
  _BYTE v63[7];
  _BYTE v64[7];
  _BYTE v65[7];
  _BYTE v66[7];
  JSC::VM *v67;

  v9 = result;
  v10 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v67 = v10;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if (((unint64_t)this & 0xFFFE000000000002) == 0)
    {
      Object = JSC::JSCell::getObject(this);
      if (Object)
      {
        v24 = (JSC::Structure *)Object;
        WTF::AtomStringImpl::addLiteral();
        v8 = JSC::JSObject::get(v24, a2, *(unint64_t *)&v60[0]);
        if (*(_QWORD *)&v60[0])
        {
          if (**(_DWORD **)&v60[0] == 2)
            WTF::StringImpl::destroy(*(WTF::StringImpl **)&v60[0], v25);
          else
            **(_DWORD **)&v60[0] -= 2;
        }
        if (*((_DWORD *)v10 + 20))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(v10);
          if ((_DWORD)result)
            goto LABEL_84;
        }
        if (v8 == 10)
        {
          v59 = 0;
          goto LABEL_14;
        }
        *(_QWORD *)&v60[0] = *((_QWORD *)a2 + 7);
        v8 = WebCore::parseEnumeration<WebCore::WebCodecsAlphaOption>(a2, v8);
        if (*(_DWORD *)(*(_QWORD *)&v60[0] + 80))
        {
          result = JSC::VM::hasExceptionsAfterHandlingTraps(*(JSC::VM **)&v60[0]);
          if ((result & 1) != 0)
            goto LABEL_84;
        }
        if ((v8 & 0xFF00000000) != 0)
        {
          v59 = v8;
LABEL_14:
          WTF::AtomStringImpl::addLiteral();
          v27 = JSC::JSObject::get(v24, a2, *(unint64_t *)&v60[0]);
          if (*(_QWORD *)&v60[0])
          {
            if (**(_DWORD **)&v60[0] == 2)
              WTF::StringImpl::destroy(*(WTF::StringImpl **)&v60[0], v26);
            else
              **(_DWORD **)&v60[0] -= 2;
          }
          if (*((_DWORD *)v10 + 20))
          {
            result = JSC::VM::hasExceptionsAfterHandlingTraps(v10);
            if ((_DWORD)result)
              goto LABEL_84;
          }
          if (v27 == 10)
          {
            v58 = 0;
            v13 = 0;
          }
          else
          {
            result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(a2, v27, v60);
            v13 = v60[0];
            if (HIDWORD(*(_QWORD *)&v60[0]))
              goto LABEL_84;
            v53 = *(_QWORD *)&v60[0] >> 8;
            v58 = 1;
          }
          WTF::AtomStringImpl::addLiteral();
          v28 = *(WTF::StringImpl **)&v60[0];
          v30 = JSC::JSObject::get(v24, a2, *(unint64_t *)&v60[0]);
          if (v28)
          {
            if (*(_DWORD *)v28 == 2)
              WTF::StringImpl::destroy(v28, v29);
            else
              *(_DWORD *)v28 -= 2;
          }
          if (*((_DWORD *)v10 + 20))
          {
            result = JSC::VM::hasExceptionsAfterHandlingTraps(v10);
            if ((_DWORD)result)
              goto LABEL_84;
          }
          if (v30 == 10)
          {
            v57 = 0;
            v15 = 0;
          }
          else
          {
            result = (uint64_t)WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(a2, v30, v60);
            v15 = v60[0];
            if (HIDWORD(*(_QWORD *)&v60[0]))
              goto LABEL_84;
            v52 = *(_QWORD *)&v60[0] >> 8;
            v57 = 1;
          }
          WTF::AtomStringImpl::addLiteral();
          v31 = *(WTF::StringImpl **)&v60[0];
          v33 = JSC::JSObject::get(v24, a2, *(unint64_t *)&v60[0]);
          if (v31)
          {
            if (*(_DWORD *)v31 == 2)
              WTF::StringImpl::destroy(v31, v32);
            else
              *(_DWORD *)v31 -= 2;
          }
          if (*((_DWORD *)v10 + 20))
          {
            result = JSC::VM::hasExceptionsAfterHandlingTraps(v10);
            if ((_DWORD)result)
              goto LABEL_84;
          }
          if (v33 == 10)
          {
            v54 = 0;
            v55 = 0;
          }
          else
          {
            *(_QWORD *)&v60[0] = v33;
            if (v33 < 0xFFFE000000000000 || (v33 & 0x80000000) != 0)
            {
              v35 = (JSC::VM *)*((_QWORD *)a2 + 7);
              if (v33 >= 0xFFFE000000000000)
              {
                v36 = (double)(int)v33;
              }
              else if (v33 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
              {
                v8 = *((_QWORD *)a2 + 7);
                JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v60, a2);
                v35 = (JSC::VM *)v8;
              }
              else
              {
                *(_QWORD *)&v36 = v33 - 0x2000000000000;
              }
              if (*((_DWORD *)v35 + 20))
              {
                v56 = v36;
                result = JSC::VM::hasExceptionsAfterHandlingTraps(v35);
                v36 = v56;
                if ((result & 1) != 0)
                  goto LABEL_84;
              }
              if (fabs(v36) == INFINITY)
              {
                v34 = 0;
              }
              else
              {
                v37 = fmod(trunc(v36), 1.84467441e19);
                if (v37 >= 0.0)
                  v34 = (unint64_t)v37;
                else
                  v34 = -(uint64_t)(unint64_t)-v37;
              }
            }
            else
            {
              v34 = v33;
            }
            v55 = v34;
            v51 = v34 >> 8;
            v54 = 1;
          }
          WTF::AtomStringImpl::addLiteral();
          v38 = *(WTF::StringImpl **)&v60[0];
          v40 = JSC::JSObject::get(v24, a2, *(unint64_t *)&v60[0]);
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
              WTF::StringImpl::destroy(v38, v39);
            else
              *(_DWORD *)v38 -= 2;
          }
          if (*((_DWORD *)v10 + 20))
          {
            result = JSC::VM::hasExceptionsAfterHandlingTraps(v10);
            if ((_DWORD)result)
              goto LABEL_84;
          }
          if (v40 == 10)
          {
            v18 = 0;
            LOBYTE(v19) = 0;
          }
          else
          {
            *(_QWORD *)&v60[0] = v40;
            if (v40 < 0xFFFE000000000000)
            {
              v41 = (JSC::VM *)*((_QWORD *)a2 + 7);
              if (v40 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
              {
                v49 = (JSC::VM *)*((_QWORD *)a2 + 7);
                JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v60, a2);
                v41 = v49;
              }
              else
              {
                *(_QWORD *)&v42 = v40 - 0x2000000000000;
              }
              if (*((_DWORD *)v41 + 20))
              {
                v50 = v42;
                result = JSC::VM::hasExceptionsAfterHandlingTraps(v41);
                v42 = v50;
                if ((result & 1) != 0)
                  goto LABEL_84;
              }
              if (fabs(v42) == INFINITY)
              {
                v19 = 0;
              }
              else
              {
                v43 = fmod(trunc(v42), 1.84467441e19);
                if (v43 >= 0.0)
                  v19 = (unint64_t)v43;
                else
                  v19 = -(uint64_t)(unint64_t)-v43;
              }
            }
            else
            {
              v19 = (int)v40;
            }
            v8 = v19 >> 8;
            v18 = 1;
          }
          WTF::AtomStringImpl::addLiteral();
          v44 = *(WTF::StringImpl **)&v60[0];
          result = JSC::JSObject::get(v24, a2, *(unint64_t *)&v60[0]);
          v46 = (JSC::JSCell *)result;
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
              result = WTF::StringImpl::destroy(v44, v45);
            else
              *(_DWORD *)v44 -= 2;
          }
          if (*((_DWORD *)v10 + 20))
          {
            result = JSC::VM::hasExceptionsAfterHandlingTraps(v10);
            if ((_DWORD)result)
              goto LABEL_84;
          }
          if (v46 == (JSC::JSCell *)10)
          {
            v20 = 0;
            v21 = 0uLL;
LABEL_79:
            v11 = v59;
            v14 = v57;
            v12 = v58;
            v6 = v52;
            v5 = v53;
            v17 = v55;
            v16 = v54;
            v7 = v51;
            goto LABEL_80;
          }
          result = WebCore::convertDictionary<WebCore::DOMRectInit>(v46, (uint64_t)a2, (uint64_t)v60);
          if (!v61)
          {
            v21 = v60[0];
            a5 = (__n128)v60[1];
            v20 = 1;
            goto LABEL_79;
          }
LABEL_84:
          *(_DWORD *)(v9 + 120) = 1;
          return result;
        }
      }
    }
    result = JSC::throwTypeError();
    goto LABEL_84;
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  LOBYTE(v19) = 0;
  v20 = 0;
  v21 = 0uLL;
LABEL_80:
  *(_QWORD *)(v9 + 8) = v17 | (v7 << 8);
  *(_BYTE *)(v9 + 16) = v16;
  *(_DWORD *)(v9 + 17) = *(_DWORD *)v66;
  *(_DWORD *)(v9 + 20) = *(_DWORD *)&v66[3];
  *(_QWORD *)(v9 + 24) = v19 | (v8 << 8);
  *(_BYTE *)(v9 + 32) = v18;
  *(_DWORD *)(v9 + 33) = *(_DWORD *)v65;
  *(_DWORD *)(v9 + 36) = *(_DWORD *)&v65[3];
  *(_DWORD *)(v9 + 40) = v11;
  *(_OWORD *)(v9 + 48) = v21;
  *(__n128 *)(v9 + 64) = a5;
  *(_BYTE *)(v9 + 80) = v20;
  v47 = *(_DWORD *)v64;
  *(_DWORD *)(v9 + 84) = *(_DWORD *)&v64[3];
  *(_DWORD *)(v9 + 81) = v47;
  *(_QWORD *)(v9 + 88) = v15 | (unint64_t)(v6 << 8);
  *(_BYTE *)(v9 + 96) = v14;
  *(_DWORD *)(v9 + 100) = *(_DWORD *)&v63[3];
  *(_DWORD *)(v9 + 97) = *(_DWORD *)v63;
  *(_QWORD *)(v9 + 104) = v13 | (unint64_t)(v5 << 8);
  *(_BYTE *)(v9 + 112) = v12;
  v48 = *(_DWORD *)v62;
  *(_QWORD *)(v9 + 116) = *(unsigned int *)&v62[3];
  *(_DWORD *)(v9 + 113) = v48;
  return result;
}

JSC::JSCell *WebCore::convertDictionary<WebCore::WebCodecsVideoFrame::CopyToOptions>(JSC::JSCell *result, JSC::JSGlobalObject *a2, JSC::JSCell *this, double a4, __n128 a5)
{
  uint64_t v5;
  uint64_t v6;
  JSC::VM *v7;
  int v8;
  WTF *v9;
  char v10;
  __int128 v11;
  uint64_t Object;
  JSC::Structure *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  JSC::VM *v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  JSC::JSCell *v22;
  void *v23;
  WTF *v24;
  WTF::StringImpl *v25[2];
  __n128 v26;
  int v27;
  _BYTE v28[7];
  JSC::VM *v29;
  JSC::VM *v30;
  WTF *v31;
  uint64_t v32;

  v6 = (uint64_t)result;
  v7 = (JSC::VM *)*((_QWORD *)a2 + 7);
  v29 = v7;
  if (((unint64_t)this & 0xFFFFFFFFFFFFFFF7) != 2)
  {
    if (((unint64_t)this & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(this)) == 0)
    {
      result = (JSC::JSCell *)JSC::throwTypeError();
LABEL_40:
      *(_DWORD *)(v6 + 72) = 1;
      return result;
    }
    v14 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v16 = JSC::JSObject::get(v14, a2, (unint64_t)v25[0]);
    if (v25[0])
    {
      if (*(_DWORD *)v25[0] == 2)
        WTF::StringImpl::destroy(v25[0], v15);
      else
        *(_DWORD *)v25[0] -= 2;
    }
    if (*((_DWORD *)v7 + 20))
    {
      result = (JSC::JSCell *)JSC::VM::hasExceptionsAfterHandlingTraps(v7);
      if ((_DWORD)result)
        goto LABEL_40;
    }
    if (v16 == 10)
    {
      v8 = 0;
      v9 = 0;
      goto LABEL_21;
    }
    v17 = (JSC::VM *)*((_QWORD *)a2 + 7);
    v30 = v17;
    if ((v16 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v16 + 5) <= 0x16u)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      JSC::throwTypeError();
      v20 = v25[0];
      v25[0] = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, v19);
        else
          *(_DWORD *)v20 -= 2;
      }
      v26.n128_u32[0] = 1;
    }
    else
    {
      v31 = 0;
      v32 = 0;
      v25[0] = (WTF::StringImpl *)&v31;
      JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::PlaneLayout>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::PlaneLayout,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(a2, v16, (uint64_t *)v25);
      if (!*((_DWORD *)v17 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v17))
      {
        v18 = 0;
        v9 = v31;
        v5 = v32;
        v26.n128_u32[0] = 0;
        v8 = 1;
        v25[0] = 0;
        v25[1] = 0;
        goto LABEL_20;
      }
      v24 = v31;
      v26.n128_u32[0] = 1;
      if (v31)
      {
        v31 = 0;
        LODWORD(v32) = 0;
        WTF::fastFree(v24, v23);
      }
    }
    v8 = 0;
    v9 = 0;
    v18 = 1;
    *(_DWORD *)(v6 + 72) = 1;
LABEL_20:
    result = (JSC::JSCell *)((uint64_t (*)(WTF **, WTF::StringImpl **))off_1E3321CE0[v18])(&v31, v25);
    if ((v8 & 1) == 0)
      goto LABEL_32;
LABEL_21:
    WTF::AtomStringImpl::addLiteral();
    v21 = v25[0];
    result = (JSC::JSCell *)JSC::JSObject::get(v14, a2, (unint64_t)v25[0]);
    v22 = result;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        result = (JSC::JSCell *)WTF::StringImpl::destroy(v21, a2);
      else
        *(_DWORD *)v21 -= 2;
    }
    if (!*((_DWORD *)v7 + 20)
      || (result = (JSC::JSCell *)JSC::VM::hasExceptionsAfterHandlingTraps(v7), !(_DWORD)result))
    {
      if (v22 == (JSC::JSCell *)10)
      {
        v10 = 0;
        v11 = 0uLL;
        goto LABEL_29;
      }
      result = (JSC::JSCell *)WebCore::convertDictionary<WebCore::DOMRectInit>(v22, (uint64_t)a2, (uint64_t)v25);
      if (!v27)
      {
        v11 = *(_OWORD *)v25;
        a5 = v26;
        v10 = 1;
        goto LABEL_29;
      }
    }
    *(_DWORD *)(v6 + 72) = 1;
    if (!v8)
      return result;
    goto LABEL_33;
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0uLL;
LABEL_29:
  *(_OWORD *)(v6 + 8) = v11;
  *(__n128 *)(v6 + 24) = a5;
  *(_BYTE *)(v6 + 40) = v10;
  *(_DWORD *)(v6 + 41) = *(_DWORD *)v28;
  *(_DWORD *)(v6 + 44) = *(_DWORD *)&v28[3];
  *(_BYTE *)(v6 + 48) = 0;
  *(_BYTE *)(v6 + 64) = 0;
  if (v8)
  {
    *(_QWORD *)(v6 + 48) = v9;
    *(_QWORD *)(v6 + 56) = v5;
    *(_BYTE *)(v6 + 64) = 1;
    v9 = 0;
  }
  *(_DWORD *)(v6 + 72) = 0;
LABEL_32:
  if (!v8)
    return result;
LABEL_33:
  if (v9)
    return (JSC::JSCell *)WTF::fastFree(v9, a2);
  return result;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSWebCodecsVideoFrame>::construct(JSC *this, uint64_t a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char **v8;
  BOOL v9;
  JSValue v10;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  char **v15;
  BOOL v16;
  uint64_t v17;
  char **v19;
  char **v21;
  char **v23;
  char **v25;
  char **v27;
  char **v29;
  uint64_t v32;
  char **v34;
  char **v36;
  char **v38;
  char **v40;
  char **v42;
  char **v44;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v5 = *(int *)(a2 + 32) - 1;
  if (v5 >= 2)
    v5 = 2;
  if (!v5)
  {
    v10.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v4, this, v10);
  }
  if (v5 != 2)
  {
    v6 = *(_QWORD *)(a2 + 48);
    if ((v6 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v6 + 5) >= 0x17u)
    {
      v7 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
      v8 = (char **)(16 * v7);
      if ((_DWORD)v7)
        v9 = v8 == &WebCore::JSHTMLImageElement::s_info;
      else
        v9 = 1;
      if (!v9)
      {
        v17 = 16 * v7;
        do
          v17 = *(_QWORD *)(v17 + 16);
        while ((char **)v17 != &WebCore::JSHTMLImageElement::s_info && v17 != 0);
        if (!v17 && v8 != &WebCore::JSSVGImageElement::s_info)
        {
          v19 = v8;
          do
            v19 = (char **)v19[2];
          while (v19 != &WebCore::JSSVGImageElement::s_info && v19 != 0);
          if (!v19 && v8 != &WebCore::JSHTMLCanvasElement::s_info)
          {
            v21 = v8;
            do
              v21 = (char **)v21[2];
            while (v21 != &WebCore::JSHTMLCanvasElement::s_info && v21 != 0);
            if (!v21 && v8 != &WebCore::JSImageBitmap::s_info)
            {
              v23 = v8;
              do
                v23 = (char **)v23[2];
              while (v23 != &WebCore::JSImageBitmap::s_info && v23 != 0);
              if (!v23 && v8 != &WebCore::JSCSSStyleImageValue::s_info)
              {
                v25 = v8;
                do
                  v25 = (char **)v25[2];
                while (v25 != &WebCore::JSCSSStyleImageValue::s_info && v25 != 0);
                if (!v25 && v8 != &WebCore::JSOffscreenCanvas::s_info)
                {
                  v27 = v8;
                  do
                    v27 = (char **)v27[2];
                  while (v27 != &WebCore::JSOffscreenCanvas::s_info && v27 != 0);
                  if (!v27 && v8 != &WebCore::JSHTMLVideoElement::s_info)
                  {
                    v29 = v8;
                    do
                      v29 = (char **)v29[2];
                    while (v29 != &WebCore::JSHTMLVideoElement::s_info && v29 != 0);
                    if (!v29)
                    {
                      if (v8 != &WebCore::JSWebCodecsVideoFrame::s_info)
                      {
                        do
                          v8 = (char **)v8[2];
                        while (v8 != &WebCore::JSWebCodecsVideoFrame::s_info && v8 != 0);
                        if (!v8)
                          return (JSCell *)JSC::throwTypeError();
                      }
                      return WebCore::constructJSWebCodecsVideoFrame2(this, (JSC::JSGlobalObject *)a2, a3);
                    }
                  }
                }
              }
            }
          }
        }
        return WebCore::constructJSWebCodecsVideoFrame1(this, (JSC::JSGlobalObject *)a2, a3);
      }
      if ((_DWORD)v7)
        return WebCore::constructJSWebCodecsVideoFrame1(this, (JSC::JSGlobalObject *)a2, a3);
    }
    return (JSCell *)JSC::throwTypeError();
  }
  v12 = *(_QWORD *)(a2 + 48);
  if ((v12 & 0xFFFE000000000002) != 0)
    return (JSCell *)JSC::throwTypeError();
  v13 = *(unsigned __int8 *)(v12 + 5);
  if (v13 < 0x17)
    return (JSCell *)JSC::throwTypeError();
  v14 = *(unsigned int *)(16 * (*(_DWORD *)v12 & 0xFFFFFFFE) + 0x4C);
  v15 = (char **)(16 * v14);
  if ((_DWORD)v14)
    v16 = v15 == &WebCore::JSHTMLImageElement::s_info;
  else
    v16 = 1;
  if (v16)
  {
    if ((_DWORD)v14)
      return WebCore::constructJSWebCodecsVideoFrame1(this, (JSC::JSGlobalObject *)a2, a3);
LABEL_23:
    if (v13 - 39 <= 0xB || v13 == 38)
      return WebCore::constructJSWebCodecsVideoFrame3(this, (JSC::JSGlobalObject *)a2, a3);
    return (JSCell *)JSC::throwTypeError();
  }
  v32 = 16 * v14;
  do
    v32 = *(_QWORD *)(v32 + 16);
  while ((char **)v32 != &WebCore::JSHTMLImageElement::s_info && v32 != 0);
  if (v32 || v15 == &WebCore::JSSVGImageElement::s_info)
    return WebCore::constructJSWebCodecsVideoFrame1(this, (JSC::JSGlobalObject *)a2, a3);
  v34 = v15;
  do
    v34 = (char **)v34[2];
  while (v34 != &WebCore::JSSVGImageElement::s_info && v34 != 0);
  if (v34 || v15 == &WebCore::JSHTMLCanvasElement::s_info)
    return WebCore::constructJSWebCodecsVideoFrame1(this, (JSC::JSGlobalObject *)a2, a3);
  v36 = v15;
  do
    v36 = (char **)v36[2];
  while (v36 != &WebCore::JSHTMLCanvasElement::s_info && v36 != 0);
  if (v36 || v15 == &WebCore::JSImageBitmap::s_info)
    return WebCore::constructJSWebCodecsVideoFrame1(this, (JSC::JSGlobalObject *)a2, a3);
  v38 = v15;
  do
    v38 = (char **)v38[2];
  while (v38 != &WebCore::JSImageBitmap::s_info && v38 != 0);
  if (v38 || v15 == &WebCore::JSCSSStyleImageValue::s_info)
    return WebCore::constructJSWebCodecsVideoFrame1(this, (JSC::JSGlobalObject *)a2, a3);
  v40 = v15;
  do
    v40 = (char **)v40[2];
  while (v40 != &WebCore::JSCSSStyleImageValue::s_info && v40 != 0);
  if (v40 || v15 == &WebCore::JSOffscreenCanvas::s_info)
    return WebCore::constructJSWebCodecsVideoFrame1(this, (JSC::JSGlobalObject *)a2, a3);
  v42 = v15;
  do
    v42 = (char **)v42[2];
  while (v42 != &WebCore::JSOffscreenCanvas::s_info && v42 != 0);
  if (v42 || v15 == &WebCore::JSHTMLVideoElement::s_info)
    return WebCore::constructJSWebCodecsVideoFrame1(this, (JSC::JSGlobalObject *)a2, a3);
  v44 = v15;
  do
    v44 = (char **)v44[2];
  while (v44 != &WebCore::JSHTMLVideoElement::s_info && v44 != 0);
  if (v44)
    return WebCore::constructJSWebCodecsVideoFrame1(this, (JSC::JSGlobalObject *)a2, a3);
  if (v15 != &WebCore::JSWebCodecsVideoFrame::s_info)
  {
    do
      v15 = (char **)v15[2];
    while (v15 != &WebCore::JSWebCodecsVideoFrame::s_info && v15 != 0);
    if (!v15)
      goto LABEL_23;
  }
  return WebCore::constructJSWebCodecsVideoFrame2(this, (JSC::JSGlobalObject *)a2, a3);
}

JSCell *WebCore::constructJSWebCodecsVideoFrame1(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  char **v12;
  BOOL v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  char **v25;
  BOOL v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  JSCell *v33;
  int v34;
  uint64_t v35;
  uint64_t v38;
  double v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  _OWORD v45[7];
  _BYTE v46[8];
  int v47;
  unsigned __int8 v48[16];
  int v49;
  JSC::VM *v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  _BYTE v60[8];
  int v61;
  int v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v50 = v5;
  v6 = *((_QWORD *)a2 + 3);
  v7 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v6 + 40));
  if (!v7)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(this, &v50, (uint64_t)"VideoFrame", 11);
  v8 = v7;
  v9 = *((_QWORD *)a2 + 6);
  *(_QWORD *)&v45[0] = *((_QWORD *)this + 7);
  if ((v9 & 0xFFFE000000000002) != 0)
    goto LABEL_26;
  v10 = *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C);
  v11 = *(_DWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C) != 0;
  v12 = (char **)(16 * v10);
  if ((_DWORD)v10)
    v13 = v12 == &WebCore::JSHTMLImageElement::s_info;
  else
    v13 = 1;
  v14 = *(_DWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C) != 0;
  if (!v13)
  {
    v15 = 16 * v10;
    do
    {
      v15 = *(_QWORD *)(v15 + 16);
      v14 = v15 != 0;
    }
    while ((char **)v15 != &WebCore::JSHTMLImageElement::s_info && v15 != 0);
  }
  if (!v14 || (v17 = *(_QWORD *)(v9 + 24)) == 0)
  {
    if ((_DWORD)v10 && v12 != &WebCore::JSSVGImageElement::s_info)
    {
      do
      {
        v12 = (char **)v12[2];
        v11 = v12 != 0;
      }
      while (v12 != &WebCore::JSSVGImageElement::s_info && v12 != 0);
    }
    if (v11)
    {
      v20 = *(_QWORD *)(v9 + 24);
      if (v20)
      {
        *(_DWORD *)(v20 + 24) += 2;
        v51 = v20;
        v18 = 1;
LABEL_76:
        LODWORD(v52) = v18;
        goto LABEL_77;
      }
    }
LABEL_26:
    v21 = JSC::jsDynamicCast<WebCore::JSHTMLCanvasElement *>(v9);
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 24);
      if (v22)
      {
        *(_DWORD *)(v22 + 24) += 2;
        v51 = v22;
        v18 = 2;
        goto LABEL_76;
      }
    }
    if ((v9 & 0xFFFE000000000002) == 0)
    {
      v23 = *(unsigned int *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C);
      v24 = *(_DWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C) != 0;
      v25 = (char **)(16 * v23);
      if ((_DWORD)v23)
        v26 = v25 == &WebCore::JSImageBitmap::s_info;
      else
        v26 = 1;
      v27 = *(_DWORD *)(16 * (*(_DWORD *)v9 & 0xFFFFFFFE) + 0x4C) != 0;
      if (!v26)
      {
        v28 = 16 * v23;
        do
        {
          v28 = *(_QWORD *)(v28 + 16);
          v27 = v28 != 0;
        }
        while ((char **)v28 != &WebCore::JSImageBitmap::s_info && v28 != 0);
      }
      if (v27)
      {
        v30 = *(_QWORD *)(v9 + 24);
        if (v30)
        {
          ++*(_DWORD *)(v30 + 8);
          v18 = 3;
LABEL_75:
          v51 = v30;
          goto LABEL_76;
        }
      }
      if ((_DWORD)v23 && v25 != &WebCore::JSCSSStyleImageValue::s_info)
      {
        v31 = 16 * v23;
        do
        {
          v31 = *(_QWORD *)(v31 + 16);
          v24 = v31 != 0;
        }
        while ((char **)v31 != &WebCore::JSCSSStyleImageValue::s_info && v31 != 0);
      }
      if (v24)
      {
        v30 = *(_QWORD *)(v9 + 24);
        if (v30)
        {
          ++*(_DWORD *)(v30 + 8);
          v18 = 4;
          goto LABEL_75;
        }
      }
      if (!(_DWORD)v23 || v25 == &WebCore::JSOffscreenCanvas::s_info)
      {
        if (!(_DWORD)v23)
          goto LABEL_57;
LABEL_74:
        v38 = *(_QWORD *)(v9 + 24);
        v30 = v38 - 144;
        ++*(_DWORD *)(v38 - 120);
        v18 = 5;
        goto LABEL_75;
      }
      v35 = 16 * v23;
      do
        v35 = *(_QWORD *)(v35 + 16);
      while ((char **)v35 != &WebCore::JSOffscreenCanvas::s_info && v35 != 0);
      if (v35)
        goto LABEL_74;
      if (v25 == &WebCore::JSHTMLVideoElement::s_info)
        goto LABEL_110;
      do
        v25 = (char **)v25[2];
      while (v25 != &WebCore::JSHTMLVideoElement::s_info && v25 != 0);
      if (v25)
      {
LABEL_110:
        v30 = *(_QWORD *)(v9 + 24);
        if (v30)
        {
          *(_DWORD *)(v30 + 24) += 2;
          v18 = 6;
          goto LABEL_75;
        }
      }
    }
LABEL_57:
    JSC::throwTypeError();
    v33 = 0;
    v34 = 1;
    v62 = 1;
LABEL_96:
    ((void (*)(uint64_t *, _BYTE *))off_1E3321D70[v34])(&v51, v60);
    return v33;
  }
  v18 = 0;
  *(_DWORD *)(v17 + 24) += 2;
  v51 = v17;
  LODWORD(v52) = 0;
LABEL_77:
  BYTE8(v52) = 1;
  v60[0] = 0;
  v61 = -1;
  ((void (*)(unsigned __int8 *, _BYTE *, uint64_t *))off_1E3321D28[v18])(v48, v60, &v51);
  v61 = v18;
  v62 = 0;
  if (!BYTE8(v52)
    || (_DWORD)v52 == -1
    || (((void (*)(unsigned __int8 *, uint64_t *))off_1E3321CF0[v52])(v48, &v51),
        (v34 = v62) == 0))
  {
    if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
      v41 = 10;
    else
      v41 = *((_QWORD *)a2 + 7);
    WebCore::convertDictionary<WebCore::WebCodecsVideoFrame::Init>((uint64_t)&v51, this, (JSC::JSCell *)v41, v39, v40);
    if (v59)
    {
      v33 = 0;
LABEL_94:
      v34 = v62;
      goto LABEL_95;
    }
    if (!v62)
    {
      v42 = v6;
      v46[0] = 0;
      v47 = -1;
      v43 = v61;
      if (v61 != -1)
      {
        ((void (*)(_OWORD *, _BYTE *, _BYTE *))off_1E3321D28[v61])(v45, v46, v60);
        v47 = v43;
      }
      v45[4] = v56;
      v45[5] = v57;
      v45[6] = v58;
      v45[0] = v52;
      v45[1] = v53;
      v45[2] = v54;
      v45[3] = v55;
      WebCore::WebCodecsVideoFrame::create(v8, (uint64_t)v46, (uint64_t)v45, (uint64_t)v48);
      if (v47 != -1)
        ((void (*)(_OWORD *, _BYTE *))off_1E3321CF0[v47])(v45, v46);
      if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
      {
        v33 = 0;
      }
      else
      {
        v33 = (JSCell *)WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::WebCodecsVideoFrame>,WebCore::ExceptionOr<WTF::Ref<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>>>(this, *(_QWORD *)(v42 + 40), &v50, v48);
        if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0
          || (WebCore::setSubclassStructureIfNeeded<WebCore::WebCodecsVideoFrame>(this, (uint64_t)a2, v33),
              *((_DWORD *)v5 + 20))
          && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
        {
          v33 = 0;
        }
      }
      if (v49 != -1)
        ((void (*)(_OWORD *, unsigned __int8 *))off_1E3321D60[v49])(v45, v48);
      goto LABEL_94;
    }
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v33 = 0;
LABEL_95:
  if (v34 != -1)
    goto LABEL_96;
  return v33;
}

JSCell *WebCore::constructJSWebCodecsVideoFrame2(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  __n128 v10;
  uint64_t v11;
  WebCore::ScriptExecutionContext *v12;
  uint64_t v13;
  _BOOL4 v14;
  char **v15;
  BOOL v16;
  JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v22[7];
  uint64_t v23;
  unsigned __int8 v24[16];
  int v25;
  JSC::VM *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v5;
  v6 = *((_QWORD *)a2 + 3);
  v7 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v6 + 40));
  if (!v7)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(this, &v26, (uint64_t)"VideoFrame", 11);
  v11 = *((_QWORD *)a2 + 6);
  v27 = *((_QWORD *)this + 7);
  if ((v11 & 0xFFFE000000000002) != 0)
    goto LABEL_13;
  v12 = (WebCore::ScriptExecutionContext *)v7;
  v13 = *(unsigned int *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C);
  v14 = *(_DWORD *)(16 * (*(_DWORD *)v11 & 0xFFFFFFFE) + 0x4C) != 0;
  v15 = (char **)(16 * v13);
  if ((_DWORD)v13)
    v16 = v15 == &WebCore::JSWebCodecsVideoFrame::s_info;
  else
    v16 = 1;
  if (!v16)
  {
    do
    {
      v15 = (char **)v15[2];
      v14 = v15 != 0;
    }
    while (v15 != &WebCore::JSWebCodecsVideoFrame::s_info && v15 != 0);
  }
  if (v14 && (v19 = *(_QWORD *)(v11 + 24)) != 0)
  {
    if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
      v20 = 10;
    else
      v20 = *((_QWORD *)a2 + 7);
    WebCore::convertDictionary<WebCore::WebCodecsVideoFrame::Init>((uint64_t)&v27, this, (JSC::JSCell *)v20, v9, v10);
    if (v35)
    {
      return 0;
    }
    else
    {
      ++*(_DWORD *)(v19 + 16);
      v23 = v19;
      v22[4] = v32;
      v22[5] = v33;
      v22[6] = v34;
      v22[0] = v28;
      v22[1] = v29;
      v22[2] = v30;
      v22[3] = v31;
      if (*(_BYTE *)(v19 + 152))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v24[0] = 8;
        v25 = 1;
      }
      else
      {
        WebCore::WebCodecsVideoFrame::initializeFrameFromOtherFrame(v12, &v23, (uint64_t)v22, 1, (uint64_t)v24);
      }
      if (*(_DWORD *)(v19 + 16) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
      else
        --*(_DWORD *)(v19 + 16);
      if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0
        || (v18 = (JSCell *)WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::WebCodecsVideoFrame>,WebCore::ExceptionOr<WTF::Ref<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>>>(this, *(_QWORD *)(v6 + 40), &v26, v24), *((_DWORD *)v5 + 20))&& (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0|| (WebCore::setSubclassStructureIfNeeded<WebCore::WebCodecsVideoFrame>(this, (uint64_t)a2, v18), *((_DWORD *)v5 + 20))&& (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
      {
        v18 = 0;
      }
      if (v25 != -1)
        ((void (*)(_OWORD *, unsigned __int8 *))off_1E3321D60[v25])(v22, v24);
    }
  }
  else
  {
LABEL_13:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v27, 0, "image", 6, "VideoFrame", 11, v8, 0, 0, "WebCodecsVideoFrame", 20);
    return 0;
  }
  return v18;
}

JSCell *WebCore::constructJSWebCodecsVideoFrame3(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  WTF::StringImpl *v3;
  unint64_t v6;
  uint64_t v7;
  WebCore::ScriptExecutionContext *v8;
  int v9;
  JSC::JSCell *v10;
  uint64_t Object;
  JSC::Structure *v12;
  WTF::StringImpl *v13;
  char *v14;
  char *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t (*v21)();
  WTF::StringImpl *v22;
  void *v23;
  WTF *v24;
  JSC::VM *v25;
  JSCell *v26;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  WTF::StringImpl *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  uint64_t v43;
  WTF *v44;
  JSC::VM *v45;
  int v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  void *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  unint64_t v52;
  WTF::StringImpl **v53;
  WTF::StringImpl *v54;
  WTF::StringImpl *v55;
  JSC::JSCell *v56;
  __int128 v57;
  char v58;
  __int128 v59;
  void *v60;
  WTF *v61;
  int v62;
  void *v63;
  char v64;
  uint64_t v65;
  char v66;
  unsigned __int8 v67;
  uint64_t v68;
  char v69;
  unsigned __int8 v70;
  unint64_t v71;
  unsigned __int8 v72;
  char v73;
  WTF::StringImpl *v74;
  WTF::StringImpl *v75;
  unint64_t v76;
  __int128 v77;
  _BYTE v78[25];
  WTF *v79;
  WTF::StringImpl *v80;
  char v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  char v87;
  JSC::VM *v88;
  int v89;
  JSC::VM *v90;
  int v91;
  WTF::StringImpl **v92;
  int v93;
  int v94;
  WTF::StringImpl *v95[2];
  _BYTE v96[25];
  WTF *v97;
  WTF::StringImpl *v98;
  char v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  char v105;
  int v106;
  JSC::VM *v107;
  _BYTE v108[7];
  _BYTE v109[7];
  _BYTE v110[7];
  char v111[8];
  uint64_t v112;
  int v113;
  int v114;
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  v107 = (JSC::VM *)*((_QWORD *)this + 7);
  v6 = *((_QWORD *)a2 + 3);
  v7 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(v6 + 40));
  if (!v7)
    return (JSCell *)WebCore::throwConstructorScriptExecutionContextUnavailableError(this, &v107, (uint64_t)"VideoFrame", 11);
  v8 = (WebCore::ScriptExecutionContext *)v7;
  WebCore::convert<WebCore::IDLAllowSharedAdaptor<WebCore::IDLUnion<WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer>>>(*((_QWORD *)a2 + 6), (uint64_t)this, (uint64_t)v111);
  v9 = v114;
  if (!v114)
  {
    v10 = (JSC::JSCell *)*((_QWORD *)a2 + 7);
    v88 = (JSC::VM *)*((_QWORD *)this + 7);
    v76 = v6;
    if (((unint64_t)v10 & 0xFFFFFFFFFFFFFFF7) == 2)
      goto LABEL_11;
    if (((unint64_t)v10 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v10)) == 0)
    {
      JSC::throwTypeError();
      v26 = 0;
      v19 = 1;
      v106 = 1;
      goto LABEL_37;
    }
    v12 = (JSC::Structure *)Object;
    WTF::AtomStringImpl::addLiteral();
    v6 = JSC::JSObject::get(v12, this, (unint64_t)v95[0]);
    if (v95[0])
    {
      if (*(_DWORD *)v95[0] == 2)
        WTF::StringImpl::destroy(v95[0], v13);
      else
        *(_DWORD *)v95[0] -= 2;
    }
    if (*((_DWORD *)v88 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v88))
      goto LABEL_14;
    if (v6 == 10)
    {
LABEL_11:
      v14 = "codedHeight";
      v15 = "unsigned long";
      v16 = (int)this;
      v17 = 12;
LABEL_12:
      v18 = 14;
LABEL_13:
      WebCore::throwRequiredMemberTypeError(v16, (int)&v88, v14, v17, "VideoFrameBufferInit", 21, v15, v18);
LABEL_14:
      v106 = 1;
      goto LABEL_15;
    }
    WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, v6, v95);
    if ((unint64_t)v95[0] >> 32)
      goto LABEL_14;
    v75 = v95[0];
    WTF::AtomStringImpl::addLiteral();
    v28 = v95[0];
    v6 = JSC::JSObject::get(v12, this, (unint64_t)v95[0]);
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, v29);
      else
        *(_DWORD *)v28 -= 2;
    }
    if (*((_DWORD *)v88 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v88))
      goto LABEL_14;
    if (v6 == 10)
    {
      v14 = "codedWidth";
      v15 = "unsigned long";
      v16 = (int)this;
      v17 = 11;
      goto LABEL_12;
    }
    WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, v6, v95);
    v74 = v95[0];
    if ((unint64_t)v95[0] >> 32)
      goto LABEL_14;
    WTF::AtomStringImpl::addLiteral();
    v30 = v95[0];
    v6 = JSC::JSObject::get(v12, this, (unint64_t)v95[0]);
    if (v30)
    {
      if (*(_DWORD *)v30 == 2)
        WTF::StringImpl::destroy(v30, v31);
      else
        *(_DWORD *)v30 -= 2;
    }
    if (*((_DWORD *)v88 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v88))
      goto LABEL_14;
    if (v6 == 10)
    {
      v73 = 0;
      v71 = 0;
      v72 = 0;
    }
    else
    {
      WebCore::convertDictionary<WebCore::PlatformVideoColorSpace>((JSC::JSCell *)v6, (uint64_t)this, (uint64_t)&v77);
      if (HIDWORD(v77))
        goto LABEL_14;
      v72 = BYTE4(v77);
      v71 = *(_QWORD *)((_BYTE *)&v77 + 4) & 0xFFFFFFFFFFFFFF00;
      v73 = 1;
    }
    WTF::AtomStringImpl::addLiteral();
    v32 = v95[0];
    v6 = JSC::JSObject::get(v12, this, (unint64_t)v95[0]);
    if (v32)
    {
      if (*(_DWORD *)v32 == 2)
        WTF::StringImpl::destroy(v32, v33);
      else
        *(_DWORD *)v32 -= 2;
    }
    if (*((_DWORD *)v88 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v88))
      goto LABEL_14;
    if (v6 == 10)
    {
      v69 = 0;
      v70 = 0;
      v68 = 0;
    }
    else
    {
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, v6, v95);
      if ((unint64_t)v95[0] >> 32)
        goto LABEL_14;
      v70 = v95[0];
      v68 = (uint64_t)v95[0] & 0xFFFFFF00;
      v69 = 1;
    }
    WTF::AtomStringImpl::addLiteral();
    v34 = v95[0];
    v6 = JSC::JSObject::get(v12, this, (unint64_t)v95[0]);
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v35);
      else
        *(_DWORD *)v34 -= 2;
    }
    if (*((_DWORD *)v88 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v88))
      goto LABEL_14;
    if (v6 == 10)
    {
      v66 = 0;
      v67 = 0;
      v65 = 0;
    }
    else
    {
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLong>(this, v6, v95);
      if ((unint64_t)v95[0] >> 32)
        goto LABEL_14;
      v67 = v95[0];
      v65 = (uint64_t)v95[0] & 0xFFFFFF00;
      v66 = 1;
    }
    WTF::AtomStringImpl::addLiteral();
    v36 = v95[0];
    v6 = JSC::JSObject::get(v12, this, (unint64_t)v95[0]);
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v37);
      else
        *(_DWORD *)v36 -= 2;
    }
    if (*((_DWORD *)v88 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v88))
      goto LABEL_14;
    if (v6 == 10)
    {
      v64 = 0;
      v63 = 0;
    }
    else
    {
      WebCore::convertToIntegerEnforceRange<WebCore::IDLUnsignedLongLong>(this, v6, (uint64_t)&v77);
      if (DWORD2(v77))
        goto LABEL_14;
      v63 = (void *)v77;
      v64 = 1;
    }
    WTF::AtomStringImpl::addLiteral();
    v38 = v95[0];
    v6 = JSC::JSObject::get(v12, this, (unint64_t)v95[0]);
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v39);
      else
        *(_DWORD *)v38 -= 2;
    }
    if (*((_DWORD *)v88 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v88))
      goto LABEL_14;
    if (v6 == 10)
    {
      v14 = "format";
      v15 = "VideoPixelFormat";
      v16 = (int)this;
      v17 = 7;
      v18 = 17;
      goto LABEL_13;
    }
    v95[0] = *((WTF::StringImpl **)this + 7);
    v40 = v95[0];
    v6 = WebCore::parseEnumeration<WebCore::VideoPixelFormat>(this, v6);
    if (*((_DWORD *)v40 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v40) & 1) != 0)
      goto LABEL_14;
    if ((v6 & 0xFF00000000) == 0)
    {
      JSC::throwTypeError();
      goto LABEL_14;
    }
    WTF::AtomStringImpl::addLiteral();
    v41 = v95[0];
    v43 = JSC::JSObject::get(v12, this, (unint64_t)v95[0]);
    if (v41)
    {
      if (*(_DWORD *)v41 == 2)
        WTF::StringImpl::destroy(v41, v42);
      else
        *(_DWORD *)v41 -= 2;
    }
    if (*((_DWORD *)v88 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v88))
    {
      v106 = 1;
      goto LABEL_15;
    }
    v62 = v6;
    if (v43 == 10)
    {
      LODWORD(v6) = 0;
      v44 = 0;
LABEL_108:
      WTF::AtomStringImpl::addLiteral();
      v50 = (WTF::StringImpl *)v77;
      v52 = JSC::JSObject::get(v12, this, v77);
      if (v50)
      {
        if (*(_DWORD *)v50 == 2)
          WTF::StringImpl::destroy(v50, v51);
        else
          *(_DWORD *)v50 -= 2;
      }
      if (*((_DWORD *)v88 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v88))
        goto LABEL_114;
      if (v52 == 10)
      {
        WebCore::throwRequiredMemberTypeError((int)this, (int)&v88, "timestamp", 10, "VideoFrameBufferInit", 21, "long long", 10);
        goto LABEL_114;
      }
      WebCore::convertToIntegerEnforceRange<WebCore::IDLLongLong>(this, v52, (uint64_t)&v92);
      if (v93)
        goto LABEL_114;
      v53 = v92;
      WTF::AtomStringImpl::addLiteral();
      v54 = (WTF::StringImpl *)v77;
      v56 = (JSC::JSCell *)JSC::JSObject::get(v12, this, v77);
      if (v54)
      {
        if (*(_DWORD *)v54 == 2)
          WTF::StringImpl::destroy(v54, v55);
        else
          *(_DWORD *)v54 -= 2;
      }
      if (*((_DWORD *)v88 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v88))
      {
LABEL_114:
        v106 = 1;
        if (!(_DWORD)v6)
          goto LABEL_15;
        goto LABEL_130;
      }
      if (v56 == (JSC::JSCell *)10)
      {
        v58 = 0;
        v59 = 0uLL;
      }
      else
      {
        WebCore::convertDictionary<WebCore::DOMRectInit>(v56, (uint64_t)this, (uint64_t)&v77);
        if (*(_DWORD *)&v78[16])
        {
          v106 = 1;
          if (!(_DWORD)v6)
            goto LABEL_15;
          goto LABEL_130;
        }
        v59 = v77;
        v57 = *(_OWORD *)v78;
        v58 = 1;
      }
      v49 = v63;
      LODWORD(v95[0]) = v62;
      v95[1] = v74;
      *(_QWORD *)v96 = v75;
      *(_QWORD *)&v96[8] = v53;
      *(_QWORD *)&v96[16] = v63;
      v96[24] = v64;
      LOBYTE(v97) = 0;
      v99 = 0;
      if ((_DWORD)v6)
      {
        v97 = v44;
        v98 = v3;
        v99 = 1;
        v44 = 0;
      }
      v100 = v59;
      v101 = v57;
      LOBYTE(v102) = v58;
      *(_DWORD *)((char *)&v102 + 1) = *(_DWORD *)v110;
      DWORD1(v102) = *(_DWORD *)&v110[3];
      *((_QWORD *)&v102 + 1) = v65 | v67;
      LOBYTE(v103) = v66;
      *(_DWORD *)((char *)&v103 + 1) = *(_DWORD *)v109;
      DWORD1(v103) = *(_DWORD *)&v109[3];
      *((_QWORD *)&v103 + 1) = v68 | v70;
      LOBYTE(v104) = v69;
      *(_DWORD *)((char *)&v104 + 1) = *(_DWORD *)v108;
      DWORD1(v104) = *(_DWORD *)&v108[3];
      *((_QWORD *)&v104 + 1) = v71 | v72;
      v105 = v73;
      v106 = 0;
LABEL_129:
      if (!(_DWORD)v6)
        goto LABEL_15;
LABEL_130:
      if (v44)
        WTF::fastFree(v44, v49);
LABEL_15:
      v19 = v106;
      if (v106)
      {
        v26 = 0;
        goto LABEL_36;
      }
      if (!v114)
      {
        LOBYTE(v88) = 0;
        LODWORD(v6) = -1;
        v89 = -1;
        v20 = v113;
        if (v113 == -1)
        {
LABEL_20:
          LOBYTE(v90) = 0;
          v91 = v6;
          goto LABEL_21;
        }
        v21 = off_1E33211A8[v113];
        ((void (*)(__int128 *, JSC::VM **, uint64_t *))v21)(&v77, &v88, &v112);
        v89 = v20;
        LOBYTE(v90) = 0;
        v91 = -1;
        ((void (*)(__int128 *, JSC::VM **, JSC::VM **))v21)(&v77, &v90, &v88);
        v91 = v20;
        if (!v106)
        {
LABEL_21:
          v77 = *(_OWORD *)v95;
          *(_OWORD *)v78 = *(_OWORD *)v96;
          *(_OWORD *)&v78[9] = *(_OWORD *)&v96[9];
          LOBYTE(v79) = 0;
          v81 = 0;
          if (v99)
          {
            v79 = v97;
            v22 = v98;
            v97 = 0;
            v98 = 0;
            v80 = v22;
            v81 = 1;
          }
          v84 = v102;
          v85 = v103;
          v86 = v104;
          v87 = v105;
          v82 = v100;
          v83 = v101;
          WebCore::WebCodecsVideoFrame::create(v8, (uint64_t)&v90, (uint64_t)&v77, (uint64_t)&v92);
          if (v81)
          {
            v24 = v79;
            if (v79)
            {
              v79 = 0;
              LODWORD(v80) = 0;
              WTF::fastFree(v24, v23);
            }
          }
          if (v91 != -1)
            ((void (*)(__int128 *, JSC::VM **))off_1E3321198[v91])(&v77, &v90);
          v91 = -1;
          if (v89 != -1)
            ((void (*)(__int128 *, JSC::VM **))off_1E3321198[v89])(&v77, &v88);
          v25 = v107;
          if (*((_DWORD *)v107 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v107) & 1) != 0
            || (v26 = (JSCell *)WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::WebCodecsVideoFrame>,WebCore::ExceptionOr<WTF::Ref<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>>>(this, *(_QWORD *)(v76 + 40), &v107, (unsigned __int8 *)&v92), *((_DWORD *)v25 + 20))&& (JSC::VM::hasExceptionsAfterHandlingTraps(v25) & 1) != 0|| (WebCore::setSubclassStructureIfNeeded<WebCore::WebCodecsVideoFrame>(this, (uint64_t)a2, v26), *((_DWORD *)v25 + 20))&& (JSC::VM::hasExceptionsAfterHandlingTraps(v25) & 1) != 0)
          {
            v26 = 0;
          }
          if (v94 != -1)
            ((void (*)(__int128 *, WTF::StringImpl ***))off_1E3321D60[v94])(&v77, &v92);
          v19 = v106;
LABEL_36:
          if (v19 == -1)
          {
LABEL_38:
            v9 = v114;
            goto LABEL_39;
          }
LABEL_37:
          ((void (*)(__int128 *, WTF::StringImpl **))off_1E3321D80[v19])(&v77, v95);
          goto LABEL_38;
        }
      }
      std::__throw_bad_variant_access[abi:sn180100]();
      goto LABEL_20;
    }
    v45 = (JSC::VM *)*((_QWORD *)this + 7);
    v90 = v45;
    if ((v43 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v43 + 5) <= 0x16u)
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      JSC::throwTypeError();
      v48 = v95[0];
      v95[0] = 0;
      if (v48)
      {
        if (*(_DWORD *)v48 == 2)
          WTF::StringImpl::destroy(v48, v47);
        else
          *(_DWORD *)v48 -= 2;
      }
      v46 = 1;
      *(_DWORD *)v78 = 1;
    }
    else
    {
      v95[0] = 0;
      v95[1] = 0;
      v92 = v95;
      JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDictionary<WebCore::PlaneLayout>>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<WebCore::PlaneLayout,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(this, v43, (uint64_t *)&v92);
      if (!*((_DWORD *)v45 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v45) & 1) == 0)
      {
        v44 = v95[0];
        v3 = v95[1];
        *(_DWORD *)v78 = 0;
LABEL_101:
        v46 = 0;
        v77 = 0uLL;
        LODWORD(v6) = 1;
        goto LABEL_107;
      }
      v61 = v95[0];
      v46 = 1;
      *(_DWORD *)v78 = 1;
      if (v95[0])
      {
        v95[0] = 0;
        LODWORD(v95[1]) = 0;
        WTF::fastFree(v61, v60);
        v46 = *(_DWORD *)v78;
        if (!*(_DWORD *)v78)
        {
          v3 = (WTF::StringImpl *)*((_QWORD *)&v77 + 1);
          v44 = (WTF *)v77;
          goto LABEL_101;
        }
        v106 = 1;
        if (*(_DWORD *)v78 == -1)
          goto LABEL_15;
        v44 = 0;
        LODWORD(v6) = 0;
LABEL_107:
        ((void (*)(WTF::StringImpl ***, __int128 *))off_1E3321CE0[v46])(&v92, &v77);
        if (!(_DWORD)v6)
          goto LABEL_129;
        goto LABEL_108;
      }
    }
    v44 = 0;
    LODWORD(v6) = 0;
    v106 = 1;
    goto LABEL_107;
  }
  v26 = 0;
LABEL_39:
  if (v9 != -1)
    ((void (*)(WTF::StringImpl **, uint64_t *))off_1E33211C8[v9])(v95, &v112);
  return v26;
}

_DWORD *WebCore::JSWebCodecsVideoFrame::destroy(WebCore::JSWebCodecsVideoFrame *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

uint64_t WebCore::JSWebCodecsVideoFrame::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebCodecsVideoFrame::estimatedSize(WebCore::JSWebCodecsVideoFrame *this, JSC::JSCell *a2, JSC::VM *a3)
{
  return JSC::JSObject::estimatedSize(this, a2, a3)
       + 4 * *(_QWORD *)(*((_QWORD *)this + 3) + 40) * *(_QWORD *)(*((_QWORD *)this + 3) + 48);
}

uint64_t WebCore::JSWebCodecsVideoFrame::visitChildren(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  result = JSC::JSObject::visitChildren();
  if (*(_BYTE *)(a2 + 184))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) * *(_QWORD *)(*(_QWORD *)(a1 + 24) + 48);
    *(_QWORD *)(a2 + 144) += 4 * v5;
    v6 = *(_QWORD *)(a2 + 160);
    v7 = __CFADD__(v6, 4 * v5);
    v8 = v6 + 4 * v5;
    if (v7)
      *(_BYTE *)(a2 + 152) = 1;
    else
      *(_QWORD *)(a2 + 160) = v8;
  }
  return result;
}

uint64_t WebCore::JSWebCodecsVideoFrame::visitChildren(WebCore::JSWebCodecsVideoFrame *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren();
    result = (*(uint64_t (**)(JSC::JSCell *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 4 * *(_QWORD *)(*((_QWORD *)this + 3) + 40) * *(_QWORD *)(*((_QWORD *)this + 3) + 48));
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSWebCodecsVideoFramePrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebCodecsVideoFramePrototype::create(WebCore::JSWebCodecsVideoFramePrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<15u>(this, (uint64_t)&WebCore::JSWebCodecsVideoFrame::s_info, (uint64_t)&WebCore::JSWebCodecsVideoFramePrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWebCodecsVideoFrame>,(WebCore::DOMConstructorID)279>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2232);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructor<WebCore::JSWebCodecsVideoFrame>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000001, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSWebCodecsVideoFrame::s_info
         + ~((_QWORD)&WebCore::JSWebCodecsVideoFrame::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebCodecsVideoFrame::s_info
                                                                       + ~((_QWORD)&WebCore::JSWebCodecsVideoFrame::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSWebCodecsVideoFrame::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSWebCodecsVideoFrame::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSWebCodecsVideoFramePrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebCodecsVideoFramePrototype::create((WebCore::JSWebCodecsVideoFramePrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSWebCodecsVideoFrame::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebCodecsVideoFrame::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 2232) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebCodecsVideoFrameConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebCodecsVideoFramePrototype::s_info != (char **)(16
                                                                   * *(unsigned int *)(16
                                                                                     * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                     + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWebCodecsVideoFrame>,(WebCore::DOMConstructorID)279>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsWebCodecsVideoFrame_format(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v2;

  v2 = *(WTF::StringImpl **)(*(_QWORD *)(a2 + 24) + 32);
  if (((unint64_t)v2 & 0xFF00000000) != 0)
    return WebCore::convertEnumerationToJS<WebCore::VideoPixelFormat>(*(_QWORD *)(a1 + 56), v2);
  else
    return 2;
}

unint64_t WebCore::jsWebCodecsVideoFrame_codedWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 40);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return *(_QWORD *)(*(_QWORD *)(a2 + 24) + 40) | 0xFFFE000000000000;
}

unint64_t WebCore::jsWebCodecsVideoFrame_codedHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 48);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return *(_QWORD *)(*(_QWORD *)(a2 + 24) + 48) | 0xFFFE000000000000;
}

uint64_t WebCore::jsWebCodecsVideoFrame_codedRect(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  bmalloc::api *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  float64x2_t v12;
  bmalloc::api *v13;

  v2 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v2 + 152))
    return 2;
  v4 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v5 = *(_QWORD *)(v2 + 136);
  if (!v5)
  {
    v12 = vcvtq_f64_u64(*(uint64x2_t *)(v2 + 40));
    v5 = bmalloc::api::isoAllocate();
    *(_QWORD *)v5 = 0;
    *(_DWORD *)(v5 + 8) = 1;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = 0;
    *(float64x2_t *)(v5 + 32) = v12;
    v7 = *(bmalloc::api **)(v2 + 136);
    *(_QWORD *)(v2 + 136) = v5;
    if (v7)
    {
      if (*((_DWORD *)v7 + 2) == 1)
      {
        if (*(_QWORD *)v7)
        {
          *(_QWORD *)(*(_QWORD *)v7 + 8) = 3;
          *(_QWORD *)v7 = 0;
        }
        bmalloc::api::isoDeallocate(v7, v6);
        v5 = *(_QWORD *)(v2 + 136);
        if (!v5)
          return 2;
      }
      else
      {
        --*((_DWORD *)v7 + 2);
      }
    }
  }
  v8 = *(_QWORD *)(v4 + 3320);
  if (*(_DWORD *)(v8 + 48))
  {
    v13 = (bmalloc::api *)v5;
    v3 = WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::get((uint64_t *)(v8 + 32), &v13);
    if (v3)
      return v3;
    goto LABEL_11;
  }
  v9 = *(_QWORD *)v5;
  if (!*(_QWORD *)v5 || (*(_BYTE *)(v9 + 8) & 3) != 0 || (v3 = *(_QWORD *)v9) == 0)
  {
LABEL_11:
    ++*(_DWORD *)(v5 + 8);
    v13 = (bmalloc::api *)v5;
    v3 = WebCore::createWrapper<WebCore::DOMRectReadOnly,WebCore::DOMRectReadOnly>(v4, (uint64_t *)&v13);
    WTF::Ref<WebCore::DOMRectReadOnly,WTF::RawPtrTraits<WebCore::DOMRectReadOnly>,WTF::DefaultRefDerefTraits<WebCore::DOMRectReadOnly>>::~Ref(&v13, v10);
  }
  return v3;
}

uint64_t WebCore::jsWebCodecsVideoFrame_visibleRect(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  bmalloc::api *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  float64x2_t v12;
  float64x2_t v13;
  bmalloc::api *v14;

  v2 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v2 + 152))
    return 2;
  v4 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v5 = *(_QWORD *)(v2 + 144);
  if (!v5)
  {
    v12 = vcvtq_f64_u64(*(uint64x2_t *)(v2 + 72));
    v13 = vcvtq_f64_u64(*(uint64x2_t *)(v2 + 88));
    v5 = bmalloc::api::isoAllocate();
    *(_QWORD *)v5 = 0;
    *(_DWORD *)(v5 + 8) = 1;
    *(float64x2_t *)(v5 + 16) = v13;
    *(float64x2_t *)(v5 + 32) = v12;
    v7 = *(bmalloc::api **)(v2 + 144);
    *(_QWORD *)(v2 + 144) = v5;
    if (v7)
    {
      if (*((_DWORD *)v7 + 2) == 1)
      {
        if (*(_QWORD *)v7)
        {
          *(_QWORD *)(*(_QWORD *)v7 + 8) = 3;
          *(_QWORD *)v7 = 0;
        }
        bmalloc::api::isoDeallocate(v7, v6);
        v5 = *(_QWORD *)(v2 + 144);
        if (!v5)
          return 2;
      }
      else
      {
        --*((_DWORD *)v7 + 2);
      }
    }
  }
  v8 = *(_QWORD *)(v4 + 3320);
  if (*(_DWORD *)(v8 + 48))
  {
    v14 = (bmalloc::api *)v5;
    v3 = WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::get((uint64_t *)(v8 + 32), &v14);
    if (v3)
      return v3;
    goto LABEL_11;
  }
  v9 = *(_QWORD *)v5;
  if (!*(_QWORD *)v5 || (*(_BYTE *)(v9 + 8) & 3) != 0 || (v3 = *(_QWORD *)v9) == 0)
  {
LABEL_11:
    ++*(_DWORD *)(v5 + 8);
    v14 = (bmalloc::api *)v5;
    v3 = WebCore::createWrapper<WebCore::DOMRectReadOnly,WebCore::DOMRectReadOnly>(v4, (uint64_t *)&v14);
    WTF::Ref<WebCore::DOMRectReadOnly,WTF::RawPtrTraits<WebCore::DOMRectReadOnly>,WTF::DefaultRefDerefTraits<WebCore::DOMRectReadOnly>>::~Ref(&v14, v10);
  }
  return v3;
}

unint64_t WebCore::jsWebCodecsVideoFrame_displayWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 56);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return *(_QWORD *)(*(_QWORD *)(a2 + 24) + 56) | 0xFFFE000000000000;
}

unint64_t WebCore::jsWebCodecsVideoFrame_displayHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 64);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return *(_QWORD *)(*(_QWORD *)(a2 + 24) + 64) | 0xFFFE000000000000;
}

unint64_t WebCore::jsWebCodecsVideoFrame_duration(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  double v5;

  v2 = *(_QWORD *)(a2 + 24);
  if (!*(_BYTE *)(v2 + 112))
    return 2;
  v3 = *(_QWORD *)(v2 + 104);
  if (HIDWORD(v3))
  {
    v5 = (double)v3;
  }
  else
  {
    if ((v3 & 0x80000000) == 0)
      return v3 | 0xFFFE000000000000;
    v5 = (double)v3;
  }
  return *(_QWORD *)&v5 + 0x2000000000000;
}

unint64_t WebCore::jsWebCodecsVideoFrame_timestamp(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 120);
  v3 = v2 == (int)v2;
  v4 = COERCE__INT64((double)v2) + 0x2000000000000;
  if (v3)
    return *(_QWORD *)(*(_QWORD *)(a2 + 24) + 120) | 0xFFFE000000000000;
  else
    return v4;
}

unint64_t WebCore::jsWebCodecsVideoFrame_colorSpace(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  WTF *v8;

  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v5 = *(_QWORD *)(v3 + 128);
  if (!v5)
  {
    v6 = *(_QWORD *)(v3 + 24);
    v5 = WTF::fastMalloc((WTF *)0xC);
    *(_DWORD *)v5 = 1;
    if (v6)
      *(_QWORD *)(v5 + 4) = *(_QWORD *)(v6 + 36);
    else
      *(_QWORD *)(v5 + 4) = 0;
    v8 = *(WTF **)(v3 + 128);
    *(_QWORD *)(v3 + 128) = v5;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
      {
        WTF::fastFree(v8, v7);
        v5 = *(_QWORD *)(v3 + 128);
      }
      else
      {
        --*(_DWORD *)v8;
      }
    }
  }
  return WebCore::wrap<WebCore::VideoColorSpace>(a1, v4, (WTF *)v5);
}

uint64_t WebCore::JSWebCodecsVideoFrameOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

_QWORD *WebCore::JSWebCodecsVideoFrameOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[4];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[4] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
  --v3[4];
  return result;
}

unint64_t WebCore::createWrapper<WebCore::WebCodecsVideoFrame,WebCore::WebCodecsVideoFrame>(uint64_t a1, WTF **a2)
{
  WTF *v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v16;
  JSC::Structure *v17;
  JSC::JSCell *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  WTF *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  void *v34;
  int v35;
  unint64_t SlowCase;
  WTF *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *Allocator;
  unint64_t v43;
  _QWORD *v44;
  WTF *v45;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 3296);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)&WebCore::JSWebCodecsVideoFrame::s_info
        + ~((_QWORD)&WebCore::JSWebCodecsVideoFrame::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebCodecsVideoFrame::s_info
                                                                      + ~((_QWORD)&WebCore::JSWebCodecsVideoFrame::s_info << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(char ***)(v5 + 16 * v10);
    if (v11 == &WebCore::JSWebCodecsVideoFrame::s_info)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
        goto LABEL_8;
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(char ***)(v5 + 16 * v10);
        ++v12;
        if (v11 == &WebCore::JSWebCodecsVideoFrame::s_info)
          goto LABEL_6;
      }
    }
  }
  v14 = *(uint64_t **)(a1 + 56);
  Structure = WebCore::JSWebCodecsVideoFramePrototype::createStructure(v14, a1, *(JSC::JSCell **)(a1 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v18 = (JSC::JSCell *)WebCore::JSWebCodecsVideoFramePrototype::create((WebCore::JSWebCodecsVideoFramePrototype *)v14, Structure, v16, v17);
  v19 = WebCore::JSWebCodecsVideoFrame::createStructure(v14, a1, v18);
  v13 = WebCore::cacheDOMStructure((JSCell *)a1, v19, (uint64_t)&WebCore::JSWebCodecsVideoFrame::s_info);
LABEL_8:
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(v20 + 41456);
  v22 = *(_QWORD *)(v21 + 23536);
  v23 = *(_QWORD **)(v22 + 2256);
  if (v23)
    goto LABEL_28;
  v24 = *(_QWORD *)(v21 + 22648);
  if (__ldaxr((unsigned __int8 *)v24))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v24))
  {
    goto LABEL_13;
  }
  MEMORY[0x19AEA534C](v24);
LABEL_13:
  v26 = *(_QWORD *)(v24 + 2824);
  if (!*(_QWORD *)(v26 + 2256))
  {
    v27 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v45, "IsoSpace T");
    v44 = 0;
    MEMORY[0x19AEA3204](v27, &v45, v20 + 192, v20 + 1872, 32, 8, &v44);
    v29 = (uint64_t)v44;
    v44 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v30 = v45;
    v45 = 0;
    if (v30)
    {
      if (*(_DWORD *)v30 == 1)
        WTF::fastFree(v30, v28);
      else
        --*(_DWORD *)v30;
    }
    v31 = *(_QWORD *)(v26 + 2256);
    *(_QWORD *)(v26 + 2256) = v27;
    if (v31)
      (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  }
  v23 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v32 = *(_QWORD *)(v22 + 2256);
  *(_QWORD *)(v22 + 2256) = v23;
  if (v32)
  {
    v33 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v33, v34);
  }
  v35 = __ldxr((unsigned __int8 *)v24);
  if (v35 != 1)
  {
    __clrex();
    goto LABEL_27;
  }
  if (__stlxr(0, (unsigned __int8 *)v24))
LABEL_27:
    WTF::Lock::unlockSlow((WTF::Lock *)v24);
LABEL_28:
  SlowCase = v23[3];
  if (SlowCase < v23[4])
  {
LABEL_29:
    v23[3] = SlowCase + 32;
    goto LABEL_30;
  }
  SlowCase = v23[5];
  if ((SlowCase & 1) == 0)
  {
    v43 = *(_QWORD *)(SlowCase + 8) ^ v23[6];
    v23[4] = SlowCase + HIDWORD(v43);
    v23[5] = SlowCase + (int)v43;
    goto LABEL_29;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_30:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v13);
  v37 = *a2;
  *a2 = 0;
  *(_QWORD *)(SlowCase + 24) = v37;
  if (*(_BYTE *)(v20 + 755))
  {
    __dmb(0xAu);
    v37 = *(WTF **)(SlowCase + 24);
  }
  if ((unint64_t)(4 * *((_QWORD *)v37 + 5) * *((_QWORD *)v37 + 6)) >= 0x101)
    JSC::Heap::reportExtraMemoryAllocatedSlowCase();
  v38 = *(_QWORD *)(a1 + 3320);
  if ((byte_1EE336F80 & 1) == 0)
  {
    qword_1EE336F78 = (uint64_t)&off_1E3320600;
    byte_1EE336F80 = 1;
  }
  v45 = v4;
  if ((SlowCase & 8) != 0)
    v39 = (SlowCase - 112) | 1;
  else
    v39 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v39 & 1) != 0)
    v40 = v39 + 47;
  else
    v40 = *(_QWORD *)v39 + 32;
  Allocator = *(_QWORD **)(v40 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v40 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336F78;
  Allocator[2] = v38;
  v44 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v38 + 32), (uint64_t *)&v45, (uint64_t *)&v44);
  if (v44)
    v44[1] = 3;
  return SlowCase;
}

uint64_t WebCore::wrap<WebCore::WebCodecsVideoFrame>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  WTF *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  WTF *v14;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v3)
  {
    v4 = *(_DWORD *)(v3 - 8);
    v5 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    v9 = *(WTF **)(v3 + 16 * v8);
    if (v9 == a3)
    {
LABEL_6:
      v11 = *(_QWORD *)(v3 + 16 * v8 + 8);
      if (v11)
      {
        if ((*(_BYTE *)(v11 + 8) & 3) == 0)
        {
          v12 = *(_QWORD *)v11;
          if (*(_QWORD *)v11)
            return v12;
        }
      }
    }
    else
    {
      v10 = 1;
      while (v9)
      {
        v8 = ((_DWORD)v8 + v10) & v4;
        v9 = *(WTF **)(v3 + 16 * v8);
        ++v10;
        if (v9 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 4);
  v14 = a3;
  if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))a3 == &off_1E336D8D0)
  {
    v12 = WebCore::createWrapper<WebCore::WebCodecsVideoFrame,WebCore::WebCodecsVideoFrame>(a2, &v14);
    if (v14)
    {
      if (*((_DWORD *)v14 + 4) == 1)
        (*(void (**)(void))(*(_QWORD *)v14 + 16))();
      else
        --*((_DWORD *)v14 + 4);
    }
    return v12;
  }
  result = 949;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebCodecsVideoFrame::toWrapped(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;
  char **v4;
  BOOL v5;

  if ((a2 & 0xFFFE000000000002) != 0)
    return 0;
  v2 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v3 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v4 = (char **)(16 * v2);
  if ((_DWORD)v2)
    v5 = v4 == &WebCore::JSWebCodecsVideoFrame::s_info;
  else
    v5 = 1;
  if (!v5)
  {
    do
    {
      v4 = (char **)v4[2];
      v3 = v4 != 0;
    }
    while (v4 != &WebCore::JSWebCodecsVideoFrame::s_info && v4 != 0);
  }
  if (v3)
    return *(_QWORD *)(a2 + 24);
  else
    return 0;
}

void WebCore::JSWebCodecsVideoFrameOutputCallback::~JSWebCodecsVideoFrameOutputCallback(WebCore::JSWebCodecsVideoFrameOutputCallback *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::JSAbortAlgorithm::~JSAbortAlgorithm(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::JSWebCodecsVideoFrameOutputCallback::handleEvent(uint64_t **this, WebCore::WebCodecsVideoFrame *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  JSC::Structure *v10;
  uint64_t v11;
  uint64_t *v12;
  _QWORD *v14;
  _BYTE v15[8];
  uint64_t v16;
  WTF *v17;
  _OWORD v18[4];
  uint64_t v19;
  _BYTE v20[8];
  uint64_t *v21;

  if (!WebCore::ActiveDOMCallback::canInvokeCallback((WebCore::ActiveDOMCallback *)this, a2))
    return 2;
  ++*((_DWORD *)this + 4);
  v4 = *this[3];
  if (!v4 || (*(_BYTE *)(v4 + 8) & 3) != 0)
    v5 = 0;
  else
    v5 = *(_QWORD *)v4;
  MEMORY[0x19AEA3294](v20, *(_QWORD *)(v5 + 56));
  v15[0] = 0;
  v17 = (WTF *)((char *)v18 + 8);
  memset(v18, 0, sizeof(v18));
  v19 = 0;
  v6 = (void *)WebCore::wrap<WebCore::WebCodecsVideoFrame>(v5, v5, a2);
  *((_QWORD *)&v18[0] + 1) = v6;
  v16 = 0x800000001;
  v21 = 0;
  v7 = this[3];
  v8 = *v7;
  if (*v7
    && (*(_BYTE *)(v8 + 8) & 3) == 0
    && *(_QWORD *)v8
    && ((v9 = v7[2]) == 0 || (*(_BYTE *)(v9 + 8) & 3) != 0 ? (v10 = 0) : (v10 = *(JSC::Structure **)v9),
        WebCore::JSCallbackData::invokeCallback(*(JSC::JSGlobalObject **)v8, v10, 10, (uint64_t)v15, 0, 0, (uint64_t *)&v21), (v6 = v21) != 0))
  {
    WebCore::reportException(*(JSC::JSGlobalObject **)(16 * (**(_DWORD **)this[3][2] & 0xFFFFFFFE) + 0x28), (uint64_t)v21, 0, 0, 0);
    v11 = 1;
  }
  else
  {
    v11 = 0;
  }
  v12 = *(uint64_t **)&v18[0];
  if (*(_QWORD *)&v18[0])
  {
    v21 = &v16;
    v14 = (_QWORD *)WTF::HashTable<JSC::MarkedVectorBase *,JSC::MarkedVectorBase *,WTF::IdentityExtractor,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>>::find<WTF::IdentityHashTranslator<WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::DefaultHash<JSC::MarkedVectorBase *>>,JSC::MarkedVectorBase *>(*(uint64_t **)&v18[0], (uint64_t *)&v21);
    WTF::HashSet<JSC::MarkedVectorBase *,WTF::DefaultHash<JSC::MarkedVectorBase *>,WTF::HashTraits<JSC::MarkedVectorBase *>,WTF::HashTableTraits>::remove(v12, v14);
  }
  if (v17 != (WTF *)((char *)v18 + 8) && v17)
    WTF::fastFree(v17, v6);
  MEMORY[0x19AEA32A0](v20);
  if (*((_DWORD *)this + 4) == 1)
    ((void (*)(uint64_t **))(*this)[2])(this);
  else
    --*((_DWORD *)this + 4);
  return v11;
}

uint64_t WebCore::JSWebCodecsVideoFrameOutputCallback::visitJSFunction(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = *(uint64_t **)(*(_QWORD *)(a1 + 24) + 16);
  if (!v3 || (v3[1] & 3) != 0)
    v4 = 0;
  else
    v4 = *v3;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 24))(a2, v4);
}

{
  return WebCore::JSCallbackData::visitJSFunction<JSC::SlotVisitor>(*(_QWORD *)(a1 + 24), a2);
}

uint64_t WebCore::JSWebGL2RenderingContext::visitOutputConstraints<JSC::AbstractSlotVisitor>(uint64_t a1, JSC::AbstractSlotVisitor *a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *((_QWORD *)a2 + 11);
  if (!v2 || !*(_BYTE *)(v2 + 24))
    return (uint64_t)WebCore::JSWebGL2RenderingContext::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
  result = 75;
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGL2RenderingContext::destroy(uint64_t this, JSCell *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v2 + 40) + 24))(*(_QWORD *)(v2 + 40));
  return this;
}

uint64_t WebCore::JSWebGL2RenderingContext::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

WTF::Lock *WebCore::JSWebGL2RenderingContext::visitChildren(uint64_t a1, JSC::AbstractSlotVisitor *a2)
{
  JSC::JSObject::visitChildren();
  return WebCore::JSWebGL2RenderingContext::visitAdditionalChildren<JSC::AbstractSlotVisitor>(a1, a2);
}

uint64_t WebCore::JSWebGL2RenderingContext::visitChildren(WebCore::JSWebGL2RenderingContext *this, JSC::JSCell *a2, JSC::AbstractSlotVisitor *a3)
{
  uint64_t v5;
  uint64_t result;
  _QWORD v7[2];
  uint64_t v8;
  char v9;

  v7[0] = a2;
  v7[1] = this;
  v9 = 0;
  v5 = *((_QWORD *)a2 + 11);
  v8 = v5;
  if (v5 && *(_BYTE *)(v5 + 24))
  {
    result = 75;
    __break(0xC471u);
  }
  else
  {
    *((_QWORD *)a2 + 11) = v7;
    JSC::JSObject::visitChildren();
    result = (uint64_t)WebCore::JSWebGL2RenderingContext::visitAdditionalChildren<JSC::AbstractSlotVisitor>((uint64_t)this, a2);
    *(_QWORD *)(v7[0] + 88) = v8;
  }
  return result;
}

uint64_t WebCore::JSWebGL2RenderingContextPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebGL2RenderingContextPrototype::create(WebCore::JSWebGL2RenderingContextPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  int *v9;
  char **v10;
  uint64_t v11;
  char *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  JSC::Structure *v23;
  int v24;
  unint64_t v26;
  WTF::StringImpl *v27[6];
  int v28;
  int v29;
  JSC::Structure *v30;
  int v31;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v26 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v26);
    *((_QWORD *)this + 4865) = SlowCase + (int)v26;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  v9 = (int *)((char *)this + 93124);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  v10 = &WebCore::JSWebGL2RenderingContextPrototypeTableValues;
  v11 = 791;
  do
  {
    v12 = v10[1];
    if (v12)
    {
      if (v12 == (char *)2)
        JSC::SmallStrings::singleCharacterStringRep((WebCore::JSWebGL2RenderingContextPrototype *)((char *)this + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v13 = v27[0];
      JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSWebGL2RenderingContext::s_info, (unint64_t *)v27, (uint64_t)v10, (unsigned __int8 *)SlowCase);
      if (v13)
      {
        if (*(_DWORD *)v13 == 2)
          WTF::StringImpl::destroy(v13, v14);
        else
          *(_DWORD *)v13 -= 2;
      }
    }
    v10 += 5;
    --v11;
  }
  while (v11);
  v15 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)SlowCase & 0xFFFFFFFE)
                                                                                          + 0x28));
  if ((*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 136))(v15) + 432) & 0x200000000000) == 0)
  {
    WTF::AtomStringImpl::addLiteral();
    v16 = v27[0];
    v17 = *v9;
    *v9 = 1;
    LODWORD(v27[0]) = -1;
    WORD2(v27[0]) = 1;
    JSC::JSObject::deleteProperty();
    *v9 = v17;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v18);
      else
        *(_DWORD *)v16 -= 2;
    }
    if ((*(_BYTE *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE) + 0x10) & 3) != 0)
      JSC::Structure::flattenDictionaryStructure((JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE)), this, (JSC::JSObject *)SlowCase);
  }
  v19 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v21 = JSC::JSString::create((uint64_t)this, v27);
  v22 = v27[0];
  v27[0] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
      WTF::StringImpl::destroy(v22, v20);
    else
      *(_DWORD *)v22 -= 2;
  }
  v23 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v31 = *(_DWORD *)SlowCase;
  v30 = v23;
  v24 = JSC::Structure::outOfLineCapacity(v23);
  v28 = 0;
  v29 = v24;
  v27[0] = (WTF::StringImpl *)&v29;
  v27[1] = (WTF::StringImpl *)SlowCase;
  v27[2] = this;
  v27[3] = (WTF::StringImpl *)&v31;
  v27[4] = (WTF::StringImpl *)&v30;
  v27[5] = (WTF::StringImpl *)&v28;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v23, this, v19, 6, (uint64_t)v27);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v28, v21);
  *((_DWORD *)v23 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGL2RenderingContext>,(WebCore::DOMConstructorID)643>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  char **v31;
  uint64_t v32;
  char *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  unint64_t v37;
  unint64_t v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5144);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v39) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v37 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v37);
    v5[2] = SlowCase + (int)v37;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v39, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGL2RenderingContext>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 >= v9[2847])
  {
    v2 = v9[2848];
    if ((v2 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v2 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_11;
    }
    v38 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v38);
    v9[2848] = v2 + (int)v38;
  }
  v9[2846] = v2 + 48;
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v39 = 0;
  v40 = v2;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v39);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v39);
  v13 = v39;
  v39 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v39 = 0;
  v40 = v2;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v39);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (!v16)
    goto LABEL_21;
  v17 = *(_DWORD *)(v16 - 8);
  v18 = ((unint64_t)&WebCore::JSWebGL2RenderingContext::s_info
       + ~((_QWORD)&WebCore::JSWebGL2RenderingContext::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGL2RenderingContext::s_info
                                                                        + ~((_QWORD)&WebCore::JSWebGL2RenderingContext::s_info << 32)) >> 22);
  v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
  v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
  v21 = v17 & ((v20 >> 31) ^ v20);
  v22 = *(char ***)(v16 + 16 * v21);
  if (v22 != &WebCore::JSWebGL2RenderingContext::s_info)
  {
    v23 = 1;
    while (v22)
    {
      v21 = ((_DWORD)v21 + v23) & v17;
      v22 = *(char ***)(v16 + 16 * v21);
      ++v23;
      if (v22 == &WebCore::JSWebGL2RenderingContext::s_info)
        goto LABEL_20;
    }
    goto LABEL_21;
  }
LABEL_20:
  v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
  if (!v24)
  {
LABEL_21:
    Structure = WebCore::JSWebGL2RenderingContextPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
    *(_DWORD *)(Structure + 16) |= 0x80000u;
    v28 = (JSC::JSCell *)WebCore::JSWebGL2RenderingContextPrototype::create((WebCore::JSWebGL2RenderingContextPrototype *)a1, Structure, v26, v27);
    v29 = WebCore::JSWebGL2RenderingContext::createStructure((uint64_t *)a1, a2, v28);
    v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebGL2RenderingContext::s_info);
  }
  v30 = *(_QWORD *)(v24 + 48);
  v39 = 0;
  v40 = v2;
  v41 = -1;
  v42 = 0x1000000;
  v43 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v39);
  if ((*(_BYTE *)((16 * *(unsigned int *)v2) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)v2, (JSC::VM *)a1);
  v31 = &WebCore::JSWebGL2RenderingContextConstructorTableValues;
  v32 = 561;
  do
  {
    v33 = v31[1];
    if (v33)
    {
      if (v33 == (char *)2)
        JSC::SmallStrings::singleCharacterStringRep((JSC::SmallStrings *)(a1 + 41968));
      else
        WTF::AtomStringImpl::addLiteral();
      v34 = v39;
      JSC::reifyStaticProperty((JSC::VM *)a1, (uint64_t)&WebCore::JSWebGL2RenderingContext::s_info, (unint64_t *)&v39, (uint64_t)v31, (unsigned __int8 *)v2);
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, v35);
        else
          *(_DWORD *)v34 -= 2;
      }
    }
    v31 += 5;
    --v32;
  }
  while (v32);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5144) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebGL2RenderingContextConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebGL2RenderingContextPrototype::s_info != (char **)(16
                                                                      * *(unsigned int *)(16
                                                                                        * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                        + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGL2RenderingContext>,(WebCore::DOMConstructorID)643>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsWebGL2RenderingContext_canvas(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  WebCore::HTMLElement *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  _BYTE v14[40];
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD v18[5];

  v3 = *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28);
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 40);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4))
  {
    v6 = v4 - 32;
    ++*(_DWORD *)(v4 - 8);
    v7 = 1;
  }
  else
  {
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1950591FCLL);
    }
    v7 = 0;
    v6 = v4 - 112;
    *(_DWORD *)(v4 - 88) += 2;
  }
  v12 = v6;
  v13 = v7;
  v17 = v7;
  LOBYTE(v15) = 0;
  v16 = 0;
  v18[0] = &v17;
  v18[1] = &v15;
  v18[2] = a1;
  v18[3] = v3;
  v18[4] = &v12;
  _ZN7WebCore6Detail11forEachArgsIZNS_11JSConverterINS_8IDLUnionIJNS_12IDLInterfaceINS_17HTMLCanvasElementEEENS4_INS_15OffscreenCanvasEEEEEEE7convertERN3JSC14JSGlobalObjectERNS_17JSDOMGlobalObjectERKNSt3__17variantIJN3WTF6RefPtrIS5_NSI_12RawPtrTraitsIS5_EENSI_21DefaultRefDerefTraitsIS5_EEEENSJ_IS7_NSK_IS7_EENSM_IS7_EEEEEEEEUlTyvE_JNSG_17integral_constantIlLl0EEENSW_IlLl1EEEEEET_SZ_((uint64_t)v18, v5, (uint64_t)v14);
  if (v16)
  {
    v8 = v15;
    if (v13 != -1)
      ((void (*)(_QWORD *, uint64_t *))off_1E3330DA0[v13])(v18, &v12);
    return v8;
  }
  else
  {
    v10 = std::__throw_bad_optional_access[abi:sn180100]();
    return WebCore::jsWebGL2RenderingContext_drawingBufferWidth(v10, v11);
  }
}

unint64_t WebCore::jsWebGL2RenderingContext_drawingBufferWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _DWORD *v4;
  int v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v2 + 364))
    return 0xFFFE000000000000;
  v4 = *(_DWORD **)(**(_QWORD **)(v2 + 128) + 88);
  if (v4)
  {
    v5 = v4[2];
    v4[2] = v5 + 1;
  }
  else
  {
    v5 = MEMORY[8] - 1;
  }
  v6 = v4[3];
  if (v5)
    v4[2] = v5;
  else
    (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 16))(v4);
  return v6 | 0xFFFE000000000000;
}

unint64_t WebCore::jsWebGL2RenderingContext_drawingBufferHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v2 + 364))
    return 0xFFFE000000000000;
  v4 = *(_QWORD *)(**(_QWORD **)(v2 + 128) + 88);
  if (v4)
  {
    v5 = *(_DWORD *)(v4 + 8);
    *(_DWORD *)(v4 + 8) = v5 + 1;
  }
  else
  {
    v5 = MEMORY[8] - 1;
  }
  v6 = *(_QWORD *)(v4 + 12);
  if (v5)
    *(_DWORD *)(v4 + 8) = v5;
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  return HIDWORD(v6) | 0xFFFE000000000000;
}

uint64_t WebCore::jsWebGL2RenderingContext_drawingBufferColorSpace(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WebCore::InspectorInstrumentation *v5;
  WebCore::ScriptExecutionContext *v6;
  uint64_t v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  _QWORD v10[2];
  WTF::StringImpl *v11;

  v3 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v3 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v10[0] = 0;
    v10[1] = 0;
    v5 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v3 + 40) + 144))(*(_QWORD *)(v3 + 40));
    if (v5)
    {
      v7 = WebCore::InspectorInstrumentation::instrumentingAgents(v5, v6);
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 96);
        if (v8)
          WebCore::InspectorCanvasAgent::recordAction(v8, (WebCore::CanvasRenderingContext *)(v3 + 8), (const WTF::StringImpl *)&v11, v10);
      }
    }
    v9 = v11;
    v11 = 0;
    if (v9)
    {
      if (*(_DWORD *)v9 == 2)
        WTF::StringImpl::destroy(v9, v6);
      else
        *(_DWORD *)v9 -= 2;
    }
  }
  return WebCore::convertEnumerationToJS<WebCore::PredefinedColorSpace>(*(_QWORD *)(a1 + 56), (WTF::StringImpl *)*(unsigned __int8 *)(v3 + 386));
}

BOOL WebCore::setJSWebGL2RenderingContext_drawingBufferColorSpace(JSC::JSGlobalObject *a1, uint64_t a2, JSC::JSRopeString *this)
{
  JSC::VM *v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  __int16 v10;
  unsigned __int8 v11;
  int v12;
  _BOOL8 result;
  char hasExceptionsAfterHandlingTraps;
  WebCore::InspectorInstrumentation *v15;
  WebCore::ScriptExecutionContext *v16;
  uint64_t v17;
  uint64_t v18;
  WebCore::InspectorInstrumentation *v19;
  WebCore::ScriptExecutionContext *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  _QWORD v25[2];
  WTF::StringImpl *v26;
  _QWORD v27[2];
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if ((a2 & 0xFFFE000000000002) != 0)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v4 = *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSWebGL2RenderingContext::s_info && v6 != 0);
  }
  if (!v5)
    return JSC::throwDOMAttributeSetterTypeError() != 0;
  v9 = *(_QWORD *)(a2 + 24);
  v10 = WebCore::parseEnumeration<WebCore::PredefinedColorSpace>(a1, (unint64_t)this);
  v11 = v10;
  v12 = HIBYTE(v10);
  if (*((_DWORD *)v3 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v3);
    result = 0;
    if ((hasExceptionsAfterHandlingTraps & 1) != 0 || !v12)
      return result;
  }
  else if (!HIBYTE(v10))
  {
    return 0;
  }
  if (*(_BYTE *)(v9 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v15 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 40) + 144))(*(_QWORD *)(v9 + 40));
    if (v15
      && (v17 = WebCore::InspectorInstrumentation::instrumentingAgents(v15, v16)) != 0
      && (v18 = *(_QWORD *)(v17 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v18, v9 + 8, v11, (uint64_t)v27);
    }
    else
    {
      LOBYTE(v27[0]) = 0;
      v28 = 0;
    }
    v25[0] = v27;
    v25[1] = 1;
    v19 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 40) + 144))(*(_QWORD *)(v9 + 40));
    if (v19)
    {
      v21 = WebCore::InspectorInstrumentation::instrumentingAgents(v19, v20);
      if (v21)
      {
        v22 = *(_QWORD *)(v21 + 96);
        if (v22)
          WebCore::InspectorCanvasAgent::recordAction(v22, (WebCore::CanvasRenderingContext *)(v9 + 8), (const WTF::StringImpl *)&v26, v25);
      }
    }
    if (v28)
    {
      v23 = (_DWORD *)v27[0];
      v27[0] = 0;
      if (v23)
      {
        if (*v23 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v23;
      }
    }
    v24 = v26;
    v26 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, v20);
      else
        *(_DWORD *)v24 -= 2;
    }
  }
  WebCore::WebGLRenderingContextBase::setDrawingBufferColorSpace(v9, v11);
  return 1;
}

uint64_t WebCore::JSWebGL2RenderingContextOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  WTF::ConcurrentPtrHashSet *v12;
  _DWORD *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unsigned int v19;
  void *v20;
  uint64_t result;
  void *v22;

  v7 = *a2;
  v8 = *(_QWORD **)(*a2 + 24);
  v9 = v8[7];
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      if (!*(_BYTE *)(v10 + 180))
      {
        if (v8[8] || ((*(uint64_t (**)(_QWORD *))(v8[6] + 64))(v8 + 6) & 1) != 0)
        {
          if (a5)
          {
            *a5 = "ActiveDOMObject with pending activity";
            a5[1] = 38;
          }
          return 1;
        }
        v8 = *(_QWORD **)(v7 + 24);
      }
    }
  }
  v11 = (void *)v8[5];
  if (a5)
  {
    *a5 = "Reachable from CanvasBase";
    a5[1] = 26;
  }
  v12 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v13 = (_DWORD *)*((_QWORD *)v12 + 6);
  if ((_DWORD *)((char *)v12 + 56) == v13)
  {
    v22 = v11;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v12, v11);
    v11 = v22;
    if (!(_DWORD)result)
      return result;
LABEL_19:
    if (*(_BYTE *)(a4 + 131))
      (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v11);
    return 1;
  }
  v14 = v13[1];
  v15 = ((unint64_t)v11 + ~((_QWORD)v11 << 32)) ^ (((unint64_t)v11 + ~((_QWORD)v11 << 32)) >> 22);
  v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
  v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
  v18 = v14 & ((v17 >> 31) ^ v17);
  v19 = v18;
  while (1)
  {
    v20 = *(void **)&v13[2 * v19 + 4];
    if (!v20)
      return 0;
    if (v11 == v20)
      goto LABEL_19;
    v19 = (v19 + 1) & v14;
    if (v19 == v18)
    {
      __break(0xC471u);
      JUMPOUT(0x1950596D0);
    }
  }
}

_QWORD *WebCore::JSWebGL2RenderingContextOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;

  v4 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 40) + 16))(*(_QWORD *)(v4 + 40));
  v6 = v4 + 16;
  if (!v4)
    v6 = 0;
  if (!*(_DWORD *)(a3 + 48))
  {
    if (*(_QWORD *)v6)
    {
      *(_QWORD *)(*(_QWORD *)v6 + 8) = 3;
      *(_QWORD *)v6 = 0;
    }
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 40) + 24))(*(_QWORD *)(v4 + 40));
  }
  v9 = *(_QWORD *)(a3 + 32);
  v8 = (uint64_t *)(a3 + 32);
  v7 = v9;
  if (!v9)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 40) + 24))(*(_QWORD *)(v4 + 40));
  v10 = *(_DWORD *)(v7 - 8);
  v11 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
  v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
  v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
  v14 = v10 & ((v13 >> 31) ^ v13);
  v15 = *(_QWORD *)(v7 + 16 * v14);
  if (v15 != v4)
  {
    v16 = 1;
    while (v15)
    {
      v14 = ((_DWORD)v14 + v16) & v10;
      v15 = *(_QWORD *)(v7 + 16 * v14);
      ++v16;
      if (v15 == v4)
        goto LABEL_12;
    }
    v14 = *(unsigned int *)(v7 - 4);
  }
LABEL_12:
  if (v14 == *(_DWORD *)(v7 - 4))
    goto LABEL_22;
  v17 = (_QWORD *)(v7 + 16 * v14);
  *v17 = -1;
  v20 = v17[1];
  v19 = v17 + 1;
  v18 = v20;
  if (v20)
  {
    *(_QWORD *)(v18 + 8) = 3;
    *v19 = 0;
  }
  ++*(_DWORD *)(*v8 - 16);
  v21 = *v8;
  v22 = *v8 ? *(_DWORD *)(v21 - 12) - 1 : -1;
  *(_DWORD *)(v21 - 12) = v22;
  v23 = *v8;
  if (!*v8
    || ((v24 = 6 * *(_DWORD *)(v23 - 12), v25 = *(_DWORD *)(v23 - 4), v24 < v25) ? (v26 = v25 >= 9) : (v26 = 0), !v26))
  {
LABEL_22:
    if (!v4)
      return result;
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 40) + 24))(*(_QWORD *)(v4 + 40));
  }
  result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v8, v25 >> 1, 0);
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 40) + 24))(*(_QWORD *)(v4 + 40));
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGL2RenderingContext>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t SlowCase;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char **v14;
  int v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v19;
  JSC::Structure *v20;
  JSC::JSCell *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  WTF *v38;
  void *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *Allocator;
  uint64_t v45;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unsigned int v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  WTF *v61;

  v5 = *(_QWORD *)(a2 + 3320);
  if (*(_DWORD *)(v5 + 48))
  {
    v50 = *(_QWORD *)(v5 + 32);
    if (!v50)
      goto LABEL_5;
    v51 = *(_DWORD *)(v50 - 8);
    v52 = (~(a3 << 32) + a3) ^ ((unint64_t)(~(a3 << 32) + a3) >> 22);
    v53 = 9 * ((v52 + ~(v52 << 13)) ^ ((v52 + ~(v52 << 13)) >> 8));
    v54 = (v53 ^ (v53 >> 15)) + ~((v53 ^ (v53 >> 15)) << 27);
    v55 = v51 & ((v54 >> 31) ^ v54);
    v56 = *(_QWORD *)(v50 + 16 * v55);
    if (v56 != a3)
    {
      v57 = 1;
      while (v56)
      {
        v55 = ((_DWORD)v55 + v57) & v51;
        v56 = *(_QWORD *)(v50 + 16 * v55);
        ++v57;
        if (v56 == a3)
          goto LABEL_66;
      }
      goto LABEL_5;
    }
LABEL_66:
    v6 = *(_QWORD *)(v50 + 16 * v55 + 8);
    if (!v6)
      goto LABEL_5;
  }
  else
  {
    v6 = *(_QWORD *)(a3 + 16);
    if (!v6)
      goto LABEL_5;
  }
  if ((*(_BYTE *)(v6 + 8) & 3) == 0)
  {
    SlowCase = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
      return SlowCase;
  }
LABEL_5:
  (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 40) + 16))(*(_QWORD *)(a3 + 40));
  if (*(void (***)(WebCore::WebGL2RenderingContext *__hidden))a3 != off_1E33DD798)
  {
    __break(0xC471u);
    JUMPOUT(0x195059D84);
  }
  v8 = *(_QWORD *)(a2 + 3296);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 - 8);
    v10 = ((unint64_t)&WebCore::JSWebGL2RenderingContext::s_info
         + ~((_QWORD)&WebCore::JSWebGL2RenderingContext::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGL2RenderingContext::s_info
                                                                          + ~((_QWORD)&WebCore::JSWebGL2RenderingContext::s_info << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = *(char ***)(v8 + 16 * v13);
    if (v14 == &WebCore::JSWebGL2RenderingContext::s_info)
    {
LABEL_11:
      v16 = *(_QWORD *)(v8 + 16 * v13 + 8);
      if (v16)
        goto LABEL_13;
    }
    else
    {
      v15 = 1;
      while (v14)
      {
        v13 = ((_DWORD)v13 + v15) & v9;
        v14 = *(char ***)(v8 + 16 * v13);
        ++v15;
        if (v14 == &WebCore::JSWebGL2RenderingContext::s_info)
          goto LABEL_11;
      }
    }
  }
  v17 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSWebGL2RenderingContextPrototype::createStructure(v17, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v21 = (JSC::JSCell *)WebCore::JSWebGL2RenderingContextPrototype::create((WebCore::JSWebGL2RenderingContextPrototype *)v17, Structure, v19, v20);
  v22 = WebCore::JSWebGL2RenderingContext::createStructure(v17, a2, v21);
  v16 = WebCore::cacheDOMStructure((JSCell *)a2, v22, (uint64_t)&WebCore::JSWebGL2RenderingContext::s_info);
LABEL_13:
  v23 = *(_QWORD *)(a2 + 56);
  v24 = *(_QWORD *)(v23 + 41456);
  v25 = *(_QWORD *)(v24 + 23536);
  v26 = *(_QWORD **)(v25 + 5224);
  if (v26)
    goto LABEL_36;
  v27 = *(_QWORD *)(v24 + 22648);
  if (__ldaxr((unsigned __int8 *)v27))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v27))
  {
    goto LABEL_18;
  }
  MEMORY[0x19AEA534C](v27);
LABEL_18:
  v29 = *(_QWORD *)(v27 + 2824);
  v59 = *(_QWORD *)(v29 + 5224);
  if (!v59)
  {
    v30 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v61, "IsoSpace T");
    v60 = 0;
    MEMORY[0x19AEA3204](v30, &v61, v23 + 192, v23 + 1872, 32, 8, &v60);
    v32 = (uint64_t)v60;
    v60 = 0;
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
    v33 = v61;
    v61 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 1)
        WTF::fastFree(v33, v31);
      else
        --*(_DWORD *)v33;
    }
    v59 = v30;
    v34 = *(_QWORD *)(v29 + 5224);
    *(_QWORD *)(v29 + 5224) = v30;
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
    v35 = *(unsigned int *)(v27 + 2844);
    if ((_DWORD)v35 == *(_DWORD *)(v27 + 2840))
    {
      v36 = (_QWORD *)WTF::Vector<JSC::IsoSubspace *,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v27 + 2832, v35 + 1, (unint64_t)&v59);
      v35 = *(unsigned int *)(v27 + 2844);
      *(_QWORD *)(*(_QWORD *)(v27 + 2832) + 8 * v35) = *v36;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(v27 + 2832) + 8 * v35) = v30;
    }
    *(_DWORD *)(v27 + 2844) = v35 + 1;
  }
  v26 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v37 = *(_QWORD *)(v25 + 5224);
  *(_QWORD *)(v25 + 5224) = v26;
  if (v37)
  {
    v38 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v38, v39);
  }
  v40 = __ldxr((unsigned __int8 *)v27);
  if (v40 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v27))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v27);
LABEL_36:
  SlowCase = v26[3];
  if (SlowCase < v26[4])
  {
LABEL_37:
    v26[3] = SlowCase + 32;
    goto LABEL_38;
  }
  SlowCase = v26[5];
  if ((SlowCase & 1) == 0)
  {
    v58 = *(_QWORD *)(SlowCase + 8) ^ v26[6];
    v26[4] = SlowCase + HIDWORD(v58);
    v26[5] = SlowCase + (int)v58;
    goto LABEL_37;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v16);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v23 + 755))
    __dmb(0xAu);
  v41 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336F90 & 1) == 0)
  {
    qword_1EE336F88 = (uint64_t)&off_1E3320630;
    byte_1EE336F90 = 1;
  }
  if (!*(_DWORD *)(v41 + 48))
  {
    if ((SlowCase & 8) != 0)
      v42 = (SlowCase - 112) | 1;
    else
      v42 = SlowCase & 0xFFFFFFFFFFFFC000;
    if ((v42 & 1) != 0)
      v43 = v42 + 47;
    else
      v43 = *(_QWORD *)v42 + 32;
    Allocator = *(_QWORD **)(v43 + 16);
    if (!Allocator)
      Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
    *(_QWORD *)(v43 + 16) = *Allocator;
    *Allocator = SlowCase;
    Allocator[1] = &qword_1EE336F88;
    Allocator[2] = v41;
    v45 = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 16) = Allocator;
    if (!v45)
      return SlowCase;
LABEL_60:
    *(_QWORD *)(v45 + 8) = 3;
    return SlowCase;
  }
  v61 = (WTF *)a3;
  if ((SlowCase & 8) != 0)
    v47 = (SlowCase - 112) | 1;
  else
    v47 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v47 & 1) != 0)
    v48 = v47 + 47;
  else
    v48 = *(_QWORD *)v47 + 32;
  v49 = *(_QWORD **)(v48 + 16);
  if (!v49)
    v49 = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v48 + 16) = *v49;
  *v49 = SlowCase;
  v49[1] = &qword_1EE336F88;
  v49[2] = v41;
  v60 = v49;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v41 + 32), (uint64_t *)&v61, (uint64_t *)&v60);
  v45 = (uint64_t)v60;
  if (v60)
    goto LABEL_60;
  return SlowCase;
}

uint64_t WebCore::JSWebGLActiveInfo::destroy(uint64_t this, JSC::JSCell *a2)
{
  WTF *v2;
  WTF::StringImpl *v3;

  v2 = *(WTF **)(this + 24);
  *(_QWORD *)(this + 24) = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      v3 = (WTF::StringImpl *)*((_QWORD *)v2 + 1);
      *((_QWORD *)v2 + 1) = 0;
      if (v3)
      {
        if (*(_DWORD *)v3 == 2)
          WTF::StringImpl::destroy(v3, a2);
        else
          *(_DWORD *)v3 -= 2;
      }
      return WTF::fastFree(v2, a2);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return this;
}

uint64_t WebCore::JSWebGLActiveInfo::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLActiveInfoPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebGLActiveInfoPrototype::create(WebCore::JSWebGLActiveInfoPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>(this, (uint64_t)&WebCore::JSWebGLActiveInfo::s_info, &WebCore::JSWebGLActiveInfoPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLActiveInfo>,(WebCore::DOMConstructorID)644>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5152);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLActiveInfo>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSWebGLActiveInfo::s_info + ~((_QWORD)&WebCore::JSWebGLActiveInfo::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLActiveInfo::s_info + ~((_QWORD)&WebCore::JSWebGLActiveInfo::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSWebGLActiveInfo::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSWebGLActiveInfo::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSWebGLActiveInfoPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebGLActiveInfoPrototype::create((WebCore::JSWebGLActiveInfoPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSWebGLActiveInfo::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebGLActiveInfo::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5152) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebGLActiveInfoConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebGLActiveInfoPrototype::s_info != (char **)(16
                                                               * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                 + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLActiveInfo>,(WebCore::DOMConstructorID)644>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

unint64_t WebCore::jsWebGLActiveInfo_size(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(*(_QWORD *)(a2 + 24) + 20) | 0xFFFE000000000000;
}

unint64_t WebCore::jsWebGLActiveInfo_type(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(*(_QWORD *)(a2 + 24) + 16);
  if ((v2 & 0x80000000) != 0)
    return COERCE__INT64((double)v2) + 0x2000000000000;
  else
    return v2 | 0xFFFE000000000000;
}

uint64_t WebCore::jsWebGLActiveInfo_name(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned int v11;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = (uint64_t *)(v2 + 41968);
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
  if (!v4)
    return *v3;
  v5 = *(_DWORD *)v4;
  v6 = *(_DWORD *)(v4 + 4);
  *(_DWORD *)v4 += 2;
  if (v6)
  {
    if (v6 != 1)
    {
LABEL_4:
      v7 = *(_QWORD *)(v2 + 64760);
      if (!v7 || v4 != *(_QWORD *)(v7 + 8))
      {
        v7 = JSC::jsStringWithCacheSlowCase();
        v5 = *(_DWORD *)v4 - 2;
      }
      goto LABEL_7;
    }
    v9 = *(unsigned __int8 **)(v4 + 8);
    if ((*(_BYTE *)(v4 + 16) & 4) != 0)
    {
      v10 = *v9;
    }
    else
    {
      v11 = *(unsigned __int16 *)v9;
      if (v11 > 0xFF)
        goto LABEL_4;
      v10 = v11;
    }
    v7 = *(_QWORD *)(v2 + 8 * v10 + 42216);
  }
  else
  {
    v7 = *v3;
  }
LABEL_7:
  if (v5)
    *(_DWORD *)v4 = v5;
  else
    WTF::StringImpl::destroy((WTF::StringImpl *)v4, a2);
  return v7;
}

uint64_t WebCore::JSWebGLActiveInfoOwner::isReachableFromOpaqueRoots()
{
  return 0;
}

void WebCore::JSWebGLActiveInfoOwner::finalize(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WTF *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WTF *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  WTF::StringImpl *v24;

  v3 = *(WTF **)(*(_QWORD *)a2 + 24);
  ++*(_DWORD *)v3;
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(WTF **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(WTF **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (*(_DWORD *)v3 == 1)
  {
    v24 = (WTF::StringImpl *)*((_QWORD *)v3 + 1);
    *((_QWORD *)v3 + 1) = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 2)
        WTF::StringImpl::destroy(v24, a2);
      else
        *(_DWORD *)v24 -= 2;
    }
    WTF::fastFree(v3, a2);
  }
  else
  {
    --*(_DWORD *)v3;
  }
}

unint64_t WebCore::wrap<WebCore::WebGLActiveInfo>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*(_DWORD *)a3;
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLActiveInfo::s_info + ~((_QWORD)&WebCore::JSWebGLActiveInfo::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLActiveInfo::s_info + ~((_QWORD)&WebCore::JSWebGLActiveInfo::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLActiveInfo::s_info)
    {
LABEL_14:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_16;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLActiveInfo::s_info)
          goto LABEL_14;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSWebGLActiveInfoPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebGLActiveInfoPrototype::create((WebCore::JSWebGLActiveInfoPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSWebGLActiveInfo::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebGLActiveInfo::s_info);
LABEL_16:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 5232);
  if (v33)
    goto LABEL_36;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_21;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_21:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 5232))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 5232);
    *(_QWORD *)(v36 + 5232) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 5232);
  *(_QWORD *)(v32 + 5232) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_35;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_35:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_36:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_38;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_38:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336FA0 & 1) == 0)
  {
    qword_1EE336F98 = (uint64_t)&off_1E3320660;
    byte_1EE336FA0 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336F98;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

_DWORD *WebCore::JSWebGLBlendFuncExtended::destroy(WebCore::JSWebGLBlendFuncExtended *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLBlendFuncExtended::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLBlendFuncExtendedOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsWebGLBlendFuncExtended";
    a5[1] = 40;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x19505B04CLL);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLBlendFuncExtendedOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLBlendFuncExtended>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLBlendFuncExtended *__hidden))a3 != off_1E33DD778)
  {
    __break(0xC471u);
    JUMPOUT(0x19505B834);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLBlendFuncExtended::s_info
         + ~((_QWORD)&WebCore::JSWebGLBlendFuncExtended::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLBlendFuncExtended::s_info
                                                                          + ~((_QWORD)&WebCore::JSWebGLBlendFuncExtended::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLBlendFuncExtended::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLBlendFuncExtended::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSWebGLBlendFuncExtendedPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>((JSC::VM *)v24, (uint64_t)&WebCore::JSWebGLBlendFuncExtended::s_info, &WebCore::JSWebGLBlendFuncExtendedPrototypeTableValues, (JSC::JSObject *)v30);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSWebGLBlendFuncExtended::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSWebGLBlendFuncExtended::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 5240);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 5240))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 5240);
    *(_QWORD *)(v46 + 5240) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 5240);
  *(_QWORD *)(v42 + 5240) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336FB0 & 1) == 0)
  {
    qword_1EE336FA8 = (uint64_t)&off_1E3320690;
    byte_1EE336FB0 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE336FA8;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSWebGLBuffer::destroy(WebCore::JSWebGLBuffer *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLBuffer::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLBufferPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebGLBufferPrototype::create(WebCore::JSWebGLBufferPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSWebGLBuffer::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSWebGLBufferPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLBuffer>,(WebCore::DOMConstructorID)646>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5168);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLBuffer>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSWebGLBuffer::s_info + ~((_QWORD)&WebCore::JSWebGLBuffer::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLBuffer::s_info + ~((_QWORD)&WebCore::JSWebGLBuffer::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSWebGLBuffer::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSWebGLBuffer::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSWebGLBufferPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebGLBufferPrototype::create((WebCore::JSWebGLBufferPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSWebGLBuffer::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebGLBuffer::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5168) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebGLBufferConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebGLBufferPrototype::s_info != (char **)(16
                                                           * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLBuffer>,(WebCore::DOMConstructorID)646>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSWebGLBufferOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  void *v5;
  WTF::ConcurrentPtrHashSet *v6;
  _DWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  uint64_t result;
  uint64_t v16;
  void *v17;

  v5 = *(void **)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from WebGLBuffer";
    a5[1] = 27;
  }
  v6 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v7 = (_DWORD *)*((_QWORD *)v6 + 6);
  if ((_DWORD *)((char *)v6 + 56) == v7)
  {
    v16 = a4;
    v17 = v5;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v6, v5);
    a4 = v16;
    v5 = v17;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v5);
      return 1;
    }
  }
  else
  {
    v8 = v7[1];
    v9 = ((unint64_t)v5 + ~((_QWORD)v5 << 32)) ^ (((unint64_t)v5 + ~((_QWORD)v5 << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = v12;
    while (1)
    {
      v14 = *(void **)&v7[2 * v13 + 4];
      if (!v14)
        return 0;
      if (v5 == v14)
        goto LABEL_12;
      v13 = (v13 + 1) & v8;
      if (v13 == v12)
      {
        __break(0xC471u);
        JUMPOUT(0x19505C3C8);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLBufferOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLBuffer>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLBuffer *__hidden))a3 != off_1E33DDFA0)
  {
    __break(0xC471u);
    JUMPOUT(0x19505C984);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLBuffer::s_info + ~((_QWORD)&WebCore::JSWebGLBuffer::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLBuffer::s_info + ~((_QWORD)&WebCore::JSWebGLBuffer::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLBuffer::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_17;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLBuffer::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSWebGLBufferPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebGLBufferPrototype::create((WebCore::JSWebGLBufferPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSWebGLBuffer::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebGLBuffer::s_info);
LABEL_17:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 5248);
  if (v33)
    goto LABEL_37;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_22:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 5248))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 5248);
    *(_QWORD *)(v36 + 5248) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 5248);
  *(_QWORD *)(v32 + 5248) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_37:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336FC0 & 1) == 0)
  {
    qword_1EE336FB8 = (uint64_t)&off_1E33206C0;
    byte_1EE336FC0 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE336FB8;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

_DWORD *WebCore::JSWebGLClipCullDistance::destroy(WebCore::JSWebGLClipCullDistance *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLClipCullDistance::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLClipCullDistanceOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsWebGLClipCullDistance";
    a5[1] = 39;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x19505CC34);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLClipCullDistanceOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLClipCullDistance>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLClipCullDistance *__hidden))a3 != off_1E33DDFC8)
  {
    __break(0xC471u);
    JUMPOUT(0x19505D41CLL);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLClipCullDistance::s_info
         + ~((_QWORD)&WebCore::JSWebGLClipCullDistance::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLClipCullDistance::s_info
                                                                         + ~((_QWORD)&WebCore::JSWebGLClipCullDistance::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLClipCullDistance::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLClipCullDistance::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSWebGLClipCullDistancePrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<11u>((JSC::VM *)v24, (uint64_t)&WebCore::JSWebGLClipCullDistance::s_info, (uint64_t)&WebCore::JSWebGLClipCullDistancePrototypeTableValues, (JSC::JSObject *)v30);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSWebGLClipCullDistance::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSWebGLClipCullDistance::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 5256);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 5256))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 5256);
    *(_QWORD *)(v46 + 5256) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 5256);
  *(_QWORD *)(v42 + 5256) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336FD0 & 1) == 0)
  {
    qword_1EE336FC8 = (uint64_t)&off_1E33206F0;
    byte_1EE336FD0 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE336FC8;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSWebGLColorBufferFloat::destroy(WebCore::JSWebGLColorBufferFloat *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLColorBufferFloat::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLColorBufferFloatOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsWebGLColorBufferFloat";
    a5[1] = 39;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x19505D7E0);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLColorBufferFloatOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLColorBufferFloat>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLColorBufferFloat *__hidden))a3 != off_1E33DDFE8)
  {
    __break(0xC471u);
    JUMPOUT(0x19505DFC8);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLColorBufferFloat::s_info
         + ~((_QWORD)&WebCore::JSWebGLColorBufferFloat::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLColorBufferFloat::s_info
                                                                         + ~((_QWORD)&WebCore::JSWebGLColorBufferFloat::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLColorBufferFloat::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLColorBufferFloat::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSWebGLColorBufferFloatPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<3u>((JSC::VM *)v24, (uint64_t)&WebCore::JSWebGLColorBufferFloat::s_info, &WebCore::JSWebGLColorBufferFloatPrototypeTableValues, (JSC::JSObject *)v30);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSWebGLColorBufferFloat::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSWebGLColorBufferFloat::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 5264);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 5264))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 5264);
    *(_QWORD *)(v46 + 5264) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 5264);
  *(_QWORD *)(v42 + 5264) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336FE0 & 1) == 0)
  {
    qword_1EE336FD8 = (uint64_t)&off_1E3320720;
    byte_1EE336FE0 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE336FD8;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSWebGLCompressedTextureASTC::destroy(WebCore::JSWebGLCompressedTextureASTC *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLCompressedTextureASTC::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLCompressedTextureASTCOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsWebGLCompressedTextureASTC";
    a5[1] = 44;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x19505E38CLL);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLCompressedTextureASTCOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLCompressedTextureASTC>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLCompressedTextureASTC *__hidden))a3 != off_1E33DE008)
  {
    __break(0xC471u);
    JUMPOUT(0x19505EB74);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLCompressedTextureASTC::s_info
         + ~((_QWORD)&WebCore::JSWebGLCompressedTextureASTC::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLCompressedTextureASTC::s_info
                                                                              + ~((_QWORD)&WebCore::JSWebGLCompressedTextureASTC::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLCompressedTextureASTC::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLCompressedTextureASTC::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSWebGLCompressedTextureASTCPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<29u>((JSC::VM *)v24, (uint64_t)&WebCore::JSWebGLCompressedTextureASTC::s_info, (uint64_t)&WebCore::JSWebGLCompressedTextureASTCPrototypeTableValues, (JSC::JSObject *)v30);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSWebGLCompressedTextureASTC::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSWebGLCompressedTextureASTC::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 5272);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 5272))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 5272);
    *(_QWORD *)(v46 + 5272) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 5272);
  *(_QWORD *)(v42 + 5272) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE336FF0 & 1) == 0)
  {
    qword_1EE336FE8 = (uint64_t)&off_1E3320750;
    byte_1EE336FF0 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE336FE8;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSWebGLCompressedTextureETC::destroy(WebCore::JSWebGLCompressedTextureETC *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLCompressedTextureETC::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLCompressedTextureETCOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsWebGLCompressedTextureETC";
    a5[1] = 43;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x19505EF38);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLCompressedTextureETCOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLCompressedTextureETC>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLCompressedTextureETC *__hidden))a3 != off_1E33DE028)
  {
    __break(0xC471u);
    JUMPOUT(0x19505F720);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLCompressedTextureETC::s_info
         + ~((_QWORD)&WebCore::JSWebGLCompressedTextureETC::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLCompressedTextureETC::s_info
                                                                             + ~((_QWORD)&WebCore::JSWebGLCompressedTextureETC::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLCompressedTextureETC::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLCompressedTextureETC::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSWebGLCompressedTextureETCPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<10u>((JSC::VM *)v24, (uint64_t)&WebCore::JSWebGLCompressedTextureETC::s_info, (uint64_t)&WebCore::JSWebGLCompressedTextureETCPrototypeTableValues, (JSC::JSObject *)v30);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSWebGLCompressedTextureETC::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSWebGLCompressedTextureETC::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 5280);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 5280))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 5280);
    *(_QWORD *)(v46 + 5280) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 5280);
  *(_QWORD *)(v42 + 5280) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE337000 & 1) == 0)
  {
    qword_1EE336FF8 = (uint64_t)&off_1E3320780;
    byte_1EE337000 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE336FF8;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSWebGLCompressedTextureETC1::destroy(WebCore::JSWebGLCompressedTextureETC1 *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLCompressedTextureETC1::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLCompressedTextureETC1Owner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsWebGLCompressedTextureETC1";
    a5[1] = 44;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x19505FAE4);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLCompressedTextureETC1Owner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLCompressedTextureETC1>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  JSC::Structure *v38;
  int v39;
  JSC::JSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  void *v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  JSC::Structure *Allocator;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  WTF::StringImpl *v68[6];
  int v69;
  int v70;
  int v71;
  JSC::Structure *v72;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLCompressedTextureETC1 *__hidden))a3 != off_1E33DE048)
  {
    __break(0xC471u);
    JUMPOUT(0x195060330);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLCompressedTextureETC1::s_info
         + ~((_QWORD)&WebCore::JSWebGLCompressedTextureETC1::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLCompressedTextureETC1::s_info
                                                                              + ~((_QWORD)&WebCore::JSWebGLCompressedTextureETC1::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLCompressedTextureETC1::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_43;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLCompressedTextureETC1::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v68[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v64 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v64;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v68, &WebCore::JSWebGLCompressedTextureETC1Prototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v65 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v65);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v65;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v67 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)v30, (JSC::VM *)v24);
  WTF::AtomStringImpl::addLiteral();
  v32 = v68[0];
  JSC::reifyStaticProperty((JSC::VM *)v24, (uint64_t)&WebCore::JSWebGLCompressedTextureETC1::s_info, (unint64_t *)v68, (uint64_t)&WebCore::JSWebGLCompressedTextureETC1PrototypeTableValues, (unsigned __int8 *)v30);
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v33);
    else
      *(_DWORD *)v32 -= 2;
  }
  v34 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v36 = JSC::JSString::create(v24, v68);
  v37 = v68[0];
  v68[0] = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v35);
    else
      *(_DWORD *)v37 -= 2;
  }
  v38 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v71 = *(_DWORD *)v30;
  v72 = v38;
  v39 = JSC::Structure::outOfLineCapacity(v38);
  v69 = 0;
  v70 = v39;
  v68[0] = (WTF::StringImpl *)&v70;
  v68[1] = (WTF::StringImpl *)v30;
  v68[2] = (WTF::StringImpl *)v24;
  v68[3] = (WTF::StringImpl *)&v71;
  v68[4] = (WTF::StringImpl *)&v72;
  v68[5] = (WTF::StringImpl *)&v69;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v38, (JSC::VM *)v24, v34, 6, (uint64_t)v68);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v69, v36);
  *((_DWORD *)v38 + 4) |= 0x10u;
  LODWORD(v68[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v40 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v40)
      JSC::JSObject::didBecomePrototype(v40, (JSC::VM *)v24);
  }
  v41 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v41 = *(_QWORD *)(v24 + 40152);
    if ((v41 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v41 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_40;
    }
    v66 = *(_QWORD *)(v41 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v41 + HIDWORD(v66);
    *(_QWORD *)(v24 + 40152) = v41 + (int)v66;
  }
  *v25 = v41 + 128;
LABEL_40:
  *(_DWORD *)v41 = 0;
  MEMORY[0x19AEA4278](v41, v24, a2, v30, v68, &WebCore::JSWebGLCompressedTextureETC1::s_info, 0, 0, v67);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v41, (uint64_t)&WebCore::JSWebGLCompressedTextureETC1::s_info);
LABEL_43:
  v42 = *(_QWORD *)(a2 + 56);
  v43 = *(_QWORD *)(v42 + 41456);
  v44 = *(_QWORD *)(v43 + 23536);
  v45 = *(_QWORD **)(v44 + 5288);
  if (v45)
    goto LABEL_63;
  v46 = *(_QWORD *)(v43 + 22648);
  if (__ldaxr((unsigned __int8 *)v46))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v46))
  {
    goto LABEL_48;
  }
  MEMORY[0x19AEA534C](v46);
LABEL_48:
  v48 = *(_QWORD *)(v46 + 2824);
  if (!*(_QWORD *)(v48 + 5288))
  {
    v49 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v68, "IsoSpace T");
    v72 = 0;
    MEMORY[0x19AEA3204](v49, v68, v42 + 192, v42 + 1872, 32, 8, &v72);
    v51 = (uint64_t)v72;
    v72 = 0;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
    v52 = v68[0];
    v68[0] = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 1)
        WTF::fastFree(v52, v50);
      else
        --*(_DWORD *)v52;
    }
    v53 = *(_QWORD *)(v48 + 5288);
    *(_QWORD *)(v48 + 5288) = v49;
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  }
  v45 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v54 = *(_QWORD *)(v44 + 5288);
  *(_QWORD *)(v44 + 5288) = v45;
  if (v54)
  {
    v55 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v55, v56);
  }
  v57 = __ldxr((unsigned __int8 *)v46);
  if (v57 != 1)
  {
    __clrex();
    goto LABEL_62;
  }
  if (__stlxr(0, (unsigned __int8 *)v46))
LABEL_62:
    WTF::Lock::unlockSlow((WTF::Lock *)v46);
LABEL_63:
  v14 = v45[3];
  if (v14 >= v45[4])
  {
    v14 = v45[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_65;
    }
    v63 = *(_QWORD *)(v14 + 8) ^ v45[6];
    v45[4] = v14 + HIDWORD(v63);
    v45[5] = v14 + (int)v63;
  }
  v45[3] = v14 + 32;
LABEL_65:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v42 + 755))
    __dmb(0xAu);
  v58 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE337010 & 1) == 0)
  {
    qword_1EE337008 = (uint64_t)&off_1E33207B0;
    byte_1EE337010 = 1;
  }
  v68[0] = a3;
  if ((v14 & 8) != 0)
    v59 = (v14 - 112) | 1;
  else
    v59 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v59 & 1) != 0)
    v60 = v59 + 47;
  else
    v60 = *(_QWORD *)v59 + 32;
  Allocator = *(JSC::Structure **)(v60 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v60 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE337008;
  *((_QWORD *)Allocator + 2) = v58;
  v72 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v58 + 32), (uint64_t *)v68, (uint64_t *)&v72);
  if (v72)
    *((_QWORD *)v72 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSWebGLCompressedTexturePVRTC::destroy(WebCore::JSWebGLCompressedTexturePVRTC *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLCompressedTexturePVRTC::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLCompressedTexturePVRTCOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsWebGLCompressedTexturePVRTC";
    a5[1] = 45;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x1950606F4);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLCompressedTexturePVRTCOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLCompressedTexturePVRTC>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLCompressedTexturePVRTC *__hidden))a3 != off_1E33DE068)
  {
    __break(0xC471u);
    JUMPOUT(0x195060EDCLL);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLCompressedTexturePVRTC::s_info
         + ~((_QWORD)&WebCore::JSWebGLCompressedTexturePVRTC::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLCompressedTexturePVRTC::s_info
                                                                               + ~((_QWORD)&WebCore::JSWebGLCompressedTexturePVRTC::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLCompressedTexturePVRTC::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLCompressedTexturePVRTC::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSWebGLCompressedTexturePVRTCPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>((JSC::VM *)v24, (uint64_t)&WebCore::JSWebGLCompressedTexturePVRTC::s_info, &WebCore::JSWebGLCompressedTexturePVRTCPrototypeTableValues, (JSC::JSObject *)v30);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSWebGLCompressedTexturePVRTC::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSWebGLCompressedTexturePVRTC::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 5296);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 5296))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 5296);
    *(_QWORD *)(v46 + 5296) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 5296);
  *(_QWORD *)(v42 + 5296) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE337020 & 1) == 0)
  {
    qword_1EE337018 = (uint64_t)&off_1E33207E0;
    byte_1EE337020 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE337018;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSWebGLCompressedTextureS3TC::destroy(WebCore::JSWebGLCompressedTextureS3TC *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLCompressedTextureS3TC::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLCompressedTextureS3TCOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsWebGLCompressedTextureS3TC";
    a5[1] = 44;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x1950612A0);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLCompressedTextureS3TCOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLCompressedTextureS3TC>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLCompressedTextureS3TC *__hidden))a3 != off_1E33DE088)
  {
    __break(0xC471u);
    JUMPOUT(0x195061A88);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLCompressedTextureS3TC::s_info
         + ~((_QWORD)&WebCore::JSWebGLCompressedTextureS3TC::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLCompressedTextureS3TC::s_info
                                                                              + ~((_QWORD)&WebCore::JSWebGLCompressedTextureS3TC::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLCompressedTextureS3TC::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLCompressedTextureS3TC::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSWebGLCompressedTextureS3TCPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>((JSC::VM *)v24, (uint64_t)&WebCore::JSWebGLCompressedTextureS3TC::s_info, &WebCore::JSWebGLCompressedTextureS3TCPrototypeTableValues, (JSC::JSObject *)v30);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSWebGLCompressedTextureS3TC::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSWebGLCompressedTextureS3TC::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 5304);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 5304))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 5304);
    *(_QWORD *)(v46 + 5304) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 5304);
  *(_QWORD *)(v42 + 5304) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE337030 & 1) == 0)
  {
    qword_1EE337028 = (uint64_t)&off_1E3320810;
    byte_1EE337030 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE337028;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSWebGLCompressedTextureS3TCsRGB::destroy(WebCore::JSWebGLCompressedTextureS3TCsRGB *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLCompressedTextureS3TCsRGB::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLCompressedTextureS3TCsRGBOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsWebGLCompressedTextureS3TCsRGB";
    a5[1] = 48;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x195061E4CLL);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLCompressedTextureS3TCsRGBOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLCompressedTextureS3TCsRGB>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLCompressedTextureS3TCsRGB *__hidden))a3 != off_1E33DE118)
  {
    __break(0xC471u);
    JUMPOUT(0x195062634);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLCompressedTextureS3TCsRGB::s_info
         + ~((_QWORD)&WebCore::JSWebGLCompressedTextureS3TCsRGB::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLCompressedTextureS3TCsRGB::s_info
                                                                                  + ~((_QWORD)&WebCore::JSWebGLCompressedTextureS3TCsRGB::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLCompressedTextureS3TCsRGB::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLCompressedTextureS3TCsRGB::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSWebGLCompressedTextureS3TCsRGBPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>((JSC::VM *)v24, (uint64_t)&WebCore::JSWebGLCompressedTextureS3TCsRGB::s_info, &WebCore::JSWebGLCompressedTextureS3TCsRGBPrototypeTableValues, (JSC::JSObject *)v30);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSWebGLCompressedTextureS3TCsRGB::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSWebGLCompressedTextureS3TCsRGB::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 5312);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 5312))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 5312);
    *(_QWORD *)(v46 + 5312) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 5312);
  *(_QWORD *)(v42 + 5312) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE337040 & 1) == 0)
  {
    qword_1EE337038 = (uint64_t)&off_1E3320840;
    byte_1EE337040 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE337038;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

uint64_t WebCore::convertDictionary<WebCore::WebGLContextAttributes>@<X0>(WebCore::JSDOMGlobalObject *this@<X0>, JSC::JSCell *a2@<X1>, uint64_t a3@<X8>)
{
  JSC::VM *v5;
  unint64_t v6;
  JSC::Structure *v7;
  uint64_t Object;
  WTF::StringImpl *v9;
  unint64_t v10;
  JSC::VM *v11;
  double v12;
  BOOL v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  JSC::VM *v16;
  BOOL v17;
  WTF::StringImpl *v18;
  unint64_t v19;
  BOOL v20;
  JSC::VM *v21;
  double v22;
  uint64_t v23;
  uint64_t result;
  unsigned int v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  unsigned int v28;
  JSC::VM *v29;
  int v30;
  const char *v31;
  int v32;
  int v33;
  int v34;
  char **v35;
  BOOL v36;
  BOOL v37;
  WTF::StringImpl *v38;
  WTF::StringImpl *v39;
  unint64_t v40;
  int v41;
  JSC::VM *v42;
  _BOOL4 v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  int v47;
  JSC::VM *v48;
  uint64_t v49;
  int v50;
  const char *v51;
  int v52;
  int v53;
  int v54;
  char **v55;
  WTF::StringImpl *v56;
  WTF::StringImpl *v57;
  unint64_t v58;
  JSC::VM *v59;
  double v60;
  WTF::StringImpl *v61;
  WTF::StringImpl *v62;
  unint64_t v63;
  _BOOL4 v64;
  JSC::VM *v65;
  double v66;
  WTF::StringImpl *v67;
  WTF::StringImpl *v68;
  unint64_t v69;
  double v70;
  int v71;
  uint16x8_t v72;
  uint16x8_t v73;
  uint16x8_t v74;
  uint16x8_t v75;
  uint16x8_t v76;
  uint16x8_t v77;
  uint16x8_t v78;
  uint16x8_t v79;
  BOOL v80;
  int v81;
  uint64_t v82;
  int *v83;
  int v84;
  BOOL v85;
  int v86;
  uint64_t v87;
  int *v88;
  int v89;
  BOOL v90;
  int v91;
  uint64_t v92;
  int *v93;
  int v94;
  BOOL v95;
  int v96;
  uint64_t v97;
  int *v98;
  int v99;
  BOOL v100;
  int v101;
  uint64_t v102;
  int *v103;
  int v104;
  BOOL v105;
  int v106;
  uint64_t v107;
  int *v108;
  int v109;
  BOOL v110;
  int v111;
  uint64_t v112;
  int *v113;
  int v114;
  uint16x8_t v115;
  uint16x8_t v116;
  uint16x8_t v117;
  char v121;
  char v122;
  JSC::VM *v123;
  uint64_t v124;
  WTF::StringImpl *v125;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v123 = v5;
  v6 = (unint64_t)a2 & 0xFFFFFFFFFFFFFFF7;
  if (((unint64_t)a2 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v7 = 0;
    v121 = 1;
    v122 = 1;
LABEL_32:
    v20 = 1;
    goto LABEL_38;
  }
  if (((unint64_t)a2 & 0xFFFE000000000002) != 0)
    goto LABEL_180;
  Object = JSC::JSCell::getObject(a2);
  if (!Object)
    goto LABEL_180;
  v7 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v10 = JSC::JSObject::get(v7, this, (unint64_t)v125);
  if (v125)
  {
    if (*(_DWORD *)v125 == 2)
      WTF::StringImpl::destroy(v125, v9);
    else
      *(_DWORD *)v125 -= 2;
  }
  if (*((_DWORD *)v5 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v5);
    if ((result & 1) != 0)
      goto LABEL_181;
  }
  if (v10 == 10)
  {
    v122 = 1;
    goto LABEL_16;
  }
  v11 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v10 >= 0xFFFE000000000000)
  {
    v95 = (_DWORD)v10 == 0;
    goto LABEL_326;
  }
  *(_QWORD *)&v12 = v10 - 0x2000000000000;
  if (v10 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v10 & 0xFFFE000000000002) != 0)
    {
      v13 = v10 == 7;
      goto LABEL_15;
    }
    v96 = *(unsigned __int8 *)(v10 + 5);
    if (v96 == 3)
    {
      v99 = *(_DWORD *)(v10 + 8);
    }
    else
    {
      if (v96 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v13 = 1;
          goto LABEL_15;
        }
        v95 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
        goto LABEL_326;
      }
      v97 = *(_QWORD *)(v10 + 8);
      if ((v97 & 1) != 0)
        v98 = (int *)(v10 + 16);
      else
        v98 = (int *)(v97 + 4);
      v99 = *v98;
    }
    v95 = v99 == 0;
LABEL_326:
    v13 = !v95;
    goto LABEL_15;
  }
  v13 = v12 > 0.0 || v12 < 0.0;
LABEL_15:
  v122 = v13;
  if (*((_DWORD *)v11 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v11);
    if ((result & 1) != 0)
      goto LABEL_181;
  }
LABEL_16:
  WTF::AtomStringImpl::addLiteral();
  v15 = JSC::JSObject::get(v7, this, (unint64_t)v125);
  if (v125)
  {
    if (*(_DWORD *)v125 == 2)
      WTF::StringImpl::destroy(v125, v14);
    else
      *(_DWORD *)v125 -= 2;
  }
  if (*((_DWORD *)v5 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v5);
    if ((result & 1) != 0)
      goto LABEL_181;
  }
  if (v15 == 10)
  {
    v121 = 1;
    goto LABEL_27;
  }
  v16 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v15 >= 0xFFFE000000000000)
  {
    v105 = (_DWORD)v15 == 0;
    goto LABEL_340;
  }
  if (v15 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v15 & 0xFFFE000000000002) != 0)
    {
      v17 = v15 == 7;
      goto LABEL_26;
    }
    v106 = *(unsigned __int8 *)(v15 + 5);
    if (v106 == 3)
    {
      v109 = *(_DWORD *)(v15 + 8);
    }
    else
    {
      if (v106 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v17 = 1;
          goto LABEL_26;
        }
        v105 = *(_QWORD *)(16 * (*(_DWORD *)v15 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
        goto LABEL_340;
      }
      v107 = *(_QWORD *)(v15 + 8);
      if ((v107 & 1) != 0)
        v108 = (int *)(v15 + 16);
      else
        v108 = (int *)(v107 + 4);
      v109 = *v108;
    }
    v105 = v109 == 0;
LABEL_340:
    v17 = !v105;
    goto LABEL_26;
  }
  v17 = COERCE_DOUBLE(v15 - 0x2000000000000) > 0.0 || COERCE_DOUBLE(v15 - 0x2000000000000) < 0.0;
LABEL_26:
  v121 = v17;
  if (*((_DWORD *)v16 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v16);
    if ((result & 1) != 0)
      goto LABEL_181;
  }
LABEL_27:
  WTF::AtomStringImpl::addLiteral();
  v19 = JSC::JSObject::get(v7, this, (unint64_t)v125);
  if (v125)
  {
    if (*(_DWORD *)v125 == 2)
      WTF::StringImpl::destroy(v125, v18);
    else
      *(_DWORD *)v125 -= 2;
  }
  if (*((_DWORD *)v5 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v5);
    if ((result & 1) != 0)
      goto LABEL_181;
  }
  if (v19 == 10)
    goto LABEL_32;
  v21 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v19 >= 0xFFFE000000000000)
  {
    v110 = (_DWORD)v19 == 0;
    goto LABEL_347;
  }
  *(_QWORD *)&v22 = v19 - 0x2000000000000;
  if (v19 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
  {
    if (v22 <= 0.0)
    {
      v20 = v22 < 0.0;
      goto LABEL_37;
    }
    goto LABEL_351;
  }
  if ((v19 & 0xFFFE000000000002) != 0)
  {
    v20 = v19 == 7;
    goto LABEL_37;
  }
  v111 = *(unsigned __int8 *)(v19 + 5);
  if (v111 == 3)
  {
    v114 = *(_DWORD *)(v19 + 8);
LABEL_346:
    v110 = v114 == 0;
    goto LABEL_347;
  }
  if (v111 == 2)
  {
    v112 = *(_QWORD *)(v19 + 8);
    if ((v112 & 1) != 0)
      v113 = (int *)(v19 + 16);
    else
      v113 = (int *)(v112 + 4);
    v114 = *v113;
    goto LABEL_346;
  }
  if ((*(_BYTE *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0xA) & 1) == 0)
  {
LABEL_351:
    v20 = 1;
    goto LABEL_37;
  }
  v110 = *(_QWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_347:
  v20 = !v110;
LABEL_37:
  if (*((_DWORD *)v21 + 20))
  {
    result = JSC::VM::hasExceptionsAfterHandlingTraps(v21);
    if ((result & 1) != 0)
      goto LABEL_181;
  }
LABEL_38:
  v23 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 136))(v23);
  if ((*(_QWORD *)(result + 440) & 0x80000000000000) == 0)
  {
    v25 = 0;
    goto LABEL_72;
  }
  if (v6 != 2)
  {
    WTF::AtomStringImpl::addLiteral();
    result = JSC::JSObject::get(v7, this, (unint64_t)v125);
    v27 = result;
    if (v125)
    {
      if (*(_DWORD *)v125 == 2)
        result = WTF::StringImpl::destroy(v125, v26);
      else
        *(_DWORD *)v125 -= 2;
    }
    if (*((_DWORD *)v5 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v5);
      if ((result & 1) != 0)
        goto LABEL_181;
    }
    if (v27 != 10)
    {
      v29 = (JSC::VM *)*((_QWORD *)this + 7);
      v125 = (WTF::StringImpl *)v27;
      if ((v27 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v27 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v125, this);
        result = v124;
        if (v124)
          goto LABEL_53;
        goto LABEL_179;
      }
      result = *(_QWORD *)(v27 + 8);
      if ((result & 1) != 0)
      {
        result = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v27, this);
        if (!result)
        {
LABEL_52:
          v124 = result;
          if (result)
          {
LABEL_53:
            v30 = *(_DWORD *)(result + 16);
            v31 = *(const char **)(result + 8);
            v32 = *(_DWORD *)(result + 4);
            if (v31 != "CreationTimeout" && v32 == 15)
            {
              if ((v30 & 4) != 0)
              {
                if (*v31 != 67
                  || *(_QWORD *)(v31 + 1) != 0x546E6F6974616572
                  || *(_QWORD *)(v31 + 7) != 0x74756F656D69546ELL)
                {
                  goto LABEL_59;
                }
              }
              else
              {
                if (*(_WORD *)v31 != 67)
                  goto LABEL_59;
                v73 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v31 + 2), (int16x8_t)xmmword_1968C17B0);
                v73.i16[0] = vminvq_u16(v73);
                if (!v73.i32[0])
                  goto LABEL_59;
                v74 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v31 + 14), (int16x8_t)xmmword_1968C17C0);
                v74.i16[0] = vminvq_u16(v74);
                if (!v74.i32[0])
                  goto LABEL_59;
              }
              goto LABEL_65;
            }
            if (v31 == "CreationTimeout" && v32 == 15)
            {
LABEL_65:
              v35 = &WebCore::parseEnumerationFromString<WebCore::GraphicsContextGLSimulatedCreationFailure>(WTF::String const&)::mappings;
              goto LABEL_66;
            }
            if (v31 == "FailPlatformContextCreation" || v32 != 27)
            {
              if (v31 != "FailPlatformContextCreation" || v32 != 27)
              {
                if (v31 == "IPCBufferOOM" || v32 != 12)
                {
                  if (v31 != "IPCBufferOOM" || v32 != 12)
                  {
                    if (v31 == "None" || v32 != 4)
                    {
                      if (v32 != 4 || v31 != "None")
                        goto LABEL_59;
                    }
                    else if ((v30 & 4) != 0)
                    {
                      if (*v31 != 78 || *(_WORD *)(v31 + 1) != 28271 || *((_WORD *)v31 + 1) != 25966)
                        goto LABEL_59;
                    }
                    else
                    {
                      if (*(_WORD *)v31 != 78)
                        goto LABEL_59;
                      if (*((_DWORD *)v31 + 1) != 6619246 || *(_DWORD *)(v31 + 2) != 7209071)
                        goto LABEL_59;
                    }
                    v35 = &off_1E331E2F0;
LABEL_66:
                    v34 = *((unsigned __int8 *)v35 + 16);
                    v33 = 1;
LABEL_67:
                    v124 = 0;
                    if (*(_DWORD *)result == 2)
                      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v26);
                    else
                      *(_DWORD *)result -= 2;
LABEL_69:
                    if (*((_DWORD *)v29 + 20))
                    {
                      result = JSC::VM::hasExceptionsAfterHandlingTraps(v29);
                      if ((result & 1) != 0)
                        goto LABEL_181;
                    }
                    v28 = v34 | (v33 << 8);
                    if (v28 <= 0xFF)
                      goto LABEL_180;
                    goto LABEL_71;
                  }
                }
                else if ((v30 & 4) != 0)
                {
                  if (*v31 != 73
                    || *(_QWORD *)(v31 + 1) != 0x7265666675424350
                    || *(_QWORD *)(v31 + 4) != 0x4D4F4F7265666675)
                  {
                    goto LABEL_59;
                  }
                }
                else
                {
                  if (*(_WORD *)v31 != 73)
                    goto LABEL_59;
                  v116 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v31 + 2), (int16x8_t)xmmword_1968C1830);
                  v116.i16[0] = vminvq_u16(v116);
                  if (!v116.i32[0])
                    goto LABEL_59;
                  v117 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v31 + 8), (int16x8_t)xmmword_1968C1840);
                  v117.i16[0] = vminvq_u16(v117);
                  if (!v117.i32[0])
                    goto LABEL_59;
                }
                v35 = &off_1E331E2D8;
                goto LABEL_66;
              }
LABEL_171:
              v35 = &off_1E331E2C0;
              goto LABEL_66;
            }
            if ((v30 & 4) != 0)
            {
              if (*v31 != 70)
                goto LABEL_59;
              v72 = (uint16x8_t)vandq_s8(vceqq_s8(*(int8x16_t *)(v31 + 11), (int8x16_t)xmmword_1968C17E0), vceqq_s8(*(int8x16_t *)(v31 + 1), (int8x16_t)xmmword_1968C17D0));
              v72.i8[0] = vminvq_u8((uint8x16_t)v72);
            }
            else
            {
              if (*(_WORD *)v31 != 70)
                goto LABEL_59;
              v77 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v31 + 2), (int16x8_t)xmmword_1968C17F0);
              v77.i16[0] = vminvq_u16(v77);
              if (!v77.i32[0])
                goto LABEL_59;
              v78 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v31 + 6), (int16x8_t)xmmword_1968C1800);
              v78.i16[0] = vminvq_u16(v78);
              if (!v78.i32[0])
                goto LABEL_59;
              v79 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v31 + 22), (int16x8_t)xmmword_1968C1810);
              v79.i16[0] = vminvq_u16(v79);
              if (!v79.i32[0])
                goto LABEL_59;
              v72 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v31 + 38), (int16x8_t)xmmword_1968C1820);
              v72.i16[0] = vminvq_u16(v72);
            }
            if (v72.i32[0])
              goto LABEL_171;
LABEL_59:
            v33 = 0;
            v34 = 0;
            goto LABEL_67;
          }
LABEL_179:
          v34 = 0;
          v33 = 0;
          goto LABEL_69;
        }
      }
      else if (!result)
      {
        goto LABEL_52;
      }
      *(_DWORD *)result += 2;
      goto LABEL_52;
    }
  }
  v28 = 0;
LABEL_71:
  v25 = v28 << 24;
LABEL_72:
  if (v6 != 2)
  {
    WTF::AtomStringImpl::addLiteral();
    v38 = v125;
    v40 = JSC::JSObject::get(v7, this, (unint64_t)v125);
    if (v38)
    {
      if (*(_DWORD *)v38 == 2)
        WTF::StringImpl::destroy(v38, v39);
      else
        *(_DWORD *)v38 -= 2;
    }
    if (*((_DWORD *)v123 + 20))
    {
      result = JSC::VM::hasExceptionsAfterHandlingTraps(v123);
      if ((result & 1) != 0)
        goto LABEL_181;
    }
    if (v40 == 10)
    {
      v41 = 0;
      goto LABEL_88;
    }
    v42 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v40 >= 0xFFFE000000000000)
    {
      v80 = (_DWORD)v40 == 0;
      goto LABEL_305;
    }
    if (v40 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
    {
      v43 = COERCE_DOUBLE(v40 - 0x2000000000000) > 0.0 || COERCE_DOUBLE(v40 - 0x2000000000000) < 0.0;
      goto LABEL_84;
    }
    if ((v40 & 0xFFFE000000000002) != 0)
    {
      v43 = v40 == 7;
      goto LABEL_84;
    }
    v81 = *(unsigned __int8 *)(v40 + 5);
    if (v81 == 3)
    {
      v84 = *(_DWORD *)(v40 + 8);
    }
    else
    {
      if (v81 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v43 = 1;
LABEL_84:
          if (*((_DWORD *)v42 + 20))
          {
            result = JSC::VM::hasExceptionsAfterHandlingTraps(v42);
            if ((result & 1) != 0)
              goto LABEL_181;
          }
          if (v43)
            v41 = 0x10000;
          else
            v41 = 0;
LABEL_88:
          WTF::AtomStringImpl::addLiteral();
          v44 = v125;
          v46 = JSC::JSObject::get(v7, this, (unint64_t)v125);
          if (v44)
          {
            if (*(_DWORD *)v44 == 2)
              WTF::StringImpl::destroy(v44, v45);
            else
              *(_DWORD *)v44 -= 2;
          }
          if (*((_DWORD *)v123 + 20))
          {
            result = JSC::VM::hasExceptionsAfterHandlingTraps(v123);
            if ((result & 1) != 0)
              goto LABEL_181;
          }
          v47 = v41 | v25;
          if (v46 == 10)
          {
LABEL_115:
            WTF::AtomStringImpl::addLiteral();
            v56 = v125;
            v58 = JSC::JSObject::get(v7, this, (unint64_t)v125);
            if (v56)
            {
              if (*(_DWORD *)v56 == 2)
                WTF::StringImpl::destroy(v56, v57);
              else
                *(_DWORD *)v56 -= 2;
            }
            if (*((_DWORD *)v123 + 20))
            {
              result = JSC::VM::hasExceptionsAfterHandlingTraps(v123);
              if ((result & 1) != 0)
                goto LABEL_181;
            }
            if (v58 == 10)
            {
              v37 = 1;
              goto LABEL_126;
            }
            v59 = (JSC::VM *)*((_QWORD *)this + 7);
            if (v58 >= 0xFFFE000000000000)
            {
              v85 = (_DWORD)v58 == 0;
              goto LABEL_312;
            }
            *(_QWORD *)&v60 = v58 - 0x2000000000000;
            if (v58 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
            {
              if (v60 <= 0.0)
              {
                v37 = v60 < 0.0;
                goto LABEL_125;
              }
            }
            else
            {
              if ((v58 & 0xFFFE000000000002) != 0)
              {
                v37 = v58 == 7;
                goto LABEL_125;
              }
              v86 = *(unsigned __int8 *)(v58 + 5);
              if (v86 == 3)
              {
                v89 = *(_DWORD *)(v58 + 8);
LABEL_311:
                v85 = v89 == 0;
                goto LABEL_312;
              }
              if (v86 == 2)
              {
                v87 = *(_QWORD *)(v58 + 8);
                if ((v87 & 1) != 0)
                  v88 = (int *)(v58 + 16);
                else
                  v88 = (int *)(v87 + 4);
                v89 = *v88;
                goto LABEL_311;
              }
              if ((*(_BYTE *)(16 * (*(_DWORD *)v58 & 0xFFFFFFFE) + 0xA) & 1) != 0)
              {
                v85 = *(_QWORD *)(16 * (*(_DWORD *)v58 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_312:
                v37 = !v85;
LABEL_125:
                if (*((_DWORD *)v59 + 20))
                {
                  result = JSC::VM::hasExceptionsAfterHandlingTraps(v59);
                  if ((result & 1) != 0)
                    goto LABEL_181;
                }
LABEL_126:
                WTF::AtomStringImpl::addLiteral();
                v61 = v125;
                v63 = JSC::JSObject::get(v7, this, (unint64_t)v125);
                if (v61)
                {
                  if (*(_DWORD *)v61 == 2)
                    WTF::StringImpl::destroy(v61, v62);
                  else
                    *(_DWORD *)v61 -= 2;
                }
                if (*((_DWORD *)v123 + 20))
                {
                  result = JSC::VM::hasExceptionsAfterHandlingTraps(v123);
                  if ((result & 1) != 0)
                    goto LABEL_181;
                }
                if (v63 == 10)
                {
                  v64 = 0;
                  goto LABEL_137;
                }
                v65 = (JSC::VM *)*((_QWORD *)this + 7);
                if (v63 >= 0xFFFE000000000000)
                {
                  v90 = (_DWORD)v63 == 0;
                  goto LABEL_319;
                }
                *(_QWORD *)&v66 = v63 - 0x2000000000000;
                if (v63 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
                {
                  if (v66 <= 0.0)
                  {
                    v64 = v66 < 0.0;
                    goto LABEL_136;
                  }
                }
                else
                {
                  if ((v63 & 0xFFFE000000000002) != 0)
                  {
                    v64 = v63 == 7;
                    goto LABEL_136;
                  }
                  v91 = *(unsigned __int8 *)(v63 + 5);
                  if (v91 == 3)
                  {
                    v94 = *(_DWORD *)(v63 + 8);
LABEL_318:
                    v90 = v94 == 0;
                    goto LABEL_319;
                  }
                  if (v91 == 2)
                  {
                    v92 = *(_QWORD *)(v63 + 8);
                    if ((v92 & 1) != 0)
                      v93 = (int *)(v63 + 16);
                    else
                      v93 = (int *)(v92 + 4);
                    v94 = *v93;
                    goto LABEL_318;
                  }
                  if ((*(_BYTE *)(16 * (*(_DWORD *)v63 & 0xFFFFFFFE) + 0xA) & 1) != 0)
                  {
                    v90 = *(_QWORD *)(16 * (*(_DWORD *)v63 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_319:
                    v64 = !v90;
LABEL_136:
                    if (*((_DWORD *)v65 + 20))
                    {
                      result = JSC::VM::hasExceptionsAfterHandlingTraps(v65);
                      if ((result & 1) != 0)
                        goto LABEL_181;
                    }
LABEL_137:
                    WTF::AtomStringImpl::addLiteral();
                    v67 = v125;
                    result = JSC::JSObject::get(v7, this, (unint64_t)v125);
                    v69 = result;
                    if (v67)
                    {
                      if (*(_DWORD *)v67 == 2)
                        result = WTF::StringImpl::destroy(v67, v68);
                      else
                        *(_DWORD *)v67 -= 2;
                    }
                    if (*((_DWORD *)v123 + 20))
                    {
                      result = JSC::VM::hasExceptionsAfterHandlingTraps(v123);
                      if ((result & 1) != 0)
                        goto LABEL_181;
                    }
                    v25 = v47 & 0xFFFFFF00 | v64;
                    if (v69 == 10)
                    {
                      v36 = 0;
                      goto LABEL_148;
                    }
                    result = *((_QWORD *)this + 7);
                    if (v69 >= 0xFFFE000000000000)
                    {
                      v100 = (_DWORD)v69 == 0;
                      goto LABEL_333;
                    }
                    *(_QWORD *)&v70 = v69 - 0x2000000000000;
                    if (v69 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
                    {
                      if (v70 <= 0.0)
                      {
                        v36 = v70 < 0.0;
                        goto LABEL_147;
                      }
                    }
                    else
                    {
                      if ((v69 & 0xFFFE000000000002) != 0)
                      {
                        v36 = v69 == 7;
                        goto LABEL_147;
                      }
                      v101 = *(unsigned __int8 *)(v69 + 5);
                      if (v101 == 3)
                      {
                        v104 = *(_DWORD *)(v69 + 8);
LABEL_332:
                        v100 = v104 == 0;
                        goto LABEL_333;
                      }
                      if (v101 == 2)
                      {
                        v102 = *(_QWORD *)(v69 + 8);
                        if ((v102 & 1) != 0)
                          v103 = (int *)(v69 + 16);
                        else
                          v103 = (int *)(v102 + 4);
                        v104 = *v103;
                        goto LABEL_332;
                      }
                      if ((*(_BYTE *)(16 * (*(_DWORD *)v69 & 0xFFFFFFFE) + 0xA) & 1) != 0)
                      {
                        v100 = *(_QWORD *)(16 * (*(_DWORD *)v69 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_333:
                        v36 = !v100;
LABEL_147:
                        if (!*(_DWORD *)(result + 80))
                          goto LABEL_148;
                        result = JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)result);
                        if ((result & 1) == 0)
                          goto LABEL_148;
LABEL_181:
                        v71 = 1;
                        goto LABEL_149;
                      }
                    }
                    v36 = 1;
                    goto LABEL_147;
                  }
                }
                v64 = 1;
                goto LABEL_136;
              }
            }
            v37 = 1;
            goto LABEL_125;
          }
          v48 = (JSC::VM *)*((_QWORD *)this + 7);
          v125 = (WTF::StringImpl *)v46;
          if ((v46 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v46 + 5) != 2)
          {
            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v125, this);
            v49 = v124;
            if (v124)
              goto LABEL_99;
            goto LABEL_176;
          }
          v49 = *(_QWORD *)(v46 + 8);
          if ((v49 & 1) != 0)
          {
            v49 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v46, this);
            if (!v49)
            {
LABEL_98:
              if (v49)
              {
LABEL_99:
                v50 = *(_DWORD *)(v49 + 16);
                v51 = *(const char **)(v49 + 8);
                v52 = *(_DWORD *)(v49 + 4);
                if (v51 == "default" || v52 != 7)
                {
                  if (v51 != "default" || v52 != 7)
                  {
                    if (v51 == "high-performance" || v52 != 16)
                    {
                      if (v51 != "high-performance" || v52 != 16)
                      {
                        if (v51 == "low-power" || v52 != 9)
                        {
                          if (v52 != 9 || v51 != "low-power")
                            goto LABEL_105;
                        }
                        else if ((v50 & 4) != 0)
                        {
                          if (*v51 != 108 || *(_DWORD *)(v51 + 1) != 1882027887 || *(_DWORD *)(v51 + 5) != 1919252335)
                            goto LABEL_105;
                        }
                        else
                        {
                          if (*(_WORD *)v51 != 108)
                            goto LABEL_105;
                          v115 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v51 + 2), (int16x8_t)xmmword_1968BFCA0);
                          v115.i16[0] = vminvq_u16(v115);
                          if (!v115.i32[0])
                            goto LABEL_105;
                        }
                        v55 = &off_1E331E290;
                        goto LABEL_109;
                      }
                    }
                    else if ((v50 & 4) != 0)
                    {
                      if (*v51 != 104
                        || *(_QWORD *)(v51 + 1) != 0x667265702D686769
                        || *((_QWORD *)v51 + 1) != 0x65636E616D726F66)
                      {
                        goto LABEL_105;
                      }
                    }
                    else
                    {
                      if (*(_WORD *)v51 != 104)
                        goto LABEL_105;
                      v75 = (uint16x8_t)vceqq_s16(*(int16x8_t *)(v51 + 2), (int16x8_t)xmmword_1968BFC80);
                      v75.i16[0] = vminvq_u16(v75);
                      if (!v75.i32[0])
                        goto LABEL_105;
                      v76 = (uint16x8_t)vceqq_s16(*((int16x8_t *)v51 + 1), (int16x8_t)xmmword_1968BFC90);
                      v76.i16[0] = vminvq_u16(v76);
                      if (!v76.i32[0])
                        goto LABEL_105;
                    }
                    v55 = &off_1E331E278;
LABEL_109:
                    v54 = *((unsigned __int8 *)v55 + 16);
                    v53 = 1;
                    goto LABEL_110;
                  }
                }
                else
                {
                  if ((v50 & 4) != 0)
                  {
                    if (*v51 != 100 || *(_DWORD *)(v51 + 1) != 1969317477 || *(_DWORD *)(v51 + 3) != 1953264993)
                      goto LABEL_105;
                    goto LABEL_108;
                  }
                  if (*(_WORD *)v51 != 100)
                  {
LABEL_105:
                    v53 = 0;
                    v54 = 0;
                    goto LABEL_110;
                  }
                  v53 = 0;
                  if (*(_QWORD *)(v51 + 2) != 0x75006100660065)
                  {
                    v54 = 0;
                    goto LABEL_110;
                  }
                  v54 = 0;
                  if (*(_QWORD *)(v51 + 6) != 0x74006C00750061)
                  {
LABEL_110:
                    if (*(_DWORD *)v49 == 2)
                      WTF::StringImpl::destroy((WTF::StringImpl *)v49, v45);
                    else
                      *(_DWORD *)v49 -= 2;
LABEL_112:
                    if (*((_DWORD *)v48 + 20))
                    {
                      result = JSC::VM::hasExceptionsAfterHandlingTraps(v48);
                      if ((result & 1) != 0)
                        goto LABEL_181;
                    }
                    if (v53)
                    {
                      v47 |= v54 << 8;
                      goto LABEL_115;
                    }
LABEL_180:
                    result = JSC::throwTypeError();
                    goto LABEL_181;
                  }
                }
LABEL_108:
                v55 = &WebCore::parseEnumerationFromString<WebCore::GraphicsContextGLPowerPreference>(WTF::String const&)::mappings;
                goto LABEL_109;
              }
LABEL_176:
              v54 = 0;
              v53 = 0;
              goto LABEL_112;
            }
          }
          else if (!v49)
          {
            goto LABEL_98;
          }
          *(_DWORD *)v49 += 2;
          goto LABEL_98;
        }
        v80 = *(_QWORD *)(16 * (*(_DWORD *)v40 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
LABEL_305:
        v43 = !v80;
        goto LABEL_84;
      }
      v82 = *(_QWORD *)(v40 + 8);
      if ((v82 & 1) != 0)
        v83 = (int *)(v40 + 16);
      else
        v83 = (int *)(v82 + 4);
      v84 = *v83;
    }
    v80 = v84 == 0;
    goto LABEL_305;
  }
  v36 = 0;
  v37 = 1;
LABEL_148:
  v71 = 0;
  *(_BYTE *)a3 = v122;
  *(_BYTE *)(a3 + 1) = v20;
  *(_BYTE *)(a3 + 2) = v36;
  *(_BYTE *)(a3 + 3) = v121;
  *(_BYTE *)(a3 + 4) = v37;
  *(_DWORD *)(a3 + 5) = v25;
LABEL_149:
  *(_DWORD *)(a3 + 12) = v71;
  return result;
}

JSCell *WebCore::JSDOMConstructor<WebCore::JSWebGLContextEvent>::construct(JSC::JSGlobalObject *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  JSC::VM *v5;
  uint64_t v7;
  int v8;
  WTF::StringImpl *v9;
  _BOOL4 v10;
  _BOOL4 v11;
  _BOOL4 v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  JSC::VM *v16;
  double v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  unint64_t v20;
  JSC::VM *v21;
  double v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  unint64_t v25;
  JSC::VM *v26;
  double v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  WebCore::JSDOMGlobalObject *v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  int v36;
  JSC::VM *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char **v45;
  int v46;
  unint64_t v47;
  WebCore::JSEvent *v48;
  JSC::JSCell *v49;
  unint64_t Structure;
  JSC::Structure *v51;
  JSC::JSCell *v52;
  uint64_t v53;
  JSCell *v54;
  JSC::JSCell *v55;
  JSC::JSGlobalObject *Object;
  JSC::JSObject *v57;
  JSC::JSGlobalObject *v58;
  JSC::VM *v59;
  WebCore::JSDOMGlobalObject *v60;
  JSC::Structure *v61;
  JSC::VM *FunctionRealm;
  uint64_t v63;
  unsigned int v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  char **v69;
  int v70;
  JSC::JSCell *v71;
  unint64_t v72;
  JSC::Structure *v73;
  JSC::JSCell *v74;
  uint64_t v75;
  unint64_t SubclassStructure;
  _DWORD *v77;
  uint64_t v78;
  JSC::VM *v80;
  WTF::StringImpl *v81;
  JSValue v82;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v84;
  BOOL v85;
  int v86;
  uint64_t v87;
  int *v88;
  int v89;
  BOOL v90;
  int v91;
  uint64_t v92;
  int *v93;
  int v94;
  BOOL v95;
  int v96;
  uint64_t v97;
  int *v98;
  int v99;
  _BYTE v100[8];
  uint64_t v101;
  int v102;
  WTF::StringImpl *v103;
  int v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  unint64_t v107;

  v5 = (JSC::VM *)*((_QWORD *)a1 + 7);
  if (*(_DWORD *)(a2 + 32) == 1)
  {
    v82.super.isa = (Class)JSC::createNotEnoughArgumentsError(a1, (JSC::JSGlobalObject *)a2);
    return (JSCell *)JSC::VM::throwException(v5, a1, v82);
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 24);
    WebCore::convert<WebCore::IDLAtomStringAdaptor<WebCore::IDLDOMString>>(a1, *(_QWORD *)(a2 + 48), (uint64_t)&v103);
    v8 = v104;
    if (v104)
    {
      v54 = 0;
    }
    else
    {
      if ((unint64_t)(*(int *)(a2 + 32) - 3) >= 0xFFFFFFFFFFFFFFFELL)
      {
        v10 = 0;
        v11 = 0;
        v12 = 0;
LABEL_47:
        v9 = (WTF::StringImpl *)*MEMORY[0x1E0CBF738];
        if (*MEMORY[0x1E0CBF738])
          *(_DWORD *)v9 += 2;
        while (1)
        {
          v100[0] = v10;
          v100[1] = v11;
          v100[2] = v12;
          v102 = 0;
          if (!v104)
          {
            v29 = v103;
            v103 = 0;
            v101 = 0;
            v30 = bmalloc::api::isoAllocate();
            WTF::MonotonicTime::now((WTF::MonotonicTime *)v30);
            *(_QWORD *)(v30 + 8) = 0;
            if (v10)
              v34 = 1015810;
            else
              v34 = 1015808;
            v35 = (8 * v12) | (4 * v11) | v34 | (v29 != 0) | *(_DWORD *)(v30 + 20) & 0xFFC00000;
            *(_DWORD *)(v30 + 16) = 1;
            *(_DWORD *)(v30 + 20) = v35;
            if (v29)
            {
              *(_DWORD *)v29 += 2;
              v35 = *(_DWORD *)(v30 + 20);
            }
            *(_QWORD *)(v30 + 24) = v29;
            *(_QWORD *)(v30 + 32) = 0;
            *(_QWORD *)(v30 + 40) = 0;
            *(_QWORD *)(v30 + 48) = 0;
            *(_QWORD *)(v30 + 56) = v33;
            *(_QWORD *)(v30 + 64) = 0;
            *(_DWORD *)(v30 + 20) = v35 | 0x4000;
            *(_QWORD *)v30 = off_1E33DE138;
            if (v9)
            {
              v36 = *(_DWORD *)v9;
              *(_DWORD *)v9 += 2;
              *(_QWORD *)(v30 + 72) = v9;
              v107 = v30;
              if (v36)
                *(_DWORD *)v9 = v36;
              else
                WTF::StringImpl::destroy(v9, v31);
            }
            else
            {
              *(_QWORD *)(v30 + 72) = 0;
              v107 = v30;
            }
            if (v29)
            {
              if (*(_DWORD *)v29 == 2)
                WTF::StringImpl::destroy(v29, v31);
              else
                *(_DWORD *)v29 -= 2;
            }
            if (*(void (***)(WebCore::WebGLContextEvent *__hidden))v30 != off_1E33DE138)
            {
              __break(0xC471u);
              JUMPOUT(0x195064A60);
            }
            v37 = *(JSC::VM **)(v7 + 40);
            v38 = v107;
            v39 = *((_QWORD *)v37 + 412);
            if (!v39)
              goto LABEL_68;
            v40 = *(_DWORD *)(v39 - 8);
            v41 = ((unint64_t)&WebCore::JSWebGLContextEvent::s_info
                 + ~((_QWORD)&WebCore::JSWebGLContextEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLContextEvent::s_info
                                                                             + ~((_QWORD)&WebCore::JSWebGLContextEvent::s_info << 32)) >> 22);
            v42 = 9 * ((v41 + ~(v41 << 13)) ^ ((v41 + ~(v41 << 13)) >> 8));
            v43 = (v42 ^ (v42 >> 15)) + ~((v42 ^ (v42 >> 15)) << 27);
            v44 = v40 & ((v43 >> 31) ^ v43);
            v45 = *(char ***)(v39 + 16 * v44);
            if (v45 == &WebCore::JSWebGLContextEvent::s_info)
            {
LABEL_67:
              v47 = *(_QWORD *)(v39 + 16 * v44 + 8);
              if (!v47)
                goto LABEL_68;
            }
            else
            {
              v46 = 1;
              while (v45)
              {
                v44 = ((_DWORD)v44 + v46) & v40;
                v45 = *(char ***)(v39 + 16 * v44);
                ++v46;
                if (v45 == &WebCore::JSWebGLContextEvent::s_info)
                  goto LABEL_67;
              }
LABEL_68:
              v48 = (WebCore::JSEvent *)*((_QWORD *)v37 + 7);
              v49 = (JSC::JSCell *)WebCore::JSEvent::prototype(v48, *(JSC::VM **)(v7 + 40), v32);
              Structure = WebCore::JSWebGLContextEventPrototype::createStructure((uint64_t *)v48, (uint64_t)v37, v49);
              *(_DWORD *)(Structure + 16) |= 0x80000u;
              v52 = (JSC::JSCell *)WebCore::JSWebGLContextEventPrototype::create(v48, v37, Structure, v51);
              v53 = WebCore::JSWebGLContextEvent::createStructure((uint64_t *)v48, (uint64_t)v37, v52);
              v47 = WebCore::cacheDOMStructure((JSCell *)v37, v53, (uint64_t)&WebCore::JSWebGLContextEvent::s_info);
            }
            v54 = (JSCell *)WebCore::JSWebGLContextEvent::create(v47, v37, (uint64_t *)&v107);
            WebCore::cacheWrapper<WebCore::AnimationPlaybackEvent,WebCore::JSAnimationPlaybackEvent>(*((_QWORD *)v37 + 415), v38, (uint64_t)v54);
            v55 = *(JSC::JSCell **)(a2 + 40);
            if (((unint64_t)v55 & 0xFFFE000000000002) != 0
              || (Object = (JSC::JSGlobalObject *)JSC::JSCell::getObject(v55)) == 0
              || (v58 = Object, Object == *(JSC::JSGlobalObject **)(a2 + 24))
              || (v59 = (JSC::VM *)*((_QWORD *)a1 + 7),
                  FunctionRealm = (JSC::VM *)JSC::getFunctionRealm(a1, Object, v57),
                  *((_DWORD *)v59 + 20))
              && (JSC::VM::hasExceptionsAfterHandlingTraps(v59) & 1) != 0)
            {
LABEL_82:
              if (*((_DWORD *)v5 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v5) & 1) != 0)
                v54 = 0;
              v77 = (_DWORD *)v107;
              v107 = 0;
              if (v77)
              {
                if (v77[4] == 1)
                  (*(void (**)(_DWORD *))(*(_QWORD *)v77 + 8))(v77);
                else
                  --v77[4];
              }
              v78 = 0;
              goto LABEL_87;
            }
            v63 = *((_QWORD *)FunctionRealm + 412);
            if (v63)
            {
              v64 = *(_DWORD *)(v63 - 8);
              v65 = ((unint64_t)&WebCore::JSWebGLContextEvent::s_info
                   + ~((_QWORD)&WebCore::JSWebGLContextEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLContextEvent::s_info
                                                                               + ~((_QWORD)&WebCore::JSWebGLContextEvent::s_info << 32)) >> 22);
              v66 = 9 * ((v65 + ~(v65 << 13)) ^ ((v65 + ~(v65 << 13)) >> 8));
              v67 = (v66 ^ (v66 >> 15)) + ~((v66 ^ (v66 >> 15)) << 27);
              v68 = v64 & ((v67 >> 31) ^ v67);
              v69 = *(char ***)(v63 + 16 * v68);
              if (v69 != &WebCore::JSWebGLContextEvent::s_info)
              {
                v70 = 1;
                while (v69)
                {
                  v68 = ((_DWORD)v68 + v70) & v64;
                  v69 = *(char ***)(v63 + 16 * v68);
                  ++v70;
                  if (v69 == &WebCore::JSWebGLContextEvent::s_info)
                    goto LABEL_78;
                }
                goto LABEL_79;
              }
LABEL_78:
              v60 = *(WebCore::JSDOMGlobalObject **)(v63 + 16 * v68 + 8);
              if (!v60)
                goto LABEL_79;
            }
            else
            {
LABEL_79:
              v71 = (JSC::JSCell *)WebCore::JSEvent::prototype(v59, FunctionRealm, v60);
              v72 = WebCore::JSWebGLContextEventPrototype::createStructure((uint64_t *)v59, (uint64_t)FunctionRealm, v71);
              *(_DWORD *)(v72 + 16) |= 0x80000u;
              v74 = (JSC::JSCell *)WebCore::JSWebGLContextEventPrototype::create(v59, FunctionRealm, v72, v73);
              v75 = WebCore::JSWebGLContextEvent::createStructure((uint64_t *)v59, (uint64_t)FunctionRealm, v74);
              v60 = (WebCore::JSDOMGlobalObject *)WebCore::cacheDOMStructure((JSCell *)FunctionRealm, v75, (uint64_t)&WebCore::JSWebGLContextEvent::s_info);
            }
            SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v58, v60, v61);
            if (!*((_DWORD *)v59 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v59) & 1) == 0)
              JSC::JSObject::setStructure(v54, v59, SubclassStructure);
            goto LABEL_82;
          }
          v16 = (JSC::VM *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_141:
          v85 = (_DWORD)v3 == 0;
LABEL_181:
          v10 = !v85;
LABEL_19:
          if (*((_DWORD *)v16 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) != 0)
            goto LABEL_110;
LABEL_20:
          WTF::AtomStringImpl::addLiteral();
          v18 = (WTF::StringImpl *)v107;
          v20 = JSC::JSObject::get((JSC::Structure *)v2, a1, v107);
          if (v18)
          {
            if (*(_DWORD *)v18 == 2)
              WTF::StringImpl::destroy(v18, v19);
            else
              *(_DWORD *)v18 -= 2;
          }
          if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
            goto LABEL_110;
          if (v20 == 10)
          {
            v11 = 0;
            goto LABEL_31;
          }
          v21 = (JSC::VM *)*((_QWORD *)a1 + 7);
          if (v20 >= 0xFFFE000000000000)
            break;
          *(_QWORD *)&v22 = v20 - 0x2000000000000;
          if (v20 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
          {
            if ((v20 & 0xFFFE000000000002) != 0)
            {
              v11 = v20 == 7;
              goto LABEL_30;
            }
            v91 = *(unsigned __int8 *)(v20 + 5);
            if (v91 == 3)
            {
              v94 = *(_DWORD *)(v20 + 8);
              goto LABEL_173;
            }
            if (v91 == 2)
            {
              v92 = *(_QWORD *)(v20 + 8);
              if ((v92 & 1) != 0)
                v93 = (int *)(v20 + 16);
              else
                v93 = (int *)(v92 + 4);
              v94 = *v93;
LABEL_173:
              v90 = v94 == 0;
            }
            else
            {
              if ((*(_BYTE *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0xA) & 1) == 0)
              {
LABEL_175:
                v11 = 1;
                goto LABEL_30;
              }
              v90 = *(_QWORD *)(16 * (*(_DWORD *)v20 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
            }
LABEL_185:
            v11 = !v90;
            goto LABEL_30;
          }
          if (v22 > 0.0)
            goto LABEL_175;
          v11 = v22 < 0.0;
LABEL_30:
          if (*((_DWORD *)v21 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
            goto LABEL_110;
LABEL_31:
          WTF::AtomStringImpl::addLiteral();
          v23 = (WTF::StringImpl *)v107;
          v25 = JSC::JSObject::get((JSC::Structure *)v2, a1, v107);
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v24);
            else
              *(_DWORD *)v23 -= 2;
          }
          if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
            goto LABEL_110;
          if (v25 == 10)
          {
            v12 = 0;
            goto LABEL_42;
          }
          v26 = (JSC::VM *)*((_QWORD *)a1 + 7);
          if (v25 >= 0xFFFE000000000000)
          {
            v95 = (_DWORD)v25 == 0;
            goto LABEL_189;
          }
          *(_QWORD *)&v27 = v25 - 0x2000000000000;
          if (v25 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
          {
            if ((v25 & 0xFFFE000000000002) != 0)
            {
              v12 = v25 == 7;
              goto LABEL_41;
            }
            v96 = *(unsigned __int8 *)(v25 + 5);
            if (v96 == 3)
            {
              v99 = *(_DWORD *)(v25 + 8);
            }
            else
            {
              if (v96 != 2)
              {
                if ((*(_BYTE *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0xA) & 1) == 0)
                {
LABEL_179:
                  v12 = 1;
                  goto LABEL_41;
                }
                v95 = *(_QWORD *)(16 * (*(_DWORD *)v25 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
                goto LABEL_189;
              }
              v97 = *(_QWORD *)(v25 + 8);
              if ((v97 & 1) != 0)
                v98 = (int *)(v25 + 16);
              else
                v98 = (int *)(v97 + 4);
              v99 = *v98;
            }
            v95 = v99 == 0;
LABEL_189:
            v12 = !v95;
            goto LABEL_41;
          }
          if (v27 > 0.0)
            goto LABEL_179;
          v12 = v27 < 0.0;
LABEL_41:
          if (*((_DWORD *)v26 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v26) & 1) != 0)
            goto LABEL_110;
LABEL_42:
          WTF::AtomStringImpl::addLiteral();
          v3 = v107;
          v2 = JSC::JSObject::get((JSC::Structure *)v2, a1, v107);
          if (v3)
          {
            if (*(_DWORD *)v3 == 2)
              WTF::StringImpl::destroy((WTF::StringImpl *)v3, v28);
            else
              *(_DWORD *)v3 -= 2;
          }
          if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
            goto LABEL_110;
          if (v2 == 10)
            goto LABEL_47;
          v107 = v2;
          v80 = (JSC::VM *)*((_QWORD *)a1 + 7);
          if ((v2 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v2 + 5) != 2)
          {
            JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v107, a1);
            goto LABEL_97;
          }
          v81 = *(WTF::StringImpl **)(v2 + 8);
          if ((v81 & 1) != 0)
          {
            v81 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v2, a1);
            if (!v81)
              goto LABEL_96;
LABEL_95:
            *(_DWORD *)v81 += 2;
            goto LABEL_96;
          }
          if (v81)
            goto LABEL_95;
LABEL_96:
          v106 = v81;
LABEL_97:
          if (*((_DWORD *)v80 + 20))
          {
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v80);
            v9 = v106;
            if (hasExceptionsAfterHandlingTraps)
            {
              v106 = 0;
              if (v9)
              {
                if (*(_DWORD *)v9 == 2)
                  WTF::StringImpl::destroy(v9, v84);
                else
                  *(_DWORD *)v9 -= 2;
              }
              goto LABEL_110;
            }
          }
          else
          {
            v9 = v106;
          }
        }
        v90 = (_DWORD)v20 == 0;
        goto LABEL_185;
      }
      v3 = *(_QWORD *)(a2 + 56);
      v9 = (WTF::StringImpl *)*((_QWORD *)a1 + 7);
      v105 = v9;
      if ((v3 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
        v10 = 0;
        v11 = 0;
        v12 = 0;
        goto LABEL_47;
      }
      if ((v3 & 0xFFFE000000000002) == 0)
      {
        v13 = JSC::JSCell::getObject((JSC::JSCell *)v3);
        if (v13)
        {
          v2 = v13;
          WTF::AtomStringImpl::addLiteral();
          v14 = (WTF::StringImpl *)v107;
          v3 = JSC::JSObject::get((JSC::Structure *)v2, a1, v107);
          if (v14)
          {
            if (*(_DWORD *)v14 == 2)
              WTF::StringImpl::destroy(v14, v15);
            else
              *(_DWORD *)v14 -= 2;
          }
          if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
            goto LABEL_110;
          if (v3 == 10)
          {
            v10 = 0;
            goto LABEL_20;
          }
          v16 = (JSC::VM *)*((_QWORD *)a1 + 7);
          if (v3 >= 0xFFFE000000000000)
            goto LABEL_141;
          *(_QWORD *)&v17 = v3 - 0x2000000000000;
          if (v3 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
          {
            if (v17 <= 0.0)
            {
              v10 = v17 < 0.0;
              goto LABEL_19;
            }
          }
          else
          {
            if ((v3 & 0xFFFE000000000002) != 0)
            {
              v10 = v3 == 7;
              goto LABEL_19;
            }
            v86 = *(unsigned __int8 *)(v3 + 5);
            if (v86 == 3)
            {
              v89 = *(_DWORD *)(v3 + 8);
LABEL_169:
              v85 = v89 == 0;
              goto LABEL_181;
            }
            if (v86 == 2)
            {
              v87 = *(_QWORD *)(v3 + 8);
              if ((v87 & 1) != 0)
                v88 = (int *)(v3 + 16);
              else
                v88 = (int *)(v87 + 4);
              v89 = *v88;
              goto LABEL_169;
            }
            if ((*(_BYTE *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0xA) & 1) != 0)
            {
              v85 = *(_QWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x28) == (_QWORD)a1;
              goto LABEL_181;
            }
          }
          v10 = 1;
          goto LABEL_19;
        }
      }
      JSC::throwTypeError();
LABEL_110:
      v54 = 0;
      v78 = 1;
      v102 = 1;
LABEL_87:
      ((void (*)(unint64_t *, _BYTE *))off_1E3330338[v78])(&v107, v100);
      v8 = v104;
    }
    if (v8 != -1)
      ((void (*)(_BYTE *, WTF::StringImpl **))off_1E3330348[v8])(v100, &v103);
  }
  return v54;
}

uint64_t WebCore::JSWebGLContextEvent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return WebCore::JSEvent::analyzeHeap(a1, a2);
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return WebCore::JSEvent::analyzeHeap(a1, a2);
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLContextEventPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebGLContextEventPrototype::create(WebCore::JSWebGLContextEventPrototype *this, JSC::VM *a2, unint64_t a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  unint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  JSC::Structure *v13;
  int v14;
  unint64_t v16;
  WTF::StringImpl *v17[6];
  int v18;
  int v19;
  JSC::Structure *v20;
  int v21;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v16 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v16);
    *((_QWORD *)this + 4865) = SlowCase + (int)v16;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)SlowCase = a3 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>(this, (uint64_t)&WebCore::JSWebGLContextEvent::s_info, (uint64_t)&WebCore::JSWebGLContextEventPrototypeTableValues, (JSC::JSObject *)SlowCase);
  v9 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v11 = JSC::JSString::create((uint64_t)this, v17);
  v12 = v17[0];
  v17[0] = 0;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v10);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v21 = *(_DWORD *)SlowCase;
  v20 = v13;
  v14 = JSC::Structure::outOfLineCapacity(v13);
  v18 = 0;
  v19 = v14;
  v17[0] = (WTF::StringImpl *)&v19;
  v17[1] = (WTF::StringImpl *)SlowCase;
  v17[2] = this;
  v17[3] = (WTF::StringImpl *)&v21;
  v17[4] = (WTF::StringImpl *)&v20;
  v17[5] = (WTF::StringImpl *)&v18;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v13, this, v9, 6, (uint64_t)v17);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v18, v11);
  *((_DWORD *)v13 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWebGLContextEvent>,(WebCore::DOMConstructorID)655>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  unint64_t v15;
  WebCore::JSDOMGlobalObject *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  JSC::JSCell *v27;
  unint64_t Structure;
  JSC::Structure *v29;
  JSC::JSCell *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  WTF::StringImpl *v36;
  unint64_t v37;
  int v38;
  int v39;
  uint64_t v40;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5240);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSEvent>,(WebCore::DOMConstructorID)448>(a1, a2);
  v7 = v6;
  LODWORD(v36) = 67099;
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v34 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v34);
    v5[2] = SlowCase + (int)v34;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v7, &v36, &WebCore::JSDOMConstructor<WebCore::JSWebGLContextEvent>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v10 = (_QWORD *)v5[165];
  v2 = v10[2846];
  if (v2 < v10[2847])
    goto LABEL_10;
  v2 = v10[2848];
  if ((v2 & 1) == 0)
  {
    v35 = *(_QWORD *)(v2 + 8) ^ v10[2849];
    v10[2847] = v2 + HIDWORD(v35);
    v10[2848] = v2 + (int)v35;
LABEL_10:
    v10[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v11 = *(_QWORD *)(v5[227] + 1768);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v11, 0xFFFE000000000001, 6, (uint64_t)&v36);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create(a1, &v36);
  v14 = v36;
  v36 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v13;
  if (v13 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v15 = *(_QWORD *)(v5[227] + 1968);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v13, 6, (uint64_t)&v36);
  v17 = *(_QWORD *)(v5[227] + 2160);
  v18 = *(_QWORD *)(a2 + 3296);
  if (v18)
  {
    v19 = *(_DWORD *)(v18 - 8);
    v20 = ((unint64_t)&WebCore::JSWebGLContextEvent::s_info
         + ~((_QWORD)&WebCore::JSWebGLContextEvent::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLContextEvent::s_info
                                                                     + ~((_QWORD)&WebCore::JSWebGLContextEvent::s_info << 32)) >> 22);
    v21 = 9 * ((v20 + ~(v20 << 13)) ^ ((v20 + ~(v20 << 13)) >> 8));
    v22 = (v21 ^ (v21 >> 15)) + ~((v21 ^ (v21 >> 15)) << 27);
    v23 = v19 & ((v22 >> 31) ^ v22);
    v24 = *(char ***)(v18 + 16 * v23);
    if (v24 == &WebCore::JSWebGLContextEvent::s_info)
    {
LABEL_20:
      v26 = *(_QWORD *)(v18 + 16 * v23 + 8);
      if (v26)
        goto LABEL_22;
    }
    else
    {
      v25 = 1;
      while (v24)
      {
        v23 = ((_DWORD)v23 + v25) & v19;
        v24 = *(char ***)(v18 + 16 * v23);
        ++v25;
        if (v24 == &WebCore::JSWebGLContextEvent::s_info)
          goto LABEL_20;
      }
    }
  }
  v27 = (JSC::JSCell *)WebCore::JSEvent::prototype((WebCore::JSEvent *)a1, (JSC::VM *)a2, v16);
  Structure = WebCore::JSWebGLContextEventPrototype::createStructure((uint64_t *)a1, a2, v27);
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v30 = (JSC::JSCell *)WebCore::JSWebGLContextEventPrototype::create((WebCore::JSWebGLContextEventPrototype *)a1, (JSC::VM *)a2, Structure, v29);
  v31 = WebCore::JSWebGLContextEvent::createStructure((uint64_t *)a1, a2, v30);
  v26 = WebCore::cacheDOMStructure((JSCell *)a2, v31, (uint64_t)&WebCore::JSWebGLContextEvent::s_info);
LABEL_22:
  v32 = *(_QWORD *)(v26 + 48);
  v36 = 0;
  v37 = v2;
  v38 = -1;
  v39 = 0x1000000;
  v40 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v17, v32, 14, (uint64_t)&v36);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5240) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebGLContextEventConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebGLContextEventPrototype::s_info != (char **)(16
                                                                 * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                   + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructor<WebCore::JSWebGLContextEvent>,(WebCore::DOMConstructorID)655>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::jsWebGLContextEvent_statusMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 72);
  if (!v3)
    return *(_QWORD *)(v2 + 41968);
  v4 = *(_DWORD *)(v3 + 4);
  if (!v4)
    return *(_QWORD *)(v2 + 41968);
  if (v4 == 1)
  {
    v7 = *(unsigned __int8 **)(v3 + 8);
    if ((*(_BYTE *)(v3 + 16) & 4) != 0)
    {
      v8 = *v7;
    }
    else
    {
      v9 = *(unsigned __int16 *)v7;
      if (v9 > 0xFF)
        goto LABEL_4;
      v8 = v9;
    }
    return *(_QWORD *)(v2 + 8 * v8 + 42216);
  }
LABEL_4:
  v5 = *(_QWORD *)(v2 + 64760);
  if (!v5 || v3 != *(_QWORD *)(v5 + 8))
    return JSC::jsStringWithCacheSlowCase();
  return v5;
}

uint64_t WebCore::JSWebGLContextEvent::subspaceForImpl(WebCore::JSWebGLContextEvent *this, JSC::VM *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  WTF *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF *v16;
  void *v17;
  int v18;
  uint64_t v20;
  WTF *v21;

  v2 = *((_QWORD *)this + 5182);
  v3 = *(_QWORD *)(v2 + 23536);
  v4 = *(_QWORD *)(v3 + 5320);
  if (v4)
    return v4;
  v6 = *(_QWORD *)(v2 + 22648);
  if (__ldaxr((unsigned __int8 *)v6))
  {
    __clrex();
LABEL_5:
    MEMORY[0x19AEA534C](v6, a2);
    goto LABEL_6;
  }
  if (__stxr(1u, (unsigned __int8 *)v6))
    goto LABEL_5;
LABEL_6:
  v8 = *(_QWORD *)(v6 + 2824);
  if (!*(_QWORD *)(v8 + 5320))
  {
    v9 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v21, "IsoSpace T");
    v20 = 0;
    MEMORY[0x19AEA3204](v9, &v21, (char *)this + 192, (char *)this + 1872, 32, 8, &v20);
    v11 = v20;
    v20 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v21;
    v21 = 0;
    if (v12)
    {
      if (*(_DWORD *)v12 == 1)
        WTF::fastFree(v12, v10);
      else
        --*(_DWORD *)v12;
    }
    v13 = *(_QWORD *)(v8 + 5320);
    *(_QWORD *)(v8 + 5320) = v9;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
  v4 = WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v15 = *(_QWORD *)(v3 + 5320);
  *(_QWORD *)(v3 + 5320) = v4;
  if (v15)
  {
    v16 = (WTF *)MEMORY[0x19AEA3528](v15, v14);
    WTF::fastFree(v16, v17);
  }
  v18 = __ldxr((unsigned __int8 *)v6);
  if (v18 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v6))
      return v4;
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v6);
  return v4;
}

_DWORD *WebCore::JSWebGLDebugRendererInfo::destroy(WebCore::JSWebGLDebugRendererInfo *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLDebugRendererInfo::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLDebugRendererInfoOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsWebGLDebugRendererInfo";
    a5[1] = 40;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x1950659C8);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLDebugRendererInfoOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLDebugRendererInfo>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLDebugRendererInfo *__hidden))a3 != off_1E33DE200)
  {
    __break(0xC471u);
    JUMPOUT(0x1950661B0);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLDebugRendererInfo::s_info
         + ~((_QWORD)&WebCore::JSWebGLDebugRendererInfo::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLDebugRendererInfo::s_info
                                                                          + ~((_QWORD)&WebCore::JSWebGLDebugRendererInfo::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLDebugRendererInfo::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLDebugRendererInfo::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSWebGLDebugRendererInfoPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>((JSC::VM *)v24, (uint64_t)&WebCore::JSWebGLDebugRendererInfo::s_info, (uint64_t)&WebCore::JSWebGLDebugRendererInfoPrototypeTableValues, (JSC::JSObject *)v30);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSWebGLDebugRendererInfo::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSWebGLDebugRendererInfo::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 5328);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 5328))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 5328);
    *(_QWORD *)(v46 + 5328) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 5328);
  *(_QWORD *)(v42 + 5328) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE337050 & 1) == 0)
  {
    qword_1EE337048 = (uint64_t)&off_1E3320870;
    byte_1EE337050 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE337048;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSWebGLDebugShaders::destroy(WebCore::JSWebGLDebugShaders *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLDebugShaders::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLDebugShadersOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsWebGLDebugShaders";
    a5[1] = 35;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x195066574);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLDebugShadersOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLDebugShaders>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  JSC::Structure *v38;
  int v39;
  JSC::JSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  void *v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  JSC::Structure *Allocator;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  WTF::StringImpl *v68[6];
  int v69;
  int v70;
  int v71;
  JSC::Structure *v72;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLDebugShaders *__hidden))a3 != off_1E33DE220)
  {
    __break(0xC471u);
    JUMPOUT(0x195066DC0);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLDebugShaders::s_info
         + ~((_QWORD)&WebCore::JSWebGLDebugShaders::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLDebugShaders::s_info
                                                                     + ~((_QWORD)&WebCore::JSWebGLDebugShaders::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLDebugShaders::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_43;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLDebugShaders::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v68[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v64 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v64;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v68, &WebCore::JSWebGLDebugShadersPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v65 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v65);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v65;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v67 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)v30, (JSC::VM *)v24);
  WTF::AtomStringImpl::addLiteral();
  v32 = v68[0];
  JSC::reifyStaticProperty((JSC::VM *)v24, (uint64_t)&WebCore::JSWebGLDebugShaders::s_info, (unint64_t *)v68, (uint64_t)&WebCore::JSWebGLDebugShadersPrototypeTableValues, (unsigned __int8 *)v30);
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v33);
    else
      *(_DWORD *)v32 -= 2;
  }
  v34 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v36 = JSC::JSString::create(v24, v68);
  v37 = v68[0];
  v68[0] = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v35);
    else
      *(_DWORD *)v37 -= 2;
  }
  v38 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v71 = *(_DWORD *)v30;
  v72 = v38;
  v39 = JSC::Structure::outOfLineCapacity(v38);
  v69 = 0;
  v70 = v39;
  v68[0] = (WTF::StringImpl *)&v70;
  v68[1] = (WTF::StringImpl *)v30;
  v68[2] = (WTF::StringImpl *)v24;
  v68[3] = (WTF::StringImpl *)&v71;
  v68[4] = (WTF::StringImpl *)&v72;
  v68[5] = (WTF::StringImpl *)&v69;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v38, (JSC::VM *)v24, v34, 6, (uint64_t)v68);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v69, v36);
  *((_DWORD *)v38 + 4) |= 0x10u;
  LODWORD(v68[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v40 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v40)
      JSC::JSObject::didBecomePrototype(v40, (JSC::VM *)v24);
  }
  v41 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v41 = *(_QWORD *)(v24 + 40152);
    if ((v41 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v41 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_40;
    }
    v66 = *(_QWORD *)(v41 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v41 + HIDWORD(v66);
    *(_QWORD *)(v24 + 40152) = v41 + (int)v66;
  }
  *v25 = v41 + 128;
LABEL_40:
  *(_DWORD *)v41 = 0;
  MEMORY[0x19AEA4278](v41, v24, a2, v30, v68, &WebCore::JSWebGLDebugShaders::s_info, 0, 0, v67);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v41, (uint64_t)&WebCore::JSWebGLDebugShaders::s_info);
LABEL_43:
  v42 = *(_QWORD *)(a2 + 56);
  v43 = *(_QWORD *)(v42 + 41456);
  v44 = *(_QWORD *)(v43 + 23536);
  v45 = *(_QWORD **)(v44 + 5336);
  if (v45)
    goto LABEL_63;
  v46 = *(_QWORD *)(v43 + 22648);
  if (__ldaxr((unsigned __int8 *)v46))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v46))
  {
    goto LABEL_48;
  }
  MEMORY[0x19AEA534C](v46);
LABEL_48:
  v48 = *(_QWORD *)(v46 + 2824);
  if (!*(_QWORD *)(v48 + 5336))
  {
    v49 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v68, "IsoSpace T");
    v72 = 0;
    MEMORY[0x19AEA3204](v49, v68, v42 + 192, v42 + 1872, 32, 8, &v72);
    v51 = (uint64_t)v72;
    v72 = 0;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
    v52 = v68[0];
    v68[0] = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 1)
        WTF::fastFree(v52, v50);
      else
        --*(_DWORD *)v52;
    }
    v53 = *(_QWORD *)(v48 + 5336);
    *(_QWORD *)(v48 + 5336) = v49;
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  }
  v45 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v54 = *(_QWORD *)(v44 + 5336);
  *(_QWORD *)(v44 + 5336) = v45;
  if (v54)
  {
    v55 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v55, v56);
  }
  v57 = __ldxr((unsigned __int8 *)v46);
  if (v57 != 1)
  {
    __clrex();
    goto LABEL_62;
  }
  if (__stlxr(0, (unsigned __int8 *)v46))
LABEL_62:
    WTF::Lock::unlockSlow((WTF::Lock *)v46);
LABEL_63:
  v14 = v45[3];
  if (v14 >= v45[4])
  {
    v14 = v45[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_65;
    }
    v63 = *(_QWORD *)(v14 + 8) ^ v45[6];
    v45[4] = v14 + HIDWORD(v63);
    v45[5] = v14 + (int)v63;
  }
  v45[3] = v14 + 32;
LABEL_65:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v42 + 755))
    __dmb(0xAu);
  v58 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE337060 & 1) == 0)
  {
    qword_1EE337058 = (uint64_t)&off_1E33208A0;
    byte_1EE337060 = 1;
  }
  v68[0] = a3;
  if ((v14 & 8) != 0)
    v59 = (v14 - 112) | 1;
  else
    v59 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v59 & 1) != 0)
    v60 = v59 + 47;
  else
    v60 = *(_QWORD *)v59 + 32;
  Allocator = *(JSC::Structure **)(v60 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v60 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE337058;
  *((_QWORD *)Allocator + 2) = v58;
  v72 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v58 + 32), (uint64_t *)v68, (uint64_t *)&v72);
  if (v72)
    *((_QWORD *)v72 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSWebGLDepthTexture::destroy(WebCore::JSWebGLDepthTexture *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLDepthTexture::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLDepthTextureOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsWebGLDepthTexture";
    a5[1] = 35;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x195067184);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLDepthTextureOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLDepthTexture>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  unint64_t v34;
  WTF::StringImpl *v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  JSC::Structure *v38;
  int v39;
  JSC::JSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  WTF *v55;
  void *v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  JSC::Structure *Allocator;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  WTF::StringImpl *v68[6];
  int v69;
  int v70;
  int v71;
  JSC::Structure *v72;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLDepthTexture *__hidden))a3 != off_1E33DE240)
  {
    __break(0xC471u);
    JUMPOUT(0x1950679D0);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLDepthTexture::s_info
         + ~((_QWORD)&WebCore::JSWebGLDepthTexture::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLDepthTexture::s_info
                                                                     + ~((_QWORD)&WebCore::JSWebGLDepthTexture::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLDepthTexture::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_43;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLDepthTexture::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v68[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v64 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v64;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v68, &WebCore::JSWebGLDepthTexturePrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v65 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v65);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v65;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v67 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)v30, (JSC::VM *)v24);
  WTF::AtomStringImpl::addLiteral();
  v32 = v68[0];
  JSC::reifyStaticProperty((JSC::VM *)v24, (uint64_t)&WebCore::JSWebGLDepthTexture::s_info, (unint64_t *)v68, (uint64_t)&WebCore::JSWebGLDepthTexturePrototypeTableValues, (unsigned __int8 *)v30);
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v33);
    else
      *(_DWORD *)v32 -= 2;
  }
  v34 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v36 = JSC::JSString::create(v24, v68);
  v37 = v68[0];
  v68[0] = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 2)
      WTF::StringImpl::destroy(v37, v35);
    else
      *(_DWORD *)v37 -= 2;
  }
  v38 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v71 = *(_DWORD *)v30;
  v72 = v38;
  v39 = JSC::Structure::outOfLineCapacity(v38);
  v69 = 0;
  v70 = v39;
  v68[0] = (WTF::StringImpl *)&v70;
  v68[1] = (WTF::StringImpl *)v30;
  v68[2] = (WTF::StringImpl *)v24;
  v68[3] = (WTF::StringImpl *)&v71;
  v68[4] = (WTF::StringImpl *)&v72;
  v68[5] = (WTF::StringImpl *)&v69;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v38, (JSC::VM *)v24, v34, 6, (uint64_t)v68);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v69, v36);
  *((_DWORD *)v38 + 4) |= 0x10u;
  LODWORD(v68[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v40 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v40)
      JSC::JSObject::didBecomePrototype(v40, (JSC::VM *)v24);
  }
  v41 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v41 = *(_QWORD *)(v24 + 40152);
    if ((v41 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v41 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_40;
    }
    v66 = *(_QWORD *)(v41 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v41 + HIDWORD(v66);
    *(_QWORD *)(v24 + 40152) = v41 + (int)v66;
  }
  *v25 = v41 + 128;
LABEL_40:
  *(_DWORD *)v41 = 0;
  MEMORY[0x19AEA4278](v41, v24, a2, v30, v68, &WebCore::JSWebGLDepthTexture::s_info, 0, 0, v67);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v41, (uint64_t)&WebCore::JSWebGLDepthTexture::s_info);
LABEL_43:
  v42 = *(_QWORD *)(a2 + 56);
  v43 = *(_QWORD *)(v42 + 41456);
  v44 = *(_QWORD *)(v43 + 23536);
  v45 = *(_QWORD **)(v44 + 5344);
  if (v45)
    goto LABEL_63;
  v46 = *(_QWORD *)(v43 + 22648);
  if (__ldaxr((unsigned __int8 *)v46))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v46))
  {
    goto LABEL_48;
  }
  MEMORY[0x19AEA534C](v46);
LABEL_48:
  v48 = *(_QWORD *)(v46 + 2824);
  if (!*(_QWORD *)(v48 + 5344))
  {
    v49 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v68, "IsoSpace T");
    v72 = 0;
    MEMORY[0x19AEA3204](v49, v68, v42 + 192, v42 + 1872, 32, 8, &v72);
    v51 = (uint64_t)v72;
    v72 = 0;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
    v52 = v68[0];
    v68[0] = 0;
    if (v52)
    {
      if (*(_DWORD *)v52 == 1)
        WTF::fastFree(v52, v50);
      else
        --*(_DWORD *)v52;
    }
    v53 = *(_QWORD *)(v48 + 5344);
    *(_QWORD *)(v48 + 5344) = v49;
    if (v53)
      (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
  }
  v45 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v54 = *(_QWORD *)(v44 + 5344);
  *(_QWORD *)(v44 + 5344) = v45;
  if (v54)
  {
    v55 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v55, v56);
  }
  v57 = __ldxr((unsigned __int8 *)v46);
  if (v57 != 1)
  {
    __clrex();
    goto LABEL_62;
  }
  if (__stlxr(0, (unsigned __int8 *)v46))
LABEL_62:
    WTF::Lock::unlockSlow((WTF::Lock *)v46);
LABEL_63:
  v14 = v45[3];
  if (v14 >= v45[4])
  {
    v14 = v45[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_65;
    }
    v63 = *(_QWORD *)(v14 + 8) ^ v45[6];
    v45[4] = v14 + HIDWORD(v63);
    v45[5] = v14 + (int)v63;
  }
  v45[3] = v14 + 32;
LABEL_65:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v42 + 755))
    __dmb(0xAu);
  v58 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE337070 & 1) == 0)
  {
    qword_1EE337068 = (uint64_t)&off_1E33208D0;
    byte_1EE337070 = 1;
  }
  v68[0] = a3;
  if ((v14 & 8) != 0)
    v59 = (v14 - 112) | 1;
  else
    v59 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v59 & 1) != 0)
    v60 = v59 + 47;
  else
    v60 = *(_QWORD *)v59 + 32;
  Allocator = *(JSC::Structure **)(v60 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v60 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE337068;
  *((_QWORD *)Allocator + 2) = v58;
  v72 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v58 + 32), (uint64_t *)v68, (uint64_t *)&v72);
  if (v72)
    *((_QWORD *)v72 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSWebGLDrawBuffers::destroy(WebCore::JSWebGLDrawBuffers *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLDrawBuffers::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLDrawBuffersOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsWebGLDrawBuffers";
    a5[1] = 34;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x195067D94);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLDrawBuffersOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLDrawBuffers>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLDrawBuffers *__hidden))a3 != off_1E33DE260)
  {
    __break(0xC471u);
    JUMPOUT(0x19506857CLL);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLDrawBuffers::s_info + ~((_QWORD)&WebCore::JSWebGLDrawBuffers::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLDrawBuffers::s_info + ~((_QWORD)&WebCore::JSWebGLDrawBuffers::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLDrawBuffers::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLDrawBuffers::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSWebGLDrawBuffersPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<35u>((JSC::VM *)v24, (uint64_t)&WebCore::JSWebGLDrawBuffers::s_info, (uint64_t)&WebCore::JSWebGLDrawBuffersPrototypeTableValues, (JSC::JSObject *)v30);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSWebGLDrawBuffers::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSWebGLDrawBuffers::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 5352);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 5352))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 5352);
    *(_QWORD *)(v46 + 5352) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 5352);
  *(_QWORD *)(v42 + 5352) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE337080 & 1) == 0)
  {
    qword_1EE337078 = (uint64_t)&off_1E3320900;
    byte_1EE337080 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE337078;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSWebGLDrawInstancedBaseVertexBaseInstance::destroy(WebCore::JSWebGLDrawInstancedBaseVertexBaseInstance *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLDrawInstancedBaseVertexBaseInstance::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLDrawInstancedBaseVertexBaseInstanceOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsWebGLDrawInstancedBaseVertexBaseInstance";
    a5[1] = 58;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x195068940);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLDrawInstancedBaseVertexBaseInstanceOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLDrawInstancedBaseVertexBaseInstance>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLDrawInstancedBaseVertexBaseInstance *__hidden))a3 != off_1E33DE280)
  {
    __break(0xC471u);
    JUMPOUT(0x195069128);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLDrawInstancedBaseVertexBaseInstance::s_info
         + ~((_QWORD)&WebCore::JSWebGLDrawInstancedBaseVertexBaseInstance::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLDrawInstancedBaseVertexBaseInstance::s_info
                                                                                            + ~((_QWORD)&WebCore::JSWebGLDrawInstancedBaseVertexBaseInstance::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLDrawInstancedBaseVertexBaseInstance::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLDrawInstancedBaseVertexBaseInstance::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSWebGLDrawInstancedBaseVertexBaseInstancePrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>((JSC::VM *)v24, (uint64_t)&WebCore::JSWebGLDrawInstancedBaseVertexBaseInstance::s_info, (uint64_t)&WebCore::JSWebGLDrawInstancedBaseVertexBaseInstancePrototypeTableValues, (JSC::JSObject *)v30);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSWebGLDrawInstancedBaseVertexBaseInstance::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSWebGLDrawInstancedBaseVertexBaseInstance::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 5360);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 5360))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 5360);
    *(_QWORD *)(v46 + 5360) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 5360);
  *(_QWORD *)(v42 + 5360) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE337090 & 1) == 0)
  {
    qword_1EE337088 = (uint64_t)&off_1E3320930;
    byte_1EE337090 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE337088;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSWebGLFramebuffer::destroy(WebCore::JSWebGLFramebuffer *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLFramebuffer::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLFramebufferPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebGLFramebufferPrototype::create(WebCore::JSWebGLFramebufferPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSWebGLFramebuffer::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSWebGLFramebufferPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLFramebuffer>,(WebCore::DOMConstructorID)661>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5288);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLFramebuffer>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSWebGLFramebuffer::s_info + ~((_QWORD)&WebCore::JSWebGLFramebuffer::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLFramebuffer::s_info + ~((_QWORD)&WebCore::JSWebGLFramebuffer::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSWebGLFramebuffer::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSWebGLFramebuffer::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSWebGLFramebufferPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebGLFramebufferPrototype::create((WebCore::JSWebGLFramebufferPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSWebGLFramebuffer::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebGLFramebuffer::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5288) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebGLFramebufferConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebGLFramebufferPrototype::s_info != (char **)(16
                                                                * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                                  + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLFramebuffer>,(WebCore::DOMConstructorID)661>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSWebGLFramebufferOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  void *v5;
  WTF::ConcurrentPtrHashSet *v6;
  _DWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  uint64_t result;
  uint64_t v16;
  void *v17;

  v5 = *(void **)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from WebGLFramebuffer";
    a5[1] = 32;
  }
  v6 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v7 = (_DWORD *)*((_QWORD *)v6 + 6);
  if ((_DWORD *)((char *)v6 + 56) == v7)
  {
    v16 = a4;
    v17 = v5;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v6, v5);
    a4 = v16;
    v5 = v17;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v5);
      return 1;
    }
  }
  else
  {
    v8 = v7[1];
    v9 = ((unint64_t)v5 + ~((_QWORD)v5 << 32)) ^ (((unint64_t)v5 + ~((_QWORD)v5 << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = v12;
    while (1)
    {
      v14 = *(void **)&v7[2 * v13 + 4];
      if (!v14)
        return 0;
      if (v5 == v14)
        goto LABEL_12;
      v13 = (v13 + 1) & v8;
      if (v13 == v12)
      {
        __break(0xC471u);
        JUMPOUT(0x195069CBCLL);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLFramebufferOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLFramebuffer>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLFramebuffer *__hidden))a3 != off_1E33DE310)
  {
    __break(0xC471u);
    JUMPOUT(0x19506A278);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLFramebuffer::s_info + ~((_QWORD)&WebCore::JSWebGLFramebuffer::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLFramebuffer::s_info + ~((_QWORD)&WebCore::JSWebGLFramebuffer::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLFramebuffer::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_17;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLFramebuffer::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSWebGLFramebufferPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebGLFramebufferPrototype::create((WebCore::JSWebGLFramebufferPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSWebGLFramebuffer::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebGLFramebuffer::s_info);
LABEL_17:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 5368);
  if (v33)
    goto LABEL_37;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_22:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 5368))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 5368);
    *(_QWORD *)(v36 + 5368) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 5368);
  *(_QWORD *)(v32 + 5368) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_37:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE3370A0 & 1) == 0)
  {
    qword_1EE337098 = (uint64_t)&off_1E3320960;
    byte_1EE3370A0 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE337098;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

_DWORD *WebCore::JSWebGLLoseContext::destroy(WebCore::JSWebGLLoseContext *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLLoseContext::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLLoseContextOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsWebGLLoseContext";
    a5[1] = 34;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x19506A528);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLLoseContextOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLLoseContext>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLLoseContext *__hidden))a3 != off_1E33DE338)
  {
    __break(0xC471u);
    JUMPOUT(0x19506AD10);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLLoseContext::s_info + ~((_QWORD)&WebCore::JSWebGLLoseContext::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLLoseContext::s_info + ~((_QWORD)&WebCore::JSWebGLLoseContext::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLLoseContext::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLLoseContext::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSWebGLLoseContextPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>((JSC::VM *)v24, (uint64_t)&WebCore::JSWebGLLoseContext::s_info, (uint64_t)&WebCore::JSWebGLLoseContextPrototypeTableValues, (JSC::JSObject *)v30);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSWebGLLoseContext::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSWebGLLoseContext::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 5376);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 5376))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 5376);
    *(_QWORD *)(v46 + 5376) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 5376);
  *(_QWORD *)(v42 + 5376) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE3370B0 & 1) == 0)
  {
    qword_1EE3370A8 = (uint64_t)&off_1E3320990;
    byte_1EE3370B0 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE3370A8;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSWebGLMultiDraw::destroy(WebCore::JSWebGLMultiDraw *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLMultiDraw::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLMultiDrawOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsWebGLMultiDraw";
    a5[1] = 32;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x19506B0D4);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLMultiDrawOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLMultiDraw>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLMultiDraw *__hidden))a3 != off_1E33DE358)
  {
    __break(0xC471u);
    JUMPOUT(0x19506B8BCLL);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLMultiDraw::s_info + ~((_QWORD)&WebCore::JSWebGLMultiDraw::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLMultiDraw::s_info + ~((_QWORD)&WebCore::JSWebGLMultiDraw::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLMultiDraw::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLMultiDraw::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSWebGLMultiDrawPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>((JSC::VM *)v24, (uint64_t)&WebCore::JSWebGLMultiDraw::s_info, &WebCore::JSWebGLMultiDrawPrototypeTableValues, (JSC::JSObject *)v30);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSWebGLMultiDraw::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSWebGLMultiDraw::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 5384);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 5384))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 5384);
    *(_QWORD *)(v46 + 5384) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 5384);
  *(_QWORD *)(v42 + 5384) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE3370C0 & 1) == 0)
  {
    qword_1EE3370B8 = (uint64_t)&off_1E33209C0;
    byte_1EE3370C0 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE3370B8;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSWebGLMultiDrawInstancedBaseVertexBaseInstance::destroy(WebCore::JSWebGLMultiDrawInstancedBaseVertexBaseInstance *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLMultiDrawInstancedBaseVertexBaseInstance::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLMultiDrawInstancedBaseVertexBaseInstanceOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsWebGLMultiDrawInstancedBaseVertexBaseInstance";
    a5[1] = 63;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x19506BC80);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLMultiDrawInstancedBaseVertexBaseInstanceOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLMultiDrawInstancedBaseVertexBaseInstance *__hidden))a3 != off_1E33DE378)
  {
    __break(0xC471u);
    JUMPOUT(0x19506C468);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLMultiDrawInstancedBaseVertexBaseInstance::s_info
         + ~((_QWORD)&WebCore::JSWebGLMultiDrawInstancedBaseVertexBaseInstance::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLMultiDrawInstancedBaseVertexBaseInstance::s_info
                                                                                                 + ~((_QWORD)&WebCore::JSWebGLMultiDrawInstancedBaseVertexBaseInstance::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLMultiDrawInstancedBaseVertexBaseInstance::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLMultiDrawInstancedBaseVertexBaseInstance::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSWebGLMultiDrawInstancedBaseVertexBaseInstancePrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<2u>((JSC::VM *)v24, (uint64_t)&WebCore::JSWebGLMultiDrawInstancedBaseVertexBaseInstance::s_info, (uint64_t)&WebCore::JSWebGLMultiDrawInstancedBaseVertexBaseInstancePrototypeTableValues, (JSC::JSObject *)v30);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSWebGLMultiDrawInstancedBaseVertexBaseInstance::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSWebGLMultiDrawInstancedBaseVertexBaseInstance::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 5392);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 5392))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 5392);
    *(_QWORD *)(v46 + 5392) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 5392);
  *(_QWORD *)(v42 + 5392) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE3370D0 & 1) == 0)
  {
    qword_1EE3370C8 = (uint64_t)&off_1E33209F0;
    byte_1EE3370D0 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE3370C8;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSWebGLPolygonMode::destroy(WebCore::JSWebGLPolygonMode *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLPolygonMode::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLPolygonModeOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsWebGLPolygonMode";
    a5[1] = 34;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x19506C82CLL);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLPolygonModeOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLPolygonMode>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLPolygonMode *__hidden))a3 != off_1E33DE3C0)
  {
    __break(0xC471u);
    JUMPOUT(0x19506D014);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLPolygonMode::s_info + ~((_QWORD)&WebCore::JSWebGLPolygonMode::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLPolygonMode::s_info + ~((_QWORD)&WebCore::JSWebGLPolygonMode::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLPolygonMode::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLPolygonMode::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSWebGLPolygonModePrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<5u>((JSC::VM *)v24, (uint64_t)&WebCore::JSWebGLPolygonMode::s_info, &WebCore::JSWebGLPolygonModePrototypeTableValues, (JSC::JSObject *)v30);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSWebGLPolygonMode::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSWebGLPolygonMode::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 5400);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 5400))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 5400);
    *(_QWORD *)(v46 + 5400) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 5400);
  *(_QWORD *)(v42 + 5400) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE3370E0 & 1) == 0)
  {
    qword_1EE3370D8 = (uint64_t)&off_1E3320A20;
    byte_1EE3370E0 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE3370D8;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSWebGLProgram::destroy(WebCore::JSWebGLProgram *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLProgram::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLProgramPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebGLProgramPrototype::create(WebCore::JSWebGLProgramPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSWebGLProgram::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSWebGLProgramPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLProgram>,(WebCore::DOMConstructorID)666>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5328);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLProgram>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSWebGLProgram::s_info + ~((_QWORD)&WebCore::JSWebGLProgram::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLProgram::s_info + ~((_QWORD)&WebCore::JSWebGLProgram::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSWebGLProgram::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSWebGLProgram::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSWebGLProgramPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebGLProgramPrototype::create((WebCore::JSWebGLProgramPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSWebGLProgram::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebGLProgram::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5328) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebGLProgramConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebGLProgramPrototype::s_info != (char **)(16
                                                            * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE)
                                                                              + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLProgram>,(WebCore::DOMConstructorID)666>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSWebGLProgramOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  void *v5;
  WTF::ConcurrentPtrHashSet *v6;
  _DWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  uint64_t result;
  uint64_t v16;
  void *v17;

  v5 = *(void **)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from WebGLProgram";
    a5[1] = 28;
  }
  v6 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v7 = (_DWORD *)*((_QWORD *)v6 + 6);
  if ((_DWORD *)((char *)v6 + 56) == v7)
  {
    v16 = a4;
    v17 = v5;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v6, v5);
    a4 = v16;
    v5 = v17;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v5);
      return 1;
    }
  }
  else
  {
    v8 = v7[1];
    v9 = ((unint64_t)v5 + ~((_QWORD)v5 << 32)) ^ (((unint64_t)v5 + ~((_QWORD)v5 << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = v12;
    while (1)
    {
      v14 = *(void **)&v7[2 * v13 + 4];
      if (!v14)
        return 0;
      if (v5 == v14)
        goto LABEL_12;
      v13 = (v13 + 1) & v8;
      if (v13 == v12)
      {
        __break(0xC471u);
        JUMPOUT(0x19506DBA8);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLProgramOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLProgram>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLProgram *__hidden))a3 != off_1E33DE3E0)
  {
    __break(0xC471u);
    JUMPOUT(0x19506E164);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLProgram::s_info + ~((_QWORD)&WebCore::JSWebGLProgram::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLProgram::s_info + ~((_QWORD)&WebCore::JSWebGLProgram::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLProgram::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_17;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLProgram::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSWebGLProgramPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebGLProgramPrototype::create((WebCore::JSWebGLProgramPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSWebGLProgram::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebGLProgram::s_info);
LABEL_17:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 5408);
  if (v33)
    goto LABEL_37;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_22:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 5408))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 5408);
    *(_QWORD *)(v36 + 5408) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 5408);
  *(_QWORD *)(v32 + 5408) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_37:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE3370F0 & 1) == 0)
  {
    qword_1EE3370E8 = (uint64_t)&off_1E3320A50;
    byte_1EE3370F0 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE3370E8;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

_DWORD *WebCore::JSWebGLProvokingVertex::destroy(WebCore::JSWebGLProvokingVertex *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLProvokingVertex::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLProvokingVertexOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsWebGLProvokingVertex";
    a5[1] = 38;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x19506E414);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLProvokingVertexOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLProvokingVertex>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLProvokingVertex *__hidden))a3 != off_1E33DE438)
  {
    __break(0xC471u);
    JUMPOUT(0x19506EBFCLL);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLProvokingVertex::s_info
         + ~((_QWORD)&WebCore::JSWebGLProvokingVertex::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLProvokingVertex::s_info
                                                                        + ~((_QWORD)&WebCore::JSWebGLProvokingVertex::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLProvokingVertex::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLProvokingVertex::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSWebGLProvokingVertexPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  JSC::reifyStaticProperties<4u>((JSC::VM *)v24, (uint64_t)&WebCore::JSWebGLProvokingVertex::s_info, &WebCore::JSWebGLProvokingVertexPrototypeTableValues, (JSC::JSObject *)v30);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSWebGLProvokingVertex::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSWebGLProvokingVertex::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 5416);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 5416))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 5416);
    *(_QWORD *)(v46 + 5416) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 5416);
  *(_QWORD *)(v42 + 5416) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE337100 & 1) == 0)
  {
    qword_1EE3370F8 = (uint64_t)&off_1E3320A80;
    byte_1EE337100 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE3370F8;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

_DWORD *WebCore::JSWebGLQuery::destroy(WebCore::JSWebGLQuery *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLQuery::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLQueryPrototype::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

unint64_t WebCore::JSWebGLQueryPrototype::create(WebCore::JSWebGLQueryPrototype *this, unint64_t a2, WebCore::JSDOMGlobalObject *a3, JSC::Structure *a4)
{
  _QWORD *v6;
  unint64_t SlowCase;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  unint64_t v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  JSC::Structure *v15;
  int v16;
  unint64_t v18;
  WTF::StringImpl *v19[6];
  int v20;
  int v21;
  JSC::Structure *v22;
  int v23;

  v6 = (_QWORD *)((char *)this + 38904);
  SlowCase = *((_QWORD *)this + 4863);
  if (SlowCase < *((_QWORD *)this + 4864))
    goto LABEL_2;
  SlowCase = *((_QWORD *)this + 4865);
  if ((SlowCase & 1) == 0)
  {
    v18 = *(_QWORD *)(SlowCase + 8) ^ *((_QWORD *)this + 4866);
    *((_QWORD *)this + 4864) = SlowCase + HIDWORD(v18);
    *((_QWORD *)this + 4865) = SlowCase + (int)v18;
LABEL_2:
    *v6 = SlowCase + 16;
    goto LABEL_3;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_3:
  *(_DWORD *)SlowCase = 0;
  v8 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)SlowCase = a2 >> 4;
  *(_DWORD *)(SlowCase + 4) = v8;
  *(_QWORD *)(SlowCase + 8) = 0;
  if (*((_BYTE *)this + 755))
    __dmb(0xAu);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x10) & 3) == 0)
    JSC::JSObject::convertToDictionary((JSC::JSObject *)SlowCase, this);
  WTF::AtomStringImpl::addLiteral();
  v9 = v19[0];
  JSC::reifyStaticProperty(this, (uint64_t)&WebCore::JSWebGLQuery::s_info, (unint64_t *)v19, (uint64_t)&WebCore::JSWebGLQueryPrototypeTableValues, (unsigned __int8 *)SlowCase);
  if (v9)
  {
    if (*(_DWORD *)v9 == 2)
      WTF::StringImpl::destroy(v9, v10);
    else
      *(_DWORD *)v9 -= 2;
  }
  v11 = *(_QWORD *)(v6[381] + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v13 = JSC::JSString::create((uint64_t)this, v19);
  v14 = v19[0];
  v19[0] = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v12);
    else
      *(_DWORD *)v14 -= 2;
  }
  v15 = (JSC::Structure *)(16 * (*(_DWORD *)SlowCase & 0xFFFFFFFE));
  v23 = *(_DWORD *)SlowCase;
  v22 = v15;
  v16 = JSC::Structure::outOfLineCapacity(v15);
  v20 = 0;
  v21 = v16;
  v19[0] = (WTF::StringImpl *)&v21;
  v19[1] = (WTF::StringImpl *)SlowCase;
  v19[2] = this;
  v19[3] = (WTF::StringImpl *)&v23;
  v19[4] = (WTF::StringImpl *)&v22;
  v19[5] = (WTF::StringImpl *)&v20;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v15, this, v11, 6, (uint64_t)v19);
  if ((*(_BYTE *)((16 * *(unsigned int *)SlowCase) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(SlowCase, (uint64_t)this, v20, v13);
  *((_DWORD *)v15 + 4) |= 0x10u;
  return SlowCase;
}

unint64_t WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLQuery>,(WebCore::DOMConstructorID)668>(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t *v5;
  JSC::JSCell *v6;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  _QWORD *v9;
  unint64_t v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char **v22;
  int v23;
  uint64_t v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unint64_t v33;
  WTF::StringImpl *v34;
  unint64_t v35;
  int v36;
  int v37;
  uint64_t v38;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5344);
  if (v2)
    return v2;
  v5 = (uint64_t *)(a1 + 40136);
  v6 = *(JSC::JSCell **)(a2 + 664);
  LODWORD(v34) = 67099;
  if (((unint64_t)v6 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v6);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v5;
  if (*v5 < (unint64_t)v5[1])
    goto LABEL_6;
  SlowCase = v5[2];
  if ((SlowCase & 1) == 0)
  {
    v32 = *(_QWORD *)(SlowCase + 8) ^ v5[3];
    v5[1] = SlowCase + HIDWORD(v32);
    v5[2] = SlowCase + (int)v32;
LABEL_6:
    *v5 = SlowCase + 128;
    goto LABEL_7;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_7:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, a1, a2, v6, &v34, &WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLQuery>::s_info, 0, 0);
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v9 = (_QWORD *)v5[165];
  v2 = v9[2846];
  if (v2 < v9[2847])
    goto LABEL_10;
  v2 = v9[2848];
  if ((v2 & 1) == 0)
  {
    v33 = *(_QWORD *)(v2 + 8) ^ v9[2849];
    v9[2847] = v2 + HIDWORD(v33);
    v9[2848] = v2 + (int)v33;
LABEL_10:
    v9[2846] = v2 + 48;
    goto LABEL_11;
  }
  JSC::sanitizeStackForVM();
  v2 = JSC::LocalAllocator::allocateSlowCase();
LABEL_11:
  *(_DWORD *)v2 = 0;
  JSC::InternalFunction::InternalFunction();
  if (*(_BYTE *)(a1 + 755))
    __dmb(0xAu);
  v10 = *(_QWORD *)(v5[227] + 1768);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v10, 0xFFFE000000000000, 6, (uint64_t)&v34);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = JSC::JSString::create(a1, &v34);
  v13 = v34;
  v34 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v11);
    else
      *(_DWORD *)v13 -= 2;
  }
  *(_QWORD *)(v2 + 32) = v12;
  if (v12 && *(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(v2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)v2);
  v14 = *(_QWORD *)(v5[227] + 1968);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v14, v12, 6, (uint64_t)&v34);
  v15 = *(_QWORD *)(v5[227] + 2160);
  v16 = *(_QWORD *)(a2 + 3296);
  if (v16)
  {
    v17 = *(_DWORD *)(v16 - 8);
    v18 = ((unint64_t)&WebCore::JSWebGLQuery::s_info + ~((_QWORD)&WebCore::JSWebGLQuery::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLQuery::s_info + ~((_QWORD)&WebCore::JSWebGLQuery::s_info << 32)) >> 22);
    v19 = 9 * ((v18 + ~(v18 << 13)) ^ ((v18 + ~(v18 << 13)) >> 8));
    v20 = (v19 ^ (v19 >> 15)) + ~((v19 ^ (v19 >> 15)) << 27);
    v21 = v17 & ((v20 >> 31) ^ v20);
    v22 = *(char ***)(v16 + 16 * v21);
    if (v22 == &WebCore::JSWebGLQuery::s_info)
    {
LABEL_20:
      v24 = *(_QWORD *)(v16 + 16 * v21 + 8);
      if (v24)
        goto LABEL_22;
    }
    else
    {
      v23 = 1;
      while (v22)
      {
        v21 = ((_DWORD)v21 + v23) & v17;
        v22 = *(char ***)(v16 + 16 * v21);
        ++v23;
        if (v22 == &WebCore::JSWebGLQuery::s_info)
          goto LABEL_20;
      }
    }
  }
  Structure = WebCore::JSWebGLQueryPrototype::createStructure((uint64_t *)a1, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebGLQueryPrototype::create((WebCore::JSWebGLQueryPrototype *)a1, Structure, v26, v27);
  v29 = WebCore::JSWebGLQuery::createStructure((uint64_t *)a1, a2, v28);
  v24 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebGLQuery::s_info);
LABEL_22:
  v30 = *(_QWORD *)(v24 + 48);
  v34 = 0;
  v35 = v2;
  v36 = -1;
  v37 = 0x1000000;
  v38 = 0;
  JSC::JSObject::putDirectInternal<(JSC::JSObject::PutMode)1>((unsigned __int8 *)v2, (JSC::VM *)a1, v15, v30, 14, (uint64_t)&v34);
  *(_QWORD *)(*(_QWORD *)(a2 + 3312) + 5344) = v2;
  if (*(_DWORD *)(a1 + 760) >= *(unsigned __int8 *)(a2 + 7))
    JSC::Heap::writeBarrierSlowPath((JSC::Heap *)(a1 + 192), (const JSCell *)a2);
  return v2;
}

unint64_t WebCore::jsWebGLQueryConstructor(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0xFFFE000000000002) != 0
    || &WebCore::JSWebGLQueryPrototype::s_info != (char **)(16
                                                          * *(unsigned int *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x4C)))
  {
    return JSC::throwTypeError();
  }
  else
  {
    return WebCore::getDOMConstructor<WebCore::JSDOMConstructorNotConstructable<WebCore::JSWebGLQuery>,(WebCore::DOMConstructorID)668>(*(_QWORD *)(a1 + 56), *(_QWORD *)(16 * (*(_DWORD *)a2 & 0xFFFFFFFE) + 0x28));
  }
}

uint64_t WebCore::JSWebGLQueryOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  void *v5;
  WTF::ConcurrentPtrHashSet *v6;
  _DWORD *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  uint64_t result;
  uint64_t v16;
  void *v17;

  v5 = *(void **)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from WebGLQuery";
    a5[1] = 26;
  }
  v6 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v7 = (_DWORD *)*((_QWORD *)v6 + 6);
  if ((_DWORD *)((char *)v6 + 56) == v7)
  {
    v16 = a4;
    v17 = v5;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v6, v5);
    a4 = v16;
    v5 = v17;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a4 + 152))(a4, v5);
      return 1;
    }
  }
  else
  {
    v8 = v7[1];
    v9 = ((unint64_t)v5 + ~((_QWORD)v5 << 32)) ^ (((unint64_t)v5 + ~((_QWORD)v5 << 32)) >> 22);
    v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
    v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
    v12 = v8 & ((v11 >> 31) ^ v11);
    v13 = v12;
    while (1)
    {
      v14 = *(void **)&v7[2 * v13 + 4];
      if (!v14)
        return 0;
      if (v5 == v14)
        goto LABEL_12;
      v13 = (v13 + 1) & v8;
      if (v13 == v12)
      {
        __break(0xC471u);
        JUMPOUT(0x19506F790);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLQueryOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLQuery>(uint64_t a1, uint64_t a2, WTF *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF *v11;
  int v12;
  uint64_t v13;
  unint64_t SlowCase;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v26;
  JSC::Structure *v27;
  JSC::JSCell *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  WTF *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF *v44;
  void *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *Allocator;
  unint64_t v52;
  _QWORD *v53;
  WTF *v54;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          SlowCase = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return SlowCase;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLQuery *__hidden))a3 != off_1E33DE618)
  {
    __break(0xC471u);
    JUMPOUT(0x19506FD4CLL);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLQuery::s_info + ~((_QWORD)&WebCore::JSWebGLQuery::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLQuery::s_info + ~((_QWORD)&WebCore::JSWebGLQuery::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLQuery::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_17;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLQuery::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(uint64_t **)(a2 + 56);
  Structure = WebCore::JSWebGLQueryPrototype::createStructure(v24, a2, *(JSC::JSCell **)(a2 + 656));
  *(_DWORD *)(Structure + 16) |= 0x80000u;
  v28 = (JSC::JSCell *)WebCore::JSWebGLQueryPrototype::create((WebCore::JSWebGLQueryPrototype *)v24, Structure, v26, v27);
  v29 = WebCore::JSWebGLQuery::createStructure(v24, a2, v28);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v29, (uint64_t)&WebCore::JSWebGLQuery::s_info);
LABEL_17:
  v30 = *(_QWORD *)(a2 + 56);
  v31 = *(_QWORD *)(v30 + 41456);
  v32 = *(_QWORD *)(v31 + 23536);
  v33 = *(_QWORD **)(v32 + 5424);
  if (v33)
    goto LABEL_37;
  v34 = *(_QWORD *)(v31 + 22648);
  if (__ldaxr((unsigned __int8 *)v34))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v34))
  {
    goto LABEL_22;
  }
  MEMORY[0x19AEA534C](v34);
LABEL_22:
  v36 = *(_QWORD *)(v34 + 2824);
  if (!*(_QWORD *)(v36 + 5424))
  {
    v37 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)&v54, "IsoSpace T");
    v53 = 0;
    MEMORY[0x19AEA3204](v37, &v54, v30 + 192, v30 + 1872, 32, 8, &v53);
    v39 = (uint64_t)v53;
    v53 = 0;
    if (v39)
      (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 1)
        WTF::fastFree(v40, v38);
      else
        --*(_DWORD *)v40;
    }
    v41 = *(_QWORD *)(v36 + 5424);
    *(_QWORD *)(v36 + 5424) = v37;
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  v33 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v43 = *(_QWORD *)(v32 + 5424);
  *(_QWORD *)(v32 + 5424) = v33;
  if (v43)
  {
    v44 = (WTF *)MEMORY[0x19AEA3528](v43, v42);
    WTF::fastFree(v44, v45);
  }
  v46 = __ldxr((unsigned __int8 *)v34);
  if (v46 != 1)
  {
    __clrex();
    goto LABEL_36;
  }
  if (__stlxr(0, (unsigned __int8 *)v34))
LABEL_36:
    WTF::Lock::unlockSlow((WTF::Lock *)v34);
LABEL_37:
  SlowCase = v33[3];
  if (SlowCase >= v33[4])
  {
    SlowCase = v33[5];
    if ((SlowCase & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      SlowCase = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_39;
    }
    v52 = *(_QWORD *)(SlowCase + 8) ^ v33[6];
    v33[4] = SlowCase + HIDWORD(v52);
    v33[5] = SlowCase + (int)v52;
  }
  v33[3] = SlowCase + 32;
LABEL_39:
  *(_DWORD *)SlowCase = 0;
  WebCore::JSDOMObject::JSDOMObject(SlowCase, v23);
  *(_QWORD *)(SlowCase + 24) = a3;
  if (*(_BYTE *)(v30 + 755))
    __dmb(0xAu);
  v47 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE337110 & 1) == 0)
  {
    qword_1EE337108 = (uint64_t)&off_1E3320AB0;
    byte_1EE337110 = 1;
  }
  v54 = a3;
  if ((SlowCase & 8) != 0)
    v48 = (SlowCase - 112) | 1;
  else
    v48 = SlowCase & 0xFFFFFFFFFFFFC000;
  if ((v48 & 1) != 0)
    v49 = v48 + 47;
  else
    v49 = *(_QWORD *)v48 + 32;
  Allocator = *(_QWORD **)(v49 + 16);
  if (!Allocator)
    Allocator = (_QWORD *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v49 + 16) = *Allocator;
  *Allocator = SlowCase;
  Allocator[1] = &qword_1EE337108;
  Allocator[2] = v47;
  v53 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v47 + 32), (uint64_t *)&v54, (uint64_t *)&v53);
  if (v53)
    v53[1] = 3;
  return SlowCase;
}

_DWORD *WebCore::JSWebGLRenderSharedExponent::destroy(WebCore::JSWebGLRenderSharedExponent *this, JSCell *a2)
{
  _DWORD *result;

  result = (_DWORD *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

uint64_t WebCore::JSWebGLRenderSharedExponent::analyzeHeap(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;

  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, a1, *(_QWORD *)(a1 + 24));
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                          * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                          + 0x28)))
    return JSC::JSObject::analyzeHeap();
  v4 = WebCore::JSDOMGlobalObject::scriptExecutionContext(*(WebCore::JSDOMGlobalObject **)(16
                                                                                         * (*(_DWORD *)a1 & 0xFFFFFFFE)
                                                                                         + 0x28));
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *(_QWORD *)result;
  if (*(_QWORD *)result)
  {
    v7 = *(_DWORD *)(v6 + 4);
    *(_DWORD *)v6 += 2;
    if (v7 < 0 || (result = (v7 + 4), __OFADD__(v7, 4)))
    {
      v11 = 0;
      goto LABEL_19;
    }
    v8 = (*(unsigned __int8 *)(v6 + 16) >> 2) & 1;
  }
  else
  {
    v8 = 1;
    result = 4;
  }
  result = WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::ASCIILiteral,void>,WTF::StringTypeAdapter<WTF::String,void>>(result, v8, (int8x16_t *)"url ", 4u, v6, &v11);
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, WTF::StringImpl **))(*(_QWORD *)a2 + 72))(a2, a1, &v11);
    v10 = v11;
    v11 = 0;
    if (v10)
    {
      if (*(_DWORD *)v10 == 2)
      {
        WTF::StringImpl::destroy(v10, v9);
        if (v6)
        {
LABEL_11:
          if (*(_DWORD *)v6 == 2)
            WTF::StringImpl::destroy((WTF::StringImpl *)v6, v9);
          else
            *(_DWORD *)v6 -= 2;
        }
        return JSC::JSObject::analyzeHeap();
      }
      *(_DWORD *)v10 -= 2;
    }
    if (v6)
      goto LABEL_11;
    return JSC::JSObject::analyzeHeap();
  }
LABEL_19:
  __break(0xC471u);
  return result;
}

uint64_t WebCore::JSWebGLRenderSharedExponentOwner::isReachableFromOpaqueRoots(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  WTF::ConcurrentPtrHashSet *v7;
  _DWORD *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  unint64_t v18;

  v5 = *(_QWORD *)(*(_QWORD *)a2 + 24);
  if (a5)
  {
    *a5 = "Reachable from jsWebGLRenderSharedExponent";
    a5[1] = 43;
  }
  v6 = atomic_load((unint64_t *)(v5 + 16));
  v7 = *(WTF::ConcurrentPtrHashSet **)(a4 + 120);
  v8 = (_DWORD *)*((_QWORD *)v7 + 6);
  if ((_DWORD *)((char *)v7 + 56) == v8)
  {
    v17 = a4;
    v18 = v6;
    result = WTF::ConcurrentPtrHashSet::containsImplSlow(v7, (void *)v6);
    a4 = v17;
    v6 = v18;
    if ((_DWORD)result)
    {
LABEL_12:
      if (*(_BYTE *)(a4 + 131))
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a4 + 152))(a4, v6);
      return 1;
    }
  }
  else
  {
    v9 = v8[1];
    v10 = (v6 + ~(v6 << 32)) ^ ((v6 + ~(v6 << 32)) >> 22);
    v11 = 9 * ((v10 + ~(v10 << 13)) ^ ((v10 + ~(v10 << 13)) >> 8));
    v12 = (v11 ^ (v11 >> 15)) + ~((v11 ^ (v11 >> 15)) << 27);
    v13 = v9 & ((v12 >> 31) ^ v12);
    v14 = v13;
    while (1)
    {
      v15 = *(_QWORD *)&v8[2 * v14 + 4];
      if (!v15)
        return 0;
      if (v15 == v6)
        goto LABEL_12;
      v14 = (v14 + 1) & v9;
      if (v14 == v13)
      {
        __break(0xC471u);
        JUMPOUT(0x19506FFFCLL);
      }
    }
  }
  return result;
}

_QWORD *WebCore::JSWebGLRenderSharedExponentOwner::finalize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  _QWORD *result;

  v3 = *(_DWORD **)(*(_QWORD *)a2 + 24);
  ++v3[2];
  v6 = *(_QWORD *)(a3 + 32);
  v4 = (uint64_t *)(a3 + 32);
  v5 = v6;
  if (v6)
  {
    v7 = *(_DWORD *)(v5 - 8);
    v8 = ((unint64_t)v3 + ~((_QWORD)v3 << 32)) ^ (((unint64_t)v3 + ~((_QWORD)v3 << 32)) >> 22);
    v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
    v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
    v11 = v7 & ((v10 >> 31) ^ v10);
    v12 = *(_DWORD **)(v5 + 16 * v11);
    if (v12 != v3)
    {
      v13 = 1;
      while (v12)
      {
        v11 = ((_DWORD)v11 + v13) & v7;
        v12 = *(_DWORD **)(v5 + 16 * v11);
        ++v13;
        if (v12 == v3)
          goto LABEL_6;
      }
      v11 = *(unsigned int *)(v5 - 4);
    }
LABEL_6:
    if (v11 != *(_DWORD *)(v5 - 4))
    {
      v14 = (_QWORD *)(v5 + 16 * v11);
      *v14 = -1;
      v17 = v14[1];
      v16 = v14 + 1;
      v15 = v17;
      if (v17)
      {
        *(_QWORD *)(v15 + 8) = 3;
        *v16 = 0;
      }
      ++*(_DWORD *)(*v4 - 16);
      v18 = *v4;
      if (*v4)
        v19 = *(_DWORD *)(v18 - 12) - 1;
      else
        v19 = -1;
      *(_DWORD *)(v18 - 12) = v19;
      v20 = *v4;
      if (*v4)
      {
        v21 = 6 * *(_DWORD *)(v20 - 12);
        v22 = *(_DWORD *)(v20 - 4);
        if (v21 < v22 && v22 >= 9)
          result = WTF::HashTable<void *,WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<void *,JSC::Weak<JSC::JSObject>>>,WTF::DefaultHash<void *>,WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<void *>>::rehash(v4, v22 >> 1, 0);
      }
    }
  }
  if (v3[2] == 1)
    return (_QWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  --v3[2];
  return result;
}

unint64_t WebCore::wrap<WebCore::WebGLRenderSharedExponent>(uint64_t a1, uint64_t a2, WTF::StringImpl *a3)
{
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  WTF::StringImpl *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char **v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  JSC::JSCell *v26;
  JSC::JSObject *Object;
  uint64_t *v28;
  unint64_t SlowCase;
  uint64_t v30;
  int v31;
  unint64_t v32;
  WTF::StringImpl *v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  JSC::Structure *v36;
  int v37;
  JSC::JSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  WTF *v50;
  uint64_t v51;
  uint64_t v52;
  WTF *v53;
  void *v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  JSC::Structure *Allocator;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  WTF::StringImpl *v66[6];
  int v67;
  int v68;
  int v69;
  JSC::Structure *v70;

  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 3320) + 32);
  if (v5)
  {
    v6 = *(_DWORD *)(v5 - 8);
    v7 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
    if (v11 == a3)
    {
LABEL_6:
      v13 = *(_QWORD *)(v5 + 16 * v10 + 8);
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 8) & 3) == 0)
        {
          v14 = *(_QWORD *)v13;
          if (*(_QWORD *)v13)
            return v14;
        }
      }
    }
    else
    {
      v12 = 1;
      while (v11)
      {
        v10 = ((_DWORD)v10 + v12) & v6;
        v11 = *(WTF::StringImpl **)(v5 + 16 * v10);
        ++v12;
        if (v11 == a3)
          goto LABEL_6;
      }
    }
  }
  ++*((_DWORD *)a3 + 2);
  if (*(void (***)(WebCore::WebGLRenderSharedExponent *__hidden))a3 != off_1E33DE640)
  {
    __break(0xC471u);
    JUMPOUT(0x1950707C8);
  }
  v15 = *(_QWORD *)(a2 + 3296);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)&WebCore::JSWebGLRenderSharedExponent::s_info
         + ~((_QWORD)&WebCore::JSWebGLRenderSharedExponent::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebGLRenderSharedExponent::s_info
                                                                             + ~((_QWORD)&WebCore::JSWebGLRenderSharedExponent::s_info << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    v21 = *(char ***)(v15 + 16 * v20);
    if (v21 == &WebCore::JSWebGLRenderSharedExponent::s_info)
    {
LABEL_15:
      v23 = *(_QWORD *)(v15 + 16 * v20 + 8);
      if (v23)
        goto LABEL_38;
    }
    else
    {
      v22 = 1;
      while (v21)
      {
        v20 = ((_DWORD)v20 + v22) & v16;
        v21 = *(char ***)(v15 + 16 * v20);
        ++v22;
        if (v21 == &WebCore::JSWebGLRenderSharedExponent::s_info)
          goto LABEL_15;
      }
    }
  }
  v24 = *(_QWORD *)(a2 + 56);
  v25 = (unint64_t *)(v24 + 40136);
  v26 = *(JSC::JSCell **)(a2 + 656);
  LODWORD(v66[0]) = 23;
  if (((unint64_t)v26 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(v26);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)v24);
  }
  v28 = (uint64_t *)(v24 + 38904);
  SlowCase = *v25;
  if (*v25 < *(_QWORD *)(v24 + 40144))
    goto LABEL_20;
  SlowCase = *(_QWORD *)(v24 + 40152);
  if ((SlowCase & 1) == 0)
  {
    v62 = *(_QWORD *)(SlowCase + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = SlowCase + HIDWORD(v62);
    *(_QWORD *)(v24 + 40152) = SlowCase + (int)v62;
LABEL_20:
    *v25 = SlowCase + 128;
    goto LABEL_21;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_21:
  *(_DWORD *)SlowCase = 0;
  MEMORY[0x19AEA4278](SlowCase, v24, a2, v26, v66, &WebCore::JSWebGLRenderSharedExponentPrototype::s_info, 0, 0);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  *(_DWORD *)(SlowCase + 16) |= 0x80000u;
  v30 = *v28;
  if (*(_QWORD *)(v24 + 38904) < *(_QWORD *)(v24 + 38912))
    goto LABEL_24;
  v30 = *(_QWORD *)(v24 + 38920);
  if ((v30 & 1) == 0)
  {
    v63 = *(_QWORD *)(v30 + 8) ^ *(_QWORD *)(v24 + 38928);
    *(_QWORD *)(v24 + 38912) = v30 + HIDWORD(v63);
    *(_QWORD *)(v24 + 38920) = v30 + (int)v63;
LABEL_24:
    *v28 = v30 + 16;
    goto LABEL_25;
  }
  JSC::sanitizeStackForVM();
  v30 = JSC::LocalAllocator::allocateSlowCase();
LABEL_25:
  *(_DWORD *)v30 = 0;
  v31 = *(_DWORD *)(SlowCase + 8);
  *(_DWORD *)v30 = SlowCase >> 4;
  *(_DWORD *)(v30 + 4) = v31;
  v65 = SlowCase;
  *(_QWORD *)(v30 + 8) = 0;
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v32 = *(_QWORD *)(*(_QWORD *)(v24 + 41952) + 2776);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v34 = JSC::JSString::create(v24, v66);
  v35 = v66[0];
  v66[0] = 0;
  if (v35)
  {
    if (*(_DWORD *)v35 == 2)
      WTF::StringImpl::destroy(v35, v33);
    else
      *(_DWORD *)v35 -= 2;
  }
  v36 = (JSC::Structure *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE));
  v69 = *(_DWORD *)v30;
  v70 = v36;
  v37 = JSC::Structure::outOfLineCapacity(v36);
  v67 = 0;
  v68 = v37;
  v66[0] = (WTF::StringImpl *)&v68;
  v66[1] = (WTF::StringImpl *)v30;
  v66[2] = (WTF::StringImpl *)v24;
  v66[3] = (WTF::StringImpl *)&v69;
  v66[4] = (WTF::StringImpl *)&v70;
  v66[5] = (WTF::StringImpl *)&v67;
  JSC::Structure::add<(JSC::Structure::ShouldPin)1,JSC::JSObject::prepareToPutDirectWithoutTransition(JSC::VM &,JSC::PropertyName,unsigned int,JSC::StructureID,JSC::Structure*)::{lambda(JSC::GCSafeConcurrentJSLocker const&,int,int)#1}>(v36, (JSC::VM *)v24, v32, 6, (uint64_t)v66);
  if ((*(_BYTE *)((16 * *(unsigned int *)v30) | 0x12) & 8) != 0)
    JSC::VM::invalidateStructureChainIntegrity();
  JSC::JSObject::putDirectOffset(v30, v24, v67, v34);
  *((_DWORD *)v36 + 4) |= 0x10u;
  LODWORD(v66[0]) = 23;
  if ((v30 & 0xFFFE000000000002) == 0)
  {
    v38 = (JSC::JSObject *)JSC::JSCell::getObject((JSC::JSCell *)v30);
    if (v38)
      JSC::JSObject::didBecomePrototype(v38, (JSC::VM *)v24);
  }
  v39 = *v25;
  if (*v25 >= *(_QWORD *)(v24 + 40144))
  {
    v39 = *(_QWORD *)(v24 + 40152);
    if ((v39 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v39 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_35;
    }
    v64 = *(_QWORD *)(v39 + 8) ^ *(_QWORD *)(v24 + 40160);
    *(_QWORD *)(v24 + 40144) = v39 + HIDWORD(v64);
    *(_QWORD *)(v24 + 40152) = v39 + (int)v64;
  }
  *v25 = v39 + 128;
LABEL_35:
  *(_DWORD *)v39 = 0;
  MEMORY[0x19AEA4278](v39, v24, a2, v30, v66, &WebCore::JSWebGLRenderSharedExponent::s_info, 0, 0, v65);
  if (*(_BYTE *)(v24 + 755))
    __dmb(0xAu);
  v23 = WebCore::cacheDOMStructure((JSCell *)a2, v39, (uint64_t)&WebCore::JSWebGLRenderSharedExponent::s_info);
LABEL_38:
  v40 = *(_QWORD *)(a2 + 56);
  v41 = *(_QWORD *)(v40 + 41456);
  v42 = *(_QWORD *)(v41 + 23536);
  v43 = *(_QWORD **)(v42 + 5432);
  if (v43)
    goto LABEL_58;
  v44 = *(_QWORD *)(v41 + 22648);
  if (__ldaxr((unsigned __int8 *)v44))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v44))
  {
    goto LABEL_43;
  }
  MEMORY[0x19AEA534C](v44);
LABEL_43:
  v46 = *(_QWORD *)(v44 + 2824);
  if (!*(_QWORD *)(v46 + 5432))
  {
    v47 = WTF::fastMalloc((WTF *)0xF8);
    WTF::CString::CString((WTF::CString *)v66, "IsoSpace T");
    v70 = 0;
    MEMORY[0x19AEA3204](v47, v66, v40 + 192, v40 + 1872, 32, 8, &v70);
    v49 = (uint64_t)v70;
    v70 = 0;
    if (v49)
      (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
    v50 = v66[0];
    v66[0] = 0;
    if (v50)
    {
      if (*(_DWORD *)v50 == 1)
        WTF::fastFree(v50, v48);
      else
        --*(_DWORD *)v50;
    }
    v51 = *(_QWORD *)(v46 + 5432);
    *(_QWORD *)(v46 + 5432) = v47;
    if (v51)
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
  }
  v43 = (_QWORD *)WTF::fastMalloc((WTF *)0x58);
  JSC::GCClient::IsoSubspace::IsoSubspace();
  v52 = *(_QWORD *)(v42 + 5432);
  *(_QWORD *)(v42 + 5432) = v43;
  if (v52)
  {
    v53 = (WTF *)MEMORY[0x19AEA3528]();
    WTF::fastFree(v53, v54);
  }
  v55 = __ldxr((unsigned __int8 *)v44);
  if (v55 != 1)
  {
    __clrex();
    goto LABEL_57;
  }
  if (__stlxr(0, (unsigned __int8 *)v44))
LABEL_57:
    WTF::Lock::unlockSlow((WTF::Lock *)v44);
LABEL_58:
  v14 = v43[3];
  if (v14 >= v43[4])
  {
    v14 = v43[5];
    if ((v14 & 1) != 0)
    {
      JSC::sanitizeStackForVM();
      v14 = JSC::LocalAllocator::allocateSlowCase();
      goto LABEL_60;
    }
    v61 = *(_QWORD *)(v14 + 8) ^ v43[6];
    v43[4] = v14 + HIDWORD(v61);
    v43[5] = v14 + (int)v61;
  }
  v43[3] = v14 + 32;
LABEL_60:
  *(_DWORD *)v14 = 0;
  WebCore::JSDOMObject::JSDOMObject(v14, v23);
  *(_QWORD *)(v14 + 24) = a3;
  if (*(_BYTE *)(v40 + 755))
    __dmb(0xAu);
  v56 = *(_QWORD *)(a2 + 3320);
  if ((byte_1EE337120 & 1) == 0)
  {
    qword_1EE337118 = (uint64_t)&off_1E3320AE0;
    byte_1EE337120 = 1;
  }
  v66[0] = a3;
  if ((v14 & 8) != 0)
    v57 = (v14 - 112) | 1;
  else
    v57 = v14 & 0xFFFFFFFFFFFFC000;
  if ((v57 & 1) != 0)
    v58 = v57 + 47;
  else
    v58 = *(_QWORD *)v57 + 32;
  Allocator = *(JSC::Structure **)(v58 + 16);
  if (!Allocator)
    Allocator = (JSC::Structure *)JSC::WeakSet::findAllocator();
  *(_QWORD *)(v58 + 16) = *(_QWORD *)Allocator;
  *(_QWORD *)Allocator = v14;
  *((_QWORD *)Allocator + 1) = &qword_1EE337118;
  *((_QWORD *)Allocator + 2) = v56;
  v70 = Allocator;
  JSC::weakAdd<WTF::HashMap<void *,JSC::Weak<JSC::JSObject>,WTF::DefaultHash<void *>,WTF::HashTraits<void *>,WTF::HashTraits<JSC::Weak<JSC::JSObject>>,WTF::HashTableTraits>,void *,JSC::Weak<JSC::JSObject>>((uint64_t *)(v56 + 32), (uint64_t *)v66, (uint64_t *)&v70);
  if (v70)
    *((_QWORD *)v70 + 1) = 3;
  return v14;
}

void WebCore::JSWGSLLanguageFeaturesOwner::~JSWGSLLanguageFeaturesOwner(WebCore::JSWGSLLanguageFeaturesOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWakeLockOwner::~JSWakeLockOwner(WebCore::JSWakeLockOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWakeLockSentinelOwner::~JSWakeLockSentinelOwner(WebCore::JSWakeLockSentinelOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWebAnimationOwner::~JSWebAnimationOwner(WebCore::JSWebAnimationOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWebCodecsAudioDataOwner::~JSWebCodecsAudioDataOwner(WebCore::JSWebCodecsAudioDataOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

BOOL WebCore::JSWebCodecsAudioDataOutputCallback::hasCallback(WebCore::JSWebCodecsAudioDataOutputCallback *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  return v1 && (v2 = *(_QWORD *)(v1 + 16)) != 0 && (*(_BYTE *)(v2 + 8) & 3) == 0 && *(_QWORD *)v2 != 0;
}

void WebCore::JSWebCodecsAudioDecoderOwner::~JSWebCodecsAudioDecoderOwner(WebCore::JSWebCodecsAudioDecoderOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWebCodecsAudioEncoderOwner::~JSWebCodecsAudioEncoderOwner(WebCore::JSWebCodecsAudioEncoderOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWebCodecsEncodedAudioChunkOwner::~JSWebCodecsEncodedAudioChunkOwner(WebCore::JSWebCodecsEncodedAudioChunkOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

BOOL WebCore::JSWebCodecsEncodedAudioChunkOutputCallback::hasCallback(WebCore::JSWebCodecsEncodedAudioChunkOutputCallback *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  return v1 && (v2 = *(_QWORD *)(v1 + 16)) != 0 && (*(_BYTE *)(v2 + 8) & 3) == 0 && *(_QWORD *)v2 != 0;
}

void WebCore::JSWebCodecsEncodedVideoChunkOwner::~JSWebCodecsEncodedVideoChunkOwner(WebCore::JSWebCodecsEncodedVideoChunkOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

BOOL WebCore::JSWebCodecsEncodedVideoChunkOutputCallback::hasCallback(WebCore::JSWebCodecsEncodedVideoChunkOutputCallback *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  return v1 && (v2 = *(_QWORD *)(v1 + 16)) != 0 && (*(_BYTE *)(v2 + 8) & 3) == 0 && *(_QWORD *)v2 != 0;
}

BOOL WebCore::JSWebCodecsErrorCallback::hasCallback(WebCore::JSWebCodecsErrorCallback *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  return v1 && (v2 = *(_QWORD *)(v1 + 16)) != 0 && (*(_BYTE *)(v2 + 8) & 3) == 0 && *(_QWORD *)v2 != 0;
}

void WebCore::JSWebCodecsVideoDecoderOwner::~JSWebCodecsVideoDecoderOwner(WebCore::JSWebCodecsVideoDecoderOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWebCodecsVideoEncoderOwner::~JSWebCodecsVideoEncoderOwner(WebCore::JSWebCodecsVideoEncoderOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWebCodecsVideoFrameOwner::~JSWebCodecsVideoFrameOwner(WebCore::JSWebCodecsVideoFrameOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

BOOL WebCore::JSWebCodecsVideoFrameOutputCallback::hasCallback(WebCore::JSWebCodecsVideoFrameOutputCallback *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 3);
  return v1 && (v2 = *(_QWORD *)(v1 + 16)) != 0 && (*(_BYTE *)(v2 + 8) & 3) == 0 && *(_QWORD *)v2 != 0;
}

void WebCore::JSWebGL2RenderingContextOwner::~JSWebGL2RenderingContextOwner(WebCore::JSWebGL2RenderingContextOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWebGLActiveInfoOwner::~JSWebGLActiveInfoOwner(WebCore::JSWebGLActiveInfoOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWebGLBlendFuncExtendedOwner::~JSWebGLBlendFuncExtendedOwner(WebCore::JSWebGLBlendFuncExtendedOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWebGLBufferOwner::~JSWebGLBufferOwner(WebCore::JSWebGLBufferOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWebGLClipCullDistanceOwner::~JSWebGLClipCullDistanceOwner(WebCore::JSWebGLClipCullDistanceOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWebGLColorBufferFloatOwner::~JSWebGLColorBufferFloatOwner(WebCore::JSWebGLColorBufferFloatOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWebGLCompressedTextureASTCOwner::~JSWebGLCompressedTextureASTCOwner(WebCore::JSWebGLCompressedTextureASTCOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWebGLCompressedTextureETCOwner::~JSWebGLCompressedTextureETCOwner(WebCore::JSWebGLCompressedTextureETCOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWebGLCompressedTextureETC1Owner::~JSWebGLCompressedTextureETC1Owner(WebCore::JSWebGLCompressedTextureETC1Owner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWebGLCompressedTexturePVRTCOwner::~JSWebGLCompressedTexturePVRTCOwner(WebCore::JSWebGLCompressedTexturePVRTCOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWebGLCompressedTextureS3TCOwner::~JSWebGLCompressedTextureS3TCOwner(WebCore::JSWebGLCompressedTextureS3TCOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWebGLCompressedTextureS3TCsRGBOwner::~JSWebGLCompressedTextureS3TCsRGBOwner(WebCore::JSWebGLCompressedTextureS3TCsRGBOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWebGLDebugRendererInfoOwner::~JSWebGLDebugRendererInfoOwner(WebCore::JSWebGLDebugRendererInfoOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWebGLDebugShadersOwner::~JSWebGLDebugShadersOwner(WebCore::JSWebGLDebugShadersOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWebGLDepthTextureOwner::~JSWebGLDepthTextureOwner(WebCore::JSWebGLDepthTextureOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWebGLDrawBuffersOwner::~JSWebGLDrawBuffersOwner(WebCore::JSWebGLDrawBuffersOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWebGLDrawInstancedBaseVertexBaseInstanceOwner::~JSWebGLDrawInstancedBaseVertexBaseInstanceOwner(WebCore::JSWebGLDrawInstancedBaseVertexBaseInstanceOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWebGLFramebufferOwner::~JSWebGLFramebufferOwner(WebCore::JSWebGLFramebufferOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWebGLLoseContextOwner::~JSWebGLLoseContextOwner(WebCore::JSWebGLLoseContextOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWebGLMultiDrawOwner::~JSWebGLMultiDrawOwner(WebCore::JSWebGLMultiDrawOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWebGLMultiDrawInstancedBaseVertexBaseInstanceOwner::~JSWebGLMultiDrawInstancedBaseVertexBaseInstanceOwner(WebCore::JSWebGLMultiDrawInstancedBaseVertexBaseInstanceOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWebGLPolygonModeOwner::~JSWebGLPolygonModeOwner(WebCore::JSWebGLPolygonModeOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWebGLProgramOwner::~JSWebGLProgramOwner(WebCore::JSWebGLProgramOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWebGLProvokingVertexOwner::~JSWebGLProvokingVertexOwner(WebCore::JSWebGLProvokingVertexOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWebGLQueryOwner::~JSWebGLQueryOwner(WebCore::JSWebGLQueryOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

void WebCore::JSWebGLRenderSharedExponentOwner::~JSWebGLRenderSharedExponentOwner(WebCore::JSWebGLRenderSharedExponentOwner *this)
{
  JSC::WeakHandleOwner::~WeakHandleOwner(this);
  JUMPOUT(0x19AEA7644);
}

_BYTE *WebCore::jsWGSLLanguageFeaturesPrototypeFunction_has(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  JSC::JSGlobalObject *v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  char BackingSet;
  WTF::StringImpl *v16;
  const JSC::Identifier *v17;
  JSC::CallFrame *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  JSValue v26;
  int hasExceptionsAfterHandlingTraps;
  WTF::StringImpl *v28;
  JSC::VM *v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v4;
  v5 = (JSC::JSGlobalObject *)*((_QWORD *)a2 + 5);
  if (((unint64_t)v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "WGSLLanguageFeatures", "has");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWGSLLanguageFeatures::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWGSLLanguageFeatures::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v29, "WGSLLanguageFeatures", "has");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v26.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v26);
  }
  v12 = *((_QWORD *)a2 + 6);
  v33[0] = (WTF::StringImpl *)v12;
  if ((v12 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v12 + 5) == 2)
  {
    v13 = *(WTF::StringImpl **)(v12 + 8);
    if ((v13 & 1) != 0)
    {
      v13 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v12, this);
      if (!v13)
        goto LABEL_18;
    }
    else if (!v13)
    {
LABEL_18:
      v32 = v13;
      goto LABEL_19;
    }
    *(_DWORD *)v13 += 2;
    goto LABEL_18;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v33, this);
LABEL_19:
  if (*((_DWORD *)v4 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v4);
    v14 = v32;
    if (hasExceptionsAfterHandlingTraps)
    {
      v31 = 1;
      v32 = 0;
      if (v14)
      {
        if (*(_DWORD *)v14 == 2)
          WTF::StringImpl::destroy(v14, v28);
        else
          *(_DWORD *)v14 -= 2;
      }
      v21 = 0;
      v23 = 1;
      goto LABEL_29;
    }
  }
  else
  {
    v14 = v32;
  }
  v31 = 0;
  v30 = 0;
  BackingSet = WebCore::getBackingSet((unint64_t)this, v5, a3);
  v18 = v16;
  if (BackingSet)
  {
    v33[0] = this;
    v33[1] = v16;
    WebCore::WGSLLanguageFeatures::initializeSetLike(*((_QWORD *)v5 + 3), v33);
  }
  v19 = (WTF::StringImpl *)MEMORY[0x1E0CBEBB0];
  *MEMORY[0x1E0CBEBB0] += 2;
  v33[0] = v19;
  v21 = WebCore::forwardFunctionCallToBackingSet((unint64_t)this, (JSCell *)a2, v18, (JSC::JSObject *)v33, v17);
  v22 = v33[0];
  v33[0] = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 2)
    {
      WTF::StringImpl::destroy(v22, v20);
      if (!v14)
        goto LABEL_36;
      goto LABEL_27;
    }
    *(_DWORD *)v22 -= 2;
  }
  if (!v14)
  {
LABEL_36:
    v23 = 0;
    goto LABEL_29;
  }
LABEL_27:
  if (*(_DWORD *)v14 == 2)
  {
    WTF::StringImpl::destroy(v14, v20);
    goto LABEL_36;
  }
  v23 = 0;
  *(_DWORD *)v14 -= 2;
LABEL_29:
  ((void (*)(WTF::StringImpl **, uint64_t *))off_1E3321590[v23])(v33, &v30);
  return (_BYTE *)v21;
}

_BYTE *WebCore::jsWGSLLanguageFeaturesPrototypeFunction_entries(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  char BackingSet;
  WTF::StringImpl *v12;
  const JSC::Identifier *v13;
  JSC::CallFrame *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v20;
  WTF::StringImpl *v21[2];

  v20 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "WGSLLanguageFeatures", "entries");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWGSLLanguageFeatures::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWGSLLanguageFeatures::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "WGSLLanguageFeatures", "entries");
  BackingSet = WebCore::getBackingSet((unint64_t)this, *((JSC::JSGlobalObject **)a2 + 5), a3);
  v14 = v12;
  if (BackingSet)
  {
    v21[0] = this;
    v21[1] = v12;
    WebCore::WGSLLanguageFeatures::initializeSetLike(*(_QWORD *)(v4 + 24), v21);
  }
  v15 = (WTF::StringImpl *)MEMORY[0x1E0CBEBF8];
  *MEMORY[0x1E0CBEBF8] += 2;
  v21[0] = v15;
  v17 = WebCore::forwardFunctionCallToBackingSet((unint64_t)this, (JSCell *)a2, v14, (JSC::JSObject *)v21, v13);
  v18 = v21[0];
  v21[0] = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  return (_BYTE *)v17;
}

_BYTE *WebCore::jsWGSLLanguageFeaturesPrototypeFunction_keys(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  char BackingSet;
  WTF::StringImpl *v12;
  const JSC::Identifier *v13;
  JSC::CallFrame *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v20;
  WTF::StringImpl *v21[2];

  v20 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "WGSLLanguageFeatures", "keys");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWGSLLanguageFeatures::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWGSLLanguageFeatures::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "WGSLLanguageFeatures", "keys");
  BackingSet = WebCore::getBackingSet((unint64_t)this, *((JSC::JSGlobalObject **)a2 + 5), a3);
  v14 = v12;
  if (BackingSet)
  {
    v21[0] = this;
    v21[1] = v12;
    WebCore::WGSLLanguageFeatures::initializeSetLike(*(_QWORD *)(v4 + 24), v21);
  }
  v15 = (WTF::StringImpl *)MEMORY[0x1E0CBEBC0];
  *MEMORY[0x1E0CBEBC0] += 2;
  v21[0] = v15;
  v17 = WebCore::forwardFunctionCallToBackingSet((unint64_t)this, (JSCell *)a2, v14, (JSC::JSObject *)v21, v13);
  v18 = v21[0];
  v21[0] = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  return (_BYTE *)v17;
}

_BYTE *WebCore::jsWGSLLanguageFeaturesPrototypeFunction_values(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  char BackingSet;
  WTF::StringImpl *v12;
  const JSC::Identifier *v13;
  JSC::CallFrame *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  uint64_t v20;
  WTF::StringImpl *v21[2];

  v20 = *((_QWORD *)this + 7);
  v4 = *((_QWORD *)a2 + 5);
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "WGSLLanguageFeatures", "values");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWGSLLanguageFeatures::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWGSLLanguageFeatures::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v20, "WGSLLanguageFeatures", "values");
  BackingSet = WebCore::getBackingSet((unint64_t)this, *((JSC::JSGlobalObject **)a2 + 5), a3);
  v14 = v12;
  if (BackingSet)
  {
    v21[0] = this;
    v21[1] = v12;
    WebCore::WGSLLanguageFeatures::initializeSetLike(*(_QWORD *)(v4 + 24), v21);
  }
  v15 = (WTF::StringImpl *)MEMORY[0x1E0CBEBF0];
  *MEMORY[0x1E0CBEBF0] += 2;
  v21[0] = v15;
  v17 = WebCore::forwardFunctionCallToBackingSet((unint64_t)this, (JSCell *)a2, v14, (JSC::JSObject *)v21, v13);
  v18 = v21[0];
  v21[0] = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 2)
      WTF::StringImpl::destroy(v18, v16);
    else
      *(_DWORD *)v18 -= 2;
  }
  return (_BYTE *)v17;
}

_BYTE *WebCore::jsWGSLLanguageFeaturesPrototypeFunction_forEach(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  unint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  WTF::StringImpl *v12;
  JSC::JSObject *v13;
  JSValue v15;
  JSC::VM *v16;
  WTF::StringImpl *v17[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v16 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v16, "WGSLLanguageFeatures", "forEach");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWGSLLanguageFeatures::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWGSLLanguageFeatures::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v16, "WGSLLanguageFeatures", "forEach");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v15.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v15);
  }
  else
  {
    if (WebCore::getBackingSet((unint64_t)this, *((JSC::JSGlobalObject **)a2 + 5), a3))
    {
      v17[0] = this;
      v17[1] = v12;
      WebCore::WGSLLanguageFeatures::initializeSetLike(*(_QWORD *)(v5 + 24), v17);
    }
    return (_BYTE *)WebCore::forwardForEachCallToBackingSet(this, a2, (JSC::CallFrame *)v5, v13);
  }
}

unint64_t WebCore::jsWakeLockPrototypeFunction_request(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  WTF::StringImpl *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  char **v22;
  BOOL v23;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  JSC::VM *v28;
  uint64_t v29;
  const char *v30;
  int v31;
  uint64_t v35;
  objc_class *v37;
  WebCore::DOMGuardedObject *v38;
  WebCore::DOMGuardedObject *v39;
  JSC::VM *v40;
  uint64_t v41;
  WebCore::DOMGuardedObject *v42;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x195071B0CLL);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v39 = v15;
  v19 = *((_QWORD *)a2 + 5);
  if ((v19 & 0xFFFE000000000002) == 0)
  {
    v20 = *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C);
    v21 = *(_DWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) != 0;
    v22 = (char **)(16 * v20);
    if ((_DWORD)v20)
      v23 = v22 == &WebCore::JSWakeLock::s_info;
    else
      v23 = 1;
    if (!v23)
    {
      do
      {
        v22 = (char **)v22[2];
        v21 = v22 != 0;
      }
      while (v22 != &WebCore::JSWakeLock::s_info && v22 != 0);
    }
    if (v21)
    {
      v25 = *(_QWORD *)(v19 + 24);
      if (*((_DWORD *)a2 + 8) == 1)
      {
        LOBYTE(v27) = 0;
        goto LABEL_65;
      }
      v26 = *((_QWORD *)a2 + 6);
      if (v26 == 10)
      {
        LOBYTE(v27) = 0;
LABEL_65:
        WebCore::WakeLock::request(v25, v27, (uint64_t *)&v39);
        goto LABEL_66;
      }
      v28 = (JSC::VM *)*((_QWORD *)this + 7);
      v40 = v28;
      v42 = (WebCore::DOMGuardedObject *)v26;
      if ((v26 & 0xFFFE000000000002) != 0 || *(_BYTE *)(v26 + 5) != 2)
      {
        JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)&v42, this);
        v29 = v41;
        if (v41)
        {
LABEL_35:
          v30 = *(const char **)(v29 + 8);
          v31 = *(_DWORD *)(v29 + 4);
          if (v30 != "screen" && v31 == 6)
          {
            if ((*(_BYTE *)(v29 + 16) & 4) != 0)
            {
              if (*v30 != 115 || *(_DWORD *)(v30 + 1) != 1701147235 || *(_DWORD *)(v30 + 2) != 1852138866)
              {
LABEL_60:
                v27 = 0;
LABEL_61:
                v41 = 0;
                if (*(_DWORD *)v29 == 2)
                  WTF::StringImpl::destroy((WTF::StringImpl *)v29, v16);
                else
                  *(_DWORD *)v29 -= 2;
LABEL_63:
                if (!*((_DWORD *)v28 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v28) & 1) == 0)
                {
                  if (v27 > 0xFF)
                    goto LABEL_65;
                  WebCore::throwArgumentMustBeEnumError((uint64_t)this, (uint64_t)&v40, 0, "type", 5, "WakeLock", 9, v18, "request", 8, "\"screen\"", 9);
                }
LABEL_66:
                v14 = v39;
                v39 = 0;
                if (!v14)
                  goto LABEL_69;
                goto LABEL_67;
              }
            }
            else
            {
              if (*(_WORD *)v30 != 115)
                goto LABEL_60;
              if (*(_QWORD *)(v30 + 4) != 0x6E006500650072 || *(_QWORD *)(v30 + 2) != 0x65006500720063)
                goto LABEL_60;
            }
          }
          else if (v31 != 6 || v30 != "screen")
          {
            goto LABEL_60;
          }
          v27 = 256;
          goto LABEL_61;
        }
LABEL_54:
        v27 = 0;
        goto LABEL_63;
      }
      v29 = *(_QWORD *)(v26 + 8);
      if ((v29 & 1) != 0)
      {
        v29 = *(_QWORD *)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v26, this);
        if (!v29)
        {
LABEL_34:
          v41 = v29;
          if (v29)
            goto LABEL_35;
          goto LABEL_54;
        }
      }
      else if (!v29)
      {
        goto LABEL_34;
      }
      *(_DWORD *)v29 += 2;
      goto LABEL_34;
    }
  }
  WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"WakeLock", "request", v17);
  v39 = 0;
LABEL_67:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_69:
  v35 = *(_QWORD *)(v10 + 16);
  if (v35)
  {
    if (*(_QWORD *)(v10 + 24) != v35)
    {
      v37 = *(objc_class **)(v35 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v42);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v42, v37, 0);
      v38 = v42;
      v42 = 0;
      if (v38)
      {
        if (*((_DWORD *)v38 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v38 + 16))(v38);
        else
          --*((_DWORD *)v38 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

unint64_t WebCore::jsWakeLockSentinelPrototypeFunction_release(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  objc_class *v25;
  WebCore::DOMGuardedObject *v26;
  WebCore::DOMGuardedObject *v27;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x195071DA4);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v27 = v15;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_32;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSWakeLockSentinel::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSWakeLockSentinel::s_info && v20 != 0);
  }
  if (!v19)
LABEL_32:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"WakeLockSentinel", "release", v16);
  else
    WebCore::WakeLockSentinel::release(*(_QWORD *)(v17 + 24) - 32, (uint64_t *)&v27);
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
  v23 = *(_QWORD *)(v10 + 16);
  if (v23)
  {
    if (*(_QWORD *)(v10 + 24) != v23)
    {
      v25 = *(objc_class **)(v23 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v27);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v27, v25, 0);
      v26 = v27;
      v27 = 0;
      if (v26)
      {
        if (*((_DWORD *)v26 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v26 + 16))(v26);
        else
          --*((_DWORD *)v26 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore17WaveShaperOptionsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF *v2;

  if (*(_BYTE *)(a2 + 40))
  {
    v2 = *(WTF **)(a2 + 24);
    if (v2)
    {
      *(_QWORD *)(a2 + 24) = 0;
      *(_DWORD *)(a2 + 32) = 0;
      WTF::fastFree(v2, (void *)a2);
    }
  }
}

uint64_t WebCore::jsWebAnimationPrototypeFunction_cancel(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "Animation", "cancel");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSWebAnimation::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSWebAnimation::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "Animation", "cancel");
  (*(void (**)(_QWORD, _QWORD, JSC::CallFrame *))(**(_QWORD **)(v3 + 24) + 144))(*(_QWORD *)(v3 + 24), 0, a3);
  return 10;
}

uint64_t WebCore::jsWebAnimationPrototypeFunction_finish(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, __n128 a4)
{
  uint64_t v5;
  JSC::VM *v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t result;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  JSValue v15;
  WTF::StringImpl *v16;
  JSC::VM *v17;
  char v18;
  WTF::StringImpl *v19;
  int v20;
  WTF::StringImpl *v21;
  char v22;

  v5 = *((_QWORD *)a2 + 5);
  v6 = (JSC::VM *)*((_QWORD *)this + 7);
  v17 = v6;
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v17, "Animation", "finish");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebAnimation::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebAnimation::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v17, "Animation", "finish");
  WebCore::WebAnimation::finish(*(_QWORD **)(v5 + 24), (uint64_t)&v20, a4);
  if (!v22)
    return 10;
  v13 = (WTF::StringImpl *)v20;
  v18 = v20;
  v14 = v21;
  v21 = 0;
  v19 = v14;
  if (!*((_QWORD *)v6 + 2))
  {
    v15.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v20, (JSC::JSGlobalObject *)&v19);
    JSC::VM::throwException(v6, this, v15);
    v14 = v19;
  }
  v19 = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 2)
      WTF::StringImpl::destroy(v14, v13);
    else
      *(_DWORD *)v14 -= 2;
  }
  if (v22)
  {
    v16 = v21;
    v21 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 != 2)
      {
        result = 0;
        *(_DWORD *)v16 -= 2;
        return result;
      }
      WTF::StringImpl::destroy(v16, v13);
    }
  }
  return 0;
}

uint64_t WebCore::jsWebAnimationPrototypeFunction_play(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  JSValue v14;
  WTF::StringImpl *v15;
  JSC::VM *v16;
  char v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  char v21;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v16 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "Animation", "play");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebAnimation::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebAnimation::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "Animation", "play");
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v4 + 24) + 232))(&v19);
  if (!v21)
    return 10;
  v12 = (WTF::StringImpl *)v19;
  v17 = v19;
  v13 = v20;
  v20 = 0;
  v18 = v13;
  if (!*((_QWORD *)v5 + 2))
  {
    v14.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v19, (JSC::JSGlobalObject *)&v18);
    JSC::VM::throwException(v5, this, v14);
    v13 = v18;
  }
  v18 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (v21)
  {
    v15 = v20;
    v20 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 != 2)
      {
        result = 0;
        *(_DWORD *)v15 -= 2;
        return result;
      }
      WTF::StringImpl::destroy(v15, v12);
    }
  }
  return 0;
}

uint64_t WebCore::jsWebAnimationPrototypeFunction_pause(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  JSValue v14;
  WTF::StringImpl *v15;
  JSC::VM *v16;
  char v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  char v21;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v16 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "Animation", "pause");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebAnimation::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebAnimation::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "Animation", "pause");
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v4 + 24) + 240))(&v19);
  if (!v21)
    return 10;
  v12 = (WTF::StringImpl *)v19;
  v17 = v19;
  v13 = v20;
  v20 = 0;
  v18 = v13;
  if (!*((_QWORD *)v5 + 2))
  {
    v14.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v19, (JSC::JSGlobalObject *)&v18);
    JSC::VM::throwException(v5, this, v14);
    v13 = v18;
  }
  v18 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (v21)
  {
    v15 = v20;
    v20 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 != 2)
      {
        result = 0;
        *(_DWORD *)v15 -= 2;
        return result;
      }
      WTF::StringImpl::destroy(v15, v12);
    }
  }
  return 0;
}

uint64_t WebCore::jsWebAnimationPrototypeFunction_updatePlaybackRate(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::WebAnimation *v11;
  unint64_t v12;
  double v13;
  JSValue v15;
  double v16;
  _QWORD v17[2];
  unint64_t v18;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v17[0] = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)v17, "Animation", "updatePlaybackRate");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebAnimation::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebAnimation::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)v17, "Animation", "updatePlaybackRate");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v15.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v15);
  }
  else
  {
    v11 = *(WebCore::WebAnimation **)(v5 + 24);
    v12 = *((_QWORD *)a2 + 6);
    v17[1] = v4;
    v18 = v12;
    if (v12 >= 0xFFFE000000000000)
    {
      v13 = (double)(int)v12;
    }
    else if (v12 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v18, this);
      v13 = v16;
    }
    else
    {
      *(_QWORD *)&v13 = v12 - 0x2000000000000;
    }
    if (!*((_DWORD *)v4 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v4) & 1) == 0)
    {
      if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
      {
        WebCore::WebAnimation::updatePlaybackRate(v11, v13);
        return 10;
      }
      JSC::throwTypeError();
    }
    return 0;
  }
}

uint64_t WebCore::jsWebAnimationPrototypeFunction_reverse(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t result;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  JSValue v14;
  WTF::StringImpl *v15;
  JSC::VM *v16;
  char v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  char v21;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v16 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "Animation", "reverse");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebAnimation::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebAnimation::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "Animation", "reverse");
  (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(v4 + 24) + 152))(&v19);
  if (!v21)
    return 10;
  v12 = (WTF::StringImpl *)v19;
  v17 = v19;
  v13 = v20;
  v20 = 0;
  v18 = v13;
  if (!*((_QWORD *)v5 + 2))
  {
    v14.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v19, (JSC::JSGlobalObject *)&v18);
    JSC::VM::throwException(v5, this, v14);
    v13 = v18;
  }
  v18 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (v21)
  {
    v15 = v20;
    v20 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 != 2)
      {
        result = 0;
        *(_DWORD *)v15 -= 2;
        return result;
      }
      WTF::StringImpl::destroy(v15, v12);
    }
  }
  return 0;
}

uint64_t WebCore::jsWebAnimationPrototypeFunction_persist(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "Animation", "persist");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSWebAnimation::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSWebAnimation::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "Animation", "persist");
  WebCore::WebAnimation::persist(*(WTF::StringImpl **)(v3 + 24));
  return 10;
}

_BYTE *WebCore::jsWebAnimationPrototypeFunction_commitStyles(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::WebAnimation *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WTF *v14;
  WTF::StringImpl *v17;
  JSValue v18;
  WTF::StringImpl *v19;
  WTF *v20;
  uint64_t v21;
  uint64_t v22;
  JSC::VM *v23;
  WTF *v24;
  uint64_t v25;
  _BYTE v26[40];
  uint64_t v27;
  JSC::JSGlobalObject *v28;
  char v29;
  WTF::StringImpl *v30;
  unsigned int *v31;
  WTF::StringImpl *v32;
  char v33;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v23 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v23, "Animation", "commitStyles");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebAnimation::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebAnimation::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v23, "Animation", "commitStyles");
  v11 = *(WebCore::WebAnimation **)(v4 + 24);
  v24 = (WTF *)v26;
  v25 = 4;
  v26[32] = 0;
  v27 = WebCore::CustomElementReactionStack::s_currentProcessingStack;
  v28 = this;
  WebCore::CustomElementReactionStack::s_currentProcessingStack = (uint64_t)&v24;
  WebCore::WebAnimation::commitStyles(v11, a2, &v31);
  if (v33)
  {
    v12 = (WTF::StringImpl *)v31;
    v29 = (char)v31;
    v17 = v32;
    v32 = 0;
    v30 = v17;
    if (!*((_QWORD *)v5 + 2))
    {
      v18.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v31, (JSC::JSGlobalObject *)&v30);
      JSC::VM::throwException(v5, this, v18);
      v17 = v30;
    }
    v30 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v12);
      else
        *(_DWORD *)v17 -= 2;
    }
    if (v33)
    {
      v19 = v32;
      v32 = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 != 2)
        {
          v13 = 0;
          *(_DWORD *)v19 -= 2;
          goto LABEL_14;
        }
        WTF::StringImpl::destroy(v19, v12);
      }
    }
    v13 = 0;
    goto LABEL_14;
  }
  v13 = 10;
LABEL_14:
  if (HIDWORD(v25))
  {
    WebCore::CustomElementQueue::processQueue((WebCore::CustomElementQueue *)&v24, v28);
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v27;
    if (HIDWORD(v25))
    {
      v20 = v24;
      v21 = 8 * HIDWORD(v25);
      do
      {
        v22 = *(_QWORD *)v20;
        *(_QWORD *)v20 = 0;
        if (v22)
        {
          if (*(_DWORD *)(v22 + 24) == 2)
          {
            if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v22, v12);
          }
          else
          {
            *(_DWORD *)(v22 + 24) -= 2;
          }
        }
        v20 = (WTF *)((char *)v20 + 8);
        v21 -= 8;
      }
      while (v21);
    }
  }
  else
  {
    WebCore::CustomElementReactionStack::s_currentProcessingStack = v27;
  }
  v14 = v24;
  if (v26 != (_BYTE *)v24 && v24 != 0)
  {
    v24 = 0;
    LODWORD(v25) = 0;
    WTF::fastFree(v14, v12);
  }
  return (_BYTE *)v13;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore18WebCodecsAudioDataENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore18WebCodecsAudioDataENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore18WebCodecsAudioData4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3321198[v3])(&v5, a2 + 16);
  *(_DWORD *)(a2 + 24) = -1;
  return result;
}

_BYTE *WebCore::jsWebCodecsAudioDataPrototypeFunction_allocationSize(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  _BYTE *result;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  JSValue v18;
  WebCore *v19;
  JSC::JSGlobalObject *v20;
  JSC::CallFrame *v21;
  JSC::VM *v22;
  _OWORD v23[3];
  int v24[2];
  WTF::StringImpl *v25;
  int v26;
  _OWORD v27[3];
  int v28;
  _BYTE v29[8];
  WTF::StringImpl *v30;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v22 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v22, "AudioData", "allocationSize");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebCodecsAudioData::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebCodecsAudioData::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v22, "AudioData", "allocationSize");
  if (*((_DWORD *)a2 + 8) == 1)
    v11 = 10;
  else
    v11 = *((_QWORD *)a2 + 6);
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertDictionary<WebCore::WebCodecsAudioData::CopyToOptions>((uint64_t)v27, this, (JSC::JSCell *)v11);
  if (v28)
    return 0;
  v23[0] = v27[0];
  v23[1] = v27[1];
  v23[2] = v27[2];
  WebCore::WebCodecsAudioData::allocationSize(v12, (uint64_t)v23, (uint64_t)v24);
  if (!v26)
  {
    v13 = 0;
    if (v24[0] < 0)
      v14 = COERCE__INT64((double)v24[0]) + 0x2000000000000;
    else
      v14 = v24[0] | 0xFFFE000000000000;
LABEL_19:
    ((void (*)(_BYTE *, int *))off_1E33213B0[v13])(v29, v24);
    return (_BYTE *)v14;
  }
  if (v26 == 1)
  {
    v16 = (WTF::StringImpl *)LOBYTE(v24[0]);
    v29[0] = v24[0];
    v17 = v25;
    v25 = 0;
    v30 = v17;
    if (!*((_QWORD *)v4 + 2))
    {
      v18.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v24[0]), (JSC::JSGlobalObject *)&v30);
      JSC::VM::throwException(v4, this, v18);
      v17 = v30;
    }
    v30 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v14 = 0;
    result = 0;
    v13 = v26;
    if (v26 != -1)
      goto LABEL_19;
  }
  else
  {
    v19 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
    return (_BYTE *)WebCore::jsWebCodecsAudioDataPrototypeFunction_copyTo(v19, v20, v21);
  }
  return result;
}

_BYTE *WebCore::jsWebCodecsAudioDataPrototypeFunction_copyTo(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t (*v15)();
  uint64_t v16;
  JSValue v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  JSValue v22;
  WTF::StringImpl *v23;
  JSC::VM *v24;
  _OWORD v25[3];
  int v26;
  int v27;
  WTF::StringImpl *v28;
  char v29;
  WTF::StringImpl *v30[2];
  __int128 v31;
  __int128 v32;
  char v33[8];
  int v34;
  char v35[8];
  int v36;
  char v37[8];
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v24 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "AudioData", "copyTo");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebCodecsAudioData::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebCodecsAudioData::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v24, "AudioData", "copyTo");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v19);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convert<WebCore::IDLAllowSharedAdaptor<WebCore::IDLUnion<WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer>>>(*((_QWORD *)a2 + 6), (uint64_t)this, (uint64_t)v37);
  v13 = v40;
  if (!v40)
  {
    WebCore::convertDictionary<WebCore::WebCodecsAudioData::CopyToOptions>((uint64_t)v25, this, *((JSC::JSCell **)a2 + 7));
    if (!v26)
    {
      if (v40)
        std::__throw_bad_variant_access[abi:sn180100]();
      v33[0] = 0;
      v34 = -1;
      v14 = v39;
      if (v39 == -1)
      {
        v35[0] = 0;
        v36 = -1;
      }
      else
      {
        v15 = off_1E33211A8[v39];
        ((void (*)(WTF::StringImpl **, char *, uint64_t *))v15)(v30, v33, &v38);
        v34 = v14;
        v35[0] = 0;
        v36 = -1;
        ((void (*)(WTF::StringImpl **, char *, char *))v15)(v30, v35, v33);
        v36 = v14;
      }
      *(_OWORD *)v30 = v25[0];
      v31 = v25[1];
      v32 = v25[2];
      WebCore::WebCodecsAudioData::copyTo(v12, (uint64_t)v35, (uint64_t)v30, (uint64_t)&v27);
      if (v36 != -1)
        ((void (*)(WTF::StringImpl **, char *))off_1E3321198[v36])(v30, v35);
      v36 = -1;
      if (v34 != -1)
        ((void (*)(WTF::StringImpl **, char *))off_1E3321198[v34])(v30, v33);
      if (!v29)
      {
        v16 = 10;
LABEL_25:
        v13 = v40;
        goto LABEL_26;
      }
      v20 = (WTF::StringImpl *)v27;
      LOBYTE(v30[0]) = v27;
      v21 = v28;
      v28 = 0;
      v30[1] = v21;
      if (!*((_QWORD *)v4 + 2))
      {
        v22.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v27, (JSC::JSGlobalObject *)&v30[1]);
        JSC::VM::throwException(v4, this, v22);
        v21 = v30[1];
      }
      v30[1] = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 2)
          WTF::StringImpl::destroy(v21, v20);
        else
          *(_DWORD *)v21 -= 2;
      }
      if (v29)
      {
        v23 = v28;
        v28 = 0;
        if (v23)
        {
          if (*(_DWORD *)v23 != 2)
          {
            v16 = 0;
            *(_DWORD *)v23 -= 2;
            goto LABEL_25;
          }
          WTF::StringImpl::destroy(v23, v20);
        }
      }
    }
    v16 = 0;
    goto LABEL_25;
  }
  v16 = 0;
LABEL_26:
  if (v13 != -1)
    ((void (*)(_OWORD *, uint64_t *))off_1E33211C8[v13])(v25, &v38);
  return (_BYTE *)v16;
}

uint64_t WebCore::jsWebCodecsAudioDataPrototypeFunction_clone(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v14;
  JSValue v15;
  uint64_t v16;
  WebCore::ScriptExecutionContext *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  JSC::VM *v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  int v28;
  char v29[8];
  WTF::StringImpl *v30;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "AudioData", "clone");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebCodecsAudioData::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebCodecsAudioData::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "AudioData", "clone");
  v11 = *(_QWORD *)(v4 + 24);
  v12 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v12)
    return 10;
  if (*(_BYTE *)(v11 + 32))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    LOBYTE(v26) = 8;
    v28 = 1;
    v29[0] = 8;
    v14 = v27;
    v27 = 0;
    v30 = v14;
    if (!*((_QWORD *)v5 + 2))
    {
      v15.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)8, (JSC::JSGlobalObject *)&v30);
      JSC::VM::throwException(v5, this, v15);
      v14 = v30;
    }
    v30 = 0;
    if (v14)
    {
      if (*(_DWORD *)v14 == 2)
        WTF::StringImpl::destroy(v14, v13);
      else
        *(_DWORD *)v14 -= 2;
    }
    v16 = 0;
  }
  else
  {
    v17 = (WebCore::ScriptExecutionContext *)v12;
    v18 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
    v19 = WTF::fastMalloc((WTF *)0x28);
    v20 = v19;
    v21 = *(_QWORD *)(v11 + 24);
    if (v21)
    {
      v22 = (unsigned int *)(v21 + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
    *(_DWORD *)(v19 + 16) = 1;
    *(_QWORD *)v19 = &off_1E33A18C0;
    *(_QWORD *)(v19 + 8) = 0;
    WebCore::ContextDestructionObserver::observeContext((WebCore::ContextDestructionObserver *)v19, v17);
    *(_QWORD *)v20 = &off_1E336C7C8;
    *(_QWORD *)(v20 + 24) = v21;
    *(_BYTE *)(v20 + 32) = 0;
    v28 = 0;
    v26 = 0;
    v16 = WebCore::wrap<WebCore::WebCodecsAudioData>((uint64_t)this, v18, (WTF *)v20);
    if (*(_DWORD *)(v20 + 16) == 1)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
    else
      --*(_DWORD *)(v20 + 16);
  }
  if (v28 != -1)
    ((void (*)(char *, uint64_t *))off_1E33211D8[v28])(v29, &v26);
  return v16;
}

uint64_t WebCore::jsWebCodecsAudioDataPrototypeFunction_close(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;

  v3 = *((_QWORD *)a2 + 5);
  v15 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "AudioData", "close");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSWebCodecsAudioData::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSWebCodecsAudioData::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v15, "AudioData", "close");
  v9 = *(_QWORD *)(v3 + 24);
  v10 = *(unsigned int **)(v9 + 24);
  *(_QWORD *)(v9 + 24) = 0;
  if (v10)
  {
    v11 = v10 + 2;
    do
    {
      v12 = __ldaxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
    {
      atomic_store(1u, v10 + 2);
      (*(void (**)(unsigned int *))(*(_QWORD *)v10 + 8))(v10);
    }
  }
  *(_BYTE *)(v9 + 32) = 1;
  return 10;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJmN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSB_1EJmS9_EEEEEEDcSD_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore34JSWebCodecsAudioDataOutputCallbackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore24JSWebCodecsErrorCallbackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore21WebCodecsAudioDecoder4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  _DWORD *result;

  v3 = *(_DWORD **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

unint64_t WebCore::jsWebCodecsAudioDecoderConstructorFunction_isConfigSupported(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  WTF::StringImpl *v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  JSC::VM *v26;
  JSValue v27;
  objc_class *v28;
  WebCore::DOMGuardedObject *v29;
  WebCore::DOMGuardedObject *v30;
  WebCore::DOMGuardedObject *v31;
  uint64_t v32;
  int v33;
  char v34;
  __int128 v35;
  int v36;
  WTF::StringImpl *v37;
  char v38[8];
  int v39;
  char v40;
  __int128 v41;
  char v42;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x195073574);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v30 = v15;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v26 = (JSC::VM *)*((_QWORD *)this + 7);
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v26, this, v27);
    goto LABEL_41;
  }
  v17 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v17)
  {
LABEL_41:
    v30 = 0;
LABEL_32:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_34;
  }
  v18 = v17;
  WebCore::convertDictionary<WebCore::WebCodecsAudioDecoderConfig>((uint64_t)&v31, (JSC::VM **)this, *((JSC::JSCell **)a2 + 6));
  v19 = v36;
  if (!v36)
  {
    v20 = v31;
    v31 = 0;
    v37 = v20;
    v38[0] = 0;
    v40 = 0;
    if (v34)
    {
      v39 = -1;
      v21 = v33;
      if (v33 != -1)
      {
        ((void (*)(char *, char *, uint64_t *))off_1E33211A8[v33])(&v42, v38, &v32);
        v39 = v21;
      }
      v40 = 1;
    }
    v41 = v35;
    WebCore::WebCodecsAudioDecoder::isConfigSupported(v18, (_BOOL8 *)&v37, (uint64_t *)&v30);
    if (v40)
    {
      if (v39 != -1)
        ((void (*)(char *, char *))off_1E3321198[v39])(&v42, v38);
      v39 = -1;
    }
    v23 = v37;
    v37 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v22);
      else
        *(_DWORD *)v23 -= 2;
    }
    v19 = v36;
  }
  if (v19 != -1)
    ((void (*)(WTF::StringImpl **, WebCore::DOMGuardedObject **))off_1E3321418[v19])(&v37, &v31);
  v14 = v30;
  v30 = 0;
  if (v14)
    goto LABEL_32;
LABEL_34:
  v24 = *(_QWORD *)(v10 + 16);
  if (v24)
  {
    if (*(_QWORD *)(v10 + 24) != v24)
    {
      v28 = *(objc_class **)(v24 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v31);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v31, v28, 0);
      v29 = v31;
      v31 = 0;
      if (v29)
      {
        if (*((_DWORD *)v29 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v29 + 16))(v29);
        else
          --*((_DWORD *)v29 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27WebCodecsAudioDecoderConfigENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *result;
  char v5;

  if (*(_BYTE *)(a2 + 24))
  {
    v3 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_1E3321198[v3])(&v5, a2 + 8);
    *(_DWORD *)(a2 + 16) = -1;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::jsWebCodecsAudioDecoderPrototypeFunction_configure(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  int v13;
  WTF::StringImpl *v14;
  int v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  uint64_t v18;
  JSValue v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  JSValue v24;
  WTF::StringImpl *v25;
  JSC::VM *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  int v29;
  char v30;
  __int128 v31;
  int v32;
  int v33;
  WTF::StringImpl *v34;
  char v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  int v38;
  char v39;
  __int128 v40;
  char v41;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "AudioDecoder", "configure");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebCodecsAudioDecoder::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebCodecsAudioDecoder::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "AudioDecoder", "configure");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v21);
  }
  v12 = *(_QWORD *)(v5 + 24);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(this))
    return 10;
  WebCore::convertDictionary<WebCore::WebCodecsAudioDecoderConfig>((uint64_t)&v27, (JSC::VM **)this, *((JSC::JSCell **)a2 + 6));
  v13 = v32;
  if (!v32)
  {
    v14 = v27;
    v27 = 0;
    v36 = v14;
    LOBYTE(v37) = 0;
    v39 = 0;
    if (v30)
    {
      v38 = -1;
      v15 = v29;
      if (v29 != -1)
      {
        ((void (*)(int *, WTF::StringImpl **, uint64_t *))off_1E33211A8[v29])(&v33, &v37, &v28);
        v38 = v15;
      }
      v39 = 1;
    }
    v40 = v31;
    WebCore::WebCodecsAudioDecoder::configure(v12 - 32, (_BOOL8 *)&v36, (uint64_t)&v33);
    if (v39)
    {
      if (v38 != -1)
        ((void (*)(char *, WTF::StringImpl **))off_1E3321198[v38])(&v41, &v37);
      v38 = -1;
    }
    v17 = v36;
    v36 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    if (!v35)
    {
      v18 = 10;
LABEL_28:
      v13 = v32;
      goto LABEL_29;
    }
    v22 = (WTF::StringImpl *)v33;
    LOBYTE(v36) = v33;
    v23 = v34;
    v34 = 0;
    v37 = v23;
    if (!*((_QWORD *)v4 + 2))
    {
      v24.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v33, (JSC::JSGlobalObject *)&v37);
      JSC::VM::throwException(v4, this, v24);
      v23 = v37;
    }
    v37 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v22);
      else
        *(_DWORD *)v23 -= 2;
    }
    if (v35)
    {
      v25 = v34;
      v34 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 != 2)
        {
          v18 = 0;
          *(_DWORD *)v25 -= 2;
          goto LABEL_28;
        }
        WTF::StringImpl::destroy(v25, v22);
      }
    }
    v18 = 0;
    goto LABEL_28;
  }
  v18 = 0;
LABEL_29:
  if (v13 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3321418[v13])(&v36, &v27);
  return v18;
}

uint64_t WebCore::jsWebCodecsAudioDecoderPrototypeFunction_decode(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t result;
  WTF *v24;
  void *v25;
  WTF *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  JSValue v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  JSValue v33;
  WTF::StringImpl *v34;
  WTF *v35;
  WTF *v36;
  WTF *v37;
  JSC::VM *v38;
  WTF *v39;
  WTF::StringImpl *v40;
  JSC::VM *v41;
  WTF::StringImpl *v42;
  char v43;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v38 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v38, "AudioDecoder", "decode");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebCodecsAudioDecoder::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebCodecsAudioDecoder::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v38, "AudioDecoder", "decode");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v30.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v30);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v41 = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSWebCodecsEncodedAudioChunk::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSWebCodecsEncodedAudioChunk::s_info && v20 != 0);
  }
  if (!v19 || (v24 = *(WTF **)(v17 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v41, 0, "chunk", 6, "AudioDecoder", 13, a8, "decode", 7, "WebCodecsEncodedAudioChunk", 27);
    return 0;
  }
  ++*(_DWORD *)v24;
  v39 = v24;
  WebCore::WebCodecsAudioDecoder::decode(v16 - 32, (uint64_t *)&v39, (uint64_t)&v41);
  v26 = v39;
  v39 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
    {
      v27 = *((_QWORD *)v26 + 1);
      *((_QWORD *)v26 + 1) = 0;
      if (v27)
      {
        do
        {
          v28 = __ldaxr((unsigned int *)v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, (unsigned int *)v27));
        if (!v29)
        {
          v36 = v26;
          v37 = (WTF *)v27;
          atomic_store(1u, (unsigned int *)v27);
          v35 = *(WTF **)(v27 + 40);
          if (v35)
          {
            *(_QWORD *)(v27 + 40) = 0;
            *(_DWORD *)(v27 + 48) = 0;
            WTF::fastFree(v35, v25);
          }
          WTF::fastFree(v37, v25);
          v26 = v36;
        }
      }
      WTF::fastFree(v26, v25);
    }
    else
    {
      --*(_DWORD *)v26;
    }
  }
  if (!v43)
    return 10;
  v31 = (WTF::StringImpl *)v41;
  LOBYTE(v39) = (_BYTE)v41;
  v32 = v42;
  v42 = 0;
  v40 = v32;
  if (!*((_QWORD *)v9 + 2))
  {
    v33.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v41, (JSC::JSGlobalObject *)&v40);
    JSC::VM::throwException(v9, this, v33);
    v32 = v40;
  }
  v40 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v31);
    else
      *(_DWORD *)v32 -= 2;
  }
  if (!v43)
    return 0;
  v34 = v42;
  v42 = 0;
  if (!v34)
    return 0;
  if (*(_DWORD *)v34 == 2)
  {
    WTF::StringImpl::destroy(v34, v31);
    return 0;
  }
  result = 0;
  *(_DWORD *)v34 -= 2;
  return result;
}

unint64_t WebCore::jsWebCodecsAudioDecoderPrototypeFunction_flush(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  JSC::VM *v23;
  uint64_t v24;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  JSValue v28;
  WTF::StringImpl *v29;
  objc_class *v30;
  _DWORD *v31;
  WebCore::DOMGuardedObject *v32;
  char v33;
  WTF::StringImpl *v34;
  int v35[2];
  WTF::StringImpl *v36;
  char v37;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x195073E20);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v32 = v15;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_32;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSWebCodecsAudioDecoder::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSWebCodecsAudioDecoder::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_32:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"AudioDecoder", "flush", v16);
  }
  else
  {
    v23 = (JSC::VM *)*((_QWORD *)this + 7);
    WebCore::WebCodecsAudioDecoder::flush(*(_QWORD *)(v17 + 24) - 32, (uint64_t *)&v32, v35);
    if (v37)
    {
      v26 = (WTF::StringImpl *)LOBYTE(v35[0]);
      v33 = v35[0];
      v27 = v36;
      v36 = 0;
      v34 = v27;
      if (!*((_QWORD *)v23 + 2))
      {
        v28.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v35[0]), (JSC::JSGlobalObject *)&v34);
        JSC::VM::throwException(v23, this, v28);
        v27 = v34;
      }
      v34 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v26);
        else
          *(_DWORD *)v27 -= 2;
      }
      if (v37)
      {
        v29 = v36;
        v36 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v26);
          else
            *(_DWORD *)v29 -= 2;
        }
      }
    }
  }
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
  v24 = *(_QWORD *)(v10 + 16);
  if (v24)
  {
    if (*(_QWORD *)(v10 + 24) != v24)
    {
      v30 = *(objc_class **)(v24 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, (WebCore::DOMGuardedObject **)v35);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>(*(uint64_t *)v35, v30, 0);
      v31 = *(_DWORD **)v35;
      *(_QWORD *)v35 = 0;
      if (v31)
      {
        if (v31[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 16))(v31);
        else
          --v31[4];
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

uint64_t WebCore::jsWebCodecsAudioDecoderPrototypeFunction_reset(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSValue v17;
  WTF::StringImpl *v18;
  JSC::VM *v19;
  int v20[2];
  WTF::StringImpl *v21;
  char v22;
  uint64_t v23;
  WTF::StringImpl *v24;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v19 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v19, "AudioDecoder", "reset");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebCodecsAudioDecoder::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebCodecsAudioDecoder::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v19, "AudioDecoder", "reset");
  v11 = *(_QWORD *)(v4 + 24) - 32;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = *(WTF::StringImpl **)v20;
  LOBYTE(v23) = 16;
  v24 = *(WTF::StringImpl **)v20;
  WebCore::WebCodecsAudioDecoder::resetDecoder(v11, &v23, (uint64_t)v20);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v13);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (!v22)
    return 10;
  v15 = (WTF::StringImpl *)LOBYTE(v20[0]);
  LOBYTE(v23) = v20[0];
  v16 = v21;
  v21 = 0;
  v24 = v16;
  if (!*((_QWORD *)v5 + 2))
  {
    v17.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v20[0]), (JSC::JSGlobalObject *)&v24);
    JSC::VM::throwException(v5, this, v17);
    v16 = v24;
  }
  v24 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (v22)
  {
    v18 = v21;
    v21 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 != 2)
      {
        result = 0;
        *(_DWORD *)v18 -= 2;
        return result;
      }
      WTF::StringImpl::destroy(v18, v15);
    }
  }
  return 0;
}

uint64_t WebCore::jsWebCodecsAudioDecoderPrototypeFunction_close(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSValue v17;
  JSC::VM *v18;
  int v19;
  WTF::StringImpl *v20;
  char v21;
  unsigned __int8 v22[8];
  WTF::StringImpl *v23;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v18 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v18, "AudioDecoder", "close");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebCodecsAudioDecoder::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebCodecsAudioDecoder::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v18, "AudioDecoder", "close");
  v11 = *(_QWORD *)(v4 + 24) - 32;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v22[0] = 16;
  WebCore::WebCodecsAudioDecoder::closeDecoder(v11, v22, (uint64_t)&v19);
  v13 = v23;
  v23 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (!v21)
    return 10;
  v15 = (WTF::StringImpl *)v19;
  v22[0] = v19;
  v16 = v20;
  v23 = v20;
  if (!*((_QWORD *)v5 + 2))
  {
    v17.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v19, (JSC::JSGlobalObject *)&v23);
    JSC::VM::throwException(v5, this, v17);
    v16 = v23;
  }
  v23 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  return 0;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore42JSWebCodecsEncodedAudioChunkOutputCallbackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore21WebCodecsAudioEncoder4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  _DWORD *result;

  v3 = *(_DWORD **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

unint64_t WebCore::jsWebCodecsAudioEncoderConstructorFunction_isConfigSupported(WebCore *this, JSC::JSCell **a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  JSC::VM *v25;
  JSValue v26;
  objc_class *v27;
  WebCore::DOMGuardedObject *v28;
  WebCore::DOMGuardedObject *v29;
  WebCore::DOMGuardedObject *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _OWORD v37[2];
  unsigned int v38;
  WTF::StringImpl *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[2];

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x195074538);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v29 = v15;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25 = (JSC::VM *)*((_QWORD *)this + 7);
    v26.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v25, this, v26);
  }
  else
  {
    v17 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
    if (v17)
    {
      v18 = v17;
      WebCore::convertDictionary<WebCore::WebCodecsAudioEncoderConfig>((uint64_t)&v30, this, a2[6]);
      v19 = v38;
      if (v38)
      {
        if (v38 == -1)
        {
LABEL_21:
          v14 = v29;
          v29 = 0;
          if (!v14)
            goto LABEL_24;
          goto LABEL_22;
        }
      }
      else
      {
        v20 = v30;
        v30 = 0;
        v39 = v20;
        v44 = v35;
        v45 = v36;
        v46[0] = v37[0];
        *(_OWORD *)((char *)v46 + 9) = *(_OWORD *)((char *)v37 + 9);
        v40 = v31;
        v41 = v32;
        v42 = v33;
        v43 = v34;
        WebCore::WebCodecsAudioEncoder::isConfigSupported(v18, (uint64_t)&v39, (uint64_t *)&v29);
        v22 = v39;
        v39 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v21);
          else
            *(_DWORD *)v22 -= 2;
        }
      }
      ((void (*)(WTF::StringImpl **, WebCore::DOMGuardedObject **))off_1E33215E8[v19])(&v39, &v30);
      goto LABEL_21;
    }
  }
  v29 = 0;
LABEL_22:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_24:
  v23 = *(_QWORD *)(v10 + 16);
  if (v23)
  {
    if (*(_QWORD *)(v10 + 24) != v23)
    {
      v27 = *(objc_class **)(v23 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v30);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v30, v27, 0);
      v28 = v30;
      v30 = 0;
      if (v28)
      {
        if (*((_DWORD *)v28 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v28 + 16))(v28);
        else
          --*((_DWORD *)v28 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27WebCodecsAudioEncoderConfigENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::jsWebCodecsAudioEncoderPrototypeFunction_configure(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  uint64_t result;
  JSValue v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  JSValue v22;
  WTF::StringImpl *v23;
  JSC::VM *v24;
  WTF::StringImpl *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _OWORD v32[2];
  unsigned int v33;
  int v34;
  WTF::StringImpl *v35;
  char v36;
  WTF::StringImpl *v37;
  _OWORD v38[6];
  _OWORD v39[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v24 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v24, "AudioEncoder", "configure");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebCodecsAudioEncoder::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebCodecsAudioEncoder::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v24, "AudioEncoder", "configure");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v19);
  }
  v12 = *(_QWORD *)(v5 + 24);
  if (!WebCore::JSDOMGlobalObject::scriptExecutionContext(this))
    return 10;
  WebCore::convertDictionary<WebCore::WebCodecsAudioEncoderConfig>((uint64_t)&v25, this, *((JSC::JSCell **)a2 + 6));
  v13 = v33;
  if (!v33)
  {
    v14 = v25;
    v25 = 0;
    v37 = v14;
    v38[4] = v30;
    v38[5] = v31;
    v39[0] = v32[0];
    *(_OWORD *)((char *)v39 + 9) = *(_OWORD *)((char *)v32 + 9);
    v38[0] = v26;
    v38[1] = v27;
    v38[2] = v28;
    v38[3] = v29;
    WebCore::WebCodecsAudioEncoder::configure(v12 - 32, (uint64_t)&v37, (uint64_t)&v34);
    v16 = v37;
    v37 = 0;
    if (v16)
    {
      if (*(_DWORD *)v16 == 2)
        WTF::StringImpl::destroy(v16, v15);
      else
        *(_DWORD *)v16 -= 2;
    }
    if (!v36)
    {
      v17 = 10;
LABEL_20:
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33215E8[v13])(&v37, &v25);
      return v17;
    }
    v20 = (WTF::StringImpl *)v34;
    LOBYTE(v37) = v34;
    v21 = v35;
    v35 = 0;
    *(_QWORD *)&v38[0] = v21;
    if (!*((_QWORD *)v4 + 2))
    {
      v22.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v34, (JSC::JSGlobalObject *)v38);
      JSC::VM::throwException(v4, this, v22);
      v21 = *(WTF::StringImpl **)&v38[0];
    }
    *(_QWORD *)&v38[0] = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    if (v36)
    {
      v23 = v35;
      v35 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 != 2)
        {
          v17 = 0;
          *(_DWORD *)v23 -= 2;
          goto LABEL_20;
        }
        WTF::StringImpl::destroy(v23, v20);
      }
    }
    v17 = 0;
    goto LABEL_20;
  }
  v17 = 0;
  result = 0;
  if (v33 != -1)
    goto LABEL_20;
  return result;
}

uint64_t WebCore::jsWebCodecsAudioEncoderPrototypeFunction_encode(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t result;
  uint64_t v24;
  _DWORD *v25;
  JSValue v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  JSValue v29;
  WTF::StringImpl *v30;
  JSC::VM *v31;
  _DWORD *v32;
  WTF::StringImpl *v33;
  JSC::VM *v34;
  WTF::StringImpl *v35;
  char v36;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v31 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v31, "AudioEncoder", "encode");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebCodecsAudioEncoder::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebCodecsAudioEncoder::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v31, "AudioEncoder", "encode");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v26.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v26);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v34 = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSWebCodecsAudioData::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSWebCodecsAudioData::s_info && v20 != 0);
  }
  if (!v19 || (v24 = *(_QWORD *)(v17 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v34, 0, "data", 5, "AudioEncoder", 13, a8, "encode", 7, "WebCodecsAudioData", 19);
    return 0;
  }
  ++*(_DWORD *)(v24 + 16);
  v32 = (_DWORD *)v24;
  WebCore::WebCodecsAudioEncoder::encode(v16 - 32, (uint64_t *)&v32, (uint64_t)&v34);
  v25 = v32;
  v32 = 0;
  if (v25)
  {
    if (v25[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 16))(v25);
    else
      --v25[4];
  }
  if (!v36)
    return 10;
  v27 = (WTF::StringImpl *)v34;
  LOBYTE(v32) = (_BYTE)v34;
  v28 = v35;
  v35 = 0;
  v33 = v28;
  if (!*((_QWORD *)v9 + 2))
  {
    v29.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v34, (JSC::JSGlobalObject *)&v33);
    JSC::VM::throwException(v9, this, v29);
    v28 = v33;
  }
  v33 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v27);
    else
      *(_DWORD *)v28 -= 2;
  }
  if (!v36)
    return 0;
  v30 = v35;
  v35 = 0;
  if (!v30)
    return 0;
  if (*(_DWORD *)v30 == 2)
  {
    WTF::StringImpl::destroy(v30, v27);
    return 0;
  }
  result = 0;
  *(_DWORD *)v30 -= 2;
  return result;
}

unint64_t WebCore::jsWebCodecsAudioEncoderPrototypeFunction_flush(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  objc_class *v25;
  WebCore::DOMGuardedObject *v26;
  WebCore::DOMGuardedObject *v27;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x195074CF8);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v27 = v15;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_32;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSWebCodecsAudioEncoder::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSWebCodecsAudioEncoder::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_32:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"AudioEncoder", "flush", v16);
    v27 = 0;
  }
  else
  {
    WebCore::WebCodecsAudioEncoder::flush(*(_QWORD *)(v17 + 24) - 32, (uint64_t *)&v27);
    v14 = v27;
    v27 = 0;
    if (!v14)
      goto LABEL_28;
  }
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_28:
  v23 = *(_QWORD *)(v10 + 16);
  if (v23)
  {
    if (*(_QWORD *)(v10 + 24) != v23)
    {
      v25 = *(objc_class **)(v23 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v27);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v27, v25, 0);
      v26 = v27;
      v27 = 0;
      if (v26)
      {
        if (*((_DWORD *)v26 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v26 + 16))(v26);
        else
          --*((_DWORD *)v26 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

uint64_t WebCore::jsWebCodecsAudioEncoderPrototypeFunction_reset(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSValue v17;
  WTF::StringImpl *v18;
  JSC::VM *v19;
  int v20[2];
  WTF::StringImpl *v21;
  char v22;
  uint64_t v23;
  WTF::StringImpl *v24;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v19 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v19, "AudioEncoder", "reset");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebCodecsAudioEncoder::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebCodecsAudioEncoder::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v19, "AudioEncoder", "reset");
  v11 = *(_QWORD *)(v4 + 24) - 32;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = *(WTF::StringImpl **)v20;
  LOBYTE(v23) = 16;
  v24 = *(WTF::StringImpl **)v20;
  WebCore::WebCodecsAudioEncoder::resetEncoder(v11, &v23, (uint64_t)v20);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v13);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (!v22)
    return 10;
  v15 = (WTF::StringImpl *)LOBYTE(v20[0]);
  LOBYTE(v23) = v20[0];
  v16 = v21;
  v21 = 0;
  v24 = v16;
  if (!*((_QWORD *)v5 + 2))
  {
    v17.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v20[0]), (JSC::JSGlobalObject *)&v24);
    JSC::VM::throwException(v5, this, v17);
    v16 = v24;
  }
  v24 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (v22)
  {
    v18 = v21;
    v21 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 != 2)
      {
        result = 0;
        *(_DWORD *)v18 -= 2;
        return result;
      }
      WTF::StringImpl::destroy(v18, v15);
    }
  }
  return 0;
}

uint64_t WebCore::jsWebCodecsAudioEncoderPrototypeFunction_close(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSValue v17;
  JSC::VM *v18;
  int v19;
  WTF::StringImpl *v20;
  char v21;
  unsigned __int8 v22[8];
  WTF::StringImpl *v23;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v18 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v18, "AudioEncoder", "close");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebCodecsAudioEncoder::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebCodecsAudioEncoder::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v18, "AudioEncoder", "close");
  v11 = *(_QWORD *)(v4 + 24) - 32;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v22[0] = 16;
  WebCore::WebCodecsAudioEncoder::closeEncoder(v11, v22, (uint64_t)&v19);
  v13 = v23;
  v23 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (!v21)
    return 10;
  v15 = (WTF::StringImpl *)v19;
  v22[0] = v19;
  v16 = v20;
  v23 = v20;
  if (!*((_QWORD *)v5 + 2))
  {
    v17.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v19, (JSC::JSGlobalObject *)&v23);
    JSC::VM::throwException(v5, this, v17);
    v16 = v23;
  }
  v23 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  return 0;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26WebCodecsEncodedAudioChunk4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3321198[v3])(&v5, a2 + 32);
  *(_DWORD *)(a2 + 40) = -1;
  return result;
}

_BYTE *WebCore::jsWebCodecsEncodedAudioChunkPrototypeFunction_copyTo(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t (*v14)();
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  JSValue v22;
  JSValue v23;
  WTF::StringImpl *v24;
  JSC::VM *v25;
  int v26[2];
  WTF::StringImpl *v27;
  uint64_t v28;
  _BYTE v29[8];
  int v30;
  _BYTE v31[8];
  WTF::StringImpl *v32;
  char v33;
  _BYTE v34[8];
  uint64_t v35;
  unsigned int v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "EncodedAudioChunk", "copyTo");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebCodecsEncodedAudioChunk::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebCodecsEncodedAudioChunk::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "EncodedAudioChunk", "copyTo");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v22.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v22);
  }
  v11 = *(_QWORD *)(v5 + 24);
  WebCore::convert<WebCore::IDLAllowSharedAdaptor<WebCore::IDLUnion<WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer>>>(*((_QWORD *)a2 + 6), (uint64_t)this, (uint64_t)v34);
  v12 = v37;
  if (!v37)
  {
    v29[0] = 0;
    v30 = -1;
    v13 = v36;
    if (v36 != -1)
    {
      v14 = off_1E33211A8[v36];
      ((void (*)(int *, _BYTE *, uint64_t *))v14)(v26, v29, &v35);
      v30 = v13;
      v31[0] = 0;
      LODWORD(v32) = -1;
      ((void (*)(int *, _BYTE *, _BYTE *))v14)(v26, v31, v29);
      LODWORD(v32) = v13;
      *(_QWORD *)v26 = &v33;
      if (((uint64_t (*)(int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZNK7WebCore12BufferSource6lengthEvEUlRT_E_EEJRKNS0_6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSE_INSF_11ArrayBufferENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOS8_DpOT0____fmatrix[v13])(v26, v31) < (unint64_t)*(unsigned int *)(*(_QWORD *)(v11 + 8) + 52))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        LOBYTE(v26[0]) = 33;
        LOBYTE(v28) = 1;
        goto LABEL_20;
      }
      if ((_DWORD)v32 != -1)
      {
        *(_QWORD *)v26 = &v33;
        v15 = (WTF::StringImpl *)((uint64_t (*)(int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN7WebCore12BufferSource11mutableSpanEvEUlRT_E_EEJRNS0_6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSE_INSF_11ArrayBufferENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOS8_DpOT0____fmatrix_0[v32])(v26, v31);
        v17 = *(_QWORD *)(v11 + 8);
        v18 = *(unsigned int *)(v17 + 52);
        if ((unint64_t)v16 < v18)
        {
          __break(1u);
          goto LABEL_44;
        }
        memcpy(v15, *(const void **)(v17 + 40), v18);
        v27 = 0;
        v28 = 0;
        *(_QWORD *)v26 = 0;
LABEL_20:
        if ((_DWORD)v32 != -1)
          ((void (*)(char *, _BYTE *))off_1E3321198[v32])(&v33, v31);
        LODWORD(v32) = -1;
        if (v30 != -1)
          ((void (*)(char *, _BYTE *))off_1E3321198[v30])(&v33, v29);
        if (!(_BYTE)v28)
        {
          v19 = 10;
LABEL_26:
          v12 = v37;
          goto LABEL_27;
        }
        v16 = (WTF::StringImpl *)LOBYTE(v26[0]);
        v31[0] = v26[0];
        v15 = v27;
        v27 = 0;
        v32 = v15;
        if (!*((_QWORD *)v4 + 2))
        {
          v23.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v26[0]), (JSC::JSGlobalObject *)&v32);
          JSC::VM::throwException(v4, this, v23);
          v15 = v32;
        }
        v32 = 0;
        if (!v15)
        {
LABEL_39:
          if ((_BYTE)v28)
          {
            v24 = v27;
            v27 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 != 2)
              {
                v19 = 0;
                *(_DWORD *)v24 -= 2;
                goto LABEL_26;
              }
              WTF::StringImpl::destroy(v24, v16);
            }
          }
          v19 = 0;
          goto LABEL_26;
        }
        if (*(_DWORD *)v15 != 2)
        {
          *(_DWORD *)v15 -= 2;
          goto LABEL_39;
        }
LABEL_44:
        WTF::StringImpl::destroy(v15, v16);
        goto LABEL_39;
      }
    }
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v19 = 0;
LABEL_27:
  if (v12 != -1)
    ((void (*)(int *, uint64_t *))off_1E33211C8[v12])(v26, &v35);
  return (_BYTE *)v19;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore26WebCodecsEncodedVideoChunk4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3321198[v3])(&v5, a2 + 32);
  *(_DWORD *)(a2 + 40) = -1;
  return result;
}

_BYTE *WebCore::jsWebCodecsEncodedVideoChunkPrototypeFunction_copyTo(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t (*v14)();
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  uint64_t v17;
  size_t v18;
  uint64_t v19;
  JSValue v22;
  JSValue v23;
  WTF::StringImpl *v24;
  JSC::VM *v25;
  int v26[2];
  WTF::StringImpl *v27;
  uint64_t v28;
  _BYTE v29[8];
  int v30;
  _BYTE v31[8];
  WTF::StringImpl *v32;
  char v33;
  _BYTE v34[8];
  uint64_t v35;
  unsigned int v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "EncodedVideoChunk", "copyTo");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebCodecsEncodedVideoChunk::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebCodecsEncodedVideoChunk::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v25, "EncodedVideoChunk", "copyTo");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v22.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v22);
  }
  v11 = *(_QWORD *)(v5 + 24);
  WebCore::convert<WebCore::IDLAllowSharedAdaptor<WebCore::IDLUnion<WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer>>>(*((_QWORD *)a2 + 6), (uint64_t)this, (uint64_t)v34);
  v12 = v37;
  if (!v37)
  {
    v29[0] = 0;
    v30 = -1;
    v13 = v36;
    if (v36 != -1)
    {
      v14 = off_1E33211A8[v36];
      ((void (*)(int *, _BYTE *, uint64_t *))v14)(v26, v29, &v35);
      v30 = v13;
      v31[0] = 0;
      LODWORD(v32) = -1;
      ((void (*)(int *, _BYTE *, _BYTE *))v14)(v26, v31, v29);
      LODWORD(v32) = v13;
      *(_QWORD *)v26 = &v33;
      if (((uint64_t (*)(int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZNK7WebCore12BufferSource6lengthEvEUlRT_E_EEJRKNS0_6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSE_INSF_11ArrayBufferENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOS8_DpOT0____fmatrix[v13])(v26, v31) < (unint64_t)*(unsigned int *)(*(_QWORD *)(v11 + 8) + 52))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        LOBYTE(v26[0]) = 33;
        LOBYTE(v28) = 1;
        goto LABEL_20;
      }
      if ((_DWORD)v32 != -1)
      {
        *(_QWORD *)v26 = &v33;
        v15 = (WTF::StringImpl *)((uint64_t (*)(int *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIZN7WebCore12BufferSource11mutableSpanEvEUlRT_E_EEJRNS0_6__implIJN3WTF6RefPtrIN3JSC15ArrayBufferViewENSD_12RawPtrTraitsISG_EENSD_21DefaultRefDerefTraitsISG_EEEENSE_INSF_11ArrayBufferENSH_ISM_EENSJ_ISM_EEEEEEEEEEDcOS8_DpOT0____fmatrix_0[v32])(v26, v31);
        v17 = *(_QWORD *)(v11 + 8);
        v18 = *(unsigned int *)(v17 + 52);
        if ((unint64_t)v16 < v18)
        {
          __break(1u);
          goto LABEL_44;
        }
        memcpy(v15, *(const void **)(v17 + 40), v18);
        v27 = 0;
        v28 = 0;
        *(_QWORD *)v26 = 0;
LABEL_20:
        if ((_DWORD)v32 != -1)
          ((void (*)(char *, _BYTE *))off_1E3321198[v32])(&v33, v31);
        LODWORD(v32) = -1;
        if (v30 != -1)
          ((void (*)(char *, _BYTE *))off_1E3321198[v30])(&v33, v29);
        if (!(_BYTE)v28)
        {
          v19 = 10;
LABEL_26:
          v12 = v37;
          goto LABEL_27;
        }
        v16 = (WTF::StringImpl *)LOBYTE(v26[0]);
        v31[0] = v26[0];
        v15 = v27;
        v27 = 0;
        v32 = v15;
        if (!*((_QWORD *)v4 + 2))
        {
          v23.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v26[0]), (JSC::JSGlobalObject *)&v32);
          JSC::VM::throwException(v4, this, v23);
          v15 = v32;
        }
        v32 = 0;
        if (!v15)
        {
LABEL_39:
          if ((_BYTE)v28)
          {
            v24 = v27;
            v27 = 0;
            if (v24)
            {
              if (*(_DWORD *)v24 != 2)
              {
                v19 = 0;
                *(_DWORD *)v24 -= 2;
                goto LABEL_26;
              }
              WTF::StringImpl::destroy(v24, v16);
            }
          }
          v19 = 0;
          goto LABEL_26;
        }
        if (*(_DWORD *)v15 != 2)
        {
          *(_DWORD *)v15 -= 2;
          goto LABEL_39;
        }
LABEL_44:
        WTF::StringImpl::destroy(v15, v16);
        goto LABEL_39;
      }
    }
    std::__throw_bad_variant_access[abi:sn180100]();
  }
  v19 = 0;
LABEL_27:
  if (v12 != -1)
    ((void (*)(int *, uint64_t *))off_1E33211C8[v12])(v26, &v35);
  return (_BYTE *)v19;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore35JSWebCodecsVideoFrameOutputCallbackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore21WebCodecsVideoDecoder4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  _DWORD *result;

  v3 = *(_DWORD **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

unint64_t WebCore::jsWebCodecsVideoDecoderConstructorFunction_isConfigSupported(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  WTF::StringImpl *v20;
  int v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  JSC::VM *v26;
  JSValue v27;
  objc_class *v28;
  WebCore::DOMGuardedObject *v29;
  WebCore::DOMGuardedObject *v30;
  WebCore::DOMGuardedObject *v31;
  uint64_t v32;
  int v33;
  char v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int16 v40;
  int v41;
  WTF::StringImpl *v42;
  char v43[8];
  int v44;
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int16 v51;
  char v52;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x195075B78);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v30 = v15;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v26 = (JSC::VM *)*((_QWORD *)this + 7);
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v26, this, v27);
    goto LABEL_41;
  }
  v17 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v17)
  {
LABEL_41:
    v30 = 0;
LABEL_32:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_34;
  }
  v18 = v17;
  WebCore::convertDictionary<WebCore::WebCodecsVideoDecoderConfig>((uint64_t)&v31, this, *((JSC::JSCell **)a2 + 6));
  v19 = v41;
  if (!v41)
  {
    v20 = v31;
    v31 = 0;
    v42 = v20;
    v43[0] = 0;
    v45 = 0;
    if (v34)
    {
      v44 = -1;
      v21 = v33;
      if (v33 != -1)
      {
        ((void (*)(char *, char *, uint64_t *))off_1E33211A8[v33])(&v52, v43, &v32);
        v44 = v21;
      }
      v45 = 1;
    }
    v48 = v37;
    v49 = v38;
    v50 = v39;
    v51 = v40;
    v46 = v35;
    v47 = v36;
    WebCore::WebCodecsVideoDecoder::isConfigSupported(v18, (WebCore *)&v42, (uint64_t *)&v30);
    if (v45)
    {
      if (v44 != -1)
        ((void (*)(char *, char *))off_1E3321198[v44])(&v52, v43);
      v44 = -1;
    }
    v23 = v42;
    v42 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v22);
      else
        *(_DWORD *)v23 -= 2;
    }
    v19 = v41;
  }
  if (v19 != -1)
    ((void (*)(WTF::StringImpl **, WebCore::DOMGuardedObject **))off_1E33219A8[v19])(&v42, &v31);
  v14 = v30;
  v30 = 0;
  if (v14)
    goto LABEL_32;
LABEL_34:
  v24 = *(_QWORD *)(v10 + 16);
  if (v24)
  {
    if (*(_QWORD *)(v10 + 24) != v24)
    {
      v28 = *(objc_class **)(v24 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v31);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v31, v28, 0);
      v29 = v31;
      v31 = 0;
      if (v29)
      {
        if (*((_DWORD *)v29 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v29 + 16))(v29);
        else
          --*((_DWORD *)v29 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27WebCodecsVideoDecoderConfigENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  WTF::StringImpl *result;
  char v5;

  if (*(_BYTE *)(a2 + 24))
  {
    v3 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_1E3321198[v3])(&v5, a2 + 8);
    *(_DWORD *)(a2 + 16) = -1;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::jsWebCodecsVideoDecoderPrototypeFunction_configure(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  WTF::StringImpl *v16;
  int v17;
  WTF::StringImpl *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  JSValue v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  JSValue v26;
  WTF::StringImpl *v27;
  JSC::VM *v28;
  WTF::StringImpl *v29;
  uint64_t v30;
  int v31;
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int16 v38;
  int v39;
  int v40;
  WTF::StringImpl *v41;
  char v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  int v45;
  char v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int16 v52;
  char v53;

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v28 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v28, "VideoDecoder", "configure");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebCodecsVideoDecoder::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebCodecsVideoDecoder::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v28, "VideoDecoder", "configure");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v23.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v23);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v13)
    return 10;
  v14 = v13;
  WebCore::convertDictionary<WebCore::WebCodecsVideoDecoderConfig>((uint64_t)&v29, this, *((JSC::JSCell **)a2 + 6));
  v15 = v39;
  if (!v39)
  {
    v16 = v29;
    v29 = 0;
    v43 = v16;
    LOBYTE(v44) = 0;
    v46 = 0;
    if (v32)
    {
      v45 = -1;
      v17 = v31;
      if (v31 != -1)
      {
        ((void (*)(int *, WTF::StringImpl **, uint64_t *))off_1E33211A8[v31])(&v40, &v44, &v30);
        v45 = v17;
      }
      v46 = 1;
    }
    v49 = v35;
    v50 = v36;
    v51 = v37;
    v52 = v38;
    v47 = v33;
    v48 = v34;
    WebCore::WebCodecsVideoDecoder::configure(v12 - 32, v14, (uint64_t)&v43, (uint64_t)&v40);
    if (v46)
    {
      if (v45 != -1)
        ((void (*)(char *, WTF::StringImpl **))off_1E3321198[v45])(&v53, &v44);
      v45 = -1;
    }
    v19 = v43;
    v43 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v18);
      else
        *(_DWORD *)v19 -= 2;
    }
    if (!v42)
    {
      v20 = 10;
LABEL_28:
      v15 = v39;
      goto LABEL_29;
    }
    v24 = (WTF::StringImpl *)v40;
    LOBYTE(v43) = v40;
    v25 = v41;
    v41 = 0;
    v44 = v25;
    if (!*((_QWORD *)v4 + 2))
    {
      v26.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v40, (JSC::JSGlobalObject *)&v44);
      JSC::VM::throwException(v4, this, v26);
      v25 = v44;
    }
    v44 = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 2)
        WTF::StringImpl::destroy(v25, v24);
      else
        *(_DWORD *)v25 -= 2;
    }
    if (v42)
    {
      v27 = v41;
      v41 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 != 2)
        {
          v20 = 0;
          *(_DWORD *)v27 -= 2;
          goto LABEL_28;
        }
        WTF::StringImpl::destroy(v27, v24);
      }
    }
    v20 = 0;
    goto LABEL_28;
  }
  v20 = 0;
LABEL_29:
  if (v15 != -1)
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E33219A8[v15])(&v43, &v29);
  return v20;
}

uint64_t WebCore::jsWebCodecsVideoDecoderPrototypeFunction_decode(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t result;
  WTF *v24;
  void *v25;
  WTF *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  JSValue v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  JSValue v33;
  WTF::StringImpl *v34;
  WTF *v35;
  WTF *v36;
  WTF *v37;
  JSC::VM *v38;
  WTF *v39;
  WTF::StringImpl *v40;
  JSC::VM *v41;
  WTF::StringImpl *v42;
  char v43;

  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v38 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v38, "VideoDecoder", "decode");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebCodecsVideoDecoder::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebCodecsVideoDecoder::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v38, "VideoDecoder", "decode");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v30.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v30);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v41 = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSWebCodecsEncodedVideoChunk::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSWebCodecsEncodedVideoChunk::s_info && v20 != 0);
  }
  if (!v19 || (v24 = *(WTF **)(v17 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v41, 0, "chunk", 6, "VideoDecoder", 13, a8, "decode", 7, "WebCodecsEncodedVideoChunk", 27);
    return 0;
  }
  ++*(_DWORD *)v24;
  v39 = v24;
  WebCore::WebCodecsVideoDecoder::decode(v16 - 32, (uint64_t *)&v39, (uint64_t)&v41);
  v26 = v39;
  v39 = 0;
  if (v26)
  {
    if (*(_DWORD *)v26 == 1)
    {
      v27 = *((_QWORD *)v26 + 1);
      *((_QWORD *)v26 + 1) = 0;
      if (v27)
      {
        do
        {
          v28 = __ldaxr((unsigned int *)v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, (unsigned int *)v27));
        if (!v29)
        {
          v36 = v26;
          v37 = (WTF *)v27;
          atomic_store(1u, (unsigned int *)v27);
          v35 = *(WTF **)(v27 + 40);
          if (v35)
          {
            *(_QWORD *)(v27 + 40) = 0;
            *(_DWORD *)(v27 + 48) = 0;
            WTF::fastFree(v35, v25);
          }
          WTF::fastFree(v37, v25);
          v26 = v36;
        }
      }
      WTF::fastFree(v26, v25);
    }
    else
    {
      --*(_DWORD *)v26;
    }
  }
  if (!v43)
    return 10;
  v31 = (WTF::StringImpl *)v41;
  LOBYTE(v39) = (_BYTE)v41;
  v32 = v42;
  v42 = 0;
  v40 = v32;
  if (!*((_QWORD *)v9 + 2))
  {
    v33.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v41, (JSC::JSGlobalObject *)&v40);
    JSC::VM::throwException(v9, this, v33);
    v32 = v40;
  }
  v40 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 2)
      WTF::StringImpl::destroy(v32, v31);
    else
      *(_DWORD *)v32 -= 2;
  }
  if (!v43)
    return 0;
  v34 = v42;
  v42 = 0;
  if (!v34)
    return 0;
  if (*(_DWORD *)v34 == 2)
  {
    WTF::StringImpl::destroy(v34, v31);
    return 0;
  }
  result = 0;
  *(_DWORD *)v34 -= 2;
  return result;
}

unint64_t WebCore::jsWebCodecsVideoDecoderPrototypeFunction_flush(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  JSC::VM *v23;
  uint64_t v24;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  JSValue v28;
  WTF::StringImpl *v29;
  objc_class *v30;
  _DWORD *v31;
  WebCore::DOMGuardedObject *v32;
  char v33;
  WTF::StringImpl *v34;
  int v35[2];
  WTF::StringImpl *v36;
  char v37;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x195076450);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v32 = v15;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_32;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSWebCodecsVideoDecoder::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSWebCodecsVideoDecoder::s_info && v20 != 0);
  }
  if (!v19)
  {
LABEL_32:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"VideoDecoder", "flush", v16);
  }
  else
  {
    v23 = (JSC::VM *)*((_QWORD *)this + 7);
    WebCore::WebCodecsVideoDecoder::flush(*(_QWORD *)(v17 + 24) - 32, (uint64_t *)&v32, v35);
    if (v37)
    {
      v26 = (WTF::StringImpl *)LOBYTE(v35[0]);
      v33 = v35[0];
      v27 = v36;
      v36 = 0;
      v34 = v27;
      if (!*((_QWORD *)v23 + 2))
      {
        v28.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v35[0]), (JSC::JSGlobalObject *)&v34);
        JSC::VM::throwException(v23, this, v28);
        v27 = v34;
      }
      v34 = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, v26);
        else
          *(_DWORD *)v27 -= 2;
      }
      if (v37)
      {
        v29 = v36;
        v36 = 0;
        if (v29)
        {
          if (*(_DWORD *)v29 == 2)
            WTF::StringImpl::destroy(v29, v26);
          else
            *(_DWORD *)v29 -= 2;
        }
      }
    }
  }
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
  v24 = *(_QWORD *)(v10 + 16);
  if (v24)
  {
    if (*(_QWORD *)(v10 + 24) != v24)
    {
      v30 = *(objc_class **)(v24 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, (WebCore::DOMGuardedObject **)v35);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>(*(uint64_t *)v35, v30, 0);
      v31 = *(_DWORD **)v35;
      *(_QWORD *)v35 = 0;
      if (v31)
      {
        if (v31[4] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 16))(v31);
        else
          --v31[4];
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

uint64_t WebCore::jsWebCodecsVideoDecoderPrototypeFunction_reset(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSValue v17;
  WTF::StringImpl *v18;
  JSC::VM *v19;
  int v20[2];
  WTF::StringImpl *v21;
  char v22;
  uint64_t v23;
  WTF::StringImpl *v24;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v19 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v19, "VideoDecoder", "reset");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebCodecsVideoDecoder::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebCodecsVideoDecoder::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v19, "VideoDecoder", "reset");
  v11 = *(_QWORD *)(v4 + 24) - 32;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = *(WTF::StringImpl **)v20;
  LOBYTE(v23) = 16;
  v24 = *(WTF::StringImpl **)v20;
  WebCore::WebCodecsVideoDecoder::resetDecoder(v11, &v23, (uint64_t)v20);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v13);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (!v22)
    return 10;
  v15 = (WTF::StringImpl *)LOBYTE(v20[0]);
  LOBYTE(v23) = v20[0];
  v16 = v21;
  v21 = 0;
  v24 = v16;
  if (!*((_QWORD *)v5 + 2))
  {
    v17.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v20[0]), (JSC::JSGlobalObject *)&v24);
    JSC::VM::throwException(v5, this, v17);
    v16 = v24;
  }
  v24 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (v22)
  {
    v18 = v21;
    v21 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 != 2)
      {
        result = 0;
        *(_DWORD *)v18 -= 2;
        return result;
      }
      WTF::StringImpl::destroy(v18, v15);
    }
  }
  return 0;
}

uint64_t WebCore::jsWebCodecsVideoDecoderPrototypeFunction_close(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSValue v17;
  JSC::VM *v18;
  int v19;
  WTF::StringImpl *v20;
  char v21;
  unsigned __int8 v22[8];
  WTF::StringImpl *v23;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v18 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v18, "VideoDecoder", "close");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebCodecsVideoDecoder::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebCodecsVideoDecoder::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v18, "VideoDecoder", "close");
  v11 = *(_QWORD *)(v4 + 24) - 32;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v22[0] = 16;
  WebCore::WebCodecsVideoDecoder::closeDecoder(v11, v22, (uint64_t)&v19);
  v13 = v23;
  v23 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (!v21)
    return 10;
  v15 = (WTF::StringImpl *)v19;
  v22[0] = v19;
  v16 = v20;
  v23 = v20;
  if (!*((_QWORD *)v5 + 2))
  {
    v17.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v19, (JSC::JSGlobalObject *)&v23);
    JSC::VM::throwException(v5, this, v17);
    v16 = v23;
  }
  v23 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  return 0;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore42JSWebCodecsEncodedVideoChunkOutputCallbackENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore21WebCodecsVideoEncoder4InitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  _DWORD *result;

  v3 = *(_DWORD **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  if (v3)
  {
    if (v3[4] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 16))(v3);
    else
      --v3[4];
  }
  result = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

unint64_t WebCore::jsWebCodecsVideoEncoderConstructorFunction_isConfigSupported(WebCore *this, JSC::JSCell **a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  JSC::VM *v25;
  JSValue v26;
  objc_class *v27;
  WebCore::DOMGuardedObject *v28;
  WebCore::DOMGuardedObject *v29;
  WebCore::DOMGuardedObject *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  WTF::StringImpl *v37;
  _BYTE v38[13];
  unsigned int v39;
  WTF::StringImpl *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  _QWORD v48[2];

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x195076B8CLL);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v29 = v15;
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25 = (JSC::VM *)*((_QWORD *)this + 7);
    v26.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v25, this, v26);
  }
  else
  {
    v17 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
    if (v17)
    {
      v18 = v17;
      WebCore::convertDictionary<WebCore::WebCodecsVideoEncoderConfig>((uint64_t)&v30, this, a2[6]);
      v19 = v39;
      if (v39)
      {
        if (v39 == -1)
        {
LABEL_24:
          v14 = v29;
          v29 = 0;
          if (!v14)
            goto LABEL_27;
          goto LABEL_25;
        }
      }
      else
      {
        v43 = v33;
        v44 = v34;
        v45 = v35;
        v40 = v30;
        v46 = v36;
        v47 = v37;
        v41 = v31;
        v42 = v32;
        v30 = 0;
        v37 = 0;
        *(_QWORD *)((char *)v48 + 5) = *(_QWORD *)&v38[5];
        v48[0] = *(_QWORD *)v38;
        WebCore::WebCodecsVideoEncoder::isConfigSupported(v18, (uint64_t)&v40, (uint64_t *)&v29);
        v21 = v47;
        v47 = 0;
        if (v21)
        {
          if (*(_DWORD *)v21 == 2)
            WTF::StringImpl::destroy(v21, v20);
          else
            *(_DWORD *)v21 -= 2;
        }
        v22 = v40;
        v40 = 0;
        if (v22)
        {
          if (*(_DWORD *)v22 == 2)
            WTF::StringImpl::destroy(v22, v20);
          else
            *(_DWORD *)v22 -= 2;
        }
      }
      ((void (*)(WTF::StringImpl **, WebCore::DOMGuardedObject **))off_1E3321B68[v19])(&v40, &v30);
      goto LABEL_24;
    }
  }
  v29 = 0;
LABEL_25:
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
LABEL_27:
  v23 = *(_QWORD *)(v10 + 16);
  if (v23)
  {
    if (*(_QWORD *)(v10 + 24) != v23)
    {
      v27 = *(objc_class **)(v23 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v30);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v30, v27, 0);
      v28 = v30;
      v30 = 0;
      if (v28)
      {
        if (*((_DWORD *)v28 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v28 + 16))(v28);
        else
          --*((_DWORD *)v28 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore27WebCodecsVideoEncoderConfigENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSC_1EJS9_SA_EEEEEEDcSE_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *result;

  v3 = (WTF::StringImpl *)*((_QWORD *)a2 + 12);
  *((_QWORD *)a2 + 12) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  result = *(WTF::StringImpl **)a2;
  *(_QWORD *)a2 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t WebCore::jsWebCodecsVideoEncoderPrototypeFunction_configure(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  uint64_t v19;
  uint64_t result;
  JSValue v21;
  WTF::StringImpl *v22;
  WTF::StringImpl *v23;
  JSValue v24;
  WTF::StringImpl *v25;
  JSC::VM *v26;
  WTF::StringImpl *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  _BYTE v35[13];
  unsigned int v36;
  int v37;
  WTF::StringImpl *v38;
  char v39;
  WTF::StringImpl *v40;
  _OWORD v41[5];
  uint64_t v42;
  WTF::StringImpl *v43;
  _QWORD v44[2];

  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v26 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "VideoEncoder", "configure");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebCodecsVideoEncoder::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebCodecsVideoEncoder::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v26, "VideoEncoder", "configure");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v21);
  }
  v12 = *(_QWORD *)(v5 + 24);
  v13 = WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v13)
    return 10;
  v14 = v13;
  WebCore::convertDictionary<WebCore::WebCodecsVideoEncoderConfig>((uint64_t)&v27, this, *((JSC::JSCell **)a2 + 6));
  v15 = v36;
  if (!v36)
  {
    v41[2] = v30;
    v41[3] = v31;
    v41[4] = v32;
    v40 = v27;
    v42 = v33;
    v43 = v34;
    v41[0] = v28;
    v41[1] = v29;
    v27 = 0;
    v34 = 0;
    *(_QWORD *)((char *)v44 + 5) = *(_QWORD *)&v35[5];
    v44[0] = *(_QWORD *)v35;
    WebCore::WebCodecsVideoEncoder::configure(v12 - 32, v14, (uint64_t)&v40, (uint64_t)&v37);
    v17 = v43;
    v43 = 0;
    if (v17)
    {
      if (*(_DWORD *)v17 == 2)
        WTF::StringImpl::destroy(v17, v16);
      else
        *(_DWORD *)v17 -= 2;
    }
    v18 = v40;
    v40 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v16);
      else
        *(_DWORD *)v18 -= 2;
    }
    if (!v39)
    {
      v19 = 10;
LABEL_23:
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3321B68[v15])(&v40, &v27);
      return v19;
    }
    v22 = (WTF::StringImpl *)v37;
    LOBYTE(v40) = v37;
    v23 = v38;
    v38 = 0;
    *(_QWORD *)&v41[0] = v23;
    if (!*((_QWORD *)v4 + 2))
    {
      v24.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v37, (JSC::JSGlobalObject *)v41);
      JSC::VM::throwException(v4, this, v24);
      v23 = *(WTF::StringImpl **)&v41[0];
    }
    *(_QWORD *)&v41[0] = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v22);
      else
        *(_DWORD *)v23 -= 2;
    }
    if (v39)
    {
      v25 = v38;
      v38 = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 != 2)
        {
          v19 = 0;
          *(_DWORD *)v25 -= 2;
          goto LABEL_23;
        }
        WTF::StringImpl::destroy(v25, v22);
      }
    }
    v19 = 0;
    goto LABEL_23;
  }
  v19 = 0;
  result = 0;
  if (v36 != -1)
    goto LABEL_23;
  return result;
}

uint64_t WebCore::jsWebCodecsVideoEncoderPrototypeFunction_encode(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t result;
  _DWORD *v25;
  JSC::JSCell *v26;
  uint64_t Object;
  JSC::Structure *v28;
  WTF::StringImpl *v29;
  unint64_t v30;
  BOOL v31;
  JSC::VM *v32;
  double v33;
  JSValue v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  JSValue v37;
  WTF::StringImpl *v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  int *v42;
  int v43;
  uint64_t v44;
  _DWORD *v45;
  WTF::StringImpl *v46;
  int v47[2];
  WTF::StringImpl *v48;
  char v49;
  BOOL v50;

  v9 = *((_QWORD *)this + 7);
  v44 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v44, "VideoEncoder", "encode");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebCodecsVideoEncoder::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebCodecsVideoEncoder::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v44, "VideoEncoder", "encode");
  v16 = *((int *)a2 + 8);
  if ((_DWORD)v16 == 1)
  {
    v34.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException((JSC::VM *)v9, this, v34);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  *(_QWORD *)v47 = v9;
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSWebCodecsVideoFrame::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSWebCodecsVideoFrame::s_info && v21 != 0);
  }
  if (!v20 || (v25 = *(_DWORD **)(v18 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v47, 0, "frame", 6, "VideoEncoder", 13, a8, "encode", 7, "WebCodecsVideoFrame", 20);
    return 0;
  }
  if ((unint64_t)(v16 - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v31 = 0;
    goto LABEL_42;
  }
  v26 = (JSC::JSCell *)*((_QWORD *)a2 + 7);
  v45 = (_DWORD *)v9;
  if (((unint64_t)v26 & 0xFFFFFFFFFFFFFFF7) == 2)
    goto LABEL_35;
  if (((unint64_t)v26 & 0xFFFE000000000002) != 0 || (Object = JSC::JSCell::getObject(v26)) == 0)
  {
    JSC::throwTypeError();
    return 0;
  }
  v28 = (JSC::Structure *)Object;
  WTF::AtomStringImpl::addLiteral();
  v30 = JSC::JSObject::get(v28, this, *(unint64_t *)v47);
  if (*(_QWORD *)v47)
  {
    if (**(_DWORD **)v47 == 2)
      WTF::StringImpl::destroy(*(WTF::StringImpl **)v47, v29);
    else
      **(_DWORD **)v47 -= 2;
  }
  if (*(_DWORD *)(v9 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v9) & 1) != 0)
    return 0;
  if (v30 == 10)
  {
LABEL_35:
    v31 = 0;
    goto LABEL_42;
  }
  v32 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v30 >= 0xFFFE000000000000)
  {
    v39 = (_DWORD)v30 == 0;
    goto LABEL_82;
  }
  *(_QWORD *)&v33 = v30 - 0x2000000000000;
  if (v30 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v30 & 0xFFFE000000000002) != 0)
    {
      v31 = v30 == 7;
      goto LABEL_41;
    }
    v40 = *(unsigned __int8 *)(v30 + 5);
    if (v40 == 3)
    {
      v43 = *(_DWORD *)(v30 + 8);
    }
    else
    {
      if (v40 != 2)
      {
        if ((*(_BYTE *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE) + 0xA) & 1) == 0)
        {
          v31 = 1;
          goto LABEL_41;
        }
        v39 = *(_QWORD *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
        goto LABEL_82;
      }
      v41 = *(_QWORD *)(v30 + 8);
      if ((v41 & 1) != 0)
        v42 = (int *)(v30 + 16);
      else
        v42 = (int *)(v41 + 4);
      v43 = *v42;
    }
    v39 = v43 == 0;
LABEL_82:
    v31 = !v39;
    goto LABEL_41;
  }
  v31 = v33 > 0.0 || v33 < 0.0;
LABEL_41:
  if (*((_DWORD *)v32 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v32))
    return 0;
LABEL_42:
  ++v25[4];
  v45 = v25;
  v50 = v31;
  WebCore::WebCodecsVideoEncoder::encode(v17 - 32, (uint64_t)&v45, (char *)&v50, v47);
  if (v25[4] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 16))(v25);
  else
    --v25[4];
  if (!v49)
    return 10;
  v35 = (WTF::StringImpl *)LOBYTE(v47[0]);
  LOBYTE(v45) = v47[0];
  v36 = v48;
  v48 = 0;
  v46 = v36;
  if (!*(_QWORD *)(v9 + 16))
  {
    v37.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v47[0]), (JSC::JSGlobalObject *)&v46);
    JSC::VM::throwException((JSC::VM *)v9, this, v37);
    v36 = v46;
  }
  v46 = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, v35);
    else
      *(_DWORD *)v36 -= 2;
  }
  if (!v49)
    return 0;
  v38 = v48;
  v48 = 0;
  if (!v38)
    return 0;
  if (*(_DWORD *)v38 == 2)
  {
    WTF::StringImpl::destroy(v38, v35);
    return 0;
  }
  result = 0;
  *(_DWORD *)v38 -= 2;
  return result;
}

unint64_t WebCore::jsWebCodecsVideoEncoderPrototypeFunction_flush(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  objc_class *v25;
  WebCore::DOMGuardedObject *v26;
  WebCore::DOMGuardedObject *v27;

  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x19507755CLL);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v27 = v15;
  v17 = *((_QWORD *)a2 + 5);
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_32;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSWebCodecsVideoEncoder::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSWebCodecsVideoEncoder::s_info && v20 != 0);
  }
  if (!v19)
LABEL_32:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"VideoEncoder", "flush", v16);
  else
    WebCore::WebCodecsVideoEncoder::flush(*(_QWORD *)(v17 + 24) - 32, (uint64_t *)&v27);
  if (*((_DWORD *)v14 + 4) == 1)
    (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
  else
    --*((_DWORD *)v14 + 4);
  v23 = *(_QWORD *)(v10 + 16);
  if (v23)
  {
    if (*(_QWORD *)(v10 + 24) != v23)
    {
      v25 = *(objc_class **)(v23 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v27);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v27, v25, 0);
      v26 = v27;
      v27 = 0;
      if (v26)
      {
        if (*((_DWORD *)v26 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v26 + 16))(v26);
        else
          --*((_DWORD *)v26 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

uint64_t WebCore::jsWebCodecsVideoEncoderPrototypeFunction_reset(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t result;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSValue v17;
  WTF::StringImpl *v18;
  JSC::VM *v19;
  int v20[2];
  WTF::StringImpl *v21;
  char v22;
  uint64_t v23;
  WTF::StringImpl *v24;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v19 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v19, "VideoEncoder", "reset");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebCodecsVideoEncoder::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebCodecsVideoEncoder::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v19, "VideoEncoder", "reset");
  v11 = *(_QWORD *)(v4 + 24) - 32;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v12 = *(WTF::StringImpl **)v20;
  LOBYTE(v23) = 16;
  v24 = *(WTF::StringImpl **)v20;
  WebCore::WebCodecsVideoEncoder::resetEncoder(v11, &v23, (uint64_t)v20);
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, v13);
    else
      *(_DWORD *)v12 -= 2;
  }
  if (!v22)
    return 10;
  v15 = (WTF::StringImpl *)LOBYTE(v20[0]);
  LOBYTE(v23) = v20[0];
  v16 = v21;
  v21 = 0;
  v24 = v16;
  if (!*((_QWORD *)v5 + 2))
  {
    v17.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v20[0]), (JSC::JSGlobalObject *)&v24);
    JSC::VM::throwException(v5, this, v17);
    v16 = v24;
  }
  v24 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  if (v22)
  {
    v18 = v21;
    v21 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 != 2)
      {
        result = 0;
        *(_DWORD *)v18 -= 2;
        return result;
      }
      WTF::StringImpl::destroy(v18, v15);
    }
  }
  return 0;
}

uint64_t WebCore::jsWebCodecsVideoEncoderPrototypeFunction_close(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  JSValue v17;
  JSC::VM *v18;
  int v19;
  WTF::StringImpl *v20;
  char v21;
  unsigned __int8 v22[8];
  WTF::StringImpl *v23;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v18 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v18, "VideoEncoder", "close");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebCodecsVideoEncoder::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebCodecsVideoEncoder::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v18, "VideoEncoder", "close");
  v11 = *(_QWORD *)(v4 + 24) - 32;
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v22[0] = 16;
  WebCore::WebCodecsVideoEncoder::closeEncoder(v11, v22, (uint64_t)&v19);
  v13 = v23;
  v23 = 0;
  if (v13)
  {
    if (*(_DWORD *)v13 == 2)
      WTF::StringImpl::destroy(v13, v12);
    else
      *(_DWORD *)v13 -= 2;
  }
  if (!v21)
    return 10;
  v15 = (WTF::StringImpl *)v19;
  v22[0] = v19;
  v16 = v20;
  v23 = v20;
  if (!*((_QWORD *)v5 + 2))
  {
    v17.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)v19, (JSC::JSGlobalObject *)&v23);
    JSC::VM::throwException(v5, this, v17);
    v16 = v23;
  }
  v23 = 0;
  if (v16)
  {
    if (*(_DWORD *)v16 == 2)
      WTF::StringImpl::destroy(v16, v15);
    else
      *(_DWORD *)v16 -= 2;
  }
  return 0;
}

WTF *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6VectorIN7WebCore11PlaneLayoutELm0ENS8_15CrashOnOverflowELm16ENS8_10FastMallocEEENSA_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSE_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, WTF **a2)
{
  WTF *result;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
    *((_DWORD *)a2 + 2) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

unint64_t WebCore::toJSNewlyCreated<WebCore::IDLInterface<WebCore::WebCodecsVideoFrame>,WebCore::ExceptionOr<WTF::Ref<WebCore::WebCodecsVideoFrame,WTF::RawPtrTraits<WebCore::WebCodecsVideoFrame>,WTF::DefaultRefDerefTraits<WebCore::WebCodecsVideoFrame>>>>(JSC *this, uint64_t a2, JSC::VM **a3, unsigned __int8 *a4)
{
  int v4;
  WTF *v5;
  unint64_t v6;
  JSC::JSGlobalObject *v10;
  WTF::StringImpl *v11;
  JSValue v12;
  uint64_t v13;
  WTF *v14;
  WTF::StringImpl *v15;

  v4 = *((_DWORD *)a4 + 4);
  if (!v4)
  {
    v5 = *(WTF **)a4;
    *(_QWORD *)a4 = 0;
    v14 = v5;
    if (*(uint64_t (***)(WebCore::ContextDestructionObserver *__hidden))v5 != &off_1E336D8D0)
    {
      __break(0xC471u);
      JUMPOUT(0x195077A4CLL);
    }
    v6 = WebCore::createWrapper<WebCore::WebCodecsVideoFrame,WebCore::WebCodecsVideoFrame>(a2, &v14);
    if (v14)
    {
      if (*((_DWORD *)v14 + 4) == 1)
        (*(void (**)(void))(*(_QWORD *)v14 + 16))();
      else
        --*((_DWORD *)v14 + 4);
    }
    return v6;
  }
  if (v4 == 1)
  {
    v10 = (JSC::JSGlobalObject *)*a4;
    LOBYTE(v14) = *a4;
    v11 = (WTF::StringImpl *)*((_QWORD *)a4 + 1);
    *((_QWORD *)a4 + 1) = 0;
    v15 = v11;
    if (!*((_QWORD *)*a3 + 2))
    {
      v12.super.isa = (Class)WebCore::createDOMException(this, v10, (JSC::JSGlobalObject *)&v15);
      JSC::VM::throwException(*a3, this, v12);
      v11 = v15;
    }
    v15 = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 2)
        WTF::StringImpl::destroy(v11, v10);
      else
        *(_DWORD *)v11 -= 2;
    }
    return 0;
  }
  v13 = std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::setSubclassStructureIfNeeded<WebCore::WebCodecsVideoFrame>(v13);
}

JSCell *WebCore::setSubclassStructureIfNeeded<WebCore::WebCodecsVideoFrame>(JSC *a1, uint64_t a2, JSCell *a3)
{
  JSCell *result;
  JSC::JSObject *v7;
  JSC::JSGlobalObject *v9;
  JSC::VM *v10;
  uint64_t FunctionRealm;
  JSC::Structure *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char **v20;
  int v21;
  JSC::JSObject *v22;
  unint64_t Structure;
  WebCore::JSDOMGlobalObject *v24;
  JSC::Structure *v25;
  JSC::JSCell *v26;
  uint64_t v27;
  unint64_t SubclassStructure;

  result = *(JSCell **)(a2 + 40);
  if (((unint64_t)result & 0xFFFE000000000002) == 0)
  {
    result = (JSCell *)JSC::JSCell::getObject((JSC::JSCell *)result);
    if (result && result != *(JSCell **)(a2 + 24))
    {
      v9 = (JSC::JSGlobalObject *)result;
      v10 = (JSC::VM *)*((_QWORD *)a1 + 7);
      FunctionRealm = JSC::getFunctionRealm(a1, (JSC::JSGlobalObject *)result, v7);
      v13 = FunctionRealm;
      if (!*((_DWORD *)v10 + 20)
        || (result = (JSCell *)JSC::VM::hasExceptionsAfterHandlingTraps(v10), (result & 1) == 0))
      {
        v14 = *(_QWORD *)(v13 + 3296);
        if (v14)
        {
          v15 = *(_DWORD *)(v14 - 8);
          v16 = ((unint64_t)&WebCore::JSWebCodecsVideoFrame::s_info
               + ~((_QWORD)&WebCore::JSWebCodecsVideoFrame::s_info << 32)) ^ (((unint64_t)&WebCore::JSWebCodecsVideoFrame::s_info
                                                                             + ~((_QWORD)&WebCore::JSWebCodecsVideoFrame::s_info << 32)) >> 22);
          v17 = 9 * ((v16 + ~(v16 << 13)) ^ ((v16 + ~(v16 << 13)) >> 8));
          v18 = (v17 ^ (v17 >> 15)) + ~((v17 ^ (v17 >> 15)) << 27);
          v19 = v15 & ((v18 >> 31) ^ v18);
          v20 = *(char ***)(v14 + 16 * v19);
          if (v20 == &WebCore::JSWebCodecsVideoFrame::s_info)
          {
LABEL_14:
            v22 = *(JSC::JSObject **)(v14 + 16 * v19 + 8);
            if (v22)
            {
LABEL_16:
              SubclassStructure = JSC::InternalFunction::createSubclassStructure(a1, v9, v22, v12);
              if (!*((_DWORD *)v10 + 20))
                return JSC::JSObject::setStructure(a3, v10, SubclassStructure);
              result = (JSCell *)JSC::VM::hasExceptionsAfterHandlingTraps(v10);
              if ((result & 1) == 0)
                return JSC::JSObject::setStructure(a3, v10, SubclassStructure);
              return result;
            }
          }
          else
          {
            v21 = 1;
            while (v20)
            {
              v19 = ((_DWORD)v19 + v21) & v15;
              v20 = *(char ***)(v14 + 16 * v19);
              ++v21;
              if (v20 == &WebCore::JSWebCodecsVideoFrame::s_info)
                goto LABEL_14;
            }
          }
        }
        Structure = WebCore::JSWebCodecsVideoFramePrototype::createStructure((uint64_t *)v10, v13, *(JSC::JSCell **)(v13 + 656));
        *(_DWORD *)(Structure + 16) |= 0x80000u;
        v26 = (JSC::JSCell *)WebCore::JSWebCodecsVideoFramePrototype::create(v10, Structure, v24, v25);
        v27 = WebCore::JSWebCodecsVideoFrame::createStructure((uint64_t *)v10, v13, v26);
        v22 = (JSC::JSObject *)WebCore::cacheDOMStructure((JSCell *)v13, v27, (uint64_t)&WebCore::JSWebCodecsVideoFrame::s_info);
        goto LABEL_16;
      }
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16HTMLImageElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15SVGImageElementENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_11ImageBitmapENSC_ISP_EENSE_ISP_EEEENS9_INSA_18CSSStyleImageValueENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_16HTMLVideoElementENSC_IS11_EENSE_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS16_1EJSG_SK_SO_SS_SW_S10_S14_EEEEEEDcS18_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16HTMLImageElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15SVGImageElementENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_11ImageBitmapENSC_ISP_EENSE_ISP_EEEENS9_INSA_18CSSStyleImageValueENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_16HTMLVideoElementENSC_IS11_EENSE_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS16_1EJSG_SK_SO_SS_SW_S10_S14_EEEEEEDcS18_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16HTMLImageElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15SVGImageElementENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_11ImageBitmapENSC_ISP_EENSE_ISP_EEEENS9_INSA_18CSSStyleImageValueENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_16HTMLVideoElementENSC_IS11_EENSE_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS16_1EJSG_SK_SO_SS_SW_S10_S14_EEEEEEDcS18_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16HTMLImageElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15SVGImageElementENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_11ImageBitmapENSC_ISP_EENSE_ISP_EEEENS9_INSA_18CSSStyleImageValueENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_16HTMLVideoElementENSC_IS11_EENSE_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS16_1EJSG_SK_SO_SS_SW_S10_S14_EEEEEEDcS18_DpT0_(uint64_t a1, bmalloc::api **a2)
{
  bmalloc::api *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t result;
  uint64_t v12;

  v2 = *a2;
  *a2 = 0;
  if (!v2)
    return result;
  if (*((_DWORD *)v2 + 2) != 1)
  {
    --*((_DWORD *)v2 + 2);
    return result;
  }
  v3 = *((_QWORD *)v2 + 2);
  *((_QWORD *)v2 + 2) = 0;
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (__ldaxr((unsigned __int8 *)v4))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v4))
    {
      goto LABEL_10;
    }
    MEMORY[0x19AEA534C](v4);
LABEL_10:
    v6 = *(_QWORD *)(v4 + 8);
    v7 = v6 - 1;
    *(_QWORD *)(v4 + 8) = v6 - 1;
    if (v6 == 1)
    {
      v12 = *(_QWORD *)(v4 + 16);
      v8 = *(_QWORD *)(v4 + 24);
      *(_QWORD *)(v4 + 24) = 0;
      v9 = v12 != 0;
    }
    else
    {
      v8 = 0;
      v9 = 1;
    }
    v10 = __ldxr((unsigned __int8 *)v4);
    if (v10 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v4))
      {
LABEL_17:
        if (!v7)
        {
          if (v8)
            (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
          if (!v9)
            WTF::fastFree((WTF *)v4, a2);
        }
        goto LABEL_22;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    goto LABEL_17;
  }
LABEL_22:
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(*(_QWORD *)v2 + 8) = 3;
    *(_QWORD *)v2 = 0;
  }
  return bmalloc::api::isoDeallocate(v2, a2);
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16HTMLImageElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15SVGImageElementENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_11ImageBitmapENSC_ISP_EENSE_ISP_EEEENS9_INSA_18CSSStyleImageValueENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_16HTMLVideoElementENSC_IS11_EENSE_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS16_1EJSG_SK_SO_SS_SW_S10_S14_EEEEEEDcS18_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[2];
  }
  return result;
}

WebCore::OffscreenCanvas *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16HTMLImageElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15SVGImageElementENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_11ImageBitmapENSC_ISP_EENSE_ISP_EEEENS9_INSA_18CSSStyleImageValueENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_16HTMLVideoElementENSC_IS11_EENSE_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS16_1EJSG_SK_SO_SS_SW_S10_S14_EEEEEEDcS18_DpT0_(uint64_t a1, WebCore::OffscreenCanvas **a2)
{
  WebCore::OffscreenCanvas *result;
  bmalloc::api *v3;
  void *v4;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (*((_DWORD *)result + 6) == 1)
    {
      WebCore::OffscreenCanvas::~OffscreenCanvas(result);
      return (WebCore::OffscreenCanvas *)bmalloc::api::isoDeallocate(v3, v4);
    }
    else
    {
      --*((_DWORD *)result + 6);
    }
  }
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16HTMLImageElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15SVGImageElementENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_11ImageBitmapENSC_ISP_EENSE_ISP_EEEENS9_INSA_18CSSStyleImageValueENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_16HTMLVideoElementENSC_IS11_EENSE_IS11_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS16_1EJSG_SK_SO_SS_SW_S10_S14_EEEEEEDcS18_DpT0_(uint64_t a1, unsigned int **a2)
{
  unsigned int *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[6] == 2)
    {
      if ((*((_WORD *)result + 15) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)result, a2);
    }
    else
    {
      result[6] -= 2;
    }
  }
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16HTMLImageElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15SVGImageElementENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_11ImageBitmapENSC_ISP_EENSE_ISP_EEEENS9_INSA_18CSSStyleImageValueENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_16HTMLVideoElementENSC_IS11_EENSE_IS11_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS15_LNS0_6_TraitE1EEEEEvRS16_OT_EUlRS1C_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEEOS1K_EEEDcS1C_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16HTMLImageElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15SVGImageElementENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_11ImageBitmapENSC_ISP_EENSE_ISP_EEEENS9_INSA_18CSSStyleImageValueENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_16HTMLVideoElementENSC_IS11_EENSE_IS11_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS15_LNS0_6_TraitE1EEEEEvRS16_OT_EUlRS1C_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEEOS1K_EEEDcS1C_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16HTMLImageElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15SVGImageElementENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_11ImageBitmapENSC_ISP_EENSE_ISP_EEEENS9_INSA_18CSSStyleImageValueENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_16HTMLVideoElementENSC_IS11_EENSE_IS11_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS15_LNS0_6_TraitE1EEEEEvRS16_OT_EUlRS1C_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEEOS1K_EEEDcS1C_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16HTMLImageElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15SVGImageElementENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_11ImageBitmapENSC_ISP_EENSE_ISP_EEEENS9_INSA_18CSSStyleImageValueENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_16HTMLVideoElementENSC_IS11_EENSE_IS11_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS15_LNS0_6_TraitE1EEEEEvRS16_OT_EUlRS1C_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEEOS1K_EEEDcS1C_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16HTMLImageElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15SVGImageElementENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_11ImageBitmapENSC_ISP_EENSE_ISP_EEEENS9_INSA_18CSSStyleImageValueENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_16HTMLVideoElementENSC_IS11_EENSE_IS11_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS15_LNS0_6_TraitE1EEEEEvRS16_OT_EUlRS1C_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEEOS1K_EEEDcS1C_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16HTMLImageElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15SVGImageElementENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_11ImageBitmapENSC_ISP_EENSE_ISP_EEEENS9_INSA_18CSSStyleImageValueENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_16HTMLVideoElementENSC_IS11_EENSE_IS11_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS15_LNS0_6_TraitE1EEEEEvRS16_OT_EUlRS1C_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEEOS1K_EEEDcS1C_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF6RefPtrIN7WebCore16HTMLImageElementENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_15SVGImageElementENSC_ISH_EENSE_ISH_EEEENS9_INSA_17HTMLCanvasElementENSC_ISL_EENSE_ISL_EEEENS9_INSA_11ImageBitmapENSC_ISP_EENSE_ISP_EEEENS9_INSA_18CSSStyleImageValueENSC_IST_EENSE_IST_EEEENS9_INSA_15OffscreenCanvasENSC_ISX_EENSE_ISX_EEEENS9_INSA_16HTMLVideoElementENSC_IS11_EENSE_IS11_EEEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorIS15_LNS0_6_TraitE1EEEEEvRS16_OT_EUlRS1C_OT0_E_JRNS0_6__baseILS19_1EJSG_SK_SO_SS_SW_S10_S14_EEEOS1K_EEEDcS1C_DpT0_(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a3;
  *a3 = 0;
  *a2 = v3;
}

uint64_t WebCore::JSWebCodecsVideoFrame::createStructure(uint64_t *a1, uint64_t a2, JSC::JSCell *a3)
{
  uint64_t *v4;
  JSC::JSObject *Object;
  uint64_t SlowCase;
  uint64_t result;
  unint64_t v8;

  v4 = a1 + 5017;
  if (((unint64_t)a3 & 0xFFFE000000000002) == 0)
  {
    Object = (JSC::JSObject *)JSC::JSCell::getObject(a3);
    if (Object)
      JSC::JSObject::didBecomePrototype(Object, (JSC::VM *)a1);
  }
  SlowCase = *v4;
  if (*v4 < (unint64_t)v4[1])
    goto LABEL_5;
  SlowCase = v4[2];
  if ((SlowCase & 1) == 0)
  {
    v8 = *(_QWORD *)(SlowCase + 8) ^ v4[3];
    v4[1] = SlowCase + HIDWORD(v8);
    v4[2] = SlowCase + (int)v8;
LABEL_5:
    *v4 = SlowCase + 128;
    goto LABEL_6;
  }
  JSC::sanitizeStackForVM();
  SlowCase = JSC::LocalAllocator::allocateSlowCase();
LABEL_6:
  *(_DWORD *)SlowCase = 0;
  result = MEMORY[0x19AEA4278]();
  if (*((_BYTE *)a1 + 755))
    __dmb(0xAu);
  return result;
}

_DWORD *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore19WebCodecsVideoFrameENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, _DWORD **a2)
{
  _DWORD *result;

  result = *a2;
  *a2 = 0;
  if (result)
  {
    if (result[4] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 16))(result);
    else
      --result[4];
  }
  return result;
}

WTF::StringImpl *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore19WebCodecsVideoFrameENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENSA_9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSJ_1EJSG_SH_EEEEEEDcSL_DpT0_(uint64_t a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *result;

  result = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      return (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJNS_7variantIJN3WTF6RefPtrIN7WebCore16HTMLImageElementENS9_12RawPtrTraitsISC_EENS9_21DefaultRefDerefTraitsISC_EEEENSA_INSB_15SVGImageElementENSD_ISI_EENSF_ISI_EEEENSA_INSB_17HTMLCanvasElementENSD_ISM_EENSF_ISM_EEEENSA_INSB_11ImageBitmapENSD_ISQ_EENSF_ISQ_EEEENSA_INSB_18CSSStyleImageValueENSD_ISU_EENSF_ISU_EEEENSA_INSB_15OffscreenCanvasENSD_ISY_EENSF_ISY_EEEENSA_INSB_16HTMLVideoElementENSD_IS12_EENSF_IS12_EEEEEEENSB_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILS19_1EJS16_S17_EEEEEEDcS1B_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  char v5;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_1E3321CF0[v3])(&v5, a2);
  *(_DWORD *)(a2 + 8) = -1;
  return result;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore19WebCodecsVideoFrame10BufferInitENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF *v2;

  if (*(_BYTE *)(a2 + 64))
  {
    v2 = *(WTF **)(a2 + 48);
    if (v2)
    {
      *(_QWORD *)(a2 + 48) = 0;
      *(_DWORD *)(a2 + 56) = 0;
      WTF::fastFree(v2, (void *)a2);
    }
  }
}

_BYTE *WebCore::jsWebCodecsVideoFramePrototypeFunction_allocationSize(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, double a4, __n128 a5)
{
  JSC::VM *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  WTF::StringImpl *v20;
  unint64_t v21;
  _BYTE *result;
  WTF::StringImpl *v23;
  JSValue v24;
  WebCore *v25;
  JSC::JSGlobalObject *v26;
  JSC::CallFrame *v27;
  JSC::VM *v28;
  _OWORD v29[2];
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  char v33;
  int v34[2];
  WTF::StringImpl *v35;
  int v36;
  _BYTE v37[8];
  WTF::StringImpl *v38;
  _BYTE v39[8];
  _OWORD v40[2];
  uint64_t v41;
  WTF *v42;
  uint64_t v43;
  unsigned __int8 v44;
  unsigned int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v6 = (JSC::VM *)*((_QWORD *)this + 7);
  v28 = v6;
  v7 = *((_QWORD *)a2 + 5);
  if ((v7 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "VideoFrame", "allocationSize");
  v8 = *(unsigned int *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE) + 0x4C);
  v9 = *(_DWORD *)(16 * (*(_DWORD *)v7 & 0xFFFFFFFE) + 0x4C) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &WebCore::JSWebCodecsVideoFrame::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &WebCore::JSWebCodecsVideoFrame::s_info && v10 != 0);
  }
  if (!v9)
    return WebCore::throwThisTypeError((int)this, (int)&v28, "VideoFrame", "allocationSize");
  if (*((_DWORD *)a2 + 8) == 1)
    v13 = 10;
  else
    v13 = *((_QWORD *)a2 + 6);
  v14 = *(_QWORD *)(v7 + 24);
  WebCore::convertDictionary<WebCore::WebCodecsVideoFrame::CopyToOptions>((JSC::JSCell *)v39, this, (JSC::JSCell *)v13, a4, a5);
  v15 = v45;
  if (!v45)
  {
    v29[0] = v40[0];
    v29[1] = v40[1];
    v30 = v41;
    LOBYTE(v31) = 0;
    v33 = 0;
    v16 = v44;
    if (v44)
    {
      v31 = v42;
      v17 = v43;
      v42 = 0;
      v43 = 0;
      v32 = v17;
      v33 = 1;
    }
    WebCore::WebCodecsVideoFrame::allocationSize(v14, (uint64_t)v29, (uint64_t)v34);
    if (v36)
    {
      if (v36 != 1)
      {
        v25 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
        return (_BYTE *)WebCore::jsWebCodecsVideoFramePrototypeFunction_copyTo(v25, v26, v27);
      }
      v20 = (WTF::StringImpl *)LOBYTE(v34[0]);
      v37[0] = v34[0];
      v23 = v35;
      v35 = 0;
      v38 = v23;
      if (!*((_QWORD *)v6 + 2))
      {
        v24.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v34[0]), (JSC::JSGlobalObject *)&v38);
        JSC::VM::throwException(v6, this, v24);
        v23 = v38;
      }
      v38 = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, v20);
        else
          *(_DWORD *)v23 -= 2;
      }
      v18 = 0;
      v21 = 0;
      v19 = v36;
      if (v36 == -1)
        goto LABEL_24;
    }
    else
    {
      if (v34[0] < 0)
        v18 = COERCE__INT64((double)v34[0]) + 0x2000000000000;
      else
        v18 = v34[0] | 0xFFFE000000000000;
      v19 = 0;
    }
    ((void (*)(_BYTE *, int *))off_1E33213B0[v19])(v37, v34);
    v21 = v18;
LABEL_24:
    v36 = -1;
    if (v16)
    {
      if (v31)
        WTF::fastFree(v31, v20);
    }
    goto LABEL_27;
  }
  v21 = 0;
  result = 0;
  if (v45 != -1)
  {
LABEL_27:
    ((void (*)(_OWORD *, _OWORD *))off_1E3321FE8[v15])(v29, v40);
    return (_BYTE *)v21;
  }
  return result;
}

unint64_t WebCore::jsWebCodecsVideoFramePrototypeFunction_copyTo(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v5;
  BOOL v6;
  char **v7;
  BOOL v8;
  uint64_t v10;
  int v11;
  JSC::VM *v12;
  unint64_t v13;
  WebCore::DOMGuardedObject *v14;
  WebCore::DOMGuardedObject *v15;
  JSC::JSGlobalObject *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  double v25;
  __n128 v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t (*v32)();
  uint64_t v33;
  void *v34;
  WebCore::DOMGuardedObject *v35;
  WTF *v36;
  uint64_t v37;
  objc_class *v39;
  WebCore::DOMGuardedObject *v40;
  JSC::VM *v41;
  JSValue v42;
  uint64_t v43;
  WebCore::DOMGuardedObject *v44;
  _OWORD v45[2];
  uint64_t v46;
  WTF *v47;
  uint64_t v48;
  char v49;
  char v50[8];
  int v51;
  char v52[8];
  int v53;
  WebCore::DOMGuardedObject *v54;
  _OWORD v55[2];
  uint64_t v56;
  WTF *v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  char v61[8];
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned int *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C);
  v6 = *(_DWORD *)(16 * (*(_DWORD *)this & 0xFFFFFFFE) + 0x4C) != 0;
  v7 = (char **)(16 * v5);
  if ((_DWORD)v5)
    v8 = v7 == &WebCore::JSDOMGlobalObject::s_info;
  else
    v8 = 1;
  if (!v8)
  {
    do
    {
      v7 = (char **)v7[2];
      v6 = v7 != 0;
    }
    while (v7 != &WebCore::JSDOMGlobalObject::s_info && v7 != 0);
  }
  if (!v6)
  {
    __break(0xC471u);
    JUMPOUT(0x195078730);
  }
  v10 = *((_QWORD *)this + 7);
  v11 = *((_DWORD *)this + 291);
  if (v11)
    v12 = (JSC::VM *)(16 * (v11 & 0xFFFFFFFE));
  else
    v12 = 0;
  v13 = JSC::JSPromise::create(*((JSC::JSPromise **)this + 7), v12, a3);
  v14 = (WebCore::DOMGuardedObject *)WTF::fastMalloc((WTF *)0x30);
  v15 = WebCore::DOMGuardedObject::DOMGuardedObject(v14, (unint64_t)this, v13);
  *(_QWORD *)v15 = &off_1E3226868;
  *((_DWORD *)v15 + 10) = 0;
  *((_BYTE *)v15 + 44) = 0;
  v18 = *((_QWORD *)a2 + 5);
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_60;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSWebCodecsVideoFrame::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSWebCodecsVideoFrame::s_info && v21 != 0);
  }
  if (!v20)
  {
LABEL_60:
    WebCore::rejectPromiseWithThisTypeError(v14, (WebCore::DeferredPromise *)"VideoFrame", "copyTo", v17);
    goto LABEL_53;
  }
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v41 = (JSC::VM *)*((_QWORD *)this + 7);
    v42.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, v16);
    JSC::VM::throwException(v41, this, v42);
LABEL_53:
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
    goto LABEL_55;
  }
  v24 = *(_QWORD *)(v18 + 24);
  WebCore::convert<WebCore::IDLAllowSharedAdaptor<WebCore::IDLUnion<WebCore::IDLArrayBufferView,WebCore::IDLArrayBuffer>>>(*((_QWORD *)a2 + 6), (uint64_t)this, (uint64_t)v61);
  v27 = v64;
  if (v64)
    goto LABEL_50;
  if ((unint64_t)(*((int *)a2 + 8) - 3) > 0xFFFFFFFFFFFFFFFDLL)
    v28 = 10;
  else
    v28 = *((_QWORD *)a2 + 7);
  WebCore::convertDictionary<WebCore::WebCodecsVideoFrame::CopyToOptions>((JSC::JSCell *)&v54, this, (JSC::JSCell *)v28, v25, v26);
  v29 = v60;
  if (v60)
  {
    if (v60 == -1)
      goto LABEL_49;
  }
  else
  {
    if (v64)
      std::__throw_bad_variant_access[abi:sn180100]();
    v43 = v60;
    v30 = v13;
    v50[0] = 0;
    v51 = -1;
    v31 = v63;
    if (v63 == -1)
    {
      v52[0] = 0;
      v53 = -1;
    }
    else
    {
      v32 = off_1E33211A8[v63];
      ((void (*)(_OWORD *, char *, uint64_t *))v32)(v45, v50, &v62);
      v51 = v31;
      v52[0] = 0;
      v53 = -1;
      ((void (*)(_OWORD *, char *, char *))v32)(v45, v52, v50);
      v53 = v31;
    }
    v45[0] = v55[0];
    v45[1] = v55[1];
    v46 = v56;
    LOBYTE(v47) = 0;
    v49 = 0;
    if (v59)
    {
      v47 = v57;
      v33 = v58;
      v57 = 0;
      v58 = 0;
      v48 = v33;
      v49 = 1;
    }
    v44 = v14;
    WebCore::WebCodecsVideoFrame::copyTo(v24, (uint64_t)v52, (uint64_t)v45, (uint64_t *)&v44);
    v35 = v44;
    v44 = 0;
    v13 = v30;
    if (v35)
    {
      if (*((_DWORD *)v35 + 4) == 1)
        (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v35 + 16))(v35);
      else
        --*((_DWORD *)v35 + 4);
    }
    if (v49)
    {
      v36 = v47;
      if (v47)
      {
        v47 = 0;
        LODWORD(v48) = 0;
        WTF::fastFree(v36, v34);
      }
    }
    if (v53 != -1)
      ((void (*)(_OWORD *, char *))off_1E3321198[v53])(v45, v52);
    v53 = -1;
    if (v51 != -1)
      ((void (*)(_OWORD *, char *))off_1E3321198[v51])(v45, v50);
    v14 = 0;
    v29 = v43;
  }
  ((void (*)(_OWORD *, _OWORD *))off_1E3321FE8[v29])(v45, v55);
LABEL_49:
  v27 = v64;
LABEL_50:
  if (v27 != -1)
    ((void (*)(WebCore::DOMGuardedObject **, uint64_t *))off_1E33211C8[v27])(&v54, &v62);
  if (v14)
    goto LABEL_53;
LABEL_55:
  v37 = *(_QWORD *)(v10 + 16);
  if (v37)
  {
    if (*(_QWORD *)(v10 + 24) != v37)
    {
      v39 = *(objc_class **)(v37 + 8);
      JSC::VM::clearException((JSC::VM *)v10);
      WebCore::DeferredPromise::create((unint64_t)this, v13, 0, &v54);
      WebCore::DeferredPromise::reject<WebCore::IDLAny>((uint64_t)v54, v39, 0);
      v40 = v54;
      v54 = 0;
      if (v40)
      {
        if (*((_DWORD *)v40 + 4) == 1)
          (*(void (**)(WebCore::DOMGuardedObject *))(*(_QWORD *)v40 + 16))(v40);
        else
          --*((_DWORD *)v40 + 4);
      }
    }
  }
  if (*(_DWORD *)(v10 + 80) && (JSC::VM::hasExceptionsAfterHandlingTraps((JSC::VM *)v10) & 1) != 0)
    return 10;
  return v13;
}

uint64_t WebCore::jsWebCodecsVideoFramePrototypeFunction_clone(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  JSC::VM *v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  WebCore::WebCodecsVideoFrame *v11;
  WebCore::ScriptExecutionContext *v12;
  uint64_t v13;
  WTF *v14;
  uint64_t v15;
  WTF::StringImpl *v17;
  WTF::StringImpl *v18;
  JSValue v19;
  WebCore *v20;
  JSC::JSGlobalObject *v21;
  JSC::CallFrame *v22;
  JSC::VM *v23;
  int v24[2];
  WTF::StringImpl *v25;
  int v26;
  _BYTE v27[8];
  WTF::StringImpl *v28;

  v4 = *((_QWORD *)a2 + 5);
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v23 = v5;
  if ((v4 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v23, "VideoFrame", "clone");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebCodecsVideoFrame::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebCodecsVideoFrame::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v23, "VideoFrame", "clone");
  v11 = *(WebCore::WebCodecsVideoFrame **)(v4 + 24);
  v12 = (WebCore::ScriptExecutionContext *)WebCore::JSDOMGlobalObject::scriptExecutionContext(this);
  if (!v12)
    return 10;
  v13 = *(_QWORD *)(16 * (*(_DWORD *)v4 & 0xFFFFFFFE) + 0x28);
  WebCore::WebCodecsVideoFrame::clone(v11, v12, (uint64_t)v24);
  if (!v26)
  {
    v14 = *(WTF **)v24;
    *(_QWORD *)v24 = 0;
    v15 = WebCore::wrap<WebCore::WebCodecsVideoFrame>((uint64_t)this, v13, v14);
    if (*((_DWORD *)v14 + 4) == 1)
      (*(void (**)(WTF *))(*(_QWORD *)v14 + 16))(v14);
    else
      --*((_DWORD *)v14 + 4);
LABEL_16:
    if (v26 != -1)
      ((void (*)(_BYTE *, int *))off_1E3321D60[v26])(v27, v24);
    return v15;
  }
  if (v26 == 1)
  {
    v17 = (WTF::StringImpl *)LOBYTE(v24[0]);
    v27[0] = v24[0];
    v18 = v25;
    v25 = 0;
    v28 = v18;
    if (!*((_QWORD *)v5 + 2))
    {
      v19.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v24[0]), (JSC::JSGlobalObject *)&v28);
      JSC::VM::throwException(v5, this, v19);
      v18 = v28;
    }
    v28 = 0;
    if (v18)
    {
      if (*(_DWORD *)v18 == 2)
        WTF::StringImpl::destroy(v18, v17);
      else
        *(_DWORD *)v18 -= 2;
    }
    v15 = 0;
    goto LABEL_16;
  }
  v20 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return WebCore::jsWebCodecsVideoFramePrototypeFunction_close(v20, v21, v22);
}

uint64_t WebCore::jsWebCodecsVideoFramePrototypeFunction_close(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v10;

  v3 = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "VideoFrame", "close");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSWebCodecsVideoFrame::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSWebCodecsVideoFrame::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v10, "VideoFrame", "close");
  WebCore::WebCodecsVideoFrame::close(*(WebCore::WebCodecsVideoFrame **)(v3 + 24), a2);
  return 10;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8sn180100IOZNS0_6__dtorINS0_8__traitsIJN7WebCore19WebCodecsVideoFrame13CopyToOptionsENS8_25ConversionResultExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRNS0_6__baseILSD_1EJSA_SB_EEEEEEDcSF_DpT0_(uint64_t a1, uint64_t a2)
{
  WTF *v2;

  if (*(_BYTE *)(a2 + 56))
  {
    v2 = *(WTF **)(a2 + 40);
    if (v2)
    {
      *(_QWORD *)(a2 + 40) = 0;
      *(_DWORD *)(a2 + 48) = 0;
      WTF::fastFree(v2, (void *)a2);
    }
  }
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_bufferData(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unint64_t v12;
  uint64_t v13;
  JSValue v15;
  unsigned int v16;
  JSC::VM *v17;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v17 = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v17, "WebGL2RenderingContext", "bufferData");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v17, "WebGL2RenderingContext", "bufferData");
  v12 = *((int *)a2 + 8) - 1;
  if (v12 >= 5)
    v12 = 5;
  if (v12 == 5 || v12 == 4)
    return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_bufferData1Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
  if (v12 == 3)
  {
    v13 = *((_QWORD *)a2 + 7);
    if ((v13 & 0xFFFFFFFFFFFFFFF7) == 2)
      return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_bufferData2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
    if ((v13 & 0xFFFE000000000002) == 0
      && (v16 = *(unsigned __int8 *)(v13 + 5), v16 >= 0x17)
      && (v16 == 38 || v16 - 39 <= 0xB))
    {
      return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_bufferData2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
    }
    else
    {
      return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_bufferData3Body((JSC::VM **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
    }
  }
  else
  {
    v15.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v5, this, v15);
  }
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_bufferSubData(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  JSValue v18;
  uint64_t v20;
  JSC::VM *v21;
  double v22;
  double v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  char hasExceptionsAfterHandlingTraps;
  unsigned int v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  WebCore::InspectorCanvasAgent *v35;
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  WebCore::InspectorCanvasAgent *v39;
  WebCore::InspectorInstrumentation *v40;
  WebCore::ScriptExecutionContext *v41;
  uint64_t v42;
  uint64_t v43;
  WebCore::InspectorInstrumentation *v44;
  WebCore::ScriptExecutionContext *v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  _DWORD *v49;
  WTF::StringImpl *v50;
  WTF::StringImpl *v51;
  WebCore *v52;
  JSC::JSGlobalObject *v53;
  JSC::CallFrame *v54;
  double v55;
  JSC::VM *v56;
  _QWORD v57[2];
  WTF::StringImpl *v58;
  _DWORD v59[2];
  WTF::StringImpl *v60;
  int v61;
  char v62;
  _DWORD *v63;
  char v64;
  _DWORD *v65;
  char v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v56 = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v56, "WebGL2RenderingContext", "bufferSubData");
  v8 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
  v9 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &WebCore::JSWebGL2RenderingContext::s_info && v10 != 0);
  }
  if (!v9)
    return WebCore::throwThisTypeError((int)this, (int)&v56, "WebGL2RenderingContext", "bufferSubData");
  v13 = *((int *)a2 + 8) - 1;
  if (v13 >= 5)
    v13 = 5;
  if (v13 == 5 || v13 == 4)
    return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_bufferSubData1Body((JSC::VM **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
  if (v13 != 3)
  {
    v18.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v5, this, v18);
  }
  v14 = *(_QWORD *)(v6 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v59);
  if (v59[1])
    return 0;
  v15 = *((_QWORD *)a2 + 7);
  v60 = (WTF::StringImpl *)v15;
  if (v15 < 0xFFFE000000000000)
  {
    v21 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v15 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v60, this);
    else
      *(_QWORD *)&v22 = v15 - 0x2000000000000;
    if (*((_DWORD *)v21 + 20))
    {
      v55 = v22;
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v21);
      v22 = v55;
      if ((hasExceptionsAfterHandlingTraps & 1) != 0)
        return 0;
    }
    if (fabs(v22) == INFINITY)
    {
      v16 = 0;
    }
    else
    {
      v23 = fmod(trunc(v22), 1.84467441e19);
      if (v23 >= 0.0)
        v16 = (unint64_t)v23;
      else
        v16 = -(uint64_t)(unint64_t)-v23;
    }
  }
  else
  {
    v16 = (int)v15;
  }
  v24 = *((_QWORD *)a2 + 8);
  v60 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  if ((v24 & 0xFFFE000000000002) != 0)
    goto LABEL_35;
  v25 = *(unsigned __int8 *)(v24 + 5);
  if (v25 == 38)
  {
    v26 = *(_QWORD *)(v24 + 16);
    if (!v26 || *(_BYTE *)(v26 + 64))
    {
LABEL_35:
      JSC::throwTypeError();
      v20 = 0;
      v27 = 1;
      v69 = 1;
LABEL_36:
      ((void (*)(WTF::StringImpl **, uint64_t *))off_1E332F358[v27])(&v60, &v67);
      return (_BYTE *)v20;
    }
    *(_DWORD *)v26 += 2;
    v67 = v26;
    v68 = 0;
  }
  else
  {
    if ((v25 - 39) > 0xB)
      goto LABEL_35;
    if ((*(_BYTE *)(v24 + 40) & 6) != 0)
      goto LABEL_35;
    JSC::JSArrayBufferView::possiblySharedImpl((JSC::JSArrayBufferView *)v24);
    if (!v57[0])
      goto LABEL_35;
    v67 = v57[0];
    v68 = 1;
  }
  v69 = 0;
  if (*(_BYTE *)(v14 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v58 = v60;
    v31 = v59[0];
    v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 40) + 144))(*(_QWORD *)(v14 + 40));
    if (v32
      && (v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33)) != 0
      && (v35 = *(WebCore::InspectorCanvasAgent **)(v34 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v35, (WebCore::CanvasRenderingContext *)(v14 + 8), v31, (uint64_t)&v60);
    }
    else
    {
      LOBYTE(v60) = 0;
      v62 = 0;
    }
    v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 40) + 144))(*(_QWORD *)(v14 + 40));
    if (v36
      && (v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37)) != 0
      && (v39 = *(WebCore::InspectorCanvasAgent **)(v38 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v39, (WebCore::CanvasRenderingContext *)(v14 + 8), v16, (uint64_t)&v63);
    }
    else
    {
      LOBYTE(v63) = 0;
      v64 = 0;
    }
    if (v69)
      goto LABEL_96;
    v40 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 40) + 144))(*(_QWORD *)(v14 + 40));
    if (v40
      && (v42 = WebCore::InspectorInstrumentation::instrumentingAgents(v40, v41)) != 0
      && (v43 = *(_QWORD *)(v42 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v43, v14 + 8, (uint64_t)&v67);
    }
    else
    {
      LOBYTE(v65) = 0;
      v66 = 0;
    }
    v57[0] = &v60;
    v57[1] = 3;
    v44 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 40) + 144))(*(_QWORD *)(v14 + 40));
    if (v44)
    {
      v46 = WebCore::InspectorInstrumentation::instrumentingAgents(v44, v45);
      if (v46)
      {
        v47 = *(_QWORD *)(v46 + 96);
        if (v47)
          WebCore::InspectorCanvasAgent::recordAction(v47, (WebCore::CanvasRenderingContext *)(v14 + 8), (const WTF::StringImpl *)&v58, v57);
      }
    }
    if (v66)
    {
      v48 = v65;
      v65 = 0;
      if (v48)
      {
        if (*v48 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v48;
      }
    }
    if (v64)
    {
      v49 = v63;
      v63 = 0;
      if (v49)
      {
        if (*v49 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v49;
      }
    }
    if (v62)
    {
      v50 = v60;
      v60 = 0;
      if (v50)
      {
        if (*(_DWORD *)v50 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v50;
      }
    }
    v51 = v58;
    v58 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v45);
      else
        *(_DWORD *)v51 -= 2;
    }
  }
  if (!v69)
  {
    v28 = v59[0];
    LOBYTE(v60) = 0;
    v61 = -1;
    v29 = v68;
    if (v68 != -1)
    {
      ((void (*)(_QWORD *, WTF::StringImpl **, uint64_t *))off_1E332F348[v68])(v57, &v60, &v67);
      v61 = v29;
    }
    WebCore::WebGLRenderingContextBase::bufferSubData((WTF::StringImpl *)v14, v28, v16, (uint64_t)&v60);
    if (v61 != -1)
      ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F338[v61])(v57, &v60);
    v27 = v69;
    v20 = 10;
    if (v69 == -1)
      return (_BYTE *)v20;
    goto LABEL_36;
  }
LABEL_96:
  v52 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_copyBufferSubData(v52, v53, v54);
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_copyBufferSubData(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  JSC::VM *v15;
  double v16;
  double v17;
  unint64_t v18;
  uint64_t v19;
  JSC::VM *v20;
  double v21;
  double v22;
  unint64_t v23;
  uint64_t v24;
  JSC::VM *v25;
  double v26;
  double v27;
  JSValue v29;
  unsigned int v30;
  WebCore::InspectorInstrumentation *v31;
  WebCore::ScriptExecutionContext *v32;
  uint64_t v33;
  WebCore::InspectorCanvasAgent *v34;
  unsigned int v35;
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  WebCore::InspectorCanvasAgent *v39;
  WebCore::InspectorInstrumentation *v40;
  WebCore::ScriptExecutionContext *v41;
  uint64_t v42;
  WebCore::InspectorCanvasAgent *v43;
  WebCore::InspectorInstrumentation *v44;
  WebCore::ScriptExecutionContext *v45;
  uint64_t v46;
  WebCore::InspectorCanvasAgent *v47;
  WebCore::InspectorInstrumentation *v48;
  WebCore::ScriptExecutionContext *v49;
  uint64_t v50;
  WebCore::InspectorCanvasAgent *v51;
  WebCore::InspectorInstrumentation *v52;
  WebCore::ScriptExecutionContext *v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  _DWORD *v57;
  _DWORD *v58;
  _DWORD *v59;
  _DWORD *v60;
  WTF::StringImpl *v61;
  double v62;
  double v63;
  double v64;
  WebCore::CanvasRenderingContext *v65;
  JSC::VM *v66;
  _QWORD v67[2];
  WTF::StringImpl *v68;
  unsigned int v69[2];
  unsigned int v70[2];
  _QWORD v71[2];
  char v72;
  _DWORD *v73;
  char v74;
  _DWORD *v75;
  char v76;
  _DWORD *v77;
  char v78;
  _DWORD *v79;
  char v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v66 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v66, "WebGL2RenderingContext", "copyBufferSubData");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v66, "WebGL2RenderingContext", "copyBufferSubData");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 4)
  {
    v29.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v29);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v70);
  if (v70[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v69);
  if (v69[1])
    return 0;
  v13 = *((_QWORD *)a2 + 8);
  v71[0] = v13;
  if (v13 < 0xFFFE000000000000)
  {
    v15 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v13 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v71, this);
      v16 = v62;
    }
    else
    {
      *(_QWORD *)&v16 = v13 - 0x2000000000000;
    }
    if (*((_DWORD *)v15 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v15) & 1) != 0)
      return 0;
    if (fabs(v16) == INFINITY)
    {
      v14 = 0;
    }
    else
    {
      v17 = fmod(trunc(v16), 1.84467441e19);
      if (v17 >= 0.0)
        v14 = (unint64_t)v17;
      else
        v14 = -(uint64_t)(unint64_t)-v17;
    }
  }
  else
  {
    v14 = (int)v13;
  }
  v18 = *((_QWORD *)a2 + 9);
  v71[0] = v18;
  if (v18 < 0xFFFE000000000000)
  {
    v20 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v18 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v71, this);
      v21 = v63;
    }
    else
    {
      *(_QWORD *)&v21 = v18 - 0x2000000000000;
    }
    if (*((_DWORD *)v20 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v20) & 1) != 0)
      return 0;
    if (fabs(v21) == INFINITY)
    {
      v19 = 0;
    }
    else
    {
      v22 = fmod(trunc(v21), 1.84467441e19);
      if (v22 >= 0.0)
        v19 = (unint64_t)v22;
      else
        v19 = -(uint64_t)(unint64_t)-v22;
    }
  }
  else
  {
    v19 = (int)v18;
  }
  v23 = *((_QWORD *)a2 + 10);
  v71[0] = v23;
  if (v23 < 0xFFFE000000000000)
  {
    v25 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v23 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v71, this);
      v26 = v64;
    }
    else
    {
      *(_QWORD *)&v26 = v23 - 0x2000000000000;
    }
    if (*((_DWORD *)v25 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v25) & 1) != 0)
      return 0;
    if (fabs(v26) == INFINITY)
    {
      v24 = 0;
    }
    else
    {
      v27 = fmod(trunc(v26), 1.84467441e19);
      if (v27 < 0.0)
        v24 = -(uint64_t)(unint64_t)-v27;
      else
        v24 = (unint64_t)v27;
    }
  }
  else
  {
    v24 = (int)v23;
  }
  if (*(_BYTE *)(v12 + 33))
  {
    v65 = (WebCore::CanvasRenderingContext *)(v12 + 8);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v68 = (WTF::StringImpl *)v71[0];
    v30 = v70[0];
    v31 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v31
      && (v33 = WebCore::InspectorInstrumentation::instrumentingAgents(v31, v32)) != 0
      && (v34 = *(WebCore::InspectorCanvasAgent **)(v33 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v34, v65, v30, (uint64_t)v71);
    }
    else
    {
      LOBYTE(v71[0]) = 0;
      v72 = 0;
    }
    v35 = v69[0];
    v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v36
      && (v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37)) != 0
      && (v39 = *(WebCore::InspectorCanvasAgent **)(v38 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v39, v65, v35, (uint64_t)&v73);
    }
    else
    {
      LOBYTE(v73) = 0;
      v74 = 0;
    }
    v40 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v40
      && (v42 = WebCore::InspectorInstrumentation::instrumentingAgents(v40, v41)) != 0
      && (v43 = *(WebCore::InspectorCanvasAgent **)(v42 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v43, v65, v14, (uint64_t)&v75);
    }
    else
    {
      LOBYTE(v75) = 0;
      v76 = 0;
    }
    v44 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v44
      && (v46 = WebCore::InspectorInstrumentation::instrumentingAgents(v44, v45)) != 0
      && (v47 = *(WebCore::InspectorCanvasAgent **)(v46 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v47, v65, v19, (uint64_t)&v77);
    }
    else
    {
      LOBYTE(v77) = 0;
      v78 = 0;
    }
    v48 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v48
      && (v50 = WebCore::InspectorInstrumentation::instrumentingAgents(v48, v49)) != 0
      && (v51 = *(WebCore::InspectorCanvasAgent **)(v50 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v51, v65, v24, (uint64_t)&v79);
    }
    else
    {
      LOBYTE(v79) = 0;
      v80 = 0;
    }
    v67[0] = v71;
    v67[1] = 5;
    v52 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v52)
    {
      v54 = WebCore::InspectorInstrumentation::instrumentingAgents(v52, v53);
      if (v54)
      {
        v55 = *(_QWORD *)(v54 + 96);
        if (v55)
          WebCore::InspectorCanvasAgent::recordAction(v55, v65, (const WTF::StringImpl *)&v68, v67);
      }
    }
    if (v80)
    {
      v56 = v79;
      v79 = 0;
      if (v56)
      {
        if (*v56 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v56;
      }
    }
    if (v78)
    {
      v57 = v77;
      v77 = 0;
      if (v57)
      {
        if (*v57 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v57;
      }
    }
    if (v76)
    {
      v58 = v75;
      v75 = 0;
      if (v58)
      {
        if (*v58 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v58;
      }
    }
    if (v74)
    {
      v59 = v73;
      v73 = 0;
      if (v59)
      {
        if (*v59 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v59;
      }
    }
    if (v72)
    {
      v60 = (_DWORD *)v71[0];
      v71[0] = 0;
      if (v60)
      {
        if (*v60 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v60;
      }
    }
    v61 = v68;
    v68 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
        WTF::StringImpl::destroy(v61, v53);
      else
        *(_DWORD *)v61 -= 2;
    }
  }
  WebCore::WebGL2RenderingContext::copyBufferSubData(v12, v70[0], v69[0], v14, v19, v24);
  return 10;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_getBufferSubData(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  JSC::VM *v16;
  double v17;
  double v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  JSValue v28;
  unsigned int v29;
  WebCore::InspectorInstrumentation *v30;
  WebCore::ScriptExecutionContext *v31;
  uint64_t v32;
  WebCore::InspectorCanvasAgent *v33;
  WebCore::InspectorInstrumentation *v34;
  WebCore::ScriptExecutionContext *v35;
  uint64_t v36;
  WebCore::InspectorCanvasAgent *v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  WebCore::InspectorInstrumentation *v43;
  WebCore::ScriptExecutionContext *v44;
  uint64_t v45;
  WebCore::InspectorCanvasAgent *v46;
  unsigned int v47;
  WebCore::InspectorInstrumentation *v48;
  WebCore::ScriptExecutionContext *v49;
  uint64_t v50;
  WebCore::InspectorCanvasAgent *v51;
  WebCore::InspectorInstrumentation *v52;
  WebCore::ScriptExecutionContext *v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  _DWORD *v57;
  _DWORD *v58;
  _DWORD *v59;
  WTF::StringImpl *v60;
  WTF::StringImpl *v61;
  double v62;
  WebCore *v63;
  JSC::JSGlobalObject *v64;
  JSC::CallFrame *v65;
  JSC::VM *v66;
  _QWORD v67[2];
  WTF::StringImpl *v68;
  unsigned int v69[2];
  unsigned int v70[2];
  WTF::StringImpl *v71;
  int v72;
  _DWORD v73[2];
  WTF::StringImpl *v74;
  int v75;
  char v76;
  _DWORD *v77;
  char v78;
  _DWORD *v79;
  char v80;
  _DWORD *v81;
  char v82;
  _DWORD *v83;
  char v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v66 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v66, "WebGL2RenderingContext", "getBufferSubData");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v66, "WebGL2RenderingContext", "getBufferSubData");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v28.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v28);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v73);
  if (v73[1])
    return 0;
  v14 = (WTF::StringImpl *)*((_QWORD *)a2 + 7);
  v74 = v14;
  if ((unint64_t)v14 >= 0xFFFE000000000000)
  {
    v15 = (int)v14;
    goto LABEL_24;
  }
  v16 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((unint64_t)v14 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v74, this);
    v17 = v62;
  }
  else
  {
    *(_QWORD *)&v17 = (char *)v14 - 0x2000000000000;
  }
  if (*((_DWORD *)v16 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v16) & 1) != 0)
    return 0;
  if (fabs(v17) == INFINITY)
  {
    v15 = 0;
  }
  else
  {
    v18 = fmod(trunc(v17), 1.84467441e19);
    if (v18 >= 0.0)
      v15 = (unint64_t)v18;
    else
      v15 = -(uint64_t)(unint64_t)-v18;
  }
LABEL_24:
  v19 = *((_QWORD *)a2 + 8);
  v71 = (WTF::StringImpl *)*((_QWORD *)this + 7);
  if ((v19 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(v19 + 5) - 39 > 0xB
    || (*(_BYTE *)(v19 + 40) & 6) != 0)
  {
    v67[0] = 0;
LABEL_28:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v71, 2, "dstData", 8, "WebGL2RenderingContext", 23, v13, "getBufferSubData", 17, "ArrayBufferView", 16);
    v20 = 1;
    v75 = 1;
    v67[0] = 0;
    goto LABEL_31;
  }
  JSC::JSArrayBufferView::possiblySharedImpl((JSC::JSArrayBufferView *)v19);
  if (!v67[0])
    goto LABEL_28;
  v20 = 0;
  v74 = (WTF::StringImpl *)v67[0];
  v75 = 0;
LABEL_31:
  LOBYTE(v71) = 0;
  v72 = -1;
  ((void (*)(_QWORD *, WTF::StringImpl **, WTF::StringImpl **))off_1E332F388[v20])(v67, &v71, &v74);
  v72 = v20;
  if (v75 != -1)
  {
    ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F378[v75])(v67, &v74);
    v20 = v72;
  }
  if (v20)
  {
    v25 = 0;
LABEL_49:
    if (v20 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E332F378[v20])(&v74, &v71);
    return (_BYTE *)v25;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 5) > 0xFFFFFFFFFFFFFFFBLL)
    v21 = 10;
  else
    v21 = *((_QWORD *)a2 + 9);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v21, v70);
  if (v70[1])
  {
    v25 = 0;
LABEL_48:
    v20 = v72;
    goto LABEL_49;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 6) > 0xFFFFFFFFFFFFFFFALL)
    v22 = 10;
  else
    v22 = *((_QWORD *)a2 + 10);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v22, v69);
  if (v69[1])
  {
    v25 = 0;
    goto LABEL_48;
  }
  if (*(_BYTE *)(v12 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v68 = v74;
    v29 = v73[0];
    v30 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v30
      && (v32 = WebCore::InspectorInstrumentation::instrumentingAgents(v30, v31)) != 0
      && (v33 = *(WebCore::InspectorCanvasAgent **)(v32 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v33, (WebCore::CanvasRenderingContext *)(v12 + 8), v29, (uint64_t)&v74);
    }
    else
    {
      LOBYTE(v74) = 0;
      v76 = 0;
    }
    v34 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v34
      && (v36 = WebCore::InspectorInstrumentation::instrumentingAgents(v34, v35)) != 0
      && (v37 = *(WebCore::InspectorCanvasAgent **)(v36 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v37, (WebCore::CanvasRenderingContext *)(v12 + 8), v15, (uint64_t)&v77);
    }
    else
    {
      LOBYTE(v77) = 0;
      v78 = 0;
    }
    if (v72)
      goto LABEL_122;
    v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v38
      && (v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39)) != 0
      && (v41 = *(_QWORD *)(v40 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v41, v12 + 8, (uint64_t)&v79);
    }
    else
    {
      LOBYTE(v79) = 0;
      v80 = 0;
    }
    v42 = v70[0];
    v43 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v43
      && (v45 = WebCore::InspectorInstrumentation::instrumentingAgents(v43, v44)) != 0
      && (v46 = *(WebCore::InspectorCanvasAgent **)(v45 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v46, (WebCore::CanvasRenderingContext *)(v12 + 8), v42, (uint64_t)&v81);
    }
    else
    {
      LOBYTE(v81) = 0;
      v82 = 0;
    }
    v47 = v69[0];
    v48 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v48
      && (v50 = WebCore::InspectorInstrumentation::instrumentingAgents(v48, v49)) != 0
      && (v51 = *(WebCore::InspectorCanvasAgent **)(v50 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v51, (WebCore::CanvasRenderingContext *)(v12 + 8), v47, (uint64_t)&v83);
    }
    else
    {
      LOBYTE(v83) = 0;
      v84 = 0;
    }
    v67[0] = &v74;
    v67[1] = 5;
    v52 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v52)
    {
      v54 = WebCore::InspectorInstrumentation::instrumentingAgents(v52, v53);
      if (v54)
      {
        v55 = *(_QWORD *)(v54 + 96);
        if (v55)
          WebCore::InspectorCanvasAgent::recordAction(v55, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v68, v67);
      }
    }
    if (v84)
    {
      v56 = v83;
      v83 = 0;
      if (v56)
      {
        if (*v56 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v56;
      }
    }
    if (v82)
    {
      v57 = v81;
      v81 = 0;
      if (v57)
      {
        if (*v57 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v57;
      }
    }
    if (v80)
    {
      v58 = v79;
      v79 = 0;
      if (v58)
      {
        if (*v58 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v58;
      }
    }
    if (v78)
    {
      v59 = v77;
      v77 = 0;
      if (v59)
      {
        if (*v59 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v59;
      }
    }
    if (v76)
    {
      v60 = v74;
      v74 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v60;
      }
    }
    v61 = v68;
    v68 = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
        WTF::StringImpl::destroy(v61, v53);
      else
        *(_DWORD *)v61 -= 2;
    }
  }
  if (!v72)
  {
    v23 = v71;
    v71 = 0;
    v74 = v23;
    WebCore::WebGL2RenderingContext::getBufferSubData(v12, v73[0], v15, (uint64_t *)&v74, v70[0], v69[0]);
    v24 = v74;
    v74 = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
        JSC::ArrayBufferView::operator delete();
      else
        --*(_DWORD *)v24;
    }
    v25 = 10;
    goto LABEL_48;
  }
LABEL_122:
  v63 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_blitFramebuffer(v63, v64, v65);
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_blitFramebuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unint64_t v12;
  int v13;
  unint64_t v14;
  JSC::VM *v15;
  unsigned int v16;
  unint64_t v17;
  JSC::VM *v18;
  int v19;
  unint64_t v20;
  JSC::VM *v21;
  unint64_t v22;
  JSC::VM *v23;
  unint64_t v24;
  JSC::VM *v25;
  unint64_t v26;
  JSC::VM *v27;
  int v28;
  unint64_t v29;
  JSC::VM *v30;
  uint64_t v31;
  int32x2_t *v33;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t v40;
  int v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  unint64_t v57;
  int v58;
  unint64_t v59;
  int v60;
  int v61;
  unint64_t v62;
  int v63;
  int v64;
  unint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  int v69;
  unint64_t v70;
  int v71;
  int v72;
  JSValue v73;
  WebCore::InspectorInstrumentation *v74;
  WebCore::ScriptExecutionContext *v75;
  uint64_t v76;
  WebCore::InspectorCanvasAgent *v77;
  WebCore::InspectorInstrumentation *v78;
  WebCore::ScriptExecutionContext *v79;
  uint64_t v80;
  WebCore::InspectorCanvasAgent *v81;
  WebCore::InspectorInstrumentation *v82;
  WebCore::ScriptExecutionContext *v83;
  uint64_t v84;
  WebCore::InspectorCanvasAgent *v85;
  WebCore::InspectorInstrumentation *v86;
  WebCore::ScriptExecutionContext *v87;
  uint64_t v88;
  WebCore::InspectorCanvasAgent *v89;
  WebCore::InspectorInstrumentation *v90;
  WebCore::ScriptExecutionContext *v91;
  uint64_t v92;
  WebCore::InspectorCanvasAgent *v93;
  WebCore::InspectorInstrumentation *v94;
  WebCore::ScriptExecutionContext *v95;
  uint64_t v96;
  WebCore::InspectorCanvasAgent *v97;
  WebCore::InspectorInstrumentation *v98;
  WebCore::ScriptExecutionContext *v99;
  uint64_t v100;
  WebCore::InspectorCanvasAgent *v101;
  WebCore::InspectorInstrumentation *v102;
  WebCore::ScriptExecutionContext *v103;
  uint64_t v104;
  WebCore::InspectorCanvasAgent *v105;
  unsigned int v106;
  WebCore::InspectorInstrumentation *v107;
  WebCore::ScriptExecutionContext *v108;
  uint64_t v109;
  WebCore::InspectorCanvasAgent *v110;
  unsigned int v111;
  WebCore::InspectorInstrumentation *v112;
  WebCore::ScriptExecutionContext *v113;
  uint64_t v114;
  WebCore::InspectorCanvasAgent *v115;
  WebCore::InspectorInstrumentation *v116;
  WebCore::ScriptExecutionContext *v117;
  uint64_t v118;
  uint64_t v119;
  _DWORD *v120;
  _DWORD *v121;
  _DWORD *v122;
  _DWORD *v123;
  _DWORD *v124;
  _DWORD *v125;
  _DWORD *v126;
  _DWORD *v127;
  _DWORD *v128;
  _DWORD *v129;
  WTF::StringImpl *v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  unint64_t v137;
  unint64_t v138;
  WebCore::CanvasRenderingContext *v139;
  int v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unsigned int v147;
  uint64_t v148;
  JSC::VM *v149;
  _QWORD v150[2];
  WTF::StringImpl *v151;
  _DWORD v152[2];
  _DWORD v153[2];
  _QWORD v154[2];
  char v155;
  _DWORD *v156;
  char v157;
  _DWORD *v158;
  char v159;
  _DWORD *v160;
  char v161;
  _DWORD *v162;
  char v163;
  _DWORD *v164;
  char v165;
  _DWORD *v166;
  char v167;
  _DWORD *v168;
  char v169;
  _DWORD *v170;
  char v171;
  _DWORD *v172;
  char v173;
  uint64_t v174;

  v174 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v149 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v149, "WebGL2RenderingContext", "blitFramebuffer");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v149, "WebGL2RenderingContext", "blitFramebuffer");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 9)
  {
    v73.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v73);
  }
  else
  {
    v148 = *(_QWORD *)(v5 + 24);
    v12 = *((_QWORD *)a2 + 6);
    v154[0] = v12;
    if (v12 < 0xFFFE000000000000)
    {
      v35 = v12 - 0x2000000000000;
      if (v12 - 0x2000000000000 >= 0xFFFC000000000000)
      {
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v154, this);
        v35 = v131;
      }
      v36 = (v35 >> 52) & 0x7FF;
      if ((v36 - 1023) <= 0x53)
      {
        v55 = v35 >> (51 - (v35 >> 52));
        if (v36 > 0x433)
          LODWORD(v55) = v35 << ((v35 >> 52) - 51);
        if (v36 >= 0x41F)
          v56 = v55;
        else
          v56 = (((1 << ((v35 >> 52) + 1)) - 1) & v55) + (1 << ((v35 >> 52) + 1));
        if ((v35 & 0x8000000000000000) == 0)
          v13 = v56;
        else
          v13 = -v56;
      }
      else
      {
        v13 = 0;
      }
    }
    else
    {
      v13 = v12;
    }
    if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
    {
      return 0;
    }
    else
    {
      v14 = *((_QWORD *)a2 + 7);
      v154[0] = v14;
      v15 = (JSC::VM *)*((_QWORD *)this + 7);
      if (v14 < 0xFFFE000000000000)
      {
        v37 = v14 - 0x2000000000000;
        if (v14 - 0x2000000000000 >= 0xFFFC000000000000)
        {
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v154, this);
          v37 = v132;
        }
        v38 = (v37 >> 52) & 0x7FF;
        v39 = v38 - 1023;
        v40 = v37 >> (51 - (v37 >> 52));
        if (v38 > 0x433)
          LODWORD(v40) = v37 << ((v37 >> 52) - 51);
        if (v38 >= 0x41F)
          v41 = v40;
        else
          v41 = (((1 << ((v37 >> 52) + 1)) - 1) & v40) + (1 << ((v37 >> 52) + 1));
        if ((v37 & 0x8000000000000000) == 0)
          v42 = v41;
        else
          v42 = -v41;
        if (v39 <= 0x53)
          v16 = v42;
        else
          v16 = 0;
      }
      else
      {
        v16 = v14;
      }
      if (*((_DWORD *)v15 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v15))
      {
        return 0;
      }
      else
      {
        v17 = *((_QWORD *)a2 + 8);
        v154[0] = v17;
        v18 = (JSC::VM *)*((_QWORD *)this + 7);
        if (v17 < 0xFFFE000000000000)
        {
          v43 = v17 - 0x2000000000000;
          if (v17 - 0x2000000000000 >= 0xFFFC000000000000)
          {
            JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v154, this);
            v43 = v133;
          }
          v44 = (v43 >> 52) & 0x7FF;
          if ((v44 - 1023) <= 0x53)
          {
            v57 = v43 >> (51 - (v43 >> 52));
            if (v44 > 0x433)
              LODWORD(v57) = v43 << ((v43 >> 52) - 51);
            if (v44 >= 0x41F)
              v58 = v57;
            else
              v58 = (((1 << ((v43 >> 52) + 1)) - 1) & v57) + (1 << ((v43 >> 52) + 1));
            if ((v43 & 0x8000000000000000) == 0)
              v19 = v58;
            else
              v19 = -v58;
          }
          else
          {
            v19 = 0;
          }
        }
        else
        {
          v19 = v17;
        }
        if (*((_DWORD *)v18 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v18))
        {
          return 0;
        }
        else
        {
          v20 = *((_QWORD *)a2 + 9);
          v154[0] = v20;
          v21 = (JSC::VM *)*((_QWORD *)this + 7);
          if (v20 < 0xFFFE000000000000)
          {
            v45 = v20 - 0x2000000000000;
            if (v20 - 0x2000000000000 >= 0xFFFC000000000000)
            {
              JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v154, this);
              v45 = v134;
            }
            v46 = (v45 >> 52) & 0x7FF;
            if ((v46 - 1023) <= 0x53)
            {
              v59 = v45 >> (51 - (v45 >> 52));
              if (v46 > 0x433)
                LODWORD(v59) = v45 << ((v45 >> 52) - 51);
              if (v46 >= 0x41F)
                v60 = v59;
              else
                v60 = (((1 << ((v45 >> 52) + 1)) - 1) & v59) + (1 << ((v45 >> 52) + 1));
              if ((v45 & 0x8000000000000000) == 0)
                v61 = v60;
              else
                v61 = -v60;
              v147 = v61;
            }
            else
            {
              v147 = 0;
            }
          }
          else
          {
            v147 = v20;
          }
          if (*((_DWORD *)v21 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v21))
          {
            return 0;
          }
          else
          {
            v146 = v19;
            v22 = *((_QWORD *)a2 + 10);
            v154[0] = v22;
            v23 = (JSC::VM *)*((_QWORD *)this + 7);
            if (v22 < 0xFFFE000000000000)
            {
              v47 = v22 - 0x2000000000000;
              if (v22 - 0x2000000000000 >= 0xFFFC000000000000)
              {
                JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v154, this);
                v47 = v135;
              }
              v48 = (v47 >> 52) & 0x7FF;
              if ((v48 - 1023) <= 0x53)
              {
                v62 = v47 >> (51 - (v47 >> 52));
                if (v48 > 0x433)
                  LODWORD(v62) = v47 << ((v47 >> 52) - 51);
                if (v48 >= 0x41F)
                  v63 = v62;
                else
                  v63 = (((1 << ((v47 >> 52) + 1)) - 1) & v62) + (1 << ((v47 >> 52) + 1));
                if ((v47 & 0x8000000000000000) == 0)
                  v64 = v63;
                else
                  v64 = -v63;
                v145 = v64;
              }
              else
              {
                v145 = 0;
              }
            }
            else
            {
              v145 = v22;
            }
            if (*((_DWORD *)v23 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v23))
            {
              return 0;
            }
            else
            {
              v144 = v16;
              v24 = *((_QWORD *)a2 + 11);
              v154[0] = v24;
              v25 = (JSC::VM *)*((_QWORD *)this + 7);
              if (v24 < 0xFFFE000000000000)
              {
                v49 = v24 - 0x2000000000000;
                if (v24 - 0x2000000000000 >= 0xFFFC000000000000)
                {
                  JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v154, this);
                  v49 = v136;
                }
                v50 = (v49 >> 52) & 0x7FF;
                if ((v50 - 1023) <= 0x53)
                {
                  v65 = v49 >> (51 - (v49 >> 52));
                  if (v50 > 0x433)
                    LODWORD(v65) = v49 << ((v49 >> 52) - 51);
                  if (v50 >= 0x41F)
                    v66 = v65;
                  else
                    v66 = (((1 << ((v49 >> 52) + 1)) - 1) & v65) + (1 << ((v49 >> 52) + 1));
                  if ((v49 & 0x8000000000000000) == 0)
                    v67 = v66;
                  else
                    v67 = -v66;
                  v143 = v67;
                }
                else
                {
                  v143 = 0;
                }
              }
              else
              {
                v143 = v24;
              }
              if (*((_DWORD *)v25 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v25))
              {
                return 0;
              }
              else
              {
                v142 = v13;
                v26 = *((_QWORD *)a2 + 12);
                v154[0] = v26;
                v27 = (JSC::VM *)*((_QWORD *)this + 7);
                if (v26 < 0xFFFE000000000000)
                {
                  v51 = v26 - 0x2000000000000;
                  if (v26 - 0x2000000000000 >= 0xFFFC000000000000)
                  {
                    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v154, this);
                    v51 = v137;
                  }
                  v52 = (v51 >> 52) & 0x7FF;
                  if ((v52 - 1023) <= 0x53)
                  {
                    v68 = v51 >> (51 - (v51 >> 52));
                    if (v52 > 0x433)
                      LODWORD(v68) = v51 << ((v51 >> 52) - 51);
                    if (v52 >= 0x41F)
                      v69 = v68;
                    else
                      v69 = (((1 << ((v51 >> 52) + 1)) - 1) & v68) + (1 << ((v51 >> 52) + 1));
                    if ((v51 & 0x8000000000000000) == 0)
                      v28 = v69;
                    else
                      v28 = -v69;
                  }
                  else
                  {
                    v28 = 0;
                  }
                }
                else
                {
                  v28 = v26;
                }
                if (*((_DWORD *)v27 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v27))
                {
                  return 0;
                }
                else
                {
                  v141 = v28;
                  v29 = *((_QWORD *)a2 + 13);
                  v154[0] = v29;
                  v30 = (JSC::VM *)*((_QWORD *)this + 7);
                  if (v29 < 0xFFFE000000000000)
                  {
                    v53 = v29 - 0x2000000000000;
                    if (v29 - 0x2000000000000 >= 0xFFFC000000000000)
                    {
                      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v154, this);
                      v53 = v138;
                    }
                    v54 = (v53 >> 52) & 0x7FF;
                    if ((v54 - 1023) <= 0x53)
                    {
                      v70 = v53 >> (51 - (v53 >> 52));
                      if (v54 > 0x433)
                        LODWORD(v70) = v53 << ((v53 >> 52) - 51);
                      if (v54 >= 0x41F)
                        v71 = v70;
                      else
                        v71 = (((1 << ((v53 >> 52) + 1)) - 1) & v70) + (1 << ((v53 >> 52) + 1));
                      if ((v53 & 0x8000000000000000) == 0)
                        v72 = v71;
                      else
                        v72 = -v71;
                      v140 = v72;
                    }
                    else
                    {
                      v140 = 0;
                    }
                  }
                  else
                  {
                    v140 = v29;
                  }
                  if (*((_DWORD *)v30 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v30))
                  {
                    return 0;
                  }
                  else
                  {
                    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 14), v153);
                    if (v153[1])
                    {
                      return 0;
                    }
                    else
                    {
                      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 15), v152);
                      if (v152[1])
                      {
                        return 0;
                      }
                      else
                      {
                        v31 = v148;
                        if (*(_BYTE *)(v148 + 33))
                        {
                          v139 = (WebCore::CanvasRenderingContext *)(v148 + 8);
                          WTF::StringImpl::createWithoutCopyingNonEmpty();
                          v151 = (WTF::StringImpl *)v154[0];
                          v74 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v148 + 40) + 144))(*(_QWORD *)(v148 + 40));
                          if (v74
                            && (v76 = WebCore::InspectorInstrumentation::instrumentingAgents(v74, v75)) != 0
                            && (v77 = *(WebCore::InspectorCanvasAgent **)(v76 + 96)) != 0)
                          {
                            WebCore::InspectorCanvasAgent::processArgument(v77, v139, v142, (uint64_t)v154);
                          }
                          else
                          {
                            LOBYTE(v154[0]) = 0;
                            v155 = 0;
                          }
                          v78 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v148 + 40) + 144))(*(_QWORD *)(v148 + 40));
                          if (v78
                            && (v80 = WebCore::InspectorInstrumentation::instrumentingAgents(v78, v79)) != 0
                            && (v81 = *(WebCore::InspectorCanvasAgent **)(v80 + 96)) != 0)
                          {
                            WebCore::InspectorCanvasAgent::processArgument(v81, v139, v144, (uint64_t)&v156);
                          }
                          else
                          {
                            LOBYTE(v156) = 0;
                            v157 = 0;
                          }
                          v82 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v148 + 40) + 144))(*(_QWORD *)(v148 + 40));
                          if (v82
                            && (v84 = WebCore::InspectorInstrumentation::instrumentingAgents(v82, v83)) != 0
                            && (v85 = *(WebCore::InspectorCanvasAgent **)(v84 + 96)) != 0)
                          {
                            WebCore::InspectorCanvasAgent::processArgument(v85, v139, v146, (uint64_t)&v158);
                          }
                          else
                          {
                            LOBYTE(v158) = 0;
                            v159 = 0;
                          }
                          v86 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v148 + 40) + 144))(*(_QWORD *)(v148 + 40));
                          if (v86
                            && (v88 = WebCore::InspectorInstrumentation::instrumentingAgents(v86, v87)) != 0
                            && (v89 = *(WebCore::InspectorCanvasAgent **)(v88 + 96)) != 0)
                          {
                            WebCore::InspectorCanvasAgent::processArgument(v89, v139, v147, (uint64_t)&v160);
                          }
                          else
                          {
                            LOBYTE(v160) = 0;
                            v161 = 0;
                          }
                          v90 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v148 + 40) + 144))(*(_QWORD *)(v148 + 40));
                          if (v90
                            && (v92 = WebCore::InspectorInstrumentation::instrumentingAgents(v90, v91)) != 0
                            && (v93 = *(WebCore::InspectorCanvasAgent **)(v92 + 96)) != 0)
                          {
                            WebCore::InspectorCanvasAgent::processArgument(v93, v139, v145, (uint64_t)&v162);
                          }
                          else
                          {
                            LOBYTE(v162) = 0;
                            v163 = 0;
                          }
                          v94 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v148 + 40) + 144))(*(_QWORD *)(v148 + 40));
                          if (v94
                            && (v96 = WebCore::InspectorInstrumentation::instrumentingAgents(v94, v95)) != 0
                            && (v97 = *(WebCore::InspectorCanvasAgent **)(v96 + 96)) != 0)
                          {
                            WebCore::InspectorCanvasAgent::processArgument(v97, v139, v143, (uint64_t)&v164);
                          }
                          else
                          {
                            LOBYTE(v164) = 0;
                            v165 = 0;
                          }
                          v98 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v148 + 40) + 144))(*(_QWORD *)(v148 + 40));
                          if (v98
                            && (v100 = WebCore::InspectorInstrumentation::instrumentingAgents(v98, v99)) != 0
                            && (v101 = *(WebCore::InspectorCanvasAgent **)(v100 + 96)) != 0)
                          {
                            WebCore::InspectorCanvasAgent::processArgument(v101, v139, v141, (uint64_t)&v166);
                          }
                          else
                          {
                            LOBYTE(v166) = 0;
                            v167 = 0;
                          }
                          v102 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v148 + 40) + 144))(*(_QWORD *)(v148 + 40));
                          if (v102
                            && (v104 = WebCore::InspectorInstrumentation::instrumentingAgents(v102, v103)) != 0
                            && (v105 = *(WebCore::InspectorCanvasAgent **)(v104 + 96)) != 0)
                          {
                            WebCore::InspectorCanvasAgent::processArgument(v105, v139, v140, (uint64_t)&v168);
                          }
                          else
                          {
                            LOBYTE(v168) = 0;
                            v169 = 0;
                          }
                          v106 = v153[0];
                          v107 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v148 + 40) + 144))(*(_QWORD *)(v148 + 40));
                          if (v107
                            && (v109 = WebCore::InspectorInstrumentation::instrumentingAgents(v107, v108)) != 0
                            && (v110 = *(WebCore::InspectorCanvasAgent **)(v109 + 96)) != 0)
                          {
                            WebCore::InspectorCanvasAgent::processArgument(v110, v139, v106, (uint64_t)&v170);
                          }
                          else
                          {
                            LOBYTE(v170) = 0;
                            v171 = 0;
                          }
                          v111 = v152[0];
                          v112 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v148 + 40) + 144))(*(_QWORD *)(v148 + 40));
                          if (v112
                            && (v114 = WebCore::InspectorInstrumentation::instrumentingAgents(v112, v113)) != 0
                            && (v115 = *(WebCore::InspectorCanvasAgent **)(v114 + 96)) != 0)
                          {
                            WebCore::InspectorCanvasAgent::processArgument(v115, v139, v111, (uint64_t)&v172);
                          }
                          else
                          {
                            LOBYTE(v172) = 0;
                            v173 = 0;
                          }
                          v150[0] = v154;
                          v150[1] = 10;
                          v31 = v148;
                          v116 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v148 + 40) + 144))(*(_QWORD *)(v148 + 40));
                          if (v116)
                          {
                            v118 = WebCore::InspectorInstrumentation::instrumentingAgents(v116, v117);
                            if (v118)
                            {
                              v119 = *(_QWORD *)(v118 + 96);
                              if (v119)
                                WebCore::InspectorCanvasAgent::recordAction(v119, v139, (const WTF::StringImpl *)&v151, v150);
                            }
                          }
                          if (v173)
                          {
                            v120 = v172;
                            v172 = 0;
                            if (v120)
                            {
                              if (*v120 == 1)
                                WTF::JSONImpl::Value::operator delete();
                              else
                                --*v120;
                            }
                          }
                          if (v171)
                          {
                            v121 = v170;
                            v170 = 0;
                            if (v121)
                            {
                              if (*v121 == 1)
                                WTF::JSONImpl::Value::operator delete();
                              else
                                --*v121;
                            }
                          }
                          if (v169)
                          {
                            v122 = v168;
                            v168 = 0;
                            if (v122)
                            {
                              if (*v122 == 1)
                                WTF::JSONImpl::Value::operator delete();
                              else
                                --*v122;
                            }
                          }
                          if (v167)
                          {
                            v123 = v166;
                            v166 = 0;
                            if (v123)
                            {
                              if (*v123 == 1)
                                WTF::JSONImpl::Value::operator delete();
                              else
                                --*v123;
                            }
                          }
                          if (v165)
                          {
                            v124 = v164;
                            v164 = 0;
                            if (v124)
                            {
                              if (*v124 == 1)
                                WTF::JSONImpl::Value::operator delete();
                              else
                                --*v124;
                            }
                          }
                          if (v163)
                          {
                            v125 = v162;
                            v162 = 0;
                            if (v125)
                            {
                              if (*v125 == 1)
                                WTF::JSONImpl::Value::operator delete();
                              else
                                --*v125;
                            }
                          }
                          if (v161)
                          {
                            v126 = v160;
                            v160 = 0;
                            if (v126)
                            {
                              if (*v126 == 1)
                                WTF::JSONImpl::Value::operator delete();
                              else
                                --*v126;
                            }
                          }
                          if (v159)
                          {
                            v127 = v158;
                            v158 = 0;
                            if (v127)
                            {
                              if (*v127 == 1)
                                WTF::JSONImpl::Value::operator delete();
                              else
                                --*v127;
                            }
                          }
                          if (v157)
                          {
                            v128 = v156;
                            v156 = 0;
                            if (v128)
                            {
                              if (*v128 == 1)
                                WTF::JSONImpl::Value::operator delete();
                              else
                                --*v128;
                            }
                          }
                          if (v155)
                          {
                            v129 = (_DWORD *)v154[0];
                            v154[0] = 0;
                            if (v129)
                            {
                              if (*v129 == 1)
                                WTF::JSONImpl::Value::operator delete();
                              else
                                --*v129;
                            }
                          }
                          v130 = v151;
                          v151 = 0;
                          if (v130)
                          {
                            if (*(_DWORD *)v130 == 2)
                              WTF::StringImpl::destroy(v130, v117);
                            else
                              *(_DWORD *)v130 -= 2;
                          }
                        }
                        if (!*(_BYTE *)(v31 + 364))
                        {
                          (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t, _DWORD))(**(_QWORD **)(v31 + 88) + 1256))(*(_QWORD *)(v31 + 88), v142, v144, v146, v147, v145, v143, v141, __PAIR64__(v153[0], v140), v152[0]);
                          if (!(*(_QWORD *)(v31 + 176)
                               ? WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance
                               : 0))
                          {
                            *(_BYTE *)(v31 + 432) = 1;
                            if (*(_BYTE *)(v31 + 434))
                              *(_BYTE *)(v31 + 434) = 0;
                            v33 = *(int32x2_t **)(v31 + 40);
                            v154[0] = 0;
                            v154[1] = vcvt_f32_s32(v33[1]);
                            v155 = 1;
                            (*(void (**)(int32x2_t *, _QWORD *, _QWORD))(*(_QWORD *)v33 + 104))(v33, v154, 0);
                          }
                        }
                        return 10;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_framebufferTextureLayer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSC::VM *v15;
  WebCore::WebGLTexture *v16;
  uint64_t v17;
  _BOOL4 v18;
  char **v19;
  BOOL v20;
  unint64_t v23;
  int v24;
  unint64_t v25;
  JSC::VM *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  unsigned int v35;
  JSValue v36;
  unsigned int v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  WebCore::InspectorCanvasAgent *v41;
  unsigned int v42;
  WebCore::InspectorInstrumentation *v43;
  WebCore::ScriptExecutionContext *v44;
  uint64_t v45;
  WebCore::InspectorCanvasAgent *v46;
  WebCore::InspectorInstrumentation *v47;
  WebCore::ScriptExecutionContext *v48;
  uint64_t v49;
  uint64_t v50;
  WebCore::InspectorInstrumentation *v51;
  WebCore::ScriptExecutionContext *v52;
  uint64_t v53;
  WebCore::InspectorCanvasAgent *v54;
  WebCore::InspectorInstrumentation *v55;
  WebCore::ScriptExecutionContext *v56;
  uint64_t v57;
  WebCore::InspectorCanvasAgent *v58;
  WebCore::InspectorInstrumentation *v59;
  WebCore::ScriptExecutionContext *v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  _DWORD *v64;
  _DWORD *v65;
  _DWORD *v66;
  _DWORD *v67;
  WTF::StringImpl *v68;
  JSC::VM *v69;
  unint64_t v70;
  unint64_t v71;
  WebCore::CanvasRenderingContext *v72;
  JSC::VM *v73;
  _QWORD v74[2];
  WTF::StringImpl *v75;
  unsigned int v76[2];
  unsigned int v77[2];
  _QWORD v78[2];
  char v79;
  _DWORD *v80;
  char v81;
  _DWORD *v82;
  char v83;
  _DWORD *v84;
  char v85;
  _DWORD *v86;
  char v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v73 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v73, "WebGL2RenderingContext", "framebufferTextureLayer");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v73, "WebGL2RenderingContext", "framebufferTextureLayer");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 4)
  {
    v36.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v36);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v77);
    if (v77[1])
    {
      return 0;
    }
    else
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v76);
      if (v76[1])
      {
        return 0;
      }
      else
      {
        v14 = *((_QWORD *)a2 + 8);
        v15 = (JSC::VM *)*((_QWORD *)this + 7);
        if ((v14 & 0xFFFFFFFFFFFFFFF7) == 2)
        {
          v16 = 0;
        }
        else
        {
          v78[0] = *((_QWORD *)this + 7);
          if ((v14 & 0xFFFE000000000002) != 0)
            goto LABEL_28;
          v17 = *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C);
          v18 = *(_DWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C) != 0;
          v19 = (char **)(16 * v17);
          if ((_DWORD)v17)
            v20 = v19 == &WebCore::JSWebGLTexture::s_info;
          else
            v20 = 1;
          if (!v20)
          {
            do
            {
              v19 = (char **)v19[2];
              v18 = v19 != 0;
            }
            while (v19 != &WebCore::JSWebGLTexture::s_info && v19 != 0);
          }
          if (!v18 || (v16 = *(WebCore::WebGLTexture **)(v14 + 24)) == 0)
          {
LABEL_28:
            WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v78, 2, "texture", 8, "WebGL2RenderingContext", 23, v13, "framebufferTextureLayer", 24, "WebGLTexture", 13);
            return 0;
          }
        }
        v23 = *((_QWORD *)a2 + 9);
        v78[0] = v23;
        if (v23 < 0xFFFE000000000000)
        {
          v28 = v23 - 0x2000000000000;
          if (v23 - 0x2000000000000 >= 0xFFFC000000000000)
          {
            v69 = v15;
            JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v78, this);
            v15 = v69;
            v28 = v70;
          }
          v29 = (v28 >> 52) & 0x7FF;
          if ((v29 - 1023) <= 0x53)
          {
            v32 = v28 >> (51 - (v28 >> 52));
            if (v29 > 0x433)
              LODWORD(v32) = v28 << ((v28 >> 52) - 51);
            if (v29 >= 0x41F)
              v33 = v32;
            else
              v33 = (((1 << ((v28 >> 52) + 1)) - 1) & v32) + (1 << ((v28 >> 52) + 1));
            if ((v28 & 0x8000000000000000) == 0)
              v24 = v33;
            else
              v24 = -v33;
          }
          else
          {
            v24 = 0;
          }
        }
        else
        {
          v24 = v23;
        }
        if (*((_DWORD *)v15 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v15))
        {
          return 0;
        }
        else
        {
          v25 = *((_QWORD *)a2 + 10);
          v78[0] = v25;
          v26 = (JSC::VM *)*((_QWORD *)this + 7);
          if (v25 < 0xFFFE000000000000)
          {
            v30 = v25 - 0x2000000000000;
            if (v25 - 0x2000000000000 >= 0xFFFC000000000000)
            {
              JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v78, this);
              v30 = v71;
            }
            v31 = (v30 >> 52) & 0x7FF;
            if ((v31 - 1023) <= 0x53)
            {
              v34 = v30 >> (51 - (v30 >> 52));
              if (v31 > 0x433)
                LODWORD(v34) = v30 << ((v30 >> 52) - 51);
              if (v31 >= 0x41F)
                v35 = v34;
              else
                v35 = (((1 << ((v30 >> 52) + 1)) - 1) & v34) + (1 << ((v30 >> 52) + 1));
              if ((v30 & 0x8000000000000000) == 0)
                v27 = v35;
              else
                v27 = -v35;
            }
            else
            {
              v27 = 0;
            }
          }
          else
          {
            v27 = v25;
          }
          if (*((_DWORD *)v26 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v26))
          {
            return 0;
          }
          else
          {
            if (*(_BYTE *)(v12 + 33))
            {
              v72 = (WebCore::CanvasRenderingContext *)(v12 + 8);
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v75 = (WTF::StringImpl *)v78[0];
              v37 = v77[0];
              v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v38
                && (v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39)) != 0
                && (v41 = *(WebCore::InspectorCanvasAgent **)(v40 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v41, v72, v37, (uint64_t)v78);
              }
              else
              {
                LOBYTE(v78[0]) = 0;
                v79 = 0;
              }
              v42 = v76[0];
              v43 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v43
                && (v45 = WebCore::InspectorInstrumentation::instrumentingAgents(v43, v44)) != 0
                && (v46 = *(WebCore::InspectorCanvasAgent **)(v45 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v46, v72, v42, (uint64_t)&v80);
              }
              else
              {
                LOBYTE(v80) = 0;
                v81 = 0;
              }
              v47 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v47
                && (v49 = WebCore::InspectorInstrumentation::instrumentingAgents(v47, v48)) != 0
                && (v50 = *(_QWORD *)(v49 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v50, v72, v16, (uint64_t)&v82);
              }
              else
              {
                LOBYTE(v82) = 0;
                v83 = 0;
              }
              v51 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v51
                && (v53 = WebCore::InspectorInstrumentation::instrumentingAgents(v51, v52)) != 0
                && (v54 = *(WebCore::InspectorCanvasAgent **)(v53 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v54, v72, v24, (uint64_t)&v84);
              }
              else
              {
                LOBYTE(v84) = 0;
                v85 = 0;
              }
              v55 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v55
                && (v57 = WebCore::InspectorInstrumentation::instrumentingAgents(v55, v56)) != 0
                && (v58 = *(WebCore::InspectorCanvasAgent **)(v57 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v58, v72, v27, (uint64_t)&v86);
              }
              else
              {
                LOBYTE(v86) = 0;
                v87 = 0;
              }
              v74[0] = v78;
              v74[1] = 5;
              v59 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v59)
              {
                v61 = WebCore::InspectorInstrumentation::instrumentingAgents(v59, v60);
                if (v61)
                {
                  v62 = *(_QWORD *)(v61 + 96);
                  if (v62)
                    WebCore::InspectorCanvasAgent::recordAction(v62, v72, (const WTF::StringImpl *)&v75, v74);
                }
              }
              if (v87)
              {
                v63 = v86;
                v86 = 0;
                if (v63)
                {
                  if (*v63 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v63;
                }
              }
              if (v85)
              {
                v64 = v84;
                v84 = 0;
                if (v64)
                {
                  if (*v64 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v64;
                }
              }
              if (v83)
              {
                v65 = v82;
                v82 = 0;
                if (v65)
                {
                  if (*v65 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v65;
                }
              }
              if (v81)
              {
                v66 = v80;
                v80 = 0;
                if (v66)
                {
                  if (*v66 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v66;
                }
              }
              if (v79)
              {
                v67 = (_DWORD *)v78[0];
                v78[0] = 0;
                if (v67)
                {
                  if (*v67 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v67;
                }
              }
              v68 = v75;
              v75 = 0;
              if (v68)
              {
                if (*(_DWORD *)v68 == 2)
                  WTF::StringImpl::destroy(v68, v60);
                else
                  *(_DWORD *)v68 -= 2;
              }
            }
            WebCore::WebGL2RenderingContext::framebufferTextureLayer((WTF::StringImpl *)v12, v77[0], v76[0], v16, v24, v27);
            return 10;
          }
        }
      }
    }
  }
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_invalidateFramebuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  JSC::VM *v14;
  WTF *v15;
  uint64_t v16;
  void *v17;
  int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  JSValue v24;
  void *v25;
  WTF::StringImpl *v26;
  unsigned int v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  WebCore::InspectorCanvasAgent *v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  JSC::VM *v43;
  _QWORD v44[2];
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  uint64_t v47;
  int v48;
  _DWORD v49[2];
  WTF::StringImpl *v50;
  uint64_t v51;
  char v52;
  _DWORD *v53;
  char v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v43 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v43, "WebGL2RenderingContext", "invalidateFramebuffer");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v43, "WebGL2RenderingContext", "invalidateFramebuffer");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v24);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v49);
  if (v49[1])
    return 0;
  v13 = *((_QWORD *)a2 + 7);
  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  v44[0] = v14;
  if ((v13 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v13 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v21 = v50;
    v50 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    v19 = 0;
    v18 = 1;
    v48 = 1;
    goto LABEL_29;
  }
  v50 = 0;
  v51 = 0;
  v46 = (WTF::StringImpl *)&v50;
  JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLUnsignedLong>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(this, v13, (uint64_t *)&v46);
  if (!*((_DWORD *)v14 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v14) & 1) == 0)
  {
    v46 = v50;
    v47 = v51;
    v48 = 0;
    goto LABEL_18;
  }
  v26 = v50;
  v18 = 1;
  v48 = 1;
  if (v50)
  {
    v50 = 0;
    LODWORD(v51) = 0;
    WTF::fastFree(v26, v25);
    v18 = v48;
    if (v48)
    {
      v19 = 0;
      goto LABEL_23;
    }
LABEL_18:
    if (*(_BYTE *)(v12 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v27 = v49[0];
      v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v28
        && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
        && (v31 = *(WebCore::InspectorCanvasAgent **)(v30 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v31, (WebCore::CanvasRenderingContext *)(v12 + 8), v27, (uint64_t)&v50);
      }
      else
      {
        LOBYTE(v50) = 0;
        v52 = 0;
      }
      if (v48)
      {
LABEL_69:
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_70;
      }
      v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v32
        && (v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33)) != 0
        && (v35 = *(_QWORD *)(v34 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v35, v12 + 8, (uint64_t *)&v46, (uint64_t)&v53);
      }
      else
      {
        LOBYTE(v53) = 0;
        v54 = 0;
      }
      v44[0] = &v50;
      v44[1] = 2;
      v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v36)
      {
        v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37);
        if (v38)
        {
          v39 = *(_QWORD *)(v38 + 96);
          if (v39)
            WebCore::InspectorCanvasAgent::recordAction(v39, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v45, v44);
        }
      }
      if (v54)
      {
        v40 = v53;
        v53 = 0;
        if (v40)
        {
          if (*v40 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v40;
        }
      }
      if (v52)
      {
        v41 = v50;
        v50 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v41;
        }
      }
      v42 = v45;
      v45 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v37);
        else
          *(_DWORD *)v42 -= 2;
      }
    }
    if (!v48)
    {
      v15 = v46;
      v50 = v46;
      v16 = v47;
      v46 = 0;
      v47 = 0;
      v51 = v16;
      WebCore::WebGL2RenderingContext::invalidateFramebuffer((WTF::StringImpl *)v12, v49[0], (uint64_t)&v50);
      if (v15)
        WTF::fastFree(v15, v17);
      v18 = v48;
      v19 = 10;
LABEL_23:
      if (v18 == -1)
        return (_BYTE *)v19;
      goto LABEL_29;
    }
    goto LABEL_69;
  }
LABEL_70:
  v19 = 0;
LABEL_29:
  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E332F398[v18])(&v50, &v46);
  return (_BYTE *)v19;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_invalidateSubFramebuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  JSC::VM *v14;
  WTF::StringImpl *v15;
  JSC::VM *v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  JSC::VM *v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  JSC::VM *v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  JSC::VM *v25;
  uint64_t v26;
  WTF *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unsigned int v48;
  unint64_t v49;
  unsigned int v50;
  JSValue v52;
  void *v53;
  WTF::StringImpl *v54;
  uint64_t v55;
  int hasExceptionsAfterHandlingTraps;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  JSC::VM *v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  WebCore::InspectorInstrumentation *v66;
  WebCore::ScriptExecutionContext *v67;
  uint64_t v68;
  WebCore::InspectorCanvasAgent *v69;
  WebCore::InspectorInstrumentation *v70;
  WebCore::ScriptExecutionContext *v71;
  uint64_t v72;
  uint64_t v73;
  WebCore::InspectorInstrumentation *v74;
  WebCore::ScriptExecutionContext *v75;
  uint64_t v76;
  WebCore::InspectorCanvasAgent *v77;
  WebCore::InspectorInstrumentation *v78;
  WebCore::ScriptExecutionContext *v79;
  uint64_t v80;
  WebCore::InspectorCanvasAgent *v81;
  WebCore::InspectorInstrumentation *v82;
  WebCore::ScriptExecutionContext *v83;
  uint64_t v84;
  WebCore::InspectorCanvasAgent *v85;
  WebCore::InspectorInstrumentation *v86;
  WebCore::ScriptExecutionContext *v87;
  uint64_t v88;
  WebCore::InspectorCanvasAgent *v89;
  WebCore::InspectorInstrumentation *v90;
  WebCore::ScriptExecutionContext *v91;
  uint64_t v92;
  uint64_t v93;
  _DWORD *v94;
  _DWORD *v95;
  _DWORD *v96;
  _DWORD *v97;
  _DWORD *v98;
  WTF::StringImpl *v99;
  WTF::StringImpl *v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  JSC::JSGlobalObject *v107;
  uint64_t v108;
  unint64_t v109;
  unsigned int v110;
  WebCore::CanvasRenderingContext *v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  int v115[2];
  unsigned int v116;
  JSC::VM *v117;
  _QWORD v118[2];
  WTF::StringImpl *v119;
  WTF::StringImpl *v120;
  uint64_t v121;
  int v122;
  _DWORD v123[2];
  WTF::StringImpl *v124;
  uint64_t v125;
  char v126;
  _DWORD *v127;
  char v128;
  _DWORD *v129;
  char v130;
  _DWORD *v131;
  char v132;
  _DWORD *v133;
  char v134;
  _DWORD *v135;
  char v136;
  uint64_t v137;

  v137 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v117 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v117, "WebGL2RenderingContext", "invalidateSubFramebuffer");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v117, "WebGL2RenderingContext", "invalidateSubFramebuffer");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 5)
  {
    v52.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v52);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v123);
  if (v123[1])
    return 0;
  v13 = *((_QWORD *)a2 + 7);
  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  v118[0] = v14;
  if ((v13 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v13 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v33 = v124;
    v124 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v32);
      else
        *(_DWORD *)v33 -= 2;
    }
    v30 = 0;
    v31 = 1;
    v122 = 1;
    goto LABEL_42;
  }
  v124 = 0;
  v125 = 0;
  v120 = (WTF::StringImpl *)&v124;
  JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLUnsignedLong>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(this, v13, (uint64_t *)&v120);
  if (!*((_DWORD *)v14 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v14) & 1) == 0)
  {
    v120 = v124;
    v121 = v125;
    v122 = 0;
    goto LABEL_18;
  }
  v54 = v124;
  v31 = 1;
  v122 = 1;
  if (v124)
  {
    v124 = 0;
    LODWORD(v125) = 0;
    WTF::fastFree(v54, v53);
    v31 = v122;
    if (v122)
    {
      v30 = 0;
LABEL_36:
      if (v31 == -1)
        return (_BYTE *)v30;
      goto LABEL_42;
    }
LABEL_18:
    v15 = (WTF::StringImpl *)*((_QWORD *)a2 + 8);
    v124 = v15;
    v16 = (JSC::VM *)*((_QWORD *)this + 7);
    if ((unint64_t)v15 < 0xFFFE000000000000)
    {
      v35 = (unint64_t)v15 - 0x2000000000000;
      if ((unint64_t)v15 - 0x2000000000000 >= 0xFFFC000000000000)
      {
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v124, this);
        v35 = v101;
      }
      v36 = (v35 >> 52) & 0x7FF;
      if ((v36 - 1023) <= 0x53)
      {
        v43 = v35 >> (51 - (v35 >> 52));
        if (v36 > 0x433)
          LODWORD(v43) = v35 << ((v35 >> 52) - 51);
        if (v36 >= 0x41F)
          v44 = v43;
        else
          v44 = (((1 << ((v35 >> 52) + 1)) - 1) & v43) + (1 << ((v35 >> 52) + 1));
        if ((v35 & 0x8000000000000000) == 0)
          v17 = v44;
        else
          v17 = -v44;
      }
      else
      {
        v17 = 0;
      }
    }
    else
    {
      v17 = (uint64_t)v15;
    }
    if (*((_DWORD *)v16 + 20))
    {
      v55 = v17;
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v16);
      v17 = v55;
      if (hasExceptionsAfterHandlingTraps)
      {
        v30 = 0;
LABEL_35:
        v31 = v122;
        goto LABEL_36;
      }
    }
    v18 = (WTF::StringImpl *)*((_QWORD *)a2 + 9);
    v124 = v18;
    v19 = (JSC::VM *)*((_QWORD *)this + 7);
    if ((unint64_t)v18 < 0xFFFE000000000000)
    {
      v37 = (unint64_t)v18 - 0x2000000000000;
      if ((unint64_t)v18 - 0x2000000000000 >= 0xFFFC000000000000)
      {
        v102 = v17;
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v124, this);
        v17 = v102;
        v37 = v103;
      }
      v38 = (v37 >> 52) & 0x7FF;
      if ((v38 - 1023) <= 0x53)
      {
        v45 = v37 >> (51 - (v37 >> 52));
        if (v38 > 0x433)
          LODWORD(v45) = v37 << ((v37 >> 52) - 51);
        if (v38 >= 0x41F)
          v46 = v45;
        else
          v46 = (((1 << ((v37 >> 52) + 1)) - 1) & v45) + (1 << ((v37 >> 52) + 1));
        if ((v37 & 0x8000000000000000) == 0)
          v20 = v46;
        else
          v20 = -v46;
      }
      else
      {
        v20 = 0;
      }
    }
    else
    {
      v20 = (uint64_t)v18;
    }
    if (*((_DWORD *)v19 + 20))
    {
      v57 = v17;
      v58 = v20;
      v59 = JSC::VM::hasExceptionsAfterHandlingTraps(v19);
      v20 = v58;
      v17 = v57;
      if (v59)
      {
        v30 = 0;
        goto LABEL_35;
      }
    }
    v21 = (WTF::StringImpl *)*((_QWORD *)a2 + 10);
    v124 = v21;
    v22 = (JSC::VM *)*((_QWORD *)this + 7);
    if ((unint64_t)v21 < 0xFFFE000000000000)
    {
      v39 = (unint64_t)v21 - 0x2000000000000;
      if ((unint64_t)v21 - 0x2000000000000 >= 0xFFFC000000000000)
      {
        *(_QWORD *)v115 = *((_QWORD *)this + 7);
        v104 = v17;
        v105 = v20;
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v124, this);
        v20 = v105;
        v17 = v104;
        v22 = *(JSC::VM **)v115;
        v39 = v106;
      }
      v40 = (v39 >> 52) & 0x7FF;
      if ((v40 - 1023) <= 0x53)
      {
        v47 = v39 >> (51 - (v39 >> 52));
        if (v40 > 0x433)
          LODWORD(v47) = v39 << ((v39 >> 52) - 51);
        if (v40 >= 0x41F)
          v48 = v47;
        else
          v48 = (((1 << ((v39 >> 52) + 1)) - 1) & v47) + (1 << ((v39 >> 52) + 1));
        if ((v39 & 0x8000000000000000) == 0)
          v23 = v48;
        else
          v23 = -v48;
      }
      else
      {
        v23 = 0;
      }
    }
    else
    {
      v23 = (uint64_t)v21;
    }
    if (*((_DWORD *)v22 + 20))
    {
      v112 = v17;
      v60 = v20;
      v61 = JSC::VM::hasExceptionsAfterHandlingTraps(v22);
      v20 = v60;
      v17 = v112;
      if (v61)
      {
        v30 = 0;
        goto LABEL_35;
      }
    }
    v24 = (WTF::StringImpl *)*((_QWORD *)a2 + 11);
    v124 = v24;
    v25 = (JSC::VM *)*((_QWORD *)this + 7);
    if ((unint64_t)v24 < 0xFFFE000000000000)
    {
      v41 = (unint64_t)v24 - 0x2000000000000;
      if ((unint64_t)v24 - 0x2000000000000 >= 0xFFFC000000000000)
      {
        v107 = this;
        v116 = v17;
        v108 = v20;
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v124, v107);
        v20 = v108;
        v17 = v116;
        v41 = v109;
      }
      v42 = (v41 >> 52) & 0x7FF;
      if ((v42 - 1023) <= 0x53)
      {
        v49 = v41 >> (51 - (v41 >> 52));
        if (v42 > 0x433)
          LODWORD(v49) = v41 << ((v41 >> 52) - 51);
        if (v42 >= 0x41F)
          v50 = v49;
        else
          v50 = (((1 << ((v41 >> 52) + 1)) - 1) & v49) + (1 << ((v41 >> 52) + 1));
        if ((v41 & 0x8000000000000000) == 0)
          v26 = v50;
        else
          v26 = -v50;
      }
      else
      {
        v26 = 0;
      }
    }
    else
    {
      v26 = (uint64_t)v24;
    }
    if (*((_DWORD *)v25 + 20))
    {
      v62 = v25;
      v113 = v17;
      v63 = v20;
      v64 = JSC::VM::hasExceptionsAfterHandlingTraps(v62);
      v20 = v63;
      v17 = v113;
      if (v64)
      {
        v30 = 0;
        goto LABEL_35;
      }
    }
    if (*(_BYTE *)(v12 + 33))
    {
      v110 = v20;
      v114 = v17;
      v111 = (WebCore::CanvasRenderingContext *)(v12 + 8);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v119 = v124;
      v65 = v123[0];
      v66 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v66
        && (v68 = WebCore::InspectorInstrumentation::instrumentingAgents(v66, v67)) != 0
        && (v69 = *(WebCore::InspectorCanvasAgent **)(v68 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v69, v111, v65, (uint64_t)&v124);
      }
      else
      {
        LOBYTE(v124) = 0;
        v126 = 0;
      }
      if (v122)
      {
LABEL_178:
        std::__throw_bad_variant_access[abi:sn180100]();
        goto LABEL_179;
      }
      v70 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v70
        && (v72 = WebCore::InspectorInstrumentation::instrumentingAgents(v70, v71)) != 0
        && (v73 = *(_QWORD *)(v72 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v73, (uint64_t)v111, (uint64_t *)&v120, (uint64_t)&v127);
      }
      else
      {
        LOBYTE(v127) = 0;
        v128 = 0;
      }
      v74 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v74
        && (v76 = WebCore::InspectorInstrumentation::instrumentingAgents(v74, v75)) != 0
        && (v77 = *(WebCore::InspectorCanvasAgent **)(v76 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v77, v111, v114, (uint64_t)&v129);
      }
      else
      {
        LOBYTE(v129) = 0;
        v130 = 0;
      }
      v78 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v78
        && (v80 = WebCore::InspectorInstrumentation::instrumentingAgents(v78, v79)) != 0
        && (v81 = *(WebCore::InspectorCanvasAgent **)(v80 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v81, v111, v110, (uint64_t)&v131);
      }
      else
      {
        LOBYTE(v131) = 0;
        v132 = 0;
      }
      v82 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v82
        && (v84 = WebCore::InspectorInstrumentation::instrumentingAgents(v82, v83)) != 0
        && (v85 = *(WebCore::InspectorCanvasAgent **)(v84 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v85, v111, v23, (uint64_t)&v133);
      }
      else
      {
        LOBYTE(v133) = 0;
        v134 = 0;
      }
      v86 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v86
        && (v88 = WebCore::InspectorInstrumentation::instrumentingAgents(v86, v87)) != 0
        && (v89 = *(WebCore::InspectorCanvasAgent **)(v88 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v89, v111, v26, (uint64_t)&v135);
      }
      else
      {
        LOBYTE(v135) = 0;
        v136 = 0;
      }
      v118[0] = &v124;
      v118[1] = 6;
      v90 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v90)
      {
        v92 = WebCore::InspectorInstrumentation::instrumentingAgents(v90, v91);
        if (v92)
        {
          v93 = *(_QWORD *)(v92 + 96);
          if (v93)
            WebCore::InspectorCanvasAgent::recordAction(v93, v111, (const WTF::StringImpl *)&v119, v118);
        }
      }
      v17 = v114;
      v20 = v110;
      if (v136)
      {
        v94 = v135;
        v135 = 0;
        if (v94)
        {
          if (*v94 == 1)
          {
            WTF::JSONImpl::Value::operator delete();
            v20 = v110;
            v17 = v114;
          }
          else
          {
            --*v94;
          }
        }
      }
      if (v134)
      {
        v95 = v133;
        v133 = 0;
        if (v95)
        {
          if (*v95 == 1)
          {
            WTF::JSONImpl::Value::operator delete();
            v20 = v110;
            v17 = v114;
          }
          else
          {
            --*v95;
          }
        }
      }
      if (v132)
      {
        v96 = v131;
        v131 = 0;
        if (v96)
        {
          if (*v96 == 1)
          {
            WTF::JSONImpl::Value::operator delete();
            v20 = v110;
            v17 = v114;
          }
          else
          {
            --*v96;
          }
        }
      }
      if (v130)
      {
        v97 = v129;
        v129 = 0;
        if (v97)
        {
          if (*v97 == 1)
          {
            WTF::JSONImpl::Value::operator delete();
            v20 = v110;
            v17 = v114;
          }
          else
          {
            --*v97;
          }
        }
      }
      if (v128)
      {
        v98 = v127;
        v127 = 0;
        if (v98)
        {
          if (*v98 == 1)
          {
            WTF::JSONImpl::Value::operator delete();
            v20 = v110;
            v17 = v114;
          }
          else
          {
            --*v98;
          }
        }
      }
      if (v126)
      {
        v99 = v124;
        v124 = 0;
        if (v99)
        {
          if (*(_DWORD *)v99 == 1)
          {
            WTF::JSONImpl::Value::operator delete();
            v20 = v110;
            v17 = v114;
          }
          else
          {
            --*(_DWORD *)v99;
          }
        }
      }
      v100 = v119;
      v119 = 0;
      if (v100)
      {
        if (*(_DWORD *)v100 == 2)
        {
          WTF::StringImpl::destroy(v100, v91);
          v20 = v110;
          v17 = v114;
        }
        else
        {
          *(_DWORD *)v100 -= 2;
        }
      }
    }
    if (!v122)
    {
      v27 = v120;
      v124 = v120;
      v28 = v121;
      v120 = 0;
      v121 = 0;
      v125 = v28;
      WebCore::WebGL2RenderingContext::invalidateSubFramebuffer((WTF::StringImpl *)v12, v123[0], (uint64_t)&v124, v17, v20, v23, v26);
      if (v27)
        WTF::fastFree(v27, v29);
      v30 = 10;
      goto LABEL_35;
    }
    goto LABEL_178;
  }
LABEL_179:
  v30 = 0;
LABEL_42:
  ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E332F398[v31])(&v124, &v120);
  return (_BYTE *)v30;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_readBuffer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)();
  const char *v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  JSValue v18;
  WebCore::InspectorInstrumentation *v19;
  WebCore::ScriptExecutionContext *v20;
  uint64_t v21;
  WebCore::InspectorCanvasAgent *v22;
  WebCore::InspectorInstrumentation *v23;
  WebCore::ScriptExecutionContext *v24;
  uint64_t v25;
  uint64_t v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  JSC::VM *v29;
  _QWORD v30[2];
  WTF::StringImpl *v31;
  _DWORD v32[2];
  _QWORD v33[2];
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v29 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v29, "WebGL2RenderingContext", "readBuffer");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v29, "WebGL2RenderingContext", "readBuffer");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v18.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v18);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v32);
    if (!v32[1])
    {
      if (*(_BYTE *)(v11 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v12 = v32[0];
        v19 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v19
          && (v21 = WebCore::InspectorInstrumentation::instrumentingAgents(v19, v20)) != 0
          && (v22 = *(WebCore::InspectorCanvasAgent **)(v21 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v22, (WebCore::CanvasRenderingContext *)(v11 + 8), v12, (uint64_t)v33);
        }
        else
        {
          LOBYTE(v33[0]) = 0;
          v34 = 0;
        }
        v30[0] = v33;
        v30[1] = 1;
        v23 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v23)
        {
          v25 = WebCore::InspectorInstrumentation::instrumentingAgents(v23, v24);
          if (v25)
          {
            v26 = *(_QWORD *)(v25 + 96);
            if (v26)
              WebCore::InspectorCanvasAgent::recordAction(v26, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v31, v30);
          }
        }
        if (v34)
        {
          v27 = (_DWORD *)v33[0];
          v33[0] = 0;
          if (v27)
          {
            if (*v27 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v27;
          }
        }
        v28 = v31;
        v31 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v24);
          else
            *(_DWORD *)v28 -= 2;
        }
      }
      else
      {
        v12 = v32[0];
      }
      if (*(_BYTE *)(v11 + 364))
        return 10;
      if (*(_QWORD *)(v11 + 928))
        v13 = WTF::RefPtr<WebCore::WebGLFramebuffer,WTF::RawPtrTraits<WebCore::WebGLFramebuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLFramebuffer>>::unspecifiedBoolTypeInstance;
      else
        v13 = 0;
      if ((_DWORD)v12 == 1029)
      {
        if (v13)
        {
          v14 = "BACK is valid for default framebuffer only";
          v15 = (WTF::StringImpl *)v11;
          v16 = 43;
LABEL_26:
          WebCore::WebGLRenderingContextBase::synthesizeGLError(v15, 1282, (uint64_t)"readBuffer", 11, (uint64_t)v14, v16);
          return 10;
        }
        v12 = 36064;
      }
      else if ((_DWORD)v12 && !v13)
      {
        v14 = "default framebuffer only supports NONE or BACK";
        v15 = (WTF::StringImpl *)v11;
        v16 = 47;
        goto LABEL_26;
      }
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v11 + 88) + 1288))(*(_QWORD *)(v11 + 88), v12);
      return 10;
    }
    return 0;
  }
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_getInternalformatParameter(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  JSValue v17;
  unsigned int v18;
  WebCore::InspectorInstrumentation *v19;
  WebCore::ScriptExecutionContext *v20;
  uint64_t v21;
  WebCore::InspectorCanvasAgent *v22;
  unsigned int v23;
  WebCore::InspectorInstrumentation *v24;
  WebCore::ScriptExecutionContext *v25;
  uint64_t v26;
  WebCore::InspectorCanvasAgent *v27;
  unsigned int v28;
  WebCore::InspectorInstrumentation *v29;
  WebCore::ScriptExecutionContext *v30;
  uint64_t v31;
  WebCore::InspectorCanvasAgent *v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  _DWORD *v39;
  WTF::StringImpl *v40;
  JSC::VM *v41;
  _QWORD v42[2];
  int v43;
  unsigned int v44[2];
  unsigned int v45[2];
  unsigned int v46[2];
  WTF::StringImpl *v47;
  _QWORD v48[2];
  uint64_t v49;
  _QWORD v50[2];
  uint64_t v51;
  _QWORD v52[2];
  WebCore *v53;
  uint64_t v54;
  WebCore *v55;
  uint64_t v56;
  WebCore *v57;
  uint64_t v58;
  WebCore *v59;
  uint64_t v60;
  WebCore *v61;
  uint64_t v62;
  WebCore *v63;
  uint64_t v64;
  WebCore *v65;
  uint64_t v66;
  WebCore *v67;
  uint64_t v68;
  WebCore *v69;
  uint64_t v70;
  WebCore *v71;
  uint64_t v72;
  WebCore *v73;
  uint64_t v74;
  WebCore *v75;
  uint64_t v76;
  WebCore *v77;
  uint64_t v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v41 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v41, "WebGL2RenderingContext", "getInternalformatParameter");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v41, "WebGL2RenderingContext", "getInternalformatParameter");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v17.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v17);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v46);
  if (v46[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v45);
  if (v45[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v44);
  if (v44[1])
    return 0;
  if (*(_BYTE *)(v12 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v18 = v46[0];
    v19 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v19
      && (v21 = WebCore::InspectorInstrumentation::instrumentingAgents(v19, v20)) != 0
      && (v22 = *(WebCore::InspectorCanvasAgent **)(v21 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v22, (WebCore::CanvasRenderingContext *)(v12 + 8), v18, (uint64_t)v48);
    }
    else
    {
      LOBYTE(v48[0]) = 0;
      LOBYTE(v49) = 0;
    }
    v23 = v45[0];
    v24 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v24
      && (v26 = WebCore::InspectorInstrumentation::instrumentingAgents(v24, v25)) != 0
      && (v27 = *(WebCore::InspectorCanvasAgent **)(v26 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v27, (WebCore::CanvasRenderingContext *)(v12 + 8), v23, (uint64_t)v50);
    }
    else
    {
      LOBYTE(v50[0]) = 0;
      LOBYTE(v51) = 0;
    }
    v28 = v44[0];
    v29 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v29
      && (v31 = WebCore::InspectorInstrumentation::instrumentingAgents(v29, v30)) != 0
      && (v32 = *(WebCore::InspectorCanvasAgent **)(v31 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v32, (WebCore::CanvasRenderingContext *)(v12 + 8), v28, (uint64_t)v52);
    }
    else
    {
      LOBYTE(v52[0]) = 0;
      LOBYTE(v53) = 0;
    }
    v42[0] = v48;
    v42[1] = 3;
    v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v33)
    {
      v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34);
      if (v35)
      {
        v36 = *(_QWORD *)(v35 + 96);
        if (v36)
          WebCore::InspectorCanvasAgent::recordAction(v36, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v47, v42);
      }
    }
    if ((_BYTE)v53)
    {
      v37 = (_DWORD *)v52[0];
      v52[0] = 0;
      if (v37)
      {
        if (*v37 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v37;
      }
    }
    if ((_BYTE)v51)
    {
      v38 = (_DWORD *)v50[0];
      v50[0] = 0;
      if (v38)
      {
        if (*v38 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v38;
      }
    }
    if ((_BYTE)v49)
    {
      v39 = (_DWORD *)v48[0];
      v48[0] = 0;
      if (v39)
      {
        if (*v39 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v39;
      }
    }
    v40 = v47;
    v47 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WTF::StringImpl::destroy(v40, v34);
      else
        *(_DWORD *)v40 -= 2;
    }
  }
  v13 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  WebCore::WebGL2RenderingContext::getInternalformatParameter(v12, v46[0], v45[0], v44[0], (uint64_t)v42);
  v48[0] = this;
  v48[1] = v13;
  v49 = v13;
  v50[0] = v13;
  v50[1] = this;
  v51 = v13;
  v52[0] = this;
  v52[1] = v13;
  v53 = this;
  v54 = v13;
  v55 = this;
  v56 = v13;
  v57 = this;
  v58 = v13;
  v59 = this;
  v60 = v13;
  v61 = this;
  v62 = v13;
  v63 = this;
  v64 = v13;
  v65 = this;
  v66 = v13;
  v67 = this;
  v68 = v13;
  v69 = this;
  v70 = v13;
  v71 = this;
  v72 = v13;
  v73 = this;
  v74 = v13;
  v75 = this;
  v76 = v13;
  v77 = this;
  v78 = v13;
  if (v43 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v47 = (WTF::StringImpl *)v48;
  v14 = ((uint64_t (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNS8_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS6_6StringENS6_6VectorIbLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSG_IiLm0ESH_Lm16ESI_EENSG_IjLm0ESH_Lm16ESI_EENS6_6RefPtrINS9_21GenericTypedArrayViewINS9_14Float32AdaptorEEENS6_12RawPtrTraitsISP_EENS6_21DefaultRefDerefTraitsISP_EEEENSM_INSN_INS9_12Int32AdaptorEEENSQ_ISW_EENSS_ISW_EEEENSM_INSN_INS9_13Uint32AdaptorEEENSQ_IS11_EENSS_IS11_EEEENSM_INSN_INS9_12Uint8AdaptorEEENSQ_IS16_EENSS_IS16_EEEENSM_INS8_11WebGLBufferENSQ_IS1A_EENSS_IS1A_EEEENSM_INS8_16WebGLFramebufferENSQ_IS1E_EENSS_IS1E_EEEENSM_INS8_12WebGLProgramENSQ_IS1I_EENSS_IS1I_EEEENSM_INS8_10WebGLQueryENSQ_IS1M_EENSS_IS1M_EEEENSM_INS8_17WebGLRenderbufferENSQ_IS1Q_EENSS_IS1Q_EEEENSM_INS8_12WebGLSamplerENSQ_IS1U_EENSS_IS1U_EEEENSM_INS8_12WebGLTextureENSQ_IS1Y_EENSS_IS1Y_EEEENSM_INS8_18WebGLTimerQueryEXTENSQ_IS22_EENSS_IS22_EEEENSM_INS8_22WebGLTransformFeedbackENSQ_IS26_EENSS_IS26_EEEENSM_INS8_22WebGLVertexArrayObjectENSQ_IS2A_EENSS_IS2A_EEEENSM_INS8_25WebGLVertexArrayObjectOESENSQ_IS2E_EENSS_IS2E_EEEEEEEE3__0JZNS8_16convertToJSValueESB_SD_S2K_E3__1ZNS8_16convertToJSValueESB_SD_S2K_E3__2ZNS8_16convertToJSValueESB_SD_S2K_E3__3ZNS8_16convertToJSValueESB_SD_S2K_E3__4ZNS8_16convertToJSValueESB_SD_S2K_E3__5ZNS8_16convertToJSValueESB_SD_S2K_E3__6ZNS8_16convertToJSValueESB_SD_S2K_E3__7ZNS8_16convertToJSValueESB_SD_S2K_E3__8ZNS8_16convertToJSValueESB_SD_S2K_E3__9ZNS8_16convertToJSValueESB_SD_S2K_E4__10ZNS8_16convertToJSValueESB_SD_S2K_E4__11ZNS8_16convertToJSValueESB_SD_S2K_E4__12ZNS8_16convertToJSValueESB_SD_S2K_E4__13ZNS8_16convertToJSValueESB_SD_S2K_E4__14ZNS8_16convertToJSValueESB_SD_S2K_E4__15ZNS8_16convertToJSValueESB_SD_S2K_E4__16ZNS8_16convertToJSValueESB_SD_S2K_E4__17ZNS8_16convertToJSValueESB_SD_S2K_E4__18ZNS8_16convertToJSValueESB_SD_S2K_E4__19ZNS8_16convertToJSValueESB_SD_S2K_E4__20ZNS8_16convertToJSValueESB_SD_S2K_E4__21ZNS8_16convertToJSValueESB_SD_S2K_E4__22ZNS8_16convertToJSValueESB_SD_S2K_E4__23ZNS8_16convertToJSValueESB_SD_S2K_E4__24ZNS8_16convertToJSValueESB_SD_S2K_E4__25EEEEEJRKNS0_6__implIJDnbijxyfSF_SJ_SK_SL_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_S2H_EEEEEEDcOT_DpOT0____fmatrix[v43])(&v47, v42);
  if (v43 != -1)
    off_1E332F3A8[v43](v48, v42);
  return (_BYTE *)v14;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_renderbufferStorageMultisample(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  JSC::VM *v14;
  int v15;
  unint64_t v16;
  JSC::VM *v17;
  int v18;
  unint64_t v19;
  JSC::VM *v20;
  int v21;
  uint64_t v22;
  uint64_t (*v23)();
  const char *v24;
  WTF::StringImpl *v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  int v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v39;
  int v40;
  unint64_t v41;
  int v42;
  JSValue v43;
  unsigned int v44;
  WebCore::InspectorInstrumentation *v45;
  WebCore::ScriptExecutionContext *v46;
  uint64_t v47;
  WebCore::InspectorCanvasAgent *v48;
  WebCore::InspectorInstrumentation *v49;
  WebCore::ScriptExecutionContext *v50;
  uint64_t v51;
  WebCore::InspectorCanvasAgent *v52;
  unsigned int v53;
  WebCore::InspectorInstrumentation *v54;
  WebCore::ScriptExecutionContext *v55;
  uint64_t v56;
  WebCore::InspectorCanvasAgent *v57;
  WebCore::InspectorInstrumentation *v58;
  WebCore::ScriptExecutionContext *v59;
  uint64_t v60;
  WebCore::InspectorCanvasAgent *v61;
  WebCore::InspectorInstrumentation *v62;
  WebCore::ScriptExecutionContext *v63;
  uint64_t v64;
  WebCore::InspectorCanvasAgent *v65;
  WebCore::InspectorInstrumentation *v66;
  WebCore::ScriptExecutionContext *v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  _DWORD *v71;
  _DWORD *v72;
  _DWORD *v73;
  _DWORD *v74;
  WTF::StringImpl *v75;
  unint64_t v76;
  JSC::VM *v77;
  unint64_t v78;
  unint64_t v79;
  WebCore::CanvasRenderingContext *v80;
  JSC::VM *v81;
  _QWORD v82[2];
  WTF::StringImpl *v83;
  int v84[2];
  _DWORD v85[2];
  _QWORD v86[2];
  char v87;
  _DWORD *v88;
  char v89;
  _DWORD *v90;
  char v91;
  _DWORD *v92;
  char v93;
  _DWORD *v94;
  char v95;
  uint64_t v96;

  v96 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v81 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v81, "WebGL2RenderingContext", "renderbufferStorageMultisample");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v81, "WebGL2RenderingContext", "renderbufferStorageMultisample");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 4)
  {
    v43.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v43);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v85);
  if (v85[1])
    return 0;
  v13 = *((_QWORD *)a2 + 7);
  v86[0] = v13;
  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v13 < 0xFFFE000000000000)
  {
    v28 = v13 - 0x2000000000000;
    if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v86, this);
      v28 = v76;
    }
    v29 = (v28 >> 52) & 0x7FF;
    v30 = v29 - 1023;
    v31 = v28 >> (51 - (v28 >> 52));
    if (v29 > 0x433)
      LODWORD(v31) = v28 << ((v28 >> 52) - 51);
    if (v29 >= 0x41F)
      v32 = v31;
    else
      v32 = (((1 << ((v28 >> 52) + 1)) - 1) & v31) + (1 << ((v28 >> 52) + 1));
    if ((v28 & 0x8000000000000000) == 0)
      v33 = v32;
    else
      v33 = -v32;
    if (v30 <= 0x53)
      v15 = v33;
    else
      v15 = 0;
  }
  else
  {
    v15 = v13;
  }
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v84);
  if (v84[1])
    return 0;
  v16 = *((_QWORD *)a2 + 9);
  v86[0] = v16;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v16 < 0xFFFE000000000000)
  {
    v34 = v16 - 0x2000000000000;
    if (v16 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      v77 = (JSC::VM *)*((_QWORD *)this + 7);
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v86, this);
      v17 = v77;
      v34 = v78;
    }
    v35 = (v34 >> 52) & 0x7FF;
    if ((v35 - 1023) <= 0x53)
    {
      v39 = v34 >> (51 - (v34 >> 52));
      if (v35 > 0x433)
        LODWORD(v39) = v34 << ((v34 >> 52) - 51);
      if (v35 >= 0x41F)
        v40 = v39;
      else
        v40 = (((1 << ((v34 >> 52) + 1)) - 1) & v39) + (1 << ((v34 >> 52) + 1));
      if ((v34 & 0x8000000000000000) == 0)
        v18 = v40;
      else
        v18 = -v40;
    }
    else
    {
      v18 = 0;
    }
  }
  else
  {
    v18 = v16;
  }
  if (*((_DWORD *)v17 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v17))
    return 0;
  v19 = *((_QWORD *)a2 + 10);
  v86[0] = v19;
  v20 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v19 < 0xFFFE000000000000)
  {
    v36 = v19 - 0x2000000000000;
    if (v19 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v86, this);
      v36 = v79;
    }
    v37 = (v36 >> 52) & 0x7FF;
    if ((v37 - 1023) <= 0x53)
    {
      v41 = v36 >> (51 - (v36 >> 52));
      if (v37 > 0x433)
        LODWORD(v41) = v36 << ((v36 >> 52) - 51);
      if (v37 >= 0x41F)
        v42 = v41;
      else
        v42 = (((1 << ((v36 >> 52) + 1)) - 1) & v41) + (1 << ((v36 >> 52) + 1));
      if ((v36 & 0x8000000000000000) == 0)
        v21 = v42;
      else
        v21 = -v42;
    }
    else
    {
      v21 = 0;
    }
  }
  else
  {
    v21 = v19;
  }
  if (!*((_DWORD *)v20 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v20))
  {
    if (*(_BYTE *)(v12 + 33))
    {
      v80 = (WebCore::CanvasRenderingContext *)(v12 + 8);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v83 = (WTF::StringImpl *)v86[0];
      v44 = v85[0];
      v45 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v45
        && (v47 = WebCore::InspectorInstrumentation::instrumentingAgents(v45, v46)) != 0
        && (v48 = *(WebCore::InspectorCanvasAgent **)(v47 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v48, v80, v44, (uint64_t)v86);
      }
      else
      {
        LOBYTE(v86[0]) = 0;
        v87 = 0;
      }
      v49 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v49
        && (v51 = WebCore::InspectorInstrumentation::instrumentingAgents(v49, v50)) != 0
        && (v52 = *(WebCore::InspectorCanvasAgent **)(v51 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v52, v80, v15, (uint64_t)&v88);
      }
      else
      {
        LOBYTE(v88) = 0;
        v89 = 0;
      }
      v53 = v84[0];
      v54 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v54
        && (v56 = WebCore::InspectorInstrumentation::instrumentingAgents(v54, v55)) != 0
        && (v57 = *(WebCore::InspectorCanvasAgent **)(v56 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v57, v80, v53, (uint64_t)&v90);
      }
      else
      {
        LOBYTE(v90) = 0;
        v91 = 0;
      }
      v58 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v58
        && (v60 = WebCore::InspectorInstrumentation::instrumentingAgents(v58, v59)) != 0
        && (v61 = *(WebCore::InspectorCanvasAgent **)(v60 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v61, v80, v18, (uint64_t)&v92);
      }
      else
      {
        LOBYTE(v92) = 0;
        v93 = 0;
      }
      v62 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v62
        && (v64 = WebCore::InspectorInstrumentation::instrumentingAgents(v62, v63)) != 0
        && (v65 = *(WebCore::InspectorCanvasAgent **)(v64 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v65, v80, v21, (uint64_t)&v94);
      }
      else
      {
        LOBYTE(v94) = 0;
        v95 = 0;
      }
      v82[0] = v86;
      v82[1] = 5;
      v66 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v66)
      {
        v68 = WebCore::InspectorInstrumentation::instrumentingAgents(v66, v67);
        if (v68)
        {
          v69 = *(_QWORD *)(v68 + 96);
          if (v69)
            WebCore::InspectorCanvasAgent::recordAction(v69, v80, (const WTF::StringImpl *)&v83, v82);
        }
      }
      if (v95)
      {
        v70 = v94;
        v94 = 0;
        if (v70)
        {
          if (*v70 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v70;
        }
      }
      if (v93)
      {
        v71 = v92;
        v92 = 0;
        if (v71)
        {
          if (*v71 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v71;
        }
      }
      if (v91)
      {
        v72 = v90;
        v90 = 0;
        if (v72)
        {
          if (*v72 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v72;
        }
      }
      if (v89)
      {
        v73 = v88;
        v88 = 0;
        if (v73)
        {
          if (*v73 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v73;
        }
      }
      if (v87)
      {
        v74 = (_DWORD *)v86[0];
        v86[0] = 0;
        if (v74)
        {
          if (*v74 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v74;
        }
      }
      v75 = v83;
      v83 = 0;
      if (v75)
      {
        if (*(_DWORD *)v75 == 2)
          WTF::StringImpl::destroy(v75, v67);
        else
          *(_DWORD *)v75 -= 2;
      }
    }
    if (*(_BYTE *)(v12 + 364))
      return 10;
    if (v85[0] == 36161)
    {
      v22 = *(_QWORD *)(v12 + 184);
      v23 = WTF::RefPtr<WebCore::WebGLRenderbuffer,WTF::RawPtrTraits<WebCore::WebGLRenderbuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLRenderbuffer>>::unspecifiedBoolTypeInstance;
      if (!v22)
        v23 = 0;
      if (v23 && *(_DWORD *)(v22 + 24))
      {
        if (((v21 | v18) & 0x80000000) == 0)
        {
          WebCore::WebGL2RenderingContext::renderbufferStorageImpl(v12, 36161, v15, v84[0], v18, v21, (uint64_t)"renderbufferStorageMultisample", 31);
          return 10;
        }
        v24 = "size < 0";
        v25 = (WTF::StringImpl *)v12;
        v26 = 1281;
        v27 = 9;
      }
      else
      {
        v24 = "no bound renderbuffer";
        v25 = (WTF::StringImpl *)v12;
        v26 = 1282;
        v27 = 22;
      }
    }
    else
    {
      v24 = "invalid target";
      v25 = (WTF::StringImpl *)v12;
      v26 = 1280;
      v27 = 15;
    }
    WebCore::WebGLRenderingContextBase::synthesizeGLError(v25, v26, (uint64_t)"renderbufferStorageMultisample", 31, (uint64_t)v24, v27);
    return 10;
  }
  return 0;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_texStorage2D(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  JSC::VM *v14;
  int v15;
  unint64_t v16;
  JSC::VM *v17;
  int v18;
  unint64_t v19;
  JSC::VM *v20;
  int v21;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  int v36;
  JSValue v37;
  unsigned int v38;
  WebCore::InspectorInstrumentation *v39;
  WebCore::ScriptExecutionContext *v40;
  uint64_t v41;
  WebCore::InspectorCanvasAgent *v42;
  WebCore::InspectorInstrumentation *v43;
  WebCore::ScriptExecutionContext *v44;
  uint64_t v45;
  WebCore::InspectorCanvasAgent *v46;
  unsigned int v47;
  WebCore::InspectorInstrumentation *v48;
  WebCore::ScriptExecutionContext *v49;
  uint64_t v50;
  WebCore::InspectorCanvasAgent *v51;
  WebCore::InspectorInstrumentation *v52;
  WebCore::ScriptExecutionContext *v53;
  uint64_t v54;
  WebCore::InspectorCanvasAgent *v55;
  WebCore::InspectorInstrumentation *v56;
  WebCore::ScriptExecutionContext *v57;
  uint64_t v58;
  WebCore::InspectorCanvasAgent *v59;
  WebCore::InspectorInstrumentation *v60;
  WebCore::ScriptExecutionContext *v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  _DWORD *v65;
  _DWORD *v66;
  _DWORD *v67;
  _DWORD *v68;
  WTF::StringImpl *v69;
  unint64_t v70;
  JSC::VM *v71;
  unint64_t v72;
  unint64_t v73;
  WebCore::CanvasRenderingContext *v74;
  JSC::VM *v75;
  _QWORD v76[2];
  WTF::StringImpl *v77;
  unsigned int v78[2];
  unsigned int v79[2];
  _QWORD v80[2];
  char v81;
  _DWORD *v82;
  char v83;
  _DWORD *v84;
  char v85;
  _DWORD *v86;
  char v87;
  _DWORD *v88;
  char v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v75 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v75, "WebGL2RenderingContext", "texStorage2D");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v75, "WebGL2RenderingContext", "texStorage2D");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 4)
  {
    v37.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v37);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v79);
    if (v79[1])
    {
      return 0;
    }
    else
    {
      v13 = *((_QWORD *)a2 + 7);
      v80[0] = v13;
      v14 = (JSC::VM *)*((_QWORD *)this + 7);
      if (v13 < 0xFFFE000000000000)
      {
        v23 = v13 - 0x2000000000000;
        if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
        {
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v80, this);
          v23 = v70;
        }
        v24 = (v23 >> 52) & 0x7FF;
        v25 = v24 - 1023;
        v26 = v23 >> (51 - (v23 >> 52));
        if (v24 > 0x433)
          LODWORD(v26) = v23 << ((v23 >> 52) - 51);
        if (v24 >= 0x41F)
          v27 = v26;
        else
          v27 = (((1 << ((v23 >> 52) + 1)) - 1) & v26) + (1 << ((v23 >> 52) + 1));
        if ((v23 & 0x8000000000000000) == 0)
          v28 = v27;
        else
          v28 = -v27;
        if (v25 <= 0x53)
          v15 = v28;
        else
          v15 = 0;
      }
      else
      {
        v15 = v13;
      }
      if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
      {
        return 0;
      }
      else
      {
        WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v78);
        if (v78[1])
        {
          return 0;
        }
        else
        {
          v16 = *((_QWORD *)a2 + 9);
          v80[0] = v16;
          v17 = (JSC::VM *)*((_QWORD *)this + 7);
          if (v16 < 0xFFFE000000000000)
          {
            v29 = v16 - 0x2000000000000;
            if (v16 - 0x2000000000000 >= 0xFFFC000000000000)
            {
              v71 = (JSC::VM *)*((_QWORD *)this + 7);
              JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v80, this);
              v17 = v71;
              v29 = v72;
            }
            v30 = (v29 >> 52) & 0x7FF;
            if ((v30 - 1023) <= 0x53)
            {
              v33 = v29 >> (51 - (v29 >> 52));
              if (v30 > 0x433)
                LODWORD(v33) = v29 << ((v29 >> 52) - 51);
              if (v30 >= 0x41F)
                v34 = v33;
              else
                v34 = (((1 << ((v29 >> 52) + 1)) - 1) & v33) + (1 << ((v29 >> 52) + 1));
              if ((v29 & 0x8000000000000000) == 0)
                v18 = v34;
              else
                v18 = -v34;
            }
            else
            {
              v18 = 0;
            }
          }
          else
          {
            v18 = v16;
          }
          if (*((_DWORD *)v17 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v17))
          {
            return 0;
          }
          else
          {
            v19 = *((_QWORD *)a2 + 10);
            v80[0] = v19;
            v20 = (JSC::VM *)*((_QWORD *)this + 7);
            if (v19 < 0xFFFE000000000000)
            {
              v31 = v19 - 0x2000000000000;
              if (v19 - 0x2000000000000 >= 0xFFFC000000000000)
              {
                JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v80, this);
                v31 = v73;
              }
              v32 = (v31 >> 52) & 0x7FF;
              if ((v32 - 1023) <= 0x53)
              {
                v35 = v31 >> (51 - (v31 >> 52));
                if (v32 > 0x433)
                  LODWORD(v35) = v31 << ((v31 >> 52) - 51);
                if (v32 >= 0x41F)
                  v36 = v35;
                else
                  v36 = (((1 << ((v31 >> 52) + 1)) - 1) & v35) + (1 << ((v31 >> 52) + 1));
                if ((v31 & 0x8000000000000000) == 0)
                  v21 = v36;
                else
                  v21 = -v36;
              }
              else
              {
                v21 = 0;
              }
            }
            else
            {
              v21 = v19;
            }
            if (*((_DWORD *)v20 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v20))
            {
              return 0;
            }
            else
            {
              if (*(_BYTE *)(v12 + 33))
              {
                v74 = (WebCore::CanvasRenderingContext *)(v12 + 8);
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v77 = (WTF::StringImpl *)v80[0];
                v38 = v79[0];
                v39 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                             + 144))(*(_QWORD *)(v12 + 40));
                if (v39
                  && (v41 = WebCore::InspectorInstrumentation::instrumentingAgents(v39, v40)) != 0
                  && (v42 = *(WebCore::InspectorCanvasAgent **)(v41 + 96)) != 0)
                {
                  WebCore::InspectorCanvasAgent::processArgument(v42, v74, v38, (uint64_t)v80);
                }
                else
                {
                  LOBYTE(v80[0]) = 0;
                  v81 = 0;
                }
                v43 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                             + 144))(*(_QWORD *)(v12 + 40));
                if (v43
                  && (v45 = WebCore::InspectorInstrumentation::instrumentingAgents(v43, v44)) != 0
                  && (v46 = *(WebCore::InspectorCanvasAgent **)(v45 + 96)) != 0)
                {
                  WebCore::InspectorCanvasAgent::processArgument(v46, v74, v15, (uint64_t)&v82);
                }
                else
                {
                  LOBYTE(v82) = 0;
                  v83 = 0;
                }
                v47 = v78[0];
                v48 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                             + 144))(*(_QWORD *)(v12 + 40));
                if (v48
                  && (v50 = WebCore::InspectorInstrumentation::instrumentingAgents(v48, v49)) != 0
                  && (v51 = *(WebCore::InspectorCanvasAgent **)(v50 + 96)) != 0)
                {
                  WebCore::InspectorCanvasAgent::processArgument(v51, v74, v47, (uint64_t)&v84);
                }
                else
                {
                  LOBYTE(v84) = 0;
                  v85 = 0;
                }
                v52 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                             + 144))(*(_QWORD *)(v12 + 40));
                if (v52
                  && (v54 = WebCore::InspectorInstrumentation::instrumentingAgents(v52, v53)) != 0
                  && (v55 = *(WebCore::InspectorCanvasAgent **)(v54 + 96)) != 0)
                {
                  WebCore::InspectorCanvasAgent::processArgument(v55, v74, v18, (uint64_t)&v86);
                }
                else
                {
                  LOBYTE(v86) = 0;
                  v87 = 0;
                }
                v56 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                             + 144))(*(_QWORD *)(v12 + 40));
                if (v56
                  && (v58 = WebCore::InspectorInstrumentation::instrumentingAgents(v56, v57)) != 0
                  && (v59 = *(WebCore::InspectorCanvasAgent **)(v58 + 96)) != 0)
                {
                  WebCore::InspectorCanvasAgent::processArgument(v59, v74, v21, (uint64_t)&v88);
                }
                else
                {
                  LOBYTE(v88) = 0;
                  v89 = 0;
                }
                v76[0] = v80;
                v76[1] = 5;
                v60 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                             + 144))(*(_QWORD *)(v12 + 40));
                if (v60)
                {
                  v62 = WebCore::InspectorInstrumentation::instrumentingAgents(v60, v61);
                  if (v62)
                  {
                    v63 = *(_QWORD *)(v62 + 96);
                    if (v63)
                      WebCore::InspectorCanvasAgent::recordAction(v63, v74, (const WTF::StringImpl *)&v77, v76);
                  }
                }
                if (v89)
                {
                  v64 = v88;
                  v88 = 0;
                  if (v64)
                  {
                    if (*v64 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*v64;
                  }
                }
                if (v87)
                {
                  v65 = v86;
                  v86 = 0;
                  if (v65)
                  {
                    if (*v65 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*v65;
                  }
                }
                if (v85)
                {
                  v66 = v84;
                  v84 = 0;
                  if (v66)
                  {
                    if (*v66 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*v66;
                  }
                }
                if (v83)
                {
                  v67 = v82;
                  v82 = 0;
                  if (v67)
                  {
                    if (*v67 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*v67;
                  }
                }
                if (v81)
                {
                  v68 = (_DWORD *)v80[0];
                  v80[0] = 0;
                  if (v68)
                  {
                    if (*v68 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*v68;
                  }
                }
                v69 = v77;
                v77 = 0;
                if (v69)
                {
                  if (*(_DWORD *)v69 == 2)
                    WTF::StringImpl::destroy(v69, v61);
                  else
                    *(_DWORD *)v69 -= 2;
                }
              }
              WebCore::WebGL2RenderingContext::texStorage2D((WTF::StringImpl *)v12, v79[0], v15, v78[0]);
              return 10;
            }
          }
        }
      }
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_texStorage3D(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  JSC::VM *v14;
  int v15;
  unint64_t v16;
  JSC::VM *v17;
  int v18;
  unint64_t v19;
  JSC::VM *v20;
  int v21;
  unint64_t v22;
  JSC::VM *v23;
  int v24;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  int v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  int v43;
  JSValue v44;
  int v45;
  int v46;
  int v47;
  int v48;
  JSC::VM *v49;
  int v50;
  int hasExceptionsAfterHandlingTraps;
  unsigned int v52;
  WebCore::InspectorInstrumentation *v53;
  WebCore::ScriptExecutionContext *v54;
  uint64_t v55;
  WebCore::InspectorCanvasAgent *v56;
  WebCore::InspectorInstrumentation *v57;
  WebCore::ScriptExecutionContext *v58;
  uint64_t v59;
  WebCore::InspectorCanvasAgent *v60;
  unsigned int v61;
  WebCore::InspectorInstrumentation *v62;
  WebCore::ScriptExecutionContext *v63;
  uint64_t v64;
  WebCore::InspectorCanvasAgent *v65;
  WebCore::InspectorInstrumentation *v66;
  WebCore::ScriptExecutionContext *v67;
  uint64_t v68;
  WebCore::InspectorCanvasAgent *v69;
  WebCore::InspectorInstrumentation *v70;
  WebCore::ScriptExecutionContext *v71;
  uint64_t v72;
  WebCore::InspectorCanvasAgent *v73;
  WebCore::InspectorInstrumentation *v74;
  WebCore::ScriptExecutionContext *v75;
  uint64_t v76;
  WebCore::InspectorCanvasAgent *v77;
  WebCore::InspectorInstrumentation *v78;
  WebCore::ScriptExecutionContext *v79;
  uint64_t v80;
  uint64_t v81;
  _DWORD *v82;
  _DWORD *v83;
  _DWORD *v84;
  _DWORD *v85;
  _DWORD *v86;
  _DWORD *v87;
  WTF::StringImpl *v88;
  unint64_t v89;
  unint64_t v90;
  JSC::VM *v91;
  int v92;
  unint64_t v93;
  JSC::JSGlobalObject *v94;
  int v95;
  unint64_t v96;
  int v97;
  WebCore::CanvasRenderingContext *v98;
  JSC::VM *v99;
  _QWORD v100[2];
  WTF::StringImpl *v101;
  unsigned int v102[2];
  unsigned int v103[2];
  _QWORD v104[2];
  char v105;
  _DWORD *v106;
  char v107;
  _DWORD *v108;
  char v109;
  _DWORD *v110;
  char v111;
  _DWORD *v112;
  char v113;
  _DWORD *v114;
  char v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v99 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v99, "WebGL2RenderingContext", "texStorage3D");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v99, "WebGL2RenderingContext", "texStorage3D");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 5)
  {
    v44.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v44);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v103);
    if (v103[1])
    {
      return 0;
    }
    else
    {
      v13 = *((_QWORD *)a2 + 7);
      v104[0] = v13;
      v14 = (JSC::VM *)*((_QWORD *)this + 7);
      if (v13 < 0xFFFE000000000000)
      {
        v26 = v13 - 0x2000000000000;
        if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
        {
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v104, this);
          v26 = v89;
        }
        v27 = (v26 >> 52) & 0x7FF;
        v28 = v27 - 1023;
        v29 = v26 >> (51 - (v26 >> 52));
        if (v27 > 0x433)
          LODWORD(v29) = v26 << ((v26 >> 52) - 51);
        if (v27 >= 0x41F)
          v30 = v29;
        else
          v30 = (((1 << ((v26 >> 52) + 1)) - 1) & v29) + (1 << ((v26 >> 52) + 1));
        if ((v26 & 0x8000000000000000) == 0)
          v31 = v30;
        else
          v31 = -v30;
        if (v28 <= 0x53)
          v15 = v31;
        else
          v15 = 0;
      }
      else
      {
        v15 = v13;
      }
      if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
      {
        return 0;
      }
      else
      {
        WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v102);
        if (v102[1])
        {
          return 0;
        }
        else
        {
          v16 = *((_QWORD *)a2 + 9);
          v104[0] = v16;
          v17 = (JSC::VM *)*((_QWORD *)this + 7);
          if (v16 < 0xFFFE000000000000)
          {
            v32 = v16 - 0x2000000000000;
            if (v16 - 0x2000000000000 >= 0xFFFC000000000000)
            {
              JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v104, this);
              v32 = v90;
            }
            v33 = (v32 >> 52) & 0x7FF;
            if ((v33 - 1023) <= 0x53)
            {
              v38 = v32 >> (51 - (v32 >> 52));
              if (v33 > 0x433)
                LODWORD(v38) = v32 << ((v32 >> 52) - 51);
              if (v33 >= 0x41F)
                v39 = v38;
              else
                v39 = (((1 << ((v32 >> 52) + 1)) - 1) & v38) + (1 << ((v32 >> 52) + 1));
              if ((v32 & 0x8000000000000000) == 0)
                v18 = v39;
              else
                v18 = -v39;
            }
            else
            {
              v18 = 0;
            }
          }
          else
          {
            v18 = v16;
          }
          if (*((_DWORD *)v17 + 20) && (v45 = v18, v46 = JSC::VM::hasExceptionsAfterHandlingTraps(v17), v18 = v45, v46))
          {
            return 0;
          }
          else
          {
            v19 = *((_QWORD *)a2 + 10);
            v104[0] = v19;
            v20 = (JSC::VM *)*((_QWORD *)this + 7);
            if (v19 < 0xFFFE000000000000)
            {
              v34 = v19 - 0x2000000000000;
              if (v19 - 0x2000000000000 >= 0xFFFC000000000000)
              {
                v91 = (JSC::VM *)*((_QWORD *)this + 7);
                v92 = v18;
                JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v104, this);
                v18 = v92;
                v20 = v91;
                v34 = v93;
              }
              v35 = (v34 >> 52) & 0x7FF;
              if ((v35 - 1023) <= 0x53)
              {
                v40 = v34 >> (51 - (v34 >> 52));
                if (v35 > 0x433)
                  LODWORD(v40) = v34 << ((v34 >> 52) - 51);
                if (v35 >= 0x41F)
                  v41 = v40;
                else
                  v41 = (((1 << ((v34 >> 52) + 1)) - 1) & v40) + (1 << ((v34 >> 52) + 1));
                if ((v34 & 0x8000000000000000) == 0)
                  v21 = v41;
                else
                  v21 = -v41;
              }
              else
              {
                v21 = 0;
              }
            }
            else
            {
              v21 = v19;
            }
            if (*((_DWORD *)v20 + 20)
              && (v47 = v18, v48 = JSC::VM::hasExceptionsAfterHandlingTraps(v20), v18 = v47, v48))
            {
              return 0;
            }
            else
            {
              v22 = *((_QWORD *)a2 + 11);
              v104[0] = v22;
              v23 = (JSC::VM *)*((_QWORD *)this + 7);
              if (v22 < 0xFFFE000000000000)
              {
                v36 = v22 - 0x2000000000000;
                if (v22 - 0x2000000000000 >= 0xFFFC000000000000)
                {
                  v94 = this;
                  v95 = v18;
                  JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v104, v94);
                  v18 = v95;
                  v36 = v96;
                }
                v37 = (v36 >> 52) & 0x7FF;
                if ((v37 - 1023) <= 0x53)
                {
                  v42 = v36 >> (51 - (v36 >> 52));
                  if (v37 > 0x433)
                    LODWORD(v42) = v36 << ((v36 >> 52) - 51);
                  if (v37 >= 0x41F)
                    v43 = v42;
                  else
                    v43 = (((1 << ((v36 >> 52) + 1)) - 1) & v42) + (1 << ((v36 >> 52) + 1));
                  if ((v36 & 0x8000000000000000) == 0)
                    v24 = v43;
                  else
                    v24 = -v43;
                }
                else
                {
                  v24 = 0;
                }
              }
              else
              {
                v24 = v22;
              }
              if (*((_DWORD *)v23 + 20)
                && (v49 = v23,
                    v50 = v18,
                    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v49),
                    v18 = v50,
                    hasExceptionsAfterHandlingTraps))
              {
                return 0;
              }
              else
              {
                if (*(_BYTE *)(v12 + 33))
                {
                  v97 = v18;
                  v98 = (WebCore::CanvasRenderingContext *)(v12 + 8);
                  WTF::StringImpl::createWithoutCopyingNonEmpty();
                  v101 = (WTF::StringImpl *)v104[0];
                  v52 = v103[0];
                  v53 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                               + 144))(*(_QWORD *)(v12 + 40));
                  if (v53
                    && (v55 = WebCore::InspectorInstrumentation::instrumentingAgents(v53, v54)) != 0
                    && (v56 = *(WebCore::InspectorCanvasAgent **)(v55 + 96)) != 0)
                  {
                    WebCore::InspectorCanvasAgent::processArgument(v56, v98, v52, (uint64_t)v104);
                  }
                  else
                  {
                    LOBYTE(v104[0]) = 0;
                    v105 = 0;
                  }
                  v57 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                               + 144))(*(_QWORD *)(v12 + 40));
                  if (v57
                    && (v59 = WebCore::InspectorInstrumentation::instrumentingAgents(v57, v58)) != 0
                    && (v60 = *(WebCore::InspectorCanvasAgent **)(v59 + 96)) != 0)
                  {
                    WebCore::InspectorCanvasAgent::processArgument(v60, v98, v15, (uint64_t)&v106);
                  }
                  else
                  {
                    LOBYTE(v106) = 0;
                    v107 = 0;
                  }
                  v61 = v102[0];
                  v62 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                               + 144))(*(_QWORD *)(v12 + 40));
                  if (v62
                    && (v64 = WebCore::InspectorInstrumentation::instrumentingAgents(v62, v63)) != 0
                    && (v65 = *(WebCore::InspectorCanvasAgent **)(v64 + 96)) != 0)
                  {
                    WebCore::InspectorCanvasAgent::processArgument(v65, v98, v61, (uint64_t)&v108);
                  }
                  else
                  {
                    LOBYTE(v108) = 0;
                    v109 = 0;
                  }
                  v66 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                               + 144))(*(_QWORD *)(v12 + 40));
                  if (v66
                    && (v68 = WebCore::InspectorInstrumentation::instrumentingAgents(v66, v67)) != 0
                    && (v69 = *(WebCore::InspectorCanvasAgent **)(v68 + 96)) != 0)
                  {
                    WebCore::InspectorCanvasAgent::processArgument(v69, v98, v97, (uint64_t)&v110);
                  }
                  else
                  {
                    LOBYTE(v110) = 0;
                    v111 = 0;
                  }
                  v70 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                               + 144))(*(_QWORD *)(v12 + 40));
                  if (v70
                    && (v72 = WebCore::InspectorInstrumentation::instrumentingAgents(v70, v71)) != 0
                    && (v73 = *(WebCore::InspectorCanvasAgent **)(v72 + 96)) != 0)
                  {
                    WebCore::InspectorCanvasAgent::processArgument(v73, v98, v21, (uint64_t)&v112);
                  }
                  else
                  {
                    LOBYTE(v112) = 0;
                    v113 = 0;
                  }
                  v74 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                               + 144))(*(_QWORD *)(v12 + 40));
                  if (v74
                    && (v76 = WebCore::InspectorInstrumentation::instrumentingAgents(v74, v75)) != 0
                    && (v77 = *(WebCore::InspectorCanvasAgent **)(v76 + 96)) != 0)
                  {
                    WebCore::InspectorCanvasAgent::processArgument(v77, v98, v24, (uint64_t)&v114);
                  }
                  else
                  {
                    LOBYTE(v114) = 0;
                    v115 = 0;
                  }
                  v100[0] = v104;
                  v100[1] = 6;
                  v78 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                               + 144))(*(_QWORD *)(v12 + 40));
                  if (v78)
                  {
                    v80 = WebCore::InspectorInstrumentation::instrumentingAgents(v78, v79);
                    if (v80)
                    {
                      v81 = *(_QWORD *)(v80 + 96);
                      if (v81)
                        WebCore::InspectorCanvasAgent::recordAction(v81, v98, (const WTF::StringImpl *)&v101, v100);
                    }
                  }
                  if (v115)
                  {
                    v82 = v114;
                    v114 = 0;
                    if (v82)
                    {
                      if (*v82 == 1)
                        WTF::JSONImpl::Value::operator delete();
                      else
                        --*v82;
                    }
                  }
                  if (v113)
                  {
                    v83 = v112;
                    v112 = 0;
                    if (v83)
                    {
                      if (*v83 == 1)
                        WTF::JSONImpl::Value::operator delete();
                      else
                        --*v83;
                    }
                  }
                  if (v111)
                  {
                    v84 = v110;
                    v110 = 0;
                    if (v84)
                    {
                      if (*v84 == 1)
                        WTF::JSONImpl::Value::operator delete();
                      else
                        --*v84;
                    }
                  }
                  if (v109)
                  {
                    v85 = v108;
                    v108 = 0;
                    if (v85)
                    {
                      if (*v85 == 1)
                        WTF::JSONImpl::Value::operator delete();
                      else
                        --*v85;
                    }
                  }
                  if (v107)
                  {
                    v86 = v106;
                    v106 = 0;
                    if (v86)
                    {
                      if (*v86 == 1)
                        WTF::JSONImpl::Value::operator delete();
                      else
                        --*v86;
                    }
                  }
                  if (v105)
                  {
                    v87 = (_DWORD *)v104[0];
                    v104[0] = 0;
                    if (v87)
                    {
                      if (*v87 == 1)
                        WTF::JSONImpl::Value::operator delete();
                      else
                        --*v87;
                    }
                  }
                  v88 = v101;
                  v101 = 0;
                  if (v88)
                  {
                    if (*(_DWORD *)v88 == 2)
                      WTF::StringImpl::destroy(v88, v79);
                    else
                      *(_DWORD *)v88 -= 2;
                  }
                }
                WebCore::WebGL2RenderingContext::texStorage3D((WTF::StringImpl *)v12, v103[0], v15, v102[0]);
                return 10;
              }
            }
          }
        }
      }
    }
  }
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage3D(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  JSC::ArrayBufferView *v17;
  JSC::VM *v18;
  unsigned int v19;
  JSC::ArrayBufferView *v20;
  JSC::VM *v21;
  JSC::ArrayBufferView *v22;
  JSC::VM *v23;
  JSC::ArrayBufferView *v24;
  JSC::VM *v25;
  JSC::ArrayBufferView *v26;
  JSC::VM *v27;
  uint64_t v28;
  JSC::ArrayBufferView *v29;
  JSC::VM *v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  JSValue v34;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  char **v39;
  BOOL v40;
  uint64_t v41;
  JSC::ArrayBufferView *v42;
  uint64_t (*v43)();
  const char *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  int v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  int v65;
  unint64_t v66;
  int v67;
  int v68;
  unint64_t v69;
  int v70;
  int v71;
  unint64_t v72;
  int v73;
  int v74;
  unint64_t v75;
  int v76;
  int v77;
  uint64_t v78;
  char **v80;
  char **v82;
  char **v84;
  char **v86;
  char **v88;
  unsigned int v91;
  WebCore::InspectorInstrumentation *v92;
  WebCore::ScriptExecutionContext *v93;
  uint64_t v94;
  WebCore::InspectorCanvasAgent *v95;
  WebCore::InspectorInstrumentation *v96;
  WebCore::ScriptExecutionContext *v97;
  uint64_t v98;
  WebCore::InspectorCanvasAgent *v99;
  WebCore::InspectorInstrumentation *v100;
  WebCore::ScriptExecutionContext *v101;
  uint64_t v102;
  WebCore::InspectorCanvasAgent *v103;
  WebCore::InspectorInstrumentation *v104;
  WebCore::ScriptExecutionContext *v105;
  uint64_t v106;
  WebCore::InspectorCanvasAgent *v107;
  WebCore::InspectorInstrumentation *v108;
  WebCore::ScriptExecutionContext *v109;
  uint64_t v110;
  WebCore::InspectorCanvasAgent *v111;
  WebCore::InspectorInstrumentation *v112;
  WebCore::ScriptExecutionContext *v113;
  uint64_t v114;
  WebCore::InspectorCanvasAgent *v115;
  WebCore::InspectorInstrumentation *v116;
  WebCore::ScriptExecutionContext *v117;
  uint64_t v118;
  WebCore::InspectorCanvasAgent *v119;
  unsigned int v120;
  WebCore::InspectorInstrumentation *v121;
  WebCore::ScriptExecutionContext *v122;
  uint64_t v123;
  WebCore::InspectorCanvasAgent *v124;
  unsigned int v125;
  WebCore::InspectorInstrumentation *v126;
  WebCore::ScriptExecutionContext *v127;
  uint64_t v128;
  WebCore::InspectorCanvasAgent *v129;
  WebCore::InspectorInstrumentation *v130;
  WebCore::ScriptExecutionContext *v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  WebCore::InspectorInstrumentation *v135;
  WebCore::ScriptExecutionContext *v136;
  uint64_t v137;
  WebCore::InspectorCanvasAgent *v138;
  WebCore::InspectorInstrumentation *v139;
  WebCore::ScriptExecutionContext *v140;
  uint64_t v141;
  uint64_t v142;
  _DWORD *v143;
  _DWORD *v144;
  _DWORD *v145;
  _DWORD *v146;
  _DWORD *v147;
  _DWORD *v148;
  _DWORD *v149;
  _DWORD *v150;
  _DWORD *v151;
  _DWORD *v152;
  JSC::ArrayBufferView *v153;
  WTF::StringImpl *v154;
  unint64_t v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  unint64_t v160;
  WebCore *v161;
  JSC::JSGlobalObject *v162;
  JSC::CallFrame *v163;
  int v164;
  int v165;
  unsigned int v166;
  unsigned int v167;
  int v168;
  unsigned int v169;
  JSC::VM *v170;
  _QWORD v171[2];
  WTF::StringImpl *v172;
  unsigned int v173[2];
  JSC::ArrayBufferView *v174;
  int v175;
  int v176[2];
  unsigned int v177[2];
  _DWORD v178[2];
  JSC::ArrayBufferView *v179;
  int v180;
  char v181;
  _DWORD *v182;
  char v183;
  _DWORD *v184;
  char v185;
  _DWORD *v186;
  char v187;
  _DWORD *v188;
  char v189;
  _DWORD *v190;
  char v191;
  _DWORD *v192;
  char v193;
  _DWORD *v194;
  char v195;
  _DWORD *v196;
  char v197;
  _DWORD *v198;
  char v199;
  _DWORD *v200;
  char v201;
  uint64_t v202;

  v202 = *MEMORY[0x1E0C80C00];
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v170 = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v170, "WebGL2RenderingContext", "texImage3D");
  v8 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
  v9 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &WebCore::JSWebGL2RenderingContext::s_info && v10 != 0);
  }
  if (!v9)
    return WebCore::throwThisTypeError((int)this, (int)&v170, "WebGL2RenderingContext", "texImage3D");
  v13 = *((int *)a2 + 8) - 1;
  if (v13 >= 0xB)
    v13 = 11;
  if (v13 != 11)
  {
    if (v13 == 10)
    {
      v14 = *((_QWORD *)a2 + 15);
      if ((v14 & 0xFFFFFFFFFFFFFFF7) == 2)
        return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage3D3Body((JSC::VM **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
      if ((v14 & 0xFFFE000000000002) == 0)
      {
        v37 = *(unsigned __int8 *)(v14 + 5);
        if (v37 >= 0x17)
        {
          v38 = *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C);
          v39 = (char **)(16 * v38);
          if ((_DWORD)v38)
            v40 = v39 == &WebCore::JSImageBitmap::s_info;
          else
            v40 = 1;
          if (v40)
          {
            if ((_DWORD)v38)
              return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage3D2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
            if (v37 - 39 <= 0xB)
              return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage3D3Body((JSC::VM **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
          }
          else
          {
            v78 = 16 * v38;
            do
              v78 = *(_QWORD *)(v78 + 16);
            while ((char **)v78 != &WebCore::JSImageBitmap::s_info && v78 != 0);
            if (v78 || v39 == &WebCore::JSImageData::s_info)
              return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage3D2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
            v80 = v39;
            do
              v80 = (char **)v80[2];
            while (v80 != &WebCore::JSImageData::s_info && v80 != 0);
            if (v80 || v39 == &WebCore::JSHTMLImageElement::s_info)
              return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage3D2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
            v82 = v39;
            do
              v82 = (char **)v82[2];
            while (v82 != &WebCore::JSHTMLImageElement::s_info && v82 != 0);
            if (v82 || v39 == &WebCore::JSHTMLCanvasElement::s_info)
              return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage3D2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
            v84 = v39;
            do
              v84 = (char **)v84[2];
            while (v84 != &WebCore::JSHTMLCanvasElement::s_info && v84 != 0);
            if (v84 || v39 == &WebCore::JSHTMLVideoElement::s_info)
              return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage3D2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
            v86 = v39;
            do
              v86 = (char **)v86[2];
            while (v86 != &WebCore::JSHTMLVideoElement::s_info && v86 != 0);
            if (v86 || v39 == &WebCore::JSOffscreenCanvas::s_info)
              return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage3D2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
            v88 = v39;
            do
              v88 = (char **)v88[2];
            while (v88 != &WebCore::JSOffscreenCanvas::s_info && v88 != 0);
            if (v88 || v39 == &WebCore::JSWebCodecsVideoFrame::s_info)
              return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage3D2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
            do
              v39 = (char **)v39[2];
            while (v39 != &WebCore::JSWebCodecsVideoFrame::s_info && v39 != 0);
            if (v39)
              return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage3D2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
            if (v37 - 39 < 0xC)
              return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage3D3Body((JSC::VM **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
          }
        }
      }
      return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage3D1Body((JSC::VM **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
    }
    v34.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v5, this, v34);
  }
  v16 = *(_QWORD *)(v6 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v178);
  if (v178[1])
    return 0;
  v17 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 7);
  v179 = v17;
  v18 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((unint64_t)v17 < 0xFFFE000000000000)
  {
    v47 = (unint64_t)v17 - 0x2000000000000;
    if ((unint64_t)v17 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v179, this);
      v47 = v155;
    }
    v48 = (v47 >> 52) & 0x7FF;
    v49 = v48 - 1023;
    v50 = v47 >> (51 - (v47 >> 52));
    if (v48 > 0x433)
      LODWORD(v50) = v47 << ((v47 >> 52) - 51);
    if (v48 >= 0x41F)
      v51 = v50;
    else
      v51 = (((1 << ((v47 >> 52) + 1)) - 1) & v50) + (1 << ((v47 >> 52) + 1));
    if ((v47 & 0x8000000000000000) == 0)
      v52 = v51;
    else
      v52 = -v51;
    if (v49 <= 0x53)
      v19 = v52;
    else
      v19 = 0;
  }
  else
  {
    v19 = v17;
  }
  if (*((_DWORD *)v18 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v18))
    return 0;
  v20 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 8);
  v179 = v20;
  v21 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((unint64_t)v20 < 0xFFFE000000000000)
  {
    v53 = (unint64_t)v20 - 0x2000000000000;
    if ((unint64_t)v20 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v179, this);
      v53 = v156;
    }
    v54 = (v53 >> 52) & 0x7FF;
    if ((v54 - 1023) <= 0x53)
    {
      v63 = v53 >> (51 - (v53 >> 52));
      if (v54 > 0x433)
        LODWORD(v63) = v53 << ((v53 >> 52) - 51);
      if (v54 >= 0x41F)
        v64 = v63;
      else
        v64 = (((1 << ((v53 >> 52) + 1)) - 1) & v63) + (1 << ((v53 >> 52) + 1));
      if ((v53 & 0x8000000000000000) == 0)
        v65 = v64;
      else
        v65 = -v64;
      v169 = v65;
    }
    else
    {
      v169 = 0;
    }
  }
  else
  {
    v169 = v20;
  }
  if (*((_DWORD *)v21 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v21))
    return 0;
  v22 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 9);
  v179 = v22;
  v23 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((unint64_t)v22 < 0xFFFE000000000000)
  {
    v55 = (unint64_t)v22 - 0x2000000000000;
    if ((unint64_t)v22 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v179, this);
      v55 = v157;
    }
    v56 = (v55 >> 52) & 0x7FF;
    if ((v56 - 1023) <= 0x53)
    {
      v66 = v55 >> (51 - (v55 >> 52));
      if (v56 > 0x433)
        LODWORD(v66) = v55 << ((v55 >> 52) - 51);
      if (v56 >= 0x41F)
        v67 = v66;
      else
        v67 = (((1 << ((v55 >> 52) + 1)) - 1) & v66) + (1 << ((v55 >> 52) + 1));
      if ((v55 & 0x8000000000000000) == 0)
        v68 = v67;
      else
        v68 = -v67;
      v168 = v68;
    }
    else
    {
      v168 = 0;
    }
  }
  else
  {
    v168 = (int)v22;
  }
  if (*((_DWORD *)v23 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v23))
    return 0;
  v24 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 10);
  v179 = v24;
  v25 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((unint64_t)v24 < 0xFFFE000000000000)
  {
    v57 = (unint64_t)v24 - 0x2000000000000;
    if ((unint64_t)v24 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v179, this);
      v57 = v158;
    }
    v58 = (v57 >> 52) & 0x7FF;
    if ((v58 - 1023) <= 0x53)
    {
      v69 = v57 >> (51 - (v57 >> 52));
      if (v58 > 0x433)
        LODWORD(v69) = v57 << ((v57 >> 52) - 51);
      if (v58 >= 0x41F)
        v70 = v69;
      else
        v70 = (((1 << ((v57 >> 52) + 1)) - 1) & v69) + (1 << ((v57 >> 52) + 1));
      if ((v57 & 0x8000000000000000) == 0)
        v71 = v70;
      else
        v71 = -v70;
      v167 = v71;
    }
    else
    {
      v167 = 0;
    }
  }
  else
  {
    v167 = v24;
  }
  if (*((_DWORD *)v25 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v25))
    return 0;
  v26 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 11);
  v179 = v26;
  v27 = (JSC::VM *)*((_QWORD *)this + 7);
  v166 = v19;
  if ((unint64_t)v26 < 0xFFFE000000000000)
  {
    v59 = (unint64_t)v26 - 0x2000000000000;
    if ((unint64_t)v26 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v179, this);
      v59 = v159;
    }
    v60 = (v59 >> 52) & 0x7FF;
    if ((v60 - 1023) <= 0x53)
    {
      v72 = v59 >> (51 - (v59 >> 52));
      if (v60 > 0x433)
        LODWORD(v72) = v59 << ((v59 >> 52) - 51);
      if (v60 >= 0x41F)
        v73 = v72;
      else
        v73 = (((1 << ((v59 >> 52) + 1)) - 1) & v72) + (1 << ((v59 >> 52) + 1));
      if ((v59 & 0x8000000000000000) == 0)
        v74 = v73;
      else
        v74 = -v73;
      v165 = v74;
    }
    else
    {
      v165 = 0;
    }
  }
  else
  {
    v165 = (int)v26;
  }
  v28 = v16;
  if (*((_DWORD *)v27 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v27))
    return 0;
  v29 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 12);
  v179 = v29;
  v30 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((unint64_t)v29 < 0xFFFE000000000000)
  {
    v61 = (unint64_t)v29 - 0x2000000000000;
    if ((unint64_t)v29 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v179, this);
      v61 = v160;
    }
    v62 = (v61 >> 52) & 0x7FF;
    if ((v62 - 1023) <= 0x53)
    {
      v75 = v61 >> (51 - (v61 >> 52));
      if (v62 > 0x433)
        LODWORD(v75) = v61 << ((v61 >> 52) - 51);
      if (v62 >= 0x41F)
        v76 = v75;
      else
        v76 = (((1 << ((v61 >> 52) + 1)) - 1) & v75) + (1 << ((v61 >> 52) + 1));
      if ((v61 & 0x8000000000000000) == 0)
        v77 = v76;
      else
        v77 = -v76;
      v164 = v77;
    }
    else
    {
      v164 = 0;
    }
  }
  else
  {
    v164 = (int)v29;
  }
  if (*((_DWORD *)v30 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v30))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 13), v177);
  if (v177[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 14), v176);
  if (v176[1])
    return 0;
  v32 = *((_QWORD *)a2 + 15);
  v174 = (JSC::ArrayBufferView *)*((_QWORD *)this + 7);
  if ((v32 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(v32 + 5) - 39 > 0xB
    || (*(_BYTE *)(v32 + 40) & 6) != 0)
  {
    v171[0] = 0;
LABEL_43:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v174, 9, "srcData", 8, "WebGL2RenderingContext", 23, v31, "texImage3D", 11, "ArrayBufferView", 16);
    v33 = 1;
    v180 = 1;
    v171[0] = 0;
    goto LABEL_58;
  }
  JSC::JSArrayBufferView::possiblySharedImpl((JSC::JSArrayBufferView *)v32);
  if (!v171[0])
    goto LABEL_43;
  v33 = 0;
  v179 = (JSC::ArrayBufferView *)v171[0];
  v180 = 0;
LABEL_58:
  LOBYTE(v174) = 0;
  v175 = -1;
  ((void (*)(_QWORD *, JSC::ArrayBufferView **, JSC::ArrayBufferView **))off_1E332F388[v33])(v171, &v174, &v179);
  v175 = v33;
  if (v180 != -1)
  {
    ((void (*)(_QWORD *, JSC::ArrayBufferView **))off_1E332F378[v180])(v171, &v179);
    v33 = v175;
  }
  if (v33)
  {
    v36 = 0;
LABEL_80:
    if (v33 != -1)
      ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView **, uint64_t))off_1E332F378[v33])(&v179, &v174, v41);
    return (_BYTE *)v36;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 16), v173);
  if (v173[1])
  {
    v36 = 0;
LABEL_79:
    v33 = v175;
    goto LABEL_80;
  }
  if (*(_BYTE *)(v28 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v172 = v179;
    v91 = v178[0];
    v92 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v28 + 40) + 144))(*(_QWORD *)(v28 + 40));
    if (v92
      && (v94 = WebCore::InspectorInstrumentation::instrumentingAgents(v92, v93)) != 0
      && (v95 = *(WebCore::InspectorCanvasAgent **)(v94 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v95, (WebCore::CanvasRenderingContext *)(v28 + 8), v91, (uint64_t)&v179);
    }
    else
    {
      LOBYTE(v179) = 0;
      v181 = 0;
    }
    v96 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v28 + 40) + 144))(*(_QWORD *)(v28 + 40));
    if (v96
      && (v98 = WebCore::InspectorInstrumentation::instrumentingAgents(v96, v97)) != 0
      && (v99 = *(WebCore::InspectorCanvasAgent **)(v98 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v99, (WebCore::CanvasRenderingContext *)(v28 + 8), v166, (uint64_t)&v182);
    }
    else
    {
      LOBYTE(v182) = 0;
      v183 = 0;
    }
    v100 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v28 + 40) + 144))(*(_QWORD *)(v28 + 40));
    if (v100
      && (v102 = WebCore::InspectorInstrumentation::instrumentingAgents(v100, v101)) != 0
      && (v103 = *(WebCore::InspectorCanvasAgent **)(v102 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v103, (WebCore::CanvasRenderingContext *)(v28 + 8), v169, (uint64_t)&v184);
    }
    else
    {
      LOBYTE(v184) = 0;
      v185 = 0;
    }
    v104 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v28 + 40) + 144))(*(_QWORD *)(v28 + 40));
    if (v104
      && (v106 = WebCore::InspectorInstrumentation::instrumentingAgents(v104, v105)) != 0
      && (v107 = *(WebCore::InspectorCanvasAgent **)(v106 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v107, (WebCore::CanvasRenderingContext *)(v28 + 8), v168, (uint64_t)&v186);
    }
    else
    {
      LOBYTE(v186) = 0;
      v187 = 0;
    }
    v108 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v28 + 40) + 144))(*(_QWORD *)(v28 + 40));
    if (v108
      && (v110 = WebCore::InspectorInstrumentation::instrumentingAgents(v108, v109)) != 0
      && (v111 = *(WebCore::InspectorCanvasAgent **)(v110 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v111, (WebCore::CanvasRenderingContext *)(v28 + 8), v167, (uint64_t)&v188);
    }
    else
    {
      LOBYTE(v188) = 0;
      v189 = 0;
    }
    v112 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v28 + 40) + 144))(*(_QWORD *)(v28 + 40));
    if (v112
      && (v114 = WebCore::InspectorInstrumentation::instrumentingAgents(v112, v113)) != 0
      && (v115 = *(WebCore::InspectorCanvasAgent **)(v114 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v115, (WebCore::CanvasRenderingContext *)(v28 + 8), v165, (uint64_t)&v190);
    }
    else
    {
      LOBYTE(v190) = 0;
      v191 = 0;
    }
    v116 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v28 + 40) + 144))(*(_QWORD *)(v28 + 40));
    if (v116
      && (v118 = WebCore::InspectorInstrumentation::instrumentingAgents(v116, v117)) != 0
      && (v119 = *(WebCore::InspectorCanvasAgent **)(v118 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v119, (WebCore::CanvasRenderingContext *)(v28 + 8), v164, (uint64_t)&v192);
    }
    else
    {
      LOBYTE(v192) = 0;
      v193 = 0;
    }
    v120 = v177[0];
    v121 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v28 + 40) + 144))(*(_QWORD *)(v28 + 40));
    if (v121
      && (v123 = WebCore::InspectorInstrumentation::instrumentingAgents(v121, v122)) != 0
      && (v124 = *(WebCore::InspectorCanvasAgent **)(v123 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v124, (WebCore::CanvasRenderingContext *)(v28 + 8), v120, (uint64_t)&v194);
    }
    else
    {
      LOBYTE(v194) = 0;
      v195 = 0;
    }
    v125 = v176[0];
    v126 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v28 + 40) + 144))(*(_QWORD *)(v28 + 40));
    if (v126
      && (v128 = WebCore::InspectorInstrumentation::instrumentingAgents(v126, v127)) != 0
      && (v129 = *(WebCore::InspectorCanvasAgent **)(v128 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v129, (WebCore::CanvasRenderingContext *)(v28 + 8), v125, (uint64_t)&v196);
    }
    else
    {
      LOBYTE(v196) = 0;
      v197 = 0;
    }
    if (v175)
      goto LABEL_356;
    v130 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v28 + 40) + 144))(*(_QWORD *)(v28 + 40));
    if (v130
      && (v132 = WebCore::InspectorInstrumentation::instrumentingAgents(v130, v131)) != 0
      && (v133 = *(_QWORD *)(v132 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v133, v28 + 8, (uint64_t)&v198);
    }
    else
    {
      LOBYTE(v198) = 0;
      v199 = 0;
    }
    v134 = v173[0];
    v135 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v28 + 40) + 144))(*(_QWORD *)(v28 + 40));
    if (v135
      && (v137 = WebCore::InspectorInstrumentation::instrumentingAgents(v135, v136)) != 0
      && (v138 = *(WebCore::InspectorCanvasAgent **)(v137 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v138, (WebCore::CanvasRenderingContext *)(v28 + 8), v134, (uint64_t)&v200);
    }
    else
    {
      LOBYTE(v200) = 0;
      v201 = 0;
    }
    v171[0] = &v179;
    v171[1] = 11;
    v139 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v28 + 40) + 144))(*(_QWORD *)(v28 + 40));
    if (v139)
    {
      v141 = WebCore::InspectorInstrumentation::instrumentingAgents(v139, v140);
      if (v141)
      {
        v142 = *(_QWORD *)(v141 + 96);
        if (v142)
          WebCore::InspectorCanvasAgent::recordAction(v142, (WebCore::CanvasRenderingContext *)(v28 + 8), (const WTF::StringImpl *)&v172, v171);
      }
    }
    if (v201)
    {
      v143 = v200;
      v200 = 0;
      if (v143)
      {
        if (*v143 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v143;
      }
    }
    if (v199)
    {
      v144 = v198;
      v198 = 0;
      if (v144)
      {
        if (*v144 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v144;
      }
    }
    if (v197)
    {
      v145 = v196;
      v196 = 0;
      if (v145)
      {
        if (*v145 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v145;
      }
    }
    if (v195)
    {
      v146 = v194;
      v194 = 0;
      if (v146)
      {
        if (*v146 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v146;
      }
    }
    if (v193)
    {
      v147 = v192;
      v192 = 0;
      if (v147)
      {
        if (*v147 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v147;
      }
    }
    if (v191)
    {
      v148 = v190;
      v190 = 0;
      if (v148)
      {
        if (*v148 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v148;
      }
    }
    if (v189)
    {
      v149 = v188;
      v188 = 0;
      if (v149)
      {
        if (*v149 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v149;
      }
    }
    if (v187)
    {
      v150 = v186;
      v186 = 0;
      if (v150)
      {
        if (*v150 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v150;
      }
    }
    if (v185)
    {
      v151 = v184;
      v184 = 0;
      if (v151)
      {
        if (*v151 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v151;
      }
    }
    if (v183)
    {
      v152 = v182;
      v182 = 0;
      if (v152)
      {
        if (*v152 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v152;
      }
    }
    if (v181)
    {
      v153 = v179;
      v179 = 0;
      if (v153)
      {
        if (*(_DWORD *)v153 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v153;
      }
    }
    v154 = v172;
    v172 = 0;
    if (v154)
    {
      if (*(_DWORD *)v154 == 2)
        WTF::StringImpl::destroy(v154, v140);
      else
        *(_DWORD *)v154 -= 2;
    }
  }
  if (!v175)
  {
    v41 = v178[0];
    v42 = v174;
    v174 = 0;
    v179 = v42;
    if (!*(_BYTE *)(v28 + 364))
    {
      if (*(_QWORD *)(v28 + 976))
        v43 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
      else
        v43 = 0;
      if (v43)
      {
        v44 = "a buffer is bound to PIXEL_UNPACK_BUFFER";
        v45 = (WTF::StringImpl *)v28;
        v46 = 41;
      }
      else
      {
        if (!*(_BYTE *)(v28 + 344) && !*(_BYTE *)(v28 + 345))
        {
          WebCore::WebGLRenderingContextBase::texImageArrayBufferViewHelper((_QWORD *)v28, 2, v178[0], v166, v169, v168, v167, v165, v164, v177[0], v176[0], 0, 0, 0, &v179, 2, v173[0]);
          v42 = v179;
          goto LABEL_75;
        }
        v44 = "FLIP_Y or PREMULTIPLY_ALPHA isn't allowed for uploading 3D textures";
        v45 = (WTF::StringImpl *)v28;
        v46 = 68;
      }
      WebCore::WebGLRenderingContextBase::synthesizeGLError(v45, 1282, (uint64_t)"texImage3D", 11, (uint64_t)v44, v46);
    }
LABEL_75:
    v179 = 0;
    if (v42)
    {
      if (*(_DWORD *)v42 == 1)
        JSC::ArrayBufferView::operator delete();
      else
        --*(_DWORD *)v42;
    }
    v36 = 10;
    goto LABEL_79;
  }
LABEL_356:
  v161 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage3D(v161, v162, v163);
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage3D(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unint64_t v12;
  uint64_t v13;
  JSValue v15;
  unsigned int v16;
  uint64_t v17;
  char **v18;
  BOOL v19;
  uint64_t v20;
  char **v22;
  char **v24;
  char **v26;
  char **v28;
  char **v30;
  JSC::VM *v33;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v33 = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) == 0)
  {
    v7 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
    v8 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
    v9 = (char **)(16 * v7);
    if ((_DWORD)v7)
      v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
    else
      v10 = 1;
    if (!v10)
    {
      do
      {
        v9 = (char **)v9[2];
        v8 = v9 != 0;
      }
      while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
    }
    if (v8)
    {
      v12 = *((int *)a2 + 8) - 1;
      if (v12 >= 0xC)
        v12 = 12;
      if (v12 == 12)
        return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage3D3Body((JSC::VM **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
      if (v12 != 11)
      {
        v15.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
        return (_BYTE *)JSC::VM::throwException(v5, this, v15);
      }
      v13 = *((_QWORD *)a2 + 16);
      if ((v13 & 0xFFFFFFFFFFFFFFF7) == 2)
        return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage3D3Body((JSC::VM **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
      if ((v13 & 0xFFFE000000000002) == 0)
      {
        v16 = *(unsigned __int8 *)(v13 + 5);
        if (v16 >= 0x17)
        {
          v17 = *(unsigned int *)(16 * (*(_DWORD *)v13 & 0xFFFFFFFE) + 0x4C);
          v18 = (char **)(16 * v17);
          if ((_DWORD)v17)
            v19 = v18 == &WebCore::JSImageBitmap::s_info;
          else
            v19 = 1;
          if (v19)
          {
            if ((_DWORD)v17)
              return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage3D2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
            if (v16 - 39 <= 0xB)
              return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage3D3Body((JSC::VM **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
          }
          else
          {
            v20 = 16 * v17;
            do
              v20 = *(_QWORD *)(v20 + 16);
            while ((char **)v20 != &WebCore::JSImageBitmap::s_info && v20 != 0);
            if (v20 || v18 == &WebCore::JSImageData::s_info)
              return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage3D2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
            v22 = v18;
            do
              v22 = (char **)v22[2];
            while (v22 != &WebCore::JSImageData::s_info && v22 != 0);
            if (v22 || v18 == &WebCore::JSHTMLImageElement::s_info)
              return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage3D2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
            v24 = v18;
            do
              v24 = (char **)v24[2];
            while (v24 != &WebCore::JSHTMLImageElement::s_info && v24 != 0);
            if (v24 || v18 == &WebCore::JSHTMLCanvasElement::s_info)
              return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage3D2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
            v26 = v18;
            do
              v26 = (char **)v26[2];
            while (v26 != &WebCore::JSHTMLCanvasElement::s_info && v26 != 0);
            if (v26 || v18 == &WebCore::JSHTMLVideoElement::s_info)
              return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage3D2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
            v28 = v18;
            do
              v28 = (char **)v28[2];
            while (v28 != &WebCore::JSHTMLVideoElement::s_info && v28 != 0);
            if (v28 || v18 == &WebCore::JSOffscreenCanvas::s_info)
              return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage3D2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
            v30 = v18;
            do
              v30 = (char **)v30[2];
            while (v30 != &WebCore::JSOffscreenCanvas::s_info && v30 != 0);
            if (v30 || v18 == &WebCore::JSWebCodecsVideoFrame::s_info)
              return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage3D2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
            do
              v18 = (char **)v18[2];
            while (v18 != &WebCore::JSWebCodecsVideoFrame::s_info && v18 != 0);
            if (v18)
              return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage3D2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
            if (v16 - 39 < 0xC)
              return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage3D3Body((JSC::VM **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
          }
        }
      }
      return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage3D1Body((JSC::VM **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
    }
  }
  return WebCore::throwThisTypeError((int)this, (int)&v33, "WebGL2RenderingContext", "texSubImage3D");
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_copyTexSubImage3D(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  unint64_t v16;
  JSC::VM *v17;
  uint64_t v18;
  unint64_t v19;
  JSC::VM *v20;
  uint64_t v21;
  unint64_t v22;
  JSC::VM *v23;
  uint64_t v24;
  unint64_t v25;
  JSC::VM *v26;
  uint64_t v27;
  unint64_t v28;
  JSC::VM *v29;
  uint64_t v30;
  unint64_t v31;
  JSC::VM *v32;
  uint64_t v33;
  unint64_t v34;
  JSC::VM *v35;
  int v36;
  unint64_t v37;
  JSC::VM *v38;
  int v39;
  WTF::StringImpl *v40;
  unint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unsigned int v63;
  unint64_t v64;
  unsigned int v65;
  unint64_t v66;
  unsigned int v67;
  unint64_t v68;
  unsigned int v69;
  unint64_t v70;
  unsigned int v71;
  unint64_t v72;
  int v73;
  unint64_t v74;
  int v75;
  JSValue v76;
  uint64_t v77;
  int v78;
  JSC::VM *v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  JSC::VM *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int hasExceptionsAfterHandlingTraps;
  JSC::VM *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  JSC::VM *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  JSC::VM *v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  JSC::VM *v102;
  uint64_t v103;
  int v104;
  JSC::VM *v105;
  uint64_t v106;
  int v107;
  unsigned int v108;
  WebCore::InspectorInstrumentation *v109;
  WebCore::ScriptExecutionContext *v110;
  uint64_t v111;
  WebCore::InspectorCanvasAgent *v112;
  WebCore::InspectorInstrumentation *v113;
  WebCore::ScriptExecutionContext *v114;
  uint64_t v115;
  WebCore::InspectorCanvasAgent *v116;
  WebCore::InspectorInstrumentation *v117;
  WebCore::ScriptExecutionContext *v118;
  uint64_t v119;
  WebCore::InspectorCanvasAgent *v120;
  WebCore::InspectorInstrumentation *v121;
  WebCore::ScriptExecutionContext *v122;
  uint64_t v123;
  WebCore::InspectorCanvasAgent *v124;
  WebCore::InspectorInstrumentation *v125;
  WebCore::ScriptExecutionContext *v126;
  uint64_t v127;
  WebCore::InspectorCanvasAgent *v128;
  WebCore::InspectorInstrumentation *v129;
  WebCore::ScriptExecutionContext *v130;
  uint64_t v131;
  WebCore::InspectorCanvasAgent *v132;
  WebCore::InspectorInstrumentation *v133;
  WebCore::ScriptExecutionContext *v134;
  uint64_t v135;
  WebCore::InspectorCanvasAgent *v136;
  WebCore::InspectorInstrumentation *v137;
  WebCore::ScriptExecutionContext *v138;
  uint64_t v139;
  WebCore::InspectorCanvasAgent *v140;
  WebCore::InspectorInstrumentation *v141;
  WebCore::ScriptExecutionContext *v142;
  uint64_t v143;
  WebCore::InspectorCanvasAgent *v144;
  WebCore::InspectorInstrumentation *v145;
  WebCore::ScriptExecutionContext *v146;
  uint64_t v147;
  uint64_t v148;
  _DWORD *v149;
  _DWORD *v150;
  _DWORD *v151;
  _DWORD *v152;
  _DWORD *v153;
  _DWORD *v154;
  _DWORD *v155;
  _DWORD *v156;
  _DWORD *v157;
  WTF::StringImpl *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  JSC::JSGlobalObject *v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int v169;
  WebCore::CanvasRenderingContext *v170;
  int v171;
  int v172;
  int v173;
  int v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  unsigned int v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  WebCore::WebGL2RenderingContext *v215;
  JSC::VM *v216;
  _QWORD v217[2];
  WTF::StringImpl *v218;
  unsigned int v219[2];
  _QWORD v220[2];
  char v221;
  _DWORD *v222;
  char v223;
  _DWORD *v224;
  char v225;
  _DWORD *v226;
  char v227;
  _DWORD *v228;
  char v229;
  _DWORD *v230;
  char v231;
  _DWORD *v232;
  char v233;
  _DWORD *v234;
  char v235;
  _DWORD *v236;
  char v237;
  uint64_t v238;

  v238 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v216 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v216, "WebGL2RenderingContext", "copyTexSubImage3D");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v216, "WebGL2RenderingContext", "copyTexSubImage3D");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 8)
  {
    v76.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v76);
  }
  else
  {
    v215 = *(WebCore::WebGL2RenderingContext **)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v219);
    if (v219[1])
    {
      return 0;
    }
    else
    {
      v16 = *((_QWORD *)a2 + 7);
      v220[0] = v16;
      v17 = (JSC::VM *)*((_QWORD *)this + 7);
      if (v16 < 0xFFFE000000000000)
      {
        v42 = v16 - 0x2000000000000;
        if (v16 - 0x2000000000000 >= 0xFFFC000000000000)
        {
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v220, this);
          v42 = v12.n128_u64[0];
        }
        v43 = (v42 >> 52) & 0x7FF;
        v44 = v43 - 1023;
        v45 = v42 >> (51 - (v42 >> 52));
        if (v43 > 0x433)
          LODWORD(v45) = v42 << ((v42 >> 52) - 51);
        if (v43 >= 0x41F)
          v46 = v45;
        else
          v46 = (((1 << ((v42 >> 52) + 1)) - 1) & v45) + (1 << ((v42 >> 52) + 1));
        if ((v42 & 0x8000000000000000) == 0)
          v47 = v46;
        else
          v47 = -v46;
        if (v44 <= 0x53)
          v18 = v47;
        else
          v18 = 0;
      }
      else
      {
        v18 = v16;
      }
      if (*((_DWORD *)v17 + 20) && (v77 = v18, v78 = JSC::VM::hasExceptionsAfterHandlingTraps(v17), v18 = v77, v78))
      {
        return 0;
      }
      else
      {
        v19 = *((_QWORD *)a2 + 8);
        v220[0] = v19;
        v20 = (JSC::VM *)*((_QWORD *)this + 7);
        if (v19 < 0xFFFE000000000000)
        {
          v48 = v19 - 0x2000000000000;
          if (v19 - 0x2000000000000 >= 0xFFFC000000000000)
          {
            v159 = v18;
            JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v220, this);
            v18 = v159;
            v48 = v12.n128_u64[0];
          }
          v49 = (v48 >> 52) & 0x7FF;
          if ((v49 - 1023) <= 0x53)
          {
            v62 = v48 >> (51 - (v48 >> 52));
            if (v49 > 0x433)
              LODWORD(v62) = v48 << ((v48 >> 52) - 51);
            if (v49 >= 0x41F)
              v63 = v62;
            else
              v63 = (((1 << ((v48 >> 52) + 1)) - 1) & v62) + (1 << ((v48 >> 52) + 1));
            if ((v48 & 0x8000000000000000) == 0)
              v21 = v63;
            else
              v21 = -v63;
          }
          else
          {
            v21 = 0;
          }
        }
        else
        {
          v21 = v19;
        }
        if (*((_DWORD *)v20 + 20)
          && (v79 = v20,
              v80 = v18,
              v81 = v21,
              v82 = JSC::VM::hasExceptionsAfterHandlingTraps(v79),
              v21 = v81,
              v18 = v80,
              v82))
        {
          return 0;
        }
        else
        {
          v22 = *((_QWORD *)a2 + 9);
          v220[0] = v22;
          v23 = (JSC::VM *)*((_QWORD *)this + 7);
          if (v22 < 0xFFFE000000000000)
          {
            v50 = v22 - 0x2000000000000;
            if (v22 - 0x2000000000000 >= 0xFFFC000000000000)
            {
              v160 = v18;
              v161 = v21;
              JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v220, this);
              v21 = v161;
              v18 = v160;
              v50 = v12.n128_u64[0];
            }
            v51 = (v50 >> 52) & 0x7FF;
            if ((v51 - 1023) <= 0x53)
            {
              v64 = v50 >> (51 - (v50 >> 52));
              if (v51 > 0x433)
                LODWORD(v64) = v50 << ((v50 >> 52) - 51);
              if (v51 >= 0x41F)
                v65 = v64;
              else
                v65 = (((1 << ((v50 >> 52) + 1)) - 1) & v64) + (1 << ((v50 >> 52) + 1));
              if ((v50 & 0x8000000000000000) == 0)
                v24 = v65;
              else
                v24 = -v65;
            }
            else
            {
              v24 = 0;
            }
          }
          else
          {
            v24 = v22;
          }
          if (!*((_DWORD *)v23 + 20))
            goto LABEL_23;
          v83 = v23;
          v84 = v18;
          v85 = v21;
          v86 = v24;
          hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v83);
          v24 = v86;
          v21 = v85;
          v18 = v84;
          if (hasExceptionsAfterHandlingTraps)
          {
            return 0;
          }
          else
          {
LABEL_23:
            v25 = *((_QWORD *)a2 + 10);
            v220[0] = v25;
            v26 = (JSC::VM *)*((_QWORD *)this + 7);
            if (v25 < 0xFFFE000000000000)
            {
              v52 = v25 - 0x2000000000000;
              if (v25 - 0x2000000000000 >= 0xFFFC000000000000)
              {
                v162 = v18;
                v163 = v21;
                v192 = v24;
                JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v220, this);
                v24 = v192;
                v21 = v163;
                v18 = v162;
                v52 = v12.n128_u64[0];
              }
              v53 = (v52 >> 52) & 0x7FF;
              if ((v53 - 1023) <= 0x53)
              {
                v66 = v52 >> (51 - (v52 >> 52));
                if (v53 > 0x433)
                  LODWORD(v66) = v52 << ((v52 >> 52) - 51);
                if (v53 >= 0x41F)
                  v67 = v66;
                else
                  v67 = (((1 << ((v52 >> 52) + 1)) - 1) & v66) + (1 << ((v52 >> 52) + 1));
                if ((v52 & 0x8000000000000000) == 0)
                  v27 = v67;
                else
                  v27 = -v67;
              }
              else
              {
                v27 = 0;
              }
            }
            else
            {
              v27 = v25;
            }
            if (!*((_DWORD *)v26 + 20))
              goto LABEL_26;
            v88 = v26;
            v205 = v18;
            v89 = v21;
            v90 = v24;
            v91 = v27;
            v92 = JSC::VM::hasExceptionsAfterHandlingTraps(v88);
            v27 = v91;
            v24 = v90;
            v21 = v89;
            v18 = v205;
            if (v92)
            {
              return 0;
            }
            else
            {
LABEL_26:
              v28 = *((_QWORD *)a2 + 11);
              v220[0] = v28;
              v29 = (JSC::VM *)*((_QWORD *)this + 7);
              if (v28 < 0xFFFE000000000000)
              {
                v54 = v28 - 0x2000000000000;
                if (v28 - 0x2000000000000 >= 0xFFFC000000000000)
                {
                  v211 = v18;
                  v164 = v21;
                  v193 = v24;
                  v178 = v27;
                  JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v220, this);
                  v27 = v178;
                  v24 = v193;
                  v21 = v164;
                  v18 = v211;
                  v54 = v12.n128_u64[0];
                }
                v55 = (v54 >> 52) & 0x7FF;
                if ((v55 - 1023) <= 0x53)
                {
                  v68 = v54 >> (51 - (v54 >> 52));
                  if (v55 > 0x433)
                    LODWORD(v68) = v54 << ((v54 >> 52) - 51);
                  if (v55 >= 0x41F)
                    v69 = v68;
                  else
                    v69 = (((1 << ((v54 >> 52) + 1)) - 1) & v68) + (1 << ((v54 >> 52) + 1));
                  if ((v54 & 0x8000000000000000) == 0)
                    v30 = v69;
                  else
                    v30 = -v69;
                }
                else
                {
                  v30 = 0;
                }
              }
              else
              {
                v30 = v28;
              }
              if (!*((_DWORD *)v29 + 20))
                goto LABEL_29;
              v93 = v29;
              v197 = v30;
              v206 = v18;
              v94 = v21;
              v95 = v24;
              v96 = v27;
              v97 = JSC::VM::hasExceptionsAfterHandlingTraps(v93);
              v30 = v197;
              v18 = v206;
              v27 = v96;
              v24 = v95;
              v21 = v94;
              if (v97)
              {
                return 0;
              }
              else
              {
LABEL_29:
                v31 = *((_QWORD *)a2 + 12);
                v220[0] = v31;
                v32 = (JSC::VM *)*((_QWORD *)this + 7);
                if (v31 < 0xFFFE000000000000)
                {
                  v56 = v31 - 0x2000000000000;
                  if (v31 - 0x2000000000000 >= 0xFFFC000000000000)
                  {
                    v202 = v30;
                    v212 = v18;
                    v165 = v21;
                    v194 = v24;
                    v179 = v27;
                    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v220, this);
                    v24 = v194;
                    v30 = v202;
                    v27 = v179;
                    v21 = v165;
                    v18 = v212;
                    v56 = v12.n128_u64[0];
                  }
                  v57 = (v56 >> 52) & 0x7FF;
                  if ((v57 - 1023) <= 0x53)
                  {
                    v70 = v56 >> (51 - (v56 >> 52));
                    if (v57 > 0x433)
                      LODWORD(v70) = v56 << ((v56 >> 52) - 51);
                    if (v57 >= 0x41F)
                      v71 = v70;
                    else
                      v71 = (((1 << ((v56 >> 52) + 1)) - 1) & v70) + (1 << ((v56 >> 52) + 1));
                    if ((v56 & 0x8000000000000000) == 0)
                      v33 = v71;
                    else
                      v33 = -v71;
                  }
                  else
                  {
                    v33 = 0;
                  }
                }
                else
                {
                  v33 = v31;
                }
                if (!*((_DWORD *)v32 + 20))
                  goto LABEL_32;
                v98 = v32;
                v198 = v30;
                v207 = v18;
                v99 = v21;
                v182 = v33;
                v188 = v24;
                v100 = v27;
                v101 = JSC::VM::hasExceptionsAfterHandlingTraps(v98);
                v33 = v182;
                v24 = v188;
                v30 = v198;
                v18 = v207;
                v27 = v100;
                v21 = v99;
                if (v101)
                {
                  return 0;
                }
                else
                {
LABEL_32:
                  v34 = *((_QWORD *)a2 + 13);
                  v220[0] = v34;
                  v35 = (JSC::VM *)*((_QWORD *)this + 7);
                  if (v34 < 0xFFFE000000000000)
                  {
                    v58 = v34 - 0x2000000000000;
                    if (v34 - 0x2000000000000 >= 0xFFFC000000000000)
                    {
                      v203 = v30;
                      v213 = v18;
                      v169 = v21;
                      v186 = v33;
                      v195 = v24;
                      v180 = v27;
                      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v220, this);
                      v27 = v180;
                      v33 = v186;
                      v24 = v195;
                      v30 = v203;
                      v21 = v169;
                      v18 = v213;
                      v58 = v12.n128_u64[0];
                    }
                    v59 = (v58 >> 52) & 0x7FF;
                    if ((v59 - 1023) <= 0x53)
                    {
                      v72 = v58 >> (51 - (v58 >> 52));
                      if (v59 > 0x433)
                        LODWORD(v72) = v58 << ((v58 >> 52) - 51);
                      if (v59 >= 0x41F)
                        v73 = v72;
                      else
                        v73 = (((1 << ((v58 >> 52) + 1)) - 1) & v72) + (1 << ((v58 >> 52) + 1));
                      if ((v58 & 0x8000000000000000) == 0)
                        v36 = v73;
                      else
                        v36 = -v73;
                    }
                    else
                    {
                      v36 = 0;
                    }
                  }
                  else
                  {
                    v36 = v34;
                  }
                  if (!*((_DWORD *)v35 + 20))
                    goto LABEL_35;
                  v102 = v35;
                  v199 = v30;
                  v208 = v18;
                  v103 = v21;
                  v183 = v33;
                  v189 = v24;
                  v171 = v36;
                  v175 = v27;
                  v104 = JSC::VM::hasExceptionsAfterHandlingTraps(v102);
                  v36 = v171;
                  v27 = v175;
                  v33 = v183;
                  v24 = v189;
                  v30 = v199;
                  v18 = v208;
                  v21 = v103;
                  if (v104)
                  {
                    return 0;
                  }
                  else
                  {
LABEL_35:
                    v37 = *((_QWORD *)a2 + 14);
                    v220[0] = v37;
                    v38 = (JSC::VM *)*((_QWORD *)this + 7);
                    if (v37 < 0xFFFE000000000000)
                    {
                      v60 = v37 - 0x2000000000000;
                      if (v37 - 0x2000000000000 >= 0xFFFC000000000000)
                      {
                        v166 = this;
                        v204 = v30;
                        v214 = v18;
                        v167 = v21;
                        v187 = v33;
                        v196 = v24;
                        v174 = v36;
                        v181 = v27;
                        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v220, v166);
                        v36 = v174;
                        v27 = v181;
                        v33 = v187;
                        v24 = v196;
                        v30 = v204;
                        v18 = v214;
                        v21 = v167;
                        v60 = v12.n128_u64[0];
                      }
                      v61 = (v60 >> 52) & 0x7FF;
                      if ((v61 - 1023) <= 0x53)
                      {
                        v74 = v60 >> (51 - (v60 >> 52));
                        if (v61 > 0x433)
                          LODWORD(v74) = v60 << ((v60 >> 52) - 51);
                        if (v61 >= 0x41F)
                          v75 = v74;
                        else
                          v75 = (((1 << ((v60 >> 52) + 1)) - 1) & v74) + (1 << ((v60 >> 52) + 1));
                        if ((v60 & 0x8000000000000000) == 0)
                          v39 = v75;
                        else
                          v39 = -v75;
                      }
                      else
                      {
                        v39 = 0;
                      }
                    }
                    else
                    {
                      v39 = v37;
                    }
                    if (!*((_DWORD *)v38 + 20))
                      goto LABEL_38;
                    v105 = v38;
                    v200 = v30;
                    v209 = v18;
                    v106 = v21;
                    v184 = v33;
                    v190 = v24;
                    v172 = v36;
                    v176 = v27;
                    v107 = JSC::VM::hasExceptionsAfterHandlingTraps(v105);
                    v36 = v172;
                    v27 = v176;
                    v33 = v184;
                    v24 = v190;
                    v30 = v200;
                    v18 = v209;
                    v21 = v106;
                    if (v107)
                    {
                      return 0;
                    }
                    else
                    {
LABEL_38:
                      v40 = v215;
                      if (*((_BYTE *)v215 + 33))
                      {
                        v173 = v36;
                        v177 = v27;
                        v185 = v33;
                        v191 = v24;
                        v201 = v30;
                        v210 = v18;
                        v168 = v21;
                        v170 = (WebCore::WebGL2RenderingContext *)((char *)v215 + 8);
                        WTF::StringImpl::createWithoutCopyingNonEmpty();
                        v218 = (WTF::StringImpl *)v220[0];
                        v108 = v219[0];
                        v109 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v215 + 5) + 144))(*((_QWORD *)v215 + 5));
                        if (v109
                          && (v111 = WebCore::InspectorInstrumentation::instrumentingAgents(v109, v110)) != 0
                          && (v112 = *(WebCore::InspectorCanvasAgent **)(v111 + 96)) != 0)
                        {
                          WebCore::InspectorCanvasAgent::processArgument(v112, v170, v108, (uint64_t)v220);
                        }
                        else
                        {
                          LOBYTE(v220[0]) = 0;
                          v221 = 0;
                        }
                        v40 = v215;
                        v113 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v215 + 5) + 144))(*((_QWORD *)v215 + 5));
                        if (v113
                          && (v115 = WebCore::InspectorInstrumentation::instrumentingAgents(v113, v114)) != 0
                          && (v116 = *(WebCore::InspectorCanvasAgent **)(v115 + 96)) != 0)
                        {
                          WebCore::InspectorCanvasAgent::processArgument(v116, v170, v210, (uint64_t)&v222);
                        }
                        else
                        {
                          LOBYTE(v222) = 0;
                          v223 = 0;
                        }
                        v117 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v215 + 5) + 144))(*((_QWORD *)v215 + 5));
                        if (v117
                          && (v119 = WebCore::InspectorInstrumentation::instrumentingAgents(v117, v118)) != 0
                          && (v120 = *(WebCore::InspectorCanvasAgent **)(v119 + 96)) != 0)
                        {
                          WebCore::InspectorCanvasAgent::processArgument(v120, v170, v168, (uint64_t)&v224);
                        }
                        else
                        {
                          LOBYTE(v224) = 0;
                          v225 = 0;
                        }
                        v121 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v215 + 5) + 144))(*((_QWORD *)v215 + 5));
                        if (v121
                          && (v123 = WebCore::InspectorInstrumentation::instrumentingAgents(v121, v122)) != 0
                          && (v124 = *(WebCore::InspectorCanvasAgent **)(v123 + 96)) != 0)
                        {
                          WebCore::InspectorCanvasAgent::processArgument(v124, v170, v191, (uint64_t)&v226);
                        }
                        else
                        {
                          LOBYTE(v226) = 0;
                          v227 = 0;
                        }
                        v125 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v215 + 5) + 144))(*((_QWORD *)v215 + 5));
                        if (v125
                          && (v127 = WebCore::InspectorInstrumentation::instrumentingAgents(v125, v126)) != 0
                          && (v128 = *(WebCore::InspectorCanvasAgent **)(v127 + 96)) != 0)
                        {
                          WebCore::InspectorCanvasAgent::processArgument(v128, v170, v177, (uint64_t)&v228);
                        }
                        else
                        {
                          LOBYTE(v228) = 0;
                          v229 = 0;
                        }
                        v129 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v215 + 5) + 144))(*((_QWORD *)v215 + 5));
                        if (v129
                          && (v131 = WebCore::InspectorInstrumentation::instrumentingAgents(v129, v130)) != 0
                          && (v132 = *(WebCore::InspectorCanvasAgent **)(v131 + 96)) != 0)
                        {
                          WebCore::InspectorCanvasAgent::processArgument(v132, v170, v201, (uint64_t)&v230);
                        }
                        else
                        {
                          LOBYTE(v230) = 0;
                          v231 = 0;
                        }
                        v133 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v215 + 5) + 144))(*((_QWORD *)v215 + 5));
                        if (v133
                          && (v135 = WebCore::InspectorInstrumentation::instrumentingAgents(v133, v134)) != 0
                          && (v136 = *(WebCore::InspectorCanvasAgent **)(v135 + 96)) != 0)
                        {
                          WebCore::InspectorCanvasAgent::processArgument(v136, v170, v185, (uint64_t)&v232);
                        }
                        else
                        {
                          LOBYTE(v232) = 0;
                          v233 = 0;
                        }
                        v137 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v215 + 5) + 144))(*((_QWORD *)v215 + 5));
                        if (v137
                          && (v139 = WebCore::InspectorInstrumentation::instrumentingAgents(v137, v138)) != 0
                          && (v140 = *(WebCore::InspectorCanvasAgent **)(v139 + 96)) != 0)
                        {
                          WebCore::InspectorCanvasAgent::processArgument(v140, v170, v173, (uint64_t)&v234);
                        }
                        else
                        {
                          LOBYTE(v234) = 0;
                          v235 = 0;
                        }
                        v141 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v215 + 5) + 144))(*((_QWORD *)v215 + 5));
                        if (v141
                          && (v143 = WebCore::InspectorInstrumentation::instrumentingAgents(v141, v142)) != 0
                          && (v144 = *(WebCore::InspectorCanvasAgent **)(v143 + 96)) != 0)
                        {
                          WebCore::InspectorCanvasAgent::processArgument(v144, v170, v39, (uint64_t)&v236);
                        }
                        else
                        {
                          LOBYTE(v236) = 0;
                          v237 = 0;
                        }
                        v217[0] = v220;
                        v217[1] = 9;
                        v145 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v215 + 5) + 144))(*((_QWORD *)v215 + 5));
                        if (v145)
                        {
                          v147 = WebCore::InspectorInstrumentation::instrumentingAgents(v145, v146);
                          if (v147)
                          {
                            v148 = *(_QWORD *)(v147 + 96);
                            if (v148)
                              WebCore::InspectorCanvasAgent::recordAction(v148, v170, (const WTF::StringImpl *)&v218, v217);
                          }
                        }
                        v30 = v201;
                        v18 = v210;
                        v21 = v168;
                        v33 = v185;
                        v24 = v191;
                        v36 = v173;
                        v27 = v177;
                        if (v237)
                        {
                          v149 = v236;
                          v236 = 0;
                          if (v149)
                          {
                            if (*v149 == 1)
                            {
                              WTF::JSONImpl::Value::operator delete();
                              v36 = v173;
                              v27 = v177;
                              v33 = v185;
                              v24 = v191;
                              v30 = v201;
                              v18 = v210;
                              v21 = v168;
                            }
                            else
                            {
                              --*v149;
                            }
                          }
                        }
                        if (v235)
                        {
                          v150 = v234;
                          v234 = 0;
                          if (v150)
                          {
                            if (*v150 == 1)
                            {
                              WTF::JSONImpl::Value::operator delete();
                              v36 = v173;
                              v27 = v177;
                              v33 = v185;
                              v24 = v191;
                              v30 = v201;
                              v18 = v210;
                              v21 = v168;
                            }
                            else
                            {
                              --*v150;
                            }
                          }
                        }
                        if (v233)
                        {
                          v151 = v232;
                          v232 = 0;
                          if (v151)
                          {
                            if (*v151 == 1)
                            {
                              WTF::JSONImpl::Value::operator delete();
                              v36 = v173;
                              v27 = v177;
                              v33 = v185;
                              v24 = v191;
                              v30 = v201;
                              v18 = v210;
                              v21 = v168;
                            }
                            else
                            {
                              --*v151;
                            }
                          }
                        }
                        if (v231)
                        {
                          v152 = v230;
                          v230 = 0;
                          if (v152)
                          {
                            if (*v152 == 1)
                            {
                              WTF::JSONImpl::Value::operator delete();
                              v36 = v173;
                              v27 = v177;
                              v33 = v185;
                              v24 = v191;
                              v30 = v201;
                              v18 = v210;
                              v21 = v168;
                            }
                            else
                            {
                              --*v152;
                            }
                          }
                        }
                        if (v229)
                        {
                          v153 = v228;
                          v228 = 0;
                          if (v153)
                          {
                            if (*v153 == 1)
                            {
                              WTF::JSONImpl::Value::operator delete();
                              v36 = v173;
                              v27 = v177;
                              v33 = v185;
                              v24 = v191;
                              v30 = v201;
                              v18 = v210;
                              v21 = v168;
                            }
                            else
                            {
                              --*v153;
                            }
                          }
                        }
                        if (v227)
                        {
                          v154 = v226;
                          v226 = 0;
                          if (v154)
                          {
                            if (*v154 == 1)
                            {
                              WTF::JSONImpl::Value::operator delete();
                              v36 = v173;
                              v27 = v177;
                              v33 = v185;
                              v24 = v191;
                              v30 = v201;
                              v18 = v210;
                              v21 = v168;
                            }
                            else
                            {
                              --*v154;
                            }
                          }
                        }
                        if (v225)
                        {
                          v155 = v224;
                          v224 = 0;
                          if (v155)
                          {
                            if (*v155 == 1)
                            {
                              WTF::JSONImpl::Value::operator delete();
                              v36 = v173;
                              v27 = v177;
                              v33 = v185;
                              v24 = v191;
                              v30 = v201;
                              v18 = v210;
                              v21 = v168;
                            }
                            else
                            {
                              --*v155;
                            }
                          }
                        }
                        if (v223)
                        {
                          v156 = v222;
                          v222 = 0;
                          if (v156)
                          {
                            if (*v156 == 1)
                            {
                              WTF::JSONImpl::Value::operator delete();
                              v36 = v173;
                              v27 = v177;
                              v33 = v185;
                              v24 = v191;
                              v30 = v201;
                              v18 = v210;
                              v21 = v168;
                            }
                            else
                            {
                              --*v156;
                            }
                          }
                        }
                        if (v221)
                        {
                          v157 = (_DWORD *)v220[0];
                          v220[0] = 0;
                          if (v157)
                          {
                            if (*v157 == 1)
                            {
                              WTF::JSONImpl::Value::operator delete();
                              v36 = v173;
                              v27 = v177;
                              v33 = v185;
                              v24 = v191;
                              v30 = v201;
                              v18 = v210;
                              v21 = v168;
                            }
                            else
                            {
                              --*v157;
                            }
                          }
                        }
                        v158 = v218;
                        v218 = 0;
                        if (v158)
                        {
                          if (*(_DWORD *)v158 == 2)
                          {
                            WTF::StringImpl::destroy(v158, v146);
                            v36 = v173;
                            v27 = v177;
                            v33 = v185;
                            v24 = v191;
                            v30 = v201;
                            v18 = v210;
                            v21 = v168;
                          }
                          else
                          {
                            *(_DWORD *)v158 -= 2;
                          }
                        }
                      }
                      WebCore::WebGL2RenderingContext::copyTexSubImage3D(v40, v219[0], v18, v21, v24, v27, v30, v33, v12, v13, v14, v15, __SPAIR64__(v39, v36));
                      return 10;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_compressedTexImage3D(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unint64_t v12;
  JSValue v13;
  uint64_t v15;
  _QWORD v16[2];

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v16[0] = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)v16, "WebGL2RenderingContext", "compressedTexImage3D");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)v16, "WebGL2RenderingContext", "compressedTexImage3D");
  v16[1] = v5;
  v12 = *((int *)a2 + 8) - 1;
  if (v12 >= 0xA)
    v12 = 10;
  if (v12 == 8)
    return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_compressedTexImage3D2Body((JSC::ArrayBufferView **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
  if (v12 != 9)
  {
    if (v12 != 10)
    {
      v13.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
      return (_BYTE *)JSC::VM::throwException(v5, this, v13);
    }
    return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_compressedTexImage3D2Body((JSC::ArrayBufferView **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
  }
  v15 = *((_QWORD *)a2 + 13);
  if ((v15 & 0xFFFE000000000002) == 0 && *(unsigned __int8 *)(v15 + 5) - 39 <= 0xB)
    return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_compressedTexImage3D2Body((JSC::ArrayBufferView **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
  return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_compressedTexImage3D1Body((JSC::VM **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_compressedTexSubImage3D(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  unint64_t v12;
  JSValue v13;
  uint64_t v15;
  JSC::VM *v16;

  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v16 = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v16, "WebGL2RenderingContext", "compressedTexSubImage3D");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v16, "WebGL2RenderingContext", "compressedTexSubImage3D");
  v12 = *((int *)a2 + 8) - 1;
  if (v12 >= 0xC)
    v12 = 12;
  switch(v12)
  {
    case 0xCuLL:
      return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_compressedTexSubImage3D2Body((JSC::ArrayBufferView **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
    case 0xBuLL:
      v15 = *((_QWORD *)a2 + 15);
      if ((v15 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v15 + 5) - 39 > 0xB)
        return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_compressedTexSubImage3D1Body((JSC::VM **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
      return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_compressedTexSubImage3D2Body((JSC::ArrayBufferView **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
    case 0xAuLL:
      return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_compressedTexSubImage3D2Body((JSC::ArrayBufferView **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
  }
  v13.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
  return (_BYTE *)JSC::VM::throwException(v5, this, v13);
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_getFragDataLocation(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  WTF::StringImpl *v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v36;
  unsigned int v37;
  JSValue v39;
  WebCore::InspectorInstrumentation *v40;
  WebCore::ScriptExecutionContext *v41;
  uint64_t v42;
  uint64_t v43;
  WebCore::InspectorInstrumentation *v44;
  WebCore::ScriptExecutionContext *v45;
  uint64_t v46;
  WebCore::InspectorCanvasAgent *v47;
  WebCore::InspectorInstrumentation *v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  _DWORD *v52;
  WTF::StringImpl *v53;
  WebCore *v54;
  JSC::JSGlobalObject *v55;
  JSC::CallFrame *v56;
  JSC::VM *v57;
  WTF::StringImpl *v58[2];
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  int v61;
  _QWORD v62[2];
  char v63;
  _DWORD *v64;
  char v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v57 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v57, "WebGL2RenderingContext", "getFragDataLocation");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v57, "WebGL2RenderingContext", "getFragDataLocation");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v39.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v39);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v62[0] = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSWebGLProgram::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSWebGLProgram::s_info && v20 != 0);
  }
  if (!v19 || (v24 = *(_QWORD *)(v17 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v62, 0, "program", 8, "WebGL2RenderingContext", 23, a8, "getFragDataLocation", 20, "WebGLProgram", 13);
    return 0;
  }
  v25 = *((_QWORD *)a2 + 7);
  v62[0] = v25;
  if ((v25 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v25 + 5) == 2)
  {
    v26 = *(WTF::StringImpl **)(v25 + 8);
    if ((v26 & 1) != 0)
    {
      v26 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v25, this);
      if (!v26)
        goto LABEL_31;
    }
    else if (!v26)
    {
LABEL_31:
      v58[0] = v26;
      goto LABEL_32;
    }
    *(_DWORD *)v26 += 2;
    goto LABEL_31;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v62, this);
LABEL_32:
  if (*((_DWORD *)v9 + 20))
  {
    v27 = v58[0];
    if (JSC::VM::hasExceptionsAfterHandlingTraps(v9))
    {
      v61 = 1;
      v58[0] = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
          WTF::StringImpl::destroy(v27, a2);
        else
          *(_DWORD *)v27 -= 2;
      }
      v23 = 0;
      v34 = 1;
LABEL_48:
      ((void (*)(_QWORD *, WTF::StringImpl **))off_1E3321590[v34])(v62, &v60);
      return (_BYTE *)v23;
    }
  }
  else
  {
    v27 = v58[0];
  }
  v60 = v27;
  v61 = 0;
  if (!*(_BYTE *)(v16 + 33))
  {
LABEL_35:
    v60 = 0;
    v62[0] = v27;
    if (!*(_BYTE *)(v16 + 364))
    {
      v28 = *(_QWORD *)(v24 + 16);
      if (v28)
      {
        v29 = *(_QWORD *)(v28 + 8);
        if (v29)
          v28 = v29 - 8;
        else
          v28 = 0;
      }
      if (v28 == v16)
      {
        v36 = *(unsigned int *)(v24 + 24);
        if ((_DWORD)v36)
        {
          v37 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *))(**(_QWORD **)(v16 + 88) + 1400))(*(_QWORD *)(v16 + 88), v36, v62);
          v27 = (WTF::StringImpl *)v62[0];
          v23 = v37 | 0xFFFE000000000000;
LABEL_44:
          v62[0] = 0;
          if (v27)
          {
            if (*(_DWORD *)v27 == 2)
              WTF::StringImpl::destroy(v27, a2);
            else
              *(_DWORD *)v27 -= 2;
          }
          v34 = v61;
          if (v61 == -1)
            return (_BYTE *)v23;
          goto LABEL_48;
        }
        v30 = "attempt to use a deleted object";
        v31 = (WTF::StringImpl *)v16;
        v32 = 1281;
        v33 = 32;
      }
      else
      {
        v30 = "object does not belong to this context";
        v31 = (WTF::StringImpl *)v16;
        v32 = 1282;
        v33 = 39;
      }
      WebCore::WebGLRenderingContextBase::synthesizeGLError(v31, v32, (uint64_t)"getFragDataLocation", 20, (uint64_t)v30, v33);
    }
    v23 = 0xFFFE0000FFFFFFFFLL;
    goto LABEL_44;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  v40 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
  if (v40
    && (v42 = WebCore::InspectorInstrumentation::instrumentingAgents(v40, v41)) != 0
    && (v43 = *(_QWORD *)(v42 + 96)) != 0)
  {
    WebCore::InspectorCanvasAgent::processArgument(v43, (WTF::StringImpl *)(v16 + 8), v24, (uint64_t)v62);
  }
  else
  {
    LOBYTE(v62[0]) = 0;
    v63 = 0;
  }
  v44 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
  if (v44
    && (v46 = WebCore::InspectorInstrumentation::instrumentingAgents(v44, v45)) != 0
    && (v47 = *(WebCore::InspectorCanvasAgent **)(v46 + 96)) != 0)
  {
    WebCore::InspectorCanvasAgent::processArgument(v47, (WebCore::CanvasRenderingContext *)(v16 + 8), (int **)&v60, (uint64_t)&v64);
  }
  else
  {
    LOBYTE(v64) = 0;
    v65 = 0;
  }
  v58[0] = (WTF::StringImpl *)v62;
  v58[1] = (WTF::StringImpl *)2;
  v48 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
  if (v48)
  {
    v49 = WebCore::InspectorInstrumentation::instrumentingAgents(v48, a2);
    if (v49)
    {
      v50 = *(_QWORD *)(v49 + 96);
      if (v50)
        WebCore::InspectorCanvasAgent::recordAction(v50, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v59, v58);
    }
  }
  if (v65)
  {
    v51 = v64;
    v64 = 0;
    if (v51)
    {
      if (*v51 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v51;
    }
  }
  if (v63)
  {
    v52 = (_DWORD *)v62[0];
    v62[0] = 0;
    if (v52)
    {
      if (*v52 == 1)
        WTF::JSONImpl::Value::operator delete();
      else
        --*v52;
    }
  }
  v53 = v59;
  v59 = 0;
  if (v53)
  {
    if (*(_DWORD *)v53 == 2)
      WTF::StringImpl::destroy(v53, a2);
    else
      *(_DWORD *)v53 -= 2;
  }
  if (!v61)
  {
    v27 = v60;
    goto LABEL_35;
  }
  v54 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform1ui(v54, v55, v56);
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform1ui(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  JSValue v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  WebCore::InspectorCanvasAgent *v35;
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  uint64_t v39;
  _DWORD *v40;
  _DWORD *v41;
  WTF::StringImpl *v42;
  JSC::VM *v43;
  _QWORD v44[2];
  WTF::StringImpl *v45;
  _DWORD v46[2];
  _QWORD v47[2];
  char v48;
  _DWORD *v49;
  char v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v43 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v43, "WebGL2RenderingContext", "uniform1ui");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v43, "WebGL2RenderingContext", "uniform1ui");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v27);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v18 = 0;
    }
    else
    {
      v47[0] = v9;
      if ((v17 & 0xFFFE000000000002) != 0)
        goto LABEL_26;
      v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
      v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
      v21 = (char **)(16 * v19);
      if ((_DWORD)v19)
        v22 = v21 == &WebCore::JSWebGLUniformLocation::s_info;
      else
        v22 = 1;
      if (!v22)
      {
        do
        {
          v21 = (char **)v21[2];
          v20 = v21 != 0;
        }
        while (v21 != &WebCore::JSWebGLUniformLocation::s_info && v21 != 0);
      }
      if (!v20 || (v18 = *(_QWORD *)(v17 + 24)) == 0)
      {
LABEL_26:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v47, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniform1ui", 11, "WebGLUniformLocation", 21);
        return 0;
      }
    }
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v46);
    if (v46[1])
    {
      return 0;
    }
    else
    {
      if (*(_BYTE *)(v16 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
        if (v28
          && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
          && (v31 = *(_QWORD *)(v30 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v31, (WTF::StringImpl *)(v16 + 8), v18, (uint64_t)v47);
        }
        else
        {
          LOBYTE(v47[0]) = 0;
          v48 = 0;
        }
        v25 = v46[0];
        v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
        if (v32
          && (v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33)) != 0
          && (v35 = *(WebCore::InspectorCanvasAgent **)(v34 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v35, (WebCore::CanvasRenderingContext *)(v16 + 8), v25, (uint64_t)&v49);
        }
        else
        {
          LOBYTE(v49) = 0;
          v50 = 0;
        }
        v44[0] = v47;
        v44[1] = 2;
        v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
        if (v36)
        {
          v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37);
          if (v38)
          {
            v39 = *(_QWORD *)(v38 + 96);
            if (v39)
              WebCore::InspectorCanvasAgent::recordAction(v39, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v45, v44);
          }
        }
        if (v50)
        {
          v40 = v49;
          v49 = 0;
          if (v40)
          {
            if (*v40 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v40;
          }
        }
        if (v48)
        {
          v41 = (_DWORD *)v47[0];
          v47[0] = 0;
          if (v41)
          {
            if (*v41 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v41;
          }
        }
        v42 = v45;
        v45 = 0;
        if (v42)
        {
          if (*(_DWORD *)v42 == 2)
            WTF::StringImpl::destroy(v42, v37);
          else
            *(_DWORD *)v42 -= 2;
        }
      }
      else
      {
        v25 = v46[0];
      }
      result = 10;
      if (v18 && !*(_BYTE *)(v16 + 364))
      {
        v26 = *(_QWORD *)(v18 + 8);
        if (*(_DWORD *)(v26 + 60) != *(_DWORD *)(v18 + 20))
          v26 = 0;
        if (*(_QWORD *)(v16 + 168) == v26)
          (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(v16 + 88) + 1408))(*(_QWORD *)(v16 + 88), *(unsigned int *)(v18 + 16), v25);
        else
          WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v16, 1282, (uint64_t)"uniform1ui", 11, (uint64_t)"location not for current program", 33);
        return 10;
      }
    }
  }
  return result;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform2ui(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  char **v22;
  BOOL v23;
  uint64_t result;
  uint64_t v26;
  JSValue v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  WebCore::InspectorCanvasAgent *v36;
  unsigned int v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  WebCore::InspectorCanvasAgent *v41;
  WebCore::InspectorInstrumentation *v42;
  WebCore::ScriptExecutionContext *v43;
  uint64_t v44;
  uint64_t v45;
  _DWORD *v46;
  _DWORD *v47;
  _DWORD *v48;
  WTF::StringImpl *v49;
  JSC::VM *v50;
  _QWORD v51[2];
  WTF::StringImpl *v52;
  _DWORD v53[2];
  _DWORD v54[2];
  _QWORD v55[2];
  char v56;
  _DWORD *v57;
  char v58;
  _DWORD *v59;
  char v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v50 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v50, "WebGL2RenderingContext", "uniform2ui");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v50, "WebGL2RenderingContext", "uniform2ui");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v27);
  }
  else
  {
    v17 = *(_QWORD *)(v10 + 24);
    v18 = *((_QWORD *)a2 + 6);
    if ((v18 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v19 = 0;
    }
    else
    {
      v55[0] = v9;
      if ((v18 & 0xFFFE000000000002) != 0)
        goto LABEL_26;
      v20 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
      v21 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
      v22 = (char **)(16 * v20);
      if ((_DWORD)v20)
        v23 = v22 == &WebCore::JSWebGLUniformLocation::s_info;
      else
        v23 = 1;
      if (!v23)
      {
        do
        {
          v22 = (char **)v22[2];
          v21 = v22 != 0;
        }
        while (v22 != &WebCore::JSWebGLUniformLocation::s_info && v22 != 0);
      }
      if (!v21 || (v19 = *(_QWORD *)(v18 + 24)) == 0)
      {
LABEL_26:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v55, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniform2ui", 11, "WebGLUniformLocation", 21);
        return 0;
      }
    }
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v54);
    if (v54[1])
    {
      return 0;
    }
    else
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v53);
      if (v53[1])
      {
        return 0;
      }
      else
      {
        if (*(_BYTE *)(v17 + 33))
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
          if (v28
            && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
            && (v31 = *(_QWORD *)(v30 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v31, (WTF::StringImpl *)(v17 + 8), v19, (uint64_t)v55);
          }
          else
          {
            LOBYTE(v55[0]) = 0;
            v56 = 0;
          }
          v32 = v54[0];
          v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
          if (v33
            && (v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34)) != 0
            && (v36 = *(WebCore::InspectorCanvasAgent **)(v35 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v36, (WebCore::CanvasRenderingContext *)(v17 + 8), v32, (uint64_t)&v57);
          }
          else
          {
            LOBYTE(v57) = 0;
            v58 = 0;
          }
          v37 = v53[0];
          v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
          if (v38
            && (v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39)) != 0
            && (v41 = *(WebCore::InspectorCanvasAgent **)(v40 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v41, (WebCore::CanvasRenderingContext *)(v17 + 8), v37, (uint64_t)&v59);
          }
          else
          {
            LOBYTE(v59) = 0;
            v60 = 0;
          }
          v51[0] = v55;
          v51[1] = 3;
          v42 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
          if (v42)
          {
            v44 = WebCore::InspectorInstrumentation::instrumentingAgents(v42, v43);
            if (v44)
            {
              v45 = *(_QWORD *)(v44 + 96);
              if (v45)
                WebCore::InspectorCanvasAgent::recordAction(v45, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)&v52, v51);
            }
          }
          if (v60)
          {
            v46 = v59;
            v59 = 0;
            if (v46)
            {
              if (*v46 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v46;
            }
          }
          if (v58)
          {
            v47 = v57;
            v57 = 0;
            if (v47)
            {
              if (*v47 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v47;
            }
          }
          if (v56)
          {
            v48 = (_DWORD *)v55[0];
            v55[0] = 0;
            if (v48)
            {
              if (*v48 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v48;
            }
          }
          v49 = v52;
          v52 = 0;
          if (v49)
          {
            if (*(_DWORD *)v49 == 2)
              WTF::StringImpl::destroy(v49, v43);
            else
              *(_DWORD *)v49 -= 2;
          }
        }
        result = 10;
        if (v19 && !*(_BYTE *)(v17 + 364))
        {
          v26 = *(_QWORD *)(v19 + 8);
          if (*(_DWORD *)(v26 + 60) != *(_DWORD *)(v19 + 20))
            v26 = 0;
          if (*(_QWORD *)(v17 + 168) == v26)
            (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v17 + 88) + 1416))(*(_QWORD *)(v17 + 88), *(unsigned int *)(v19 + 16), v54[0], v53[0]);
          else
            WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v17, 1282, (uint64_t)"uniform2ui", 11, (uint64_t)"location not for current program", 33);
          return 10;
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform3ui(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  char **v22;
  BOOL v23;
  uint64_t result;
  uint64_t v26;
  JSValue v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  WebCore::InspectorCanvasAgent *v36;
  unsigned int v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  WebCore::InspectorCanvasAgent *v41;
  unsigned int v42;
  WebCore::InspectorInstrumentation *v43;
  WebCore::ScriptExecutionContext *v44;
  uint64_t v45;
  WebCore::InspectorCanvasAgent *v46;
  WebCore::InspectorInstrumentation *v47;
  WebCore::ScriptExecutionContext *v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  _DWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  WTF::StringImpl *v55;
  JSC::VM *v56;
  _QWORD v57[2];
  WTF::StringImpl *v58;
  _DWORD v59[2];
  _DWORD v60[2];
  _DWORD v61[2];
  _QWORD v62[2];
  char v63;
  _DWORD *v64;
  char v65;
  _DWORD *v66;
  char v67;
  _DWORD *v68;
  char v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v56 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v56, "WebGL2RenderingContext", "uniform3ui");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v56, "WebGL2RenderingContext", "uniform3ui");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 3)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v27);
  }
  else
  {
    v17 = *(_QWORD *)(v10 + 24);
    v18 = *((_QWORD *)a2 + 6);
    if ((v18 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v19 = 0;
    }
    else
    {
      v62[0] = v9;
      if ((v18 & 0xFFFE000000000002) != 0)
        goto LABEL_26;
      v20 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
      v21 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
      v22 = (char **)(16 * v20);
      if ((_DWORD)v20)
        v23 = v22 == &WebCore::JSWebGLUniformLocation::s_info;
      else
        v23 = 1;
      if (!v23)
      {
        do
        {
          v22 = (char **)v22[2];
          v21 = v22 != 0;
        }
        while (v22 != &WebCore::JSWebGLUniformLocation::s_info && v22 != 0);
      }
      if (!v21 || (v19 = *(_QWORD *)(v18 + 24)) == 0)
      {
LABEL_26:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v62, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniform3ui", 11, "WebGLUniformLocation", 21);
        return 0;
      }
    }
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v61);
    if (v61[1])
    {
      return 0;
    }
    else
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v60);
      if (v60[1])
      {
        return 0;
      }
      else
      {
        WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 9), v59);
        if (v59[1])
        {
          return 0;
        }
        else
        {
          if (*(_BYTE *)(v17 + 33))
          {
            WTF::StringImpl::createWithoutCopyingNonEmpty();
            v58 = (WTF::StringImpl *)v62[0];
            v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40)
                                                                                         + 144))(*(_QWORD *)(v17 + 40));
            if (v28
              && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
              && (v31 = *(_QWORD *)(v30 + 96)) != 0)
            {
              WebCore::InspectorCanvasAgent::processArgument(v31, (WTF::StringImpl *)(v17 + 8), v19, (uint64_t)v62);
            }
            else
            {
              LOBYTE(v62[0]) = 0;
              v63 = 0;
            }
            v32 = v61[0];
            v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40)
                                                                                         + 144))(*(_QWORD *)(v17 + 40));
            if (v33
              && (v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34)) != 0
              && (v36 = *(WebCore::InspectorCanvasAgent **)(v35 + 96)) != 0)
            {
              WebCore::InspectorCanvasAgent::processArgument(v36, (WebCore::CanvasRenderingContext *)(v17 + 8), v32, (uint64_t)&v64);
            }
            else
            {
              LOBYTE(v64) = 0;
              v65 = 0;
            }
            v37 = v60[0];
            v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40)
                                                                                         + 144))(*(_QWORD *)(v17 + 40));
            if (v38
              && (v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39)) != 0
              && (v41 = *(WebCore::InspectorCanvasAgent **)(v40 + 96)) != 0)
            {
              WebCore::InspectorCanvasAgent::processArgument(v41, (WebCore::CanvasRenderingContext *)(v17 + 8), v37, (uint64_t)&v66);
            }
            else
            {
              LOBYTE(v66) = 0;
              v67 = 0;
            }
            v42 = v59[0];
            v43 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40)
                                                                                         + 144))(*(_QWORD *)(v17 + 40));
            if (v43
              && (v45 = WebCore::InspectorInstrumentation::instrumentingAgents(v43, v44)) != 0
              && (v46 = *(WebCore::InspectorCanvasAgent **)(v45 + 96)) != 0)
            {
              WebCore::InspectorCanvasAgent::processArgument(v46, (WebCore::CanvasRenderingContext *)(v17 + 8), v42, (uint64_t)&v68);
            }
            else
            {
              LOBYTE(v68) = 0;
              v69 = 0;
            }
            v57[0] = v62;
            v57[1] = 4;
            v47 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40)
                                                                                         + 144))(*(_QWORD *)(v17 + 40));
            if (v47)
            {
              v49 = WebCore::InspectorInstrumentation::instrumentingAgents(v47, v48);
              if (v49)
              {
                v50 = *(_QWORD *)(v49 + 96);
                if (v50)
                  WebCore::InspectorCanvasAgent::recordAction(v50, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)&v58, v57);
              }
            }
            if (v69)
            {
              v51 = v68;
              v68 = 0;
              if (v51)
              {
                if (*v51 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v51;
              }
            }
            if (v67)
            {
              v52 = v66;
              v66 = 0;
              if (v52)
              {
                if (*v52 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v52;
              }
            }
            if (v65)
            {
              v53 = v64;
              v64 = 0;
              if (v53)
              {
                if (*v53 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v53;
              }
            }
            if (v63)
            {
              v54 = (_DWORD *)v62[0];
              v62[0] = 0;
              if (v54)
              {
                if (*v54 == 1)
                  WTF::JSONImpl::Value::operator delete();
                else
                  --*v54;
              }
            }
            v55 = v58;
            v58 = 0;
            if (v55)
            {
              if (*(_DWORD *)v55 == 2)
                WTF::StringImpl::destroy(v55, v48);
              else
                *(_DWORD *)v55 -= 2;
            }
          }
          result = 10;
          if (v19 && !*(_BYTE *)(v17 + 364))
          {
            v26 = *(_QWORD *)(v19 + 8);
            if (*(_DWORD *)(v26 + 60) != *(_DWORD *)(v19 + 20))
              v26 = 0;
            if (*(_QWORD *)(v17 + 168) == v26)
              (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v17 + 88) + 1424))(*(_QWORD *)(v17 + 88), *(unsigned int *)(v19 + 16), v61[0], v60[0], v59[0]);
            else
              WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v17, 1282, (uint64_t)"uniform3ui", 11, (uint64_t)"location not for current program", 33);
            return 10;
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform4ui(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  char **v22;
  BOOL v23;
  uint64_t result;
  uint64_t v26;
  JSValue v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  WebCore::InspectorCanvasAgent *v36;
  unsigned int v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  WebCore::InspectorCanvasAgent *v41;
  unsigned int v42;
  WebCore::InspectorInstrumentation *v43;
  WebCore::ScriptExecutionContext *v44;
  uint64_t v45;
  WebCore::InspectorCanvasAgent *v46;
  unsigned int v47;
  WebCore::InspectorInstrumentation *v48;
  WebCore::ScriptExecutionContext *v49;
  uint64_t v50;
  WebCore::InspectorCanvasAgent *v51;
  WebCore::InspectorInstrumentation *v52;
  WebCore::ScriptExecutionContext *v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  _DWORD *v57;
  _DWORD *v58;
  _DWORD *v59;
  _DWORD *v60;
  WTF::StringImpl *v61;
  JSC::VM *v62;
  _QWORD v63[2];
  WTF::StringImpl *v64;
  _DWORD v65[2];
  _DWORD v66[2];
  _DWORD v67[2];
  _DWORD v68[2];
  _QWORD v69[2];
  char v70;
  _DWORD *v71;
  char v72;
  _DWORD *v73;
  char v74;
  _DWORD *v75;
  char v76;
  _DWORD *v77;
  char v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v62 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v62, "WebGL2RenderingContext", "uniform4ui");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v62, "WebGL2RenderingContext", "uniform4ui");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 4)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v27);
  }
  else
  {
    v17 = *(_QWORD *)(v10 + 24);
    v18 = *((_QWORD *)a2 + 6);
    if ((v18 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v19 = 0;
    }
    else
    {
      v69[0] = v9;
      if ((v18 & 0xFFFE000000000002) != 0)
        goto LABEL_26;
      v20 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
      v21 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
      v22 = (char **)(16 * v20);
      if ((_DWORD)v20)
        v23 = v22 == &WebCore::JSWebGLUniformLocation::s_info;
      else
        v23 = 1;
      if (!v23)
      {
        do
        {
          v22 = (char **)v22[2];
          v21 = v22 != 0;
        }
        while (v22 != &WebCore::JSWebGLUniformLocation::s_info && v22 != 0);
      }
      if (!v21 || (v19 = *(_QWORD *)(v18 + 24)) == 0)
      {
LABEL_26:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v69, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniform4ui", 11, "WebGLUniformLocation", 21);
        return 0;
      }
    }
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v68);
    if (v68[1])
    {
      return 0;
    }
    else
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v67);
      if (v67[1])
      {
        return 0;
      }
      else
      {
        WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 9), v66);
        if (v66[1])
        {
          return 0;
        }
        else
        {
          WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 10), v65);
          if (v65[1])
          {
            return 0;
          }
          else
          {
            if (*(_BYTE *)(v17 + 33))
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v64 = (WTF::StringImpl *)v69[0];
              v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40)
                                                                                           + 144))(*(_QWORD *)(v17 + 40));
              if (v28
                && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
                && (v31 = *(_QWORD *)(v30 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v31, (WTF::StringImpl *)(v17 + 8), v19, (uint64_t)v69);
              }
              else
              {
                LOBYTE(v69[0]) = 0;
                v70 = 0;
              }
              v32 = v68[0];
              v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40)
                                                                                           + 144))(*(_QWORD *)(v17 + 40));
              if (v33
                && (v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34)) != 0
                && (v36 = *(WebCore::InspectorCanvasAgent **)(v35 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v36, (WebCore::CanvasRenderingContext *)(v17 + 8), v32, (uint64_t)&v71);
              }
              else
              {
                LOBYTE(v71) = 0;
                v72 = 0;
              }
              v37 = v67[0];
              v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40)
                                                                                           + 144))(*(_QWORD *)(v17 + 40));
              if (v38
                && (v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39)) != 0
                && (v41 = *(WebCore::InspectorCanvasAgent **)(v40 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v41, (WebCore::CanvasRenderingContext *)(v17 + 8), v37, (uint64_t)&v73);
              }
              else
              {
                LOBYTE(v73) = 0;
                v74 = 0;
              }
              v42 = v66[0];
              v43 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40)
                                                                                           + 144))(*(_QWORD *)(v17 + 40));
              if (v43
                && (v45 = WebCore::InspectorInstrumentation::instrumentingAgents(v43, v44)) != 0
                && (v46 = *(WebCore::InspectorCanvasAgent **)(v45 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v46, (WebCore::CanvasRenderingContext *)(v17 + 8), v42, (uint64_t)&v75);
              }
              else
              {
                LOBYTE(v75) = 0;
                v76 = 0;
              }
              v47 = v65[0];
              v48 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40)
                                                                                           + 144))(*(_QWORD *)(v17 + 40));
              if (v48
                && (v50 = WebCore::InspectorInstrumentation::instrumentingAgents(v48, v49)) != 0
                && (v51 = *(WebCore::InspectorCanvasAgent **)(v50 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v51, (WebCore::CanvasRenderingContext *)(v17 + 8), v47, (uint64_t)&v77);
              }
              else
              {
                LOBYTE(v77) = 0;
                v78 = 0;
              }
              v63[0] = v69;
              v63[1] = 5;
              v52 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40)
                                                                                           + 144))(*(_QWORD *)(v17 + 40));
              if (v52)
              {
                v54 = WebCore::InspectorInstrumentation::instrumentingAgents(v52, v53);
                if (v54)
                {
                  v55 = *(_QWORD *)(v54 + 96);
                  if (v55)
                    WebCore::InspectorCanvasAgent::recordAction(v55, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)&v64, v63);
                }
              }
              if (v78)
              {
                v56 = v77;
                v77 = 0;
                if (v56)
                {
                  if (*v56 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v56;
                }
              }
              if (v76)
              {
                v57 = v75;
                v75 = 0;
                if (v57)
                {
                  if (*v57 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v57;
                }
              }
              if (v74)
              {
                v58 = v73;
                v73 = 0;
                if (v58)
                {
                  if (*v58 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v58;
                }
              }
              if (v72)
              {
                v59 = v71;
                v71 = 0;
                if (v59)
                {
                  if (*v59 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v59;
                }
              }
              if (v70)
              {
                v60 = (_DWORD *)v69[0];
                v69[0] = 0;
                if (v60)
                {
                  if (*v60 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v60;
                }
              }
              v61 = v64;
              v64 = 0;
              if (v61)
              {
                if (*(_DWORD *)v61 == 2)
                  WTF::StringImpl::destroy(v61, v53);
                else
                  *(_DWORD *)v61 -= 2;
              }
            }
            result = 10;
            if (v19 && !*(_BYTE *)(v17 + 364))
            {
              v26 = *(_QWORD *)(v19 + 8);
              if (*(_DWORD *)(v26 + 60) != *(_DWORD *)(v19 + 20))
                v26 = 0;
              if (*(_QWORD *)(v17 + 168) == v26)
                (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v17 + 88) + 1432))(*(_QWORD *)(v17 + 88), *(unsigned int *)(v19 + 16), v68[0], v67[0], v66[0], v65[0]);
              else
                WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v17, 1282, (uint64_t)"uniform4ui", 11, (uint64_t)"location not for current program", 33);
              return 10;
            }
          }
        }
      }
    }
  }
  return result;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform1uiv(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  char **v22;
  BOOL v23;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t (*v30)();
  JSValue v33;
  WebCore::InspectorInstrumentation *v34;
  WebCore::ScriptExecutionContext *v35;
  uint64_t v36;
  uint64_t v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  WebCore::InspectorInstrumentation *v43;
  WebCore::ScriptExecutionContext *v44;
  uint64_t v45;
  WebCore::InspectorCanvasAgent *v46;
  unsigned int v47;
  WebCore::InspectorInstrumentation *v48;
  WebCore::ScriptExecutionContext *v49;
  uint64_t v50;
  WebCore::InspectorCanvasAgent *v51;
  WebCore::InspectorInstrumentation *v52;
  WebCore::ScriptExecutionContext *v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  _DWORD *v57;
  _DWORD *v58;
  _DWORD *v59;
  WTF::StringImpl *v60;
  WebCore *v61;
  JSC::JSGlobalObject *v62;
  JSC::CallFrame *v63;
  JSC::VM *v64;
  unsigned int v65[2];
  unsigned int v66[2];
  WTF::StringImpl *v67[2];
  int v68;
  _QWORD v69[2];
  int v70;
  _QWORD v71[2];
  char v72;
  _DWORD *v73;
  char v74;
  _DWORD *v75;
  char v76;
  _DWORD *v77;
  char v78;
  int v79;
  _BYTE v80[16];
  int v81;
  int v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v64 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v64, "WebGL2RenderingContext", "uniform1uiv");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v64, "WebGL2RenderingContext", "uniform1uiv");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v33.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v33);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  if ((v18 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v19 = 0;
    goto LABEL_28;
  }
  v71[0] = v9;
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_26;
  v20 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v21 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v22 = (char **)(16 * v20);
  if ((_DWORD)v20)
    v23 = v22 == &WebCore::JSWebGLUniformLocation::s_info;
  else
    v23 = 1;
  if (!v23)
  {
    do
    {
      v22 = (char **)v22[2];
      v21 = v22 != 0;
    }
    while (v22 != &WebCore::JSWebGLUniformLocation::s_info && v22 != 0);
  }
  if (!v21 || (v19 = *(_QWORD *)(v18 + 24)) == 0)
  {
LABEL_26:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v71, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniform1uiv", 12, "WebGLUniformLocation", 21);
    return 0;
  }
LABEL_28:
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLUint32Array>,WebCore::IDLSequence<WebCore::IDLUnsignedLong>>>::convert(&v79, this, *((_QWORD *)a2 + 7));
  v26 = v82;
  if (v82)
  {
    v25 = 0;
LABEL_52:
    if (v26 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E332F528[v26])(v71, v80);
    return (_BYTE *)v25;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 4) > 0xFFFFFFFFFFFFFFFCLL)
    v27 = 10;
  else
    v27 = *((_QWORD *)a2 + 8);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v27, v66);
  if (v66[1])
  {
    v25 = 0;
LABEL_51:
    v26 = v82;
    goto LABEL_52;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 5) > 0xFFFFFFFFFFFFFFFBLL)
    v28 = 10;
  else
    v28 = *((_QWORD *)a2 + 9);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v28, v65);
  if (v65[1])
  {
    v25 = 0;
    goto LABEL_51;
  }
  if (*(_BYTE *)(v17 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v67[0] = (WTF::StringImpl *)v71[0];
    v34 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v34
      && (v36 = WebCore::InspectorInstrumentation::instrumentingAgents(v34, v35)) != 0
      && (v37 = *(_QWORD *)(v36 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v37, (WTF::StringImpl *)(v17 + 8), v19, (uint64_t)v71);
    }
    else
    {
      LOBYTE(v71[0]) = 0;
      v72 = 0;
    }
    if (v82)
      goto LABEL_110;
    v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v38
      && (v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39)) != 0
      && (v41 = *(_QWORD *)(v40 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v41, v17 + 8, (uint64_t)v80);
    }
    else
    {
      LOBYTE(v73) = 0;
      v74 = 0;
    }
    v42 = v66[0];
    v43 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v43
      && (v45 = WebCore::InspectorInstrumentation::instrumentingAgents(v43, v44)) != 0
      && (v46 = *(WebCore::InspectorCanvasAgent **)(v45 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v46, (WebCore::CanvasRenderingContext *)(v17 + 8), v42, (uint64_t)&v75);
    }
    else
    {
      LOBYTE(v75) = 0;
      v76 = 0;
    }
    v47 = v65[0];
    v48 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v48
      && (v50 = WebCore::InspectorInstrumentation::instrumentingAgents(v48, v49)) != 0
      && (v51 = *(WebCore::InspectorCanvasAgent **)(v50 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v51, (WebCore::CanvasRenderingContext *)(v17 + 8), v47, (uint64_t)&v77);
    }
    else
    {
      LOBYTE(v77) = 0;
      v78 = 0;
    }
    v69[0] = v71;
    v69[1] = 4;
    v52 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v52)
    {
      v54 = WebCore::InspectorInstrumentation::instrumentingAgents(v52, v53);
      if (v54)
      {
        v55 = *(_QWORD *)(v54 + 96);
        if (v55)
          WebCore::InspectorCanvasAgent::recordAction(v55, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)v67, v69);
      }
    }
    if (v78)
    {
      v56 = v77;
      v77 = 0;
      if (v56)
      {
        if (*v56 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v56;
      }
    }
    if (v76)
    {
      v57 = v75;
      v75 = 0;
      if (v57)
      {
        if (*v57 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v57;
      }
    }
    if (v74)
    {
      v58 = v73;
      v73 = 0;
      if (v58)
      {
        if (*v58 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v58;
      }
    }
    if (v72)
    {
      v59 = (_DWORD *)v71[0];
      v71[0] = 0;
      if (v59)
      {
        if (*v59 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v59;
      }
    }
    v60 = v67[0];
    v67[0] = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
        WTF::StringImpl::destroy(v60, v53);
      else
        *(_DWORD *)v60 -= 2;
    }
  }
  if (!v82)
  {
    LOBYTE(v67[0]) = 0;
    v68 = -1;
    v29 = v81;
    if (v81 == -1)
    {
      LOBYTE(v69[0]) = 0;
      v70 = -1;
    }
    else
    {
      v30 = off_1E332F518[v81];
      ((void (*)(_QWORD *, WTF::StringImpl **, _BYTE *))v30)(v71, v67, v80);
      v68 = v29;
      LOBYTE(v69[0]) = 0;
      v70 = -1;
      ((void (*)(_QWORD *, _QWORD *, WTF::StringImpl **))v30)(v71, v69, v67);
      v70 = v29;
    }
    if (!*(_BYTE *)(v17 + 364))
    {
      WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<unsigned int,JSC::GenericTypedArrayView<JSC::Uint32Adaptor>>((WTF::StringImpl *)v17, (uint64_t)"uniform1uiv", 12, v19, 0, (uint64_t)v69, 1, v66[0], (uint64_t)v71, v65[0]);
      if (v72)
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v17 + 88) + 1440))(*(_QWORD *)(v17 + 88), *(unsigned int *)(v19 + 16), v71[0], v71[1]);
      v29 = v70;
    }
    if (v29 != -1)
      ((void (*)(_QWORD *, _QWORD *))off_1E332F508[v29])(v71, v69);
    v70 = -1;
    if (v68 != -1)
      ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F508[v68])(v71, v67);
    v25 = 10;
    goto LABEL_51;
  }
LABEL_110:
  v61 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform2uiv(v61, v62, v63);
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform2uiv(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  char **v22;
  BOOL v23;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t (*v30)();
  JSValue v33;
  WebCore::InspectorInstrumentation *v34;
  WebCore::ScriptExecutionContext *v35;
  uint64_t v36;
  uint64_t v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  WebCore::InspectorInstrumentation *v43;
  WebCore::ScriptExecutionContext *v44;
  uint64_t v45;
  WebCore::InspectorCanvasAgent *v46;
  unsigned int v47;
  WebCore::InspectorInstrumentation *v48;
  WebCore::ScriptExecutionContext *v49;
  uint64_t v50;
  WebCore::InspectorCanvasAgent *v51;
  WebCore::InspectorInstrumentation *v52;
  WebCore::ScriptExecutionContext *v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  _DWORD *v57;
  _DWORD *v58;
  _DWORD *v59;
  WTF::StringImpl *v60;
  WebCore *v61;
  JSC::JSGlobalObject *v62;
  JSC::CallFrame *v63;
  JSC::VM *v64;
  unsigned int v65[2];
  unsigned int v66[2];
  WTF::StringImpl *v67[2];
  int v68;
  _QWORD v69[2];
  int v70;
  _QWORD v71[2];
  char v72;
  _DWORD *v73;
  char v74;
  _DWORD *v75;
  char v76;
  _DWORD *v77;
  char v78;
  int v79;
  _BYTE v80[16];
  int v81;
  int v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v64 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v64, "WebGL2RenderingContext", "uniform2uiv");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v64, "WebGL2RenderingContext", "uniform2uiv");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v33.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v33);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  if ((v18 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v19 = 0;
    goto LABEL_28;
  }
  v71[0] = v9;
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_26;
  v20 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v21 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v22 = (char **)(16 * v20);
  if ((_DWORD)v20)
    v23 = v22 == &WebCore::JSWebGLUniformLocation::s_info;
  else
    v23 = 1;
  if (!v23)
  {
    do
    {
      v22 = (char **)v22[2];
      v21 = v22 != 0;
    }
    while (v22 != &WebCore::JSWebGLUniformLocation::s_info && v22 != 0);
  }
  if (!v21 || (v19 = *(_QWORD *)(v18 + 24)) == 0)
  {
LABEL_26:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v71, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniform2uiv", 12, "WebGLUniformLocation", 21);
    return 0;
  }
LABEL_28:
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLUint32Array>,WebCore::IDLSequence<WebCore::IDLUnsignedLong>>>::convert(&v79, this, *((_QWORD *)a2 + 7));
  v26 = v82;
  if (v82)
  {
    v25 = 0;
LABEL_52:
    if (v26 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E332F528[v26])(v71, v80);
    return (_BYTE *)v25;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 4) > 0xFFFFFFFFFFFFFFFCLL)
    v27 = 10;
  else
    v27 = *((_QWORD *)a2 + 8);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v27, v66);
  if (v66[1])
  {
    v25 = 0;
LABEL_51:
    v26 = v82;
    goto LABEL_52;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 5) > 0xFFFFFFFFFFFFFFFBLL)
    v28 = 10;
  else
    v28 = *((_QWORD *)a2 + 9);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v28, v65);
  if (v65[1])
  {
    v25 = 0;
    goto LABEL_51;
  }
  if (*(_BYTE *)(v17 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v67[0] = (WTF::StringImpl *)v71[0];
    v34 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v34
      && (v36 = WebCore::InspectorInstrumentation::instrumentingAgents(v34, v35)) != 0
      && (v37 = *(_QWORD *)(v36 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v37, (WTF::StringImpl *)(v17 + 8), v19, (uint64_t)v71);
    }
    else
    {
      LOBYTE(v71[0]) = 0;
      v72 = 0;
    }
    if (v82)
      goto LABEL_110;
    v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v38
      && (v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39)) != 0
      && (v41 = *(_QWORD *)(v40 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v41, v17 + 8, (uint64_t)v80);
    }
    else
    {
      LOBYTE(v73) = 0;
      v74 = 0;
    }
    v42 = v66[0];
    v43 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v43
      && (v45 = WebCore::InspectorInstrumentation::instrumentingAgents(v43, v44)) != 0
      && (v46 = *(WebCore::InspectorCanvasAgent **)(v45 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v46, (WebCore::CanvasRenderingContext *)(v17 + 8), v42, (uint64_t)&v75);
    }
    else
    {
      LOBYTE(v75) = 0;
      v76 = 0;
    }
    v47 = v65[0];
    v48 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v48
      && (v50 = WebCore::InspectorInstrumentation::instrumentingAgents(v48, v49)) != 0
      && (v51 = *(WebCore::InspectorCanvasAgent **)(v50 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v51, (WebCore::CanvasRenderingContext *)(v17 + 8), v47, (uint64_t)&v77);
    }
    else
    {
      LOBYTE(v77) = 0;
      v78 = 0;
    }
    v69[0] = v71;
    v69[1] = 4;
    v52 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v52)
    {
      v54 = WebCore::InspectorInstrumentation::instrumentingAgents(v52, v53);
      if (v54)
      {
        v55 = *(_QWORD *)(v54 + 96);
        if (v55)
          WebCore::InspectorCanvasAgent::recordAction(v55, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)v67, v69);
      }
    }
    if (v78)
    {
      v56 = v77;
      v77 = 0;
      if (v56)
      {
        if (*v56 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v56;
      }
    }
    if (v76)
    {
      v57 = v75;
      v75 = 0;
      if (v57)
      {
        if (*v57 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v57;
      }
    }
    if (v74)
    {
      v58 = v73;
      v73 = 0;
      if (v58)
      {
        if (*v58 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v58;
      }
    }
    if (v72)
    {
      v59 = (_DWORD *)v71[0];
      v71[0] = 0;
      if (v59)
      {
        if (*v59 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v59;
      }
    }
    v60 = v67[0];
    v67[0] = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
        WTF::StringImpl::destroy(v60, v53);
      else
        *(_DWORD *)v60 -= 2;
    }
  }
  if (!v82)
  {
    LOBYTE(v67[0]) = 0;
    v68 = -1;
    v29 = v81;
    if (v81 == -1)
    {
      LOBYTE(v69[0]) = 0;
      v70 = -1;
    }
    else
    {
      v30 = off_1E332F518[v81];
      ((void (*)(_QWORD *, WTF::StringImpl **, _BYTE *))v30)(v71, v67, v80);
      v68 = v29;
      LOBYTE(v69[0]) = 0;
      v70 = -1;
      ((void (*)(_QWORD *, _QWORD *, WTF::StringImpl **))v30)(v71, v69, v67);
      v70 = v29;
    }
    if (!*(_BYTE *)(v17 + 364))
    {
      WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<unsigned int,JSC::GenericTypedArrayView<JSC::Uint32Adaptor>>((WTF::StringImpl *)v17, (uint64_t)"uniform2uiv", 12, v19, 0, (uint64_t)v69, 2, v66[0], (uint64_t)v71, v65[0]);
      if (v72)
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v17 + 88) + 1448))(*(_QWORD *)(v17 + 88), *(unsigned int *)(v19 + 16), v71[0], v71[1]);
      v29 = v70;
    }
    if (v29 != -1)
      ((void (*)(_QWORD *, _QWORD *))off_1E332F508[v29])(v71, v69);
    v70 = -1;
    if (v68 != -1)
      ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F508[v68])(v71, v67);
    v25 = 10;
    goto LABEL_51;
  }
LABEL_110:
  v61 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform3uiv(v61, v62, v63);
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform3uiv(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  char **v22;
  BOOL v23;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t (*v30)();
  JSValue v33;
  WebCore::InspectorInstrumentation *v34;
  WebCore::ScriptExecutionContext *v35;
  uint64_t v36;
  uint64_t v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  WebCore::InspectorInstrumentation *v43;
  WebCore::ScriptExecutionContext *v44;
  uint64_t v45;
  WebCore::InspectorCanvasAgent *v46;
  unsigned int v47;
  WebCore::InspectorInstrumentation *v48;
  WebCore::ScriptExecutionContext *v49;
  uint64_t v50;
  WebCore::InspectorCanvasAgent *v51;
  WebCore::InspectorInstrumentation *v52;
  WebCore::ScriptExecutionContext *v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  _DWORD *v57;
  _DWORD *v58;
  _DWORD *v59;
  WTF::StringImpl *v60;
  WebCore *v61;
  JSC::JSGlobalObject *v62;
  JSC::CallFrame *v63;
  JSC::VM *v64;
  unsigned int v65[2];
  unsigned int v66[2];
  WTF::StringImpl *v67[2];
  int v68;
  _QWORD v69[2];
  int v70;
  _QWORD v71[2];
  char v72;
  _DWORD *v73;
  char v74;
  _DWORD *v75;
  char v76;
  _DWORD *v77;
  char v78;
  int v79;
  _BYTE v80[16];
  int v81;
  int v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v64 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v64, "WebGL2RenderingContext", "uniform3uiv");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v64, "WebGL2RenderingContext", "uniform3uiv");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v33.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v33);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  if ((v18 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v19 = 0;
    goto LABEL_28;
  }
  v71[0] = v9;
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_26;
  v20 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v21 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v22 = (char **)(16 * v20);
  if ((_DWORD)v20)
    v23 = v22 == &WebCore::JSWebGLUniformLocation::s_info;
  else
    v23 = 1;
  if (!v23)
  {
    do
    {
      v22 = (char **)v22[2];
      v21 = v22 != 0;
    }
    while (v22 != &WebCore::JSWebGLUniformLocation::s_info && v22 != 0);
  }
  if (!v21 || (v19 = *(_QWORD *)(v18 + 24)) == 0)
  {
LABEL_26:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v71, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniform3uiv", 12, "WebGLUniformLocation", 21);
    return 0;
  }
LABEL_28:
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLUint32Array>,WebCore::IDLSequence<WebCore::IDLUnsignedLong>>>::convert(&v79, this, *((_QWORD *)a2 + 7));
  v26 = v82;
  if (v82)
  {
    v25 = 0;
LABEL_52:
    if (v26 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E332F528[v26])(v71, v80);
    return (_BYTE *)v25;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 4) > 0xFFFFFFFFFFFFFFFCLL)
    v27 = 10;
  else
    v27 = *((_QWORD *)a2 + 8);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v27, v66);
  if (v66[1])
  {
    v25 = 0;
LABEL_51:
    v26 = v82;
    goto LABEL_52;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 5) > 0xFFFFFFFFFFFFFFFBLL)
    v28 = 10;
  else
    v28 = *((_QWORD *)a2 + 9);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v28, v65);
  if (v65[1])
  {
    v25 = 0;
    goto LABEL_51;
  }
  if (*(_BYTE *)(v17 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v67[0] = (WTF::StringImpl *)v71[0];
    v34 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v34
      && (v36 = WebCore::InspectorInstrumentation::instrumentingAgents(v34, v35)) != 0
      && (v37 = *(_QWORD *)(v36 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v37, (WTF::StringImpl *)(v17 + 8), v19, (uint64_t)v71);
    }
    else
    {
      LOBYTE(v71[0]) = 0;
      v72 = 0;
    }
    if (v82)
      goto LABEL_110;
    v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v38
      && (v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39)) != 0
      && (v41 = *(_QWORD *)(v40 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v41, v17 + 8, (uint64_t)v80);
    }
    else
    {
      LOBYTE(v73) = 0;
      v74 = 0;
    }
    v42 = v66[0];
    v43 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v43
      && (v45 = WebCore::InspectorInstrumentation::instrumentingAgents(v43, v44)) != 0
      && (v46 = *(WebCore::InspectorCanvasAgent **)(v45 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v46, (WebCore::CanvasRenderingContext *)(v17 + 8), v42, (uint64_t)&v75);
    }
    else
    {
      LOBYTE(v75) = 0;
      v76 = 0;
    }
    v47 = v65[0];
    v48 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v48
      && (v50 = WebCore::InspectorInstrumentation::instrumentingAgents(v48, v49)) != 0
      && (v51 = *(WebCore::InspectorCanvasAgent **)(v50 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v51, (WebCore::CanvasRenderingContext *)(v17 + 8), v47, (uint64_t)&v77);
    }
    else
    {
      LOBYTE(v77) = 0;
      v78 = 0;
    }
    v69[0] = v71;
    v69[1] = 4;
    v52 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v52)
    {
      v54 = WebCore::InspectorInstrumentation::instrumentingAgents(v52, v53);
      if (v54)
      {
        v55 = *(_QWORD *)(v54 + 96);
        if (v55)
          WebCore::InspectorCanvasAgent::recordAction(v55, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)v67, v69);
      }
    }
    if (v78)
    {
      v56 = v77;
      v77 = 0;
      if (v56)
      {
        if (*v56 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v56;
      }
    }
    if (v76)
    {
      v57 = v75;
      v75 = 0;
      if (v57)
      {
        if (*v57 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v57;
      }
    }
    if (v74)
    {
      v58 = v73;
      v73 = 0;
      if (v58)
      {
        if (*v58 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v58;
      }
    }
    if (v72)
    {
      v59 = (_DWORD *)v71[0];
      v71[0] = 0;
      if (v59)
      {
        if (*v59 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v59;
      }
    }
    v60 = v67[0];
    v67[0] = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
        WTF::StringImpl::destroy(v60, v53);
      else
        *(_DWORD *)v60 -= 2;
    }
  }
  if (!v82)
  {
    LOBYTE(v67[0]) = 0;
    v68 = -1;
    v29 = v81;
    if (v81 == -1)
    {
      LOBYTE(v69[0]) = 0;
      v70 = -1;
    }
    else
    {
      v30 = off_1E332F518[v81];
      ((void (*)(_QWORD *, WTF::StringImpl **, _BYTE *))v30)(v71, v67, v80);
      v68 = v29;
      LOBYTE(v69[0]) = 0;
      v70 = -1;
      ((void (*)(_QWORD *, _QWORD *, WTF::StringImpl **))v30)(v71, v69, v67);
      v70 = v29;
    }
    if (!*(_BYTE *)(v17 + 364))
    {
      WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<unsigned int,JSC::GenericTypedArrayView<JSC::Uint32Adaptor>>((WTF::StringImpl *)v17, (uint64_t)"uniform3uiv", 12, v19, 0, (uint64_t)v69, 3, v66[0], (uint64_t)v71, v65[0]);
      if (v72)
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v17 + 88) + 1456))(*(_QWORD *)(v17 + 88), *(unsigned int *)(v19 + 16), v71[0], v71[1]);
      v29 = v70;
    }
    if (v29 != -1)
      ((void (*)(_QWORD *, _QWORD *))off_1E332F508[v29])(v71, v69);
    v70 = -1;
    if (v68 != -1)
      ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F508[v68])(v71, v67);
    v25 = 10;
    goto LABEL_51;
  }
LABEL_110:
  v61 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform4uiv(v61, v62, v63);
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform4uiv(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  char **v22;
  BOOL v23;
  uint64_t v25;
  int v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t (*v30)();
  JSValue v33;
  WebCore::InspectorInstrumentation *v34;
  WebCore::ScriptExecutionContext *v35;
  uint64_t v36;
  uint64_t v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  WebCore::InspectorInstrumentation *v43;
  WebCore::ScriptExecutionContext *v44;
  uint64_t v45;
  WebCore::InspectorCanvasAgent *v46;
  unsigned int v47;
  WebCore::InspectorInstrumentation *v48;
  WebCore::ScriptExecutionContext *v49;
  uint64_t v50;
  WebCore::InspectorCanvasAgent *v51;
  WebCore::InspectorInstrumentation *v52;
  WebCore::ScriptExecutionContext *v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  _DWORD *v57;
  _DWORD *v58;
  _DWORD *v59;
  WTF::StringImpl *v60;
  WebCore *v61;
  JSC::JSGlobalObject *v62;
  JSC::CallFrame *v63;
  JSC::VM *v64;
  unsigned int v65[2];
  unsigned int v66[2];
  WTF::StringImpl *v67[2];
  int v68;
  _QWORD v69[2];
  int v70;
  _QWORD v71[2];
  char v72;
  _DWORD *v73;
  char v74;
  _DWORD *v75;
  char v76;
  _DWORD *v77;
  char v78;
  int v79;
  _BYTE v80[16];
  int v81;
  int v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v64 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v64, "WebGL2RenderingContext", "uniform4uiv");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v64, "WebGL2RenderingContext", "uniform4uiv");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v33.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v33);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  if ((v18 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v19 = 0;
    goto LABEL_28;
  }
  v71[0] = v9;
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_26;
  v20 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v21 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v22 = (char **)(16 * v20);
  if ((_DWORD)v20)
    v23 = v22 == &WebCore::JSWebGLUniformLocation::s_info;
  else
    v23 = 1;
  if (!v23)
  {
    do
    {
      v22 = (char **)v22[2];
      v21 = v22 != 0;
    }
    while (v22 != &WebCore::JSWebGLUniformLocation::s_info && v22 != 0);
  }
  if (!v21 || (v19 = *(_QWORD *)(v18 + 24)) == 0)
  {
LABEL_26:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v71, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniform4uiv", 12, "WebGLUniformLocation", 21);
    return 0;
  }
LABEL_28:
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLUint32Array>,WebCore::IDLSequence<WebCore::IDLUnsignedLong>>>::convert(&v79, this, *((_QWORD *)a2 + 7));
  v26 = v82;
  if (v82)
  {
    v25 = 0;
LABEL_52:
    if (v26 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E332F528[v26])(v71, v80);
    return (_BYTE *)v25;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 4) > 0xFFFFFFFFFFFFFFFCLL)
    v27 = 10;
  else
    v27 = *((_QWORD *)a2 + 8);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v27, v66);
  if (v66[1])
  {
    v25 = 0;
LABEL_51:
    v26 = v82;
    goto LABEL_52;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 5) > 0xFFFFFFFFFFFFFFFBLL)
    v28 = 10;
  else
    v28 = *((_QWORD *)a2 + 9);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v28, v65);
  if (v65[1])
  {
    v25 = 0;
    goto LABEL_51;
  }
  if (*(_BYTE *)(v17 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v67[0] = (WTF::StringImpl *)v71[0];
    v34 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v34
      && (v36 = WebCore::InspectorInstrumentation::instrumentingAgents(v34, v35)) != 0
      && (v37 = *(_QWORD *)(v36 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v37, (WTF::StringImpl *)(v17 + 8), v19, (uint64_t)v71);
    }
    else
    {
      LOBYTE(v71[0]) = 0;
      v72 = 0;
    }
    if (v82)
      goto LABEL_110;
    v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v38
      && (v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39)) != 0
      && (v41 = *(_QWORD *)(v40 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v41, v17 + 8, (uint64_t)v80);
    }
    else
    {
      LOBYTE(v73) = 0;
      v74 = 0;
    }
    v42 = v66[0];
    v43 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v43
      && (v45 = WebCore::InspectorInstrumentation::instrumentingAgents(v43, v44)) != 0
      && (v46 = *(WebCore::InspectorCanvasAgent **)(v45 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v46, (WebCore::CanvasRenderingContext *)(v17 + 8), v42, (uint64_t)&v75);
    }
    else
    {
      LOBYTE(v75) = 0;
      v76 = 0;
    }
    v47 = v65[0];
    v48 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v48
      && (v50 = WebCore::InspectorInstrumentation::instrumentingAgents(v48, v49)) != 0
      && (v51 = *(WebCore::InspectorCanvasAgent **)(v50 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v51, (WebCore::CanvasRenderingContext *)(v17 + 8), v47, (uint64_t)&v77);
    }
    else
    {
      LOBYTE(v77) = 0;
      v78 = 0;
    }
    v69[0] = v71;
    v69[1] = 4;
    v52 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v52)
    {
      v54 = WebCore::InspectorInstrumentation::instrumentingAgents(v52, v53);
      if (v54)
      {
        v55 = *(_QWORD *)(v54 + 96);
        if (v55)
          WebCore::InspectorCanvasAgent::recordAction(v55, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)v67, v69);
      }
    }
    if (v78)
    {
      v56 = v77;
      v77 = 0;
      if (v56)
      {
        if (*v56 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v56;
      }
    }
    if (v76)
    {
      v57 = v75;
      v75 = 0;
      if (v57)
      {
        if (*v57 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v57;
      }
    }
    if (v74)
    {
      v58 = v73;
      v73 = 0;
      if (v58)
      {
        if (*v58 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v58;
      }
    }
    if (v72)
    {
      v59 = (_DWORD *)v71[0];
      v71[0] = 0;
      if (v59)
      {
        if (*v59 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v59;
      }
    }
    v60 = v67[0];
    v67[0] = 0;
    if (v60)
    {
      if (*(_DWORD *)v60 == 2)
        WTF::StringImpl::destroy(v60, v53);
      else
        *(_DWORD *)v60 -= 2;
    }
  }
  if (!v82)
  {
    LOBYTE(v67[0]) = 0;
    v68 = -1;
    v29 = v81;
    if (v81 == -1)
    {
      LOBYTE(v69[0]) = 0;
      v70 = -1;
    }
    else
    {
      v30 = off_1E332F518[v81];
      ((void (*)(_QWORD *, WTF::StringImpl **, _BYTE *))v30)(v71, v67, v80);
      v68 = v29;
      LOBYTE(v69[0]) = 0;
      v70 = -1;
      ((void (*)(_QWORD *, _QWORD *, WTF::StringImpl **))v30)(v71, v69, v67);
      v70 = v29;
    }
    if (!*(_BYTE *)(v17 + 364))
    {
      WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<unsigned int,JSC::GenericTypedArrayView<JSC::Uint32Adaptor>>((WTF::StringImpl *)v17, (uint64_t)"uniform4uiv", 12, v19, 0, (uint64_t)v69, 4, v66[0], (uint64_t)v71, v65[0]);
      if (v72)
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v17 + 88) + 1464))(*(_QWORD *)(v17 + 88), *(unsigned int *)(v19 + 16), v71[0], v71[1]);
      v29 = v70;
    }
    if (v29 != -1)
      ((void (*)(_QWORD *, _QWORD *))off_1E332F508[v29])(v71, v69);
    v70 = -1;
    if (v68 != -1)
      ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F508[v68])(v71, v67);
    v25 = 10;
    goto LABEL_51;
  }
LABEL_110:
  v61 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_uniformMatrix2x3fv(v61, v62, v63);
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_uniformMatrix2x3fv(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v8;
  JSC::VM *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  char **v22;
  BOOL v23;
  uint64_t v25;
  unint64_t v26;
  double v27;
  uint64_t i;
  int v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)();
  JSValue v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  uint64_t v41;
  WebCore::InspectorInstrumentation *v42;
  WebCore::ScriptExecutionContext *v43;
  uint64_t v44;
  WebCore::InspectorCanvasAgent *v45;
  WebCore::InspectorInstrumentation *v46;
  WebCore::ScriptExecutionContext *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  WebCore::InspectorInstrumentation *v51;
  WebCore::ScriptExecutionContext *v52;
  uint64_t v53;
  WebCore::InspectorCanvasAgent *v54;
  unsigned int v55;
  WebCore::InspectorInstrumentation *v56;
  WebCore::ScriptExecutionContext *v57;
  uint64_t v58;
  WebCore::InspectorCanvasAgent *v59;
  WebCore::InspectorInstrumentation *v60;
  WebCore::ScriptExecutionContext *v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  _DWORD *v65;
  _DWORD *v66;
  _DWORD *v67;
  _DWORD *v68;
  WTF::StringImpl *v69;
  BOOL v70;
  BOOL v71;
  _BOOL4 v72;
  int v73;
  uint64_t v74;
  int *v75;
  int v76;
  JSC::VM *v77;
  unsigned int v78[2];
  unsigned int v79[2];
  WTF::StringImpl *v80[2];
  int v81;
  _QWORD v82[2];
  int v83;
  _QWORD v84[2];
  char v85;
  _DWORD *v86;
  char v87;
  _DWORD *v88;
  char v89;
  _DWORD *v90;
  char v91;
  _DWORD *v92;
  char v93;
  char v94[8];
  _BYTE v95[16];
  int v96;
  int v97;
  uint64_t v98;

  v8 = (JSC::JSGlobalObject *)this;
  v98 = *MEMORY[0x1E0C80C00];
  v9 = this[7];
  v77 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v77, "WebGL2RenderingContext", "uniformMatrix2x3fv");
  v11 = (unint64_t)a2;
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v77, "WebGL2RenderingContext", "uniformMatrix2x3fv");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v37.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, v8, v37);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  if ((v18 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v19 = 0;
  }
  else
  {
    v84[0] = v9;
    if ((v18 & 0xFFFE000000000002) != 0)
      goto LABEL_26;
    v20 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
    v21 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
    v22 = (char **)(16 * v20);
    if ((_DWORD)v20)
      v23 = v22 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v23 = 1;
    if (!v23)
    {
      do
      {
        v22 = (char **)v22[2];
        v21 = v22 != 0;
      }
      while (v22 != &WebCore::JSWebGLUniformLocation::s_info && v22 != 0);
    }
    if (!v21 || (v19 = *(_QWORD *)(v18 + 24)) == 0)
    {
LABEL_26:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v84, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniformMatrix2x3fv", 19, "WebGLUniformLocation", 21);
      return 0;
    }
  }
  v26 = *((_QWORD *)a2 + 7);
  if (v26 >= 0xFFFE000000000000)
    goto LABEL_128;
  *(_QWORD *)&v27 = v26 - 0x2000000000000;
  if (v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v26 & 0xFFFE000000000002) != 0)
    {
      i = v26 == 7;
      goto LABEL_32;
    }
    v73 = *(unsigned __int8 *)(v26 + 5);
    if (v73 == 3)
    {
      v76 = *(_DWORD *)(v26 + 8);
    }
    else
    {
      if (v73 != 2)
      {
        i = (*(_BYTE *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0xA) & 1) == 0
         || *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x28) != (_QWORD)this;
        goto LABEL_32;
      }
      v74 = *(_QWORD *)(v26 + 8);
      if ((v74 & 1) != 0)
        v75 = (int *)(v26 + 16);
      else
        v75 = (int *)(v74 + 4);
      v76 = *v75;
    }
    v70 = v76 == 0;
    goto LABEL_140;
  }
  v71 = v27 <= 0.0;
  v72 = v27 < 0.0;
  for (i = !v71 || v72; ; i = !v70)
  {
LABEL_32:
    if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
      return 0;
    v9 = *(JSC::VM **)(v11 + 64);
    WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLFloat32Array>,WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>>::convert(v8, v9, (uint64_t)v94);
    v29 = v97;
    if (v97)
      break;
    if ((unint64_t)(*(int *)(v11 + 32) - 5) > 0xFFFFFFFFFFFFFFFBLL)
      v30 = 10;
    else
      v30 = *(_QWORD *)(v11 + 72);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(v8, v30, v79);
    if (v79[1])
    {
      v25 = 0;
LABEL_56:
      v29 = v97;
      goto LABEL_57;
    }
    if ((unint64_t)(*(int *)(v11 + 32) - 6) > 0xFFFFFFFFFFFFFFFALL)
      v11 = 10;
    else
      v11 = *(_QWORD *)(v11 + 80);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(v8, v11, v78);
    if (v78[1])
    {
      v25 = 0;
      goto LABEL_56;
    }
    if (*(_BYTE *)(v17 + 33))
    {
      v8 = (JSC::JSGlobalObject *)(v17 + 8);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v80[0] = (WTF::StringImpl *)v84[0];
      v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v38
        && (v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39)) != 0
        && (v41 = *(_QWORD *)(v40 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v41, (WTF::StringImpl *)(v17 + 8), v19, (uint64_t)v84);
      }
      else
      {
        LOBYTE(v84[0]) = 0;
        v85 = 0;
      }
      v42 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v42
        && (v44 = WebCore::InspectorInstrumentation::instrumentingAgents(v42, v43)) != 0
        && (v45 = *(WebCore::InspectorCanvasAgent **)(v44 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v45, (WebCore::CanvasRenderingContext *)(v17 + 8), (WTF::JSONImpl::Value *)i, (uint64_t)&v86);
      }
      else
      {
        LOBYTE(v86) = 0;
        v87 = 0;
      }
      if (v97)
        goto LABEL_127;
      v46 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v46
        && (v48 = WebCore::InspectorInstrumentation::instrumentingAgents(v46, v47)) != 0
        && (v49 = *(_QWORD *)(v48 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v49, v17 + 8, (uint64_t)v95);
      }
      else
      {
        LOBYTE(v88) = 0;
        v89 = 0;
      }
      v50 = v79[0];
      v51 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v51
        && (v53 = WebCore::InspectorInstrumentation::instrumentingAgents(v51, v52)) != 0
        && (v54 = *(WebCore::InspectorCanvasAgent **)(v53 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v54, (WebCore::CanvasRenderingContext *)(v17 + 8), v50, (uint64_t)&v90);
      }
      else
      {
        LOBYTE(v90) = 0;
        v91 = 0;
      }
      v55 = v78[0];
      v56 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v56
        && (v58 = WebCore::InspectorInstrumentation::instrumentingAgents(v56, v57)) != 0
        && (v59 = *(WebCore::InspectorCanvasAgent **)(v58 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v59, (WebCore::CanvasRenderingContext *)(v17 + 8), v55, (uint64_t)&v92);
      }
      else
      {
        LOBYTE(v92) = 0;
        v93 = 0;
      }
      v82[0] = v84;
      v82[1] = 5;
      v60 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v60)
      {
        v62 = WebCore::InspectorInstrumentation::instrumentingAgents(v60, v61);
        if (v62)
        {
          v63 = *(_QWORD *)(v62 + 96);
          if (v63)
            WebCore::InspectorCanvasAgent::recordAction(v63, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)v80, v82);
        }
      }
      if (v93)
      {
        v64 = v92;
        v92 = 0;
        if (v64)
        {
          if (*v64 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v64;
        }
      }
      if (v91)
      {
        v65 = v90;
        v90 = 0;
        if (v65)
        {
          if (*v65 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v65;
        }
      }
      if (v89)
      {
        v66 = v88;
        v88 = 0;
        if (v66)
        {
          if (*v66 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v66;
        }
      }
      if (v87)
      {
        v67 = v86;
        v86 = 0;
        if (v67)
        {
          if (*v67 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v67;
        }
      }
      if (v85)
      {
        v68 = (_DWORD *)v84[0];
        v84[0] = 0;
        if (v68)
        {
          if (*v68 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v68;
        }
      }
      v69 = v80[0];
      v80[0] = 0;
      if (v69)
      {
        if (*(_DWORD *)v69 == 2)
          WTF::StringImpl::destroy(v69, v61);
        else
          *(_DWORD *)v69 -= 2;
      }
    }
    if (!v97)
    {
      LOBYTE(v80[0]) = 0;
      v81 = -1;
      v31 = v96;
      if (v96 == -1)
      {
        LOBYTE(v82[0]) = 0;
        v83 = -1;
      }
      else
      {
        v32 = v19;
        v33 = i;
        v34 = off_1E332F548[v96];
        ((void (*)(_QWORD *, WTF::StringImpl **, _BYTE *))v34)(v84, v80, v95);
        v81 = v31;
        LOBYTE(v82[0]) = 0;
        v83 = -1;
        ((void (*)(_QWORD *, _QWORD *, WTF::StringImpl **))v34)(v84, v82, v80);
        i = v33;
        v19 = v32;
        v83 = v31;
      }
      if (!*(_BYTE *)(v17 + 364))
      {
        WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<float,JSC::GenericTypedArrayView<JSC::Float32Adaptor>>((WTF::StringImpl *)v17, (uint64_t)"uniformMatrix2x3fv", 19, v19, i, (uint64_t)v82, 6, v79[0], (uint64_t)v84, v78[0]);
        if (v85)
          (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v17 + 88) + 1472))(*(_QWORD *)(v17 + 88), *(unsigned int *)(v19 + 16), i, v84[0], v84[1]);
        v31 = v83;
      }
      if (v31 != -1)
        ((void (*)(_QWORD *, _QWORD *))off_1E332F538[v31])(v84, v82);
      v83 = -1;
      if (v81 != -1)
        ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F538[v81])(v84, v80);
      v25 = 10;
      goto LABEL_56;
    }
LABEL_127:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_128:
    v70 = (_DWORD)v26 == 0;
LABEL_140:
    ;
  }
  v25 = 0;
LABEL_57:
  if (v29 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E332F558[v29])(v84, v95);
  return (_BYTE *)v25;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_uniformMatrix3x2fv(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v8;
  JSC::VM *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  char **v22;
  BOOL v23;
  uint64_t v25;
  unint64_t v26;
  double v27;
  uint64_t i;
  int v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)();
  JSValue v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  uint64_t v41;
  WebCore::InspectorInstrumentation *v42;
  WebCore::ScriptExecutionContext *v43;
  uint64_t v44;
  WebCore::InspectorCanvasAgent *v45;
  WebCore::InspectorInstrumentation *v46;
  WebCore::ScriptExecutionContext *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  WebCore::InspectorInstrumentation *v51;
  WebCore::ScriptExecutionContext *v52;
  uint64_t v53;
  WebCore::InspectorCanvasAgent *v54;
  unsigned int v55;
  WebCore::InspectorInstrumentation *v56;
  WebCore::ScriptExecutionContext *v57;
  uint64_t v58;
  WebCore::InspectorCanvasAgent *v59;
  WebCore::InspectorInstrumentation *v60;
  WebCore::ScriptExecutionContext *v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  _DWORD *v65;
  _DWORD *v66;
  _DWORD *v67;
  _DWORD *v68;
  WTF::StringImpl *v69;
  BOOL v70;
  BOOL v71;
  _BOOL4 v72;
  int v73;
  uint64_t v74;
  int *v75;
  int v76;
  JSC::VM *v77;
  unsigned int v78[2];
  unsigned int v79[2];
  WTF::StringImpl *v80[2];
  int v81;
  _QWORD v82[2];
  int v83;
  _QWORD v84[2];
  char v85;
  _DWORD *v86;
  char v87;
  _DWORD *v88;
  char v89;
  _DWORD *v90;
  char v91;
  _DWORD *v92;
  char v93;
  char v94[8];
  _BYTE v95[16];
  int v96;
  int v97;
  uint64_t v98;

  v8 = (JSC::JSGlobalObject *)this;
  v98 = *MEMORY[0x1E0C80C00];
  v9 = this[7];
  v77 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v77, "WebGL2RenderingContext", "uniformMatrix3x2fv");
  v11 = (unint64_t)a2;
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v77, "WebGL2RenderingContext", "uniformMatrix3x2fv");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v37.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, v8, v37);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  if ((v18 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v19 = 0;
  }
  else
  {
    v84[0] = v9;
    if ((v18 & 0xFFFE000000000002) != 0)
      goto LABEL_26;
    v20 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
    v21 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
    v22 = (char **)(16 * v20);
    if ((_DWORD)v20)
      v23 = v22 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v23 = 1;
    if (!v23)
    {
      do
      {
        v22 = (char **)v22[2];
        v21 = v22 != 0;
      }
      while (v22 != &WebCore::JSWebGLUniformLocation::s_info && v22 != 0);
    }
    if (!v21 || (v19 = *(_QWORD *)(v18 + 24)) == 0)
    {
LABEL_26:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v84, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniformMatrix3x2fv", 19, "WebGLUniformLocation", 21);
      return 0;
    }
  }
  v26 = *((_QWORD *)a2 + 7);
  if (v26 >= 0xFFFE000000000000)
    goto LABEL_128;
  *(_QWORD *)&v27 = v26 - 0x2000000000000;
  if (v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v26 & 0xFFFE000000000002) != 0)
    {
      i = v26 == 7;
      goto LABEL_32;
    }
    v73 = *(unsigned __int8 *)(v26 + 5);
    if (v73 == 3)
    {
      v76 = *(_DWORD *)(v26 + 8);
    }
    else
    {
      if (v73 != 2)
      {
        i = (*(_BYTE *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0xA) & 1) == 0
         || *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x28) != (_QWORD)this;
        goto LABEL_32;
      }
      v74 = *(_QWORD *)(v26 + 8);
      if ((v74 & 1) != 0)
        v75 = (int *)(v26 + 16);
      else
        v75 = (int *)(v74 + 4);
      v76 = *v75;
    }
    v70 = v76 == 0;
    goto LABEL_140;
  }
  v71 = v27 <= 0.0;
  v72 = v27 < 0.0;
  for (i = !v71 || v72; ; i = !v70)
  {
LABEL_32:
    if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
      return 0;
    v9 = *(JSC::VM **)(v11 + 64);
    WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLFloat32Array>,WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>>::convert(v8, v9, (uint64_t)v94);
    v29 = v97;
    if (v97)
      break;
    if ((unint64_t)(*(int *)(v11 + 32) - 5) > 0xFFFFFFFFFFFFFFFBLL)
      v30 = 10;
    else
      v30 = *(_QWORD *)(v11 + 72);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(v8, v30, v79);
    if (v79[1])
    {
      v25 = 0;
LABEL_56:
      v29 = v97;
      goto LABEL_57;
    }
    if ((unint64_t)(*(int *)(v11 + 32) - 6) > 0xFFFFFFFFFFFFFFFALL)
      v11 = 10;
    else
      v11 = *(_QWORD *)(v11 + 80);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(v8, v11, v78);
    if (v78[1])
    {
      v25 = 0;
      goto LABEL_56;
    }
    if (*(_BYTE *)(v17 + 33))
    {
      v8 = (JSC::JSGlobalObject *)(v17 + 8);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v80[0] = (WTF::StringImpl *)v84[0];
      v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v38
        && (v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39)) != 0
        && (v41 = *(_QWORD *)(v40 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v41, (WTF::StringImpl *)(v17 + 8), v19, (uint64_t)v84);
      }
      else
      {
        LOBYTE(v84[0]) = 0;
        v85 = 0;
      }
      v42 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v42
        && (v44 = WebCore::InspectorInstrumentation::instrumentingAgents(v42, v43)) != 0
        && (v45 = *(WebCore::InspectorCanvasAgent **)(v44 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v45, (WebCore::CanvasRenderingContext *)(v17 + 8), (WTF::JSONImpl::Value *)i, (uint64_t)&v86);
      }
      else
      {
        LOBYTE(v86) = 0;
        v87 = 0;
      }
      if (v97)
        goto LABEL_127;
      v46 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v46
        && (v48 = WebCore::InspectorInstrumentation::instrumentingAgents(v46, v47)) != 0
        && (v49 = *(_QWORD *)(v48 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v49, v17 + 8, (uint64_t)v95);
      }
      else
      {
        LOBYTE(v88) = 0;
        v89 = 0;
      }
      v50 = v79[0];
      v51 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v51
        && (v53 = WebCore::InspectorInstrumentation::instrumentingAgents(v51, v52)) != 0
        && (v54 = *(WebCore::InspectorCanvasAgent **)(v53 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v54, (WebCore::CanvasRenderingContext *)(v17 + 8), v50, (uint64_t)&v90);
      }
      else
      {
        LOBYTE(v90) = 0;
        v91 = 0;
      }
      v55 = v78[0];
      v56 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v56
        && (v58 = WebCore::InspectorInstrumentation::instrumentingAgents(v56, v57)) != 0
        && (v59 = *(WebCore::InspectorCanvasAgent **)(v58 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v59, (WebCore::CanvasRenderingContext *)(v17 + 8), v55, (uint64_t)&v92);
      }
      else
      {
        LOBYTE(v92) = 0;
        v93 = 0;
      }
      v82[0] = v84;
      v82[1] = 5;
      v60 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v60)
      {
        v62 = WebCore::InspectorInstrumentation::instrumentingAgents(v60, v61);
        if (v62)
        {
          v63 = *(_QWORD *)(v62 + 96);
          if (v63)
            WebCore::InspectorCanvasAgent::recordAction(v63, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)v80, v82);
        }
      }
      if (v93)
      {
        v64 = v92;
        v92 = 0;
        if (v64)
        {
          if (*v64 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v64;
        }
      }
      if (v91)
      {
        v65 = v90;
        v90 = 0;
        if (v65)
        {
          if (*v65 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v65;
        }
      }
      if (v89)
      {
        v66 = v88;
        v88 = 0;
        if (v66)
        {
          if (*v66 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v66;
        }
      }
      if (v87)
      {
        v67 = v86;
        v86 = 0;
        if (v67)
        {
          if (*v67 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v67;
        }
      }
      if (v85)
      {
        v68 = (_DWORD *)v84[0];
        v84[0] = 0;
        if (v68)
        {
          if (*v68 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v68;
        }
      }
      v69 = v80[0];
      v80[0] = 0;
      if (v69)
      {
        if (*(_DWORD *)v69 == 2)
          WTF::StringImpl::destroy(v69, v61);
        else
          *(_DWORD *)v69 -= 2;
      }
    }
    if (!v97)
    {
      LOBYTE(v80[0]) = 0;
      v81 = -1;
      v31 = v96;
      if (v96 == -1)
      {
        LOBYTE(v82[0]) = 0;
        v83 = -1;
      }
      else
      {
        v32 = v19;
        v33 = i;
        v34 = off_1E332F548[v96];
        ((void (*)(_QWORD *, WTF::StringImpl **, _BYTE *))v34)(v84, v80, v95);
        v81 = v31;
        LOBYTE(v82[0]) = 0;
        v83 = -1;
        ((void (*)(_QWORD *, _QWORD *, WTF::StringImpl **))v34)(v84, v82, v80);
        i = v33;
        v19 = v32;
        v83 = v31;
      }
      if (!*(_BYTE *)(v17 + 364))
      {
        WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<float,JSC::GenericTypedArrayView<JSC::Float32Adaptor>>((WTF::StringImpl *)v17, (uint64_t)"uniformMatrix3x2fv", 19, v19, i, (uint64_t)v82, 6, v79[0], (uint64_t)v84, v78[0]);
        if (v85)
          (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v17 + 88) + 1480))(*(_QWORD *)(v17 + 88), *(unsigned int *)(v19 + 16), i, v84[0], v84[1]);
        v31 = v83;
      }
      if (v31 != -1)
        ((void (*)(_QWORD *, _QWORD *))off_1E332F538[v31])(v84, v82);
      v83 = -1;
      if (v81 != -1)
        ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F538[v81])(v84, v80);
      v25 = 10;
      goto LABEL_56;
    }
LABEL_127:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_128:
    v70 = (_DWORD)v26 == 0;
LABEL_140:
    ;
  }
  v25 = 0;
LABEL_57:
  if (v29 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E332F558[v29])(v84, v95);
  return (_BYTE *)v25;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_uniformMatrix2x4fv(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v8;
  JSC::VM *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  char **v22;
  BOOL v23;
  uint64_t v25;
  unint64_t v26;
  double v27;
  uint64_t i;
  int v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)();
  JSValue v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  uint64_t v41;
  WebCore::InspectorInstrumentation *v42;
  WebCore::ScriptExecutionContext *v43;
  uint64_t v44;
  WebCore::InspectorCanvasAgent *v45;
  WebCore::InspectorInstrumentation *v46;
  WebCore::ScriptExecutionContext *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  WebCore::InspectorInstrumentation *v51;
  WebCore::ScriptExecutionContext *v52;
  uint64_t v53;
  WebCore::InspectorCanvasAgent *v54;
  unsigned int v55;
  WebCore::InspectorInstrumentation *v56;
  WebCore::ScriptExecutionContext *v57;
  uint64_t v58;
  WebCore::InspectorCanvasAgent *v59;
  WebCore::InspectorInstrumentation *v60;
  WebCore::ScriptExecutionContext *v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  _DWORD *v65;
  _DWORD *v66;
  _DWORD *v67;
  _DWORD *v68;
  WTF::StringImpl *v69;
  BOOL v70;
  BOOL v71;
  _BOOL4 v72;
  int v73;
  uint64_t v74;
  int *v75;
  int v76;
  JSC::VM *v77;
  unsigned int v78[2];
  unsigned int v79[2];
  WTF::StringImpl *v80[2];
  int v81;
  _QWORD v82[2];
  int v83;
  _QWORD v84[2];
  char v85;
  _DWORD *v86;
  char v87;
  _DWORD *v88;
  char v89;
  _DWORD *v90;
  char v91;
  _DWORD *v92;
  char v93;
  char v94[8];
  _BYTE v95[16];
  int v96;
  int v97;
  uint64_t v98;

  v8 = (JSC::JSGlobalObject *)this;
  v98 = *MEMORY[0x1E0C80C00];
  v9 = this[7];
  v77 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v77, "WebGL2RenderingContext", "uniformMatrix2x4fv");
  v11 = (unint64_t)a2;
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v77, "WebGL2RenderingContext", "uniformMatrix2x4fv");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v37.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, v8, v37);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  if ((v18 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v19 = 0;
  }
  else
  {
    v84[0] = v9;
    if ((v18 & 0xFFFE000000000002) != 0)
      goto LABEL_26;
    v20 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
    v21 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
    v22 = (char **)(16 * v20);
    if ((_DWORD)v20)
      v23 = v22 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v23 = 1;
    if (!v23)
    {
      do
      {
        v22 = (char **)v22[2];
        v21 = v22 != 0;
      }
      while (v22 != &WebCore::JSWebGLUniformLocation::s_info && v22 != 0);
    }
    if (!v21 || (v19 = *(_QWORD *)(v18 + 24)) == 0)
    {
LABEL_26:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v84, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniformMatrix2x4fv", 19, "WebGLUniformLocation", 21);
      return 0;
    }
  }
  v26 = *((_QWORD *)a2 + 7);
  if (v26 >= 0xFFFE000000000000)
    goto LABEL_128;
  *(_QWORD *)&v27 = v26 - 0x2000000000000;
  if (v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v26 & 0xFFFE000000000002) != 0)
    {
      i = v26 == 7;
      goto LABEL_32;
    }
    v73 = *(unsigned __int8 *)(v26 + 5);
    if (v73 == 3)
    {
      v76 = *(_DWORD *)(v26 + 8);
    }
    else
    {
      if (v73 != 2)
      {
        i = (*(_BYTE *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0xA) & 1) == 0
         || *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x28) != (_QWORD)this;
        goto LABEL_32;
      }
      v74 = *(_QWORD *)(v26 + 8);
      if ((v74 & 1) != 0)
        v75 = (int *)(v26 + 16);
      else
        v75 = (int *)(v74 + 4);
      v76 = *v75;
    }
    v70 = v76 == 0;
    goto LABEL_140;
  }
  v71 = v27 <= 0.0;
  v72 = v27 < 0.0;
  for (i = !v71 || v72; ; i = !v70)
  {
LABEL_32:
    if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
      return 0;
    v9 = *(JSC::VM **)(v11 + 64);
    WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLFloat32Array>,WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>>::convert(v8, v9, (uint64_t)v94);
    v29 = v97;
    if (v97)
      break;
    if ((unint64_t)(*(int *)(v11 + 32) - 5) > 0xFFFFFFFFFFFFFFFBLL)
      v30 = 10;
    else
      v30 = *(_QWORD *)(v11 + 72);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(v8, v30, v79);
    if (v79[1])
    {
      v25 = 0;
LABEL_56:
      v29 = v97;
      goto LABEL_57;
    }
    if ((unint64_t)(*(int *)(v11 + 32) - 6) > 0xFFFFFFFFFFFFFFFALL)
      v11 = 10;
    else
      v11 = *(_QWORD *)(v11 + 80);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(v8, v11, v78);
    if (v78[1])
    {
      v25 = 0;
      goto LABEL_56;
    }
    if (*(_BYTE *)(v17 + 33))
    {
      v8 = (JSC::JSGlobalObject *)(v17 + 8);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v80[0] = (WTF::StringImpl *)v84[0];
      v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v38
        && (v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39)) != 0
        && (v41 = *(_QWORD *)(v40 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v41, (WTF::StringImpl *)(v17 + 8), v19, (uint64_t)v84);
      }
      else
      {
        LOBYTE(v84[0]) = 0;
        v85 = 0;
      }
      v42 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v42
        && (v44 = WebCore::InspectorInstrumentation::instrumentingAgents(v42, v43)) != 0
        && (v45 = *(WebCore::InspectorCanvasAgent **)(v44 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v45, (WebCore::CanvasRenderingContext *)(v17 + 8), (WTF::JSONImpl::Value *)i, (uint64_t)&v86);
      }
      else
      {
        LOBYTE(v86) = 0;
        v87 = 0;
      }
      if (v97)
        goto LABEL_127;
      v46 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v46
        && (v48 = WebCore::InspectorInstrumentation::instrumentingAgents(v46, v47)) != 0
        && (v49 = *(_QWORD *)(v48 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v49, v17 + 8, (uint64_t)v95);
      }
      else
      {
        LOBYTE(v88) = 0;
        v89 = 0;
      }
      v50 = v79[0];
      v51 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v51
        && (v53 = WebCore::InspectorInstrumentation::instrumentingAgents(v51, v52)) != 0
        && (v54 = *(WebCore::InspectorCanvasAgent **)(v53 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v54, (WebCore::CanvasRenderingContext *)(v17 + 8), v50, (uint64_t)&v90);
      }
      else
      {
        LOBYTE(v90) = 0;
        v91 = 0;
      }
      v55 = v78[0];
      v56 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v56
        && (v58 = WebCore::InspectorInstrumentation::instrumentingAgents(v56, v57)) != 0
        && (v59 = *(WebCore::InspectorCanvasAgent **)(v58 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v59, (WebCore::CanvasRenderingContext *)(v17 + 8), v55, (uint64_t)&v92);
      }
      else
      {
        LOBYTE(v92) = 0;
        v93 = 0;
      }
      v82[0] = v84;
      v82[1] = 5;
      v60 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v60)
      {
        v62 = WebCore::InspectorInstrumentation::instrumentingAgents(v60, v61);
        if (v62)
        {
          v63 = *(_QWORD *)(v62 + 96);
          if (v63)
            WebCore::InspectorCanvasAgent::recordAction(v63, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)v80, v82);
        }
      }
      if (v93)
      {
        v64 = v92;
        v92 = 0;
        if (v64)
        {
          if (*v64 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v64;
        }
      }
      if (v91)
      {
        v65 = v90;
        v90 = 0;
        if (v65)
        {
          if (*v65 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v65;
        }
      }
      if (v89)
      {
        v66 = v88;
        v88 = 0;
        if (v66)
        {
          if (*v66 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v66;
        }
      }
      if (v87)
      {
        v67 = v86;
        v86 = 0;
        if (v67)
        {
          if (*v67 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v67;
        }
      }
      if (v85)
      {
        v68 = (_DWORD *)v84[0];
        v84[0] = 0;
        if (v68)
        {
          if (*v68 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v68;
        }
      }
      v69 = v80[0];
      v80[0] = 0;
      if (v69)
      {
        if (*(_DWORD *)v69 == 2)
          WTF::StringImpl::destroy(v69, v61);
        else
          *(_DWORD *)v69 -= 2;
      }
    }
    if (!v97)
    {
      LOBYTE(v80[0]) = 0;
      v81 = -1;
      v31 = v96;
      if (v96 == -1)
      {
        LOBYTE(v82[0]) = 0;
        v83 = -1;
      }
      else
      {
        v32 = v19;
        v33 = i;
        v34 = off_1E332F548[v96];
        ((void (*)(_QWORD *, WTF::StringImpl **, _BYTE *))v34)(v84, v80, v95);
        v81 = v31;
        LOBYTE(v82[0]) = 0;
        v83 = -1;
        ((void (*)(_QWORD *, _QWORD *, WTF::StringImpl **))v34)(v84, v82, v80);
        i = v33;
        v19 = v32;
        v83 = v31;
      }
      if (!*(_BYTE *)(v17 + 364))
      {
        WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<float,JSC::GenericTypedArrayView<JSC::Float32Adaptor>>((WTF::StringImpl *)v17, (uint64_t)"uniformMatrix2x4fv", 19, v19, i, (uint64_t)v82, 8, v79[0], (uint64_t)v84, v78[0]);
        if (v85)
          (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v17 + 88) + 1488))(*(_QWORD *)(v17 + 88), *(unsigned int *)(v19 + 16), i, v84[0], v84[1]);
        v31 = v83;
      }
      if (v31 != -1)
        ((void (*)(_QWORD *, _QWORD *))off_1E332F538[v31])(v84, v82);
      v83 = -1;
      if (v81 != -1)
        ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F538[v81])(v84, v80);
      v25 = 10;
      goto LABEL_56;
    }
LABEL_127:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_128:
    v70 = (_DWORD)v26 == 0;
LABEL_140:
    ;
  }
  v25 = 0;
LABEL_57:
  if (v29 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E332F558[v29])(v84, v95);
  return (_BYTE *)v25;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_uniformMatrix4x2fv(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v8;
  JSC::VM *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  char **v22;
  BOOL v23;
  uint64_t v25;
  unint64_t v26;
  double v27;
  uint64_t i;
  int v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)();
  JSValue v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  uint64_t v41;
  WebCore::InspectorInstrumentation *v42;
  WebCore::ScriptExecutionContext *v43;
  uint64_t v44;
  WebCore::InspectorCanvasAgent *v45;
  WebCore::InspectorInstrumentation *v46;
  WebCore::ScriptExecutionContext *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  WebCore::InspectorInstrumentation *v51;
  WebCore::ScriptExecutionContext *v52;
  uint64_t v53;
  WebCore::InspectorCanvasAgent *v54;
  unsigned int v55;
  WebCore::InspectorInstrumentation *v56;
  WebCore::ScriptExecutionContext *v57;
  uint64_t v58;
  WebCore::InspectorCanvasAgent *v59;
  WebCore::InspectorInstrumentation *v60;
  WebCore::ScriptExecutionContext *v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  _DWORD *v65;
  _DWORD *v66;
  _DWORD *v67;
  _DWORD *v68;
  WTF::StringImpl *v69;
  BOOL v70;
  BOOL v71;
  _BOOL4 v72;
  int v73;
  uint64_t v74;
  int *v75;
  int v76;
  JSC::VM *v77;
  unsigned int v78[2];
  unsigned int v79[2];
  WTF::StringImpl *v80[2];
  int v81;
  _QWORD v82[2];
  int v83;
  _QWORD v84[2];
  char v85;
  _DWORD *v86;
  char v87;
  _DWORD *v88;
  char v89;
  _DWORD *v90;
  char v91;
  _DWORD *v92;
  char v93;
  char v94[8];
  _BYTE v95[16];
  int v96;
  int v97;
  uint64_t v98;

  v8 = (JSC::JSGlobalObject *)this;
  v98 = *MEMORY[0x1E0C80C00];
  v9 = this[7];
  v77 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v77, "WebGL2RenderingContext", "uniformMatrix4x2fv");
  v11 = (unint64_t)a2;
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v77, "WebGL2RenderingContext", "uniformMatrix4x2fv");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v37.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, v8, v37);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  if ((v18 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v19 = 0;
  }
  else
  {
    v84[0] = v9;
    if ((v18 & 0xFFFE000000000002) != 0)
      goto LABEL_26;
    v20 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
    v21 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
    v22 = (char **)(16 * v20);
    if ((_DWORD)v20)
      v23 = v22 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v23 = 1;
    if (!v23)
    {
      do
      {
        v22 = (char **)v22[2];
        v21 = v22 != 0;
      }
      while (v22 != &WebCore::JSWebGLUniformLocation::s_info && v22 != 0);
    }
    if (!v21 || (v19 = *(_QWORD *)(v18 + 24)) == 0)
    {
LABEL_26:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v84, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniformMatrix4x2fv", 19, "WebGLUniformLocation", 21);
      return 0;
    }
  }
  v26 = *((_QWORD *)a2 + 7);
  if (v26 >= 0xFFFE000000000000)
    goto LABEL_128;
  *(_QWORD *)&v27 = v26 - 0x2000000000000;
  if (v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v26 & 0xFFFE000000000002) != 0)
    {
      i = v26 == 7;
      goto LABEL_32;
    }
    v73 = *(unsigned __int8 *)(v26 + 5);
    if (v73 == 3)
    {
      v76 = *(_DWORD *)(v26 + 8);
    }
    else
    {
      if (v73 != 2)
      {
        i = (*(_BYTE *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0xA) & 1) == 0
         || *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x28) != (_QWORD)this;
        goto LABEL_32;
      }
      v74 = *(_QWORD *)(v26 + 8);
      if ((v74 & 1) != 0)
        v75 = (int *)(v26 + 16);
      else
        v75 = (int *)(v74 + 4);
      v76 = *v75;
    }
    v70 = v76 == 0;
    goto LABEL_140;
  }
  v71 = v27 <= 0.0;
  v72 = v27 < 0.0;
  for (i = !v71 || v72; ; i = !v70)
  {
LABEL_32:
    if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
      return 0;
    v9 = *(JSC::VM **)(v11 + 64);
    WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLFloat32Array>,WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>>::convert(v8, v9, (uint64_t)v94);
    v29 = v97;
    if (v97)
      break;
    if ((unint64_t)(*(int *)(v11 + 32) - 5) > 0xFFFFFFFFFFFFFFFBLL)
      v30 = 10;
    else
      v30 = *(_QWORD *)(v11 + 72);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(v8, v30, v79);
    if (v79[1])
    {
      v25 = 0;
LABEL_56:
      v29 = v97;
      goto LABEL_57;
    }
    if ((unint64_t)(*(int *)(v11 + 32) - 6) > 0xFFFFFFFFFFFFFFFALL)
      v11 = 10;
    else
      v11 = *(_QWORD *)(v11 + 80);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(v8, v11, v78);
    if (v78[1])
    {
      v25 = 0;
      goto LABEL_56;
    }
    if (*(_BYTE *)(v17 + 33))
    {
      v8 = (JSC::JSGlobalObject *)(v17 + 8);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v80[0] = (WTF::StringImpl *)v84[0];
      v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v38
        && (v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39)) != 0
        && (v41 = *(_QWORD *)(v40 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v41, (WTF::StringImpl *)(v17 + 8), v19, (uint64_t)v84);
      }
      else
      {
        LOBYTE(v84[0]) = 0;
        v85 = 0;
      }
      v42 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v42
        && (v44 = WebCore::InspectorInstrumentation::instrumentingAgents(v42, v43)) != 0
        && (v45 = *(WebCore::InspectorCanvasAgent **)(v44 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v45, (WebCore::CanvasRenderingContext *)(v17 + 8), (WTF::JSONImpl::Value *)i, (uint64_t)&v86);
      }
      else
      {
        LOBYTE(v86) = 0;
        v87 = 0;
      }
      if (v97)
        goto LABEL_127;
      v46 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v46
        && (v48 = WebCore::InspectorInstrumentation::instrumentingAgents(v46, v47)) != 0
        && (v49 = *(_QWORD *)(v48 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v49, v17 + 8, (uint64_t)v95);
      }
      else
      {
        LOBYTE(v88) = 0;
        v89 = 0;
      }
      v50 = v79[0];
      v51 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v51
        && (v53 = WebCore::InspectorInstrumentation::instrumentingAgents(v51, v52)) != 0
        && (v54 = *(WebCore::InspectorCanvasAgent **)(v53 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v54, (WebCore::CanvasRenderingContext *)(v17 + 8), v50, (uint64_t)&v90);
      }
      else
      {
        LOBYTE(v90) = 0;
        v91 = 0;
      }
      v55 = v78[0];
      v56 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v56
        && (v58 = WebCore::InspectorInstrumentation::instrumentingAgents(v56, v57)) != 0
        && (v59 = *(WebCore::InspectorCanvasAgent **)(v58 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v59, (WebCore::CanvasRenderingContext *)(v17 + 8), v55, (uint64_t)&v92);
      }
      else
      {
        LOBYTE(v92) = 0;
        v93 = 0;
      }
      v82[0] = v84;
      v82[1] = 5;
      v60 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v60)
      {
        v62 = WebCore::InspectorInstrumentation::instrumentingAgents(v60, v61);
        if (v62)
        {
          v63 = *(_QWORD *)(v62 + 96);
          if (v63)
            WebCore::InspectorCanvasAgent::recordAction(v63, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)v80, v82);
        }
      }
      if (v93)
      {
        v64 = v92;
        v92 = 0;
        if (v64)
        {
          if (*v64 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v64;
        }
      }
      if (v91)
      {
        v65 = v90;
        v90 = 0;
        if (v65)
        {
          if (*v65 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v65;
        }
      }
      if (v89)
      {
        v66 = v88;
        v88 = 0;
        if (v66)
        {
          if (*v66 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v66;
        }
      }
      if (v87)
      {
        v67 = v86;
        v86 = 0;
        if (v67)
        {
          if (*v67 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v67;
        }
      }
      if (v85)
      {
        v68 = (_DWORD *)v84[0];
        v84[0] = 0;
        if (v68)
        {
          if (*v68 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v68;
        }
      }
      v69 = v80[0];
      v80[0] = 0;
      if (v69)
      {
        if (*(_DWORD *)v69 == 2)
          WTF::StringImpl::destroy(v69, v61);
        else
          *(_DWORD *)v69 -= 2;
      }
    }
    if (!v97)
    {
      LOBYTE(v80[0]) = 0;
      v81 = -1;
      v31 = v96;
      if (v96 == -1)
      {
        LOBYTE(v82[0]) = 0;
        v83 = -1;
      }
      else
      {
        v32 = v19;
        v33 = i;
        v34 = off_1E332F548[v96];
        ((void (*)(_QWORD *, WTF::StringImpl **, _BYTE *))v34)(v84, v80, v95);
        v81 = v31;
        LOBYTE(v82[0]) = 0;
        v83 = -1;
        ((void (*)(_QWORD *, _QWORD *, WTF::StringImpl **))v34)(v84, v82, v80);
        i = v33;
        v19 = v32;
        v83 = v31;
      }
      if (!*(_BYTE *)(v17 + 364))
      {
        WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<float,JSC::GenericTypedArrayView<JSC::Float32Adaptor>>((WTF::StringImpl *)v17, (uint64_t)"uniformMatrix4x2fv", 19, v19, i, (uint64_t)v82, 8, v79[0], (uint64_t)v84, v78[0]);
        if (v85)
          (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v17 + 88) + 1496))(*(_QWORD *)(v17 + 88), *(unsigned int *)(v19 + 16), i, v84[0], v84[1]);
        v31 = v83;
      }
      if (v31 != -1)
        ((void (*)(_QWORD *, _QWORD *))off_1E332F538[v31])(v84, v82);
      v83 = -1;
      if (v81 != -1)
        ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F538[v81])(v84, v80);
      v25 = 10;
      goto LABEL_56;
    }
LABEL_127:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_128:
    v70 = (_DWORD)v26 == 0;
LABEL_140:
    ;
  }
  v25 = 0;
LABEL_57:
  if (v29 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E332F558[v29])(v84, v95);
  return (_BYTE *)v25;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_uniformMatrix3x4fv(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v8;
  JSC::VM *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  char **v22;
  BOOL v23;
  uint64_t v25;
  unint64_t v26;
  double v27;
  uint64_t i;
  int v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)();
  JSValue v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  uint64_t v41;
  WebCore::InspectorInstrumentation *v42;
  WebCore::ScriptExecutionContext *v43;
  uint64_t v44;
  WebCore::InspectorCanvasAgent *v45;
  WebCore::InspectorInstrumentation *v46;
  WebCore::ScriptExecutionContext *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  WebCore::InspectorInstrumentation *v51;
  WebCore::ScriptExecutionContext *v52;
  uint64_t v53;
  WebCore::InspectorCanvasAgent *v54;
  unsigned int v55;
  WebCore::InspectorInstrumentation *v56;
  WebCore::ScriptExecutionContext *v57;
  uint64_t v58;
  WebCore::InspectorCanvasAgent *v59;
  WebCore::InspectorInstrumentation *v60;
  WebCore::ScriptExecutionContext *v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  _DWORD *v65;
  _DWORD *v66;
  _DWORD *v67;
  _DWORD *v68;
  WTF::StringImpl *v69;
  BOOL v70;
  BOOL v71;
  _BOOL4 v72;
  int v73;
  uint64_t v74;
  int *v75;
  int v76;
  JSC::VM *v77;
  unsigned int v78[2];
  unsigned int v79[2];
  WTF::StringImpl *v80[2];
  int v81;
  _QWORD v82[2];
  int v83;
  _QWORD v84[2];
  char v85;
  _DWORD *v86;
  char v87;
  _DWORD *v88;
  char v89;
  _DWORD *v90;
  char v91;
  _DWORD *v92;
  char v93;
  char v94[8];
  _BYTE v95[16];
  int v96;
  int v97;
  uint64_t v98;

  v8 = (JSC::JSGlobalObject *)this;
  v98 = *MEMORY[0x1E0C80C00];
  v9 = this[7];
  v77 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v77, "WebGL2RenderingContext", "uniformMatrix3x4fv");
  v11 = (unint64_t)a2;
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v77, "WebGL2RenderingContext", "uniformMatrix3x4fv");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v37.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, v8, v37);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  if ((v18 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v19 = 0;
  }
  else
  {
    v84[0] = v9;
    if ((v18 & 0xFFFE000000000002) != 0)
      goto LABEL_26;
    v20 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
    v21 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
    v22 = (char **)(16 * v20);
    if ((_DWORD)v20)
      v23 = v22 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v23 = 1;
    if (!v23)
    {
      do
      {
        v22 = (char **)v22[2];
        v21 = v22 != 0;
      }
      while (v22 != &WebCore::JSWebGLUniformLocation::s_info && v22 != 0);
    }
    if (!v21 || (v19 = *(_QWORD *)(v18 + 24)) == 0)
    {
LABEL_26:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v84, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniformMatrix3x4fv", 19, "WebGLUniformLocation", 21);
      return 0;
    }
  }
  v26 = *((_QWORD *)a2 + 7);
  if (v26 >= 0xFFFE000000000000)
    goto LABEL_128;
  *(_QWORD *)&v27 = v26 - 0x2000000000000;
  if (v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v26 & 0xFFFE000000000002) != 0)
    {
      i = v26 == 7;
      goto LABEL_32;
    }
    v73 = *(unsigned __int8 *)(v26 + 5);
    if (v73 == 3)
    {
      v76 = *(_DWORD *)(v26 + 8);
    }
    else
    {
      if (v73 != 2)
      {
        i = (*(_BYTE *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0xA) & 1) == 0
         || *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x28) != (_QWORD)this;
        goto LABEL_32;
      }
      v74 = *(_QWORD *)(v26 + 8);
      if ((v74 & 1) != 0)
        v75 = (int *)(v26 + 16);
      else
        v75 = (int *)(v74 + 4);
      v76 = *v75;
    }
    v70 = v76 == 0;
    goto LABEL_140;
  }
  v71 = v27 <= 0.0;
  v72 = v27 < 0.0;
  for (i = !v71 || v72; ; i = !v70)
  {
LABEL_32:
    if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
      return 0;
    v9 = *(JSC::VM **)(v11 + 64);
    WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLFloat32Array>,WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>>::convert(v8, v9, (uint64_t)v94);
    v29 = v97;
    if (v97)
      break;
    if ((unint64_t)(*(int *)(v11 + 32) - 5) > 0xFFFFFFFFFFFFFFFBLL)
      v30 = 10;
    else
      v30 = *(_QWORD *)(v11 + 72);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(v8, v30, v79);
    if (v79[1])
    {
      v25 = 0;
LABEL_56:
      v29 = v97;
      goto LABEL_57;
    }
    if ((unint64_t)(*(int *)(v11 + 32) - 6) > 0xFFFFFFFFFFFFFFFALL)
      v11 = 10;
    else
      v11 = *(_QWORD *)(v11 + 80);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(v8, v11, v78);
    if (v78[1])
    {
      v25 = 0;
      goto LABEL_56;
    }
    if (*(_BYTE *)(v17 + 33))
    {
      v8 = (JSC::JSGlobalObject *)(v17 + 8);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v80[0] = (WTF::StringImpl *)v84[0];
      v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v38
        && (v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39)) != 0
        && (v41 = *(_QWORD *)(v40 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v41, (WTF::StringImpl *)(v17 + 8), v19, (uint64_t)v84);
      }
      else
      {
        LOBYTE(v84[0]) = 0;
        v85 = 0;
      }
      v42 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v42
        && (v44 = WebCore::InspectorInstrumentation::instrumentingAgents(v42, v43)) != 0
        && (v45 = *(WebCore::InspectorCanvasAgent **)(v44 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v45, (WebCore::CanvasRenderingContext *)(v17 + 8), (WTF::JSONImpl::Value *)i, (uint64_t)&v86);
      }
      else
      {
        LOBYTE(v86) = 0;
        v87 = 0;
      }
      if (v97)
        goto LABEL_127;
      v46 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v46
        && (v48 = WebCore::InspectorInstrumentation::instrumentingAgents(v46, v47)) != 0
        && (v49 = *(_QWORD *)(v48 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v49, v17 + 8, (uint64_t)v95);
      }
      else
      {
        LOBYTE(v88) = 0;
        v89 = 0;
      }
      v50 = v79[0];
      v51 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v51
        && (v53 = WebCore::InspectorInstrumentation::instrumentingAgents(v51, v52)) != 0
        && (v54 = *(WebCore::InspectorCanvasAgent **)(v53 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v54, (WebCore::CanvasRenderingContext *)(v17 + 8), v50, (uint64_t)&v90);
      }
      else
      {
        LOBYTE(v90) = 0;
        v91 = 0;
      }
      v55 = v78[0];
      v56 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v56
        && (v58 = WebCore::InspectorInstrumentation::instrumentingAgents(v56, v57)) != 0
        && (v59 = *(WebCore::InspectorCanvasAgent **)(v58 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v59, (WebCore::CanvasRenderingContext *)(v17 + 8), v55, (uint64_t)&v92);
      }
      else
      {
        LOBYTE(v92) = 0;
        v93 = 0;
      }
      v82[0] = v84;
      v82[1] = 5;
      v60 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v60)
      {
        v62 = WebCore::InspectorInstrumentation::instrumentingAgents(v60, v61);
        if (v62)
        {
          v63 = *(_QWORD *)(v62 + 96);
          if (v63)
            WebCore::InspectorCanvasAgent::recordAction(v63, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)v80, v82);
        }
      }
      if (v93)
      {
        v64 = v92;
        v92 = 0;
        if (v64)
        {
          if (*v64 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v64;
        }
      }
      if (v91)
      {
        v65 = v90;
        v90 = 0;
        if (v65)
        {
          if (*v65 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v65;
        }
      }
      if (v89)
      {
        v66 = v88;
        v88 = 0;
        if (v66)
        {
          if (*v66 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v66;
        }
      }
      if (v87)
      {
        v67 = v86;
        v86 = 0;
        if (v67)
        {
          if (*v67 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v67;
        }
      }
      if (v85)
      {
        v68 = (_DWORD *)v84[0];
        v84[0] = 0;
        if (v68)
        {
          if (*v68 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v68;
        }
      }
      v69 = v80[0];
      v80[0] = 0;
      if (v69)
      {
        if (*(_DWORD *)v69 == 2)
          WTF::StringImpl::destroy(v69, v61);
        else
          *(_DWORD *)v69 -= 2;
      }
    }
    if (!v97)
    {
      LOBYTE(v80[0]) = 0;
      v81 = -1;
      v31 = v96;
      if (v96 == -1)
      {
        LOBYTE(v82[0]) = 0;
        v83 = -1;
      }
      else
      {
        v32 = v19;
        v33 = i;
        v34 = off_1E332F548[v96];
        ((void (*)(_QWORD *, WTF::StringImpl **, _BYTE *))v34)(v84, v80, v95);
        v81 = v31;
        LOBYTE(v82[0]) = 0;
        v83 = -1;
        ((void (*)(_QWORD *, _QWORD *, WTF::StringImpl **))v34)(v84, v82, v80);
        i = v33;
        v19 = v32;
        v83 = v31;
      }
      if (!*(_BYTE *)(v17 + 364))
      {
        WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<float,JSC::GenericTypedArrayView<JSC::Float32Adaptor>>((WTF::StringImpl *)v17, (uint64_t)"uniformMatrix3x4fv", 19, v19, i, (uint64_t)v82, 12, v79[0], (uint64_t)v84, v78[0]);
        if (v85)
          (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v17 + 88) + 1504))(*(_QWORD *)(v17 + 88), *(unsigned int *)(v19 + 16), i, v84[0], v84[1]);
        v31 = v83;
      }
      if (v31 != -1)
        ((void (*)(_QWORD *, _QWORD *))off_1E332F538[v31])(v84, v82);
      v83 = -1;
      if (v81 != -1)
        ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F538[v81])(v84, v80);
      v25 = 10;
      goto LABEL_56;
    }
LABEL_127:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_128:
    v70 = (_DWORD)v26 == 0;
LABEL_140:
    ;
  }
  v25 = 0;
LABEL_57:
  if (v29 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E332F558[v29])(v84, v95);
  return (_BYTE *)v25;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_uniformMatrix4x3fv(JSC::VM **this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::JSGlobalObject *v8;
  JSC::VM *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BOOL4 v21;
  char **v22;
  BOOL v23;
  uint64_t v25;
  unint64_t v26;
  double v27;
  uint64_t i;
  int v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)();
  JSValue v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  uint64_t v41;
  WebCore::InspectorInstrumentation *v42;
  WebCore::ScriptExecutionContext *v43;
  uint64_t v44;
  WebCore::InspectorCanvasAgent *v45;
  WebCore::InspectorInstrumentation *v46;
  WebCore::ScriptExecutionContext *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  WebCore::InspectorInstrumentation *v51;
  WebCore::ScriptExecutionContext *v52;
  uint64_t v53;
  WebCore::InspectorCanvasAgent *v54;
  unsigned int v55;
  WebCore::InspectorInstrumentation *v56;
  WebCore::ScriptExecutionContext *v57;
  uint64_t v58;
  WebCore::InspectorCanvasAgent *v59;
  WebCore::InspectorInstrumentation *v60;
  WebCore::ScriptExecutionContext *v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  _DWORD *v65;
  _DWORD *v66;
  _DWORD *v67;
  _DWORD *v68;
  WTF::StringImpl *v69;
  BOOL v70;
  BOOL v71;
  _BOOL4 v72;
  int v73;
  uint64_t v74;
  int *v75;
  int v76;
  JSC::VM *v77;
  unsigned int v78[2];
  unsigned int v79[2];
  WTF::StringImpl *v80[2];
  int v81;
  _QWORD v82[2];
  int v83;
  _QWORD v84[2];
  char v85;
  _DWORD *v86;
  char v87;
  _DWORD *v88;
  char v89;
  _DWORD *v90;
  char v91;
  _DWORD *v92;
  char v93;
  char v94[8];
  _BYTE v95[16];
  int v96;
  int v97;
  uint64_t v98;

  v8 = (JSC::JSGlobalObject *)this;
  v98 = *MEMORY[0x1E0C80C00];
  v9 = this[7];
  v77 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v77, "WebGL2RenderingContext", "uniformMatrix4x3fv");
  v11 = (unint64_t)a2;
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v77, "WebGL2RenderingContext", "uniformMatrix4x3fv");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v37.super.isa = (Class)JSC::createNotEnoughArgumentsError((JSC *)this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, v8, v37);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  if ((v18 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v19 = 0;
  }
  else
  {
    v84[0] = v9;
    if ((v18 & 0xFFFE000000000002) != 0)
      goto LABEL_26;
    v20 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
    v21 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
    v22 = (char **)(16 * v20);
    if ((_DWORD)v20)
      v23 = v22 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v23 = 1;
    if (!v23)
    {
      do
      {
        v22 = (char **)v22[2];
        v21 = v22 != 0;
      }
      while (v22 != &WebCore::JSWebGLUniformLocation::s_info && v22 != 0);
    }
    if (!v21 || (v19 = *(_QWORD *)(v18 + 24)) == 0)
    {
LABEL_26:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v84, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniformMatrix4x3fv", 19, "WebGLUniformLocation", 21);
      return 0;
    }
  }
  v26 = *((_QWORD *)a2 + 7);
  if (v26 >= 0xFFFE000000000000)
    goto LABEL_128;
  *(_QWORD *)&v27 = v26 - 0x2000000000000;
  if (v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    if ((v26 & 0xFFFE000000000002) != 0)
    {
      i = v26 == 7;
      goto LABEL_32;
    }
    v73 = *(unsigned __int8 *)(v26 + 5);
    if (v73 == 3)
    {
      v76 = *(_DWORD *)(v26 + 8);
    }
    else
    {
      if (v73 != 2)
      {
        i = (*(_BYTE *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0xA) & 1) == 0
         || *(_QWORD *)(16 * (*(_DWORD *)v26 & 0xFFFFFFFE) + 0x28) != (_QWORD)this;
        goto LABEL_32;
      }
      v74 = *(_QWORD *)(v26 + 8);
      if ((v74 & 1) != 0)
        v75 = (int *)(v26 + 16);
      else
        v75 = (int *)(v74 + 4);
      v76 = *v75;
    }
    v70 = v76 == 0;
    goto LABEL_140;
  }
  v71 = v27 <= 0.0;
  v72 = v27 < 0.0;
  for (i = !v71 || v72; ; i = !v70)
  {
LABEL_32:
    if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
      return 0;
    v9 = *(JSC::VM **)(v11 + 64);
    WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLFloat32Array>,WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>>::convert(v8, v9, (uint64_t)v94);
    v29 = v97;
    if (v97)
      break;
    if ((unint64_t)(*(int *)(v11 + 32) - 5) > 0xFFFFFFFFFFFFFFFBLL)
      v30 = 10;
    else
      v30 = *(_QWORD *)(v11 + 72);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(v8, v30, v79);
    if (v79[1])
    {
      v25 = 0;
LABEL_56:
      v29 = v97;
      goto LABEL_57;
    }
    if ((unint64_t)(*(int *)(v11 + 32) - 6) > 0xFFFFFFFFFFFFFFFALL)
      v11 = 10;
    else
      v11 = *(_QWORD *)(v11 + 80);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(v8, v11, v78);
    if (v78[1])
    {
      v25 = 0;
      goto LABEL_56;
    }
    if (*(_BYTE *)(v17 + 33))
    {
      v8 = (JSC::JSGlobalObject *)(v17 + 8);
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v80[0] = (WTF::StringImpl *)v84[0];
      v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v38
        && (v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39)) != 0
        && (v41 = *(_QWORD *)(v40 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v41, (WTF::StringImpl *)(v17 + 8), v19, (uint64_t)v84);
      }
      else
      {
        LOBYTE(v84[0]) = 0;
        v85 = 0;
      }
      v42 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v42
        && (v44 = WebCore::InspectorInstrumentation::instrumentingAgents(v42, v43)) != 0
        && (v45 = *(WebCore::InspectorCanvasAgent **)(v44 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v45, (WebCore::CanvasRenderingContext *)(v17 + 8), (WTF::JSONImpl::Value *)i, (uint64_t)&v86);
      }
      else
      {
        LOBYTE(v86) = 0;
        v87 = 0;
      }
      if (v97)
        goto LABEL_127;
      v46 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v46
        && (v48 = WebCore::InspectorInstrumentation::instrumentingAgents(v46, v47)) != 0
        && (v49 = *(_QWORD *)(v48 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v49, v17 + 8, (uint64_t)v95);
      }
      else
      {
        LOBYTE(v88) = 0;
        v89 = 0;
      }
      v50 = v79[0];
      v51 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v51
        && (v53 = WebCore::InspectorInstrumentation::instrumentingAgents(v51, v52)) != 0
        && (v54 = *(WebCore::InspectorCanvasAgent **)(v53 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v54, (WebCore::CanvasRenderingContext *)(v17 + 8), v50, (uint64_t)&v90);
      }
      else
      {
        LOBYTE(v90) = 0;
        v91 = 0;
      }
      v55 = v78[0];
      v56 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v56
        && (v58 = WebCore::InspectorInstrumentation::instrumentingAgents(v56, v57)) != 0
        && (v59 = *(WebCore::InspectorCanvasAgent **)(v58 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v59, (WebCore::CanvasRenderingContext *)(v17 + 8), v55, (uint64_t)&v92);
      }
      else
      {
        LOBYTE(v92) = 0;
        v93 = 0;
      }
      v82[0] = v84;
      v82[1] = 5;
      v60 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v60)
      {
        v62 = WebCore::InspectorInstrumentation::instrumentingAgents(v60, v61);
        if (v62)
        {
          v63 = *(_QWORD *)(v62 + 96);
          if (v63)
            WebCore::InspectorCanvasAgent::recordAction(v63, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)v80, v82);
        }
      }
      if (v93)
      {
        v64 = v92;
        v92 = 0;
        if (v64)
        {
          if (*v64 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v64;
        }
      }
      if (v91)
      {
        v65 = v90;
        v90 = 0;
        if (v65)
        {
          if (*v65 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v65;
        }
      }
      if (v89)
      {
        v66 = v88;
        v88 = 0;
        if (v66)
        {
          if (*v66 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v66;
        }
      }
      if (v87)
      {
        v67 = v86;
        v86 = 0;
        if (v67)
        {
          if (*v67 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v67;
        }
      }
      if (v85)
      {
        v68 = (_DWORD *)v84[0];
        v84[0] = 0;
        if (v68)
        {
          if (*v68 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v68;
        }
      }
      v69 = v80[0];
      v80[0] = 0;
      if (v69)
      {
        if (*(_DWORD *)v69 == 2)
          WTF::StringImpl::destroy(v69, v61);
        else
          *(_DWORD *)v69 -= 2;
      }
    }
    if (!v97)
    {
      LOBYTE(v80[0]) = 0;
      v81 = -1;
      v31 = v96;
      if (v96 == -1)
      {
        LOBYTE(v82[0]) = 0;
        v83 = -1;
      }
      else
      {
        v32 = v19;
        v33 = i;
        v34 = off_1E332F548[v96];
        ((void (*)(_QWORD *, WTF::StringImpl **, _BYTE *))v34)(v84, v80, v95);
        v81 = v31;
        LOBYTE(v82[0]) = 0;
        v83 = -1;
        ((void (*)(_QWORD *, _QWORD *, WTF::StringImpl **))v34)(v84, v82, v80);
        i = v33;
        v19 = v32;
        v83 = v31;
      }
      if (!*(_BYTE *)(v17 + 364))
      {
        WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<float,JSC::GenericTypedArrayView<JSC::Float32Adaptor>>((WTF::StringImpl *)v17, (uint64_t)"uniformMatrix4x3fv", 19, v19, i, (uint64_t)v82, 12, v79[0], (uint64_t)v84, v78[0]);
        if (v85)
          (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v17 + 88) + 1512))(*(_QWORD *)(v17 + 88), *(unsigned int *)(v19 + 16), i, v84[0], v84[1]);
        v31 = v83;
      }
      if (v31 != -1)
        ((void (*)(_QWORD *, _QWORD *))off_1E332F538[v31])(v84, v82);
      v83 = -1;
      if (v81 != -1)
        ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F538[v81])(v84, v80);
      v25 = 10;
      goto LABEL_56;
    }
LABEL_127:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_128:
    v70 = (_DWORD)v26 == 0;
LABEL_140:
    ;
  }
  v25 = 0;
LABEL_57:
  if (v29 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E332F558[v29])(v84, v95);
  return (_BYTE *)v25;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_vertexAttribI4i(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  JSC::VM *v14;
  unint64_t v15;
  unint64_t v16;
  JSC::VM *v17;
  int v18;
  unint64_t v19;
  JSC::VM *v20;
  int v21;
  unint64_t v22;
  JSC::VM *v23;
  int v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  _DWORD *v30;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  unint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  int v45;
  unint64_t v46;
  int v47;
  unint64_t v48;
  int v49;
  JSValue v50;
  unint64_t v51;
  int v52;
  unint64_t v53;
  int v54;
  int v55;
  unint64_t v56;
  int v57;
  int v58;
  int v59;
  unint64_t v60;
  int v61;
  int v62;
  int v63;
  int hasExceptionsAfterHandlingTraps;
  int v65;
  int v66;
  int v67;
  unsigned int v68;
  WebCore::InspectorInstrumentation *v69;
  WebCore::ScriptExecutionContext *v70;
  uint64_t v71;
  WebCore::InspectorCanvasAgent *v72;
  WebCore::InspectorInstrumentation *v73;
  WebCore::ScriptExecutionContext *v74;
  uint64_t v75;
  WebCore::InspectorCanvasAgent *v76;
  WebCore::InspectorInstrumentation *v77;
  WebCore::ScriptExecutionContext *v78;
  uint64_t v79;
  WebCore::InspectorCanvasAgent *v80;
  WebCore::InspectorInstrumentation *v81;
  WebCore::ScriptExecutionContext *v82;
  uint64_t v83;
  WebCore::InspectorCanvasAgent *v84;
  WebCore::InspectorInstrumentation *v85;
  WebCore::ScriptExecutionContext *v86;
  uint64_t v87;
  WebCore::InspectorCanvasAgent *v88;
  WebCore::InspectorInstrumentation *v89;
  WebCore::ScriptExecutionContext *v90;
  uint64_t v91;
  uint64_t v92;
  _DWORD *v93;
  _DWORD *v94;
  _DWORD *v95;
  _DWORD *v96;
  _DWORD *v97;
  WTF::StringImpl *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  JSC::VM *v102;
  unint64_t v103;
  int v104;
  unint64_t v105;
  JSC::JSGlobalObject *v106;
  unint64_t v107;
  int v108;
  int v109;
  unint64_t v110;
  unsigned int v111;
  JSC::VM *v112;
  _QWORD v113[2];
  WTF::StringImpl *v114;
  _DWORD v115[2];
  _QWORD v116[2];
  char v117;
  _DWORD *v118;
  char v119;
  _DWORD *v120;
  char v121;
  _DWORD *v122;
  char v123;
  _DWORD *v124;
  char v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v112 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v112, "WebGL2RenderingContext", "vertexAttribI4i");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v112, "WebGL2RenderingContext", "vertexAttribI4i");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 4)
  {
    v50.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v50);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v115);
    if (v115[1])
    {
      return 0;
    }
    else
    {
      v13 = *((_QWORD *)a2 + 7);
      v116[0] = v13;
      v14 = (JSC::VM *)*((_QWORD *)this + 7);
      if (v13 < 0xFFFE000000000000)
      {
        v32 = v13 - 0x2000000000000;
        if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
        {
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v116, this);
          v32 = v99;
        }
        v33 = (v32 >> 52) & 0x7FF;
        v34 = v33 - 1023;
        v35 = v32 >> (51 - (v32 >> 52));
        if (v33 > 0x433)
          LODWORD(v35) = v32 << ((v32 >> 52) - 51);
        if (v33 >= 0x41F)
          v36 = v35;
        else
          v36 = (((1 << ((v32 >> 52) + 1)) - 1) & v35) + (1 << ((v32 >> 52) + 1));
        if ((v32 & 0x8000000000000000) == 0)
          v37 = v36;
        else
          v37 = -v36;
        if (v34 <= 0x53)
          v15 = v37;
        else
          v15 = 0;
      }
      else
      {
        v15 = v13;
      }
      if (*((_DWORD *)v14 + 20) && (v51 = v15, v52 = JSC::VM::hasExceptionsAfterHandlingTraps(v14), v15 = v51, v52))
      {
        return 0;
      }
      else
      {
        v16 = *((_QWORD *)a2 + 8);
        v116[0] = v16;
        v17 = (JSC::VM *)*((_QWORD *)this + 7);
        if (v16 < 0xFFFE000000000000)
        {
          v38 = v16 - 0x2000000000000;
          if (v16 - 0x2000000000000 >= 0xFFFC000000000000)
          {
            v100 = v15;
            JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v116, this);
            v15 = v100;
            v38 = v101;
          }
          v39 = (v38 >> 52) & 0x7FF;
          if ((v39 - 1023) <= 0x53)
          {
            v44 = v38 >> (51 - (v38 >> 52));
            if (v39 > 0x433)
              LODWORD(v44) = v38 << ((v38 >> 52) - 51);
            if (v39 >= 0x41F)
              v45 = v44;
            else
              v45 = (((1 << ((v38 >> 52) + 1)) - 1) & v44) + (1 << ((v38 >> 52) + 1));
            if ((v38 & 0x8000000000000000) == 0)
              v18 = v45;
            else
              v18 = -v45;
          }
          else
          {
            v18 = 0;
          }
        }
        else
        {
          v18 = v16;
        }
        if (*((_DWORD *)v17 + 20)
          && (v53 = v15, v54 = v18, v55 = JSC::VM::hasExceptionsAfterHandlingTraps(v17), v18 = v54, v15 = v53, v55))
        {
          return 0;
        }
        else
        {
          v19 = *((_QWORD *)a2 + 9);
          v116[0] = v19;
          v20 = (JSC::VM *)*((_QWORD *)this + 7);
          if (v19 < 0xFFFE000000000000)
          {
            v40 = v19 - 0x2000000000000;
            if (v19 - 0x2000000000000 >= 0xFFFC000000000000)
            {
              v102 = (JSC::VM *)*((_QWORD *)this + 7);
              v103 = v15;
              v104 = v18;
              JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v116, this);
              v18 = v104;
              v15 = v103;
              v20 = v102;
              v40 = v105;
            }
            v41 = (v40 >> 52) & 0x7FF;
            if ((v41 - 1023) <= 0x53)
            {
              v46 = v40 >> (51 - (v40 >> 52));
              if (v41 > 0x433)
                LODWORD(v46) = v40 << ((v40 >> 52) - 51);
              if (v41 >= 0x41F)
                v47 = v46;
              else
                v47 = (((1 << ((v40 >> 52) + 1)) - 1) & v46) + (1 << ((v40 >> 52) + 1));
              if ((v40 & 0x8000000000000000) == 0)
                v21 = v47;
              else
                v21 = -v47;
            }
            else
            {
              v21 = 0;
            }
          }
          else
          {
            v21 = v19;
          }
          if (*((_DWORD *)v20 + 20)
            && (v56 = v15,
                v57 = v18,
                v58 = v21,
                v59 = JSC::VM::hasExceptionsAfterHandlingTraps(v20),
                v21 = v58,
                v18 = v57,
                v15 = v56,
                v59))
          {
            return 0;
          }
          else
          {
            v22 = *((_QWORD *)a2 + 10);
            v116[0] = v22;
            v23 = (JSC::VM *)*((_QWORD *)this + 7);
            if (v22 < 0xFFFE000000000000)
            {
              v42 = v22 - 0x2000000000000;
              if (v22 - 0x2000000000000 >= 0xFFFC000000000000)
              {
                v106 = this;
                v107 = v15;
                v108 = v18;
                v109 = v21;
                JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v116, v106);
                v21 = v109;
                v18 = v108;
                v15 = v107;
                v42 = v110;
              }
              v43 = (v42 >> 52) & 0x7FF;
              if ((v43 - 1023) <= 0x53)
              {
                v48 = v42 >> (51 - (v42 >> 52));
                if (v43 > 0x433)
                  LODWORD(v48) = v42 << ((v42 >> 52) - 51);
                if (v43 >= 0x41F)
                  v49 = v48;
                else
                  v49 = (((1 << ((v42 >> 52) + 1)) - 1) & v48) + (1 << ((v42 >> 52) + 1));
                if ((v42 & 0x8000000000000000) == 0)
                  v24 = v49;
                else
                  v24 = -v49;
              }
              else
              {
                v24 = 0;
              }
            }
            else
            {
              v24 = v22;
            }
            if (!*((_DWORD *)v23 + 20))
              goto LABEL_159;
            v60 = v15;
            v61 = v18;
            v62 = v21;
            v63 = v24;
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v23);
            v24 = v63;
            v21 = v62;
            v18 = v61;
            v15 = v60;
            if (hasExceptionsAfterHandlingTraps)
            {
              return 0;
            }
            else
            {
LABEL_159:
              if (*(_BYTE *)(v12 + 33))
              {
                v65 = v24;
                v66 = v21;
                v67 = v18;
                v111 = v15;
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v114 = (WTF::StringImpl *)v116[0];
                v68 = v115[0];
                v69 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                             + 144))(*(_QWORD *)(v12 + 40));
                if (v69
                  && (v71 = WebCore::InspectorInstrumentation::instrumentingAgents(v69, v70)) != 0
                  && (v72 = *(WebCore::InspectorCanvasAgent **)(v71 + 96)) != 0)
                {
                  WebCore::InspectorCanvasAgent::processArgument(v72, (WebCore::CanvasRenderingContext *)(v12 + 8), v68, (uint64_t)v116);
                }
                else
                {
                  LOBYTE(v116[0]) = 0;
                  v117 = 0;
                }
                v73 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                             + 144))(*(_QWORD *)(v12 + 40));
                if (v73
                  && (v75 = WebCore::InspectorInstrumentation::instrumentingAgents(v73, v74)) != 0
                  && (v76 = *(WebCore::InspectorCanvasAgent **)(v75 + 96)) != 0)
                {
                  WebCore::InspectorCanvasAgent::processArgument(v76, (WebCore::CanvasRenderingContext *)(v12 + 8), v111, (uint64_t)&v118);
                }
                else
                {
                  LOBYTE(v118) = 0;
                  v119 = 0;
                }
                v77 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                             + 144))(*(_QWORD *)(v12 + 40));
                if (v77
                  && (v79 = WebCore::InspectorInstrumentation::instrumentingAgents(v77, v78)) != 0
                  && (v80 = *(WebCore::InspectorCanvasAgent **)(v79 + 96)) != 0)
                {
                  WebCore::InspectorCanvasAgent::processArgument(v80, (WebCore::CanvasRenderingContext *)(v12 + 8), v67, (uint64_t)&v120);
                }
                else
                {
                  LOBYTE(v120) = 0;
                  v121 = 0;
                }
                v81 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                             + 144))(*(_QWORD *)(v12 + 40));
                if (v81
                  && (v83 = WebCore::InspectorInstrumentation::instrumentingAgents(v81, v82)) != 0
                  && (v84 = *(WebCore::InspectorCanvasAgent **)(v83 + 96)) != 0)
                {
                  WebCore::InspectorCanvasAgent::processArgument(v84, (WebCore::CanvasRenderingContext *)(v12 + 8), v66, (uint64_t)&v122);
                }
                else
                {
                  LOBYTE(v122) = 0;
                  v123 = 0;
                }
                v85 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                             + 144))(*(_QWORD *)(v12 + 40));
                if (v85
                  && (v87 = WebCore::InspectorInstrumentation::instrumentingAgents(v85, v86)) != 0
                  && (v88 = *(WebCore::InspectorCanvasAgent **)(v87 + 96)) != 0)
                {
                  WebCore::InspectorCanvasAgent::processArgument(v88, (WebCore::CanvasRenderingContext *)(v12 + 8), v65, (uint64_t)&v124);
                }
                else
                {
                  LOBYTE(v124) = 0;
                  v125 = 0;
                }
                v113[0] = v116;
                v113[1] = 5;
                v89 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                             + 144))(*(_QWORD *)(v12 + 40));
                if (v89)
                {
                  v91 = WebCore::InspectorInstrumentation::instrumentingAgents(v89, v90);
                  if (v91)
                  {
                    v92 = *(_QWORD *)(v91 + 96);
                    if (v92)
                      WebCore::InspectorCanvasAgent::recordAction(v92, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v114, v113);
                  }
                }
                v15 = v111;
                v18 = v67;
                v21 = v66;
                v24 = v65;
                if (v125)
                {
                  v93 = v124;
                  v124 = 0;
                  if (v93)
                  {
                    if (*v93 == 1)
                    {
                      WTF::JSONImpl::Value::operator delete();
                      v24 = v65;
                      v21 = v66;
                      v18 = v67;
                      v15 = v111;
                    }
                    else
                    {
                      --*v93;
                    }
                  }
                }
                if (v123)
                {
                  v94 = v122;
                  v122 = 0;
                  if (v94)
                  {
                    if (*v94 == 1)
                    {
                      WTF::JSONImpl::Value::operator delete();
                      v24 = v65;
                      v21 = v66;
                      v18 = v67;
                      v15 = v111;
                    }
                    else
                    {
                      --*v94;
                    }
                  }
                }
                if (v121)
                {
                  v95 = v120;
                  v120 = 0;
                  if (v95)
                  {
                    if (*v95 == 1)
                    {
                      WTF::JSONImpl::Value::operator delete();
                      v24 = v65;
                      v21 = v66;
                      v18 = v67;
                      v15 = v111;
                    }
                    else
                    {
                      --*v95;
                    }
                  }
                }
                if (v119)
                {
                  v96 = v118;
                  v118 = 0;
                  if (v96)
                  {
                    if (*v96 == 1)
                    {
                      WTF::JSONImpl::Value::operator delete();
                      v24 = v65;
                      v21 = v66;
                      v18 = v67;
                      v15 = v111;
                    }
                    else
                    {
                      --*v96;
                    }
                  }
                }
                if (v117)
                {
                  v97 = (_DWORD *)v116[0];
                  v116[0] = 0;
                  if (v97)
                  {
                    if (*v97 == 1)
                    {
                      WTF::JSONImpl::Value::operator delete();
                      v24 = v65;
                      v21 = v66;
                      v18 = v67;
                      v15 = v111;
                    }
                    else
                    {
                      --*v97;
                    }
                  }
                }
                v98 = v114;
                v114 = 0;
                if (v98)
                {
                  if (*(_DWORD *)v98 == 2)
                  {
                    WTF::StringImpl::destroy(v98, v90);
                    v24 = v65;
                    v21 = v66;
                    v18 = v67;
                    v15 = v111;
                  }
                  else
                  {
                    *(_DWORD *)v98 -= 2;
                  }
                }
              }
              if (!*(_BYTE *)(v12 + 364))
              {
                v25 = v115[0];
                v26 = v15;
                v27 = v18;
                v28 = v21;
                v29 = v24;
                (*(void (**)(_QWORD, _QWORD, unint64_t))(**(_QWORD **)(v12 + 88) + 1520))(*(_QWORD *)(v12 + 88), v115[0], v15);
                if (*(_DWORD *)(v12 + 164) > v25)
                {
                  v30 = (_DWORD *)(*(_QWORD *)(v12 + 152) + 20 * v25);
                  *v30 = 5124;
                  v30[1] = v26;
                  if (*(_DWORD *)(v12 + 164) <= v25)
                    goto LABEL_154;
                  *(_DWORD *)(*(_QWORD *)(v12 + 152) + 20 * v25 + 8) = v27;
                  if (*(_DWORD *)(v12 + 164) <= v25)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195086D84);
                  }
                  *(_DWORD *)(*(_QWORD *)(v12 + 152) + 20 * v25 + 12) = v28;
                  if (*(_DWORD *)(v12 + 164) <= v25)
                  {
LABEL_154:
                    __break(0xC471u);
                    JUMPOUT(0x195086D7CLL);
                  }
                  *(_DWORD *)(*(_QWORD *)(v12 + 152) + 20 * v25 + 16) = v29;
                }
              }
              return 10;
            }
          }
        }
      }
    }
  }
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_vertexAttribI4iv(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t (*v16)();
  uint64_t v17;
  JSValue v20;
  WebCore::InspectorInstrumentation *v21;
  WebCore::ScriptExecutionContext *v22;
  uint64_t v23;
  WebCore::InspectorCanvasAgent *v24;
  WebCore::InspectorInstrumentation *v25;
  WebCore::ScriptExecutionContext *v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::InspectorInstrumentation *v29;
  WebCore::ScriptExecutionContext *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  JSC::VM *v36;
  WTF::StringImpl *v37;
  _DWORD v38[2];
  _QWORD v39[2];
  int v40;
  _QWORD v41[2];
  int v42;
  _DWORD *v43;
  char v44;
  char v45[8];
  _BYTE v46[16];
  int v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v36 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "vertexAttribI4iv");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "vertexAttribI4iv");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v20);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v38);
  if (v38[1])
    return 0;
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLInt32Array>,WebCore::IDLSequence<WebCore::IDLLong>>>::convert(this, *((JSC::JSGlobalObject **)a2 + 7), (uint64_t)v45);
  v13 = v48;
  if (v48)
  {
    v17 = 0;
  }
  else
  {
    if (*(_BYTE *)(v12 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v14 = v38[0];
      v21 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v21
        && (v23 = WebCore::InspectorInstrumentation::instrumentingAgents(v21, v22)) != 0
        && (v24 = *(WebCore::InspectorCanvasAgent **)(v23 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v24, (WebCore::CanvasRenderingContext *)(v12 + 8), v14, (uint64_t)v41);
      }
      else
      {
        LOBYTE(v41[0]) = 0;
        LOBYTE(v42) = 0;
      }
      if (v48)
        goto LABEL_60;
      v25 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v25
        && (v27 = WebCore::InspectorInstrumentation::instrumentingAgents(v25, v26)) != 0
        && (v28 = *(_QWORD *)(v27 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v28, v12 + 8, (uint64_t)v46);
      }
      else
      {
        LOBYTE(v43) = 0;
        v44 = 0;
      }
      v39[0] = v41;
      v39[1] = 2;
      v29 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v29)
      {
        v31 = WebCore::InspectorInstrumentation::instrumentingAgents(v29, v30);
        if (v31)
        {
          v32 = *(_QWORD *)(v31 + 96);
          if (v32)
            WebCore::InspectorCanvasAgent::recordAction(v32, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v37, v39);
        }
      }
      if (v44)
      {
        v33 = v43;
        v43 = 0;
        if (v33)
        {
          if (*v33 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v33;
        }
      }
      if ((_BYTE)v42)
      {
        v34 = (_DWORD *)v41[0];
        v41[0] = 0;
        if (v34)
        {
          if (*v34 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v34;
        }
      }
      v35 = v37;
      v37 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          goto LABEL_61;
        *(_DWORD *)v35 -= 2;
      }
      while (v48)
      {
LABEL_60:
        v35 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_61:
        WTF::StringImpl::destroy(v35, v30);
      }
    }
    else
    {
      v14 = v38[0];
    }
    LOBYTE(v39[0]) = 0;
    v40 = -1;
    v15 = v47;
    if (v47 == -1)
    {
      LOBYTE(v41[0]) = 0;
      v42 = -1;
    }
    else
    {
      v16 = off_1E332F578[v47];
      ((void (*)(WTF::StringImpl **, _QWORD *, _BYTE *))v16)(&v37, v39, v46);
      v40 = v15;
      LOBYTE(v41[0]) = 0;
      v42 = -1;
      ((void (*)(WTF::StringImpl **, _QWORD *, _QWORD *))v16)(&v37, v41, v39);
      v42 = v15;
    }
    WebCore::WebGL2RenderingContext::vertexAttribI4iv((WTF::StringImpl *)v12, v14, (uint64_t)v41);
    if (v42 != -1)
      ((void (*)(WTF::StringImpl **, _QWORD *))off_1E332F568[v42])(&v37, v41);
    v42 = -1;
    if (v40 != -1)
      ((void (*)(WTF::StringImpl **, _QWORD *))off_1E332F568[v40])(&v37, v39);
    v13 = v48;
    v17 = 10;
  }
  if (v13 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E332F598[v13])(v41, v46);
  return (_BYTE *)v17;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_vertexAttribI4ui(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unsigned int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  _DWORD *v19;
  JSValue v20;
  unsigned int v21;
  WebCore::InspectorInstrumentation *v22;
  WebCore::ScriptExecutionContext *v23;
  uint64_t v24;
  WebCore::InspectorCanvasAgent *v25;
  unsigned int v26;
  WebCore::InspectorInstrumentation *v27;
  WebCore::ScriptExecutionContext *v28;
  uint64_t v29;
  WebCore::InspectorCanvasAgent *v30;
  unsigned int v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  WebCore::InspectorCanvasAgent *v35;
  unsigned int v36;
  WebCore::InspectorInstrumentation *v37;
  WebCore::ScriptExecutionContext *v38;
  uint64_t v39;
  WebCore::InspectorCanvasAgent *v40;
  unsigned int v41;
  WebCore::InspectorInstrumentation *v42;
  WebCore::ScriptExecutionContext *v43;
  uint64_t v44;
  WebCore::InspectorCanvasAgent *v45;
  WebCore::InspectorInstrumentation *v46;
  WebCore::ScriptExecutionContext *v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  _DWORD *v51;
  _DWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  WTF::StringImpl *v55;
  JSC::VM *v56;
  _QWORD v57[2];
  WTF::StringImpl *v58;
  _DWORD v59[2];
  _DWORD v60[2];
  _DWORD v61[2];
  _DWORD v62[2];
  _DWORD v63[2];
  _QWORD v64[2];
  char v65;
  _DWORD *v66;
  char v67;
  _DWORD *v68;
  char v69;
  _DWORD *v70;
  char v71;
  _DWORD *v72;
  char v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v56 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v56, "WebGL2RenderingContext", "vertexAttribI4ui");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v56, "WebGL2RenderingContext", "vertexAttribI4ui");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 4)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v20);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v63);
    if (v63[1])
    {
      return 0;
    }
    else
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v62);
      if (v62[1])
      {
        return 0;
      }
      else
      {
        WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v61);
        if (v61[1])
        {
          return 0;
        }
        else
        {
          WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 9), v60);
          if (v60[1])
          {
            return 0;
          }
          else
          {
            WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 10), v59);
            if (v59[1])
            {
              return 0;
            }
            else
            {
              if (*(_BYTE *)(v12 + 33))
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v58 = (WTF::StringImpl *)v64[0];
                v21 = v63[0];
                v22 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                             + 144))(*(_QWORD *)(v12 + 40));
                if (v22
                  && (v24 = WebCore::InspectorInstrumentation::instrumentingAgents(v22, v23)) != 0
                  && (v25 = *(WebCore::InspectorCanvasAgent **)(v24 + 96)) != 0)
                {
                  WebCore::InspectorCanvasAgent::processArgument(v25, (WebCore::CanvasRenderingContext *)(v12 + 8), v21, (uint64_t)v64);
                }
                else
                {
                  LOBYTE(v64[0]) = 0;
                  v65 = 0;
                }
                v26 = v62[0];
                v27 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                             + 144))(*(_QWORD *)(v12 + 40));
                if (v27
                  && (v29 = WebCore::InspectorInstrumentation::instrumentingAgents(v27, v28)) != 0
                  && (v30 = *(WebCore::InspectorCanvasAgent **)(v29 + 96)) != 0)
                {
                  WebCore::InspectorCanvasAgent::processArgument(v30, (WebCore::CanvasRenderingContext *)(v12 + 8), v26, (uint64_t)&v66);
                }
                else
                {
                  LOBYTE(v66) = 0;
                  v67 = 0;
                }
                v31 = v61[0];
                v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                             + 144))(*(_QWORD *)(v12 + 40));
                if (v32
                  && (v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33)) != 0
                  && (v35 = *(WebCore::InspectorCanvasAgent **)(v34 + 96)) != 0)
                {
                  WebCore::InspectorCanvasAgent::processArgument(v35, (WebCore::CanvasRenderingContext *)(v12 + 8), v31, (uint64_t)&v68);
                }
                else
                {
                  LOBYTE(v68) = 0;
                  v69 = 0;
                }
                v36 = v60[0];
                v37 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                             + 144))(*(_QWORD *)(v12 + 40));
                if (v37
                  && (v39 = WebCore::InspectorInstrumentation::instrumentingAgents(v37, v38)) != 0
                  && (v40 = *(WebCore::InspectorCanvasAgent **)(v39 + 96)) != 0)
                {
                  WebCore::InspectorCanvasAgent::processArgument(v40, (WebCore::CanvasRenderingContext *)(v12 + 8), v36, (uint64_t)&v70);
                }
                else
                {
                  LOBYTE(v70) = 0;
                  v71 = 0;
                }
                v41 = v59[0];
                v42 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                             + 144))(*(_QWORD *)(v12 + 40));
                if (v42
                  && (v44 = WebCore::InspectorInstrumentation::instrumentingAgents(v42, v43)) != 0
                  && (v45 = *(WebCore::InspectorCanvasAgent **)(v44 + 96)) != 0)
                {
                  WebCore::InspectorCanvasAgent::processArgument(v45, (WebCore::CanvasRenderingContext *)(v12 + 8), v41, (uint64_t)&v72);
                }
                else
                {
                  LOBYTE(v72) = 0;
                  v73 = 0;
                }
                v57[0] = v64;
                v57[1] = 5;
                v46 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                             + 144))(*(_QWORD *)(v12 + 40));
                if (v46)
                {
                  v48 = WebCore::InspectorInstrumentation::instrumentingAgents(v46, v47);
                  if (v48)
                  {
                    v49 = *(_QWORD *)(v48 + 96);
                    if (v49)
                      WebCore::InspectorCanvasAgent::recordAction(v49, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v58, v57);
                  }
                }
                if (v73)
                {
                  v50 = v72;
                  v72 = 0;
                  if (v50)
                  {
                    if (*v50 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*v50;
                  }
                }
                if (v71)
                {
                  v51 = v70;
                  v70 = 0;
                  if (v51)
                  {
                    if (*v51 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*v51;
                  }
                }
                if (v69)
                {
                  v52 = v68;
                  v68 = 0;
                  if (v52)
                  {
                    if (*v52 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*v52;
                  }
                }
                if (v67)
                {
                  v53 = v66;
                  v66 = 0;
                  if (v53)
                  {
                    if (*v53 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*v53;
                  }
                }
                if (v65)
                {
                  v54 = (_DWORD *)v64[0];
                  v64[0] = 0;
                  if (v54)
                  {
                    if (*v54 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*v54;
                  }
                }
                v55 = v58;
                v58 = 0;
                if (v55)
                {
                  if (*(_DWORD *)v55 == 2)
                    WTF::StringImpl::destroy(v55, v47);
                  else
                    *(_DWORD *)v55 -= 2;
                }
              }
              if (*(_BYTE *)(v12 + 364))
              {
                return 10;
              }
              else
              {
                v14 = v63[0];
                v15 = v62[0];
                v16 = v61[0];
                v17 = v60[0];
                v18 = v59[0];
                (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v12 + 88) + 1536))(*(_QWORD *)(v12 + 88), v63[0], v62[0], v61[0], v60[0], v59[0]);
                if (*(_DWORD *)(v12 + 164) > v14)
                {
                  v19 = (_DWORD *)(*(_QWORD *)(v12 + 152) + 20 * v14);
                  *v19 = 5125;
                  v19[1] = v15;
                  if (*(_DWORD *)(v12 + 164) <= v14)
                    goto LABEL_94;
                  *(_DWORD *)(*(_QWORD *)(v12 + 152) + 20 * v14 + 8) = v16;
                  if (*(_DWORD *)(v12 + 164) <= v14)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x195087740);
                  }
                  *(_DWORD *)(*(_QWORD *)(v12 + 152) + 20 * v14 + 12) = v17;
                  if (*(_DWORD *)(v12 + 164) <= v14)
                  {
LABEL_94:
                    __break(0xC471u);
                    JUMPOUT(0x195087738);
                  }
                  *(_DWORD *)(*(_QWORD *)(v12 + 152) + 20 * v14 + 16) = v18;
                }
                return 10;
              }
            }
          }
        }
      }
    }
  }
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_vertexAttribI4uiv(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t (*v16)();
  uint64_t v17;
  JSValue v20;
  WebCore::InspectorInstrumentation *v21;
  WebCore::ScriptExecutionContext *v22;
  uint64_t v23;
  WebCore::InspectorCanvasAgent *v24;
  WebCore::InspectorInstrumentation *v25;
  WebCore::ScriptExecutionContext *v26;
  uint64_t v27;
  uint64_t v28;
  WebCore::InspectorInstrumentation *v29;
  WebCore::ScriptExecutionContext *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  JSC::VM *v36;
  WTF::StringImpl *v37;
  _DWORD v38[2];
  _QWORD v39[2];
  int v40;
  _QWORD v41[2];
  int v42;
  _DWORD *v43;
  char v44;
  int v45;
  _BYTE v46[16];
  int v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v36 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "vertexAttribI4uiv");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "vertexAttribI4uiv");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v20);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v38);
  if (v38[1])
    return 0;
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLUint32Array>,WebCore::IDLSequence<WebCore::IDLUnsignedLong>>>::convert(&v45, this, *((_QWORD *)a2 + 7));
  v13 = v48;
  if (v48)
  {
    v17 = 0;
  }
  else
  {
    if (*(_BYTE *)(v12 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v14 = v38[0];
      v21 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v21
        && (v23 = WebCore::InspectorInstrumentation::instrumentingAgents(v21, v22)) != 0
        && (v24 = *(WebCore::InspectorCanvasAgent **)(v23 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v24, (WebCore::CanvasRenderingContext *)(v12 + 8), v14, (uint64_t)v41);
      }
      else
      {
        LOBYTE(v41[0]) = 0;
        LOBYTE(v42) = 0;
      }
      if (v48)
        goto LABEL_60;
      v25 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v25
        && (v27 = WebCore::InspectorInstrumentation::instrumentingAgents(v25, v26)) != 0
        && (v28 = *(_QWORD *)(v27 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v28, v12 + 8, (uint64_t)v46);
      }
      else
      {
        LOBYTE(v43) = 0;
        v44 = 0;
      }
      v39[0] = v41;
      v39[1] = 2;
      v29 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
      if (v29)
      {
        v31 = WebCore::InspectorInstrumentation::instrumentingAgents(v29, v30);
        if (v31)
        {
          v32 = *(_QWORD *)(v31 + 96);
          if (v32)
            WebCore::InspectorCanvasAgent::recordAction(v32, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v37, v39);
        }
      }
      if (v44)
      {
        v33 = v43;
        v43 = 0;
        if (v33)
        {
          if (*v33 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v33;
        }
      }
      if ((_BYTE)v42)
      {
        v34 = (_DWORD *)v41[0];
        v41[0] = 0;
        if (v34)
        {
          if (*v34 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v34;
        }
      }
      v35 = v37;
      v37 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          goto LABEL_61;
        *(_DWORD *)v35 -= 2;
      }
      while (v48)
      {
LABEL_60:
        v35 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_61:
        WTF::StringImpl::destroy(v35, v30);
      }
    }
    else
    {
      v14 = v38[0];
    }
    LOBYTE(v39[0]) = 0;
    v40 = -1;
    v15 = v47;
    if (v47 == -1)
    {
      LOBYTE(v41[0]) = 0;
      v42 = -1;
    }
    else
    {
      v16 = off_1E332F518[v47];
      ((void (*)(WTF::StringImpl **, _QWORD *, _BYTE *))v16)(&v37, v39, v46);
      v40 = v15;
      LOBYTE(v41[0]) = 0;
      v42 = -1;
      ((void (*)(WTF::StringImpl **, _QWORD *, _QWORD *))v16)(&v37, v41, v39);
      v42 = v15;
    }
    WebCore::WebGL2RenderingContext::vertexAttribI4uiv((WTF::StringImpl *)v12, v14, (uint64_t)v41);
    if (v42 != -1)
      ((void (*)(WTF::StringImpl **, _QWORD *))off_1E332F508[v42])(&v37, v41);
    v42 = -1;
    if (v40 != -1)
      ((void (*)(WTF::StringImpl **, _QWORD *))off_1E332F508[v40])(&v37, v39);
    v13 = v48;
    v17 = 10;
  }
  if (v13 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_1E332F528[v13])(v41, v46);
  return (_BYTE *)v17;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_vertexAttribIPointer(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  JSC::VM *v14;
  uint64_t v15;
  unint64_t v16;
  JSC::VM *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  JSC::VM *v21;
  double v22;
  double v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v33;
  unsigned int v34;
  JSValue v35;
  unsigned int v36;
  WebCore::InspectorInstrumentation *v37;
  WebCore::ScriptExecutionContext *v38;
  uint64_t v39;
  WebCore::InspectorCanvasAgent *v40;
  WebCore::InspectorInstrumentation *v41;
  WebCore::ScriptExecutionContext *v42;
  uint64_t v43;
  WebCore::InspectorCanvasAgent *v44;
  unsigned int v45;
  WebCore::InspectorInstrumentation *v46;
  WebCore::ScriptExecutionContext *v47;
  uint64_t v48;
  WebCore::InspectorCanvasAgent *v49;
  WebCore::InspectorInstrumentation *v50;
  WebCore::ScriptExecutionContext *v51;
  uint64_t v52;
  WebCore::InspectorCanvasAgent *v53;
  WebCore::InspectorInstrumentation *v54;
  WebCore::ScriptExecutionContext *v55;
  uint64_t v56;
  WebCore::InspectorCanvasAgent *v57;
  WebCore::InspectorInstrumentation *v58;
  WebCore::ScriptExecutionContext *v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  _DWORD *v63;
  _DWORD *v64;
  _DWORD *v65;
  _DWORD *v66;
  WTF::StringImpl *v67;
  double v68;
  unint64_t v69;
  JSC::VM *v70;
  unint64_t v71;
  WebCore::CanvasRenderingContext *v72;
  JSC::VM *v73;
  _QWORD v74[2];
  WTF::StringImpl *v75;
  unsigned int v76[2];
  unsigned int v77[2];
  _QWORD v78[2];
  char v79;
  _DWORD *v80;
  char v81;
  _DWORD *v82;
  char v83;
  _DWORD *v84;
  char v85;
  _DWORD *v86;
  char v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v73 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v73, "WebGL2RenderingContext", "vertexAttribIPointer");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v73, "WebGL2RenderingContext", "vertexAttribIPointer");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 4)
  {
    v35.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v35);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v77);
  if (v77[1])
    return 0;
  v13 = *((_QWORD *)a2 + 7);
  v78[0] = v13;
  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v13 < 0xFFFE000000000000)
  {
    v24 = v13 - 0x2000000000000;
    if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v78, this);
      v24 = v69;
    }
    v25 = (v24 >> 52) & 0x7FF;
    v26 = v25 - 1023;
    v27 = v24 >> (51 - (v24 >> 52));
    if (v25 > 0x433)
      LODWORD(v27) = v24 << ((v24 >> 52) - 51);
    if (v25 >= 0x41F)
      v28 = v27;
    else
      v28 = (((1 << ((v24 >> 52) + 1)) - 1) & v27) + (1 << ((v24 >> 52) + 1));
    if ((v24 & 0x8000000000000000) == 0)
      v29 = v28;
    else
      v29 = -v28;
    if (v26 <= 0x53)
      v15 = v29;
    else
      v15 = 0;
  }
  else
  {
    v15 = v13;
  }
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v76);
  if (v76[1])
    return 0;
  v16 = *((_QWORD *)a2 + 9);
  v78[0] = v16;
  v17 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v16 < 0xFFFE000000000000)
  {
    v30 = v16 - 0x2000000000000;
    if (v16 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      v70 = (JSC::VM *)*((_QWORD *)this + 7);
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v78, this);
      v17 = v70;
      v30 = v71;
    }
    v31 = (v30 >> 52) & 0x7FF;
    if ((v31 - 1023) <= 0x53)
    {
      v33 = v30 >> (51 - (v30 >> 52));
      if (v31 > 0x433)
        LODWORD(v33) = v30 << ((v30 >> 52) - 51);
      if (v31 >= 0x41F)
        v34 = v33;
      else
        v34 = (((1 << ((v30 >> 52) + 1)) - 1) & v33) + (1 << ((v30 >> 52) + 1));
      if ((v30 & 0x8000000000000000) == 0)
        v18 = v34;
      else
        v18 = -v34;
    }
    else
    {
      v18 = 0;
    }
  }
  else
  {
    v18 = v16;
  }
  if (*((_DWORD *)v17 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v17))
    return 0;
  v19 = *((_QWORD *)a2 + 10);
  v78[0] = v19;
  if (v19 < 0xFFFE000000000000)
  {
    v21 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v19 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v78, this);
      v22 = v68;
    }
    else
    {
      *(_QWORD *)&v22 = v19 - 0x2000000000000;
    }
    if (*((_DWORD *)v21 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
      return 0;
    if (fabs(v22) == INFINITY)
    {
      v20 = 0;
    }
    else
    {
      v23 = fmod(trunc(v22), 1.84467441e19);
      if (v23 >= 0.0)
        v20 = (unint64_t)v23;
      else
        v20 = -(uint64_t)(unint64_t)-v23;
    }
  }
  else
  {
    v20 = (int)v19;
  }
  if (*(_BYTE *)(v12 + 33))
  {
    v72 = (WebCore::CanvasRenderingContext *)(v12 + 8);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v75 = (WTF::StringImpl *)v78[0];
    v36 = v77[0];
    v37 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v37
      && (v39 = WebCore::InspectorInstrumentation::instrumentingAgents(v37, v38)) != 0
      && (v40 = *(WebCore::InspectorCanvasAgent **)(v39 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v40, v72, v36, (uint64_t)v78);
    }
    else
    {
      LOBYTE(v78[0]) = 0;
      v79 = 0;
    }
    v41 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v41
      && (v43 = WebCore::InspectorInstrumentation::instrumentingAgents(v41, v42)) != 0
      && (v44 = *(WebCore::InspectorCanvasAgent **)(v43 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v44, v72, v15, (uint64_t)&v80);
    }
    else
    {
      LOBYTE(v80) = 0;
      v81 = 0;
    }
    v45 = v76[0];
    v46 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v46
      && (v48 = WebCore::InspectorInstrumentation::instrumentingAgents(v46, v47)) != 0
      && (v49 = *(WebCore::InspectorCanvasAgent **)(v48 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v49, v72, v45, (uint64_t)&v82);
    }
    else
    {
      LOBYTE(v82) = 0;
      v83 = 0;
    }
    v50 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v50
      && (v52 = WebCore::InspectorInstrumentation::instrumentingAgents(v50, v51)) != 0
      && (v53 = *(WebCore::InspectorCanvasAgent **)(v52 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v53, v72, v18, (uint64_t)&v84);
    }
    else
    {
      LOBYTE(v84) = 0;
      v85 = 0;
    }
    v54 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v54
      && (v56 = WebCore::InspectorInstrumentation::instrumentingAgents(v54, v55)) != 0
      && (v57 = *(WebCore::InspectorCanvasAgent **)(v56 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v57, v72, v20, (uint64_t)&v86);
    }
    else
    {
      LOBYTE(v86) = 0;
      v87 = 0;
    }
    v74[0] = v78;
    v74[1] = 5;
    v58 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v58)
    {
      v60 = WebCore::InspectorInstrumentation::instrumentingAgents(v58, v59);
      if (v60)
      {
        v61 = *(_QWORD *)(v60 + 96);
        if (v61)
          WebCore::InspectorCanvasAgent::recordAction(v61, v72, (const WTF::StringImpl *)&v75, v74);
      }
    }
    if (v87)
    {
      v62 = v86;
      v86 = 0;
      if (v62)
      {
        if (*v62 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v62;
      }
    }
    if (v85)
    {
      v63 = v84;
      v84 = 0;
      if (v63)
      {
        if (*v63 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v63;
      }
    }
    if (v83)
    {
      v64 = v82;
      v82 = 0;
      if (v64)
      {
        if (*v64 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v64;
      }
    }
    if (v81)
    {
      v65 = v80;
      v80 = 0;
      if (v65)
      {
        if (*v65 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v65;
      }
    }
    if (v79)
    {
      v66 = (_DWORD *)v78[0];
      v78[0] = 0;
      if (v66)
      {
        if (*v66 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v66;
      }
    }
    v67 = v75;
    v75 = 0;
    if (v67)
    {
      if (*(_DWORD *)v67 == 2)
        WTF::StringImpl::destroy(v67, v59);
      else
        *(_DWORD *)v67 -= 2;
    }
  }
  WebCore::WebGL2RenderingContext::vertexAttribIPointer((WebCore::WebGL2RenderingContext *)v12, v77[0], v15, v76[0], v18, v20);
  return 10;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_vertexAttribDivisor(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSValue v17;
  WebCore::InspectorInstrumentation *v18;
  WebCore::ScriptExecutionContext *v19;
  uint64_t v20;
  WebCore::InspectorCanvasAgent *v21;
  WebCore::InspectorInstrumentation *v22;
  WebCore::ScriptExecutionContext *v23;
  uint64_t v24;
  WebCore::InspectorCanvasAgent *v25;
  WebCore::InspectorInstrumentation *v26;
  WebCore::ScriptExecutionContext *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  JSC::VM *v32;
  _QWORD v33[2];
  WTF::StringImpl *v34;
  _DWORD v35[2];
  _DWORD v36[2];
  _QWORD v37[2];
  char v38;
  _DWORD *v39;
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v32 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v32, "WebGL2RenderingContext", "vertexAttribDivisor");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v32, "WebGL2RenderingContext", "vertexAttribDivisor");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v17.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v17);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v36);
    if (v36[1])
    {
      return 0;
    }
    else
    {
      result = WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v35);
      if (v35[1])
      {
        return 0;
      }
      else
      {
        if (*(_BYTE *)(v12 + 33))
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v14 = v36[0];
          v18 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
          if (v18
            && (v20 = WebCore::InspectorInstrumentation::instrumentingAgents(v18, v19)) != 0
            && (v21 = *(WebCore::InspectorCanvasAgent **)(v20 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v21, (WebCore::CanvasRenderingContext *)(v12 + 8), v14, (uint64_t)v37);
          }
          else
          {
            LOBYTE(v37[0]) = 0;
            v38 = 0;
          }
          v15 = v35[0];
          v22 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
          if (v22
            && (v24 = WebCore::InspectorInstrumentation::instrumentingAgents(v22, v23)) != 0
            && (v25 = *(WebCore::InspectorCanvasAgent **)(v24 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v25, (WebCore::CanvasRenderingContext *)(v12 + 8), v15, (uint64_t)&v39);
          }
          else
          {
            LOBYTE(v39) = 0;
            v40 = 0;
          }
          v33[0] = v37;
          v33[1] = 2;
          v26 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
          if (v26)
          {
            v28 = WebCore::InspectorInstrumentation::instrumentingAgents(v26, v27);
            if (v28)
            {
              v29 = *(_QWORD *)(v28 + 96);
              if (v29)
                WebCore::InspectorCanvasAgent::recordAction(v29, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v34, v33);
            }
          }
          if (v40)
          {
            v30 = v39;
            v39 = 0;
            if (v30)
            {
              if (*v30 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v30;
            }
          }
          if (v38)
          {
            v31 = (_DWORD *)v37[0];
            v37[0] = 0;
            if (v31)
            {
              if (*v31 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v31;
            }
          }
          result = (uint64_t)v34;
          v34 = 0;
          if (result)
          {
            if (*(_DWORD *)result == 2)
              result = WTF::StringImpl::destroy((WTF::StringImpl *)result, v27);
            else
              *(_DWORD *)result -= 2;
          }
        }
        else
        {
          v14 = v36[0];
          v15 = v35[0];
        }
        if (*(_BYTE *)(v12 + 364))
          return 10;
        if (*(_DWORD *)(v12 + 164) <= v14)
        {
          WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v12, 1281, (uint64_t)"vertexAttribDivisor", 20, (uint64_t)"index out of range", 19);
          return 10;
        }
        v16 = *(_QWORD *)(v12 + 144);
        if (*(_DWORD *)(v16 + 68) > v14)
        {
          *(_DWORD *)(*(_QWORD *)(v16 + 56) + 56 * v14 + 48) = v15;
          (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v12 + 88) + 1200))(*(_QWORD *)(v12 + 88), v14, v15);
          return 10;
        }
        __break(0xC471u);
      }
    }
  }
  return result;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_drawArraysInstanced(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  unint64_t v17;
  JSC::VM *v18;
  uint64_t v19;
  unint64_t v20;
  JSC::VM *v21;
  uint64_t v22;
  unint64_t v23;
  JSC::VM *v24;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  unint64_t v39;
  unsigned int v40;
  JSValue v41;
  unsigned int v42;
  WebCore::InspectorInstrumentation *v43;
  WebCore::ScriptExecutionContext *v44;
  uint64_t v45;
  WebCore::InspectorCanvasAgent *v46;
  WebCore::InspectorInstrumentation *v47;
  WebCore::ScriptExecutionContext *v48;
  uint64_t v49;
  WebCore::InspectorCanvasAgent *v50;
  WebCore::InspectorInstrumentation *v51;
  WebCore::ScriptExecutionContext *v52;
  uint64_t v53;
  WebCore::InspectorCanvasAgent *v54;
  WebCore::InspectorInstrumentation *v55;
  WebCore::ScriptExecutionContext *v56;
  uint64_t v57;
  WebCore::InspectorCanvasAgent *v58;
  WebCore::InspectorInstrumentation *v59;
  WebCore::ScriptExecutionContext *v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD *v63;
  _DWORD *v64;
  _DWORD *v65;
  _DWORD *v66;
  WTF::StringImpl *v67;
  JSC::VM *v68;
  JSC::VM *v69;
  _QWORD v70[2];
  WTF::StringImpl *v71;
  unsigned int v72[2];
  _QWORD v73[2];
  char v74;
  _DWORD *v75;
  char v76;
  _DWORD *v77;
  char v78;
  _DWORD *v79;
  char v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v69 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v69, "WebGL2RenderingContext", "drawArraysInstanced");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v69, "WebGL2RenderingContext", "drawArraysInstanced");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 3)
  {
    v41.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v41);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v72);
    if (v72[1])
    {
      return 0;
    }
    else
    {
      v17 = *((_QWORD *)a2 + 7);
      v73[0] = v17;
      v18 = (JSC::VM *)*((_QWORD *)this + 7);
      if (v17 < 0xFFFE000000000000)
      {
        v27 = v17 - 0x2000000000000;
        if (v17 - 0x2000000000000 >= 0xFFFC000000000000)
        {
          JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v73, this);
          v27 = v13.n128_u64[0];
        }
        v28 = (v27 >> 52) & 0x7FF;
        v29 = v28 - 1023;
        v30 = v27 >> (51 - (v27 >> 52));
        if (v28 > 0x433)
          LODWORD(v30) = v27 << ((v27 >> 52) - 51);
        if (v28 >= 0x41F)
          v31 = v30;
        else
          v31 = (((1 << ((v27 >> 52) + 1)) - 1) & v30) + (1 << ((v27 >> 52) + 1));
        if ((v27 & 0x8000000000000000) == 0)
          v32 = v31;
        else
          v32 = -v31;
        if (v29 <= 0x53)
          v19 = v32;
        else
          v19 = 0;
      }
      else
      {
        v19 = v17;
      }
      if (*((_DWORD *)v18 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v18))
      {
        return 0;
      }
      else
      {
        v20 = *((_QWORD *)a2 + 8);
        v73[0] = v20;
        v21 = (JSC::VM *)*((_QWORD *)this + 7);
        if (v20 < 0xFFFE000000000000)
        {
          v33 = v20 - 0x2000000000000;
          if (v20 - 0x2000000000000 >= 0xFFFC000000000000)
          {
            v68 = (JSC::VM *)*((_QWORD *)this + 7);
            JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v73, this);
            v21 = v68;
            v33 = v13.n128_u64[0];
          }
          v34 = (v33 >> 52) & 0x7FF;
          if ((v34 - 1023) <= 0x53)
          {
            v37 = v33 >> (51 - (v33 >> 52));
            if (v34 > 0x433)
              LODWORD(v37) = v33 << ((v33 >> 52) - 51);
            if (v34 >= 0x41F)
              v38 = v37;
            else
              v38 = (((1 << ((v33 >> 52) + 1)) - 1) & v37) + (1 << ((v33 >> 52) + 1));
            if ((v33 & 0x8000000000000000) == 0)
              v22 = v38;
            else
              v22 = -v38;
          }
          else
          {
            v22 = 0;
          }
        }
        else
        {
          v22 = v20;
        }
        if (*((_DWORD *)v21 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v21))
        {
          return 0;
        }
        else
        {
          v23 = *((_QWORD *)a2 + 9);
          v73[0] = v23;
          v24 = (JSC::VM *)*((_QWORD *)this + 7);
          if (v23 < 0xFFFE000000000000)
          {
            v35 = v23 - 0x2000000000000;
            if (v23 - 0x2000000000000 >= 0xFFFC000000000000)
            {
              JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v73, this);
              v35 = v13.n128_u64[0];
            }
            v36 = (v35 >> 52) & 0x7FF;
            if ((v36 - 1023) <= 0x53)
            {
              v39 = v35 >> (51 - (v35 >> 52));
              if (v36 > 0x433)
                LODWORD(v39) = v35 << ((v35 >> 52) - 51);
              if (v36 >= 0x41F)
                v40 = v39;
              else
                v40 = (((1 << ((v35 >> 52) + 1)) - 1) & v39) + (1 << ((v35 >> 52) + 1));
              if ((v35 & 0x8000000000000000) == 0)
                v25 = v40;
              else
                v25 = -v40;
            }
            else
            {
              v25 = 0;
            }
          }
          else
          {
            v25 = v23;
          }
          if (*((_DWORD *)v24 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v24))
          {
            return 0;
          }
          else
          {
            if (*(_BYTE *)(v12 + 33))
            {
              WTF::StringImpl::createWithoutCopyingNonEmpty();
              v71 = (WTF::StringImpl *)v73[0];
              v42 = v72[0];
              v43 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v43
                && (v45 = WebCore::InspectorInstrumentation::instrumentingAgents(v43, v44)) != 0
                && (v46 = *(WebCore::InspectorCanvasAgent **)(v45 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v46, (WebCore::CanvasRenderingContext *)(v12 + 8), v42, (uint64_t)v73);
              }
              else
              {
                LOBYTE(v73[0]) = 0;
                v74 = 0;
              }
              v47 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v47
                && (v49 = WebCore::InspectorInstrumentation::instrumentingAgents(v47, v48)) != 0
                && (v50 = *(WebCore::InspectorCanvasAgent **)(v49 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v50, (WebCore::CanvasRenderingContext *)(v12 + 8), v19, (uint64_t)&v75);
              }
              else
              {
                LOBYTE(v75) = 0;
                v76 = 0;
              }
              v51 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v51
                && (v53 = WebCore::InspectorInstrumentation::instrumentingAgents(v51, v52)) != 0
                && (v54 = *(WebCore::InspectorCanvasAgent **)(v53 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v54, (WebCore::CanvasRenderingContext *)(v12 + 8), v22, (uint64_t)&v77);
              }
              else
              {
                LOBYTE(v77) = 0;
                v78 = 0;
              }
              v55 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v55
                && (v57 = WebCore::InspectorInstrumentation::instrumentingAgents(v55, v56)) != 0
                && (v58 = *(WebCore::InspectorCanvasAgent **)(v57 + 96)) != 0)
              {
                WebCore::InspectorCanvasAgent::processArgument(v58, (WebCore::CanvasRenderingContext *)(v12 + 8), v25, (uint64_t)&v79);
              }
              else
              {
                LOBYTE(v79) = 0;
                v80 = 0;
              }
              v70[0] = v73;
              v70[1] = 4;
              v59 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40)
                                                                                           + 144))(*(_QWORD *)(v12 + 40));
              if (v59)
              {
                v61 = WebCore::InspectorInstrumentation::instrumentingAgents(v59, v60);
                if (v61)
                {
                  v62 = *(_QWORD *)(v61 + 96);
                  if (v62)
                    WebCore::InspectorCanvasAgent::recordAction(v62, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v71, v70);
                }
              }
              if (v80)
              {
                v63 = v79;
                v79 = 0;
                if (v63)
                {
                  if (*v63 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v63;
                }
              }
              if (v78)
              {
                v64 = v77;
                v77 = 0;
                if (v64)
                {
                  if (*v64 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v64;
                }
              }
              if (v76)
              {
                v65 = v75;
                v75 = 0;
                if (v65)
                {
                  if (*v65 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v65;
                }
              }
              if (v74)
              {
                v66 = (_DWORD *)v73[0];
                v73[0] = 0;
                if (v66)
                {
                  if (*v66 == 1)
                    WTF::JSONImpl::Value::operator delete();
                  else
                    --*v66;
                }
              }
              v67 = v71;
              v71 = 0;
              if (v67)
              {
                if (*(_DWORD *)v67 == 2)
                  WTF::StringImpl::destroy(v67, v60);
                else
                  *(_DWORD *)v67 -= 2;
              }
            }
            if (!*(_BYTE *)(v12 + 364))
              WebCore::WebGLRenderingContextBase::drawArraysInstanced(v12, v72[0], v19, v22, v25, v13, v14, v15, v16);
            return 10;
          }
        }
      }
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_drawElementsInstanced(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  JSC::VM *v14;
  uint64_t v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  unint64_t v20;
  uint64_t v21;
  JSC::VM *v22;
  double v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  JSC::VM *v31;
  uint64_t v32;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  JSValue v38;
  unsigned int v39;
  WebCore::InspectorInstrumentation *v40;
  WebCore::ScriptExecutionContext *v41;
  uint64_t v42;
  WebCore::InspectorCanvasAgent *v43;
  WebCore::InspectorInstrumentation *v44;
  WebCore::ScriptExecutionContext *v45;
  uint64_t v46;
  WebCore::InspectorCanvasAgent *v47;
  unsigned int v48;
  WebCore::InspectorInstrumentation *v49;
  WebCore::ScriptExecutionContext *v50;
  uint64_t v51;
  WebCore::InspectorCanvasAgent *v52;
  WebCore::InspectorInstrumentation *v53;
  WebCore::ScriptExecutionContext *v54;
  uint64_t v55;
  WebCore::InspectorCanvasAgent *v56;
  WebCore::InspectorInstrumentation *v57;
  WebCore::ScriptExecutionContext *v58;
  uint64_t v59;
  WebCore::InspectorCanvasAgent *v60;
  WebCore::InspectorInstrumentation *v61;
  WebCore::ScriptExecutionContext *v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  _DWORD *v66;
  _DWORD *v67;
  _DWORD *v68;
  _DWORD *v69;
  WTF::StringImpl *v70;
  unint64_t v71;
  WebCore::CanvasRenderingContext *v72;
  JSC::VM *v73;
  _QWORD v74[2];
  WTF::StringImpl *v75;
  unsigned int v76[2];
  unsigned int v77[2];
  _QWORD v78[2];
  char v79;
  _DWORD *v80;
  char v81;
  _DWORD *v82;
  char v83;
  _DWORD *v84;
  char v85;
  _DWORD *v86;
  char v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v73 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v73, "WebGL2RenderingContext", "drawElementsInstanced");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v73, "WebGL2RenderingContext", "drawElementsInstanced");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 4)
  {
    v38.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v38);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v77);
  if (v77[1])
    return 0;
  v13 = *((_QWORD *)a2 + 7);
  v78[0] = v13;
  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v13 < 0xFFFE000000000000)
  {
    v24 = v13 - 0x2000000000000;
    if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v78, this);
      v24 = v71;
    }
    v25 = (v24 >> 52) & 0x7FF;
    v26 = v25 - 1023;
    v27 = v24 >> (51 - (v24 >> 52));
    if (v25 > 0x433)
      LODWORD(v27) = v24 << ((v24 >> 52) - 51);
    if (v25 >= 0x41F)
      v28 = v27;
    else
      v28 = (((1 << ((v24 >> 52) + 1)) - 1) & v27) + (1 << ((v24 >> 52) + 1));
    if ((v24 & 0x8000000000000000) == 0)
      v29 = v28;
    else
      v29 = -v28;
    if (v26 <= 0x53)
      v15 = v29;
    else
      v15 = 0;
  }
  else
  {
    v15 = v13;
  }
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v76);
  if (v76[1])
    return 0;
  v20 = *((_QWORD *)a2 + 9);
  v78[0] = v20;
  if (v20 < 0xFFFE000000000000)
  {
    v22 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v20 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v78, this);
      v23 = v16.n128_f64[0];
    }
    else
    {
      *(_QWORD *)&v23 = v20 - 0x2000000000000;
    }
    if (*((_DWORD *)v22 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v22) & 1) != 0)
      return 0;
    v16.n128_f64[0] = fabs(v23);
    v17.n128_u64[0] = 0x7FF0000000000000;
    if (v16.n128_f64[0] == INFINITY)
    {
      v21 = 0;
    }
    else
    {
      v16.n128_f64[0] = fmod(trunc(v23), 1.84467441e19);
      if (v16.n128_f64[0] >= 0.0)
      {
        v21 = (unint64_t)v16.n128_f64[0];
      }
      else
      {
        v16.n128_f64[0] = -v16.n128_f64[0];
        v21 = -(uint64_t)(unint64_t)v16.n128_f64[0];
      }
    }
  }
  else
  {
    v21 = (int)v20;
  }
  v30 = *((_QWORD *)a2 + 10);
  v78[0] = v30;
  v31 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v30 < 0xFFFE000000000000)
  {
    v34 = v30 - 0x2000000000000;
    if (v30 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v78, this);
      v34 = v16.n128_u64[0];
    }
    v35 = (v34 >> 52) & 0x7FF;
    if ((v35 - 1023) <= 0x53)
    {
      v36 = v34 >> (51 - (v34 >> 52));
      if (v35 > 0x433)
        LODWORD(v36) = v34 << ((v34 >> 52) - 51);
      if (v35 >= 0x41F)
        v37 = v36;
      else
        v37 = (((1 << ((v34 >> 52) + 1)) - 1) & v36) + (1 << ((v34 >> 52) + 1));
      if ((v34 & 0x8000000000000000) == 0)
        v32 = v37;
      else
        v32 = -v37;
    }
    else
    {
      v32 = 0;
    }
  }
  else
  {
    v32 = v30;
  }
  if (*((_DWORD *)v31 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v31))
    return 0;
  if (*(_BYTE *)(v12 + 33))
  {
    v72 = (WebCore::CanvasRenderingContext *)(v12 + 8);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v75 = (WTF::StringImpl *)v78[0];
    v39 = v77[0];
    v40 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v40
      && (v42 = WebCore::InspectorInstrumentation::instrumentingAgents(v40, v41)) != 0
      && (v43 = *(WebCore::InspectorCanvasAgent **)(v42 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v43, v72, v39, (uint64_t)v78);
    }
    else
    {
      LOBYTE(v78[0]) = 0;
      v79 = 0;
    }
    v44 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v44
      && (v46 = WebCore::InspectorInstrumentation::instrumentingAgents(v44, v45)) != 0
      && (v47 = *(WebCore::InspectorCanvasAgent **)(v46 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v47, v72, v15, (uint64_t)&v80);
    }
    else
    {
      LOBYTE(v80) = 0;
      v81 = 0;
    }
    v48 = v76[0];
    v49 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v49
      && (v51 = WebCore::InspectorInstrumentation::instrumentingAgents(v49, v50)) != 0
      && (v52 = *(WebCore::InspectorCanvasAgent **)(v51 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v52, v72, v48, (uint64_t)&v82);
    }
    else
    {
      LOBYTE(v82) = 0;
      v83 = 0;
    }
    v53 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v53
      && (v55 = WebCore::InspectorInstrumentation::instrumentingAgents(v53, v54)) != 0
      && (v56 = *(WebCore::InspectorCanvasAgent **)(v55 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v56, v72, v21, (uint64_t)&v84);
    }
    else
    {
      LOBYTE(v84) = 0;
      v85 = 0;
    }
    v57 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v57
      && (v59 = WebCore::InspectorInstrumentation::instrumentingAgents(v57, v58)) != 0
      && (v60 = *(WebCore::InspectorCanvasAgent **)(v59 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v60, v72, v32, (uint64_t)&v86);
    }
    else
    {
      LOBYTE(v86) = 0;
      v87 = 0;
    }
    v74[0] = v78;
    v74[1] = 5;
    v61 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v61)
    {
      v63 = WebCore::InspectorInstrumentation::instrumentingAgents(v61, v62);
      if (v63)
      {
        v64 = *(_QWORD *)(v63 + 96);
        if (v64)
          WebCore::InspectorCanvasAgent::recordAction(v64, v72, (const WTF::StringImpl *)&v75, v74);
      }
    }
    if (v87)
    {
      v65 = v86;
      v86 = 0;
      if (v65)
      {
        if (*v65 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v65;
      }
    }
    if (v85)
    {
      v66 = v84;
      v84 = 0;
      if (v66)
      {
        if (*v66 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v66;
      }
    }
    if (v83)
    {
      v67 = v82;
      v82 = 0;
      if (v67)
      {
        if (*v67 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v67;
      }
    }
    if (v81)
    {
      v68 = v80;
      v80 = 0;
      if (v68)
      {
        if (*v68 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v68;
      }
    }
    if (v79)
    {
      v69 = (_DWORD *)v78[0];
      v78[0] = 0;
      if (v69)
      {
        if (*v69 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v69;
      }
    }
    v70 = v75;
    v75 = 0;
    if (v70)
    {
      if (*(_DWORD *)v70 == 2)
        WTF::StringImpl::destroy(v70, v62);
      else
        *(_DWORD *)v70 -= 2;
    }
  }
  if (!*(_BYTE *)(v12 + 364))
    WebCore::WebGLRenderingContextBase::drawElementsInstanced(v12, v77[0], v15, v76[0], v21, v32, v16, v17, v18, v19);
  return 10;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_drawRangeElements(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  JSC::VM *v14;
  uint64_t v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  unint64_t v20;
  uint64_t v21;
  JSC::VM *v22;
  double v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v27;
  unsigned int v28;
  JSValue v29;
  unsigned int v30;
  WebCore::InspectorInstrumentation *v31;
  WebCore::ScriptExecutionContext *v32;
  uint64_t v33;
  WebCore::InspectorCanvasAgent *v34;
  unsigned int v35;
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  WebCore::InspectorCanvasAgent *v39;
  unsigned int v40;
  WebCore::InspectorInstrumentation *v41;
  WebCore::ScriptExecutionContext *v42;
  uint64_t v43;
  WebCore::InspectorCanvasAgent *v44;
  WebCore::InspectorInstrumentation *v45;
  WebCore::ScriptExecutionContext *v46;
  uint64_t v47;
  WebCore::InspectorCanvasAgent *v48;
  unsigned int v49;
  WebCore::InspectorInstrumentation *v50;
  WebCore::ScriptExecutionContext *v51;
  uint64_t v52;
  WebCore::InspectorCanvasAgent *v53;
  WebCore::InspectorInstrumentation *v54;
  WebCore::ScriptExecutionContext *v55;
  uint64_t v56;
  WebCore::InspectorCanvasAgent *v57;
  WebCore::InspectorInstrumentation *v58;
  WebCore::ScriptExecutionContext *v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  _DWORD *v63;
  _DWORD *v64;
  _DWORD *v65;
  _DWORD *v66;
  _DWORD *v67;
  WTF::StringImpl *v68;
  unint64_t v69;
  WebCore::CanvasRenderingContext *v70;
  JSC::VM *v71;
  _QWORD v72[2];
  WTF::StringImpl *v73;
  unsigned int v74[2];
  unsigned int v75[2];
  unsigned int v76[2];
  unsigned int v77[2];
  _QWORD v78[2];
  char v79;
  _DWORD *v80;
  char v81;
  _DWORD *v82;
  char v83;
  _DWORD *v84;
  char v85;
  _DWORD *v86;
  char v87;
  _DWORD *v88;
  char v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v71 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v71, "WebGL2RenderingContext", "drawRangeElements");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v71, "WebGL2RenderingContext", "drawRangeElements");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 5)
  {
    v29.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v29);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v77);
  if (v77[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v76);
  if (v76[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v75);
  if (v75[1])
    return 0;
  v13 = *((_QWORD *)a2 + 9);
  v78[0] = v13;
  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v13 < 0xFFFE000000000000)
  {
    v24 = v13 - 0x2000000000000;
    if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v78, this);
      v24 = v69;
    }
    v25 = (v24 >> 52) & 0x7FF;
    if ((v25 - 1023) <= 0x53)
    {
      v27 = v24 >> (51 - (v24 >> 52));
      if (v25 > 0x433)
        LODWORD(v27) = v24 << ((v24 >> 52) - 51);
      if (v25 >= 0x41F)
        v28 = v27;
      else
        v28 = (((1 << ((v24 >> 52) + 1)) - 1) & v27) + (1 << ((v24 >> 52) + 1));
      if ((v24 & 0x8000000000000000) == 0)
        v15 = v28;
      else
        v15 = -v28;
    }
    else
    {
      v15 = 0;
    }
  }
  else
  {
    v15 = v13;
  }
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 10), v74);
  if (v74[1])
    return 0;
  v20 = *((_QWORD *)a2 + 11);
  v78[0] = v20;
  if (v20 < 0xFFFE000000000000)
  {
    v22 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v20 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v78, this);
      v23 = v16.n128_f64[0];
    }
    else
    {
      *(_QWORD *)&v23 = v20 - 0x2000000000000;
    }
    if (*((_DWORD *)v22 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v22) & 1) != 0)
      return 0;
    v16.n128_f64[0] = fabs(v23);
    v17.n128_u64[0] = 0x7FF0000000000000;
    if (v16.n128_f64[0] == INFINITY)
    {
      v21 = 0;
    }
    else
    {
      v16.n128_f64[0] = fmod(trunc(v23), 1.84467441e19);
      if (v16.n128_f64[0] >= 0.0)
      {
        v21 = (unint64_t)v16.n128_f64[0];
      }
      else
      {
        v16.n128_f64[0] = -v16.n128_f64[0];
        v21 = -(uint64_t)(unint64_t)v16.n128_f64[0];
      }
    }
  }
  else
  {
    v21 = (int)v20;
  }
  if (*(_BYTE *)(v12 + 33))
  {
    v70 = (WebCore::CanvasRenderingContext *)(v12 + 8);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v73 = (WTF::StringImpl *)v78[0];
    v30 = v77[0];
    v31 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v31
      && (v33 = WebCore::InspectorInstrumentation::instrumentingAgents(v31, v32)) != 0
      && (v34 = *(WebCore::InspectorCanvasAgent **)(v33 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v34, v70, v30, (uint64_t)v78);
    }
    else
    {
      LOBYTE(v78[0]) = 0;
      v79 = 0;
    }
    v35 = v76[0];
    v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v36
      && (v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37)) != 0
      && (v39 = *(WebCore::InspectorCanvasAgent **)(v38 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v39, v70, v35, (uint64_t)&v80);
    }
    else
    {
      LOBYTE(v80) = 0;
      v81 = 0;
    }
    v40 = v75[0];
    v41 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v41
      && (v43 = WebCore::InspectorInstrumentation::instrumentingAgents(v41, v42)) != 0
      && (v44 = *(WebCore::InspectorCanvasAgent **)(v43 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v44, v70, v40, (uint64_t)&v82);
    }
    else
    {
      LOBYTE(v82) = 0;
      v83 = 0;
    }
    v45 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v45
      && (v47 = WebCore::InspectorInstrumentation::instrumentingAgents(v45, v46)) != 0
      && (v48 = *(WebCore::InspectorCanvasAgent **)(v47 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v48, v70, v15, (uint64_t)&v84);
    }
    else
    {
      LOBYTE(v84) = 0;
      v85 = 0;
    }
    v49 = v74[0];
    v50 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v50
      && (v52 = WebCore::InspectorInstrumentation::instrumentingAgents(v50, v51)) != 0
      && (v53 = *(WebCore::InspectorCanvasAgent **)(v52 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v53, v70, v49, (uint64_t)&v86);
    }
    else
    {
      LOBYTE(v86) = 0;
      v87 = 0;
    }
    v54 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v54
      && (v56 = WebCore::InspectorInstrumentation::instrumentingAgents(v54, v55)) != 0
      && (v57 = *(WebCore::InspectorCanvasAgent **)(v56 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v57, v70, v21, (uint64_t)&v88);
    }
    else
    {
      LOBYTE(v88) = 0;
      v89 = 0;
    }
    v72[0] = v78;
    v72[1] = 6;
    v58 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v58)
    {
      v60 = WebCore::InspectorInstrumentation::instrumentingAgents(v58, v59);
      if (v60)
      {
        v61 = *(_QWORD *)(v60 + 96);
        if (v61)
          WebCore::InspectorCanvasAgent::recordAction(v61, v70, (const WTF::StringImpl *)&v73, v72);
      }
    }
    if (v89)
    {
      v62 = v88;
      v88 = 0;
      if (v62)
      {
        if (*v62 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v62;
      }
    }
    if (v87)
    {
      v63 = v86;
      v86 = 0;
      if (v63)
      {
        if (*v63 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v63;
      }
    }
    if (v85)
    {
      v64 = v84;
      v84 = 0;
      if (v64)
      {
        if (*v64 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v64;
      }
    }
    if (v83)
    {
      v65 = v82;
      v82 = 0;
      if (v65)
      {
        if (*v65 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v65;
      }
    }
    if (v81)
    {
      v66 = v80;
      v80 = 0;
      if (v66)
      {
        if (*v66 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v66;
      }
    }
    if (v79)
    {
      v67 = (_DWORD *)v78[0];
      v78[0] = 0;
      if (v67)
      {
        if (*v67 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v67;
      }
    }
    v68 = v73;
    v73 = 0;
    if (v68)
    {
      if (*(_DWORD *)v68 == 2)
        WTF::StringImpl::destroy(v68, v59);
      else
        *(_DWORD *)v68 -= 2;
    }
  }
  WebCore::WebGL2RenderingContext::drawRangeElements(v12, v77[0], v76[0], v75[0], v15, v74[0], v21, v16, v17, v18, v19);
  return 10;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_drawBuffers(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  unsigned int v14;
  unsigned int v15;
  void *v16;
  WTF *v17;
  int v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  WTF::StringImpl *v21;
  JSValue v24;
  void *v25;
  WTF *v26;
  WebCore::InspectorInstrumentation *v27;
  WebCore::ScriptExecutionContext *v28;
  uint64_t v29;
  uint64_t v30;
  WebCore::InspectorInstrumentation *v31;
  WebCore::ScriptExecutionContext *v32;
  uint64_t v33;
  uint64_t v34;
  WTF *v35;
  WTF::StringImpl *v36;
  WebCore *v37;
  JSC::JSGlobalObject *v38;
  JSC::CallFrame *v39;
  JSC::VM *v40;
  _QWORD v41[2];
  WTF::StringImpl *v42;
  WTF::StringImpl *v43;
  unint64_t v44;
  int v45;
  WTF *v46;
  unint64_t v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v40 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v40, "WebGL2RenderingContext", "drawBuffers");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return WebCore::throwThisTypeError((int)this, (int)&v40, "WebGL2RenderingContext", "drawBuffers");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v24.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v24);
  }
  v11 = *(_QWORD *)(v5 + 24);
  v12 = *((_QWORD *)a2 + 6);
  v41[0] = v4;
  if ((v12 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v12 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v21 = v43;
    v43 = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 2)
        WTF::StringImpl::destroy(v21, v20);
      else
        *(_DWORD *)v21 -= 2;
    }
    v19 = 0;
    v18 = 1;
    v45 = 1;
    goto LABEL_25;
  }
  v46 = 0;
  v47 = 0;
  v43 = (WTF::StringImpl *)&v46;
  JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLUnsignedLong>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(this, v12, (uint64_t *)&v43);
  if (*((_DWORD *)v4 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v4))
  {
    v26 = v46;
    v45 = 1;
    if (v46)
    {
      v46 = 0;
      LODWORD(v47) = 0;
      WTF::fastFree(v26, v25);
    }
    v19 = 0;
    v18 = 1;
LABEL_25:
    ((void (*)(WTF **, WTF::StringImpl **))off_1E332F398[v18])(&v46, &v43);
    return (_BYTE *)v19;
  }
  v13 = v46;
  v43 = v46;
  v14 = v47;
  v15 = HIDWORD(v47);
  v44 = v47;
  v45 = 0;
  if (!*(_BYTE *)(v11 + 33))
  {
LABEL_17:
    v43 = 0;
    v44 = 0;
    v46 = v13;
    v47 = __PAIR64__(v15, v14);
    WebCore::WebGL2RenderingContext::drawBuffers((WTF *)v11, (unsigned int *)&v46);
    v17 = v46;
    if (v46)
    {
      v46 = 0;
      LODWORD(v47) = 0;
      WTF::fastFree(v17, v16);
    }
    v18 = v45;
    v19 = 10;
    if (v45 == -1)
      return (_BYTE *)v19;
    goto LABEL_25;
  }
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  if (!v45)
  {
    v27 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
    if (v27
      && (v29 = WebCore::InspectorInstrumentation::instrumentingAgents(v27, v28)) != 0
      && (v30 = *(_QWORD *)(v29 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v30, v11 + 8, (uint64_t *)&v43, (uint64_t)&v46);
    }
    else
    {
      LOBYTE(v46) = 0;
      v48 = 0;
    }
    v41[0] = &v46;
    v41[1] = 1;
    v31 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
    if (v31)
    {
      v33 = WebCore::InspectorInstrumentation::instrumentingAgents(v31, v32);
      if (v33)
      {
        v34 = *(_QWORD *)(v33 + 96);
        if (v34)
          WebCore::InspectorCanvasAgent::recordAction(v34, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v42, v41);
      }
    }
    if (v48)
    {
      v35 = v46;
      v46 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v35;
      }
    }
    v36 = v42;
    v42 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 2)
        WTF::StringImpl::destroy(v36, v32);
      else
        *(_DWORD *)v36 -= 2;
    }
    if (!v45)
    {
      v13 = v43;
      v14 = v44;
      v15 = HIDWORD(v44);
      goto LABEL_17;
    }
  }
  v37 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_clearBufferiv(v37, v38, v39);
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_clearBufferiv(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  JSC::VM *v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t (*v20)();
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;
  unsigned int v32;
  JSValue v34;
  unsigned int v35;
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  WebCore::InspectorCanvasAgent *v39;
  WebCore::InspectorInstrumentation *v40;
  WebCore::ScriptExecutionContext *v41;
  uint64_t v42;
  WebCore::InspectorCanvasAgent *v43;
  WebCore::InspectorInstrumentation *v44;
  WebCore::ScriptExecutionContext *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  WebCore::InspectorInstrumentation *v49;
  WebCore::ScriptExecutionContext *v50;
  uint64_t v51;
  WebCore::InspectorCanvasAgent *v52;
  WebCore::InspectorInstrumentation *v53;
  WebCore::ScriptExecutionContext *v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  _DWORD *v58;
  _DWORD *v59;
  _DWORD *v60;
  WTF::StringImpl *v61;
  unint64_t v62;
  WebCore *v63;
  JSC::JSGlobalObject *v64;
  JSC::CallFrame *v65;
  JSC::VM *v66;
  unsigned int v67[2];
  _DWORD v68[2];
  WTF::StringImpl *v69[2];
  int v70;
  _QWORD v71[2];
  int v72;
  _QWORD v73[2];
  char v74;
  _DWORD *v75;
  char v76;
  _DWORD *v77;
  char v78;
  _DWORD *v79;
  char v80;
  char v81[8];
  _BYTE v82[16];
  int v83;
  int v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v66 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v66, "WebGL2RenderingContext", "clearBufferiv");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v66, "WebGL2RenderingContext", "clearBufferiv");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v34.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v34);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v68);
  if (v68[1])
    return 0;
  v13 = *((_QWORD *)a2 + 7);
  v73[0] = v13;
  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v13 < 0xFFFE000000000000)
  {
    v27 = v13 - 0x2000000000000;
    if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v73, this);
      v27 = v62;
    }
    v28 = (v27 >> 52) & 0x7FF;
    v29 = v28 - 1023;
    v30 = v27 >> (51 - (v27 >> 52));
    if (v28 > 0x433)
      LODWORD(v30) = v27 << ((v27 >> 52) - 51);
    if (v28 >= 0x41F)
      v31 = v30;
    else
      v31 = (((1 << ((v27 >> 52) + 1)) - 1) & v30) + (1 << ((v27 >> 52) + 1));
    if ((v27 & 0x8000000000000000) == 0)
      v32 = v31;
    else
      v32 = -v31;
    if (v29 <= 0x53)
      v15 = v32;
    else
      v15 = 0;
  }
  else
  {
    v15 = v13;
  }
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
    return 0;
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLInt32Array>,WebCore::IDLSequence<WebCore::IDLLong>>>::convert(this, *((JSC::JSGlobalObject **)a2 + 8), (uint64_t)v81);
  v16 = v84;
  if (v84)
  {
    v25 = 0;
LABEL_38:
    if (v16 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E332F598[v16])(v73, v82);
    return (_BYTE *)v25;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 5) > 0xFFFFFFFFFFFFFFFBLL)
    v17 = 10;
  else
    v17 = *((_QWORD *)a2 + 9);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v17, v67);
  if (v67[1])
  {
    v25 = 0;
LABEL_37:
    v16 = v84;
    goto LABEL_38;
  }
  if (*(_BYTE *)(v12 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v69[0] = (WTF::StringImpl *)v73[0];
    v35 = v68[0];
    v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v36
      && (v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37)) != 0
      && (v39 = *(WebCore::InspectorCanvasAgent **)(v38 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v39, (WebCore::CanvasRenderingContext *)(v12 + 8), v35, (uint64_t)v73);
    }
    else
    {
      LOBYTE(v73[0]) = 0;
      v74 = 0;
    }
    v40 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v40
      && (v42 = WebCore::InspectorInstrumentation::instrumentingAgents(v40, v41)) != 0
      && (v43 = *(WebCore::InspectorCanvasAgent **)(v42 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v43, (WebCore::CanvasRenderingContext *)(v12 + 8), v15, (uint64_t)&v75);
    }
    else
    {
      LOBYTE(v75) = 0;
      v76 = 0;
    }
    if (v84)
      goto LABEL_111;
    v44 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v44
      && (v46 = WebCore::InspectorInstrumentation::instrumentingAgents(v44, v45)) != 0
      && (v47 = *(_QWORD *)(v46 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v47, v12 + 8, (uint64_t)v82);
    }
    else
    {
      LOBYTE(v77) = 0;
      v78 = 0;
    }
    v48 = v67[0];
    v49 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v49
      && (v51 = WebCore::InspectorInstrumentation::instrumentingAgents(v49, v50)) != 0
      && (v52 = *(WebCore::InspectorCanvasAgent **)(v51 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v52, (WebCore::CanvasRenderingContext *)(v12 + 8), v48, (uint64_t)&v79);
    }
    else
    {
      LOBYTE(v79) = 0;
      v80 = 0;
    }
    v71[0] = v73;
    v71[1] = 4;
    v53 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v53)
    {
      v55 = WebCore::InspectorInstrumentation::instrumentingAgents(v53, v54);
      if (v55)
      {
        v56 = *(_QWORD *)(v55 + 96);
        if (v56)
          WebCore::InspectorCanvasAgent::recordAction(v56, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)v69, v71);
      }
    }
    if (v80)
    {
      v57 = v79;
      v79 = 0;
      if (v57)
      {
        if (*v57 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v57;
      }
    }
    if (v78)
    {
      v58 = v77;
      v77 = 0;
      if (v58)
      {
        if (*v58 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v58;
      }
    }
    if (v76)
    {
      v59 = v75;
      v75 = 0;
      if (v59)
      {
        if (*v59 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v59;
      }
    }
    if (v74)
    {
      v60 = (_DWORD *)v73[0];
      v73[0] = 0;
      if (v60)
      {
        if (*v60 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v60;
      }
    }
    v61 = v69[0];
    v69[0] = 0;
    if (v61)
    {
      if (*(_DWORD *)v61 == 2)
        WTF::StringImpl::destroy(v61, v54);
      else
        *(_DWORD *)v61 -= 2;
    }
  }
  if (v84)
  {
LABEL_111:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_112;
  }
  v18 = v68[0];
  LOBYTE(v69[0]) = 0;
  v70 = -1;
  v19 = v83;
  if (v83 == -1)
  {
    LOBYTE(v71[0]) = 0;
    v72 = -1;
  }
  else
  {
    v20 = off_1E332F578[v83];
    ((void (*)(_QWORD *, WTF::StringImpl **, _BYTE *))v20)(v73, v69, v82);
    v70 = v19;
    LOBYTE(v71[0]) = 0;
    v72 = -1;
    ((void (*)(_QWORD *, _QWORD *, WTF::StringImpl **))v20)(v73, v71, v69);
    v72 = v19;
  }
  if (*(_BYTE *)(v12 + 364))
    goto LABEL_32;
  WebCore::WebGL2RenderingContext::validateClearBuffer<int,JSC::GenericTypedArrayView<JSC::Int32Adaptor>>((WTF::StringImpl *)v12, (uint64_t)"clearBufferiv", 14, v18, (uint64_t)v71, v67[0], (uint64_t)v73);
  if (!v74)
  {
LABEL_31:
    v19 = v72;
LABEL_32:
    if (v19 != -1)
      ((void (*)(_QWORD *, _QWORD *))off_1E332F568[v19])(v73, v71);
    v72 = -1;
    if (v70 != -1)
      ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F568[v70])(v73, v69);
    v25 = 10;
    goto LABEL_37;
  }
  WebCore::WebGLRenderingContextBase::clearIfComposited(v12, 0, 0, v21, v22, v23, v24);
  if (v74)
  {
    (*(void (**)(_QWORD, uint64_t, unint64_t, _QWORD, _QWORD))(**(_QWORD **)(v12 + 88) + 1576))(*(_QWORD *)(v12 + 88), v18, v15, v73[0], v73[1]);
    goto LABEL_31;
  }
LABEL_112:
  v63 = (WebCore *)std::__throw_bad_optional_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_clearBufferuiv(v63, v64, v65);
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_clearBufferuiv(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  JSC::VM *v14;
  unint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t (*v20)();
  uint64_t v21;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  JSValue v30;
  unsigned int v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  WebCore::InspectorCanvasAgent *v35;
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  WebCore::InspectorCanvasAgent *v39;
  WebCore::InspectorInstrumentation *v40;
  WebCore::ScriptExecutionContext *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  WebCore::InspectorInstrumentation *v45;
  WebCore::ScriptExecutionContext *v46;
  uint64_t v47;
  WebCore::InspectorCanvasAgent *v48;
  WebCore::InspectorInstrumentation *v49;
  WebCore::ScriptExecutionContext *v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  _DWORD *v55;
  _DWORD *v56;
  WTF::StringImpl *v57;
  unint64_t v58;
  WebCore *v59;
  JSC::JSGlobalObject *v60;
  JSC::CallFrame *v61;
  JSC::VM *v62;
  unsigned int v63[2];
  _DWORD v64[2];
  WTF::StringImpl *v65[2];
  int v66;
  _QWORD v67[2];
  int v68;
  _QWORD v69[2];
  char v70;
  _DWORD *v71;
  char v72;
  _DWORD *v73;
  char v74;
  _DWORD *v75;
  char v76;
  int v77;
  _BYTE v78[16];
  int v79;
  int v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v62 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v62, "WebGL2RenderingContext", "clearBufferuiv");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v62, "WebGL2RenderingContext", "clearBufferuiv");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v30.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v30);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v64);
  if (v64[1])
    return 0;
  v13 = *((_QWORD *)a2 + 7);
  v69[0] = v13;
  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v13 < 0xFFFE000000000000)
  {
    v23 = v13 - 0x2000000000000;
    if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v69, this);
      v23 = v58;
    }
    v24 = (v23 >> 52) & 0x7FF;
    v25 = v24 - 1023;
    v26 = v23 >> (51 - (v23 >> 52));
    if (v24 > 0x433)
      LODWORD(v26) = v23 << ((v23 >> 52) - 51);
    if (v24 >= 0x41F)
      v27 = v26;
    else
      v27 = (((1 << ((v23 >> 52) + 1)) - 1) & v26) + (1 << ((v23 >> 52) + 1));
    if ((v23 & 0x8000000000000000) == 0)
      v28 = v27;
    else
      v28 = -v27;
    if (v25 <= 0x53)
      v15 = v28;
    else
      v15 = 0;
  }
  else
  {
    v15 = v13;
  }
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
    return 0;
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLUint32Array>,WebCore::IDLSequence<WebCore::IDLUnsignedLong>>>::convert(&v77, this, *((_QWORD *)a2 + 8));
  v16 = v80;
  if (v80)
  {
    v21 = 0;
LABEL_37:
    if (v16 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E332F528[v16])(v69, v78);
    return (_BYTE *)v21;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 5) > 0xFFFFFFFFFFFFFFFBLL)
    v17 = 10;
  else
    v17 = *((_QWORD *)a2 + 9);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v17, v63);
  if (v63[1])
  {
    v21 = 0;
LABEL_36:
    v16 = v80;
    goto LABEL_37;
  }
  if (*(_BYTE *)(v12 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v65[0] = (WTF::StringImpl *)v69[0];
    v31 = v64[0];
    v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v32
      && (v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33)) != 0
      && (v35 = *(WebCore::InspectorCanvasAgent **)(v34 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v35, (WebCore::CanvasRenderingContext *)(v12 + 8), v31, (uint64_t)v69);
    }
    else
    {
      LOBYTE(v69[0]) = 0;
      v70 = 0;
    }
    v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v36
      && (v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37)) != 0
      && (v39 = *(WebCore::InspectorCanvasAgent **)(v38 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v39, (WebCore::CanvasRenderingContext *)(v12 + 8), v15, (uint64_t)&v71);
    }
    else
    {
      LOBYTE(v71) = 0;
      v72 = 0;
    }
    if (v80)
      goto LABEL_110;
    v40 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v40
      && (v42 = WebCore::InspectorInstrumentation::instrumentingAgents(v40, v41)) != 0
      && (v43 = *(_QWORD *)(v42 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v43, v12 + 8, (uint64_t)v78);
    }
    else
    {
      LOBYTE(v73) = 0;
      v74 = 0;
    }
    v44 = v63[0];
    v45 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v45
      && (v47 = WebCore::InspectorInstrumentation::instrumentingAgents(v45, v46)) != 0
      && (v48 = *(WebCore::InspectorCanvasAgent **)(v47 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v48, (WebCore::CanvasRenderingContext *)(v12 + 8), v44, (uint64_t)&v75);
    }
    else
    {
      LOBYTE(v75) = 0;
      v76 = 0;
    }
    v67[0] = v69;
    v67[1] = 4;
    v49 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v49)
    {
      v51 = WebCore::InspectorInstrumentation::instrumentingAgents(v49, v50);
      if (v51)
      {
        v52 = *(_QWORD *)(v51 + 96);
        if (v52)
          WebCore::InspectorCanvasAgent::recordAction(v52, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)v65, v67);
      }
    }
    if (v76)
    {
      v53 = v75;
      v75 = 0;
      if (v53)
      {
        if (*v53 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v53;
      }
    }
    if (v74)
    {
      v54 = v73;
      v73 = 0;
      if (v54)
      {
        if (*v54 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v54;
      }
    }
    if (v72)
    {
      v55 = v71;
      v71 = 0;
      if (v55)
      {
        if (*v55 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v55;
      }
    }
    if (v70)
    {
      v56 = (_DWORD *)v69[0];
      v69[0] = 0;
      if (v56)
      {
        if (*v56 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v56;
      }
    }
    v57 = v65[0];
    v65[0] = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2)
        WTF::StringImpl::destroy(v57, v50);
      else
        *(_DWORD *)v57 -= 2;
    }
  }
  if (!v80)
  {
    v18 = v64[0];
    LOBYTE(v65[0]) = 0;
    v66 = -1;
    v19 = v79;
    if (v79 == -1)
    {
      LOBYTE(v67[0]) = 0;
      v68 = -1;
    }
    else
    {
      v20 = off_1E332F518[v79];
      ((void (*)(_QWORD *, WTF::StringImpl **, _BYTE *))v20)(v69, v65, v78);
      v66 = v19;
      LOBYTE(v67[0]) = 0;
      v68 = -1;
      ((void (*)(_QWORD *, _QWORD *, WTF::StringImpl **))v20)(v69, v67, v65);
      v68 = v19;
    }
    if (!*(_BYTE *)(v12 + 364))
    {
      WebCore::WebGL2RenderingContext::validateClearBuffer<unsigned int,JSC::GenericTypedArrayView<JSC::Uint32Adaptor>>((WTF::StringImpl *)v12, (uint64_t)"clearBufferuiv", 15, v18, (uint64_t)v67, v63[0], (uint64_t)v69);
      if (v70)
        (*(void (**)(_QWORD, uint64_t, unint64_t, _QWORD, _QWORD))(**(_QWORD **)(v12 + 88) + 1584))(*(_QWORD *)(v12 + 88), v18, v15, v69[0], v69[1]);
      v19 = v68;
    }
    if (v19 != -1)
      ((void (*)(_QWORD *, _QWORD *))off_1E332F508[v19])(v69, v67);
    v68 = -1;
    if (v66 != -1)
      ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F508[v66])(v69, v65);
    v21 = 10;
    goto LABEL_36;
  }
LABEL_110:
  v59 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_clearBufferfv(v59, v60, v61);
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_clearBufferfv(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unint64_t v13;
  JSC::VM *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t (*v20)();
  uint64_t v21;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  unsigned int v28;
  JSValue v30;
  unsigned int v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  WebCore::InspectorCanvasAgent *v35;
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  WebCore::InspectorCanvasAgent *v39;
  WebCore::InspectorInstrumentation *v40;
  WebCore::ScriptExecutionContext *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  WebCore::InspectorInstrumentation *v45;
  WebCore::ScriptExecutionContext *v46;
  uint64_t v47;
  WebCore::InspectorCanvasAgent *v48;
  WebCore::InspectorInstrumentation *v49;
  WebCore::ScriptExecutionContext *v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  _DWORD *v55;
  _DWORD *v56;
  WTF::StringImpl *v57;
  unint64_t v58;
  WebCore *v59;
  JSC::JSGlobalObject *v60;
  JSC::CallFrame *v61;
  JSC::VM *v62;
  WTF::StringImpl *v63;
  unsigned int v64[2];
  _DWORD v65[2];
  _QWORD v66[2];
  int v67;
  _QWORD v68[2];
  int v69;
  _DWORD *v70;
  char v71;
  _DWORD *v72;
  char v73;
  _DWORD *v74;
  char v75;
  char v76[8];
  _BYTE v77[16];
  int v78;
  int v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v62 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v62, "WebGL2RenderingContext", "clearBufferfv");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v62, "WebGL2RenderingContext", "clearBufferfv");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v30.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v30);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v65);
  if (v65[1])
    return 0;
  v13 = *((_QWORD *)a2 + 7);
  v68[0] = v13;
  v14 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v13 < 0xFFFE000000000000)
  {
    v23 = v13 - 0x2000000000000;
    if (v13 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v68, this);
      v23 = v58;
    }
    v24 = (v23 >> 52) & 0x7FF;
    v25 = v24 - 1023;
    v26 = v23 >> (51 - (v23 >> 52));
    if (v24 > 0x433)
      LODWORD(v26) = v23 << ((v23 >> 52) - 51);
    if (v24 >= 0x41F)
      v27 = v26;
    else
      v27 = (((1 << ((v23 >> 52) + 1)) - 1) & v26) + (1 << ((v23 >> 52) + 1));
    if ((v23 & 0x8000000000000000) == 0)
      v28 = v27;
    else
      v28 = -v27;
    if (v25 <= 0x53)
      v15 = v28;
    else
      v15 = 0;
  }
  else
  {
    v15 = v13;
  }
  if (*((_DWORD *)v14 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v14))
    return 0;
  WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLFloat32Array>,WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>>::convert(this, *((JSC::JSGlobalObject **)a2 + 8), (uint64_t)v76);
  v16 = v79;
  if (v79)
  {
    v21 = 0;
LABEL_33:
    if (v16 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E332F558[v16])(v68, v77);
    return (_BYTE *)v21;
  }
  if ((unint64_t)(*((int *)a2 + 8) - 5) > 0xFFFFFFFFFFFFFFFBLL)
    v17 = 10;
  else
    v17 = *((_QWORD *)a2 + 9);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, v17, v64);
  if (v64[1])
  {
    v21 = 0;
LABEL_32:
    v16 = v79;
    goto LABEL_33;
  }
  if (*(_BYTE *)(v12 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v63 = (WTF::StringImpl *)v68[0];
    v31 = v65[0];
    v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v32
      && (v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33)) != 0
      && (v35 = *(WebCore::InspectorCanvasAgent **)(v34 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v35, (WebCore::CanvasRenderingContext *)(v12 + 8), v31, (uint64_t)v68);
    }
    else
    {
      LOBYTE(v68[0]) = 0;
      LOBYTE(v69) = 0;
    }
    v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v36
      && (v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37)) != 0
      && (v39 = *(WebCore::InspectorCanvasAgent **)(v38 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v39, (WebCore::CanvasRenderingContext *)(v12 + 8), v15, (uint64_t)&v70);
    }
    else
    {
      LOBYTE(v70) = 0;
      v71 = 0;
    }
    if (v79)
      goto LABEL_106;
    v40 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v40
      && (v42 = WebCore::InspectorInstrumentation::instrumentingAgents(v40, v41)) != 0
      && (v43 = *(_QWORD *)(v42 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v43, v12 + 8, (uint64_t)v77);
    }
    else
    {
      LOBYTE(v72) = 0;
      v73 = 0;
    }
    v44 = v64[0];
    v45 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v45
      && (v47 = WebCore::InspectorInstrumentation::instrumentingAgents(v45, v46)) != 0
      && (v48 = *(WebCore::InspectorCanvasAgent **)(v47 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v48, (WebCore::CanvasRenderingContext *)(v12 + 8), v44, (uint64_t)&v74);
    }
    else
    {
      LOBYTE(v74) = 0;
      v75 = 0;
    }
    v66[0] = v68;
    v66[1] = 4;
    v49 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v49)
    {
      v51 = WebCore::InspectorInstrumentation::instrumentingAgents(v49, v50);
      if (v51)
      {
        v52 = *(_QWORD *)(v51 + 96);
        if (v52)
          WebCore::InspectorCanvasAgent::recordAction(v52, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v63, v66);
      }
    }
    if (v75)
    {
      v53 = v74;
      v74 = 0;
      if (v53)
      {
        if (*v53 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v53;
      }
    }
    if (v73)
    {
      v54 = v72;
      v72 = 0;
      if (v54)
      {
        if (*v54 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v54;
      }
    }
    if (v71)
    {
      v55 = v70;
      v70 = 0;
      if (v55)
      {
        if (*v55 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v55;
      }
    }
    if ((_BYTE)v69)
    {
      v56 = (_DWORD *)v68[0];
      v68[0] = 0;
      if (v56)
      {
        if (*v56 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v56;
      }
    }
    v57 = v63;
    v63 = 0;
    if (v57)
    {
      if (*(_DWORD *)v57 == 2)
        WTF::StringImpl::destroy(v57, v50);
      else
        *(_DWORD *)v57 -= 2;
    }
  }
  if (!v79)
  {
    v18 = v65[0];
    LOBYTE(v66[0]) = 0;
    v67 = -1;
    v19 = v78;
    if (v78 == -1)
    {
      LOBYTE(v68[0]) = 0;
      v69 = -1;
    }
    else
    {
      v20 = off_1E332F548[v78];
      ((void (*)(_QWORD *, _QWORD *, _BYTE *))v20)(v68, v66, v77);
      v67 = v19;
      LOBYTE(v68[0]) = 0;
      v69 = -1;
      ((void (*)(WTF::StringImpl **, _QWORD *, _QWORD *))v20)(&v63, v68, v66);
      v69 = v19;
    }
    WebCore::WebGL2RenderingContext::clearBufferfv((WTF::StringImpl *)v12, v18, v15, (uint64_t)v68, v64[0]);
    if (v69 != -1)
      ((void (*)(WTF::StringImpl **, _QWORD *))off_1E332F538[v69])(&v63, v68);
    v69 = -1;
    if (v67 != -1)
      ((void (*)(WTF::StringImpl **, _QWORD *))off_1E332F538[v67])(&v63, v66);
    v21 = 10;
    goto LABEL_32;
  }
LABEL_106:
  v59 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_clearBufferfi(v59, v60, v61);
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_clearBufferfi(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  unint64_t v17;
  JSC::VM *v18;
  unint64_t v19;
  unint64_t v20;
  JSC::VM *v21;
  double v22;
  float v23;
  unint64_t v24;
  JSC::VM *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  JSValue v39;
  int v40;
  unsigned int v41;
  WebCore::InspectorInstrumentation *v42;
  WebCore::ScriptExecutionContext *v43;
  uint64_t v44;
  WebCore::InspectorCanvasAgent *v45;
  WebCore::InspectorInstrumentation *v46;
  WebCore::ScriptExecutionContext *v47;
  uint64_t v48;
  WebCore::InspectorCanvasAgent *v49;
  WebCore::InspectorInstrumentation *v50;
  WebCore::ScriptExecutionContext *v51;
  uint64_t v52;
  WebCore::InspectorCanvasAgent *v53;
  WebCore::InspectorInstrumentation *v54;
  WebCore::ScriptExecutionContext *v55;
  uint64_t v56;
  WebCore::InspectorCanvasAgent *v57;
  WebCore::InspectorInstrumentation *v58;
  WebCore::ScriptExecutionContext *v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  _DWORD *v63;
  _DWORD *v64;
  _DWORD *v65;
  WTF::StringImpl *v66;
  JSC::VM *v67;
  JSC::VM *v68;
  JSC::VM *v69;
  _QWORD v70[2];
  WTF::StringImpl *v71;
  _DWORD v72[2];
  _QWORD v73[2];
  char v74;
  _DWORD *v75;
  char v76;
  _DWORD *v77;
  char v78;
  _DWORD *v79;
  char v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v69 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v69, "WebGL2RenderingContext", "clearBufferfi");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v69, "WebGL2RenderingContext", "clearBufferfi");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 3)
  {
    v39.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v39);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v72);
  if (v72[1])
    return 0;
  v17 = *((_QWORD *)a2 + 7);
  v73[0] = v17;
  v18 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v17 < 0xFFFE000000000000)
  {
    v29 = v17 - 0x2000000000000;
    if (v17 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      v68 = (JSC::VM *)*((_QWORD *)this + 7);
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v73, this);
      v18 = v68;
      v29 = v13.n128_u64[0];
    }
    v30 = (v29 >> 52) & 0x7FF;
    v31 = v30 - 1023;
    v32 = v29 >> (51 - (v29 >> 52));
    if (v30 > 0x433)
      LODWORD(v32) = v29 << ((v29 >> 52) - 51);
    if (v30 >= 0x41F)
      v33 = v32;
    else
      v33 = (((1 << ((v29 >> 52) + 1)) - 1) & v32) + (1 << ((v29 >> 52) + 1));
    if ((v29 & 0x8000000000000000) == 0)
      v34 = v33;
    else
      v34 = -v33;
    if (v31 <= 0x53)
      v19 = v34;
    else
      v19 = 0;
  }
  else
  {
    v19 = v17;
  }
  if (*((_DWORD *)v18 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v18))
    return 0;
  v20 = *((_QWORD *)a2 + 8);
  v73[0] = v20;
  v21 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v20 >= 0xFFFE000000000000)
  {
    v22 = (double)(int)v20;
  }
  else if (v20 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    v67 = (JSC::VM *)*((_QWORD *)this + 7);
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v73, this);
    v21 = v67;
    v22 = v13.n128_f64[0];
  }
  else
  {
    *(_QWORD *)&v22 = v20 - 0x2000000000000;
  }
  if (*((_DWORD *)v21 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v21) & 1) != 0)
    return 0;
  v13.n128_u64[0] = 0xC7EFFFFFE0000000;
  if (v22 < -3.40282347e38)
  {
    v40 = -8388608;
LABEL_72:
    v23 = *(float *)&v40;
    goto LABEL_24;
  }
  v13.n128_u64[0] = 0x47EFFFFFE0000000;
  if (v22 > 3.40282347e38)
  {
    v40 = 2139095040;
    goto LABEL_72;
  }
  v23 = v22;
LABEL_24:
  v24 = *((_QWORD *)a2 + 9);
  v73[0] = v24;
  v25 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v24 < 0xFFFE000000000000)
  {
    v35 = v24 - 0x2000000000000;
    if (v24 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v73, this);
      v35 = v13.n128_u64[0];
    }
    v36 = (v35 >> 52) & 0x7FF;
    if ((v36 - 1023) <= 0x53)
    {
      v37 = v35 >> (51 - (v35 >> 52));
      if (v36 > 0x433)
        LODWORD(v37) = v35 << ((v35 >> 52) - 51);
      if (v36 >= 0x41F)
        v38 = v37;
      else
        v38 = (((1 << ((v35 >> 52) + 1)) - 1) & v37) + (1 << ((v35 >> 52) + 1));
      if ((v35 & 0x8000000000000000) == 0)
        v26 = v38;
      else
        v26 = -v38;
    }
    else
    {
      v26 = 0;
    }
  }
  else
  {
    v26 = v24;
  }
  if (*((_DWORD *)v25 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v25))
    return 0;
  if (*(_BYTE *)(v12 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v71 = (WTF::StringImpl *)v73[0];
    v41 = v72[0];
    v42 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v42
      && (v44 = WebCore::InspectorInstrumentation::instrumentingAgents(v42, v43)) != 0
      && (v45 = *(WebCore::InspectorCanvasAgent **)(v44 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v45, (WebCore::CanvasRenderingContext *)(v12 + 8), v41, (uint64_t)v73);
    }
    else
    {
      LOBYTE(v73[0]) = 0;
      v74 = 0;
    }
    v46 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v46
      && (v48 = WebCore::InspectorInstrumentation::instrumentingAgents(v46, v47)) != 0
      && (v49 = *(WebCore::InspectorCanvasAgent **)(v48 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v49, (WebCore::CanvasRenderingContext *)(v12 + 8), v19, (uint64_t)&v75);
    }
    else
    {
      LOBYTE(v75) = 0;
      v76 = 0;
    }
    v50 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v50
      && (v52 = WebCore::InspectorInstrumentation::instrumentingAgents(v50, v51)) != 0
      && (v53 = *(WebCore::InspectorCanvasAgent **)(v52 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v53, (WebCore::CanvasRenderingContext *)(v12 + 8), v23, (uint64_t)&v77);
    }
    else
    {
      LOBYTE(v77) = 0;
      v78 = 0;
    }
    v54 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v54
      && (v56 = WebCore::InspectorInstrumentation::instrumentingAgents(v54, v55)) != 0
      && (v57 = *(WebCore::InspectorCanvasAgent **)(v56 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v57, (WebCore::CanvasRenderingContext *)(v12 + 8), v26, (uint64_t)&v79);
    }
    else
    {
      LOBYTE(v79) = 0;
      v80 = 0;
    }
    v70[0] = v73;
    v70[1] = 4;
    v58 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v58)
    {
      v60 = WebCore::InspectorInstrumentation::instrumentingAgents(v58, v59);
      if (v60)
      {
        v61 = *(_QWORD *)(v60 + 96);
        if (v61)
          WebCore::InspectorCanvasAgent::recordAction(v61, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v71, v70);
      }
    }
    if (v80)
    {
      v62 = v79;
      v79 = 0;
      if (v62)
      {
        if (*v62 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v62;
      }
    }
    if (v78)
    {
      v63 = v77;
      v77 = 0;
      if (v63)
      {
        if (*v63 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v63;
      }
    }
    if (v76)
    {
      v64 = v75;
      v75 = 0;
      if (v64)
      {
        if (*v64 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v64;
      }
    }
    if (v74)
    {
      v65 = (_DWORD *)v73[0];
      v73[0] = 0;
      if (v65)
      {
        if (*v65 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v65;
      }
    }
    v66 = v71;
    v71 = 0;
    if (v66)
    {
      if (*(_DWORD *)v66 == 2)
        WTF::StringImpl::destroy(v66, v59);
      else
        *(_DWORD *)v66 -= 2;
    }
  }
  if (!*(_BYTE *)(v12 + 364))
  {
    v27 = v72[0];
    WebCore::WebGLRenderingContextBase::clearIfComposited(v12, 0, 0, v13, v14, v15, v16);
    (*(void (**)(_QWORD, uint64_t, unint64_t, unint64_t, float))(**(_QWORD **)(v12 + 88) + 1600))(*(_QWORD *)(v12 + 88), v27, v19, v26, v23);
  }
  return 10;
}

unint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_createQuery(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  WebCore::InspectorInstrumentation *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  unsigned int *v21[2];
  WTF::StringImpl *v22;

  v4 = *((_QWORD *)a2 + 5);
  v20 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "WebGL2RenderingContext", "createQuery");
  v5 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
  v6 = *(unsigned int *)(v5 + 0x4C);
  v7 = *(_DWORD *)(v5 + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "WebGL2RenderingContext", "createQuery");
  v11 = *(_QWORD *)(v4 + 24);
  if (*(_BYTE *)(v11 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v21[0] = 0;
    v21[1] = 0;
    v16 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
    if (v16)
    {
      v17 = WebCore::InspectorInstrumentation::instrumentingAgents(v16, a2);
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 96);
        if (v18)
          WebCore::InspectorCanvasAgent::recordAction(v18, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v22, v21);
      }
    }
    v19 = v22;
    v22 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, a2);
      else
        *(_DWORD *)v19 -= 2;
    }
    v5 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
  }
  if (*(_BYTE *)(v11 + 364))
    return 2;
  v13 = *(_QWORD *)(v5 + 40);
  WebCore::WebGLQuery::create((WebCore::WebGLQuery *)v11, a2, v21);
  v14 = v21[0];
  if (!v21[0])
    return 2;
  v12 = WebCore::wrap<WebCore::WebGLQuery>((uint64_t)this, v13, (WTF *)v21[0]);
  if (v14[2] == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
  else
    --v14[2];
  return v12;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_deleteQuery(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  WebCore::WebGLQuery *v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  JSValue v25;
  WebCore::InspectorInstrumentation *v26;
  WebCore::ScriptExecutionContext *v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::InspectorInstrumentation *v30;
  WebCore::ScriptExecutionContext *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  JSC::VM *v36;
  _QWORD v37[2];
  WTF::StringImpl *v38;
  _QWORD v39[2];
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v36 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "deleteQuery");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "deleteQuery");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v25);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v18 = 0;
    }
    else
    {
      v39[0] = v9;
      if ((v17 & 0xFFFE000000000002) != 0)
        goto LABEL_26;
      v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
      v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
      v21 = (char **)(16 * v19);
      if ((_DWORD)v19)
        v22 = v21 == &WebCore::JSWebGLQuery::s_info;
      else
        v22 = 1;
      if (!v22)
      {
        do
        {
          v21 = (char **)v21[2];
          v20 = v21 != 0;
        }
        while (v21 != &WebCore::JSWebGLQuery::s_info && v21 != 0);
      }
      if (!v20 || (v18 = *(WebCore::WebGLQuery **)(v17 + 24)) == 0)
      {
LABEL_26:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v39, 0, "query", 6, "WebGL2RenderingContext", 23, a8, "deleteQuery", 12, "WebGLQuery", 11);
        return 0;
      }
    }
    if (*(_BYTE *)(v16 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v26 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v26
        && (v28 = WebCore::InspectorInstrumentation::instrumentingAgents(v26, v27)) != 0
        && (v29 = *(_QWORD *)(v28 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v29, (WebCore::CanvasRenderingContext *)(v16 + 8), v18, (uint64_t)v39);
      }
      else
      {
        LOBYTE(v39[0]) = 0;
        v40 = 0;
      }
      v37[0] = v39;
      v37[1] = 1;
      v30 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v30)
      {
        v32 = WebCore::InspectorInstrumentation::instrumentingAgents(v30, v31);
        if (v32)
        {
          v33 = *(_QWORD *)(v32 + 96);
          if (v33)
            WebCore::InspectorCanvasAgent::recordAction(v33, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v38, v37);
        }
      }
      if (v40)
      {
        v34 = (_DWORD *)v39[0];
        v39[0] = 0;
        if (v34)
        {
          if (*v34 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v34;
        }
      }
      v35 = v38;
      v38 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v31);
        else
          *(_DWORD *)v35 -= 2;
      }
    }
    WebCore::WebGL2RenderingContext::deleteQuery((WebCore::WebGL2RenderingContext *)v16, v18);
    return 10;
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_isQuery(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v25;
  uint64_t v26;
  JSValue v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  JSC::VM *v38;
  _QWORD v39[2];
  WTF::StringImpl *v40;
  _QWORD v41[2];
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v38 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v38, "WebGL2RenderingContext", "isQuery");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v38, "WebGL2RenderingContext", "isQuery");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v27);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v18 = 0;
    }
    else
    {
      v41[0] = v9;
      if ((v17 & 0xFFFE000000000002) != 0)
        goto LABEL_26;
      v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
      v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
      v21 = (char **)(16 * v19);
      if ((_DWORD)v19)
        v22 = v21 == &WebCore::JSWebGLQuery::s_info;
      else
        v22 = 1;
      if (!v22)
      {
        do
        {
          v21 = (char **)v21[2];
          v20 = v21 != 0;
        }
        while (v21 != &WebCore::JSWebGLQuery::s_info && v21 != 0);
      }
      if (!v20 || (v18 = *(_QWORD *)(v17 + 24)) == 0)
      {
LABEL_26:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v41, 0, "query", 6, "WebGL2RenderingContext", 23, a8, "isQuery", 8, "WebGLQuery", 11);
        return 0;
      }
    }
    if (*(_BYTE *)(v16 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v28
        && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
        && (v31 = *(_QWORD *)(v30 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v31, (WebCore::CanvasRenderingContext *)(v16 + 8), (WebCore::WebGLQuery *)v18, (uint64_t)v41);
      }
      else
      {
        LOBYTE(v41[0]) = 0;
        v42 = 0;
      }
      v39[0] = v41;
      v39[1] = 1;
      v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v32)
      {
        v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33);
        if (v34)
        {
          v35 = *(_QWORD *)(v34 + 96);
          if (v35)
            WebCore::InspectorCanvasAgent::recordAction(v35, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v40, v39);
        }
      }
      if (v42)
      {
        v36 = (_DWORD *)v41[0];
        v41[0] = 0;
        if (v36)
        {
          if (*v36 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v36;
        }
      }
      v37 = v40;
      v40 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v33);
        else
          *(_DWORD *)v37 -= 2;
      }
    }
    if (!v18 || *(_BYTE *)(v16 + 364))
      return 6;
    v25 = *(_QWORD *)(v18 + 16);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 8);
      if (v26)
        v25 = v26 - 8;
      else
        v25 = 0;
    }
    if (v25 == v16
      && *(_DWORD *)(v18 + 24)
      && !*(_BYTE *)(v18 + 32)
      && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v16 + 88) + 1624))(*(_QWORD *)(v16 + 88)))
    {
      return 7;
    }
    else
    {
      return 6;
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_beginQuery(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  char **v17;
  BOOL v18;
  WebCore::WebGLQuery *v21;
  uint64_t v22;
  JSValue v23;
  WebCore::InspectorInstrumentation *v24;
  WebCore::ScriptExecutionContext *v25;
  uint64_t v26;
  WebCore::InspectorCanvasAgent *v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  WTF::StringImpl *v38;
  JSC::VM *v39;
  _QWORD v40[2];
  WTF::StringImpl *v41;
  unsigned int v42[2];
  _QWORD v43[2];
  char v44;
  _DWORD *v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v39 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v39, "WebGL2RenderingContext", "beginQuery");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v39, "WebGL2RenderingContext", "beginQuery");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v23.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v23);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v42);
    if (v42[1])
    {
      return 0;
    }
    else
    {
      v14 = *((_QWORD *)a2 + 7);
      v43[0] = *((_QWORD *)this + 7);
      if ((v14 & 0xFFFE000000000002) != 0)
        goto LABEL_25;
      v15 = *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C);
      v16 = *(_DWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C) != 0;
      v17 = (char **)(16 * v15);
      if ((_DWORD)v15)
        v18 = v17 == &WebCore::JSWebGLQuery::s_info;
      else
        v18 = 1;
      if (!v18)
      {
        do
        {
          v17 = (char **)v17[2];
          v16 = v17 != 0;
        }
        while (v17 != &WebCore::JSWebGLQuery::s_info && v17 != 0);
      }
      if (v16 && (v21 = *(WebCore::WebGLQuery **)(v14 + 24)) != 0)
      {
        if (*(_BYTE *)(v12 + 33))
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v22 = v42[0];
          v24 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
          if (v24
            && (v26 = WebCore::InspectorInstrumentation::instrumentingAgents(v24, v25)) != 0
            && (v27 = *(WebCore::InspectorCanvasAgent **)(v26 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v27, (WebCore::CanvasRenderingContext *)(v12 + 8), v22, (uint64_t)v43);
          }
          else
          {
            LOBYTE(v43[0]) = 0;
            v44 = 0;
          }
          v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
          if (v28
            && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
            && (v31 = *(_QWORD *)(v30 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v31, (WebCore::CanvasRenderingContext *)(v12 + 8), v21, (uint64_t)&v45);
          }
          else
          {
            LOBYTE(v45) = 0;
            v46 = 0;
          }
          v40[0] = v43;
          v40[1] = 2;
          v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
          if (v32)
          {
            v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33);
            if (v34)
            {
              v35 = *(_QWORD *)(v34 + 96);
              if (v35)
                WebCore::InspectorCanvasAgent::recordAction(v35, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v41, v40);
            }
          }
          if (v46)
          {
            v36 = v45;
            v45 = 0;
            if (v36)
            {
              if (*v36 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v36;
            }
          }
          if (v44)
          {
            v37 = (_DWORD *)v43[0];
            v43[0] = 0;
            if (v37)
            {
              if (*v37 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v37;
            }
          }
          v38 = v41;
          v41 = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 2)
              WTF::StringImpl::destroy(v38, v33);
            else
              *(_DWORD *)v38 -= 2;
          }
        }
        else
        {
          v22 = v42[0];
        }
        WebCore::WebGL2RenderingContext::beginQuery((WTF::StringImpl *)v12, v22, v21);
        return 10;
      }
      else
      {
LABEL_25:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v43, 1, "query", 6, "WebGL2RenderingContext", 23, v13, "beginQuery", 11, "WebGLQuery", 11);
        return 0;
      }
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_endQuery(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  JSValue v14;
  WebCore::InspectorInstrumentation *v15;
  WebCore::ScriptExecutionContext *v16;
  uint64_t v17;
  WebCore::InspectorCanvasAgent *v18;
  WebCore::InspectorInstrumentation *v19;
  WebCore::ScriptExecutionContext *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  JSC::VM *v25;
  _QWORD v26[2];
  WTF::StringImpl *v27;
  unsigned int v28[2];
  _QWORD v29[2];
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "WebGL2RenderingContext", "endQuery");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "WebGL2RenderingContext", "endQuery");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v14.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v14);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v28);
    if (v28[1])
    {
      return 0;
    }
    else
    {
      if (*(_BYTE *)(v11 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v12 = v28[0];
        v15 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v15
          && (v17 = WebCore::InspectorInstrumentation::instrumentingAgents(v15, v16)) != 0
          && (v18 = *(WebCore::InspectorCanvasAgent **)(v17 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v18, (WebCore::CanvasRenderingContext *)(v11 + 8), v12, (uint64_t)v29);
        }
        else
        {
          LOBYTE(v29[0]) = 0;
          v30 = 0;
        }
        v26[0] = v29;
        v26[1] = 1;
        v19 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v19)
        {
          v21 = WebCore::InspectorInstrumentation::instrumentingAgents(v19, v20);
          if (v21)
          {
            v22 = *(_QWORD *)(v21 + 96);
            if (v22)
              WebCore::InspectorCanvasAgent::recordAction(v22, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v27, v26);
          }
        }
        if (v30)
        {
          v23 = (_DWORD *)v29[0];
          v29[0] = 0;
          if (v23)
          {
            if (*v23 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v23;
          }
        }
        v24 = v27;
        v27 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v20);
          else
            *(_DWORD *)v24 -= 2;
        }
      }
      else
      {
        v12 = v28[0];
      }
      WebCore::WebGL2RenderingContext::endQuery((WTF::StringImpl *)v11, v12);
      return 10;
    }
  }
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_getQuery(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  JSValue v20;
  WebCore::InspectorInstrumentation *v21;
  WebCore::ScriptExecutionContext *v22;
  uint64_t v23;
  WebCore::InspectorCanvasAgent *v24;
  WebCore::InspectorInstrumentation *v25;
  WebCore::ScriptExecutionContext *v26;
  uint64_t v27;
  WebCore::InspectorCanvasAgent *v28;
  WebCore::InspectorInstrumentation *v29;
  WebCore::ScriptExecutionContext *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  JSC::VM *v36;
  _QWORD v37[2];
  int v38;
  unsigned int v39[2];
  unsigned int v40[2];
  WTF::StringImpl *v41;
  _QWORD v42[2];
  uint64_t v43;
  _QWORD v44[2];
  uint64_t v45;
  WebCore *v46;
  uint64_t v47;
  WebCore *v48;
  uint64_t v49;
  WebCore *v50;
  uint64_t v51;
  WebCore *v52;
  uint64_t v53;
  WebCore *v54;
  uint64_t v55;
  WebCore *v56;
  uint64_t v57;
  WebCore *v58;
  uint64_t v59;
  WebCore *v60;
  uint64_t v61;
  WebCore *v62;
  uint64_t v63;
  WebCore *v64;
  uint64_t v65;
  WebCore *v66;
  uint64_t v67;
  WebCore *v68;
  uint64_t v69;
  WebCore *v70;
  uint64_t v71;
  WebCore *v72;
  uint64_t v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v36 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "getQuery");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "getQuery");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v20);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v40);
  if (v40[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v39);
  if (v39[1])
    return 0;
  if (*(_BYTE *)(v12 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v14 = v40[0];
    v21 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v21
      && (v23 = WebCore::InspectorInstrumentation::instrumentingAgents(v21, v22)) != 0
      && (v24 = *(WebCore::InspectorCanvasAgent **)(v23 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v24, (WebCore::CanvasRenderingContext *)(v12 + 8), v14, (uint64_t)v42);
    }
    else
    {
      LOBYTE(v42[0]) = 0;
      LOBYTE(v43) = 0;
    }
    v15 = v39[0];
    v25 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v25
      && (v27 = WebCore::InspectorInstrumentation::instrumentingAgents(v25, v26)) != 0
      && (v28 = *(WebCore::InspectorCanvasAgent **)(v27 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v28, (WebCore::CanvasRenderingContext *)(v12 + 8), v15, (uint64_t)v44);
    }
    else
    {
      LOBYTE(v44[0]) = 0;
      LOBYTE(v45) = 0;
    }
    v37[0] = v42;
    v37[1] = 2;
    v29 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v29)
    {
      v31 = WebCore::InspectorInstrumentation::instrumentingAgents(v29, v30);
      if (v31)
      {
        v32 = *(_QWORD *)(v31 + 96);
        if (v32)
          WebCore::InspectorCanvasAgent::recordAction(v32, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v41, v37);
      }
    }
    if ((_BYTE)v45)
    {
      v33 = (_DWORD *)v44[0];
      v44[0] = 0;
      if (v33)
      {
        if (*v33 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v33;
      }
    }
    if ((_BYTE)v43)
    {
      v34 = (_DWORD *)v42[0];
      v42[0] = 0;
      if (v34)
      {
        if (*v34 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v34;
      }
    }
    v35 = v41;
    v41 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v30);
      else
        *(_DWORD *)v35 -= 2;
    }
  }
  else
  {
    v14 = v40[0];
    v15 = v39[0];
  }
  v16 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  WebCore::WebGL2RenderingContext::getQuery((WTF::StringImpl *)v12, v14, v15, v13, v37);
  v42[0] = this;
  v42[1] = v16;
  v43 = v16;
  v44[0] = v16;
  v44[1] = this;
  v45 = v16;
  v46 = this;
  v47 = v16;
  v48 = this;
  v49 = v16;
  v50 = this;
  v51 = v16;
  v52 = this;
  v53 = v16;
  v54 = this;
  v55 = v16;
  v56 = this;
  v57 = v16;
  v58 = this;
  v59 = v16;
  v60 = this;
  v61 = v16;
  v62 = this;
  v63 = v16;
  v64 = this;
  v65 = v16;
  v66 = this;
  v67 = v16;
  v68 = this;
  v69 = v16;
  v70 = this;
  v71 = v16;
  v72 = this;
  v73 = v16;
  if (v38 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v41 = (WTF::StringImpl *)v42;
  v17 = ((uint64_t (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNS8_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS6_6StringENS6_6VectorIbLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSG_IiLm0ESH_Lm16ESI_EENSG_IjLm0ESH_Lm16ESI_EENS6_6RefPtrINS9_21GenericTypedArrayViewINS9_14Float32AdaptorEEENS6_12RawPtrTraitsISP_EENS6_21DefaultRefDerefTraitsISP_EEEENSM_INSN_INS9_12Int32AdaptorEEENSQ_ISW_EENSS_ISW_EEEENSM_INSN_INS9_13Uint32AdaptorEEENSQ_IS11_EENSS_IS11_EEEENSM_INSN_INS9_12Uint8AdaptorEEENSQ_IS16_EENSS_IS16_EEEENSM_INS8_11WebGLBufferENSQ_IS1A_EENSS_IS1A_EEEENSM_INS8_16WebGLFramebufferENSQ_IS1E_EENSS_IS1E_EEEENSM_INS8_12WebGLProgramENSQ_IS1I_EENSS_IS1I_EEEENSM_INS8_10WebGLQueryENSQ_IS1M_EENSS_IS1M_EEEENSM_INS8_17WebGLRenderbufferENSQ_IS1Q_EENSS_IS1Q_EEEENSM_INS8_12WebGLSamplerENSQ_IS1U_EENSS_IS1U_EEEENSM_INS8_12WebGLTextureENSQ_IS1Y_EENSS_IS1Y_EEEENSM_INS8_18WebGLTimerQueryEXTENSQ_IS22_EENSS_IS22_EEEENSM_INS8_22WebGLTransformFeedbackENSQ_IS26_EENSS_IS26_EEEENSM_INS8_22WebGLVertexArrayObjectENSQ_IS2A_EENSS_IS2A_EEEENSM_INS8_25WebGLVertexArrayObjectOESENSQ_IS2E_EENSS_IS2E_EEEEEEEE3__0JZNS8_16convertToJSValueESB_SD_S2K_E3__1ZNS8_16convertToJSValueESB_SD_S2K_E3__2ZNS8_16convertToJSValueESB_SD_S2K_E3__3ZNS8_16convertToJSValueESB_SD_S2K_E3__4ZNS8_16convertToJSValueESB_SD_S2K_E3__5ZNS8_16convertToJSValueESB_SD_S2K_E3__6ZNS8_16convertToJSValueESB_SD_S2K_E3__7ZNS8_16convertToJSValueESB_SD_S2K_E3__8ZNS8_16convertToJSValueESB_SD_S2K_E3__9ZNS8_16convertToJSValueESB_SD_S2K_E4__10ZNS8_16convertToJSValueESB_SD_S2K_E4__11ZNS8_16convertToJSValueESB_SD_S2K_E4__12ZNS8_16convertToJSValueESB_SD_S2K_E4__13ZNS8_16convertToJSValueESB_SD_S2K_E4__14ZNS8_16convertToJSValueESB_SD_S2K_E4__15ZNS8_16convertToJSValueESB_SD_S2K_E4__16ZNS8_16convertToJSValueESB_SD_S2K_E4__17ZNS8_16convertToJSValueESB_SD_S2K_E4__18ZNS8_16convertToJSValueESB_SD_S2K_E4__19ZNS8_16convertToJSValueESB_SD_S2K_E4__20ZNS8_16convertToJSValueESB_SD_S2K_E4__21ZNS8_16convertToJSValueESB_SD_S2K_E4__22ZNS8_16convertToJSValueESB_SD_S2K_E4__23ZNS8_16convertToJSValueESB_SD_S2K_E4__24ZNS8_16convertToJSValueESB_SD_S2K_E4__25EEEEEJRKNS0_6__implIJDnbijxyfSF_SJ_SK_SL_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_S2H_EEEEEEDcOT_DpOT0____fmatrix[v38])(&v41, v37);
  if (v38 != -1)
    off_1E332F3A8[v38](v42, v37);
  return (_BYTE *)v17;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_getQueryParameter(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  WebCore::WebGLQuery *v24;
  uint64_t v25;
  unsigned int v26;
  JSValue v29;
  WebCore::InspectorInstrumentation *v30;
  WebCore::ScriptExecutionContext *v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::InspectorInstrumentation *v34;
  WebCore::ScriptExecutionContext *v35;
  uint64_t v36;
  WebCore::InspectorCanvasAgent *v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  _DWORD *v43;
  WTF::StringImpl *v44;
  WebCore *v45;
  JSC::JSGlobalObject *v46;
  JSC::CallFrame *v47;
  JSC::VM *v48;
  _QWORD v49[2];
  int v50;
  unsigned int v51[2];
  WTF::StringImpl *v52;
  _QWORD v53[2];
  uint64_t v54;
  _QWORD v55[2];
  uint64_t v56;
  WebCore *v57;
  uint64_t v58;
  WebCore *v59;
  uint64_t v60;
  WebCore *v61;
  uint64_t v62;
  WebCore *v63;
  uint64_t v64;
  WebCore *v65;
  uint64_t v66;
  WebCore *v67;
  uint64_t v68;
  WebCore *v69;
  uint64_t v70;
  WebCore *v71;
  uint64_t v72;
  WebCore *v73;
  uint64_t v74;
  WebCore *v75;
  uint64_t v76;
  WebCore *v77;
  uint64_t v78;
  WebCore *v79;
  uint64_t v80;
  WebCore *v81;
  uint64_t v82;
  WebCore *v83;
  uint64_t v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v48 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v48, "WebGL2RenderingContext", "getQueryParameter");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v48, "WebGL2RenderingContext", "getQueryParameter");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v29.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v29);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v53[0] = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSWebGLQuery::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSWebGLQuery::s_info && v20 != 0);
  }
  if (!v19 || (v24 = *(WebCore::WebGLQuery **)(v17 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v53, 0, "query", 6, "WebGL2RenderingContext", 23, a8, "getQueryParameter", 18, "WebGLQuery", 11);
    return 0;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v51);
  if (v51[1])
    return 0;
  if (*(_BYTE *)(v16 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v30 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v30
      && (v32 = WebCore::InspectorInstrumentation::instrumentingAgents(v30, v31)) != 0
      && (v33 = *(_QWORD *)(v32 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v33, (WebCore::CanvasRenderingContext *)(v16 + 8), v24, (uint64_t)v53);
    }
    else
    {
      LOBYTE(v53[0]) = 0;
      LOBYTE(v54) = 0;
    }
    v26 = v51[0];
    v34 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v34
      && (v36 = WebCore::InspectorInstrumentation::instrumentingAgents(v34, v35)) != 0
      && (v37 = *(WebCore::InspectorCanvasAgent **)(v36 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v37, (WebCore::CanvasRenderingContext *)(v16 + 8), v26, (uint64_t)v55);
    }
    else
    {
      LOBYTE(v55[0]) = 0;
      LOBYTE(v56) = 0;
    }
    v49[0] = v53;
    v49[1] = 2;
    v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v38)
    {
      v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39);
      if (v40)
      {
        v41 = *(_QWORD *)(v40 + 96);
        if (v41)
          WebCore::InspectorCanvasAgent::recordAction(v41, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v52, v49);
      }
    }
    if ((_BYTE)v56)
    {
      v42 = (_DWORD *)v55[0];
      v55[0] = 0;
      if (v42)
      {
        if (*v42 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v42;
      }
    }
    if ((_BYTE)v54)
    {
      v43 = (_DWORD *)v53[0];
      v53[0] = 0;
      if (v43)
      {
        if (*v43 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v43;
      }
    }
    v44 = v52;
    v52 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v39);
      else
        *(_DWORD *)v44 -= 2;
    }
    v25 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
  }
  else
  {
    v25 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
    v26 = v51[0];
  }
  WebCore::WebGL2RenderingContext::getQueryParameter((WTF::StringImpl *)v16, v24, v26, (uint64_t)v49);
  v53[0] = this;
  v53[1] = v25;
  v54 = v25;
  v55[0] = v25;
  v55[1] = this;
  v56 = v25;
  v57 = this;
  v58 = v25;
  v59 = this;
  v60 = v25;
  v61 = this;
  v62 = v25;
  v63 = this;
  v64 = v25;
  v65 = this;
  v66 = v25;
  v67 = this;
  v68 = v25;
  v69 = this;
  v70 = v25;
  v71 = this;
  v72 = v25;
  v73 = this;
  v74 = v25;
  v75 = this;
  v76 = v25;
  v77 = this;
  v78 = v25;
  v79 = this;
  v80 = v25;
  v81 = this;
  v82 = v25;
  v83 = this;
  v84 = v25;
  if (v50 != -1)
  {
    v52 = (WTF::StringImpl *)v53;
    v23 = ((uint64_t (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNS8_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS6_6StringENS6_6VectorIbLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSG_IiLm0ESH_Lm16ESI_EENSG_IjLm0ESH_Lm16ESI_EENS6_6RefPtrINS9_21GenericTypedArrayViewINS9_14Float32AdaptorEEENS6_12RawPtrTraitsISP_EENS6_21DefaultRefDerefTraitsISP_EEEENSM_INSN_INS9_12Int32AdaptorEEENSQ_ISW_EENSS_ISW_EEEENSM_INSN_INS9_13Uint32AdaptorEEENSQ_IS11_EENSS_IS11_EEEENSM_INSN_INS9_12Uint8AdaptorEEENSQ_IS16_EENSS_IS16_EEEENSM_INS8_11WebGLBufferENSQ_IS1A_EENSS_IS1A_EEEENSM_INS8_16WebGLFramebufferENSQ_IS1E_EENSS_IS1E_EEEENSM_INS8_12WebGLProgramENSQ_IS1I_EENSS_IS1I_EEEENSM_INS8_10WebGLQueryENSQ_IS1M_EENSS_IS1M_EEEENSM_INS8_17WebGLRenderbufferENSQ_IS1Q_EENSS_IS1Q_EEEENSM_INS8_12WebGLSamplerENSQ_IS1U_EENSS_IS1U_EEEENSM_INS8_12WebGLTextureENSQ_IS1Y_EENSS_IS1Y_EEEENSM_INS8_18WebGLTimerQueryEXTENSQ_IS22_EENSS_IS22_EEEENSM_INS8_22WebGLTransformFeedbackENSQ_IS26_EENSS_IS26_EEEENSM_INS8_22WebGLVertexArrayObjectENSQ_IS2A_EENSS_IS2A_EEEENSM_INS8_25WebGLVertexArrayObjectOESENSQ_IS2E_EENSS_IS2E_EEEEEEEE3__0JZNS8_16convertToJSValueESB_SD_S2K_E3__1ZNS8_16convertToJSValueESB_SD_S2K_E3__2ZNS8_16convertToJSValueESB_SD_S2K_E3__3ZNS8_16convertToJSValueESB_SD_S2K_E3__4ZNS8_16convertToJSValueESB_SD_S2K_E3__5ZNS8_16convertToJSValueESB_SD_S2K_E3__6ZNS8_16convertToJSValueESB_SD_S2K_E3__7ZNS8_16convertToJSValueESB_SD_S2K_E3__8ZNS8_16convertToJSValueESB_SD_S2K_E3__9ZNS8_16convertToJSValueESB_SD_S2K_E4__10ZNS8_16convertToJSValueESB_SD_S2K_E4__11ZNS8_16convertToJSValueESB_SD_S2K_E4__12ZNS8_16convertToJSValueESB_SD_S2K_E4__13ZNS8_16convertToJSValueESB_SD_S2K_E4__14ZNS8_16convertToJSValueESB_SD_S2K_E4__15ZNS8_16convertToJSValueESB_SD_S2K_E4__16ZNS8_16convertToJSValueESB_SD_S2K_E4__17ZNS8_16convertToJSValueESB_SD_S2K_E4__18ZNS8_16convertToJSValueESB_SD_S2K_E4__19ZNS8_16convertToJSValueESB_SD_S2K_E4__20ZNS8_16convertToJSValueESB_SD_S2K_E4__21ZNS8_16convertToJSValueESB_SD_S2K_E4__22ZNS8_16convertToJSValueESB_SD_S2K_E4__23ZNS8_16convertToJSValueESB_SD_S2K_E4__24ZNS8_16convertToJSValueESB_SD_S2K_E4__25EEEEEJRKNS0_6__implIJDnbijxyfSF_SJ_SK_SL_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_S2H_EEEEEEDcOT_DpOT0____fmatrix[v50])(&v52, v49);
    if (v50 != -1)
      off_1E332F3A8[v50](v53, v49);
    return (_BYTE *)v23;
  }
  v45 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_createSampler(v45, v46, v47);
}

unint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_createSampler(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  WebCore::InspectorInstrumentation *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  unsigned int *v21[2];
  WTF::StringImpl *v22;

  v4 = *((_QWORD *)a2 + 5);
  v20 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "WebGL2RenderingContext", "createSampler");
  v5 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
  v6 = *(unsigned int *)(v5 + 0x4C);
  v7 = *(_DWORD *)(v5 + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "WebGL2RenderingContext", "createSampler");
  v11 = *(_QWORD *)(v4 + 24);
  if (*(_BYTE *)(v11 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v21[0] = 0;
    v21[1] = 0;
    v16 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
    if (v16)
    {
      v17 = WebCore::InspectorInstrumentation::instrumentingAgents(v16, a2);
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 96);
        if (v18)
          WebCore::InspectorCanvasAgent::recordAction(v18, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v22, v21);
      }
    }
    v19 = v22;
    v22 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, a2);
      else
        *(_DWORD *)v19 -= 2;
    }
    v5 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
  }
  if (*(_BYTE *)(v11 + 364))
    return 2;
  v13 = *(_QWORD *)(v5 + 40);
  WebCore::WebGLSampler::create((WebCore::WebGLSampler *)v11, a2, v21);
  v14 = v21[0];
  if (!v21[0])
    return 2;
  v12 = WebCore::wrap<WebCore::WebGLSampler>((uint64_t)this, v13, (WTF *)v21[0]);
  if (v14[2] == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
  else
    --v14[2];
  return v12;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_deleteSampler(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  WebCore::WebGLSampler *v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  int v26;
  uint64_t v27;
  WebCore::WebGLSampler **v28;
  uint64_t v29;
  WTF::Lock *v30;
  int v31;
  JSValue v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  uint64_t v36;
  WebCore::InspectorInstrumentation *v37;
  WebCore::ScriptExecutionContext *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  WTF::StringImpl *v42;
  unsigned __int8 *v43;
  _QWORD v44[2];
  WTF::StringImpl *v45;
  unsigned __int8 *v46;
  char v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v9 = (unsigned __int8 *)*((_QWORD *)this + 7);
  v43 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v43, "WebGL2RenderingContext", "deleteSampler");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v43, "WebGL2RenderingContext", "deleteSampler");
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v18 = 0;
    }
    else
    {
      v46 = v9;
      if ((v17 & 0xFFFE000000000002) != 0)
        goto LABEL_26;
      v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
      v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
      v21 = (char **)(16 * v19);
      if ((_DWORD)v19)
        v22 = v21 == &WebCore::JSWebGLSampler::s_info;
      else
        v22 = 1;
      if (!v22)
      {
        do
        {
          v21 = (char **)v21[2];
          v20 = v21 != 0;
        }
        while (v21 != &WebCore::JSWebGLSampler::s_info && v21 != 0);
      }
      if (!v20 || (v18 = *(WebCore::WebGLSampler **)(v17 + 24)) == 0)
      {
LABEL_26:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v46, 0, "sampler", 8, "WebGL2RenderingContext", 23, a8, "deleteSampler", 14, "WebGLSampler", 13);
        return 0;
      }
    }
    if (*(_BYTE *)(v16 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v33
        && (v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34)) != 0
        && (v36 = *(_QWORD *)(v35 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v36, (WebCore::CanvasRenderingContext *)(v16 + 8), v18, (uint64_t)&v46);
      }
      else
      {
        LOBYTE(v46) = 0;
        v48 = 0;
      }
      v44[0] = &v46;
      v44[1] = 1;
      v37 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v37)
      {
        v39 = WebCore::InspectorInstrumentation::instrumentingAgents(v37, v38);
        if (v39)
        {
          v40 = *(_QWORD *)(v39 + 96);
          if (v40)
            WebCore::InspectorCanvasAgent::recordAction(v40, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v45, v44);
        }
      }
      if (v48)
      {
        v41 = v46;
        v46 = 0;
        if (v41)
        {
          if (*(_DWORD *)v41 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v41;
        }
      }
      v42 = v45;
      v45 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, v38);
        else
          *(_DWORD *)v42 -= 2;
      }
    }
    v46 = (unsigned __int8 *)(v16 + 96);
    v47 = 1;
    if (__ldaxr((unsigned __int8 *)(v16 + 96)))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)(v16 + 96)))
    {
LABEL_33:
      v26 = WebCore::WebGLRenderingContextBase::deleteObject(v16, (uint64_t)&v46, v18);
      if (v18)
      {
        if (v26)
        {
          v27 = *(unsigned int *)(v16 + 1052);
          if ((_DWORD)v27)
          {
            v28 = *(WebCore::WebGLSampler ***)(v16 + 1040);
            v29 = 8 * v27;
            do
            {
              if (*v28 == v18)
              {
                *v28 = 0;
                if (*((_DWORD *)v18 + 2) == 1)
                  (*(void (**)(WebCore::WebGLSampler *))(*(_QWORD *)v18 + 8))(v18);
                else
                  --*((_DWORD *)v18 + 2);
              }
              ++v28;
              v29 -= 8;
            }
            while (v29);
          }
        }
      }
      if (!v47)
        return 10;
      v30 = (WTF::Lock *)v46;
      v31 = __ldxr(v46);
      if (v31 == 1)
      {
        if (!__stlxr(0, v46))
          return 10;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow(v30);
      return 10;
    }
    MEMORY[0x19AEA534C]();
    goto LABEL_33;
  }
  v32.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
  return JSC::VM::throwException((JSC::VM *)v9, this, v32);
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_isSampler(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v25;
  uint64_t v26;
  JSValue v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  JSC::VM *v38;
  _QWORD v39[2];
  WTF::StringImpl *v40;
  _QWORD v41[2];
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v38 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v38, "WebGL2RenderingContext", "isSampler");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v38, "WebGL2RenderingContext", "isSampler");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v27);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v18 = 0;
    }
    else
    {
      v41[0] = v9;
      if ((v17 & 0xFFFE000000000002) != 0)
        goto LABEL_26;
      v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
      v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
      v21 = (char **)(16 * v19);
      if ((_DWORD)v19)
        v22 = v21 == &WebCore::JSWebGLSampler::s_info;
      else
        v22 = 1;
      if (!v22)
      {
        do
        {
          v21 = (char **)v21[2];
          v20 = v21 != 0;
        }
        while (v21 != &WebCore::JSWebGLSampler::s_info && v21 != 0);
      }
      if (!v20 || (v18 = *(_QWORD *)(v17 + 24)) == 0)
      {
LABEL_26:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v41, 0, "sampler", 8, "WebGL2RenderingContext", 23, a8, "isSampler", 10, "WebGLSampler", 13);
        return 0;
      }
    }
    if (*(_BYTE *)(v16 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v28
        && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
        && (v31 = *(_QWORD *)(v30 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v31, (WebCore::CanvasRenderingContext *)(v16 + 8), (WebCore::WebGLSampler *)v18, (uint64_t)v41);
      }
      else
      {
        LOBYTE(v41[0]) = 0;
        v42 = 0;
      }
      v39[0] = v41;
      v39[1] = 1;
      v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v32)
      {
        v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33);
        if (v34)
        {
          v35 = *(_QWORD *)(v34 + 96);
          if (v35)
            WebCore::InspectorCanvasAgent::recordAction(v35, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v40, v39);
        }
      }
      if (v42)
      {
        v36 = (_DWORD *)v41[0];
        v41[0] = 0;
        if (v36)
        {
          if (*v36 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v36;
        }
      }
      v37 = v40;
      v40 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v33);
        else
          *(_DWORD *)v37 -= 2;
      }
    }
    if (!v18 || *(_BYTE *)(v16 + 364))
      return 6;
    v25 = *(_QWORD *)(v18 + 16);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 8);
      if (v26)
        v25 = v26 - 8;
      else
        v25 = 0;
    }
    if (v25 == v16
      && *(_DWORD *)(v18 + 24)
      && !*(_BYTE *)(v18 + 32)
      && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v16 + 88) + 1680))(*(_QWORD *)(v16 + 88)))
    {
      return 7;
    }
    else
    {
      return 6;
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_bindSampler(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::WebGLSampler *v15;
  uint64_t v16;
  _BOOL4 v17;
  char **v18;
  BOOL v19;
  uint64_t v22;
  JSValue v23;
  WebCore::InspectorInstrumentation *v24;
  WebCore::ScriptExecutionContext *v25;
  uint64_t v26;
  WebCore::InspectorCanvasAgent *v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  WTF::StringImpl *v38;
  JSC::VM *v39;
  _QWORD v40[2];
  WTF::StringImpl *v41;
  unsigned int v42[2];
  _QWORD v43[2];
  char v44;
  _DWORD *v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v39 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v39, "WebGL2RenderingContext", "bindSampler");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v39, "WebGL2RenderingContext", "bindSampler");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v23.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v23);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v42);
    if (v42[1])
    {
      return 0;
    }
    else
    {
      v14 = *((_QWORD *)a2 + 7);
      if ((v14 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
        v15 = 0;
      }
      else
      {
        v43[0] = *((_QWORD *)this + 7);
        if ((v14 & 0xFFFE000000000002) != 0)
          goto LABEL_27;
        v16 = *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C);
        v17 = *(_DWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C) != 0;
        v18 = (char **)(16 * v16);
        if ((_DWORD)v16)
          v19 = v18 == &WebCore::JSWebGLSampler::s_info;
        else
          v19 = 1;
        if (!v19)
        {
          do
          {
            v18 = (char **)v18[2];
            v17 = v18 != 0;
          }
          while (v18 != &WebCore::JSWebGLSampler::s_info && v18 != 0);
        }
        if (!v17 || (v15 = *(WebCore::WebGLSampler **)(v14 + 24)) == 0)
        {
LABEL_27:
          WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v43, 1, "sampler", 8, "WebGL2RenderingContext", 23, v13, "bindSampler", 12, "WebGLSampler", 13);
          return 0;
        }
      }
      if (*(_BYTE *)(v12 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v22 = v42[0];
        v24 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
        if (v24
          && (v26 = WebCore::InspectorInstrumentation::instrumentingAgents(v24, v25)) != 0
          && (v27 = *(WebCore::InspectorCanvasAgent **)(v26 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v27, (WebCore::CanvasRenderingContext *)(v12 + 8), v22, (uint64_t)v43);
        }
        else
        {
          LOBYTE(v43[0]) = 0;
          v44 = 0;
        }
        v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
        if (v28
          && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
          && (v31 = *(_QWORD *)(v30 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v31, (WebCore::CanvasRenderingContext *)(v12 + 8), v15, (uint64_t)&v45);
        }
        else
        {
          LOBYTE(v45) = 0;
          v46 = 0;
        }
        v40[0] = v43;
        v40[1] = 2;
        v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
        if (v32)
        {
          v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33);
          if (v34)
          {
            v35 = *(_QWORD *)(v34 + 96);
            if (v35)
              WebCore::InspectorCanvasAgent::recordAction(v35, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v41, v40);
          }
        }
        if (v46)
        {
          v36 = v45;
          v45 = 0;
          if (v36)
          {
            if (*v36 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v36;
          }
        }
        if (v44)
        {
          v37 = (_DWORD *)v43[0];
          v43[0] = 0;
          if (v37)
          {
            if (*v37 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v37;
          }
        }
        v38 = v41;
        v41 = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, v33);
          else
            *(_DWORD *)v38 -= 2;
        }
      }
      else
      {
        v22 = v42[0];
      }
      WebCore::WebGL2RenderingContext::bindSampler((WTF::StringImpl *)v12, v22, v15);
      return 10;
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_samplerParameteri(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v25;
  unint64_t v26;
  JSC::VM *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unint64_t v36;
  int v37;
  int v38;
  JSValue v39;
  WebCore::InspectorInstrumentation *v40;
  WebCore::ScriptExecutionContext *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  WebCore::InspectorInstrumentation *v45;
  WebCore::ScriptExecutionContext *v46;
  uint64_t v47;
  WebCore::InspectorCanvasAgent *v48;
  WebCore::InspectorInstrumentation *v49;
  WebCore::ScriptExecutionContext *v50;
  uint64_t v51;
  WebCore::InspectorCanvasAgent *v52;
  WebCore::InspectorInstrumentation *v53;
  WebCore::ScriptExecutionContext *v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  _DWORD *v58;
  _DWORD *v59;
  WTF::StringImpl *v60;
  unint64_t v61;
  JSC::VM *v62;
  _QWORD v63[2];
  WTF::StringImpl *v64;
  _DWORD v65[2];
  _QWORD v66[2];
  char v67;
  _DWORD *v68;
  char v69;
  _DWORD *v70;
  char v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v62 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v62, "WebGL2RenderingContext", "samplerParameteri");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v62, "WebGL2RenderingContext", "samplerParameteri");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v39.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v39);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v66[0] = v9;
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSWebGLSampler::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSWebGLSampler::s_info && v21 != 0);
  }
  if (!v20 || (v25 = *(_QWORD *)(v18 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v66, 0, "sampler", 8, "WebGL2RenderingContext", 23, a8, "samplerParameteri", 18, "WebGLSampler", 13);
    return 0;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v65);
  if (v65[1])
    return 0;
  v26 = *((_QWORD *)a2 + 8);
  v66[0] = v26;
  v27 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v26 < 0xFFFE000000000000)
  {
    v33 = v26 - 0x2000000000000;
    if (v26 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v66, this);
      v33 = v61;
    }
    v34 = (v33 >> 52) & 0x7FF;
    v35 = v34 - 1023;
    v36 = v33 >> (51 - (v33 >> 52));
    if (v34 > 0x433)
      LODWORD(v36) = v33 << ((v33 >> 52) - 51);
    if (v34 >= 0x41F)
      v37 = v36;
    else
      v37 = (((1 << ((v33 >> 52) + 1)) - 1) & v36) + (1 << ((v33 >> 52) + 1));
    if ((v33 & 0x8000000000000000) == 0)
      v38 = v37;
    else
      v38 = -v37;
    if (v35 <= 0x53)
      v28 = v38;
    else
      v28 = 0;
  }
  else
  {
    v28 = v26;
  }
  if (!*((_DWORD *)v27 + 20) || !JSC::VM::hasExceptionsAfterHandlingTraps(v27))
  {
    if (*(_BYTE *)(v17 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v40 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v40
        && (v42 = WebCore::InspectorInstrumentation::instrumentingAgents(v40, v41)) != 0
        && (v43 = *(_QWORD *)(v42 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v43, (WebCore::CanvasRenderingContext *)(v17 + 8), (WebCore::WebGLSampler *)v25, (uint64_t)v66);
      }
      else
      {
        LOBYTE(v66[0]) = 0;
        v67 = 0;
      }
      v44 = v65[0];
      v45 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v45
        && (v47 = WebCore::InspectorInstrumentation::instrumentingAgents(v45, v46)) != 0
        && (v48 = *(WebCore::InspectorCanvasAgent **)(v47 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v48, (WebCore::CanvasRenderingContext *)(v17 + 8), v44, (uint64_t)&v68);
      }
      else
      {
        LOBYTE(v68) = 0;
        v69 = 0;
      }
      v49 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v49
        && (v51 = WebCore::InspectorInstrumentation::instrumentingAgents(v49, v50)) != 0
        && (v52 = *(WebCore::InspectorCanvasAgent **)(v51 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v52, (WebCore::CanvasRenderingContext *)(v17 + 8), v28, (uint64_t)&v70);
      }
      else
      {
        LOBYTE(v70) = 0;
        v71 = 0;
      }
      v63[0] = v66;
      v63[1] = 3;
      v53 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v53)
      {
        v55 = WebCore::InspectorInstrumentation::instrumentingAgents(v53, v54);
        if (v55)
        {
          v56 = *(_QWORD *)(v55 + 96);
          if (v56)
            WebCore::InspectorCanvasAgent::recordAction(v56, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)&v64, v63);
        }
      }
      if (v71)
      {
        v57 = v70;
        v70 = 0;
        if (v57)
        {
          if (*v57 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v57;
        }
      }
      if (v69)
      {
        v58 = v68;
        v68 = 0;
        if (v58)
        {
          if (*v58 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v58;
        }
      }
      if (v67)
      {
        v59 = (_DWORD *)v66[0];
        v66[0] = 0;
        if (v59)
        {
          if (*v59 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v59;
        }
      }
      v60 = v64;
      v64 = 0;
      if (v60)
      {
        if (*(_DWORD *)v60 == 2)
          WTF::StringImpl::destroy(v60, v54);
        else
          *(_DWORD *)v60 -= 2;
      }
    }
    if (*(_BYTE *)(v17 + 364))
      return 10;
    v29 = *(_QWORD *)(v25 + 16);
    if (v29)
    {
      v30 = *(_QWORD *)(v29 + 8);
      if (v30)
        v29 = v30 - 8;
      else
        v29 = 0;
    }
    if (v29 == v17)
    {
      v31 = "attempt to use a deleted object";
      v32 = 32;
      if (*(_DWORD *)(v25 + 24) && !*(_BYTE *)(v25 + 32))
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(v17 + 88) + 1696))(*(_QWORD *)(v17 + 88));
        return 10;
      }
    }
    else
    {
      v31 = "object does not belong to this context";
      v32 = 39;
    }
    WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v17, 1282, (uint64_t)"samplerParameteri", 18, (uint64_t)v31, v32);
    return 10;
  }
  return 0;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_samplerParameterf(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v25;
  unint64_t v26;
  JSC::VM *v27;
  double v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  JSValue v34;
  int v35;
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  WebCore::InspectorInstrumentation *v41;
  WebCore::ScriptExecutionContext *v42;
  uint64_t v43;
  WebCore::InspectorCanvasAgent *v44;
  WebCore::InspectorInstrumentation *v45;
  WebCore::ScriptExecutionContext *v46;
  uint64_t v47;
  WebCore::InspectorCanvasAgent *v48;
  WebCore::InspectorInstrumentation *v49;
  WebCore::ScriptExecutionContext *v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  _DWORD *v54;
  _DWORD *v55;
  WTF::StringImpl *v56;
  double v57;
  JSC::VM *v58;
  _QWORD v59[2];
  WTF::StringImpl *v60;
  _DWORD v61[2];
  _QWORD v62[2];
  char v63;
  _DWORD *v64;
  char v65;
  _DWORD *v66;
  char v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v58 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v58, "WebGL2RenderingContext", "samplerParameterf");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v58, "WebGL2RenderingContext", "samplerParameterf");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v34.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v34);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v62[0] = v9;
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSWebGLSampler::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSWebGLSampler::s_info && v21 != 0);
  }
  if (!v20 || (v25 = *(_QWORD *)(v18 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v62, 0, "sampler", 8, "WebGL2RenderingContext", 23, a8, "samplerParameterf", 18, "WebGLSampler", 13);
    return 0;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v61);
  if (v61[1])
    return 0;
  v26 = *((_QWORD *)a2 + 8);
  v62[0] = v26;
  v27 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v26 >= 0xFFFE000000000000)
  {
    v28 = (double)(int)v26;
  }
  else if (v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
  {
    JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v62, this);
    v28 = v57;
  }
  else
  {
    *(_QWORD *)&v28 = v26 - 0x2000000000000;
  }
  if (!*((_DWORD *)v27 + 20) || (JSC::VM::hasExceptionsAfterHandlingTraps(v27) & 1) == 0)
  {
    if (v28 < -3.40282347e38)
    {
      *(float *)&v35 = -INFINITY;
    }
    else
    {
      if (v28 <= 3.40282347e38)
      {
        v29 = v28;
        goto LABEL_34;
      }
      *(float *)&v35 = INFINITY;
    }
    v29 = *(float *)&v35;
LABEL_34:
    if (*(_BYTE *)(v17 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v36
        && (v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37)) != 0
        && (v39 = *(_QWORD *)(v38 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v39, (WebCore::CanvasRenderingContext *)(v17 + 8), (WebCore::WebGLSampler *)v25, (uint64_t)v62);
      }
      else
      {
        LOBYTE(v62[0]) = 0;
        v63 = 0;
      }
      v40 = v61[0];
      v41 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v41
        && (v43 = WebCore::InspectorInstrumentation::instrumentingAgents(v41, v42)) != 0
        && (v44 = *(WebCore::InspectorCanvasAgent **)(v43 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v44, (WebCore::CanvasRenderingContext *)(v17 + 8), v40, (uint64_t)&v64);
      }
      else
      {
        LOBYTE(v64) = 0;
        v65 = 0;
      }
      v45 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v45
        && (v47 = WebCore::InspectorInstrumentation::instrumentingAgents(v45, v46)) != 0
        && (v48 = *(WebCore::InspectorCanvasAgent **)(v47 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v48, (WebCore::CanvasRenderingContext *)(v17 + 8), v29, (uint64_t)&v66);
      }
      else
      {
        LOBYTE(v66) = 0;
        v67 = 0;
      }
      v59[0] = v62;
      v59[1] = 3;
      v49 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
      if (v49)
      {
        v51 = WebCore::InspectorInstrumentation::instrumentingAgents(v49, v50);
        if (v51)
        {
          v52 = *(_QWORD *)(v51 + 96);
          if (v52)
            WebCore::InspectorCanvasAgent::recordAction(v52, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)&v60, v59);
        }
      }
      if (v67)
      {
        v53 = v66;
        v66 = 0;
        if (v53)
        {
          if (*v53 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v53;
        }
      }
      if (v65)
      {
        v54 = v64;
        v64 = 0;
        if (v54)
        {
          if (*v54 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v54;
        }
      }
      if (v63)
      {
        v55 = (_DWORD *)v62[0];
        v62[0] = 0;
        if (v55)
        {
          if (*v55 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v55;
        }
      }
      v56 = v60;
      v60 = 0;
      if (v56)
      {
        if (*(_DWORD *)v56 == 2)
          WTF::StringImpl::destroy(v56, v50);
        else
          *(_DWORD *)v56 -= 2;
      }
    }
    if (*(_BYTE *)(v17 + 364))
      return 10;
    v30 = *(_QWORD *)(v25 + 16);
    if (v30)
    {
      v31 = *(_QWORD *)(v30 + 8);
      if (v31)
        v30 = v31 - 8;
      else
        v30 = 0;
    }
    if (v30 == v17)
    {
      v32 = "attempt to use a deleted object";
      v33 = 32;
      if (*(_DWORD *)(v25 + 24) && !*(_BYTE *)(v25 + 32))
      {
        (*(void (**)(_QWORD, float))(**(_QWORD **)(v17 + 88) + 1704))(*(_QWORD *)(v17 + 88), v29);
        return 10;
      }
    }
    else
    {
      v32 = "object does not belong to this context";
      v33 = 39;
    }
    WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v17, 1282, (uint64_t)"samplerParameterf", 18, (uint64_t)v32, v33);
    return 10;
  }
  return 0;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_getSamplerParameter(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  WebCore::WebGLSampler *v24;
  uint64_t v25;
  unsigned int v26;
  JSValue v29;
  WebCore::InspectorInstrumentation *v30;
  WebCore::ScriptExecutionContext *v31;
  uint64_t v32;
  uint64_t v33;
  WebCore::InspectorInstrumentation *v34;
  WebCore::ScriptExecutionContext *v35;
  uint64_t v36;
  WebCore::InspectorCanvasAgent *v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  _DWORD *v43;
  WTF::StringImpl *v44;
  WebCore *v45;
  JSC::JSGlobalObject *v46;
  JSC::CallFrame *v47;
  JSC::VM *v48;
  _QWORD v49[2];
  int v50;
  unsigned int v51[2];
  WTF::StringImpl *v52;
  _QWORD v53[2];
  uint64_t v54;
  _QWORD v55[2];
  uint64_t v56;
  WebCore *v57;
  uint64_t v58;
  WebCore *v59;
  uint64_t v60;
  WebCore *v61;
  uint64_t v62;
  WebCore *v63;
  uint64_t v64;
  WebCore *v65;
  uint64_t v66;
  WebCore *v67;
  uint64_t v68;
  WebCore *v69;
  uint64_t v70;
  WebCore *v71;
  uint64_t v72;
  WebCore *v73;
  uint64_t v74;
  WebCore *v75;
  uint64_t v76;
  WebCore *v77;
  uint64_t v78;
  WebCore *v79;
  uint64_t v80;
  WebCore *v81;
  uint64_t v82;
  WebCore *v83;
  uint64_t v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v48 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v48, "WebGL2RenderingContext", "getSamplerParameter");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v48, "WebGL2RenderingContext", "getSamplerParameter");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v29.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v29);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v53[0] = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSWebGLSampler::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSWebGLSampler::s_info && v20 != 0);
  }
  if (!v19 || (v24 = *(WebCore::WebGLSampler **)(v17 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v53, 0, "sampler", 8, "WebGL2RenderingContext", 23, a8, "getSamplerParameter", 20, "WebGLSampler", 13);
    return 0;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v51);
  if (v51[1])
    return 0;
  if (*(_BYTE *)(v16 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v30 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v30
      && (v32 = WebCore::InspectorInstrumentation::instrumentingAgents(v30, v31)) != 0
      && (v33 = *(_QWORD *)(v32 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v33, (WebCore::CanvasRenderingContext *)(v16 + 8), v24, (uint64_t)v53);
    }
    else
    {
      LOBYTE(v53[0]) = 0;
      LOBYTE(v54) = 0;
    }
    v26 = v51[0];
    v34 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v34
      && (v36 = WebCore::InspectorInstrumentation::instrumentingAgents(v34, v35)) != 0
      && (v37 = *(WebCore::InspectorCanvasAgent **)(v36 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v37, (WebCore::CanvasRenderingContext *)(v16 + 8), v26, (uint64_t)v55);
    }
    else
    {
      LOBYTE(v55[0]) = 0;
      LOBYTE(v56) = 0;
    }
    v49[0] = v53;
    v49[1] = 2;
    v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v38)
    {
      v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39);
      if (v40)
      {
        v41 = *(_QWORD *)(v40 + 96);
        if (v41)
          WebCore::InspectorCanvasAgent::recordAction(v41, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v52, v49);
      }
    }
    if ((_BYTE)v56)
    {
      v42 = (_DWORD *)v55[0];
      v55[0] = 0;
      if (v42)
      {
        if (*v42 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v42;
      }
    }
    if ((_BYTE)v54)
    {
      v43 = (_DWORD *)v53[0];
      v53[0] = 0;
      if (v43)
      {
        if (*v43 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v43;
      }
    }
    v44 = v52;
    v52 = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, v39);
      else
        *(_DWORD *)v44 -= 2;
    }
    v25 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
  }
  else
  {
    v25 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
    v26 = v51[0];
  }
  WebCore::WebGL2RenderingContext::getSamplerParameter((WebCore::WebGL2RenderingContext *)v16, v24, v26, (float *)v49);
  v53[0] = this;
  v53[1] = v25;
  v54 = v25;
  v55[0] = v25;
  v55[1] = this;
  v56 = v25;
  v57 = this;
  v58 = v25;
  v59 = this;
  v60 = v25;
  v61 = this;
  v62 = v25;
  v63 = this;
  v64 = v25;
  v65 = this;
  v66 = v25;
  v67 = this;
  v68 = v25;
  v69 = this;
  v70 = v25;
  v71 = this;
  v72 = v25;
  v73 = this;
  v74 = v25;
  v75 = this;
  v76 = v25;
  v77 = this;
  v78 = v25;
  v79 = this;
  v80 = v25;
  v81 = this;
  v82 = v25;
  v83 = this;
  v84 = v25;
  if (v50 != -1)
  {
    v52 = (WTF::StringImpl *)v53;
    v23 = ((uint64_t (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNS8_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS6_6StringENS6_6VectorIbLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSG_IiLm0ESH_Lm16ESI_EENSG_IjLm0ESH_Lm16ESI_EENS6_6RefPtrINS9_21GenericTypedArrayViewINS9_14Float32AdaptorEEENS6_12RawPtrTraitsISP_EENS6_21DefaultRefDerefTraitsISP_EEEENSM_INSN_INS9_12Int32AdaptorEEENSQ_ISW_EENSS_ISW_EEEENSM_INSN_INS9_13Uint32AdaptorEEENSQ_IS11_EENSS_IS11_EEEENSM_INSN_INS9_12Uint8AdaptorEEENSQ_IS16_EENSS_IS16_EEEENSM_INS8_11WebGLBufferENSQ_IS1A_EENSS_IS1A_EEEENSM_INS8_16WebGLFramebufferENSQ_IS1E_EENSS_IS1E_EEEENSM_INS8_12WebGLProgramENSQ_IS1I_EENSS_IS1I_EEEENSM_INS8_10WebGLQueryENSQ_IS1M_EENSS_IS1M_EEEENSM_INS8_17WebGLRenderbufferENSQ_IS1Q_EENSS_IS1Q_EEEENSM_INS8_12WebGLSamplerENSQ_IS1U_EENSS_IS1U_EEEENSM_INS8_12WebGLTextureENSQ_IS1Y_EENSS_IS1Y_EEEENSM_INS8_18WebGLTimerQueryEXTENSQ_IS22_EENSS_IS22_EEEENSM_INS8_22WebGLTransformFeedbackENSQ_IS26_EENSS_IS26_EEEENSM_INS8_22WebGLVertexArrayObjectENSQ_IS2A_EENSS_IS2A_EEEENSM_INS8_25WebGLVertexArrayObjectOESENSQ_IS2E_EENSS_IS2E_EEEEEEEE3__0JZNS8_16convertToJSValueESB_SD_S2K_E3__1ZNS8_16convertToJSValueESB_SD_S2K_E3__2ZNS8_16convertToJSValueESB_SD_S2K_E3__3ZNS8_16convertToJSValueESB_SD_S2K_E3__4ZNS8_16convertToJSValueESB_SD_S2K_E3__5ZNS8_16convertToJSValueESB_SD_S2K_E3__6ZNS8_16convertToJSValueESB_SD_S2K_E3__7ZNS8_16convertToJSValueESB_SD_S2K_E3__8ZNS8_16convertToJSValueESB_SD_S2K_E3__9ZNS8_16convertToJSValueESB_SD_S2K_E4__10ZNS8_16convertToJSValueESB_SD_S2K_E4__11ZNS8_16convertToJSValueESB_SD_S2K_E4__12ZNS8_16convertToJSValueESB_SD_S2K_E4__13ZNS8_16convertToJSValueESB_SD_S2K_E4__14ZNS8_16convertToJSValueESB_SD_S2K_E4__15ZNS8_16convertToJSValueESB_SD_S2K_E4__16ZNS8_16convertToJSValueESB_SD_S2K_E4__17ZNS8_16convertToJSValueESB_SD_S2K_E4__18ZNS8_16convertToJSValueESB_SD_S2K_E4__19ZNS8_16convertToJSValueESB_SD_S2K_E4__20ZNS8_16convertToJSValueESB_SD_S2K_E4__21ZNS8_16convertToJSValueESB_SD_S2K_E4__22ZNS8_16convertToJSValueESB_SD_S2K_E4__23ZNS8_16convertToJSValueESB_SD_S2K_E4__24ZNS8_16convertToJSValueESB_SD_S2K_E4__25EEEEEJRKNS0_6__implIJDnbijxyfSF_SJ_SK_SL_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_S2H_EEEEEEDcOT_DpOT0____fmatrix[v50])(&v52, v49);
    if (v50 != -1)
      off_1E332F3A8[v50](v53, v49);
    return (_BYTE *)v23;
  }
  v45 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_fenceSync(v45, v46, v47);
}

unint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_fenceSync(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unint64_t v17;
  JSValue v20;
  WebCore::InspectorInstrumentation *v21;
  WebCore::ScriptExecutionContext *v22;
  uint64_t v23;
  WebCore::InspectorCanvasAgent *v24;
  WebCore::InspectorInstrumentation *v25;
  WebCore::ScriptExecutionContext *v26;
  uint64_t v27;
  WebCore::InspectorCanvasAgent *v28;
  WebCore::InspectorInstrumentation *v29;
  WebCore::ScriptExecutionContext *v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  unsigned int *v34;
  WTF::StringImpl *v35;
  JSC::VM *v36;
  _QWORD v37[2];
  WTF::StringImpl *v38;
  unsigned int v39[2];
  unsigned int v40[2];
  unsigned int *v41[2];
  char v42;
  _DWORD *v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v36 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "fenceSync");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "fenceSync");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v20.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v20);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v40);
  if (v40[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v39);
  if (v39[1])
    return 0;
  if (*(_BYTE *)(v12 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = v40[0];
    v21 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v21
      && (v23 = WebCore::InspectorInstrumentation::instrumentingAgents(v21, v22)) != 0
      && (v24 = *(WebCore::InspectorCanvasAgent **)(v23 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v24, (WebCore::CanvasRenderingContext *)(v12 + 8), v13, (uint64_t)v41);
    }
    else
    {
      LOBYTE(v41[0]) = 0;
      v42 = 0;
    }
    v14 = v39[0];
    v25 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v25
      && (v27 = WebCore::InspectorInstrumentation::instrumentingAgents(v25, v26)) != 0
      && (v28 = *(WebCore::InspectorCanvasAgent **)(v27 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v28, (WebCore::CanvasRenderingContext *)(v12 + 8), v14, (uint64_t)&v43);
    }
    else
    {
      LOBYTE(v43) = 0;
      v44 = 0;
    }
    v37[0] = v41;
    v37[1] = 2;
    v29 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v29)
    {
      v31 = WebCore::InspectorInstrumentation::instrumentingAgents(v29, v30);
      if (v31)
      {
        v32 = *(_QWORD *)(v31 + 96);
        if (v32)
          WebCore::InspectorCanvasAgent::recordAction(v32, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v38, v37);
      }
    }
    if (v44)
    {
      v33 = v43;
      v43 = 0;
      if (v33)
      {
        if (*v33 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v33;
      }
    }
    if (v42)
    {
      v34 = v41[0];
      v41[0] = 0;
      if (v34)
      {
        if (*v34 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v34;
      }
    }
    v35 = v38;
    v38 = 0;
    if (v35)
    {
      if (*(_DWORD *)v35 == 2)
        WTF::StringImpl::destroy(v35, v30);
      else
        *(_DWORD *)v35 -= 2;
    }
  }
  else
  {
    v13 = v40[0];
    v14 = v39[0];
  }
  v15 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  WebCore::WebGL2RenderingContext::fenceSync((_BYTE *)v12, v13, v14, v41);
  v16 = v41[0];
  if (!v41[0])
    return 2;
  v17 = WebCore::wrap<WebCore::WebGLSync>((uint64_t)this, v15, (WTF *)v41[0]);
  if (v16[2] == 1)
    (*(void (**)(unsigned int *))(*(_QWORD *)v16 + 8))(v16);
  else
    --v16[2];
  return v17;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_isSync(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v25;
  uint64_t v26;
  JSValue v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  JSC::VM *v38;
  _QWORD v39[2];
  WTF::StringImpl *v40;
  _QWORD v41[2];
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v38 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v38, "WebGL2RenderingContext", "isSync");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v38, "WebGL2RenderingContext", "isSync");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v27);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v18 = 0;
    }
    else
    {
      v41[0] = v9;
      if ((v17 & 0xFFFE000000000002) != 0)
        goto LABEL_26;
      v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
      v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
      v21 = (char **)(16 * v19);
      if ((_DWORD)v19)
        v22 = v21 == &WebCore::JSWebGLSync::s_info;
      else
        v22 = 1;
      if (!v22)
      {
        do
        {
          v21 = (char **)v21[2];
          v20 = v21 != 0;
        }
        while (v21 != &WebCore::JSWebGLSync::s_info && v21 != 0);
      }
      if (!v20 || (v18 = *(_QWORD *)(v17 + 24)) == 0)
      {
LABEL_26:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v41, 0, "sync", 5, "WebGL2RenderingContext", 23, a8, "isSync", 7, "WebGLSync", 10);
        return 0;
      }
    }
    if (*(_BYTE *)(v16 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v28
        && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
        && (v31 = *(_QWORD *)(v30 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v31, (WebCore::CanvasRenderingContext *)(v16 + 8), (WebCore::WebGLSync *)v18, (uint64_t)v41);
      }
      else
      {
        LOBYTE(v41[0]) = 0;
        v42 = 0;
      }
      v39[0] = v41;
      v39[1] = 1;
      v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v32)
      {
        v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33);
        if (v34)
        {
          v35 = *(_QWORD *)(v34 + 96);
          if (v35)
            WebCore::InspectorCanvasAgent::recordAction(v35, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v40, v39);
        }
      }
      if (v42)
      {
        v36 = (_DWORD *)v41[0];
        v41[0] = 0;
        if (v36)
        {
          if (*v36 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v36;
        }
      }
      v37 = v40;
      v40 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v33);
        else
          *(_DWORD *)v37 -= 2;
      }
    }
    if (!v18 || *(_BYTE *)(v16 + 364))
      return 6;
    v25 = *(_QWORD *)(v18 + 16);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 8);
      if (v26)
        v25 = v26 - 8;
      else
        v25 = 0;
    }
    if (v25 == v16 && *(_DWORD *)(v18 + 24) && !*(_BYTE *)(v18 + 32))
      return 7;
    else
      return 6;
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_deleteSync(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  WebCore::WebGLSync *v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  WTF::Lock *v26;
  int v27;
  JSValue v28;
  WebCore::InspectorInstrumentation *v29;
  WebCore::ScriptExecutionContext *v30;
  uint64_t v31;
  uint64_t v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  WTF::StringImpl *v38;
  unsigned __int8 *v39;
  _QWORD v40[2];
  WTF::StringImpl *v41;
  unsigned __int8 *v42;
  char v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v9 = (unsigned __int8 *)*((_QWORD *)this + 7);
  v39 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v39, "WebGL2RenderingContext", "deleteSync");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v39, "WebGL2RenderingContext", "deleteSync");
  if (*((_DWORD *)a2 + 8) != 1)
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v18 = 0;
    }
    else
    {
      v42 = v9;
      if ((v17 & 0xFFFE000000000002) != 0)
        goto LABEL_26;
      v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
      v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
      v21 = (char **)(16 * v19);
      if ((_DWORD)v19)
        v22 = v21 == &WebCore::JSWebGLSync::s_info;
      else
        v22 = 1;
      if (!v22)
      {
        do
        {
          v21 = (char **)v21[2];
          v20 = v21 != 0;
        }
        while (v21 != &WebCore::JSWebGLSync::s_info && v21 != 0);
      }
      if (!v20 || (v18 = *(WebCore::WebGLSync **)(v17 + 24)) == 0)
      {
LABEL_26:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v42, 0, "sync", 5, "WebGL2RenderingContext", 23, a8, "deleteSync", 11, "WebGLSync", 10);
        return 0;
      }
    }
    if (*(_BYTE *)(v16 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v29 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v29
        && (v31 = WebCore::InspectorInstrumentation::instrumentingAgents(v29, v30)) != 0
        && (v32 = *(_QWORD *)(v31 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v32, (WebCore::CanvasRenderingContext *)(v16 + 8), v18, (uint64_t)&v42);
      }
      else
      {
        LOBYTE(v42) = 0;
        v44 = 0;
      }
      v40[0] = &v42;
      v40[1] = 1;
      v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v33)
      {
        v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34);
        if (v35)
        {
          v36 = *(_QWORD *)(v35 + 96);
          if (v36)
            WebCore::InspectorCanvasAgent::recordAction(v36, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v41, v40);
        }
      }
      if (v44)
      {
        v37 = v42;
        v42 = 0;
        if (v37)
        {
          if (*(_DWORD *)v37 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v37;
        }
      }
      v38 = v41;
      v41 = 0;
      if (v38)
      {
        if (*(_DWORD *)v38 == 2)
          WTF::StringImpl::destroy(v38, v34);
        else
          *(_DWORD *)v38 -= 2;
      }
    }
    v42 = (unsigned __int8 *)(v16 + 96);
    v43 = 1;
    if (__ldaxr((unsigned __int8 *)(v16 + 96)))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)(v16 + 96)))
    {
      goto LABEL_33;
    }
    MEMORY[0x19AEA534C]();
LABEL_33:
    WebCore::WebGLRenderingContextBase::deleteObject(v16, (uint64_t)&v42, v18);
    if (v43)
    {
      v26 = (WTF::Lock *)v42;
      v27 = __ldxr(v42);
      if (v27 == 1)
      {
        if (!__stlxr(0, v42))
          return 10;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow(v26);
    }
    return 10;
  }
  v28.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
  return JSC::VM::throwException((JSC::VM *)v9, this, v28);
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_clientWaitSync(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  WebCore::WebGLSync *v25;
  unint64_t v26;
  uint64_t v27;
  JSC::VM *v28;
  double v29;
  double v30;
  unsigned int v31;
  unsigned int v32;
  JSValue v33;
  WebCore::InspectorInstrumentation *v34;
  WebCore::ScriptExecutionContext *v35;
  uint64_t v36;
  uint64_t v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  WebCore::InspectorCanvasAgent *v41;
  WebCore::InspectorInstrumentation *v42;
  WebCore::ScriptExecutionContext *v43;
  uint64_t v44;
  WebCore::InspectorCanvasAgent *v45;
  WebCore::InspectorInstrumentation *v46;
  WebCore::ScriptExecutionContext *v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  _DWORD *v51;
  _DWORD *v52;
  WTF::StringImpl *v53;
  char hasExceptionsAfterHandlingTraps;
  double v55;
  JSC::VM *v56;
  _QWORD v57[2];
  WTF::StringImpl *v58;
  unsigned int v59[2];
  _QWORD v60[2];
  char v61;
  _DWORD *v62;
  char v63;
  _DWORD *v64;
  char v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v56 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v56, "WebGL2RenderingContext", "clientWaitSync");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v56, "WebGL2RenderingContext", "clientWaitSync");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v33.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v33);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v60[0] = v9;
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSWebGLSync::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSWebGLSync::s_info && v21 != 0);
  }
  if (!v20 || (v25 = *(WebCore::WebGLSync **)(v18 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v60, 0, "sync", 5, "WebGL2RenderingContext", 23, a8, "clientWaitSync", 15, "WebGLSync", 10);
    return 0;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v59);
  if (v59[1])
    return 0;
  v26 = *((_QWORD *)a2 + 8);
  v60[0] = v26;
  if (v26 < 0xFFFE000000000000 || (v26 & 0x80000000) != 0)
  {
    v28 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v26 >= 0xFFFE000000000000)
    {
      v29 = (double)(int)v26;
    }
    else if (v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v60, this);
    }
    else
    {
      *(_QWORD *)&v29 = v26 - 0x2000000000000;
    }
    if (*((_DWORD *)v28 + 20))
    {
      v55 = v29;
      hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v28);
      v29 = v55;
      if ((hasExceptionsAfterHandlingTraps & 1) != 0)
        return 0;
    }
    if (fabs(v29) == INFINITY)
    {
      v27 = 0;
    }
    else
    {
      v30 = fmod(trunc(v29), 1.84467441e19);
      if (v30 >= 0.0)
        v27 = (unint64_t)v30;
      else
        v27 = -(uint64_t)(unint64_t)-v30;
    }
  }
  else
  {
    v27 = v26;
  }
  if (*(_BYTE *)(v17 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v34 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v34
      && (v36 = WebCore::InspectorInstrumentation::instrumentingAgents(v34, v35)) != 0
      && (v37 = *(_QWORD *)(v36 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v37, (WebCore::CanvasRenderingContext *)(v17 + 8), v25, (uint64_t)v60);
    }
    else
    {
      LOBYTE(v60[0]) = 0;
      v61 = 0;
    }
    v31 = v59[0];
    v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v38
      && (v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39)) != 0
      && (v41 = *(WebCore::InspectorCanvasAgent **)(v40 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v41, (WebCore::CanvasRenderingContext *)(v17 + 8), v31, (uint64_t)&v62);
    }
    else
    {
      LOBYTE(v62) = 0;
      v63 = 0;
    }
    v42 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v42
      && (v44 = WebCore::InspectorInstrumentation::instrumentingAgents(v42, v43)) != 0
      && (v45 = *(WebCore::InspectorCanvasAgent **)(v44 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v45, (WebCore::CanvasRenderingContext *)(v17 + 8), v27, (uint64_t)&v64);
    }
    else
    {
      LOBYTE(v64) = 0;
      v65 = 0;
    }
    v57[0] = v60;
    v57[1] = 3;
    v46 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v46)
    {
      v48 = WebCore::InspectorInstrumentation::instrumentingAgents(v46, v47);
      if (v48)
      {
        v49 = *(_QWORD *)(v48 + 96);
        if (v49)
          WebCore::InspectorCanvasAgent::recordAction(v49, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)&v58, v57);
      }
    }
    if (v65)
    {
      v50 = v64;
      v64 = 0;
      if (v50)
      {
        if (*v50 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v50;
      }
    }
    if (v63)
    {
      v51 = v62;
      v62 = 0;
      if (v51)
      {
        if (*v51 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v51;
      }
    }
    if (v61)
    {
      v52 = (_DWORD *)v60[0];
      v60[0] = 0;
      if (v52)
      {
        if (*v52 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v52;
      }
    }
    v53 = v58;
    v58 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
        WTF::StringImpl::destroy(v53, v47);
      else
        *(_DWORD *)v53 -= 2;
    }
  }
  else
  {
    v31 = v59[0];
  }
  v32 = WebCore::WebGL2RenderingContext::clientWaitSync((WebCore::WebGL2RenderingContext *)v17, v25, v31, v27);
  if ((v32 & 0x80000000) != 0)
    return (_BYTE *)(COERCE__INT64((double)v32) + 0x2000000000000);
  else
    return (_BYTE *)(v32 | 0xFFFE000000000000);
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_waitSync(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  JSC::VM *v28;
  double v29;
  double v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  WTF::StringImpl *v36;
  int v37;
  JSValue v38;
  WebCore::InspectorInstrumentation *v39;
  WebCore::ScriptExecutionContext *v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::InspectorInstrumentation *v43;
  WebCore::ScriptExecutionContext *v44;
  uint64_t v45;
  WebCore::InspectorCanvasAgent *v46;
  WebCore::InspectorInstrumentation *v47;
  WebCore::ScriptExecutionContext *v48;
  uint64_t v49;
  WebCore::InspectorCanvasAgent *v50;
  WebCore::InspectorInstrumentation *v51;
  WebCore::ScriptExecutionContext *v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v55;
  _DWORD *v56;
  _DWORD *v57;
  WTF::StringImpl *v58;
  char hasExceptionsAfterHandlingTraps;
  double v60;
  JSC::VM *v61;
  _QWORD v62[2];
  WTF::StringImpl *v63;
  _DWORD v64[2];
  _QWORD v65[2];
  char v66;
  _DWORD *v67;
  char v68;
  _DWORD *v69;
  char v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v61 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v61, "WebGL2RenderingContext", "waitSync");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v61, "WebGL2RenderingContext", "waitSync");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v38.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v38);
  }
  else
  {
    v17 = *(_QWORD *)(v10 + 24);
    v18 = *((_QWORD *)a2 + 6);
    v65[0] = v9;
    if ((v18 & 0xFFFE000000000002) != 0)
      goto LABEL_24;
    v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
    v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
    v21 = (char **)(16 * v19);
    if ((_DWORD)v19)
      v22 = v21 == &WebCore::JSWebGLSync::s_info;
    else
      v22 = 1;
    if (!v22)
    {
      do
      {
        v21 = (char **)v21[2];
        v20 = v21 != 0;
      }
      while (v21 != &WebCore::JSWebGLSync::s_info && v21 != 0);
    }
    if (!v20 || (v25 = *(_QWORD *)(v18 + 24)) == 0)
    {
LABEL_24:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v65, 0, "sync", 5, "WebGL2RenderingContext", 23, a8, "waitSync", 9, "WebGLSync", 10);
      return 0;
    }
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v64);
    if (v64[1])
    {
      return 0;
    }
    else
    {
      v26 = *((_QWORD *)a2 + 8);
      v65[0] = v26;
      if (v26 >= 0xFFFE000000000000)
      {
        v27 = (int)v26;
        goto LABEL_37;
      }
      v28 = (JSC::VM *)*((_QWORD *)this + 7);
      if (v26 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v65, this);
      else
        *(_QWORD *)&v29 = v26 - 0x2000000000000;
      if (!*((_DWORD *)v28 + 20)
        || (v60 = v29,
            hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v28),
            v29 = v60,
            (hasExceptionsAfterHandlingTraps & 1) == 0))
      {
        if (fabs(v29) == INFINITY)
        {
          v27 = 0;
        }
        else
        {
          v30 = fmod(trunc(v29), 1.84467441e19);
          if (v30 >= 0.0)
            v27 = (unint64_t)v30;
          else
            v27 = -(uint64_t)(unint64_t)-v30;
        }
LABEL_37:
        if (*(_BYTE *)(v17 + 33))
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v39 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
          if (v39
            && (v41 = WebCore::InspectorInstrumentation::instrumentingAgents(v39, v40)) != 0
            && (v42 = *(_QWORD *)(v41 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v42, (WebCore::CanvasRenderingContext *)(v17 + 8), (WebCore::WebGLSync *)v25, (uint64_t)v65);
          }
          else
          {
            LOBYTE(v65[0]) = 0;
            v66 = 0;
          }
          v31 = v64[0];
          v43 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
          if (v43
            && (v45 = WebCore::InspectorInstrumentation::instrumentingAgents(v43, v44)) != 0
            && (v46 = *(WebCore::InspectorCanvasAgent **)(v45 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v46, (WebCore::CanvasRenderingContext *)(v17 + 8), v31, (uint64_t)&v67);
          }
          else
          {
            LOBYTE(v67) = 0;
            v68 = 0;
          }
          v47 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
          if (v47
            && (v49 = WebCore::InspectorInstrumentation::instrumentingAgents(v47, v48)) != 0
            && (v50 = *(WebCore::InspectorCanvasAgent **)(v49 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v50, (WebCore::CanvasRenderingContext *)(v17 + 8), v27, (uint64_t)&v69);
          }
          else
          {
            LOBYTE(v69) = 0;
            v70 = 0;
          }
          v62[0] = v65;
          v62[1] = 3;
          v51 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
          if (v51)
          {
            v53 = WebCore::InspectorInstrumentation::instrumentingAgents(v51, v52);
            if (v53)
            {
              v54 = *(_QWORD *)(v53 + 96);
              if (v54)
                WebCore::InspectorCanvasAgent::recordAction(v54, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)&v63, v62);
            }
          }
          if (v70)
          {
            v55 = v69;
            v69 = 0;
            if (v55)
            {
              if (*v55 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v55;
            }
          }
          if (v68)
          {
            v56 = v67;
            v67 = 0;
            if (v56)
            {
              if (*v56 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v56;
            }
          }
          if (v66)
          {
            v57 = (_DWORD *)v65[0];
            v65[0] = 0;
            if (v57)
            {
              if (*v57 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v57;
            }
          }
          v58 = v63;
          v63 = 0;
          if (v58)
          {
            if (*(_DWORD *)v58 == 2)
              WTF::StringImpl::destroy(v58, v52);
            else
              *(_DWORD *)v58 -= 2;
          }
        }
        else
        {
          v31 = v64[0];
        }
        if (*(_BYTE *)(v17 + 364))
          return 10;
        v32 = *(_QWORD *)(v25 + 16);
        if (v32)
        {
          v33 = *(_QWORD *)(v32 + 8);
          if (v33)
            v32 = v33 - 8;
          else
            v32 = 0;
        }
        if (v32 == v17)
        {
          v34 = "attempt to use a deleted object";
          v35 = 32;
          if (*(_DWORD *)(v25 + 24) && !*(_BYTE *)(v25 + 32))
          {
            if (v31)
            {
              v34 = "flags must be zero";
              v36 = (WTF::StringImpl *)v17;
              v37 = 1281;
              v35 = 19;
            }
            else
            {
              if (v27 == -1)
                return 10;
              v34 = "invalid timeout";
              v36 = (WTF::StringImpl *)v17;
              v37 = 1281;
              v35 = 16;
            }
LABEL_47:
            WebCore::WebGLRenderingContextBase::synthesizeGLError(v36, v37, (uint64_t)"waitSync", 9, (uint64_t)v34, v35);
            return 10;
          }
        }
        else
        {
          v34 = "object does not belong to this context";
          v35 = 39;
        }
        v36 = (WTF::StringImpl *)v17;
        v37 = 1282;
        goto LABEL_47;
      }
      return 0;
    }
  }
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_getSyncParameter(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  int v32;
  int v33;
  unsigned int v35;
  int v36;
  JSValue v38;
  WebCore::InspectorInstrumentation *v39;
  WebCore::ScriptExecutionContext *v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::InspectorInstrumentation *v43;
  WebCore::ScriptExecutionContext *v44;
  uint64_t v45;
  WebCore::InspectorCanvasAgent *v46;
  WebCore::InspectorInstrumentation *v47;
  WebCore::ScriptExecutionContext *v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  _DWORD *v52;
  WTF::StringImpl *v53;
  JSC::VM *v54;
  _QWORD v55[2];
  int v56;
  _DWORD v57[2];
  WTF::StringImpl *v58;
  _QWORD v59[2];
  uint64_t v60;
  _QWORD v61[2];
  uint64_t v62;
  WebCore *v63;
  uint64_t v64;
  WebCore *v65;
  uint64_t v66;
  WebCore *v67;
  uint64_t v68;
  WebCore *v69;
  uint64_t v70;
  WebCore *v71;
  uint64_t v72;
  WebCore *v73;
  uint64_t v74;
  WebCore *v75;
  uint64_t v76;
  WebCore *v77;
  uint64_t v78;
  WebCore *v79;
  uint64_t v80;
  WebCore *v81;
  uint64_t v82;
  WebCore *v83;
  uint64_t v84;
  WebCore *v85;
  uint64_t v86;
  WebCore *v87;
  uint64_t v88;
  WebCore *v89;
  uint64_t v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v54 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v54, "WebGL2RenderingContext", "getSyncParameter");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v54, "WebGL2RenderingContext", "getSyncParameter");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v38.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v38);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v59[0] = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSWebGLSync::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSWebGLSync::s_info && v20 != 0);
  }
  if (!v19 || (v24 = *(_QWORD *)(v17 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v59, 0, "sync", 5, "WebGL2RenderingContext", 23, a8, "getSyncParameter", 17, "WebGLSync", 10);
    return 0;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v57);
  if (v57[1])
    return 0;
  if (*(_BYTE *)(v16 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v39 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v39
      && (v41 = WebCore::InspectorInstrumentation::instrumentingAgents(v39, v40)) != 0
      && (v42 = *(_QWORD *)(v41 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v42, (WebCore::CanvasRenderingContext *)(v16 + 8), (WebCore::WebGLSync *)v24, (uint64_t)v59);
    }
    else
    {
      LOBYTE(v59[0]) = 0;
      LOBYTE(v60) = 0;
    }
    v26 = v57[0];
    v43 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v43
      && (v45 = WebCore::InspectorInstrumentation::instrumentingAgents(v43, v44)) != 0
      && (v46 = *(WebCore::InspectorCanvasAgent **)(v45 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v46, (WebCore::CanvasRenderingContext *)(v16 + 8), v26, (uint64_t)v61);
    }
    else
    {
      LOBYTE(v61[0]) = 0;
      LOBYTE(v62) = 0;
    }
    v55[0] = v59;
    v55[1] = 2;
    v47 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v47)
    {
      v49 = WebCore::InspectorInstrumentation::instrumentingAgents(v47, v48);
      if (v49)
      {
        v50 = *(_QWORD *)(v49 + 96);
        if (v50)
          WebCore::InspectorCanvasAgent::recordAction(v50, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v58, v55);
      }
    }
    if ((_BYTE)v62)
    {
      v51 = (_DWORD *)v61[0];
      v61[0] = 0;
      if (v51)
      {
        if (*v51 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v51;
      }
    }
    if ((_BYTE)v60)
    {
      v52 = (_DWORD *)v59[0];
      v59[0] = 0;
      if (v52)
      {
        if (*v52 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v52;
      }
    }
    v53 = v58;
    v58 = 0;
    if (v53)
    {
      if (*(_DWORD *)v53 == 2)
        WTF::StringImpl::destroy(v53, v48);
      else
        *(_DWORD *)v53 -= 2;
    }
    v25 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
  }
  else
  {
    v25 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
    v26 = v57[0];
  }
  if (*(_BYTE *)(v16 + 364))
    goto LABEL_38;
  v27 = *(_QWORD *)(v24 + 16);
  if (v27)
  {
    v28 = *(_QWORD *)(v27 + 8);
    if (v28)
      v27 = v28 - 8;
    else
      v27 = 0;
  }
  if (v27 == v16)
  {
    v29 = "attempt to use a deleted object";
    v30 = 32;
    if (*(_DWORD *)(v24 + 24) && !*(_BYTE *)(v24 + 32))
    {
      v35 = v26 - 37138;
      if (v35 <= 3)
      {
        WebCore::WebGLSync::updateCache(v24, (WebCore::WebGLRenderingContextBase *)v16);
        v36 = 37142;
        switch(v35)
        {
          case 0u:
            break;
          case 1u:
            v36 = 37143;
            break;
          case 2u:
            v36 = *(_DWORD *)(v24 + 36);
            break;
          default:
            v36 = 0;
            break;
        }
        LODWORD(v55[0]) = v36;
        v33 = 2;
        goto LABEL_39;
      }
      v29 = "invalid parameter name";
      v31 = (WTF::StringImpl *)v16;
      v32 = 1280;
      v30 = 23;
      goto LABEL_37;
    }
  }
  else
  {
    v29 = "object does not belong to this context";
    v30 = 39;
  }
  v31 = (WTF::StringImpl *)v16;
  v32 = 1282;
LABEL_37:
  WebCore::WebGLRenderingContextBase::synthesizeGLError(v31, v32, (uint64_t)"getSyncParameter", 17, (uint64_t)v29, v30);
LABEL_38:
  v33 = 0;
  v55[0] = 0;
LABEL_39:
  v56 = v33;
  v59[0] = this;
  v59[1] = v25;
  v60 = v25;
  v61[0] = v25;
  v61[1] = this;
  v62 = v25;
  v63 = this;
  v64 = v25;
  v65 = this;
  v66 = v25;
  v67 = this;
  v68 = v25;
  v69 = this;
  v70 = v25;
  v71 = this;
  v72 = v25;
  v73 = this;
  v74 = v25;
  v75 = this;
  v76 = v25;
  v77 = this;
  v78 = v25;
  v79 = this;
  v80 = v25;
  v81 = this;
  v82 = v25;
  v83 = this;
  v84 = v25;
  v85 = this;
  v86 = v25;
  v87 = this;
  v88 = v25;
  v89 = this;
  v90 = v25;
  v58 = (WTF::StringImpl *)v59;
  v23 = ((uint64_t (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNS8_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS6_6StringENS6_6VectorIbLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSG_IiLm0ESH_Lm16ESI_EENSG_IjLm0ESH_Lm16ESI_EENS6_6RefPtrINS9_21GenericTypedArrayViewINS9_14Float32AdaptorEEENS6_12RawPtrTraitsISP_EENS6_21DefaultRefDerefTraitsISP_EEEENSM_INSN_INS9_12Int32AdaptorEEENSQ_ISW_EENSS_ISW_EEEENSM_INSN_INS9_13Uint32AdaptorEEENSQ_IS11_EENSS_IS11_EEEENSM_INSN_INS9_12Uint8AdaptorEEENSQ_IS16_EENSS_IS16_EEEENSM_INS8_11WebGLBufferENSQ_IS1A_EENSS_IS1A_EEEENSM_INS8_16WebGLFramebufferENSQ_IS1E_EENSS_IS1E_EEEENSM_INS8_12WebGLProgramENSQ_IS1I_EENSS_IS1I_EEEENSM_INS8_10WebGLQueryENSQ_IS1M_EENSS_IS1M_EEEENSM_INS8_17WebGLRenderbufferENSQ_IS1Q_EENSS_IS1Q_EEEENSM_INS8_12WebGLSamplerENSQ_IS1U_EENSS_IS1U_EEEENSM_INS8_12WebGLTextureENSQ_IS1Y_EENSS_IS1Y_EEEENSM_INS8_18WebGLTimerQueryEXTENSQ_IS22_EENSS_IS22_EEEENSM_INS8_22WebGLTransformFeedbackENSQ_IS26_EENSS_IS26_EEEENSM_INS8_22WebGLVertexArrayObjectENSQ_IS2A_EENSS_IS2A_EEEENSM_INS8_25WebGLVertexArrayObjectOESENSQ_IS2E_EENSS_IS2E_EEEEEEEE3__0JZNS8_16convertToJSValueESB_SD_S2K_E3__1ZNS8_16convertToJSValueESB_SD_S2K_E3__2ZNS8_16convertToJSValueESB_SD_S2K_E3__3ZNS8_16convertToJSValueESB_SD_S2K_E3__4ZNS8_16convertToJSValueESB_SD_S2K_E3__5ZNS8_16convertToJSValueESB_SD_S2K_E3__6ZNS8_16convertToJSValueESB_SD_S2K_E3__7ZNS8_16convertToJSValueESB_SD_S2K_E3__8ZNS8_16convertToJSValueESB_SD_S2K_E3__9ZNS8_16convertToJSValueESB_SD_S2K_E4__10ZNS8_16convertToJSValueESB_SD_S2K_E4__11ZNS8_16convertToJSValueESB_SD_S2K_E4__12ZNS8_16convertToJSValueESB_SD_S2K_E4__13ZNS8_16convertToJSValueESB_SD_S2K_E4__14ZNS8_16convertToJSValueESB_SD_S2K_E4__15ZNS8_16convertToJSValueESB_SD_S2K_E4__16ZNS8_16convertToJSValueESB_SD_S2K_E4__17ZNS8_16convertToJSValueESB_SD_S2K_E4__18ZNS8_16convertToJSValueESB_SD_S2K_E4__19ZNS8_16convertToJSValueESB_SD_S2K_E4__20ZNS8_16convertToJSValueESB_SD_S2K_E4__21ZNS8_16convertToJSValueESB_SD_S2K_E4__22ZNS8_16convertToJSValueESB_SD_S2K_E4__23ZNS8_16convertToJSValueESB_SD_S2K_E4__24ZNS8_16convertToJSValueESB_SD_S2K_E4__25EEEEEJRKNS0_6__implIJDnbijxyfSF_SJ_SK_SL_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_S2H_EEEEEEDcOT_DpOT0____fmatrix[v33])(&v58, v55);
  if (v56 != -1)
    off_1E332F3A8[v56](v59, v55);
  return (_BYTE *)v23;
}

unint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_createTransformFeedback(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  WTF *v14;
  WebCore::InspectorInstrumentation *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF *v21[2];
  WTF::StringImpl *v22;

  v4 = *((_QWORD *)a2 + 5);
  v20 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "WebGL2RenderingContext", "createTransformFeedback");
  v5 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
  v6 = *(unsigned int *)(v5 + 0x4C);
  v7 = *(_DWORD *)(v5 + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "WebGL2RenderingContext", "createTransformFeedback");
  v11 = *(_QWORD *)(v4 + 24);
  if (*(_BYTE *)(v11 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v21[0] = 0;
    v21[1] = 0;
    v16 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
    if (v16)
    {
      v17 = WebCore::InspectorInstrumentation::instrumentingAgents(v16, a2);
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 96);
        if (v18)
          WebCore::InspectorCanvasAgent::recordAction(v18, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v22, v21);
      }
    }
    v19 = v22;
    v22 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, a2);
      else
        *(_DWORD *)v19 -= 2;
    }
    v5 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
  }
  if (*(_BYTE *)(v11 + 364))
    return 2;
  v13 = *(_QWORD *)(v5 + 40);
  WebCore::WebGLTransformFeedback::create((WebCore::WebGLTransformFeedback *)v11, a2, (uint64_t *)v21);
  v14 = v21[0];
  if (!v21[0])
    return 2;
  v12 = WebCore::wrap<WebCore::WebGLTransformFeedback>((uint64_t)this, v13, v21[0]);
  if (*((_DWORD *)v14 + 2) == 1)
    (*(void (**)(WTF *))(*(_QWORD *)v14 + 8))(v14);
  else
    --*((_DWORD *)v14 + 2);
  return v12;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_deleteTransformFeedback(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  WebCore::WebGLTransformFeedback *v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  JSValue v25;
  WebCore::InspectorInstrumentation *v26;
  WebCore::ScriptExecutionContext *v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::InspectorInstrumentation *v30;
  WebCore::ScriptExecutionContext *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  JSC::VM *v36;
  _QWORD v37[2];
  WTF::StringImpl *v38;
  _QWORD v39[2];
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v36 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "deleteTransformFeedback");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "deleteTransformFeedback");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v25);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v18 = 0;
    }
    else
    {
      v39[0] = v9;
      if ((v17 & 0xFFFE000000000002) != 0)
        goto LABEL_26;
      v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
      v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
      v21 = (char **)(16 * v19);
      if ((_DWORD)v19)
        v22 = v21 == &WebCore::JSWebGLTransformFeedback::s_info;
      else
        v22 = 1;
      if (!v22)
      {
        do
        {
          v21 = (char **)v21[2];
          v20 = v21 != 0;
        }
        while (v21 != &WebCore::JSWebGLTransformFeedback::s_info && v21 != 0);
      }
      if (!v20 || (v18 = *(WebCore::WebGLTransformFeedback **)(v17 + 24)) == 0)
      {
LABEL_26:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v39, 0, "id", 3, "WebGL2RenderingContext", 23, a8, "deleteTransformFeedback", 24, "WebGLTransformFeedback", 23);
        return 0;
      }
    }
    if (*(_BYTE *)(v16 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v26 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v26
        && (v28 = WebCore::InspectorInstrumentation::instrumentingAgents(v26, v27)) != 0
        && (v29 = *(_QWORD *)(v28 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v29, (WebCore::CanvasRenderingContext *)(v16 + 8), v18, (uint64_t)v39);
      }
      else
      {
        LOBYTE(v39[0]) = 0;
        v40 = 0;
      }
      v37[0] = v39;
      v37[1] = 1;
      v30 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v30)
      {
        v32 = WebCore::InspectorInstrumentation::instrumentingAgents(v30, v31);
        if (v32)
        {
          v33 = *(_QWORD *)(v32 + 96);
          if (v33)
            WebCore::InspectorCanvasAgent::recordAction(v33, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v38, v37);
        }
      }
      if (v40)
      {
        v34 = (_DWORD *)v39[0];
        v39[0] = 0;
        if (v34)
        {
          if (*v34 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v34;
        }
      }
      v35 = v38;
      v38 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v31);
        else
          *(_DWORD *)v35 -= 2;
      }
    }
    WebCore::WebGL2RenderingContext::deleteTransformFeedback((WebCore::WebGL2RenderingContext *)v16, v18);
    return 10;
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_isTransformFeedback(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v25;
  uint64_t v26;
  JSValue v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  JSC::VM *v38;
  _QWORD v39[2];
  WTF::StringImpl *v40;
  _QWORD v41[2];
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v38 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v38, "WebGL2RenderingContext", "isTransformFeedback");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v38, "WebGL2RenderingContext", "isTransformFeedback");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v27);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v18 = 0;
    }
    else
    {
      v41[0] = v9;
      if ((v17 & 0xFFFE000000000002) != 0)
        goto LABEL_26;
      v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
      v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
      v21 = (char **)(16 * v19);
      if ((_DWORD)v19)
        v22 = v21 == &WebCore::JSWebGLTransformFeedback::s_info;
      else
        v22 = 1;
      if (!v22)
      {
        do
        {
          v21 = (char **)v21[2];
          v20 = v21 != 0;
        }
        while (v21 != &WebCore::JSWebGLTransformFeedback::s_info && v21 != 0);
      }
      if (!v20 || (v18 = *(_QWORD *)(v17 + 24)) == 0)
      {
LABEL_26:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v41, 0, "id", 3, "WebGL2RenderingContext", 23, a8, "isTransformFeedback", 20, "WebGLTransformFeedback", 23);
        return 0;
      }
    }
    if (*(_BYTE *)(v16 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v28
        && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
        && (v31 = *(_QWORD *)(v30 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v31, (WebCore::CanvasRenderingContext *)(v16 + 8), (WebCore::WebGLTransformFeedback *)v18, (uint64_t)v41);
      }
      else
      {
        LOBYTE(v41[0]) = 0;
        v42 = 0;
      }
      v39[0] = v41;
      v39[1] = 1;
      v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v32)
      {
        v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33);
        if (v34)
        {
          v35 = *(_QWORD *)(v34 + 96);
          if (v35)
            WebCore::InspectorCanvasAgent::recordAction(v35, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v40, v39);
        }
      }
      if (v42)
      {
        v36 = (_DWORD *)v41[0];
        v41[0] = 0;
        if (v36)
        {
          if (*v36 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v36;
        }
      }
      v37 = v40;
      v40 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v33);
        else
          *(_DWORD *)v37 -= 2;
      }
    }
    if (!v18 || *(_BYTE *)(v16 + 364))
      return 6;
    v25 = *(_QWORD *)(v18 + 16);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 8);
      if (v26)
        v25 = v26 - 8;
      else
        v25 = 0;
    }
    if (v25 == v16
      && *(_DWORD *)(v18 + 24)
      && !*(_BYTE *)(v18 + 32)
      && *(_BYTE *)(v18 + 35)
      && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v16 + 88) + 1792))(*(_QWORD *)(v16 + 88)))
    {
      return 7;
    }
    else
    {
      return 6;
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_bindTransformFeedback(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::WebGLTransformFeedback *v15;
  uint64_t v16;
  _BOOL4 v17;
  char **v18;
  BOOL v19;
  unsigned int v22;
  JSValue v23;
  WebCore::InspectorInstrumentation *v24;
  WebCore::ScriptExecutionContext *v25;
  uint64_t v26;
  WebCore::InspectorCanvasAgent *v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  WTF::StringImpl *v38;
  JSC::VM *v39;
  _QWORD v40[2];
  WTF::StringImpl *v41;
  unsigned int v42[2];
  _QWORD v43[2];
  char v44;
  _DWORD *v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v39 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v39, "WebGL2RenderingContext", "bindTransformFeedback");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v39, "WebGL2RenderingContext", "bindTransformFeedback");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v23.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v23);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v42);
    if (v42[1])
    {
      return 0;
    }
    else
    {
      v14 = *((_QWORD *)a2 + 7);
      if ((v14 & 0xFFFFFFFFFFFFFFF7) == 2)
      {
        v15 = 0;
      }
      else
      {
        v43[0] = *((_QWORD *)this + 7);
        if ((v14 & 0xFFFE000000000002) != 0)
          goto LABEL_27;
        v16 = *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C);
        v17 = *(_DWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C) != 0;
        v18 = (char **)(16 * v16);
        if ((_DWORD)v16)
          v19 = v18 == &WebCore::JSWebGLTransformFeedback::s_info;
        else
          v19 = 1;
        if (!v19)
        {
          do
          {
            v18 = (char **)v18[2];
            v17 = v18 != 0;
          }
          while (v18 != &WebCore::JSWebGLTransformFeedback::s_info && v18 != 0);
        }
        if (!v17 || (v15 = *(WebCore::WebGLTransformFeedback **)(v14 + 24)) == 0)
        {
LABEL_27:
          WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v43, 1, "id", 3, "WebGL2RenderingContext", 23, v13, "bindTransformFeedback", 22, "WebGLTransformFeedback", 23);
          return 0;
        }
      }
      if (*(_BYTE *)(v12 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v22 = v42[0];
        v24 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
        if (v24
          && (v26 = WebCore::InspectorInstrumentation::instrumentingAgents(v24, v25)) != 0
          && (v27 = *(WebCore::InspectorCanvasAgent **)(v26 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v27, (WebCore::CanvasRenderingContext *)(v12 + 8), v22, (uint64_t)v43);
        }
        else
        {
          LOBYTE(v43[0]) = 0;
          v44 = 0;
        }
        v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
        if (v28
          && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
          && (v31 = *(_QWORD *)(v30 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v31, (WebCore::CanvasRenderingContext *)(v12 + 8), v15, (uint64_t)&v45);
        }
        else
        {
          LOBYTE(v45) = 0;
          v46 = 0;
        }
        v40[0] = v43;
        v40[1] = 2;
        v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
        if (v32)
        {
          v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33);
          if (v34)
          {
            v35 = *(_QWORD *)(v34 + 96);
            if (v35)
              WebCore::InspectorCanvasAgent::recordAction(v35, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v41, v40);
          }
        }
        if (v46)
        {
          v36 = v45;
          v45 = 0;
          if (v36)
          {
            if (*v36 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v36;
          }
        }
        if (v44)
        {
          v37 = (_DWORD *)v43[0];
          v43[0] = 0;
          if (v37)
          {
            if (*v37 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v37;
          }
        }
        v38 = v41;
        v41 = 0;
        if (v38)
        {
          if (*(_DWORD *)v38 == 2)
            WTF::StringImpl::destroy(v38, v33);
          else
            *(_DWORD *)v38 -= 2;
        }
      }
      else
      {
        v22 = v42[0];
      }
      WebCore::WebGL2RenderingContext::bindTransformFeedback((WTF::StringImpl *)v12, v22, v15);
      return 10;
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_beginTransformFeedback(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  JSValue v14;
  WebCore::InspectorInstrumentation *v15;
  WebCore::ScriptExecutionContext *v16;
  uint64_t v17;
  WebCore::InspectorCanvasAgent *v18;
  WebCore::InspectorInstrumentation *v19;
  WebCore::ScriptExecutionContext *v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  WTF::StringImpl *v24;
  JSC::VM *v25;
  _QWORD v26[2];
  WTF::StringImpl *v27;
  unsigned int v28[2];
  _QWORD v29[2];
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v25 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "WebGL2RenderingContext", "beginTransformFeedback");
  v6 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v7 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v25, "WebGL2RenderingContext", "beginTransformFeedback");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v14.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v14);
  }
  else
  {
    v11 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v28);
    if (v28[1])
    {
      return 0;
    }
    else
    {
      if (*(_BYTE *)(v11 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v12 = v28[0];
        v15 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v15
          && (v17 = WebCore::InspectorInstrumentation::instrumentingAgents(v15, v16)) != 0
          && (v18 = *(WebCore::InspectorCanvasAgent **)(v17 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v18, (WebCore::CanvasRenderingContext *)(v11 + 8), v12, (uint64_t)v29);
        }
        else
        {
          LOBYTE(v29[0]) = 0;
          v30 = 0;
        }
        v26[0] = v29;
        v26[1] = 1;
        v19 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
        if (v19)
        {
          v21 = WebCore::InspectorInstrumentation::instrumentingAgents(v19, v20);
          if (v21)
          {
            v22 = *(_QWORD *)(v21 + 96);
            if (v22)
              WebCore::InspectorCanvasAgent::recordAction(v22, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v27, v26);
          }
        }
        if (v30)
        {
          v23 = (_DWORD *)v29[0];
          v29[0] = 0;
          if (v23)
          {
            if (*v23 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v23;
          }
        }
        v24 = v27;
        v27 = 0;
        if (v24)
        {
          if (*(_DWORD *)v24 == 2)
            WTF::StringImpl::destroy(v24, v20);
          else
            *(_DWORD *)v24 -= 2;
        }
      }
      else
      {
        v12 = v28[0];
      }
      WebCore::WebGL2RenderingContext::beginTransformFeedback((WTF::StringImpl *)v11, v12);
      return 10;
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_endTransformFeedback(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  WebCore::InspectorInstrumentation *v11;
  WebCore::ScriptExecutionContext *v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  _QWORD v17[2];
  WTF::StringImpl *v18;

  v3 = *((_QWORD *)a2 + 5);
  v16 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "WebGL2RenderingContext", "endTransformFeedback");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSWebGL2RenderingContext::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v16, "WebGL2RenderingContext", "endTransformFeedback");
  v9 = *(_QWORD *)(v3 + 24);
  if (*(_BYTE *)(v9 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v17[0] = 0;
    v17[1] = 0;
    v11 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 40) + 144))(*(_QWORD *)(v9 + 40));
    if (v11)
    {
      v13 = WebCore::InspectorInstrumentation::instrumentingAgents(v11, v12);
      if (v13)
      {
        v14 = *(_QWORD *)(v13 + 96);
        if (v14)
          WebCore::InspectorCanvasAgent::recordAction(v14, (WebCore::CanvasRenderingContext *)(v9 + 8), (const WTF::StringImpl *)&v18, v17);
      }
    }
    v15 = v18;
    v18 = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, v12);
      else
        *(_DWORD *)v15 -= 2;
    }
  }
  if (!*(_BYTE *)(v9 + 364))
  {
    if (*(_BYTE *)(*(_QWORD *)(v9 + 936) + 33))
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 88) + 1816))(*(_QWORD *)(v9 + 88));
      *(_WORD *)(*(_QWORD *)(v9 + 936) + 33) = 0;
    }
    else
    {
      WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v9, 1282, (uint64_t)"endTransformFeedback", 21, (uint64_t)"transform feedback is not active", 33);
    }
  }
  return 10;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_transformFeedbackVaryings(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WTF::StringImpl *v30;
  WTF::StringImpl *v31;
  WTF::StringImpl *v32;
  JSValue v35;
  WTF::StringImpl *v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  WebCore::InspectorInstrumentation *v39;
  WebCore::ScriptExecutionContext *v40;
  uint64_t v41;
  uint64_t v42;
  WebCore::InspectorInstrumentation *v43;
  WebCore::ScriptExecutionContext *v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  WebCore::InspectorInstrumentation *v48;
  WebCore::ScriptExecutionContext *v49;
  uint64_t v50;
  WebCore::InspectorCanvasAgent *v51;
  WebCore::InspectorInstrumentation *v52;
  WebCore::ScriptExecutionContext *v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  _DWORD *v57;
  WTF::StringImpl *v58;
  WTF::StringImpl *v59;
  JSC::VM *v60;
  _QWORD v61[2];
  WTF::StringImpl *v62;
  int v63[2];
  WTF::StringImpl *v64;
  uint64_t v65;
  int v66;
  WTF::StringImpl *v67;
  uint64_t v68;
  char v69;
  _DWORD *v70;
  char v71;
  _DWORD *v72;
  char v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v60 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v60, "WebGL2RenderingContext", "transformFeedbackVaryings");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v60, "WebGL2RenderingContext", "transformFeedbackVaryings");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v35.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v35);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v67 = v9;
  if ((v18 & 0xFFFE000000000002) == 0)
  {
    v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
    v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
    v21 = (char **)(16 * v19);
    if ((_DWORD)v19)
      v22 = v21 == &WebCore::JSWebGLProgram::s_info;
    else
      v22 = 1;
    if (!v22)
    {
      do
      {
        v21 = (char **)v21[2];
        v20 = v21 != 0;
      }
      while (v21 != &WebCore::JSWebGLProgram::s_info && v21 != 0);
    }
    if (v20)
    {
      v25 = *(_QWORD *)(v18 + 24);
      if (v25)
      {
        v26 = *((_QWORD *)a2 + 7);
        v61[0] = v9;
        if ((v26 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v26 + 5) <= 0x16u)
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          JSC::throwTypeError();
          v32 = v67;
          v67 = 0;
          if (v32)
          {
            if (*(_DWORD *)v32 == 2)
              WTF::StringImpl::destroy(v32, v31);
            else
              *(_DWORD *)v32 -= 2;
          }
          v24 = 0;
          v27 = 1;
          v66 = 1;
LABEL_43:
          ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E332F5A8[v27])(&v67, &v64);
          return (_BYTE *)v24;
        }
        WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDOMString>>::convert(this, v26, (uint64_t)&v64);
        v27 = v66;
        if (v66)
          goto LABEL_97;
        WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v63);
        if (v63[1])
        {
          v24 = 0;
LABEL_36:
          v27 = v66;
          goto LABEL_37;
        }
        if (*(_BYTE *)(v17 + 33))
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v62 = v67;
          v39 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
          if (v39
            && (v41 = WebCore::InspectorInstrumentation::instrumentingAgents(v39, v40)) != 0
            && (v42 = *(_QWORD *)(v41 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v42, (WTF::StringImpl *)(v17 + 8), v25, (uint64_t)&v67);
          }
          else
          {
            LOBYTE(v67) = 0;
            v69 = 0;
          }
          if (v66)
          {
LABEL_96:
            std::__throw_bad_variant_access[abi:sn180100]();
LABEL_97:
            v24 = 0;
LABEL_37:
            if (v27 == -1)
              return (_BYTE *)v24;
            goto LABEL_43;
          }
          v43 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
          if (v43
            && (v45 = WebCore::InspectorInstrumentation::instrumentingAgents(v43, v44)) != 0
            && (v46 = *(_QWORD *)(v45 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v46, v17 + 8, (uint64_t)&v64, (uint64_t)&v70);
          }
          else
          {
            LOBYTE(v70) = 0;
            v71 = 0;
          }
          v47 = v63[0];
          v48 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
          if (v48
            && (v50 = WebCore::InspectorInstrumentation::instrumentingAgents(v48, v49)) != 0
            && (v51 = *(WebCore::InspectorCanvasAgent **)(v50 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v51, (WebCore::CanvasRenderingContext *)(v17 + 8), v47, (uint64_t)&v72);
          }
          else
          {
            LOBYTE(v72) = 0;
            v73 = 0;
          }
          v61[0] = &v67;
          v61[1] = 3;
          v52 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
          if (v52)
          {
            v54 = WebCore::InspectorInstrumentation::instrumentingAgents(v52, v53);
            if (v54)
            {
              v55 = *(_QWORD *)(v54 + 96);
              if (v55)
                WebCore::InspectorCanvasAgent::recordAction(v55, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)&v62, v61);
            }
          }
          if (v73)
          {
            v56 = v72;
            v72 = 0;
            if (v56)
            {
              if (*v56 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v56;
            }
          }
          if (v71)
          {
            v57 = v70;
            v70 = 0;
            if (v57)
            {
              if (*v57 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v57;
            }
          }
          if (v69)
          {
            v58 = v67;
            v67 = 0;
            if (v58)
            {
              if (*(_DWORD *)v58 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v58;
            }
          }
          v59 = v62;
          v62 = 0;
          if (v59)
          {
            if (*(_DWORD *)v59 == 2)
              WTF::StringImpl::destroy(v59, v53);
            else
              *(_DWORD *)v59 -= 2;
          }
        }
        if (!v66)
        {
          v67 = v64;
          v28 = v65;
          v64 = 0;
          v65 = 0;
          v68 = v28;
          WebCore::WebGL2RenderingContext::transformFeedbackVaryings((WTF::StringImpl *)v17, v25, (uint64_t)&v67, v63[0]);
          if (HIDWORD(v68))
          {
            v36 = v67;
            v37 = 8 * HIDWORD(v68);
            do
            {
              v38 = *(WTF::StringImpl **)v36;
              *(_QWORD *)v36 = 0;
              if (v38)
              {
                if (*(_DWORD *)v38 == 2)
                  WTF::StringImpl::destroy(v38, v29);
                else
                  *(_DWORD *)v38 -= 2;
              }
              v36 = (WTF::StringImpl *)((char *)v36 + 8);
              v37 -= 8;
            }
            while (v37);
          }
          v30 = v67;
          if (v67)
          {
            v67 = 0;
            LODWORD(v68) = 0;
            WTF::fastFree(v30, v29);
          }
          v24 = 10;
          goto LABEL_36;
        }
        goto LABEL_96;
      }
    }
  }
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v67, 0, "program", 8, "WebGL2RenderingContext", 23, a8, "transformFeedbackVaryings", 26, "WebGLProgram", 13);
  return 0;
}

unint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_getTransformFeedbackVarying(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  unint64_t v23;
  WebCore::WebGLProgram *v24;
  uint64_t v25;
  uint64_t v26;
  WTF *v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v30;
  JSValue v32;
  WebCore::InspectorInstrumentation *v33;
  WebCore::ScriptExecutionContext *v34;
  uint64_t v35;
  uint64_t v36;
  WebCore::InspectorInstrumentation *v37;
  WebCore::ScriptExecutionContext *v38;
  uint64_t v39;
  WebCore::InspectorCanvasAgent *v40;
  WebCore::InspectorInstrumentation *v41;
  WebCore::ScriptExecutionContext *v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  WTF *v46;
  WTF::StringImpl *v47;
  JSC::VM *v48;
  _QWORD v49[2];
  WTF::StringImpl *v50;
  unsigned int v51[2];
  WTF *v52[2];
  char v53;
  _DWORD *v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v48 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v48, "WebGL2RenderingContext", "getTransformFeedbackVarying");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v48, "WebGL2RenderingContext", "getTransformFeedbackVarying");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v32.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v32);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v52[0] = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSWebGLProgram::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSWebGLProgram::s_info && v20 != 0);
  }
  if (v19 && (v24 = *(WebCore::WebGLProgram **)(v17 + 24)) != 0)
  {
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v51);
    if (v51[1])
    {
      return 0;
    }
    else
    {
      if (*(_BYTE *)(v16 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v33 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
        if (v33
          && (v35 = WebCore::InspectorInstrumentation::instrumentingAgents(v33, v34)) != 0
          && (v36 = *(_QWORD *)(v35 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v36, (WTF::StringImpl *)(v16 + 8), (uint64_t)v24, (uint64_t)v52);
        }
        else
        {
          LOBYTE(v52[0]) = 0;
          v53 = 0;
        }
        v26 = v51[0];
        v37 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
        if (v37
          && (v39 = WebCore::InspectorInstrumentation::instrumentingAgents(v37, v38)) != 0
          && (v40 = *(WebCore::InspectorCanvasAgent **)(v39 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v40, (WebCore::CanvasRenderingContext *)(v16 + 8), v26, (uint64_t)&v54);
        }
        else
        {
          LOBYTE(v54) = 0;
          v55 = 0;
        }
        v49[0] = v52;
        v49[1] = 2;
        v41 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
        if (v41)
        {
          v43 = WebCore::InspectorInstrumentation::instrumentingAgents(v41, v42);
          if (v43)
          {
            v44 = *(_QWORD *)(v43 + 96);
            if (v44)
              WebCore::InspectorCanvasAgent::recordAction(v44, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v50, v49);
          }
        }
        if (v55)
        {
          v45 = v54;
          v54 = 0;
          if (v45)
          {
            if (*v45 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v45;
          }
        }
        if (v53)
        {
          v46 = v52[0];
          v52[0] = 0;
          if (v46)
          {
            if (*(_DWORD *)v46 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*(_DWORD *)v46;
          }
        }
        v47 = v50;
        v50 = 0;
        if (v47)
        {
          if (*(_DWORD *)v47 == 2)
            WTF::StringImpl::destroy(v47, v42);
          else
            *(_DWORD *)v47 -= 2;
        }
        v25 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
      }
      else
      {
        v25 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
        v26 = v51[0];
      }
      WebCore::WebGL2RenderingContext::getTransformFeedbackVarying((WTF::StringImpl *)v16, v24, v26, (uint64_t *)v52);
      v27 = v52[0];
      if (v52[0])
      {
        v23 = WebCore::wrap<WebCore::WebGLActiveInfo>((uint64_t)this, v25, v52[0]);
        if (*(_DWORD *)v27 == 1)
        {
          v30 = (WTF::StringImpl *)*((_QWORD *)v27 + 1);
          *((_QWORD *)v27 + 1) = 0;
          if (v30)
          {
            if (*(_DWORD *)v30 == 2)
              WTF::StringImpl::destroy(v30, v28);
            else
              *(_DWORD *)v30 -= 2;
          }
          WTF::fastFree(v27, v28);
        }
        else
        {
          --*(_DWORD *)v27;
        }
      }
      else
      {
        return 2;
      }
    }
  }
  else
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v52, 0, "program", 8, "WebGL2RenderingContext", 23, a8, "getTransformFeedbackVarying", 28, "WebGLProgram", 13);
    return 0;
  }
  return v23;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_pauseTransformFeedback(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  WebCore::InspectorInstrumentation *v15;
  WebCore::ScriptExecutionContext *v16;
  uint64_t v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  _QWORD v21[2];
  WTF::StringImpl *v22;

  v3 = *((_QWORD *)a2 + 5);
  v20 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "WebGL2RenderingContext", "pauseTransformFeedback");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSWebGL2RenderingContext::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v20, "WebGL2RenderingContext", "pauseTransformFeedback");
  v9 = *(_QWORD *)(v3 + 24);
  if (*(_BYTE *)(v9 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v21[0] = 0;
    v21[1] = 0;
    v15 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 40) + 144))(*(_QWORD *)(v9 + 40));
    if (v15)
    {
      v17 = WebCore::InspectorInstrumentation::instrumentingAgents(v15, v16);
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 96);
        if (v18)
          WebCore::InspectorCanvasAgent::recordAction(v18, (WebCore::CanvasRenderingContext *)(v9 + 8), (const WTF::StringImpl *)&v22, v21);
      }
    }
    v19 = v22;
    v22 = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, v16);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  if (!*(_BYTE *)(v9 + 364))
  {
    v10 = *(_QWORD *)(v9 + 936);
    if (*(_BYTE *)(v10 + 33))
    {
      if (!*(_BYTE *)(v10 + 34))
      {
        *(_BYTE *)(v10 + 34) = 1;
        (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 88) + 1840))(*(_QWORD *)(v9 + 88));
        return 10;
      }
      v11 = "transform feedback is already paused";
      v12 = (WTF::StringImpl *)v9;
      v13 = 37;
    }
    else
    {
      v11 = "transform feedback is not active";
      v12 = (WTF::StringImpl *)v9;
      v13 = 33;
    }
    WebCore::WebGLRenderingContextBase::synthesizeGLError(v12, 1282, (uint64_t)"pauseTransformFeedback", 23, (uint64_t)v11, v13);
  }
  return 10;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_resumeTransformFeedback(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  char **v6;
  BOOL v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  WebCore::InspectorInstrumentation *v16;
  WebCore::ScriptExecutionContext *v17;
  uint64_t v18;
  uint64_t v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  _QWORD v22[2];
  WTF::StringImpl *v23;

  v3 = *((_QWORD *)a2 + 5);
  v21 = *((_QWORD *)this + 7);
  if ((v3 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v21, "WebGL2RenderingContext", "resumeTransformFeedback");
  v4 = *(unsigned int *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C);
  v5 = *(_DWORD *)(16 * (*(_DWORD *)v3 & 0xFFFFFFFE) + 0x4C) != 0;
  v6 = (char **)(16 * v4);
  if ((_DWORD)v4)
    v7 = v6 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v7 = 1;
  if (!v7)
  {
    do
    {
      v6 = (char **)v6[2];
      v5 = v6 != 0;
    }
    while (v6 != &WebCore::JSWebGL2RenderingContext::s_info && v6 != 0);
  }
  if (!v5)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v21, "WebGL2RenderingContext", "resumeTransformFeedback");
  v9 = *(_QWORD *)(v3 + 24);
  if (*(_BYTE *)(v9 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v22[0] = 0;
    v22[1] = 0;
    v16 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 40) + 144))(*(_QWORD *)(v9 + 40));
    if (v16)
    {
      v18 = WebCore::InspectorInstrumentation::instrumentingAgents(v16, v17);
      if (v18)
      {
        v19 = *(_QWORD *)(v18 + 96);
        if (v19)
          WebCore::InspectorCanvasAgent::recordAction(v19, (WebCore::CanvasRenderingContext *)(v9 + 8), (const WTF::StringImpl *)&v23, v22);
      }
    }
    v20 = v23;
    v23 = 0;
    if (v20)
    {
      if (*(_DWORD *)v20 == 2)
        WTF::StringImpl::destroy(v20, v17);
      else
        *(_DWORD *)v20 -= 2;
    }
  }
  if (!*(_BYTE *)(v9 + 364))
  {
    v10 = *(_QWORD *)(v9 + 168);
    if (v10
      && (v11 = *(_QWORD *)(v9 + 936), *(_QWORD *)(v11 + 56) == v10)
      && *(_DWORD *)(v10 + 60) == *(_DWORD *)(v11 + 36))
    {
      if (*(_BYTE *)(v11 + 33) && *(_BYTE *)(v11 + 34))
      {
        *(_BYTE *)(v11 + 34) = 0;
        (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 88) + 1848))(*(_QWORD *)(v9 + 88));
        return 10;
      }
      v12 = "transform feedback is not active or not paused";
      v13 = (WTF::StringImpl *)v9;
      v14 = 47;
    }
    else
    {
      v12 = "the current program is not the same as when beginTransformFeedback was called";
      v13 = (WTF::StringImpl *)v9;
      v14 = 78;
    }
    WebCore::WebGLRenderingContextBase::synthesizeGLError(v13, 1282, (uint64_t)"resumeTransformFeedback", 24, (uint64_t)v12, v14);
  }
  return 10;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_bindBufferBase(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  _BOOL4 v17;
  char **v18;
  BOOL v19;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  JSValue v25;
  WebCore::InspectorInstrumentation *v26;
  WebCore::ScriptExecutionContext *v27;
  uint64_t v28;
  WebCore::InspectorCanvasAgent *v29;
  WebCore::InspectorInstrumentation *v30;
  WebCore::ScriptExecutionContext *v31;
  uint64_t v32;
  WebCore::InspectorCanvasAgent *v33;
  WebCore::InspectorInstrumentation *v34;
  WebCore::ScriptExecutionContext *v35;
  uint64_t v36;
  uint64_t v37;
  WebCore::InspectorInstrumentation *v38;
  WebCore::ScriptExecutionContext *v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  _DWORD *v43;
  _DWORD *v44;
  WTF::StringImpl *v45;
  JSC::VM *v46;
  _QWORD v47[2];
  WTF::StringImpl *v48;
  _DWORD v49[2];
  _DWORD v50[2];
  _QWORD v51[2];
  char v52;
  _DWORD *v53;
  char v54;
  _DWORD *v55;
  char v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v46 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v46, "WebGL2RenderingContext", "bindBufferBase");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v46, "WebGL2RenderingContext", "bindBufferBase");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v25);
  }
  else
  {
    v12 = *(_QWORD *)(v5 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v50);
    if (v50[1])
    {
      return 0;
    }
    else
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v49);
      if (v49[1])
      {
        return 0;
      }
      else
      {
        v14 = *((_QWORD *)a2 + 8);
        if ((v14 & 0xFFFFFFFFFFFFFFF7) == 2)
        {
          v15 = 0;
        }
        else
        {
          v51[0] = *((_QWORD *)this + 7);
          if ((v14 & 0xFFFE000000000002) != 0)
            goto LABEL_28;
          v16 = *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C);
          v17 = *(_DWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C) != 0;
          v18 = (char **)(16 * v16);
          if ((_DWORD)v16)
            v19 = v18 == &WebCore::JSWebGLBuffer::s_info;
          else
            v19 = 1;
          if (!v19)
          {
            do
            {
              v18 = (char **)v18[2];
              v17 = v18 != 0;
            }
            while (v18 != &WebCore::JSWebGLBuffer::s_info && v18 != 0);
          }
          if (!v17 || (v15 = *(unsigned int **)(v14 + 24)) == 0)
          {
LABEL_28:
            WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v51, 2, "buffer", 7, "WebGL2RenderingContext", 23, v13, "bindBufferBase", 15, "WebGLBuffer", 12);
            return 0;
          }
        }
        if (*(_BYTE *)(v12 + 33))
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v22 = v50[0];
          v26 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
          if (v26
            && (v28 = WebCore::InspectorInstrumentation::instrumentingAgents(v26, v27)) != 0
            && (v29 = *(WebCore::InspectorCanvasAgent **)(v28 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v29, (WebCore::CanvasRenderingContext *)(v12 + 8), v22, (uint64_t)v51);
          }
          else
          {
            LOBYTE(v51[0]) = 0;
            v52 = 0;
          }
          v23 = v49[0];
          v30 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
          if (v30
            && (v32 = WebCore::InspectorInstrumentation::instrumentingAgents(v30, v31)) != 0
            && (v33 = *(WebCore::InspectorCanvasAgent **)(v32 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v33, (WebCore::CanvasRenderingContext *)(v12 + 8), v23, (uint64_t)&v53);
          }
          else
          {
            LOBYTE(v53) = 0;
            v54 = 0;
          }
          v34 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
          if (v34
            && (v36 = WebCore::InspectorInstrumentation::instrumentingAgents(v34, v35)) != 0
            && (v37 = *(_QWORD *)(v36 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v37, (WebCore::CanvasRenderingContext *)(v12 + 8), (WebCore::WebGLBuffer *)v15, (uint64_t)&v55);
          }
          else
          {
            LOBYTE(v55) = 0;
            v56 = 0;
          }
          v47[0] = v51;
          v47[1] = 3;
          v38 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
          if (v38)
          {
            v40 = WebCore::InspectorInstrumentation::instrumentingAgents(v38, v39);
            if (v40)
            {
              v41 = *(_QWORD *)(v40 + 96);
              if (v41)
                WebCore::InspectorCanvasAgent::recordAction(v41, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v48, v47);
            }
          }
          if (v56)
          {
            v42 = v55;
            v55 = 0;
            if (v42)
            {
              if (*v42 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v42;
            }
          }
          if (v54)
          {
            v43 = v53;
            v53 = 0;
            if (v43)
            {
              if (*v43 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v43;
            }
          }
          if (v52)
          {
            v44 = (_DWORD *)v51[0];
            v51[0] = 0;
            if (v44)
            {
              if (*v44 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v44;
            }
          }
          v45 = v48;
          v48 = 0;
          if (v45)
          {
            if (*(_DWORD *)v45 == 2)
              WTF::StringImpl::destroy(v45, v39);
            else
              *(_DWORD *)v45 -= 2;
          }
        }
        else
        {
          v22 = v50[0];
          v23 = v49[0];
        }
        if (WebCore::WebGL2RenderingContext::setIndexedBufferBinding(v12, (uint64_t)"bindBufferBase", 15, v22, v23, (uint64_t)v15))
        {
          if (v15)
            v24 = v15[6];
          else
            v24 = 0;
          (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v12 + 88) + 1856))(*(_QWORD *)(v12 + 88), v22, v23, v24);
        }
        return 10;
      }
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_bindBufferRange(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WebCore::WebGLBuffer *v15;
  uint64_t v16;
  _BOOL4 v17;
  char **v18;
  BOOL v19;
  unint64_t v22;
  uint64_t v23;
  JSC::VM *v24;
  double v25;
  double v26;
  unint64_t v27;
  uint64_t v28;
  JSC::VM *v29;
  double v30;
  double v31;
  JSValue v32;
  unsigned int v33;
  WebCore::InspectorInstrumentation *v34;
  WebCore::ScriptExecutionContext *v35;
  uint64_t v36;
  WebCore::InspectorCanvasAgent *v37;
  unsigned int v38;
  WebCore::InspectorInstrumentation *v39;
  WebCore::ScriptExecutionContext *v40;
  uint64_t v41;
  WebCore::InspectorCanvasAgent *v42;
  WebCore::InspectorInstrumentation *v43;
  WebCore::ScriptExecutionContext *v44;
  uint64_t v45;
  uint64_t v46;
  WebCore::InspectorInstrumentation *v47;
  WebCore::ScriptExecutionContext *v48;
  uint64_t v49;
  WebCore::InspectorCanvasAgent *v50;
  WebCore::InspectorInstrumentation *v51;
  WebCore::ScriptExecutionContext *v52;
  uint64_t v53;
  WebCore::InspectorCanvasAgent *v54;
  WebCore::InspectorInstrumentation *v55;
  WebCore::ScriptExecutionContext *v56;
  uint64_t v57;
  uint64_t v58;
  _DWORD *v59;
  _DWORD *v60;
  _DWORD *v61;
  _DWORD *v62;
  _DWORD *v63;
  WTF::StringImpl *v64;
  double v65;
  double v66;
  WebCore::CanvasRenderingContext *v67;
  JSC::VM *v68;
  _QWORD v69[2];
  WTF::StringImpl *v70;
  unsigned int v71[2];
  unsigned int v72[2];
  _QWORD v73[2];
  char v74;
  _DWORD *v75;
  char v76;
  _DWORD *v77;
  char v78;
  _DWORD *v79;
  char v80;
  _DWORD *v81;
  char v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v68 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v68, "WebGL2RenderingContext", "bindBufferRange");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v68, "WebGL2RenderingContext", "bindBufferRange");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 4)
  {
    v32.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v4, this, v32);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v72);
  if (v72[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v71);
  if (v71[1])
    return 0;
  v14 = *((_QWORD *)a2 + 8);
  if ((v14 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v15 = 0;
  }
  else
  {
    v73[0] = *((_QWORD *)this + 7);
    if ((v14 & 0xFFFE000000000002) != 0)
      goto LABEL_28;
    v16 = *(unsigned int *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C);
    v17 = *(_DWORD *)(16 * (*(_DWORD *)v14 & 0xFFFFFFFE) + 0x4C) != 0;
    v18 = (char **)(16 * v16);
    if ((_DWORD)v16)
      v19 = v18 == &WebCore::JSWebGLBuffer::s_info;
    else
      v19 = 1;
    if (!v19)
    {
      do
      {
        v18 = (char **)v18[2];
        v17 = v18 != 0;
      }
      while (v18 != &WebCore::JSWebGLBuffer::s_info && v18 != 0);
    }
    if (!v17 || (v15 = *(WebCore::WebGLBuffer **)(v14 + 24)) == 0)
    {
LABEL_28:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v73, 2, "buffer", 7, "WebGL2RenderingContext", 23, v13, "bindBufferRange", 16, "WebGLBuffer", 12);
      return 0;
    }
  }
  v22 = *((_QWORD *)a2 + 9);
  v73[0] = v22;
  if (v22 < 0xFFFE000000000000)
  {
    v24 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v22 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v73, this);
      v25 = v65;
    }
    else
    {
      *(_QWORD *)&v25 = v22 - 0x2000000000000;
    }
    if (*((_DWORD *)v24 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v24) & 1) != 0)
      return 0;
    if (fabs(v25) == INFINITY)
    {
      v23 = 0;
    }
    else
    {
      v26 = fmod(trunc(v25), 1.84467441e19);
      if (v26 >= 0.0)
        v23 = (unint64_t)v26;
      else
        v23 = -(uint64_t)(unint64_t)-v26;
    }
  }
  else
  {
    v23 = (int)v22;
  }
  v27 = *((_QWORD *)a2 + 10);
  v73[0] = v27;
  if (v27 < 0xFFFE000000000000)
  {
    v29 = (JSC::VM *)*((_QWORD *)this + 7);
    if (v27 - 0x2000000000000 > 0xFFFBFFFFFFFFFFFFLL)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)v73, this);
      v30 = v66;
    }
    else
    {
      *(_QWORD *)&v30 = v27 - 0x2000000000000;
    }
    if (*((_DWORD *)v29 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v29) & 1) != 0)
      return 0;
    if (fabs(v30) == INFINITY)
    {
      v28 = 0;
    }
    else
    {
      v31 = fmod(trunc(v30), 1.84467441e19);
      if (v31 >= 0.0)
        v28 = (unint64_t)v31;
      else
        v28 = -(uint64_t)(unint64_t)-v31;
    }
  }
  else
  {
    v28 = (int)v27;
  }
  if (*(_BYTE *)(v12 + 33))
  {
    v67 = (WebCore::CanvasRenderingContext *)(v12 + 8);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v70 = (WTF::StringImpl *)v73[0];
    v33 = v72[0];
    v34 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v34
      && (v36 = WebCore::InspectorInstrumentation::instrumentingAgents(v34, v35)) != 0
      && (v37 = *(WebCore::InspectorCanvasAgent **)(v36 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v37, v67, v33, (uint64_t)v73);
    }
    else
    {
      LOBYTE(v73[0]) = 0;
      v74 = 0;
    }
    v38 = v71[0];
    v39 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v39
      && (v41 = WebCore::InspectorInstrumentation::instrumentingAgents(v39, v40)) != 0
      && (v42 = *(WebCore::InspectorCanvasAgent **)(v41 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v42, v67, v38, (uint64_t)&v75);
    }
    else
    {
      LOBYTE(v75) = 0;
      v76 = 0;
    }
    v43 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v43
      && (v45 = WebCore::InspectorInstrumentation::instrumentingAgents(v43, v44)) != 0
      && (v46 = *(_QWORD *)(v45 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v46, v67, v15, (uint64_t)&v77);
    }
    else
    {
      LOBYTE(v77) = 0;
      v78 = 0;
    }
    v47 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v47
      && (v49 = WebCore::InspectorInstrumentation::instrumentingAgents(v47, v48)) != 0
      && (v50 = *(WebCore::InspectorCanvasAgent **)(v49 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v50, v67, v23, (uint64_t)&v79);
    }
    else
    {
      LOBYTE(v79) = 0;
      v80 = 0;
    }
    v51 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v51
      && (v53 = WebCore::InspectorInstrumentation::instrumentingAgents(v51, v52)) != 0
      && (v54 = *(WebCore::InspectorCanvasAgent **)(v53 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v54, v67, v28, (uint64_t)&v81);
    }
    else
    {
      LOBYTE(v81) = 0;
      v82 = 0;
    }
    v69[0] = v73;
    v69[1] = 5;
    v55 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v55)
    {
      v57 = WebCore::InspectorInstrumentation::instrumentingAgents(v55, v56);
      if (v57)
      {
        v58 = *(_QWORD *)(v57 + 96);
        if (v58)
          WebCore::InspectorCanvasAgent::recordAction(v58, v67, (const WTF::StringImpl *)&v70, v69);
      }
    }
    if (v82)
    {
      v59 = v81;
      v81 = 0;
      if (v59)
      {
        if (*v59 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v59;
      }
    }
    if (v80)
    {
      v60 = v79;
      v79 = 0;
      if (v60)
      {
        if (*v60 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v60;
      }
    }
    if (v78)
    {
      v61 = v77;
      v77 = 0;
      if (v61)
      {
        if (*v61 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v61;
      }
    }
    if (v76)
    {
      v62 = v75;
      v75 = 0;
      if (v62)
      {
        if (*v62 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v62;
      }
    }
    if (v74)
    {
      v63 = (_DWORD *)v73[0];
      v73[0] = 0;
      if (v63)
      {
        if (*v63 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v63;
      }
    }
    v64 = v70;
    v70 = 0;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2)
        WTF::StringImpl::destroy(v64, v56);
      else
        *(_DWORD *)v64 -= 2;
    }
  }
  WebCore::WebGL2RenderingContext::bindBufferRange((WebCore::WebGL2RenderingContext *)v12, v72[0], v71[0], v15, v23, v28);
  return 10;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_getIndexedParameter(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  JSC::VM *v4;
  uint64_t v5;
  uint64_t v7;
  BOOL v8;
  char **v9;
  BOOL v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  JSValue v19;
  WebCore::InspectorInstrumentation *v20;
  WebCore::ScriptExecutionContext *v21;
  uint64_t v22;
  WebCore::InspectorCanvasAgent *v23;
  WebCore::InspectorInstrumentation *v24;
  WebCore::ScriptExecutionContext *v25;
  uint64_t v26;
  WebCore::InspectorCanvasAgent *v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  _DWORD *v33;
  WTF::StringImpl *v34;
  JSC::VM *v35;
  _QWORD v36[2];
  int v37;
  unsigned int v38[2];
  unsigned int v39[2];
  WTF::StringImpl *v40;
  _QWORD v41[2];
  uint64_t v42;
  _QWORD v43[2];
  uint64_t v44;
  WebCore *v45;
  uint64_t v46;
  WebCore *v47;
  uint64_t v48;
  WebCore *v49;
  uint64_t v50;
  WebCore *v51;
  uint64_t v52;
  WebCore *v53;
  uint64_t v54;
  WebCore *v55;
  uint64_t v56;
  WebCore *v57;
  uint64_t v58;
  WebCore *v59;
  uint64_t v60;
  WebCore *v61;
  uint64_t v62;
  WebCore *v63;
  uint64_t v64;
  WebCore *v65;
  uint64_t v66;
  WebCore *v67;
  uint64_t v68;
  WebCore *v69;
  uint64_t v70;
  WebCore *v71;
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v4 = (JSC::VM *)*((_QWORD *)this + 7);
  v35 = v4;
  v5 = *((_QWORD *)a2 + 5);
  if ((v5 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v35, "WebGL2RenderingContext", "getIndexedParameter");
  v7 = *(unsigned int *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C);
  v8 = *(_DWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x4C) != 0;
  v9 = (char **)(16 * v7);
  if ((_DWORD)v7)
    v10 = v9 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v10 = 1;
  if (!v10)
  {
    do
    {
      v9 = (char **)v9[2];
      v8 = v9 != 0;
    }
    while (v9 != &WebCore::JSWebGL2RenderingContext::s_info && v9 != 0);
  }
  if (!v8)
    return WebCore::throwThisTypeError((int)this, (int)&v35, "WebGL2RenderingContext", "getIndexedParameter");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v19.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v4, this, v19);
  }
  v12 = *(_QWORD *)(v5 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v39);
  if (v39[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v38);
  if (v38[1])
    return 0;
  if (*(_BYTE *)(v12 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v13 = v39[0];
    v20 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v20
      && (v22 = WebCore::InspectorInstrumentation::instrumentingAgents(v20, v21)) != 0
      && (v23 = *(WebCore::InspectorCanvasAgent **)(v22 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v23, (WebCore::CanvasRenderingContext *)(v12 + 8), v13, (uint64_t)v41);
    }
    else
    {
      LOBYTE(v41[0]) = 0;
      LOBYTE(v42) = 0;
    }
    v14 = v38[0];
    v24 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v24
      && (v26 = WebCore::InspectorInstrumentation::instrumentingAgents(v24, v25)) != 0
      && (v27 = *(WebCore::InspectorCanvasAgent **)(v26 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v27, (WebCore::CanvasRenderingContext *)(v12 + 8), v14, (uint64_t)v43);
    }
    else
    {
      LOBYTE(v43[0]) = 0;
      LOBYTE(v44) = 0;
    }
    v36[0] = v41;
    v36[1] = 2;
    v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 40) + 144))(*(_QWORD *)(v12 + 40));
    if (v28)
    {
      v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29);
      if (v30)
      {
        v31 = *(_QWORD *)(v30 + 96);
        if (v31)
          WebCore::InspectorCanvasAgent::recordAction(v31, (WebCore::CanvasRenderingContext *)(v12 + 8), (const WTF::StringImpl *)&v40, v36);
      }
    }
    if ((_BYTE)v44)
    {
      v32 = (_DWORD *)v43[0];
      v43[0] = 0;
      if (v32)
      {
        if (*v32 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v32;
      }
    }
    if ((_BYTE)v42)
    {
      v33 = (_DWORD *)v41[0];
      v41[0] = 0;
      if (v33)
      {
        if (*v33 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v33;
      }
    }
    v34 = v40;
    v40 = 0;
    if (v34)
    {
      if (*(_DWORD *)v34 == 2)
        WTF::StringImpl::destroy(v34, v29);
      else
        *(_DWORD *)v34 -= 2;
    }
  }
  else
  {
    v13 = v39[0];
    v14 = v38[0];
  }
  v15 = *(_QWORD *)(16 * (*(_DWORD *)v5 & 0xFFFFFFFE) + 0x28);
  WebCore::WebGL2RenderingContext::getIndexedParameter(v12, v13, v14, (uint64_t)v36);
  v41[0] = this;
  v41[1] = v15;
  v42 = v15;
  v43[0] = v15;
  v43[1] = this;
  v44 = v15;
  v45 = this;
  v46 = v15;
  v47 = this;
  v48 = v15;
  v49 = this;
  v50 = v15;
  v51 = this;
  v52 = v15;
  v53 = this;
  v54 = v15;
  v55 = this;
  v56 = v15;
  v57 = this;
  v58 = v15;
  v59 = this;
  v60 = v15;
  v61 = this;
  v62 = v15;
  v63 = this;
  v64 = v15;
  v65 = this;
  v66 = v15;
  v67 = this;
  v68 = v15;
  v69 = this;
  v70 = v15;
  v71 = this;
  v72 = v15;
  if (v37 == -1)
    std::__throw_bad_variant_access[abi:sn180100]();
  v40 = (WTF::StringImpl *)v41;
  v16 = ((uint64_t (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNS8_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS6_6StringENS6_6VectorIbLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSG_IiLm0ESH_Lm16ESI_EENSG_IjLm0ESH_Lm16ESI_EENS6_6RefPtrINS9_21GenericTypedArrayViewINS9_14Float32AdaptorEEENS6_12RawPtrTraitsISP_EENS6_21DefaultRefDerefTraitsISP_EEEENSM_INSN_INS9_12Int32AdaptorEEENSQ_ISW_EENSS_ISW_EEEENSM_INSN_INS9_13Uint32AdaptorEEENSQ_IS11_EENSS_IS11_EEEENSM_INSN_INS9_12Uint8AdaptorEEENSQ_IS16_EENSS_IS16_EEEENSM_INS8_11WebGLBufferENSQ_IS1A_EENSS_IS1A_EEEENSM_INS8_16WebGLFramebufferENSQ_IS1E_EENSS_IS1E_EEEENSM_INS8_12WebGLProgramENSQ_IS1I_EENSS_IS1I_EEEENSM_INS8_10WebGLQueryENSQ_IS1M_EENSS_IS1M_EEEENSM_INS8_17WebGLRenderbufferENSQ_IS1Q_EENSS_IS1Q_EEEENSM_INS8_12WebGLSamplerENSQ_IS1U_EENSS_IS1U_EEEENSM_INS8_12WebGLTextureENSQ_IS1Y_EENSS_IS1Y_EEEENSM_INS8_18WebGLTimerQueryEXTENSQ_IS22_EENSS_IS22_EEEENSM_INS8_22WebGLTransformFeedbackENSQ_IS26_EENSS_IS26_EEEENSM_INS8_22WebGLVertexArrayObjectENSQ_IS2A_EENSS_IS2A_EEEENSM_INS8_25WebGLVertexArrayObjectOESENSQ_IS2E_EENSS_IS2E_EEEEEEEE3__0JZNS8_16convertToJSValueESB_SD_S2K_E3__1ZNS8_16convertToJSValueESB_SD_S2K_E3__2ZNS8_16convertToJSValueESB_SD_S2K_E3__3ZNS8_16convertToJSValueESB_SD_S2K_E3__4ZNS8_16convertToJSValueESB_SD_S2K_E3__5ZNS8_16convertToJSValueESB_SD_S2K_E3__6ZNS8_16convertToJSValueESB_SD_S2K_E3__7ZNS8_16convertToJSValueESB_SD_S2K_E3__8ZNS8_16convertToJSValueESB_SD_S2K_E3__9ZNS8_16convertToJSValueESB_SD_S2K_E4__10ZNS8_16convertToJSValueESB_SD_S2K_E4__11ZNS8_16convertToJSValueESB_SD_S2K_E4__12ZNS8_16convertToJSValueESB_SD_S2K_E4__13ZNS8_16convertToJSValueESB_SD_S2K_E4__14ZNS8_16convertToJSValueESB_SD_S2K_E4__15ZNS8_16convertToJSValueESB_SD_S2K_E4__16ZNS8_16convertToJSValueESB_SD_S2K_E4__17ZNS8_16convertToJSValueESB_SD_S2K_E4__18ZNS8_16convertToJSValueESB_SD_S2K_E4__19ZNS8_16convertToJSValueESB_SD_S2K_E4__20ZNS8_16convertToJSValueESB_SD_S2K_E4__21ZNS8_16convertToJSValueESB_SD_S2K_E4__22ZNS8_16convertToJSValueESB_SD_S2K_E4__23ZNS8_16convertToJSValueESB_SD_S2K_E4__24ZNS8_16convertToJSValueESB_SD_S2K_E4__25EEEEEJRKNS0_6__implIJDnbijxyfSF_SJ_SK_SL_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_S2H_EEEEEEDcOT_DpOT0____fmatrix[v37])(&v40, v36);
  if (v37 != -1)
    off_1E332F3A8[v37](v41, v36);
  return (_BYTE *)v16;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_getUniformIndices(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WebCore::ScriptExecutionContext *v26;
  int v27;
  uint64_t v28;
  WTF *v29;
  unsigned int v30;
  unsigned int v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  _BYTE *result;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  WTF::StringImpl *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  WTF::StringImpl *v42;
  WTF *v43;
  uint64_t v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  WTF::StringImpl *v47;
  WTF::StringImpl *v48;
  JSValue v50;
  WebCore::InspectorInstrumentation *v51;
  WebCore::ScriptExecutionContext *v52;
  uint64_t v53;
  uint64_t v54;
  WebCore::InspectorInstrumentation *v55;
  WebCore::ScriptExecutionContext *v56;
  uint64_t v57;
  uint64_t v58;
  WebCore::InspectorInstrumentation *v59;
  uint64_t v60;
  uint64_t v61;
  _DWORD *v62;
  WTF::StringImpl *v63;
  WTF::StringImpl *v64;
  JSC::VM *v65;
  WTF *v66;
  unint64_t v67;
  WTF::StringImpl *v68;
  WTF *v69;
  uint64_t v70;
  int v71;
  WTF::StringImpl *v72;
  int v73;
  unsigned int v74;
  char v75;
  _DWORD *v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v65 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v65, "WebGL2RenderingContext", "getUniformIndices");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v65, "WebGL2RenderingContext", "getUniformIndices");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v50.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v50);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v72 = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSWebGLProgram::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSWebGLProgram::s_info && v20 != 0);
  }
  if (!v19 || (v24 = *(_QWORD *)(v17 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v72, 0, "program", 8, "WebGL2RenderingContext", 23, a8, "getUniformIndices", 18, "WebGLProgram", 13);
    return 0;
  }
  v25 = *((_QWORD *)a2 + 7);
  v66 = v9;
  if ((v25 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v25 + 5) <= 0x16u)
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    JSC::throwTypeError();
    v33 = v72;
    v72 = 0;
    if (v33)
    {
      if (*(_DWORD *)v33 == 2)
        WTF::StringImpl::destroy(v33, v32);
      else
        *(_DWORD *)v33 -= 2;
    }
    v23 = 0;
    v27 = 1;
    v71 = 1;
LABEL_40:
    ((void (*)(WTF::StringImpl **, WTF **))off_1E332F5A8[v27])(&v72, &v69);
    return (_BYTE *)v23;
  }
  WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLDOMString>>::convert(this, v25, (uint64_t)&v69);
  v27 = v71;
  if (v71)
  {
    v23 = 0;
LABEL_34:
    if (v27 == -1)
      return (_BYTE *)v23;
    goto LABEL_40;
  }
  if (*(_BYTE *)(v16 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v68 = v72;
    v51 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v51
      && (v53 = WebCore::InspectorInstrumentation::instrumentingAgents(v51, v52)) != 0
      && (v54 = *(_QWORD *)(v53 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v54, (WTF::StringImpl *)(v16 + 8), v24, (uint64_t)&v72);
    }
    else
    {
      LOBYTE(v72) = 0;
      v75 = 0;
    }
    if (v71)
      goto LABEL_99;
    v55 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v55
      && (v57 = WebCore::InspectorInstrumentation::instrumentingAgents(v55, v56)) != 0
      && (v58 = *(_QWORD *)(v57 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v58, v16 + 8, (uint64_t)&v69, (uint64_t)&v76);
    }
    else
    {
      LOBYTE(v76) = 0;
      v77 = 0;
    }
    v66 = (WTF *)&v72;
    v67 = 2;
    v59 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v59)
    {
      v60 = WebCore::InspectorInstrumentation::instrumentingAgents(v59, v26);
      if (v60)
      {
        v61 = *(_QWORD *)(v60 + 96);
        if (v61)
          WebCore::InspectorCanvasAgent::recordAction(v61, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v68, &v66);
      }
    }
    if (v77)
    {
      v62 = v76;
      v76 = 0;
      if (v62)
      {
        if (*v62 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v62;
      }
    }
    if (v75)
    {
      v63 = v72;
      v72 = 0;
      if (v63)
      {
        if (*(_DWORD *)v63 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v63;
      }
    }
    v64 = v68;
    v68 = 0;
    if (v64)
    {
      if (*(_DWORD *)v64 == 2)
        goto LABEL_100;
      *(_DWORD *)v64 -= 2;
    }
    while (v71)
    {
LABEL_99:
      v64 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_100:
      WTF::StringImpl::destroy(v64, v26);
    }
  }
  v28 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
  v29 = v69;
  v66 = v69;
  v31 = v70;
  v30 = HIDWORD(v70);
  v69 = 0;
  v70 = 0;
  v67 = __PAIR64__(v30, v31);
  if (*(_BYTE *)(v16 + 364))
  {
    v23 = 2;
    if (!v30)
      goto LABEL_32;
    goto LABEL_50;
  }
  v35 = *(_QWORD *)(v24 + 16);
  if (v35)
  {
    v36 = *(_QWORD *)(v35 + 8);
    if (v36)
      v35 = v36 - 8;
    else
      v35 = 0;
  }
  if (v35 != v16)
  {
    v37 = "object does not belong to this context";
    v38 = (WTF::StringImpl *)v16;
    v39 = 1282;
    v40 = 39;
LABEL_48:
    WebCore::WebGLRenderingContextBase::synthesizeGLError(v38, v39, (uint64_t)"getUniformIndices", 18, (uint64_t)v37, v40);
    v23 = 2;
    goto LABEL_49;
  }
  v44 = *(unsigned int *)(v24 + 24);
  if (!(_DWORD)v44)
  {
    v37 = "attempt to use a deleted object";
    v38 = (WTF::StringImpl *)v16;
    v39 = 1281;
    v40 = 32;
    goto LABEL_48;
  }
  result = (*(_QWORD *(**)(WTF::StringImpl **__return_ptr, _QWORD, uint64_t, WTF **))(**(_QWORD **)(v16 + 88)
                                                                                              + 1872))(&v72, *(_QWORD *)(v16 + 88), v44, &v66);
  v45 = v72;
  v46 = v74;
  v72 = 0;
  v73 = 0;
  v74 = v46;
  if (!(_DWORD)v46)
  {
LABEL_61:
    v23 = WebCore::JSConverter<WebCore::IDLSequence<WebCore::IDLUnsignedLong>>::convert<unsigned int,0ul>((uint64_t)this, v28, (unsigned int **)&v72);
    v48 = v72;
    if (v72)
    {
      v72 = 0;
      v73 = 0;
      WTF::fastFree(v48, v26);
    }
    if (v45)
      WTF::fastFree(v45, v26);
LABEL_49:
    v30 = HIDWORD(v67);
    v29 = v66;
    if (!HIDWORD(v67))
    {
LABEL_32:
      if (!v29)
      {
LABEL_33:
        v27 = v71;
        goto LABEL_34;
      }
LABEL_71:
      v66 = 0;
      LODWORD(v67) = 0;
      WTF::fastFree(v29, v26);
      goto LABEL_33;
    }
LABEL_50:
    v41 = 8 * v30;
    do
    {
      v42 = *(WTF::StringImpl **)v29;
      *(_QWORD *)v29 = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
        {
          v43 = v29;
          WTF::StringImpl::destroy(v42, v26);
          v29 = v43;
        }
        else
        {
          *(_DWORD *)v42 -= 2;
        }
      }
      v29 = (WTF *)((char *)v29 + 8);
      v41 -= 8;
    }
    while (v41);
    v29 = v66;
    if (!v66)
      goto LABEL_33;
    goto LABEL_71;
  }
  if (!(v46 >> 30))
  {
    v47 = (WTF::StringImpl *)WTF::fastMalloc((WTF *)(4 * v46));
    v73 = v46;
    v72 = v47;
    memcpy(v47, v45, 4 * v46);
    goto LABEL_61;
  }
  __break(0xC471u);
  return result;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_getActiveUniforms(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  WTF::StringImpl *v31;
  int v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  JSValue v37;
  void *v38;
  WTF::StringImpl *v39;
  WebCore::InspectorInstrumentation *v40;
  WebCore::ScriptExecutionContext *v41;
  uint64_t v42;
  uint64_t v43;
  WebCore::InspectorInstrumentation *v44;
  WebCore::ScriptExecutionContext *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  WebCore::InspectorInstrumentation *v49;
  WebCore::ScriptExecutionContext *v50;
  uint64_t v51;
  WebCore::InspectorCanvasAgent *v52;
  WebCore::InspectorInstrumentation *v53;
  WebCore::ScriptExecutionContext *v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  _DWORD *v58;
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  JSC::VM *v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  _QWORD v64[2];
  int v65;
  int v66[2];
  WTF::StringImpl *v67;
  uint64_t v68;
  int v69;
  WTF::StringImpl **v70;
  WTF::StringImpl *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[2];
  uint64_t v75;
  _QWORD v76[2];
  WebCore *v77;
  uint64_t v78;
  WebCore *v79;
  uint64_t v80;
  WebCore *v81;
  uint64_t v82;
  WebCore *v83;
  uint64_t v84;
  WebCore *v85;
  uint64_t v86;
  WebCore *v87;
  uint64_t v88;
  WebCore *v89;
  uint64_t v90;
  WebCore *v91;
  uint64_t v92;
  WebCore *v93;
  uint64_t v94;
  WebCore *v95;
  uint64_t v96;
  WebCore *v97;
  uint64_t v98;
  WebCore *v99;
  uint64_t v100;
  WebCore *v101;
  uint64_t v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v61 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v61, "WebGL2RenderingContext", "getActiveUniforms");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v61, "WebGL2RenderingContext", "getActiveUniforms");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v37.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v37);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v71 = v9;
  if ((v18 & 0xFFFE000000000002) == 0)
  {
    v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
    v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
    v21 = (char **)(16 * v19);
    if ((_DWORD)v19)
      v22 = v21 == &WebCore::JSWebGLProgram::s_info;
    else
      v22 = 1;
    if (!v22)
    {
      do
      {
        v21 = (char **)v21[2];
        v20 = v21 != 0;
      }
      while (v21 != &WebCore::JSWebGLProgram::s_info && v21 != 0);
    }
    if (v20)
    {
      v25 = *(_QWORD *)(v18 + 24);
      if (v25)
      {
        v26 = *((_QWORD *)a2 + 7);
        v64[0] = v9;
        if ((v26 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v26 + 5) <= 0x16u)
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          JSC::throwTypeError();
          v34 = v71;
          v71 = 0;
          if (v34)
          {
            if (*(_DWORD *)v34 == 2)
              WTF::StringImpl::destroy(v34, v33);
            else
              *(_DWORD *)v34 -= 2;
          }
          v24 = 0;
          v32 = 1;
          v69 = 1;
          goto LABEL_46;
        }
        v71 = 0;
        v72 = 0;
        v67 = (WTF::StringImpl *)&v71;
        JSC::forEachInIterable<WebCore::Detail::GenericSequenceConverter<WebCore::IDLSequence<WebCore::IDLUnsignedLong>>::convert(JSC::JSGlobalObject &,JSC::JSObject *,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &&)::{lambda(JSC::VM &,JSC::JSGlobalObject*,JSC::JSValue)#1}>(this, v26, (uint64_t *)&v67);
        if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
        {
          v39 = v71;
          v32 = 1;
          v69 = 1;
          if (!v71)
          {
LABEL_98:
            v24 = 0;
LABEL_46:
            ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E332F398[v32])(&v71, &v67);
            return (_BYTE *)v24;
          }
          v71 = 0;
          LODWORD(v72) = 0;
          WTF::fastFree(v39, v38);
          v32 = v69;
          if (v69)
          {
            v24 = 0;
LABEL_40:
            if (v32 == -1)
              return (_BYTE *)v24;
            goto LABEL_46;
          }
        }
        else
        {
          v67 = v71;
          v68 = v72;
          v69 = 0;
        }
        WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v66);
        if (v66[1])
        {
          v24 = 0;
LABEL_39:
          v32 = v69;
          goto LABEL_40;
        }
        if (*(_BYTE *)(v17 + 33))
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v62 = v71;
          v40 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
          if (v40
            && (v42 = WebCore::InspectorInstrumentation::instrumentingAgents(v40, v41)) != 0
            && (v43 = *(_QWORD *)(v42 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v43, (WTF::StringImpl *)(v17 + 8), v25, (uint64_t)&v71);
          }
          else
          {
            LOBYTE(v71) = 0;
            LOBYTE(v73) = 0;
          }
          if (v69)
          {
LABEL_97:
            std::__throw_bad_variant_access[abi:sn180100]();
            goto LABEL_98;
          }
          v44 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
          if (v44
            && (v46 = WebCore::InspectorInstrumentation::instrumentingAgents(v44, v45)) != 0
            && (v47 = *(_QWORD *)(v46 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v47, v17 + 8, (uint64_t *)&v67, (uint64_t)v74);
          }
          else
          {
            LOBYTE(v74[0]) = 0;
            LOBYTE(v75) = 0;
          }
          v48 = v66[0];
          v49 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
          if (v49
            && (v51 = WebCore::InspectorInstrumentation::instrumentingAgents(v49, v50)) != 0
            && (v52 = *(WebCore::InspectorCanvasAgent **)(v51 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v52, (WebCore::CanvasRenderingContext *)(v17 + 8), v48, (uint64_t)v76);
          }
          else
          {
            LOBYTE(v76[0]) = 0;
            LOBYTE(v77) = 0;
          }
          v64[0] = &v71;
          v64[1] = 3;
          v53 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
          if (v53)
          {
            v55 = WebCore::InspectorInstrumentation::instrumentingAgents(v53, v54);
            if (v55)
            {
              v56 = *(_QWORD *)(v55 + 96);
              if (v56)
                WebCore::InspectorCanvasAgent::recordAction(v56, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)&v62, v64);
            }
          }
          if ((_BYTE)v77)
          {
            v57 = (_DWORD *)v76[0];
            v76[0] = 0;
            if (v57)
            {
              if (*v57 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v57;
            }
          }
          if ((_BYTE)v75)
          {
            v58 = (_DWORD *)v74[0];
            v74[0] = 0;
            if (v58)
            {
              if (*v58 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v58;
            }
          }
          if ((_BYTE)v73)
          {
            v59 = v71;
            v71 = 0;
            if (v59)
            {
              if (*(_DWORD *)v59 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*(_DWORD *)v59;
            }
          }
          v60 = v62;
          v62 = 0;
          if (v60)
          {
            if (*(_DWORD *)v60 == 2)
              WTF::StringImpl::destroy(v60, v54);
            else
              *(_DWORD *)v60 -= 2;
          }
          v27 = *(_DWORD *)v10;
        }
        else
        {
          v27 = *(_DWORD *)v10;
        }
        v28 = *(_QWORD *)(16 * (v27 & 0xFFFFFFFE) + 0x28);
        if (!v69)
        {
          v62 = v67;
          v29 = v68;
          v67 = 0;
          v68 = 0;
          v63 = v29;
          WebCore::WebGL2RenderingContext::getActiveUniforms((_QWORD *)v17, v25, v66[0], (uint64_t)v64);
          v71 = this;
          v72 = v28;
          v73 = v28;
          v74[0] = v28;
          v74[1] = this;
          v75 = v28;
          v76[0] = this;
          v76[1] = v28;
          v77 = this;
          v78 = v28;
          v79 = this;
          v80 = v28;
          v81 = this;
          v82 = v28;
          v83 = this;
          v84 = v28;
          v85 = this;
          v86 = v28;
          v87 = this;
          v88 = v28;
          v89 = this;
          v90 = v28;
          v91 = this;
          v92 = v28;
          v93 = this;
          v94 = v28;
          v95 = this;
          v96 = v28;
          v97 = this;
          v98 = v28;
          v99 = this;
          v100 = v28;
          v101 = this;
          v102 = v28;
          if (v65 != -1)
          {
            v70 = &v71;
            v24 = ((uint64_t (*)(WTF::StringImpl ***, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNS8_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS6_6StringENS6_6VectorIbLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSG_IiLm0ESH_Lm16ESI_EENSG_IjLm0ESH_Lm16ESI_EENS6_6RefPtrINS9_21GenericTypedArrayViewINS9_14Float32AdaptorEEENS6_12RawPtrTraitsISP_EENS6_21DefaultRefDerefTraitsISP_EEEENSM_INSN_INS9_12Int32AdaptorEEENSQ_ISW_EENSS_ISW_EEEENSM_INSN_INS9_13Uint32AdaptorEEENSQ_IS11_EENSS_IS11_EEEENSM_INSN_INS9_12Uint8AdaptorEEENSQ_IS16_EENSS_IS16_EEEENSM_INS8_11WebGLBufferENSQ_IS1A_EENSS_IS1A_EEEENSM_INS8_16WebGLFramebufferENSQ_IS1E_EENSS_IS1E_EEEENSM_INS8_12WebGLProgramENSQ_IS1I_EENSS_IS1I_EEEENSM_INS8_10WebGLQueryENSQ_IS1M_EENSS_IS1M_EEEENSM_INS8_17WebGLRenderbufferENSQ_IS1Q_EENSS_IS1Q_EEEENSM_INS8_12WebGLSamplerENSQ_IS1U_EENSS_IS1U_EEEENSM_INS8_12WebGLTextureENSQ_IS1Y_EENSS_IS1Y_EEEENSM_INS8_18WebGLTimerQueryEXTENSQ_IS22_EENSS_IS22_EEEENSM_INS8_22WebGLTransformFeedbackENSQ_IS26_EENSS_IS26_EEEENSM_INS8_22WebGLVertexArrayObjectENSQ_IS2A_EENSS_IS2A_EEEENSM_INS8_25WebGLVertexArrayObjectOESENSQ_IS2E_EENSS_IS2E_EEEEEEEE3__0JZNS8_16convertToJSValueESB_SD_S2K_E3__1ZNS8_16convertToJSValueESB_SD_S2K_E3__2ZNS8_16convertToJSValueESB_SD_S2K_E3__3ZNS8_16convertToJSValueESB_SD_S2K_E3__4ZNS8_16convertToJSValueESB_SD_S2K_E3__5ZNS8_16convertToJSValueESB_SD_S2K_E3__6ZNS8_16convertToJSValueESB_SD_S2K_E3__7ZNS8_16convertToJSValueESB_SD_S2K_E3__8ZNS8_16convertToJSValueESB_SD_S2K_E3__9ZNS8_16convertToJSValueESB_SD_S2K_E4__10ZNS8_16convertToJSValueESB_SD_S2K_E4__11ZNS8_16convertToJSValueESB_SD_S2K_E4__12ZNS8_16convertToJSValueESB_SD_S2K_E4__13ZNS8_16convertToJSValueESB_SD_S2K_E4__14ZNS8_16convertToJSValueESB_SD_S2K_E4__15ZNS8_16convertToJSValueESB_SD_S2K_E4__16ZNS8_16convertToJSValueESB_SD_S2K_E4__17ZNS8_16convertToJSValueESB_SD_S2K_E4__18ZNS8_16convertToJSValueESB_SD_S2K_E4__19ZNS8_16convertToJSValueESB_SD_S2K_E4__20ZNS8_16convertToJSValueESB_SD_S2K_E4__21ZNS8_16convertToJSValueESB_SD_S2K_E4__22ZNS8_16convertToJSValueESB_SD_S2K_E4__23ZNS8_16convertToJSValueESB_SD_S2K_E4__24ZNS8_16convertToJSValueESB_SD_S2K_E4__25EEEEEJRKNS0_6__implIJDnbijxyfSF_SJ_SK_SL_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_S2H_EEEEEEDcOT_DpOT0____fmatrix[v65])(&v70, v64);
            if (v65 != -1)
              ((void (**)(WTF::StringImpl **, _QWORD *))off_1E332F3A8)[v65](&v71, v64);
            v65 = -1;
            v31 = v62;
            if (v62)
            {
              v62 = 0;
              LODWORD(v63) = 0;
              WTF::fastFree(v31, v30);
            }
            goto LABEL_39;
          }
        }
        goto LABEL_97;
      }
    }
  }
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v71, 0, "program", 8, "WebGL2RenderingContext", 23, a8, "getActiveUniforms", 18, "WebGLProgram", 13);
  return 0;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_getUniformBlockIndex(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WTF::StringImpl *v27;
  WTF::StringImpl *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  WTF::StringImpl *v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  WTF::StringImpl *v36;
  int v37;
  uint64_t v39;
  JSValue v41;
  char hasExceptionsAfterHandlingTraps;
  WebCore::InspectorInstrumentation *v43;
  WebCore::ScriptExecutionContext *v44;
  uint64_t v45;
  uint64_t v46;
  WebCore::InspectorInstrumentation *v47;
  WebCore::ScriptExecutionContext *v48;
  uint64_t v49;
  WebCore::InspectorCanvasAgent *v50;
  WebCore::InspectorInstrumentation *v51;
  uint64_t v52;
  uint64_t v53;
  _DWORD *v54;
  WTF::StringImpl *v55;
  WTF::StringImpl *v56;
  JSC::VM *v57;
  WTF::StringImpl *v58[2];
  WTF::StringImpl *v59;
  WTF::StringImpl *v60;
  int v61;
  WTF::StringImpl *v62[2];
  char v63;
  _DWORD *v64;
  char v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v57 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v57, "WebGL2RenderingContext", "getUniformBlockIndex");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v57, "WebGL2RenderingContext", "getUniformBlockIndex");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v41.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v41);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v62[0] = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSWebGLProgram::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSWebGLProgram::s_info && v20 != 0);
  }
  if (!v19 || (v24 = *(_QWORD *)(v17 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v62, 0, "program", 8, "WebGL2RenderingContext", 23, a8, "getUniformBlockIndex", 21, "WebGLProgram", 13);
    return 0;
  }
  v25 = *((_QWORD *)a2 + 7);
  v62[0] = (WTF::StringImpl *)v25;
  if ((v25 & 0xFFFE000000000002) == 0 && *(_BYTE *)(v25 + 5) == 2)
  {
    v26 = *(WTF::StringImpl **)(v25 + 8);
    if ((v26 & 1) != 0)
    {
      v26 = *(WTF::StringImpl **)JSC::JSRopeString::resolveRope((JSC::JSRopeString *)v25, this);
      if (!v26)
        goto LABEL_31;
    }
    else if (!v26)
    {
LABEL_31:
      v58[0] = v26;
      goto LABEL_32;
    }
    *(_DWORD *)v26 += 2;
    goto LABEL_31;
  }
  JSC::JSValue::toWTFStringSlowCase((JSC::JSValue *)v62, this);
LABEL_32:
  if (*((_DWORD *)v9 + 20))
  {
    hasExceptionsAfterHandlingTraps = JSC::VM::hasExceptionsAfterHandlingTraps(v9);
    v27 = v58[0];
    if ((hasExceptionsAfterHandlingTraps & 1) != 0)
    {
      v61 = 1;
      v58[0] = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 2)
        {
          WTF::StringImpl::destroy(v27, a2);
          v37 = v61;
          v23 = 0;
          goto LABEL_49;
        }
        *(_DWORD *)v27 -= 2;
      }
      v23 = 0;
      v37 = 1;
      goto LABEL_50;
    }
  }
  else
  {
    v27 = v58[0];
  }
  v60 = v27;
  v61 = 0;
  if (*(_BYTE *)(v16 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v43 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v43
      && (v45 = WebCore::InspectorInstrumentation::instrumentingAgents(v43, v44)) != 0
      && (v46 = *(_QWORD *)(v45 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v46, (WTF::StringImpl *)(v16 + 8), v24, (uint64_t)v62);
    }
    else
    {
      LOBYTE(v62[0]) = 0;
      v63 = 0;
    }
    v47 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v47
      && (v49 = WebCore::InspectorInstrumentation::instrumentingAgents(v47, v48)) != 0
      && (v50 = *(WebCore::InspectorCanvasAgent **)(v49 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v50, (WebCore::CanvasRenderingContext *)(v16 + 8), (int **)&v60, (uint64_t)&v64);
    }
    else
    {
      LOBYTE(v64) = 0;
      v65 = 0;
    }
    v58[0] = (WTF::StringImpl *)v62;
    v58[1] = (WTF::StringImpl *)2;
    v51 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v51)
    {
      v52 = WebCore::InspectorInstrumentation::instrumentingAgents(v51, a2);
      if (v52)
      {
        v53 = *(_QWORD *)(v52 + 96);
        if (v53)
          WebCore::InspectorCanvasAgent::recordAction(v53, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v59, v58);
      }
    }
    if (v65)
    {
      v54 = v64;
      v64 = 0;
      if (v54)
      {
        if (*v54 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v54;
      }
    }
    if (v63)
    {
      v55 = v62[0];
      v62[0] = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v55;
      }
    }
    v56 = v59;
    v59 = 0;
    if (v56)
    {
      if (*(_DWORD *)v56 == 2)
        goto LABEL_95;
      *(_DWORD *)v56 -= 2;
    }
    while (v61)
    {
      v56 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_95:
      WTF::StringImpl::destroy(v56, a2);
    }
  }
  v28 = v60;
  v60 = 0;
  v62[0] = v28;
  if (*(_BYTE *)(v16 + 364))
    goto LABEL_43;
  v29 = *(_QWORD *)(v24 + 16);
  if (v29)
  {
    v30 = *(_QWORD *)(v29 + 8);
    if (v30)
      v29 = v30 - 8;
    else
      v29 = 0;
  }
  if (v29 != v16)
  {
    v31 = "object does not belong to this context";
    v32 = (WTF::StringImpl *)v16;
    v33 = 1282;
    v34 = 39;
LABEL_42:
    WebCore::WebGLRenderingContextBase::synthesizeGLError(v32, v33, (uint64_t)"getUniformBlockIndex", 21, (uint64_t)v31, v34);
LABEL_43:
    v35 = 0;
    goto LABEL_44;
  }
  v39 = *(unsigned int *)(v24 + 24);
  if (!(_DWORD)v39)
  {
    v31 = "attempt to use a deleted object";
    v32 = (WTF::StringImpl *)v16;
    v33 = 1281;
    v34 = 32;
    goto LABEL_42;
  }
  v35 = (*(uint64_t (**)(_QWORD, uint64_t, WTF::StringImpl **))(**(_QWORD **)(v16 + 88) + 1888))(*(_QWORD *)(v16 + 88), v39, v62);
  if ((v35 & 0x80000000) != 0)
  {
    v23 = COERCE__INT64((double)v35) + 0x2000000000000;
    goto LABEL_45;
  }
LABEL_44:
  v23 = v35 | 0xFFFE000000000000;
LABEL_45:
  v36 = v62[0];
  v62[0] = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 2)
      WTF::StringImpl::destroy(v36, a2);
    else
      *(_DWORD *)v36 -= 2;
  }
  v37 = v61;
LABEL_49:
  if (v37 != -1)
LABEL_50:
    ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E3321590[v37])(v62, &v60);
  return (_BYTE *)v23;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_getActiveUniformBlockParameter(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v24;
  WebCore::WebGLProgram *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  JSValue v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  WebCore::InspectorCanvasAgent *v39;
  WebCore::InspectorInstrumentation *v40;
  WebCore::ScriptExecutionContext *v41;
  uint64_t v42;
  WebCore::InspectorCanvasAgent *v43;
  WebCore::InspectorInstrumentation *v44;
  WebCore::ScriptExecutionContext *v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  _DWORD *v49;
  _DWORD *v50;
  WTF::StringImpl *v51;
  WebCore *v52;
  JSC::JSGlobalObject *v53;
  JSC::CallFrame *v54;
  JSC::VM *v55;
  _QWORD v56[2];
  int v57;
  unsigned int v58[2];
  unsigned int v59[2];
  WTF::StringImpl *v60;
  _QWORD v61[2];
  uint64_t v62;
  _QWORD v63[2];
  uint64_t v64;
  _QWORD v65[2];
  WebCore *v66;
  uint64_t v67;
  WebCore *v68;
  uint64_t v69;
  WebCore *v70;
  uint64_t v71;
  WebCore *v72;
  uint64_t v73;
  WebCore *v74;
  uint64_t v75;
  WebCore *v76;
  uint64_t v77;
  WebCore *v78;
  uint64_t v79;
  WebCore *v80;
  uint64_t v81;
  WebCore *v82;
  uint64_t v83;
  WebCore *v84;
  uint64_t v85;
  WebCore *v86;
  uint64_t v87;
  WebCore *v88;
  uint64_t v89;
  WebCore *v90;
  uint64_t v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v55 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v55, "WebGL2RenderingContext", "getActiveUniformBlockParameter");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v55, "WebGL2RenderingContext", "getActiveUniformBlockParameter");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v31.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v31);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  v61[0] = v9;
  if ((v18 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
  v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
  v21 = (char **)(16 * v19);
  if ((_DWORD)v19)
    v22 = v21 == &WebCore::JSWebGLProgram::s_info;
  else
    v22 = 1;
  if (!v22)
  {
    do
    {
      v21 = (char **)v21[2];
      v20 = v21 != 0;
    }
    while (v21 != &WebCore::JSWebGLProgram::s_info && v21 != 0);
  }
  if (!v20 || (v25 = *(WebCore::WebGLProgram **)(v18 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v61, 0, "program", 8, "WebGL2RenderingContext", 23, a8, "getActiveUniformBlockParameter", 31, "WebGLProgram", 13);
    return 0;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v59);
  if (v59[1])
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v58);
  if (v58[1])
    return 0;
  if (*(_BYTE *)(v17 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v32
      && (v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33)) != 0
      && (v35 = *(_QWORD *)(v34 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v35, (WTF::StringImpl *)(v17 + 8), (uint64_t)v25, (uint64_t)v61);
    }
    else
    {
      LOBYTE(v61[0]) = 0;
      LOBYTE(v62) = 0;
    }
    v27 = v59[0];
    v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v36
      && (v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37)) != 0
      && (v39 = *(WebCore::InspectorCanvasAgent **)(v38 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v39, (WebCore::CanvasRenderingContext *)(v17 + 8), v27, (uint64_t)v63);
    }
    else
    {
      LOBYTE(v63[0]) = 0;
      LOBYTE(v64) = 0;
    }
    v28 = v58[0];
    v40 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v40
      && (v42 = WebCore::InspectorInstrumentation::instrumentingAgents(v40, v41)) != 0
      && (v43 = *(WebCore::InspectorCanvasAgent **)(v42 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v43, (WebCore::CanvasRenderingContext *)(v17 + 8), v28, (uint64_t)v65);
    }
    else
    {
      LOBYTE(v65[0]) = 0;
      LOBYTE(v66) = 0;
    }
    v56[0] = v61;
    v56[1] = 3;
    v44 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
    if (v44)
    {
      v46 = WebCore::InspectorInstrumentation::instrumentingAgents(v44, v45);
      if (v46)
      {
        v47 = *(_QWORD *)(v46 + 96);
        if (v47)
          WebCore::InspectorCanvasAgent::recordAction(v47, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)&v60, v56);
      }
    }
    if ((_BYTE)v66)
    {
      v48 = (_DWORD *)v65[0];
      v65[0] = 0;
      if (v48)
      {
        if (*v48 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v48;
      }
    }
    if ((_BYTE)v64)
    {
      v49 = (_DWORD *)v63[0];
      v63[0] = 0;
      if (v49)
      {
        if (*v49 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v49;
      }
    }
    if ((_BYTE)v62)
    {
      v50 = (_DWORD *)v61[0];
      v61[0] = 0;
      if (v50)
      {
        if (*v50 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v50;
      }
    }
    v51 = v60;
    v60 = 0;
    if (v51)
    {
      if (*(_DWORD *)v51 == 2)
        WTF::StringImpl::destroy(v51, v45);
      else
        *(_DWORD *)v51 -= 2;
    }
    v26 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
  }
  else
  {
    v26 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
    v27 = v59[0];
    v28 = v58[0];
  }
  WebCore::WebGL2RenderingContext::getActiveUniformBlockParameter(v17, v25, v27, v28, (uint64_t)v56);
  v61[0] = this;
  v61[1] = v26;
  v62 = v26;
  v63[0] = v26;
  v63[1] = this;
  v64 = v26;
  v65[0] = this;
  v65[1] = v26;
  v66 = this;
  v67 = v26;
  v68 = this;
  v69 = v26;
  v70 = this;
  v71 = v26;
  v72 = this;
  v73 = v26;
  v74 = this;
  v75 = v26;
  v76 = this;
  v77 = v26;
  v78 = this;
  v79 = v26;
  v80 = this;
  v81 = v26;
  v82 = this;
  v83 = v26;
  v84 = this;
  v85 = v26;
  v86 = this;
  v87 = v26;
  v88 = this;
  v89 = v26;
  v90 = this;
  v91 = v26;
  if (v57 != -1)
  {
    v60 = (WTF::StringImpl *)v61;
    v24 = ((uint64_t (*)(WTF::StringImpl **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNS8_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS6_6StringENS6_6VectorIbLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSG_IiLm0ESH_Lm16ESI_EENSG_IjLm0ESH_Lm16ESI_EENS6_6RefPtrINS9_21GenericTypedArrayViewINS9_14Float32AdaptorEEENS6_12RawPtrTraitsISP_EENS6_21DefaultRefDerefTraitsISP_EEEENSM_INSN_INS9_12Int32AdaptorEEENSQ_ISW_EENSS_ISW_EEEENSM_INSN_INS9_13Uint32AdaptorEEENSQ_IS11_EENSS_IS11_EEEENSM_INSN_INS9_12Uint8AdaptorEEENSQ_IS16_EENSS_IS16_EEEENSM_INS8_11WebGLBufferENSQ_IS1A_EENSS_IS1A_EEEENSM_INS8_16WebGLFramebufferENSQ_IS1E_EENSS_IS1E_EEEENSM_INS8_12WebGLProgramENSQ_IS1I_EENSS_IS1I_EEEENSM_INS8_10WebGLQueryENSQ_IS1M_EENSS_IS1M_EEEENSM_INS8_17WebGLRenderbufferENSQ_IS1Q_EENSS_IS1Q_EEEENSM_INS8_12WebGLSamplerENSQ_IS1U_EENSS_IS1U_EEEENSM_INS8_12WebGLTextureENSQ_IS1Y_EENSS_IS1Y_EEEENSM_INS8_18WebGLTimerQueryEXTENSQ_IS22_EENSS_IS22_EEEENSM_INS8_22WebGLTransformFeedbackENSQ_IS26_EENSS_IS26_EEEENSM_INS8_22WebGLVertexArrayObjectENSQ_IS2A_EENSS_IS2A_EEEENSM_INS8_25WebGLVertexArrayObjectOESENSQ_IS2E_EENSS_IS2E_EEEEEEEE3__0JZNS8_16convertToJSValueESB_SD_S2K_E3__1ZNS8_16convertToJSValueESB_SD_S2K_E3__2ZNS8_16convertToJSValueESB_SD_S2K_E3__3ZNS8_16convertToJSValueESB_SD_S2K_E3__4ZNS8_16convertToJSValueESB_SD_S2K_E3__5ZNS8_16convertToJSValueESB_SD_S2K_E3__6ZNS8_16convertToJSValueESB_SD_S2K_E3__7ZNS8_16convertToJSValueESB_SD_S2K_E3__8ZNS8_16convertToJSValueESB_SD_S2K_E3__9ZNS8_16convertToJSValueESB_SD_S2K_E4__10ZNS8_16convertToJSValueESB_SD_S2K_E4__11ZNS8_16convertToJSValueESB_SD_S2K_E4__12ZNS8_16convertToJSValueESB_SD_S2K_E4__13ZNS8_16convertToJSValueESB_SD_S2K_E4__14ZNS8_16convertToJSValueESB_SD_S2K_E4__15ZNS8_16convertToJSValueESB_SD_S2K_E4__16ZNS8_16convertToJSValueESB_SD_S2K_E4__17ZNS8_16convertToJSValueESB_SD_S2K_E4__18ZNS8_16convertToJSValueESB_SD_S2K_E4__19ZNS8_16convertToJSValueESB_SD_S2K_E4__20ZNS8_16convertToJSValueESB_SD_S2K_E4__21ZNS8_16convertToJSValueESB_SD_S2K_E4__22ZNS8_16convertToJSValueESB_SD_S2K_E4__23ZNS8_16convertToJSValueESB_SD_S2K_E4__24ZNS8_16convertToJSValueESB_SD_S2K_E4__25EEEEEJRKNS0_6__implIJDnbijxyfSF_SJ_SK_SL_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_S2H_EEEEEEDcOT_DpOT0____fmatrix[v57])(&v60, v56);
    if (v57 != -1)
      off_1E332F3A8[v57](v61, v56);
    return (_BYTE *)v24;
  }
  v52 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_getActiveUniformBlockName(v52, v53, v54);
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_getActiveUniformBlockName(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  char **v20;
  BOOL v21;
  uint64_t v23;
  WebCore::WebGLProgram *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  JSValue v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  WebCore::InspectorCanvasAgent *v39;
  WebCore::InspectorInstrumentation *v40;
  WebCore::ScriptExecutionContext *v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  WTF::StringImpl *v46;
  WebCore *v47;
  JSC::JSGlobalObject *v48;
  JSC::CallFrame *v49;
  JSC::VM *v50;
  _BYTE v51[16];
  unsigned int v52;
  unsigned int v53[2];
  _QWORD v54[2];
  int v55;
  char v56;
  WTF::StringImpl *v57[2];
  int v58;
  _QWORD *v59;
  _QWORD v60[2];
  uint64_t v61;
  _QWORD v62[2];
  uint64_t v63;
  WebCore *v64;
  uint64_t v65;
  WebCore *v66;
  uint64_t v67;
  WebCore *v68;
  uint64_t v69;
  WebCore *v70;
  uint64_t v71;
  WebCore *v72;
  uint64_t v73;
  WebCore *v74;
  uint64_t v75;
  WebCore *v76;
  uint64_t v77;
  WebCore *v78;
  uint64_t v79;
  WebCore *v80;
  uint64_t v81;
  WebCore *v82;
  uint64_t v83;
  WebCore *v84;
  uint64_t v85;
  WebCore *v86;
  uint64_t v87;
  WebCore *v88;
  uint64_t v89;
  WebCore *v90;
  uint64_t v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v50 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v50, "WebGL2RenderingContext", "getActiveUniformBlockName");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v50, "WebGL2RenderingContext", "getActiveUniformBlockName");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 1)
  {
    v31.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v31);
  }
  v16 = *(_QWORD *)(v10 + 24);
  v17 = *((_QWORD *)a2 + 6);
  v60[0] = v9;
  if ((v17 & 0xFFFE000000000002) != 0)
    goto LABEL_24;
  v18 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
  v19 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
  v20 = (char **)(16 * v18);
  if ((_DWORD)v18)
    v21 = v20 == &WebCore::JSWebGLProgram::s_info;
  else
    v21 = 1;
  if (!v21)
  {
    do
    {
      v20 = (char **)v20[2];
      v19 = v20 != 0;
    }
    while (v20 != &WebCore::JSWebGLProgram::s_info && v20 != 0);
  }
  if (!v19 || (v24 = *(WebCore::WebGLProgram **)(v17 + 24)) == 0)
  {
LABEL_24:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v60, 0, "program", 8, "WebGL2RenderingContext", 23, a8, "getActiveUniformBlockName", 26, "WebGLProgram", 13);
    return 0;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v53);
  if (v53[1])
    return 0;
  if (*(_BYTE *)(v16 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v32
      && (v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33)) != 0
      && (v35 = *(_QWORD *)(v34 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v35, (WTF::StringImpl *)(v16 + 8), (uint64_t)v24, (uint64_t)v60);
    }
    else
    {
      LOBYTE(v60[0]) = 0;
      LOBYTE(v61) = 0;
    }
    v26 = v53[0];
    v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v36
      && (v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37)) != 0
      && (v39 = *(WebCore::InspectorCanvasAgent **)(v38 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v39, (WebCore::CanvasRenderingContext *)(v16 + 8), v26, (uint64_t)v62);
    }
    else
    {
      LOBYTE(v62[0]) = 0;
      LOBYTE(v63) = 0;
    }
    v54[0] = v60;
    v54[1] = 2;
    v40 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v40)
    {
      v42 = WebCore::InspectorInstrumentation::instrumentingAgents(v40, v41);
      if (v42)
      {
        v43 = *(_QWORD *)(v42 + 96);
        if (v43)
          WebCore::InspectorCanvasAgent::recordAction(v43, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)v57, v54);
      }
    }
    if ((_BYTE)v63)
    {
      v44 = (_DWORD *)v62[0];
      v62[0] = 0;
      if (v44)
      {
        if (*v44 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v44;
      }
    }
    if ((_BYTE)v61)
    {
      v45 = (_DWORD *)v60[0];
      v60[0] = 0;
      if (v45)
      {
        if (*v45 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v45;
      }
    }
    v46 = v57[0];
    v57[0] = 0;
    if (v46)
    {
      if (*(_DWORD *)v46 == 2)
        WTF::StringImpl::destroy(v46, v41);
      else
        *(_DWORD *)v46 -= 2;
    }
    v25 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
  }
  else
  {
    v25 = *(_QWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x28);
    v26 = v53[0];
  }
  WebCore::WebGL2RenderingContext::getActiveUniformBlockName((WTF::StringImpl *)v16, v24, v26, (uint64_t)v51);
  LOBYTE(v60[0]) = 0;
  LODWORD(v61) = -1;
  v27 = v52;
  if (v52 == -1)
  {
    LOBYTE(v54[0]) = 0;
    v55 = -1;
  }
  else
  {
    ((void (*)(_QWORD *, _QWORD *, _BYTE *))off_1E332F5B8[v52])(v54, v60, v51);
    LODWORD(v61) = v27;
    LOBYTE(v62[0]) = 1;
    off_1E332F3A8[v27](v54, v60);
    v28 = v52;
    LOBYTE(v54[0]) = 0;
    v55 = -1;
    if (v52 != -1)
    {
      ((void (*)(_QWORD *, _QWORD *, _BYTE *))off_1E332F688[v52])(v60, v54, v51);
      v55 = v28;
      v56 = 1;
      LOBYTE(v57[0]) = 0;
      v58 = -1;
      ((void (*)(_QWORD *, WTF::StringImpl **, _QWORD *))off_1E332F5B8[v28])(v60, v57, v54);
      goto LABEL_34;
    }
  }
  v56 = 1;
  LOBYTE(v57[0]) = 0;
  LODWORD(v28) = -1;
LABEL_34:
  v58 = v28;
  v60[0] = this;
  v60[1] = v25;
  v61 = v25;
  v62[0] = v25;
  v62[1] = this;
  v63 = v25;
  v64 = this;
  v65 = v25;
  v66 = this;
  v67 = v25;
  v68 = this;
  v69 = v25;
  v70 = this;
  v71 = v25;
  v72 = this;
  v73 = v25;
  v74 = this;
  v75 = v25;
  v76 = this;
  v77 = v25;
  v78 = this;
  v79 = v25;
  v80 = this;
  v81 = v25;
  v82 = this;
  v83 = v25;
  v84 = this;
  v85 = v25;
  v86 = this;
  v87 = v25;
  v88 = this;
  v89 = v25;
  v90 = this;
  v91 = v25;
  if ((_DWORD)v28 != -1)
  {
    v59 = v60;
    v23 = ((uint64_t (*)(_QWORD **, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore16convertToJSValueERN3JSC14JSGlobalObjectERNS8_17JSDOMGlobalObjectERKNS_7variantIJDnbijxyfNS6_6StringENS6_6VectorIbLm0ENS6_15CrashOnOverflowELm16ENS6_10FastMallocEEENSG_IiLm0ESH_Lm16ESI_EENSG_IjLm0ESH_Lm16ESI_EENS6_6RefPtrINS9_21GenericTypedArrayViewINS9_14Float32AdaptorEEENS6_12RawPtrTraitsISP_EENS6_21DefaultRefDerefTraitsISP_EEEENSM_INSN_INS9_12Int32AdaptorEEENSQ_ISW_EENSS_ISW_EEEENSM_INSN_INS9_13Uint32AdaptorEEENSQ_IS11_EENSS_IS11_EEEENSM_INSN_INS9_12Uint8AdaptorEEENSQ_IS16_EENSS_IS16_EEEENSM_INS8_11WebGLBufferENSQ_IS1A_EENSS_IS1A_EEEENSM_INS8_16WebGLFramebufferENSQ_IS1E_EENSS_IS1E_EEEENSM_INS8_12WebGLProgramENSQ_IS1I_EENSS_IS1I_EEEENSM_INS8_10WebGLQueryENSQ_IS1M_EENSS_IS1M_EEEENSM_INS8_17WebGLRenderbufferENSQ_IS1Q_EENSS_IS1Q_EEEENSM_INS8_12WebGLSamplerENSQ_IS1U_EENSS_IS1U_EEEENSM_INS8_12WebGLTextureENSQ_IS1Y_EENSS_IS1Y_EEEENSM_INS8_18WebGLTimerQueryEXTENSQ_IS22_EENSS_IS22_EEEENSM_INS8_22WebGLTransformFeedbackENSQ_IS26_EENSS_IS26_EEEENSM_INS8_22WebGLVertexArrayObjectENSQ_IS2A_EENSS_IS2A_EEEENSM_INS8_25WebGLVertexArrayObjectOESENSQ_IS2E_EENSS_IS2E_EEEEEEEE3__0JZNS8_16convertToJSValueESB_SD_S2K_E3__1ZNS8_16convertToJSValueESB_SD_S2K_E3__2ZNS8_16convertToJSValueESB_SD_S2K_E3__3ZNS8_16convertToJSValueESB_SD_S2K_E3__4ZNS8_16convertToJSValueESB_SD_S2K_E3__5ZNS8_16convertToJSValueESB_SD_S2K_E3__6ZNS8_16convertToJSValueESB_SD_S2K_E3__7ZNS8_16convertToJSValueESB_SD_S2K_E3__8ZNS8_16convertToJSValueESB_SD_S2K_E3__9ZNS8_16convertToJSValueESB_SD_S2K_E4__10ZNS8_16convertToJSValueESB_SD_S2K_E4__11ZNS8_16convertToJSValueESB_SD_S2K_E4__12ZNS8_16convertToJSValueESB_SD_S2K_E4__13ZNS8_16convertToJSValueESB_SD_S2K_E4__14ZNS8_16convertToJSValueESB_SD_S2K_E4__15ZNS8_16convertToJSValueESB_SD_S2K_E4__16ZNS8_16convertToJSValueESB_SD_S2K_E4__17ZNS8_16convertToJSValueESB_SD_S2K_E4__18ZNS8_16convertToJSValueESB_SD_S2K_E4__19ZNS8_16convertToJSValueESB_SD_S2K_E4__20ZNS8_16convertToJSValueESB_SD_S2K_E4__21ZNS8_16convertToJSValueESB_SD_S2K_E4__22ZNS8_16convertToJSValueESB_SD_S2K_E4__23ZNS8_16convertToJSValueESB_SD_S2K_E4__24ZNS8_16convertToJSValueESB_SD_S2K_E4__25EEEEEJRKNS0_6__implIJDnbijxyfSF_SJ_SK_SL_SU_SZ_S14_S19_S1D_S1H_S1L_S1P_S1T_S1X_S21_S25_S29_S2D_S2H_EEEEEEDcOT_DpOT0____fmatrix[v28])(&v59, v57);
    if (v58 != -1)
      ((void (**)(_QWORD *, WTF::StringImpl **))off_1E332F3A8)[v58](v60, v57);
    v58 = -1;
    if (v56)
    {
      if (v55 != -1)
        off_1E332F3A8[v55](v60, v54);
      v55 = -1;
    }
    if (v52 != -1)
      ((void (**)(_QWORD *, _BYTE *))off_1E332F3A8)[v52](v60, v51);
    return (_BYTE *)v23;
  }
  v47 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_uniformBlockBinding(v47, v48, v49);
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_uniformBlockBinding(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  WTF::StringImpl *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  JSValue v35;
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::InspectorInstrumentation *v40;
  WebCore::ScriptExecutionContext *v41;
  uint64_t v42;
  WebCore::InspectorCanvasAgent *v43;
  WebCore::InspectorInstrumentation *v44;
  WebCore::ScriptExecutionContext *v45;
  uint64_t v46;
  WebCore::InspectorCanvasAgent *v47;
  WebCore::InspectorInstrumentation *v48;
  WebCore::ScriptExecutionContext *v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  WTF::StringImpl *v55;
  JSC::VM *v56;
  _QWORD v57[2];
  WTF::StringImpl *v58;
  _DWORD v59[2];
  _DWORD v60[2];
  _QWORD v61[2];
  char v62;
  _DWORD *v63;
  char v64;
  _DWORD *v65;
  char v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v56 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v56, "WebGL2RenderingContext", "uniformBlockBinding");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v56, "WebGL2RenderingContext", "uniformBlockBinding");
  if ((unint64_t)(*((int *)a2 + 8) - 1) <= 2)
  {
    v35.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v35);
  }
  else
  {
    v17 = *(_QWORD *)(v10 + 24);
    v18 = *((_QWORD *)a2 + 6);
    v61[0] = v9;
    if ((v18 & 0xFFFE000000000002) != 0)
      goto LABEL_24;
    v19 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
    v20 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
    v21 = (char **)(16 * v19);
    if ((_DWORD)v19)
      v22 = v21 == &WebCore::JSWebGLProgram::s_info;
    else
      v22 = 1;
    if (!v22)
    {
      do
      {
        v21 = (char **)v21[2];
        v20 = v21 != 0;
      }
      while (v21 != &WebCore::JSWebGLProgram::s_info && v21 != 0);
    }
    if (!v20 || (v25 = *(_QWORD *)(v18 + 24)) == 0)
    {
LABEL_24:
      WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v61, 0, "program", 8, "WebGL2RenderingContext", 23, a8, "uniformBlockBinding", 20, "WebGLProgram", 13);
      return 0;
    }
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 7), v60);
    if (v60[1])
    {
      return 0;
    }
    else
    {
      WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v59);
      if (!v59[1])
      {
        if (*(_BYTE *)(v17 + 33))
        {
          WTF::StringImpl::createWithoutCopyingNonEmpty();
          v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
          if (v36
            && (v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37)) != 0
            && (v39 = *(_QWORD *)(v38 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v39, (WTF::StringImpl *)(v17 + 8), v25, (uint64_t)v61);
          }
          else
          {
            LOBYTE(v61[0]) = 0;
            v62 = 0;
          }
          v26 = v60[0];
          v40 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
          if (v40
            && (v42 = WebCore::InspectorInstrumentation::instrumentingAgents(v40, v41)) != 0
            && (v43 = *(WebCore::InspectorCanvasAgent **)(v42 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v43, (WebCore::CanvasRenderingContext *)(v17 + 8), v26, (uint64_t)&v63);
          }
          else
          {
            LOBYTE(v63) = 0;
            v64 = 0;
          }
          v27 = v59[0];
          v44 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
          if (v44
            && (v46 = WebCore::InspectorInstrumentation::instrumentingAgents(v44, v45)) != 0
            && (v47 = *(WebCore::InspectorCanvasAgent **)(v46 + 96)) != 0)
          {
            WebCore::InspectorCanvasAgent::processArgument(v47, (WebCore::CanvasRenderingContext *)(v17 + 8), v27, (uint64_t)&v65);
          }
          else
          {
            LOBYTE(v65) = 0;
            v66 = 0;
          }
          v57[0] = v61;
          v57[1] = 3;
          v48 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
          if (v48)
          {
            v50 = WebCore::InspectorInstrumentation::instrumentingAgents(v48, v49);
            if (v50)
            {
              v51 = *(_QWORD *)(v50 + 96);
              if (v51)
                WebCore::InspectorCanvasAgent::recordAction(v51, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)&v58, v57);
            }
          }
          if (v66)
          {
            v52 = v65;
            v65 = 0;
            if (v52)
            {
              if (*v52 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v52;
            }
          }
          if (v64)
          {
            v53 = v63;
            v63 = 0;
            if (v53)
            {
              if (*v53 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v53;
            }
          }
          if (v62)
          {
            v54 = (_DWORD *)v61[0];
            v61[0] = 0;
            if (v54)
            {
              if (*v54 == 1)
                WTF::JSONImpl::Value::operator delete();
              else
                --*v54;
            }
          }
          v55 = v58;
          v58 = 0;
          if (v55)
          {
            if (*(_DWORD *)v55 == 2)
              WTF::StringImpl::destroy(v55, v49);
            else
              *(_DWORD *)v55 -= 2;
          }
        }
        else
        {
          v26 = v60[0];
          v27 = v59[0];
        }
        if (*(_BYTE *)(v17 + 364))
          return 10;
        v28 = *(_QWORD *)(v25 + 16);
        if (v28)
        {
          v29 = *(_QWORD *)(v28 + 8);
          if (v29)
            v28 = v29 - 8;
          else
            v28 = 0;
        }
        if (v28 == v17)
        {
          v34 = *(unsigned int *)(v25 + 24);
          if ((_DWORD)v34)
          {
            (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v17 + 88) + 1904))(*(_QWORD *)(v17 + 88), v34, v26, v27);
            return 10;
          }
          v30 = "attempt to use a deleted object";
          v31 = (WTF::StringImpl *)v17;
          v32 = 1281;
          v33 = 32;
        }
        else
        {
          v30 = "object does not belong to this context";
          v31 = (WTF::StringImpl *)v17;
          v32 = 1282;
          v33 = 39;
        }
        WebCore::WebGLRenderingContextBase::synthesizeGLError(v31, v32, (uint64_t)"uniformBlockBinding", 20, (uint64_t)v30, v33);
        return 10;
      }
      return 0;
    }
  }
}

unint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_createVertexArray(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char **v8;
  BOOL v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  int v16;
  WTF *v17;
  WebCore::InspectorInstrumentation *v19;
  WebCore::ScriptExecutionContext *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  uint64_t v24;
  _QWORD v25[2];
  WTF::StringImpl *v26;

  v4 = *((_QWORD *)a2 + 5);
  v24 = *((_QWORD *)this + 7);
  if ((v4 & 0xFFFE000000000002) != 0)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v24, "WebGL2RenderingContext", "createVertexArray");
  v5 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
  v6 = *(unsigned int *)(v5 + 0x4C);
  v7 = *(_DWORD *)(v5 + 0x4C) != 0;
  v8 = (char **)(16 * v6);
  if ((_DWORD)v6)
    v9 = v8 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v9 = 1;
  if (!v9)
  {
    do
    {
      v8 = (char **)v8[2];
      v7 = v8 != 0;
    }
    while (v8 != &WebCore::JSWebGL2RenderingContext::s_info && v8 != 0);
  }
  if (!v7)
    return (unint64_t)WebCore::throwThisTypeError((int)this, (int)&v24, "WebGL2RenderingContext", "createVertexArray");
  v11 = *(_QWORD *)(v4 + 24);
  if (*(_BYTE *)(v11 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v25[0] = 0;
    v25[1] = 0;
    v19 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 40) + 144))(*(_QWORD *)(v11 + 40));
    if (v19)
    {
      v21 = WebCore::InspectorInstrumentation::instrumentingAgents(v19, v20);
      if (v21)
      {
        v22 = *(_QWORD *)(v21 + 96);
        if (v22)
          WebCore::InspectorCanvasAgent::recordAction(v22, (WebCore::CanvasRenderingContext *)(v11 + 8), (const WTF::StringImpl *)&v26, v25);
      }
    }
    v23 = v26;
    v26 = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 2)
        WTF::StringImpl::destroy(v23, v20);
      else
        *(_DWORD *)v23 -= 2;
    }
    v5 = 16 * (*(_DWORD *)v4 & 0xFFFFFFFE);
  }
  if (*(_BYTE *)(v11 + 364))
    return 2;
  v13 = *(_QWORD *)(v5 + 40);
  v14 = *(_DWORD **)(v11 + 88);
  if (v14)
    ++v14[2];
  v15 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v14 + 1208))(v14);
  v16 = v15;
  if (v14[2] != 1)
  {
    --v14[2];
    if (v15)
      goto LABEL_19;
    return 2;
  }
  (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 16))(v14);
  if (!v16)
    return 2;
LABEL_19:
  v17 = (WTF *)WTF::fastMalloc((WTF *)0x50);
  *(_QWORD *)WebCore::WebGLVertexArrayObjectBase::WebGLVertexArrayObjectBase((uint64_t)v17, v11, v16, 1) = off_1E33DEF00;
  v12 = WebCore::wrap<WebCore::WebGLVertexArrayObject>((uint64_t)this, v13, v17);
  if (*((_DWORD *)v17 + 2) == 1)
    (*(void (**)(WTF *))(*(_QWORD *)v17 + 8))(v17);
  else
    --*((_DWORD *)v17 + 2);
  return v12;
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_deleteVertexArray(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  WebCore::WebGLVertexArrayObject *v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  JSValue v25;
  WebCore::InspectorInstrumentation *v26;
  WebCore::ScriptExecutionContext *v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::InspectorInstrumentation *v30;
  WebCore::ScriptExecutionContext *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  JSC::VM *v36;
  _QWORD v37[2];
  WTF::StringImpl *v38;
  _QWORD v39[2];
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v36 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "deleteVertexArray");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "deleteVertexArray");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v25);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v18 = 0;
    }
    else
    {
      v39[0] = v9;
      if ((v17 & 0xFFFE000000000002) != 0)
        goto LABEL_26;
      v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
      v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
      v21 = (char **)(16 * v19);
      if ((_DWORD)v19)
        v22 = v21 == &WebCore::JSWebGLVertexArrayObject::s_info;
      else
        v22 = 1;
      if (!v22)
      {
        do
        {
          v21 = (char **)v21[2];
          v20 = v21 != 0;
        }
        while (v21 != &WebCore::JSWebGLVertexArrayObject::s_info && v21 != 0);
      }
      if (!v20 || (v18 = *(WebCore::WebGLVertexArrayObject **)(v17 + 24)) == 0)
      {
LABEL_26:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v39, 0, "vertexArray", 12, "WebGL2RenderingContext", 23, a8, "deleteVertexArray", 18, "WebGLVertexArrayObject", 23);
        return 0;
      }
    }
    if (*(_BYTE *)(v16 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v26 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v26
        && (v28 = WebCore::InspectorInstrumentation::instrumentingAgents(v26, v27)) != 0
        && (v29 = *(_QWORD *)(v28 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v29, (WebCore::CanvasRenderingContext *)(v16 + 8), v18, (uint64_t)v39);
      }
      else
      {
        LOBYTE(v39[0]) = 0;
        v40 = 0;
      }
      v37[0] = v39;
      v37[1] = 1;
      v30 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v30)
      {
        v32 = WebCore::InspectorInstrumentation::instrumentingAgents(v30, v31);
        if (v32)
        {
          v33 = *(_QWORD *)(v32 + 96);
          if (v33)
            WebCore::InspectorCanvasAgent::recordAction(v33, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v38, v37);
        }
      }
      if (v40)
      {
        v34 = (_DWORD *)v39[0];
        v39[0] = 0;
        if (v34)
        {
          if (*v34 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v34;
        }
      }
      v35 = v38;
      v38 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v31);
        else
          *(_DWORD *)v35 -= 2;
      }
    }
    WebCore::WebGL2RenderingContext::deleteVertexArray((WebCore::WebGL2RenderingContext *)v16, v18);
    return 10;
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_isVertexArray(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  uint64_t v25;
  uint64_t v26;
  JSValue v27;
  WebCore::InspectorInstrumentation *v28;
  WebCore::ScriptExecutionContext *v29;
  uint64_t v30;
  uint64_t v31;
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  WTF::StringImpl *v37;
  JSC::VM *v38;
  _QWORD v39[2];
  WTF::StringImpl *v40;
  _QWORD v41[2];
  char v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v38 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v38, "WebGL2RenderingContext", "isVertexArray");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v38, "WebGL2RenderingContext", "isVertexArray");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v27.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v27);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v18 = 0;
    }
    else
    {
      v41[0] = v9;
      if ((v17 & 0xFFFE000000000002) != 0)
        goto LABEL_26;
      v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
      v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
      v21 = (char **)(16 * v19);
      if ((_DWORD)v19)
        v22 = v21 == &WebCore::JSWebGLVertexArrayObject::s_info;
      else
        v22 = 1;
      if (!v22)
      {
        do
        {
          v21 = (char **)v21[2];
          v20 = v21 != 0;
        }
        while (v21 != &WebCore::JSWebGLVertexArrayObject::s_info && v21 != 0);
      }
      if (!v20 || (v18 = *(_QWORD *)(v17 + 24)) == 0)
      {
LABEL_26:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v41, 0, "vertexArray", 12, "WebGL2RenderingContext", 23, a8, "isVertexArray", 14, "WebGLVertexArrayObject", 23);
        return 0;
      }
    }
    if (*(_BYTE *)(v16 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v28 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v28
        && (v30 = WebCore::InspectorInstrumentation::instrumentingAgents(v28, v29)) != 0
        && (v31 = *(_QWORD *)(v30 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v31, (WebCore::CanvasRenderingContext *)(v16 + 8), (WebCore::WebGLVertexArrayObject *)v18, (uint64_t)v41);
      }
      else
      {
        LOBYTE(v41[0]) = 0;
        v42 = 0;
      }
      v39[0] = v41;
      v39[1] = 1;
      v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v32)
      {
        v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33);
        if (v34)
        {
          v35 = *(_QWORD *)(v34 + 96);
          if (v35)
            WebCore::InspectorCanvasAgent::recordAction(v35, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v40, v39);
        }
      }
      if (v42)
      {
        v36 = (_DWORD *)v41[0];
        v41[0] = 0;
        if (v36)
        {
          if (*v36 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v36;
        }
      }
      v37 = v40;
      v40 = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, v33);
        else
          *(_DWORD *)v37 -= 2;
      }
    }
    if (!v18 || *(_BYTE *)(v16 + 364))
      return 6;
    v25 = *(_QWORD *)(v18 + 16);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 8);
      if (v26)
        v25 = v26 - 8;
      else
        v25 = 0;
    }
    if (v25 == v16
      && *(_DWORD *)(v18 + 24)
      && !*(_BYTE *)(v18 + 32)
      && *(_BYTE *)(v18 + 40)
      && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v16 + 88) + 1224))(*(_QWORD *)(v16 + 88)))
    {
      return 7;
    }
    else
    {
      return 6;
    }
  }
}

uint64_t WebCore::jsWebGL2RenderingContextPrototypeFunction_bindVertexArray(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  WebCore::WebGLVertexArrayObject *v18;
  uint64_t v19;
  _BOOL4 v20;
  char **v21;
  BOOL v22;
  JSValue v25;
  WebCore::InspectorInstrumentation *v26;
  WebCore::ScriptExecutionContext *v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::InspectorInstrumentation *v30;
  WebCore::ScriptExecutionContext *v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  WTF::StringImpl *v35;
  JSC::VM *v36;
  _QWORD v37[2];
  WTF::StringImpl *v38;
  _QWORD v39[2];
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v36 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "bindVertexArray");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return (uint64_t)WebCore::throwThisTypeError((int)this, (int)&v36, "WebGL2RenderingContext", "bindVertexArray");
  if (*((_DWORD *)a2 + 8) == 1)
  {
    v25.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return JSC::VM::throwException(v9, this, v25);
  }
  else
  {
    v16 = *(_QWORD *)(v10 + 24);
    v17 = *((_QWORD *)a2 + 6);
    if ((v17 & 0xFFFFFFFFFFFFFFF7) == 2)
    {
      v18 = 0;
    }
    else
    {
      v39[0] = v9;
      if ((v17 & 0xFFFE000000000002) != 0)
        goto LABEL_26;
      v19 = *(unsigned int *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C);
      v20 = *(_DWORD *)(16 * (*(_DWORD *)v17 & 0xFFFFFFFE) + 0x4C) != 0;
      v21 = (char **)(16 * v19);
      if ((_DWORD)v19)
        v22 = v21 == &WebCore::JSWebGLVertexArrayObject::s_info;
      else
        v22 = 1;
      if (!v22)
      {
        do
        {
          v21 = (char **)v21[2];
          v20 = v21 != 0;
        }
        while (v21 != &WebCore::JSWebGLVertexArrayObject::s_info && v21 != 0);
      }
      if (!v20 || (v18 = *(WebCore::WebGLVertexArrayObject **)(v17 + 24)) == 0)
      {
LABEL_26:
        WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v39, 0, "vertexArray", 12, "WebGL2RenderingContext", 23, a8, "bindVertexArray", 16, "WebGLVertexArrayObject", 23);
        return 0;
      }
    }
    if (*(_BYTE *)(v16 + 33))
    {
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v26 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v26
        && (v28 = WebCore::InspectorInstrumentation::instrumentingAgents(v26, v27)) != 0
        && (v29 = *(_QWORD *)(v28 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v29, (WebCore::CanvasRenderingContext *)(v16 + 8), v18, (uint64_t)v39);
      }
      else
      {
        LOBYTE(v39[0]) = 0;
        v40 = 0;
      }
      v37[0] = v39;
      v37[1] = 1;
      v30 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
      if (v30)
      {
        v32 = WebCore::InspectorInstrumentation::instrumentingAgents(v30, v31);
        if (v32)
        {
          v33 = *(_QWORD *)(v32 + 96);
          if (v33)
            WebCore::InspectorCanvasAgent::recordAction(v33, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v38, v37);
        }
      }
      if (v40)
      {
        v34 = (_DWORD *)v39[0];
        v39[0] = 0;
        if (v34)
        {
          if (*v34 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v34;
        }
      }
      v35 = v38;
      v38 = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, v31);
        else
          *(_DWORD *)v35 -= 2;
      }
    }
    WebCore::WebGL2RenderingContext::bindVertexArray((WTF::StringImpl *)v16, v18);
    return 10;
  }
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage2D(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  unint64_t v13;
  JSC::ArrayBufferView *v14;
  JSC::VM *v15;
  int v16;
  JSC::ArrayBufferView *v17;
  JSC::VM *v18;
  int v19;
  JSC::ArrayBufferView *v20;
  JSC::VM *v21;
  JSC::ArrayBufferView *v22;
  JSC::VM *v23;
  JSC::ArrayBufferView *v24;
  JSC::VM *v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  JSC::ArrayBufferView *v29;
  uint64_t v30;
  JSC::ArrayBufferView *v31;
  JSC::VM *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t (*v40)();
  int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  JSValue v46;
  unsigned int v47;
  uint64_t v48;
  char **v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  JSC::ArrayBufferView *v54;
  uint64_t (*v55)();
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int v60;
  unint64_t v61;
  int v62;
  int v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  unint64_t v74;
  int v75;
  unint64_t v76;
  int v77;
  int v78;
  unint64_t v79;
  int v80;
  int v81;
  unint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  char **v87;
  char **v89;
  char **v91;
  char **v93;
  char **v95;
  int v99;
  unsigned int v100;
  WebCore::InspectorInstrumentation *v101;
  WebCore::ScriptExecutionContext *v102;
  uint64_t v103;
  WebCore::InspectorCanvasAgent *v104;
  WTF::StringImpl *v105;
  WTF::StringImpl *v106;
  JSValue v107;
  WTF::StringImpl *v108;
  unsigned int v109;
  WebCore::InspectorInstrumentation *v110;
  WebCore::ScriptExecutionContext *v111;
  uint64_t v112;
  WebCore::InspectorCanvasAgent *v113;
  WebCore::InspectorInstrumentation *v114;
  WebCore::ScriptExecutionContext *v115;
  uint64_t v116;
  WebCore::InspectorCanvasAgent *v117;
  unsigned int v118;
  WebCore::InspectorInstrumentation *v119;
  WebCore::ScriptExecutionContext *v120;
  uint64_t v121;
  WebCore::InspectorCanvasAgent *v122;
  unsigned int v123;
  WebCore::InspectorInstrumentation *v124;
  WebCore::ScriptExecutionContext *v125;
  uint64_t v126;
  WebCore::InspectorCanvasAgent *v127;
  unsigned int v128;
  WebCore::InspectorInstrumentation *v129;
  WebCore::ScriptExecutionContext *v130;
  uint64_t v131;
  WebCore::InspectorCanvasAgent *v132;
  WebCore::InspectorInstrumentation *v133;
  WebCore::ScriptExecutionContext *v134;
  uint64_t v135;
  uint64_t v136;
  WebCore::InspectorInstrumentation *v137;
  WebCore::ScriptExecutionContext *v138;
  uint64_t v139;
  uint64_t v140;
  _DWORD *v141;
  _DWORD *v142;
  _DWORD *v143;
  _DWORD *v144;
  _DWORD *v145;
  JSC::ArrayBufferView *v146;
  WTF::StringImpl *v147;
  WebCore::InspectorInstrumentation *v148;
  WebCore::ScriptExecutionContext *v149;
  uint64_t v150;
  WebCore::InspectorCanvasAgent *v151;
  WebCore::InspectorInstrumentation *v152;
  WebCore::ScriptExecutionContext *v153;
  uint64_t v154;
  WebCore::InspectorCanvasAgent *v155;
  WebCore::InspectorInstrumentation *v156;
  WebCore::ScriptExecutionContext *v157;
  uint64_t v158;
  WebCore::InspectorCanvasAgent *v159;
  WebCore::InspectorInstrumentation *v160;
  WebCore::ScriptExecutionContext *v161;
  uint64_t v162;
  WebCore::InspectorCanvasAgent *v163;
  WebCore::InspectorInstrumentation *v164;
  WebCore::ScriptExecutionContext *v165;
  uint64_t v166;
  WebCore::InspectorCanvasAgent *v167;
  unsigned int v168;
  WebCore::InspectorInstrumentation *v169;
  WebCore::ScriptExecutionContext *v170;
  uint64_t v171;
  WebCore::InspectorCanvasAgent *v172;
  unsigned int v173;
  WebCore::InspectorInstrumentation *v174;
  WebCore::ScriptExecutionContext *v175;
  uint64_t v176;
  WebCore::InspectorCanvasAgent *v177;
  WebCore::InspectorInstrumentation *v178;
  WebCore::ScriptExecutionContext *v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;
  WebCore::InspectorInstrumentation *v183;
  WebCore::ScriptExecutionContext *v184;
  uint64_t v185;
  WebCore::InspectorCanvasAgent *v186;
  WebCore::InspectorInstrumentation *v187;
  WebCore::ScriptExecutionContext *v188;
  uint64_t v189;
  uint64_t v190;
  _DWORD *v191;
  _DWORD *v192;
  _DWORD *v193;
  _DWORD *v194;
  _DWORD *v195;
  _DWORD *v196;
  _DWORD *v197;
  _DWORD *v198;
  _DWORD *v199;
  JSC::ArrayBufferView *v200;
  WTF::StringImpl *v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  unint64_t v205;
  unint64_t v206;
  unint64_t v207;
  WebCore *v208;
  JSC::JSGlobalObject *v209;
  JSC::CallFrame *v210;
  uint64_t v211;
  uint64_t v212;
  WebCore::CanvasRenderingContext *v213;
  int v214;
  unsigned int v215;
  JSC::VM *v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int v219;
  int v220;
  WTF::StringImpl *v221;
  uint64_t v222;
  _QWORD v223[2];
  WTF::StringImpl *v224;
  unsigned int v225;
  int v226;
  unsigned int v227;
  int v228;
  unsigned int v229;
  int v230;
  int v231[2];
  WTF::StringImpl *v232;
  char v233;
  WTF::StringImpl *v234;
  int v235;
  char v236;
  JSC::ArrayBufferView *v237;
  WTF::StringImpl *v238;
  char v239;
  _QWORD v240[2];
  char v241;
  _QWORD v242[2];
  char v243;
  _QWORD v244[2];
  char v245;
  _QWORD v246[2];
  char v247;
  _DWORD *v248;
  char v249;
  _DWORD *v250;
  char v251;
  _DWORD *v252;
  char v253;
  _DWORD *v254;
  char v255;
  _DWORD *v256;
  char v257;
  JSC::ArrayBufferView *v258;
  int v259;
  int v260;
  int v261;
  uint64_t v262;

  v262 = *MEMORY[0x1E0C80C00];
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v223[0] = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)v223, "WebGL2RenderingContext", "texImage2D");
  v8 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
  v9 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &WebCore::JSWebGL2RenderingContext::s_info && v10 != 0);
  }
  if (!v9)
    return WebCore::throwThisTypeError((int)this, (int)v223, "WebGL2RenderingContext", "texImage2D");
  v223[1] = v5;
  v13 = *((int *)a2 + 8) - 1;
  if (v13 >= 0xA)
    v13 = 10;
  if (v13 == 6)
  {
    v30 = *(_QWORD *)(v6 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), &v229);
    if (v230)
      return 0;
    v216 = v5;
    v31 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 7);
    v237 = v31;
    v32 = (JSC::VM *)*((_QWORD *)this + 7);
    if ((unint64_t)v31 < 0xFFFE000000000000)
    {
      v58 = (unint64_t)v31 - 0x2000000000000;
      if ((unint64_t)v31 - 0x2000000000000 >= 0xFFFC000000000000)
      {
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v237, this);
        v58 = v203;
      }
      v59 = (v58 >> 52) & 0x7FF;
      v60 = v59 - 1023;
      v61 = v58 >> (51 - (v58 >> 52));
      if (v59 > 0x433)
        LODWORD(v61) = v58 << ((v58 >> 52) - 51);
      if (v59 >= 0x41F)
        v62 = v61;
      else
        v62 = (((1 << ((v58 >> 52) + 1)) - 1) & v61) + (1 << ((v58 >> 52) + 1));
      if ((v58 & 0x8000000000000000) == 0)
        v63 = v62;
      else
        v63 = -v62;
      if (v60 <= 0x53)
        v33 = v63;
      else
        v33 = 0;
    }
    else
    {
      v33 = (int)v31;
    }
    if (*((_DWORD *)v32 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v32))
      return 0;
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), &v227);
    if (v228)
      return 0;
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 9), &v225);
    if (v226)
      return 0;
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 10), &v224);
    if (HIDWORD(v224))
      return 0;
    WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::ImageBitmap>,WebCore::IDLInterface<WebCore::ImageData>,WebCore::IDLInterface<WebCore::HTMLImageElement>,WebCore::IDLInterface<WebCore::HTMLCanvasElement>,WebCore::IDLInterface<WebCore::HTMLVideoElement>,WebCore::IDLInterface<WebCore::OffscreenCanvas>,WebCore::IDLInterface<WebCore::WebCodecsVideoFrame>>>::convert((unint64_t *)this, *((_QWORD *)a2 + 11), (uint64_t)&v258);
    v34 = v261;
    if (v261)
    {
      v51 = 0;
LABEL_79:
      if (v34 != -1)
        ((void (*)(JSC::ArrayBufferView **, int *))off_1E332F4F8[v34])(&v237, &v259);
      return (_BYTE *)v51;
    }
    if (*(_BYTE *)(v30 + 33))
    {
      v99 = v33;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v234 = v237;
      v100 = v229;
      v101 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v30 + 40) + 144))(*(_QWORD *)(v30 + 40));
      if (v101
        && (v103 = WebCore::InspectorInstrumentation::instrumentingAgents(v101, v102)) != 0
        && (v104 = *(WebCore::InspectorCanvasAgent **)(v103 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v104, (WebCore::CanvasRenderingContext *)(v30 + 8), v100, (uint64_t)&v237);
      }
      else
      {
        LOBYTE(v237) = 0;
        v239 = 0;
      }
      v114 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v30 + 40) + 144))(*(_QWORD *)(v30 + 40));
      if (v114
        && (v116 = WebCore::InspectorInstrumentation::instrumentingAgents(v114, v115)) != 0
        && (v117 = *(WebCore::InspectorCanvasAgent **)(v116 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v117, (WebCore::CanvasRenderingContext *)(v30 + 8), v99, (uint64_t)v240);
      }
      else
      {
        LOBYTE(v240[0]) = 0;
        v241 = 0;
      }
      v118 = v227;
      v119 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v30 + 40) + 144))(*(_QWORD *)(v30 + 40));
      if (v119
        && (v121 = WebCore::InspectorInstrumentation::instrumentingAgents(v119, v120)) != 0
        && (v122 = *(WebCore::InspectorCanvasAgent **)(v121 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v122, (WebCore::CanvasRenderingContext *)(v30 + 8), v118, (uint64_t)v242);
      }
      else
      {
        LOBYTE(v242[0]) = 0;
        v243 = 0;
      }
      v123 = v225;
      v124 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v30 + 40) + 144))(*(_QWORD *)(v30 + 40));
      if (v124
        && (v126 = WebCore::InspectorInstrumentation::instrumentingAgents(v124, v125)) != 0
        && (v127 = *(WebCore::InspectorCanvasAgent **)(v126 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v127, (WebCore::CanvasRenderingContext *)(v30 + 8), v123, (uint64_t)v244);
      }
      else
      {
        LOBYTE(v244[0]) = 0;
        v245 = 0;
      }
      v128 = v224;
      v129 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v30 + 40) + 144))(*(_QWORD *)(v30 + 40));
      if (v129
        && (v131 = WebCore::InspectorInstrumentation::instrumentingAgents(v129, v130)) != 0
        && (v132 = *(WebCore::InspectorCanvasAgent **)(v131 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v132, (WebCore::CanvasRenderingContext *)(v30 + 8), v128, (uint64_t)v246);
      }
      else
      {
        LOBYTE(v246[0]) = 0;
        v247 = 0;
      }
      if (v261)
        goto LABEL_471;
      v33 = v99;
      v133 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v30 + 40) + 144))(*(_QWORD *)(v30 + 40));
      if (v133
        && (v135 = WebCore::InspectorInstrumentation::instrumentingAgents(v133, v134)) != 0
        && (v136 = *(_QWORD *)(v135 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v136, v30 + 8, (uint64_t)&v259);
      }
      else
      {
        LOBYTE(v248) = 0;
        v249 = 0;
      }
      *(_QWORD *)v231 = &v237;
      v232 = (WTF::StringImpl *)6;
      v137 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v30 + 40) + 144))(*(_QWORD *)(v30 + 40));
      if (v137)
      {
        v139 = WebCore::InspectorInstrumentation::instrumentingAgents(v137, v138);
        if (v139)
        {
          v140 = *(_QWORD *)(v139 + 96);
          if (v140)
            WebCore::InspectorCanvasAgent::recordAction(v140, (WebCore::CanvasRenderingContext *)(v30 + 8), (const WTF::StringImpl *)&v234, v231);
        }
      }
      if (v249)
      {
        v141 = v248;
        v248 = 0;
        if (v141)
        {
          if (*v141 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v141;
          v33 = v99;
        }
      }
      if (v247)
      {
        v142 = (_DWORD *)v246[0];
        v246[0] = 0;
        if (v142)
        {
          if (*v142 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v142;
          v33 = v99;
        }
      }
      if (v245)
      {
        v143 = (_DWORD *)v244[0];
        v244[0] = 0;
        if (v143)
        {
          if (*v143 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v143;
          v33 = v99;
        }
      }
      if (v243)
      {
        v144 = (_DWORD *)v242[0];
        v242[0] = 0;
        if (v144)
        {
          if (*v144 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v144;
          v33 = v99;
        }
      }
      if (v241)
      {
        v145 = (_DWORD *)v240[0];
        v240[0] = 0;
        if (v145)
        {
          if (*v145 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v145;
          v33 = v99;
        }
      }
      if (v239)
      {
        v146 = v237;
        v237 = 0;
        if (v146)
        {
          if (*(_DWORD *)v146 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v146;
          v33 = v99;
        }
      }
      v147 = v234;
      v234 = 0;
      if (v147)
      {
        if (*(_DWORD *)v147 == 2)
          WTF::StringImpl::destroy(v147, v138);
        else
          *(_DWORD *)v147 -= 2;
      }
    }
    v221 = (WTF::StringImpl *)v30;
    if (v261)
      goto LABEL_471;
    v35 = v229;
    v36 = v227;
    v37 = v225;
    v38 = (int)v224;
    LOBYTE(v234) = 0;
    v235 = -1;
    v39 = v260;
    if (v260 == -1)
    {
      LOBYTE(v237) = 0;
      LODWORD(v238) = -1;
    }
    else
    {
      v220 = v33;
      v40 = off_1E332F4C0[v260];
      v41 = v227;
      v42 = v225;
      v43 = (int)v224;
      ((void (*)(JSC::ArrayBufferView **, WTF::StringImpl **, int *))v40)(&v237, &v234, &v259);
      v235 = v39;
      LOBYTE(v237) = 0;
      LODWORD(v238) = -1;
      ((void (*)(int *, JSC::ArrayBufferView **, WTF::StringImpl **))v40)(v231, &v237, &v234);
      v38 = v43;
      v37 = v42;
      v36 = v41;
      v33 = v220;
      LODWORD(v238) = v39;
    }
    v239 = 1;
    WebCore::WebGL2RenderingContext::texImage2D(v221, v35, v33, v36, v37, v38, (uint64_t)&v237, v231, v211, v212);
    if (v239)
    {
      if ((_DWORD)v238 != -1)
        ((void (*)(char *, JSC::ArrayBufferView **))off_1E332F488[v238])(&v236, &v237);
      LODWORD(v238) = -1;
    }
    if (v235 != -1)
      ((void (*)(char *, WTF::StringImpl **))off_1E332F488[v235])(&v236, &v234);
    if (!v233)
    {
      v51 = 10;
LABEL_78:
      v34 = v261;
      goto LABEL_79;
    }
    v105 = (WTF::StringImpl *)LOBYTE(v231[0]);
    LOBYTE(v237) = v231[0];
    v106 = v232;
    v232 = 0;
    v238 = v106;
    if (!*((_QWORD *)v216 + 2))
    {
      v107.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v231[0]), (JSC::JSGlobalObject *)&v238);
      JSC::VM::throwException(v216, this, v107);
      v106 = v238;
    }
    v238 = 0;
    if (v106)
    {
      if (*(_DWORD *)v106 == 2)
        WTF::StringImpl::destroy(v106, v105);
      else
        *(_DWORD *)v106 -= 2;
    }
    if (v233)
    {
      v108 = v232;
      v232 = 0;
      if (v108)
      {
        if (*(_DWORD *)v108 != 2)
        {
          v51 = 0;
          *(_DWORD *)v108 -= 2;
          goto LABEL_78;
        }
        WTF::StringImpl::destroy(v108, v105);
      }
    }
    v51 = 0;
    goto LABEL_78;
  }
  if (v13 == 9)
  {
    v44 = *((_QWORD *)a2 + 14);
    if ((v44 & 0xFFFFFFFFFFFFFFF7) == 2)
      return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage2D4Body((JSC::VM **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
    if ((v44 & 0xFFFE000000000002) == 0)
    {
      v47 = *(unsigned __int8 *)(v44 + 5);
      if (v47 >= 0x17)
      {
        v48 = *(unsigned int *)(16 * (*(_DWORD *)v44 & 0xFFFFFFFE) + 0x4C);
        v49 = (char **)(16 * v48);
        if ((_DWORD)v48)
          v50 = v49 == &WebCore::JSImageBitmap::s_info;
        else
          v50 = 1;
        if (v50)
        {
          if ((_DWORD)v48)
            return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage2D2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
          if (v47 - 39 <= 0xB)
            return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage2D4Body((JSC::VM **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
        }
        else
        {
          v85 = 16 * v48;
          do
            v85 = *(_QWORD *)(v85 + 16);
          while ((char **)v85 != &WebCore::JSImageBitmap::s_info && v85 != 0);
          if (v85 || v49 == &WebCore::JSImageData::s_info)
            return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage2D2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
          v87 = v49;
          do
            v87 = (char **)v87[2];
          while (v87 != &WebCore::JSImageData::s_info && v87 != 0);
          if (v87 || v49 == &WebCore::JSHTMLImageElement::s_info)
            return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage2D2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
          v89 = v49;
          do
            v89 = (char **)v89[2];
          while (v89 != &WebCore::JSHTMLImageElement::s_info && v89 != 0);
          if (v89 || v49 == &WebCore::JSHTMLCanvasElement::s_info)
            return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage2D2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
          v91 = v49;
          do
            v91 = (char **)v91[2];
          while (v91 != &WebCore::JSHTMLCanvasElement::s_info && v91 != 0);
          if (v91 || v49 == &WebCore::JSHTMLVideoElement::s_info)
            return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage2D2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
          v93 = v49;
          do
            v93 = (char **)v93[2];
          while (v93 != &WebCore::JSHTMLVideoElement::s_info && v93 != 0);
          if (v93 || v49 == &WebCore::JSOffscreenCanvas::s_info)
            return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage2D2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
          v95 = v49;
          do
            v95 = (char **)v95[2];
          while (v95 != &WebCore::JSOffscreenCanvas::s_info && v95 != 0);
          if (v95 || v49 == &WebCore::JSWebCodecsVideoFrame::s_info)
            return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage2D2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
          do
            v49 = (char **)v49[2];
          while (v49 != &WebCore::JSWebCodecsVideoFrame::s_info && v49 != 0);
          if (v49)
            return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage2D2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
          if (v47 - 39 < 0xC)
            return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage2D4Body((JSC::VM **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
        }
      }
    }
    return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texImage2D1Body((JSC::VM **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
  }
  if (v13 != 10)
  {
    if (v13 > 5)
      return (_BYTE *)JSC::throwTypeError();
    v46.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v5, this, v46);
  }
  v222 = *(_QWORD *)(v6 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), &v234);
  if (HIDWORD(v234))
    return 0;
  v14 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 7);
  v237 = v14;
  v15 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((unint64_t)v14 < 0xFFFE000000000000)
  {
    v56 = (unint64_t)v14 - 0x2000000000000;
    if ((unint64_t)v14 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v237, this);
      v56 = v202;
    }
    v57 = (v56 >> 52) & 0x7FF;
    if ((v57 - 1023) <= 0x53)
    {
      v72 = v56 >> (51 - (v56 >> 52));
      if (v57 > 0x433)
        LODWORD(v72) = v56 << ((v56 >> 52) - 51);
      if (v57 >= 0x41F)
        v73 = v72;
      else
        v73 = (((1 << ((v56 >> 52) + 1)) - 1) & v72) + (1 << ((v56 >> 52) + 1));
      if ((v56 & 0x8000000000000000) == 0)
        v16 = v73;
      else
        v16 = -v73;
    }
    else
    {
      v16 = 0;
    }
  }
  else
  {
    v16 = (int)v14;
  }
  if (*((_DWORD *)v15 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v15))
    return 0;
  v17 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 8);
  v237 = v17;
  v18 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((unint64_t)v17 < 0xFFFE000000000000)
  {
    v64 = (unint64_t)v17 - 0x2000000000000;
    if ((unint64_t)v17 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v237, this);
      v64 = v204;
    }
    v65 = (v64 >> 52) & 0x7FF;
    if ((v65 - 1023) <= 0x53)
    {
      v74 = v64 >> (51 - (v64 >> 52));
      if (v65 > 0x433)
        LODWORD(v74) = v64 << ((v64 >> 52) - 51);
      if (v65 >= 0x41F)
        v75 = v74;
      else
        v75 = (((1 << ((v64 >> 52) + 1)) - 1) & v74) + (1 << ((v64 >> 52) + 1));
      if ((v64 & 0x8000000000000000) == 0)
        v19 = v75;
      else
        v19 = -v75;
    }
    else
    {
      v19 = 0;
    }
  }
  else
  {
    v19 = (int)v17;
  }
  if (*((_DWORD *)v18 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v18))
    return 0;
  v20 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 9);
  v237 = v20;
  v21 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((unint64_t)v20 < 0xFFFE000000000000)
  {
    v66 = (unint64_t)v20 - 0x2000000000000;
    if ((unint64_t)v20 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v237, this);
      v66 = v205;
    }
    v67 = (v66 >> 52) & 0x7FF;
    if ((v67 - 1023) <= 0x53)
    {
      v76 = v66 >> (51 - (v66 >> 52));
      if (v67 > 0x433)
        LODWORD(v76) = v66 << ((v66 >> 52) - 51);
      if (v67 >= 0x41F)
        v77 = v76;
      else
        v77 = (((1 << ((v66 >> 52) + 1)) - 1) & v76) + (1 << ((v66 >> 52) + 1));
      if ((v66 & 0x8000000000000000) == 0)
        v78 = v77;
      else
        v78 = -v77;
      v219 = v78;
    }
    else
    {
      v219 = 0;
    }
  }
  else
  {
    v219 = v20;
  }
  v218 = v19;
  if (*((_DWORD *)v21 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v21))
    return 0;
  v22 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 10);
  v237 = v22;
  v23 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((unint64_t)v22 < 0xFFFE000000000000)
  {
    v68 = (unint64_t)v22 - 0x2000000000000;
    if ((unint64_t)v22 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v237, this);
      v68 = v206;
    }
    v69 = (v68 >> 52) & 0x7FF;
    if ((v69 - 1023) <= 0x53)
    {
      v79 = v68 >> (51 - (v68 >> 52));
      if (v69 > 0x433)
        LODWORD(v79) = v68 << ((v68 >> 52) - 51);
      if (v69 >= 0x41F)
        v80 = v79;
      else
        v80 = (((1 << ((v68 >> 52) + 1)) - 1) & v79) + (1 << ((v68 >> 52) + 1));
      if ((v68 & 0x8000000000000000) == 0)
        v81 = v80;
      else
        v81 = -v80;
      v215 = v81;
    }
    else
    {
      v215 = 0;
    }
  }
  else
  {
    v215 = v22;
  }
  v217 = v16;
  if (*((_DWORD *)v23 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v23))
    return 0;
  v24 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 11);
  v237 = v24;
  v25 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((unint64_t)v24 < 0xFFFE000000000000)
  {
    v70 = (unint64_t)v24 - 0x2000000000000;
    if ((unint64_t)v24 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v237, this);
      v70 = v207;
    }
    v71 = (v70 >> 52) & 0x7FF;
    if ((v71 - 1023) <= 0x53)
    {
      v82 = v70 >> (51 - (v70 >> 52));
      if (v71 > 0x433)
        LODWORD(v82) = v70 << ((v70 >> 52) - 51);
      if (v71 >= 0x41F)
        v83 = v82;
      else
        v83 = (((1 << ((v70 >> 52) + 1)) - 1) & v82) + (1 << ((v70 >> 52) + 1));
      if ((v70 & 0x8000000000000000) == 0)
        v84 = v83;
      else
        v84 = -v83;
      v214 = v84;
    }
    else
    {
      v214 = 0;
    }
  }
  else
  {
    v214 = (int)v24;
  }
  if (*((_DWORD *)v25 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v25))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 12), &v229);
  if (v230)
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 13), &v227);
  if (v228)
    return 0;
  v27 = *((_QWORD *)a2 + 14);
  v258 = (JSC::ArrayBufferView *)*((_QWORD *)this + 7);
  if ((v27 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(v27 + 5) - 39 > 0xB
    || (*(_BYTE *)(v27 + 40) & 6) != 0)
  {
    *(_QWORD *)v231 = 0;
    goto LABEL_39;
  }
  JSC::JSArrayBufferView::possiblySharedImpl((JSC::JSArrayBufferView *)v27);
  if (!*(_QWORD *)v231)
  {
LABEL_39:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v258, 8, "srcData", 8, "WebGL2RenderingContext", 23, v26, "texImage2D", 11, "ArrayBufferView", 16);
    v28 = 1;
    LODWORD(v238) = 1;
    v29 = *(JSC::ArrayBufferView **)v231;
    *(_QWORD *)v231 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 1)
        JSC::ArrayBufferView::operator delete();
      else
        --*(_DWORD *)v29;
    }
    goto LABEL_84;
  }
  v28 = 0;
  v237 = *(JSC::ArrayBufferView **)v231;
  LODWORD(v238) = 0;
LABEL_84:
  LOBYTE(v258) = 0;
  v259 = -1;
  ((void (*)(int *, JSC::ArrayBufferView **, JSC::ArrayBufferView **))off_1E332F388[v28])(v231, &v258, &v237);
  v259 = v28;
  if ((_DWORD)v238 != -1)
  {
    ((void (*)(int *, JSC::ArrayBufferView **))off_1E332F378[v238])(v231, &v237);
    v28 = v259;
  }
  if (v28)
  {
    v51 = 0;
LABEL_103:
    if (v28 != -1)
      ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView **, uint64_t))off_1E332F378[v28])(&v237, &v258, v52);
    return (_BYTE *)v51;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 15), &v225);
  if (v226)
  {
    v51 = 0;
LABEL_102:
    v28 = v259;
    goto LABEL_103;
  }
  v53 = v222;
  if (*(_BYTE *)(v222 + 33))
  {
    v213 = (WebCore::CanvasRenderingContext *)(v222 + 8);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v224 = v237;
    v109 = v234;
    v110 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v222 + 40) + 144))(*(_QWORD *)(v222 + 40));
    if (v110
      && (v112 = WebCore::InspectorInstrumentation::instrumentingAgents(v110, v111)) != 0
      && (v113 = *(WebCore::InspectorCanvasAgent **)(v112 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v113, v213, v109, (uint64_t)&v237);
    }
    else
    {
      LOBYTE(v237) = 0;
      v239 = 0;
    }
    v148 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v222 + 40) + 144))(*(_QWORD *)(v222 + 40));
    if (v148
      && (v150 = WebCore::InspectorInstrumentation::instrumentingAgents(v148, v149)) != 0
      && (v151 = *(WebCore::InspectorCanvasAgent **)(v150 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v151, v213, v217, (uint64_t)v240);
    }
    else
    {
      LOBYTE(v240[0]) = 0;
      v241 = 0;
    }
    v152 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v222 + 40) + 144))(*(_QWORD *)(v222 + 40));
    if (v152
      && (v154 = WebCore::InspectorInstrumentation::instrumentingAgents(v152, v153)) != 0
      && (v155 = *(WebCore::InspectorCanvasAgent **)(v154 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v155, v213, v218, (uint64_t)v242);
    }
    else
    {
      LOBYTE(v242[0]) = 0;
      v243 = 0;
    }
    v156 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v222 + 40) + 144))(*(_QWORD *)(v222 + 40));
    if (v156
      && (v158 = WebCore::InspectorInstrumentation::instrumentingAgents(v156, v157)) != 0
      && (v159 = *(WebCore::InspectorCanvasAgent **)(v158 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v159, v213, v219, (uint64_t)v244);
    }
    else
    {
      LOBYTE(v244[0]) = 0;
      v245 = 0;
    }
    v160 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v222 + 40) + 144))(*(_QWORD *)(v222 + 40));
    if (v160
      && (v162 = WebCore::InspectorInstrumentation::instrumentingAgents(v160, v161)) != 0
      && (v163 = *(WebCore::InspectorCanvasAgent **)(v162 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v163, v213, v215, (uint64_t)v246);
    }
    else
    {
      LOBYTE(v246[0]) = 0;
      v247 = 0;
    }
    v164 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v222 + 40) + 144))(*(_QWORD *)(v222 + 40));
    if (v164
      && (v166 = WebCore::InspectorInstrumentation::instrumentingAgents(v164, v165)) != 0
      && (v167 = *(WebCore::InspectorCanvasAgent **)(v166 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v167, v213, v214, (uint64_t)&v248);
    }
    else
    {
      LOBYTE(v248) = 0;
      v249 = 0;
    }
    v168 = v229;
    v169 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v222 + 40) + 144))(*(_QWORD *)(v222 + 40));
    if (v169
      && (v171 = WebCore::InspectorInstrumentation::instrumentingAgents(v169, v170)) != 0
      && (v172 = *(WebCore::InspectorCanvasAgent **)(v171 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v172, v213, v168, (uint64_t)&v250);
    }
    else
    {
      LOBYTE(v250) = 0;
      v251 = 0;
    }
    v173 = v227;
    v174 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v222 + 40) + 144))(*(_QWORD *)(v222 + 40));
    if (v174
      && (v176 = WebCore::InspectorInstrumentation::instrumentingAgents(v174, v175)) != 0
      && (v177 = *(WebCore::InspectorCanvasAgent **)(v176 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v177, v213, v173, (uint64_t)&v252);
    }
    else
    {
      LOBYTE(v252) = 0;
      v253 = 0;
    }
    if (v259)
      goto LABEL_471;
    v178 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v222 + 40) + 144))(*(_QWORD *)(v222 + 40));
    if (v178
      && (v180 = WebCore::InspectorInstrumentation::instrumentingAgents(v178, v179)) != 0
      && (v181 = *(_QWORD *)(v180 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v181, (uint64_t)v213, (uint64_t)&v254);
    }
    else
    {
      LOBYTE(v254) = 0;
      v255 = 0;
    }
    v182 = v225;
    v183 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v222 + 40) + 144))(*(_QWORD *)(v222 + 40));
    if (v183
      && (v185 = WebCore::InspectorInstrumentation::instrumentingAgents(v183, v184)) != 0
      && (v186 = *(WebCore::InspectorCanvasAgent **)(v185 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v186, v213, v182, (uint64_t)&v256);
    }
    else
    {
      LOBYTE(v256) = 0;
      v257 = 0;
    }
    *(_QWORD *)v231 = &v237;
    v232 = (WTF::StringImpl *)10;
    v187 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v222 + 40) + 144))(*(_QWORD *)(v222 + 40));
    if (v187)
    {
      v189 = WebCore::InspectorInstrumentation::instrumentingAgents(v187, v188);
      if (v189)
      {
        v190 = *(_QWORD *)(v189 + 96);
        if (v190)
          WebCore::InspectorCanvasAgent::recordAction(v190, v213, (const WTF::StringImpl *)&v224, v231);
      }
    }
    if (v257)
    {
      v191 = v256;
      v256 = 0;
      if (v191)
      {
        if (*v191 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v191;
        v53 = v222;
      }
    }
    if (v255)
    {
      v192 = v254;
      v254 = 0;
      if (v192)
      {
        if (*v192 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v192;
        v53 = v222;
      }
    }
    if (v253)
    {
      v193 = v252;
      v252 = 0;
      if (v193)
      {
        if (*v193 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v193;
        v53 = v222;
      }
    }
    if (v251)
    {
      v194 = v250;
      v250 = 0;
      if (v194)
      {
        if (*v194 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v194;
        v53 = v222;
      }
    }
    if (v249)
    {
      v195 = v248;
      v248 = 0;
      if (v195)
      {
        if (*v195 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v195;
        v53 = v222;
      }
    }
    if (v247)
    {
      v196 = (_DWORD *)v246[0];
      v246[0] = 0;
      if (v196)
      {
        if (*v196 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v196;
        v53 = v222;
      }
    }
    if (v245)
    {
      v197 = (_DWORD *)v244[0];
      v244[0] = 0;
      if (v197)
      {
        if (*v197 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v197;
        v53 = v222;
      }
    }
    if (v243)
    {
      v198 = (_DWORD *)v242[0];
      v242[0] = 0;
      if (v198)
      {
        if (*v198 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v198;
        v53 = v222;
      }
    }
    if (v241)
    {
      v199 = (_DWORD *)v240[0];
      v240[0] = 0;
      if (v199)
      {
        if (*v199 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v199;
        v53 = v222;
      }
    }
    if (v239)
    {
      v200 = v237;
      v237 = 0;
      if (v200)
      {
        if (*(_DWORD *)v200 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v200;
        v53 = v222;
      }
    }
    v201 = v224;
    v224 = 0;
    if (v201)
    {
      if (*(_DWORD *)v201 == 2)
        WTF::StringImpl::destroy(v201, v188);
      else
        *(_DWORD *)v201 -= 2;
    }
  }
  if (!v259)
  {
    v52 = v234;
    v54 = v258;
    v258 = 0;
    v237 = v54;
    if (!*(_BYTE *)(v53 + 364))
    {
      if (*(_QWORD *)(v53 + 976))
        v55 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
      else
        v55 = 0;
      if (v55)
      {
        WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v53, 1282, (uint64_t)"texImage2D", 11, (uint64_t)"a buffer is bound to PIXEL_UNPACK_BUFFER", 41);
      }
      else
      {
        WebCore::WebGLRenderingContextBase::texImageArrayBufferViewHelper((_QWORD *)v53, 0, v234, v217, v218, v219, v215, 1, v214, v229, v227, 0, 0, 0, &v237, 2, v225);
        v54 = v237;
      }
    }
    v237 = 0;
    if (v54)
    {
      if (*(_DWORD *)v54 == 1)
        JSC::ArrayBufferView::operator delete();
      else
        --*(_DWORD *)v54;
    }
    v51 = 10;
    goto LABEL_102;
  }
LABEL_471:
  v208 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage2D(v208, v209, v210);
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage2D(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  unint64_t v13;
  JSC::ArrayBufferView *v14;
  JSC::VM *v15;
  int v16;
  JSC::ArrayBufferView *v17;
  JSC::VM *v18;
  int v19;
  JSC::ArrayBufferView *v20;
  JSC::VM *v21;
  JSC::ArrayBufferView *v22;
  JSC::VM *v23;
  JSC::ArrayBufferView *v24;
  JSC::VM *v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  JSC::ArrayBufferView *v29;
  uint64_t v30;
  JSC::ArrayBufferView *v31;
  JSC::VM *v32;
  int v33;
  JSC::ArrayBufferView *v34;
  JSC::VM *v35;
  int v36;
  JSC::ArrayBufferView *v37;
  JSC::VM *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t (*v44)();
  unsigned int v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  JSValue v50;
  unsigned int v51;
  uint64_t v52;
  char **v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  JSC::ArrayBufferView *v58;
  uint64_t (*v59)();
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int v64;
  unint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  unint64_t v82;
  int v83;
  unint64_t v84;
  int v85;
  unint64_t v86;
  int v87;
  int v88;
  unint64_t v89;
  int v90;
  int v91;
  unint64_t v92;
  int v93;
  int v94;
  unint64_t v95;
  int v96;
  int v97;
  uint64_t v98;
  char **v100;
  char **v102;
  char **v104;
  char **v106;
  char **v108;
  int v112;
  unsigned int v113;
  WebCore::InspectorInstrumentation *v114;
  WebCore::ScriptExecutionContext *v115;
  uint64_t v116;
  WebCore::InspectorCanvasAgent *v117;
  WTF::StringImpl *v118;
  WTF::StringImpl *v119;
  JSValue v120;
  WTF::StringImpl *v121;
  unsigned int v122;
  WebCore::InspectorInstrumentation *v123;
  WebCore::ScriptExecutionContext *v124;
  uint64_t v125;
  WebCore::InspectorCanvasAgent *v126;
  WebCore::InspectorInstrumentation *v127;
  WebCore::ScriptExecutionContext *v128;
  uint64_t v129;
  WebCore::InspectorCanvasAgent *v130;
  WebCore::InspectorInstrumentation *v131;
  WebCore::ScriptExecutionContext *v132;
  uint64_t v133;
  WebCore::InspectorCanvasAgent *v134;
  WebCore::InspectorInstrumentation *v135;
  WebCore::ScriptExecutionContext *v136;
  uint64_t v137;
  WebCore::InspectorCanvasAgent *v138;
  unsigned int v139;
  WebCore::InspectorInstrumentation *v140;
  WebCore::ScriptExecutionContext *v141;
  uint64_t v142;
  WebCore::InspectorCanvasAgent *v143;
  unsigned int v144;
  WebCore::InspectorInstrumentation *v145;
  WebCore::ScriptExecutionContext *v146;
  uint64_t v147;
  WebCore::InspectorCanvasAgent *v148;
  WebCore::InspectorInstrumentation *v149;
  WebCore::ScriptExecutionContext *v150;
  uint64_t v151;
  uint64_t v152;
  WebCore::InspectorInstrumentation *v153;
  WebCore::ScriptExecutionContext *v154;
  uint64_t v155;
  uint64_t v156;
  _DWORD *v157;
  _DWORD *v158;
  _DWORD *v159;
  _DWORD *v160;
  _DWORD *v161;
  _DWORD *v162;
  JSC::ArrayBufferView *v163;
  WTF::StringImpl *v164;
  WebCore::InspectorInstrumentation *v165;
  WebCore::ScriptExecutionContext *v166;
  uint64_t v167;
  WebCore::InspectorCanvasAgent *v168;
  WebCore::InspectorInstrumentation *v169;
  WebCore::ScriptExecutionContext *v170;
  uint64_t v171;
  WebCore::InspectorCanvasAgent *v172;
  WebCore::InspectorInstrumentation *v173;
  WebCore::ScriptExecutionContext *v174;
  uint64_t v175;
  WebCore::InspectorCanvasAgent *v176;
  WebCore::InspectorInstrumentation *v177;
  WebCore::ScriptExecutionContext *v178;
  uint64_t v179;
  WebCore::InspectorCanvasAgent *v180;
  WebCore::InspectorInstrumentation *v181;
  WebCore::ScriptExecutionContext *v182;
  uint64_t v183;
  WebCore::InspectorCanvasAgent *v184;
  unsigned int v185;
  WebCore::InspectorInstrumentation *v186;
  WebCore::ScriptExecutionContext *v187;
  uint64_t v188;
  WebCore::InspectorCanvasAgent *v189;
  unsigned int v190;
  WebCore::InspectorInstrumentation *v191;
  WebCore::ScriptExecutionContext *v192;
  uint64_t v193;
  WebCore::InspectorCanvasAgent *v194;
  WebCore::InspectorInstrumentation *v195;
  WebCore::ScriptExecutionContext *v196;
  uint64_t v197;
  uint64_t v198;
  unsigned int v199;
  WebCore::InspectorInstrumentation *v200;
  WebCore::ScriptExecutionContext *v201;
  uint64_t v202;
  WebCore::InspectorCanvasAgent *v203;
  WebCore::InspectorInstrumentation *v204;
  WebCore::ScriptExecutionContext *v205;
  uint64_t v206;
  uint64_t v207;
  _DWORD *v208;
  _DWORD *v209;
  _DWORD *v210;
  _DWORD *v211;
  _DWORD *v212;
  _DWORD *v213;
  _DWORD *v214;
  _DWORD *v215;
  _DWORD *v216;
  JSC::ArrayBufferView *v217;
  WTF::StringImpl *v218;
  unint64_t v219;
  unint64_t v220;
  unint64_t v221;
  unint64_t v222;
  unint64_t v223;
  unint64_t v224;
  unint64_t v225;
  unint64_t v226;
  WebCore *v227;
  JSC::JSGlobalObject *v228;
  JSC::CallFrame *v229;
  uint64_t v230;
  uint64_t v231;
  WebCore::CanvasRenderingContext *v232;
  WebCore::CanvasRenderingContext *v233;
  unsigned int v234;
  unsigned int v235;
  int v236[2];
  unsigned int v237;
  int v238;
  int v239;
  int v240;
  int v241;
  int v242[2];
  int v243;
  _QWORD v244[2];
  WTF::StringImpl *v245;
  unsigned int v246;
  int v247;
  unsigned int v248;
  int v249;
  unsigned int v250;
  int v251;
  int v252[2];
  WTF::StringImpl *v253;
  char v254;
  WTF::StringImpl *v255;
  int v256;
  JSC::ArrayBufferView *v257;
  WTF::StringImpl *v258;
  char v259;
  _QWORD v260[2];
  char v261;
  _QWORD v262[2];
  char v263;
  _QWORD v264[2];
  char v265;
  _QWORD v266[2];
  char v267;
  _QWORD v268[2];
  char v269;
  _DWORD *v270;
  char v271;
  _DWORD *v272;
  char v273;
  _DWORD *v274;
  char v275;
  _DWORD *v276;
  char v277;
  JSC::ArrayBufferView *v278;
  int v279;
  int v280;
  int v281;
  uint64_t v282;

  v282 = *MEMORY[0x1E0C80C00];
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v244[0] = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)v244, "WebGL2RenderingContext", "texSubImage2D");
  v8 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
  v9 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &WebCore::JSWebGL2RenderingContext::s_info && v10 != 0);
  }
  if (!v9)
    return WebCore::throwThisTypeError((int)this, (int)v244, "WebGL2RenderingContext", "texSubImage2D");
  v244[1] = v5;
  v13 = *((int *)a2 + 8) - 1;
  if (v13 >= 0xA)
    v13 = 10;
  if (v13 == 7)
  {
    v30 = *(_QWORD *)(v6 + 24);
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), &v250);
    if (v251)
      return 0;
    v232 = v5;
    v31 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 7);
    v257 = v31;
    v32 = (JSC::VM *)*((_QWORD *)this + 7);
    if ((unint64_t)v31 < 0xFFFE000000000000)
    {
      v62 = (unint64_t)v31 - 0x2000000000000;
      if ((unint64_t)v31 - 0x2000000000000 >= 0xFFFC000000000000)
      {
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v257, this);
        v62 = v220;
      }
      v63 = (v62 >> 52) & 0x7FF;
      v64 = v63 - 1023;
      v65 = v62 >> (51 - (v62 >> 52));
      if (v63 > 0x433)
        LODWORD(v65) = v62 << ((v62 >> 52) - 51);
      if (v63 >= 0x41F)
        v66 = v65;
      else
        v66 = (((1 << ((v62 >> 52) + 1)) - 1) & v65) + (1 << ((v62 >> 52) + 1));
      if ((v62 & 0x8000000000000000) == 0)
        v67 = v66;
      else
        v67 = -v66;
      if (v64 <= 0x53)
        v33 = v67;
      else
        v33 = 0;
    }
    else
    {
      v33 = (int)v31;
    }
    if (*((_DWORD *)v32 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v32))
      return 0;
    v34 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 8);
    v257 = v34;
    v35 = (JSC::VM *)*((_QWORD *)this + 7);
    if ((unint64_t)v34 < 0xFFFE000000000000)
    {
      v70 = (unint64_t)v34 - 0x2000000000000;
      if ((unint64_t)v34 - 0x2000000000000 >= 0xFFFC000000000000)
      {
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v257, this);
        v70 = v222;
      }
      v71 = (v70 >> 52) & 0x7FF;
      if ((v71 - 1023) <= 0x53)
      {
        v84 = v70 >> (51 - (v70 >> 52));
        if (v71 > 0x433)
          LODWORD(v84) = v70 << ((v70 >> 52) - 51);
        if (v71 >= 0x41F)
          v85 = v84;
        else
          v85 = (((1 << ((v70 >> 52) + 1)) - 1) & v84) + (1 << ((v70 >> 52) + 1));
        if ((v70 & 0x8000000000000000) == 0)
          v36 = v85;
        else
          v36 = -v85;
      }
      else
      {
        v36 = 0;
      }
    }
    else
    {
      v36 = (int)v34;
    }
    if (*((_DWORD *)v35 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v35))
      return 0;
    v37 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 9);
    v257 = v37;
    v38 = (JSC::VM *)*((_QWORD *)this + 7);
    if ((unint64_t)v37 < 0xFFFE000000000000)
    {
      v74 = (unint64_t)v37 - 0x2000000000000;
      if ((unint64_t)v37 - 0x2000000000000 >= 0xFFFC000000000000)
      {
        JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v257, this);
        v74 = v224;
      }
      v75 = (v74 >> 52) & 0x7FF;
      if ((v75 - 1023) <= 0x53)
      {
        v89 = v74 >> (51 - (v74 >> 52));
        if (v75 > 0x433)
          LODWORD(v89) = v74 << ((v74 >> 52) - 51);
        if (v75 >= 0x41F)
          v90 = v89;
        else
          v90 = (((1 << ((v74 >> 52) + 1)) - 1) & v89) + (1 << ((v74 >> 52) + 1));
        if ((v74 & 0x8000000000000000) == 0)
          v91 = v90;
        else
          v91 = -v90;
        v243 = v91;
      }
      else
      {
        v243 = 0;
      }
    }
    else
    {
      v243 = (int)v37;
    }
    v241 = v36;
    if (*((_DWORD *)v38 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v38))
      return 0;
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 10), &v248);
    if (v249)
      return 0;
    WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 11), &v246);
    if (v247)
      return 0;
    WebCore::Converter<WebCore::IDLUnion<WebCore::IDLInterface<WebCore::ImageBitmap>,WebCore::IDLInterface<WebCore::ImageData>,WebCore::IDLInterface<WebCore::HTMLImageElement>,WebCore::IDLInterface<WebCore::HTMLCanvasElement>,WebCore::IDLInterface<WebCore::HTMLVideoElement>,WebCore::IDLInterface<WebCore::OffscreenCanvas>,WebCore::IDLInterface<WebCore::WebCodecsVideoFrame>>>::convert((unint64_t *)this, *((_QWORD *)a2 + 12), (uint64_t)&v278);
    v39 = v281;
    if (v281)
    {
      v55 = 0;
LABEL_84:
      if (v39 != -1)
        ((void (*)(JSC::ArrayBufferView **, int *))off_1E332F4F8[v39])(&v257, &v279);
      return (_BYTE *)v55;
    }
    if (*(_BYTE *)(v30 + 33))
    {
      v112 = v33;
      WTF::StringImpl::createWithoutCopyingNonEmpty();
      v255 = v257;
      v113 = v250;
      v114 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v30 + 40) + 144))(*(_QWORD *)(v30 + 40));
      if (v114
        && (v116 = WebCore::InspectorInstrumentation::instrumentingAgents(v114, v115)) != 0
        && (v117 = *(WebCore::InspectorCanvasAgent **)(v116 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v117, (WebCore::CanvasRenderingContext *)(v30 + 8), v113, (uint64_t)&v257);
      }
      else
      {
        LOBYTE(v257) = 0;
        v259 = 0;
      }
      v127 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v30 + 40) + 144))(*(_QWORD *)(v30 + 40));
      if (v127
        && (v129 = WebCore::InspectorInstrumentation::instrumentingAgents(v127, v128)) != 0
        && (v130 = *(WebCore::InspectorCanvasAgent **)(v129 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v130, (WebCore::CanvasRenderingContext *)(v30 + 8), v112, (uint64_t)v260);
      }
      else
      {
        LOBYTE(v260[0]) = 0;
        v261 = 0;
      }
      v131 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v30 + 40) + 144))(*(_QWORD *)(v30 + 40));
      if (v131
        && (v133 = WebCore::InspectorInstrumentation::instrumentingAgents(v131, v132)) != 0
        && (v134 = *(WebCore::InspectorCanvasAgent **)(v133 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v134, (WebCore::CanvasRenderingContext *)(v30 + 8), v36, (uint64_t)v262);
      }
      else
      {
        LOBYTE(v262[0]) = 0;
        v263 = 0;
      }
      v135 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v30 + 40) + 144))(*(_QWORD *)(v30 + 40));
      if (v135
        && (v137 = WebCore::InspectorInstrumentation::instrumentingAgents(v135, v136)) != 0
        && (v138 = *(WebCore::InspectorCanvasAgent **)(v137 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v138, (WebCore::CanvasRenderingContext *)(v30 + 8), v243, (uint64_t)v264);
      }
      else
      {
        LOBYTE(v264[0]) = 0;
        v265 = 0;
      }
      v139 = v248;
      v140 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v30 + 40) + 144))(*(_QWORD *)(v30 + 40));
      if (v140
        && (v142 = WebCore::InspectorInstrumentation::instrumentingAgents(v140, v141)) != 0
        && (v143 = *(WebCore::InspectorCanvasAgent **)(v142 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v143, (WebCore::CanvasRenderingContext *)(v30 + 8), v139, (uint64_t)v266);
      }
      else
      {
        LOBYTE(v266[0]) = 0;
        v267 = 0;
      }
      v144 = v246;
      v145 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v30 + 40) + 144))(*(_QWORD *)(v30 + 40));
      if (v145
        && (v147 = WebCore::InspectorInstrumentation::instrumentingAgents(v145, v146)) != 0
        && (v148 = *(WebCore::InspectorCanvasAgent **)(v147 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v148, (WebCore::CanvasRenderingContext *)(v30 + 8), v144, (uint64_t)v268);
      }
      else
      {
        LOBYTE(v268[0]) = 0;
        v269 = 0;
      }
      if (v281)
        goto LABEL_516;
      v33 = v112;
      v149 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v30 + 40) + 144))(*(_QWORD *)(v30 + 40));
      if (v149
        && (v151 = WebCore::InspectorInstrumentation::instrumentingAgents(v149, v150)) != 0
        && (v152 = *(_QWORD *)(v151 + 96)) != 0)
      {
        WebCore::InspectorCanvasAgent::processArgument(v152, v30 + 8, (uint64_t)&v279);
      }
      else
      {
        LOBYTE(v270) = 0;
        v271 = 0;
      }
      *(_QWORD *)v252 = &v257;
      v253 = (WTF::StringImpl *)7;
      v153 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v30 + 40) + 144))(*(_QWORD *)(v30 + 40));
      if (v153)
      {
        v155 = WebCore::InspectorInstrumentation::instrumentingAgents(v153, v154);
        if (v155)
        {
          v156 = *(_QWORD *)(v155 + 96);
          if (v156)
            WebCore::InspectorCanvasAgent::recordAction(v156, (WebCore::CanvasRenderingContext *)(v30 + 8), (const WTF::StringImpl *)&v255, v252);
        }
      }
      if (v271)
      {
        v157 = v270;
        v270 = 0;
        if (v157)
        {
          if (*v157 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v157;
          v33 = v112;
        }
      }
      if (v269)
      {
        v158 = (_DWORD *)v268[0];
        v268[0] = 0;
        if (v158)
        {
          if (*v158 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v158;
          v33 = v112;
        }
      }
      if (v267)
      {
        v159 = (_DWORD *)v266[0];
        v266[0] = 0;
        if (v159)
        {
          if (*v159 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v159;
          v33 = v112;
        }
      }
      if (v265)
      {
        v160 = (_DWORD *)v264[0];
        v264[0] = 0;
        if (v160)
        {
          if (*v160 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v160;
          v33 = v112;
        }
      }
      if (v263)
      {
        v161 = (_DWORD *)v262[0];
        v262[0] = 0;
        if (v161)
        {
          if (*v161 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v161;
          v33 = v112;
        }
      }
      if (v261)
      {
        v162 = (_DWORD *)v260[0];
        v260[0] = 0;
        if (v162)
        {
          if (*v162 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*v162;
          v33 = v112;
        }
      }
      if (v259)
      {
        v163 = v257;
        v257 = 0;
        if (v163)
        {
          if (*(_DWORD *)v163 == 1)
            WTF::JSONImpl::Value::operator delete();
          else
            --*(_DWORD *)v163;
          v33 = v112;
        }
      }
      v164 = v255;
      v255 = 0;
      if (v164)
      {
        if (*(_DWORD *)v164 == 2)
          WTF::StringImpl::destroy(v164, v154);
        else
          *(_DWORD *)v164 -= 2;
      }
    }
    if (v281)
      goto LABEL_516;
    v40 = v250;
    v41 = v248;
    v42 = v246;
    LOBYTE(v255) = 0;
    v256 = -1;
    v43 = v280;
    if (v280 == -1)
    {
      LOBYTE(v257) = 0;
      LODWORD(v258) = -1;
    }
    else
    {
      v239 = v33;
      *(_QWORD *)v236 = v30;
      v44 = off_1E332F4C0[v280];
      v45 = v250;
      v46 = v248;
      v47 = v246;
      ((void (*)(JSC::ArrayBufferView **, WTF::StringImpl **, int *))v44)(&v257, &v255, &v279);
      v256 = v43;
      LOBYTE(v257) = 0;
      LODWORD(v258) = -1;
      ((void (*)(int *, JSC::ArrayBufferView **, WTF::StringImpl **))v44)(v252, &v257, &v255);
      v42 = v47;
      v41 = v46;
      v40 = v45;
      v30 = *(_QWORD *)v236;
      v33 = v239;
      LODWORD(v258) = v43;
    }
    v259 = 1;
    WebCore::WebGL2RenderingContext::texSubImage2D((WTF::StringImpl *)v30, v40, v33, v241, v243, v41, v42, (uint64_t)&v257, v252, v230, v231);
    if (v259)
    {
      if ((_DWORD)v258 != -1)
        ((void (*)(WTF::StringImpl **, JSC::ArrayBufferView **))off_1E332F488[v258])(&v245, &v257);
      LODWORD(v258) = -1;
    }
    if (v256 != -1)
      ((void (*)(WTF::StringImpl **, WTF::StringImpl **))off_1E332F488[v256])(&v245, &v255);
    if (!v254)
    {
      v55 = 10;
LABEL_83:
      v39 = v281;
      goto LABEL_84;
    }
    v118 = (WTF::StringImpl *)LOBYTE(v252[0]);
    LOBYTE(v257) = v252[0];
    v119 = v253;
    v253 = 0;
    v258 = v119;
    if (!*((_QWORD *)v232 + 2))
    {
      v120.super.isa = (Class)WebCore::createDOMException(this, (JSC::JSGlobalObject *)LOBYTE(v252[0]), (JSC::JSGlobalObject *)&v258);
      JSC::VM::throwException(v232, this, v120);
      v119 = v258;
    }
    v258 = 0;
    if (v119)
    {
      if (*(_DWORD *)v119 == 2)
        WTF::StringImpl::destroy(v119, v118);
      else
        *(_DWORD *)v119 -= 2;
    }
    if (!v254)
    {
      v55 = 0;
      goto LABEL_83;
    }
    v121 = v253;
    v253 = 0;
    if (v121)
    {
      if (*(_DWORD *)v121 != 2)
      {
        v55 = 0;
        *(_DWORD *)v121 -= 2;
        goto LABEL_83;
      }
      WTF::StringImpl::destroy(v121, v118);
    }
    v55 = 0;
    goto LABEL_83;
  }
  if (v13 == 9)
  {
    v48 = *((_QWORD *)a2 + 14);
    if ((v48 & 0xFFFFFFFFFFFFFFF7) == 2)
      return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage2D4Body((JSC::VM **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
    if ((v48 & 0xFFFE000000000002) == 0)
    {
      v51 = *(unsigned __int8 *)(v48 + 5);
      if (v51 >= 0x17)
      {
        v52 = *(unsigned int *)(16 * (*(_DWORD *)v48 & 0xFFFFFFFE) + 0x4C);
        v53 = (char **)(16 * v52);
        if ((_DWORD)v52)
          v54 = v53 == &WebCore::JSImageBitmap::s_info;
        else
          v54 = 1;
        if (v54)
        {
          if ((_DWORD)v52)
            return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage2D2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
          if (v51 - 39 <= 0xB)
            return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage2D4Body((JSC::VM **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
        }
        else
        {
          v98 = 16 * v52;
          do
            v98 = *(_QWORD *)(v98 + 16);
          while ((char **)v98 != &WebCore::JSImageBitmap::s_info && v98 != 0);
          if (v98 || v53 == &WebCore::JSImageData::s_info)
            return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage2D2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
          v100 = v53;
          do
            v100 = (char **)v100[2];
          while (v100 != &WebCore::JSImageData::s_info && v100 != 0);
          if (v100 || v53 == &WebCore::JSHTMLImageElement::s_info)
            return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage2D2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
          v102 = v53;
          do
            v102 = (char **)v102[2];
          while (v102 != &WebCore::JSHTMLImageElement::s_info && v102 != 0);
          if (v102 || v53 == &WebCore::JSHTMLCanvasElement::s_info)
            return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage2D2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
          v104 = v53;
          do
            v104 = (char **)v104[2];
          while (v104 != &WebCore::JSHTMLCanvasElement::s_info && v104 != 0);
          if (v104 || v53 == &WebCore::JSHTMLVideoElement::s_info)
            return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage2D2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
          v106 = v53;
          do
            v106 = (char **)v106[2];
          while (v106 != &WebCore::JSHTMLVideoElement::s_info && v106 != 0);
          if (v106 || v53 == &WebCore::JSOffscreenCanvas::s_info)
            return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage2D2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
          v108 = v53;
          do
            v108 = (char **)v108[2];
          while (v108 != &WebCore::JSOffscreenCanvas::s_info && v108 != 0);
          if (v108 || v53 == &WebCore::JSWebCodecsVideoFrame::s_info)
            return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage2D2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
          do
            v53 = (char **)v53[2];
          while (v53 != &WebCore::JSWebCodecsVideoFrame::s_info && v53 != 0);
          if (v53)
            return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage2D2Body(this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
          if (v51 - 39 < 0xC)
            return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage2D4Body((JSC::VM **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
        }
      }
    }
    return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_texSubImage2D1Body((JSC::VM **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
  }
  if (v13 != 10)
  {
    if (v13 > 6)
      return (_BYTE *)JSC::throwTypeError();
    v50.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v5, this, v50);
  }
  *(_QWORD *)v242 = *(_QWORD *)(v6 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), &v255);
  if (HIDWORD(v255))
    return 0;
  v14 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 7);
  v257 = v14;
  v15 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((unint64_t)v14 < 0xFFFE000000000000)
  {
    v60 = (unint64_t)v14 - 0x2000000000000;
    if ((unint64_t)v14 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v257, this);
      v60 = v219;
    }
    v61 = (v60 >> 52) & 0x7FF;
    if ((v61 - 1023) <= 0x53)
    {
      v80 = v60 >> (51 - (v60 >> 52));
      if (v61 > 0x433)
        LODWORD(v80) = v60 << ((v60 >> 52) - 51);
      if (v61 >= 0x41F)
        v81 = v80;
      else
        v81 = (((1 << ((v60 >> 52) + 1)) - 1) & v80) + (1 << ((v60 >> 52) + 1));
      if ((v60 & 0x8000000000000000) == 0)
        v16 = v81;
      else
        v16 = -v81;
    }
    else
    {
      v16 = 0;
    }
  }
  else
  {
    v16 = (int)v14;
  }
  if (*((_DWORD *)v15 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v15))
    return 0;
  v17 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 8);
  v257 = v17;
  v18 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((unint64_t)v17 < 0xFFFE000000000000)
  {
    v68 = (unint64_t)v17 - 0x2000000000000;
    if ((unint64_t)v17 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v257, this);
      v68 = v221;
    }
    v69 = (v68 >> 52) & 0x7FF;
    if ((v69 - 1023) <= 0x53)
    {
      v82 = v68 >> (51 - (v68 >> 52));
      if (v69 > 0x433)
        LODWORD(v82) = v68 << ((v68 >> 52) - 51);
      if (v69 >= 0x41F)
        v83 = v82;
      else
        v83 = (((1 << ((v68 >> 52) + 1)) - 1) & v82) + (1 << ((v68 >> 52) + 1));
      if ((v68 & 0x8000000000000000) == 0)
        v19 = v83;
      else
        v19 = -v83;
    }
    else
    {
      v19 = 0;
    }
  }
  else
  {
    v19 = (int)v17;
  }
  if (*((_DWORD *)v18 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v18))
    return 0;
  v20 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 9);
  v257 = v20;
  v21 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((unint64_t)v20 < 0xFFFE000000000000)
  {
    v72 = (unint64_t)v20 - 0x2000000000000;
    if ((unint64_t)v20 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v257, this);
      v72 = v223;
    }
    v73 = (v72 >> 52) & 0x7FF;
    if ((v73 - 1023) <= 0x53)
    {
      v86 = v72 >> (51 - (v72 >> 52));
      if (v73 > 0x433)
        LODWORD(v86) = v72 << ((v72 >> 52) - 51);
      if (v73 >= 0x41F)
        v87 = v86;
      else
        v87 = (((1 << ((v72 >> 52) + 1)) - 1) & v86) + (1 << ((v72 >> 52) + 1));
      if ((v72 & 0x8000000000000000) == 0)
        v88 = v87;
      else
        v88 = -v87;
      v240 = v88;
    }
    else
    {
      v240 = 0;
    }
  }
  else
  {
    v240 = (int)v20;
  }
  v238 = v19;
  if (*((_DWORD *)v21 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v21))
    return 0;
  v22 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 10);
  v257 = v22;
  v23 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((unint64_t)v22 < 0xFFFE000000000000)
  {
    v76 = (unint64_t)v22 - 0x2000000000000;
    if ((unint64_t)v22 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v257, this);
      v76 = v225;
    }
    v77 = (v76 >> 52) & 0x7FF;
    if ((v77 - 1023) <= 0x53)
    {
      v92 = v76 >> (51 - (v76 >> 52));
      if (v77 > 0x433)
        LODWORD(v92) = v76 << ((v76 >> 52) - 51);
      if (v77 >= 0x41F)
        v93 = v92;
      else
        v93 = (((1 << ((v76 >> 52) + 1)) - 1) & v92) + (1 << ((v76 >> 52) + 1));
      if ((v76 & 0x8000000000000000) == 0)
        v94 = v93;
      else
        v94 = -v93;
      v235 = v94;
    }
    else
    {
      v235 = 0;
    }
  }
  else
  {
    v235 = v22;
  }
  v237 = v16;
  if (*((_DWORD *)v23 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v23))
    return 0;
  v24 = (JSC::ArrayBufferView *)*((_QWORD *)a2 + 11);
  v257 = v24;
  v25 = (JSC::VM *)*((_QWORD *)this + 7);
  if ((unint64_t)v24 < 0xFFFE000000000000)
  {
    v78 = (unint64_t)v24 - 0x2000000000000;
    if ((unint64_t)v24 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v257, this);
      v78 = v226;
    }
    v79 = (v78 >> 52) & 0x7FF;
    if ((v79 - 1023) <= 0x53)
    {
      v95 = v78 >> (51 - (v78 >> 52));
      if (v79 > 0x433)
        LODWORD(v95) = v78 << ((v78 >> 52) - 51);
      if (v79 >= 0x41F)
        v96 = v95;
      else
        v96 = (((1 << ((v78 >> 52) + 1)) - 1) & v95) + (1 << ((v78 >> 52) + 1));
      if ((v78 & 0x8000000000000000) == 0)
        v97 = v96;
      else
        v97 = -v96;
      v234 = v97;
    }
    else
    {
      v234 = 0;
    }
  }
  else
  {
    v234 = v24;
  }
  if (*((_DWORD *)v25 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v25))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 12), &v250);
  if (v251)
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 13), &v248);
  if (v249)
    return 0;
  v27 = *((_QWORD *)a2 + 14);
  v278 = (JSC::ArrayBufferView *)*((_QWORD *)this + 7);
  if ((v27 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(v27 + 5) - 39 > 0xB
    || (*(_BYTE *)(v27 + 40) & 6) != 0)
  {
    *(_QWORD *)v252 = 0;
    goto LABEL_39;
  }
  JSC::JSArrayBufferView::possiblySharedImpl((JSC::JSArrayBufferView *)v27);
  if (!*(_QWORD *)v252)
  {
LABEL_39:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v278, 8, "srcData", 8, "WebGL2RenderingContext", 23, v26, "texSubImage2D", 14, "ArrayBufferView", 16);
    v28 = 1;
    LODWORD(v258) = 1;
    v29 = *(JSC::ArrayBufferView **)v252;
    *(_QWORD *)v252 = 0;
    if (v29)
    {
      if (*(_DWORD *)v29 == 1)
        JSC::ArrayBufferView::operator delete();
      else
        --*(_DWORD *)v29;
    }
    goto LABEL_89;
  }
  v28 = 0;
  v257 = *(JSC::ArrayBufferView **)v252;
  LODWORD(v258) = 0;
LABEL_89:
  LOBYTE(v278) = 0;
  v279 = -1;
  ((void (*)(int *, JSC::ArrayBufferView **, JSC::ArrayBufferView **))off_1E332F388[v28])(v252, &v278, &v257);
  v279 = v28;
  if ((_DWORD)v258 != -1)
  {
    ((void (*)(int *, JSC::ArrayBufferView **))off_1E332F378[v258])(v252, &v257);
    v28 = v279;
  }
  if (v28)
  {
    v55 = 0;
LABEL_108:
    if (v28 != -1)
      ((void (*)(JSC::ArrayBufferView **, JSC::ArrayBufferView **, uint64_t))off_1E332F378[v28])(&v257, &v278, v56);
    return (_BYTE *)v55;
  }
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 15), &v246);
  if (v247)
  {
    v55 = 0;
LABEL_107:
    v28 = v279;
    goto LABEL_108;
  }
  v57 = *(_QWORD *)v242;
  if (*(_BYTE *)(*(_QWORD *)v242 + 33))
  {
    v233 = (WebCore::CanvasRenderingContext *)(*(_QWORD *)v242 + 8);
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v245 = v257;
    v122 = v255;
    v123 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v242 + 40)
                                                                                  + 144))(*(_QWORD *)(*(_QWORD *)v242 + 40));
    if (v123
      && (v125 = WebCore::InspectorInstrumentation::instrumentingAgents(v123, v124)) != 0
      && (v126 = *(WebCore::InspectorCanvasAgent **)(v125 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v126, v233, v122, (uint64_t)&v257);
    }
    else
    {
      LOBYTE(v257) = 0;
      v259 = 0;
    }
    v165 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v242 + 40)
                                                                                  + 144))(*(_QWORD *)(*(_QWORD *)v242 + 40));
    if (v165
      && (v167 = WebCore::InspectorInstrumentation::instrumentingAgents(v165, v166)) != 0
      && (v168 = *(WebCore::InspectorCanvasAgent **)(v167 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v168, v233, v237, (uint64_t)v260);
    }
    else
    {
      LOBYTE(v260[0]) = 0;
      v261 = 0;
    }
    v169 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v242 + 40)
                                                                                  + 144))(*(_QWORD *)(*(_QWORD *)v242 + 40));
    if (v169
      && (v171 = WebCore::InspectorInstrumentation::instrumentingAgents(v169, v170)) != 0
      && (v172 = *(WebCore::InspectorCanvasAgent **)(v171 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v172, v233, v238, (uint64_t)v262);
    }
    else
    {
      LOBYTE(v262[0]) = 0;
      v263 = 0;
    }
    v173 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v242 + 40)
                                                                                  + 144))(*(_QWORD *)(*(_QWORD *)v242 + 40));
    if (v173
      && (v175 = WebCore::InspectorInstrumentation::instrumentingAgents(v173, v174)) != 0
      && (v176 = *(WebCore::InspectorCanvasAgent **)(v175 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v176, v233, v240, (uint64_t)v264);
    }
    else
    {
      LOBYTE(v264[0]) = 0;
      v265 = 0;
    }
    v177 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v242 + 40)
                                                                                  + 144))(*(_QWORD *)(*(_QWORD *)v242 + 40));
    if (v177
      && (v179 = WebCore::InspectorInstrumentation::instrumentingAgents(v177, v178)) != 0
      && (v180 = *(WebCore::InspectorCanvasAgent **)(v179 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v180, v233, v235, (uint64_t)v266);
    }
    else
    {
      LOBYTE(v266[0]) = 0;
      v267 = 0;
    }
    v181 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v242 + 40)
                                                                                  + 144))(*(_QWORD *)(*(_QWORD *)v242 + 40));
    if (v181
      && (v183 = WebCore::InspectorInstrumentation::instrumentingAgents(v181, v182)) != 0
      && (v184 = *(WebCore::InspectorCanvasAgent **)(v183 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v184, v233, v234, (uint64_t)v268);
    }
    else
    {
      LOBYTE(v268[0]) = 0;
      v269 = 0;
    }
    v185 = v250;
    v186 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v242 + 40)
                                                                                  + 144))(*(_QWORD *)(*(_QWORD *)v242 + 40));
    if (v186
      && (v188 = WebCore::InspectorInstrumentation::instrumentingAgents(v186, v187)) != 0
      && (v189 = *(WebCore::InspectorCanvasAgent **)(v188 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v189, v233, v185, (uint64_t)&v270);
    }
    else
    {
      LOBYTE(v270) = 0;
      v271 = 0;
    }
    v190 = v248;
    v191 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v242 + 40)
                                                                                  + 144))(*(_QWORD *)(*(_QWORD *)v242 + 40));
    if (v191
      && (v193 = WebCore::InspectorInstrumentation::instrumentingAgents(v191, v192)) != 0
      && (v194 = *(WebCore::InspectorCanvasAgent **)(v193 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v194, v233, v190, (uint64_t)&v272);
    }
    else
    {
      LOBYTE(v272) = 0;
      v273 = 0;
    }
    if (v279)
      goto LABEL_516;
    v195 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v242 + 40)
                                                                                  + 144))(*(_QWORD *)(*(_QWORD *)v242 + 40));
    if (v195
      && (v197 = WebCore::InspectorInstrumentation::instrumentingAgents(v195, v196)) != 0
      && (v198 = *(_QWORD *)(v197 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v198, (uint64_t)v233, (uint64_t)&v274);
    }
    else
    {
      LOBYTE(v274) = 0;
      v275 = 0;
    }
    v199 = v246;
    v200 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v242 + 40)
                                                                                  + 144))(*(_QWORD *)(*(_QWORD *)v242 + 40));
    if (v200
      && (v202 = WebCore::InspectorInstrumentation::instrumentingAgents(v200, v201)) != 0
      && (v203 = *(WebCore::InspectorCanvasAgent **)(v202 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v203, v233, v199, (uint64_t)&v276);
    }
    else
    {
      LOBYTE(v276) = 0;
      v277 = 0;
    }
    *(_QWORD *)v252 = &v257;
    v253 = (WTF::StringImpl *)10;
    v204 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v242 + 40)
                                                                                  + 144))(*(_QWORD *)(*(_QWORD *)v242 + 40));
    if (v204)
    {
      v206 = WebCore::InspectorInstrumentation::instrumentingAgents(v204, v205);
      if (v206)
      {
        v207 = *(_QWORD *)(v206 + 96);
        if (v207)
          WebCore::InspectorCanvasAgent::recordAction(v207, v233, (const WTF::StringImpl *)&v245, v252);
      }
    }
    if (v277)
    {
      v208 = v276;
      v276 = 0;
      if (v208)
      {
        if (*v208 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v208;
        v57 = *(_QWORD *)v242;
      }
    }
    if (v275)
    {
      v209 = v274;
      v274 = 0;
      if (v209)
      {
        if (*v209 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v209;
        v57 = *(_QWORD *)v242;
      }
    }
    if (v273)
    {
      v210 = v272;
      v272 = 0;
      if (v210)
      {
        if (*v210 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v210;
        v57 = *(_QWORD *)v242;
      }
    }
    if (v271)
    {
      v211 = v270;
      v270 = 0;
      if (v211)
      {
        if (*v211 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v211;
        v57 = *(_QWORD *)v242;
      }
    }
    if (v269)
    {
      v212 = (_DWORD *)v268[0];
      v268[0] = 0;
      if (v212)
      {
        if (*v212 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v212;
        v57 = *(_QWORD *)v242;
      }
    }
    if (v267)
    {
      v213 = (_DWORD *)v266[0];
      v266[0] = 0;
      if (v213)
      {
        if (*v213 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v213;
        v57 = *(_QWORD *)v242;
      }
    }
    if (v265)
    {
      v214 = (_DWORD *)v264[0];
      v264[0] = 0;
      if (v214)
      {
        if (*v214 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v214;
        v57 = *(_QWORD *)v242;
      }
    }
    if (v263)
    {
      v215 = (_DWORD *)v262[0];
      v262[0] = 0;
      if (v215)
      {
        if (*v215 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v215;
        v57 = *(_QWORD *)v242;
      }
    }
    if (v261)
    {
      v216 = (_DWORD *)v260[0];
      v260[0] = 0;
      if (v216)
      {
        if (*v216 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v216;
        v57 = *(_QWORD *)v242;
      }
    }
    if (v259)
    {
      v217 = v257;
      v257 = 0;
      if (v217)
      {
        if (*(_DWORD *)v217 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v217;
        v57 = *(_QWORD *)v242;
      }
    }
    v218 = v245;
    v245 = 0;
    if (v218)
    {
      if (*(_DWORD *)v218 == 2)
        WTF::StringImpl::destroy(v218, v205);
      else
        *(_DWORD *)v218 -= 2;
    }
  }
  if (!v279)
  {
    v56 = v255;
    v58 = v278;
    v278 = 0;
    v257 = v58;
    if (!*(_BYTE *)(v57 + 364))
    {
      if (*(_QWORD *)(v57 + 976))
        v59 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
      else
        v59 = 0;
      if (v59)
      {
        WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v57, 1282, (uint64_t)"texImage2D", 11, (uint64_t)"a buffer is bound to PIXEL_UNPACK_BUFFER", 41);
      }
      else
      {
        WebCore::WebGLRenderingContextBase::texImageArrayBufferViewHelper((_QWORD *)v57, 1, v255, v237, 0, v235, v234, 1, 0, v250, v248, v238, v240, 0, &v257, 2, v246);
        v58 = v257;
      }
    }
    v257 = 0;
    if (v58)
    {
      if (*(_DWORD *)v58 == 1)
        JSC::ArrayBufferView::operator delete();
      else
        --*(_DWORD *)v58;
    }
    v55 = 10;
    goto LABEL_107;
  }
LABEL_516:
  v227 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_compressedTexImage2D(v227, v228, v229);
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_compressedTexImage2D(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  JSC::VM *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  JSC::VM *v20;
  unint64_t v21;
  JSC::VM *v22;
  unint64_t v23;
  JSC::VM *v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  JSValue v30;
  uint64_t v32;
  JSC::ArrayBufferView *v33;
  uint64_t (*v34)();
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  unint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  int v49;
  int v50;
  unint64_t v51;
  unsigned int v52;
  unsigned int v53;
  WebCore::InspectorInstrumentation *v54;
  WebCore::ScriptExecutionContext *v55;
  uint64_t v56;
  WebCore::InspectorCanvasAgent *v57;
  WebCore::InspectorInstrumentation *v58;
  WebCore::ScriptExecutionContext *v59;
  uint64_t v60;
  WebCore::InspectorCanvasAgent *v61;
  unsigned int v62;
  WebCore::InspectorInstrumentation *v63;
  WebCore::ScriptExecutionContext *v64;
  uint64_t v65;
  WebCore::InspectorCanvasAgent *v66;
  WebCore::InspectorInstrumentation *v67;
  WebCore::ScriptExecutionContext *v68;
  uint64_t v69;
  WebCore::InspectorCanvasAgent *v70;
  WebCore::InspectorInstrumentation *v71;
  WebCore::ScriptExecutionContext *v72;
  uint64_t v73;
  WebCore::InspectorCanvasAgent *v74;
  WebCore::InspectorInstrumentation *v75;
  WebCore::ScriptExecutionContext *v76;
  uint64_t v77;
  WebCore::InspectorCanvasAgent *v78;
  WebCore::InspectorInstrumentation *v79;
  WebCore::ScriptExecutionContext *v80;
  uint64_t v81;
  uint64_t v82;
  WebCore::InspectorInstrumentation *v83;
  WebCore::ScriptExecutionContext *v84;
  uint64_t v85;
  uint64_t v86;
  _DWORD *v87;
  _DWORD *v88;
  _DWORD *v89;
  _DWORD *v90;
  _DWORD *v91;
  _DWORD *v92;
  WTF::StringImpl *v93;
  WTF::StringImpl *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  JSC::VM *v98;
  unint64_t v99;
  WebCore *v100;
  JSC::JSGlobalObject *v101;
  JSC::CallFrame *v102;
  unsigned int v103;
  unsigned int v104;
  unsigned int v105;
  JSC::VM *v106;
  _QWORD v107[2];
  WTF::StringImpl *v108;
  JSC::ArrayBufferView *v109;
  int v110;
  unsigned int v111[2];
  unsigned int v112[2];
  WTF::StringImpl *v113;
  int v114;
  char v115;
  _DWORD *v116;
  char v117;
  _DWORD *v118;
  char v119;
  _DWORD *v120;
  char v121;
  _DWORD *v122;
  char v123;
  _DWORD *v124;
  char v125;
  _DWORD *v126;
  char v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v106 = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v106, "WebGL2RenderingContext", "compressedTexImage2D");
  v8 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
  v9 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &WebCore::JSWebGL2RenderingContext::s_info && v10 != 0);
  }
  if (!v9)
    return WebCore::throwThisTypeError((int)this, (int)&v106, "WebGL2RenderingContext", "compressedTexImage2D");
  v13 = *((int *)a2 + 8) - 1;
  if (v13 >= 9)
    v13 = 9;
  if (v13 == 9)
    return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_compressedTexImage2D2Body((JSC::ArrayBufferView **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
  if (v13 == 8)
  {
    v28 = *((_QWORD *)a2 + 12);
    if ((v28 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v28 + 5) - 39 > 0xB)
      return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_compressedTexImage2D1Body((JSC::VM **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
    return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_compressedTexImage2D2Body((JSC::ArrayBufferView **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
  }
  if (v13 != 7)
  {
    v30.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v5, this, v30);
  }
  v14 = *(_QWORD *)(v6 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v112);
  if (v112[1])
    return 0;
  v15 = *((_QWORD *)a2 + 7);
  v113 = (WTF::StringImpl *)v15;
  v16 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v15 < 0xFFFE000000000000)
  {
    v35 = v15 - 0x2000000000000;
    if (v15 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v113, this);
      v35 = v95;
    }
    v36 = (v35 >> 52) & 0x7FF;
    if ((v36 - 1023) <= 0x53)
    {
      v43 = v35 >> (51 - (v35 >> 52));
      if (v36 > 0x433)
        LODWORD(v43) = v35 << ((v35 >> 52) - 51);
      if (v36 >= 0x41F)
        v44 = v43;
      else
        v44 = (((1 << ((v35 >> 52) + 1)) - 1) & v43) + (1 << ((v35 >> 52) + 1));
      if ((v35 & 0x8000000000000000) == 0)
        v17 = v44;
      else
        v17 = -v44;
    }
    else
    {
      v17 = 0;
    }
  }
  else
  {
    v17 = v15;
  }
  if (*((_DWORD *)v16 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v16))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 8), v111);
  if (v111[1])
    return 0;
  v105 = v17;
  v19 = *((_QWORD *)a2 + 9);
  v113 = (WTF::StringImpl *)v19;
  v20 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v19 < 0xFFFE000000000000)
  {
    v37 = v19 - 0x2000000000000;
    if (v19 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v113, this);
      v37 = v96;
    }
    v38 = (v37 >> 52) & 0x7FF;
    if ((v38 - 1023) <= 0x53)
    {
      v45 = v37 >> (51 - (v37 >> 52));
      if (v38 > 0x433)
        LODWORD(v45) = v37 << ((v37 >> 52) - 51);
      if (v38 >= 0x41F)
        v46 = v45;
      else
        v46 = (((1 << ((v37 >> 52) + 1)) - 1) & v45) + (1 << ((v37 >> 52) + 1));
      if ((v37 & 0x8000000000000000) == 0)
        v47 = v46;
      else
        v47 = -v46;
      v104 = v47;
    }
    else
    {
      v104 = 0;
    }
  }
  else
  {
    v104 = v19;
  }
  if (*((_DWORD *)v20 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v20))
    return 0;
  v21 = *((_QWORD *)a2 + 10);
  v113 = (WTF::StringImpl *)v21;
  v22 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v21 < 0xFFFE000000000000)
  {
    v39 = v21 - 0x2000000000000;
    if (v21 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v113, this);
      v39 = v97;
    }
    v40 = (v39 >> 52) & 0x7FF;
    if ((v40 - 1023) <= 0x53)
    {
      v48 = v39 >> (51 - (v39 >> 52));
      if (v40 > 0x433)
        LODWORD(v48) = v39 << ((v39 >> 52) - 51);
      if (v40 >= 0x41F)
        v49 = v48;
      else
        v49 = (((1 << ((v39 >> 52) + 1)) - 1) & v48) + (1 << ((v39 >> 52) + 1));
      if ((v39 & 0x8000000000000000) == 0)
        v50 = v49;
      else
        v50 = -v49;
      v103 = v50;
    }
    else
    {
      v103 = 0;
    }
  }
  else
  {
    v103 = v21;
  }
  if (*((_DWORD *)v22 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v22))
    return 0;
  v23 = *((_QWORD *)a2 + 11);
  v113 = (WTF::StringImpl *)v23;
  v24 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v23 < 0xFFFE000000000000)
  {
    v41 = v23 - 0x2000000000000;
    if (v23 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      v98 = (JSC::VM *)*((_QWORD *)this + 7);
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v113, this);
      v24 = v98;
      v41 = v99;
    }
    v42 = (v41 >> 52) & 0x7FF;
    if ((v42 - 1023) <= 0x53)
    {
      v51 = v41 >> (51 - (v41 >> 52));
      if (v42 > 0x433)
        LODWORD(v51) = v41 << ((v41 >> 52) - 51);
      if (v42 >= 0x41F)
        v52 = v51;
      else
        v52 = (((1 << ((v41 >> 52) + 1)) - 1) & v51) + (1 << ((v41 >> 52) + 1));
      if ((v41 & 0x8000000000000000) == 0)
        v25 = v52;
      else
        v25 = -v52;
    }
    else
    {
      v25 = 0;
    }
  }
  else
  {
    v25 = v23;
  }
  if (*((_DWORD *)v24 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v24))
    return 0;
  v26 = *((_QWORD *)a2 + 12);
  v109 = (JSC::ArrayBufferView *)*((_QWORD *)this + 7);
  if ((v26 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(v26 + 5) - 39 > 0xB
    || (*(_BYTE *)(v26 + 40) & 6) != 0)
  {
    v107[0] = 0;
LABEL_35:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v109, 6, "data", 5, "WebGL2RenderingContext", 23, v18, "compressedTexImage2D", 21, "ArrayBufferView", 16);
    v27 = 1;
    v114 = 1;
    v107[0] = 0;
    goto LABEL_43;
  }
  JSC::JSArrayBufferView::possiblySharedImpl((JSC::JSArrayBufferView *)v26);
  if (!v107[0])
    goto LABEL_35;
  v27 = 0;
  v113 = (WTF::StringImpl *)v107[0];
  v114 = 0;
LABEL_43:
  LOBYTE(v109) = 0;
  v110 = -1;
  ((void (*)(_QWORD *, JSC::ArrayBufferView **, WTF::StringImpl **))off_1E332F388[v27])(v107, &v109, &v113);
  v110 = v27;
  if (v114 != -1)
  {
    ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F378[v114])(v107, &v113);
    v27 = v110;
  }
  if (v27)
  {
    v32 = 0;
LABEL_59:
    if (v110 != -1)
      ((void (*)(WTF::StringImpl **, JSC::ArrayBufferView **))off_1E332F378[v110])(&v113, &v109);
    return (_BYTE *)v32;
  }
  if (*(_BYTE *)(v14 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v108 = v113;
    v53 = v112[0];
    v54 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 40) + 144))(*(_QWORD *)(v14 + 40));
    if (v54
      && (v56 = WebCore::InspectorInstrumentation::instrumentingAgents(v54, v55)) != 0
      && (v57 = *(WebCore::InspectorCanvasAgent **)(v56 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v57, (WebCore::CanvasRenderingContext *)(v14 + 8), v53, (uint64_t)&v113);
    }
    else
    {
      LOBYTE(v113) = 0;
      v115 = 0;
    }
    v58 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 40) + 144))(*(_QWORD *)(v14 + 40));
    if (v58
      && (v60 = WebCore::InspectorInstrumentation::instrumentingAgents(v58, v59)) != 0
      && (v61 = *(WebCore::InspectorCanvasAgent **)(v60 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v61, (WebCore::CanvasRenderingContext *)(v14 + 8), v105, (uint64_t)&v116);
    }
    else
    {
      LOBYTE(v116) = 0;
      v117 = 0;
    }
    v62 = v111[0];
    v63 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 40) + 144))(*(_QWORD *)(v14 + 40));
    if (v63
      && (v65 = WebCore::InspectorInstrumentation::instrumentingAgents(v63, v64)) != 0
      && (v66 = *(WebCore::InspectorCanvasAgent **)(v65 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v66, (WebCore::CanvasRenderingContext *)(v14 + 8), v62, (uint64_t)&v118);
    }
    else
    {
      LOBYTE(v118) = 0;
      v119 = 0;
    }
    v67 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 40) + 144))(*(_QWORD *)(v14 + 40));
    if (v67
      && (v69 = WebCore::InspectorInstrumentation::instrumentingAgents(v67, v68)) != 0
      && (v70 = *(WebCore::InspectorCanvasAgent **)(v69 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v70, (WebCore::CanvasRenderingContext *)(v14 + 8), v104, (uint64_t)&v120);
    }
    else
    {
      LOBYTE(v120) = 0;
      v121 = 0;
    }
    v71 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 40) + 144))(*(_QWORD *)(v14 + 40));
    if (v71
      && (v73 = WebCore::InspectorInstrumentation::instrumentingAgents(v71, v72)) != 0
      && (v74 = *(WebCore::InspectorCanvasAgent **)(v73 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v74, (WebCore::CanvasRenderingContext *)(v14 + 8), v103, (uint64_t)&v122);
    }
    else
    {
      LOBYTE(v122) = 0;
      v123 = 0;
    }
    v75 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 40) + 144))(*(_QWORD *)(v14 + 40));
    if (v75
      && (v77 = WebCore::InspectorInstrumentation::instrumentingAgents(v75, v76)) != 0
      && (v78 = *(WebCore::InspectorCanvasAgent **)(v77 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v78, (WebCore::CanvasRenderingContext *)(v14 + 8), v25, (uint64_t)&v124);
    }
    else
    {
      LOBYTE(v124) = 0;
      v125 = 0;
    }
    if (v110)
      goto LABEL_204;
    v79 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 40) + 144))(*(_QWORD *)(v14 + 40));
    if (v79
      && (v81 = WebCore::InspectorInstrumentation::instrumentingAgents(v79, v80)) != 0
      && (v82 = *(_QWORD *)(v81 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v82, v14 + 8, (uint64_t)&v126);
    }
    else
    {
      LOBYTE(v126) = 0;
      v127 = 0;
    }
    v107[0] = &v113;
    v107[1] = 7;
    v83 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v14 + 40) + 144))(*(_QWORD *)(v14 + 40));
    if (v83)
    {
      v85 = WebCore::InspectorInstrumentation::instrumentingAgents(v83, v84);
      if (v85)
      {
        v86 = *(_QWORD *)(v85 + 96);
        if (v86)
          WebCore::InspectorCanvasAgent::recordAction(v86, (WebCore::CanvasRenderingContext *)(v14 + 8), (const WTF::StringImpl *)&v108, v107);
      }
    }
    if (v127)
    {
      v87 = v126;
      v126 = 0;
      if (v87)
      {
        if (*v87 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v87;
      }
    }
    if (v125)
    {
      v88 = v124;
      v124 = 0;
      if (v88)
      {
        if (*v88 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v88;
      }
    }
    if (v123)
    {
      v89 = v122;
      v122 = 0;
      if (v89)
      {
        if (*v89 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v89;
      }
    }
    if (v121)
    {
      v90 = v120;
      v120 = 0;
      if (v90)
      {
        if (*v90 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v90;
      }
    }
    if (v119)
    {
      v91 = v118;
      v118 = 0;
      if (v91)
      {
        if (*v91 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v91;
      }
    }
    if (v117)
    {
      v92 = v116;
      v116 = 0;
      if (v92)
      {
        if (*v92 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v92;
      }
    }
    if (v115)
    {
      v93 = v113;
      v113 = 0;
      if (v93)
      {
        if (*(_DWORD *)v93 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v93;
      }
    }
    v94 = v108;
    v108 = 0;
    if (v94)
    {
      if (*(_DWORD *)v94 == 2)
        WTF::StringImpl::destroy(v94, v84);
      else
        *(_DWORD *)v94 -= 2;
    }
  }
  if (!v110)
  {
    v33 = v109;
    v109 = 0;
    if (!*(_BYTE *)(v14 + 364))
    {
      if (*(_QWORD *)(v14 + 976))
        v34 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
      else
        v34 = 0;
      if (v34)
        WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v14, 1282, (uint64_t)"compressedTexImage2D", 21, (uint64_t)"a buffer is bound to PIXEL_UNPACK_BUFFER", 41);
      else
        WebCore::WebGLRenderingContextBase::compressedTexImage2D((WTF::StringImpl *)v14, v112[0], v105, v111[0], v104, v103, v25, v33);
    }
    if (*(_DWORD *)v33 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*(_DWORD *)v33;
    v32 = 10;
    goto LABEL_59;
  }
LABEL_204:
  v100 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_compressedTexSubImage2D(v100, v101, v102);
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_compressedTexSubImage2D(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4)
{
  JSC::VM *v5;
  uint64_t v6;
  uint64_t v8;
  BOOL v9;
  char **v10;
  BOOL v11;
  unint64_t v13;
  JSValue v14;
  uint64_t v16;
  unint64_t v17;
  JSC::VM *v18;
  unsigned int v19;
  unint64_t v20;
  JSC::VM *v21;
  unint64_t v22;
  JSC::VM *v23;
  unint64_t v24;
  JSC::VM *v25;
  unint64_t v26;
  JSC::VM *v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  JSC::ArrayBufferView *v32;
  uint64_t (*v33)();
  uint64_t v34;
  unint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unint64_t v39;
  int v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  int v52;
  unint64_t v53;
  int v54;
  int v55;
  unint64_t v56;
  int v57;
  int v58;
  unint64_t v59;
  int v60;
  int v61;
  unsigned int v62;
  WebCore::InspectorInstrumentation *v63;
  WebCore::ScriptExecutionContext *v64;
  uint64_t v65;
  WebCore::InspectorCanvasAgent *v66;
  WebCore::InspectorInstrumentation *v67;
  WebCore::ScriptExecutionContext *v68;
  uint64_t v69;
  WebCore::InspectorCanvasAgent *v70;
  WebCore::InspectorInstrumentation *v71;
  WebCore::ScriptExecutionContext *v72;
  uint64_t v73;
  WebCore::InspectorCanvasAgent *v74;
  WebCore::InspectorInstrumentation *v75;
  WebCore::ScriptExecutionContext *v76;
  uint64_t v77;
  WebCore::InspectorCanvasAgent *v78;
  WebCore::InspectorInstrumentation *v79;
  WebCore::ScriptExecutionContext *v80;
  uint64_t v81;
  WebCore::InspectorCanvasAgent *v82;
  WebCore::InspectorInstrumentation *v83;
  WebCore::ScriptExecutionContext *v84;
  uint64_t v85;
  WebCore::InspectorCanvasAgent *v86;
  unsigned int v87;
  WebCore::InspectorInstrumentation *v88;
  WebCore::ScriptExecutionContext *v89;
  uint64_t v90;
  WebCore::InspectorCanvasAgent *v91;
  WebCore::InspectorInstrumentation *v92;
  WebCore::ScriptExecutionContext *v93;
  uint64_t v94;
  uint64_t v95;
  WebCore::InspectorInstrumentation *v96;
  WebCore::ScriptExecutionContext *v97;
  uint64_t v98;
  uint64_t v99;
  _DWORD *v100;
  _DWORD *v101;
  _DWORD *v102;
  _DWORD *v103;
  _DWORD *v104;
  _DWORD *v105;
  _DWORD *v106;
  WTF::StringImpl *v107;
  WTF::StringImpl *v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  WebCore *v114;
  JSC::JSGlobalObject *v115;
  JSC::CallFrame *v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unsigned int v121;
  _QWORD v122[2];
  _QWORD v123[2];
  WTF::StringImpl *v124;
  JSC::ArrayBufferView *v125;
  int v126;
  unsigned int v127[2];
  unsigned int v128[2];
  WTF::StringImpl *v129;
  int v130;
  char v131;
  _DWORD *v132;
  char v133;
  _DWORD *v134;
  char v135;
  _DWORD *v136;
  char v137;
  _DWORD *v138;
  char v139;
  _DWORD *v140;
  char v141;
  _DWORD *v142;
  char v143;
  _DWORD *v144;
  char v145;
  uint64_t v146;

  v146 = *MEMORY[0x1E0C80C00];
  v5 = (JSC::VM *)*((_QWORD *)this + 7);
  v122[0] = v5;
  v6 = *((_QWORD *)a2 + 5);
  if ((v6 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)v122, "WebGL2RenderingContext", "compressedTexSubImage2D");
  v8 = *(unsigned int *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C);
  v9 = *(_DWORD *)(16 * (*(_DWORD *)v6 & 0xFFFFFFFE) + 0x4C) != 0;
  v10 = (char **)(16 * v8);
  if ((_DWORD)v8)
    v11 = v10 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v11 = 1;
  if (!v11)
  {
    do
    {
      v10 = (char **)v10[2];
      v9 = v10 != 0;
    }
    while (v10 != &WebCore::JSWebGL2RenderingContext::s_info && v10 != 0);
  }
  if (!v9)
    return WebCore::throwThisTypeError((int)this, (int)v122, "WebGL2RenderingContext", "compressedTexSubImage2D");
  v122[1] = v5;
  v13 = *((int *)a2 + 8) - 1;
  if (v13 >= 0xA)
    v13 = 10;
  if (v13 != 8)
  {
    if (v13 == 9)
    {
      v31 = *((_QWORD *)a2 + 13);
      if ((v31 & 0xFFFE000000000002) != 0 || *(unsigned __int8 *)(v31 + 5) - 39 > 0xB)
        return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_compressedTexSubImage2D1Body((JSC::VM **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
    }
    else if (v13 != 10)
    {
      v14.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
      return (_BYTE *)JSC::VM::throwException(v5, this, v14);
    }
    return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_compressedTexSubImage2D2Body((JSC::ArrayBufferView **)this, a2, *(JSC::CallFrame **)(v6 + 24), a4);
  }
  v16 = *(_QWORD *)(v6 + 24);
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 6), v128);
  if (v128[1])
    return 0;
  v17 = *((_QWORD *)a2 + 7);
  v129 = (WTF::StringImpl *)v17;
  v18 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v17 < 0xFFFE000000000000)
  {
    v36 = v17 - 0x2000000000000;
    if (v17 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v129, this);
      v36 = v109;
    }
    v37 = (v36 >> 52) & 0x7FF;
    v38 = v37 - 1023;
    v39 = v36 >> (51 - (v36 >> 52));
    if (v37 > 0x433)
      LODWORD(v39) = v36 << ((v36 >> 52) - 51);
    if (v37 >= 0x41F)
      v40 = v39;
    else
      v40 = (((1 << ((v36 >> 52) + 1)) - 1) & v39) + (1 << ((v36 >> 52) + 1));
    if ((v36 & 0x8000000000000000) == 0)
      v41 = v40;
    else
      v41 = -v40;
    if (v38 <= 0x53)
      v19 = v41;
    else
      v19 = 0;
  }
  else
  {
    v19 = v17;
  }
  if (*((_DWORD *)v18 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v18))
    return 0;
  v20 = *((_QWORD *)a2 + 8);
  v129 = (WTF::StringImpl *)v20;
  v21 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v20 < 0xFFFE000000000000)
  {
    v42 = v20 - 0x2000000000000;
    if (v20 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v129, this);
      v42 = v110;
    }
    v43 = (v42 >> 52) & 0x7FF;
    if ((v43 - 1023) <= 0x53)
    {
      v50 = v42 >> (51 - (v42 >> 52));
      if (v43 > 0x433)
        LODWORD(v50) = v42 << ((v42 >> 52) - 51);
      if (v43 >= 0x41F)
        v51 = v50;
      else
        v51 = (((1 << ((v42 >> 52) + 1)) - 1) & v50) + (1 << ((v42 >> 52) + 1));
      if ((v42 & 0x8000000000000000) == 0)
        v52 = v51;
      else
        v52 = -v51;
      v121 = v52;
    }
    else
    {
      v121 = 0;
    }
  }
  else
  {
    v121 = v20;
  }
  if (*((_DWORD *)v21 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v21))
    return 0;
  v22 = *((_QWORD *)a2 + 9);
  v129 = (WTF::StringImpl *)v22;
  v23 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v22 < 0xFFFE000000000000)
  {
    v44 = v22 - 0x2000000000000;
    if (v22 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v129, this);
      v44 = v111;
    }
    v45 = (v44 >> 52) & 0x7FF;
    if ((v45 - 1023) <= 0x53)
    {
      v53 = v44 >> (51 - (v44 >> 52));
      if (v45 > 0x433)
        LODWORD(v53) = v44 << ((v44 >> 52) - 51);
      if (v45 >= 0x41F)
        v54 = v53;
      else
        v54 = (((1 << ((v44 >> 52) + 1)) - 1) & v53) + (1 << ((v44 >> 52) + 1));
      if ((v44 & 0x8000000000000000) == 0)
        v55 = v54;
      else
        v55 = -v54;
      v119 = v55;
    }
    else
    {
      v119 = 0;
    }
  }
  else
  {
    v119 = v22;
  }
  v120 = v19;
  if (*((_DWORD *)v23 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v23))
    return 0;
  v24 = *((_QWORD *)a2 + 10);
  v129 = (WTF::StringImpl *)v24;
  v25 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v24 < 0xFFFE000000000000)
  {
    v46 = v24 - 0x2000000000000;
    if (v24 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v129, this);
      v46 = v112;
    }
    v47 = (v46 >> 52) & 0x7FF;
    if ((v47 - 1023) <= 0x53)
    {
      v56 = v46 >> (51 - (v46 >> 52));
      if (v47 > 0x433)
        LODWORD(v56) = v46 << ((v46 >> 52) - 51);
      if (v47 >= 0x41F)
        v57 = v56;
      else
        v57 = (((1 << ((v46 >> 52) + 1)) - 1) & v56) + (1 << ((v46 >> 52) + 1));
      if ((v46 & 0x8000000000000000) == 0)
        v58 = v57;
      else
        v58 = -v57;
      v118 = v58;
    }
    else
    {
      v118 = 0;
    }
  }
  else
  {
    v118 = v24;
  }
  if (*((_DWORD *)v25 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v25))
    return 0;
  v26 = *((_QWORD *)a2 + 11);
  v129 = (WTF::StringImpl *)v26;
  v27 = (JSC::VM *)*((_QWORD *)this + 7);
  if (v26 < 0xFFFE000000000000)
  {
    v48 = v26 - 0x2000000000000;
    if (v26 - 0x2000000000000 >= 0xFFFC000000000000)
    {
      JSC::JSValue::toNumberSlowCase((JSC::JSValue *)&v129, this);
      v48 = v113;
    }
    v49 = (v48 >> 52) & 0x7FF;
    if ((v49 - 1023) <= 0x53)
    {
      v59 = v48 >> (51 - (v48 >> 52));
      if (v49 > 0x433)
        LODWORD(v59) = v48 << ((v48 >> 52) - 51);
      if (v49 >= 0x41F)
        v60 = v59;
      else
        v60 = (((1 << ((v48 >> 52) + 1)) - 1) & v59) + (1 << ((v48 >> 52) + 1));
      if ((v48 & 0x8000000000000000) == 0)
        v61 = v60;
      else
        v61 = -v60;
      v117 = v61;
    }
    else
    {
      v117 = 0;
    }
  }
  else
  {
    v117 = v26;
  }
  if (*((_DWORD *)v27 + 20) && JSC::VM::hasExceptionsAfterHandlingTraps(v27))
    return 0;
  WebCore::convertToInteger<WebCore::IDLUnsignedLong>(this, *((_QWORD *)a2 + 12), v127);
  if (v127[1])
    return 0;
  v29 = *((_QWORD *)a2 + 13);
  v125 = (JSC::ArrayBufferView *)*((_QWORD *)this + 7);
  if ((v29 & 0xFFFE000000000002) != 0
    || *(unsigned __int8 *)(v29 + 5) - 39 > 0xB
    || (*(_BYTE *)(v29 + 40) & 6) != 0)
  {
    v123[0] = 0;
LABEL_39:
    WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)&v125, 7, "data", 5, "WebGL2RenderingContext", 23, v28, "compressedTexSubImage2D", 24, "ArrayBufferView", 16);
    v30 = 1;
    v130 = 1;
    v123[0] = 0;
    goto LABEL_45;
  }
  JSC::JSArrayBufferView::possiblySharedImpl((JSC::JSArrayBufferView *)v29);
  if (!v123[0])
    goto LABEL_39;
  v30 = 0;
  v129 = (WTF::StringImpl *)v123[0];
  v130 = 0;
LABEL_45:
  LOBYTE(v125) = 0;
  v126 = -1;
  ((void (*)(_QWORD *, JSC::ArrayBufferView **, WTF::StringImpl **))off_1E332F388[v30])(v123, &v125, &v129);
  v126 = v30;
  if (v130 != -1)
  {
    ((void (*)(_QWORD *, WTF::StringImpl **))off_1E332F378[v130])(v123, &v129);
    v30 = v126;
  }
  if (v30)
  {
    v34 = 0;
LABEL_62:
    if (v126 != -1)
      ((void (*)(WTF::StringImpl **, JSC::ArrayBufferView **))off_1E332F378[v126])(&v129, &v125);
    return (_BYTE *)v34;
  }
  if (*(_BYTE *)(v16 + 33))
  {
    WTF::StringImpl::createWithoutCopyingNonEmpty();
    v124 = v129;
    v62 = v128[0];
    v63 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v63
      && (v65 = WebCore::InspectorInstrumentation::instrumentingAgents(v63, v64)) != 0
      && (v66 = *(WebCore::InspectorCanvasAgent **)(v65 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v66, (WebCore::CanvasRenderingContext *)(v16 + 8), v62, (uint64_t)&v129);
    }
    else
    {
      LOBYTE(v129) = 0;
      v131 = 0;
    }
    v67 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v67
      && (v69 = WebCore::InspectorInstrumentation::instrumentingAgents(v67, v68)) != 0
      && (v70 = *(WebCore::InspectorCanvasAgent **)(v69 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v70, (WebCore::CanvasRenderingContext *)(v16 + 8), v120, (uint64_t)&v132);
    }
    else
    {
      LOBYTE(v132) = 0;
      v133 = 0;
    }
    v71 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v71
      && (v73 = WebCore::InspectorInstrumentation::instrumentingAgents(v71, v72)) != 0
      && (v74 = *(WebCore::InspectorCanvasAgent **)(v73 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v74, (WebCore::CanvasRenderingContext *)(v16 + 8), v121, (uint64_t)&v134);
    }
    else
    {
      LOBYTE(v134) = 0;
      v135 = 0;
    }
    v75 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v75
      && (v77 = WebCore::InspectorInstrumentation::instrumentingAgents(v75, v76)) != 0
      && (v78 = *(WebCore::InspectorCanvasAgent **)(v77 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v78, (WebCore::CanvasRenderingContext *)(v16 + 8), v119, (uint64_t)&v136);
    }
    else
    {
      LOBYTE(v136) = 0;
      v137 = 0;
    }
    v79 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v79
      && (v81 = WebCore::InspectorInstrumentation::instrumentingAgents(v79, v80)) != 0
      && (v82 = *(WebCore::InspectorCanvasAgent **)(v81 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v82, (WebCore::CanvasRenderingContext *)(v16 + 8), v118, (uint64_t)&v138);
    }
    else
    {
      LOBYTE(v138) = 0;
      v139 = 0;
    }
    v83 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v83
      && (v85 = WebCore::InspectorInstrumentation::instrumentingAgents(v83, v84)) != 0
      && (v86 = *(WebCore::InspectorCanvasAgent **)(v85 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v86, (WebCore::CanvasRenderingContext *)(v16 + 8), v117, (uint64_t)&v140);
    }
    else
    {
      LOBYTE(v140) = 0;
      v141 = 0;
    }
    v87 = v127[0];
    v88 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v88
      && (v90 = WebCore::InspectorInstrumentation::instrumentingAgents(v88, v89)) != 0
      && (v91 = *(WebCore::InspectorCanvasAgent **)(v90 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v91, (WebCore::CanvasRenderingContext *)(v16 + 8), v87, (uint64_t)&v142);
    }
    else
    {
      LOBYTE(v142) = 0;
      v143 = 0;
    }
    if (v126)
      goto LABEL_234;
    v92 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v92
      && (v94 = WebCore::InspectorInstrumentation::instrumentingAgents(v92, v93)) != 0
      && (v95 = *(_QWORD *)(v94 + 96)) != 0)
    {
      WebCore::InspectorCanvasAgent::processArgument(v95, v16 + 8, (uint64_t)&v144);
    }
    else
    {
      LOBYTE(v144) = 0;
      v145 = 0;
    }
    v123[0] = &v129;
    v123[1] = 8;
    v96 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v16 + 40) + 144))(*(_QWORD *)(v16 + 40));
    if (v96)
    {
      v98 = WebCore::InspectorInstrumentation::instrumentingAgents(v96, v97);
      if (v98)
      {
        v99 = *(_QWORD *)(v98 + 96);
        if (v99)
          WebCore::InspectorCanvasAgent::recordAction(v99, (WebCore::CanvasRenderingContext *)(v16 + 8), (const WTF::StringImpl *)&v124, v123);
      }
    }
    if (v145)
    {
      v100 = v144;
      v144 = 0;
      if (v100)
      {
        if (*v100 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v100;
      }
    }
    if (v143)
    {
      v101 = v142;
      v142 = 0;
      if (v101)
      {
        if (*v101 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v101;
      }
    }
    if (v141)
    {
      v102 = v140;
      v140 = 0;
      if (v102)
      {
        if (*v102 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v102;
      }
    }
    if (v139)
    {
      v103 = v138;
      v138 = 0;
      if (v103)
      {
        if (*v103 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v103;
      }
    }
    if (v137)
    {
      v104 = v136;
      v136 = 0;
      if (v104)
      {
        if (*v104 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v104;
      }
    }
    if (v135)
    {
      v105 = v134;
      v134 = 0;
      if (v105)
      {
        if (*v105 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v105;
      }
    }
    if (v133)
    {
      v106 = v132;
      v132 = 0;
      if (v106)
      {
        if (*v106 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*v106;
      }
    }
    if (v131)
    {
      v107 = v129;
      v129 = 0;
      if (v107)
      {
        if (*(_DWORD *)v107 == 1)
          WTF::JSONImpl::Value::operator delete();
        else
          --*(_DWORD *)v107;
      }
    }
    v108 = v124;
    v124 = 0;
    if (v108)
    {
      if (*(_DWORD *)v108 == 2)
        WTF::StringImpl::destroy(v108, v97);
      else
        *(_DWORD *)v108 -= 2;
    }
  }
  if (!v126)
  {
    v32 = v125;
    v125 = 0;
    if (!*(_BYTE *)(v16 + 364))
    {
      if (*(_QWORD *)(v16 + 976))
        v33 = WTF::RefPtr<WebCore::WebGLBuffer,WTF::RawPtrTraits<WebCore::WebGLBuffer>,WTF::DefaultRefDerefTraits<WebCore::WebGLBuffer>>::unspecifiedBoolTypeInstance;
      else
        v33 = 0;
      if (v33)
        WebCore::WebGLRenderingContextBase::synthesizeGLError((WTF::StringImpl *)v16, 1282, (uint64_t)"compressedTexSubImage2D", 24, (uint64_t)"a buffer is bound to PIXEL_UNPACK_BUFFER", 41);
      else
        WebCore::WebGLRenderingContextBase::compressedTexSubImage2D((WTF::StringImpl *)v16, v128[0], v120, v121, v119, v118, v117, v127[0], v32);
    }
    if (*(_DWORD *)v32 == 1)
      JSC::ArrayBufferView::operator delete();
    else
      --*(_DWORD *)v32;
    v34 = 10;
    goto LABEL_62;
  }
LABEL_234:
  v114 = (WebCore *)std::__throw_bad_variant_access[abi:sn180100]();
  return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform1fv(v114, v115, v116);
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform1fv(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSValue v21;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  char **v26;
  BOOL v27;
  int v29;
  int v30;
  uint64_t (*v31)();
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::InspectorInstrumentation *v40;
  WebCore::ScriptExecutionContext *v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  WTF::StringImpl *v46;
  JSC::VM *v47;
  _QWORD v48[2];
  int v49;
  _QWORD v50[2];
  int v51;
  _QWORD v52[2];
  char v53;
  _DWORD *v54;
  char v55;
  char v56[8];
  _BYTE v57[16];
  int v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v47 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v47, "WebGL2RenderingContext", "uniform1fv");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v47, "WebGL2RenderingContext", "uniform1fv");
  v16 = *((int *)a2 + 8) - 1;
  if (v16 >= 4)
    v16 = 4;
  if (v16 == 4 || v16 == 3)
    return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform1fv1Body(this, a2, *(JSC::CallFrame **)(v10 + 24), a4, a5, a6, a7, a8);
  if (v16 != 2)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v21);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  if ((v18 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v19 = 0;
LABEL_35:
    WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLFloat32Array>,WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>>::convert(this, *((JSC::JSGlobalObject **)a2 + 7), (uint64_t)v56);
    v29 = v59;
    if (v59)
    {
      v23 = 0;
    }
    else
    {
      if (*(_BYTE *)(v17 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
        if (v32
          && (v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33)) != 0
          && (v35 = *(_QWORD *)(v34 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v35, (WTF::StringImpl *)(v17 + 8), v19, (uint64_t)v52);
        }
        else
        {
          LOBYTE(v52[0]) = 0;
          v53 = 0;
        }
        if (v59)
          goto LABEL_81;
        v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
        if (v36
          && (v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37)) != 0
          && (v39 = *(_QWORD *)(v38 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v39, v17 + 8, (uint64_t)v57);
        }
        else
        {
          LOBYTE(v54) = 0;
          v55 = 0;
        }
        v50[0] = v52;
        v50[1] = 2;
        v40 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
        if (v40)
        {
          v42 = WebCore::InspectorInstrumentation::instrumentingAgents(v40, v41);
          if (v42)
          {
            v43 = *(_QWORD *)(v42 + 96);
            if (v43)
              WebCore::InspectorCanvasAgent::recordAction(v43, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)v48, v50);
          }
        }
        if (v55)
        {
          v44 = v54;
          v54 = 0;
          if (v44)
          {
            if (*v44 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v44;
          }
        }
        if (v53)
        {
          v45 = (_DWORD *)v52[0];
          v52[0] = 0;
          if (v45)
          {
            if (*v45 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v45;
          }
        }
        v46 = (WTF::StringImpl *)v48[0];
        v48[0] = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            goto LABEL_82;
          *(_DWORD *)v46 -= 2;
        }
        while (v59)
        {
LABEL_81:
          v46 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_82:
          WTF::StringImpl::destroy(v46, v41);
        }
      }
      LOBYTE(v48[0]) = 0;
      v49 = -1;
      v30 = v58;
      if (v58 == -1)
      {
        LOBYTE(v50[0]) = 0;
        v51 = -1;
      }
      else
      {
        v31 = off_1E332F548[v58];
        ((void (*)(_QWORD *, _QWORD *, _BYTE *))v31)(v52, v48, v57);
        v49 = v30;
        LOBYTE(v50[0]) = 0;
        v51 = -1;
        ((void (*)(_QWORD *, _QWORD *, _QWORD *))v31)(v52, v50, v48);
        v51 = v30;
      }
      if (!*(_BYTE *)(v17 + 364))
      {
        WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<float,JSC::GenericTypedArrayView<JSC::Float32Adaptor>>((WTF::StringImpl *)v17, (uint64_t)"uniform1fv", 11, v19, 0, (uint64_t)v50, 1, 0, (uint64_t)v52, 0);
        if (v53)
          (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v17 + 88) + 840))(*(_QWORD *)(v17 + 88), *(unsigned int *)(v19 + 16), v52[0], v52[1]);
        v30 = v51;
      }
      if (v30 != -1)
        ((void (*)(_QWORD *, _QWORD *))off_1E332F538[v30])(v52, v50);
      v51 = -1;
      if (v49 != -1)
        ((void (*)(_QWORD *, _QWORD *))off_1E332F538[v49])(v52, v48);
      v29 = v59;
      v23 = 10;
    }
    if (v29 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E332F558[v29])(v52, v57);
    return (_BYTE *)v23;
  }
  v52[0] = v9;
  if ((v18 & 0xFFFE000000000002) == 0)
  {
    v24 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
    v25 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
    v26 = (char **)(16 * v24);
    if ((_DWORD)v24)
      v27 = v26 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v27 = 1;
    if (!v27)
    {
      do
      {
        v26 = (char **)v26[2];
        v25 = v26 != 0;
      }
      while (v26 != &WebCore::JSWebGLUniformLocation::s_info && v26 != 0);
    }
    if (v25)
    {
      v19 = *(_QWORD *)(v18 + 24);
      if (v19)
        goto LABEL_35;
    }
  }
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v52, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniform1fv", 11, "WebGLUniformLocation", 21);
  return 0;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform2fv(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSValue v21;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  char **v26;
  BOOL v27;
  int v29;
  int v30;
  uint64_t (*v31)();
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::InspectorInstrumentation *v40;
  WebCore::ScriptExecutionContext *v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  WTF::StringImpl *v46;
  JSC::VM *v47;
  _QWORD v48[2];
  int v49;
  _QWORD v50[2];
  int v51;
  _QWORD v52[2];
  char v53;
  _DWORD *v54;
  char v55;
  char v56[8];
  _BYTE v57[16];
  int v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v47 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v47, "WebGL2RenderingContext", "uniform2fv");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v47, "WebGL2RenderingContext", "uniform2fv");
  v16 = *((int *)a2 + 8) - 1;
  if (v16 >= 4)
    v16 = 4;
  if (v16 == 4 || v16 == 3)
    return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform2fv1Body(this, a2, *(JSC::CallFrame **)(v10 + 24), a4, a5, a6, a7, a8);
  if (v16 != 2)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v21);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  if ((v18 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v19 = 0;
LABEL_35:
    WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLFloat32Array>,WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>>::convert(this, *((JSC::JSGlobalObject **)a2 + 7), (uint64_t)v56);
    v29 = v59;
    if (v59)
    {
      v23 = 0;
    }
    else
    {
      if (*(_BYTE *)(v17 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
        if (v32
          && (v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33)) != 0
          && (v35 = *(_QWORD *)(v34 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v35, (WTF::StringImpl *)(v17 + 8), v19, (uint64_t)v52);
        }
        else
        {
          LOBYTE(v52[0]) = 0;
          v53 = 0;
        }
        if (v59)
          goto LABEL_81;
        v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
        if (v36
          && (v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37)) != 0
          && (v39 = *(_QWORD *)(v38 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v39, v17 + 8, (uint64_t)v57);
        }
        else
        {
          LOBYTE(v54) = 0;
          v55 = 0;
        }
        v50[0] = v52;
        v50[1] = 2;
        v40 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
        if (v40)
        {
          v42 = WebCore::InspectorInstrumentation::instrumentingAgents(v40, v41);
          if (v42)
          {
            v43 = *(_QWORD *)(v42 + 96);
            if (v43)
              WebCore::InspectorCanvasAgent::recordAction(v43, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)v48, v50);
          }
        }
        if (v55)
        {
          v44 = v54;
          v54 = 0;
          if (v44)
          {
            if (*v44 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v44;
          }
        }
        if (v53)
        {
          v45 = (_DWORD *)v52[0];
          v52[0] = 0;
          if (v45)
          {
            if (*v45 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v45;
          }
        }
        v46 = (WTF::StringImpl *)v48[0];
        v48[0] = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            goto LABEL_82;
          *(_DWORD *)v46 -= 2;
        }
        while (v59)
        {
LABEL_81:
          v46 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_82:
          WTF::StringImpl::destroy(v46, v41);
        }
      }
      LOBYTE(v48[0]) = 0;
      v49 = -1;
      v30 = v58;
      if (v58 == -1)
      {
        LOBYTE(v50[0]) = 0;
        v51 = -1;
      }
      else
      {
        v31 = off_1E332F548[v58];
        ((void (*)(_QWORD *, _QWORD *, _BYTE *))v31)(v52, v48, v57);
        v49 = v30;
        LOBYTE(v50[0]) = 0;
        v51 = -1;
        ((void (*)(_QWORD *, _QWORD *, _QWORD *))v31)(v52, v50, v48);
        v51 = v30;
      }
      if (!*(_BYTE *)(v17 + 364))
      {
        WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<float,JSC::GenericTypedArrayView<JSC::Float32Adaptor>>((WTF::StringImpl *)v17, (uint64_t)"uniform2fv", 11, v19, 0, (uint64_t)v50, 2, 0, (uint64_t)v52, 0);
        if (v53)
          (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v17 + 88) + 872))(*(_QWORD *)(v17 + 88), *(unsigned int *)(v19 + 16), v52[0], v52[1]);
        v30 = v51;
      }
      if (v30 != -1)
        ((void (*)(_QWORD *, _QWORD *))off_1E332F538[v30])(v52, v50);
      v51 = -1;
      if (v49 != -1)
        ((void (*)(_QWORD *, _QWORD *))off_1E332F538[v49])(v52, v48);
      v29 = v59;
      v23 = 10;
    }
    if (v29 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E332F558[v29])(v52, v57);
    return (_BYTE *)v23;
  }
  v52[0] = v9;
  if ((v18 & 0xFFFE000000000002) == 0)
  {
    v24 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
    v25 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
    v26 = (char **)(16 * v24);
    if ((_DWORD)v24)
      v27 = v26 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v27 = 1;
    if (!v27)
    {
      do
      {
        v26 = (char **)v26[2];
        v25 = v26 != 0;
      }
      while (v26 != &WebCore::JSWebGLUniformLocation::s_info && v26 != 0);
    }
    if (v25)
    {
      v19 = *(_QWORD *)(v18 + 24);
      if (v19)
        goto LABEL_35;
    }
  }
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v52, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniform2fv", 11, "WebGLUniformLocation", 21);
  return 0;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform3fv(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSValue v21;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  char **v26;
  BOOL v27;
  int v29;
  int v30;
  uint64_t (*v31)();
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::InspectorInstrumentation *v40;
  WebCore::ScriptExecutionContext *v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  WTF::StringImpl *v46;
  JSC::VM *v47;
  _QWORD v48[2];
  int v49;
  _QWORD v50[2];
  int v51;
  _QWORD v52[2];
  char v53;
  _DWORD *v54;
  char v55;
  char v56[8];
  _BYTE v57[16];
  int v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v47 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v47, "WebGL2RenderingContext", "uniform3fv");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v47, "WebGL2RenderingContext", "uniform3fv");
  v16 = *((int *)a2 + 8) - 1;
  if (v16 >= 4)
    v16 = 4;
  if (v16 == 4 || v16 == 3)
    return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform3fv1Body(this, a2, *(JSC::CallFrame **)(v10 + 24), a4, a5, a6, a7, a8);
  if (v16 != 2)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v21);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  if ((v18 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v19 = 0;
LABEL_35:
    WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLFloat32Array>,WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>>::convert(this, *((JSC::JSGlobalObject **)a2 + 7), (uint64_t)v56);
    v29 = v59;
    if (v59)
    {
      v23 = 0;
    }
    else
    {
      if (*(_BYTE *)(v17 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
        if (v32
          && (v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33)) != 0
          && (v35 = *(_QWORD *)(v34 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v35, (WTF::StringImpl *)(v17 + 8), v19, (uint64_t)v52);
        }
        else
        {
          LOBYTE(v52[0]) = 0;
          v53 = 0;
        }
        if (v59)
          goto LABEL_81;
        v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
        if (v36
          && (v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37)) != 0
          && (v39 = *(_QWORD *)(v38 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v39, v17 + 8, (uint64_t)v57);
        }
        else
        {
          LOBYTE(v54) = 0;
          v55 = 0;
        }
        v50[0] = v52;
        v50[1] = 2;
        v40 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
        if (v40)
        {
          v42 = WebCore::InspectorInstrumentation::instrumentingAgents(v40, v41);
          if (v42)
          {
            v43 = *(_QWORD *)(v42 + 96);
            if (v43)
              WebCore::InspectorCanvasAgent::recordAction(v43, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)v48, v50);
          }
        }
        if (v55)
        {
          v44 = v54;
          v54 = 0;
          if (v44)
          {
            if (*v44 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v44;
          }
        }
        if (v53)
        {
          v45 = (_DWORD *)v52[0];
          v52[0] = 0;
          if (v45)
          {
            if (*v45 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v45;
          }
        }
        v46 = (WTF::StringImpl *)v48[0];
        v48[0] = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            goto LABEL_82;
          *(_DWORD *)v46 -= 2;
        }
        while (v59)
        {
LABEL_81:
          v46 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_82:
          WTF::StringImpl::destroy(v46, v41);
        }
      }
      LOBYTE(v48[0]) = 0;
      v49 = -1;
      v30 = v58;
      if (v58 == -1)
      {
        LOBYTE(v50[0]) = 0;
        v51 = -1;
      }
      else
      {
        v31 = off_1E332F548[v58];
        ((void (*)(_QWORD *, _QWORD *, _BYTE *))v31)(v52, v48, v57);
        v49 = v30;
        LOBYTE(v50[0]) = 0;
        v51 = -1;
        ((void (*)(_QWORD *, _QWORD *, _QWORD *))v31)(v52, v50, v48);
        v51 = v30;
      }
      if (!*(_BYTE *)(v17 + 364))
      {
        WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<float,JSC::GenericTypedArrayView<JSC::Float32Adaptor>>((WTF::StringImpl *)v17, (uint64_t)"uniform3fv", 11, v19, 0, (uint64_t)v50, 3, 0, (uint64_t)v52, 0);
        if (v53)
          (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v17 + 88) + 904))(*(_QWORD *)(v17 + 88), *(unsigned int *)(v19 + 16), v52[0], v52[1]);
        v30 = v51;
      }
      if (v30 != -1)
        ((void (*)(_QWORD *, _QWORD *))off_1E332F538[v30])(v52, v50);
      v51 = -1;
      if (v49 != -1)
        ((void (*)(_QWORD *, _QWORD *))off_1E332F538[v49])(v52, v48);
      v29 = v59;
      v23 = 10;
    }
    if (v29 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E332F558[v29])(v52, v57);
    return (_BYTE *)v23;
  }
  v52[0] = v9;
  if ((v18 & 0xFFFE000000000002) == 0)
  {
    v24 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
    v25 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
    v26 = (char **)(16 * v24);
    if ((_DWORD)v24)
      v27 = v26 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v27 = 1;
    if (!v27)
    {
      do
      {
        v26 = (char **)v26[2];
        v25 = v26 != 0;
      }
      while (v26 != &WebCore::JSWebGLUniformLocation::s_info && v26 != 0);
    }
    if (v25)
    {
      v19 = *(_QWORD *)(v18 + 24);
      if (v19)
        goto LABEL_35;
    }
  }
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v52, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniform3fv", 11, "WebGLUniformLocation", 21);
  return 0;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform4fv(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSValue v21;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  char **v26;
  BOOL v27;
  int v29;
  int v30;
  uint64_t (*v31)();
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::InspectorInstrumentation *v40;
  WebCore::ScriptExecutionContext *v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  WTF::StringImpl *v46;
  JSC::VM *v47;
  _QWORD v48[2];
  int v49;
  _QWORD v50[2];
  int v51;
  _QWORD v52[2];
  char v53;
  _DWORD *v54;
  char v55;
  char v56[8];
  _BYTE v57[16];
  int v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v47 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v47, "WebGL2RenderingContext", "uniform4fv");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v47, "WebGL2RenderingContext", "uniform4fv");
  v16 = *((int *)a2 + 8) - 1;
  if (v16 >= 4)
    v16 = 4;
  if (v16 == 4 || v16 == 3)
    return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform4fv1Body(this, a2, *(JSC::CallFrame **)(v10 + 24), a4, a5, a6, a7, a8);
  if (v16 != 2)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v21);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  if ((v18 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v19 = 0;
LABEL_35:
    WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLFloat32Array>,WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>>::convert(this, *((JSC::JSGlobalObject **)a2 + 7), (uint64_t)v56);
    v29 = v59;
    if (v59)
    {
      v23 = 0;
    }
    else
    {
      if (*(_BYTE *)(v17 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
        if (v32
          && (v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33)) != 0
          && (v35 = *(_QWORD *)(v34 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v35, (WTF::StringImpl *)(v17 + 8), v19, (uint64_t)v52);
        }
        else
        {
          LOBYTE(v52[0]) = 0;
          v53 = 0;
        }
        if (v59)
          goto LABEL_81;
        v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
        if (v36
          && (v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37)) != 0
          && (v39 = *(_QWORD *)(v38 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v39, v17 + 8, (uint64_t)v57);
        }
        else
        {
          LOBYTE(v54) = 0;
          v55 = 0;
        }
        v50[0] = v52;
        v50[1] = 2;
        v40 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
        if (v40)
        {
          v42 = WebCore::InspectorInstrumentation::instrumentingAgents(v40, v41);
          if (v42)
          {
            v43 = *(_QWORD *)(v42 + 96);
            if (v43)
              WebCore::InspectorCanvasAgent::recordAction(v43, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)v48, v50);
          }
        }
        if (v55)
        {
          v44 = v54;
          v54 = 0;
          if (v44)
          {
            if (*v44 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v44;
          }
        }
        if (v53)
        {
          v45 = (_DWORD *)v52[0];
          v52[0] = 0;
          if (v45)
          {
            if (*v45 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v45;
          }
        }
        v46 = (WTF::StringImpl *)v48[0];
        v48[0] = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            goto LABEL_82;
          *(_DWORD *)v46 -= 2;
        }
        while (v59)
        {
LABEL_81:
          v46 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_82:
          WTF::StringImpl::destroy(v46, v41);
        }
      }
      LOBYTE(v48[0]) = 0;
      v49 = -1;
      v30 = v58;
      if (v58 == -1)
      {
        LOBYTE(v50[0]) = 0;
        v51 = -1;
      }
      else
      {
        v31 = off_1E332F548[v58];
        ((void (*)(_QWORD *, _QWORD *, _BYTE *))v31)(v52, v48, v57);
        v49 = v30;
        LOBYTE(v50[0]) = 0;
        v51 = -1;
        ((void (*)(_QWORD *, _QWORD *, _QWORD *))v31)(v52, v50, v48);
        v51 = v30;
      }
      if (!*(_BYTE *)(v17 + 364))
      {
        WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<float,JSC::GenericTypedArrayView<JSC::Float32Adaptor>>((WTF::StringImpl *)v17, (uint64_t)"uniform4fv", 11, v19, 0, (uint64_t)v50, 4, 0, (uint64_t)v52, 0);
        if (v53)
          (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v17 + 88) + 936))(*(_QWORD *)(v17 + 88), *(unsigned int *)(v19 + 16), v52[0], v52[1]);
        v30 = v51;
      }
      if (v30 != -1)
        ((void (*)(_QWORD *, _QWORD *))off_1E332F538[v30])(v52, v50);
      v51 = -1;
      if (v49 != -1)
        ((void (*)(_QWORD *, _QWORD *))off_1E332F538[v49])(v52, v48);
      v29 = v59;
      v23 = 10;
    }
    if (v29 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E332F558[v29])(v52, v57);
    return (_BYTE *)v23;
  }
  v52[0] = v9;
  if ((v18 & 0xFFFE000000000002) == 0)
  {
    v24 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
    v25 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
    v26 = (char **)(16 * v24);
    if ((_DWORD)v24)
      v27 = v26 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v27 = 1;
    if (!v27)
    {
      do
      {
        v26 = (char **)v26[2];
        v25 = v26 != 0;
      }
      while (v26 != &WebCore::JSWebGLUniformLocation::s_info && v26 != 0);
    }
    if (v25)
    {
      v19 = *(_QWORD *)(v18 + 24);
      if (v19)
        goto LABEL_35;
    }
  }
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v52, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniform4fv", 11, "WebGLUniformLocation", 21);
  return 0;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform1iv(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSValue v21;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  char **v26;
  BOOL v27;
  int v29;
  int v30;
  uint64_t (*v31)();
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::InspectorInstrumentation *v40;
  WebCore::ScriptExecutionContext *v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  WTF::StringImpl *v46;
  JSC::VM *v47;
  _QWORD v48[2];
  int v49;
  _QWORD v50[2];
  int v51;
  _QWORD v52[2];
  char v53;
  _DWORD *v54;
  char v55;
  char v56[8];
  _BYTE v57[16];
  int v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v47 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v47, "WebGL2RenderingContext", "uniform1iv");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v47, "WebGL2RenderingContext", "uniform1iv");
  v16 = *((int *)a2 + 8) - 1;
  if (v16 >= 4)
    v16 = 4;
  if (v16 == 4 || v16 == 3)
    return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform1iv1Body(this, a2, *(JSC::CallFrame **)(v10 + 24), a4, a5, a6, a7, a8);
  if (v16 != 2)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v21);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  if ((v18 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v19 = 0;
LABEL_35:
    WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLInt32Array>,WebCore::IDLSequence<WebCore::IDLLong>>>::convert(this, *((JSC::JSGlobalObject **)a2 + 7), (uint64_t)v56);
    v29 = v59;
    if (v59)
    {
      v23 = 0;
    }
    else
    {
      if (*(_BYTE *)(v17 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
        if (v32
          && (v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33)) != 0
          && (v35 = *(_QWORD *)(v34 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v35, (WTF::StringImpl *)(v17 + 8), v19, (uint64_t)v52);
        }
        else
        {
          LOBYTE(v52[0]) = 0;
          v53 = 0;
        }
        if (v59)
          goto LABEL_81;
        v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
        if (v36
          && (v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37)) != 0
          && (v39 = *(_QWORD *)(v38 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v39, v17 + 8, (uint64_t)v57);
        }
        else
        {
          LOBYTE(v54) = 0;
          v55 = 0;
        }
        v50[0] = v52;
        v50[1] = 2;
        v40 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
        if (v40)
        {
          v42 = WebCore::InspectorInstrumentation::instrumentingAgents(v40, v41);
          if (v42)
          {
            v43 = *(_QWORD *)(v42 + 96);
            if (v43)
              WebCore::InspectorCanvasAgent::recordAction(v43, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)v48, v50);
          }
        }
        if (v55)
        {
          v44 = v54;
          v54 = 0;
          if (v44)
          {
            if (*v44 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v44;
          }
        }
        if (v53)
        {
          v45 = (_DWORD *)v52[0];
          v52[0] = 0;
          if (v45)
          {
            if (*v45 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v45;
          }
        }
        v46 = (WTF::StringImpl *)v48[0];
        v48[0] = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            goto LABEL_82;
          *(_DWORD *)v46 -= 2;
        }
        while (v59)
        {
LABEL_81:
          v46 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_82:
          WTF::StringImpl::destroy(v46, v41);
        }
      }
      LOBYTE(v48[0]) = 0;
      v49 = -1;
      v30 = v58;
      if (v58 == -1)
      {
        LOBYTE(v50[0]) = 0;
        v51 = -1;
      }
      else
      {
        v31 = off_1E332F578[v58];
        ((void (*)(_QWORD *, _QWORD *, _BYTE *))v31)(v52, v48, v57);
        v49 = v30;
        LOBYTE(v50[0]) = 0;
        v51 = -1;
        ((void (*)(_QWORD *, _QWORD *, _QWORD *))v31)(v52, v50, v48);
        v51 = v30;
      }
      if (!*(_BYTE *)(v17 + 364))
      {
        WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<int,JSC::GenericTypedArrayView<JSC::Int32Adaptor>>((WTF::StringImpl *)v17, (uint64_t)"uniform1iv", 11, v19, 0, (uint64_t)v50, 1, 0, (uint64_t)v52, 0);
        if (v53)
          (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v17 + 88) + 856))(*(_QWORD *)(v17 + 88), *(unsigned int *)(v19 + 16), v52[0], v52[1]);
        v30 = v51;
      }
      if (v30 != -1)
        ((void (*)(_QWORD *, _QWORD *))off_1E332F568[v30])(v52, v50);
      v51 = -1;
      if (v49 != -1)
        ((void (*)(_QWORD *, _QWORD *))off_1E332F568[v49])(v52, v48);
      v29 = v59;
      v23 = 10;
    }
    if (v29 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E332F598[v29])(v52, v57);
    return (_BYTE *)v23;
  }
  v52[0] = v9;
  if ((v18 & 0xFFFE000000000002) == 0)
  {
    v24 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
    v25 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
    v26 = (char **)(16 * v24);
    if ((_DWORD)v24)
      v27 = v26 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v27 = 1;
    if (!v27)
    {
      do
      {
        v26 = (char **)v26[2];
        v25 = v26 != 0;
      }
      while (v26 != &WebCore::JSWebGLUniformLocation::s_info && v26 != 0);
    }
    if (v25)
    {
      v19 = *(_QWORD *)(v18 + 24);
      if (v19)
        goto LABEL_35;
    }
  }
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v52, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniform1iv", 11, "WebGLUniformLocation", 21);
  return 0;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform2iv(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSValue v21;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  char **v26;
  BOOL v27;
  int v29;
  int v30;
  uint64_t (*v31)();
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::InspectorInstrumentation *v40;
  WebCore::ScriptExecutionContext *v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  WTF::StringImpl *v46;
  JSC::VM *v47;
  _QWORD v48[2];
  int v49;
  _QWORD v50[2];
  int v51;
  _QWORD v52[2];
  char v53;
  _DWORD *v54;
  char v55;
  char v56[8];
  _BYTE v57[16];
  int v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v47 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v47, "WebGL2RenderingContext", "uniform2iv");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v47, "WebGL2RenderingContext", "uniform2iv");
  v16 = *((int *)a2 + 8) - 1;
  if (v16 >= 4)
    v16 = 4;
  if (v16 == 4 || v16 == 3)
    return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform2iv1Body(this, a2, *(JSC::CallFrame **)(v10 + 24), a4, a5, a6, a7, a8);
  if (v16 != 2)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v21);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  if ((v18 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v19 = 0;
LABEL_35:
    WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLInt32Array>,WebCore::IDLSequence<WebCore::IDLLong>>>::convert(this, *((JSC::JSGlobalObject **)a2 + 7), (uint64_t)v56);
    v29 = v59;
    if (v59)
    {
      v23 = 0;
    }
    else
    {
      if (*(_BYTE *)(v17 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
        if (v32
          && (v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33)) != 0
          && (v35 = *(_QWORD *)(v34 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v35, (WTF::StringImpl *)(v17 + 8), v19, (uint64_t)v52);
        }
        else
        {
          LOBYTE(v52[0]) = 0;
          v53 = 0;
        }
        if (v59)
          goto LABEL_81;
        v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
        if (v36
          && (v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37)) != 0
          && (v39 = *(_QWORD *)(v38 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v39, v17 + 8, (uint64_t)v57);
        }
        else
        {
          LOBYTE(v54) = 0;
          v55 = 0;
        }
        v50[0] = v52;
        v50[1] = 2;
        v40 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
        if (v40)
        {
          v42 = WebCore::InspectorInstrumentation::instrumentingAgents(v40, v41);
          if (v42)
          {
            v43 = *(_QWORD *)(v42 + 96);
            if (v43)
              WebCore::InspectorCanvasAgent::recordAction(v43, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)v48, v50);
          }
        }
        if (v55)
        {
          v44 = v54;
          v54 = 0;
          if (v44)
          {
            if (*v44 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v44;
          }
        }
        if (v53)
        {
          v45 = (_DWORD *)v52[0];
          v52[0] = 0;
          if (v45)
          {
            if (*v45 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v45;
          }
        }
        v46 = (WTF::StringImpl *)v48[0];
        v48[0] = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            goto LABEL_82;
          *(_DWORD *)v46 -= 2;
        }
        while (v59)
        {
LABEL_81:
          v46 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_82:
          WTF::StringImpl::destroy(v46, v41);
        }
      }
      LOBYTE(v48[0]) = 0;
      v49 = -1;
      v30 = v58;
      if (v58 == -1)
      {
        LOBYTE(v50[0]) = 0;
        v51 = -1;
      }
      else
      {
        v31 = off_1E332F578[v58];
        ((void (*)(_QWORD *, _QWORD *, _BYTE *))v31)(v52, v48, v57);
        v49 = v30;
        LOBYTE(v50[0]) = 0;
        v51 = -1;
        ((void (*)(_QWORD *, _QWORD *, _QWORD *))v31)(v52, v50, v48);
        v51 = v30;
      }
      if (!*(_BYTE *)(v17 + 364))
      {
        WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<int,JSC::GenericTypedArrayView<JSC::Int32Adaptor>>((WTF::StringImpl *)v17, (uint64_t)"uniform2iv", 11, v19, 0, (uint64_t)v50, 2, 0, (uint64_t)v52, 0);
        if (v53)
          (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v17 + 88) + 888))(*(_QWORD *)(v17 + 88), *(unsigned int *)(v19 + 16), v52[0], v52[1]);
        v30 = v51;
      }
      if (v30 != -1)
        ((void (*)(_QWORD *, _QWORD *))off_1E332F568[v30])(v52, v50);
      v51 = -1;
      if (v49 != -1)
        ((void (*)(_QWORD *, _QWORD *))off_1E332F568[v49])(v52, v48);
      v29 = v59;
      v23 = 10;
    }
    if (v29 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E332F598[v29])(v52, v57);
    return (_BYTE *)v23;
  }
  v52[0] = v9;
  if ((v18 & 0xFFFE000000000002) == 0)
  {
    v24 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
    v25 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
    v26 = (char **)(16 * v24);
    if ((_DWORD)v24)
      v27 = v26 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v27 = 1;
    if (!v27)
    {
      do
      {
        v26 = (char **)v26[2];
        v25 = v26 != 0;
      }
      while (v26 != &WebCore::JSWebGLUniformLocation::s_info && v26 != 0);
    }
    if (v25)
    {
      v19 = *(_QWORD *)(v18 + 24);
      if (v19)
        goto LABEL_35;
    }
  }
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v52, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniform2iv", 11, "WebGLUniformLocation", 21);
  return 0;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform3iv(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSValue v21;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  char **v26;
  BOOL v27;
  int v29;
  int v30;
  uint64_t (*v31)();
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::InspectorInstrumentation *v40;
  WebCore::ScriptExecutionContext *v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  WTF::StringImpl *v46;
  JSC::VM *v47;
  _QWORD v48[2];
  int v49;
  _QWORD v50[2];
  int v51;
  _QWORD v52[2];
  char v53;
  _DWORD *v54;
  char v55;
  char v56[8];
  _BYTE v57[16];
  int v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v47 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v47, "WebGL2RenderingContext", "uniform3iv");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v47, "WebGL2RenderingContext", "uniform3iv");
  v16 = *((int *)a2 + 8) - 1;
  if (v16 >= 4)
    v16 = 4;
  if (v16 == 4 || v16 == 3)
    return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform3iv1Body(this, a2, *(JSC::CallFrame **)(v10 + 24), a4, a5, a6, a7, a8);
  if (v16 != 2)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v21);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  if ((v18 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v19 = 0;
LABEL_35:
    WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLInt32Array>,WebCore::IDLSequence<WebCore::IDLLong>>>::convert(this, *((JSC::JSGlobalObject **)a2 + 7), (uint64_t)v56);
    v29 = v59;
    if (v59)
    {
      v23 = 0;
    }
    else
    {
      if (*(_BYTE *)(v17 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
        if (v32
          && (v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33)) != 0
          && (v35 = *(_QWORD *)(v34 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v35, (WTF::StringImpl *)(v17 + 8), v19, (uint64_t)v52);
        }
        else
        {
          LOBYTE(v52[0]) = 0;
          v53 = 0;
        }
        if (v59)
          goto LABEL_81;
        v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
        if (v36
          && (v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37)) != 0
          && (v39 = *(_QWORD *)(v38 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v39, v17 + 8, (uint64_t)v57);
        }
        else
        {
          LOBYTE(v54) = 0;
          v55 = 0;
        }
        v50[0] = v52;
        v50[1] = 2;
        v40 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
        if (v40)
        {
          v42 = WebCore::InspectorInstrumentation::instrumentingAgents(v40, v41);
          if (v42)
          {
            v43 = *(_QWORD *)(v42 + 96);
            if (v43)
              WebCore::InspectorCanvasAgent::recordAction(v43, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)v48, v50);
          }
        }
        if (v55)
        {
          v44 = v54;
          v54 = 0;
          if (v44)
          {
            if (*v44 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v44;
          }
        }
        if (v53)
        {
          v45 = (_DWORD *)v52[0];
          v52[0] = 0;
          if (v45)
          {
            if (*v45 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v45;
          }
        }
        v46 = (WTF::StringImpl *)v48[0];
        v48[0] = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            goto LABEL_82;
          *(_DWORD *)v46 -= 2;
        }
        while (v59)
        {
LABEL_81:
          v46 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_82:
          WTF::StringImpl::destroy(v46, v41);
        }
      }
      LOBYTE(v48[0]) = 0;
      v49 = -1;
      v30 = v58;
      if (v58 == -1)
      {
        LOBYTE(v50[0]) = 0;
        v51 = -1;
      }
      else
      {
        v31 = off_1E332F578[v58];
        ((void (*)(_QWORD *, _QWORD *, _BYTE *))v31)(v52, v48, v57);
        v49 = v30;
        LOBYTE(v50[0]) = 0;
        v51 = -1;
        ((void (*)(_QWORD *, _QWORD *, _QWORD *))v31)(v52, v50, v48);
        v51 = v30;
      }
      if (!*(_BYTE *)(v17 + 364))
      {
        WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<int,JSC::GenericTypedArrayView<JSC::Int32Adaptor>>((WTF::StringImpl *)v17, (uint64_t)"uniform3iv", 11, v19, 0, (uint64_t)v50, 3, 0, (uint64_t)v52, 0);
        if (v53)
          (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v17 + 88) + 920))(*(_QWORD *)(v17 + 88), *(unsigned int *)(v19 + 16), v52[0], v52[1]);
        v30 = v51;
      }
      if (v30 != -1)
        ((void (*)(_QWORD *, _QWORD *))off_1E332F568[v30])(v52, v50);
      v51 = -1;
      if (v49 != -1)
        ((void (*)(_QWORD *, _QWORD *))off_1E332F568[v49])(v52, v48);
      v29 = v59;
      v23 = 10;
    }
    if (v29 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E332F598[v29])(v52, v57);
    return (_BYTE *)v23;
  }
  v52[0] = v9;
  if ((v18 & 0xFFFE000000000002) == 0)
  {
    v24 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
    v25 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
    v26 = (char **)(16 * v24);
    if ((_DWORD)v24)
      v27 = v26 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v27 = 1;
    if (!v27)
    {
      do
      {
        v26 = (char **)v26[2];
        v25 = v26 != 0;
      }
      while (v26 != &WebCore::JSWebGLUniformLocation::s_info && v26 != 0);
    }
    if (v25)
    {
      v19 = *(_QWORD *)(v18 + 24);
      if (v19)
        goto LABEL_35;
    }
  }
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v52, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniform3iv", 11, "WebGLUniformLocation", 21);
  return 0;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform4iv(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char **v13;
  BOOL v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  JSValue v21;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  char **v26;
  BOOL v27;
  int v29;
  int v30;
  uint64_t (*v31)();
  WebCore::InspectorInstrumentation *v32;
  WebCore::ScriptExecutionContext *v33;
  uint64_t v34;
  uint64_t v35;
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::InspectorInstrumentation *v40;
  WebCore::ScriptExecutionContext *v41;
  uint64_t v42;
  uint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  WTF::StringImpl *v46;
  JSC::VM *v47;
  _QWORD v48[2];
  int v49;
  _QWORD v50[2];
  int v51;
  _QWORD v52[2];
  char v53;
  _DWORD *v54;
  char v55;
  char v56[8];
  _BYTE v57[16];
  int v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v47 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v47, "WebGL2RenderingContext", "uniform4iv");
  v11 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v12 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v13 = (char **)(16 * v11);
  if ((_DWORD)v11)
    v14 = v13 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v14 = 1;
  if (!v14)
  {
    do
    {
      v13 = (char **)v13[2];
      v12 = v13 != 0;
    }
    while (v13 != &WebCore::JSWebGL2RenderingContext::s_info && v13 != 0);
  }
  if (!v12)
    return WebCore::throwThisTypeError((int)this, (int)&v47, "WebGL2RenderingContext", "uniform4iv");
  v16 = *((int *)a2 + 8) - 1;
  if (v16 >= 4)
    v16 = 4;
  if (v16 == 4 || v16 == 3)
    return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_uniform4iv1Body(this, a2, *(JSC::CallFrame **)(v10 + 24), a4, a5, a6, a7, a8);
  if (v16 != 2)
  {
    v21.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v21);
  }
  v17 = *(_QWORD *)(v10 + 24);
  v18 = *((_QWORD *)a2 + 6);
  if ((v18 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v19 = 0;
LABEL_35:
    WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLInt32Array>,WebCore::IDLSequence<WebCore::IDLLong>>>::convert(this, *((JSC::JSGlobalObject **)a2 + 7), (uint64_t)v56);
    v29 = v59;
    if (v59)
    {
      v23 = 0;
    }
    else
    {
      if (*(_BYTE *)(v17 + 33))
      {
        WTF::StringImpl::createWithoutCopyingNonEmpty();
        v32 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
        if (v32
          && (v34 = WebCore::InspectorInstrumentation::instrumentingAgents(v32, v33)) != 0
          && (v35 = *(_QWORD *)(v34 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v35, (WTF::StringImpl *)(v17 + 8), v19, (uint64_t)v52);
        }
        else
        {
          LOBYTE(v52[0]) = 0;
          v53 = 0;
        }
        if (v59)
          goto LABEL_81;
        v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
        if (v36
          && (v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37)) != 0
          && (v39 = *(_QWORD *)(v38 + 96)) != 0)
        {
          WebCore::InspectorCanvasAgent::processArgument(v39, v17 + 8, (uint64_t)v57);
        }
        else
        {
          LOBYTE(v54) = 0;
          v55 = 0;
        }
        v50[0] = v52;
        v50[1] = 2;
        v40 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v17 + 40) + 144))(*(_QWORD *)(v17 + 40));
        if (v40)
        {
          v42 = WebCore::InspectorInstrumentation::instrumentingAgents(v40, v41);
          if (v42)
          {
            v43 = *(_QWORD *)(v42 + 96);
            if (v43)
              WebCore::InspectorCanvasAgent::recordAction(v43, (WebCore::CanvasRenderingContext *)(v17 + 8), (const WTF::StringImpl *)v48, v50);
          }
        }
        if (v55)
        {
          v44 = v54;
          v54 = 0;
          if (v44)
          {
            if (*v44 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v44;
          }
        }
        if (v53)
        {
          v45 = (_DWORD *)v52[0];
          v52[0] = 0;
          if (v45)
          {
            if (*v45 == 1)
              WTF::JSONImpl::Value::operator delete();
            else
              --*v45;
          }
        }
        v46 = (WTF::StringImpl *)v48[0];
        v48[0] = 0;
        if (v46)
        {
          if (*(_DWORD *)v46 == 2)
            goto LABEL_82;
          *(_DWORD *)v46 -= 2;
        }
        while (v59)
        {
LABEL_81:
          v46 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_82:
          WTF::StringImpl::destroy(v46, v41);
        }
      }
      LOBYTE(v48[0]) = 0;
      v49 = -1;
      v30 = v58;
      if (v58 == -1)
      {
        LOBYTE(v50[0]) = 0;
        v51 = -1;
      }
      else
      {
        v31 = off_1E332F578[v58];
        ((void (*)(_QWORD *, _QWORD *, _BYTE *))v31)(v52, v48, v57);
        v49 = v30;
        LOBYTE(v50[0]) = 0;
        v51 = -1;
        ((void (*)(_QWORD *, _QWORD *, _QWORD *))v31)(v52, v50, v48);
        v51 = v30;
      }
      if (!*(_BYTE *)(v17 + 364))
      {
        WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<int,JSC::GenericTypedArrayView<JSC::Int32Adaptor>>((WTF::StringImpl *)v17, (uint64_t)"uniform4iv", 11, v19, 0, (uint64_t)v50, 4, 0, (uint64_t)v52, 0);
        if (v53)
          (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v17 + 88) + 952))(*(_QWORD *)(v17 + 88), *(unsigned int *)(v19 + 16), v52[0], v52[1]);
        v30 = v51;
      }
      if (v30 != -1)
        ((void (*)(_QWORD *, _QWORD *))off_1E332F568[v30])(v52, v50);
      v51 = -1;
      if (v49 != -1)
        ((void (*)(_QWORD *, _QWORD *))off_1E332F568[v49])(v52, v48);
      v29 = v59;
      v23 = 10;
    }
    if (v29 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_1E332F598[v29])(v52, v57);
    return (_BYTE *)v23;
  }
  v52[0] = v9;
  if ((v18 & 0xFFFE000000000002) == 0)
  {
    v24 = *(unsigned int *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C);
    v25 = *(_DWORD *)(16 * (*(_DWORD *)v18 & 0xFFFFFFFE) + 0x4C) != 0;
    v26 = (char **)(16 * v24);
    if ((_DWORD)v24)
      v27 = v26 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v27 = 1;
    if (!v27)
    {
      do
      {
        v26 = (char **)v26[2];
        v25 = v26 != 0;
      }
      while (v26 != &WebCore::JSWebGLUniformLocation::s_info && v26 != 0);
    }
    if (v25)
    {
      v19 = *(_QWORD *)(v18 + 24);
      if (v19)
        goto LABEL_35;
    }
  }
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v52, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniform4iv", 11, "WebGLUniformLocation", 21);
  return 0;
}

_BYTE *WebCore::jsWebGL2RenderingContextPrototypeFunction_uniformMatrix2fv(WebCore *this, JSC::JSGlobalObject *a2, JSC::CallFrame *a3, WebCore::JSWebGL2RenderingContext *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  JSC::VM *v9;
  uint64_t v10;
  uint64_t v12;
  BOOL v13;
  char **v14;
  BOOL v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  JSValue v22;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  char **v27;
  BOOL v28;
  unint64_t v30;
  double v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t (*v35)();
  WebCore::InspectorInstrumentation *v36;
  WebCore::ScriptExecutionContext *v37;
  uint64_t v38;
  uint64_t v39;
  WebCore::InspectorInstrumentation *v40;
  WebCore::ScriptExecutionContext *v41;
  uint64_t v42;
  WebCore::InspectorCanvasAgent *v43;
  WebCore::InspectorInstrumentation *v44;
  WebCore::ScriptExecutionContext *v45;
  uint64_t v46;
  uint64_t v47;
  WebCore::InspectorInstrumentation *v48;
  WebCore::ScriptExecutionContext *v49;
  uint64_t v50;
  uint64_t v51;
  _DWORD *v52;
  _DWORD *v53;
  _DWORD *v54;
  WTF::StringImpl *v55;
  BOOL v56;
  BOOL v57;
  _BOOL4 v58;
  int v59;
  uint64_t v60;
  int *v61;
  int v62;
  JSC::VM *v63;
  _QWORD v64[2];
  int v65;
  _QWORD v66[2];
  int v67;
  _QWORD v68[2];
  char v69;
  _DWORD *v70;
  char v71;
  _DWORD *v72;
  char v73;
  char v74[8];
  _BYTE v75[16];
  int v76;
  int v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v9 = (JSC::VM *)*((_QWORD *)this + 7);
  v63 = v9;
  v10 = *((_QWORD *)a2 + 5);
  if ((v10 & 0xFFFE000000000002) != 0)
    return WebCore::throwThisTypeError((int)this, (int)&v63, "WebGL2RenderingContext", "uniformMatrix2fv");
  v12 = *(unsigned int *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C);
  v13 = *(_DWORD *)(16 * (*(_DWORD *)v10 & 0xFFFFFFFE) + 0x4C) != 0;
  v14 = (char **)(16 * v12);
  if ((_DWORD)v12)
    v15 = v14 == &WebCore::JSWebGL2RenderingContext::s_info;
  else
    v15 = 1;
  if (!v15)
  {
    do
    {
      v14 = (char **)v14[2];
      v13 = v14 != 0;
    }
    while (v14 != &WebCore::JSWebGL2RenderingContext::s_info && v14 != 0);
  }
  if (!v13)
    return WebCore::throwThisTypeError((int)this, (int)&v63, "WebGL2RenderingContext", "uniformMatrix2fv");
  v17 = *((int *)a2 + 8) - 1;
  if (v17 >= 5)
    v17 = 5;
  if (v17 == 5 || v17 == 4)
    return (_BYTE *)WebCore::jsWebGL2RenderingContextPrototypeFunction_uniformMatrix2fv1Body((JSC::VM **)this, a2, *(JSC::CallFrame **)(v10 + 24), a4, a5, a6, a7, a8);
  if (v17 != 3)
  {
    v22.super.isa = (Class)JSC::createNotEnoughArgumentsError(this, a2);
    return (_BYTE *)JSC::VM::throwException(v9, this, v22);
  }
  v18 = *(_QWORD *)(v10 + 24);
  v19 = *((_QWORD *)a2 + 6);
  if ((v19 & 0xFFFFFFFFFFFFFFF7) == 2)
  {
    v20 = 0;
    goto LABEL_35;
  }
  v68[0] = v9;
  if ((v19 & 0xFFFE000000000002) == 0)
  {
    v25 = *(unsigned int *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C);
    v26 = *(_DWORD *)(16 * (*(_DWORD *)v19 & 0xFFFFFFFE) + 0x4C) != 0;
    v27 = (char **)(16 * v25);
    if ((_DWORD)v25)
      v28 = v27 == &WebCore::JSWebGLUniformLocation::s_info;
    else
      v28 = 1;
    if (!v28)
    {
      do
      {
        v27 = (char **)v27[2];
        v26 = v27 != 0;
      }
      while (v27 != &WebCore::JSWebGLUniformLocation::s_info && v27 != 0);
    }
    if (v26)
    {
      v20 = *(_QWORD *)(v19 + 24);
      if (v20)
      {
LABEL_35:
        v30 = *((_QWORD *)a2 + 7);
        if (v30 >= 0xFFFE000000000000)
        {
          v56 = (_DWORD)v30 == 0;
        }
        else
        {
          *(_QWORD *)&v31 = v30 - 0x2000000000000;
          if (v30 - 0x2000000000000 <= 0xFFFBFFFFFFFFFFFFLL)
          {
            v57 = v31 <= 0.0;
            v58 = v31 < 0.0;
            v32 = !v57 || v58;
LABEL_39:
            if (*((_DWORD *)v9 + 20) && (JSC::VM::hasExceptionsAfterHandlingTraps(v9) & 1) != 0)
              return 0;
            WebCore::Converter<WebCore::IDLUnion<WebCore::IDLAllowSharedAdaptor<WebCore::IDLFloat32Array>,WebCore::IDLSequence<WebCore::IDLUnrestrictedFloat>>>::convert(this, *((JSC::JSGlobalObject **)a2 + 8), (uint64_t)v74);
            v33 = v77;
            if (v77)
            {
              v24 = 0;
            }
            else
            {
              if (*(_BYTE *)(v18 + 33))
              {
                WTF::StringImpl::createWithoutCopyingNonEmpty();
                v64[0] = v68[0];
                v36 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v18 + 40)
                                                                                             + 144))(*(_QWORD *)(v18 + 40));
                if (v36
                  && (v38 = WebCore::InspectorInstrumentation::instrumentingAgents(v36, v37)) != 0
                  && (v39 = *(_QWORD *)(v38 + 96)) != 0)
                {
                  WebCore::InspectorCanvasAgent::processArgument(v39, (WTF::StringImpl *)(v18 + 8), v20, (uint64_t)v68);
                }
                else
                {
                  LOBYTE(v68[0]) = 0;
                  v69 = 0;
                }
                v40 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v18 + 40)
                                                                                             + 144))(*(_QWORD *)(v18 + 40));
                if (v40
                  && (v42 = WebCore::InspectorInstrumentation::instrumentingAgents(v40, v41)) != 0
                  && (v43 = *(WebCore::InspectorCanvasAgent **)(v42 + 96)) != 0)
                {
                  WebCore::InspectorCanvasAgent::processArgument(v43, (WebCore::CanvasRenderingContext *)(v18 + 8), (WTF::JSONImpl::Value *)v32, (uint64_t)&v70);
                }
                else
                {
                  LOBYTE(v70) = 0;
                  v71 = 0;
                }
                if (v77)
                  goto LABEL_97;
                v44 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v18 + 40)
                                                                                             + 144))(*(_QWORD *)(v18 + 40));
                if (v44
                  && (v46 = WebCore::InspectorInstrumentation::instrumentingAgents(v44, v45)) != 0
                  && (v47 = *(_QWORD *)(v46 + 96)) != 0)
                {
                  WebCore::InspectorCanvasAgent::processArgument(v47, v18 + 8, (uint64_t)v75);
                }
                else
                {
                  LOBYTE(v72) = 0;
                  v73 = 0;
                }
                v66[0] = v68;
                v66[1] = 3;
                v48 = (WebCore::InspectorInstrumentation *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v18 + 40)
                                                                                             + 144))(*(_QWORD *)(v18 + 40));
                if (v48)
                {
                  v50 = WebCore::InspectorInstrumentation::instrumentingAgents(v48, v49);
                  if (v50)
                  {
                    v51 = *(_QWORD *)(v50 + 96);
                    if (v51)
                      WebCore::InspectorCanvasAgent::recordAction(v51, (WebCore::CanvasRenderingContext *)(v18 + 8), (const WTF::StringImpl *)v64, v66);
                  }
                }
                if (v73)
                {
                  v52 = v72;
                  v72 = 0;
                  if (v52)
                  {
                    if (*v52 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*v52;
                  }
                }
                if (v71)
                {
                  v53 = v70;
                  v70 = 0;
                  if (v53)
                  {
                    if (*v53 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*v53;
                  }
                }
                if (v69)
                {
                  v54 = (_DWORD *)v68[0];
                  v68[0] = 0;
                  if (v54)
                  {
                    if (*v54 == 1)
                      WTF::JSONImpl::Value::operator delete();
                    else
                      --*v54;
                  }
                }
                v55 = (WTF::StringImpl *)v64[0];
                v64[0] = 0;
                if (v55)
                {
                  if (*(_DWORD *)v55 == 2)
                    goto LABEL_98;
                  *(_DWORD *)v55 -= 2;
                }
                while (v77)
                {
LABEL_97:
                  v55 = (WTF::StringImpl *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_98:
                  WTF::StringImpl::destroy(v55, v49);
                }
              }
              LOBYTE(v64[0]) = 0;
              v65 = -1;
              v34 = v76;
              if (v76 == -1)
              {
                LOBYTE(v66[0]) = 0;
                v67 = -1;
              }
              else
              {
                v35 = off_1E332F548[v76];
                ((void (*)(_QWORD *, _QWORD *, _BYTE *))v35)(v68, v64, v75);
                v65 = v34;
                LOBYTE(v66[0]) = 0;
                v67 = -1;
                ((void (*)(_QWORD *, _QWORD *, _QWORD *))v35)(v68, v66, v64);
                v67 = v34;
              }
              if (!*(_BYTE *)(v18 + 364))
              {
                WebCore::WebGLRenderingContextBase::validateUniformMatrixParameters<float,JSC::GenericTypedArrayView<JSC::Float32Adaptor>>((WTF::StringImpl *)v18, (uint64_t)"uniformMatrix2fv", 17, v20, v32, (uint64_t)v66, 4, 0, (uint64_t)v68, 0);
                if (v69)
                  (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v18 + 88) + 960))(*(_QWORD *)(v18 + 88), *(unsigned int *)(v20 + 16), v32, v68[0], v68[1]);
                v34 = v67;
              }
              if (v34 != -1)
                ((void (*)(_QWORD *, _QWORD *))off_1E332F538[v34])(v68, v66);
              v67 = -1;
              if (v65 != -1)
                ((void (*)(_QWORD *, _QWORD *))off_1E332F538[v65])(v68, v64);
              v33 = v77;
              v24 = 10;
            }
            if (v33 != -1)
              ((void (*)(_QWORD *, _BYTE *))off_1E332F558[v33])(v68, v75);
            return (_BYTE *)v24;
          }
          if ((v30 & 0xFFFE000000000002) != 0)
          {
            v32 = v30 == 7;
            goto LABEL_39;
          }
          v59 = *(unsigned __int8 *)(v30 + 5);
          if (v59 == 3)
          {
            v62 = *(_DWORD *)(v30 + 8);
          }
          else
          {
            if (v59 != 2)
            {
              if ((*(_BYTE *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE) + 0xA) & 1) == 0)
              {
                v32 = 1;
                goto LABEL_39;
              }
              v56 = *(_QWORD *)(16 * (*(_DWORD *)v30 & 0xFFFFFFFE) + 0x28) == (_QWORD)this;
              goto LABEL_117;
            }
            v60 = *(_QWORD *)(v30 + 8);
            if ((v60 & 1) != 0)
              v61 = (int *)(v30 + 16);
            else
              v61 = (int *)(v60 + 4);
            v62 = *v61;
          }
          v56 = v62 == 0;
        }
LABEL_117:
        v32 = !v56;
        goto LABEL_39;
      }
    }
  }
  WebCore::throwArgumentTypeError((uint64_t)this, (uint64_t)v68, 0, "location", 9, "WebGL2RenderingContext", 23, a8, "uniformMatrix2fv", 17, "WebGLUniformLocation", 21);
  return 0;
}

