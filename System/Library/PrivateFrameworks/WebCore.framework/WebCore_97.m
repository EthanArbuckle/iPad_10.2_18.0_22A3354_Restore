uint64_t WebCore::BasicShapeRect::dump(WebCore::BasicShapeRect *this, WTF::TextStream *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  WTF::TextStream::dumpProperty<WebCore::Length>(a2, (uint64_t)"top", (unsigned int *)this + 3);
  WTF::TextStream::dumpProperty<WebCore::Length>(a2, (uint64_t)"right", (unsigned int *)this + 5);
  WTF::TextStream::dumpProperty<WebCore::Length>(a2, (uint64_t)"bottom", (unsigned int *)this + 7);
  WTF::TextStream::dumpProperty<WebCore::Length>(a2, (uint64_t)"left", (unsigned int *)this + 9);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v4 = WTF::TextStream::operator<<();
  WebCore::operator<<(v4, (unsigned int *)this + 11);
  WTF::TextStream::endGroup(a2);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v5 = WTF::TextStream::operator<<();
  WebCore::operator<<(v5, (unsigned int *)this + 15);
  WTF::TextStream::endGroup(a2);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v6 = WTF::TextStream::operator<<();
  WebCore::operator<<(v6, (unsigned int *)this + 19);
  WTF::TextStream::endGroup(a2);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v7 = WTF::TextStream::operator<<();
  WebCore::operator<<(v7, (unsigned int *)this + 23);
  return WTF::TextStream::endGroup(a2);
}

uint64_t WTF::TextStream::dumpProperty<WebCore::Length>(WTF::TextStream *a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5;
  uint64_t v6;
  void *v8;
  int v9;
  unsigned __int8 v10;
  char v11;
  char v12;

  WTF::TextStream::startGroup(a1);
  WTF::TextStream::operator<<();
  v5 = WTF::TextStream::operator<<();
  v6 = v5;
  v9 = 0;
  v12 = 0;
  v10 = *((_BYTE *)a3 + 4);
  v11 = *((_BYTE *)a3 + 5);
  if (v10 - 2 < 9)
  {
    v12 = *((_BYTE *)a3 + 6);
    v9 = *a3;
LABEL_4:
    WebCore::operator<<(v5, (WebCore::Length *)&v9);
    return WTF::TextStream::endGroup(a1);
  }
  if (v10 != 11)
    goto LABEL_4;
  v8 = (void *)*a3;
  v9 = (int)v8;
  WebCore::Length::ref(&v9);
  WebCore::operator<<(v6, (WebCore::Length *)&v9);
  {
    WebCore::calculationValues(void)::map = 1;
    qword_1ECE90C98 = 0;
  }
  WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v8);
  return WTF::TextStream::endGroup(a1);
}

uint64_t WebCore::BasicShapeXywh::create@<X0>(int *a1@<X0>, int *a2@<X1>, int *a3@<X2>, int *a4@<X3>, int *a5@<X4>, int *a6@<X5>, int *a7@<X6>, int *a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v18;
  uint64_t result;

  v18 = WTF::fastMalloc((WTF *)0x70);
  result = WebCore::BasicShapeXywh::BasicShapeXywh(v18, a1, a2, a3, a4, a5, a6, a7, a8);
  *a9 = result;
  return result;
}

uint64_t WebCore::BasicShapeXywh::BasicShapeXywh(uint64_t result, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7, int *a8, int *a9)
{
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;

  *(_QWORD *)result = off_1E34418F8;
  *(_QWORD *)(result + 8) = 1;
  *(_WORD *)(result + 17) = 0;
  v9 = *((unsigned __int8 *)a2 + 4);
  *(_BYTE *)(result + 16) = v9;
  *(_BYTE *)(result + 17) = *((_BYTE *)a2 + 5);
  if (v9 - 2 < 9)
  {
    v10 = *((unsigned __int8 *)a2 + 6);
    *(_BYTE *)(result + 18) = v10;
    if (v10)
    {
      *(_DWORD *)(result + 12) = *a2;
      goto LABEL_4;
    }
    v33 = *a2;
    goto LABEL_39;
  }
  if (v9 <= 0xD)
  {
    if (((1 << v9) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 12) = 0;
    }
    else if (v9 == 11)
    {
      v33 = *a2;
      *a2 = 0;
LABEL_39:
      *(_DWORD *)(result + 12) = v33;
    }
  }
LABEL_4:
  *((_BYTE *)a2 + 4) = 0;
  *(_DWORD *)(result + 20) = 0;
  *(_WORD *)(result + 25) = 0;
  v11 = *((unsigned __int8 *)a3 + 4);
  *(_BYTE *)(result + 24) = v11;
  *(_BYTE *)(result + 25) = *((_BYTE *)a3 + 5);
  if (v11 - 2 < 9)
  {
    v12 = *((unsigned __int8 *)a3 + 6);
    *(_BYTE *)(result + 26) = v12;
    if (v12)
    {
      *(_DWORD *)(result + 20) = *a3;
      goto LABEL_7;
    }
    v34 = *a3;
    goto LABEL_41;
  }
  if (v11 <= 0xD)
  {
    if (((1 << v11) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 20) = 0;
    }
    else if (v11 == 11)
    {
      v34 = *a3;
      *a3 = 0;
LABEL_41:
      *(_DWORD *)(result + 20) = v34;
    }
  }
LABEL_7:
  *((_BYTE *)a3 + 4) = 0;
  *(_DWORD *)(result + 28) = 0;
  *(_WORD *)(result + 33) = 0;
  v13 = *((unsigned __int8 *)a4 + 4);
  *(_BYTE *)(result + 32) = v13;
  *(_BYTE *)(result + 33) = *((_BYTE *)a4 + 5);
  if (v13 - 2 < 9)
  {
    v14 = *((unsigned __int8 *)a4 + 6);
    *(_BYTE *)(result + 34) = v14;
    if (v14)
    {
      *(_DWORD *)(result + 28) = *a4;
      goto LABEL_10;
    }
    v35 = *a4;
    goto LABEL_43;
  }
  if (v13 <= 0xD)
  {
    if (((1 << v13) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 28) = 0;
    }
    else if (v13 == 11)
    {
      v35 = *a4;
      *a4 = 0;
LABEL_43:
      *(_DWORD *)(result + 28) = v35;
    }
  }
LABEL_10:
  *((_BYTE *)a4 + 4) = 0;
  *(_DWORD *)(result + 36) = 0;
  *(_WORD *)(result + 41) = 0;
  v15 = *((unsigned __int8 *)a5 + 4);
  *(_BYTE *)(result + 40) = v15;
  *(_BYTE *)(result + 41) = *((_BYTE *)a5 + 5);
  if (v15 - 2 < 9)
  {
    v16 = *((unsigned __int8 *)a5 + 6);
    *(_BYTE *)(result + 42) = v16;
    if (v16)
    {
      *(_DWORD *)(result + 36) = *a5;
      goto LABEL_13;
    }
    v36 = *a5;
    goto LABEL_45;
  }
  if (v15 <= 0xD)
  {
    if (((1 << v15) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 36) = 0;
    }
    else if (v15 == 11)
    {
      v36 = *a5;
      *a5 = 0;
LABEL_45:
      *(_DWORD *)(result + 36) = v36;
    }
  }
LABEL_13:
  *((_BYTE *)a5 + 4) = 0;
  *(_DWORD *)(result + 44) = 0;
  *(_WORD *)(result + 49) = 0;
  v17 = *((unsigned __int8 *)a6 + 4);
  *(_BYTE *)(result + 48) = v17;
  *(_BYTE *)(result + 49) = *((_BYTE *)a6 + 5);
  if (v17 - 2 < 9)
  {
    v18 = *((unsigned __int8 *)a6 + 6);
    *(_BYTE *)(result + 50) = v18;
    if (v18)
    {
      *(_DWORD *)(result + 44) = *a6;
      goto LABEL_16;
    }
    v37 = *a6;
    goto LABEL_47;
  }
  if (v17 <= 0xD)
  {
    if (((1 << v17) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 44) = 0;
    }
    else if (v17 == 11)
    {
      v37 = *a6;
      *a6 = 0;
LABEL_47:
      *(_DWORD *)(result + 44) = v37;
    }
  }
LABEL_16:
  *((_BYTE *)a6 + 4) = 0;
  *(_DWORD *)(result + 52) = 0;
  *(_WORD *)(result + 57) = 0;
  v19 = *((unsigned __int8 *)a6 + 12);
  *(_BYTE *)(result + 56) = v19;
  *(_BYTE *)(result + 57) = *((_BYTE *)a6 + 13);
  if (v19 - 2 < 9)
  {
    v20 = *((unsigned __int8 *)a6 + 14);
    *(_BYTE *)(result + 58) = v20;
    if (v20)
    {
      *(_DWORD *)(result + 52) = a6[2];
      goto LABEL_19;
    }
    v38 = a6[2];
    goto LABEL_49;
  }
  if (v19 <= 0xD)
  {
    if (((1 << v19) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 52) = 0;
    }
    else if (v19 == 11)
    {
      v38 = a6[2];
      a6[2] = 0;
LABEL_49:
      *(_DWORD *)(result + 52) = v38;
    }
  }
LABEL_19:
  *((_BYTE *)a6 + 12) = 0;
  *(_DWORD *)(result + 60) = 0;
  *(_WORD *)(result + 65) = 0;
  v21 = *((unsigned __int8 *)a7 + 4);
  *(_BYTE *)(result + 64) = v21;
  *(_BYTE *)(result + 65) = *((_BYTE *)a7 + 5);
  if (v21 - 2 < 9)
  {
    v22 = *((unsigned __int8 *)a7 + 6);
    *(_BYTE *)(result + 66) = v22;
    if (v22)
    {
      *(_DWORD *)(result + 60) = *a7;
      goto LABEL_22;
    }
    v39 = *a7;
    goto LABEL_51;
  }
  if (v21 <= 0xD)
  {
    if (((1 << v21) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 60) = 0;
    }
    else if (v21 == 11)
    {
      v39 = *a7;
      *a7 = 0;
LABEL_51:
      *(_DWORD *)(result + 60) = v39;
    }
  }
LABEL_22:
  *((_BYTE *)a7 + 4) = 0;
  *(_DWORD *)(result + 68) = 0;
  *(_WORD *)(result + 73) = 0;
  v23 = *((unsigned __int8 *)a7 + 12);
  *(_BYTE *)(result + 72) = v23;
  *(_BYTE *)(result + 73) = *((_BYTE *)a7 + 13);
  if (v23 - 2 < 9)
  {
    v24 = *((unsigned __int8 *)a7 + 14);
    *(_BYTE *)(result + 74) = v24;
    if (v24)
    {
      *(_DWORD *)(result + 68) = a7[2];
      goto LABEL_25;
    }
    v40 = a7[2];
    goto LABEL_53;
  }
  if (v23 <= 0xD)
  {
    if (((1 << v23) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 68) = 0;
    }
    else if (v23 == 11)
    {
      v40 = a7[2];
      a7[2] = 0;
LABEL_53:
      *(_DWORD *)(result + 68) = v40;
    }
  }
LABEL_25:
  *((_BYTE *)a7 + 12) = 0;
  *(_DWORD *)(result + 76) = 0;
  *(_WORD *)(result + 81) = 0;
  v25 = *((unsigned __int8 *)a8 + 4);
  *(_BYTE *)(result + 80) = v25;
  *(_BYTE *)(result + 81) = *((_BYTE *)a8 + 5);
  if (v25 - 2 < 9)
  {
    v26 = *((unsigned __int8 *)a8 + 6);
    *(_BYTE *)(result + 82) = v26;
    if (v26)
    {
      *(_DWORD *)(result + 76) = *a8;
      goto LABEL_28;
    }
    v41 = *a8;
    goto LABEL_55;
  }
  if (v25 <= 0xD)
  {
    if (((1 << v25) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 76) = 0;
    }
    else if (v25 == 11)
    {
      v41 = *a8;
      *a8 = 0;
LABEL_55:
      *(_DWORD *)(result + 76) = v41;
    }
  }
LABEL_28:
  *((_BYTE *)a8 + 4) = 0;
  *(_DWORD *)(result + 84) = 0;
  *(_WORD *)(result + 89) = 0;
  v27 = *((unsigned __int8 *)a8 + 12);
  *(_BYTE *)(result + 88) = v27;
  *(_BYTE *)(result + 89) = *((_BYTE *)a8 + 13);
  if (v27 - 2 < 9)
  {
    v28 = *((unsigned __int8 *)a8 + 14);
    *(_BYTE *)(result + 90) = v28;
    if (v28)
    {
      *(_DWORD *)(result + 84) = a8[2];
      goto LABEL_31;
    }
    v42 = a8[2];
    goto LABEL_57;
  }
  if (v27 <= 0xD)
  {
    if (((1 << v27) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 84) = 0;
    }
    else if (v27 == 11)
    {
      v42 = a8[2];
      a8[2] = 0;
LABEL_57:
      *(_DWORD *)(result + 84) = v42;
    }
  }
LABEL_31:
  *((_BYTE *)a8 + 12) = 0;
  *(_DWORD *)(result + 92) = 0;
  *(_WORD *)(result + 97) = 0;
  v29 = *((unsigned __int8 *)a9 + 4);
  *(_BYTE *)(result + 96) = v29;
  *(_BYTE *)(result + 97) = *((_BYTE *)a9 + 5);
  if (v29 - 2 < 9)
  {
    v30 = *((unsigned __int8 *)a9 + 6);
    *(_BYTE *)(result + 98) = v30;
    if (v30)
    {
      *(_DWORD *)(result + 92) = *a9;
      goto LABEL_34;
    }
    v43 = *a9;
    goto LABEL_59;
  }
  if (v29 <= 0xD)
  {
    if (((1 << v29) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 92) = 0;
    }
    else if (v29 == 11)
    {
      v43 = *a9;
      *a9 = 0;
LABEL_59:
      *(_DWORD *)(result + 92) = v43;
    }
  }
LABEL_34:
  *((_BYTE *)a9 + 4) = 0;
  *(_DWORD *)(result + 100) = 0;
  *(_WORD *)(result + 105) = 0;
  v31 = *((unsigned __int8 *)a9 + 12);
  *(_BYTE *)(result + 104) = v31;
  *(_BYTE *)(result + 105) = *((_BYTE *)a9 + 13);
  if (v31 - 2 >= 9)
  {
    if (v31 > 0xD)
      goto LABEL_37;
    if (((1 << v31) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 100) = 0;
      goto LABEL_37;
    }
    if (v31 != 11)
      goto LABEL_37;
    v44 = a9[2];
    a9[2] = 0;
    goto LABEL_61;
  }
  v32 = *((unsigned __int8 *)a9 + 14);
  *(_BYTE *)(result + 106) = v32;
  if (!v32)
  {
    v44 = a9[2];
LABEL_61:
    *(_DWORD *)(result + 100) = v44;
    goto LABEL_37;
  }
  *(_DWORD *)(result + 100) = a9[2];
LABEL_37:
  *((_BYTE *)a9 + 12) = 0;
  return result;
}

int *WebCore::BasicShapeXywh::clone@<X0>(WebCore::BasicShapeXywh *this@<X0>, int **a2@<X8>)
{
  uint64_t v4;
  int *result;
  unsigned int v6;
  unsigned __int8 v7;
  char v8;
  char v9;
  unsigned int v10;
  unsigned __int8 v11;
  char v12;
  char v13;
  unsigned int v14;
  unsigned __int8 v15;
  char v16;
  char v17;
  unsigned int v18;
  unsigned __int8 v19;
  char v20;
  char v21;
  unsigned int v22;
  unsigned __int8 v23;
  char v24;
  char v25;
  unsigned int v26;
  unsigned __int8 v27;
  char v28;
  char v29;
  unsigned int v30;
  unsigned __int8 v31;
  char v32;
  char v33;
  unsigned int v34;
  unsigned __int8 v35;
  char v36;
  char v37;
  unsigned int v38;
  unsigned __int8 v39;
  char v40;
  char v41;
  unsigned int v42;
  unsigned __int8 v43;
  char v44;
  char v45;
  unsigned int v46;
  unsigned __int8 v47;
  char v48;
  char v49;
  unsigned int v50;
  unsigned __int8 v51;
  char v52;
  char v53;

  v50 = 0;
  v53 = 0;
  v51 = *((_BYTE *)this + 16);
  v52 = *((_BYTE *)this + 17);
  if (v51 - 2 >= 9)
  {
    if (v51 == 11)
    {
      v50 = *((_DWORD *)this + 3);
      WebCore::Length::ref((int *)&v50);
    }
  }
  else
  {
    v53 = *((_BYTE *)this + 18);
    v50 = *((_DWORD *)this + 3);
  }
  v46 = 0;
  v49 = 0;
  v47 = *((_BYTE *)this + 24);
  v48 = *((_BYTE *)this + 25);
  if (v47 - 2 >= 9)
  {
    if (v47 == 11)
    {
      v46 = *((_DWORD *)this + 5);
      WebCore::Length::ref((int *)&v46);
    }
  }
  else
  {
    v49 = *((_BYTE *)this + 26);
    v46 = *((_DWORD *)this + 5);
  }
  v42 = 0;
  v45 = 0;
  v43 = *((_BYTE *)this + 32);
  v44 = *((_BYTE *)this + 33);
  if (v43 - 2 >= 9)
  {
    if (v43 == 11)
    {
      v42 = *((_DWORD *)this + 7);
      WebCore::Length::ref((int *)&v42);
    }
  }
  else
  {
    v45 = *((_BYTE *)this + 34);
    v42 = *((_DWORD *)this + 7);
  }
  v38 = 0;
  v41 = 0;
  v39 = *((_BYTE *)this + 40);
  v40 = *((_BYTE *)this + 41);
  if (v39 - 2 >= 9)
  {
    if (v39 == 11)
    {
      v38 = *((_DWORD *)this + 9);
      WebCore::Length::ref((int *)&v38);
    }
  }
  else
  {
    v41 = *((_BYTE *)this + 42);
    v38 = *((_DWORD *)this + 9);
  }
  v30 = 0;
  v33 = 0;
  v31 = *((_BYTE *)this + 48);
  v32 = *((_BYTE *)this + 49);
  if (v31 - 2 >= 9)
  {
    if (v31 == 11)
    {
      v30 = *((_DWORD *)this + 11);
      WebCore::Length::ref((int *)&v30);
    }
  }
  else
  {
    v33 = *((_BYTE *)this + 50);
    v30 = *((_DWORD *)this + 11);
  }
  v34 = 0;
  v37 = 0;
  v35 = *((_BYTE *)this + 56);
  v36 = *((_BYTE *)this + 57);
  if (v35 - 2 >= 9)
  {
    if (v35 == 11)
    {
      v34 = *((_DWORD *)this + 13);
      WebCore::Length::ref((int *)&v34);
    }
  }
  else
  {
    v37 = *((_BYTE *)this + 58);
    v34 = *((_DWORD *)this + 13);
  }
  v22 = 0;
  v25 = 0;
  v23 = *((_BYTE *)this + 64);
  v24 = *((_BYTE *)this + 65);
  if (v23 - 2 >= 9)
  {
    if (v23 == 11)
    {
      v22 = *((_DWORD *)this + 15);
      WebCore::Length::ref((int *)&v22);
    }
  }
  else
  {
    v25 = *((_BYTE *)this + 66);
    v22 = *((_DWORD *)this + 15);
  }
  v26 = 0;
  v29 = 0;
  v27 = *((_BYTE *)this + 72);
  v28 = *((_BYTE *)this + 73);
  if (v27 - 2 >= 9)
  {
    if (v27 == 11)
    {
      v26 = *((_DWORD *)this + 17);
      WebCore::Length::ref((int *)&v26);
    }
  }
  else
  {
    v29 = *((_BYTE *)this + 74);
    v26 = *((_DWORD *)this + 17);
  }
  v14 = 0;
  v17 = 0;
  v15 = *((_BYTE *)this + 80);
  v16 = *((_BYTE *)this + 81);
  if (v15 - 2 >= 9)
  {
    if (v15 == 11)
    {
      v14 = *((_DWORD *)this + 19);
      WebCore::Length::ref((int *)&v14);
    }
  }
  else
  {
    v17 = *((_BYTE *)this + 82);
    v14 = *((_DWORD *)this + 19);
  }
  v18 = 0;
  v21 = 0;
  v19 = *((_BYTE *)this + 88);
  v20 = *((_BYTE *)this + 89);
  if (v19 - 2 >= 9)
  {
    if (v19 == 11)
    {
      v18 = *((_DWORD *)this + 21);
      WebCore::Length::ref((int *)&v18);
    }
  }
  else
  {
    v21 = *((_BYTE *)this + 90);
    v18 = *((_DWORD *)this + 21);
  }
  v6 = 0;
  v9 = 0;
  v7 = *((_BYTE *)this + 96);
  v8 = *((_BYTE *)this + 97);
  if (v7 - 2 >= 9)
  {
    if (v7 == 11)
    {
      v6 = *((_DWORD *)this + 23);
      WebCore::Length::ref((int *)&v6);
    }
  }
  else
  {
    v9 = *((_BYTE *)this + 98);
    v6 = *((_DWORD *)this + 23);
  }
  v10 = 0;
  v13 = 0;
  v11 = *((_BYTE *)this + 104);
  v12 = *((_BYTE *)this + 105);
  if (v11 - 2 >= 9)
  {
    if (v11 == 11)
    {
      v10 = *((_DWORD *)this + 25);
      WebCore::Length::ref((int *)&v10);
    }
  }
  else
  {
    v13 = *((_BYTE *)this + 106);
    v10 = *((_DWORD *)this + 25);
  }
  v4 = WTF::fastMalloc((WTF *)0x70);
  result = (int *)WebCore::BasicShapeXywh::BasicShapeXywh(v4, (int *)&v50, (int *)&v46, (int *)&v42, (int *)&v38, (int *)&v30, (int *)&v22, (int *)&v14, (int *)&v6);
  *a2 = result;
  if (v11 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v10);
  }
  if (v7 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v6);
  }
  if (v19 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v18);
  }
  if (v15 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v14);
  }
  if (v27 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v26);
  }
  if (v23 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v22);
  }
  if (v35 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v34);
  }
  if (v31 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v30);
  }
  if (v39 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v38);
  }
  if (v43 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v42);
  }
  if (v47 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v46);
  }
  if (v51 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v50);
  }
  return result;
}

uint64_t WebCore::BasicShapeXywh::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v4;
  WebCore::Length *v5;
  float v6;
  float v7;
  int v8;
  WebCore::Length *v9;
  float v10;
  float v11;
  int v12;
  WebCore::Length *v13;
  float v14;
  float v15;
  int v16;
  WebCore::Length *v17;
  float v18;
  float v19;
  int v20;
  WebCore::Length *v21;
  float v22;
  float v23;
  int v24;
  WebCore::Length *v25;
  float v26;
  float v27;
  int v28;
  WebCore::Length *v29;
  float v30;
  float v31;
  int v32;
  WebCore::Length *v33;
  float v34;
  float v35;
  int v36;
  WebCore::Length *v37;
  float v38;
  float v39;
  int v40;
  WebCore::Length *v41;
  float v42;
  float v43;
  int v44;
  WebCore::Length *v45;
  float v46;
  float v47;
  int v48;
  WebCore::Length *v49;
  float v50;
  float v51;

  if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)a2 + 24))(a2) != 6)
    return 0;
  v4 = a1[16];
  if (v4 != a2[16] || (a1[17] != 0) != (a2[17] != 0))
    return 0;
  if (v4 != 13)
  {
    v5 = (WebCore::Length *)(a1 + 12);
    if (v4 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v5, (const WebCore::Length *)(a2 + 12)) & 1) == 0)
        return 0;
    }
    else
    {
      if (a1[18])
        v6 = *(float *)v5;
      else
        v6 = (float)*(int *)v5;
      v7 = *((float *)a2 + 3);
      if (!a2[18])
        v7 = (float)SLODWORD(v7);
      if (v6 != v7)
        return 0;
    }
  }
  v8 = a1[24];
  if (v8 != a2[24] || (a1[25] != 0) != (a2[25] != 0))
    return 0;
  if (v8 != 13)
  {
    v9 = (WebCore::Length *)(a1 + 20);
    if (v8 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v9, (const WebCore::Length *)(a2 + 20)) & 1) == 0)
        return 0;
    }
    else
    {
      if (a1[26])
        v10 = *(float *)v9;
      else
        v10 = (float)*(int *)v9;
      v11 = *((float *)a2 + 5);
      if (!a2[26])
        v11 = (float)SLODWORD(v11);
      if (v10 != v11)
        return 0;
    }
  }
  v12 = a1[32];
  if (v12 != a2[32] || (a1[33] != 0) != (a2[33] != 0))
    return 0;
  if (v12 != 13)
  {
    v13 = (WebCore::Length *)(a1 + 28);
    if (v12 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v13, (const WebCore::Length *)(a2 + 28)) & 1) == 0)
        return 0;
    }
    else
    {
      if (a1[34])
        v14 = *(float *)v13;
      else
        v14 = (float)*(int *)v13;
      v15 = *((float *)a2 + 7);
      if (!a2[34])
        v15 = (float)SLODWORD(v15);
      if (v14 != v15)
        return 0;
    }
  }
  v16 = a1[40];
  if (v16 != a2[40] || (a1[41] != 0) != (a2[41] != 0))
    return 0;
  if (v16 != 13)
  {
    v17 = (WebCore::Length *)(a1 + 36);
    if (v16 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v17, (const WebCore::Length *)(a2 + 36)) & 1) == 0)
        return 0;
    }
    else
    {
      if (a1[42])
        v18 = *(float *)v17;
      else
        v18 = (float)*(int *)v17;
      v19 = *((float *)a2 + 9);
      if (!a2[42])
        v19 = (float)SLODWORD(v19);
      if (v18 != v19)
        return 0;
    }
  }
  v20 = a1[48];
  if (v20 != a2[48] || (a1[49] != 0) != (a2[49] != 0))
    return 0;
  if (v20 != 13)
  {
    v21 = (WebCore::Length *)(a1 + 44);
    if (v20 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v21, (const WebCore::Length *)(a2 + 44)) & 1) == 0)
        return 0;
    }
    else
    {
      if (a1[50])
        v22 = *(float *)v21;
      else
        v22 = (float)*(int *)v21;
      v23 = *((float *)a2 + 11);
      if (!a2[50])
        v23 = (float)SLODWORD(v23);
      if (v22 != v23)
        return 0;
    }
  }
  v24 = a1[56];
  if (v24 != a2[56] || (a1[57] != 0) != (a2[57] != 0))
    return 0;
  if (v24 != 13)
  {
    v25 = (WebCore::Length *)(a1 + 52);
    if (v24 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v25, (const WebCore::Length *)(a2 + 52)) & 1) == 0)
        return 0;
    }
    else
    {
      if (a1[58])
        v26 = *(float *)v25;
      else
        v26 = (float)*(int *)v25;
      v27 = *((float *)a2 + 13);
      if (!a2[58])
        v27 = (float)SLODWORD(v27);
      if (v26 != v27)
        return 0;
    }
  }
  v28 = a1[64];
  if (v28 != a2[64] || (a1[65] != 0) != (a2[65] != 0))
    return 0;
  if (v28 != 13)
  {
    v29 = (WebCore::Length *)(a1 + 60);
    if (v28 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v29, (const WebCore::Length *)(a2 + 60)) & 1) == 0)
        return 0;
    }
    else
    {
      if (a1[66])
        v30 = *(float *)v29;
      else
        v30 = (float)*(int *)v29;
      v31 = *((float *)a2 + 15);
      if (!a2[66])
        v31 = (float)SLODWORD(v31);
      if (v30 != v31)
        return 0;
    }
  }
  v32 = a1[72];
  if (v32 != a2[72] || (a1[73] != 0) != (a2[73] != 0))
    return 0;
  if (v32 != 13)
  {
    v33 = (WebCore::Length *)(a1 + 68);
    if (v32 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v33, (const WebCore::Length *)(a2 + 68)) & 1) == 0)
        return 0;
    }
    else
    {
      if (a1[74])
        v34 = *(float *)v33;
      else
        v34 = (float)*(int *)v33;
      v35 = *((float *)a2 + 17);
      if (!a2[74])
        v35 = (float)SLODWORD(v35);
      if (v34 != v35)
        return 0;
    }
  }
  v36 = a1[80];
  if (v36 != a2[80] || (a1[81] != 0) != (a2[81] != 0))
    return 0;
  if (v36 != 13)
  {
    v37 = (WebCore::Length *)(a1 + 76);
    if (v36 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v37, (const WebCore::Length *)(a2 + 76)) & 1) == 0)
        return 0;
    }
    else
    {
      if (a1[82])
        v38 = *(float *)v37;
      else
        v38 = (float)*(int *)v37;
      v39 = *((float *)a2 + 19);
      if (!a2[82])
        v39 = (float)SLODWORD(v39);
      if (v38 != v39)
        return 0;
    }
  }
  v40 = a1[88];
  if (v40 != a2[88] || (a1[89] != 0) != (a2[89] != 0))
    return 0;
  if (v40 != 13)
  {
    v41 = (WebCore::Length *)(a1 + 84);
    if (v40 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v41, (const WebCore::Length *)(a2 + 84)) & 1) == 0)
        return 0;
    }
    else
    {
      if (a1[90])
        v42 = *(float *)v41;
      else
        v42 = (float)*(int *)v41;
      v43 = *((float *)a2 + 21);
      if (!a2[90])
        v43 = (float)SLODWORD(v43);
      if (v42 != v43)
        return 0;
    }
  }
  v44 = a1[96];
  if (v44 != a2[96] || (a1[97] != 0) != (a2[97] != 0))
    return 0;
  if (v44 != 13)
  {
    v45 = (WebCore::Length *)(a1 + 92);
    if (v44 != 11)
    {
      if (a1[98])
        v46 = *(float *)v45;
      else
        v46 = (float)*(int *)v45;
      v47 = *((float *)a2 + 23);
      if (!a2[98])
        v47 = (float)SLODWORD(v47);
      if (v46 != v47)
        return 0;
      goto LABEL_112;
    }
    if ((WebCore::Length::isCalculatedEqual(v45, (const WebCore::Length *)(a2 + 92)) & 1) != 0)
      goto LABEL_112;
    return 0;
  }
LABEL_112:
  v48 = a1[104];
  if (v48 != a2[104] || (a1[105] != 0) != (a2[105] != 0))
    return 0;
  if (v48 == 13)
    return 1;
  v49 = (WebCore::Length *)(a1 + 100);
  if (v48 == 11)
    return WebCore::Length::isCalculatedEqual(v49, (const WebCore::Length *)(a2 + 100));
  if (a1[106])
    v50 = *(float *)v49;
  else
    v50 = (float)*(int *)v49;
  v51 = *((float *)a2 + 25);
  if (!a2[106])
    v51 = (float)SLODWORD(v51);
  return v50 == v51;
}

uint64_t WebCore::BasicShapeXywh::type(WebCore::BasicShapeXywh *this)
{
  return 6;
}

char *WebCore::BasicShapeXywh::path(WebCore::BasicShapeXywh *this, const WebCore::FloatRect *a2, const WebCore::FloatSize *a3)
{
  int v5;
  WebCore::Length *v6;
  float v7;
  float v8;
  WebCore::Length *v9;
  float v10;
  float v11;
  WebCore::Length *v12;
  float v13;
  float v14;
  float v15;
  WebCore::Length *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  const WebCore::FloatSize *v22;
  float v23;
  float v24;
  float v25;
  const WebCore::FloatSize *v26;
  float v27;
  float v28;
  float v29;
  const WebCore::FloatSize *v30;
  float v31;
  float v32;
  float v33;
  _BOOL4 v35;
  _BOOL4 v36;
  _BOOL4 v37;
  _BOOL4 v38;
  _BOOL4 v39;
  _BOOL4 v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v5 = *((unsigned __int8 *)this + 16);
  v6 = (WebCore::BasicShapeXywh *)((char *)this + 12);
  v7 = *((float *)a2 + 2);
  switch(v5)
  {
    case 0:
    case 1:
    case 9:
      break;
    case 3:
      v8 = *((float *)this + 3);
      if (!*((_BYTE *)this + 18))
        v8 = (float)SLODWORD(v8);
      v7 = (float)(v7 * v8) / 100.0;
      break;
    case 4:
      if (*((_BYTE *)this + 18))
        v7 = *(float *)v6;
      else
        v7 = (float)*(int *)v6;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue(v6, *((float *)a2 + 2));
      v7 = v41;
      break;
    default:
      v7 = 0.0;
      break;
  }
  v9 = (WebCore::BasicShapeXywh *)((char *)this + 20);
  v10 = *((float *)a2 + 3);
  switch(*((_BYTE *)this + 24))
  {
    case 0:
    case 1:
    case 9:
      break;
    case 3:
      v11 = *((float *)this + 5);
      if (!*((_BYTE *)this + 26))
        v11 = (float)SLODWORD(v11);
      v10 = (float)(v10 * v11) / 100.0;
      break;
    case 4:
      if (*((_BYTE *)this + 26))
        v10 = *(float *)v9;
      else
        v10 = (float)*(int *)v9;
      break;
    case 0xB:
      WebCore::Length::nonNanCalculatedValue(v9, *((float *)a2 + 3));
      v10 = v42;
      break;
    default:
      v10 = 0.0;
      break;
  }
  v12 = (WebCore::BasicShapeXywh *)((char *)this + 28);
  v13 = *((float *)a2 + 2);
  switch(*((_BYTE *)this + 32))
  {
    case 0:
    case 1:
    case 9:
      break;
    case 3:
      v14 = *((float *)this + 7);
      if (!*((_BYTE *)this + 34))
        v14 = (float)SLODWORD(v14);
      v13 = (float)(v13 * v14) / 100.0;
      break;
    case 4:
      if (*((_BYTE *)this + 34))
        v13 = *(float *)v12;
      else
        v13 = (float)*(int *)v12;
      break;
    case 0xB:
      WebCore::Length::nonNanCalculatedValue(v12, *((float *)a2 + 2));
      v13 = v43;
      break;
    default:
      v13 = 0.0;
      break;
  }
  v15 = *((float *)a2 + 3);
  v16 = (WebCore::BasicShapeXywh *)((char *)this + 36);
  v17 = v15;
  switch(*((_BYTE *)this + 40))
  {
    case 0:
    case 1:
    case 9:
      break;
    case 3:
      v18 = *((float *)this + 9);
      if (!*((_BYTE *)this + 42))
        v18 = (float)SLODWORD(v18);
      v17 = (float)(v15 * v18) / 100.0;
      break;
    case 4:
      if (*((_BYTE *)this + 42))
        v17 = *(float *)v16;
      else
        v17 = (float)*(int *)v16;
      break;
    case 0xB:
      WebCore::Length::nonNanCalculatedValue(v16, v15);
      v17 = v44;
      v15 = *((float *)a2 + 3);
      break;
    default:
      v17 = 0.0;
      break;
  }
  v45 = v10;
  v46 = v7;
  v47 = *((float *)a2 + 2);
  v48 = v15;
  v19 = WebCore::floatSizeForLengthSize((WebCore::BasicShapeXywh *)((char *)this + 44), (const WebCore::LengthSize *)&v47, a3);
  v21 = v20;
  v61 = *((_QWORD *)a2 + 1);
  v23 = WebCore::floatSizeForLengthSize((WebCore::BasicShapeXywh *)((char *)this + 60), (const WebCore::LengthSize *)&v61, v22);
  v25 = v24;
  v60 = *((_QWORD *)a2 + 1);
  v27 = WebCore::floatSizeForLengthSize((WebCore::BasicShapeXywh *)((char *)this + 92), (const WebCore::LengthSize *)&v60, v26);
  v29 = v28;
  v59 = *((_QWORD *)a2 + 1);
  v31 = WebCore::floatSizeForLengthSize((WebCore::BasicShapeXywh *)((char *)this + 76), (const WebCore::LengthSize *)&v59, v30);
  v33 = 1.0;
  if ((float)(v19 + v23) > v13)
  {
    v33 = v13 / (float)(v19 + v23);
    if (v33 > 1.0)
      v33 = 1.0;
  }
  if ((float)(v27 + v31) > v13 && v33 >= (float)(v13 / (float)(v27 + v31)))
    v33 = v13 / (float)(v27 + v31);
  if ((float)(v21 + v29) > v17 && v33 >= (float)(v17 / (float)(v21 + v29)))
    v33 = v17 / (float)(v21 + v29);
  if ((float)(v25 + v32) > v17 && v33 >= (float)(v17 / (float)(v25 + v32)))
    v33 = v17 / (float)(v25 + v32);
  if (v33 != 1.0)
  {
    v35 = (float)(v19 * v33) != 0.0;
    v36 = (float)(v21 * v33) != 0.0;
    v21 = v35 && v36 ? v21 * v33 : 0.0;
    v19 = v35 && v36 ? v19 * v33 : 0.0;
    v37 = (float)(v23 * v33) != 0.0;
    v38 = (float)(v25 * v33) != 0.0;
    v25 = v37 && v38 ? v25 * v33 : 0.0;
    v23 = v37 && v38 ? v23 * v33 : 0.0;
    v39 = (float)(v27 * v33) != 0.0;
    v40 = (float)(v29 * v33) != 0.0;
    v29 = v39 && v40 ? v29 * v33 : 0.0;
    v27 = v39 && v40 ? v27 * v33 : 0.0;
    v31 = v31 * v33;
    v32 = v32 * v33;
    if (v31 == 0.0 || v32 == 0.0)
    {
      v32 = 0.0;
      v31 = 0.0;
    }
  }
  v47 = v46;
  v48 = v45;
  v49 = v13;
  v50 = v17;
  v51 = v19;
  v52 = v21;
  v53 = v23;
  v54 = v25;
  v55 = v27;
  v56 = v29;
  v57 = v31;
  v58 = v32;
  if ((byte_1ECE842D9 & 1) == 0)
  {
    qword_1ECE848D0 = 0;
    xmmword_1ECE848B0 = 0u;
    unk_1ECE848C0 = 0u;
    xmmword_1ECE84890 = 0u;
    unk_1ECE848A0 = 0u;
    xmmword_1ECE84870 = 0u;
    unk_1ECE84880 = 0u;
    xmmword_1ECE84850 = 0u;
    unk_1ECE84860 = 0u;
    xmmword_1ECE84830 = 0u;
    unk_1ECE84840 = 0u;
    xmmword_1ECE84810 = 0u;
    unk_1ECE84820 = 0u;
    xmmword_1ECE847F0 = 0u;
    unk_1ECE84800 = 0u;
    xmmword_1ECE847D0 = 0u;
    unk_1ECE847E0 = 0u;
    xmmword_1ECE847B0 = 0u;
    unk_1ECE847C0 = 0u;
    xmmword_1ECE84790 = 0u;
    unk_1ECE847A0 = 0u;
    xmmword_1ECE84770 = 0u;
    unk_1ECE84780 = 0u;
    xmmword_1ECE84750 = 0u;
    unk_1ECE84760 = 0u;
    xmmword_1ECE84730 = 0u;
    unk_1ECE84740 = 0u;
    xmmword_1ECE84710 = 0u;
    unk_1ECE84720 = 0u;
    xmmword_1ECE846F0 = 0u;
    unk_1ECE84700 = 0u;
    byte_1ECE842D9 = 1;
  }
  return WTF::TinyLRUCache<WebCore::FloatRoundedRect,WebCore::Path,4ul,WebCore::RoundedRectPathPolicy>::get((uint64_t)&v47);
}

BOOL WebCore::BasicShapeXywh::canBlend(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) == 6;
}

void WebCore::BasicShapeXywh::blend(unsigned __int8 *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  float *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int *v12;
  __n128 v13;
  __n128 v14;
  unsigned int v15;
  int v16;
  __n128 v17;
  unsigned int v18;
  int v19;
  __n128 v20;
  unsigned int v21;
  int v22;
  __n128 v23;
  unsigned int v24;
  int v25;
  unsigned __int32 *v26;
  __n128 v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  char v31;
  unsigned __int8 v32;
  unsigned __int32 *v33;
  __n128 v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  unsigned __int8 v39;
  unsigned __int8 *v40;
  unsigned __int32 *v41;
  __n128 v42;
  unsigned int v43;
  unsigned int v44;
  unsigned __int8 v45;
  char v46;
  unsigned int v47;
  unsigned __int32 *v48;
  __n128 v49;
  unsigned int v50;
  unsigned int v51;
  unsigned __int8 v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned __int32 *v57;
  __n128 v58;
  unsigned int v59;
  unsigned int v60;
  unsigned __int8 v61;
  char v62;
  unsigned int v63;
  unsigned __int32 *v64;
  __n128 v65;
  unsigned int v66;
  unsigned int v67;
  unsigned __int8 v68;
  char v69;
  unsigned int v70;
  uint64_t v71;
  unsigned __int8 *v72;
  unsigned __int32 *v73;
  __n128 v74;
  unsigned int v75;
  unsigned int v76;
  unsigned __int8 v77;
  char v78;
  unsigned int v79;
  float *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned __int8 v83;
  char v84;
  unsigned int v85;
  uint64_t *v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int *v89;
  unsigned int *v90;
  unsigned int *v91;
  unsigned int *v92;
  unsigned int *v93;
  unsigned int *v94;
  unsigned __int8 *v95;
  uint64_t v96;
  unsigned int v97;
  unsigned __int8 v98;
  char v99;
  unsigned __int8 v100;

  if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)a2 + 24))(a2) != 6)
  {
    __break(0xC471u);
    JUMPOUT(0x1964C5860);
  }
  v86 = a4;
  v8 = WTF::fastMalloc((WTF *)0x70);
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)v8 = off_1E34418F8;
  *(_DWORD *)(v8 + 47) = 0;
  *(_DWORD *)(v8 + 44) = 0;
  v87 = (unsigned int *)(v8 + 44);
  *(_DWORD *)(v8 + 55) = 0;
  *(_DWORD *)(v8 + 52) = 0;
  v88 = (unsigned int *)(v8 + 52);
  *(_DWORD *)(v8 + 63) = 0;
  *(_DWORD *)(v8 + 60) = 0;
  v89 = (unsigned int *)(v8 + 60);
  *(_DWORD *)(v8 + 71) = 0;
  *(_DWORD *)(v8 + 68) = 0;
  v90 = (unsigned int *)(v8 + 68);
  *(_DWORD *)(v8 + 79) = 0;
  *(_DWORD *)(v8 + 76) = 0;
  v91 = (unsigned int *)(v8 + 76);
  *(_DWORD *)(v8 + 87) = 0;
  *(_DWORD *)(v8 + 84) = 0;
  v92 = (unsigned int *)(v8 + 84);
  *(_DWORD *)(v8 + 95) = 0;
  *(_DWORD *)(v8 + 92) = 0;
  v93 = (unsigned int *)(v8 + 92);
  *(_DWORD *)(v8 + 103) = 0;
  *(_DWORD *)(v8 + 100) = 0;
  v94 = (unsigned int *)(v8 + 100);
  v95 = a1;
  *(_DWORD *)(v8 + 12) = 0;
  v9 = (float *)(v8 + 12);
  *(_DWORD *)(v8 + 20) = 0;
  v10 = (unsigned int *)(v8 + 20);
  *(_DWORD *)(v8 + 28) = 0;
  v11 = (unsigned int *)(v8 + 28);
  *(_DWORD *)(v8 + 36) = 0;
  v12 = (unsigned int *)(v8 + 36);
  *(_DWORD *)(v8 + 15) = 0;
  *(_DWORD *)(v8 + 23) = 0;
  *(_DWORD *)(v8 + 31) = 0;
  *(_DWORD *)(v8 + 39) = 0;
  WebCore::blend(a2 + 12, a1 + 12, a3, (uint64_t)&v97, v13);
  v96 = a3;
  if ((unsigned int *)(v8 + 12) == &v97)
  {
    if (v98 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v97);
    }
  }
  else
  {
    if (*(_BYTE *)(v8 + 16) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)v9);
    }
    v15 = v98;
    *(_BYTE *)(v8 + 16) = v98;
    *(_BYTE *)(v8 + 17) = v99;
    if (v15 - 2 < 9)
    {
      v16 = v100;
      *(_BYTE *)(v8 + 18) = v100;
      if (v16)
      {
        v14.n128_u32[0] = v97;
        *v9 = *(float *)&v97;
        goto LABEL_7;
      }
LABEL_49:
      *v9 = *(float *)&v97;
      goto LABEL_7;
    }
    if (v15 > 0xD)
      goto LABEL_7;
    if (((1 << v15) & 0x3003) != 0)
    {
      *v9 = 0.0;
      goto LABEL_7;
    }
    if (v15 == 11)
      goto LABEL_49;
  }
LABEL_7:
  WebCore::blend(a2 + 20, a1 + 20, a3, (uint64_t)&v97, v14);
  if (v10 == &v97)
  {
    if (v98 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v97);
    }
  }
  else
  {
    if (*(_BYTE *)(v8 + 24) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v10);
    }
    v18 = v98;
    *(_BYTE *)(v8 + 24) = v98;
    *(_BYTE *)(v8 + 25) = v99;
    if (v18 - 2 < 9)
    {
      v19 = v100;
      *(_BYTE *)(v8 + 26) = v100;
      if (v19)
      {
        v17.n128_u32[0] = v97;
        *v10 = v97;
        goto LABEL_12;
      }
LABEL_51:
      *v10 = v97;
      goto LABEL_12;
    }
    if (v18 > 0xD)
      goto LABEL_12;
    if (((1 << v18) & 0x3003) != 0)
    {
      *v10 = 0;
      goto LABEL_12;
    }
    if (v18 == 11)
      goto LABEL_51;
  }
LABEL_12:
  WebCore::blend(a2 + 28, a1 + 28, a3, (uint64_t)&v97, v17);
  if (v11 == &v97)
  {
    if (v98 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v97);
    }
  }
  else
  {
    if (*(_BYTE *)(v8 + 32) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v11);
    }
    v21 = v98;
    *(_BYTE *)(v8 + 32) = v98;
    *(_BYTE *)(v8 + 33) = v99;
    if (v21 - 2 < 9)
    {
      v22 = v100;
      *(_BYTE *)(v8 + 34) = v100;
      if (v22)
      {
        v20.n128_u32[0] = v97;
        *v11 = v97;
        goto LABEL_17;
      }
LABEL_53:
      *v11 = v97;
      goto LABEL_17;
    }
    if (v21 > 0xD)
      goto LABEL_17;
    if (((1 << v21) & 0x3003) != 0)
    {
      *v11 = 0;
      goto LABEL_17;
    }
    if (v21 == 11)
      goto LABEL_53;
  }
LABEL_17:
  WebCore::blend(a2 + 36, a1 + 36, a3, (uint64_t)&v97, v20);
  if (v12 != &v97)
  {
    if (*(_BYTE *)(v8 + 40) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v12);
    }
    v24 = v98;
    *(_BYTE *)(v8 + 40) = v98;
    *(_BYTE *)(v8 + 41) = v99;
    if (v24 - 2 >= 9)
    {
      if (v24 > 0xD)
        goto LABEL_22;
      if (((1 << v24) & 0x3003) != 0)
      {
        *v12 = 0;
        goto LABEL_22;
      }
      if (v24 != 11)
        goto LABEL_22;
    }
    else
    {
      v25 = v100;
      *(_BYTE *)(v8 + 42) = v100;
      if (v25)
      {
        v23.n128_u32[0] = v97;
        *v12 = v97;
        goto LABEL_22;
      }
    }
    *v12 = v97;
    goto LABEL_22;
  }
  if (v98 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v97);
  }
LABEL_22:
  v26 = (unsigned __int32 *)(a2 + 44);
  WebCore::blend(a2 + 44, a1 + 44, a3, (uint64_t)&v97, v23);
  v28 = v98;
  if (v98 != 11 && v98 != 13)
  {
    if (v100)
    {
      v27.n128_u32[0] = v97;
      if (*(float *)&v97 < 0.0)
      {
LABEL_26:
        v29 = a2[48];
        if (!a2[48] || v29 == 11)
          goto LABEL_31;
        if (a2[50])
        {
          v27.n128_u32[0] = *v26;
          if (*(float *)v26 != 0.0)
          {
LABEL_31:
            v30 = 0;
            v31 = 0;
            v32 = 0;
            if (v29 == 11)
              v28 = 4;
            else
              v28 = v29;
            goto LABEL_61;
          }
        }
        else if (*v26)
        {
          goto LABEL_31;
        }
        v29 = a1[48];
        goto LABEL_31;
      }
    }
    else if ((v97 & 0x80000000) != 0)
    {
      goto LABEL_26;
    }
  }
  v31 = v99;
  if (v98 - 2 >= 9)
  {
    if (v98 != 11)
    {
      v30 = 0;
      v32 = 0;
      goto LABEL_61;
    }
    v32 = 0;
  }
  else
  {
    v32 = v100;
  }
  v30 = v97;
LABEL_61:
  v33 = (unsigned __int32 *)(a2 + 52);
  WebCore::blend(a2 + 52, a1 + 52, a3, (uint64_t)&v97, v27);
  v35 = v98;
  if (v98 == 11 || v98 == 13)
    goto LABEL_79;
  if (!v100)
  {
    if ((v97 & 0x80000000) != 0)
      goto LABEL_65;
LABEL_79:
    v38 = v99;
    if (v98 - 2 >= 9)
    {
      if (v98 != 11)
      {
        v37 = 0;
        v39 = 0;
        goto LABEL_82;
      }
      v39 = 0;
    }
    else
    {
      v39 = v100;
    }
    v37 = v97;
    goto LABEL_82;
  }
  v34.n128_u32[0] = v97;
  if (*(float *)&v97 >= 0.0)
    goto LABEL_79;
LABEL_65:
  v36 = a2[56];
  if (!a2[56] || v36 == 11)
    goto LABEL_70;
  if (!a2[58])
  {
    if (*v33)
      goto LABEL_70;
    goto LABEL_69;
  }
  v34.n128_u32[0] = *v33;
  if (*(float *)v33 == 0.0)
LABEL_69:
    v36 = a1[56];
LABEL_70:
  v37 = 0;
  v38 = 0;
  v39 = 0;
  if (v36 == 11)
    v35 = 4;
  else
    v35 = v36;
LABEL_82:
  if (*(_BYTE *)(v8 + 48) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v87);
  }
  *(_BYTE *)(v8 + 48) = v28;
  *(_BYTE *)(v8 + 49) = v31;
  if (v28 - 2 < 9)
  {
    *(_BYTE *)(v8 + 50) = v32;
LABEL_85:
    *v87 = v30;
    goto LABEL_86;
  }
  if (v28 <= 0xD)
  {
    if (((1 << v28) & 0x3003) != 0)
    {
      v30 = 0;
      goto LABEL_85;
    }
    if (v28 == 11)
      goto LABEL_85;
  }
LABEL_86:
  if (*(_BYTE *)(v8 + 56) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v88);
  }
  *(_BYTE *)(v8 + 56) = v35;
  *(_BYTE *)(v8 + 57) = v38;
  if (v35 - 2 >= 9)
  {
    v40 = v95;
    if (v35 > 0xD)
      goto LABEL_90;
    if (((1 << v35) & 0x3003) != 0)
    {
      v37 = 0;
    }
    else if (v35 != 11)
    {
      goto LABEL_90;
    }
  }
  else
  {
    *(_BYTE *)(v8 + 58) = v39;
    v40 = v95;
  }
  *v88 = v37;
LABEL_90:
  v41 = (unsigned __int32 *)(a2 + 60);
  WebCore::blend(a2 + 60, v40 + 60, v96, (uint64_t)&v97, v34);
  v43 = v98;
  if (v98 != 11 && v98 != 13)
  {
    if (v100)
    {
      v42.n128_u32[0] = v97;
      if (*(float *)&v97 < 0.0)
      {
LABEL_94:
        v44 = a2[64];
        if (!a2[64] || v44 == 11)
          goto LABEL_99;
        if (a2[66])
        {
          v42.n128_u32[0] = *v41;
          if (*(float *)v41 != 0.0)
          {
LABEL_99:
            v45 = 0;
            v46 = 0;
            v47 = 0;
            if (v44 == 11)
              v43 = 4;
            else
              v43 = v44;
            goto LABEL_121;
          }
        }
        else if (*v41)
        {
          goto LABEL_99;
        }
        v44 = v40[64];
        goto LABEL_99;
      }
    }
    else if ((v97 & 0x80000000) != 0)
    {
      goto LABEL_94;
    }
  }
  v46 = v99;
  if (v98 - 2 >= 9)
  {
    if (v98 != 11)
    {
      v45 = 0;
      v47 = 0;
      goto LABEL_121;
    }
    v45 = 0;
  }
  else
  {
    v45 = v100;
  }
  v47 = v97;
LABEL_121:
  v48 = (unsigned __int32 *)(a2 + 68);
  WebCore::blend(a2 + 68, v40 + 68, v96, (uint64_t)&v97, v42);
  v50 = v98;
  if (v98 == 11 || v98 == 13)
    goto LABEL_139;
  if (!v100)
  {
    if ((v97 & 0x80000000) != 0)
      goto LABEL_125;
LABEL_139:
    v53 = v99;
    if (v98 - 2 >= 9)
    {
      if (v98 != 11)
      {
        v52 = 0;
        v54 = 0;
        goto LABEL_142;
      }
      v52 = 0;
    }
    else
    {
      v52 = v100;
    }
    v54 = v97;
    goto LABEL_142;
  }
  v49.n128_u32[0] = v97;
  if (*(float *)&v97 >= 0.0)
    goto LABEL_139;
LABEL_125:
  v51 = a2[72];
  if (!a2[72] || v51 == 11)
    goto LABEL_130;
  if (!a2[74])
  {
    if (*v48)
      goto LABEL_130;
    goto LABEL_129;
  }
  v49.n128_u32[0] = *v48;
  if (*(float *)v48 == 0.0)
LABEL_129:
    v51 = v40[72];
LABEL_130:
  v52 = 0;
  v53 = 0;
  v54 = 0;
  if (v51 == 11)
    v50 = 4;
  else
    v50 = v51;
LABEL_142:
  if (*(_BYTE *)(v8 + 64) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v89);
  }
  *(_BYTE *)(v8 + 64) = v43;
  *(_BYTE *)(v8 + 65) = v46;
  if (v43 - 2 < 9)
  {
    *(_BYTE *)(v8 + 66) = v45;
    v55 = v96;
LABEL_145:
    *v89 = v47;
    goto LABEL_146;
  }
  v55 = v96;
  if (v43 <= 0xD)
  {
    if (((1 << v43) & 0x3003) != 0)
    {
      v47 = 0;
      goto LABEL_145;
    }
    if (v43 == 11)
      goto LABEL_145;
  }
LABEL_146:
  if (*(_BYTE *)(v8 + 72) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v90);
    v55 = v96;
  }
  *(_BYTE *)(v8 + 72) = v50;
  *(_BYTE *)(v8 + 73) = v53;
  if (v50 - 2 >= 9)
  {
    v56 = v95;
    if (v50 > 0xD)
      goto LABEL_150;
    if (((1 << v50) & 0x3003) != 0)
    {
      v54 = 0;
    }
    else if (v50 != 11)
    {
      goto LABEL_150;
    }
  }
  else
  {
    *(_BYTE *)(v8 + 74) = v52;
    v56 = v95;
  }
  *v90 = v54;
LABEL_150:
  v57 = (unsigned __int32 *)(a2 + 76);
  WebCore::blend(a2 + 76, v56 + 76, v55, (uint64_t)&v97, v49);
  v59 = v98;
  if (v98 != 11 && v98 != 13)
  {
    if (v100)
    {
      v58.n128_u32[0] = v97;
      if (*(float *)&v97 < 0.0)
      {
LABEL_154:
        v60 = a2[80];
        if (!a2[80] || v60 == 11)
          goto LABEL_159;
        if (a2[82])
        {
          v58.n128_u32[0] = *v57;
          if (*(float *)v57 != 0.0)
          {
LABEL_159:
            v61 = 0;
            v62 = 0;
            v63 = 0;
            if (v60 == 11)
              v59 = 4;
            else
              v59 = v60;
            goto LABEL_181;
          }
        }
        else if (*v57)
        {
          goto LABEL_159;
        }
        v60 = v56[80];
        goto LABEL_159;
      }
    }
    else if ((v97 & 0x80000000) != 0)
    {
      goto LABEL_154;
    }
  }
  v62 = v99;
  if (v98 - 2 >= 9)
  {
    if (v98 != 11)
    {
      v61 = 0;
      v63 = 0;
      goto LABEL_181;
    }
    v61 = 0;
  }
  else
  {
    v61 = v100;
  }
  v63 = v97;
LABEL_181:
  v64 = (unsigned __int32 *)(a2 + 84);
  WebCore::blend(a2 + 84, v56 + 84, v96, (uint64_t)&v97, v58);
  v66 = v98;
  if (v98 == 11 || v98 == 13)
    goto LABEL_199;
  if (!v100)
  {
    if ((v97 & 0x80000000) != 0)
      goto LABEL_185;
LABEL_199:
    v69 = v99;
    if (v98 - 2 >= 9)
    {
      if (v98 != 11)
      {
        v68 = 0;
        v70 = 0;
        goto LABEL_202;
      }
      v68 = 0;
    }
    else
    {
      v68 = v100;
    }
    v70 = v97;
    goto LABEL_202;
  }
  v65.n128_u32[0] = v97;
  if (*(float *)&v97 >= 0.0)
    goto LABEL_199;
LABEL_185:
  v67 = a2[88];
  if (!a2[88] || v67 == 11)
    goto LABEL_190;
  if (!a2[90])
  {
    if (*v64)
      goto LABEL_190;
    goto LABEL_189;
  }
  v65.n128_u32[0] = *v64;
  if (*(float *)v64 == 0.0)
LABEL_189:
    v67 = v56[88];
LABEL_190:
  v68 = 0;
  v69 = 0;
  v70 = 0;
  if (v67 == 11)
    v66 = 4;
  else
    v66 = v67;
LABEL_202:
  if (*(_BYTE *)(v8 + 80) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v91);
  }
  *(_BYTE *)(v8 + 80) = v59;
  *(_BYTE *)(v8 + 81) = v62;
  if (v59 - 2 < 9)
  {
    *(_BYTE *)(v8 + 82) = v61;
    v71 = v96;
LABEL_205:
    *v91 = v63;
    goto LABEL_206;
  }
  v71 = v96;
  if (v59 <= 0xD)
  {
    if (((1 << v59) & 0x3003) != 0)
    {
      v63 = 0;
      goto LABEL_205;
    }
    if (v59 == 11)
      goto LABEL_205;
  }
LABEL_206:
  if (*(_BYTE *)(v8 + 88) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v92);
    v71 = v96;
  }
  *(_BYTE *)(v8 + 88) = v66;
  *(_BYTE *)(v8 + 89) = v69;
  if (v66 - 2 >= 9)
  {
    v72 = v95;
    if (v66 > 0xD)
      goto LABEL_210;
    if (((1 << v66) & 0x3003) != 0)
    {
      v70 = 0;
    }
    else if (v66 != 11)
    {
      goto LABEL_210;
    }
  }
  else
  {
    *(_BYTE *)(v8 + 90) = v68;
    v72 = v95;
  }
  *v92 = v70;
LABEL_210:
  v73 = (unsigned __int32 *)(a2 + 92);
  WebCore::blend(a2 + 92, v72 + 92, v71, (uint64_t)&v97, v65);
  v75 = v98;
  if (v98 != 11 && v98 != 13)
  {
    if (v100)
    {
      v74.n128_u32[0] = v97;
      if (*(float *)&v97 < 0.0)
      {
LABEL_214:
        v76 = a2[96];
        if (!a2[96] || v76 == 11)
          goto LABEL_219;
        if (a2[98])
        {
          v74.n128_u32[0] = *v73;
          if (*(float *)v73 != 0.0)
          {
LABEL_219:
            v77 = 0;
            v78 = 0;
            v79 = 0;
            if (v76 == 11)
              v75 = 4;
            else
              v75 = v76;
            goto LABEL_241;
          }
        }
        else if (*v73)
        {
          goto LABEL_219;
        }
        v76 = v72[96];
        goto LABEL_219;
      }
    }
    else if ((v97 & 0x80000000) != 0)
    {
      goto LABEL_214;
    }
  }
  v78 = v99;
  if (v98 - 2 >= 9)
  {
    if (v98 != 11)
    {
      v77 = 0;
      v79 = 0;
      goto LABEL_241;
    }
    v77 = 0;
  }
  else
  {
    v77 = v100;
  }
  v79 = v97;
LABEL_241:
  v80 = (float *)(a2 + 100);
  WebCore::blend(a2 + 100, v72 + 100, v96, (uint64_t)&v97, v74);
  v81 = v98;
  if (v98 == 11 || v98 == 13)
    goto LABEL_259;
  if (!v100)
  {
    if ((v97 & 0x80000000) != 0)
      goto LABEL_245;
LABEL_259:
    v84 = v99;
    if (v98 - 2 >= 9)
    {
      if (v98 != 11)
      {
        v83 = 0;
        v85 = 0;
        goto LABEL_262;
      }
      v83 = 0;
    }
    else
    {
      v83 = v100;
    }
    v85 = v97;
    goto LABEL_262;
  }
  if (*(float *)&v97 >= 0.0)
    goto LABEL_259;
LABEL_245:
  v82 = a2[104];
  if (!a2[104] || v82 == 11)
    goto LABEL_250;
  if (!a2[106])
  {
    if (*(_DWORD *)v80)
      goto LABEL_250;
    goto LABEL_249;
  }
  if (*v80 == 0.0)
LABEL_249:
    v82 = v95[104];
LABEL_250:
  v83 = 0;
  v84 = 0;
  v85 = 0;
  if (v82 == 11)
    v81 = 4;
  else
    v81 = v82;
LABEL_262:
  if (*(_BYTE *)(v8 + 96) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v93);
  }
  *(_BYTE *)(v8 + 96) = v75;
  *(_BYTE *)(v8 + 97) = v78;
  if (v75 - 2 < 9)
  {
    *(_BYTE *)(v8 + 98) = v77;
LABEL_265:
    *v93 = v79;
    goto LABEL_266;
  }
  if (v75 <= 0xD)
  {
    if (((1 << v75) & 0x3003) != 0)
    {
      v79 = 0;
      goto LABEL_265;
    }
    if (v75 == 11)
      goto LABEL_265;
  }
LABEL_266:
  if (*(_BYTE *)(v8 + 104) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v94);
  }
  *(_BYTE *)(v8 + 104) = v81;
  *(_BYTE *)(v8 + 105) = v84;
  if (v81 - 2 >= 9)
  {
    if (v81 > 0xD)
      goto LABEL_270;
    if (((1 << v81) & 0x3003) != 0)
    {
      v85 = 0;
    }
    else if (v81 != 11)
    {
      goto LABEL_270;
    }
  }
  else
  {
    *(_BYTE *)(v8 + 106) = v83;
  }
  *v94 = v85;
LABEL_270:
  *v86 = v8;
}

uint64_t WebCore::BasicShapeXywh::dump(WebCore::BasicShapeXywh *this, WTF::TextStream *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  WTF::TextStream::dumpProperty<WebCore::Length>(a2, (uint64_t)"x", (unsigned int *)this + 3);
  WTF::TextStream::dumpProperty<WebCore::Length>(a2, (uint64_t)"y", (unsigned int *)this + 5);
  WTF::TextStream::dumpProperty<WebCore::Length>(a2, (uint64_t)"width", (unsigned int *)this + 7);
  WTF::TextStream::dumpProperty<WebCore::Length>(a2, (uint64_t)"height", (unsigned int *)this + 9);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v4 = WTF::TextStream::operator<<();
  WebCore::operator<<(v4, (unsigned int *)this + 11);
  WTF::TextStream::endGroup(a2);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v5 = WTF::TextStream::operator<<();
  WebCore::operator<<(v5, (unsigned int *)this + 15);
  WTF::TextStream::endGroup(a2);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v6 = WTF::TextStream::operator<<();
  WebCore::operator<<(v6, (unsigned int *)this + 19);
  WTF::TextStream::endGroup(a2);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v7 = WTF::TextStream::operator<<();
  WebCore::operator<<(v7, (unsigned int *)this + 23);
  return WTF::TextStream::endGroup(a2);
}

uint64_t WebCore::BasicShapePolygon::create@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;

  result = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3441838;
  *(_BYTE *)(result + 12) = a1;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  v7 = *a2;
  *a2 = 0;
  *(_QWORD *)(result + 16) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(result + 24) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(result + 28) = v7;
  *a3 = result;
  return result;
}

uint64_t WebCore::BasicShapePolygon::clone@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  char v13;

  v2 = this;
  v4 = *(unsigned int *)(this + 28);
  if (!(_DWORD)v4)
  {
    v5 = 0;
LABEL_14:
    this = WTF::fastMalloc((WTF *)0x20);
    v13 = *(_BYTE *)(v2 + 12);
    *(_DWORD *)(this + 8) = 1;
    *(_QWORD *)this = off_1E3441838;
    *(_BYTE *)(this + 12) = v13;
    *(_QWORD *)(this + 16) = v5;
    *(_DWORD *)(this + 24) = v4;
    *(_DWORD *)(this + 28) = v4;
    *a2 = this;
    return this;
  }
  if (!(v4 >> 29))
  {
    v5 = WTF::fastMalloc((WTF *)(8 * v4));
    v6 = *(unsigned int *)(v2 + 28);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = *(_QWORD *)(v2 + 16);
      v9 = 8 * v6;
      do
      {
        v10 = v5 + v7;
        *(_DWORD *)v10 = 0;
        *(_WORD *)(v10 + 5) = 0;
        v11 = *(unsigned __int8 *)(v8 + v7 + 4);
        *(_BYTE *)(v10 + 4) = v11;
        *(_BYTE *)(v10 + 5) = *(_BYTE *)(v8 + v7 + 5);
        if (v11 <= 0xD)
        {
          v12 = 1 << v11;
          if ((v12 & 0x7FC) != 0)
          {
            *(_BYTE *)(v10 + 6) = *(_BYTE *)(v8 + v7 + 6);
            *(_DWORD *)v10 = *(_DWORD *)(v8 + v7);
          }
          else if ((v12 & 0x3003) != 0)
          {
            *(_DWORD *)v10 = 0;
          }
          else
          {
            *(_DWORD *)v10 = *(_DWORD *)(v8 + v7);
            WebCore::Length::ref((int *)v10);
          }
        }
        v7 += 8;
      }
      while (v9 != v7);
    }
    goto LABEL_14;
  }
  __break(0xC471u);
  return this;
}

BOOL WebCore::BasicShapePolygon::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  BOOL v8;
  unint64_t v9;
  float v10;
  float v11;
  _BOOL4 v12;
  _BOOL4 v13;
  unsigned __int8 *v14;
  char isCalculatedEqual;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;

  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2)
    && (*(_BYTE *)(a1 + 12) == 0) != (*(_BYTE *)(a2 + 12) != 0))
  {
    v4 = *(unsigned int *)(a1 + 28);
    if ((_DWORD)v4 == *(_DWORD *)(a2 + 28))
    {
      if (!(_DWORD)v4)
        return 1;
      v5 = *(unsigned __int8 **)(a1 + 16);
      v6 = *(unsigned __int8 **)(a2 + 16);
      v7 = v5[4];
      if (v7 == v6[4] && (v5[5] != 0) == (v6[5] != 0))
      {
        v8 = 0;
        v9 = 1;
        while (1)
        {
          if (v7 != 13)
          {
            if (v7 == 11)
            {
              v14 = v5;
              v18 = v4;
              v19 = v9;
              v17 = v8;
              isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)v5, (const WebCore::Length *)v6);
              v4 = v18;
              v9 = v19;
              v8 = v17;
              v5 = v14;
              if ((isCalculatedEqual & 1) == 0)
                return v8;
            }
            else
            {
              if (v5[6])
                v10 = *(float *)v5;
              else
                v10 = (float)*(int *)v5;
              v11 = *(float *)v6;
              if (!v6[6])
                v11 = (float)*(int *)v6;
              if (v10 != v11)
                return v8;
            }
          }
          v8 = v9 >= v4;
          if (v4 != v9)
          {
            v7 = v5[12];
            if (v7 == v6[12])
            {
              v12 = v5[13] != 0;
              v13 = v6[13] != 0;
              ++v9;
              v6 += 8;
              v5 += 8;
              if (((v12 ^ v13) & 1) == 0)
                continue;
            }
          }
          return v8;
        }
      }
    }
  }
  return 0;
}

uint64_t WebCore::BasicShapePolygon::type(WebCore::BasicShapePolygon *this)
{
  return 0;
}

char *WebCore::BasicShapePolygon::path(WebCore::BasicShapePolygon *this, const WebCore::FloatRect *a2)
{
  float *v2;
  unint64_t v3;
  unint64_t v4;
  float *v5;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  WebCore::Length *v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  WebCore::Length *v17;
  float v18;
  float v19;
  char *v20;
  unsigned int *v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  uint64_t v27;
  int32x2_t v28;
  unint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  WTF **v41;
  WTF *v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  WTF *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unsigned int *v57;
  unsigned int *v58;
  unsigned int v59;
  unsigned int v60;
  WTF *v61;
  unsigned int *v62;
  unsigned int *v63;
  unsigned int v64;
  unsigned int v65;
  WTF *v66;
  float *v68;
  int v69;
  int v70;
  char v71;
  unsigned int *v72;
  unsigned int *v73;
  int v74;
  WTF *v75;
  unint64_t v76;
  _QWORD v77[7];
  int v78;
  uint64_t v79;

  v2 = 0;
  v79 = *MEMORY[0x1E0C80C00];
  v3 = *((unsigned int *)this + 7);
  v4 = v3 >> 1;
  v68 = 0;
  v69 = 0;
  v70 = v3 >> 1;
  if (v3 >= 2)
  {
    if (v3 >> 30)
    {
      __break(0xC471u);
      JUMPOUT(0x1964C71ECLL);
    }
    v5 = (float *)a2;
    v2 = (float *)WTF::fastMalloc((WTF *)(8 * v4));
    v7 = v2 + 1;
    v69 = v3 >> 1;
    v68 = v2;
    bzero(v2, 8 * v4);
    v8 = 0;
    v9 = 16 * v4;
    v10 = 1;
    do
    {
      if (v10 - 1 >= *((unsigned int *)this + 7))
      {
        __break(0xC471u);
        JUMPOUT(0x1964C71D4);
      }
      v11 = *((_QWORD *)this + 2);
      v12 = (WebCore::Length *)(v11 + v8);
      v13 = v5[2];
      switch(*(_BYTE *)(v11 + v8 + 4))
      {
        case 0:
        case 1:
        case 9:
          break;
        case 3:
          v14 = v11 + v8;
          v15 = *(float *)v14;
          if (!*(_BYTE *)(v14 + 6))
            v15 = (float)*(int *)v14;
          v13 = (float)(v13 * v15) / 100.0;
          break;
        case 4:
          if (*(_BYTE *)(v11 + v8 + 6))
            v13 = *(float *)v12;
          else
            v13 = (float)*(int *)v12;
          break;
        case 0xB:
          WebCore::Length::nonNanCalculatedValue(v12, v13);
          break;
        default:
          v13 = 0.0;
          break;
      }
      *(v7 - 1) = v13 + *v5;
      if (v9 == v8)
      {
        __break(0xC471u);
        JUMPOUT(0x1964C71DCLL);
      }
      if (v10 >= *((unsigned int *)this + 7))
      {
        __break(0xC471u);
        JUMPOUT(0x1964C71E4);
      }
      v16 = *((_QWORD *)this + 2);
      v17 = (WebCore::Length *)(v16 + v8 + 8);
      v18 = v5[3];
      switch(*(_BYTE *)(v16 + v8 + 12))
      {
        case 0:
        case 1:
        case 9:
          break;
        case 3:
          v19 = *(float *)v17;
          if (!*(_BYTE *)(v16 + v8 + 14))
            v19 = (float)*(int *)v17;
          v18 = (float)(v18 * v19) / 100.0;
          break;
        case 4:
          if (*(_BYTE *)(v16 + v8 + 14))
            v18 = *(float *)v17;
          else
            v18 = (float)*(int *)v17;
          break;
        case 0xB:
          WebCore::Length::nonNanCalculatedValue(v17, v18);
          break;
        default:
          v18 = 0.0;
          break;
      }
      *v7 = v18 + v5[1];
      v7 += 2;
      v8 += 16;
      v10 += 2;
    }
    while (v9 != v8);
    v4 = v3 >> 1;
  }
  if ((byte_1ECE842DA & 1) == 0)
  {
    qword_1ECE846E8 = 0;
    xmmword_1ECE846C8 = 0u;
    unk_1ECE846D8 = 0u;
    xmmword_1ECE846A8 = 0u;
    unk_1ECE846B8 = 0u;
    xmmword_1ECE84688 = 0u;
    unk_1ECE84698 = 0u;
    xmmword_1ECE84668 = 0u;
    unk_1ECE84678 = 0u;
    xmmword_1ECE84648 = 0u;
    unk_1ECE84658 = 0u;
    unk_1ECE84628 = 0u;
    unk_1ECE84638 = 0u;
    xmmword_1ECE84608 = 0u;
    unk_1ECE84618 = 0u;
    xmmword_1ECE845E8 = 0u;
    unk_1ECE845F8 = 0u;
    xmmword_1ECE845C8 = 0u;
    *(_OWORD *)&dword_1ECE845D8 = 0u;
    xmmword_1ECE845A8 = 0u;
    unk_1ECE845B8 = 0u;
    xmmword_1ECE84588 = 0u;
    unk_1ECE84598 = 0u;
    byte_1ECE842DA = 1;
  }
  if (v3 <= 1)
  {
    v20 = (char *)&unk_1ECE84390;
    if ((byte_1ECE842F0 & 1) == 0)
    {
      byte_1ECE84398 = 0;
      v20 = (char *)&unk_1ECE84390;
      dword_1ECE843D0 = 0;
      byte_1ECE842F0 = 1;
    }
    goto LABEL_101;
  }
  if (!qword_1ECE846E8)
    goto LABEL_68;
  v21 = (unsigned int *)&_MergedGlobals_254[88 * qword_1ECE846E8 + 600];
  v22 = qword_1ECE846E8;
  while (1)
  {
    --v22;
    v23 = &_MergedGlobals_254[88 * v22];
    v24 = *((unsigned int *)v23 + 175);
    if ((_DWORD)v24 == (_DWORD)v4)
    {
      v25 = v23 + 688;
      if (**(float **)v25 == *v2 && *(float *)(*(_QWORD *)v25 + 4) == v2[1])
      {
        v27 = 1;
        do
        {
          if (v24 == v27)
            goto LABEL_54;
          v28 = vceq_f32(*(float32x2_t *)(*(_QWORD *)v25 + 8 * v27), *(float32x2_t *)&v2[2 * v27]);
          ++v27;
        }
        while ((v28.i32[0] & v28.i32[1] & 1) != 0);
        if (v27 - 1 >= v24)
          break;
      }
    }
    v21 -= 22;
    if (!v22)
    {
      if (qword_1ECE846E8 == 4)
      {
        v29 = 0;
        v30 = (unsigned int *)&xmmword_1ECE84588;
        while (1)
        {
          WTF::VectorBuffer<WTF::Function<void ()(void)>,0ul,WTF::FastMalloc>::adopt((uint64_t)v30, v30 + 22);
          v31 = v30[20];
          v32 = v30[42];
          if ((_DWORD)v31 == -1)
          {
            if ((_DWORD)v32 != -1)
            {
LABEL_51:
              v75 = (WTF *)(v30 + 6);
              ((void (*)(WTF **))off_1E3441710[v32])(&v75);
            }
          }
          else
          {
            if ((_DWORD)v32 != -1)
              goto LABEL_51;
            ((void (*)(WTF **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_10[v31])(&v75, v30 + 6);
            v30[20] = -1;
          }
          ++v29;
          v30 += 22;
          if (v29 >= qword_1ECE846E8 - 1)
            goto LABEL_69;
        }
      }
LABEL_68:
      ++qword_1ECE846E8;
LABEL_69:
      if (v3 >> 30)
      {
        __break(0xC471u);
        JUMPOUT(0x1964C71F4);
      }
      v47 = WTF::fastMalloc((WTF *)(8 * v4));
      v48 = v47;
      v49 = 0;
      do
      {
        *(_QWORD *)(v47 + v49 * 4) = *(_QWORD *)&v2[v49];
        v49 += 2;
      }
      while (2 * v4 != v49);
      WebCore::PathStream::create((uint64_t)&v68, (uint64_t *)&v73);
      v74 = 2;
      v50 = (uint64_t)v73;
      v73 = 0;
      v78 = 2;
      v51 = qword_1ECE846E8 - 1;
      v52 = (char *)&xmmword_1ECE84588 + 88 * qword_1ECE846E8 - 88;
      v53 = *(WTF **)v52;
      if (*(_QWORD *)v52)
      {
        *(_QWORD *)v52 = 0;
        *((_DWORD *)v52 + 2) = 0;
        WTF::fastFree(v53, a2);
      }
      v75 = 0;
      v76 = 0;
      *(_QWORD *)v52 = v48;
      *((_DWORD *)v52 + 2) = v4;
      *((_DWORD *)v52 + 3) = v4;
      v54 = &_MergedGlobals_254[88 * v51];
      v55 = v54 + 712;
      v56 = *((unsigned int *)v54 + 192);
      if ((_DWORD)v56 != -1)
      {
        if ((_DWORD)v56 == 2)
        {
          v77[0] = 0;
          v57 = *(unsigned int **)v55;
          *(_QWORD *)v55 = v50;
          if (v57)
          {
            v58 = v57 + 2;
            do
            {
              v59 = __ldaxr(v58);
              v60 = v59 - 1;
            }
            while (__stlxr(v60, v58));
            if (!v60)
            {
              atomic_store(1u, v57 + 2);
              (*(void (**)(unsigned int *))(*(_QWORD *)v57 + 8))(v57);
            }
          }
          goto LABEL_83;
        }
        ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_10[v56])(&v71, v55);
      }
      v77[0] = 0;
      *(_QWORD *)v55 = v50;
      *((_DWORD *)v55 + 14) = 2;
LABEL_83:
      if (v78 != -1)
        ((void (*)(char *, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_10[v78])(&v71, v77);
      v78 = -1;
      v61 = v75;
      if (v75)
      {
        v75 = 0;
        LODWORD(v76) = 0;
        WTF::fastFree(v61, a2);
      }
      v62 = v73;
      v73 = 0;
      if (v62)
      {
        v63 = v62 + 2;
        do
        {
          v64 = __ldaxr(v63);
          v65 = v64 - 1;
        }
        while (__stlxr(v65, v63));
        if (!v65)
        {
          atomic_store(1u, v62 + 2);
          (*(void (**)(unsigned int *))(*(_QWORD *)v62 + 8))(v62);
        }
      }
      v20 = (char *)&xmmword_1ECE84588 + 88 * qword_1ECE846E8 - 72;
      v2 = v68;
      goto LABEL_101;
    }
  }
LABEL_54:
  v33 = qword_1ECE846E8 - 1;
  if (v22 >= qword_1ECE846E8 - 1)
    goto LABEL_100;
  v75 = *(WTF **)v25;
  v34 = *((_DWORD *)v25 + 2);
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = 0;
  v76 = __PAIR64__(v4, v34);
  LOBYTE(v77[0]) = 0;
  v78 = -1;
  v35 = *(unsigned int *)&_MergedGlobals_254[88 * v22 + 768];
  if ((_DWORD)v35 != -1)
  {
    ((void (*)(unsigned int **, _QWORD *, char *))off_1E34416F8[v35])(&v72, v77, &_MergedGlobals_254[88 * v22 + 712]);
    v78 = v35;
  }
  do
  {
    WTF::VectorBuffer<WTF::Function<void ()(void)>,0ul,WTF::FastMalloc>::adopt((uint64_t)v21, v21 + 22);
    v36 = v21 + 6;
    v37 = v21[20];
    v38 = v21[42];
    if ((_DWORD)v37 == -1)
    {
      if ((_DWORD)v38 == -1)
        goto LABEL_62;
    }
    else if ((_DWORD)v38 == -1)
    {
      ((void (*)(unsigned int **, void *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_10[v37])(&v72, v36);
      v21[20] = -1;
      goto LABEL_62;
    }
    v72 = v21 + 6;
    ((void (*)(unsigned int **))off_1E3441710[v38])(&v72);
LABEL_62:
    ++v22;
    v39 = qword_1ECE846E8 - 1;
    v21 += 22;
  }
  while (v22 < qword_1ECE846E8 - 1);
  v40 = &_MergedGlobals_254[88 * v39];
  v41 = (WTF **)(v40 + 688);
  v42 = (WTF *)*((_QWORD *)v40 + 86);
  if (v42)
  {
    *v41 = 0;
    *((_DWORD *)v40 + 174) = 0;
    WTF::fastFree(v42, v36);
  }
  *v41 = v75;
  v43 = v76;
  v75 = 0;
  v76 = 0;
  v41[1] = (WTF *)v43;
  v44 = &_MergedGlobals_254[88 * v39];
  a2 = (const WebCore::FloatRect *)(v44 + 712);
  v45 = *((unsigned int *)v44 + 192);
  if ((_DWORD)v45 == -1)
  {
    if (v78 == -1)
      goto LABEL_97;
LABEL_94:
    v72 = (unsigned int *)(v44 + 712);
    ((void (*)(unsigned int **))off_1E3441710[v78])(&v72);
    goto LABEL_95;
  }
  if (v78 != -1)
    goto LABEL_94;
  v46 = v44 + 768;
  ((void (*)(unsigned int **, const WebCore::FloatRect *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_10[v45])(&v72, a2);
  *v46 = -1;
LABEL_95:
  if (v78 != -1)
    ((void (*)(unsigned int **, _QWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_10[v78])(&v72, v77);
LABEL_97:
  v78 = -1;
  v66 = v75;
  if (v75)
  {
    v75 = 0;
    LODWORD(v76) = 0;
    WTF::fastFree(v66, a2);
  }
  v33 = qword_1ECE846E8 - 1;
LABEL_100:
  v20 = &_MergedGlobals_254[88 * v33 + 704];
LABEL_101:
  if (v2)
  {
    v68 = 0;
    v69 = 0;
    WTF::fastFree((WTF *)v2, a2);
  }
  return v20;
}

uint64_t WebCore::BasicShapePolygon::canBlend(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2)
    || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
  {
    return 0;
  }
  else
  {
    return (*(_BYTE *)(a1 + 12) == 0) ^ (*(_BYTE *)(a2 + 12) != 0);
  }
}

unint64_t WebCore::BasicShapePolygon::blend@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  unint64_t v8;
  unint64_t result;
  __n128 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __n128 v14;
  unint64_t v15;
  unsigned int v16;
  char v17;
  unsigned int v18;
  char v19;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2))
  {
    __break(0xC471u);
    goto LABEL_24;
  }
  v8 = *(unsigned int *)(a1 + 28);
  result = WTF::fastMalloc((WTF *)0x20);
  v11 = result;
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3441838;
  *(_BYTE *)(result + 12) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  if ((_DWORD)v8)
  {
    v12 = 0;
    v13 = 0;
    *(_BYTE *)(result + 12) = *(_BYTE *)(a2 + 12);
    while (1)
    {
      if (v13 >= *(unsigned int *)(a2 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x1964C74B4);
      }
      if (v13 >= *(unsigned int *)(a1 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x1964C74BCLL);
      }
      WebCore::blend((unsigned __int8 *)(*(_QWORD *)(a2 + 16) + v12), (unsigned __int8 *)(*(_QWORD *)(a1 + 16) + v12), a3, (uint64_t)&v18, v10);
      v15 = v13 + 1;
      if (v15 >= *(unsigned int *)(a2 + 28))
      {
        __break(0xC471u);
        JUMPOUT(0x1964C74C4);
      }
      if (v15 >= *(unsigned int *)(a1 + 28))
        break;
      WebCore::blend((unsigned __int8 *)(*(_QWORD *)(a2 + 16) + v12 + 8), (unsigned __int8 *)(*(_QWORD *)(a1 + 16) + v12 + 8), a3, (uint64_t)&v16, v14);
      result = WebCore::BasicShapePolygon::appendPoint(v11, (unint64_t)&v18, (unint64_t)&v16);
      if (v17 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v16);
      }
      if (v19 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        result = (unint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v18);
      }
      v12 += 16;
      v13 = v15 + 1;
      if (v13 >= v8)
        goto LABEL_18;
    }
    __break(0xC471u);
LABEL_24:
    JUMPOUT(0x1964C74ACLL);
  }
LABEL_18:
  *a4 = v11;
  return result;
}

uint64_t WebCore::BasicShapePolygon::dump(WebCore::BasicShapePolygon *this, WTF::TextStream *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  char v7;
  int v8;
  int v9;
  char *v10;
  uint64_t v11;
  void *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned __int8 v16;
  char v17;
  char v18;

  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::endGroup(a2);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v4 = WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  v5 = *((unsigned int *)this + 7);
  if (!(_DWORD)v5)
    goto LABEL_21;
  v6 = (unsigned int *)*((_QWORD *)this + 2);
  v7 = *((_BYTE *)v6 + 5);
  v8 = *((unsigned __int8 *)v6 + 4);
  v15 = 0;
  v18 = 0;
  v16 = v8;
  v17 = v7;
  if ((v8 - 2) >= 9)
  {
    if (v8 == 11)
    {
      v13 = (void *)*v6;
      v15 = *v6;
      WebCore::Length::ref((int *)&v15);
      WebCore::operator<<(v4, (WebCore::Length *)&v15);
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v13);
      goto LABEL_6;
    }
  }
  else
  {
    v18 = *((_BYTE *)v6 + 6);
    v15 = *v6;
  }
  WebCore::operator<<(v4, (WebCore::Length *)&v15);
LABEL_6:
  v9 = 1;
  if ((_DWORD)v5 == 1 || *(_DWORD *)(v4 + 32) == 1)
    goto LABEL_19;
  v10 = (char *)v6 + 14;
  v11 = 8 * v5 - 8;
  v9 = 2;
  do
  {
    WTF::TextStream::operator<<();
    v15 = 0;
    v18 = 0;
    v16 = *(v10 - 2);
    v17 = *(v10 - 1);
    if (v16 - 2 < 9)
    {
      v18 = *v10;
      v15 = *(_DWORD *)(v10 - 6);
LABEL_12:
      WebCore::operator<<(v4, (WebCore::Length *)&v15);
      goto LABEL_13;
    }
    if (v16 != 11)
      goto LABEL_12;
    v14 = *(_DWORD *)(v10 - 6);
    v15 = v14;
    WebCore::Length::ref((int *)&v15);
    WebCore::operator<<(v4, (WebCore::Length *)&v15);
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v14);
LABEL_13:
    if (v9 == *(_DWORD *)(v4 + 32))
      goto LABEL_19;
    ++v9;
    v10 += 8;
    v11 -= 8;
  }
  while (v11);
  v9 = v5;
LABEL_19:
  if (*((_DWORD *)this + 7) != v9)
    WTF::TextStream::operator<<();
LABEL_21:
  WTF::TextStream::operator<<();
  return WTF::TextStream::endGroup(a2);
}

uint64_t WebCore::BasicShapePath::create@<X0>(uint64_t *a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>, float a4@<S0>)
{
  uint64_t result;
  uint64_t v9;

  result = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(result + 8) = 1;
  *(_QWORD *)result = off_1E3441650;
  v9 = *a1;
  *a1 = 0;
  *(_QWORD *)(result + 16) = v9;
  *(float *)(result + 24) = a4;
  *(_BYTE *)(result + 28) = a2;
  *a3 = result;
  return result;
}

float WebCore::BasicShapePath::clone@<S0>(WebCore::BasicShapePath *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  float result;
  char v9;

  v4 = *((_QWORD *)this + 2);
  if (v4)
  {
    v5 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    v6 = *(_DWORD **)(v4 + 8);
    ++*v6;
    *v5 = 0;
    v5[1] = v6;
  }
  else
  {
    v5 = 0;
  }
  v7 = WTF::fastMalloc((WTF *)0x20);
  result = *((float *)this + 6);
  v9 = *((_BYTE *)this + 28);
  *(_DWORD *)(v7 + 8) = 1;
  *(_QWORD *)v7 = off_1E3441650;
  *(_QWORD *)(v7 + 16) = v5;
  *(float *)(v7 + 24) = result;
  *(_BYTE *)(v7 + 28) = v9;
  *a2 = v7;
  return result;
}

_BYTE *WebCore::BasicShapePath::path(WebCore::BasicShapePath *this, const WebCore::FloatRect *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  WTF *v5;
  void *v6;
  _BYTE *v7;
  WTF *v8;
  WTF *v9;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  WTF *v14;
  int v15;
  uint64_t v16;
  char v17;

  v2 = *((_QWORD *)this + 2);
  v3 = *((_DWORD *)this + 6);
  v4 = *(_QWORD *)a2;
  {
    qword_1EE2F9570 = 0;
    xmmword_1EE2F9550 = 0u;
    unk_1EE2F9560 = 0u;
    xmmword_1EE2F9530 = 0u;
    unk_1EE2F9540 = 0u;
    xmmword_1EE2F9510 = 0u;
    unk_1EE2F9520 = 0u;
    xmmword_1EE2F94F0 = 0u;
    unk_1EE2F9500 = 0u;
    xmmword_1EE2F94D0 = 0u;
    unk_1EE2F94E0 = 0u;
    xmmword_1EE2F94B0 = 0u;
    unk_1EE2F94C0 = 0u;
    xmmword_1EE2F9490 = 0u;
    unk_1EE2F94A0 = 0u;
    xmmword_1EE2F9470 = 0u;
    unk_1EE2F9480 = 0u;
    xmmword_1EE2F9450 = 0u;
    unk_1EE2F9460 = 0u;
    xmmword_1EE2F9430 = 0u;
    unk_1EE2F9440 = 0u;
    xmmword_1EE2F9410 = 0u;
    unk_1EE2F9420 = 0u;
    xmmword_1EE2F93F0 = 0u;
    unk_1EE2F9400 = 0u;
    WebCore::cachedTransformedByteStreamPath(WebCore::SVGPathByteStream const&,float,WebCore::FloatPoint const&)::cache = 0u;
    unk_1EE2F93E0 = 0u;
  }
  v13 = 0;
  v5 = *(WTF **)(v2 + 8);
  ++*(_DWORD *)v5;
  v14 = v5;
  v15 = v3;
  v16 = v4;
  v7 = WTF::TinyLRUCache<WebCore::SVGPathTransformedByteStream,WebCore::Path,4ul,WebCore::TransformedByteStreamPathPolicy>::get((uint64_t)&WebCore::cachedTransformedByteStreamPath(WebCore::SVGPathByteStream const&,float,WebCore::FloatPoint const&)::cache, (uint64_t)&v13);
  v8 = v14;
  v14 = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      v11 = *((unsigned int *)v8 + 22);
      if ((_DWORD)v11 != -1)
        ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_10[v11])(&v17, (char *)v8 + 32);
      *((_DWORD *)v8 + 22) = -1;
      v12 = (WTF *)*((_QWORD *)v8 + 1);
      if (v12)
      {
        *((_QWORD *)v8 + 1) = 0;
        *((_DWORD *)v8 + 4) = 0;
        WTF::fastFree(v12, v6);
      }
      WTF::fastFree(v8, v6);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  v9 = v13;
  if (v13)
  {
    *((_QWORD *)v13 + 1) = 0;
    v13 = 0;
    if (*(_DWORD *)v9 == 1)
      WTF::fastFree(v9, v6);
    else
      --*(_DWORD *)v9;
  }
  return v7;
}

BOOL WebCore::BasicShapePath::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) != 1
    || *(float *)(a1 + 24) != *(float *)(a2 + 24)
    || (*(_BYTE *)(a1 + 28) == 0) == (*(_BYTE *)(a2 + 28) != 0))
  {
    return 0;
  }
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 8);
  if (v4 != v5)
  {
    v6 = *(unsigned int *)(v4 + 20);
    if ((_DWORD)v6 == *(_DWORD *)(v5 + 20))
      return memcmp(*(const void **)(v4 + 8), *(const void **)(v5 + 8), v6) == 0;
    return 0;
  }
  return 1;
}

uint64_t WebCore::BasicShapePath::type(WebCore::BasicShapePath *this)
{
  return 1;
}

uint64_t WebCore::BasicShapePath::canBlend(WebCore **this, const WebCore::SVGPathByteStream **a2)
{
  const WebCore::SVGPathByteStream *v4;

  if ((*((unsigned int (**)(const WebCore::SVGPathByteStream **))*a2 + 3))(a2) == 1
    && (*((_BYTE *)this + 28) != 0) == (*((_BYTE *)a2 + 28) != 0))
  {
    return WebCore::canBlendSVGPathByteStreams(this[2], a2[2], v4);
  }
  else
  {
    return 0;
  }
}

uint64_t WebCore::BasicShapePath::windRule(WebCore::BasicShapePath *this)
{
  return *((unsigned __int8 *)this + 28);
}

float WebCore::BasicShapePath::blend@<S0>(uint64_t a1@<X0>, WebCore **a2@<X1>, double *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  WebCore::SVGPathByteStream *v9;
  uint64_t v10;
  int v11;
  float v12;
  uint64_t v13;
  float result;

  if ((*((unsigned int (**)(WebCore **))*a2 + 3))(a2) != 1)
  {
    __break(0xC471u);
    JUMPOUT(0x1964C7BF4);
  }
  v8 = WTF::fastMalloc((WTF *)0x10);
  v10 = v8;
  *(_QWORD *)v8 = 0;
  {
    v11 = WebCore::SVGPathByteStream::Data::empty(void)::singleton + 1;
  }
  else
  {
    xmmword_1EE2DFB60 = 0u;
    unk_1EE2DFB70 = 0u;
    xmmword_1EE2DFB40 = 0u;
    unk_1EE2DFB50 = 0u;
    WebCore::SVGPathByteStream::Data::empty(void)::singleton = 0u;
    *(_OWORD *)&dword_1EE2DFB30 = 0u;
    v11 = 2;
  }
  LODWORD(WebCore::SVGPathByteStream::Data::empty(void)::singleton) = v11;
  *(_QWORD *)(v8 + 8) = &WebCore::SVGPathByteStream::Data::empty(void)::singleton;
  v12 = *a3;
  WebCore::buildAnimatedSVGPathByteStream(a2[2], *(const WebCore::SVGPathByteStream **)(a1 + 16), (WTF **)v8, v9, v12);
  v13 = WTF::fastMalloc((WTF *)0x20);
  *(_DWORD *)(v13 + 8) = 1;
  *(_QWORD *)v13 = off_1E3441650;
  *(_QWORD *)(v13 + 16) = v10;
  *(_DWORD *)(v13 + 24) = 1065353216;
  *(_BYTE *)(v13 + 28) = 0;
  *(_BYTE *)(v13 + 28) = *(_BYTE *)(a1 + 28);
  result = *(float *)(a1 + 24);
  *(float *)(v13 + 24) = result;
  *a4 = v13;
  return result;
}

uint64_t WebCore::BasicShapePath::dump(WebCore::BasicShapePath *this, WTF::TextStream *a2)
{
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  WTF::TextStream::operator<<();
  return WTF::TextStream::endGroup(a2);
}

uint64_t WebCore::BasicShapeInset::create@<X0>(int *a1@<X0>, int *a2@<X1>, int *a3@<X2>, int *a4@<X3>, int *a5@<X4>, int *a6@<X5>, int *a7@<X6>, int *a8@<X7>, uint64_t *a9@<X8>)
{
  uint64_t v18;
  uint64_t result;

  v18 = WTF::fastMalloc((WTF *)0x70);
  result = WebCore::BasicShapeInset::BasicShapeInset(v18, a1, a2, a3, a4, a5, a6, a7, a8);
  *a9 = result;
  return result;
}

uint64_t WebCore::BasicShapeInset::BasicShapeInset(uint64_t result, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7, int *a8, int *a9)
{
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;

  *(_QWORD *)result = off_1E3441898;
  *(_QWORD *)(result + 8) = 1;
  *(_WORD *)(result + 17) = 0;
  v9 = *((unsigned __int8 *)a2 + 4);
  *(_BYTE *)(result + 16) = v9;
  *(_BYTE *)(result + 17) = *((_BYTE *)a2 + 5);
  if (v9 - 2 < 9)
  {
    v10 = *((unsigned __int8 *)a2 + 6);
    *(_BYTE *)(result + 18) = v10;
    if (v10)
    {
      *(_DWORD *)(result + 12) = *a2;
      goto LABEL_4;
    }
    v33 = *a2;
    goto LABEL_39;
  }
  if (v9 <= 0xD)
  {
    if (((1 << v9) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 12) = 0;
    }
    else if (v9 == 11)
    {
      v33 = *a2;
      *a2 = 0;
LABEL_39:
      *(_DWORD *)(result + 12) = v33;
    }
  }
LABEL_4:
  *((_BYTE *)a2 + 4) = 0;
  *(_DWORD *)(result + 20) = 0;
  *(_WORD *)(result + 25) = 0;
  v11 = *((unsigned __int8 *)a3 + 4);
  *(_BYTE *)(result + 24) = v11;
  *(_BYTE *)(result + 25) = *((_BYTE *)a3 + 5);
  if (v11 - 2 < 9)
  {
    v12 = *((unsigned __int8 *)a3 + 6);
    *(_BYTE *)(result + 26) = v12;
    if (v12)
    {
      *(_DWORD *)(result + 20) = *a3;
      goto LABEL_7;
    }
    v34 = *a3;
    goto LABEL_41;
  }
  if (v11 <= 0xD)
  {
    if (((1 << v11) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 20) = 0;
    }
    else if (v11 == 11)
    {
      v34 = *a3;
      *a3 = 0;
LABEL_41:
      *(_DWORD *)(result + 20) = v34;
    }
  }
LABEL_7:
  *((_BYTE *)a3 + 4) = 0;
  *(_DWORD *)(result + 28) = 0;
  *(_WORD *)(result + 33) = 0;
  v13 = *((unsigned __int8 *)a4 + 4);
  *(_BYTE *)(result + 32) = v13;
  *(_BYTE *)(result + 33) = *((_BYTE *)a4 + 5);
  if (v13 - 2 < 9)
  {
    v14 = *((unsigned __int8 *)a4 + 6);
    *(_BYTE *)(result + 34) = v14;
    if (v14)
    {
      *(_DWORD *)(result + 28) = *a4;
      goto LABEL_10;
    }
    v35 = *a4;
    goto LABEL_43;
  }
  if (v13 <= 0xD)
  {
    if (((1 << v13) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 28) = 0;
    }
    else if (v13 == 11)
    {
      v35 = *a4;
      *a4 = 0;
LABEL_43:
      *(_DWORD *)(result + 28) = v35;
    }
  }
LABEL_10:
  *((_BYTE *)a4 + 4) = 0;
  *(_DWORD *)(result + 36) = 0;
  *(_WORD *)(result + 41) = 0;
  v15 = *((unsigned __int8 *)a5 + 4);
  *(_BYTE *)(result + 40) = v15;
  *(_BYTE *)(result + 41) = *((_BYTE *)a5 + 5);
  if (v15 - 2 < 9)
  {
    v16 = *((unsigned __int8 *)a5 + 6);
    *(_BYTE *)(result + 42) = v16;
    if (v16)
    {
      *(_DWORD *)(result + 36) = *a5;
      goto LABEL_13;
    }
    v36 = *a5;
    goto LABEL_45;
  }
  if (v15 <= 0xD)
  {
    if (((1 << v15) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 36) = 0;
    }
    else if (v15 == 11)
    {
      v36 = *a5;
      *a5 = 0;
LABEL_45:
      *(_DWORD *)(result + 36) = v36;
    }
  }
LABEL_13:
  *((_BYTE *)a5 + 4) = 0;
  *(_DWORD *)(result + 44) = 0;
  *(_WORD *)(result + 49) = 0;
  v17 = *((unsigned __int8 *)a6 + 4);
  *(_BYTE *)(result + 48) = v17;
  *(_BYTE *)(result + 49) = *((_BYTE *)a6 + 5);
  if (v17 - 2 < 9)
  {
    v18 = *((unsigned __int8 *)a6 + 6);
    *(_BYTE *)(result + 50) = v18;
    if (v18)
    {
      *(_DWORD *)(result + 44) = *a6;
      goto LABEL_16;
    }
    v37 = *a6;
    goto LABEL_47;
  }
  if (v17 <= 0xD)
  {
    if (((1 << v17) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 44) = 0;
    }
    else if (v17 == 11)
    {
      v37 = *a6;
      *a6 = 0;
LABEL_47:
      *(_DWORD *)(result + 44) = v37;
    }
  }
LABEL_16:
  *((_BYTE *)a6 + 4) = 0;
  *(_DWORD *)(result + 52) = 0;
  *(_WORD *)(result + 57) = 0;
  v19 = *((unsigned __int8 *)a6 + 12);
  *(_BYTE *)(result + 56) = v19;
  *(_BYTE *)(result + 57) = *((_BYTE *)a6 + 13);
  if (v19 - 2 < 9)
  {
    v20 = *((unsigned __int8 *)a6 + 14);
    *(_BYTE *)(result + 58) = v20;
    if (v20)
    {
      *(_DWORD *)(result + 52) = a6[2];
      goto LABEL_19;
    }
    v38 = a6[2];
    goto LABEL_49;
  }
  if (v19 <= 0xD)
  {
    if (((1 << v19) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 52) = 0;
    }
    else if (v19 == 11)
    {
      v38 = a6[2];
      a6[2] = 0;
LABEL_49:
      *(_DWORD *)(result + 52) = v38;
    }
  }
LABEL_19:
  *((_BYTE *)a6 + 12) = 0;
  *(_DWORD *)(result + 60) = 0;
  *(_WORD *)(result + 65) = 0;
  v21 = *((unsigned __int8 *)a7 + 4);
  *(_BYTE *)(result + 64) = v21;
  *(_BYTE *)(result + 65) = *((_BYTE *)a7 + 5);
  if (v21 - 2 < 9)
  {
    v22 = *((unsigned __int8 *)a7 + 6);
    *(_BYTE *)(result + 66) = v22;
    if (v22)
    {
      *(_DWORD *)(result + 60) = *a7;
      goto LABEL_22;
    }
    v39 = *a7;
    goto LABEL_51;
  }
  if (v21 <= 0xD)
  {
    if (((1 << v21) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 60) = 0;
    }
    else if (v21 == 11)
    {
      v39 = *a7;
      *a7 = 0;
LABEL_51:
      *(_DWORD *)(result + 60) = v39;
    }
  }
LABEL_22:
  *((_BYTE *)a7 + 4) = 0;
  *(_DWORD *)(result + 68) = 0;
  *(_WORD *)(result + 73) = 0;
  v23 = *((unsigned __int8 *)a7 + 12);
  *(_BYTE *)(result + 72) = v23;
  *(_BYTE *)(result + 73) = *((_BYTE *)a7 + 13);
  if (v23 - 2 < 9)
  {
    v24 = *((unsigned __int8 *)a7 + 14);
    *(_BYTE *)(result + 74) = v24;
    if (v24)
    {
      *(_DWORD *)(result + 68) = a7[2];
      goto LABEL_25;
    }
    v40 = a7[2];
    goto LABEL_53;
  }
  if (v23 <= 0xD)
  {
    if (((1 << v23) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 68) = 0;
    }
    else if (v23 == 11)
    {
      v40 = a7[2];
      a7[2] = 0;
LABEL_53:
      *(_DWORD *)(result + 68) = v40;
    }
  }
LABEL_25:
  *((_BYTE *)a7 + 12) = 0;
  *(_DWORD *)(result + 76) = 0;
  *(_WORD *)(result + 81) = 0;
  v25 = *((unsigned __int8 *)a8 + 4);
  *(_BYTE *)(result + 80) = v25;
  *(_BYTE *)(result + 81) = *((_BYTE *)a8 + 5);
  if (v25 - 2 < 9)
  {
    v26 = *((unsigned __int8 *)a8 + 6);
    *(_BYTE *)(result + 82) = v26;
    if (v26)
    {
      *(_DWORD *)(result + 76) = *a8;
      goto LABEL_28;
    }
    v41 = *a8;
    goto LABEL_55;
  }
  if (v25 <= 0xD)
  {
    if (((1 << v25) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 76) = 0;
    }
    else if (v25 == 11)
    {
      v41 = *a8;
      *a8 = 0;
LABEL_55:
      *(_DWORD *)(result + 76) = v41;
    }
  }
LABEL_28:
  *((_BYTE *)a8 + 4) = 0;
  *(_DWORD *)(result + 84) = 0;
  *(_WORD *)(result + 89) = 0;
  v27 = *((unsigned __int8 *)a8 + 12);
  *(_BYTE *)(result + 88) = v27;
  *(_BYTE *)(result + 89) = *((_BYTE *)a8 + 13);
  if (v27 - 2 < 9)
  {
    v28 = *((unsigned __int8 *)a8 + 14);
    *(_BYTE *)(result + 90) = v28;
    if (v28)
    {
      *(_DWORD *)(result + 84) = a8[2];
      goto LABEL_31;
    }
    v42 = a8[2];
    goto LABEL_57;
  }
  if (v27 <= 0xD)
  {
    if (((1 << v27) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 84) = 0;
    }
    else if (v27 == 11)
    {
      v42 = a8[2];
      a8[2] = 0;
LABEL_57:
      *(_DWORD *)(result + 84) = v42;
    }
  }
LABEL_31:
  *((_BYTE *)a8 + 12) = 0;
  *(_DWORD *)(result + 92) = 0;
  *(_WORD *)(result + 97) = 0;
  v29 = *((unsigned __int8 *)a9 + 4);
  *(_BYTE *)(result + 96) = v29;
  *(_BYTE *)(result + 97) = *((_BYTE *)a9 + 5);
  if (v29 - 2 < 9)
  {
    v30 = *((unsigned __int8 *)a9 + 6);
    *(_BYTE *)(result + 98) = v30;
    if (v30)
    {
      *(_DWORD *)(result + 92) = *a9;
      goto LABEL_34;
    }
    v43 = *a9;
    goto LABEL_59;
  }
  if (v29 <= 0xD)
  {
    if (((1 << v29) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 92) = 0;
    }
    else if (v29 == 11)
    {
      v43 = *a9;
      *a9 = 0;
LABEL_59:
      *(_DWORD *)(result + 92) = v43;
    }
  }
LABEL_34:
  *((_BYTE *)a9 + 4) = 0;
  *(_DWORD *)(result + 100) = 0;
  *(_WORD *)(result + 105) = 0;
  v31 = *((unsigned __int8 *)a9 + 12);
  *(_BYTE *)(result + 104) = v31;
  *(_BYTE *)(result + 105) = *((_BYTE *)a9 + 13);
  if (v31 - 2 >= 9)
  {
    if (v31 > 0xD)
      goto LABEL_37;
    if (((1 << v31) & 0x3003) != 0)
    {
      *(_DWORD *)(result + 100) = 0;
      goto LABEL_37;
    }
    if (v31 != 11)
      goto LABEL_37;
    v44 = a9[2];
    a9[2] = 0;
    goto LABEL_61;
  }
  v32 = *((unsigned __int8 *)a9 + 14);
  *(_BYTE *)(result + 106) = v32;
  if (!v32)
  {
    v44 = a9[2];
LABEL_61:
    *(_DWORD *)(result + 100) = v44;
    goto LABEL_37;
  }
  *(_DWORD *)(result + 100) = a9[2];
LABEL_37:
  *((_BYTE *)a9 + 12) = 0;
  return result;
}

int *WebCore::BasicShapeInset::clone@<X0>(WebCore::BasicShapeInset *this@<X0>, int **a2@<X8>)
{
  uint64_t v4;
  int *result;
  unsigned int v6;
  unsigned __int8 v7;
  char v8;
  char v9;
  unsigned int v10;
  unsigned __int8 v11;
  char v12;
  char v13;
  unsigned int v14;
  unsigned __int8 v15;
  char v16;
  char v17;
  unsigned int v18;
  unsigned __int8 v19;
  char v20;
  char v21;
  unsigned int v22;
  unsigned __int8 v23;
  char v24;
  char v25;
  unsigned int v26;
  unsigned __int8 v27;
  char v28;
  char v29;
  unsigned int v30;
  unsigned __int8 v31;
  char v32;
  char v33;
  unsigned int v34;
  unsigned __int8 v35;
  char v36;
  char v37;
  unsigned int v38;
  unsigned __int8 v39;
  char v40;
  char v41;
  unsigned int v42;
  unsigned __int8 v43;
  char v44;
  char v45;
  unsigned int v46;
  unsigned __int8 v47;
  char v48;
  char v49;
  unsigned int v50;
  unsigned __int8 v51;
  char v52;
  char v53;

  v50 = 0;
  v53 = 0;
  v51 = *((_BYTE *)this + 16);
  v52 = *((_BYTE *)this + 17);
  if (v51 - 2 >= 9)
  {
    if (v51 == 11)
    {
      v50 = *((_DWORD *)this + 3);
      WebCore::Length::ref((int *)&v50);
    }
  }
  else
  {
    v53 = *((_BYTE *)this + 18);
    v50 = *((_DWORD *)this + 3);
  }
  v46 = 0;
  v49 = 0;
  v47 = *((_BYTE *)this + 24);
  v48 = *((_BYTE *)this + 25);
  if (v47 - 2 >= 9)
  {
    if (v47 == 11)
    {
      v46 = *((_DWORD *)this + 5);
      WebCore::Length::ref((int *)&v46);
    }
  }
  else
  {
    v49 = *((_BYTE *)this + 26);
    v46 = *((_DWORD *)this + 5);
  }
  v42 = 0;
  v45 = 0;
  v43 = *((_BYTE *)this + 32);
  v44 = *((_BYTE *)this + 33);
  if (v43 - 2 >= 9)
  {
    if (v43 == 11)
    {
      v42 = *((_DWORD *)this + 7);
      WebCore::Length::ref((int *)&v42);
    }
  }
  else
  {
    v45 = *((_BYTE *)this + 34);
    v42 = *((_DWORD *)this + 7);
  }
  v38 = 0;
  v41 = 0;
  v39 = *((_BYTE *)this + 40);
  v40 = *((_BYTE *)this + 41);
  if (v39 - 2 >= 9)
  {
    if (v39 == 11)
    {
      v38 = *((_DWORD *)this + 9);
      WebCore::Length::ref((int *)&v38);
    }
  }
  else
  {
    v41 = *((_BYTE *)this + 42);
    v38 = *((_DWORD *)this + 9);
  }
  v30 = 0;
  v33 = 0;
  v31 = *((_BYTE *)this + 48);
  v32 = *((_BYTE *)this + 49);
  if (v31 - 2 >= 9)
  {
    if (v31 == 11)
    {
      v30 = *((_DWORD *)this + 11);
      WebCore::Length::ref((int *)&v30);
    }
  }
  else
  {
    v33 = *((_BYTE *)this + 50);
    v30 = *((_DWORD *)this + 11);
  }
  v34 = 0;
  v37 = 0;
  v35 = *((_BYTE *)this + 56);
  v36 = *((_BYTE *)this + 57);
  if (v35 - 2 >= 9)
  {
    if (v35 == 11)
    {
      v34 = *((_DWORD *)this + 13);
      WebCore::Length::ref((int *)&v34);
    }
  }
  else
  {
    v37 = *((_BYTE *)this + 58);
    v34 = *((_DWORD *)this + 13);
  }
  v22 = 0;
  v25 = 0;
  v23 = *((_BYTE *)this + 64);
  v24 = *((_BYTE *)this + 65);
  if (v23 - 2 >= 9)
  {
    if (v23 == 11)
    {
      v22 = *((_DWORD *)this + 15);
      WebCore::Length::ref((int *)&v22);
    }
  }
  else
  {
    v25 = *((_BYTE *)this + 66);
    v22 = *((_DWORD *)this + 15);
  }
  v26 = 0;
  v29 = 0;
  v27 = *((_BYTE *)this + 72);
  v28 = *((_BYTE *)this + 73);
  if (v27 - 2 >= 9)
  {
    if (v27 == 11)
    {
      v26 = *((_DWORD *)this + 17);
      WebCore::Length::ref((int *)&v26);
    }
  }
  else
  {
    v29 = *((_BYTE *)this + 74);
    v26 = *((_DWORD *)this + 17);
  }
  v14 = 0;
  v17 = 0;
  v15 = *((_BYTE *)this + 80);
  v16 = *((_BYTE *)this + 81);
  if (v15 - 2 >= 9)
  {
    if (v15 == 11)
    {
      v14 = *((_DWORD *)this + 19);
      WebCore::Length::ref((int *)&v14);
    }
  }
  else
  {
    v17 = *((_BYTE *)this + 82);
    v14 = *((_DWORD *)this + 19);
  }
  v18 = 0;
  v21 = 0;
  v19 = *((_BYTE *)this + 88);
  v20 = *((_BYTE *)this + 89);
  if (v19 - 2 >= 9)
  {
    if (v19 == 11)
    {
      v18 = *((_DWORD *)this + 21);
      WebCore::Length::ref((int *)&v18);
    }
  }
  else
  {
    v21 = *((_BYTE *)this + 90);
    v18 = *((_DWORD *)this + 21);
  }
  v6 = 0;
  v9 = 0;
  v7 = *((_BYTE *)this + 96);
  v8 = *((_BYTE *)this + 97);
  if (v7 - 2 >= 9)
  {
    if (v7 == 11)
    {
      v6 = *((_DWORD *)this + 23);
      WebCore::Length::ref((int *)&v6);
    }
  }
  else
  {
    v9 = *((_BYTE *)this + 98);
    v6 = *((_DWORD *)this + 23);
  }
  v10 = 0;
  v13 = 0;
  v11 = *((_BYTE *)this + 104);
  v12 = *((_BYTE *)this + 105);
  if (v11 - 2 >= 9)
  {
    if (v11 == 11)
    {
      v10 = *((_DWORD *)this + 25);
      WebCore::Length::ref((int *)&v10);
    }
  }
  else
  {
    v13 = *((_BYTE *)this + 106);
    v10 = *((_DWORD *)this + 25);
  }
  v4 = WTF::fastMalloc((WTF *)0x70);
  result = (int *)WebCore::BasicShapeInset::BasicShapeInset(v4, (int *)&v50, (int *)&v46, (int *)&v42, (int *)&v38, (int *)&v30, (int *)&v22, (int *)&v14, (int *)&v6);
  *a2 = result;
  if (v11 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v10);
  }
  if (v7 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v6);
  }
  if (v19 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v18);
  }
  if (v15 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v14);
  }
  if (v27 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v26);
  }
  if (v23 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v22);
  }
  if (v35 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v34);
  }
  if (v31 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v30);
  }
  if (v39 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v38);
  }
  if (v43 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v42);
  }
  if (v47 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v46);
  }
  if (v51 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    return WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v50);
  }
  return result;
}

uint64_t WebCore::BasicShapeInset::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v4;
  WebCore::Length *v5;
  float v6;
  float v7;
  int v8;
  WebCore::Length *v9;
  float v10;
  float v11;
  int v12;
  WebCore::Length *v13;
  float v14;
  float v15;
  int v16;
  WebCore::Length *v17;
  float v18;
  float v19;
  int v20;
  WebCore::Length *v21;
  float v22;
  float v23;
  int v24;
  WebCore::Length *v25;
  float v26;
  float v27;
  int v28;
  WebCore::Length *v29;
  float v30;
  float v31;
  int v32;
  WebCore::Length *v33;
  float v34;
  float v35;
  int v36;
  WebCore::Length *v37;
  float v38;
  float v39;
  int v40;
  WebCore::Length *v41;
  float v42;
  float v43;
  int v44;
  WebCore::Length *v45;
  float v46;
  float v47;
  int v48;
  WebCore::Length *v49;
  float v50;
  float v51;

  if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)a2 + 24))(a2) != 4)
    return 0;
  v4 = a1[16];
  if (v4 != a2[16] || (a1[17] != 0) != (a2[17] != 0))
    return 0;
  if (v4 != 13)
  {
    v5 = (WebCore::Length *)(a1 + 12);
    if (v4 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v5, (const WebCore::Length *)(a2 + 12)) & 1) == 0)
        return 0;
    }
    else
    {
      if (a1[18])
        v6 = *(float *)v5;
      else
        v6 = (float)*(int *)v5;
      v7 = *((float *)a2 + 3);
      if (!a2[18])
        v7 = (float)SLODWORD(v7);
      if (v6 != v7)
        return 0;
    }
  }
  v8 = a1[24];
  if (v8 != a2[24] || (a1[25] != 0) != (a2[25] != 0))
    return 0;
  if (v8 != 13)
  {
    v9 = (WebCore::Length *)(a1 + 20);
    if (v8 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v9, (const WebCore::Length *)(a2 + 20)) & 1) == 0)
        return 0;
    }
    else
    {
      if (a1[26])
        v10 = *(float *)v9;
      else
        v10 = (float)*(int *)v9;
      v11 = *((float *)a2 + 5);
      if (!a2[26])
        v11 = (float)SLODWORD(v11);
      if (v10 != v11)
        return 0;
    }
  }
  v12 = a1[32];
  if (v12 != a2[32] || (a1[33] != 0) != (a2[33] != 0))
    return 0;
  if (v12 != 13)
  {
    v13 = (WebCore::Length *)(a1 + 28);
    if (v12 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v13, (const WebCore::Length *)(a2 + 28)) & 1) == 0)
        return 0;
    }
    else
    {
      if (a1[34])
        v14 = *(float *)v13;
      else
        v14 = (float)*(int *)v13;
      v15 = *((float *)a2 + 7);
      if (!a2[34])
        v15 = (float)SLODWORD(v15);
      if (v14 != v15)
        return 0;
    }
  }
  v16 = a1[40];
  if (v16 != a2[40] || (a1[41] != 0) != (a2[41] != 0))
    return 0;
  if (v16 != 13)
  {
    v17 = (WebCore::Length *)(a1 + 36);
    if (v16 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v17, (const WebCore::Length *)(a2 + 36)) & 1) == 0)
        return 0;
    }
    else
    {
      if (a1[42])
        v18 = *(float *)v17;
      else
        v18 = (float)*(int *)v17;
      v19 = *((float *)a2 + 9);
      if (!a2[42])
        v19 = (float)SLODWORD(v19);
      if (v18 != v19)
        return 0;
    }
  }
  v20 = a1[48];
  if (v20 != a2[48] || (a1[49] != 0) != (a2[49] != 0))
    return 0;
  if (v20 != 13)
  {
    v21 = (WebCore::Length *)(a1 + 44);
    if (v20 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v21, (const WebCore::Length *)(a2 + 44)) & 1) == 0)
        return 0;
    }
    else
    {
      if (a1[50])
        v22 = *(float *)v21;
      else
        v22 = (float)*(int *)v21;
      v23 = *((float *)a2 + 11);
      if (!a2[50])
        v23 = (float)SLODWORD(v23);
      if (v22 != v23)
        return 0;
    }
  }
  v24 = a1[56];
  if (v24 != a2[56] || (a1[57] != 0) != (a2[57] != 0))
    return 0;
  if (v24 != 13)
  {
    v25 = (WebCore::Length *)(a1 + 52);
    if (v24 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v25, (const WebCore::Length *)(a2 + 52)) & 1) == 0)
        return 0;
    }
    else
    {
      if (a1[58])
        v26 = *(float *)v25;
      else
        v26 = (float)*(int *)v25;
      v27 = *((float *)a2 + 13);
      if (!a2[58])
        v27 = (float)SLODWORD(v27);
      if (v26 != v27)
        return 0;
    }
  }
  v28 = a1[64];
  if (v28 != a2[64] || (a1[65] != 0) != (a2[65] != 0))
    return 0;
  if (v28 != 13)
  {
    v29 = (WebCore::Length *)(a1 + 60);
    if (v28 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v29, (const WebCore::Length *)(a2 + 60)) & 1) == 0)
        return 0;
    }
    else
    {
      if (a1[66])
        v30 = *(float *)v29;
      else
        v30 = (float)*(int *)v29;
      v31 = *((float *)a2 + 15);
      if (!a2[66])
        v31 = (float)SLODWORD(v31);
      if (v30 != v31)
        return 0;
    }
  }
  v32 = a1[72];
  if (v32 != a2[72] || (a1[73] != 0) != (a2[73] != 0))
    return 0;
  if (v32 != 13)
  {
    v33 = (WebCore::Length *)(a1 + 68);
    if (v32 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v33, (const WebCore::Length *)(a2 + 68)) & 1) == 0)
        return 0;
    }
    else
    {
      if (a1[74])
        v34 = *(float *)v33;
      else
        v34 = (float)*(int *)v33;
      v35 = *((float *)a2 + 17);
      if (!a2[74])
        v35 = (float)SLODWORD(v35);
      if (v34 != v35)
        return 0;
    }
  }
  v36 = a1[80];
  if (v36 != a2[80] || (a1[81] != 0) != (a2[81] != 0))
    return 0;
  if (v36 != 13)
  {
    v37 = (WebCore::Length *)(a1 + 76);
    if (v36 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v37, (const WebCore::Length *)(a2 + 76)) & 1) == 0)
        return 0;
    }
    else
    {
      if (a1[82])
        v38 = *(float *)v37;
      else
        v38 = (float)*(int *)v37;
      v39 = *((float *)a2 + 19);
      if (!a2[82])
        v39 = (float)SLODWORD(v39);
      if (v38 != v39)
        return 0;
    }
  }
  v40 = a1[88];
  if (v40 != a2[88] || (a1[89] != 0) != (a2[89] != 0))
    return 0;
  if (v40 != 13)
  {
    v41 = (WebCore::Length *)(a1 + 84);
    if (v40 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v41, (const WebCore::Length *)(a2 + 84)) & 1) == 0)
        return 0;
    }
    else
    {
      if (a1[90])
        v42 = *(float *)v41;
      else
        v42 = (float)*(int *)v41;
      v43 = *((float *)a2 + 21);
      if (!a2[90])
        v43 = (float)SLODWORD(v43);
      if (v42 != v43)
        return 0;
    }
  }
  v44 = a1[96];
  if (v44 != a2[96] || (a1[97] != 0) != (a2[97] != 0))
    return 0;
  if (v44 != 13)
  {
    v45 = (WebCore::Length *)(a1 + 92);
    if (v44 != 11)
    {
      if (a1[98])
        v46 = *(float *)v45;
      else
        v46 = (float)*(int *)v45;
      v47 = *((float *)a2 + 23);
      if (!a2[98])
        v47 = (float)SLODWORD(v47);
      if (v46 != v47)
        return 0;
      goto LABEL_112;
    }
    if ((WebCore::Length::isCalculatedEqual(v45, (const WebCore::Length *)(a2 + 92)) & 1) != 0)
      goto LABEL_112;
    return 0;
  }
LABEL_112:
  v48 = a1[104];
  if (v48 != a2[104] || (a1[105] != 0) != (a2[105] != 0))
    return 0;
  if (v48 == 13)
    return 1;
  v49 = (WebCore::Length *)(a1 + 100);
  if (v48 == 11)
    return WebCore::Length::isCalculatedEqual(v49, (const WebCore::Length *)(a2 + 100));
  if (a1[106])
    v50 = *(float *)v49;
  else
    v50 = (float)*(int *)v49;
  v51 = *((float *)a2 + 25);
  if (!a2[106])
    v51 = (float)SLODWORD(v51);
  return v50 == v51;
}

uint64_t WebCore::BasicShapeInset::type(WebCore::BasicShapeInset *this)
{
  return 4;
}

char *WebCore::BasicShapeInset::path(WebCore::BasicShapeInset *this, const WebCore::FloatRect *a2, const WebCore::FloatSize *a3)
{
  int v5;
  WebCore::Length *v6;
  float v7;
  WebCore::Length *v8;
  float v9;
  float v10;
  float v11;
  WebCore::Length *v12;
  float v13;
  float v14;
  float v15;
  float v16;
  WebCore::Length *v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  const WebCore::FloatSize *v24;
  float v25;
  float v26;
  float v27;
  const WebCore::FloatSize *v28;
  float v29;
  float v30;
  float v31;
  const WebCore::FloatSize *v32;
  float v33;
  float v34;
  float v35;
  float v37;
  float v38;
  float v39;
  float v40;
  _BOOL4 v41;
  _BOOL4 v42;
  _BOOL4 v43;
  _BOOL4 v44;
  _BOOL4 v45;
  _BOOL4 v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v5 = *((unsigned __int8 *)this + 40);
  v6 = (WebCore::BasicShapeInset *)((char *)this + 36);
  v7 = *((float *)a2 + 2);
  switch(v5)
  {
    case 0:
    case 1:
    case 9:
      break;
    case 3:
      v37 = *((float *)this + 9);
      if (!*((_BYTE *)this + 42))
        v37 = (float)SLODWORD(v37);
      v7 = (float)(v7 * v37) / 100.0;
      break;
    case 4:
      if (*((_BYTE *)this + 42))
        v7 = *(float *)v6;
      else
        v7 = (float)*(int *)v6;
      break;
    case 11:
      WebCore::Length::nonNanCalculatedValue(v6, *((float *)a2 + 2));
      v7 = v47;
      break;
    default:
      v7 = 0.0;
      break;
  }
  v8 = (WebCore::BasicShapeInset *)((char *)this + 20);
  v9 = *((float *)a2 + 3);
  switch(*((_BYTE *)this + 24))
  {
    case 0:
    case 1:
    case 9:
      break;
    case 3:
      v38 = *((float *)this + 5);
      if (!*((_BYTE *)this + 26))
        v38 = (float)SLODWORD(v38);
      v9 = (float)(v9 * v38) / 100.0;
      break;
    case 4:
      if (*((_BYTE *)this + 26))
        v9 = *(float *)v8;
      else
        v9 = (float)*(int *)v8;
      break;
    case 0xB:
      WebCore::Length::nonNanCalculatedValue(v8, *((float *)a2 + 3));
      v9 = v48;
      break;
    default:
      v9 = 0.0;
      break;
  }
  v50 = *((float *)a2 + 1);
  v51 = *(float *)a2;
  v10 = *((float *)a2 + 2);
  v53 = v7;
  v11 = v10 - v7;
  v12 = (WebCore::BasicShapeInset *)((char *)this + 12);
  switch(*((_BYTE *)this + 16))
  {
    case 0:
    case 1:
    case 9:
      break;
    case 3:
      v39 = *((float *)this + 3);
      if (!*((_BYTE *)this + 18))
        v39 = (float)SLODWORD(v39);
      v10 = (float)(v10 * v39) / 100.0;
      break;
    case 4:
      if (*((_BYTE *)this + 18))
        v10 = *(float *)v12;
      else
        v10 = (float)*(int *)v12;
      break;
    case 0xB:
      WebCore::Length::nonNanCalculatedValue(v12, v10);
      break;
    default:
      v10 = 0.0;
      break;
  }
  v13 = v11 - v10;
  if (v13 >= 0.0)
    v14 = v13;
  else
    v14 = 0.0;
  v15 = *((float *)a2 + 3);
  v16 = v15 - v9;
  v52 = v14;
  v17 = (WebCore::BasicShapeInset *)((char *)this + 28);
  v18 = v15;
  switch(*((_BYTE *)this + 32))
  {
    case 2:
    case 5:
    case 6:
    case 7:
    case 8:
    case 0xA:
    case 0xC:
    case 0xD:
      v18 = 0.0;
      break;
    case 3:
      v40 = *((float *)this + 7);
      if (!*((_BYTE *)this + 34))
        v40 = (float)SLODWORD(v40);
      v18 = (float)(v15 * v40) / 100.0;
      break;
    case 4:
      if (*((_BYTE *)this + 34))
        v18 = *(float *)v17;
      else
        v18 = (float)*(int *)v17;
      break;
    case 0xB:
      WebCore::Length::nonNanCalculatedValue(v17, v15);
      v18 = v49;
      v15 = *((float *)a2 + 3);
      break;
    default:
      break;
  }
  v19 = v16 - v18;
  if (v19 >= 0.0)
    v20 = v19;
  else
    v20 = 0.0;
  v54 = *((float *)a2 + 2);
  v55 = v15;
  v21 = WebCore::floatSizeForLengthSize((WebCore::BasicShapeInset *)((char *)this + 44), (const WebCore::LengthSize *)&v54, a3);
  v23 = v22;
  v68 = *((_QWORD *)a2 + 1);
  v25 = WebCore::floatSizeForLengthSize((WebCore::BasicShapeInset *)((char *)this + 60), (const WebCore::LengthSize *)&v68, v24);
  v27 = v26;
  v67 = *((_QWORD *)a2 + 1);
  v29 = WebCore::floatSizeForLengthSize((WebCore::BasicShapeInset *)((char *)this + 92), (const WebCore::LengthSize *)&v67, v28);
  v31 = v30;
  v66 = *((_QWORD *)a2 + 1);
  v33 = WebCore::floatSizeForLengthSize((WebCore::BasicShapeInset *)((char *)this + 76), (const WebCore::LengthSize *)&v66, v32);
  v35 = 1.0;
  if ((float)(v21 + v25) > v52)
  {
    v35 = v52 / (float)(v21 + v25);
    if (v35 > 1.0)
      v35 = 1.0;
  }
  if ((float)(v29 + v33) > v52 && v35 >= (float)(v52 / (float)(v29 + v33)))
    v35 = v52 / (float)(v29 + v33);
  if ((float)(v23 + v31) > v20 && v35 >= (float)(v20 / (float)(v23 + v31)))
    v35 = v20 / (float)(v23 + v31);
  if ((float)(v27 + v34) > v20 && v35 >= (float)(v20 / (float)(v27 + v34)))
    v35 = v20 / (float)(v27 + v34);
  if (v35 != 1.0)
  {
    v41 = (float)(v21 * v35) != 0.0;
    v42 = (float)(v23 * v35) != 0.0;
    v23 = v41 && v42 ? v23 * v35 : 0.0;
    v21 = v41 && v42 ? v21 * v35 : 0.0;
    v43 = (float)(v25 * v35) != 0.0;
    v44 = (float)(v27 * v35) != 0.0;
    v27 = v43 && v44 ? v27 * v35 : 0.0;
    v25 = v43 && v44 ? v25 * v35 : 0.0;
    v45 = (float)(v29 * v35) != 0.0;
    v46 = (float)(v31 * v35) != 0.0;
    v31 = v45 && v46 ? v31 * v35 : 0.0;
    v29 = v45 && v46 ? v29 * v35 : 0.0;
    v33 = v33 * v35;
    v34 = v34 * v35;
    if (v33 == 0.0 || v34 == 0.0)
    {
      v34 = 0.0;
      v33 = 0.0;
    }
  }
  v54 = v53 + v51;
  v55 = v9 + v50;
  v56 = v52;
  v57 = v20;
  v58 = v21;
  v59 = v23;
  v60 = v25;
  v61 = v27;
  v62 = v29;
  v63 = v31;
  v64 = v33;
  v65 = v34;
  if ((byte_1ECE842D9 & 1) == 0)
  {
    qword_1ECE848D0 = 0;
    xmmword_1ECE848B0 = 0u;
    unk_1ECE848C0 = 0u;
    xmmword_1ECE84890 = 0u;
    unk_1ECE848A0 = 0u;
    xmmword_1ECE84870 = 0u;
    unk_1ECE84880 = 0u;
    xmmword_1ECE84850 = 0u;
    unk_1ECE84860 = 0u;
    xmmword_1ECE84830 = 0u;
    unk_1ECE84840 = 0u;
    xmmword_1ECE84810 = 0u;
    unk_1ECE84820 = 0u;
    xmmword_1ECE847F0 = 0u;
    unk_1ECE84800 = 0u;
    xmmword_1ECE847D0 = 0u;
    unk_1ECE847E0 = 0u;
    xmmword_1ECE847B0 = 0u;
    unk_1ECE847C0 = 0u;
    xmmword_1ECE84790 = 0u;
    unk_1ECE847A0 = 0u;
    xmmword_1ECE84770 = 0u;
    unk_1ECE84780 = 0u;
    xmmword_1ECE84750 = 0u;
    unk_1ECE84760 = 0u;
    xmmword_1ECE84730 = 0u;
    unk_1ECE84740 = 0u;
    xmmword_1ECE84710 = 0u;
    unk_1ECE84720 = 0u;
    xmmword_1ECE846F0 = 0u;
    unk_1ECE84700 = 0u;
    byte_1ECE842D9 = 1;
  }
  return WTF::TinyLRUCache<WebCore::FloatRoundedRect,WebCore::Path,4ul,WebCore::RoundedRectPathPolicy>::get((uint64_t)&v54);
}

BOOL WebCore::BasicShapeInset::canBlend(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) == 4;
}

void WebCore::BasicShapeInset::blend(unsigned __int8 *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  unsigned int *v9;
  float *v10;
  unsigned int *v11;
  unsigned int *v12;
  __n128 v13;
  __n128 v14;
  unsigned int v15;
  int v16;
  __n128 v17;
  unsigned int v18;
  int v19;
  __n128 v20;
  unsigned int v21;
  int v22;
  __n128 v23;
  unsigned int v24;
  int v25;
  unsigned __int32 *v26;
  __n128 v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  char v31;
  unsigned __int8 v32;
  unsigned __int32 *v33;
  __n128 v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  unsigned __int8 v39;
  unsigned __int8 *v40;
  unsigned __int32 *v41;
  __n128 v42;
  unsigned int v43;
  unsigned int v44;
  unsigned __int8 v45;
  char v46;
  unsigned int v47;
  unsigned __int32 *v48;
  __n128 v49;
  unsigned int v50;
  unsigned int v51;
  unsigned __int8 v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  unsigned __int8 *v56;
  unsigned __int32 *v57;
  __n128 v58;
  unsigned int v59;
  unsigned int v60;
  unsigned __int8 v61;
  char v62;
  unsigned int v63;
  unsigned __int32 *v64;
  __n128 v65;
  unsigned int v66;
  unsigned int v67;
  unsigned __int8 v68;
  char v69;
  unsigned int v70;
  uint64_t v71;
  unsigned __int8 *v72;
  unsigned __int32 *v73;
  __n128 v74;
  unsigned int v75;
  unsigned int v76;
  unsigned __int8 v77;
  char v78;
  unsigned int v79;
  float *v80;
  unsigned int v81;
  unsigned int v82;
  unsigned __int8 v83;
  char v84;
  unsigned int v85;
  uint64_t *v86;
  unsigned int *v87;
  unsigned int *v88;
  unsigned int *v89;
  unsigned int *v90;
  unsigned int *v91;
  unsigned int *v92;
  unsigned int *v93;
  unsigned int *v94;
  unsigned __int8 *v95;
  uint64_t v96;
  unsigned int v97;
  unsigned __int8 v98;
  char v99;
  unsigned __int8 v100;

  if ((*(unsigned int (**)(unsigned __int8 *))(*(_QWORD *)a2 + 24))(a2) != 4)
  {
    __break(0xC471u);
    JUMPOUT(0x1964C9B68);
  }
  v86 = a4;
  v8 = WTF::fastMalloc((WTF *)0x70);
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)v8 = off_1E3441898;
  *(_DWORD *)(v8 + 47) = 0;
  *(_DWORD *)(v8 + 44) = 0;
  v87 = (unsigned int *)(v8 + 44);
  *(_DWORD *)(v8 + 55) = 0;
  *(_DWORD *)(v8 + 52) = 0;
  v88 = (unsigned int *)(v8 + 52);
  *(_DWORD *)(v8 + 63) = 0;
  *(_DWORD *)(v8 + 60) = 0;
  v89 = (unsigned int *)(v8 + 60);
  *(_DWORD *)(v8 + 71) = 0;
  *(_DWORD *)(v8 + 68) = 0;
  v90 = (unsigned int *)(v8 + 68);
  *(_DWORD *)(v8 + 79) = 0;
  *(_DWORD *)(v8 + 76) = 0;
  v91 = (unsigned int *)(v8 + 76);
  *(_DWORD *)(v8 + 87) = 0;
  *(_DWORD *)(v8 + 84) = 0;
  v92 = (unsigned int *)(v8 + 84);
  *(_DWORD *)(v8 + 95) = 0;
  *(_DWORD *)(v8 + 92) = 0;
  v93 = (unsigned int *)(v8 + 92);
  *(_DWORD *)(v8 + 103) = 0;
  *(_DWORD *)(v8 + 100) = 0;
  v94 = (unsigned int *)(v8 + 100);
  v95 = a1;
  *(_DWORD *)(v8 + 12) = 0;
  v9 = (unsigned int *)(v8 + 12);
  *(_DWORD *)(v8 + 20) = 0;
  v10 = (float *)(v8 + 20);
  *(_DWORD *)(v8 + 28) = 0;
  v11 = (unsigned int *)(v8 + 28);
  *(_DWORD *)(v8 + 36) = 0;
  v12 = (unsigned int *)(v8 + 36);
  *(_DWORD *)(v8 + 15) = 0;
  *(_DWORD *)(v8 + 23) = 0;
  *(_DWORD *)(v8 + 31) = 0;
  *(_DWORD *)(v8 + 39) = 0;
  WebCore::blend(a2 + 20, a1 + 20, a3, (uint64_t)&v97, v13);
  v96 = a3;
  if ((unsigned int *)(v8 + 20) == &v97)
  {
    if (v98 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v97);
    }
  }
  else
  {
    if (*(_BYTE *)(v8 + 24) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)v10);
    }
    v15 = v98;
    *(_BYTE *)(v8 + 24) = v98;
    *(_BYTE *)(v8 + 25) = v99;
    if (v15 - 2 < 9)
    {
      v16 = v100;
      *(_BYTE *)(v8 + 26) = v100;
      if (v16)
      {
        v14.n128_u32[0] = v97;
        *v10 = *(float *)&v97;
        goto LABEL_7;
      }
LABEL_49:
      *v10 = *(float *)&v97;
      goto LABEL_7;
    }
    if (v15 > 0xD)
      goto LABEL_7;
    if (((1 << v15) & 0x3003) != 0)
    {
      *v10 = 0.0;
      goto LABEL_7;
    }
    if (v15 == 11)
      goto LABEL_49;
  }
LABEL_7:
  WebCore::blend(a2 + 12, a1 + 12, a3, (uint64_t)&v97, v14);
  if (v9 == &v97)
  {
    if (v98 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v97);
    }
  }
  else
  {
    if (*(_BYTE *)(v8 + 16) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v9);
    }
    v18 = v98;
    *(_BYTE *)(v8 + 16) = v98;
    *(_BYTE *)(v8 + 17) = v99;
    if (v18 - 2 < 9)
    {
      v19 = v100;
      *(_BYTE *)(v8 + 18) = v100;
      if (v19)
      {
        v17.n128_u32[0] = v97;
        *v9 = v97;
        goto LABEL_12;
      }
LABEL_51:
      *v9 = v97;
      goto LABEL_12;
    }
    if (v18 > 0xD)
      goto LABEL_12;
    if (((1 << v18) & 0x3003) != 0)
    {
      *v9 = 0;
      goto LABEL_12;
    }
    if (v18 == 11)
      goto LABEL_51;
  }
LABEL_12:
  WebCore::blend(a2 + 28, a1 + 28, a3, (uint64_t)&v97, v17);
  if (v11 == &v97)
  {
    if (v98 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v97);
    }
  }
  else
  {
    if (*(_BYTE *)(v8 + 32) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v11);
    }
    v21 = v98;
    *(_BYTE *)(v8 + 32) = v98;
    *(_BYTE *)(v8 + 33) = v99;
    if (v21 - 2 < 9)
    {
      v22 = v100;
      *(_BYTE *)(v8 + 34) = v100;
      if (v22)
      {
        v20.n128_u32[0] = v97;
        *v11 = v97;
        goto LABEL_17;
      }
LABEL_53:
      *v11 = v97;
      goto LABEL_17;
    }
    if (v21 > 0xD)
      goto LABEL_17;
    if (((1 << v21) & 0x3003) != 0)
    {
      *v11 = 0;
      goto LABEL_17;
    }
    if (v21 == 11)
      goto LABEL_53;
  }
LABEL_17:
  WebCore::blend(a2 + 36, a1 + 36, a3, (uint64_t)&v97, v20);
  if (v12 != &v97)
  {
    if (*(_BYTE *)(v8 + 40) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v12);
    }
    v24 = v98;
    *(_BYTE *)(v8 + 40) = v98;
    *(_BYTE *)(v8 + 41) = v99;
    if (v24 - 2 >= 9)
    {
      if (v24 > 0xD)
        goto LABEL_22;
      if (((1 << v24) & 0x3003) != 0)
      {
        *v12 = 0;
        goto LABEL_22;
      }
      if (v24 != 11)
        goto LABEL_22;
    }
    else
    {
      v25 = v100;
      *(_BYTE *)(v8 + 42) = v100;
      if (v25)
      {
        v23.n128_u32[0] = v97;
        *v12 = v97;
        goto LABEL_22;
      }
    }
    *v12 = v97;
    goto LABEL_22;
  }
  if (v98 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v97);
  }
LABEL_22:
  v26 = (unsigned __int32 *)(a2 + 44);
  WebCore::blend(a2 + 44, a1 + 44, a3, (uint64_t)&v97, v23);
  v28 = v98;
  if (v98 != 11 && v98 != 13)
  {
    if (v100)
    {
      v27.n128_u32[0] = v97;
      if (*(float *)&v97 < 0.0)
      {
LABEL_26:
        v29 = a2[48];
        if (!a2[48] || v29 == 11)
          goto LABEL_31;
        if (a2[50])
        {
          v27.n128_u32[0] = *v26;
          if (*(float *)v26 != 0.0)
          {
LABEL_31:
            v30 = 0;
            v31 = 0;
            v32 = 0;
            if (v29 == 11)
              v28 = 4;
            else
              v28 = v29;
            goto LABEL_61;
          }
        }
        else if (*v26)
        {
          goto LABEL_31;
        }
        v29 = a1[48];
        goto LABEL_31;
      }
    }
    else if ((v97 & 0x80000000) != 0)
    {
      goto LABEL_26;
    }
  }
  v31 = v99;
  if (v98 - 2 >= 9)
  {
    if (v98 != 11)
    {
      v30 = 0;
      v32 = 0;
      goto LABEL_61;
    }
    v32 = 0;
  }
  else
  {
    v32 = v100;
  }
  v30 = v97;
LABEL_61:
  v33 = (unsigned __int32 *)(a2 + 52);
  WebCore::blend(a2 + 52, a1 + 52, a3, (uint64_t)&v97, v27);
  v35 = v98;
  if (v98 == 11 || v98 == 13)
    goto LABEL_79;
  if (!v100)
  {
    if ((v97 & 0x80000000) != 0)
      goto LABEL_65;
LABEL_79:
    v38 = v99;
    if (v98 - 2 >= 9)
    {
      if (v98 != 11)
      {
        v37 = 0;
        v39 = 0;
        goto LABEL_82;
      }
      v39 = 0;
    }
    else
    {
      v39 = v100;
    }
    v37 = v97;
    goto LABEL_82;
  }
  v34.n128_u32[0] = v97;
  if (*(float *)&v97 >= 0.0)
    goto LABEL_79;
LABEL_65:
  v36 = a2[56];
  if (!a2[56] || v36 == 11)
    goto LABEL_70;
  if (!a2[58])
  {
    if (*v33)
      goto LABEL_70;
    goto LABEL_69;
  }
  v34.n128_u32[0] = *v33;
  if (*(float *)v33 == 0.0)
LABEL_69:
    v36 = a1[56];
LABEL_70:
  v37 = 0;
  v38 = 0;
  v39 = 0;
  if (v36 == 11)
    v35 = 4;
  else
    v35 = v36;
LABEL_82:
  if (*(_BYTE *)(v8 + 48) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v87);
  }
  *(_BYTE *)(v8 + 48) = v28;
  *(_BYTE *)(v8 + 49) = v31;
  if (v28 - 2 < 9)
  {
    *(_BYTE *)(v8 + 50) = v32;
LABEL_85:
    *v87 = v30;
    goto LABEL_86;
  }
  if (v28 <= 0xD)
  {
    if (((1 << v28) & 0x3003) != 0)
    {
      v30 = 0;
      goto LABEL_85;
    }
    if (v28 == 11)
      goto LABEL_85;
  }
LABEL_86:
  if (*(_BYTE *)(v8 + 56) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v88);
  }
  *(_BYTE *)(v8 + 56) = v35;
  *(_BYTE *)(v8 + 57) = v38;
  if (v35 - 2 >= 9)
  {
    v40 = v95;
    if (v35 > 0xD)
      goto LABEL_90;
    if (((1 << v35) & 0x3003) != 0)
    {
      v37 = 0;
    }
    else if (v35 != 11)
    {
      goto LABEL_90;
    }
  }
  else
  {
    *(_BYTE *)(v8 + 58) = v39;
    v40 = v95;
  }
  *v88 = v37;
LABEL_90:
  v41 = (unsigned __int32 *)(a2 + 60);
  WebCore::blend(a2 + 60, v40 + 60, v96, (uint64_t)&v97, v34);
  v43 = v98;
  if (v98 != 11 && v98 != 13)
  {
    if (v100)
    {
      v42.n128_u32[0] = v97;
      if (*(float *)&v97 < 0.0)
      {
LABEL_94:
        v44 = a2[64];
        if (!a2[64] || v44 == 11)
          goto LABEL_99;
        if (a2[66])
        {
          v42.n128_u32[0] = *v41;
          if (*(float *)v41 != 0.0)
          {
LABEL_99:
            v45 = 0;
            v46 = 0;
            v47 = 0;
            if (v44 == 11)
              v43 = 4;
            else
              v43 = v44;
            goto LABEL_121;
          }
        }
        else if (*v41)
        {
          goto LABEL_99;
        }
        v44 = v40[64];
        goto LABEL_99;
      }
    }
    else if ((v97 & 0x80000000) != 0)
    {
      goto LABEL_94;
    }
  }
  v46 = v99;
  if (v98 - 2 >= 9)
  {
    if (v98 != 11)
    {
      v45 = 0;
      v47 = 0;
      goto LABEL_121;
    }
    v45 = 0;
  }
  else
  {
    v45 = v100;
  }
  v47 = v97;
LABEL_121:
  v48 = (unsigned __int32 *)(a2 + 68);
  WebCore::blend(a2 + 68, v40 + 68, v96, (uint64_t)&v97, v42);
  v50 = v98;
  if (v98 == 11 || v98 == 13)
    goto LABEL_139;
  if (!v100)
  {
    if ((v97 & 0x80000000) != 0)
      goto LABEL_125;
LABEL_139:
    v53 = v99;
    if (v98 - 2 >= 9)
    {
      if (v98 != 11)
      {
        v52 = 0;
        v54 = 0;
        goto LABEL_142;
      }
      v52 = 0;
    }
    else
    {
      v52 = v100;
    }
    v54 = v97;
    goto LABEL_142;
  }
  v49.n128_u32[0] = v97;
  if (*(float *)&v97 >= 0.0)
    goto LABEL_139;
LABEL_125:
  v51 = a2[72];
  if (!a2[72] || v51 == 11)
    goto LABEL_130;
  if (!a2[74])
  {
    if (*v48)
      goto LABEL_130;
    goto LABEL_129;
  }
  v49.n128_u32[0] = *v48;
  if (*(float *)v48 == 0.0)
LABEL_129:
    v51 = v40[72];
LABEL_130:
  v52 = 0;
  v53 = 0;
  v54 = 0;
  if (v51 == 11)
    v50 = 4;
  else
    v50 = v51;
LABEL_142:
  if (*(_BYTE *)(v8 + 64) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v89);
  }
  *(_BYTE *)(v8 + 64) = v43;
  *(_BYTE *)(v8 + 65) = v46;
  if (v43 - 2 < 9)
  {
    *(_BYTE *)(v8 + 66) = v45;
    v55 = v96;
LABEL_145:
    *v89 = v47;
    goto LABEL_146;
  }
  v55 = v96;
  if (v43 <= 0xD)
  {
    if (((1 << v43) & 0x3003) != 0)
    {
      v47 = 0;
      goto LABEL_145;
    }
    if (v43 == 11)
      goto LABEL_145;
  }
LABEL_146:
  if (*(_BYTE *)(v8 + 72) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v90);
    v55 = v96;
  }
  *(_BYTE *)(v8 + 72) = v50;
  *(_BYTE *)(v8 + 73) = v53;
  if (v50 - 2 >= 9)
  {
    v56 = v95;
    if (v50 > 0xD)
      goto LABEL_150;
    if (((1 << v50) & 0x3003) != 0)
    {
      v54 = 0;
    }
    else if (v50 != 11)
    {
      goto LABEL_150;
    }
  }
  else
  {
    *(_BYTE *)(v8 + 74) = v52;
    v56 = v95;
  }
  *v90 = v54;
LABEL_150:
  v57 = (unsigned __int32 *)(a2 + 76);
  WebCore::blend(a2 + 76, v56 + 76, v55, (uint64_t)&v97, v49);
  v59 = v98;
  if (v98 != 11 && v98 != 13)
  {
    if (v100)
    {
      v58.n128_u32[0] = v97;
      if (*(float *)&v97 < 0.0)
      {
LABEL_154:
        v60 = a2[80];
        if (!a2[80] || v60 == 11)
          goto LABEL_159;
        if (a2[82])
        {
          v58.n128_u32[0] = *v57;
          if (*(float *)v57 != 0.0)
          {
LABEL_159:
            v61 = 0;
            v62 = 0;
            v63 = 0;
            if (v60 == 11)
              v59 = 4;
            else
              v59 = v60;
            goto LABEL_181;
          }
        }
        else if (*v57)
        {
          goto LABEL_159;
        }
        v60 = v56[80];
        goto LABEL_159;
      }
    }
    else if ((v97 & 0x80000000) != 0)
    {
      goto LABEL_154;
    }
  }
  v62 = v99;
  if (v98 - 2 >= 9)
  {
    if (v98 != 11)
    {
      v61 = 0;
      v63 = 0;
      goto LABEL_181;
    }
    v61 = 0;
  }
  else
  {
    v61 = v100;
  }
  v63 = v97;
LABEL_181:
  v64 = (unsigned __int32 *)(a2 + 84);
  WebCore::blend(a2 + 84, v56 + 84, v96, (uint64_t)&v97, v58);
  v66 = v98;
  if (v98 == 11 || v98 == 13)
    goto LABEL_199;
  if (!v100)
  {
    if ((v97 & 0x80000000) != 0)
      goto LABEL_185;
LABEL_199:
    v69 = v99;
    if (v98 - 2 >= 9)
    {
      if (v98 != 11)
      {
        v68 = 0;
        v70 = 0;
        goto LABEL_202;
      }
      v68 = 0;
    }
    else
    {
      v68 = v100;
    }
    v70 = v97;
    goto LABEL_202;
  }
  v65.n128_u32[0] = v97;
  if (*(float *)&v97 >= 0.0)
    goto LABEL_199;
LABEL_185:
  v67 = a2[88];
  if (!a2[88] || v67 == 11)
    goto LABEL_190;
  if (!a2[90])
  {
    if (*v64)
      goto LABEL_190;
    goto LABEL_189;
  }
  v65.n128_u32[0] = *v64;
  if (*(float *)v64 == 0.0)
LABEL_189:
    v67 = v56[88];
LABEL_190:
  v68 = 0;
  v69 = 0;
  v70 = 0;
  if (v67 == 11)
    v66 = 4;
  else
    v66 = v67;
LABEL_202:
  if (*(_BYTE *)(v8 + 80) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v91);
  }
  *(_BYTE *)(v8 + 80) = v59;
  *(_BYTE *)(v8 + 81) = v62;
  if (v59 - 2 < 9)
  {
    *(_BYTE *)(v8 + 82) = v61;
    v71 = v96;
LABEL_205:
    *v91 = v63;
    goto LABEL_206;
  }
  v71 = v96;
  if (v59 <= 0xD)
  {
    if (((1 << v59) & 0x3003) != 0)
    {
      v63 = 0;
      goto LABEL_205;
    }
    if (v59 == 11)
      goto LABEL_205;
  }
LABEL_206:
  if (*(_BYTE *)(v8 + 88) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v92);
    v71 = v96;
  }
  *(_BYTE *)(v8 + 88) = v66;
  *(_BYTE *)(v8 + 89) = v69;
  if (v66 - 2 >= 9)
  {
    v72 = v95;
    if (v66 > 0xD)
      goto LABEL_210;
    if (((1 << v66) & 0x3003) != 0)
    {
      v70 = 0;
    }
    else if (v66 != 11)
    {
      goto LABEL_210;
    }
  }
  else
  {
    *(_BYTE *)(v8 + 90) = v68;
    v72 = v95;
  }
  *v92 = v70;
LABEL_210:
  v73 = (unsigned __int32 *)(a2 + 92);
  WebCore::blend(a2 + 92, v72 + 92, v71, (uint64_t)&v97, v65);
  v75 = v98;
  if (v98 != 11 && v98 != 13)
  {
    if (v100)
    {
      v74.n128_u32[0] = v97;
      if (*(float *)&v97 < 0.0)
      {
LABEL_214:
        v76 = a2[96];
        if (!a2[96] || v76 == 11)
          goto LABEL_219;
        if (a2[98])
        {
          v74.n128_u32[0] = *v73;
          if (*(float *)v73 != 0.0)
          {
LABEL_219:
            v77 = 0;
            v78 = 0;
            v79 = 0;
            if (v76 == 11)
              v75 = 4;
            else
              v75 = v76;
            goto LABEL_241;
          }
        }
        else if (*v73)
        {
          goto LABEL_219;
        }
        v76 = v72[96];
        goto LABEL_219;
      }
    }
    else if ((v97 & 0x80000000) != 0)
    {
      goto LABEL_214;
    }
  }
  v78 = v99;
  if (v98 - 2 >= 9)
  {
    if (v98 != 11)
    {
      v77 = 0;
      v79 = 0;
      goto LABEL_241;
    }
    v77 = 0;
  }
  else
  {
    v77 = v100;
  }
  v79 = v97;
LABEL_241:
  v80 = (float *)(a2 + 100);
  WebCore::blend(a2 + 100, v72 + 100, v96, (uint64_t)&v97, v74);
  v81 = v98;
  if (v98 == 11 || v98 == 13)
    goto LABEL_259;
  if (!v100)
  {
    if ((v97 & 0x80000000) != 0)
      goto LABEL_245;
LABEL_259:
    v84 = v99;
    if (v98 - 2 >= 9)
    {
      if (v98 != 11)
      {
        v83 = 0;
        v85 = 0;
        goto LABEL_262;
      }
      v83 = 0;
    }
    else
    {
      v83 = v100;
    }
    v85 = v97;
    goto LABEL_262;
  }
  if (*(float *)&v97 >= 0.0)
    goto LABEL_259;
LABEL_245:
  v82 = a2[104];
  if (!a2[104] || v82 == 11)
    goto LABEL_250;
  if (!a2[106])
  {
    if (*(_DWORD *)v80)
      goto LABEL_250;
    goto LABEL_249;
  }
  if (*v80 == 0.0)
LABEL_249:
    v82 = v95[104];
LABEL_250:
  v83 = 0;
  v84 = 0;
  v85 = 0;
  if (v82 == 11)
    v81 = 4;
  else
    v81 = v82;
LABEL_262:
  if (*(_BYTE *)(v8 + 96) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v93);
  }
  *(_BYTE *)(v8 + 96) = v75;
  *(_BYTE *)(v8 + 97) = v78;
  if (v75 - 2 < 9)
  {
    *(_BYTE *)(v8 + 98) = v77;
LABEL_265:
    *v93 = v79;
    goto LABEL_266;
  }
  if (v75 <= 0xD)
  {
    if (((1 << v75) & 0x3003) != 0)
    {
      v79 = 0;
      goto LABEL_265;
    }
    if (v75 == 11)
      goto LABEL_265;
  }
LABEL_266:
  if (*(_BYTE *)(v8 + 104) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v94);
  }
  *(_BYTE *)(v8 + 104) = v81;
  *(_BYTE *)(v8 + 105) = v84;
  if (v81 - 2 >= 9)
  {
    if (v81 > 0xD)
      goto LABEL_270;
    if (((1 << v81) & 0x3003) != 0)
    {
      v85 = 0;
    }
    else if (v81 != 11)
    {
      goto LABEL_270;
    }
  }
  else
  {
    *(_BYTE *)(v8 + 106) = v83;
  }
  *v94 = v85;
LABEL_270:
  *v86 = v8;
}

uint64_t WebCore::BasicShapeInset::dump(WebCore::BasicShapeInset *this, WTF::TextStream *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  WTF::TextStream::dumpProperty<WebCore::Length>(a2, (uint64_t)"top", (unsigned int *)this + 5);
  WTF::TextStream::dumpProperty<WebCore::Length>(a2, (uint64_t)"right", (unsigned int *)this + 3);
  WTF::TextStream::dumpProperty<WebCore::Length>(a2, (uint64_t)"bottom", (unsigned int *)this + 7);
  WTF::TextStream::dumpProperty<WebCore::Length>(a2, (uint64_t)"left", (unsigned int *)this + 9);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v4 = WTF::TextStream::operator<<();
  WebCore::operator<<(v4, (unsigned int *)this + 11);
  WTF::TextStream::endGroup(a2);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v5 = WTF::TextStream::operator<<();
  WebCore::operator<<(v5, (unsigned int *)this + 15);
  WTF::TextStream::endGroup(a2);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v6 = WTF::TextStream::operator<<();
  WebCore::operator<<(v6, (unsigned int *)this + 19);
  WTF::TextStream::endGroup(a2);
  WTF::TextStream::startGroup(a2);
  WTF::TextStream::operator<<();
  v7 = WTF::TextStream::operator<<();
  WebCore::operator<<(v7, (unsigned int *)this + 23);
  return WTF::TextStream::endGroup(a2);
}

WTF::StringImpl *WebCore::ImageContentData::createContentRenderer@<X0>(WebCore::ImageContentData *this@<X0>, WebCore::Document *a2@<X1>, const WebCore::RenderStyle *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  const WebCore::Element *v19;
  WTF::StringImpl *v20;
  _DWORD *v21;
  WTF::StringImpl *result;
  _QWORD v23[8];

  {
    WebCore::RenderStyle::RenderStyle(&WebCore::RenderStyle::defaultStyle(void)::style);
  }
  LODWORD(v23[0]) = 0;
  v8 = qword_1ECE913C0;
  ++*(_DWORD *)qword_1ECE913C0;
  v9 = qword_1ECE913D0;
  v23[1] = v8;
  v23[2] = qword_1ECE913C8;
  ++*(_DWORD *)qword_1ECE913D0;
  v23[3] = v9;
  v10 = qword_1ECE913D8;
  ++*(_DWORD *)qword_1ECE913D8;
  v23[4] = v10;
  v23[5] = qword_1ECE913E0;
  v23[6] = 0;
  v11 = qword_1ECE913F0;
  ++*(_DWORD *)qword_1ECE913F0;
  v23[7] = v11;
  WebCore::RenderStyle::inheritFrom((WebCore::RenderStyle *)v23, a3, a3);
  v12 = *((_QWORD *)this + 4);
  v13 = bmalloc::api::isoAllocate();
  v14 = (_QWORD *)WebCore::RenderObject::RenderObject(v13, 15, (uint64_t)a2, 28, 259);
  *v14 = off_1E3422BC8;
  *(_QWORD *)(v13 + 64) = 0;
  *(_QWORD *)(v13 + 70) = 0;
  WebCore::RenderStyle::RenderStyle((uint64_t)(v14 + 10), v23);
  *(_QWORD *)(v13 + 208) = 0;
  *(_QWORD *)(v13 + 216) = 0;
  *(_OWORD *)(v13 + 176) = 0u;
  *(_OWORD *)(v13 + 192) = 0u;
  *(_OWORD *)(v13 + 144) = 0u;
  *(_OWORD *)(v13 + 160) = 0u;
  *(_DWORD *)(v13 + 20) |= 2u;
  *(_QWORD *)v13 = off_1E34280E8;
  v15 = bmalloc::api::isoAllocate();
  *(_DWORD *)(v15 + 8) = 0;
  if (v12)
  {
    *(_QWORD *)(v15 + 16) = 0;
    *(_QWORD *)(v15 + 24) = 0;
    *(_BYTE *)(v15 + 32) = 1;
    *(_QWORD *)v15 = off_1E3428808;
    ++*(_DWORD *)(v12 + 8);
    *(_QWORD *)(v15 + 40) = v12;
  }
  else
  {
    *(_QWORD *)v15 = off_1E34287A0;
    *(_QWORD *)(v15 + 16) = 0;
    *(_QWORD *)(v15 + 24) = 0;
    *(_BYTE *)(v15 + 32) = 1;
  }
  *(_QWORD *)(v13 + 224) = v15;
  *(_QWORD *)(v13 + 232) = 0x3F80000000000000;
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v23, v16);
  WebCore::RenderElement::initializeStyle((WebCore::RenderElement *)v13, v17, v18, v19);
  v21 = (_DWORD *)*((_QWORD *)this + 2);
  if (v21)
    *v21 += 2;
  result = *(WTF::StringImpl **)(v13 + 216);
  *(_QWORD *)(v13 + 216) = v21;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v20);
    else
      *(_DWORD *)result -= 2;
  }
  *a4 = v13;
  return result;
}

WTF *WebCore::CounterContentData::createContentRenderer@<X0>(WebCore::CounterContentData *this@<X0>, WebCore::Document *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  WTF *result;
  _BYTE v12[24];

  v6 = *((_QWORD *)this + 4);
  v7 = bmalloc::api::isoAllocate();
  *(_QWORD *)WebCore::RenderText::RenderText(v7, 4, (uint64_t)a2, MEMORY[0x1E0CBF738]) = off_1E3421750;
  v8 = *(_DWORD **)v6;
  if (*(_QWORD *)v6)
    *v8 += 2;
  *(_QWORD *)(v7 + 120) = v8;
  *(_BYTE *)(v7 + 128) = *(_BYTE *)(v6 + 8);
  v9 = *(_DWORD **)(v6 + 16);
  if (v9)
    *v9 += 2;
  *(_QWORD *)(v7 + 136) = v9;
  v10 = *(_DWORD **)(v6 + 24);
  if (v10)
    *v10 += 2;
  *(_QWORD *)(v7 + 152) = 0;
  *(_QWORD *)(v7 + 160) = 0;
  *(_QWORD *)(v7 + 144) = v10;
  result = WTF::WeakHashSet<WebCore::RenderCounter,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderCounter>(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 40) + 8) + 1944)+ 416, (_QWORD *)v7, (uint64_t)v12);
  *a3 = v7;
  return result;
}

WTF::StringImpl *WebCore::QuoteContentData::createContentRenderer@<X0>(WebCore::QuoteContentData *this@<X0>, WebCore::Document *a2@<X1>, const WebCore::RenderStyle *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  void *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  const WebCore::Element *v19;
  WTF::StringImpl *result;
  _QWORD v21[8];

  {
    WebCore::RenderStyle::RenderStyle(&WebCore::RenderStyle::defaultStyle(void)::style);
  }
  LODWORD(v21[0]) = 0;
  v8 = qword_1ECE913C0;
  ++*(_DWORD *)qword_1ECE913C0;
  v9 = qword_1ECE913D0;
  v21[1] = v8;
  v21[2] = qword_1ECE913C8;
  ++*(_DWORD *)qword_1ECE913D0;
  v21[3] = v9;
  v10 = qword_1ECE913D8;
  ++*(_DWORD *)qword_1ECE913D8;
  v21[4] = v10;
  v21[5] = qword_1ECE913E0;
  v21[6] = 0;
  v11 = qword_1ECE913F0;
  ++*(_DWORD *)qword_1ECE913F0;
  v21[7] = v11;
  WebCore::RenderStyle::inheritFrom((WebCore::RenderStyle *)v21, a3, a3);
  v12 = bmalloc::api::isoAllocate();
  v13 = *((_BYTE *)this + 28);
  v14 = (_QWORD *)WebCore::RenderObject::RenderObject(v12, 29, (uint64_t)a2, 56, 0);
  *v14 = off_1E3422BC8;
  *(_QWORD *)(v12 + 64) = 0;
  *(_QWORD *)(v12 + 70) = 0;
  WebCore::RenderStyle::RenderStyle((uint64_t)(v14 + 10), v21);
  *(_QWORD *)(v12 + 144) = 0;
  *(_QWORD *)(v12 + 152) = 0;
  *(_QWORD *)(v12 + 160) = 0;
  *(_DWORD *)(v12 + 20) |= 0x40000u;
  *(_QWORD *)v12 = off_1E342ED70;
  *(_BYTE *)(v12 + 168) = v13;
  *(_DWORD *)(v12 + 172) = -1;
  v16 = (_DWORD *)*MEMORY[0x1E0CBF738];
  if (*MEMORY[0x1E0CBF738])
    *v16 += 2;
  *(_QWORD *)(v12 + 176) = v16;
  *(_BYTE *)(v12 + 184) = 0;
  WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v21, v15);
  result = WebCore::RenderElement::initializeStyle((WebCore::RenderElement *)v12, v17, v18, v19);
  *a4 = v12;
  return result;
}

_DWORD **WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::operator=(_DWORD **a1, _QWORD *a2)
{
  _DWORD *v3;
  _DWORD *v4;

  v3 = (_DWORD *)*a2;
  if (*a2)
    ++v3[2];
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    if (v4[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
    else
      --v4[2];
  }
  return a1;
}

uint64_t WebCore::FillLayer::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  WebCore::Length *v7;
  float v8;
  float v9;
  int v10;
  WebCore::Length *v11;
  float v12;
  float v13;
  int v14;
  uint64_t result;
  int v16;
  WebCore::Length *v17;
  float v18;
  float v19;
  int v20;
  WebCore::Length *v21;
  float v22;
  float v23;
  BOOL v24;

  while (1)
  {
    v4 = *(_QWORD *)(a1 + 16);
    v5 = *(_QWORD *)(a2 + 16);
    if (v4 != v5)
    {
      if (v4)
        v24 = v5 == 0;
      else
        v24 = 1;
      if (v24)
        return 0;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      if (!(_DWORD)result)
        return result;
    }
    v6 = *(unsigned __int8 *)(a1 + 28);
    if (v6 != *(unsigned __int8 *)(a2 + 28) || (*(_BYTE *)(a1 + 29) != 0) != (*(_BYTE *)(a2 + 29) != 0))
      return 0;
    if (v6 != 13)
    {
      v7 = (WebCore::Length *)(a1 + 24);
      if (v6 == 11)
      {
        if ((WebCore::Length::isCalculatedEqual(v7, (const WebCore::Length *)(a2 + 24)) & 1) == 0)
          return 0;
      }
      else
      {
        if (*(_BYTE *)(a1 + 30))
          v8 = *(float *)v7;
        else
          v8 = (float)*(int *)v7;
        v9 = *(float *)(a2 + 24);
        if (!*(_BYTE *)(a2 + 30))
          v9 = (float)SLODWORD(v9);
        if (v8 != v9)
          return 0;
      }
    }
    v10 = *(unsigned __int8 *)(a1 + 36);
    if (v10 != *(unsigned __int8 *)(a2 + 36) || (*(_BYTE *)(a1 + 37) != 0) != (*(_BYTE *)(a2 + 37) != 0))
      return 0;
    if (v10 != 13)
    {
      v11 = (WebCore::Length *)(a1 + 32);
      if (v10 == 11)
      {
        if ((WebCore::Length::isCalculatedEqual(v11, (const WebCore::Length *)(a2 + 32)) & 1) == 0)
          return 0;
      }
      else
      {
        if (*(_BYTE *)(a1 + 38))
          v12 = *(float *)v11;
        else
          v12 = (float)*(int *)v11;
        v13 = *(float *)(a2 + 32);
        if (!*(_BYTE *)(a2 + 38))
          v13 = (float)SLODWORD(v13);
        if (v12 != v13)
          return 0;
      }
    }
    v14 = *(_DWORD *)(a2 + 60) ^ *(_DWORD *)(a1 + 60);
    if ((v14 & 0xF0000) != 0 || v14 & 0x1F | (*(_WORD *)(a2 + 58) ^ *(_WORD *)(a1 + 58)) & 0x7FF)
      break;
    result = 0;
    if ((v14 & 0x60) != 0
      || ((*(_WORD *)(a2 + 58) ^ *(_WORD *)(a1 + 58)) & 0x1800) != 0
      || *(unsigned __int8 *)(a1 + 56) != *(unsigned __int8 *)(a2 + 56)
      || *(unsigned __int8 *)(a1 + 57) != *(unsigned __int8 *)(a2 + 57))
    {
      return result;
    }
    v16 = *(unsigned __int8 *)(a1 + 44);
    if (v16 != *(unsigned __int8 *)(a2 + 44) || (*(_BYTE *)(a1 + 45) != 0) != (*(_BYTE *)(a2 + 45) != 0))
      break;
    if (v16 != 13)
    {
      v17 = (WebCore::Length *)(a1 + 40);
      if (v16 == 11)
      {
        if ((WebCore::Length::isCalculatedEqual(v17, (const WebCore::Length *)(a2 + 40)) & 1) == 0)
          return 0;
      }
      else
      {
        if (*(_BYTE *)(a1 + 46))
          v18 = *(float *)v17;
        else
          v18 = (float)*(int *)v17;
        v19 = *(float *)(a2 + 40);
        if (!*(_BYTE *)(a2 + 46))
          v19 = (float)SLODWORD(v19);
        if (v18 != v19)
          return 0;
      }
    }
    v20 = *(unsigned __int8 *)(a1 + 52);
    if (v20 != *(unsigned __int8 *)(a2 + 52) || (*(_BYTE *)(a1 + 53) != 0) != (*(_BYTE *)(a2 + 53) != 0))
      return 0;
    if (v20 != 13)
    {
      v21 = (WebCore::Length *)(a1 + 48);
      if (v20 == 11)
      {
        if ((WebCore::Length::isCalculatedEqual(v21, (const WebCore::Length *)(a2 + 48)) & 1) == 0)
          return 0;
      }
      else
      {
        if (*(_BYTE *)(a1 + 54))
          v22 = *(float *)v21;
        else
          v22 = (float)*(int *)v21;
        v23 = *(float *)(a2 + 48);
        if (!*(_BYTE *)(a2 + 54))
          v23 = (float)SLODWORD(v23);
        if (v22 != v23)
          return 0;
      }
    }
    if (((*(_DWORD *)(a2 + 60) ^ *(_DWORD *)(a1 + 60)) & 0x800000) != 0)
      return 0;
    a1 = *(_QWORD *)(a1 + 8);
    a2 = *(_QWORD *)(a2 + 8);
    if (!a1 || !a2)
      return a1 == a2;
  }
  return 0;
}

int *WebCore::FillLayer::fillUnsetProperties(int *this)
{
  int *v1;
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  int *v10;
  int *v12;
  int *v13;
  int *v14;
  int *v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  int *v20;
  BOOL v21;
  int *v22;
  unsigned int v23;
  int *v24;
  BOOL v25;
  int *v26;
  unsigned int v27;
  int *v28;
  BOOL v29;
  int *v30;
  BOOL v31;
  int *v32;
  BOOL v33;
  int *v34;
  BOOL v35;
  int *v36;
  BOOL v37;
  int *v38;
  BOOL v39;
  int *v40;
  BOOL v41;

  if (this)
  {
    v1 = this;
    v2 = this;
    while ((*((_BYTE *)v2 + 61) & 0x10) != 0)
    {
      v2 = (int *)*((_QWORD *)v2 + 1);
      if (!v2)
        goto LABEL_5;
    }
    if (v2 != this)
    {
      v22 = this;
      do
      {
        this = (int *)WebCore::Length::operator=((WebCore::Length *)(v2 + 6), (unsigned __int8 *)v22 + 24);
        v23 = v22[15];
        if ((v23 & 0x4000) != 0)
        {
          v2[15] = v2[15] & 0xFFFCFFFF | ((HIWORD(v23) & 3) << 16);
          v23 = v22[15];
        }
        if ((v23 & 0x8000) != 0)
          v2[15] = v2[15] & 0xFFF3FFFF | (((v23 >> 18) & 3) << 18);
        v24 = (int *)*((_QWORD *)v22 + 1);
        if (v24)
          v25 = v24 == v2;
        else
          v25 = 1;
        if (v25)
          v22 = v1;
        else
          v22 = (int *)*((_QWORD *)v22 + 1);
        v2 = (int *)*((_QWORD *)v2 + 1);
      }
      while (v2);
    }
LABEL_5:
    v3 = v1;
    while ((*((_BYTE *)v3 + 61) & 0x20) != 0)
    {
      v3 = (int *)*((_QWORD *)v3 + 1);
      if (!v3)
        goto LABEL_8;
    }
    if (v3 != v1)
    {
      v26 = v1;
      do
      {
        this = (int *)WebCore::Length::operator=((WebCore::Length *)(v3 + 8), (unsigned __int8 *)v26 + 32);
        v27 = v26[15];
        if ((v27 & 0x4000) != 0)
        {
          v3[15] = v3[15] & 0xFFFCFFFF | ((HIWORD(v27) & 3) << 16);
          v27 = v26[15];
        }
        if ((v27 & 0x8000) != 0)
          v3[15] = v3[15] & 0xFFF3FFFF | (((v27 >> 18) & 3) << 18);
        v28 = (int *)*((_QWORD *)v26 + 1);
        if (v28)
          v29 = v28 == v3;
        else
          v29 = 1;
        if (v29)
          v26 = v1;
        else
          v26 = (int *)*((_QWORD *)v26 + 1);
        v3 = (int *)*((_QWORD *)v3 + 1);
      }
      while (v3);
    }
LABEL_8:
    v4 = v1;
    while ((*((_BYTE *)v4 + 61) & 1) != 0)
    {
      v4 = (int *)*((_QWORD *)v4 + 1);
      if (!v4)
        goto LABEL_11;
    }
    if (v4 != v1)
    {
      v30 = v1;
      do
      {
        *((_WORD *)v4 + 29) = *((_WORD *)v4 + 29) & 0xFFFC | *((_WORD *)v30 + 29) & 3;
        v30 = (int *)*((_QWORD *)v30 + 1);
        if (v30)
          v31 = v30 == v4;
        else
          v31 = 1;
        if (v31)
          v30 = v1;
        v4 = (int *)*((_QWORD *)v4 + 1);
      }
      while (v4);
    }
LABEL_11:
    v5 = v1;
    while ((*((_BYTE *)v5 + 61) & 2) != 0)
    {
      v5 = (int *)*((_QWORD *)v5 + 1);
      if (!v5)
        goto LABEL_14;
    }
    if (v5 != v1)
    {
      v32 = v1;
      do
      {
        *((_WORD *)v5 + 29) = *((_WORD *)v5 + 29) & 0xFFE3 | *((_WORD *)v32 + 29) & 0x1C;
        v32 = (int *)*((_QWORD *)v32 + 1);
        if (v32)
          v33 = v32 == v5;
        else
          v33 = 1;
        if (v33)
          v32 = v1;
        v5 = (int *)*((_QWORD *)v5 + 1);
      }
      while (v5);
    }
LABEL_14:
    v6 = v1;
    while ((*((_BYTE *)v6 + 62) & 0x10) != 0)
    {
      v6 = (int *)*((_QWORD *)v6 + 1);
      if (!v6)
        goto LABEL_17;
    }
    if (v6 != v1)
    {
      v34 = v1;
      do
      {
        *((_WORD *)v6 + 29) = *((_WORD *)v6 + 29) & 0xF87F | *((_WORD *)v34 + 29) & 0x780;
        v34 = (int *)*((_QWORD *)v34 + 1);
        if (v34)
          v35 = v34 == v6;
        else
          v35 = 1;
        if (v35)
          v34 = v1;
        v6 = (int *)*((_QWORD *)v6 + 1);
      }
      while (v6);
    }
LABEL_17:
    v7 = v1;
    while ((*((_BYTE *)v7 + 62) & 0x20) != 0)
    {
      v7 = (int *)*((_QWORD *)v7 + 1);
      if (!v7)
        goto LABEL_20;
    }
    if (v7 != v1)
    {
      v36 = v1;
      do
      {
        v7[15] = v7[15] & 0xFFFFFFE0 | v36[15] & 0x1F;
        v36 = (int *)*((_QWORD *)v36 + 1);
        if (v36)
          v37 = v36 == v7;
        else
          v37 = 1;
        if (v37)
          v36 = v1;
        v7 = (int *)*((_QWORD *)v7 + 1);
      }
      while (v7);
    }
LABEL_20:
    v8 = v1;
    while ((*((_BYTE *)v8 + 61) & 4) != 0)
    {
      v8 = (int *)*((_QWORD *)v8 + 1);
      if (!v8)
        goto LABEL_23;
    }
    if (v8 != v1)
    {
      v38 = v1;
      do
      {
        *((_WORD *)v8 + 29) = *((_WORD *)v8 + 29) & 0xFF9F | *((_WORD *)v38 + 29) & 0x60;
        v38 = (int *)*((_QWORD *)v38 + 1);
        if (v38)
          v39 = v38 == v8;
        else
          v39 = 1;
        if (v39)
          v38 = v1;
        v8 = (int *)*((_QWORD *)v8 + 1);
      }
      while (v8);
    }
LABEL_23:
    v9 = v1;
    while ((*((_BYTE *)v9 + 61) & 8) != 0)
    {
      v9 = (int *)*((_QWORD *)v9 + 1);
      if (!v9)
        goto LABEL_36;
    }
    if (v9 != v1)
    {
      v10 = v1;
      do
      {
        *((_WORD *)v9 + 28) = *((_WORD *)v10 + 28);
        v10 = (int *)*((_QWORD *)v10 + 1);
        if (v10 == v9 || v10 == 0)
          v10 = v1;
        v9 = (int *)*((_QWORD *)v9 + 1);
      }
      while (v9);
    }
LABEL_36:
    v12 = v1;
    while ((~*((unsigned __int16 *)v12 + 29) & 0x1800) != 0)
    {
      v12 = (int *)*((_QWORD *)v12 + 1);
      if (!v12)
        goto LABEL_39;
    }
    if (v12 != v1)
    {
      v14 = v1;
      do
      {
        *((_WORD *)v12 + 29) = *((_WORD *)v12 + 29) & 0xE7FF | *((_WORD *)v14 + 29) & 0x1800;
        if (v12 != v14)
        {
          v15 = v12 + 10;
          if (*((_BYTE *)v12 + 44) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v15);
            v15 = v12 + 10;
          }
          v16 = *((unsigned __int8 *)v14 + 44);
          *((_BYTE *)v12 + 44) = v16;
          *((_BYTE *)v12 + 45) = *((_BYTE *)v14 + 45);
          if (v16 <= 0xD)
          {
            v17 = 1 << v16;
            if ((v17 & 0x7FC) != 0)
            {
              *((_BYTE *)v12 + 46) = *((_BYTE *)v14 + 46);
              *v15 = v14[10];
            }
            else if ((v17 & 0x3003) != 0)
            {
              *v15 = 0;
            }
            else
            {
              *v15 = v14[10];
              WebCore::Length::ref(v15);
            }
          }
          this = v12 + 12;
          if (*((_BYTE *)v12 + 52) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*this);
            this = v12 + 12;
          }
          v18 = *((unsigned __int8 *)v14 + 52);
          *((_BYTE *)v12 + 52) = v18;
          *((_BYTE *)v12 + 53) = *((_BYTE *)v14 + 53);
          if (v18 <= 0xD)
          {
            v19 = 1 << v18;
            if ((v19 & 0x7FC) != 0)
            {
              *((_BYTE *)v12 + 54) = *((_BYTE *)v14 + 54);
              *this = v14[12];
            }
            else if ((v19 & 0x3003) != 0)
            {
              *this = 0;
            }
            else
            {
              *this = v14[12];
              this = WebCore::Length::ref(this);
            }
          }
        }
        v20 = (int *)*((_QWORD *)v14 + 1);
        if (v20)
          v21 = v20 == v12;
        else
          v21 = 1;
        if (v21)
          v14 = v1;
        else
          v14 = (int *)*((_QWORD *)v14 + 1);
        v12 = (int *)*((_QWORD *)v12 + 1);
      }
      while (v12);
    }
LABEL_39:
    v13 = v1;
    while ((*((_BYTE *)v13 + 62) & 0x40) != 0)
    {
      v13 = (int *)*((_QWORD *)v13 + 1);
      if (!v13)
        return this;
    }
    if (v13 != v1)
    {
      v40 = v1;
      do
      {
        v13[15] = v13[15] & 0xFFFFFF9F | (32 * ((v40[15] >> 5) & 3));
        v40 = (int *)*((_QWORD *)v40 + 1);
        if (v40)
          v41 = v40 == v13;
        else
          v41 = 1;
        if (v41)
          v40 = v1;
        v13 = (int *)*((_QWORD *)v13 + 1);
      }
      while (v13);
    }
  }
  return this;
}

uint64_t WebCore::FillLayer::hasOpaqueImage(WebCore::FillLayer *this, const WebCore::RenderElement *a2)
{
  uint64_t result;
  unsigned int v4;
  int v5;

  result = *((_QWORD *)this + 2);
  if (result)
  {
    v4 = (*((unsigned __int16 *)this + 29) >> 7) & 0xF;
    if (v4 < 2)
    {
      return 1;
    }
    else
    {
      v5 = *((_DWORD *)this + 15) & 0x1F;
      if (v4 == 2 && v5 == 1)
        return (*(uint64_t (**)(uint64_t, const WebCore::RenderElement *))(*(_QWORD *)result + 224))(result, a2);
      else
        return 0;
    }
  }
  return result;
}

BOOL WebCore::FillLayer::hasImageInAnyLayer(WebCore::FillLayer *this)
{
  uint64_t v1;
  _BOOL8 v2;

  if (!this)
    return 0;
  do
  {
    v1 = *((_QWORD *)this + 2);
    v2 = v1 != 0;
    if (v1)
      break;
    this = (WebCore::FillLayer *)*((_QWORD *)this + 1);
  }
  while (this);
  return v2;
}

uint64_t WebCore::RectangleShape::shapeMarginLogicalBoundingBox(WebCore::RectangleShape *this)
{
  float v1;
  float v2;
  float v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  unint64_t v9;

  v1 = *((float *)this + 4);
  v2 = *((float *)this + 5);
  if (v1 == 0.0)
  {
    v3 = *((float *)this + 6);
  }
  else
  {
    v2 = v2 - v1;
    v3 = *((float *)this + 6) - v1;
  }
  v4 = v2 * 64.0;
  v5 = 0x7FFFFFFFLL;
  v6 = 0x80000000;
  if (v4 > -2147483650.0)
    v6 = (int)v4;
  if (v4 < 2147483650.0)
    v5 = v6;
  v7 = v3 * 64.0;
  v8 = 0x7FFFFFFF00000000;
  v9 = 0x8000000000000000;
  if (v7 > -2147483650.0)
    v9 = (unint64_t)(int)v7 << 32;
  if (v7 < 2147483650.0)
    v8 = v9;
  return v8 | v5;
}

BOOL WebCore::RectangleShape::isEmpty(WebCore::RectangleShape *this)
{
  return *((float *)this + 7) <= 0.0 || *((float *)this + 8) <= 0.0;
}

void WebCore::BasicShapeCircle::~BasicShapeCircle(WebCore::BasicShapeCircle *this)
{
  if (*((_BYTE *)this + 60) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 14));
  }
  if (*((_BYTE *)this + 52) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 12));
  }
  if (*((_BYTE *)this + 44) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 10));
  }
  if (*((_BYTE *)this + 32) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 7));
  }
  if (*((_BYTE *)this + 24) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 5));
  }
}

void WebCore::BasicShapeCircle::~BasicShapeCircle(WebCore::BasicShapeCircle *this, void *a2)
{
  if (*((_BYTE *)this + 60) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 14));
  }
  if (*((_BYTE *)this + 52) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 12));
  }
  if (*((_BYTE *)this + 44) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 10));
  }
  if (*((_BYTE *)this + 32) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 7));
  }
  if (*((_BYTE *)this + 24) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 5));
  }
  WTF::fastFree(this, a2);
}

uint64_t WebCore::BasicShape::windRule(WebCore::BasicShape *this)
{
  return 0;
}

void WebCore::BasicShapeEllipse::~BasicShapeEllipse(WebCore::BasicShapeEllipse *this)
{
  if (*((_BYTE *)this + 72) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 17));
  }
  if (*((_BYTE *)this + 60) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 14));
  }
  if (*((_BYTE *)this + 52) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 12));
  }
  if (*((_BYTE *)this + 44) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 10));
  }
  if (*((_BYTE *)this + 32) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 7));
  }
  if (*((_BYTE *)this + 24) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 5));
  }
}

void WebCore::BasicShapeEllipse::~BasicShapeEllipse(WebCore::BasicShapeEllipse *this, void *a2)
{
  if (*((_BYTE *)this + 72) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 17));
  }
  if (*((_BYTE *)this + 60) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 14));
  }
  if (*((_BYTE *)this + 52) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 12));
  }
  if (*((_BYTE *)this + 44) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 10));
  }
  if (*((_BYTE *)this + 32) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 7));
  }
  if (*((_BYTE *)this + 24) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 5));
  }
  WTF::fastFree(this, a2);
}

void WebCore::BasicShapePolygon::~BasicShapePolygon(WebCore::BasicShapePolygon *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  _BYTE *v5;
  uint64_t v6;

  v3 = *((unsigned int *)this + 7);
  v4 = (WTF *)*((_QWORD *)this + 2);
  if ((_DWORD)v3)
  {
    v5 = (char *)v4 + 4;
    v6 = 8 * v3;
    do
    {
      if (*v5 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v5 - 1));
      }
      v5 += 8;
      v6 -= 8;
    }
    while (v6);
    v4 = (WTF *)*((_QWORD *)this + 2);
  }
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
}

{
  uint64_t v3;
  WTF *v4;
  _BYTE *v5;
  uint64_t v6;

  v3 = *((unsigned int *)this + 7);
  v4 = (WTF *)*((_QWORD *)this + 2);
  if ((_DWORD)v3)
  {
    v5 = (char *)v4 + 4;
    v6 = 8 * v3;
    do
    {
      if (*v5 == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)v5 - 1));
      }
      v5 += 8;
      v6 -= 8;
    }
    while (v6);
    v4 = (WTF *)*((_QWORD *)this + 2);
  }
  if (v4)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v4, a2);
  }
  WTF::fastFree(this, a2);
}

void WebCore::BasicShapeInset::~BasicShapeInset(WebCore::BasicShapeInset *this)
{
  WTF *v1;
  void *v2;

  WebCore::BasicShapeInset::~BasicShapeInset(this);
  WTF::fastFree(v1, v2);
}

{
  if (*((_BYTE *)this + 104) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 25));
  }
  if (*((_BYTE *)this + 96) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 23));
  }
  if (*((_BYTE *)this + 88) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 21));
  }
  if (*((_BYTE *)this + 80) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 19));
  }
  if (*((_BYTE *)this + 72) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 17));
  }
  if (*((_BYTE *)this + 64) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 15));
  }
  if (*((_BYTE *)this + 56) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 13));
  }
  if (*((_BYTE *)this + 48) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 11));
  }
  if (*((_BYTE *)this + 40) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 9));
  }
  if (*((_BYTE *)this + 32) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 7));
  }
  if (*((_BYTE *)this + 24) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 5));
  }
  if (*((_BYTE *)this + 16) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 3));
  }
}

void WebCore::BasicShapeRect::~BasicShapeRect(WebCore::BasicShapeRect *this)
{
  WTF *v1;
  void *v2;

  WebCore::BasicShapeInset::~BasicShapeInset(this);
  WTF::fastFree(v1, v2);
}

void WebCore::BasicShapeXywh::~BasicShapeXywh(WebCore::BasicShapeXywh *this)
{
  WTF *v1;
  void *v2;

  WebCore::BasicShapeInset::~BasicShapeInset(this);
  WTF::fastFree(v1, v2);
}

void WebCore::BasicShapePath::~BasicShapePath(WebCore::BasicShapePath *this)
{
  _QWORD *v1;
  WTF *v2;
  WTF *v3;

  v3 = (WTF *)*((_QWORD *)this + 2);
  v1 = (_QWORD *)((char *)this + 16);
  v2 = v3;
  *v1 = 0;
  if (v3)
    std::default_delete<WebCore::SVGPathByteStream>::operator()[abi:sn180100]((int)v1, v2);
}

{
  _QWORD *v2;
  WTF *v3;
  WTF *v4;

  v4 = (WTF *)*((_QWORD *)this + 2);
  v2 = (_QWORD *)((char *)this + 16);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<WebCore::SVGPathByteStream>::operator()[abi:sn180100]((int)v2, v3);
  WTF::fastFree(this, v3);
}

void WebCore::ImageContentData::~ImageContentData(WebCore::ImageContentData *this, WTF::StringImpl *a2)
{
  _DWORD *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  *(_QWORD *)this = off_1E3441738;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

{
  _DWORD *v3;
  WTF::StringImpl *v4;
  uint64_t v5;

  v3 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    if (v3[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    else
      --v3[2];
  }
  *(_QWORD *)this = off_1E3441738;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::ImageContentData::cloneInternal@<X0>(WebCore::ImageContentData *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  _DWORD *v6;

  v4 = *((_QWORD *)this + 4);
  ++*(_DWORD *)(v4 + 8);
  result = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 1;
  *(_QWORD *)result = off_1E34419B8;
  *(_QWORD *)(result + 32) = v4;
  v6 = (_DWORD *)*((_QWORD *)this + 2);
  if (v6)
    *v6 += 2;
  *(_QWORD *)(result + 16) = v6;
  *a2 = result;
  return result;
}

void WebCore::CounterContentData::~CounterContentData(WTF::StringImpl **this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  std::unique_ptr<WebCore::CounterContent>::reset[abi:sn180100](this + 4, 0);
  *this = (WTF::StringImpl *)off_1E3441738;
  v3 = this[2];
  this[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = this[1];
  this[1] = 0;
  if (v4)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v4 + 8))(v4);
}

{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  std::unique_ptr<WebCore::CounterContent>::reset[abi:sn180100](this + 4, 0);
  *this = (WTF::StringImpl *)off_1E3441738;
  v3 = this[2];
  this[2] = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = this[1];
  this[1] = 0;
  if (v4)
    (*(void (**)(WTF::StringImpl *))(*(_QWORD *)v4 + 8))(v4);
  WTF::fastFree((WTF *)this, v2);
}

uint64_t WebCore::CounterContentData::cloneInternal@<X0>(WebCore::CounterContentData *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t result;

  v3 = *((_QWORD *)this + 4);
  v4 = WTF::fastMalloc((WTF *)0x20);
  v5 = v4;
  v6 = *(_DWORD **)v3;
  if (*(_QWORD *)v3)
    *v6 += 2;
  *(_QWORD *)v4 = v6;
  *(_BYTE *)(v4 + 8) = *(_BYTE *)(v3 + 8);
  v7 = *(_DWORD **)(v3 + 16);
  if (v7)
    *v7 += 2;
  *(_QWORD *)(v4 + 16) = v7;
  v8 = *(_DWORD **)(v3 + 24);
  if (v8)
    *v8 += 2;
  *(_QWORD *)(v4 + 24) = v8;
  result = WTF::fastMalloc((WTF *)0x28);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)result = off_1E3441A18;
  *(_QWORD *)(result + 32) = v5;
  *a2 = result;
  return result;
}

void WebCore::QuoteContentData::~QuoteContentData(WebCore::QuoteContentData *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E3441738;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

{
  WTF::StringImpl *v3;
  uint64_t v4;

  *(_QWORD *)this = off_1E3441738;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  WTF::fastFree(this, a2);
}

uint64_t WebCore::QuoteContentData::cloneInternal@<X0>(WebCore::QuoteContentData *this@<X0>, _QWORD *a2@<X8>)
{
  char v3;
  uint64_t result;

  v3 = *((_BYTE *)this + 28);
  result = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 2;
  *(_QWORD *)result = off_1E3441A48;
  *(_BYTE *)(result + 28) = v3;
  *a2 = result;
  return result;
}

char *WTF::TinyLRUCache<WebCore::FloatRect,WebCore::Path,4ul,WebCore::EllipsePathPolicy>::get(__n128 *a1)
{
  float v1;
  float v3;
  char *v4;
  uint64_t v5;
  unint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  char *result;
  unint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _DWORD *v26;
  char *v27;
  char *v28;
  char *v29;
  _BYTE v30[56];
  unsigned int v31;
  __int128 v32;
  _BYTE v33[56];
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v1 = a1->n128_f32[2];
  if (v1 <= 0.0 || (v3 = a1->n128_f32[3], v3 <= 0.0))
  {
    result = (char *)&unk_1ECE84300;
    if ((byte_1ECE842E0 & 1) == 0)
    {
      byte_1ECE84308 = 0;
      result = (char *)&unk_1ECE84300;
      dword_1ECE84340 = 0;
      byte_1ECE842E0 = 1;
    }
    return result;
  }
  if (!qword_1ECE84580)
    goto LABEL_26;
  v4 = &_MergedGlobals_254[88 * qword_1ECE84580 + 240];
  v5 = 1 - qword_1ECE84580;
  while (*(float *)v4 != a1->n128_f32[0]
       || *((float *)v4 + 1) != a1->n128_f32[1]
       || *((float *)v4 + 2) != v1
       || *((float *)v4 + 3) != v3)
  {
    v4 -= 88;
    if (++v5 == 1)
    {
      if (qword_1ECE84580 == 4)
      {
        v8 = 0;
        v9 = (unsigned int *)&xmmword_1ECE844C0 + 2;
        while (1)
        {
          *(_OWORD *)(v9 - 42) = *((_OWORD *)v9 - 5);
          v10 = *(v9 - 22);
          v11 = *v9;
          if ((_DWORD)v10 == -1)
          {
            if ((_DWORD)v11 != -1)
            {
LABEL_21:
              *(_QWORD *)&v32 = v9 - 36;
              ((void (*)(__int128 *))off_1E3441710[v11])(&v32);
            }
          }
          else
          {
            if ((_DWORD)v11 != -1)
              goto LABEL_21;
            ((void (*)(__int128 *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_10[v10])(&v32, v9 - 36);
            *(v9 - 22) = -1;
          }
          ++v8;
          v9 += 22;
          if (v8 >= qword_1ECE84580 - 1)
          {
            v1 = a1->n128_f32[2];
            v3 = a1->n128_f32[3];
            goto LABEL_27;
          }
        }
      }
LABEL_26:
      ++qword_1ECE84580;
LABEL_27:
      v31 = 0;
      v13 = a1->n128_u64[0];
      v14 = WebCore::Path::addEllipseInRect((WebCore::Path *)&v29, a1);
      *(_QWORD *)&v32 = v13;
      *((_QWORD *)&v32 + 1) = __PAIR64__(LODWORD(v3), LODWORD(v1));
      v33[0] = 0;
      v34 = -1;
      v15 = v31;
      if (v31 != -1)
      {
        ((void (*)(char **, _BYTE *, _BYTE *, __n128))off_1E34416F8[v31])(&v28, v33, v30, v14);
        v34 = v15;
      }
      v16 = (char *)&xmmword_1ECE84420 + 88 * qword_1ECE84580;
      v19 = *((_DWORD *)v16 - 2);
      v18 = v16 - 8;
      v17 = v19;
      *((_OWORD *)v18 - 5) = v32;
      if (v19 == -1)
      {
        if ((_DWORD)v15 == -1)
          goto LABEL_48;
      }
      else if ((_DWORD)v15 == -1)
      {
        ((void (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_10[v17])(&v28, v18 - 56);
        *(_DWORD *)v18 = -1;
LABEL_46:
        if (v34 != -1)
          ((void (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_10[v34])(&v28, v33);
LABEL_48:
        v34 = -1;
        if (v31 != -1)
          ((void (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_10[v31])(&v28, v30);
        v27 = (char *)&xmmword_1ECE84420 + 88 * qword_1ECE84580;
        return v27 - 72;
      }
      v28 = v18 - 56;
      ((void (*)(char **))off_1E3441710[v15])(&v28);
      goto LABEL_46;
    }
  }
  v20 = -v5;
  if (-v5 >= (unint64_t)(qword_1ECE84580 - 1))
    return &_MergedGlobals_254[88 * qword_1ECE84580 + 256];
  v32 = *(_OWORD *)v4;
  v33[0] = 0;
  v34 = -1;
  v21 = *((unsigned int *)v4 + 20);
  if ((_DWORD)v21 != -1)
  {
    ((void (*)(char **, _BYTE *, char *))off_1E34416F8[v21])(&v29, v33, v4 + 24);
    v34 = v21;
  }
  do
  {
    *(_OWORD *)v4 = *(_OWORD *)(v4 + 88);
    v22 = *((unsigned int *)v4 + 20);
    v23 = *((unsigned int *)v4 + 42);
    if ((_DWORD)v22 == -1)
    {
      if ((_DWORD)v23 == -1)
        goto LABEL_40;
    }
    else if ((_DWORD)v23 == -1)
    {
      ((void (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_10[v22])(&v29, v4 + 24);
      *((_DWORD *)v4 + 20) = -1;
      goto LABEL_40;
    }
    v29 = v4 + 24;
    ((void (*)(char **))off_1E3441710[v23])(&v29);
LABEL_40:
    ++v20;
    v4 += 88;
  }
  while (v20 < qword_1ECE84580 - 1);
  v24 = &_MergedGlobals_254[88 * qword_1ECE84580 - 88];
  *(_OWORD *)(v24 + 328) = v32;
  v25 = *((unsigned int *)v24 + 102);
  if ((_DWORD)v25 == -1)
  {
    if (v34 == -1)
      goto LABEL_58;
LABEL_55:
    v29 = v24 + 352;
    ((void (*)(char **))off_1E3441710[v34])(&v29);
    goto LABEL_56;
  }
  if (v34 != -1)
    goto LABEL_55;
  v26 = v24 + 408;
  ((void (*)(char **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_10[v25])(&v29, v24 + 352);
  *v26 = -1;
LABEL_56:
  if (v34 != -1)
    ((void (*)(char **, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_10[v34])(&v29, v33);
LABEL_58:
  v27 = (char *)&xmmword_1ECE84420 + 88 * qword_1ECE84580;
  return v27 - 72;
}

char *WTF::TinyLRUCache<WebCore::FloatRoundedRect,WebCore::Path,4ul,WebCore::RoundedRectPathPolicy>::get(uint64_t a1)
{
  char *result;
  unint64_t v3;
  char *v4;
  _BOOL4 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  __int128 *v12;
  __int128 *v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char v18;
  char v19[8];
  _BYTE v20[56];
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[56];
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (*(float *)(a1 + 8) > 0.0 && *(float *)(a1 + 12) > 0.0)
  {
    v3 = qword_1ECE848D0;
    v4 = &_MergedGlobals_254[120 * qword_1ECE848D0 + 1160];
    do
    {
      if (!v3)
      {
        if (qword_1ECE848D0 == 4)
        {
          v11 = 0;
          v12 = &xmmword_1ECE846F0;
          do
          {
            ++v11;
            v13 = (__int128 *)((char *)v12 + 120);
            std::pair<WebCore::FloatRoundedRect,WebCore::Path>::operator=[abi:sn180100]((uint64_t)v12, (__int128 *)((char *)v12 + 120));
            v12 = v13;
          }
          while (v11 < qword_1ECE848D0 - 1);
        }
        else
        {
          ++qword_1ECE848D0;
        }
        v15 = *(_OWORD *)a1;
        v16 = *(_OWORD *)(a1 + 16);
        v17 = *(_OWORD *)(a1 + 32);
        v21 = 0;
        WebCore::Path::addRoundedRect((WebCore::Path *)v19, (WebCore::FloatRect *)a1, 1);
        v22 = v15;
        v23 = v16;
        v24 = v17;
        v25[0] = 0;
        v26 = -1;
        v14 = v21;
        if (v21 != -1)
        {
          ((void (*)(char *, _BYTE *, _BYTE *))off_1E34416F8[v21])(&v18, v25, v20);
          v26 = v14;
        }
        std::pair<WebCore::FloatRoundedRect,WebCore::Path>::operator=[abi:sn180100]((uint64_t)&xmmword_1ECE846F0 + 120 * qword_1ECE848D0 - 120, &v22);
        if (v26 != -1)
          ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_10[v26])(&v18, v25);
        v26 = -1;
        if (v21 != -1)
          ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_10[v21])(&v18, v20);
        v10 = (char *)&xmmword_1ECE846F0 + 120 * qword_1ECE848D0;
        return v10 - 72;
      }
      --v3;
      v5 = WebCore::operator==((float *)v4 - 58, (float *)a1);
      v4 -= 120;
    }
    while (!v5);
    if (v3 < qword_1ECE848D0 - 1)
    {
      v6 = *((_OWORD *)v4 - 6);
      v22 = *((_OWORD *)v4 - 7);
      v23 = v6;
      v24 = *((_OWORD *)v4 - 5);
      v25[0] = 0;
      v26 = -1;
      v7 = *(unsigned int *)v4;
      if ((_DWORD)v7 != -1)
      {
        ((void (*)(char *, _BYTE *, char *))off_1E34416F8[v7])(v19, v25, v4 - 56);
        v26 = v7;
      }
      v8 = (uint64_t)(v4 - 112);
      do
      {
        ++v3;
        v9 = v8 + 120;
        std::pair<WebCore::FloatRoundedRect,WebCore::Path>::operator=[abi:sn180100](v8, (__int128 *)(v8 + 120));
        v8 = v9;
      }
      while (v3 < qword_1ECE848D0 - 1);
      std::pair<WebCore::FloatRoundedRect,WebCore::Path>::operator=[abi:sn180100]((uint64_t)&_MergedGlobals_254[120 * qword_1ECE848D0 + 928], &v22);
      if (v26 != -1)
        ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_10[v26])(v19, v25);
      v10 = (char *)&xmmword_1ECE846F0 + 120 * qword_1ECE848D0;
      return v10 - 72;
    }
    return &_MergedGlobals_254[120 * qword_1ECE848D0 + 976];
  }
  else
  {
    result = &algn_1ECE84344[4];
    if ((byte_1ECE842E8 & 1) == 0)
    {
      byte_1ECE84350 = 0;
      result = &algn_1ECE84344[4];
      dword_1ECE84388 = 0;
      byte_1ECE842E8 = 1;
    }
  }
  return result;
}

uint64_t std::pair<WebCore::FloatRoundedRect,WebCore::Path>::operator=[abi:sn180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;

  v3 = *a2;
  v4 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)a1 = v3;
  v5 = *(unsigned int *)(a1 + 112);
  v6 = *((unsigned int *)a2 + 28);
  if ((_DWORD)v5 == -1)
  {
    if ((_DWORD)v6 == -1)
      return a1;
LABEL_5:
    v8 = a1 + 56;
    ((void (*)(uint64_t *))off_1E3441710[v6])(&v8);
    return a1;
  }
  if ((_DWORD)v6 != -1)
    goto LABEL_5;
  ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_10[v5])(&v9, a1 + 56);
  *(_DWORD *)(a1 + 112) = -1;
  return a1;
}

_BYTE *WTF::TinyLRUCache<WebCore::SVGPathTransformedByteStream,WebCore::Path,4ul,WebCore::TransformedByteStreamPathPolicy>::get(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  size_t v3;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  int v18;
  int v19;
  void *v20;
  WTF *v21;
  WTF *v22;
  _BYTE *result;
  unint64_t v24;
  int v25;
  WTF *v26;
  uint64_t v27;
  unint64_t v28;
  WTF *v29;
  WTF *v30;
  WTF *v31;
  uint64_t v32;
  WTF *v33;
  uint64_t v34;
  WTF *v35;
  WTF *v36;
  int v37;
  char v38;
  char v39[8];
  _BYTE v40[56];
  int v41;
  WTF *v42[2];
  double v43;
  double v44;
  float64x2_t v45;
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(unsigned int *)(v2 + 20);
  if ((_DWORD)v3)
  {
    v6 = *(_QWORD *)(a1 + 416);
    if (v6)
    {
      v7 = *(float *)(a2 + 16);
      v8 = *(float *)(a2 + 20);
      v9 = *(float *)(a2 + 24);
      v10 = a1 + 104 * v6;
      v11 = 1 - v6;
      while (1)
      {
        v12 = *(_QWORD *)(v10 - 96);
        if ((v12 == v2
           || *(_DWORD *)(v12 + 20) == (_DWORD)v3 && !memcmp(*(const void **)(v12 + 8), *(const void **)(v2 + 8), v3))
          && *(float *)(v10 - 88) == v7
          && *(float *)(v10 - 84) == v8
          && *(float *)(v10 - 80) == v9)
        {
          break;
        }
        v10 -= 104;
        if (++v11 == 1)
        {
          if (v6 != 4)
            goto LABEL_17;
          v14 = 0;
          v15 = a1;
          do
          {
            ++v14;
            v16 = v15 + 104;
            std::pair<WebCore::SVGPathTransformedByteStream,WebCore::Path>::operator=[abi:sn180100](v15, v15 + 104);
            v15 = v16;
          }
          while (v14 < *(_QWORD *)(a1 + 416) - 1);
          v2 = *(_QWORD *)(a2 + 8);
          goto LABEL_18;
        }
      }
      v24 = -v11;
      if (-v11 >= (unint64_t)(v6 - 1))
        return (_BYTE *)(a1 + 104 * (v6 - 1) + 32);
      v42[0] = 0;
      {
        v25 = WebCore::SVGPathByteStream::Data::empty(void)::singleton + 1;
      }
      else
      {
        xmmword_1EE2DFB60 = 0u;
        unk_1EE2DFB70 = 0u;
        xmmword_1EE2DFB40 = 0u;
        unk_1EE2DFB50 = 0u;
        WebCore::SVGPathByteStream::Data::empty(void)::singleton = 0u;
        *(_OWORD *)&dword_1EE2DFB30 = 0u;
        v12 = *(_QWORD *)(v10 - 96);
        v25 = 2;
      }
      LODWORD(WebCore::SVGPathByteStream::Data::empty(void)::singleton) = v25;
      *(_QWORD *)(v10 - 96) = &WebCore::SVGPathByteStream::Data::empty(void)::singleton;
      v26 = *(WTF **)(v10 - 88);
      v42[1] = (WTF *)v12;
      v43 = *(double *)&v26;
      LODWORD(v44) = *(_DWORD *)(v10 - 80);
      LOBYTE(v45.f64[1]) = 0;
      v46 = -1;
      v27 = *(unsigned int *)(v10 - 8);
      if ((_DWORD)v27 != -1)
      {
        ((void (*)(char *, float64_t *, uint64_t))off_1E34416F8[v27])(v39, &v45.f64[1], v10 - 64);
        v46 = v27;
      }
      do
      {
        ++v24;
        std::pair<WebCore::SVGPathTransformedByteStream,WebCore::Path>::operator=[abi:sn180100](v10 - 104, v10);
        v28 = *(_QWORD *)(a1 + 416) - 1;
        v10 += 104;
      }
      while (v24 < v28);
      std::pair<WebCore::SVGPathTransformedByteStream,WebCore::Path>::operator=[abi:sn180100](a1 + 104 * v28, (uint64_t)v42);
      if (v46 != -1)
        ((void (*)(char *, float64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_10[v46])(v39, &v45.f64[1]);
      v46 = -1;
      v29 = v42[1];
      v42[1] = 0;
      if (v29)
      {
        if (*(_DWORD *)v29 == 1)
        {
          v34 = *((unsigned int *)v29 + 22);
          if ((_DWORD)v34 != -1)
            ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_10[v34])(v39, (char *)v29 + 32);
          *((_DWORD *)v29 + 22) = -1;
          v35 = (WTF *)*((_QWORD *)v29 + 1);
          if (v35)
          {
            *((_QWORD *)v29 + 1) = 0;
            *((_DWORD *)v29 + 4) = 0;
            WTF::fastFree(v35, v20);
          }
          WTF::fastFree(v29, v20);
        }
        else
        {
          --*(_DWORD *)v29;
        }
      }
      v30 = v42[0];
      if (v42[0])
      {
        *((_QWORD *)v42[0] + 1) = 0;
        v42[0] = 0;
        if (*(_DWORD *)v30 == 1)
          goto LABEL_59;
        --*(_DWORD *)v30;
      }
    }
    else
    {
LABEL_17:
      *(_QWORD *)(a1 + 416) = v6 + 1;
LABEL_18:
      ++*(_DWORD *)v2;
      v36 = *(WTF **)(a2 + 16);
      v37 = *(_DWORD *)(a2 + 24);
      WebCore::buildPathFromByteStream((WebCore *)a2, (const WebCore::SVGPathByteStream *)a2, (uint64_t)v39);
      v17 = *(float *)(a2 + 16);
      if (v17 != 1.0)
      {
        v45 = (float64x2_t)xmmword_1969FDC60;
        *(double *)v42 = v17;
        *(double *)&v42[1] = v17 * 0.0;
        v43 = *(double *)&v42[1];
        v44 = v17;
        WebCore::Path::transform((WebCore::Path *)v39, (float64x2_t *)v42);
      }
      v42[0] = (WTF *)0x3FF0000000000000;
      v42[1] = 0;
      v43 = 0.0;
      v44 = 1.0;
      v45 = vcvtq_f64_f32(*(float32x2_t *)(a2 + 20));
      WebCore::Path::transform((WebCore::Path *)v39, (float64x2_t *)v42);
      v42[0] = 0;
      {
        v18 = WebCore::SVGPathByteStream::Data::empty(void)::singleton + 1;
      }
      else
      {
        xmmword_1EE2DFB60 = 0u;
        unk_1EE2DFB70 = 0u;
        xmmword_1EE2DFB40 = 0u;
        unk_1EE2DFB50 = 0u;
        WebCore::SVGPathByteStream::Data::empty(void)::singleton = 0u;
        *(_OWORD *)&dword_1EE2DFB30 = 0u;
        v18 = 2;
      }
      LODWORD(WebCore::SVGPathByteStream::Data::empty(void)::singleton) = v18;
      v42[1] = (WTF *)v2;
      v43 = *(double *)&v36;
      LODWORD(v44) = v37;
      LOBYTE(v45.f64[1]) = 0;
      v46 = -1;
      v19 = v41;
      if (v41 != -1)
      {
        ((void (*)(char *, float64_t *, _BYTE *))off_1E34416F8[v41])(&v38, &v45.f64[1], v40);
        v46 = v19;
      }
      std::pair<WebCore::SVGPathTransformedByteStream,WebCore::Path>::operator=[abi:sn180100](a1 + 104 * *(_QWORD *)(a1 + 416) - 104, (uint64_t)v42);
      if (v46 != -1)
        ((void (*)(char *, float64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_10[v46])(&v38, &v45.f64[1]);
      v46 = -1;
      v21 = v42[1];
      v42[1] = 0;
      if (v21)
      {
        if (*(_DWORD *)v21 == 1)
        {
          v32 = *((unsigned int *)v21 + 22);
          if ((_DWORD)v32 != -1)
            ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_10[v32])(&v38, (char *)v21 + 32);
          *((_DWORD *)v21 + 22) = -1;
          v33 = (WTF *)*((_QWORD *)v21 + 1);
          if (v33)
          {
            *((_QWORD *)v21 + 1) = 0;
            *((_DWORD *)v21 + 4) = 0;
            WTF::fastFree(v33, v20);
          }
          WTF::fastFree(v21, v20);
        }
        else
        {
          --*(_DWORD *)v21;
        }
      }
      v22 = v42[0];
      if (v42[0])
      {
        *((_QWORD *)v42[0] + 1) = 0;
        v42[0] = 0;
        if (*(_DWORD *)v22 == 1)
          WTF::fastFree(v22, v20);
        else
          --*(_DWORD *)v22;
      }
      else
      {
        v42[0] = 0;
      }
      if (v41 != -1)
        ((void (*)(char *, _BYTE *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_10[v41])(&v38, v40);
      if ((_DWORD)WebCore::SVGPathByteStream::Data::empty(void)::singleton == 1)
      {
        if (dword_1EE2DFB78 != -1)
          ((void (*)(char *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_10[dword_1EE2DFB78])(v39, &xmmword_1EE2DFB40);
        dword_1EE2DFB78 = -1;
        v31 = (WTF *)*((_QWORD *)&WebCore::SVGPathByteStream::Data::empty(void)::singleton + 1);
        if (*((_QWORD *)&WebCore::SVGPathByteStream::Data::empty(void)::singleton + 1))
        {
          *((_QWORD *)&WebCore::SVGPathByteStream::Data::empty(void)::singleton + 1) = 0;
          dword_1EE2DFB30 = 0;
          WTF::fastFree(v31, v20);
        }
        v30 = (WTF *)&WebCore::SVGPathByteStream::Data::empty(void)::singleton;
LABEL_59:
        WTF::fastFree(v30, v20);
      }
      else
      {
        LODWORD(WebCore::SVGPathByteStream::Data::empty(void)::singleton) = WebCore::SVGPathByteStream::Data::empty(void)::singleton
                                                                          - 1;
      }
    }
    return (_BYTE *)(a1 + 104 * *(_QWORD *)(a1 + 416) - 72);
  }
  else
  {
    result = &algn_1ECE843D4[4];
    if ((byte_1ECE842F8 & 1) == 0)
    {
      byte_1ECE843E0 = 0;
      result = &algn_1ECE843D4[4];
      dword_1ECE84418 = 0;
      byte_1ECE842F8 = 1;
    }
  }
  return result;
}

uint64_t std::pair<WebCore::SVGPathTransformedByteStream,WebCore::Path>::operator=[abi:sn180100](uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  WTF *v12;
  char v13;
  uint64_t v14;
  char v15;

  if (a1 != a2)
  {
    {
      v4 = WebCore::SVGPathByteStream::Data::empty(void)::singleton + 1;
    }
    else
    {
      xmmword_1EE2DFB60 = 0u;
      unk_1EE2DFB70 = 0u;
      xmmword_1EE2DFB40 = 0u;
      unk_1EE2DFB50 = 0u;
      WebCore::SVGPathByteStream::Data::empty(void)::singleton = 0u;
      *(_OWORD *)&dword_1EE2DFB30 = 0u;
      v4 = 2;
    }
    LODWORD(WebCore::SVGPathByteStream::Data::empty(void)::singleton) = v4;
    v5 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = &WebCore::SVGPathByteStream::Data::empty(void)::singleton;
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v5;
    if (v6)
    {
      if (*(_DWORD *)v6 == 1)
      {
        v11 = *(unsigned int *)(v6 + 88);
        if ((_DWORD)v11 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_10[v11])(&v13, v6 + 32);
        *(_DWORD *)(v6 + 88) = -1;
        v12 = *(WTF **)(v6 + 8);
        if (v12)
        {
          *(_QWORD *)(v6 + 8) = 0;
          *(_DWORD *)(v6 + 16) = 0;
          WTF::fastFree(v12, (void *)a2);
        }
        WTF::fastFree((WTF *)v6, (void *)a2);
      }
      else
      {
        --*(_DWORD *)v6;
      }
    }
  }
  v7 = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  v8 = *(unsigned int *)(a1 + 96);
  v9 = *(unsigned int *)(a2 + 96);
  if ((_DWORD)v8 == -1)
  {
    if ((_DWORD)v9 == -1)
      return a1;
LABEL_11:
    v14 = a1 + 40;
    ((void (*)(uint64_t *))off_1E3441710[v9])(&v14);
    return a1;
  }
  if ((_DWORD)v9 != -1)
    goto LABEL_11;
  ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_10[v8])(&v15, a1 + 40);
  *(_DWORD *)(a1 + 96) = -1;
  return a1;
}

uint64_t WTF::Vector<WebCore::FillLayer const*,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FillLayer const*&>(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)WTF::Vector<JSC::JSMapIterator *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = *v3;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

uint64_t WebCore::GridPosition::setExplicitPosition(uint64_t this, WTF::StringImpl *a2, const WTF::String *a3)
{
  int v3;
  int v4;
  _DWORD *v5;
  WTF::StringImpl *v6;

  *(_BYTE *)this = 1;
  v3 = WebCore::GridPosition::gMaxPositionForTesting;
  if (!byte_1EE2F9580)
    v3 = 1000000;
  if ((int)a2 <= -v3)
    v4 = -v3;
  else
    v4 = (int)a2;
  if (v3 > (int)a2)
    v3 = v4;
  *(_DWORD *)(this + 4) = v3;
  v5 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v5 += 2;
  v6 = *(WTF::StringImpl **)(this + 8);
  *(_QWORD *)(this + 8) = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      return WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return this;
}

uint64_t WebCore::GridPosition::setSpanPosition(uint64_t this, WTF::StringImpl *a2, const WTF::String *a3)
{
  int v3;
  int v4;
  _DWORD *v5;
  WTF::StringImpl *v6;

  *(_BYTE *)this = 2;
  v3 = WebCore::GridPosition::gMaxPositionForTesting;
  if (!byte_1EE2F9580)
    v3 = 1000000;
  if ((int)a2 <= -v3)
    v4 = -v3;
  else
    v4 = (int)a2;
  if (v3 > (int)a2)
    v3 = v4;
  *(_DWORD *)(this + 4) = v3;
  v5 = *(_DWORD **)a3;
  if (*(_QWORD *)a3)
    *v5 += 2;
  v6 = *(WTF::StringImpl **)(this + 8);
  *(_QWORD *)(this + 8) = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      return WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  return this;
}

uint64_t WebCore::GridPosition::setNamedGridArea(uint64_t this, const WTF::String *a2)
{
  _DWORD *v2;
  WTF::StringImpl *v3;

  *(_BYTE *)this = 3;
  v2 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v2 += 2;
  v3 = *(WTF::StringImpl **)(this + 8);
  *(_QWORD *)(this + 8) = v2;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      return WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  return this;
}

uint64_t WebCore::GridPosition::integerPosition(WebCore::GridPosition *this)
{
  return *((unsigned int *)this + 1);
}

uint64_t WebCore::GridPosition::spanPosition(WebCore::GridPosition *this)
{
  return *((unsigned int *)this + 1);
}

uint64_t WebCore::GridPosition::setMaxPositionForTesting(uint64_t this)
{
  WebCore::GridPosition::gMaxPositionForTesting = this;
  byte_1EE2F9580 = 1;
  return this;
}

uint64_t WebCore::NamedLineCollectionBase::NamedLineCollectionBase(uint64_t a1, WTF::StringImpl *a2, WTF::StringImpl **a3, unsigned int a4, int a5)
{
  char v5;
  WTF::StringImpl *v9;
  uint64_t v10;
  int8x16_t *v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  const WTF::StringImpl *v16;
  WebCore::RenderElement *v17;
  WTF ***v18;
  WTF ***v19;
  WTF ***v20;
  WTF ***v21;
  WTF **v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  WTF **v26;
  WTF **v27;
  int i;
  int v29;
  WTF *v30;
  WebCore::RenderElement *v31;
  WTF **v32;
  WTF **v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  WTF **v37;
  WTF **v38;
  int j;
  int v40;
  WTF *v41;
  WTF **v42;
  WTF **v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  WTF **v47;
  WTF **v48;
  int k;
  int v50;
  WTF *v51;
  unsigned int v52;
  WTF **v53;
  _BOOL4 v54;
  void *v55;
  const WTF::StringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  int v63;
  void **v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  uint64_t v67;
  uint64_t v68;
  WebCore::RenderElement *v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  int v73;
  int m;
  uint64_t v75;
  WTF *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  int v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  void *v91;
  void *v92;
  int *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  BOOL v101;
  unsigned int v102;
  WTF::StringImpl *v103;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  BOOL v117;
  unsigned int v118;
  char v119;
  WTF ***v121;
  _BOOL4 v122;
  unsigned int v123;
  WTF::StringImpl *v124;
  WTF::StringImpl *v125;

  v5 = a5;
  *(_OWORD *)(a1 + 45) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v9 = *a3;
  if (a5)
  {
    if (v9)
      *(_DWORD *)v9 += 2;
    v10 = 5;
    if ((a4 & 0xFD) != 0)
    {
      v11 = (int8x16_t *)"-end";
    }
    else
    {
      v10 = 7;
      v11 = (int8x16_t *)"-start";
    }
    v118 = v10 - 1;
    if ((unint64_t)(v10 - 1) >> 31)
    {
      __break(0xC471u);
      JUMPOUT(0x1964CE4C0);
    }
    if (v9)
    {
      v12 = *((_DWORD *)v9 + 1);
      if (v12 < 0 || (v13 = v12 + v118, __OFADD__(v12, v118)))
      {
        v125 = 0;
        goto LABEL_204;
      }
      if ((*((_BYTE *)v9 + 16) & 4) == 0)
      {
        v14 = 0;
LABEL_12:
        WTF::tryMakeStringImplFromAdaptersInternal<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<WTF::ASCIILiteral,void>>(v13, v14, (uint64_t)v9, v11, v118, &v125);
        if (v125)
        {
          if (v9)
          {
            if (*(_DWORD *)v9 == 2)
              WTF::StringImpl::destroy(v9, a2);
            else
              *(_DWORD *)v9 -= 2;
          }
          goto LABEL_19;
        }
LABEL_204:
        __break(0xC471u);
        JUMPOUT(0x1964CE494);
      }
    }
    else
    {
      v13 = v10 - 1;
    }
    v14 = 1;
    goto LABEL_12;
  }
  if (v9)
    *(_DWORD *)v9 += 2;
  v125 = v9;
LABEL_19:
  v119 = v5;
  v123 = a4;
  if (a4 > 1)
  {
    v15 = WebCore::GridPositionsResolver::explicitGridRowCount(a2, a2);
    v17 = a2;
    v21 = *(WTF ****)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 40) + 80);
    v19 = v21 + 20;
    v121 = v21 + 24;
    v20 = v21 + 2;
  }
  else
  {
    v15 = WebCore::GridPositionsResolver::explicitGridColumnCount(a2, a2);
    v17 = a2;
    v18 = *(WTF ****)(*(_QWORD *)(*((_QWORD *)a2 + 11) + 40) + 80);
    v19 = v18 + 19;
    v121 = v18 + 23;
    v20 = v18 + 1;
  }
  *(_DWORD *)(a1 + 44) = v15;
  v22 = *v19;
  if (*v19)
  {
    v23 = *((_DWORD *)v22 - 2);
    v24 = *((_DWORD *)v125 + 4);
    if (v24 < 0x100)
      v25 = WTF::StringImpl::hashSlowCase(v125);
    else
      v25 = v24 >> 8;
    for (i = 0; ; v25 = i + v29)
    {
      v29 = v25 & v23;
      v26 = &v22[3 * (v25 & v23)];
      v30 = *v26;
      if (*v26 != (WTF *)-1)
      {
        if (!v30)
        {
          v27 = *v19;
          if (!*v19)
          {
            v26 = 0;
            goto LABEL_35;
          }
          v105 = *((_DWORD *)v27 - 1);
          v26 = &v27[3 * v105];
          goto LABEL_171;
        }
        if ((WTF::equal(v30, v125, v16) & 1) != 0)
          break;
      }
      ++i;
    }
    v27 = *v19;
    if (!*v19)
      goto LABEL_35;
    v105 = *((_DWORD *)v27 - 1);
LABEL_171:
    v31 = v17;
    v27 += 3 * v105;
  }
  else
  {
    v26 = 0;
    v27 = 0;
LABEL_35:
    v31 = v17;
  }
  if (v26 == v27)
    v32 = 0;
  else
    v32 = v26 + 1;
  *(_QWORD *)a1 = v32;
  v33 = *v121;
  if (*v121)
  {
    v34 = *((_DWORD *)v33 - 2);
    v35 = *((_DWORD *)v125 + 4);
    if (v35 < 0x100)
      v36 = WTF::StringImpl::hashSlowCase(v125);
    else
      v36 = v35 >> 8;
    for (j = 0; ; v36 = j + v40)
    {
      v40 = v36 & v34;
      v37 = &v33[3 * (v36 & v34)];
      v41 = *v37;
      if (*v37 != (WTF *)-1)
      {
        if (!v41)
        {
          v38 = *v121;
          if (!*v121)
          {
            v37 = 0;
            goto LABEL_52;
          }
          v106 = *((_DWORD *)v38 - 1);
          v37 = &v38[3 * v106];
          goto LABEL_173;
        }
        if ((WTF::equal(v41, v125, v16) & 1) != 0)
          break;
      }
      ++j;
    }
    v38 = *v121;
    if (!*v121)
      goto LABEL_52;
    v106 = *((_DWORD *)v38 - 1);
LABEL_173:
    v38 += 3 * v106;
  }
  else
  {
    v37 = 0;
    v38 = 0;
  }
LABEL_52:
  if (v37 == v38)
    v42 = 0;
  else
    v42 = v37 + 1;
  *(_QWORD *)(a1 + 8) = v42;
  v43 = *v20;
  if (*v20)
  {
    v44 = *((_DWORD *)v43 - 2);
    v45 = *((_DWORD *)v125 + 4);
    if (v45 < 0x100)
      v46 = WTF::StringImpl::hashSlowCase(v125);
    else
      v46 = v45 >> 8;
    for (k = 0; ; v46 = k + v50)
    {
      v50 = v46 & v44;
      v47 = &v43[3 * (v46 & v44)];
      v51 = *v47;
      if (*v47 != (WTF *)-1)
      {
        if (!v51)
        {
          v48 = *v20;
          if (!*v20)
          {
            v47 = 0;
            goto LABEL_68;
          }
          v107 = *((_DWORD *)v48 - 1);
          v47 = &v48[3 * v107];
          goto LABEL_175;
        }
        if ((WTF::equal(v51, v125, v16) & 1) != 0)
          break;
      }
      ++k;
    }
    v48 = *v20;
    if (!*v20)
      goto LABEL_68;
    v107 = *((_DWORD *)v48 - 1);
LABEL_175:
    v52 = a4;
    v48 += 3 * v107;
  }
  else
  {
    v47 = 0;
    v48 = 0;
LABEL_68:
    v52 = a4;
  }
  if (v47 == v48)
    v53 = 0;
  else
    v53 = v47 + 1;
  *(_QWORD *)(a1 + 16) = v53;
  v54 = WebCore::RenderElement::establishesIndependentFormattingContext(v31);
  v57 = *((_QWORD *)v31 + 11);
  if (v54)
  {
    LOBYTE(v59) = 0;
    v58 = *(_QWORD *)(v57 + 40);
    goto LABEL_75;
  }
  v58 = *(_QWORD *)(v57 + 40);
  v59 = *(_QWORD *)(v58 + 80);
  if (v52 <= 1)
  {
    LODWORD(v59) = *(unsigned __int8 *)(v59 + 259);
    if (!(_DWORD)v59)
      goto LABEL_75;
  }
  else
  {
    LODWORD(v59) = *(unsigned __int8 *)(v59 + 258);
    if (!(_DWORD)v59)
      goto LABEL_75;
  }
  v59 = *((_QWORD *)v31 + 4);
  if (v59)
  {
    v108 = *(_QWORD *)(v59 + 8);
    if (v108 && *(_BYTE *)(v108 + 46) == 12)
    {
      if (a4 >= 2)
      {
        do
        {
          v115 = v108;
          v116 = *(_QWORD *)(v108 + 32);
          if (!v116)
            break;
          v108 = *(_QWORD *)(v116 + 8);
          if (!v108)
            break;
        }
        while (*(_BYTE *)(v108 + 46) == 12
             && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v115 + 88) + 40) + 80) + 258));
        v114 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v115 + 88) + 40) + 80) + 260);
      }
      else
      {
        do
        {
          v109 = v108;
          v110 = *(_QWORD *)(v108 + 32);
          if (!v110)
            break;
          v108 = *(_QWORD *)(v110 + 8);
          if (!v108)
            break;
        }
        while (*(_BYTE *)(v108 + 46) == 12
             && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v109 + 88) + 40) + 80) + 259));
        v111 = v109;
        do
        {
          v112 = v111;
          v113 = *(_QWORD *)(v111 + 32);
          if (!v113)
            break;
          v111 = *(_QWORD *)(v113 + 8);
          if (!v111)
            break;
        }
        while (*(_BYTE *)(v111 + 46) == 12
             && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v112 + 88) + 40) + 80) + 258));
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v112 + 88) + 40) + 80) + 260))
        {
          v117 = 0;
          goto LABEL_201;
        }
        v114 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v109 + 88) + 40) + 80) + 261);
      }
      v117 = v114 != 0;
LABEL_201:
      LOBYTE(v59) = !v117;
      goto LABEL_202;
    }
    LOBYTE(v59) = 0;
  }
LABEL_202:
  v52 = a4;
LABEL_75:
  *(_BYTE *)(a1 + 60) = v59;
  v60 = 68;
  if (v52 < 2)
    v60 = 64;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(*((_QWORD *)v31 + 41) + v60);
  v61 = *(_QWORD *)(v58 + 80);
  if (v52 > 1)
  {
    v63 = *(_DWORD *)(v61 + 244);
    *(_DWORD *)(a1 + 52) = 0;
    *(_DWORD *)(a1 + 56) = v63;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v61 + 252);
    if ((v59 & 1) == 0)
    {
      if (!*(_BYTE *)(v61 + 258))
        goto LABEL_153;
      goto LABEL_87;
    }
  }
  else
  {
    v62 = *(_DWORD *)(v61 + 228);
    *(_DWORD *)(a1 + 52) = 0;
    *(_DWORD *)(a1 + 56) = v62;
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(v61 + 248);
    if ((v59 & 1) == 0)
    {
      if (!*(_BYTE *)(v61 + 259))
        goto LABEL_153;
LABEL_87:
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      goto LABEL_153;
    }
  }
  if (*(_QWORD *)(a1 + 16))
  {
    v64 = (void **)(a1 + 24);
    *(_QWORD *)(a1 + 16) = a1 + 24;
    v65 = *a3;
    if (!*a3)
    {
      v122 = (v52 & 0xFD) == 0;
      if ((v119 & 1) != 0)
      {
        v65 = 0;
        goto LABEL_97;
      }
      v122 = 0;
      v66 = 0;
      goto LABEL_96;
    }
    *(_DWORD *)v65 += 2;
    if ((v119 & 1) != 0)
    {
      v122 = (v52 & 0xFD) == 0;
LABEL_97:
      v67 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v31 + 11) + 40) + 80);
      v68 = *(_QWORD *)(v67 + 72);
      if (v68)
      {
        v69 = v31;
        v70 = *(_DWORD *)(a1 + 44);
        v71 = *(_DWORD *)(v68 - 8);
        v72 = *((_DWORD *)v65 + 4);
        if (v72 < 0x100)
          v73 = WTF::StringImpl::hashSlowCase(v65);
        else
          v73 = v72 >> 8;
        for (m = 0; ; v73 = m + v75)
        {
          v75 = v73 & v71;
          v76 = *(WTF **)(v68 + 32 * v75);
          if (v76 != (WTF *)-1)
          {
            if (!v76)
            {
              v77 = *(_QWORD *)(v67 + 72);
              v52 = v123;
              v31 = v69;
              if (!v77)
                goto LABEL_138;
              v78 = *(unsigned int *)(v77 - 4);
              v79 = v77 + 32 * v78;
              goto LABEL_163;
            }
            if ((WTF::equal(v76, v65, v56) & 1) != 0)
              break;
          }
          ++m;
        }
        v79 = v68 + 32 * v75;
        v77 = *(_QWORD *)(v67 + 72);
        v31 = v69;
        if (!v77)
        {
          v52 = v123;
          goto LABEL_110;
        }
        v78 = *(unsigned int *)(v77 - 4);
        v52 = v123;
LABEL_163:
        if (v79 == v77 + 32 * v78)
          goto LABEL_138;
LABEL_110:
        v80 = v79 + 20;
        v81 = 20;
        if (v52 < 2)
        {
          v81 = 8;
          v80 = v79 + 8;
        }
        v82 = *(_DWORD *)(v79 + v81);
        v83 = *(_DWORD *)(v80 + 4);
        if (v83 >= 1 && v82 < v70)
        {
          v85 = v82 & ~(v82 >> 31);
          if (v83 >= v70)
            v83 = v70;
          if (v122)
            v86 = v85;
          else
            v86 = v83;
          v87 = *(unsigned int *)(a1 + 36);
          if ((_DWORD)v87 == *(_DWORD *)(a1 + 32))
          {
            v88 = v87 + (v87 >> 2);
            if (v88 >= 0x10)
              v89 = v88 + 1;
            else
              v89 = 16;
            if (v89 <= v87 + 1)
              v90 = v87 + 1;
            else
              v90 = v89;
            if (v90 >> 30)
            {
              __break(0xC471u);
              JUMPOUT(0x1964CE4D8);
            }
            v91 = *v64;
            v92 = (void *)WTF::fastMalloc((WTF *)(4 * v90));
            *(_DWORD *)(a1 + 32) = v90;
            *(_QWORD *)(a1 + 24) = v92;
            memcpy(v92, v91, 4 * v87);
            if (v91)
            {
              if (*v64 == v91)
              {
                *(_QWORD *)(a1 + 24) = 0;
                *(_DWORD *)(a1 + 32) = 0;
              }
              WTF::fastFree((WTF *)v91, v55);
            }
            v93 = (int *)(*(_QWORD *)(a1 + 24) + 4 * *(unsigned int *)(a1 + 36));
          }
          else
          {
            v93 = (int *)((char *)*v64 + 4 * v87);
          }
          *v93 = v86;
          ++*(_DWORD *)(a1 + 36);
        }
      }
LABEL_138:
      if (v65)
      {
        if (*(_DWORD *)v65 == 2)
          WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v55);
        else
          *(_DWORD *)v65 -= 2;
      }
      goto LABEL_141;
    }
    v56 = (const WTF::StringImpl *)WTF::StringImpl::find();
    v122 = v56 != (const WTF::StringImpl *)-1;
    if (v56 == (const WTF::StringImpl *)-1)
    {
      if (!*a3)
      {
        v66 = 0;
LABEL_94:
        if (*(_DWORD *)v65 == 2)
          WTF::StringImpl::destroy(v65, (WTF::StringImpl *)v55);
        else
          *(_DWORD *)v65 -= 2;
LABEL_96:
        v65 = v66;
        goto LABEL_97;
      }
      v56 = (const WTF::StringImpl *)WTF::StringImpl::find();
    }
    v66 = *a3;
    if (*a3)
    {
      if (*((_DWORD *)v66 + 1) > v56)
      {
        WTF::StringImpl::substring(*a3);
        v66 = v124;
      }
      else
      {
        *(_DWORD *)v66 += 2;
      }
    }
    goto LABEL_94;
  }
LABEL_141:
  v94 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v31 + 11) + 40) + 80);
  v95 = 208;
  if (v52 < 2)
    v95 = 200;
  v96 = *(_QWORD *)(v94 + v95);
  if (v96)
  {
    v97 = *(_DWORD *)(v96 - 12);
    *(_DWORD *)(a1 + 56) = v97;
    if (v97)
    {
      v98 = 176;
      if (v52 < 2)
        v98 = 168;
      v99 = *(_QWORD *)(v94 + v98);
      if (v99)
        LODWORD(v99) = *(_DWORD *)(v99 - 12);
      v100 = *(_DWORD *)(a1 + 44) + 1;
      v101 = v100 >= v99;
      v102 = v100 - v99;
      if (v102 != 0 && v101)
        *(_DWORD *)(a1 + 52) = v102 / v97 * v97;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 56) = 0;
  }
LABEL_153:
  v103 = v125;
  v125 = 0;
  if (v103)
  {
    if (*(_DWORD *)v103 == 2)
      WTF::StringImpl::destroy(v103, (WTF::StringImpl *)v55);
    else
      *(_DWORD *)v103 -= 2;
  }
  return a1;
}

char *WebCore::NamedLineCollectionBase::ensureInheritedNamedIndices(char *this)
{
  const void **v1;
  void **v2;
  _DWORD *v3;
  uint64_t v4;
  const void *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  unint64_t v15;

  v1 = (const void **)*((_QWORD *)this + 2);
  v2 = (void **)(this + 24);
  if (v1 != (const void **)(this + 24))
  {
    v3 = this;
    if (!v1)
      goto LABEL_18;
    v4 = *((unsigned int *)v1 + 3);
    if (!(_DWORD)v4)
      goto LABEL_18;
    v5 = *v1;
    v6 = *((unsigned int *)this + 8);
    v7 = *((unsigned int *)this + 9);
    v8 = v7 + v4;
    if (v7 + v4 > v6)
    {
      v9 = v6 + (v6 >> 2);
      if (v9 >= 0x10)
        v10 = v9 + 1;
      else
        v10 = 16;
      if (v10 <= v8)
        v11 = v7 + v4;
      else
        v11 = v10;
      if (v11 >> 30)
        goto LABEL_20;
      v12 = *v2;
      v13 = (void *)WTF::fastMalloc((WTF *)(4 * v11));
      v3[8] = v11;
      *((_QWORD *)v3 + 3) = v13;
      memcpy(v13, v12, 4 * v7);
      if (v12)
      {
        if (*v2 == v12)
        {
          *((_QWORD *)v3 + 3) = 0;
          v3[8] = 0;
        }
        WTF::fastFree((WTF *)v12, v14);
      }
    }
    v15 = v3[9];
    if (v8 >= v15)
    {
      this = (char *)memcpy((void *)(*((_QWORD *)v3 + 3) + 4 * v15), v5, 4 * v4);
      v3[9] = v8;
LABEL_18:
      *((_QWORD *)v3 + 2) = v2;
      return this;
    }
LABEL_20:
    __break(0xC471u);
    JUMPOUT(0x1964CE5D4);
  }
  return this;
}

BOOL WebCore::NamedLineCollectionBase::contains(WebCore::NamedLineCollectionBase *this, unsigned int a2)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int *v20;
  uint64_t v21;
  int v22;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int *v28;
  uint64_t v29;
  int v30;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int *v35;
  uint64_t v36;
  int v37;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  int v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  uint64_t v52;
  int v53;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  int *v62;
  uint64_t v63;
  int v64;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  int *v69;
  uint64_t v70;
  int v71;
  uint64_t v73;
  int *v74;
  int v75;

  if (*((_DWORD *)this + 11) < a2)
    return 0;
  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 + 12);
    if ((_DWORD)v4)
    {
      v5 = *(int **)v3;
      do
      {
        v6 = *v5++;
        if (v6 == a2)
          return 1;
      }
      while (--v4);
    }
  }
  v7 = *((_DWORD *)this + 14);
  if (!v7 || (v8 = *((_DWORD *)this + 10), v9 = a2 - v8, a2 < v8))
  {
    v10 = *(_QWORD *)this;
    if (*(_QWORD *)this)
    {
      v11 = *(unsigned int *)(v10 + 12);
      if ((_DWORD)v11)
      {
        v12 = *(int **)v10;
        v13 = v11 - 1;
        do
        {
          v14 = *v12++;
          result = v14 == a2;
        }
        while (v14 != a2 && v13-- != 0);
        return result;
      }
    }
    return 0;
  }
  if (*((_BYTE *)this + 60))
  {
    v16 = *((_DWORD *)this + 13);
    if (v16 + v8 <= a2)
    {
      v32 = *(_QWORD *)this;
      if (!*(_QWORD *)this)
        return 0;
      v33 = *(unsigned int *)(v32 + 12);
      if (!(_DWORD)v33)
        return 0;
      v34 = a2 - v16;
      v35 = *(int **)v32;
      v36 = v33 - 1;
      do
      {
        v37 = *v35++;
        result = v37 == v34;
      }
      while (v37 != v34 && v36-- != 0);
    }
    else if (v16)
    {
      v17 = *((_QWORD *)this + 1);
      if (!v17)
        return 0;
      v18 = *(unsigned int *)(v17 + 12);
      if (!(_DWORD)v18)
        return 0;
      v19 = v9 % v7;
      v20 = *(int **)v17;
      v21 = v18 - 1;
      do
      {
        v22 = *v20++;
        result = v22 == v19;
      }
      while (v22 != v19 && v21-- != 0);
    }
    else
    {
      v49 = *(_QWORD *)this;
      if (!*(_QWORD *)this)
        return 0;
      v50 = *(unsigned int *)(v49 + 12);
      if (!(_DWORD)v50)
        return 0;
      v51 = *(int **)v49;
      v52 = v50 - 1;
      do
      {
        v53 = *v51++;
        result = v53 == a2;
      }
      while (v53 != a2 && v52-- != 0);
    }
  }
  else
  {
    v24 = *((_DWORD *)this + 12);
    if (v24 + v8 >= a2)
    {
      if (a2 == v8)
      {
        v39 = *(_QWORD *)this;
        if (!*(_QWORD *)this || (v40 = *(unsigned int *)(v39 + 12), !(_DWORD)v40))
        {
LABEL_56:
          v43 = *((_QWORD *)this + 1);
          if (!v43)
            return 0;
          v44 = *(unsigned int *)(v43 + 12);
          if (!(_DWORD)v44)
            return 0;
          v45 = *(int **)v43;
          v46 = v44 - 1;
          do
          {
            v47 = *v45++;
            result = v47 == 0;
            if (v47)
              v48 = v46 == 0;
            else
              v48 = 1;
            --v46;
          }
          while (!v48);
          return result;
        }
        v41 = *(int **)v39;
        while (1)
        {
          v42 = *v41++;
          if (v42 == a2)
            break;
          if (!--v40)
            goto LABEL_56;
        }
      }
      else if (v24 + v8 == a2)
      {
        v55 = *((_QWORD *)this + 1);
        if (!v55 || (v56 = *(unsigned int *)(v55 + 12), !(_DWORD)v56))
        {
LABEL_80:
          v59 = *(_QWORD *)this;
          if (!*(_QWORD *)this)
            return 0;
          v60 = *(unsigned int *)(v59 + 12);
          if (!(_DWORD)v60)
            return 0;
          v61 = v8 + 1;
          v62 = *(int **)v59;
          v63 = v60 - 1;
          do
          {
            v64 = *v62++;
            result = v64 == v61;
          }
          while (v64 != v61 && v63-- != 0);
          return result;
        }
        v57 = *(int **)v55;
        while (1)
        {
          v58 = *v57++;
          if (v58 == v7)
            break;
          if (!--v56)
            goto LABEL_80;
        }
      }
      else
      {
        v66 = (a2 - v8) % v7;
        v67 = *((_QWORD *)this + 1);
        if (v66)
        {
LABEL_90:
          if (!v67)
            return 0;
          v68 = *(unsigned int *)(v67 + 12);
          if (!(_DWORD)v68)
            return 0;
          v69 = *(int **)v67;
          v70 = v68 - 1;
          do
          {
            v71 = *v69++;
            result = v71 == v66;
          }
          while (v71 != v66 && v70-- != 0);
          return result;
        }
        if (!v67)
          return 0;
        v73 = *(unsigned int *)(v67 + 12);
        if (!(_DWORD)v73)
          return 0;
        v74 = *(int **)v67;
        while (1)
        {
          v75 = *v74++;
          if (v75 == v7)
            break;
          if (!--v73)
            goto LABEL_90;
        }
      }
      return 1;
    }
    v25 = *(_QWORD *)this;
    if (!*(_QWORD *)this)
      return 0;
    v26 = *(unsigned int *)(v25 + 12);
    if (!(_DWORD)v26)
      return 0;
    v27 = a2 - v24 + 1;
    v28 = *(int **)v25;
    v29 = v26 - 1;
    do
    {
      v30 = *v28++;
      result = v30 == v27;
    }
    while (v30 != v27 && v29-- != 0);
  }
  return result;
}

uint64_t WebCore::NamedLineCollection::NamedLineCollection(uint64_t a1, uint64_t a2, WTF::StringImpl **a3, unsigned int a4, int a5)
{
  unsigned int v6;
  int v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  void *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  BOOL v37;
  int v38;
  WTF *v39;
  uint64_t v40;
  WTF *v41;
  WTF *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BOOL4 v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  void *v59;
  const WTF::StringImpl *v60;
  char v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  int v72;
  int i;
  uint64_t v74;
  WTF *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  WTF *v84;
  int v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  int *v90;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  WTF *v95;
  uint64_t v96;
  WTF *v97;
  int v98;
  char v99;
  char v100;
  int v101;
  uint64_t v102;
  char v103;
  int v104;
  WTF *v105;
  uint64_t *v106;
  int v107;
  uint64_t v108;
  int v109;
  _QWORD v110[3];
  WTF *v111;
  int v112;
  int v113;
  char v114;
  WTF *v115;
  WTF *v116;
  __int16 v117;

  v6 = a4;
  v10 = *(_DWORD *)(WebCore::NamedLineCollectionBase::NamedLineCollectionBase(a1, (WTF::StringImpl *)a2, a3, a4, a5) + 44);
  if (!v10)
    return a1;
  v11 = WebCore::GridPosition::gMaxPositionForTesting;
  if (!byte_1EE2F9580)
    v11 = 1000000;
  if (v11 >= 1)
    v12 = 1;
  else
    v12 = v11;
  v13 = v12 - 1;
  if (v13 <= -v11)
    v14 = -v11;
  else
    v14 = v13;
  v15 = 1 - v11;
  if (v11 < v10)
    v10 = v11;
  v16 = v15 <= v10 ? v10 : v15;
  if (v6 <= 1)
  {
    v18 = (*(unsigned __int8 *)(a2 + 123) >> 2) & 1;
  }
  else
  {
    v17 = (unsigned __int16)*(_DWORD *)(a2 + 124) >> 13;
    v98 = 2;
    switch((unsigned __int16)*(_DWORD *)(a2 + 124) >> 13)
    {
      case 1:
      case 2:
        goto LABEL_18;
      case 3:
      case 5:
        v17 = 3;
        goto LABEL_18;
      case 4:
        goto LABEL_19;
      default:
        v17 = 0;
LABEL_18:
        v98 = v17;
LABEL_19:
        v18 = (v98 & 0xFFFFFFFD) == 1;
        break;
    }
  }
  if (WebCore::RenderElement::establishesIndependentFormattingContext((WebCore::RenderElement *)a2))
    return a1;
  v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 88) + 40) + 80);
  if (v6 <= 1)
  {
    if (!*(_BYTE *)(v20 + 259))
      return a1;
  }
  else if (!*(_BYTE *)(v20 + 258))
  {
    return a1;
  }
  v22 = *(_QWORD *)(a2 + 32);
  if (!v22)
    return a1;
  v23 = *(_QWORD *)(v22 + 8);
  if (!v23 || *(_BYTE *)(v23 + 46) != 12)
    return a1;
  v107 = v18;
  if (v6 <= 1)
  {
    do
    {
      v27 = v23;
      v28 = *(_QWORD *)(v23 + 32);
      if (!v28)
        break;
      v23 = *(_QWORD *)(v28 + 8);
      if (!v23)
        break;
    }
    while (*(_BYTE *)(v23 + 46) == 12
         && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 88) + 40) + 80) + 259));
    v29 = v27;
    do
    {
      v30 = v29;
      v31 = *(_QWORD *)(v29 + 32);
      if (!v31)
        break;
      v29 = *(_QWORD *)(v31 + 8);
      if (!v29)
        break;
    }
    while (*(_BYTE *)(v29 + 46) == 12
         && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 88) + 40) + 80) + 258));
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v30 + 88) + 40) + 80) + 260))
      goto LABEL_47;
    v26 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 88) + 40) + 80) + 261);
  }
  else
  {
    do
    {
      v24 = v23;
      v25 = *(_QWORD *)(v23 + 32);
      if (!v25)
        break;
      v23 = *(_QWORD *)(v25 + 8);
      if (!v23)
        break;
    }
    while (*(_BYTE *)(v23 + 46) == 12
         && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 88) + 40) + 80) + 258));
    v26 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 88) + 40) + 80) + 260);
  }
  if (*v26)
    return a1;
LABEL_47:
  v32 = v14 | (v16 << 32);
  v103 = v6 < 2;
  v105 = *(WTF **)(a2 + 8);
  if (v105)
    goto LABEL_48;
  v96 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v96 = 1;
  *(_QWORD *)(v96 + 8) = a2;
  v97 = *(WTF **)(a2 + 8);
  v105 = (WTF *)v96;
  *(_QWORD *)(a2 + 8) = v96;
  if (!v97)
    goto LABEL_48;
  if (*(_DWORD *)v97 != 1)
  {
    --*(_DWORD *)v97;
LABEL_48:
    v33 = *(_DWORD *)v105;
    *(_DWORD *)v105 += 2;
    v34 = v33 + 1;
    if (v33 == -1)
    {
      WTF::fastFree(v105, v19);
      v34 = *(_DWORD *)v105;
    }
    v115 = v105;
    *(_DWORD *)v105 = v34 + 4;
    v116 = v105;
    v117 = (v6 > 1) | 0x100;
    v35 = v34 + 3;
    if (v35)
    {
      *(_DWORD *)v105 = v35;
    }
    else
    {
      WTF::fastFree(v105, v19);
      v35 = *(_DWORD *)v105;
    }
    v36 = v35 - 1;
    if (!v36)
    {
      WTF::fastFree(v105, v19);
      v36 = *(_DWORD *)v105;
    }
    *(_DWORD *)v105 = v36 + 2;
    v37 = __CFADD__(v36, 1);
    v38 = v36 + 1;
    if (v37)
    {
      WTF::fastFree(v105, v19);
      v100 = 0;
    }
    else
    {
      v100 = 0;
      *(_DWORD *)v105 = v38;
    }
    goto LABEL_56;
  }
  WTF::fastFree(v97, v19);
  v105 = *(WTF **)(a2 + 8);
  if (v105)
    goto LABEL_48;
  v105 = 0;
  v115 = 0;
  v116 = 0;
  v117 = (v6 > 1) | 0x100;
  v100 = 1;
LABEL_56:
  v101 = v6 > 1;
  v106 = (uint64_t *)(a1 + 24);
  v99 = v6 & 0xFD;
  v39 = v105;
  if (v105)
    goto LABEL_57;
LABEL_58:
  v41 = v115;
  if (v115)
    v41 = (WTF *)*((_QWORD *)v115 + 1);
  v42 = v105;
  if (v105)
    v42 = (WTF *)*((_QWORD *)v105 + 1);
  if (v41 != v42 || !HIBYTE(v117) || v117 != v101)
  {
    if (v39)
      v40 = *((_QWORD *)v39 + 1);
    else
      v40 = 0;
    while (1)
    {
      v43 = *(_QWORD *)(v40 + 32);
      if (v43 && (v108 = *(_QWORD *)(v43 + 8)) != 0)
      {
        if (*(_BYTE *)(v108 + 46) != 12)
        {
          __break(0xC471u);
          JUMPOUT(0x1964CF3D0);
        }
      }
      else
      {
        v108 = 0;
      }
      v44 = v108;
      do
      {
        v45 = v44;
        v46 = *(_QWORD *)(v44 + 32);
        if (!v46)
          break;
        v44 = *(_QWORD *)(v46 + 8);
        if (!v44)
          break;
      }
      while (*(_BYTE *)(v44 + 46) == 12
           && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 88) + 40) + 80) + 258));
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v45 + 88) + 40) + 80) + 260)
        && (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v40 + 88) + 40) + 88) + 8) | 2) == 2)
      {
        break;
      }
      v47 = v108;
      do
      {
        v48 = v47;
        v49 = *(_QWORD *)(v47 + 32);
        if (!v49)
          break;
        v47 = *(_QWORD *)(v49 + 8);
        if (!v47)
          break;
      }
      while (*(_BYTE *)(v47 + 46) == 12
           && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v48 + 88) + 40) + 80) + 259));
      v50 = v48;
      do
      {
        v51 = v50;
        v52 = *(_QWORD *)(v50 + 32);
        if (!v52)
          break;
        v50 = *(_QWORD *)(v52 + 8);
        if (!v50)
          break;
      }
      while (*(_BYTE *)(v50 + 46) == 12
           && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v51 + 88) + 40) + 80) + 258));
      if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v51 + 88) + 40) + 80) + 260)
        && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v48 + 88) + 40) + 80) + 261)
        && (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v40 + 88) + 40) + 88) + 40) | 2) == 2)
      {
        break;
      }
      if (((*(_BYTE *)(v40 + 21) & 0x10) == 0) != ((*(_BYTE *)(v108 + 21) & 0x10) == 0))
      {
        v103 ^= 1u;
        if ((_BYTE)v6)
        {
          if (v6 == 2)
          {
            LOBYTE(v6) = 0;
          }
          else if (v6 == 1)
          {
            LOBYTE(v6) = 3;
          }
          else
          {
            LOBYTE(v6) = 1;
          }
        }
        else
        {
          LOBYTE(v6) = 2;
        }
      }
      v53 = v6 > 1u;
      v54 = WebCore::RenderGrid::gridSpanForChild(v108, v40, v6 > 1u);
      if (((*(_BYTE *)(v40 + 21) & 0x10) == 0) != ((*(_BYTE *)(v108 + 21) & 0x10) == 0))
        v53 = v6 < 2u;
      if (v6 <= 1u)
      {
        v56 = (*(unsigned __int8 *)(v108 + 123) >> 2) & 1;
      }
      else
      {
        v55 = (unsigned __int16)*(_DWORD *)(v108 + 124) >> 13;
        v93 = 2;
        switch((unsigned __int16)*(_DWORD *)(v108 + 124) >> 13)
        {
          case 1:
          case 2:
            goto LABEL_104;
          case 3:
          case 5:
            v55 = 3;
            goto LABEL_104;
          case 4:
            goto LABEL_105;
          default:
            v55 = 0;
LABEL_104:
            v93 = v55;
LABEL_105:
            v56 = (v93 & 0xFFFFFFFD) == 1;
            break;
        }
      }
      if (v53)
      {
        v57 = (unsigned __int16)*(_DWORD *)(v40 + 124) >> 13;
        v92 = 2;
        switch((unsigned __int16)*(_DWORD *)(v40 + 124) >> 13)
        {
          case 1:
          case 2:
            goto LABEL_110;
          case 3:
          case 5:
            v57 = 3;
            goto LABEL_110;
          case 4:
            goto LABEL_111;
          default:
            v57 = 0;
LABEL_110:
            v92 = v57;
LABEL_111:
            v58 = (v92 & 0xFFFFFFFD) == 1;
            break;
        }
      }
      else
      {
        v58 = (*(unsigned __int8 *)(v40 + 123) >> 2) & 1;
      }
      if (v56 == v58)
        v32 = (v32 + (v54 << 32)) & 0xFFFFFFFF00000000 | (v54 + v32);
      else
        v32 = (HIDWORD(v54) - HIDWORD(v32)) | ((unint64_t)(HIDWORD(v54) - v32) << 32);
      WebCore::NamedLineCollectionBase::NamedLineCollectionBase((uint64_t)v110, (WTF::StringImpl *)v108, a3, v6, a5);
      if (v110[0] || v110[1] && (!v114 || v113) || v110[2])
      {
        if (v32 <= HIDWORD(v32))
        {
          v66 = 0;
          v61 = 0;
          v67 = v32;
          do
          {
            if (WebCore::NamedLineCollectionBase::contains((WebCore::NamedLineCollectionBase *)v110, v32 + v66))
            {
              WebCore::NamedLineCollectionBase::ensureInheritedNamedIndices((char *)a1);
              if (v6 <= 1u)
              {
                v69 = (*(unsigned __int8 *)(v108 + 123) >> 2) & 1;
              }
              else
              {
                v68 = (unsigned __int16)*(_DWORD *)(v108 + 124) >> 13;
                v72 = 2;
                switch((unsigned __int16)*(_DWORD *)(v108 + 124) >> 13)
                {
                  case 1:
                  case 2:
                    goto LABEL_128;
                  case 3:
                  case 5:
                    v68 = 3;
                    goto LABEL_128;
                  case 4:
                    goto LABEL_129;
                  default:
                    v68 = 0;
LABEL_128:
                    v72 = v68;
LABEL_129:
                    v69 = (v72 & 0xFFFFFFFD) == 1;
                    break;
                }
              }
              v70 = v66;
              if (v107 != v69)
                v70 = *(_DWORD *)(a1 + 44) - (v67 - v32);
              v109 = v70;
              v71 = *(unsigned int *)(a1 + 36);
              if ((_DWORD)v71 == *(_DWORD *)(a1 + 32))
                *(_DWORD *)(*(_QWORD *)(a1 + 24) + 4 * *(unsigned int *)(a1 + 36)) = *(_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v106, v71 + 1, (unint64_t)&v109);
              else
                *(_DWORD *)(*v106 + 4 * v71) = v70;
              ++*(_DWORD *)(a1 + 36);
              v61 = 1;
            }
            ++v67;
            ++v66;
          }
          while ((v32 + v66) <= HIDWORD(v32));
        }
        else
        {
          v61 = 0;
        }
        v104 = v61 & 1;
        if (!a5)
          goto LABEL_162;
      }
      else
      {
        v104 = 0;
        if (!a5)
          goto LABEL_162;
      }
      v102 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v108 + 88) + 40) + 80);
      v62 = *(_QWORD *)(v102 + 72);
      if (!v62)
        goto LABEL_162;
      v63 = *(_DWORD *)(v62 - 8);
      v64 = *((_DWORD *)*a3 + 4);
      v65 = v64 < 0x100 ? WTF::StringImpl::hashSlowCase(*a3) : v64 >> 8;
      for (i = 0; ; v65 = i + v74)
      {
        v74 = v65 & v63;
        v75 = *(WTF **)(v62 + 32 * v74);
        if (v75 != (WTF *)-1)
        {
          if (!v75)
          {
            v76 = *(_QWORD *)(v102 + 72);
            if (!v76)
              goto LABEL_162;
            v77 = *(unsigned int *)(v76 - 4);
            v78 = v76 + 32 * v77;
            goto LABEL_189;
          }
          if ((WTF::equal(v75, *a3, v60) & 1) != 0)
            break;
        }
        ++i;
      }
      v78 = v62 + 32 * v74;
      v76 = *(_QWORD *)(v102 + 72);
      if (!v76)
        goto LABEL_156;
      v77 = *(unsigned int *)(v76 - 4);
LABEL_189:
      if (v78 == v76 + 32 * v77)
        goto LABEL_162;
LABEL_156:
      v79 = v78 + 20;
      v80 = 20;
      if ((v103 & 1) != 0)
      {
        v80 = 8;
        v79 = v78 + 8;
      }
      v81 = *(_DWORD *)(v78 + v80);
      v82 = *(_DWORD *)(v79 + 4);
      if (v82 <= (int)v32 || v81 >= SHIDWORD(v32))
      {
LABEL_162:
        if (!v104)
          goto LABEL_164;
        goto LABEL_163;
      }
      if (v81 <= (int)v32)
        v81 = v32;
      if (v82 >= SHIDWORD(v32))
        v82 = HIDWORD(v32);
      if (v99)
        v85 = v82;
      else
        v85 = v81;
      WebCore::NamedLineCollectionBase::ensureInheritedNamedIndices((char *)a1);
      if (v6 <= 1u)
      {
        v87 = (*(unsigned __int8 *)(v108 + 123) >> 2) & 1;
      }
      else
      {
        v86 = (unsigned __int16)*(_DWORD *)(v108 + 124) >> 13;
        v94 = 2;
        switch((unsigned __int16)*(_DWORD *)(v108 + 124) >> 13)
        {
          case 1:
          case 2:
            goto LABEL_178;
          case 3:
          case 5:
            v86 = 3;
            goto LABEL_178;
          case 4:
            goto LABEL_179;
          default:
            v86 = 0;
LABEL_178:
            v94 = v86;
LABEL_179:
            v87 = (v94 & 0xFFFFFFFD) == 1;
            break;
        }
      }
      v88 = v85 - v32;
      if (v107 != v87)
        v88 = *(_DWORD *)(a1 + 44) - v88;
      v109 = v88;
      v89 = *(unsigned int *)(a1 + 36);
      if ((_DWORD)v89 == *(_DWORD *)(a1 + 32))
      {
        v90 = (int *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v106, v89 + 1, (unint64_t)&v109);
        v89 = *(unsigned int *)(a1 + 36);
        v91 = *(_QWORD *)(a1 + 24);
        v88 = *v90;
      }
      else
      {
        v91 = *v106;
      }
      *(_DWORD *)(v91 + 4 * v89) = v88;
      ++*(_DWORD *)(a1 + 36);
LABEL_163:
      std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
LABEL_164:
      v84 = v111;
      if (v111)
      {
        v111 = 0;
        v112 = 0;
        WTF::fastFree(v84, v59);
      }
      WebCore::AncestorSubgridIterator::operator++((uint64_t)&v115, v59);
      v39 = v116;
      if (!v116)
        goto LABEL_58;
LABEL_57:
      v40 = *((_QWORD *)v39 + 1);
      if (!v40)
        goto LABEL_58;
    }
  }
  if (v105)
  {
    if (*(_DWORD *)v105 == 1)
    {
      WTF::fastFree(v105, v19);
      v39 = v116;
    }
    else
    {
      --*(_DWORD *)v105;
    }
  }
  v116 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 1)
      WTF::fastFree(v39, v19);
    else
      --*(_DWORD *)v39;
  }
  v95 = v115;
  v115 = 0;
  if (v95)
  {
    if (*(_DWORD *)v95 == 1)
      WTF::fastFree(v95, v19);
    else
      --*(_DWORD *)v95;
  }
  if ((v100 & 1) == 0)
  {
    if (*(_DWORD *)v105 == 1)
      WTF::fastFree(v105, v19);
    else
      --*(_DWORD *)v105;
  }
  return a1;
}

uint64_t WebCore::NamedLineCollection::firstPosition(WebCore::NamedLineCollection *this)
{
  unsigned int **v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int **v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  int v15;
  signed int v16;

  v1 = (unsigned int **)*((_QWORD *)this + 2);
  if (!v1)
  {
    v8 = 52;
    if (!*((_BYTE *)this + 60))
      v8 = 48;
    v9 = *(_DWORD *)((char *)this + v8);
    v10 = *(unsigned int ***)this;
    if (v9)
    {
      if (!v10)
        goto LABEL_18;
      if (!*((_DWORD *)v10 + 3))
      {
        __break(0xC471u);
        JUMPOUT(0x1964CF620);
      }
      v11 = **v10;
      if (v11 > *((_DWORD *)this + 10))
      {
LABEL_18:
        v12 = *((_QWORD *)this + 1);
        if (v12)
        {
          if (!*(_DWORD *)(v12 + 12))
          {
            __break(0xC471u);
            JUMPOUT(0x1964CF638);
          }
          return (*((_DWORD *)this + 10) + **(_DWORD **)v12);
        }
        else
        {
          v15 = *((_DWORD *)v10 + 3);
          if (*((_BYTE *)this + 60))
          {
            if (!v15)
            {
              __break(0xC471u);
              JUMPOUT(0x1964CF640);
            }
            return **v10 + v9;
          }
          else
          {
            if (!v15)
            {
LABEL_53:
              __break(0xC471u);
              JUMPOUT(0x1964CF600);
            }
            return v9 + **v10 - 1;
          }
        }
      }
      return v11;
    }
    if (!*((_DWORD *)v10 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x1964CF628);
    }
    v13 = *v10;
    return *v13;
  }
  v2 = *(_QWORD *)this;
  if (!*(_QWORD *)this)
  {
    v6 = *((_QWORD *)this + 1);
    if (v6)
    {
      if (*((_BYTE *)this + 60))
      {
        if (!*((_DWORD *)this + 13))
          goto LABEL_24;
      }
      else if (!*((_DWORD *)this + 12))
      {
LABEL_36:
        if (!*(_DWORD *)(v2 + 12))
        {
          __break(0xC471u);
          JUMPOUT(0x1964CF618);
        }
        v5 = **(_DWORD **)v2;
        goto LABEL_38;
      }
LABEL_34:
      if (!*(_DWORD *)(v6 + 12))
      {
        __break(0xC471u);
        JUMPOUT(0x1964CF610);
      }
      v5 = *((_DWORD *)this + 10) + **(_DWORD **)v6;
      goto LABEL_38;
    }
LABEL_24:
    if (!*((_DWORD *)v1 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x1964CF630);
    }
    v13 = *v1;
    return *v13;
  }
  v3 = 52;
  if (!*((_BYTE *)this + 60))
    v3 = 48;
  v4 = *(_DWORD *)((char *)this + v3);
  if (!v4)
    goto LABEL_36;
  if (!*(_DWORD *)(v2 + 12))
  {
    __break(0xC471u);
    JUMPOUT(0x1964CF608);
  }
  v5 = **(_DWORD **)v2;
  if (v5 > *((_DWORD *)this + 10))
  {
    v6 = *((_QWORD *)this + 1);
    if (!v6)
    {
      v7 = v4 + v5 - 1;
      v5 += v4;
      if (!*((_BYTE *)this + 60))
        v5 = v7;
      goto LABEL_38;
    }
    goto LABEL_34;
  }
LABEL_38:
  if (!*((_DWORD *)v1 + 3))
    goto LABEL_53;
  v16 = **v1;
  if (v16 >= (int)v5)
    return v5;
  else
    return v16;
}

uint64_t WebCore::GridPositionsResolver::explicitGridColumnCount(WebCore::GridPositionsResolver *this, const WebCore::RenderGrid *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v17;

  if (WebCore::RenderElement::establishesIndependentFormattingContext(this))
  {
    v3 = *((_QWORD *)this + 11);
  }
  else
  {
    v3 = *((_QWORD *)this + 11);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 80) + 259))
    {
      v4 = *((_QWORD *)this + 4);
      if (v4)
      {
        v5 = *(_QWORD *)(v4 + 8);
        if (v5)
        {
          if (*(_BYTE *)(v5 + 46) == 12)
          {
            v6 = *(_QWORD *)(v4 + 8);
            do
            {
              v7 = v6;
              v8 = *(_QWORD *)(v6 + 32);
              if (!v8)
                break;
              v6 = *(_QWORD *)(v8 + 8);
              if (!v6)
                break;
            }
            while (*(_BYTE *)(v6 + 46) == 12
                 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 40) + 80) + 259));
            v9 = v7;
            do
            {
              v10 = v9;
              v11 = *(_QWORD *)(v9 + 32);
              if (!v11)
                break;
              v9 = *(_QWORD *)(v11 + 8);
              if (!v9)
                break;
            }
            while (*(_BYTE *)(v9 + 46) == 12
                 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 88) + 40) + 80) + 258));
            if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 88) + 40) + 80) + 260)
              || !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 88) + 40) + 80) + 261))
            {
              v17 = WebCore::RenderGrid::gridSpanForChild(v5, (uint64_t)this, ((*((_BYTE *)this + 21) & 0x10) == 0) != ((*(_BYTE *)(v5 + 21) & 0x10) == 0));
              return (HIDWORD(v17) - v17);
            }
          }
        }
      }
    }
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 80);
  v13 = *(unsigned int *)(*((_QWORD *)this + 41) + 64) + (unint64_t)*(unsigned int *)(v12 + 132);
  v14 = *(unsigned int *)(v12 + 84);
  if (v13 > v14)
    LODWORD(v14) = v13;
  v15 = WebCore::GridPosition::gMaxPositionForTesting;
  if (!byte_1EE2F9580)
    v15 = 1000000;
  if (v15 >= v14)
    return v14;
  else
    return v15;
}

uint64_t WebCore::GridPositionsResolver::explicitGridRowCount(WebCore::GridPositionsResolver *this, const WebCore::RenderGrid *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  uint64_t v9;
  WebCore::RenderGrid *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  if (WebCore::RenderElement::establishesIndependentFormattingContext(this))
  {
    v3 = *((_QWORD *)this + 11);
  }
  else
  {
    v3 = *((_QWORD *)this + 11);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 40) + 80) + 258))
    {
      v13 = *((_QWORD *)this + 11);
      v9 = *((_QWORD *)this + 4);
      if (v9 && (v10 = *(WebCore::RenderGrid **)(v9 + 8)) != 0 && *((_BYTE *)v10 + 46) == 12)
      {
        v11 = WebCore::RenderGrid::areMasonryRows(v10);
        v3 = v13;
        if ((v11 & 1) == 0)
        {
          v12 = WebCore::RenderGrid::gridSpanForChild(v10, this, ((*((_BYTE *)this + 21) & 0x10) == 0) == ((*((_BYTE *)v10 + 21) & 0x10) == 0));
          return (HIDWORD(v12) - v12);
        }
      }
      else
      {
        v3 = *((_QWORD *)this + 11);
      }
    }
  }
  v4 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 80);
  v5 = *(unsigned int *)(*((_QWORD *)this + 41) + 68) + (unint64_t)*(unsigned int *)(v4 + 148);
  v6 = *(unsigned int *)(v4 + 80);
  if (v5 > v6)
    LODWORD(v6) = v5;
  v7 = WebCore::GridPosition::gMaxPositionForTesting;
  if (!byte_1EE2F9580)
    v7 = 1000000;
  if (v7 >= v6)
    return v6;
  else
    return v7;
}

uint64_t WebCore::GridPositionsResolver::spanSizeForAutoPlacedItem(WebCore::RenderElement *a1, WTF::StringImpl *a2)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  uint64_t v4;
  unsigned __int8 *v6;
  unint64_t v7;
  int v8;
  WTF::StringImpl *v9;
  unsigned __int8 v10[4];
  int v11;
  WTF::StringImpl *v12;
  _BYTE v13[4];
  int v14;
  WTF::StringImpl *v15;

  v13[0] = 0;
  v14 = 0;
  v15 = 0;
  v10[0] = 0;
  v11 = 0;
  v12 = 0;
  WebCore::adjustGridPositionsFromStyle(a1, a2, (WebCore::GridPosition *)v13, v10);
  v3 = v12;
  if (v13[0] || v10[0])
  {
    if (v13[0] == 2)
      v6 = v13;
    else
      v6 = v10;
    v7 = *(_QWORD *)v6;
    v9 = v12;
    if (v13[0] == 2)
      v3 = v15;
    if (v3)
    {
      v8 = *(_DWORD *)v3;
      *(_DWORD *)v3 += 2;
      v4 = HIDWORD(v7);
      if (v8)
        *(_DWORD *)v3 = v8;
      else
        WTF::StringImpl::destroy(v3, v2);
    }
    else
    {
      v4 = HIDWORD(v7);
    }
    v3 = v9;
  }
  else
  {
    v4 = 1;
  }
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  if (v15)
  {
    if (*(_DWORD *)v15 == 2)
      WTF::StringImpl::destroy(v15, v2);
    else
      *(_DWORD *)v15 -= 2;
  }
  return v4;
}

uint64_t WebCore::adjustGridPositionsFromStyle(WebCore::RenderElement *this, WTF::StringImpl *a2, WebCore::GridPosition *a3, unsigned __int8 *a4)
{
  int v6;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _DWORD *v11;
  WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  _DWORD *v17;
  int v18;
  uint64_t result;
  int v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  int v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  WebCore::GridPosition *v34;
  uint64_t v35;

  v6 = (int)a2;
  v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 88);
  v9 = (_QWORD *)(v8 + 40);
  v10 = (_QWORD *)(v8 + 8);
  if ((_DWORD)a2)
    v10 = v9;
  *(_QWORD *)a3 = *v10;
  v11 = (_DWORD *)v10[1];
  if (v11)
    *v11 += 2;
  v12 = (WTF::StringImpl *)*((_QWORD *)a3 + 1);
  *((_QWORD *)a3 + 1) = v11;
  if (v12)
  {
    if (*(_DWORD *)v12 == 2)
      WTF::StringImpl::destroy(v12, a2);
    else
      *(_DWORD *)v12 -= 2;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 88);
  v14 = (uint64_t *)(v13 + 56);
  v15 = (uint64_t *)(v13 + 24);
  if (v6)
    v15 = v14;
  v16 = *v15;
  *(_QWORD *)a4 = *v15;
  v17 = (_DWORD *)v15[1];
  v18 = v16;
  if (v17)
    *v17 += 2;
  result = *((_QWORD *)a4 + 1);
  *((_QWORD *)a4 + 1) = v17;
  if (result)
  {
    if (*(_DWORD *)result == 2)
    {
      result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      v18 = *a4;
    }
    else
    {
      *(_DWORD *)result -= 2;
    }
  }
  if (!*(_BYTE *)a3)
  {
    if (v18 != 2)
    {
      v20 = *a4;
LABEL_18:
      if (v20 == 2)
        return result;
      goto LABEL_19;
    }
    result = *((_QWORD *)a4 + 1);
    if (result)
    {
      v24 = *(_DWORD *)result;
      *(_DWORD *)result += 2;
      if (v24)
        *(_DWORD *)result = v24;
      else
        WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      v18 = 2;
      *a4 = 2;
      v25 = WebCore::GridPosition::gMaxPositionForTesting;
      if (!byte_1EE2F9580)
        v25 = 1000000;
      if (-v25 > 1)
        v26 = -v25;
      else
        v26 = 1;
      if (v25 > 1)
        v25 = v26;
      *((_DWORD *)a4 + 1) = v25;
      result = *((_QWORD *)a4 + 1);
      *((_QWORD *)a4 + 1) = 0;
      if (!result)
        goto LABEL_28;
      if (*(_DWORD *)result == 2)
      {
        result = WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
        v18 = *a4;
        goto LABEL_28;
      }
      *(_DWORD *)result -= 2;
    }
    v18 = 2;
LABEL_28:
    v22 = *(unsigned __int8 *)a3;
    goto LABEL_29;
  }
  if (*(_BYTE *)a3 != 2)
    goto LABEL_28;
  if (v18 != 2)
  {
    v22 = 2;
LABEL_29:
    if (v18)
      v23 = 0;
    else
      v23 = v22 == 2;
    if (v23)
    {
      result = *((_QWORD *)a3 + 1);
      if (!result)
        return result;
      v27 = *(_DWORD *)result;
      *(_DWORD *)result += 2;
      if (v27)
        *(_DWORD *)result = v27;
      else
        WTF::StringImpl::destroy((WTF::StringImpl *)result, a2);
      v35 = 0;
      result = WebCore::GridPosition::setSpanPosition((uint64_t)a3, (WTF::StringImpl *)1, (const WTF::String *)&v35);
      v22 = *(unsigned __int8 *)a3;
    }
    v20 = *a4;
    if (v22)
    {
      if (v22 == 2 || *a4)
        return result;
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  *a4 = 0;
  *((_DWORD *)a4 + 1) = 0;
  if (*(_BYTE *)a3)
  {
    v18 = 0;
    goto LABEL_28;
  }
LABEL_19:
  if (*((_BYTE *)this + 46) == 12)
  {
    result = WebCore::RenderElement::establishesIndependentFormattingContext(this);
    if ((result & 1) == 0)
    {
      v21 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 80);
      if (v6)
      {
        if (!*(_BYTE *)(v21 + 258))
          return result;
      }
      else if (!*(_BYTE *)(v21 + 259))
      {
        return result;
      }
      v28 = *((_QWORD *)this + 4);
      if (v28)
      {
        result = *(_QWORD *)(v28 + 8);
        if (result)
        {
          if (*(_BYTE *)(result + 46) == 12)
          {
            v29 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 11) + 40) + 80);
            if (v6 == 1)
            {
              result = WebCore::RenderGrid::areMasonryRows((WebCore::RenderGrid *)result);
              if ((result & 1) != 0)
                return result;
            }
            else
            {
              result = WebCore::RenderGrid::areMasonryColumns((WebCore::RenderGrid *)result);
              if ((result & 1) != 0)
                return result;
            }
            v30 = 176;
            if (!v6)
              v30 = 168;
            v31 = *(_QWORD *)(v29 + v30);
            if (v31)
              v32 = *(_DWORD *)(v31 - 12) - 1;
            else
              v32 = -1;
            if (v32 <= 1)
              v33 = 1;
            else
              v33 = v32;
            if (*(_BYTE *)a3)
            {
              v35 = 0;
              v34 = (WebCore::GridPosition *)a4;
            }
            else
            {
              v35 = 0;
              v34 = a3;
            }
            return WebCore::GridPosition::setSpanPosition((uint64_t)v34, (WTF::StringImpl *)v33, (const WTF::String *)&v35);
          }
        }
      }
    }
  }
  return result;
}

uint64_t WebCore::GridPositionsResolver::resolveGridPositionsFromStyle(WebCore::GridPositionsResolver *a1, WebCore::RenderElement *this, WTF::StringImpl *a3)
{
  int v3;
  WTF::StringImpl *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned __int8 v26[4];
  int v27;
  WTF::StringImpl *v28;
  unsigned __int8 v29[4];
  int v30;
  WTF::StringImpl *v31;

  v3 = (int)a3;
  v29[0] = 0;
  v30 = 0;
  v31 = 0;
  v26[0] = 0;
  v27 = 0;
  v28 = 0;
  WebCore::adjustGridPositionsFromStyle(this, a3, (WebCore::GridPosition *)v29, v26);
  v6 = 2 * (v3 != 0);
  if (v3)
    v7 = 3;
  else
    v7 = 1;
  v8 = v26[0] & 0xFD;
  if ((v29[0] & 0xFD) == 0)
  {
    if ((v26[0] & 0xFD) == 0)
    {
      v9 = WebCore::GridPosition::gMaxPositionForTesting;
      if (!byte_1EE2F9580)
        v9 = 1000000;
      if (v9 >= 1)
        v10 = 1;
      else
        v10 = v9;
      if (v10 - 1 <= -v9)
        v11 = -v9;
      else
        v11 = (v10 - 1);
      LODWORD(v12) = 1 - v9;
      if ((int)v12 <= v10)
        v12 = v10;
      else
        v12 = v12;
      v13 = v11 | (v12 << 32);
      goto LABEL_18;
    }
    v25 = v6;
    v23 = (WTF::StringImpl *)WebCore::resolveGridPositionFromStyle(a1, v26, v7);
    v21 = v29;
    v22 = (uint64_t)a1;
    v24 = v25;
LABEL_52:
    v13 = WebCore::resolveGridPositionAgainstOppositePosition(v22, v23, (uint64_t)v21, v24);
    goto LABEL_18;
  }
  v15 = WebCore::resolveGridPositionFromStyle(a1, v29, v6);
  if (!v8)
  {
    v21 = v26;
    v22 = (uint64_t)a1;
    v23 = (WTF::StringImpl *)v15;
    v24 = v7;
    goto LABEL_52;
  }
  v16 = WebCore::resolveGridPositionFromStyle(a1, v26, v7);
  if ((_DWORD)v15 == v16)
    LODWORD(v17) = v15 + 1;
  else
    LODWORD(v17) = v16;
  if ((int)v15 <= v16)
    LODWORD(v18) = v15;
  else
    LODWORD(v18) = v16;
  if ((int)v15 > v16)
    LODWORD(v17) = v15;
  if ((int)v18 > (int)v17)
    LODWORD(v17) = v18;
  v19 = WebCore::GridPosition::gMaxPositionForTesting;
  if (!byte_1EE2F9580)
    v19 = 1000000;
  if (v19 - 1 < (int)v18)
    LODWORD(v18) = v19 - 1;
  if ((int)v18 <= -v19)
    v18 = -v19;
  else
    v18 = v18;
  v20 = 1 - v19;
  if (v19 < (int)v17)
    LODWORD(v17) = v19;
  if (v20 <= (int)v17)
    v17 = v17;
  else
    v17 = v20;
  v13 = v18 | (v17 << 32);
LABEL_18:
  if (v28)
  {
    if (*(_DWORD *)v28 == 2)
      WTF::StringImpl::destroy(v28, v5);
    else
      *(_DWORD *)v28 -= 2;
  }
  if (v31)
  {
    if (*(_DWORD *)v31 == 2)
      WTF::StringImpl::destroy(v31, v5);
    else
      *(_DWORD *)v31 -= 2;
  }
  return v13;
}

uint64_t WebCore::resolveGridPositionFromStyle(WebCore::GridPositionsResolver *this, unsigned __int8 *a2, unsigned int a3)
{
  int v6;
  WTF::StringImpl *v7;
  int v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  int v11;
  uint64_t Position;
  unsigned int v13;
  WTF *v14;
  unsigned int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  WTF::StringImpl *v22;
  void *v23;
  WTF *v24;
  const WebCore::RenderGrid *v25;
  WTF *v26;
  int v27;
  WTF::StringImpl *v28;
  WTF::StringImpl *v29[3];
  WTF *v30;
  int v31;
  int v32;
  char v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF *v38;
  int v39;
  unsigned int v40;
  int v41;
  char v42;

  v6 = *a2;
  if (v6 == 1)
  {
    v7 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
    if (v7)
    {
      v8 = *(_DWORD *)v7;
      *(_DWORD *)v7 += 2;
      if (v8)
        *(_DWORD *)v7 = v8;
      else
        WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
      v9 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
      if (v9)
      {
        *(_DWORD *)v9 += 2;
        v29[0] = v9;
        WebCore::NamedLineCollection::NamedLineCollection((uint64_t)&v35, (uint64_t)this, v29, a3, 0);
        if (*(_DWORD *)v9 == 2)
          WTF::StringImpl::destroy(v9, v10);
        else
          *(_DWORD *)v9 -= 2;
      }
      else
      {
        v29[0] = 0;
        WebCore::NamedLineCollection::NamedLineCollection((uint64_t)&v35, (uint64_t)this, v29, a3, 0);
      }
      v11 = *((_DWORD *)a2 + 1);
      if (v11 < 1)
      {
        v16 = v40;
        if (v35 || v36 && (!v42 || v41) || v37)
        {
          if (v11)
          {
            v17 = -v11;
            do
            {
              if ((v16 & 0x80000000) != 0
                || WebCore::NamedLineCollectionBase::contains((WebCore::NamedLineCollectionBase *)&v35, v16))
              {
                --v17;
              }
              --v16;
            }
            while (v17);
          }
        }
        else
        {
          if ((int)v40 >= -1)
            v18 = -1;
          else
            v18 = v40;
          v16 = v18 + v11;
        }
        Position = v16 + 1;
      }
      else if (v35 || v36 && (!v42 || v41) || v37)
      {
        LODWORD(Position) = -1;
        v13 = v40;
        do
        {
          v10 = (WTF::StringImpl *)(Position + 1);
          if (v10 > v13
            || WebCore::NamedLineCollectionBase::contains((WebCore::NamedLineCollectionBase *)&v35, v10))
          {
            --v11;
          }
          Position = (Position + 1);
        }
        while (v11);
      }
      else
      {
        Position = v40 + v11;
      }
      v14 = v38;
      if (v38)
      {
        v38 = 0;
        v39 = 0;
        WTF::fastFree(v14, v10);
      }
    }
    else
    {
      v19 = *((_DWORD *)a2 + 1);
      Position = (v19 - 1);
      if (v19 < 1)
      {
        v20 = v19 + 1;
        if (a3 > 1)
          v21 = WebCore::GridPositionsResolver::explicitGridRowCount(this, (const WebCore::RenderGrid *)a2);
        else
          v21 = WebCore::GridPositionsResolver::explicitGridColumnCount(this, (const WebCore::RenderGrid *)a2);
        return (v20 + v21);
      }
    }
  }
  else if (v6 == 3)
  {
    v22 = (WTF::StringImpl *)*((_QWORD *)a2 + 1);
    if (v22)
      *(_DWORD *)v22 += 2;
    v28 = v22;
    v34 = v22;
    WebCore::NamedLineCollection::NamedLineCollection((uint64_t)&v35, (uint64_t)this, &v34, a3, 1);
    if (v35 || v36 && (!v42 || v41) || v37)
    {
      Position = WebCore::NamedLineCollection::firstPosition((WebCore::NamedLineCollection *)&v35);
    }
    else
    {
      WebCore::NamedLineCollection::NamedLineCollection((uint64_t)v29, (uint64_t)this, &v34, a3, 0);
      if (v29[0] || v29[1] && (!v33 || v32) || v29[2])
      {
        Position = WebCore::NamedLineCollection::firstPosition((WebCore::NamedLineCollection *)v29);
      }
      else
      {
        if (a3 > 1)
          v27 = WebCore::GridPositionsResolver::explicitGridRowCount(this, v25);
        else
          v27 = WebCore::GridPositionsResolver::explicitGridColumnCount(this, v25);
        Position = (v27 + 1);
      }
      v26 = v30;
      if (v30)
      {
        v30 = 0;
        v31 = 0;
        WTF::fastFree(v26, v23);
      }
    }
    v24 = v38;
    if (v38)
    {
      v38 = 0;
      v39 = 0;
      WTF::fastFree(v24, v23);
    }
    if (v28)
    {
      if (*(_DWORD *)v28 == 2)
        WTF::StringImpl::destroy(v28, (WTF::StringImpl *)v23);
      else
        *(_DWORD *)v28 -= 2;
    }
  }
  else
  {
    return 0;
  }
  return Position;
}

uint64_t WebCore::resolveGridPositionAgainstOppositePosition(uint64_t a1, WTF::StringImpl *a2, uint64_t a3, unsigned int a4)
{
  int v5;
  WTF::StringImpl *v8;
  int v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  signed int v24;
  int v25;
  int v26;
  WTF *v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WTF::StringImpl *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  WTF *v48;
  int v49;
  int v50;
  int v51;
  char v52;

  v5 = (int)a2;
  if (*(_BYTE *)a3)
  {
    v8 = *(WTF::StringImpl **)(a3 + 8);
    if (v8)
    {
      v9 = *(_DWORD *)v8;
      *(_DWORD *)v8 += 2;
      if (v9)
        *(_DWORD *)v8 = v9;
      else
        WTF::StringImpl::destroy(v8, a2);
      v10 = *(WTF::StringImpl **)(a3 + 8);
      if (v10)
      {
        *(_DWORD *)v10 += 2;
        v44 = v10;
        WebCore::NamedLineCollection::NamedLineCollection((uint64_t)&v45, a1, &v44, a4, 0);
        if (*(_DWORD *)v10 == 2)
          WTF::StringImpl::destroy(v10, v11);
        else
          *(_DWORD *)v10 -= 2;
      }
      else
      {
        v44 = 0;
        WebCore::NamedLineCollection::NamedLineCollection((uint64_t)&v45, a1, &v44, a4, 0);
      }
      v12 = *(_DWORD *)(a3 + 4);
      if ((a4 & 0xFFFFFFFD) != 0)
      {
        if (v5 < 0)
          v13 = -1;
        else
          v13 = v5;
        if (v45 || v46 && (!v52 || v51) || v47)
        {
          if (v12)
          {
            v14 = v50;
            do
            {
              v11 = (WTF::StringImpl *)(v13 + 1);
              if (v11 > v14
                || WebCore::NamedLineCollectionBase::contains((WebCore::NamedLineCollectionBase *)&v45, v11))
              {
                --v12;
              }
              ++v13;
            }
            while (v12);
          }
        }
        else
        {
          v33 = v13 + 1;
          if (v13 + 1 <= (v50 + 1))
            v33 = v50 + 1;
          v13 = v12 + v33 - 1;
        }
      }
      else
      {
        if (v50 >= v5 - 1)
          v24 = v5 - 1;
        else
          v24 = v50;
        if (v45 || v46 && (!v52 || v51) || v47)
        {
          for (; v12; --v24)
          {
            if (v24 < 0 || WebCore::NamedLineCollectionBase::contains((WebCore::NamedLineCollectionBase *)&v45, v24))
              --v12;
          }
        }
        else
        {
          if (v24 >= -1)
            v34 = -1;
          else
            v34 = v24;
          v24 = v34 - v12;
        }
        v13 = v5;
        v5 = v24 + 1;
      }
      v25 = byte_1EE2F9580;
      v26 = WebCore::GridPosition::gMaxPositionForTesting;
      v27 = v48;
      if (v48)
      {
        v48 = 0;
        v49 = 0;
        WTF::fastFree(v27, v11);
      }
      if (v25)
        v28 = v26;
      else
        v28 = 1000000;
      LODWORD(v29) = 1 - v28;
      if (v28 >= v13)
        v30 = v13;
      else
        v30 = v28;
      if ((int)v29 <= v30)
        v29 = v30;
      else
        v29 = v29;
      v31 = v28 - 1;
      if (v28 - 1 >= v5)
        v31 = v5;
      if (v31 <= -v28)
        v32 = -v28;
      else
        v32 = v31;
      return v32 | (v29 << 32);
    }
    else
    {
      v35 = *(_DWORD *)(a3 + 4);
      LODWORD(v36) = WebCore::GridPosition::gMaxPositionForTesting;
      if (!byte_1EE2F9580)
        LODWORD(v36) = 1000000;
      v37 = -(int)v36;
      v38 = 1 - v36;
      LODWORD(v39) = v35 + (_DWORD)a2;
      if ((int)v36 - 1 >= (int)a2)
        LODWORD(v40) = (_DWORD)a2;
      else
        LODWORD(v40) = v36 - 1;
      if ((int)v40 <= v37)
        v40 = v37;
      else
        v40 = v40;
      if ((int)v36 < (int)v39)
        LODWORD(v39) = v36;
      if (v38 <= (int)v39)
        v39 = v39;
      else
        v39 = v38;
      v41 = v40 | (v39 << 32);
      LODWORD(v42) = (_DWORD)a2 - v35;
      if ((int)v36 - 1 < (int)v42)
        LODWORD(v42) = v36 - 1;
      if ((int)v42 <= v37)
        v42 = v37;
      else
        v42 = v42;
      if ((int)v36 >= (int)a2)
        LODWORD(v36) = (_DWORD)a2;
      if (v38 <= (int)v36)
        v36 = v36;
      else
        v36 = v38;
      v43 = v42 | (v36 << 32);
      if ((a4 & 0xFFFFFFFD) != 0)
        return v41;
      else
        return v43;
    }
  }
  else
  {
    LODWORD(v15) = WebCore::GridPosition::gMaxPositionForTesting;
    if (!byte_1EE2F9580)
      LODWORD(v15) = 1000000;
    LODWORD(v16) = -(int)v15;
    v17 = v15 - 1;
    v18 = 1 - v15;
    if ((int)v15 - 1 >= (int)a2)
      LODWORD(v19) = (_DWORD)a2;
    else
      LODWORD(v19) = v15 - 1;
    if ((int)v19 <= (int)v16)
      v19 = v16;
    else
      v19 = v19;
    if ((int)v15 >= (int)a2 + 1)
      LODWORD(v20) = (_DWORD)a2 + 1;
    else
      LODWORD(v20) = v15;
    if (v18 <= (int)v20)
      v20 = v20;
    else
      v20 = v18;
    v21 = v19 | (v20 << 32);
    if (v17 >= (int)a2 - 1)
      v17 = (_DWORD)a2 - 1;
    if (v17 <= (int)v16)
      v16 = v16;
    else
      v16 = v17;
    if ((int)v15 >= (int)a2)
      LODWORD(v15) = (_DWORD)a2;
    if (v18 <= (int)v15)
      v15 = v15;
    else
      v15 = v18;
    v22 = v16 | (v15 << 32);
    if ((a4 & 0xFFFFFFFD) != 0)
      return v21;
    else
      return v22;
  }
}

uint64_t WebCore::ListStyleType::isSquare(WebCore::ListStyleType *this)
{
  if (!*(_BYTE *)this)
    JUMPOUT(0x19AEA53F4);
  return 0;
}

WebCore::NinePieceImage *WebCore::NinePieceImage::NinePieceImage(WebCore::NinePieceImage *a1, int a2)
{
  uint64_t *v3;
  _DWORD *v4;
  WebCore::NinePieceImage::Data *v6;

  if (a2)
  {
    v3 = WebCore::NinePieceImage::defaultMaskData(a1);
  }
  else
  {
    v3 = (uint64_t *)&WebCore::NinePieceImage::defaultData(void)::data;
    {
      v6 = (WebCore::NinePieceImage::Data *)WTF::fastMalloc((WTF *)0x70);
      WebCore::NinePieceImage::Data::Data(v6);
      v3 = (uint64_t *)&WebCore::NinePieceImage::defaultData(void)::data;
      WebCore::NinePieceImage::defaultData(void)::data = v6;
    }
  }
  v4 = (_DWORD *)*v3;
  *v4 = *(_DWORD *)*v3 + 1;
  *(_QWORD *)a1 = v4;
  return a1;
}

uint64_t *WebCore::NinePieceImage::NinePieceImage(uint64_t *a1, uint64_t *a2, WebCore::LengthBox *a3, char a4, const WebCore::LengthBox *a5, char a6, const WebCore::LengthBox *a7, char a8, char a9)
{
  uint64_t v16;
  uint64_t v17;
  unsigned int v19;
  char v20;
  unsigned int v21;
  char v22;
  unsigned int v23;
  char v24;
  unsigned int v25;
  char v26;
  unsigned int v27;
  char v28;
  unsigned int v29;
  char v30;
  unsigned int v31;
  char v32;
  unsigned int v33;
  char v34;
  unsigned int v35;
  char v36;
  unsigned int v37;
  char v38;
  unsigned int v39;
  char v40;
  unsigned int v41;
  char v42;
  unsigned int v43;
  char v44;
  unsigned int v45;
  char v46;
  unsigned int v47;
  char v48;
  unsigned int v49;
  char v50;
  unsigned int v51;
  char v52;
  unsigned int v53;
  char v54;
  unsigned int v55;
  char v56;
  unsigned int v57;
  char v58;
  unsigned int v59;
  char v60;
  unsigned int v61;
  char v62;
  unsigned int v63;
  char v64;
  unsigned int v65;
  char v66;

  WebCore::LengthBox::LengthBox((WebCore::LengthBox *)&v35, a3);
  WebCore::LengthBox::LengthBox((WebCore::LengthBox *)&v27, a5);
  WebCore::LengthBox::LengthBox((WebCore::LengthBox *)&v19, a7);
  v16 = WTF::fastMalloc((WTF *)0x70);
  WebCore::LengthBox::LengthBox((WebCore::LengthBox *)&v59, (const WebCore::LengthBox *)&v35);
  WebCore::LengthBox::LengthBox((WebCore::LengthBox *)&v51, (const WebCore::LengthBox *)&v27);
  WebCore::LengthBox::LengthBox((WebCore::LengthBox *)&v43, (const WebCore::LengthBox *)&v19);
  *(_DWORD *)v16 = 1;
  *(_BYTE *)(v16 + 4) = a4;
  *(_BYTE *)(v16 + 5) = a6;
  *(_BYTE *)(v16 + 6) = a8;
  *(_BYTE *)(v16 + 7) = a9;
  v17 = *a2;
  *a2 = 0;
  *(_QWORD *)(v16 + 8) = v17;
  WebCore::LengthBox::LengthBox((WebCore::LengthBox *)(v16 + 16), (const WebCore::LengthBox *)&v59);
  WebCore::LengthBox::LengthBox((WebCore::LengthBox *)(v16 + 48), (const WebCore::LengthBox *)&v51);
  WebCore::LengthBox::LengthBox((WebCore::LengthBox *)(v16 + 80), (const WebCore::LengthBox *)&v43);
  if (v50 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v49);
  }
  if (v48 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v47);
  }
  if (v46 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v45);
  }
  if (v44 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v43);
  }
  if (v58 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v57);
  }
  if (v56 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v55);
  }
  if (v54 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v53);
  }
  if (v52 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v51);
  }
  if (v66 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v65);
  }
  if (v64 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v63);
  }
  if (v62 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v61);
  }
  if (v60 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v59);
  }
  *a1 = v16;
  if (v26 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v25);
  }
  if (v24 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v23);
  }
  if (v22 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v21);
  }
  if (v20 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v19);
  }
  if (v34 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v33);
  }
  if (v32 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v31);
  }
  if (v30 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v29);
  }
  if (v28 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v27);
  }
  if (v42 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v41);
  }
  if (v40 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v39);
  }
  if (v38 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v37);
  }
  if (v36 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v35);
  }
  return a1;
}

int8x8_t *WebCore::RenderStyle::create@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int8x8_t *result;
  uint64_t v8;

  {
    v8 = a1;
    result = WebCore::RenderStyle::RenderStyle(&WebCore::RenderStyle::defaultStyle(void)::style);
    a1 = v8;
  }
  v2 = qword_1ECE913C0;
  ++*(_DWORD *)qword_1ECE913C0;
  v3 = qword_1ECE913C8;
  v4 = (_DWORD *)qword_1ECE913D0;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  ++*v4;
  v5 = qword_1ECE913D8;
  ++*(_DWORD *)qword_1ECE913D8;
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = qword_1ECE913E0;
  *(_QWORD *)(a1 + 48) = 0;
  v6 = qword_1ECE913F0;
  ++*(_DWORD *)qword_1ECE913F0;
  *(_QWORD *)(a1 + 56) = v6;
  return result;
}

_QWORD *WebCore::RenderStyle::clone@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;

  v3 = (_DWORD *)this[1];
  ++*v3;
  v4 = this[2];
  v5 = (_DWORD *)this[3];
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  ++*v5;
  v6 = (_DWORD *)this[4];
  ++*v6;
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 24) = v5;
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = this[5];
  *(_QWORD *)(a2 + 48) = 0;
  v7 = (_DWORD *)this[7];
  ++*v7;
  *(_QWORD *)(a2 + 56) = v7;
  return this;
}

uint64_t WebCore::RenderStyle::createPtr@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;

  {
    WebCore::RenderStyle::RenderStyle(&WebCore::RenderStyle::defaultStyle(void)::style);
  }
  result = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)result = 0;
  v4 = qword_1ECE913C0;
  ++*(_DWORD *)qword_1ECE913C0;
  *(_QWORD *)(result + 8) = v4;
  *(_QWORD *)(result + 16) = qword_1ECE913C8;
  v5 = qword_1ECE913D0;
  v6 = (_DWORD *)qword_1ECE913D8;
  ++*(_DWORD *)qword_1ECE913D0;
  ++*v6;
  *(_QWORD *)(result + 24) = v5;
  *(_QWORD *)(result + 32) = v6;
  *(_QWORD *)(result + 40) = qword_1ECE913E0;
  *(_QWORD *)(result + 48) = 0;
  v7 = qword_1ECE913F0;
  ++*(_DWORD *)qword_1ECE913F0;
  *(_QWORD *)(result + 56) = v7;
  *a1 = result;
  return result;
}

void WebCore::RenderStyle::copyPseudoElementsFrom(WebCore::RenderStyle *this, const WebCore::RenderStyle *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::RenderStyle **v5;
  uint64_t v6;
  WebCore::RenderStyle *v7;
  WebCore::RenderStyle *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  _BYTE v16[8];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WebCore::RenderStyle *v24;

  v2 = *((_QWORD *)a2 + 6);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 + 12);
    if ((_DWORD)v3)
    {
      v5 = *(WebCore::RenderStyle ***)v2;
      v6 = 8 * v3;
      do
      {
        v7 = *v5++;
        WebCore::RenderStyle::cloneIncludingPseudoElements(v7, a2, (uint64_t)v16);
        v8 = (WebCore::RenderStyle *)WTF::fastMalloc((WTF *)0x40);
        *(_DWORD *)v8 = 0;
        v9 = v17;
        v17 = 0;
        *((_QWORD *)v8 + 1) = v9;
        *((_QWORD *)v8 + 2) = v18;
        v10 = v19;
        v19 = 0;
        *((_QWORD *)v8 + 3) = v10;
        v11 = v20;
        v20 = 0;
        *((_QWORD *)v8 + 4) = v11;
        *((_QWORD *)v8 + 5) = v21;
        v12 = v22;
        v22 = 0;
        *((_QWORD *)v8 + 6) = v12;
        v13 = v23;
        v23 = 0;
        *((_QWORD *)v8 + 7) = v13;
        v24 = v8;
        WebCore::RenderStyle::addCachedPseudoStyle((uint64_t)this, (uint64_t *)&v24);
        std::unique_ptr<WebCore::RenderStyle>::~unique_ptr[abi:sn180100](&v24, v14);
        WebCore::RenderStyle::~RenderStyle((WebCore::RenderStyle *)v16, v15);
        v6 -= 8;
      }
      while (v6);
    }
  }
}

uint64_t WebCore::RenderStyle::RenderStyle(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)result = 0;
  v2 = a2[1];
  a2[1] = 0;
  *(_QWORD *)(result + 8) = v2;
  *(_QWORD *)(result + 16) = a2[2];
  v3 = a2[3];
  a2[3] = 0;
  *(_QWORD *)(result + 24) = v3;
  v4 = a2[4];
  a2[4] = 0;
  *(_QWORD *)(result + 32) = v4;
  *(_QWORD *)(result + 40) = a2[5];
  v5 = a2[6];
  a2[6] = 0;
  *(_QWORD *)(result + 48) = v5;
  v6 = a2[7];
  a2[7] = 0;
  *(_QWORD *)(result + 56) = v6;
  return result;
}

_QWORD *WebCore::RenderStyle::operator=(_QWORD *a1, WTF::StringImpl *a2)
{
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  WebCore::StyleRareInheritedData *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  WebCore::RenderStyle *v15;
  WTF *v16;
  uint64_t v18;
  WebCore::SVGRenderStyle *v19;
  WTF *v21;
  void *v22;
  WebCore::StyleRareNonInheritedData *v23;
  WebCore::StyleMiscNonInheritedData *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  WTF *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  WebCore::FillLayer *v37;
  WebCore::NinePieceImage::Data *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  WTF *v43;
  void *v44;
  WTF *v45;
  void *v46;
  WTF *v47;
  void *v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  char v55;
  char v56;
  char v57;
  char v58;
  char v59;
  char v60;

  v4 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = 0;
  v5 = (WTF *)a1[1];
  a1[1] = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      v23 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v5 + 5);
      *((_QWORD *)v5 + 5) = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v23, a2);
          WTF::fastFree(v33, v34);
        }
        else
        {
          --*(_DWORD *)v23;
        }
      }
      v24 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v5 + 4);
      *((_QWORD *)v5 + 4) = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v24, a2);
          WTF::fastFree(v43, v44);
        }
        else
        {
          --*(_DWORD *)v24;
        }
      }
      v25 = *((_QWORD *)v5 + 3);
      *((_QWORD *)v5 + 3) = 0;
      if (v25)
      {
        if (*(_DWORD *)v25 == 1)
        {
          if (*(_BYTE *)(v25 + 268) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v25 + 264));
          }
          if (*(_BYTE *)(v25 + 260) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v25 + 256));
          }
          if (*(_BYTE *)(v25 + 252) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v25 + 248));
          }
          if (*(_BYTE *)(v25 + 244) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v25 + 240));
          }
          if (*(_BYTE *)(v25 + 236) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v25 + 232));
          }
          if (*(_BYTE *)(v25 + 228) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v25 + 224));
          }
          if (*(_BYTE *)(v25 + 220) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v25 + 216));
          }
          if (*(_BYTE *)(v25 + 212) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v25 + 208));
          }
          v38 = *(WebCore::NinePieceImage::Data **)(v25 + 200);
          *(_QWORD *)(v25 + 200) = 0;
          if (v38)
          {
            if (*(_DWORD *)v38 == 1)
            {
              WebCore::NinePieceImage::Data::~Data(v38);
              WTF::fastFree(v47, v48);
            }
            else
            {
              --*(_DWORD *)v38;
            }
          }
          v39 = *(unsigned int *)(v25 + 184);
          if ((_DWORD)v39 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v39])(&v55, v25 + 176);
          *(_DWORD *)(v25 + 184) = -1;
          v40 = *(unsigned int *)(v25 + 160);
          if ((_DWORD)v40 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v40])(&v56, v25 + 152);
          *(_DWORD *)(v25 + 160) = -1;
          v41 = *(unsigned int *)(v25 + 136);
          if ((_DWORD)v41 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v41])(&v57, v25 + 128);
          *(_DWORD *)(v25 + 136) = -1;
          v42 = *(unsigned int *)(v25 + 112);
          if ((_DWORD)v42 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v42])(&v58, v25 + 104);
          *(_DWORD *)(v25 + 112) = -1;
          if (*(_BYTE *)(v25 + 100) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v25 + 96));
          }
          if (*(_BYTE *)(v25 + 92) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v25 + 88));
          }
          if (*(_BYTE *)(v25 + 84) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v25 + 80));
          }
          if (*(_BYTE *)(v25 + 76) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v25 + 72));
          }
          if (*(_BYTE *)(v25 + 68) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v25 + 64));
          }
          if (*(_BYTE *)(v25 + 60) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v25 + 56));
          }
          if (*(_BYTE *)(v25 + 52) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v25 + 48));
          }
          if (*(_BYTE *)(v25 + 44) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v25 + 40));
          }
          if (*(_BYTE *)(v25 + 36) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v25 + 32));
          }
          if (*(_BYTE *)(v25 + 28) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v25 + 24));
          }
          if (*(_BYTE *)(v25 + 20) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v25 + 16));
          }
          if (*(_BYTE *)(v25 + 12) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v25 + 8));
          }
          WTF::fastFree((WTF *)v25, a2);
        }
        else
        {
          --*(_DWORD *)v25;
        }
      }
      v26 = *((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 2) = 0;
      if (v26)
      {
        if (*(_DWORD *)v26 == 1)
        {
          v35 = *(unsigned int *)(v26 + 40);
          if ((_DWORD)v35 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v35])(&v59, v26 + 32);
          *(_DWORD *)(v26 + 40) = -1;
          v36 = *(unsigned int *)(v26 + 24);
          if ((_DWORD)v36 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v36])(&v60, v26 + 16);
          *(_DWORD *)(v26 + 24) = -1;
          v37 = *(WebCore::FillLayer **)(v26 + 8);
          *(_QWORD *)(v26 + 8) = 0;
          if (v37)
          {
            if (*(_DWORD *)v37 == 1)
            {
              WebCore::FillLayer::~FillLayer(v37);
              WTF::fastFree(v45, v46);
            }
            else
            {
              --*(_DWORD *)v37;
            }
          }
          WTF::fastFree((WTF *)v26, a2);
        }
        else
        {
          --*(_DWORD *)v26;
        }
      }
      v27 = *((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = 0;
      if (v27)
      {
        if (*(_DWORD *)v27 == 1)
        {
          if (*(_BYTE *)(v27 + 56) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v27 + 52));
          }
          if (*(_BYTE *)(v27 + 48) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v27 + 44));
          }
          if (*(_BYTE *)(v27 + 40) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v27 + 36));
          }
          if (*(_BYTE *)(v27 + 32) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v27 + 28));
          }
          if (*(_BYTE *)(v27 + 24) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v27 + 20));
          }
          if (*(_BYTE *)(v27 + 16) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v27 + 12));
          }
          if (*(_BYTE *)(v27 + 8) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v27 + 4));
          }
          WTF::fastFree((WTF *)v27, a2);
        }
        else
        {
          --*(_DWORD *)v27;
        }
      }
      WTF::fastFree(v5, a2);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  a1[2] = *((_QWORD *)a2 + 2);
  v6 = *((_QWORD *)a2 + 3);
  *((_QWORD *)a2 + 3) = 0;
  v7 = (WebCore::StyleRareInheritedData *)a1[3];
  a1[3] = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
    {
      WebCore::StyleRareInheritedData::~StyleRareInheritedData(v7, a2);
      WTF::fastFree(v28, v29);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
  v8 = *((_QWORD *)a2 + 4);
  *((_QWORD *)a2 + 4) = 0;
  v9 = a1[4];
  a1[4] = v8;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      v30 = *(_QWORD *)(v9 + 336);
      if ((v30 & 0x8000000000000) != 0)
      {
        v49 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFLL);
        do
        {
          v50 = __ldaxr(v49);
          v51 = v50 - 1;
        }
        while (__stlxr(v51, v49));
        if (!v51)
        {
          atomic_store(1u, v49);
          WTF::fastFree((WTF *)v49, a2);
        }
      }
      v31 = *(_QWORD *)(v9 + 328);
      if ((v31 & 0x8000000000000) != 0)
      {
        v52 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFLL);
        do
        {
          v53 = __ldaxr(v52);
          v54 = v53 - 1;
        }
        while (__stlxr(v54, v52));
        if (!v54)
        {
          atomic_store(1u, v52);
          WTF::fastFree((WTF *)v52, a2);
        }
      }
      WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)(v9 + 32), a2);
      if (*(_BYTE *)(v9 + 24) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v9 + 20));
      }
      if (*(_BYTE *)(v9 + 16) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v9 + 12));
      }
      WTF::fastFree((WTF *)v9, v32);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
  a1[5] = *((_QWORD *)a2 + 5);
  v10 = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  v11 = (WTF *)a1[6];
  a1[6] = v10;
  if (v11)
  {
    v12 = *((unsigned int *)v11 + 3);
    v13 = *(WTF **)v11;
    if ((_DWORD)v12)
    {
      v14 = 8 * v12;
      do
      {
        v15 = *(WebCore::RenderStyle **)v13;
        *(_QWORD *)v13 = 0;
        if (v15)
        {
          WebCore::RenderStyle::~RenderStyle(v15, a2);
          if (*(_DWORD *)v16)
          {
            *((_OWORD *)v16 + 2) = 0u;
            *((_OWORD *)v16 + 3) = 0u;
            *(_OWORD *)v16 = 0u;
            *((_OWORD *)v16 + 1) = 0u;
          }
          else
          {
            WTF::fastFree(v16, a2);
          }
        }
        v13 = (WTF *)((char *)v13 + 8);
        v14 -= 8;
      }
      while (v14);
      v13 = *(WTF **)v11;
    }
    if ((WTF *)((char *)v11 + 16) != v13 && v13 != 0)
    {
      *(_QWORD *)v11 = 0;
      *((_DWORD *)v11 + 2) = 0;
      WTF::fastFree(v13, a2);
    }
    WTF::fastFree(v11, a2);
  }
  v18 = *((_QWORD *)a2 + 7);
  *((_QWORD *)a2 + 7) = 0;
  v19 = (WebCore::SVGRenderStyle *)a1[7];
  a1[7] = v18;
  if (v19)
  {
    if (*(_DWORD *)v19 == 1)
    {
      WebCore::SVGRenderStyle::~SVGRenderStyle(v19, a2);
      WTF::fastFree(v21, v22);
    }
    else
    {
      --*(_DWORD *)v19;
    }
  }
  return a1;
}

WebCore::StyleRareInheritedData **WTF::Ref<WebCore::StyleRareInheritedData,WTF::RawPtrTraits<WebCore::StyleRareInheritedData>,WTF::DefaultRefDerefTraits<WebCore::StyleRareInheritedData>>::~Ref(WebCore::StyleRareInheritedData **a1, WTF::StringImpl *a2)
{
  WebCore::StyleRareInheritedData *v3;
  WTF *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::StyleRareInheritedData::~StyleRareInheritedData(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

WebCore::SVGRenderStyle **WTF::Ref<WebCore::SVGRenderStyle,WTF::RawPtrTraits<WebCore::SVGRenderStyle>,WTF::DefaultRefDerefTraits<WebCore::SVGRenderStyle>>::~Ref(WebCore::SVGRenderStyle **a1, void *a2)
{
  WebCore::SVGRenderStyle *v3;
  WTF *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::SVGRenderStyle::~SVGRenderStyle(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

void WebCore::RenderStyle::~RenderStyle(WebCore::RenderStyle *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  uint64_t v5;
  WTF *v6;
  uint64_t v7;
  WebCore::RenderStyle *v8;
  WTF *v9;
  uint64_t v11;
  WebCore::StyleRareInheritedData *v12;
  WTF *v13;
  WebCore::StyleLayoutData *v14;
  unsigned int *v15;
  unsigned int *v16;
  WTF *v17;
  WTF *v18;
  uint64_t v19;
  uint64_t v20;
  WebCore::StyleRareNonInheritedData *v21;
  WebCore::StyleMiscNonInheritedData *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  WTF *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  WebCore::FontCascadeFonts *v30;
  unsigned int *v31;
  WTF::StringImpl *v32;
  WTF::StringImpl *v33;
  WTF::StringImpl *v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WTF::StringImpl *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  WTF *v41;
  WTF::StringImpl *v42;
  WTF *v43;
  WTF *v44;
  uint64_t v45;
  WTF *v46;
  void *v47;
  WTF *v48;
  void *v49;
  uint64_t v50;
  WTF::StringImpl **v51;
  uint64_t v52;
  WTF::StringImpl *v53;
  uint64_t v54;
  uint64_t v55;
  WebCore::FillLayer *v56;
  WebCore::NinePieceImage::Data *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  WTF *v65;
  void *v66;
  WTF *v67;
  void *v68;
  WTF::StringImpl *v69;
  WTF::StringImpl *v70;
  WTF::StringImpl *v71;
  WTF *v72;
  WTF::StringImpl *v73;
  WTF::StringImpl *v74;
  uint64_t v75;
  uint64_t v76;
  WTF::StringImpl *v77;
  WTF::StringImpl *v78;
  uint64_t v79;
  uint64_t v80;
  WTF *v81;
  void *v82;
  WTF *v83;
  void *v84;
  WTF::StringImpl **v85;
  uint64_t v86;
  WTF::StringImpl *v87;
  WTF::StringImpl **v88;
  uint64_t v89;
  WTF::StringImpl *v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  char v100;
  char v101;
  char v102;
  char v103;
  char v104;
  char v105;
  char v106;
  char v107;
  char v108;
  char v109;
  char v110;
  char v111;
  char v112;

  v3 = (WTF *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (!v3)
  {
LABEL_4:
    v4 = (WTF *)*((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = 0;
    if (!v4)
      goto LABEL_18;
    goto LABEL_5;
  }
  if (*(_DWORD *)v3 != 1)
  {
    --*(_DWORD *)v3;
    goto LABEL_4;
  }
  v14 = (WebCore::StyleLayoutData *)*((_QWORD *)v3 + 8);
  *((_QWORD *)v3 + 8) = 0;
  if (v14)
  {
    if (*(_DWORD *)v14 == 1)
    {
      WebCore::StyleLayoutData::~StyleLayoutData(v14);
      WTF::fastFree(v67, v68);
    }
    else
    {
      --*(_DWORD *)v14;
    }
  }
  v15 = (unsigned int *)*((_QWORD *)v3 + 7);
  *((_QWORD *)v3 + 7) = 0;
  if (v15)
  {
    if (*v15 == 1)
    {
      v62 = v15[8];
      if ((_DWORD)v62 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v62])(&v100, v15 + 6);
      v15[8] = -1;
      v63 = v15[4];
      if ((_DWORD)v63 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v63])(&v101, v15 + 2);
      v15[4] = -1;
      WTF::fastFree((WTF *)v15, a2);
    }
    else
    {
      --*v15;
    }
  }
  v16 = (unsigned int *)*((_QWORD *)v3 + 6);
  *((_QWORD *)v3 + 6) = 0;
  if (v16)
  {
    if (*v16 == 1)
    {
      v64 = v16[4];
      if ((_DWORD)v64 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v64])(&v102, v16 + 2);
      v16[4] = -1;
      WTF::fastFree((WTF *)v16, a2);
    }
    else
    {
      --*v16;
    }
  }
  v17 = (WTF *)*((_QWORD *)v3 + 5);
  *((_QWORD *)v3 + 5) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 1)
    {
      v69 = (WTF::StringImpl *)*((_QWORD *)v17 + 3);
      *((_QWORD *)v17 + 3) = 0;
      if (v69)
      {
        if (*(_DWORD *)v69 == 2)
          WTF::StringImpl::destroy(v69, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v69 -= 2;
      }
      v70 = (WTF::StringImpl *)*((_QWORD *)v17 + 2);
      *((_QWORD *)v17 + 2) = 0;
      if (v70)
      {
        if (*(_DWORD *)v70 == 2)
          WTF::StringImpl::destroy(v70, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v70 -= 2;
      }
      v71 = (WTF::StringImpl *)*((_QWORD *)v17 + 1);
      *((_QWORD *)v17 + 1) = 0;
      if (v71)
      {
        if (*(_DWORD *)v71 == 2)
          WTF::StringImpl::destroy(v71, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v71 -= 2;
      }
      WTF::fastFree(v17, a2);
    }
    else
    {
      --*(_DWORD *)v17;
    }
  }
  v18 = (WTF *)*((_QWORD *)v3 + 4);
  *((_QWORD *)v3 + 4) = 0;
  if (v18)
  {
    if (*(_DWORD *)v18 == 1)
      WTF::fastFree(v18, a2);
    else
      --*(_DWORD *)v18;
  }
  v19 = *((_QWORD *)v3 + 3);
  *((_QWORD *)v3 + 3) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 1)
    {
      v72 = *(WTF **)(v19 + 64);
      if (v72)
      {
        *(_QWORD *)(v19 + 64) = 0;
        *(_DWORD *)(v19 + 72) = 0;
        WTF::fastFree(v72, a2);
      }
      if (*(_BYTE *)(v19 + 60) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v19 + 56));
      }
      v73 = *(WTF::StringImpl **)(v19 + 48);
      *(_QWORD *)(v19 + 48) = 0;
      if (v73)
      {
        if (*(_DWORD *)v73 == 2)
          WTF::StringImpl::destroy(v73, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v73 -= 2;
      }
      v74 = *(WTF::StringImpl **)(v19 + 40);
      *(_QWORD *)(v19 + 40) = 0;
      if (v74)
      {
        if (*(_DWORD *)v74 == 2)
          WTF::StringImpl::destroy(v74, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v74 -= 2;
      }
      v75 = *(unsigned int *)(v19 + 32);
      if ((_DWORD)v75 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v75])(&v103, v19 + 24);
      *(_DWORD *)(v19 + 32) = -1;
      v76 = *(unsigned int *)(v19 + 16);
      if ((_DWORD)v76 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v76])(&v104, v19 + 8);
      *(_DWORD *)(v19 + 16) = -1;
      WTF::fastFree((WTF *)v19, a2);
    }
    else
    {
      --*(_DWORD *)v19;
    }
  }
  v20 = *((_QWORD *)v3 + 2);
  *((_QWORD *)v3 + 2) = 0;
  if (v20)
  {
    if (*(_DWORD *)v20 == 1)
    {
      v77 = *(WTF::StringImpl **)(v20 + 48);
      *(_QWORD *)(v20 + 48) = 0;
      if (v77)
      {
        if (*(_DWORD *)v77 == 2)
          WTF::StringImpl::destroy(v77, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v77 -= 2;
      }
      v78 = *(WTF::StringImpl **)(v20 + 40);
      *(_QWORD *)(v20 + 40) = 0;
      if (v78)
      {
        if (*(_DWORD *)v78 == 2)
          WTF::StringImpl::destroy(v78, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v78 -= 2;
      }
      v79 = *(unsigned int *)(v20 + 32);
      if ((_DWORD)v79 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v79])(&v105, v20 + 24);
      *(_DWORD *)(v20 + 32) = -1;
      v80 = *(unsigned int *)(v20 + 16);
      if ((_DWORD)v80 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v80])(&v106, v20 + 8);
      *(_DWORD *)(v20 + 16) = -1;
      WTF::fastFree((WTF *)v20, a2);
    }
    else
    {
      --*(_DWORD *)v20;
    }
  }
  WTF::fastFree(v3, a2);
  v4 = (WTF *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v4)
  {
LABEL_5:
    v5 = *((unsigned int *)v4 + 3);
    v6 = *(WTF **)v4;
    if ((_DWORD)v5)
    {
      v7 = 8 * v5;
      do
      {
        v8 = *(WebCore::RenderStyle **)v6;
        *(_QWORD *)v6 = 0;
        if (v8)
        {
          WebCore::RenderStyle::~RenderStyle(v8);
          if (*(_DWORD *)v9)
          {
            *((_OWORD *)v9 + 2) = 0u;
            *((_OWORD *)v9 + 3) = 0u;
            *(_OWORD *)v9 = 0u;
            *((_OWORD *)v9 + 1) = 0u;
          }
          else
          {
            WTF::fastFree(v9, a2);
          }
        }
        v6 = (WTF *)((char *)v6 + 8);
        v7 -= 8;
      }
      while (v7);
      v6 = *(WTF **)v4;
    }
    if ((WTF *)((char *)v4 + 16) != v6 && v6 != 0)
    {
      *(_QWORD *)v4 = 0;
      *((_DWORD *)v4 + 2) = 0;
      WTF::fastFree(v6, a2);
    }
    WTF::fastFree(v4, a2);
  }
LABEL_18:
  v11 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 1)
    {
      v28 = *(_QWORD *)(v11 + 336);
      if ((v28 & 0x8000000000000) != 0)
      {
        v94 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFLL);
        do
        {
          v95 = __ldaxr(v94);
          v96 = v95 - 1;
        }
        while (__stlxr(v96, v94));
        if (!v96)
        {
          atomic_store(1u, v94);
          WTF::fastFree((WTF *)v94, a2);
        }
      }
      v29 = *(_QWORD *)(v11 + 328);
      if ((v29 & 0x8000000000000) != 0)
      {
        v97 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFLL);
        do
        {
          v98 = __ldaxr(v97);
          v99 = v98 - 1;
        }
        while (__stlxr(v99, v97));
        if (!v99)
        {
          atomic_store(1u, v97);
          WTF::fastFree((WTF *)v97, a2);
        }
      }
      v30 = *(WebCore::FontCascadeFonts **)(v11 + 248);
      *(_QWORD *)(v11 + 248) = 0;
      if (v30)
      {
        if (*(_DWORD *)v30 == 1)
        {
          WebCore::FontCascadeFonts::~FontCascadeFonts(v30, a2);
          WTF::fastFree(v48, v49);
        }
        else
        {
          --*(_DWORD *)v30;
        }
      }
      if (*(_BYTE *)(v11 + 244) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v11 + 240));
      }
      if (*(_BYTE *)(v11 + 236) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v11 + 232));
      }
      v31 = *(unsigned int **)(v11 + 216);
      *(_QWORD *)(v11 + 216) = 0;
      if (v31)
      {
        if (*v31 == 1)
        {
          v50 = v31[1];
          if ((_DWORD)v50)
          {
            v51 = (WTF::StringImpl **)(v31 + 2);
            v52 = 8 * v50;
            do
            {
              v53 = *v51;
              *v51 = 0;
              if (v53)
              {
                if (*(_DWORD *)v53 == 2)
                  WTF::StringImpl::destroy(v53, (WTF::StringImpl *)a2);
                else
                  *(_DWORD *)v53 -= 2;
              }
              ++v51;
              v52 -= 8;
            }
            while (v52);
          }
          WTF::fastFree((WTF *)v31, a2);
        }
        else
        {
          --*v31;
        }
      }
      v32 = *(WTF::StringImpl **)(v11 + 184);
      *(_QWORD *)(v11 + 184) = 0;
      if (v32)
      {
        if (*(_DWORD *)v32 == 2)
          WTF::StringImpl::destroy(v32, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v32 -= 2;
      }
      v33 = *(WTF::StringImpl **)(v11 + 176);
      *(_QWORD *)(v11 + 176) = 0;
      if (v33)
      {
        if (*(_DWORD *)v33 == 2)
          WTF::StringImpl::destroy(v33, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v33 -= 2;
      }
      v34 = *(WTF::StringImpl **)(v11 + 160);
      *(_QWORD *)(v11 + 160) = 0;
      if (v34)
      {
        if (*(_DWORD *)v34 == 2)
          WTF::StringImpl::destroy(v34, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v34 -= 2;
      }
      v35 = *(WTF::StringImpl **)(v11 + 136);
      *(_QWORD *)(v11 + 136) = 0;
      if (v35)
      {
        if (*(_DWORD *)v35 == 2)
          WTF::StringImpl::destroy(v35, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v35 -= 2;
      }
      v36 = *(WTF::StringImpl **)(v11 + 128);
      *(_QWORD *)(v11 + 128) = 0;
      if (v36)
      {
        if (*(_DWORD *)v36 == 2)
          WTF::StringImpl::destroy(v36, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v36 -= 2;
      }
      v37 = *(WTF::StringImpl **)(v11 + 120);
      *(_QWORD *)(v11 + 120) = 0;
      if (v37)
      {
        if (*(_DWORD *)v37 == 2)
          WTF::StringImpl::destroy(v37, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v37 -= 2;
      }
      v38 = *(unsigned int *)(v11 + 116);
      if ((_DWORD)v38)
      {
        v85 = *(WTF::StringImpl ***)(v11 + 104);
        v86 = 8 * v38;
        do
        {
          v87 = *v85;
          *v85 = 0;
          if (v87)
          {
            if (*(_DWORD *)v87 == 2)
              WTF::StringImpl::destroy(v87, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v87 -= 2;
          }
          ++v85;
          v86 -= 8;
        }
        while (v86);
      }
      v39 = *(WTF **)(v11 + 104);
      if (v39)
      {
        *(_QWORD *)(v11 + 104) = 0;
        *(_DWORD *)(v11 + 112) = 0;
        WTF::fastFree(v39, a2);
      }
      v40 = *(unsigned int *)(v11 + 100);
      if ((_DWORD)v40)
      {
        v88 = *(WTF::StringImpl ***)(v11 + 88);
        v89 = 8 * v40;
        do
        {
          v90 = *v88;
          *v88 = 0;
          if (v90)
          {
            if (*(_DWORD *)v90 == 2)
              WTF::StringImpl::destroy(v90, (WTF::StringImpl *)a2);
            else
              *(_DWORD *)v90 -= 2;
          }
          ++v88;
          v89 -= 8;
        }
        while (v89);
      }
      v41 = *(WTF **)(v11 + 88);
      if (v41)
      {
        *(_QWORD *)(v11 + 88) = 0;
        *(_DWORD *)(v11 + 96) = 0;
        WTF::fastFree(v41, a2);
      }
      v42 = *(WTF::StringImpl **)(v11 + 80);
      *(_QWORD *)(v11 + 80) = 0;
      if (v42)
      {
        if (*(_DWORD *)v42 == 2)
          WTF::StringImpl::destroy(v42, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v42 -= 2;
      }
      v43 = *(WTF **)(v11 + 64);
      if (v43)
      {
        *(_QWORD *)(v11 + 64) = 0;
        *(_DWORD *)(v11 + 72) = 0;
        WTF::fastFree(v43, a2);
      }
      v44 = *(WTF **)(v11 + 48);
      if (v44)
      {
        *(_QWORD *)(v11 + 48) = 0;
        *(_DWORD *)(v11 + 56) = 0;
        WTF::fastFree(v44, a2);
      }
      v45 = *(_QWORD *)(v11 + 32);
      if (v45)
      {
        *(_QWORD *)(v45 + 8) = 0;
        v91 = *(unsigned int **)(v11 + 32);
        *(_QWORD *)(v11 + 32) = 0;
        if (v91)
        {
          do
          {
            v92 = __ldaxr(v91);
            v93 = v92 - 1;
          }
          while (__stlxr(v93, v91));
          if (!v93)
          {
            atomic_store(1u, v91);
            WTF::fastFree((WTF *)v91, a2);
          }
        }
      }
      else
      {
        *(_QWORD *)(v11 + 32) = 0;
      }
      if (*(_BYTE *)(v11 + 24) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v11 + 20));
      }
      if (*(_BYTE *)(v11 + 16) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v11 + 12));
      }
      WTF::fastFree((WTF *)v11, a2);
      v12 = (WebCore::StyleRareInheritedData *)*((_QWORD *)this + 3);
      *((_QWORD *)this + 3) = 0;
      if (!v12)
        goto LABEL_24;
      goto LABEL_22;
    }
    --*(_DWORD *)v11;
  }
  v12 = (WebCore::StyleRareInheritedData *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (!v12)
    goto LABEL_24;
LABEL_22:
  if (*(_DWORD *)v12 == 1)
  {
    WebCore::StyleRareInheritedData::~StyleRareInheritedData(v12, (WTF::StringImpl *)a2);
    WTF::fastFree(v26, v27);
    v13 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (!v13)
      return;
    goto LABEL_25;
  }
  --*(_DWORD *)v12;
LABEL_24:
  v13 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (!v13)
    return;
LABEL_25:
  if (*(_DWORD *)v13 == 1)
  {
    v21 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v13 + 5);
    *((_QWORD *)v13 + 5) = 0;
    if (v21)
    {
      if (*(_DWORD *)v21 == 1)
      {
        WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v21, (WTF::StringImpl *)a2);
        WTF::fastFree(v46, v47);
      }
      else
      {
        --*(_DWORD *)v21;
      }
    }
    v22 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v13 + 4);
    *((_QWORD *)v13 + 4) = 0;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
      {
        WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v22, (WTF::StringImpl *)a2);
        WTF::fastFree(v65, v66);
      }
      else
      {
        --*(_DWORD *)v22;
      }
    }
    v23 = *((_QWORD *)v13 + 3);
    *((_QWORD *)v13 + 3) = 0;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
      {
        if (*(_BYTE *)(v23 + 268) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v23 + 264));
        }
        if (*(_BYTE *)(v23 + 260) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v23 + 256));
        }
        if (*(_BYTE *)(v23 + 252) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v23 + 248));
        }
        if (*(_BYTE *)(v23 + 244) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v23 + 240));
        }
        if (*(_BYTE *)(v23 + 236) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v23 + 232));
        }
        if (*(_BYTE *)(v23 + 228) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v23 + 224));
        }
        if (*(_BYTE *)(v23 + 220) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v23 + 216));
        }
        if (*(_BYTE *)(v23 + 212) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v23 + 208));
        }
        v57 = *(WebCore::NinePieceImage::Data **)(v23 + 200);
        *(_QWORD *)(v23 + 200) = 0;
        if (v57)
        {
          if (*(_DWORD *)v57 == 1)
          {
            WebCore::NinePieceImage::Data::~Data(v57);
            WTF::fastFree(v83, v84);
          }
          else
          {
            --*(_DWORD *)v57;
          }
        }
        v58 = *(unsigned int *)(v23 + 184);
        if ((_DWORD)v58 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v58])(&v107, v23 + 176);
        *(_DWORD *)(v23 + 184) = -1;
        v59 = *(unsigned int *)(v23 + 160);
        if ((_DWORD)v59 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v59])(&v108, v23 + 152);
        *(_DWORD *)(v23 + 160) = -1;
        v60 = *(unsigned int *)(v23 + 136);
        if ((_DWORD)v60 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v60])(&v109, v23 + 128);
        *(_DWORD *)(v23 + 136) = -1;
        v61 = *(unsigned int *)(v23 + 112);
        if ((_DWORD)v61 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v61])(&v110, v23 + 104);
        *(_DWORD *)(v23 + 112) = -1;
        if (*(_BYTE *)(v23 + 100) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v23 + 96));
        }
        if (*(_BYTE *)(v23 + 92) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v23 + 88));
        }
        if (*(_BYTE *)(v23 + 84) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v23 + 80));
        }
        if (*(_BYTE *)(v23 + 76) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v23 + 72));
        }
        if (*(_BYTE *)(v23 + 68) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v23 + 64));
        }
        if (*(_BYTE *)(v23 + 60) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v23 + 56));
        }
        if (*(_BYTE *)(v23 + 52) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v23 + 48));
        }
        if (*(_BYTE *)(v23 + 44) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v23 + 40));
        }
        if (*(_BYTE *)(v23 + 36) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v23 + 32));
        }
        if (*(_BYTE *)(v23 + 28) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v23 + 24));
        }
        if (*(_BYTE *)(v23 + 20) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v23 + 16));
        }
        if (*(_BYTE *)(v23 + 12) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v23 + 8));
        }
        WTF::fastFree((WTF *)v23, a2);
      }
      else
      {
        --*(_DWORD *)v23;
      }
    }
    v24 = *((_QWORD *)v13 + 2);
    *((_QWORD *)v13 + 2) = 0;
    if (v24)
    {
      if (*(_DWORD *)v24 == 1)
      {
        v54 = *(unsigned int *)(v24 + 40);
        if ((_DWORD)v54 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v54])(&v111, v24 + 32);
        *(_DWORD *)(v24 + 40) = -1;
        v55 = *(unsigned int *)(v24 + 24);
        if ((_DWORD)v55 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v55])(&v112, v24 + 16);
        *(_DWORD *)(v24 + 24) = -1;
        v56 = *(WebCore::FillLayer **)(v24 + 8);
        *(_QWORD *)(v24 + 8) = 0;
        if (v56)
        {
          if (*(_DWORD *)v56 == 1)
          {
            WebCore::FillLayer::~FillLayer(v56);
            WTF::fastFree(v81, v82);
          }
          else
          {
            --*(_DWORD *)v56;
          }
        }
        WTF::fastFree((WTF *)v24, a2);
      }
      else
      {
        --*(_DWORD *)v24;
      }
    }
    v25 = *((_QWORD *)v13 + 1);
    *((_QWORD *)v13 + 1) = 0;
    if (v25)
    {
      if (*(_DWORD *)v25 == 1)
      {
        if (*(_BYTE *)(v25 + 56) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v25 + 52));
        }
        if (*(_BYTE *)(v25 + 48) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v25 + 44));
        }
        if (*(_BYTE *)(v25 + 40) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v25 + 36));
        }
        if (*(_BYTE *)(v25 + 32) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v25 + 28));
        }
        if (*(_BYTE *)(v25 + 24) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v25 + 20));
        }
        if (*(_BYTE *)(v25 + 16) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v25 + 12));
        }
        if (*(_BYTE *)(v25 + 8) == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v25 + 4));
        }
        WTF::fastFree((WTF *)v25, a2);
      }
      else
      {
        --*(_DWORD *)v25;
      }
    }
    WTF::fastFree(v13, a2);
  }
  else
  {
    --*(_DWORD *)v13;
  }
}

uint64_t WebCore::RenderStyle::resolvedAlignItems(uint64_t a1, char a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 124) & 0xFu) >= 3)
    return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 124);
  else
    return a2 & 0xF;
}

uint64_t WebCore::RenderStyle::resolvedJustifyContent(uint64_t a1, unsigned __int16 *a2)
{
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 122) & 0x7F) != 0)
    return *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 32) + 122);
  else
    return *a2;
}

float WTF::DataRef<WebCore::SVGRenderStyle>::operator==(_QWORD *a1, _QWORD *a2, const WTF::StringImpl *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  float result;
  uint64_t v8;
  int v9;
  _BOOL4 v11;
  _BOOL4 v13;
  _BOOL4 v14;
  char v15;
  uint64_t v16;
  int v17;
  _BOOL4 v19;
  _BOOL4 v21;
  _BOOL4 v22;
  char v23;
  const WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF **v35;
  const WTF::StringImpl **v36;
  int v37;
  uint64_t v38;
  int v39;
  _BOOL4 v41;
  _BOOL4 v43;
  char v44;
  char v45;
  char *v46;

  v3 = (_QWORD *)*a1;
  v4 = (_QWORD *)*a2;
  if (*a1 == *a2)
    return result;
  v5 = v3[2];
  v6 = v4[2];
  if (v5 != v6)
  {
    result = *(float *)(v5 + 4);
    if (result != *(float *)(v6 + 4))
      return result;
    v8 = *(unsigned int *)(v5 + 16);
    v9 = *(_DWORD *)(v6 + 16);
    v11 = v9 == (_DWORD)v8 && v9 != -1;
    if ((_DWORD)v8 == -1 || !v11)
    {
      v13 = v9 == -1;
      if ((_DWORD)v8 == -1)
        v14 = v13;
      else
        v14 = v11;
      if (!v14)
        return result;
    }
    else
    {
      v46 = &v45;
      v15 = ((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v8])(&v46, v5 + 8, v6 + 8);
      if ((v15 & 1) == 0)
        return result;
    }
    v16 = *(unsigned int *)(v5 + 32);
    v17 = *(_DWORD *)(v6 + 32);
    v19 = v17 == (_DWORD)v16 && v17 != -1;
    if ((_DWORD)v16 == -1 || !v19)
    {
      v21 = v17 == -1;
      if ((_DWORD)v16 == -1)
        v22 = v21;
      else
        v22 = v19;
      if (!v22)
        return result;
    }
    else
    {
      v46 = &v45;
      v23 = ((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v16])(&v46, v5 + 24, v6 + 24);
      if ((v23 & 1) == 0)
        return result;
    }
    if (!WTF::equal(*(WTF **)(v5 + 40), *(const WTF::StringImpl **)(v6 + 40), a3)
      || !WTF::equal(*(WTF **)(v5 + 48), *(const WTF::StringImpl **)(v6 + 48), v24)
      || *(unsigned __int8 *)(v5 + 56) != *(unsigned __int8 *)(v6 + 56)
      || *(unsigned __int8 *)(v5 + 57) != *(unsigned __int8 *)(v6 + 57))
    {
      return result;
    }
  }
  v25 = v3[3];
  v26 = v4[3];
  if (v25 != v26)
  {
    result = WebCore::StyleStrokeData::operator==(v25, v26, a3);
    if (!v37)
      return result;
  }
  v27 = v3[4];
  v28 = v4[4];
  if (v27 != v28)
  {
    result = *(float *)(v27 + 4);
    if (result != *(float *)(v28 + 4)
      || (unsigned __int16)*(_DWORD *)(v27 + 8) != (unsigned __int16)*(_DWORD *)(v28 + 8))
    {
      return result;
    }
  }
  v29 = v3[6];
  v30 = v4[6];
  if (v29 == v30)
    goto LABEL_47;
  result = *(float *)(v29 + 4);
  if (result != *(float *)(v30 + 4))
    return result;
  v38 = *(unsigned int *)(v29 + 16);
  v39 = *(_DWORD *)(v30 + 16);
  v41 = v39 == (_DWORD)v38 && v39 != -1;
  if ((_DWORD)v38 != -1 && v41)
  {
    v46 = &v45;
    v44 = ((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v38])(&v46, v29 + 8, v30 + 8);
    if ((v44 & 1) == 0)
      return result;
    goto LABEL_47;
  }
  v43 = v39 == -1;
  if ((_DWORD)v38 != -1)
    v43 = v41;
  if (v43)
  {
LABEL_47:
    v31 = v3[7];
    v32 = v4[7];
    if (v31 == v32 || WebCore::StyleMiscData::operator==(v31, v32))
    {
      v33 = v3[8];
      v34 = v4[8];
      if (v33 == v34 || WebCore::StyleLayoutData::operator==(v33, v34))
      {
        v35 = (WTF **)v3[5];
        v36 = (const WTF::StringImpl **)v4[5];
        if (v35 != v36)
          WebCore::StyleInheritedResourceData::operator==(v35, v36, a3);
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::inheritIgnoringCustomPropertiesFrom(WebCore::RenderStyle *this, const WebCore::RenderStyle *a2, const WTF::StringImpl *a3)
{
  WebCore::StyleRareInheritedData **v3;
  WTF **v4;
  uint64_t result;
  WTF::StringImpl *v6;
  WTF *v7;
  void *v8;
  uint64_t v9;
  WTF **v10;

  v3 = (WebCore::StyleRareInheritedData **)((char *)this + 24);
  v4 = *(WTF ***)(*((_QWORD *)this + 3) + 216);
  ++*(_DWORD *)v4;
  v10 = v4;
  result = (uint64_t)WebCore::RenderStyle::inheritFrom(this, a2, a3);
  v6 = (WTF::StringImpl *)*((_QWORD *)*v3 + 27);
  if (v4 == (WTF **)v6 || (result = WebCore::StyleCustomPropertyData::operator==(v4, (uint64_t)v6), (_DWORD)result))
  {
    v10 = 0;
  }
  else
  {
    WTF::DataRef<WebCore::StyleRareInheritedData>::access(v3);
    result = (uint64_t)WTF::DataRef<WebCore::StyleCustomPropertyData>::operator=((WebCore::StyleCustomPropertyData **)(v9 + 216), (WTF::StringImpl *)&v10);
    v4 = v10;
    v10 = 0;
    if (!v4)
      return result;
  }
  if (*(_DWORD *)v4 == 1)
  {
    WebCore::StyleCustomPropertyData::~StyleCustomPropertyData((WebCore::StyleCustomPropertyData *)v4, v6);
    return WTF::fastFree(v7, v8);
  }
  else
  {
    --*(_DWORD *)v4;
  }
  return result;
}

WebCore::StyleCustomPropertyData **WTF::DataRef<WebCore::StyleCustomPropertyData>::operator=(WebCore::StyleCustomPropertyData **a1, WTF::StringImpl *a2)
{
  WebCore::StyleCustomPropertyData *v3;
  WebCore::StyleCustomPropertyData *v4;
  WTF *v6;
  void *v7;

  v3 = *(WebCore::StyleCustomPropertyData **)a2;
  *(_DWORD *)v3 = **(_DWORD **)a2 + 1;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    if (*(_DWORD *)v4 == 1)
    {
      WebCore::StyleCustomPropertyData::~StyleCustomPropertyData(v4, a2);
      WTF::fastFree(v6, v7);
    }
    else
    {
      --*(_DWORD *)v4;
    }
  }
  return a1;
}

_DWORD *WTF::DataRef<WebCore::StyleInheritedData>::access(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  int *v4;
  unsigned int v5;
  int *v7;
  unsigned int v8;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;

  v1 = *a1;
  if (*(_DWORD *)*a1 == 1)
    return (_DWORD *)*a1;
  v3 = WTF::fastMalloc((WTF *)0x158);
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 4) = *(_QWORD *)(v1 + 4);
  *(_DWORD *)(v3 + 12) = 0;
  v4 = (int *)(v3 + 12);
  *(_WORD *)(v3 + 17) = 0;
  v5 = *(unsigned __int8 *)(v1 + 16);
  *(_BYTE *)(v3 + 16) = v5;
  *(_BYTE *)(v3 + 17) = *(_BYTE *)(v1 + 17);
  if (v5 <= 0xD)
  {
    if (((1 << v5) & 0x7FC) != 0)
    {
      *(_BYTE *)(v3 + 18) = *(_BYTE *)(v1 + 18);
      *v4 = *(_DWORD *)(v1 + 12);
    }
    else if (((1 << v5) & 0x3003) != 0)
    {
      *v4 = 0;
    }
    else
    {
      *v4 = *(_DWORD *)(v1 + 12);
      WebCore::Length::ref(v4);
    }
  }
  *(_DWORD *)(v3 + 20) = 0;
  v7 = (int *)(v3 + 20);
  *(_WORD *)(v3 + 25) = 0;
  v8 = *(unsigned __int8 *)(v1 + 24);
  *(_BYTE *)(v3 + 24) = v8;
  *(_BYTE *)(v3 + 25) = *(_BYTE *)(v1 + 25);
  if (v8 <= 0xD)
  {
    v9 = 1 << v8;
    if ((v9 & 0x7FC) != 0)
    {
      *(_BYTE *)(v3 + 26) = *(_BYTE *)(v1 + 26);
      *v7 = *(_DWORD *)(v1 + 20);
    }
    else if ((v9 & 0x3003) != 0)
    {
      *v7 = 0;
    }
    else
    {
      *v7 = *(_DWORD *)(v1 + 20);
      WebCore::Length::ref(v7);
    }
  }
  WebCore::FontCascade::FontCascade((WebCore::FontCascade *)(v3 + 32), (const WebCore::FontCascade *)(v1 + 32));
  v11 = *(_QWORD *)(v1 + 328);
  *(_QWORD *)(v3 + 328) = v11;
  if ((v11 & 0x8000000000000) != 0)
  {
    v17 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
  }
  v12 = *(_QWORD *)(v1 + 336);
  *(_QWORD *)(v3 + 336) = v12;
  if ((v12 & 0x8000000000000) != 0)
  {
    v19 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 + 1, v19));
  }
  v13 = *a1;
  *a1 = v3;
  if (v13)
  {
    if (*(_DWORD *)v13 == 1)
    {
      v14 = *(_QWORD *)(v13 + 336);
      if ((v14 & 0x8000000000000) != 0)
      {
        v21 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
        do
        {
          v22 = __ldaxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
        {
          atomic_store(1u, v21);
          WTF::fastFree((WTF *)v21, v10);
        }
      }
      v15 = *(_QWORD *)(v13 + 328);
      if ((v15 & 0x8000000000000) != 0)
      {
        v24 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
        do
        {
          v25 = __ldaxr(v24);
          v26 = v25 - 1;
        }
        while (__stlxr(v26, v24));
        if (!v26)
        {
          atomic_store(1u, v24);
          WTF::fastFree((WTF *)v24, v10);
        }
      }
      WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)(v13 + 32), v10);
      if (*(_BYTE *)(v13 + 24) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 20));
      }
      if (*(_BYTE *)(v13 + 16) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v13 + 12));
      }
      WTF::fastFree((WTF *)v13, v16);
      return (_DWORD *)*a1;
    }
    else
    {
      --*(_DWORD *)v13;
    }
  }
  return (_DWORD *)v3;
}

WTF **WebCore::RenderStyle::copyContentFrom(WTF **this, const WebCore::RenderStyle *a2)
{
  _QWORD *v2;
  WTF **v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  WTF *v11;
  WTF::StringImpl *v12;
  WebCore::StyleMiscNonInheritedData *v13;
  WTF *v14;
  WTF *v15;
  WTF *v16;
  void *v17;
  WTF *v18;
  _QWORD *v19;

  v2 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 32) + 80);
  if (v2)
  {
    v3 = this;
    (*(void (**)(WTF **__return_ptr, _QWORD))(*v2 + 24))(&v18, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 32) + 80));
    v4 = (_QWORD *)v2[1];
    if (v4)
    {
      v5 = (uint64_t *)&v18;
      do
      {
        v6 = *v5;
        (*(void (**)(_QWORD **__return_ptr, _QWORD *))(*v4 + 24))(&v19, v4);
        v8 = *(_QWORD *)(v6 + 8);
        v5 = (uint64_t *)(v6 + 8);
        v7 = v8;
        v9 = v19;
        v19 = 0;
        *v5 = (uint64_t)v9;
        if (v8)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
          v10 = (uint64_t)v19;
          v19 = 0;
          if (v10)
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        }
        v4 = (_QWORD *)v4[1];
      }
      while (v4);
    }
    v11 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3 + 1);
    this = (WTF **)*((_QWORD *)v11 + 4);
    if (*(_DWORD *)this != 1)
    {
      WebCore::StyleMiscNonInheritedData::copy((WebCore::StyleMiscNonInheritedData *)this, (uint64_t *)&v19);
      this = (WTF **)v19;
      v13 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v11 + 4);
      *((_QWORD *)v11 + 4) = v19;
      if (v13)
      {
        if (*(_DWORD *)v13 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v13, v12);
          WTF::fastFree(v16, v17);
          this = (WTF **)*((_QWORD *)v11 + 4);
        }
        else
        {
          --*(_DWORD *)v13;
        }
      }
    }
    v14 = v18;
    v18 = 0;
    v15 = this[10];
    this[10] = v14;
    if (v15)
    {
      (*(void (**)(WTF *))(*(_QWORD *)v15 + 8))(v15);
      this = (WTF **)v18;
      v18 = 0;
      if (this)
        return (WTF **)(*((uint64_t (**)(WTF **))*this + 1))(this);
    }
  }
  return this;
}

uint64_t WebCore::RenderStyle::getCachedPseudoStyle(uint64_t a1, uint64_t a2)
{
  uint64_t **v2;
  uint64_t result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;

  v2 = *(uint64_t ***)(a1 + 48);
  if (!v2)
    return 0;
  v4 = *((unsigned int *)v2 + 3);
  if (!(_DWORD)v4)
    return 0;
  v5 = *v2;
  v6 = 8 * v4;
  do
  {
    result = *v5;
    if (((*(_QWORD *)(*v5 + 16) >> 43) & 0x1F) == *(_DWORD *)a2
      && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 40) + 592) == *(_QWORD *)(a2 + 8))
    {
      break;
    }
    result = 0;
    ++v5;
    v6 -= 8;
  }
  while (v6);
  return result;
}

void WebCore::SVGRenderStyle::inheritedEqual(WebCore::SVGRenderStyle *this, const WebCore::SVGRenderStyle *a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  uint64_t v6;
  const WTF::StringImpl *v7;
  const WTF::StringImpl *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF **v13;
  const WTF::StringImpl **v14;
  int v15;

  v5 = *((_QWORD *)this + 2);
  v6 = *((_QWORD *)a2 + 2);
  if (v5 == v6
    || *(float *)(v5 + 4) == *(float *)(v6 + 4)
    && WebCore::StyleColor::operator==(v5 + 8, v6 + 8)
    && WebCore::StyleColor::operator==(v5 + 24, v6 + 24)
    && WTF::equal(*(WTF **)(v5 + 40), *(const WTF::StringImpl **)(v6 + 40), v7)
    && WTF::equal(*(WTF **)(v5 + 48), *(const WTF::StringImpl **)(v6 + 48), v8)
    && *(unsigned __int8 *)(v5 + 56) == *(unsigned __int8 *)(v6 + 56)
    && *(unsigned __int8 *)(v5 + 57) == *(unsigned __int8 *)(v6 + 57))
  {
    v9 = *((_QWORD *)this + 3);
    v10 = *((_QWORD *)a2 + 3);
    if (v9 == v10 || (WebCore::StyleStrokeData::operator==(v9, v10, a3), v15))
    {
      v11 = *((_QWORD *)this + 4);
      v12 = *((_QWORD *)a2 + 4);
      if (v11 == v12
        || *(float *)(v11 + 4) == *(float *)(v12 + 4)
        && (unsigned __int16)*(_DWORD *)(v11 + 8) == (unsigned __int16)*(_DWORD *)(v12 + 8))
      {
        v13 = (WTF **)*((_QWORD *)this + 5);
        v14 = (const WTF::StringImpl **)*((_QWORD *)a2 + 5);
        if (v13 != v14)
          WebCore::StyleInheritedResourceData::operator==(v13, v14, a3);
      }
    }
  }
}

uint64_t WebCore::RenderStyle::borderAndBackgroundEqual(WebCore::RenderStyle *this, const WebCore::RenderStyle *a2)
{
  if (WebCore::operator==(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 104, *(_QWORD *)(*((_QWORD *)a2 + 1) + 24) + 104)&& WebCore::FillLayer::operator==(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16) + 8), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 16) + 8)))
  {
    return WebCore::StyleColor::operator==(*(_QWORD *)(*((_QWORD *)this + 1) + 16) + 16, *(_QWORD *)(*((_QWORD *)a2 + 1) + 16) + 16);
  }
  else
  {
    return 0;
  }
}

uint64_t WebCore::RenderStyle::hashForTextAutosizing(WebCore::RenderStyle *this)
{
  uint64_t v1;
  float v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  int v25;
  int8x8_t v26;
  int8x8_t v27;
  int32x2_t v28;
  int32x2_t v29;
  unsigned __int32 v30;
  __int32 v31;
  const float *v32;
  uint32x4_t v33;
  uint32x4_t v34;
  float32x2_t v35;
  int8x16_t v36;
  uint64_t v38;
  unsigned __int16 *v39;
  int v40;
  unsigned int v41;
  unint64_t v42;
  int v43;

  v1 = *((_QWORD *)this + 4);
  if (*(_BYTE *)(v1 + 26))
    v2 = *(float *)(v1 + 20);
  else
    v2 = (float)*(int *)(v1 + 20);
  v3 = *(_QWORD *)(v1 + 216);
  if (!*(_DWORD *)(v3 + 4))
  {
    __break(0xC471u);
    JUMPOUT(0x1964D3EF4);
  }
  v4 = *((_QWORD *)this + 1);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 + 32) + 148);
  v6 = *(_DWORD *)(*(_QWORD *)(v4 + 40) + 48);
  v7 = *(_QWORD *)(v3 + 8);
  v8 = *(_QWORD *)(v7 + 8);
  v9 = *(unsigned int *)(v7 + 4);
  if ((*(_BYTE *)(v7 + 16) & 4) != 0)
  {
    if (v9 < 2)
    {
      v11 = -1640531527;
      if ((v9 & 1) != 0)
      {
LABEL_10:
        v15 = *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(v9 + v8 - 1));
LABEL_11:
        v11 = ((v11 + v15) ^ ((v11 + v15) << 11)) + (((v11 + v15) ^ ((v11 + v15) << 11)) >> 17);
      }
    }
    else
    {
      v10 = 0;
      v11 = -1640531527;
      do
      {
        v12 = v11 + *(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(v8 + v10));
        v13 = (v12 << 16) ^ (*(unsigned __int8 *)(MEMORY[0x1E0CBF868] + *(unsigned __int8 *)(v8 + v10 + 1)) << 11) ^ v12;
        v11 = v13 + (v13 >> 11);
        v14 = v10 + 3;
        v10 += 2;
      }
      while (v14 < v9);
      if ((v9 & 1) != 0)
        goto LABEL_10;
    }
  }
  else
  {
    if (v9 < 2)
    {
      v11 = -1640531527;
    }
    else
    {
      v38 = 0;
      v11 = -1640531527;
      do
      {
        v39 = (unsigned __int16 *)(v8 + 2 * v38);
        v40 = *v39 | (32 * (*v39 - 65 < 0x1A));
        v41 = (((v39[1] - 65 < 0x1A) << 16) | (v39[1] << 11)) ^ ((v11 + v40) << 16) ^ (v11 + v40);
        v11 = v41 + (v41 >> 11);
        v42 = v38 + 3;
        v38 += 2;
      }
      while (v42 < v9);
    }
    if ((v9 & 1) != 0)
    {
      v43 = *(unsigned __int16 *)(v8 + 2 * v9 - 2);
      v15 = v43 | (32 * ((v43 - 65) < 0x1A));
      goto LABEL_11;
    }
  }
  v16 = 9 * ((~(LODWORD(v2) << 15) + LODWORD(v2)) ^ ((~(LODWORD(v2) << 15) + LODWORD(v2)) >> 10));
  v17 = (v16 ^ (v16 >> 6)) + ~((v16 ^ (v16 >> 6)) << 11);
  v18 = (v11 ^ (8 * v11)) + ((v11 ^ (8 * v11)) >> 5);
  v19 = (v18 ^ (4 * v18)) + ((v18 ^ (4 * v18)) >> 15);
  v20 = (v19 ^ (v19 << 10)) & 0xFFFFFF;
  if (!v20)
    v20 = 0x800000;
  v21 = (v20 >> 5) & 0x7F800 ^ (((unsigned __int16)v20 - 1640531527) << 16) ^ ((unsigned __int16)v20 - 1640531527);
  v22 = (*(_DWORD *)(v1 + 224) >> 5) & 0x7FFF800 ^ ((v21 + (unsigned __int16)*(_DWORD *)(v1 + 224) + (v21 >> 11)) << 16) ^ (v21 + (unsigned __int16)*(_DWORD *)(v1 + 224) + (v21 >> 11));
  v23 = (v22 + (v22 >> 11)) ^ (8 * (v22 + (v22 >> 11)));
  v24 = (v23 + (v23 >> 5)) ^ (4 * (v23 + (v23 >> 5)));
  v25 = (v24 + (v24 >> 15)) ^ ((v24 + (v24 >> 15)) << 10);
  if (!v25)
    v25 = 0x800000;
  v26 = (int8x8_t)vadd_s32(*(int32x2_t *)(v1 + 4), (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(*(int32x2_t *)(v1 + 4), 0xFuLL)));
  v27 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v26, 0xAuLL), v26), (int32x2_t)0x900000009);
  v28 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v27, 6uLL), v27);
  v29 = vadd_s32(v28, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v28, 0xBuLL)));
  v30 = v29.u32[1];
  v31 = v29.i32[0];
  v32 = (const float *)((char *)this + 44);
  *(int32x2_t *)v33.i8 = vdup_n_s32(*(_DWORD *)(*((_QWORD *)this + 3) + 228));
  *(int32x2_t *)v34.i8 = vdup_n_s32(v5);
  v34.i64[1] = v33.i64[0];
  v35 = vld1_dup_f32(v32);
  v33.u64[1] = (unint64_t)v35;
  v36 = veorq_s8(vandq_s8((int8x16_t)vshlq_u32(v34, (uint32x4_t)xmmword_1969FDD10), (int8x16_t)xmmword_1969FDD20), vandq_s8((int8x16_t)vshlq_u32(v33, (uint32x4_t)xmmword_1969FDD00), (int8x16_t)xmmword_1969FDD30));
  *(int8x8_t *)v36.i8 = veor_s8(*(int8x8_t *)v36.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL));
  return v36.i32[0] ^ (*((_DWORD *)this + 4) >> 19) & 7 ^ v36.i32[1] ^ (*((_DWORD *)this + 4) >> 25) & 7 ^ v17 ^ v30 ^ ((v17 ^ v31) >> 16) ^ v31 ^ v25 ^ HIWORD(v30) ^ v6;
}

uint64_t WebCore::RenderStyle::equalForTextAutosizing(WebCore::RenderStyle *this, const WebCore::RenderStyle *a2, const WTF::AtomString *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  WebCore::Length *v15;
  float v16;
  float v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  const WTF::StringImpl *v26;
  __int16 v27;
  WTF::StringImpl *v28;
  int v29;
  WebCore::Length *v30;
  float v31;
  float v32;
  int v33;
  WebCore::Length *v34;
  float v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  WTF::StringImpl *v39;
  _BYTE v40[16];
  _BYTE v41[65];
  unsigned __int8 v42;
  char v43;
  char v44;
  char v45;
  char v46;
  _BYTE v47[16];
  _BYTE v48[65];
  unsigned __int8 v49;
  char v50;
  char v51;
  char v52;
  char v53;

  v3 = *((_QWORD *)this + 1);
  v4 = *((_QWORD *)a2 + 1);
  if (((*(_DWORD *)(*(_QWORD *)(v4 + 32) + 148) ^ *(_DWORD *)(*(_QWORD *)(v3 + 32) + 148)) & 0x1FC000) != 0)
    return 0;
  v5 = *(_QWORD *)(v3 + 40);
  v6 = *(_QWORD *)(v4 + 40);
  if ((*(_BYTE *)(v5 + 44) == 0) == (*(_BYTE *)(v6 + 44) != 0))
    return 0;
  if (*(_DWORD *)(v5 + 48) != *(_DWORD *)(v6 + 48))
    return 0;
  v9 = *((_QWORD *)this + 3);
  v10 = *((_QWORD *)a2 + 3);
  if (*(float *)(v9 + 344) != *(float *)(v10 + 344))
    return 0;
  if (((*(_DWORD *)(v10 + 228) ^ *(_DWORD *)(v9 + 228)) & 0x7E0C) != 0)
    return 0;
  v12 = *((_QWORD *)this + 4);
  v13 = *((_QWORD *)a2 + 4);
  v14 = *(unsigned __int8 *)(v12 + 24);
  if (v14 != *(unsigned __int8 *)(v13 + 24) || (*(_BYTE *)(v12 + 25) != 0) != (*(_BYTE *)(v13 + 25) != 0))
    return 0;
  if (v14 == 13)
  {
LABEL_18:
    v18 = *(unsigned int *)(*(_QWORD *)(v12 + 216) + 4);
    if ((_DWORD)v18 != *(_DWORD *)(*(_QWORD *)(v13 + 216) + 4))
      return 0;
    if ((_DWORD)v18)
    {
      v19 = 0;
      v20 = 0;
      v21 = 8;
      do
      {
        v22 = *(_QWORD *)(v12 + 216);
        if (v19 >= *(unsigned int *)(v22 + 4))
        {
          __break(0xC471u);
          JUMPOUT(0x1964D4360);
        }
        v23 = *(_QWORD *)(v13 + 216);
        if (v19 >= *(unsigned int *)(v23 + 4))
        {
          __break(0xC471u);
          JUMPOUT(0x1964D4380);
        }
        if (!WebCore::FontCascadeDescription::familyNamesAreEqual((WebCore::FontCascadeDescription *)(v22 + v21), (const WTF::AtomString *)(v23 + v21), a3))break;
        v20 = ++v19 >= v18;
        v21 += 8;
      }
      while (v18 != v19);
      if (!v20)
        return 0;
    }
    if (*(float *)(v12 + 224) != *(float *)(v13 + 224))
      return 0;
    WebCore::FontDescription::variantSettings(v12 + 48, a2, (uint64_t)v47);
    WebCore::FontDescription::variantSettings(v13 + 48, v24, (uint64_t)v40);
    if (v47[0] != v40[0]
      || v47[1] != v40[1]
      || v47[2] != v40[2]
      || v47[3] != v40[3]
      || v47[4] != v40[4]
      || v47[5] != v40[5]
      || v47[6] != v40[6]
      || v47[7] != v40[7]
      || v47[8] != v40[8]
      || (v47[9] == 0) == (v40[9] != 0)
      || (v47[10] == 0) == (v40[10] != 0))
    {
      goto LABEL_75;
    }
    if (v42 | v49)
    {
      if ((v49 != 0) == (v42 == 0))
        goto LABEL_75;
    }
    else if ((WebCore::operator==((uint64_t)v48, (uint64_t)v41, v26) & 1) == 0)
    {
      goto LABEL_75;
    }
    if (v50 == v43 && v51 == v44 && v52 == v45 && v53 == v46)
    {
      v27 = *(_WORD *)(v13 + 228) ^ *(_WORD *)(v12 + 228);
      WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)v41, v25);
      WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)v48, v28);
      if ((v27 & 1) != 0)
        return 0;
      v29 = *(unsigned __int8 *)(v12 + 236);
      if (v29 != *(unsigned __int8 *)(v13 + 236) || (*(_BYTE *)(v12 + 237) != 0) != (*(_BYTE *)(v13 + 237) != 0))
        return 0;
      if (v29 != 13)
      {
        v30 = (WebCore::Length *)(v12 + 232);
        if (v29 == 11)
        {
          if ((WebCore::Length::isCalculatedEqual(v30, (const WebCore::Length *)(v13 + 232)) & 1) == 0)
            return 0;
        }
        else
        {
          if (*(_BYTE *)(v12 + 238))
            v31 = *(float *)v30;
          else
            v31 = (float)*(int *)v30;
          v32 = *(float *)(v13 + 232);
          if (!*(_BYTE *)(v13 + 238))
            v32 = (float)SLODWORD(v32);
          if (v31 != v32)
            return 0;
        }
      }
      v33 = *(unsigned __int8 *)(v12 + 244);
      if (v33 == *(unsigned __int8 *)(v13 + 244) && (*(_BYTE *)(v12 + 245) != 0) == (*(_BYTE *)(v13 + 245) != 0))
      {
        if (v33 == 13)
          goto LABEL_69;
        v34 = (WebCore::Length *)(v12 + 240);
        if (v33 == 11)
        {
          if ((WebCore::Length::isCalculatedEqual(v34, (const WebCore::Length *)(v13 + 240)) & 1) != 0)
            goto LABEL_69;
        }
        else
        {
          if (*(_BYTE *)(v12 + 246))
            v35 = *(float *)v34;
          else
            v35 = (float)*(int *)v34;
          v36 = *(float *)(v13 + 240);
          if (!*(_BYTE *)(v13 + 246))
            v36 = (float)SLODWORD(v36);
          if (v35 == v36)
          {
LABEL_69:
            v37 = *((_QWORD *)this + 4);
            v38 = *((_QWORD *)a2 + 4);
            if (*(float *)(v37 + 4) == *(float *)(v38 + 4)
              && *(float *)(v37 + 8) == *(float *)(v38 + 8)
              && ((*((_DWORD *)a2 + 11) ^ *((_DWORD *)this + 11)) & 0x18) == 0
              && ((*((_DWORD *)a2 + 4) ^ *((_DWORD *)this + 4)) & 0xE380000) == 0)
            {
              return ((*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 32) + 148) ^ *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32)
                                                                                                + 148)) & 0x200000) == 0;
            }
          }
        }
      }
      return 0;
    }
LABEL_75:
    WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)v41, v25);
    WebCore::FontVariantAlternatesValues::~FontVariantAlternatesValues((WebCore::FontVariantAlternatesValues *)v48, v39);
    return 0;
  }
  v15 = (WebCore::Length *)(v12 + 20);
  if (v14 != 11)
  {
    if (*(_BYTE *)(v12 + 26))
      v16 = *(float *)v15;
    else
      v16 = (float)*(int *)v15;
    v17 = *(float *)(v13 + 20);
    if (!*(_BYTE *)(v13 + 26))
      v17 = (float)SLODWORD(v17);
    if (v16 != v17)
      return 0;
    goto LABEL_18;
  }
  result = WebCore::Length::isCalculatedEqual(v15, (const WebCore::Length *)(v13 + 20));
  if ((_DWORD)result)
  {
    v12 = *((_QWORD *)this + 4);
    v13 = *((_QWORD *)a2 + 4);
    goto LABEL_18;
  }
  return result;
}

BOOL WebCore::RenderStyle::isIdempotentTextAutosizingCandidate(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  float v6;
  uint64_t v8;
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;

  if ((a2 & 1) != 0)
    return 0;
  if ((a2 & 2) != 0)
  {
    if ((a2 & 4) == 0)
      return (a2 & 0x10) == 0 || (a2 & 8) == 0;
    if ((*(_DWORD *)(a1 + 40) & 0x78000000) == 0x40000000)
    {
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      if (*(_BYTE *)(v16 + 8) == 4)
        return 0;
      if (*(_BYTE *)(v16 + 16) == 4)
      {
        v17 = *(_QWORD *)(a1 + 32);
        if (*(_BYTE *)(v17 + 24) == 4)
        {
          v18 = *(float *)(v17 + 224);
          v19 = *(_BYTE *)(v16 + 18) ? *(float *)(v16 + 12) : (float)*(int *)(v16 + 12);
          if (v19 == v18)
          {
            v23 = *(_BYTE *)(v17 + 26) ? *(float *)(v17 + 20) : (float)*(int *)(v17 + 20);
            if (v23 == v18)
              return 0;
          }
        }
      }
      return 1;
    }
    if ((a2 & 8) == 0)
      return (a2 & 0x10) == 0;
    v10 = *(_QWORD *)(a1 + 32);
    if (*(_BYTE *)(v10 + 24) != 4)
      return 0;
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    if (*(_BYTE *)(v11 + 16) != 4)
      return 0;
    v12 = *(float *)(v10 + 224);
    v13 = *(_BYTE *)(v10 + 26) ? *(float *)(v10 + 20) : (float)*(int *)(v10 + 20);
    if ((float)(v13 - v12) <= 5.0)
      return 0;
    if (*(_BYTE *)(v11 + 18))
      v20 = *(float *)(v11 + 12);
    else
      v20 = (float)*(int *)(v11 + 12);
    v21 = v20 - v12;
    v22 = 5.0;
    return v21 > v22;
  }
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(*(_QWORD *)(v2 + 8) + 8) != 4)
  {
    v6 = *(float *)(v3 + 344);
    if (v6 < 0.0 || v6 != 100.0)
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8);
      if (*(_QWORD *)(v8 + 8))
      {
        v24 = *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8);
        while (!*(_QWORD *)(v24 + 16))
        {
          v24 = *(_QWORD *)(v24 + 8);
          if (!v24)
            return 1;
        }
      }
      else
      {
        if (*(_QWORD *)(v8 + 16))
          v9 = WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::unspecifiedBoolTypeInstance;
        else
          v9 = 0;
        if (!v9)
          return 1;
      }
      return *(_WORD *)(v8 + 56) != 257;
    }
    if ((a2 & 0xC) != 0)
      return 1;
    v14 = *(_QWORD *)(a1 + 32);
    if (*(_BYTE *)(v14 + 24) != 4)
      return 0;
    if (*(_BYTE *)(v14 + 26))
      v15 = *(float *)(v14 + 20);
    else
      v15 = (float)*(int *)(v14 + 20);
    v21 = v15 - *(float *)(v14 + 224);
    v22 = 25.0;
    return v21 > v22;
  }
  return (*(_DWORD *)(v3 + 228) & 0x1C0) == 0xC0 || ((*(_DWORD *)(v3 + 228) >> 9) & 3u) - 1 < 2;
}

uint64_t WebCore::RenderStyle::whiteSpace(WebCore::RenderStyle *this)
{
  unsigned int v1;
  int v2;
  BOOL v3;
  unsigned int v4;
  char v5;
  int v6;
  BOOL v7;
  BOOL v9;

  v1 = *((_DWORD *)this + 10);
  v2 = (v1 >> 27) & 7;
  v3 = (v1 & 0x40000000) == 0;
  v4 = (v1 & 0x40000000) >> 30;
  v5 = v4 | (v2 != 3);
  v6 = v4 | (v2 != 2);
  v7 = (v1 & 0x40000000) == 0 && v2 == 1;
  if (v6 == 1 && v7)
  {
    if ((v5 & 1) != 0)
    {
      if (v2)
        v3 = 0;
      if (v3)
        return 0;
      if ((v1 & 0x40000000) == 0 || v2)
      {
        if (((v2 == 1) & (v1 >> 30)) != 0)
          LOBYTE(v2) = 1;
        else
          LOBYTE(v2) = 2;
        return v2;
      }
      goto LABEL_13;
    }
LABEL_32:
    LOBYTE(v2) = 5;
    return v2;
  }
  if ((v5 & 1) == 0)
    goto LABEL_32;
  if (v2)
    v9 = 0;
  else
    v9 = (v1 & 0x40000000) == 0;
  if (v9)
    return 0;
  if ((v1 & 0x40000000) == 0 || v2)
  {
    if ((v1 & 0x40000000) == 0 || v2 != 1)
    {
      if ((v1 & 0x40000000) == 0 && v2 == 2)
      {
        LOBYTE(v2) = 3;
      }
      else if (v2 == 1 && (v1 & 0x40000000) == 0)
      {
        LOBYTE(v2) = 2;
      }
      else
      {
        LOBYTE(v2) = 0;
      }
    }
    return v2;
  }
LABEL_13:
  LOBYTE(v2) = 4;
  return v2;
}

uint64_t WebCore::RenderStyle::specifiedLineHeight(WebCore::RenderStyle *this)
{
  return *((_QWORD *)this + 4) + 20;
}

uint64_t WebCore::RenderStyle::changeRequiresLayerRepaint(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD **)(a2 + 8);
  if (v3 == v4)
    return 0;
  v8 = v3[1];
  v9 = v4[1];
  if (v8 != v9
    && (*(_DWORD *)(v8 + 64) != *(_DWORD *)(v9 + 64)
     || ((*(unsigned __int8 *)(v8 + 68) ^ *(unsigned __int8 *)(v9 + 68)) & 2) != 0))
  {
    return 1;
  }
  if ((*(_BYTE *)(a1 + 18) & 0x38) == 0
    || (v10 = v3[5], v11 = v4[5], v10 == v11)
    || WebCore::operator==((unsigned __int8 *)(v10 + 96), (unsigned __int8 *)(v11 + 96))
    && (v3 = *(_QWORD **)(a1 + 8),
        v4 = *(_QWORD **)(a2 + 8),
        (((*(unsigned int *)(v4[5] + 636) | ((unint64_t)(*(unsigned __int16 *)(v4[5] + 640) | (*(unsigned __int8 *)(v4[5] + 642) << 16)) << 32)) ^ (*(unsigned int *)(v3[5] + 636) | ((unint64_t)(*(unsigned __int16 *)(v3[5] + 640) | (*(unsigned __int8 *)(v3[5] + 642) << 16)) << 32))) & 0x20000000000000) == 0))
  {
    v12 = v3[4];
    v13 = v4[4];
    if (v12 != v13)
    {
      if (*(float *)(v12 + 4) != *(float *)(v13 + 4))
        *a3 |= 2u;
      v14 = *(_QWORD *)(v12 + 32);
      v15 = *(_QWORD *)(v13 + 32);
      if (v14 != v15)
      {
        v26 = v13;
        v27 = v12;
        v25 = WebCore::StyleFilterData::operator==(v14, v15);
        v13 = v26;
        v12 = v27;
        if ((v25 & 1) == 0)
          *a3 |= 4u;
      }
      v16 = *(_QWORD *)(v12 + 48);
      v17 = *(_QWORD *)(v13 + 48);
      if (v16 != v17 && !WebCore::FillLayer::operator==(v16, v17))
        return 1;
    }
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
    v19 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 40);
    if (v18 != v19)
    {
      if (((*(_DWORD *)(v19 + 636) ^ *(_DWORD *)(v18 + 636)) & 0x1F00000) != 0)
        return 1;
      v21 = *(_QWORD *)(v18 + 72);
      v22 = *(_QWORD *)(v19 + 72);
      if (v21 != v22 && (WebCore::StyleFilterData::operator==(v21, v22) & 1) == 0)
        *a3 |= 4u;
      v23 = *(_QWORD *)(v18 + 216);
      v24 = *(_QWORD *)(v19 + 216);
      if (v23 != v24 && (WebCore::NinePieceImage::Data::operator==(v23, v24) & 1) == 0)
        return 1;
    }
    return 0;
  }
  *a3 |= 8u;
  return 1;
}

WTF::StringImpl *WebCore::RenderStyle::addCustomPaintWatchProperty(WTF **this, const WTF::AtomString *a2)
{
  WTF *v3;
  _DWORD *v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  WTF::StringImpl *v8;
  WebCore::StyleRareNonInheritedData *v9;
  WTF *v11;
  void *v12;
  _BYTE v13[24];

  v3 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(this + 1);
  v4 = (_DWORD *)*((_QWORD *)v3 + 5);
  if (*v4 == 1)
  {
    v7 = *((_QWORD *)v3 + 5);
  }
  else
  {
    v5 = v3;
    v6 = WTF::fastMalloc((WTF *)0x288);
    v7 = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v6, (uint64_t)v4);
    v9 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v5 + 5);
    *((_QWORD *)v5 + 5) = v7;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
      {
        WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v9, v8);
        WTF::fastFree(v11, v12);
        v7 = *((_QWORD *)v5 + 5);
      }
      else
      {
        --*(_DWORD *)v9;
      }
    }
  }
  return WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::add((uint64_t *)(v7 + 296), a2, (uint64_t)v13);
}

uint64_t WebCore::RenderStyle::scrollAnchoringSuppressionStyleDidChange(WebCore::RenderStyle *this, const WebCore::RenderStyle *a2)
{
  _QWORD *v4;
  unsigned __int8 *v5;
  _QWORD *v6;
  unsigned __int8 *v7;
  int v8;
  WebCore::Length *v9;
  float v10;
  float v12;
  int v13;
  WebCore::Length *v14;
  float v15;
  float v16;
  int v17;
  WebCore::Length *v18;
  float v19;
  float v20;
  int v21;
  WebCore::Length *v22;
  float v23;
  float v24;
  int v25;
  WebCore::Length *v26;
  float v27;
  float v28;
  int v29;
  WebCore::Length *v30;
  float v31;
  float v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL4 v39;
  uint64_t v40;
  char v41;

  if (!a2)
    return 0;
  v4 = (_QWORD *)*((_QWORD *)this + 1);
  v5 = (unsigned __int8 *)v4[1];
  v6 = (_QWORD *)*((_QWORD *)a2 + 1);
  v7 = (unsigned __int8 *)v6[1];
  if (v5 != v7)
  {
    v8 = v5[8];
    if (v8 != v7[8] || (v5[9] != 0) != (v7[9] != 0))
      return 1;
    if (v8 != 13)
    {
      v9 = (WebCore::Length *)(v5 + 4);
      if (v8 == 11)
      {
        if (!WebCore::Length::isCalculatedEqual(v9, (const WebCore::Length *)(v7 + 4)))
          return 1;
        v4 = (_QWORD *)*((_QWORD *)this + 1);
        v5 = (unsigned __int8 *)v4[1];
        v6 = (_QWORD *)*((_QWORD *)a2 + 1);
        v7 = (unsigned __int8 *)v6[1];
      }
      else
      {
        if (v5[10])
          v10 = *(float *)v9;
        else
          v10 = (float)*(int *)v9;
        v12 = *((float *)v7 + 1);
        if (!v7[10])
          v12 = (float)SLODWORD(v12);
        if (v10 != v12)
          return 1;
      }
    }
    v13 = v5[24];
    if (v13 != v7[24] || (v5[25] != 0) != (v7[25] != 0))
      return 1;
    if (v13 != 13)
    {
      v14 = (WebCore::Length *)(v5 + 20);
      if (v13 == 11)
      {
        if (!WebCore::Length::isCalculatedEqual(v14, (const WebCore::Length *)(v7 + 20)))
          return 1;
        v4 = (_QWORD *)*((_QWORD *)this + 1);
        v5 = (unsigned __int8 *)v4[1];
        v6 = (_QWORD *)*((_QWORD *)a2 + 1);
        v7 = (unsigned __int8 *)v6[1];
      }
      else
      {
        if (v5[26])
          v15 = *(float *)v14;
        else
          v15 = (float)*(int *)v14;
        v16 = *((float *)v7 + 5);
        if (!v7[26])
          v16 = (float)SLODWORD(v16);
        if (v15 != v16)
          return 1;
      }
    }
    v17 = v5[32];
    if (v17 != v7[32] || (v5[33] != 0) != (v7[33] != 0))
      return 1;
    if (v17 != 13)
    {
      v18 = (WebCore::Length *)(v5 + 28);
      if (v17 == 11)
      {
        if (!WebCore::Length::isCalculatedEqual(v18, (const WebCore::Length *)(v7 + 28)))
          return 1;
        v4 = (_QWORD *)*((_QWORD *)this + 1);
        v5 = (unsigned __int8 *)v4[1];
        v6 = (_QWORD *)*((_QWORD *)a2 + 1);
        v7 = (unsigned __int8 *)v6[1];
      }
      else
      {
        if (v5[34])
          v19 = *(float *)v18;
        else
          v19 = (float)*(int *)v18;
        v20 = *((float *)v7 + 7);
        if (!v7[34])
          v20 = (float)SLODWORD(v20);
        if (v19 != v20)
          return 1;
      }
    }
    v21 = v5[16];
    if (v21 != v7[16] || (v5[17] != 0) != (v7[17] != 0))
      return 1;
    if (v21 != 13)
    {
      v22 = (WebCore::Length *)(v5 + 12);
      if (v21 == 11)
      {
        if (!WebCore::Length::isCalculatedEqual(v22, (const WebCore::Length *)(v7 + 12)))
          return 1;
        v4 = (_QWORD *)*((_QWORD *)this + 1);
        v5 = (unsigned __int8 *)v4[1];
        v6 = (_QWORD *)*((_QWORD *)a2 + 1);
        v7 = (unsigned __int8 *)v6[1];
      }
      else
      {
        if (v5[18])
          v23 = *(float *)v22;
        else
          v23 = (float)*(int *)v22;
        v24 = *((float *)v7 + 3);
        if (!v7[18])
          v24 = (float)SLODWORD(v24);
        if (v23 != v24)
          return 1;
      }
    }
    v25 = v5[40];
    if (v25 != v7[40] || (v5[41] != 0) != (v7[41] != 0))
      return 1;
    if (v25 != 13)
    {
      v26 = (WebCore::Length *)(v5 + 36);
      if (v25 == 11)
      {
        if (!WebCore::Length::isCalculatedEqual(v26, (const WebCore::Length *)(v7 + 36)))
          return 1;
        v4 = (_QWORD *)*((_QWORD *)this + 1);
        v5 = (unsigned __int8 *)v4[1];
        v6 = (_QWORD *)*((_QWORD *)a2 + 1);
        v7 = (unsigned __int8 *)v6[1];
      }
      else
      {
        if (v5[42])
          v27 = *(float *)v26;
        else
          v27 = (float)*(int *)v26;
        v28 = *((float *)v7 + 9);
        if (!v7[42])
          v28 = (float)SLODWORD(v28);
        if (v27 != v28)
          return 1;
      }
    }
    v29 = v5[48];
    if (v29 != v7[48] || (v5[49] != 0) != (v7[49] != 0))
      return 1;
    if (v29 != 13)
    {
      v30 = (WebCore::Length *)(v5 + 44);
      if (v29 == 11)
      {
        if (!WebCore::Length::isCalculatedEqual(v30, (const WebCore::Length *)(v7 + 44)))
          return 1;
        v4 = (_QWORD *)*((_QWORD *)this + 1);
        v6 = (_QWORD *)*((_QWORD *)a2 + 1);
      }
      else
      {
        if (v5[50])
          v31 = *(float *)v30;
        else
          v31 = (float)*(int *)v30;
        v32 = *((float *)v7 + 11);
        if (!v7[50])
          v32 = (float)SLODWORD(v32);
        if (v31 != v32)
          return 1;
      }
    }
  }
  if (((*(unsigned int *)(v4[5] + 636) | ((unint64_t)(*(unsigned __int16 *)(v4[5] + 640) | (*(unsigned __int8 *)(v4[5] + 642) << 16)) << 32)) & 0x10000000000000) != 0
    && (((unint64_t)*(unsigned __int8 *)(v6[5] + 642) << 48) & 0x10000000000000) == 0
    || ((*((_DWORD *)a2 + 4) ^ *((_DWORD *)this + 4)) & 0x380000) != 0)
  {
    return 1;
  }
  v33 = (unsigned __int8 *)v4[3];
  if (v33)
  {
    v34 = (unsigned __int8 *)v6[3];
    if (v34 && v33 != v34)
    {
      v41 = WebCore::StyleSurroundData::operator==(v33, v34);
      v4 = (_QWORD *)*((_QWORD *)this + 1);
      if ((v41 & 1) == 0)
      {
        if (!WebCore::operator==((unsigned __int8 *)(v4[3] + 40), (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 24) + 40))|| !WebCore::operator==((unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 1) + 24) + 72), (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 24) + 72)))
        {
          return 1;
        }
        v4 = (_QWORD *)*((_QWORD *)this + 1);
      }
    }
  }
  if ((*((_BYTE *)this + 18) & 0x38) == 0)
    goto LABEL_77;
  if (!WebCore::operator==((unsigned __int8 *)(v4[3] + 8), (unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 24) + 8)))return 1;
  v4 = (_QWORD *)*((_QWORD *)this + 1);
LABEL_77:
  v36 = *(_DWORD *)(*(_QWORD *)(v4[4] + 40) + 20)
     || (v37 = v4[5], *(_QWORD *)(v37 + 328))
     || *(_QWORD *)(v37 + 320)
     || *(_QWORD *)(v37 + 312)
     || *(_QWORD *)(v37 + 304)
     || (*(_DWORD *)(v37 + 636) & 0x180) == 0x80
     || *(float *)(v37 + 260) != -1.0;
  v38 = *((_QWORD *)a2 + 1);
  v39 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 32) + 40) + 20)
     || (v40 = *(_QWORD *)(v38 + 40), *(_QWORD *)(v40 + 328))
     || *(_QWORD *)(v40 + 320)
     || *(_QWORD *)(v40 + 312)
     || *(_QWORD *)(v40 + 304)
     || (*(_DWORD *)(v40 + 636) & 0x180) == 0x80
     || *(float *)(v40 + 260) != -1.0;
  return v36 ^ v39;
}

uint64_t WebCore::RenderStyle::conservativelyCollectChangedAnimatableProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  float v18;
  float v19;
  int v20;
  float v21;
  float v22;
  int v23;
  float v24;
  float v25;
  int v26;
  float v27;
  float v28;
  int v29;
  float v30;
  float v31;
  int v32;
  float v33;
  float v34;
  int v35;
  float v36;
  float v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  float v45;
  float v46;
  int v47;
  float v48;
  float v49;
  int v50;
  float v51;
  float v52;
  int v53;
  float v54;
  float v55;
  int v56;
  float v57;
  float v58;
  int v59;
  float v60;
  float v61;
  int v62;
  float v63;
  float v64;
  int v65;
  float v66;
  float v67;
  int v68;
  float v69;
  float v70;
  int v71;
  float v72;
  float v73;
  int v74;
  float v75;
  float v76;
  int v77;
  float v78;
  float v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  float v93;
  float v94;
  int v95;
  float v96;
  float v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  float v102;
  float v103;
  int v104;
  float v105;
  float v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  float v119;
  float v120;
  int v121;
  float v122;
  float v123;
  int v124;
  float v125;
  float v126;
  int v127;
  float v128;
  float v129;
  int v130;
  float v131;
  float v132;
  int v133;
  float v134;
  float v135;
  int v136;
  float v137;
  float v138;
  int v139;
  float v140;
  float v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t result;
  uint64_t v149;
  int v150;
  float v151;
  float v152;
  int v153;
  float v154;
  float v155;
  unint64_t v156;
  unint64_t v157;
  unint64_t v158;
  unint64_t v159;
  const WTF::StringImpl *v160;
  unint64_t v161;
  unint64_t v162;
  int v163;
  float v164;
  float v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int v170;
  float v171;
  float v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  int v179;
  int v180;
  float v181;
  float v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t *v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v189;

  v6 = *(_DWORD *)(a1 + 40);
  v189 = a3;
  if (((*(_DWORD *)(a2 + 40) ^ v6) & 0x7FFFFFFF) != 0
    || ((*(_DWORD *)(a2 + 44) ^ *(_DWORD *)(a1 + 44)) & 0x3FFFFF) != 0)
  {
    WebCore::RenderStyle::conservativelyCollectChangedAnimatableProperties(WebCore::RenderStyle const&,WebCore::CSSPropertiesBitSet &)const::$_0::operator()<WebCore::RenderStyle::InheritedFlags const,WebCore::RenderStyle::InheritedFlags const>(a3, (_DWORD *)(a1 + 40), (_DWORD *)(a2 + 40));
  }
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = (v8 ^ v7) & 0xFFFFFFFFFFFFLL;
  v10 = HIWORD(v7);
  v11 = HIWORD(v8);
  if (v9)
    v12 = 0;
  else
    v12 = (_DWORD)v10 == (_DWORD)v11;
  if (!v12)
    WebCore::RenderStyle::conservativelyCollectChangedAnimatableProperties(WebCore::RenderStyle const&,WebCore::CSSPropertiesBitSet &)const::$_1::operator()<WebCore::RenderStyle::NonInheritedFlags const,WebCore::RenderStyle::NonInheritedFlags const>((_QWORD *)a3, (_QWORD *)(a1 + 16), (_QWORD *)(a2 + 16));
  v13 = *(_QWORD *)(a1 + 8);
  v14 = *(_QWORD *)(a2 + 8);
  if (v13 != v14)
  {
    v15 = *(_QWORD *)(v13 + 8);
    v16 = *(_QWORD *)(v14 + 8);
    if (v15 == v16)
    {
LABEL_88:
      v40 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16);
      v41 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 16);
      if (v40 != v41)
      {
        v114 = *(_QWORD *)(v40 + 8);
        v115 = *(_QWORD *)(v41 + 8);
        if (v114 != v115 && (WebCore::FillLayer::operator==(v114, v115) & 1) == 0)
        {
          *(_QWORD *)(a3 + 40) |= 0x300000000uLL;
          *(int8x16_t *)a3 = vorrq_s8(*(int8x16_t *)a3, (int8x16_t)xmmword_1969FDD40);
        }
        if ((WebCore::StyleColor::operator==(v40 + 16, v41 + 16) & 1) == 0)
          *(_QWORD *)a3 |= 0x2000000000000000uLL;
        if (!WebCore::StyleColor::operator==(v40 + 32, v41 + 32)
          || *(float *)(v40 + 48) != *(float *)(v41 + 48)
          || ((*(_BYTE *)(v41 + 52) ^ *(_BYTE *)(v40 + 52)) & 0xF) != 0
          || ((*(_BYTE *)(v41 + 52) ^ *(_BYTE *)(v40 + 52)) & 0x10) != 0
          || *(float *)(v40 + 56) != *(float *)(v41 + 56))
        {
          *(_QWORD *)(a3 + 16) |= 0x3C00000000000000uLL;
        }
      }
      v42 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
      v43 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 24);
      if (v42 == v43)
        goto LABEL_211;
      v44 = *(unsigned __int8 *)(v42 + 12);
      if (v44 != *(unsigned __int8 *)(v43 + 12) || (*(_BYTE *)(v42 + 13) != 0) != (*(_BYTE *)(v43 + 13) != 0))
        goto LABEL_99;
      if (v44 != 13)
      {
        if (v44 == 11)
        {
          if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v42 + 8), (const WebCore::Length *)(v43 + 8)) & 1) != 0)
            goto LABEL_100;
          goto LABEL_99;
        }
        v45 = *(float *)(v42 + 8);
        if (!*(_BYTE *)(v42 + 14))
          v45 = (float)SLODWORD(v45);
        v46 = *(float *)(v43 + 8);
        if (!*(_BYTE *)(v43 + 14))
          v46 = (float)SLODWORD(v46);
        if (v45 != v46)
LABEL_99:
          *(_QWORD *)(a3 + 56) |= 2uLL;
      }
LABEL_100:
      v47 = *(unsigned __int8 *)(v42 + 36);
      if (v47 == *(unsigned __int8 *)(v43 + 36) && (*(_BYTE *)(v42 + 37) != 0) == (*(_BYTE *)(v43 + 37) != 0))
      {
        if (v47 == 13)
          goto LABEL_110;
        if (v47 == 11)
        {
          if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v42 + 32), (const WebCore::Length *)(v43 + 32)) & 1) != 0)
          {
LABEL_110:
            v50 = *(unsigned __int8 *)(v42 + 28);
            if (v50 != *(unsigned __int8 *)(v43 + 28) || (*(_BYTE *)(v42 + 29) != 0) != (*(_BYTE *)(v43 + 29) != 0))
              goto LABEL_119;
            if (v50 != 13)
            {
              if (v50 == 11)
              {
                if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v42 + 24), (const WebCore::Length *)(v43 + 24)) & 1) != 0)goto LABEL_120;
                goto LABEL_119;
              }
              v51 = *(float *)(v42 + 24);
              if (!*(_BYTE *)(v42 + 30))
                v51 = (float)SLODWORD(v51);
              v52 = *(float *)(v43 + 24);
              if (!*(_BYTE *)(v43 + 30))
                v52 = (float)SLODWORD(v52);
              if (v51 != v52)
LABEL_119:
                *(_QWORD *)(a3 + 48) |= 8uLL;
            }
LABEL_120:
            v53 = *(unsigned __int8 *)(v42 + 20);
            if (v53 == *(unsigned __int8 *)(v43 + 20) && (*(_BYTE *)(v42 + 21) != 0) == (*(_BYTE *)(v43 + 21) != 0))
            {
              if (v53 == 13)
                goto LABEL_130;
              if (v53 == 11)
              {
                if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v42 + 16), (const WebCore::Length *)(v43 + 16)) & 1) != 0)
                {
LABEL_130:
                  v56 = *(unsigned __int8 *)(v42 + 44);
                  if (v56 != *(unsigned __int8 *)(v43 + 44)
                    || (*(_BYTE *)(v42 + 45) != 0) != (*(_BYTE *)(v43 + 45) != 0))
                  {
                    goto LABEL_139;
                  }
                  if (v56 != 13)
                  {
                    if (v56 == 11)
                    {
                      if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v42 + 40), (const WebCore::Length *)(v43 + 40)) & 1) != 0)goto LABEL_140;
                      goto LABEL_139;
                    }
                    v57 = *(float *)(v42 + 40);
                    if (!*(_BYTE *)(v42 + 46))
                      v57 = (float)SLODWORD(v57);
                    v58 = *(float *)(v43 + 40);
                    if (!*(_BYTE *)(v43 + 46))
                      v58 = (float)SLODWORD(v58);
                    if (v57 != v58)
LABEL_139:
                      *(_QWORD *)(a3 + 48) |= 0x800000uLL;
                  }
LABEL_140:
                  v59 = *(unsigned __int8 *)(v42 + 68);
                  if (v59 == *(unsigned __int8 *)(v43 + 68)
                    && (*(_BYTE *)(v42 + 69) != 0) == (*(_BYTE *)(v43 + 69) != 0))
                  {
                    if (v59 == 13)
                      goto LABEL_150;
                    if (v59 == 11)
                    {
                      if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v42 + 64), (const WebCore::Length *)(v43 + 64)) & 1) != 0)
                      {
LABEL_150:
                        v62 = *(unsigned __int8 *)(v42 + 60);
                        if (v62 != *(unsigned __int8 *)(v43 + 60)
                          || (*(_BYTE *)(v42 + 61) != 0) != (*(_BYTE *)(v43 + 61) != 0))
                        {
                          goto LABEL_159;
                        }
                        if (v62 != 13)
                        {
                          if (v62 == 11)
                          {
                            if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v42 + 56), (const WebCore::Length *)(v43 + 56)) & 1) != 0)goto LABEL_160;
                            goto LABEL_159;
                          }
                          v63 = *(float *)(v42 + 56);
                          if (!*(_BYTE *)(v42 + 62))
                            v63 = (float)SLODWORD(v63);
                          v64 = *(float *)(v43 + 56);
                          if (!*(_BYTE *)(v43 + 62))
                            v64 = (float)SLODWORD(v64);
                          if (v63 != v64)
LABEL_159:
                            *(_QWORD *)(a3 + 48) |= 0x40000uLL;
                        }
LABEL_160:
                        v65 = *(unsigned __int8 *)(v42 + 52);
                        if (v65 == *(unsigned __int8 *)(v43 + 52)
                          && (*(_BYTE *)(v42 + 53) != 0) == (*(_BYTE *)(v43 + 53) != 0))
                        {
                          if (v65 == 13)
                            goto LABEL_170;
                          if (v65 == 11)
                          {
                            if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v42 + 48), (const WebCore::Length *)(v43 + 48)) & 1) != 0)
                            {
LABEL_170:
                              v68 = *(unsigned __int8 *)(v42 + 76);
                              if (v68 != *(unsigned __int8 *)(v43 + 76)
                                || (*(_BYTE *)(v42 + 77) != 0) != (*(_BYTE *)(v43 + 77) != 0))
                              {
                                goto LABEL_179;
                              }
                              if (v68 != 13)
                              {
                                if (v68 == 11)
                                {
                                  if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v42 + 72), (const WebCore::Length *)(v43 + 72)) & 1) != 0)goto LABEL_180;
                                  goto LABEL_179;
                                }
                                v69 = *(float *)(v42 + 72);
                                if (!*(_BYTE *)(v42 + 78))
                                  v69 = (float)SLODWORD(v69);
                                v70 = *(float *)(v43 + 72);
                                if (!*(_BYTE *)(v43 + 78))
                                  v70 = (float)SLODWORD(v70);
                                if (v69 != v70)
LABEL_179:
                                  *(_QWORD *)(a3 + 48) |= 0x400000000000uLL;
                              }
LABEL_180:
                              v71 = *(unsigned __int8 *)(v42 + 100);
                              if (v71 == *(unsigned __int8 *)(v43 + 100)
                                && (*(_BYTE *)(v42 + 101) != 0) == (*(_BYTE *)(v43 + 101) != 0))
                              {
                                if (v71 == 13)
                                  goto LABEL_190;
                                if (v71 == 11)
                                {
                                  if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v42 + 96), (const WebCore::Length *)(v43 + 96)) & 1) != 0)
                                  {
LABEL_190:
                                    v74 = *(unsigned __int8 *)(v42 + 92);
                                    if (v74 != *(unsigned __int8 *)(v43 + 92)
                                      || (*(_BYTE *)(v42 + 93) != 0) != (*(_BYTE *)(v43 + 93) != 0))
                                    {
                                      goto LABEL_199;
                                    }
                                    if (v74 != 13)
                                    {
                                      if (v74 == 11)
                                      {
                                        if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v42 + 88), (const WebCore::Length *)(v43 + 88)) & 1) != 0)goto LABEL_200;
                                        goto LABEL_199;
                                      }
                                      v75 = *(float *)(v42 + 88);
                                      if (!*(_BYTE *)(v42 + 94))
                                        v75 = (float)SLODWORD(v75);
                                      v76 = *(float *)(v43 + 88);
                                      if (!*(_BYTE *)(v43 + 94))
                                        v76 = (float)SLODWORD(v76);
                                      if (v75 != v76)
LABEL_199:
                                        *(_QWORD *)(a3 + 48) |= 0x20000000000uLL;
                                    }
LABEL_200:
                                    v77 = *(unsigned __int8 *)(v42 + 84);
                                    if (v77 == *(unsigned __int8 *)(v43 + 84)
                                      && (*(_BYTE *)(v42 + 85) != 0) == (*(_BYTE *)(v43 + 85) != 0))
                                    {
                                      if (v77 == 13)
                                        goto LABEL_210;
                                      if (v77 != 11)
                                      {
                                        v78 = *(float *)(v42 + 80);
                                        if (!*(_BYTE *)(v42 + 86))
                                          v78 = (float)SLODWORD(v78);
                                        v79 = *(float *)(v43 + 80);
                                        if (!*(_BYTE *)(v43 + 86))
                                          v79 = (float)SLODWORD(v79);
                                        if (v78 != v79)
                                          goto LABEL_209;
LABEL_210:
                                        if ((WebCore::operator==(v42 + 104, v43 + 104) & 1) != 0)
                                          goto LABEL_211;
                                        if ((WebCore::operator==(v42 + 152, v43 + 152) & 1) == 0)
                                          *(int8x16_t *)(a3 + 40) = vorrq_s8(*(int8x16_t *)(a3 + 40), (int8x16_t)xmmword_1969FDD50);
                                        if ((WebCore::operator==(v42 + 104, v43 + 104) & 1) == 0)
                                          *(_QWORD *)(a3 + 40) |= 0x1C0000000000000uLL;
                                        if ((WebCore::operator==(v42 + 176, v43 + 176) & 1) == 0)
                                          *(_QWORD *)(a3 + 40) |= 0x320000000000uLL;
                                        if ((WebCore::operator==(v42 + 128, v43 + 128) & 1) == 0)
                                          *(_QWORD *)(a3 + 40) |= 0xE00000000000000uLL;
                                        v116 = *(_QWORD *)(v42 + 200);
                                        v117 = *(_QWORD *)(v43 + 200);
                                        if (v116 != v117
                                          && (WebCore::NinePieceImage::Data::operator==(v116, v117) & 1) == 0)
                                        {
                                          *(_QWORD *)(a3 + 8) |= 0x1F00uLL;
                                        }
                                        v118 = *(unsigned __int8 *)(v42 + 212);
                                        if (v118 != *(unsigned __int8 *)(v43 + 212)
                                          || (*(_BYTE *)(v42 + 213) != 0) != (*(_BYTE *)(v43 + 213) != 0))
                                        {
                                          goto LABEL_348;
                                        }
                                        if (v118 != 13)
                                        {
                                          if (v118 == 11)
                                          {
                                            if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v42 + 208), (const WebCore::Length *)(v43 + 208)) & 1) == 0)goto LABEL_348;
                                          }
                                          else
                                          {
                                            v119 = *(float *)(v42 + 208);
                                            if (!*(_BYTE *)(v42 + 214))
                                              v119 = (float)SLODWORD(v119);
                                            v120 = *(float *)(v43 + 208);
                                            if (!*(_BYTE *)(v43 + 214))
                                              v120 = (float)SLODWORD(v120);
                                            if (v119 != v120)
                                              goto LABEL_348;
                                          }
                                        }
                                        v121 = *(unsigned __int8 *)(v42 + 220);
                                        if (v121 == *(unsigned __int8 *)(v43 + 220)
                                          && (*(_BYTE *)(v42 + 221) != 0) == (*(_BYTE *)(v43 + 221) != 0))
                                        {
                                          if (v121 == 13)
                                            goto LABEL_349;
                                          if (v121 == 11)
                                          {
                                            if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v42 + 216), (const WebCore::Length *)(v43 + 216)) & 1) != 0)goto LABEL_349;
                                            goto LABEL_348;
                                          }
                                          v122 = *(float *)(v42 + 216);
                                          if (!*(_BYTE *)(v42 + 222))
                                            v122 = (float)SLODWORD(v122);
                                          v123 = *(float *)(v43 + 216);
                                          if (!*(_BYTE *)(v43 + 222))
                                            v123 = (float)SLODWORD(v123);
                                          if (v122 == v123)
                                          {
LABEL_349:
                                            v124 = *(unsigned __int8 *)(v42 + 228);
                                            if (v124 != *(unsigned __int8 *)(v43 + 228)
                                              || (*(_BYTE *)(v42 + 229) != 0) != (*(_BYTE *)(v43 + 229) != 0))
                                            {
                                              goto LABEL_367;
                                            }
                                            if (v124 != 13)
                                            {
                                              if (v124 == 11)
                                              {
                                                if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v42 + 224), (const WebCore::Length *)(v43 + 224)) & 1) == 0)goto LABEL_367;
                                              }
                                              else
                                              {
                                                v125 = *(float *)(v42 + 224);
                                                if (!*(_BYTE *)(v42 + 230))
                                                  v125 = (float)SLODWORD(v125);
                                                v126 = *(float *)(v43 + 224);
                                                if (!*(_BYTE *)(v43 + 230))
                                                  v126 = (float)SLODWORD(v126);
                                                if (v125 != v126)
                                                  goto LABEL_367;
                                              }
                                            }
                                            v127 = *(unsigned __int8 *)(v42 + 236);
                                            if (v127 == *(unsigned __int8 *)(v43 + 236)
                                              && (*(_BYTE *)(v42 + 237) != 0) == (*(_BYTE *)(v43 + 237) != 0))
                                            {
                                              if (v127 == 13)
                                                goto LABEL_368;
                                              if (v127 == 11)
                                              {
                                                if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v42 + 232), (const WebCore::Length *)(v43 + 232)) & 1) != 0)goto LABEL_368;
                                                goto LABEL_367;
                                              }
                                              v128 = *(float *)(v42 + 232);
                                              if (!*(_BYTE *)(v42 + 238))
                                                v128 = (float)SLODWORD(v128);
                                              v129 = *(float *)(v43 + 232);
                                              if (!*(_BYTE *)(v43 + 238))
                                                v129 = (float)SLODWORD(v129);
                                              if (v128 == v129)
                                              {
LABEL_368:
                                                v130 = *(unsigned __int8 *)(v42 + 244);
                                                if (v130 != *(unsigned __int8 *)(v43 + 244)
                                                  || (*(_BYTE *)(v42 + 245) != 0) != (*(_BYTE *)(v43 + 245) != 0))
                                                {
                                                  goto LABEL_386;
                                                }
                                                if (v130 != 13)
                                                {
                                                  if (v130 == 11)
                                                  {
                                                    if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v42 + 240), (const WebCore::Length *)(v43 + 240)) & 1) == 0)goto LABEL_386;
                                                  }
                                                  else
                                                  {
                                                    v131 = *(float *)(v42 + 240);
                                                    if (!*(_BYTE *)(v42 + 246))
                                                      v131 = (float)SLODWORD(v131);
                                                    v132 = *(float *)(v43 + 240);
                                                    if (!*(_BYTE *)(v43 + 246))
                                                      v132 = (float)SLODWORD(v132);
                                                    if (v131 != v132)
                                                      goto LABEL_386;
                                                  }
                                                }
                                                v133 = *(unsigned __int8 *)(v42 + 252);
                                                if (v133 == *(unsigned __int8 *)(v43 + 252)
                                                  && (*(_BYTE *)(v42 + 253) != 0) == (*(_BYTE *)(v43 + 253) != 0))
                                                {
                                                  if (v133 == 13)
                                                    goto LABEL_387;
                                                  if (v133 == 11)
                                                  {
                                                    if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v42 + 248), (const WebCore::Length *)(v43 + 248)) & 1) != 0)goto LABEL_387;
                                                    goto LABEL_386;
                                                  }
                                                  v134 = *(float *)(v42 + 248);
                                                  if (!*(_BYTE *)(v42 + 254))
                                                    v134 = (float)SLODWORD(v134);
                                                  v135 = *(float *)(v43 + 248);
                                                  if (!*(_BYTE *)(v43 + 254))
                                                    v135 = (float)SLODWORD(v135);
                                                  if (v134 == v135)
                                                  {
LABEL_387:
                                                    v136 = *(unsigned __int8 *)(v42 + 260);
                                                    if (v136 != *(unsigned __int8 *)(v43 + 260)
                                                      || (*(_BYTE *)(v42 + 261) != 0) != (*(_BYTE *)(v43 + 261) != 0))
                                                    {
                                                      goto LABEL_405;
                                                    }
                                                    if (v136 != 13)
                                                    {
                                                      if (v136 == 11)
                                                      {
                                                        if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v42 + 256), (const WebCore::Length *)(v43 + 256)) & 1) == 0)goto LABEL_405;
                                                      }
                                                      else
                                                      {
                                                        v137 = *(float *)(v42 + 256);
                                                        if (!*(_BYTE *)(v42 + 262))
                                                          v137 = (float)SLODWORD(v137);
                                                        v138 = *(float *)(v43 + 256);
                                                        if (!*(_BYTE *)(v43 + 262))
                                                          v138 = (float)SLODWORD(v138);
                                                        if (v137 != v138)
                                                          goto LABEL_405;
                                                      }
                                                    }
                                                    v139 = *(unsigned __int8 *)(v42 + 268);
                                                    if (v139 == *(unsigned __int8 *)(v43 + 268)
                                                      && (*(_BYTE *)(v42 + 269) != 0) == (*(_BYTE *)(v43 + 269) != 0))
                                                    {
                                                      if (v139 == 13)
                                                        goto LABEL_211;
                                                      if (v139 != 11)
                                                      {
                                                        v140 = *(float *)(v42 + 264);
                                                        if (!*(_BYTE *)(v42 + 270))
                                                          v140 = (float)SLODWORD(v140);
                                                        v141 = *(float *)(v43 + 264);
                                                        if (!*(_BYTE *)(v43 + 270))
                                                          v141 = (float)SLODWORD(v141);
                                                        if (v140 != v141)
                                                          goto LABEL_405;
LABEL_211:
                                                        v80 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 32);
                                                        v81 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 32);
                                                        if (v80 == v81)
                                                          goto LABEL_410;
                                                        if (*(float *)(v80 + 4) != *(float *)(v81 + 4))
                                                          *(_QWORD *)(a3 + 16) |= 0x80000000000000uLL;
                                                        v82 = *(_QWORD *)(v80 + 16);
                                                        v83 = *(_QWORD *)(v81 + 16);
                                                        if (v82 != v83
                                                          && !WebCore::StyleFlexibleBoxData::operator==(v82, v83))
                                                        {
                                                          *(_QWORD *)(a3 + 8) |= 0x7C0000000000000uLL;
                                                        }
                                                        v84 = *(_QWORD *)(v80 + 24);
                                                        v85 = *(_QWORD *)(v81 + 24);
                                                        if (v84 != v85
                                                          && !WebCore::StyleMultiColData::operator==(v84, v85))
                                                        {
                                                          *(_QWORD *)(a3 + 8) |= 0x2EC000000uLL;
                                                        }
                                                        v86 = *(_QWORD *)(v80 + 32);
                                                        v87 = *(_QWORD *)(v81 + 32);
                                                        if (v86 != v87
                                                          && (WebCore::StyleFilterData::operator==(v86, v87) & 1) == 0)
                                                        {
                                                          *(_QWORD *)(a3 + 8) |= 0x20000000000000uLL;
                                                        }
                                                        v88 = *(_QWORD *)(v80 + 48);
                                                        v89 = *(_QWORD *)(v81 + 48);
                                                        if (v88 != v89
                                                          && (WebCore::FillLayer::operator==(v88, v89) & 1) == 0)
                                                        {
                                                          v187 = *(_QWORD *)(a3 + 16);
                                                          *(int8x16_t *)(a3 + 40) = vorrq_s8(*(int8x16_t *)(a3 + 40), (int8x16_t)xmmword_1969FDD60);
                                                          *(_QWORD *)(a3 + 16) = v187 | 0x78000000000;
                                                        }
                                                        v90 = *(_QWORD *)(v80 + 56);
                                                        v91 = *(_QWORD *)(v81 + 56);
                                                        if (v90 != v91)
                                                        {
                                                          if ((WebCore::StyleColor::operator==(v90 + 8, v91 + 8) & 1) == 0)
                                                            *(_QWORD *)a3 |= 0x2000000000000000uLL;
                                                          if ((WebCore::StyleColor::operator==(*(_QWORD *)(v80 + 56) + 24, *(_QWORD *)(v81 + 56) + 24) & 1) == 0)*(_QWORD *)(a3 + 40) |= 0x40000000000000uLL;
                                                          if ((WebCore::StyleColor::operator==(*(_QWORD *)(v80 + 56) + 40, *(_QWORD *)(v81 + 56) + 40) & 1) == 0)*(_QWORD *)(a3 + 40) |= 0x200000000000000uLL;
                                                          if ((WebCore::StyleColor::operator==(*(_QWORD *)(v80 + 56) + 56, *(_QWORD *)(v81 + 56) + 56) & 1) == 0)*(_QWORD *)(a3 + 40) |= 0x4000000000000000uLL;
                                                          if ((WebCore::StyleColor::operator==(*(_QWORD *)(v80 + 56) + 72, *(_QWORD *)(v81 + 56) + 72) & 1) == 0)*(_QWORD *)(a3 + 40) |= 0x20000000000uLL;
                                                          if ((WebCore::StyleColor::operator==(*(_QWORD *)(v80 + 56) + 88, *(_QWORD *)(v81 + 56) + 88) & 1) == 0)*(_QWORD *)(a3 + 24) |= 0x4000000000000000uLL;
                                                          if ((WebCore::StyleColor::operator==(*(_QWORD *)(v80 + 56) + 104, *(_QWORD *)(v81 + 56) + 104) & 1) == 0)*(_QWORD *)(a3 + 16) |= 0x400000000000000uLL;
                                                        }
                                                        if (*(_QWORD *)(v80 + 80) != *(_QWORD *)(v81 + 80))
                                                          *(_QWORD *)(a3 + 8) |= 0x2000000000uLL;
                                                        if (*(_QWORD *)(v80 + 88) != *(_QWORD *)(v81 + 88))
                                                          *(int8x16_t *)(a3 + 48) = vorrq_s8(*(int8x16_t *)(a3 + 48), (int8x16_t)xmmword_1969FDD70);
                                                        if (*(double *)(v80 + 104) != *(double *)(v81 + 104)
                                                          || *(double *)(v80 + 112) != *(double *)(v81 + 112)
                                                          || ((*(_DWORD *)(v81 + 148) ^ *(_DWORD *)(v80 + 148)) & 0x60) != 0)
                                                        {
                                                          *(_QWORD *)a3 |= 0x200000000000000uLL;
                                                        }
                                                        if (((*(_WORD *)(v81 + 120) ^ *(_WORD *)(v80 + 120)) & 0x1FF) != 0)
                                                          *(_QWORD *)a3 |= 0x20000000000uLL;
                                                        if (((*(_WORD *)(v81 + 122) ^ *(_WORD *)(v80 + 122)) & 0x1FF) != 0)
                                                          *(_QWORD *)(a3 + 16) |= 0x100000uLL;
                                                        if (((*(_BYTE *)(v81 + 124) ^ *(_BYTE *)(v80 + 124)) & 0x7F) != 0)
                                                          *(_QWORD *)a3 |= 0x40000000000uLL;
                                                        if (((*(_BYTE *)(v81 + 125) ^ *(_BYTE *)(v80 + 125)) & 0x7F) != 0)
                                                          *(_QWORD *)a3 |= 0x80000000000uLL;
                                                        if (((*(_BYTE *)(v81 + 126) ^ *(_BYTE *)(v80 + 126)) & 0x7F) != 0)
                                                          *(_QWORD *)(a3 + 16) |= 0x200000uLL;
                                                        if (((*(_BYTE *)(v81 + 127) ^ *(_BYTE *)(v80 + 127)) & 0x7F) != 0)
                                                          *(_QWORD *)(a3 + 16) |= 0x400000uLL;
                                                        if (*(_DWORD *)(v80 + 144) != *(_DWORD *)(v81 + 144))
                                                          *(_QWORD *)(a3 + 16) |= 0x100000000000000uLL;
                                                        v92 = *(unsigned __int8 *)(v80 + 132);
                                                        if (v92 != *(unsigned __int8 *)(v81 + 132)
                                                          || (*(_BYTE *)(v80 + 133) != 0) != (*(_BYTE *)(v81 + 133) != 0))
                                                        {
                                                          goto LABEL_271;
                                                        }
                                                        if (v92 != 13)
                                                        {
                                                          if (v92 == 11)
                                                          {
                                                            if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v80 + 128), (const WebCore::Length *)(v81 + 128)) & 1) == 0)goto LABEL_271;
                                                          }
                                                          else
                                                          {
                                                            v93 = *(float *)(v80 + 128);
                                                            if (!*(_BYTE *)(v80 + 134))
                                                              v93 = (float)SLODWORD(v93);
                                                            v94 = *(float *)(v81 + 128);
                                                            if (!*(_BYTE *)(v81 + 134))
                                                              v94 = (float)SLODWORD(v94);
                                                            if (v93 != v94)
                                                              goto LABEL_271;
                                                          }
                                                        }
                                                        v95 = *(unsigned __int8 *)(v80 + 140);
                                                        if (v95 == *(unsigned __int8 *)(v81 + 140)
                                                          && (*(_BYTE *)(v80 + 141) != 0) == (*(_BYTE *)(v81 + 141) != 0))
                                                        {
                                                          if (v95 == 13)
                                                          {
LABEL_272:
                                                            v98 = *(_DWORD *)(v81 + 148) ^ *(_DWORD *)(v80 + 148);
                                                            if ((v98 & 0x200000) != 0)
                                                            {
                                                              *(_QWORD *)(a3 + 32) |= 0x200uLL;
                                                              v98 = *(_DWORD *)(v81 + 148) ^ *(_DWORD *)(v80 + 148);
                                                            }
                                                            if ((v98 & 0x38000000) != 0)
                                                            {
                                                              *(_QWORD *)(a3 + 24) |= 0x20000uLL;
                                                              v98 = *(_DWORD *)(v81 + 148) ^ *(_DWORD *)(v80 + 148);
                                                            }
                                                            if ((v98 & 0x7000000) != 0)
                                                              *(_QWORD *)(a3 + 16) |= 0x1000000000000uLL;
                                                            v99 = *(_QWORD *)(v80 + 40);
                                                            v100 = *(_QWORD *)(v81 + 40);
                                                            if (v99 == v100)
                                                              goto LABEL_410;
                                                            v101 = *(unsigned __int8 *)(v99 + 28);
                                                            if (v101 != *(unsigned __int8 *)(v100 + 28)
                                                              || (*(_BYTE *)(v99 + 29) != 0) != (*(_BYTE *)(v100 + 29) != 0))
                                                            {
                                                              goto LABEL_288;
                                                            }
                                                            if (v101 != 13)
                                                            {
                                                              if (v101 == 11)
                                                              {
                                                                if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v99 + 24), (const WebCore::Length *)(v100 + 24)) & 1) != 0)goto LABEL_289;
                                                                goto LABEL_288;
                                                              }
                                                              v102 = *(float *)(v99 + 24);
                                                              if (!*(_BYTE *)(v99 + 30))
                                                                v102 = (float)SLODWORD(v102);
                                                              v103 = *(float *)(v100 + 24);
                                                              if (!*(_BYTE *)(v100 + 30))
                                                                v103 = (float)SLODWORD(v103);
                                                              if (v102 != v103)
LABEL_288:
                                                                *(_QWORD *)(a3 + 32) |= 0x80000uLL;
                                                            }
LABEL_289:
                                                            v104 = *(unsigned __int8 *)(v99 + 36);
                                                            if (v104 == *(unsigned __int8 *)(v100 + 36)
                                                              && (*(_BYTE *)(v99 + 37) != 0) == (*(_BYTE *)(v100 + 37) != 0))
                                                            {
                                                              if (v104 == 13)
                                                              {
LABEL_299:
                                                                if (*(float *)(v99 + 40) != *(float *)(v100 + 40))
                                                                  *(_QWORD *)(a3 + 32) |= 0x200000uLL;
                                                                if (*(unsigned __int8 *)(v99 + 44) != *(unsigned __int8 *)(v100 + 44))
                                                                  *(_QWORD *)(a3 + 32) |= 0x40000uLL;
                                                                v107 = *(unsigned int *)(v99 + 20);
                                                                if ((_DWORD)v107 == *(_DWORD *)(v100 + 20))
                                                                {
                                                                  v108 = *(_QWORD **)(v100 + 8);
                                                                  v109 = *(_QWORD **)(v99 + 8);
                                                                  if ((_DWORD)v107)
                                                                  {
                                                                    v110 = 8 * v107 - 8;
                                                                    v111 = v109;
                                                                    v112 = v108;
                                                                    while (1)
                                                                    {
                                                                      v113 = v110;
                                                                      if (!(*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)*v111 + 32))(*v111, *v112))break;
                                                                      ++v111;
                                                                      ++v112;
                                                                      v110 = v113 - 8;
                                                                      if (!v113)
                                                                        goto LABEL_407;
                                                                    }
                                                                  }
                                                                  else
                                                                  {
                                                                    v112 = v108;
                                                                    v111 = v109;
LABEL_407:
                                                                    if (v111 == &v109[v107] && v112 == &v108[v107])
                                                                      goto LABEL_410;
                                                                  }
                                                                }
                                                                *(_QWORD *)(a3 + 32) |= 0x20000uLL;
LABEL_410:
                                                                v142 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
                                                                v143 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 40);
                                                                if (v142 != v143)
                                                                  WebCore::RenderStyle::conservativelyCollectChangedAnimatableProperties(WebCore::RenderStyle const&,WebCore::CSSPropertiesBitSet &)const::$_7::operator()<WebCore::StyleRareNonInheritedData const,WebCore::StyleRareNonInheritedData const>((uint64_t)&v189, v142, v143);
                                                                goto LABEL_412;
                                                              }
                                                              if (v104 == 11)
                                                              {
                                                                if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v99 + 32), (const WebCore::Length *)(v100 + 32)) & 1) != 0)goto LABEL_299;
                                                              }
                                                              else
                                                              {
                                                                v105 = *(float *)(v99 + 32);
                                                                if (!*(_BYTE *)(v99 + 38))
                                                                  v105 = (float)SLODWORD(v105);
                                                                v106 = *(float *)(v100 + 32);
                                                                if (!*(_BYTE *)(v100 + 38))
                                                                  v106 = (float)SLODWORD(v106);
                                                                if (v105 == v106)
                                                                  goto LABEL_299;
                                                              }
                                                            }
                                                            *(_QWORD *)(a3 + 32) |= 0x100000uLL;
                                                            goto LABEL_299;
                                                          }
                                                          if (v95 == 11)
                                                          {
                                                            if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v80 + 136), (const WebCore::Length *)(v81 + 136)) & 1) != 0)goto LABEL_272;
                                                          }
                                                          else
                                                          {
                                                            v96 = *(float *)(v80 + 136);
                                                            if (!*(_BYTE *)(v80 + 142))
                                                              v96 = (float)SLODWORD(v96);
                                                            v97 = *(float *)(v81 + 136);
                                                            if (!*(_BYTE *)(v81 + 142))
                                                              v97 = (float)SLODWORD(v97);
                                                            if (v96 == v97)
                                                              goto LABEL_272;
                                                          }
                                                        }
LABEL_271:
                                                        *(_QWORD *)(a3 + 16) |= 0x2000000000000uLL;
                                                        goto LABEL_272;
                                                      }
                                                      if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v42 + 264), (const WebCore::Length *)(v43 + 264)) & 1) != 0)goto LABEL_211;
                                                    }
LABEL_405:
                                                    *(_QWORD *)(a3 + 40) |= 0x80000000000uLL;
                                                    goto LABEL_211;
                                                  }
                                                }
LABEL_386:
                                                *(_QWORD *)(a3 + 40) |= 0x40000000000uLL;
                                                goto LABEL_387;
                                              }
                                            }
LABEL_367:
                                            *(_QWORD *)(a3 + 48) |= 1uLL;
                                            goto LABEL_368;
                                          }
                                        }
LABEL_348:
                                        *(_QWORD *)(a3 + 40) |= 0x8000000000000000;
                                        goto LABEL_349;
                                      }
                                      if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v42 + 80), (const WebCore::Length *)(v43 + 80)) & 1) != 0)goto LABEL_210;
                                    }
LABEL_209:
                                    *(_QWORD *)(a3 + 48) |= 0x200000000000uLL;
                                    goto LABEL_210;
                                  }
                                }
                                else
                                {
                                  v72 = *(float *)(v42 + 96);
                                  if (!*(_BYTE *)(v42 + 102))
                                    v72 = (float)SLODWORD(v72);
                                  v73 = *(float *)(v43 + 96);
                                  if (!*(_BYTE *)(v43 + 102))
                                    v73 = (float)SLODWORD(v73);
                                  if (v72 == v73)
                                    goto LABEL_190;
                                }
                              }
                              *(_QWORD *)(a3 + 48) |= 0x100000000000uLL;
                              goto LABEL_190;
                            }
                          }
                          else
                          {
                            v66 = *(float *)(v42 + 48);
                            if (!*(_BYTE *)(v42 + 54))
                              v66 = (float)SLODWORD(v66);
                            v67 = *(float *)(v43 + 48);
                            if (!*(_BYTE *)(v43 + 54))
                              v67 = (float)SLODWORD(v67);
                            if (v66 == v67)
                              goto LABEL_170;
                          }
                        }
                        *(_QWORD *)(a3 + 48) |= 0x400000uLL;
                        goto LABEL_170;
                      }
                    }
                    else
                    {
                      v60 = *(float *)(v42 + 64);
                      if (!*(_BYTE *)(v42 + 70))
                        v60 = (float)SLODWORD(v60);
                      v61 = *(float *)(v43 + 64);
                      if (!*(_BYTE *)(v43 + 70))
                        v61 = (float)SLODWORD(v61);
                      if (v60 == v61)
                        goto LABEL_150;
                    }
                  }
                  *(_QWORD *)(a3 + 48) |= 0x200000uLL;
                  goto LABEL_150;
                }
              }
              else
              {
                v54 = *(float *)(v42 + 16);
                if (!*(_BYTE *)(v42 + 22))
                  v54 = (float)SLODWORD(v54);
                v55 = *(float *)(v43 + 16);
                if (!*(_BYTE *)(v43 + 22))
                  v55 = (float)SLODWORD(v55);
                if (v54 == v55)
                  goto LABEL_130;
              }
            }
            *(_QWORD *)(a3 + 48) |= 0x800000000000uLL;
            goto LABEL_130;
          }
        }
        else
        {
          v48 = *(float *)(v42 + 32);
          if (!*(_BYTE *)(v42 + 38))
            v48 = (float)SLODWORD(v48);
          v49 = *(float *)(v43 + 32);
          if (!*(_BYTE *)(v43 + 38))
            v49 = (float)SLODWORD(v49);
          if (v48 == v49)
            goto LABEL_110;
        }
      }
      *(_QWORD *)(a3 + 48) |= 0x8000uLL;
      goto LABEL_110;
    }
    v17 = *(unsigned __int8 *)(v15 + 8);
    if (v17 == *(unsigned __int8 *)(v16 + 8) && (*(_BYTE *)(v15 + 9) != 0) == (*(_BYTE *)(v16 + 9) != 0))
    {
      if (v17 == 13)
        goto LABEL_20;
      if (v17 == 11)
      {
        if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v15 + 4), (const WebCore::Length *)(v16 + 4)) & 1) != 0)
        {
LABEL_20:
          v20 = *(unsigned __int8 *)(v15 + 16);
          if (v20 != *(unsigned __int8 *)(v16 + 16) || (*(_BYTE *)(v15 + 17) != 0) != (*(_BYTE *)(v16 + 17) != 0))
            goto LABEL_29;
          if (v20 != 13)
          {
            if (v20 == 11)
            {
              if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v15 + 12), (const WebCore::Length *)(v16 + 12)) & 1) != 0)goto LABEL_30;
              goto LABEL_29;
            }
            v21 = *(float *)(v15 + 12);
            if (!*(_BYTE *)(v15 + 18))
              v21 = (float)SLODWORD(v21);
            v22 = *(float *)(v16 + 12);
            if (!*(_BYTE *)(v16 + 18))
              v22 = (float)SLODWORD(v22);
            if (v21 != v22)
LABEL_29:
              *(_QWORD *)(a3 + 48) |= 0x200uLL;
          }
LABEL_30:
          v23 = *(unsigned __int8 *)(v15 + 24);
          if (v23 == *(unsigned __int8 *)(v16 + 24) && (*(_BYTE *)(v15 + 25) != 0) == (*(_BYTE *)(v16 + 25) != 0))
          {
            if (v23 == 13)
              goto LABEL_40;
            if (v23 == 11)
            {
              if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v15 + 20), (const WebCore::Length *)(v16 + 20)) & 1) != 0)
              {
LABEL_40:
                v26 = *(unsigned __int8 *)(v15 + 32);
                if (v26 != *(unsigned __int8 *)(v16 + 32) || (*(_BYTE *)(v15 + 33) != 0) != (*(_BYTE *)(v16 + 33) != 0))
                  goto LABEL_49;
                if (v26 != 13)
                {
                  if (v26 == 11)
                  {
                    if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v15 + 28), (const WebCore::Length *)(v16 + 28)) & 1) != 0)goto LABEL_50;
                    goto LABEL_49;
                  }
                  v27 = *(float *)(v15 + 28);
                  if (!*(_BYTE *)(v15 + 34))
                    v27 = (float)SLODWORD(v27);
                  v28 = *(float *)(v16 + 28);
                  if (!*(_BYTE *)(v16 + 34))
                    v28 = (float)SLODWORD(v28);
                  if (v27 != v28)
LABEL_49:
                    *(_QWORD *)(a3 + 48) |= 0x40000000uLL;
                }
LABEL_50:
                v29 = *(unsigned __int8 *)(v15 + 40);
                if (v29 == *(unsigned __int8 *)(v16 + 40) && (*(_BYTE *)(v15 + 41) != 0) == (*(_BYTE *)(v16 + 41) != 0))
                {
                  if (v29 == 13)
                    goto LABEL_60;
                  if (v29 == 11)
                  {
                    if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v15 + 36), (const WebCore::Length *)(v16 + 36)) & 1) != 0)
                    {
LABEL_60:
                      v32 = *(unsigned __int8 *)(v15 + 48);
                      if (v32 != *(unsigned __int8 *)(v16 + 48)
                        || (*(_BYTE *)(v15 + 49) != 0) != (*(_BYTE *)(v16 + 49) != 0))
                      {
                        goto LABEL_69;
                      }
                      if (v32 != 13)
                      {
                        if (v32 == 11)
                        {
                          if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v15 + 44), (const WebCore::Length *)(v16 + 44)) & 1) != 0)goto LABEL_70;
                          goto LABEL_69;
                        }
                        v33 = *(float *)(v15 + 44);
                        if (!*(_BYTE *)(v15 + 50))
                          v33 = (float)SLODWORD(v33);
                        v34 = *(float *)(v16 + 44);
                        if (!*(_BYTE *)(v16 + 50))
                          v34 = (float)SLODWORD(v34);
                        if (v33 != v34)
LABEL_69:
                          *(_QWORD *)(a3 + 48) |= 0x10000000uLL;
                      }
LABEL_70:
                      if ((*(unsigned __int8 *)(v16 + 68) ^ *(unsigned __int8 *)(v15 + 68)) <= 0xF)
                      {
                        v35 = *(unsigned __int8 *)(v15 + 56);
                        if (v35 == *(unsigned __int8 *)(v16 + 56)
                          && (*(_BYTE *)(v15 + 57) != 0) == (*(_BYTE *)(v16 + 57) != 0))
                        {
                          if (v35 == 13)
                            goto LABEL_81;
                          if (v35 == 11)
                          {
                            if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v15 + 52), (const WebCore::Length *)(v16 + 52)) & 1) != 0)
                            {
LABEL_81:
                              if (*(_DWORD *)(v15 + 60) != *(_DWORD *)(v16 + 60)
                                || (v38 = *(_BYTE *)(v15 + 68),
                                    v39 = *(unsigned __int8 *)(v16 + 68),
                                    (v38 & 1) != (v39 & 1)))
                              {
                                *(_QWORD *)(a3 + 32) |= 0x100000000000uLL;
                                v38 = *(_BYTE *)(v15 + 68);
                                v39 = *(unsigned __int8 *)(v16 + 68);
                              }
                              if (((v39 >> 2) & 1) != (v38 & 4) >> 2)
                              {
                                *(_QWORD *)(a3 + 8) |= 0x2000uLL;
                                v38 = *(_BYTE *)(v15 + 68);
                                v39 = *(unsigned __int8 *)(v16 + 68);
                              }
                              if (((v39 >> 3) & 1) != (v38 & 8) >> 3)
                                *(_QWORD *)(a3 + 32) |= 0x10000000000000uLL;
                              goto LABEL_88;
                            }
                          }
                          else
                          {
                            v36 = *(float *)(v15 + 52);
                            if (!*(_BYTE *)(v15 + 58))
                              v36 = (float)SLODWORD(v36);
                            v37 = *(float *)(v16 + 52);
                            if (!*(_BYTE *)(v16 + 58))
                              v37 = (float)SLODWORD(v37);
                            if (v36 == v37)
                              goto LABEL_81;
                          }
                        }
                      }
                      *(_QWORD *)(a3 + 32) |= 0x100000000uLL;
                      goto LABEL_81;
                    }
                  }
                  else
                  {
                    v30 = *(float *)(v15 + 36);
                    if (!*(_BYTE *)(v15 + 42))
                      v30 = (float)SLODWORD(v30);
                    v31 = *(float *)(v16 + 36);
                    if (!*(_BYTE *)(v16 + 42))
                      v31 = (float)SLODWORD(v31);
                    if (v30 == v31)
                      goto LABEL_60;
                  }
                }
                *(_QWORD *)(a3 + 48) |= 0x100000000uLL;
                goto LABEL_60;
              }
            }
            else
            {
              v24 = *(float *)(v15 + 20);
              if (!*(_BYTE *)(v15 + 26))
                v24 = (float)SLODWORD(v24);
              v25 = *(float *)(v16 + 20);
              if (!*(_BYTE *)(v16 + 26))
                v25 = (float)SLODWORD(v25);
              if (v24 == v25)
                goto LABEL_40;
            }
          }
          *(_QWORD *)(a3 + 48) |= 0x400000000uLL;
          goto LABEL_40;
        }
      }
      else
      {
        v18 = *(float *)(v15 + 4);
        if (!*(_BYTE *)(v15 + 10))
          v18 = (float)SLODWORD(v18);
        v19 = *(float *)(v16 + 4);
        if (!*(_BYTE *)(v16 + 10))
          v19 = (float)SLODWORD(v19);
        if (v18 == v19)
          goto LABEL_20;
      }
    }
    *(_QWORD *)(a3 + 56) |= 4uLL;
    goto LABEL_20;
  }
LABEL_412:
  v144 = *(_QWORD *)(a1 + 24);
  v145 = *(_QWORD *)(a2 + 24);
  if (v144 != v145)
  {
    if (!WebCore::StyleColor::operator==(v144 + 16, v145 + 16)
      || (WebCore::StyleColor::operator==(v144 + 64, v145 + 64) & 1) == 0)
    {
      *(_QWORD *)(a3 + 40) |= 0x1000000uLL;
    }
    if (!WebCore::StyleColor::operator==(v144 + 32, v145 + 32)
      || (WebCore::StyleColor::operator==(v144 + 80, v145 + 80) & 1) == 0)
    {
      *(_QWORD *)(a3 + 40) |= 0x400000uLL;
    }
    if (!WebCore::StyleColor::operator==(v144 + 48, v145 + 48)
      || (WebCore::StyleColor::operator==(v144 + 96, v145 + 96) & 1) == 0)
    {
      *(_QWORD *)(a3 + 32) |= 8uLL;
    }
    if (!WebCore::StyleColor::operator==(v144 + 112, v145 + 112)
      || !WebCore::StyleColor::operator==(v144 + 128, v145 + 128)
      || ((*(_DWORD *)(v145 + 236) ^ *(_DWORD *)(v144 + 236)) & 0x600000) != 0)
    {
      *(_QWORD *)(a3 + 8) |= 0x80000uLL;
    }
    if (!WebCore::StyleColor::operator==(v144 + 144, v145 + 144)
      || ((*(_DWORD *)(v145 + 236) ^ *(_DWORD *)(v144 + 236)) & 0x800000) != 0)
    {
      *(_QWORD *)a3 |= 0x8000000000uLL;
    }
    v161 = *(_QWORD *)(v144 + 160);
    v162 = *(_QWORD *)(v145 + 160);
    if (v161 != v162)
    {
      if (!v161
        || !v162
        || !WebCore::ShadowData::operator==(WebCore::ShadowData const&)const::$_0::operator()<WebCore::ShadowData,WebCore::ShadowData>(*(WebCore::Length **)(v144 + 160), *(WebCore::Length **)(v145 + 160)))
      {
        goto LABEL_576;
      }
      while (1)
      {
        v162 = *(_QWORD *)(v162 + 56);
        v161 = *(_QWORD *)(v161 + 56);
        if (!v161 || v162 == 0)
          break;
        if ((WebCore::ShadowData::operator==(WebCore::ShadowData const&)const::$_0::operator()<WebCore::ShadowData,WebCore::ShadowData>((WebCore::Length *)v161, (WebCore::Length *)v162) & 1) == 0)goto LABEL_576;
      }
      if (v161 | v162)
LABEL_576:
        *(_QWORD *)(a3 + 32) |= 0x400uLL;
    }
    v163 = *(unsigned __int8 *)(v144 + 180);
    if (v163 == *(unsigned __int8 *)(v145 + 180) && (*(_BYTE *)(v144 + 181) != 0) == (*(_BYTE *)(v145 + 181) != 0))
    {
      if (v163 == 13)
        goto LABEL_475;
      if (v163 == 11)
      {
        if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v144 + 176), (const WebCore::Length *)(v145 + 176)) & 1) != 0)
          goto LABEL_475;
      }
      else
      {
        v164 = *(float *)(v144 + 176);
        if (!*(_BYTE *)(v144 + 182))
          v164 = (float)SLODWORD(v164);
        v165 = *(float *)(v145 + 176);
        if (!*(_BYTE *)(v145 + 182))
          v165 = (float)SLODWORD(v165);
        if (v164 == v165)
        {
LABEL_475:
          if (((*(_DWORD *)(v145 + 232) ^ *(_DWORD *)(v144 + 232)) & 0xC0) == 0)
            goto LABEL_477;
        }
      }
    }
    *(_QWORD *)(a3 + 32) |= 0x80uLL;
LABEL_477:
    v166 = *(_QWORD *)(v144 + 188);
    v167 = *(_QWORD *)(v145 + 188);
    v168 = v167 & 0xFF00000000;
    if ((v166 & 0xFF00000000) == 0 || v168 == 0)
    {
      if (((v166 & 0xFF00000000) != 0) == (v168 != 0))
      {
LABEL_484:
        v170 = *(unsigned __int8 *)(v144 + 204);
        if (v170 == *(unsigned __int8 *)(v145 + 204) && (*(_BYTE *)(v144 + 205) != 0) == (*(_BYTE *)(v145 + 205) != 0))
        {
          if (v170 == 13)
          {
LABEL_494:
            if (*(float *)(v144 + 208) != *(float *)(v145 + 208))
              *(_QWORD *)(a3 + 24) |= 0x1000000000000uLL;
            if (*(unsigned __int16 *)(v144 + 224) != *(unsigned __int16 *)(v145 + 224)
              || ((*(_DWORD *)(v145 + 228) ^ *(_DWORD *)(v144 + 228)) & 1) != 0)
            {
              *(_QWORD *)(a3 + 32) |= 0x8000000000uLL;
            }
            if (*(unsigned __int16 *)(v144 + 226) != *(unsigned __int16 *)(v145 + 226)
              || (v173 = *(_DWORD *)(v145 + 228) ^ *(_DWORD *)(v144 + 228), (v173 & 2) != 0))
            {
              *(_QWORD *)(a3 + 16) |= 0x200000000000000uLL;
              v173 = *(_DWORD *)(v145 + 228) ^ *(_DWORD *)(v144 + 228);
            }
            if ((v173 & 0x1C0) != 0)
            {
              *(_QWORD *)(a3 + 32) |= 0x20000000000uLL;
              v173 = *(_DWORD *)(v145 + 228) ^ *(_DWORD *)(v144 + 228);
            }
            if ((v173 & 0x600) != 0)
            {
              *(_QWORD *)(a3 + 16) |= 0x8000000000000000;
              v173 = *(_DWORD *)(v145 + 228) ^ *(_DWORD *)(v144 + 228);
            }
            if ((v173 & 0x7000) != 0)
            {
              *(_QWORD *)(a3 + 16) |= 0x2000000uLL;
              v173 = *(_DWORD *)(v145 + 228) ^ *(_DWORD *)(v144 + 228);
            }
            if ((v173 & 0xC00000) != 0)
              *(_QWORD *)(a3 + 16) |= 0x2000uLL;
            if (((*(_DWORD *)(v145 + 232) ^ *(_DWORD *)(v144 + 232)) & 0xF) != 0)
              *(_QWORD *)(a3 + 32) |= 0x10uLL;
            if (*(unsigned __int8 *)(v144 + 302) != *(unsigned __int8 *)(v145 + 302)
              || *(unsigned __int8 *)(v144 + 303) != *(unsigned __int8 *)(v145 + 303))
            {
              *(_QWORD *)a3 |= 4uLL;
            }
            if (((*(_DWORD *)(v145 + 228) ^ *(_DWORD *)(v144 + 228)) & 0x1E000000) != 0)
              *(_QWORD *)(a3 + 32) |= 0x20uLL;
            v174 = *(_QWORD *)(v144 + 312);
            v175 = *(_QWORD *)(v145 + 312);
            if (v174 != v175 && (!v174 || !v175 || (WebCore::operator==(v174, v175, v160) & 1) == 0))
              *(_QWORD *)(a3 + 24) |= 0x4000uLL;
            v176 = *(_QWORD *)(v144 + 320);
            v177 = *(_QWORD *)(v145 + 320);
            if (v176 != v177 && (WebCore::StyleFilterData::operator==(v176, v177) & 1) == 0)
              *(_QWORD *)(a3 + 32) |= 0x200000000000uLL;
            if (*(float *)(v144 + 336) != *(float *)(v145 + 336)
              || *(unsigned __int8 *)(v144 + 340) != *(unsigned __int8 *)(v145 + 340))
            {
              *(_QWORD *)(a3 + 24) |= 0x80000000000000uLL;
            }
            v178 = *(_DWORD *)(v145 + 232) ^ *(_DWORD *)(v144 + 232);
            if ((v178 & 0x8000) != 0)
            {
              *(_QWORD *)(a3 + 16) |= 0x4000uLL;
              v178 = *(_DWORD *)(v145 + 232) ^ *(_DWORD *)(v144 + 232);
            }
            if ((v178 & 0x3800000) != 0)
            {
              *(_QWORD *)(a3 + 24) |= 0x400000000000000uLL;
              v178 = *(_DWORD *)(v145 + 232) ^ *(_DWORD *)(v144 + 232);
            }
            if ((v178 & 0xC000000) != 0)
            {
              *(_QWORD *)(a3 + 32) |= 0x100uLL;
              v178 = *(_DWORD *)(v145 + 232) ^ *(_DWORD *)(v144 + 232);
            }
            if ((v178 & 0x30000000) != 0)
              *(_QWORD *)(a3 + 32) |= 1uLL;
            v179 = *(_DWORD *)(v145 + 236) ^ *(_DWORD *)(v144 + 236);
            if ((v179 & 0x18) != 0)
            {
              *(_QWORD *)a3 |= 0x10uLL;
              v179 = *(_DWORD *)(v145 + 236) ^ *(_DWORD *)(v144 + 236);
            }
            if ((v179 & 0x3800) != 0)
            {
              *(_QWORD *)(a3 + 24) |= 0x20uLL;
              v179 = *(_DWORD *)(v145 + 236) ^ *(_DWORD *)(v144 + 236);
            }
            if ((v179 & 0xC000) != 0)
            {
              *(_QWORD *)(a3 + 24) |= 0x400000000000uLL;
              v179 = *(_DWORD *)(v145 + 236) ^ *(_DWORD *)(v144 + 236);
            }
            if ((v179 & 0x30000) != 0)
            {
              *(_QWORD *)(a3 + 24) |= 0x800000000000uLL;
              v179 = *(_DWORD *)(v145 + 236) ^ *(_DWORD *)(v144 + 236);
            }
            if ((v179 & 0x40000) != 0)
              goto LABEL_548;
            v180 = *(unsigned __int8 *)(v144 + 248);
            if (v180 != *(unsigned __int8 *)(v145 + 248)
              || (*(_BYTE *)(v144 + 249) != 0) != (*(_BYTE *)(v145 + 249) != 0))
            {
              goto LABEL_548;
            }
            if (v180 != 13)
            {
              if (v180 == 11)
              {
                if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v144 + 244), (const WebCore::Length *)(v145 + 244)) & 1) != 0)goto LABEL_549;
                goto LABEL_548;
              }
              v181 = *(float *)(v144 + 244);
              if (!*(_BYTE *)(v144 + 250))
                v181 = (float)SLODWORD(v181);
              v182 = *(float *)(v145 + 244);
              if (!*(_BYTE *)(v145 + 250))
                v182 = (float)SLODWORD(v182);
              if (v181 != v182)
LABEL_548:
                *(_QWORD *)(a3 + 24) |= 0x4000000000000uLL;
            }
LABEL_549:
            v183 = *(_QWORD *)(v144 + 8);
            v184 = *(_QWORD *)(v145 + 8);
            if (v183 != v184
              && (!v183 || !v184 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v183 + 16))(v183) & 1) == 0))
            {
              *(_QWORD *)(a3 + 16) |= 0x8000000uLL;
            }
            v185 = (unint64_t *)(v144 + 384);
            if (*(_DWORD *)(v144 + 392))
            {
              if (!*(_DWORD *)(v145 + 392) && (*(_BYTE *)(v145 + 390) & 4) == 0)
                goto LABEL_664;
            }
            else
            {
              v186 = *v185;
              if (*(_DWORD *)(v145 + 392))
              {
                if ((v186 & 0x4000000000000) == 0)
                  goto LABEL_664;
              }
              else
              {
                if (((v186 >> 50) & 1) != (*(_BYTE *)(v145 + 390) & 4) >> 2)
                  goto LABEL_664;
                if ((v186 & 0x4000000000000) == 0)
                {
LABEL_554:
                  if (*(unsigned __int8 *)(v144 + 368) != *(unsigned __int8 *)(v145 + 368)
                    || *(_QWORD *)(v144 + 376) != *(_QWORD *)(v145 + 376))
                  {
                    *(_QWORD *)(a3 + 16) |= 0x20000000uLL;
                  }
                  goto LABEL_413;
                }
              }
            }
            if ((WebCore::operator==((uint64_t)v185, v145 + 384) & 1) != 0)
              goto LABEL_554;
LABEL_664:
            *(_QWORD *)(a3 + 24) |= 0x20000000uLL;
            goto LABEL_554;
          }
          if (v170 == 11)
          {
            if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v144 + 200), (const WebCore::Length *)(v145 + 200)) & 1) != 0)goto LABEL_494;
          }
          else
          {
            v171 = *(float *)(v144 + 200);
            if (!*(_BYTE *)(v144 + 206))
              v171 = (float)SLODWORD(v171);
            v172 = *(float *)(v145 + 200);
            if (!*(_BYTE *)(v145 + 206))
              v172 = (float)SLODWORD(v172);
            if (v171 == v172)
              goto LABEL_494;
          }
        }
        *(_QWORD *)(a3 + 40) |= 0x40000000uLL;
        goto LABEL_494;
      }
    }
    else if (*(float *)&v166 == *(float *)&v167)
    {
      goto LABEL_484;
    }
    *(_QWORD *)(a3 + 32) |= 0x1000uLL;
    goto LABEL_484;
  }
LABEL_413:
  v146 = *(_QWORD *)(a1 + 32);
  v147 = *(_QWORD *)(a2 + 32);
  if (v146 == v147)
    goto LABEL_414;
  v150 = *(unsigned __int8 *)(v146 + 16);
  if (v150 != *(unsigned __int8 *)(v147 + 16) || (*(_BYTE *)(v146 + 17) != 0) != (*(_BYTE *)(v147 + 17) != 0))
    goto LABEL_425;
  if (v150 != 13)
  {
    if (v150 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v146 + 12), (const WebCore::Length *)(v147 + 12)) & 1) != 0)
        goto LABEL_426;
      goto LABEL_425;
    }
    v151 = *(float *)(v146 + 12);
    if (!*(_BYTE *)(v146 + 18))
      v151 = (float)SLODWORD(v151);
    v152 = *(float *)(v147 + 12);
    if (!*(_BYTE *)(v147 + 18))
      v152 = (float)SLODWORD(v152);
    if (v151 != v152)
LABEL_425:
      *(_QWORD *)(a3 + 16) |= 0x4000000uLL;
  }
LABEL_426:
  v153 = *(unsigned __int8 *)(v146 + 24);
  if (v153 != *(unsigned __int8 *)(v147 + 24) || (*(_BYTE *)(v146 + 25) != 0) != (*(_BYTE *)(v147 + 25) != 0))
    goto LABEL_435;
  if (v153 == 13)
    goto LABEL_436;
  if (v153 == 11)
  {
    if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(v146 + 20), (const WebCore::Length *)(v147 + 20)) & 1) != 0)
      goto LABEL_436;
LABEL_435:
    *(_QWORD *)(a3 + 16) |= 0x4000000uLL;
    goto LABEL_436;
  }
  v154 = *(float *)(v146 + 20);
  if (!*(_BYTE *)(v146 + 26))
    v154 = (float)SLODWORD(v154);
  v155 = *(float *)(v147 + 20);
  if (!*(_BYTE *)(v147 + 26))
    v155 = (float)SLODWORD(v155);
  if (v154 != v155)
    goto LABEL_435;
LABEL_436:
  if (!WebCore::FontCascade::operator==(v146 + 32, v147 + 32))
  {
    *(_QWORD *)(a3 + 40) |= 0x40000000uLL;
    *(_QWORD *)a3 |= 0x705FFFF700uLL;
  }
  if (*(float *)(v146 + 4) != *(float *)(v147 + 4))
    *(_QWORD *)(a3 + 32) |= 0x2000000000000uLL;
  if (*(float *)(v146 + 8) != *(float *)(v147 + 8))
    *(_QWORD *)(a3 + 32) |= 0x4000000000000uLL;
  v156 = *(_QWORD *)(v146 + 328);
  v157 = *(_QWORD *)(v147 + 328);
  if ((v156 & 0x8000000000000) != 0)
  {
    if ((v157 & 0x8000000000000) != 0
      && *(float *)((v156 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v157 & 0xFFFFFFFFFFFFLL) + 4)
      && *(float *)((v156 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v157 & 0xFFFFFFFFFFFFLL) + 8)
      && *(float *)((v156 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v157 & 0xFFFFFFFFFFFFLL) + 0xC)
      && *(float *)((v156 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v157 & 0xFFFFFFFFFFFFLL) + 0x10)
      && HIBYTE(v156) == HIBYTE(v157)
      && BYTE6(v156) == BYTE6(v157))
    {
LABEL_445:
      v158 = *(_QWORD *)(v146 + 336);
      v159 = *(_QWORD *)(v147 + 336);
      if ((v158 & 0x8000000000000) != 0)
      {
        if ((v159 & 0x8000000000000) != 0
          && *(float *)((v158 & 0xFFFFFFFFFFFFLL) + 4) == *(float *)((v159 & 0xFFFFFFFFFFFFLL) + 4)
          && *(float *)((v158 & 0xFFFFFFFFFFFFLL) + 8) == *(float *)((v159 & 0xFFFFFFFFFFFFLL) + 8)
          && *(float *)((v158 & 0xFFFFFFFFFFFFLL) + 0xC) == *(float *)((v159 & 0xFFFFFFFFFFFFLL) + 0xC)
          && *(float *)((v158 & 0xFFFFFFFFFFFFLL) + 0x10) == *(float *)((v159 & 0xFFFFFFFFFFFFLL) + 0x10)
          && HIBYTE(v158) == HIBYTE(v159)
          && BYTE6(v158) == BYTE6(v159))
        {
          goto LABEL_414;
        }
      }
      else if (v158 == v159 && (v159 & 0x8000000000000) == 0)
      {
        goto LABEL_414;
      }
    }
  }
  else if (v156 == v157 && (v157 & 0x8000000000000) == 0)
  {
    goto LABEL_445;
  }
  *(_QWORD *)a3 |= 0x20uLL;
LABEL_414:
  result = *(_QWORD *)(a1 + 56);
  v149 = *(_QWORD *)(a2 + 56);
  if (result != v149)
    return WebCore::SVGRenderStyle::conservativelyCollectChangedAnimatableProperties(result, v149, (_QWORD *)a3);
  return result;
}

int8x16_t WebCore::RenderStyle::conservativelyCollectChangedAnimatableProperties(WebCore::RenderStyle const&,WebCore::CSSPropertiesBitSet &)const::$_0::operator()<WebCore::RenderStyle::InheritedFlags const,WebCore::RenderStyle::InheritedFlags const>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  int8x16_t result;
  int8x16_t v8;

  v3 = *a3 ^ *a2;
  if ((v3 & 1) != 0)
  {
    *(_QWORD *)(a1 + 8) |= 0x800000000000uLL;
    v3 = *a3 ^ *a2;
  }
  if ((v3 & 6) != 0)
  {
    *(_QWORD *)(a1 + 8) |= 0x40000uLL;
    v3 = *a3 ^ *a2;
  }
  if ((v3 & 8) != 0)
  {
    *(_QWORD *)(a1 + 16) |= 0x10000000uLL;
    v3 = *a3 ^ *a2;
  }
  if ((v3 & 0x30) != 0)
  {
    *(_QWORD *)(a1 + 32) |= 0x2000000000uLL;
    v3 = *a3 ^ *a2;
  }
  if ((v3 & 0x3C0) != 0)
  {
    *(_QWORD *)(a1 + 24) |= 0x200000000000000uLL;
    v3 = *a3 ^ *a2;
  }
  if ((v3 & 0x7C00) != 0)
  {
    *(_QWORD *)(a1 + 32) |= 0x800uLL;
    v3 = *a3 ^ *a2;
  }
  if ((v3 & 0x78000) != 0)
  {
    *(_QWORD *)(a1 + 24) |= 0x8000000000000000;
    v3 = *a3 ^ *a2;
  }
  if ((v3 & 0x1F80000) != 0)
  {
    *(_QWORD *)(a1 + 8) |= 0x40000000000uLL;
    v3 = *a3 ^ *a2;
  }
  if ((v3 & 0x38000000) != 0)
  {
    *(_QWORD *)(a1 + 32) |= 0x4000000000uLL;
    v3 = *a3 ^ *a2;
  }
  if ((v3 & 0x40000000) != 0)
    *(_QWORD *)(a1 + 32) |= 0x4000uLL;
  v4 = a3[1] ^ a2[1];
  if ((v4 & 3) != 0)
  {
    *(_QWORD *)(a1 + 32) |= 0x8000uLL;
    v4 = a3[1] ^ a2[1];
  }
  if ((v4 & 4) != 0)
  {
    *(_QWORD *)(a1 + 8) |= 0x80uLL;
    v4 = a3[1] ^ a2[1];
  }
  if ((v4 & 0x20) != 0)
  {
    *(_QWORD *)(a1 + 24) |= 0x2000uLL;
    v4 = a3[1] ^ a2[1];
  }
  if ((v4 & 0x3C0) != 0)
    *(_QWORD *)(a1 + 24) |= 0x200uLL;
  if (((*a3 ^ *a2) & 0x4000000) != 0 || (v5 = a3[1] ^ a2[1], (v5 & 0xE000) != 0))
  {
    v6 = *(_QWORD *)(a1 + 32);
    result = vorrq_s8(*(int8x16_t *)(a1 + 40), (int8x16_t)xmmword_1969FDD80);
    *(int8x16_t *)(a1 + 40) = result;
    *(_QWORD *)(a1 + 56) |= 6uLL;
    v5 = a3[1] ^ a2[1];
    if ((v5 & 0xE000) != 0)
    {
      *(_QWORD *)(a1 + 32) = v6 | 0x20;
      v5 = a3[1] ^ a2[1];
    }
  }
  if ((v5 & 0xC00) != 0)
  {
    v8 = vorrq_s8(*(int8x16_t *)(a1 + 16), (int8x16_t)xmmword_1969FDDA0);
    *(int8x16_t *)a1 = vorrq_s8(*(int8x16_t *)a1, (int8x16_t)xmmword_1969FDD90);
    *(int8x16_t *)(a1 + 16) = v8;
    result = vorrq_s8(*(int8x16_t *)(a1 + 32), (int8x16_t)xmmword_1969FDDB0);
    *(int8x16_t *)(a1 + 32) = result;
  }
  return result;
}

_QWORD *WebCore::RenderStyle::conservativelyCollectChangedAnimatableProperties(WebCore::RenderStyle const&,WebCore::CSSPropertiesBitSet &)const::$_1::operator()<WebCore::RenderStyle::NonInheritedFlags const,WebCore::RenderStyle::NonInheritedFlags const>(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = *a3 ^ *a2;
  if ((v3 & 0x1C00) != 0)
  {
    result[3] |= 1uLL;
    v3 = *a3 ^ *a2;
  }
  if ((v3 & 0xE000) != 0)
  {
    result[3] |= 2uLL;
    v3 = *a3 ^ *a2;
  }
  if ((v3 & 0x70000) != 0)
  {
    result[1] |= 0x100000uLL;
    v3 = *a3 ^ *a2;
  }
  if ((v3 & 0x380000) != 0)
  {
    result[3] |= 0x400uLL;
    v3 = *a3 ^ *a2;
  }
  if ((v3 & 0x1F) != 0)
  {
    *result |= 0x80uLL;
    v3 = *a3 ^ *a2;
  }
  if ((v3 & 0xE000000) != 0)
  {
    result[1] |= 0x800000000000000uLL;
    v3 = *a3 ^ *a2;
  }
  if ((v3 & 0x10000000) != 0)
  {
    result[3] |= 0x100000000000000uLL;
    v3 = *a3 ^ *a2;
  }
  if ((v3 & 0xF00000000) != 0)
    result[3] |= 0x8000000000000000;
  return result;
}

uint64_t WebCore::RenderStyle::conservativelyCollectChangedAnimatableProperties(WebCore::RenderStyle const&,WebCore::CSSPropertiesBitSet &)const::$_7::operator()<WebCore::StyleRareNonInheritedData const,WebCore::StyleRareNonInheritedData const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  BOOL v7;
  int v8;
  float v9;
  float v10;
  int v11;
  float v12;
  float v13;
  int v14;
  float v15;
  float v16;
  int v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  WTF **v24;
  const WTF::StringImpl **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  uint64_t result;
  uint64_t v42;
  int v43;
  float v44;
  float v45;
  int v46;
  float v47;
  float v48;
  int v49;
  float v50;
  float v51;
  int v52;
  float v53;
  float v54;
  int v55;
  float v56;
  float v57;
  int v58;
  float v59;
  float v60;
  int v61;
  float v62;
  float v63;
  unsigned int v64;
  _DWORD *v65;
  unint64_t v66;
  unint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  int v83;
  float v84;
  float v85;
  _QWORD *v86;
  _QWORD *v87;

  v6 = *(unsigned __int8 *)(a3 + 12);
  if (*(_BYTE *)(a2 + 12))
    v7 = v6 == 0;
  else
    v7 = 1;
  if (v7)
  {
    if ((*(_BYTE *)(a2 + 12) != 0) != (v6 != 0))
      goto LABEL_18;
  }
  else
  {
    v8 = *(unsigned __int8 *)(a2 + 8);
    if (v8 != *(unsigned __int8 *)(a3 + 8) || (*(_BYTE *)(a2 + 9) != 0) != (*(_BYTE *)(a3 + 9) != 0))
      goto LABEL_18;
    if (v8 != 13)
    {
      if (v8 == 11)
      {
        if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(a2 + 4), (const WebCore::Length *)(a3 + 4)) & 1) == 0)
          goto LABEL_18;
      }
      else
      {
        v9 = *(float *)(a2 + 4);
        if (!*(_BYTE *)(a2 + 10))
          v9 = (float)SLODWORD(v9);
        v10 = *(float *)(a3 + 4);
        if (!*(_BYTE *)(a3 + 10))
          v10 = (float)SLODWORD(v10);
        if (v9 != v10)
          goto LABEL_18;
      }
    }
  }
  if ((((unint64_t)(*(unsigned __int16 *)(a3 + 640) ^ *(unsigned __int16 *)(a2 + 640)) << 32) & 0x300000000000) != 0)
LABEL_18:
    *(_QWORD *)(*(_QWORD *)a1 + 48) |= 0x100uLL;
  if (*(_BYTE *)(a2 + 24) && *(_BYTE *)(a3 + 24))
  {
    v11 = *(unsigned __int8 *)(a2 + 20);
    if (v11 == *(unsigned __int8 *)(a3 + 20) && (*(_BYTE *)(a2 + 21) != 0) == (*(_BYTE *)(a3 + 21) != 0))
    {
      if (v11 == 13)
        goto LABEL_32;
      if (v11 != 11)
      {
        v12 = *(float *)(a2 + 16);
        if (!*(_BYTE *)(a2 + 22))
          v12 = (float)SLODWORD(v12);
        v13 = *(float *)(a3 + 16);
        if (!*(_BYTE *)(a3 + 22))
          v13 = (float)SLODWORD(v13);
        if (v12 != v13)
          goto LABEL_33;
LABEL_32:
        if ((((unint64_t)(*(unsigned __int16 *)(a3 + 640) ^ *(unsigned __int16 *)(a2 + 640)) << 32) & 0xC00000000000) == 0)
          goto LABEL_34;
        goto LABEL_33;
      }
      if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(a2 + 16), (const WebCore::Length *)(a3 + 16)) & 1) != 0)
        goto LABEL_32;
    }
  }
  else if ((*(_BYTE *)(a2 + 24) != 0) == (*(_BYTE *)(a3 + 24) != 0))
  {
    goto LABEL_32;
  }
LABEL_33:
  *(_QWORD *)(*(_QWORD *)a1 + 48) |= 0x40uLL;
LABEL_34:
  v14 = *(unsigned __int8 *)(a2 + 32);
  if (v14 != *(unsigned __int8 *)(a3 + 32) || (*(_BYTE *)(a2 + 33) != 0) != (*(_BYTE *)(a3 + 33) != 0))
    goto LABEL_43;
  if (v14 == 13)
    goto LABEL_44;
  if (v14 != 11)
  {
    v15 = *(float *)(a2 + 28);
    if (!*(_BYTE *)(a2 + 34))
      v15 = (float)SLODWORD(v15);
    v16 = *(float *)(a3 + 28);
    if (!*(_BYTE *)(a3 + 34))
      v16 = (float)SLODWORD(v16);
    if (v15 == v16)
      goto LABEL_44;
    goto LABEL_43;
  }
  if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(a2 + 28), (const WebCore::Length *)(a3 + 28)) & 1) == 0)
LABEL_43:
    *(_QWORD *)(*(_QWORD *)a1 + 24) |= 0x80uLL;
LABEL_44:
  v17 = *(unsigned __int8 *)(a2 + 40);
  if (v17 != *(unsigned __int8 *)(a3 + 40) || (*(_BYTE *)(a2 + 41) != 0) != (*(_BYTE *)(a3 + 41) != 0))
    goto LABEL_53;
  if (v17 != 13)
  {
    if (v17 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(a2 + 36), (const WebCore::Length *)(a3 + 36)) & 1) != 0)
        goto LABEL_54;
      goto LABEL_53;
    }
    v18 = *(float *)(a2 + 36);
    if (!*(_BYTE *)(a2 + 42))
      v18 = (float)SLODWORD(v18);
    v19 = *(float *)(a3 + 36);
    if (!*(_BYTE *)(a3 + 42))
      v19 = (float)SLODWORD(v19);
    if (v18 != v19)
LABEL_53:
      *(_QWORD *)(*(_QWORD *)a1 + 24) |= 0x100uLL;
  }
LABEL_54:
  if (*(_DWORD *)(a2 + 52) != *(_DWORD *)(a3 + 52) || *(_DWORD *)(a2 + 56) != *(_DWORD *)(a3 + 56))
    *(_QWORD *)(*(_QWORD *)a1 + 40) |= 0x10uLL;
  v20 = *(_QWORD *)(a2 + 72);
  v21 = *(_QWORD *)(a3 + 72);
  if (v20 != v21)
  {
    v77 = *(unsigned int *)(v20 + 20);
    if ((_DWORD)v77 == *(_DWORD *)(v21 + 20))
    {
      v78 = *(_QWORD **)(v21 + 8);
      v79 = *(_QWORD **)(v20 + 8);
      v86 = v78;
      v87 = v79;
      if ((_DWORD)v77)
      {
        v80 = 8 * v77 - 8;
        while (1)
        {
          v81 = v80;
          if (!(*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)*v79 + 24))(*v79, *v78))
            break;
          ++v79;
          ++v78;
          v80 = v81 - 8;
          if (!v81)
            goto LABEL_238;
        }
      }
      else
      {
LABEL_238:
        if (v79 == &v87[v77] && v78 == &v86[v77])
          goto LABEL_58;
      }
    }
    *(_QWORD *)(*(_QWORD *)a1 + 56) |= 8uLL;
  }
LABEL_58:
  v22 = *(_QWORD *)(a2 + 80);
  v23 = *(_QWORD *)(a3 + 80);
  if (v22 != v23 && !WebCore::StyleGridData::operator==(v22, v23, (const WTF::StringImpl *)a3))
    *(_QWORD *)(*(_QWORD *)a1 + 16) |= 0x70EuLL;
  v24 = *(WTF ***)(a2 + 88);
  v25 = *(const WTF::StringImpl ***)(a3 + 88);
  if (v24 != v25 && (WebCore::StyleGridItemData::operator==(v24, v25, (const WTF::StringImpl *)a3) & 1) == 0)
    *(_QWORD *)(*(_QWORD *)a1 + 16) |= 0xF0uLL;
  if ((WebCore::operator==((unsigned __int8 *)(a2 + 96), (unsigned __int8 *)(a3 + 96)) & 1) == 0)
    *(_QWORD *)(*(_QWORD *)a1 + 8) |= 0x200000uLL;
  if (!WTF::operator==<WTF::AtomString,WebCore::CounterDirectives,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::CounterDirectives>,WTF::HashTableTraits>((_QWORD **)(a2 + 192), (uint64_t *)(a3 + 192)))*(_QWORD *)(*(_QWORD *)a1 + 8) |= 0x38000000000uLL;
  v26 = *(_QWORD *)(a2 + 216);
  v27 = *(_QWORD *)(a3 + 216);
  if (v26 != v27 && (WebCore::NinePieceImage::Data::operator==(v26, v27) & 1) == 0)
    *(_QWORD *)(*(_QWORD *)a1 + 16) |= 0x7C00000000uLL;
  v28 = *(_QWORD *)(a2 + 240);
  v29 = *(_QWORD *)(a3 + 240);
  if (v28 != v29)
  {
    if (!v28
      || !v29
      || *(_DWORD *)(v28 + 4) != *(_DWORD *)(v29 + 4)
      || *(unsigned __int8 *)(v28 + 24) != *(unsigned __int8 *)(v29 + 24)
      || (v71 = *(_QWORD *)(v28 + 8), v72 = *(_QWORD *)(v29 + 8), v71 != v72)
      && (!v71
       || !v72
       || (v73 = *(_QWORD *)(a3 + 240),
           v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 64))(v71),
           v29 = v73,
           !v74))
      || (v75 = *(_QWORD *)(v28 + 16), v76 = *(_QWORD *)(v29 + 16), v75 != v76)
      && (!v75 || !v76 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 16))(v75) & 1) == 0))
    {
      *(_QWORD *)(*(_QWORD *)a1 + 24) |= 0x400000000uLL;
    }
  }
  v30 = *(unsigned __int8 *)(a2 + 252);
  if (v30 != *(unsigned __int8 *)(a3 + 252) || (*(_BYTE *)(a2 + 253) != 0) != (*(_BYTE *)(a3 + 253) != 0))
  {
LABEL_75:
    *(_QWORD *)(*(_QWORD *)a1 + 24) |= 0x200000000uLL;
    goto LABEL_76;
  }
  if (v30 != 13)
  {
    if (v30 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(a2 + 248), (const WebCore::Length *)(a3 + 248)) & 1) != 0)
        goto LABEL_76;
    }
    else
    {
      v31 = *(float *)(a2 + 248);
      if (!*(_BYTE *)(a2 + 254))
        v31 = (float)SLODWORD(v31);
      v32 = *(float *)(a3 + 248);
      if (!*(_BYTE *)(a3 + 254))
        v32 = (float)SLODWORD(v32);
      if (v31 == v32)
        goto LABEL_76;
    }
    goto LABEL_75;
  }
LABEL_76:
  if (*(float *)(a2 + 256) != *(float *)(a3 + 256))
    *(_QWORD *)(*(_QWORD *)a1 + 24) |= 0x100000000uLL;
  if (*(float *)(a2 + 260) != *(float *)(a3 + 260))
    *(_QWORD *)(*(_QWORD *)a1 + 24) |= 0x40uLL;
  v33 = *(_QWORD *)(a2 + 264);
  v34 = *(_QWORD *)(a3 + 264);
  if (v33 != v34 && (!v33 || !v34 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v33 + 24))(v33) & 1) == 0))
    *(_QWORD *)(*(_QWORD *)a1 + 8) |= 0x400000uLL;
  if ((WebCore::StyleColor::operator==(a2 + 272, a3 + 272) & 1) == 0)
    *(_QWORD *)(*(_QWORD *)a1 + 24) |= 0x4000000000000000uLL;
  v35 = *(_QWORD *)(a2 + 304);
  v36 = *(_QWORD *)(a3 + 304);
  if (v35 != v36)
  {
    if (!v35)
      goto LABEL_247;
    if (!v36)
      goto LABEL_247;
    v82 = *(unsigned __int8 *)(v35 + 12);
    if (v82 != *(unsigned __int8 *)(v36 + 12))
      goto LABEL_247;
    if (v82 > 0x12 || ((1 << v82) & 0x601C0) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x1964D8A78);
    }
    if (*(double *)(v35 + 40) != *(double *)(v36 + 40)
      || *(double *)(v35 + 16) != *(double *)(v36 + 16)
      || *(double *)(v35 + 24) != *(double *)(v36 + 24)
      || *(double *)(v35 + 32) != *(double *)(v36 + 32))
    {
LABEL_247:
      *(_QWORD *)(*(_QWORD *)a1 + 24) |= 0x40000uLL;
    }
  }
  v37 = *(_QWORD *)(a2 + 312);
  v38 = *(_QWORD *)(a3 + 312);
  if (v37 != v38 && (!v37 || !v38 || (WebCore::ScaleTransformOperation::operator==(v37, v38) & 1) == 0))
    *(_QWORD *)(*(_QWORD *)a1 + 24) |= 0x400000uLL;
  v39 = *(unsigned __int8 **)(a2 + 320);
  v40 = *(unsigned __int8 **)(a3 + 320);
  if (v39 != v40 && (!v39 || !v40 || (WebCore::TranslateTransformOperation::operator==(v39, v40) & 1) == 0))
    *(_QWORD *)(*(_QWORD *)a1 + 32) |= 0x10000000uLL;
  result = *(_QWORD *)(a2 + 328);
  v42 = *(_QWORD *)(a3 + 328);
  if (result != v42)
  {
    if (!result
      || !v42
      || (result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result), (result & 1) == 0))
    {
      *(_QWORD *)(*(_QWORD *)a1 + 16) |= 0x10000000000000uLL;
    }
  }
  if (*(unsigned __int8 *)(a2 + 376) != *(unsigned __int8 *)(a3 + 376))
    goto LABEL_97;
  v43 = *(unsigned __int8 *)(a2 + 384);
  if (v43 != *(unsigned __int8 *)(a3 + 384) || (*(_BYTE *)(a2 + 385) != 0) != (*(_BYTE *)(a3 + 385) != 0))
    goto LABEL_97;
  if (v43 == 13)
    goto LABEL_98;
  if (v43 != 11)
  {
    v44 = *(float *)(a2 + 380);
    if (!*(_BYTE *)(a2 + 386))
      v44 = (float)SLODWORD(v44);
    v45 = *(float *)(a3 + 380);
    if (!*(_BYTE *)(a3 + 386))
      v45 = (float)SLODWORD(v45);
    if (v44 == v45)
      goto LABEL_98;
    goto LABEL_97;
  }
  result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a2 + 380), (const WebCore::Length *)(a3 + 380));
  if ((result & 1) == 0)
LABEL_97:
    *(_QWORD *)(*(_QWORD *)a1 + 8) |= 0x10000000uLL;
LABEL_98:
  if (*(unsigned __int8 *)(a2 + 388) != *(unsigned __int8 *)(a3 + 388))
    goto LABEL_108;
  v46 = *(unsigned __int8 *)(a2 + 396);
  if (v46 != *(unsigned __int8 *)(a3 + 396) || (*(_BYTE *)(a2 + 397) != 0) != (*(_BYTE *)(a3 + 397) != 0))
    goto LABEL_108;
  if (v46 == 13)
    goto LABEL_109;
  if (v46 != 11)
  {
    v47 = *(float *)(a2 + 392);
    if (!*(_BYTE *)(a2 + 398))
      v47 = (float)SLODWORD(v47);
    v48 = *(float *)(a3 + 392);
    if (!*(_BYTE *)(a3 + 398))
      v48 = (float)SLODWORD(v48);
    if (v47 == v48)
      goto LABEL_109;
    goto LABEL_108;
  }
  result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a2 + 392), (const WebCore::Length *)(a3 + 392));
  if ((result & 1) == 0)
LABEL_108:
    *(_QWORD *)(*(_QWORD *)a1 + 24) |= 0x80000uLL;
LABEL_109:
  v49 = *(unsigned __int8 *)(a2 + 404);
  if (v49 != *(unsigned __int8 *)(a3 + 404) || (*(_BYTE *)(a2 + 405) != 0) != (*(_BYTE *)(a3 + 405) != 0))
    goto LABEL_118;
  if (v49 != 13)
  {
    if (v49 == 11)
    {
      result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a2 + 400), (const WebCore::Length *)(a3 + 400));
      if ((result & 1) != 0)
        goto LABEL_119;
      goto LABEL_118;
    }
    v50 = *(float *)(a2 + 400);
    if (!*(_BYTE *)(a2 + 406))
      v50 = (float)SLODWORD(v50);
    v51 = *(float *)(a3 + 400);
    if (!*(_BYTE *)(a3 + 406))
      v51 = (float)SLODWORD(v51);
    if (v50 != v51)
LABEL_118:
      *(_QWORD *)(*(_QWORD *)a1 + 16) |= 0x8000000000000uLL;
  }
LABEL_119:
  v52 = *(unsigned __int8 *)(a2 + 412);
  if (v52 != *(unsigned __int8 *)(a3 + 412) || (*(_BYTE *)(a2 + 413) != 0) != (*(_BYTE *)(a3 + 413) != 0))
    goto LABEL_137;
  if (v52 != 13)
  {
    if (v52 == 11)
    {
      result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a2 + 408), (const WebCore::Length *)(a3 + 408));
      if ((result & 1) == 0)
        goto LABEL_137;
    }
    else
    {
      v53 = *(float *)(a2 + 408);
      if (!*(_BYTE *)(a2 + 414))
        v53 = (float)SLODWORD(v53);
      v54 = *(float *)(a3 + 408);
      if (!*(_BYTE *)(a3 + 414))
        v54 = (float)SLODWORD(v54);
      if (v53 != v54)
        goto LABEL_137;
    }
  }
  v55 = *(unsigned __int8 *)(a2 + 420);
  if (v55 != *(unsigned __int8 *)(a3 + 420) || (*(_BYTE *)(a2 + 421) != 0) != (*(_BYTE *)(a3 + 421) != 0))
    goto LABEL_137;
  if (v55 != 13)
  {
    if (v55 == 11)
    {
      result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a2 + 416), (const WebCore::Length *)(a3 + 416));
      if ((result & 1) != 0)
        goto LABEL_138;
      goto LABEL_137;
    }
    v56 = *(float *)(a2 + 416);
    if (!*(_BYTE *)(a2 + 422))
      v56 = (float)SLODWORD(v56);
    v57 = *(float *)(a3 + 416);
    if (!*(_BYTE *)(a3 + 422))
      v57 = (float)SLODWORD(v57);
    if (v56 != v57)
LABEL_137:
      *(_QWORD *)(*(_QWORD *)a1 + 16) |= 0x20000000000000uLL;
  }
LABEL_138:
  v58 = *(unsigned __int8 *)(a2 + 428);
  if (v58 != *(unsigned __int8 *)(a3 + 428) || (*(_BYTE *)(a2 + 429) != 0) != (*(_BYTE *)(a3 + 429) != 0))
    goto LABEL_156;
  if (v58 != 13)
  {
    if (v58 == 11)
    {
      result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a2 + 424), (const WebCore::Length *)(a3 + 424));
      if ((result & 1) == 0)
        goto LABEL_156;
    }
    else
    {
      v59 = *(float *)(a2 + 424);
      if (!*(_BYTE *)(a2 + 430))
        v59 = (float)SLODWORD(v59);
      v60 = *(float *)(a3 + 424);
      if (!*(_BYTE *)(a3 + 430))
        v60 = (float)SLODWORD(v60);
      if (v59 != v60)
        goto LABEL_156;
    }
  }
  v61 = *(unsigned __int8 *)(a2 + 436);
  if (v61 != *(unsigned __int8 *)(a3 + 436) || (*(_BYTE *)(a2 + 437) != 0) != (*(_BYTE *)(a3 + 437) != 0))
    goto LABEL_156;
  if (v61 != 13)
  {
    if (v61 == 11)
    {
      result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a2 + 432), (const WebCore::Length *)(a3 + 432));
      if ((result & 1) != 0)
        goto LABEL_157;
      goto LABEL_156;
    }
    v62 = *(float *)(a2 + 432);
    if (!*(_BYTE *)(a2 + 438))
      v62 = (float)SLODWORD(v62);
    v63 = *(float *)(a3 + 432);
    if (!*(_BYTE *)(a3 + 438))
      v63 = (float)SLODWORD(v63);
    if (v62 != v63)
LABEL_156:
      *(_QWORD *)(*(_QWORD *)a1 + 16) |= 0x4000000000000uLL;
  }
LABEL_157:
  if (*(float *)(a2 + 440) != *(float *)(a3 + 440) || *(unsigned __int8 *)(a2 + 444) != *(unsigned __int8 *)(a3 + 444))
    *(_QWORD *)(*(_QWORD *)a1 + 16) |= 0x40000000000000uLL;
  v64 = *(unsigned __int8 *)(a2 + 448);
  if (v64 < 2)
  {
    if (v64 == *(unsigned __int8 *)(a3 + 448))
      goto LABEL_163;
    goto LABEL_162;
  }
  if (v64 != 2)
    goto LABEL_163;
  if (*(_BYTE *)(a3 + 448) != 2
    || (v83 = *(unsigned __int8 *)(a2 + 456), v83 != *(unsigned __int8 *)(a3 + 456))
    || (*(_BYTE *)(a2 + 457) != 0) != (*(_BYTE *)(a3 + 457) != 0))
  {
LABEL_162:
    *(_QWORD *)(*(_QWORD *)a1 + 32) |= 4uLL;
    goto LABEL_163;
  }
  if (v83 == 13)
    goto LABEL_163;
  if (v83 == 11)
  {
    result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a2 + 452), (const WebCore::Length *)(a3 + 452));
    if ((result & 1) != 0)
      goto LABEL_163;
    goto LABEL_162;
  }
  v84 = *(float *)(a2 + 452);
  if (!*(_BYTE *)(a2 + 458))
    v84 = (float)SLODWORD(v84);
  v85 = *(float *)(a3 + 452);
  if (!*(_BYTE *)(a3 + 458))
    v85 = (float)SLODWORD(v85);
  if (v84 != v85)
    goto LABEL_162;
LABEL_163:
  if (*(unsigned __int8 *)(a2 + 460) != *(unsigned __int8 *)(a3 + 460))
    *(_QWORD *)(*(_QWORD *)a1 + 32) |= 0x10000uLL;
  if (*(unsigned __int8 *)(a2 + 461) != *(unsigned __int8 *)(a3 + 461))
    *(_QWORD *)(*(_QWORD *)a1 + 16) |= 0x40000000uLL;
  if (*(unsigned __int8 *)(a2 + 584) != *(unsigned __int8 *)(a3 + 584)
    || *(unsigned __int8 *)(a2 + 585) != *(unsigned __int8 *)(a3 + 585))
  {
    *(_QWORD *)(*(_QWORD *)a1 + 24) |= 0x40000000uLL;
  }
  if (*(unsigned __int8 *)(a2 + 586) != *(unsigned __int8 *)(a3 + 586))
    *(_QWORD *)(*(_QWORD *)a1 + 24) |= 0x80000000uLL;
  v65 = (_DWORD *)(a3 + 636);
  v66 = (*(unsigned int *)(a3 + 636) | ((unint64_t)(*(unsigned __int16 *)(a3 + 640) | (*(unsigned __int8 *)(a3 + 642) << 16)) << 32)) ^ (*(unsigned int *)(a2 + 636) | ((unint64_t)(*(unsigned __int16 *)(a2 + 640) | (*(unsigned __int8 *)(a2 + 642) << 16)) << 32));
  if ((((unsigned __int16)*(_DWORD *)(a3 + 636) ^ (unsigned __int16)*(_DWORD *)(a2 + 636)) & 0x180) != 0)
  {
    *(_QWORD *)(*(_QWORD *)a1 + 32) |= 0x400000uLL;
    v66 = (*v65 | ((unint64_t)(*(unsigned __int16 *)(a3 + 640) | (*(unsigned __int8 *)(a3 + 642) << 16)) << 32)) ^ (*(unsigned int *)(a2 + 636) | ((unint64_t)(*(unsigned __int16 *)(a2 + 640) | (*(unsigned __int8 *)(a2 + 642) << 16)) << 32));
  }
  v67 = v66 & 0xFFFFFFFFFFFFFFLL;
  if ((v67 & 0x400) != 0)
  {
    **(_QWORD **)a1 |= 0x400000000000000uLL;
    v67 = ((*v65 | ((unint64_t)(*(unsigned __int16 *)(a3 + 640) | (*(unsigned __int8 *)(a3 + 642) << 16)) << 32)) ^ (*(unsigned int *)(a2 + 636) | ((unint64_t)(*(unsigned __int16 *)(a2 + 640) | (*(unsigned __int8 *)(a2 + 642) << 16)) << 32))) & 0xFFFFFFFFFFFFFFLL;
  }
  if ((v67 & 0x800) != 0)
  {
    *(_QWORD *)(*(_QWORD *)a1 + 24) |= 0x800000uLL;
    v67 = ((*v65 | ((unint64_t)(*(unsigned __int16 *)(a3 + 640) | (*(unsigned __int8 *)(a3 + 642) << 16)) << 32)) ^ (*(unsigned int *)(a2 + 636) | ((unint64_t)(*(unsigned __int16 *)(a2 + 640) | (*(unsigned __int8 *)(a2 + 642) << 16)) << 32))) & 0xFFFFFFFFFFFFFFLL;
  }
  if ((v67 & 0x7000) != 0)
  {
    *(_QWORD *)(*(_QWORD *)a1 + 32) |= 2uLL;
    v67 = ((*v65 | ((unint64_t)(*(unsigned __int16 *)(a3 + 640) | (*(unsigned __int8 *)(a3 + 642) << 16)) << 32)) ^ (*(unsigned int *)(a2 + 636) | ((unint64_t)(*(unsigned __int16 *)(a2 + 640) | (*(unsigned __int8 *)(a2 + 642) << 16)) << 32))) & 0xFFFFFFFFFFFFFFLL;
  }
  if ((v67 & 0x38000) != 0)
  {
    *(_QWORD *)(*(_QWORD *)a1 + 32) |= 0x40uLL;
    v67 = ((*v65 | ((unint64_t)(*(unsigned __int16 *)(a3 + 640) | (*(unsigned __int8 *)(a3 + 642) << 16)) << 32)) ^ (*(unsigned int *)(a2 + 636) | ((unint64_t)(*(unsigned __int16 *)(a2 + 640) | (*(unsigned __int8 *)(a2 + 642) << 16)) << 32))) & 0xFFFFFFFFFFFFFFLL;
  }
  if ((v67 & 0x1F00000) != 0)
  {
    *(_QWORD *)(*(_QWORD *)a1 + 16) |= 0x400000000000uLL;
    v67 = ((*v65 | ((unint64_t)(*(unsigned __int16 *)(a3 + 640) | (*(unsigned __int8 *)(a3 + 642) << 16)) << 32)) ^ (*(unsigned int *)(a2 + 636) | ((unint64_t)(*(unsigned __int16 *)(a2 + 640) | (*(unsigned __int8 *)(a2 + 642) << 16)) << 32))) & 0xFFFFFFFFFFFFFFLL;
  }
  if ((v67 & 0x2000000) != 0)
  {
    *(_QWORD *)(*(_QWORD *)a1 + 16) |= 0x80000uLL;
    v67 = ((*v65 | ((unint64_t)(*(unsigned __int16 *)(a3 + 640) | (*(unsigned __int8 *)(a3 + 642) << 16)) << 32)) ^ (*(unsigned int *)(a2 + 636) | ((unint64_t)(*(unsigned __int16 *)(a2 + 640) | (*(unsigned __int8 *)(a2 + 642) << 16)) << 32))) & 0xFFFFFFFFFFFFFFLL;
  }
  if ((v67 & 0xF000000000) != 0)
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8) |= 0x4000uLL;
    v67 = ((*v65 | ((unint64_t)(*(unsigned __int16 *)(a3 + 640) | (*(unsigned __int8 *)(a3 + 642) << 16)) << 32)) ^ (*(unsigned int *)(a2 + 636) | ((unint64_t)(*(unsigned __int16 *)(a2 + 640) | (*(unsigned __int8 *)(a2 + 642) << 16)) << 32))) & 0xFFFFFFFFFFFFFFLL;
  }
  if ((v67 & 0xF00000000) != 0)
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8) |= 0x8000uLL;
    v67 = ((*v65 | ((unint64_t)(*(unsigned __int16 *)(a3 + 640) | (*(unsigned __int8 *)(a3 + 642) << 16)) << 32)) ^ (*(unsigned int *)(a2 + 636) | ((unint64_t)(*(unsigned __int16 *)(a2 + 640) | (*(unsigned __int8 *)(a2 + 642) << 16)) << 32))) & 0xFFFFFFFFFFFFFFLL;
  }
  if ((v67 & 0x70000000000) != 0)
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8) |= 0x10000uLL;
    v67 = ((*v65 | ((unint64_t)(*(unsigned __int16 *)(a3 + 640) | (*(unsigned __int8 *)(a3 + 642) << 16)) << 32)) ^ (*(unsigned int *)(a2 + 636) | ((unint64_t)(*(unsigned __int16 *)(a2 + 640) | (*(unsigned __int8 *)(a2 + 642) << 16)) << 32))) & 0xFFFFFFFFFFFFFFLL;
  }
  if ((v67 & 0xC000000000000) != 0)
  {
    *(_QWORD *)(*(_QWORD *)a1 + 24) |= 0x2000000000000000uLL;
    v67 = ((*v65 | ((unint64_t)(*(unsigned __int16 *)(a3 + 640) | (*(unsigned __int8 *)(a3 + 642) << 16)) << 32)) ^ (*(unsigned int *)(a2 + 636) | ((unint64_t)(*(unsigned __int16 *)(a2 + 640) | (*(unsigned __int8 *)(a2 + 642) << 16)) << 32))) & 0xFFFFFFFFFFFFFFLL;
  }
  if ((v67 & 0x10000000000000) != 0)
  {
    *(_QWORD *)(*(_QWORD *)a1 + 16) |= 0x4000000000000000uLL;
    v67 = ((*v65 | ((unint64_t)(*(unsigned __int16 *)(a3 + 640) | (*(unsigned __int8 *)(a3 + 642) << 16)) << 32)) ^ (*(unsigned int *)(a2 + 636) | ((unint64_t)(*(unsigned __int16 *)(a2 + 640) | (*(unsigned __int8 *)(a2 + 642) << 16)) << 32))) & 0xFFFFFFFFFFFFFFLL;
  }
  if ((v67 & 0x20000000000000) != 0)
    *(_QWORD *)(*(_QWORD *)a1 + 8) |= 0x200000uLL;
  if (!*(_BYTE *)(a2 + 368) || !*(_BYTE *)(a3 + 368))
  {
    v69 = *(unsigned __int8 *)(a3 + 368) != 0;
    v68 = *(unsigned __int8 *)(a2 + 368) != 0;
LABEL_204:
    if (v68 == v69)
      goto LABEL_206;
    goto LABEL_205;
  }
  if (*(_QWORD *)(a2 + 352) == *(_QWORD *)(a3 + 352)
    && *(unsigned __int8 *)(a2 + 360) == *(unsigned __int8 *)(a3 + 360))
  {
    v68 = *(unsigned __int8 *)(a2 + 361);
    v69 = *(unsigned __int8 *)(a3 + 361);
    goto LABEL_204;
  }
LABEL_205:
  *(_QWORD *)(*(_QWORD *)a1 + 32) |= 0x1000000000uLL;
LABEL_206:
  if (((*v65 ^ *(_DWORD *)(a2 + 636)) & 0xC0000) != 0)
    *(_QWORD *)(*(_QWORD *)a1 + 8) |= 0x4000000000uLL;
  v70 = *(unsigned int *)(a2 + 612);
  if ((_DWORD)v70 != *(_DWORD *)(a3 + 612)
    || (result = memcmp(*(const void **)(a2 + 600), *(const void **)(a3 + 600), 8 * v70), (_DWORD)result))
  {
    **(_QWORD **)a1 |= 0x200000000000uLL;
  }
  if (*(_QWORD *)(a2 + 616) != *(_QWORD *)(a3 + 616))
    *(_QWORD *)(*(_QWORD *)a1 + 24) |= 0x800uLL;
  return result;
}

uint64_t WebCore::SVGRenderStyle::conservativelyCollectChangedAnimatableProperties(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  const WTF::StringImpl **v19;
  int v20;
  _WORD *v21;
  int v22;
  _WORD *v23;
  int v24;
  char v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;

  v30 = a3;
  v31 = a3;
  v28 = a3;
  v29 = a3;
  v26 = a3;
  v27 = a3;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(const WTF::StringImpl **)(a2 + 16);
  if ((const WTF::StringImpl *)v6 != v7)
    WebCore::SVGRenderStyle::conservativelyCollectChangedAnimatableProperties(WebCore::SVGRenderStyle const&,WebCore::CSSPropertiesBitSet &)const::$_0::operator()<WebCore::StyleFillData const,WebCore::StyleFillData const>((uint64_t)&v31, v6, (uint64_t)v7);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a2 + 24);
  if (v8 != v9)
  {
    WebCore::StyleStrokeData::operator==(v8, v9, v7);
    if ((v25 & 1) == 0)
      WebCore::SVGRenderStyle::conservativelyCollectChangedAnimatableProperties(WebCore::SVGRenderStyle const&,WebCore::CSSPropertiesBitSet &)const::$_1::operator()<WebCore::StyleStrokeData const,WebCore::StyleStrokeData const>((uint64_t)&v30, *(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
  }
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a2 + 32);
  if (v10 != v11
    && (*(float *)(v10 + 4) != *(float *)(v11 + 4)
     || (unsigned __int16)*(_DWORD *)(v10 + 8) != (unsigned __int16)*(_DWORD *)(v11 + 8)))
  {
    a3[2] |= 0x800000uLL;
  }
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(float **)(a2 + 48);
  if ((float *)v12 != v13)
  {
    if (*(float *)(v12 + 4) == v13[1])
    {
      if ((WebCore::StyleColor::operator==(v12 + 8, (uint64_t)(v13 + 2)) & 1) != 0)
        goto LABEL_6;
      v12 = *(_QWORD *)(a1 + 48);
      v13 = *(float **)(a2 + 48);
    }
    WebCore::SVGRenderStyle::conservativelyCollectChangedAnimatableProperties(WebCore::SVGRenderStyle const&,WebCore::CSSPropertiesBitSet &)const::$_3::operator()<WebCore::StyleStopData const,WebCore::StyleStopData const>((uint64_t)&v29, v12, (uint64_t)v13);
  }
LABEL_6:
  v14 = *(_QWORD *)(a1 + 56);
  v15 = *(_QWORD *)(a2 + 56);
  if (v14 != v15 && !WebCore::StyleMiscData::operator==(v14, v15))
    WebCore::SVGRenderStyle::conservativelyCollectChangedAnimatableProperties(WebCore::SVGRenderStyle const&,WebCore::CSSPropertiesBitSet &)const::$_4::operator()<WebCore::StyleMiscData const,WebCore::StyleMiscData const>((uint64_t)&v28, *(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56));
  v16 = *(_QWORD *)(a1 + 64);
  v17 = *(_QWORD *)(a2 + 64);
  if (v16 != v17 && !WebCore::StyleLayoutData::operator==(v16, v17))
    WebCore::SVGRenderStyle::conservativelyCollectChangedAnimatableProperties(WebCore::SVGRenderStyle const&,WebCore::CSSPropertiesBitSet &)const::$_5::operator()<WebCore::StyleLayoutData const,WebCore::StyleLayoutData const>((uint64_t)&v27, *(_QWORD *)(a1 + 64), *(_QWORD *)(a2 + 64));
  result = *(_QWORD *)(a1 + 40);
  v19 = *(const WTF::StringImpl ***)(a2 + 40);
  if ((const WTF::StringImpl **)result != v19)
  {
    result = WebCore::StyleInheritedResourceData::operator==((WTF **)result, v19, (const WTF::StringImpl *)v13);
    if ((result & 1) == 0)
      result = WebCore::SVGRenderStyle::conservativelyCollectChangedAnimatableProperties(WebCore::SVGRenderStyle const&,WebCore::CSSPropertiesBitSet &)const::$_6::operator()<WebCore::StyleInheritedResourceData const,WebCore::StyleInheritedResourceData const>((uint64_t)&v26, *(WTF ***)(a1 + 40), *(const WTF::StringImpl ***)(a2 + 40));
  }
  if (*(unsigned __int16 *)(a1 + 4) != *(unsigned __int16 *)(a2 + 4))
    result = WebCore::SVGRenderStyle::conservativelyCollectChangedAnimatableProperties(WebCore::SVGRenderStyle const&,WebCore::CSSPropertiesBitSet &)const::$_7::operator()<WebCore::SVGRenderStyle::InheritedFlags const,WebCore::SVGRenderStyle::InheritedFlags const>((uint64_t)a3, (_WORD *)(a1 + 4), (_WORD *)(a2 + 4));
  v22 = *(_DWORD *)(a1 + 8);
  v21 = (_WORD *)(a1 + 8);
  v20 = v22;
  v24 = *(_DWORD *)(a2 + 8);
  v23 = (_WORD *)(a2 + 8);
  if (v20 != v24)
    return (uint64_t)WebCore::SVGRenderStyle::conservativelyCollectChangedAnimatableProperties(WebCore::SVGRenderStyle const&,WebCore::CSSPropertiesBitSet &)const::$_8::operator()<WebCore::SVGRenderStyle::NonInheritedFlags const,WebCore::SVGRenderStyle::NonInheritedFlags const>(a3, v21, v23);
  return result;
}

WebCore::StyleRareNonInheritedData *WebCore::RenderStyle::setClip(uint64_t a1, _BYTE *a2, _BYTE *a3, _BYTE *a4, _BYTE *a5)
{
  WebCore::StyleRareNonInheritedData *result;
  _DWORD *v10;
  WebCore::StyleRareNonInheritedData *v11;
  _BYTE *v12;
  WTF::StringImpl *v13;
  _DWORD *v14;
  unsigned int v15;
  int v16;
  _DWORD *v17;
  unsigned int v18;
  int v19;
  _DWORD *v20;
  unsigned int v21;
  int v22;
  _DWORD *v23;
  unsigned int v24;
  int v25;
  WTF *v26;
  void *v27;
  int v28;
  int v29;
  int v30;
  int v31;

  result = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)(a1 + 8));
  v10 = (_DWORD *)*((_QWORD *)result + 5);
  if (*v10 == 1)
  {
    v12 = (_BYTE *)*((_QWORD *)result + 5);
  }
  else
  {
    v11 = result;
    v12 = (_BYTE *)WTF::fastMalloc((WTF *)0x288);
    WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData((uint64_t)v12, (uint64_t)v10);
    result = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v11 + 5);
    *((_QWORD *)v11 + 5) = v12;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(result, v13);
        result = (WebCore::StyleRareNonInheritedData *)WTF::fastFree(v26, v27);
        v12 = (_BYTE *)*((_QWORD *)v11 + 5);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  v14 = v12 + 96;
  if (v12 + 96 != a2)
  {
    if (v12[100] == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (WebCore::StyleRareNonInheritedData *)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v14);
    }
    v15 = a2[4];
    v12[100] = v15;
    v12[101] = a2[5];
    if (v15 - 2 >= 9)
    {
      if (v15 > 0xD)
        goto LABEL_10;
      if (((1 << v15) & 0x3003) != 0)
      {
        *v14 = 0;
        goto LABEL_10;
      }
      if (v15 != 11)
        goto LABEL_10;
      v28 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v16 = a2[6];
      v12[102] = v16;
      if (v16)
      {
        *v14 = *(_DWORD *)a2;
LABEL_10:
        a2[4] = 0;
        goto LABEL_11;
      }
      v28 = *(_DWORD *)a2;
    }
    *v14 = v28;
    goto LABEL_10;
  }
LABEL_11:
  v17 = v12 + 104;
  if (v12 + 104 == a3)
    goto LABEL_17;
  if (v12[108] == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = (WebCore::StyleRareNonInheritedData *)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v17);
  }
  v18 = a3[4];
  v12[108] = v18;
  v12[109] = a3[5];
  if (v18 - 2 >= 9)
  {
    if (v18 > 0xD)
      goto LABEL_16;
    if (((1 << v18) & 0x3003) != 0)
    {
      *v17 = 0;
      goto LABEL_16;
    }
    if (v18 != 11)
      goto LABEL_16;
    v29 = *(_DWORD *)a3;
    *(_DWORD *)a3 = 0;
    goto LABEL_35;
  }
  v19 = a3[6];
  v12[110] = v19;
  if (!v19)
  {
    v29 = *(_DWORD *)a3;
LABEL_35:
    *v17 = v29;
    goto LABEL_16;
  }
  *v17 = *(_DWORD *)a3;
LABEL_16:
  a3[4] = 0;
LABEL_17:
  v20 = v12 + 112;
  if (v12 + 112 == a4)
    goto LABEL_23;
  if (v12[116] == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = (WebCore::StyleRareNonInheritedData *)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v20);
  }
  v21 = a4[4];
  v12[116] = v21;
  v12[117] = a4[5];
  if (v21 - 2 >= 9)
  {
    if (v21 > 0xD)
      goto LABEL_22;
    if (((1 << v21) & 0x3003) != 0)
    {
      *v20 = 0;
      goto LABEL_22;
    }
    if (v21 != 11)
      goto LABEL_22;
    v30 = *(_DWORD *)a4;
    *(_DWORD *)a4 = 0;
    goto LABEL_37;
  }
  v22 = a4[6];
  v12[118] = v22;
  if (!v22)
  {
    v30 = *(_DWORD *)a4;
LABEL_37:
    *v20 = v30;
    goto LABEL_22;
  }
  *v20 = *(_DWORD *)a4;
LABEL_22:
  a4[4] = 0;
LABEL_23:
  v23 = v12 + 120;
  if (v12 + 120 == a5)
    return result;
  if (v12[124] == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    result = (WebCore::StyleRareNonInheritedData *)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v23);
  }
  v24 = a5[4];
  v12[124] = v24;
  v12[125] = a5[5];
  if (v24 - 2 >= 9)
  {
    if (v24 > 0xD)
      goto LABEL_28;
    if (((1 << v24) & 0x3003) != 0)
    {
      *v23 = 0;
      goto LABEL_28;
    }
    if (v24 != 11)
      goto LABEL_28;
    v31 = *(_DWORD *)a5;
    *(_DWORD *)a5 = 0;
    goto LABEL_39;
  }
  v25 = a5[6];
  v12[126] = v25;
  if (!v25)
  {
    v31 = *(_DWORD *)a5;
LABEL_39:
    *v23 = v31;
    goto LABEL_28;
  }
  *v23 = *(_DWORD *)a5;
LABEL_28:
  a5[4] = 0;
  return result;
}

_DWORD *WebCore::RenderStyle::addCursor(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  _QWORD *v21;
  _DWORD *result;
  WTF::StringImpl *v24;
  WebCore::StyleRareInheritedData *v25;
  uint64_t v26;
  _DWORD **v27;
  uint64_t v28;
  _DWORD *v29;
  WTF *v30;
  WTF *v31;
  void *v32;
  _QWORD v33[2];

  v5 = *(_DWORD **)(a1 + 24);
  if (*v5 == 1)
  {
    v6 = *(_QWORD *)(a1 + 24);
  }
  else
  {
    v6 = WTF::fastMalloc((WTF *)0x1A0);
    WebCore::StyleRareInheritedData::StyleRareInheritedData(v6, (uint64_t)v5);
    v25 = *(WebCore::StyleRareInheritedData **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v6;
    if (v25)
    {
      if (*(_DWORD *)v25 == 1)
      {
        WebCore::StyleRareInheritedData::~StyleRareInheritedData(v25, v24);
        WTF::fastFree(v31, v32);
        v6 = *(_QWORD *)(a1 + 24);
      }
      else
      {
        --*(_DWORD *)v25;
      }
    }
  }
  if (!*(_QWORD *)(v6 + 168))
  {
    v7 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    v9 = *(_QWORD *)(v6 + 168);
    *(_QWORD *)(v6 + 168) = v7;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
      {
        v26 = *(unsigned int *)(v9 + 20);
        if ((_DWORD)v26)
        {
          v27 = *(_DWORD ***)(v9 + 8);
          v28 = 16 * v26;
          do
          {
            v29 = *v27;
            *v27 = 0;
            if (v29)
            {
              if (v29[2] == 1)
                (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
              else
                --v29[2];
            }
            v27 += 2;
            v28 -= 16;
          }
          while (v28);
        }
        v30 = *(WTF **)(v9 + 8);
        if (v30)
        {
          *(_QWORD *)(v9 + 8) = 0;
          *(_DWORD *)(v9 + 16) = 0;
          WTF::fastFree(v30, v8);
        }
        WTF::fastFree((WTF *)v9, v8);
      }
      else
      {
        --*(_DWORD *)v9;
      }
    }
  }
  v10 = *(unsigned int **)(v6 + 168);
  if (*(_BYTE *)(a3 + 8))
    v11 = *(_QWORD *)a3;
  else
    v11 = -1;
  v12 = *a2;
  *a2 = 0;
  v33[0] = v12;
  v33[1] = v11;
  v13 = v10 + 2;
  v14 = v10[5];
  if ((_DWORD)v14 == v10[4])
  {
    v15 = (uint64_t *)WTF::Vector<WebCore::MultiRepresentationHEICAttachmentSingleImage,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v13, v14 + 1, (unint64_t)v33);
    v16 = v10[5];
    v17 = *((_QWORD *)v10 + 1);
    v18 = *v15;
    if (*v15)
      ++*(_DWORD *)(v18 + 8);
    v19 = (_QWORD *)(v17 + 16 * v16);
    *v19 = v18;
    v20 = v19 + 1;
    v11 = v15[1];
  }
  else
  {
    v21 = (_QWORD *)(*(_QWORD *)v13 + 16 * v14);
    if (v12)
      ++*(_DWORD *)(v12 + 8);
    *v21 = v12;
    v20 = v21 + 1;
  }
  *v20 = v11;
  ++v10[5];
  result = (_DWORD *)v33[0];
  v33[0] = 0;
  if (result)
  {
    if (result[2] == 1)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    else
      --result[2];
  }
  return result;
}

void WebCore::RenderStyle::setCursorList(uint64_t a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  WebCore::StyleRareInheritedData *v9;
  uint64_t v10;
  _DWORD **v11;
  uint64_t v12;
  _DWORD *v13;
  WTF *v14;
  WTF *v15;
  void *v16;

  v3 = *(_DWORD **)(a1 + 24);
  if (*v3 == 1)
  {
    v4 = *(_QWORD *)(a1 + 24);
  }
  else
  {
    v8 = WTF::fastMalloc((WTF *)0x1A0);
    WebCore::StyleRareInheritedData::StyleRareInheritedData(v8, (uint64_t)v3);
    v9 = *(WebCore::StyleRareInheritedData **)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v4;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
      {
        WebCore::StyleRareInheritedData::~StyleRareInheritedData(v9, a2);
        WTF::fastFree(v15, v16);
        v4 = *(_QWORD *)(a1 + 24);
      }
      else
      {
        --*(_DWORD *)v9;
      }
    }
  }
  v5 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v6 = *(_QWORD *)(v4 + 168);
  *(_QWORD *)(v4 + 168) = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      v10 = *(unsigned int *)(v6 + 20);
      if ((_DWORD)v10)
      {
        v11 = *(_DWORD ***)(v6 + 8);
        v12 = 16 * v10;
        do
        {
          v13 = *v11;
          *v11 = 0;
          if (v13)
          {
            if (v13[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
            else
              --v13[2];
          }
          v11 += 2;
          v12 -= 16;
        }
        while (v12);
      }
      v14 = *(WTF **)(v6 + 8);
      if (v14)
      {
        *(_QWORD *)(v6 + 8) = 0;
        *(_DWORD *)(v6 + 16) = 0;
        WTF::fastFree(v14, a2);
      }
      WTF::fastFree((WTF *)v6, a2);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
}

void WebCore::RenderStyle::setQuotes(uint64_t a1, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v8;
  int v9;
  unint64_t v10;
  const WTF::StringImpl **v11;
  WTF **i;
  const WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  WebCore::StyleRareInheritedData *v18;
  unint64_t v19;
  WTF::StringImpl **v20;
  WTF::StringImpl *v21;
  WTF::StringImpl *v22;
  WTF *v23;
  void *v24;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(v3 + 312);
  v5 = *(_QWORD *)a2;
  if (v4 != *(_QWORD *)a2)
  {
    if (v4)
      v8 = v5 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      v9 = *(_DWORD *)(v4 + 4);
      if (v9 == *(_DWORD *)(v5 + 4))
      {
        if (!v9)
          return;
        v10 = 0;
        v11 = (const WTF::StringImpl **)(v5 + 16);
        for (i = (WTF **)(v4 + 16);
              WTF::equal(*(i - 1), *(v11 - 1), a3) && (WTF::equal(*i, *v11, v13) & 1) != 0;
              i += 2)
        {
          ++v10;
          v11 += 2;
          if (v10 >= *(unsigned int *)(v4 + 4))
            return;
        }
        v3 = *(_QWORD *)(a1 + 24);
      }
    }
    if (*(_DWORD *)v3 == 1)
    {
      v14 = v3;
    }
    else
    {
      v17 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v17, v3);
      v18 = *(WebCore::StyleRareInheritedData **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v14;
      if (v18)
      {
        if (*(_DWORD *)v18 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v18, a2);
          WTF::fastFree(v23, v24);
          v14 = *(_QWORD *)(a1 + 24);
        }
        else
        {
          --*(_DWORD *)v18;
        }
      }
    }
    v15 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    v16 = *(unsigned int **)(v14 + 312);
    *(_QWORD *)(v14 + 312) = v15;
    if (v16)
    {
      if (*v16 == 1)
      {
        if (v16[1])
        {
          v19 = 0;
          v20 = (WTF::StringImpl **)(v16 + 4);
          do
          {
            v21 = *v20;
            *v20 = 0;
            if (v21)
            {
              if (*(_DWORD *)v21 == 2)
                WTF::StringImpl::destroy(v21, a2);
              else
                *(_DWORD *)v21 -= 2;
            }
            v22 = *(v20 - 1);
            *(v20 - 1) = 0;
            if (v22)
            {
              if (*(_DWORD *)v22 == 2)
                WTF::StringImpl::destroy(v22, a2);
              else
                *(_DWORD *)v22 -= 2;
            }
            ++v19;
            v20 += 2;
          }
          while (v19 < v16[1]);
        }
        WTF::fastFree((WTF *)v16, a2);
      }
      else
      {
        --*v16;
      }
    }
  }
}

uint64_t WebCore::RenderStyle::setWillChange(uint64_t a1, uint64_t *a2)
{
  WTF **v3;
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  WTF *v7;
  void *v8;
  _DWORD *v9;
  uint64_t v10;

  v3 = (WTF **)(a1 + 8);
  result = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) + 200);
  v5 = *a2;
  if (result != v5)
  {
    if (result)
      v6 = v5 == 0;
    else
      v6 = 1;
    if (v6 || (result = WebCore::WillChangeData::operator==(result, v5), (result & 1) == 0))
    {
      v7 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
      v9 = WTF::DataRef<WebCore::StyleRareNonInheritedData>::access((uint64_t *)v7 + 5);
      v10 = *a2;
      *a2 = 0;
      result = *((_QWORD *)v9 + 25);
      *((_QWORD *)v9 + 25) = v10;
      if (result)
        return WTF::RefCounted<WebCore::WillChangeData>::deref(result, v8);
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::setScale(uint64_t a1, uint64_t *a2)
{
  WTF *v3;
  _DWORD *v4;
  WTF *v5;
  uint64_t v6;
  uint64_t result;
  WTF::StringImpl *v8;
  WebCore::StyleRareNonInheritedData *v9;
  uint64_t v10;
  _DWORD *v11;
  WTF *v12;
  void *v13;

  v3 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)(a1 + 8));
  v4 = (_DWORD *)*((_QWORD *)v3 + 5);
  if (*v4 == 1)
  {
    result = *((_QWORD *)v3 + 5);
  }
  else
  {
    v5 = v3;
    v6 = WTF::fastMalloc((WTF *)0x288);
    result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v6, (uint64_t)v4);
    v9 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v5 + 5);
    *((_QWORD *)v5 + 5) = result;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
      {
        WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v9, v8);
        WTF::fastFree(v12, v13);
        result = *((_QWORD *)v5 + 5);
      }
      else
      {
        --*(_DWORD *)v9;
      }
    }
  }
  v10 = *a2;
  *a2 = 0;
  v11 = *(_DWORD **)(result + 312);
  *(_QWORD *)(result + 312) = v10;
  if (v11)
  {
    if (v11[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[2];
  }
  return result;
}

uint64_t WebCore::RenderStyle::setRotate(uint64_t a1, uint64_t *a2)
{
  WTF *v3;
  _DWORD *v4;
  WTF *v5;
  uint64_t v6;
  uint64_t result;
  WTF::StringImpl *v8;
  WebCore::StyleRareNonInheritedData *v9;
  uint64_t v10;
  _DWORD *v11;
  WTF *v12;
  void *v13;

  v3 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)(a1 + 8));
  v4 = (_DWORD *)*((_QWORD *)v3 + 5);
  if (*v4 == 1)
  {
    result = *((_QWORD *)v3 + 5);
  }
  else
  {
    v5 = v3;
    v6 = WTF::fastMalloc((WTF *)0x288);
    result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v6, (uint64_t)v4);
    v9 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v5 + 5);
    *((_QWORD *)v5 + 5) = result;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
      {
        WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v9, v8);
        WTF::fastFree(v12, v13);
        result = *((_QWORD *)v5 + 5);
      }
      else
      {
        --*(_DWORD *)v9;
      }
    }
  }
  v10 = *a2;
  *a2 = 0;
  v11 = *(_DWORD **)(result + 304);
  *(_QWORD *)(result + 304) = v10;
  if (v11)
  {
    if (v11[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[2];
  }
  return result;
}

uint64_t WebCore::RenderStyle::setTranslate(uint64_t a1, uint64_t *a2)
{
  WTF *v3;
  _DWORD *v4;
  WTF *v5;
  uint64_t v6;
  uint64_t result;
  WTF::StringImpl *v8;
  WebCore::StyleRareNonInheritedData *v9;
  uint64_t v10;
  _DWORD *v11;
  WTF *v12;
  void *v13;

  v3 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)(a1 + 8));
  v4 = (_DWORD *)*((_QWORD *)v3 + 5);
  if (*v4 == 1)
  {
    result = *((_QWORD *)v3 + 5);
  }
  else
  {
    v5 = v3;
    v6 = WTF::fastMalloc((WTF *)0x288);
    result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v6, (uint64_t)v4);
    v9 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v5 + 5);
    *((_QWORD *)v5 + 5) = result;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
      {
        WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v9, v8);
        WTF::fastFree(v12, v13);
        result = *((_QWORD *)v5 + 5);
      }
      else
      {
        --*(_DWORD *)v9;
      }
    }
  }
  v10 = *a2;
  *a2 = 0;
  v11 = *(_DWORD **)(result + 320);
  *(_QWORD *)(result + 320) = v10;
  if (v11)
  {
    if (v11[2] == 1)
      return (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[2];
  }
  return result;
}

uint64_t *WebCore::RenderStyle::clearCursorList(WebCore::RenderStyle *this)
{
  uint64_t *result;
  uint64_t v2;
  uint64_t v3;

  v2 = *((_QWORD *)this + 3);
  result = (uint64_t *)((char *)this + 24);
  if (*(_QWORD *)(v2 + 168))
  {
    WTF::DataRef<WebCore::StyleRareInheritedData>::access((WebCore::StyleRareInheritedData **)result);
    return WTF::RefPtr<WebCore::CursorList,WTF::RawPtrTraits<WebCore::CursorList>,WTF::DefaultRefDerefTraits<WebCore::CursorList>>::operator=((uint64_t *)(v3 + 168), 0);
  }
  return result;
}

uint64_t *WTF::RefPtr<WebCore::CursorList,WTF::RawPtrTraits<WebCore::CursorList>,WTF::DefaultRefDerefTraits<WebCore::CursorList>>::operator=(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  _DWORD **v6;
  uint64_t v7;
  _DWORD *v8;
  WTF *v9;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *(unsigned int *)(v3 + 20);
      if ((_DWORD)v5)
      {
        v6 = *(_DWORD ***)(v3 + 8);
        v7 = 16 * v5;
        do
        {
          v8 = *v6;
          *v6 = 0;
          if (v8)
          {
            if (v8[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
            else
              --v8[2];
          }
          v6 += 2;
          v7 -= 16;
        }
        while (v7);
      }
      v9 = *(WTF **)(v3 + 8);
      if (v9)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        WTF::fastFree(v9, a2);
      }
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

WTF **WebCore::RenderStyle::clearContent(WebCore::RenderStyle *this)
{
  WTF **result;
  uint64_t v2;
  WTF *v3;
  WebCore::StyleMiscNonInheritedData *v4;

  v2 = *((_QWORD *)this + 1);
  result = (WTF **)((char *)this + 8);
  if (*(_QWORD *)(*(_QWORD *)(v2 + 32) + 80))
  {
    v3 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(result);
    v4 = WTF::DataRef<WebCore::StyleMiscNonInheritedData>::access((WebCore::StyleMiscNonInheritedData **)v3 + 4);
    result = (WTF **)*((_QWORD *)v4 + 10);
    *((_QWORD *)v4 + 10) = 0;
    if (result)
      return (WTF **)(*((uint64_t (**)(WTF **))*result + 1))(result);
  }
  return result;
}

WTF::StringImpl *WebCore::RenderStyle::setContent(uint64_t a1, uint64_t *a2, int a3)
{
  WTF *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF *v8;
  WebCore::StyleMiscNonInheritedData *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *result;
  WTF *v14;
  void *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)(a1 + 8));
  v7 = *((_QWORD *)v5 + 4);
  if (*(_DWORD *)v7 == 1
    || (v8 = v5,
        WebCore::StyleMiscNonInheritedData::copy(*((WebCore::StyleMiscNonInheritedData **)v5 + 4), &v19),
        v7 = v19,
        v9 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v8 + 4),
        *((_QWORD *)v8 + 4) = v19,
        !v9))
  {
LABEL_5:
    if (!a3)
      goto LABEL_11;
    goto LABEL_6;
  }
  if (*(_DWORD *)v9 != 1)
  {
    --*(_DWORD *)v9;
    goto LABEL_5;
  }
  WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v9, v6);
  WTF::fastFree(v14, v15);
  v7 = *((_QWORD *)v8 + 4);
  if (!a3)
    goto LABEL_11;
LABEL_6:
  v10 = *(_QWORD *)(v7 + 80);
  if (v10)
  {
    do
    {
      v11 = v10;
      v10 = *(_QWORD *)(v10 + 8);
    }
    while (v10);
    v12 = *a2;
    *a2 = 0;
    result = *(WTF::StringImpl **)(v11 + 8);
    *(_QWORD *)(v11 + 8) = v12;
    if (result)
      return (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
    return result;
  }
LABEL_11:
  v16 = *a2;
  *a2 = 0;
  result = *(WTF::StringImpl **)(v7 + 80);
  *(_QWORD *)(v7 + 80) = v16;
  if (result)
    result = (WTF::StringImpl *)(*(uint64_t (**)(WTF::StringImpl *))(*(_QWORD *)result + 8))(result);
  v17 = *(_DWORD **)(v7 + 96);
  if (v17)
  {
    v18 = *(_QWORD *)(v7 + 80);
    *v17 += 2;
    result = *(WTF::StringImpl **)(v18 + 16);
    *(_QWORD *)(v18 + 16) = v17;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v6);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::setContent(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  if (*a2)
  {
    v5 = result;
    *a2 = 0;
    v6 = WTF::fastMalloc((WTF *)0x28);
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 24) = 1;
    *(_QWORD *)v6 = off_1E34419B8;
    *(_QWORD *)(v6 + 32) = v3;
    v7 = v6;
    WebCore::RenderStyle::setContent(v5, &v7, a3);
    result = v7;
    if (v7)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*a2)
  {
    v5 = result;
    v6 = WTF::fastMalloc((WTF *)0x28);
    v7 = *a2;
    *a2 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 24) = 0;
    *(_QWORD *)v6 = off_1E3441A18;
    *(_QWORD *)(v6 + 32) = v7;
    v8 = v6;
    WebCore::RenderStyle::setContent(v5, &v8, a3);
    result = v8;
    if (v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  return result;
}

uint64_t WebCore::RenderStyle::setContent(uint64_t a1, char a2, int a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v6 = WTF::fastMalloc((WTF *)0x20);
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = 0;
  *(_DWORD *)(v6 + 24) = 2;
  *(_QWORD *)v6 = off_1E3441A48;
  *(_BYTE *)(v6 + 28) = a2;
  v8 = v6;
  WebCore::RenderStyle::setContent(a1, &v8, a3);
  result = v8;
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

WTF::StringImpl *WebCore::RenderStyle::setContentAltText(WTF **this, const WTF::String *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  WTF *v6;
  WebCore::StyleMiscNonInheritedData *v7;
  _DWORD *v8;
  WTF::StringImpl *result;
  uint64_t v10;
  _DWORD *v11;
  WTF *v12;
  void *v13;
  uint64_t v14;

  v3 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(this + 1);
  v5 = *((_QWORD *)v3 + 4);
  if (*(_DWORD *)v5 != 1)
  {
    v6 = v3;
    WebCore::StyleMiscNonInheritedData::copy(*((WebCore::StyleMiscNonInheritedData **)v3 + 4), &v14);
    v5 = v14;
    v7 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v6 + 4);
    *((_QWORD *)v6 + 4) = v14;
    if (v7)
    {
      if (*(_DWORD *)v7 == 1)
      {
        WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v7, v4);
        WTF::fastFree(v12, v13);
        v5 = *((_QWORD *)v6 + 4);
      }
      else
      {
        --*(_DWORD *)v7;
      }
    }
  }
  v8 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v8 += 2;
  result = *(WTF::StringImpl **)(v5 + 96);
  *(_QWORD *)(v5 + 96) = v8;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
    else
      *(_DWORD *)result -= 2;
  }
  v10 = *(_QWORD *)(v5 + 80);
  if (v10)
  {
    v11 = *(_DWORD **)a2;
    if (*(_QWORD *)a2)
      *v11 += 2;
    result = *(WTF::StringImpl **)(v10 + 16);
    *(_QWORD *)(v10 + 16) = v11;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        return (WTF::StringImpl *)WTF::StringImpl::destroy(result, v4);
      else
        *(_DWORD *)result -= 2;
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::setHasAttrContent(WebCore::RenderStyle *this)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  WTF *v4;
  WTF::StringImpl *v5;
  WebCore::StyleMiscNonInheritedData *v6;
  WTF *v7;
  void *v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 1);
  v3 = *((_QWORD *)this + 2);
  result = (uint64_t)this + 8;
  *(_QWORD *)(result + 8) = v3 | 0x80000000;
  if ((*(_BYTE *)(*(_QWORD *)(v2 + 32) + 148) & 1) == 0)
  {
    v4 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    result = *((_QWORD *)v4 + 4);
    if (*(_DWORD *)result != 1)
    {
      WebCore::StyleMiscNonInheritedData::copy((WebCore::StyleMiscNonInheritedData *)result, &v9);
      result = v9;
      v6 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v4 + 4);
      *((_QWORD *)v4 + 4) = v9;
      if (v6)
      {
        if (*(_DWORD *)v6 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v6, v5);
          WTF::fastFree(v7, v8);
          result = *((_QWORD *)v4 + 4);
        }
        else
        {
          --*(_DWORD *)v6;
        }
      }
    }
    *(_DWORD *)(result + 148) |= 1u;
  }
  return result;
}

BOOL WebCore::RenderStyle::affectedByTransformOrigin(WebCore::RenderStyle *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  double *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v2 = *((_QWORD *)this + 1);
  v3 = *(_QWORD **)(v2 + 40);
  v4 = v3[38];
  if (!v4 || *(double *)(v4 + 40) == 0.0)
  {
    v5 = (double *)v3[39];
    if (!v5 || v5[2] == 1.0 && v5[3] == 1.0 && v5[4] == 1.0)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v2 + 32) + 40);
      v7 = *(unsigned int *)(v6 + 20);
      if (!(_DWORD)v7)
        return v3[41] != 0;
      v8 = *(_QWORD **)(v6 + 8);
      v9 = 8 * v7;
      while (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 80))(*v8) & 1) == 0)
      {
        ++v8;
        v9 -= 8;
        if (!v9)
        {
          v3 = *(_QWORD **)(*((_QWORD *)this + 1) + 40);
          return v3[41] != 0;
        }
      }
    }
  }
  return 1;
}

float WebCore::RenderStyle::computePerspectiveOrigin(WebCore::RenderStyle *this, const WebCore::FloatRect *a2)
{
  float v3;
  uint64_t v4;
  int v5;
  unsigned __int8 v6;
  unsigned int v7;
  char v8;
  unsigned int v9;
  int v10;
  char v11;
  unsigned int v12;
  char v13;
  unsigned int v14;
  float v15;
  unsigned int v17;
  char v18;
  unsigned __int8 v19;
  char v20;
  unsigned int v21;
  char v22;
  char v23;
  char v24;
  unsigned int v25;
  unsigned __int8 v26;
  char v27;
  char v28;
  uint64_t v29;

  v3 = *(float *)a2;
  v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 40);
  BYTE4(v29) = *(_BYTE *)(v4 + 32);
  v5 = BYTE4(v29);
  v6 = *(_BYTE *)(v4 + 33);
  *(_WORD *)((char *)&v29 + 5) = v6;
  v7 = BYTE4(v29) - 2;
  if (v7 >= 9)
  {
    if (BYTE4(v29) == 11)
    {
      LODWORD(v29) = *(_DWORD *)(v4 + 28);
      v9 = v29;
      WebCore::Length::ref((int *)&v29);
      v8 = 0;
    }
    else
    {
      v8 = 0;
      v9 = 0;
    }
  }
  else if (*(_BYTE *)(v4 + 34))
  {
    v9 = *(_DWORD *)(v4 + 28);
    v8 = 1;
  }
  else
  {
    v8 = 0;
    v9 = *(_DWORD *)(v4 + 28);
  }
  v28 = 0;
  v26 = *(_BYTE *)(v4 + 40);
  v10 = v26;
  v11 = *(_BYTE *)(v4 + 41);
  v27 = v11;
  v12 = v26 - 2;
  if (v12 >= 9)
  {
    if (v26 == 11)
    {
      v25 = *(_DWORD *)(v4 + 36);
      v14 = v25;
      WebCore::Length::ref((int *)&v25);
      v13 = 0;
    }
    else
    {
      v13 = 0;
      v14 = 0;
    }
  }
  else
  {
    v13 = *(_BYTE *)(v4 + 42);
    v14 = *(_DWORD *)(v4 + 36);
    if (v13)
      v13 = 1;
  }
  v17 = 0;
  v20 = 0;
  v18 = v5;
  v19 = v6;
  if (v7 < 9)
  {
    v20 = v8;
LABEL_15:
    v17 = v9;
    goto LABEL_16;
  }
  if (v5 == 11)
    goto LABEL_15;
LABEL_16:
  v21 = 0;
  v24 = 0;
  v22 = v10;
  v23 = v11;
  if (v12 < 9)
  {
    v24 = v13;
LABEL_18:
    v21 = v14;
    goto LABEL_19;
  }
  if (v10 == 11)
    goto LABEL_18;
LABEL_19:
  v29 = *((_QWORD *)a2 + 1);
  v15 = WebCore::floatPointForLengthPoint(&v17, (float *)&v29);
  if (v22 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v21);
  }
  if (v18 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v17);
  }
  return v3 + v15;
}

float64x2_t WebCore::RenderStyle::applyPerspective(WebCore::RenderStyle *this, float64x2_t *a2, const WebCore::FloatPoint *a3)
{
  double v3;
  double v4;
  float64x2_t v5;
  float64x2_t v6;
  float v7;
  const double *v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v16;
  float64x2_t result;
  _OWORD v18[5];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  float64x2x4_t v22;
  float64x2x4_t v23;
  float64x2x4_t v24;
  float64x2x4_t v25;

  v3 = *(float *)a3;
  v4 = *((float *)a3 + 1);
  v5 = vmlaq_n_f64(vmulq_n_f64(a2[2], v4), *a2, v3);
  v6 = vaddq_f64(a2[7], vmlaq_n_f64(vmulq_n_f64(a2[3], v4), a2[1], v3));
  a2[6] = vaddq_f64(a2[6], v5);
  a2[7] = v6;
  v7 = fmaxf(*(float *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 260), 1.0);
  v19 = *(_OWORD *)&qword_1969F8F60;
  v20 = xmmword_1969F8F70;
  v21 = unk_1969F8F80;
  v18[0] = constinit_5;
  v18[1] = unk_1969F8F20;
  v18[2] = xmmword_1969F8F30;
  memset(&v18[3], 0, 32);
  if (v7 != 0.0)
    *((double *)&v19 + 1) = -1.0 / v7;
  v8 = (const double *)v18;
  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  v12 = a2[3];
  v13 = a2[4];
  v14 = a2[5];
  v15 = a2[6];
  v16 = a2[7];
  v24 = vld4q_dup_f64(v8);
  v8 += 4;
  v22 = vld4q_dup_f64(v8);
  v8 += 4;
  *a2 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v24.val[0], *a2), v24.val[1], v11), v24.val[2], v13), v24.val[3], v15);
  a2[1] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v24.val[0], v10), v24.val[1], v12), v24.val[2], v14), v24.val[3], v16);
  v25 = vld4q_dup_f64(v8);
  v8 += 4;
  a2[2] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v22.val[0], v9), v22.val[1], v11), v22.val[2], v13), v22.val[3], v15);
  a2[3] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v22.val[0], v10), v22.val[1], v12), v22.val[2], v14), v22.val[3], v16);
  v23 = vld4q_dup_f64(v8);
  a2[4] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v25.val[0], v9), v25.val[1], v11), v25.val[2], v13), v25.val[3], v15);
  a2[5] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v25.val[0], v10), v25.val[1], v12), v25.val[2], v14), v25.val[3], v16);
  a2[6] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v23.val[0], v9), v23.val[1], v11), v23.val[2], v13), v23.val[3], v15);
  a2[7] = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v23.val[0], v10), v23.val[1], v12), v23.val[2], v14), v23.val[3], v16);
  v23.val[0].f64[0] = (float)-*(float *)a3;
  v23.val[1].f64[0] = (float)-*((float *)a3 + 1);
  v23.val[2] = vaddq_f64(a2[6], vmlaq_n_f64(vmulq_n_f64(a2[2], v23.val[1].f64[0]), *a2, v23.val[0].f64[0]));
  result = vaddq_f64(a2[7], vmlaq_n_f64(vmulq_n_f64(a2[3], v23.val[1].f64[0]), a2[1], v23.val[0].f64[0]));
  a2[6] = v23.val[2];
  a2[7] = result;
  return result;
}

void WebCore::RenderStyle::applyTransform(WebCore::RenderStyle *a1, float64x2_t *a2, WebCore::FloatRect *a3, unsigned __int8 a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  float v16;
  float v17;
  uint64_t v18;
  int v19;
  unsigned __int8 v20;
  unsigned int v21;
  char v22;
  void *v23;
  float v24;
  char v25;
  int v26;
  char v27;
  unsigned int v28;
  char v29;
  int v30;
  float v31;
  char v32;
  int v33;
  float *v34;
  int v35;
  float v36;
  float v37;
  float v38;
  float v39;
  uint64_t v40;
  float v41;
  BOOL v42;
  BOOL v43;
  float64x2_t v44;
  WebCore::TranslateTransformOperation *v45;
  uint64_t v46;
  double *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  double v52;
  double v53;
  double v54;
  float64x2_t v55;
  float64x2_t v56;
  float v57;
  unint64_t v58;
  int v59;
  float v60;
  int v61;
  void *v62;
  float v63;
  void *v64;
  float v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  WebCore::TranslateTransformOperation *v69;
  uint64_t v70;
  double *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  char v80;
  unsigned int v81;
  unsigned int v82;
  WebCore::FloatRect *v83;
  uint64_t v84;
  float v85;
  char v86;
  char v87;
  char v88;
  float v89;
  unsigned __int8 v90;
  char v91;
  char v92;
  uint64_t v93;

  if ((a4 & 1) == 0)
    goto LABEL_10;
  v8 = *((_QWORD *)a1 + 1);
  v9 = *(_QWORD **)(v8 + 40);
  v10 = v9[38];
  if (v10 && *(double *)(v10 + 40) != 0.0)
    goto LABEL_12;
  v11 = (double *)v9[39];
  if (v11)
  {
    if (v11[2] != 1.0 || v11[3] != 1.0 || v11[4] != 1.0)
      goto LABEL_12;
  }
  v12 = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 40);
  v13 = *(unsigned int *)(v12 + 20);
  if (!(_DWORD)v13)
  {
LABEL_9:
    if (v9[41])
      goto LABEL_12;
LABEL_10:
    WebCore::RenderStyle::applyCSSTransform(a1, a2, a3, a4);
    return;
  }
  v14 = *(_QWORD **)(v12 + 8);
  v15 = 8 * v13;
  while (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)*v14 + 80))(*v14))
  {
    ++v14;
    v15 -= 8;
    if (!v15)
    {
      v8 = *((_QWORD *)a1 + 1);
      v9 = *(_QWORD **)(v8 + 40);
      goto LABEL_9;
    }
  }
  v8 = *((_QWORD *)a1 + 1);
LABEL_12:
  v16 = *(float *)a3;
  v17 = *((float *)a3 + 1);
  v18 = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 40);
  BYTE4(v93) = *(_BYTE *)(v18 + 28);
  v19 = BYTE4(v93);
  v20 = *(_BYTE *)(v18 + 29);
  *(_WORD *)((char *)&v93 + 5) = v20;
  v21 = BYTE4(v93) - 2;
  v83 = a3;
  if (v21 >= 9)
  {
    if (BYTE4(v93) == 11)
    {
      LODWORD(v93) = *(_DWORD *)(v18 + 24);
      v58 = v93;
      WebCore::Length::ref((int *)&v93);
      v23 = (void *)v58;
      v22 = 0;
      goto LABEL_15;
    }
    v23 = 0;
    v22 = 0;
    v25 = 1;
    v24 = 0.0;
  }
  else
  {
    BYTE6(v93) = *(_BYTE *)(v18 + 30);
    if (!BYTE6(v93))
    {
      v22 = 0;
      v23 = (void *)*(unsigned int *)(v18 + 24);
      LODWORD(v93) = *(_DWORD *)(v18 + 24);
LABEL_15:
      v24 = *(float *)&v23;
      v25 = 1;
      goto LABEL_18;
    }
    v25 = 0;
    v24 = *(float *)(v18 + 24);
    *(float *)&v93 = v24;
    v23 = (void *)LODWORD(v24);
    v22 = 1;
  }
LABEL_18:
  v92 = 0;
  v90 = *(_BYTE *)(v18 + 36);
  v26 = v90;
  v27 = *(_BYTE *)(v18 + 37);
  v91 = v27;
  v28 = v90 - 2;
  if (v28 >= 9)
  {
    if (v90 == 11)
    {
      v59 = *(_DWORD *)(v18 + 32);
      v89 = *(float *)&v59;
      v80 = v22;
      v81 = v23;
      v79 = v25;
      WebCore::Length::ref((int *)&v89);
      v25 = v79;
      v22 = v80;
      v23 = (void *)v81;
      v30 = v59;
      v29 = 0;
      goto LABEL_21;
    }
    *(float *)&v30 = 0.0;
    v29 = 0;
    v32 = 1;
    v31 = 0.0;
  }
  else
  {
    v92 = *(_BYTE *)(v18 + 38);
    if (!v92)
    {
      v29 = 0;
      v30 = *(int *)(v18 + 32);
      v89 = *(float *)&v30;
LABEL_21:
      v31 = *(float *)&v30;
      v32 = 1;
      goto LABEL_24;
    }
    v32 = 0;
    v31 = *(float *)(v18 + 32);
    v89 = v31;
    *(float *)&v30 = v31;
    v29 = 1;
  }
LABEL_24:
  LODWORD(v84) = 0;
  BYTE4(v84) = v19;
  *(_WORD *)((char *)&v84 + 5) = v20;
  if (v21 >= 9)
  {
    if (v19 != 11)
    {
      v23 = 0;
      v33 = 1;
      v24 = 0.0;
      goto LABEL_27;
    }
  }
  else
  {
    BYTE6(v84) = v22;
    if ((v25 & 1) == 0)
    {
      v33 = 0;
      *(float *)&v84 = v24;
      v23 = (void *)LODWORD(v24);
      goto LABEL_27;
    }
  }
  LODWORD(v84) = (_DWORD)v23;
  v24 = *(float *)&v23;
  v33 = 1;
LABEL_27:
  v85 = 0.0;
  v88 = 0;
  v86 = v26;
  v87 = v27;
  if (v28 >= 9)
  {
    v34 = (float *)v83;
    if (v26 != 11)
    {
      *(float *)&v30 = 0.0;
      v35 = 1;
      v31 = 0.0;
      goto LABEL_30;
    }
LABEL_74:
    v85 = *(float *)&v30;
    v31 = *(float *)&v30;
    v35 = 1;
    goto LABEL_30;
  }
  v88 = v29;
  v34 = (float *)v83;
  if ((v32 & 1) != 0)
    goto LABEL_74;
  v35 = 0;
  v85 = v31;
  *(float *)&v30 = v31;
LABEL_30:
  v36 = v34[3];
  v37 = v34[2];
  switch(v19)
  {
    case 0:
    case 1:
    case 9:
      break;
    case 3:
      v57 = (float)SLODWORD(v24);
      if (!v33)
        v57 = v24;
      v37 = (float)(v37 * v57) / 100.0;
      break;
    case 4:
      if (v33)
        v37 = (float)(int)v23;
      else
        v37 = v24;
      break;
    case 11:
      v60 = v31;
      v61 = v30;
      v62 = v23;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v84, v34[2]);
      v23 = v62;
      v30 = v61;
      v37 = v63;
      v31 = v60;
      break;
    default:
      v37 = 0.0;
      break;
  }
  switch(v26)
  {
    case 0:
    case 1:
    case 9:
      break;
    case 3:
      if (v35)
        v31 = (float)SLODWORD(v31);
      v36 = (float)(v36 * v31) / 100.0;
      break;
    case 4:
      if (v35)
        v36 = (float)v30;
      else
        v36 = v31;
      break;
    case 11:
      v64 = v23;
      v82 = v30;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v85, v36);
      v36 = v65;
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v82);
      v23 = v64;
      break;
    default:
      v36 = 0.0;
      break;
  }
  if (v19 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v23);
  }
  v38 = v17 + v36;
  v39 = v16 + v37;
  v40 = *((_QWORD *)a1 + 1);
  v41 = *(float *)(*(_QWORD *)(*(_QWORD *)(v40 + 32) + 40) + 40);
  v42 = v39 == 0.0;
  if (v38 != 0.0)
    v42 = 0;
  v43 = v41 == 0.0 && v42;
  if (!v43)
  {
    v44 = vaddq_f64(a2[7], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(a2[3], v38), a2[1], v39), a2[5], v41));
    a2[6] = vaddq_f64(a2[6], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(a2[2], v38), *a2, v39), a2[4], v41));
    a2[7] = v44;
  }
  if ((~a4 & 0x1E) != 0)
  {
    if ((a4 & 2) != 0)
    {
      v69 = *(WebCore::TranslateTransformOperation **)(*(_QWORD *)(v40 + 40) + 320);
      if (v69)
      {
        v84 = *((_QWORD *)v34 + 1);
        WebCore::TranslateTransformOperation::apply(v69, a2, (const WebCore::FloatSize *)&v84);
        v40 = *((_QWORD *)a1 + 1);
      }
    }
    if ((a4 & 4) != 0)
    {
      v70 = *(_QWORD *)(*(_QWORD *)(v40 + 40) + 304);
      if (v70)
      {
        v84 = *((_QWORD *)v34 + 1);
        WebCore::RotateTransformOperation::apply(v70, a2);
        v40 = *((_QWORD *)a1 + 1);
      }
    }
    if ((a4 & 8) != 0)
    {
      v71 = *(double **)(*(_QWORD *)(v40 + 40) + 312);
      if (v71)
      {
        WebCore::TransformationMatrix::scale3d(a2, v71[2], v71[3], v71[4]);
        v40 = *((_QWORD *)a1 + 1);
      }
    }
    if ((a4 & 0x10) != 0)
    {
      v72 = *(_QWORD *)(*(_QWORD *)(v40 + 40) + 328);
      if (v72)
      {
        LODWORD(v84) = WebCore::RenderStyle::computeTransformOrigin(a1, (const WebCore::FloatRect *)v34);
        HIDWORD(v84) = v76;
        v77 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 32);
        v78 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 40);
        v93 = *(_QWORD *)(v78 + 440);
        WebCore::MotionPath::applyMotionPathTransform(a2, (uint64_t)v34, (float *)&v84, v72, (_BYTE *)(v78 + 424), (WebCore::Length *)(v78 + 400), (uint64_t)&v93, *(unsigned __int8 *)(*(_QWORD *)(v77 + 40) + 44));
        v40 = *((_QWORD *)a1 + 1);
      }
    }
    v73 = *(_QWORD *)(*(_QWORD *)(v40 + 32) + 40);
    v84 = *((_QWORD *)v34 + 1);
    if (*(_DWORD *)(v73 + 20))
    {
      v74 = 0;
      do
      {
        v75 = *(_QWORD *)(*(_QWORD *)(v73 + 8) + 8 * v74);
        (*(void (**)(uint64_t, float64x2_t *, uint64_t *))(*(_QWORD *)v75 + 48))(v75, a2, &v84);
        ++v74;
      }
      while (v74 < *(unsigned int *)(v73 + 20));
    }
  }
  else
  {
    v45 = *(WebCore::TranslateTransformOperation **)(*(_QWORD *)(v40 + 40) + 320);
    if (v45)
    {
      v84 = *((_QWORD *)v34 + 1);
      WebCore::TranslateTransformOperation::apply(v45, a2, (const WebCore::FloatSize *)&v84);
      v40 = *((_QWORD *)a1 + 1);
    }
    v46 = *(_QWORD *)(*(_QWORD *)(v40 + 40) + 304);
    if (v46)
    {
      v84 = *((_QWORD *)v34 + 1);
      WebCore::RotateTransformOperation::apply(v46, a2);
      v40 = *((_QWORD *)a1 + 1);
    }
    v47 = *(double **)(*(_QWORD *)(v40 + 40) + 312);
    if (v47)
    {
      WebCore::TransformationMatrix::scale3d(a2, v47[2], v47[3], v47[4]);
      v40 = *((_QWORD *)a1 + 1);
    }
    v48 = *(_QWORD *)(*(_QWORD *)(v40 + 40) + 328);
    if (v48)
    {
      LODWORD(v84) = WebCore::RenderStyle::computeTransformOrigin(a1, (const WebCore::FloatRect *)v34);
      HIDWORD(v84) = v66;
      v67 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 32);
      v68 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 40);
      v93 = *(_QWORD *)(v68 + 440);
      WebCore::MotionPath::applyMotionPathTransform(a2, (uint64_t)v34, (float *)&v84, v48, (_BYTE *)(v68 + 424), (WebCore::Length *)(v68 + 400), (uint64_t)&v93, *(unsigned __int8 *)(*(_QWORD *)(v67 + 40) + 44));
      v40 = *((_QWORD *)a1 + 1);
    }
    v49 = *(_QWORD *)(*(_QWORD *)(v40 + 32) + 40);
    v84 = *((_QWORD *)v34 + 1);
    if (*(_DWORD *)(v49 + 20))
    {
      v50 = 0;
      do
      {
        v51 = *(_QWORD *)(*(_QWORD *)(v49 + 8) + 8 * v50);
        (*(void (**)(uint64_t, float64x2_t *, uint64_t *))(*(_QWORD *)v51 + 48))(v51, a2, &v84);
        ++v50;
      }
      while (v50 < *(unsigned int *)(v49 + 20));
    }
  }
  if (!v43)
  {
    v52 = (float)-v39;
    v53 = (float)-v38;
    v54 = (float)-v41;
    v55 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(a2[2], v53), *a2, v52), a2[4], v54);
    v56 = vaddq_f64(a2[7], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(a2[3], v53), a2[1], v52), a2[5], v54));
    a2[6] = vaddq_f64(a2[6], v55);
    a2[7] = v56;
  }
}

WebCore::StyleRareInheritedData *WebCore::RenderStyle::setTextShadow(WebCore::StyleRareInheritedData *result, unsigned int **a2, char a3)
{
  _DWORD *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int **v9;
  unsigned int *v10;
  WebCore::StyleRareInheritedData *v11;
  WTF::StringImpl *v12;
  WTF *v13;
  void *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;

  v5 = (_DWORD *)*((_QWORD *)result + 3);
  if (*v5 == 1)
  {
    v6 = *((_QWORD *)result + 3);
  }
  else
  {
    v11 = result;
    v6 = WTF::fastMalloc((WTF *)0x1A0);
    WebCore::StyleRareInheritedData::StyleRareInheritedData(v6, (uint64_t)v5);
    result = (WebCore::StyleRareInheritedData *)*((_QWORD *)v11 + 3);
    *((_QWORD *)v11 + 3) = v6;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::StyleRareInheritedData::~StyleRareInheritedData(result, v12);
        result = (WebCore::StyleRareInheritedData *)WTF::fastFree(v13, v14);
        v6 = *((_QWORD *)v11 + 3);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  if ((a3 & 1) != 0)
  {
    v15 = *a2;
    v17 = *(_QWORD *)(v6 + 160);
    v9 = (unsigned int **)(v6 + 160);
    v16 = v17;
    *v9 = 0;
    v19 = (unsigned int *)*((_QWORD *)v15 + 7);
    result = (WebCore::StyleRareInheritedData *)(v15 + 14);
    v18 = v19;
    *(_QWORD *)result = v16;
    if (v19)
      result = (WebCore::StyleRareInheritedData *)std::default_delete<WebCore::ShadowData>::operator()[abi:sn180100]((uint64_t)result, v18);
    v7 = *a2;
    *a2 = 0;
    v8 = *v9;
  }
  else
  {
    v7 = *a2;
    *a2 = 0;
    v10 = *(unsigned int **)(v6 + 160);
    v9 = (unsigned int **)(v6 + 160);
    v8 = v10;
  }
  *v9 = v7;
  if (v8)
    return (WebCore::StyleRareInheritedData *)std::default_delete<WebCore::ShadowData>::operator()[abi:sn180100]((uint64_t)v9, v8);
  return result;
}

WebCore::StyleMiscNonInheritedData **WebCore::RenderStyle::setBoxShadow(uint64_t a1, unsigned int **a2, char a3)
{
  WebCore::StyleMiscNonInheritedData **result;
  uint64_t v6;
  WebCore::StyleMiscNonInheritedData **v7;
  WTF::StringImpl *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int **v11;
  unsigned int *v12;
  unsigned int *v13;
  WebCore::StyleMiscNonInheritedData *v14;
  WebCore::StyleMiscNonInheritedData *v15;
  unsigned int *v16;
  unsigned int *v17;
  WTF *v18;
  void *v19;
  WebCore::StyleMiscNonInheritedData *v20;

  result = (WebCore::StyleMiscNonInheritedData **)WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)(a1 + 8));
  v6 = (uint64_t)result[4];
  if (*(_DWORD *)v6 != 1)
  {
    v7 = result;
    WebCore::StyleMiscNonInheritedData::copy(result[4], (uint64_t *)&v20);
    v6 = (uint64_t)v20;
    result = (WebCore::StyleMiscNonInheritedData **)v7[4];
    v7[4] = v20;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData((WebCore::StyleMiscNonInheritedData *)result, v8);
        result = (WebCore::StyleMiscNonInheritedData **)WTF::fastFree(v18, v19);
        v6 = (uint64_t)v7[4];
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  if ((a3 & 1) != 0)
  {
    v13 = *a2;
    v15 = *(WebCore::StyleMiscNonInheritedData **)(v6 + 88);
    v11 = (unsigned int **)(v6 + 88);
    v14 = v15;
    *v11 = 0;
    v17 = (unsigned int *)*((_QWORD *)v13 + 7);
    result = (WebCore::StyleMiscNonInheritedData **)(v13 + 14);
    v16 = v17;
    *result = v14;
    if (v17)
      result = (WebCore::StyleMiscNonInheritedData **)std::default_delete<WebCore::ShadowData>::operator()[abi:sn180100]((uint64_t)result, v16);
    v9 = *a2;
    *a2 = 0;
    v10 = *v11;
  }
  else
  {
    v9 = *a2;
    *a2 = 0;
    v12 = *(unsigned int **)(v6 + 88);
    v11 = (unsigned int **)(v6 + 88);
    v10 = v12;
  }
  *v11 = v9;
  if (v10)
    return (WebCore::StyleMiscNonInheritedData **)std::default_delete<WebCore::ShadowData>::operator()[abi:sn180100]((uint64_t)v11, v10);
  return result;
}

uint64_t WebCore::RenderStyle::listStyleImage(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 3) + 8);
}

uint64_t WebCore::RenderStyle::setListStyleImage(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 24);
  result = a1 + 24;
  if (*(_QWORD *)(v3 + 8) != *a2)
  {
    WTF::DataRef<WebCore::StyleRareInheritedData>::access((WebCore::StyleRareInheritedData **)result);
    v6 = v5;
    v7 = *a2;
    *a2 = 0;
    result = *(_QWORD *)(v5 + 8);
    *(_QWORD *)(v6 + 8) = v7;
    if (result)
    {
      if (*(_DWORD *)(result + 8) == 1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      else
        --*(_DWORD *)(result + 8);
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::color(WebCore::RenderStyle *this)
{
  return *((_QWORD *)this + 4) + 328;
}

uint64_t WebCore::RenderStyle::visitedLinkColor(WebCore::RenderStyle *this)
{
  return *((_QWORD *)this + 4) + 336;
}

float WebCore::RenderStyle::horizontalBorderSpacing(WebCore::RenderStyle *this)
{
  return *(float *)(*((_QWORD *)this + 4) + 4);
}

float WebCore::RenderStyle::verticalBorderSpacing(WebCore::RenderStyle *this)
{
  return *(float *)(*((_QWORD *)this + 4) + 8);
}

uint64_t *WebCore::RenderStyle::setHorizontalBorderSpacing(WebCore::RenderStyle *this, float a2)
{
  uint64_t *result;
  uint64_t v4;

  v4 = *((_QWORD *)this + 4);
  result = (uint64_t *)((char *)this + 32);
  if (*(float *)(v4 + 4) != a2)
  {
    result = (uint64_t *)WTF::DataRef<WebCore::StyleInheritedData>::access(result);
    *((float *)result + 1) = a2;
  }
  return result;
}

uint64_t *WebCore::RenderStyle::setVerticalBorderSpacing(WebCore::RenderStyle *this, float a2)
{
  uint64_t *result;
  uint64_t v4;

  v4 = *((_QWORD *)this + 4);
  result = (uint64_t *)((char *)this + 32);
  if (*(float *)(v4 + 8) != a2)
  {
    result = (uint64_t *)WTF::DataRef<WebCore::StyleInheritedData>::access(result);
    *((float *)result + 2) = a2;
  }
  return result;
}

uint64_t WebCore::RenderStyle::hasEntirelyFixedBackground(WebCore::RenderStyle *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 16) + 8);
  do
  {
    if (!*(_QWORD *)(v1 + 16) || (*(_WORD *)(v1 + 58) & 3) != 2)
      return 0;
    v1 = *(_QWORD *)(v1 + 8);
  }
  while (v1);
  return 1;
}

uint64_t *WebCore::RenderStyle::hyphenString(WebCore::RenderStyle *this, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  WebCore::RenderStyle *v5;
  WebCore::RenderStyle *v6;
  uint64_t v7;

  v2 = *((_QWORD *)this + 3);
  if (*(_QWORD *)(v2 + 288))
    return (uint64_t *)(v2 + 288);
  {
    v5 = this;
    WTF::AtomStringImpl::add();
    this = v5;
    WebCore::RenderStyle::hyphenString(void)const::hyphenMinusString = v7;
  }
  {
    v6 = this;
    WTF::AtomStringImpl::add();
    this = v6;
    WebCore::RenderStyle::hyphenString(void)const::hyphenString = v7;
  }
  v3 = WebCore::FontCascade::primaryFont((WebCore::FontCascade *)(*((_QWORD *)this + 4) + 32), a2);
  if (WebCore::Font::glyphForCharacter(v3, (void *)0x2010))
    return &WebCore::RenderStyle::hyphenString(void)const::hyphenString;
  else
    return &WebCore::RenderStyle::hyphenString(void)const::hyphenMinusString;
}

uint64_t WebCore::RenderStyle::fontCascade(WebCore::RenderStyle *this)
{
  return *((_QWORD *)this + 4) + 32;
}

void WebCore::RenderStyle::textEmphasisMarkString(WebCore::RenderStyle *this)
{
  __asm { BR              X12 }
}

uint64_t *sub_1964DAE80(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((_MergedGlobals_255 & 1) == 0)
  {
    v3 = a1;
    WTF::AtomStringImpl::add();
    a1 = v3;
    qword_1ECE848E8 = v5;
    _MergedGlobals_255 = 1;
  }
  if ((byte_1ECE848D9 & 1) == 0)
  {
    v4 = a1;
    WTF::AtomStringImpl::add();
    a1 = v4;
    qword_1ECE848F0 = v5;
    byte_1ECE848D9 = 1;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 24) + 231) & 2) != 0)
    return &qword_1ECE848F0;
  else
    return &qword_1ECE848E8;
}

uint64_t WebCore::RenderStyle::textEmphasisMark(WebCore::RenderStyle *this)
{
  uint64_t result;
  int v3;
  char v4;

  result = (*(_DWORD *)(*((_QWORD *)this + 3) + 228) >> 26) & 7;
  if ((_DWORD)result == 1)
  {
    v3 = (unsigned __int16)*((_DWORD *)this + 11) >> 13;
    v4 = 2;
    switch(v3)
    {
      case 1:
      case 2:
        goto LABEL_4;
      case 3:
      case 5:
        LOBYTE(v3) = 3;
        goto LABEL_4;
      case 4:
        goto LABEL_5;
      default:
        LOBYTE(v3) = 0;
LABEL_4:
        v4 = v3;
LABEL_5:
        if ((v4 & 6) == 2)
          result = 6;
        else
          result = 2;
        break;
    }
  }
  return result;
}

WebCore::StyleMiscNonInheritedData *WebCore::RenderStyle::clearAnimations(WTF **this)
{
  WTF::StringImpl *v1;
  WTF *v2;
  WebCore::StyleMiscNonInheritedData *result;
  WebCore::StyleMiscNonInheritedData *v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::Animation **v7;
  uint64_t v8;
  WebCore::Animation *v9;
  WTF *v10;
  void *v11;
  WTF *v12;
  WTF *v13;
  void *v14;
  WebCore::StyleMiscNonInheritedData *v15;

  v2 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(this + 1);
  result = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v2 + 4);
  if (*(_DWORD *)result != 1)
  {
    WebCore::StyleMiscNonInheritedData::copy(result, (uint64_t *)&v15);
    result = v15;
    v4 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v2 + 4);
    *((_QWORD *)v2 + 4) = v15;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v4, v1);
        WTF::fastFree(v13, v14);
        result = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v2 + 4);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
  }
  v5 = *((_QWORD *)result + 8);
  *((_QWORD *)result + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      v6 = *(unsigned int *)(v5 + 20);
      if ((_DWORD)v6)
      {
        v7 = *(WebCore::Animation ***)(v5 + 8);
        v8 = 8 * v6;
        do
        {
          v9 = *v7;
          *v7 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 1)
            {
              WebCore::Animation::~Animation(v9, v1);
              WTF::fastFree(v10, v11);
            }
            else
            {
              --*(_DWORD *)v9;
            }
          }
          ++v7;
          v8 -= 8;
        }
        while (v8);
      }
      v12 = *(WTF **)(v5 + 8);
      if (v12)
      {
        *(_QWORD *)(v5 + 8) = 0;
        *(_DWORD *)(v5 + 16) = 0;
        WTF::fastFree(v12, v1);
      }
      return (WebCore::StyleMiscNonInheritedData *)WTF::fastFree((WTF *)v5, v1);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  return result;
}

WebCore::StyleMiscNonInheritedData *WebCore::RenderStyle::clearTransitions(WTF **this)
{
  WTF::StringImpl *v1;
  WTF *v2;
  WebCore::StyleMiscNonInheritedData *result;
  WebCore::StyleMiscNonInheritedData *v4;
  uint64_t v5;
  uint64_t v6;
  WebCore::Animation **v7;
  uint64_t v8;
  WebCore::Animation *v9;
  WTF *v10;
  void *v11;
  WTF *v12;
  WTF *v13;
  void *v14;
  WebCore::StyleMiscNonInheritedData *v15;

  v2 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(this + 1);
  result = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v2 + 4);
  if (*(_DWORD *)result != 1)
  {
    WebCore::StyleMiscNonInheritedData::copy(result, (uint64_t *)&v15);
    result = v15;
    v4 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v2 + 4);
    *((_QWORD *)v2 + 4) = v15;
    if (v4)
    {
      if (*(_DWORD *)v4 == 1)
      {
        WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v4, v1);
        WTF::fastFree(v13, v14);
        result = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v2 + 4);
      }
      else
      {
        --*(_DWORD *)v4;
      }
    }
  }
  v5 = *((_QWORD *)result + 9);
  *((_QWORD *)result + 9) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 1)
    {
      v6 = *(unsigned int *)(v5 + 20);
      if ((_DWORD)v6)
      {
        v7 = *(WebCore::Animation ***)(v5 + 8);
        v8 = 8 * v6;
        do
        {
          v9 = *v7;
          *v7 = 0;
          if (v9)
          {
            if (*(_DWORD *)v9 == 1)
            {
              WebCore::Animation::~Animation(v9, v1);
              WTF::fastFree(v10, v11);
            }
            else
            {
              --*(_DWORD *)v9;
            }
          }
          ++v7;
          v8 -= 8;
        }
        while (v8);
      }
      v12 = *(WTF **)(v5 + 8);
      if (v12)
      {
        *(_QWORD *)(v5 + 8) = 0;
        *(_DWORD *)(v5 + 16) = 0;
        WTF::fastFree(v12, v1);
      }
      return (WebCore::StyleMiscNonInheritedData *)WTF::fastFree((WTF *)v5, v1);
    }
    else
    {
      --*(_DWORD *)v5;
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::ensureAnimations(WTF **this)
{
  WTF *v1;
  uint64_t v2;
  WTF *v3;
  WTF::StringImpl *v4;
  WebCore::StyleMiscNonInheritedData *v5;
  uint64_t v7;
  WTF::StringImpl *v8;
  uint64_t v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  WebCore::Animation **v13;
  uint64_t v14;
  WebCore::Animation *v15;
  WTF *v16;
  WTF *v17;
  void *v18;
  uint64_t v19;

  v1 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(this + 1);
  v2 = *((_QWORD *)v1 + 4);
  if (*(_DWORD *)v2 != 1)
  {
    v3 = v1;
    WebCore::StyleMiscNonInheritedData::copy(*((WebCore::StyleMiscNonInheritedData **)v1 + 4), &v19);
    v2 = v19;
    v5 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v3 + 4);
    *((_QWORD *)v3 + 4) = v19;
    if (v5)
    {
      if (*(_DWORD *)v5 == 1)
      {
        WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v5, v4);
        WTF::fastFree(v10, v11);
        v2 = *((_QWORD *)v3 + 4);
      }
      else
      {
        --*(_DWORD *)v5;
      }
    }
  }
  if (!*(_QWORD *)(v2 + 64))
  {
    v7 = WTF::fastMalloc((WTF *)0x18);
    *(_DWORD *)v7 = 1;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    v9 = *(_QWORD *)(v2 + 64);
    *(_QWORD *)(v2 + 64) = v7;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
      {
        v12 = *(unsigned int *)(v9 + 20);
        if ((_DWORD)v12)
        {
          v13 = *(WebCore::Animation ***)(v9 + 8);
          v14 = 8 * v12;
          do
          {
            v15 = *v13;
            *v13 = 0;
            if (v15)
            {
              if (*(_DWORD *)v15 == 1)
              {
                WebCore::Animation::~Animation(v15, v8);
                WTF::fastFree(v17, v18);
              }
              else
              {
                --*(_DWORD *)v15;
              }
            }
            ++v13;
            v14 -= 8;
          }
          while (v14);
        }
        v16 = *(WTF **)(v9 + 8);
        if (v16)
        {
          *(_QWORD *)(v9 + 8) = 0;
          *(_DWORD *)(v9 + 16) = 0;
          WTF::fastFree(v16, v8);
        }
        WTF::fastFree((WTF *)v9, v8);
      }
      else
      {
        --*(_DWORD *)v9;
      }
    }
  }
  return *(_QWORD *)(v2 + 64);
}

uint64_t WebCore::RenderStyle::fontDescription(WebCore::RenderStyle *this)
{
  return *((_QWORD *)this + 4) + 48;
}

float WebCore::RenderStyle::computedFontSize(WebCore::RenderStyle *this)
{
  return *(float *)(*((_QWORD *)this + 4) + 204);
}

uint64_t WebCore::RenderStyle::computedLetterSpacing(WebCore::RenderStyle *this)
{
  return *((_QWORD *)this + 4) + 232;
}

uint64_t WebCore::RenderStyle::computedWordSpacing(WebCore::RenderStyle *this)
{
  return *((_QWORD *)this + 4) + 240;
}

uint64_t WebCore::RenderStyle::textSpacingTrim(WebCore::RenderStyle *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 4) + 200);
}

uint64_t WebCore::RenderStyle::textAutospace(WebCore::RenderStyle *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 4) + 201);
}

uint64_t WebCore::RenderStyle::lineHeight(WebCore::RenderStyle *this)
{
  return *((_QWORD *)this + 4) + 12;
}

WTF *WebCore::RenderStyle::computeLineHeight(WTF *this, const WebCore::Length *a2)
{
  int v2;
  double v4;
  float v5;

  v2 = *((unsigned __int8 *)a2 + 4);
  if (v2 != 11 && v2 != 13)
  {
    if (*((_BYTE *)a2 + 6))
    {
      if (*(float *)a2 >= 0.0)
        goto LABEL_7;
      return WebCore::RenderStyle::metricsOfPrimaryFont(this, a2);
    }
    if ((*(_DWORD *)a2 & 0x80000000) != 0)
      return WebCore::RenderStyle::metricsOfPrimaryFont(this, a2);
  }
LABEL_7:
  if ((v2 & 0xFFFFFFF7) == 3)
  {
    v4 = *(float *)(*((_QWORD *)this + 4) + 204) * 64.0;
    if (v4 >= 2147483650.0)
    {
      v5 = 33554000.0;
    }
    else if (v4 <= -2147483650.0)
    {
      v5 = -33554000.0;
    }
    else
    {
      v5 = (float)(int)v4 * 0.015625;
    }
    if (v2 == 11)
      return (WTF *)WebCore::Length::nonNanCalculatedValue(a2, v5);
  }
  return this;
}

uint64_t *WebCore::RenderStyle::setWordSpacing(uint64_t a1, WebCore::Length *a2)
{
  uint64_t *result;
  _BYTE *v4;
  _BYTE *v5;
  int v6;
  float *v7;
  float v8;
  float v9;
  char isCalculatedEqual;
  _BYTE *v11;
  unsigned int v12;
  int v13;
  uint64_t *v14;
  uint64_t *v15;
  _BYTE *v16;

  v5 = *(_BYTE **)(a1 + 32);
  result = (uint64_t *)(a1 + 32);
  v4 = v5;
  v6 = v5[244];
  if (v6 != *((unsigned __int8 *)a2 + 4) || (v4[245] != 0) != (*((_BYTE *)a2 + 5) != 0))
    goto LABEL_13;
  if (v6 == 13)
    return result;
  v7 = (float *)(v4 + 240);
  if (v6 == 11)
  {
    v15 = result;
    isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v4 + 240), a2);
    result = v15;
    if ((isCalculatedEqual & 1) != 0)
      return result;
    goto LABEL_13;
  }
  if (v4[246])
    v8 = *v7;
  else
    v8 = (float)*(int *)v7;
  v9 = *(float *)a2;
  if (!*((_BYTE *)a2 + 6))
    v9 = (float)*(int *)a2;
  if (v8 != v9)
  {
LABEL_13:
    v11 = WTF::DataRef<WebCore::StyleInheritedData>::access(result);
    result = (uint64_t *)(v11 + 240);
    if (v11 + 240 != (_BYTE *)a2)
    {
      if (v11[244] == 11)
      {
        v16 = v11;
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v14 = (uint64_t *)(v11 + 240);
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)result);
        result = v14;
        v11 = v16;
      }
      v12 = *((unsigned __int8 *)a2 + 4);
      v11[244] = v12;
      v11[245] = *((_BYTE *)a2 + 5);
      if (v12 <= 0xD)
      {
        v13 = 1 << v12;
        if ((v13 & 0x7FC) != 0)
        {
          v11[246] = *((_BYTE *)a2 + 6);
          *(_DWORD *)result = *(_DWORD *)a2;
        }
        else if ((v13 & 0x3003) != 0)
        {
          *(_DWORD *)result = 0;
        }
        else
        {
          *(_DWORD *)result = *(_DWORD *)a2;
          return (uint64_t *)WebCore::Length::ref((int *)result);
        }
      }
    }
  }
  return result;
}

void WebCore::RenderStyle::setTextSpacingTrim(uint64_t a1, void *a2)
{
  char v2;
  uint64_t v4;
  WebCore::FontCascadeFonts *v5;
  int v6;
  WebCore *v7;
  WTF *v8;
  WebCore *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WebCore *v16;
  unsigned int *v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WebCore *v24;
  _BYTE v25[168];
  WTF *v26;
  int v27;
  __int16 v28;

  v2 = (char)a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(WebCore::FontCascadeFonts **)(v4 + 248);
  if (v5)
  {
    v6 = (*(_DWORD *)v5)++;
    v7 = (WebCore *)*((_QWORD *)v5 + 14);
    if (v6)
    {
      *(_DWORD *)v5 = v6;
    }
    else
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v5, a2);
      WTF::fastFree(v18, v19);
      v4 = *(_QWORD *)(a1 + 32);
    }
  }
  else
  {
    v7 = 0;
  }
  WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v25, (const WebCore::FontDescription *)(v4 + 48));
  v8 = *(WTF **)(v4 + 216);
  ++*(_DWORD *)v8;
  v26 = v8;
  v27 = *(_DWORD *)(v4 + 224);
  v28 = *(_WORD *)(v4 + 228);
  v25[152] = v2;
  v9 = (WebCore *)WebCore::RenderStyle::setFontDescription(a1, (uint64_t)v25);
  v10 = *(_QWORD *)(a1 + 32);
  if (v7)
    ++*((_DWORD *)v7 + 2);
  v11 = v10 + 32;
  v24 = v7;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(v9);
  v14 = *(_QWORD *)(v13 + 80);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v13);
    v14 = *(_QWORD *)(v13 + 80);
  }
  WebCore::FontCache::updateFontCascade(v14, v11, &v24);
  v16 = v24;
  v24 = 0;
  if (v16)
  {
    if (*((_DWORD *)v16 + 2) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v16 + 8))(v16);
    else
      --*((_DWORD *)v16 + 2);
  }
  v17 = (unsigned int *)v26;
  v26 = 0;
  if (v17)
  {
    if (*v17 == 1)
    {
      v20 = v17[1];
      if ((_DWORD)v20)
      {
        v21 = (WTF::StringImpl **)(v17 + 2);
        v22 = 8 * v20;
        do
        {
          v23 = *v21;
          *v21 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v15);
            else
              *(_DWORD *)v23 -= 2;
          }
          ++v21;
          v22 -= 8;
        }
        while (v22);
      }
      WTF::fastFree((WTF *)v17, v15);
    }
    else
    {
      --*v17;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v25, v15);
}

void WebCore::RenderStyle::setTextAutospace(uint64_t a1, void *a2)
{
  char v2;
  uint64_t v4;
  WebCore::FontCascadeFonts *v5;
  int v6;
  WebCore *v7;
  WTF *v8;
  WebCore *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WebCore *v16;
  unsigned int *v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WebCore *v24;
  _BYTE v25[168];
  WTF *v26;
  int v27;
  __int16 v28;

  v2 = (char)a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(WebCore::FontCascadeFonts **)(v4 + 248);
  if (v5)
  {
    v6 = (*(_DWORD *)v5)++;
    v7 = (WebCore *)*((_QWORD *)v5 + 14);
    if (v6)
    {
      *(_DWORD *)v5 = v6;
    }
    else
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v5, a2);
      WTF::fastFree(v18, v19);
      v4 = *(_QWORD *)(a1 + 32);
    }
  }
  else
  {
    v7 = 0;
  }
  WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v25, (const WebCore::FontDescription *)(v4 + 48));
  v8 = *(WTF **)(v4 + 216);
  ++*(_DWORD *)v8;
  v26 = v8;
  v27 = *(_DWORD *)(v4 + 224);
  v28 = *(_WORD *)(v4 + 228);
  v25[153] = v2;
  v9 = (WebCore *)WebCore::RenderStyle::setFontDescription(a1, (uint64_t)v25);
  v10 = *(_QWORD *)(a1 + 32);
  if (v7)
    ++*((_DWORD *)v7 + 2);
  v11 = v10 + 32;
  v24 = v7;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(v9);
  v14 = *(_QWORD *)(v13 + 80);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v13);
    v14 = *(_QWORD *)(v13 + 80);
  }
  WebCore::FontCache::updateFontCascade(v14, v11, &v24);
  v16 = v24;
  v24 = 0;
  if (v16)
  {
    if (*((_DWORD *)v16 + 2) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v16 + 8))(v16);
    else
      --*((_DWORD *)v16 + 2);
  }
  v17 = (unsigned int *)v26;
  v26 = 0;
  if (v17)
  {
    if (*v17 == 1)
    {
      v20 = v17[1];
      if ((_DWORD)v20)
      {
        v21 = (WTF::StringImpl **)(v17 + 2);
        v22 = 8 * v20;
        do
        {
          v23 = *v21;
          *v21 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v15);
            else
              *(_DWORD *)v23 -= 2;
          }
          ++v21;
          v22 -= 8;
        }
        while (v22);
      }
      WTF::fastFree((WTF *)v17, v15);
    }
    else
    {
      --*v17;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v25, v15);
}

void WebCore::RenderStyle::setFontSize(WebCore::RenderStyle *this, float a2, void *a3)
{
  float v4;
  float v8;
  uint64_t v9;
  WebCore::FontCascadeFonts *v10;
  int v11;
  WebCore *v12;
  WTF *v13;
  float v14;
  WebCore *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  WTF::StringImpl *v21;
  WebCore *v22;
  unsigned int *v23;
  WTF *v24;
  void *v25;
  uint64_t v26;
  WTF::StringImpl **v27;
  uint64_t v28;
  WTF::StringImpl *v29;
  WebCore *v30;
  _BYTE v31[156];
  float v32;
  WTF *v33;
  int v34;
  __int16 v35;

  v4 = fminf(a2, 1000000.0);
  if (SLODWORD(a2) > -1 && ((LODWORD(a2) & 0x7FFFFFFFu) - 0x800000) >> 24 < 0x7F
    || (LODWORD(a2) - 1) < 0x7FFFFF
    || (LODWORD(a2) & 0x7FFFFFFF) == 0)
  {
    v8 = v4;
  }
  else
  {
    v8 = 0.0;
  }
  v9 = *((_QWORD *)this + 4);
  v10 = *(WebCore::FontCascadeFonts **)(v9 + 248);
  if (v10)
  {
    v11 = (*(_DWORD *)v10)++;
    v12 = (WebCore *)*((_QWORD *)v10 + 14);
    if (v11)
    {
      *(_DWORD *)v10 = v11;
    }
    else
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v10, a3);
      WTF::fastFree(v24, v25);
      v9 = *((_QWORD *)this + 4);
    }
  }
  else
  {
    v12 = 0;
  }
  WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v31, (const WebCore::FontDescription *)(v9 + 48));
  v13 = *(WTF **)(v9 + 216);
  ++*(_DWORD *)v13;
  v33 = v13;
  v34 = *(_DWORD *)(v9 + 224);
  v35 = *(_WORD *)(v9 + 228);
  if (v8 >= 3.4028e38)
  {
    v34 = 2139095039;
    v14 = 3.4028e38;
  }
  else
  {
    v14 = -3.4028e38;
    if (v8 > -3.4028e38)
      v14 = v8;
    v34 = LODWORD(v14);
  }
  v32 = v14;
  v15 = (WebCore *)WebCore::RenderStyle::setFontDescription((uint64_t)this, (uint64_t)v31);
  v16 = *((_QWORD *)this + 4);
  if (v12)
    ++*((_DWORD *)v12 + 2);
  v17 = v16 + 32;
  v30 = v12;
  v18 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v18 || (v19 = *(_QWORD *)(v18 + 96)) == 0)
    v19 = WebCore::threadGlobalDataSlow(v15);
  v20 = *(_QWORD *)(v19 + 80);
  if (!v20)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v19);
    v20 = *(_QWORD *)(v19 + 80);
  }
  WebCore::FontCache::updateFontCascade(v20, v17, &v30);
  v22 = v30;
  v30 = 0;
  if (v22)
  {
    if (*((_DWORD *)v22 + 2) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v22 + 8))(v22);
    else
      --*((_DWORD *)v22 + 2);
  }
  v23 = (unsigned int *)v33;
  v33 = 0;
  if (v23)
  {
    if (*v23 == 1)
    {
      v26 = v23[1];
      if ((_DWORD)v26)
      {
        v27 = (WTF::StringImpl **)(v23 + 2);
        v28 = 8 * v26;
        do
        {
          v29 = *v27;
          *v27 = 0;
          if (v29)
          {
            if (*(_DWORD *)v29 == 2)
              WTF::StringImpl::destroy(v29, v21);
            else
              *(_DWORD *)v29 -= 2;
          }
          ++v27;
          v28 -= 8;
        }
        while (v28);
      }
      WTF::fastFree((WTF *)v23, v21);
    }
    else
    {
      --*v23;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v31, v21);
}

void WebCore::RenderStyle::setFontSizeAdjust(uint64_t a1, void *a2)
{
  uint64_t v4;
  WebCore::FontCascadeFonts *v5;
  int v6;
  WebCore *v7;
  WTF *v8;
  WebCore *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WebCore *v16;
  unsigned int *v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WebCore *v24;
  _BYTE v25[120];
  void *v26;
  WTF *v27;
  int v28;
  __int16 v29;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(WebCore::FontCascadeFonts **)(v4 + 248);
  if (v5)
  {
    v6 = (*(_DWORD *)v5)++;
    v7 = (WebCore *)*((_QWORD *)v5 + 14);
    if (v6)
    {
      *(_DWORD *)v5 = v6;
    }
    else
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v5, a2);
      WTF::fastFree(v18, v19);
      v4 = *(_QWORD *)(a1 + 32);
    }
  }
  else
  {
    v7 = 0;
  }
  WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v25, (const WebCore::FontDescription *)(v4 + 48));
  v8 = *(WTF **)(v4 + 216);
  ++*(_DWORD *)v8;
  v28 = *(_DWORD *)(v4 + 224);
  v29 = *(_WORD *)(v4 + 228);
  v27 = v8;
  v26 = a2;
  v9 = (WebCore *)WebCore::RenderStyle::setFontDescription(a1, (uint64_t)v25);
  v10 = *(_QWORD *)(a1 + 32);
  if (v7)
    ++*((_DWORD *)v7 + 2);
  v11 = v10 + 32;
  v24 = v7;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(v9);
  v14 = *(_QWORD *)(v13 + 80);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v13);
    v14 = *(_QWORD *)(v13 + 80);
  }
  WebCore::FontCache::updateFontCascade(v14, v11, &v24);
  v16 = v24;
  v24 = 0;
  if (v16)
  {
    if (*((_DWORD *)v16 + 2) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v16 + 8))(v16);
    else
      --*((_DWORD *)v16 + 2);
  }
  v17 = (unsigned int *)v27;
  v27 = 0;
  if (v17)
  {
    if (*v17 == 1)
    {
      v20 = v17[1];
      if ((_DWORD)v20)
      {
        v21 = (WTF::StringImpl **)(v17 + 2);
        v22 = 8 * v20;
        do
        {
          v23 = *v21;
          *v21 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v15);
            else
              *(_DWORD *)v23 -= 2;
          }
          ++v21;
          v22 -= 8;
        }
        while (v22);
      }
      WTF::fastFree((WTF *)v17, v15);
    }
    else
    {
      --*v17;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v25, v15);
}

void WebCore::RenderStyle::setFontWeight(uint64_t a1, void *a2)
{
  __int16 v2;
  uint64_t v4;
  WebCore::FontCascadeFonts *v5;
  int v6;
  WebCore *v7;
  WTF *v8;
  WebCore *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WebCore *v16;
  unsigned int *v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WebCore *v24;
  _BYTE v25[144];
  __int16 v26;
  WTF *v27;
  int v28;
  __int16 v29;

  v2 = (__int16)a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(WebCore::FontCascadeFonts **)(v4 + 248);
  if (v5)
  {
    v6 = (*(_DWORD *)v5)++;
    v7 = (WebCore *)*((_QWORD *)v5 + 14);
    if (v6)
    {
      *(_DWORD *)v5 = v6;
    }
    else
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v5, a2);
      WTF::fastFree(v18, v19);
      v4 = *(_QWORD *)(a1 + 32);
    }
  }
  else
  {
    v7 = 0;
  }
  WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v25, (const WebCore::FontDescription *)(v4 + 48));
  v8 = *(WTF **)(v4 + 216);
  ++*(_DWORD *)v8;
  v27 = v8;
  v28 = *(_DWORD *)(v4 + 224);
  v29 = *(_WORD *)(v4 + 228);
  v26 = v2;
  v9 = (WebCore *)WebCore::RenderStyle::setFontDescription(a1, (uint64_t)v25);
  v10 = *(_QWORD *)(a1 + 32);
  if (v7)
    ++*((_DWORD *)v7 + 2);
  v11 = v10 + 32;
  v24 = v7;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(v9);
  v14 = *(_QWORD *)(v13 + 80);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v13);
    v14 = *(_QWORD *)(v13 + 80);
  }
  WebCore::FontCache::updateFontCascade(v14, v11, &v24);
  v16 = v24;
  v24 = 0;
  if (v16)
  {
    if (*((_DWORD *)v16 + 2) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v16 + 8))(v16);
    else
      --*((_DWORD *)v16 + 2);
  }
  v17 = (unsigned int *)v27;
  v27 = 0;
  if (v17)
  {
    if (*v17 == 1)
    {
      v20 = v17[1];
      if ((_DWORD)v20)
      {
        v21 = (WTF::StringImpl **)(v17 + 2);
        v22 = 8 * v20;
        do
        {
          v23 = *v21;
          *v21 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v15);
            else
              *(_DWORD *)v23 -= 2;
          }
          ++v21;
          v22 -= 8;
        }
        while (v22);
      }
      WTF::fastFree((WTF *)v17, v15);
    }
    else
    {
      --*v17;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v25, v15);
}

void WebCore::RenderStyle::setFontStretch(uint64_t a1, void *a2)
{
  __int16 v2;
  uint64_t v4;
  WebCore::FontCascadeFonts *v5;
  int v6;
  WebCore *v7;
  WTF *v8;
  WebCore *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WebCore *v16;
  unsigned int *v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WebCore *v24;
  _BYTE v25[146];
  __int16 v26;
  WTF *v27;
  int v28;
  __int16 v29;

  v2 = (__int16)a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(WebCore::FontCascadeFonts **)(v4 + 248);
  if (v5)
  {
    v6 = (*(_DWORD *)v5)++;
    v7 = (WebCore *)*((_QWORD *)v5 + 14);
    if (v6)
    {
      *(_DWORD *)v5 = v6;
    }
    else
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v5, a2);
      WTF::fastFree(v18, v19);
      v4 = *(_QWORD *)(a1 + 32);
    }
  }
  else
  {
    v7 = 0;
  }
  WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v25, (const WebCore::FontDescription *)(v4 + 48));
  v8 = *(WTF **)(v4 + 216);
  ++*(_DWORD *)v8;
  v27 = v8;
  v28 = *(_DWORD *)(v4 + 224);
  v29 = *(_WORD *)(v4 + 228);
  v26 = v2;
  v9 = (WebCore *)WebCore::RenderStyle::setFontDescription(a1, (uint64_t)v25);
  v10 = *(_QWORD *)(a1 + 32);
  if (v7)
    ++*((_DWORD *)v7 + 2);
  v11 = v10 + 32;
  v24 = v7;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(v9);
  v14 = *(_QWORD *)(v13 + 80);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v13);
    v14 = *(_QWORD *)(v13 + 80);
  }
  WebCore::FontCache::updateFontCascade(v14, v11, &v24);
  v16 = v24;
  v24 = 0;
  if (v16)
  {
    if (*((_DWORD *)v16 + 2) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v16 + 8))(v16);
    else
      --*((_DWORD *)v16 + 2);
  }
  v17 = (unsigned int *)v27;
  v27 = 0;
  if (v17)
  {
    if (*v17 == 1)
    {
      v20 = v17[1];
      if ((_DWORD)v20)
      {
        v21 = (WTF::StringImpl **)(v17 + 2);
        v22 = 8 * v20;
        do
        {
          v23 = *v21;
          *v21 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v15);
            else
              *(_DWORD *)v23 -= 2;
          }
          ++v21;
          v22 -= 8;
        }
        while (v22);
      }
      WTF::fastFree((WTF *)v17, v15);
    }
    else
    {
      --*v17;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v25, v15);
}

void WebCore::RenderStyle::setFontItalic(uint64_t a1, void *a2)
{
  int v2;
  uint64_t v4;
  WebCore::FontCascadeFonts *v5;
  int v6;
  WebCore *v7;
  WTF *v8;
  WebCore *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  WebCore *v16;
  unsigned int *v17;
  WTF *v18;
  void *v19;
  uint64_t v20;
  WTF::StringImpl **v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WebCore *v24;
  _BYTE v25[148];
  __int16 v26;
  char v27;
  WTF *v28;
  int v29;
  __int16 v30;

  v2 = (int)a2;
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(WebCore::FontCascadeFonts **)(v4 + 248);
  if (v5)
  {
    v6 = (*(_DWORD *)v5)++;
    v7 = (WebCore *)*((_QWORD *)v5 + 14);
    if (v6)
    {
      *(_DWORD *)v5 = v6;
    }
    else
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v5, a2);
      WTF::fastFree(v18, v19);
      v4 = *(_QWORD *)(a1 + 32);
    }
  }
  else
  {
    v7 = 0;
  }
  WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v25, (const WebCore::FontDescription *)(v4 + 48));
  v8 = *(WTF **)(v4 + 216);
  ++*(_DWORD *)v8;
  v28 = v8;
  v29 = *(_DWORD *)(v4 + 224);
  v30 = *(_WORD *)(v4 + 228);
  v27 = BYTE2(v2);
  v26 = v2;
  v9 = (WebCore *)WebCore::RenderStyle::setFontDescription(a1, (uint64_t)v25);
  v10 = *(_QWORD *)(a1 + 32);
  if (v7)
    ++*((_DWORD *)v7 + 2);
  v11 = v10 + 32;
  v24 = v7;
  v12 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 96)) == 0)
    v13 = WebCore::threadGlobalDataSlow(v9);
  v14 = *(_QWORD *)(v13 + 80);
  if (!v14)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v13);
    v14 = *(_QWORD *)(v13 + 80);
  }
  WebCore::FontCache::updateFontCascade(v14, v11, &v24);
  v16 = v24;
  v24 = 0;
  if (v16)
  {
    if (*((_DWORD *)v16 + 2) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v16 + 8))(v16);
    else
      --*((_DWORD *)v16 + 2);
  }
  v17 = (unsigned int *)v28;
  v28 = 0;
  if (v17)
  {
    if (*v17 == 1)
    {
      v20 = v17[1];
      if ((_DWORD)v20)
      {
        v21 = (WTF::StringImpl **)(v17 + 2);
        v22 = 8 * v20;
        do
        {
          v23 = *v21;
          *v21 = 0;
          if (v23)
          {
            if (*(_DWORD *)v23 == 2)
              WTF::StringImpl::destroy(v23, v15);
            else
              *(_DWORD *)v23 -= 2;
          }
          ++v21;
          v22 -= 8;
        }
        while (v22);
      }
      WTF::fastFree((WTF *)v17, v15);
    }
    else
    {
      --*v17;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v25, v15);
}

void WebCore::RenderStyle::setFontPalette(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  WebCore::FontCascadeFonts *v5;
  int v6;
  WebCore *v7;
  WTF::StringImpl *v8;
  WTF *v9;
  WTF::StringImpl *v10;
  WTF::StringImpl *v11;
  WebCore *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF::StringImpl *v18;
  WebCore *v19;
  unsigned int *v20;
  WTF *v21;
  void *v22;
  uint64_t v23;
  WTF::StringImpl **v24;
  uint64_t v25;
  WTF::StringImpl *v26;
  WebCore *v27;
  _BYTE v28[112];
  WTF::StringImpl *v29;
  WTF *v30;
  int v31;
  __int16 v32;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(WebCore::FontCascadeFonts **)(v4 + 248);
  if (v5)
  {
    v6 = (*(_DWORD *)v5)++;
    v7 = (WebCore *)*((_QWORD *)v5 + 14);
    if (v6)
    {
      *(_DWORD *)v5 = v6;
    }
    else
    {
      WebCore::FontCascadeFonts::~FontCascadeFonts(v5, a2);
      WTF::fastFree(v21, v22);
      v4 = *(_QWORD *)(a1 + 32);
    }
  }
  else
  {
    v7 = 0;
  }
  WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v28, (const WebCore::FontDescription *)(v4 + 48));
  v9 = *(WTF **)(v4 + 216);
  ++*(_DWORD *)v9;
  v30 = v9;
  v31 = *(_DWORD *)(v4 + 224);
  v32 = *(_WORD *)(v4 + 228);
  v28[104] = *(_BYTE *)a2;
  v10 = (WTF::StringImpl *)a2[1];
  if (v10)
    *(_DWORD *)v10 += 2;
  v11 = v29;
  v29 = v10;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, v8);
    else
      *(_DWORD *)v11 -= 2;
  }
  v12 = (WebCore *)WebCore::RenderStyle::setFontDescription(a1, (uint64_t)v28);
  v13 = *(_QWORD *)(a1 + 32);
  if (v7)
    ++*((_DWORD *)v7 + 2);
  v14 = v13 + 32;
  v27 = v7;
  v15 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
  if (!v15 || (v16 = *(_QWORD *)(v15 + 96)) == 0)
    v16 = WebCore::threadGlobalDataSlow(v12);
  v17 = *(_QWORD *)(v16 + 80);
  if (!v17)
  {
    WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v16);
    v17 = *(_QWORD *)(v16 + 80);
  }
  WebCore::FontCache::updateFontCascade(v17, v14, &v27);
  v19 = v27;
  v27 = 0;
  if (v19)
  {
    if (*((_DWORD *)v19 + 2) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v19 + 8))(v19);
    else
      --*((_DWORD *)v19 + 2);
  }
  v20 = (unsigned int *)v30;
  v30 = 0;
  if (v20)
  {
    if (*v20 == 1)
    {
      v23 = v20[1];
      if ((_DWORD)v23)
      {
        v24 = (WTF::StringImpl **)(v20 + 2);
        v25 = 8 * v23;
        do
        {
          v26 = *v24;
          *v24 = 0;
          if (v26)
          {
            if (*(_DWORD *)v26 == 2)
              WTF::StringImpl::destroy(v26, v18);
            else
              *(_DWORD *)v26 -= 2;
          }
          ++v24;
          v25 -= 8;
        }
        while (v25);
      }
      WTF::fastFree((WTF *)v20, v18);
    }
    else
    {
      --*v20;
    }
  }
  WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v28, v18);
}

BOOL WebCore::RenderStyle::hasPositiveStrokeWidth(WebCore::RenderStyle *this)
{
  uint64_t v1;
  float v2;
  BOOL v3;
  int v5;

  v1 = *((_QWORD *)this + 3);
  if ((*(_BYTE *)(v1 + 238) & 4) == 0)
  {
    v2 = *(float *)(v1 + 4);
LABEL_3:
    v3 = v2 <= 0.0;
    return !v3;
  }
  v5 = *(unsigned __int8 *)(v1 + 248);
  if (v5 == 11)
    return 1;
  if (v5 == 13)
    return 0;
  if (*(_BYTE *)(v1 + 250))
  {
    v2 = *(float *)(v1 + 244);
    goto LABEL_3;
  }
  v3 = *(_DWORD *)(v1 + 244) <= 0;
  return !v3;
}

uint64_t WebCore::RenderStyle::colorResolvingCurrentColor(WebCore::RenderStyle *this, const WebCore::StyleColor *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  const WebCore::Color *v10;
  unint64_t *v11;
  uint64_t v12;
  _QWORD v13[4];
  _QWORD *v14;

  v3 = *((_QWORD *)this + 4);
  v4 = v3 + 328;
  v5 = v3 + 336;
  if (a3)
    v6 = v5;
  else
    v6 = v4;
  v12 = v6;
  v13[0] = &v12;
  v13[1] = &v12;
  v13[2] = &v12;
  v13[3] = &v12;
  v7 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v7 == -1)
  {
    v9 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::RenderStyle::colorByApplyingColorFilter(v9, v10, v11);
  }
  else
  {
    v14 = v13;
    return ((uint64_t (*)(_QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v7])(&v14);
  }
}

uint64_t WebCore::RenderStyle::colorByApplyingColorFilter@<X0>(uint64_t this@<X0>, const WebCore::Color *a2@<X1>, unint64_t *a3@<X8>)
{
  unint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v17;
  float v18[4];

  v3 = *(_QWORD *)a2;
  *a3 = *(_QWORD *)a2;
  if ((v3 & 0x8000000000000) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFLL);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 320) + 20) && (*a3 & 0x5000000000000) == 0x4000000000000)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(this + 24) + 320);
    v18[0] = WebCore::Color::toColorTypeLossy<WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>>(a3);
    v18[1] = v7;
    v18[2] = v8;
    v18[3] = v9;
    v10 = *(unsigned int *)(v6 + 20);
    if ((_DWORD)v10)
    {
      v11 = *(_QWORD **)(v6 + 8);
      v12 = 8 * v10;
      while (1)
      {
        this = (*(uint64_t (**)(_QWORD, float *))(*(_QWORD *)*v11 + 40))(*v11, v18);
        if ((this & 1) == 0)
          break;
        ++v11;
        v12 -= 8;
        if (!v12)
          goto LABEL_12;
      }
    }
    else
    {
LABEL_12:
      v17 = bswap32(WebCore::convertColor<WebCore::BoundedGammaEncoded<unsigned char,WebCore::SRGBADescriptor>,WebCore::BoundedGammaEncoded<float,WebCore::SRGBADescriptor>>(v18)) | 0x1104000000000000;
      this = (uint64_t)WebCore::Color::operator=(a3, &v17);
      if ((v17 & 0x8000000000000) != 0)
      {
        this = v17 & 0xFFFFFFFFFFFFLL;
        do
        {
          v14 = __ldaxr((unsigned int *)this);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, (unsigned int *)this));
        if (!v15)
        {
          atomic_store(1u, (unsigned int *)this);
          return WTF::fastFree((WTF *)this, v13);
        }
      }
    }
  }
  return this;
}

unsigned int *WebCore::RenderStyle::colorWithColorFilter@<X0>(WebCore::RenderStyle *this@<X0>, const WebCore::StyleColor *a2@<X1>, WebCore::Color *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  unsigned int *result;
  void *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];
  _QWORD *v17;

  v15 = *((_QWORD *)this + 4) + 328;
  v16[0] = &v15;
  v16[1] = &v15;
  v16[2] = &v15;
  v16[3] = &v15;
  v4 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v4 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_9:
    result = (unsigned int *)(v9 & 0xFFFFFFFFFFFFLL);
    do
    {
      v12 = __ldaxr(result);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, result));
    if (!v13)
    {
      atomic_store(1u, result);
      return (unsigned int *)WTF::fastFree((WTF *)result, v8);
    }
    return result;
  }
  v17 = v16;
  ((void (*)(uint64_t *__return_ptr, _QWORD **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v4])(&v14, &v17);
  v6 = v14;
  *(_QWORD *)a3 = v14;
  if ((v6 & 0x8000000000000) != 0)
  {
    v10 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  result = (unsigned int *)WebCore::FilterOperations::transformColor((WebCore::FilterOperations *)(*(_QWORD *)(*((_QWORD *)this + 3) + 320) + 8), a3);
  v9 = v14;
  if ((v14 & 0x8000000000000) != 0)
    goto LABEL_9;
  return result;
}

uint64_t *WebCore::RenderStyle::usedAccentColor@<X0>(uint64_t *result@<X0>, unsigned __int8 a2@<W1>, unint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  void (**v7)(WebCore::RenderThemeIOS *__hidden);
  void *v8;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v4 = result[3];
  if ((*(_BYTE *)(v4 + 238) & 0x80) != 0)
  {
    *a3 = 0;
    return result;
  }
  v6 = (uint64_t)result;
  result = WebCore::StyleColor::resolveColor((uint64_t *)&v19, (WebCore::StyleColor *)(v4 + 144), (const WebCore::Color *)(result[4] + 328));
  if ((v19 & 0x8000000000000) != 0)
  {
    if (*(float *)((v19 & 0xFFFFFFFFFFFFLL) + 0x10) != 1.0)
      goto LABEL_6;
  }
  else if ((_BYTE)v19 != 0xFF)
  {
LABEL_6:
    {
      v7 = (void (**)(WebCore::RenderThemeIOS *__hidden))WebCore::RenderTheme::singleton(void)::theme;
    }
    else
    {
      v12 = WebCore::RenderTheme::RenderTheme((uint64_t)&WebCore::RenderTheme::singleton(void)::theme);
      *(_OWORD *)(v12 + 40) = 0u;
      *(_OWORD *)(v12 + 24) = 0u;
      v7 = &off_1E335BC30;
      *(_QWORD *)v12 = &off_1E335BC30;
    }
    ((void (*)(unint64_t *__return_ptr, uint64_t *, uint64_t, _QWORD))v7[34])(&v18, &WebCore::RenderTheme::singleton(void)::theme, 167, a2);
    WebCore::blendSourceOver(&v18, (const WebCore::Color *)&v19, &v17);
    result = (uint64_t *)WebCore::Color::operator=(&v19, &v17);
    if ((v17 & 0x8000000000000) != 0)
    {
      result = (uint64_t *)(v17 & 0xFFFFFFFFFFFFLL);
      do
      {
        v13 = __ldaxr((unsigned int *)result);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, (unsigned int *)result));
      if (!v14)
      {
        atomic_store(1u, (unsigned int *)result);
        result = (uint64_t *)WTF::fastFree((WTF *)result, v8);
      }
    }
    if ((v18 & 0x8000000000000) != 0)
    {
      result = (uint64_t *)(v18 & 0xFFFFFFFFFFFFLL);
      do
      {
        v15 = __ldaxr((unsigned int *)result);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, (unsigned int *)result));
      if (!v16)
      {
        atomic_store(1u, (unsigned int *)result);
        result = (uint64_t *)WTF::fastFree((WTF *)result, v8);
      }
    }
  }
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 24) + 320) + 20))
  {
    result = (uint64_t *)WebCore::RenderStyle::colorByApplyingColorFilter(v6, (const WebCore::Color *)&v19, a3);
    if ((v19 & 0x8000000000000) != 0)
    {
      result = (uint64_t *)(v19 & 0xFFFFFFFFFFFFLL);
      do
      {
        v10 = __ldaxr((unsigned int *)result);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, (unsigned int *)result));
      if (!v11)
      {
        atomic_store(1u, (unsigned int *)result);
        return (uint64_t *)WTF::fastFree((WTF *)result, v9);
      }
    }
  }
  else
  {
    *a3 = v19;
  }
  return result;
}

uint64_t WebCore::RenderStyle::usedScrollbarThumbColor@<X0>(uint64_t this@<X0>, WebCore::Color *a2@<X8>)
{
  uint64_t *v2;
  uint64_t (**v3)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  WebCore::Color *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  char v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t **v31;

  v3 = *(uint64_t (***)())(this + 24);
  v4 = *((unsigned int *)v3 + 98);
  if ((_DWORD)v4)
  {
    v5 = this;
    v19 = a2;
    v27 = &v26;
    v28 = &v26;
    v29 = &v26;
    v30 = &v26;
    if ((_DWORD)v4 == -1)
      goto LABEL_40;
  }
  else
  {
    if ((*((_BYTE *)v3 + 390) & 4) == 0)
    {
      *(_QWORD *)a2 = 0;
      return this;
    }
    v5 = this;
    v19 = a2;
    v27 = &v26;
    v28 = &v26;
    v29 = &v26;
    v30 = &v26;
  }
  v31 = &v27;
  v2 = &v21;
  ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t (**)()))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v4])(&v21, &v31, v3 + 48);
  v27 = &v26;
  v28 = &v26;
  v29 = &v26;
  v30 = &v26;
  v6 = *((unsigned int *)v3 + 102);
  if ((_DWORD)v6 == -1)
  {
LABEL_40:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_41:
    v17 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
LABEL_24:
    this = WebCore::FilterOperations::transformColor((WebCore::FilterOperations *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 320) + 8), v19);
    if ((v20 & 0x8000000000000) != 0)
    {
      this = v20 & 0xFFFFFFFFFFFFLL;
      do
      {
        v14 = __ldaxr((unsigned int *)this);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, (unsigned int *)this));
      if (!v15)
      {
        atomic_store(1u, (unsigned int *)this);
        this = WTF::fastFree((WTF *)this, v13);
      }
    }
    goto LABEL_35;
  }
  v2 = &v23;
  v31 = &v27;
  ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t (**)()))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v6])(&v23, &v31, v3 + 50);
  v25 = 1;
  v3 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix;
  if (v24 != -1)
    ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v24])(&v27, &v23);
  v24 = -1;
  if (v22 != -1)
    ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v22])(&v27, &v21);
  v7 = *(_QWORD *)(v5 + 24);
  if (*(_DWORD *)(*(_QWORD *)(v7 + 320) + 20))
  {
    v8 = v7 + 384;
    v9 = *(unsigned int *)(v7 + 392);
    if ((_DWORD)v9)
      goto LABEL_20;
    if ((*(_BYTE *)(v7 + 390) & 4) != 0)
    {
      v27 = &v26;
      v28 = &v26;
      v29 = &v26;
      v30 = &v26;
LABEL_21:
      v31 = &v27;
      v2 = &v21;
      ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v9])(&v21, &v31, v8);
      v27 = &v26;
      v28 = &v26;
      v29 = &v26;
      v30 = &v26;
      v11 = *(unsigned int *)(v7 + 408);
      if ((_DWORD)v11 != -1)
      {
        v2 = &v23;
        v31 = &v27;
        ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v11])(&v23, &v31, v7 + 400);
        v25 = 1;
        v26 = *(_QWORD *)(v5 + 32) + 328;
        v27 = &v26;
        v28 = &v26;
        v29 = &v26;
        v30 = &v26;
        if (v22 != -1)
        {
          v31 = &v27;
          ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v22])(&v20, &v31, &v21);
          v12 = v20;
          *(_QWORD *)v19 = v20;
          if ((v12 & 0x8000000000000) == 0)
            goto LABEL_24;
          goto LABEL_41;
        }
      }
      goto LABEL_40;
    }
LABEL_19:
    std::__throw_bad_optional_access[abi:sn180100]();
LABEL_20:
    v27 = &v26;
    v28 = &v26;
    v29 = &v26;
    v30 = &v26;
    if ((_DWORD)v9 == -1)
      goto LABEL_40;
    goto LABEL_21;
  }
  v10 = *(unsigned int *)(v7 + 392);
  if ((_DWORD)v10)
  {
    v27 = &v26;
    v28 = &v26;
    v29 = &v26;
    v30 = &v26;
    if ((_DWORD)v10 == -1)
      goto LABEL_40;
  }
  else
  {
    if ((*(_BYTE *)(v7 + 390) & 4) == 0)
      goto LABEL_19;
    v27 = &v26;
    v28 = &v26;
    v29 = &v26;
    v30 = &v26;
  }
  v31 = &v27;
  v2 = &v21;
  ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v10])(&v21, &v31, v7 + 384);
  v27 = &v26;
  v28 = &v26;
  v29 = &v26;
  v30 = &v26;
  v16 = *(unsigned int *)(v7 + 408);
  if ((_DWORD)v16 == -1)
    goto LABEL_40;
  v2 = &v23;
  v31 = &v27;
  ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v16])(&v23, &v31, v7 + 400);
  v25 = 1;
  v26 = *(_QWORD *)(v5 + 32) + 328;
  v27 = &v26;
  v28 = &v26;
  v29 = &v26;
  v30 = &v26;
  if (v22 == -1)
    goto LABEL_40;
  v31 = &v27;
  this = ((uint64_t (*)(uint64_t ***, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v22])(&v31, &v21);
LABEL_35:
  if (v25)
  {
    if (v24 != -1)
      this = ((uint64_t (*)(uint64_t **, uint64_t *))v3[v24])(&v27, v2);
    v24 = -1;
    if (v22 != -1)
      return ((uint64_t (*)(uint64_t **, uint64_t *))v3[v22])(&v27, &v21);
  }
  return this;
}

uint64_t WebCore::RenderStyle::usedScrollbarTrackColor@<X0>(uint64_t this@<X0>, WebCore::Color *a2@<X8>)
{
  uint64_t *v2;
  uint64_t (**v3)();
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  WebCore::Color *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  char v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t **v31;

  v3 = *(uint64_t (***)())(this + 24);
  v4 = *((unsigned int *)v3 + 98);
  if ((_DWORD)v4)
  {
    v5 = this;
    v19 = a2;
    v27 = &v26;
    v28 = &v26;
    v29 = &v26;
    v30 = &v26;
    if ((_DWORD)v4 == -1)
      goto LABEL_40;
  }
  else
  {
    if ((*((_BYTE *)v3 + 390) & 4) == 0)
    {
      *(_QWORD *)a2 = 0;
      return this;
    }
    v5 = this;
    v19 = a2;
    v27 = &v26;
    v28 = &v26;
    v29 = &v26;
    v30 = &v26;
  }
  v31 = &v27;
  v2 = &v21;
  ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t (**)()))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v4])(&v21, &v31, v3 + 48);
  v27 = &v26;
  v28 = &v26;
  v29 = &v26;
  v30 = &v26;
  v6 = *((unsigned int *)v3 + 102);
  if ((_DWORD)v6 == -1)
  {
LABEL_40:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_41:
    v17 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 + 1, v17));
LABEL_24:
    this = WebCore::FilterOperations::transformColor((WebCore::FilterOperations *)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 320) + 8), v19);
    if ((v20 & 0x8000000000000) != 0)
    {
      this = v20 & 0xFFFFFFFFFFFFLL;
      do
      {
        v14 = __ldaxr((unsigned int *)this);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, (unsigned int *)this));
      if (!v15)
      {
        atomic_store(1u, (unsigned int *)this);
        this = WTF::fastFree((WTF *)this, v13);
      }
    }
    goto LABEL_35;
  }
  v2 = &v23;
  v31 = &v27;
  ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t (**)()))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v6])(&v23, &v31, v3 + 50);
  v25 = 1;
  v3 = __const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix;
  if (v24 != -1)
    ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v24])(&v27, &v23);
  v24 = -1;
  if (v22 != -1)
    ((void (*)(uint64_t **, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v22])(&v27, &v21);
  v7 = *(_QWORD *)(v5 + 24);
  if (*(_DWORD *)(*(_QWORD *)(v7 + 320) + 20))
  {
    v8 = v7 + 384;
    v9 = *(unsigned int *)(v7 + 392);
    if ((_DWORD)v9)
      goto LABEL_20;
    if ((*(_BYTE *)(v7 + 390) & 4) != 0)
    {
      v27 = &v26;
      v28 = &v26;
      v29 = &v26;
      v30 = &v26;
LABEL_21:
      v31 = &v27;
      v2 = &v21;
      ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v9])(&v21, &v31, v8);
      v27 = &v26;
      v28 = &v26;
      v29 = &v26;
      v30 = &v26;
      v11 = *(unsigned int *)(v7 + 408);
      if ((_DWORD)v11 != -1)
      {
        v2 = &v23;
        v31 = &v27;
        ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v11])(&v23, &v31, v7 + 400);
        v25 = 1;
        v26 = *(_QWORD *)(v5 + 32) + 328;
        v27 = &v26;
        v28 = &v26;
        v29 = &v26;
        v30 = &v26;
        if (v24 != -1)
        {
          v31 = &v27;
          ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v24])(&v20, &v31, &v23);
          v12 = v20;
          *(_QWORD *)v19 = v20;
          if ((v12 & 0x8000000000000) == 0)
            goto LABEL_24;
          goto LABEL_41;
        }
      }
      goto LABEL_40;
    }
LABEL_19:
    std::__throw_bad_optional_access[abi:sn180100]();
LABEL_20:
    v27 = &v26;
    v28 = &v26;
    v29 = &v26;
    v30 = &v26;
    if ((_DWORD)v9 == -1)
      goto LABEL_40;
    goto LABEL_21;
  }
  v10 = *(unsigned int *)(v7 + 392);
  if ((_DWORD)v10)
  {
    v27 = &v26;
    v28 = &v26;
    v29 = &v26;
    v30 = &v26;
    if ((_DWORD)v10 == -1)
      goto LABEL_40;
  }
  else
  {
    if ((*(_BYTE *)(v7 + 390) & 4) == 0)
      goto LABEL_19;
    v27 = &v26;
    v28 = &v26;
    v29 = &v26;
    v30 = &v26;
  }
  v31 = &v27;
  v2 = &v21;
  ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v10])(&v21, &v31, v7 + 384);
  v27 = &v26;
  v28 = &v26;
  v29 = &v26;
  v30 = &v26;
  v16 = *(unsigned int *)(v7 + 408);
  if ((_DWORD)v16 == -1)
    goto LABEL_40;
  v2 = &v23;
  v31 = &v27;
  ((void (*)(uint64_t *__return_ptr, uint64_t ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v16])(&v23, &v31, v7 + 400);
  v25 = 1;
  v26 = *(_QWORD *)(v5 + 32) + 328;
  v27 = &v26;
  v28 = &v26;
  v29 = &v26;
  v30 = &v26;
  if (v24 == -1)
    goto LABEL_40;
  v31 = &v27;
  this = ((uint64_t (*)(uint64_t ***, uint64_t *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v24])(&v31, &v23);
LABEL_35:
  if (v25)
  {
    if (v24 != -1)
      this = ((uint64_t (*)(uint64_t **, uint64_t *))v3[v24])(&v27, v2);
    v24 = -1;
    if (v22 != -1)
      return ((uint64_t (*)(uint64_t **, uint64_t *))v3[v22])(&v27, &v21);
  }
  return this;
}

uint64_t WebCore::RenderStyle::borderBefore(WebCore::RenderStyle *this)
{
  uint64_t result;

  switch((unsigned __int16)*((_DWORD *)this + 11) >> 13)
  {
    case 1:
      result = *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 176;
      break;
    case 2:
    case 4:
      result = *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 104;
      break;
    case 3:
    case 5:
      result = *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 128;
      break;
    default:
      result = *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 152;
      break;
  }
  return result;
}

uint64_t WebCore::RenderStyle::borderAfter(WebCore::RenderStyle *this)
{
  uint64_t result;

  switch((unsigned __int16)*((_DWORD *)this + 11) >> 13)
  {
    case 1:
      result = *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 152;
      break;
    case 2:
    case 4:
      result = *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 128;
      break;
    case 3:
    case 5:
      result = *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 104;
      break;
    default:
      result = *(_QWORD *)(*((_QWORD *)this + 1) + 24) + 176;
      break;
  }
  return result;
}

float WebCore::RenderStyle::borderBeforeWidth(WebCore::RenderStyle *this)
{
  uint64_t v1;
  float result;
  uint64_t v3;

  switch((unsigned __int16)*((_DWORD *)this + 11) >> 13)
  {
    case 1:
      result = WebCore::RenderStyle::borderBottomWidth(this);
      break;
    case 2:
    case 4:
      result = WebCore::RenderStyle::borderLeftWidth(this);
      break;
    case 3:
    case 5:
      result = WebCore::RenderStyle::borderRightWidth(this);
      break;
    default:
      v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
      result = 0.0;
      if ((*(_BYTE *)(v1 + 172) & 0xE) != 0)
      {
        v3 = *(_QWORD *)(v1 + 200);
        if (*(_BYTE *)(v3 + 5) && *(_BYTE *)(v3 + 52) == 4)
        {
          if (*(_BYTE *)(v3 + 54))
            result = *(float *)(v3 + 48);
          else
            result = (float)*(int *)(v3 + 48);
        }
        else
        {
          result = *(float *)(v1 + 168);
        }
      }
      break;
  }
  return result;
}

float WebCore::RenderStyle::borderAfterWidth(WebCore::RenderStyle *this)
{
  uint64_t v1;
  float result;
  uint64_t v3;

  switch((unsigned __int16)*((_DWORD *)this + 11) >> 13)
  {
    case 1:
      result = WebCore::RenderStyle::borderTopWidth(this);
      break;
    case 2:
    case 4:
      result = WebCore::RenderStyle::borderRightWidth(this);
      break;
    case 3:
    case 5:
      result = WebCore::RenderStyle::borderLeftWidth(this);
      break;
    default:
      v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
      result = 0.0;
      if ((*(_BYTE *)(v1 + 196) & 0xE) != 0)
      {
        v3 = *(_QWORD *)(v1 + 200);
        if (*(_BYTE *)(v3 + 5) && *(_BYTE *)(v3 + 68) == 4)
        {
          if (*(_BYTE *)(v3 + 70))
            result = *(float *)(v3 + 64);
          else
            result = (float)*(int *)(v3 + 64);
        }
        else
        {
          result = *(float *)(v1 + 192);
        }
      }
      break;
  }
  return result;
}

float WebCore::RenderStyle::borderStartWidth(WebCore::RenderStyle *this)
{
  int v1;
  uint64_t v2;
  float result;
  uint64_t v4;

  v1 = *((_DWORD *)this + 10);
  if (((*((_DWORD *)this + 11) >> 13) & 6u) - 2 < 4)
  {
    if ((v1 & 0x4000000) != 0)
      return WebCore::RenderStyle::borderBottomWidth(this);
    else
      return WebCore::RenderStyle::borderTopWidth(this);
  }
  else if ((v1 & 0x4000000) != 0)
  {
    return WebCore::RenderStyle::borderRightWidth(this);
  }
  else
  {
    v2 = *(_QWORD *)(*((_QWORD *)this + 1) + 24);
    result = 0.0;
    if ((*(_BYTE *)(v2 + 124) & 0xE) != 0)
    {
      v4 = *(_QWORD *)(v2 + 200);
      if (*(_BYTE *)(v4 + 5) && *(_BYTE *)(v4 + 76) == 4)
      {
        if (*(_BYTE *)(v4 + 78))
          return *(float *)(v4 + 72);
        else
          return (float)*(int *)(v4 + 72);
      }
      else
      {
        return *(float *)(v2 + 120);
      }
    }
  }
  return result;
}

_DWORD *WebCore::RenderStyle::setMarginStart(uint64_t a1, WebCore::Length *a2)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 40);
  if (((*(_DWORD *)(a1 + 44) >> 13) & 6u) - 2 < 4)
  {
    if ((v2 & 0x4000000) != 0)
      return WebCore::RenderStyle::setMarginBottom(a1, a2);
    else
      return WebCore::RenderStyle::setMarginTop(a1, a2);
  }
  else if ((v2 & 0x4000000) != 0)
  {
    return WebCore::RenderStyle::setMarginRight(a1, a2);
  }
  else
  {
    return WebCore::RenderStyle::setMarginLeft(a1, a2);
  }
}

_DWORD *WebCore::RenderStyle::setMarginEnd(uint64_t a1, WebCore::Length *a2)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 40);
  if (((*(_DWORD *)(a1 + 44) >> 13) & 6u) - 2 < 4)
  {
    if ((v2 & 0x4000000) != 0)
      return WebCore::RenderStyle::setMarginTop(a1, a2);
    else
      return WebCore::RenderStyle::setMarginBottom(a1, a2);
  }
  else if ((v2 & 0x4000000) != 0)
  {
    return WebCore::RenderStyle::setMarginLeft(a1, a2);
  }
  else
  {
    return WebCore::RenderStyle::setMarginRight(a1, a2);
  }
}

WTF **WebCore::RenderStyle::setBorderImageSource(uint64_t a1, uint64_t *a2)
{
  WTF **result;
  uint64_t v3;
  WTF *v5;
  WebCore::NinePieceImage::Data **v6;

  v3 = *(_QWORD *)(a1 + 8);
  result = (WTF **)(a1 + 8);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 200) + 8) != *a2)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(result);
    v6 = (WebCore::NinePieceImage::Data **)(WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v5 + 3) + 50);
    return (WTF **)WebCore::NinePieceImage::setImage(v6, a2);
  }
  return result;
}

WebCore::NinePieceImage::Data *WebCore::NinePieceImage::setImage(WebCore::NinePieceImage::Data **a1, uint64_t *a2)
{
  WebCore::NinePieceImage::Data *result;
  WebCore::NinePieceImage::Data *v5;
  uint64_t v6;
  _DWORD *v7;
  WTF *v8;
  void *v9;
  WebCore::NinePieceImage::Data *v10;

  result = *a1;
  if (*(_DWORD *)result != 1)
  {
    WebCore::NinePieceImage::Data::copy(result, (uint64_t *)&v10);
    result = v10;
    v5 = *a1;
    *a1 = v10;
    if (v5)
    {
      if (*(_DWORD *)v5 == 1)
      {
        WebCore::NinePieceImage::Data::~Data(v5);
        WTF::fastFree(v8, v9);
        result = *a1;
      }
      else
      {
        --*(_DWORD *)v5;
      }
    }
  }
  v6 = *a2;
  *a2 = 0;
  v7 = (_DWORD *)*((_QWORD *)result + 1);
  *((_QWORD *)result + 1) = v6;
  if (v7)
  {
    if (v7[2] == 1)
      return (WebCore::NinePieceImage::Data *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  return result;
}

uint64_t WebCore::RenderStyle::setBorderImageSliceFill(WebCore::RenderStyle *this, int a2)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  WTF *v5;
  _DWORD *v6;
  WebCore::NinePieceImage::Data *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;

  v3 = *((_QWORD *)this + 1);
  result = (uint64_t)this + 8;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 200) + 4) != 0) != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v5 + 3);
    result = *((_QWORD *)v6 + 25);
    if (*(_DWORD *)result != 1)
    {
      WebCore::NinePieceImage::Data::copy((WebCore::NinePieceImage::Data *)result, &v10);
      result = v10;
      v7 = (WebCore::NinePieceImage::Data *)*((_QWORD *)v6 + 25);
      *((_QWORD *)v6 + 25) = v10;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
        {
          WebCore::NinePieceImage::Data::~Data(v7);
          WTF::fastFree(v8, v9);
          result = *((_QWORD *)v6 + 25);
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
    }
    *(_BYTE *)(result + 4) = v4;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setBorderImageSlices(uint64_t a1, unsigned __int8 *a2)
{
  WTF **v3;
  uint64_t result;
  WTF *v5;
  _DWORD *v6;
  uint64_t v7;
  WebCore::NinePieceImage::Data *v8;
  WTF *v9;
  void *v10;
  unsigned int v11;
  char v12;
  unsigned int v13;
  char v14;
  unsigned int v15;
  char v16;
  unsigned int v17;
  char v18;
  uint64_t v19;

  v3 = (WTF **)(a1 + 8);
  result = WebCore::operator==((unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 200) + 16), a2);
  if ((result & 1) == 0)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
    v6 = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v5 + 3);
    WebCore::LengthBox::LengthBox((WebCore::LengthBox *)&v11, (const WebCore::LengthBox *)a2);
    v7 = *((_QWORD *)v6 + 25);
    if (*(_DWORD *)v7 != 1)
    {
      WebCore::NinePieceImage::Data::copy((WebCore::NinePieceImage::Data *)v7, &v19);
      v7 = v19;
      v8 = (WebCore::NinePieceImage::Data *)*((_QWORD *)v6 + 25);
      *((_QWORD *)v6 + 25) = v19;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
        {
          WebCore::NinePieceImage::Data::~Data(v8);
          WTF::fastFree(v9, v10);
          v7 = *((_QWORD *)v6 + 25);
        }
        else
        {
          --*(_DWORD *)v8;
        }
      }
    }
    result = (uint64_t)std::array<WebCore::Length,4ul>::operator=((WebCore::Length *)(v7 + 16), (uint64_t)&v11);
    if (v18 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v17);
    }
    if (v16 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v15);
    }
    if (v14 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v13);
    }
    if (v12 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      return (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v11);
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::setBorderImageWidth(uint64_t a1, unsigned __int8 *a2)
{
  WTF **v3;
  uint64_t result;
  WTF *v5;
  _DWORD *v6;
  uint64_t v7;
  WebCore::NinePieceImage::Data *v8;
  WTF *v9;
  void *v10;
  unsigned int v11;
  char v12;
  unsigned int v13;
  char v14;
  unsigned int v15;
  char v16;
  unsigned int v17;
  char v18;
  uint64_t v19;

  v3 = (WTF **)(a1 + 8);
  result = WebCore::operator==((unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 200) + 48), a2);
  if ((result & 1) == 0)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
    v6 = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v5 + 3);
    WebCore::LengthBox::LengthBox((WebCore::LengthBox *)&v11, (const WebCore::LengthBox *)a2);
    v7 = *((_QWORD *)v6 + 25);
    if (*(_DWORD *)v7 != 1)
    {
      WebCore::NinePieceImage::Data::copy((WebCore::NinePieceImage::Data *)v7, &v19);
      v7 = v19;
      v8 = (WebCore::NinePieceImage::Data *)*((_QWORD *)v6 + 25);
      *((_QWORD *)v6 + 25) = v19;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
        {
          WebCore::NinePieceImage::Data::~Data(v8);
          WTF::fastFree(v9, v10);
          v7 = *((_QWORD *)v6 + 25);
        }
        else
        {
          --*(_DWORD *)v8;
        }
      }
    }
    result = (uint64_t)std::array<WebCore::Length,4ul>::operator=((WebCore::Length *)(v7 + 48), (uint64_t)&v11);
    if (v18 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v17);
    }
    if (v16 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v15);
    }
    if (v14 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v13);
    }
    if (v12 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      return (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v11);
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::setBorderImageWidthOverridesBorderWidths(WebCore::RenderStyle *this, int a2)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  WTF *v5;
  _DWORD *v6;
  WebCore::NinePieceImage::Data *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;

  v3 = *((_QWORD *)this + 1);
  result = (uint64_t)this + 8;
  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 200) + 5) != 0) != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v5 + 3);
    result = *((_QWORD *)v6 + 25);
    if (*(_DWORD *)result != 1)
    {
      WebCore::NinePieceImage::Data::copy((WebCore::NinePieceImage::Data *)result, &v10);
      result = v10;
      v7 = (WebCore::NinePieceImage::Data *)*((_QWORD *)v6 + 25);
      *((_QWORD *)v6 + 25) = v10;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
        {
          WebCore::NinePieceImage::Data::~Data(v7);
          WTF::fastFree(v8, v9);
          result = *((_QWORD *)v6 + 25);
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
    }
    *(_BYTE *)(result + 5) = v4;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setBorderImageOutset(uint64_t a1, unsigned __int8 *a2)
{
  WTF **v3;
  uint64_t result;
  WTF *v5;
  _DWORD *v6;
  uint64_t v7;
  WebCore::NinePieceImage::Data *v8;
  WTF *v9;
  void *v10;
  unsigned int v11;
  char v12;
  unsigned int v13;
  char v14;
  unsigned int v15;
  char v16;
  unsigned int v17;
  char v18;
  uint64_t v19;

  v3 = (WTF **)(a1 + 8);
  result = WebCore::operator==((unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 24) + 200) + 80), a2);
  if ((result & 1) == 0)
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
    v6 = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v5 + 3);
    WebCore::LengthBox::LengthBox((WebCore::LengthBox *)&v11, (const WebCore::LengthBox *)a2);
    v7 = *((_QWORD *)v6 + 25);
    if (*(_DWORD *)v7 != 1)
    {
      WebCore::NinePieceImage::Data::copy((WebCore::NinePieceImage::Data *)v7, &v19);
      v7 = v19;
      v8 = (WebCore::NinePieceImage::Data *)*((_QWORD *)v6 + 25);
      *((_QWORD *)v6 + 25) = v19;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
        {
          WebCore::NinePieceImage::Data::~Data(v8);
          WTF::fastFree(v9, v10);
          v7 = *((_QWORD *)v6 + 25);
        }
        else
        {
          --*(_DWORD *)v8;
        }
      }
    }
    result = (uint64_t)std::array<WebCore::Length,4ul>::operator=((WebCore::Length *)(v7 + 80), (uint64_t)&v11);
    if (v18 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v17);
    }
    if (v16 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v15);
    }
    if (v14 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v13);
    }
    if (v12 == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      return (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v11);
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::setBorderImageHorizontalRule(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  WTF *v5;
  _DWORD *v6;
  WebCore::NinePieceImage::Data *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 200) + 6) != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v5 + 3);
    result = *((_QWORD *)v6 + 25);
    if (*(_DWORD *)result != 1)
    {
      WebCore::NinePieceImage::Data::copy((WebCore::NinePieceImage::Data *)result, &v10);
      result = v10;
      v7 = (WebCore::NinePieceImage::Data *)*((_QWORD *)v6 + 25);
      *((_QWORD *)v6 + 25) = v10;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
        {
          WebCore::NinePieceImage::Data::~Data(v7);
          WTF::fastFree(v8, v9);
          result = *((_QWORD *)v6 + 25);
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
    }
    *(_BYTE *)(result + 6) = v4;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setBorderImageVerticalRule(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  WTF *v5;
  _DWORD *v6;
  WebCore::NinePieceImage::Data *v7;
  WTF *v8;
  void *v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 200) + 7) != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = WTF::DataRef<WebCore::StyleSurroundData>::access((uint64_t *)v5 + 3);
    result = *((_QWORD *)v6 + 25);
    if (*(_DWORD *)result != 1)
    {
      WebCore::NinePieceImage::Data::copy((WebCore::NinePieceImage::Data *)result, &v10);
      result = v10;
      v7 = (WebCore::NinePieceImage::Data *)*((_QWORD *)v6 + 25);
      *((_QWORD *)v6 + 25) = v10;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
        {
          WebCore::NinePieceImage::Data::~Data(v7);
          WTF::fastFree(v8, v9);
          result = *((_QWORD *)v6 + 25);
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
    }
    *(_BYTE *)(result + 7) = v4;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setColumnStylesFromPaginationMode(uint64_t result, int a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  int v6;
  int v7;
  BOOL v8;

  if (a2)
  {
    v3 = result;
    result = WebCore::RenderStyle::setColumnFill(result, 1);
    switch(a2)
    {
      case 1:
        WebCore::RenderStyle::setColumnAxis(v3, 0);
        v4 = *(_DWORD *)(v3 + 44);
        if (((v4 >> 13) & 6) - 2 >= 4)
          goto LABEL_12;
        v5 = (v4 >> 13) & 1;
        goto LABEL_17;
      case 2:
        WebCore::RenderStyle::setColumnAxis(v3, 0);
        if (((*(_DWORD *)(v3 + 44) >> 13) & 6u) - 2 >= 4)
          goto LABEL_13;
        v8 = (*(_DWORD *)(v3 + 44) & 0x2000) == 0;
        goto LABEL_14;
      case 3:
        WebCore::RenderStyle::setColumnAxis(v3, 1);
        v6 = (unsigned __int16)*(_DWORD *)(v3 + 44) >> 13;
        if ((v6 - 2) < 4)
LABEL_12:
          v5 = (*(unsigned __int8 *)(v3 + 43) >> 2) & 1;
        else
          v5 = v6 == 1;
        goto LABEL_17;
      case 4:
        WebCore::RenderStyle::setColumnAxis(v3, 1);
        v7 = (unsigned __int16)*(_DWORD *)(v3 + 44) >> 13;
        if ((v7 - 2) < 4)
        {
LABEL_13:
          v8 = (*(_BYTE *)(v3 + 43) & 4) == 0;
LABEL_14:
          v5 = v8;
        }
        else
        {
          v5 = v7 != 1;
        }
LABEL_17:
        result = WebCore::RenderStyle::setColumnProgression(v3, v5);
        break;
      default:
        return result;
    }
  }
  return result;
}

_QWORD *WebCore::RenderStyle::deduplicateCustomProperties(_QWORD *this, WTF **a2)
{
  const WebCore::RenderStyle *v2;
  _QWORD *v3;
  uint64_t v4;
  WTF *v5;
  WTF **v6;
  WTF *v7;
  uint64_t v8;
  WTF **v9;
  WTF *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  WTF *v14;
  WTF *v15;
  uint64_t v16;
  WTF *v17;
  uint64_t v18;
  int v19;
  unsigned int i;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _BOOL4 v28;
  _BOOL4 v29;
  WTF *v30;
  WTF *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned int m;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _BOOL4 v46;
  _BOOL4 v47;
  WTF *v48;
  WTF *v49;
  WTF *v50;
  uint64_t v51;
  WTF *v52;
  WTF *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  WTF *v57;
  uint64_t v58;
  int v59;
  int j;
  unsigned int v61;
  uint64_t v62;
  WTF *v64;
  uint64_t v65;
  int v66;
  unsigned int k;
  uint64_t v68;
  uint64_t v69;
  int v71;
  WTF *v72;
  uint64_t v73;
  WTF *v74;
  WTF *v75;
  uint64_t v76;
  WTF *v77;
  uint64_t v78;
  WTF *v79;
  uint64_t v80;
  int v81;
  int n;
  unsigned int v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unsigned int ii;
  uint64_t v90;
  uint64_t v91;
  int v93;
  WTF *v94;
  WTF *v95;
  WTF *v96;
  int v97;
  WTF *v98;
  int v99;
  _DWORD *v101;
  WTF *v102;
  void *v103;
  WTF *v104;
  int v105;
  WTF *v106;
  int v107;
  _DWORD *v109;
  WTF *v110;
  void *v111;
  WTF *v112;
  _QWORD *v113;
  _QWORD *v114;
  WTF *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  WTF **v120;

  v2 = (const WebCore::RenderStyle *)a2;
  v3 = this;
  v4 = this[3];
  v5 = a2[3];
  v6 = *(WTF ***)(v4 + 216);
  v7 = (WTF *)*((_QWORD *)v5 + 27);
  if (v6 == (WTF **)v7 || *((_DWORD *)v6 + 6) != *((_DWORD *)v7 + 6))
    goto LABEL_3;
  if (v6[1] == *((WTF **)v7 + 1))
  {
    v10 = v6[2];
    if (v10)
      v11 = *((_DWORD *)v10 - 3);
    else
      v11 = 0;
    v12 = *((_QWORD *)v7 + 2);
    if (v12)
      LODWORD(v12) = *(_DWORD *)(v12 - 12);
    if (v11 != (_DWORD)v12)
      goto LABEL_3;
    if (v10)
    {
      v13 = *((unsigned int *)v10 - 1);
      v14 = (WTF *)((char *)v10 + 16 * v13);
      if (*((_DWORD *)v10 - 3))
      {
        v15 = v6[2];
        if ((_DWORD)v13)
        {
          v16 = 16 * v13;
          v15 = v6[2];
          while ((unint64_t)(*(_QWORD *)v15 + 1) <= 1)
          {
            v15 = (WTF *)((char *)v15 + 16);
            v16 -= 16;
            if (!v16)
            {
              v15 = v14;
              goto LABEL_19;
            }
          }
        }
        goto LABEL_19;
      }
LABEL_219:
      v15 = v14;
    }
    else
    {
      v15 = 0;
      v13 = 0;
    }
    v14 = (WTF *)((char *)v10 + 16 * v13);
LABEL_19:
    if (v10)
      v17 = (WTF *)((char *)v10 + 16 * *((unsigned int *)v10 - 1));
    else
      v17 = 0;
    if (v17 == v15)
      goto LABEL_192;
LABEL_22:
    v18 = *((_QWORD *)v7 + 2);
    if (v18)
    {
      v19 = 0;
      for (i = *(_DWORD *)(*(_QWORD *)v15 + 16) >> 8; ; i = v19 + v21)
      {
        v21 = i & *(_DWORD *)(v18 - 8);
        v22 = *(_QWORD *)(v18 + 16 * v21);
        if (!v22)
          break;
        v23 = v22 != -1 && v22 == *(_QWORD *)v15;
        if (v23)
        {
          v24 = *(_QWORD *)(v18 + 16 * v21 + 8);
          if (!v24)
            goto LABEL_3;
          v25 = *((_QWORD *)v15 + 1);
          if (*(_QWORD *)(v25 + 8) != *(_QWORD *)(v24 + 8))
            goto LABEL_3;
          v26 = *(unsigned int *)(v25 + 72);
          v27 = *(_DWORD *)(v24 + 72);
          v28 = v27 == v26;
          v23 = v27 == -1;
          v29 = v27 == -1;
          if (v23)
            v28 = 0;
          if ((_DWORD)v26 != -1)
            v29 = v28;
          if (!v29)
            goto LABEL_3;
          v115 = (WTF *)v24;
          v116 = v24;
          v117 = v24;
          v118 = v24;
          v119 = v24;
          if ((_DWORD)v26 == -1)
            goto LABEL_218;
          v120 = &v115;
          this = (_QWORD *)((uint64_t (*)(WTF ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22CSSCustomPropertyValue6equalsERKS9_E3__0JZNKS9_6equalsESB_E3__1ZNKS9_6equalsESB_E3__2ZNKS9_6equalsESB_E3__3ZNKS9_6equalsESB_E3__4EEEEEJRKNS0_6__implIJNS6_3RefINS8_25CSSVariableReferenceValueENS6_12RawPtrTraitsISL_EENS6_21DefaultRefDerefTraitsISL_EEEENS8_10CSSValueIDENSK_INS8_15CSSVariableDataENSM_ISS_EENSO_ISS_EEEENS_7variantIJNS8_6LengthENS9_18NumericSyntaxValueENS8_10StyleColorENS6_6RefPtrINS8_10StyleImageENSM_IS11_EENSO_IS11_EEEENS6_3URLENS6_6StringENS9_20TransformSyntaxValueEEEENS9_15SyntaxValueListEEEEEEEDcOT_DpOT0____fmatrix[v26])(&v120, v25 + 24);
          if (!(_DWORD)this)
            goto LABEL_3;
          v30 = (WTF *)((char *)v15 + 16);
          v15 = v14;
          if (v30 != v14)
          {
            v15 = v30;
            while ((unint64_t)(*(_QWORD *)v15 + 1) <= 1)
            {
              v15 = (WTF *)((char *)v15 + 16);
              if (v15 == v14)
              {
                v15 = v14;
                break;
              }
            }
          }
          if (v15 != v17)
            goto LABEL_22;
          goto LABEL_192;
        }
        ++v19;
      }
    }
    goto LABEL_3;
  }
  v49 = (WTF *)&v117;
  v115 = (WTF *)&v117;
  v116 = 4;
  while (1)
  {
    v120 = v6;
    v50 = v6[2];
    if (!v50)
    {
      v53 = 0;
      v51 = 0;
LABEL_179:
      v52 = (WTF *)((char *)v50 + 16 * v51);
      goto LABEL_94;
    }
    v51 = *((unsigned int *)v50 - 1);
    v52 = (WTF *)((char *)v50 + 16 * v51);
    if (!*((_DWORD *)v50 - 3))
    {
      v53 = (WTF *)((char *)v50 + 16 * v51);
      goto LABEL_179;
    }
    v53 = v6[2];
    if ((_DWORD)v51)
    {
      v54 = 16 * v51;
      v53 = v6[2];
      while ((unint64_t)(*(_QWORD *)v53 + 1) <= 1)
      {
        v53 = (WTF *)((char *)v53 + 16);
        v54 -= 16;
        if (!v54)
        {
          v53 = v52;
          break;
        }
      }
    }
LABEL_94:
    v55 = v50 ? (uint64_t)v50 + 16 * *((unsigned int *)v50 - 1) : 0;
    if ((WTF *)v55 != v53)
      break;
LABEL_123:
    if (!v6[1])
    {
      v99 = 1;
      goto LABEL_186;
    }
    v71 = HIDWORD(v116);
    if (HIDWORD(v116) == (_DWORD)v116)
    {
      v112 = v49;
      v113 = (_QWORD *)WTF::Vector<JSC::JSMapIterator *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v115, HIDWORD(v116) + 1, (unint64_t)&v120);
      v49 = v112;
      v71 = HIDWORD(v116);
      *((_QWORD *)v115 + HIDWORD(v116)) = *v113;
    }
    else
    {
      *((_QWORD *)v115 + HIDWORD(v116)) = v6;
    }
    HIDWORD(v116) = v71 + 1;
    v6 = (WTF **)v120[1];
  }
LABEL_97:
  v56 = *(_QWORD *)v53;
  if (HIDWORD(v116))
  {
    v57 = v115;
    do
    {
      v58 = *(_QWORD *)(*(_QWORD *)v57 + 16);
      if (v58)
      {
        v59 = 0;
        for (j = *(_DWORD *)(v56 + 16) >> 8; ; j = v59 + v61)
        {
          v61 = j & *(_DWORD *)(v58 - 8);
          v62 = *(_QWORD *)(v58 + 16 * v61);
          if (!v62)
            break;
          if (v62 != -1 && v62 == v56)
          {
LABEL_183:
            v98 = (WTF *)((char *)v53 + 16);
            v53 = v52;
            if (v98 != v52)
            {
              v53 = v98;
              while ((unint64_t)(*(_QWORD *)v53 + 1) <= 1)
              {
                v53 = (WTF *)((char *)v53 + 16);
                if (v53 == v52)
                {
                  v53 = v52;
                  break;
                }
              }
            }
            if (v53 == (WTF *)v55)
            {
              v6 = v120;
              goto LABEL_123;
            }
            goto LABEL_97;
          }
          ++v59;
        }
      }
      v57 = (WTF *)((char *)v57 + 8);
    }
    while (v57 != (WTF *)((char *)v115 + 8 * HIDWORD(v116)));
  }
  v64 = v7;
  do
  {
    v65 = *((_QWORD *)v64 + 2);
    if (v65)
    {
      v66 = 0;
      for (k = *(_DWORD *)(v56 + 16) >> 8; ; k = v66 + v68)
      {
        v68 = k & *(_DWORD *)(v65 - 8);
        v69 = *(_QWORD *)(v65 + 16 * v68);
        if (!v69)
          break;
        if (v69 != -1 && v69 == v56)
        {
          a2 = *(WTF ***)(v65 + 16 * v68 + 8);
          if (!a2)
            break;
          v94 = v49;
          v95 = v52;
          v96 = v53;
          v97 = WebCore::CSSCustomPropertyValue::equals(*((_QWORD *)v53 + 1), (uint64_t)a2);
          v53 = v96;
          v52 = v95;
          v49 = v94;
          if (!v97)
            goto LABEL_185;
          goto LABEL_183;
        }
        ++v66;
      }
    }
    v64 = (WTF *)*((_QWORD *)v64 + 1);
  }
  while (v64);
LABEL_185:
  v99 = 0;
LABEL_186:
  this = v115;
  if (v49 != v115 && v115 != 0)
  {
    v115 = 0;
    LODWORD(v116) = 0;
    this = (_QWORD *)WTF::fastFree((WTF *)this, a2);
  }
  if (v99)
  {
LABEL_192:
    v101 = (_DWORD *)*((_QWORD *)v5 + 27);
    ++*v101;
    this = *(_QWORD **)(v4 + 216);
    *(_QWORD *)(v4 + 216) = v101;
    if (this)
    {
      if (*(_DWORD *)this == 1)
      {
        WebCore::StyleCustomPropertyData::~StyleCustomPropertyData((WebCore::StyleCustomPropertyData *)this, (WTF::StringImpl *)a2);
        this = (_QWORD *)WTF::fastFree(v102, v103);
      }
      else
      {
        --*(_DWORD *)this;
      }
    }
  }
LABEL_3:
  v8 = *((_QWORD *)v2 + 1);
  v2 = *(const WebCore::RenderStyle **)(v3[1] + 40);
  v3 = *(_QWORD **)(v8 + 40);
  v9 = (WTF **)*((_QWORD *)v2 + 36);
  v4 = v3[36];
  if (v9 == (WTF **)v4 || *((_DWORD *)v9 + 6) != *(_DWORD *)(v4 + 24))
    return this;
  if (v9[1] == *(WTF **)(v4 + 8))
  {
    v31 = v9[2];
    if (v31)
      v32 = *((_DWORD *)v31 - 3);
    else
      v32 = 0;
    v33 = *(_QWORD *)(v4 + 16);
    if (v33)
      LODWORD(v33) = *(_DWORD *)(v33 - 12);
    if (v32 != (_DWORD)v33)
      return this;
    if (v31)
    {
      v34 = *((unsigned int *)v31 - 1);
      v5 = (WTF *)((char *)v31 + 16 * v34);
      if (*((_DWORD *)v31 - 3))
      {
        v7 = v31;
        if ((_DWORD)v34)
        {
          v35 = 16 * v34;
          v7 = v31;
          while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
          {
            v7 = (WTF *)((char *)v7 + 16);
            v35 -= 16;
            if (!v35)
            {
              v7 = v5;
              goto LABEL_59;
            }
          }
        }
        goto LABEL_59;
      }
      v7 = (WTF *)((char *)v31 + 16 * v34);
    }
    else
    {
      v7 = 0;
      v34 = 0;
    }
    v5 = (WTF *)((char *)v31 + 16 * v34);
LABEL_59:
    if (v31)
      v14 = (WTF *)((char *)v31 + 16 * *((unsigned int *)v31 - 1));
    else
      v14 = 0;
    if (v14 == v7)
      goto LABEL_206;
LABEL_62:
    v36 = *(_QWORD *)(v4 + 16);
    if (v36)
    {
      v37 = 0;
      for (m = *(_DWORD *)(*(_QWORD *)v7 + 16) >> 8; ; m = v37 + v39)
      {
        v39 = m & *(_DWORD *)(v36 - 8);
        v40 = *(_QWORD *)(v36 + 16 * v39);
        if (!v40)
          break;
        if (v40 != -1 && v40 == *(_QWORD *)v7)
        {
          v42 = *(_QWORD *)(v36 + 16 * v39 + 8);
          if (!v42)
            return this;
          v43 = *((_QWORD *)v7 + 1);
          if (*(_QWORD *)(v43 + 8) != *(_QWORD *)(v42 + 8))
            return this;
          v44 = *(unsigned int *)(v43 + 72);
          v45 = *(_DWORD *)(v42 + 72);
          v46 = v45 == v44;
          v23 = v45 == -1;
          v47 = v45 == -1;
          if (v23)
            v46 = 0;
          if ((_DWORD)v44 != -1)
            v47 = v46;
          if (!v47)
            return this;
          v115 = (WTF *)v42;
          v116 = v42;
          v117 = v42;
          v118 = v42;
          v119 = v42;
          if ((_DWORD)v44 == -1)
          {
LABEL_218:
            this = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
            goto LABEL_219;
          }
          v120 = &v115;
          this = (_QWORD *)((uint64_t (*)(WTF ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22CSSCustomPropertyValue6equalsERKS9_E3__0JZNKS9_6equalsESB_E3__1ZNKS9_6equalsESB_E3__2ZNKS9_6equalsESB_E3__3ZNKS9_6equalsESB_E3__4EEEEEJRKNS0_6__implIJNS6_3RefINS8_25CSSVariableReferenceValueENS6_12RawPtrTraitsISL_EENS6_21DefaultRefDerefTraitsISL_EEEENS8_10CSSValueIDENSK_INS8_15CSSVariableDataENSM_ISS_EENSO_ISS_EEEENS_7variantIJNS8_6LengthENS9_18NumericSyntaxValueENS8_10StyleColorENS6_6RefPtrINS8_10StyleImageENSM_IS11_EENSO_IS11_EEEENS6_3URLENS6_6StringENS9_20TransformSyntaxValueEEEENS9_15SyntaxValueListEEEEEEEDcOT_DpOT0____fmatrix[v44])(&v120, v43 + 24);
          if (!(_DWORD)this)
            return this;
          v48 = (WTF *)((char *)v7 + 16);
          v7 = v5;
          if (v48 != v5)
          {
            v7 = v48;
            while ((unint64_t)(*(_QWORD *)v7 + 1) <= 1)
            {
              v7 = (WTF *)((char *)v7 + 16);
              if (v7 == v5)
              {
                v7 = v5;
                break;
              }
            }
          }
          if (v7 != v14)
            goto LABEL_62;
          goto LABEL_206;
        }
        ++v37;
      }
    }
    return this;
  }
  v115 = (WTF *)&v117;
  v116 = 4;
  while (2)
  {
    v120 = v9;
    v72 = v9[2];
    if (!v72)
    {
      v75 = 0;
      v73 = 0;
LABEL_181:
      v74 = (WTF *)((char *)v72 + 16 * v73);
      goto LABEL_135;
    }
    v73 = *((unsigned int *)v72 - 1);
    v74 = (WTF *)((char *)v72 + 16 * v73);
    if (!*((_DWORD *)v72 - 3))
    {
      v75 = (WTF *)((char *)v72 + 16 * v73);
      goto LABEL_181;
    }
    v75 = v9[2];
    if ((_DWORD)v73)
    {
      v76 = 16 * v73;
      v75 = v9[2];
      while ((unint64_t)(*(_QWORD *)v75 + 1) <= 1)
      {
        v75 = (WTF *)((char *)v75 + 16);
        v76 -= 16;
        if (!v76)
        {
          v75 = v74;
          break;
        }
      }
    }
LABEL_135:
    if (v72)
      v77 = (WTF *)((char *)v72 + 16 * *((unsigned int *)v72 - 1));
    else
      v77 = 0;
    if (v77 == v75)
    {
LABEL_164:
      if (!v9[1])
      {
        v107 = 1;
        goto LABEL_200;
      }
      v93 = HIDWORD(v116);
      if (HIDWORD(v116) == (_DWORD)v116)
      {
        v114 = (_QWORD *)WTF::Vector<JSC::JSMapIterator *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v115, HIDWORD(v116) + 1, (unint64_t)&v120);
        v93 = HIDWORD(v116);
        *((_QWORD *)v115 + HIDWORD(v116)) = *v114;
      }
      else
      {
        *((_QWORD *)v115 + HIDWORD(v116)) = v9;
      }
      HIDWORD(v116) = v93 + 1;
      v9 = (WTF **)v120[1];
      continue;
    }
    break;
  }
LABEL_138:
  v78 = *(_QWORD *)v75;
  if (HIDWORD(v116))
  {
    v79 = v115;
    do
    {
      v80 = *(_QWORD *)(*(_QWORD *)v79 + 16);
      if (v80)
      {
        v81 = 0;
        for (n = *(_DWORD *)(v78 + 16) >> 8; ; n = v81 + v83)
        {
          v83 = n & *(_DWORD *)(v80 - 8);
          v84 = *(_QWORD *)(v80 + 16 * v83);
          if (!v84)
            break;
          if (v84 != -1 && v84 == v78)
          {
LABEL_197:
            v106 = (WTF *)((char *)v75 + 16);
            v75 = v74;
            if (v106 != v74)
            {
              v75 = v106;
              while ((unint64_t)(*(_QWORD *)v75 + 1) <= 1)
              {
                v75 = (WTF *)((char *)v75 + 16);
                if (v75 == v74)
                {
                  v75 = v74;
                  break;
                }
              }
            }
            if (v75 == v77)
            {
              v9 = v120;
              goto LABEL_164;
            }
            goto LABEL_138;
          }
          ++v81;
        }
      }
      v79 = (WTF *)((char *)v79 + 8);
    }
    while (v79 != (WTF *)((char *)v115 + 8 * HIDWORD(v116)));
  }
  v86 = v4;
  do
  {
    v87 = *(_QWORD *)(v86 + 16);
    if (v87)
    {
      v88 = 0;
      for (ii = *(_DWORD *)(v78 + 16) >> 8; ; ii = v88 + v90)
      {
        v90 = ii & *(_DWORD *)(v87 - 8);
        v91 = *(_QWORD *)(v87 + 16 * v90);
        if (!v91)
          break;
        if (v91 != -1 && v91 == v78)
        {
          a2 = *(WTF ***)(v87 + 16 * v90 + 8);
          if (!a2)
            break;
          v104 = v75;
          v105 = WebCore::CSSCustomPropertyValue::equals(*((_QWORD *)v75 + 1), (uint64_t)a2);
          v75 = v104;
          if (!v105)
            goto LABEL_199;
          goto LABEL_197;
        }
        ++v88;
      }
    }
    v86 = *(_QWORD *)(v86 + 8);
  }
  while (v86);
LABEL_199:
  v107 = 0;
LABEL_200:
  this = v115;
  if (&v117 != (uint64_t *)v115 && v115 != 0)
  {
    v115 = 0;
    LODWORD(v116) = 0;
    this = (_QWORD *)WTF::fastFree((WTF *)this, a2);
  }
  if (v107)
  {
LABEL_206:
    v109 = (_DWORD *)v3[36];
    ++*v109;
    this = (_QWORD *)*((_QWORD *)v2 + 36);
    *((_QWORD *)v2 + 36) = v109;
    if (this)
    {
      if (*(_DWORD *)this == 1)
      {
        WebCore::StyleCustomPropertyData::~StyleCustomPropertyData((WebCore::StyleCustomPropertyData *)this, (WTF::StringImpl *)a2);
        return (_QWORD *)WTF::fastFree(v110, v111);
      }
      else
      {
        --*(_DWORD *)this;
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderStyle::setCustomPropertyValue(uint64_t a1, WTF::StringImpl *a2, int a3)
{
  uint64_t v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  _DWORD *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  _QWORD *v24;
  _DWORD *v25;
  int v26;
  int i;
  uint64_t v28;
  _QWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v47;
  WebCore::StyleRareInheritedData *v48;
  uint64_t *v49;
  _DWORD *v50;
  uint64_t v51;
  WebCore::StyleCustomPropertyData *v52;
  uint64_t v53;
  int v54;
  _BOOL4 v55;
  _BOOL4 v56;
  WTF *v57;
  void *v58;
  WTF *v59;
  void *v60;
  uint64_t v61;
  WTF **v62;
  uint64_t v63;
  WTF *v64;
  const WebCore::StyleCustomPropertyData **v65;
  WebCore::StyleCustomPropertyData *v66;
  const WebCore::StyleCustomPropertyData **v67;
  _QWORD v68[5];
  _QWORD *v69;

  v5 = *(_QWORD *)a2;
  v6 = (WTF::StringImpl *)(*(_QWORD *)a2 + 8);
  if (!a3)
  {
    v62 = (WTF **)(a1 + 8);
    v63 = WebCore::StyleCustomPropertyData::get(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) + 288), (uint64_t *)(*(_QWORD *)a2 + 8));
    if (!v63 || (result = WebCore::CSSCustomPropertyValue::equals(v63, v5), (result & 1) == 0))
    {
      v64 = WTF::DataRef<WebCore::StyleNonInheritedData>::access(v62);
      v65 = (const WebCore::StyleCustomPropertyData **)WTF::DataRef<WebCore::StyleRareNonInheritedData>::access((uint64_t *)v64 + 5);
      v66 = WTF::DataRef<WebCore::StyleCustomPropertyData>::access(v65 + 36);
      return (uint64_t)WebCore::StyleCustomPropertyData::set((uint64_t)v66, v6, a2);
    }
    return result;
  }
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(v7 + 216);
  if (!v8)
    goto LABEL_14;
  v9 = *(_DWORD **)v6;
  while (1)
  {
    v10 = *(_QWORD *)(v8 + 16);
    if (v10)
    {
      v11 = 0;
      v12 = *(_DWORD *)(v10 - 8);
      v13 = (v9[4] >> 8) & v12;
      v14 = *(_DWORD **)(v10 + 16 * v13);
      if (v14)
      {
        while (1)
        {
          v15 = v14 != (_DWORD *)-1 && v14 == v9;
          if (v15)
            break;
          v13 = (++v11 + (_DWORD)v13) & v12;
          v14 = *(_DWORD **)(v10 + 16 * v13);
          if (!v14)
            goto LABEL_13;
        }
        v16 = *(_QWORD *)(v10 + 16 * v13 + 8);
        if (v16)
          break;
      }
    }
LABEL_13:
    v8 = *(_QWORD *)(v8 + 8);
    if (!v8)
      goto LABEL_14;
  }
  if (*(_DWORD **)(v16 + 8) != v9)
    goto LABEL_14;
  v53 = *(unsigned int *)(v16 + 72);
  v54 = *(_DWORD *)(v5 + 72);
  v55 = v54 == v53;
  v15 = v54 == -1;
  v56 = v54 == -1;
  if (v15)
    v55 = 0;
  if ((_DWORD)v53 != -1)
    v56 = v55;
  if (!v56)
  {
LABEL_14:
    if (*(_DWORD *)v7 == 1)
    {
      v17 = v7;
    }
    else
    {
      v17 = WTF::fastMalloc((WTF *)0x1A0);
      WebCore::StyleRareInheritedData::StyleRareInheritedData(v17, v7);
      v48 = *(WebCore::StyleRareInheritedData **)(a1 + 24);
      *(_QWORD *)(a1 + 24) = v17;
      if (v48)
      {
        if (*(_DWORD *)v48 == 1)
        {
          WebCore::StyleRareInheritedData::~StyleRareInheritedData(v48, a2);
          WTF::fastFree(v57, v58);
          v17 = *(_QWORD *)(a1 + 24);
        }
        else
        {
          --*(_DWORD *)v48;
        }
      }
    }
    v18 = *(_QWORD *)(v17 + 216);
    if (*(_DWORD *)v18 == 1)
    {
      v19 = *(_QWORD *)(v17 + 216);
LABEL_18:
      if (*(_BYTE *)(v19 + 32))
        v20 = 1;
      else
        v20 = (*(_DWORD *)(*(_QWORD *)a2 + 72) - 3) < 2;
      v22 = (uint64_t *)(v19 + 16);
      v21 = *(_QWORD *)(v19 + 16);
      *(_BYTE *)(v19 + 32) = v20;
      if (v21
        || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash((uint64_t *)(v19 + 16), 8u, 0), (v21 = *v22) != 0))
      {
        v23 = *(_DWORD *)(v21 - 8);
      }
      else
      {
        v23 = 0;
      }
      v24 = 0;
      v25 = *(_DWORD **)v6;
      v26 = *(_DWORD *)(*(_QWORD *)v6 + 16) >> 8;
      for (i = 1; ; ++i)
      {
        v28 = v26 & v23;
        v29 = (_QWORD *)(v21 + 16 * v28);
        v30 = (_DWORD *)*v29;
        if (!*v29)
          break;
        if (v30 != (_DWORD *)-1)
        {
          v29 = v24;
          if (v30 == v25)
            return (uint64_t)WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>::operator=<WebCore::CSSCustomPropertyValue const>((_DWORD **)(v21 + 16 * v28 + 8), a2);
        }
        v26 = i + v28;
        v24 = v29;
      }
      if (v24)
      {
        *v24 = 0;
        v24[1] = 0;
        --*(_DWORD *)(*v22 - 16);
        v25 = *(_DWORD **)v6;
        v29 = v24;
      }
      if (v25)
        *v25 += 2;
      *v29 = v25;
      v31 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      result = v29[1];
      v29[1] = v31;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>(result, a2);
        else
          *(_DWORD *)result -= 2;
      }
      v33 = *v22;
      if (*v22)
        v34 = *(_DWORD *)(v33 - 12) + 1;
      else
        v34 = 1;
      *(_DWORD *)(v33 - 12) = v34;
      v35 = *v22;
      if (*v22)
        v36 = *(_DWORD *)(v35 - 12);
      else
        v36 = 0;
      v37 = (*(_DWORD *)(v35 - 16) + v36);
      v38 = *(unsigned int *)(v35 - 4);
      if (v38 > 0x400)
      {
        if (v38 > 2 * v37)
          goto LABEL_40;
      }
      else
      {
        if (3 * v38 > 4 * v37)
          goto LABEL_40;
        if (!(_DWORD)v38)
        {
          v47 = 8;
          goto LABEL_73;
        }
      }
      v47 = (_DWORD)v38 << (6 * *(_DWORD *)(v35 - 12) >= (2 * v38));
LABEL_73:
      result = WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash((uint64_t *)(v19 + 16), v47, (uint64_t)v29);
LABEL_40:
      v39 = *(_QWORD *)(v19 + 8);
      if (v39)
      {
        v40 = *(_QWORD *)v6;
        while (1)
        {
          v41 = *(_QWORD *)(v39 + 16);
          if (v41)
          {
            v42 = 0;
            v43 = *(_DWORD *)(v41 - 8);
            v44 = (*(_DWORD *)(v40 + 16) >> 8) & v43;
            v45 = *(_QWORD *)(v41 + 16 * v44);
            if (v45)
            {
              while (v45 == -1 || v45 != v40)
              {
                v44 = (++v42 + (_DWORD)v44) & v43;
                v45 = *(_QWORD *)(v41 + 16 * v44);
                if (!v45)
                  goto LABEL_51;
              }
              if (*(_QWORD *)(v41 + 16 * v44 + 8))
                break;
            }
          }
LABEL_51:
          v39 = *(_QWORD *)(v39 + 8);
          if (!v39)
            goto LABEL_52;
        }
      }
      else
      {
LABEL_52:
        ++*(_DWORD *)(v19 + 24);
      }
      return result;
    }
    v19 = WTF::fastMalloc((WTF *)0x28);
    *(_DWORD *)v19 = 1;
    *(_QWORD *)(v19 + 8) = 0;
    v49 = (uint64_t *)(v19 + 8);
    *(_QWORD *)(v19 + 16) = 0;
    *(_DWORD *)(v19 + 24) = *(_DWORD *)(v18 + 24);
    *(_DWORD *)(v19 + 28) = 0;
    *(_BYTE *)(v19 + 32) = *(_BYTE *)(v18 + 32);
    v50 = *(_DWORD **)(v18 + 8);
    if (!v50 && (v61 = *(_QWORD *)(v18 + 16)) != 0 && *(_DWORD *)(v61 - 12)
      || *(_DWORD *)(v18 + 28) <= 3u && (v51 = *(_QWORD *)(v18 + 16)) != 0 && *(_DWORD *)(v51 - 12) >= 9u)
    {
      ++*(_DWORD *)v18;
      *v49 = v18;
    }
    else
    {
      if (v50)
        ++*v50;
      *v49 = (uint64_t)v50;
      WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::operator=((uint64_t *)(v19 + 16), (_QWORD *)(v18 + 16));
      v18 = *v49;
      if (!*v49)
        goto LABEL_66;
    }
    *(_DWORD *)(v19 + 28) = *(_DWORD *)(v18 + 28) + 1;
LABEL_66:
    v52 = *(WebCore::StyleCustomPropertyData **)(v17 + 216);
    *(_QWORD *)(v17 + 216) = v19;
    if (v52)
    {
      if (*(_DWORD *)v52 == 1)
      {
        WebCore::StyleCustomPropertyData::~StyleCustomPropertyData(v52, a2);
        WTF::fastFree(v59, v60);
        v19 = *(_QWORD *)(v17 + 216);
      }
      else
      {
        --*(_DWORD *)v52;
      }
    }
    goto LABEL_18;
  }
  v68[0] = *(_QWORD *)a2;
  v68[1] = v5;
  v68[2] = v5;
  v68[3] = v5;
  v68[4] = v5;
  if ((_DWORD)v53 == -1)
  {
    v67 = (const WebCore::StyleCustomPropertyData **)std::__throw_bad_variant_access[abi:sn180100]();
    return (uint64_t)WTF::DataRef<WebCore::StyleCustomPropertyData>::access(v67);
  }
  v69 = v68;
  result = ((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22CSSCustomPropertyValue6equalsERKS9_E3__0JZNKS9_6equalsESB_E3__1ZNKS9_6equalsESB_E3__2ZNKS9_6equalsESB_E3__3ZNKS9_6equalsESB_E3__4EEEEEJRKNS0_6__implIJNS6_3RefINS8_25CSSVariableReferenceValueENS6_12RawPtrTraitsISL_EENS6_21DefaultRefDerefTraitsISL_EEEENS8_10CSSValueIDENSK_INS8_15CSSVariableDataENSM_ISS_EENSO_ISS_EEEENS_7variantIJNS8_6LengthENS9_18NumericSyntaxValueENS8_10StyleColorENS6_6RefPtrINS8_10StyleImageENSM_IS11_EENSO_IS11_EEEENS6_3URLENS6_6StringENS9_20TransformSyntaxValueEEEENS9_15SyntaxValueListEEEEEEEDcOT_DpOT0____fmatrix[v53])(&v69, v16 + 24);
  if ((result & 1) == 0)
  {
    v7 = *(_QWORD *)(a1 + 24);
    goto LABEL_14;
  }
  return result;
}

WebCore::StyleCustomPropertyData *WTF::DataRef<WebCore::StyleCustomPropertyData>::access(const WebCore::StyleCustomPropertyData **a1)
{
  const WebCore::StyleCustomPropertyData *v1;
  WebCore::StyleCustomPropertyData *result;
  WebCore::StyleCustomPropertyData *v4;
  WTF::StringImpl *v5;
  WebCore::StyleCustomPropertyData *v6;
  WTF *v7;
  void *v8;

  v1 = *a1;
  if (*(_DWORD *)*a1 == 1)
    return *a1;
  v4 = (WebCore::StyleCustomPropertyData *)WTF::fastMalloc((WTF *)0x28);
  result = WebCore::StyleCustomPropertyData::StyleCustomPropertyData(v4, v1);
  v6 = *a1;
  *a1 = result;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      WebCore::StyleCustomPropertyData::~StyleCustomPropertyData(v6, v5);
      WTF::fastFree(v7, v8);
      return *a1;
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::customPropertyValue(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int j;
  uint64_t v16;
  uint64_t v17;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 40) + 288);
  if (v2)
  {
    v3 = *a2;
    do
    {
      v4 = *(_QWORD *)(v2 + 16);
      if (v4)
      {
        v5 = 0;
        for (i = *(_DWORD *)(v3 + 16) >> 8; ; i = v5 + v7)
        {
          v7 = i & *(_DWORD *)(v4 - 8);
          v8 = *(_QWORD *)(v4 + 16 * v7);
          if (!v8)
            break;
          if (v8 != -1 && v8 == v3)
          {
            v10 = *(_QWORD *)(v4 + 16 * v7 + 8);
            if (v10)
              return v10;
            break;
          }
          ++v5;
        }
      }
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2);
  }
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 216);
  if (v11)
  {
    v12 = *a2;
    do
    {
      v13 = *(_QWORD *)(v11 + 16);
      if (v13)
      {
        v14 = 0;
        for (j = *(_DWORD *)(v12 + 16) >> 8; ; j = v14 + v16)
        {
          v16 = j & *(_DWORD *)(v13 - 8);
          v17 = *(_QWORD *)(v13 + 16 * v16);
          if (!v17)
            break;
          if (v17 != -1 && v17 == v12)
          {
            v10 = *(_QWORD *)(v13 + 16 * v16 + 8);
            if (v10)
              return v10;
            break;
          }
          ++v14;
        }
      }
      v11 = *(_QWORD *)(v11 + 8);
    }
    while (v11);
  }
  return 0;
}

uint64_t WebCore::RenderStyle::fieldSizing(WebCore::RenderStyle *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 643);
}

uint64_t WebCore::RenderStyle::setFieldSizing(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  WTF *v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::StyleRareNonInheritedData *v10;
  WTF *v11;
  void *v12;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if ((((*(_BYTE *)(*(_QWORD *)(v3 + 40) + 643) == 0) ^ a2) & 1) == 0)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = (_DWORD *)*((_QWORD *)v5 + 5);
    if (*v6 == 1)
    {
      result = *((_QWORD *)v5 + 5);
    }
    else
    {
      v7 = v5;
      v8 = WTF::fastMalloc((WTF *)0x288);
      result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v8, (uint64_t)v6);
      v10 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = result;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v10, v9);
          WTF::fastFree(v11, v12);
          result = *((_QWORD *)v7 + 5);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    *(_BYTE *)(result + 643) = v4;
  }
  return result;
}

uint64_t WebCore::RenderStyle::scrollMargin(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 40) + 128;
}

uint64_t WebCore::RenderStyle::setScrollMarginTop(uint64_t result, WebCore::Length *a2)
{
  WTF **v3;
  unsigned __int8 *v4;
  int v5;
  float v6;
  float v7;
  _DWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  unsigned int v13;
  int v14;
  WTF *v15;
  void *v16;
  int v17;

  v3 = (WTF **)(result + 8);
  v4 = *(unsigned __int8 **)(*(_QWORD *)(result + 8) + 40);
  v5 = v4[132];
  if (v5 == *((unsigned __int8 *)a2 + 4) && (v4[133] != 0) == (*((_BYTE *)a2 + 5) != 0))
  {
    if (v5 == 13)
      return result;
    if (v5 == 11)
    {
      result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v4 + 128), a2);
      if ((result & 1) != 0)
        return result;
    }
    else
    {
      v6 = *((float *)v4 + 32);
      if (!v4[134])
        v6 = (float)SLODWORD(v6);
      v7 = *(float *)a2;
      if (!*((_BYTE *)a2 + 6))
        v7 = (float)*(int *)a2;
      if (v6 == v7)
        return result;
    }
  }
  result = (uint64_t)WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
  v8 = *(_DWORD **)(result + 40);
  if (*v8 == 1)
  {
    v10 = *(_BYTE **)(result + 40);
  }
  else
  {
    v9 = result;
    v10 = (_BYTE *)WTF::fastMalloc((WTF *)0x288);
    WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData((uint64_t)v10, (uint64_t)v8);
    result = *(_QWORD *)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v10;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData((WebCore::StyleRareNonInheritedData *)result, v11);
        result = WTF::fastFree(v15, v16);
        v10 = *(_BYTE **)(v9 + 40);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  v12 = v10 + 128;
  if (v10 + 128 != (_BYTE *)a2)
  {
    if (v10[132] == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v12);
    }
    v13 = *((unsigned __int8 *)a2 + 4);
    v10[132] = v13;
    v10[133] = *((_BYTE *)a2 + 5);
    if (v13 - 2 >= 9)
    {
      if (v13 > 0xD)
        goto LABEL_20;
      if (((1 << v13) & 0x3003) != 0)
      {
        *v12 = 0;
        goto LABEL_20;
      }
      if (v13 != 11)
        goto LABEL_20;
      v17 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v14 = *((unsigned __int8 *)a2 + 6);
      v10[134] = v14;
      if (v14)
      {
        *v12 = *(_DWORD *)a2;
LABEL_20:
        *((_BYTE *)a2 + 4) = 0;
        return result;
      }
      v17 = *(_DWORD *)a2;
    }
    *v12 = v17;
    goto LABEL_20;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setScrollMarginBottom(uint64_t result, WebCore::Length *a2)
{
  WTF **v3;
  unsigned __int8 *v4;
  int v5;
  float v6;
  float v7;
  _DWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  unsigned int v13;
  int v14;
  WTF *v15;
  void *v16;
  int v17;

  v3 = (WTF **)(result + 8);
  v4 = *(unsigned __int8 **)(*(_QWORD *)(result + 8) + 40);
  v5 = v4[148];
  if (v5 == *((unsigned __int8 *)a2 + 4) && (v4[149] != 0) == (*((_BYTE *)a2 + 5) != 0))
  {
    if (v5 == 13)
      return result;
    if (v5 == 11)
    {
      result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v4 + 144), a2);
      if ((result & 1) != 0)
        return result;
    }
    else
    {
      v6 = *((float *)v4 + 36);
      if (!v4[150])
        v6 = (float)SLODWORD(v6);
      v7 = *(float *)a2;
      if (!*((_BYTE *)a2 + 6))
        v7 = (float)*(int *)a2;
      if (v6 == v7)
        return result;
    }
  }
  result = (uint64_t)WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
  v8 = *(_DWORD **)(result + 40);
  if (*v8 == 1)
  {
    v10 = *(_BYTE **)(result + 40);
  }
  else
  {
    v9 = result;
    v10 = (_BYTE *)WTF::fastMalloc((WTF *)0x288);
    WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData((uint64_t)v10, (uint64_t)v8);
    result = *(_QWORD *)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v10;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData((WebCore::StyleRareNonInheritedData *)result, v11);
        result = WTF::fastFree(v15, v16);
        v10 = *(_BYTE **)(v9 + 40);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  v12 = v10 + 144;
  if (v10 + 144 != (_BYTE *)a2)
  {
    if (v10[148] == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v12);
    }
    v13 = *((unsigned __int8 *)a2 + 4);
    v10[148] = v13;
    v10[149] = *((_BYTE *)a2 + 5);
    if (v13 - 2 >= 9)
    {
      if (v13 > 0xD)
        goto LABEL_20;
      if (((1 << v13) & 0x3003) != 0)
      {
        *v12 = 0;
        goto LABEL_20;
      }
      if (v13 != 11)
        goto LABEL_20;
      v17 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v14 = *((unsigned __int8 *)a2 + 6);
      v10[150] = v14;
      if (v14)
      {
        *v12 = *(_DWORD *)a2;
LABEL_20:
        *((_BYTE *)a2 + 4) = 0;
        return result;
      }
      v17 = *(_DWORD *)a2;
    }
    *v12 = v17;
    goto LABEL_20;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setScrollMarginLeft(uint64_t result, WebCore::Length *a2)
{
  WTF **v3;
  unsigned __int8 *v4;
  int v5;
  float v6;
  float v7;
  _DWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  unsigned int v13;
  int v14;
  WTF *v15;
  void *v16;
  int v17;

  v3 = (WTF **)(result + 8);
  v4 = *(unsigned __int8 **)(*(_QWORD *)(result + 8) + 40);
  v5 = v4[156];
  if (v5 == *((unsigned __int8 *)a2 + 4) && (v4[157] != 0) == (*((_BYTE *)a2 + 5) != 0))
  {
    if (v5 == 13)
      return result;
    if (v5 == 11)
    {
      result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v4 + 152), a2);
      if ((result & 1) != 0)
        return result;
    }
    else
    {
      v6 = *((float *)v4 + 38);
      if (!v4[158])
        v6 = (float)SLODWORD(v6);
      v7 = *(float *)a2;
      if (!*((_BYTE *)a2 + 6))
        v7 = (float)*(int *)a2;
      if (v6 == v7)
        return result;
    }
  }
  result = (uint64_t)WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
  v8 = *(_DWORD **)(result + 40);
  if (*v8 == 1)
  {
    v10 = *(_BYTE **)(result + 40);
  }
  else
  {
    v9 = result;
    v10 = (_BYTE *)WTF::fastMalloc((WTF *)0x288);
    WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData((uint64_t)v10, (uint64_t)v8);
    result = *(_QWORD *)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v10;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData((WebCore::StyleRareNonInheritedData *)result, v11);
        result = WTF::fastFree(v15, v16);
        v10 = *(_BYTE **)(v9 + 40);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  v12 = v10 + 152;
  if (v10 + 152 != (_BYTE *)a2)
  {
    if (v10[156] == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v12);
    }
    v13 = *((unsigned __int8 *)a2 + 4);
    v10[156] = v13;
    v10[157] = *((_BYTE *)a2 + 5);
    if (v13 - 2 >= 9)
    {
      if (v13 > 0xD)
        goto LABEL_20;
      if (((1 << v13) & 0x3003) != 0)
      {
        *v12 = 0;
        goto LABEL_20;
      }
      if (v13 != 11)
        goto LABEL_20;
      v17 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v14 = *((unsigned __int8 *)a2 + 6);
      v10[158] = v14;
      if (v14)
      {
        *v12 = *(_DWORD *)a2;
LABEL_20:
        *((_BYTE *)a2 + 4) = 0;
        return result;
      }
      v17 = *(_DWORD *)a2;
    }
    *v12 = v17;
    goto LABEL_20;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setScrollMarginRight(uint64_t result, WebCore::Length *a2)
{
  WTF **v3;
  unsigned __int8 *v4;
  int v5;
  float v6;
  float v7;
  _DWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  unsigned int v13;
  int v14;
  WTF *v15;
  void *v16;
  int v17;

  v3 = (WTF **)(result + 8);
  v4 = *(unsigned __int8 **)(*(_QWORD *)(result + 8) + 40);
  v5 = v4[140];
  if (v5 == *((unsigned __int8 *)a2 + 4) && (v4[141] != 0) == (*((_BYTE *)a2 + 5) != 0))
  {
    if (v5 == 13)
      return result;
    if (v5 == 11)
    {
      result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v4 + 136), a2);
      if ((result & 1) != 0)
        return result;
    }
    else
    {
      v6 = *((float *)v4 + 34);
      if (!v4[142])
        v6 = (float)SLODWORD(v6);
      v7 = *(float *)a2;
      if (!*((_BYTE *)a2 + 6))
        v7 = (float)*(int *)a2;
      if (v6 == v7)
        return result;
    }
  }
  result = (uint64_t)WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
  v8 = *(_DWORD **)(result + 40);
  if (*v8 == 1)
  {
    v10 = *(_BYTE **)(result + 40);
  }
  else
  {
    v9 = result;
    v10 = (_BYTE *)WTF::fastMalloc((WTF *)0x288);
    WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData((uint64_t)v10, (uint64_t)v8);
    result = *(_QWORD *)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v10;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData((WebCore::StyleRareNonInheritedData *)result, v11);
        result = WTF::fastFree(v15, v16);
        v10 = *(_BYTE **)(v9 + 40);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  v12 = v10 + 136;
  if (v10 + 136 != (_BYTE *)a2)
  {
    if (v10[140] == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v12);
    }
    v13 = *((unsigned __int8 *)a2 + 4);
    v10[140] = v13;
    v10[141] = *((_BYTE *)a2 + 5);
    if (v13 - 2 >= 9)
    {
      if (v13 > 0xD)
        goto LABEL_20;
      if (((1 << v13) & 0x3003) != 0)
      {
        *v12 = 0;
        goto LABEL_20;
      }
      if (v13 != 11)
        goto LABEL_20;
      v17 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v14 = *((unsigned __int8 *)a2 + 6);
      v10[142] = v14;
      if (v14)
      {
        *v12 = *(_DWORD *)a2;
LABEL_20:
        *((_BYTE *)a2 + 4) = 0;
        return result;
      }
      v17 = *(_DWORD *)a2;
    }
    *v12 = v17;
    goto LABEL_20;
  }
  return result;
}

uint64_t WebCore::RenderStyle::scrollPadding(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 40) + 160;
}

uint64_t WebCore::RenderStyle::setScrollPaddingTop(uint64_t result, WebCore::Length *a2)
{
  WTF **v3;
  unsigned __int8 *v4;
  int v5;
  float v6;
  float v7;
  _DWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  unsigned int v13;
  int v14;
  WTF *v15;
  void *v16;
  int v17;

  v3 = (WTF **)(result + 8);
  v4 = *(unsigned __int8 **)(*(_QWORD *)(result + 8) + 40);
  v5 = v4[164];
  if (v5 == *((unsigned __int8 *)a2 + 4) && (v4[165] != 0) == (*((_BYTE *)a2 + 5) != 0))
  {
    if (v5 == 13)
      return result;
    if (v5 == 11)
    {
      result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v4 + 160), a2);
      if ((result & 1) != 0)
        return result;
    }
    else
    {
      v6 = *((float *)v4 + 40);
      if (!v4[166])
        v6 = (float)SLODWORD(v6);
      v7 = *(float *)a2;
      if (!*((_BYTE *)a2 + 6))
        v7 = (float)*(int *)a2;
      if (v6 == v7)
        return result;
    }
  }
  result = (uint64_t)WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
  v8 = *(_DWORD **)(result + 40);
  if (*v8 == 1)
  {
    v10 = *(_BYTE **)(result + 40);
  }
  else
  {
    v9 = result;
    v10 = (_BYTE *)WTF::fastMalloc((WTF *)0x288);
    WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData((uint64_t)v10, (uint64_t)v8);
    result = *(_QWORD *)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v10;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData((WebCore::StyleRareNonInheritedData *)result, v11);
        result = WTF::fastFree(v15, v16);
        v10 = *(_BYTE **)(v9 + 40);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  v12 = v10 + 160;
  if (v10 + 160 != (_BYTE *)a2)
  {
    if (v10[164] == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v12);
    }
    v13 = *((unsigned __int8 *)a2 + 4);
    v10[164] = v13;
    v10[165] = *((_BYTE *)a2 + 5);
    if (v13 - 2 >= 9)
    {
      if (v13 > 0xD)
        goto LABEL_20;
      if (((1 << v13) & 0x3003) != 0)
      {
        *v12 = 0;
        goto LABEL_20;
      }
      if (v13 != 11)
        goto LABEL_20;
      v17 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v14 = *((unsigned __int8 *)a2 + 6);
      v10[166] = v14;
      if (v14)
      {
        *v12 = *(_DWORD *)a2;
LABEL_20:
        *((_BYTE *)a2 + 4) = 0;
        return result;
      }
      v17 = *(_DWORD *)a2;
    }
    *v12 = v17;
    goto LABEL_20;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setScrollPaddingBottom(uint64_t result, WebCore::Length *a2)
{
  WTF **v3;
  unsigned __int8 *v4;
  int v5;
  float v6;
  float v7;
  _DWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  unsigned int v13;
  int v14;
  WTF *v15;
  void *v16;
  int v17;

  v3 = (WTF **)(result + 8);
  v4 = *(unsigned __int8 **)(*(_QWORD *)(result + 8) + 40);
  v5 = v4[180];
  if (v5 == *((unsigned __int8 *)a2 + 4) && (v4[181] != 0) == (*((_BYTE *)a2 + 5) != 0))
  {
    if (v5 == 13)
      return result;
    if (v5 == 11)
    {
      result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v4 + 176), a2);
      if ((result & 1) != 0)
        return result;
    }
    else
    {
      v6 = *((float *)v4 + 44);
      if (!v4[182])
        v6 = (float)SLODWORD(v6);
      v7 = *(float *)a2;
      if (!*((_BYTE *)a2 + 6))
        v7 = (float)*(int *)a2;
      if (v6 == v7)
        return result;
    }
  }
  result = (uint64_t)WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
  v8 = *(_DWORD **)(result + 40);
  if (*v8 == 1)
  {
    v10 = *(_BYTE **)(result + 40);
  }
  else
  {
    v9 = result;
    v10 = (_BYTE *)WTF::fastMalloc((WTF *)0x288);
    WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData((uint64_t)v10, (uint64_t)v8);
    result = *(_QWORD *)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v10;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData((WebCore::StyleRareNonInheritedData *)result, v11);
        result = WTF::fastFree(v15, v16);
        v10 = *(_BYTE **)(v9 + 40);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  v12 = v10 + 176;
  if (v10 + 176 != (_BYTE *)a2)
  {
    if (v10[180] == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v12);
    }
    v13 = *((unsigned __int8 *)a2 + 4);
    v10[180] = v13;
    v10[181] = *((_BYTE *)a2 + 5);
    if (v13 - 2 >= 9)
    {
      if (v13 > 0xD)
        goto LABEL_20;
      if (((1 << v13) & 0x3003) != 0)
      {
        *v12 = 0;
        goto LABEL_20;
      }
      if (v13 != 11)
        goto LABEL_20;
      v17 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v14 = *((unsigned __int8 *)a2 + 6);
      v10[182] = v14;
      if (v14)
      {
        *v12 = *(_DWORD *)a2;
LABEL_20:
        *((_BYTE *)a2 + 4) = 0;
        return result;
      }
      v17 = *(_DWORD *)a2;
    }
    *v12 = v17;
    goto LABEL_20;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setScrollPaddingLeft(uint64_t result, WebCore::Length *a2)
{
  WTF **v3;
  unsigned __int8 *v4;
  int v5;
  float v6;
  float v7;
  _DWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  unsigned int v13;
  int v14;
  WTF *v15;
  void *v16;
  int v17;

  v3 = (WTF **)(result + 8);
  v4 = *(unsigned __int8 **)(*(_QWORD *)(result + 8) + 40);
  v5 = v4[188];
  if (v5 == *((unsigned __int8 *)a2 + 4) && (v4[189] != 0) == (*((_BYTE *)a2 + 5) != 0))
  {
    if (v5 == 13)
      return result;
    if (v5 == 11)
    {
      result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v4 + 184), a2);
      if ((result & 1) != 0)
        return result;
    }
    else
    {
      v6 = *((float *)v4 + 46);
      if (!v4[190])
        v6 = (float)SLODWORD(v6);
      v7 = *(float *)a2;
      if (!*((_BYTE *)a2 + 6))
        v7 = (float)*(int *)a2;
      if (v6 == v7)
        return result;
    }
  }
  result = (uint64_t)WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
  v8 = *(_DWORD **)(result + 40);
  if (*v8 == 1)
  {
    v10 = *(_BYTE **)(result + 40);
  }
  else
  {
    v9 = result;
    v10 = (_BYTE *)WTF::fastMalloc((WTF *)0x288);
    WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData((uint64_t)v10, (uint64_t)v8);
    result = *(_QWORD *)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v10;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData((WebCore::StyleRareNonInheritedData *)result, v11);
        result = WTF::fastFree(v15, v16);
        v10 = *(_BYTE **)(v9 + 40);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  v12 = v10 + 184;
  if (v10 + 184 != (_BYTE *)a2)
  {
    if (v10[188] == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v12);
    }
    v13 = *((unsigned __int8 *)a2 + 4);
    v10[188] = v13;
    v10[189] = *((_BYTE *)a2 + 5);
    if (v13 - 2 >= 9)
    {
      if (v13 > 0xD)
        goto LABEL_20;
      if (((1 << v13) & 0x3003) != 0)
      {
        *v12 = 0;
        goto LABEL_20;
      }
      if (v13 != 11)
        goto LABEL_20;
      v17 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v14 = *((unsigned __int8 *)a2 + 6);
      v10[190] = v14;
      if (v14)
      {
        *v12 = *(_DWORD *)a2;
LABEL_20:
        *((_BYTE *)a2 + 4) = 0;
        return result;
      }
      v17 = *(_DWORD *)a2;
    }
    *v12 = v17;
    goto LABEL_20;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setScrollPaddingRight(uint64_t result, WebCore::Length *a2)
{
  WTF **v3;
  unsigned __int8 *v4;
  int v5;
  float v6;
  float v7;
  _DWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  WTF::StringImpl *v11;
  _DWORD *v12;
  unsigned int v13;
  int v14;
  WTF *v15;
  void *v16;
  int v17;

  v3 = (WTF **)(result + 8);
  v4 = *(unsigned __int8 **)(*(_QWORD *)(result + 8) + 40);
  v5 = v4[172];
  if (v5 == *((unsigned __int8 *)a2 + 4) && (v4[173] != 0) == (*((_BYTE *)a2 + 5) != 0))
  {
    if (v5 == 13)
      return result;
    if (v5 == 11)
    {
      result = WebCore::Length::isCalculatedEqual((WebCore::Length *)(v4 + 168), a2);
      if ((result & 1) != 0)
        return result;
    }
    else
    {
      v6 = *((float *)v4 + 42);
      if (!v4[174])
        v6 = (float)SLODWORD(v6);
      v7 = *(float *)a2;
      if (!*((_BYTE *)a2 + 6))
        v7 = (float)*(int *)a2;
      if (v6 == v7)
        return result;
    }
  }
  result = (uint64_t)WTF::DataRef<WebCore::StyleNonInheritedData>::access(v3);
  v8 = *(_DWORD **)(result + 40);
  if (*v8 == 1)
  {
    v10 = *(_BYTE **)(result + 40);
  }
  else
  {
    v9 = result;
    v10 = (_BYTE *)WTF::fastMalloc((WTF *)0x288);
    WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData((uint64_t)v10, (uint64_t)v8);
    result = *(_QWORD *)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v10;
    if (result)
    {
      if (*(_DWORD *)result == 1)
      {
        WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData((WebCore::StyleRareNonInheritedData *)result, v11);
        result = WTF::fastFree(v15, v16);
        v10 = *(_BYTE **)(v9 + 40);
      }
      else
      {
        --*(_DWORD *)result;
      }
    }
  }
  v12 = v10 + 168;
  if (v10 + 168 != (_BYTE *)a2)
  {
    if (v10[172] == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      result = (uint64_t)WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v12);
    }
    v13 = *((unsigned __int8 *)a2 + 4);
    v10[172] = v13;
    v10[173] = *((_BYTE *)a2 + 5);
    if (v13 - 2 >= 9)
    {
      if (v13 > 0xD)
        goto LABEL_20;
      if (((1 << v13) & 0x3003) != 0)
      {
        *v12 = 0;
        goto LABEL_20;
      }
      if (v13 != 11)
        goto LABEL_20;
      v17 = *(_DWORD *)a2;
      *(_DWORD *)a2 = 0;
    }
    else
    {
      v14 = *((unsigned __int8 *)a2 + 6);
      v10[174] = v14;
      if (v14)
      {
        *v12 = *(_DWORD *)a2;
LABEL_20:
        *((_BYTE *)a2 + 4) = 0;
        return result;
      }
      v17 = *(_DWORD *)a2;
    }
    *v12 = v17;
    goto LABEL_20;
  }
  return result;
}

uint64_t WebCore::RenderStyle::scrollSnapAlign(WebCore::RenderStyle *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 40) + 465;
}

uint64_t WebCore::RenderStyle::scrollSnapStop(WebCore::RenderStyle *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 467);
}

uint64_t WebCore::RenderStyle::scrollbarGutter(WebCore::RenderStyle *this)
{
  return *(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 584);
}

uint64_t WebCore::RenderStyle::scrollbarWidth(WebCore::RenderStyle *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*((_QWORD *)this + 1) + 40) + 586);
}

uint64_t WebCore::RenderStyle::setScrollSnapType(uint64_t a1, __int16 a2)
{
  uint64_t result;
  uint64_t v4;
  WTF *v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::StyleRareNonInheritedData *v10;
  WTF *v11;
  void *v12;

  v4 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (__PAIR64__(*(unsigned __int8 *)(*(_QWORD *)(v4 + 40) + 464), *(unsigned __int8 *)(*(_QWORD *)(v4 + 40) + 463)) != __PAIR64__(HIBYTE(a2), a2))
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = (_DWORD *)*((_QWORD *)v5 + 5);
    if (*v6 == 1)
    {
      result = *((_QWORD *)v5 + 5);
    }
    else
    {
      v7 = v5;
      v8 = WTF::fastMalloc((WTF *)0x288);
      result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v8, (uint64_t)v6);
      v10 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = result;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v10, v9);
          WTF::fastFree(v11, v12);
          result = *((_QWORD *)v7 + 5);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    *(_WORD *)(result + 463) = a2;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setScrollSnapAlign(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  WTF *v9;
  _DWORD *v10;
  WTF *v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WebCore::StyleRareNonInheritedData *v14;
  WTF *v15;
  void *v16;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  v4 = *(_QWORD *)(v3 + 40);
  v5 = *(unsigned __int8 *)(v4 + 465);
  v6 = *(unsigned __int8 *)(v4 + 466);
  if (v5 != *a2 || v6 != a2[1])
  {
    v9 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v10 = (_DWORD *)*((_QWORD *)v9 + 5);
    if (*v10 == 1)
    {
      result = *((_QWORD *)v9 + 5);
    }
    else
    {
      v11 = v9;
      v12 = WTF::fastMalloc((WTF *)0x288);
      result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v12, (uint64_t)v10);
      v14 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v11 + 5);
      *((_QWORD *)v11 + 5) = result;
      if (v14)
      {
        if (*(_DWORD *)v14 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v14, v13);
          WTF::fastFree(v15, v16);
          result = *((_QWORD *)v11 + 5);
        }
        else
        {
          --*(_DWORD *)v14;
        }
      }
    }
    *(_WORD *)(result + 465) = *(_WORD *)a2;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setScrollSnapStop(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  WTF *v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::StyleRareNonInheritedData *v10;
  WTF *v11;
  void *v12;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if ((((*(_BYTE *)(*(_QWORD *)(v3 + 40) + 467) == 0) ^ a2) & 1) == 0)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = (_DWORD *)*((_QWORD *)v5 + 5);
    if (*v6 == 1)
    {
      result = *((_QWORD *)v5 + 5);
    }
    else
    {
      v7 = v5;
      v8 = WTF::fastMalloc((WTF *)0x288);
      result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v8, (uint64_t)v6);
      v10 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = result;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v10, v9);
          WTF::fastFree(v11, v12);
          result = *((_QWORD *)v7 + 5);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    *(_BYTE *)(result + 467) = v4;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setScrollbarGutter(uint64_t a1, __int16 a2)
{
  uint64_t result;
  uint64_t v4;
  WTF *v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::StyleRareNonInheritedData *v10;
  WTF *v11;
  void *v12;

  v4 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (__PAIR64__(*(unsigned __int8 *)(*(_QWORD *)(v4 + 40) + 585), *(unsigned __int8 *)(*(_QWORD *)(v4 + 40) + 584)) != __PAIR64__(HIBYTE(a2), a2))
  {
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = (_DWORD *)*((_QWORD *)v5 + 5);
    if (*v6 == 1)
    {
      result = *((_QWORD *)v5 + 5);
    }
    else
    {
      v7 = v5;
      v8 = WTF::fastMalloc((WTF *)0x288);
      result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v8, (uint64_t)v6);
      v10 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = result;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v10, v9);
          WTF::fastFree(v11, v12);
          result = *((_QWORD *)v7 + 5);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    *(_WORD *)(result + 584) = a2;
  }
  return result;
}

uint64_t WebCore::RenderStyle::setScrollbarWidth(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v3;
  char v4;
  WTF *v5;
  _DWORD *v6;
  WTF *v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WebCore::StyleRareNonInheritedData *v10;
  WTF *v11;
  void *v12;

  v3 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (*(unsigned __int8 *)(*(_QWORD *)(v3 + 40) + 586) != a2)
  {
    v4 = a2;
    v5 = WTF::DataRef<WebCore::StyleNonInheritedData>::access((WTF **)result);
    v6 = (_DWORD *)*((_QWORD *)v5 + 5);
    if (*v6 == 1)
    {
      result = *((_QWORD *)v5 + 5);
    }
    else
    {
      v7 = v5;
      v8 = WTF::fastMalloc((WTF *)0x288);
      result = WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(v8, (uint64_t)v6);
      v10 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v7 + 5);
      *((_QWORD *)v7 + 5) = result;
      if (v10)
      {
        if (*(_DWORD *)v10 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v10, v9);
          WTF::fastFree(v11, v12);
          result = *((_QWORD *)v7 + 5);
        }
        else
        {
          --*(_DWORD *)v10;
        }
      }
    }
    *(_BYTE *)(result + 586) = v4;
  }
  return result;
}

float WebCore::RenderStyle::outlineWidth(WebCore::RenderStyle *this)
{
  uint64_t v1;
  float result;

  v1 = *(_QWORD *)(*((_QWORD *)this + 1) + 16);
  result = 0.0;
  if ((*(_BYTE *)(v1 + 52) & 0x1F) != 0x10 && (*(_BYTE *)(v1 + 52) & 0xF) != 0)
  {
    result = *(float *)(v1 + 48);
    if ((*(_BYTE *)(v1 + 52) & 0x10) != 0 && result < 3.0)
      return 3.0;
  }
  return result;
}

BOOL WebCore::RenderStyle::shouldPlaceVerticalScrollbarOnLeft(WebCore::RenderStyle *this)
{
  unsigned int v1;

  v1 = *((_DWORD *)this + 11);
  return (*((_BYTE *)this + 43) & 4) != 0 && ((v1 >> 13) & 6) - 2 > 3
      || ((((unsigned __int16)v1 >> 13) - 3) & 0xFFFFFFFD) == 0;
}

char *WebCore::RenderStyle::paintTypesForPaintOrder(int a1)
{
  if ((a1 - 2) > 4)
    return &WebCore::RenderStyle::paintTypesForPaintOrder(WebCore::PaintOrder)::fill;
  else
    return (char *)*(&off_1E3441AB0 + (char)(a1 - 2));
}

unsigned int *WebCore::RenderStyle::computedStrokeColor@<X0>(WebCore::RenderStyle *this@<X0>, uint64_t *a2@<X8>)
{
  int v4;
  unsigned int *result;
  float v6;
  void *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  if ((*(_DWORD *)(*((_QWORD *)this + 3) + 236) & 0x80000) != 0)
    v4 = 235;
  else
    v4 = 344;
  result = (unsigned int *)WebCore::RenderStyle::colorResolvingCurrentColor(this, v4, 0, (WebCore::Color *)&v13);
  if ((*((_DWORD *)this + 11) & 0xC00) != 0x800 || (*(_BYTE *)(*((_QWORD *)this + 3) + 239) & 2) != 0)
  {
    *a2 = v13;
  }
  else
  {
    WebCore::RenderStyle::colorResolvingCurrentColor(this, v4, 1, (WebCore::Color *)&v12);
    if ((v13 & 0x8000000000000) != 0)
      v6 = *(float *)((v13 & 0xFFFFFFFFFFFFLL) + 0x10);
    else
      v6 = (float)v13 / 255.0;
    result = (unsigned int *)WebCore::Color::colorWithAlpha((uint64_t)&v12, v6, a2);
    if ((v12 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
      do
      {
        v10 = __ldaxr(result);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, result));
      if (!v11)
      {
        atomic_store(1u, result);
        result = (unsigned int *)WTF::fastFree((WTF *)result, v7);
      }
    }
    if ((v13 & 0x8000000000000) != 0)
    {
      result = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
      do
      {
        v8 = __ldaxr(result);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, result));
      if (!v9)
      {
        atomic_store(1u, result);
        return (unsigned int *)WTF::fastFree((WTF *)result, v7);
      }
    }
  }
  return result;
}

uint64_t WebCore::RenderStyle::usedUserSelect(WebCore::RenderStyle *this)
{
  uint64_t v1;
  unsigned int v3;
  uint64_t result;
  int v5;
  unsigned int v6;

  v1 = *((_QWORD *)this + 3);
  if ((*(_BYTE *)(v1 + 239) & 1) != 0)
    return 0;
  v3 = *(_DWORD *)(v1 + 228);
  result = (v3 >> 15) & 3;
  if ((v3 & 0x30) != 0)
  {
    v5 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 1) + 32) + 148) & 0xC00000;
    if (result <= 1)
      v6 = 1;
    else
      v6 = (v3 >> 15) & 3;
    if (v5 == 0x800000)
      return result;
    else
      return v6;
  }
  return result;
}

WebCore::Length *WebCore::ViewTimelineInsets::ViewTimelineInsets(WebCore::Length *this, uint64_t a2)
{
  unsigned int v4;
  int v5;
  int *v6;
  unsigned int v7;
  int v8;

  *(_BYTE *)this = 0;
  *((_BYTE *)this + 8) = 0;
  if (*(_BYTE *)(a2 + 8))
  {
    *(_DWORD *)this = 0;
    *(_WORD *)((char *)this + 5) = 0;
    v4 = *(unsigned __int8 *)(a2 + 4);
    *((_BYTE *)this + 4) = v4;
    *((_BYTE *)this + 5) = *(_BYTE *)(a2 + 5);
    if (v4 <= 0xD)
    {
      v5 = 1 << v4;
      if ((v5 & 0x7FC) != 0)
      {
        *((_BYTE *)this + 6) = *(_BYTE *)(a2 + 6);
        *(_DWORD *)this = *(_DWORD *)a2;
      }
      else if ((v5 & 0x3003) != 0)
      {
        *(_DWORD *)this = 0;
      }
      else
      {
        *(_DWORD *)this = *(_DWORD *)a2;
        WebCore::Length::ref((int *)this);
      }
    }
    *((_BYTE *)this + 8) = 1;
  }
  *((_BYTE *)this + 12) = 0;
  v6 = (int *)((char *)this + 12);
  *((_BYTE *)this + 20) = 0;
  if (*(_BYTE *)(a2 + 20))
  {
    *((_DWORD *)this + 3) = 0;
    *(_WORD *)((char *)this + 17) = 0;
    v7 = *(unsigned __int8 *)(a2 + 16);
    *((_BYTE *)this + 16) = v7;
    *((_BYTE *)this + 17) = *(_BYTE *)(a2 + 17);
    if (v7 <= 0xD)
    {
      v8 = 1 << v7;
      if ((v8 & 0x7FC) != 0)
      {
        *((_BYTE *)this + 18) = *(_BYTE *)(a2 + 18);
        *v6 = *(_DWORD *)(a2 + 12);
      }
      else if ((v8 & 0x3003) != 0)
      {
        *v6 = 0;
      }
      else
      {
        *v6 = *(_DWORD *)(a2 + 12);
        WebCore::Length::ref(v6);
      }
    }
    *((_BYTE *)this + 20) = 1;
  }
  return this;
}

BOOL WebCore::alwaysPageBreak(unsigned int a1)
{
  return a1 > 4;
}

uint64_t WebCore::StyleTextData::create(WebCore::StyleTextData *this)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = WTF::fastMalloc((WTF *)0xC);
  *(_DWORD *)v2 = 1;
  result = WebCore::SVGLengthValue::SVGLengthValue((uint64_t)&v4, 1, 2, 0.0);
  *(_QWORD *)(v2 + 4) = v4;
  *(_QWORD *)this = v2;
  return result;
}

uint64_t WebCore::StyleStopData::create(WebCore::StyleStopData *this)
{
  _QWORD *v2;
  uint64_t result;

  v2 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
  *v2 = 0x3F80000000000001;
  result = WebCore::StyleColor::StyleColor((uint64_t)(v2 + 1), 0xFF000000);
  *(_QWORD *)this = v2;
  return result;
}

unsigned int **WTF::Ref<WebCore::StyleStopData,WTF::RawPtrTraits<WebCore::StyleStopData>,WTF::DefaultRefDerefTraits<WebCore::StyleStopData>>::~Ref(unsigned int **a1, void *a2)
{
  unsigned int *v3;
  uint64_t v5;
  char v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*v3 == 1)
    {
      v5 = v3[4];
      if ((_DWORD)v5 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v5])(&v6, v3 + 2);
      v3[4] = -1;
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*v3;
    }
  }
  return a1;
}

unsigned int **WTF::Ref<WebCore::StyleMiscData,WTF::RawPtrTraits<WebCore::StyleMiscData>,WTF::DefaultRefDerefTraits<WebCore::StyleMiscData>>::~Ref(unsigned int **a1, void *a2)
{
  unsigned int *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*v3 == 1)
    {
      v5 = v3[8];
      if ((_DWORD)v5 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v5])(&v7, v3 + 6);
      v3[8] = -1;
      v6 = v3[4];
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v6])(&v8, v3 + 2);
      v3[4] = -1;
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*v3;
    }
  }
  return a1;
}

WebCore::StyleLayoutData **WTF::Ref<WebCore::StyleLayoutData,WTF::RawPtrTraits<WebCore::StyleLayoutData>,WTF::DefaultRefDerefTraits<WebCore::StyleLayoutData>>::~Ref(WebCore::StyleLayoutData **a1)
{
  WebCore::StyleLayoutData *v2;
  WTF *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      WebCore::StyleLayoutData::~StyleLayoutData(v2);
      WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return a1;
}

uint64_t WebCore::SVGRenderStyle::copy@<X0>(WebCore::SVGRenderStyle *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;

  result = WTF::fastMalloc((WTF *)0x48);
  *(_DWORD *)result = 1;
  *(_DWORD *)(result + 4) = *((_DWORD *)this + 1);
  *(_DWORD *)(result + 8) = *((_DWORD *)this + 2);
  v5 = (_DWORD *)*((_QWORD *)this + 2);
  v6 = (_DWORD *)*((_QWORD *)this + 3);
  ++*v5;
  ++*v6;
  *(_QWORD *)(result + 16) = v5;
  *(_QWORD *)(result + 24) = v6;
  v7 = (_DWORD *)*((_QWORD *)this + 4);
  v8 = (_DWORD *)*((_QWORD *)this + 5);
  ++*v7;
  ++*v8;
  *(_QWORD *)(result + 32) = v7;
  *(_QWORD *)(result + 40) = v8;
  v9 = (_DWORD *)*((_QWORD *)this + 6);
  v10 = (_DWORD *)*((_QWORD *)this + 7);
  ++*v9;
  ++*v10;
  *(_QWORD *)(result + 48) = v9;
  *(_QWORD *)(result + 56) = v10;
  v11 = (_DWORD *)*((_QWORD *)this + 8);
  ++*v11;
  *(_QWORD *)(result + 64) = v11;
  *a2 = result;
  return result;
}

void WebCore::SVGRenderStyle::~SVGRenderStyle(WebCore::SVGRenderStyle *this, void *a2)
{
  WebCore::StyleLayoutData *v3;
  unsigned int *v4;
  unsigned int *v5;
  WTF *v6;
  WTF *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF *v13;
  void *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  WTF *v18;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;
  uint64_t v21;
  uint64_t v22;
  WTF::StringImpl *v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;

  v3 = (WebCore::StyleLayoutData *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::StyleLayoutData::~StyleLayoutData(v3);
      WTF::fastFree(v13, v14);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  v4 = (unsigned int *)*((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  if (v4)
  {
    if (*v4 == 1)
    {
      v10 = v4[8];
      if ((_DWORD)v10 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v10])(&v27, v4 + 6);
      v4[8] = -1;
      v11 = v4[4];
      if ((_DWORD)v11 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v11])(&v28, v4 + 2);
      v4[4] = -1;
      WTF::fastFree((WTF *)v4, a2);
    }
    else
    {
      --*v4;
    }
  }
  v5 = (unsigned int *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v5)
  {
    if (*v5 == 1)
    {
      v12 = v5[4];
      if ((_DWORD)v12 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v12])(&v29, v5 + 2);
      v5[4] = -1;
      WTF::fastFree((WTF *)v5, a2);
    }
    else
    {
      --*v5;
    }
  }
  v6 = (WTF *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
    {
      v15 = (WTF::StringImpl *)*((_QWORD *)v6 + 3);
      *((_QWORD *)v6 + 3) = 0;
      if (v15)
      {
        if (*(_DWORD *)v15 == 2)
          WTF::StringImpl::destroy(v15, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v15 -= 2;
      }
      v16 = (WTF::StringImpl *)*((_QWORD *)v6 + 2);
      *((_QWORD *)v6 + 2) = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v16 -= 2;
      }
      v17 = (WTF::StringImpl *)*((_QWORD *)v6 + 1);
      *((_QWORD *)v6 + 1) = 0;
      if (v17)
      {
        if (*(_DWORD *)v17 == 2)
          WTF::StringImpl::destroy(v17, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v17 -= 2;
      }
      WTF::fastFree(v6, a2);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  v7 = (WTF *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree(v7, a2);
    else
      --*(_DWORD *)v7;
  }
  v8 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      v18 = *(WTF **)(v8 + 64);
      if (v18)
      {
        *(_QWORD *)(v8 + 64) = 0;
        *(_DWORD *)(v8 + 72) = 0;
        WTF::fastFree(v18, a2);
      }
      if (*(_BYTE *)(v8 + 60) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v8 + 56));
      }
      v19 = *(WTF::StringImpl **)(v8 + 48);
      *(_QWORD *)(v8 + 48) = 0;
      if (v19)
      {
        if (*(_DWORD *)v19 == 2)
          WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v19 -= 2;
      }
      v20 = *(WTF::StringImpl **)(v8 + 40);
      *(_QWORD *)(v8 + 40) = 0;
      if (v20)
      {
        if (*(_DWORD *)v20 == 2)
          WTF::StringImpl::destroy(v20, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v20 -= 2;
      }
      v21 = *(unsigned int *)(v8 + 32);
      if ((_DWORD)v21 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v21])(&v30, v8 + 24);
      *(_DWORD *)(v8 + 32) = -1;
      v22 = *(unsigned int *)(v8 + 16);
      if ((_DWORD)v22 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v22])(&v31, v8 + 8);
      *(_DWORD *)(v8 + 16) = -1;
      WTF::fastFree((WTF *)v8, a2);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
  v9 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v9)
  {
    if (*(_DWORD *)v9 == 1)
    {
      v23 = *(WTF::StringImpl **)(v9 + 48);
      *(_QWORD *)(v9 + 48) = 0;
      if (v23)
      {
        if (*(_DWORD *)v23 == 2)
          WTF::StringImpl::destroy(v23, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v23 -= 2;
      }
      v24 = *(WTF::StringImpl **)(v9 + 40);
      *(_QWORD *)(v9 + 40) = 0;
      if (v24)
      {
        if (*(_DWORD *)v24 == 2)
          WTF::StringImpl::destroy(v24, (WTF::StringImpl *)a2);
        else
          *(_DWORD *)v24 -= 2;
      }
      v25 = *(unsigned int *)(v9 + 32);
      if ((_DWORD)v25 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v25])(&v32, v9 + 24);
      *(_DWORD *)(v9 + 32) = -1;
      v26 = *(unsigned int *)(v9 + 16);
      if ((_DWORD)v26 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v26])(&v33, v9 + 8);
      *(_DWORD *)(v9 + 16) = -1;
      WTF::fastFree((WTF *)v9, a2);
    }
    else
    {
      --*(_DWORD *)v9;
    }
  }
}

uint64_t WebCore::SVGRenderStyle::conservativelyCollectChangedAnimatableProperties(WebCore::SVGRenderStyle const&,WebCore::CSSPropertiesBitSet &)const::$_0::operator()<WebCore::StyleFillData const,WebCore::StyleFillData const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  const WTF::StringImpl *v7;
  const WTF::StringImpl *v8;

  if (*(float *)(a2 + 4) != *(float *)(a3 + 4))
    *(_QWORD *)(*(_QWORD *)a1 + 8) |= 0x8000000000000uLL;
  result = WebCore::StyleColor::operator==(a2 + 8, a3 + 8);
  if (!(_DWORD)result
    || (result = WebCore::StyleColor::operator==(a2 + 24, a3 + 24), !(_DWORD)result)
    || (result = WTF::equal(*(WTF **)(a2 + 40), *(const WTF::StringImpl **)(a3 + 40), v7), !(_DWORD)result)
    || (result = WTF::equal(*(WTF **)(a2 + 48), *(const WTF::StringImpl **)(a3 + 48), v8), !(_DWORD)result)
    || *(unsigned __int8 *)(a2 + 56) != *(unsigned __int8 *)(a3 + 56)
    || *(unsigned __int8 *)(a2 + 57) != *(unsigned __int8 *)(a3 + 57))
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8) |= 0x4000000000000uLL;
  }
  return result;
}

uint64_t WebCore::SVGRenderStyle::conservativelyCollectChangedAnimatableProperties(WebCore::SVGRenderStyle const&,WebCore::CSSPropertiesBitSet &)const::$_1::operator()<WebCore::StyleStrokeData const,WebCore::StyleStrokeData const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  float v7;
  float v8;
  unint64_t v9;
  uint64_t result;
  const WTF::StringImpl *v11;
  const WTF::StringImpl *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (*(float *)(a2 + 4) != *(float *)(a3 + 4))
    *(_QWORD *)(*(_QWORD *)a1 + 24) |= 0x2000000000000uLL;
  v6 = *(unsigned __int8 *)(a2 + 60);
  if (v6 != *(unsigned __int8 *)(a3 + 60) || (*(_BYTE *)(a2 + 61) != 0) != (*(_BYTE *)(a3 + 61) != 0))
  {
LABEL_12:
    *(_QWORD *)(*(_QWORD *)a1 + 24) |= 0x200000000000uLL;
    goto LABEL_13;
  }
  if (v6 != 13)
  {
    if (v6 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(a2 + 56), (const WebCore::Length *)(a3 + 56)) & 1) != 0)
        goto LABEL_13;
    }
    else
    {
      v7 = *(float *)(a2 + 56);
      if (!*(_BYTE *)(a2 + 62))
        v7 = (float)SLODWORD(v7);
      v8 = *(float *)(a3 + 56);
      if (!*(_BYTE *)(a3 + 62))
        v8 = (float)SLODWORD(v8);
      if (v7 == v8)
        goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_13:
  v9 = *(unsigned int *)(a2 + 76);
  if ((_DWORD)v9 != *(_DWORD *)(a3 + 76))
    goto LABEL_30;
  if (!(_DWORD)v9)
    goto LABEL_15;
  v13 = *(_QWORD *)(a2 + 64);
  v14 = *(_QWORD *)(a3 + 64);
  if (*(float *)v13 != *(float *)v14
    || (unsigned __int16)*(_DWORD *)(v13 + 4) != (unsigned __int16)*(_DWORD *)(v14 + 4))
  {
LABEL_30:
    *(_QWORD *)(*(_QWORD *)a1 + 24) |= 0x100000000000uLL;
    goto LABEL_15;
  }
  v15 = 0;
  v16 = v13 + 8;
  v17 = v14 + 8;
  while (v9 - 1 != v15)
  {
    v18 = v16 + 8 * v15;
    v19 = v17 + 8 * v15++;
    if (*(float *)v18 != *(float *)v19
      || (unsigned __int16)*(_DWORD *)(v18 + 4) != (unsigned __int16)*(_DWORD *)(v19 + 4))
    {
      if (v15 >= v9)
        break;
      goto LABEL_30;
    }
  }
LABEL_15:
  result = WebCore::StyleColor::operator==(a2 + 8, a3 + 8);
  if (!(_DWORD)result
    || (result = WebCore::StyleColor::operator==(a2 + 24, a3 + 24), !(_DWORD)result)
    || (result = WTF::equal(*(WTF **)(a2 + 40), *(const WTF::StringImpl **)(a3 + 40), v11), !(_DWORD)result)
    || (result = WTF::equal(*(WTF **)(a2 + 48), *(const WTF::StringImpl **)(a3 + 48), v12), !(_DWORD)result)
    || *(unsigned __int8 *)(a2 + 80) != *(unsigned __int8 *)(a3 + 80)
    || *(unsigned __int8 *)(a2 + 81) != *(unsigned __int8 *)(a3 + 81))
  {
    *(_QWORD *)(*(_QWORD *)a1 + 24) |= 0x40000000000uLL;
  }
  return result;
}

uint64_t WebCore::SVGRenderStyle::conservativelyCollectChangedAnimatableProperties(WebCore::SVGRenderStyle const&,WebCore::CSSPropertiesBitSet &)const::$_3::operator()<WebCore::StyleStopData const,WebCore::StyleStopData const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (*(float *)(a2 + 4) != *(float *)(a3 + 4))
    *(_QWORD *)(*(_QWORD *)a1 + 24) |= 0x20000000000uLL;
  result = WebCore::StyleColor::operator==(a2 + 8, a3 + 8);
  if ((result & 1) == 0)
    *(_QWORD *)(*(_QWORD *)a1 + 24) |= 0x10000000000uLL;
  return result;
}

uint64_t WebCore::SVGRenderStyle::conservativelyCollectChangedAnimatableProperties(WebCore::SVGRenderStyle const&,WebCore::CSSPropertiesBitSet &)const::$_4::operator()<WebCore::StyleMiscData const,WebCore::StyleMiscData const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (*(float *)(a2 + 4) != *(float *)(a3 + 4))
    *(_QWORD *)(*(_QWORD *)a1 + 8) |= 0x2000000000000000uLL;
  if ((WebCore::StyleColor::operator==(a2 + 8, a3 + 8) & 1) == 0)
    *(_QWORD *)(*(_QWORD *)a1 + 8) |= 0x1000000000000000uLL;
  result = WebCore::StyleColor::operator==(a2 + 24, a3 + 24);
  if ((result & 1) == 0)
    *(_QWORD *)(*(_QWORD *)a1 + 16) |= 0x1000000uLL;
  if (*(float *)(a2 + 40) != *(float *)(a3 + 40)
    || (unsigned __int16)*(_DWORD *)(a2 + 44) != (unsigned __int16)*(_DWORD *)(a3 + 44))
  {
    *(_QWORD *)(*(_QWORD *)a1 + 8) |= 0x10uLL;
  }
  return result;
}

uint64_t WebCore::SVGRenderStyle::conservativelyCollectChangedAnimatableProperties(WebCore::SVGRenderStyle const&,WebCore::CSSPropertiesBitSet &)const::$_5::operator()<WebCore::StyleLayoutData const,WebCore::StyleLayoutData const>(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  float v4;
  float v5;
  int v6;
  float v7;
  float v8;
  int v9;
  float v10;
  float v11;
  int v12;
  float v13;
  float v14;
  int v15;
  float v16;
  float v17;
  int v18;
  float v19;
  float v20;
  int v21;
  float v22;
  float v23;
  char isCalculatedEqual;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v3 = *(unsigned __int8 *)(a2 + 8);
  if (v3 != *(unsigned __int8 *)(a3 + 8) || (*(_BYTE *)(a2 + 9) != 0) != (*(_BYTE *)(a3 + 9) != 0))
    goto LABEL_10;
  if (v3 == 13)
    goto LABEL_11;
  if (v3 != 11)
  {
    v4 = *(float *)(a2 + 4);
    if (!*(_BYTE *)(a2 + 10))
      v4 = (float)SLODWORD(v4);
    v5 = *(float *)(a3 + 4);
    if (!*(_BYTE *)(a3 + 10))
      v5 = (float)SLODWORD(v5);
    if (v4 == v5)
      goto LABEL_11;
    goto LABEL_10;
  }
  v52 = result;
  v38 = a3;
  v45 = a2;
  isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a2 + 4), (const WebCore::Length *)(a3 + 4));
  a3 = v38;
  a2 = v45;
  v25 = isCalculatedEqual;
  result = v52;
  if ((v25 & 1) == 0)
LABEL_10:
    *(_QWORD *)(*(_QWORD *)result + 8) |= 0x80000000000uLL;
LABEL_11:
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (v6 != *(unsigned __int8 *)(a3 + 16) || (*(_BYTE *)(a2 + 17) != 0) != (*(_BYTE *)(a3 + 17) != 0))
    goto LABEL_20;
  if (v6 == 13)
    goto LABEL_21;
  if (v6 != 11)
  {
    v7 = *(float *)(a2 + 12);
    if (!*(_BYTE *)(a2 + 18))
      v7 = (float)SLODWORD(v7);
    v8 = *(float *)(a3 + 12);
    if (!*(_BYTE *)(a3 + 18))
      v8 = (float)SLODWORD(v8);
    if (v7 == v8)
      goto LABEL_21;
    goto LABEL_20;
  }
  v53 = result;
  v39 = a3;
  v46 = a2;
  v26 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a2 + 12), (const WebCore::Length *)(a3 + 12));
  a3 = v39;
  a2 = v46;
  v27 = v26;
  result = v53;
  if ((v27 & 1) == 0)
LABEL_20:
    *(_QWORD *)(*(_QWORD *)result + 8) |= 0x100000000000uLL;
LABEL_21:
  v9 = *(unsigned __int8 *)(a2 + 24);
  if (v9 != *(unsigned __int8 *)(a3 + 24) || (*(_BYTE *)(a2 + 25) != 0) != (*(_BYTE *)(a3 + 25) != 0))
    goto LABEL_30;
  if (v9 == 13)
    goto LABEL_31;
  if (v9 != 11)
  {
    v10 = *(float *)(a2 + 20);
    if (!*(_BYTE *)(a2 + 26))
      v10 = (float)SLODWORD(v10);
    v11 = *(float *)(a3 + 20);
    if (!*(_BYTE *)(a3 + 26))
      v11 = (float)SLODWORD(v11);
    if (v10 == v11)
      goto LABEL_31;
    goto LABEL_30;
  }
  v54 = result;
  v40 = a3;
  v47 = a2;
  v28 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a2 + 20), (const WebCore::Length *)(a3 + 20));
  a3 = v40;
  a2 = v47;
  v29 = v28;
  result = v54;
  if ((v29 & 1) == 0)
LABEL_30:
    *(_QWORD *)(*(_QWORD *)result + 24) |= 0x8000uLL;
LABEL_31:
  v12 = *(unsigned __int8 *)(a2 + 32);
  if (v12 != *(unsigned __int8 *)(a3 + 32) || (*(_BYTE *)(a2 + 33) != 0) != (*(_BYTE *)(a3 + 33) != 0))
    goto LABEL_40;
  if (v12 == 13)
    goto LABEL_41;
  if (v12 != 11)
  {
    v13 = *(float *)(a2 + 28);
    if (!*(_BYTE *)(a2 + 34))
      v13 = (float)SLODWORD(v13);
    v14 = *(float *)(a3 + 28);
    if (!*(_BYTE *)(a3 + 34))
      v14 = (float)SLODWORD(v14);
    if (v13 == v14)
      goto LABEL_41;
    goto LABEL_40;
  }
  v55 = result;
  v41 = a3;
  v48 = a2;
  v30 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a2 + 28), (const WebCore::Length *)(a3 + 28));
  a3 = v41;
  a2 = v48;
  v31 = v30;
  result = v55;
  if ((v31 & 1) == 0)
LABEL_40:
    *(_QWORD *)(*(_QWORD *)result + 24) |= 0x100000uLL;
LABEL_41:
  v15 = *(unsigned __int8 *)(a2 + 40);
  if (v15 != *(unsigned __int8 *)(a3 + 40) || (*(_BYTE *)(a2 + 41) != 0) != (*(_BYTE *)(a3 + 41) != 0))
    goto LABEL_50;
  if (v15 == 13)
    goto LABEL_51;
  if (v15 != 11)
  {
    v16 = *(float *)(a2 + 36);
    if (!*(_BYTE *)(a2 + 42))
      v16 = (float)SLODWORD(v16);
    v17 = *(float *)(a3 + 36);
    if (!*(_BYTE *)(a3 + 42))
      v17 = (float)SLODWORD(v17);
    if (v16 == v17)
      goto LABEL_51;
    goto LABEL_50;
  }
  v56 = result;
  v42 = a3;
  v49 = a2;
  v32 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a2 + 36), (const WebCore::Length *)(a3 + 36));
  a3 = v42;
  a2 = v49;
  v33 = v32;
  result = v56;
  if ((v33 & 1) == 0)
LABEL_50:
    *(_QWORD *)(*(_QWORD *)result + 24) |= 0x200000uLL;
LABEL_51:
  v18 = *(unsigned __int8 *)(a2 + 48);
  if (v18 != *(unsigned __int8 *)(a3 + 48) || (*(_BYTE *)(a2 + 49) != 0) != (*(_BYTE *)(a3 + 49) != 0))
    goto LABEL_60;
  if (v18 != 13)
  {
    if (v18 == 11)
    {
      v57 = result;
      v43 = a3;
      v50 = a2;
      v34 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a2 + 44), (const WebCore::Length *)(a3 + 44));
      a3 = v43;
      a2 = v50;
      v35 = v34;
      result = v57;
      if ((v35 & 1) != 0)
        goto LABEL_61;
      goto LABEL_60;
    }
    v19 = *(float *)(a2 + 44);
    if (!*(_BYTE *)(a2 + 50))
      v19 = (float)SLODWORD(v19);
    v20 = *(float *)(a3 + 44);
    if (!*(_BYTE *)(a3 + 50))
      v20 = (float)SLODWORD(v20);
    if (v19 != v20)
LABEL_60:
      *(_QWORD *)(*(_QWORD *)result + 32) |= 0x40000000000uLL;
  }
LABEL_61:
  v21 = *(unsigned __int8 *)(a2 + 56);
  if (v21 != *(unsigned __int8 *)(a3 + 56) || (*(_BYTE *)(a2 + 57) != 0) != (*(_BYTE *)(a3 + 57) != 0))
    goto LABEL_70;
  if (v21 == 13)
    goto LABEL_71;
  if (v21 == 11)
  {
    v58 = result;
    v44 = a3;
    v51 = a2;
    v36 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a2 + 52), (const WebCore::Length *)(a3 + 52));
    a3 = v44;
    a2 = v51;
    v37 = v36;
    result = v58;
    if ((v37 & 1) != 0)
      goto LABEL_71;
LABEL_70:
    *(_QWORD *)(*(_QWORD *)result + 32) |= 0x80000000000uLL;
    goto LABEL_71;
  }
  v22 = *(float *)(a2 + 52);
  if (!*(_BYTE *)(a2 + 58))
    v22 = (float)SLODWORD(v22);
  v23 = *(float *)(a3 + 52);
  if (!*(_BYTE *)(a3 + 58))
    v23 = (float)SLODWORD(v23);
  if (v22 != v23)
    goto LABEL_70;
LABEL_71:
  if (*(_QWORD *)(a2 + 64) != *(_QWORD *)(a3 + 64))
    *(_QWORD *)(*(_QWORD *)result + 8) |= 0x200000000000uLL;
  return result;
}

uint64_t WebCore::SVGRenderStyle::conservativelyCollectChangedAnimatableProperties(WebCore::SVGRenderStyle const&,WebCore::CSSPropertiesBitSet &)const::$_6::operator()<WebCore::StyleInheritedResourceData const,WebCore::StyleInheritedResourceData const>(uint64_t a1, WTF **a2, const WTF::StringImpl **a3)
{
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;
  uint64_t result;

  if ((WTF::equal(a2[1], a3[1], (const WTF::StringImpl *)a3) & 1) == 0)
    *(_QWORD *)(*(_QWORD *)a1 + 16) |= 0x200000000uLL;
  if ((WTF::equal(a2[2], a3[2], v6) & 1) == 0)
    *(_QWORD *)(*(_QWORD *)a1 + 16) |= 0x100000000uLL;
  result = WTF::equal(a2[3], a3[3], v7);
  if ((result & 1) == 0)
    *(_QWORD *)(*(_QWORD *)a1 + 16) |= 0x80000000uLL;
  return result;
}

uint64_t WebCore::SVGRenderStyle::conservativelyCollectChangedAnimatableProperties(WebCore::SVGRenderStyle const&,WebCore::CSSPropertiesBitSet &)const::$_7::operator()<WebCore::SVGRenderStyle::InheritedFlags const,WebCore::SVGRenderStyle::InheritedFlags const>(uint64_t result, _WORD *a2, _WORD *a3)
{
  __int16 v3;

  v3 = *a3 ^ *a2;
  if ((v3 & 3) != 0)
  {
    *(_QWORD *)(result + 24) |= 0x800000000uLL;
    v3 = *a3 ^ *a2;
  }
  if ((v3 & 4) != 0)
  {
    *(_QWORD *)(result + 8) |= 0x800000uLL;
    v3 = *a3 ^ *a2;
  }
  if ((v3 & 8) != 0)
  {
    *(_QWORD *)(result + 8) |= 0x10000000000000uLL;
    v3 = *a3 ^ *a2;
  }
  if ((v3 & 0x30) != 0)
  {
    *(_QWORD *)(result + 24) |= 0x800000000000000uLL;
    v3 = *a3 ^ *a2;
  }
  if ((v3 & 0xC0) != 0)
  {
    *(_QWORD *)(result + 8) |= 0x1000000uLL;
    v3 = *a3 ^ *a2;
  }
  if ((v3 & 0x300) != 0)
    *(_QWORD *)(result + 8) |= 0x2000000uLL;
  return result;
}

_QWORD *WebCore::SVGRenderStyle::conservativelyCollectChangedAnimatableProperties(WebCore::SVGRenderStyle const&,WebCore::CSSPropertiesBitSet &)const::$_8::operator()<WebCore::SVGRenderStyle::NonInheritedFlags const,WebCore::SVGRenderStyle::NonInheritedFlags const>(_QWORD *result, _WORD *a2, _WORD *a3)
{
  __int16 v3;

  v3 = *a3 ^ *a2;
  if ((v3 & 0xF0) != 0)
  {
    result[1] |= 0x400000000000uLL;
    v3 = *a3 ^ *a2;
  }
  if ((v3 & 0x300) != 0)
  {
    result[1] |= 0x10uLL;
    v3 = *a3 ^ *a2;
  }
  if ((v3 & 0x400) == 0)
  {
    if ((v3 & 0x2000) == 0)
      return result;
LABEL_9:
    result[2] |= 0x80000000000uLL;
    return result;
  }
  result[4] |= 0x80000000uLL;
  if ((((unsigned __int16)*a3 ^ (unsigned __int16)*a2) & 0x2000) != 0)
    goto LABEL_9;
  return result;
}

WebCore::StyleFillData *WebCore::StyleFillData::StyleFillData(WebCore::StyleFillData *this)
{
  *(_QWORD *)this = 0x3F80000000000001;
  WebCore::StyleColor::StyleColor((uint64_t)this + 8, 0xFF000000);
  WebCore::StyleColor::StyleColor((uint64_t)this + 24, 0xFF000000);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_WORD *)this + 28) = 0;
  return this;
}

float WebCore::StyleFillData::copy@<S0>(WebCore::StyleFillData *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  float result;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  const WTF::StringImpl *v13;
  char v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char **v19;

  v4 = (_DWORD *)WTF::fastMalloc((WTF *)0x40);
  *v4 = 1;
  v4[1] = *((_DWORD *)this + 1);
  v15 = &v14;
  v16 = &v14;
  v17 = &v14;
  v18 = &v14;
  v5 = *((unsigned int *)this + 4);
  if ((_DWORD)v5 == -1)
    goto LABEL_8;
  v6 = v4;
  v19 = &v15;
  ((void (*)(char ***, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v5])(&v19, (char *)this + 8);
  v15 = &v14;
  v16 = &v14;
  v17 = &v14;
  v18 = &v14;
  v7 = *((unsigned int *)this + 8);
  if ((_DWORD)v7 == -1)
  {
LABEL_8:
    v11 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::StyleStrokeData::operator==(v11, v12, v13);
  }
  else
  {
    v19 = &v15;
    ((void (*)(char ***, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v7])(&v19, (char *)this + 24);
    v9 = (_DWORD *)*((_QWORD *)this + 5);
    if (v9)
      *v9 += 2;
    *((_QWORD *)v6 + 5) = v9;
    v10 = (_DWORD *)*((_QWORD *)this + 6);
    if (v10)
      *v10 += 2;
    *((_QWORD *)v6 + 6) = v10;
    *((_WORD *)v6 + 28) = *((_WORD *)this + 28);
    *a2 = v6;
  }
  return result;
}

float WebCore::StyleStrokeData::operator==(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  float result;
  uint64_t v6;
  int v7;
  _BOOL4 v9;
  _BOOL4 v11;
  _BOOL4 v12;
  char v13;
  uint64_t v14;
  int v15;
  _BOOL4 v17;
  _BOOL4 v18;
  _BOOL4 v19;
  const WTF::StringImpl *v20;
  int v21;
  WebCore::Length *v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char *v33;

  result = *(float *)(a1 + 4);
  if (result != *(float *)(a2 + 4))
    return result;
  v6 = *(unsigned int *)(a1 + 16);
  v7 = *(_DWORD *)(a2 + 16);
  v9 = v7 == (_DWORD)v6 && v7 != -1;
  if ((_DWORD)v6 == -1 || !v9)
  {
    v11 = v7 == -1;
    if ((_DWORD)v6 == -1)
      v12 = v11;
    else
      v12 = v9;
    if (!v12)
      return result;
  }
  else
  {
    v33 = &v32;
    v13 = ((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v6])(&v33, a1 + 8, a2 + 8);
    if ((v13 & 1) == 0)
      return result;
  }
  v14 = *(unsigned int *)(a1 + 32);
  v15 = *(_DWORD *)(a2 + 32);
  v17 = v15 == (_DWORD)v14 && v15 != -1;
  if ((_DWORD)v14 == -1 || !v17)
  {
    v18 = v15 == -1;
    if ((_DWORD)v14 == -1)
      v19 = v18;
    else
      v19 = v17;
    if (!v19)
      return result;
  }
  else
  {
    v33 = &v32;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v14])(&v33, a1 + 24, a2 + 24) & 1) == 0)return result;
  }
  if (!WTF::equal(*(WTF **)(a1 + 40), *(const WTF::StringImpl **)(a2 + 40), a3))
    return result;
  if (!WTF::equal(*(WTF **)(a1 + 48), *(const WTF::StringImpl **)(a2 + 48), v20))
    return result;
  v21 = *(unsigned __int8 *)(a1 + 60);
  if (v21 != *(unsigned __int8 *)(a2 + 60) || (*(_BYTE *)(a1 + 61) != 0) != (*(_BYTE *)(a2 + 61) != 0))
    return result;
  if (v21 == 13)
    goto LABEL_45;
  v22 = (WebCore::Length *)(a1 + 56);
  if (v21 == 11)
  {
    if ((WebCore::Length::isCalculatedEqual(v22, (const WebCore::Length *)(a2 + 56)) & 1) == 0)
      return result;
    goto LABEL_45;
  }
  if (*(_BYTE *)(a1 + 62))
    result = *(float *)v22;
  else
    result = (float)*(int *)v22;
  v23 = *(float *)(a2 + 56);
  if (!*(_BYTE *)(a2 + 62))
    v23 = (float)SLODWORD(v23);
  if (result == v23)
  {
LABEL_45:
    v24 = *(unsigned int *)(a1 + 76);
    if ((_DWORD)v24 == *(_DWORD *)(a2 + 76))
    {
      if ((_DWORD)v24)
      {
        v25 = *(_QWORD *)(a1 + 64);
        v26 = *(_QWORD *)(a2 + 64);
        result = *(float *)v25;
        if (*(float *)v25 == *(float *)v26
          && (unsigned __int16)*(_DWORD *)(v25 + 4) == (unsigned __int16)*(_DWORD *)(v26 + 4))
        {
          v27 = 0;
          v28 = v25 + 8;
          v29 = v26 + 8;
          do
          {
            if (v24 - 1 == v27)
              break;
            v30 = v28 + 8 * v27;
            v31 = v29 + 8 * v27;
            result = *(float *)v30;
            ++v27;
            if (*(float *)v30 != *(float *)v31)
              break;
          }
          while ((unsigned __int16)*(_DWORD *)(v30 + 4) == (unsigned __int16)*(_DWORD *)(v31 + 4));
        }
      }
    }
  }
  return result;
}

WebCore::StyleMiscData *WebCore::StyleMiscData::StyleMiscData(WebCore::StyleMiscData *this)
{
  uint64_t v3;

  *(_QWORD *)this = 0x3F80000000000001;
  WebCore::StyleColor::StyleColor((uint64_t)this + 8, 0xFF000000);
  WebCore::StyleColor::StyleColor((uint64_t)this + 24, 0xFFFFFFFF);
  WebCore::SVGLengthValue::SVGLengthValue((uint64_t)&v3, 1, 2, 0.0);
  *((_QWORD *)this + 5) = v3;
  return this;
}

uint64_t WebCore::StyleMiscData::copy@<X0>(WebCore::StyleMiscData *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char **v16;

  v4 = (_DWORD *)WTF::fastMalloc((WTF *)0x30);
  *v4 = 1;
  v4[1] = *((_DWORD *)this + 1);
  v12 = &v11;
  v13 = &v11;
  v14 = &v11;
  v15 = &v11;
  v5 = *((unsigned int *)this + 4);
  if ((_DWORD)v5 == -1)
    goto LABEL_4;
  v6 = v4;
  v16 = &v12;
  ((void (*)(char ***, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v5])(&v16, (char *)this + 8);
  v12 = &v11;
  v13 = &v11;
  v14 = &v11;
  v15 = &v11;
  v7 = *((unsigned int *)this + 8);
  if ((_DWORD)v7 == -1)
  {
LABEL_4:
    v9 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::StyleMiscData::operator==(v9, v10);
  }
  else
  {
    v16 = &v12;
    result = ((uint64_t (*)(char ***, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v7])(&v16, (char *)this + 24);
    *((_QWORD *)v6 + 5) = *((_QWORD *)this + 5);
    *a2 = v6;
  }
  return result;
}

BOOL WebCore::StyleMiscData::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _BOOL4 v7;
  _BOOL4 v9;
  _BOOL4 v10;
  uint64_t v11;
  int v12;
  _BOOL4 v14;
  _BOOL4 v16;
  _BOOL4 v17;
  char v19;
  char *v20;

  if (*(float *)(a1 + 4) != *(float *)(a2 + 4))
    return 0;
  v4 = *(unsigned int *)(a1 + 16);
  v5 = *(_DWORD *)(a2 + 16);
  v7 = v5 == (_DWORD)v4 && v5 != -1;
  if ((_DWORD)v4 == -1 || !v7)
  {
    v9 = v5 == -1;
    if ((_DWORD)v4 == -1)
      v10 = v9;
    else
      v10 = v7;
    if (!v10)
      return 0;
  }
  else
  {
    v20 = &v19;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v4])(&v20, a1 + 8, a2 + 8) & 1) == 0)return 0;
  }
  v11 = *(unsigned int *)(a1 + 32);
  v12 = *(_DWORD *)(a2 + 32);
  v14 = v12 == (_DWORD)v11 && v12 != -1;
  if ((_DWORD)v11 == -1 || !v14)
  {
    v16 = v12 == -1;
    if ((_DWORD)v11 == -1)
      v17 = v16;
    else
      v17 = v14;
    if (!v17)
      return 0;
  }
  else
  {
    v20 = &v19;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v11])(&v20, a1 + 24, a2 + 24) & 1) == 0)return 0;
  }
  return *(float *)(a1 + 40) == *(float *)(a2 + 40) && *(unsigned __int16 *)(a1 + 44) == *(unsigned __int16 *)(a2 + 44);
}

uint64_t WebCore::StyleInheritedResourceData::operator==(WTF **a1, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  const WTF::StringImpl *v5;
  const WTF::StringImpl *v6;

  if (WTF::equal(a1[1], a2[1], a3) && WTF::equal(a1[2], a2[2], v5))
    return WTF::equal(a1[3], a2[3], v6);
  else
    return 0;
}

BOOL WebCore::StyleLayoutData::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  float *v3;
  float v4;
  float v5;
  int v6;
  float *v7;
  float v8;
  float v9;
  int v10;
  float *v11;
  float v12;
  float v13;
  int v14;
  float *v15;
  float v16;
  float v17;
  int v18;
  float *v19;
  float v20;
  float v21;
  int v22;
  float *v23;
  float v24;
  float v25;
  char isCalculatedEqual;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  int v33;
  float *v34;
  float v35;
  float v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v2 = *(unsigned __int8 *)(a1 + 8);
  if (v2 != *(unsigned __int8 *)(a2 + 8) || (*(_BYTE *)(a1 + 9) != 0) != (*(_BYTE *)(a2 + 9) != 0))
    return 0;
  if (v2 != 13)
  {
    v3 = (float *)(a1 + 4);
    if (v2 == 11)
    {
      v38 = a2;
      v45 = a1;
      isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 4), (const WebCore::Length *)(a2 + 4));
      a2 = v38;
      a1 = v45;
      if ((isCalculatedEqual & 1) == 0)
        return 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 10))
        v4 = *v3;
      else
        v4 = (float)*(int *)v3;
      v5 = *(float *)(a2 + 4);
      if (!*(_BYTE *)(a2 + 10))
        v5 = (float)SLODWORD(v5);
      if (v4 != v5)
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + 16);
  if (v6 != *(unsigned __int8 *)(a2 + 16) || (*(_BYTE *)(a1 + 17) != 0) != (*(_BYTE *)(a2 + 17) != 0))
    return 0;
  if (v6 != 13)
  {
    v7 = (float *)(a1 + 12);
    if (v6 == 11)
    {
      v39 = a2;
      v46 = a1;
      v28 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 12), (const WebCore::Length *)(a2 + 12));
      a2 = v39;
      a1 = v46;
      if ((v28 & 1) == 0)
        return 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 18))
        v8 = *v7;
      else
        v8 = (float)*(int *)v7;
      v9 = *(float *)(a2 + 12);
      if (!*(_BYTE *)(a2 + 18))
        v9 = (float)SLODWORD(v9);
      if (v8 != v9)
        return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + 24);
  if (v10 != *(unsigned __int8 *)(a2 + 24) || (*(_BYTE *)(a1 + 25) != 0) != (*(_BYTE *)(a2 + 25) != 0))
    return 0;
  if (v10 != 13)
  {
    v11 = (float *)(a1 + 20);
    if (v10 == 11)
    {
      v40 = a2;
      v47 = a1;
      v29 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 20), (const WebCore::Length *)(a2 + 20));
      a2 = v40;
      a1 = v47;
      if ((v29 & 1) == 0)
        return 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 26))
        v12 = *v11;
      else
        v12 = (float)*(int *)v11;
      v13 = *(float *)(a2 + 20);
      if (!*(_BYTE *)(a2 + 26))
        v13 = (float)SLODWORD(v13);
      if (v12 != v13)
        return 0;
    }
  }
  v14 = *(unsigned __int8 *)(a1 + 32);
  if (v14 != *(unsigned __int8 *)(a2 + 32) || (*(_BYTE *)(a1 + 33) != 0) != (*(_BYTE *)(a2 + 33) != 0))
    return 0;
  if (v14 != 13)
  {
    v15 = (float *)(a1 + 28);
    if (v14 == 11)
    {
      v41 = a2;
      v48 = a1;
      v30 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 28), (const WebCore::Length *)(a2 + 28));
      a2 = v41;
      a1 = v48;
      if ((v30 & 1) == 0)
        return 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 34))
        v16 = *v15;
      else
        v16 = (float)*(int *)v15;
      v17 = *(float *)(a2 + 28);
      if (!*(_BYTE *)(a2 + 34))
        v17 = (float)SLODWORD(v17);
      if (v16 != v17)
        return 0;
    }
  }
  v18 = *(unsigned __int8 *)(a1 + 40);
  if (v18 != *(unsigned __int8 *)(a2 + 40) || (*(_BYTE *)(a1 + 41) != 0) != (*(_BYTE *)(a2 + 41) != 0))
    return 0;
  if (v18 != 13)
  {
    v19 = (float *)(a1 + 36);
    if (v18 == 11)
    {
      v42 = a2;
      v49 = a1;
      v31 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 36), (const WebCore::Length *)(a2 + 36));
      a2 = v42;
      a1 = v49;
      if ((v31 & 1) == 0)
        return 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 42))
        v20 = *v19;
      else
        v20 = (float)*(int *)v19;
      v21 = *(float *)(a2 + 36);
      if (!*(_BYTE *)(a2 + 42))
        v21 = (float)SLODWORD(v21);
      if (v20 != v21)
        return 0;
    }
  }
  v22 = *(unsigned __int8 *)(a1 + 48);
  if (v22 != *(unsigned __int8 *)(a2 + 48) || (*(_BYTE *)(a1 + 49) != 0) != (*(_BYTE *)(a2 + 49) != 0))
    return 0;
  if (v22 != 13)
  {
    v23 = (float *)(a1 + 44);
    if (v22 == 11)
    {
      v43 = a2;
      v50 = a1;
      v32 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 44), (const WebCore::Length *)(a2 + 44));
      a2 = v43;
      a1 = v50;
      if ((v32 & 1) == 0)
        return 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 50))
        v24 = *v23;
      else
        v24 = (float)*(int *)v23;
      v25 = *(float *)(a2 + 44);
      if (!*(_BYTE *)(a2 + 50))
        v25 = (float)SLODWORD(v25);
      if (v24 != v25)
        return 0;
    }
  }
  v33 = *(unsigned __int8 *)(a1 + 56);
  if (v33 != *(unsigned __int8 *)(a2 + 56) || (*(_BYTE *)(a1 + 57) != 0) != (*(_BYTE *)(a2 + 57) != 0))
    return 0;
  if (v33 == 13)
    return *(_QWORD *)(a1 + 64) == *(_QWORD *)(a2 + 64);
  v34 = (float *)(a1 + 52);
  if (v33 == 11)
  {
    v44 = a2;
    v51 = a1;
    v37 = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 52), (const WebCore::Length *)(a2 + 52));
    a2 = v44;
    a1 = v51;
    if ((v37 & 1) == 0)
      return 0;
    return *(_QWORD *)(a1 + 64) == *(_QWORD *)(a2 + 64);
  }
  if (*(_BYTE *)(a1 + 58))
    v35 = *v34;
  else
    v35 = (float)*(int *)v34;
  v36 = *(float *)(a2 + 52);
  if (!*(_BYTE *)(a2 + 58))
    v36 = (float)SLODWORD(v36);
  if (v35 == v36)
    return *(_QWORD *)(a1 + 64) == *(_QWORD *)(a2 + 64);
  return 0;
}

WebCore::ShadowData *WebCore::ShadowData::ShadowData(WebCore::ShadowData *this, const WebCore::ShadowData *a2)
{
  int v4;
  char v5;
  unsigned int v6;
  char v7;
  int v8;
  int v9;
  char v10;
  unsigned int v11;
  char v12;
  int v13;
  int *v14;
  unsigned int v15;
  int v16;
  int *v17;
  unsigned int v18;
  int v19;
  uint64_t v20;
  const WebCore::ShadowData *v21;
  uint64_t v22;
  WebCore::ShadowData *v24;
  WebCore::ShadowData *v25;
  const WebCore::ShadowData *v26;
  int v27;
  unsigned __int8 v28;
  char v29;
  char v30;
  int v31;
  unsigned __int8 v32;
  char v33;
  char v34;
  char v35;
  _QWORD v36[4];
  _QWORD *v37;

  v34 = 0;
  v32 = *((_BYTE *)a2 + 4);
  v4 = v32;
  v5 = *((_BYTE *)a2 + 5);
  v33 = v5;
  v6 = v32 - 2;
  if (v6 >= 9)
  {
    if (v32 == 11)
    {
      v31 = *(_DWORD *)a2;
      v8 = v31;
      WebCore::Length::ref(&v31);
      v7 = 0;
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
  }
  else if (*((_BYTE *)a2 + 6))
  {
    v8 = *(_DWORD *)a2;
    v7 = 1;
  }
  else
  {
    v7 = 0;
    v8 = *(_DWORD *)a2;
  }
  v30 = 0;
  v28 = *((_BYTE *)a2 + 12);
  v9 = v28;
  v10 = *((_BYTE *)a2 + 13);
  v29 = v10;
  v11 = v28 - 2;
  if (v11 >= 9)
  {
    if (v28 == 11)
    {
      v27 = *((_DWORD *)a2 + 2);
      v13 = v27;
      WebCore::Length::ref(&v27);
      v12 = 0;
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
  }
  else
  {
    v12 = *((_BYTE *)a2 + 14);
    v13 = *((_DWORD *)a2 + 2);
    if (v12)
      v12 = 1;
  }
  *(_DWORD *)this = 0;
  *((_BYTE *)this + 6) = 0;
  *((_BYTE *)this + 4) = v4;
  *((_BYTE *)this + 5) = v5;
  if (v6 < 9)
  {
    *((_BYTE *)this + 6) = v7;
LABEL_13:
    *(_DWORD *)this = v8;
    goto LABEL_14;
  }
  if (v4 == 11)
    goto LABEL_13;
LABEL_14:
  *((_DWORD *)this + 2) = 0;
  *((_BYTE *)this + 14) = 0;
  *((_BYTE *)this + 12) = v9;
  *((_BYTE *)this + 13) = v10;
  if (v11 < 9)
  {
    *((_BYTE *)this + 14) = v12;
LABEL_16:
    *((_DWORD *)this + 2) = v13;
    goto LABEL_17;
  }
  if (v9 == 11)
    goto LABEL_16;
LABEL_17:
  *((_DWORD *)this + 4) = 0;
  v14 = (int *)((char *)this + 16);
  *(_WORD *)((char *)this + 21) = 0;
  v15 = *((unsigned __int8 *)a2 + 20);
  *((_BYTE *)this + 20) = v15;
  *((_BYTE *)this + 21) = *((_BYTE *)a2 + 21);
  if (v15 <= 0xD)
  {
    v16 = 1 << v15;
    if ((v16 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 22) = *((_BYTE *)a2 + 22);
      *v14 = *((_DWORD *)a2 + 4);
    }
    else if ((v16 & 0x3003) != 0)
    {
      *v14 = 0;
    }
    else
    {
      *v14 = *((_DWORD *)a2 + 4);
      WebCore::Length::ref(v14);
    }
  }
  *((_DWORD *)this + 6) = 0;
  v17 = (int *)((char *)this + 24);
  *(_WORD *)((char *)this + 29) = 0;
  v18 = *((unsigned __int8 *)a2 + 28);
  *((_BYTE *)this + 28) = v18;
  *((_BYTE *)this + 29) = *((_BYTE *)a2 + 29);
  if (v18 <= 0xD)
  {
    v19 = 1 << v18;
    if ((v19 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 30) = *((_BYTE *)a2 + 30);
      *v17 = *((_DWORD *)a2 + 6);
    }
    else if ((v19 & 0x3003) != 0)
    {
      *v17 = 0;
    }
    else
    {
      *v17 = *((_DWORD *)a2 + 6);
      WebCore::Length::ref(v17);
    }
  }
  v36[0] = &v35;
  v36[1] = &v35;
  v36[2] = &v35;
  v36[3] = &v35;
  v20 = *((unsigned int *)a2 + 10);
  if ((_DWORD)v20 == -1)
  {
    v25 = (WebCore::ShadowData *)std::__throw_bad_variant_access[abi:sn180100]();
    return (WebCore::ShadowData *)WebCore::ShadowData::ShadowData(v25, v26);
  }
  else
  {
    v37 = v36;
    ((void (*)(_QWORD **, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v20])(&v37, (char *)a2 + 32);
    *((_WORD *)this + 24) = *((_WORD *)a2 + 24);
    v21 = (const WebCore::ShadowData *)*((_QWORD *)a2 + 7);
    if (v21)
    {
      v24 = (WebCore::ShadowData *)WTF::fastMalloc((WTF *)0x40);
      v22 = WebCore::ShadowData::ShadowData(v24, v21);
    }
    else
    {
      v22 = 0;
    }
    *((_QWORD *)this + 7) = v22;
    return this;
  }
}

uint64_t WebCore::ShadowData::deleteNextLinkedListWithoutRecursion(WebCore::ShadowData *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v1 = *((_QWORD *)this + 7);
  *((_QWORD *)this + 7) = 0;
  do
  {
    v2 = *(_QWORD *)(v1 + 56);
    *(_QWORD *)(v1 + 56) = 0;
    v4 = v2;
    result = std::default_delete<WebCore::ShadowData>::operator()[abi:sn180100]((uint64_t)&v4, (unsigned int *)v1);
    v1 = v4;
  }
  while (v4);
  return result;
}

uint64_t WebCore::ShadowData::operator==(WebCore::Length *a1, WebCore::Length *a2)
{
  WebCore::Length *v2;
  WebCore::Length *v3;
  uint64_t result;
  _BOOL4 v5;
  _BOOL4 v6;

  v2 = a2;
  v3 = a1;
  result = WebCore::ShadowData::operator==(WebCore::ShadowData const&)const::$_0::operator()<WebCore::ShadowData,WebCore::ShadowData>(a1, a2);
  if ((_DWORD)result)
  {
    while (1)
    {
      v2 = (WebCore::Length *)*((_QWORD *)v2 + 7);
      v3 = (WebCore::Length *)*((_QWORD *)v3 + 7);
      v5 = v3 != 0;
      v6 = v2 != 0;
      if (!v3 || v2 == 0)
        break;
      if ((WebCore::ShadowData::operator==(WebCore::ShadowData const&)const::$_0::operator()<WebCore::ShadowData,WebCore::ShadowData>(v3, v2) & 1) == 0)
      {
        v5 = 1;
        v6 = 1;
        return !v5 && !v6;
      }
    }
    return !v5 && !v6;
  }
  return result;
}

uint64_t WebCore::ShadowData::operator==(WebCore::ShadowData const&)const::$_0::operator()<WebCore::ShadowData,WebCore::ShadowData>(WebCore::Length *this, WebCore::Length *a2)
{
  int v2;
  float v5;
  float v6;
  int v7;
  float v8;
  float v9;
  int v10;
  float v11;
  float v12;
  int v13;
  float v14;
  float v15;
  uint64_t result;

  v2 = *((unsigned __int8 *)this + 4);
  if (v2 != *((unsigned __int8 *)a2 + 4) || (*((_BYTE *)this + 5) != 0) != (*((_BYTE *)a2 + 5) != 0))
    return 0;
  if (v2 != 13)
  {
    if (v2 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(this, a2) & 1) == 0)
        return 0;
    }
    else
    {
      v5 = *(float *)this;
      if (!*((_BYTE *)this + 6))
        v5 = (float)*(int *)this;
      v6 = *(float *)a2;
      if (!*((_BYTE *)a2 + 6))
        v6 = (float)*(int *)a2;
      if (v5 != v6)
        return 0;
    }
  }
  v7 = *((unsigned __int8 *)this + 12);
  if (v7 != *((unsigned __int8 *)a2 + 12) || (*((_BYTE *)this + 13) != 0) != (*((_BYTE *)a2 + 13) != 0))
    return 0;
  if (v7 != 13)
  {
    if (v7 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)((char *)this + 8), (WebCore::Length *)((char *)a2 + 8)) & 1) == 0)return 0;
    }
    else
    {
      v8 = *((float *)this + 2);
      if (!*((_BYTE *)this + 14))
        v8 = (float)SLODWORD(v8);
      v9 = *((float *)a2 + 2);
      if (!*((_BYTE *)a2 + 14))
        v9 = (float)SLODWORD(v9);
      if (v8 != v9)
        return 0;
    }
  }
  v10 = *((unsigned __int8 *)this + 28);
  if (v10 != *((unsigned __int8 *)a2 + 28) || (*((_BYTE *)this + 29) != 0) != (*((_BYTE *)a2 + 29) != 0))
    return 0;
  if (v10 != 13)
  {
    if (v10 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)((char *)this + 24), (WebCore::Length *)((char *)a2 + 24)) & 1) == 0)return 0;
    }
    else
    {
      v11 = *((float *)this + 6);
      if (!*((_BYTE *)this + 30))
        v11 = (float)SLODWORD(v11);
      v12 = *((float *)a2 + 6);
      if (!*((_BYTE *)a2 + 30))
        v12 = (float)SLODWORD(v12);
      if (v11 != v12)
        return 0;
    }
  }
  v13 = *((unsigned __int8 *)this + 20);
  if (v13 != *((unsigned __int8 *)a2 + 20) || (*((_BYTE *)this + 21) != 0) != (*((_BYTE *)a2 + 21) != 0))
    return 0;
  if (v13 != 13)
  {
    if (v13 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)((char *)this + 16), (WebCore::Length *)((char *)a2 + 16)) & 1) == 0)return 0;
    }
    else
    {
      v14 = *((float *)this + 4);
      if (!*((_BYTE *)this + 22))
        v14 = (float)SLODWORD(v14);
      v15 = *((float *)a2 + 4);
      if (!*((_BYTE *)a2 + 22))
        v15 = (float)SLODWORD(v15);
      if (v14 != v15)
        return 0;
    }
  }
  if (*((unsigned __int8 *)this + 48) != *((unsigned __int8 *)a2 + 48))
    return 0;
  result = WebCore::StyleColor::operator==((uint64_t)this + 32, (uint64_t)a2 + 32);
  if ((_DWORD)result)
    return *((unsigned __int8 *)this + 49) == *((unsigned __int8 *)a2 + 49);
  return result;
}

unint64_t WebCore::ShadowData::shadowInsetExtent(WebCore::ShadowData *this)
{
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  float v6;
  double v7;
  unsigned int v8;
  float v9;
  double v10;
  int v11;
  BOOL v12;
  int v13;
  int v14;
  float v15;
  float v16;
  double v17;
  unsigned int v18;
  int v19;
  float v20;
  float v21;
  float v22;
  double v23;
  unsigned int v24;
  int v25;
  double v26;
  unsigned int v27;
  int v28;
  float v29;
  double v30;
  unsigned int v31;
  int v32;

  if (this)
  {
    v1 = 0;
    v2 = 0;
    v3 = 0;
    v4 = 0;
    do
    {
      if (*((_BYTE *)this + 48))
      {
        if (*((_BYTE *)this + 30))
          v6 = *((float *)this + 6);
        else
          v6 = (float)*((int *)this + 6);
        v7 = ceilf(v6 * 1.4) * 64.0;
        if (v7 >= 2147483650.0)
        {
          v8 = 0x7FFFFFFF;
        }
        else
        {
          v8 = (int)v7;
          if (v7 <= -2147483650.0)
            v8 = 0x80000000;
        }
        if (*((_BYTE *)this + 22))
          v9 = *((float *)this + 4);
        else
          v9 = (float)*((int *)this + 4);
        v10 = v9 * 64.0;
        if (v10 >= 2147483650.0)
        {
          v11 = 0x7FFFFFFF;
        }
        else if (v10 > -2147483650.0)
        {
          v11 = (int)v10;
        }
        else
        {
          v11 = 0x80000000;
        }
        v12 = __OFADD__(v8, v11);
        v13 = v8 + v11;
        if (v12)
          v13 = (v8 >> 31) + 0x7FFFFFFF;
        if (*((_BYTE *)this + 14))
        {
          v16 = *((float *)this + 2);
          *(float *)&v14 = v16;
          v15 = v16;
        }
        else
        {
          v14 = *((int *)this + 2);
          v15 = (float)v14;
          v16 = *(float *)&v14;
        }
        v17 = v15 * 64.0;
        if (v17 > -2147483650.0)
          v18 = (int)v17;
        else
          v18 = 0x80000000;
        if (v17 >= 2147483650.0)
          v18 = 0x7FFFFFFF;
        v19 = (v18 >> 31) + 0x7FFFFFFF;
        if (!__OFADD__(v18, v13))
          v19 = v18 + v13;
        if (v1 <= v19)
          v1 = v19;
        if (*((_BYTE *)this + 6))
        {
          v22 = *(float *)this;
          v20 = *(float *)this;
          v21 = *(float *)this;
        }
        else
        {
          v20 = *(float *)this;
          v21 = (float)*(int *)this;
          v22 = *(float *)this;
        }
        v23 = v21 * 64.0;
        if (v23 >= 2147483650.0)
        {
          v24 = 0x7FFFFFFF;
        }
        else if (v23 > -2147483650.0)
        {
          v24 = (int)v23;
        }
        else
        {
          v24 = 0x80000000;
        }
        v25 = v24 - v13;
        if (__OFSUB__(v24, v13))
          v25 = (v24 >> 31) + 0x7FFFFFFF;
        if (v25 >= (int)v2)
          v2 = v2;
        else
          v2 = v25;
        if (!*((_BYTE *)this + 14))
          v16 = (float)v14;
        v26 = v16 * 64.0;
        if (v26 >= 2147483650.0)
        {
          v27 = 0x7FFFFFFF;
        }
        else if (v26 > -2147483650.0)
        {
          v27 = (int)v26;
        }
        else
        {
          v27 = 0x80000000;
        }
        v28 = v27 - v13;
        if (__OFSUB__(v27, v13))
          v28 = (v27 >> 31) + 0x7FFFFFFF;
        if (v28 < v3)
          v3 = v28;
        v29 = (float)SLODWORD(v20);
        if (*((_BYTE *)this + 6))
          v29 = v22;
        v30 = v29 * 64.0;
        if (v30 >= 2147483650.0)
        {
          v31 = 0x7FFFFFFF;
        }
        else if (v30 <= -2147483650.0)
        {
          v31 = 0x80000000;
        }
        else
        {
          v31 = (int)v30;
        }
        v12 = __OFADD__(v31, v13);
        v32 = v31 + v13;
        if (v12)
          v32 = (v31 >> 31) + 0x7FFFFFFF;
        if (v4 <= v32)
          v4 = v32;
      }
      this = (WebCore::ShadowData *)*((_QWORD *)this + 7);
    }
    while (this);
  }
  else
  {
    v2 = 0;
    v1 = 0;
  }
  return v1 | (unint64_t)(v2 << 32);
}

unint64_t WebCore::ShadowData::adjustRectForShadow(WebCore::ShadowData *this, WebCore::LayoutRect *a2)
{
  unint64_t result;
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  BOOL v8;
  int v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;

  result = WebCore::ShadowData::shadowOutsetExtent(this);
  v6 = *((_DWORD *)a2 + 1);
  v7 = (*(_DWORD *)a2 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(*(_DWORD *)a2, v5))
    v7 = *(_DWORD *)a2 + v5;
  v8 = __OFADD__(v6, (_DWORD)result);
  v9 = v6 + result;
  v10 = (v6 >> 31) + 0x7FFFFFFF;
  if (!v8)
    v10 = v9;
  *(_DWORD *)a2 = v7;
  *((_DWORD *)a2 + 1) = v10;
  v11 = *((_DWORD *)a2 + 2);
  v12 = *((_DWORD *)a2 + 3);
  v8 = __OFSUB__(v11, v5);
  v13 = v11 - v5;
  v14 = (v11 >> 31) + 0x7FFFFFFF;
  if (v8)
    v13 = v14;
  v8 = __OFADD__(v13, HIDWORD(result));
  v15 = v13 + HIDWORD(result);
  v16 = (v13 >> 31) + 0x7FFFFFFF;
  if (!v8)
    v16 = v15;
  v8 = __OFSUB__(v12, (_DWORD)result);
  v17 = v12 - result;
  v18 = (v12 >> 31) + 0x7FFFFFFF;
  if (v8)
    v17 = v18;
  v8 = __OFADD__(v17, v4);
  v19 = v17 + v4;
  v20 = (v17 >> 31) + 0x7FFFFFFF;
  if (!v8)
    v20 = v19;
  *((_DWORD *)a2 + 2) = v16;
  *((_DWORD *)a2 + 3) = v20;
  return result;
}

float WebCore::ShadowData::adjustRectForShadow(WebCore::ShadowData *this, WebCore::FloatRect *a2)
{
  unint64_t v3;
  int v4;
  float v5;
  float v6;
  float v7;
  float result;
  int v9;
  float v10;

  v3 = WebCore::ShadowData::shadowOutsetExtent(this);
  v5 = (float)v4 * 0.015625;
  v6 = (float)(int)v3 * 0.015625;
  v7 = *((float *)a2 + 1) + v6;
  *(float *)a2 = *(float *)a2 + v5;
  *((float *)a2 + 1) = v7;
  result = (float)((float)SHIDWORD(v3) * 0.015625) + (float)(*((float *)a2 + 2) - v5);
  v10 = (float)((float)v9 * 0.015625) + (float)(*((float *)a2 + 3) - v6);
  *((float *)a2 + 2) = result;
  *((float *)a2 + 3) = v10;
  return result;
}

uint64_t WebCore::ShapeValue::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  if (*(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4) || *(unsigned __int8 *)(a1 + 24) != *(unsigned __int8 *)(a2 + 24))
    return 0;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4 == v5
    || (result = 0, v4)
    && v5
    && (result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 64))(*(_QWORD *)(a1 + 8)), (_DWORD)result))
  {
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a2 + 16);
    if (v7 == v8)
    {
      return 1;
    }
    else
    {
      result = 0;
      if (v7)
      {
        if (v8)
          return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v7 + 16))(*(_QWORD *)(a1 + 16));
      }
    }
  }
  return result;
}

void WebCore::StyleCustomPropertyData::~StyleCustomPropertyData(WebCore::StyleCustomPropertyData *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  WebCore::StyleCustomPropertyData *v8;
  WTF *v9;
  void *v10;

  v3 = *((_QWORD *)this + 2);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = *((_QWORD *)this + 2);
      do
      {
        v6 = *(WTF::StringImpl **)v5;
        if (*(_QWORD *)v5 != -1)
        {
          v7 = *(_DWORD **)(v5 + 8);
          *(_QWORD *)(v5 + 8) = 0;
          if (v7)
          {
            if (*v7 == 2)
            {
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v7, a2);
              v6 = *(WTF::StringImpl **)v5;
            }
            else
            {
              *v7 -= 2;
            }
          }
          *(_QWORD *)v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 2)
              WTF::StringImpl::destroy(v6, a2);
            else
              *(_DWORD *)v6 -= 2;
          }
        }
        v5 += 16;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v8 = (WebCore::StyleCustomPropertyData *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v8)
  {
    if (*(_DWORD *)v8 == 1)
    {
      WebCore::StyleCustomPropertyData::~StyleCustomPropertyData(v8);
      WTF::fastFree(v9, v10);
    }
    else
    {
      --*(_DWORD *)v8;
    }
  }
}

BOOL WTF::operator==<WTF::AtomString,WebCore::CounterDirectives,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::CounterDirectives>,WTF::HashTableTraits>(_QWORD **a1, uint64_t *a2)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _BOOL8 result;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v3 = *a1;
  if (*a1)
    v4 = *((_DWORD *)v3 - 3);
  else
    v4 = 0;
  v5 = *a2;
  if (*a2)
    v6 = *(_DWORD *)(v5 - 12);
  else
    v6 = 0;
  if (v4 != v6)
    return 0;
  if (v3)
    v7 = &v3[4 * *((unsigned int *)v3 - 1)];
  else
    v7 = 0;
  if (v5)
    v8 = v5 + 32 * *(unsigned int *)(v5 - 4);
  else
    v8 = 0;
  if (!v3)
  {
    v9 = 0;
    v10 = 0;
LABEL_12:
    v11 = &v3[4 * v10];
    v3 = v9;
    goto LABEL_13;
  }
  v10 = *((unsigned int *)v3 - 1);
  v11 = &v3[4 * v10];
  if (!*((_DWORD *)v3 - 3))
  {
    v9 = &v3[4 * v10];
    goto LABEL_12;
  }
  if ((_DWORD)v10)
  {
    v15 = 32 * v10;
    while ((unint64_t)(*v3 + 1) <= 1)
    {
      v3 += 4;
      v15 -= 32;
      if (!v15)
      {
        v3 = v11;
        break;
      }
    }
  }
LABEL_13:
  if (v7 != v3)
  {
    while (1)
    {
      v13 = WTF::HashMap<WTF::AtomString,WebCore::CounterDirectives,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::CounterDirectives>,WTF::HashTableTraits>::find(a2, (uint64_t)v3);
      if (v8 == v13)
        return 0;
      result = WebCore::operator==((uint64_t)(v3 + 1), v13 + 8);
      if (result)
      {
        v14 = v3 + 4;
        v3 = v11;
        if (v14 != v11)
        {
          v3 = v14;
          while ((unint64_t)(*v3 + 1) <= 1)
          {
            v3 += 4;
            if (v3 == v11)
            {
              v3 = v11;
              break;
            }
          }
        }
        result = 1;
        if (v3 != v7)
          continue;
      }
      return result;
    }
  }
  return 1;
}

uint64_t WebCore::StyleReflection::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  float *v3;
  float v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  char isCalculatedEqual;
  uint64_t v10;
  uint64_t v11;

  if (*(unsigned __int8 *)(a1 + 4) != *(unsigned __int8 *)(a2 + 4))
    return 0;
  v2 = *(unsigned __int8 *)(a1 + 12);
  if (v2 != *(unsigned __int8 *)(a2 + 12) || (*(_BYTE *)(a1 + 13) != 0) != (*(_BYTE *)(a2 + 13) != 0))
    return 0;
  if (v2 != 13)
  {
    v3 = (float *)(a1 + 8);
    if (v2 != 11)
    {
      if (*(_BYTE *)(a1 + 14))
        v4 = *v3;
      else
        v4 = (float)*(int *)v3;
      v5 = *(float *)(a2 + 8);
      if (!*(_BYTE *)(a2 + 14))
        v5 = (float)SLODWORD(v5);
      if (v4 == v5)
        goto LABEL_12;
      return 0;
    }
    v10 = a2;
    v11 = a1;
    isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 8), (const WebCore::Length *)(a2 + 8));
    a2 = v10;
    a1 = v11;
    if ((isCalculatedEqual & 1) == 0)
      return 0;
  }
LABEL_12:
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a2 + 16);
  if (v6 == v7)
    return 1;
  else
    return WebCore::NinePieceImage::Data::operator==(v6, v7);
}

uint64_t WTF::HashMap<WTF::AtomString,WebCore::CounterDirectives,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::CounterDirectives>,WTF::HashTableTraits>::find(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int i;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  if (!*a1)
    return 0;
  v3 = 0;
  for (i = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8; ; i = v3 + v5)
  {
    v5 = i & *(_DWORD *)(v2 - 8);
    v6 = *(_QWORD *)(v2 + 32 * v5);
    if (v6 != -1)
    {
      if (!v6)
        return v2 + 32 * *(unsigned int *)(v2 - 4);
      if (v6 == *(_QWORD *)a2)
        break;
    }
    ++v3;
  }
  return v2 + 32 * v5;
}

BOOL WebCore::StyleGridData::operator==(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  unint64_t v3;
  _BOOL8 result;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _BOOL4 v14;
  _BOOL4 v16;
  _BOOL4 v17;
  char v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _BOOL4 v27;
  _BOOL4 v29;
  _BOOL4 v30;
  char v31;
  const WTF::StringImpl *v32;
  const WTF::StringImpl *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  BOOL v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  BOOL v49;
  char v51;
  char *v52;

  v3 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v3 != *(_DWORD *)(a2 + 100))
    return 0;
  if ((_DWORD)v3)
  {
    v7 = 0;
    v8 = 0;
    v9 = *(_QWORD *)(a1 + 88);
    v10 = *(_QWORD *)(a2 + 88);
    while (1)
    {
      v11 = *(unsigned int *)(v9 + 88);
      v12 = *(_DWORD *)(v10 + 88);
      v14 = v12 == (_DWORD)v11 && v12 != -1;
      if ((_DWORD)v11 == -1 || !v14)
      {
        v16 = v12 == -1;
        if ((_DWORD)v11 == -1)
          v17 = v16;
        else
          v17 = v14;
        if (!v17)
        {
LABEL_24:
          if (!v7)
            return 0;
          break;
        }
      }
      else
      {
        v52 = &v51;
        v18 = ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E3441A80[v11])(&v52, v9, v10);
        if ((v18 & 1) == 0)
          goto LABEL_24;
      }
      v7 = ++v8 >= v3;
      v10 += 96;
      v9 += 96;
      if (v3 == v8)
        goto LABEL_24;
    }
  }
  v19 = *(unsigned int *)(a1 + 116);
  if ((_DWORD)v19 != *(_DWORD *)(a2 + 116))
    return 0;
  if ((_DWORD)v19)
  {
    v20 = 0;
    v21 = 0;
    v22 = *(_QWORD *)(a1 + 104);
    v23 = *(_QWORD *)(a2 + 104);
    while (1)
    {
      v24 = *(unsigned int *)(v22 + 88);
      v25 = *(_DWORD *)(v23 + 88);
      v27 = v25 == (_DWORD)v24 && v25 != -1;
      if ((_DWORD)v24 == -1 || !v27)
      {
        v29 = v25 == -1;
        if ((_DWORD)v24 == -1)
          v30 = v29;
        else
          v30 = v27;
        if (!v30)
        {
LABEL_46:
          if (v20)
            break;
          return 0;
        }
      }
      else
      {
        v52 = &v51;
        v31 = ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E3441A80[v24])(&v52, v22, v23);
        if ((v31 & 1) == 0)
          goto LABEL_46;
      }
      v20 = ++v21 >= v19;
      v23 += 96;
      v22 += 96;
      if (v19 == v21)
        goto LABEL_46;
    }
  }
  result = WTF::operator==<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>((WTF::StringImpl ***)(a1 + 8), (uint64_t *)(a2 + 8), a3);
  if (result)
  {
    result = WTF::operator==<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>((WTF::StringImpl ***)(a1 + 16), (uint64_t *)(a2 + 16), v32);
    if (result)
    {
      if (((*(_BYTE *)(a2 + 24) ^ *(_BYTE *)(a1 + 24)) & 0xF) != 0)
        return 0;
      v34 = *(unsigned int *)(a1 + 52);
      if ((_DWORD)v34 != *(_DWORD *)(a2 + 52))
        return 0;
      if ((_DWORD)v34)
      {
        v35 = *(_QWORD *)(a1 + 40);
        v36 = *(_QWORD *)(a2 + 40);
        result = WebCore::GridTrackSize::operator==(v35, v36);
        if (!result)
          return result;
        v37 = v35 + 88;
        v38 = v36 + 88;
        v39 = 1;
        do
        {
          v40 = v39;
          if (v34 == v39)
            break;
          v41 = WebCore::GridTrackSize::operator==(v37, v38);
          v39 = v40 + 1;
          v37 += 88;
          v38 += 88;
        }
        while (v41);
        if (v40 < v34)
          return 0;
      }
      v42 = *(unsigned int *)(a1 + 68);
      if ((_DWORD)v42 != *(_DWORD *)(a2 + 68))
        return 0;
      if ((_DWORD)v42)
      {
        v43 = *(_QWORD *)(a1 + 56);
        v44 = *(_QWORD *)(a2 + 56);
        result = WebCore::GridTrackSize::operator==(v43, v44);
        if (!result)
          return result;
        v45 = v43 + 88;
        v46 = v44 + 88;
        v47 = 1;
        do
        {
          v48 = v47;
          if (v42 == v47)
            break;
          v49 = WebCore::GridTrackSize::operator==(v45, v46);
          v47 = v48 + 1;
          v45 += 88;
          v46 += 88;
        }
        while (v49);
        if (v48 < v42)
          return 0;
      }
      result = WTF::operator==<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>((uint64_t *)(a1 + 72), (uint64_t *)(a2 + 72), v33);
      if (result)
      {
        if (*(_DWORD *)(a1 + 80) != *(_DWORD *)(a2 + 80)
          || *(_DWORD *)(a1 + 84) != *(_DWORD *)(a2 + 84)
          || *(unsigned __int8 *)(a1 + 260) != *(unsigned __int8 *)(a2 + 260)
          || *(unsigned __int8 *)(a1 + 261) != *(unsigned __int8 *)(a2 + 261))
        {
          return 0;
        }
        return *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28) && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
      }
    }
  }
  return result;
}

uint64_t WebCore::StyleGridItemData::operator==(WTF **a1, const WTF::StringImpl **a2, const WTF::StringImpl *a3)
{
  const WTF::StringImpl *v5;
  const WTF::StringImpl *v6;
  const WTF::StringImpl *v7;

  if (WebCore::operator==(a1 + 1, a2 + 1, a3)
    && WebCore::operator==(a1 + 3, a2 + 3, v5)
    && WebCore::operator==(a1 + 5, a2 + 5, v6))
  {
    return WebCore::operator==(a1 + 7, a2 + 7, v7);
  }
  else
  {
    return 0;
  }
}

uint64_t *WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::HashTable(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  int v4;
  unsigned int v7;
  uint64_t v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;
  uint64_t *v11;
  WTF::StringImpl *v12;
  WTF::StringImpl *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v20;

  *a1 = 0;
  v3 = (_QWORD *)*a2;
  if (*a2)
  {
    v4 = *((_DWORD *)v3 - 3);
    if (v4)
    {
      v7 = WTF::HashTable<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::DefaultWeakPtrImpl>>>>::computeBestTableSize(*((_DWORD *)v3 - 3));
      v8 = WTF::fastZeroedMalloc((WTF *)(8 * v7 + 16));
      *a1 = v8 + 16;
      *(_DWORD *)(v8 + 12) = v7;
      *(_DWORD *)(*a1 - 8) = v7 - 1;
      *(_DWORD *)(*a1 - 12) = v4;
      *(_DWORD *)(*a1 - 16) = 0;
      v9 = (WTF::StringImpl *)WTF::HashTable<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>,WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>,WTF::HashTraits<WTF::CheckedPtr<WebCore::LayerPool,WTF::RawPtrTraits<WebCore::LayerPool>>>>::begin((_QWORD **)a2);
      v10 = v9;
      v11 = a2;
      v13 = v12;
      v14 = *v11;
      v15 = v14 ? v14 + 8 * *(unsigned int *)(v14 - 4) : 0;
      if ((WTF::StringImpl *)v15 != v9)
      {
        do
        {
          v16 = *a1;
          if (*a1)
            v17 = *(_DWORD *)(v16 - 8);
          else
            v17 = 0;
          v18 = 0;
          v19 = *(_DWORD *)(*(_QWORD *)v10 + 16) >> 8;
          do
          {
            v20 = v19 & v17;
            v19 = ++v18 + v20;
          }
          while (*(_QWORD *)(v16 + 8 * v20));
          WTF::IdentityHashTranslator<WTF::HashTraits<WTF::AtomString>,WTF::DefaultHash<WTF::AtomString>>::translate<WTF::AtomString,WTF::AtomString,WTF::AtomString const&>((WTF::StringImpl **)(v16 + 8 * v20), v10, (WTF::StringImpl **)v10);
          while (1)
          {
            v10 = (WTF::StringImpl *)((char *)v10 + 8);
            if (v10 == v13)
              break;
            if ((unint64_t)(*(_QWORD *)v10 + 1) > 1)
              goto LABEL_17;
          }
          v10 = v13;
LABEL_17:
          ;
        }
        while (v10 != (WTF::StringImpl *)v15);
      }
    }
  }
  return a1;
}

uint64_t std::default_delete<WebCore::ShadowData>::operator()[abi:sn180100](uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  unsigned int **v4;
  void *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  char v10;

  if (a2)
  {
    v4 = (unsigned int **)(a2 + 14);
    v3 = *((_QWORD *)a2 + 7);
    if (v3)
    {
      *v4 = 0;
      do
      {
        v8 = *(_QWORD *)(v3 + 56);
        *(_QWORD *)(v3 + 56) = 0;
        v9 = v8;
        std::default_delete<WebCore::ShadowData>::operator()[abi:sn180100](&v9);
        v3 = v9;
      }
      while (v9);
    }
    std::unique_ptr<WebCore::ShadowData>::~unique_ptr[abi:sn180100](v4);
    v6 = a2[10];
    if ((_DWORD)v6 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v6])(&v10, a2 + 8);
    a2[10] = -1;
    if (*((_BYTE *)a2 + 28) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a2[6]);
    }
    if (*((_BYTE *)a2 + 20) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a2[4]);
    }
    if (*((_BYTE *)a2 + 12) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)a2[2]);
    }
    if (*((_BYTE *)a2 + 4) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*a2);
    }
    return WTF::fastFree((WTF *)a2, v5);
  }
  return result;
}

void WTF::Vector<WTF::Ref<WebCore::Animation,WTF::RawPtrTraits<WebCore::Animation>,WTF::DefaultRefDerefTraits<WebCore::Animation>>,0ul,WTF::CrashOnOverflow,0ul,WTF::FastMalloc>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  WebCore::Animation **v11;
  uint64_t v12;
  WebCore::Animation *v13;
  WTF *v14;
  void *v15;

  v4 = *(unsigned int *)(a1 + 12);
  if (v4 >= a2)
  {
    if (v4 != a2)
    {
      v11 = (WebCore::Animation **)(*(_QWORD *)a1 + 8 * a2);
      v12 = 8 * v4 - 8 * a2;
      do
      {
        v13 = *v11;
        *v11 = 0;
        if (v13)
        {
          if (*(_DWORD *)v13 == 1)
          {
            WebCore::Animation::~Animation(v13, (WTF::StringImpl *)a2);
            WTF::fastFree(v14, v15);
          }
          else
          {
            --*(_DWORD *)v13;
          }
        }
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
    goto LABEL_21;
  }
  v5 = *(unsigned int *)(a1 + 8);
  if (v5 >= a2)
  {
LABEL_11:
    if (*(_QWORD *)a1)
      bzero((void *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12)), 8 * a2 - 8 * *(unsigned int *)(a1 + 12));
LABEL_21:
    *(_DWORD *)(a1 + 12) = a2;
    return;
  }
  v6 = v5 + (v5 >> 2);
  if (v6 + 1 > a2)
    v7 = v6 + 1;
  else
    v7 = a2;
  if (!(v7 >> 29))
  {
    v8 = *(void **)a1;
    v9 = (void *)WTF::fastMalloc((WTF *)(8 * v7));
    *(_DWORD *)(a1 + 8) = v7;
    *(_QWORD *)a1 = v9;
    memcpy(v9, v8, 8 * v4);
    if (v8)
    {
      if (*(void **)a1 == v8)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
      }
      WTF::fastFree((WTF *)v8, v10);
    }
    goto LABEL_11;
  }
  __break(0xC471u);
}

int *WebCore::StyleStrokeData::StyleStrokeData(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  int *result;
  unsigned int v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char **v22;

  *(_DWORD *)a1 = 1;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v18 = &v17;
  v19 = &v17;
  v20 = &v17;
  v21 = &v17;
  v2 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v2 == -1
    || (v22 = &v18,
        ((void (*)(char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v2])(&v22, a2 + 8), v18 = &v17, v19 = &v17, v20 = &v17, v21 = &v17, v5 = *(unsigned int *)(a2 + 32), (_DWORD)v5 == -1))
  {
    result = (int *)std::__throw_bad_variant_access[abi:sn180100]();
  }
  else
  {
    v22 = &v18;
    ((void (*)(char ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v5])(&v22, a2 + 24);
    v6 = *(_DWORD **)(a2 + 40);
    if (v6)
      *v6 += 2;
    *(_QWORD *)(a1 + 40) = v6;
    v7 = *(_DWORD **)(a2 + 48);
    if (v7)
      *v7 += 2;
    *(_DWORD *)(a1 + 56) = 0;
    result = (int *)(a1 + 56);
    *(_QWORD *)(a1 + 48) = v7;
    *(_WORD *)(a1 + 61) = 0;
    v9 = *(unsigned __int8 *)(a2 + 60);
    *(_BYTE *)(a1 + 60) = v9;
    *(_BYTE *)(a1 + 61) = *(_BYTE *)(a2 + 61);
    if (v9 <= 0xD)
    {
      v10 = 1 << v9;
      if ((v10 & 0x7FC) != 0)
      {
        *(_BYTE *)(a1 + 62) = *(_BYTE *)(a2 + 62);
        *result = *(_DWORD *)(a2 + 56);
      }
      else if ((v10 & 0x3003) != 0)
      {
        *result = 0;
      }
      else
      {
        *result = *(_DWORD *)(a2 + 56);
        result = WebCore::Length::ref(result);
      }
    }
    v11 = *(unsigned int *)(a2 + 76);
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 76) = v11;
    if (!(_DWORD)v11)
      goto LABEL_13;
    if (!(v11 >> 29))
    {
      v12 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v11));
      *(_DWORD *)(a1 + 72) = v11;
      *(_QWORD *)(a1 + 64) = v12;
      v13 = *(unsigned int *)(a2 + 76);
      if ((_DWORD)v13)
      {
        v14 = *(uint64_t **)(a2 + 64);
        v15 = 8 * v13;
        do
        {
          v16 = *v14++;
          *v12++ = v16;
          v15 -= 8;
        }
        while (v15);
      }
LABEL_13:
      *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
      return (int *)a1;
    }
  }
  __break(0xC471u);
  return result;
}

WebCore::StyleLayoutData *WebCore::StyleLayoutData::StyleLayoutData(WebCore::StyleLayoutData *this, const WebCore::StyleLayoutData *a2)
{
  unsigned int v4;
  int *v5;
  int v6;
  int *v7;
  unsigned int v8;
  int v9;
  int *v10;
  unsigned int v11;
  int v12;
  int *v13;
  unsigned int v14;
  int v15;
  int *v16;
  unsigned int v17;
  int v18;
  int *v19;
  unsigned int v20;
  int v21;
  int *v22;
  unsigned int v23;
  int v24;
  uint64_t v25;

  *(_QWORD *)this = 1;
  *(_WORD *)((char *)this + 9) = 0;
  v4 = *((unsigned __int8 *)a2 + 8);
  *((_BYTE *)this + 8) = v4;
  *((_BYTE *)this + 9) = *((_BYTE *)a2 + 9);
  if (v4 <= 0xD)
  {
    v5 = (int *)((char *)this + 4);
    v6 = 1 << v4;
    if ((v6 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 10) = *((_BYTE *)a2 + 10);
      *v5 = *((_DWORD *)a2 + 1);
    }
    else if ((v6 & 0x3003) != 0)
    {
      *v5 = 0;
    }
    else
    {
      *v5 = *((_DWORD *)a2 + 1);
      WebCore::Length::ref(v5);
    }
  }
  *((_DWORD *)this + 3) = 0;
  v7 = (int *)((char *)this + 12);
  *(_WORD *)((char *)this + 17) = 0;
  v8 = *((unsigned __int8 *)a2 + 16);
  *((_BYTE *)this + 16) = v8;
  *((_BYTE *)this + 17) = *((_BYTE *)a2 + 17);
  if (v8 <= 0xD)
  {
    v9 = 1 << v8;
    if ((v9 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 18) = *((_BYTE *)a2 + 18);
      *v7 = *((_DWORD *)a2 + 3);
    }
    else if ((v9 & 0x3003) != 0)
    {
      *v7 = 0;
    }
    else
    {
      *v7 = *((_DWORD *)a2 + 3);
      WebCore::Length::ref(v7);
    }
  }
  *((_DWORD *)this + 5) = 0;
  v10 = (int *)((char *)this + 20);
  *(_WORD *)((char *)this + 25) = 0;
  v11 = *((unsigned __int8 *)a2 + 24);
  *((_BYTE *)this + 24) = v11;
  *((_BYTE *)this + 25) = *((_BYTE *)a2 + 25);
  if (v11 <= 0xD)
  {
    v12 = 1 << v11;
    if ((v12 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 26) = *((_BYTE *)a2 + 26);
      *v10 = *((_DWORD *)a2 + 5);
    }
    else if ((v12 & 0x3003) != 0)
    {
      *v10 = 0;
    }
    else
    {
      *v10 = *((_DWORD *)a2 + 5);
      WebCore::Length::ref(v10);
    }
  }
  *((_DWORD *)this + 7) = 0;
  v13 = (int *)((char *)this + 28);
  *(_WORD *)((char *)this + 33) = 0;
  v14 = *((unsigned __int8 *)a2 + 32);
  *((_BYTE *)this + 32) = v14;
  *((_BYTE *)this + 33) = *((_BYTE *)a2 + 33);
  if (v14 <= 0xD)
  {
    v15 = 1 << v14;
    if ((v15 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 34) = *((_BYTE *)a2 + 34);
      *v13 = *((_DWORD *)a2 + 7);
    }
    else if ((v15 & 0x3003) != 0)
    {
      *v13 = 0;
    }
    else
    {
      *v13 = *((_DWORD *)a2 + 7);
      WebCore::Length::ref(v13);
    }
  }
  *((_DWORD *)this + 9) = 0;
  v16 = (int *)((char *)this + 36);
  *(_WORD *)((char *)this + 41) = 0;
  v17 = *((unsigned __int8 *)a2 + 40);
  *((_BYTE *)this + 40) = v17;
  *((_BYTE *)this + 41) = *((_BYTE *)a2 + 41);
  if (v17 <= 0xD)
  {
    v18 = 1 << v17;
    if ((v18 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 42) = *((_BYTE *)a2 + 42);
      *v16 = *((_DWORD *)a2 + 9);
    }
    else if ((v18 & 0x3003) != 0)
    {
      *v16 = 0;
    }
    else
    {
      *v16 = *((_DWORD *)a2 + 9);
      WebCore::Length::ref(v16);
    }
  }
  *((_DWORD *)this + 11) = 0;
  v19 = (int *)((char *)this + 44);
  *(_WORD *)((char *)this + 49) = 0;
  v20 = *((unsigned __int8 *)a2 + 48);
  *((_BYTE *)this + 48) = v20;
  *((_BYTE *)this + 49) = *((_BYTE *)a2 + 49);
  if (v20 <= 0xD)
  {
    v21 = 1 << v20;
    if ((v21 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 50) = *((_BYTE *)a2 + 50);
      *v19 = *((_DWORD *)a2 + 11);
    }
    else if ((v21 & 0x3003) != 0)
    {
      *v19 = 0;
    }
    else
    {
      *v19 = *((_DWORD *)a2 + 11);
      WebCore::Length::ref(v19);
    }
  }
  *((_DWORD *)this + 13) = 0;
  v22 = (int *)((char *)this + 52);
  *(_WORD *)((char *)this + 57) = 0;
  v23 = *((unsigned __int8 *)a2 + 56);
  *((_BYTE *)this + 56) = v23;
  *((_BYTE *)this + 57) = *((_BYTE *)a2 + 57);
  if (v23 <= 0xD)
  {
    v24 = 1 << v23;
    if ((v24 & 0x7FC) != 0)
    {
      *((_BYTE *)this + 58) = *((_BYTE *)a2 + 58);
      *v22 = *((_DWORD *)a2 + 13);
    }
    else if ((v24 & 0x3003) != 0)
    {
      *v22 = 0;
    }
    else
    {
      *v22 = *((_DWORD *)a2 + 13);
      WebCore::Length::ref(v22);
    }
  }
  v25 = *((_QWORD *)a2 + 8);
  if (v25)
    ++*(_DWORD *)(v25 + 8);
  *((_QWORD *)this + 8) = v25;
  return this;
}

unsigned int **std::unique_ptr<WebCore::ShadowData>::~unique_ptr[abi:sn180100](unsigned int **a1)
{
  unsigned int *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *((_QWORD *)v2 + 7);
    if (v3)
    {
      *((_QWORD *)v2 + 7) = 0;
      do
      {
        v7 = *(_QWORD *)(v3 + 56);
        *(_QWORD *)(v3 + 56) = 0;
        v8 = v7;
        std::default_delete<WebCore::ShadowData>::operator()[abi:sn180100](&v8);
        v3 = v8;
      }
      while (v8);
    }
    std::unique_ptr<WebCore::ShadowData>::reset[abi:sn180100]((unsigned int **)v2 + 7, 0);
    v5 = v2[10];
    if ((_DWORD)v5 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v5])(&v9, v2 + 8);
    v2[10] = -1;
    if (*((_BYTE *)v2 + 28) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v2[6]);
    }
    if (*((_BYTE *)v2 + 20) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v2[4]);
    }
    if (*((_BYTE *)v2 + 12) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v2[2]);
    }
    if (*((_BYTE *)v2 + 4) == 11)
    {
      {
        WebCore::calculationValues(void)::map = 1;
        qword_1ECE90C98 = 0;
      }
      WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v2);
    }
    WTF::fastFree((WTF *)v2, v4);
  }
  return a1;
}

uint64_t *WTF::Ref<WebCore::StyleInheritedData,WTF::RawPtrTraits<WebCore::StyleInheritedData>,WTF::DefaultRefDerefTraits<WebCore::StyleInheritedData>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *(_QWORD *)(v3 + 336);
      if ((v5 & 0x8000000000000) != 0)
      {
        v8 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
        do
        {
          v9 = __ldaxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, a2);
        }
      }
      v6 = *(_QWORD *)(v3 + 328);
      if ((v6 & 0x8000000000000) != 0)
      {
        v11 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
        do
        {
          v12 = __ldaxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
        {
          atomic_store(1u, v11);
          WTF::fastFree((WTF *)v11, a2);
        }
      }
      WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)(v3 + 32), a2);
      if (*(_BYTE *)(v3 + 24) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 20));
      }
      if (*(_BYTE *)(v3 + 16) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 12));
      }
      WTF::fastFree((WTF *)v3, v7);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

WTF **WTF::Ref<WebCore::StyleNonInheritedData,WTF::RawPtrTraits<WebCore::StyleNonInheritedData>,WTF::DefaultRefDerefTraits<WebCore::StyleNonInheritedData>>::~Ref(WTF **a1, WTF::StringImpl *a2)
{
  WTF *v3;
  WebCore::StyleRareNonInheritedData *v5;
  WebCore::StyleMiscNonInheritedData *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  WebCore::FillLayer *v14;
  WebCore::NinePieceImage::Data *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  WTF *v20;
  void *v21;
  WTF *v22;
  void *v23;
  WTF *v24;
  void *v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = (WebCore::StyleRareNonInheritedData *)*((_QWORD *)v3 + 5);
      *((_QWORD *)v3 + 5) = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 1)
        {
          WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v5, a2);
          WTF::fastFree(v10, v11);
        }
        else
        {
          --*(_DWORD *)v5;
        }
      }
      v6 = (WebCore::StyleMiscNonInheritedData *)*((_QWORD *)v3 + 4);
      *((_QWORD *)v3 + 4) = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 1)
        {
          WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v6, a2);
          WTF::fastFree(v20, v21);
        }
        else
        {
          --*(_DWORD *)v6;
        }
      }
      v7 = *((_QWORD *)v3 + 3);
      *((_QWORD *)v3 + 3) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
        {
          if (*(_BYTE *)(v7 + 268) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v7 + 264));
          }
          if (*(_BYTE *)(v7 + 260) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v7 + 256));
          }
          if (*(_BYTE *)(v7 + 252) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v7 + 248));
          }
          if (*(_BYTE *)(v7 + 244) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v7 + 240));
          }
          if (*(_BYTE *)(v7 + 236) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v7 + 232));
          }
          if (*(_BYTE *)(v7 + 228) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v7 + 224));
          }
          if (*(_BYTE *)(v7 + 220) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v7 + 216));
          }
          if (*(_BYTE *)(v7 + 212) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v7 + 208));
          }
          v15 = *(WebCore::NinePieceImage::Data **)(v7 + 200);
          *(_QWORD *)(v7 + 200) = 0;
          if (v15)
          {
            if (*(_DWORD *)v15 == 1)
            {
              WebCore::NinePieceImage::Data::~Data(v15);
              WTF::fastFree(v24, v25);
            }
            else
            {
              --*(_DWORD *)v15;
            }
          }
          v16 = *(unsigned int *)(v7 + 184);
          if ((_DWORD)v16 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v16])(&v26, v7 + 176);
          *(_DWORD *)(v7 + 184) = -1;
          v17 = *(unsigned int *)(v7 + 160);
          if ((_DWORD)v17 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v17])(&v27, v7 + 152);
          *(_DWORD *)(v7 + 160) = -1;
          v18 = *(unsigned int *)(v7 + 136);
          if ((_DWORD)v18 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v18])(&v28, v7 + 128);
          *(_DWORD *)(v7 + 136) = -1;
          v19 = *(unsigned int *)(v7 + 112);
          if ((_DWORD)v19 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v19])(&v29, v7 + 104);
          *(_DWORD *)(v7 + 112) = -1;
          if (*(_BYTE *)(v7 + 100) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v7 + 96));
          }
          if (*(_BYTE *)(v7 + 92) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v7 + 88));
          }
          if (*(_BYTE *)(v7 + 84) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v7 + 80));
          }
          if (*(_BYTE *)(v7 + 76) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v7 + 72));
          }
          if (*(_BYTE *)(v7 + 68) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v7 + 64));
          }
          if (*(_BYTE *)(v7 + 60) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v7 + 56));
          }
          if (*(_BYTE *)(v7 + 52) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v7 + 48));
          }
          if (*(_BYTE *)(v7 + 44) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v7 + 40));
          }
          if (*(_BYTE *)(v7 + 36) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v7 + 32));
          }
          if (*(_BYTE *)(v7 + 28) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v7 + 24));
          }
          if (*(_BYTE *)(v7 + 20) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v7 + 16));
          }
          if (*(_BYTE *)(v7 + 12) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v7 + 8));
          }
          WTF::fastFree((WTF *)v7, a2);
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
      v8 = *((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 2) = 0;
      if (v8)
      {
        if (*(_DWORD *)v8 == 1)
        {
          v12 = *(unsigned int *)(v8 + 40);
          if ((_DWORD)v12 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v12])(&v30, v8 + 32);
          *(_DWORD *)(v8 + 40) = -1;
          v13 = *(unsigned int *)(v8 + 24);
          if ((_DWORD)v13 != -1)
            ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v13])(&v31, v8 + 16);
          *(_DWORD *)(v8 + 24) = -1;
          v14 = *(WebCore::FillLayer **)(v8 + 8);
          *(_QWORD *)(v8 + 8) = 0;
          if (v14)
          {
            if (*(_DWORD *)v14 == 1)
            {
              WebCore::FillLayer::~FillLayer(v14);
              WTF::fastFree(v22, v23);
            }
            else
            {
              --*(_DWORD *)v14;
            }
          }
          WTF::fastFree((WTF *)v8, a2);
        }
        else
        {
          --*(_DWORD *)v8;
        }
      }
      v9 = *((_QWORD *)v3 + 1);
      *((_QWORD *)v3 + 1) = 0;
      if (v9)
      {
        if (*(_DWORD *)v9 == 1)
        {
          if (*(_BYTE *)(v9 + 56) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v9 + 52));
          }
          if (*(_BYTE *)(v9 + 48) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v9 + 44));
          }
          if (*(_BYTE *)(v9 + 40) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v9 + 36));
          }
          if (*(_BYTE *)(v9 + 32) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v9 + 28));
          }
          if (*(_BYTE *)(v9 + 24) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v9 + 20));
          }
          if (*(_BYTE *)(v9 + 16) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v9 + 12));
          }
          if (*(_BYTE *)(v9 + 8) == 11)
          {
            {
              WebCore::calculationValues(void)::map = 1;
              qword_1ECE90C98 = 0;
            }
            WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v9 + 4));
          }
          WTF::fastFree((WTF *)v9, a2);
        }
        else
        {
          --*(_DWORD *)v9;
        }
      }
      WTF::fastFree(v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t WTF::Vector<std::unique_ptr<WebCore::RenderStyle>,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,std::unique_ptr<WebCore::RenderStyle>>(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t *)WTF::Vector<JSC::JSMapIterator *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(_QWORD *)a1;
  v6 = *v3;
  *v3 = 0;
  *(_QWORD *)(v5 + 8 * v4) = v6;
  *(_DWORD *)(a1 + 12) = v4 + 1;
  return 1;
}

double WebCore::StyleBoxData::copy@<D0>(WebCore::StyleBoxData *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int *v7;
  int v8;
  int *v9;
  unsigned int v10;
  int v11;
  int *v12;
  unsigned int v13;
  int v14;
  int *v15;
  unsigned int v16;
  int v17;
  int *v18;
  unsigned int v19;
  int v20;
  int *v21;
  unsigned int v22;
  int v23;
  int *v24;
  unsigned int v25;
  int v26;
  double result;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;

  v4 = WTF::fastMalloc((WTF *)0x48);
  v5 = v4;
  *(_QWORD *)v4 = 1;
  *(_WORD *)(v4 + 9) = 0;
  v6 = *((unsigned __int8 *)this + 8);
  *(_BYTE *)(v4 + 8) = v6;
  *(_BYTE *)(v4 + 9) = *((_BYTE *)this + 9);
  if (v6 <= 0xD)
  {
    v7 = (int *)(v4 + 4);
    v8 = 1 << v6;
    if ((v8 & 0x7FC) != 0)
    {
      *(_BYTE *)(v5 + 10) = *((_BYTE *)this + 10);
      *v7 = *((_DWORD *)this + 1);
    }
    else if ((v8 & 0x3003) != 0)
    {
      *v7 = 0;
    }
    else
    {
      *v7 = *((_DWORD *)this + 1);
      WebCore::Length::ref(v7);
    }
  }
  *(_DWORD *)(v5 + 12) = 0;
  v9 = (int *)(v5 + 12);
  *(_WORD *)(v5 + 17) = 0;
  v10 = *((unsigned __int8 *)this + 16);
  *(_BYTE *)(v5 + 16) = v10;
  *(_BYTE *)(v5 + 17) = *((_BYTE *)this + 17);
  if (v10 <= 0xD)
  {
    v11 = 1 << v10;
    if ((v11 & 0x7FC) != 0)
    {
      *(_BYTE *)(v5 + 18) = *((_BYTE *)this + 18);
      *v9 = *((_DWORD *)this + 3);
    }
    else if ((v11 & 0x3003) != 0)
    {
      *v9 = 0;
    }
    else
    {
      *v9 = *((_DWORD *)this + 3);
      WebCore::Length::ref(v9);
    }
  }
  *(_DWORD *)(v5 + 20) = 0;
  v12 = (int *)(v5 + 20);
  *(_WORD *)(v5 + 25) = 0;
  v13 = *((unsigned __int8 *)this + 24);
  *(_BYTE *)(v5 + 24) = v13;
  *(_BYTE *)(v5 + 25) = *((_BYTE *)this + 25);
  if (v13 <= 0xD)
  {
    v14 = 1 << v13;
    if ((v14 & 0x7FC) != 0)
    {
      *(_BYTE *)(v5 + 26) = *((_BYTE *)this + 26);
      *v12 = *((_DWORD *)this + 5);
    }
    else if ((v14 & 0x3003) != 0)
    {
      *v12 = 0;
    }
    else
    {
      *v12 = *((_DWORD *)this + 5);
      WebCore::Length::ref(v12);
    }
  }
  *(_DWORD *)(v5 + 28) = 0;
  v15 = (int *)(v5 + 28);
  *(_WORD *)(v5 + 33) = 0;
  v16 = *((unsigned __int8 *)this + 32);
  *(_BYTE *)(v5 + 32) = v16;
  *(_BYTE *)(v5 + 33) = *((_BYTE *)this + 33);
  if (v16 <= 0xD)
  {
    v17 = 1 << v16;
    if ((v17 & 0x7FC) != 0)
    {
      *(_BYTE *)(v5 + 34) = *((_BYTE *)this + 34);
      *v15 = *((_DWORD *)this + 7);
    }
    else if ((v17 & 0x3003) != 0)
    {
      *v15 = 0;
    }
    else
    {
      *v15 = *((_DWORD *)this + 7);
      WebCore::Length::ref(v15);
    }
  }
  *(_DWORD *)(v5 + 36) = 0;
  v18 = (int *)(v5 + 36);
  *(_WORD *)(v5 + 41) = 0;
  v19 = *((unsigned __int8 *)this + 40);
  *(_BYTE *)(v5 + 40) = v19;
  *(_BYTE *)(v5 + 41) = *((_BYTE *)this + 41);
  if (v19 <= 0xD)
  {
    v20 = 1 << v19;
    if ((v20 & 0x7FC) != 0)
    {
      *(_BYTE *)(v5 + 42) = *((_BYTE *)this + 42);
      *v18 = *((_DWORD *)this + 9);
    }
    else if ((v20 & 0x3003) != 0)
    {
      *v18 = 0;
    }
    else
    {
      *v18 = *((_DWORD *)this + 9);
      WebCore::Length::ref(v18);
    }
  }
  *(_DWORD *)(v5 + 44) = 0;
  v21 = (int *)(v5 + 44);
  *(_WORD *)(v5 + 49) = 0;
  v22 = *((unsigned __int8 *)this + 48);
  *(_BYTE *)(v5 + 48) = v22;
  *(_BYTE *)(v5 + 49) = *((_BYTE *)this + 49);
  if (v22 <= 0xD)
  {
    v23 = 1 << v22;
    if ((v23 & 0x7FC) != 0)
    {
      *(_BYTE *)(v5 + 50) = *((_BYTE *)this + 50);
      *v21 = *((_DWORD *)this + 11);
    }
    else if ((v23 & 0x3003) != 0)
    {
      *v21 = 0;
    }
    else
    {
      *v21 = *((_DWORD *)this + 11);
      WebCore::Length::ref(v21);
    }
  }
  *(_DWORD *)(v5 + 52) = 0;
  v24 = (int *)(v5 + 52);
  *(_WORD *)(v5 + 57) = 0;
  v25 = *((unsigned __int8 *)this + 56);
  *(_BYTE *)(v5 + 56) = v25;
  *(_BYTE *)(v5 + 57) = *((_BYTE *)this + 57);
  if (v25 <= 0xD)
  {
    v26 = 1 << v25;
    if ((v26 & 0x7FC) != 0)
    {
      *(_BYTE *)(v5 + 58) = *((_BYTE *)this + 58);
      *v24 = *((_DWORD *)this + 13);
    }
    else if ((v26 & 0x3003) != 0)
    {
      *v24 = 0;
    }
    else
    {
      *v24 = *((_DWORD *)this + 13);
      WebCore::Length::ref(v24);
    }
  }
  result = *(double *)((char *)this + 60);
  *(double *)(v5 + 60) = result;
  v28 = *(_BYTE *)(v5 + 68) & 0xFE | *((_BYTE *)this + 68) & 1;
  *(_BYTE *)(v5 + 68) = v28;
  v29 = v28 & 0xFFFFFFFD | (2 * ((*((unsigned __int8 *)this + 68) >> 1) & 1));
  *(_BYTE *)(v5 + 68) = v29;
  v30 = v29 & 0xFFFFFFFB | (4 * ((*((unsigned __int8 *)this + 68) >> 2) & 1));
  *(_BYTE *)(v5 + 68) = v30;
  v31 = v30 & 0xFFFFFFF7 | (8 * ((*((unsigned __int8 *)this + 68) >> 3) & 1));
  *(_BYTE *)(v5 + 68) = v31;
  *(_BYTE *)(v5 + 68) = *((_BYTE *)this + 68) & 0xF0 | v31 & 0xF;
  *a2 = v5;
  return result;
}

uint64_t *WebCore::StyleCachedImage::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>, float a3@<S0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  WebCore::CachedResource *v11;
  uint64_t *result;

  v6 = WTF::fastMalloc((WTF *)0x48);
  v7 = v6;
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)(v6 + 16) = 0;
  *(_BYTE *)(v6 + 24) = 0;
  *(_QWORD *)v6 = off_1E3441AE8;
  v8 = *a1;
  *a1 = 0;
  *(_QWORD *)(v6 + 32) = v8;
  *(_BYTE *)(v6 + 40) = 1;
  *(_QWORD *)(v6 + 48) = 0;
  v9 = v6 + 48;
  *(float *)(v6 + 44) = a3;
  *(_WORD *)(v6 + 56) = 0;
  *(_DWORD *)(v6 + 60) = 0;
  *(_DWORD *)(v6 + 64) = 0;
  if (*(_BYTE *)(v8 + 64) && (v10 = *(_QWORD *)(v8 + 56)) != 0)
    v11 = *(WebCore::CachedResource **)(v10 + 8);
  else
    v11 = 0;
  result = WebCore::CachedResourceHandleBase::setResource((uint64_t *)(v6 + 48), v11);
  if (*(_QWORD *)v9 && *(_QWORD *)(*(_QWORD *)v9 + 8))
    *(_BYTE *)(v7 + 40) = 0;
  *a2 = v7;
  return result;
}

_DWORD *WebCore::StyleCachedImage::copyOverridingScaleFactor@<X0>(_DWORD *this@<X0>, float a2@<S0>, uint64_t *a3@<X8>)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  _DWORD *v6;

  if (*((float *)this + 11) == a2)
  {
    ++this[2];
    *a3 = (uint64_t)this;
  }
  else
  {
    v4 = (_DWORD *)*((_QWORD *)this + 4);
    *v4 += 2;
    v6 = v4;
    WebCore::StyleCachedImage::create((uint64_t *)&v6, a3, a2);
    this = v6;
    if (v6)
    {
      if (*v6 == 2)
        return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v6, v5);
      else
        *v6 -= 2;
    }
  }
  return this;
}

BOOL WebCore::StyleCachedImage::operator==(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  uint64_t v5;
  uint64_t v6;
  const WTF::StringImpl *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 result;

  result = 0;
  if (!*(_BYTE *)(a2 + 24))
  {
    if (a2 == a1)
      return 1;
    if (*(float *)(a1 + 44) == *(float *)(a2 + 44))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = *(_QWORD *)(a2 + 32);
      if (v5 == v6
        || WTF::equal(*(WTF **)(v5 + 8), *(const WTF::StringImpl **)(v6 + 8), a3)
        && (WTF::equal(*(WTF **)(v5 + 16), *(const WTF::StringImpl **)(v6 + 16), v7) & 1) != 0)
      {
        return 1;
      }
      v8 = *(_QWORD *)(a1 + 48);
      if (v8)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9)
        {
          v10 = *(_QWORD *)(a2 + 48);
          if (v10)
          {
            if (v9 == *(_QWORD *)(v10 + 8))
              return 1;
          }
        }
      }
    }
  }
  return result;
}

double WebCore::StyleCachedImage::reresolvedURL@<D0>(WebCore::StyleCachedImage *this@<X0>, const WebCore::Document *a2@<X1>, uint64_t a3@<X8>)
{
  double result;

  *(_QWORD *)&result = WebCore::CSSImageValue::reresolvedURL((WebCore::CSSImageValue *)*((_QWORD *)this + 4), a2, a3).n128_u64[0];
  return result;
}

uint64_t WebCore::StyleCachedImage::renderSVGResource(WebCore::StyleCachedImage *this, const WebCore::RenderElement *a2, double a3, double a4, float a5)
{
  uint64_t v5;
  uint64_t v8;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  WebCore::CachedImage *v18;
  WTF *v19;
  unsigned int *v20;
  const WebCore::Document *v21;
  uint64_t v22;
  WebCore::ReferencedSVGResources *v23;
  WTF::StringImpl *v24;
  WTF::StringImpl *v25;
  WebCore::Node *v26;
  uint64_t v27;
  int v28;
  WebCore::ReferencedSVGResources *v29;
  const WebCore::StyleImage *v30;
  void *v31;
  WTF::StringImpl *v32;
  int v33;
  int v34;
  WTF::StringImpl *v35;
  WTF::StringImpl *v36;
  WebCore::Node *v37;
  _QWORD v38[2];
  WTF::StringImpl *v39[5];
  const WebCore::Document *v40;
  WebCore::Node *v41;

  v5 = 0;
  if (a2 && !*((_BYTE *)this + 57))
  {
    v8 = *(_QWORD *)(*((_QWORD *)this + 4) + 16);
    if (!v8)
      return 0;
    v10 = *(unsigned int *)(v8 + 4);
    v11 = *(_DWORD *)v8 + 2;
    *(_DWORD *)v8 = v11;
    v12 = *(_QWORD *)(v8 + 8);
    if ((*(_BYTE *)(v8 + 16) & 4) != 0)
    {
      if ((_DWORD)v10)
      {
        v13 = 16;
        if (v10 < 0x10)
          v13 = v10;
        v14 = v13;
        v15 = *(_BYTE **)(v8 + 8);
        do
        {
          if (*v15 == 35)
            goto LABEL_14;
          ++v15;
          --v14;
        }
        while (v14);
        if (v10 >= 0x11)
        {
          v15 = memchr((void *)(v12 + v13), 35, v10 - v13);
          if (v15)
          {
LABEL_14:
            v16 = (uint64_t)&v15[-v12];
            goto LABEL_15;
          }
        }
      }
      v16 = -1;
    }
    else
    {
      v16 = WTF::find<char16_t,(void *)0>(*(_QWORD *)(v8 + 8), v10, 0x23u, 0, a3, a4, a5);
      v11 = *(_DWORD *)v8;
    }
LABEL_15:
    if (v11 == 2)
      WTF::StringImpl::destroy((WTF::StringImpl *)v8, (WTF::StringImpl *)v10);
    else
      *(_DWORD *)v8 = v11 - 2;
    if (v16 == -1)
      return 0;
    v17 = *((_QWORD *)this + 6);
    if (v17 && (v18 = *(WebCore::CachedImage **)(v17 + 8)) != 0)
    {
      v19 = WebCore::CachedImage::image(v18);
      if (v19)
      {
        v20 = (unsigned int *)v19;
        if ((*(unsigned int (**)(WTF *))(*(_QWORD *)v19 + 56))(v19))
        {
          WebCore::SVGImage::rootElement(v20, &v41);
          if (!v41)
            return 0;
          v21 = *(const WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8);
          *((_DWORD *)v21 + 6) += 2;
          v40 = v21;
          WebCore::CSSImageValue::reresolvedURL(*((WebCore::CSSImageValue **)this + 4), v21, (uint64_t)v39);
          v38[0] = WTF::URL::fragmentIdentifier((WTF::URL *)v39);
          v38[1] = v22;
          v23 = (WebCore::ReferencedSVGResources *)WebCore::Node::treeScopeForSVGReferences(v41);
          WTF::StringView::toAtomString((WTF::StringView *)v38, &v36);
          WebCore::ReferencedSVGResources::referencedMaskElement(v23, (WebCore::TreeScope *)&v36, &v37);
          v25 = v36;
          v36 = 0;
          if (v25)
          {
            if (*(_DWORD *)v25 == 2)
              WTF::StringImpl::destroy(v25, v24);
            else
              *(_DWORD *)v25 -= 2;
          }
          v26 = v37;
          if (!v37)
            goto LABEL_63;
          v27 = *((_QWORD *)v37 + 8) & 0xFFFFFFFFFFFFLL;
          if (!v27)
          {
LABEL_44:
            v37 = 0;
            v28 = *((_DWORD *)v26 + 6) - 2;
            if (*((_DWORD *)v26 + 6) != 2)
            {
              v27 = 0;
              goto LABEL_46;
            }
            if ((*((_WORD *)v26 + 15) & 0x400) == 0)
              WebCore::Node::removedLastRef(v26, v24);
LABEL_63:
            v27 = 0;
            goto LABEL_47;
          }
          if ((*(_BYTE *)((*((_QWORD *)v37 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
          {
            if (*(_BYTE *)((*((_QWORD *)v37 + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) == 80)
            {
              v37 = 0;
              v28 = *((_DWORD *)v26 + 6) - 2;
              if (*((_DWORD *)v26 + 6) == 2)
              {
                if ((*((_WORD *)v26 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v26, v24);
LABEL_47:
                v35 = v39[0];
                v39[0] = 0;
                if (v35)
                {
                  if (*(_DWORD *)v35 == 2)
                    WTF::StringImpl::destroy(v35, v24);
                  else
                    *(_DWORD *)v35 -= 2;
                }
                WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref((uint64_t *)&v40);
                v32 = v41;
                v41 = 0;
                if (!v32)
                  return v27;
                goto LABEL_51;
              }
LABEL_46:
              *((_DWORD *)v26 + 6) = v28;
              goto LABEL_47;
            }
            goto LABEL_44;
          }
          __break(0xC471u);
LABEL_66:
          JUMPOUT(0x1964E56D8);
        }
      }
    }
    else
    {
      v29 = (WebCore::ReferencedSVGResources *)WebCore::Node::treeScopeForSVGReferences(*(WebCore::Node **)(*((_QWORD *)a2 + 3) + 8));
      WebCore::ReferencedSVGResources::referencedMaskElement(v29, this, v30, v39);
      v32 = v39[0];
      if (v39[0])
      {
        v27 = *((_QWORD *)v39[0] + 8) & 0xFFFFFFFFFFFFLL;
        if (v27)
        {
          if ((*(_BYTE *)((*((_QWORD *)v39[0] + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            goto LABEL_66;
          }
          if (*(_BYTE *)((*((_QWORD *)v39[0] + 8) & 0xFFFFFFFFFFFFLL) + 0x2E) == 80)
          {
            v39[0] = 0;
LABEL_51:
            if (*((_DWORD *)v32 + 6) == 2)
            {
              if ((*((_WORD *)v32 + 15) & 0x400) == 0)
                WebCore::Node::removedLastRef(v32, v31);
            }
            else
            {
              *((_DWORD *)v32 + 6) -= 2;
            }
            return v27;
          }
        }
        v39[0] = 0;
        v33 = *((_DWORD *)v32 + 6);
        v34 = v33 - 2;
        if (v33 != 2)
        {
          v5 = 0;
          *((_DWORD *)v32 + 6) = v34;
          return v5;
        }
        if ((*((_WORD *)v32 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v32, v31);
      }
    }
    return 0;
  }
  return v5;
}

BOOL WebCore::StyleCachedImage::isRenderSVGResource(WebCore::StyleCachedImage *this, const WebCore::RenderElement *a2, double a3, double a4, float a5)
{
  double v7;
  double v8;
  float v9;

  if (WebCore::StyleCachedImage::renderSVGResource(this, a2, a3, a4, a5))
    return 1;
  if (!*((_BYTE *)this + 57) || *((_BYTE *)this + 56))
    return WebCore::StyleCachedImage::uncheckedRenderSVGResource(this, a2, v7, v8, v9) != 0;
  return 0;
}

uint64_t WebCore::StyleCachedImage::cachedImage(WebCore::StyleCachedImage *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 6);
  if (v1)
    return *(_QWORD *)(v1 + 8);
  else
    return 0;
}

uint64_t WebCore::StyleCachedImage::computedStyleValue@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;

  v3 = *(_DWORD **)(this + 32);
  *v3 += 2;
  *a2 = v3;
  return this;
}

BOOL WebCore::StyleCachedImage::errorOccurred(WebCore::StyleCachedImage *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 6);
  return v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && (*(_WORD *)(v2 + 557) >> 5) - 3 < 2;
}

uint64_t WebCore::StyleCachedImage::imageHasRelativeWidth(WebCore::StyleCachedImage *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 6);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && (v3 = *(_QWORD *)(v2 + 688)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 144))(v3);
  else
    return 0;
}

uint64_t WebCore::StyleCachedImage::imageHasRelativeHeight(WebCore::StyleCachedImage *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 6);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && (v3 = *(_QWORD *)(v2 + 688)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 152))(v3);
  else
    return 0;
}

uint64_t WebCore::StyleCachedImage::usesImageContainerSize(WebCore::StyleCachedImage *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_QWORD *)this + 6);
  if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && (v3 = *(_QWORD *)(v2 + 688)) != 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 136))(v3);
  else
    return 0;
}

WebCore::CachedResource *WebCore::StyleCachedImage::removeClient(WebCore::CachedResource *this, unsigned int **a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 6);
  if (v2)
  {
    this = *(WebCore::CachedResource **)(v2 + 8);
    if (this)
      return (WebCore::CachedResource *)WebCore::CachedResource::removeClient(this, a2);
  }
  return this;
}

uint64_t WebCore::StyleCachedImage::hasClient(WebCore::StyleCachedImage *this, WebCore::RenderElement *a2)
{
  uint64_t v2;
  WebCore::CachedResource *v3;

  v2 = *((_QWORD *)this + 6);
  if (v2 && (v3 = *(WebCore::CachedResource **)(v2 + 8)) != 0)
    return WebCore::CachedResource::hasClient(v3, a2);
  else
    return 0;
}

BOOL WebCore::StyleCachedImage::hasImage(WebCore::StyleCachedImage *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 6);
  return v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0 && *(_QWORD *)(v2 + 688) != 0;
}

uint64_t WebCore::StyleCachedImage::usesDataProtocol(WebCore::StyleCachedImage *this)
{
  return WTF::URL::protocolIs();
}

void WebCore::StyleCanvasImage::~StyleCanvasImage(WebCore::StyleCanvasImage *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = *((_QWORD *)this + 11);
  if (v3)
    WebCore::CanvasBase::removeObserver((WebCore::CanvasBase *)(v3 + 112), (WebCore::StyleCanvasImage *)((char *)this + 64));
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 9);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 9) = 0;
  }
  WebCore::StyleGeneratedImage::~StyleGeneratedImage(this, a2);
}

{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  WTF *v9;
  void *v10;

  v3 = *((_QWORD *)this + 11);
  if (v3)
    WebCore::CanvasBase::removeObserver((WebCore::CanvasBase *)(v3 + 112), (WebCore::StyleCanvasImage *)((char *)this + 64));
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 9);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 9) = 0;
  }
  WebCore::StyleGeneratedImage::~StyleGeneratedImage(this, a2);
  WTF::fastFree(v9, v10);
}

void `non-virtual thunk to'WebCore::StyleCanvasImage::~StyleCanvasImage(WebCore::StyleCanvasImage *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  WTF::StringImpl *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;

  v3 = *((_QWORD *)this + 3);
  if (v3)
    WebCore::CanvasBase::removeObserver((WebCore::CanvasBase *)(v3 + 112), this);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  v5 = *((_QWORD *)this + 1);
  if (v5)
  {
    *(_QWORD *)(v5 + 8) = 0;
    v6 = (unsigned int *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v6)
    {
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
      {
        atomic_store(1u, v6);
        WTF::fastFree((WTF *)v6, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
  WebCore::StyleGeneratedImage::~StyleGeneratedImage((WebCore::StyleCanvasImage *)((char *)this - 64), a2);
}

{
  WebCore::StyleCanvasImage::~StyleCanvasImage((WebCore::StyleCanvasImage *)((char *)this - 64), a2);
}

uint64_t WebCore::StyleCanvasImage::operator==(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (*(_BYTE *)(a2 + 24) == 4)
    return WTF::equal(*(WTF **)(a1 + 80), *(const WTF::StringImpl **)(a2 + 80), a3);
  else
    return 0;
}

uint64_t WebCore::StyleCanvasImage::computedStyleValue@<X0>(WebCore::StyleCanvasImage *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v4;
  uint64_t result;
  char v6;

  v4 = (_DWORD *)*((_QWORD *)this + 10);
  if (v4)
    *v4 += 2;
  result = WTF::fastCompactMalloc((WTF *)0x18);
  *(_DWORD *)result = 2;
  v6 = *(_BYTE *)(result + 6);
  *(_WORD *)(result + 4) = 0x2000;
  *(_BYTE *)(result + 6) = v6 & 0xFC;
  *(_QWORD *)(result + 8) = v4;
  *(_QWORD *)(result + 16) = 0;
  *a2 = result;
  return result;
}

uint64_t WebCore::StyleCanvasImage::isPending(WebCore::StyleCanvasImage *this)
{
  return 0;
}

unsigned int *WebCore::StyleCanvasImage::image@<X0>(WTF::StringImpl **this@<X0>, const WebCore::RenderElement *a2@<X1>, unsigned int **a3@<X8>)
{
  WTF::StringImpl *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *result;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14[3];

  if (!a2)
  {
    result = (unsigned int *)WebCore::Image::nullImage((WebCore::Image *)this);
    ++result[2];
    *a3 = result;
    return result;
  }
  v6 = this[11];
  if (v6)
    goto LABEL_11;
  v7 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8);
  v13 = 0;
  WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>,WTF::HashTableTraits>::add<decltype(nullptr)>(v7 + 229, this + 10, (const WTF::StringImpl *)&v13, (uint64_t)v14);
  v8 = v14[0];
  v9 = *(_QWORD *)(v14[0] + 8);
  if (v9)
  {
    this[11] = (WTF::StringImpl *)v9;
  }
  else
  {
    WebCore::HTMLCanvasElement::create((WebCore::HTMLCanvasElement *)v7, v14);
    v9 = v14[0];
    result = *(unsigned int **)(v8 + 8);
    *(_QWORD *)(v8 + 8) = v14[0];
    if (result)
    {
      if (result[6] == 2)
      {
        if ((*((_WORD *)result + 15) & 0x400) == 0)
        {
          result = WebCore::Node::removedLastRef((WebCore::Node *)result, v11);
          v9 = *(_QWORD *)(v8 + 8);
        }
      }
      else
      {
        result[6] -= 2;
      }
    }
    this[11] = (WTF::StringImpl *)v9;
    if (!v9)
      goto LABEL_16;
  }
  result = (unsigned int *)WebCore::CanvasBase::addObserver((WebCore::CanvasBase *)(v9 + 112), (WebCore::CanvasObserver *)(this + 8));
  v6 = this[11];
  if (!v6)
  {
LABEL_16:
    *a3 = 0;
    return result;
  }
LABEL_11:
  *((_DWORD *)v6 + 6) += 2;
  result = (unsigned int *)WebCore::HTMLCanvasElement::copiedImage(v6);
  if (result)
    ++result[2];
  *a3 = result;
  if (*((_DWORD *)v6 + 6) == 2)
  {
    if ((*((_WORD *)v6 + 15) & 0x400) == 0)
      return WebCore::Node::removedLastRef(v6, v12);
  }
  else
  {
    *((_DWORD *)v6 + 6) -= 2;
  }
  return result;
}

uint64_t WebCore::StyleCanvasImage::knownToBeOpaque(WebCore::StyleCanvasImage *this, const WebCore::RenderElement *a2)
{
  return 0;
}

float WebCore::StyleCanvasImage::fixedSize(WebCore::StyleCanvasImage *this, const WebCore::RenderElement *a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11[3];

  v2 = *((_QWORD *)this + 11);
  if (v2)
    return (float)*(int *)(v2 + 120);
  v4 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8);
  v10 = 0;
  WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>,WTF::HashTableTraits>::add<decltype(nullptr)>(v4 + 229, (WTF::StringImpl **)this + 10, (const WTF::StringImpl *)&v10, (uint64_t)v11);
  v5 = v11[0];
  v6 = *(_QWORD *)(v11[0] + 8);
  if (v6)
  {
    *((_QWORD *)this + 11) = v6;
  }
  else
  {
    WebCore::HTMLCanvasElement::create((WebCore::HTMLCanvasElement *)v4, v11);
    v6 = v11[0];
    v8 = *(_QWORD *)(v5 + 8);
    *(_QWORD *)(v5 + 8) = v11[0];
    if (v8)
    {
      if (*(_DWORD *)(v8 + 24) == 2)
      {
        if ((*(_WORD *)(v8 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v8, v7);
          v6 = *(_QWORD *)(v5 + 8);
        }
      }
      else
      {
        *(_DWORD *)(v8 + 24) -= 2;
      }
    }
    *((_QWORD *)this + 11) = v6;
    if (!v6)
      return 0.0;
  }
  WebCore::CanvasBase::addObserver((WebCore::CanvasBase *)(v6 + 112), (WebCore::StyleCanvasImage *)((char *)this + 64));
  v2 = *((_QWORD *)this + 11);
  if (!v2)
    return 0.0;
  return (float)*(int *)(v2 + 120);
}

WebCore::InspectorCanvas *WebCore::StyleCanvasImage::didAddClient(WebCore::InspectorCanvas *this, WebCore::RenderElement *a2)
{
  uint64_t v2;
  WebCore::InspectorCanvas *v3;
  uint64_t *v4;
  WebCore::InspectorCanvas *v5;
  WebCore::InspectorCanvas *v6;
  void *v7;
  uint64_t v9;
  WebCore::ScriptExecutionContext *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  WebCore::InspectorCanvas *v16[3];

  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
LABEL_9:
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v9 = v2 + 112;
      this = (WebCore::InspectorCanvas *)(*(uint64_t (**)(uint64_t, WebCore::RenderElement *))(*(_QWORD *)(v2 + 112) + 144))(v2 + 112, a2);
      if (this)
      {
        this = (WebCore::InspectorCanvas *)WebCore::InspectorInstrumentation::instrumentingAgents(this, v10);
        if (this)
        {
          v11 = *((_QWORD *)this + 13);
          if (v11)
          {
            this = (WebCore::InspectorCanvas *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
            if (this)
            {
              this = (WebCore::InspectorCanvas *)WebCore::InspectorCanvasAgent::findInspectorCanvas(v11, this, v16);
              if (v16[0])
              {
                Inspector::CanvasFrontendDispatcher::clientNodesChanged(*(Inspector::CanvasFrontendDispatcher **)(v11 + 56), (WebCore::InspectorCanvas *)((char *)v16[0] + 8));
                this = v16[0];
                v16[0] = 0;
                if (this)
                {
                  if (*(_DWORD *)this == 1)
                  {
                    WebCore::InspectorCanvas::~InspectorCanvas(this, v12);
                    return (WebCore::InspectorCanvas *)WTF::fastFree(v13, v14);
                  }
                  else
                  {
                    --*(_DWORD *)this;
                  }
                }
              }
            }
          }
        }
      }
    }
    return this;
  }
  v3 = this;
  v4 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8);
  v15 = 0;
  WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>,WTF::HashTableTraits>::add<decltype(nullptr)>(v4 + 229, (WTF::StringImpl **)this + 10, (const WTF::StringImpl *)&v15, (uint64_t)v16);
  v5 = v16[0];
  v6 = (WebCore::InspectorCanvas *)*((_QWORD *)v16[0] + 1);
  if (v6)
  {
    *((_QWORD *)v3 + 11) = v6;
    goto LABEL_8;
  }
  WebCore::HTMLCanvasElement::create((WebCore::HTMLCanvasElement *)v4, (uint64_t *)v16);
  v6 = v16[0];
  this = (WebCore::InspectorCanvas *)*((_QWORD *)v5 + 1);
  *((WebCore::InspectorCanvas **)v5 + 1) = v16[0];
  if (this)
  {
    if (*((_DWORD *)this + 6) == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
      {
        this = (WebCore::InspectorCanvas *)WebCore::Node::removedLastRef(this, v7);
        v6 = (WebCore::InspectorCanvas *)*((_QWORD *)v5 + 1);
      }
    }
    else
    {
      *((_DWORD *)this + 6) -= 2;
    }
  }
  *((_QWORD *)v3 + 11) = v6;
  if (v6)
  {
LABEL_8:
    this = WebCore::CanvasBase::addObserver((WebCore::InspectorCanvas *)((char *)v6 + 112), (WebCore::InspectorCanvas *)((char *)v3 + 64));
    v2 = *((_QWORD *)v3 + 11);
    if (!v2)
      return this;
    goto LABEL_9;
  }
  return this;
}

WebCore::InspectorCanvas *WebCore::StyleCanvasImage::didRemoveClient(WebCore::InspectorCanvas *this, WebCore::RenderElement *a2)
{
  uint64_t v2;
  WebCore::InspectorCanvas *v3;
  uint64_t *v4;
  WebCore::InspectorCanvas *v5;
  WebCore::InspectorCanvas *v6;
  void *v7;
  uint64_t v9;
  WebCore::ScriptExecutionContext *v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  WTF *v13;
  void *v14;
  uint64_t v15;
  WebCore::InspectorCanvas *v16[3];

  v2 = *((_QWORD *)this + 11);
  if (v2)
  {
LABEL_9:
    if (atomic_load((unsigned int *)&WebCore::InspectorInstrumentationPublic::s_frontendCounter))
    {
      v9 = v2 + 112;
      this = (WebCore::InspectorCanvas *)(*(uint64_t (**)(uint64_t, WebCore::RenderElement *))(*(_QWORD *)(v2 + 112) + 144))(v2 + 112, a2);
      if (this)
      {
        this = (WebCore::InspectorCanvas *)WebCore::InspectorInstrumentation::instrumentingAgents(this, v10);
        if (this)
        {
          v11 = *((_QWORD *)this + 13);
          if (v11)
          {
            this = (WebCore::InspectorCanvas *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 88))(v9);
            if (this)
            {
              this = (WebCore::InspectorCanvas *)WebCore::InspectorCanvasAgent::findInspectorCanvas(v11, this, v16);
              if (v16[0])
              {
                Inspector::CanvasFrontendDispatcher::clientNodesChanged(*(Inspector::CanvasFrontendDispatcher **)(v11 + 56), (WebCore::InspectorCanvas *)((char *)v16[0] + 8));
                this = v16[0];
                v16[0] = 0;
                if (this)
                {
                  if (*(_DWORD *)this == 1)
                  {
                    WebCore::InspectorCanvas::~InspectorCanvas(this, v12);
                    return (WebCore::InspectorCanvas *)WTF::fastFree(v13, v14);
                  }
                  else
                  {
                    --*(_DWORD *)this;
                  }
                }
              }
            }
          }
        }
      }
    }
    return this;
  }
  v3 = this;
  v4 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8);
  v15 = 0;
  WTF::HashMap<WTF::String,WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::RefPtr<WebCore::HTMLCanvasElement,WTF::RawPtrTraits<WebCore::HTMLCanvasElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLCanvasElement>>>,WTF::HashTableTraits>::add<decltype(nullptr)>(v4 + 229, (WTF::StringImpl **)this + 10, (const WTF::StringImpl *)&v15, (uint64_t)v16);
  v5 = v16[0];
  v6 = (WebCore::InspectorCanvas *)*((_QWORD *)v16[0] + 1);
  if (v6)
  {
    *((_QWORD *)v3 + 11) = v6;
    goto LABEL_8;
  }
  WebCore::HTMLCanvasElement::create((WebCore::HTMLCanvasElement *)v4, (uint64_t *)v16);
  v6 = v16[0];
  this = (WebCore::InspectorCanvas *)*((_QWORD *)v5 + 1);
  *((WebCore::InspectorCanvas **)v5 + 1) = v16[0];
  if (this)
  {
    if (*((_DWORD *)this + 6) == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
      {
        this = (WebCore::InspectorCanvas *)WebCore::Node::removedLastRef(this, v7);
        v6 = (WebCore::InspectorCanvas *)*((_QWORD *)v5 + 1);
      }
    }
    else
    {
      *((_DWORD *)this + 6) -= 2;
    }
  }
  *((_QWORD *)v3 + 11) = v6;
  if (v6)
  {
LABEL_8:
    this = WebCore::CanvasBase::addObserver((WebCore::InspectorCanvas *)((char *)v6 + 112), (WebCore::InspectorCanvas *)((char *)v3 + 64));
    v2 = *((_QWORD *)v3 + 11);
    if (!v2)
      return this;
    goto LABEL_9;
  }
  return this;
}

_QWORD *WebCore::StyleCanvasImage::canvasChanged(_QWORD *this, WebCore::CanvasBase *a2, const WebCore::FloatRect *a3)
{
  _QWORD *v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  _QWORD v41[2];

  v3 = this;
  v4 = *((float *)a3 + 1);
  v5 = floorf(*(float *)a3);
  v6 = 2147500000.0;
  if (v5 < 2147500000.0)
  {
    v6 = -2147500000.0;
    if (v5 > -2147500000.0)
      v6 = (float)(int)v5;
  }
  v7 = floorf(v4);
  v8 = 2147500000.0;
  if (v7 < 2147500000.0)
  {
    v8 = -2147500000.0;
    if (v7 > -2147500000.0)
      v8 = (float)(int)v7;
  }
  v9 = v4 + *((float *)a3 + 3);
  v10 = ceilf(*(float *)a3 + *((float *)a3 + 2));
  v11 = 2147500000.0;
  if (v10 < 2147500000.0)
  {
    v11 = -2147500000.0;
    if (v10 > -2147500000.0)
      v11 = (float)(int)v10;
  }
  v12 = ceilf(v9);
  v13 = 2147500000.0;
  if (v12 < 2147500000.0)
  {
    v13 = -2147500000.0;
    if (v12 > -2147500000.0)
      v13 = (float)(int)v12;
  }
  v14 = 0x7FFFFFFFLL;
  v15 = 0x80000000;
  if (v6 > -2147500000.0)
    v15 = (int)v6;
  if (v6 < 2147500000.0)
    v14 = v15;
  v16 = 0x7FFFFFFF00000000;
  v17 = 0x8000000000000000;
  if (v8 > -2147500000.0)
    v17 = (unint64_t)(int)v8 << 32;
  if (v8 < 2147500000.0)
    v16 = v17;
  v18 = v11 - v6;
  v19 = v13 - v8;
  v20 = 0x7FFFFFFFLL;
  v21 = 0x80000000;
  if (v18 > -2147500000.0)
    v21 = (int)v18;
  if (v18 < 2147500000.0)
    v20 = v21;
  v22 = 0x7FFFFFFF00000000;
  v23 = 0x8000000000000000;
  if (v19 > -2147500000.0)
    v23 = (unint64_t)(int)v19 << 32;
  if (v19 < 2147500000.0)
    v22 = v23;
  v41[0] = v16 | v14;
  v41[1] = v22 | v20;
  v24 = this[5];
  if (!v24)
  {
    v27 = 0;
    v25 = 0;
LABEL_44:
    v26 = (_QWORD *)(v24 + 16 * v25);
    goto LABEL_36;
  }
  v25 = *(unsigned int *)(v24 - 4);
  v26 = (_QWORD *)(v24 + 16 * v25);
  if (!*(_DWORD *)(v24 - 12))
  {
    v27 = (_QWORD *)(v24 + 16 * v25);
    goto LABEL_44;
  }
  v27 = (_QWORD *)this[5];
  if ((_DWORD)v25)
  {
    v28 = 16 * v25;
    v27 = (_QWORD *)this[5];
    while ((unint64_t)(*v27 + 1) <= 1)
    {
      v27 += 2;
      v28 -= 16;
      if (!v28)
      {
        v27 = v26;
        break;
      }
    }
  }
LABEL_36:
  v35 = this + 5;
  v36 = v27;
  v37 = v26;
  if (v24)
  {
    v29 = *(unsigned int *)(v24 - 4);
    v30 = (_QWORD *)(v24 + 16 * v29);
  }
  else
  {
    v30 = 0;
    v29 = 0;
  }
  v38 = v30;
  v39 = v24 + 16 * v29;
  v40 = 0;
  if (v27 != v30)
  {
    if (!*(_QWORD *)(*v27 + 8))
    {
      v33 = v27;
      do
      {
        v34 = v33 + 2;
        v33 = v26;
        if (v34 != v26)
        {
          v33 = v34;
          while ((unint64_t)(*v33 + 1) <= 1)
          {
            v33 += 2;
            if (v33 == v26)
            {
              v33 = v26;
              break;
            }
          }
        }
        v27 = v30;
        if (v33 == v30)
          break;
        v27 = v33;
      }
      while (!*(_QWORD *)(*v33 + 8));
    }
    v36 = v27;
  }
  if (v24)
    v31 = (_QWORD *)(v24 + 16 * *(unsigned int *)(v24 - 4));
  else
    v31 = 0;
  while (v27 != v31)
  {
    (*(void (**)(_QWORD, _QWORD *, _QWORD *))(**(_QWORD **)(*v27 + 8) + 568))(*(_QWORD *)(*v27 + 8), v3, v41);
    v32 = v36;
    do
    {
      v32 += 2;
      v36 = v32;
    }
    while (v32 != v37 && (unint64_t)(*v32 + 1) <= 1);
    ++v40;
    this = WTF::WeakHashMap<WebCore::RenderElement,unsigned int,WTF::SingleThreadWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebCore::RenderElement,unsigned int,WTF::SingleThreadWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>>,WTF::WeakHashMap<WebCore::RenderElement,unsigned int,WTF::SingleThreadWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebCore::RenderElement,unsigned int,WTF::SingleThreadWeakPtrImpl>::PeekType const>::skipEmptyBuckets(&v35);
    ++*((_DWORD *)v35 + 2);
    v27 = v36;
  }
  return this;
}

_QWORD *`non-virtual thunk to'WebCore::StyleCanvasImage::canvasChanged(WebCore::StyleCanvasImage *this, WebCore::CanvasBase *a2, const WebCore::FloatRect *a3)
{
  return WebCore::StyleCanvasImage::canvasChanged((_QWORD *)this - 8, a2, a3);
}

_QWORD *WebCore::StyleCanvasImage::canvasResized(_QWORD *this, WebCore::CanvasBase *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;

  v2 = this;
  v3 = this[5];
  if (!v3)
  {
    v6 = 0;
    v4 = 0;
LABEL_16:
    v5 = (_QWORD *)(v3 + 16 * v4);
    goto LABEL_8;
  }
  v4 = *(unsigned int *)(v3 - 4);
  v5 = (_QWORD *)(v3 + 16 * v4);
  if (!*(_DWORD *)(v3 - 12))
  {
    v6 = (_QWORD *)(v3 + 16 * v4);
    goto LABEL_16;
  }
  v6 = (_QWORD *)this[5];
  if ((_DWORD)v4)
  {
    v7 = 16 * v4;
    v6 = (_QWORD *)this[5];
    while ((unint64_t)(*v6 + 1) <= 1)
    {
      v6 += 2;
      v7 -= 16;
      if (!v7)
      {
        v6 = v5;
        break;
      }
    }
  }
LABEL_8:
  v14 = this + 5;
  v15 = v6;
  v16 = v5;
  if (v3)
  {
    v8 = *(unsigned int *)(v3 - 4);
    v9 = (_QWORD *)(v3 + 16 * v8);
  }
  else
  {
    v9 = 0;
    v8 = 0;
  }
  v17 = v9;
  v18 = v3 + 16 * v8;
  v19 = 0;
  if (v6 != v9)
  {
    if (!*(_QWORD *)(*v6 + 8))
    {
      v12 = v6;
      do
      {
        v13 = v12 + 2;
        v12 = v5;
        if (v13 != v5)
        {
          v12 = v13;
          while ((unint64_t)(*v12 + 1) <= 1)
          {
            v12 += 2;
            if (v12 == v5)
            {
              v12 = v5;
              break;
            }
          }
        }
        v6 = v9;
        if (v12 == v9)
          break;
        v6 = v12;
      }
      while (!*(_QWORD *)(*v12 + 8));
    }
    v15 = v6;
  }
  if (v3)
    v10 = (_QWORD *)(v3 + 16 * *(unsigned int *)(v3 - 4));
  else
    v10 = 0;
  while (v6 != v10)
  {
    (*(void (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(*v6 + 8) + 568))(*(_QWORD *)(*v6 + 8), v2, 0);
    v11 = v15;
    do
    {
      v11 += 2;
      v15 = v11;
    }
    while (v11 != v16 && (unint64_t)(*v11 + 1) <= 1);
    ++v19;
    this = WTF::WeakHashMap<WebCore::RenderElement,unsigned int,WTF::SingleThreadWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebCore::RenderElement,unsigned int,WTF::SingleThreadWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>>,WTF::WeakHashMap<WebCore::RenderElement,unsigned int,WTF::SingleThreadWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebCore::RenderElement,unsigned int,WTF::SingleThreadWeakPtrImpl>::PeekType const>::skipEmptyBuckets(&v14);
    ++*((_DWORD *)v14 + 2);
    v6 = v15;
  }
  return this;
}

_QWORD *`non-virtual thunk to'WebCore::StyleCanvasImage::canvasResized(WebCore::StyleCanvasImage *this, WebCore::CanvasBase *a2)
{
  return WebCore::StyleCanvasImage::canvasResized((_QWORD *)this - 8, a2);
}

uint64_t WebCore::StyleCanvasImage::canvasDestroyed(uint64_t this, WebCore::CanvasBase *a2)
{
  *(_QWORD *)(this + 88) = 0;
  return this;
}

uint64_t `non-virtual thunk to'WebCore::StyleCanvasImage::canvasDestroyed(uint64_t this, WebCore::CanvasBase *a2)
{
  *(_QWORD *)(this + 24) = 0;
  return this;
}

uint64_t WebCore::StyleContentAlignmentData::isStartward(unsigned __int16 *a1, __int16 a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t result;
  BOOL v5;
  BOOL v6;
  unsigned int v7;
  BOOL v8;
  int v9;

  v3 = *a1;
  result = 1;
  switch(v3 & 0xF)
  {
    case 0u:
      v7 = (v3 >> 4) & 7;
      v8 = v7 > 4;
      v9 = (1 << v7) & 0x13;
      if (v8 || v9 == 0)
        result = 0;
      else
        result = a3 ^ 1;
      break;
    case 2u:
    case 3u:
    case 5u:
      result = 0;
      break;
    case 6u:
      result = a3 ^ 1;
      break;
    case 7u:
      result = a3;
      break;
    case 8u:
      if (HIBYTE(a2))
        v5 = a2 == 0;
      else
        v5 = 1;
      result = v5;
      break;
    case 9u:
      if (HIBYTE(a2))
        v6 = a2 == 0;
      else
        v6 = 0;
      result = !v6;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t WebCore::StyleContentAlignmentData::isEndward(unsigned __int16 *a1, __int16 a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v5;
  BOOL v6;
  BOOL v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  BOOL v11;

  result = 0;
  v5 = *a1;
  switch(v5 & 0xF)
  {
    case 0u:
      v8 = (v5 >> 4) & 7;
      v9 = v8 > 4;
      v10 = (1 << v8) & 0x13;
      v11 = v9 || v10 == 0;
      result = a3;
      if (v11)
        result = 0;
      break;
    case 2u:
    case 5u:
      result = 1;
      break;
    case 6u:
      result = a3;
      break;
    case 7u:
      result = a3 ^ 1;
      break;
    case 8u:
      if (HIBYTE(a2))
        v6 = a2 == 0;
      else
        v6 = 1;
      result = !v6;
      break;
    case 9u:
      if (HIBYTE(a2))
        v7 = a2 == 0;
      else
        v7 = 0;
      result = v7;
      break;
    default:
      return result;
  }
  return result;
}

BOOL WebCore::StyleContentAlignmentData::isCentered(WebCore::StyleContentAlignmentData *this)
{
  return (*(_WORD *)this & 0xF) == 3 || (*(_WORD *)this & 0x60) == 32;
}

void WebCore::StyleCrossfadeImage::~StyleCrossfadeImage(WebCore::StyleCrossfadeImage *this, void *a2)
{
  uint64_t v3;
  unsigned int **v4;
  WebCore::CachedResource *v5;
  uint64_t v6;
  WebCore::CachedResource *v7;
  void *v8;
  void *v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  WTF *v13;

  v4 = (unsigned int **)((char *)this + 112);
  v3 = *((_QWORD *)this + 14);
  if (v3)
  {
    v5 = *(WebCore::CachedResource **)(v3 + 8);
    if (v5)
      WebCore::CachedResource::removeClient(v5, (unsigned int **)this + 8);
  }
  v6 = *((_QWORD *)this + 15);
  if (v6)
  {
    v7 = *(WebCore::CachedResource **)(v6 + 8);
    if (v7)
      WebCore::CachedResource::removeClient(v7, (unsigned int **)this + 8);
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase((unsigned int **)this + 15, a2);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v4, v8);
  v10 = (_DWORD *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v10)
  {
    if (v10[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v10 + 8))(v10);
    else
      --v10[2];
  }
  v11 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v11)
  {
    if (v11[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
    else
      --v11[2];
  }
  *((_QWORD *)this + 8) = &off_1E33F87C8;
  v12 = *((_QWORD *)this + 9);
  if (v12)
  {
    *(_QWORD *)(v12 + 8) = 0;
    v13 = (WTF *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        WTF::fastFree(v13, v9);
      else
        --*(_DWORD *)v13;
    }
  }
  else
  {
    *((_QWORD *)this + 9) = 0;
  }
  WebCore::StyleGeneratedImage::~StyleGeneratedImage(this, v9);
}

{
  WTF *v2;
  void *v3;

  WebCore::StyleCrossfadeImage::~StyleCrossfadeImage(this, a2);
  WTF::fastFree(v2, v3);
}

void `non-virtual thunk to'WebCore::StyleCrossfadeImage::~StyleCrossfadeImage(WebCore::StyleCrossfadeImage *this, void *a2)
{
  WebCore::StyleCrossfadeImage::~StyleCrossfadeImage((WebCore::StyleCrossfadeImage *)((char *)this - 64), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::StyleCrossfadeImage::~StyleCrossfadeImage((WebCore::StyleCrossfadeImage *)((char *)this - 64), a2);
  WTF::fastFree(v2, v3);
}

BOOL WebCore::StyleCrossfadeImage::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(a2 + 24) != 5)
    return 0;
  v2 = *(_QWORD *)(a1 + 80);
  v3 = *(_QWORD *)(a2 + 80);
  if (v2 != v3)
  {
    v10 = a2;
    v12 = a1;
    if (!v2 || v3 == 0)
      return 0;
    v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, v3);
    a2 = v10;
    a1 = v12;
    if (!v8)
      return 0;
  }
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a2 + 88);
  if (v4 == v5)
    return *(double *)(a1 + 96) == *(double *)(a2 + 96);
  v11 = a2;
  v13 = a1;
  result = 0;
  if (v4 && v5)
  {
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5);
    a2 = v11;
    a1 = v13;
    if (!v9)
      return 0;
    return *(double *)(a1 + 96) == *(double *)(a2 + 96);
  }
  return result;
}

uint64_t WebCore::StyleCrossfadeImage::blend@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  double v14;
  BOOL v15;
  uint64_t result;
  double v17;
  double v18;

  v5 = *(_QWORD *)(a1 + 120);
  if (v5 && *(_QWORD *)(v5 + 8) && (v6 = *(_QWORD *)(a1 + 112)) != 0 && *(_QWORD *)(v6 + 8))
  {
    v7 = *(double *)(a2 + 96);
    v8 = *(double *)(a1 + 96);
    if (*(_BYTE *)(a3 + 10) == 1)
    {
      v17 = *(double *)(a3 + 16);
      if (v17 != 0.0)
      {
        v18 = v8 * v17;
        v7 = v7 + v18;
        v8 = v8 + v18;
      }
    }
    v9 = v7 + v7;
    if (!*(_BYTE *)(a3 + 9))
      v9 = v7;
    v10 = *(double *)a3;
    v11 = *(_QWORD *)(a1 + 80);
    if (v11)
      ++*(_DWORD *)(v11 + 8);
    v12 = v8 - v7;
    v13 = *(_QWORD *)(a1 + 88);
    if (v13)
      ++*(_DWORD *)(v13 + 8);
    v14 = v9 + v12 * v10;
    if (*(_BYTE *)(a2 + 104))
      v15 = *(_BYTE *)(a1 + 104) != 0;
    else
      v15 = 0;
    result = WTF::fastMalloc((WTF *)0x88);
    *(_DWORD *)(result + 8) = 1;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 5;
    *(_DWORD *)(result + 28) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_BYTE *)(result + 36) = 1;
    *(_QWORD *)(result + 40) = 0;
    *(_QWORD *)(result + 48) = 0;
    *(_QWORD *)result = off_1E3441D50;
    *(_QWORD *)(result + 56) = 0;
    *(_QWORD *)(result + 64) = &unk_1E3441E68;
    *(_QWORD *)(result + 72) = 0;
    *(_QWORD *)(result + 80) = v11;
    *(_QWORD *)(result + 88) = v13;
    *(double *)(result + 96) = v14;
    *(_BYTE *)(result + 104) = v15;
    *(_QWORD *)(result + 112) = 0;
    *(_QWORD *)(result + 120) = 0;
    *(_BYTE *)(result + 128) = 0;
  }
  else
  {
    result = 0;
  }
  *a4 = result;
  return result;
}

uint64_t WebCore::StyleCrossfadeImage::computedStyleValue@<X0>(WebCore::StyleCrossfadeImage *this@<X0>, const WebCore::RenderStyle *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  int *v10;
  char v11;
  char v12;
  uint64_t result;
  char v14;
  int *v15;
  int *v16;
  int *v17;

  v6 = *((_QWORD *)this + 10);
  if (v6)
  {
    (*(void (**)(int **__return_ptr, uint64_t, const WebCore::RenderStyle *))(*(_QWORD *)v6 + 24))(&v17, v6, a2);
  }
  else
  {
    dword_1ECE8BC48 += 2;
    v17 = &WebCore::staticCSSValuePool[3112];
  }
  v7 = *((_QWORD *)this + 11);
  if (v7)
  {
    (*(void (**)(int **__return_ptr, uint64_t, const WebCore::RenderStyle *))(*(_QWORD *)v7 + 24))(&v16, v7, a2);
  }
  else
  {
    dword_1ECE8BC48 += 2;
    v16 = &WebCore::staticCSSValuePool[3112];
  }
  v8 = *((double *)this + 12);
  if ((int)v8 <= 0xFF && *((_QWORD *)this + 12) == COERCE__INT64((double)(int)v8))
  {
    v10 = &WebCore::staticCSSValuePool[4 * (int)v8 + 2064];
    *v10 += 2;
  }
  else
  {
    v10 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
    *v10 = 2;
    v11 = *((_BYTE *)v10 + 6);
    *((_WORD *)v10 + 2) = 1;
    *((_BYTE *)v10 + 6) = v11 & 0xFC;
    *((double *)v10 + 1) = v8;
  }
  v12 = *((_BYTE *)this + 104);
  result = WTF::fastCompactMalloc((WTF *)0x28);
  *(_DWORD *)result = 2;
  v14 = *(_BYTE *)(result + 6);
  *(_WORD *)(result + 4) = 14336;
  *(_BYTE *)(result + 6) = v14 & 0xFC;
  v15 = v16;
  *(_QWORD *)(result + 8) = v17;
  *(_QWORD *)(result + 16) = v15;
  *(_QWORD *)(result + 24) = v10;
  *(_BYTE *)(result + 32) = v12;
  *a3 = result;
  return result;
}

BOOL WebCore::StyleCrossfadeImage::isPending(WebCore::StyleCrossfadeImage *this)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;

  v2 = *((_QWORD *)this + 10);
  result = 1;
  if (!v2 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) & 1) == 0)
  {
    v3 = *((_QWORD *)this + 11);
    if (!v3 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3) & 1) == 0)
      return 0;
  }
  return result;
}

void WebCore::StyleCrossfadeImage::load(WebCore::StyleCrossfadeImage *this, WebCore::CachedResourceLoader *a2, const WebCore::ResourceLoaderOptions *a3)
{
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  WebCore::CachedResource *v17;
  uint64_t v18;
  WebCore::CachedResource *v19;
  void *v20;
  uint64_t v21;
  WebCore::CachedResource *v22;
  unsigned int *v23;
  WebCore::CachedResource *v24;
  uint64_t v25;
  uint64_t v26;
  WebCore::CachedResource *v27;
  unsigned int *v28;
  WebCore::CachedResource *v29;
  uint64_t v30;
  void *v31;
  unsigned int *v32;
  unsigned int *v33;
  _BYTE v34[24];
  unsigned int **v35;

  v7 = (uint64_t *)((char *)this + 112);
  v6 = *((_QWORD *)this + 14);
  if (v6)
  {
    do
      v8 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v8 + 1, (unsigned int *)v6));
    v33 = (unsigned int *)v6;
    v9 = *(_QWORD *)(v6 + 8);
    if (v9)
    {
      v35 = &v33;
      ++*(_DWORD *)(v9 + 548);
      v10 = *(_QWORD *)(v9 + 488);
      if (v10)
      {
        if (*(_QWORD *)(v10 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v9 + 464), (uint64_t *)&v35, (uint64_t)v34);
      }
    }
  }
  else
  {
    v33 = 0;
  }
  v12 = (uint64_t *)((char *)this + 120);
  v11 = *((_QWORD *)this + 15);
  if (v11)
  {
    do
      v13 = __ldaxr((unsigned int *)v11);
    while (__stlxr(v13 + 1, (unsigned int *)v11));
    v32 = (unsigned int *)v11;
    v14 = *(_QWORD *)(v11 + 8);
    if (v14)
    {
      v35 = &v32;
      ++*(_DWORD *)(v14 + 548);
      v15 = *(_QWORD *)(v14 + 488);
      if (v15)
      {
        if (*(_QWORD *)(v15 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v14 + 464), (uint64_t *)&v35, (uint64_t)v34);
      }
    }
  }
  else
  {
    v32 = 0;
  }
  v16 = *((_QWORD *)this + 10);
  if (v16)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16))
      (*(void (**)(_QWORD, WebCore::CachedResourceLoader *, const WebCore::ResourceLoaderOptions *))(**((_QWORD **)this + 10) + 48))(*((_QWORD *)this + 10), a2, a3);
    v17 = (WebCore::CachedResource *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 200))(*((_QWORD *)this + 10));
  }
  else
  {
    v17 = 0;
  }
  WebCore::CachedResourceHandleBase::setResource(v7, v17);
  v18 = *((_QWORD *)this + 11);
  if (v18)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18))
      (*(void (**)(_QWORD, WebCore::CachedResourceLoader *, const WebCore::ResourceLoaderOptions *))(**((_QWORD **)this + 11) + 48))(*((_QWORD *)this + 11), a2, a3);
    v19 = (WebCore::CachedResource *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 11) + 200))(*((_QWORD *)this + 11));
  }
  else
  {
    v19 = 0;
  }
  WebCore::CachedResourceHandleBase::setResource((uint64_t *)this + 15, v19);
  v21 = *v7;
  if (*v7)
  {
    v22 = *(WebCore::CachedResource **)(v21 + 8);
    v23 = v33;
    if (!v33)
    {
      if (!v22)
        goto LABEL_32;
      goto LABEL_29;
    }
  }
  else
  {
    v23 = v33;
    if (!v33)
      goto LABEL_32;
    v22 = 0;
  }
  v24 = (WebCore::CachedResource *)*((_QWORD *)v23 + 1);
  if (v22 != v24)
  {
    if (v24)
    {
      WebCore::CachedResource::removeClient(v24, (unsigned int **)this + 8);
      v21 = *((_QWORD *)this + 14);
    }
    if (v21)
    {
LABEL_29:
      v25 = *(_QWORD *)(v21 + 8);
      if (v25
        && WebCore::CachedResource::addClientToSet(*(WebCore::CachedResource **)(v21 + 8), (WebCore::StyleCrossfadeImage *)((char *)this + 64)))
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v25 + 88))(v25, (char *)this + 64);
      }
    }
  }
LABEL_32:
  v26 = *v12;
  if (*v12)
  {
    v27 = *(WebCore::CachedResource **)(v26 + 8);
    v28 = v32;
    if (!v32)
    {
      if (!v27)
        goto LABEL_41;
      goto LABEL_38;
    }
  }
  else
  {
    v28 = v32;
    if (!v32)
      goto LABEL_41;
    v27 = 0;
  }
  v29 = (WebCore::CachedResource *)*((_QWORD *)v28 + 1);
  if (v27 != v29)
  {
    if (v29)
    {
      WebCore::CachedResource::removeClient(v29, (unsigned int **)this + 8);
      v26 = *((_QWORD *)this + 15);
    }
    if (v26)
    {
LABEL_38:
      v30 = *(_QWORD *)(v26 + 8);
      if (v30
        && WebCore::CachedResource::addClientToSet(*(WebCore::CachedResource **)(v26 + 8), (WebCore::StyleCrossfadeImage *)((char *)this + 64)))
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v30 + 88))(v30, (char *)this + 64);
      }
    }
  }
LABEL_41:
  *((_BYTE *)this + 128) = 1;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v32, v20);
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v33, v31);
}

uint64_t WebCore::StyleCrossfadeImage::image@<X0>(uint64_t this@<X0>, const WebCore::RenderElement *a2@<X1>, const WebCore::FloatSize *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  WebCore::Image *v10;
  uint64_t v11;
  _DWORD *v12;
  float v13;
  uint64_t v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v21;
  uint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;

  if (!a2)
    goto LABEL_15;
  if (*(float *)a3 <= 0.0 || *((float *)a3 + 1) <= 0.0)
  {
    *a5 = 0;
    return this;
  }
  v7 = this;
  this = *(_QWORD *)(this + 80);
  if (!this || !*(_QWORD *)(v7 + 88))
  {
LABEL_15:
    this = WebCore::Image::nullImage((WebCore::Image *)this);
    ++*(_DWORD *)(this + 8);
    *a5 = this;
    return this;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 176))(&v25);
  v10 = (WebCore::Image *)(*(_QWORD *(**)(_DWORD **__return_ptr, _QWORD, const WebCore::RenderElement *, const WebCore::FloatSize *, uint64_t))(**(_QWORD **)(v7 + 88) + 176))(&v24, *(_QWORD *)(v7 + 88), a2, a3, a4);
  v11 = v25;
  if (v25 && (v12 = v24) != 0)
  {
    v13 = *(double *)(v7 + 96);
    v14 = *(_QWORD *)(v7 + 80);
    v15 = 0.0;
    if (v14)
    {
      v16 = 0.0;
      if (*(_QWORD *)(v7 + 88))
      {
        v15 = (*(float (**)(uint64_t, const WebCore::RenderElement *, float))(*(_QWORD *)v14 + 120))(v14, a2, 1.0);
        v16 = v17;
        v18 = (*(float (**)(_QWORD, const WebCore::RenderElement *, float))(**(_QWORD **)(v7 + 88) + 120))(*(_QWORD *)(v7 + 88), a2, 1.0);
        if (v15 != v18 || v16 != v19)
        {
          v21 = *(double *)(v7 + 96);
          v15 = (float)(v18 * v21) + (float)(v15 * (float)(1.0 - v21));
          v16 = (float)(v19 * v21) + (float)(v16 * (float)(1.0 - v21));
        }
      }
    }
    else
    {
      v16 = 0.0;
    }
    v22 = WTF::fastMalloc((WTF *)0x68);
    *(_DWORD *)(v22 + 8) = 1;
    *(_QWORD *)(v22 + 56) = 0;
    *(_QWORD *)(v22 + 64) = 0;
    *(_OWORD *)(v22 + 16) = 0u;
    *(_OWORD *)(v22 + 32) = 0u;
    *(_WORD *)(v22 + 48) = 0;
    *(_QWORD *)v22 = off_1E340B108;
    ++*(_DWORD *)(v11 + 8);
    *(_QWORD *)(v22 + 72) = v11;
    ++v12[2];
    *(_QWORD *)(v22 + 80) = v12;
    *(float *)(v22 + 88) = v13;
    *(float *)(v22 + 92) = v15;
    *(float *)(v22 + 96) = v16;
  }
  else
  {
    v22 = WebCore::Image::nullImage(v10);
    ++*(_DWORD *)(v22 + 8);
  }
  *a5 = v22;
  v23 = v24;
  v24 = 0;
  if (v23)
  {
    if (v23[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
    else
      --v23[2];
  }
  this = v25;
  v25 = 0;
  if (this)
  {
    if (*(_DWORD *)(this + 8) == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)this + 8))(this);
    else
      --*(_DWORD *)(this + 8);
  }
  return this;
}

float WebCore::StyleCrossfadeImage::fixedSize(WebCore::StyleCrossfadeImage *this, const WebCore::RenderElement *a2)
{
  uint64_t v3;
  float v4;
  float v6;
  float v7;
  float v8;
  float v9;
  float v11;

  v3 = *((_QWORD *)this + 10);
  v4 = 0.0;
  if (v3 && *((_QWORD *)this + 11))
  {
    v4 = (*(float (**)(uint64_t, float))(*(_QWORD *)v3 + 120))(v3, 1.0);
    v7 = v6;
    v8 = (*(float (**)(_QWORD, const WebCore::RenderElement *, float))(**((_QWORD **)this + 11) + 120))(*((_QWORD *)this + 11), a2, 1.0);
    if (v4 != v8 || v7 != v9)
    {
      v11 = *((double *)this + 12);
      return (float)(v8 * v11) + (float)(v4 * (float)(1.0 - v11));
    }
  }
  return v4;
}

uint64_t WebCore::StyleCrossfadeImage::knownToBeOpaque(WebCore::StyleCrossfadeImage *this, const WebCore::RenderElement *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *((_QWORD *)this + 10);
  if (!v4
    || (result = (*(uint64_t (**)(uint64_t, const WebCore::RenderElement *))(*(_QWORD *)v4 + 224))(v4, a2),
        (_DWORD)result))
  {
    v6 = *((_QWORD *)this + 11);
    if (!v6)
      return 1;
    result = (*(uint64_t (**)(uint64_t, const WebCore::RenderElement *))(*(_QWORD *)v6 + 224))(v6, a2);
    if ((_DWORD)result)
      return 1;
  }
  return result;
}

_QWORD *WebCore::StyleCrossfadeImage::imageChanged(_QWORD *this, WebCore::CachedImage *a2, const WebCore::IntRect *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;

  if (!*((_BYTE *)this + 128))
    return this;
  v3 = this;
  v4 = this[5];
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    v6 = (_QWORD *)(v4 + 16 * v5);
    if (*(_DWORD *)(v4 - 12))
    {
      v7 = (_QWORD *)this[5];
      if ((_DWORD)v5)
      {
        v8 = 16 * v5;
        v7 = (_QWORD *)this[5];
        while ((unint64_t)(*v7 + 1) <= 1)
        {
          v7 += 2;
          v8 -= 16;
          if (!v8)
          {
            v7 = v6;
            goto LABEL_9;
          }
        }
      }
      goto LABEL_9;
    }
    v7 = (_QWORD *)(v4 + 16 * v5);
  }
  else
  {
    v7 = 0;
    v5 = 0;
  }
  v6 = (_QWORD *)(v4 + 16 * v5);
LABEL_9:
  v15 = this + 5;
  v16 = v7;
  v17 = v6;
  if (v4)
  {
    v9 = *(unsigned int *)(v4 - 4);
    v10 = (_QWORD *)(v4 + 16 * v9);
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  v18 = v10;
  v19 = v4 + 16 * v9;
  v20 = 0;
  if (v7 != v10)
  {
    if (!*(_QWORD *)(*v7 + 8))
    {
      v13 = v7;
      do
      {
        v14 = v13 + 2;
        v13 = v6;
        if (v14 != v6)
        {
          v13 = v14;
          while ((unint64_t)(*v13 + 1) <= 1)
          {
            v13 += 2;
            if (v13 == v6)
            {
              v13 = v6;
              break;
            }
          }
        }
        v7 = v10;
        if (v13 == v10)
          break;
        v7 = v13;
      }
      while (!*(_QWORD *)(*v13 + 8));
    }
    v16 = v7;
  }
  if (v4)
    v11 = (_QWORD *)(v4 + 16 * *(unsigned int *)(v4 - 4));
  else
    v11 = 0;
  while (v7 != v11)
  {
    (*(void (**)(_QWORD, _QWORD *, _QWORD))(**(_QWORD **)(*v7 + 8) + 568))(*(_QWORD *)(*v7 + 8), v3, 0);
    v12 = v16;
    do
    {
      v12 += 2;
      v16 = v12;
    }
    while (v12 != v17 && (unint64_t)(*v12 + 1) <= 1);
    ++v20;
    this = WTF::WeakHashMap<WebCore::RenderElement,unsigned int,WTF::SingleThreadWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebCore::RenderElement,unsigned int,WTF::SingleThreadWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>>,WTF::WeakHashMap<WebCore::RenderElement,unsigned int,WTF::SingleThreadWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebCore::RenderElement,unsigned int,WTF::SingleThreadWeakPtrImpl>::PeekType const>::skipEmptyBuckets(&v15);
    ++*((_DWORD *)v15 + 2);
    v7 = v16;
  }
  return this;
}

_QWORD *`non-virtual thunk to'WebCore::StyleCrossfadeImage::imageChanged(WebCore::StyleCrossfadeImage *this, WebCore::CachedImage *a2, const WebCore::IntRect *a3)
{
  return WebCore::StyleCrossfadeImage::imageChanged((_QWORD *)this - 8, a2, a3);
}

void WebCore::StyleCursorImage::~StyleCursorImage(WebCore::StyleCursorImage *this, void *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  WTF::StringImpl *v16;
  WTF::StringImpl *v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;

  v4 = (uint64_t *)((char *)this + 120);
  v3 = *((_QWORD *)this + 15);
  if (!v3)
  {
    v5 = 0;
    v6 = 0;
LABEL_3:
    v7 = v5;
    v5 = (uint64_t *)(v3 + 8 * v6);
    goto LABEL_4;
  }
  v6 = *(unsigned int *)(v3 - 4);
  v5 = (uint64_t *)(v3 + 8 * v6);
  if (!*(_DWORD *)(v3 - 12))
    goto LABEL_3;
  if (!(_DWORD)v6)
  {
    v9 = 0;
    v7 = (uint64_t *)*((_QWORD *)this + 15);
    goto LABEL_7;
  }
  v21 = 8 * v6;
  v7 = (uint64_t *)*((_QWORD *)this + 15);
  while ((unint64_t)(*v7 + 1) <= 1)
  {
    ++v7;
    v21 -= 8;
    if (!v21)
    {
      v7 = v5;
      break;
    }
  }
LABEL_4:
  if (!v3)
  {
    v8 = 0;
    goto LABEL_8;
  }
  v9 = *(unsigned int *)(v3 - 4);
LABEL_7:
  v8 = (uint64_t *)(v3 + 8 * v9);
LABEL_8:
  if (v8 != v7)
  {
    while (!*(_QWORD *)(*v7 + 8))
    {
      v10 = v7 + 1;
      v7 = v5;
      if (v10 != v5)
      {
        v7 = v10;
        while ((unint64_t)(*v7 + 1) <= 1)
        {
          if (++v7 == v5)
          {
            v7 = v5;
            break;
          }
        }
      }
      if (v7 == v8)
      {
        v7 = v8;
        break;
      }
    }
  }
  if (v3)
    v11 = (uint64_t *)(v3 + 8 * *(unsigned int *)(v3 - 4));
  else
    v11 = 0;
  while (v7 != v11)
  {
    v13 = *v7;
    v12 = v7 + 1;
    WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::NodeIterator>(*(_QWORD *)(v13 + 8) + 216, this);
    v14 = v5;
    if (v12 != v5)
    {
      v14 = v12;
      while ((unint64_t)(*v14 + 1) <= 1)
      {
        if (++v14 == v5)
        {
          v14 = v5;
          break;
        }
      }
    }
    v7 = v8;
    if (v14 != v8)
    {
      v7 = v14;
      if (!*(_QWORD *)(*v14 + 8))
      {
        while (1)
        {
          v15 = v7 + 1;
          v7 = v5;
          if (v15 != v5)
          {
            v7 = v15;
            while ((unint64_t)(*v7 + 1) <= 1)
            {
              if (++v7 == v5)
              {
                v7 = v5;
                break;
              }
            }
          }
          if (v7 == v8)
            break;
          if (*(_QWORD *)(*v7 + 8))
            goto LABEL_36;
        }
        v7 = v8;
      }
    }
LABEL_36:
    ++*((_DWORD *)this + 32);
  }
  WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::~HashTable(v4, a2);
  v17 = (WTF::StringImpl *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v17)
  {
    if (*(_DWORD *)v17 == 2)
      WTF::StringImpl::destroy(v17, v16);
    else
      *(_DWORD *)v17 -= 2;
  }
  v18 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v18)
  {
    if (v18[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v18 + 8))(v18);
    else
      --v18[2];
  }
  *(_QWORD *)this = off_1E3442DC0;
  v19 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v19)
  {
    if (v19[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v19 + 8))(v19);
    else
      --v19[2];
  }
  v20 = *((_QWORD *)this + 2);
  if (v20)
  {
    *(_QWORD *)(v20 + 8) = 0;
    v22 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v22)
    {
      do
      {
        v23 = __ldaxr(v22);
        v24 = v23 - 1;
      }
      while (__stlxr(v24, v22));
      if (!v24)
      {
        atomic_store(1u, v22);
        WTF::fastFree((WTF *)v22, v16);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::StyleCursorImage::~StyleCursorImage(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::StyleCursorImage::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (*(_BYTE *)(a2 + 24) != 1)
    return 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48));
  if (!(_DWORD)result)
    return result;
  return !(*(unsigned __int8 *)(a1 + 40) | *(unsigned __int8 *)(a2 + 40))
      && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32);
}

__n128 WebCore::StyleCursorImage::computedStyleValue@<Q0>(WebCore::StyleCursorImage *this@<X0>, uint64_t *a2@<X8>)
{
  _DWORD *v5;
  char v6;
  uint64_t v7;
  char v8;
  __n128 result;
  int v10;
  __n128 v11;
  __int128 v12;
  uint64_t v13;

  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 6) + 24))(&v13);
  v5 = (_DWORD *)*((_QWORD *)this + 9);
  if (v5)
    *v5 += 2;
  v6 = *((_BYTE *)this + 112);
  v11 = *((__n128 *)this + 6);
  v12 = *((_OWORD *)this + 5);
  v7 = WTF::fastCompactMalloc((WTF *)0x48);
  *(_DWORD *)v7 = 2;
  v8 = *(_BYTE *)(v7 + 6);
  *(_WORD *)(v7 + 4) = 6144;
  *(_BYTE *)(v7 + 6) = v8 & 0xFC;
  *(_QWORD *)(v7 + 8) = v5;
  result = v11;
  *(_OWORD *)(v7 + 16) = v12;
  *(__n128 *)(v7 + 32) = v11;
  *(_QWORD *)(v7 + 48) = v13;
  v10 = *((_DWORD *)this + 16);
  *(_QWORD *)(v7 + 56) = *((_QWORD *)this + 7);
  *(_DWORD *)(v7 + 64) = v10;
  *(_BYTE *)(v7 + 68) = v6;
  *a2 = v7;
  return result;
}

void WebCore::StyleCursorImage::selectBestFitImage(WebCore::StyleCursorImage *this@<X0>, const WebCore::Document *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, float a6@<S2>)
{
  _DWORD *v8;
  int v9;
  BOOL v10;
  BOOL v12;
  void *v13;
  WTF::StringImpl *v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WebCore::Node *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  void *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  WTF *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  WTF::StringImpl *v41;
  WTF::StringImpl *v42;
  const WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  WTF::StringImpl *v46;
  char v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  WebCore::CachedResource *v53;
  uint64_t v54;
  _DWORD *v55;
  WTF::StringImpl *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  WTF *v62;
  uint64_t v63;
  WTF *v64;
  uint64_t v65;
  WTF *v66;
  uint64_t *v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  WTF::StringImpl *v71;
  WTF::StringImpl *v72[2];
  __int128 v73;
  WebCore::Node *v74;
  WTF::StringImpl *v75;

  v8 = (_DWORD *)*((_QWORD *)this + 6);
  v9 = *((unsigned __int8 *)v8 + 24);
  if (v8)
    v10 = v9 == 2;
  else
    v10 = 0;
  if (!v10)
  {
    if (v8)
      v12 = v9 == 0;
    else
      v12 = 0;
    if (!v12)
      goto LABEL_79;
    ++v8[2];
    v74 = 0;
    WebCore::SVGURIReference::targetElementFromIRIString((WebCore::StyleCursorImage *)((char *)this + 72), (const WebCore::Document *)((char *)a2 + 96), &v74, (uint64_t *)&v71, a4, a5, a6);
    v14 = v71;
    v71 = 0;
    if (v14
      && ((*((_WORD *)v14 + 14) & 0x20) == 0
       || *(_QWORD *)(*((_QWORD *)v14 + 12) + 24) != *(_QWORD *)(WebCore::SVGNames::cursorTag + 24)))
    {
      if (*((_DWORD *)v14 + 6) == 2)
      {
        if ((*((_WORD *)v14 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v14, v13);
      }
      else
      {
        *((_DWORD *)v14 + 6) -= 2;
      }
      v14 = 0;
    }
    v15 = v72[0];
    v72[0] = 0;
    if (v15)
    {
      if (*(_DWORD *)v15 == 2)
        WTF::StringImpl::destroy(v15, (WTF::StringImpl *)v13);
      else
        *(_DWORD *)v15 -= 2;
    }
    v16 = v71;
    v71 = 0;
    if (v16)
    {
      if (*((_DWORD *)v16 + 6) == 2)
      {
        if ((*((_WORD *)v16 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v16, v13);
      }
      else
      {
        *((_DWORD *)v16 + 6) -= 2;
      }
    }
    v17 = v74;
    v74 = 0;
    if (v17)
    {
      if (*((_DWORD *)v17 + 6) == 2)
      {
        if ((*((_WORD *)v17 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v17, v13);
      }
      else
      {
        *((_DWORD *)v17 + 6) -= 2;
      }
    }
    if (!v14)
    {
LABEL_77:
      if (v8[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
      else
        --v8[2];
LABEL_79:
      v57 = *((_QWORD *)this + 6);
      ++*(_DWORD *)(v57 + 8);
      *(_QWORD *)a3 = v57;
      *(_DWORD *)(a3 + 8) = 1065353216;
      *(_QWORD *)(a3 + 16) = 0;
      return;
    }
    v18 = *((_DWORD *)this + 33);
    v19 = *((_DWORD *)this + 32) + 1;
    *((_DWORD *)this + 32) = v19;
    if (v19 > v18)
    {
      _ZN3WTF9HashTableINS_3RefIN7WebCore30WeakPtrImplWithEventTargetDataENS_12RawPtrTraitsIS3_EENS_21DefaultRefDerefTraitsIS3_EEEES8_NS_17IdentityExtractorENS_11DefaultHashIS8_EENS_10HashTraitsIS8_EESD_E8removeIfIZNS_11WeakHashSetINS2_17RTCPeerConnectionES3_LNS_32EnableWeakPtrThreadingAssertionsE1EE20removeNullReferencesEvEUlRT_E_EEbRKSK_((uint64_t *)this + 15, &v71);
      v20 = 0;
      *((_DWORD *)this + 32) = 0;
      v21 = *((_QWORD *)this + 15);
      if (v21)
      {
        v20 = *(_DWORD *)(v21 - 12);
        if (v20 > 0x7FFFFFFE)
          v20 = 0x7FFFFFFF;
      }
      *((_DWORD *)this + 33) = 2 * v20;
    }
    if ((*((_QWORD *)v14 + 2) & 0xFFFFFFFFFFFFLL) == 0)
    {
      v22 = WTF::fastCompactMalloc((WTF *)0x28);
      *(_DWORD *)v22 = 1;
      *(_QWORD *)(v22 + 16) = 0;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 8) = v14;
      *(_BYTE *)(v22 + 32) = 0;
      v24 = *((_QWORD *)v14 + 2);
      *((_QWORD *)v14 + 2) = v24 & 0xFFFF000000000000 | v22;
      v25 = v24 & 0xFFFFFFFFFFFFLL;
      if ((v24 & 0xFFFFFFFFFFFFLL) != 0)
      {
        do
        {
          v26 = __ldaxr((unsigned int *)v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, (unsigned int *)v25));
        if (!v27)
        {
          atomic_store(1u, (unsigned int *)v25);
          v63 = *(unsigned int *)(v25 + 28);
          if ((_DWORD)v63)
            WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v25 + 16), (WTF::StringImpl *)(*(_QWORD *)(v25 + 16) + 32 * v63));
          v64 = *(WTF **)(v25 + 16);
          if (v64)
          {
            *(_QWORD *)(v25 + 16) = 0;
            *(_DWORD *)(v25 + 24) = 0;
            WTF::fastFree(v64, v23);
          }
          WTF::fastFree((WTF *)v25, v23);
        }
      }
    }
    v28 = *((_QWORD *)v14 + 2) & 0xFFFFFFFFFFFFLL;
    do
      v29 = __ldaxr((unsigned int *)v28);
    while (__stlxr(v29 + 1, (unsigned int *)v28));
    do
      v30 = __ldaxr((unsigned int *)v28);
    while (__stlxr(v30 + 1, (unsigned int *)v28));
    v75 = (WTF::StringImpl *)v28;
    WTF::HashSet<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTableTraits>::add((uint64_t *)this + 15, (uint64_t *)&v75, (uint64_t)&v71);
    v32 = (uint64_t)v75;
    v75 = 0;
    if (!v32)
      goto LABEL_43;
    do
    {
      v33 = __ldaxr((unsigned int *)v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, (unsigned int *)v32));
    if (!v34)
    {
      atomic_store(1u, (unsigned int *)v32);
      v65 = *(unsigned int *)(v32 + 28);
      if ((_DWORD)v65)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v32 + 16), (WTF::StringImpl *)(*(_QWORD *)(v32 + 16) + 32 * v65));
      v66 = *(WTF **)(v32 + 16);
      if (v66)
      {
        *(_QWORD *)(v32 + 16) = 0;
        *(_DWORD *)(v32 + 24) = 0;
        WTF::fastFree(v66, v31);
      }
      WTF::fastFree((WTF *)v32, v31);
      if (!v28)
        goto LABEL_46;
    }
    else
    {
LABEL_43:
      if (!v28)
      {
LABEL_46:
        if (LOBYTE(v72[1]))
        {
          WebCore::StyleCursorImage::cursorElementChanged(this, v14);
          WTF::WeakHashSet<WebCore::NodeIterator,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::NodeIterator>((uint64_t)v14 + 216, this, (uint64_t)&v71);
        }
        v37 = *(WTF **)(*((_QWORD *)v8 + 4) + 16);
        if (v37)
          *(_DWORD *)v37 += 2;
        v38 = *((_QWORD *)v14 + 24);
        v39 = *(_QWORD *)(v38 + 24);
        if (v39 && *(_DWORD *)(v39 - 12))
        {
          v58 = *(unsigned int *)(v39 - 4);
          if ((_DWORD)v58)
          {
            v59 = 8 * v58;
            v60 = *(uint64_t **)(v38 + 24);
            while ((unint64_t)(*v60 + 1) <= 1)
            {
              ++v60;
              v59 -= 8;
              if (!v59)
                goto LABEL_51;
            }
          }
          else
          {
            v60 = *(uint64_t **)(v38 + 24);
          }
          v67 = (uint64_t *)(v39 + 8 * v58);
          if (v60 != v67)
          {
            v68 = *v60;
LABEL_123:
            if (*(_QWORD *)(v68 + 8))
            {
              v40 = v38 + 48;
LABEL_52:
              v41 = *(WTF::StringImpl **)(*(_QWORD *)v40 + 32);
              if (v41)
                *(_DWORD *)v41 += 2;
              v75 = v41;
              WebCore::Document::completeURL(a2, &v75, (uint64_t)a2 + 848, 0, (WTF::URL *)&v71);
              v44 = v75;
              v75 = 0;
              if (v44)
              {
                if (*(_DWORD *)v44 == 2)
                  WTF::StringImpl::destroy(v44, v42);
                else
                  *(_DWORD *)v44 -= 2;
              }
              if ((WTF::equal(v37, v71, v43) & 1) == 0)
              {
                v46 = v71;
                v71 = 0;
                v69 = v73;
                v70 = *(_OWORD *)v72;
                LODWORD(v72[0]) &= ~1u;
                v47 = *((_BYTE *)this + 112);
                if (v46)
                  *(_DWORD *)v46 += 2;
                v48 = WTF::fastCompactMalloc((WTF *)0x78);
                *(_DWORD *)v48 = 2;
                v49 = *(_BYTE *)(v48 + 6);
                *(_WORD *)(v48 + 4) = 2048;
                *(_BYTE *)(v48 + 6) = v49 & 0xFC;
                *(_QWORD *)(v48 + 8) = v46;
                *(_QWORD *)(v48 + 16) = v46;
                *(_OWORD *)(v48 + 24) = v70;
                *(_OWORD *)(v48 + 40) = v69;
                *(_BYTE *)(v48 + 56) = 0;
                *(_BYTE *)(v48 + 64) = 0;
                *(_QWORD *)(v48 + 72) = 0;
                *(_BYTE *)(v48 + 80) = v47;
                *(_QWORD *)(v48 + 88) = 0;
                *(_BYTE *)(v48 + 96) = 0;
                *(_QWORD *)(v48 + 104) = 0;
                *(_BYTE *)(v48 + 112) = 0;
                v50 = WTF::fastMalloc((WTF *)0x48);
                v51 = v50;
                *(_DWORD *)(v50 + 8) = 1;
                *(_QWORD *)(v50 + 16) = 0;
                *(_BYTE *)(v50 + 24) = 0;
                *(_QWORD *)v50 = off_1E3441AE8;
                *(_QWORD *)(v50 + 32) = v48;
                *(_BYTE *)(v50 + 40) = 1;
                *(_DWORD *)(v50 + 44) = 1065353216;
                *(_QWORD *)(v50 + 48) = 0;
                *(_WORD *)(v50 + 56) = 0;
                *(_DWORD *)(v50 + 60) = 0;
                *(_DWORD *)(v50 + 64) = 0;
                if (*(_BYTE *)(v48 + 64) && (v52 = *(_QWORD *)(v48 + 56)) != 0)
                  v53 = *(WebCore::CachedResource **)(v52 + 8);
                else
                  v53 = 0;
                v54 = v50 + 48;
                WebCore::CachedResourceHandleBase::setResource((uint64_t *)(v50 + 48), v53);
                if (*(_QWORD *)v54 && *(_QWORD *)(*(_QWORD *)v54 + 8))
                  *(_BYTE *)(v51 + 40) = 0;
                v55 = (_DWORD *)*((_QWORD *)this + 6);
                *((_QWORD *)this + 6) = v51;
                if (v55)
                {
                  if (v55[2] == 1)
                    (*(void (**)(_DWORD *))(*(_QWORD *)v55 + 8))(v55);
                  else
                    --v55[2];
                }
              }
              v56 = v71;
              v71 = 0;
              if (v56)
              {
                if (*(_DWORD *)v56 == 2)
                {
                  WTF::StringImpl::destroy(v56, v45);
                  if (!v37)
                    goto LABEL_75;
                  goto LABEL_73;
                }
                *(_DWORD *)v56 -= 2;
              }
              if (!v37)
                goto LABEL_75;
LABEL_73:
              if (*(_DWORD *)v37 == 2)
                WTF::StringImpl::destroy(v37, v45);
              else
                *(_DWORD *)v37 -= 2;
LABEL_75:
              if (*((_DWORD *)v14 + 6) == 2)
              {
                if ((*((_WORD *)v14 + 15) & 0x400) == 0)
                  WebCore::Node::removedLastRef(v14, v45);
              }
              else
              {
                *((_DWORD *)v14 + 6) -= 2;
              }
              goto LABEL_77;
            }
            while (++v60 != v67)
            {
              v68 = *v60;
              if ((unint64_t)(*v60 + 1) > 1)
              {
                if (v60 != v67)
                  goto LABEL_123;
                break;
              }
            }
          }
        }
LABEL_51:
        v40 = v38 + 40;
        goto LABEL_52;
      }
    }
    do
    {
      v35 = __ldaxr((unsigned int *)v28);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, (unsigned int *)v28));
    if (!v36)
    {
      atomic_store(1u, (unsigned int *)v28);
      v61 = *(unsigned int *)(v28 + 28);
      if ((_DWORD)v61)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v28 + 16), (WTF::StringImpl *)(*(_QWORD *)(v28 + 16) + 32 * v61));
      v62 = *(WTF **)(v28 + 16);
      if (v62)
      {
        *(_QWORD *)(v28 + 16) = 0;
        *(_DWORD *)(v28 + 24) = 0;
        WTF::fastFree(v62, v31);
      }
      WTF::fastFree((WTF *)v28, v31);
    }
    goto LABEL_46;
  }
  ++v8[2];
  WebCore::StyleImageSet::selectBestFitImage((WebCore::StyleImageSet *)v8, a2, a3);
  if (v8[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
  else
    --v8[2];
}

void WebCore::StyleCursorImage::cursorElementChanged(WebCore::StyleCursorImage *this, WebCore::SVGCursorElement *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  WTF *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  WTF *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  WTF *v30[3];
  char v31;
  char v32;

  v32 = 0;
  v31 = 0;
  memset(v30, 0, sizeof(v30));
  v4 = *((_QWORD *)a2 + 25);
  v5 = *(_QWORD *)(v4 + 24);
  if (!v5 || !*(_DWORD *)(v5 - 12))
    goto LABEL_2;
  v18 = *(unsigned int *)(v5 - 4);
  if ((_DWORD)v18)
  {
    v19 = 8 * v18;
    v20 = *(uint64_t **)(v4 + 24);
    while ((unint64_t)(*v20 + 1) <= 1)
    {
      ++v20;
      v19 -= 8;
      if (!v19)
        goto LABEL_2;
    }
  }
  else
  {
    v20 = *(uint64_t **)(v4 + 24);
  }
  v26 = (uint64_t *)(v5 + 8 * v18);
  if (v20 == v26)
    goto LABEL_2;
  v27 = *v20;
LABEL_31:
  if (!*(_QWORD *)(v27 + 8))
  {
    while (++v20 != v26)
    {
      v27 = *v20;
      if ((unint64_t)(*v20 + 1) > 1)
      {
        if (v20 != v26)
          goto LABEL_31;
        break;
      }
    }
LABEL_2:
    v6 = v4 + 40;
    goto LABEL_3;
  }
  v6 = v4 + 48;
LABEL_3:
  v7 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v6 + 28), (const WebCore::SVGLengthContext *)v30);
  v8 = *((_QWORD *)a2 + 26);
  v9 = *(_QWORD *)(v8 + 24);
  if (!v9 || !*(_DWORD *)(v9 - 12))
    goto LABEL_4;
  v21 = *(unsigned int *)(v9 - 4);
  if ((_DWORD)v21)
  {
    v22 = 8 * v21;
    v23 = *(uint64_t **)(v8 + 24);
    while ((unint64_t)(*v23 + 1) <= 1)
    {
      ++v23;
      v22 -= 8;
      if (!v22)
        goto LABEL_4;
    }
  }
  else
  {
    v23 = *(uint64_t **)(v8 + 24);
  }
  v28 = (uint64_t *)(v9 + 8 * v21);
  if (v23 == v28)
    goto LABEL_4;
  v29 = *v23;
LABEL_40:
  if (!*(_QWORD *)(v29 + 8))
  {
    while (++v23 != v28)
    {
      v29 = *v23;
      if ((unint64_t)(*v23 + 1) > 1)
      {
        if (v23 != v28)
          goto LABEL_40;
        break;
      }
    }
LABEL_4:
    v10 = v8 + 40;
    goto LABEL_5;
  }
  v10 = v8 + 48;
LABEL_5:
  v13 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v10 + 28), (const WebCore::SVGLengthContext *)v30);
  v14 = *((unsigned __int8 *)this + 64);
  if (!*((_BYTE *)this + 64))
  {
    HIDWORD(v14) = 0;
    *((_BYTE *)this + 64) = 1;
  }
  LODWORD(v14) = llroundf(v13);
  LODWORD(v12) = llroundf(v7);
  *((_QWORD *)this + 7) = v12 | (v14 << 32);
  v15 = v30[0];
  v30[0] = 0;
  if (v15)
  {
    do
    {
      v16 = __ldaxr((unsigned int *)v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, (unsigned int *)v15));
    if (!v17)
    {
      atomic_store(1u, (unsigned int *)v15);
      v24 = *((unsigned int *)v15 + 7);
      if ((_DWORD)v24)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v15 + 2), (WTF::StringImpl *)(*((_QWORD *)v15 + 2) + 32 * v24));
      v25 = (WTF *)*((_QWORD *)v15 + 2);
      if (v25)
      {
        *((_QWORD *)v15 + 2) = 0;
        *((_DWORD *)v15 + 6) = 0;
        WTF::fastFree(v25, v11);
      }
      WTF::fastFree(v15, v11);
    }
  }
}

uint64_t *WebCore::StyleCursorImage::setContainerContextForRenderer(WebCore::StyleCursorImage *this, WTF **a2, const WebCore::FloatSize *a3, float a4)
{
  uint64_t *result;
  uint64_t *v9;
  float v10;
  double v11;
  int v12;
  __int32 v13;
  double v14;
  int v15;
  int32x2_t v16;

  if (!*((_BYTE *)this + 24)
    || (result = (uint64_t *)(*(uint64_t (**)(WebCore::StyleCursorImage *))(*(_QWORD *)this + 192))(this),
        !*((_BYTE *)result + 24)))
  {
    v9 = (uint64_t *)*((_QWORD *)this + 4);
    if (v9)
      v9 = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v9 + 200))(v9);
    v10 = *((float *)a3 + 1);
    v11 = *(float *)a3 * 64.0;
    if (v11 > -2147483650.0)
      v12 = (int)v11;
    else
      v12 = 0x80000000;
    if (v11 < 2147483650.0)
      v13 = v12;
    else
      v13 = 0x7FFFFFFF;
    v16.i32[0] = v13;
    v14 = v10 * 64.0;
    if (v14 >= 2147483650.0)
    {
      v15 = 0x7FFFFFFF;
    }
    else if (v14 <= -2147483650.0)
    {
      v15 = 0x80000000;
    }
    else
    {
      v15 = (int)v14;
    }
    v16.i32[1] = v15;
    return WebCore::CachedImage::setContainerContextForClient(v9, a2, &v16, a4, (WebCore::StyleCursorImage *)((char *)this + 72));
  }
  return result;
}

uint64_t WebCore::StyleCursorImage::usesDataProtocol(WebCore::StyleCursorImage *this)
{
  return WTF::URL::protocolIs();
}

WebCore::StyleCustomPropertyData *WebCore::StyleCustomPropertyData::StyleCustomPropertyData(WebCore::StyleCustomPropertyData *this, const WebCore::StyleCustomPropertyData *a2)
{
  const WebCore::StyleCustomPropertyData **v3;
  uint64_t *v4;
  const WebCore::StyleCustomPropertyData *v5;
  uint64_t v6;
  uint64_t v8;

  *(_DWORD *)this = 1;
  *((_QWORD *)this + 1) = 0;
  v3 = (const WebCore::StyleCustomPropertyData **)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  v4 = (uint64_t *)((char *)this + 16);
  *((_DWORD *)this + 6) = *((_DWORD *)a2 + 6);
  *((_DWORD *)this + 7) = 0;
  *((_BYTE *)this + 32) = *((_BYTE *)a2 + 32);
  v5 = (const WebCore::StyleCustomPropertyData *)*((_QWORD *)a2 + 1);
  if (!v5 && (v8 = *((_QWORD *)a2 + 2)) != 0 && *(_DWORD *)(v8 - 12)
    || *((_DWORD *)a2 + 7) <= 3u && (v6 = *((_QWORD *)a2 + 2)) != 0 && *(_DWORD *)(v6 - 12) >= 9u)
  {
    ++*(_DWORD *)a2;
    *v3 = a2;
LABEL_6:
    *((_DWORD *)this + 7) = *((_DWORD *)a2 + 7) + 1;
    return this;
  }
  if (v5)
    ++*(_DWORD *)v5;
  *v3 = v5;
  WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::operator=(v4, (_QWORD *)a2 + 2);
  a2 = *v3;
  if (*v3)
    goto LABEL_6;
  return this;
}

uint64_t WebCore::StyleCustomPropertyData::get(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (!a1)
    return 0;
  v2 = *a2;
  while (1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      v4 = 0;
      v5 = *(_DWORD *)(v3 - 8);
      v6 = (*(_DWORD *)(v2 + 16) >> 8) & v5;
      v7 = *(_QWORD *)(v3 + 16 * v6);
      if (v7)
      {
        while (v7 == -1 || v7 != v2)
        {
          v6 = (++v4 + (_DWORD)v6) & v5;
          v7 = *(_QWORD *)(v3 + 16 * v6);
          if (!v7)
            goto LABEL_12;
        }
        v9 = *(_QWORD *)(v3 + 16 * v6 + 8);
        if (v9)
          return v9;
      }
    }
LABEL_12:
    a1 = *(_QWORD *)(a1 + 8);
    if (!a1)
      return 0;
  }
}

_DWORD **WebCore::StyleCustomPropertyData::set(uint64_t a1, WTF::StringImpl *a2, WTF::StringImpl *a3)
{
  BOOL v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  _QWORD *v10;
  _DWORD *v11;
  int v12;
  int i;
  uint64_t v14;
  _QWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD **result;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int j;
  uint64_t v30;
  uint64_t v31;
  unsigned int v33;

  if (*(_BYTE *)(a1 + 32))
    v6 = 1;
  else
    v6 = (*(_DWORD *)(*(_QWORD *)a3 + 72) - 3) < 2;
  v8 = (uint64_t *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_BYTE *)(a1 + 32) = v6;
  if (v7
    || (WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash((uint64_t *)(a1 + 16), 8u, 0), (v7 = *v8) != 0))
  {
    v9 = *(_DWORD *)(v7 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = 0;
  v11 = *(_DWORD **)a2;
  v12 = *(_DWORD *)(*(_QWORD *)a2 + 16) >> 8;
  for (i = 1; ; ++i)
  {
    v14 = v12 & v9;
    v15 = (_QWORD *)(v7 + 16 * v14);
    v16 = (_DWORD *)*v15;
    if (!*v15)
      break;
    if (v16 != (_DWORD *)-1)
    {
      v15 = v10;
      if (v16 == v11)
        return WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>::operator=<WebCore::CSSCustomPropertyValue const>((_DWORD **)(v7 + 16 * v14 + 8), a3);
    }
    v12 = i + v14;
    v10 = v15;
  }
  if (v10)
  {
    *v10 = 0;
    v10[1] = 0;
    --*(_DWORD *)(*v8 - 16);
    v11 = *(_DWORD **)a2;
    v15 = v10;
  }
  if (v11)
    *v11 += 2;
  *v15 = v11;
  v17 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  result = (_DWORD **)v15[1];
  v15[1] = v17;
  if (result)
  {
    if (*(_DWORD *)result == 2)
      result = (_DWORD **)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, a2);
    else
      *(_DWORD *)result -= 2;
  }
  v19 = *v8;
  if (*v8)
    v20 = *(_DWORD *)(v19 - 12) + 1;
  else
    v20 = 1;
  *(_DWORD *)(v19 - 12) = v20;
  v21 = *v8;
  if (*v8)
    v22 = *(_DWORD *)(v21 - 12);
  else
    v22 = 0;
  v23 = (*(_DWORD *)(v21 - 16) + v22);
  v24 = *(unsigned int *)(v21 - 4);
  if (v24 > 0x400)
  {
    if (v24 > 2 * v23)
      goto LABEL_23;
    goto LABEL_39;
  }
  if (3 * v24 <= 4 * v23)
  {
    if (!(_DWORD)v24)
    {
      v33 = 8;
      goto LABEL_44;
    }
LABEL_39:
    v33 = (_DWORD)v24 << (6 * *(_DWORD *)(v21 - 12) >= (2 * v24));
LABEL_44:
    result = (_DWORD **)WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash((uint64_t *)(a1 + 16), v33, (uint64_t)v15);
  }
LABEL_23:
  v25 = *(_QWORD *)(a1 + 8);
  if (v25)
  {
    v26 = *(_QWORD *)a2;
    do
    {
      v27 = *(_QWORD *)(v25 + 16);
      if (v27)
      {
        v28 = 0;
        for (j = *(_DWORD *)(v26 + 16) >> 8; ; j = v28 + v30)
        {
          v30 = j & *(_DWORD *)(v27 - 8);
          v31 = *(_QWORD *)(v27 + 16 * v30);
          if (!v31)
            break;
          if (v31 != -1 && v31 == v26)
          {
            if (*(_QWORD *)(v27 + 16 * v30 + 8))
              return result;
            break;
          }
          ++v28;
        }
      }
      v25 = *(_QWORD *)(v25 + 8);
    }
    while (v25);
  }
  ++*(_DWORD *)(a1 + 24);
  return result;
}

uint64_t WebCore::StyleCustomPropertyData::operator==(WTF **a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v3;
  WTF *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  WTF *v8;
  WTF *v9;
  uint64_t v10;
  WTF *v11;
  uint64_t v12;
  int v13;
  unsigned int i;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _BOOL4 v22;
  _BOOL4 v23;
  WTF *v24;
  WTF *v25;
  uint64_t v26;
  WTF *v27;
  WTF *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  WTF *v32;
  uint64_t v33;
  int v34;
  int j;
  unsigned int v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned int k;
  uint64_t v43;
  uint64_t v44;
  int v46;
  WTF *v47;
  uint64_t v49;
  WTF *v50;
  WTF *v51;
  WTF *v52;
  _QWORD *v53;
  WTF *v54;
  uint64_t v55;
  _QWORD v56[4];
  WTF **v57;

  if (*((_DWORD *)a1 + 6) != *(_DWORD *)(a2 + 24))
    return 0;
  v3 = a2;
  if (a1[1] == *(WTF **)(a2 + 8))
  {
    v4 = a1[2];
    if (v4)
      v5 = *((_DWORD *)v4 - 3);
    else
      v5 = 0;
    v6 = *(_QWORD *)(a2 + 16);
    if (v6)
      LODWORD(v6) = *(_DWORD *)(v6 - 12);
    if (v5 != (_DWORD)v6)
      return 0;
    if (v4)
    {
      v7 = *((unsigned int *)v4 - 1);
      v8 = (WTF *)((char *)v4 + 16 * v7);
      if (*((_DWORD *)v4 - 3))
      {
        v9 = a1[2];
        if ((_DWORD)v7)
        {
          v10 = 16 * v7;
          v9 = a1[2];
          while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
          {
            v9 = (WTF *)((char *)v9 + 16);
            v10 -= 16;
            if (!v10)
            {
              v9 = v8;
              goto LABEL_17;
            }
          }
        }
        goto LABEL_17;
      }
LABEL_106:
      v9 = v8;
    }
    else
    {
      v9 = 0;
      v7 = 0;
    }
    v8 = (WTF *)((char *)v4 + 16 * v7);
LABEL_17:
    if (v4)
      v11 = (WTF *)((char *)v4 + 16 * *((unsigned int *)v4 - 1));
    else
      v11 = 0;
    if (v11 == v9)
      return 1;
LABEL_20:
    v12 = *(_QWORD *)(v3 + 16);
    if (v12)
    {
      v13 = 0;
      for (i = *(_DWORD *)(*(_QWORD *)v9 + 16) >> 8; ; i = v13 + v15)
      {
        v15 = i & *(_DWORD *)(v12 - 8);
        v16 = *(_QWORD *)(v12 + 16 * v15);
        if (!v16)
          break;
        v17 = v16 != -1 && v16 == *(_QWORD *)v9;
        if (v17)
        {
          v18 = *(_QWORD *)(v12 + 16 * v15 + 8);
          if (!v18)
            return 0;
          v19 = *((_QWORD *)v9 + 1);
          if (*(_QWORD *)(v19 + 8) != *(_QWORD *)(v18 + 8))
            return 0;
          v20 = *(unsigned int *)(v19 + 72);
          v21 = *(_DWORD *)(v18 + 72);
          v22 = v21 == v20;
          v17 = v21 == -1;
          v23 = v21 == -1;
          if (v17)
            v22 = 0;
          if ((_DWORD)v20 != -1)
            v23 = v22;
          if (!v23)
            return 0;
          v54 = (WTF *)v18;
          v55 = v18;
          v56[0] = v18;
          v56[1] = v18;
          v56[2] = v18;
          if ((_DWORD)v20 == -1)
          {
            std::__throw_bad_variant_access[abi:sn180100]();
            goto LABEL_106;
          }
          v57 = &v54;
          result = ((uint64_t (*)(WTF ***, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZNK7WebCore22CSSCustomPropertyValue6equalsERKS9_E3__0JZNKS9_6equalsESB_E3__1ZNKS9_6equalsESB_E3__2ZNKS9_6equalsESB_E3__3ZNKS9_6equalsESB_E3__4EEEEEJRKNS0_6__implIJNS6_3RefINS8_25CSSVariableReferenceValueENS6_12RawPtrTraitsISL_EENS6_21DefaultRefDerefTraitsISL_EEEENS8_10CSSValueIDENSK_INS8_15CSSVariableDataENSM_ISS_EENSO_ISS_EEEENS_7variantIJNS8_6LengthENS9_18NumericSyntaxValueENS8_10StyleColorENS6_6RefPtrINS8_10StyleImageENSM_IS11_EENSO_IS11_EEEENS6_3URLENS6_6StringENS9_20TransformSyntaxValueEEEENS9_15SyntaxValueListEEEEEEEDcOT_DpOT0____fmatrix[v20])(&v57, v19 + 24);
          if ((_DWORD)result)
          {
            v24 = (WTF *)((char *)v9 + 16);
            v9 = v8;
            if (v24 != v8)
            {
              v9 = v24;
              while ((unint64_t)(*(_QWORD *)v9 + 1) <= 1)
              {
                v9 = (WTF *)((char *)v9 + 16);
                if (v9 == v8)
                {
                  v9 = v8;
                  break;
                }
              }
            }
            result = 1;
            if (v9 != v11)
              goto LABEL_20;
          }
          return result;
        }
        ++v13;
      }
    }
    return 0;
  }
  v54 = (WTF *)v56;
  v55 = 4;
  while (1)
  {
    v57 = a1;
    v25 = a1[2];
    if (!v25)
    {
      v28 = 0;
      v26 = 0;
LABEL_96:
      v27 = (WTF *)((char *)v25 + 16 * v26);
      goto LABEL_52;
    }
    v26 = *((unsigned int *)v25 - 1);
    v27 = (WTF *)((char *)v25 + 16 * v26);
    if (!*((_DWORD *)v25 - 3))
    {
      v28 = (WTF *)((char *)v25 + 16 * v26);
      goto LABEL_96;
    }
    v28 = a1[2];
    if ((_DWORD)v26)
    {
      v29 = 16 * v26;
      v28 = a1[2];
      while ((unint64_t)(*(_QWORD *)v28 + 1) <= 1)
      {
        v28 = (WTF *)((char *)v28 + 16);
        v29 -= 16;
        if (!v29)
        {
          v28 = v27;
          break;
        }
      }
    }
LABEL_52:
    v30 = v25 ? (uint64_t)v25 + 16 * *((unsigned int *)v25 - 1) : 0;
    if ((WTF *)v30 != v28)
      break;
LABEL_81:
    if (!a1[1])
    {
      result = 1;
      goto LABEL_85;
    }
    v46 = HIDWORD(v55);
    if (HIDWORD(v55) == (_DWORD)v55)
    {
      v53 = (_QWORD *)WTF::Vector<JSC::JSMapIterator *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v54, HIDWORD(v55) + 1, (unint64_t)&v57);
      v46 = HIDWORD(v55);
      *((_QWORD *)v54 + HIDWORD(v55)) = *v53;
    }
    else
    {
      *((_QWORD *)v54 + HIDWORD(v55)) = a1;
    }
    HIDWORD(v55) = v46 + 1;
    a1 = (WTF **)v57[1];
  }
LABEL_55:
  v31 = *(_QWORD *)v28;
  if (HIDWORD(v55))
  {
    v32 = v54;
    do
    {
      v33 = *(_QWORD *)(*(_QWORD *)v32 + 16);
      if (v33)
      {
        v34 = 0;
        for (j = *(_DWORD *)(v31 + 16) >> 8; ; j = v34 + v36)
        {
          v36 = j & *(_DWORD *)(v33 - 8);
          v37 = *(_QWORD *)(v33 + 16 * v36);
          if (!v37)
            break;
          if (v37 != -1 && v37 == v31)
          {
LABEL_98:
            v52 = (WTF *)((char *)v28 + 16);
            v28 = v27;
            if (v52 != v27)
            {
              v28 = v52;
              while ((unint64_t)(*(_QWORD *)v28 + 1) <= 1)
              {
                v28 = (WTF *)((char *)v28 + 16);
                if (v28 == v27)
                {
                  v28 = v27;
                  break;
                }
              }
            }
            if (v28 == (WTF *)v30)
            {
              a1 = v57;
              goto LABEL_81;
            }
            goto LABEL_55;
          }
          ++v34;
        }
      }
      v32 = (WTF *)((char *)v32 + 8);
    }
    while (v32 != (WTF *)((char *)v54 + 8 * HIDWORD(v55)));
  }
  v39 = v3;
  do
  {
    v40 = *(_QWORD *)(v39 + 16);
    if (v40)
    {
      v41 = 0;
      for (k = *(_DWORD *)(v31 + 16) >> 8; ; k = v41 + v43)
      {
        v43 = k & *(_DWORD *)(v40 - 8);
        v44 = *(_QWORD *)(v40 + 16 * v43);
        if (!v44)
          break;
        if (v44 != -1 && v44 == v31)
        {
          a2 = *(_QWORD *)(v40 + 16 * v43 + 8);
          if (!a2)
            break;
          v50 = v27;
          v51 = v28;
          result = WebCore::CSSCustomPropertyValue::equals(*((_QWORD *)v28 + 1), a2);
          v28 = v51;
          v27 = v50;
          if (!(_DWORD)result)
            goto LABEL_85;
          goto LABEL_98;
        }
        ++v41;
      }
    }
    v39 = *(_QWORD *)(v39 + 8);
  }
  while (v39);
  result = 0;
LABEL_85:
  v47 = v54;
  if (v56 != (_QWORD *)v54 && v54 != 0)
  {
    v54 = 0;
    LODWORD(v55) = 0;
    v49 = result;
    WTF::fastFree(v47, (void *)a2);
    return v49;
  }
  return result;
}

WTF *WebCore::StyleCustomPropertyData::forEachInternal<WTF::Function<WTF::IterationStatus ()(WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>> const&)> const&>(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int i;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v17;
  int v18;
  _QWORD *v19;
  WTF *result;
  uint64_t v22;
  WTF *v23;
  uint64_t v24;
  _BYTE v25[32];

  v23 = (WTF *)v25;
  v24 = 4;
  while (1)
  {
    v22 = a1;
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
    {
      v4 = *(unsigned int *)(v3 - 4);
      v5 = (uint64_t *)(v3 + 16 * v4);
      if (*(_DWORD *)(v3 - 12))
      {
        v6 = *(uint64_t **)(a1 + 16);
        if ((_DWORD)v4)
        {
          v7 = 16 * v4;
          v6 = *(uint64_t **)(a1 + 16);
          while ((unint64_t)(*v6 + 1) <= 1)
          {
            v6 += 2;
            v7 -= 16;
            if (!v7)
            {
              v6 = v5;
              break;
            }
          }
        }
LABEL_9:
        v8 = (uint64_t *)(v3 + 16 * *(unsigned int *)(v3 - 4));
        goto LABEL_10;
      }
      v6 = (uint64_t *)(v3 + 16 * v4);
    }
    else
    {
      v6 = 0;
      v4 = 0;
    }
    v5 = (uint64_t *)(v3 + 16 * v4);
    if (v3)
      goto LABEL_9;
    v8 = 0;
LABEL_10:
    if (v8 != v6)
      break;
LABEL_30:
    if (!*(_QWORD *)(a1 + 8))
      goto LABEL_39;
    v18 = HIDWORD(v24);
    if (HIDWORD(v24) == (_DWORD)v24)
    {
      v19 = (_QWORD *)WTF::Vector<JSC::JSMapIterator *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v23, HIDWORD(v24) + 1, (unint64_t)&v22);
      v18 = HIDWORD(v24);
      *((_QWORD *)v23 + HIDWORD(v24)) = *v19;
    }
    else
    {
      *((_QWORD *)v23 + HIDWORD(v24)) = a1;
    }
    HIDWORD(v24) = v18 + 1;
    a1 = *(_QWORD *)(v22 + 8);
  }
  while (1)
  {
    if (HIDWORD(v24))
    {
      v9 = v23;
      v10 = *v6;
      do
      {
        v11 = *(_QWORD *)(*(_QWORD *)v9 + 16);
        if (v11)
        {
          v12 = 0;
          for (i = *(_DWORD *)(v10 + 16) >> 8; ; i = v12 + v14)
          {
            v14 = i & *(_DWORD *)(v11 - 8);
            v15 = *(_QWORD *)(v11 + 16 * v14);
            if (!v15)
              break;
            if (v15 != -1 && v15 == v10)
              goto LABEL_23;
            ++v12;
          }
        }
        v9 = (WTF *)((char *)v9 + 8);
      }
      while (v9 != (WTF *)((char *)v23 + 8 * HIDWORD(v24)));
    }
    if ((*(unsigned int (**)(_QWORD, uint64_t *))(*(_QWORD *)*a2 + 16))(*a2, v6) == 1)
      break;
LABEL_23:
    v17 = v6 + 2;
    v6 = v5;
    if (v17 != v5)
    {
      v6 = v17;
      while ((unint64_t)(*v6 + 1) <= 1)
      {
        v6 += 2;
        if (v6 == v5)
        {
          v6 = v5;
          break;
        }
      }
    }
    if (v6 == v8)
    {
      a1 = v22;
      goto LABEL_30;
    }
  }
LABEL_39:
  result = v23;
  if (v25 != (_BYTE *)v23 && v23 != 0)
  {
    v23 = 0;
    LODWORD(v24) = 0;
    return (WTF *)WTF::fastFree(result, a2);
  }
  return result;
}

uint64_t WebCore::StyleCustomPropertyData::findKeyAtIndex@<X0>(uint64_t this@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  int v3;
  unsigned int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  WTF *v13;
  _DWORD *v14;
  WTF *v15;
  uint64_t v16;
  int v17;
  int i;
  unsigned int v19;
  _DWORD *v20;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t v27;
  _BYTE v28[32];

  v3 = (int)a2;
  v5 = 0;
  v6 = 0;
  *a3 = 0;
  v26 = (WTF *)v28;
  v27 = 4;
  while (1)
  {
    v25 = this;
    v7 = *(_QWORD *)(this + 16);
    if (v7)
    {
      v8 = *(unsigned int *)(v7 - 4);
      v9 = (_QWORD *)(v7 + 16 * v8);
      if (*(_DWORD *)(v7 - 12))
      {
        v10 = *(_QWORD **)(this + 16);
        if ((_DWORD)v8)
        {
          v11 = 16 * v8;
          v10 = *(_QWORD **)(this + 16);
          while ((unint64_t)(*v10 + 1) <= 1)
          {
            v10 += 2;
            v11 -= 16;
            if (!v11)
            {
              v10 = v9;
              break;
            }
          }
        }
LABEL_9:
        v12 = (_QWORD *)(v7 + 16 * *(unsigned int *)(v7 - 4));
        goto LABEL_10;
      }
      v10 = (_QWORD *)(v7 + 16 * v8);
    }
    else
    {
      v10 = 0;
      v8 = 0;
    }
    v9 = (_QWORD *)(v7 + 16 * v8);
    if (v7)
      goto LABEL_9;
    v12 = 0;
LABEL_10:
    if (v12 != v10)
      break;
LABEL_38:
    if (!*(_QWORD *)(this + 8))
    {
      v13 = v26;
      goto LABEL_51;
    }
    if (v5 == (_DWORD)v27)
    {
      v24 = (_QWORD *)WTF::Vector<JSC::JSMapIterator *,4ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v26, v5 + 1, (unint64_t)&v25);
      v5 = HIDWORD(v27);
      *((_QWORD *)v26 + HIDWORD(v27)) = *v24;
    }
    else
    {
      *((_QWORD *)v26 + v5) = this;
    }
    HIDWORD(v27) = ++v5;
    this = *(_QWORD *)(v25 + 8);
  }
  v13 = v26;
  if (v5)
  {
    while (1)
    {
      v14 = (_DWORD *)*v10;
      v15 = v26;
      do
      {
        v16 = *(_QWORD *)(*(_QWORD *)v15 + 16);
        if (v16)
        {
          v17 = 0;
          a2 = (void *)*(unsigned int *)(v16 - 8);
          for (i = v14[4] >> 8; ; i = v17 + v19)
          {
            v19 = i & a2;
            v20 = *(_DWORD **)(v16 + 16 * v19);
            if (!v20)
              break;
            if (v20 != (_DWORD *)-1 && v20 == v14)
              goto LABEL_24;
            ++v17;
          }
        }
        v15 = (WTF *)((char *)v15 + 8);
      }
      while (v15 != (WTF *)((char *)v26 + 8 * v5));
      if (v6 == v3)
        break;
      ++v6;
LABEL_24:
      v22 = v10 + 2;
      v10 = v9;
      if (v22 != v9)
      {
        v10 = v22;
        while ((unint64_t)(*v10 + 1) <= 1)
        {
          v10 += 2;
          if (v10 == v9)
          {
            v10 = v9;
            break;
          }
        }
      }
      if (v10 == v12)
        goto LABEL_38;
    }
  }
  else
  {
    while (v6 != v3)
    {
      v23 = v10 + 2;
      v10 = v9;
      if (v23 != v9)
      {
        v10 = v23;
        while ((unint64_t)(*v10 + 1) <= 1)
        {
          v10 += 2;
          if (v10 == v9)
          {
            v10 = v9;
            break;
          }
        }
      }
      ++v6;
      if (v10 == v12)
        goto LABEL_38;
    }
    v14 = (_DWORD *)*v10;
  }
  if (v14)
    *v14 += 2;
  *a3 = v14;
LABEL_51:
  if (v28 != (_BYTE *)v13 && v13)
  {
    v26 = 0;
    LODWORD(v27) = 0;
    return WTF::fastFree(v13, a2);
  }
  return this;
}

uint64_t WebCore::StyleImage::errorOccurred(WebCore::StyleImage *this)
{
  return 0;
}

uint64_t WebCore::StyleImage::usesDataProtocol(WebCore::StyleImage *this)
{
  return 0;
}

uint64_t WebCore::StyleImage::hasImage(WebCore::StyleImage *this)
{
  return 0;
}

uint64_t WebCore::StyleImage::reresolvedURL@<X0>(WTF::URL *a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  return WTF::URL::invalidate(a1);
}

BOOL WebCore::StyleGeneratedImage::usesImageContainerSize(WebCore::StyleGeneratedImage *this)
{
  return *((_BYTE *)this + 36) == 0;
}

BOOL WebCore::StyleGeneratedImage::imageHasRelativeWidth(WebCore::StyleGeneratedImage *this)
{
  return *((_BYTE *)this + 36) == 0;
}

BOOL WebCore::StyleGeneratedImage::imageHasRelativeHeight(WebCore::StyleGeneratedImage *this)
{
  return *((_BYTE *)this + 36) == 0;
}

uint64_t WebCore::StyleImage::cachedImage(WebCore::StyleImage *this)
{
  return 0;
}

uint64_t WebCore::StyleCanvasImage::isStyleCanvasImage(WebCore::StyleCanvasImage *this)
{
  return 1;
}

uint64_t `non-virtual thunk to'WebCore::StyleCanvasImage::isStyleCanvasImage(WebCore::StyleCanvasImage *this)
{
  return 1;
}

uint64_t WebCore::StyleMultiImage::selectedImage(WebCore::StyleMultiImage *this)
{
  return *((_QWORD *)this + 4);
}

{
  return *((_QWORD *)this + 4);
}

uint64_t *WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::operator=(uint64_t *a1, _QWORD *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  WTF::StringImpl *v7;
  _DWORD *v8;
  uint64_t v10;

  WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::HashTable(&v10, a2);
  v4 = *a1;
  *a1 = v10;
  v10 = v4;
  if (v4)
  {
    v5 = *(unsigned int *)(v4 - 4);
    if ((_DWORD)v5)
    {
      v6 = v4;
      do
      {
        v7 = *(WTF::StringImpl **)v6;
        if (*(_QWORD *)v6 != -1)
        {
          v8 = *(_DWORD **)(v6 + 8);
          *(_QWORD *)(v6 + 8) = 0;
          if (v8)
          {
            if (*v8 == 2)
            {
              WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v8, v3);
              v7 = *(WTF::StringImpl **)v6;
            }
            else
            {
              *v8 -= 2;
            }
          }
          *(_QWORD *)v6 = 0;
          if (v7)
          {
            if (*(_DWORD *)v7 == 2)
              WTF::StringImpl::destroy(v7, v3);
            else
              *(_DWORD *)v7 -= 2;
          }
        }
        v6 += 16;
        --v5;
      }
      while (v5);
    }
    WTF::fastFree((WTF *)(v4 - 16), v3);
  }
  return a1;
}

uint64_t *WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::HashTable(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  unsigned int v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  _DWORD *v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  _QWORD *v29;

  *a1 = 0;
  if (!*a2)
    return a1;
  v3 = *(unsigned int *)(*a2 - 12);
  if (!(_DWORD)v3)
    return a1;
  v5 = (v3 - 1) | ((v3 - 1) >> 1) | ((((_DWORD)v3 - 1) | ((v3 - 1) >> 1)) >> 2);
  v6 = v5 | (v5 >> 4) | ((v5 | (v5 >> 4)) >> 8);
  v7 = (v6 | HIWORD(v6)) + 1;
  if (v7 > 0x400)
  {
    if (v7 > 2 * v3)
      goto LABEL_43;
  }
  else if (3 * v7 > 4 * v3)
  {
LABEL_6:
    v8 = (double)v3;
    v9 = (double)v7;
    v10 = 0.604166667;
    goto LABEL_7;
  }
  LODWORD(v7) = 2 * v7;
  if (v7 <= 0x400)
    goto LABEL_6;
LABEL_43:
  v8 = (double)v3;
  v9 = (double)v7;
  v10 = 0.416666667;
LABEL_7:
  if (v9 * v10 <= v8)
    LODWORD(v7) = 2 * v7;
  if (v7 <= 8)
    v11 = 8;
  else
    v11 = v7;
  v12 = WTF::fastZeroedMalloc((WTF *)(16 * v11 + 16));
  *a1 = v12 + 16;
  *(_DWORD *)(v12 + 12) = v11;
  *(_DWORD *)(*a1 - 8) = v11 - 1;
  *(_DWORD *)(*a1 - 12) = v3;
  *(_DWORD *)(*a1 - 16) = 0;
  v14 = (_QWORD *)*a2;
  if (*a2)
  {
    v15 = *((unsigned int *)v14 - 1);
    v16 = &v14[2 * v15];
    if (*((_DWORD *)v14 - 3))
    {
      v17 = v14;
      if ((_DWORD)v15)
      {
        v18 = 16 * v15;
        v17 = v14;
        while ((unint64_t)(*v17 + 1) <= 1)
        {
          v17 += 2;
          v18 -= 16;
          if (!v18)
          {
            v17 = v16;
            goto LABEL_19;
          }
        }
      }
      goto LABEL_19;
    }
    v17 = &v14[2 * v15];
  }
  else
  {
    v17 = 0;
    v15 = 0;
  }
  v16 = &v14[2 * v15];
LABEL_19:
  if (v14)
    v19 = &v14[2 * *((unsigned int *)v14 - 1)];
  else
    v19 = 0;
  while (v17 != v19)
  {
    v20 = *a1;
    if (*a1)
      v21 = *(_DWORD *)(v20 - 8);
    else
      v21 = 0;
    v22 = 0;
    v23 = (_DWORD *)*v17;
    v24 = *(_DWORD *)(*v17 + 16) >> 8;
    do
    {
      v25 = v24 & v21;
      v24 = ++v22 + v25;
    }
    while (*(_QWORD *)(v20 + 16 * v25));
    if (v23)
      *v23 += 2;
    v26 = (_QWORD *)(v20 + 16 * v25);
    *v26 = v23;
    v27 = (_DWORD *)v17[1];
    if (v27)
      *v27 += 2;
    v28 = (_DWORD *)v26[1];
    v26[1] = v27;
    if (v28)
    {
      if (*v28 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v28, v13);
      else
        *v28 -= 2;
    }
    v29 = v17 + 2;
    v17 = v16;
    if (v29 != v16)
    {
      v17 = v29;
      while ((unint64_t)(*v17 + 1) <= 1)
      {
        v17 += 2;
        if (v17 == v16)
        {
          v17 = v16;
          break;
        }
      }
    }
  }
  return a1;
}

_QWORD *WTF::WeakHashMap<WebCore::RenderElement,unsigned int,WTF::SingleThreadWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebCore::RenderElement,unsigned int,WTF::SingleThreadWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>>,WTF::WeakHashMap<WebCore::RenderElement,unsigned int,WTF::SingleThreadWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebCore::RenderElement,unsigned int,WTF::SingleThreadWeakPtrImpl>::PeekType const>::skipEmptyBuckets(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result[3];
  v2 = result[1];
LABEL_2:
  while (v2 != v1 && !*(_QWORD *)(*(_QWORD *)v2 + 8))
  {
    v2 += 16;
    result[1] = v2;
    v3 = result[2];
    if (v2 != v3)
    {
      while ((unint64_t)(*(_QWORD *)v2 + 1) <= 1)
      {
        v2 += 16;
        result[1] = v2;
        if (v2 == v3)
        {
          v2 = v3;
          goto LABEL_2;
        }
      }
    }
  }
  return result;
}

_DWORD **WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>::operator=<WebCore::CSSCustomPropertyValue const>(_DWORD **a1, WTF::StringImpl *a2)
{
  _DWORD *v3;
  _DWORD *v4;

  v3 = *(_DWORD **)a2;
  *(_QWORD *)a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
  {
    if (*v4 == 2)
      WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v4, a2);
    else
      *v4 -= 2;
  }
  return a1;
}

uint64_t WTF::HashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::RefPtr<WebCore::CSSCustomPropertyValue const,WTF::RawPtrTraits<WebCore::CSSCustomPropertyValue const>,WTF::DefaultRefDerefTraits<WebCore::CSSCustomPropertyValue const>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>>::rehash(uint64_t *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  WTF::StringImpl *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  WTF::StringImpl *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  WTF::StringImpl *v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  WTF::StringImpl *v26;
  _DWORD *v27;
  WTF::StringImpl *v28;
  uint64_t result;

  v6 = *a1;
  if (*a1)
  {
    v7 = *(_DWORD *)(v6 - 4);
    v8 = *(_DWORD *)(v6 - 12);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v9 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v9 + 16;
  *(_DWORD *)(v9 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v8;
  if (v7)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = v6 + 16 * v11;
      v14 = *(WTF::StringImpl **)v13;
      if (!*(_QWORD *)v13)
      {
        v27 = *(_DWORD **)(v13 + 8);
        *(_QWORD *)(v13 + 8) = 0;
        if (v27)
        {
          if (*v27 == 2)
          {
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v27, v10);
            v14 = *(WTF::StringImpl **)v13;
          }
          else
          {
            *v27 -= 2;
          }
        }
        *(_QWORD *)v13 = 0;
        if (v14)
        {
          if (*(_DWORD *)v14 == 2)
            WTF::StringImpl::destroy(v14, v10);
          else
            *(_DWORD *)v14 -= 2;
        }
        goto LABEL_23;
      }
      if (v14 != (WTF::StringImpl *)-1)
        break;
LABEL_23:
      if (++v11 == v7)
        goto LABEL_40;
    }
    v15 = *a1;
    if (*a1)
      v16 = *(_DWORD *)(v15 - 8);
    else
      v16 = 0;
    v17 = 0;
    v18 = *((_DWORD *)v14 + 4) >> 8;
    do
    {
      v19 = v18 & v16;
      v18 = ++v17 + v19;
    }
    while (*(_QWORD *)(v15 + 16 * v19));
    v20 = v15 + 16 * v19;
    v21 = *(_DWORD **)(v20 + 8);
    *(_QWORD *)(v20 + 8) = 0;
    if (v21)
    {
      if (*v21 == 2)
      {
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, v10);
        v28 = *(WTF::StringImpl **)v20;
        *(_QWORD *)v20 = 0;
        if (v28)
        {
          if (*(_DWORD *)v28 == 2)
            WTF::StringImpl::destroy(v28, v10);
          else
            *(_DWORD *)v28 -= 2;
        }
        goto LABEL_15;
      }
      *v21 -= 2;
    }
    *(_QWORD *)v20 = 0;
LABEL_15:
    v22 = *(WTF::StringImpl **)v13;
    *(_QWORD *)v13 = 0;
    *(_QWORD *)v20 = v22;
    v23 = v6 + 16 * v11;
    v24 = *(_QWORD *)(v23 + 8);
    *(_QWORD *)(v23 + 8) = 0;
    *(_QWORD *)(v20 + 8) = v24;
    v25 = *(_DWORD **)(v23 + 8);
    *(_QWORD *)(v23 + 8) = 0;
    if (v25)
    {
      if (*v25 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v25, v10);
      else
        *v25 -= 2;
    }
    v26 = *(WTF::StringImpl **)v13;
    *(_QWORD *)v13 = 0;
    if (v26)
    {
      if (*(_DWORD *)v26 == 2)
        WTF::StringImpl::destroy(v26, v10);
      else
        *(_DWORD *)v26 -= 2;
    }
    if (v13 == a3)
      v12 = v20;
    goto LABEL_23;
  }
  v12 = 0;
  result = 0;
  if (v6)
  {
LABEL_40:
    WTF::fastFree((WTF *)(v6 - 16), v10);
    return v12;
  }
  return result;
}

double WebCore::StyleDeprecatedFlexibleBoxData::copy@<D0>(WebCore::StyleDeprecatedFlexibleBoxData *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  double result;
  int v6;
  unsigned int v7;
  unsigned int v8;

  v4 = WTF::fastMalloc((WTF *)0x14);
  *(_DWORD *)v4 = 1;
  *(_DWORD *)(v4 + 4) = *((_DWORD *)this + 1);
  result = *((double *)this + 1);
  *(double *)(v4 + 8) = result;
  v6 = *(_BYTE *)(v4 + 16) & 0xF8 | *((_BYTE *)this + 16) & 7;
  *(_BYTE *)(v4 + 16) = v6;
  v7 = v6 & 0xFFFFFFE7 | (8 * ((*((unsigned __int8 *)this + 16) >> 3) & 3));
  *(_BYTE *)(v4 + 16) = v7;
  v8 = v7 & 0xFFFFFFDF | (32 * ((*((unsigned __int8 *)this + 16) >> 5) & 1));
  *(_BYTE *)(v4 + 16) = v8;
  *(_BYTE *)(v4 + 16) = v8 & 0xBF | *((_BYTE *)this + 16) & 0x40;
  *a2 = v4;
  return result;
}

BOOL WebCore::StyleDeprecatedFlexibleBoxData::operator==(uint64_t a1, uint64_t a2)
{
  if (*(float *)(a1 + 4) != *(float *)(a2 + 4)
    || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12))
  {
    return 0;
  }
  if (((*(_BYTE *)(a2 + 16) ^ *(_BYTE *)(a1 + 16)) & 0x3F) != 0)
    return 0;
  return ((*(_BYTE *)(a2 + 16) ^ *(_BYTE *)(a1 + 16)) & 0x40) == 0;
}

uint64_t WebCore::StyleFilterData::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;

  v2 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v2 != *(_DWORD *)(a2 + 20))
    return 0;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v5 = 8 * v2 - 8;
    v6 = *(_QWORD **)(a1 + 8);
    v7 = *(_QWORD **)(a2 + 8);
    while (1)
    {
      v8 = v5;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v6 + 24))(*v6, *v7);
      if (!(_DWORD)result)
        break;
      ++v6;
      ++v7;
      v5 = v8 - 8;
      if (!v8)
        return v6 == (_QWORD *)(v4 + 8 * v2) && v7 == (_QWORD *)(v3 + 8 * v2);
    }
  }
  else
  {
    v7 = *(_QWORD **)(a2 + 8);
    v6 = *(_QWORD **)(a1 + 8);
    return v6 == (_QWORD *)(v4 + 8 * v2) && v7 == (_QWORD *)(v3 + 8 * v2);
  }
  return result;
}

void WebCore::StyleFilterImage::~StyleFilterImage(WebCore::StyleFilterImage *this, void *a2)
{
  uint64_t v3;
  unsigned int **v4;
  WebCore::CachedResource *v5;
  void *v6;
  uint64_t v7;
  WTF *v8;
  _DWORD *v9;
  uint64_t v10;
  WTF *v11;
  unsigned int **v12;
  unsigned int **v13;
  unsigned int *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int **v18;

  v4 = (unsigned int **)((char *)this + 104);
  v3 = *((_QWORD *)this + 13);
  if (v3)
  {
    v5 = *(WebCore::CachedResource **)(v3 + 8);
    if (v5)
      WebCore::CachedResource::removeClient(v5, (unsigned int **)this + 8);
  }
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(v4, a2);
  v7 = *((unsigned int *)this + 25);
  if ((_DWORD)v7)
  {
    v12 = (unsigned int **)*((_QWORD *)this + 11);
    v13 = &v12[v7];
    do
    {
      v14 = *v12;
      *v12 = 0;
      if (v14)
      {
        v15 = v14 + 2;
        do
        {
          v16 = __ldaxr(v15);
          v17 = v16 - 1;
        }
        while (__stlxr(v17, v15));
        if (!v17)
        {
          atomic_store(1u, v14 + 2);
          v18 = v13;
          (*(void (**)(unsigned int *))(*(_QWORD *)v14 + 8))(v14);
          v13 = v18;
        }
      }
      ++v12;
    }
    while (v12 != v13);
  }
  v8 = (WTF *)*((_QWORD *)this + 11);
  if (v8)
  {
    *((_QWORD *)this + 11) = 0;
    *((_DWORD *)this + 24) = 0;
    WTF::fastFree(v8, v6);
  }
  v9 = (_DWORD *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v9)
  {
    if (v9[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
    else
      --v9[2];
  }
  *((_QWORD *)this + 8) = &off_1E33F87C8;
  v10 = *((_QWORD *)this + 9);
  if (v10)
  {
    *(_QWORD *)(v10 + 8) = 0;
    v11 = (WTF *)*((_QWORD *)this + 9);
    *((_QWORD *)this + 9) = 0;
    if (v11)
    {
      if (*(_DWORD *)v11 == 1)
        WTF::fastFree(v11, v6);
      else
        --*(_DWORD *)v11;
    }
  }
  else
  {
    *((_QWORD *)this + 9) = 0;
  }
  WebCore::StyleGeneratedImage::~StyleGeneratedImage(this, v6);
}

{
  WTF *v2;
  void *v3;

  WebCore::StyleFilterImage::~StyleFilterImage(this, a2);
  WTF::fastFree(v2, v3);
}

void WebCore::StyleGeneratedImage::~StyleGeneratedImage(WebCore::StyleGeneratedImage *this, void *a2)
{
  uint64_t v3;
  void *v4;

  *(_QWORD *)this = off_1E3442170;
  v3 = *((_QWORD *)this + 7);
  if (v3)
    WTF::HashTable<WebCore::FloatSize,WTF::KeyValuePair<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>>,WTF::DefaultHash<WebCore::FloatSize>,WTF::HashMap<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>,WTF::DefaultHash<WebCore::FloatSize>,WTF::HashTraits<WebCore::FloatSize>,WTF::HashTraits<std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::FloatSize>>::deallocateTable(v3, a2);
  WTF::WeakHashCountedSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>::~WeakHashCountedSet((WTF ***)this + 5, a2);
  WebCore::StyleImage::~StyleImage(this, v4);
}

void `non-virtual thunk to'WebCore::StyleFilterImage::~StyleFilterImage(WebCore::StyleFilterImage *this, void *a2)
{
  WebCore::StyleFilterImage::~StyleFilterImage((WebCore::StyleFilterImage *)((char *)this - 64), a2);
}

{
  WTF *v2;
  void *v3;

  WebCore::StyleFilterImage::~StyleFilterImage((WebCore::StyleFilterImage *)((char *)this - 64), a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::StyleFilterImage::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  int v16;

  if (*(_BYTE *)(a2 + 24) != 3)
    return 0;
  v2 = *(_QWORD *)(a1 + 80);
  v3 = *(_QWORD *)(a2 + 80);
  if (v2 != v3)
  {
    if (!v2 || v3 == 0)
      return 0;
    v14 = a2;
    v15 = a1;
    v16 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)v2 + 16))(*(_QWORD *)(a1 + 80), *(_QWORD *)(a2 + 80));
    a1 = v15;
    a2 = v14;
    if (!v16)
      return 0;
  }
  v4 = *(unsigned int *)(a1 + 100);
  if ((_DWORD)v4 != *(_DWORD *)(a2 + 100))
    return 0;
  v5 = *(_QWORD *)(a2 + 88);
  v6 = *(_QWORD *)(a1 + 88);
  if ((_DWORD)v4)
  {
    v7 = 8 * v4 - 8;
    v8 = *(_QWORD **)(a1 + 88);
    v9 = *(_QWORD **)(a2 + 88);
    while (1)
    {
      v10 = v7;
      result = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*v8 + 24))(*v8, *v9);
      if (!(_DWORD)result)
        break;
      ++v8;
      ++v9;
      v7 = v10 - 8;
      if (!v10)
        return v8 == (_QWORD *)(v6 + 8 * v4) && v9 == (_QWORD *)(v5 + 8 * v4);
    }
  }
  else
  {
    v9 = *(_QWORD **)(a2 + 88);
    v8 = *(_QWORD **)(a1 + 88);
    return v8 == (_QWORD *)(v6 + 8 * v4) && v9 == (_QWORD *)(v5 + 8 * v4);
  }
  return result;
}

uint64_t WebCore::StyleFilterImage::computedStyleValue@<X0>(WebCore::StyleFilterImage *this@<X0>, const WebCore::RenderStyle *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;

  v6 = *((_QWORD *)this + 10);
  if (v6)
  {
    (*(void (**)(int **__return_ptr, uint64_t, const WebCore::RenderStyle *))(*(_QWORD *)v6 + 24))(&v11, v6, a2);
  }
  else
  {
    dword_1ECE8BC48 += 2;
    v11 = &WebCore::staticCSSValuePool[3112];
  }
  WebCore::ComputedStyleExtractor::valueForFilter(a2, (uint64_t **)this + 11, 1, &v10);
  result = WTF::fastCompactMalloc((WTF *)0x18);
  *(_DWORD *)result = 2;
  v8 = *(_BYTE *)(result + 6);
  *(_WORD *)(result + 4) = 0x4000;
  *(_BYTE *)(result + 6) = v8 & 0xFC;
  v9 = v10;
  *(_QWORD *)(result + 8) = v11;
  *(_QWORD *)(result + 16) = v9;
  *a3 = result;
  return result;
}

uint64_t WebCore::StyleFilterImage::isPending(WebCore::StyleFilterImage *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 10);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void WebCore::StyleFilterImage::load(WebCore::StyleFilterImage *this, WebCore::CachedResourceLoader *a2, const WebCore::ResourceLoaderOptions *a3)
{
  uint64_t v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WebCore::CachedResource *v12;
  void *v13;
  uint64_t v14;
  WebCore::CachedResource *v15;
  unsigned int *v16;
  WebCore::CachedResource *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  unsigned int v27;
  unsigned int *v28;
  _BYTE v29[24];
  unsigned int **v30;

  v7 = (uint64_t *)((char *)this + 104);
  v6 = *((_QWORD *)this + 13);
  if (v6)
  {
    do
      v8 = __ldaxr((unsigned int *)v6);
    while (__stlxr(v8 + 1, (unsigned int *)v6));
    v28 = (unsigned int *)v6;
    v9 = *(_QWORD *)(v6 + 8);
    if (v9)
    {
      v30 = &v28;
      ++*(_DWORD *)(v9 + 548);
      v10 = *(_QWORD *)(v9 + 488);
      if (v10)
      {
        if (*(_QWORD *)(v10 + 8))
          WTF::HashTable<WebCore::CachedResourceHandleBase *,WebCore::CachedResourceHandleBase *,WTF::IdentityExtractor,WTF::DefaultHash<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>,WTF::HashTraits<WebCore::CachedResourceHandleBase *>>::add((uint64_t *)(v9 + 464), (uint64_t *)&v30, (uint64_t)v29);
      }
    }
  }
  else
  {
    v28 = 0;
  }
  v11 = *((_QWORD *)this + 10);
  if (v11)
  {
    (*(void (**)(uint64_t, WebCore::CachedResourceLoader *, const WebCore::ResourceLoaderOptions *))(*(_QWORD *)v11 + 48))(v11, a2, a3);
    v12 = (WebCore::CachedResource *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 10) + 200))(*((_QWORD *)this + 10));
  }
  else
  {
    v12 = 0;
  }
  WebCore::CachedResourceHandleBase::setResource(v7, v12);
  v14 = *v7;
  if (*v7)
  {
    v15 = *(WebCore::CachedResource **)(v14 + 8);
    v16 = v28;
    if (!v28)
    {
      if (!v15)
        goto LABEL_19;
      goto LABEL_16;
    }
  }
  else
  {
    v16 = v28;
    if (!v28)
      goto LABEL_19;
    v15 = 0;
  }
  v17 = (WebCore::CachedResource *)*((_QWORD *)v16 + 1);
  if (v15 != v17)
  {
    if (v17)
    {
      WebCore::CachedResource::removeClient(v17, (unsigned int **)this + 8);
      v14 = *((_QWORD *)this + 13);
    }
    if (v14)
    {
LABEL_16:
      v18 = *(_QWORD *)(v14 + 8);
      if (v18
        && WebCore::CachedResource::addClientToSet(*(WebCore::CachedResource **)(v14 + 8), (WebCore::StyleFilterImage *)((char *)this + 64)))
      {
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v18 + 88))(v18, (char *)this + 64);
      }
    }
  }
LABEL_19:
  v19 = *((unsigned int *)this + 25);
  if ((_DWORD)v19)
  {
    v20 = (_QWORD *)*((_QWORD *)this + 11);
    v21 = &v20[v19];
    do
    {
      v22 = *v20;
      v23 = (unsigned int *)(*v20 + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 + 1, v23));
      if (*(_BYTE *)(v22 + 12))
      {
        do
        {
          v25 = __ldaxr(v23);
          v26 = --v25 == 0;
        }
        while (__stlxr(v25, v23));
      }
      else
      {
        WebCore::ReferenceFilterOperation::loadExternalDocumentIfNeeded((WebCore::ReferenceFilterOperation *)v22, a2, a3);
        do
        {
          v27 = __ldaxr(v23);
          v26 = --v27 == 0;
        }
        while (__stlxr(v27, v23));
      }
      if (v26)
      {
        atomic_store(1u, (unsigned int *)(v22 + 8));
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      }
      ++v20;
    }
    while (v20 != v21);
  }
  *((_BYTE *)this + 112) = 1;
  WebCore::CachedResourceHandleBase::~CachedResourceHandleBase(&v28, v13);
}

_DWORD *WebCore::StyleFilterImage::image@<X0>(_DWORD *this@<X0>, const WebCore::RenderElement *a2@<X1>, const WebCore::FloatSize *a3@<X2>, uint64_t *a4@<X8>)
{
  _DWORD *v6;
  float v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v19;
  WTF *v20;
  WebCore::Filter *v21;
  unint64_t v22;
  WebCore::Filter *v23;
  char v24;
  uint64_t v25;
  __n128 v26;
  void *v27;
  float *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  int v50;
  WebCore::Filter *v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  WebCore::Filter *v64;
  __int128 v65;
  _DWORD *v66;
  uint64_t **v67;
  uint64_t *v68;
  _BYTE v69[344];
  WTF *v70;
  uint64_t v71;
  _DWORD v72[87];
  char v73;
  char v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (*(float *)a3 <= 0.0 || *((float *)a3 + 1) <= 0.0)
    {
      *a4 = 0;
      return this;
    }
    v6 = this;
    this = (_DWORD *)*((_QWORD *)this + 10);
    if (this)
    {
      (*(void (**)(_DWORD **__return_ptr))(*(_QWORD *)this + 176))(&v66);
      if (!v66 || (*(float (**)(_DWORD *, _QWORD))(*(_QWORD *)v66 + 168))(v66, 0) <= 0.0 || v8 <= 0.0)
        goto LABEL_27;
      v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8)
                                                                                             + 40)
                                                                                 + 8)
                                                                     + 528)
                                                         + 8)
                                             + 24)
                                 + 8)
                     + 112);
      v10 = *(unsigned int *)(v9 + 720) | ((unint64_t)*(unsigned __int8 *)(v9 + 724) << 32);
      if ((v10 & 0x2000000000) != 0)
        v11 = 3;
      else
        v11 = 1;
      v12 = v11 | (v10 >> 36) & 4;
      v13 = *(_QWORD *)a3;
      *(_QWORD *)&v65 = 0;
      *((_QWORD *)&v65 + 1) = v13;
      __asm { FMOV            V0.2S, #1.0 }
      v67 = (uint64_t **)_D0;
      bzero(v69, 0x2C8uLL);
      LODWORD(v64) = 0;
      v68 = (uint64_t *)off_1E340BA10;
      WebCore::GraphicsContextState::GraphicsContextState((uint64_t)v69, &v64, 0);
      v71 = 1;
      v72[86] = 0;
      v73 &= 0xFCu;
      v70 = (WTF *)v72;
      v68 = (uint64_t *)off_1E33FFA58;
      v74 = 0;
      WebCore::CSSFilter::create((uint64_t)a2, (uint64_t)(v6 + 22), v12, &v67, (float *)&v65, (const WebCore::SVGFilter *)&v68, (uint64_t *)&v64);
      v68 = (uint64_t *)off_1E340BA10;
      if (HIDWORD(v71))
        WTF::VectorTypeOperations<WebCore::GraphicsContextState>::destruct((unsigned int *)v70, (unsigned int *)v70 + 86 * HIDWORD(v71));
      v20 = v70;
      if (v72 != (_DWORD *)v70 && v70)
      {
        v70 = 0;
        LODWORD(v71) = 0;
        WTF::fastFree(v20, v19);
      }
      WebCore::GraphicsContextState::~GraphicsContextState((WebCore::GraphicsContextState *)v69, v19);
      v21 = v64;
      if (!v64)
      {
LABEL_27:
        {
          v33 = WebCore::Image::nullImage(void)::nullImage;
        }
        else
        {
          WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)&v68);
          v33 = (uint64_t)v68;
          WebCore::Image::nullImage(void)::nullImage = (uint64_t)v68;
        }
        ++*(_DWORD *)(v33 + 8);
        *a4 = v33;
        goto LABEL_30;
      }
      *(_OWORD *)((char *)v64 + 60) = v65;
      WebCore::Filter::clampFilterRegionIfNeeded(v21);
      v22 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
      if (v22 != -1)
      {
        v68 = &v63;
        v67 = &v68;
        std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v67, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
      }
      v23 = v64;
      v24 = *((_BYTE *)v64 + 49);
      v25 = WebCore::RenderObject::hostWindow(a2);
      v26.n128_u32[0] = 1.0;
      WebCore::ImageBuffer::create((float *)a3, 2, (CFTypeRef *)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 1, (v24 & 2) != 0, v25, (uint64_t *)&v67, v26);
      v28 = (float *)v67;
      if (!v67)
      {
        {
          v34 = WebCore::Image::nullImage(void)::nullImage;
        }
        else
        {
          WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)&v68);
          v34 = (uint64_t)v68;
          WebCore::Image::nullImage(void)::nullImage = (uint64_t)v68;
        }
        ++*(_DWORD *)(v34 + 8);
        *a4 = v34;
        goto LABEL_58;
      }
      v29 = (_QWORD *)WTF::fastMalloc((WTF *)0x18);
      *v29 = off_1E3442748;
      v29[1] = &v66;
      v29[2] = &v65;
      v62 = v29;
      WebCore::ImageBuffer::filteredNativeImage(v28, (uint64_t)v23, &v62, &v63);
      v30 = v62;
      v62 = 0;
      if (v30)
        (*(void (**)(_QWORD *))(*v30 + 8))(v30);
      if (v63)
      {
        WebCore::BitmapImage::create(&v63, (uint64_t *)&v68);
        v31 = (uint64_t)v68;
      }
      else
      {
        {
          v31 = WebCore::Image::nullImage(void)::nullImage;
        }
        else
        {
          WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)&v68);
          v31 = (uint64_t)v68;
          WebCore::Image::nullImage(void)::nullImage = (uint64_t)v68;
        }
        ++*(_DWORD *)(v31 + 8);
      }
      *a4 = v31;
      v35 = v63;
      v63 = 0;
      if (!v35)
      {
LABEL_58:
        v43 = (uint64_t)v67;
        v67 = 0;
        if (!v43)
          goto LABEL_75;
        v44 = *(_QWORD *)(v43 + 8);
        if (__ldaxr((unsigned __int8 *)v44))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v44))
        {
          goto LABEL_63;
        }
        MEMORY[0x19AEA534C](v44);
LABEL_63:
        v46 = *(_QWORD *)(v44 + 8);
        v47 = v46 - 1;
        *(_QWORD *)(v44 + 8) = v46 - 1;
        if (v46 == 1)
        {
          v60 = *(_QWORD *)(v44 + 16);
          v48 = *(_QWORD *)(v44 + 24);
          *(_QWORD *)(v44 + 24) = 0;
          v49 = v60 != 0;
        }
        else
        {
          v48 = 0;
          v49 = 1;
        }
        v50 = __ldxr((unsigned __int8 *)v44);
        if (v50 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v44))
          {
LABEL_70:
            if (!v47)
            {
              if (v48)
                (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
              if (!v49)
                WTF::fastFree((WTF *)v44, v27);
            }
LABEL_75:
            v51 = v64;
            v64 = 0;
            if (v51)
            {
              v52 = *((_QWORD *)v51 + 1);
              if (__ldaxr((unsigned __int8 *)v52))
              {
                __clrex();
              }
              else if (!__stxr(1u, (unsigned __int8 *)v52))
              {
                goto LABEL_80;
              }
              MEMORY[0x19AEA534C](v52);
LABEL_80:
              v54 = *(_QWORD *)(v52 + 8);
              v55 = v54 - 1;
              *(_QWORD *)(v52 + 8) = v54 - 1;
              if (v54 == 1)
              {
                v59 = *(_QWORD *)(v52 + 16);
                v56 = *(_QWORD *)(v52 + 24);
                *(_QWORD *)(v52 + 24) = 0;
                v57 = v59 != 0;
              }
              else
              {
                v56 = 0;
                v57 = 1;
              }
              v58 = __ldxr((unsigned __int8 *)v52);
              if (v58 == 1)
              {
                if (!__stlxr(0, (unsigned __int8 *)v52))
                {
LABEL_87:
                  if (!v55)
                  {
                    if (v56)
                      (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
                    if (!v57)
                      WTF::fastFree((WTF *)v52, v27);
                  }
                  goto LABEL_30;
                }
              }
              else
              {
                __clrex();
              }
              WTF::Lock::unlockSlow((WTF::Lock *)v52);
              goto LABEL_87;
            }
LABEL_30:
            this = v66;
            v66 = 0;
            if (this)
            {
              if (this[2] == 1)
                return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)this + 8))(this);
              else
                --this[2];
            }
            return this;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v44);
        goto LABEL_70;
      }
      v36 = *(_QWORD *)(v35 + 8);
      if (__ldaxr((unsigned __int8 *)v36))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v36))
      {
        goto LABEL_46;
      }
      MEMORY[0x19AEA534C](v36);
LABEL_46:
      v38 = *(_QWORD *)(v36 + 8);
      v39 = v38 - 1;
      *(_QWORD *)(v36 + 8) = v38 - 1;
      if (v38 == 1)
      {
        v61 = *(_QWORD *)(v36 + 16);
        v40 = *(_QWORD *)(v36 + 24);
        *(_QWORD *)(v36 + 24) = 0;
        v41 = v61 != 0;
      }
      else
      {
        v40 = 0;
        v41 = 1;
      }
      v42 = __ldxr((unsigned __int8 *)v36);
      if (v42 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v36))
        {
LABEL_53:
          if (!v39)
          {
            if (v40)
              (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
            if (!v41)
              WTF::fastFree((WTF *)v36, v27);
          }
          goto LABEL_58;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v36);
      goto LABEL_53;
    }
  }
  {
    v32 = WebCore::Image::nullImage(void)::nullImage;
  }
  else
  {
    this = (_DWORD *)WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)&v68);
    v32 = (uint64_t)v68;
    WebCore::Image::nullImage(void)::nullImage = (uint64_t)v68;
  }
  ++*(_DWORD *)(v32 + 8);
  *a4 = v32;
  return this;
}

uint64_t WebCore::StyleFilterImage::knownToBeOpaque(WebCore::StyleFilterImage *this, const WebCore::RenderElement *a2)
{
  return 0;
}

float WebCore::StyleFilterImage::fixedSize(WebCore::StyleFilterImage *this, const WebCore::RenderElement *a2)
{
  uint64_t v2;
  float result;

  v2 = *((_QWORD *)this + 10);
  if (!v2)
    return 0.0;
  (*(void (**)(uint64_t, const WebCore::RenderElement *, float))(*(_QWORD *)v2 + 120))(v2, a2, 1.0);
  return result;
}

uint64_t WebCore::StyleFilterImage::imageChanged(uint64_t this, WebCore::CachedImage *a2, const WebCore::IntRect *a3)
{
  uint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD v8[6];
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;

  if (*(_BYTE *)(this + 112))
  {
    v3 = this;
    v4 = (uint64_t *)(this + 40);
    WTF::WeakHashMap<WebCore::RenderElement,unsigned int,WTF::SingleThreadWeakPtrImpl>::begin((uint64_t)&v9, (uint64_t *)(this + 40));
    this = WTF::WeakHashMap<WebCore::Node,std::unique_ptr<WebCore::QuerySelectorAllResults>,WebCore::WeakPtrImplWithEventTargetData>::end((uint64_t)v8, v4);
    v5 = v10;
    v6 = (_QWORD *)v8[1];
    while (v5 != v6)
    {
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(*v5 + 8) + 568))(*(_QWORD *)(*v5 + 8), v3, 0);
      v7 = v10;
      do
      {
        v7 += 2;
        v10 = v7;
      }
      while (v7 != v11 && (unint64_t)(*v7 + 1) <= 1);
      ++v12;
      this = (uint64_t)WTF::WeakHashMap<WebCore::RenderElement,unsigned int,WTF::SingleThreadWeakPtrImpl>::WeakHashMapIteratorBase<WTF::WeakHashMap<WebCore::RenderElement,unsigned int,WTF::SingleThreadWeakPtrImpl> const,WTF::HashTableConstIteratorAdapter<WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>>,WTF::WeakHashMap<WebCore::RenderElement,unsigned int,WTF::SingleThreadWeakPtrImpl>::PeekPtrType const,WTF::WeakHashMap<WebCore::RenderElement,unsigned int,WTF::SingleThreadWeakPtrImpl>::PeekType const>::skipEmptyBuckets(&v9);
      ++*(_DWORD *)(v9 + 8);
      v5 = v10;
    }
  }
  return this;
}

uint64_t `non-virtual thunk to'WebCore::StyleFilterImage::imageChanged(WebCore::StyleFilterImage *this, WebCore::CachedImage *a2, const WebCore::IntRect *a3)
{
  return WebCore::StyleFilterImage::imageChanged((uint64_t)this - 64, a2, a3);
}

BOOL WebCore::StyleFlexibleBoxData::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  float *v3;
  float v4;
  float v5;
  char isCalculatedEqual;
  uint64_t v8;
  uint64_t v9;

  if (*(float *)(a1 + 4) != *(float *)(a2 + 4))
    return 0;
  if (*(float *)(a1 + 8) != *(float *)(a2 + 8))
    return 0;
  v2 = *(unsigned __int8 *)(a1 + 16);
  if (v2 != *(unsigned __int8 *)(a2 + 16) || (*(_BYTE *)(a1 + 17) != 0) != (*(_BYTE *)(a2 + 17) != 0))
    return 0;
  if (v2 != 13)
  {
    v3 = (float *)(a1 + 12);
    if (v2 != 11)
    {
      if (*(_BYTE *)(a1 + 18))
        v4 = *v3;
      else
        v4 = (float)*(int *)v3;
      v5 = *(float *)(a2 + 12);
      if (!*(_BYTE *)(a2 + 18))
        v5 = (float)SLODWORD(v5);
      if (v4 == v5)
        return ((*(_BYTE *)(a2 + 20) ^ *(_BYTE *)(a1 + 20)) & 3) == 0
            && ((*(_BYTE *)(a2 + 20) ^ *(_BYTE *)(a1 + 20)) & 0xC) == 0;
      return 0;
    }
    v8 = a2;
    v9 = a1;
    isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 12), (const WebCore::Length *)(a2 + 12));
    a2 = v8;
    a1 = v9;
    if ((isCalculatedEqual & 1) == 0)
      return 0;
  }
  return ((*(_BYTE *)(a2 + 20) ^ *(_BYTE *)(a1 + 20)) & 3) == 0
      && ((*(_BYTE *)(a2 + 20) ^ *(_BYTE *)(a1 + 20)) & 0xC) == 0;
}

uint64_t *WebCore::StyleGeneratedImage::CachedGeneratedImage::evictionTimerFired(WebCore::StyleGeneratedImage::CachedGeneratedImage *this)
{
  return WebCore::StyleGeneratedImage::evictCachedGeneratedImage(*(_QWORD *)this, *((float *)this + 2), *((float *)this + 3));
}

uint64_t *WebCore::StyleGeneratedImage::evictCachedGeneratedImage(uint64_t a1, float a2, float a3)
{
  uint64_t *v3;
  uint64_t v4;
  float *v5;
  uint64_t v6;
  float v8[2];

  v8[0] = a2;
  v8[1] = a3;
  v3 = (uint64_t *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 56);
  if (v4)
  {
    v5 = WTF::HashTable<WebCore::FloatSize,WTF::KeyValuePair<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>>,WTF::DefaultHash<WebCore::FloatSize>,WTF::HashMap<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>,WTF::DefaultHash<WebCore::FloatSize>,WTF::HashTraits<WebCore::FloatSize>,WTF::HashTraits<std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::FloatSize>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>,WTF::DefaultHash<WebCore::FloatSize>,WTF::HashTraits<WebCore::FloatSize>,WTF::HashTraits<std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::FloatSize>>,WebCore::FloatSize>(*(float **)(a1 + 56), v8);
    if (v5)
      v6 = (uint64_t)v5;
    else
      v6 = v4 + 16 * *(unsigned int *)(v4 - 4);
  }
  else
  {
    v6 = 0;
  }
  return WTF::HashMap<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>,WTF::DefaultHash<WebCore::FloatSize>,WTF::HashTraits<WebCore::FloatSize>,WTF::HashTraits<std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>,WTF::HashTableTraits>::remove(v3, v6);
}

WTF ***WTF::WeakHashCountedSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl>::~WeakHashCountedSet(WTF ***a1, void *a2)
{
  WTF **v3;
  uint64_t v4;
  WTF **v5;
  WTF *v6;

  v3 = *a1;
  if (*a1)
  {
    v4 = *((unsigned int *)v3 - 1);
    if ((_DWORD)v4)
    {
      v5 = *a1;
      do
      {
        v6 = *v5;
        if (*v5 != (WTF *)-1)
        {
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 1)
              WTF::fastFree(v6, a2);
            else
              --*(_DWORD *)v6;
          }
        }
        v5 += 2;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 2), a2);
  }
  return a1;
}

void WebCore::StyleImage::~StyleImage(WebCore::StyleImage *this, void *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    *(_QWORD *)(v2 + 8) = 0;
    v3 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v3)
    {
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v3);
        WTF::fastFree((WTF *)v3, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

_QWORD **std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>::~unique_ptr[abi:sn180100](_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  _DWORD *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v2[3] = off_1E33DC988;
    v3 = v2[9];
    v2[9] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(v2 + 3));
    v5 = (_DWORD *)v2[2];
    v2[2] = 0;
    if (v5)
    {
      if (v5[2] == 1)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
      else
        --v5[2];
    }
    WTF::fastFree((WTF *)v2, v4);
  }
  return a1;
}

void WebCore::StyleGeneratedImage::imageSize(WebCore::StyleGeneratedImage *this, const WebCore::RenderElement *a2, float a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  WTF *v10;
  void *v11;

  if (*((_BYTE *)this + 36))
  {
    if (a2)
    {
      (*(void (**)(WebCore::StyleGeneratedImage *, const WebCore::RenderElement *))(*(_QWORD *)this + 248))(this, a2);
      if (a3 != 1.0)
      {
        v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8) + 528);
        if (v5)
        {
          v6 = *(_QWORD *)(v5 + 8);
          if (v6)
          {
            v7 = *(_QWORD *)(v6 + 24);
            if (v7)
            {
              v8 = *(_DWORD **)(v7 + 8);
              if (v8)
              {
                v9 = (*v8)++;
                if (v9)
                {
                  *v8 = v9;
                }
                else
                {
                  WebCore::Page::~Page((uint64_t)v8);
                  WTF::fastFree(v10, v11);
                }
              }
            }
          }
        }
      }
    }
  }
}

float WebCore::StyleGeneratedImage::computeIntrinsicDimensions(WebCore::StyleGeneratedImage *this, const WebCore::RenderElement *a2, WebCore::Length *a3, WebCore::Length *a4, WebCore::FloatSize *a5)
{
  float v9;
  float v10;
  double v11;
  float v12;
  double v13;
  float v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  float v21;
  float result;
  WTF *v23;
  void *v24;

  if (*((_BYTE *)this + 36))
  {
    if (a2)
    {
      (*(void (**)(WebCore::StyleGeneratedImage *, const WebCore::RenderElement *))(*(_QWORD *)this + 248))(this, a2);
    }
    else
    {
      v9 = 0.0;
      v10 = 0.0;
    }
  }
  else
  {
    v9 = *((float *)this + 7);
    v10 = *((float *)this + 8);
  }
  v11 = v9 * 64.0;
  if (v11 >= 2147483650.0)
  {
    v12 = 2147500000.0;
  }
  else if (v11 <= -2147483650.0)
  {
    v12 = -2147500000.0;
  }
  else
  {
    v12 = (float)(int)v11;
  }
  v13 = v10 * 64.0;
  if (v13 >= 2147483650.0)
  {
    v14 = 2147500000.0;
  }
  else if (v13 <= -2147483650.0)
  {
    v14 = -2147500000.0;
  }
  else
  {
    v14 = (float)(int)v13;
  }
  v15 = 1.0;
  if (a2)
  {
    v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8) + 528);
    if (v16)
    {
      v17 = *(_QWORD *)(v16 + 8);
      if (v17)
      {
        v18 = *(_QWORD *)(v17 + 24);
        if (v18)
        {
          v19 = *(_QWORD *)(v18 + 8);
          if (v19)
          {
            v20 = (*(_DWORD *)v19)++;
            v15 = *(float *)(v19 + 364);
            if (v20)
            {
              *(_DWORD *)v19 = v20;
            }
            else
            {
              WebCore::Page::~Page(v19);
              WTF::fastFree(v23, v24);
            }
          }
        }
      }
    }
  }
  v21 = floorf((float)(v12 * v15) * 0.015625) / v15;
  if (*((_BYTE *)a3 + 4) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)a3);
  }
  *((_WORD *)a3 + 2) = 4;
  *((_BYTE *)a3 + 6) = 1;
  *(float *)a3 = v21;
  if (*((_BYTE *)a4 + 4) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)a4);
  }
  *((_WORD *)a4 + 2) = 4;
  *((_BYTE *)a4 + 6) = 1;
  result = floorf((float)(v14 * v15) * 0.015625) / v15;
  *(float *)a4 = result;
  *(float *)a5 = v21;
  *((float *)a5 + 1) = result;
  return result;
}

uint64_t WebCore::StyleGradientImage::StyleGradientImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  char v9;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 6;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 28) = 0;
  *(_QWORD *)a1 = off_1E3442280;
  *(_BYTE *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 160) = -1;
  v7 = *(unsigned int *)(a2 + 96);
  if ((_DWORD)v7 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleGradientImage10LinearDataENS7_20DeprecatedLinearDataENS7_18PrefixedLinearDataENS7_10RadialDataENS7_20DeprecatedRadialDataENS7_18PrefixedRadialDataENS7_9ConicDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISF_LNS0_6_TraitE1EEEEEvRSG_OT_EUlRSM_OT0_E_JSL_SK_EEEDcmSN_DpOT0____fdiagonal[v7])(&v9, a1 + 72, a2 + 8);
    *(_DWORD *)(a1 + 160) = v7;
  }
  *(_QWORD *)(a1 + 168) = a3;
  *(_QWORD *)(a1 + 176) = a4;
  *(_BYTE *)(a1 + 184) = WTF::switchOn<std::variant<WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&,WebCore::stopsAreCacheable(std::variant<WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&)::$_0>(a1 + 64);
  return a1;
}

void WebCore::StyleGradientImage::~StyleGradientImage(WebCore::StyleGradientImage *this, void *a2)
{
  uint64_t v3;
  char v4;

  v3 = *((unsigned int *)this + 40);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E34423A8[v3])(&v4, (char *)this + 72);
  *((_DWORD *)this + 40) = -1;
  WebCore::StyleGeneratedImage::~StyleGeneratedImage(this, a2);
}

{
  uint64_t v3;
  WTF *v4;
  void *v5;
  char v6;

  v3 = *((unsigned int *)this + 40);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, char *))off_1E34423A8[v3])(&v6, (char *)this + 72);
  *((_DWORD *)this + 40) = -1;
  WebCore::StyleGeneratedImage::~StyleGeneratedImage(this, a2);
  WTF::fastFree(v4, v5);
}

uint64_t WebCore::StyleGradientImage::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _BOOL4 v6;
  _BOOL4 v7;
  int v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  _BOOL4 v13;
  _BOOL4 v14;
  uint64_t result;
  char v16;
  char *v17;

  if (*(_BYTE *)(a2 + 24) != 6)
    return 0;
  v4 = *(unsigned int *)(a1 + 172);
  v5 = *(_DWORD *)(a2 + 172);
  v6 = v5 == v4;
  v9 = v5 == -1;
  v7 = v5 == -1;
  if (v9)
    v6 = 0;
  if ((_DWORD)v4 == -1)
    v8 = v7;
  else
    v8 = v6;
  v9 = (_DWORD)v4 == -1 || !v6;
  if (!v9)
  {
    v17 = &v16;
    v8 = ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E34424A0[v4])(&v17, a1 + 168, a2 + 168);
  }
  v10 = v8 && *(unsigned __int8 *)(a1 + 176) == *(unsigned __int8 *)(a2 + 176);
  if (!v10 || (*(_BYTE *)(a1 + 180) == 0) == (*(_BYTE *)(a2 + 180) != 0))
    return 0;
  v11 = *(unsigned int *)(a1 + 160);
  v12 = *(_DWORD *)(a2 + 160);
  v13 = v12 == -1;
  v14 = v12 != -1 && v12 == v11;
  if ((_DWORD)v11 == -1)
    result = v13;
  else
    result = v14;
  if ((_DWORD)v11 != -1 && v14)
  {
    v17 = &v16;
    return ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E3442510[v11])(&v17, a1 + 72, a2 + 72);
  }
  return result;
}

uint64_t WebCore::StyleGradientImage::computedStyleValue(WebCore::StyleGradientImage *this, const WebCore::RenderStyle *a2)
{
  uint64_t v2;
  _QWORD v4[2];
  _QWORD *v5;

  v4[0] = this;
  v4[1] = a2;
  v2 = *((unsigned int *)this + 40);
  if ((_DWORD)v2 == -1)
  {
    std::__throw_bad_variant_access[abi:sn180100]();
    JUMPOUT(0x1964EAB84);
  }
  v5 = v4;
  return ((uint64_t (*)(_QWORD **, char *))off_1E3442760[v2])(&v5, (char *)this + 72);
}

float WebCore::StyleGradientImage::fixedSize(WebCore::StyleGradientImage *this, const WebCore::RenderElement *a2)
{
  return 0.0;
}

_OWORD *WebCore::StyleGradientImage::computeStops<WebCore::`anonymous namespace'::LinearGradientAdapter,WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, WebCore::RenderStyle *a5, char a6)
{
  unint64_t *v6;
  float v7;
  unint64_t v9;
  uint64_t v12;
  WTF *v13;
  int32x4_t v14;
  float v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  WebCore::Length *v23;
  int v24;
  float v25;
  float v26;
  float *v27;
  unsigned __int8 *v28;
  unint64_t v29;
  float *v30;
  float *v31;
  char *v32;
  float v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unsigned int v37;
  unsigned int v38;
  char *v39;
  _OWORD *v40;
  _OWORD *result;
  unint64_t v42;
  char *v43;
  int v44;
  uint64_t v45;
  _OWORD *v46;
  unsigned int v47;
  _QWORD *v48;
  uint64_t v49;
  WTF *v50;
  WTF *v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  float v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  WTF *v63;
  uint64_t v64;
  unint64_t v65;
  float *v66;
  float *v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  unint64_t i;
  float *v77;
  float v78;
  uint64_t v79;
  float v80;
  uint64_t v81;
  unint64_t v82;
  float *v83;
  char *v84;
  int v85;
  unint64_t *v86;
  float *v87;
  float v88;
  float v89;
  char v90;
  uint64_t v91;
  WTF *v92;
  uint64_t *v93;
  void *v94;
  uint64_t v95;
  BOOL v96;
  char v97;
  uint64_t v98;
  unint64_t v99;
  BOOL v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  float v105;
  unint64_t v106;
  WTF *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  float *v112;
  float *v113;
  void *v114;
  float *v115;
  unint64_t v116;
  uint64_t v117;
  float v118;
  WTF *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  float *v125;
  float *v126;
  void *v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  uint64_t j;
  unint64_t v137;
  float *v138;
  float *v139;
  BOOL v140;
  unint64_t v141;
  unint64_t v142;
  float *v143;
  float *v144;
  float v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int *v148;
  unsigned int v149;
  unsigned int *v150;
  unsigned int v151;
  unsigned int *v152;
  unsigned int v153;
  unsigned int *v154;
  unsigned int v155;
  unsigned int *v156;
  unsigned int v157;
  unsigned int *v158;
  unsigned int v159;
  unsigned int *v160;
  unsigned int v161;
  unsigned int *v162;
  unsigned int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int *v166;
  unsigned int v167;
  unsigned int v168;
  _BOOL4 v169;
  unsigned int *v170;
  unsigned int v171;
  unsigned int v172;
  unsigned int *v173;
  unsigned int v174;
  unsigned int v175;
  unsigned int *v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int *v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int *v182;
  unsigned int v183;
  unsigned int v184;
  unsigned int *v185;
  unsigned int v186;
  unsigned int v187;
  unsigned int *v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int *v191;
  unsigned int v192;
  unsigned int v193;
  char v195;
  uint64_t v196;
  unint64_t v197;
  int v198;
  _OWORD *v200;
  uint64_t v201;
  _OWORD v202[2];
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  WTF *v206;
  int v207;
  unsigned int v208;
  uint64_t v209;
  __int128 v210;
  __int128 v211;
  uint64_t *v212;
  uint64_t *v213;
  uint64_t v214;
  float v215;
  char v216;
  uint64_t v217;
  float v218;
  char v219;
  uint64_t v220;
  float v221;
  char v222;
  uint64_t v223;
  float v224;
  char v225;
  uint64_t v226;
  float v227;
  char v228;
  uint64_t v229;
  float v230;
  char v231;
  uint64_t v232;
  float v233;
  char v234;
  uint64_t v235;

  v9 = a4;
  v235 = *MEMORY[0x1E0C80C00];
  v198 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a5 + 3) + 320) + 20);
  v12 = *(unsigned int *)(a4 + 12);
  v206 = 0;
  v207 = 0;
  v208 = v12;
  if ((_DWORD)v12)
  {
    if (v12 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x1964EBC58);
    }
    v207 = v12;
    v206 = (WTF *)WTF::fastMalloc((WTF *)(16 * v12));
    bzero(v206, 16 * v12);
  }
  *(float *)v14.i32 = hypotf(**(float **)a3 - *(float *)(*(_QWORD *)a3 + 8), *(float *)(*(_QWORD *)a3 + 4) - *(float *)(*(_QWORD *)a3 + 12));
  if (!(_DWORD)v12)
    goto LABEL_38;
  v15 = *(float *)v14.i32;
  v195 = a6;
  v196 = a3;
  v197 = a1;
  a1 = 0;
  v16 = -1;
  a3 = -4;
  a6 = 40;
  v17 = v12 - 1;
  do
  {
    if (a1 >= *(unsigned int *)(v9 + 12))
    {
      __break(0xC471u);
      goto LABEL_357;
    }
    v18 = *(_QWORD *)v9;
    v13 = (WTF *)(*(_QWORD *)v9 + 40 * a1);
    if (*((_BYTE *)v13 + 16))
    {
      if (v198)
      {
        WebCore::RenderStyle::colorWithColorFilter(a5, v13, (WebCore::Color *)&v205);
      }
      else
      {
        v209 = *((_QWORD *)a5 + 4) + 328;
        *(_QWORD *)&v211 = &v209;
        *((_QWORD *)&v211 + 1) = &v209;
        v212 = &v209;
        v213 = &v209;
        v19 = *((unsigned int *)v13 + 2);
        if ((_DWORD)v19 == -1)
        {
          std::__throw_bad_variant_access[abi:sn180100]();
          goto LABEL_269;
        }
        *(_QWORD *)&v210 = &v211;
        ((void (*)(unint64_t *__return_ptr, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v19])(&v205, &v210);
      }
    }
    else
    {
      v205 = 0;
    }
    if (a1 >= v208)
    {
      __break(0xC471u);
      JUMPOUT(0x1964EBC20);
    }
    v6 = (unint64_t *)((char *)v206 + 16 * a1);
    v20 = *v6;
    if ((*v6 & 0x8000000000000) != 0)
    {
      if ((v205 & 0x8000000000000) == 0)
        goto LABEL_17;
      v211 = *(_OWORD *)((v20 & 0xFFFFFFFFFFFFLL) + 4);
      v210 = *(_OWORD *)((v205 & 0xFFFFFFFFFFFFLL) + 4);
      v169 = WebCore::operator==<float,4ul>((float *)&v211, (float *)&v210);
      v20 = *v6;
      if (!v169 || HIBYTE(v20) != HIBYTE(v205) || BYTE6(v20) != BYTE6(v205))
        goto LABEL_17;
      v20 = v205;
    }
    else if (v20 != v205 || (v205 & 0x8000000000000) != 0)
    {
LABEL_17:
      if ((v20 & 0x8000000000000) != 0)
      {
        v166 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
        do
        {
          v167 = __ldaxr(v166);
          v168 = v167 - 1;
        }
        while (__stlxr(v168, v166));
        if (!v168)
        {
          atomic_store(1u, v166);
          WTF::fastFree((WTF *)v166, v13);
        }
      }
      *v6 = v205;
      goto LABEL_19;
    }
    if ((v20 & 0x8000000000000) != 0)
    {
      v170 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
      do
      {
        v171 = __ldaxr(v170);
        v172 = v171 - 1;
      }
      while (__stlxr(v172, v170));
      if (!v172)
      {
        atomic_store(1u, v170);
        WTF::fastFree((WTF *)v170, v13);
      }
    }
LABEL_19:
    v22 = v18 + 40 * a1;
    if (*(_BYTE *)(v22 + 32))
    {
      v23 = (WebCore::Length *)(v22 + 24);
      v24 = *(unsigned __int8 *)(v18 + 40 * a1 + 28);
      if (v24 == 3)
      {
        v25 = *(float *)v23;
        if (!*(_BYTE *)(v18 + 40 * a1 + 30))
          v25 = (float)*(int *)v23;
        v26 = v25 / 100.0;
        goto LABEL_24;
      }
      v26 = 0.0;
      if (v15 > 0.0)
      {
        if (v24 == 11)
        {
          v95 = WebCore::Length::calculationValue(v23);
          (*(void (**)(_QWORD, float))(**(_QWORD **)(v95 + 8) + 16))(*(_QWORD *)(v95 + 8), v15);
          if (*(_BYTE *)(v95 + 16))
            v96 = *(float *)v14.i32 < 0.0;
          else
            v96 = 0;
          if (v96)
            *(float *)v14.i32 = 0.0;
          goto LABEL_160;
        }
        if (v24 == 4)
        {
          v14.i32[0] = *(_DWORD *)v23;
          if (!*(_BYTE *)(v18 + 40 * a1 + 30))
            *(float *)v14.i32 = (float)*(int *)v23;
LABEL_160:
          v26 = *(float *)v14.i32 / v15;
        }
      }
LABEL_24:
      if (a1 >= v208)
      {
        __break(0xC471u);
        JUMPOUT(0x1964EBC28);
      }
      v27 = (float *)((char *)v206 + 16 * a1);
      v27[2] = v26;
      *((_BYTE *)v27 + 12) = 1;
      goto LABEL_26;
    }
    if (a1)
    {
      if (a1 == v17)
      {
        if (v208 <= v17)
          goto LABEL_305;
        v84 = (char *)v206 + 16 * v17;
        if (!v84[12])
          v84[12] = 1;
        *((_DWORD *)v84 + 2) = 1065353216;
      }
    }
    else
    {
      if (!v208)
      {
        __break(0xC471u);
        JUMPOUT(0x1964EBC50);
      }
      v92 = v206;
      if (!*((_BYTE *)v206 + 12))
        *((_BYTE *)v206 + 12) = 1;
      *((_DWORD *)v92 + 2) = 0;
    }
LABEL_26:
    if (a1 >= v208)
    {
      __break(0xC471u);
      JUMPOUT(0x1964EBC30);
    }
    if (a1 && *((_BYTE *)v206 + 16 * a1 + 12))
    {
      if (v16 >= v208)
      {
        if (a1 != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1964EBC48);
        }
        v29 = 0;
      }
      else
      {
        v28 = (unsigned __int8 *)v206 + a3;
        v29 = a1;
        do
        {
          if (!--v29)
            break;
          v52 = *v28;
          v28 -= 16;
        }
        while (!v52);
      }
      if (v29 >= v208)
      {
        __break(0xC471u);
        goto LABEL_304;
      }
      v30 = (float *)((char *)v206 + 16 * v29);
      if (!*((_BYTE *)v30 + 12))
        goto LABEL_304;
      v31 = (float *)((char *)v206 + 16 * a1);
      v33 = v31[2];
      v32 = (char *)(v31 + 2);
      v34 = (char *)(v30 + 2);
      if (v33 < v30[2])
      {
        v85 = *(_DWORD *)v34;
        v32[4] = v34[4];
        *(_DWORD *)v32 = v85;
      }
    }
    ++a1;
    ++v16;
    a3 += 16;
  }
  while (a1 != v12);
  a3 = v196;
  a1 = v197;
  a6 = v195;
  if (v12 >= 3)
  {
    v73 = 0;
    v74 = 0;
    v75 = 0;
    for (i = 0; i != v12; ++i)
    {
      if (i >= v208)
      {
        __break(0xC471u);
        JUMPOUT(0x1964EBD30);
      }
      if ((*((_BYTE *)v206 + 16 * i + 12) != 0) | v75 & 1)
      {
        if (((*((_BYTE *)v206 + 16 * i + 12) != 0) & v75) == 1)
        {
          if (v74 < i)
          {
            if (v74 - 1 >= v208)
            {
              __break(0xC471u);
              JUMPOUT(0x1964EBDB0);
            }
            v77 = (float *)((char *)v206 + 16 * v74 - 16);
            if (!*((_BYTE *)v77 + 12))
              goto LABEL_304;
            v78 = v77[2];
            v79 = v73 + 1;
            v80 = (float)(*((float *)v206 + 4 * i + 2) - v78) / (float)(v79 + i);
            v81 = 16 * v74;
            v82 = v74;
            do
            {
              if (v82 >= v208)
              {
                __break(0xC471u);
                JUMPOUT(0x1964EBC60);
              }
              v83 = (float *)((char *)v206 + v81);
              v83[2] = v78 + (float)((float)(v79 + v82) * v80);
              *((_BYTE *)v83 + 12) = 1;
              ++v82;
              v81 += 16;
            }
            while (i != v82);
          }
          v75 = 0;
        }
      }
      else
      {
        v75 = 1;
        v74 = i;
      }
      v73 = -(uint64_t)v74;
    }
  }
LABEL_38:
  v35 = v208;
  v36 = v208 - 1;
  if (v36 >= 2)
  {
    v17 = 1;
    v6 = (unint64_t *)&v211;
    v7 = 1.0;
    while (1)
    {
      if (v35 <= v17)
        v53 = v17;
      else
        v53 = v35;
      v54 = 16 * v17 + 28;
      while (1)
      {
        if (v53 == v17)
        {
          __break(0xC471u);
          JUMPOUT(0x1964EBD88);
        }
        if ((*((_BYTE *)v206 + v54 - 22) & 4) == 0)
          break;
        ++v17;
        v54 += 16;
        if (v17 >= v36)
          goto LABEL_39;
      }
      v61 = v17 - 1;
      if (v17 - 1 >= v35)
      {
        __break(0xC471u);
        JUMPOUT(0x1964EBD90);
      }
      v62 = *(_QWORD *)((char *)v206 + v54 - 44);
      *(_QWORD *)&v210 = v62;
      if ((v62 & 0x8000000000000) != 0)
      {
LABEL_269:
        v156 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFLL);
        do
          v157 = __ldaxr(v156);
        while (__stlxr(v157 + 1, v156));
        LODWORD(v35) = v208;
      }
      if (v17 + 1 >= v35)
      {
        __break(0xC471u);
        JUMPOUT(0x1964EBD98);
      }
      v63 = v206;
      v64 = *(_QWORD *)((char *)v206 + v54 - 12);
      v209 = v64;
      if ((v64 & 0x8000000000000) != 0)
      {
        v158 = (unsigned int *)(v64 & 0xFFFFFFFFFFFFLL);
        do
          v159 = __ldaxr(v158);
        while (__stlxr(v159 + 1, v158));
        v63 = v206;
        v65 = v208;
      }
      else
      {
        v65 = v35;
      }
      if (v61 >= v65)
      {
        __break(0xC471u);
        JUMPOUT(0x1964EBDA0);
      }
      v66 = (float *)((char *)v63 + v54);
      if (!*((_BYTE *)v63 + v54 - 32))
        goto LABEL_304;
      if (v17 + 1 >= v65)
      {
        __break(0xC471u);
        JUMPOUT(0x1964EBDA8);
      }
      v67 = (float *)((char *)v63 + v54);
      if (!*(_BYTE *)v67 || !*((_BYTE *)v67 - 16))
        goto LABEL_304;
      v68 = *(v66 - 9);
      v69 = *(v67 - 1);
      v70 = *(v67 - 5);
      v71 = v70 - v68;
      v72 = v69 - v70;
      if ((float)(v70 - v68) == (float)(v69 - v70))
      {
      }
      else
      {
        if (v68 == v70)
        {
          v93 = &v209;
        }
        else
        {
          if (v69 != v70)
          {
            v128 = v69 - v68;
            *(_QWORD *)&v211 = 0;
            v212 = 0;
            v214 = 0;
            v217 = 0;
            v220 = 0;
            v223 = 0;
            v226 = 0;
            v229 = 0;
            v232 = 0;
            v129 = v71 / (float)(v69 - v68);
            if (v129 <= 0.5)
            {
              *((float *)&v211 + 2) = v68 + (float)(v71 / 3.0);
              BYTE12(v211) = 1;
              *(float *)&v213 = v68 + (float)((float)(v71 + v71) / 3.0);
              BYTE4(v213) = 1;
              v133 = 13.0;
              v215 = v70 + (float)((float)(v72 * 0.0) / 13.0);
              v216 = 1;
              v218 = v70 + (float)(v72 / 13.0);
              v219 = 1;
              v130 = v70 + (float)((float)(v72 + v72) / 13.0);
              v131 = v70 + (float)((float)(v72 * 3.0) / 13.0);
              v132 = v70 + (float)((float)(v72 * 4.0) / 13.0);
              v134 = 6.0;
              v135 = (float)(v72 * 5.0) / 13.0;
            }
            else
            {
              *((float *)&v211 + 2) = v68 + (float)((float)(v71 * 7.0) / 13.0);
              BYTE12(v211) = 1;
              *(float *)&v213 = v68 + (float)((float)(v71 * 8.0) / 13.0);
              BYTE4(v213) = 1;
              v215 = v68 + (float)((float)(v71 * 9.0) / 13.0);
              v216 = 1;
              v218 = v68 + (float)((float)(v71 * 10.0) / 13.0);
              v219 = 1;
              v130 = v68 + (float)((float)(v71 * 11.0) / 13.0);
              v131 = v68 + (float)((float)(v71 * 12.0) / 13.0);
              v132 = v68 + (float)((float)(v71 * 13.0) / 13.0);
              v133 = 3.0;
              v134 = 2.0;
              v135 = v72 / 3.0;
            }
            v221 = v130;
            v222 = 1;
            v224 = v131;
            v225 = 1;
            v227 = v132;
            v228 = 1;
            v230 = v70 + v135;
            v231 = 1;
            v233 = v70 + (float)((float)(v72 * v134) / v133);
            v234 = 1;
            v60 = 0;
            v145 = -0.69315 / logf(v129);
            do
            {
              v55 = &v6[2 * v60];
              if (!*((_BYTE *)v55 + 12))
                goto LABEL_304;
              v56 = powf((float)(*((float *)v55 + 2) - v68) / v128, v145);
              v57 = *(_QWORD *)(a2 + 168);
              v58 = *(unsigned int *)(a2 + 176);
              v204 = v210;
              if ((v210 & 0x8000000000000) != 0)
              {
                v152 = (unsigned int *)(v210 & 0xFFFFFFFFFFFFLL);
                do
                  v153 = __ldaxr(v152);
                while (__stlxr(v153 + 1, v152));
              }
              v203 = v209;
              if ((v209 & 0x8000000000000) != 0)
              {
                v154 = (unsigned int *)(v209 & 0xFFFFFFFFFFFFLL);
                do
                  v155 = __ldaxr(v154);
                while (__stlxr(v155 + 1, v154));
              }
              v9 = v9 & 0xFFFFFFFF00000000 | v58;
              WebCore::interpolateColors(v57, v9, (uint64_t)&v204, (uint64_t)&v203, (float)(v7 - v56), v56);
              WebCore::Color::operator=(&v6[2 * v60], &v205);
              if ((v205 & 0x8000000000000) != 0)
              {
                v179 = (unsigned int *)(v205 & 0xFFFFFFFFFFFFLL);
                do
                {
                  v180 = __ldaxr(v179);
                  v181 = v180 - 1;
                }
                while (__stlxr(v181, v179));
                if (!v181)
                {
                  atomic_store(1u, v179);
                  WTF::fastFree((WTF *)v179, v59);
                }
              }
              if ((v203 & 0x8000000000000) != 0)
              {
                v182 = (unsigned int *)(v203 & 0xFFFFFFFFFFFFLL);
                do
                {
                  v183 = __ldaxr(v182);
                  v184 = v183 - 1;
                }
                while (__stlxr(v184, v182));
                if (!v184)
                {
                  atomic_store(1u, v182);
                  WTF::fastFree((WTF *)v182, v59);
                }
              }
              if ((v204 & 0x8000000000000) != 0)
              {
                v185 = (unsigned int *)(v204 & 0xFFFFFFFFFFFFLL);
                do
                {
                  v186 = __ldaxr(v185);
                  v187 = v186 - 1;
                }
                while (__stlxr(v187, v185));
                if (!v187)
                {
                  atomic_store(1u, v185);
                  WTF::fastFree((WTF *)v185, v59);
                }
              }
              ++v60;
            }
            while (v60 != 9);
            for (j = 16; j != -2; j -= 2)
              WebCore::Color::~Color((WebCore::Color *)&v6[j], v13);
            v17 += 9;
            goto LABEL_104;
          }
          v93 = (uint64_t *)&v210;
        }
        WebCore::Color::operator=((unint64_t *)(v67 - 7), v93);
      }
LABEL_104:
      if ((v209 & 0x8000000000000) != 0)
      {
        v188 = (unsigned int *)(v209 & 0xFFFFFFFFFFFFLL);
        do
        {
          v189 = __ldaxr(v188);
          v190 = v189 - 1;
        }
        while (__stlxr(v190, v188));
        if (!v190)
        {
          atomic_store(1u, v188);
          WTF::fastFree((WTF *)v188, v13);
        }
      }
      if ((v210 & 0x8000000000000) != 0)
      {
        v191 = (unsigned int *)(v210 & 0xFFFFFFFFFFFFLL);
        do
        {
          v192 = __ldaxr(v191);
          v193 = v192 - 1;
        }
        while (__stlxr(v193, v191));
        if (!v193)
        {
          atomic_store(1u, v191);
          WTF::fastFree((WTF *)v191, v13);
        }
      }
      v35 = v208;
      v36 = v208 - 1;
      v37 = v208;
      if (v17 >= v36)
        goto LABEL_40;
    }
  }
LABEL_39:
  v37 = v35;
LABEL_40:
  if (v37 >= 2 && (a6 & 1) != 0)
  {
    v86 = (unint64_t *)v206;
    v87 = (float *)((char *)v206 + 16 * v36);
    if (!*((_BYTE *)v87 + 12) || !*((_BYTE *)v206 + 12))
      goto LABEL_304;
    v88 = v87[2];
    v89 = *((float *)v206 + 2);
    if ((float)(v88 - v89) == 0.0)
    {
      *((_DWORD *)v206 + 2) = 0;
      if (!v208)
      {
        __break(0xC471u);
        JUMPOUT(0x1964EBE00);
      }
      WebCore::Color::operator=(v86, &v86[2 * v208 - 2]);
      goto LABEL_42;
    }
    if (fabsf(v88 - v89) >= 0.000015259)
    {
      v90 = 0;
      if (v89 <= 0.0)
      {
        v91 = 0;
      }
      else
      {
        if (v89 >= 0.0)
        {
          v91 = 1;
          v137 = v36;
          while (1)
          {
            if (v137)
            {
              if (v137 >= v35)
              {
                __break(0xC471u);
                JUMPOUT(0x1964EBDE0);
              }
              v138 = (float *)((char *)v206 + 16 * v137);
              if (!*((_BYTE *)v138 + 12))
                goto LABEL_304;
              if (v137 - 1 >= v35)
              {
                __break(0xC471u);
                JUMPOUT(0x1964EBDE8);
              }
              v139 = (float *)((char *)v206 + 16 * v137 - 16);
              if (!*((_BYTE *)v139 + 12))
                goto LABEL_304;
              v89 = v89 - (float)(v138[2] - v139[2]);
            }
            v137 = (v35 - 1 + v137) % v35;
            v140 = __CFADD__(v91++, 1);
            if (v140)
              v90 = 1;
            if (v89 < 0.0)
              goto LABEL_164;
          }
        }
        v91 = 1;
      }
LABEL_164:
      v97 = 0;
      if (v88 >= 1.0)
      {
        v98 = 0;
      }
      else
      {
        if (v88 <= 1.0)
        {
          v141 = 0;
          v98 = 1;
          while (1)
          {
            v142 = v141 + 1;
            if (v141 < v36)
            {
              if (v142 >= v35)
              {
                __break(0xC471u);
                JUMPOUT(0x1964EBDF8);
              }
              v143 = (float *)((char *)v206 + 16 * v142);
              if (!*((_BYTE *)v143 + 12))
                goto LABEL_304;
              v144 = (float *)((char *)v206 + 16 * v141);
              if (!*((_BYTE *)v144 + 12))
                goto LABEL_304;
              v88 = v88 + (float)(v143[2] - v144[2]);
            }
            if (v142 == v35)
              v141 = 0;
            else
              v141 = v142;
            v140 = __CFADD__(v98++, 1);
            if (v140)
              v97 = 1;
            if (v88 > 1.0)
              goto LABEL_168;
          }
        }
        v98 = 1;
      }
LABEL_168:
      v99 = v35 + v91;
      v100 = __CFADD__(v35, v91);
      if (!v97 && !v90 && !v100)
      {
        v101 = v99 + v98;
        if (!__CFADD__(v99, v98) && v101 <= 0x10000)
        {
          v211 = 0uLL;
          if (v101)
          {
            v102 = WTF::fastMalloc((WTF *)(16 * v101));
            DWORD2(v211) = v101;
            *(_QWORD *)&v211 = v102;
            v37 = v208;
          }
          if (v91)
          {
            if (!v37)
            {
              __break(0xC471u);
              JUMPOUT(0x1964EBE08);
            }
            if (!*((_BYTE *)v206 + 12))
              goto LABEL_304;
            v103 = a3;
            v104 = 0;
            v105 = *((float *)v206 + 2);
            v106 = v36;
            do
            {
              if (v106 >= v208)
              {
                __break(0xC471u);
                JUMPOUT(0x1964EBDC8);
              }
              v107 = v206;
              v108 = *((_QWORD *)v206 + 2 * v106);
              *(_QWORD *)&v210 = v108;
              if ((v108 & 0x8000000000000) != 0)
              {
                v148 = (unsigned int *)(v108 & 0xFFFFFFFFFFFFLL);
                do
                  v149 = __ldaxr(v148);
                while (__stlxr(v149 + 1, v148));
              }
              HIDWORD(v210) = HIDWORD(*((_QWORD *)v107 + 2 * v106 + 1));
              *((float *)&v210 + 2) = v105;
              BYTE12(v210) = 1;
              v109 = HIDWORD(v211);
              if (HIDWORD(v211) == DWORD2(v211))
              {
              }
              else
              {
                v110 = v211;
                v111 = v210;
                *(_QWORD *)(v211 + 16 * HIDWORD(v211)) = v210;
                if ((v111 & 0x8000000000000) != 0)
                {
                  v160 = (unsigned int *)(v111 & 0xFFFFFFFFFFFFLL);
                  do
                    v161 = __ldaxr(v160);
                  while (__stlxr(v161 + 1, v160));
                }
                *(_QWORD *)(v110 + 16 * v109 + 8) = *((_QWORD *)&v210 + 1);
                ++HIDWORD(v211);
              }
              if (v106)
              {
                if (v106 >= v208)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1964EBDD0);
                }
                v112 = (float *)((char *)v206 + 16 * v106);
                if (!*((_BYTE *)v112 + 12))
                  goto LABEL_304;
                if (v106 - 1 >= v208)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1964EBDD8);
                }
                v113 = (float *)((char *)v206 + 16 * v106 - 16);
                if (!*((_BYTE *)v113 + 12))
                  goto LABEL_304;
                v105 = v105 - (float)(v112[2] - v113[2]);
              }
              if ((v210 & 0x8000000000000) != 0)
              {
                v173 = (unsigned int *)(v210 & 0xFFFFFFFFFFFFLL);
                do
                {
                  v174 = __ldaxr(v173);
                  v175 = v174 - 1;
                }
                while (__stlxr(v175, v173));
                if (!v175)
                {
                  atomic_store(1u, v173);
                  WTF::fastFree((WTF *)v173, v13);
                }
              }
              v106 = (v35 - 1 + v106) % v35;
              ++v104;
            }
            while (v104 != v91);
            v37 = v208;
          }
          else
          {
            v103 = a3;
          }
          if (!v98)
          {
LABEL_217:
            a3 = v103;
            goto LABEL_42;
          }
          if (v208)
          {
            v115 = (float *)((char *)v206 + 16 * v208);
            if (*((_BYTE *)v115 - 4))
            {
              v116 = 0;
              v117 = 0;
              v118 = *(v115 - 2);
              while (1)
              {
                if (v116 >= v208)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1964EBDC0);
                }
                v119 = v206;
                v120 = *((_QWORD *)v206 + 2 * v116);
                *(_QWORD *)&v210 = v120;
                if ((v120 & 0x8000000000000) != 0)
                {
                  v150 = (unsigned int *)(v120 & 0xFFFFFFFFFFFFLL);
                  do
                    v151 = __ldaxr(v150);
                  while (__stlxr(v151 + 1, v150));
                }
                HIDWORD(v210) = HIDWORD(*((_QWORD *)v119 + 2 * v116 + 1));
                *((float *)&v210 + 2) = v118;
                BYTE12(v210) = 1;
                v121 = HIDWORD(v211);
                if (HIDWORD(v211) == DWORD2(v211))
                {
                }
                else
                {
                  v122 = v211;
                  v123 = v210;
                  *(_QWORD *)(v211 + 16 * HIDWORD(v211)) = v210;
                  if ((v123 & 0x8000000000000) != 0)
                  {
                    v162 = (unsigned int *)(v123 & 0xFFFFFFFFFFFFLL);
                    do
                      v163 = __ldaxr(v162);
                    while (__stlxr(v163 + 1, v162));
                  }
                  *(_QWORD *)(v122 + 16 * v121 + 8) = *((_QWORD *)&v210 + 1);
                  ++HIDWORD(v211);
                }
                v124 = v116 + 1;
                if (v116 < v36)
                {
                  if (v124 >= v208)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x1964EBDF0);
                  }
                  v125 = (float *)((char *)v206 + 16 * v124);
                  if (!*((_BYTE *)v125 + 12))
                    goto LABEL_304;
                  v126 = (float *)((char *)v206 + 16 * v116);
                  if (!*((_BYTE *)v126 + 12))
                    goto LABEL_304;
                  v118 = v118 + (float)(v125[2] - v126[2]);
                }
                if (v124 == v35)
                  v116 = 0;
                else
                  ++v116;
                if ((v210 & 0x8000000000000) != 0)
                {
                  v176 = (unsigned int *)(v210 & 0xFFFFFFFFFFFFLL);
                  do
                  {
                    v177 = __ldaxr(v176);
                    v178 = v177 - 1;
                  }
                  while (__stlxr(v178, v176));
                  if (!v178)
                  {
                    atomic_store(1u, v176);
                    WTF::fastFree((WTF *)v176, v114);
                  }
                }
                if (++v117 == v98)
                  goto LABEL_217;
              }
            }
            goto LABEL_304;
          }
          __break(0xC471u);
LABEL_357:
          JUMPOUT(0x1964EBC18);
        }
      }
    }
  }
LABEL_42:
  v38 = v208;
  if (v208 <= 1)
  {
    v40 = v202;
    v200 = v202;
    v201 = 2;
    goto LABEL_48;
  }
  v13 = v206;
  if (!*((_BYTE *)v206 + 12))
    goto LABEL_304;
  v14.i32[0] = *((_DWORD *)v206 + 2);
  if (*(float *)v14.i32 >= 0.0)
  {
    v39 = (char *)v206 + 16 * v208;
    if (*(v39 - 4))
    {
      v14.i32[0] = *((_DWORD *)v39 - 2);
      if (*(float *)v14.i32 <= 1.0)
        goto LABEL_47;
      goto LABEL_108;
    }
LABEL_304:
    __break(1u);
LABEL_305:
    __break(0xC471u);
    JUMPOUT(0x1964EBC40);
  }
LABEL_108:
  v38 = v208;
LABEL_47:
  v40 = v202;
  v200 = v202;
  v201 = 2;
  if (v38 >= 3)
  {
    if (v38 >> 28)
    {
      __break(0xC471u);
      JUMPOUT(0x1964EBDB8);
    }
    result = (_OWORD *)WTF::fastMalloc((WTF *)(16 * v38));
    LODWORD(v201) = v38;
    v200 = result;
    v38 = v208;
  }
  else
  {
LABEL_48:
    result = v202;
  }
  if (v38)
  {
    v42 = 0;
    do
    {
      v43 = (char *)v206 + 16 * v42;
      if (!v43[12])
        goto LABEL_304;
      v44 = *((_DWORD *)v43 + 2);
      v45 = *(_QWORD *)v43;
      if ((v45 & 0x8000000000000) != 0)
      {
        v146 = (unsigned int *)(v45 & 0xFFFFFFFFFFFFLL);
        do
          v147 = __ldaxr(v146);
        while (__stlxr(v147 + 1, v146));
      }
      v46 = &v200[HIDWORD(v201)];
      *(_DWORD *)v46 = v44;
      *((_QWORD *)v46 + 1) = v45;
      ++HIDWORD(v201);
      ++v42;
      v47 = v208;
    }
    while (v42 < v208);
    result = v200;
  }
  else
  {
    v47 = 0;
  }
  *(_QWORD *)a1 = a1 + 16;
  *(_DWORD *)(a1 + 8) = 2;
  if (result == v202)
  {
    if (HIDWORD(v201))
    {
      v48 = (_QWORD *)(a1 + 24);
      do
      {
        *((_DWORD *)v48 - 2) = *(_DWORD *)v40;
        *v48 = 0;
        v49 = *((_QWORD *)v40 + 1);
        if (v49)
        {
          *v48 = v49;
          *((_QWORD *)v40 + 1) = 0;
        }
        ++v40;
        v48 += 2;
      }
      while (v40 != &v202[HIDWORD(v201)]);
    }
  }
  else
  {
    *(_QWORD *)a1 = result;
    *(_DWORD *)(a1 + 8) = v201;
  }
  *(_DWORD *)(a1 + 12) = HIDWORD(v201);
  *(_BYTE *)(a1 + 48) = 1;
  v50 = v206;
  if (v47)
  {
    v51 = (WTF *)((char *)v206 + 16 * v47);
    do
    {
      if ((*(_QWORD *)v50 & 0x8000000000000) != 0)
      {
        result = (_OWORD *)(*(_QWORD *)v50 & 0xFFFFFFFFFFFFLL);
        do
        {
          v164 = __ldaxr((unsigned int *)result);
          v165 = v164 - 1;
        }
        while (__stlxr(v165, (unsigned int *)result));
        if (!v165)
        {
          atomic_store(1u, (unsigned int *)result);
          result = (_OWORD *)WTF::fastFree((WTF *)result, v13);
        }
      }
      v50 = (WTF *)((char *)v50 + 16);
    }
    while (v50 != v51);
    v50 = v206;
  }
  if (v50)
  {
    v206 = 0;
    v207 = 0;
    return (_OWORD *)WTF::fastFree(v50, v13);
  }
  return result;
}

void WebCore::StyleGradientImage::computeStops<WebCore::`anonymous namespace'::RadialGradientAdapter,WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(uint64_t **a1, uint64_t a2, float32x2_t **a3, uint64_t *a4, WebCore::RenderStyle *a5, char a6, float a7)
{
  unint64_t v8;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double *v19;
  double v20;
  uint64_t v22;
  WebCore::Length *v23;
  int v24;
  float v25;
  float v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unint64_t v29;
  int v30;
  _DWORD *v31;
  float *v32;
  _DWORD *v33;
  float v34;
  float v35;
  _DWORD *v36;
  float v37;
  int v38;
  uint64_t v39;
  float v40;
  uint64_t v41;
  BOOL v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  _BOOL4 v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  _DWORD *v54;
  float v55;
  uint64_t v56;
  float v57;
  float *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  float v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  char *v75;
  int v76;
  unint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unint64_t v82;
  unsigned int *v83;
  unsigned int v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  unsigned int *v93;
  unsigned int *v94;
  float v95;
  float v96;
  unint64_t v97;
  int v98;
  unint64_t v99;
  void *v100;
  unint64_t v101;
  unint64_t v102;
  unsigned int *v103;
  unsigned int v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int *v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int *v111;
  unsigned int v112;
  unsigned int v113;
  unsigned int *v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  unsigned int *v120;
  unsigned int v121;
  unsigned int *v122;
  unsigned int v123;
  unsigned int *v124;
  unsigned int v125;
  unsigned int v126;
  unsigned int *v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int v135;
  _BOOL4 v136;
  unsigned int *v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int *v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int *v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int *v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int *v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int *v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int *v164;
  unsigned int v165;
  unsigned int v166;
  _BOOL4 v167;
  float v168;
  uint64_t v169;
  float v170;
  float v171;
  float v172;
  char v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  unsigned int *v182;
  unsigned int v183;
  unsigned int v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t v187;
  BOOL v188;
  char v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  BOOL v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  float v200;
  unint64_t v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  _QWORD *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int *v217;
  unsigned int v218;
  unsigned int *v219;
  unsigned int v220;
  unsigned int *v221;
  unsigned int v222;
  unsigned int *v223;
  unsigned int v224;
  unsigned int v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t *v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  WTF *v235;
  uint64_t v236;
  unint64_t v237;
  _QWORD *v238;
  WTF *v239;
  uint64_t v240;
  unsigned int *v241;
  unsigned int v242;
  float *v243;
  unint64_t v244;
  uint64_t v245;
  float v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  _QWORD *v257;
  _QWORD *v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  unsigned int *v263;
  unsigned int v264;
  unsigned int *v265;
  unsigned int v266;
  unsigned int *v267;
  unsigned int v268;
  unsigned int *v269;
  unsigned int v270;
  unsigned int v271;
  WTF *v272;
  unsigned int *v273;
  unsigned int v274;
  unsigned int v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  int v279;
  float v280;
  uint64_t v281;
  float *v282;
  unint64_t v283;
  float v284;
  unint64_t v285;
  uint64_t v286;
  float v287;
  unint64_t v288;
  float v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  double v296;
  double v298;
  unsigned int *v299;
  unsigned int v300;
  unsigned int *v301;
  unsigned int v302;
  unsigned int v303;
  _BOOL4 v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t **v310;
  uint64_t v311;
  int v312;
  uint64_t v313;
  uint64_t *v314;
  unsigned int *v315;
  unsigned int v316;
  uint64_t *v317;
  uint64_t v318;
  uint64_t *v319;
  WTF *v320;
  uint64_t v321;
  unsigned int *v322;
  unsigned int v323;
  unsigned int v324;
  unsigned int *v325;
  unsigned int v326;
  unsigned int *v327;
  unsigned int v328;
  unsigned int *v329;
  unsigned int v330;
  unsigned int *v331;
  unsigned int v332;
  unsigned int v333;
  _BOOL4 v334;
  unsigned int *v335;
  unsigned int v336;
  unsigned int v337;
  unsigned int *v338;
  unsigned int v339;
  unsigned int v340;
  unsigned int *v341;
  unsigned int v342;
  unsigned int v343;
  unint64_t v344;
  uint64_t v347;
  int v349;
  WebCore::RenderStyle *v350;
  uint64_t *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  unint64_t v355;
  unint64_t v356;
  __int128 v357;
  uint64_t v358;
  unint64_t v359;
  double v360;
  __int128 v361;
  double *v362;
  unint64_t *v363;
  double *v364;
  __int128 v365;
  double v366;
  double v367;
  __int128 v368;
  double *v369;
  uint64_t *v370;
  double *v371;
  float v372;
  char v373;
  uint64_t v374;
  float v375;
  char v376;
  uint64_t v377;
  float v378;
  char v379;
  uint64_t v380;
  float v381;
  char v382;
  uint64_t v383;
  float v384;
  char v385;
  uint64_t v386;
  float v387;
  char v388;
  uint64_t v389;
  float v390;
  char v391;
  uint64_t v392;

  v347 = a2;
  v392 = *MEMORY[0x1E0C80C00];
  v350 = a5;
  v349 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a5 + 3) + 320) + 20);
  v8 = *((unsigned int *)a4 + 3);
  *(_QWORD *)&v357 = 0;
  DWORD2(v357) = 0;
  HIDWORD(v357) = v8;
  if (!(_DWORD)v8)
  {
    v16 = 0;
    v13 = (*a3)[2].f32[1];
    v61 = -1;
    goto LABEL_93;
  }
  if (v8 >> 28)
  {
    __break(0xC471u);
    JUMPOUT(0x1964EDA88);
  }
  v10 = (_DWORD *)WTF::fastMalloc((WTF *)(16 * v8));
  DWORD2(v357) = v8;
  *(_QWORD *)&v357 = v10;
  bzero(v10, 16 * v8);
  v11 = 0;
  v344 = v8 - 1;
  v12 = -1;
  v13 = (*a3)[2].f32[1];
  v14 = 0x3FFFFFFFFFFFFFFFLL;
  v15 = 40;
  v16 = v8;
  do
  {
    if (v11 >= *((unsigned int *)a4 + 3))
    {
      __break(0xC471u);
      JUMPOUT(0x1964ED9D8);
    }
    v17 = *a4;
    a2 = *a4 + 40 * v11;
    if (*(_BYTE *)(a2 + 16))
    {
      if (v349)
      {
        WebCore::RenderStyle::colorWithColorFilter(v350, (const WebCore::StyleColor *)a2, (WebCore::Color *)&v367);
      }
      else
      {
        *(_QWORD *)&v365 = *((_QWORD *)v350 + 4) + 328;
        *(_QWORD *)&v368 = &v365;
        *((_QWORD *)&v368 + 1) = &v365;
        v369 = (double *)&v365;
        v370 = (uint64_t *)&v365;
        v18 = *(unsigned int *)(a2 + 8);
        if ((_DWORD)v18 == -1)
          goto LABEL_535;
        *(_QWORD *)&v361 = &v368;
        ((void (*)(double *__return_ptr, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v18])(&v367, &v361);
      }
    }
    else
    {
      v367 = 0.0;
    }
    if (v11 >= v16)
    {
      __break(0xC471u);
      JUMPOUT(0x1964ED9E0);
    }
    v19 = (double *)&v10[4 * v11];
    v20 = *v19;
    if ((*(_QWORD *)v19 & 0x8000000000000) != 0)
    {
      if ((*(_QWORD *)&v367 & 0x8000000000000) == 0)
        goto LABEL_15;
      v368 = *(_OWORD *)((*(_QWORD *)&v20 & 0xFFFFFFFFFFFFLL) + 4);
      v361 = *(_OWORD *)((*(_QWORD *)&v367 & 0xFFFFFFFFFFFFLL) + 4);
      v46 = WebCore::operator==<float,4ul>((float *)&v368, (float *)&v361);
      v20 = *v19;
      if (!v46 || HIBYTE(*(_QWORD *)&v20) != HIBYTE(*(_QWORD *)&v367) || BYTE6(v20) != BYTE6(v367))
        goto LABEL_15;
      v20 = v367;
    }
    else if (*(_QWORD *)&v20 != *(_QWORD *)&v367 || (*(_QWORD *)&v367 & 0x8000000000000) != 0)
    {
LABEL_15:
      if ((*(_QWORD *)&v20 & 0x8000000000000) != 0)
      {
        v43 = (unsigned int *)(*(_QWORD *)&v20 & 0xFFFFFFFFFFFFLL);
        do
        {
          v44 = __ldaxr(v43);
          v45 = v44 - 1;
        }
        while (__stlxr(v45, v43));
        if (!v45)
        {
          atomic_store(1u, v43);
          WTF::fastFree((WTF *)v43, (void *)a2);
        }
      }
      *v19 = v367;
      goto LABEL_17;
    }
    if ((*(_QWORD *)&v20 & 0x8000000000000) != 0)
    {
      v47 = (unsigned int *)(*(_QWORD *)&v20 & 0xFFFFFFFFFFFFLL);
      do
      {
        v48 = __ldaxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (!v49)
      {
        atomic_store(1u, v47);
        WTF::fastFree((WTF *)v47, (void *)a2);
      }
    }
LABEL_17:
    v22 = v17 + 40 * v11;
    if (*(_BYTE *)(v22 + 32))
    {
      v23 = (WebCore::Length *)(v22 + 24);
      v24 = *(unsigned __int8 *)(v17 + 40 * v11 + 28);
      if (v24 == 3)
      {
        v25 = *(float *)v23;
        if (!*(_BYTE *)(v17 + 40 * v11 + 30))
          v25 = (float)*(int *)v23;
        v26 = v25 / 100.0;
        goto LABEL_22;
      }
      v26 = 0.0;
      if (v13 > 0.0)
      {
        if (v24 == 11)
        {
          v41 = WebCore::Length::calculationValue(v23);
          (*(void (**)(_QWORD, float))(**(_QWORD **)(v41 + 8) + 16))(*(_QWORD *)(v41 + 8), v13);
          if (*(_BYTE *)(v41 + 16))
            v42 = v40 < 0.0;
          else
            v42 = 0;
          if (v42)
            v40 = 0.0;
          goto LABEL_59;
        }
        if (v24 == 4)
        {
          v40 = *(float *)v23;
          if (!*(_BYTE *)(v17 + 40 * v11 + 30))
            v40 = (float)*(int *)v23;
LABEL_59:
          v26 = v40 / v13;
        }
      }
LABEL_22:
      v16 = HIDWORD(v357);
      if (v11 >= HIDWORD(v357))
      {
        __break(0xC471u);
        JUMPOUT(0x1964ED9E8);
      }
      v10 = (_DWORD *)v357;
      v27 = v357 + 16 * v11;
      *(float *)(v27 + 8) = v26;
      *(_BYTE *)(v27 + 12) = 1;
      goto LABEL_24;
    }
    if (v11)
    {
      if (v11 == v344)
      {
        v16 = HIDWORD(v357);
        if (HIDWORD(v357) <= (unint64_t)(v8 - 1))
        {
          __break(0xC471u);
          JUMPOUT(0x1964EDA40);
        }
        v10 = (_DWORD *)v357;
        v39 = v357 + 16 * v344;
        if (!*(_BYTE *)(v39 + 12))
          *(_BYTE *)(v39 + 12) = 1;
        *(_DWORD *)(v39 + 8) = 1065353216;
      }
      else
      {
        v10 = (_DWORD *)v357;
        v16 = HIDWORD(v357);
      }
    }
    else
    {
      v16 = HIDWORD(v357);
      if (!HIDWORD(v357))
      {
        __break(0xC471u);
        JUMPOUT(0x1964EDA58);
      }
      v10 = (_DWORD *)v357;
      if (!*(_BYTE *)(v357 + 12))
        *(_BYTE *)(v357 + 12) = 1;
      v10[2] = 0;
    }
LABEL_24:
    if (v11 >= v16)
    {
      __break(0xC471u);
      JUMPOUT(0x1964ED9F0);
    }
    if (v11 && LOBYTE(v10[4 * v11 + 3]))
    {
      if (v12 >= v16)
      {
        if (v11 != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1964EDA48);
        }
        v29 = 0;
      }
      else
      {
        v28 = (unsigned __int8 *)&v10[v14];
        v29 = v11;
        do
        {
          if (!--v29)
            break;
          v30 = *v28;
          v28 -= 16;
        }
        while (!v30);
      }
      if (v29 >= v16)
      {
        __break(0xC471u);
        goto LABEL_549;
      }
      v31 = &v10[4 * v29];
      if (!*((_BYTE *)v31 + 12))
        goto LABEL_549;
      v32 = (float *)&v10[4 * v11];
      v34 = v32[2];
      v33 = v32 + 2;
      v35 = v34;
      v37 = *((float *)v31 + 2);
      v36 = v31 + 2;
      if (v35 < v37)
      {
        v38 = *v36;
        *((_BYTE *)v33 + 4) = *((_BYTE *)v36 + 4);
        *v33 = v38;
      }
    }
    ++v11;
    ++v12;
    v14 += 4;
  }
  while (v11 != v8);
  if (v8 >= 3)
  {
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    while (v53 != v16)
    {
      if ((LOBYTE(v10[4 * v53 + 3]) != 0) | v52 & 1)
      {
        if (((LOBYTE(v10[4 * v53 + 3]) != 0) & v52) == 1)
        {
          if (v51 < v53)
          {
            if (v51 - 1 >= v16)
            {
              __break(0xC471u);
              JUMPOUT(0x1964EDA50);
            }
            v54 = &v10[4 * v51 - 4];
            if (!*((_BYTE *)v54 + 12))
              goto LABEL_549;
            v55 = *((float *)v54 + 2);
            v56 = v50 + 1;
            v57 = (float)(*(float *)&v10[4 * v53 + 2] - v55) / (float)(v56 + v53);
            v58 = (float *)&v10[4 * v51 + 3];
            v59 = v16;
            v60 = v53;
            do
            {
              if (v51 == v59)
              {
                __break(0xC471u);
                JUMPOUT(0x1964ED9D0);
              }
              *(v58 - 1) = v55 + (float)((float)(v51 + v56) * v57);
              *(_BYTE *)v58 = 1;
              v58 += 4;
              ++v56;
              --v60;
              --v59;
            }
            while (v51 != v60);
          }
          v52 = 0;
        }
      }
      else
      {
        v52 = 1;
        v51 = v53;
      }
      ++v53;
      v50 = -(uint64_t)v51;
      if (v53 == v8)
        goto LABEL_92;
    }
LABEL_550:
    __break(0xC471u);
    JUMPOUT(0x1964EDA08);
  }
LABEL_92:
  v61 = v16 - 1;
  if (v16 - 1 >= 2)
  {
LABEL_93:
    v62 = 0.5;
    v63 = 1;
    while (1)
    {
      v64 = v357;
      if (v16 <= v63)
        v65 = v63;
      else
        v65 = v16;
      v66 = 16 * v63;
      while (1)
      {
        if (v65 == v63)
        {
          __break(0xC471u);
          JUMPOUT(0x1964ED9F8);
        }
        v67 = (unint64_t *)(v357 + v66);
        if ((*(_BYTE *)(v357 + v66 + 6) & 4) == 0)
          break;
        ++v63;
        v66 += 16;
        if (v63 >= v61)
          goto LABEL_266;
      }
      if (v63 - 1 >= v16)
      {
        __break(0xC471u);
        JUMPOUT(0x1964EDA70);
      }
      v68 = *(_QWORD *)(v357 + v66 - 16);
      if ((v68 & 0x8000000000000) != 0)
      {
        v120 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFLL);
        do
          v121 = __ldaxr(v120);
        while (__stlxr(v121 + 1, v120));
      }
      if (v63 + 1 >= v16)
      {
        __break(0xC471u);
        JUMPOUT(0x1964EDA78);
      }
      v8 = *(_QWORD *)(v64 + v66 + 16);
      if ((v8 & 0x8000000000000) != 0)
      {
        v122 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
        do
          v123 = __ldaxr(v122);
        while (__stlxr(v123 + 1, v122));
      }
      if (v63 - 1 >= v16)
      {
        __break(0xC471u);
        JUMPOUT(0x1964EDA80);
      }
      v69 = v64 + v66;
      if (!*(_BYTE *)(v64 + v66 - 4) || !*(_BYTE *)(v69 + 28) || !*(_BYTE *)(v64 + v66 + 12))
        goto LABEL_549;
      v70 = *(float *)(v69 - 8);
      v71 = *(float *)(v69 + 24);
      v72 = *(float *)(v64 + v66 + 8);
      v73 = v72 - v70;
      v74 = v71 - v72;
      if ((float)(v72 - v70) == (float)(v71 - v72))
      {
        if ((*v67 & 0x8000000000000) != 0)
        {
          v130 = (unsigned int *)(*v67 & 0xFFFFFFFFFFFFLL);
          do
          {
            v131 = __ldaxr(v130);
            v132 = v131 - 1;
          }
          while (__stlxr(v132, v130));
          v62 = 0.5;
          if (!v132)
          {
            atomic_store(1u, v130);
            WTF::fastFree((WTF *)v130, (void *)a2);
          }
        }
        v75 = (char *)(v64 + v66 + 16);
        v76 = HIDWORD(v357);
        HIDWORD(v357) = v76 - 1;
        goto LABEL_113;
      }
      if (v70 != v72)
        break;
      v77 = *v67;
      if ((*v67 & 0x8000000000000) != 0)
      {
        if ((v8 & 0x8000000000000) != 0)
        {
          v368 = *(_OWORD *)((v77 & 0xFFFFFFFFFFFFLL) + 4);
          v78 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
          v361 = *(_OWORD *)((v8 & 0xFFFFFFFFFFFFLL) + 4);
          v136 = WebCore::operator==<float,4ul>((float *)&v368, (float *)&v361);
          v77 = *v67;
          if (v136 && HIBYTE(v77) == HIBYTE(v8))
          {
            v62 = 0.5;
            if (BYTE6(v77) != BYTE6(v8))
              goto LABEL_121;
            do
            {
LABEL_125:
              v80 = __ldaxr(v78);
              v81 = v80 - 1;
            }
            while (__stlxr(v81, v78));
            if (!v81)
            {
              atomic_store(1u, v78);
              WTF::fastFree((WTF *)v78, (void *)a2);
            }
            v62 = 0.5;
            goto LABEL_114;
          }
          v62 = 0.5;
        }
LABEL_121:
        if ((v77 & 0x8000000000000) != 0)
        {
          v127 = (unsigned int *)(v77 & 0xFFFFFFFFFFFFLL);
          do
          {
            v128 = __ldaxr(v127);
            v129 = v128 - 1;
          }
          while (__stlxr(v129, v127));
          v62 = 0.5;
          if (!v129)
          {
            atomic_store(1u, v127);
            WTF::fastFree((WTF *)v127, (void *)a2);
          }
        }
        *v67 = v8;
        if ((v8 & 0x8000000000000) == 0)
          goto LABEL_114;
        v78 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
        do
          v79 = __ldaxr(v78);
        while (__stlxr(v79 + 1, v78));
        goto LABEL_125;
      }
      if ((v8 & 0x8000000000000) != 0 || v77 != v8)
        goto LABEL_121;
LABEL_114:
      if ((v68 & 0x8000000000000) != 0)
      {
        v124 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFLL);
        do
        {
          v125 = __ldaxr(v124);
          v126 = v125 - 1;
        }
        while (__stlxr(v126, v124));
        v62 = 0.5;
        if (!v126)
        {
          atomic_store(1u, v124);
          WTF::fastFree((WTF *)v124, (void *)a2);
        }
      }
      v16 = HIDWORD(v357);
      v61 = HIDWORD(v357) - 1;
      if (v63 >= v61)
        goto LABEL_266;
    }
    if (v71 == v72)
    {
      v82 = *v67;
      if ((*v67 & 0x8000000000000) != 0)
      {
        if ((v68 & 0x8000000000000) != 0)
        {
          v368 = *(_OWORD *)((v82 & 0xFFFFFFFFFFFFLL) + 4);
          v361 = *(_OWORD *)((v68 & 0xFFFFFFFFFFFFLL) + 4);
          v167 = WebCore::operator==<float,4ul>((float *)&v368, (float *)&v361);
          v82 = *v67;
          if (v167 && HIBYTE(v82) == HIBYTE(v68))
          {
            v62 = 0.5;
            if (BYTE6(v82) == BYTE6(v68))
              goto LABEL_113;
          }
          else
          {
            v62 = 0.5;
          }
        }
      }
      else if ((v68 & 0x8000000000000) == 0 && v82 == v68)
      {
        goto LABEL_113;
      }
      if ((v82 & 0x8000000000000) != 0)
      {
        v133 = (unsigned int *)(v82 & 0xFFFFFFFFFFFFLL);
        do
        {
          v134 = __ldaxr(v133);
          v135 = v134 - 1;
        }
        while (__stlxr(v135, v133));
        v62 = 0.5;
        if (!v135)
        {
          atomic_store(1u, v133);
          WTF::fastFree((WTF *)v133, (void *)a2);
        }
      }
      *v67 = v68;
      if ((v68 & 0x8000000000000) != 0)
      {
        v83 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFLL);
        do
          v84 = __ldaxr(v83);
        while (__stlxr(v84 + 1, v83));
        v62 = 0.5;
      }
LABEL_113:
      if ((v8 & 0x8000000000000) == 0)
        goto LABEL_114;
      v78 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
      goto LABEL_125;
    }
    v85 = v71 - v70;
    *(_QWORD *)&v368 = 0;
    v369 = 0;
    v371 = 0;
    v374 = 0;
    v377 = 0;
    v380 = 0;
    v383 = 0;
    v386 = 0;
    v389 = 0;
    v86 = v73 / (float)(v71 - v70);
    if (v86 <= v62)
    {
      *((float *)&v368 + 2) = v70 + (float)(v73 / 3.0);
      BYTE12(v368) = 1;
      *(float *)&v370 = v70 + (float)((float)(v73 + v73) / 3.0);
      BYTE4(v370) = 1;
      v90 = 13.0;
      v372 = v72 + (float)((float)(v74 * 0.0) / 13.0);
      v373 = 1;
      v375 = v72 + (float)(v74 / 13.0);
      v376 = 1;
      v87 = v72 + (float)((float)(v74 + v74) / 13.0);
      v88 = v72 + (float)((float)(v74 * 3.0) / 13.0);
      v89 = v72 + (float)((float)(v74 * 4.0) / 13.0);
      v91 = 6.0;
      v92 = (float)(v74 * 5.0) / 13.0;
    }
    else
    {
      *((float *)&v368 + 2) = v70 + (float)((float)(v73 * 7.0) / 13.0);
      BYTE12(v368) = 1;
      *(float *)&v370 = v70 + (float)((float)(v73 * 8.0) / 13.0);
      BYTE4(v370) = 1;
      v372 = v70 + (float)((float)(v73 * 9.0) / 13.0);
      v373 = 1;
      v375 = v70 + (float)((float)(v73 * 10.0) / 13.0);
      v376 = 1;
      v87 = v70 + (float)((float)(v73 * 11.0) / 13.0);
      v88 = v70 + (float)((float)(v73 * 12.0) / 13.0);
      v89 = v70 + (float)((float)(v73 * 13.0) / 13.0);
      v90 = 3.0;
      v91 = 2.0;
      v92 = v74 / 3.0;
    }
    v378 = v87;
    v379 = 1;
    v381 = v88;
    v382 = 1;
    v384 = v89;
    v385 = 1;
    v387 = v72 + v92;
    v388 = 1;
    v390 = v72 + (float)((float)(v74 * v91) / v90);
    v391 = 1;
    v12 = 0;
    v93 = (unsigned int *)(v68 & 0xFFFFFFFFFFFFLL);
    v94 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFLL);
    v95 = -0.69315 / logf(v86);
    while (2)
    {
      v15 = (uint64_t)(&v368 + v12);
      if (!*(_BYTE *)(v15 + 12))
        goto LABEL_549;
      v96 = powf((float)(*(float *)(v15 + 8) - v70) / v85, v95);
      v97 = *(_QWORD *)(v347 + 168);
      v98 = *(_DWORD *)(v347 + 176);
      v356 = v68;
      if ((v68 & 0x8000000000000) != 0)
      {
        do
          v106 = __ldaxr(v93);
        while (__stlxr(v106 + 1, v93));
      }
      v355 = v8;
      if ((v8 & 0x8000000000000) != 0)
      {
        do
          v107 = __ldaxr(v94);
        while (__stlxr(v107 + 1, v94));
      }
      *(_QWORD *)&v365 = v97;
      DWORD2(v365) = v98;
      v366 = (float)(1.0 - v96);
      v360 = v96;
      *(_QWORD *)&v361 = &v365;
      *((_QWORD *)&v361 + 1) = &v356;
      v362 = &v366;
      v363 = &v355;
      v364 = &v360;
      v99 = HIDWORD(v97);
      if (v99 == 0xFFFFFFFF)
        goto LABEL_535;
      v367 = COERCE_DOUBLE(&v361);
      ((void (*)(unint64_t *__return_ptr, double *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore17interpolateColorsENS8_24ColorInterpolationMethodENS8_5ColorEdSA_dE3__0JEEEEEJRNS0_6__implIJNS9_3HSLENS9_3HWBENS9_3LCHENS9_3LabENS9_5OKLCHENS9_5OKLabENS9_4SRGBENS9_10SRGBLinearENS9_9DisplayP3ENS9_6A98RGBENS9_11ProPhotoRGBENS9_7Rec2020ENS9_6XYZD50ENS9_6XYZD65EEEEEEEDcOT_DpOT0____fmatrix[v99])(&v359, &v367, &v365);
      v101 = *(_QWORD *)v15;
      if ((*(_QWORD *)v15 & 0x8000000000000) != 0)
      {
        if ((v359 & 0x8000000000000) != 0)
        {
          v361 = *(_OWORD *)((v101 & 0xFFFFFFFFFFFFLL) + 4);
          v365 = *(_OWORD *)((v359 & 0xFFFFFFFFFFFFLL) + 4);
          if (WebCore::operator==<float,4ul>((float *)&v361, (float *)&v365))
          {
            v102 = v359;
            if (HIBYTE(v101) == HIBYTE(v359) && BYTE6(v101) == BYTE6(v359))
              goto LABEL_155;
          }
        }
        v114 = (unsigned int *)(v101 & 0xFFFFFFFFFFFFLL);
        do
        {
          v115 = __ldaxr(v114);
          v116 = v115 - 1;
        }
        while (__stlxr(v116, v114));
        if (!v116)
        {
          atomic_store(1u, v114);
          WTF::fastFree((WTF *)v114, v100);
        }
LABEL_149:
        *(_QWORD *)v15 = v359;
        v359 = 0;
      }
      else
      {
        if (v101 != v359 || (v359 & 0x8000000000000) != 0)
          goto LABEL_149;
        v102 = *(_QWORD *)v15;
LABEL_155:
        if ((v102 & 0x8000000000000) != 0)
        {
          v103 = (unsigned int *)(v102 & 0xFFFFFFFFFFFFLL);
          do
          {
            v104 = __ldaxr(v103);
            v105 = v104 - 1;
          }
          while (__stlxr(v105, v103));
          if (!v105)
          {
            atomic_store(1u, v103);
            WTF::fastFree((WTF *)v103, v100);
          }
        }
      }
      if ((v355 & 0x8000000000000) != 0)
      {
        v108 = (unsigned int *)(v355 & 0xFFFFFFFFFFFFLL);
        do
        {
          v109 = __ldaxr(v108);
          v110 = v109 - 1;
        }
        while (__stlxr(v110, v108));
        if (!v110)
        {
          atomic_store(1u, v108);
          WTF::fastFree((WTF *)v108, v100);
        }
      }
      if ((v356 & 0x8000000000000) != 0)
      {
        v111 = (unsigned int *)(v356 & 0xFFFFFFFFFFFFLL);
        do
        {
          v112 = __ldaxr(v111);
          v113 = v112 - 1;
        }
        while (__stlxr(v113, v111));
        if (!v113)
        {
          atomic_store(1u, v111);
          WTF::fastFree((WTF *)v111, v100);
        }
      }
      if (++v12 == 9)
      {
        v117 = v357 + v66;
        v118 = *(_QWORD *)(v357 + v66);
        if ((v118 & 0x8000000000000) != 0)
        {
          v137 = (unsigned int *)(v118 & 0xFFFFFFFFFFFFLL);
          do
          {
            v138 = __ldaxr(v137);
            v139 = v138 - 1;
          }
          while (__stlxr(v139, v137));
          if (!v139)
          {
            atomic_store(1u, v137);
            WTF::fastFree((WTF *)v137, v100);
          }
        }
        v119 = HIDWORD(v357);
        HIDWORD(v357) = v119 - 1;
        v62 = 0.5;
        if ((v389 & 0x8000000000000) != 0)
        {
          v140 = (unsigned int *)(v389 & 0xFFFFFFFFFFFFLL);
          do
          {
            v141 = __ldaxr(v140);
            v142 = v141 - 1;
          }
          while (__stlxr(v142, v140));
          v62 = 0.5;
          if (!v142)
          {
            atomic_store(1u, v140);
            WTF::fastFree((WTF *)v140, (void *)a2);
          }
        }
        if ((v386 & 0x8000000000000) != 0)
        {
          v143 = (unsigned int *)(v386 & 0xFFFFFFFFFFFFLL);
          do
          {
            v144 = __ldaxr(v143);
            v145 = v144 - 1;
          }
          while (__stlxr(v145, v143));
          v62 = 0.5;
          if (!v145)
          {
            atomic_store(1u, v143);
            WTF::fastFree((WTF *)v143, (void *)a2);
          }
        }
        if ((v383 & 0x8000000000000) != 0)
        {
          v146 = (unsigned int *)(v383 & 0xFFFFFFFFFFFFLL);
          do
          {
            v147 = __ldaxr(v146);
            v148 = v147 - 1;
          }
          while (__stlxr(v148, v146));
          v62 = 0.5;
          if (!v148)
          {
            atomic_store(1u, v146);
            WTF::fastFree((WTF *)v146, (void *)a2);
          }
        }
        if ((v380 & 0x8000000000000) != 0)
        {
          v149 = (unsigned int *)(v380 & 0xFFFFFFFFFFFFLL);
          do
          {
            v150 = __ldaxr(v149);
            v151 = v150 - 1;
          }
          while (__stlxr(v151, v149));
          v62 = 0.5;
          if (!v151)
          {
            atomic_store(1u, v149);
            WTF::fastFree((WTF *)v149, (void *)a2);
          }
        }
        if ((v377 & 0x8000000000000) != 0)
        {
          v152 = (unsigned int *)(v377 & 0xFFFFFFFFFFFFLL);
          do
          {
            v153 = __ldaxr(v152);
            v154 = v153 - 1;
          }
          while (__stlxr(v154, v152));
          v62 = 0.5;
          if (!v154)
          {
            atomic_store(1u, v152);
            WTF::fastFree((WTF *)v152, (void *)a2);
          }
        }
        if ((v374 & 0x8000000000000) != 0)
        {
          v155 = (unsigned int *)(v374 & 0xFFFFFFFFFFFFLL);
          do
          {
            v156 = __ldaxr(v155);
            v157 = v156 - 1;
          }
          while (__stlxr(v157, v155));
          v62 = 0.5;
          if (!v157)
          {
            atomic_store(1u, v155);
            WTF::fastFree((WTF *)v155, (void *)a2);
          }
        }
        if (((unint64_t)v371 & 0x8000000000000) != 0)
        {
          v158 = (unsigned int *)((unint64_t)v371 & 0xFFFFFFFFFFFFLL);
          do
          {
            v159 = __ldaxr(v158);
            v160 = v159 - 1;
          }
          while (__stlxr(v160, v158));
          v62 = 0.5;
          if (!v160)
          {
            atomic_store(1u, v158);
            WTF::fastFree((WTF *)v158, (void *)a2);
          }
        }
        if (((unint64_t)v369 & 0x8000000000000) != 0)
        {
          v161 = (unsigned int *)((unint64_t)v369 & 0xFFFFFFFFFFFFLL);
          do
          {
            v162 = __ldaxr(v161);
            v163 = v162 - 1;
          }
          while (__stlxr(v163, v161));
          v62 = 0.5;
          if (!v163)
          {
            atomic_store(1u, v161);
            WTF::fastFree((WTF *)v161, (void *)a2);
          }
        }
        if ((v368 & 0x8000000000000) != 0)
        {
          v164 = (unsigned int *)(v368 & 0xFFFFFFFFFFFFLL);
          do
          {
            v165 = __ldaxr(v164);
            v166 = v165 - 1;
          }
          while (__stlxr(v166, v164));
          v62 = 0.5;
          if (!v166)
          {
            atomic_store(1u, v164);
            WTF::fastFree((WTF *)v164, (void *)a2);
          }
        }
        v63 += 9;
        goto LABEL_113;
      }
      continue;
    }
  }
LABEL_266:
  v8 = 0x19688B000;
  if (v16 < 2 || (a6 & 1) == 0)
    goto LABEL_434;
  v168 = 1.0;
  if (v13 < a7)
  {
    v168 = a7 / v13;
    if (v13 <= 0.0)
      v168 = 0.0;
  }
  v15 = v357;
  v169 = v357 + 16 * v61;
  if (!*(_BYTE *)(v169 + 12) || !*(_BYTE *)(v357 + 12))
  {
LABEL_549:
    __break(1u);
    goto LABEL_550;
  }
  v170 = *(float *)(v169 + 8);
  v171 = *(float *)(v357 + 8);
  v172 = (float)(v170 - v171) / fmaxf(v168, 1.0);
  if (v172 == 0.0)
  {
    *(_DWORD *)(v357 + 8) = 0;
    v175 = v15 + 16 * v16;
    v178 = *(_QWORD *)(v175 - 16);
    v177 = (uint64_t *)(v175 - 16);
    v176 = v178;
    v179 = *(_QWORD *)v15;
    if ((*(_QWORD *)v15 & 0x8000000000000) != 0)
    {
      if ((v176 & 0x8000000000000) == 0)
        goto LABEL_281;
      v368 = *(_OWORD *)((v179 & 0xFFFFFFFFFFFFLL) + 4);
      v361 = *(_OWORD *)((v176 & 0xFFFFFFFFFFFFLL) + 4);
      v334 = WebCore::operator==<float,4ul>((float *)&v368, (float *)&v361);
      v179 = *(_QWORD *)v15;
      if (!v334 || HIBYTE(v179) != HIBYTE(*v177) || BYTE6(v179) != BYTE6(*v177))
        goto LABEL_281;
    }
    else if (v179 != v176 || (v176 & 0x8000000000000) != 0)
    {
LABEL_281:
      if ((v179 & 0x8000000000000) != 0)
      {
        v331 = (unsigned int *)(v179 & 0xFFFFFFFFFFFFLL);
        do
        {
          v332 = __ldaxr(v331);
          v333 = v332 - 1;
        }
        while (__stlxr(v333, v331));
        if (!v333)
        {
          atomic_store(1u, v331);
          WTF::fastFree((WTF *)v331, (void *)a2);
        }
      }
      v180 = *v177;
      *(_QWORD *)v15 = *v177;
      if ((v180 & 0x8000000000000) != 0)
      {
        v325 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFLL);
        do
          v326 = __ldaxr(v325);
        while (__stlxr(v326 + 1, v325));
      }
    }
    v181 = (_QWORD *)(v15 + 16);
    do
    {
      if ((*v181 & 0x8000000000000) != 0)
      {
        v182 = (unsigned int *)(*v181 & 0xFFFFFFFFFFFFLL);
        do
        {
          v183 = __ldaxr(v182);
          v184 = v183 - 1;
        }
        while (__stlxr(v184, v182));
        if (!v184)
        {
          atomic_store(1u, v182);
          WTF::fastFree((WTF *)v182, (void *)a2);
        }
      }
      v181 += 2;
    }
    while (v181 != (_QWORD *)(v15 + 16 * v16));
    v16 = 1;
    HIDWORD(v357) = 1;
    goto LABEL_440;
  }
  if (fabsf(v172) < 0.000015259)
    goto LABEL_436;
  v173 = 0;
  if (v171 <= 0.0)
  {
    v174 = 0;
  }
  else
  {
    if (v171 >= 0.0)
    {
      v174 = 1;
      v185 = v61;
      while (1)
      {
        if (v185)
        {
          if (v185 >= v16)
          {
            __break(0xC471u);
            JUMPOUT(0x1964EDAA0);
          }
          v186 = v357 + 16 * v185;
          if (!*(_BYTE *)(v186 + 12))
            goto LABEL_549;
          if (v185 - 1 >= v16)
          {
            __break(0xC471u);
            JUMPOUT(0x1964EDAA8);
          }
          v187 = v357 + 16 * (v185 - 1);
          if (!*(_BYTE *)(v187 + 12))
            goto LABEL_549;
          v171 = v171 - (float)(*(float *)(v186 + 8) - *(float *)(v187 + 8));
        }
        v185 = (v16 - 1 + v185) % v16;
        v188 = __CFADD__(v174++, 1);
        if (v188)
          v173 = 1;
        if (v171 < 0.0)
          goto LABEL_303;
      }
    }
    v174 = 1;
  }
LABEL_303:
  v189 = 0;
  if (v170 >= v168)
  {
    v190 = 0;
  }
  else
  {
    if (v170 <= v168)
    {
      v191 = 0;
      v190 = 1;
      while (1)
      {
        v192 = v191 + 1;
        if (v191 < v61)
        {
          if (v192 >= v16)
          {
            __break(0xC471u);
            JUMPOUT(0x1964EDB1CLL);
          }
          v193 = v357 + 16 * v192;
          if (!*(_BYTE *)(v193 + 12))
            goto LABEL_549;
          v194 = v357 + 16 * v191;
          if (!*(_BYTE *)(v194 + 12))
            goto LABEL_549;
          v170 = v170 + (float)(*(float *)(v193 + 8) - *(float *)(v194 + 8));
        }
        if (v192 == v16)
          v191 = 0;
        else
          v191 = v192;
        v188 = __CFADD__(v190++, 1);
        if (v188)
          v189 = 1;
        if (v170 > v168)
          goto LABEL_320;
      }
    }
    v190 = 1;
  }
LABEL_320:
  v195 = v16 + v174;
  v196 = __CFADD__(v16, v174);
  if (!v189 && !v173 && !v196)
  {
    v197 = v195 + v190;
    if (!__CFADD__(v195, v190) && v197 <= 0x10000)
    {
      v368 = 0uLL;
      if (v197)
      {
        v198 = WTF::fastMalloc((WTF *)(16 * v197));
        DWORD2(v368) = v197;
        *(_QWORD *)&v368 = v198;
      }
      if (v174)
      {
        if (!*(_BYTE *)(v15 + 12))
          goto LABEL_549;
        v199 = 0;
        v200 = *(float *)(v15 + 8);
        v201 = v61;
        do
        {
          v202 = HIDWORD(v357);
          if (v201 >= HIDWORD(v357))
          {
            __break(0xC471u);
            JUMPOUT(0x1964EDA68);
          }
          v203 = v357;
          v204 = *(_QWORD *)(v357 + 16 * v201);
          *(_QWORD *)&v361 = v204;
          if ((v204 & 0x8000000000000) != 0)
          {
            v217 = (unsigned int *)(v204 & 0xFFFFFFFFFFFFLL);
            do
              v218 = __ldaxr(v217);
            while (__stlxr(v218 + 1, v217));
          }
          v205 = v203 + 16 * v201;
          v207 = *(_QWORD *)(v205 + 8);
          v206 = v205 + 8;
          *((_QWORD *)&v361 + 1) = __PAIR64__(HIDWORD(v207), LODWORD(v200));
          BYTE12(v361) = 1;
          v208 = HIDWORD(v368);
          if (HIDWORD(v368) == DWORD2(v368))
          {
            v210 = v368;
            v208 = HIDWORD(v368);
            v211 = *v209;
            *(_QWORD *)(v368 + 16 * HIDWORD(v368)) = *v209;
            if ((v211 & 0x8000000000000) != 0)
            {
              v219 = (unsigned int *)(v211 & 0xFFFFFFFFFFFFLL);
              do
                v220 = __ldaxr(v219);
              while (__stlxr(v220 + 1, v219));
            }
            v212 = (_QWORD *)(v210 + 16 * v208 + 8);
            v213 = v209 + 1;
          }
          else
          {
            v214 = v368;
            v215 = v361;
            *(_QWORD *)(v368 + 16 * HIDWORD(v368)) = v361;
            if ((v215 & 0x8000000000000) != 0)
            {
              v221 = (unsigned int *)(v215 & 0xFFFFFFFFFFFFLL);
              do
                v222 = __ldaxr(v221);
              while (__stlxr(v222 + 1, v221));
            }
            v212 = (_QWORD *)(v214 + 16 * v208 + 8);
            v213 = (_QWORD *)&v361 + 1;
          }
          *v212 = *v213;
          HIDWORD(v368) = v208 + 1;
          if (v201)
          {
            if (!*(_BYTE *)(v206 + 4))
              goto LABEL_549;
            if (v201 - 1 >= v202)
            {
              __break(0xC471u);
              JUMPOUT(0x1964EDA90);
            }
            v216 = v203 + 16 * (v201 - 1);
            if (!*(_BYTE *)(v216 + 12))
              goto LABEL_549;
            v200 = v200 - (float)(*(float *)v206 - *(float *)(v216 + 8));
          }
          if ((v361 & 0x8000000000000) != 0)
          {
            v223 = (unsigned int *)(v361 & 0xFFFFFFFFFFFFLL);
            do
            {
              v224 = __ldaxr(v223);
              v225 = v224 - 1;
            }
            while (__stlxr(v225, v223));
            if (!v225)
            {
              atomic_store(1u, v223);
              WTF::fastFree((WTF *)v223, (void *)a2);
            }
          }
          v201 = (v16 - 1 + v201) % v16;
          ++v199;
        }
        while (v199 != v174);
        v226 = HIDWORD(v368);
        if (HIDWORD(v368) >= 2)
        {
          v227 = 0;
          v228 = (uint64_t *)v368;
          v229 = (unint64_t)HIDWORD(v368) >> 1;
          v230 = (HIDWORD(v368) - 1);
          v231 = (uint64_t *)(v368 + 16 * v230);
          do
          {
            if (v227 >= v226)
            {
              __break(0xC471u);
              JUMPOUT(0x1964EDAB0);
            }
            if (v230 >= v226)
            {
              __break(0xC471u);
              JUMPOUT(0x1964EDAB8);
            }
            v232 = *v228;
            if (*v228)
              *v228 = 0;
            v233 = v228[1];
            if (*v231)
            {
              *v228 = *v231;
              *v231 = 0;
            }
            v234 = *((_DWORD *)v231 + 2);
            *((_BYTE *)v228 + 12) = *((_BYTE *)v231 + 12);
            *((_DWORD *)v228 + 2) = v234;
            if (v232)
              *v231 = v232;
            ++v227;
            *((_DWORD *)v231 + 2) = v233;
            *((_BYTE *)v231 + 12) = BYTE4(v233);
            v231 -= 2;
            --v230;
            v228 += 2;
          }
          while (v227 < v229);
        }
      }
      else
      {
        LODWORD(v226) = 0;
      }
      v235 = (WTF *)v357;
      v236 = HIDWORD(v357);
      if (HIDWORD(v357))
      {
        v237 = HIDWORD(v357) + (unint64_t)v226;
        if (v237 <= DWORD2(v368))
        {
          v226 = v226;
        }
        else
        {
          v226 = HIDWORD(v368);
          if (v237 < HIDWORD(v368))
          {
            __break(0xC471u);
            goto LABEL_593;
          }
        }
        v238 = (_QWORD *)(v368 + 16 * v226);
        v239 = v235;
        do
        {
          v240 = *(_QWORD *)v239;
          *v238 = *(_QWORD *)v239;
          if ((v240 & 0x8000000000000) != 0)
          {
            v241 = (unsigned int *)(v240 & 0xFFFFFFFFFFFFLL);
            do
              v242 = __ldaxr(v241);
            while (__stlxr(v242 + 1, v241));
          }
          v238[1] = *((_QWORD *)v239 + 1);
          v238 += 2;
          v239 = (WTF *)((char *)v239 + 16);
        }
        while (v239 != (WTF *)((char *)v235 + 16 * v236));
        HIDWORD(v368) = v237;
        if (v190)
        {
          v243 = (float *)((char *)v235 + 16 * v236);
          if (!*((_BYTE *)v243 - 4))
            goto LABEL_549;
          v244 = 0;
          v245 = 0;
          v246 = *(v243 - 2);
          do
          {
            v247 = HIDWORD(v357);
            if (v244 >= HIDWORD(v357))
            {
              __break(0xC471u);
              JUMPOUT(0x1964EDA98);
            }
            v248 = v357;
            v249 = *(_QWORD *)(v357 + 16 * v244);
            *(_QWORD *)&v361 = v249;
            if ((v249 & 0x8000000000000) != 0)
            {
              v263 = (unsigned int *)(v249 & 0xFFFFFFFFFFFFLL);
              do
                v264 = __ldaxr(v263);
              while (__stlxr(v264 + 1, v263));
            }
            v250 = v248 + 16 * v244;
            v252 = *(_QWORD *)(v250 + 8);
            v251 = v250 + 8;
            *((_QWORD *)&v361 + 1) = __PAIR64__(HIDWORD(v252), LODWORD(v246));
            BYTE12(v361) = 1;
            v253 = HIDWORD(v368);
            if (HIDWORD(v368) == DWORD2(v368))
            {
              v255 = v368;
              v253 = HIDWORD(v368);
              v256 = *v254;
              *(_QWORD *)(v368 + 16 * HIDWORD(v368)) = *v254;
              if ((v256 & 0x8000000000000) != 0)
              {
                v265 = (unsigned int *)(v256 & 0xFFFFFFFFFFFFLL);
                do
                  v266 = __ldaxr(v265);
                while (__stlxr(v266 + 1, v265));
              }
              v257 = (_QWORD *)(v255 + 16 * v253 + 8);
              v258 = v254 + 1;
            }
            else
            {
              v259 = v368;
              v260 = v361;
              *(_QWORD *)(v368 + 16 * HIDWORD(v368)) = v361;
              if ((v260 & 0x8000000000000) != 0)
              {
                v267 = (unsigned int *)(v260 & 0xFFFFFFFFFFFFLL);
                do
                  v268 = __ldaxr(v267);
                while (__stlxr(v268 + 1, v267));
              }
              v257 = (_QWORD *)(v259 + 16 * v253 + 8);
              v258 = (_QWORD *)&v361 + 1;
            }
            *v257 = *v258;
            HIDWORD(v368) = v253 + 1;
            v261 = v244 + 1;
            if (v244 < v61)
            {
              if (v261 >= v247)
              {
                __break(0xC471u);
                JUMPOUT(0x1964EDB24);
              }
              v262 = v248 + 16 * v261;
              if (!*(_BYTE *)(v262 + 12) || !*(_BYTE *)(v251 + 4))
                goto LABEL_549;
              v246 = v246 + (float)(*(float *)(v262 + 8) - *(float *)v251);
            }
            if (v261 == v16)
              v244 = 0;
            else
              ++v244;
            if ((v361 & 0x8000000000000) != 0)
            {
              v269 = (unsigned int *)(v361 & 0xFFFFFFFFFFFFLL);
              do
              {
                v270 = __ldaxr(v269);
                v271 = v270 - 1;
              }
              while (__stlxr(v271, v269));
              if (!v271)
              {
                atomic_store(1u, v269);
                WTF::fastFree((WTF *)v269, (void *)a2);
              }
            }
            ++v245;
          }
          while (v245 != v190);
          LODWORD(v236) = HIDWORD(v357);
          v235 = (WTF *)v357;
        }
        if ((_DWORD)v236)
        {
          v272 = (WTF *)((char *)v235 + 16 * v236);
          do
          {
            if ((*(_QWORD *)v235 & 0x8000000000000) != 0)
            {
              v273 = (unsigned int *)(*(_QWORD *)v235 & 0xFFFFFFFFFFFFLL);
              do
              {
                v274 = __ldaxr(v273);
                v275 = v274 - 1;
              }
              while (__stlxr(v275, v273));
              if (!v275)
              {
                atomic_store(1u, v273);
                WTF::fastFree((WTF *)v273, (void *)a2);
              }
            }
            v235 = (WTF *)((char *)v235 + 16);
          }
          while (v235 != v272);
          v235 = (WTF *)v357;
        }
      }
      else if (v190)
      {
        __break(0xC471u);
        JUMPOUT(0x1964ED1B4);
      }
      if (v235)
      {
        *(_QWORD *)&v357 = 0;
        DWORD2(v357) = 0;
        WTF::fastFree(v235, (void *)a2);
      }
      v357 = v368;
      v16 = HIDWORD(v368);
    }
  }
LABEL_434:
  if (v16 <= 1)
  {
    v8 = (unint64_t)&qword_19688B000;
LABEL_440:
    v351 = &v353;
    v352 = *(_QWORD *)(v8 + 552);
    goto LABEL_496;
  }
  v15 = v357;
  v8 = 0x19688B000;
  if (!*(_BYTE *)(v357 + 12))
    goto LABEL_549;
LABEL_436:
  v276 = v16 - 1;
  if (*(float *)(v15 + 8) >= 0.0)
  {
    v281 = v15 + 16 * v276;
    if (!*(_BYTE *)(v281 + 12))
      goto LABEL_549;
    v280 = *(float *)(v281 + 8);
    if (v280 <= 1.0)
      goto LABEL_495;
    v278 = *(_QWORD *)(v347 + 168);
    v279 = *(_DWORD *)(v347 + 176);
  }
  else
  {
    v277 = v15 + 16 * v276;
    if (!*(_BYTE *)(v277 + 12))
      goto LABEL_549;
    v278 = *(_QWORD *)(v347 + 168);
    v279 = *(_DWORD *)(v347 + 176);
    v280 = *(float *)(v277 + 8);
  }
  v12 = 0;
  v282 = (float *)(v15 + 12);
  do
  {
    if (!*(_BYTE *)v282)
      goto LABEL_549;
    if (*(v282 - 1) >= 0.0)
      goto LABEL_449;
    ++v12;
    v282 += 4;
  }
  while (v16 != v12);
  v12 = v16;
LABEL_449:
  if (!v12)
    goto LABEL_491;
  if (v12 >= v16)
    goto LABEL_486;
  v283 = v15 + 16 * v12;
  if (!*(_BYTE *)(v283 + 12))
    goto LABEL_549;
  v284 = *(float *)(v283 + 8);
  if (v284 <= 0.0)
  {
LABEL_486:
    v305 = 0;
    do
    {
      if (16 * v16 == v305)
      {
        __break(0xC471u);
        JUMPOUT(0x1964EDA10);
      }
      v306 = v15 + v305;
      if (!*(_BYTE *)(v15 + v305 + 12))
        *(_BYTE *)(v306 + 12) = 1;
      *(_DWORD *)(v306 + 8) = 0;
      v305 += 16;
      --v12;
    }
    while (v12);
LABEL_491:
    v307 = 16 * v16;
    v308 = v15 + 8;
    while (*(_BYTE *)(v308 + 4))
    {
      *(float *)v308 = *(float *)v308 / v280;
      v308 += 16;
      v307 -= 16;
      if (!v307)
        goto LABEL_494;
    }
    goto LABEL_549;
  }
  v285 = v12 - 1;
  if (v12 - 1 >= v16)
  {
    __break(0xC471u);
    JUMPOUT(0x1964EDBB4);
  }
  v286 = v15 + 16 * v285;
  if (!*(_BYTE *)(v286 + 12))
    goto LABEL_549;
  *(float *)&v350 = v280;
  v287 = *(float *)(v286 + 8);
  v288 = *(_QWORD *)(v15 + 16 * v285);
  v359 = v288;
  if ((v288 & 0x8000000000000) != 0)
    goto LABEL_536;
  while (1)
  {
    v289 = (float)-v287 / (float)(v284 - v287);
    v290 = *(_QWORD *)(v15 + 16 * v12);
    v358 = v290;
    if ((v290 & 0x8000000000000) != 0)
    {
      v329 = (unsigned int *)(v290 & 0xFFFFFFFFFFFFLL);
      do
        v330 = __ldaxr(v329);
      while (__stlxr(v330 + 1, v329));
    }
    *(_QWORD *)&v361 = v278;
    DWORD2(v361) = v279;
    v366 = v289;
    v367 = (float)(1.0 - v289);
    *(_QWORD *)&v368 = &v361;
    *((_QWORD *)&v368 + 1) = &v359;
    v369 = &v367;
    v370 = &v358;
    v371 = &v366;
    v291 = HIDWORD(v278);
    if (v291 != 0xFFFFFFFF)
      break;
LABEL_535:
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_536:
    v327 = (unsigned int *)(v288 & 0xFFFFFFFFFFFFLL);
    do
      v328 = __ldaxr(v327);
    while (__stlxr(v328 + 1, v327));
  }
  *(_QWORD *)&v365 = &v368;
  ((void (*)(double *__return_ptr, __int128 *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore17interpolateColorsENS8_24ColorInterpolationMethodENS8_5ColorEdSA_dE3__0JEEEEEJRNS0_6__implIJNS9_3HSLENS9_3HWBENS9_3LCHENS9_3LabENS9_5OKLCHENS9_5OKLabENS9_4SRGBENS9_10SRGBLinearENS9_9DisplayP3ENS9_6A98RGBENS9_11ProPhotoRGBENS9_7Rec2020ENS9_6XYZD50ENS9_6XYZD65EEEEEEEDcOT_DpOT0____fmatrix[v291])(&v360, &v365, &v361);
  if ((v358 & 0x8000000000000) != 0)
  {
    v335 = (unsigned int *)(v358 & 0xFFFFFFFFFFFFLL);
    do
    {
      v336 = __ldaxr(v335);
      v337 = v336 - 1;
    }
    while (__stlxr(v337, v335));
    if (!v337)
    {
      atomic_store(1u, v335);
      WTF::fastFree((WTF *)v335, (void *)a2);
    }
  }
  v280 = *(float *)&v350;
  if ((v359 & 0x8000000000000) != 0)
  {
    v338 = (unsigned int *)(v359 & 0xFFFFFFFFFFFFLL);
    do
    {
      v339 = __ldaxr(v338);
      v340 = v339 - 1;
    }
    while (__stlxr(v340, v338));
    v280 = *(float *)&v350;
    if (!v340)
    {
      atomic_store(1u, v338);
      WTF::fastFree((WTF *)v338, (void *)a2);
      v280 = *(float *)&v350;
    }
  }
  v292 = 0;
  v293 = v357;
  v294 = HIDWORD(v357);
  while (2)
  {
    if (v292 == v294)
    {
      __break(0xC471u);
      JUMPOUT(0x1964EDA60);
    }
    v295 = v293 + 16 * v292;
    if (!*(_BYTE *)(v295 + 12))
      *(_BYTE *)(v295 + 12) = 1;
    *(_DWORD *)(v295 + 8) = 0;
    v296 = *(double *)v295;
    if ((*(_QWORD *)v295 & 0x8000000000000) != 0)
    {
      if ((*(_QWORD *)&v360 & 0x8000000000000) == 0)
        goto LABEL_469;
      v368 = *(_OWORD *)((*(_QWORD *)&v296 & 0xFFFFFFFFFFFFLL) + 4);
      v361 = *(_OWORD *)((*(_QWORD *)&v360 & 0xFFFFFFFFFFFFLL) + 4);
      v304 = WebCore::operator==<float,4ul>((float *)&v368, (float *)&v361);
      v296 = *(double *)v295;
      if (!v304 || HIBYTE(*(_QWORD *)&v296) != HIBYTE(*(_QWORD *)&v360))
      {
        v280 = *(float *)&v350;
        goto LABEL_469;
      }
      v280 = *(float *)&v350;
      if (BYTE6(v296) != BYTE6(v360))
        goto LABEL_469;
    }
    else if (*(_QWORD *)&v296 != *(_QWORD *)&v360 || (*(_QWORD *)&v360 & 0x8000000000000) != 0)
    {
LABEL_469:
      if ((*(_QWORD *)&v296 & 0x8000000000000) != 0)
      {
        v301 = (unsigned int *)(*(_QWORD *)&v296 & 0xFFFFFFFFFFFFLL);
        do
        {
          v302 = __ldaxr(v301);
          v303 = v302 - 1;
        }
        while (__stlxr(v303, v301));
        v280 = *(float *)&v350;
        if (!v303)
        {
          atomic_store(1u, v301);
          WTF::fastFree((WTF *)v301, (void *)a2);
          v280 = *(float *)&v350;
        }
      }
      v298 = v360;
      *(double *)v295 = v360;
      if ((*(_QWORD *)&v298 & 0x8000000000000) != 0)
      {
        v299 = (unsigned int *)(*(_QWORD *)&v298 & 0xFFFFFFFFFFFFLL);
        do
          v300 = __ldaxr(v299);
        while (__stlxr(v300 + 1, v299));
      }
    }
    if (++v292 != v12)
      continue;
    break;
  }
  if ((*(_QWORD *)&v360 & 0x8000000000000) != 0)
  {
    v341 = (unsigned int *)(*(_QWORD *)&v360 & 0xFFFFFFFFFFFFLL);
    do
    {
      v342 = __ldaxr(v341);
      v343 = v342 - 1;
    }
    while (__stlxr(v343, v341));
    v280 = *(float *)&v350;
    if (!v343)
    {
      atomic_store(1u, v341);
      WTF::fastFree((WTF *)v341, (void *)a2);
      v280 = *(float *)&v350;
    }
  }
  v15 = v357;
  v16 = HIDWORD(v357);
  if (HIDWORD(v357))
    goto LABEL_491;
LABEL_494:
  (*a3)[2] = vmul_n_f32((*a3)[2], v280);
LABEL_495:
  v351 = &v353;
  v352 = *(_QWORD *)(v8 + 552);
  if (v16 >= 3)
  {
    if (!(v16 >> 28))
    {
      LODWORD(v352) = v16;
      v351 = (uint64_t *)WTF::fastMalloc((WTF *)(16 * v16));
      goto LABEL_497;
    }
    __break(0xC471u);
LABEL_593:
    JUMPOUT(0x1964ED1A8);
  }
LABEL_496:
  if (v16)
  {
LABEL_497:
    v309 = 0;
    v310 = a1;
    do
    {
      v311 = v357 + 16 * v309;
      if (!*(_BYTE *)(v311 + 12))
        goto LABEL_549;
      v312 = *(_DWORD *)(v311 + 8);
      v313 = *(_QWORD *)v311;
      if ((v313 & 0x8000000000000) != 0)
      {
        v315 = (unsigned int *)(v313 & 0xFFFFFFFFFFFFLL);
        do
          v316 = __ldaxr(v315);
        while (__stlxr(v316 + 1, v315));
      }
      v314 = &v351[2 * HIDWORD(v352)];
      *(_DWORD *)v314 = v312;
      v314[1] = v313;
      ++HIDWORD(v352);
      ++v309;
    }
    while (v309 < HIDWORD(v357));
    *a1 = (uint64_t *)(a1 + 2);
    a1[1] = *(uint64_t **)(v8 + 552);
    if (v351 == &v353)
    {
      if (HIDWORD(v352))
      {
        v317 = (uint64_t *)(a1 + 3);
        v318 = 16 * HIDWORD(v352);
        v319 = &v354;
        do
        {
          *((_DWORD *)v317 - 2) = *((_DWORD *)v319 - 2);
          *v317 = 0;
          if (*v319)
          {
            *v317 = *v319;
            *v319 = 0;
          }
          v317 += 2;
          v319 += 2;
          v318 -= 16;
        }
        while (v318);
      }
    }
    else
    {
      *a1 = v351;
      *((_DWORD *)a1 + 2) = v352;
    }
  }
  else
  {
    v310 = a1;
    *a1 = (uint64_t *)(a1 + 2);
    a1[1] = *(uint64_t **)(v8 + 552);
  }
  *((_DWORD *)v310 + 3) = HIDWORD(v352);
  *((_BYTE *)v310 + 48) = 1;
  v320 = (WTF *)v357;
  if (HIDWORD(v357))
  {
    v321 = v357 + 16 * HIDWORD(v357);
    do
    {
      if ((*(_QWORD *)v320 & 0x8000000000000) != 0)
      {
        v322 = (unsigned int *)(*(_QWORD *)v320 & 0xFFFFFFFFFFFFLL);
        do
        {
          v323 = __ldaxr(v322);
          v324 = v323 - 1;
        }
        while (__stlxr(v324, v322));
        if (!v324)
        {
          atomic_store(1u, v322);
          WTF::fastFree((WTF *)v322, (void *)a2);
        }
      }
      v320 = (WTF *)((char *)v320 + 16);
    }
    while (v320 != (WTF *)v321);
    v320 = (WTF *)v357;
  }
  if (v320)
    WTF::fastFree(v320, (void *)a2);
}

uint64_t WebCore::StyleGridData::setRows(uint64_t a1, uint64_t *a2)
{
  unsigned int *v3;
  uint64_t v4;

  v3 = (unsigned int *)(a1 + 104);
  v4 = WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 104, a2);
  return WebCore::StyleGridData::computeCachedTrackData(v4, v3, (int *)(a1 + 136), (uint64_t *)(a1 + 160), (uint64_t *)(a1 + 176), (int *)(a1 + 232), (uint64_t *)(a1 + 192), (uint64_t *)(a1 + 208), (_DWORD *)(a1 + 252), (_BYTE *)(a1 + 257), (_BYTE *)(a1 + 258), a1 + 260);
}

uint64_t WebCore::StyleGridData::computeCachedTrackData(uint64_t a1, unsigned int *a2, int *a3, uint64_t *a4, uint64_t *a5, int *a6, uint64_t *a7, uint64_t *a8, _DWORD *a9, _BYTE *a10, _BYTE *a11, uint64_t a12)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  WTF *v27;
  WTF *v28;
  uint64_t v29;
  _QWORD v30[21];
  uint64_t v31;
  _QWORD *v32;

  if (a3[2])
  {
    if (a3[3])
      WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a3);
    v27 = *(WTF **)a3;
    if (*(_QWORD *)a3)
    {
      *(_QWORD *)a3 = 0;
      a3[2] = 0;
      WTF::fastFree(v27, a2);
    }
  }
  v19 = *a4;
  if (*a4)
  {
    *a4 = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v19, a2);
  }
  v20 = *a5;
  if (*a5)
  {
    *a5 = 0;
    WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::deallocateTable(v20, (WTF::StringImpl *)a2);
  }
  if (a6[2])
  {
    if (a6[3])
      WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a6);
    v28 = *(WTF **)a6;
    if (*(_QWORD *)a6)
    {
      *(_QWORD *)a6 = 0;
      a6[2] = 0;
      WTF::fastFree(v28, a2);
    }
  }
  v21 = *a7;
  if (*a7)
  {
    *a7 = 0;
    WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<WebCore::CharacterRange,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::deallocateTable(v21, a2);
  }
  result = *a8;
  if (*a8)
  {
    *a8 = 0;
    result = WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::deallocateTable(result, (WTF::StringImpl *)a2);
  }
  *a9 = 0;
  *a10 = 0;
  *a11 = 0;
  v23 = a2[3];
  if ((_DWORD)v23)
  {
    v31 = 0;
    v30[0] = (char *)&v31 + 4;
    v30[1] = a3;
    v30[2] = (char *)&v31 + 4;
    v30[3] = a4;
    v30[4] = a5;
    v30[5] = a11;
    v30[6] = (char *)&v31 + 4;
    v30[7] = a4;
    v30[8] = a5;
    v30[9] = a11;
    v30[10] = a3;
    v30[11] = &v31;
    v30[12] = a10;
    v30[13] = a7;
    v30[14] = a8;
    v30[15] = a11;
    v30[16] = a6;
    v30[17] = a9;
    v30[18] = (char *)&v31 + 4;
    v30[19] = a11;
    v24 = 96 * v23;
    v30[20] = a12;
    for (i = *(_QWORD *)a2; ; i += 96)
    {
      v26 = *(unsigned int *)(i + 88);
      if ((_DWORD)v26 == -1)
        break;
      v32 = v30;
      result = ((uint64_t (*)(_QWORD **, uint64_t))off_1E3442708[v26])(&v32, i);
      v24 -= 96;
      if (!v24)
        return result;
    }
    v29 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::StyleGridData::setColumns(v29);
  }
  return result;
}

uint64_t WebCore::StyleGridData::setColumns(uint64_t a1, uint64_t *a2)
{
  unsigned int *v3;
  uint64_t v4;

  v3 = (unsigned int *)(a1 + 88);
  v4 = WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a1 + 88, a2);
  return WebCore::StyleGridData::computeCachedTrackData(v4, v3, (int *)(a1 + 120), (uint64_t *)(a1 + 152), (uint64_t *)(a1 + 168), (int *)(a1 + 216), (uint64_t *)(a1 + 184), (uint64_t *)(a1 + 200), (_DWORD *)(a1 + 248), (_BYTE *)(a1 + 256), (_BYTE *)(a1 + 259), a1 + 261);
}

uint64_t WTF::HashTable<WebCore::FloatSize,WTF::KeyValuePair<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>>,WTF::DefaultHash<WebCore::FloatSize>,WTF::HashMap<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>,WTF::DefaultHash<WebCore::FloatSize>,WTF::HashTraits<WebCore::FloatSize>,WTF::HashTraits<std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::FloatSize>>::deallocateTable(uint64_t a1, void *a2)
{
  uint64_t v3;
  float *v4;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  _DWORD *v9;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    v4 = (float *)(a1 + 8);
    do
    {
      if (*(v4 - 2) != -1.0 || *(v4 - 1) != -1.0)
      {
        v6 = *(_QWORD **)v4;
        *(_QWORD *)v4 = 0;
        if (v6)
        {
          v6[3] = off_1E33DC988;
          v7 = v6[9];
          v6[9] = 0;
          if (v7)
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
          WebCore::TimerBase::~TimerBase((WebCore::TimerBase *)(v6 + 3));
          v9 = (_DWORD *)v6[2];
          v6[2] = 0;
          if (v9)
          {
            if (v9[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
            else
              --v9[2];
          }
          WTF::fastFree((WTF *)v6, v8);
        }
      }
      v4 += 4;
      --v3;
    }
    while (v3);
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WTF::Detail::CallableWrapper<std::__bind<void (WebCore::StyleGeneratedImage::CachedGeneratedImage::*&)(void),WebCore::StyleGeneratedImage::CachedGeneratedImage*>,void>::call(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleGradientImage10LinearDataENS9_20DeprecatedLinearDataENS9_18PrefixedLinearDataENS9_10RadialDataENS9_20DeprecatedRadialDataENS9_18PrefixedRadialDataENS9_9ConicDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSA_SB_SC_SD_SE_SF_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  uint64_t v4;

  result = *(__n128 *)a3;
  *(_OWORD *)(a2 + 9) = *(_OWORD *)(a3 + 9);
  *(__n128 *)a2 = result;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v4 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a2 + 32) = v4;
  LODWORD(v4) = *(_DWORD *)(a3 + 40);
  *(_DWORD *)(a3 + 40) = 0;
  *(_DWORD *)(a2 + 40) = v4;
  LODWORD(v4) = *(_DWORD *)(a3 + 44);
  *(_DWORD *)(a3 + 44) = 0;
  *(_DWORD *)(a2 + 44) = v4;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleGradientImage10LinearDataENS9_20DeprecatedLinearDataENS9_18PrefixedLinearDataENS9_10RadialDataENS9_20DeprecatedRadialDataENS9_18PrefixedRadialDataENS9_9ConicDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSA_SB_SC_SD_SE_SF_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  v5 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 48) = v5;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v6 = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a2 + 64) = v6;
  LODWORD(v6) = *(_DWORD *)(a3 + 72);
  *(_DWORD *)(a3 + 72) = 0;
  *(_DWORD *)(a2 + 72) = v6;
  LODWORD(v6) = *(_DWORD *)(a3 + 76);
  *(_DWORD *)(a3 + 76) = 0;
  *(_DWORD *)(a2 + 76) = v6;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleGradientImage10LinearDataENS9_20DeprecatedLinearDataENS9_18PrefixedLinearDataENS9_10RadialDataENS9_20DeprecatedRadialDataENS9_18PrefixedRadialDataENS9_9ConicDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSA_SB_SC_SD_SE_SF_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  uint64_t v4;

  result = *(__n128 *)a3;
  *(_OWORD *)(a2 + 9) = *(_OWORD *)(a3 + 9);
  *(__n128 *)a2 = result;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v4 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a2 + 32) = v4;
  LODWORD(v4) = *(_DWORD *)(a3 + 40);
  *(_DWORD *)(a3 + 40) = 0;
  *(_DWORD *)(a2 + 40) = v4;
  LODWORD(v4) = *(_DWORD *)(a3 + 44);
  *(_DWORD *)(a3 + 44) = 0;
  *(_DWORD *)(a2 + 44) = v4;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleGradientImage10LinearDataENS9_20DeprecatedLinearDataENS9_18PrefixedLinearDataENS9_10RadialDataENS9_20DeprecatedRadialDataENS9_18PrefixedRadialDataENS9_9ConicDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSA_SB_SC_SD_SE_SF_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;

  *(_BYTE *)a2 = 0;
  *(_DWORD *)(a2 + 36) = -1;
  v5 = *(unsigned int *)(a3 + 36);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E3442418[v5])(&v8, a2, a3);
    *(_DWORD *)(a2 + 36) = v5;
  }
  *(_BYTE *)(a2 + 40) = *(_BYTE *)(a3 + 40);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v7 = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a2 + 48) = v7;
  LODWORD(v7) = *(_DWORD *)(a3 + 56);
  *(_DWORD *)(a3 + 56) = 0;
  *(_DWORD *)(a2 + 56) = v7;
  LODWORD(v7) = *(_DWORD *)(a3 + 60);
  *(_DWORD *)(a3 + 60) = 0;
  *(_DWORD *)(a2 + 60) = v7;
  return result;
}

__n128 _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleGradientImage10LinearDataENS9_20DeprecatedLinearDataENS9_18PrefixedLinearDataENS9_10RadialDataENS9_20DeprecatedRadialDataENS9_18PrefixedRadialDataENS9_9ConicDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSA_SB_SC_SD_SE_SF_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  *(_OWORD *)a2 = *(_OWORD *)a3;
  result = *(__n128 *)(a3 + 16);
  v4 = *(_OWORD *)(a3 + 48);
  v5 = *(_QWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 48) = v4;
  *(__n128 *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 64) = v5;
  v6 = *(_QWORD *)(a3 + 72);
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a2 + 72) = v6;
  LODWORD(v6) = *(_DWORD *)(a3 + 80);
  *(_DWORD *)(a3 + 80) = 0;
  *(_DWORD *)(a2 + 80) = v6;
  LODWORD(v6) = *(_DWORD *)(a3 + 84);
  *(_DWORD *)(a3 + 84) = 0;
  *(_DWORD *)(a2 + 84) = v6;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleGradientImage10LinearDataENS9_20DeprecatedLinearDataENS9_18PrefixedLinearDataENS9_10RadialDataENS9_20DeprecatedRadialDataENS9_18PrefixedRadialDataENS9_9ConicDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSA_SB_SC_SD_SE_SF_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return WebCore::StyleGradientImage::PrefixedRadialData::PrefixedRadialData(a2, a3);
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm6ELm6EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN7WebCore18StyleGradientImage10LinearDataENS9_20DeprecatedLinearDataENS9_18PrefixedLinearDataENS9_10RadialDataENS9_20DeprecatedRadialDataENS9_18PrefixedRadialDataENS9_9ConicDataEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISH_LNS0_6_TraitE1EEEEEvRSI_OT_EUlRSO_OT0_E_JRNS0_6__baseILSL_1EJSA_SB_SC_SD_SE_SF_SG_EEEOSW_EEEDcSO_DpT0_(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;

  v3 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 40) = 0;
  if (*((_BYTE *)a3 + 40))
  {
    *(_DWORD *)(a2 + 24) = 0;
    *(_WORD *)(a2 + 29) = 0;
    v4 = *((unsigned __int8 *)a3 + 28);
    *(_BYTE *)(a2 + 28) = v4;
    *(_BYTE *)(a2 + 29) = *((_BYTE *)a3 + 29);
    if (v4 - 2 < 9)
    {
      v5 = *((unsigned __int8 *)a3 + 30);
      *(_BYTE *)(a2 + 30) = v5;
      if (v5)
      {
        *(_DWORD *)(a2 + 24) = *((_DWORD *)a3 + 6);
        goto LABEL_5;
      }
      v9 = *((_DWORD *)a3 + 6);
      goto LABEL_11;
    }
    if (v4 <= 0xD)
    {
      if (((1 << v4) & 0x3003) != 0)
      {
        *(_DWORD *)(a2 + 24) = 0;
      }
      else if (v4 == 11)
      {
        v9 = *((_DWORD *)a3 + 6);
        *((_DWORD *)a3 + 6) = 0;
LABEL_11:
        *(_DWORD *)(a2 + 24) = v9;
      }
    }
LABEL_5:
    *((_BYTE *)a3 + 28) = 0;
    *(_DWORD *)(a2 + 32) = 0;
    *(_WORD *)(a2 + 37) = 0;
    v6 = *((unsigned __int8 *)a3 + 36);
    *(_BYTE *)(a2 + 36) = v6;
    *(_BYTE *)(a2 + 37) = *((_BYTE *)a3 + 37);
    if (v6 - 2 >= 9)
    {
      if (v6 > 0xD)
        goto LABEL_8;
      if (((1 << v6) & 0x3003) != 0)
      {
        *(_DWORD *)(a2 + 32) = 0;
        goto LABEL_8;
      }
      if (v6 != 11)
        goto LABEL_8;
      v10 = *((_DWORD *)a3 + 8);
      *((_DWORD *)a3 + 8) = 0;
    }
    else
    {
      v7 = *((unsigned __int8 *)a3 + 38);
      *(_BYTE *)(a2 + 38) = v7;
      if (v7)
      {
        *(_DWORD *)(a2 + 32) = *((_DWORD *)a3 + 8);
LABEL_8:
        *((_BYTE *)a3 + 36) = 0;
        *(_BYTE *)(a2 + 40) = 1;
        goto LABEL_9;
      }
      v10 = *((_DWORD *)a3 + 8);
    }
    *(_DWORD *)(a2 + 32) = v10;
    goto LABEL_8;
  }
LABEL_9:
  *(_BYTE *)(a2 + 44) = *((_BYTE *)a3 + 44);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v8 = *((_QWORD *)a3 + 6);
  *((_QWORD *)a3 + 6) = 0;
  *(_QWORD *)(a2 + 48) = v8;
  LODWORD(v8) = *((_DWORD *)a3 + 14);
  *((_DWORD *)a3 + 14) = 0;
  *(_DWORD *)(a2 + 56) = v8;
  LODWORD(v8) = *((_DWORD *)a3 + 15);
  *((_DWORD *)a3 + 15) = 0;
  *(_DWORD *)(a2 + 60) = v8;
}

uint64_t WTF::switchOn<std::variant<WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&,WebCore::stopsAreCacheable(std::variant<WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&)::$_0>(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  char *v5;

  v1 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v1 == -1)
  {
    v3 = std::__throw_bad_variant_access[abi:sn180100]();
    return std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::stopsAreCacheable(std::variant<WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(v3);
  }
  else
  {
    v5 = &v4;
    return ((uint64_t (*)(char **, uint64_t))off_1E3442468[v1])(&v5, a1 + 8);
  }
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::stopsAreCacheable(std::variant<WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  _QWORD v9[4];
  _QWORD *v10;

  v2 = *(unsigned int *)(a2 + 44);
  if (!(_DWORD)v2)
    return 1;
  v3 = *(_QWORD *)(a2 + 32);
  v4 = 40 * v2;
  while (1)
  {
    if (!*(_BYTE *)(v3 + 16))
      goto LABEL_6;
    v9[0] = &v8;
    v9[1] = &v8;
    v9[2] = &v8;
    v9[3] = &v8;
    v5 = *(unsigned int *)(v3 + 8);
    if ((_DWORD)v5 == -1)
      break;
    v10 = v9;
    if ((((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v5])(&v10, v3) & 1) != 0)return 0;
LABEL_6:
    v3 += 40;
    v4 -= 40;
    if (!v4)
      return 1;
  }
  v7 = std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::stopsAreCacheable(std::variant<WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(v7);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::stopsAreCacheable(std::variant<WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  _QWORD v9[4];
  _QWORD *v10;

  v2 = *(unsigned int *)(a2 + 76);
  if (!(_DWORD)v2)
    return 1;
  v3 = *(_QWORD *)(a2 + 64);
  v4 = 40 * v2;
  while (1)
  {
    if (!*(_BYTE *)(v3 + 16))
      goto LABEL_6;
    v9[0] = &v8;
    v9[1] = &v8;
    v9[2] = &v8;
    v9[3] = &v8;
    v5 = *(unsigned int *)(v3 + 8);
    if ((_DWORD)v5 == -1)
      break;
    v10 = v9;
    if ((((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v5])(&v10, v3) & 1) != 0)return 0;
LABEL_6:
    v3 += 40;
    v4 -= 40;
    if (!v4)
      return 1;
  }
  v7 = std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::stopsAreCacheable(std::variant<WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(v7);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::stopsAreCacheable(std::variant<WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  _QWORD v9[4];
  _QWORD *v10;

  v2 = *(unsigned int *)(a2 + 44);
  if (!(_DWORD)v2)
    return 1;
  v3 = *(_QWORD *)(a2 + 32);
  v4 = 40 * v2;
  while (1)
  {
    if (!*(_BYTE *)(v3 + 16))
      goto LABEL_6;
    v9[0] = &v8;
    v9[1] = &v8;
    v9[2] = &v8;
    v9[3] = &v8;
    v5 = *(unsigned int *)(v3 + 8);
    if ((_DWORD)v5 == -1)
      break;
    v10 = v9;
    if ((((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v5])(&v10, v3) & 1) != 0)return 0;
LABEL_6:
    v3 += 40;
    v4 -= 40;
    if (!v4)
      return 1;
  }
  v7 = std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::stopsAreCacheable(std::variant<WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(v7);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::stopsAreCacheable(std::variant<WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  _QWORD v9[4];
  _QWORD *v10;

  v2 = *(unsigned int *)(a2 + 60);
  if (!(_DWORD)v2)
    return 1;
  v3 = *(_QWORD *)(a2 + 48);
  v4 = 40 * v2;
  while (1)
  {
    if (!*(_BYTE *)(v3 + 16))
      goto LABEL_6;
    v9[0] = &v8;
    v9[1] = &v8;
    v9[2] = &v8;
    v9[3] = &v8;
    v5 = *(unsigned int *)(v3 + 8);
    if ((_DWORD)v5 == -1)
      break;
    v10 = v9;
    if ((((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v5])(&v10, v3) & 1) != 0)return 0;
LABEL_6:
    v3 += 40;
    v4 -= 40;
    if (!v4)
      return 1;
  }
  v7 = std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::stopsAreCacheable(std::variant<WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(v7);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::stopsAreCacheable(std::variant<WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  _QWORD v9[4];
  _QWORD *v10;

  v2 = *(unsigned int *)(a2 + 84);
  if (!(_DWORD)v2)
    return 1;
  v3 = *(_QWORD *)(a2 + 72);
  v4 = 40 * v2;
  while (1)
  {
    if (!*(_BYTE *)(v3 + 16))
      goto LABEL_6;
    v9[0] = &v8;
    v9[1] = &v8;
    v9[2] = &v8;
    v9[3] = &v8;
    v5 = *(unsigned int *)(v3 + 8);
    if ((_DWORD)v5 == -1)
      break;
    v10 = v9;
    if ((((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v5])(&v10, v3) & 1) != 0)return 0;
LABEL_6:
    v3 += 40;
    v4 -= 40;
    if (!v4)
      return 1;
  }
  v7 = std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::stopsAreCacheable(std::variant<WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(v7);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::stopsAreCacheable(std::variant<WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  _QWORD v9[4];
  _QWORD *v10;

  v2 = *(unsigned int *)(a2 + 60);
  if (!(_DWORD)v2)
    return 1;
  v3 = *(_QWORD *)(a2 + 48);
  v4 = 40 * v2;
  while (1)
  {
    if (!*(_BYTE *)(v3 + 16))
      goto LABEL_6;
    v9[0] = &v8;
    v9[1] = &v8;
    v9[2] = &v8;
    v9[3] = &v8;
    v5 = *(unsigned int *)(v3 + 8);
    if ((_DWORD)v5 == -1)
      break;
    v10 = v9;
    if ((((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v5])(&v10, v3) & 1) != 0)return 0;
LABEL_6:
    v3 += 40;
    v4 -= 40;
    if (!v4)
      return 1;
  }
  v7 = std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::stopsAreCacheable(std::variant<WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(v7);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::stopsAreCacheable(std::variant<WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  char v8;
  _QWORD v9[4];
  _QWORD *v10;

  v2 = *(unsigned int *)(a2 + 60);
  if (!(_DWORD)v2)
    return 1;
  v3 = *(_QWORD *)(a2 + 48);
  v4 = 48 * v2;
  while (1)
  {
    if (!*(_BYTE *)(v3 + 16))
      goto LABEL_6;
    v9[0] = &v8;
    v9[1] = &v8;
    v9[2] = &v8;
    v9[3] = &v8;
    v5 = *(unsigned int *)(v3 + 8);
    if ((_DWORD)v5 == -1)
      break;
    v10 = v9;
    if ((((uint64_t (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_20containsCurrentColorEvE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSG_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSG_INSJ_INS8_17HSLFunctionModernEEEEENSG_INSJ_INS8_11HWBFunctionEEEEENSG_INSJ_INS8_11LabFunctionEEEEENSG_INSJ_INS8_11LCHFunctionEEEEENSG_INSJ_INS8_13OKLabFunctionEEEEENSG_INSJ_INS8_13OKLCHFunctionEEEEENSG_INSJ_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNS8_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INS8_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEEDpOT_EUlRKSE_E_JZNSA_IJSB_EEESC_S2E_S2H_EUlRKSF_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlRKSI_E_ZNSA_IJSB_EEESC_S2E_S2H_EUlTyRKNSG_INSJ_IT_EEEEE_EEEEEJRKNS0_6__implIJSE_SF_SI_SM_SP_SS_SV_SY_S11_S14_S1B_S1G_S1L_S1Q_S1V_S20_S27_S2B_EEEEEESC_OS2R_DpOT0____fmatrix[v5])(&v10, v3) & 1) != 0)return 0;
LABEL_6:
    v3 += 48;
    v4 -= 48;
    if (!v4)
      return 1;
  }
  v7 = std::__throw_bad_variant_access[abi:sn180100]();
  return std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::DeprecatedLinearData,WebCore::PrefixedLinearData,WebCore::RadialData,WebCore::DeprecatedRadialData,WebCore::PrefixedRadialData,WebCore::ConicData> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::DeprecatedLinearData,WebCore::PrefixedLinearData,WebCore::RadialData,WebCore::DeprecatedRadialData,WebCore::PrefixedRadialData,WebCore::ConicData> const>(v7);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::DeprecatedLinearData,WebCore::PrefixedLinearData,WebCore::RadialData,WebCore::DeprecatedRadialData,WebCore::PrefixedRadialData,WebCore::ConicData> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::DeprecatedLinearData,WebCore::PrefixedLinearData,WebCore::RadialData,WebCore::DeprecatedRadialData,WebCore::PrefixedRadialData,WebCore::ConicData> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  char *v22;

  v5 = *(unsigned int *)(a2 + 16);
  v6 = *(_DWORD *)(a3 + 16);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v22 = &v21;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))off_1E3442548[v5])(&v22, a2, a3) & 1) == 0)
      return 0;
  }
  if ((*(_BYTE *)(a2 + 24) == 0) == (*(_BYTE *)(a3 + 24) != 0))
    return 0;
  v12 = *(unsigned int *)(a2 + 44);
  if ((_DWORD)v12 != *(_DWORD *)(a3 + 44))
    return 0;
  if (!(_DWORD)v12)
    return 1;
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(_QWORD *)(a3 + 32);
  result = WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>::operator==(v13, v14);
  if ((_DWORD)result)
  {
    v16 = v13 + 40;
    v17 = v14 + 40;
    v18 = 1;
    do
    {
      v19 = v18;
      if (v12 == v18)
        break;
      v20 = WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>::operator==(v16, v17);
      v18 = v19 + 1;
      v16 += 40;
      v17 += 40;
    }
    while ((v20 & 1) != 0);
    return v19 >= v12;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::DeprecatedLinearData,WebCore::PrefixedLinearData,WebCore::RadialData,WebCore::DeprecatedRadialData,WebCore::PrefixedRadialData,WebCore::ConicData> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::DeprecatedLinearData,WebCore::PrefixedLinearData,WebCore::RadialData,WebCore::DeprecatedRadialData,WebCore::PrefixedRadialData,WebCore::ConicData> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t v12;
  int v13;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  uint64_t v18;
  int v19;
  _BOOL4 v21;
  _BOOL4 v22;
  _BOOL4 v23;
  uint64_t v24;
  int v25;
  _BOOL4 v27;
  _BOOL4 v28;
  _BOOL4 v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  char *v39;

  v5 = *(unsigned int *)(a2 + 8);
  v6 = *(_DWORD *)(a3 + 8);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v39 = &v38;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))off_1E3442570[v5])(&v39, a2, a3) & 1) == 0)
      return 0;
  }
  v12 = *(unsigned int *)(a2 + 24);
  v13 = *(_DWORD *)(a3 + 24);
  v15 = v13 == (_DWORD)v12 && v13 != -1;
  if ((_DWORD)v12 == -1 || !v15)
  {
    v16 = v13 == -1;
    if ((_DWORD)v12 == -1)
      v17 = v16;
    else
      v17 = v15;
    if (!v17)
      return 0;
  }
  else
  {
    v39 = &v38;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))off_1E3442570[v12])(&v39, a2 + 16, a3 + 16) & 1) == 0)
      return 0;
  }
  v18 = *(unsigned int *)(a2 + 40);
  v19 = *(_DWORD *)(a3 + 40);
  v21 = v19 == (_DWORD)v18 && v19 != -1;
  if ((_DWORD)v18 == -1 || !v21)
  {
    v22 = v19 == -1;
    if ((_DWORD)v18 == -1)
      v23 = v22;
    else
      v23 = v21;
    if (!v23)
      return 0;
  }
  else
  {
    v39 = &v38;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))off_1E3442570[v18])(&v39, a2 + 32, a3 + 32) & 1) == 0)
      return 0;
  }
  v24 = *(unsigned int *)(a2 + 56);
  v25 = *(_DWORD *)(a3 + 56);
  v27 = v25 == (_DWORD)v24 && v25 != -1;
  if ((_DWORD)v24 == -1 || !v27)
  {
    v28 = v25 == -1;
    if ((_DWORD)v24 == -1)
      v29 = v28;
    else
      v29 = v27;
    if (!v29)
      return 0;
  }
  else
  {
    v39 = &v38;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))off_1E3442570[v24])(&v39, a2 + 48, a3 + 48) & 1) == 0)
      return 0;
  }
  v30 = *(unsigned int *)(a2 + 76);
  if ((_DWORD)v30 != *(_DWORD *)(a3 + 76))
    return 0;
  if (!(_DWORD)v30)
    return 1;
  v31 = *(_QWORD *)(a2 + 64);
  v32 = *(_QWORD *)(a3 + 64);
  result = WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>::operator==(v31, v32);
  if ((_DWORD)result)
  {
    v34 = 0;
    v35 = v32 + 40;
    v36 = v31 + 40;
    while (v30 - 1 != v34)
    {
      v37 = WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>::operator==(v36, v35);
      v35 += 40;
      v36 += 40;
      ++v34;
      if ((v37 & 1) == 0)
        return v34 >= v30;
    }
    v34 = v30;
    return v34 >= v30;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::DeprecatedLinearData,WebCore::PrefixedLinearData,WebCore::RadialData,WebCore::DeprecatedRadialData,WebCore::PrefixedRadialData,WebCore::ConicData> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::DeprecatedLinearData,WebCore::PrefixedLinearData,WebCore::RadialData,WebCore::DeprecatedRadialData,WebCore::PrefixedRadialData,WebCore::ConicData> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  char *v22;

  v5 = *(unsigned int *)(a2 + 16);
  v6 = *(_DWORD *)(a3 + 16);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v22 = &v21;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))off_1E3442580[v5])(&v22, a2, a3) & 1) == 0)
      return 0;
  }
  if ((*(_BYTE *)(a2 + 24) == 0) == (*(_BYTE *)(a3 + 24) != 0))
    return 0;
  v12 = *(unsigned int *)(a2 + 44);
  if ((_DWORD)v12 != *(_DWORD *)(a3 + 44))
    return 0;
  if (!(_DWORD)v12)
    return 1;
  v13 = *(_QWORD *)(a2 + 32);
  v14 = *(_QWORD *)(a3 + 32);
  result = WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>::operator==(v13, v14);
  if ((_DWORD)result)
  {
    v16 = v13 + 40;
    v17 = v14 + 40;
    v18 = 1;
    do
    {
      v19 = v18;
      if (v12 == v18)
        break;
      v20 = WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>::operator==(v16, v17);
      v18 = v19 + 1;
      v16 += 40;
      v17 += 40;
    }
    while ((v20 & 1) != 0);
    return v19 >= v12;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul,3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::DeprecatedLinearData,WebCore::PrefixedLinearData,WebCore::RadialData,WebCore::DeprecatedRadialData,WebCore::PrefixedRadialData,WebCore::ConicData> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::DeprecatedLinearData,WebCore::PrefixedLinearData,WebCore::RadialData,WebCore::DeprecatedRadialData,WebCore::PrefixedRadialData,WebCore::ConicData> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  char v21;
  char *v22;

  v5 = *(unsigned int *)(a2 + 36);
  v6 = *(_DWORD *)(a3 + 36);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v22 = &v21;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))off_1E34425A8[v5])(&v22, a2, a3) & 1) == 0)
      return 0;
  }
  if ((*(_BYTE *)(a2 + 40) == 0) == (*(_BYTE *)(a3 + 40) != 0))
    return 0;
  v12 = *(unsigned int *)(a2 + 60);
  if ((_DWORD)v12 != *(_DWORD *)(a3 + 60))
    return 0;
  if (!(_DWORD)v12)
    return 1;
  v13 = *(_QWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a3 + 48);
  result = WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>::operator==(v13, v14);
  if ((_DWORD)result)
  {
    v16 = v13 + 40;
    v17 = v14 + 40;
    v18 = 1;
    do
    {
      v19 = v18;
      if (v12 == v18)
        break;
      v20 = WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>::operator==(v16, v17);
      v18 = v19 + 1;
      v16 += 40;
      v17 += 40;
    }
    while ((v20 & 1) != 0);
    return v19 >= v12;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul,4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::DeprecatedLinearData,WebCore::PrefixedLinearData,WebCore::RadialData,WebCore::DeprecatedRadialData,WebCore::PrefixedRadialData,WebCore::ConicData> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::DeprecatedLinearData,WebCore::PrefixedLinearData,WebCore::RadialData,WebCore::DeprecatedRadialData,WebCore::PrefixedRadialData,WebCore::ConicData> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t v12;
  int v13;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  uint64_t v18;
  int v19;
  _BOOL4 v21;
  _BOOL4 v22;
  _BOOL4 v23;
  uint64_t v24;
  int v25;
  _BOOL4 v27;
  _BOOL4 v28;
  _BOOL4 v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  char *v39;

  v5 = *(unsigned int *)(a2 + 8);
  v6 = *(_DWORD *)(a3 + 8);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v39 = &v38;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))off_1E3442570[v5])(&v39, a2, a3) & 1) == 0)
      return 0;
  }
  v12 = *(unsigned int *)(a2 + 24);
  v13 = *(_DWORD *)(a3 + 24);
  v15 = v13 == (_DWORD)v12 && v13 != -1;
  if ((_DWORD)v12 == -1 || !v15)
  {
    v16 = v13 == -1;
    if ((_DWORD)v12 == -1)
      v17 = v16;
    else
      v17 = v15;
    if (!v17)
      return 0;
  }
  else
  {
    v39 = &v38;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))off_1E3442570[v12])(&v39, a2 + 16, a3 + 16) & 1) == 0)
      return 0;
  }
  v18 = *(unsigned int *)(a2 + 40);
  v19 = *(_DWORD *)(a3 + 40);
  v21 = v19 == (_DWORD)v18 && v19 != -1;
  if ((_DWORD)v18 == -1 || !v21)
  {
    v22 = v19 == -1;
    if ((_DWORD)v18 == -1)
      v23 = v22;
    else
      v23 = v21;
    if (!v23)
      return 0;
  }
  else
  {
    v39 = &v38;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))off_1E3442570[v18])(&v39, a2 + 32, a3 + 32) & 1) == 0)
      return 0;
  }
  v24 = *(unsigned int *)(a2 + 56);
  v25 = *(_DWORD *)(a3 + 56);
  v27 = v25 == (_DWORD)v24 && v25 != -1;
  if ((_DWORD)v24 == -1 || !v27)
  {
    v28 = v25 == -1;
    if ((_DWORD)v24 == -1)
      v29 = v28;
    else
      v29 = v27;
    if (!v29)
      return 0;
  }
  else
  {
    v39 = &v38;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))off_1E3442570[v24])(&v39, a2 + 48, a3 + 48) & 1) == 0)
      return 0;
  }
  if (*(float *)(a2 + 64) != *(float *)(a3 + 64))
    return 0;
  if (*(float *)(a2 + 68) != *(float *)(a3 + 68))
    return 0;
  v30 = *(unsigned int *)(a2 + 84);
  if ((_DWORD)v30 != *(_DWORD *)(a3 + 84))
    return 0;
  if (!(_DWORD)v30)
    return 1;
  v31 = *(_QWORD *)(a2 + 72);
  v32 = *(_QWORD *)(a3 + 72);
  result = WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>::operator==(v31, v32);
  if ((_DWORD)result)
  {
    v34 = 0;
    v35 = v32 + 40;
    v36 = v31 + 40;
    while (v30 - 1 != v34)
    {
      v37 = WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>::operator==(v36, v35);
      v35 += 40;
      v36 += 40;
      ++v34;
      if ((v37 & 1) == 0)
        return v34 >= v30;
    }
    v34 = v30;
    return v34 >= v30;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul,5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::DeprecatedLinearData,WebCore::PrefixedLinearData,WebCore::RadialData,WebCore::DeprecatedRadialData,WebCore::PrefixedRadialData,WebCore::ConicData> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::DeprecatedLinearData,WebCore::PrefixedLinearData,WebCore::RadialData,WebCore::DeprecatedRadialData,WebCore::PrefixedRadialData,WebCore::ConicData> const>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  _BOOL4 v8;
  _BOOL4 v10;
  _BOOL4 v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  char *v21;

  v5 = *(unsigned int *)(a2 + 16);
  v6 = *(_DWORD *)(a3 + 16);
  v8 = v6 == (_DWORD)v5 && v6 != -1;
  if ((_DWORD)v5 == -1 || !v8)
  {
    v10 = v6 == -1;
    if ((_DWORD)v5 == -1)
      v11 = v10;
    else
      v11 = v8;
    if (!v11)
      return 0;
  }
  else
  {
    v21 = &v20;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))off_1E34425F8[v5])(&v21, a2, a3) & 1) == 0)
      return 0;
  }
  if (*(_BYTE *)(a2 + 36) && *(_BYTE *)(a3 + 36))
  {
    if ((WebCore::StyleGradientPosition::operator==((unsigned __int8 *)(a2 + 20), (unsigned __int8 *)(a3 + 20)) & 1) == 0)
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 36) != 0) != (*(_BYTE *)(a3 + 36) != 0))
  {
    return 0;
  }
  if ((*(_BYTE *)(a2 + 40) == 0) == (*(_BYTE *)(a3 + 40) != 0))
    return 0;
  v12 = *(unsigned int *)(a2 + 60);
  if ((_DWORD)v12 != *(_DWORD *)(a3 + 60))
    return 0;
  if (!(_DWORD)v12)
    return 1;
  v13 = *(_QWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a3 + 48);
  result = WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>::operator==(v13, v14);
  if ((_DWORD)result)
  {
    v16 = 0;
    v17 = v14 + 40;
    v18 = v13 + 40;
    while (v12 - 1 != v16)
    {
      v19 = WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>::operator==(v18, v17);
      v17 += 40;
      v18 += 40;
      ++v16;
      if ((v19 & 1) == 0)
        return v16 >= v12;
    }
    v16 = v12;
    return v16 >= v12;
  }
  return result;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<6ul,6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::DeprecatedLinearData,WebCore::PrefixedLinearData,WebCore::RadialData,WebCore::DeprecatedRadialData,WebCore::PrefixedRadialData,WebCore::ConicData> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::DeprecatedLinearData,WebCore::PrefixedLinearData,WebCore::RadialData,WebCore::DeprecatedRadialData,WebCore::PrefixedRadialData,WebCore::ConicData> const>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v5;
  BOOL v6;
  int v7;
  BOOL v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t i;
  int v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  _BOOL4 v21;
  BOOL v23;
  char v24;
  char v25;
  uint64_t v26;
  int v27;
  _BOOL4 v29;
  _BOOL4 v31;
  char v32;
  char v34;
  char *v35;

  v5 = a3[16];
  if (a2[16])
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
  {
    if ((a2[16] != 0) != (v5 != 0))
      return 0;
  }
  else if (*a2 != *a3 || *((double *)a2 + 1) != *((double *)a3 + 1))
  {
    return 0;
  }
  v7 = a3[40];
  if (a2[40])
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
  {
    if ((a2[40] != 0) == (v7 != 0))
      goto LABEL_18;
    return 0;
  }
  v9 = WebCore::StyleGradientPosition::operator==(a2 + 24, a3 + 24);
  if ((v9 & 1) == 0)
    return 0;
LABEL_18:
  if ((a2[44] == 0) == (a3[44] != 0))
    return 0;
  v10 = *((unsigned int *)a2 + 15);
  if ((_DWORD)v10 != *((_DWORD *)a3 + 15))
    return 0;
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = 0;
    v13 = *((_QWORD *)a2 + 6);
    v14 = *((_QWORD *)a3 + 6);
    for (i = 1; ; ++i)
    {
      v16 = *(unsigned __int8 *)(v14 + v11 + 16);
      if (*(_BYTE *)(v13 + v11 + 16))
        v17 = v16 == 0;
      else
        v17 = 1;
      if (v17)
      {
        if ((*(_BYTE *)(v13 + v11 + 16) != 0) != (v16 != 0))
          return v12;
      }
      else
      {
        v18 = *(unsigned int *)(v13 + v11 + 8);
        v19 = *(_DWORD *)(v14 + v11 + 8);
        v21 = v19 == (_DWORD)v18 && v19 != -1;
        if ((_DWORD)v18 == -1 || !v21)
        {
          v23 = v19 == -1;
          if ((_DWORD)v18 == -1)
            v24 = v23;
          else
            v24 = v21;
          if ((v24 & 1) == 0)
            return v12;
        }
        else
        {
          v35 = &v34;
          v25 = ((uint64_t (*)(char **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v18])(&v35);
          if ((v25 & 1) == 0)
            return v12;
        }
      }
      v26 = *(unsigned int *)(v13 + v11 + 40);
      v27 = *(_DWORD *)(v14 + v11 + 40);
      v29 = v27 == (_DWORD)v26 && v27 != -1;
      if ((_DWORD)v26 == -1 || !v29)
      {
        if ((_DWORD)v26 == -1)
          v31 = v27 == -1;
        else
          v31 = v29;
        if (!v31)
          return v12;
      }
      else
      {
        v35 = &v34;
        v32 = ((uint64_t (*)(char **, uint64_t, uint64_t))off_1E3442620[v26])(&v35, v13 + v11 + 24, v14 + v11 + 24);
        if ((v32 & 1) == 0)
          return v12;
      }
      v12 = i >= v10;
      v11 += 48;
      if (48 * v10 == v11)
        return v12;
    }
  }
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,std::monostate::CSSLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<std::monostate::CSSLinearGradientValue,std::monostate::CSSLinearGradientValue::Horizontal>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,std::monostate::CSSLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<std::monostate::CSSLinearGradientValue,std::monostate::CSSLinearGradientValue::Horizontal>> const>()
{
  return 1;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,std::monostate::CSSLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<std::monostate::CSSLinearGradientValue,std::monostate::CSSLinearGradientValue::Horizontal>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,std::monostate::CSSLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<std::monostate::CSSLinearGradientValue,std::monostate::CSSLinearGradientValue::Horizontal>> const>(uint64_t a1, double *a2, double *a3)
{
  return a2[1] == a3[1] && *(unsigned __int8 *)a2 == *(unsigned __int8 *)a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,std::monostate::CSSLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<std::monostate::CSSLinearGradientValue,std::monostate::CSSLinearGradientValue::Horizontal>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,std::monostate::CSSLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<std::monostate::CSSLinearGradientValue,std::monostate::CSSLinearGradientValue::Horizontal>> const>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  return (*a2 == 0) ^ (*a3 != 0);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul,3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,std::monostate::CSSLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<std::monostate::CSSLinearGradientValue,std::monostate::CSSLinearGradientValue::Horizontal>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,std::monostate::CSSLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<std::monostate::CSSLinearGradientValue,std::monostate::CSSLinearGradientValue::Horizontal>> const>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  return (*a2 == 0) ^ (*a3 != 0);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul,4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,std::monostate::CSSLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<std::monostate::CSSLinearGradientValue,std::monostate::CSSLinearGradientValue::Horizontal>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,std::monostate::CSSLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<std::monostate::CSSLinearGradientValue,std::monostate::CSSLinearGradientValue::Horizontal>> const>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  if ((*a2 == 0) == (*a3 != 0))
    return 0;
  else
    return (a2[1] == 0) ^ (a3[1] != 0);
}

uint64_t WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>::operator==(uint64_t a1, uint64_t a2)
{
  int v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  _BOOL4 v9;
  BOOL v11;
  char v12;
  char v13;
  uint64_t result;
  int v15;
  float v16;
  float v17;
  char v18;
  char *v19;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a1 + 16))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
    if ((*(_BYTE *)(a1 + 16) != 0) != (v4 != 0))
      return 0;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8);
    v7 = *(_DWORD *)(a2 + 8);
    v9 = v7 == (_DWORD)v6 && v7 != -1;
    if ((_DWORD)v6 == -1 || !v9)
    {
      v11 = v7 == -1;
      if ((_DWORD)v6 == -1)
        v12 = v11;
      else
        v12 = v9;
      if ((v12 & 1) == 0)
        return 0;
    }
    else
    {
      v19 = &v18;
      v13 = ((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v6])(&v19, a1, a2);
      if ((v13 & 1) == 0)
        return 0;
    }
  }
  result = (*(_BYTE *)(a1 + 32) != 0) == (*(_BYTE *)(a2 + 32) != 0);
  if (!*(_BYTE *)(a1 + 32) || !*(_BYTE *)(a2 + 32))
    return result;
  v15 = *(unsigned __int8 *)(a1 + 28);
  if (v15 != *(unsigned __int8 *)(a2 + 28) || (*(_BYTE *)(a1 + 29) != 0) != (*(_BYTE *)(a2 + 29) != 0))
    return 0;
  if (v15 == 13)
    return 1;
  if (v15 == 11)
    return WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 24), (const WebCore::Length *)(a2 + 24));
  v16 = *(float *)(a1 + 24);
  if (!*(_BYTE *)(a1 + 30))
    v16 = (float)*(int *)(a1 + 24);
  v17 = *(float *)(a2 + 24);
  if (!*(_BYTE *)(a2 + 30))
    v17 = (float)SLODWORD(v17);
  return v16 == v17;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::NumberRaw,std::__variant_detail::_Trait::PercentRaw> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::NumberRaw,std::__variant_detail::_Trait::PercentRaw> const>(uint64_t a1, double *a2, double *a3)
{
  return *a2 == *a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::NumberRaw,std::__variant_detail::_Trait::PercentRaw> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::NumberRaw,std::__variant_detail::_Trait::PercentRaw> const>(uint64_t a1, double *a2, double *a3)
{
  return *a2 == *a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,std::monostate::CSSPrefixedLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<std::monostate::CSSPrefixedLinearGradientValue,std::monostate::CSSPrefixedLinearGradientValue::Horizontal>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,std::monostate::CSSPrefixedLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<std::monostate::CSSPrefixedLinearGradientValue,std::monostate::CSSPrefixedLinearGradientValue::Horizontal>> const>()
{
  return 1;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,std::monostate::CSSPrefixedLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<std::monostate::CSSPrefixedLinearGradientValue,std::monostate::CSSPrefixedLinearGradientValue::Horizontal>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,std::monostate::CSSPrefixedLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<std::monostate::CSSPrefixedLinearGradientValue,std::monostate::CSSPrefixedLinearGradientValue::Horizontal>> const>(uint64_t a1, double *a2, double *a3)
{
  return a2[1] == a3[1] && *(unsigned __int8 *)a2 == *(unsigned __int8 *)a3;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,std::monostate::CSSPrefixedLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<std::monostate::CSSPrefixedLinearGradientValue,std::monostate::CSSPrefixedLinearGradientValue::Horizontal>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,std::monostate::CSSPrefixedLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<std::monostate::CSSPrefixedLinearGradientValue,std::monostate::CSSPrefixedLinearGradientValue::Horizontal>> const>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  return (*a2 == 0) ^ (*a3 != 0);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul,3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,std::monostate::CSSPrefixedLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<std::monostate::CSSPrefixedLinearGradientValue,std::monostate::CSSPrefixedLinearGradientValue::Horizontal>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,std::monostate::CSSPrefixedLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<std::monostate::CSSPrefixedLinearGradientValue,std::monostate::CSSPrefixedLinearGradientValue::Horizontal>> const>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  return (*a2 == 0) ^ (*a3 != 0);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul,4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,std::monostate::CSSPrefixedLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<std::monostate::CSSPrefixedLinearGradientValue,std::monostate::CSSPrefixedLinearGradientValue::Horizontal>> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,std::monostate::CSSPrefixedLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<std::monostate::CSSPrefixedLinearGradientValue,std::monostate::CSSPrefixedLinearGradientValue::Horizontal>> const>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  if ((*a2 == 0) == (*a3 != 0))
    return 0;
  else
    return (a2[1] == 0) ^ (a3[1] != 0);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::Extent,WebCore::StyleGradientImage::Length,WebCore::StyleGradientImage::Size,WebCore::StyleGradientImage::CircleOfLength,WebCore::StyleGradientImage::CircleOfExtent,WebCore::StyleGradientImage::EllipseOfSize,WebCore::StyleGradientImage::EllipseOfExtent,std::monostate::StyleGradientPosition> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::Extent,WebCore::StyleGradientImage::Length,WebCore::StyleGradientImage::Size,WebCore::StyleGradientImage::CircleOfLength,WebCore::StyleGradientImage::CircleOfExtent,WebCore::StyleGradientImage::EllipseOfSize,WebCore::StyleGradientImage::EllipseOfExtent,std::monostate::StyleGradientPosition> const>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::Extent,WebCore::StyleGradientImage::Length,WebCore::StyleGradientImage::Size,WebCore::StyleGradientImage::CircleOfLength,WebCore::StyleGradientImage::CircleOfExtent,WebCore::StyleGradientImage::EllipseOfSize,WebCore::StyleGradientImage::EllipseOfExtent,std::monostate::StyleGradientPosition> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::Extent,WebCore::StyleGradientImage::Length,WebCore::StyleGradientImage::Size,WebCore::StyleGradientImage::CircleOfLength,WebCore::StyleGradientImage::CircleOfExtent,WebCore::StyleGradientImage::EllipseOfSize,WebCore::StyleGradientImage::EllipseOfExtent,std::monostate::StyleGradientPosition> const>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  uint64_t result;

  if ((*a2 == 0) == (*a3 != 0))
    return 0;
  result = (a2[20] != 0) == (a3[20] != 0);
  if (a2[20])
  {
    if (a3[20])
      return WebCore::StyleGradientPosition::operator==(a2 + 4, a3 + 4);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::Extent,WebCore::StyleGradientImage::Length,WebCore::StyleGradientImage::Size,WebCore::StyleGradientImage::CircleOfLength,WebCore::StyleGradientImage::CircleOfExtent,WebCore::StyleGradientImage::EllipseOfSize,WebCore::StyleGradientImage::EllipseOfExtent,std::monostate::StyleGradientPosition> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::Extent,WebCore::StyleGradientImage::Length,WebCore::StyleGradientImage::Size,WebCore::StyleGradientImage::CircleOfLength,WebCore::StyleGradientImage::CircleOfExtent,WebCore::StyleGradientImage::EllipseOfSize,WebCore::StyleGradientImage::EllipseOfExtent,std::monostate::StyleGradientPosition> const>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  BOOL v3;

  if (*a2 != *a3)
    return 0;
  if (a2[20])
    v3 = a3[20] == 0;
  else
    v3 = 1;
  if (v3)
    return (a2[20] != 0) == (a3[20] != 0);
  else
    return WebCore::StyleGradientPosition::operator==(a2 + 4, a3 + 4);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul,3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::Extent,WebCore::StyleGradientImage::Length,WebCore::StyleGradientImage::Size,WebCore::StyleGradientImage::CircleOfLength,WebCore::StyleGradientImage::CircleOfExtent,WebCore::StyleGradientImage::EllipseOfSize,WebCore::StyleGradientImage::EllipseOfExtent,std::monostate::StyleGradientPosition> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::Extent,WebCore::StyleGradientImage::Length,WebCore::StyleGradientImage::Size,WebCore::StyleGradientImage::CircleOfLength,WebCore::StyleGradientImage::CircleOfExtent,WebCore::StyleGradientImage::EllipseOfSize,WebCore::StyleGradientImage::EllipseOfExtent,std::monostate::StyleGradientPosition> const>(int a1, WebCore::Length *this, WebCore::Length *a3)
{
  int v3;
  float v4;
  float v5;
  uint64_t result;
  char isCalculatedEqual;
  WebCore::Length *v8;
  WebCore::Length *v9;

  v3 = *((unsigned __int8 *)this + 4);
  if (v3 != *((unsigned __int8 *)a3 + 4) || (*((_BYTE *)this + 5) != 0) != (*((_BYTE *)a3 + 5) != 0))
    return 0;
  if (v3 != 13)
  {
    if (v3 != 11)
    {
      v4 = *(float *)this;
      if (!*((_BYTE *)this + 6))
        v4 = (float)*(int *)this;
      v5 = *(float *)a3;
      if (!*((_BYTE *)a3 + 6))
        v5 = (float)*(int *)a3;
      if (v4 == v5)
        goto LABEL_10;
      return 0;
    }
    v8 = a3;
    v9 = this;
    isCalculatedEqual = WebCore::Length::isCalculatedEqual(this, a3);
    a3 = v8;
    this = v9;
    if ((isCalculatedEqual & 1) == 0)
      return 0;
  }
LABEL_10:
  result = (*((_BYTE *)this + 24) != 0) == (*((_BYTE *)a3 + 24) != 0);
  if (*((_BYTE *)this + 24))
  {
    if (*((_BYTE *)a3 + 24))
      return WebCore::StyleGradientPosition::operator==((unsigned __int8 *)this + 8, (unsigned __int8 *)a3 + 8);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul,4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::Extent,WebCore::StyleGradientImage::Length,WebCore::StyleGradientImage::Size,WebCore::StyleGradientImage::CircleOfLength,WebCore::StyleGradientImage::CircleOfExtent,WebCore::StyleGradientImage::EllipseOfSize,WebCore::StyleGradientImage::EllipseOfExtent,std::monostate::StyleGradientPosition> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::Extent,WebCore::StyleGradientImage::Length,WebCore::StyleGradientImage::Size,WebCore::StyleGradientImage::CircleOfLength,WebCore::StyleGradientImage::CircleOfExtent,WebCore::StyleGradientImage::EllipseOfSize,WebCore::StyleGradientImage::EllipseOfExtent,std::monostate::StyleGradientPosition> const>(int a1, WebCore::Length *this, WebCore::Length *a3)
{
  int v3;
  float v4;
  float v5;
  int v6;
  float v7;
  float v8;
  uint64_t result;
  char isCalculatedEqual;
  char v11;
  WebCore::Length *v12;
  WebCore::Length *v13;
  WebCore::Length *v14;
  WebCore::Length *v15;

  v3 = *((unsigned __int8 *)this + 4);
  if (v3 != *((unsigned __int8 *)a3 + 4) || (*((_BYTE *)this + 5) != 0) != (*((_BYTE *)a3 + 5) != 0))
    return 0;
  if (v3 != 13)
  {
    if (v3 == 11)
    {
      v12 = a3;
      v14 = this;
      isCalculatedEqual = WebCore::Length::isCalculatedEqual(this, a3);
      a3 = v12;
      this = v14;
      if ((isCalculatedEqual & 1) == 0)
        return 0;
    }
    else
    {
      v4 = *(float *)this;
      if (!*((_BYTE *)this + 6))
        v4 = (float)*(int *)this;
      v5 = *(float *)a3;
      if (!*((_BYTE *)a3 + 6))
        v5 = (float)*(int *)a3;
      if (v4 != v5)
        return 0;
    }
  }
  v6 = *((unsigned __int8 *)this + 12);
  if (v6 != *((unsigned __int8 *)a3 + 12) || (*((_BYTE *)this + 13) != 0) != (*((_BYTE *)a3 + 13) != 0))
    return 0;
  if (v6 != 13)
  {
    if (v6 != 11)
    {
      v7 = *((float *)this + 2);
      if (!*((_BYTE *)this + 14))
        v7 = (float)SLODWORD(v7);
      v8 = *((float *)a3 + 2);
      if (!*((_BYTE *)a3 + 14))
        v8 = (float)SLODWORD(v8);
      if (v7 == v8)
        goto LABEL_19;
      return 0;
    }
    v13 = a3;
    v15 = this;
    v11 = WebCore::Length::isCalculatedEqual((WebCore::Length *)((char *)this + 8), (WebCore::Length *)((char *)a3 + 8));
    a3 = v13;
    this = v15;
    if ((v11 & 1) == 0)
      return 0;
  }
LABEL_19:
  result = (*((_BYTE *)this + 32) != 0) == (*((_BYTE *)a3 + 32) != 0);
  if (*((_BYTE *)this + 32))
  {
    if (*((_BYTE *)a3 + 32))
      return WebCore::StyleGradientPosition::operator==((unsigned __int8 *)this + 16, (unsigned __int8 *)a3 + 16);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul,5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::Extent,WebCore::StyleGradientImage::Length,WebCore::StyleGradientImage::Size,WebCore::StyleGradientImage::CircleOfLength,WebCore::StyleGradientImage::CircleOfExtent,WebCore::StyleGradientImage::EllipseOfSize,WebCore::StyleGradientImage::EllipseOfExtent,std::monostate::StyleGradientPosition> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::Extent,WebCore::StyleGradientImage::Length,WebCore::StyleGradientImage::Size,WebCore::StyleGradientImage::CircleOfLength,WebCore::StyleGradientImage::CircleOfExtent,WebCore::StyleGradientImage::EllipseOfSize,WebCore::StyleGradientImage::EllipseOfExtent,std::monostate::StyleGradientPosition> const>(int a1, WebCore::Length *this, WebCore::Length *a3)
{
  int v3;
  float v4;
  float v5;
  uint64_t result;
  char isCalculatedEqual;
  WebCore::Length *v8;
  WebCore::Length *v9;

  v3 = *((unsigned __int8 *)this + 4);
  if (v3 != *((unsigned __int8 *)a3 + 4) || (*((_BYTE *)this + 5) != 0) != (*((_BYTE *)a3 + 5) != 0))
    return 0;
  if (v3 != 13)
  {
    if (v3 != 11)
    {
      v4 = *(float *)this;
      if (!*((_BYTE *)this + 6))
        v4 = (float)*(int *)this;
      v5 = *(float *)a3;
      if (!*((_BYTE *)a3 + 6))
        v5 = (float)*(int *)a3;
      if (v4 == v5)
        goto LABEL_10;
      return 0;
    }
    v8 = a3;
    v9 = this;
    isCalculatedEqual = WebCore::Length::isCalculatedEqual(this, a3);
    a3 = v8;
    this = v9;
    if ((isCalculatedEqual & 1) == 0)
      return 0;
  }
LABEL_10:
  result = (*((_BYTE *)this + 24) != 0) == (*((_BYTE *)a3 + 24) != 0);
  if (*((_BYTE *)this + 24))
  {
    if (*((_BYTE *)a3 + 24))
      return WebCore::StyleGradientPosition::operator==((unsigned __int8 *)this + 8, (unsigned __int8 *)a3 + 8);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul,6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::Extent,WebCore::StyleGradientImage::Length,WebCore::StyleGradientImage::Size,WebCore::StyleGradientImage::CircleOfLength,WebCore::StyleGradientImage::CircleOfExtent,WebCore::StyleGradientImage::EllipseOfSize,WebCore::StyleGradientImage::EllipseOfExtent,std::monostate::StyleGradientPosition> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::Extent,WebCore::StyleGradientImage::Length,WebCore::StyleGradientImage::Size,WebCore::StyleGradientImage::CircleOfLength,WebCore::StyleGradientImage::CircleOfExtent,WebCore::StyleGradientImage::EllipseOfSize,WebCore::StyleGradientImage::EllipseOfExtent,std::monostate::StyleGradientPosition> const>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  BOOL v3;

  if (*a2 != *a3)
    return 0;
  if (a2[20])
    v3 = a3[20] == 0;
  else
    v3 = 1;
  if (v3)
    return (a2[20] != 0) == (a3[20] != 0);
  else
    return WebCore::StyleGradientPosition::operator==(a2 + 4, a3 + 4);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<7ul,7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::Extent,WebCore::StyleGradientImage::Length,WebCore::StyleGradientImage::Size,WebCore::StyleGradientImage::CircleOfLength,WebCore::StyleGradientImage::CircleOfExtent,WebCore::StyleGradientImage::EllipseOfSize,WebCore::StyleGradientImage::EllipseOfExtent,std::monostate::StyleGradientPosition> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::Extent,WebCore::StyleGradientImage::Length,WebCore::StyleGradientImage::Size,WebCore::StyleGradientImage::CircleOfLength,WebCore::StyleGradientImage::CircleOfExtent,WebCore::StyleGradientImage::EllipseOfSize,WebCore::StyleGradientImage::EllipseOfExtent,std::monostate::StyleGradientPosition> const>(int a1, WebCore::Length *this, WebCore::Length *a3)
{
  int v3;
  float v4;
  float v5;
  int v6;
  float v7;
  float v8;
  uint64_t result;
  char isCalculatedEqual;
  char v11;
  WebCore::Length *v12;
  WebCore::Length *v13;
  WebCore::Length *v14;
  WebCore::Length *v15;

  v3 = *((unsigned __int8 *)this + 4);
  if (v3 != *((unsigned __int8 *)a3 + 4) || (*((_BYTE *)this + 5) != 0) != (*((_BYTE *)a3 + 5) != 0))
    return 0;
  if (v3 != 13)
  {
    if (v3 == 11)
    {
      v12 = a3;
      v14 = this;
      isCalculatedEqual = WebCore::Length::isCalculatedEqual(this, a3);
      a3 = v12;
      this = v14;
      if ((isCalculatedEqual & 1) == 0)
        return 0;
    }
    else
    {
      v4 = *(float *)this;
      if (!*((_BYTE *)this + 6))
        v4 = (float)*(int *)this;
      v5 = *(float *)a3;
      if (!*((_BYTE *)a3 + 6))
        v5 = (float)*(int *)a3;
      if (v4 != v5)
        return 0;
    }
  }
  v6 = *((unsigned __int8 *)this + 12);
  if (v6 != *((unsigned __int8 *)a3 + 12) || (*((_BYTE *)this + 13) != 0) != (*((_BYTE *)a3 + 13) != 0))
    return 0;
  if (v6 != 13)
  {
    if (v6 != 11)
    {
      v7 = *((float *)this + 2);
      if (!*((_BYTE *)this + 14))
        v7 = (float)SLODWORD(v7);
      v8 = *((float *)a3 + 2);
      if (!*((_BYTE *)a3 + 14))
        v8 = (float)SLODWORD(v8);
      if (v7 == v8)
        goto LABEL_19;
      return 0;
    }
    v13 = a3;
    v15 = this;
    v11 = WebCore::Length::isCalculatedEqual((WebCore::Length *)((char *)this + 8), (WebCore::Length *)((char *)a3 + 8));
    a3 = v13;
    this = v15;
    if ((v11 & 1) == 0)
      return 0;
  }
LABEL_19:
  result = (*((_BYTE *)this + 32) != 0) == (*((_BYTE *)a3 + 32) != 0);
  if (*((_BYTE *)this + 32))
  {
    if (*((_BYTE *)a3 + 32))
      return WebCore::StyleGradientPosition::operator==((unsigned __int8 *)this + 16, (unsigned __int8 *)a3 + 16);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<8ul,8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::Extent,WebCore::StyleGradientImage::Length,WebCore::StyleGradientImage::Size,WebCore::StyleGradientImage::CircleOfLength,WebCore::StyleGradientImage::CircleOfExtent,WebCore::StyleGradientImage::EllipseOfSize,WebCore::StyleGradientImage::EllipseOfExtent,std::monostate::StyleGradientPosition> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::Extent,WebCore::StyleGradientImage::Length,WebCore::StyleGradientImage::Size,WebCore::StyleGradientImage::CircleOfLength,WebCore::StyleGradientImage::CircleOfExtent,WebCore::StyleGradientImage::EllipseOfSize,WebCore::StyleGradientImage::EllipseOfExtent,std::monostate::StyleGradientPosition> const>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  BOOL v3;

  if (*a2 != *a3)
    return 0;
  if (a2[20])
    v3 = a3[20] == 0;
  else
    v3 = 1;
  if (v3)
    return (a2[20] != 0) == (a3[20] != 0);
  else
    return WebCore::StyleGradientPosition::operator==(a2 + 4, a3 + 4);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<9ul,9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::Extent,WebCore::StyleGradientImage::Length,WebCore::StyleGradientImage::Size,WebCore::StyleGradientImage::CircleOfLength,WebCore::StyleGradientImage::CircleOfExtent,WebCore::StyleGradientImage::EllipseOfSize,WebCore::StyleGradientImage::EllipseOfExtent,std::monostate::StyleGradientPosition> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::Extent,WebCore::StyleGradientImage::Length,WebCore::StyleGradientImage::Size,WebCore::StyleGradientImage::CircleOfLength,WebCore::StyleGradientImage::CircleOfExtent,WebCore::StyleGradientImage::EllipseOfSize,WebCore::StyleGradientImage::EllipseOfExtent,std::monostate::StyleGradientPosition> const>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return WebCore::StyleGradientPosition::operator==(a2, a3);
}

uint64_t WebCore::StyleGradientPosition::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  float v3;
  float v4;
  int v5;
  float *v6;
  float v7;
  float v8;
  char isCalculatedEqual;
  unsigned __int8 *v11;
  unsigned __int8 *v12;

  v2 = a1[4];
  if (v2 != a2[4] || (a1[5] != 0) != (a2[5] != 0))
    return 0;
  if (v2 != 13)
  {
    if (v2 == 11)
    {
      v11 = a2;
      v12 = a1;
      isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)a1, (const WebCore::Length *)a2);
      a2 = v11;
      a1 = v12;
      if ((isCalculatedEqual & 1) == 0)
        return 0;
    }
    else
    {
      if (a1[6])
        v3 = *(float *)a1;
      else
        v3 = (float)*(int *)a1;
      v4 = *(float *)a2;
      if (!a2[6])
        v4 = (float)*(int *)a2;
      if (v3 != v4)
        return 0;
    }
  }
  v5 = a1[12];
  if (v5 != a2[12] || (a1[13] != 0) != (a2[13] != 0))
    return 0;
  if (v5 == 13)
    return 1;
  v6 = (float *)(a1 + 8);
  if (v5 == 11)
    return WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 8), (const WebCore::Length *)(a2 + 8));
  if (a1[14])
    v7 = *v6;
  else
    v7 = (float)*(int *)v6;
  v8 = *((float *)a2 + 2);
  if (!a2[14])
    v8 = (float)SLODWORD(v8);
  return v7 == v8;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::ExtentKeyword,WebCore::ShapeAndExtent,std::monostate::StyleGradientImage::PrefixedRadialData::MeasuredSize> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::ExtentKeyword,WebCore::ShapeAndExtent,std::monostate::StyleGradientImage::PrefixedRadialData::MeasuredSize> const>()
{
  return 1;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::ExtentKeyword,WebCore::ShapeAndExtent,std::monostate::StyleGradientImage::PrefixedRadialData::MeasuredSize> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::ExtentKeyword,WebCore::ShapeAndExtent,std::monostate::StyleGradientImage::PrefixedRadialData::MeasuredSize> const>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  return (*a2 == 0) ^ (*a3 != 0);
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::ExtentKeyword,WebCore::ShapeAndExtent,std::monostate::StyleGradientImage::PrefixedRadialData::MeasuredSize> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::ExtentKeyword,WebCore::ShapeAndExtent,std::monostate::StyleGradientImage::PrefixedRadialData::MeasuredSize> const>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  return *a2 == *a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<3ul,3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::ExtentKeyword,WebCore::ShapeAndExtent,std::monostate::StyleGradientImage::PrefixedRadialData::MeasuredSize> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::ExtentKeyword,WebCore::ShapeAndExtent,std::monostate::StyleGradientImage::PrefixedRadialData::MeasuredSize> const>(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  return (*a2 == 0) != (*a3 != 0) && a2[1] == a3[1];
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul,4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::ExtentKeyword,WebCore::ShapeAndExtent,std::monostate::StyleGradientImage::PrefixedRadialData::MeasuredSize> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,WebCore::ExtentKeyword,WebCore::ShapeAndExtent,std::monostate::StyleGradientImage::PrefixedRadialData::MeasuredSize> const>(int a1, WebCore::Length *this, WebCore::Length *a3)
{
  int v3;
  float v4;
  float v5;
  int v6;
  float v7;
  float v8;
  char isCalculatedEqual;
  WebCore::Length *v11;
  WebCore::Length *v12;

  v3 = *((unsigned __int8 *)this + 4);
  if (v3 != *((unsigned __int8 *)a3 + 4) || (*((_BYTE *)this + 5) != 0) != (*((_BYTE *)a3 + 5) != 0))
    return 0;
  if (v3 != 13)
  {
    if (v3 == 11)
    {
      v11 = a3;
      v12 = this;
      isCalculatedEqual = WebCore::Length::isCalculatedEqual(this, a3);
      a3 = v11;
      this = v12;
      if ((isCalculatedEqual & 1) == 0)
        return 0;
    }
    else
    {
      v4 = *(float *)this;
      if (!*((_BYTE *)this + 6))
        v4 = (float)*(int *)this;
      v5 = *(float *)a3;
      if (!*((_BYTE *)a3 + 6))
        v5 = (float)*(int *)a3;
      if (v4 != v5)
        return 0;
    }
  }
  v6 = *((unsigned __int8 *)this + 12);
  if (v6 != *((unsigned __int8 *)a3 + 12) || (*((_BYTE *)this + 13) != 0) != (*((_BYTE *)a3 + 13) != 0))
    return 0;
  if (v6 == 13)
    return 1;
  if (v6 == 11)
    return WebCore::Length::isCalculatedEqual((WebCore::Length *)((char *)this + 8), (WebCore::Length *)((char *)a3 + 8));
  v7 = *((float *)this + 2);
  if (!*((_BYTE *)this + 14))
    v7 = (float)*((int *)this + 2);
  v8 = *((float *)a3 + 2);
  if (!*((_BYTE *)a3 + 14))
    v8 = (float)SLODWORD(v8);
  return v7 == v8;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul,0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,std::monostate::PercentRaw> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,std::monostate::PercentRaw> const>()
{
  return 1;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<1ul,1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,std::monostate::PercentRaw> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,std::monostate::PercentRaw> const>(uint64_t a1, double *a2, double *a3)
{
  return a2[1] == a3[1] && *(unsigned __int8 *)a2 == *(unsigned __int8 *)a3;
}

BOOL std::__variant_detail::__visitation::__base::__dispatcher<2ul,2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<std::__convert_to_BOOL<std::equal_to<void>>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,std::monostate::PercentRaw> const&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,std::monostate::PercentRaw> const>(uint64_t a1, double *a2, double *a3)
{
  return *a2 == *a3;
}

float std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::positionFromValue(WebCore::StyleGradientDeprecatedPoint::Coordinate const&,float)::$_0,WebCore::positionFromValue(WebCore::StyleGradientDeprecatedPoint::Coordinate const&,float)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::NumberRaw,WebCore::PercentRaw> const&>(uint64_t a1, uint64_t a2)
{
  return *(double *)a2;
}

float std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::positionFromValue(WebCore::StyleGradientDeprecatedPoint::Coordinate const&,float)::$_0,WebCore::positionFromValue(WebCore::StyleGradientDeprecatedPoint::Coordinate const&,float)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::NumberRaw,WebCore::PercentRaw> const&>(float ***a1, double *a2)
{
  return *a2 / 100.0 * ***a1;
}

float WebCore::computeEndPoint(WebCore::Length *this, float *a2)
{
  float v4;
  int v5;
  float v6;
  float v7;
  uint64_t v8;
  float v9;
  BOOL v10;
  float v11;
  uint64_t v12;

  v4 = *a2;
  v5 = *((unsigned __int8 *)this + 4);
  if (v5 == 3)
  {
    v7 = *(float *)this;
    if (!*((_BYTE *)this + 6))
      v7 = (float)*(int *)this;
    v6 = v4 * (float)(v7 / 100.0);
  }
  else
  {
    v6 = 0.0;
    if (v5 == 11)
    {
      v8 = WebCore::Length::calculationValue(this);
      (*(void (**)(_QWORD, float))(**(_QWORD **)(v8 + 8) + 16))(*(_QWORD *)(v8 + 8), v4);
      if (*(_BYTE *)(v8 + 16))
        v10 = v9 < 0.0;
      else
        v10 = 0;
      if (v10)
        v6 = 0.0;
      else
        v6 = v9;
    }
    else if (v5 == 4)
    {
      if (*((_BYTE *)this + 6))
        v6 = *(float *)this;
      else
        v6 = (float)*(int *)this;
    }
  }
  v11 = a2[1];
  if (*((_BYTE *)this + 12) == 11)
  {
    v12 = WebCore::Length::calculationValue((WebCore::Length *)((char *)this + 8));
    (*(void (**)(_QWORD, float))(**(_QWORD **)(v12 + 8) + 16))(*(_QWORD *)(v12 + 8), v11);
  }
  return v6;
}

void WebCore::GridTrackSize::~GridTrackSize(WebCore::GridTrackSize *this)
{
  if (*((_BYTE *)this + 60) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 14));
  }
  if (*((_BYTE *)this + 36) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 8));
  }
  if (*((_BYTE *)this + 12) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 2));
  }
}

uint64_t WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  WTF *v19;
  WTF *v20;
  char v21;
  char v22;

  if (a2 != (uint64_t *)a1)
  {
    v4 = *(_DWORD *)(a1 + 12);
    v5 = *((unsigned int *)a2 + 3);
    if (v4 > v5)
    {
      WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, v5);
    }
    else
    {
      v6 = *(_DWORD *)(a1 + 8);
      if (v5 > v6)
      {
        if (v6)
        {
          if (v4)
            WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(a1, 0);
          v19 = *(WTF **)a1;
          if (*(_QWORD *)a1)
          {
            *(_QWORD *)a1 = 0;
            *(_DWORD *)(a1 + 8) = 0;
            WTF::fastFree(v19, (void *)v5);
          }
        }
        WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, *((unsigned int *)a2 + 3));
      }
    }
    v7 = *a2;
    v8 = *(unsigned int *)(a1 + 12);
    v9 = *(WTF **)a1;
    if ((_DWORD)v8)
    {
      v10 = 96 * v8;
      while (1)
      {
        v11 = *((unsigned int *)v9 + 22);
        v12 = *(unsigned int *)(v7 + 88);
        if ((_DWORD)v11 == -1)
        {
          if ((_DWORD)v12 == -1)
            goto LABEL_11;
        }
        else if ((_DWORD)v12 == -1)
        {
          ((void (*)(char *, WTF *))off_1E3442648[v11])(&v21, v9);
          *((_DWORD *)v9 + 22) = -1;
          goto LABEL_11;
        }
        v20 = v9;
        ((void (*)(WTF **, WTF *, uint64_t))off_1E3442688[v12])(&v20, v9, v7);
LABEL_11:
        v7 += 96;
        v9 = (WTF *)((char *)v9 + 96);
        v10 -= 96;
        if (!v10)
        {
          v7 = *a2;
          LODWORD(v8) = *(_DWORD *)(a1 + 12);
          v9 = *(WTF **)a1;
          break;
        }
      }
    }
    v13 = *((_DWORD *)a2 + 3);
    if ((_DWORD)v8 != v13)
    {
      v14 = (char *)v9 + 96 * v8;
      v15 = v7 + 96 * v8;
      v16 = 96 * v13 - 96 * v8;
      do
      {
        *v14 = 0;
        *((_DWORD *)v14 + 22) = -1;
        v17 = *(unsigned int *)(v15 + 88);
        if ((_DWORD)v17 != -1)
        {
          ((void (*)(char *, char *, uint64_t))off_1E34426D8[v17])(&v22, v14, v15);
          *((_DWORD *)v14 + 22) = v17;
        }
        v14 += 96;
        v15 += 96;
        v16 -= 96;
      }
      while (v16);
      LODWORD(v8) = *((_DWORD *)a2 + 3);
    }
    *(_DWORD *)(a1 + 12) = v8;
  }
  return a1;
}

uint64_t WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v2 = a2;
  v3 = result;
  v4 = *(unsigned int *)(result + 12);
  if (v4 != a2)
  {
    v5 = *(_QWORD *)result + 96 * a2;
    v6 = 96 * v4 - 96 * a2;
    do
    {
      v7 = *(unsigned int *)(v5 + 88);
      if ((_DWORD)v7 != -1)
        result = ((uint64_t (*)(char *, uint64_t))off_1E3442648[v7])(&v8, v5);
      *(_DWORD *)(v5 + 88) = -1;
      v5 += 96;
      v6 -= 96;
    }
    while (v6);
  }
  *(_DWORD *)(v3 + 12) = v2;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore13GridTrackSizeEN3WTF6VectorINSA_6StringELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEENS8_20GridTrackEntryRepeatENS8_24GridTrackEntryAutoRepeatENS8_21GridTrackEntrySubgridENS8_21GridTrackEntryMasonryEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJS9_SF_SG_SH_SI_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v7;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 88);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
      return WebCore::GridTrackSize::operator=(a2, a3);
    ((void (*)(char *, uint64_t))off_1E3442648[v5])(&v7, v4);
  }
  *(_DWORD *)(v4 + 88) = -1;
  result = WebCore::GridTrackSize::GridTrackSize(v4, a3);
  *(_DWORD *)(v4 + 88) = 0;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore13GridTrackSizeEN3WTF6VectorINSA_6StringELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEENS8_20GridTrackEntryRepeatENS8_24GridTrackEntryAutoRepeatENS8_21GridTrackEntrySubgridENS8_21GridTrackEntryMasonryEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJS9_SF_SG_SH_SI_SJ_EEERKS10_EEEDcSS_DpT0_(unsigned int *result, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD **v8;
  uint64_t v9;
  _DWORD *v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 88);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a2, a3);
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))off_1E3442648[v5])(&v11, v4);
  }
  *(_DWORD *)(v4 + 88) = -1;
  v6 = a3[3];
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 12) = v6;
  if (!(_DWORD)v6)
    goto LABEL_6;
  if (!(v6 >> 29))
  {
    result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v6));
    *(_DWORD *)(v4 + 8) = v6;
    *(_QWORD *)v4 = result;
    v7 = a3[3];
    if ((_DWORD)v7)
    {
      v8 = *(_DWORD ***)a3;
      v9 = 8 * v7;
      do
      {
        v10 = *v8;
        if (*v8)
          *v10 += 2;
        *(_QWORD *)result = v10;
        result += 2;
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
LABEL_6:
    *(_DWORD *)(v4 + 88) = 1;
    return result;
  }
  __break(0xC471u);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2ELm2EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore13GridTrackSizeEN3WTF6VectorINSA_6StringELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEENS8_20GridTrackEntryRepeatENS8_24GridTrackEntryAutoRepeatENS8_21GridTrackEntrySubgridENS8_21GridTrackEntryMasonryEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJS9_SF_SG_SH_SI_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 88);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 2)
    {
      *a2 = *a3;
      return WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)(a2 + 2), a3 + 2);
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E3442648[v5])(&v13, v4);
  }
  *(_DWORD *)(v4 + 88) = -1;
  *(_DWORD *)v4 = *a3;
  v6 = a3[5];
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_DWORD *)(v4 + 20) = v6;
  if (!(_DWORD)v6)
    goto LABEL_12;
  if (v6 < 0x2AAAAAB)
  {
    v7 = 96 * v6;
    result = WTF::fastMalloc((WTF *)(96 * v6));
    *(_DWORD *)(v4 + 16) = (v7 & 0xFFFFFFE0) / 0x60;
    *(_QWORD *)(v4 + 8) = result;
    v8 = a3[5];
    if ((_DWORD)v8)
    {
      v9 = result;
      v10 = *((_QWORD *)a3 + 1);
      v11 = 96 * v8;
      do
      {
        *(_BYTE *)v9 = 0;
        *(_DWORD *)(v9 + 88) = -1;
        v12 = *(unsigned int *)(v10 + 88);
        if ((_DWORD)v12 != -1)
        {
          result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34426C8[v12])(&v14, v9, v10);
          *(_DWORD *)(v9 + 88) = v12;
        }
        v9 += 96;
        v10 += 96;
        v11 -= 96;
      }
      while (v11);
    }
LABEL_12:
    *(_DWORD *)(v4 + 88) = 2;
    return result;
  }
  __break(0xC471u);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm3ELm3EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore13GridTrackSizeEN3WTF6VectorINSA_6StringELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEENS8_20GridTrackEntryRepeatENS8_24GridTrackEntryAutoRepeatENS8_21GridTrackEntrySubgridENS8_21GridTrackEntryMasonryEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJS9_SF_SG_SH_SI_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t result, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 88);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 3)
    {
      *a2 = *(_BYTE *)a3;
      return WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=((uint64_t)(a2 + 8), (unsigned int *)(a3 + 8));
    }
    result = ((uint64_t (*)(char *, uint64_t))off_1E3442648[v5])(&v13, v4);
  }
  *(_DWORD *)(v4 + 88) = -1;
  *(_BYTE *)v4 = *(_BYTE *)a3;
  v6 = *(unsigned int *)(a3 + 20);
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_DWORD *)(v4 + 20) = v6;
  if (!(_DWORD)v6)
    goto LABEL_12;
  if (v6 < 0x2AAAAAB)
  {
    v7 = 96 * v6;
    result = WTF::fastMalloc((WTF *)(96 * v6));
    *(_DWORD *)(v4 + 16) = (v7 & 0xFFFFFFE0) / 0x60;
    *(_QWORD *)(v4 + 8) = result;
    v8 = *(unsigned int *)(a3 + 20);
    if ((_DWORD)v8)
    {
      v9 = result;
      v10 = *(_QWORD *)(a3 + 8);
      v11 = 96 * v8;
      do
      {
        *(_BYTE *)v9 = 0;
        *(_DWORD *)(v9 + 88) = -1;
        v12 = *(unsigned int *)(v10 + 88);
        if ((_DWORD)v12 != -1)
        {
          result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_1E34426C8[v12])(&v14, v9, v10);
          *(_DWORD *)(v9 + 88) = v12;
        }
        v9 += 96;
        v10 += 96;
        v11 -= 96;
      }
      while (v11);
    }
LABEL_12:
    *(_DWORD *)(v4 + 88) = 3;
    return result;
  }
  __break(0xC471u);
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm4ELm4EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore13GridTrackSizeEN3WTF6VectorINSA_6StringELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEENS8_20GridTrackEntryRepeatENS8_24GridTrackEntryAutoRepeatENS8_21GridTrackEntrySubgridENS8_21GridTrackEntryMasonryEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJS9_SF_SG_SH_SI_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 88);
  if ((_DWORD)v2 != -1)
  {
    if ((_DWORD)v2 == 4)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E3442648[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 88) = 4;
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm5ELm5EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore13GridTrackSizeEN3WTF6VectorINSA_6StringELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEENS8_20GridTrackEntryRepeatENS8_24GridTrackEntryAutoRepeatENS8_21GridTrackEntrySubgridENS8_21GridTrackEntryMasonryEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISK_LNS0_6_TraitE1EEEEEvOT_EUlRSS_OT0_E_JRNS0_6__baseILSO_1EJS9_SF_SG_SH_SI_SJ_EEERKS10_EEEDcSS_DpT0_(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)result;
  v2 = *(unsigned int *)(*(_QWORD *)result + 88);
  if ((_DWORD)v2 != -1)
  {
    if ((_DWORD)v2 == 5)
      return result;
    result = ((uint64_t (*)(char *, uint64_t))off_1E3442648[v2])(&v3, v1);
  }
  *(_DWORD *)(v1 + 88) = 5;
  return result;
}

uint64_t WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  char v25;
  unsigned int *v26;
  char v27;
  char v28;

  if (a2 == (unsigned int *)a1)
    return a1;
  v4 = *(unsigned int *)(a1 + 12);
  v5 = a2[3];
  if (v4 <= v5)
  {
    v9 = *(_DWORD *)(a1 + 8);
    if (v5 <= v9)
    {
      v5 = *(unsigned int *)(a1 + 12);
      goto LABEL_21;
    }
    if (v9)
    {
      v10 = *(unsigned int **)a1;
      if ((_DWORD)v4)
      {
        v11 = 96 * v4;
        do
        {
          v12 = v10[22];
          if ((_DWORD)v12 != -1)
            ((void (*)(char *, unsigned int *))off_1E3442678[v12])(&v25, v10);
          v10[22] = -1;
          v10 += 24;
          v11 -= 96;
        }
        while (v11);
        *(_DWORD *)(a1 + 12) = 0;
        v10 = *(unsigned int **)a1;
      }
      if (v10)
      {
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 8) = 0;
        WTF::fastFree((WTF *)v10, a2);
      }
    }
    WTF::Vector<std::variant<WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2[3]);
    v5 = *(unsigned int *)(a1 + 12);
  }
  else
  {
    v6 = *(_QWORD *)a1 + 96 * v5;
    v7 = 96 * v4 - 96 * v5;
    do
    {
      v8 = *(unsigned int *)(v6 + 88);
      if ((_DWORD)v8 != -1)
        ((void (*)(char *, uint64_t))off_1E3442678[v8])(&v24, v6);
      *(_DWORD *)(v6 + 88) = -1;
      v6 += 96;
      v7 -= 96;
    }
    while (v7);
    *(_DWORD *)(a1 + 12) = v5;
  }
  LODWORD(v4) = v5;
LABEL_21:
  v13 = *(_QWORD *)a2;
  v14 = *(unsigned int **)a1;
  if (!(_DWORD)v4)
    goto LABEL_30;
  v15 = 96 * v5;
  do
  {
    v16 = v14[22];
    v17 = *(unsigned int *)(v13 + 88);
    if ((_DWORD)v16 == -1)
    {
      if ((_DWORD)v17 == -1)
        goto LABEL_28;
    }
    else if ((_DWORD)v17 == -1)
    {
      ((void (*)(char *, unsigned int *))off_1E3442678[v16])(&v27, v14);
      v14[22] = -1;
      goto LABEL_28;
    }
    v26 = v14;
    ((void (*)(unsigned int **, unsigned int *, uint64_t))off_1E34426B8[v17])(&v26, v14, v13);
LABEL_28:
    v13 += 96;
    v14 += 24;
    v15 -= 96;
  }
  while (v15);
  v13 = *(_QWORD *)a2;
  LODWORD(v4) = *(_DWORD *)(a1 + 12);
  v14 = *(unsigned int **)a1;
LABEL_30:
  v18 = a2[3];
  if ((_DWORD)v4 != v18)
  {
    v19 = &v14[24 * v4];
    v20 = v13 + 96 * v4;
    v21 = 96 * v18 - 96 * v4;
    do
    {
      *(_BYTE *)v19 = 0;
      v19[22] = -1;
      v22 = *(unsigned int *)(v20 + 88);
      if ((_DWORD)v22 != -1)
      {
        ((void (*)(char *, unsigned int *, uint64_t))off_1E34426C8[v22])(&v28, v19, v20);
        v19[22] = v22;
      }
      v19 += 24;
      v20 += 96;
      v21 -= 96;
    }
    while (v21);
    LODWORD(v4) = a2[3];
  }
  *(_DWORD *)(a1 + 12) = v4;
  return a1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0ELm0EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore13GridTrackSizeEN3WTF6VectorINSA_6StringELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSK_1EJS9_SF_EEERKSW_EEEDcSO_DpT0_(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v7;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 88);
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
      return WebCore::GridTrackSize::operator=(a2, a3);
    ((void (*)(char *, uint64_t))off_1E3442678[v5])(&v7, v4);
  }
  *(_DWORD *)(v4 + 88) = -1;
  result = WebCore::GridTrackSize::GridTrackSize(v4, a3);
  *(_DWORD *)(v4 + 88) = 0;
  return result;
}

unsigned int *_ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_12__assignmentINS0_8__traitsIJN7WebCore13GridTrackSizeEN3WTF6VectorINSA_6StringELm0ENSA_15CrashOnOverflowELm16ENSA_10FastMallocEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISG_LNS0_6_TraitE1EEEEEvOT_EUlRSO_OT0_E_JRNS0_6__baseILSK_1EJS9_SF_EEERKSW_EEEDcSO_DpT0_(unsigned int *result, unsigned int *a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD **v8;
  uint64_t v9;
  _DWORD *v10;
  char v11;

  v4 = *(_QWORD *)result;
  v5 = *(unsigned int *)(*(_QWORD *)result + 88);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(a2, a3);
    result = (unsigned int *)((uint64_t (*)(char *, uint64_t))off_1E3442678[v5])(&v11, v4);
  }
  *(_DWORD *)(v4 + 88) = -1;
  v6 = a3[3];
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 12) = v6;
  if (!(_DWORD)v6)
    goto LABEL_6;
  if (!(v6 >> 29))
  {
    result = (unsigned int *)WTF::fastMalloc((WTF *)(8 * v6));
    *(_DWORD *)(v4 + 8) = v6;
    *(_QWORD *)v4 = result;
    v7 = a3[3];
    if ((_DWORD)v7)
    {
      v8 = *(_DWORD ***)a3;
      v9 = 8 * v7;
      do
      {
        v10 = *v8;
        if (*v8)
          *v10 += 2;
        *(_QWORD *)result = v10;
        result += 2;
        ++v8;
        v9 -= 8;
      }
      while (v9);
    }
LABEL_6:
    *(_DWORD *)(v4 + 88) = 1;
    return result;
  }
  __break(0xC471u);
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_0,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_1,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_2,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_3,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_4,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_5> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry> const&>(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  ++***(_DWORD ***)a1;
  v3 = *(unsigned int *)(v2 + 12);
  if ((_DWORD)v3 == *(_DWORD *)(v2 + 8))
  {
    a2 = WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v2, v3 + 1, a2);
    v4 = *(_QWORD *)v2 + 88 * *(unsigned int *)(v2 + 12);
  }
  else
  {
    v4 = *(_QWORD *)v2 + 88 * v3;
  }
  result = WebCore::GridTrackSize::GridTrackSize(v4, a2);
  ++*(_DWORD *)(v2 + 12);
  return result;
}

WTF::StringImpl *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_0,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_1,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_2,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_3,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_4,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_5> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry> const&>(uint64_t *a1, WTF::StringImpl *a2)
{
  uint64_t v2;
  WTF::StringImpl *result;

  v2 = *a1;
  result = WebCore::createGridLineNamesList(a2, (WTF::StringImpl *)**(unsigned int **)(*a1 + 16), *(uint64_t **)(*a1 + 24), *(uint64_t **)(*a1 + 32));
  if (**(_BYTE **)(v2 + 40))
    ++**(_DWORD **)(v2 + 16);
  return result;
}

char *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_0,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_1,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_2,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_3,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_4,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_5> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry> const&>(char *result, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  WTF::StringImpl *v9;
  _DWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t v55;

  if (!*a2)
    return result;
  v2 = a2[5];
  if (!(_DWORD)v2)
    return result;
  v3 = 0;
  v4 = *(_QWORD *)result;
  v54 = a2;
LABEL_4:
  v55 = v3;
  v5 = 0;
  v6 = *((_QWORD *)a2 + 1);
  v7 = 96 * v2;
  do
  {
    v8 = *(_DWORD **)(v4 + 48);
    v9 = (WTF::StringImpl *)*v8;
    if (*(_DWORD *)(v6 + v5 + 88) == 1)
    {
      result = (char *)WebCore::createGridLineNamesList((WTF::StringImpl *)(v6 + v5), v9, *(uint64_t **)(v4 + 56), *(uint64_t **)(v4 + 64));
      if (!**(_BYTE **)(v4 + 72))
        goto LABEL_44;
      v10 = *(_DWORD **)(v4 + 48);
    }
    else
    {
      *v8 = (_DWORD)v9 + 1;
      if (*(_DWORD *)(v6 + v5 + 88))
      {
        v53 = std::__throw_bad_variant_access[abi:sn180100]();
        return (char *)std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_0,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_1,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_2,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_3,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_4,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_5> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry> const&>(v53);
      }
      v11 = *(uint64_t **)(v4 + 80);
      v10 = (_DWORD *)v11 + 3;
      v12 = *((unsigned int *)v11 + 3);
      if (*((_DWORD *)v11 + 3) == *((_DWORD *)v11 + 2))
      {
        v19 = WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(v4 + 80), v12 + 1, v6 + v5);
        v20 = *((_DWORD *)v11 + 3);
        v21 = *v11;
        v22 = v21 + 88 * v20;
        *(_DWORD *)v22 = *(_DWORD *)v19;
        *(_DWORD *)(v22 + 8) = 0;
        v23 = (int *)(v22 + 8);
        *(_WORD *)(v22 + 13) = 0;
        v24 = *(unsigned __int8 *)(v19 + 12);
        *(_BYTE *)(v22 + 12) = v24;
        *(_BYTE *)(v22 + 13) = *(_BYTE *)(v19 + 13);
        if (v24 <= 0xD)
        {
          v25 = 1 << v24;
          if ((v25 & 0x7FC) != 0)
          {
            *(_BYTE *)(v22 + 14) = *(_BYTE *)(v19 + 14);
            *v23 = *(_DWORD *)(v19 + 8);
          }
          else if ((v25 & 0x3003) != 0)
          {
            *v23 = 0;
          }
          else
          {
            *v23 = *(_DWORD *)(v19 + 8);
            WebCore::Length::ref(v23);
          }
        }
        v41 = v21 + 88 * v20;
        v42 = *(_QWORD *)(v19 + 16);
        v43 = *(_DWORD *)(v19 + 24);
        *(_DWORD *)(v41 + 32) = 0;
        v44 = v41 + 32;
        *(_DWORD *)(v44 - 8) = v43;
        *(_QWORD *)(v44 - 16) = v42;
        *(_WORD *)(v44 + 5) = 0;
        v45 = *(unsigned __int8 *)(v19 + 36);
        *(_BYTE *)(v44 + 4) = v45;
        *(_BYTE *)(v44 + 5) = *(_BYTE *)(v19 + 37);
        if (v45 <= 0xD)
        {
          v46 = 1 << v45;
          if ((v46 & 0x7FC) != 0)
          {
            *(_BYTE *)(v44 + 6) = *(_BYTE *)(v19 + 38);
            *(_DWORD *)v44 = *(_DWORD *)(v19 + 32);
          }
          else if ((v46 & 0x3003) != 0)
          {
            *(_DWORD *)v44 = 0;
          }
          else
          {
            *(_DWORD *)v44 = *(_DWORD *)(v19 + 32);
            WebCore::Length::ref((int *)v44);
          }
        }
        v47 = v21 + 88 * v20;
        v48 = *(_QWORD *)(v19 + 40);
        v49 = *(_DWORD *)(v19 + 48);
        *(_DWORD *)(v47 + 56) = 0;
        result = (char *)(v47 + 56);
        *((_DWORD *)result - 2) = v49;
        *((_QWORD *)result - 2) = v48;
        *(_WORD *)(result + 5) = 0;
        v50 = *(unsigned __int8 *)(v19 + 60);
        result[4] = v50;
        result[5] = *(_BYTE *)(v19 + 61);
        if (v50 <= 0xD)
        {
          v51 = 1 << v50;
          if ((v51 & 0x7FC) != 0)
          {
            result[6] = *(_BYTE *)(v19 + 62);
            *(_DWORD *)result = *(_DWORD *)(v19 + 56);
          }
          else if ((v51 & 0x3003) != 0)
          {
            *(_DWORD *)result = 0;
          }
          else
          {
            *(_DWORD *)result = *(_DWORD *)(v19 + 56);
            result = (char *)WebCore::Length::ref((int *)result);
          }
        }
        v38 = v21 + 88 * v20;
        v52 = *(_QWORD *)(v19 + 64);
        *(_DWORD *)(v38 + 72) = *(_DWORD *)(v19 + 72);
        *(_QWORD *)(v38 + 64) = v52;
        v40 = *(_WORD *)(v19 + 80);
      }
      else
      {
        v13 = *v11;
        v14 = v13 + 88 * v12;
        v15 = v6 + v5;
        *(_DWORD *)v14 = *(_DWORD *)(v6 + v5);
        *(_DWORD *)(v14 + 8) = 0;
        v16 = (int *)(v14 + 8);
        *(_WORD *)(v14 + 13) = 0;
        v17 = *(unsigned __int8 *)(v6 + v5 + 12);
        *(_BYTE *)(v14 + 12) = v17;
        *(_BYTE *)(v14 + 13) = *(_BYTE *)(v6 + v5 + 13);
        if (v17 <= 0xD)
        {
          v18 = 1 << v17;
          if ((v18 & 0x7FC) != 0)
          {
            *(_BYTE *)(v14 + 14) = *(_BYTE *)(v6 + v5 + 14);
            *v16 = *(_DWORD *)(v15 + 8);
          }
          else if ((v18 & 0x3003) != 0)
          {
            *v16 = 0;
          }
          else
          {
            *v16 = *(_DWORD *)(v15 + 8);
            WebCore::Length::ref(v16);
          }
        }
        v26 = v13 + 88 * v12;
        v27 = *(_QWORD *)(v15 + 16);
        v28 = *(_DWORD *)(v15 + 24);
        *(_DWORD *)(v26 + 32) = 0;
        v29 = v26 + 32;
        *(_DWORD *)(v29 - 8) = v28;
        *(_QWORD *)(v29 - 16) = v27;
        *(_WORD *)(v29 + 5) = 0;
        v30 = *(unsigned __int8 *)(v15 + 36);
        *(_BYTE *)(v29 + 4) = v30;
        *(_BYTE *)(v29 + 5) = *(_BYTE *)(v15 + 37);
        if (v30 <= 0xD)
        {
          v31 = 1 << v30;
          if ((v31 & 0x7FC) != 0)
          {
            *(_BYTE *)(v29 + 6) = *(_BYTE *)(v6 + v5 + 38);
            *(_DWORD *)v29 = *(_DWORD *)(v15 + 32);
          }
          else if ((v31 & 0x3003) != 0)
          {
            *(_DWORD *)v29 = 0;
          }
          else
          {
            *(_DWORD *)v29 = *(_DWORD *)(v15 + 32);
            WebCore::Length::ref((int *)v29);
          }
        }
        v32 = v13 + 88 * v12;
        v33 = v6 + v5;
        v34 = *(_QWORD *)(v6 + v5 + 40);
        v35 = *(_DWORD *)(v6 + v5 + 48);
        *(_DWORD *)(v32 + 56) = 0;
        result = (char *)(v32 + 56);
        *((_DWORD *)result - 2) = v35;
        *((_QWORD *)result - 2) = v34;
        *(_WORD *)(result + 5) = 0;
        v36 = *(unsigned __int8 *)(v6 + v5 + 60);
        result[4] = v36;
        result[5] = *(_BYTE *)(v6 + v5 + 61);
        if (v36 <= 0xD)
        {
          v37 = 1 << v36;
          if ((v37 & 0x7FC) != 0)
          {
            result[6] = *(_BYTE *)(v6 + v5 + 62);
            *(_DWORD *)result = *(_DWORD *)(v33 + 56);
          }
          else if ((v37 & 0x3003) != 0)
          {
            *(_DWORD *)result = 0;
          }
          else
          {
            *(_DWORD *)result = *(_DWORD *)(v33 + 56);
            result = (char *)WebCore::Length::ref((int *)result);
          }
        }
        v38 = v13 + 88 * v12;
        v39 = *(_QWORD *)(v33 + 64);
        *(_DWORD *)(v38 + 72) = *(_DWORD *)(v33 + 72);
        *(_QWORD *)(v38 + 64) = v39;
        v40 = *(_WORD *)(v33 + 80);
      }
      *(_WORD *)(v38 + 80) = v40;
    }
    ++*v10;
LABEL_44:
    v5 += 96;
  }
  while (v7 != v5);
  a2 = v54;
  v3 = v55;
  while (++v3 < (unint64_t)*v54)
  {
    v2 = v54[5];
    if (v54[5])
      goto LABEL_4;
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_0,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_1,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_2,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_3,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_4,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_5> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry> const&>(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  WTF::StringImpl *v5;
  uint64_t v6;
  _DWORD *v7;
  WTF::StringImpl *v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;

  v2 = *(_QWORD *)result;
  v3 = *(_BYTE **)(*(_QWORD *)result + 96);
  **(_DWORD **)(*(_QWORD *)result + 88) = 0;
  *v3 = *(_BYTE *)a2;
  v4 = *(unsigned int *)(a2 + 20);
  if ((_DWORD)v4)
  {
    v5 = *(WTF::StringImpl **)(a2 + 8);
    v6 = 96 * v4;
    while (1)
    {
      v7 = *(_DWORD **)(v2 + 88);
      v8 = (WTF::StringImpl *)*v7;
      if (*((_DWORD *)v5 + 22) != 1)
        break;
      result = (uint64_t)WebCore::createGridLineNamesList(v5, v8, *(uint64_t **)(v2 + 104), *(uint64_t **)(v2 + 112));
      if (**(_BYTE **)(v2 + 120))
      {
        v9 = *(_DWORD **)(v2 + 88);
LABEL_11:
        ++*v9;
      }
      v5 = (WTF::StringImpl *)((char *)v5 + 96);
      v6 -= 96;
      if (!v6)
        goto LABEL_13;
    }
    *v7 = (_DWORD)v8 + 1;
    if (*((_DWORD *)v5 + 22))
    {
      v15 = std::__throw_bad_variant_access[abi:sn180100]();
      return std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_0,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_1,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_2,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_3,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_4,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_5> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry> const&>(v15);
    }
    v10 = *(_QWORD *)(v2 + 128);
    v9 = (_DWORD *)(v10 + 12);
    v11 = *(unsigned int *)(v10 + 12);
    if (*(_DWORD *)(v10 + 12) == *(_DWORD *)(v10 + 8))
    {
      v13 = WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(*(_QWORD *)(v2 + 128), v11 + 1, (unint64_t)v5);
      v12 = *(_QWORD *)v10 + 88 * *(unsigned int *)(v10 + 12);
    }
    else
    {
      v12 = *(_QWORD *)v10 + 88 * v11;
      v13 = (unint64_t)v5;
    }
    result = WebCore::GridTrackSize::GridTrackSize(v12, v13);
    goto LABEL_11;
  }
LABEL_13:
  v14 = *(_DWORD **)(v2 + 144);
  **(_DWORD **)(v2 + 136) = *v14;
  if (!**(_BYTE **)(v2 + 120))
    ++*v14;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_0,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_1,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_2,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_3,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_4,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_5> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry> const&>(uint64_t result)
{
  **(_BYTE **)(*(_QWORD *)result + 152) = 1;
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_0,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_1,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_2,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_3,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_4,WebCore::StyleGridData::computeCachedTrackData(WebCore::GridTrackList const&,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> &,WebCore::NamedGridLinesMap &,WebCore::OrderedNamedGridLinesMap &,unsigned int &,WebCore::AutoRepeatType &,BOOL &,BOOL &)::$_5> &> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::GridTrackSize,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WebCore::GridTrackEntryRepeat,WebCore::GridTrackEntryAutoRepeat,WebCore::GridTrackEntrySubgrid,WebCore::GridTrackEntryMasonry> const&>(uint64_t result)
{
  **(_BYTE **)(*(_QWORD *)result + 160) = 1;
  return result;
}

unint64_t WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = a3;
  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v4 + 88 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v6 = a3 - v4;
    WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v6;
  }
  else
  {
    WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

void WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  WTF *v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  WebCore::GridTrackSize *v13;

  v2 = *(unsigned int *)(a1 + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v4 = a2;
  if (v4 > v2)
  {
    if (v4 >= 0x2E8BA2F)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = *(WTF **)a1;
      v7 = *(_DWORD *)(a1 + 12);
      v8 = 88 * v4;
      v9 = WTF::fastMalloc((WTF *)(88 * v4));
      *(_DWORD *)(a1 + 8) = (v8 & 0xFFFFFFF8) / 0x58;
      *(_QWORD *)a1 = v9;
      if (v7)
      {
        v11 = v9;
        v12 = 88 * v7;
        v13 = v6;
        do
        {
          WebCore::GridTrackSize::GridTrackSize(v11, (uint64_t)v13);
          WebCore::GridTrackSize::~GridTrackSize(v13);
          v11 += 88;
          v13 = (WebCore::GridTrackSize *)((char *)v13 + 88);
          v12 -= 88;
        }
        while (v12);
      }
      if (v6)
      {
        if (*(WTF **)a1 == v6)
        {
          *(_QWORD *)a1 = 0;
          *(_DWORD *)(a1 + 8) = 0;
        }
        WTF::fastFree(v6, v10);
      }
    }
  }
}

WTF::StringImpl *WebCore::createGridLineNamesList(WTF::StringImpl *result, WTF::StringImpl *a2, uint64_t *a3, uint64_t *a4)
{
  int v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  WTF::StringImpl *v13;
  int v14;
  WTF *v15;
  WTF::StringImpl *v16;
  WTF **v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  WTF::StringImpl **v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl *v35;
  WTF *v36[2];
  uint64_t v37[3];
  int v38;

  v6 = (int)a2;
  v7 = result;
  v38 = (int)a2;
  v8 = *a4;
  if (*a4
    || (result = (WTF::StringImpl *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a4, 8u, 0), (v8 = *a4) != 0))
  {
    v9 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v9 = 0;
  }
  v10 = 9 * ((~(v6 << 15) + v6) ^ ((~(v6 << 15) + v6) >> 10));
  v11 = (v10 ^ (v10 >> 6)) + ~((v10 ^ (v10 >> 6)) << 11);
  v12 = (v11 ^ HIWORD(v11)) & v9;
  v13 = (WTF::StringImpl *)(v8 + 24 * v12);
  v14 = *(_DWORD *)v13;
  if (*(_DWORD *)v13 == -1)
  {
LABEL_4:
    v15 = (WTF *)*((_QWORD *)v13 + 1);
    v16 = v13;
LABEL_5:
    *(_DWORD *)v16 = v6;
    v17 = (WTF **)((char *)v16 + 8);
    v18 = *((unsigned int *)v16 + 5);
    if ((_DWORD)v18)
    {
      v27 = 8 * v18;
      do
      {
        result = *(WTF::StringImpl **)v15;
        *(_QWORD *)v15 = 0;
        if (result)
        {
          if (*(_DWORD *)result == 2)
            result = (WTF::StringImpl *)WTF::StringImpl::destroy(result, a2);
          else
            *(_DWORD *)result -= 2;
        }
        v15 = (WTF *)((char *)v15 + 8);
        v27 -= 8;
      }
      while (v27);
      v15 = *v17;
    }
    if (v15)
    {
      *((_QWORD *)v16 + 1) = 0;
      *((_DWORD *)v16 + 4) = 0;
      result = (WTF::StringImpl *)WTF::fastFree(v15, a2);
    }
    *v17 = 0;
    *((_QWORD *)v16 + 2) = 0;
    v19 = *a4;
    if (*a4)
      v20 = *(_DWORD *)(v19 - 12) + 1;
    else
      v20 = 1;
    *(_DWORD *)(v19 - 12) = v20;
    v21 = *a4;
    if (*a4)
      v22 = *(_DWORD *)(v21 - 12);
    else
      v22 = 0;
    v23 = (*(_DWORD *)(v21 - 16) + v22);
    v24 = *(unsigned int *)(v21 - 4);
    if (v24 > 0x400)
    {
      if (v24 > 2 * v23)
        goto LABEL_14;
    }
    else if (3 * v24 > 4 * v23)
    {
LABEL_14:
      v13 = v16;
      goto LABEL_15;
    }
    result = (WTF::StringImpl *)WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand(a4, v16);
    v13 = result;
  }
  else
  {
    v16 = 0;
    v26 = 1;
    while (v14 != v6)
    {
      if (v14 == -2)
        v16 = v13;
      v12 = (v12 + v26) & v9;
      v13 = (WTF::StringImpl *)(v8 + 24 * v12);
      v14 = *(_DWORD *)v13;
      ++v26;
      if (*(_DWORD *)v13 == -1)
      {
        if (!v16)
          goto LABEL_4;
        v15 = 0;
        *(_DWORD *)v16 = -1;
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v16 + 2) = 0;
        --*(_DWORD *)(*a4 - 16);
        v6 = v38;
        goto LABEL_5;
      }
    }
  }
LABEL_15:
  v25 = *((unsigned int *)v7 + 3);
  if ((_DWORD)v25)
  {
    v28 = *(WTF::StringImpl ***)v7;
    v29 = 8 * v25;
    do
    {
      v36[0] = 0;
      v36[1] = 0;
      WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::add<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((uint64_t)v37, a3, v28, (uint64_t *)v36);
      result = v36[0];
      if (v36[0])
        result = (WTF::StringImpl *)WTF::fastFree(v36[0], v30);
      v31 = v37[0];
      v32 = *(unsigned int *)(v37[0] + 20);
      if ((_DWORD)v32 == *(_DWORD *)(v37[0] + 16))
      {
        result = (WTF::StringImpl *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>(v37[0] + 8, (unint64_t)&v38);
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(v37[0] + 8) + 4 * v32) = v38;
        ++*(_DWORD *)(v31 + 20);
      }
      v33 = *((unsigned int *)v13 + 5);
      if ((_DWORD)v33 == *((_DWORD *)v13 + 4))
      {
        result = (WTF::StringImpl *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WTF::String const&>((uint64_t)v13 + 8, (unint64_t)v28);
      }
      else
      {
        v34 = *((_QWORD *)v13 + 1);
        v35 = *v28;
        if (*v28)
          *(_DWORD *)v35 += 2;
        *(_QWORD *)(v34 + 8 * v33) = v35;
        *((_DWORD *)v13 + 5) = v33 + 1;
      }
      ++v28;
      v29 -= 8;
    }
    while (v29);
  }
  return result;
}

_DWORD *WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::expand(uint64_t *a1, WebCore::ContentRuleListResults::Result *a2)
{
  uint64_t v3;
  int v4;
  unsigned int v5;

  v3 = *a1;
  if (*a1 && (v4 = *(_DWORD *)(v3 - 4)) != 0)
    v5 = v4 << (6 * *(_DWORD *)(v3 - 12) >= (2 * v4));
  else
    v5 = 8;
  return WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::rehash(a1, v5, a2);
}

_DWORD *WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,unsigned int &>(uint64_t a1, unint64_t a2)
{
  _DWORD *result;

  result = (_DWORD *)WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

WebCore::StyleGridData *WebCore::StyleGridData::StyleGridData(WebCore::StyleGridData *this, const WebCore::StyleGridData *a2)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;

  *(_DWORD *)this = 1;
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)this + 1, (uint64_t *)a2 + 1);
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)this + 2, (uint64_t *)a2 + 2);
  *((_BYTE *)this + 24) = *((_BYTE *)this + 24) & 0xF0 | *((_BYTE *)a2 + 24) & 0xF;
  *(_QWORD *)((char *)this + 28) = *(_QWORD *)((char *)a2 + 28);
  v4 = *((_DWORD *)a2 + 13);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 13) = v4;
  if (v4)
  {
    if (v4 >= 0x2E8BA2F)
    {
      __break(0xC471u);
      goto LABEL_62;
    }
    v13 = 88 * v4;
    v14 = WTF::fastMalloc((WTF *)(88 * v4));
    *((_DWORD *)this + 12) = (v13 & 0xFFFFFFF8) / 0x58;
    *((_QWORD *)this + 5) = v14;
    v15 = *((_DWORD *)a2 + 13);
    if (v15)
    {
      v16 = *((_QWORD *)a2 + 5);
      v17 = 88 * v15;
      do
      {
        v14 = WebCore::GridTrackSize::GridTrackSize(v14, v16) + 88;
        v16 += 88;
        v17 -= 88;
      }
      while (v17);
    }
  }
  v5 = *((_DWORD *)a2 + 17);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 17) = v5;
  if (v5)
  {
    if (v5 >= 0x2E8BA2F)
    {
      __break(0xC471u);
      JUMPOUT(0x1964F203CLL);
    }
    v18 = 88 * v5;
    v19 = WTF::fastMalloc((WTF *)(88 * v5));
    *((_DWORD *)this + 16) = (v18 & 0xFFFFFFF8) / 0x58;
    *((_QWORD *)this + 7) = v19;
    v20 = *((_DWORD *)a2 + 17);
    if (v20)
    {
      v21 = *((_QWORD *)a2 + 7);
      v22 = 88 * v20;
      do
      {
        v19 = WebCore::GridTrackSize::GridTrackSize(v19, v21) + 88;
        v21 += 88;
        v22 -= 88;
      }
      while (v22);
    }
  }
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WebCore::GridArea>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WebCore::GridArea>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)this + 9, (_QWORD **)a2 + 9);
  *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
  v6 = *((unsigned int *)a2 + 25);
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 25) = v6;
  if ((_DWORD)v6)
  {
    if (v6 >= 0x2AAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x1964F2064);
    }
    v43 = 96 * v6;
    v44 = WTF::fastMalloc((WTF *)(96 * v6));
    *((_DWORD *)this + 24) = (v43 & 0xFFFFFFE0) / 0x60;
    *((_QWORD *)this + 11) = v44;
    v45 = *((unsigned int *)a2 + 25);
    if ((_DWORD)v45)
    {
      v46 = v44;
      v47 = *((_QWORD *)a2 + 11);
      v48 = 96 * v45;
      do
      {
        *(_BYTE *)v46 = 0;
        *(_DWORD *)(v46 + 88) = -1;
        v49 = *(unsigned int *)(v47 + 88);
        if ((_DWORD)v49 != -1)
        {
          ((void (*)(char *, uint64_t, uint64_t))off_1E34426D8[v49])(&v57, v46, v47);
          *(_DWORD *)(v46 + 88) = v49;
        }
        v46 += 96;
        v47 += 96;
        v48 -= 96;
      }
      while (v48);
    }
  }
  v7 = *((unsigned int *)a2 + 29);
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_DWORD *)this + 29) = v7;
  if ((_DWORD)v7)
  {
    if (v7 < 0x2AAAAAB)
    {
      v50 = 96 * v7;
      v51 = WTF::fastMalloc((WTF *)(96 * v7));
      *((_DWORD *)this + 28) = (v50 & 0xFFFFFFE0) / 0x60;
      *((_QWORD *)this + 13) = v51;
      v52 = *((unsigned int *)a2 + 29);
      if ((_DWORD)v52)
      {
        v53 = v51;
        v54 = *((_QWORD *)a2 + 13);
        v55 = 96 * v52;
        do
        {
          *(_BYTE *)v53 = 0;
          *(_DWORD *)(v53 + 88) = -1;
          v56 = *(unsigned int *)(v54 + 88);
          if ((_DWORD)v56 != -1)
          {
            ((void (*)(char *, uint64_t, uint64_t))off_1E34426D8[v56])(&v58, v53, v54);
            *(_DWORD *)(v53 + 88) = v56;
          }
          v53 += 96;
          v54 += 96;
          v55 -= 96;
        }
        while (v55);
      }
      goto LABEL_5;
    }
    __break(0xC471u);
LABEL_62:
    JUMPOUT(0x1964F2034);
  }
LABEL_5:
  v8 = *((_DWORD *)a2 + 33);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 33) = v8;
  if (v8)
  {
    if (v8 >= 0x2E8BA2F)
    {
      __break(0xC471u);
      JUMPOUT(0x1964F2044);
    }
    v23 = 88 * v8;
    v24 = WTF::fastMalloc((WTF *)(88 * v8));
    *((_DWORD *)this + 32) = (v23 & 0xFFFFFFF8) / 0x58;
    *((_QWORD *)this + 15) = v24;
    v25 = *((_DWORD *)a2 + 33);
    if (v25)
    {
      v26 = *((_QWORD *)a2 + 15);
      v27 = 88 * v25;
      do
      {
        v24 = WebCore::GridTrackSize::GridTrackSize(v24, v26) + 88;
        v26 += 88;
        v27 -= 88;
      }
      while (v27);
    }
  }
  v9 = *((_DWORD *)a2 + 37);
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_DWORD *)this + 37) = v9;
  if (v9)
  {
    if (v9 >= 0x2E8BA2F)
    {
      __break(0xC471u);
      JUMPOUT(0x1964F204CLL);
    }
    v28 = 88 * v9;
    v29 = WTF::fastMalloc((WTF *)(88 * v9));
    *((_DWORD *)this + 36) = (v28 & 0xFFFFFFF8) / 0x58;
    *((_QWORD *)this + 17) = v29;
    v30 = *((_DWORD *)a2 + 37);
    if (v30)
    {
      v31 = *((_QWORD *)a2 + 17);
      v32 = 88 * v30;
      do
      {
        v29 = WebCore::GridTrackSize::GridTrackSize(v29, v31) + 88;
        v31 += 88;
        v32 -= 88;
      }
      while (v32);
    }
  }
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)this + 19, (uint64_t *)a2 + 19);
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)this + 20, (uint64_t *)a2 + 20);
  WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::HashTable((uint64_t *)this + 21, (uint64_t *)a2 + 21);
  WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::HashTable((uint64_t *)this + 22, (uint64_t *)a2 + 22);
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)this + 23, (uint64_t *)a2 + 23);
  WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::HashTable((uint64_t *)this + 24, (uint64_t *)a2 + 24);
  WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::HashTable((uint64_t *)this + 25, (uint64_t *)a2 + 25);
  WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::HashTable((uint64_t *)this + 26, (uint64_t *)a2 + 26);
  v10 = *((_DWORD *)a2 + 57);
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_DWORD *)this + 57) = v10;
  if (v10)
  {
    if (v10 >= 0x2E8BA2F)
    {
      __break(0xC471u);
      JUMPOUT(0x1964F2054);
    }
    v33 = 88 * v10;
    v34 = WTF::fastMalloc((WTF *)(88 * v10));
    *((_DWORD *)this + 56) = (v33 & 0xFFFFFFF8) / 0x58;
    *((_QWORD *)this + 27) = v34;
    v35 = *((_DWORD *)a2 + 57);
    if (v35)
    {
      v36 = *((_QWORD *)a2 + 27);
      v37 = 88 * v35;
      do
      {
        v34 = WebCore::GridTrackSize::GridTrackSize(v34, v36) + 88;
        v36 += 88;
        v37 -= 88;
      }
      while (v37);
    }
  }
  v11 = *((_DWORD *)a2 + 61);
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_DWORD *)this + 61) = v11;
  if (v11)
  {
    if (v11 >= 0x2E8BA2F)
    {
      __break(0xC471u);
      JUMPOUT(0x1964F205CLL);
    }
    v38 = 88 * v11;
    v39 = WTF::fastMalloc((WTF *)(88 * v11));
    *((_DWORD *)this + 60) = (v38 & 0xFFFFFFF8) / 0x58;
    *((_QWORD *)this + 29) = v39;
    v40 = *((_DWORD *)a2 + 61);
    if (v40)
    {
      v41 = *((_QWORD *)a2 + 29);
      v42 = 88 * v40;
      do
      {
        v39 = WebCore::GridTrackSize::GridTrackSize(v39, v41) + 88;
        v41 += 88;
        v42 -= 88;
      }
      while (v42);
    }
  }
  *((_QWORD *)this + 31) = *((_QWORD *)a2 + 31);
  *((_DWORD *)this + 64) = *((_DWORD *)a2 + 64);
  *((_WORD *)this + 130) = *((_WORD *)a2 + 130);
  return this;
}

uint64_t WTF::Detail::CallableWrapper<WebCore::StyleFilterImage::image(WebCore::RenderElement const*,WebCore::FloatSize const&,BOOL)::$_0,void,WebCore::GraphicsContext &>::call(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  float v5;
  int v6;
  uint64_t v8;
  float v9;
  int v10;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = **(_QWORD **)(a1 + 8);
  v5 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 168))(v4, 0);
  v8 = 0;
  v9 = v5;
  v10 = v6;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a2 + 360))(a2, v4, v3, &v8, 545);
}

uint64_t WTF::WeakHashMap<WebCore::RenderElement,unsigned int,WTF::SingleThreadWeakPtrImpl>::begin(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *a2;
  if (!*a2)
  {
    v5 = 0;
    v3 = 0;
LABEL_15:
    v4 = v2 + 16 * v3;
    goto LABEL_8;
  }
  v3 = *(unsigned int *)(v2 - 4);
  v4 = v2 + 16 * v3;
  if (!*(_DWORD *)(v2 - 12))
  {
    v5 = v2 + 16 * v3;
    goto LABEL_15;
  }
  v5 = *a2;
  if ((_DWORD)v3)
  {
    v6 = 16 * v3;
    v5 = *a2;
    while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
    {
      v5 += 16;
      v6 -= 16;
      if (!v6)
      {
        v5 = v4;
        break;
      }
    }
  }
LABEL_8:
  *(_QWORD *)result = a2;
  *(_QWORD *)(result + 8) = v5;
  *(_QWORD *)(result + 16) = v4;
  if (v2)
  {
    v7 = *(unsigned int *)(v2 - 4);
    v8 = v2 + 16 * v7;
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  *(_QWORD *)(result + 24) = v8;
  *(_QWORD *)(result + 32) = v2 + 16 * v7;
  *(_DWORD *)(result + 40) = 0;
LABEL_11:
  while (v5 != v8 && !*(_QWORD *)(*(_QWORD *)v5 + 8))
  {
    v9 = v5 + 16;
    *(_QWORD *)(result + 8) = v5 + 16;
    v5 = v4;
    if (v9 != v4)
    {
      v5 = v9;
      while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
      {
        v5 += 16;
        *(_QWORD *)(result + 8) = v5;
        if (v5 == v4)
        {
          v5 = v4;
          goto LABEL_11;
        }
      }
    }
  }
  return result;
}

unint64_t WTF::IdentityHashTranslator<WTF::HashMap<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>,WTF::DefaultHash<WebCore::FloatSize>,WTF::HashTraits<WebCore::FloatSize>,WTF::HashTraits<std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::FloatSize>>::hash<WebCore::FloatSize>(unsigned int a1, unsigned int a2)
{
  int8x8_t v2;
  int8x8_t v3;
  int32x2_t v4;
  int8x8_t v5;
  int32x2_t v6;

  v2 = (int8x8_t)vadd_s32((int32x2_t)__PAIR64__(a1, a2), (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32((int32x2_t)__PAIR64__(a1, a2), 0xFuLL)));
  v3 = (int8x8_t)vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v2, 0xAuLL), v2), (int32x2_t)0x900000009);
  v4 = (int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v3, 6uLL), v3);
  v5 = (int8x8_t)vadd_s32(v4, (int32x2_t)vmvn_s8((int8x8_t)vshl_n_s32(v4, 0xBuLL)));
  v6 = vmul_s32((int32x2_t)veor_s8((int8x8_t)vshr_n_u32((uint32x2_t)v5, 0x10uLL), v5), (int32x2_t)0x109132F905AC73FELL);
  return (0xD7862706ELL * (unint64_t)vadd_s32(v6, vdup_lane_s32(v6, 1)).u32[0]) >> 4;
}

uint64_t *WTF::HashMap<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>,WTF::DefaultHash<WebCore::FloatSize>,WTF::HashTraits<WebCore::FloatSize>,WTF::HashTraits<std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>,WTF::HashTableTraits>::remove(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  if (*a1)
  {
    v2 = *a1 + 16 * *(unsigned int *)(*a1 - 4);
    if (v2 == a2)
      return a1;
  }
  else
  {
    if (!a2)
      return a1;
    v2 = 0;
  }
  if (v2 != a2)
    return (uint64_t *)WTF::HashTable<WebCore::FloatSize,WTF::KeyValuePair<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>>,WTF::DefaultHash<WebCore::FloatSize>,WTF::HashMap<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>,WTF::DefaultHash<WebCore::FloatSize>,WTF::HashTraits<WebCore::FloatSize>,WTF::HashTraits<std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::FloatSize>>::remove(a1, a2);
  return a1;
}

_QWORD **WTF::HashTable<WebCore::FloatSize,WTF::KeyValuePair<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>>,WTF::DefaultHash<WebCore::FloatSize>,WTF::HashMap<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>,WTF::DefaultHash<WebCore::FloatSize>,WTF::HashTraits<WebCore::FloatSize>,WTF::HashTraits<std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::FloatSize>>::remove(uint64_t *a1, uint64_t a2)
{
  _QWORD **result;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;

  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)a2 = _D0;
  result = std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>::~unique_ptr[abi:sn180100]((_QWORD **)(a2 + 8));
  ++*(_DWORD *)(*a1 - 16);
  v8 = *a1;
  if (*a1)
    v9 = *(_DWORD *)(v8 - 12) - 1;
  else
    v9 = -1;
  *(_DWORD *)(v8 - 12) = v9;
  v10 = *a1;
  if (*a1)
  {
    v11 = 6 * *(_DWORD *)(v10 - 12);
    v12 = *(_DWORD *)(v10 - 4);
    if (v11 < v12 && v12 >= 9)
      return (_QWORD **)WTF::HashTable<WebCore::FloatSize,WTF::KeyValuePair<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>>,WTF::DefaultHash<WebCore::FloatSize>,WTF::HashMap<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>,WTF::DefaultHash<WebCore::FloatSize>,WTF::HashTraits<WebCore::FloatSize>,WTF::HashTraits<std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::FloatSize>>::rehash(a1, v12 >> 1);
  }
  return result;
}

float *WTF::HashTable<WebCore::FloatSize,WTF::KeyValuePair<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>>,WTF::DefaultHash<WebCore::FloatSize>,WTF::HashMap<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>,WTF::DefaultHash<WebCore::FloatSize>,WTF::HashTraits<WebCore::FloatSize>,WTF::HashTraits<std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WebCore::FloatSize>>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>,WTF::DefaultHash<WebCore::FloatSize>,WTF::HashTraits<WebCore::FloatSize>,WTF::HashTraits<std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::FloatSize>>,WebCore::FloatSize>(float *result, float *a2)
{
  float *v2;
  int v3;
  float v4;
  float v5;
  int v6;
  float v7;
  float v8;
  int v10;

  if (result)
  {
    v2 = result;
    v3 = *((_DWORD *)result - 2);
    v4 = *a2;
    v5 = a2[1];
    v6 = WTF::IdentityHashTranslator<WTF::HashMap<WebCore::FloatSize,std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>,WTF::DefaultHash<WebCore::FloatSize>,WTF::HashTraits<WebCore::FloatSize>,WTF::HashTraits<std::unique_ptr<WebCore::StyleGeneratedImage::CachedGeneratedImage>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WebCore::FloatSize>>::hash<WebCore::FloatSize>(*(_DWORD *)a2, LODWORD(v5)) & v3;
    result = &v2[4 * v6];
    v8 = *result;
    v7 = result[1];
    if (*result != v4 || v7 != v5)
    {
      v10 = 1;
      while (v8 != 0.0 || v7 != 0.0)
      {
        v6 = (v6 + v10) & v3;
        result = &v2[4 * v6];
        v8 = *result;
        v7 = result[1];
        ++v10;
        if (*result == v4 && v7 == v5)
          return result;
      }
      return 0;
    }
  }
  return result;
}

WTF **_ZN3WTF9HashTableINS_3RefINS_23SingleThreadWeakPtrImplENS_12RawPtrTraitsIS2_EENS_21DefaultRefDerefTraitsIS2_EEEENS_12KeyValuePairIS7_jEENS_24KeyValuePairKeyExtractorIS9_EENS_11DefaultHashIS7_EENS_7HashMapIS7_jSD_NS_10HashTraitsIS7_EENSF_IjEENS_15HashTableTraitsEE18KeyValuePairTraitsESG_E8removeIfIZNS_11WeakHashMapIN7WebCore13RenderElementEjS2_E20removeNullReferencesEvEUlRT_E_EEbRKSR_(WTF **result, void *a2)
{
  WTF *v2;
  int v3;
  uint64_t *v4;
  int v5;
  unsigned int v6;
  uint64_t v8;
  unsigned int v9;
  uint64_t v11;
  int v12;

  v2 = *result;
  if (*result)
  {
    v3 = *((_DWORD *)v2 - 1);
    if (v3)
    {
      v4 = (uint64_t *)result;
      v5 = 0;
      v6 = v3 - 1;
      do
      {
        result = (WTF **)((char *)v2 + 16 * v6);
        if ((unint64_t)*result + 1 >= 2 && !*((_QWORD *)*result + 1))
        {
          result = (WTF **)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::deleteBucket(result, a2);
          ++v5;
        }
      }
      while ((unint64_t)v6--);
      v8 = *v4;
      if (v5)
      {
        *(_DWORD *)(v8 - 16) += v5;
        v11 = *v4;
        if (*v4)
          v12 = *(_DWORD *)(v11 - 12);
        else
          v12 = 0;
        *(_DWORD *)(v11 - 12) = v12 - v5;
        v8 = *v4;
      }
      if (v8)
      {
        v9 = *(_DWORD *)(v8 - 4);
        if (6 * *(_DWORD *)(v8 - 12) < v9 && v9 >= 9)
          return (WTF **)WTF::HashTable<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int>>,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashMap<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>,unsigned int,WTF::DefaultHash<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>,WTF::HashTraits<unsigned int>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::Ref<WTF::SingleThreadWeakPtrImpl,WTF::RawPtrTraits<WTF::SingleThreadWeakPtrImpl>,WTF::DefaultRefDerefTraits<WTF::SingleThreadWeakPtrImpl>>>>::shrinkToBestSize(v4);
      }
    }
  }
  return result;
}

WTF *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::computedStyleValue(WebCore::RenderStyle const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  WebCore::ComputedStyleExtractor *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  WTF::StringImpl *v12;
  WTF *result;
  uint64_t v15;
  _DWORD **v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  WTF *v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _BYTE v24[16];
  int v25;
  uint64_t v26;
  _QWORD v27[2];
  int v28;
  char v29;

  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v4 == -1)
  {
    v19 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF *)std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::computedStyleValue(WebCore::RenderStyle const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(v19);
  }
  else
  {
    v6 = **a1;
    v7 = (WebCore::ComputedStyleExtractor *)(*a1)[1];
    v8 = *(_QWORD *)(v6 + 168);
    v9 = *(_QWORD *)(v6 + 176);
    v20 = (WTF *)v24;
    ((void (*)(_QWORD *__return_ptr, WTF **))off_1E3442798[v4])(v27, &v20);
    v24[0] = 0;
    v25 = -1;
    v10 = v28;
    if (v28 != -1)
    {
      ((void (*)(WTF **, _BYTE *, _QWORD *))off_1E34427F0[v28])(&v20, v24, v27);
      v25 = v10;
    }
    v11 = *(_BYTE *)(a2 + 24);
    WebCore::computeStyleStopsList<WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((int *)&v20, v7, (uint64_t *)(a2 + 32));
    WebCore::CSSLinearGradientValue::create((uint64_t)v24, v11, v8, v9, (WTF::StringImpl *)&v20, &v26);
    *a3 = v26;
    v26 = 0;
    if (v22)
    {
      v15 = 16 * v22;
      v16 = (_DWORD **)((char *)v20 + 8);
      do
      {
        v17 = *v16;
        *v16 = 0;
        if (v17)
        {
          if (*v17 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v12);
          else
            *v17 -= 2;
        }
        v18 = *(v16 - 1);
        *(v16 - 1) = 0;
        if (v18)
        {
          if (*v18 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, v12);
          else
            *v18 -= 2;
        }
        v16 += 2;
        v15 -= 16;
      }
      while (v15);
    }
    result = v20;
    if (&v23 != (uint64_t *)v20 && v20 != 0)
    {
      v20 = 0;
      v21 = 0;
      result = (WTF *)WTF::fastFree(result, v12);
    }
    if (v25 != -1)
      result = (WTF *)((uint64_t (*)(char *, _BYTE *))off_1E34427C0[v25])(&v29, v24);
    v25 = -1;
    if (v28 != -1)
      return (WTF *)((uint64_t (*)(uint64_t *, _QWORD *))off_1E34427C0[v28])(&v26, v27);
  }
  return result;
}

_DWORD *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::computedStyleValue(WebCore::RenderStyle const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  WebCore::ComputedStyleExtractor *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  WTF::StringImpl *v13;
  WTF *v14;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *result;
  uint64_t v20;
  _DWORD **v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  WTF *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v30;
  _DWORD *v31;
  _DWORD *v32;
  uint64_t v33;

  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_39;
  v6 = **a1;
  v7 = (WebCore::ComputedStyleExtractor *)(*a1)[1];
  v8 = *(_QWORD *)(v6 + 168);
  v9 = *(_QWORD *)(v6 + 176);
  v25 = (WTF *)&v33;
  ((void (*)(_DWORD **__return_ptr, WTF **))off_1E3442820[v4])(&v29, &v25);
  v10 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1
    || (v25 = (WTF *)&v33,
        ((void (*)(_DWORD **__return_ptr, WTF **, uint64_t))off_1E3442820[v10])(&v30, &v25, a2 + 16),
        v11 = *(unsigned int *)(a2 + 40),
        (_DWORD)v11 == -1)
    || (v25 = (WTF *)&v33,
        ((void (*)(_DWORD **__return_ptr, WTF **, uint64_t))off_1E3442820[v11])(&v31, &v25, a2 + 32),
        v12 = *(unsigned int *)(a2 + 56),
        (_DWORD)v12 == -1))
  {
LABEL_39:
    v24 = std::__throw_bad_variant_access[abi:sn180100]();
    return (_DWORD *)std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::computedStyleValue(WebCore::RenderStyle const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(v24);
  }
  else
  {
    v25 = (WTF *)&v33;
    ((void (*)(_DWORD **__return_ptr, WTF **, uint64_t))off_1E3442820[v12])(&v32, &v25, a2 + 48);
    WebCore::computeStyleStopsListDeprecated<WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v25, v7, (uint64_t *)(a2 + 64));
    WebCore::CSSDeprecatedLinearGradientValue::create((WTF::StringImpl *)&v29, v8, v9, (uint64_t)&v25, &v33);
    *a3 = v33;
    v33 = 0;
    if (v27)
    {
      v20 = 16 * v27;
      v21 = (_DWORD **)((char *)v25 + 8);
      do
      {
        v22 = *v21;
        *v21 = 0;
        if (v22)
        {
          if (*v22 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v22, v13);
          else
            *v22 -= 2;
        }
        v23 = *(v21 - 1);
        *(v21 - 1) = 0;
        if (v23)
        {
          if (*v23 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v23, v13);
          else
            *v23 -= 2;
        }
        v21 += 2;
        v20 -= 16;
      }
      while (v20);
    }
    v14 = v25;
    if (&v28 != (uint64_t *)v25 && v25 != 0)
    {
      v25 = 0;
      v26 = 0;
      WTF::fastFree(v14, v13);
    }
    v16 = v32;
    v32 = 0;
    if (v16)
    {
      if (*v16 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v16, v13);
      else
        *v16 -= 2;
    }
    v17 = v31;
    v31 = 0;
    if (v17)
    {
      if (*v17 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v13);
      else
        *v17 -= 2;
    }
    v18 = v30;
    v30 = 0;
    if (v18)
    {
      if (*v18 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, v13);
      else
        *v18 -= 2;
    }
    result = v29;
    v29 = 0;
    if (result)
    {
      if (*result == 2)
        return (_DWORD *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v13);
      else
        *result -= 2;
    }
  }
  return result;
}

WTF *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::computedStyleValue(WebCore::RenderStyle const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  WebCore::ComputedStyleExtractor *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  WTF::StringImpl *v12;
  WTF *result;
  uint64_t v15;
  _DWORD **v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  WTF *v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _BYTE v24[16];
  int v25;
  uint64_t v26;
  _QWORD v27[2];
  int v28;
  char v29;

  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v4 == -1)
  {
    v19 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF *)std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::computedStyleValue(WebCore::RenderStyle const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(v19);
  }
  else
  {
    v6 = **a1;
    v7 = (WebCore::ComputedStyleExtractor *)(*a1)[1];
    v8 = *(_QWORD *)(v6 + 168);
    v9 = *(_QWORD *)(v6 + 176);
    v20 = (WTF *)v24;
    ((void (*)(_QWORD *__return_ptr, WTF **))off_1E3442830[v4])(v27, &v20);
    v24[0] = 0;
    v25 = -1;
    v10 = v28;
    if (v28 != -1)
    {
      ((void (*)(WTF **, _BYTE *, _QWORD *))off_1E3442888[v28])(&v20, v24, v27);
      v25 = v10;
    }
    v11 = *(_BYTE *)(a2 + 24);
    WebCore::computeStyleStopsList<WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((int *)&v20, v7, (uint64_t *)(a2 + 32));
    WebCore::CSSPrefixedLinearGradientValue::create((uint64_t)v24, v11, v8, v9, (uint64_t)&v20, &v26);
    *a3 = v26;
    v26 = 0;
    if (v22)
    {
      v15 = 16 * v22;
      v16 = (_DWORD **)((char *)v20 + 8);
      do
      {
        v17 = *v16;
        *v16 = 0;
        if (v17)
        {
          if (*v17 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v12);
          else
            *v17 -= 2;
        }
        v18 = *(v16 - 1);
        *(v16 - 1) = 0;
        if (v18)
        {
          if (*v18 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, v12);
          else
            *v18 -= 2;
        }
        v16 += 2;
        v15 -= 16;
      }
      while (v15);
    }
    result = v20;
    if (&v23 != (uint64_t *)v20 && v20 != 0)
    {
      v20 = 0;
      v21 = 0;
      result = (WTF *)WTF::fastFree(result, v12);
    }
    if (v25 != -1)
      result = (WTF *)((uint64_t (*)(char *, _BYTE *))off_1E3442858[v25])(&v29, v24);
    v25 = -1;
    if (v28 != -1)
      return (WTF *)((uint64_t (*)(uint64_t *, _QWORD *))off_1E3442858[v28])(&v26, v27);
  }
  return result;
}

WTF *std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::computedStyleValue(WebCore::RenderStyle const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  WebCore::ComputedStyleExtractor *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  char v11;
  WTF::StringImpl *v12;
  WTF *result;
  uint64_t v15;
  _DWORD **v16;
  _DWORD *v17;
  _DWORD *v18;
  uint64_t v19;
  WTF *v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[5];
  int v26;
  _QWORD v27[5];
  WebCore::ComputedStyleExtractor *v28;
  WebCore::ComputedStyleExtractor *v29;
  WebCore::ComputedStyleExtractor *v30;
  WebCore::ComputedStyleExtractor *v31;
  char v32;

  v4 = **a1;
  v5 = (WebCore::ComputedStyleExtractor *)(*a1)[1];
  v6 = *(_QWORD *)(v4 + 168);
  v7 = *(_QWORD *)(v4 + 176);
  v27[0] = v5;
  v27[1] = v5;
  v27[2] = v5;
  v27[3] = v5;
  v27[4] = v5;
  v28 = v5;
  v29 = v5;
  v30 = v5;
  v31 = v5;
  v8 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v8 == -1)
  {
    v19 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF *)std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::computedStyleValue(WebCore::RenderStyle const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(v19);
  }
  else
  {
    v20 = (WTF *)v27;
    ((void (*)(_QWORD *__return_ptr, WTF **))off_1E34428B8[v8])(v25, &v20);
    LOBYTE(v27[0]) = 0;
    LODWORD(v28) = -1;
    v10 = v26;
    if (v26 != -1)
    {
      ((void (*)(WTF **, _QWORD *, _QWORD *))off_1E3442958[v26])(&v20, v27, v25);
      LODWORD(v28) = v10;
    }
    v11 = *(_BYTE *)(a2 + 40);
    WebCore::computeStyleStopsList<WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((int *)&v20, v5, (uint64_t *)(a2 + 48));
    WebCore::CSSRadialGradientValue::create((uint64_t)v27, v11, v6, v7, (uint64_t)&v20, &v24);
    *a3 = v24;
    v24 = 0;
    if (v22)
    {
      v15 = 16 * v22;
      v16 = (_DWORD **)((char *)v20 + 8);
      do
      {
        v17 = *v16;
        *v16 = 0;
        if (v17)
        {
          if (*v17 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v17, v12);
          else
            *v17 -= 2;
        }
        v18 = *(v16 - 1);
        *(v16 - 1) = 0;
        if (v18)
        {
          if (*v18 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v18, v12);
          else
            *v18 -= 2;
        }
        v16 += 2;
        v15 -= 16;
      }
      while (v15);
    }
    result = v20;
    if (&v23 != (uint64_t *)v20 && v20 != 0)
    {
      v20 = 0;
      v21 = 0;
      result = (WTF *)WTF::fastFree(result, v12);
    }
    if ((_DWORD)v28 != -1)
      result = (WTF *)((uint64_t (*)(char *, _QWORD *))off_1E3442908[v28])(&v32, v27);
    LODWORD(v28) = -1;
    if (v26 != -1)
      return (WTF *)((uint64_t (*)(uint64_t *, _QWORD *))off_1E3442908[v26])(&v24, v25);
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::computedStyleValue(WebCore::RenderStyle const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(uint64_t **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  WebCore::ComputedStyleExtractor *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  WTF::StringImpl *v14;
  WTF *v15;
  uint64_t v17;
  _DWORD **v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  WTF *v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  int v30;
  double v31;
  int v32;
  uint64_t v33;

  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4 == -1)
    goto LABEL_23;
  v6 = **a1;
  v7 = (WebCore::ComputedStyleExtractor *)(*a1)[1];
  v8 = *(_QWORD *)(v6 + 168);
  v9 = *(_QWORD *)(v6 + 176);
  v22 = (WTF *)&v33;
  ((void (*)(uint64_t *__return_ptr, WTF **))off_1E3442820[v4])(&v26, &v22);
  v10 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1
    || (v22 = (WTF *)&v33,
        ((void (*)(uint64_t *__return_ptr, WTF **, uint64_t))off_1E3442820[v10])(&v27, &v22, a2 + 16),
        v11 = *(unsigned int *)(a2 + 40),
        (_DWORD)v11 == -1)
    || (v22 = (WTF *)&v33,
        ((void (*)(uint64_t *__return_ptr, WTF **, uint64_t))off_1E3442820[v11])(&v28, &v22, a2 + 32),
        v12 = *(unsigned int *)(a2 + 56),
        (_DWORD)v12 == -1))
  {
LABEL_23:
    v21 = std::__throw_bad_variant_access[abi:sn180100]();
    std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::computedStyleValue(WebCore::RenderStyle const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(v21);
  }
  else
  {
    v22 = (WTF *)&v33;
    ((void (*)(_QWORD *__return_ptr, WTF **, uint64_t))off_1E3442820[v12])(v29, &v22, a2 + 48);
    v13 = *(float *)(a2 + 68);
    *(double *)&v29[1] = *(float *)(a2 + 64);
    v30 = 0;
    v31 = v13;
    v32 = 0;
    WebCore::computeStyleStopsListDeprecated<WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(&v22, v7, (uint64_t *)(a2 + 72));
    WebCore::CSSDeprecatedRadialGradientValue::create(&v26, v8, v9, (uint64_t)&v22, &v33);
    *a3 = v33;
    v33 = 0;
    if (v24)
    {
      v17 = 16 * v24;
      v18 = (_DWORD **)((char *)v22 + 8);
      do
      {
        v19 = *v18;
        *v18 = 0;
        if (v19)
        {
          if (*v19 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v19, v14);
          else
            *v19 -= 2;
        }
        v20 = *(v18 - 1);
        *(v18 - 1) = 0;
        if (v20)
        {
          if (*v20 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v20, v14);
          else
            *v20 -= 2;
        }
        v18 += 2;
        v17 -= 16;
      }
      while (v17);
    }
    v15 = v22;
    if (&v25 != (uint64_t *)v22 && v22 != 0)
    {
      v22 = 0;
      v23 = 0;
      WTF::fastFree(v15, v14);
    }
    WebCore::CSSDeprecatedRadialGradientValue::Data::~Data((WebCore::CSSDeprecatedRadialGradientValue::Data *)&v26, v14);
  }
}

WTF *std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::computedStyleValue(WebCore::RenderStyle const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  WTF *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  char v11;
  float v12;
  float v13;
  double v14;
  uint64_t v16;
  char v17;
  int *v18;
  int v19;
  float v20;
  float v21;
  double v22;
  uint64_t v24;
  char v25;
  int *v26;
  int v27;
  char v28;
  WTF::StringImpl *v29;
  WTF *result;
  _DWORD *v32;
  uint64_t v33;
  _DWORD **v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  WTF *v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  _QWORD v42[2];
  int v43;
  WTF *v44;
  _DWORD *v45;
  char v46;
  uint64_t v47;
  _QWORD v48[2];
  int v49;
  char v50;

  v4 = **a1;
  v5 = (WTF *)(*a1)[1];
  v6 = *(_QWORD *)(v4 + 168);
  v7 = *(_QWORD *)(v4 + 176);
  v38 = v5;
  v8 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v8 == -1)
  {
    v37 = std::__throw_bad_variant_access[abi:sn180100]();
    return (WTF *)std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::computedStyleValue(WebCore::RenderStyle const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(v37);
  }
  else
  {
    v42[0] = &v38;
    ((void (*)(_QWORD *__return_ptr, _QWORD *))off_1E34429A8[v8])(v48, v42);
    LOBYTE(v42[0]) = 0;
    v43 = -1;
    v10 = v49;
    if (v49 != -1)
    {
      ((void (*)(WTF **, _QWORD *, _QWORD *))off_1E34429F8[v49])(&v38, v42, v48);
      v43 = v10;
    }
    v11 = *(_BYTE *)(a2 + 36);
    if (v11)
    {
      if (*(_BYTE *)(a2 + 24) == 4)
      {
        v12 = *(float *)(a2 + 20);
        if (!*(_BYTE *)(a2 + 26))
          v12 = (float)SLODWORD(v12);
        v13 = v12 / *(float *)(*((_QWORD *)v5 + 3) + 184);
        v14 = v13;
        if ((int)v13 <= 0xFF && *(_QWORD *)&v14 == COERCE__INT64((double)(int)v13))
        {
          v18 = &WebCore::staticCSSValuePool[4 * (int)v13];
          v19 = v18[16];
          v16 = (uint64_t)(v18 + 16);
          *(_DWORD *)v16 = v19 + 2;
        }
        else
        {
          v16 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v16 = 2;
          v17 = *(_BYTE *)(v16 + 6);
          *(_WORD *)(v16 + 4) = 6;
          *(_BYTE *)(v16 + 6) = v17 & 0xFC;
          *(double *)(v16 + 8) = v14;
        }
      }
      else
      {
        WebCore::CSSPrimitiveValue::create((int **)&v38, (WebCore::CSSPrimitiveValue *)(a2 + 20), v5);
        v16 = (uint64_t)v38;
      }
      if (*(_BYTE *)(a2 + 32) == 4)
      {
        v20 = *(float *)(a2 + 28);
        if (!*(_BYTE *)(a2 + 34))
          v20 = (float)SLODWORD(v20);
        v21 = v20 / *(float *)(*((_QWORD *)v5 + 3) + 184);
        v22 = v21;
        if ((int)v21 <= 0xFF && *(_QWORD *)&v22 == COERCE__INT64((double)(int)v21))
        {
          v26 = &WebCore::staticCSSValuePool[4 * (int)v21];
          v27 = v26[16];
          v24 = (uint64_t)(v26 + 16);
          *(_DWORD *)v24 = v27 + 2;
        }
        else
        {
          v24 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v24 = 2;
          v25 = *(_BYTE *)(v24 + 6);
          *(_WORD *)(v24 + 4) = 6;
          *(_BYTE *)(v24 + 6) = v25 & 0xFC;
          *(double *)(v24 + 8) = v22;
        }
      }
      else
      {
        WebCore::CSSPrimitiveValue::create((int **)&v38, (WebCore::CSSPrimitiveValue *)(a2 + 28), v5);
        v24 = (uint64_t)v38;
      }
      v44 = (WTF *)v16;
      v45 = (_DWORD *)v24;
      v11 = 1;
    }
    else
    {
      LOBYTE(v44) = 0;
    }
    v46 = v11;
    v28 = *(_BYTE *)(a2 + 40);
    WebCore::computeStyleStopsList<WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>((int *)&v38, v5, (uint64_t *)(a2 + 48));
    WebCore::CSSPrefixedRadialGradientValue::create((uint64_t)v42, v28, v6, v7, (uint64_t)&v38, &v47);
    *a3 = v47;
    v47 = 0;
    if (v40)
    {
      v33 = 16 * v40;
      v34 = (_DWORD **)((char *)v38 + 8);
      do
      {
        v35 = *v34;
        *v34 = 0;
        if (v35)
        {
          if (*v35 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v35, v29);
          else
            *v35 -= 2;
        }
        v36 = *(v34 - 1);
        *(v34 - 1) = 0;
        if (v36)
        {
          if (*v36 == 2)
            WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v36, v29);
          else
            *v36 -= 2;
        }
        v34 += 2;
        v33 -= 16;
      }
      while (v33);
    }
    result = v38;
    if (&v41 != (uint64_t *)v38 && v38 != 0)
    {
      v38 = 0;
      v39 = 0;
      result = (WTF *)WTF::fastFree(result, v29);
    }
    if (v46)
    {
      v32 = v45;
      v45 = 0;
      if (v32)
      {
        if (*v32 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v32, v29);
        else
          *v32 -= 2;
      }
      result = v44;
      v44 = 0;
      if (result)
      {
        if (*(_DWORD *)result == 2)
          result = (WTF *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v29);
        else
          *(_DWORD *)result -= 2;
      }
    }
    if (v43 != -1)
      result = (WTF *)((uint64_t (*)(char *, _QWORD *))off_1E34429D0[v43])(&v50, v42);
    v43 = -1;
    if (v49 != -1)
      return (WTF *)((uint64_t (*)(uint64_t *, _QWORD *))off_1E34429D0[v49])(&v47, v48);
  }
  return result;
}

WTF *std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::computedStyleValue(WebCore::RenderStyle const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>@<X0>(WTF *result@<X0>, __int128 *a2@<X1>, int **a3@<X8>)
{
  uint64_t v4;
  const WebCore::Length *v5;
  int v6;
  char v7;
  float v8;
  float v9;
  double v10;
  uint64_t v12;
  char v13;
  int *v14;
  int v15;
  float v16;
  float v17;
  double v18;
  char v20;
  int *v21;
  int v22;
  int v23;
  uint64_t v24;
  WTF *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  WTF::StringImpl *v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  _DWORD *v35;
  _DWORD *v36;
  int *v37;
  WTF::StringImpl *v38;
  WTF *v40;
  uint64_t v41;
  _DWORD **v42;
  _DWORD *v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  WTF *v48;
  uint64_t v49;
  _BYTE v50[32];
  __int128 v51;
  int v52;
  WTF *v53;
  WTF *v54;
  char v55;
  int *v56;
  _DWORD *v57;
  char v58;
  int *v59[2];

  v4 = **(_QWORD **)result;
  v5 = *(const WebCore::Length **)(*(_QWORD *)result + 8);
  v45 = *(_QWORD *)(v4 + 176);
  v46 = *(_QWORD *)(v4 + 168);
  v6 = *((unsigned __int8 *)a2 + 16);
  if (*((_BYTE *)a2 + 16))
  {
    v51 = *a2;
    v6 = 1;
  }
  v52 = v6;
  v7 = *((_BYTE *)a2 + 40);
  if (v7)
  {
    if (*((_BYTE *)a2 + 28) == 4)
    {
      v8 = *((float *)a2 + 6);
      if (!*((_BYTE *)a2 + 30))
        v8 = (float)SLODWORD(v8);
      v9 = v8 / *(float *)(*((_QWORD *)v5 + 3) + 184);
      v10 = v9;
      if ((int)v9 <= 0xFF && *(_QWORD *)&v10 == COERCE__INT64((double)(int)v9))
      {
        v14 = &WebCore::staticCSSValuePool[4 * (int)v9];
        v15 = v14[16];
        v12 = (uint64_t)(v14 + 16);
        *(_DWORD *)v12 = v15 + 2;
      }
      else
      {
        v12 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v12 = 2;
        v13 = *(_BYTE *)(v12 + 6);
        *(_WORD *)(v12 + 4) = 6;
        *(_BYTE *)(v12 + 6) = v13 & 0xFC;
        *(double *)(v12 + 8) = v10;
      }
      v53 = (WTF *)v12;
    }
    else
    {
      WebCore::CSSPrimitiveValue::create((int **)&v53, (WebCore::CSSPrimitiveValue *)((char *)a2 + 24), v5);
    }
    if (*((_BYTE *)a2 + 36) == 4)
    {
      v16 = *((float *)a2 + 8);
      if (!*((_BYTE *)a2 + 38))
        v16 = (float)SLODWORD(v16);
      v17 = v16 / *(float *)(*((_QWORD *)v5 + 3) + 184);
      v18 = v17;
      if ((int)v17 <= 0xFF && *(_QWORD *)&v18 == COERCE__INT64((double)(int)v17))
      {
        v21 = &WebCore::staticCSSValuePool[4 * (int)v17];
        v22 = v21[16];
        result = (WTF *)(v21 + 16);
        *(_DWORD *)result = v22 + 2;
      }
      else
      {
        result = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)result = 2;
        v20 = *((_BYTE *)result + 6);
        *((_WORD *)result + 2) = 6;
        *((_BYTE *)result + 6) = v20 & 0xFC;
        *((double *)result + 1) = v18;
      }
    }
    else
    {
      WebCore::CSSPrimitiveValue::create((int **)&v48, (WebCore::CSSPrimitiveValue *)(a2 + 2), v5);
      result = v48;
    }
    v54 = result;
    v7 = 1;
  }
  else
  {
    LOBYTE(v53) = 0;
  }
  v55 = v7;
  v23 = *((unsigned __int8 *)a2 + 44);
  v48 = (WTF *)v50;
  v49 = 2;
  v24 = *((unsigned int *)a2 + 15);
  if (v24 >= 3)
  {
    if (v24 >> 28)
    {
LABEL_75:
      __break(0xC471u);
      return result;
    }
    v25 = (WTF *)WTF::fastMalloc((WTF *)(16 * v24));
    LODWORD(v49) = v24;
    v48 = v25;
    LODWORD(v24) = *((_DWORD *)a2 + 15);
  }
  if ((_DWORD)v24)
  {
    v26 = 0;
    v27 = 0;
    while (1)
    {
      v28 = *((_QWORD *)a2 + 6);
      if (*(_BYTE *)(v28 + v26 + 16))
      {
        WebCore::ComputedStyleExtractor::currentColorOrValidColor(v5, (const WebCore::RenderStyle *)(v28 + v26), v59);
        v29 = v59[0];
      }
      else
      {
        v29 = 0;
      }
      v56 = v29;
      v30 = *(unsigned int *)(v28 + v26 + 40);
      if ((_DWORD)v30 == -1)
        break;
      v59[0] = (int *)&v58;
      ((void (*)(_DWORD **__return_ptr, int **, uint64_t))off_1E3442A38[v30])(&v57, v59, v28 + v26 + 24);
      v32 = HIDWORD(v49) + 1;
      v33 = (uint64_t *)((char *)v48 + 16 * HIDWORD(v49));
      v34 = (uint64_t)v56;
      v56 = 0;
      *v33 = v34;
      v35 = v57;
      v57 = 0;
      v33[1] = (uint64_t)v35;
      HIDWORD(v49) = v32;
      v36 = v57;
      v57 = 0;
      if (v36)
      {
        if (*v36 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v36, v31);
        else
          *v36 -= 2;
      }
      v37 = v56;
      v56 = 0;
      if (v37)
      {
        if (*v37 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v37, v31);
        else
          *v37 -= 2;
      }
      ++v27;
      v26 += 48;
      if (v27 >= *((unsigned int *)a2 + 15))
        goto LABEL_43;
    }
    result = (WTF *)std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_75;
  }
LABEL_43:
  WebCore::CSSConicGradientValue::create((uint64_t)&v51, v23 != 0, v46, v45, (uint64_t)&v48, (uint64_t *)&v56);
  *a3 = v56;
  v56 = 0;
  if (HIDWORD(v49))
  {
    v41 = 16 * HIDWORD(v49);
    v42 = (_DWORD **)((char *)v48 + 8);
    do
    {
      v43 = *v42;
      *v42 = 0;
      if (v43)
      {
        if (*v43 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v43, v38);
        else
          *v43 -= 2;
      }
      v44 = *(v42 - 1);
      *(v42 - 1) = 0;
      if (v44)
      {
        if (*v44 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v44, v38);
        else
          *v44 -= 2;
      }
      v42 += 2;
      v41 -= 16;
    }
    while (v41);
  }
  result = v48;
  if (v50 != (_BYTE *)v48 && v48 != 0)
  {
    v48 = 0;
    LODWORD(v49) = 0;
    result = (WTF *)WTF::fastFree(result, v38);
  }
  if (v55)
  {
    v40 = v54;
    v54 = 0;
    if (v40)
    {
      if (*(_DWORD *)v40 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v40, v38);
      else
        *(_DWORD *)v40 -= 2;
    }
    result = v53;
    v53 = 0;
    if (result)
    {
      if (*(_DWORD *)result == 2)
        result = (WTF *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v38);
      else
        *(_DWORD *)result -= 2;
    }
  }
  if (v52 != -1)
    return (WTF *)((uint64_t (*)(int **, __int128 *))off_1E3442A20[v52])(v59, &v51);
  return result;
}

int *WebCore::computeStyleStopsList<WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(int *result, WebCore::ComputedStyleExtractor *this, uint64_t *a3)
{
  int *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  WebCore::CSSPrimitiveValue *v12;
  float v13;
  float v14;
  double v15;
  unsigned int v16;
  char v18;
  int *v19;
  int v20;
  uint64_t v21;
  int v22;
  int **v23;
  int *v24;

  v5 = result;
  *(_QWORD *)result = result + 4;
  *((_QWORD *)result + 1) = 2;
  v6 = *((unsigned int *)a3 + 3);
  if (v6 >= 3)
  {
    result = (int *)WTF::VectorBuffer<WebCore::CSSGradientColorStop,2ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>((uint64_t)result, v6);
    LODWORD(v6) = *((_DWORD *)a3 + 3);
  }
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *a3;
      v10 = *a3 + v7;
      if (*(_BYTE *)(v10 + 16))
      {
        WebCore::ComputedStyleExtractor::currentColorOrValidColor(this, (const WebCore::RenderStyle *)(*a3 + v7), &v24);
        v11 = v24;
      }
      else
      {
        v11 = 0;
      }
      if (*(_BYTE *)(v10 + 32))
      {
        v12 = (WebCore::CSSPrimitiveValue *)(v9 + v7 + 24);
        if (*(_BYTE *)(v9 + v7 + 28) == 4)
        {
          v13 = *(float *)v12;
          if (!*(_BYTE *)(v9 + v7 + 30))
            v13 = (float)*(int *)v12;
          v14 = v13 / *(float *)(*((_QWORD *)this + 3) + 184);
          v15 = v14;
          v16 = (int)v14;
          if ((int)v14 <= 0xFF && *(_QWORD *)&v15 == COERCE__INT64((double)v16))
          {
            v19 = &WebCore::staticCSSValuePool[4 * v16];
            v20 = v19[16];
            result = v19 + 16;
            *result = v20 + 2;
          }
          else
          {
            result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
            *result = 2;
            v18 = *((_BYTE *)result + 6);
            *((_WORD *)result + 2) = 6;
            *((_BYTE *)result + 6) = v18 & 0xFC;
            *((double *)result + 1) = v15;
          }
        }
        else
        {
          WebCore::CSSPrimitiveValue::create(&v24, v12, this);
          result = v24;
        }
      }
      else
      {
        result = 0;
      }
      v21 = v5[3];
      v22 = v21 + 1;
      v23 = (int **)(*(_QWORD *)v5 + 16 * v21);
      *v23 = v11;
      v23[1] = result;
      v5[3] = v22;
      ++v8;
      v7 += 40;
    }
    while (v8 < *((unsigned int *)a3 + 3));
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computedStyleValue(WebCore::StyleGradientImage::LinearData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,WebCore::CSSLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<WebCore::CSSLinearGradientValue,WebCore::CSSLinearGradientValue::Horizontal>> const&>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 16) = 0;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computedStyleValue(WebCore::StyleGradientImage::LinearData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,WebCore::CSSLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<WebCore::CSSLinearGradientValue,WebCore::CSSLinearGradientValue::Horizontal>> const&>@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u32[0] = 1;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computedStyleValue(WebCore::StyleGradientImage::LinearData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,WebCore::CSSLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<WebCore::CSSLinearGradientValue,WebCore::CSSLinearGradientValue::Horizontal>> const&>(_BYTE *a1@<X1>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computedStyleValue(WebCore::StyleGradientImage::LinearData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,WebCore::CSSLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<WebCore::CSSLinearGradientValue,WebCore::CSSLinearGradientValue::Horizontal>> const&>(_BYTE *a1@<X1>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computedStyleValue(WebCore::StyleGradientImage::LinearData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,WebCore::CSSLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<WebCore::CSSLinearGradientValue,WebCore::CSSLinearGradientValue::Horizontal>> const&>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 5;
}

_QWORD *WebCore::computeStyleStopsListDeprecated<WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(_QWORD *result, WebCore::ComputedStyleExtractor *this, uint64_t *a3)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int *v12;
  uint64_t v13;
  int v14;
  int **v15;
  int *v16;

  v5 = result;
  *result = result + 2;
  result[1] = 2;
  v6 = *((unsigned int *)a3 + 3);
  if (v6 >= 3)
  {
    result = (_QWORD *)WTF::VectorBuffer<WebCore::CSSGradientColorStop,2ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>((uint64_t)result, v6);
    LODWORD(v6) = *((_DWORD *)a3 + 3);
  }
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      v9 = *a3;
      v10 = *a3 + v7;
      if (*(_BYTE *)(v10 + 16))
      {
        result = WebCore::ComputedStyleExtractor::currentColorOrValidColor(this, (const WebCore::RenderStyle *)(*a3 + v7), &v16);
        v11 = v16;
      }
      else
      {
        v11 = 0;
      }
      if (*(_BYTE *)(v10 + 32))
      {
        result = WebCore::CSSPrimitiveValue::create((WebCore::CSSPrimitiveValue *)(v9 + v7 + 24), &v16);
        v12 = v16;
      }
      else
      {
        v12 = 0;
      }
      v13 = *((unsigned int *)v5 + 3);
      v14 = v13 + 1;
      v15 = (int **)(*v5 + 16 * v13);
      *v15 = v11;
      v15[1] = v12;
      *((_DWORD *)v5 + 3) = v14;
      ++v8;
      v7 += 40;
    }
    while (v8 < *((unsigned int *)a3 + 3));
  }
  return result;
}

int *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computedStyleValue(WebCore::StyleGradientDeprecatedPoint::Coordinate const&)::$_0,WebCore::computedStyleValue(WebCore::StyleGradientDeprecatedPoint::Coordinate const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::NumberRaw,WebCore::PercentRaw> const&>@<X0>(double *a1@<X1>, int **a2@<X8>)
{
  double v3;
  unsigned int v4;
  int *result;
  char v7;

  v3 = *a1;
  v4 = (int)*a1;
  if (v4 <= 0xFF && *(_QWORD *)a1 == COERCE__INT64((double)v4))
  {
    result = &WebCore::staticCSSValuePool[4 * v4 + 2064];
    *result += 2;
  }
  else
  {
    result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
    *result = 2;
    v7 = *((_BYTE *)result + 6);
    *((_WORD *)result + 2) = 1;
    *((_BYTE *)result + 6) = v7 & 0xFC;
    *((double *)result + 1) = v3;
  }
  *a2 = result;
  return result;
}

int *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computedStyleValue(WebCore::StyleGradientDeprecatedPoint::Coordinate const&)::$_0,WebCore::computedStyleValue(WebCore::StyleGradientDeprecatedPoint::Coordinate const&)::$_1>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,WebCore::NumberRaw,WebCore::PercentRaw> const&>@<X0>(double *a1@<X1>, int **a2@<X8>)
{
  double v3;
  unsigned int v4;
  int *result;
  char v7;

  v3 = *a1;
  v4 = (int)*a1;
  if (v4 <= 0xFF && *(_QWORD *)a1 == COERCE__INT64((double)v4))
  {
    result = &WebCore::staticCSSValuePool[4 * v4 + 1040];
    *result += 2;
  }
  else
  {
    result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
    *result = 2;
    v7 = *((_BYTE *)result + 6);
    *((_WORD *)result + 2) = 3;
    *((_BYTE *)result + 6) = v7 & 0xFC;
    *((double *)result + 1) = v3;
  }
  *a2 = result;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computedStyleValue(WebCore::StyleGradientImage::PrefixedLinearData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,WebCore::CSSPrefixedLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<WebCore::CSSPrefixedLinearGradientValue,WebCore::CSSPrefixedLinearGradientValue::Horizontal>> const&>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 16) = 0;
}

__n128 std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computedStyleValue(WebCore::StyleGradientImage::PrefixedLinearData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,WebCore::CSSPrefixedLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<WebCore::CSSPrefixedLinearGradientValue,WebCore::CSSPrefixedLinearGradientValue::Horizontal>> const&>@<Q0>(__n128 *a1@<X1>, __n128 *a2@<X8>)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  a2[1].n128_u32[0] = 1;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computedStyleValue(WebCore::StyleGradientImage::PrefixedLinearData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,WebCore::CSSPrefixedLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<WebCore::CSSPrefixedLinearGradientValue,WebCore::CSSPrefixedLinearGradientValue::Horizontal>> const&>(_BYTE *a1@<X1>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 3;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computedStyleValue(WebCore::StyleGradientImage::PrefixedLinearData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,WebCore::CSSPrefixedLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<WebCore::CSSPrefixedLinearGradientValue,WebCore::CSSPrefixedLinearGradientValue::Horizontal>> const&>(_BYTE *a1@<X1>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 4;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computedStyleValue(WebCore::StyleGradientImage::PrefixedLinearData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,WebCore::CSSPrefixedLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<WebCore::CSSPrefixedLinearGradientValue,WebCore::CSSPrefixedLinearGradientValue::Horizontal>> const&>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 5;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_0,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_1,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_2,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_3,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_4,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_5,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_6,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_7,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_8,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::RadialData::Extent,WebCore::StyleGradientImage::RadialData::Length,WebCore::StyleGradientImage::RadialData::Size,WebCore::StyleGradientImage::RadialData::CircleOfLength,WebCore::StyleGradientImage::RadialData::CircleOfExtent,WebCore::StyleGradientImage::RadialData::EllipseOfSize,WebCore::StyleGradientImage::RadialData::EllipseOfExtent,WebCore::StyleGradientPosition> const&>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 40) = 0;
}

int *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_0,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_1,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_2,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_3,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_4,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_5,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_6,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_7,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_8,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::RadialData::Extent,WebCore::StyleGradientImage::RadialData::Length,WebCore::StyleGradientImage::RadialData::Size,WebCore::StyleGradientImage::RadialData::CircleOfLength,WebCore::StyleGradientImage::RadialData::CircleOfExtent,WebCore::StyleGradientImage::RadialData::EllipseOfSize,WebCore::StyleGradientImage::RadialData::EllipseOfExtent,WebCore::StyleGradientPosition> const&>@<X0>(int *result@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  char v4;
  char v5;
  const WebCore::Length *v7;
  float v8;
  float v9;
  double v10;
  uint64_t v12;
  char v13;
  int *v14;
  int v15;
  float v16;
  float v17;
  double v18;
  unsigned int v19;
  char v21;
  int *v22;
  int v23;
  int *v24;

  v4 = *(_BYTE *)a2;
  v5 = *((_BYTE *)a2 + 20);
  if (v5)
  {
    v7 = **(const WebCore::Length ***)result;
    if (*((_BYTE *)a2 + 8) == 4)
    {
      v8 = a2[1];
      if (!*((_BYTE *)a2 + 10))
        v8 = (float)SLODWORD(v8);
      v9 = v8 / *(float *)(*((_QWORD *)v7 + 3) + 184);
      v10 = v9;
      if ((int)v9 <= 0xFF && *(_QWORD *)&v10 == COERCE__INT64((double)(int)v9))
      {
        v14 = &WebCore::staticCSSValuePool[4 * (int)v9];
        v15 = v14[16];
        v12 = (uint64_t)(v14 + 16);
        *(_DWORD *)v12 = v15 + 2;
      }
      else
      {
        v12 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v12 = 2;
        v13 = *(_BYTE *)(v12 + 6);
        *(_WORD *)(v12 + 4) = 6;
        *(_BYTE *)(v12 + 6) = v13 & 0xFC;
        *(double *)(v12 + 8) = v10;
      }
      *(_QWORD *)(a3 + 8) = v12;
    }
    else
    {
      WebCore::CSSPrimitiveValue::create((int **)(a3 + 8), (WebCore::CSSPrimitiveValue *)(a2 + 1), v7);
    }
    if (*((_BYTE *)a2 + 16) == 4)
    {
      v16 = a2[3];
      if (!*((_BYTE *)a2 + 18))
        v16 = (float)SLODWORD(v16);
      v17 = v16 / *(float *)(*((_QWORD *)v7 + 3) + 184);
      v18 = v17;
      v19 = (int)v17;
      if ((int)v17 <= 0xFF && *(_QWORD *)&v18 == COERCE__INT64((double)v19))
      {
        v22 = &WebCore::staticCSSValuePool[4 * v19];
        v23 = v22[16];
        result = v22 + 16;
        *result = v23 + 2;
      }
      else
      {
        result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *result = 2;
        v21 = *((_BYTE *)result + 6);
        *((_WORD *)result + 2) = 6;
        *((_BYTE *)result + 6) = v21 & 0xFC;
        *((double *)result + 1) = v18;
      }
    }
    else
    {
      WebCore::CSSPrimitiveValue::create(&v24, (WebCore::CSSPrimitiveValue *)(a2 + 3), v7);
      result = v24;
    }
    *(_QWORD *)(a3 + 16) = result;
    v5 = 1;
  }
  else
  {
    *(_BYTE *)(a3 + 8) = 0;
  }
  *(_BYTE *)a3 = v4;
  *(_BYTE *)(a3 + 24) = v5;
  *(_DWORD *)(a3 + 40) = 1;
  return result;
}

int *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_0,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_1,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_2,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_3,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_4,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_5,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_6,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_7,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_8,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::RadialData::Extent,WebCore::StyleGradientImage::RadialData::Length,WebCore::StyleGradientImage::RadialData::Size,WebCore::StyleGradientImage::RadialData::CircleOfLength,WebCore::StyleGradientImage::RadialData::CircleOfExtent,WebCore::StyleGradientImage::RadialData::EllipseOfSize,WebCore::StyleGradientImage::RadialData::EllipseOfExtent,WebCore::StyleGradientPosition> const&>@<X0>(int *result@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  char v4;
  char v5;
  const WebCore::Length *v7;
  float v8;
  float v9;
  double v10;
  uint64_t v12;
  char v13;
  int *v14;
  int v15;
  float v16;
  float v17;
  double v18;
  unsigned int v19;
  char v21;
  int *v22;
  int v23;
  int *v24;

  v4 = *(_BYTE *)a2;
  v5 = *((_BYTE *)a2 + 20);
  if (v5)
  {
    v7 = *(const WebCore::Length **)(*(_QWORD *)result + 8);
    if (*((_BYTE *)a2 + 8) == 4)
    {
      v8 = a2[1];
      if (!*((_BYTE *)a2 + 10))
        v8 = (float)SLODWORD(v8);
      v9 = v8 / *(float *)(*((_QWORD *)v7 + 3) + 184);
      v10 = v9;
      if ((int)v9 <= 0xFF && *(_QWORD *)&v10 == COERCE__INT64((double)(int)v9))
      {
        v14 = &WebCore::staticCSSValuePool[4 * (int)v9];
        v15 = v14[16];
        v12 = (uint64_t)(v14 + 16);
        *(_DWORD *)v12 = v15 + 2;
      }
      else
      {
        v12 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v12 = 2;
        v13 = *(_BYTE *)(v12 + 6);
        *(_WORD *)(v12 + 4) = 6;
        *(_BYTE *)(v12 + 6) = v13 & 0xFC;
        *(double *)(v12 + 8) = v10;
      }
      *(_QWORD *)(a3 + 8) = v12;
    }
    else
    {
      WebCore::CSSPrimitiveValue::create((int **)(a3 + 8), (WebCore::CSSPrimitiveValue *)(a2 + 1), v7);
    }
    if (*((_BYTE *)a2 + 16) == 4)
    {
      v16 = a2[3];
      if (!*((_BYTE *)a2 + 18))
        v16 = (float)SLODWORD(v16);
      v17 = v16 / *(float *)(*((_QWORD *)v7 + 3) + 184);
      v18 = v17;
      v19 = (int)v17;
      if ((int)v17 <= 0xFF && *(_QWORD *)&v18 == COERCE__INT64((double)v19))
      {
        v22 = &WebCore::staticCSSValuePool[4 * v19];
        v23 = v22[16];
        result = v22 + 16;
        *result = v23 + 2;
      }
      else
      {
        result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *result = 2;
        v21 = *((_BYTE *)result + 6);
        *((_WORD *)result + 2) = 6;
        *((_BYTE *)result + 6) = v21 & 0xFC;
        *((double *)result + 1) = v18;
      }
    }
    else
    {
      WebCore::CSSPrimitiveValue::create(&v24, (WebCore::CSSPrimitiveValue *)(a2 + 3), v7);
      result = v24;
    }
    *(_QWORD *)(a3 + 16) = result;
    v5 = 1;
  }
  else
  {
    *(_BYTE *)(a3 + 8) = 0;
  }
  *(_BYTE *)a3 = v4;
  *(_BYTE *)(a3 + 24) = v5;
  *(_DWORD *)(a3 + 40) = 2;
  return result;
}

int *std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_0,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_1,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_2,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_3,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_4,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_5,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_6,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_7,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_8,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::RadialData::Extent,WebCore::StyleGradientImage::RadialData::Length,WebCore::StyleGradientImage::RadialData::Size,WebCore::StyleGradientImage::RadialData::CircleOfLength,WebCore::StyleGradientImage::RadialData::CircleOfExtent,WebCore::StyleGradientImage::RadialData::EllipseOfSize,WebCore::StyleGradientImage::RadialData::EllipseOfExtent,WebCore::StyleGradientPosition> const&>@<X0>(WebCore::CSSPrimitiveValue *this@<X1>, uint64_t *a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v5;
  const WebCore::Length *v6;
  float v7;
  float v8;
  double v9;
  unsigned int v10;
  int *result;
  char v13;
  int *v14;
  int v15;
  const WebCore::Length *v16;
  float v17;
  float v18;
  double v19;
  uint64_t v21;
  char v22;
  char v23;
  int *v24;
  int *v25;
  int v26;
  float v27;
  float v28;
  double v29;
  unsigned int v30;
  char v32;
  int *v33;
  int v34;
  int *v35;
  int *v36;

  v5 = *a2;
  v6 = *(const WebCore::Length **)(*a2 + 16);
  if (*((_BYTE *)this + 4) == 4)
  {
    v7 = *(float *)this;
    if (!*((_BYTE *)this + 6))
      v7 = (float)*(int *)this;
    v8 = v7 / *(float *)(*((_QWORD *)v6 + 3) + 184);
    v9 = v8;
    v10 = (int)v8;
    if ((int)v8 <= 0xFF && *(_QWORD *)&v9 == COERCE__INT64((double)v10))
    {
      v14 = &WebCore::staticCSSValuePool[4 * v10];
      v15 = v14[16];
      result = v14 + 16;
      *result = v15 + 2;
    }
    else
    {
      result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *result = 2;
      v13 = *((_BYTE *)result + 6);
      *((_WORD *)result + 2) = 6;
      *((_BYTE *)result + 6) = v13 & 0xFC;
      *((double *)result + 1) = v9;
    }
    v35 = result;
  }
  else
  {
    result = (int *)WebCore::CSSPrimitiveValue::create(&v35, this, v6);
  }
  if (*((_BYTE *)this + 24))
  {
    v16 = *(const WebCore::Length **)(v5 + 16);
    if (*((_BYTE *)this + 12) == 4)
    {
      v17 = *((float *)this + 2);
      if (!*((_BYTE *)this + 14))
        v17 = (float)SLODWORD(v17);
      v18 = v17 / *(float *)(*((_QWORD *)v16 + 3) + 184);
      v19 = v18;
      if ((int)v18 <= 0xFF && *(_QWORD *)&v19 == COERCE__INT64((double)(int)v18))
      {
        v25 = &WebCore::staticCSSValuePool[4 * (int)v18];
        v26 = v25[16];
        v21 = (uint64_t)(v25 + 16);
        *(_DWORD *)v21 = v26 + 2;
      }
      else
      {
        v21 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v21 = 2;
        v22 = *(_BYTE *)(v21 + 6);
        *(_WORD *)(v21 + 4) = 6;
        *(_BYTE *)(v21 + 6) = v22 & 0xFC;
        *(double *)(v21 + 8) = v19;
      }
      *(_QWORD *)(a3 + 8) = v21;
    }
    else
    {
      WebCore::CSSPrimitiveValue::create((int **)(a3 + 8), (WebCore::CSSPrimitiveValue *)((char *)this + 8), v16);
    }
    if (*((_BYTE *)this + 20) == 4)
    {
      v27 = *((float *)this + 4);
      if (!*((_BYTE *)this + 22))
        v27 = (float)SLODWORD(v27);
      v28 = v27 / *(float *)(*((_QWORD *)v16 + 3) + 184);
      v29 = v28;
      v30 = (int)v28;
      if ((int)v28 <= 0xFF && *(_QWORD *)&v29 == COERCE__INT64((double)v30))
      {
        v33 = &WebCore::staticCSSValuePool[4 * v30];
        v34 = v33[16];
        result = v33 + 16;
        *result = v34 + 2;
      }
      else
      {
        result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *result = 2;
        v32 = *((_BYTE *)result + 6);
        *((_WORD *)result + 2) = 6;
        *((_BYTE *)result + 6) = v32 & 0xFC;
        *((double *)result + 1) = v29;
      }
    }
    else
    {
      WebCore::CSSPrimitiveValue::create(&v36, (WebCore::CSSPrimitiveValue *)((char *)this + 16), v16);
      result = v36;
    }
    v24 = v35;
    *(_QWORD *)(a3 + 16) = result;
    v23 = 1;
  }
  else
  {
    v23 = 0;
    v24 = v35;
    *(_BYTE *)(a3 + 8) = 0;
  }
  *(_QWORD *)a3 = v24;
  *(_BYTE *)(a3 + 24) = v23;
  *(_DWORD *)(a3 + 40) = 3;
  return result;
}

int *std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_0,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_1,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_2,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_3,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_4,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_5,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_6,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_7,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_8,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::RadialData::Extent,WebCore::StyleGradientImage::RadialData::Length,WebCore::StyleGradientImage::RadialData::Size,WebCore::StyleGradientImage::RadialData::CircleOfLength,WebCore::StyleGradientImage::RadialData::CircleOfExtent,WebCore::StyleGradientImage::RadialData::EllipseOfSize,WebCore::StyleGradientImage::RadialData::EllipseOfExtent,WebCore::StyleGradientPosition> const&>@<X0>(WebCore::CSSPrimitiveValue *this@<X1>, uint64_t *a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v5;
  const WebCore::Length *v6;
  float v7;
  float v8;
  double v9;
  uint64_t v11;
  char v12;
  int *v13;
  int v14;
  const WebCore::Length *v15;
  float v16;
  float v17;
  double v18;
  unsigned int v19;
  int *v21;
  char v22;
  int *v23;
  int v24;
  int *v25;
  const WebCore::Length *v26;
  float v27;
  float v28;
  double v29;
  uint64_t v31;
  char v32;
  int *v33;
  int v34;
  float v35;
  float v36;
  double v37;
  unsigned int v38;
  int *v40;
  char v41;
  int *v42;
  int v43;
  int *v44;
  int *result;
  int *v46;
  int *v47;
  int *v48;

  v5 = *a2;
  v6 = *(const WebCore::Length **)(*a2 + 24);
  if (*((_BYTE *)this + 4) == 4)
  {
    v7 = *(float *)this;
    if (!*((_BYTE *)this + 6))
      v7 = (float)*(int *)this;
    v8 = v7 / *(float *)(*((_QWORD *)v6 + 3) + 184);
    v9 = v8;
    if ((int)v8 <= 0xFF && *(_QWORD *)&v9 == COERCE__INT64((double)(int)v8))
    {
      v13 = &WebCore::staticCSSValuePool[4 * (int)v8];
      v14 = v13[16];
      v11 = (uint64_t)(v13 + 16);
      *(_DWORD *)v11 = v14 + 2;
    }
    else
    {
      v11 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v11 = 2;
      v12 = *(_BYTE *)(v11 + 6);
      *(_WORD *)(v11 + 4) = 6;
      *(_BYTE *)(v11 + 6) = v12 & 0xFC;
      *(double *)(v11 + 8) = v9;
    }
    v47 = (int *)v11;
  }
  else
  {
    WebCore::CSSPrimitiveValue::create(&v47, this, v6);
  }
  v15 = *(const WebCore::Length **)(v5 + 24);
  if (*((_BYTE *)this + 12) == 4)
  {
    v16 = *((float *)this + 2);
    if (!*((_BYTE *)this + 14))
      v16 = (float)SLODWORD(v16);
    v17 = v16 / *(float *)(*((_QWORD *)v15 + 3) + 184);
    v18 = v17;
    v19 = (int)v17;
    if ((int)v17 <= 0xFF && *(_QWORD *)&v18 == COERCE__INT64((double)v19))
    {
      v23 = &WebCore::staticCSSValuePool[4 * v19];
      v24 = v23[16];
      v21 = v23 + 16;
      *v21 = v24 + 2;
    }
    else
    {
      v21 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *v21 = 2;
      v22 = *((_BYTE *)v21 + 6);
      *((_WORD *)v21 + 2) = 6;
      *((_BYTE *)v21 + 6) = v22 & 0xFC;
      *((double *)v21 + 1) = v18;
    }
  }
  else
  {
    WebCore::CSSPrimitiveValue::create(&v46, (WebCore::CSSPrimitiveValue *)((char *)this + 8), v15);
    v21 = v46;
  }
  v25 = v47;
  v46 = 0;
  v47 = 0;
  if (*((_BYTE *)this + 32))
  {
    v26 = *(const WebCore::Length **)(v5 + 24);
    if (*((_BYTE *)this + 20) == 4)
    {
      v27 = *((float *)this + 4);
      if (!*((_BYTE *)this + 22))
        v27 = (float)SLODWORD(v27);
      v28 = v27 / *(float *)(*((_QWORD *)v26 + 3) + 184);
      v29 = v28;
      if ((int)v28 <= 0xFF && *(_QWORD *)&v29 == COERCE__INT64((double)(int)v28))
      {
        v33 = &WebCore::staticCSSValuePool[4 * (int)v28];
        v34 = v33[16];
        v31 = (uint64_t)(v33 + 16);
        *(_DWORD *)v31 = v34 + 2;
      }
      else
      {
        v31 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v31 = 2;
        v32 = *(_BYTE *)(v31 + 6);
        *(_WORD *)(v31 + 4) = 6;
        *(_BYTE *)(v31 + 6) = v32 & 0xFC;
        *(double *)(v31 + 8) = v29;
      }
      *(_QWORD *)(a3 + 16) = v31;
    }
    else
    {
      WebCore::CSSPrimitiveValue::create((int **)(a3 + 16), (WebCore::CSSPrimitiveValue *)((char *)this + 16), v26);
    }
    if (*((_BYTE *)this + 28) == 4)
    {
      v35 = *((float *)this + 6);
      if (!*((_BYTE *)this + 30))
        v35 = (float)SLODWORD(v35);
      v36 = v35 / *(float *)(*((_QWORD *)v26 + 3) + 184);
      v37 = v36;
      v38 = (int)v36;
      if ((int)v36 <= 0xFF && *(_QWORD *)&v37 == COERCE__INT64((double)v38))
      {
        v42 = &WebCore::staticCSSValuePool[4 * v38];
        v43 = v42[16];
        v40 = v42 + 16;
        *v40 = v43 + 2;
      }
      else
      {
        v40 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *v40 = 2;
        v41 = *((_BYTE *)v40 + 6);
        *((_WORD *)v40 + 2) = 6;
        *((_BYTE *)v40 + 6) = v41 & 0xFC;
        *((double *)v40 + 1) = v37;
      }
    }
    else
    {
      WebCore::CSSPrimitiveValue::create(&v48, (WebCore::CSSPrimitiveValue *)((char *)this + 24), v26);
      v40 = v48;
    }
    *(_QWORD *)a3 = v25;
    *(_QWORD *)(a3 + 8) = v21;
    *(_QWORD *)(a3 + 24) = v40;
    *(_BYTE *)(a3 + 32) = 1;
    v44 = v46;
    *(_DWORD *)(a3 + 40) = 4;
    v46 = 0;
    if (v44)
    {
      if (*v44 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v44, v15);
      else
        *v44 -= 2;
    }
  }
  else
  {
    *(_QWORD *)a3 = v25;
    *(_QWORD *)(a3 + 8) = v21;
    *(_BYTE *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 32) = 0;
    *(_DWORD *)(a3 + 40) = 4;
  }
  result = v47;
  v47 = 0;
  if (result)
  {
    if (*result == 2)
      return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v15);
    else
      *result -= 2;
  }
  return result;
}

int *std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_0,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_1,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_2,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_3,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_4,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_5,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_6,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_7,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_8,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::RadialData::Extent,WebCore::StyleGradientImage::RadialData::Length,WebCore::StyleGradientImage::RadialData::Size,WebCore::StyleGradientImage::RadialData::CircleOfLength,WebCore::StyleGradientImage::RadialData::CircleOfExtent,WebCore::StyleGradientImage::RadialData::EllipseOfSize,WebCore::StyleGradientImage::RadialData::EllipseOfExtent,WebCore::StyleGradientPosition> const&>@<X0>(WebCore::CSSPrimitiveValue *this@<X1>, uint64_t *a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v5;
  const WebCore::Length *v6;
  float v7;
  float v8;
  double v9;
  unsigned int v10;
  int *result;
  char v13;
  int *v14;
  int v15;
  const WebCore::Length *v16;
  float v17;
  float v18;
  double v19;
  uint64_t v21;
  char v22;
  char v23;
  int *v24;
  int *v25;
  int v26;
  float v27;
  float v28;
  double v29;
  unsigned int v30;
  char v32;
  int *v33;
  int v34;
  int *v35;
  int *v36;

  v5 = *a2;
  v6 = *(const WebCore::Length **)(*a2 + 32);
  if (*((_BYTE *)this + 4) == 4)
  {
    v7 = *(float *)this;
    if (!*((_BYTE *)this + 6))
      v7 = (float)*(int *)this;
    v8 = v7 / *(float *)(*((_QWORD *)v6 + 3) + 184);
    v9 = v8;
    v10 = (int)v8;
    if ((int)v8 <= 0xFF && *(_QWORD *)&v9 == COERCE__INT64((double)v10))
    {
      v14 = &WebCore::staticCSSValuePool[4 * v10];
      v15 = v14[16];
      result = v14 + 16;
      *result = v15 + 2;
    }
    else
    {
      result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *result = 2;
      v13 = *((_BYTE *)result + 6);
      *((_WORD *)result + 2) = 6;
      *((_BYTE *)result + 6) = v13 & 0xFC;
      *((double *)result + 1) = v9;
    }
    v35 = result;
  }
  else
  {
    result = (int *)WebCore::CSSPrimitiveValue::create(&v35, this, v6);
  }
  if (*((_BYTE *)this + 24))
  {
    v16 = *(const WebCore::Length **)(v5 + 32);
    if (*((_BYTE *)this + 12) == 4)
    {
      v17 = *((float *)this + 2);
      if (!*((_BYTE *)this + 14))
        v17 = (float)SLODWORD(v17);
      v18 = v17 / *(float *)(*((_QWORD *)v16 + 3) + 184);
      v19 = v18;
      if ((int)v18 <= 0xFF && *(_QWORD *)&v19 == COERCE__INT64((double)(int)v18))
      {
        v25 = &WebCore::staticCSSValuePool[4 * (int)v18];
        v26 = v25[16];
        v21 = (uint64_t)(v25 + 16);
        *(_DWORD *)v21 = v26 + 2;
      }
      else
      {
        v21 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v21 = 2;
        v22 = *(_BYTE *)(v21 + 6);
        *(_WORD *)(v21 + 4) = 6;
        *(_BYTE *)(v21 + 6) = v22 & 0xFC;
        *(double *)(v21 + 8) = v19;
      }
      *(_QWORD *)(a3 + 8) = v21;
    }
    else
    {
      WebCore::CSSPrimitiveValue::create((int **)(a3 + 8), (WebCore::CSSPrimitiveValue *)((char *)this + 8), v16);
    }
    if (*((_BYTE *)this + 20) == 4)
    {
      v27 = *((float *)this + 4);
      if (!*((_BYTE *)this + 22))
        v27 = (float)SLODWORD(v27);
      v28 = v27 / *(float *)(*((_QWORD *)v16 + 3) + 184);
      v29 = v28;
      v30 = (int)v28;
      if ((int)v28 <= 0xFF && *(_QWORD *)&v29 == COERCE__INT64((double)v30))
      {
        v33 = &WebCore::staticCSSValuePool[4 * v30];
        v34 = v33[16];
        result = v33 + 16;
        *result = v34 + 2;
      }
      else
      {
        result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *result = 2;
        v32 = *((_BYTE *)result + 6);
        *((_WORD *)result + 2) = 6;
        *((_BYTE *)result + 6) = v32 & 0xFC;
        *((double *)result + 1) = v29;
      }
    }
    else
    {
      WebCore::CSSPrimitiveValue::create(&v36, (WebCore::CSSPrimitiveValue *)((char *)this + 16), v16);
      result = v36;
    }
    v24 = v35;
    *(_QWORD *)(a3 + 16) = result;
    v23 = 1;
  }
  else
  {
    v23 = 0;
    v24 = v35;
    *(_BYTE *)(a3 + 8) = 0;
  }
  *(_QWORD *)a3 = v24;
  *(_BYTE *)(a3 + 24) = v23;
  *(_DWORD *)(a3 + 40) = 5;
  return result;
}

int *std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_0,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_1,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_2,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_3,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_4,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_5,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_6,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_7,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_8,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::RadialData::Extent,WebCore::StyleGradientImage::RadialData::Length,WebCore::StyleGradientImage::RadialData::Size,WebCore::StyleGradientImage::RadialData::CircleOfLength,WebCore::StyleGradientImage::RadialData::CircleOfExtent,WebCore::StyleGradientImage::RadialData::EllipseOfSize,WebCore::StyleGradientImage::RadialData::EllipseOfExtent,WebCore::StyleGradientPosition> const&>@<X0>(int *result@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  char v4;
  char v5;
  const WebCore::Length *v7;
  float v8;
  float v9;
  double v10;
  uint64_t v12;
  char v13;
  int *v14;
  int v15;
  float v16;
  float v17;
  double v18;
  unsigned int v19;
  char v21;
  int *v22;
  int v23;
  int *v24;

  v4 = *(_BYTE *)a2;
  v5 = *((_BYTE *)a2 + 20);
  if (v5)
  {
    v7 = *(const WebCore::Length **)(*(_QWORD *)result + 40);
    if (*((_BYTE *)a2 + 8) == 4)
    {
      v8 = a2[1];
      if (!*((_BYTE *)a2 + 10))
        v8 = (float)SLODWORD(v8);
      v9 = v8 / *(float *)(*((_QWORD *)v7 + 3) + 184);
      v10 = v9;
      if ((int)v9 <= 0xFF && *(_QWORD *)&v10 == COERCE__INT64((double)(int)v9))
      {
        v14 = &WebCore::staticCSSValuePool[4 * (int)v9];
        v15 = v14[16];
        v12 = (uint64_t)(v14 + 16);
        *(_DWORD *)v12 = v15 + 2;
      }
      else
      {
        v12 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v12 = 2;
        v13 = *(_BYTE *)(v12 + 6);
        *(_WORD *)(v12 + 4) = 6;
        *(_BYTE *)(v12 + 6) = v13 & 0xFC;
        *(double *)(v12 + 8) = v10;
      }
      *(_QWORD *)(a3 + 8) = v12;
    }
    else
    {
      WebCore::CSSPrimitiveValue::create((int **)(a3 + 8), (WebCore::CSSPrimitiveValue *)(a2 + 1), v7);
    }
    if (*((_BYTE *)a2 + 16) == 4)
    {
      v16 = a2[3];
      if (!*((_BYTE *)a2 + 18))
        v16 = (float)SLODWORD(v16);
      v17 = v16 / *(float *)(*((_QWORD *)v7 + 3) + 184);
      v18 = v17;
      v19 = (int)v17;
      if ((int)v17 <= 0xFF && *(_QWORD *)&v18 == COERCE__INT64((double)v19))
      {
        v22 = &WebCore::staticCSSValuePool[4 * v19];
        v23 = v22[16];
        result = v22 + 16;
        *result = v23 + 2;
      }
      else
      {
        result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *result = 2;
        v21 = *((_BYTE *)result + 6);
        *((_WORD *)result + 2) = 6;
        *((_BYTE *)result + 6) = v21 & 0xFC;
        *((double *)result + 1) = v18;
      }
    }
    else
    {
      WebCore::CSSPrimitiveValue::create(&v24, (WebCore::CSSPrimitiveValue *)(a2 + 3), v7);
      result = v24;
    }
    *(_QWORD *)(a3 + 16) = result;
    v5 = 1;
  }
  else
  {
    *(_BYTE *)(a3 + 8) = 0;
  }
  *(_BYTE *)a3 = v4;
  *(_BYTE *)(a3 + 24) = v5;
  *(_DWORD *)(a3 + 40) = 6;
  return result;
}

int *std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_0,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_1,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_2,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_3,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_4,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_5,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_6,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_7,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_8,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::RadialData::Extent,WebCore::StyleGradientImage::RadialData::Length,WebCore::StyleGradientImage::RadialData::Size,WebCore::StyleGradientImage::RadialData::CircleOfLength,WebCore::StyleGradientImage::RadialData::CircleOfExtent,WebCore::StyleGradientImage::RadialData::EllipseOfSize,WebCore::StyleGradientImage::RadialData::EllipseOfExtent,WebCore::StyleGradientPosition> const&>@<X0>(WebCore::CSSPrimitiveValue *this@<X1>, uint64_t *a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v5;
  const WebCore::Length *v6;
  float v7;
  float v8;
  double v9;
  uint64_t v11;
  char v12;
  int *v13;
  int v14;
  const WebCore::Length *v15;
  float v16;
  float v17;
  double v18;
  unsigned int v19;
  int *v21;
  char v22;
  int *v23;
  int v24;
  int *v25;
  const WebCore::Length *v26;
  float v27;
  float v28;
  double v29;
  uint64_t v31;
  char v32;
  int *v33;
  int v34;
  float v35;
  float v36;
  double v37;
  unsigned int v38;
  int *v40;
  char v41;
  int *v42;
  int v43;
  int *v44;
  int *result;
  int *v46;
  int *v47;
  int *v48;

  v5 = *a2;
  v6 = *(const WebCore::Length **)(*a2 + 48);
  if (*((_BYTE *)this + 4) == 4)
  {
    v7 = *(float *)this;
    if (!*((_BYTE *)this + 6))
      v7 = (float)*(int *)this;
    v8 = v7 / *(float *)(*((_QWORD *)v6 + 3) + 184);
    v9 = v8;
    if ((int)v8 <= 0xFF && *(_QWORD *)&v9 == COERCE__INT64((double)(int)v8))
    {
      v13 = &WebCore::staticCSSValuePool[4 * (int)v8];
      v14 = v13[16];
      v11 = (uint64_t)(v13 + 16);
      *(_DWORD *)v11 = v14 + 2;
    }
    else
    {
      v11 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v11 = 2;
      v12 = *(_BYTE *)(v11 + 6);
      *(_WORD *)(v11 + 4) = 6;
      *(_BYTE *)(v11 + 6) = v12 & 0xFC;
      *(double *)(v11 + 8) = v9;
    }
    v47 = (int *)v11;
  }
  else
  {
    WebCore::CSSPrimitiveValue::create(&v47, this, v6);
  }
  v15 = *(const WebCore::Length **)(v5 + 48);
  if (*((_BYTE *)this + 12) == 4)
  {
    v16 = *((float *)this + 2);
    if (!*((_BYTE *)this + 14))
      v16 = (float)SLODWORD(v16);
    v17 = v16 / *(float *)(*((_QWORD *)v15 + 3) + 184);
    v18 = v17;
    v19 = (int)v17;
    if ((int)v17 <= 0xFF && *(_QWORD *)&v18 == COERCE__INT64((double)v19))
    {
      v23 = &WebCore::staticCSSValuePool[4 * v19];
      v24 = v23[16];
      v21 = v23 + 16;
      *v21 = v24 + 2;
    }
    else
    {
      v21 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *v21 = 2;
      v22 = *((_BYTE *)v21 + 6);
      *((_WORD *)v21 + 2) = 6;
      *((_BYTE *)v21 + 6) = v22 & 0xFC;
      *((double *)v21 + 1) = v18;
    }
  }
  else
  {
    WebCore::CSSPrimitiveValue::create(&v46, (WebCore::CSSPrimitiveValue *)((char *)this + 8), v15);
    v21 = v46;
  }
  v25 = v47;
  v46 = 0;
  v47 = 0;
  if (*((_BYTE *)this + 32))
  {
    v26 = *(const WebCore::Length **)(v5 + 48);
    if (*((_BYTE *)this + 20) == 4)
    {
      v27 = *((float *)this + 4);
      if (!*((_BYTE *)this + 22))
        v27 = (float)SLODWORD(v27);
      v28 = v27 / *(float *)(*((_QWORD *)v26 + 3) + 184);
      v29 = v28;
      if ((int)v28 <= 0xFF && *(_QWORD *)&v29 == COERCE__INT64((double)(int)v28))
      {
        v33 = &WebCore::staticCSSValuePool[4 * (int)v28];
        v34 = v33[16];
        v31 = (uint64_t)(v33 + 16);
        *(_DWORD *)v31 = v34 + 2;
      }
      else
      {
        v31 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v31 = 2;
        v32 = *(_BYTE *)(v31 + 6);
        *(_WORD *)(v31 + 4) = 6;
        *(_BYTE *)(v31 + 6) = v32 & 0xFC;
        *(double *)(v31 + 8) = v29;
      }
      *(_QWORD *)(a3 + 16) = v31;
    }
    else
    {
      WebCore::CSSPrimitiveValue::create((int **)(a3 + 16), (WebCore::CSSPrimitiveValue *)((char *)this + 16), v26);
    }
    if (*((_BYTE *)this + 28) == 4)
    {
      v35 = *((float *)this + 6);
      if (!*((_BYTE *)this + 30))
        v35 = (float)SLODWORD(v35);
      v36 = v35 / *(float *)(*((_QWORD *)v26 + 3) + 184);
      v37 = v36;
      v38 = (int)v36;
      if ((int)v36 <= 0xFF && *(_QWORD *)&v37 == COERCE__INT64((double)v38))
      {
        v42 = &WebCore::staticCSSValuePool[4 * v38];
        v43 = v42[16];
        v40 = v42 + 16;
        *v40 = v43 + 2;
      }
      else
      {
        v40 = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *v40 = 2;
        v41 = *((_BYTE *)v40 + 6);
        *((_WORD *)v40 + 2) = 6;
        *((_BYTE *)v40 + 6) = v41 & 0xFC;
        *((double *)v40 + 1) = v37;
      }
    }
    else
    {
      WebCore::CSSPrimitiveValue::create(&v48, (WebCore::CSSPrimitiveValue *)((char *)this + 24), v26);
      v40 = v48;
    }
    *(_QWORD *)a3 = v25;
    *(_QWORD *)(a3 + 8) = v21;
    *(_QWORD *)(a3 + 24) = v40;
    *(_BYTE *)(a3 + 32) = 1;
    v44 = v46;
    *(_DWORD *)(a3 + 40) = 7;
    v46 = 0;
    if (v44)
    {
      if (*v44 == 2)
        WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v44, v15);
      else
        *v44 -= 2;
    }
  }
  else
  {
    *(_QWORD *)a3 = v25;
    *(_QWORD *)(a3 + 8) = v21;
    *(_BYTE *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 32) = 0;
    *(_DWORD *)(a3 + 40) = 7;
  }
  result = v47;
  v47 = 0;
  if (result)
  {
    if (*result == 2)
      return (int *)WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)result, v15);
    else
      *result -= 2;
  }
  return result;
}

int *std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_0,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_1,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_2,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_3,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_4,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_5,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_6,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_7,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_8,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::RadialData::Extent,WebCore::StyleGradientImage::RadialData::Length,WebCore::StyleGradientImage::RadialData::Size,WebCore::StyleGradientImage::RadialData::CircleOfLength,WebCore::StyleGradientImage::RadialData::CircleOfExtent,WebCore::StyleGradientImage::RadialData::EllipseOfSize,WebCore::StyleGradientImage::RadialData::EllipseOfExtent,WebCore::StyleGradientPosition> const&>@<X0>(int *result@<X0>, float *a2@<X1>, uint64_t a3@<X8>)
{
  char v4;
  char v5;
  const WebCore::Length *v7;
  float v8;
  float v9;
  double v10;
  uint64_t v12;
  char v13;
  int *v14;
  int v15;
  float v16;
  float v17;
  double v18;
  unsigned int v19;
  char v21;
  int *v22;
  int v23;
  int *v24;

  v4 = *(_BYTE *)a2;
  v5 = *((_BYTE *)a2 + 20);
  if (v5)
  {
    v7 = *(const WebCore::Length **)(*(_QWORD *)result + 56);
    if (*((_BYTE *)a2 + 8) == 4)
    {
      v8 = a2[1];
      if (!*((_BYTE *)a2 + 10))
        v8 = (float)SLODWORD(v8);
      v9 = v8 / *(float *)(*((_QWORD *)v7 + 3) + 184);
      v10 = v9;
      if ((int)v9 <= 0xFF && *(_QWORD *)&v10 == COERCE__INT64((double)(int)v9))
      {
        v14 = &WebCore::staticCSSValuePool[4 * (int)v9];
        v15 = v14[16];
        v12 = (uint64_t)(v14 + 16);
        *(_DWORD *)v12 = v15 + 2;
      }
      else
      {
        v12 = WTF::fastCompactMalloc((WTF *)0x10);
        *(_DWORD *)v12 = 2;
        v13 = *(_BYTE *)(v12 + 6);
        *(_WORD *)(v12 + 4) = 6;
        *(_BYTE *)(v12 + 6) = v13 & 0xFC;
        *(double *)(v12 + 8) = v10;
      }
      *(_QWORD *)(a3 + 8) = v12;
    }
    else
    {
      WebCore::CSSPrimitiveValue::create((int **)(a3 + 8), (WebCore::CSSPrimitiveValue *)(a2 + 1), v7);
    }
    if (*((_BYTE *)a2 + 16) == 4)
    {
      v16 = a2[3];
      if (!*((_BYTE *)a2 + 18))
        v16 = (float)SLODWORD(v16);
      v17 = v16 / *(float *)(*((_QWORD *)v7 + 3) + 184);
      v18 = v17;
      v19 = (int)v17;
      if ((int)v17 <= 0xFF && *(_QWORD *)&v18 == COERCE__INT64((double)v19))
      {
        v22 = &WebCore::staticCSSValuePool[4 * v19];
        v23 = v22[16];
        result = v22 + 16;
        *result = v23 + 2;
      }
      else
      {
        result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
        *result = 2;
        v21 = *((_BYTE *)result + 6);
        *((_WORD *)result + 2) = 6;
        *((_BYTE *)result + 6) = v21 & 0xFC;
        *((double *)result + 1) = v18;
      }
    }
    else
    {
      WebCore::CSSPrimitiveValue::create(&v24, (WebCore::CSSPrimitiveValue *)(a2 + 3), v7);
      result = v24;
    }
    *(_QWORD *)(a3 + 16) = result;
    v5 = 1;
  }
  else
  {
    *(_BYTE *)(a3 + 8) = 0;
  }
  *(_BYTE *)a3 = v4;
  *(_BYTE *)(a3 + 24) = v5;
  *(_DWORD *)(a3 + 40) = 8;
  return result;
}

int *std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_0,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_1,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_2,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_3,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_4,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_5,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_6,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_7,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_8,WebCore::computedStyleValue(WebCore::StyleGradientImage::RadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::RadialData::Extent,WebCore::StyleGradientImage::RadialData::Length,WebCore::StyleGradientImage::RadialData::Size,WebCore::StyleGradientImage::RadialData::CircleOfLength,WebCore::StyleGradientImage::RadialData::CircleOfExtent,WebCore::StyleGradientImage::RadialData::EllipseOfSize,WebCore::StyleGradientImage::RadialData::EllipseOfExtent,WebCore::StyleGradientPosition> const&>@<X0>(WebCore::CSSPrimitiveValue *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  const WebCore::Length *v5;
  float v6;
  float v7;
  double v8;
  uint64_t v10;
  char v11;
  int *v12;
  int v13;
  float v14;
  float v15;
  double v16;
  unsigned int v17;
  int *result;
  char v20;
  int *v21;
  int v22;
  int *v23;

  v5 = *(const WebCore::Length **)(*(_QWORD *)a2 + 64);
  if (*((_BYTE *)this + 4) == 4)
  {
    v6 = *(float *)this;
    if (!*((_BYTE *)this + 6))
      v6 = (float)*(int *)this;
    v7 = v6 / *(float *)(*((_QWORD *)v5 + 3) + 184);
    v8 = v7;
    if ((int)v7 <= 0xFF && *(_QWORD *)&v8 == COERCE__INT64((double)(int)v7))
    {
      v12 = &WebCore::staticCSSValuePool[4 * (int)v7];
      v13 = v12[16];
      v10 = (uint64_t)(v12 + 16);
      *(_DWORD *)v10 = v13 + 2;
    }
    else
    {
      v10 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v10 = 2;
      v11 = *(_BYTE *)(v10 + 6);
      *(_WORD *)(v10 + 4) = 6;
      *(_BYTE *)(v10 + 6) = v11 & 0xFC;
      *(double *)(v10 + 8) = v8;
    }
    *(_QWORD *)a3 = v10;
  }
  else
  {
    WebCore::CSSPrimitiveValue::create((int **)a3, this, v5);
  }
  if (*((_BYTE *)this + 12) == 4)
  {
    v14 = *((float *)this + 2);
    if (!*((_BYTE *)this + 14))
      v14 = (float)SLODWORD(v14);
    v15 = v14 / *(float *)(*((_QWORD *)v5 + 3) + 184);
    v16 = v15;
    v17 = (int)v15;
    if ((int)v15 <= 0xFF && *(_QWORD *)&v16 == COERCE__INT64((double)v17))
    {
      v21 = &WebCore::staticCSSValuePool[4 * v17];
      v22 = v21[16];
      result = v21 + 16;
      *result = v22 + 2;
    }
    else
    {
      result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *result = 2;
      v20 = *((_BYTE *)result + 6);
      *((_WORD *)result + 2) = 6;
      *((_BYTE *)result + 6) = v20 & 0xFC;
      *((double *)result + 1) = v16;
    }
  }
  else
  {
    WebCore::CSSPrimitiveValue::create(&v23, (WebCore::CSSPrimitiveValue *)((char *)this + 8), v5);
    result = v23;
  }
  *(_QWORD *)(a3 + 8) = result;
  *(_DWORD *)(a3 + 40) = 9;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computedStyleValue(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_0,WebCore::computedStyleValue(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_1,WebCore::computedStyleValue(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_2,WebCore::computedStyleValue(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_3,WebCore::computedStyleValue(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,std::monostate::ExtentKeyword,std::monostate::ShapeAndExtent,WebCore::StyleGradientImage::PrefixedRadialData::MeasuredSize> const&>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 16) = 0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computedStyleValue(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_0,WebCore::computedStyleValue(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_1,WebCore::computedStyleValue(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_2,WebCore::computedStyleValue(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_3,WebCore::computedStyleValue(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,std::monostate::ExtentKeyword,std::monostate::ShapeAndExtent,WebCore::StyleGradientImage::PrefixedRadialData::MeasuredSize> const&>(_BYTE *a1@<X1>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 1;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computedStyleValue(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_0,WebCore::computedStyleValue(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_1,WebCore::computedStyleValue(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_2,WebCore::computedStyleValue(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_3,WebCore::computedStyleValue(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,std::monostate::ExtentKeyword,std::monostate::ShapeAndExtent,WebCore::StyleGradientImage::PrefixedRadialData::MeasuredSize> const&>(_BYTE *a1@<X1>, uint64_t a2@<X8>)
{
  *(_BYTE *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 2;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computedStyleValue(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_0,WebCore::computedStyleValue(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_1,WebCore::computedStyleValue(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_2,WebCore::computedStyleValue(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_3,WebCore::computedStyleValue(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,std::monostate::ExtentKeyword,std::monostate::ShapeAndExtent,WebCore::StyleGradientImage::PrefixedRadialData::MeasuredSize> const&>(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *a1;
  *(_DWORD *)(a2 + 16) = 3;
}

int *std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computedStyleValue(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_0,WebCore::computedStyleValue(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_1,WebCore::computedStyleValue(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_2,WebCore::computedStyleValue(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_3,WebCore::computedStyleValue(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::CSSGradientColorInterpolationMethod,WebCore::RenderStyle const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,std::monostate::ExtentKeyword,std::monostate::ShapeAndExtent,WebCore::StyleGradientImage::PrefixedRadialData::MeasuredSize> const&>@<X0>(WebCore::CSSPrimitiveValue *this@<X1>, const WebCore::Length ***a2@<X0>, uint64_t a3@<X8>)
{
  const WebCore::Length **v5;
  const WebCore::Length *v6;
  float v7;
  float v8;
  double v9;
  uint64_t v11;
  char v12;
  int *v13;
  int v14;
  const WebCore::Length *v15;
  float v16;
  float v17;
  double v18;
  unsigned int v19;
  int *result;
  char v22;
  int *v23;
  int v24;
  int *v25;

  v5 = *a2;
  v6 = **a2;
  if (*((_BYTE *)this + 4) == 4)
  {
    v7 = *(float *)this;
    if (!*((_BYTE *)this + 6))
      v7 = (float)*(int *)this;
    v8 = v7 / *(float *)(*((_QWORD *)v6 + 3) + 184);
    v9 = v8;
    if ((int)v8 <= 0xFF && *(_QWORD *)&v9 == COERCE__INT64((double)(int)v8))
    {
      v13 = &WebCore::staticCSSValuePool[4 * (int)v8];
      v14 = v13[16];
      v11 = (uint64_t)(v13 + 16);
      *(_DWORD *)v11 = v14 + 2;
    }
    else
    {
      v11 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v11 = 2;
      v12 = *(_BYTE *)(v11 + 6);
      *(_WORD *)(v11 + 4) = 6;
      *(_BYTE *)(v11 + 6) = v12 & 0xFC;
      *(double *)(v11 + 8) = v9;
    }
    v25 = (int *)v11;
  }
  else
  {
    WebCore::CSSPrimitiveValue::create(&v25, this, v6);
  }
  v15 = *v5;
  if (*((_BYTE *)this + 12) == 4)
  {
    v16 = *((float *)this + 2);
    if (!*((_BYTE *)this + 14))
      v16 = (float)SLODWORD(v16);
    v17 = v16 / *(float *)(*((_QWORD *)v15 + 3) + 184);
    v18 = v17;
    v19 = (int)v17;
    if ((int)v17 <= 0xFF && *(_QWORD *)&v18 == COERCE__INT64((double)v19))
    {
      v23 = &WebCore::staticCSSValuePool[4 * v19];
      v24 = v23[16];
      result = v23 + 16;
      *result = v24 + 2;
    }
    else
    {
      result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *result = 2;
      v22 = *((_BYTE *)result + 6);
      *((_WORD *)result + 2) = 6;
      *((_BYTE *)result + 6) = v22 & 0xFC;
      *((double *)result + 1) = v18;
    }
    *(_QWORD *)(a3 + 8) = result;
  }
  else
  {
    result = (int *)WebCore::CSSPrimitiveValue::create((int **)(a3 + 8), (WebCore::CSSPrimitiveValue *)((char *)this + 8), v15);
  }
  *(_QWORD *)a3 = v25;
  *(_DWORD *)(a3 + 16) = 4;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computedStyleValueForColorStopPosition(WebCore::StyleGradientImageStop<std::variant<std::monostate,WebCore::AngleRaw,WebCore::PercentRaw>> const&,WebCore::RenderStyle const&)::{lambda(std::monostate)#1},WebCore::computedStyleValueForColorStopPosition(WebCore::StyleGradientImageStop<std::variant<std::monostate,WebCore::AngleRaw,WebCore::PercentRaw>> const&,WebCore::RenderStyle const&)::{lambda(WebCore::AngleRaw)#1},WebCore::computedStyleValueForColorStopPosition(WebCore::StyleGradientImageStop<std::variant<std::monostate,WebCore::AngleRaw,WebCore::PercentRaw>> const&,WebCore::RenderStyle const&)::{lambda(WebCore::PercentRaw)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,WebCore::PercentRaw> const&>(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

int *std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computedStyleValueForColorStopPosition(WebCore::StyleGradientImageStop<std::variant<std::monostate,WebCore::AngleRaw,WebCore::PercentRaw>> const&,WebCore::RenderStyle const&)::{lambda(std::monostate)#1},WebCore::computedStyleValueForColorStopPosition(WebCore::StyleGradientImageStop<std::variant<std::monostate,WebCore::AngleRaw,WebCore::PercentRaw>> const&,WebCore::RenderStyle const&)::{lambda(WebCore::AngleRaw)#1},WebCore::computedStyleValueForColorStopPosition(WebCore::StyleGradientImageStop<std::variant<std::monostate,WebCore::AngleRaw,WebCore::PercentRaw>> const&,WebCore::RenderStyle const&)::{lambda(WebCore::PercentRaw)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,WebCore::PercentRaw> const&>@<X0>(double *a1@<X1>, int **a2@<X8>)
{
  int v3;
  double v4;
  int *v6;
  int *result;
  int v8;
  BOOL v9;
  char v11;

  v3 = *(unsigned __int8 *)a1;
  v4 = a1[1];
  if (v3 == 6)
  {
    if ((int)v4 > 0xFF || *(_QWORD *)&v4 != COERCE__INT64((double)(int)v4))
      goto LABEL_20;
    v6 = &WebCore::staticCSSValuePool[4 * (int)v4];
    v8 = v6[16];
    result = v6 + 16;
    *result = v8 + 2;
  }
  else
  {
    if (v3 == 1)
    {
      if ((int)v4 <= 0xFF && *(_QWORD *)&v4 == COERCE__INT64((double)(int)v4))
      {
        result = &WebCore::staticCSSValuePool[4 * (int)v4 + 2064];
        *result += 2;
        goto LABEL_21;
      }
      goto LABEL_20;
    }
    if (v3 != 3
      || ((int)v4 <= 0xFF
        ? (v9 = *(_QWORD *)&v4 == COERCE__INT64((double)(int)v4))
        : (v9 = 0),
          !v9))
    {
LABEL_20:
      result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
      *result = 2;
      v11 = *((_BYTE *)result + 6);
      *((_WORD *)result + 2) = v3 & 0x7F;
      *((_BYTE *)result + 6) = v11 & 0xFC;
      *((double *)result + 1) = v4;
      goto LABEL_21;
    }
    result = &WebCore::staticCSSValuePool[4 * (int)v4 + 1040];
    *result += 2;
  }
LABEL_21:
  *a2 = result;
  return result;
}

int *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::computedStyleValueForColorStopPosition(WebCore::StyleGradientImageStop<std::variant<std::monostate,WebCore::AngleRaw,WebCore::PercentRaw>> const&,WebCore::RenderStyle const&)::{lambda(std::monostate)#1},WebCore::computedStyleValueForColorStopPosition(WebCore::StyleGradientImageStop<std::variant<std::monostate,WebCore::AngleRaw,WebCore::PercentRaw>> const&,WebCore::RenderStyle const&)::{lambda(WebCore::AngleRaw)#1},WebCore::computedStyleValueForColorStopPosition(WebCore::StyleGradientImageStop<std::variant<std::monostate,WebCore::AngleRaw,WebCore::PercentRaw>> const&,WebCore::RenderStyle const&)::{lambda(WebCore::PercentRaw)#1}>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,WebCore::PercentRaw> const&>@<X0>(double *a1@<X1>, int **a2@<X8>)
{
  double v3;
  unsigned int v4;
  int *result;
  char v7;

  v3 = *a1;
  v4 = (int)*a1;
  if (v4 <= 0xFF && *(_QWORD *)a1 == COERCE__INT64((double)v4))
  {
    result = &WebCore::staticCSSValuePool[4 * v4 + 1040];
    *result += 2;
  }
  else
  {
    result = (int *)WTF::fastCompactMalloc((WTF *)0x10);
    *result = 2;
    v7 = *((_BYTE *)result + 6);
    *((_WORD *)result + 2) = 3;
    *((_BYTE *)result + 6) = v7 & 0xFC;
    *((double *)result + 1) = v3;
  }
  *a2 = result;
  return result;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::image(WebCore::RenderElement const*,WebCore::FloatSize const&,BOOL)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, unsigned int **a3@<X8>)
{
  uint64_t v4;
  WebCore::RenderStyle *v5;
  uint64_t v6;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int *result;
  void *v15;
  WTF *v16;
  WTF *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v22;
  __int128 v23;
  int v24;
  WTF *v25;
  WTF *v26;
  _QWORD v27[5];
  __int128 *v28;
  __int128 v29;

  v4 = **a1;
  v5 = (WebCore::RenderStyle *)(*a1)[2];
  v25 = (WTF *)(*a1)[1];
  v26 = v25;
  v27[0] = v25;
  v27[1] = v25;
  v27[2] = v25;
  v6 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v6 == -1)
  {
    v22 = std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned int *)std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::image(WebCore::RenderElement const*,WebCore::FloatSize const&,BOOL)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(v22);
  }
  else
  {
    *(_QWORD *)&v23 = &v25;
    LODWORD(v29) = ((float (*)(__int128 *))off_1E3442AC0[v6])(&v23);
    *(_QWORD *)((char *)&v29 + 4) = __PAIR64__(v9, v8);
    HIDWORD(v29) = v10;
    v28 = &v29;
    v23 = v29;
    v24 = 0;
    v11 = *(_QWORD *)(v4 + 168);
    v12 = *(_DWORD *)(v4 + 176);
    v13 = WTF::fastMalloc((WTF *)0xC8);
    result = (unsigned int *)WebCore::Gradient::Gradient(v13, &v23, v11, v12, 0, (uint64_t *)&v25, 0, 0);
    *a3 = result;
    v16 = v25;
    if (HIDWORD(v26))
    {
      v17 = (WTF *)((char *)v25 + 16 * HIDWORD(v26));
      do
      {
        v18 = *((_QWORD *)v16 + 1);
        if ((v18 & 0x8000000000000) != 0)
        {
          result = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
          do
          {
            v19 = __ldaxr(result);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, result));
          if (!v20)
          {
            atomic_store(1u, result);
            result = (unsigned int *)WTF::fastFree((WTF *)result, v15);
          }
        }
        v16 = (WTF *)((char *)v16 + 16);
      }
      while (v16 != v17);
      v16 = v25;
    }
    if (v27 != (_QWORD *)v16 && v16 != 0)
    {
      v25 = 0;
      LODWORD(v26) = 0;
      return (unsigned int *)WTF::fastFree(v16, v15);
    }
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::image(WebCore::RenderElement const*,WebCore::FloatSize const&,BOOL)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  float *v4;
  uint64_t v5;
  WebCore::RenderStyle *v6;
  uint64_t v7;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  float *v30;
  const std::nothrow_t *v31;
  unint64_t v32;
  void *v33;
  BOOL v34;
  void *v35;
  WTF *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t **v41;
  uint64_t v42;
  _QWORD *v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  WTF *v49;
  WTF *v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  unsigned int v54;
  WTF *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t *v59;
  char v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE v64[24];
  __int128 v65;
  uint64_t v66;
  _DWORD v67[6];
  uint64_t v68;
  WTF **v69;

  v5 = **a1;
  v4 = (float *)(*a1)[1];
  v6 = (WebCore::RenderStyle *)(*a1)[2];
  v61 = *v4;
  *(_QWORD *)&v65 = &v61;
  v7 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v7 == -1)
    goto LABEL_64;
  v56 = (WTF *)&v65;
  v9 = ((float (*)(WTF **))off_1E3442638[v7])(&v56);
  v61 = v4[1];
  *(_QWORD *)&v65 = &v61;
  v10 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
    goto LABEL_64;
  v56 = (WTF *)&v65;
  v11 = ((float (*)(WTF **, uint64_t))off_1E3442638[v10])(&v56, a2 + 16);
  v61 = *v4;
  *(_QWORD *)&v65 = &v61;
  v12 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v12 == -1
    || (v56 = (WTF *)&v65,
        v13 = ((float (*)(WTF **, uint64_t))off_1E3442638[v12])(&v56, a2 + 32),
        v61 = v4[1],
        *(_QWORD *)&v65 = &v61,
        v14 = *(unsigned int *)(a2 + 56),
        (_DWORD)v14 == -1))
  {
LABEL_64:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_65;
  }
  v56 = (WTF *)&v65;
  v15 = ((float (*)(WTF **, uint64_t))off_1E3442638[v14])(&v56, a2 + 48);
  v16 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 3) + 320) + 20);
  *(_QWORD *)&v65 = &v66;
  *((_QWORD *)&v65 + 1) = 2;
  v17 = *(unsigned int *)(a2 + 76);
  if (v17 < 3)
  {
    v18 = &v66;
    if ((_DWORD)v17)
      goto LABEL_7;
    goto LABEL_26;
  }
  if (v17 >> 28)
  {
LABEL_65:
    __break(0xC471u);
LABEL_66:
    __break(1u);
    return;
  }
  v18 = (uint64_t *)WTF::fastMalloc((WTF *)(16 * v17));
  DWORD2(v65) = v17;
  *(_QWORD *)&v65 = v18;
  if (*(_DWORD *)(a2 + 76))
  {
LABEL_7:
    v19 = 0;
    v20 = 0;
    while (1)
    {
      v21 = *(_QWORD *)(a2 + 64);
      v22 = v21 + v19;
      if (!*(_BYTE *)(v21 + v19 + 32))
        goto LABEL_66;
      if (*(_BYTE *)(v22 + 28) == 3)
      {
        v23 = *(float *)(v22 + 24);
        if (!*(_BYTE *)(v22 + 30))
          v23 = (float)SLODWORD(v23);
        v24 = v23 / 100.0;
      }
      else if (*(_BYTE *)(v22 + 30))
      {
        v24 = *(float *)(v22 + 24);
      }
      else
      {
        v24 = (float)*(int *)(v22 + 24);
      }
      v61 = v24;
      if (*(_BYTE *)(v21 + v19 + 16))
      {
        if (v16)
        {
          WebCore::RenderStyle::colorWithColorFilter(v6, (const WebCore::StyleColor *)v22, (WebCore::Color *)&v62);
        }
        else
        {
          v68 = *((_QWORD *)v6 + 4) + 328;
          v56 = (WTF *)&v68;
          v57 = &v68;
          v58 = &v68;
          v59 = &v68;
          v25 = *(unsigned int *)(v21 + v19 + 8);
          if ((_DWORD)v25 == -1)
            goto LABEL_64;
          v69 = &v56;
          ((void (*)(uint64_t *__return_ptr, WTF ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v25])(&v62, &v69);
        }
      }
      else
      {
        v62 = 0;
      }
      v26 = HIDWORD(v65);
      v27 = v65 + 16 * HIDWORD(v65);
      *(float *)v27 = v61;
      *(_QWORD *)(v27 + 8) = 0;
      *(_QWORD *)(v27 + 8) = v62;
      v28 = v26 + 1;
      HIDWORD(v65) = v28;
      ++v20;
      v19 += 40;
      if (v20 >= *(unsigned int *)(a2 + 76))
      {
        v18 = (uint64_t *)v65;
        goto LABEL_27;
      }
    }
  }
LABEL_26:
  v28 = HIDWORD(v65);
LABEL_27:
  v29 = v28;
  v30 = (float *)&v18[2 * v28];
  if (v28)
  {
    v31 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v32 = v28;
    while (1)
    {
      v33 = operator new(16 * v32, v31);
      if (v33)
        break;
      v34 = v32 > 1;
      v32 >>= 1;
      if (!v34)
        goto LABEL_31;
    }
    v35 = v33;
    operator delete(v35);
  }
  else
  {
LABEL_31:
  }
  v36 = (WTF *)v65;
  if ((uint64_t *)v65 == &v66)
  {
    v37 = HIDWORD(v65);
    if (HIDWORD(v65))
    {
      v38 = v64;
      v39 = 16 * HIDWORD(v65);
      v40 = v67;
      do
      {
        *((_DWORD *)v38 - 2) = *((_DWORD *)v40 - 2);
        *v38 = 0;
        if (*v40)
        {
          *v38 = *v40;
          *v40 = 0;
        }
        v38 += 2;
        v40 += 2;
        v39 -= 16;
      }
      while (v39);
      v56 = (WTF *)&v58;
      LODWORD(v57) = 2;
      goto LABEL_40;
    }
    v56 = (WTF *)&v58;
    LODWORD(v57) = 2;
  }
  else
  {
    *(_QWORD *)&v65 = &v66;
    v44 = DWORD2(v65);
    v37 = HIDWORD(v65);
    DWORD2(v65) = 2;
    LODWORD(v62) = v44;
    v56 = (WTF *)&v58;
    LODWORD(v57) = 2;
    if (v36 == (WTF *)&v63)
    {
LABEL_40:
      if ((_DWORD)v37)
      {
        v41 = &v59;
        v42 = 16 * v37;
        v43 = v64;
        do
        {
          *((_DWORD *)v41 - 2) = *((_DWORD *)v43 - 2);
          *v41 = 0;
          if (*v43)
          {
            *v41 = (uint64_t *)*v43;
            *v43 = 0;
          }
          v41 += 2;
          v43 += 2;
          v42 -= 16;
        }
        while (v42);
      }
      goto LABEL_49;
    }
    v56 = v36;
    LODWORD(v57) = v44;
  }
LABEL_49:
  HIDWORD(v57) = v37;
  v60 = 1;
  v45 = *(_DWORD *)(v5 + 176);
  v46 = *(_QWORD *)(v5 + 168);
  *(_QWORD *)&v65 = __PAIR64__(LODWORD(v11), LODWORD(v9));
  *((_QWORD *)&v65 + 1) = __PAIR64__(LODWORD(v15), LODWORD(v13));
  v67[1] = 0;
  v47 = WTF::fastMalloc((WTF *)0xC8);
  *a3 = WebCore::Gradient::Gradient(v47, &v65, v46, v45, 0, (uint64_t *)&v56, 0, 0);
  v49 = v56;
  if (HIDWORD(v57))
  {
    v50 = (WTF *)((char *)v56 + 16 * HIDWORD(v57));
    do
    {
      v51 = *((_QWORD *)v49 + 1);
      if ((v51 & 0x8000000000000) != 0)
      {
        v52 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFLL);
        do
        {
          v53 = __ldaxr(v52);
          v54 = v53 - 1;
        }
        while (__stlxr(v54, v52));
        if (!v54)
        {
          atomic_store(1u, v52);
          WTF::fastFree((WTF *)v52, v48);
        }
      }
      v49 = (WTF *)((char *)v49 + 16);
    }
    while (v49 != v50);
    v49 = v56;
  }
  if (&v58 != (uint64_t **)v49 && v49 != 0)
  {
    v56 = 0;
    LODWORD(v57) = 0;
    WTF::fastFree(v49, v48);
  }
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::image(WebCore::RenderElement const*,WebCore::FloatSize const&,BOOL)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, unsigned int **a3@<X8>)
{
  uint64_t v4;
  WebCore::RenderStyle *v5;
  uint64_t v6;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int *result;
  void *v15;
  WTF *v16;
  WTF *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v22;
  __int128 v23;
  int v24;
  WTF *v25;
  WTF *v26;
  _QWORD v27[5];
  __int128 *v28;
  __int128 v29;

  v4 = **a1;
  v5 = (WebCore::RenderStyle *)(*a1)[2];
  v25 = (WTF *)(*a1)[1];
  v26 = v25;
  v27[0] = v25;
  v27[1] = v25;
  v27[2] = v25;
  v6 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v6 == -1)
  {
    v22 = std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned int *)std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::image(WebCore::RenderElement const*,WebCore::FloatSize const&,BOOL)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(v22);
  }
  else
  {
    *(_QWORD *)&v23 = &v25;
    LODWORD(v29) = ((float (*)(__int128 *))off_1E3442AE8[v6])(&v23);
    *(_QWORD *)((char *)&v29 + 4) = __PAIR64__(v9, v8);
    HIDWORD(v29) = v10;
    v28 = &v29;
    v23 = v29;
    v24 = 0;
    v11 = *(_QWORD *)(v4 + 168);
    v12 = *(_DWORD *)(v4 + 176);
    v13 = WTF::fastMalloc((WTF *)0xC8);
    result = (unsigned int *)WebCore::Gradient::Gradient(v13, &v23, v11, v12, 0, (uint64_t *)&v25, 0, 0);
    *a3 = result;
    v16 = v25;
    if (HIDWORD(v26))
    {
      v17 = (WTF *)((char *)v25 + 16 * HIDWORD(v26));
      do
      {
        v18 = *((_QWORD *)v16 + 1);
        if ((v18 & 0x8000000000000) != 0)
        {
          result = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
          do
          {
            v19 = __ldaxr(result);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, result));
          if (!v20)
          {
            atomic_store(1u, result);
            result = (unsigned int *)WTF::fastFree((WTF *)result, v15);
          }
        }
        v16 = (WTF *)((char *)v16 + 16);
      }
      while (v16 != v17);
      v16 = v25;
    }
    if (v27 != (_QWORD *)v16 && v16 != 0)
    {
      v25 = 0;
      LODWORD(v26) = 0;
      return (unsigned int *)WTF::fastFree(v16, v15);
    }
  }
  return result;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::image(WebCore::RenderElement const*,WebCore::FloatSize const&,BOOL)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, unsigned int **a3@<X8>)
{
  uint64_t v4;
  float *v5;
  WebCore::RenderStyle *v6;
  uint64_t v7;
  int v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int *result;
  void *v25;
  WTF *v26;
  WTF *v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v32;
  _BYTE v33[28];
  int v34;
  float32x2_t *v35;
  _BYTE v36[28];
  _QWORD v37[2];
  float *v38;
  float *v39;
  _QWORD v40[2];
  float *v41;
  WTF *v42;
  _QWORD *v43;
  _QWORD v44[18];

  v4 = **a1;
  v5 = (float *)(*a1)[1];
  v6 = (WebCore::RenderStyle *)(*a1)[2];
  v40[1] = v5;
  v41 = v5;
  v39 = v5;
  v40[0] = &v41;
  v37[0] = &v39;
  v37[1] = &v38;
  v38 = v5;
  v42 = (WTF *)v5;
  v43 = v37;
  v44[0] = v40;
  v44[1] = v37;
  v44[2] = v40;
  v44[3] = v37;
  v44[4] = v40;
  v44[5] = v5;
  v44[6] = v40;
  v44[7] = v5;
  v44[8] = v40;
  v44[9] = v37;
  v44[10] = v40;
  v44[11] = v5;
  v44[12] = v40;
  v44[13] = v5;
  v44[14] = v40;
  v44[15] = v37;
  v44[16] = &v41;
  v44[17] = v37;
  v7 = *(unsigned int *)(a2 + 36);
  if ((_DWORD)v7 == -1)
  {
    v32 = std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned int *)std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::image(WebCore::RenderElement const*,WebCore::FloatSize const&,BOOL)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(v32);
  }
  else
  {
    *(_QWORD *)v33 = &v42;
    ((void (*)(_BYTE *__return_ptr, _BYTE *))off_1E3442B10[v7])(v36, v33);
    v9 = *(unsigned __int8 *)(a2 + 40);
    if (*(_BYTE *)(a2 + 40))
    {
      v11 = *(float *)&v36[12];
      v10 = *(float *)&v36[8];
      v12 = *v5;
      v13 = v5[1];
      v14 = hypotf(*(float *)&v36[8], *(float *)&v36[12]);
      v15 = v10 - v12;
      v16 = hypotf(v15, v11);
      v17 = v11 - v13;
      v18 = hypotf(v10, v17);
      v19 = hypotf(v15, v17);
      if (v16 <= v14)
        v20 = v14;
      else
        v20 = v16;
      if (v18 > v20)
        v20 = v18;
      if (v19 <= v20)
        v19 = v20;
    }
    else
    {
      v19 = 0.0;
    }
    v35 = (float32x2_t *)v36;
    *(_OWORD *)v33 = *(_OWORD *)v36;
    *(_OWORD *)&v33[12] = *(_OWORD *)&v36[12];
    v34 = 1;
    v21 = *(_QWORD *)(v4 + 168);
    v22 = *(_DWORD *)(v4 + 176);
    v23 = WTF::fastMalloc((WTF *)0xC8);
    result = (unsigned int *)WebCore::Gradient::Gradient(v23, v33, v21, v22, 0, (uint64_t *)&v42, 0, 0);
    *a3 = result;
    v26 = v42;
    if (HIDWORD(v43))
    {
      v27 = (WTF *)((char *)v42 + 16 * HIDWORD(v43));
      do
      {
        v28 = *((_QWORD *)v26 + 1);
        if ((v28 & 0x8000000000000) != 0)
        {
          result = (unsigned int *)(v28 & 0xFFFFFFFFFFFFLL);
          do
          {
            v29 = __ldaxr(result);
            v30 = v29 - 1;
          }
          while (__stlxr(v30, result));
          if (!v30)
          {
            atomic_store(1u, result);
            result = (unsigned int *)WTF::fastFree((WTF *)result, v25);
          }
        }
        v26 = (WTF *)((char *)v26 + 16);
      }
      while (v26 != v27);
      v26 = v42;
    }
    if (v44 != (_QWORD *)v26 && v26 != 0)
    {
      v42 = 0;
      LODWORD(v43) = 0;
      return (unsigned int *)WTF::fastFree(v26, v25);
    }
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::image(WebCore::RenderElement const*,WebCore::FloatSize const&,BOOL)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(uint64_t **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  float *v4;
  uint64_t v5;
  WebCore::RenderStyle *v6;
  uint64_t v7;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  float v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  float *v31;
  const std::nothrow_t *v32;
  unint64_t v33;
  void *v34;
  BOOL v35;
  void *v36;
  WTF *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t **v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  WTF *v50;
  WTF *v51;
  uint64_t v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  WTF *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  char v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  WTF **v70;

  v5 = **a1;
  v4 = (float *)(*a1)[1];
  v6 = (WebCore::RenderStyle *)(*a1)[2];
  v62 = *v4;
  *(_QWORD *)&v66 = &v62;
  v7 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v7 == -1)
    goto LABEL_64;
  v57 = (WTF *)&v66;
  v9 = ((float (*)(WTF **))off_1E3442638[v7])(&v57);
  v62 = v4[1];
  *(_QWORD *)&v66 = &v62;
  v10 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v10 == -1)
    goto LABEL_64;
  v57 = (WTF *)&v66;
  v11 = ((float (*)(WTF **, uint64_t))off_1E3442638[v10])(&v57, a2 + 16);
  v62 = *v4;
  *(_QWORD *)&v66 = &v62;
  v12 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v12 == -1
    || (v57 = (WTF *)&v66,
        v13 = ((float (*)(WTF **, uint64_t))off_1E3442638[v12])(&v57, a2 + 32),
        v62 = v4[1],
        *(_QWORD *)&v66 = &v62,
        v14 = *(unsigned int *)(a2 + 56),
        (_DWORD)v14 == -1))
  {
LABEL_64:
    std::__throw_bad_variant_access[abi:sn180100]();
    goto LABEL_65;
  }
  v57 = (WTF *)&v66;
  v15 = ((float (*)(WTF **, uint64_t))off_1E3442638[v14])(&v57, a2 + 48);
  v16 = *(_QWORD *)(a2 + 64);
  v17 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v6 + 3) + 320) + 20);
  *(_QWORD *)&v66 = &v67;
  *((_QWORD *)&v66 + 1) = 2;
  v18 = *(unsigned int *)(a2 + 84);
  if (v18 < 3)
  {
    v19 = &v67;
    if ((_DWORD)v18)
      goto LABEL_7;
    goto LABEL_26;
  }
  if (v18 >> 28)
  {
LABEL_65:
    __break(0xC471u);
LABEL_66:
    __break(1u);
    return;
  }
  v19 = (uint64_t *)WTF::fastMalloc((WTF *)(16 * v18));
  DWORD2(v66) = v18;
  *(_QWORD *)&v66 = v19;
  if (*(_DWORD *)(a2 + 84))
  {
LABEL_7:
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v22 = *(_QWORD *)(a2 + 72);
      v23 = v22 + v20;
      if (!*(_BYTE *)(v22 + v20 + 32))
        goto LABEL_66;
      if (*(_BYTE *)(v23 + 28) == 3)
      {
        v24 = *(float *)(v23 + 24);
        if (!*(_BYTE *)(v23 + 30))
          v24 = (float)SLODWORD(v24);
        v25 = v24 / 100.0;
      }
      else if (*(_BYTE *)(v23 + 30))
      {
        v25 = *(float *)(v23 + 24);
      }
      else
      {
        v25 = (float)*(int *)(v23 + 24);
      }
      v62 = v25;
      if (*(_BYTE *)(v22 + v20 + 16))
      {
        if (v17)
        {
          WebCore::RenderStyle::colorWithColorFilter(v6, (const WebCore::StyleColor *)v23, (WebCore::Color *)&v63);
        }
        else
        {
          v69 = *((_QWORD *)v6 + 4) + 328;
          v57 = (WTF *)&v69;
          v58 = &v69;
          v59 = &v69;
          v60 = &v69;
          v26 = *(unsigned int *)(v22 + v20 + 8);
          if ((_DWORD)v26 == -1)
            goto LABEL_64;
          v70 = &v57;
          ((void (*)(uint64_t *__return_ptr, WTF ***))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v26])(&v63, &v70);
        }
      }
      else
      {
        v63 = 0;
      }
      v27 = HIDWORD(v66);
      v28 = v66 + 16 * HIDWORD(v66);
      *(float *)v28 = v62;
      *(_QWORD *)(v28 + 8) = 0;
      *(_QWORD *)(v28 + 8) = v63;
      v29 = v27 + 1;
      HIDWORD(v66) = v29;
      ++v21;
      v20 += 40;
      if (v21 >= *(unsigned int *)(a2 + 84))
      {
        v19 = (uint64_t *)v66;
        goto LABEL_27;
      }
    }
  }
LABEL_26:
  v29 = HIDWORD(v66);
LABEL_27:
  v30 = v29;
  v31 = (float *)&v19[2 * v29];
  if (v29)
  {
    v32 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v33 = v29;
    while (1)
    {
      v34 = operator new(16 * v33, v32);
      if (v34)
        break;
      v35 = v33 > 1;
      v33 >>= 1;
      if (!v35)
        goto LABEL_31;
    }
    v36 = v34;
    operator delete(v36);
  }
  else
  {
LABEL_31:
  }
  v37 = (WTF *)v66;
  if ((uint64_t *)v66 == &v67)
  {
    v38 = HIDWORD(v66);
    if (HIDWORD(v66))
    {
      v39 = (uint64_t *)v65;
      v40 = 16 * HIDWORD(v66);
      v41 = &v68;
      do
      {
        *((_DWORD *)v39 - 2) = *((_DWORD *)v41 - 2);
        *v39 = 0;
        if (*v41)
        {
          *v39 = *v41;
          *v41 = 0;
        }
        v39 += 2;
        v41 += 2;
        v40 -= 16;
      }
      while (v40);
      v57 = (WTF *)&v59;
      LODWORD(v58) = 2;
      goto LABEL_40;
    }
    v57 = (WTF *)&v59;
    LODWORD(v58) = 2;
  }
  else
  {
    *(_QWORD *)&v66 = &v67;
    v45 = DWORD2(v66);
    v38 = HIDWORD(v66);
    DWORD2(v66) = 2;
    LODWORD(v63) = v45;
    v57 = (WTF *)&v59;
    LODWORD(v58) = 2;
    if (v37 == (WTF *)&v64)
    {
LABEL_40:
      if ((_DWORD)v38)
      {
        v42 = &v60;
        v43 = 16 * v38;
        v44 = v65;
        do
        {
          *((_DWORD *)v42 - 2) = *((_DWORD *)v44 - 2);
          *v42 = 0;
          if (*v44)
          {
            *v42 = (uint64_t *)*v44;
            *v44 = 0;
          }
          v42 += 2;
          v44 += 2;
          v43 -= 16;
        }
        while (v43);
      }
      goto LABEL_49;
    }
    v57 = v37;
    LODWORD(v58) = v45;
  }
LABEL_49:
  HIDWORD(v58) = v38;
  v61 = 1;
  v46 = *(_DWORD *)(v5 + 176);
  v47 = *(_QWORD *)(v5 + 168);
  *(_QWORD *)&v66 = __PAIR64__(LODWORD(v11), LODWORD(v9));
  *((_QWORD *)&v66 + 1) = __PAIR64__(LODWORD(v15), LODWORD(v13));
  v67 = v16;
  v68 = 0x13F800000;
  v48 = WTF::fastMalloc((WTF *)0xC8);
  *a3 = WebCore::Gradient::Gradient(v48, &v66, v47, v46, 0, (uint64_t *)&v57, 0, 0);
  v50 = v57;
  if (HIDWORD(v58))
  {
    v51 = (WTF *)((char *)v57 + 16 * HIDWORD(v58));
    do
    {
      v52 = *((_QWORD *)v50 + 1);
      if ((v52 & 0x8000000000000) != 0)
      {
        v53 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFLL);
        do
        {
          v54 = __ldaxr(v53);
          v55 = v54 - 1;
        }
        while (__stlxr(v55, v53));
        if (!v55)
        {
          atomic_store(1u, v53);
          WTF::fastFree((WTF *)v53, v49);
        }
      }
      v50 = (WTF *)((char *)v50 + 16);
    }
    while (v50 != v51);
    v50 = v57;
  }
  if (&v59 != (uint64_t **)v50 && v50 != 0)
  {
    v57 = 0;
    LODWORD(v58) = 0;
    WTF::fastFree(v50, v49);
  }
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::image(WebCore::RenderElement const*,WebCore::FloatSize const&,BOOL)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>@<X0>(uint64_t **a1@<X0>, uint64_t a2@<X1>, unsigned int **a3@<X8>)
{
  uint64_t v5;
  float32x2_t *v6;
  WebCore::RenderStyle *v7;
  __int32 v8;
  float32x2_t v9;
  uint64_t v10;
  int v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int *result;
  void *v27;
  WTF *v28;
  WTF *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v34;
  _BYTE v35[28];
  int v36;
  float32x2_t *v37;
  _BYTE v38[28];
  float32x2_t v39;
  _QWORD v40[2];
  float32x2_t *v41;
  float32x2_t *v42;
  WTF *v43;
  float32x2_t *v44;
  _QWORD v45[8];

  v5 = **a1;
  v6 = (float32x2_t *)(*a1)[1];
  v7 = (WebCore::RenderStyle *)(*a1)[2];
  v41 = v6;
  v42 = v6;
  v40[0] = &v42;
  v40[1] = &v41;
  if (*(_BYTE *)(a2 + 36))
  {
    v9.f32[0] = WebCore::computeEndPoint((WebCore::Length *)(a2 + 20), (float *)v6);
    v9.i32[1] = v8;
  }
  else
  {
    v9 = vmul_f32(*v6, (float32x2_t)0x3F0000003F000000);
  }
  v39 = v9;
  v43 = (WTF *)v40;
  v44 = &v39;
  v45[0] = v40;
  v45[1] = &v39;
  v45[2] = v40;
  v45[3] = &v39;
  v45[4] = v40;
  v45[5] = &v39;
  v45[6] = v6;
  v45[7] = &v39;
  v10 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v10 == -1)
  {
    v34 = std::__throw_bad_variant_access[abi:sn180100]();
    return (unsigned int *)std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::image(WebCore::RenderElement const*,WebCore::FloatSize const&,BOOL)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(v34);
  }
  else
  {
    *(_QWORD *)v35 = &v43;
    ((void (*)(_BYTE *__return_ptr, _BYTE *, uint64_t))off_1E3442B60[v10])(v38, v35, a2);
    v11 = *(unsigned __int8 *)(a2 + 40);
    if (*(_BYTE *)(a2 + 40))
    {
      v13 = *(float *)&v38[12];
      v12 = *(float *)&v38[8];
      v14 = v6->f32[0];
      v15 = v6->f32[1];
      v16 = hypotf(*(float *)&v38[8], *(float *)&v38[12]);
      v17 = v12 - v14;
      v18 = hypotf(v17, v13);
      v19 = v13 - v15;
      v20 = hypotf(v12, v19);
      v21 = hypotf(v17, v19);
      if (v18 <= v16)
        v22 = v16;
      else
        v22 = v18;
      if (v20 > v22)
        v22 = v20;
      if (v21 <= v22)
        v21 = v22;
    }
    else
    {
      v21 = 0.0;
    }
    v37 = (float32x2_t *)v38;
    *(_OWORD *)v35 = *(_OWORD *)v38;
    *(_OWORD *)&v35[12] = *(_OWORD *)&v38[12];
    v36 = 1;
    v23 = *(_QWORD *)(v5 + 168);
    v24 = *(_DWORD *)(v5 + 176);
    v25 = WTF::fastMalloc((WTF *)0xC8);
    result = (unsigned int *)WebCore::Gradient::Gradient(v25, v35, v23, v24, 0, (uint64_t *)&v43, 0, 0);
    *a3 = result;
    v28 = v43;
    if (HIDWORD(v44))
    {
      v29 = (WTF *)((char *)v43 + 16 * HIDWORD(v44));
      do
      {
        v30 = *((_QWORD *)v28 + 1);
        if ((v30 & 0x8000000000000) != 0)
        {
          result = (unsigned int *)(v30 & 0xFFFFFFFFFFFFLL);
          do
          {
            v31 = __ldaxr(result);
            v32 = v31 - 1;
          }
          while (__stlxr(v32, result));
          if (!v32)
          {
            atomic_store(1u, result);
            result = (unsigned int *)WTF::fastFree((WTF *)result, v27);
          }
        }
        v28 = (WTF *)((char *)v28 + 16);
      }
      while (v28 != v29);
      v28 = v43;
    }
    if (v45 != (_QWORD *)v28 && v28 != 0)
    {
      v43 = 0;
      LODWORD(v44) = 0;
      return (unsigned int *)WTF::fastFree(v28, v27);
    }
  }
  return result;
}

unsigned int *std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::image(WebCore::RenderElement const*,WebCore::FloatSize const&,BOOL)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>@<X0>(uint64_t **a1@<X0>, unint64_t a2@<X1>, unsigned int **a3@<X8>)
{
  float32x2_t *v5;
  __int32 v6;
  float32x2_t v7;
  unsigned int v8;
  double v9;
  float v10;
  double v11;
  int v12;
  unint64_t v13;
  WTF *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double *v22;
  double v23;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  unsigned __int8 *v29;
  unint64_t v30;
  int v31;
  _DWORD *v32;
  float *v33;
  _DWORD *v34;
  float v35;
  float v36;
  _DWORD *v37;
  float v38;
  int v39;
  char *v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int v43;
  _BOOL4 v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  unint64_t i;
  _DWORD *v52;
  float v53;
  uint64_t v54;
  float v55;
  unint64_t v56;
  float *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  float v61;
  WTF *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  float *v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  char *v73;
  int v74;
  unint64_t v75;
  unsigned int *v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unint64_t v80;
  unsigned int *v81;
  unsigned int v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  uint64_t v95;
  unsigned int *v96;
  float v97;
  WTF **v98;
  float v99;
  unint64_t v100;
  int v101;
  unint64_t v102;
  void *v103;
  WTF *v104;
  unsigned int v105;
  unsigned int v106;
  unsigned int *v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int *v110;
  unsigned int v111;
  unsigned int v112;
  unsigned int *v113;
  unsigned int v114;
  unsigned int v115;
  WTF *v116;
  unsigned int *v117;
  unsigned int v118;
  unsigned int v119;
  char *v120;
  uint64_t v121;
  int v122;
  unsigned int *v123;
  unsigned int v124;
  unsigned int *v125;
  unsigned int v126;
  unsigned int *v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int *v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int *v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int *v136;
  unsigned int v137;
  unsigned int v138;
  _BOOL4 v139;
  unsigned int *v140;
  unsigned int v141;
  unsigned int v142;
  unsigned int *v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int *v146;
  unsigned int v147;
  unsigned int v148;
  unsigned int *v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int *v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int *v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int *v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int *v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int *v164;
  unsigned int v165;
  unsigned int v166;
  unsigned int *v167;
  unsigned int v168;
  unsigned int v169;
  _BOOL4 v170;
  float *v171;
  float v172;
  float v173;
  char v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v182;
  _QWORD *v183;
  _QWORD *v184;
  unsigned int *v185;
  unsigned int v186;
  unsigned int v187;
  unint64_t v188;
  float *v189;
  float *v190;
  BOOL v191;
  char v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  float *v196;
  float *v197;
  unint64_t v198;
  BOOL v199;
  unint64_t v200;
  WTF *v201;
  uint64_t v202;
  float v203;
  unint64_t v204;
  unint64_t v205;
  WTF *v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  WTF *v213;
  uint64_t v214;
  _QWORD *v215;
  _QWORD *v216;
  WTF *v217;
  uint64_t v218;
  float *v219;
  unsigned int *v220;
  unsigned int v221;
  unsigned int *v222;
  unsigned int v223;
  unsigned int *v224;
  unsigned int v225;
  unsigned int *v226;
  unsigned int v227;
  unsigned int v228;
  unint64_t v229;
  WTF *v230;
  unint64_t v231;
  unint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  WTF *v238;
  uint64_t v239;
  unint64_t v240;
  _QWORD *v241;
  WTF *v242;
  uint64_t v243;
  unsigned int *v244;
  unsigned int v245;
  float *v246;
  unint64_t v247;
  uint64_t v248;
  float v249;
  unint64_t v250;
  WTF *v251;
  uint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t *v257;
  WTF *v258;
  uint64_t v259;
  _QWORD *v260;
  _QWORD *v261;
  WTF *v262;
  uint64_t v263;
  unint64_t v264;
  float *v265;
  unsigned int *v266;
  unsigned int v267;
  unsigned int *v268;
  unsigned int v269;
  unsigned int *v270;
  unsigned int v271;
  unsigned int *v272;
  unsigned int v273;
  unsigned int v274;
  WTF *v275;
  unsigned int *v276;
  unsigned int v277;
  unsigned int v278;
  unint64_t v279;
  unint64_t v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  int v284;
  float v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  float v289;
  WTF *v290;
  float v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  WTF *v295;
  char *v296;
  double v297;
  double v299;
  unsigned int *v300;
  unsigned int v301;
  unsigned int *v302;
  unsigned int v303;
  unsigned int v304;
  _BOOL4 v305;
  unint64_t v306;
  unint64_t v307;
  float v308;
  uint64_t v309;
  _BYTE *v310;
  unint64_t v311;
  unint64_t v312;
  float v313;
  uint64_t v314;
  float v315;
  uint64_t v316;
  unint64_t v317;
  WTF *v318;
  char *v319;
  double v320;
  double v322;
  unsigned int *v323;
  unsigned int v324;
  unsigned int *v325;
  unsigned int v326;
  unsigned int v327;
  _BOOL4 v328;
  unint64_t v329;
  char *v330;
  int v331;
  uint64_t v332;
  int v333;
  uint64_t v334;
  unsigned int *v335;
  unsigned int v336;
  WTF *v337;
  uint64_t **v338;
  uint64_t v339;
  _QWORD *v340;
  int v341;
  int v342;
  WTF *v343;
  WTF *v344;
  unsigned int *v345;
  unsigned int v346;
  unsigned int v347;
  uint64_t v348;
  int v349;
  uint64_t v350;
  unsigned int *result;
  void *v352;
  WTF *v353;
  WTF *v354;
  uint64_t v355;
  unsigned int v356;
  unsigned int v357;
  uint64_t v359;
  unsigned int *v360;
  unsigned int v361;
  unsigned int *v362;
  unsigned int v363;
  unsigned int *v364;
  unsigned int v365;
  unsigned int *v366;
  unsigned int v367;
  unsigned int *v368;
  unsigned int v369;
  unsigned int *v370;
  unsigned int v371;
  unsigned int v372;
  unsigned int *v373;
  unsigned int v374;
  unsigned int v375;
  unsigned int *v376;
  unsigned int v377;
  unsigned int v378;
  unsigned int *v379;
  unsigned int v380;
  unsigned int v381;
  _BOOL4 v382;
  unsigned int *v383;
  unsigned int v384;
  unsigned int v385;
  unsigned int *v386;
  unsigned int v387;
  unsigned int v388;
  unsigned int *v389;
  unsigned int v390;
  unsigned int v391;
  float32x2_t v392;
  unsigned int **v393;
  int v394;
  uint64_t v395;
  unint64_t v396;
  int v397;
  unsigned int *v398;
  WebCore::RenderStyle *v399;
  WebCore::RenderStyle *v400;
  int v401;
  __int128 v402;
  double *v403;
  _QWORD v404[4];
  unint64_t v405;
  unint64_t v406;
  WTF *v407;
  WTF *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  WTF *v412;
  double v413;
  __int128 v414;
  double v415;
  double v416;
  WTF *v417[2];
  double *v418;
  uint64_t *v419;
  double *v420;
  float v421;
  char v422;
  uint64_t v423;
  float v424;
  char v425;
  uint64_t v426;
  float v427;
  char v428;
  uint64_t v429;
  float v430;
  char v431;
  uint64_t v432;
  float v433;
  char v434;
  uint64_t v435;
  float v436;
  char v437;
  uint64_t v438;
  float v439;
  char v440;
  uint64_t v441;

  v441 = *MEMORY[0x1E0C80C00];
  v5 = (float32x2_t *)(*a1)[1];
  v395 = **a1;
  v399 = (WebCore::RenderStyle *)(*a1)[2];
  if (*(_BYTE *)(a2 + 40))
  {
    v7.f32[0] = WebCore::computeEndPoint((WebCore::Length *)(a2 + 24), (float *)v5);
    v7.i32[1] = v6;
  }
  else
  {
    v7 = vmul_f32(*v5, (float32x2_t)0x3F0000003F000000);
  }
  v392 = v7;
  if (*(_BYTE *)(a2 + 16))
  {
    v8 = *(unsigned __int8 *)a2;
    v9 = *(double *)(a2 + 8);
    if (v8 <= 0xD)
    {
      if (v8 == 12)
      {
        v9 = v9 * 0.0174532925;
        goto LABEL_17;
      }
      if (v8 == 13)
      {
LABEL_17:
        v10 = v9;
        goto LABEL_18;
      }
LABEL_13:
      v9 = 0.0;
      goto LABEL_17;
    }
    if (v8 == 14)
    {
      v11 = 0.9;
    }
    else
    {
      if (v8 != 64)
        goto LABEL_13;
      v11 = 360.0;
    }
    v9 = v9 * v11 * 0.0174532925;
    goto LABEL_17;
  }
  v10 = 0.0;
LABEL_18:
  v12 = *(unsigned __int8 *)(a2 + 44);
  v397 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)v399 + 3) + 320) + 20);
  v13 = *(unsigned int *)(a2 + 60);
  v407 = 0;
  LODWORD(v408) = 0;
  HIDWORD(v408) = v13;
  v393 = a3;
  v394 = v12;
  if (!(_DWORD)v13)
  {
    v18 = 0;
    v28 = 0;
    v59 = -1;
    goto LABEL_97;
  }
  if (v13 >> 28)
  {
    __break(0xC471u);
    JUMPOUT(0x1964F83FCLL);
  }
  v14 = (WTF *)WTF::fastMalloc((WTF *)(16 * v13));
  LODWORD(v408) = v13;
  v407 = v14;
  bzero(v14, 16 * v13);
  v15 = 0;
  v396 = v13 - 1;
  v16 = -1;
  v17 = -4;
  v18 = v13;
  do
  {
    if (v15 >= *(unsigned int *)(a2 + 60))
    {
      __break(0xC471u);
      JUMPOUT(0x1964F8354);
    }
    v19 = *(_QWORD *)(a2 + 48);
    v20 = v19 + 48 * v15;
    if (*(_BYTE *)(v20 + 16))
    {
      if (v397)
      {
        WebCore::RenderStyle::colorWithColorFilter(v399, (const WebCore::StyleColor *)v20, (WebCore::Color *)&v416);
      }
      else
      {
        *(_QWORD *)&v414 = *((_QWORD *)v399 + 4) + 328;
        v417[0] = (WTF *)&v414;
        v417[1] = (WTF *)&v414;
        v418 = (double *)&v414;
        v419 = (uint64_t *)&v414;
        v21 = *(unsigned int *)(v20 + 8);
        if ((_DWORD)v21 == -1)
          goto LABEL_588;
        *(_QWORD *)&v402 = v417;
        ((void (*)(double *__return_ptr, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v21])(&v416, &v402);
      }
    }
    else
    {
      v416 = 0.0;
    }
    if (v15 >= v18)
    {
      __break(0xC471u);
      JUMPOUT(0x1964F835CLL);
    }
    v22 = (double *)((char *)v14 + 16 * v15);
    v23 = *v22;
    if ((*(_QWORD *)v22 & 0x8000000000000) == 0)
    {
      if (*(_QWORD *)&v23 == *(_QWORD *)&v416 && (*(_QWORD *)&v416 & 0x8000000000000) == 0)
        goto LABEL_34;
LABEL_32:
      if ((*(_QWORD *)&v23 & 0x8000000000000) != 0)
      {
        v41 = (unsigned int *)(*(_QWORD *)&v23 & 0xFFFFFFFFFFFFLL);
        do
        {
          v42 = __ldaxr(v41);
          v43 = v42 - 1;
        }
        while (__stlxr(v43, v41));
        if (!v43)
        {
          atomic_store(1u, v41);
          WTF::fastFree((WTF *)v41, (void *)v20);
        }
      }
      *v22 = v416;
      goto LABEL_34;
    }
    if ((*(_QWORD *)&v416 & 0x8000000000000) == 0)
      goto LABEL_32;
    *(_OWORD *)v417 = *(_OWORD *)((*(_QWORD *)&v23 & 0xFFFFFFFFFFFFLL) + 4);
    v402 = *(_OWORD *)((*(_QWORD *)&v416 & 0xFFFFFFFFFFFFLL) + 4);
    v44 = WebCore::operator==<float,4ul>((float *)v417, (float *)&v402);
    v23 = *v22;
    if (!v44 || HIBYTE(*(_QWORD *)&v23) != HIBYTE(*(_QWORD *)&v416) || BYTE6(v23) != BYTE6(v416))
      goto LABEL_32;
    if ((*(_QWORD *)&v416 & 0x8000000000000) != 0)
    {
      v45 = (unsigned int *)(*(_QWORD *)&v416 & 0xFFFFFFFFFFFFLL);
      do
      {
        v46 = __ldaxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (!v47)
      {
        atomic_store(1u, v45);
        WTF::fastFree((WTF *)v45, (void *)v20);
      }
    }
LABEL_34:
    v25 = *(unsigned int *)(v19 + 48 * v15 + 40);
    if ((_DWORD)v25 == -1)
      goto LABEL_588;
    v417[0] = (WTF *)&v402;
    v26 = ((uint64_t (*)(WTF **, unint64_t))off_1E3442B88[v25])(v417, v19 + 48 * v15 + 24);
    if ((v26 & 0xFF00000000) != 0)
    {
      v18 = HIDWORD(v408);
      if (v15 >= HIDWORD(v408))
      {
        __break(0xC471u);
        JUMPOUT(0x1964F836CLL);
      }
      v14 = v407;
      v27 = (char *)v407 + 16 * v15;
      *((_DWORD *)v27 + 2) = v26;
      v27[12] = 1;
    }
    else if (v15)
    {
      if (v15 == v396)
      {
        v18 = HIDWORD(v408);
        if (HIDWORD(v408) <= v396)
        {
          __break(0xC471u);
          JUMPOUT(0x1964F83B4);
        }
        v14 = v407;
        v40 = (char *)v407 + 16 * v396;
        if (!v40[12])
          v40[12] = 1;
        *((_DWORD *)v40 + 2) = 1065353216;
      }
      else
      {
        v14 = v407;
        v18 = HIDWORD(v408);
      }
    }
    else
    {
      v18 = HIDWORD(v408);
      if (!HIDWORD(v408))
      {
        __break(0xC471u);
        JUMPOUT(0x1964F83BCLL);
      }
      v14 = v407;
      if (!*((_BYTE *)v407 + 12))
        *((_BYTE *)v407 + 12) = 1;
      *((_DWORD *)v14 + 2) = 0;
    }
    if (v15 >= v18)
    {
      __break(0xC471u);
      JUMPOUT(0x1964F8364);
    }
    v28 = v18;
    if (v15 && *((_BYTE *)v14 + 16 * v15 + 12))
    {
      if (v16 >= v18)
      {
        if (v15 != 1)
        {
          __break(0xC471u);
          JUMPOUT(0x1964F83CCLL);
        }
        v30 = 0;
      }
      else
      {
        v29 = (unsigned __int8 *)v14 + v17;
        v30 = v15;
        do
        {
          if (!--v30)
            break;
          v31 = *v29;
          v29 -= 16;
        }
        while (!v31);
      }
      if (v30 >= v18)
      {
        __break(0xC471u);
        goto LABEL_611;
      }
      v32 = (_DWORD *)((char *)v14 + 16 * v30);
      if (!*((_BYTE *)v32 + 12))
        goto LABEL_611;
      v33 = (float *)((char *)v14 + 16 * v15);
      v35 = v33[2];
      v34 = v33 + 2;
      v36 = v35;
      v38 = *((float *)v32 + 2);
      v37 = v32 + 2;
      if (v36 < v38)
      {
        v39 = *v37;
        *((_BYTE *)v34 + 4) = *((_BYTE *)v37 + 4);
        *v34 = v39;
      }
    }
    ++v15;
    ++v16;
    v17 += 16;
  }
  while (v15 != v13);
  if (v13 >= 3)
  {
    v48 = 0;
    v49 = 0;
    v50 = 0;
    for (i = 0; i != v13; ++i)
    {
      if (i >= v18)
        goto LABEL_612;
      if ((*((_BYTE *)v14 + 16 * i + 12) != 0) | v50 & 1)
      {
        if (((*((_BYTE *)v14 + 16 * i + 12) != 0) & v50) == 1)
        {
          if (v49 < i)
          {
            if (v49 - 1 >= v18)
            {
              __break(0xC471u);
              JUMPOUT(0x1964F83D4);
            }
            v52 = (_DWORD *)((char *)v14 + 16 * v49 - 16);
            if (!*((_BYTE *)v52 + 12))
              goto LABEL_611;
            v53 = *((float *)v52 + 2);
            v54 = v48 + 1;
            v55 = (float)(*((float *)v14 + 4 * i + 2) - v53) / (float)(i + v48 + 1);
            if (v49 <= v18)
              v56 = v18;
            else
              v56 = v49;
            v57 = (float *)((char *)v14 + 16 * v49 + 12);
            v58 = i;
            do
            {
              if (v49 == v56)
              {
                __break(0xC471u);
                JUMPOUT(0x1964F834CLL);
              }
              --v58;
              *(v57 - 1) = v53 + (float)((float)(v49 + v54) * v55);
              *(_BYTE *)v57 = 1;
              v57 += 4;
              ++v54;
              --v56;
            }
            while (v49 != v58);
          }
          v50 = 0;
        }
      }
      else
      {
        v50 = 1;
        v49 = i;
      }
      v48 = -(uint64_t)v49;
    }
  }
  v59 = v18 - 1;
  LODWORD(v60) = v18;
  if (v59 >= 2)
  {
LABEL_97:
    v61 = 0.5;
    LODWORD(v60) = v18;
    a2 = 1;
    while (1)
    {
      v62 = v407;
      v63 = v28 <= a2 ? a2 : v28;
      v64 = 16 * a2;
      while (1)
      {
        if (v63 == a2)
        {
          __break(0xC471u);
          JUMPOUT(0x1964F8374);
        }
        v65 = (unint64_t *)((char *)v407 + v64);
        if ((*((_BYTE *)v407 + v64 + 6) & 4) == 0)
          break;
        ++a2;
        v64 += 16;
        if (a2 >= v59)
          goto LABEL_269;
      }
      if (a2 - 1 >= v28)
      {
        __break(0xC471u);
        JUMPOUT(0x1964F83E4);
      }
      v66 = *(_QWORD *)((char *)v407 + v64 - 16);
      if ((v66 & 0x8000000000000) != 0)
      {
        v123 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFLL);
        do
          v124 = __ldaxr(v123);
        while (__stlxr(v124 + 1, v123));
      }
      if (a2 + 1 >= v60)
      {
        __break(0xC471u);
        JUMPOUT(0x1964F83ECLL);
      }
      v13 = *(_QWORD *)((char *)v62 + v64 + 16);
      if ((v13 & 0x8000000000000) != 0)
      {
        v125 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
        do
          v126 = __ldaxr(v125);
        while (__stlxr(v126 + 1, v125));
      }
      if (a2 - 1 >= v60)
      {
        __break(0xC471u);
        JUMPOUT(0x1964F83F4);
      }
      v67 = (float *)((char *)v62 + v64);
      if (!*((_BYTE *)v62 + v64 - 4) || !*((_BYTE *)v67 + 28) || !*((_BYTE *)v62 + v64 + 12))
        goto LABEL_611;
      v68 = *(v67 - 2);
      v69 = v67[6];
      v70 = *(float *)((char *)v62 + v64 + 8);
      v71 = v70 - v68;
      v72 = v69 - v70;
      if ((float)(v70 - v68) == (float)(v69 - v70))
      {
        if ((*v65 & 0x8000000000000) != 0)
        {
          v133 = (unsigned int *)(*v65 & 0xFFFFFFFFFFFFLL);
          do
          {
            v134 = __ldaxr(v133);
            v135 = v134 - 1;
          }
          while (__stlxr(v135, v133));
          v61 = 0.5;
          if (!v135)
          {
            atomic_store(1u, v133);
            WTF::fastFree((WTF *)v133, v5);
          }
        }
        v73 = (char *)v62 + v64 + 16;
        v74 = HIDWORD(v408);
        HIDWORD(v408) = v74 - 1;
        goto LABEL_117;
      }
      if (v68 != v70)
        break;
      v75 = *v65;
      if ((*v65 & 0x8000000000000) != 0)
      {
        if ((v13 & 0x8000000000000) != 0)
        {
          *(_OWORD *)v417 = *(_OWORD *)((v75 & 0xFFFFFFFFFFFFLL) + 4);
          v76 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
          v402 = *(_OWORD *)((v13 & 0xFFFFFFFFFFFFLL) + 4);
          v139 = WebCore::operator==<float,4ul>((float *)v417, (float *)&v402);
          v75 = *v65;
          if (v139 && HIBYTE(v75) == HIBYTE(v13))
          {
            v61 = 0.5;
            if (BYTE6(v75) != BYTE6(v13))
              goto LABEL_125;
            do
            {
LABEL_129:
              v78 = __ldaxr(v76);
              v79 = v78 - 1;
            }
            while (__stlxr(v79, v76));
            if (!v79)
            {
              atomic_store(1u, v76);
              WTF::fastFree((WTF *)v76, v5);
            }
            v61 = 0.5;
            goto LABEL_118;
          }
          v61 = 0.5;
        }
LABEL_125:
        if ((v75 & 0x8000000000000) != 0)
        {
          v130 = (unsigned int *)(v75 & 0xFFFFFFFFFFFFLL);
          do
          {
            v131 = __ldaxr(v130);
            v132 = v131 - 1;
          }
          while (__stlxr(v132, v130));
          v61 = 0.5;
          if (!v132)
          {
            atomic_store(1u, v130);
            WTF::fastFree((WTF *)v130, v5);
          }
        }
        *v65 = v13;
        if ((v13 & 0x8000000000000) == 0)
          goto LABEL_118;
        v76 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
        do
          v77 = __ldaxr(v76);
        while (__stlxr(v77 + 1, v76));
        goto LABEL_129;
      }
      if ((v13 & 0x8000000000000) != 0 || v75 != v13)
        goto LABEL_125;
LABEL_118:
      if ((v66 & 0x8000000000000) != 0)
      {
        v127 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFLL);
        do
        {
          v128 = __ldaxr(v127);
          v129 = v128 - 1;
        }
        while (__stlxr(v129, v127));
        v61 = 0.5;
        if (!v129)
        {
          atomic_store(1u, v127);
          WTF::fastFree((WTF *)v127, v5);
        }
      }
      LODWORD(v60) = HIDWORD(v408);
      v59 = HIDWORD(v408) - 1;
      v28 = HIDWORD(v408);
      if (a2 >= v59)
        goto LABEL_269;
    }
    if (v69 == v70)
    {
      v80 = *v65;
      if ((*v65 & 0x8000000000000) != 0)
      {
        if ((v66 & 0x8000000000000) != 0)
        {
          *(_OWORD *)v417 = *(_OWORD *)((v80 & 0xFFFFFFFFFFFFLL) + 4);
          v402 = *(_OWORD *)((v66 & 0xFFFFFFFFFFFFLL) + 4);
          v170 = WebCore::operator==<float,4ul>((float *)v417, (float *)&v402);
          v80 = *v65;
          if (v170 && HIBYTE(v80) == HIBYTE(v66))
          {
            v61 = 0.5;
            if (BYTE6(v80) == BYTE6(v66))
              goto LABEL_117;
          }
          else
          {
            v61 = 0.5;
          }
        }
      }
      else if ((v66 & 0x8000000000000) == 0 && v80 == v66)
      {
        goto LABEL_117;
      }
      if ((v80 & 0x8000000000000) != 0)
      {
        v136 = (unsigned int *)(v80 & 0xFFFFFFFFFFFFLL);
        do
        {
          v137 = __ldaxr(v136);
          v138 = v137 - 1;
        }
        while (__stlxr(v138, v136));
        v61 = 0.5;
        if (!v138)
        {
          atomic_store(1u, v136);
          WTF::fastFree((WTF *)v136, v5);
        }
      }
      *v65 = v66;
      if ((v66 & 0x8000000000000) != 0)
      {
        v81 = (unsigned int *)(v66 & 0xFFFFFFFFFFFFLL);
        do
          v82 = __ldaxr(v81);
        while (__stlxr(v82 + 1, v81));
        v61 = 0.5;
      }
LABEL_117:
      if ((v13 & 0x8000000000000) == 0)
        goto LABEL_118;
      v76 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
      goto LABEL_129;
    }
    v83 = v69 - v68;
    v417[0] = 0;
    v418 = 0;
    v420 = 0;
    v423 = 0;
    v426 = 0;
    v429 = 0;
    v432 = 0;
    v435 = 0;
    v438 = 0;
    v84 = v71 / (float)(v69 - v68);
    if (v84 <= v61)
    {
      v85 = v71 / 3.0;
      v86 = (float)(v71 + v71) / 3.0;
      v92 = 13.0;
      v87 = v70 + (float)((float)(v72 * 0.0) / 13.0);
      v88 = v70 + (float)(v72 / 13.0);
      v89 = v70 + (float)((float)(v72 + v72) / 13.0);
      v90 = v70 + (float)((float)(v72 * 3.0) / 13.0);
      v91 = v70 + (float)((float)(v72 * 4.0) / 13.0);
      v93 = 6.0;
      v94 = (float)(v72 * 5.0) / 13.0;
    }
    else
    {
      v85 = (float)(v71 * 7.0) / 13.0;
      v86 = (float)(v71 * 8.0) / 13.0;
      v87 = v68 + (float)((float)(v71 * 9.0) / 13.0);
      v88 = v68 + (float)((float)(v71 * 10.0) / 13.0);
      v89 = v68 + (float)((float)(v71 * 11.0) / 13.0);
      v90 = v68 + (float)((float)(v71 * 12.0) / 13.0);
      v91 = v68 + (float)((float)(v71 * 13.0) / 13.0);
      v92 = 3.0;
      v93 = 2.0;
      v94 = v72 / 3.0;
    }
    *(float *)&v417[1] = v68 + v85;
    BYTE4(v417[1]) = 1;
    *(float *)&v419 = v68 + v86;
    BYTE4(v419) = 1;
    v421 = v87;
    v422 = 1;
    v424 = v88;
    v425 = 1;
    v427 = v89;
    v428 = 1;
    v430 = v90;
    v431 = 1;
    v433 = v91;
    v434 = 1;
    v436 = v70 + v94;
    v437 = 1;
    v439 = v70 + (float)((float)(v72 * v93) / v92);
    v440 = 1;
    v95 = 0;
    v96 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
    v97 = -0.69315 / logf(v84);
    while (2)
    {
      v98 = &v417[2 * v95];
      if (!*((_BYTE *)v98 + 12))
        goto LABEL_611;
      v99 = powf((float)(*((float *)v98 + 2) - v68) / v83, v97);
      v100 = *(_QWORD *)(v395 + 168);
      v101 = *(_DWORD *)(v395 + 176);
      v406 = v66;
      if ((v66 & 0x8000000000000) != 0)
      {
        do
          v105 = __ldaxr((unsigned int *)(v66 & 0xFFFFFFFFFFFFLL));
        while (__stlxr(v105 + 1, (unsigned int *)(v66 & 0xFFFFFFFFFFFFLL)));
      }
      v405 = v13;
      if ((v13 & 0x8000000000000) != 0)
      {
        do
          v106 = __ldaxr(v96);
        while (__stlxr(v106 + 1, v96));
      }
      *(_QWORD *)&v414 = v100;
      DWORD2(v414) = v101;
      v415 = (float)(1.0 - v99);
      v413 = v99;
      *(_QWORD *)&v402 = &v414;
      *((_QWORD *)&v402 + 1) = &v406;
      v403 = &v415;
      v404[0] = &v405;
      v404[1] = &v413;
      v102 = HIDWORD(v100);
      if (v102 == 0xFFFFFFFF)
        goto LABEL_588;
      v416 = COERCE_DOUBLE(&v402);
      ((void (*)(WTF **__return_ptr, double *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore17interpolateColorsENS8_24ColorInterpolationMethodENS8_5ColorEdSA_dE3__0JEEEEEJRNS0_6__implIJNS9_3HSLENS9_3HWBENS9_3LCHENS9_3LabENS9_5OKLCHENS9_5OKLabENS9_4SRGBENS9_10SRGBLinearENS9_9DisplayP3ENS9_6A98RGBENS9_11ProPhotoRGBENS9_7Rec2020ENS9_6XYZD50ENS9_6XYZD65EEEEEEEDcOT_DpOT0____fmatrix[v102])(&v412, &v416, &v414);
      v104 = *v98;
      if (((unint64_t)*v98 & 0x8000000000000) != 0)
      {
        if (((unint64_t)v412 & 0x8000000000000) != 0)
        {
          v398 = (unsigned int *)((unint64_t)v104 & 0xFFFFFFFFFFFFLL);
          v402 = *(_OWORD *)(((unint64_t)v104 & 0xFFFFFFFFFFFFLL) + 4);
          v414 = *(_OWORD *)(((unint64_t)v412 & 0xFFFFFFFFFFFFLL) + 4);
          if (WebCore::operator==<float,4ul>((float *)&v402, (float *)&v414)
            && (unint64_t)v104 >> 56 == (unint64_t)v412 >> 56
            && BYTE6(v104) == BYTE6(v412))
          {
            if (((unint64_t)v412 & 0x8000000000000) != 0)
            {
              v117 = (unsigned int *)((unint64_t)v412 & 0xFFFFFFFFFFFFLL);
              do
              {
                v118 = __ldaxr(v117);
                v119 = v118 - 1;
              }
              while (__stlxr(v119, v117));
              if (!v119)
              {
                atomic_store(1u, v117);
                WTF::fastFree((WTF *)v117, v103);
              }
            }
            goto LABEL_154;
          }
        }
        else
        {
          v398 = (unsigned int *)((unint64_t)v104 & 0xFFFFFFFFFFFFLL);
        }
        do
        {
          v113 = v398;
          v114 = __ldaxr(v398);
          v115 = v114 - 1;
        }
        while (__stlxr(v115, v113));
        if (!v115)
        {
          v116 = (WTF *)v398;
          atomic_store(1u, v398);
          WTF::fastFree(v116, v103);
        }
LABEL_153:
        *v98 = v412;
        v412 = 0;
      }
      else if (v104 != v412 || ((unint64_t)v412 & 0x8000000000000) != 0)
      {
        goto LABEL_153;
      }
LABEL_154:
      if ((v405 & 0x8000000000000) != 0)
      {
        v107 = (unsigned int *)(v405 & 0xFFFFFFFFFFFFLL);
        do
        {
          v108 = __ldaxr(v107);
          v109 = v108 - 1;
        }
        while (__stlxr(v109, v107));
        if (!v109)
        {
          atomic_store(1u, v107);
          WTF::fastFree((WTF *)v107, v103);
        }
      }
      if ((v406 & 0x8000000000000) != 0)
      {
        v110 = (unsigned int *)(v406 & 0xFFFFFFFFFFFFLL);
        do
        {
          v111 = __ldaxr(v110);
          v112 = v111 - 1;
        }
        while (__stlxr(v112, v110));
        if (!v112)
        {
          atomic_store(1u, v110);
          WTF::fastFree((WTF *)v110, v103);
        }
      }
      if (++v95 == 9)
      {
        v120 = (char *)v407 + v64;
        v121 = *(_QWORD *)((char *)v407 + v64);
        if ((v121 & 0x8000000000000) != 0)
        {
          v140 = (unsigned int *)(v121 & 0xFFFFFFFFFFFFLL);
          do
          {
            v141 = __ldaxr(v140);
            v142 = v141 - 1;
          }
          while (__stlxr(v142, v140));
          if (!v142)
          {
            atomic_store(1u, v140);
            WTF::fastFree((WTF *)v140, v103);
          }
        }
        v122 = HIDWORD(v408);
        HIDWORD(v408) = v122 - 1;
        v61 = 0.5;
        if ((v438 & 0x8000000000000) != 0)
        {
          v143 = (unsigned int *)(v438 & 0xFFFFFFFFFFFFLL);
          do
          {
            v144 = __ldaxr(v143);
            v145 = v144 - 1;
          }
          while (__stlxr(v145, v143));
          v61 = 0.5;
          if (!v145)
          {
            atomic_store(1u, v143);
            WTF::fastFree((WTF *)v143, v5);
          }
        }
        if ((v435 & 0x8000000000000) != 0)
        {
          v146 = (unsigned int *)(v435 & 0xFFFFFFFFFFFFLL);
          do
          {
            v147 = __ldaxr(v146);
            v148 = v147 - 1;
          }
          while (__stlxr(v148, v146));
          v61 = 0.5;
          if (!v148)
          {
            atomic_store(1u, v146);
            WTF::fastFree((WTF *)v146, v5);
          }
        }
        if ((v432 & 0x8000000000000) != 0)
        {
          v149 = (unsigned int *)(v432 & 0xFFFFFFFFFFFFLL);
          do
          {
            v150 = __ldaxr(v149);
            v151 = v150 - 1;
          }
          while (__stlxr(v151, v149));
          v61 = 0.5;
          if (!v151)
          {
            atomic_store(1u, v149);
            WTF::fastFree((WTF *)v149, v5);
          }
        }
        if ((v429 & 0x8000000000000) != 0)
        {
          v152 = (unsigned int *)(v429 & 0xFFFFFFFFFFFFLL);
          do
          {
            v153 = __ldaxr(v152);
            v154 = v153 - 1;
          }
          while (__stlxr(v154, v152));
          v61 = 0.5;
          if (!v154)
          {
            atomic_store(1u, v152);
            WTF::fastFree((WTF *)v152, v5);
          }
        }
        if ((v426 & 0x8000000000000) != 0)
        {
          v155 = (unsigned int *)(v426 & 0xFFFFFFFFFFFFLL);
          do
          {
            v156 = __ldaxr(v155);
            v157 = v156 - 1;
          }
          while (__stlxr(v157, v155));
          v61 = 0.5;
          if (!v157)
          {
            atomic_store(1u, v155);
            WTF::fastFree((WTF *)v155, v5);
          }
        }
        if ((v423 & 0x8000000000000) != 0)
        {
          v158 = (unsigned int *)(v423 & 0xFFFFFFFFFFFFLL);
          do
          {
            v159 = __ldaxr(v158);
            v160 = v159 - 1;
          }
          while (__stlxr(v160, v158));
          v61 = 0.5;
          if (!v160)
          {
            atomic_store(1u, v158);
            WTF::fastFree((WTF *)v158, v5);
          }
        }
        if (((unint64_t)v420 & 0x8000000000000) != 0)
        {
          v161 = (unsigned int *)((unint64_t)v420 & 0xFFFFFFFFFFFFLL);
          do
          {
            v162 = __ldaxr(v161);
            v163 = v162 - 1;
          }
          while (__stlxr(v163, v161));
          v61 = 0.5;
          if (!v163)
          {
            atomic_store(1u, v161);
            WTF::fastFree((WTF *)v161, v5);
          }
        }
        if (((unint64_t)v418 & 0x8000000000000) != 0)
        {
          v164 = (unsigned int *)((unint64_t)v418 & 0xFFFFFFFFFFFFLL);
          do
          {
            v165 = __ldaxr(v164);
            v166 = v165 - 1;
          }
          while (__stlxr(v166, v164));
          v61 = 0.5;
          if (!v166)
          {
            atomic_store(1u, v164);
            WTF::fastFree((WTF *)v164, v5);
          }
        }
        if (((unint64_t)v417[0] & 0x8000000000000) != 0)
        {
          v167 = (unsigned int *)((unint64_t)v417[0] & 0xFFFFFFFFFFFFLL);
          do
          {
            v168 = __ldaxr(v167);
            v169 = v168 - 1;
          }
          while (__stlxr(v169, v167));
          v61 = 0.5;
          if (!v169)
          {
            atomic_store(1u, v167);
            WTF::fastFree((WTF *)v167, v5);
          }
        }
        a2 += 9;
        goto LABEL_117;
      }
      continue;
    }
  }
LABEL_269:
  if (!v394 || v60 <= 1)
    goto LABEL_436;
  a2 = (unint64_t)v407;
  v171 = (float *)((char *)v407 + 16 * v59);
  if (!*((_BYTE *)v171 + 12) || !*((_BYTE *)v407 + 12))
    goto LABEL_611;
  v172 = v171[2];
  v173 = *((float *)v407 + 2);
  if ((float)(v172 - v173) == 0.0)
  {
    *((_DWORD *)v407 + 2) = 0;
    v13 = v60;
    v176 = a2 + 16 * v60;
    v179 = *(_QWORD *)(v176 - 16);
    v178 = (uint64_t *)(v176 - 16);
    v177 = v179;
    v180 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 & 0x8000000000000) != 0)
    {
      if ((v177 & 0x8000000000000) != 0)
      {
        *(_OWORD *)v417 = *(_OWORD *)((v180 & 0xFFFFFFFFFFFFLL) + 4);
        v402 = *(_OWORD *)((v177 & 0xFFFFFFFFFFFFLL) + 4);
        v382 = WebCore::operator==<float,4ul>((float *)v417, (float *)&v402);
        v180 = *(_QWORD *)a2;
        if (v382 && HIBYTE(v180) == HIBYTE(*v178) && BYTE6(v180) == BYTE6(*v178))
          goto LABEL_285;
      }
    }
    else if (v180 == v177 && (v177 & 0x8000000000000) == 0)
    {
      goto LABEL_285;
    }
    if ((v180 & 0x8000000000000) != 0)
    {
      v370 = (unsigned int *)(v180 & 0xFFFFFFFFFFFFLL);
      do
      {
        v371 = __ldaxr(v370);
        v372 = v371 - 1;
      }
      while (__stlxr(v372, v370));
      if (!v372)
      {
        atomic_store(1u, v370);
        WTF::fastFree((WTF *)v370, v5);
      }
    }
    v182 = *v178;
    *(_QWORD *)a2 = *v178;
    if ((v182 & 0x8000000000000) != 0)
      goto LABEL_589;
LABEL_285:
    v183 = (_QWORD *)(a2 + 16 * v13);
    v184 = (_QWORD *)(a2 + 16);
    do
    {
      if ((*v184 & 0x8000000000000) != 0)
      {
        v185 = (unsigned int *)(*v184 & 0xFFFFFFFFFFFFLL);
        do
        {
          v186 = __ldaxr(v185);
          v187 = v186 - 1;
        }
        while (__stlxr(v187, v185));
        if (!v187)
        {
          atomic_store(1u, v185);
          WTF::fastFree((WTF *)v185, v5);
        }
      }
      v184 += 2;
    }
    while (v184 != v183);
    LODWORD(v60) = 1;
    HIDWORD(v408) = 1;
    goto LABEL_451;
  }
  if (fabsf(v172 - v173) >= 0.000015259)
  {
    v174 = 0;
    if (v173 <= 0.0)
    {
      v175 = 0;
    }
    else if (v173 >= 0.0)
    {
      v175 = 1;
      v188 = v59;
      do
      {
        if (v188)
        {
          if (v188 >= v28)
          {
            __break(0xC471u);
            JUMPOUT(0x1964F8494);
          }
          v189 = (float *)((char *)v407 + 16 * v188);
          if (!*((_BYTE *)v189 + 12))
            goto LABEL_611;
          if (v188 - 1 >= v28)
          {
            __break(0xC471u);
            JUMPOUT(0x1964F849CLL);
          }
          v190 = (float *)((char *)v407 + 16 * v188 - 16);
          if (!*((_BYTE *)v190 + 12))
            goto LABEL_611;
          v173 = v173 - (float)(v189[2] - v190[2]);
        }
        v188 = (v28 - 1 + v188) % v28;
        v191 = __CFADD__(v175++, 1);
        if (v191)
          v174 = 1;
      }
      while (v173 >= 0.0);
    }
    else
    {
      v175 = 1;
    }
    v192 = 0;
    if (v172 >= 1.0)
    {
      v193 = 0;
    }
    else if (v172 <= 1.0)
    {
      v194 = 0;
      v193 = 1;
      do
      {
        v195 = v194 + 1;
        if (v194 < v59)
        {
          if (v195 >= v28)
          {
            __break(0xC471u);
            JUMPOUT(0x1964F850CLL);
          }
          v196 = (float *)((char *)v407 + 16 * v195);
          if (!*((_BYTE *)v196 + 12))
            goto LABEL_611;
          v197 = (float *)((char *)v407 + 16 * v194);
          if (!*((_BYTE *)v197 + 12))
            goto LABEL_611;
          v172 = v172 + (float)(v196[2] - v197[2]);
        }
        if (v195 == v28)
          v194 = 0;
        else
          v194 = v195;
        v191 = __CFADD__(v193++, 1);
        if (v191)
          v192 = 1;
      }
      while (v172 <= 1.0);
    }
    else
    {
      v193 = 1;
    }
    v198 = v28 + v175;
    v199 = __CFADD__(v28, v175);
    if (!v192 && !v174 && !v199)
    {
      v200 = v198 + v193;
      if (!__CFADD__(v198, v193) && v200 <= 0x10000)
      {
        v400 = (WebCore::RenderStyle *)v28;
        v417[0] = 0;
        v417[1] = 0;
        if (v200)
        {
          v201 = (WTF *)WTF::fastMalloc((WTF *)(16 * v200));
          LODWORD(v417[1]) = v200;
          v417[0] = v201;
        }
        if (v175)
        {
          v5 = (float32x2_t *)v400;
          if (!*(_BYTE *)(a2 + 12))
            goto LABEL_611;
          v202 = 0;
          v203 = *(float *)(a2 + 8);
          v204 = v59;
          do
          {
            v205 = HIDWORD(v408);
            if (v204 >= HIDWORD(v408))
            {
              __break(0xC471u);
              JUMPOUT(0x1964F83DCLL);
            }
            v206 = v407;
            v207 = *((_QWORD *)v407 + 2 * v204);
            *(_QWORD *)&v402 = v207;
            if ((v207 & 0x8000000000000) != 0)
            {
              v220 = (unsigned int *)(v207 & 0xFFFFFFFFFFFFLL);
              do
                v221 = __ldaxr(v220);
              while (__stlxr(v221 + 1, v220));
            }
            v208 = (char *)v206 + 16 * v204;
            v210 = *((_QWORD *)v208 + 1);
            v209 = v208 + 8;
            *((_QWORD *)&v402 + 1) = __PAIR64__(HIDWORD(v210), LODWORD(v203));
            BYTE12(v402) = 1;
            v211 = HIDWORD(v417[1]);
            if (HIDWORD(v417[1]) == LODWORD(v417[1]))
            {
              v213 = v417[0];
              v211 = HIDWORD(v417[1]);
              v214 = *v212;
              *((_QWORD *)v417[0] + 2 * HIDWORD(v417[1])) = *v212;
              if ((v214 & 0x8000000000000) != 0)
              {
                v222 = (unsigned int *)(v214 & 0xFFFFFFFFFFFFLL);
                do
                  v223 = __ldaxr(v222);
                while (__stlxr(v223 + 1, v222));
              }
              v215 = (_QWORD *)((char *)v213 + 16 * v211 + 8);
              v216 = v212 + 1;
              v5 = (float32x2_t *)v400;
            }
            else
            {
              v217 = v417[0];
              v218 = v402;
              *((_QWORD *)v417[0] + 2 * HIDWORD(v417[1])) = v402;
              if ((v218 & 0x8000000000000) != 0)
              {
                v224 = (unsigned int *)(v218 & 0xFFFFFFFFFFFFLL);
                do
                  v225 = __ldaxr(v224);
                while (__stlxr(v225 + 1, v224));
              }
              v215 = (_QWORD *)((char *)v217 + 16 * v211 + 8);
              v216 = (_QWORD *)&v402 + 1;
            }
            *v215 = *v216;
            HIDWORD(v417[1]) = v211 + 1;
            if (v204)
            {
              if (!v209[4])
                goto LABEL_611;
              if (v204 - 1 >= v205)
              {
                __break(0xC471u);
                JUMPOUT(0x1964F8404);
              }
              v219 = (float *)((char *)v206 + 16 * v204 - 16);
              if (!*((_BYTE *)v219 + 12))
                goto LABEL_611;
              v203 = v203 - (float)(*(float *)v209 - v219[2]);
            }
            if ((v402 & 0x8000000000000) != 0)
            {
              v226 = (unsigned int *)(v402 & 0xFFFFFFFFFFFFLL);
              do
              {
                v227 = __ldaxr(v226);
                v228 = v227 - 1;
              }
              while (__stlxr(v228, v226));
              v5 = (float32x2_t *)v400;
              if (!v228)
              {
                atomic_store(1u, v226);
                WTF::fastFree((WTF *)v226, v400);
                v5 = (float32x2_t *)v400;
              }
            }
            v204 = ((unint64_t)v400 + v204 - 1) % (unint64_t)v5;
            ++v202;
          }
          while (v202 != v175);
          v229 = HIDWORD(v417[1]);
          if (HIDWORD(v417[1]) >= 2)
          {
            v230 = v417[0];
            v231 = (unint64_t)HIDWORD(v417[1]) >> 1;
            v232 = (HIDWORD(v417[1]) - 1);
            v233 = (char *)v417[0] + 16 * v232;
            v234 = HIDWORD(v417[1]);
            do
            {
              if (!v234)
              {
                __break(0xC471u);
                JUMPOUT(0x1964F84A4);
              }
              if (v232 >= v229)
              {
                __break(0xC471u);
                JUMPOUT(0x1964F84ACLL);
              }
              v235 = *(_QWORD *)v230;
              if (*(_QWORD *)v230)
                *(_QWORD *)v230 = 0;
              v236 = *((_QWORD *)v230 + 1);
              if (*(_QWORD *)v233)
              {
                *(_QWORD *)v230 = *(_QWORD *)v233;
                *(_QWORD *)v233 = 0;
              }
              v237 = *((_DWORD *)v233 + 2);
              *((_BYTE *)v230 + 12) = v233[12];
              *((_DWORD *)v230 + 2) = v237;
              if (v235)
                *(_QWORD *)v233 = v235;
              --v234;
              *((_DWORD *)v233 + 2) = v236;
              v233[12] = BYTE4(v236);
              v230 = (WTF *)((char *)v230 + 16);
              v233 -= 16;
              --v232;
              --v231;
            }
            while (v231);
          }
        }
        else
        {
          LODWORD(v229) = 0;
          v5 = (float32x2_t *)v400;
        }
        v238 = v407;
        v239 = HIDWORD(v408);
        if (HIDWORD(v408))
        {
          v240 = HIDWORD(v408) + (unint64_t)v229;
          if (v240 <= LODWORD(v417[1]))
          {
            v229 = v229;
          }
          else
          {
            v5 = (float32x2_t *)v400;
            v229 = HIDWORD(v417[1]);
            if (v240 < HIDWORD(v417[1]))
              goto LABEL_670;
          }
          v241 = (_QWORD *)((char *)v417[0] + 16 * v229);
          v242 = v238;
          do
          {
            v243 = *(_QWORD *)v242;
            *v241 = *(_QWORD *)v242;
            if ((v243 & 0x8000000000000) != 0)
            {
              v244 = (unsigned int *)(v243 & 0xFFFFFFFFFFFFLL);
              do
                v245 = __ldaxr(v244);
              while (__stlxr(v245 + 1, v244));
            }
            v241[1] = *((_QWORD *)v242 + 1);
            v241 += 2;
            v242 = (WTF *)((char *)v242 + 16);
          }
          while (v242 != (WTF *)((char *)v238 + 16 * v239));
          HIDWORD(v417[1]) = v240;
          if (v193)
          {
            v246 = (float *)((char *)v238 + 16 * v239);
            if (!*((_BYTE *)v246 - 4))
              goto LABEL_611;
            v247 = 0;
            v248 = 0;
            v249 = *(v246 - 2);
            do
            {
              v250 = HIDWORD(v408);
              if (v247 >= HIDWORD(v408))
              {
                __break(0xC471u);
                JUMPOUT(0x1964F840CLL);
              }
              v251 = v407;
              v252 = *((_QWORD *)v407 + 2 * v247);
              *(_QWORD *)&v402 = v252;
              if ((v252 & 0x8000000000000) != 0)
              {
                v266 = (unsigned int *)(v252 & 0xFFFFFFFFFFFFLL);
                do
                  v267 = __ldaxr(v266);
                while (__stlxr(v267 + 1, v266));
              }
              v253 = (char *)v251 + 16 * v247;
              v255 = *((_QWORD *)v253 + 1);
              v254 = v253 + 8;
              *((_QWORD *)&v402 + 1) = __PAIR64__(HIDWORD(v255), LODWORD(v249));
              BYTE12(v402) = 1;
              v256 = HIDWORD(v417[1]);
              if (HIDWORD(v417[1]) == LODWORD(v417[1]))
              {
                v258 = v417[0];
                v256 = HIDWORD(v417[1]);
                v259 = *v257;
                *((_QWORD *)v417[0] + 2 * HIDWORD(v417[1])) = *v257;
                if ((v259 & 0x8000000000000) != 0)
                {
                  v268 = (unsigned int *)(v259 & 0xFFFFFFFFFFFFLL);
                  do
                    v269 = __ldaxr(v268);
                  while (__stlxr(v269 + 1, v268));
                }
                v260 = (_QWORD *)((char *)v258 + 16 * v256 + 8);
                v261 = v257 + 1;
                v5 = (float32x2_t *)v400;
              }
              else
              {
                v262 = v417[0];
                v263 = v402;
                *((_QWORD *)v417[0] + 2 * HIDWORD(v417[1])) = v402;
                if ((v263 & 0x8000000000000) != 0)
                {
                  v270 = (unsigned int *)(v263 & 0xFFFFFFFFFFFFLL);
                  do
                    v271 = __ldaxr(v270);
                  while (__stlxr(v271 + 1, v270));
                }
                v260 = (_QWORD *)((char *)v262 + 16 * v256 + 8);
                v261 = (_QWORD *)&v402 + 1;
              }
              *v260 = *v261;
              HIDWORD(v417[1]) = v256 + 1;
              v264 = v247 + 1;
              if (v247 < v59)
              {
                if (v264 >= v250)
                {
                  __break(0xC471u);
                  JUMPOUT(0x1964F8514);
                }
                v265 = (float *)((char *)v251 + 16 * v264);
                if (!*((_BYTE *)v265 + 12) || !v254[4])
                  goto LABEL_611;
                v249 = v249 + (float)(v265[2] - *(float *)v254);
              }
              if ((float32x2_t *)v264 == v5)
                v247 = 0;
              else
                ++v247;
              if ((v402 & 0x8000000000000) != 0)
              {
                v272 = (unsigned int *)(v402 & 0xFFFFFFFFFFFFLL);
                do
                {
                  v273 = __ldaxr(v272);
                  v274 = v273 - 1;
                }
                while (__stlxr(v274, v272));
                v5 = (float32x2_t *)v400;
                if (!v274)
                {
                  atomic_store(1u, v272);
                  WTF::fastFree((WTF *)v272, v400);
                  v5 = (float32x2_t *)v400;
                }
              }
              ++v248;
            }
            while (v248 != v193);
            LODWORD(v239) = HIDWORD(v408);
            v238 = v407;
          }
          if ((_DWORD)v239)
          {
            v275 = (WTF *)((char *)v238 + 16 * v239);
            do
            {
              if ((*(_QWORD *)v238 & 0x8000000000000) != 0)
              {
                v276 = (unsigned int *)(*(_QWORD *)v238 & 0xFFFFFFFFFFFFLL);
                do
                {
                  v277 = __ldaxr(v276);
                  v278 = v277 - 1;
                }
                while (__stlxr(v278, v276));
                if (!v278)
                {
                  atomic_store(1u, v276);
                  WTF::fastFree((WTF *)v276, v5);
                }
              }
              v238 = (WTF *)((char *)v238 + 16);
            }
            while (v238 != v275);
            v238 = v407;
          }
        }
        else if (v193)
        {
          __break(0xC471u);
          JUMPOUT(0x1964F786CLL);
        }
        if (v238)
        {
          v407 = 0;
          LODWORD(v408) = 0;
          WTF::fastFree(v238, v5);
        }
        v407 = v417[0];
        LODWORD(v60) = HIDWORD(v417[1]);
        v408 = v417[1];
      }
    }
LABEL_436:
    if (v60 > 1)
    {
      a2 = (unint64_t)v407;
      if (!*((_BYTE *)v407 + 12))
        goto LABEL_611;
      v173 = *((float *)v407 + 2);
      goto LABEL_439;
    }
LABEL_451:
    *(_QWORD *)&v402 = &v403;
    *((_QWORD *)&v402 + 1) = 2;
    goto LABEL_540;
  }
LABEL_439:
  v13 = v60;
  v279 = v60 - 1;
  if (v173 >= 0.0)
  {
    v280 = a2 + 16 * v279;
    if (!*(_BYTE *)(v280 + 12))
      goto LABEL_611;
    if (*(float *)(v280 + 8) <= 1.0)
      goto LABEL_539;
  }
  v281 = 0;
  v282 = 0;
  v283 = *(_QWORD *)(v395 + 168);
  v284 = *(_DWORD *)(v395 + 176);
  while (1)
  {
    if (!*(_BYTE *)(a2 + v281 + 12))
      goto LABEL_611;
    v285 = *(float *)(a2 + v281 + 8);
    if (v285 >= 0.0)
      break;
    ++v282;
    v281 += 16;
    if (v60 == v282)
    {
      v286 = 0;
      do
      {
        v287 = a2 + v286;
        if (!*(_BYTE *)(a2 + v286 + 12))
          *(_BYTE *)(v287 + 12) = 1;
        *(_DWORD *)(v287 + 8) = 0;
        v286 += 16;
      }
      while (16 * v60 != v286);
LABEL_485:
      LODWORD(v306) = v60;
      if ((v279 & 0x80000000) == 0)
        goto LABEL_486;
LABEL_493:
      if ((_DWORD)v306)
      {
LABEL_494:
        v309 = 16 * v306;
        v310 = (_BYTE *)(a2 + 12);
        do
        {
          if (!*v310)
            *v310 = 1;
          *((_DWORD *)v310 - 1) = 1065353216;
          v310 += 16;
          v309 -= 16;
        }
        while (v309);
      }
      goto LABEL_538;
    }
  }
  if (!v281)
    goto LABEL_485;
  v288 = a2 + v281;
  if (!*(_BYTE *)(a2 + v281 - 4))
    goto LABEL_611;
  v289 = *(float *)(v288 - 8);
  v290 = *(WTF **)(v288 - 16);
  v412 = v290;
  if (((unint64_t)v290 & 0x8000000000000) != 0)
  {
    v362 = (unsigned int *)((unint64_t)v290 & 0xFFFFFFFFFFFFLL);
    do
      v363 = __ldaxr(v362);
    while (__stlxr(v363 + 1, v362));
  }
  if (v282 >= v60)
  {
    __break(0xC471u);
    JUMPOUT(0x1964F859CLL);
  }
  v291 = (float)-v289 / (float)(v285 - v289);
  v292 = *(_QWORD *)(a2 + v281);
  v411 = v292;
  if ((v292 & 0x8000000000000) != 0)
  {
    v364 = (unsigned int *)(v292 & 0xFFFFFFFFFFFFLL);
    do
      v365 = __ldaxr(v364);
    while (__stlxr(v365 + 1, v364));
  }
  *(_QWORD *)&v402 = v283;
  DWORD2(v402) = v284;
  v415 = v291;
  v416 = (float)(1.0 - v291);
  v417[0] = (WTF *)&v402;
  v417[1] = (WTF *)&v412;
  v418 = &v416;
  v419 = &v411;
  v420 = &v415;
  if (HIDWORD(v283) == 0xFFFFFFFF)
    goto LABEL_588;
  *(_QWORD *)&v414 = v417;
  ((void (*)(double *__return_ptr, __int128 *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore17interpolateColorsENS8_24ColorInterpolationMethodENS8_5ColorEdSA_dE3__0JEEEEEJRNS0_6__implIJNS9_3HSLENS9_3HWBENS9_3LCHENS9_3LabENS9_5OKLCHENS9_5OKLabENS9_4SRGBENS9_10SRGBLinearENS9_9DisplayP3ENS9_6A98RGBENS9_11ProPhotoRGBENS9_7Rec2020ENS9_6XYZD50ENS9_6XYZD65EEEEEEEDcOT_DpOT0____fmatrix[HIDWORD(v283)])(&v413, &v414, &v402);
  if ((v411 & 0x8000000000000) != 0)
  {
    v373 = (unsigned int *)(v411 & 0xFFFFFFFFFFFFLL);
    do
    {
      v374 = __ldaxr(v373);
      v375 = v374 - 1;
    }
    while (__stlxr(v375, v373));
    if (!v375)
    {
      atomic_store(1u, v373);
      WTF::fastFree((WTF *)v373, v5);
    }
  }
  v401 = v284;
  if (((unint64_t)v412 & 0x8000000000000) != 0)
  {
    v376 = (unsigned int *)((unint64_t)v412 & 0xFFFFFFFFFFFFLL);
    do
    {
      v377 = __ldaxr(v376);
      v378 = v377 - 1;
    }
    while (__stlxr(v378, v376));
    if (!v378)
    {
      atomic_store(1u, v376);
      WTF::fastFree((WTF *)v376, v5);
    }
  }
  v293 = 0;
  v294 = HIDWORD(v408);
  v295 = v407;
  while (2)
  {
    if (v293 == v294)
    {
      __break(0xC471u);
      JUMPOUT(0x1964F83C4);
    }
    v296 = (char *)v295 + 16 * v293;
    if (!v296[12])
      v296[12] = 1;
    *((_DWORD *)v296 + 2) = 0;
    v297 = *(double *)v296;
    if ((*(_QWORD *)v296 & 0x8000000000000) != 0)
    {
      if ((*(_QWORD *)&v413 & 0x8000000000000) == 0)
        goto LABEL_469;
      *(_OWORD *)v417 = *(_OWORD *)((*(_QWORD *)&v297 & 0xFFFFFFFFFFFFLL) + 4);
      v402 = *(_OWORD *)((*(_QWORD *)&v413 & 0xFFFFFFFFFFFFLL) + 4);
      v305 = WebCore::operator==<float,4ul>((float *)v417, (float *)&v402);
      v297 = *(double *)v296;
      if (!v305 || HIBYTE(*(_QWORD *)&v297) != HIBYTE(*(_QWORD *)&v413) || BYTE6(v297) != BYTE6(v413))
        goto LABEL_469;
    }
    else if (*(_QWORD *)&v297 != *(_QWORD *)&v413 || (*(_QWORD *)&v413 & 0x8000000000000) != 0)
    {
LABEL_469:
      if ((*(_QWORD *)&v297 & 0x8000000000000) != 0)
      {
        v302 = (unsigned int *)(*(_QWORD *)&v297 & 0xFFFFFFFFFFFFLL);
        do
        {
          v303 = __ldaxr(v302);
          v304 = v303 - 1;
        }
        while (__stlxr(v304, v302));
        if (!v304)
        {
          atomic_store(1u, v302);
          WTF::fastFree((WTF *)v302, v5);
        }
      }
      v299 = v413;
      *(double *)v296 = v413;
      if ((*(_QWORD *)&v299 & 0x8000000000000) != 0)
      {
        v300 = (unsigned int *)(*(_QWORD *)&v299 & 0xFFFFFFFFFFFFLL);
        do
          v301 = __ldaxr(v300);
        while (__stlxr(v301 + 1, v300));
      }
    }
    if (v282 != ++v293)
      continue;
    break;
  }
  if ((*(_QWORD *)&v413 & 0x8000000000000) != 0)
  {
    v379 = (unsigned int *)(*(_QWORD *)&v413 & 0xFFFFFFFFFFFFLL);
    do
    {
      v380 = __ldaxr(v379);
      v381 = v380 - 1;
    }
    while (__stlxr(v381, v379));
    if (!v381)
    {
      atomic_store(1u, v379);
      WTF::fastFree((WTF *)v379, v5);
    }
  }
  LODWORD(v306) = HIDWORD(v408);
  a2 = (unint64_t)v407;
  v284 = v401;
  if ((v279 & 0x80000000) != 0)
    goto LABEL_493;
LABEL_486:
  if (v306 <= v279)
  {
    __break(0xC471u);
    JUMPOUT(0x1964F8594);
  }
  while (1)
  {
    v60 = (v60 - 1);
    v307 = a2 + 16 * v60;
    if (!*(_BYTE *)(v307 + 12))
      goto LABEL_611;
    v308 = *(float *)(v307 + 8);
    if (v308 <= 1.0)
      break;
    if ((int)v60 <= 0)
      goto LABEL_494;
  }
  if (v279 > v60)
  {
    if (v306 <= v60)
    {
      __break(0xC471u);
      JUMPOUT(0x1964F85A4);
    }
    v311 = v60 + 1;
    if (v60 + 1 >= v306)
    {
      __break(0xC471u);
      JUMPOUT(0x1964F85ACLL);
    }
    v312 = a2 + 16 * v311;
    if (*(_BYTE *)(v312 + 12))
    {
      v313 = *(float *)(v312 + 8);
      v314 = *(_QWORD *)(a2 + 16 * v60);
      v410 = v314;
      if ((v314 & 0x8000000000000) != 0)
      {
        v366 = (unsigned int *)(v314 & 0xFFFFFFFFFFFFLL);
        do
          v367 = __ldaxr(v366);
        while (__stlxr(v367 + 1, v366));
        v306 = HIDWORD(v408);
      }
      else
      {
        v306 = v306;
      }
      if (v311 >= v306)
      {
        __break(0xC471u);
        JUMPOUT(0x1964F85B4);
      }
      v315 = (float)(1.0 - v308) / (float)(v313 - v308);
      v316 = *((_QWORD *)v407 + 2 * v311);
      v409 = v316;
      if ((v316 & 0x8000000000000) != 0)
      {
        v368 = (unsigned int *)(v316 & 0xFFFFFFFFFFFFLL);
        do
          v369 = __ldaxr(v368);
        while (__stlxr(v369 + 1, v368));
      }
      *(_QWORD *)&v402 = v283;
      DWORD2(v402) = v284;
      v415 = v315;
      v416 = (float)(1.0 - v315);
      v417[0] = (WTF *)&v402;
      v417[1] = (WTF *)&v410;
      v418 = &v416;
      v419 = &v409;
      v420 = &v415;
      if (HIDWORD(v283) != 0xFFFFFFFF)
      {
        *(_QWORD *)&v414 = v417;
        ((void (*)(double *__return_ptr, __int128 *, __int128 *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore17interpolateColorsENS8_24ColorInterpolationMethodENS8_5ColorEdSA_dE3__0JEEEEEJRNS0_6__implIJNS9_3HSLENS9_3HWBENS9_3LCHENS9_3LabENS9_5OKLCHENS9_5OKLabENS9_4SRGBENS9_10SRGBLinearENS9_9DisplayP3ENS9_6A98RGBENS9_11ProPhotoRGBENS9_7Rec2020ENS9_6XYZD50ENS9_6XYZD65EEEEEEEDcOT_DpOT0____fmatrix[HIDWORD(v283)])(&v413, &v414, &v402);
        if ((v409 & 0x8000000000000) != 0)
        {
          v383 = (unsigned int *)(v409 & 0xFFFFFFFFFFFFLL);
          do
          {
            v384 = __ldaxr(v383);
            v385 = v384 - 1;
          }
          while (__stlxr(v385, v383));
          if (!v385)
          {
            atomic_store(1u, v383);
            WTF::fastFree((WTF *)v383, v5);
          }
        }
        if ((v410 & 0x8000000000000) != 0)
        {
          v386 = (unsigned int *)(v410 & 0xFFFFFFFFFFFFLL);
          do
          {
            v387 = __ldaxr(v386);
            v388 = v387 - 1;
          }
          while (__stlxr(v388, v386));
          if (!v388)
          {
            atomic_store(1u, v386);
            WTF::fastFree((WTF *)v386, v5);
          }
        }
        if (v311 >= v13)
        {
LABEL_536:
          if ((*(_QWORD *)&v413 & 0x8000000000000) != 0)
          {
            v389 = (unsigned int *)(*(_QWORD *)&v413 & 0xFFFFFFFFFFFFLL);
            do
            {
              v390 = __ldaxr(v389);
              v391 = v390 - 1;
            }
            while (__stlxr(v391, v389));
            if (!v391)
            {
              atomic_store(1u, v389);
              WTF::fastFree((WTF *)v389, v5);
            }
          }
          LODWORD(v306) = HIDWORD(v408);
          goto LABEL_538;
        }
        v317 = HIDWORD(v408);
        v318 = v407;
        while (2)
        {
          if (v311 >= v317)
          {
            __break(0xC471u);
            JUMPOUT(0x1964F848CLL);
          }
          v319 = (char *)v318 + 16 * v311;
          if (!v319[12])
            v319[12] = 1;
          *((_DWORD *)v319 + 2) = 1065353216;
          v320 = *(double *)v319;
          if ((*(_QWORD *)v319 & 0x8000000000000) != 0)
          {
            if ((*(_QWORD *)&v413 & 0x8000000000000) == 0)
              goto LABEL_520;
            *(_OWORD *)v417 = *(_OWORD *)((*(_QWORD *)&v320 & 0xFFFFFFFFFFFFLL) + 4);
            v402 = *(_OWORD *)((*(_QWORD *)&v413 & 0xFFFFFFFFFFFFLL) + 4);
            v328 = WebCore::operator==<float,4ul>((float *)v417, (float *)&v402);
            v320 = *(double *)v319;
            if (!v328 || HIBYTE(*(_QWORD *)&v320) != HIBYTE(*(_QWORD *)&v413) || BYTE6(v320) != BYTE6(v413))
              goto LABEL_520;
          }
          else if (*(_QWORD *)&v320 != *(_QWORD *)&v413 || (*(_QWORD *)&v413 & 0x8000000000000) != 0)
          {
LABEL_520:
            if ((*(_QWORD *)&v320 & 0x8000000000000) != 0)
            {
              v325 = (unsigned int *)(*(_QWORD *)&v320 & 0xFFFFFFFFFFFFLL);
              do
              {
                v326 = __ldaxr(v325);
                v327 = v326 - 1;
              }
              while (__stlxr(v327, v325));
              if (!v327)
              {
                atomic_store(1u, v325);
                WTF::fastFree((WTF *)v325, v5);
              }
            }
            v322 = v413;
            *(double *)v319 = v413;
            if ((*(_QWORD *)&v322 & 0x8000000000000) != 0)
            {
              v323 = (unsigned int *)(*(_QWORD *)&v322 & 0xFFFFFFFFFFFFLL);
              do
                v324 = __ldaxr(v323);
              while (__stlxr(v324 + 1, v323));
            }
          }
          if (++v311 >= v13)
            goto LABEL_536;
          continue;
        }
      }
LABEL_588:
      std::__throw_bad_variant_access[abi:sn180100]();
LABEL_589:
      v360 = (unsigned int *)(v182 & 0xFFFFFFFFFFFFLL);
      do
        v361 = __ldaxr(v360);
      while (__stlxr(v361 + 1, v360));
      goto LABEL_285;
    }
LABEL_611:
    __break(1u);
LABEL_612:
    __break(0xC471u);
    JUMPOUT(0x1964F8384);
  }
LABEL_538:
  v13 = v306;
  LODWORD(v60) = v306;
LABEL_539:
  *(_QWORD *)&v402 = &v403;
  *((_QWORD *)&v402 + 1) = 2;
  if (v60 >= 3)
  {
    if (!(v60 >> 28))
    {
      v359 = WTF::fastMalloc((WTF *)(16 * v13));
      DWORD2(v402) = v60;
      *(_QWORD *)&v402 = v359;
      goto LABEL_541;
    }
LABEL_670:
    __break(0xC471u);
    JUMPOUT(0x1964F7860);
  }
LABEL_540:
  if (!(_DWORD)v60)
  {
    v417[0] = (WTF *)&v418;
    v341 = 2;
LABEL_558:
    LODWORD(v417[1]) = v341;
    goto LABEL_559;
  }
LABEL_541:
  v329 = 0;
  do
  {
    v330 = (char *)v407 + 16 * v329;
    if (!v330[12])
      goto LABEL_611;
    v331 = *((_DWORD *)v330 + 2);
    v332 = *(_QWORD *)v330;
    if ((v332 & 0x8000000000000) != 0)
    {
      v335 = (unsigned int *)(v332 & 0xFFFFFFFFFFFFLL);
      do
        v336 = __ldaxr(v335);
      while (__stlxr(v336 + 1, v335));
    }
    v333 = HIDWORD(v402);
    v334 = v402 + 16 * HIDWORD(v402);
    *(_DWORD *)v334 = v331;
    *(_QWORD *)(v334 + 8) = v332;
    HIDWORD(v402) = v333 + 1;
    ++v329;
  }
  while (v329 < HIDWORD(v408));
  v337 = (WTF *)v402;
  v417[0] = (WTF *)&v418;
  LODWORD(v417[1]) = 2;
  if ((double **)v402 != &v403)
  {
    *(_QWORD *)&v402 = &v403;
    v417[0] = v337;
    v341 = DWORD2(v402);
    DWORD2(v402) = 2;
    goto LABEL_558;
  }
  if (v333 != -1)
  {
    v338 = &v419;
    v339 = 16 * (v333 + 1);
    v340 = v404;
    do
    {
      *((_DWORD *)v338 - 2) = *((_DWORD *)v340 - 2);
      *v338 = 0;
      if (*v340)
      {
        *v338 = (uint64_t *)*v340;
        *v340 = 0;
      }
      v338 += 2;
      v340 += 2;
      v339 -= 16;
    }
    while (v339);
  }
LABEL_559:
  v342 = HIDWORD(v402);
  HIDWORD(v402) = 0;
  HIDWORD(v417[1]) = v342;
  LOBYTE(v423) = 1;
  v343 = v407;
  if (HIDWORD(v408))
  {
    v344 = (WTF *)((char *)v407 + 16 * HIDWORD(v408));
    do
    {
      if ((*(_QWORD *)v343 & 0x8000000000000) != 0)
      {
        v345 = (unsigned int *)(*(_QWORD *)v343 & 0xFFFFFFFFFFFFLL);
        do
        {
          v346 = __ldaxr(v345);
          v347 = v346 - 1;
        }
        while (__stlxr(v347, v345));
        if (!v347)
        {
          atomic_store(1u, v345);
          WTF::fastFree((WTF *)v345, v5);
        }
      }
      v343 = (WTF *)((char *)v343 + 16);
    }
    while (v343 != v344);
    v343 = v407;
  }
  if (v343)
    WTF::fastFree(v343, v5);
  *(float32x2_t *)&v402 = v392;
  *((float *)&v402 + 2) = v10;
  HIDWORD(v404[0]) = 2;
  v348 = *(_QWORD *)(v395 + 168);
  v349 = *(_DWORD *)(v395 + 176);
  v350 = WTF::fastMalloc((WTF *)0xC8);
  result = (unsigned int *)WebCore::Gradient::Gradient(v350, &v402, v348, v349, 0, (uint64_t *)v417, 0, 0);
  *v393 = result;
  v353 = v417[0];
  if (HIDWORD(v417[1]))
  {
    v354 = (WTF *)((char *)v417[0] + 16 * HIDWORD(v417[1]));
    do
    {
      v355 = *((_QWORD *)v353 + 1);
      if ((v355 & 0x8000000000000) != 0)
      {
        result = (unsigned int *)(v355 & 0xFFFFFFFFFFFFLL);
        do
        {
          v356 = __ldaxr(result);
          v357 = v356 - 1;
        }
        while (__stlxr(v357, result));
        if (!v357)
        {
          atomic_store(1u, result);
          result = (unsigned int *)WTF::fastFree((WTF *)result, v352);
        }
      }
      v353 = (WTF *)((char *)v353 + 16);
    }
    while (v353 != v354);
    v353 = v417[0];
  }
  if (&v418 != (double **)v353 && v353 != 0)
  {
    v417[0] = 0;
    LODWORD(v417[1]) = 0;
    return (unsigned int *)WTF::fastFree(v353, v352);
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::knownToBeOpaque(WebCore::RenderElement const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(_QWORD ***a1, uint64_t a2)
{
  return WebCore::knownToBeOpaque<WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(**a1, *(WebCore::StyleColor **)(a2 + 32), *(_DWORD *)(a2 + 44));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::knownToBeOpaque(WebCore::RenderElement const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(_QWORD ***a1, uint64_t a2)
{
  return WebCore::knownToBeOpaque<WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(**a1, *(WebCore::StyleColor **)(a2 + 64), *(_DWORD *)(a2 + 76));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::knownToBeOpaque(WebCore::RenderElement const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(_QWORD ***a1, uint64_t a2)
{
  return WebCore::knownToBeOpaque<WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(**a1, *(WebCore::StyleColor **)(a2 + 32), *(_DWORD *)(a2 + 44));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::knownToBeOpaque(WebCore::RenderElement const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(_QWORD ***a1, uint64_t a2)
{
  return WebCore::knownToBeOpaque<WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(**a1, *(WebCore::StyleColor **)(a2 + 48), *(_DWORD *)(a2 + 60));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::knownToBeOpaque(WebCore::RenderElement const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(_QWORD ***a1, uint64_t a2)
{
  return WebCore::knownToBeOpaque<WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(**a1, *(WebCore::StyleColor **)(a2 + 72), *(_DWORD *)(a2 + 84));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::knownToBeOpaque(WebCore::RenderElement const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(_QWORD ***a1, uint64_t a2)
{
  return WebCore::knownToBeOpaque<WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(**a1, *(WebCore::StyleColor **)(a2 + 48), *(_DWORD *)(a2 + 60));
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::knownToBeOpaque(WebCore::RenderElement const&)::$_0>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,WebCore::StyleGradientImage::LinearData,WebCore::StyleGradientImage::DeprecatedLinearData,WebCore::StyleGradientImage::PrefixedLinearData,WebCore::StyleGradientImage::RadialData,WebCore::StyleGradientImage::DeprecatedRadialData,WebCore::StyleGradientImage::PrefixedRadialData,WebCore::StyleGradientImage::ConicData> const&>(_QWORD **a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  unsigned int *v8;
  float v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  WebCore::RenderStyle *v13;
  void *v14;
  unsigned int *v15;
  float v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD *v19;
  WebCore::StyleColor *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[4];
  _QWORD *v25;

  v2 = *(_DWORD *)(a2 + 60);
  if (!v2)
    return 1;
  v3 = *(_QWORD *)(a2 + 48);
  v4 = (_QWORD *)**a1;
  v5 = v3 + 48 * v2;
  if (*(_DWORD *)(*(_QWORD *)(v4[13] + 320) + 20))
  {
    v13 = (WebCore::RenderStyle *)(v4 + 10);
    while (*(_BYTE *)(v3 + 16))
    {
      WebCore::RenderStyle::colorWithColorFilter(v13, (const WebCore::StyleColor *)v3, (WebCore::Color *)&v22);
      if ((v22 & 0x8000000000000) != 0)
      {
        v15 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL);
        v16 = *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 0x10);
        do
        {
          v17 = __ldaxr(v15);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v15));
        if (!v18)
        {
          atomic_store(1u, v15);
          WTF::fastFree((WTF *)v15, v14);
        }
        if (v16 != 1.0)
          return 0;
      }
      else if ((_BYTE)v22 != 0xFF)
      {
        return 0;
      }
      v3 += 48;
      result = 1;
      if (v3 == v5)
        return result;
    }
  }
  else
  {
    while (*(_BYTE *)(v3 + 16))
    {
      v23 = v4[14] + 328;
      v24[0] = &v23;
      v24[1] = &v23;
      v24[2] = &v23;
      v24[3] = &v23;
      v6 = *(unsigned int *)(v3 + 8);
      if ((_DWORD)v6 == -1)
      {
        v19 = (_QWORD *)std::__throw_bad_variant_access[abi:sn180100]();
        return WebCore::knownToBeOpaque<WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(v19, v20, v21);
      }
      v25 = v24;
      ((void (*)(uint64_t *__return_ptr, _QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v6])(&v22, &v25, v3);
      if ((v22 & 0x8000000000000) != 0)
      {
        v8 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL);
        v9 = *(float *)((v22 & 0xFFFFFFFFFFFFLL) + 0x10);
        do
        {
          v10 = __ldaxr(v8);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v8));
        if (!v11)
        {
          atomic_store(1u, v8);
          WTF::fastFree((WTF *)v8, v7);
        }
        if (v9 != 1.0)
          return 0;
      }
      else if ((_BYTE)v22 != 0xFF)
      {
        return 0;
      }
      v3 += 48;
      if (v3 == v5)
        return 1;
    }
  }
  return 0;
}

uint64_t WebCore::knownToBeOpaque<WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(_QWORD *a1, WebCore::StyleColor *a2, unsigned int a3)
{
  float v3;
  WebCore::StyleColor *v4;
  WebCore::StyleColor *v6;
  uint64_t v7;
  void *v8;
  uint64_t result;
  WebCore::RenderStyle *v10;
  void *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  float v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[4];
  _QWORD *v22;

  if (!a3)
    return 1;
  v4 = a2;
  v6 = (WebCore::StyleColor *)((char *)a2 + 40 * a3);
  if (!*(_DWORD *)(*(_QWORD *)(a1[13] + 320) + 20))
  {
    while (1)
    {
      if (!*((_BYTE *)v4 + 16))
        return 0;
      v20 = a1[14] + 328;
      v21[0] = &v20;
      v21[1] = &v20;
      v21[2] = &v20;
      v21[3] = &v20;
      v7 = *((unsigned int *)v4 + 2);
      if ((_DWORD)v7 == -1)
        break;
      v22 = v21;
      ((void (*)(uint64_t *__return_ptr, _QWORD **, WebCore::StyleColor *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNKS9_12resolveColorERKNS8_5ColorEE3__0EEEDcRKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSJ_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSJ_INSM_INS8_17HSLFunctionModernEEEEENSJ_INSM_INS8_11HWBFunctionEEEEENSJ_INSM_INS8_11LabFunctionEEEEENSJ_INSM_INS8_11LCHFunctionEEEEENSJ_INSM_INS8_13OKLabFunctionEEEEENSJ_INSM_INS8_13OKLCHFunctionEEEEENSJ_INSM_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_19DisplayP3DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_17Rec2020DescriptorEEEEEEEEENSJ_INSM_INS18_INS19_IfNS8_15SRGBADescriptorEEEEEEEEENSJ_INSM_INS18_INS8_21ExtendedLinearEncodedIfS1U_EEEEEEEENSJ_INSM_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSJ_INSM_INS24_INS25_IfLS26_1EEEEEEEEEEEEDpOT_EUlRKSH_E_JZNSA_IJSE_EEESF_S2H_S2K_EUlRKSI_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlRKSL_E_ZNSA_IJSE_EEESF_S2H_S2K_EUlTyRKNSJ_INSM_IT_EEEEE_EEEEEJRKNS0_6__implIJSH_SI_SL_SP_SS_SV_SY_S11_S14_S17_S1E_S1J_S1O_S1T_S1Y_S23_S2A_S2E_EEEEEESF_OS2U_DpOT0____fmatrix[v7])(&v19, &v22, v4);
      if ((v19 & 0x8000000000000) == 0)
      {
        if ((_BYTE)v19 != 0xFF)
          return 0;
        goto LABEL_7;
      }
      v12 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
      v3 = *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 0x10);
      do
      {
        v13 = __ldaxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        goto LABEL_21;
LABEL_18:
      if (v3 != 1.0)
        return 0;
LABEL_7:
      v4 = (WebCore::StyleColor *)((char *)v4 + 40);
      if (v4 == v6)
        return 1;
    }
    v12 = (unsigned int *)std::__throw_bad_variant_access[abi:sn180100]();
LABEL_21:
    atomic_store(1u, v12);
    WTF::fastFree((WTF *)v12, v8);
    goto LABEL_18;
  }
  v10 = (WebCore::RenderStyle *)(a1 + 10);
  while (*((_BYTE *)v4 + 16))
  {
    WebCore::RenderStyle::colorWithColorFilter(v10, v4, (WebCore::Color *)&v19);
    if ((v19 & 0x8000000000000) != 0)
    {
      v15 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFLL);
      v16 = *(float *)((v19 & 0xFFFFFFFFFFFFLL) + 0x10);
      do
      {
        v17 = __ldaxr(v15);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v15));
      if (!v18)
      {
        atomic_store(1u, v15);
        WTF::fastFree((WTF *)v15, v11);
      }
      if (v16 != 1.0)
        return 0;
    }
    else if ((_BYTE)v19 != 0xFF)
    {
      return 0;
    }
    v4 = (WebCore::StyleColor *)((char *)v4 + 40);
    result = 1;
    if (v4 == v6)
      return result;
  }
  return 0;
}

float std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::LinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_0,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::LinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_1,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::LinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_2,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::LinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_3,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::LinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,WebCore::CSSLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<WebCore::CSSLinearGradientValue,WebCore::CSSLinearGradientValue::Horizontal>> const&>()
{
  return 0.0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::LinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_0,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::LinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_1,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::LinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_2,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::LinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_3,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::LinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,WebCore::CSSLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<WebCore::CSSLinearGradientValue,WebCore::CSSLinearGradientValue::Horizontal>> const&>(uint64_t a1, double *a2)
{
  int v2;
  double v3;
  float v4;
  float i;
  double v6;

  v2 = *(unsigned __int8 *)a2;
  v3 = a2[1];
  if (v2 != 12)
  {
    switch(v2)
    {
      case 64:
        v6 = 360.0;
        break;
      case 14:
        v6 = 0.9;
        break;
      case 13:
        v6 = 57.2957795;
        break;
      default:
        v3 = 0.0;
        goto LABEL_2;
    }
    v3 = v3 * v6;
  }
LABEL_2:
  v4 = v3;
  for (i = fmodf(v4, 360.0); i < 0.0; i = i + 360.0)
    ;
  if (i != 0.0 && i != 90.0 && i != 180.0 && i != 270.0)
    tanf((float)(90.0 - i) * 0.017453);
}

float std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::LinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_0,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::LinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_1,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::LinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_2,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::LinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_3,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::LinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,WebCore::CSSLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<WebCore::CSSLinearGradientValue,WebCore::CSSLinearGradientValue::Horizontal>> const&>(uint64_t a1, _BYTE *a2)
{
  if (*a2)
    return 0.0;
  else
    return **(float **)(*(_QWORD *)a1 + 16);
}

float std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::LinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_0,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::LinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_1,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::LinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_2,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::LinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_3,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::LinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,WebCore::CSSLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<WebCore::CSSLinearGradientValue,WebCore::CSSLinearGradientValue::Horizontal>> const&>()
{
  return 0.0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::LinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_0,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::LinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_1,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::LinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_2,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::LinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_3,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::LinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,WebCore::CSSLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<WebCore::CSSLinearGradientValue,WebCore::CSSLinearGradientValue::Horizontal>> const&>(uint64_t a1, _BYTE *a2)
{
  float *v2;
  float v3;
  float v4;
  float v5;
  float i;

  v2 = *(float **)(*(_QWORD *)a1 + 32);
  if (*a2)
    v3 = v2[1];
  else
    v3 = -v2[1];
  v4 = -*v2;
  if (!a2[1])
    v4 = *v2;
  v5 = atan2f(v4, v3);
  for (i = fmodf((float)(v5 * -57.296) + 90.0, 360.0); i < 0.0; i = i + 360.0)
    ;
  if (i != 0.0 && i != 90.0 && i != 180.0 && i != 270.0)
    tanf((float)(90.0 - i) * 0.017453);
}

char *WTF::Vector<WebCore::`anonymous namespace'::ResolvedGradientStop,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::remove(uint64_t a1, void *a2)
{
  uint64_t v3;
  char *result;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  v3 = *(_QWORD *)a1 + 16 * (_QWORD)a2;
  if ((*(_QWORD *)v3 & 0x8000000000000) != 0)
  {
    v8 = *(_QWORD *)a1 + 16 * (_QWORD)a2;
    v5 = (unsigned int *)(*(_QWORD *)v3 & 0xFFFFFFFFFFFFLL);
    do
    {
      v6 = __ldaxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    v3 = v8;
    if (!v7)
    {
      atomic_store(1u, v5);
      WTF::fastFree((WTF *)v5, a2);
      v3 = v8;
    }
  }
  --*(_DWORD *)(a1 + 12);
  return result;
}

uint64_t WTF::Vector<WebCore::`anonymous namespace'::ResolvedGradientStop,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::insert<WebCore::`anonymous namespace'::ResolvedGradientStop>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;

  v6 = *(unsigned int *)(a1 + 12);
  v7 = v6 + 9;
  if (v6 + 9 > *(unsigned int *)(a1 + 8)
  {
    __break(0xC471u);
  }
  else
  {
    v9 = *(_QWORD *)a1 + 16 * a2;
    v10 = *a3;
    *(_QWORD *)v9 = *a3;
    if ((v10 & 0x8000000000000) != 0)
    {
      v19 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 + 1, v19));
    }
    *(_QWORD *)(v9 + 8) = a3[1];
    v11 = a3[2];
    *(_QWORD *)(v9 + 16) = v11;
    if ((v11 & 0x8000000000000) != 0)
    {
      v21 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 + 1, v21));
    }
    *(_QWORD *)(v9 + 24) = a3[3];
    v12 = a3[4];
    *(_QWORD *)(v9 + 32) = v12;
    if ((v12 & 0x8000000000000) != 0)
    {
      v23 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFLL);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 + 1, v23));
    }
    *(_QWORD *)(v9 + 40) = a3[5];
    v13 = a3[6];
    *(_QWORD *)(v9 + 48) = v13;
    if ((v13 & 0x8000000000000) != 0)
    {
      v25 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 + 1, v25));
    }
    *(_QWORD *)(v9 + 56) = a3[7];
    v14 = a3[8];
    *(_QWORD *)(v9 + 64) = v14;
    if ((v14 & 0x8000000000000) != 0)
    {
      v27 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 + 1, v27));
    }
    *(_QWORD *)(v9 + 72) = a3[9];
    v15 = a3[10];
    *(_QWORD *)(v9 + 80) = v15;
    if ((v15 & 0x8000000000000) != 0)
    {
      v29 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFLL);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 + 1, v29));
    }
    *(_QWORD *)(v9 + 88) = a3[11];
    v16 = a3[12];
    *(_QWORD *)(v9 + 96) = v16;
    if ((v16 & 0x8000000000000) != 0)
    {
      v31 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFLL);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 + 1, v31));
    }
    *(_QWORD *)(v9 + 104) = a3[13];
    v17 = a3[14];
    *(_QWORD *)(v9 + 112) = v17;
    if ((v17 & 0x8000000000000) != 0)
    {
      v33 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 + 1, v33));
    }
    *(_QWORD *)(v9 + 120) = a3[15];
    v18 = a3[16];
    *(_QWORD *)(v9 + 128) = v18;
    if ((v18 & 0x8000000000000) != 0)
    {
      v35 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 + 1, v35));
    }
    *(_QWORD *)(v9 + 136) = a3[17];
    *(_DWORD *)(a1 + 12) = v7;
  }
  return result;
}

unsigned int *WTF::Vector<WebCore::`anonymous namespace'::ResolvedGradientStop,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(unsigned int *result, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;

  v2 = result[3];
  if ((_DWORD)v2 != 1)
  {
    v3 = *(_QWORD *)result + 16 * v2;
    v4 = (_QWORD *)(*(_QWORD *)result + 16);
    do
    {
      if ((*v4 & 0x8000000000000) != 0)
      {
        v8 = v4;
        v9 = v3;
        v10 = result;
        v5 = (unsigned int *)(*v4 & 0xFFFFFFFFFFFFLL);
        do
        {
          v6 = __ldaxr(v5);
          v7 = --v6 == 0;
        }
        while (__stlxr(v6, v5));
        v3 = v9;
        if (v7)
        {
          atomic_store(1u, v5);
          WTF::fastFree((WTF *)v5, a2);
          v4 = v8;
          v3 = v9;
          result = v10;
        }
      }
      v4 += 2;
    }
    while (v4 != (_QWORD *)v3);
  }
  result[3] = 1;
  return result;
}

uint64_t *WTF::Vector<WebCore::`anonymous namespace'::ResolvedGradientStop,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reverse(uint64_t *result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  LODWORD(v1) = *((_DWORD *)result + 3);
  if (v1 >= 2)
  {
    v2 = 0;
    v3 = 0;
    v4 = 0;
    do
    {
      if (v4 >= v1 || (v5 = v3 + (v1 - 1), v5 >= v1))
      {
        __break(0xC471u);
        JUMPOUT(0x1964F9160);
      }
      v6 = *result;
      v7 = *(_QWORD *)(*result + v2);
      if (v7)
        *(_QWORD *)(v6 + v2) = 0;
      v8 = (_QWORD *)(v6 + 16 * v5);
      v9 = *(_QWORD *)(v6 + v2 + 8);
      if (*v8)
      {
        *(_QWORD *)(v6 + v2) = *v8;
        *v8 = 0;
      }
      v10 = v6 + 16 * v5;
      v12 = *(_DWORD *)(v10 + 8);
      v11 = v10 + 8;
      *(_BYTE *)(v6 + v2 + 12) = *(_BYTE *)(v11 + 4);
      *(_DWORD *)(v6 + v2 + 8) = v12;
      if (v7)
        *v8 = v7;
      *(_DWORD *)v11 = v9;
      *(_BYTE *)(v11 + 4) = BYTE4(v9);
      ++v4;
      v1 = *((unsigned int *)result + 3);
      --v3;
      v2 += 16;
    }
    while (v4 < v1 >> 1);
  }
  return result;
}

uint64_t WTF::Vector<WebCore::`anonymous namespace'::ResolvedGradientStop,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendVector<WebCore::`anonymous namespace'::ResolvedGradientStop,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>(uint64_t result, uint64_t *a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  if (a3)
  {
    v4 = result;
    v5 = a3;
    v6 = *(unsigned int *)(result + 12);
    v7 = v6 + a3;
    if (v7 > *(unsigned int *)(result + 8)
    {
      __break(0xC471u);
    }
    else
    {
      v8 = (uint64_t *)(*(_QWORD *)v4 + 16 * v6);
      v9 = &a2[2 * v5];
      do
      {
        v10 = *a2;
        *v8 = *a2;
        if ((v10 & 0x8000000000000) != 0)
        {
          v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFLL);
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 + 1, v11));
        }
        v8[1] = a2[1];
        v8 += 2;
        a2 += 2;
      }
      while (a2 != v9);
      *(_DWORD *)(v4 + 12) = v7;
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::`anonymous namespace'::ResolvedGradientStop,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::operator=(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  WTF *v5;
  WTF *v6;
  unsigned int *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;
  WTF *v12;
  WTF *v13;

  v4 = *(unsigned int *)(a1 + 12);
  v5 = *(WTF **)a1;
  if ((_DWORD)v4)
  {
    v6 = (WTF *)((char *)v5 + 16 * v4);
    do
    {
      if ((*(_QWORD *)v5 & 0x8000000000000) != 0)
      {
        v12 = v6;
        v13 = v5;
        v7 = (unsigned int *)(*(_QWORD *)v5 & 0xFFFFFFFFFFFFLL);
        do
        {
          v8 = __ldaxr(v7);
          v9 = --v8 == 0;
        }
        while (__stlxr(v8, v7));
        v6 = v12;
        if (v9)
        {
          atomic_store(1u, v7);
          WTF::fastFree((WTF *)v7, a2);
          v6 = v12;
          v5 = v13;
        }
      }
      v5 = (WTF *)((char *)v5 + 16);
    }
    while (v5 != v6);
    v5 = *(WTF **)a1;
  }
  if (v5)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v5, a2);
  }
  v10 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)a1 = v10;
  LODWORD(v10) = a2[2];
  a2[2] = 0;
  *(_DWORD *)(a1 + 8) = v10;
  LODWORD(v10) = a2[3];
  a2[3] = 0;
  *(_DWORD *)(a1 + 12) = v10;
  return a1;
}

uint64_t WTF::Vector<WebCore::`anonymous namespace'::ResolvedGradientStop,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector(uint64_t a1, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  unsigned int *v6;
  unsigned int v7;
  BOOL v8;
  WTF *v10;
  WTF *v11;

  v3 = *(unsigned int *)(a1 + 12);
  v4 = *(WTF **)a1;
  if ((_DWORD)v3)
  {
    v5 = (WTF *)((char *)v4 + 16 * v3);
    do
    {
      if ((*(_QWORD *)v4 & 0x8000000000000) != 0)
      {
        v10 = v5;
        v11 = v4;
        v6 = (unsigned int *)(*(_QWORD *)v4 & 0xFFFFFFFFFFFFLL);
        do
        {
          v7 = __ldaxr(v6);
          v8 = --v7 == 0;
        }
        while (__stlxr(v7, v6));
        v5 = v10;
        if (v8)
        {
          atomic_store(1u, v6);
          WTF::fastFree((WTF *)v6, a2);
          v5 = v10;
          v4 = v11;
        }
      }
      v4 = (WTF *)((char *)v4 + 16);
    }
    while (v4 != v5);
    v4 = *(WTF **)a1;
  }
  if (v4)
  {
    *(_QWORD *)a1 = 0;
    *(_DWORD *)(a1 + 8) = 0;
    WTF::fastFree(v4, a2);
  }
  return a1;
}

float32x2_t **WebCore::`anonymous namespace'::LinearGradientAdapter::normalizeStopsAndEndpointsOutsideRange(float32x2_t **result, uint64_t a2, unsigned int a3, int32x4_t a4)
{
  uint64_t v4;
  float v5;
  uint64_t v6;
  float *i;
  float32x4_t v8;
  float32x4_t v9;
  uint64_t v10;
  _BYTE *v11;

  if (!*(_BYTE *)(a2 + 12) || (v4 = a2 + 16 * a3, !*(_BYTE *)(v4 - 4)))
  {
LABEL_13:
    __break(1u);
    return result;
  }
  a4.i32[0] = *(_DWORD *)(a2 + 8);
  v5 = *(float *)(v4 - 8);
  if (*(float *)a4.i32 != v5)
  {
    v6 = 16 * a3;
    for (i = (float *)(a2 + 12); *(_BYTE *)i; i += 4)
    {
      *(i - 1) = (float)(*(i - 1) - *(float *)a4.i32) / (float)(v5 - *(float *)a4.i32);
      *(_BYTE *)i = 1;
      v6 -= 16;
      if (!v6)
      {
        v8 = *(float32x4_t *)(*result)->f32;
        *(float32x2_t *)v9.f32 = vsub_f32((*result)[1], *(float32x2_t *)v8.f32);
        v9.i64[1] = v9.i64[0];
        *(float *)&a4.i32[1] = v5 + -1.0;
        *(float32x4_t *)(*result)->f32 = vmlaq_f32(v8, v9, (float32x4_t)vzip1q_s32(a4, a4));
        return result;
      }
    }
    goto LABEL_13;
  }
  v10 = 16 * a3;
  v11 = (_BYTE *)(a2 + 12);
  do
  {
    if (!*v11)
      *v11 = 1;
    *((_DWORD *)v11 - 1) = 1065353216;
    v11 += 16;
    v10 -= 16;
  }
  while (v10);
  return result;
}

char *WTF::VectorTypeOperations<WebCore::`anonymous namespace'::ResolvedGradientStop>::moveOverlapping(char *result, char *a2, _QWORD *a3)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  BOOL v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;

  if (result <= (char *)a3)
  {
    if (a2 != result)
    {
      v6 = (_QWORD *)((char *)a3 + a2 - result);
      do
      {
        v7 = a2;
        v8 = v6;
        *(v6 - 2) = 0;
        v6 -= 2;
        v10 = *((_QWORD *)a2 - 2);
        a2 -= 16;
        v9 = v10;
        if (v10)
        {
          *v6 = v9;
          *(_QWORD *)a2 = 0;
        }
        *(v8 - 1) = *((_QWORD *)v7 - 1);
        v11 = *((_QWORD *)v7 - 2);
        if ((v11 & 0x8000000000000) != 0)
        {
          v16 = v6;
          v18 = result;
          v20 = a2;
          v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFLL);
          do
          {
            v13 = __ldaxr(v12);
            v14 = --v13 == 0;
          }
          while (__stlxr(v13, v12));
          v6 = v16;
          if (v14)
          {
            atomic_store(1u, v12);
            WTF::fastFree((WTF *)v12, a2);
            v6 = v16;
            result = v18;
            a2 = v20;
          }
        }
      }
      while (a2 != result);
    }
  }
  else
  {
    while (result != a2)
    {
      *a3 = 0;
      if (*(_QWORD *)result)
      {
        *a3 = *(_QWORD *)result;
        *(_QWORD *)result = 0;
      }
      a3[1] = *((_QWORD *)result + 1);
      if ((*(_QWORD *)result & 0x8000000000000) != 0)
      {
        v15 = a3;
        v17 = result;
        v19 = a2;
        v3 = (unsigned int *)(*(_QWORD *)result & 0xFFFFFFFFFFFFLL);
        do
        {
          v4 = __ldaxr(v3);
          v5 = v4 - 1;
        }
        while (__stlxr(v5, v3));
        if (!v5)
        {
          atomic_store(1u, v3);
          WTF::fastFree((WTF *)v3, a2);
          a3 = v15;
          result = v17;
          a2 = v19;
        }
      }
      a3 += 2;
      result += 16;
    }
  }
  return result;
}

uint64_t WTF::Vector<WebCore::`anonymous namespace'::ResolvedGradientStop,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  WTF *v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  WTF *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  BOOL v15;
  WTF *v16;
  WTF *v17;

  v2 = *(unsigned int *)(result + 8);
  v3 = v2 + (v2 >> 2);
  if (v3 >= 0x10)
    v4 = v3 + 1;
  else
    v4 = 16;
  if (v4 <= a2)
    v5 = a2;
  else
    v5 = v4;
  if (v5 > v2)
  {
    if (v5 >> 28)
    {
      __break(0xC471u);
    }
    else
    {
      v6 = result;
      v7 = *(WTF **)result;
      v8 = *(unsigned int *)(result + 12);
      result = WTF::fastMalloc((WTF *)(16 * v5));
      *(_DWORD *)(v6 + 8) = v5;
      *(_QWORD *)v6 = result;
      if ((_DWORD)v8)
      {
        v10 = (WTF *)((char *)v7 + 16 * v8);
        v11 = v7;
        do
        {
          *(_QWORD *)result = 0;
          if (*(_QWORD *)v11)
          {
            *(_QWORD *)result = *(_QWORD *)v11;
            *(_QWORD *)v11 = 0;
          }
          *(_QWORD *)(result + 8) = *((_QWORD *)v11 + 1);
          if ((*(_QWORD *)v11 & 0x8000000000000) != 0)
          {
            v16 = v10;
            v17 = v11;
            v12 = result;
            v13 = (unsigned int *)(*(_QWORD *)v11 & 0xFFFFFFFFFFFFLL);
            do
            {
              v14 = __ldaxr(v13);
              v15 = --v14 == 0;
            }
            while (__stlxr(v14, v13));
            v11 = v17;
            if (v15)
            {
              atomic_store(1u, v13);
              WTF::fastFree((WTF *)v13, v9);
              v10 = v16;
              v11 = v17;
              result = v12;
            }
          }
          result += 16;
          v11 = (WTF *)((char *)v11 + 16);
        }
        while (v11 != v10);
      }
      if (v7)
      {
        if (*(WTF **)v6 == v7)
        {
          *(_QWORD *)v6 = 0;
          *(_DWORD *)(v6 + 8) = 0;
        }
        return WTF::fastFree(v7, v9);
      }
    }
  }
  return result;
}

uint64_t *WTF::Vector<WebCore::`anonymous namespace'::ResolvedGradientStop,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::`anonymous namespace'::ResolvedGradientStop&>(uint64_t a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v4 = *(_QWORD *)a1;
  v5 = *(unsigned int *)(a1 + 12);
  v6 = *result;
  *(_QWORD *)(*(_QWORD *)a1 + 16 * v5) = *result;
  if ((v6 & 0x8000000000000) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  *(_QWORD *)(v4 + 16 * v5 + 8) = result[1];
  ++*(_DWORD *)(a1 + 12);
  return result;
}

unint64_t WTF::Vector<WebCore::`anonymous namespace'::ResolvedGradientStop,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 > a3 || v5 + 16 * (unint64_t)*(unsigned int *)(a1 + 12) <= a3)
  {
  }
  else
  {
    v6 = a3 - v5;
    return *(_QWORD *)a1 + v6;
  }
  return v3;
}

float std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedLinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_0,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedLinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_1,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedLinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_2,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedLinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_3,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedLinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,WebCore::CSSPrefixedLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<WebCore::CSSPrefixedLinearGradientValue,WebCore::CSSPrefixedLinearGradientValue::Horizontal>> const&>()
{
  return 0.0;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedLinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_0,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedLinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_1,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedLinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_2,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedLinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_3,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedLinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,WebCore::CSSPrefixedLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<WebCore::CSSPrefixedLinearGradientValue,WebCore::CSSPrefixedLinearGradientValue::Horizontal>> const&>(uint64_t a1, double *a2)
{
  int v2;
  double v3;
  float v4;
  float i;
  double v6;

  v2 = *(unsigned __int8 *)a2;
  v3 = a2[1];
  if (v2 != 12)
  {
    switch(v2)
    {
      case 64:
        v6 = 360.0;
        break;
      case 14:
        v6 = 0.9;
        break;
      case 13:
        v6 = 57.2957795;
        break;
      default:
        v3 = 0.0;
        goto LABEL_2;
    }
    v3 = v3 * v6;
  }
LABEL_2:
  v4 = v3;
  for (i = fmodf(90.0 - v4, 360.0); i < 0.0; i = i + 360.0)
    ;
  if (i != 0.0 && i != 90.0 && i != 180.0 && i != 270.0)
    tanf((float)(90.0 - i) * 0.017453);
}

float std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedLinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_0,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedLinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_1,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedLinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_2,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedLinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_3,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedLinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,WebCore::CSSPrefixedLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<WebCore::CSSPrefixedLinearGradientValue,WebCore::CSSPrefixedLinearGradientValue::Horizontal>> const&>(uint64_t a1, _BYTE *a2)
{
  if (*a2)
    return **(float **)(*(_QWORD *)a1 + 16);
  else
    return 0.0;
}

float std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedLinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_0,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedLinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_1,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedLinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_2,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedLinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_3,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedLinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,WebCore::CSSPrefixedLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<WebCore::CSSPrefixedLinearGradientValue,WebCore::CSSPrefixedLinearGradientValue::Horizontal>> const&>()
{
  return 0.0;
}

float std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedLinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_0,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedLinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_1,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedLinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_2,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedLinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_3,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedLinearData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,WebCore::CSSPrefixedLinearGradientValue::Horizontal,WebCore::AngleRaw::Vertical,std::pair<WebCore::CSSPrefixedLinearGradientValue,WebCore::CSSPrefixedLinearGradientValue::Horizontal>> const&>(uint64_t a1, _BYTE *a2)
{
  if (*a2)
    return **(float **)(*(_QWORD *)a1 + 32);
  else
    return 0.0;
}

uint64_t std::__stable_sort<std::_RangeAlgPolicy,WebCore::GradientColorStops WebCore::StyleGradientImage::computeStopsForDeprecatedVariants<WebCore::`anonymous namespace'::LinearGradientAdapter,WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WebCore::`anonymous namespace'::LinearGradientAdapter &,WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::RenderStyle const&)::{lambda(WebCore::`anonymous namespace'::LinearGradientAdapter const&,WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} &,WebCore::GradientColorStop *>(uint64_t result, float *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  float v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  unint64_t v14;
  float *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  float *v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int v58;
  unsigned int v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v64;
  unsigned int v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  float v71;
  float v72;
  __int128 v73;
  __int128 v74;

  if (a3 < 2)
    return result;
  v6 = result;
  if (a3 == 2)
  {
    v7 = *(a2 - 4);
    v8 = *(_DWORD *)result;
    if (v7 < *(float *)result)
    {
      v9 = *(_QWORD *)(result + 8);
      if (v9)
        *(_QWORD *)(result + 8) = 0;
      *(float *)result = v7;
      v10 = *((_QWORD *)a2 - 1);
      if (v10)
      {
        *(_QWORD *)(result + 8) = v10;
        *((_QWORD *)a2 - 1) = 0;
      }
      *((_DWORD *)a2 - 4) = v8;
      if (v9)
        *((_QWORD *)a2 - 1) = v9;
    }
    return result;
  }
  if ((uint64_t)a3 > 0)
  {
    v13 = a4;
    v14 = a3 >> 1;
    v15 = (float *)(result + 16 * (a3 >> 1));
    v16 = a3 >> 1;
    if ((uint64_t)a3 > a5)
    {
    }
    v38 = v13 + 16 * v14;
    v40 = v38;
    v41 = v13;
    v42 = v13 + 16 * a3;
    while (1)
    {
      if (v40 == v42)
      {
        if (v41 == v38)
          goto LABEL_137;
        while (2)
        {
          *(_DWORD *)v6 = *(_DWORD *)v41;
          v55 = *(_QWORD *)(v6 + 8);
          v56 = *(_QWORD *)(v41 + 8);
          if ((v55 & 0x8000000000000) != 0)
          {
            if ((v56 & 0x8000000000000) == 0)
              goto LABEL_105;
            v74 = *(_OWORD *)((v55 & 0xFFFFFFFFFFFFLL) + 4);
            v73 = *(_OWORD *)((v56 & 0xFFFFFFFFFFFFLL) + 4);
            result = WebCore::operator==<float,4ul>((float *)&v74, (float *)&v73);
            v55 = *(_QWORD *)(v6 + 8);
            if (!(_DWORD)result)
              goto LABEL_105;
            v60 = *(_QWORD *)(v41 + 8);
            if (HIBYTE(v55) != HIBYTE(v60) || BYTE6(v55) != BYTE6(v60))
              goto LABEL_105;
          }
          else if (v55 != v56 || (v56 & 0x8000000000000) != 0)
          {
LABEL_105:
            if ((v55 & 0x8000000000000) != 0)
            {
              result = v55 & 0xFFFFFFFFFFFFLL;
              do
              {
                v58 = __ldaxr((unsigned int *)result);
                v59 = v58 - 1;
              }
              while (__stlxr(v59, (unsigned int *)result));
              if (!v59)
              {
                atomic_store(1u, (unsigned int *)result);
                result = WTF::fastFree((WTF *)result, v39);
              }
            }
            *(_QWORD *)(v6 + 8) = *(_QWORD *)(v41 + 8);
            *(_QWORD *)(v41 + 8) = 0;
          }
          v41 += 16;
          v6 += 16;
          if (v41 == v38)
            goto LABEL_137;
          continue;
        }
      }
      if (*(float *)v40 >= *(float *)v41)
      {
        *(_DWORD *)v6 = *(_DWORD *)v41;
        v46 = *(_QWORD *)(v6 + 8);
        v47 = *(_QWORD *)(v41 + 8);
        if ((v46 & 0x8000000000000) != 0)
        {
          if ((v47 & 0x8000000000000) == 0)
            goto LABEL_76;
          v74 = *(_OWORD *)((v46 & 0xFFFFFFFFFFFFLL) + 4);
          v73 = *(_OWORD *)((v47 & 0xFFFFFFFFFFFFLL) + 4);
          result = WebCore::operator==<float,4ul>((float *)&v74, (float *)&v73);
          v46 = *(_QWORD *)(v6 + 8);
          if (!(_DWORD)result)
            goto LABEL_76;
          v54 = *(_QWORD *)(v41 + 8);
          if (HIBYTE(v46) != HIBYTE(v54) || BYTE6(v46) != BYTE6(v54))
            goto LABEL_76;
        }
        else if (v46 != v47 || (v47 & 0x8000000000000) != 0)
        {
LABEL_76:
          if ((v46 & 0x8000000000000) != 0)
          {
            result = v46 & 0xFFFFFFFFFFFFLL;
            do
            {
              v51 = __ldaxr((unsigned int *)result);
              v52 = v51 - 1;
            }
            while (__stlxr(v52, (unsigned int *)result));
            if (!v52)
            {
              atomic_store(1u, (unsigned int *)result);
              result = WTF::fastFree((WTF *)result, v39);
            }
          }
          *(_QWORD *)(v6 + 8) = *(_QWORD *)(v41 + 8);
          *(_QWORD *)(v41 + 8) = 0;
        }
        v41 += 16;
        goto LABEL_79;
      }
      *(_DWORD *)v6 = *(_DWORD *)v40;
      v43 = *(_QWORD *)(v6 + 8);
      v44 = *(_QWORD *)(v40 + 8);
      if ((v43 & 0x8000000000000) != 0)
      {
        if ((v44 & 0x8000000000000) == 0)
          goto LABEL_68;
        v74 = *(_OWORD *)((v43 & 0xFFFFFFFFFFFFLL) + 4);
        v73 = *(_OWORD *)((v44 & 0xFFFFFFFFFFFFLL) + 4);
        result = WebCore::operator==<float,4ul>((float *)&v74, (float *)&v73);
        v43 = *(_QWORD *)(v6 + 8);
        if (!(_DWORD)result)
          goto LABEL_68;
        v53 = *(_QWORD *)(v40 + 8);
        if (HIBYTE(v43) != HIBYTE(v53) || BYTE6(v43) != BYTE6(v53))
          goto LABEL_68;
      }
      else if (v43 != v44 || (v44 & 0x8000000000000) != 0)
      {
LABEL_68:
        if ((v43 & 0x8000000000000) != 0)
        {
          result = v43 & 0xFFFFFFFFFFFFLL;
          do
          {
            v49 = __ldaxr((unsigned int *)result);
            v50 = v49 - 1;
          }
          while (__stlxr(v50, (unsigned int *)result));
          if (!v50)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, v39);
          }
        }
        *(_QWORD *)(v6 + 8) = *(_QWORD *)(v40 + 8);
        *(_QWORD *)(v40 + 8) = 0;
      }
      v40 += 16;
LABEL_79:
      v6 += 16;
      if (v41 == v38)
      {
        while (v40 != v42)
        {
          *(_DWORD *)v6 = *(_DWORD *)v40;
          v61 = *(_QWORD *)(v6 + 8);
          v62 = *(_QWORD *)(v40 + 8);
          if ((v61 & 0x8000000000000) != 0)
          {
            if ((v62 & 0x8000000000000) == 0)
              goto LABEL_124;
            v74 = *(_OWORD *)((v61 & 0xFFFFFFFFFFFFLL) + 4);
            v73 = *(_OWORD *)((v62 & 0xFFFFFFFFFFFFLL) + 4);
            result = WebCore::operator==<float,4ul>((float *)&v74, (float *)&v73);
            v61 = *(_QWORD *)(v6 + 8);
            if (!(_DWORD)result)
              goto LABEL_124;
            v66 = *(_QWORD *)(v40 + 8);
            if (HIBYTE(v61) != HIBYTE(v66) || BYTE6(v61) != BYTE6(v66))
              goto LABEL_124;
          }
          else if (v61 != v62 || (v62 & 0x8000000000000) != 0)
          {
LABEL_124:
            if ((v61 & 0x8000000000000) != 0)
            {
              result = v61 & 0xFFFFFFFFFFFFLL;
              do
              {
                v64 = __ldaxr((unsigned int *)result);
                v65 = v64 - 1;
              }
              while (__stlxr(v65, (unsigned int *)result));
              if (!v65)
              {
                atomic_store(1u, (unsigned int *)result);
                result = WTF::fastFree((WTF *)result, v39);
              }
            }
            *(_QWORD *)(v6 + 8) = *(_QWORD *)(v40 + 8);
            *(_QWORD *)(v40 + 8) = 0;
          }
          v40 += 16;
          v6 += 16;
        }
LABEL_137:
        if (v13)
        {
          v67 = 0;
          do
          {
            v68 = *(_QWORD *)(v13 + 8);
            if ((v68 & 0x8000000000000) != 0)
            {
              result = v68 & 0xFFFFFFFFFFFFLL;
              do
              {
                v69 = __ldaxr((unsigned int *)result);
                v70 = v69 - 1;
              }
              while (__stlxr(v70, (unsigned int *)result));
              if (!v70)
              {
                atomic_store(1u, (unsigned int *)result);
                result = WTF::fastFree((WTF *)result, v39);
              }
            }
            ++v67;
            v13 += 16;
          }
          while (v67 != a3);
        }
        return result;
      }
    }
  }
  if ((float *)result == a2)
    return result;
  v17 = result + 16;
  if ((float *)(result + 16) == a2)
    return result;
  v18 = result;
  do
  {
    v19 = v18;
    v18 = v17;
    v20 = *(float *)(v19 + 16);
    v21 = *(float *)v19;
    if (v20 >= *(float *)v19)
      goto LABEL_47;
    v22 = *(_QWORD *)(v19 + 24);
    if (v22)
      *(_QWORD *)(v19 + 24) = 0;
    v23 = v17;
    while (1)
    {
      v24 = v19;
      *(float *)v23 = v21;
      v25 = *(_QWORD *)(v23 + 8);
      v26 = *(_QWORD *)(v24 + 8);
      if ((v25 & 0x8000000000000) != 0)
      {
        if ((v26 & 0x8000000000000) != 0)
        {
          v72 = v20;
          v74 = *(_OWORD *)((v25 & 0xFFFFFFFFFFFFLL) + 4);
          v73 = *(_OWORD *)((v26 & 0xFFFFFFFFFFFFLL) + 4);
          result = WebCore::operator==<float,4ul>((float *)&v74, (float *)&v73);
          v25 = *(_QWORD *)(v23 + 8);
          if ((_DWORD)result && (v30 = *(_QWORD *)(v24 + 8), HIBYTE(v25) == HIBYTE(v30)))
          {
            v20 = v72;
            if (BYTE6(v25) == BYTE6(v30))
              goto LABEL_28;
          }
          else
          {
            v20 = v72;
          }
        }
      }
      else if (v25 == v26 && (v26 & 0x8000000000000) == 0)
      {
        goto LABEL_28;
      }
      if ((v25 & 0x8000000000000) != 0)
      {
        v71 = v20;
        result = v25 & 0xFFFFFFFFFFFFLL;
        do
        {
          v28 = __ldaxr((unsigned int *)result);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, (unsigned int *)result));
        if (!v29)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, a2);
          v20 = v71;
        }
      }
      *(_QWORD *)(v23 + 8) = *(_QWORD *)(v24 + 8);
      *(_QWORD *)(v24 + 8) = 0;
LABEL_28:
      if (v24 == v6)
        break;
      v19 = v24 - 16;
      v21 = *(float *)(v24 - 16);
      v23 = v24;
      if (v20 >= v21)
      {
        v31 = (float *)v24;
        goto LABEL_42;
      }
    }
    v31 = (float *)v6;
LABEL_42:
    *v31 = v20;
    v32 = *(_QWORD *)(v24 + 8);
    if ((v32 & 0x8000000000000) != 0)
    {
      if ((v22 & 0x8000000000000) != 0
        && (v74 = *(_OWORD *)((v32 & 0xFFFFFFFFFFFFLL) + 4),
            v35 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL),
            v73 = *(_OWORD *)((v22 & 0xFFFFFFFFFFFFLL) + 4),
            result = WebCore::operator==<float,4ul>((float *)&v74, (float *)&v73),
            v32 = *(_QWORD *)(v24 + 8),
            (_DWORD)result)
        && HIBYTE(v32) == HIBYTE(v22)
        && BYTE6(v32) == BYTE6(v22))
      {
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          atomic_store(1u, v35);
          result = WTF::fastFree((WTF *)(v22 & 0xFFFFFFFFFFFFLL), a2);
        }
      }
      else
      {
LABEL_45:
        if ((v32 & 0x8000000000000) != 0)
        {
          result = v32 & 0xFFFFFFFFFFFFLL;
          do
          {
            v33 = __ldaxr((unsigned int *)result);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, (unsigned int *)result));
          if (!v34)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, a2);
          }
        }
        *(_QWORD *)(v24 + 8) = v22;
      }
    }
    else if ((v22 & 0x8000000000000) != 0 || v32 != v22)
    {
      goto LABEL_45;
    }
LABEL_47:
    v17 = v18 + 16;
  }
  while ((float *)(v18 + 16) != a2);
  return result;
}

uint64_t std::__stable_sort_move<std::_RangeAlgPolicy,WebCore::GradientColorStops WebCore::StyleGradientImage::computeStopsForDeprecatedVariants<WebCore::`anonymous namespace'::LinearGradientAdapter,WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WebCore::`anonymous namespace'::LinearGradientAdapter &,WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::RenderStyle const&)::{lambda(WebCore::`anonymous namespace'::LinearGradientAdapter const&,WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} &,WebCore::GradientColorStop *>(uint64_t result, float *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float *v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  float *v22;
  float *v23;
  float v24;
  float v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  unsigned int v29;
  BOOL v30;
  float *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v40;
  unsigned int v41;
  float *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  float *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float *v55;
  float *v56;
  float *v57;
  float *v58;
  __int128 v59;
  __int128 v60;

  if (!a3)
    return result;
  v4 = a4;
  v7 = result;
  if (a3 == 2)
  {
    v10 = *(a2 - 4);
    if (v10 >= *(float *)result)
    {
      *(_DWORD *)a4 = *(_DWORD *)result;
      *(_QWORD *)(a4 + 8) = 0;
      v43 = *(_QWORD *)(result + 8);
      if (v43)
      {
        *(_QWORD *)(a4 + 8) = v43;
        *(_QWORD *)(result + 8) = 0;
      }
      *(_QWORD *)(a4 + 24) = 0;
      v44 = *((_QWORD *)a2 - 1);
      *(float *)(a4 + 16) = *(a2 - 4);
      if (!v44)
        return result;
      *(_QWORD *)(a4 + 24) = v44;
      v9 = a2 - 2;
    }
    else
    {
      *(float *)a4 = v10;
      *(_QWORD *)(a4 + 8) = 0;
      v11 = *((_QWORD *)a2 - 1);
      if (v11)
      {
        *(_QWORD *)(a4 + 8) = v11;
        *((_QWORD *)a2 - 1) = 0;
      }
      *(_DWORD *)(a4 + 16) = *(_DWORD *)result;
      *(_QWORD *)(a4 + 24) = 0;
      v9 = (float *)(result + 8);
      v12 = *(_QWORD *)(result + 8);
      if (!v12)
        return result;
      *(_QWORD *)(a4 + 24) = v12;
    }
LABEL_70:
    *(_QWORD *)v9 = 0;
    return result;
  }
  if (a3 == 1)
  {
    *(_DWORD *)a4 = *(_DWORD *)result;
    *(_QWORD *)(a4 + 8) = 0;
    v9 = (float *)(result + 8);
    v8 = *(_QWORD *)(result + 8);
    if (!v8)
      return result;
    *(_QWORD *)(a4 + 8) = v8;
    goto LABEL_70;
  }
  if ((uint64_t)a3 > 8)
  {
    v45 = result + 16 * (a3 >> 1);
    v46 = (float *)(v7 + 16 * (a3 >> 1));
    while (v46 != a2)
    {
      if (*v46 >= *(float *)v7)
      {
        *(_DWORD *)v4 = *(_DWORD *)v7;
        *(_QWORD *)(v4 + 8) = 0;
        v48 = *(_QWORD *)(v7 + 8);
        if (v48)
        {
          *(_QWORD *)(v4 + 8) = v48;
          *(_QWORD *)(v7 + 8) = 0;
        }
        v7 += 16;
      }
      else
      {
        *(float *)v4 = *v46;
        *(_QWORD *)(v4 + 8) = 0;
        v47 = *((_QWORD *)v46 + 1);
        if (v47)
        {
          *(_QWORD *)(v4 + 8) = v47;
          *((_QWORD *)v46 + 1) = 0;
        }
        v46 += 4;
      }
      v4 += 16;
      if (v7 == v45)
      {
        if (v46 != a2)
        {
          v49 = 0;
          do
          {
            v50 = v4 + v49 * 4;
            *(float *)v50 = v46[v49];
            *(_QWORD *)(v50 + 8) = 0;
            v51 = *(_QWORD *)&v46[v49 + 2];
            if (v51)
            {
              *(_QWORD *)(v50 + 8) = v51;
              *(_QWORD *)&v46[v49 + 2] = 0;
            }
            v49 += 4;
          }
          while (&v46[v49] != a2);
        }
        return result;
      }
    }
    if (v7 != v45)
    {
      v52 = 0;
      do
      {
        v53 = v4 + v52;
        *(_DWORD *)v53 = *(_DWORD *)(v7 + v52);
        *(_QWORD *)(v53 + 8) = 0;
        v54 = *(_QWORD *)(v7 + v52 + 8);
        if (v54)
        {
          *(_QWORD *)(v53 + 8) = v54;
          *(_QWORD *)(v7 + v52 + 8) = 0;
        }
        v52 += 16;
      }
      while (v7 + v52 != v45);
    }
  }
  else if ((float *)result != a2)
  {
    *(_DWORD *)a4 = *(_DWORD *)result;
    *(_QWORD *)(a4 + 8) = 0;
    v13 = *(_QWORD *)(result + 8);
    if (v13)
    {
      *(_QWORD *)(a4 + 8) = v13;
      *(_QWORD *)(result + 8) = 0;
    }
    v14 = result + 16;
    if ((float *)(result + 16) != a2)
    {
      v15 = (float *)a4;
      v16 = (float *)a4;
      while (1)
      {
        v17 = v7;
        v7 = v14;
        v18 = *v16;
        v16 += 4;
        v19 = v18;
        v20 = *(float *)(v17 + 16);
        if (v20 < v18)
          break;
        v15[4] = v20;
        *((_QWORD *)v15 + 3) = 0;
        v35 = *(_QWORD *)(v17 + 24);
        v34 = (_QWORD *)(v17 + 24);
        v33 = v35;
        if (v35)
        {
          *((_QWORD *)v15 + 3) = v33;
LABEL_54:
          *v34 = 0;
        }
LABEL_55:
        v14 = v7 + 16;
        v15 = v16;
        if ((float *)(v7 + 16) == a2)
          return result;
      }
      v15[4] = v19;
      *((_QWORD *)v15 + 3) = 0;
      v21 = *((_QWORD *)v15 + 1);
      if (v21)
      {
        *((_QWORD *)v15 + 3) = v21;
        *((_QWORD *)v15 + 1) = 0;
      }
      v22 = (float *)v4;
      if (v15 != (float *)v4)
      {
        v23 = v15;
        while (1)
        {
          v24 = *(v23 - 4);
          v23 -= 4;
          v25 = v24;
          if (*(float *)v7 >= v24)
          {
            v22 = v15;
            break;
          }
          *v15 = v25;
          v26 = *((_QWORD *)v15 + 1);
          v27 = *((_QWORD *)v15 - 1);
          if ((v26 & 0x8000000000000) != 0)
          {
            if ((v27 & 0x8000000000000) == 0)
              goto LABEL_28;
            v57 = v23;
            v60 = *(_OWORD *)((v26 & 0xFFFFFFFFFFFFLL) + 4);
            v59 = *(_OWORD *)((v27 & 0xFFFFFFFFFFFFLL) + 4);
            v31 = v15;
            result = WebCore::operator==<float,4ul>((float *)&v60, (float *)&v59);
            v15 = v31;
            v26 = *((_QWORD *)v31 + 1);
            if (!(_DWORD)result || (v32 = *((_QWORD *)v31 - 1), HIBYTE(v26) != HIBYTE(v32)))
            {
              v23 = v57;
LABEL_28:
              if ((v26 & 0x8000000000000) != 0)
              {
                v55 = v15;
                v56 = v23;
                result = v26 & 0xFFFFFFFFFFFFLL;
                do
                {
                  v29 = __ldaxr((unsigned int *)result);
                  v30 = --v29 == 0;
                }
                while (__stlxr(v29, (unsigned int *)result));
                v15 = v55;
                if (v30)
                {
                  atomic_store(1u, (unsigned int *)result);
                  result = WTF::fastFree((WTF *)result, a2);
                  v15 = v55;
                  v23 = v56;
                }
              }
              *((_QWORD *)v15 + 1) = *((_QWORD *)v15 - 1);
              *((_QWORD *)v15 - 1) = 0;
              goto LABEL_30;
            }
            v28 = BYTE6(v26) == BYTE6(v32);
            v23 = v57;
            if (!v28)
              goto LABEL_28;
          }
          else
          {
            v28 = v26 == v27 && (v27 & 0x8000000000000) == 0;
            if (!v28)
              goto LABEL_28;
          }
LABEL_30:
          v15 = v23;
          if (v23 == (float *)v4)
          {
            v22 = (float *)v4;
            break;
          }
        }
      }
      *v22 = *(float *)v7;
      v37 = *(_QWORD *)(v17 + 24);
      v34 = (_QWORD *)(v17 + 24);
      v36 = v37;
      v38 = *((_QWORD *)v22 + 1);
      if ((v38 & 0x8000000000000) != 0)
      {
        if ((v36 & 0x8000000000000) != 0)
        {
          v60 = *(_OWORD *)((v38 & 0xFFFFFFFFFFFFLL) + 4);
          v59 = *(_OWORD *)((v36 & 0xFFFFFFFFFFFFLL) + 4);
          v42 = v22;
          result = WebCore::operator==<float,4ul>((float *)&v60, (float *)&v59);
          v22 = v42;
          v38 = *((_QWORD *)v42 + 1);
          if ((_DWORD)result)
          {
            if (HIBYTE(v38) == HIBYTE(*v34) && BYTE6(v38) == BYTE6(*v34))
              goto LABEL_55;
          }
        }
      }
      else if (v38 == v36 && (v36 & 0x8000000000000) == 0)
      {
        goto LABEL_55;
      }
      if ((v38 & 0x8000000000000) != 0)
      {
        v58 = v22;
        result = v38 & 0xFFFFFFFFFFFFLL;
        do
        {
          v40 = __ldaxr((unsigned int *)result);
          v41 = v40 - 1;
        }
        while (__stlxr(v41, (unsigned int *)result));
        if (!v41)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, a2);
          v22 = v58;
        }
      }
      *((_QWORD *)v22 + 1) = *v34;
      goto LABEL_54;
    }
  }
  return result;
}

uint64_t std::__inplace_merge<std::_RangeAlgPolicy,WebCore::GradientColorStops WebCore::StyleGradientImage::computeStopsForDeprecatedVariants<WebCore::`anonymous namespace'::LinearGradientAdapter,WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WebCore::`anonymous namespace'::LinearGradientAdapter &,WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::RenderStyle const&)::{lambda(WebCore::`anonymous namespace'::LinearGradientAdapter const&,WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} &,WebCore::GradientColorStop *>(uint64_t result, float *a2, float *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  float *v19;
  unint64_t v20;
  float *v21;
  unint64_t v22;
  float *v23;
  float *v24;
  float v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  float *v29;
  float *v30;
  float v31;
  float *v32;
  float *v33;
  float *i;
  uint64_t v35;
  int v36;
  uint64_t v37;
  float *v38;
  float *v39;
  uint64_t v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  float *v44;
  float *v45;
  uint64_t v46;
  float *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float *v53;
  float v54;
  float v55;
  BOOL v56;
  float *v57;
  float *v58;
  unint64_t v59;
  uint64_t v60;
  BOOL v61;
  float *v62;
  uint64_t v63;
  uint64_t v64;
  float *v65;
  unsigned int *v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  float *v71;
  float *v72;
  _BOOL4 v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v84;
  uint64_t v85;
  float *v87;
  uint64_t v88;
  uint64_t v89;
  float *v90;
  unsigned int *v91;
  unsigned int v92;
  unsigned int v93;
  float *v94;
  uint64_t v95;
  uint64_t v96;
  float *v97;
  unsigned int *v98;
  unsigned int v99;
  unsigned int v100;
  float *v101;
  uint64_t v102;
  float *v103;
  uint64_t v104;
  _BOOL4 v105;
  unint64_t v106;
  float *v107;
  uint64_t v108;
  float *v109;
  uint64_t v110;
  _BOOL4 v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  float *v116;
  float *v117;
  int v118;
  unint64_t v119;
  uint64_t v120;
  float *v122;
  uint64_t v123;
  unsigned int v124;
  unsigned int v125;
  uint64_t v126;
  float *v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v132;
  uint64_t v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  _BOOL4 v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unsigned int v144;
  unsigned int v145;
  __int128 v146;
  __int128 v147;

  if (!a5)
    return result;
  while (a4 > a7 && a5 > a7)
  {
    if (!a4)
      return result;
    v9 = 0;
    v10 = *a2;
    v11 = -a4;
    while (1)
    {
      v12 = *(float *)(result + v9);
      if (v10 < v12)
        break;
      v9 += 16;
      if (__CFADD__(v11++, 1))
        return result;
    }
    v14 = -v11;
    v15 = (float *)(result + v9);
    if (-v11 >= a5)
    {
      if (v11 == -1)
      {
        v113 = result + v9;
        v114 = *(_QWORD *)(result + v9 + 8);
        if (v114)
          *(_QWORD *)(v113 + 8) = 0;
        *(float *)(result + v9) = v10;
        v115 = *((_QWORD *)a2 + 1);
        if (v115)
        {
          *(_QWORD *)(v113 + 8) = v115;
          *((_QWORD *)a2 + 1) = 0;
        }
        *a2 = v12;
        if (v114)
          *((_QWORD *)a2 + 1) = v114;
        return result;
      }
      if (v11 > 0)
        v14 = 1 - v11;
      v26 = v14 >> 1;
      v21 = (float *)(result + 16 * (v14 >> 1) + v9);
      if (a3 == a2)
      {
        v18 = a3;
        v32 = a3;
      }
      else
      {
        v27 = ((char *)a3 - (char *)a2) >> 4;
        v18 = a2;
        do
        {
          v28 = v27 >> 1;
          v29 = &v18[4 * (v27 >> 1)];
          v31 = *v29;
          v30 = v29 + 4;
          v27 += ~(v27 >> 1);
          if (v31 < *v21)
            v18 = v30;
          else
            v27 = v28;
        }
        while (v27);
        v32 = a2;
      }
      v17 = ((char *)v18 - (char *)v32) >> 4;
    }
    else
    {
      if (a5 >= 0)
        v16 = a5;
      else
        v16 = a5 + 1;
      v17 = v16 >> 1;
      v18 = &a2[4 * (v16 >> 1)];
      if (v15 == a2)
      {
        v21 = a2;
        v19 = a2;
      }
      else
      {
        v19 = (float *)(result + v9);
        v20 = ((uint64_t)a2 - result - v9) >> 4;
        v21 = v15;
        do
        {
          v22 = v20 >> 1;
          v23 = &v21[4 * (v20 >> 1)];
          v25 = *v23;
          v24 = v23 + 4;
          v20 += ~(v20 >> 1);
          if (v25 > *v18)
            v20 = v22;
          else
            v21 = v24;
        }
        while (v20);
      }
      v26 = ((char *)v21 - (char *)v19) >> 4;
    }
    v33 = v18;
    if (v21 != a2)
    {
      v33 = v21;
      if (a2 != v18)
      {
        v33 = v21 + 4;
        for (i = a2 + 4; ; i += 4)
        {
          v35 = *((_QWORD *)v33 - 1);
          if (v35)
            *((_QWORD *)v33 - 1) = 0;
          v36 = *((_DWORD *)v33 - 4);
          *(v33 - 4) = *(i - 4);
          v37 = *((_QWORD *)i - 1);
          if (v37)
          {
            *((_QWORD *)v33 - 1) = v37;
            *((_QWORD *)i - 1) = 0;
          }
          *((_DWORD *)i - 4) = v36;
          if (v35)
            *((_QWORD *)i - 1) = v35;
          if (i == v18)
            break;
          if (v33 == a2)
            a2 = i;
          v33 += 4;
        }
        if (v33 == a2)
        {
          v33 = a2;
        }
        else
        {
          v38 = v33;
          v39 = a2;
          do
          {
            while (1)
            {
              v40 = *((_QWORD *)v38 + 1);
              if (v40)
                *((_QWORD *)v38 + 1) = 0;
              v41 = *v38;
              *v38 = *a2;
              v42 = *((_QWORD *)a2 + 1);
              if (v42)
              {
                *((_QWORD *)v38 + 1) = v42;
                *((_QWORD *)a2 + 1) = 0;
              }
              *a2 = v41;
              if (v40)
                *((_QWORD *)a2 + 1) = v40;
              v38 += 4;
              a2 += 4;
              if (a2 == v18)
                break;
              if (v38 == v39)
                v39 = a2;
            }
            a2 = v39;
          }
          while (v38 != v39);
        }
      }
    }
    a4 = -(v26 + v11);
    v43 = a5 - v17;
    if (v26 + v17 >= a5 - (v26 + v17) - v11)
    {
      v47 = v18;
      v46 = a6;
      v48 = (uint64_t)v15;
      result = v48;
      v18 = v21;
      v43 = v17;
      a4 = v26;
      a3 = v33;
    }
    else
    {
      v44 = v21;
      v45 = a3;
      v46 = a6;
      a3 = v45;
      result = (uint64_t)v33;
    }
    a5 = v43;
    a2 = v18;
    a6 = v46;
    if (!v43)
      return result;
  }
  if (a4 <= a5)
  {
    if ((float *)result == a2)
      return result;
    v75 = 0;
    v50 = 0;
    do
    {
      v76 = a6 + v75;
      *(_DWORD *)v76 = *(_DWORD *)(result + v75);
      *(_QWORD *)(v76 + 8) = 0;
      v77 = *(_QWORD *)(result + v75 + 8);
      if (v77)
      {
        *(_QWORD *)(v76 + 8) = v77;
        *(_QWORD *)(result + v75 + 8) = 0;
      }
      ++v50;
      v75 += 16;
    }
    while ((float *)(result + v75) != a2);
    if (!v75)
      goto LABEL_197;
    v78 = a6 + v75;
    v79 = a6 + v75 - 16;
    v80 = a6;
    while (a2 != a3)
    {
      if (*a2 >= *(float *)v80)
      {
        *(_DWORD *)result = *(_DWORD *)v80;
        v84 = *(_QWORD *)(result + 8);
        v85 = *(_QWORD *)(v80 + 8);
        if ((v84 & 0x8000000000000) == 0)
        {
          if (v84 != v85 || (v85 & 0x8000000000000) != 0)
            goto LABEL_126;
LABEL_128:
          v80 += 16;
          goto LABEL_129;
        }
        if ((v85 & 0x8000000000000) != 0)
        {
          v107 = a3;
          v108 = a6;
          v109 = a2;
          v147 = *(_OWORD *)((v84 & 0xFFFFFFFFFFFFLL) + 4);
          v146 = *(_OWORD *)((v85 & 0xFFFFFFFFFFFFLL) + 4);
          v110 = result;
          v111 = WebCore::operator==<float,4ul>((float *)&v147, (float *)&v146);
          v84 = *(_QWORD *)(v110 + 8);
          if (v111 && (v112 = *(_QWORD *)(v80 + 8), HIBYTE(v84) == HIBYTE(v112)))
          {
            a2 = v109;
            result = v110;
            a6 = v108;
            a3 = v107;
            if (BYTE6(v84) == BYTE6(v112))
              goto LABEL_128;
          }
          else
          {
            a2 = v109;
            result = v110;
            a6 = v108;
            a3 = v107;
          }
        }
LABEL_126:
        if ((v84 & 0x8000000000000) != 0)
        {
          v94 = a3;
          v95 = a6;
          v96 = result;
          v97 = a2;
          v98 = (unsigned int *)(v84 & 0xFFFFFFFFFFFFLL);
          do
          {
            v99 = __ldaxr(v98);
            v100 = v99 - 1;
          }
          while (__stlxr(v100, v98));
          if (!v100)
          {
            atomic_store(1u, v98);
            WTF::fastFree((WTF *)v98, a2);
            a3 = v94;
            a6 = v95;
            result = v96;
            a2 = v97;
          }
        }
        *(_QWORD *)(result + 8) = *(_QWORD *)(v80 + 8);
        *(_QWORD *)(v80 + 8) = 0;
        goto LABEL_128;
      }
      *(float *)result = *a2;
      v81 = *(_QWORD *)(result + 8);
      v82 = *((_QWORD *)a2 + 1);
      if ((v81 & 0x8000000000000) != 0)
      {
        if ((v82 & 0x8000000000000) == 0)
          goto LABEL_118;
        v101 = a3;
        v102 = a6;
        v103 = a2;
        v147 = *(_OWORD *)((v81 & 0xFFFFFFFFFFFFLL) + 4);
        v146 = *(_OWORD *)((v82 & 0xFFFFFFFFFFFFLL) + 4);
        v104 = result;
        v105 = WebCore::operator==<float,4ul>((float *)&v147, (float *)&v146);
        v81 = *(_QWORD *)(v104 + 8);
        if (!v105 || (v106 = *((_QWORD *)v103 + 1), HIBYTE(v81) != HIBYTE(v106)))
        {
          a2 = v103;
          result = v104;
          a6 = v102;
          a3 = v101;
LABEL_118:
          if ((v81 & 0x8000000000000) != 0)
          {
            v87 = a3;
            v88 = a6;
            v89 = result;
            v90 = a2;
            v91 = (unsigned int *)(v81 & 0xFFFFFFFFFFFFLL);
            do
            {
              v92 = __ldaxr(v91);
              v93 = v92 - 1;
            }
            while (__stlxr(v93, v91));
            if (!v93)
            {
              atomic_store(1u, v91);
              WTF::fastFree((WTF *)v91, a2);
              a3 = v87;
              a6 = v88;
              result = v89;
              a2 = v90;
            }
          }
          *(_QWORD *)(result + 8) = *((_QWORD *)a2 + 1);
          *((_QWORD *)a2 + 1) = 0;
          goto LABEL_120;
        }
        a2 = v103;
        result = v104;
        a6 = v102;
        a3 = v101;
        if (BYTE6(v81) != BYTE6(v106))
          goto LABEL_118;
      }
      else if (v81 != v82 || (v82 & 0x8000000000000) != 0)
      {
        goto LABEL_118;
      }
LABEL_120:
      a2 += 4;
LABEL_129:
      result += 16;
      if (v78 == v80)
        goto LABEL_197;
    }
    while (1)
    {
      *(_DWORD *)result = *(_DWORD *)v80;
      v129 = *(_QWORD *)(result + 8);
      v130 = *(_QWORD *)(v80 + 8);
      if ((v129 & 0x8000000000000) != 0)
      {
        if ((v130 & 0x8000000000000) == 0)
          goto LABEL_182;
        v137 = a6;
        v147 = *(_OWORD *)((v129 & 0xFFFFFFFFFFFFLL) + 4);
        v146 = *(_OWORD *)((v130 & 0xFFFFFFFFFFFFLL) + 4);
        v138 = result;
        v139 = WebCore::operator==<float,4ul>((float *)&v147, (float *)&v146);
        v129 = *(_QWORD *)(v138 + 8);
        if (!v139 || (v140 = *(_QWORD *)(v80 + 8), HIBYTE(v129) != HIBYTE(v140)))
        {
          result = v138;
          a6 = v137;
LABEL_182:
          if ((v129 & 0x8000000000000) != 0)
          {
            v132 = a6;
            v133 = result;
            v134 = (unsigned int *)(v129 & 0xFFFFFFFFFFFFLL);
            do
            {
              v135 = __ldaxr(v134);
              v136 = v135 - 1;
            }
            while (__stlxr(v136, v134));
            if (!v136)
            {
              atomic_store(1u, v134);
              WTF::fastFree((WTF *)v134, a2);
              a6 = v132;
              result = v133;
            }
          }
          *(_QWORD *)(result + 8) = *(_QWORD *)(v80 + 8);
          *(_QWORD *)(v80 + 8) = 0;
          goto LABEL_184;
        }
        result = v138;
        a6 = v137;
        if (BYTE6(v129) != BYTE6(v140))
          goto LABEL_182;
      }
      else if (v129 != v130 || (v130 & 0x8000000000000) != 0)
      {
        goto LABEL_182;
      }
LABEL_184:
      result += 16;
      v61 = v79 == v80;
      v80 += 16;
      if (v61)
        goto LABEL_197;
    }
  }
  if (a2 == a3)
    return result;
  v49 = 0;
  v50 = 0;
  do
  {
    v51 = a6 + v49 * 4;
    *(float *)v51 = a2[v49];
    *(_QWORD *)(v51 + 8) = 0;
    v52 = *(_QWORD *)&a2[v49 + 2];
    if (v52)
    {
      *(_QWORD *)(v51 + 8) = v52;
      *(_QWORD *)&a2[v49 + 2] = 0;
    }
    ++v50;
    v49 += 4;
  }
  while (&a2[v49] != a3);
  if (v49 * 4)
  {
    v53 = (float *)(a6 + v49 * 4);
    while (a2 != (float *)result)
    {
      v54 = *(a2 - 4);
      v55 = *(v53 - 4);
      v56 = v55 < v54;
      if (v55 >= v54)
        v54 = *(v53 - 4);
      *(a3 - 4) = v54;
      v57 = a3 - 4;
      if (v56)
        v58 = a2;
      else
        v58 = v53;
      if (v56)
        a2 -= 4;
      else
        v53 -= 4;
      v59 = *((_QWORD *)a3 - 1);
      v60 = *((_QWORD *)v58 - 1);
      if ((v59 & 0x8000000000000) != 0)
      {
        if ((v60 & 0x8000000000000) == 0)
          goto LABEL_90;
        v69 = a6;
        v70 = result;
        v71 = a2;
        v147 = *(_OWORD *)((v59 & 0xFFFFFFFFFFFFLL) + 4);
        v146 = *(_OWORD *)((v60 & 0xFFFFFFFFFFFFLL) + 4);
        v72 = a3;
        v73 = WebCore::operator==<float,4ul>((float *)&v147, (float *)&v146);
        a3 = v72;
        v59 = *((_QWORD *)v72 - 1);
        if (!v73 || (v74 = *((_QWORD *)v58 - 1), HIBYTE(v59) != HIBYTE(v74)))
        {
          a2 = v71;
          result = v70;
          a6 = v69;
LABEL_90:
          if ((v59 & 0x8000000000000) != 0)
          {
            v62 = a3;
            v63 = a6;
            v64 = result;
            v65 = a2;
            v66 = (unsigned int *)(v59 & 0xFFFFFFFFFFFFLL);
            do
            {
              v67 = __ldaxr(v66);
              v68 = v67 - 1;
            }
            while (__stlxr(v68, v66));
            if (!v68)
            {
              atomic_store(1u, v66);
              WTF::fastFree((WTF *)v66, a2);
              a3 = v62;
              a6 = v63;
              result = v64;
              a2 = v65;
            }
          }
          *((_QWORD *)a3 - 1) = *((_QWORD *)v58 - 1);
          *((_QWORD *)v58 - 1) = 0;
          goto LABEL_92;
        }
        a2 = v71;
        result = v70;
        a6 = v69;
        if (BYTE6(v59) != BYTE6(v74))
          goto LABEL_90;
      }
      else
      {
        v61 = v59 == v60 && (v60 & 0x8000000000000) == 0;
        if (!v61)
          goto LABEL_90;
      }
LABEL_92:
      a3 = v57;
      if (v53 == (float *)a6)
        goto LABEL_197;
    }
    v116 = v53;
    v117 = a3;
    do
    {
      v118 = *((_DWORD *)v116 - 4);
      v116 -= 4;
      *((_DWORD *)v117 - 4) = v118;
      v117 -= 4;
      v119 = *((_QWORD *)v117 + 1);
      v120 = *((_QWORD *)v116 + 1);
      if ((v119 & 0x8000000000000) != 0)
      {
        if ((v120 & 0x8000000000000) == 0)
          goto LABEL_163;
        v126 = a6;
        v147 = *(_OWORD *)((v119 & 0xFFFFFFFFFFFFLL) + 4);
        v146 = *(_OWORD *)((v120 & 0xFFFFFFFFFFFFLL) + 4);
        v127 = a3;
        result = WebCore::operator==<float,4ul>((float *)&v147, (float *)&v146);
        a3 = v127;
        v119 = *((_QWORD *)v127 - 1);
        if (!(_DWORD)result || (v128 = *((_QWORD *)v53 - 1), HIBYTE(v119) != HIBYTE(v128)))
        {
          a6 = v126;
LABEL_163:
          if ((v119 & 0x8000000000000) != 0)
          {
            v122 = a3;
            v123 = a6;
            result = v119 & 0xFFFFFFFFFFFFLL;
            do
            {
              v124 = __ldaxr((unsigned int *)result);
              v125 = v124 - 1;
            }
            while (__stlxr(v125, (unsigned int *)result));
            if (!v125)
            {
              atomic_store(1u, (unsigned int *)result);
              result = WTF::fastFree((WTF *)result, a2);
              a3 = v122;
              a6 = v123;
            }
          }
          *((_QWORD *)a3 - 1) = *((_QWORD *)v53 - 1);
          *((_QWORD *)v53 - 1) = 0;
          goto LABEL_165;
        }
        a6 = v126;
        if (BYTE6(v119) != BYTE6(v128))
          goto LABEL_163;
      }
      else if (v119 != v120 || (v120 & 0x8000000000000) != 0)
      {
        goto LABEL_163;
      }
LABEL_165:
      a3 = v117;
      v53 = v116;
    }
    while (v116 != (float *)a6);
  }
LABEL_197:
  if (a6)
  {
    v141 = 0;
    do
    {
      v142 = *(_QWORD *)(a6 + 8);
      if ((v142 & 0x8000000000000) != 0)
      {
        v143 = a6;
        result = v142 & 0xFFFFFFFFFFFFLL;
        do
        {
          v144 = __ldaxr((unsigned int *)result);
          v145 = v144 - 1;
        }
        while (__stlxr(v145, (unsigned int *)result));
        if (!v145)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, a2);
          a6 = v143;
        }
      }
      ++v141;
      a6 += 16;
    }
    while (v141 != v50);
  }
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_0,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_1,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_2,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_3,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_4,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_5,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_6,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_7,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_8,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::RadialData::Extent,WebCore::StyleGradientImage::RadialData::Length,WebCore::StyleGradientImage::RadialData::Size,WebCore::StyleGradientImage::RadialData::CircleOfLength,WebCore::StyleGradientImage::RadialData::CircleOfExtent,WebCore::StyleGradientImage::RadialData::EllipseOfSize,WebCore::StyleGradientImage::RadialData::EllipseOfExtent,WebCore::StyleGradientPosition> const&>(float32x2_t ***a1@<X0>, float32x2_t *a2@<X8>)
{
  float *v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  BOOL v13;
  float v14;
  float v16;
  float v17;
  float v18;
  float32_t v19;
  float v20;
  float32x2_t v21;

  v3 = **(float ***)&(*a1)[1][1];
  v4 = *v3;
  v5 = v3[1];
  v21 = vmul_f32(***a1, (float32x2_t)0x3F0000003F000000);
  v6 = hypotf(v21.f32[0], v21.f32[1]);
  v7 = hypotf(v21.f32[0] - v4, v21.f32[1]);
  v8 = hypotf(v21.f32[0], v21.f32[1] - v5);
  v9 = hypotf(v21.f32[0] - v4, v21.f32[1] - v5);
  if (v7 <= v6)
    v10 = v6;
  else
    v10 = v7;
  if (v7 <= v6)
    v11 = 0.0;
  else
    v11 = v4;
  if (v8 <= v10)
    v12 = v10;
  else
    v12 = v8;
  if (v8 > v10)
    v11 = 0.0;
  v13 = v9 <= v12;
  if (v9 <= v12)
    v14 = v11;
  else
    v14 = v4;
  if (v13 && v8 <= v10)
    v16 = 0.0;
  else
    v16 = v5;
  v17 = v4 - v21.f32[0];
  if (v21.f32[0] >= (float)(v4 - v21.f32[0]))
    v17 = v21.f32[0];
  v18 = v5 - v21.f32[1];
  if (v21.f32[1] >= (float)(v5 - v21.f32[1]))
    v18 = v21.f32[1];
  v19 = v17 / v18;
  v20 = hypotf(v14 - v21.f32[0], (float)(v17 / v18) * (float)(v16 - v21.f32[1]));
  *a2 = v21;
  a2[1] = v21;
  a2[2].i32[0] = 0;
  a2[2].f32[1] = v20;
  a2[3].f32[0] = v19;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_0,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_1,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_2,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_3,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_4,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_5,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_6,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_7,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_8,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::RadialData::Extent,WebCore::StyleGradientImage::RadialData::Length,WebCore::StyleGradientImage::RadialData::Size,WebCore::StyleGradientImage::RadialData::CircleOfLength,WebCore::StyleGradientImage::RadialData::CircleOfExtent,WebCore::StyleGradientImage::RadialData::EllipseOfSize,WebCore::StyleGradientImage::RadialData::EllipseOfExtent,WebCore::StyleGradientPosition> const&>(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float *v10;
  int v11;
  int v12;

  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 16);
  if (a2[20])
  {
    v7 = WebCore::computeEndPoint((WebCore::Length *)(a2 + 4), **(float ***)v6);
    v9 = v8;
  }
  else
  {
    v10 = *(float **)(v6 + 8);
    v7 = *v10 * 0.5;
    v9 = v10[1] * 0.5;
  }
  WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)const::$_14::operator()(*(float ****)(v5 + 24), *a2, 2, v7, v9);
  *(float *)a3 = v7;
  *(float *)(a3 + 4) = v9;
  *(float *)(a3 + 8) = v7;
  *(float *)(a3 + 12) = v9;
  *(_DWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 20) = v11;
  *(_DWORD *)(a3 + 24) = v12;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_0,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_1,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_2,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_3,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_4,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_5,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_6,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_7,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_8,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::RadialData::Extent,WebCore::StyleGradientImage::RadialData::Length,WebCore::StyleGradientImage::RadialData::Size,WebCore::StyleGradientImage::RadialData::CircleOfLength,WebCore::StyleGradientImage::RadialData::CircleOfExtent,WebCore::StyleGradientImage::RadialData::EllipseOfSize,WebCore::StyleGradientImage::RadialData::EllipseOfExtent,WebCore::StyleGradientPosition> const&>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float *v10;
  int v11;
  int v12;

  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 32);
  if (a2[20])
  {
    v7 = WebCore::computeEndPoint((WebCore::Length *)(a2 + 4), **(float ***)v6);
    v9 = v8;
  }
  else
  {
    v10 = *(float **)(v6 + 8);
    v7 = *v10 * 0.5;
    v9 = v10[1] * 0.5;
  }
  WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)const::$_14::operator()(*(float ****)(v5 + 40), 1, *a2, v7, v9);
  *(float *)a3 = v7;
  *(float *)(a3 + 4) = v9;
  *(float *)(a3 + 8) = v7;
  *(float *)(a3 + 12) = v9;
  *(_DWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 20) = v11;
  *(_DWORD *)(a3 + 24) = v12;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_0,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_1,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_2,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_3,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_4,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_5,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_6,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_7,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_8,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::RadialData::Extent,WebCore::StyleGradientImage::RadialData::Length,WebCore::StyleGradientImage::RadialData::Size,WebCore::StyleGradientImage::RadialData::CircleOfLength,WebCore::StyleGradientImage::RadialData::CircleOfExtent,WebCore::StyleGradientImage::RadialData::EllipseOfSize,WebCore::StyleGradientImage::RadialData::EllipseOfExtent,WebCore::StyleGradientPosition> const&>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  float v9;
  int v10;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  BOOL v15;
  uint64_t v16;

  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 48);
  if (a2[24])
  {
    LODWORD(v8) = WebCore::computeEndPoint((WebCore::Length *)(a2 + 8), **(float ***)v6);
    DWORD1(v8) = v7;
  }
  else
  {
    *(float32x2_t *)&v8 = vmul_f32(**(float32x2_t **)(v6 + 8), (float32x2_t)0x3F0000003F000000);
  }
  v9 = **(float **)(v5 + 56);
  v10 = a2[4];
  if (v10 == 3)
  {
    v12 = *(float *)a2;
    if (!a2[6])
      v12 = (float)*(int *)a2;
    v11 = v9 * (float)(v12 / 100.0);
  }
  else
  {
    v11 = 0.0;
    if (v10 == 11)
    {
      v16 = v8;
      v13 = WebCore::Length::calculationValue((WebCore::Length *)a2);
      (*(void (**)(_QWORD, float))(**(_QWORD **)(v13 + 8) + 16))(*(_QWORD *)(v13 + 8), v9);
      *(_QWORD *)&v8 = v16;
      if (*(_BYTE *)(v13 + 16))
        v15 = v14 < 0.0;
      else
        v15 = 0;
      if (v15)
        v11 = 0.0;
      else
        v11 = v14;
    }
    else if (v10 == 4)
    {
      if (a2[6])
        v11 = *(float *)a2;
      else
        v11 = (float)*(int *)a2;
    }
  }
  *((_QWORD *)&v8 + 1) = v8;
  *(_OWORD *)a3 = v8;
  *(_DWORD *)(a3 + 16) = 0;
  *(float *)(a3 + 20) = v11;
  *(_DWORD *)(a3 + 24) = 1065353216;
}

float std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_0,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_1,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_2,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_3,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_4,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_5,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_6,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_7,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_8,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::RadialData::Extent,WebCore::StyleGradientImage::RadialData::Length,WebCore::StyleGradientImage::RadialData::Size,WebCore::StyleGradientImage::RadialData::CircleOfLength,WebCore::StyleGradientImage::RadialData::CircleOfExtent,WebCore::StyleGradientImage::RadialData::EllipseOfSize,WebCore::StyleGradientImage::RadialData::EllipseOfExtent,WebCore::StyleGradientPosition> const&>@<S0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  float *v9;
  float v10;
  int v11;
  float v12;
  float v13;
  uint64_t v14;
  float v15;
  BOOL v16;
  float v17;
  int v18;
  WebCore::Length *v19;
  float v20;
  float v21;
  uint64_t v22;
  float v23;
  BOOL v24;
  float result;
  uint64_t v26;
  uint64_t v27;

  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 96);
  if (*(_BYTE *)(a2 + 32))
  {
    LODWORD(v8) = WebCore::computeEndPoint((WebCore::Length *)(a2 + 16), **(float ***)v6);
    DWORD1(v8) = v7;
  }
  else
  {
    *(float32x2_t *)&v8 = vmul_f32(**(float32x2_t **)(v6 + 8), (float32x2_t)0x3F0000003F000000);
  }
  v9 = *(float **)(v5 + 104);
  v10 = *v9;
  v11 = *(unsigned __int8 *)(a2 + 4);
  if (v11 == 3)
  {
    v13 = *(float *)a2;
    if (!*(_BYTE *)(a2 + 6))
      v13 = (float)*(int *)a2;
    v12 = v10 * (float)(v13 / 100.0);
  }
  else if (v11 == 11)
  {
    v26 = v8;
    v14 = WebCore::Length::calculationValue((WebCore::Length *)a2);
    (*(void (**)(_QWORD, float))(**(_QWORD **)(v14 + 8) + 16))(*(_QWORD *)(v14 + 8), v10);
    if (*(_BYTE *)(v14 + 16))
      v16 = v15 < 0.0;
    else
      v16 = 0;
    if (v16)
      v12 = 0.0;
    else
      v12 = v15;
    v9 = *(float **)(v5 + 104);
    *(_QWORD *)&v8 = v26;
  }
  else
  {
    v12 = 0.0;
    if (v11 == 4)
    {
      if (*(_BYTE *)(a2 + 6))
        v12 = *(float *)a2;
      else
        v12 = (float)*(int *)a2;
    }
  }
  v17 = v9[1];
  v18 = *(unsigned __int8 *)(a2 + 12);
  if (v18 == 3)
  {
    v21 = *(float *)(a2 + 8);
    if (!*(_BYTE *)(a2 + 14))
      v21 = (float)SLODWORD(v21);
    v20 = v17 * (float)(v21 / 100.0);
  }
  else
  {
    v19 = (WebCore::Length *)(a2 + 8);
    v20 = 0.0;
    if (v18 == 11)
    {
      v27 = v8;
      v22 = WebCore::Length::calculationValue(v19);
      (*(void (**)(_QWORD, float))(**(_QWORD **)(v22 + 8) + 16))(*(_QWORD *)(v22 + 8), v17);
      *(_QWORD *)&v8 = v27;
      if (*(_BYTE *)(v22 + 16))
        v24 = v23 < 0.0;
      else
        v24 = 0;
      if (v24)
        v20 = 0.0;
      else
        v20 = v23;
    }
    else if (v18 == 4)
    {
      if (*(_BYTE *)(a2 + 14))
        v20 = *(float *)v19;
      else
        v20 = (float)*(int *)v19;
    }
  }
  *((_QWORD *)&v8 + 1) = v8;
  *(_OWORD *)a3 = v8;
  *(_DWORD *)(a3 + 16) = 0;
  result = v12 / v20;
  *(float *)(a3 + 20) = v12;
  *(float *)(a3 + 24) = v12 / v20;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_0,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_1,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_2,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_3,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_4,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_5,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_6,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_7,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_8,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::RadialData::Extent,WebCore::StyleGradientImage::RadialData::Length,WebCore::StyleGradientImage::RadialData::Size,WebCore::StyleGradientImage::RadialData::CircleOfLength,WebCore::StyleGradientImage::RadialData::CircleOfExtent,WebCore::StyleGradientImage::RadialData::EllipseOfSize,WebCore::StyleGradientImage::RadialData::EllipseOfExtent,WebCore::StyleGradientPosition> const&>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  float v9;
  int v10;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  BOOL v15;
  uint64_t v16;

  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 64);
  if (a2[24])
  {
    LODWORD(v8) = WebCore::computeEndPoint((WebCore::Length *)(a2 + 8), **(float ***)v6);
    DWORD1(v8) = v7;
  }
  else
  {
    *(float32x2_t *)&v8 = vmul_f32(**(float32x2_t **)(v6 + 8), (float32x2_t)0x3F0000003F000000);
  }
  v9 = **(float **)(v5 + 72);
  v10 = a2[4];
  if (v10 == 3)
  {
    v12 = *(float *)a2;
    if (!a2[6])
      v12 = (float)*(int *)a2;
    v11 = v9 * (float)(v12 / 100.0);
  }
  else
  {
    v11 = 0.0;
    if (v10 == 11)
    {
      v16 = v8;
      v13 = WebCore::Length::calculationValue((WebCore::Length *)a2);
      (*(void (**)(_QWORD, float))(**(_QWORD **)(v13 + 8) + 16))(*(_QWORD *)(v13 + 8), v9);
      *(_QWORD *)&v8 = v16;
      if (*(_BYTE *)(v13 + 16))
        v15 = v14 < 0.0;
      else
        v15 = 0;
      if (v15)
        v11 = 0.0;
      else
        v11 = v14;
    }
    else if (v10 == 4)
    {
      if (a2[6])
        v11 = *(float *)a2;
      else
        v11 = (float)*(int *)a2;
    }
  }
  *((_QWORD *)&v8 + 1) = v8;
  *(_OWORD *)a3 = v8;
  *(_DWORD *)(a3 + 16) = 0;
  *(float *)(a3 + 20) = v11;
  *(_DWORD *)(a3 + 24) = 1065353216;
}

void std::__variant_detail::__visitation::__base::__dispatcher<6ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_0,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_1,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_2,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_3,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_4,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_5,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_6,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_7,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_8,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::RadialData::Extent,WebCore::StyleGradientImage::RadialData::Length,WebCore::StyleGradientImage::RadialData::Size,WebCore::StyleGradientImage::RadialData::CircleOfLength,WebCore::StyleGradientImage::RadialData::CircleOfExtent,WebCore::StyleGradientImage::RadialData::EllipseOfSize,WebCore::StyleGradientImage::RadialData::EllipseOfExtent,WebCore::StyleGradientPosition> const&>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float *v10;
  int v11;

  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 80);
  if (a2[20])
  {
    v7 = WebCore::computeEndPoint((WebCore::Length *)(a2 + 4), **(float ***)v6);
    v9 = v8;
  }
  else
  {
    v10 = *(float **)(v6 + 8);
    v7 = *v10 * 0.5;
    v9 = v10[1] * 0.5;
  }
  WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)const::$_14::operator()(*(float ****)(v5 + 88), 0, *a2, v7, v9);
  *(float *)a3 = v7;
  *(float *)(a3 + 4) = v9;
  *(float *)(a3 + 8) = v7;
  *(float *)(a3 + 12) = v9;
  *(_DWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 20) = v11;
  *(_DWORD *)(a3 + 24) = 1065353216;
}

float std::__variant_detail::__visitation::__base::__dispatcher<7ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_0,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_1,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_2,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_3,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_4,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_5,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_6,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_7,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_8,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::RadialData::Extent,WebCore::StyleGradientImage::RadialData::Length,WebCore::StyleGradientImage::RadialData::Size,WebCore::StyleGradientImage::RadialData::CircleOfLength,WebCore::StyleGradientImage::RadialData::CircleOfExtent,WebCore::StyleGradientImage::RadialData::EllipseOfSize,WebCore::StyleGradientImage::RadialData::EllipseOfExtent,WebCore::StyleGradientPosition> const&>@<S0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  float *v9;
  float v10;
  int v11;
  float v12;
  float v13;
  uint64_t v14;
  float v15;
  BOOL v16;
  float v17;
  int v18;
  WebCore::Length *v19;
  float v20;
  float v21;
  uint64_t v22;
  float v23;
  BOOL v24;
  float result;
  uint64_t v26;
  uint64_t v27;

  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 112);
  if (*(_BYTE *)(a2 + 32))
  {
    LODWORD(v8) = WebCore::computeEndPoint((WebCore::Length *)(a2 + 16), **(float ***)v6);
    DWORD1(v8) = v7;
  }
  else
  {
    *(float32x2_t *)&v8 = vmul_f32(**(float32x2_t **)(v6 + 8), (float32x2_t)0x3F0000003F000000);
  }
  v9 = *(float **)(v5 + 120);
  v10 = *v9;
  v11 = *(unsigned __int8 *)(a2 + 4);
  if (v11 == 3)
  {
    v13 = *(float *)a2;
    if (!*(_BYTE *)(a2 + 6))
      v13 = (float)*(int *)a2;
    v12 = v10 * (float)(v13 / 100.0);
  }
  else if (v11 == 11)
  {
    v26 = v8;
    v14 = WebCore::Length::calculationValue((WebCore::Length *)a2);
    (*(void (**)(_QWORD, float))(**(_QWORD **)(v14 + 8) + 16))(*(_QWORD *)(v14 + 8), v10);
    if (*(_BYTE *)(v14 + 16))
      v16 = v15 < 0.0;
    else
      v16 = 0;
    if (v16)
      v12 = 0.0;
    else
      v12 = v15;
    v9 = *(float **)(v5 + 120);
    *(_QWORD *)&v8 = v26;
  }
  else
  {
    v12 = 0.0;
    if (v11 == 4)
    {
      if (*(_BYTE *)(a2 + 6))
        v12 = *(float *)a2;
      else
        v12 = (float)*(int *)a2;
    }
  }
  v17 = v9[1];
  v18 = *(unsigned __int8 *)(a2 + 12);
  if (v18 == 3)
  {
    v21 = *(float *)(a2 + 8);
    if (!*(_BYTE *)(a2 + 14))
      v21 = (float)SLODWORD(v21);
    v20 = v17 * (float)(v21 / 100.0);
  }
  else
  {
    v19 = (WebCore::Length *)(a2 + 8);
    v20 = 0.0;
    if (v18 == 11)
    {
      v27 = v8;
      v22 = WebCore::Length::calculationValue(v19);
      (*(void (**)(_QWORD, float))(**(_QWORD **)(v22 + 8) + 16))(*(_QWORD *)(v22 + 8), v17);
      *(_QWORD *)&v8 = v27;
      if (*(_BYTE *)(v22 + 16))
        v24 = v23 < 0.0;
      else
        v24 = 0;
      if (v24)
        v20 = 0.0;
      else
        v20 = v23;
    }
    else if (v18 == 4)
    {
      if (*(_BYTE *)(a2 + 14))
        v20 = *(float *)v19;
      else
        v20 = (float)*(int *)v19;
    }
  }
  *((_QWORD *)&v8 + 1) = v8;
  *(_OWORD *)a3 = v8;
  *(_DWORD *)(a3 + 16) = 0;
  result = v12 / v20;
  *(float *)(a3 + 20) = v12;
  *(float *)(a3 + 24) = v12 / v20;
  return result;
}

void std::__variant_detail::__visitation::__base::__dispatcher<8ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_0,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_1,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_2,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_3,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_4,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_5,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_6,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_7,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_8,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::RadialData::Extent,WebCore::StyleGradientImage::RadialData::Length,WebCore::StyleGradientImage::RadialData::Size,WebCore::StyleGradientImage::RadialData::CircleOfLength,WebCore::StyleGradientImage::RadialData::CircleOfExtent,WebCore::StyleGradientImage::RadialData::EllipseOfSize,WebCore::StyleGradientImage::RadialData::EllipseOfExtent,WebCore::StyleGradientPosition> const&>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float *v10;
  int v11;

  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 128);
  if (a2[20])
  {
    v7 = WebCore::computeEndPoint((WebCore::Length *)(a2 + 4), **(float ***)v6);
    v9 = v8;
  }
  else
  {
    v10 = *(float **)(v6 + 8);
    v7 = *v10 * 0.5;
    v9 = v10[1] * 0.5;
  }
  WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)const::$_14::operator()(*(float ****)(v5 + 136), 1, *a2, v7, v9);
  *(float *)a3 = v7;
  *(float *)(a3 + 4) = v9;
  *(float *)(a3 + 8) = v7;
  *(float *)(a3 + 12) = v9;
  *(_DWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 20) = v11;
  *(_DWORD *)(a3 + 24) = 1065353216;
}

void std::__variant_detail::__visitation::__base::__dispatcher<9ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_0,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_1,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_2,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_3,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_4,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_5,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_6,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_7,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_8,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_9>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::StyleGradientImage::RadialData::Shape,WebCore::StyleGradientImage::RadialData::Extent,WebCore::StyleGradientImage::RadialData::Length,WebCore::StyleGradientImage::RadialData::Size,WebCore::StyleGradientImage::RadialData::CircleOfLength,WebCore::StyleGradientImage::RadialData::CircleOfExtent,WebCore::StyleGradientImage::RadialData::EllipseOfSize,WebCore::StyleGradientImage::RadialData::EllipseOfExtent,WebCore::StyleGradientPosition> const&>(WebCore::Length *this@<X1>, uint64_t *a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v4;
  float v5;
  float v6;
  float v7;
  float *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  BOOL v19;
  float v20;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;

  v4 = *a2;
  v5 = WebCore::computeEndPoint(this, **(float ***)(*a2 + 144));
  v7 = v6;
  v8 = **(float ***)(*(_QWORD *)(v4 + 152) + 8);
  v10 = *v8;
  v9 = v8[1];
  v27 = v9;
  v11 = hypotf(v5, v6);
  v12 = hypotf(v5 - v10, v7);
  v13 = v7 - v9;
  v14 = hypotf(v5, v13);
  v15 = hypotf(v5 - v10, v13);
  if (v12 <= v11)
    v16 = v11;
  else
    v16 = v12;
  if (v12 <= v11)
    v17 = 0.0;
  else
    v17 = v10;
  if (v14 <= v16)
    v18 = v16;
  else
    v18 = v14;
  if (v14 > v16)
    v17 = 0.0;
  v19 = v15 <= v18;
  if (v15 <= v18)
    v20 = v17;
  else
    v20 = v10;
  if (v19 && v14 <= v16)
    v22 = 0.0;
  else
    v22 = v27;
  v23 = v10 - v5;
  if (v5 >= (float)(v10 - v5))
    v23 = v5;
  v24 = v27 - v7;
  if (v7 >= (float)(v27 - v7))
    v24 = v7;
  v25 = v23 / v24;
  v26 = hypotf(v20 - v5, (float)(v23 / v24) * (float)(v22 - v7));
  *(float *)a3 = v5;
  *(float *)(a3 + 4) = v7;
  *(float *)(a3 + 8) = v5;
  *(float *)(a3 + 12) = v7;
  *(_DWORD *)(a3 + 16) = 0;
  *(float *)(a3 + 20) = v26;
  *(float *)(a3 + 24) = v25;
}

void WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::RadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)const::$_14::operator()(float ***a1, char a2, int a3, float a4, float a5)
{
  float **v7;
  float *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  BOOL v19;
  float v20;
  float v22;
  float v23;
  float v24;
  BOOL v25;
  float *v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float *v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  BOOL v42;
  float v44;
  float v45;

  if ((a2 & 1) != 0)
  {
    v7 = a1[1];
    switch(a3)
    {
      case 0:
        v8 = *v7;
        v10 = *v8;
        v9 = v8[1];
        v44 = v9;
        v11 = hypotf(a4, a5);
        v12 = hypotf(a4 - v10, a5);
        v13 = a5 - v9;
        v14 = hypotf(a4, v13);
        v15 = hypotf(a4 - v10, v13);
        if (v12 >= v11)
          v16 = v11;
        else
          v16 = v12;
        if (v12 >= v11)
          v17 = 0.0;
        else
          v17 = v10;
        if (v14 >= v16)
          v18 = v16;
        else
          v18 = v14;
        if (v14 < v16)
          v17 = 0.0;
        v19 = v15 < v18;
        if (v15 >= v18)
          v20 = v17;
        else
          v20 = v10;
        if (v19 || v14 < v16)
          v22 = v44;
        else
          v22 = 0.0;
        v23 = v10 - a4;
        if ((float)(v10 - a4) >= a4)
          v23 = a4;
        v24 = v44 - a5;
        v25 = (float)(v44 - a5) < a5;
        goto LABEL_51;
      case 1:
      case 3:
        return;
      case 2:
        v31 = *v7;
        v33 = *v31;
        v32 = v31[1];
        v45 = v32;
        v34 = hypotf(a4, a5);
        v35 = hypotf(a4 - v33, a5);
        v36 = a5 - v32;
        v37 = hypotf(a4, v36);
        v38 = hypotf(a4 - v33, v36);
        if (v35 <= v34)
          v39 = v34;
        else
          v39 = v35;
        if (v35 <= v34)
          v40 = 0.0;
        else
          v40 = v33;
        if (v37 <= v39)
          v41 = v39;
        else
          v41 = v37;
        if (v37 > v39)
          v40 = 0.0;
        v42 = v38 <= v41;
        if (v38 <= v41)
          v20 = v40;
        else
          v20 = v33;
        if (v42 && v37 <= v39)
          v22 = 0.0;
        else
          v22 = v45;
        v23 = v33 - a4;
        if (a4 >= (float)(v33 - a4))
          v23 = a4;
        v24 = v45 - a5;
        v25 = a5 < (float)(v45 - a5);
LABEL_51:
        if (!v25)
          v24 = a5;
        hypotf(v20 - a4, (float)(v23 / v24) * (float)(v22 - a5));
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x1964FBDBCLL);
    }
  }
  else
  {
    switch(a3)
    {
      case 0:
      case 2:
        v26 = **a1;
        v27 = *v26;
        v28 = v26[1];
        hypotf(a4, a5);
        v29 = a4 - v27;
        hypotf(v29, a5);
        v30 = a5 - v28;
        hypotf(a4, v30);
        hypotf(v29, v30);
        break;
      case 1:
      case 3:
        return;
      default:
        __break(0xC471u);
        JUMPOUT(0x1964FBDDCLL);
    }
  }
}

void std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_0,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_1,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_2,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_3,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,std::monostate::ExtentKeyword,std::monostate::ShapeAndExtent,WebCore::StyleGradientImage::PrefixedRadialData::MeasuredSize> const&>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  float *v3;
  float *v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  BOOL v17;
  float v18;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  float v27;

  v3 = *(float **)(*(_QWORD *)a1 + 8);
  v4 = **(float ***)(**(_QWORD **)a1 + 8);
  v6 = *v4;
  v5 = v4[1];
  v27 = v5;
  v7 = *v3;
  v8 = v3[1];
  v9 = hypotf(*v3, v8);
  v10 = hypotf(v7 - v6, v8);
  v11 = v8 - v5;
  v12 = hypotf(v7, v11);
  v13 = hypotf(v7 - v6, v11);
  if (v10 <= v9)
    v14 = v9;
  else
    v14 = v10;
  if (v10 <= v9)
    v15 = 0.0;
  else
    v15 = v6;
  if (v12 <= v14)
    v16 = v14;
  else
    v16 = v12;
  if (v12 > v14)
    v15 = 0.0;
  v17 = v13 <= v16;
  if (v13 <= v16)
    v18 = v15;
  else
    v18 = v6;
  if (v17 && v12 <= v14)
    v20 = 0.0;
  else
    v20 = v27;
  v21 = v6 - v7;
  if (v7 >= (float)(v6 - v7))
    v21 = v7;
  v22 = v27 - v8;
  if (v8 >= (float)(v27 - v8))
    v22 = v8;
  v23 = v18 - v7;
  v24 = v21 / v22;
  v25 = hypotf(v23, (float)(v21 / v22) * (float)(v20 - v8));
  v26 = *(_QWORD *)v3;
  *(_QWORD *)a2 = *(_QWORD *)v3;
  *(_QWORD *)(a2 + 8) = v26;
  *(_DWORD *)(a2 + 16) = 0;
  *(float *)(a2 + 20) = v25;
  *(float *)(a2 + 24) = v24;
}

void std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_0,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_1,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_2,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_3,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,std::monostate::ExtentKeyword,std::monostate::ShapeAndExtent,WebCore::StyleGradientImage::PrefixedRadialData::MeasuredSize> const&>(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  v4 = *a1;
  WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)const::$_7::operator()(*(float ****)(*a1 + 16), *a2, 5, **(float **)(v4 + 24), *(float *)(*(_QWORD *)(v4 + 24) + 4));
  v5 = **(_QWORD **)(v4 + 24);
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v5;
  *(_DWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 20) = v6;
  *(_DWORD *)(a3 + 24) = v7;
}

void std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_0,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_1,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_2,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_3,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,std::monostate::ExtentKeyword,std::monostate::ShapeAndExtent,WebCore::StyleGradientImage::PrefixedRadialData::MeasuredSize> const&>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  v4 = *a1;
  WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)const::$_7::operator()(*(float ****)(*a1 + 32), 1, *a2, **(float **)(v4 + 40), *(float *)(*(_QWORD *)(v4 + 40) + 4));
  v5 = **(_QWORD **)(v4 + 40);
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v5;
  *(_DWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 20) = v6;
  *(_DWORD *)(a3 + 24) = v7;
}

void std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_0,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_1,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_2,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_3,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,std::monostate::ExtentKeyword,std::monostate::ShapeAndExtent,WebCore::StyleGradientImage::PrefixedRadialData::MeasuredSize> const&>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;

  v4 = *a1;
  WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)const::$_7::operator()(*(float ****)(*a1 + 48), *(_BYTE *)a2, *(unsigned __int8 *)(a2 + 1), **(float **)(v4 + 56), *(float *)(*(_QWORD *)(v4 + 56) + 4));
  v5 = **(_QWORD **)(v4 + 56);
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v5;
  *(_DWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 20) = v6;
  *(_DWORD *)(a3 + 24) = v7;
}

float std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_0,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_1,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_2,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_3,WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)::$_4>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,std::monostate,WebCore::CSSPrefixedRadialGradientValue::ShapeKeyword,std::monostate::ExtentKeyword,std::monostate::ShapeAndExtent,WebCore::StyleGradientImage::PrefixedRadialData::MeasuredSize> const&>@<S0>(WebCore::Length *this@<X1>, uint64_t *a2@<X0>, uint64_t a3@<X8>)
{
  uint64_t v5;
  float *v6;
  float v7;
  int v8;
  float v9;
  float v10;
  uint64_t v11;
  float v12;
  BOOL v13;
  float v14;
  int v15;
  WebCore::Length *v16;
  float v17;
  float v18;
  uint64_t v19;
  float v20;
  BOOL v21;
  uint64_t v22;
  float result;

  v5 = *a2;
  v6 = *(float **)(*a2 + 64);
  v7 = *v6;
  v8 = *((unsigned __int8 *)this + 4);
  if (v8 == 3)
  {
    v10 = *(float *)this;
    if (!*((_BYTE *)this + 6))
      v10 = (float)*(int *)this;
    v9 = v7 * (float)(v10 / 100.0);
  }
  else if (v8 == 11)
  {
    v11 = WebCore::Length::calculationValue(this);
    (*(void (**)(_QWORD, float))(**(_QWORD **)(v11 + 8) + 16))(*(_QWORD *)(v11 + 8), v7);
    if (*(_BYTE *)(v11 + 16))
      v13 = v12 < 0.0;
    else
      v13 = 0;
    if (v13)
      v9 = 0.0;
    else
      v9 = v12;
    v6 = *(float **)(v5 + 64);
  }
  else
  {
    v9 = 0.0;
    if (v8 == 4)
    {
      if (*((_BYTE *)this + 6))
        v9 = *(float *)this;
      else
        v9 = (float)*(int *)this;
    }
  }
  v14 = v6[1];
  v15 = *((unsigned __int8 *)this + 12);
  if (v15 == 3)
  {
    v18 = *((float *)this + 2);
    if (!*((_BYTE *)this + 14))
      v18 = (float)SLODWORD(v18);
    v17 = v14 * (float)(v18 / 100.0);
  }
  else
  {
    v16 = (WebCore::Length *)((char *)this + 8);
    v17 = 0.0;
    if (v15 == 11)
    {
      v19 = WebCore::Length::calculationValue(v16);
      (*(void (**)(_QWORD, float))(**(_QWORD **)(v19 + 8) + 16))(*(_QWORD *)(v19 + 8), v14);
      if (*(_BYTE *)(v19 + 16))
        v21 = v20 < 0.0;
      else
        v21 = 0;
      if (v21)
        v17 = 0.0;
      else
        v17 = v20;
    }
    else if (v15 == 4)
    {
      if (*((_BYTE *)this + 14))
        v17 = *(float *)v16;
      else
        v17 = (float)*(int *)v16;
    }
  }
  v22 = **(_QWORD **)(v5 + 72);
  *(_QWORD *)a3 = v22;
  *(_QWORD *)(a3 + 8) = v22;
  *(_DWORD *)(a3 + 16) = 0;
  result = v9 / v17;
  *(float *)(a3 + 20) = v9;
  *(float *)(a3 + 24) = v9 / v17;
  return result;
}

void WebCore::StyleGradientImage::createGradient(WebCore::StyleGradientImage::PrefixedRadialData const&,WebCore::FloatSize const&,WebCore::RenderStyle const&)const::$_7::operator()(float ***a1, char a2, int a3, float a4, float a5)
{
  float **v7;
  float *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  BOOL v19;
  float v20;
  float v22;
  float v23;
  float v24;
  BOOL v25;
  float *v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float *v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  BOOL v42;
  float v44;
  float v45;

  if ((a2 & 1) != 0)
  {
    v7 = a1[1];
    switch(a3)
    {
      case 0:
      case 2:
      case 4:
        return;
      case 1:
        v31 = *v7;
        v33 = *v31;
        v32 = v31[1];
        v45 = v32;
        v34 = hypotf(a4, a5);
        v35 = hypotf(a4 - v33, a5);
        v36 = a5 - v32;
        v37 = hypotf(a4, v36);
        v38 = hypotf(a4 - v33, v36);
        if (v35 >= v34)
          v39 = v34;
        else
          v39 = v35;
        if (v35 >= v34)
          v40 = 0.0;
        else
          v40 = v33;
        if (v37 >= v39)
          v41 = v39;
        else
          v41 = v37;
        if (v37 < v39)
          v40 = 0.0;
        v42 = v38 < v41;
        if (v38 >= v41)
          v20 = v40;
        else
          v20 = v33;
        if (v42 || v37 < v39)
          v22 = v45;
        else
          v22 = 0.0;
        v23 = v33 - a4;
        if ((float)(v33 - a4) >= a4)
          v23 = a4;
        v24 = v45 - a5;
        v25 = (float)(v45 - a5) < a5;
        goto LABEL_51;
      case 3:
      case 5:
        v8 = *v7;
        v10 = *v8;
        v9 = v8[1];
        v44 = v9;
        v11 = hypotf(a4, a5);
        v12 = hypotf(a4 - v10, a5);
        v13 = a5 - v9;
        v14 = hypotf(a4, v13);
        v15 = hypotf(a4 - v10, v13);
        if (v12 <= v11)
          v16 = v11;
        else
          v16 = v12;
        if (v12 <= v11)
          v17 = 0.0;
        else
          v17 = v10;
        if (v14 <= v16)
          v18 = v16;
        else
          v18 = v14;
        if (v14 > v16)
          v17 = 0.0;
        v19 = v15 <= v18;
        if (v15 <= v18)
          v20 = v17;
        else
          v20 = v10;
        if (v19 && v14 <= v16)
          v22 = 0.0;
        else
          v22 = v44;
        v23 = v10 - a4;
        if (a4 >= (float)(v10 - a4))
          v23 = a4;
        v24 = v44 - a5;
        v25 = a5 < (float)(v44 - a5);
LABEL_51:
        if (!v25)
          v24 = a5;
        hypotf(v20 - a4, (float)(v23 / v24) * (float)(v22 - a5));
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x1964FC504);
    }
  }
  else
  {
    switch(a3)
    {
      case 0:
      case 2:
      case 4:
        return;
      case 1:
      case 3:
      case 5:
        v26 = **a1;
        v27 = *v26;
        v28 = v26[1];
        hypotf(a4, a5);
        v29 = a4 - v27;
        hypotf(v29, a5);
        v30 = a5 - v28;
        hypotf(a4, v30);
        hypotf(v29, v30);
        break;
      default:
        __break(0xC471u);
        JUMPOUT(0x1964FC524);
    }
  }
}

uint64_t std::__stable_sort<std::_RangeAlgPolicy,WebCore::GradientColorStops WebCore::StyleGradientImage::computeStopsForDeprecatedVariants<WebCore::`anonymous namespace'::RadialGradientAdapter,WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WebCore::`anonymous namespace'::RadialGradientAdapter &,WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::RenderStyle const&)::{lambda(WebCore::`anonymous namespace'::RadialGradientAdapter const&,WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} &,WebCore::GradientColorStop *>(uint64_t result, float *a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  float v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  unint64_t v14;
  float *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  float *v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int v58;
  unsigned int v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v64;
  unsigned int v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  float v71;
  float v72;
  __int128 v73;
  __int128 v74;

  if (a3 < 2)
    return result;
  v6 = result;
  if (a3 == 2)
  {
    v7 = *(a2 - 4);
    v8 = *(_DWORD *)result;
    if (v7 < *(float *)result)
    {
      v9 = *(_QWORD *)(result + 8);
      if (v9)
        *(_QWORD *)(result + 8) = 0;
      *(float *)result = v7;
      v10 = *((_QWORD *)a2 - 1);
      if (v10)
      {
        *(_QWORD *)(result + 8) = v10;
        *((_QWORD *)a2 - 1) = 0;
      }
      *((_DWORD *)a2 - 4) = v8;
      if (v9)
        *((_QWORD *)a2 - 1) = v9;
    }
    return result;
  }
  if ((uint64_t)a3 > 0)
  {
    v13 = a4;
    v14 = a3 >> 1;
    v15 = (float *)(result + 16 * (a3 >> 1));
    v16 = a3 >> 1;
    if ((uint64_t)a3 > a5)
    {
    }
    v38 = v13 + 16 * v14;
    v40 = v38;
    v41 = v13;
    v42 = v13 + 16 * a3;
    while (1)
    {
      if (v40 == v42)
      {
        if (v41 == v38)
          goto LABEL_137;
        while (2)
        {
          *(_DWORD *)v6 = *(_DWORD *)v41;
          v55 = *(_QWORD *)(v6 + 8);
          v56 = *(_QWORD *)(v41 + 8);
          if ((v55 & 0x8000000000000) != 0)
          {
            if ((v56 & 0x8000000000000) == 0)
              goto LABEL_105;
            v74 = *(_OWORD *)((v55 & 0xFFFFFFFFFFFFLL) + 4);
            v73 = *(_OWORD *)((v56 & 0xFFFFFFFFFFFFLL) + 4);
            result = WebCore::operator==<float,4ul>((float *)&v74, (float *)&v73);
            v55 = *(_QWORD *)(v6 + 8);
            if (!(_DWORD)result)
              goto LABEL_105;
            v60 = *(_QWORD *)(v41 + 8);
            if (HIBYTE(v55) != HIBYTE(v60) || BYTE6(v55) != BYTE6(v60))
              goto LABEL_105;
          }
          else if (v55 != v56 || (v56 & 0x8000000000000) != 0)
          {
LABEL_105:
            if ((v55 & 0x8000000000000) != 0)
            {
              result = v55 & 0xFFFFFFFFFFFFLL;
              do
              {
                v58 = __ldaxr((unsigned int *)result);
                v59 = v58 - 1;
              }
              while (__stlxr(v59, (unsigned int *)result));
              if (!v59)
              {
                atomic_store(1u, (unsigned int *)result);
                result = WTF::fastFree((WTF *)result, v39);
              }
            }
            *(_QWORD *)(v6 + 8) = *(_QWORD *)(v41 + 8);
            *(_QWORD *)(v41 + 8) = 0;
          }
          v41 += 16;
          v6 += 16;
          if (v41 == v38)
            goto LABEL_137;
          continue;
        }
      }
      if (*(float *)v40 >= *(float *)v41)
      {
        *(_DWORD *)v6 = *(_DWORD *)v41;
        v46 = *(_QWORD *)(v6 + 8);
        v47 = *(_QWORD *)(v41 + 8);
        if ((v46 & 0x8000000000000) != 0)
        {
          if ((v47 & 0x8000000000000) == 0)
            goto LABEL_76;
          v74 = *(_OWORD *)((v46 & 0xFFFFFFFFFFFFLL) + 4);
          v73 = *(_OWORD *)((v47 & 0xFFFFFFFFFFFFLL) + 4);
          result = WebCore::operator==<float,4ul>((float *)&v74, (float *)&v73);
          v46 = *(_QWORD *)(v6 + 8);
          if (!(_DWORD)result)
            goto LABEL_76;
          v54 = *(_QWORD *)(v41 + 8);
          if (HIBYTE(v46) != HIBYTE(v54) || BYTE6(v46) != BYTE6(v54))
            goto LABEL_76;
        }
        else if (v46 != v47 || (v47 & 0x8000000000000) != 0)
        {
LABEL_76:
          if ((v46 & 0x8000000000000) != 0)
          {
            result = v46 & 0xFFFFFFFFFFFFLL;
            do
            {
              v51 = __ldaxr((unsigned int *)result);
              v52 = v51 - 1;
            }
            while (__stlxr(v52, (unsigned int *)result));
            if (!v52)
            {
              atomic_store(1u, (unsigned int *)result);
              result = WTF::fastFree((WTF *)result, v39);
            }
          }
          *(_QWORD *)(v6 + 8) = *(_QWORD *)(v41 + 8);
          *(_QWORD *)(v41 + 8) = 0;
        }
        v41 += 16;
        goto LABEL_79;
      }
      *(_DWORD *)v6 = *(_DWORD *)v40;
      v43 = *(_QWORD *)(v6 + 8);
      v44 = *(_QWORD *)(v40 + 8);
      if ((v43 & 0x8000000000000) != 0)
      {
        if ((v44 & 0x8000000000000) == 0)
          goto LABEL_68;
        v74 = *(_OWORD *)((v43 & 0xFFFFFFFFFFFFLL) + 4);
        v73 = *(_OWORD *)((v44 & 0xFFFFFFFFFFFFLL) + 4);
        result = WebCore::operator==<float,4ul>((float *)&v74, (float *)&v73);
        v43 = *(_QWORD *)(v6 + 8);
        if (!(_DWORD)result)
          goto LABEL_68;
        v53 = *(_QWORD *)(v40 + 8);
        if (HIBYTE(v43) != HIBYTE(v53) || BYTE6(v43) != BYTE6(v53))
          goto LABEL_68;
      }
      else if (v43 != v44 || (v44 & 0x8000000000000) != 0)
      {
LABEL_68:
        if ((v43 & 0x8000000000000) != 0)
        {
          result = v43 & 0xFFFFFFFFFFFFLL;
          do
          {
            v49 = __ldaxr((unsigned int *)result);
            v50 = v49 - 1;
          }
          while (__stlxr(v50, (unsigned int *)result));
          if (!v50)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, v39);
          }
        }
        *(_QWORD *)(v6 + 8) = *(_QWORD *)(v40 + 8);
        *(_QWORD *)(v40 + 8) = 0;
      }
      v40 += 16;
LABEL_79:
      v6 += 16;
      if (v41 == v38)
      {
        while (v40 != v42)
        {
          *(_DWORD *)v6 = *(_DWORD *)v40;
          v61 = *(_QWORD *)(v6 + 8);
          v62 = *(_QWORD *)(v40 + 8);
          if ((v61 & 0x8000000000000) != 0)
          {
            if ((v62 & 0x8000000000000) == 0)
              goto LABEL_124;
            v74 = *(_OWORD *)((v61 & 0xFFFFFFFFFFFFLL) + 4);
            v73 = *(_OWORD *)((v62 & 0xFFFFFFFFFFFFLL) + 4);
            result = WebCore::operator==<float,4ul>((float *)&v74, (float *)&v73);
            v61 = *(_QWORD *)(v6 + 8);
            if (!(_DWORD)result)
              goto LABEL_124;
            v66 = *(_QWORD *)(v40 + 8);
            if (HIBYTE(v61) != HIBYTE(v66) || BYTE6(v61) != BYTE6(v66))
              goto LABEL_124;
          }
          else if (v61 != v62 || (v62 & 0x8000000000000) != 0)
          {
LABEL_124:
            if ((v61 & 0x8000000000000) != 0)
            {
              result = v61 & 0xFFFFFFFFFFFFLL;
              do
              {
                v64 = __ldaxr((unsigned int *)result);
                v65 = v64 - 1;
              }
              while (__stlxr(v65, (unsigned int *)result));
              if (!v65)
              {
                atomic_store(1u, (unsigned int *)result);
                result = WTF::fastFree((WTF *)result, v39);
              }
            }
            *(_QWORD *)(v6 + 8) = *(_QWORD *)(v40 + 8);
            *(_QWORD *)(v40 + 8) = 0;
          }
          v40 += 16;
          v6 += 16;
        }
LABEL_137:
        if (v13)
        {
          v67 = 0;
          do
          {
            v68 = *(_QWORD *)(v13 + 8);
            if ((v68 & 0x8000000000000) != 0)
            {
              result = v68 & 0xFFFFFFFFFFFFLL;
              do
              {
                v69 = __ldaxr((unsigned int *)result);
                v70 = v69 - 1;
              }
              while (__stlxr(v70, (unsigned int *)result));
              if (!v70)
              {
                atomic_store(1u, (unsigned int *)result);
                result = WTF::fastFree((WTF *)result, v39);
              }
            }
            ++v67;
            v13 += 16;
          }
          while (v67 != a3);
        }
        return result;
      }
    }
  }
  if ((float *)result == a2)
    return result;
  v17 = result + 16;
  if ((float *)(result + 16) == a2)
    return result;
  v18 = result;
  do
  {
    v19 = v18;
    v18 = v17;
    v20 = *(float *)(v19 + 16);
    v21 = *(float *)v19;
    if (v20 >= *(float *)v19)
      goto LABEL_47;
    v22 = *(_QWORD *)(v19 + 24);
    if (v22)
      *(_QWORD *)(v19 + 24) = 0;
    v23 = v17;
    while (1)
    {
      v24 = v19;
      *(float *)v23 = v21;
      v25 = *(_QWORD *)(v23 + 8);
      v26 = *(_QWORD *)(v24 + 8);
      if ((v25 & 0x8000000000000) != 0)
      {
        if ((v26 & 0x8000000000000) != 0)
        {
          v72 = v20;
          v74 = *(_OWORD *)((v25 & 0xFFFFFFFFFFFFLL) + 4);
          v73 = *(_OWORD *)((v26 & 0xFFFFFFFFFFFFLL) + 4);
          result = WebCore::operator==<float,4ul>((float *)&v74, (float *)&v73);
          v25 = *(_QWORD *)(v23 + 8);
          if ((_DWORD)result && (v30 = *(_QWORD *)(v24 + 8), HIBYTE(v25) == HIBYTE(v30)))
          {
            v20 = v72;
            if (BYTE6(v25) == BYTE6(v30))
              goto LABEL_28;
          }
          else
          {
            v20 = v72;
          }
        }
      }
      else if (v25 == v26 && (v26 & 0x8000000000000) == 0)
      {
        goto LABEL_28;
      }
      if ((v25 & 0x8000000000000) != 0)
      {
        v71 = v20;
        result = v25 & 0xFFFFFFFFFFFFLL;
        do
        {
          v28 = __ldaxr((unsigned int *)result);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, (unsigned int *)result));
        if (!v29)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, a2);
          v20 = v71;
        }
      }
      *(_QWORD *)(v23 + 8) = *(_QWORD *)(v24 + 8);
      *(_QWORD *)(v24 + 8) = 0;
LABEL_28:
      if (v24 == v6)
        break;
      v19 = v24 - 16;
      v21 = *(float *)(v24 - 16);
      v23 = v24;
      if (v20 >= v21)
      {
        v31 = (float *)v24;
        goto LABEL_42;
      }
    }
    v31 = (float *)v6;
LABEL_42:
    *v31 = v20;
    v32 = *(_QWORD *)(v24 + 8);
    if ((v32 & 0x8000000000000) != 0)
    {
      if ((v22 & 0x8000000000000) != 0
        && (v74 = *(_OWORD *)((v32 & 0xFFFFFFFFFFFFLL) + 4),
            v35 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFLL),
            v73 = *(_OWORD *)((v22 & 0xFFFFFFFFFFFFLL) + 4),
            result = WebCore::operator==<float,4ul>((float *)&v74, (float *)&v73),
            v32 = *(_QWORD *)(v24 + 8),
            (_DWORD)result)
        && HIBYTE(v32) == HIBYTE(v22)
        && BYTE6(v32) == BYTE6(v22))
      {
        do
        {
          v36 = __ldaxr(v35);
          v37 = v36 - 1;
        }
        while (__stlxr(v37, v35));
        if (!v37)
        {
          atomic_store(1u, v35);
          result = WTF::fastFree((WTF *)(v22 & 0xFFFFFFFFFFFFLL), a2);
        }
      }
      else
      {
LABEL_45:
        if ((v32 & 0x8000000000000) != 0)
        {
          result = v32 & 0xFFFFFFFFFFFFLL;
          do
          {
            v33 = __ldaxr((unsigned int *)result);
            v34 = v33 - 1;
          }
          while (__stlxr(v34, (unsigned int *)result));
          if (!v34)
          {
            atomic_store(1u, (unsigned int *)result);
            result = WTF::fastFree((WTF *)result, a2);
          }
        }
        *(_QWORD *)(v24 + 8) = v22;
      }
    }
    else if ((v22 & 0x8000000000000) != 0 || v32 != v22)
    {
      goto LABEL_45;
    }
LABEL_47:
    v17 = v18 + 16;
  }
  while ((float *)(v18 + 16) != a2);
  return result;
}

uint64_t std::__stable_sort_move<std::_RangeAlgPolicy,WebCore::GradientColorStops WebCore::StyleGradientImage::computeStopsForDeprecatedVariants<WebCore::`anonymous namespace'::RadialGradientAdapter,WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>(WebCore::`anonymous namespace'::RadialGradientAdapter &,WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&,WebCore::RenderStyle const&)::{lambda(WebCore::`anonymous namespace'::RadialGradientAdapter const&,WTF::Vector<WebCore::StyleGradientImageStop<std::optional<WebCore::Length>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> const&)#1} &,WebCore::GradientColorStop *>(uint64_t result, float *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  float *v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  float *v22;
  float *v23;
  float v24;
  float v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  unsigned int v29;
  BOOL v30;
  float *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unsigned int v40;
  unsigned int v41;
  float *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  float *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float *v55;
  float *v56;
  float *v57;
  float *v58;
  __int128 v59;
  __int128 v60;

  if (!a3)
    return result;
  v4 = a4;
  v7 = result;
  if (a3 == 2)
  {
    v10 = *(a2 - 4);
    if (v10 >= *(float *)result)
    {
      *(_DWORD *)a4 = *(_DWORD *)result;
      *(_QWORD *)(a4 + 8) = 0;
      v43 = *(_QWORD *)(result + 8);
      if (v43)
      {
        *(_QWORD *)(a4 + 8) = v43;
        *(_QWORD *)(result + 8) = 0;
      }
      *(_QWORD *)(a4 + 24) = 0;
      v44 = *((_QWORD *)a2 - 1);
      *(float *)(a4 + 16) = *(a2 - 4);
      if (!v44)
        return result;
      *(_QWORD *)(a4 + 24) = v44;
      v9 = a2 - 2;
    }
    else
    {
      *(float *)a4 = v10;
      *(_QWORD *)(a4 + 8) = 0;
      v11 = *((_QWORD *)a2 - 1);
      if (v11)
      {
        *(_QWORD *)(a4 + 8) = v11;
        *((_QWORD *)a2 - 1) = 0;
      }
      *(_DWORD *)(a4 + 16) = *(_DWORD *)result;
      *(_QWORD *)(a4 + 24) = 0;
      v9 = (float *)(result + 8);
      v12 = *(_QWORD *)(result + 8);
      if (!v12)
        return result;
      *(_QWORD *)(a4 + 24) = v12;
    }
LABEL_70:
    *(_QWORD *)v9 = 0;
    return result;
  }
  if (a3 == 1)
  {
    *(_DWORD *)a4 = *(_DWORD *)result;
    *(_QWORD *)(a4 + 8) = 0;
    v9 = (float *)(result + 8);
    v8 = *(_QWORD *)(result + 8);
    if (!v8)
      return result;
    *(_QWORD *)(a4 + 8) = v8;
    goto LABEL_70;
  }
  if ((uint64_t)a3 > 8)
  {
    v45 = result + 16 * (a3 >> 1);
    v46 = (float *)(v7 + 16 * (a3 >> 1));
    while (v46 != a2)
    {
      if (*v46 >= *(float *)v7)
      {
        *(_DWORD *)v4 = *(_DWORD *)v7;
        *(_QWORD *)(v4 + 8) = 0;
        v48 = *(_QWORD *)(v7 + 8);
        if (v48)
        {
          *(_QWORD *)(v4 + 8) = v48;
          *(_QWORD *)(v7 + 8) = 0;
        }
        v7 += 16;
      }
      else
      {
        *(float *)v4 = *v46;
        *(_QWORD *)(v4 + 8) = 0;
        v47 = *((_QWORD *)v46 + 1);
        if (v47)
        {
          *(_QWORD *)(v4 + 8) = v47;
          *((_QWORD *)v46 + 1) = 0;
        }
        v46 += 4;
      }
      v4 += 16;
      if (v7 == v45)
      {
        if (v46 != a2)
        {
          v49 = 0;
          do
          {
            v50 = v4 + v49 * 4;
            *(float *)v50 = v46[v49];
            *(_QWORD *)(v50 + 8) = 0;
            v51 = *(_QWORD *)&v46[v49 + 2];
            if (v51)
            {
              *(_QWORD *)(v50 + 8) = v51;
              *(_QWORD *)&v46[v49 + 2] = 0;
            }
            v49 += 4;
          }
          while (&v46[v49] != a2);
        }
        return result;
      }
    }
    if (v7 != v45)
    {
      v52 = 0;
      do
      {
        v53 = v4 + v52;
        *(_DWORD *)v53 = *(_DWORD *)(v7 + v52);
        *(_QWORD *)(v53 + 8) = 0;
        v54 = *(_QWORD *)(v7 + v52 + 8);
        if (v54)
        {
          *(_QWORD *)(v53 + 8) = v54;
          *(_QWORD *)(v7 + v52 + 8) = 0;
        }
        v52 += 16;
      }
      while (v7 + v52 != v45);
    }
  }
  else if ((float *)result != a2)
  {
    *(_DWORD *)a4 = *(_DWORD *)result;
    *(_QWORD *)(a4 + 8) = 0;
    v13 = *(_QWORD *)(result + 8);
    if (v13)
    {
      *(_QWORD *)(a4 + 8) = v13;
      *(_QWORD *)(result + 8) = 0;
    }
    v14 = result + 16;
    if ((float *)(result + 16) != a2)
    {
      v15 = (float *)a4;
      v16 = (float *)a4;
      while (1)
      {
        v17 = v7;
        v7 = v14;
        v18 = *v16;
        v16 += 4;
        v19 = v18;
        v20 = *(float *)(v17 + 16);
        if (v20 < v18)
          break;
        v15[4] = v20;
        *((_QWORD *)v15 + 3) = 0;
        v35 = *(_QWORD *)(v17 + 24);
        v34 = (_QWORD *)(v17 + 24);
        v33 = v35;
        if (v35)
        {
          *((_QWORD *)v15 + 3) = v33;
LABEL_54:
          *v34 = 0;
        }
LABEL_55:
        v14 = v7 + 16;
        v15 = v16;
        if ((float *)(v7 + 16) == a2)
          return result;
      }
      v15[4] = v19;
      *((_QWORD *)v15 + 3) = 0;
      v21 = *((_QWORD *)v15 + 1);
      if (v21)
      {
        *((_QWORD *)v15 + 3) = v21;
        *((_QWORD *)v15 + 1) = 0;
      }
      v22 = (float *)v4;
      if (v15 != (float *)v4)
      {
        v23 = v15;
        while (1)
        {
          v24 = *(v23 - 4);
          v23 -= 4;
          v25 = v24;
          if (*(float *)v7 >= v24)
          {
            v22 = v15;
            break;
          }
          *v15 = v25;
          v26 = *((_QWORD *)v15 + 1);
          v27 = *((_QWORD *)v15 - 1);
          if ((v26 & 0x8000000000000) != 0)
          {
            if ((v27 & 0x8000000000000) == 0)
              goto LABEL_28;
            v57 = v23;
            v60 = *(_OWORD *)((v26 & 0xFFFFFFFFFFFFLL) + 4);
            v59 = *(_OWORD *)((v27 & 0xFFFFFFFFFFFFLL) + 4);
            v31 = v15;
            result = WebCore::operator==<float,4ul>((float *)&v60, (float *)&v59);
            v15 = v31;
            v26 = *((_QWORD *)v31 + 1);
            if (!(_DWORD)result || (v32 = *((_QWORD *)v31 - 1), HIBYTE(v26) != HIBYTE(v32)))
            {
              v23 = v57;
LABEL_28:
              if ((v26 & 0x8000000000000) != 0)
              {
                v55 = v15;
                v56 = v23;
                result = v26 & 0xFFFFFFFFFFFFLL;
                do
                {
                  v29 = __ldaxr((unsigned int *)result);
                  v30 = --v29 == 0;
                }
                while (__stlxr(v29, (unsigned int *)result));
                v15 = v55;
                if (v30)
                {
                  atomic_store(1u, (unsigned int *)result);
                  result = WTF::fastFree((WTF *)result, a2);
                  v15 = v55;
                  v23 = v56;
                }
              }
              *((_QWORD *)v15 + 1) = *((_QWORD *)v15 - 1);
              *((_QWORD *)v15 - 1) = 0;
              goto LABEL_30;
            }
            v28 = BYTE6(v26) == BYTE6(v32);
            v23 = v57;
            if (!v28)
              goto LABEL_28;
          }
          else
          {
            v28 = v26 == v27 && (v27 & 0x8000000000000) == 0;
            if (!v28)
              goto LABEL_28;
          }
LABEL_30:
          v15 = v23;
          if (v23 == (float *)v4)
          {
            v22 = (float *)v4;
            break;
          }
        }
      }
      *v22 = *(float *)v7;
      v37 = *(_QWORD *)(v17 + 24);
      v34 = (_QWORD *)(v17 + 24);
      v36 = v37;
      v38 = *((_QWORD *)v22 + 1);
      if ((v38 & 0x8000000000000) != 0)
      {
        if ((v36 & 0x8000000000000) != 0)
        {
          v60 = *(_OWORD *)((v38 & 0xFFFFFFFFFFFFLL) + 4);
          v59 = *(_OWORD *)((v36 & 0xFFFFFFFFFFFFLL) + 4);
          v42 = v22;
          result = WebCore::operator==<float,4ul>((float *)&v60, (float *)&v59);
          v22 = v42;
          v38 = *((_QWORD *)v42 + 1);
          if ((_DWORD)result)
          {
            if (HIBYTE(v38) == HIBYTE(*v34) && BYTE6(v38) == BYTE6(*v34))
              goto LABEL_55;
          }
        }
      }
      else if (v38 == v36 && (v36 & 0x8000000000000) == 0)
      {
        goto LABEL_55;
      }
      if ((v38 & 0x8000000000000) != 0)
      {
        v58 = v22;
        result = v38 & 0xFFFFFFFFFFFFLL;
        do
        {
          v40 = __ldaxr((unsigned int *)result);
          v41 = v40 - 1;
        }
        while (__stlxr(v41, (unsigned int *)result));
        if (!v41)
        {
          atomic_store(1u, (unsigned int *)result);
          result = WTF::fastFree((WTF *)result, a2);
          v22 = v58;
        }
      }
      *((_QWORD *)v22 + 1) = *v34;
      goto LABEL_54;
    }
  }
  return result;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::resolveColorStopPosition(WebCore::StyleGradientImageStop<std::variant<std::monostate,WebCore::AngleRaw,WebCore::PercentRaw>> const&,float)::$_0,WebCore::resolveColorStopPosition(WebCore::StyleGradientImageStop<std::variant<std::monostate,WebCore::AngleRaw,WebCore::PercentRaw>> const&,float)::$_1,WebCore::resolveColorStopPosition(WebCore::StyleGradientImageStop<std::variant<std::monostate,WebCore::AngleRaw,WebCore::PercentRaw>> const&,float)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,WebCore::PercentRaw> const&>()
{
  return 0;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::resolveColorStopPosition(WebCore::StyleGradientImageStop<std::variant<std::monostate,WebCore::AngleRaw,WebCore::PercentRaw>> const&,float)::$_0,WebCore::resolveColorStopPosition(WebCore::StyleGradientImageStop<std::variant<std::monostate,WebCore::AngleRaw,WebCore::PercentRaw>> const&,float)::$_1,WebCore::resolveColorStopPosition(WebCore::StyleGradientImageStop<std::variant<std::monostate,WebCore::AngleRaw,WebCore::PercentRaw>> const&,float)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,WebCore::PercentRaw> const&>(uint64_t a1, double *a2)
{
  int v2;
  double v3;
  unsigned int v4;
  double v6;

  v2 = *(unsigned __int8 *)a2;
  v3 = a2[1];
  if (v2 != 12)
  {
    switch(v2)
    {
      case 64:
        v6 = 360.0;
        break;
      case 14:
        v6 = 0.9;
        break;
      case 13:
        v6 = 57.2957795;
        break;
      default:
        v3 = 0.0;
        goto LABEL_2;
    }
    v3 = v3 * v6;
  }
LABEL_2:
  *(float *)&v4 = v3 / 360.0;
  return v4 | 0x100000000;
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:sn180100]<std::__variant_detail::__visitation::__variant::__value_visitor<WTF::Visitor<WebCore::resolveColorStopPosition(WebCore::StyleGradientImageStop<std::variant<std::monostate,WebCore::AngleRaw,WebCore::PercentRaw>> const&,float)::$_0,WebCore::resolveColorStopPosition(WebCore::StyleGradientImageStop<std::variant<std::monostate,WebCore::AngleRaw,WebCore::PercentRaw>> const&,float)::$_1,WebCore::resolveColorStopPosition(WebCore::StyleGradientImageStop<std::variant<std::monostate,WebCore::AngleRaw,WebCore::PercentRaw>> const&,float)::$_2>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)0,std::monostate,WebCore::AngleRaw,WebCore::PercentRaw> const&>(uint64_t a1, double *a2)
{
  unsigned int v2;

  *(float *)&v2 = *a2 / 100.0;
  return v2 | 0x100000000;
}

int *WTF::Vector<WebCore::GridTrackSize,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::shrink(int *result)
{
  int *v1;
  unsigned int v2;
  uint64_t v3;
  unsigned int *v4;

  v1 = result;
  v2 = result[3];
  if (v2)
  {
    v3 = 88 * v2;
    v4 = (unsigned int *)(*(_QWORD *)result + 32);
    do
    {
      if (*((_BYTE *)v4 + 28) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v4[6]);
      }
      if (*((_BYTE *)v4 + 4) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v4);
      }
      if (*((_BYTE *)v4 - 20) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        result = WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(v4 - 6));
      }
      v4 += 22;
      v3 -= 88;
    }
    while (v3);
  }
  v1[3] = 0;
  return result;
}

uint64_t WTF::HashTable<unsigned int,WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::IntHash<unsigned int>,WTF::HashMap<unsigned int,WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::IntHash<unsigned int>,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>,WTF::HashTraits<WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::UnsignedWithZeroKeyHashTraits<unsigned int>>::deallocateTable(uint64_t a1, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  WTF::StringImpl ***v6;
  uint64_t v7;
  WTF *v8;
  WTF::StringImpl **v10;
  uint64_t v11;
  WTF::StringImpl *v12;

  v3 = *(unsigned int *)(a1 - 4);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      if (*(_DWORD *)(a1 + 24 * i) != -2)
      {
        v5 = a1 + 24 * i;
        v6 = (WTF::StringImpl ***)(v5 + 8);
        v7 = *(unsigned int *)(v5 + 20);
        if ((_DWORD)v7)
        {
          v10 = *v6;
          v11 = 8 * v7;
          do
          {
            v12 = *v10;
            *v10 = 0;
            if (v12)
            {
              if (*(_DWORD *)v12 == 2)
                WTF::StringImpl::destroy(v12, a2);
              else
                *(_DWORD *)v12 -= 2;
            }
            ++v10;
            v11 -= 8;
          }
          while (v11);
        }
        v8 = (WTF *)*v6;
        if (*v6)
        {
          *v6 = 0;
          *(_DWORD *)(a1 + 24 * i + 16) = 0;
          WTF::fastFree(v8, a2);
        }
      }
    }
  }
  return WTF::fastFree((WTF *)(a1 - 16), a2);
}

uint64_t WebCore::StyleImageSet::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = WTF::fastMalloc((WTF *)0x70);
  result = WebCore::StyleImageSet::StyleImageSet(v6, a1, a2);
  *a3 = result;
  return result;
}

uint64_t WebCore::StyleImageSet::StyleImageSet(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 2;
  *(_QWORD *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 40) = 1;
  *(_QWORD *)a1 = off_1E3442BB0;
  v6 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)(v6 + 8) = 1;
  *(_QWORD *)(v6 + 16) = 0;
  *(_BYTE *)(v6 + 24) = 8;
  *(_DWORD *)(v6 + 28) = 0;
  *(_DWORD *)(v6 + 32) = 0;
  *(_BYTE *)(v6 + 36) = 1;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)v6 = off_1E3442CB0;
  *(_QWORD *)(a1 + 48) = v6;
  *(_DWORD *)(a1 + 56) = 1065353216;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v7 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 80) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  *(_DWORD *)(a1 + 88) = v7;
  LODWORD(v7) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = 0;
  *(_DWORD *)(a1 + 92) = v7;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  v8 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 96) = v8;
  LODWORD(v8) = *((_DWORD *)a3 + 2);
  *((_DWORD *)a3 + 2) = 0;
  *(_DWORD *)(a1 + 104) = v8;
  LODWORD(v8) = *((_DWORD *)a3 + 3);
  *((_DWORD *)a3 + 3) = 0;
  *(_DWORD *)(a1 + 108) = v8;
  return a1;
}

void WebCore::StyleImageSet::~StyleImageSet(WebCore::StyleImageSet *this, void *a2)
{
  WTF *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;

  v3 = (WTF *)*((_QWORD *)this + 12);
  if (v3)
  {
    *((_QWORD *)this + 12) = 0;
    *((_DWORD *)this + 26) = 0;
    WTF::fastFree(v3, a2);
  }
  WTF::Vector<WebCore::ImageWithScale,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::~Vector((uint64_t)this + 80, a2);
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v6)
  {
    if (v6[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
    else
      --v6[2];
  }
  *(_QWORD *)this = off_1E3442DC0;
  v7 = (_DWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v7)
  {
    if (v7[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v7 + 8))(v7);
    else
      --v7[2];
  }
  v8 = *((_QWORD *)this + 2);
  if (v8)
  {
    *(_QWORD *)(v8 + 8) = 0;
    v9 = (unsigned int *)*((_QWORD *)this + 2);
    *((_QWORD *)this + 2) = 0;
    if (v9)
    {
      do
      {
        v10 = __ldaxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
      {
        atomic_store(1u, v9);
        WTF::fastFree((WTF *)v9, v4);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 2) = 0;
  }
}

{
  WTF *v2;
  void *v3;

  WebCore::StyleImageSet::~StyleImageSet(this, a2);
  WTF::fastFree(v2, v3);
}

BOOL WebCore::StyleImageSet::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  float v16;
  float v17;

  v2 = *(unsigned __int8 *)(a2 + 24);
  v3 = v2 == 2;
  if (v2 == 2)
    v4 = a2;
  else
    v4 = 0;
  if (v3)
  {
    v5 = *(unsigned int *)(a1 + 92);
    if ((_DWORD)v5 == *(_DWORD *)(a2 + 92))
    {
      if ((_DWORD)v5)
      {
        v6 = *(_QWORD *)(a1 + 80);
        v7 = *(_QWORD *)(a2 + 80);
        if (*(_QWORD *)v6 != *(_QWORD *)v7 || *(float *)(v6 + 8) != *(float *)(v7 + 8))
          return 0;
        v9 = 0;
        v10 = (_DWORD *)(v6 + 32);
        v11 = (_DWORD *)(v7 + 32);
        while (v5 - 1 != v9)
        {
          v12 = *((_QWORD *)v10 - 1);
          v13 = *((_QWORD *)v11 - 1);
          v14 = *(float *)v10;
          v10 += 6;
          v15 = v14;
          v16 = *(float *)v11;
          v11 += 6;
          v17 = v16;
          ++v9;
          if (v12 != v13 || v15 != v17)
          {
            if (v9 < v5)
              return 0;
            break;
          }
        }
      }
      if (!(*(unsigned __int8 *)(a1 + 40) | *(unsigned __int8 *)(v4 + 40)))
        return *(_QWORD *)(a1 + 32) == *(_QWORD *)(v4 + 32);
    }
  }
  return 0;
}

unsigned int *WebCore::StyleImageSet::computedStyleValue@<X0>(unsigned int *this@<X0>, const WebCore::RenderStyle *a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int *v4;
  uint64_t v6;
  WTF *v7;
  float *v8;
  float *v9;
  double v10;
  uint64_t v11;
  char v12;
  _DWORD *v13;
  uint64_t v14;
  char v15;
  int v16;
  unsigned int v17;
  WTF::StringImpl *v18;
  WTF *v19;
  uint64_t v20;
  _DWORD *v21;
  WTF *v22;
  WTF *v24;
  uint64_t v25;
  _DWORD *v26;
  int v28;
  WTF *v29;
  int v30;
  unsigned int v31;
  _BYTE v32[32];
  WTF *v33;
  uint64_t v34;
  _BYTE v35[32];
  uint64_t v36;

  v4 = this;
  v33 = (WTF *)v35;
  v34 = 4;
  v6 = this[23];
  if (v6 < 5)
  {
    v7 = (WTF *)v35;
    if (!(_DWORD)v6)
      goto LABEL_11;
LABEL_6:
    v8 = (float *)*((_QWORD *)v4 + 10);
    v9 = &v8[6 * v6];
    do
    {
      (*(void (**)(uint64_t *__return_ptr, _QWORD, const WebCore::RenderStyle *))(**(_QWORD **)v8 + 24))(&v36, *(_QWORD *)v8, a2);
      v10 = v8[2];
      v11 = WTF::fastCompactMalloc((WTF *)0x10);
      *(_DWORD *)v11 = 2;
      v12 = *(_BYTE *)(v11 + 6);
      *(_WORD *)(v11 + 4) = 55;
      *(_BYTE *)(v11 + 6) = v12 & 0xFC;
      *(double *)(v11 + 8) = v10;
      v13 = (_DWORD *)*((_QWORD *)v8 + 2);
      if (v13)
        *v13 += 2;
      v14 = WTF::fastCompactMalloc((WTF *)0x20);
      *(_DWORD *)v14 = 2;
      v15 = *(_BYTE *)(v14 + 6);
      *(_WORD *)(v14 + 4) = 4096;
      *(_BYTE *)(v14 + 6) = v15 & 0xFC;
      *(_QWORD *)(v14 + 8) = v36;
      *(_QWORD *)(v14 + 16) = v11;
      *(_QWORD *)(v14 + 24) = v13;
      v16 = HIDWORD(v34) + 1;
      *((_QWORD *)v33 + HIDWORD(v34)) = v14;
      HIDWORD(v34) = v16;
      v8 += 6;
    }
    while (v8 != v9);
    v7 = v33;
    goto LABEL_11;
  }
  if (v6 >> 29)
  {
    __break(0xC471u);
    return this;
  }
  v7 = (WTF *)WTF::fastMalloc((WTF *)(8 * v6));
  LODWORD(v34) = v6;
  v33 = v7;
  LODWORD(v6) = v4[23];
  if ((_DWORD)v6)
    goto LABEL_6;
LABEL_11:
  v29 = (WTF *)v32;
  v30 = 4;
  if (v7 == (WTF *)v35)
  {
    v17 = HIDWORD(v34);
    memcpy(v32, v35, 8 * HIDWORD(v34));
  }
  else
  {
    v33 = (WTF *)v35;
    v29 = v7;
    v28 = v34;
    v17 = HIDWORD(v34);
    LODWORD(v34) = 4;
    v30 = v28;
  }
  HIDWORD(v34) = 0;
  v31 = v17;
  WebCore::CSSImageSetValue::create((uint64_t)&v29, &v36);
  *a3 = v36;
  if (v31)
  {
    v19 = v29;
    v20 = 8 * v31;
    do
    {
      v21 = *(_DWORD **)v19;
      *(_QWORD *)v19 = 0;
      if (v21)
      {
        if (*v21 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v21, v18);
        else
          *v21 -= 2;
      }
      v19 = (WTF *)((char *)v19 + 8);
      v20 -= 8;
    }
    while (v20);
  }
  v22 = v29;
  if (v32 != (_BYTE *)v29 && v29 != 0)
  {
    v29 = 0;
    v30 = 0;
    WTF::fastFree(v22, v18);
  }
  if (HIDWORD(v34))
  {
    v24 = v33;
    v25 = 8 * HIDWORD(v34);
    do
    {
      v26 = *(_DWORD **)v24;
      *(_QWORD *)v24 = 0;
      if (v26)
      {
        if (*v26 == 2)
          WebCore::CSSValue::visitDerived<WebCore::CSSValue::operator delete(WebCore::CSSValue*,std::destroying_delete_t)::$_0>((uint64_t)v26, v18);
        else
          *v26 -= 2;
      }
      v24 = (WTF *)((char *)v24 + 8);
      v25 -= 8;
    }
    while (v25);
  }
  this = (unsigned int *)v33;
  if (v35 != (_BYTE *)v33 && v33 != 0)
  {
    v33 = 0;
    LODWORD(v34) = 0;
    return (unsigned int *)WTF::fastFree((WTF *)this, v18);
  }
  return this;
}

void WebCore::StyleImageSet::selectBestFitImage(WebCore::StyleImageSet *this@<X0>, const WebCore::Document *a2@<X1>, uint64_t a3@<X8>)
{
  WTF::StringImpl *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8[3];

  WebCore::StyleImageSet::updateDeviceScaleFactor((uint64_t)this, a2);
  if (!*((_BYTE *)this + 41))
  {
    *((_BYTE *)this + 41) = 1;
    WebCore::StyleImageSet::bestImageForScaleFactor(this, (uint64_t)v8);
    WebCore::ImageWithScale::operator=((uint64_t)this + 48, v8);
    WebCore::ImageWithScale::~ImageWithScale((WebCore::ImageWithScale *)v8, v5);
  }
  v6 = *((_QWORD *)this + 6);
  if (v6)
    ++*(_DWORD *)(v6 + 8);
  *(_QWORD *)a3 = v6;
  *(_DWORD *)(a3 + 8) = *((_DWORD *)this + 14);
  v7 = (_DWORD *)*((_QWORD *)this + 8);
  if (v7)
    *v7 += 2;
  *(_QWORD *)(a3 + 16) = v7;
}

uint64_t WebCore::StyleImageSet::updateDeviceScaleFactor(uint64_t this, const WebCore::Document *a2)
{
  uint64_t v2;
  float v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *((_QWORD *)a2 + 66);
  v3 = 1.0;
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 8);
    if (v4)
    {
      v5 = *(_QWORD *)(v4 + 24);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 8);
        if (v6)
          v3 = *(float *)(v6 + 364);
      }
    }
  }
  if (v3 != *(float *)(this + 72))
  {
    *(float *)(this + 72) = v3;
    *(_BYTE *)(this + 41) = 0;
  }
  return this;
}

void WebCore::StyleImageSet::bestImageForScaleFactor(WebCore::StyleImageSet *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const WTF::String *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  WTF::StringImpl **v12;
  float v13;
  uint64_t v14;
  WTF::StringImpl *v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  WTF::StringImpl *v25;

  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)(v4 + 8) = 1;
  *(_QWORD *)(v4 + 16) = 0;
  *(_BYTE *)(v4 + 24) = 8;
  *(_DWORD *)(v4 + 28) = 0;
  *(_DWORD *)(v4 + 32) = 0;
  *(_BYTE *)(v4 + 36) = 1;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)v4 = off_1E3442CB0;
  v23 = v4;
  v24 = 1.0;
  v25 = 0;
  v6 = *((unsigned int *)this + 27);
  if (!(_DWORD)v6)
    goto LABEL_22;
  v7 = (uint64_t *)*((_QWORD *)this + 12);
  v8 = 8 * v6;
  do
  {
    v9 = *v7;
    if (*v7 >= (unint64_t)*((unsigned int *)this + 23))
    {
      __break(0xC471u);
      return;
    }
    v10 = *((_QWORD *)this + 10);
    v11 = (_QWORD *)(v10 + 24 * v9);
    v12 = (WTF::StringImpl **)(v11 + 2);
    if (!v11[2] || WebCore::MIMETypeRegistry::isSupportedImageMIMEType(v12, v5))
    {
      if (*(_BYTE *)(v23 + 24) == 8)
      {
        v13 = *(float *)(v10 + 24 * v9 + 8);
      }
      else
      {
        v13 = *(float *)(v10 + 24 * v9 + 8);
        if (v24 == v13)
          goto LABEL_9;
      }
      if (v13 >= *((float *)this + 18))
      {
        v14 = *v11;
        if (*v11)
          ++*(_DWORD *)(v14 + 8);
        *(_QWORD *)a2 = v14;
        *(float *)(a2 + 8) = v13;
        v15 = *v12;
        if (*v12)
          *(_DWORD *)v15 += 2;
        goto LABEL_19;
      }
      WebCore::ImageWithScale::operator=((uint64_t)&v23, v10 + 24 * v9);
    }
LABEL_9:
    ++v7;
    v8 -= 8;
  }
  while (v8);
  v16 = v23;
  if (*(_BYTE *)(v23 + 24) != 8)
  {
    v17 = v24;
    if (v24 != 0.0)
      goto LABEL_23;
  }
LABEL_22:
  v18 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)(v18 + 8) = 1;
  *(_QWORD *)(v18 + 16) = 0;
  *(_BYTE *)(v18 + 24) = 8;
  *(_DWORD *)(v18 + 28) = 0;
  *(_DWORD *)(v18 + 32) = 0;
  *(_BYTE *)(v18 + 36) = 1;
  *(_QWORD *)(v18 + 48) = 0;
  *(_QWORD *)(v18 + 56) = 0;
  *(_QWORD *)(v18 + 40) = 0;
  *(_QWORD *)v18 = off_1E3442CB0;
  v20 = v18;
  v21 = 1065353216;
  v22 = 0;
  WebCore::ImageWithScale::operator=((uint64_t)&v23, &v20);
  WebCore::ImageWithScale::~ImageWithScale((WebCore::ImageWithScale *)&v20, v19);
  v16 = v23;
  v17 = v24;
LABEL_23:
  *(_QWORD *)a2 = v16;
  *(float *)(a2 + 8) = v17;
  v15 = v25;
  v23 = 0;
  v25 = 0;
LABEL_19:
  *(_QWORD *)(a2 + 16) = v15;
  WebCore::ImageWithScale::~ImageWithScale((WebCore::ImageWithScale *)&v23, v5);
}

uint64_t WebCore::ImageWithScale::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  WTF::StringImpl *v7;

  v4 = *a2;
  *a2 = 0;
  v5 = *(_DWORD **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (v5[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    else
      --v5[2];
  }
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  v6 = a2[2];
  a2[2] = 0;
  v7 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  if (v7)
  {
    if (*(_DWORD *)v7 == 2)
      WTF::StringImpl::destroy(v7, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v7 -= 2;
  }
  return a1;
}

uint64_t WebCore::ImageWithScale::operator=(uint64_t a1, uint64_t a2)
{
  WTF::StringImpl *v4;
  _DWORD *v5;
  WTF::StringImpl *v6;

  WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::operator=((_DWORD **)a1, (_QWORD *)a2);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  v5 = *(_DWORD **)(a2 + 16);
  if (v5)
    *v5 += 2;
  v6 = *(WTF::StringImpl **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v5;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v4);
    else
      *(_DWORD *)v6 -= 2;
  }
  return a1;
}

uint64_t WebCore::StyleInheritedData::fastPathInheritFrom(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _BOOL4 v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL4 v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  __int128 v32;
  __int128 v33;

  v2 = *(_QWORD *)(result + 328);
  v3 = a2[41];
  if ((v2 & 0x8000000000000) != 0)
  {
    if ((v3 & 0x8000000000000) != 0)
    {
      v28 = a2;
      v33 = *(_OWORD *)((v2 & 0xFFFFFFFFFFFFLL) + 4);
      v32 = *(_OWORD *)((v3 & 0xFFFFFFFFFFFFLL) + 4);
      v8 = result;
      v9 = WebCore::operator==<float,4ul>((float *)&v33, (float *)&v32);
      v2 = *(_QWORD *)(v8 + 328);
      if (v9 && (v10 = v28[41], HIBYTE(v2) == HIBYTE(v10)))
      {
        result = v8;
        a2 = v28;
        if (BYTE6(v2) == BYTE6(v10))
          goto LABEL_7;
      }
      else
      {
        result = v8;
        a2 = v28;
      }
    }
  }
  else if (v2 == v3 && (v3 & 0x8000000000000) == 0)
  {
    goto LABEL_7;
  }
  if ((v2 & 0x8000000000000) != 0)
  {
    v26 = result;
    v30 = a2;
    v17 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
    do
    {
      v18 = __ldaxr(v17);
      v19 = v18 - 1;
    }
    while (__stlxr(v19, v17));
    if (!v19)
    {
      atomic_store(1u, v17);
      WTF::fastFree((WTF *)v17, a2);
      result = v26;
      a2 = v30;
    }
  }
  v14 = a2[41];
  *(_QWORD *)(result + 328) = v14;
  if ((v14 & 0x8000000000000) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
LABEL_7:
  v5 = *(_QWORD *)(result + 336);
  v6 = a2[42];
  if ((v5 & 0x8000000000000) != 0)
  {
    if ((v6 & 0x8000000000000) != 0)
    {
      v29 = a2;
      v33 = *(_OWORD *)((v5 & 0xFFFFFFFFFFFFLL) + 4);
      v32 = *(_OWORD *)((v6 & 0xFFFFFFFFFFFFLL) + 4);
      v11 = result;
      v12 = WebCore::operator==<float,4ul>((float *)&v33, (float *)&v32);
      v5 = *(_QWORD *)(v11 + 336);
      if (v12 && (v13 = v29[42], HIBYTE(v5) == HIBYTE(v13)))
      {
        result = v11;
        a2 = v29;
        if (BYTE6(v5) == BYTE6(v13))
          return result;
      }
      else
      {
        result = v11;
        a2 = v29;
      }
    }
  }
  else if (v5 == v6 && (v6 & 0x8000000000000) == 0)
  {
    return result;
  }
  if ((v5 & 0x8000000000000) != 0)
  {
    v27 = result;
    v31 = a2;
    v23 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFLL);
    do
    {
      v24 = __ldaxr(v23);
      v25 = v24 - 1;
    }
    while (__stlxr(v25, v23));
    if (!v25)
    {
      atomic_store(1u, v23);
      WTF::fastFree((WTF *)v23, a2);
      result = v27;
      a2 = v31;
    }
  }
  v20 = a2[42];
  *(_QWORD *)(result + 336) = v20;
  if ((v20 & 0x8000000000000) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 + 1, v21));
  }
  return result;
}

void WebCore::StyleInvalidImage::~StyleInvalidImage(WebCore::StyleInvalidImage *this, void *a2)
{
  WTF *v2;
  void *v3;

  WebCore::StyleGeneratedImage::~StyleGeneratedImage(this, a2);
  WTF::fastFree(v2, v3);
}

uint64_t WebCore::StyleInvalidImage::image@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;

  {
    v4 = WebCore::Image::nullImage(void)::nullImage;
  }
  else
  {
    v6 = a1;
    result = WebCore::BitmapImage::create(0, 0, 0, &v7);
    a1 = v6;
    v4 = v7;
    WebCore::Image::nullImage(void)::nullImage = v7;
  }
  ++*(_DWORD *)(v4 + 8);
  *a1 = v4;
  return result;
}

uint64_t WebCore::StyleInvalidImage::computedStyleValue@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t result;

  v4 = WTF::fastCompactMalloc((WTF *)0x78);
  *(_DWORD *)v4 = 2;
  v5 = *(_BYTE *)(v4 + 6);
  *(_WORD *)(v4 + 4) = 2048;
  *(_BYTE *)(v4 + 6) = v5 & 0xFC;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  result = WTF::URL::invalidate((WTF::URL *)(v4 + 16));
  *(_BYTE *)(v4 + 56) = 0;
  *(_BYTE *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  *(_BYTE *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = 0;
  *(_BYTE *)(v4 + 96) = 1;
  *(_QWORD *)(v4 + 104) = 0;
  *(_BYTE *)(v4 + 112) = 0;
  *a1 = v4;
  return result;
}

BOOL WebCore::StyleMarqueeData::operator==(uint64_t a1, uint64_t a2)
{
  int v2;
  float *v3;
  float v4;
  float v5;
  char isCalculatedEqual;
  uint64_t v8;
  uint64_t v9;

  v2 = *(unsigned __int8 *)(a1 + 8);
  if (v2 != *(unsigned __int8 *)(a2 + 8) || (*(_BYTE *)(a1 + 9) != 0) != (*(_BYTE *)(a2 + 9) != 0))
    return 0;
  if (v2 != 13)
  {
    v3 = (float *)(a1 + 4);
    if (v2 == 11)
    {
      v8 = a2;
      v9 = a1;
      isCalculatedEqual = WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 4), (const WebCore::Length *)(a2 + 4));
      a2 = v8;
      a1 = v9;
      if ((isCalculatedEqual & 1) == 0)
        return 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 10))
        v4 = *v3;
      else
        v4 = (float)*(int *)v3;
      v5 = *(float *)(a2 + 4);
      if (!*(_BYTE *)(a2 + 10))
        v5 = (float)SLODWORD(v5);
      if (v4 != v5)
        return 0;
    }
  }
  if (*(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12) && ((*(_BYTE *)(a2 + 20) ^ *(_BYTE *)(a1 + 20)) & 0x1F) == 0)
    return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
  return 0;
}

uint64_t *WTF::Ref<WebCore::StyleFlexibleBoxData,WTF::RawPtrTraits<WebCore::StyleFlexibleBoxData>,WTF::DefaultRefDerefTraits<WebCore::StyleFlexibleBoxData>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      if (*(_BYTE *)(v3 + 16) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v5 = v3;
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 12));
        v3 = v5;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

unsigned int **WTF::Ref<WebCore::StyleMultiColData,WTF::RawPtrTraits<WebCore::StyleMultiColData>,WTF::DefaultRefDerefTraits<WebCore::StyleMultiColData>>::~Ref(unsigned int **a1, void *a2)
{
  unsigned int *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*v3 == 1)
    {
      v5 = v3[12];
      if ((_DWORD)v5 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v5])(&v7, v3 + 10);
      v3[12] = -1;
      v6 = v3[6];
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v6])(&v8, v3 + 4);
      v3[6] = -1;
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*v3;
    }
  }
  return a1;
}

uint64_t *WTF::Ref<WebCore::StyleFilterData,WTF::RawPtrTraits<WebCore::StyleFilterData>,WTF::DefaultRefDerefTraits<WebCore::StyleFilterData>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  WTF *v6;
  unsigned int **v7;
  unsigned int **v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int **v13;
  unsigned int **v14;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *(unsigned int *)(v3 + 20);
      if ((_DWORD)v5)
      {
        v7 = *(unsigned int ***)(v3 + 8);
        v8 = &v7[v5];
        do
        {
          v9 = *v7;
          *v7 = 0;
          if (v9)
          {
            v10 = v9 + 2;
            do
            {
              v11 = __ldaxr(v10);
              v12 = v11 - 1;
            }
            while (__stlxr(v12, v10));
            if (!v12)
            {
              atomic_store(1u, v9 + 2);
              v13 = v8;
              v14 = v7;
              (*(void (**)(unsigned int *))(*(_QWORD *)v9 + 8))(v9);
              v8 = v13;
              v7 = v14;
            }
          }
          ++v7;
        }
        while (v7 != v8);
      }
      v6 = *(WTF **)(v3 + 8);
      if (v6)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        WTF::fastFree(v6, a2);
      }
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t *WTF::Ref<WebCore::StyleTransformData,WTF::RawPtrTraits<WebCore::StyleTransformData>,WTF::DefaultRefDerefTraits<WebCore::StyleTransformData>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  WTF *v6;
  _DWORD **v7;
  uint64_t v8;
  _DWORD *v9;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      if (*(_BYTE *)(v3 + 36) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 32));
      }
      if (*(_BYTE *)(v3 + 28) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 24));
      }
      v5 = *(unsigned int *)(v3 + 20);
      if ((_DWORD)v5)
      {
        v7 = *(_DWORD ***)(v3 + 8);
        v8 = 8 * v5;
        do
        {
          v9 = *v7;
          *v7 = 0;
          if (v9)
          {
            if (v9[2] == 1)
              (*(void (**)(_DWORD *))(*(_QWORD *)v9 + 8))(v9);
            else
              --v9[2];
          }
          ++v7;
          v8 -= 8;
        }
        while (v8);
      }
      v6 = *(WTF **)(v3 + 8);
      if (v6)
      {
        *(_QWORD *)(v3 + 8) = 0;
        *(_DWORD *)(v3 + 16) = 0;
        WTF::fastFree(v6, a2);
      }
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

WebCore::StyleVisitedLinkColorData **WTF::Ref<WebCore::StyleVisitedLinkColorData,WTF::RawPtrTraits<WebCore::StyleVisitedLinkColorData>,WTF::DefaultRefDerefTraits<WebCore::StyleVisitedLinkColorData>>::~Ref(WebCore::StyleVisitedLinkColorData **a1)
{
  WebCore::StyleVisitedLinkColorData *v2;
  WTF *v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_DWORD *)v2 == 1)
    {
      WebCore::StyleVisitedLinkColorData::~StyleVisitedLinkColorData(v2);
      WTF::fastFree(v4, v5);
    }
    else
    {
      --*(_DWORD *)v2;
    }
  }
  return a1;
}

WebCore::StyleMultiColData *WebCore::StyleMultiColData::StyleMultiColData(WebCore::StyleMultiColData *this)
{
  *(_QWORD *)this = 1;
  *((_WORD *)this + 4) = 1;
  WebCore::BorderValue::BorderValue((uint64_t)this + 16);
  WebCore::StyleColor::StyleColor((uint64_t)this + 40);
  *((_BYTE *)this + 56) = 35;
  return this;
}

uint64_t WebCore::StyleMultiColData::copy@<X0>(WebCore::StyleMultiColData *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char **v22;

  v4 = WTF::fastMalloc((WTF *)0x40);
  *(_DWORD *)v4 = 1;
  *(_DWORD *)(v4 + 4) = *((_DWORD *)this + 1);
  *(_WORD *)(v4 + 8) = *((_WORD *)this + 4);
  v18 = &v17;
  v19 = &v17;
  v20 = &v17;
  v21 = &v17;
  v5 = *((unsigned int *)this + 6);
  if ((_DWORD)v5 == -1)
    goto LABEL_4;
  v6 = v4;
  v22 = &v18;
  ((void (*)(char ***, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v5])(&v22, (char *)this + 16);
  v7 = *((_DWORD *)this + 8);
  *(_BYTE *)(v6 + 36) = *((_BYTE *)this + 36);
  *(_DWORD *)(v6 + 32) = v7;
  v18 = &v17;
  v19 = &v17;
  v20 = &v17;
  v21 = &v17;
  v8 = *((unsigned int *)this + 12);
  if ((_DWORD)v8 == -1)
  {
LABEL_4:
    v15 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::StyleMultiColData::operator==(v15, v16);
  }
  else
  {
    v22 = &v18;
    result = ((uint64_t (*)(char ***, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v8])(&v22, (char *)this + 40);
    v10 = *(_BYTE *)(v6 + 56) & 0xFE | *((_BYTE *)this + 56) & 1;
    *(_BYTE *)(v6 + 56) = v10;
    v11 = v10 & 0xFFFFFFFD | (2 * ((*((unsigned __int8 *)this + 56) >> 1) & 1));
    *(_BYTE *)(v6 + 56) = v11;
    v12 = v11 & 0xFFFFFFFB | (4 * ((*((unsigned __int8 *)this + 56) >> 2) & 1));
    *(_BYTE *)(v6 + 56) = v12;
    v13 = v12 & 0xFFFFFFF7 | (8 * ((*((unsigned __int8 *)this + 56) >> 3) & 1));
    *(_BYTE *)(v6 + 56) = v13;
    v14 = v13 & 0xFFFFFFCF | (16 * ((*((unsigned __int8 *)this + 56) >> 4) & 3));
    *(_BYTE *)(v6 + 56) = v14;
    *(_BYTE *)(v6 + 56) = *((_BYTE *)this + 56) & 0xC0 | v14 & 0x3F;
    *a2 = v6;
  }
  return result;
}

BOOL WebCore::StyleMultiColData::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _BOOL4 v7;
  _BOOL4 v9;
  _BOOL4 v10;
  uint64_t v11;
  int v12;
  _BOOL4 v14;
  _BOOL4 v16;
  _BOOL4 v17;
  char v18;
  char *v19;

  if (*(float *)(a1 + 4) != *(float *)(a2 + 4) || *(unsigned __int16 *)(a1 + 8) != *(unsigned __int16 *)(a2 + 8))
    return 0;
  v4 = *(unsigned int *)(a1 + 24);
  v5 = *(_DWORD *)(a2 + 24);
  v7 = v5 == (_DWORD)v4 && v5 != -1;
  if ((_DWORD)v4 == -1 || !v7)
  {
    v9 = v5 == -1;
    if ((_DWORD)v4 == -1)
      v10 = v9;
    else
      v10 = v7;
    if (!v10)
      return 0;
  }
  else
  {
    v19 = &v18;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v4])(&v19, a1 + 16, a2 + 16) & 1) == 0)return 0;
  }
  if (*(float *)(a1 + 32) != *(float *)(a2 + 32) || ((*(_BYTE *)(a2 + 36) ^ *(_BYTE *)(a1 + 36)) & 0x1F) != 0)
    return 0;
  v11 = *(unsigned int *)(a1 + 48);
  v12 = *(_DWORD *)(a2 + 48);
  v14 = v12 == (_DWORD)v11 && v12 != -1;
  if ((_DWORD)v11 == -1 || !v14)
  {
    v16 = v12 == -1;
    if ((_DWORD)v11 == -1)
      v17 = v16;
    else
      v17 = v14;
    if (!v17)
      return 0;
  }
  else
  {
    v19 = &v18;
    if ((((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v11])(&v19, a1 + 40, a2 + 40) & 1) == 0)return 0;
  }
  return *(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56);
}

void WebCore::StyleMultiImage::load(WebCore::StyleMultiImage *this, WebCore::CachedResourceLoader *a2, const WebCore::ResourceLoaderOptions *a3)
{
  WTF::StringImpl *v6;
  WebCore::StyleCachedImage *v7;
  int v8;
  int v9;
  float v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  _DWORD *v14;
  WebCore::StyleCachedImage *v15;
  float v16;

  *((_BYTE *)this + 40) = 0;
  (*(void (**)(WebCore::StyleCachedImage **__return_ptr, WebCore::StyleMultiImage *, _QWORD))(*(_QWORD *)this + 232))(&v15, this, *(_QWORD *)(*((_QWORD *)a2 + 9) + 8));
  v7 = v15;
  if (!v15)
    goto LABEL_13;
  v8 = *((unsigned __int8 *)v15 + 24);
  if ((v8 - 3) <= 6)
  {
    WTF::RefPtr<WebCore::StyleImage,WTF::RawPtrTraits<WebCore::StyleImage>,WTF::DefaultRefDerefTraits<WebCore::StyleImage>>::operator=((_DWORD **)this + 4, &v15);
    (*(void (**)(_QWORD, WebCore::CachedResourceLoader *, const WebCore::ResourceLoaderOptions *))(**((_QWORD **)this + 4) + 48))(*((_QWORD *)this + 4), a2, a3);
    goto LABEL_13;
  }
  v9 = *((_DWORD *)v15 + 2);
  *((_DWORD *)v15 + 2) = v9 + 1;
  if (v8)
  {
    if (v9)
      goto LABEL_12;
    goto LABEL_24;
  }
  v10 = WebCore::StyleCachedImage::imageScaleFactor(v7);
  if (v10 == v16)
  {
    v12 = (_DWORD *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v7;
    if (v12)
    {
      v13 = v12[2] - 1;
      if (v12[2] != 1)
      {
        v7 = 0;
        goto LABEL_7;
      }
      (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    }
    v7 = 0;
  }
  else
  {
    WebCore::StyleCachedImage::copyOverridingScaleFactor(v7, v16, (uint64_t *)&v14);
    v11 = (uint64_t)v14;
    v14 = 0;
    v12 = (_DWORD *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = v11;
    if (!v12)
      goto LABEL_8;
    v13 = v12[2] - 1;
    if (v12[2] != 1)
      goto LABEL_7;
    (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
    v12 = v14;
    v14 = 0;
    if (v12)
    {
      v13 = v12[2] - 1;
      if (v12[2] == 1)
      {
        (*(void (**)(_DWORD *))(*(_QWORD *)v12 + 8))(v12);
        goto LABEL_8;
      }
LABEL_7:
      v12[2] = v13;
    }
  }
LABEL_8:
  if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 4) + 40))(*((_QWORD *)this + 4)))
    (*(void (**)(_QWORD, WebCore::CachedResourceLoader *, const WebCore::ResourceLoaderOptions *))(**((_QWORD **)this + 4) + 48))(*((_QWORD *)this + 4), a2, a3);
  if (v7)
  {
    v9 = *((_DWORD *)v7 + 2) - 1;
    if (*((_DWORD *)v7 + 2) != 1)
    {
LABEL_12:
      *((_DWORD *)v7 + 2) = v9;
      goto LABEL_13;
    }
LABEL_24:
    (*(void (**)(WebCore::StyleCachedImage *))(*(_QWORD *)v7 + 8))(v7);
  }
LABEL_13:
  WebCore::ImageWithScale::~ImageWithScale((WebCore::ImageWithScale *)&v15, v6);
}

uint64_t WebCore::StyleMultiImage::cachedImage(WebCore::StyleMultiImage *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
  return result;
}

uint64_t WebCore::StyleMultiImage::data(WebCore::StyleMultiImage *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t WebCore::StyleMultiImage::canRender(WebCore::StyleMultiImage *this, const WebCore::RenderElement *a2, float a3)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    return (*(uint64_t (**)(uint64_t, const WebCore::RenderElement *, float))(*(_QWORD *)result + 208))(result, a2, a3);
  return result;
}

uint64_t WebCore::StyleMultiImage::isPending(WebCore::StyleMultiImage *this)
{
  return *((unsigned __int8 *)this + 40);
}

uint64_t WebCore::StyleMultiImage::isLoaded(WebCore::StyleMultiImage *this, const WebCore::RenderElement *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    return (*(uint64_t (**)(uint64_t, const WebCore::RenderElement *))(*(_QWORD *)result + 56))(result, a2);
  return result;
}

uint64_t WebCore::StyleMultiImage::errorOccurred(WebCore::StyleMultiImage *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  return result;
}

float WebCore::StyleMultiImage::imageSize(WebCore::StyleMultiImage *this, const WebCore::RenderElement *a2, float a3)
{
  uint64_t v3;
  float result;

  v3 = *((_QWORD *)this + 4);
  if (!v3)
    return 0.0;
  (*(void (**)(uint64_t, const WebCore::RenderElement *, float))(*(_QWORD *)v3 + 120))(v3, a2, a3);
  return result;
}

uint64_t WebCore::StyleMultiImage::imageHasRelativeWidth(WebCore::StyleMultiImage *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 144))(result);
  return result;
}

uint64_t WebCore::StyleMultiImage::imageHasRelativeHeight(WebCore::StyleMultiImage *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 152))(result);
  return result;
}

uint64_t WebCore::StyleMultiImage::computeIntrinsicDimensions(WebCore::StyleMultiImage *this, const WebCore::RenderElement *a2, WebCore::Length *a3, WebCore::Length *a4, WebCore::FloatSize *a5)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    return (*(uint64_t (**)(uint64_t, const WebCore::RenderElement *, WebCore::Length *, WebCore::Length *, WebCore::FloatSize *))(*(_QWORD *)result + 136))(result, a2, a3, a4, a5);
  return result;
}

uint64_t WebCore::StyleMultiImage::usesImageContainerSize(WebCore::StyleMultiImage *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 128))(result);
  return result;
}

uint64_t WebCore::StyleMultiImage::setContainerContextForRenderer(WebCore::StyleMultiImage *this, const WebCore::RenderElement *a2, const WebCore::FloatSize *a3, float a4)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    return (*(uint64_t (**)(uint64_t, const WebCore::RenderElement *, const WebCore::FloatSize *, float))(*(_QWORD *)result + 216))(result, a2, a3, a4);
  return result;
}

uint64_t WebCore::StyleMultiImage::addClient(WebCore::StyleMultiImage *this, WebCore::RenderElement *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    return (*(uint64_t (**)(uint64_t, WebCore::RenderElement *))(*(_QWORD *)result + 96))(result, a2);
  return result;
}

uint64_t WebCore::StyleMultiImage::removeClient(WebCore::StyleMultiImage *this, WebCore::RenderElement *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    return (*(uint64_t (**)(uint64_t, WebCore::RenderElement *))(*(_QWORD *)result + 104))(result, a2);
  return result;
}

uint64_t WebCore::StyleMultiImage::hasClient(WebCore::StyleMultiImage *this, WebCore::RenderElement *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    return (*(uint64_t (**)(uint64_t, WebCore::RenderElement *))(*(_QWORD *)result + 112))(result, a2);
  return result;
}

uint64_t WebCore::StyleMultiImage::image@<X0>(WebCore::StyleMultiImage *this@<X0>, const WebCore::RenderElement *a2@<X1>, const WebCore::FloatSize *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    return (*(uint64_t (**)(uint64_t, const WebCore::RenderElement *, const WebCore::FloatSize *))(*(_QWORD *)result + 176))(result, a2, a3);
  *a4 = 0;
  return result;
}

float WebCore::StyleMultiImage::imageScaleFactor(WebCore::StyleMultiImage *this)
{
  uint64_t v1;
  float result;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 1.0;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 160))(v1);
  return result;
}

uint64_t WebCore::StyleMultiImage::knownToBeOpaque(WebCore::StyleMultiImage *this, const WebCore::RenderElement *a2)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    return (*(uint64_t (**)(uint64_t, const WebCore::RenderElement *))(*(_QWORD *)result + 224))(result, a2);
  return result;
}

void WebCore::StyleNamedImage::~StyleNamedImage(WebCore::StyleNamedImage *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::StyleGeneratedImage::~StyleGeneratedImage(this, a2);
}

{
  WTF::StringImpl *v3;
  WTF *v4;
  void *v5;

  v3 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::StyleGeneratedImage::~StyleGeneratedImage(this, a2);
  WTF::fastFree(v4, v5);
}

uint64_t WebCore::StyleNamedImage::operator==(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (*(_BYTE *)(a2 + 24) == 7)
    return WTF::equal(*(WTF **)(a1 + 64), *(const WTF::StringImpl **)(a2 + 64), a3);
  else
    return 0;
}

uint64_t WebCore::StyleNamedImage::computedStyleValue@<X0>(WebCore::StyleNamedImage *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v4;
  uint64_t result;
  char v6;

  v4 = (_DWORD *)*((_QWORD *)this + 8);
  if (v4)
    *v4 += 2;
  result = WTF::fastCompactMalloc((WTF *)0x18);
  *(_DWORD *)result = 2;
  v6 = *(_BYTE *)(result + 6);
  *(_WORD *)(result + 4) = 12288;
  *(_BYTE *)(result + 6) = v6 & 0xFC;
  *(_QWORD *)(result + 8) = v4;
  *(_QWORD *)(result + 16) = 0;
  *a2 = result;
  return result;
}

uint64_t WebCore::StyleNamedImage::isPending(WebCore::StyleNamedImage *this)
{
  return 0;
}

uint64_t WebCore::StyleNamedImage::image@<X0>(uint64_t this@<X0>, const WebCore::RenderElement *a2@<X1>, const WebCore::FloatSize *a3@<X2>, uint64_t *a4@<X8>)
{
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  if (a2)
  {
    if (*(float *)a3 <= 0.0 || *((float *)a3 + 1) <= 0.0)
    {
      *a4 = 0;
    }
    else
    {
      v6 = *(WTF::StringImpl **)(this + 64);
      if (v6)
      {
        *(_DWORD *)v6 += 2;
        this = WTF::fastMalloc((WTF *)0x50);
        v8 = this;
        *(_DWORD *)v6 += 2;
      }
      else
      {
        this = WTF::fastMalloc((WTF *)0x50);
        v8 = this;
      }
      *(_DWORD *)(v8 + 8) = 1;
      *(_QWORD *)(v8 + 56) = 0;
      *(_QWORD *)(v8 + 64) = 0;
      *(_OWORD *)(v8 + 16) = 0u;
      *(_OWORD *)(v8 + 32) = 0u;
      *(_WORD *)(v8 + 48) = 0;
      *(_QWORD *)v8 = off_1E340E648;
      if (v6)
      {
        *(_DWORD *)v6 += 2;
        *(_QWORD *)(v8 + 72) = v6;
        *(_QWORD *)(v8 + 64) = *(_QWORD *)a3;
        v9 = *(_DWORD *)v6 - 2;
        if (*(_DWORD *)v6 == 2)
        {
          this = WTF::StringImpl::destroy(v6, v7);
          v9 = *(_DWORD *)v6;
        }
        else
        {
          *(_DWORD *)v6 = v9;
        }
        *a4 = v8;
        v10 = v9 - 2;
        if (v10)
          *(_DWORD *)v6 = v10;
        else
          return WTF::StringImpl::destroy(v6, v7);
      }
      else
      {
        *(_QWORD *)(v8 + 72) = 0;
        *(_QWORD *)(v8 + 64) = *(_QWORD *)a3;
        *a4 = v8;
      }
    }
  }
  else
  {
    {
      v11 = WebCore::Image::nullImage(void)::nullImage;
    }
    else
    {
      this = WebCore::BitmapImage::create(0, 0, 0, &v12);
      v11 = v12;
      WebCore::Image::nullImage(void)::nullImage = v12;
    }
    ++*(_DWORD *)(v11 + 8);
    *a4 = v11;
  }
  return this;
}

uint64_t WebCore::StyleNamedImage::knownToBeOpaque(WebCore::StyleNamedImage *this, const WebCore::RenderElement *a2)
{
  return 0;
}

float WebCore::StyleNamedImage::fixedSize(WebCore::StyleNamedImage *this, const WebCore::RenderElement *a2)
{
  return 0.0;
}

uint64_t WebCore::StyleInvalidImage::operator==()
{
  return 0;
}

uint64_t WebCore::StyleInvalidImage::isPending(WebCore::StyleInvalidImage *this)
{
  return 0;
}

uint64_t WebCore::StyleInvalidImage::canRender(WebCore::StyleInvalidImage *this, const WebCore::RenderElement *a2, float a3)
{
  return 0;
}

uint64_t WebCore::StyleInvalidImage::knownToBeOpaque(WebCore::StyleInvalidImage *this, const WebCore::RenderElement *a2)
{
  return 0;
}

float WebCore::StyleInvalidImage::fixedSize(WebCore::StyleInvalidImage *this, const WebCore::RenderElement *a2)
{
  return 0.0;
}

uint64_t *WTF::Ref<WebCore::StyleBackgroundData,WTF::RawPtrTraits<WebCore::StyleBackgroundData>,WTF::DefaultRefDerefTraits<WebCore::StyleBackgroundData>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  WebCore::FillLayer *v7;
  WTF *v8;
  void *v9;
  char v10;
  char v11;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      v5 = *(unsigned int *)(v3 + 40);
      if ((_DWORD)v5 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v5])(&v10, v3 + 32);
      *(_DWORD *)(v3 + 40) = -1;
      v6 = *(unsigned int *)(v3 + 24);
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v6])(&v11, v3 + 16);
      *(_DWORD *)(v3 + 24) = -1;
      v7 = *(WebCore::FillLayer **)(v3 + 8);
      *(_QWORD *)(v3 + 8) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 1)
        {
          WebCore::FillLayer::~FillLayer(v7);
          WTF::fastFree(v8, v9);
        }
        else
        {
          --*(_DWORD *)v7;
        }
      }
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

WebCore::StyleMiscNonInheritedData **WTF::Ref<WebCore::StyleMiscNonInheritedData,WTF::RawPtrTraits<WebCore::StyleMiscNonInheritedData>,WTF::DefaultRefDerefTraits<WebCore::StyleMiscNonInheritedData>>::~Ref(WebCore::StyleMiscNonInheritedData **a1, WTF::StringImpl *a2)
{
  WebCore::StyleMiscNonInheritedData *v3;
  WTF *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::StyleMiscNonInheritedData::~StyleMiscNonInheritedData(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

WebCore::StyleRareNonInheritedData **WTF::Ref<WebCore::StyleRareNonInheritedData,WTF::RawPtrTraits<WebCore::StyleRareNonInheritedData>,WTF::DefaultRefDerefTraits<WebCore::StyleRareNonInheritedData>>::~Ref(WebCore::StyleRareNonInheritedData **a1, WTF::StringImpl *a2)
{
  WebCore::StyleRareNonInheritedData *v3;
  WTF *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

void WebCore::StylePaintImage::~StylePaintImage(WebCore::StylePaintImage *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;

  WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref((uint64_t *)this + 9, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::StyleGeneratedImage::~StyleGeneratedImage(this, v3);
}

{
  WTF::StringImpl *v3;
  WTF::StringImpl *v4;
  WTF *v5;
  void *v6;

  WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref((uint64_t *)this + 9, a2);
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, v3);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::StyleGeneratedImage::~StyleGeneratedImage(this, v3);
  WTF::fastFree(v5, v6);
}

uint64_t WebCore::StylePaintImage::operator==(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  if (*(_BYTE *)(a2 + 24) == 9)
    return WTF::equal(*(WTF **)(a2 + 64), *(const WTF::StringImpl **)(a1 + 64), a3);
  else
    return 0;
}

uint64_t *WebCore::StylePaintImage::computedStyleValue@<X0>(WebCore::StylePaintImage *this@<X0>, uint64_t *a2@<X8>)
{
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  char v7;
  WTF::StringImpl *v8;
  uint64_t v10;

  v4 = (_DWORD *)*((_QWORD *)this + 8);
  if (v4)
    *v4 += 2;
  v5 = (_DWORD *)*((_QWORD *)this + 9);
  ++*v5;
  v6 = WTF::fastCompactMalloc((WTF *)0x18);
  *(_DWORD *)v6 = 2;
  v7 = *(_BYTE *)(v6 + 6);
  *(_WORD *)(v6 + 4) = 10240;
  *(_BYTE *)(v6 + 6) = v7 & 0xFC;
  v10 = 0;
  *(_QWORD *)(v6 + 8) = v4;
  *(_QWORD *)(v6 + 16) = v5;
  *a2 = v6;
  return WTF::Ref<WebCore::CSSVariableData,WTF::RawPtrTraits<WebCore::CSSVariableData>,WTF::DefaultRefDerefTraits<WebCore::CSSVariableData>>::~Ref(&v10, v8);
}

uint64_t WebCore::StylePaintImage::isPending(WebCore::StylePaintImage *this)
{
  return 0;
}

uint64_t WebCore::StylePaintImage::image@<X0>(uint64_t this@<X0>, const WebCore::RenderElement *a2@<X1>, const WebCore::FloatSize *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  WTF::StringImpl *v10;
  unsigned int v11;
  int v12;
  WTF::StringImpl *v13;
  int i;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v19;
  unsigned int v20;
  WTF::StringImpl *v21;
  unsigned int v22;
  int v23;
  int j;
  uint64_t v25;
  WTF::StringImpl *v26;
  uint64_t v27;
  int v28;
  char *v29;
  char *v30;
  WebCore::CSSParserToken *v31;
  WebCore::CSSParserToken *v32;
  int v33;
  __int128 *v34;
  unsigned int v35;
  char v36;
  int v37;
  __int128 *v38;
  char v39;
  __int128 *v40;
  int v41;
  int v42;
  int v43;
  char *v44;
  WTF::StringImpl *v45;
  __int128 *v46;
  WTF::StringImpl *v47;
  unsigned int v48;
  WTF::StringImpl *v49;
  uint64_t v50;
  WTF::StringImpl *v51;
  WTF::StringImpl *v52;
  WTF::StringImpl *v53;
  uint64_t *v54;
  WTF *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  WTF::StringImpl *v59;
  WTF *v60;
  uint64_t v61;
  WTF::StringImpl *v62;
  uint64_t v63;
  unsigned __int8 *v64;
  WTF::StringImpl *v65;
  WTF::StringImpl *v66;
  __int128 *v67;
  WTF::StringImpl *v68;
  WTF::StringImpl *v69;
  int v70;
  char v71;
  WTF *v72;
  uint64_t v73;
  char v74;
  WTF::StringImpl *v75;

  if (a2)
  {
    if (*(float *)a3 <= 0.0)
      goto LABEL_19;
    if (*((float *)a3 + 1) <= 0.0)
      goto LABEL_19;
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 8) + 40) + 8) + 3008);
    if (!v7)
      goto LABEL_19;
    v8 = this;
    v9 = *(_DWORD *)(v7 - 8);
    v10 = *(WTF::StringImpl **)(this + 64);
    v11 = *((_DWORD *)v10 + 4);
    v12 = v11 < 0x100 ? WTF::StringImpl::hashSlowCase(v10) : v11 >> 8;
    for (i = 0; ; v12 = ++i + v15)
    {
      v15 = v12 & v9;
      this = *(_QWORD *)(v7 + 16 * v15);
      if (this != -1)
      {
        if (!this)
          goto LABEL_19;
        this = WTF::equal((WTF *)this, *(const WTF::StringImpl **)(v8 + 64), a3);
        if ((this & 1) != 0)
          break;
      }
    }
    v16 = *(_QWORD *)(v7 + 16 * v15 + 8);
    if (!v16)
    {
LABEL_19:
      *a4 = 0;
      return this;
    }
    v17 = (unsigned __int8 *)(v16 + 1056);
    if (__ldaxr((unsigned __int8 *)(v16 + 1056)))
    {
      __clrex();
    }
    else if (!__stxr(1u, v17))
    {
LABEL_22:
      v19 = *(_QWORD *)(v16 + 1048);
      if (!v19)
        goto LABEL_118;
      v20 = *(_DWORD *)(v19 - 8);
      v21 = *(WTF::StringImpl **)(v8 + 64);
      v22 = *((_DWORD *)v21 + 4);
      v23 = v22 < 0x100 ? WTF::StringImpl::hashSlowCase(v21) : v22 >> 8;
      for (j = 0; ; v23 = j + v25)
      {
        v25 = v23 & v20;
        this = *(_QWORD *)(v19 + 16 * v25);
        if (this != -1)
        {
          if (!this)
            goto LABEL_118;
          this = WTF::equal((WTF *)this, *(const WTF::StringImpl **)(v8 + 64), a3);
          if ((this & 1) != 0)
            break;
        }
        ++j;
      }
      if (*(_QWORD *)(v19 + 16 * v25 + 8))
      {
        v63 = *(_QWORD *)(v19 + 16 * v25 + 8);
        v64 = v17;
        v72 = 0;
        v73 = 0;
        v27 = *(_QWORD *)(v8 + 72);
        v28 = *(_DWORD *)(v27 + 28);
        if (v28)
        {
          v29 = *(char **)(v27 + 16);
          v30 = &v29[24 * v28];
          do
          {
            v68 = 0;
            v69 = 0;
            v70 = 0;
            v71 = 1;
            while (v29 != v30)
            {
              v31 = (WebCore::CSSParserToken *)v29;
              if (v29 >= v30)
              {
                v31 = (WebCore::CSSParserToken *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                {
                  *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
                  *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
                  v31 = (WebCore::CSSParserToken *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                }
              }
              v66 = (WTF::StringImpl *)21;
              v67 = 0;
              if (WebCore::CSSParserToken::operator==(v31, (WebCore::CSSParserToken *)&v66))
              {
                v29 += 24 * (v29 != v30);
                goto LABEL_98;
              }
              v32 = (WebCore::CSSParserToken *)v29;
              if (v29 >= v30)
              {
                v32 = (WebCore::CSSParserToken *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                {
                  *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
                  *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
                  v32 = (WebCore::CSSParserToken *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                }
              }
              v66 = (WTF::StringImpl *)31;
              v67 = 0;
              if (WebCore::CSSParserToken::operator==(v32, (WebCore::CSSParserToken *)&v66))
              {
                if (v29 == v30)
                {
                  {
                    *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
                    *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
                  }
                  break;
                }
                v29 += 24;
              }
              else
              {
                if (v29 >= v30)
                {
                  LOBYTE(v48) = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                  {
                    v48 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
                    WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v48;
                  }
                  v33 = v48 & 0xC0;
                  v34 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                }
                else
                {
                  v33 = *(_DWORD *)v29 & 0xC0;
                  v34 = (__int128 *)v29;
                }
                if (v33 == 64)
                {
                  WebCore::CSSParserToken::serialize((char *)v34, (WTF::StringBuilder *)&v68, 0, 0);
                  v35 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                  if (v29 >= v30)
                    v36 = 1;
                  else
                  if (v29 >= v30
                  {
                    v35 = WebCore::CSSParserTokenRange::eofToken(void)::eofToken & 0xFF000000 | 0x1E;
                    WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v35;
                    v36 = 1;
                    v34 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                  }
                  v37 = 0;
                  v38 = (__int128 *)v29;
                  v39 = v36;
                  while (1)
                  {
                    if (v38 == (__int128 *)v30)
                    {
                      if ((v39 & 1) != 0)
                      {
                        v40 = (__int128 *)v30;
                      }
                      else
                      {
                        v35 = v35 & 0xFF000000 | 0x1E;
                        WebCore::CSSParserTokenRange::eofToken(void)::eofToken = v35;
                        v36 = 1;
                        v40 = (__int128 *)v29;
                      }
                      v39 = 1;
                      v38 = &WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                    }
                    else
                    {
                      v29 = (char *)v38 + 24;
                      v40 = (__int128 *)((char *)v38 + 24);
                    }
                    v41 = *(_DWORD *)v38 >> 6;
                    v42 = v41 == 2 ? -1 : 0;
                    v43 = v41 == 1 ? 1 : v42;
                    v37 += v43;
                    if (!v37)
                      break;
                    v38 = v40;
                    if (v40 >= (__int128 *)v30)
                    {
                      if ((v36 & 1) == 0)
                      {
                        *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
                        *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
                      }
                      goto LABEL_79;
                    }
                  }
                  if ((v36 & 1) == 0)
                  {
                    *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
                    *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
                  }
                  v40 = (__int128 *)((char *)v40 - 24);
LABEL_79:
                  if ((__int128 *)((char *)v34 + 24) == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
                    v45 = (WTF::StringImpl *)v30;
                  else
                    v45 = (WTF::StringImpl *)((char *)v34 + 24);
                  if (v40 == &WebCore::CSSParserTokenRange::eofToken(void)::eofToken)
                    v46 = (__int128 *)v30;
                  else
                    v46 = v40;
                  v66 = v45;
                  v67 = v46;
                  WebCore::CSSParserTokenRange::serialize((char **)&v66, 0, &v65);
                  v75 = v65;
                  v74 = 41;
                  WTF::StringBuilder::appendFromAdapters<WTF::StringTypeAdapter<WTF::String,void>,WTF::StringTypeAdapter<char,void>>((WTF::StringBuilder *)&v68, (uint64_t *)&v75, &v74);
                  v47 = v65;
                  v65 = 0;
                  if (v47)
                  {
                    if (*(_DWORD *)v47 == 2)
                      WTF::StringImpl::destroy(v47, v26);
                    else
                      *(_DWORD *)v47 -= 2;
                  }
                }
                else
                {
                  if (v29 == v30)
                  {
                    v44 = v30;
                    v29 = (char *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                    {
                      *(_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken = (BYTE3(WebCore::CSSParserTokenRange::eofToken(void)::eofToken) << 24) | 0x1ELL;
                      *((_QWORD *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken + 1) = 0;
                      v44 = v30;
                      v29 = (char *)&WebCore::CSSParserTokenRange::eofToken(void)::eofToken;
                    }
                  }
                  else
                  {
                    v44 = v29 + 24;
                  }
                  WebCore::CSSParserToken::serialize(v29, (WTF::StringBuilder *)&v68, 0, 0);
                  v29 = v44;
                }
              }
            }
            v29 = v30;
LABEL_98:
            v49 = v68;
            if (v68
              || (WTF::StringBuilder::shrinkToFit((WTF::StringBuilder *)&v68),
                  WTF::StringBuilder::reifyString((WTF::StringBuilder *)&v68),
                  (v49 = v68) != 0))
            {
              *(_DWORD *)v49 += 2;
            }
            v66 = v49;
            LODWORD(v50) = HIDWORD(v73);
            if (HIDWORD(v73) == (_DWORD)v73)
            {
              v54 = (uint64_t *)WTF::Vector<WTF::String,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)&v72, HIDWORD(v73) + 1, (unint64_t)&v66);
              v50 = HIDWORD(v73);
              v55 = v72;
              v56 = *v54;
              *v54 = 0;
              *((_QWORD *)v55 + v50) = v56;
            }
            else
            {
              v66 = 0;
              *((_QWORD *)v72 + HIDWORD(v73)) = v49;
            }
            HIDWORD(v73) = v50 + 1;
            v51 = v66;
            v66 = 0;
            if (v51)
            {
              if (*(_DWORD *)v51 == 2)
                WTF::StringImpl::destroy(v51, v26);
              else
                *(_DWORD *)v51 -= 2;
            }
            v52 = v69;
            v69 = 0;
            if (v52)
            {
              if (*(_DWORD *)v52 == 2)
                WTF::StringImpl::destroy(v52, v26);
              else
                *(_DWORD *)v52 -= 2;
            }
            v53 = v68;
            v68 = 0;
            if (v53)
            {
              if (*(_DWORD *)v53 == 2)
                WTF::StringImpl::destroy(v53, v26);
              else
                *(_DWORD *)v53 -= 2;
            }
          }
          while (v29 != v30);
        }
        v58 = WTF::fastMalloc((WTF *)0x78);
        *a4 = WebCore::CustomPaintImage::CustomPaintImage(v58, v63, a3, (uint64_t)a2, (uint64_t)&v72);
        v17 = v64;
        if (HIDWORD(v73))
        {
          v60 = v72;
          v61 = 8 * HIDWORD(v73);
          do
          {
            v62 = *(WTF::StringImpl **)v60;
            *(_QWORD *)v60 = 0;
            if (v62)
            {
              if (*(_DWORD *)v62 == 2)
                WTF::StringImpl::destroy(v62, v59);
              else
                *(_DWORD *)v62 -= 2;
            }
            v60 = (WTF *)((char *)v60 + 8);
            v61 -= 8;
          }
          while (v61);
        }
        this = (uint64_t)v72;
        if (v72)
        {
          v72 = 0;
          LODWORD(v73) = 0;
          this = WTF::fastFree((WTF *)this, v59);
        }
      }
      else
      {
LABEL_118:
        *a4 = 0;
      }
      v57 = __ldxr(v17);
      if (v57 == 1)
      {
        if (!__stlxr(0, v17))
          return this;
      }
      else
      {
        __clrex();
      }
      return WTF::Lock::unlockSlow((WTF::Lock *)v17);
    }
    this = MEMORY[0x19AEA534C](v16 + 1056);
    goto LABEL_22;
  }
  {
    v13 = (WTF::StringImpl *)WebCore::Image::nullImage(void)::nullImage;
  }
  else
  {
    this = WebCore::BitmapImage::create(0, 0, 0, (uint64_t *)&v68);
    v13 = v68;
    WebCore::Image::nullImage(void)::nullImage = (uint64_t)v68;
  }
  ++*((_DWORD *)v13 + 2);
  *a4 = v13;
  return this;
}

uint64_t WebCore::StylePaintImage::knownToBeOpaque(WebCore::StylePaintImage *this, const WebCore::RenderElement *a2)
{
  return 0;
}

float WebCore::StylePaintImage::fixedSize(WebCore::StylePaintImage *this, const WebCore::RenderElement *a2)
{
  return 0.0;
}

WebCore::StyleCustomPropertyData **WTF::Ref<WebCore::StyleCustomPropertyData,WTF::RawPtrTraits<WebCore::StyleCustomPropertyData>,WTF::DefaultRefDerefTraits<WebCore::StyleCustomPropertyData>>::~Ref(WebCore::StyleCustomPropertyData **a1, WTF::StringImpl *a2)
{
  WebCore::StyleCustomPropertyData *v3;
  WTF *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::StyleCustomPropertyData::~StyleCustomPropertyData(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

void WebCore::StyleRareInheritedData::copy(WebCore::StyleRareInheritedData *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = WTF::fastMalloc((WTF *)0x1A0);
  WebCore::StyleRareInheritedData::StyleRareInheritedData(v4, (uint64_t)this);
  *a2 = v5;
}

uint64_t *WTF::Ref<WebCore::StyleMarqueeData,WTF::RawPtrTraits<WebCore::StyleMarqueeData>,WTF::DefaultRefDerefTraits<WebCore::StyleMarqueeData>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      if (*(_BYTE *)(v3 + 8) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v5 = v3;
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 4));
        v3 = v5;
      }
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

WebCore::StyleGridData **WTF::Ref<WebCore::StyleGridData,WTF::RawPtrTraits<WebCore::StyleGridData>,WTF::DefaultRefDerefTraits<WebCore::StyleGridData>>::~Ref(WebCore::StyleGridData **a1, void *a2)
{
  WebCore::StyleGridData *v3;
  WTF *v5;
  void *v6;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      WebCore::StyleGridData::~StyleGridData(v3, a2);
      WTF::fastFree(v5, v6);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

void WebCore::StyleRareNonInheritedData::~StyleRareNonInheritedData(WebCore::StyleRareNonInheritedData *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;
  uint64_t v4;
  WTF *v5;
  WTF::StringImpl *v6;
  uint64_t v7;
  WTF *v8;
  uint64_t v9;
  WTF *v10;
  WTF *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  WTF *v15;
  WTF *v16;
  uint64_t v17;
  WTF *v18;
  WTF::StringImpl *v19;
  uint64_t v20;
  WTF *v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  WebCore::StyleCustomPropertyData *v27;
  uint64_t v28;
  _DWORD *v29;
  WTF *v30;
  WebCore::NinePieceImage::Data *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  WTF::StringImpl **v35;
  WebCore::StyleGridData *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  WTF::StringImpl **v40;
  WTF::StringImpl *v41;
  _DWORD *v42;
  _DWORD *v43;
  WebCore::NinePieceImage::Data *v44;
  uint64_t v45;
  WTF *v46;
  WTF *v47;
  void *v48;
  WTF *v49;
  void *v50;
  WTF *v51;
  void *v52;
  WTF::StringImpl **v53;
  uint64_t v54;
  WTF::StringImpl *v55;
  WTF::StringImpl **v56;
  uint64_t v57;
  WTF::StringImpl *v58;
  WTF::StringImpl **v59;
  uint64_t v60;
  WTF::StringImpl *v61;
  unsigned int **v62;
  unsigned int **v63;
  unsigned int *v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int v67;
  WTF *v68;
  void *v69;
  unsigned int *v70;
  uint64_t v71;
  _DWORD **v72;
  uint64_t v73;
  _DWORD *v74;
  _DWORD **v75;
  uint64_t v76;
  _DWORD *v77;
  WTF::StringImpl **v78;
  uint64_t v79;
  WTF::StringImpl *v80;
  uint64_t v81;
  WTF::StringImpl **v82;
  WTF::StringImpl *v83;
  unsigned int **v84;
  uint64_t v85;
  unsigned int *v86;
  uint64_t v87;
  unsigned int *v88;
  char v89;

  if (*((_BYTE *)this + 632) && *((_BYTE *)this + 628) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 156));
  }
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 77);
  *((_QWORD *)this + 77) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v4 = *((unsigned int *)this + 153);
  if ((_DWORD)v4)
  {
    v53 = (WTF::StringImpl **)*((_QWORD *)this + 75);
    v54 = 8 * v4;
    do
    {
      v55 = *v53;
      *v53 = 0;
      if (v55)
      {
        if (*(_DWORD *)v55 == 2)
          WTF::StringImpl::destroy(v55, a2);
        else
          *(_DWORD *)v55 -= 2;
      }
      ++v53;
      v54 -= 8;
    }
    while (v54);
  }
  v5 = (WTF *)*((_QWORD *)this + 75);
  if (v5)
  {
    *((_QWORD *)this + 75) = 0;
    *((_DWORD *)this + 152) = 0;
    WTF::fastFree(v5, a2);
  }
  v6 = (WTF::StringImpl *)*((_QWORD *)this + 74);
  *((_QWORD *)this + 74) = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, a2);
    else
      *(_DWORD *)v6 -= 2;
  }
  v7 = *((unsigned int *)this + 145);
  if ((_DWORD)v7)
  {
    v56 = (WTF::StringImpl **)*((_QWORD *)this + 71);
    v57 = 8 * v7;
    do
    {
      v58 = *v56;
      *v56 = 0;
      if (v58)
      {
        if (*(_DWORD *)v58 == 2)
          WTF::StringImpl::destroy(v58, a2);
        else
          *(_DWORD *)v58 -= 2;
      }
      ++v56;
      v57 -= 8;
    }
    while (v57);
  }
  v8 = (WTF *)*((_QWORD *)this + 71);
  if (v8)
  {
    *((_QWORD *)this + 71) = 0;
    *((_DWORD *)this + 144) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *((unsigned int *)this + 141);
  v10 = (WTF *)*((_QWORD *)this + 69);
  if ((_DWORD)v9)
  {
    v70 = (unsigned int *)((char *)v10 + 12);
    v71 = 24 * v9;
    do
    {
      if (*((_BYTE *)v70 + 8) && *((_BYTE *)v70 + 4) == 11)
      {
        v85 = v71;
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v86 = v70;
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*v70);
        v70 = v86;
        v71 = v85;
      }
      if (*((_BYTE *)v70 - 4) && *((_BYTE *)v70 - 8) == 11)
      {
        v87 = v71;
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        v88 = v70;
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(v70 - 3));
        v70 = v88;
        v71 = v87;
      }
      v70 += 6;
      v71 -= 24;
    }
    while (v71);
    v10 = (WTF *)*((_QWORD *)this + 69);
  }
  if (v10)
  {
    *((_QWORD *)this + 69) = 0;
    *((_DWORD *)this + 140) = 0;
    WTF::fastFree(v10, a2);
  }
  v11 = (WTF *)*((_QWORD *)this + 67);
  if (v11)
  {
    *((_QWORD *)this + 67) = 0;
    *((_DWORD *)this + 136) = 0;
    WTF::fastFree(v11, a2);
  }
  v12 = *((unsigned int *)this + 133);
  if ((_DWORD)v12)
  {
    v72 = (_DWORD **)*((_QWORD *)this + 65);
    v73 = 8 * v12;
    do
    {
      v74 = *v72;
      *v72 = 0;
      if (v74)
      {
        if (v74[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v74 + 8))(v74);
        else
          --v74[2];
      }
      ++v72;
      v73 -= 8;
    }
    while (v73);
  }
  v13 = (WTF *)*((_QWORD *)this + 65);
  if (v13)
  {
    *((_QWORD *)this + 65) = 0;
    *((_DWORD *)this + 132) = 0;
    WTF::fastFree(v13, a2);
  }
  v14 = *((unsigned int *)this + 129);
  if ((_DWORD)v14)
  {
    v59 = (WTF::StringImpl **)*((_QWORD *)this + 63);
    v60 = 8 * v14;
    do
    {
      v61 = *v59;
      *v59 = 0;
      if (v61)
      {
        if (*(_DWORD *)v61 == 2)
          WTF::StringImpl::destroy(v61, a2);
        else
          *(_DWORD *)v61 -= 2;
      }
      ++v59;
      v60 -= 8;
    }
    while (v60);
  }
  v15 = (WTF *)*((_QWORD *)this + 63);
  if (v15)
  {
    *((_QWORD *)this + 63) = 0;
    *((_DWORD *)this + 128) = 0;
    WTF::fastFree(v15, a2);
  }
  v16 = (WTF *)*((_QWORD *)this + 61);
  if (v16)
  {
    *((_QWORD *)this + 61) = 0;
    *((_DWORD *)this + 124) = 0;
    WTF::fastFree(v16, a2);
  }
  v17 = *((unsigned int *)this + 121);
  if ((_DWORD)v17)
  {
    v75 = (_DWORD **)*((_QWORD *)this + 59);
    v76 = 8 * v17;
    do
    {
      v77 = *v75;
      *v75 = 0;
      if (v77)
      {
        if (v77[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v77 + 8))(v77);
        else
          --v77[2];
      }
      ++v75;
      v76 -= 8;
    }
    while (v76);
  }
  v18 = (WTF *)*((_QWORD *)this + 59);
  if (v18)
  {
    *((_QWORD *)this + 59) = 0;
    *((_DWORD *)this + 120) = 0;
    WTF::fastFree(v18, a2);
  }
  if (*((_BYTE *)this + 456) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 113));
  }
  if (*((_BYTE *)this + 436) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 108));
  }
  if (*((_BYTE *)this + 428) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 106));
  }
  if (*((_BYTE *)this + 420) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 104));
  }
  if (*((_BYTE *)this + 412) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 102));
  }
  if (*((_BYTE *)this + 404) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 100));
  }
  if (*((_BYTE *)this + 396) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 98));
  }
  if (*((_BYTE *)this + 384) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 95));
  }
  if (*((_BYTE *)this + 368))
  {
    v19 = (WTF::StringImpl *)*((_QWORD *)this + 44);
    *((_QWORD *)this + 44) = 0;
    if (v19)
    {
      if (*(_DWORD *)v19 == 2)
        WTF::StringImpl::destroy(v19, a2);
      else
        *(_DWORD *)v19 -= 2;
    }
  }
  v20 = *((unsigned int *)this + 87);
  if ((_DWORD)v20)
  {
    v78 = (WTF::StringImpl **)*((_QWORD *)this + 42);
    v79 = 16 * v20;
    do
    {
      v80 = *v78;
      *v78 = 0;
      if (v80)
      {
        if (*(_DWORD *)v80 == 2)
          WTF::StringImpl::destroy(v80, a2);
        else
          *(_DWORD *)v80 -= 2;
      }
      v78 += 2;
      v79 -= 16;
    }
    while (v79);
  }
  v21 = (WTF *)*((_QWORD *)this + 42);
  if (v21)
  {
    *((_QWORD *)this + 42) = 0;
    *((_DWORD *)this + 86) = 0;
    WTF::fastFree(v21, a2);
  }
  v22 = (_DWORD *)*((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v22)
  {
    if (v22[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v22 + 8))(v22);
    else
      --v22[2];
  }
  v23 = (_DWORD *)*((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v23)
  {
    if (v23[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v23 + 8))(v23);
    else
      --v23[2];
  }
  v24 = (_DWORD *)*((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v24)
  {
    if (v24[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v24 + 8))(v24);
    else
      --v24[2];
  }
  v25 = (_DWORD *)*((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (v25)
  {
    if (v25[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v25 + 8))(v25);
    else
      --v25[2];
  }
  v26 = *((_QWORD *)this + 37);
  if (v26)
  {
    v39 = *(unsigned int *)(v26 - 4);
    if ((_DWORD)v39)
    {
      v40 = (WTF::StringImpl **)*((_QWORD *)this + 37);
      do
      {
        v41 = *v40;
        if (*v40 != (WTF::StringImpl *)-1)
        {
          *v40 = 0;
          if (v41)
          {
            if (*(_DWORD *)v41 == 2)
              WTF::StringImpl::destroy(v41, a2);
            else
              *(_DWORD *)v41 -= 2;
          }
        }
        ++v40;
        --v39;
      }
      while (v39);
    }
    WTF::fastFree((WTF *)(v26 - 16), a2);
  }
  v27 = (WebCore::StyleCustomPropertyData *)*((_QWORD *)this + 36);
  *((_QWORD *)this + 36) = 0;
  if (v27)
  {
    if (*(_DWORD *)v27 == 1)
    {
      WebCore::StyleCustomPropertyData::~StyleCustomPropertyData(v27, a2);
      WTF::fastFree(v51, v52);
    }
    else
    {
      --*(_DWORD *)v27;
    }
  }
  v28 = *((unsigned int *)this + 70);
  if ((_DWORD)v28 != -1)
    ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v28])(&v89, (char *)this + 272);
  *((_DWORD *)this + 70) = -1;
  v29 = (_DWORD *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 33) = 0;
  if (v29)
  {
    if (v29[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v29 + 8))(v29);
    else
      --v29[2];
  }
  if (*((_BYTE *)this + 252) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 62));
  }
  v30 = (WTF *)*((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 1)
    {
      v42 = (_DWORD *)*((_QWORD *)v30 + 2);
      *((_QWORD *)v30 + 2) = 0;
      if (v42)
      {
        if (v42[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v42 + 8))(v42);
        else
          --v42[2];
      }
      v43 = (_DWORD *)*((_QWORD *)v30 + 1);
      *((_QWORD *)v30 + 1) = 0;
      if (v43)
      {
        if (v43[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v43 + 8))(v43);
        else
          --v43[2];
      }
      WTF::fastFree(v30, a2);
    }
    else
    {
      --*(_DWORD *)v30;
    }
  }
  if (*((_BYTE *)this + 236) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 58));
  }
  if (*((_BYTE *)this + 228) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 56));
  }
  v31 = (WebCore::NinePieceImage::Data *)*((_QWORD *)this + 27);
  *((_QWORD *)this + 27) = 0;
  if (v31)
  {
    if (*(_DWORD *)v31 == 1)
    {
      WebCore::NinePieceImage::Data::~Data(v31);
      WTF::fastFree(v49, v50);
    }
    else
    {
      --*(_DWORD *)v31;
    }
  }
  v32 = *((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 1)
    {
      v44 = *(WebCore::NinePieceImage::Data **)(v32 + 16);
      *(_QWORD *)(v32 + 16) = 0;
      if (v44)
      {
        if (*(_DWORD *)v44 == 1)
        {
          WebCore::NinePieceImage::Data::~Data(v44);
          WTF::fastFree(v68, v69);
        }
        else
        {
          --*(_DWORD *)v44;
        }
      }
      if (*(_BYTE *)(v32 + 12) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v32 + 8));
      }
      WTF::fastFree((WTF *)v32, a2);
    }
    else
    {
      --*(_DWORD *)v32;
    }
  }
  v33 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v33)
    WTF::RefCounted<WebCore::WillChangeData>::deref(v33, a2);
  v34 = *((_QWORD *)this + 24);
  if (v34)
  {
    v81 = *(unsigned int *)(v34 - 4);
    if ((_DWORD)v81)
    {
      v82 = (WTF::StringImpl **)*((_QWORD *)this + 24);
      do
      {
        v83 = *v82;
        if (*v82 != (WTF::StringImpl *)-1)
        {
          *v82 = 0;
          if (v83)
          {
            if (*(_DWORD *)v83 == 2)
              WTF::StringImpl::destroy(v83, a2);
            else
              *(_DWORD *)v83 -= 2;
          }
        }
        v82 += 4;
        --v81;
      }
      while (v81);
    }
    WTF::fastFree((WTF *)(v34 - 16), a2);
  }
  if (*((_BYTE *)this + 188) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 46));
  }
  if (*((_BYTE *)this + 180) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 44));
  }
  if (*((_BYTE *)this + 172) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 42));
  }
  if (*((_BYTE *)this + 164) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 40));
  }
  if (*((_BYTE *)this + 156) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 38));
  }
  if (*((_BYTE *)this + 148) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 36));
  }
  if (*((_BYTE *)this + 140) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 34));
  }
  if (*((_BYTE *)this + 132) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 32));
  }
  if (*((_BYTE *)this + 124) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 30));
  }
  if (*((_BYTE *)this + 116) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 28));
  }
  if (*((_BYTE *)this + 108) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 26));
  }
  if (*((_BYTE *)this + 100) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 24));
  }
  v35 = (WTF::StringImpl **)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (v35)
    WTF::RefCounted<WebCore::StyleGridItemData>::deref(v35, a2);
  v36 = (WebCore::StyleGridData *)*((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v36)
  {
    if (*(_DWORD *)v36 == 1)
    {
      WebCore::StyleGridData::~StyleGridData(v36, a2);
      WTF::fastFree(v47, v48);
    }
    else
    {
      --*(_DWORD *)v36;
    }
  }
  v37 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v37)
  {
    if (*(_DWORD *)v37 == 1)
    {
      v45 = *(unsigned int *)(v37 + 20);
      if ((_DWORD)v45)
      {
        v62 = *(unsigned int ***)(v37 + 8);
        v63 = &v62[v45];
        do
        {
          v64 = *v62;
          *v62 = 0;
          if (v64)
          {
            v65 = v64 + 2;
            do
            {
              v66 = __ldaxr(v65);
              v67 = v66 - 1;
            }
            while (__stlxr(v67, v65));
            if (!v67)
            {
              atomic_store(1u, v64 + 2);
              v84 = v63;
              (*(void (**)(unsigned int *))(*(_QWORD *)v64 + 8))(v64);
              v63 = v84;
            }
          }
          ++v62;
        }
        while (v62 != v63);
      }
      v46 = *(WTF **)(v37 + 8);
      if (v46)
      {
        *(_QWORD *)(v37 + 8) = 0;
        *(_DWORD *)(v37 + 16) = 0;
        WTF::fastFree(v46, a2);
      }
      WTF::fastFree((WTF *)v37, a2);
    }
    else
    {
      --*(_DWORD *)v37;
    }
  }
  v38 = *((_QWORD *)this + 8);
  *((_QWORD *)this + 8) = 0;
  if (v38)
  {
    if (*(_DWORD *)v38 == 1)
    {
      if (*(_BYTE *)(v38 + 8) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v38 + 4));
      }
      WTF::fastFree((WTF *)v38, a2);
    }
    else
    {
      --*(_DWORD *)v38;
    }
  }
  if (*((_BYTE *)this + 40) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 9));
  }
  if (*((_BYTE *)this + 32) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 7));
  }
  if (*((_BYTE *)this + 24) && *((_BYTE *)this + 20) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 4));
  }
  if (*((_BYTE *)this + 12) && *((_BYTE *)this + 8) == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*((unsigned int *)this + 1));
  }
}

uint64_t WebCore::StyleRareNonInheritedData::operator==(uint64_t a1, uint64_t a2, const WTF::StringImpl *a3)
{
  int v5;
  BOOL v6;
  int v7;
  float v8;
  float v9;
  int v10;
  float v11;
  float v12;
  int v13;
  WebCore::Length *v14;
  float v15;
  float v16;
  int v17;
  WebCore::Length *v18;
  float v19;
  float v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  WTF **v28;
  const WTF::StringImpl **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  WebCore::Length *v37;
  float v38;
  float v39;
  int v40;
  WebCore::Length *v41;
  float v42;
  float v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  WebCore::Length *v47;
  float v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  WTF **v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  float v71;
  float v72;
  int v73;
  float v74;
  float v75;
  int v76;
  WebCore::Length *v77;
  float v78;
  float v79;
  int v80;
  float v81;
  float v82;
  int v83;
  float v84;
  float v85;
  int v86;
  float v87;
  float v88;
  int v89;
  float v90;
  float v91;
  unsigned int v92;
  uint64_t v93;
  size_t v94;
  uint64_t v95;
  uint64_t v96;
  size_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  float v102;
  float v103;
  unint64_t v104;
  _QWORD *v105;
  unsigned __int8 *v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  unsigned __int8 *v109;
  uint64_t v110;
  unint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  unsigned __int8 *v115;
  unsigned __int8 *v116;
  uint64_t v117;
  unint64_t v118;
  int v119;
  int v120;
  int v121;
  uint64_t v122;

  v5 = *(unsigned __int8 *)(a2 + 12);
  if (*(_BYTE *)(a1 + 12))
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
  {
    if ((*(_BYTE *)(a1 + 12) != 0) != (v5 != 0))
      return 0;
  }
  else
  {
    v10 = *(unsigned __int8 *)(a1 + 8);
    if (v10 != *(unsigned __int8 *)(a2 + 8) || (*(_BYTE *)(a1 + 9) != 0) != (*(_BYTE *)(a2 + 9) != 0))
      return 0;
    if (v10 != 13)
    {
      if (v10 == 11)
      {
        if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 4), (const WebCore::Length *)(a2 + 4)) & 1) == 0)
          return 0;
      }
      else
      {
        v11 = *(float *)(a1 + 4);
        if (!*(_BYTE *)(a1 + 10))
          v11 = (float)SLODWORD(v11);
        v12 = *(float *)(a2 + 4);
        if (!*(_BYTE *)(a2 + 10))
          v12 = (float)SLODWORD(v12);
        if (v11 != v12)
          return 0;
      }
    }
  }
  if (*(_BYTE *)(a1 + 24) && *(_BYTE *)(a2 + 24))
  {
    v7 = *(unsigned __int8 *)(a1 + 20);
    if (v7 != *(unsigned __int8 *)(a2 + 20) || (*(_BYTE *)(a1 + 21) != 0) != (*(_BYTE *)(a2 + 21) != 0))
      return 0;
    if (v7 != 13)
    {
      if (v7 == 11)
      {
        if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 16), (const WebCore::Length *)(a2 + 16)) & 1) == 0)
          return 0;
      }
      else
      {
        v8 = *(float *)(a1 + 16);
        if (!*(_BYTE *)(a1 + 22))
          v8 = (float)SLODWORD(v8);
        v9 = *(float *)(a2 + 16);
        if (!*(_BYTE *)(a2 + 22))
          v9 = (float)SLODWORD(v9);
        if (v8 != v9)
          return 0;
      }
    }
  }
  else if ((*(_BYTE *)(a1 + 24) != 0) != (*(_BYTE *)(a2 + 24) != 0))
  {
    return 0;
  }
  v13 = *(unsigned __int8 *)(a1 + 32);
  if (v13 != *(unsigned __int8 *)(a2 + 32) || (*(_BYTE *)(a1 + 33) != 0) != (*(_BYTE *)(a2 + 33) != 0))
    return 0;
  if (v13 != 13)
  {
    v14 = (WebCore::Length *)(a1 + 28);
    if (v13 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v14, (const WebCore::Length *)(a2 + 28)) & 1) == 0)
        return 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 34))
        v15 = *(float *)v14;
      else
        v15 = (float)*(int *)v14;
      v16 = *(float *)(a2 + 28);
      if (!*(_BYTE *)(a2 + 34))
        v16 = (float)SLODWORD(v16);
      if (v15 != v16)
        return 0;
    }
  }
  v17 = *(unsigned __int8 *)(a1 + 40);
  if (v17 != *(unsigned __int8 *)(a2 + 40) || (*(_BYTE *)(a1 + 41) != 0) != (*(_BYTE *)(a2 + 41) != 0))
    return 0;
  if (v17 != 13)
  {
    v18 = (WebCore::Length *)(a1 + 36);
    if (v17 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v18, (const WebCore::Length *)(a2 + 36)) & 1) == 0)
        return 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 42))
        v19 = *(float *)v18;
      else
        v19 = (float)*(int *)v18;
      v20 = *(float *)(a2 + 36);
      if (!*(_BYTE *)(a2 + 42))
        v20 = (float)SLODWORD(v20);
      if (v19 != v20)
        return 0;
    }
  }
  if ((*(_BYTE *)(a1 + 44) == 0) == (*(_BYTE *)(a2 + 44) != 0) || *(_DWORD *)(a1 + 48) != *(_DWORD *)(a2 + 48))
    return 0;
  result = 0;
  if (*(_DWORD *)(a1 + 52) != *(_DWORD *)(a2 + 52))
    return result;
  if (*(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
    return result;
  v22 = *(_QWORD *)(a1 + 64);
  v23 = *(_QWORD *)(a2 + 64);
  if (v22 != v23)
  {
    result = WebCore::StyleMarqueeData::operator==(v22, v23);
    if (!(_DWORD)result)
      return result;
  }
  v24 = *(_QWORD *)(a1 + 72);
  v25 = *(_QWORD *)(a2 + 72);
  if (v24 != v25)
  {
    result = WebCore::StyleFilterData::operator==(v24, v25);
    if (!(_DWORD)result)
      return result;
  }
  v26 = *(_QWORD *)(a1 + 80);
  v27 = *(_QWORD *)(a2 + 80);
  if (v26 != v27)
  {
    result = WebCore::StyleGridData::operator==(v26, v27, a3);
    if (!(_DWORD)result)
      return result;
  }
  v28 = *(WTF ***)(a1 + 88);
  v29 = *(const WTF::StringImpl ***)(a2 + 88);
  if (v28 != v29)
  {
    result = WebCore::StyleGridItemData::operator==(v28, v29, a3);
    if (!(_DWORD)result)
      return result;
  }
  result = WebCore::operator==((unsigned __int8 *)(a1 + 96), (unsigned __int8 *)(a2 + 96));
  if (!(_DWORD)result)
    return result;
  result = WebCore::operator==((unsigned __int8 *)(a1 + 128), (unsigned __int8 *)(a2 + 128));
  if (!(_DWORD)result)
    return result;
  result = WebCore::operator==((unsigned __int8 *)(a1 + 160), (unsigned __int8 *)(a2 + 160));
  if (!(_DWORD)result)
    return result;
  result = WTF::operator==<WTF::AtomString,WebCore::CounterDirectives,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::CounterDirectives>,WTF::HashTableTraits>((_QWORD **)(a1 + 192), (uint64_t *)(a2 + 192));
  if (!(_DWORD)result)
    return result;
  v30 = *(_QWORD *)(a1 + 200);
  v31 = *(_QWORD *)(a2 + 200);
  if (v30 != v31)
  {
    result = 0;
    if (!v30)
      return result;
    if (!v31)
      return result;
    result = WebCore::WillChangeData::operator==(*(_QWORD *)(a1 + 200), v31);
    if (!(_DWORD)result)
      return result;
  }
  v32 = *(_QWORD *)(a1 + 208);
  v33 = *(_QWORD *)(a2 + 208);
  if (v32 != v33)
  {
    result = 0;
    if (!v32)
      return result;
    if (!v33)
      return result;
    result = WebCore::StyleReflection::operator==(*(_QWORD *)(a1 + 208), v33);
    if (!(_DWORD)result)
      return result;
  }
  v34 = *(_QWORD *)(a1 + 216);
  v35 = *(_QWORD *)(a2 + 216);
  if (v34 != v35)
  {
    result = WebCore::NinePieceImage::Data::operator==(v34, v35);
    if (!(_DWORD)result)
      return result;
  }
  v36 = *(unsigned __int8 *)(a1 + 228);
  if (v36 != *(unsigned __int8 *)(a2 + 228) || (*(_BYTE *)(a1 + 229) != 0) != (*(_BYTE *)(a2 + 229) != 0))
    return 0;
  if (v36 != 13)
  {
    v37 = (WebCore::Length *)(a1 + 224);
    if (v36 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v37, (const WebCore::Length *)(a2 + 224)) & 1) == 0)
        return 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 230))
        v38 = *(float *)v37;
      else
        v38 = (float)*(int *)v37;
      v39 = *(float *)(a2 + 224);
      if (!*(_BYTE *)(a2 + 230))
        v39 = (float)SLODWORD(v39);
      if (v38 != v39)
        return 0;
    }
  }
  v40 = *(unsigned __int8 *)(a1 + 236);
  if (v40 != *(unsigned __int8 *)(a2 + 236) || (*(_BYTE *)(a1 + 237) != 0) != (*(_BYTE *)(a2 + 237) != 0))
    return 0;
  if (v40 != 13)
  {
    v41 = (WebCore::Length *)(a1 + 232);
    if (v40 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v41, (const WebCore::Length *)(a2 + 232)) & 1) == 0)
        return 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 238))
        v42 = *(float *)v41;
      else
        v42 = (float)*(int *)v41;
      v43 = *(float *)(a2 + 232);
      if (!*(_BYTE *)(a2 + 238))
        v43 = (float)SLODWORD(v43);
      if (v42 != v43)
        return 0;
    }
  }
  v44 = *(_QWORD *)(a1 + 240);
  v45 = *(_QWORD *)(a2 + 240);
  if (v44 != v45)
  {
    result = 0;
    if (!v44)
      return result;
    if (!v45)
      return result;
    result = WebCore::ShapeValue::operator==(*(_QWORD *)(a1 + 240), v45);
    if (!(_DWORD)result)
      return result;
  }
  v46 = *(unsigned __int8 *)(a1 + 252);
  if (v46 != *(unsigned __int8 *)(a2 + 252) || (*(_BYTE *)(a1 + 253) != 0) != (*(_BYTE *)(a2 + 253) != 0))
    return 0;
  if (v46 != 13)
  {
    v47 = (WebCore::Length *)(a1 + 248);
    if (v46 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v47, (const WebCore::Length *)(a2 + 248)) & 1) == 0)
        return 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 254))
        v48 = *(float *)v47;
      else
        v48 = (float)*(int *)v47;
      v49 = *(float *)(a2 + 248);
      if (!*(_BYTE *)(a2 + 254))
        v49 = (float)SLODWORD(v49);
      if (v48 != v49)
        return 0;
    }
  }
  if (*(float *)(a1 + 256) != *(float *)(a2 + 256) || *(float *)(a1 + 260) != *(float *)(a2 + 260))
    return 0;
  v50 = *(_QWORD *)(a1 + 264);
  v51 = *(_QWORD *)(a2 + 264);
  if (v50 != v51)
  {
    result = 0;
    if (!v50)
      return result;
    if (!v51)
      return result;
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v50 + 24))(*(_QWORD *)(a1 + 264));
    if (!(_DWORD)result)
      return result;
  }
  result = WebCore::StyleColor::operator==(a1 + 272, a2 + 272);
  if (!(_DWORD)result)
    return result;
  v52 = *(WTF ***)(a1 + 288);
  v53 = *(_QWORD *)(a2 + 288);
  if (v52 != (WTF **)v53)
  {
    result = WebCore::StyleCustomPropertyData::operator==(v52, v53);
    if (!(_DWORD)result)
      return result;
  }
  v54 = *(_QWORD *)(a1 + 296);
  if (v54)
  {
    v55 = *(_DWORD *)(v54 - 12);
    v56 = *(_QWORD *)(a2 + 296);
    if (v56)
    {
      if (v55 != *(_DWORD *)(v56 - 12))
        return 0;
      if (v55)
      {
        v57 = *(unsigned int *)(v56 - 4);
        if ((_DWORD)v57)
        {
          v58 = 8 * v57;
          v59 = *(_QWORD **)(a2 + 296);
          while ((unint64_t)(*v59 + 1) <= 1)
          {
            ++v59;
            v58 -= 8;
            if (!v58)
              goto LABEL_117;
          }
        }
        else
        {
          v59 = *(_QWORD **)(a2 + 296);
        }
        v105 = (_QWORD *)(v56 + 8 * v57);
        if (v59 != v105)
        {
LABEL_250:
          result = WTF::HashSet<WTF::AtomString,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTableTraits>::contains((uint64_t *)(a1 + 296), (uint64_t)v59);
          if (!(_DWORD)result)
            return result;
          while (++v59 != v105)
          {
            if ((unint64_t)(*v59 + 1) > 1)
            {
              if (v59 == v105)
                break;
              goto LABEL_250;
            }
          }
        }
      }
    }
    else if (v55)
    {
      return 0;
    }
  }
  else
  {
    v60 = *(_QWORD *)(a2 + 296);
    if (v60 && *(_DWORD *)(v60 - 12))
      return 0;
  }
LABEL_117:
  v61 = *(_QWORD *)(a1 + 304);
  v62 = *(_QWORD *)(a2 + 304);
  if (v61 != v62)
  {
    result = 0;
    if (!v61)
      return result;
    if (!v62)
      return result;
    result = WebCore::RotateTransformOperation::operator==(*(_QWORD *)(a1 + 304), v62);
    if (!(_DWORD)result)
      return result;
  }
  v63 = *(_QWORD *)(a1 + 312);
  v64 = *(_QWORD *)(a2 + 312);
  if (v63 != v64)
  {
    result = 0;
    if (!v63)
      return result;
    if (!v64)
      return result;
    result = WebCore::ScaleTransformOperation::operator==(*(_QWORD *)(a1 + 312), v64);
    if (!(_DWORD)result)
      return result;
  }
  v65 = *(unsigned __int8 **)(a1 + 320);
  v66 = *(unsigned __int8 **)(a2 + 320);
  if (v65 != v66)
  {
    result = 0;
    if (!v65)
      return result;
    if (!v66)
      return result;
    result = WebCore::TranslateTransformOperation::operator==(*(unsigned __int8 **)(a1 + 320), v66);
    if (!(_DWORD)result)
      return result;
  }
  v67 = *(_QWORD *)(a1 + 328);
  v68 = *(_QWORD *)(a2 + 328);
  if (v67 != v68)
  {
    result = 0;
    if (!v67)
      return result;
    if (!v68)
      return result;
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v67 + 24))(*(_QWORD *)(a1 + 328));
    if (!(_DWORD)result)
      return result;
  }
  v69 = *(unsigned int *)(a1 + 348);
  if ((_DWORD)v69 != *(_DWORD *)(a2 + 348))
    return 0;
  if ((_DWORD)v69)
  {
    v113 = *(_QWORD *)(a1 + 336);
    v114 = *(_QWORD *)(a2 + 336);
    if (*(_QWORD *)v113 != *(_QWORD *)v114
      || *(unsigned __int8 *)(v113 + 8) != *(unsigned __int8 *)(v114 + 8)
      || *(unsigned __int8 *)(v113 + 9) != *(unsigned __int8 *)(v114 + 9))
    {
      return 0;
    }
    v115 = (unsigned __int8 *)(v113 + 25);
    v116 = (unsigned __int8 *)(v114 + 25);
    v117 = 1;
    while (v69 != v117)
    {
      v118 = v117;
      if (*(_QWORD *)(v115 - 9) == *(_QWORD *)(v116 - 9) && *(v115 - 1) == *(v116 - 1))
      {
        v120 = *v115;
        v115 += 16;
        v119 = v120;
        v121 = *v116;
        v116 += 16;
        ++v117;
        if (v119 == v121)
          continue;
      }
      if (v118 >= v69)
        break;
      return 0;
    }
  }
  if (*(unsigned __int8 *)(a1 + 376) != *(unsigned __int8 *)(a2 + 376))
    return 0;
  v70 = *(unsigned __int8 *)(a1 + 384);
  if (v70 != *(unsigned __int8 *)(a2 + 384) || (*(_BYTE *)(a1 + 385) != 0) != (*(_BYTE *)(a2 + 385) != 0))
    return 0;
  if (v70 != 13)
  {
    if (v70 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 380), (const WebCore::Length *)(a2 + 380)) & 1) == 0)
        return 0;
    }
    else
    {
      v71 = *(float *)(a1 + 380);
      if (!*(_BYTE *)(a1 + 386))
        v71 = (float)SLODWORD(v71);
      v72 = *(float *)(a2 + 380);
      if (!*(_BYTE *)(a2 + 386))
        v72 = (float)SLODWORD(v72);
      if (v71 != v72)
        return 0;
    }
  }
  if (*(unsigned __int8 *)(a1 + 388) != *(unsigned __int8 *)(a2 + 388))
    return 0;
  v73 = *(unsigned __int8 *)(a1 + 396);
  if (v73 != *(unsigned __int8 *)(a2 + 396) || (*(_BYTE *)(a1 + 397) != 0) != (*(_BYTE *)(a2 + 397) != 0))
    return 0;
  if (v73 != 13)
  {
    if (v73 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 392), (const WebCore::Length *)(a2 + 392)) & 1) == 0)
        return 0;
    }
    else
    {
      v74 = *(float *)(a1 + 392);
      if (!*(_BYTE *)(a1 + 398))
        v74 = (float)SLODWORD(v74);
      v75 = *(float *)(a2 + 392);
      if (!*(_BYTE *)(a2 + 398))
        v75 = (float)SLODWORD(v75);
      if (v74 != v75)
        return 0;
    }
  }
  v76 = *(unsigned __int8 *)(a1 + 404);
  if (v76 != *(unsigned __int8 *)(a2 + 404) || (*(_BYTE *)(a1 + 405) != 0) != (*(_BYTE *)(a2 + 405) != 0))
    return 0;
  if (v76 != 13)
  {
    v77 = (WebCore::Length *)(a1 + 400);
    if (v76 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual(v77, (const WebCore::Length *)(a2 + 400)) & 1) == 0)
        return 0;
    }
    else
    {
      if (*(_BYTE *)(a1 + 406))
        v78 = *(float *)v77;
      else
        v78 = (float)*(int *)v77;
      v79 = *(float *)(a2 + 400);
      if (!*(_BYTE *)(a2 + 406))
        v79 = (float)SLODWORD(v79);
      if (v78 != v79)
        return 0;
    }
  }
  v80 = *(unsigned __int8 *)(a1 + 412);
  if (v80 != *(unsigned __int8 *)(a2 + 412) || (*(_BYTE *)(a1 + 413) != 0) != (*(_BYTE *)(a2 + 413) != 0))
    return 0;
  if (v80 != 13)
  {
    if (v80 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 408), (const WebCore::Length *)(a2 + 408)) & 1) == 0)
        return 0;
    }
    else
    {
      v81 = *(float *)(a1 + 408);
      if (!*(_BYTE *)(a1 + 414))
        v81 = (float)SLODWORD(v81);
      v82 = *(float *)(a2 + 408);
      if (!*(_BYTE *)(a2 + 414))
        v82 = (float)SLODWORD(v82);
      if (v81 != v82)
        return 0;
    }
  }
  v83 = *(unsigned __int8 *)(a1 + 420);
  if (v83 != *(unsigned __int8 *)(a2 + 420) || (*(_BYTE *)(a1 + 421) != 0) != (*(_BYTE *)(a2 + 421) != 0))
    return 0;
  if (v83 != 13)
  {
    if (v83 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 416), (const WebCore::Length *)(a2 + 416)) & 1) == 0)
        return 0;
    }
    else
    {
      v84 = *(float *)(a1 + 416);
      if (!*(_BYTE *)(a1 + 422))
        v84 = (float)SLODWORD(v84);
      v85 = *(float *)(a2 + 416);
      if (!*(_BYTE *)(a2 + 422))
        v85 = (float)SLODWORD(v85);
      if (v84 != v85)
        return 0;
    }
  }
  v86 = *(unsigned __int8 *)(a1 + 428);
  if (v86 != *(unsigned __int8 *)(a2 + 428) || (*(_BYTE *)(a1 + 429) != 0) != (*(_BYTE *)(a2 + 429) != 0))
    return 0;
  if (v86 != 13)
  {
    if (v86 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 424), (const WebCore::Length *)(a2 + 424)) & 1) == 0)
        return 0;
    }
    else
    {
      v87 = *(float *)(a1 + 424);
      if (!*(_BYTE *)(a1 + 430))
        v87 = (float)SLODWORD(v87);
      v88 = *(float *)(a2 + 424);
      if (!*(_BYTE *)(a2 + 430))
        v88 = (float)SLODWORD(v88);
      if (v87 != v88)
        return 0;
    }
  }
  v89 = *(unsigned __int8 *)(a1 + 436);
  if (v89 != *(unsigned __int8 *)(a2 + 436) || (*(_BYTE *)(a1 + 437) != 0) != (*(_BYTE *)(a2 + 437) != 0))
    return 0;
  if (v89 != 13)
  {
    if (v89 == 11)
    {
      if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 432), (const WebCore::Length *)(a2 + 432)) & 1) == 0)
        return 0;
    }
    else
    {
      v90 = *(float *)(a1 + 432);
      if (!*(_BYTE *)(a1 + 438))
        v90 = (float)SLODWORD(v90);
      v91 = *(float *)(a2 + 432);
      if (!*(_BYTE *)(a2 + 438))
        v91 = (float)SLODWORD(v91);
      if (v90 != v91)
        return 0;
    }
  }
  result = 0;
  if (*(float *)(a1 + 440) != *(float *)(a2 + 440) || *(unsigned __int8 *)(a1 + 444) != *(unsigned __int8 *)(a2 + 444))
    return result;
  v92 = *(unsigned __int8 *)(a1 + 448);
  if (v92 >= 2)
  {
    if (v92 == 2)
    {
      if (*(_BYTE *)(a2 + 448) != 2)
        return 0;
      result = WebCore::Length::operator==((unsigned __int8 *)(a1 + 452), (unsigned __int8 *)(a2 + 452));
      if (!(_DWORD)result)
        return result;
    }
  }
  else if (v92 != *(unsigned __int8 *)(a2 + 448))
  {
    return 0;
  }
  if (*(unsigned __int8 *)(a1 + 460) != *(unsigned __int8 *)(a2 + 460)
    || *(unsigned __int8 *)(a1 + 461) != *(unsigned __int8 *)(a2 + 461)
    || *(unsigned __int8 *)(a1 + 462) != *(unsigned __int8 *)(a2 + 462))
  {
    return 0;
  }
  result = 0;
  if (*(unsigned __int8 *)(a1 + 463) == *(unsigned __int8 *)(a2 + 463)
    && *(unsigned __int8 *)(a1 + 464) == *(unsigned __int8 *)(a2 + 464))
  {
    result = 0;
    if (*(unsigned __int8 *)(a1 + 465) == *(unsigned __int8 *)(a2 + 465)
      && *(unsigned __int8 *)(a1 + 466) == *(unsigned __int8 *)(a2 + 466))
    {
      if ((*(_BYTE *)(a1 + 467) == 0) == (*(_BYTE *)(a2 + 467) != 0))
        return 0;
      v93 = *(unsigned int *)(a1 + 484);
      if ((_DWORD)v93 != *(_DWORD *)(a2 + 484))
        return 0;
      if (memcmp(*(const void **)(a1 + 472), *(const void **)(a2 + 472), 8 * v93))
        return 0;
      v94 = *(unsigned int *)(a1 + 500);
      if ((_DWORD)v94 != *(_DWORD *)(a2 + 500))
        return 0;
      if (memcmp(*(const void **)(a1 + 488), *(const void **)(a2 + 488), v94))
        return 0;
      v95 = *(unsigned int *)(a1 + 516);
      if ((_DWORD)v95 != *(_DWORD *)(a2 + 516))
        return 0;
      if (memcmp(*(const void **)(a1 + 504), *(const void **)(a2 + 504), 8 * v95))
        return 0;
      v96 = *(unsigned int *)(a1 + 532);
      if ((_DWORD)v96 != *(_DWORD *)(a2 + 532))
        return 0;
      if (memcmp(*(const void **)(a1 + 520), *(const void **)(a2 + 520), 8 * v96))
        return 0;
      v97 = *(unsigned int *)(a1 + 548);
      if ((_DWORD)v97 != *(_DWORD *)(a2 + 548))
        return 0;
      if (memcmp(*(const void **)(a1 + 536), *(const void **)(a2 + 536), v97))
        return 0;
      v98 = *(unsigned int *)(a1 + 564);
      if ((_DWORD)v98 != *(_DWORD *)(a2 + 564))
        return 0;
      if ((_DWORD)v98)
      {
        v106 = *(unsigned __int8 **)(a1 + 552);
        v107 = *(unsigned __int8 **)(a2 + 552);
        result = WebCore::ViewTimelineInsets::operator==<WebCore::ViewTimelineInsets>(v106, v107);
        if (!(_DWORD)result)
          return result;
        v108 = v106 + 24;
        v109 = v107 + 24;
        v110 = 1;
        do
        {
          v111 = v110;
          if (v98 == v110)
            break;
          v122 = v110;
          v112 = WebCore::ViewTimelineInsets::operator==<WebCore::ViewTimelineInsets>(v108, v109);
          v111 = v122;
          v110 = v122 + 1;
          v108 += 24;
          v109 += 24;
        }
        while ((v112 & 1) != 0);
        if (v111 < v98)
          return 0;
      }
      v99 = *(unsigned int *)(a1 + 580);
      if ((_DWORD)v99 != *(_DWORD *)(a2 + 580))
        return 0;
      result = memcmp(*(const void **)(a1 + 568), *(const void **)(a2 + 568), 8 * v99);
      if ((_DWORD)result)
        return 0;
      if (*(unsigned __int8 *)(a1 + 584) == *(unsigned __int8 *)(a2 + 584)
        && *(unsigned __int8 *)(a1 + 585) == *(unsigned __int8 *)(a2 + 585))
      {
        if (*(unsigned __int8 *)(a1 + 586) != *(unsigned __int8 *)(a2 + 586))
          return 0;
        if (*(float *)(a1 + 588) != *(float *)(a2 + 588))
          return 0;
        if (*(_QWORD *)(a1 + 592) != *(_QWORD *)(a2 + 592))
          return 0;
        v100 = *(unsigned int *)(a1 + 612);
        if ((_DWORD)v100 != *(_DWORD *)(a2 + 612)
          || memcmp(*(const void **)(a1 + 600), *(const void **)(a2 + 600), 8 * v100)
          || *(_QWORD *)(a1 + 616) != *(_QWORD *)(a2 + 616))
        {
          return 0;
        }
        if (*(_BYTE *)(a1 + 632) && *(_BYTE *)(a2 + 632))
        {
          v101 = *(unsigned __int8 *)(a1 + 628);
          if (v101 != *(unsigned __int8 *)(a2 + 628) || (*(_BYTE *)(a1 + 629) != 0) != (*(_BYTE *)(a2 + 629) != 0))
            return 0;
          if (v101 != 13)
          {
            if (v101 == 11)
            {
              if ((WebCore::Length::isCalculatedEqual((WebCore::Length *)(a1 + 624), (const WebCore::Length *)(a2 + 624)) & 1) == 0)return 0;
            }
            else
            {
              v102 = *(float *)(a1 + 624);
              if (!*(_BYTE *)(a1 + 630))
                v102 = (float)SLODWORD(v102);
              v103 = *(float *)(a2 + 624);
              if (!*(_BYTE *)(a2 + 630))
                v103 = (float)SLODWORD(v103);
              if (v102 != v103)
                return 0;
            }
          }
        }
        else if ((*(_BYTE *)(a1 + 632) != 0) != (*(_BYTE *)(a2 + 632) != 0))
        {
          return 0;
        }
        v104 = (*(unsigned int *)(a2 + 636) | ((unint64_t)(*(unsigned __int16 *)(a2 + 640) | (*(unsigned __int8 *)(a2 + 642) << 16)) << 32)) ^ (*(unsigned int *)(a1 + 636) | ((unint64_t)(*(unsigned __int16 *)(a1 + 640) | (*(unsigned __int8 *)(a1 + 642) << 16)) << 32));
        if ((v104 & 0x1FFFFFFFFFFFFFLL) == 0)
        {
          if (*(_BYTE *)(a1 + 368) && *(_BYTE *)(a2 + 368))
          {
            if (*(_QWORD *)(a1 + 352) != *(_QWORD *)(a2 + 352)
              || *(unsigned __int8 *)(a1 + 360) != *(unsigned __int8 *)(a2 + 360)
              || *(unsigned __int8 *)(a1 + 361) != *(unsigned __int8 *)(a2 + 361))
            {
              return 0;
            }
LABEL_243:
            if ((v104 & 0x20000000000000) == 0)
              return (*(_BYTE *)(a1 + 643) == 0) ^ (*(_BYTE *)(a2 + 643) != 0);
            return 0;
          }
          if ((*(_BYTE *)(a1 + 368) != 0) == (*(_BYTE *)(a2 + 368) != 0))
            goto LABEL_243;
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t WebCore::StyleSurroundData::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t result;

  result = WebCore::operator==(a1 + 8, a2 + 8);
  if ((_DWORD)result)
  {
    result = WebCore::operator==(a1 + 40, a2 + 40);
    if ((_DWORD)result)
    {
      result = WebCore::operator==(a1 + 72, a2 + 72);
      if ((_DWORD)result)
      {
        result = WebCore::operator==((uint64_t)(a1 + 104), (uint64_t)(a2 + 104));
        if ((_DWORD)result)
          return ((a2[4] ^ a1[4]) & 7) == 0 && ((a2[4] ^ a1[4]) & 8) == 0;
      }
    }
  }
  return result;
}

uint64_t WebCore::StyleTransformData::copy@<X0>(WebCore::StyleTransformData *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  unsigned int v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;

  result = WTF::fastMalloc((WTF *)0x30);
  v5 = result;
  *(_DWORD *)result = 1;
  v6 = *((unsigned int *)this + 5);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 20) = v6;
  if ((_DWORD)v6)
  {
    if (v6 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v10 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v6));
    *(_DWORD *)(v5 + 16) = v6;
    *(_QWORD *)(v5 + 8) = v10;
    v11 = *((unsigned int *)this + 5);
    if ((_DWORD)v11)
    {
      v12 = (uint64_t *)*((_QWORD *)this + 1);
      v13 = 8 * v11;
      do
      {
        v14 = *v12++;
        ++*(_DWORD *)(v14 + 8);
        *v10++ = v14;
        v13 -= 8;
      }
      while (v13);
    }
  }
  *(_DWORD *)(v5 + 24) = 0;
  v7 = (int *)(v5 + 24);
  *(_WORD *)(v5 + 29) = 0;
  v8 = *((unsigned __int8 *)this + 28);
  *(_BYTE *)(v5 + 28) = v8;
  *(_BYTE *)(v5 + 29) = *((_BYTE *)this + 29);
  if (v8 <= 0xD)
  {
    v9 = 1 << v8;
    if ((v9 & 0x7FC) != 0)
    {
      *(_BYTE *)(v5 + 30) = *((_BYTE *)this + 30);
      *v7 = *((_DWORD *)this + 6);
    }
    else if ((v9 & 0x3003) != 0)
    {
      *v7 = 0;
    }
    else
    {
      *v7 = *((_DWORD *)this + 6);
      WebCore::Length::ref(v7);
    }
  }
  *(_DWORD *)(v5 + 32) = 0;
  result = v5 + 32;
  *(_WORD *)(v5 + 37) = 0;
  v15 = *((unsigned __int8 *)this + 36);
  *(_BYTE *)(v5 + 36) = v15;
  *(_BYTE *)(v5 + 37) = *((_BYTE *)this + 37);
  if (v15 <= 0xD)
  {
    v16 = 1 << v15;
    if ((v16 & 0x7FC) != 0)
    {
      *(_BYTE *)(v5 + 38) = *((_BYTE *)this + 38);
      *(_DWORD *)result = *((_DWORD *)this + 8);
    }
    else if ((v16 & 0x3003) != 0)
    {
      *(_DWORD *)result = 0;
    }
    else
    {
      *(_DWORD *)result = *((_DWORD *)this + 8);
      result = (uint64_t)WebCore::Length::ref((int *)result);
    }
  }
  *(_DWORD *)(v5 + 40) = *((_DWORD *)this + 10);
  *(_BYTE *)(v5 + 44) = *((_BYTE *)this + 44);
  *a2 = v5;
  return result;
}

WebCore::StyleVisitedLinkColorData *WebCore::StyleVisitedLinkColorData::StyleVisitedLinkColorData(WebCore::StyleVisitedLinkColorData *this)
{
  char *v2;

  *(_DWORD *)this = 1;
  v2 = (char *)this + 104;
  WebCore::StyleColor::StyleColor((uint64_t)this + 8, 0);
  WebCore::StyleColor::StyleColor((uint64_t)this + 24);
  WebCore::StyleColor::StyleColor((uint64_t)this + 40);
  WebCore::StyleColor::StyleColor((uint64_t)this + 56);
  WebCore::StyleColor::StyleColor((uint64_t)this + 72);
  WebCore::StyleColor::StyleColor((uint64_t)this + 88);
  WebCore::StyleColor::StyleColor((uint64_t)v2);
  return this;
}

uint64_t WebCore::StyleVisitedLinkColorData::copy@<X0>(WebCore::StyleVisitedLinkColorData *this@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char **v21;

  v4 = (_DWORD *)WTF::fastMalloc((WTF *)0x78);
  *v4 = 1;
  v17 = &v16;
  v18 = &v16;
  v19 = &v16;
  v20 = &v16;
  v5 = *((unsigned int *)this + 4);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  v6 = v4;
  v21 = &v17;
  ((void (*)(char ***, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v5])(&v21, (char *)this + 8);
  v17 = &v16;
  v18 = &v16;
  v19 = &v16;
  v20 = &v16;
  v7 = *((unsigned int *)this + 8);
  if ((_DWORD)v7 == -1)
    goto LABEL_9;
  v21 = &v17;
  ((void (*)(char ***, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v7])(&v21, (char *)this + 24);
  v17 = &v16;
  v18 = &v16;
  v19 = &v16;
  v20 = &v16;
  v8 = *((unsigned int *)this + 12);
  if ((_DWORD)v8 == -1)
    goto LABEL_9;
  v21 = &v17;
  ((void (*)(char ***, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v8])(&v21, (char *)this + 40);
  v17 = &v16;
  v18 = &v16;
  v19 = &v16;
  v20 = &v16;
  v9 = *((unsigned int *)this + 16);
  if ((_DWORD)v9 == -1)
    goto LABEL_9;
  v21 = &v17;
  ((void (*)(char ***, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v9])(&v21, (char *)this + 56);
  v17 = &v16;
  v18 = &v16;
  v19 = &v16;
  v20 = &v16;
  v10 = *((unsigned int *)this + 20);
  if ((_DWORD)v10 == -1)
    goto LABEL_9;
  v21 = &v17;
  ((void (*)(char ***, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v10])(&v21, (char *)this + 72);
  v17 = &v16;
  v18 = &v16;
  v19 = &v16;
  v20 = &v16;
  v11 = *((unsigned int *)this + 24);
  if ((_DWORD)v11 == -1
    || (v21 = &v17,
        ((void (*)(char ***, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v11])(&v21, (char *)this + 88), v17 = &v16, v18 = &v16, v19 = &v16, v20 = &v16, v12 = *((unsigned int *)this + 28), (_DWORD)v12 == -1))
  {
LABEL_9:
    v14 = std::__throw_bad_variant_access[abi:sn180100]();
    return WebCore::StyleVisitedLinkColorData::operator==(v14, v15);
  }
  else
  {
    v21 = &v17;
    result = ((uint64_t (*)(char ***, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v12])(&v21, (char *)this + 104);
    *a2 = v6;
  }
  return result;
}

uint64_t WebCore::StyleVisitedLinkColorData::operator==(uint64_t a1, uint64_t a2)
{
  if (WebCore::StyleColor::operator==(a1 + 8, a2 + 8)
    && WebCore::StyleColor::operator==(a1 + 24, a2 + 24)
    && WebCore::StyleColor::operator==(a1 + 40, a2 + 40)
    && WebCore::StyleColor::operator==(a1 + 56, a2 + 56)
    && WebCore::StyleColor::operator==(a1 + 72, a2 + 72)
    && WebCore::StyleColor::operator==(a1 + 88, a2 + 88))
  {
    return WebCore::StyleColor::operator==(a1 + 104, a2 + 104);
  }
  else
  {
    return 0;
  }
}

uint64_t WTF::Markable<WebCore::ScrollbarColor,WebCore::ScrollbarColor::MarkableTraits>::Markable(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 32))
  {
    WebCore::StyleColor::StyleColor(a1, a2);
    WebCore::StyleColor::StyleColor(a1 + 16, a2 + 16);
  }
  else
  {
    WebCore::ScrollbarColor::MarkableTraits::emptyValue(a1);
  }
  return a1;
}

uint64_t WebCore::StyleRareNonInheritedData::StyleRareNonInheritedData(uint64_t a1, uint64_t a2)
{
  int *v4;
  unsigned int v5;
  int v6;
  int *v7;
  unsigned int v8;
  int v9;
  int *v10;
  unsigned int v11;
  int v12;
  int *v13;
  unsigned int v14;
  int v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  int *v24;
  unsigned int v25;
  int v26;
  int *v27;
  unsigned int v28;
  int v29;
  _DWORD *v30;
  int *v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  unsigned int v43;
  int *v44;
  int v45;
  unsigned int v46;
  int *v47;
  int v48;
  int *v49;
  unsigned int v50;
  int v51;
  int *v52;
  unsigned int v53;
  int v54;
  unsigned int v55;
  int *v56;
  int v57;
  int *v58;
  unsigned int v59;
  int v60;
  unsigned int v61;
  int *v62;
  int v63;
  unsigned int v64;
  int *v65;
  int v66;
  uint64_t v67;
  WTF *v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  WTF *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  _DWORD *v76;
  uint64_t v77;
  _DWORD *v78;
  int *v79;
  unsigned int v80;
  int v81;
  int v82;
  unsigned int v83;
  unint64_t v84;
  char v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _DWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  void *v130;
  void *v131;
  _QWORD *v132;
  uint64_t v133;
  _DWORD **v134;
  uint64_t v135;
  _DWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  _DWORD **v139;
  uint64_t v140;
  _DWORD *v141;
  _QWORD *v142;
  uint64_t v143;
  _DWORD **v144;
  uint64_t v145;
  _DWORD *v146;
  int v147;
  unsigned int v148;
  uint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unsigned int v157;
  int v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  _QWORD v164[4];
  _QWORD *v165;

  *(_DWORD *)a1 = 1;
  *(_BYTE *)(a1 + 4) = 0;
  v4 = (int *)(a1 + 4);
  *(_BYTE *)(a1 + 12) = 0;
  if (*(_BYTE *)(a2 + 12))
  {
    *(_DWORD *)(a1 + 4) = 0;
    *(_WORD *)(a1 + 9) = 0;
    v5 = *(unsigned __int8 *)(a2 + 8);
    *(_BYTE *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
    if (v5 <= 0xD)
    {
      v6 = 1 << v5;
      if ((v6 & 0x7FC) != 0)
      {
        *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
        *v4 = *(_DWORD *)(a2 + 4);
      }
      else if ((v6 & 0x3003) != 0)
      {
        *v4 = 0;
      }
      else
      {
        *v4 = *(_DWORD *)(a2 + 4);
        WebCore::Length::ref(v4);
      }
    }
    *(_BYTE *)(a1 + 12) = 1;
  }
  *(_BYTE *)(a1 + 16) = 0;
  v7 = (int *)(a1 + 16);
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_DWORD *)(a1 + 16) = 0;
    *(_WORD *)(a1 + 21) = 0;
    v8 = *(unsigned __int8 *)(a2 + 20);
    *(_BYTE *)(a1 + 20) = v8;
    *(_BYTE *)(a1 + 21) = *(_BYTE *)(a2 + 21);
    if (v8 <= 0xD)
    {
      v9 = 1 << v8;
      if ((v9 & 0x7FC) != 0)
      {
        *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 22);
        *v7 = *(_DWORD *)(a2 + 16);
      }
      else if ((v9 & 0x3003) != 0)
      {
        *v7 = 0;
      }
      else
      {
        *v7 = *(_DWORD *)(a2 + 16);
        WebCore::Length::ref(v7);
      }
    }
    *(_BYTE *)(a1 + 24) = 1;
  }
  *(_DWORD *)(a1 + 28) = 0;
  v10 = (int *)(a1 + 28);
  *(_WORD *)(a1 + 33) = 0;
  v11 = *(unsigned __int8 *)(a2 + 32);
  *(_BYTE *)(a1 + 32) = v11;
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  if (v11 <= 0xD)
  {
    v12 = 1 << v11;
    if ((v12 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
      *v10 = *(_DWORD *)(a2 + 28);
    }
    else if ((v12 & 0x3003) != 0)
    {
      *v10 = 0;
    }
    else
    {
      *v10 = *(_DWORD *)(a2 + 28);
      WebCore::Length::ref(v10);
    }
  }
  *(_DWORD *)(a1 + 36) = 0;
  v13 = (int *)(a1 + 36);
  *(_WORD *)(a1 + 41) = 0;
  v14 = *(unsigned __int8 *)(a2 + 40);
  *(_BYTE *)(a1 + 40) = v14;
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  if (v14 <= 0xD)
  {
    v15 = 1 << v14;
    if ((v15 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
      *v13 = *(_DWORD *)(a2 + 36);
    }
    else if ((v15 & 0x3003) != 0)
    {
      *v13 = 0;
    }
    else
    {
      *v13 = *(_DWORD *)(a2 + 36);
      WebCore::Length::ref(v13);
    }
  }
  *(_QWORD *)(a1 + 44) = *(_QWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 52) = *(_QWORD *)(a2 + 52);
  v16 = *(_DWORD **)(a2 + 64);
  ++*v16;
  *(_QWORD *)(a1 + 64) = v16;
  v17 = *(_DWORD **)(a2 + 72);
  ++*v17;
  *(_QWORD *)(a1 + 72) = v17;
  v18 = *(_DWORD **)(a2 + 80);
  ++*v18;
  *(_QWORD *)(a1 + 80) = v18;
  v19 = *(_DWORD **)(a2 + 88);
  ++*v19;
  *(_QWORD *)(a1 + 88) = v19;
  WebCore::LengthBox::LengthBox((WebCore::LengthBox *)(a1 + 96), (const WebCore::LengthBox *)(a2 + 96));
  WebCore::LengthBox::LengthBox((WebCore::LengthBox *)(a1 + 128), (const WebCore::LengthBox *)(a2 + 128));
  WebCore::LengthBox::LengthBox((WebCore::LengthBox *)(a1 + 160), (const WebCore::LengthBox *)(a2 + 160));
  *(_QWORD *)(a1 + 192) = 0;
  v20 = *(_QWORD *)(a2 + 192);
  if (v20)
    goto LABEL_182;
  while (1)
  {
    v21 = *(_DWORD **)(a2 + 200);
    if (v21)
      ++*v21;
    *(_QWORD *)(a1 + 200) = v21;
    v22 = *(_DWORD **)(a2 + 208);
    if (v22)
      ++*v22;
    v23 = *(_DWORD **)(a2 + 216);
    ++*v23;
    *(_DWORD *)(a1 + 224) = 0;
    v24 = (int *)(a1 + 224);
    *(_QWORD *)(a1 + 208) = v22;
    *(_QWORD *)(a1 + 216) = v23;
    *(_WORD *)(a1 + 229) = 0;
    v25 = *(unsigned __int8 *)(a2 + 228);
    *(_BYTE *)(a1 + 228) = v25;
    *(_BYTE *)(a1 + 229) = *(_BYTE *)(a2 + 229);
    if (v25 <= 0xD)
    {
      v26 = 1 << v25;
      if ((v26 & 0x7FC) != 0)
      {
        *(_BYTE *)(a1 + 230) = *(_BYTE *)(a2 + 230);
        *v24 = *(_DWORD *)(a2 + 224);
      }
      else if ((v26 & 0x3003) != 0)
      {
        *v24 = 0;
      }
      else
      {
        *v24 = *(_DWORD *)(a2 + 224);
        WebCore::Length::ref(v24);
      }
    }
    *(_DWORD *)(a1 + 232) = 0;
    v27 = (int *)(a1 + 232);
    *(_WORD *)(a1 + 237) = 0;
    v28 = *(unsigned __int8 *)(a2 + 236);
    *(_BYTE *)(a1 + 236) = v28;
    *(_BYTE *)(a1 + 237) = *(_BYTE *)(a2 + 237);
    if (v28 <= 0xD)
    {
      v29 = 1 << v28;
      if ((v29 & 0x7FC) != 0)
      {
        *(_BYTE *)(a1 + 238) = *(_BYTE *)(a2 + 238);
        *v27 = *(_DWORD *)(a2 + 232);
      }
      else if ((v29 & 0x3003) != 0)
      {
        *v27 = 0;
      }
      else
      {
        *v27 = *(_DWORD *)(a2 + 232);
        WebCore::Length::ref(v27);
      }
    }
    v30 = *(_DWORD **)(a2 + 240);
    if (v30)
      ++*v30;
    *(_DWORD *)(a1 + 248) = 0;
    v31 = (int *)(a1 + 248);
    *(_QWORD *)(a1 + 240) = v30;
    *(_WORD *)(a1 + 253) = 0;
    v32 = *(unsigned __int8 *)(a2 + 252);
    *(_BYTE *)(a1 + 252) = v32;
    *(_BYTE *)(a1 + 253) = *(_BYTE *)(a2 + 253);
    if (v32 <= 0xD)
    {
      v33 = 1 << v32;
      if ((v33 & 0x7FC) != 0)
      {
        *(_BYTE *)(a1 + 254) = *(_BYTE *)(a2 + 254);
        *v31 = *(_DWORD *)(a2 + 248);
      }
      else if ((v33 & 0x3003) != 0)
      {
        *v31 = 0;
      }
      else
      {
        *v31 = *(_DWORD *)(a2 + 248);
        WebCore::Length::ref(v31);
      }
    }
    *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
    v34 = *(_QWORD *)(a2 + 264);
    if (v34)
      ++*(_DWORD *)(v34 + 8);
    *(_QWORD *)(a1 + 264) = v34;
    v164[0] = &v163;
    v164[1] = &v163;
    v164[2] = &v163;
    v164[3] = &v163;
    v35 = *(unsigned int *)(a2 + 280);
    if ((_DWORD)v35 != -1)
      break;
    std::__throw_bad_variant_access[abi:sn180100]();
LABEL_182:
    v147 = *(_DWORD *)(v20 - 12);
    if (v147)
    {
      v148 = WTF::HashTable<WTF::String,WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>>,WTF::DefaultHash<WTF::String>,WTF::HashMap<WTF::String,WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WTF::Vector<unsigned int,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::String>>::computeBestTableSize(*(_DWORD *)(v20 - 12));
      v149 = WTF::fastMalloc((WTF *)((32 * v148) | 0x10));
      bzero((void *)(v149 + 16), 32 * v148);
      *(_QWORD *)(a1 + 192) = v149 + 16;
      *(_DWORD *)(v149 + 12) = v148;
      *(_DWORD *)(*(_QWORD *)(a1 + 192) - 8) = v148 - 1;
      *(_DWORD *)(*(_QWORD *)(a1 + 192) - 12) = v147;
      *(_DWORD *)(*(_QWORD *)(a1 + 192) - 16) = 0;
      v150 = *(_QWORD **)(a2 + 192);
      v151 = WTF::HashMap<WTF::String,WebCore::GridArea,WTF::DefaultHash<WTF::String>,WTF::HashTraits<WTF::String>,WTF::HashTraits<WebCore::GridArea>,WTF::HashTableTraits>::begin(v150);
      v152 = (uint64_t)v151;
      v154 = v153;
      v155 = v150 ? (uint64_t)&v150[4 * *((unsigned int *)v150 - 1)] : 0;
      if ((_QWORD *)v155 != v151)
      {
        do
        {
          v156 = *(_QWORD *)(a1 + 192);
          if (v156)
            v157 = *(_DWORD *)(v156 - 8);
          else
            v157 = 0;
          v158 = 0;
          v159 = *(_DWORD *)(*(_QWORD *)v152 + 16) >> 8;
          do
          {
            v160 = v159 & v157;
            v159 = ++v158 + v160;
          }
          while (*(_QWORD *)(v156 + 32 * v160));
          v161 = v152;
          WTF::IdentityHashTranslator<WTF::HashMap<WTF::AtomString,WebCore::CounterDirectives,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::CounterDirectives>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::AtomString>>::translate<WTF::KeyValuePair<WTF::AtomString,WebCore::CounterDirectives>,WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::CounterDirectives> const&>(v156 + 32 * v160, v152);
          v162 = v161 + 32;
          if (v162 == v154)
          {
LABEL_194:
            v152 = v154;
          }
          else
          {
            v152 = v162;
            while ((unint64_t)(*(_QWORD *)v152 + 1) <= 1)
            {
              v152 += 32;
              if (v152 == v154)
                goto LABEL_194;
            }
          }
        }
        while (v152 != v155);
      }
    }
  }
  v165 = v164;
  ((void (*)(_QWORD **, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100INS1_9__variant15__value_visitorIN3WTF7VisitorIZN7WebCore10StyleColor5visitIJZNS9_4copyERKNS_7variantIJNS8_18StyleAbsoluteColorENS8_17StyleCurrentColorENS6_9UniqueRefINS8_13StyleColorMixEEENSE_INS8_18StyleRelativeColorINS8_25RGBFunctionModernRelativeEEEEENSE_INSH_INS8_17HSLFunctionModernEEEEENSE_INSH_INS8_11HWBFunctionEEEEENSE_INSH_INS8_11LabFunctionEEEEENSE_INSH_INS8_11LCHFunctionEEEEENSE_INSH_INS8_13OKLabFunctionEEEEENSE_INSH_INS8_13OKLCHFunctionEEEEENSE_INSH_INS8_16ColorRGBFunctionINS8_20ExtendedGammaEncodedIfNS8_16A98RGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_19DisplayP3DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_21ProPhotoRGBDescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_17Rec2020DescriptorEEEEEEEEENSE_INSH_INS13_INS14_IfNS8_15SRGBADescriptorEEEEEEEEENSE_INSH_INS13_INS8_21ExtendedLinearEncodedIfS1P_EEEEEEEENSE_INSH_INS8_16ColorXYZFunctionINS8_4XYZAIfLNS8_10WhitePointE0EEEEEEEEENSE_INSH_INS1Z_INS20_IfLS21_1EEEEEEEEEEEEE3__0ZNS9_4copyES2C_E3__1ZNS9_4copyES2C_E3__2ZNS9_4copyES2C_E3__3EEEDcS2C_DpOT_EUlRKSC_E_JZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSD_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlRKSG_E_ZNSA_IJS2D_S2E_S2F_S2G_EEES2H_S2C_S2K_EUlTyRKNSE_INSH_IT_EEEEE_EEEEEJRKNS0_6__implIJSC_SD_SG_SK_SN_SQ_ST_SW_SZ_S12_S19_S1E_S1J_S1O_S1T_S1Y_S25_S29_EEEEEES2H_OS2U_DpOT0____fmatrix[v35])(&v165, a2 + 272);
  v36 = *(_DWORD **)(a2 + 288);
  ++*v36;
  *(_QWORD *)(a1 + 288) = v36;
  WTF::HashTable<WTF::AtomString,WTF::AtomString,WTF::IdentityExtractor,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>>::HashTable((uint64_t *)(a1 + 296), (uint64_t *)(a2 + 296));
  v37 = *(_QWORD *)(a2 + 304);
  if (v37)
    ++*(_DWORD *)(v37 + 8);
  *(_QWORD *)(a1 + 304) = v37;
  v38 = *(_QWORD *)(a2 + 312);
  if (v38)
    ++*(_DWORD *)(v38 + 8);
  *(_QWORD *)(a1 + 312) = v38;
  v39 = *(_QWORD *)(a2 + 320);
  if (v39)
    ++*(_DWORD *)(v39 + 8);
  *(_QWORD *)(a1 + 320) = v39;
  v40 = *(_QWORD *)(a2 + 328);
  if (v40)
    ++*(_DWORD *)(v40 + 8);
  *(_QWORD *)(a1 + 328) = v40;
  v41 = *(unsigned int *)(a2 + 348);
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_DWORD *)(a1 + 348) = v41;
  if ((_DWORD)v41)
  {
    if (v41 >> 28)
      goto LABEL_205;
    v113 = WTF::fastMalloc((WTF *)(16 * v41));
    *(_DWORD *)(a1 + 344) = v41;
    *(_QWORD *)(a1 + 336) = v113;
    v114 = *(unsigned int *)(a2 + 348);
    if ((_DWORD)v114)
    {
      v115 = *(_QWORD *)(a2 + 336);
      v116 = v115 + 16 * v114;
      do
      {
        v117 = *(_DWORD **)v115;
        if (*(_QWORD *)v115)
          *v117 += 2;
        *(_QWORD *)v113 = v117;
        *(_WORD *)(v113 + 8) = *(_WORD *)(v115 + 8);
        v115 += 16;
        v113 += 16;
      }
      while (v115 != v116);
    }
  }
  *(_BYTE *)(a1 + 352) = 0;
  *(_BYTE *)(a1 + 368) = 0;
  if (*(_BYTE *)(a2 + 368))
  {
    v42 = *(_DWORD **)(a2 + 352);
    if (v42)
      *v42 += 2;
    *(_QWORD *)(a1 + 352) = v42;
    *(_WORD *)(a1 + 360) = *(_WORD *)(a2 + 360);
    *(_BYTE *)(a1 + 368) = 1;
  }
  *(_BYTE *)(a1 + 376) = *(_BYTE *)(a2 + 376);
  *(_DWORD *)(a1 + 380) = 0;
  *(_WORD *)(a1 + 385) = 0;
  v43 = *(unsigned __int8 *)(a2 + 384);
  *(_BYTE *)(a1 + 384) = v43;
  *(_BYTE *)(a1 + 385) = *(_BYTE *)(a2 + 385);
  if (v43 <= 0xD)
  {
    v44 = (int *)(a1 + 380);
    v45 = 1 << v43;
    if ((v45 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 386) = *(_BYTE *)(a2 + 386);
      *v44 = *(_DWORD *)(a2 + 380);
    }
    else if ((v45 & 0x3003) != 0)
    {
      *v44 = 0;
    }
    else
    {
      *v44 = *(_DWORD *)(a2 + 380);
      WebCore::Length::ref(v44);
    }
  }
  *(_BYTE *)(a1 + 388) = *(_BYTE *)(a2 + 388);
  *(_DWORD *)(a1 + 392) = 0;
  *(_WORD *)(a1 + 397) = 0;
  v46 = *(unsigned __int8 *)(a2 + 396);
  *(_BYTE *)(a1 + 396) = v46;
  *(_BYTE *)(a1 + 397) = *(_BYTE *)(a2 + 397);
  if (v46 <= 0xD)
  {
    v47 = (int *)(a1 + 392);
    v48 = 1 << v46;
    if ((v48 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 398) = *(_BYTE *)(a2 + 398);
      *v47 = *(_DWORD *)(a2 + 392);
    }
    else if ((v48 & 0x3003) != 0)
    {
      *v47 = 0;
    }
    else
    {
      *v47 = *(_DWORD *)(a2 + 392);
      WebCore::Length::ref(v47);
    }
  }
  v49 = (int *)(a1 + 400);
  *(_DWORD *)(a1 + 400) = 0;
  *(_WORD *)(a1 + 405) = 0;
  v50 = *(unsigned __int8 *)(a2 + 404);
  *(_BYTE *)(a1 + 404) = v50;
  *(_BYTE *)(a1 + 405) = *(_BYTE *)(a2 + 405);
  if (v50 <= 0xD)
  {
    v51 = 1 << v50;
    if ((v51 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 406) = *(_BYTE *)(a2 + 406);
      *v49 = *(_DWORD *)(a2 + 400);
    }
    else if ((v51 & 0x3003) != 0)
    {
      *v49 = 0;
    }
    else
    {
      *v49 = *(_DWORD *)(a2 + 400);
      WebCore::Length::ref(v49);
    }
  }
  v52 = (int *)(a1 + 408);
  *(_DWORD *)(a1 + 408) = 0;
  *(_WORD *)(a1 + 413) = 0;
  v53 = *(unsigned __int8 *)(a2 + 412);
  *(_BYTE *)(a1 + 412) = v53;
  *(_BYTE *)(a1 + 413) = *(_BYTE *)(a2 + 413);
  if (v53 <= 0xD)
  {
    v54 = 1 << v53;
    if ((v54 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 414) = *(_BYTE *)(a2 + 414);
      *v52 = *(_DWORD *)(a2 + 408);
    }
    else if ((v54 & 0x3003) != 0)
    {
      *v52 = 0;
    }
    else
    {
      *v52 = *(_DWORD *)(a2 + 408);
      WebCore::Length::ref(v52);
    }
  }
  *(_DWORD *)(a1 + 416) = 0;
  *(_WORD *)(a1 + 421) = 0;
  v55 = *(unsigned __int8 *)(a2 + 420);
  *(_BYTE *)(a1 + 420) = v55;
  *(_BYTE *)(a1 + 421) = *(_BYTE *)(a2 + 421);
  if (v55 <= 0xD)
  {
    v56 = (int *)(a1 + 416);
    v57 = 1 << v55;
    if ((v57 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 422) = *(_BYTE *)(a2 + 422);
      *v56 = *(_DWORD *)(a2 + 416);
    }
    else if ((v57 & 0x3003) != 0)
    {
      *v56 = 0;
    }
    else
    {
      *v56 = *(_DWORD *)(a2 + 416);
      WebCore::Length::ref(v56);
    }
  }
  v58 = (int *)(a1 + 424);
  *(_DWORD *)(a1 + 424) = 0;
  *(_WORD *)(a1 + 429) = 0;
  v59 = *(unsigned __int8 *)(a2 + 428);
  *(_BYTE *)(a1 + 428) = v59;
  *(_BYTE *)(a1 + 429) = *(_BYTE *)(a2 + 429);
  if (v59 <= 0xD)
  {
    v60 = 1 << v59;
    if ((v60 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 430) = *(_BYTE *)(a2 + 430);
      *v58 = *(_DWORD *)(a2 + 424);
    }
    else if ((v60 & 0x3003) != 0)
    {
      *v58 = 0;
    }
    else
    {
      *v58 = *(_DWORD *)(a2 + 424);
      WebCore::Length::ref(v58);
    }
  }
  *(_DWORD *)(a1 + 432) = 0;
  *(_WORD *)(a1 + 437) = 0;
  v61 = *(unsigned __int8 *)(a2 + 436);
  *(_BYTE *)(a1 + 436) = v61;
  *(_BYTE *)(a1 + 437) = *(_BYTE *)(a2 + 437);
  if (v61 <= 0xD)
  {
    v62 = (int *)(a1 + 432);
    v63 = 1 << v61;
    if ((v63 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 438) = *(_BYTE *)(a2 + 438);
      *v62 = *(_DWORD *)(a2 + 432);
    }
    else if ((v63 & 0x3003) != 0)
    {
      *v62 = 0;
    }
    else
    {
      *v62 = *(_DWORD *)(a2 + 432);
      WebCore::Length::ref(v62);
    }
  }
  *(_QWORD *)(a1 + 440) = *(_QWORD *)(a2 + 440);
  *(_BYTE *)(a1 + 448) = *(_BYTE *)(a2 + 448);
  *(_DWORD *)(a1 + 452) = 0;
  *(_WORD *)(a1 + 457) = 0;
  v64 = *(unsigned __int8 *)(a2 + 456);
  *(_BYTE *)(a1 + 456) = v64;
  *(_BYTE *)(a1 + 457) = *(_BYTE *)(a2 + 457);
  if (v64 <= 0xD)
  {
    v65 = (int *)(a1 + 452);
    v66 = 1 << v64;
    if ((v66 & 0x7FC) != 0)
    {
      *(_BYTE *)(a1 + 458) = *(_BYTE *)(a2 + 458);
      *v65 = *(_DWORD *)(a2 + 452);
    }
    else if ((v66 & 0x3003) != 0)
    {
      *v65 = 0;
    }
    else
    {
      *v65 = *(_DWORD *)(a2 + 452);
      WebCore::Length::ref(v65);
    }
  }
  *(_BYTE *)(a1 + 460) = *(_BYTE *)(a2 + 460);
  *(_BYTE *)(a1 + 461) = *(_BYTE *)(a2 + 461);
  *(_BYTE *)(a1 + 462) = *(_BYTE *)(a2 + 462);
  *(_WORD *)(a1 + 463) = *(_WORD *)(a2 + 463);
  *(_WORD *)(a1 + 465) = *(_WORD *)(a2 + 465);
  *(_BYTE *)(a1 + 467) = *(_BYTE *)(a2 + 467);
  v67 = *(unsigned int *)(a2 + 484);
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  *(_DWORD *)(a1 + 484) = v67;
  if ((_DWORD)v67)
  {
    if (v67 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1965030A8);
    }
    v118 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v67));
    *(_DWORD *)(a1 + 480) = v67;
    *(_QWORD *)(a1 + 472) = v118;
    v119 = *(unsigned int *)(a2 + 484);
    if ((_DWORD)v119)
    {
      v120 = *(uint64_t **)(a2 + 472);
      v121 = 8 * v119;
      do
      {
        v122 = *v120++;
        ++*(_DWORD *)(v122 + 8);
        *v118++ = v122;
        v121 -= 8;
      }
      while (v121);
    }
  }
  v68 = (WTF *)*(unsigned int *)(a2 + 500);
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 500) = (_DWORD)v68;
  if ((_DWORD)v68)
  {
    v130 = (void *)WTF::fastMalloc(v68);
    *(_DWORD *)(a1 + 496) = (_DWORD)v68;
    *(_QWORD *)(a1 + 488) = v130;
    memcpy(v130, *(const void **)(a2 + 488), *(unsigned int *)(a2 + 500));
  }
  v69 = *(unsigned int *)(a2 + 516);
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 516) = v69;
  if ((_DWORD)v69)
  {
    if (v69 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1965030C0);
    }
    v132 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v69));
    *(_DWORD *)(a1 + 512) = v69;
    *(_QWORD *)(a1 + 504) = v132;
    v133 = *(unsigned int *)(a2 + 516);
    if ((_DWORD)v133)
    {
      v134 = *(_DWORD ***)(a2 + 504);
      v135 = 8 * v133;
      do
      {
        v136 = *v134;
        if (*v134)
          *v136 += 2;
        *v132++ = v136;
        ++v134;
        v135 -= 8;
      }
      while (v135);
    }
  }
  v70 = *(unsigned int *)(a2 + 532);
  v71 = 0uLL;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_DWORD *)(a1 + 532) = v70;
  if ((_DWORD)v70)
  {
    if (v70 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1965030B0);
    }
    v123 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v70));
    *(_DWORD *)(a1 + 528) = v70;
    *(_QWORD *)(a1 + 520) = v123;
    v124 = *(unsigned int *)(a2 + 532);
    v71 = 0uLL;
    if ((_DWORD)v124)
    {
      v125 = *(uint64_t **)(a2 + 520);
      v126 = 8 * v124;
      do
      {
        v127 = *v125++;
        ++*(_DWORD *)(v127 + 8);
        *v123++ = v127;
        v126 -= 8;
      }
      while (v126);
    }
  }
  v72 = (WTF *)*(unsigned int *)(a2 + 548);
  *(_OWORD *)(a1 + 536) = v71;
  *(_DWORD *)(a1 + 548) = (_DWORD)v72;
  if ((_DWORD)v72)
  {
    v131 = (void *)WTF::fastMalloc(v72);
    *(_DWORD *)(a1 + 544) = (_DWORD)v72;
    *(_QWORD *)(a1 + 536) = v131;
    memcpy(v131, *(const void **)(a2 + 536), *(unsigned int *)(a2 + 548));
  }
  v73 = *(unsigned int *)(a2 + 564);
  v74 = 0uLL;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_DWORD *)(a1 + 564) = v73;
  if ((_DWORD)v73)
  {
    if (v73 >= 0xAAAAAAB)
    {
      __break(0xC471u);
      JUMPOUT(0x1965030B8);
    }
    v128 = 24 * v73;
    v129 = WTF::fastMalloc((WTF *)(24 * v73));
    *(_DWORD *)(a1 + 560) = (v128 & 0xFFFFFFF8) / 0x18;
    *(_QWORD *)(a1 + 552) = v129;
    WTF::VectorCopier<false,WebCore::ViewTimelineInsets>::uninitializedCopy<WebCore::ViewTimelineInsets>(*(int **)(a2 + 552), (int *)(*(_QWORD *)(a2 + 552) + 24 * *(unsigned int *)(a2 + 564)), v129);
    v74 = 0uLL;
  }
  v75 = *(unsigned int *)(a2 + 580);
  *(_OWORD *)(a1 + 568) = v74;
  *(_DWORD *)(a1 + 580) = v75;
  if ((_DWORD)v75)
  {
    if (v75 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x1965030C8);
    }
    v137 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v75));
    *(_DWORD *)(a1 + 576) = v75;
    *(_QWORD *)(a1 + 568) = v137;
    v138 = *(unsigned int *)(a2 + 580);
    if ((_DWORD)v138)
    {
      v139 = *(_DWORD ***)(a2 + 568);
      v140 = 8 * v138;
      do
      {
        v141 = *v139;
        if (*v139)
          *v141 += 2;
        *v137++ = v141;
        ++v139;
        v140 -= 8;
      }
      while (v140);
    }
  }
  *(_WORD *)(a1 + 584) = *(_WORD *)(a2 + 584);
  *(_BYTE *)(a1 + 586) = *(_BYTE *)(a2 + 586);
  *(_DWORD *)(a1 + 588) = *(_DWORD *)(a2 + 588);
  v76 = *(_DWORD **)(a2 + 592);
  if (v76)
    *v76 += 2;
  *(_QWORD *)(a1 + 592) = v76;
  v77 = *(unsigned int *)(a2 + 612);
  *(_OWORD *)(a1 + 600) = 0u;
  *(_DWORD *)(a1 + 612) = v77;
  if ((_DWORD)v77)
  {
    if (!(v77 >> 29))
    {
      v142 = (_QWORD *)WTF::fastMalloc((WTF *)(8 * v77));
      *(_DWORD *)(a1 + 608) = v77;
      *(_QWORD *)(a1 + 600) = v142;
      v143 = *(unsigned int *)(a2 + 612);
      if ((_DWORD)v143)
      {
        v144 = *(_DWORD ***)(a2 + 600);
        v145 = 8 * v143;
        do
        {
          v146 = *v144;
          if (*v144)
            *v146 += 2;
          *v142++ = v146;
          ++v144;
          v145 -= 8;
        }
        while (v145);
      }
      goto LABEL_115;
    }
LABEL_205:
    __break(0xC471u);
    JUMPOUT(0x1965030A0);
  }
LABEL_115:
  v78 = *(_DWORD **)(a2 + 616);
  if (v78)
    *v78 += 2;
  *(_QWORD *)(a1 + 616) = v78;
  *(_BYTE *)(a1 + 624) = 0;
  *(_BYTE *)(a1 + 632) = 0;
  if (*(_BYTE *)(a2 + 632))
  {
    v79 = (int *)(a1 + 624);
    *(_DWORD *)(a1 + 624) = 0;
    *(_WORD *)(a1 + 629) = 0;
    v80 = *(unsigned __int8 *)(a2 + 628);
    *(_BYTE *)(a1 + 628) = v80;
    *(_BYTE *)(a1 + 629) = *(_BYTE *)(a2 + 629);
    if (v80 <= 0xD)
    {
      v81 = 1 << v80;
      if ((v81 & 0x7FC) != 0)
      {
        *(_BYTE *)(a1 + 630) = *(_BYTE *)(a2 + 630);
        *v79 = *(_DWORD *)(a2 + 624);
      }
      else if ((v81 & 0x3003) != 0)
      {
        *v79 = 0;
      }
      else
      {
        *v79 = *(_DWORD *)(a2 + 624);
        WebCore::Length::ref(v79);
      }
    }
    *(_BYTE *)(a1 + 632) = 1;
  }
  v82 = *(unsigned __int8 *)(a1 + 642);
  v83 = *(unsigned __int16 *)(a1 + 640) | (v82 << 16);
  v84 = *(_DWORD *)(a1 + 636) & 0xFFFFFFFE | ((unint64_t)v83 << 32) | *(_DWORD *)(a2 + 636) & 1;
  v85 = *(_BYTE *)(a1 + 642);
  *(_BYTE *)(a1 + 642) = v85;
  *(_WORD *)(a1 + 640) = v83;
  *(_DWORD *)(a1 + 636) = v84;
  v86 = v84 & 0xFFFFFFFFFFFFFFF9 | (2 * (((unint64_t)*(unsigned int *)(a2 + 636) >> 1) & 3));
  *(_BYTE *)(a1 + 642) = v85;
  *(_WORD *)(a1 + 640) = v83;
  *(_DWORD *)(a1 + 636) = v86;
  v87 = v86 & 0xFFFFFFFFFFFFFFE7 | (8 * (((unint64_t)*(unsigned int *)(a2 + 636) >> 3) & 3));
  *(_BYTE *)(a1 + 642) = v85;
  *(_WORD *)(a1 + 640) = v83;
  *(_DWORD *)(a1 + 636) = v87;
  v88 = v87 & 0xFFFFFFFFFFFFFF9FLL | (32 * (((unint64_t)*(unsigned int *)(a2 + 636) >> 5) & 3));
  *(_BYTE *)(a1 + 642) = v85;
  *(_WORD *)(a1 + 640) = v83;
  *(_DWORD *)(a1 + 636) = v88;
  v89 = v88 & 0xFFFFFFFFFFFFFE7FLL | ((((unint64_t)*(unsigned int *)(a2 + 636) >> 7) & 3) << 7);
  *(_BYTE *)(a1 + 642) = v85;
  *(_WORD *)(a1 + 640) = v83;
  *(_DWORD *)(a1 + 636) = v89;
  v90 = v89 & 0xFFFFFFFFFFFFFDFFLL | ((((unint64_t)*(unsigned int *)(a2 + 636) >> 9) & 1) << 9);
  *(_BYTE *)(a1 + 642) = v85;
  *(_WORD *)(a1 + 640) = v83;
  *(_DWORD *)(a1 + 636) = v90;
  v91 = v90 & 0xFFFFFFFFFFFFFBFFLL | ((((unint64_t)*(unsigned int *)(a2 + 636) >> 10) & 1) << 10);
  *(_BYTE *)(a1 + 642) = v85;
  *(_WORD *)(a1 + 640) = v83;
  *(_DWORD *)(a1 + 636) = v91;
  v92 = v91 & 0xFFFFFFFFFFFFF7FFLL | ((((unint64_t)*(unsigned int *)(a2 + 636) >> 11) & 1) << 11);
  *(_BYTE *)(a1 + 642) = v85;
  *(_WORD *)(a1 + 640) = v83;
  *(_DWORD *)(a1 + 636) = v92;
  v93 = v92 & 0xFFFFFFFFFFFF8FFFLL | ((((unint64_t)*(unsigned int *)(a2 + 636) >> 12) & 7) << 12);
  *(_BYTE *)(a1 + 642) = v85;
  *(_WORD *)(a1 + 640) = v83;
  *(_DWORD *)(a1 + 636) = v93;
  v94 = v93 & 0xFFFFFFFFFFFC7FFFLL | ((((unint64_t)*(unsigned int *)(a2 + 636) >> 15) & 7) << 15);
  *(_BYTE *)(a1 + 642) = v85;
  *(_WORD *)(a1 + 640) = v83;
  *(_DWORD *)(a1 + 636) = v94;
  v95 = v94 & 0xFFFFFFFFFFF3FFFFLL | ((((unint64_t)*(unsigned int *)(a2 + 636) >> 18) & 3) << 18);
  *(_BYTE *)(a1 + 642) = v85;
  *(_WORD *)(a1 + 640) = v83;
  *(_DWORD *)(a1 + 636) = v95;
  v96 = v95 & 0xFFFFFFFFFE0FFFFFLL | ((((unint64_t)*(unsigned int *)(a2 + 636) >> 20) & 0x1F) << 20);
  *(_BYTE *)(a1 + 642) = v85;
  *(_WORD *)(a1 + 640) = v83;
  *(_DWORD *)(a1 + 636) = v96;
  v97 = v96 & 0xFFFFFFFFFDFFFFFFLL | ((((unint64_t)*(unsigned int *)(a2 + 636) >> 25) & 1) << 25);
  *(_BYTE *)(a1 + 642) = v85;
  *(_WORD *)(a1 + 640) = v83;
  *(_DWORD *)(a1 + 636) = v97;
  v98 = v97 & 0xFFFFFFFFF3FFFFFFLL | ((((unint64_t)*(unsigned int *)(a2 + 636) >> 26) & 3) << 26);
  *(_BYTE *)(a1 + 642) = v85;
  *(_WORD *)(a1 + 640) = v83;
  *(_DWORD *)(a1 + 636) = v98;
  v99 = v98 & 0xFFFFFFFF0FFFFFFFLL | ((unint64_t)(HIBYTE(*(_DWORD *)(a2 + 636)) >> 4) << 28);
  *(_BYTE *)(a1 + 642) = v85;
  *(_WORD *)(a1 + 640) = v83;
  *(_DWORD *)(a1 + 636) = v99;
  v100 = v99 & 0xFFFFFFF0FFFFFFFFLL | ((unint64_t)(*(_WORD *)(a2 + 640) & 0xF) << 32);
  *(_BYTE *)(a1 + 642) = v82;
  *(_DWORD *)(a1 + 636) = v99;
  *(_WORD *)(a1 + 640) = WORD2(v100);
  v101 = v100 & 0xFFFFFF0FFFFFFFFFLL | ((((unint64_t)*(unsigned __int16 *)(a2 + 640) >> 4) & 0xF) << 36);
  *(_BYTE *)(a1 + 642) = v82;
  *(_DWORD *)(a1 + 636) = v99;
  *(_WORD *)(a1 + 640) = WORD2(v101);
  v102 = v101 & 0xFFFFF8FFFFFFFFFFLL | ((((unint64_t)*(unsigned __int16 *)(a2 + 640) >> 8) & 7) << 40);
  *(_BYTE *)(a1 + 642) = v82;
  *(_DWORD *)(a1 + 636) = v99;
  *(_WORD *)(a1 + 640) = WORD2(v102);
  v103 = v102 & 0xFFFFF7FFFFFFFFFFLL | ((((unint64_t)*(unsigned __int16 *)(a2 + 640) >> 11) & 1) << 43);
  *(_BYTE *)(a1 + 642) = v82;
  *(_DWORD *)(a1 + 636) = v99;
  *(_WORD *)(a1 + 640) = WORD2(v103);
  v104 = v103 & 0xFFFFCFFFFFFFFFFFLL | ((((unint64_t)*(unsigned __int16 *)(a2 + 640) >> 12) & 3) << 44);
  *(_BYTE *)(a1 + 642) = v82;
  *(_DWORD *)(a1 + 636) = v99;
  *(_WORD *)(a1 + 640) = WORD2(v104);
  v105 = v104 & 0xFFFF3FFFFFFFFFFFLL | ((unint64_t)(HIBYTE(*(_WORD *)(a2 + 640)) >> 6) << 46);
  *(_BYTE *)(a1 + 642) = v82;
  *(_DWORD *)(a1 + 636) = v99;
  *(_WORD *)(a1 + 640) = WORD2(v105);
  v106 = v105 & 0xFFFCFFFFFFFFFFFFLL | ((((unint64_t)(*(unsigned __int8 *)(a2 + 642) << 16) >> 16) & 3) << 48);
  *(_DWORD *)(a1 + 636) = v99;
  *(_BYTE *)(a1 + 642) = BYTE6(v106);
  v107 = HIDWORD(v106);
  *(_WORD *)(a1 + 640) = WORD2(v106);
  v108 = v106 & 0xFFF3FFFFFFFFFFFFLL | ((((unint64_t)(*(unsigned __int8 *)(a2 + 642) << 16) >> 18) & 3) << 50);
  *(_WORD *)(a1 + 640) = v107;
  *(_DWORD *)(a1 + 636) = v99;
  *(_BYTE *)(a1 + 642) = BYTE6(v108);
  v109 = v108 & 0xFFEFFFFFFFFFFFFFLL | ((((unint64_t)(*(unsigned __int8 *)(a2 + 642) << 16) >> 20) & 1) << 52);
  *(_DWORD *)(a1 + 636) = v99;
  *(_BYTE *)(a1 + 642) = BYTE6(v109);
  v110 = HIDWORD(v109);
  *(_WORD *)(a1 + 640) = WORD2(v109);
  v111 = v109 & 0xFFDFFFFFFFFFFFFFLL | ((unint64_t)(*(unsigned __int8 *)(a2 + 642) << 16) << 32) & 0x20000000000000;
  *(_WORD *)(a1 + 640) = v110;
  *(_DWORD *)(a1 + 636) = v99;
  *(_BYTE *)(a1 + 642) = BYTE6(v111);
  *(_BYTE *)(a1 + 643) = *(_BYTE *)(a2 + 643);
  return a1;
}

__n128 WTF::IdentityHashTranslator<WTF::HashMap<WTF::AtomString,WebCore::CounterDirectives,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WebCore::CounterDirectives>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::AtomString>>::translate<WTF::KeyValuePair<WTF::AtomString,WebCore::CounterDirectives>,WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WebCore::CounterDirectives> const&>(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  WTF::StringImpl *v5;
  __n128 result;

  v4 = *(_DWORD **)a2;
  if (*(_QWORD *)a2)
    *v4 += 2;
  v5 = *(WTF::StringImpl **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v5 -= 2;
  }
  result = *(__n128 *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

uint64_t *WTF::Ref<WebCore::StyleBoxData,WTF::RawPtrTraits<WebCore::StyleBoxData>,WTF::DefaultRefDerefTraits<WebCore::StyleBoxData>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      if (*(_BYTE *)(v3 + 56) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 52));
      }
      if (*(_BYTE *)(v3 + 48) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 44));
      }
      if (*(_BYTE *)(v3 + 40) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 36));
      }
      if (*(_BYTE *)(v3 + 32) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 28));
      }
      if (*(_BYTE *)(v3 + 24) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 20));
      }
      if (*(_BYTE *)(v3 + 16) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 12));
      }
      if (*(_BYTE *)(v3 + 8) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 4));
      }
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

uint64_t *WTF::Ref<WebCore::StyleSurroundData,WTF::RawPtrTraits<WebCore::StyleSurroundData>,WTF::DefaultRefDerefTraits<WebCore::StyleSurroundData>>::~Ref(uint64_t *a1, void *a2)
{
  uint64_t v3;
  WebCore::NinePieceImage::Data *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  WTF *v10;
  void *v11;
  char v12;
  char v13;
  char v14;
  char v15;

  v3 = *a1;
  *a1 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
    {
      if (*(_BYTE *)(v3 + 268) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 264));
      }
      if (*(_BYTE *)(v3 + 260) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 256));
      }
      if (*(_BYTE *)(v3 + 252) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 248));
      }
      if (*(_BYTE *)(v3 + 244) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 240));
      }
      if (*(_BYTE *)(v3 + 236) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 232));
      }
      if (*(_BYTE *)(v3 + 228) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 224));
      }
      if (*(_BYTE *)(v3 + 220) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 216));
      }
      if (*(_BYTE *)(v3 + 212) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 208));
      }
      v5 = *(WebCore::NinePieceImage::Data **)(v3 + 200);
      *(_QWORD *)(v3 + 200) = 0;
      if (v5)
      {
        if (*(_DWORD *)v5 == 1)
        {
          WebCore::NinePieceImage::Data::~Data(v5);
          WTF::fastFree(v10, v11);
        }
        else
        {
          --*(_DWORD *)v5;
        }
      }
      v6 = *(unsigned int *)(v3 + 184);
      if ((_DWORD)v6 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v6])(&v12, v3 + 176);
      *(_DWORD *)(v3 + 184) = -1;
      v7 = *(unsigned int *)(v3 + 160);
      if ((_DWORD)v7 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v7])(&v13, v3 + 152);
      *(_DWORD *)(v3 + 160) = -1;
      v8 = *(unsigned int *)(v3 + 136);
      if ((_DWORD)v8 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v8])(&v14, v3 + 128);
      *(_DWORD *)(v3 + 136) = -1;
      v9 = *(unsigned int *)(v3 + 112);
      if ((_DWORD)v9 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN7WebCore18StyleAbsoluteColorENS6_17StyleCurrentColorEN3WTF9UniqueRefINS6_13StyleColorMixEEENSA_INS6_18StyleRelativeColorINS6_25RGBFunctionModernRelativeEEEEENSA_INSD_INS6_17HSLFunctionModernEEEEENSA_INSD_INS6_11HWBFunctionEEEEENSA_INSD_INS6_11LabFunctionEEEEENSA_INSD_INS6_11LCHFunctionEEEEENSA_INSD_INS6_13OKLabFunctionEEEEENSA_INSD_INS6_13OKLCHFunctionEEEEENSA_INSD_INS6_16ColorRGBFunctionINS6_20ExtendedGammaEncodedIfNS6_16A98RGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_19DisplayP3DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_21ProPhotoRGBDescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_17Rec2020DescriptorEEEEEEEEENSA_INSD_INSZ_INS10_IfNS6_15SRGBADescriptorEEEEEEEEENSA_INSD_INSZ_INS6_21ExtendedLinearEncodedIfS1L_EEEEEEEENSA_INSD_INS6_16ColorXYZFunctionINS6_4XYZAIfLNS6_10WhitePointE0EEEEEEEEENSA_INSD_INS1V_INS1W_IfLS1X_1EEEEEEEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRS28_EEEDcOS29_DpOT0____fmatrix[v9])(&v15, v3 + 104);
      *(_DWORD *)(v3 + 112) = -1;
      if (*(_BYTE *)(v3 + 100) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 96));
      }
      if (*(_BYTE *)(v3 + 92) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 88));
      }
      if (*(_BYTE *)(v3 + 84) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 80));
      }
      if (*(_BYTE *)(v3 + 76) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 72));
      }
      if (*(_BYTE *)(v3 + 68) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 64));
      }
      if (*(_BYTE *)(v3 + 60) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 56));
      }
      if (*(_BYTE *)(v3 + 52) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 48));
      }
      if (*(_BYTE *)(v3 + 44) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 40));
      }
      if (*(_BYTE *)(v3 + 36) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 32));
      }
      if (*(_BYTE *)(v3 + 28) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 24));
      }
      if (*(_BYTE *)(v3 + 20) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 16));
      }
      if (*(_BYTE *)(v3 + 12) == 11)
      {
        {
          WebCore::calculationValues(void)::map = 1;
          qword_1ECE90C98 = 0;
        }
        WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)*(unsigned int *)(v3 + 8));
      }
      WTF::fastFree((WTF *)v3, a2);
    }
    else
    {
      --*(_DWORD *)v3;
    }
  }
  return a1;
}

BOOL WebCore::AutosizeStatus::probablyContainsASmallFixedNumberOfLines(WebCore::AutosizeStatus *this, const WebCore::RenderStyle *a2)
{
  uint64_t v2;
  uint64_t v4;
  int v5;
  unsigned int *v6;
  _BOOL8 v8;
  int v9;
  void *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  int v16;
  float v18;
  unsigned __int8 v19;
  char v20;
  char v21;
  char v22;

  v2 = *((_QWORD *)this + 4);
  if (*(unsigned __int8 *)(v2 + 24) - 3 > 1)
    return 0;
  v4 = *(_QWORD *)(*((_QWORD *)this + 1) + 8);
  v22 = 0;
  v5 = *(unsigned __int8 *)(v4 + 48);
  if (v5 == 4)
  {
    v6 = (unsigned int *)(v4 + 44);
    goto LABEL_10;
  }
  if ((v5 & 0xFFFFFFF7) == 3 || *(_BYTE *)(v4 + 16) != 4)
    return 0;
  v6 = (unsigned int *)(v4 + 12);
LABEL_10:
  v21 = 0;
  v19 = *((_BYTE *)v6 + 4);
  v9 = v19;
  v20 = *((_BYTE *)v6 + 5);
  if (v19 - 2 >= 9)
  {
    v10 = 0;
    if (v19 == 11)
    {
      v10 = (void *)*v6;
      v18 = *(float *)v6;
      WebCore::Length::ref((int *)&v18);
    }
  }
  else
  {
    if (*((_BYTE *)v6 + 6))
    {
      v11 = *(float *)v6;
      v10 = (void *)*v6;
      goto LABEL_17;
    }
    v10 = (void *)*v6;
  }
  v11 = (float)(int)v10;
LABEL_17:
  if (v11 <= 0.0)
    goto LABEL_29;
  if (*(_BYTE *)(v2 + 24) == 3)
  {
    v12 = *(float *)(v2 + 20);
    if (!*(_BYTE *)(v2 + 26))
      v12 = (float)SLODWORD(v12);
    v13 = (float)(*(float *)(*((_QWORD *)this + 4) + 224) * v12) / 100.0;
  }
  else
  {
    v13 = *(_BYTE *)(v2 + 26) ? *(float *)(v2 + 20) : (float)*(int *)(v2 + 20);
  }
  if (v13 <= 0.0)
    goto LABEL_29;
  v14 = v11 / v13;
  v15 = *(_QWORD *)(*((_QWORD *)this + 1) + 40);
  v16 = *(_DWORD *)(v15 + 48);
  if (v16 == -1 || *(_BYTE *)(v15 + 44))
  {
    if (v14 > 5.01)
    {
LABEL_29:
      v8 = 0;
      goto LABEL_30;
    }
    v8 = (float)(v14 - floorf(v14)) <= 0.01;
  }
  else
  {
    if (!v16)
      goto LABEL_29;
    v8 = floorf(v14) == (float)v16;
  }
LABEL_30:
  if (v9 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v10);
  }
  return v8;
}

uint64_t WebCore::AutosizeStatus::updateStatus(uint64_t this, WebCore::RenderStyle *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  char v7;
  char v8;

  v2 = this;
  v3 = *(_BYTE *)(this + 46) & 0x1F;
  if ((*(_QWORD *)(this + 16) & 0x1FLL) == 0x1A)
    goto LABEL_2;
  v4 = *(_QWORD *)(this + 32);
  if (*(_BYTE *)(v4 + 24) != 4)
    goto LABEL_21;
  v5 = *(float *)(v4 + 20);
  if (!*(_BYTE *)(v4 + 26))
    v5 = (float)SLODWORD(v5);
  if ((float)(v5 - *(float *)(v4 + 224)) <= 5.0)
  {
LABEL_21:
    if ((*(_DWORD *)(this + 40) & 0x78000000) != 0x40000000)
    {
      this = WebCore::AutosizeStatus::probablyContainsASmallFixedNumberOfLines((WebCore::AutosizeStatus *)this, a2);
      if ((_DWORD)this)
LABEL_2:
        v3 |= 1u;
    }
  }
  v6 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 8);
  v7 = v3 | 2;
  if (*(_BYTE *)(v6 + 16) != 4)
    v7 = v3;
  if (*(_BYTE *)(v6 + 8) == 4)
    v8 = v7 | 4;
  else
    v8 = v7;
  if ((*(_QWORD *)(v2 + 16) & 0x1C00) == 0x400)
    v8 |= 0x10u;
  if ((*(_QWORD *)(v2 + 16) & 0xE000000) != 0)
    v8 |= 8u;
  *(_DWORD *)(v2 + 44) = *(_DWORD *)(v2 + 44) & 0xFFE0FFFF | ((v8 & 0x1F) << 16);
  return this;
}

BOOL WebCore::WillChangeData::operator==(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a1 + 20);
  return (_DWORD)v2 == *(_DWORD *)(a2 + 20)
      && WTF::VectorComparer<false,WebCore::WillChangeData::AnimatableFeature>::compare(*(unsigned __int8 **)(a1 + 8), *(unsigned __int8 **)(a2 + 8), v2);
}

BOOL WebCore::WillChangeData::containsProperty(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  _WORD *v4;
  int v5;
  _BOOL8 result;
  uint64_t v7;

  v2 = *(unsigned int *)(a1 + 20);
  if (!(_DWORD)v2)
    return 0;
  v3 = 4 * v2 - 4;
  v4 = (_WORD *)(*(_QWORD *)(a1 + 8) + 1);
  do
  {
    if (*((_BYTE *)v4 - 1) == 2)
      v5 = *v4 & 0x3FFF;
    else
      v5 = 0;
    result = v5 == a2;
    if (v5 == a2)
      break;
    v7 = v3;
    v3 -= 4;
    v4 += 2;
  }
  while (v7);
  return result;
}

uint64_t WebCore::WillChangeData::createsContainingBlockForAbsolutelyPositioned(WebCore::WillChangeData *this, int a2)
{
  uint64_t result;
  uint64_t v4;
  _WORD *v5;
  uint64_t v6;

  if ((WebCore::WillChangeData::createsContainingBlockForOutOfFlowPositioned(this, a2) & 1) != 0)
    return 1;
  v4 = *((unsigned int *)this + 5);
  if ((_DWORD)v4)
  {
    v5 = (_WORD *)(*((_QWORD *)this + 1) + 1);
    v6 = 4 * v4;
    while (*((_BYTE *)v5 - 1) != 2 || (*v5 & 0x3FFF) != 0xCA)
    {
      result = 0;
      v5 += 2;
      v6 -= 4;
      if (!v6)
        return result;
    }
    return 1;
  }
  return 0;
}

uint64_t WebCore::WillChangeData::createsContainingBlockForOutOfFlowPositioned(WebCore::WillChangeData *this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  _WORD *v7;
  uint64_t v8;
  _WORD *v9;
  uint64_t v10;
  _WORD *v11;
  uint64_t v12;
  _WORD *v13;
  uint64_t v14;
  _WORD *v15;
  uint64_t v16;
  _WORD *v17;
  uint64_t v18;
  _WORD *v19;
  uint64_t v20;
  _WORD *v21;
  uint64_t v22;
  _WORD *i;
  uint64_t result;

  v2 = *((unsigned int *)this + 5);
  if (!(_DWORD)v2)
    return 0;
  v3 = *((_QWORD *)this + 1);
  v4 = (_WORD *)(v3 + 1);
  v5 = 4 * v2;
  v6 = v5;
  while (*((_BYTE *)v4 - 1) != 2 || (*v4 & 0x3FFF) != 0xC6)
  {
    v4 += 2;
    v6 -= 4;
    if (!v6)
    {
      v7 = (_WORD *)(v3 + 1);
      v8 = v5;
      while (*((_BYTE *)v7 - 1) != 2 || (*v7 & 0x3FFF) != 0x111)
      {
        v7 += 2;
        v8 -= 4;
        if (!v8)
        {
          v9 = (_WORD *)(v3 + 1);
          v10 = v5;
          while (*((_BYTE *)v9 - 1) != 2 || (*v9 & 0x3FFF) != 0x116)
          {
            v9 += 2;
            v10 -= 4;
            if (!v10)
            {
              v11 = (_WORD *)(v3 + 1);
              v12 = v5;
              while (*((_BYTE *)v11 - 1) != 2 || (*v11 & 0x3FFF) != 0x11C)
              {
                v11 += 2;
                v12 -= 4;
                if (!v12)
                {
                  v13 = (_WORD *)(v3 + 1);
                  v14 = v5;
                  while (*((_BYTE *)v13 - 1) != 2 || (*v13 & 0x3FFF) != 0xD2)
                  {
                    v13 += 2;
                    v14 -= 4;
                    if (!v14)
                    {
                      v15 = (_WORD *)(v3 + 1);
                      v16 = v5;
                      while (*((_BYTE *)v15 - 1) != 2 || (*v15 & 0x3FFF) != 0xD6)
                      {
                        v15 += 2;
                        v16 -= 4;
                        if (!v16)
                        {
                          v17 = (_WORD *)(v3 + 1);
                          v18 = v5;
                          while (*((_BYTE *)v17 - 1) != 2 || (*v17 & 0x3FFF) != 0x62)
                          {
                            v17 += 2;
                            v18 -= 4;
                            if (!v18)
                            {
                              v19 = (_WORD *)(v3 + 1);
                              v20 = v5;
                              while (*((_BYTE *)v19 - 1) != 2 || (*v19 & 0x3FFF) != 0x15F)
                              {
                                v19 += 2;
                                v20 -= 4;
                                if (!v20)
                                  goto LABEL_34;
                              }
                              if (!a2)
                                return 1;
LABEL_34:
                              v21 = (_WORD *)(v3 + 1);
                              v22 = v5;
                              while (*((_BYTE *)v21 - 1) != 2 || (*v21 & 0x3FFF) != 0x1C3)
                              {
                                v21 += 2;
                                v22 -= 4;
                                if (!v22)
                                  goto LABEL_38;
                              }
                              if (!a2)
                                return 1;
LABEL_38:
                              for (i = (_WORD *)(v3 + 1); *((_BYTE *)i - 1) != 2 || (*i & 0x3FFF) != 0x75; i += 2)
                              {
                                result = 0;
                                v5 -= 4;
                                if (!v5)
                                  return result;
                              }
                              return 1;
                            }
                          }
                          return 1;
                        }
                      }
                      return 1;
                    }
                  }
                  return 1;
                }
              }
              return 1;
            }
          }
          return 1;
        }
      }
      return 1;
    }
  }
  return 1;
}

uint64_t WebCore::WillChangeData::canBeBackdropRoot(WebCore::WillChangeData *this)
{
  uint64_t v1;
  uint64_t v2;
  _WORD *v3;
  uint64_t v4;
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  _WORD *v8;
  uint64_t v9;
  _WORD *v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t v13;
  _WORD *v14;
  uint64_t v15;
  _WORD *i;
  uint64_t result;

  v1 = *((unsigned int *)this + 5);
  if (!(_DWORD)v1)
    return 0;
  v2 = *((_QWORD *)this + 1);
  v3 = (_WORD *)(v2 + 1);
  v4 = 4 * v1;
  v5 = v4;
  while (*((_BYTE *)v3 - 1) != 2 || (*v3 & 0x3FFF) != 0xB7)
  {
    v3 += 2;
    v5 -= 4;
    if (!v5)
    {
      v6 = (_WORD *)(v2 + 1);
      v7 = v4;
      while (*((_BYTE *)v6 - 1) != 2 || (*v6 & 0x3FFF) != 0x15F)
      {
        v6 += 2;
        v7 -= 4;
        if (!v7)
        {
          v8 = (_WORD *)(v2 + 1);
          v9 = v4;
          while (*((_BYTE *)v8 - 1) != 2 || (*v8 & 0x3FFF) != 0x1C3)
          {
            v8 += 2;
            v9 -= 4;
            if (!v9)
            {
              v10 = (_WORD *)(v2 + 1);
              v11 = v4;
              while (*((_BYTE *)v10 - 1) != 2 || (*v10 & 0x3FFF) != 0x56)
              {
                v10 += 2;
                v11 -= 4;
                if (!v11)
                {
                  v12 = (_WORD *)(v2 + 1);
                  v13 = v4;
                  while (*((_BYTE *)v12 - 1) != 2 || (*v12 & 0x3FFF) != 0x75)
                  {
                    v12 += 2;
                    v13 -= 4;
                    if (!v13)
                    {
                      v14 = (_WORD *)(v2 + 1);
                      v15 = v4;
                      while (*((_BYTE *)v14 - 1) != 2 || (*v14 & 0x3FFF) != 0xAE)
                      {
                        v14 += 2;
                        v15 -= 4;
                        if (!v15)
                        {
                          for (i = (_WORD *)(v2 + 1); *((_BYTE *)i - 1) != 2 || (*i & 0x3FFF) != 0x1FD; i += 2)
                          {
                            result = 0;
                            v4 -= 4;
                            if (!v4)
                              return result;
                          }
                          return 1;
                        }
                      }
                      return 1;
                    }
                  }
                  return 1;
                }
              }
              return 1;
            }
          }
          return 1;
        }
      }
      return 1;
    }
  }
  return 1;
}

uint64_t WebCore::WillChangeData::addFeature(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v5;
  uint64_t result;
  char v7;
  char v8;
  BOOL v9;
  int v10;

  LOBYTE(v10) = 2;
  *(_WORD *)((char *)&v10 + 1) = 0;
  if (a2 == 2)
  {
    *(_WORD *)((char *)&v10 + 1) = a3 & 0x3FFF;
LABEL_3:
    LOBYTE(v10) = a2;
    goto LABEL_4;
  }
  if (a2 < 2)
    goto LABEL_3;
LABEL_4:
  v5 = *(unsigned int *)(a1 + 20);
  if ((_DWORD)v5 == *(_DWORD *)(a1 + 16))
  {
    WTF::Vector<WebCore::WillChangeData::AnimatableFeature,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::WillChangeData::AnimatableFeature>(a1 + 8, (unint64_t)&v10);
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v5) = v10;
    ++*(_DWORD *)(a1 + 20);
  }
  result = WebCore::WillChangeData::propertyCreatesStackingContext(a3);
  *(_BYTE *)(a1 + 32) |= result;
  v7 = 1;
  if (a3 <= 350)
  {
    if (a3 == 183 || a3 == 117)
      goto LABEL_13;
LABEL_12:
    v7 = 0;
    goto LABEL_13;
  }
  if (a3 != 351 && a3 != 451)
    goto LABEL_12;
LABEL_13:
  v8 = *(_BYTE *)(a1 + 34) | v7;
  *(_BYTE *)(a1 + 34) = v8;
  v9 = 1;
  if ((a3 - 210) > 0x3F || ((1 << (a3 + 46)) & 0x8000000000000011) == 0)
    v9 = a3 == 284;
  *(_BYTE *)(a1 + 33) |= v9 | v8;
  return result;
}

unsigned int *WebCore::RenderSVGBlock::updateFromStyle(WebCore::RenderSVGBlock *this)
{
  unsigned int *result;

  result = WebCore::RenderBox::updateFromStyle(this);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0)
    return (unsigned int *)WebCore::RenderLayerModelObject::updateHasSVGTransformFlags(this);
  *((_DWORD *)this + 5) &= ~0x10000u;
  return result;
}

uint64_t WebCore::RenderSVGBlock::needsHasSVGTransformFlags(WebCore::RenderSVGBlock *this)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 0x20) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 1184))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196504324);
  }
  *(_DWORD *)(v1 + 24) += 2;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 1352))(v1);
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1, v2);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  return v3;
}

uint64_t WebCore::RenderSVGBlock::boundingRects(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 8) + 40) + 8)
                              + 680)
                  + 680) & 0x800000000000) != 0)
  {
    v4 = *(_QWORD *)(result + 160);
    *(_QWORD *)&v8 = *a3;
    *((_QWORD *)&v8 + 1) = v4;
    v5 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v5 == *(_DWORD *)(a2 + 8))
    {
      result = WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v5 + 1, (unint64_t)&v8);
      v5 = *(unsigned int *)(a2 + 12);
      v6 = *(_QWORD *)a2;
      v7 = *(_OWORD *)result;
    }
    else
    {
      v6 = *(_QWORD *)a2;
      v7 = v8;
    }
    *(_OWORD *)(v6 + 16 * v5) = v7;
    ++*(_DWORD *)(a2 + 12);
  }
  return result;
}

__int128 *WebCore::RenderSVGBlock::absoluteQuads(uint64_t a1, uint64_t a2)
{
  float v3;
  float v4;
  __int128 *result;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  float v11;
  int v12;
  float v13;
  float v14;
  int v15;
  float v16;
  _OWORD v17[2];

  v3 = (float)*(int *)(a1 + 160) * 0.015625;
  v4 = (float)*(int *)(a1 + 164) * 0.015625;
  v10 = 0;
  v11 = v3 + 0.0;
  v12 = 0;
  v13 = v3 + 0.0;
  v14 = v4 + 0.0;
  v15 = 0;
  v16 = v4 + 0.0;
  result = (__int128 *)WebCore::RenderObject::localToContainerQuad(a1, (float *)&v10, 0, 2u, v17);
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6 == *(_DWORD *)(a2 + 8))
  {
    result = (__int128 *)WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v6 + 1, (unint64_t)v17);
    v7 = (_OWORD *)(*(_QWORD *)a2 + 32 * *(unsigned int *)(a2 + 12));
    v8 = *result;
    v9 = result[1];
  }
  else
  {
    v7 = (_OWORD *)(*(_QWORD *)a2 + 32 * v6);
    v8 = v17[0];
    v9 = v17[1];
  }
  *v7 = v8;
  v7[1] = v9;
  ++*(_DWORD *)(a2 + 12);
  return result;
}

void WebCore::RenderSVGBlock::willBeDestroyed(WebCore::RenderSVGBlock *this, const WebCore::RenderElement *a2)
{
  WebCore::RenderBlockFlow *v2;
  _QWORD *v3;
  const WebCore::RenderElement *v4;
  WebCore::RenderElement **v5;

  v2 = this;
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) == 0
    && (*(_WORD *)((_BYTE *)this + 69) & 0x1000) != 0)
  {
    v3 = (_QWORD *)WebCore::SVGResourcesCache::cachedResourcesForRenderer(this, a2);
    v2 = this;
    if (v3)
    {
      WebCore::SVGResources::removeClientFromCache(v3, this, 1);
      v5 = (WebCore::RenderElement **)WebCore::resourcesCacheFromRenderer(*(WebCore **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8), v4);
      WebCore::SVGResourcesCache::removeResourcesFromRenderer(v5, this);
      v2 = this;
    }
  }
  WebCore::RenderBlockFlow::willBeDestroyed(v2, a2);
}

void WebCore::RenderSVGBlock::styleDidChange(WebCore::RenderObject *this, WTF::StringImpl *a2, const WTF::StringImpl *a3)
{
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0)
  {
    WebCore::RenderBlockFlow::styleDidChange((uint64_t)this, a2, (uint64_t)a3);
  }
  else
  {
    if ((_DWORD)a2 == 8)
      WebCore::RenderObject::invalidateCachedBoundaries((uint64_t)this);
    WebCore::RenderBlockFlow::styleDidChange((uint64_t)this, a2, (uint64_t)a3);
    WebCore::SVGResourcesCache::clientStyleChanged((uint64_t)this, a2, a3, (WebCore::RenderObject *)((char *)this + 80));
  }
}

void WebCore::RenderSVGBlock::referenceBoxRect(WebCore::RenderBox *a1, unsigned int a2)
{
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0)
    WebCore::RenderElement::referenceBoxRect((uint64_t)a1, a2);
  else
    WebCore::RenderBox::referenceBoxRect(a1, a2);
}

void WebCore::RenderSVGBlock::computeOverflow(const WebCore::RenderBox *a1, unsigned int a2, char a3)
{
  WebCore::ShadowData *v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  int v22;
  int32x2_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int32x4_t v28;
  int v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;

  WebCore::RenderBlockFlow::computeOverflow(a1, (void *)a2, a3);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) == 0)
  {
    v4 = *(WebCore::ShadowData **)(*((_QWORD *)a1 + 13) + 160);
    if (v4)
    {
      v5 = *((_QWORD *)a1 + 20);
      v6 = WebCore::ShadowData::shadowOutsetExtent(v4);
      v9 = v5 - v8;
      if (__OFSUB__((_DWORD)v5, v8))
        v9 = (v5 >> 31) + 0x7FFFFFFF;
      v10 = __OFADD__(v9, HIDWORD(v6));
      v11 = v9 + HIDWORD(v6);
      v12 = (v9 >> 31) + 0x7FFFFFFF;
      if (!v10)
        v12 = v11;
      v13 = (HIDWORD(v5) >> 31) + 0x7FFFFFFF;
      if (!__OFSUB__(HIDWORD(v5), (_DWORD)v6))
        v13 = HIDWORD(v5) - v6;
      v10 = __OFADD__(v13, v7);
      v14 = v13 + v7;
      v15 = (v13 >> 31) + 0x7FFFFFFF;
      if (!v10)
        v15 = v14;
      v16 = v8 - (v14 & 0xFFFFFFC0);
      v17 = v6 - (v14 & 0xFFFFFFC0);
      v10 = __OFADD__(v16, v12);
      v18 = v16 + v12;
      if (v10)
        v18 = (v16 >> 31) + 0x7FFFFFFF;
      v10 = __OFADD__(v17, v15);
      v19 = v17 + v15;
      v20 = (v17 >> 31) + 0x7FFFFFFF;
      if (!v10)
        v20 = v19;
      v21 = -v18 < 0;
      v22 = v18 & 0x3F;
      v23 = vshr_n_s32((int32x2_t)vsra_n_u32((uint32x2_t)__PAIR64__(v20, v18), (uint32x2_t)vcltz_s32((int32x2_t)__PAIR64__(v20, v18)), 0x1AuLL), 6uLL);
      v24 = -v18 & 0x3F;
      if (v21)
        v25 = v22;
      else
        v25 = -v24;
      v21 = -v20 < 0;
      v26 = -v20 & 0x3F;
      v27 = v20 & 0x3F;
      v28.i64[0] = __PAIR64__(v17, v16);
      v28.i32[2] = v25;
      if (v21)
        v29 = v27;
      else
        v29 = -v26;
      v28.i32[3] = v29;
      v30.i64[0] = 0x2000000020;
      v30.i64[1] = 0x2000000020;
      v31 = vaddq_s32(v28, v30);
      v30.i32[0] = v8 / 64;
      v30.i32[1] = (int)v6 / 64;
      v30.u64[1] = (unint64_t)vsub_s32(v23, (int32x2_t)*(_OWORD *)&vshrq_n_s32(v31, 6uLL));
      v32 = vsraq_n_s32(v30, v31, 6uLL);
      v33.i64[0] = 0xFE000000FE000000;
      v33.i64[1] = 0xFE000000FE000000;
      v34 = (int8x16_t)vcgtq_s32(v32, v33);
      v31.i64[0] = 0xFE000000FE000000;
      v31.i64[1] = 0xFE000000FE000000;
      v35.i64[0] = 0x8000000080000000;
      v35.i64[1] = 0x8000000080000000;
      v36 = vorrq_s8((int8x16_t)(*(_OWORD *)&v34 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vbicq_s8(vbslq_s8((int8x16_t)vcgtq_s32(v31, v32), v35, (int8x16_t)vshlq_n_s32(v32, 6uLL)), v34));
      WebCore::RenderBox::addVisualOverflow((uint64_t)a1, (const WebCore::LayoutRect *)&v36);
    }
  }
}

uint64_t WebCore::RenderSVGBlock::clippedOverflowRect(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0)
    return WebCore::RenderObject::clippedOverflowRect(a1, a2, a3);
  else
    return WebCore::SVGRenderSupport::clippedOverflowRectForRepaint(a1, a2, a3);
}

float *WebCore::RenderSVGBlock::rectsForRepaintingAfterLayout@<X0>(WebCore::RenderBox *a1@<X0>, const WebCore::RenderLayerModelObject *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v4;
  float *result;
  uint64_t v9;
  uint64_t v10;

  v4 = a3;
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0)
    return WebCore::RenderObject::rectsForRepaintingAfterLayout(a1, (uint64_t)a2, a3, a4);
  result = (float *)WebCore::SVGRenderSupport::clippedOverflowRectForRepaint((uint64_t)a1, (uint64_t)a2, 0xC00000000uLL);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v9;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 32) = 0;
  if (v4)
  {
    result = (float *)WebCore::RenderBox::outlineBoundsForRepaint(a1, a2, 0);
    *(_QWORD *)(a4 + 16) = result;
    *(_QWORD *)(a4 + 24) = v10;
    *(_BYTE *)(a4 + 32) = 1;
  }
  return result;
}

_QWORD *WebCore::RenderSVGBlock::computeVisibleRectsInContainer@<X0>(_QWORD *a1@<X0>, __int128 *a2@<X1>, WebCore::RenderLayerModelObject *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *result;
  char v7;
  float v8;
  unsigned int v9;
  uint64_t v10;
  float v11;
  unsigned int v12;
  uint64_t v13;
  float v14;
  unsigned int v15;
  float v16;
  unsigned int v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  float32x4_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  char v28;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[3] + 8) + 40) + 8) + 680) + 680) & 0x800000000000) != 0)
    return (_QWORD *)WebCore::RenderLayerModelObject::computeVisibleRectsInSVGContainer(a3, (uint64_t)a1, a2, a4, a5);
  v23 = vmulq_f32(vcvtq_f32_s32(*(int32x4_t *)a2), (float32x4_t)vdupq_n_s32(0x3C800000u));
  result = WebCore::SVGRenderSupport::computeFloatVisibleRectInContainer(a1, (__n128 *)&v23, (uint64_t)a3, a4, (uint64_t)&v24);
  v7 = v28;
  if (v28)
  {
    v8 = floorf(v24 * 64.0);
    if (v8 > -2147500000.0)
      v9 = (int)v8;
    else
      v9 = 0x80000000;
    if (v8 < 2147500000.0)
      v10 = v9;
    else
      v10 = 0x7FFFFFFFLL;
    v11 = floorf(v25 * 64.0);
    if (v11 > -2147500000.0)
      v12 = (int)v11;
    else
      v12 = 0x80000000;
    if (v11 < 2147500000.0)
      v13 = v12;
    else
      v13 = 0x7FFFFFFFLL;
    v14 = ceilf((float)(v24 + v26) * 64.0);
    if (v14 >= 2147500000.0)
    {
      v15 = 0x7FFFFFFF;
    }
    else if (v14 <= -2147500000.0)
    {
      v15 = 0x80000000;
    }
    else
    {
      v15 = (int)v14;
    }
    v16 = ceilf((float)(v25 + v27) * 64.0);
    if (v16 >= 2147500000.0)
    {
      v17 = 0x7FFFFFFF;
    }
    else if (v16 <= -2147500000.0)
    {
      v17 = 0x80000000;
    }
    else
    {
      v17 = (int)v16;
    }
    v18 = __OFSUB__(v15, (_DWORD)v10);
    v19 = v15 - v10;
    LODWORD(v20) = (v15 >> 31) + 0x7FFFFFFF;
    if (v18)
      v20 = v20;
    else
      v20 = v19;
    LODWORD(v21) = (v17 >> 31) + 0x7FFFFFFF;
    if (__OFSUB__(v17, (_DWORD)v13))
      v21 = v21;
    else
      v21 = v17 - v13;
    *(_QWORD *)a5 = v10 | (v13 << 32);
    *(_QWORD *)(a5 + 8) = v20 | (v21 << 32);
    *(_BYTE *)(a5 + 16) = 0;
    v22 = (_BYTE *)(a5 + 32);
    v7 = 1;
  }
  else
  {
    v22 = (_BYTE *)a5;
  }
  *v22 = 0;
  *(_BYTE *)(a5 + 36) = v7;
  return result;
}

WebCore::RenderObject *WebCore::RenderSVGBlock::mapLocalToContainer(WebCore::RenderObject *a1, const WebCore::RenderLayerModelObject *a2, float64x2_t **a3, int a4, WebCore::TransformState *a5)
{
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0)
    return WebCore::RenderLayerModelObject::mapLocalToSVGContainer(a1, a2, (uint64_t)a3, a4, a5);
  else
    return (WebCore::RenderObject *)WebCore::SVGRenderSupport::mapLocalToContainer(a1, a2, a3, a5, (BOOL *)a5);
}

const WebCore::RenderLayerModelObject *WebCore::RenderSVGBlock::pushMappingToContainer(WebCore::RenderSVGBlock *this, const WebCore::RenderLayerModelObject *a2, WebCore::RenderGeometryMap *a3)
{
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0)
    return WebCore::RenderBox::pushMappingToContainer(this, a2, a3);
  v16 = constinit_10;
  v17 = unk_1969FE138;
  v18 = xmmword_1969FE148;
  v5 = WebCore::SVGRenderSupport::localToParentTransform(this, (const WebCore::RenderElement *)&v16, a3);
  v7 = v16;
  v8 = 0;
  v9 = 0;
  v10 = v17;
  v11 = 0u;
  v12 = 0u;
  v13 = xmmword_1968A14B0;
  v14 = v18;
  v15 = xmmword_1968A14C0;
  WebCore::RenderGeometryMap::push(a3, this, (const WebCore::TransformationMatrix *)&v7, 0, 0, 0, 0);
  return (const WebCore::RenderLayerModelObject *)v5;
}

uint64_t WebCore::RenderSVGBlock::offsetFromContainer(WebCore::RenderSVGBlock *this, WebCore::RenderElement *a2, const WebCore::LayoutPoint *a3, BOOL *a4)
{
  return *((_QWORD *)this + 19);
}

uint64_t WebCore::RenderSVGContainer::layout(WebCore::RenderSVGContainer *this)
{
  char v2;
  char v3;
  WebCore::RenderObject *v4;
  uint64_t v5;
  BOOL v6;
  double *v7;
  BOOL v8;
  uint64_t v9;
  WebCore::SVGContainerLayout *v10;
  char v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  float v16;
  float v17;
  float v18;
  float v19;
  BOOL v20;
  BOOL v21;
  WTF *v22;
  uint64_t result;
  unsigned int v24;
  WTF *v26;
  float v27;
  float v28;
  float v29;
  float v30;
  WebCore::RenderObject *v31;
  _BYTE v32[56];

  WebCore::LayoutRepainter::LayoutRepainter((uint64_t)v32, this, (*((_BYTE *)this + 46) == 79) << 8, 0, 1);
  v2 = (*(uint64_t (**)(WebCore::RenderSVGContainer *))(*(_QWORD *)this + 912))(this);
  v3 = *((_BYTE *)this + 169);
  *((_BYTE *)this + 169) = v2;
  WebCore::SVGLayerTransformUpdater::SVGLayerTransformUpdater((WebCore::SVGLayerTransformUpdater *)&v26, this);
  v5 = *((_QWORD *)v26 + 1);
  if ((*(_BYTE *)(v5 + 21) & 0x80) != 0)
  {
    v7 = *(double **)(*(_QWORD *)(v5 + 144) + 200);
    v4 = v31;
    if (v7)
      v8 = v31 == 0;
    else
      v8 = 1;
    if (v8)
    {
      if ((v7 != 0) != (v31 != 0))
        goto LABEL_3;
    }
    else if (!WebCore::TransformationMatrix::operator==(v7, (double *)v31))
    {
      goto LABEL_3;
    }
  }
  else if (v31)
  {
LABEL_3:
    v6 = 1;
    goto LABEL_13;
  }
  v9 = *((_QWORD *)this + 4);
  if (v9)
    v10 = *(WebCore::SVGContainerLayout **)(v9 + 8);
  else
    v10 = 0;
  v6 = WebCore::SVGContainerLayout::transformToRootChanged(v10, v4);
LABEL_13:
  v11 = *((_BYTE *)this + 170);
  *((_BYTE *)this + 170) = v6;
  (*(void (**)(WebCore::RenderSVGContainer *))(*(_QWORD *)this + 896))(this);
  *((_BYTE *)this + 170) = v11;
  v13 = *((_QWORD *)v26 + 1);
  if ((*(_BYTE *)(v13 + 21) & 0x80) != 0)
  {
    v14 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v13 + 88) + 32) + 40) + 44);
    v15 = v14 >= 5 ? 2 : 0x705020406uLL >> (8 * v14);
    v16 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v13 + 752))(v13, v15 & 7);
    v20 = v16 == v27 && v17 == v28;
    if (!v20 || (v18 == v29 ? (v21 = v19 == v30) : (v21 = 0), !v21))
      (*(void (**)(_QWORD))(**((_QWORD **)v26 + 1) + 856))(*((_QWORD *)v26 + 1));
  }
  v22 = v26;
  v26 = 0;
  if (v22)
  {
    if (*(_DWORD *)v22 == 1)
      WTF::fastFree(v22, v12);
    else
      --*(_DWORD *)v22;
  }
  *((_BYTE *)this + 169) = v3;
  result = WebCore::LayoutRepainter::repaintAfterLayout((WebCore::LayoutRepainter *)v32);
  v24 = *((_DWORD *)this + 5) & 0xFFDFFDFF | 0x200;
  *((_DWORD *)this + 5) = v24;
  if ((*((_BYTE *)this + 45) & 2) == 0)
  {
    *(_WORD *)((char *)this + 69) &= ~1u;
    *((_WORD *)this + 38) = *((_WORD *)this + 38) & 0xF | (16
                                                         * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                                                                            + 1944)
                                                                                + 248)
                                                                    + 472));
  }
  *((_DWORD *)this + 5) = v24 & 0xFFDFFE07;
  return result;
}

WTF *WebCore::RenderSVGContainer::layoutChildren(WebCore::RenderSVGContainer *this)
{
  WTF *v2;
  double v3;
  WTF *v4;
  int v5;
  int v6;
  int v7;
  double v8;
  float v9;
  float v10;
  int v11;
  int v12;
  float v13;
  unsigned int v14;
  uint64_t v15;
  float v16;
  unsigned int v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  unsigned int v22;
  float v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  void *v27;
  WTF *v28;
  WTF *v29;
  WTF *result;
  void *v31;
  WTF *v32;
  void *v33;
  WTF *v34;
  __int16 v35;
  __int128 v36;
  char v37;
  WTF *v38;
  WTF *v39;
  WTF *v40;
  uint64_t v41;

  v2 = (WTF *)*((_QWORD *)this + 1);
  if (!v2)
  {
    v2 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v2 = 1;
    *((_QWORD *)v2 + 1) = this;
    v32 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v2;
    if (v32)
    {
      if (*(_DWORD *)v32 == 1)
      {
        WTF::fastFree(v32, v31);
        v2 = (WTF *)*((_QWORD *)this + 1);
      }
      else
      {
        --*(_DWORD *)v32;
      }
    }
  }
  ++*(_DWORD *)v2;
  v40 = 0;
  v41 = 0;
  v39 = v2;
  WebCore::SVGContainerLayout::layoutChildren((WebCore::SVGContainerLayout *)&v39, (const WebCore::RenderObject *)((*((_DWORD *)this + 5) >> 3) & 1));
  v4 = (WTF *)*((_QWORD *)this + 1);
  if (!v4)
  {
    v4 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v4 = 1;
    *((_QWORD *)v4 + 1) = this;
    v34 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v4;
    if (v34)
    {
      if (*(_DWORD *)v34 == 1)
      {
        WTF::fastFree(v34, v33);
        v4 = (WTF *)*((_QWORD *)this + 1);
      }
      else
      {
        --*(_DWORD *)v34;
      }
    }
  }
  ++*(_DWORD *)v4;
  v38 = v4;
  *((float32_t *)this + 43) = WebCore::SVGBoundingBoxComputation::computeDecoratedBoundingBox((uint64_t)&v38, &WebCore::SVGBoundingBoxComputation::objectBoundingBoxDecoration, (_BYTE *)this + 168, v3);
  *((_DWORD *)this + 44) = v5;
  *((_DWORD *)this + 45) = v6;
  *((_DWORD *)this + 46) = v7;
  *(int32x4_t *)((char *)this + 204) = vdupq_n_s32(0x7FC00000u);
  (*(void (**)(__int128 *__return_ptr, WebCore::RenderSVGContainer *))(*(_QWORD *)this + 920))(&v36, this);
  if (v37)
  {
    *(_OWORD *)((char *)this + 188) = v36;
    v9 = *((float *)this + 47);
    v10 = *((float *)this + 48);
  }
  else
  {
    v35 = 65;
    v9 = WebCore::SVGBoundingBoxComputation::computeDecoratedBoundingBox((uint64_t)&v38, &v35, 0, v8);
    *((float *)this + 47) = v9;
    *((float *)this + 48) = v10;
    *((_DWORD *)this + 49) = v11;
    *((_DWORD *)this + 50) = v12;
  }
  v13 = floorf(v9 * 64.0);
  if (v13 > -2147500000.0)
    v14 = (int)v13;
  else
    v14 = 0x80000000;
  if (v13 < 2147500000.0)
    v15 = v14;
  else
    v15 = 0x7FFFFFFFLL;
  v16 = floorf(v10 * 64.0);
  if (v16 > -2147500000.0)
    v17 = (int)v16;
  else
    v17 = 0x80000000;
  if (v16 < 2147500000.0)
    v18 = v17;
  else
    v18 = 0x7FFFFFFFLL;
  v19 = v9 + *((float *)this + 49);
  v20 = v10 + *((float *)this + 50);
  v21 = ceilf(v19 * 64.0);
  if (v21 >= 2147500000.0)
  {
    v22 = 0x7FFFFFFF;
  }
  else if (v21 <= -2147500000.0)
  {
    v22 = 0x80000000;
  }
  else
  {
    v22 = (int)v21;
  }
  v23 = ceilf(v20 * 64.0);
  if (v23 >= 2147500000.0)
  {
    v24 = 0x7FFFFFFF;
  }
  else if (v23 <= -2147500000.0)
  {
    v24 = 0x80000000;
  }
  else
  {
    v24 = (int)v23;
  }
  v25 = v22 - v15;
  if (__OFSUB__(v22, (_DWORD)v15))
    v25 = (v22 >> 31) + 0x7FFFFFFF;
  v26 = v24 - v18;
  if (__OFSUB__(v24, (_DWORD)v18))
    v26 = (v24 >> 31) + 0x7FFFFFFF;
  *((_QWORD *)this + 19) = v15 | (v18 << 32);
  *((_QWORD *)this + 20) = v25 | (unint64_t)(v26 << 32);
  WebCore::SVGContainerLayout::positionChildrenRelativeToContainer((WebCore::SVGContainerLayout *)&v39);
  v28 = v38;
  v38 = 0;
  if (v28)
  {
    if (*(_DWORD *)v28 == 1)
      WTF::fastFree(v28, v27);
    else
      --*(_DWORD *)v28;
  }
  v29 = v40;
  if (v40)
  {
    v40 = 0;
    LODWORD(v41) = 0;
    WTF::fastFree(v29, v27);
  }
  result = v39;
  v39 = 0;
  if (result)
  {
    if (*(_DWORD *)result == 1)
      return (WTF *)WTF::fastFree(result, v27);
    else
      --*(_DWORD *)result;
  }
  return result;
}

float WebCore::RenderSVGContainer::strokeBoundingBox(WebCore::RenderSVGContainer *this)
{
  return *((float *)this + 51);
}

unint64_t WebCore::RenderSVGContainer::paint(WebCore::RenderSVGContainer *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  unint64_t result;
  const WebCore::RenderLayerModelObject *v7;
  double v8;
  int v9;
  WebCore::RenderSVGContainer *v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 10) + 40))(*((_QWORD *)a2 + 10));
  if ((result & 1) == 0)
  {
    v9 = *((unsigned __int16 *)a2 + 8);
    if ((v9 & 0xC58) != 0)
    {
      v10 = (WebCore::RenderSVGContainer *)*((_QWORD *)a2 + 3);
      if ((!v10 || v10 == this) && (*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) == 0)
      {
        v11 = *((_DWORD *)this + 30) & 0x30;
        if (v11 != 16 && (*((_QWORD *)this + 12) & 0x1FLL) != 0x1A)
        {
          if (v9 == 2048)
          {
            v35 = *(_OWORD *)((char *)this + 172);
            result = *((_QWORD *)a2 + 10);
            if ((!v10 || v10 == this) && !v11)
            {
              result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 40))(result);
              if ((result & 1) == 0)
              {
                result = WebCore::RenderLayerModelObject::svgClipperResourceFromStyle(this);
                if (result)
                  return (unint64_t)WebCore::RenderSVGResourceClipper::applyMaskClipping((WebCore::RenderLayerModelObject *)result, a2, this, (const WebCore::FloatRect *)&v35);
              }
            }
          }
          else
          {
            v13 = *((_DWORD *)this + 38);
            v12 = *((_DWORD *)this + 39);
            v14 = *((_DWORD *)a3 + 1);
            v15 = __OFADD__(*(_DWORD *)a3, v13);
            v16 = *(_DWORD *)a3 + v13;
            if (v15)
              v17 = ((*(_DWORD *)a3 >> 31) + 0x7FFFFFFF);
            else
              v17 = v16;
            v15 = __OFADD__(v14, v12);
            v18 = v14 + v12;
            if (v15)
              v19 = (v14 >> 31) + 0x7FFFFFFF;
            else
              v19 = v18;
            v34 = v17 | (v19 << 32);
            if (v9 == 1024)
            {
              result = *((_QWORD *)a2 + 10);
              if (!v10 || v10 == this)
              {
                result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 40))(result);
                if ((result & 1) == 0)
                {
                  result = WebCore::RenderLayerModelObject::svgMaskerResourceFromStyle(this);
                  if (result)
                    return (unint64_t)WebCore::RenderSVGResourceMasker::applyMask((uint64_t *)result, a2, this, (const WebCore::LayoutPoint *)&v34);
                }
              }
            }
            else
            {
              result = WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect(this, v7, v8);
              v22 = result + v17;
              if (__OFADD__((_DWORD)result, (_DWORD)v17))
                v22 = (result >> 31) + 0x7FFFFFFF;
              v23 = HIDWORD(result) + v19;
              if (__OFADD__(HIDWORD(result), (_DWORD)v19))
                v23 = (HIDWORD(result) >> 31) + 0x7FFFFFFF;
              if (v20 >= 1 && v21 >= 1)
              {
                v24 = *((_DWORD *)a2 + 2);
                if (v24 >= 1)
                {
                  v25 = *((_DWORD *)a2 + 3);
                  if (v25 >= 1)
                  {
                    v26 = *(_DWORD *)a2;
                    v15 = __OFADD__(*(_DWORD *)a2, v24);
                    v27 = *(_DWORD *)a2 + v24;
                    if (v15)
                      v27 = (v26 >> 31) + 0x7FFFFFFF;
                    if ((int)v22 < v27)
                    {
                      v28 = v22 + v20;
                      if (__OFADD__(v22, v20))
                        v28 = (v22 >> 31) + 0x7FFFFFFF;
                      if (v26 < v28)
                      {
                        v29 = *((_DWORD *)a2 + 1);
                        v15 = __OFADD__(v29, v25);
                        v30 = v29 + v25;
                        if (v15)
                          v30 = (v29 >> 31) + 0x7FFFFFFF;
                        if (v23 < v30)
                        {
                          v31 = v23 + v21;
                          if (__OFADD__(v23, v21))
                            v31 = (v23 >> 31) + 0x7FFFFFFF;
                          if ((int)v29 < v31)
                          {
                            v32 = *((unsigned __int16 *)a2 + 8);
                            if (v32 == 64 || v32 == 16)
                            {
                              v33 = *((_QWORD *)this + 20);
                              *(_QWORD *)&v35 = v17 | (v19 << 32);
                              *((_QWORD *)&v35 + 1) = v33;
                              return WebCore::RenderElement::paintOutline(this, a2, (const WebCore::LayoutRect *)&v35);
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

float WebCore::RenderSVGContainer::objectBoundingBox(WebCore::RenderSVGContainer *this)
{
  return *((float *)this + 43);
}

uint64_t WebCore::RenderSVGModelObject::currentSVGLayoutLocation(WebCore::RenderSVGModelObject *this)
{
  return *((_QWORD *)this + 19);
}

uint64_t WebCore::RenderSVGContainer::nodeAtPoint(uint64_t a1, const WebCore::RenderLayerModelObject *a2, WebCore::HitTestResult *a3, _DWORD *a4, _DWORD *a5, uint64_t a6, double a7)
{
  int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v35;
  uint64_t v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  int i;
  uint64_t v43;
  void *v45;
  WTF *v46;
  unsigned int v47;
  unsigned int v48;
  float v49;
  float v50;
  unsigned int v51;
  float v52;
  unsigned int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  float v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  _BOOL4 v70;
  uint64_t v71;
  float v72;
  float v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  WebCore::ImageOverlay *v77;
  WebCore::Node *v78;
  void *v79;
  _BOOL4 v80;
  _QWORD *v81;
  int v82;
  int v83;
  int v84;
  int v85[2];
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  int v89;
  int v90;

  v13 = *(_DWORD *)(a1 + 152);
  v12 = *(_DWORD *)(a1 + 156);
  v14 = a5[1];
  v15 = __OFADD__(*a5, v13);
  v16 = *a5 + v13;
  if (v15)
    v17 = ((*a5 >> 31) + 0x7FFFFFFF);
  else
    v17 = v16;
  v15 = __OFADD__(v14, v12);
  v18 = v14 + v12;
  if (v15)
    v19 = (v14 >> 31) + 0x7FFFFFFF;
  else
    v19 = v18;
  v87 = v17 | (v19 << 32);
  v20 = WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect((WebCore::SVGBoundingBoxComputation *)a1, a2, a7);
  v22 = 0;
  v86 = v21;
  if (__OFADD__((_DWORD)v20, (_DWORD)v17))
    v23 = (v20 >> 31) + 0x7FFFFFFF;
  else
    v23 = v20 + v17;
  v24 = (HIDWORD(v20) >> 31) + 0x7FFFFFFF;
  if (!__OFADD__(HIDWORD(v20), (_DWORD)v19))
    v24 = HIDWORD(v20) + v19;
  v85[0] = v23;
  v85[1] = v24;
  if ((int)v21 >= 1 && SHIDWORD(v21) >= 1)
  {
    v22 = 0;
    v25 = a4[4];
    if (v25 >= 1)
    {
      v26 = a4[5];
      if (v26 >= 1)
      {
        v27 = a4[2];
        v28 = v27 + v25;
        if (__OFADD__(v27, v25))
          v28 = (v27 >> 31) + 0x7FFFFFFF;
        if ((int)v23 >= v28)
          return 0;
        v15 = __OFADD__(v23, (_DWORD)v21);
        v29 = v23 + v21;
        v30 = (v23 >> 31) + 0x7FFFFFFF;
        if (!v15)
          v30 = v29;
        if ((int)v27 >= v30)
          return 0;
        v31 = a4[3];
        v15 = __OFADD__(v31, v26);
        v32 = v31 + v26;
        if (v15)
          v32 = (v31 >> 31) + 0x7FFFFFFF;
        if (v24 >= v32)
          return 0;
        v33 = v24 + HIDWORD(v21);
        if (__OFADD__(v24, HIDWORD(v21)))
          v33 = (v24 >> 31) + 0x7FFFFFFF;
        if ((int)v31 >= v33)
          return 0;
        if (!*((_BYTE *)a4 + 65)
          && !WebCore::LayoutRect::contains((WebCore::LayoutRect *)v85, (const WebCore::LayoutRect *)(a4 + 2)))
        {
          LODWORD(v88) = WebCore::LayoutRect::operator WebCore::FloatRect(v85);
          HIDWORD(v88) = v82;
          v89 = v83;
          v90 = v84;
          if (!WebCore::FloatQuad::intersectsRect((WebCore::FloatQuad *)(a4 + 8), (const WebCore::FloatRect *)&v88))
            return 0;
        }
        if (_MergedGlobals_256 == 1)
        {
          v35 = dword_1ECE84950;
        }
        else
        {
          v35 = 0;
          qword_1ECE84948 = 0;
          *(_QWORD *)&dword_1ECE84950 = 0;
          _MergedGlobals_256 = 1;
        }
        dword_1ECE84950 = v35 + 1;
        v36 = *(_QWORD *)(a1 + 8);
        if (v36)
        {
          if (*(_QWORD *)(v36 + 8) && qword_1ECE84948)
          {
            v37 = *(_DWORD *)(qword_1ECE84948 - 8);
            v38 = (~(v36 << 32) + v36) ^ ((unint64_t)(~(v36 << 32) + v36) >> 22);
            v39 = 9 * ((v38 + ~(v38 << 13)) ^ ((v38 + ~(v38 << 13)) >> 8));
            v40 = (v39 ^ (v39 >> 15)) + ~((v39 ^ (v39 >> 15)) << 27);
            v41 = v37 & ((v40 >> 31) ^ v40);
            for (i = 1; ; ++i)
            {
              v43 = *(_QWORD *)(qword_1ECE84948 + 8 * v41);
              if (!v43)
                break;
              if (v43 != -1 && v43 == v36)
                return 0;
              v41 = (v41 + i) & v37;
            }
          }
        }
        else
        {
          v36 = WTF::fastCompactMalloc((WTF *)0x10);
          *(_DWORD *)v36 = 1;
          *(_QWORD *)(v36 + 8) = a1;
          v46 = *(WTF **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v36;
          if (v46)
          {
            if (*(_DWORD *)v46 == 1)
            {
              WTF::fastFree(v46, v45);
              v36 = *(_QWORD *)(a1 + 8);
              if (!v36)
                goto LABEL_49;
            }
            else
            {
              --*(_DWORD *)v46;
            }
          }
        }
        ++*(_DWORD *)v36;
LABEL_49:
        WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderElement>((uint64_t)&qword_1ECE84948, (_QWORD *)a1, (uint64_t)&v88);
        v48 = *a4;
        v47 = a4[1];
        v49 = floorf((*(float (**)(uint64_t))(*(_QWORD *)a1 + 248))(a1) * 64.0);
        if (v49 >= 2147500000.0)
        {
          v51 = 0x7FFFFFFF;
        }
        else if (v49 <= -2147500000.0)
        {
          v51 = 0x80000000;
        }
        else
        {
          v51 = (int)v49;
        }
        v52 = floorf(v50 * 64.0);
        if (v52 >= 2147500000.0)
        {
          v53 = 0x7FFFFFFF;
        }
        else if (v52 <= -2147500000.0)
        {
          v53 = 0x80000000;
        }
        else
        {
          v53 = (int)v52;
        }
        v15 = __OFSUB__(v51, (_DWORD)v87);
        v54 = v51 - v87;
        v55 = (v51 >> 31) + 0x7FFFFFFF;
        if (!v15)
          v55 = v54;
        v15 = __OFSUB__(v53, HIDWORD(v87));
        v56 = v53 - HIDWORD(v87);
        v57 = (v53 >> 31) + 0x7FFFFFFF;
        if (!v15)
          v57 = v56;
        v15 = __OFADD__(v48, v55);
        v58 = v48 + v55;
        if (v15)
          v58 = (v48 >> 31) + 0x7FFFFFFF;
        v15 = __OFADD__(v47, v57);
        v59 = v47 + v57;
        v60 = (v47 >> 31) + 0x7FFFFFFF;
        if (!v15)
          v60 = v59;
        v61 = (float)v58 * 0.015625;
        v62 = (float)v60 * 0.015625;
        *(float *)&v88 = v61;
        *((float *)&v88 + 1) = v62;
        if (WebCore::RenderLayerModelObject::pointInSVGClippingArea((WebCore::RenderLayerModelObject *)a1, (const WebCore::FloatPoint *)&v88))
        {
          v88 = __PAIR64__(LODWORD(v62), LODWORD(v61));
          if ((*(unsigned int (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 904))(a1, &v88))
          {
            v63 = *(unsigned int *)(a1 + 71);
            if (v63 | ((unint64_t)*(unsigned __int8 *)(a1 + 75) << 32))
            {
              v64 = *(_QWORD *)((v63 | ((unint64_t)*(unsigned __int8 *)(a1 + 75) << 32)) + 8);
              if (v64)
              {
                while (1)
                {
                  if ((*(_BYTE *)(v64 + 21) & 0x80) == 0
                    && (*(unsigned int (**)(uint64_t, const WebCore::RenderLayerModelObject *, WebCore::HitTestResult *, _DWORD *, uint64_t *, uint64_t))(*(_QWORD *)v64 + 336))(v64, a2, a3, a4, &v87, a6))
                  {
                    v65 = a4[1];
                    LODWORD(v66) = *a4 - v87;
                    if (__OFSUB__(*a4, (_DWORD)v87))
                      v66 = ((*a4 >> 31) + 0x7FFFFFFF);
                    else
                      v66 = v66;
                    LODWORD(v67) = v65 - HIDWORD(v87);
                    if (__OFSUB__(v65, HIDWORD(v87)))
                      v67 = (v65 >> 31) + 0x7FFFFFFF;
                    else
                      v67 = v67;
                    v88 = v66 | (v67 << 32);
                    (*(void (**)(uint64_t, WebCore::HitTestResult *, unint64_t *))(*(_QWORD *)a1 + 328))(a1, a3, &v88);
                    if ((*(_BYTE *)(v64 + 45) & 1) != 0 || (v68 = *(_QWORD *)(*(_QWORD *)(v64 + 24) + 8)) == 0)
                    {
                      if (!WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::LayoutRect>(a3, 0, (int *)a2, (uint64_t)a4, (WebCore::LayoutRect *)v85))goto LABEL_114;
                    }
                    else
                    {
                      *(_DWORD *)(v68 + 24) += 2;
                      v70 = WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::LayoutRect>(a3, (WebCore::ImageOverlay *)v68, (int *)a2, (uint64_t)a4, (WebCore::LayoutRect *)v85);
                      if (*(_DWORD *)(v68 + 24) == 2)
                      {
                        if ((*(_WORD *)(v68 + 30) & 0x400) == 0)
                          WebCore::Node::removedLastRef((WebCore::Node *)v68, v69);
                      }
                      else
                      {
                        *(_DWORD *)(v68 + 24) -= 2;
                      }
                      if (!v70)
                        goto LABEL_114;
                    }
                  }
                  v71 = *(unsigned int *)(v64 + 40);
                  if (v71 | ((unint64_t)*(unsigned __int8 *)(v64 + 44) << 32))
                  {
                    v64 = *(_QWORD *)((v71 | ((unint64_t)*(unsigned __int8 *)(v64 + 44) << 32)) + 8);
                    if (v64)
                      continue;
                  }
                  break;
                }
              }
            }
            if ((*((_BYTE *)a2 + 1) & 0x40) != 0)
            {
              v72 = *(float *)(a1 + 172);
              if (v72 <= v61 && (float)(v72 + *(float *)(a1 + 180)) >= v61)
              {
                v73 = *(float *)(a1 + 176);
                if (v73 <= v62 && (float)(v73 + *(float *)(a1 + 184)) >= v62)
                {
                  v74 = a4[1];
                  LODWORD(v75) = *a4 - v87;
                  if (__OFSUB__(*a4, (_DWORD)v87))
                    v75 = ((*a4 >> 31) + 0x7FFFFFFF);
                  else
                    v75 = v75;
                  LODWORD(v76) = v74 - HIDWORD(v87);
                  if (__OFSUB__(v74, HIDWORD(v87)))
                    v76 = (v74 >> 31) + 0x7FFFFFFF;
                  else
                    v76 = v76;
                  v88 = v75 | (v76 << 32);
                  (*(void (**)(uint64_t, WebCore::HitTestResult *, unint64_t *))(*(_QWORD *)a1 + 328))(a1, a3, &v88);
                  v77 = (WebCore::ImageOverlay *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 320))(a1);
                  if (v77)
                  {
                    v78 = v77;
                    *((_DWORD *)v77 + 6) += 2;
                    v80 = WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::LayoutRect>(a3, v77, (int *)a2, (uint64_t)a4, (WebCore::LayoutRect *)v85);
                    if (*((_DWORD *)v78 + 6) == 2)
                    {
                      if ((*((_WORD *)v78 + 15) & 0x400) == 0)
                        WebCore::Node::removedLastRef(v78, v79);
                    }
                    else
                    {
                      *((_DWORD *)v78 + 6) -= 2;
                    }
                    if (v80)
                      goto LABEL_103;
                  }
                  else if (WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::LayoutRect>(a3, 0, (int *)a2, (uint64_t)a4, (WebCore::LayoutRect *)v85))
                  {
                    goto LABEL_103;
                  }
LABEL_114:
                  v22 = 1;
                  if (!v36)
                    return v22;
LABEL_104:
                  v81 = *(_QWORD **)(v36 + 8);
                  if (v81)
                    WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderElement>((uint64_t)&qword_1ECE84948, v81);
                  if (*(_DWORD *)v36 == 1)
                    WTF::fastFree((WTF *)v36, v81);
                  else
                    --*(_DWORD *)v36;
                  return v22;
                }
              }
            }
          }
        }
LABEL_103:
        v22 = 0;
        if (!v36)
          return v22;
        goto LABEL_104;
      }
    }
  }
  return v22;
}

uint64_t WebCore::RenderSVGEllipse::operator new(uint64_t this)
{
  if (this == 248)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

int32x4_t WebCore::RenderSVGEllipse::RenderSVGEllipse(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int32x4_t result;

  v3 = WebCore::RenderLayerModelObject::RenderLayerModelObject(a1, 66, a2, a3, 0, 4100);
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *(_QWORD *)(v3 + 176) = 0;
  result = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v3 + 184) = result;
  *(_BYTE *)(v3 + 216) = 1;
  *(_BYTE *)(v3 + 217) &= 0xF8u;
  *(int32x4_t *)(v3 + 200) = result;
  *(_QWORD *)v3 = off_1E34430E0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 224) = 0;
  return result;
}

void WebCore::RenderSVGEllipse::~RenderSVGEllipse(WebCore::RenderSVGEllipse *this, void *a2)
{
  unsigned int *v3;
  uint64_t v4;
  char v5;

  *(_QWORD *)this = off_1E34484A0;
  v3 = (unsigned int *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
  {
    v4 = v3[16];
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_11[v4])(&v5, v3 + 2);
    v3[16] = -1;
    WTF::fastFree((WTF *)v3, a2);
  }
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  unsigned int *v3;
  uint64_t v4;
  void *v5;
  char v6;

  *(_QWORD *)this = off_1E34484A0;
  v3 = (unsigned int *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
  {
    v4 = v3[16];
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_11[v4])(&v6, v3 + 2);
    v3[16] = -1;
    WTF::fastFree((WTF *)v3, a2);
  }
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_QWORD *)this + 30) = 0;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v5);
  }
}

void WebCore::RenderSVGEllipse::updateShapeFromElement(WebCore::RenderSVGEllipse *this, void *a2)
{
  unsigned int *v3;
  uint64_t v4;
  int32x4_t v5;
  _OWORD *v6;
  uint64_t v7;
  void *v8;
  unsigned __int8 *v9;
  WebCore::Length *v10;
  int v11;
  float v12;
  float v13;
  unsigned __int8 *v14;
  WebCore::Length *v15;
  int v16;
  float v17;
  float v18;
  uint64_t v19;
  int v20;
  int v21;
  void *v22;
  unsigned __int8 *v23;
  WebCore::Length *v24;
  int v25;
  float v26;
  int v27;
  int v28;
  void *v29;
  unsigned int *v30;
  int v31;
  int v32;
  float v33;
  float v34;
  float v35;
  unsigned int *v36;
  int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  WTF *v42;
  unsigned int v43;
  unsigned int v44;
  float v45;
  float v46;
  char v47;
  uint64_t v48;
  float v49;
  int32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x2_t v53;
  WTF *v54;
  void *v55;
  unsigned int *v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  int v61;
  float v62;
  uint64_t v63;
  uint64_t v64;
  WTF *v65;
  float v66;
  char v67;
  float v68;
  char v69;
  float v70;
  unsigned int *v71;
  float v72;
  char v73;
  WebCore::Length *v74;
  _OWORD *v75;
  unsigned int *v76;
  float v77;
  char v78;
  WebCore::Length *v79;
  float v80;
  float v81;
  float v82;
  unint64_t v83;
  char v84;
  float v85;
  float v86;
  int v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  unsigned int v96;
  unsigned __int8 v97;
  char v98;
  unsigned __int8 v99;
  unsigned int v100;
  unsigned __int8 v101;
  char v102;
  char v103;
  WTF *v104[5];
  _DWORD v105[4];
  int v106;
  char v107;

  v3 = (unsigned int *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
  {
    v4 = v3[16];
    if ((_DWORD)v4 != -1)
      ((void (*)(WTF **, unsigned int *))off_1E3444330[v4])(v104, v3 + 2);
    v3[16] = -1;
    WTF::fastFree((WTF *)v3, a2);
  }
  v5 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)((char *)this + 184) = v5;
  v6 = (_OWORD *)((char *)this + 184);
  *((_BYTE *)this + 217) &= 0xF8u;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *(int32x4_t *)((char *)this + 200) = v5;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = 0;
  v7 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_BYTE *)(v7 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1965063CCLL);
  }
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v7 + 1184))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x1965063ECLL);
  }
  *(_DWORD *)(v7 + 24) += 2;
  WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v104, (const WebCore::SVGElement *)v7);
  v9 = *(unsigned __int8 **)(*((_QWORD *)this + 17) + 64);
  v10 = (WebCore::Length *)(v9 + 4);
  v11 = v9[8];
  if (v11 == 4)
  {
    if (v9[10])
      v12 = *(float *)v10;
    else
      v12 = (float)*(int *)v10;
  }
  else if (v11 == 11)
  {
    LODWORD(v66) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v104);
    if (!v67)
      v66 = 0.0;
    WebCore::Length::nonNanCalculatedValue(v10, v66);
  }
  else
  {
    v12 = 0.0;
    if (v11 == 3)
    {
      v13 = *((float *)v9 + 1);
      if (!v9[10])
        v13 = (float)SLODWORD(v13);
      WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v104, 0, (uint64_t)v105, v13 / 100.0);
      v89 = 0.0;
      if (v106 != -1)
      {
        if (!v106)
          v89 = *(float *)v105;
        ((void (*)(unsigned int *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v106])(&v100, v105);
      }
      v12 = v89;
    }
  }
  v14 = *(unsigned __int8 **)(*((_QWORD *)this + 17) + 64);
  v15 = (WebCore::Length *)(v14 + 12);
  v16 = v14[16];
  if (v16 == 4)
  {
    if (v14[18])
      v17 = *(float *)v15;
    else
      v17 = (float)*(int *)v15;
  }
  else if (v16 == 11)
  {
    v94 = v12;
    LODWORD(v68) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v104) >> 32;
    if (!v69)
      v68 = 0.0;
    WebCore::Length::nonNanCalculatedValue(v15, v68);
    v17 = v70;
    v12 = v94;
  }
  else
  {
    v17 = 0.0;
    if (v16 == 3)
    {
      v90 = v12;
      v18 = *((float *)v14 + 3);
      if (!v14[18])
        v18 = (float)SLODWORD(v18);
      WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v104, 1, (uint64_t)v105, v18 / 100.0);
      v86 = 0.0;
      if (v106 != -1)
      {
        if (!v106)
          v86 = *(float *)v105;
        ((void (*)(unsigned int *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v106])(&v100, v105);
      }
      v17 = v86;
      v12 = v90;
    }
  }
  *((float *)this + 58) = v12;
  *((float *)this + 59) = v17;
  if (*(_QWORD *)(*(_QWORD *)(v7 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::circleTag + 24))
  {
    v19 = *(_QWORD *)(*((_QWORD *)this + 17) + 64);
    v100 = 0;
    v103 = 0;
    v101 = *(_BYTE *)(v19 + 32);
    v20 = v101;
    v102 = *(_BYTE *)(v19 + 33);
    if (v101 - 2 >= 9)
    {
      if (v101 == 11)
      {
        v22 = (void *)*(unsigned int *)(v19 + 28);
        v100 = *(_DWORD *)(v19 + 28);
        WebCore::Length::ref((int *)&v100);
        v21 = 0;
        v19 = *(_QWORD *)(*((_QWORD *)this + 17) + 64);
      }
      else
      {
        v22 = 0;
        v21 = 0;
      }
    }
    else
    {
      v103 = *(_BYTE *)(v19 + 34);
      if (v103)
      {
        v100 = *(_DWORD *)(v19 + 28);
        v22 = (void *)v100;
        v21 = 1;
      }
      else
      {
        v21 = 0;
        v22 = (void *)*(unsigned int *)(v19 + 28);
        v100 = *(_DWORD *)(v19 + 28);
      }
    }
    v96 = 0;
    v99 = 0;
    v97 = *(_BYTE *)(v19 + 40);
    v27 = v97;
    v98 = *(_BYTE *)(v19 + 41);
    if (v97 - 2 >= 9)
    {
      if (v97 == 11)
      {
        v29 = (void *)*(unsigned int *)(v19 + 36);
        v96 = *(_DWORD *)(v19 + 36);
        WebCore::Length::ref((int *)&v96);
      }
      else
      {
        v29 = 0;
      }
      v28 = 0;
    }
    else
    {
      v99 = *(_BYTE *)(v19 + 42);
      v28 = v99;
      if (v99)
      {
        v96 = *(_DWORD *)(v19 + 36);
        v29 = (void *)v96;
        v28 = 1;
      }
      else
      {
        v29 = (void *)*(unsigned int *)(v19 + 36);
        v96 = *(_DWORD *)(v19 + 36);
      }
    }
    v30 = &v100;
    if (v20)
    {
      v31 = v20;
    }
    else
    {
      v30 = &v96;
      v31 = v27;
    }
    if (v31 == 4)
    {
      if (v20)
        v32 = v21;
      else
        v32 = v28;
      if (v32)
        v33 = *(float *)v30;
      else
        v33 = (float)(int)*v30;
      goto LABEL_71;
    }
    if (v31 == 11)
    {
      v71 = v30;
      v87 = v28;
      LODWORD(v72) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v104);
      if (!v73)
        v72 = 0.0;
      v74 = (WebCore::Length *)v71;
      v6 = (_OWORD *)((char *)this + 184);
      WebCore::Length::nonNanCalculatedValue(v74, v72);
    }
    else
    {
      v33 = 0.0;
      if (v31 != 3)
      {
LABEL_71:
        v36 = &v96;
        if (v27)
        {
          v37 = v27;
        }
        else
        {
          v36 = &v100;
          v37 = v20;
        }
        if (v37 == 4)
        {
          if (!v27)
            v28 = v21;
          if (v28)
            v38 = *(float *)v36;
          else
            v38 = (float)(int)*v36;
        }
        else if (v37 == 11)
        {
          v75 = v6;
          v76 = v36;
          v95 = v33;
          LODWORD(v77) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v104) >> 32;
          if (!v78)
            v77 = 0.0;
          v79 = (WebCore::Length *)v76;
          v6 = v75;
          WebCore::Length::nonNanCalculatedValue(v79, v77);
          v38 = v80;
          v33 = v95;
        }
        else
        {
          v38 = 0.0;
          if (v37 == 3)
          {
            v92 = v33;
            v39 = *(float *)v36;
            v40 = *(float *)v36;
            if (!v27)
              v28 = v21;
            if (!v28)
              v39 = (float)SLODWORD(v40);
            WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v104, 1, (uint64_t)v105, v39 / 100.0);
            v88 = 0.0;
            if (v106 != -1)
            {
              if (!v106)
                v88 = *(float *)v105;
              ((void (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v106])(&v107, v105);
            }
            v38 = v88;
            v33 = v92;
          }
        }
        *((float *)this + 60) = v33;
        *((float *)this + 61) = v38;
        if (v27 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v29);
        }
        if (v20 == 11)
        {
          {
            WebCore::calculationValues(void)::map = 1;
            qword_1ECE90C98 = 0;
          }
          WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v22);
        }
        goto LABEL_107;
      }
      v34 = *(float *)v30;
      v35 = *(float *)v30;
      v87 = v28;
      if (v20)
        v28 = v21;
      if (!v28)
        v34 = (float)SLODWORD(v35);
      WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v104, 0, (uint64_t)v105, v34 / 100.0);
      v91 = 0.0;
      if (v106 != -1)
      {
        if (!v106)
          v91 = *(float *)v105;
        ((void (*)(char *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v106])(&v107, v105);
      }
      v33 = v91;
    }
    v28 = v87;
    goto LABEL_71;
  }
  v23 = *(unsigned __int8 **)(*((_QWORD *)this + 17) + 64);
  v24 = (WebCore::Length *)(v23 + 20);
  v25 = v23[24];
  if (v25 == 4)
  {
    if (v23[26])
      v26 = *(float *)v24;
    else
      v26 = (float)*(int *)v24;
  }
  else if (v25 == 11)
  {
    v83 = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v104);
    v82 = *((float *)&v83 + 1);
    v81 = *(float *)&v83;
    if (!v84)
    {
      v82 = 0.0;
      v81 = 0.0;
    }
    v85 = hypotf(v81, v82);
    WebCore::Length::nonNanCalculatedValue(v24, v85 / 1.4142);
  }
  else
  {
    v26 = 0.0;
    if (v25 == 3)
    {
      v41 = *((float *)v23 + 5);
      if (!v23[26])
        v41 = (float)SLODWORD(v41);
      WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v104, 2, (uint64_t)v105, v41 / 100.0);
      v93 = 0.0;
      if (v106 != -1)
      {
        if (!v106)
          v93 = *(float *)v105;
        ((void (*)(unsigned int *, _DWORD *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v106])(&v100, v105);
      }
      v26 = v93;
    }
  }
  *((float *)this + 60) = v26;
  *((float *)this + 61) = v26;
LABEL_107:
  v42 = v104[0];
  v104[0] = 0;
  if (v42)
  {
    do
    {
      v43 = __ldaxr((unsigned int *)v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, (unsigned int *)v42));
    if (!v44)
    {
      atomic_store(1u, (unsigned int *)v42);
      v64 = *((unsigned int *)v42 + 7);
      if ((_DWORD)v64)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v42 + 2), (WTF::StringImpl *)(*((_QWORD *)v42 + 2) + 32 * v64));
      v65 = (WTF *)*((_QWORD *)v42 + 2);
      if (v65)
      {
        *((_QWORD *)v42 + 2) = 0;
        *((_DWORD *)v42 + 6) = 0;
        WTF::fastFree(v65, v8);
      }
      WTF::fastFree(v42, v8);
    }
  }
  if (*(_DWORD *)(v7 + 24) == 2)
  {
    if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v7, v8);
  }
  else
  {
    *(_DWORD *)(v7 + 24) -= 2;
  }
  v45 = *((float *)this + 60);
  if (v45 > 0.0)
  {
    v46 = *((float *)this + 61);
    if (v46 > 0.0)
    {
      if (v45 == v46)
        v47 = 6;
      else
        v47 = 5;
      *((_BYTE *)this + 217) = *((_BYTE *)this + 217) & 0xF8 | v47;
      v48 = *((_QWORD *)this + 17);
      if ((*(_WORD *)(v48 + 8) & 0x400) != 0)
      {
        v54 = (WTF *)*((_QWORD *)this + 28);
        if (v54)
          goto LABEL_126;
        WebCore::RenderSVGShape::createPath(this, (unsigned int **)v104);
        v54 = v104[0];
        v56 = (unsigned int *)*((_QWORD *)this + 28);
        *((WTF **)this + 28) = v104[0];
        if (v56)
        {
          v57 = v56[16];
          if ((_DWORD)v57 != -1)
            ((void (*)(_DWORD *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_11[v57])(v105, v56 + 2);
          v56[16] = -1;
          WTF::fastFree((WTF *)v56, v55);
          v54 = (WTF *)*((_QWORD *)this + 28);
        }
        if (v54)
        {
LABEL_126:
          v58 = *((_DWORD *)v54 + 16);
          v59 = 0;
          if (v58 == 2)
          {
            v63 = *((_QWORD *)v54 + 1);
            v60 = 0;
            v61 = 0;
            v62 = 0.0;
            if (v63)
              (*(void (**)(uint64_t, float, float, float, float))(*(_QWORD *)v63 + 240))(v63, 0.0, 0.0, 0.0, 0.0);
          }
          else
          {
            v60 = 0;
            v61 = 0;
            v62 = 0.0;
            if (v58 == 1)
              v62 = WebCore::PathStream::computeBoundingRect((uint64_t)v54 + 8, 1);
          }
        }
        else
        {
          v59 = 0;
          v60 = 0;
          v61 = 0;
          v62 = 0.0;
        }
        *((float *)this + 42) = v62;
        *((_DWORD *)this + 43) = v61;
        *((_DWORD *)this + 44) = v59;
        *((_DWORD *)this + 45) = v60;
      }
      else
      {
        v49 = *((float *)this + 59) - v46;
        *((float *)this + 42) = *((float *)this + 58) - v45;
        *((float *)this + 43) = v49;
        *((float *)this + 44) = v45 + v45;
        *((float *)this + 45) = v46 + v46;
        *v6 = *(_OWORD *)((char *)this + 168);
        if (*(_BYTE *)(*(_QWORD *)(v48 + 24) + 80) != 1)
        {
          *(float *)v50.i32 = WebCore::RenderSVGShape::strokeWidth(this) * 0.5;
          v51 = (float32x2_t)vdup_lane_s32(v50, 0);
          v52 = vsub_f32(*(float32x2_t *)((char *)this + 184), v51);
          v53 = vadd_f32(v51, vadd_f32(v51, *(float32x2_t *)((char *)this + 192)));
          *((float32x2_t *)this + 23) = v52;
          *((float32x2_t *)this + 24) = v53;
        }
      }
    }
  }
}

uint64_t WebCore::RenderSVGEllipse::fillShape(WebCore::RenderSVGEllipse *this, WebCore::GraphicsContext *a2)
{
  if (*((_QWORD *)this + 28))
    return (*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 176))(a2);
  else
    return (*(uint64_t (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a2 + 200))(a2, (char *)this + 168);
}

WebCore::RenderSVGShape *WebCore::RenderSVGEllipse::strokeShape(WebCore::RenderSVGShape *this, WebCore::GraphicsContext *a2)
{
  uint64_t v2;
  BOOL v3;

  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 17) + 24) + 80) != 1)
  {
    v2 = *((_QWORD *)this + 13);
    if (*(_BYTE *)(v2 + 248))
      v3 = *(_BYTE *)(v2 + 248) == 11;
    else
      v3 = 1;
    if (!v3)
    {
      if (*(_BYTE *)(v2 + 250))
      {
        if (*(float *)(v2 + 244) == 0.0)
          return this;
      }
      else if (!*(_DWORD *)(v2 + 244))
      {
        return this;
      }
    }
    if (*((_QWORD *)this + 28))
      return (WebCore::RenderSVGShape *)WebCore::RenderSVGShape::strokeShape(this, a2);
    else
      return (WebCore::RenderSVGShape *)(*(uint64_t (**)(WebCore::GraphicsContext *, _QWORD *))(*(_QWORD *)a2 + 208))(a2, (_QWORD *)this + 21);
  }
  return this;
}

BOOL WebCore::RenderSVGEllipse::shapeDependentStrokeContains(_BOOL8 result, float *a2, int a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  WTF *v10;
  void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  WTF *v15;
  uint64_t v16;
  void *v17;
  unsigned int *v18;
  uint64_t v19;
  unsigned int *v20;
  char v21;

  if (*(float *)(result + 240) <= 0.0)
    return 0;
  v3 = result;
  if (*(float *)(result + 244) <= 0.0)
    return 0;
  v6 = *(_QWORD *)(result + 136);
  if ((*(_WORD *)(v6 + 8) & 0x400) == 0 && (*(_BYTE *)(result + 217) & 7) == 6)
  {
    v7 = *(_QWORD *)(v6 + 24);
    v8 = *(unsigned int *)(v7 + 76);
    if (!(_DWORD)v8)
    {
      v9 = WebCore::RenderSVGShape::strokeWidth((WebCore::RenderSVGShape *)result) * 0.5;
      return vabds_f32(hypotf(*(float *)(v3 + 232) - *a2, *(float *)(v3 + 236) - a2[1]), *(float *)(v3 + 240)) <= v9;
    }
    if (v8 >> 29)
    {
      __break(0xC471u);
      return result;
    }
    v10 = (WTF *)WTF::fastMalloc((WTF *)(8 * v8));
    v12 = *(unsigned int *)(v7 + 76);
    if ((_DWORD)v12)
    {
      v13 = *(uint64_t **)(v7 + 64);
      v14 = 8 * v12;
      v15 = v10;
      do
      {
        v16 = *v13++;
        *(_QWORD *)v15 = v16;
        v15 = (WTF *)((char *)v15 + 8);
        v14 -= 8;
      }
      while (v14);
    }
    WTF::fastFree(v10, v11);
  }
  if (!*(_QWORD *)(v3 + 224))
  {
    WebCore::RenderSVGShape::createPath((WebCore::RenderSVGShape *)v3, &v20);
    v18 = *(unsigned int **)(v3 + 224);
    *(_QWORD *)(v3 + 224) = v20;
    if (v18)
    {
      v19 = v18[16];
      if ((_DWORD)v19 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_11[v19])(&v21, v18 + 2);
      v18[16] = -1;
      WTF::fastFree((WTF *)v18, v17);
    }
  }
  return WebCore::RenderSVGShape::shapeDependentStrokeContains((_QWORD *)v3, a2, a3);
}

BOOL WebCore::RenderSVGEllipse::shapeDependentFillContains(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;

  v2 = a1[60];
  if (v2 <= 0.0)
    return 0;
  v3 = a1[61];
  if (v3 <= 0.0)
    return 0;
  v4 = a1[59] - a2[1];
  return (float)((float)((float)(v4 / v3) * (float)(v4 / v3))
               + (float)((float)((float)(a1[58] - *a2) / v2) * (float)((float)(a1[58] - *a2) / v2))) <= 1.0;
}

BOOL WebCore::RenderSVGEllipse::isRenderingDisabled(WebCore::RenderSVGEllipse *this)
{
  return *((float *)this + 44) <= 0.0 || *((float *)this + 45) <= 0.0;
}

void WebCore::RenderSVGForeignObject::~RenderSVGForeignObject(WebCore::RenderSVGForeignObject *this, void *a2)
{
  uint64_t v2;
  void *v3;

  WebCore::RenderBlockFlow::~RenderBlockFlow(this, a2);
  if (*(_DWORD *)(v2 + 16))
  {
    *(_QWORD *)(v2 + 256) = 0;
    *(_OWORD *)(v2 + 224) = 0u;
    *(_OWORD *)(v2 + 240) = 0u;
    *(_OWORD *)(v2 + 192) = 0u;
    *(_OWORD *)(v2 + 208) = 0u;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
  }
}

uint64_t WebCore::RenderSVGForeignObject::paint(WebCore::RenderSVGForeignObject *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  uint64_t result;
  WebCore::RenderSVGForeignObject *v7;
  int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 10) + 40))(*((_QWORD *)a2 + 10));
  if ((result & 1) == 0)
  {
    v7 = (WebCore::RenderSVGForeignObject *)*((_QWORD *)a2 + 3);
    if ((!v7 || v7 == this) && (*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) == 0)
    {
      v9 = *((_DWORD *)this + 30) & 0x30;
      if (v9 != 16 && (*((_QWORD *)this + 12) & 0x1FLL) != 0x1A)
      {
        v10 = *((unsigned __int16 *)a2 + 8);
        if (v10 == 2048)
        {
          v20 = *(_OWORD *)((char *)this + 248);
          result = *((_QWORD *)a2 + 10);
          if ((!v7 || v7 == this) && !v9)
          {
            result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
            if ((result & 1) == 0)
            {
              result = WebCore::RenderLayerModelObject::svgClipperResourceFromStyle(this);
              if (result)
                return (uint64_t)WebCore::RenderSVGResourceClipper::applyMaskClipping((WebCore::RenderLayerModelObject *)result, a2, this, (const WebCore::FloatRect *)&v20);
            }
          }
        }
        else
        {
          v12 = *((_DWORD *)this + 38);
          v11 = *((_DWORD *)this + 39);
          v13 = *((_DWORD *)a3 + 1);
          v14 = __OFADD__(*(_DWORD *)a3, v12);
          v15 = *(_DWORD *)a3 + v12;
          if (v14)
            v16 = ((*(_DWORD *)a3 >> 31) + 0x7FFFFFFF);
          else
            v16 = v15;
          v14 = __OFADD__(v13, v11);
          v17 = v13 + v11;
          if (v14)
            v18 = (v13 >> 31) + 0x7FFFFFFF;
          else
            v18 = v17;
          *(_QWORD *)&v20 = v16 | (v18 << 32);
          v19 = *((_QWORD *)a2 + 10);
          if (v10 == 1024)
          {
            if (!v7 || v7 == this)
            {
              result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v19 + 40))(*((_QWORD *)a2 + 10));
              if ((result & 1) == 0)
              {
                result = WebCore::RenderLayerModelObject::svgMaskerResourceFromStyle(this);
                if (result)
                  return (uint64_t)WebCore::RenderSVGResourceMasker::applyMask((uint64_t *)result, a2, this, (const WebCore::LayoutPoint *)&v20);
              }
            }
          }
          else
          {
            (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v19 + 96))(*((_QWORD *)a2 + 10), 1);
            (*(void (**)(_QWORD, float, float))(**((_QWORD **)a2 + 10) + 648))(*((_QWORD *)a2 + 10), (float)(int)v16 * 0.015625, (float)(int)v18 * 0.015625);
            WebCore::RenderBlock::paint((uint64_t)this, a2, a3);
            return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 104))(v19, 1);
          }
        }
      }
    }
  }
  return result;
}

float WebCore::RenderSVGForeignObject::objectBoundingBox(WebCore::RenderSVGForeignObject *this)
{
  return *((float *)this + 62);
}

uint64_t WebCore::RenderSVGForeignObject::updateLogicalWidth(uint64_t this)
{
  float v1;
  float v2;
  int v3;
  int v4;
  float v5;
  unsigned int v6;
  BOOL v7;
  int v8;

  v1 = *(float *)(this + 248);
  v2 = floorf(v1 * 64.0);
  if (v2 > -2147500000.0)
    v3 = (int)v2;
  else
    v3 = 0x80000000;
  if (v2 < 2147500000.0)
    v4 = v3;
  else
    v4 = 0x7FFFFFFF;
  v5 = ceilf((float)(v1 + *(float *)(this + 256)) * 64.0);
  if (v5 >= 2147500000.0)
  {
    v6 = 0x7FFFFFFF;
  }
  else if (v5 <= -2147500000.0)
  {
    v6 = 0x80000000;
  }
  else
  {
    v6 = (int)v5;
  }
  v7 = __OFSUB__(v6, v4);
  v8 = v6 - v4;
  if (v7)
    v8 = (v6 >> 31) + 0x7FFFFFFF;
  *(_DWORD *)(this + 160) = v8;
  return this;
}

uint64_t WebCore::RenderSVGForeignObject::computeLogicalHeight@<X0>(uint64_t result@<X0>, int a2@<W2>, uint64_t a3@<X8>)
{
  float v3;
  float v4;
  int v5;
  int v6;
  float v7;
  unsigned int v8;
  BOOL v9;
  int v10;

  v3 = *(float *)(result + 252);
  v4 = floorf(v3 * 64.0);
  if (v4 > -2147500000.0)
    v5 = (int)v4;
  else
    v5 = 0x80000000;
  if (v4 < 2147500000.0)
    v6 = v5;
  else
    v6 = 0x7FFFFFFF;
  v7 = ceilf((float)(v3 + *(float *)(result + 260)) * 64.0);
  if (v7 >= 2147500000.0)
  {
    v8 = 0x7FFFFFFF;
  }
  else if (v7 <= -2147500000.0)
  {
    v8 = 0x80000000;
  }
  else
  {
    v8 = (int)v7;
  }
  v9 = __OFSUB__(v8, v6);
  v10 = v8 - v6;
  if (v9)
    v10 = (v8 >> 31) + 0x7FFFFFFF;
  *(_DWORD *)a3 = v10;
  *(_DWORD *)(a3 + 4) = a2;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

unsigned int *WebCore::RenderSVGForeignObject::layout(WebCore::RenderSVGForeignObject *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  void *v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  unint64_t v25;
  unsigned int *result;
  void *v27;
  WTF *v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  WTF *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  WTF *v53[5];
  _BYTE v54[56];

  WebCore::LayoutRepainter::LayoutRepainter((uint64_t)v54, this, 0, 0, 1);
  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v2 + 28) & 0x20) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v2 + 1184))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196506BB4);
  }
  if (*(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::foreignObjectTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196506E84);
  }
  *(_DWORD *)(v2 + 24) += 2;
  WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v53, (const WebCore::SVGElement *)v2);
  v3 = *(_QWORD *)(v2 + 216);
  v4 = *(_QWORD *)(v3 + 24);
  if (!v4 || !*(_DWORD *)(v4 - 12))
    goto LABEL_6;
  v31 = *(unsigned int *)(v4 - 4);
  if ((_DWORD)v31)
  {
    v32 = 8 * v31;
    v33 = *(uint64_t **)(v3 + 24);
    while ((unint64_t)(*v33 + 1) <= 1)
    {
      ++v33;
      v32 -= 8;
      if (!v32)
        goto LABEL_6;
    }
  }
  else
  {
    v33 = *(uint64_t **)(v3 + 24);
  }
  v45 = (uint64_t *)(v4 + 8 * v31);
  if (v33 == v45)
    goto LABEL_6;
  v46 = *v33;
LABEL_62:
  if (!*(_QWORD *)(v46 + 8))
  {
    while (++v33 != v45)
    {
      v46 = *v33;
      if ((unint64_t)(*v33 + 1) > 1)
      {
        if (v33 != v45)
          goto LABEL_62;
        break;
      }
    }
LABEL_6:
    v5 = v3 + 40;
    goto LABEL_7;
  }
  v5 = v3 + 48;
LABEL_7:
  v6 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v5 + 28), (const WebCore::SVGLengthContext *)v53);
  v7 = *(_QWORD *)(v2 + 224);
  v8 = *(_QWORD *)(v7 + 24);
  if (!v8 || !*(_DWORD *)(v8 - 12))
    goto LABEL_8;
  v34 = *(unsigned int *)(v8 - 4);
  if ((_DWORD)v34)
  {
    v35 = 8 * v34;
    v36 = *(uint64_t **)(v7 + 24);
    while ((unint64_t)(*v36 + 1) <= 1)
    {
      ++v36;
      v35 -= 8;
      if (!v35)
        goto LABEL_8;
    }
  }
  else
  {
    v36 = *(uint64_t **)(v7 + 24);
  }
  v47 = (uint64_t *)(v8 + 8 * v34);
  if (v36 == v47)
    goto LABEL_8;
  v48 = *v36;
LABEL_71:
  if (!*(_QWORD *)(v48 + 8))
  {
    while (++v36 != v47)
    {
      v48 = *v36;
      if ((unint64_t)(*v36 + 1) > 1)
      {
        if (v36 != v47)
          goto LABEL_71;
        break;
      }
    }
LABEL_8:
    v9 = v7 + 40;
    goto LABEL_9;
  }
  v9 = v7 + 48;
LABEL_9:
  v10 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v9 + 28), (const WebCore::SVGLengthContext *)v53);
  v11 = *(_QWORD *)(v2 + 232);
  v12 = *(_QWORD *)(v11 + 24);
  if (!v12 || !*(_DWORD *)(v12 - 12))
    goto LABEL_10;
  v37 = *(unsigned int *)(v12 - 4);
  if ((_DWORD)v37)
  {
    v38 = 8 * v37;
    v39 = *(uint64_t **)(v11 + 24);
    while ((unint64_t)(*v39 + 1) <= 1)
    {
      ++v39;
      v38 -= 8;
      if (!v38)
        goto LABEL_10;
    }
  }
  else
  {
    v39 = *(uint64_t **)(v11 + 24);
  }
  v49 = (uint64_t *)(v12 + 8 * v37);
  if (v39 == v49)
    goto LABEL_10;
  v50 = *v39;
LABEL_80:
  if (!*(_QWORD *)(v50 + 8))
  {
    while (++v39 != v49)
    {
      v50 = *v39;
      if ((unint64_t)(*v39 + 1) > 1)
      {
        if (v39 != v49)
          goto LABEL_80;
        break;
      }
    }
LABEL_10:
    v13 = v11 + 40;
    goto LABEL_11;
  }
  v13 = v11 + 48;
LABEL_11:
  v14 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v13 + 28), (const WebCore::SVGLengthContext *)v53);
  v15 = *(_QWORD *)(v2 + 240);
  v16 = *(_QWORD *)(v15 + 24);
  if (!v16 || !*(_DWORD *)(v16 - 12))
    goto LABEL_12;
  v40 = *(unsigned int *)(v16 - 4);
  if ((_DWORD)v40)
  {
    v41 = 8 * v40;
    v42 = *(uint64_t **)(v15 + 24);
    while ((unint64_t)(*v42 + 1) <= 1)
    {
      ++v42;
      v41 -= 8;
      if (!v41)
        goto LABEL_12;
    }
  }
  else
  {
    v42 = *(uint64_t **)(v15 + 24);
  }
  v51 = (uint64_t *)(v16 + 8 * v40);
  if (v42 == v51)
    goto LABEL_12;
  v52 = *v42;
LABEL_89:
  if (!*(_QWORD *)(v52 + 8))
  {
    while (++v42 != v51)
    {
      v52 = *v42;
      if ((unint64_t)(*v42 + 1) > 1)
      {
        if (v42 != v51)
          goto LABEL_89;
        break;
      }
    }
LABEL_12:
    v17 = v15 + 40;
    goto LABEL_13;
  }
  v17 = v15 + 48;
LABEL_13:
  v18 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v17 + 28), (const WebCore::SVGLengthContext *)v53);
  *((float *)this + 62) = v6;
  *((float *)this + 63) = v10;
  *((float *)this + 64) = v14;
  *((float *)this + 65) = v18;
  WebCore::RenderBlock::layout(this);
  v20 = floorf(*((float *)this + 62) * 64.0);
  v21 = 0x7FFFFFFFLL;
  v22 = 0x80000000;
  if (v20 > -2147500000.0)
    v22 = (int)v20;
  if (v20 < 2147500000.0)
    v21 = v22;
  v23 = floorf(*((float *)this + 63) * 64.0);
  v24 = 0x7FFFFFFF00000000;
  v25 = 0x8000000000000000;
  if (v23 > -2147500000.0)
    v25 = (unint64_t)(int)v23 << 32;
  if (v23 < 2147500000.0)
    v24 = v25;
  *((_QWORD *)this + 19) = v24 | v21;
  WebCore::RenderLayerModelObject::updateLayerTransform(this, v19);
  result = (unsigned int *)WebCore::LayoutRepainter::repaintAfterLayout((WebCore::LayoutRepainter *)v54);
  v28 = v53[0];
  v53[0] = 0;
  if (v28)
  {
    do
    {
      v29 = __ldaxr((unsigned int *)v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, (unsigned int *)v28));
    if (!v30)
    {
      atomic_store(1u, (unsigned int *)v28);
      v43 = *((unsigned int *)v28 + 7);
      if ((_DWORD)v43)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v28 + 2), (WTF::StringImpl *)(*((_QWORD *)v28 + 2) + 32 * v43));
      v44 = (WTF *)*((_QWORD *)v28 + 2);
      if (v44)
      {
        *((_QWORD *)v28 + 2) = 0;
        *((_DWORD *)v28 + 6) = 0;
        WTF::fastFree(v44, v27);
      }
      result = (unsigned int *)WTF::fastFree(v28, v27);
    }
  }
  if (*(_DWORD *)(v2 + 24) == 2)
  {
    if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v2, v27);
  }
  else
  {
    *(_DWORD *)(v2 + 24) -= 2;
  }
  return result;
}

uint64_t WebCore::RenderSVGForeignObject::overflowClipRect(uint64_t a1, int *a2)
{
  double v2;
  float v3;
  double v4;
  float v5;
  float v6;
  unsigned int v7;
  uint64_t v8;
  float v9;
  unsigned int v10;
  uint64_t v11;

  v2 = (float)((float)*a2 * 0.015625) * 64.0;
  if (v2 >= 2147483650.0)
  {
    v3 = 33554000.0;
  }
  else if (v2 <= -2147483650.0)
  {
    v3 = -33554000.0;
  }
  else
  {
    v3 = (float)(int)v2 * 0.015625;
  }
  v4 = (float)((float)a2[1] * 0.015625) * 64.0;
  if (v4 >= 2147483650.0)
  {
    v5 = 33554000.0;
  }
  else if (v4 <= -2147483650.0)
  {
    v5 = -33554000.0;
  }
  else
  {
    v5 = (float)(int)v4 * 0.015625;
  }
  v6 = floorf(v3 * 64.0);
  if (v6 > -2147500000.0)
    v7 = (int)v6;
  else
    v7 = 0x80000000;
  if (v6 < 2147500000.0)
    v8 = v7;
  else
    v8 = 0x7FFFFFFFLL;
  v9 = floorf(v5 * 64.0);
  if (v9 > -2147500000.0)
    v10 = (int)v9;
  else
    v10 = 0x80000000;
  if (v9 < 2147500000.0)
    v11 = v10;
  else
    v11 = 0x7FFFFFFFLL;
  return v8 | (v11 << 32);
}

uint64_t WebCore::RenderSVGForeignObject::updateFromStyle(WebCore::RenderSVGForeignObject *this)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  float v10;

  result = (uint64_t)WebCore::RenderBox::updateFromStyle(this);
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) == 0)
  {
    *((_DWORD *)this + 5) &= ~0x10000u;
    goto LABEL_3;
  }
  result = (*(uint64_t (**)(WebCore::RenderSVGForeignObject *))(*(_QWORD *)this + 832))(this);
  if ((result & 1) != 0
    || (v3 = *((_QWORD *)this + 11), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 40) + 20))
    || (v9 = *(_QWORD *)(v3 + 40), *(_QWORD *)(v9 + 328))
    || *(_QWORD *)(v9 + 320)
    || *(_QWORD *)(v9 + 312)
    || *(_QWORD *)(v9 + 304)
    || (*(_DWORD *)(v9 + 636) & 0x180) == 0x80)
  {
    v4 = (unsigned int *)((char *)this + 20);
    v5 = *((_DWORD *)this + 5);
  }
  else
  {
    v10 = *(float *)(v9 + 260);
    v4 = (unsigned int *)((char *)this + 20);
    v5 = *((_DWORD *)this + 5);
    if (v10 == -1.0)
    {
      v6 = 0;
      goto LABEL_10;
    }
  }
  v6 = 0x20000;
LABEL_10:
  v7 = v5 & 0xFFEDFFFF;
  if ((_DWORD)result)
    v8 = 0x100000;
  else
    v8 = 0;
  *v4 = v7 | v6 | v8;
LABEL_3:
  if (((*((_DWORD *)this + 24) >> 10) & 7u) - 1 <= 2)
    *((_DWORD *)this + 5) |= 0x10000u;
  return result;
}

void WebCore::RenderSVGForeignObject::applyTransform(WebCore::MotionPath *a1, float64x2_t *a2, WebCore::RenderStyle *a3, const WebCore::FloatRect *a4, char a5)
{
  uint64_t v5;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  void *v15;
  _BYTE v16[56];
  _BYTE v17[56];

  v5 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 8);
  if ((*(_WORD *)(v5 + 28) & 0x20) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v5 + 1184))(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8)) & 1) == 0
    || *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::foreignObjectTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1965073C8);
  }
  *(_DWORD *)(v5 + 24) += 2;
  v17[0] = 0;
  v17[48] = 0;
  v16[0] = 0;
  v16[48] = 0;
  WebCore::RenderLayerModelObject::applySVGTransform(a1, a2, (_QWORD *)v5, a3, a4, (uint64_t)v17, (uint64_t)v16, a5, v11, v12, v13, v14);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v15);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
}

void WebCore::RenderSVGGradientStop::~RenderSVGGradientStop(WebCore::RenderSVGGradientStop *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::RenderElement::~RenderElement(this, a2);
  if (*((_DWORD *)v2 + 4))
  {
    *((_OWORD *)v2 + 7) = 0u;
    *((_OWORD *)v2 + 8) = 0u;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(v2, v3);
  }
}

void WebCore::RenderSVGGradientStop::styleDidChange(WebCore::RenderElement *a1, unsigned int a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  WTF **v18;
  WTF *v19;
  _QWORD v20[2];

  WebCore::RenderElement::styleDidChange(a1, a2, a3);
  if (a2)
  {
    v6 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 8);
    if ((*(_WORD *)(v6 + 28) & 0x20) == 0
      || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::stopTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x196507690);
    }
    v7 = *(_QWORD *)(v6 + 32);
    if (v7)
    {
      v8 = *(_WORD *)(v7 + 28);
      if ((v8 & 8) != 0)
      {
        v9 = *(_DWORD *)(v7 + 24);
        *(_DWORD *)(v7 + 24) = v9 + 2;
        if ((v8 & 0x20) != 0
          && ((v10 = *(_QWORD *)(*(_QWORD *)(v7 + 96) + 24),
               v10 == *(_QWORD *)(WebCore::SVGNames::radialGradientTag + 24))
           || v10 == *(_QWORD *)(WebCore::SVGNames::linearGradientTag + 24)))
        {
          v11 = v7;
        }
        else
        {
          v11 = 0;
        }
        if (v9)
        {
          *(_DWORD *)(v7 + 24) = v9;
        }
        else if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        {
          WebCore::Node::removedLastRef((WebCore::Node *)v7, v5);
        }
        if (v11)
        {
          v12 = *(_DWORD *)(v11 + 24);
          *(_DWORD *)(v11 + 24) = v12 + 2;
          v13 = *(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL;
          if (!v13)
            goto LABEL_22;
          if ((*(_BYTE *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
          {
            __break(0xC471u);
            JUMPOUT(0x196507770);
          }
          ++*(_DWORD *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
          v14 = *(unsigned __int8 *)(v13 + 46);
          if (v14 == 82 || v14 == 78)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 960))(v13);
          }
          else
          {
            if ((*(_BYTE *)(v13 + 52) & 7) != 4 || (~*(unsigned __int8 *)(v13 + 53) & 9) != 0)
            {
              __break(0xC471u);
              goto LABEL_45;
            }
            v20[0] = 0;
            v20[1] = 0;
            (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)(v13 + 216) + 16))(v13 + 216, 1, v20);
            v16 = v20[0];
            if (v20[0])
            {
              v17 = *(unsigned int *)(v20[0] - 4);
              if ((_DWORD)v17)
              {
                v18 = (WTF **)v20[0];
                do
                {
                  v19 = *v18;
                  if (*v18 != (WTF *)-1)
                  {
                    *v18 = 0;
                    if (v19)
                    {
                      if (*(_DWORD *)v19 == 1)
                        WTF::fastFree(v19, v5);
                      else
                        --*(_DWORD *)v19;
                    }
                  }
                  ++v18;
                  --v17;
                }
                while (v17);
              }
              WTF::fastFree((WTF *)(v16 - 16), v5);
            }
          }
          v15 = *(_DWORD *)(v13 + 16);
          if (v15)
          {
            *(_DWORD *)(v13 + 16) = v15 - 1;
            v12 = *(_DWORD *)(v11 + 24) - 2;
LABEL_22:
            if (v12)
            {
              *(_DWORD *)(v11 + 24) = v12;
            }
            else if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
            {
              WebCore::Node::removedLastRef((WebCore::Node *)v11, v5);
            }
            return;
          }
          __break(0xC471u);
LABEL_45:
          JUMPOUT(0x196507670);
        }
      }
    }
  }
}

uint64_t WebCore::RenderSVGGradientStop::layout(uint64_t this)
{
  unsigned int v1;

  v1 = *(_DWORD *)(this + 20) & 0xFFDFFDFF | 0x200;
  *(_DWORD *)(this + 20) = v1;
  if (this && (*(_BYTE *)(this + 45) & 2) == 0)
  {
    *(_WORD *)(this + 69) &= ~1u;
    *(_WORD *)(this + 76) = *(_WORD *)(this + 76) & 0xF | (16
                                                         * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(this + 24) + 8) + 40) + 8)
                                                                                            + 1944)
                                                                                + 248)
                                                                    + 472));
  }
  *(_DWORD *)(this + 20) = v1 & 0xFFDFFE07;
  return this;
}

uint64_t WebCore::RenderSVGHiddenContainer::operator new(uint64_t this)
{
  if (this == 224)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

int32x4_t WebCore::RenderSVGHiddenContainer::RenderSVGHiddenContainer(uint64_t a1, char a2, uint64_t a3, _QWORD *a4, __int16 a5)
{
  uint64_t v5;
  int32x4_t result;

  v5 = WebCore::RenderLayerModelObject::RenderLayerModelObject(a1, a2, a3, a4, 0, (a5 << 8) & 0x3900 | 0x604u);
  *(_OWORD *)(v5 + 188) = 0u;
  *(_OWORD *)(v5 + 172) = 0u;
  *(_QWORD *)(v5 + 152) = 0;
  *(_QWORD *)(v5 + 160) = 0;
  result = vdupq_n_s32(0x7FC00000u);
  *(_DWORD *)(v5 + 167) = 0;
  *(int32x4_t *)(v5 + 204) = result;
  *(_QWORD *)v5 = off_1E3443F90;
  return result;
}

void WebCore::RenderSVGHiddenContainer::~RenderSVGHiddenContainer(WebCore::RenderSVGHiddenContainer *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)v2 + 4))
  {
    *((_OWORD *)v2 + 12) = 0u;
    *((_OWORD *)v2 + 13) = 0u;
    *((_OWORD *)v2 + 10) = 0u;
    *((_OWORD *)v2 + 11) = 0u;
    *((_OWORD *)v2 + 8) = 0u;
    *((_OWORD *)v2 + 9) = 0u;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + 7) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *(_OWORD *)v2 = 0u;
    *((_OWORD *)v2 + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(v2, v3);
  }
}

uint64_t WebCore::RenderSVGHiddenContainer::layout(WebCore::RenderSVGHiddenContainer *this)
{
  uint64_t result;
  unsigned int v3;

  result = (*(uint64_t (**)(WebCore::RenderSVGHiddenContainer *))(*(_QWORD *)this + 896))(this);
  v3 = *((_DWORD *)this + 5) & 0xFFDFFDFF | 0x200;
  *((_DWORD *)this + 5) = v3;
  if ((*((_BYTE *)this + 45) & 2) == 0)
  {
    *(_WORD *)((char *)this + 69) &= ~1u;
    *((_WORD *)this + 38) = *((_WORD *)this + 38) & 0xF | (16
                                                         * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                                                                            + 1944)
                                                                                + 248)
                                                                    + 472));
  }
  *((_DWORD *)this + 5) = v3 & 0xFFDFFE07;
  return result;
}

uint64_t WebCore::RenderSVGBlock::currentSVGLayoutLocation(WebCore::RenderSVGBlock *this)
{
  return *((_QWORD *)this + 19);
}

uint64_t WebCore::RenderSVGBlock::setCurrentSVGLayoutLocation(uint64_t this, const WebCore::LayoutPoint *a2)
{
  *(_QWORD *)(this + 152) = *(_QWORD *)a2;
  return this;
}

uint64_t WebCore::RenderSVGContainer::canHaveChildren(WebCore::RenderSVGContainer *this)
{
  return 1;
}

float WebCore::RenderSVGContainer::objectBoundingBoxWithoutTransformations(WebCore::RenderSVGContainer *this)
{
  return *((float *)this + 47);
}

float WebCore::RenderSVGContainer::repaintRectInLocalCoordinates(uint64_t a1, double a2)
{
  WTF *v3;
  void *v4;
  float v5;
  WTF *v6;
  void *v8;
  WTF *v9;
  WTF *v10;

  v3 = *(WTF **)(a1 + 8);
  if (!v3)
  {
    v3 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v3 = 1;
    *((_QWORD *)v3 + 1) = a1;
    v9 = *(WTF **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
      {
        WTF::fastFree(v9, v8);
        v3 = *(WTF **)(a1 + 8);
      }
      else
      {
        --*(_DWORD *)v9;
      }
    }
  }
  ++*(_DWORD *)v3;
  v10 = v3;
  v5 = WebCore::SVGBoundingBoxComputation::computeDecoratedBoundingBox((uint64_t)&v10, WebCore::SVGBoundingBoxComputation::repaintBoundingBoxDecoration, 0, a2);
  v6 = v10;
  v10 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, v4);
    else
      --*(_DWORD *)v6;
  }
  return v5;
}

uint64_t WebCore::RenderSVGModelObject::requiresLayer(WebCore::RenderSVGModelObject *this)
{
  return 1;
}

uint64_t WebCore::RenderSVGModelObject::setCurrentSVGLayoutLocation(uint64_t this, const WebCore::LayoutPoint *a2)
{
  *(_QWORD *)(this + 152) = *(_QWORD *)a2;
  return this;
}

uint64_t WebCore::RenderSVGContainer::pointIsInsideViewportClip(WebCore::RenderSVGContainer *this, const WebCore::FloatPoint *a2)
{
  return 1;
}

uint64_t WebCore::RenderSVGContainer::updateLayoutSizeIfNeeded(WebCore::RenderSVGContainer *this)
{
  return 0;
}

void WebCore::RenderSVGContainer::overridenObjectBoundingBoxWithoutTransformations(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

const char *WebCore::RenderSVGEllipse::renderName(WebCore::RenderSVGEllipse *this)
{
  return "RenderSVGEllipse";
}

uint64_t WebCore::RenderSVGShape::canHaveChildren(WebCore::RenderSVGShape *this)
{
  return 0;
}

float WebCore::RenderSVGShape::objectBoundingBox(WebCore::RenderSVGShape *this)
{
  return *((float *)this + 42);
}

float WebCore::RenderSVGShape::repaintRectInLocalCoordinates(uint64_t a1, double a2)
{
  WTF *v3;
  void *v4;
  float v5;
  WTF *v6;
  void *v8;
  WTF *v9;
  WTF *v10;

  v3 = *(WTF **)(a1 + 8);
  if (!v3)
  {
    v3 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v3 = 1;
    *((_QWORD *)v3 + 1) = a1;
    v9 = *(WTF **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
      {
        WTF::fastFree(v9, v8);
        v3 = *(WTF **)(a1 + 8);
      }
      else
      {
        --*(_DWORD *)v9;
      }
    }
  }
  ++*(_DWORD *)v3;
  v10 = v3;
  v5 = WebCore::SVGBoundingBoxComputation::computeDecoratedBoundingBox((uint64_t)&v10, WebCore::SVGBoundingBoxComputation::repaintBoundingBoxDecoration, 0, a2);
  v6 = v10;
  v10 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, v4);
    else
      --*(_DWORD *)v6;
  }
  return v5;
}

uint64_t WebCore::RenderSVGEllipse::isEmpty(WebCore::RenderSVGEllipse *this)
{
  uint64_t v1;
  int v2;
  uint64_t result;

  v1 = *((_QWORD *)this + 28);
  if (!v1)
  {
    if (*((float *)this + 44) > 0.0)
      return *((float *)this + 45) <= 0.0;
    return 1;
  }
  v2 = *(_DWORD *)(v1 + 64);
  if (v2 != 2)
    return !v2;
  result = *(_QWORD *)(v1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
  return result;
}

const char *WebCore::RenderSVGForeignObject::renderName(WebCore::RenderSVGForeignObject *this)
{
  return "RenderSVGForeignObject";
}

float WebCore::RenderSVGForeignObject::strokeBoundingBox(WebCore::RenderSVGForeignObject *this)
{
  return *((float *)this + 62);
}

float WebCore::RenderSVGForeignObject::repaintRectInLocalCoordinates(uint64_t a1, double a2)
{
  WTF *v3;
  void *v4;
  float v5;
  WTF *v6;
  void *v8;
  WTF *v9;
  WTF *v10;

  v3 = *(WTF **)(a1 + 8);
  if (!v3)
  {
    v3 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v3 = 1;
    *((_QWORD *)v3 + 1) = a1;
    v9 = *(WTF **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
      {
        WTF::fastFree(v9, v8);
        v3 = *(WTF **)(a1 + 8);
      }
      else
      {
        --*(_DWORD *)v9;
      }
    }
  }
  ++*(_DWORD *)v3;
  v10 = v3;
  v5 = WebCore::SVGBoundingBoxComputation::computeDecoratedBoundingBox((uint64_t)&v10, WebCore::SVGBoundingBoxComputation::repaintBoundingBoxDecoration, 0, a2);
  v6 = v10;
  v10 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, v4);
    else
      --*(_DWORD *)v6;
  }
  return v5;
}

uint64_t WebCore::RenderSVGForeignObject::needsHasSVGTransformFlags(WebCore::RenderSVGForeignObject *this)
{
  return 1;
}

const char *WebCore::RenderSVGGradientStop::renderName(WebCore::RenderSVGGradientStop *this)
{
  return "RenderSVGGradientStop";
}

uint64_t WebCore::RenderSVGGradientStop::canHaveChildren(WebCore::RenderSVGGradientStop *this)
{
  return 0;
}

float WebCore::RenderSVGGradientStop::objectBoundingBox(WebCore::RenderSVGGradientStop *this)
{
  return 0.0;
}

float WebCore::RenderSVGGradientStop::strokeBoundingBox(WebCore::RenderSVGGradientStop *this)
{
  return 0.0;
}

float WebCore::RenderSVGGradientStop::repaintRectInLocalCoordinates()
{
  return 0.0;
}

uint64_t WebCore::RenderSVGGradientStop::nodeAtFloatPoint()
{
  return 0;
}

void WebCore::RenderSVGGradientStop::localRectsForRepaint(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 32) = 0;
}

const char *WebCore::RenderSVGHiddenContainer::renderName(WebCore::RenderSVGHiddenContainer *this)
{
  return "RenderSVGHiddenContainer";
}

uint64_t WebCore::RenderSVGHiddenContainer::nodeAtPoint()
{
  return 0;
}

uint64_t WebCore::RenderSVGHiddenContainer::clippedOverflowRect()
{
  return 0;
}

__n128 WebCore::RenderSVGHiddenContainer::computeVisibleRectsInContainer@<Q0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  *(_BYTE *)(a2 + 36) = 1;
  return result;
}

uint64_t WebCore::RenderSVGHiddenContainer::needsHasSVGTransformFlags(WebCore::RenderSVGHiddenContainer *this)
{
  return 0;
}

WebCore::SVGLayerTransformUpdater *WebCore::SVGLayerTransformUpdater::SVGLayerTransformUpdater(WebCore::SVGLayerTransformUpdater *this, WebCore::RenderLayerModelObject *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  void *v14;
  WTF *v15;

  v3 = *((_QWORD *)a2 + 1);
  if (!v3)
  {
    v3 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v3 = 1;
    *(_QWORD *)(v3 + 8) = a2;
    v15 = (WTF *)*((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v3;
    if (v15)
    {
      if (*(_DWORD *)v15 == 1)
      {
        WTF::fastFree(v15, v14);
        v3 = *((_QWORD *)a2 + 1);
      }
      else
      {
        --*(_DWORD *)v15;
      }
    }
  }
  ++*(_DWORD *)v3;
  *(_QWORD *)this = v3;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  v4 = *(_QWORD *)(v3 + 8);
  if ((*(_BYTE *)(v4 + 21) & 0x80) != 0)
  {
    v5 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 88) + 32) + 40) + 44);
    if (v5 >= 5)
      v6 = 2;
    else
      v6 = 0x705020406uLL >> (8 * v5);
    *((float *)this + 2) = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 752))(v4, v6 & 7);
    *((_DWORD *)this + 3) = v7;
    *((_DWORD *)this + 4) = v8;
    *((_DWORD *)this + 5) = v9;
    v10 = *(_QWORD *)(*(_QWORD *)this + 8);
    if ((*(_BYTE *)(v10 + 21) & 0x80) != 0)
      v11 = *(_QWORD *)(*(_QWORD *)(v10 + 144) + 200);
    else
      v11 = 0;
    *((_QWORD *)this + 3) = v11;
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 856))(v10);
  }
  return this;
}

BOOL WTF::VectorComparer<false,WebCore::WillChangeData::AnimatableFeature>::compare(unsigned __int8 *a1, unsigned __int8 *a2, unint64_t a3)
{
  __int16 *v3;
  __int16 *v4;
  uint64_t v5;
  unint64_t v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;

  if (!a3)
    return 1;
  if (*a1 != *a2 || ((*(_WORD *)(a2 + 1) ^ *(_WORD *)(a1 + 1)) & 0x3FFF) != 0)
    return 0;
  v3 = (__int16 *)(a2 + 5);
  v4 = (__int16 *)(a1 + 5);
  v5 = 1;
  do
  {
    v6 = v5;
    if (a3 == v5)
      break;
    if (*((unsigned __int8 *)v4 - 1) != *((unsigned __int8 *)v3 - 1))
      break;
    v8 = *v4;
    v4 += 2;
    v7 = v8;
    v9 = *v3;
    v3 += 2;
    v10 = v9 ^ v7;
    v5 = v6 + 1;
  }
  while ((v10 & 0x3FFF) == 0);
  return v6 >= a3;
}

_DWORD *WTF::Vector<WebCore::WillChangeData::AnimatableFeature,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::WillChangeData::AnimatableFeature>(uint64_t a1, unint64_t a2)
{
  _DWORD *result;

  result = (_DWORD *)WTF::Vector<WebCore::WillChangeData::AnimatableFeature,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  *(_DWORD *)(*(_QWORD *)a1 + 4 * (*(_DWORD *)(a1 + 12))++) = *result;
  return result;
}

unint64_t WTF::Vector<WebCore::WillChangeData::AnimatableFeature,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v5 = *(_QWORD *)a1;
  if (*(_QWORD *)a1 <= a3 && v5 + 4 * (unint64_t)*(unsigned int *)(a1 + 12) > a3)
  {
    v9 = a3 - v5;
    v10 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v10 >= 0x10)
      v11 = v10 + 1;
    else
      v11 = 16;
    if (v11 > a2)
      a2 = v11;
    WTF::Vector<WebCore::WillChangeData::AnimatableFeature,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
    return *(_QWORD *)a1 + v9;
  }
  else
  {
    v6 = *(unsigned int *)(a1 + 8) + ((unint64_t)*(unsigned int *)(a1 + 8) >> 2);
    if (v6 >= 0x10)
      v7 = v6 + 1;
    else
      v7 = 16;
    if (v7 > a2)
      a2 = v7;
    WTF::Vector<WebCore::WillChangeData::AnimatableFeature,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(a1, a2);
  }
  return v3;
}

uint64_t WTF::Vector<WebCore::WillChangeData::AnimatableFeature,1ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::reserveCapacity<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  WTF *v3;
  uint64_t v4;
  void *v5;
  WTF *v6;
  uint64_t v7;
  WTF *v8;
  int v9;

  if (*(unsigned int *)(result + 8) < a2)
  {
    v2 = result;
    v3 = *(WTF **)result;
    v4 = *(unsigned int *)(result + 12);
    result = WTF::VectorBuffer<WebCore::WillChangeData::AnimatableFeature,1ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(result, a2);
    if ((_DWORD)v4)
    {
      v6 = *(WTF **)v2;
      v7 = 4 * v4;
      v8 = v3;
      do
      {
        v9 = *(_DWORD *)v8;
        v8 = (WTF *)((char *)v8 + 4);
        *(_DWORD *)v6 = v9;
        v6 = (WTF *)((char *)v6 + 4);
        v7 -= 4;
      }
      while (v7);
    }
    if ((WTF *)(v2 + 16) != v3 && v3)
    {
      if (*(WTF **)v2 == v3)
      {
        *(_QWORD *)v2 = 0;
        *(_DWORD *)(v2 + 8) = 0;
      }
      return WTF::fastFree(v3, v5);
    }
  }
  return result;
}

uint64_t WTF::VectorBuffer<WebCore::WillChangeData::AnimatableFeature,1ul,WTF::FastMalloc>::allocateBuffer<(WTF::FailureAction)0>(uint64_t result, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = result;
  if (a2 < 2)
  {
    *(_QWORD *)result = result + 16;
    *(_DWORD *)(result + 8) = 1;
  }
  else
  {
    v3 = a2;
    if (a2 >> 30)
    {
      __break(0xC471u);
    }
    else
    {
      result = WTF::fastMalloc((WTF *)(4 * a2));
      *(_DWORD *)(v2 + 8) = v3;
      *(_QWORD *)v2 = result;
    }
  }
  return result;
}

void WebCore::RenderSVGImage::~RenderSVGImage(WebCore::RenderSVGImage *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  v11 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 23) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  uint64_t v2;
  void *v3;

  WebCore::RenderSVGImage::~RenderSVGImage(this, a2);
  if (*(_DWORD *)(v2 + 16))
  {
    *(_QWORD *)(v2 + 192) = 0;
    *(_OWORD *)(v2 + 160) = 0u;
    *(_OWORD *)(v2 + 176) = 0u;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
  }
}

void WebCore::RenderSVGImage::willBeDestroyed(WebCore::RenderSVGImage *this)
{
  void *v2;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 23) + 24))(*((_QWORD *)this + 23));
  WebCore::RenderLayerModelObject::willBeDestroyed(this, v2);
}

uint64_t WebCore::RenderSVGImage::layout(WebCore::RenderSVGImage *this)
{
  void *v2;
  float v3;
  float v4;
  float v5;
  unsigned int v6;
  uint64_t v7;
  float v8;
  unsigned int v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  unsigned int v14;
  float v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  unsigned int v22;
  _BYTE v23[56];

  WebCore::LayoutRepainter::LayoutRepainter((uint64_t)v23, this, 0, 0, 1);
  WebCore::RenderSVGImage::updateImageViewport(this);
  v3 = *((float *)this + 42);
  v4 = *((float *)this + 43);
  v5 = floorf(v3 * 64.0);
  if (v5 > -2147500000.0)
    v6 = (int)v5;
  else
    v6 = 0x80000000;
  if (v5 < 2147500000.0)
    v7 = v6;
  else
    v7 = 0x7FFFFFFFLL;
  v8 = floorf(v4 * 64.0);
  if (v8 > -2147500000.0)
    v9 = (int)v8;
  else
    v9 = 0x80000000;
  if (v8 < 2147500000.0)
    v10 = v9;
  else
    v10 = 0x7FFFFFFFLL;
  v11 = v3 + *((float *)this + 44);
  v12 = v4 + *((float *)this + 45);
  v13 = ceilf(v11 * 64.0);
  if (v13 >= 2147500000.0)
  {
    v14 = 0x7FFFFFFF;
  }
  else if (v13 <= -2147500000.0)
  {
    v14 = 0x80000000;
  }
  else
  {
    v14 = (int)v13;
  }
  v15 = ceilf(v12 * 64.0);
  if (v15 >= 2147500000.0)
  {
    v16 = 0x7FFFFFFF;
  }
  else if (v15 <= -2147500000.0)
  {
    v16 = 0x80000000;
  }
  else
  {
    v16 = (int)v15;
  }
  v17 = __OFSUB__(v14, (_DWORD)v7);
  v18 = v14 - v7;
  LODWORD(v19) = (v14 >> 31) + 0x7FFFFFFF;
  if (v17)
    v19 = v19;
  else
    v19 = v18;
  LODWORD(v20) = (v16 >> 31) + 0x7FFFFFFF;
  if (__OFSUB__(v16, (_DWORD)v10))
    v20 = v20;
  else
    v20 = v16 - v10;
  *((_QWORD *)this + 19) = v7 | (v10 << 32);
  *((_QWORD *)this + 20) = v19 | (v20 << 32);
  WebCore::RenderLayerModelObject::updateLayerTransform(this, v2);
  result = WebCore::LayoutRepainter::repaintAfterLayout((WebCore::LayoutRepainter *)v23);
  v22 = *((_DWORD *)this + 5) & 0xFFDFFDFF | 0x200;
  *((_DWORD *)this + 5) = v22;
  if ((*((_BYTE *)this + 45) & 2) == 0)
  {
    *(_WORD *)((char *)this + 69) &= ~1u;
    *((_WORD *)this + 38) = *((_WORD *)this + 38) & 0xF | (16
                                                         * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                                                                            + 1944)
                                                                                + 248)
                                                                    + 472));
  }
  *((_DWORD *)this + 5) = v22 & 0xFFDFFE07;
  return result;
}

uint64_t WebCore::RenderSVGImage::updateImageViewport(WebCore::RenderSVGImage *this)
{
  float v2;
  float v3;
  float v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void *v14;
  float v15;
  int v16;
  int v17;
  void *v18;
  float v19;
  int v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  WTF::String *v35;
  __n128 v36;
  unsigned __int32 v37;
  WTF::StringImpl *v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  WebCore::Document *v42;
  _QWORD *Attribute;
  uint64_t v44;
  WTF::String *v45;
  __n128 v46;
  WTF::StringImpl *v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  unint64_t v56;
  unint64_t v57;
  int v58;
  unint64_t v59;
  uint64_t v61;
  char v62;
  float v63;
  char v65;
  BOOL v66;
  float v67;
  float v68;
  float v69;
  float v70;
  uint64_t v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  WTF::StringImpl *v83;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  WTF *v95;
  float v96;
  char v97;
  float v98;
  float v99;
  char v100;
  float v101;
  float v102;
  char v103;
  float v104;
  float v105;
  float v106;
  char v107;
  float v108;
  float v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  float v116;
  unsigned __int8 v117;
  char v118;
  char v119;
  float v120;
  unsigned __int8 v121;
  char v122;
  char v123;
  WTF::StringImpl *v124[5];
  float v125[4];
  int v126;
  _BYTE v127[9];

  v3 = *((float *)this + 42);
  v2 = *((float *)this + 43);
  v4 = *((float *)this + 44);
  v5 = *((float *)this + 45);
  v6 = *(_QWORD *)(*((_QWORD *)this + 23) + 24);
  if (v6 && (v7 = *(_QWORD *)(v6 + 8)) != 0)
  {
    v8 = WebCore::CachedImage::imageSizeForRenderer(v7, 0, 0, *(float *)(*((_QWORD *)this + 13) + 184));
    v9 = v8;
    v10 = HIDWORD(v8);
  }
  else
  {
    v9 = 0;
    LODWORD(v10) = 0;
  }
  v11 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v11 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196508D44);
  }
  if (*(_QWORD *)(*(_QWORD *)(v11 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::imageTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196508D64);
  }
  *(_DWORD *)(v11 + 24) += 2;
  WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v124, (const WebCore::SVGElement *)v11);
  v12 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
  v120 = 0.0;
  v123 = 0;
  v121 = *(_BYTE *)(v12 + 8);
  v13 = v121;
  v122 = *(_BYTE *)(v12 + 9);
  if (v121 - 2 >= 9)
  {
    if (v121 == 11)
    {
      v14 = (void *)*(unsigned int *)(v12 + 4);
      v120 = *(float *)(v12 + 4);
      WebCore::Length::ref((int *)&v120);
      v12 = *(_QWORD *)(*((_QWORD *)this + 11) + 8);
      goto LABEL_10;
    }
    v14 = 0;
    v16 = 1;
    v15 = 0.0;
  }
  else
  {
    v123 = *(_BYTE *)(v12 + 10);
    if (!v123)
    {
      v14 = (void *)*(unsigned int *)(v12 + 4);
      v120 = *(float *)(v12 + 4);
LABEL_10:
      v15 = *(float *)&v14;
      v16 = 1;
      goto LABEL_14;
    }
    v16 = 0;
    v15 = *(float *)(v12 + 4);
    v120 = v15;
    v14 = (void *)LODWORD(v15);
  }
LABEL_14:
  v116 = 0.0;
  v119 = 0;
  v117 = *(_BYTE *)(v12 + 16);
  v17 = v117;
  v118 = *(_BYTE *)(v12 + 17);
  if (v117 - 2 >= 9)
  {
    if (v117 == 11)
    {
      v18 = (void *)*(unsigned int *)(v12 + 12);
      v116 = *(float *)(v12 + 12);
      WebCore::Length::ref((int *)&v116);
LABEL_17:
      v19 = *(float *)&v18;
      v20 = 1;
      if (!v13)
        goto LABEL_26;
LABEL_21:
      if (v13 == 4)
      {
        if (v16)
          v21 = (float)(int)v14;
        else
          v21 = v15;
      }
      else if (v13 == 11)
      {
        LODWORD(v96) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v124);
        if (!v97)
          v96 = 0.0;
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v120, v96);
        v21 = v98;
      }
      else
      {
        v21 = 0.0;
        if (v13 == 3)
        {
          v22 = (float)SLODWORD(v15);
          if (!v16)
            v22 = v15;
          WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v124, 0, (uint64_t)v125, v22 / 100.0);
          if (v126 != -1)
          {
            if (!v126)
              v21 = v125[0];
            ((void (*)(_BYTE *, float *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v126])(v127, v125);
          }
        }
      }
      goto LABEL_45;
    }
    v18 = 0;
    v20 = 1;
    v19 = 0.0;
    if (v13)
      goto LABEL_21;
  }
  else
  {
    v119 = *(_BYTE *)(v12 + 18);
    if (!v119)
    {
      v18 = (void *)*(unsigned int *)(v12 + 12);
      v116 = *(float *)(v12 + 12);
      goto LABEL_17;
    }
    v20 = 0;
    v19 = *(float *)(v12 + 12);
    v116 = v19;
    v18 = (void *)LODWORD(v19);
    if (v13)
      goto LABEL_21;
  }
LABEL_26:
  if (v17 && v9 >= 1 && (int)v10 >= 1)
  {
    if (v17 == 4)
    {
      if (v20)
        v23 = (float)(int)v18;
      else
        v23 = v19;
    }
    else if (v17 == 11)
    {
      LODWORD(v106) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v124) >> 32;
      if (!v107)
        v106 = 0.0;
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v116, v106);
      v23 = v108;
    }
    else
    {
      v23 = 0.0;
      if (v17 == 3)
      {
        v109 = (float)SLODWORD(v19);
        if (!v20)
          v109 = v19;
        WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v124, 1, (uint64_t)v125, v109 / 100.0);
        if (v126 != -1)
        {
          if (!v126)
            v23 = v125[0];
          ((void (*)(_BYTE *, float *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v126])(v127, v125);
        }
      }
    }
    v21 = (float)((float)((float)v9 * 0.015625) * v23) / (float)((float)(int)v10 * 0.015625);
  }
  else
  {
    v21 = (float)v9 * 0.015625;
  }
LABEL_45:
  v24 = 0.0;
  if (v17 > 2)
  {
    switch(v17)
    {
      case 4:
        if (v20)
          v24 = (float)(int)v18;
        else
          v24 = v19;
        break;
      case 11:
        LODWORD(v99) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v124) >> 32;
        if (!v100)
          v99 = 0.0;
        WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v116, v99);
        v24 = v101;
        break;
      case 3:
        v25 = (float)SLODWORD(v19);
        if (!v20)
          v25 = v19;
        WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v124, 1, (uint64_t)v125, v25 / 100.0);
        if (v126 != -1)
        {
          if (!v126)
            v24 = v125[0];
          ((void (*)(_BYTE *, float *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v126])(v127, v125);
        }
        break;
    }
  }
  else if (!v17)
  {
    if (v13 && v9 >= 1 && (int)v10 >= 1)
    {
      switch(v13)
      {
        case 4:
          if (v16)
            v24 = (float)(int)v14;
          else
            v24 = v15;
          break;
        case 11:
          LODWORD(v102) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v124);
          if (!v103)
            v102 = 0.0;
          WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v120, v102);
          v24 = v104;
          break;
        case 3:
          v105 = (float)SLODWORD(v15);
          if (!v16)
            v105 = v15;
          WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v124, 0, (uint64_t)v125, v105 / 100.0);
          if (v126 != -1)
          {
            if (!v126)
              v24 = v125[0];
            ((void (*)(_BYTE *, float *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v126])(v127, v125);
          }
          break;
      }
      v24 = (float)((float)((float)(int)v10 * 0.015625) * v24) / (float)((float)v9 * 0.015625);
    }
    else
    {
      v24 = (float)(int)v10 * 0.015625;
    }
  }
  v26 = *(_QWORD *)(v11 + 232);
  v27 = *(_QWORD *)(v26 + 24);
  if (!v27 || !*(_DWORD *)(v27 - 12))
    goto LABEL_71;
  v85 = *(unsigned int *)(v27 - 4);
  if ((_DWORD)v85)
  {
    v86 = 8 * v85;
    v87 = *(uint64_t **)(v26 + 24);
    while ((unint64_t)(*v87 + 1) <= 1)
    {
      ++v87;
      v86 -= 8;
      if (!v86)
        goto LABEL_71;
    }
  }
  else
  {
    v87 = *(uint64_t **)(v26 + 24);
  }
  v110 = (uint64_t *)(v27 + 8 * v85);
  if (v87 == v110)
    goto LABEL_71;
  v111 = *v87;
LABEL_205:
  if (!*(_QWORD *)(v111 + 8))
  {
    while (++v87 != v110)
    {
      v111 = *v87;
      if ((unint64_t)(*v87 + 1) > 1)
      {
        if (v87 != v110)
          goto LABEL_205;
        break;
      }
    }
LABEL_71:
    v28 = v26 + 40;
    goto LABEL_72;
  }
  v28 = v26 + 48;
LABEL_72:
  v29 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v28 + 28), (const WebCore::SVGLengthContext *)v124);
  v30 = *(_QWORD *)(v11 + 240);
  v31 = *(_QWORD *)(v30 + 24);
  if (!v31 || !*(_DWORD *)(v31 - 12))
    goto LABEL_73;
  v88 = *(unsigned int *)(v31 - 4);
  if ((_DWORD)v88)
  {
    v89 = 8 * v88;
    v90 = *(uint64_t **)(v30 + 24);
    while ((unint64_t)(*v90 + 1) <= 1)
    {
      ++v90;
      v89 -= 8;
      if (!v89)
        goto LABEL_73;
    }
  }
  else
  {
    v90 = *(uint64_t **)(v30 + 24);
  }
  v112 = (uint64_t *)(v31 + 8 * v88);
  if (v90 == v112)
    goto LABEL_73;
  v113 = *v90;
LABEL_214:
  if (!*(_QWORD *)(v113 + 8))
  {
    while (++v90 != v112)
    {
      v113 = *v90;
      if ((unint64_t)(*v90 + 1) > 1)
      {
        if (v90 != v112)
          goto LABEL_214;
        break;
      }
    }
LABEL_73:
    v32 = v30 + 40;
    goto LABEL_74;
  }
  v32 = v30 + 48;
LABEL_74:
  v36.n128_f32[0] = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v32 + 28), (const WebCore::SVGLengthContext *)v124);
  v37 = v36.n128_u32[0];
  if (v17 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v18);
  }
  if (v13 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, v14);
  }
  v38 = v124[0];
  v124[0] = 0;
  if (v38)
  {
    do
    {
      v39 = __ldaxr((unsigned int *)v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, (unsigned int *)v38));
    if (!v40)
    {
      atomic_store(1u, (unsigned int *)v38);
      v94 = *((unsigned int *)v38 + 7);
      if ((_DWORD)v94)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v38 + 2), (WTF::StringImpl *)(*((_QWORD *)v38 + 2) + 32 * v94));
      v95 = (WTF *)*((_QWORD *)v38 + 2);
      if (v95)
      {
        *((_QWORD *)v38 + 2) = 0;
        *((_DWORD *)v38 + 6) = 0;
        WTF::fastFree(v95, v33);
      }
      WTF::fastFree(v38, v33);
      if (!v11)
        goto LABEL_82;
      goto LABEL_80;
    }
  }
  if (v11)
  {
LABEL_80:
    if (*(_DWORD *)(v11 + 24) == 2)
    {
      if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v11, v33);
    }
    else
    {
      *(_DWORD *)(v11 + 24) -= 2;
    }
  }
LABEL_82:
  *((float *)this + 42) = v29;
  *((_DWORD *)this + 43) = v37;
  *((float *)this + 44) = v21;
  *((float *)this + 45) = v24;
  v41 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_BYTE *)(v41 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196508D84);
  }
  if (*(_QWORD *)(*(_QWORD *)(v41 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::imageTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196508DCCLL);
  }
  *(_DWORD *)(v41 + 24) += 2;
  v42 = *(WebCore::Document **)(*(_QWORD *)(v41 + 40) + 8);
  Attribute = (_QWORD *)WebCore::Element::getAttribute((WebCore::Element *)v41, (const WebCore::QualifiedName *)&WebCore::SVGNames::hrefAttr, v34, v35, v36);
  if (!*Attribute)
    Attribute = (_QWORD *)WebCore::Element::getAttribute((WebCore::Element *)v41, (const WebCore::QualifiedName *)&WebCore::XLinkNames::hrefAttr, v44, v45, v46);
  WebCore::Document::completeURL(v42, Attribute, (uint64_t)v42 + 848, 0, (WTF::URL *)v124);
  v49 = *(_QWORD *)(v41 + 264);
  v50 = *(_QWORD *)(v49 + 24);
  if (!v50 || !*(_DWORD *)(v50 - 12))
    goto LABEL_87;
  v91 = *(unsigned int *)(v50 - 4);
  if ((_DWORD)v91)
  {
    v92 = 8 * v91;
    v93 = *(uint64_t **)(v49 + 24);
    while ((unint64_t)(*v93 + 1) <= 1)
    {
      ++v93;
      v92 -= 8;
      if (!v92)
        goto LABEL_87;
    }
  }
  else
  {
    v93 = *(uint64_t **)(v49 + 24);
  }
  v114 = (uint64_t *)(v50 + 8 * v91);
  if (v93 == v114)
    goto LABEL_87;
  v115 = *v93;
LABEL_223:
  if (!*(_QWORD *)(v115 + 8))
  {
    while (++v93 != v114)
    {
      v115 = *v93;
      if ((unint64_t)(*v93 + 1) > 1)
      {
        if (v93 != v114)
          goto LABEL_223;
        break;
      }
    }
LABEL_87:
    v51 = v49 + 40;
    goto LABEL_88;
  }
  v51 = v49 + 48;
  if (*(_BYTE *)(*(_QWORD *)v51 + 26) != 1)
    goto LABEL_98;
  v52 = *(_QWORD *)(*((_QWORD *)this + 23) + 24);
  if (!v52)
    goto LABEL_98;
  v53 = *(_QWORD *)(v52 + 8);
  if (!v53)
    goto LABEL_98;
LABEL_88:
  v54 = WebCore::CachedImage::imageSizeForRenderer(v53, 0, 0, *(float *)(*((_QWORD *)this + 13) + 184));
  v55 = v54;
  v56 = HIDWORD(v54);
  v57 = (*(uint64_t (**)(_QWORD, _QWORD, float))(**((_QWORD **)this + 23) + 80))(*((_QWORD *)this + 23), 0, *(float *)(*((_QWORD *)this + 13) + 184));
  v59 = HIDWORD(v57);
  if (v55 != (_DWORD)v57 || (_DWORD)v56 != HIDWORD(v57))
  {
    v61 = *((_QWORD *)this + 23);
    *(_QWORD *)v125 = (((int)(v55 - (v59 & 0xFFFFFFC0) + 32) >> 6) + v55 / 64) | ((unint64_t)(((int)(v56 - (v58 & 0xFFFFFFC0) + 32) >> 6) + (int)v56 / 64) << 32);
    (*(void (**)(uint64_t, float *, WTF::StringImpl **))(*(_QWORD *)v61 + 48))(v61, v125, v124);
    v48.n128_u32[0] = *((_DWORD *)this + 42);
    v62 = 1;
    if (v3 != v48.n128_f32[0])
      goto LABEL_129;
    v63 = *((float *)this + 43);
    if (v2 != v63)
      goto LABEL_129;
  }
  else
  {
LABEL_98:
    v48.n128_u32[0] = *((_DWORD *)this + 42);
    v63 = *((float *)this + 43);
    if (v3 != v48.n128_f32[0] || v2 != v63)
    {
LABEL_108:
      v67 = floorf(v48.n128_f32[0]);
      v68 = 2147500000.0;
      if (v67 < 2147500000.0)
      {
        v68 = -2147500000.0;
        if (v67 > -2147500000.0)
          v68 = (float)(int)v67;
      }
      v69 = floorf(v63);
      v70 = 2147500000.0;
      if (v69 < 2147500000.0)
      {
        v70 = -2147500000.0;
        if (v69 > -2147500000.0)
          v70 = (float)(int)v69;
      }
      v71 = *((_QWORD *)this + 23);
      v72 = v63 + *((float *)this + 45);
      v73 = ceilf(v48.n128_f32[0] + *((float *)this + 44));
      v74 = 2147500000.0;
      if (v73 < 2147500000.0)
      {
        v74 = -2147500000.0;
        if (v73 > -2147500000.0)
          v74 = (float)(int)v73;
      }
      v75 = ceilf(v72);
      v76 = 2147500000.0;
      if (v75 < 2147500000.0)
      {
        v76 = -2147500000.0;
        if (v75 > -2147500000.0)
          v76 = (float)(int)v75;
      }
      v77 = v74 - v68;
      v78 = v76 - v70;
      v79 = 0x7FFFFFFFLL;
      v80 = 0x80000000;
      if (v77 > -2147500000.0)
        v80 = (int)v77;
      if (v77 < 2147500000.0)
        v79 = v80;
      v81 = 0x7FFFFFFF00000000;
      v48.n128_u64[0] = 0x4F0000004F000000;
      v82 = 0x8000000000000000;
      if (v78 > -2147500000.0)
        v82 = (unint64_t)(int)v78 << 32;
      if (v78 < 2147500000.0)
        v81 = v82;
      *(_QWORD *)v125 = v81 | v79;
      (*(void (**)(uint64_t, float *, WTF::StringImpl **, __n128))(*(_QWORD *)v71 + 48))(v71, v125, v124, v48);
      v62 = 1;
      goto LABEL_129;
    }
    v62 = 0;
  }
  v65 = v62;
  v66 = v4 == *((float *)this + 44);
  if (v5 != *((float *)this + 45))
    v66 = 0;
  v62 |= !v66;
  if ((v65 & 1) == 0 && !v66)
    goto LABEL_108;
LABEL_129:
  v83 = v124[0];
  v124[0] = 0;
  if (!v83)
    goto LABEL_132;
  if (*(_DWORD *)v83 != 2)
  {
    *(_DWORD *)v83 -= 2;
LABEL_132:
    if (!v41)
      return v62 & 1;
    goto LABEL_133;
  }
  WTF::StringImpl::destroy(v83, v47);
  if (!v41)
    return v62 & 1;
LABEL_133:
  if (*(_DWORD *)(v41 + 24) == 2)
  {
    if ((*(_WORD *)(v41 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v41, v47);
  }
  else
  {
    *(_DWORD *)(v41 + 24) -= 2;
  }
  return v62 & 1;
}

unint64_t WebCore::RenderSVGImage::paint(WebCore::RenderSVGImage *this, WebCore::PaintInfo *a2, const WebCore::LayoutPoint *a3)
{
  unint64_t result;
  const WebCore::RenderLayerModelObject *v7;
  double v8;
  int v9;
  WebCore::RenderSVGImage *v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  int v37;
  float v38;
  int v39;
  signed int v40;
  signed int v41;
  float v42;
  uint64_t v43;
  float v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  int v48;
  int v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  int v63;
  int v64;
  float v65;
  float v66;
  uint64_t v67;
  unint64_t v68;
  float *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  double v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  int v83;
  uint64_t v84;
  float v85;
  int v86;
  float v87;
  int v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  int v106;
  uint64_t v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  float64x2_t v112;
  double v113;
  double v115;
  int8x16_t v116;
  int8x16_t v117;
  float64x2_t v118;
  double v119;
  __int128 *v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  float v125;
  uint64_t v126;
  uint64_t v127;
  float v128;
  unint64_t v129;
  int v130;
  void *v131;
  uint64_t v132;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  BOOL v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  int v144;
  unint64_t v145;
  uint64_t v146;
  double v147;
  double v148;
  double v149;
  double v150;
  float64x2_t v151;
  _OWORD v152[3];
  _OWORD v153[5];
  uint64_t v154;
  float64_t v155;
  float64x2_t v156;
  double v157;
  float64x2_t v158;
  char v159;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 10) + 40))(*((_QWORD *)a2 + 10));
  if ((result & 1) != 0)
    return result;
  v9 = *((unsigned __int16 *)a2 + 8);
  if ((v9 & 0xC58) == 0)
    return result;
  v10 = (WebCore::RenderSVGImage *)*((_QWORD *)a2 + 3);
  if (v10)
  {
    if (v10 != this)
      return result;
  }
  if ((*(_BYTE *)(*((_QWORD *)this + 13) + 239) & 4) != 0)
    return result;
  v11 = *((_DWORD *)this + 30) & 0x30;
  if (v11 == 16)
    return result;
  if ((*((_QWORD *)this + 12) & 0x1FLL) == 0x1A)
    return result;
  v12 = *(_QWORD *)(*((_QWORD *)this + 23) + 24);
  if (!v12 || !*(_QWORD *)(v12 + 8))
    return result;
  if (v9 == 2048)
  {
    v153[0] = *(_OWORD *)((char *)this + 168);
    result = *((_QWORD *)a2 + 10);
    if ((!v10 || v10 == this) && !v11)
    {
      result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 40))(result);
      if ((result & 1) == 0)
      {
        result = WebCore::RenderLayerModelObject::svgClipperResourceFromStyle(this);
        if (result)
          return (unint64_t)WebCore::RenderSVGResourceClipper::applyMaskClipping((WebCore::RenderLayerModelObject *)result, a2, this, (const WebCore::FloatRect *)v153);
      }
    }
    return result;
  }
  v14 = *((_DWORD *)this + 38);
  v13 = *((_DWORD *)this + 39);
  v15 = *((_DWORD *)a3 + 1);
  v16 = __OFADD__(*(_DWORD *)a3, v14);
  v17 = *(_DWORD *)a3 + v14;
  if (v16)
    v18 = ((*(_DWORD *)a3 >> 31) + 0x7FFFFFFF);
  else
    v18 = v17;
  v16 = __OFADD__(v15, v13);
  v19 = v15 + v13;
  if (v16)
    v20 = (v15 >> 31) + 0x7FFFFFFF;
  else
    v20 = v19;
  v146 = v18 | (v20 << 32);
  if (v9 == 1024)
  {
    result = *((_QWORD *)a2 + 10);
    if (!v10 || v10 == this)
    {
      result = (*(uint64_t (**)(unint64_t))(*(_QWORD *)result + 40))(result);
      if ((result & 1) == 0)
      {
        result = WebCore::RenderLayerModelObject::svgMaskerResourceFromStyle(this);
        if (result)
          return (unint64_t)WebCore::RenderSVGResourceMasker::applyMask((uint64_t *)result, a2, this, (const WebCore::LayoutPoint *)&v146);
      }
    }
    return result;
  }
  result = WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect(this, v7, v8);
  v23 = result + v18;
  if (__OFADD__((_DWORD)result, (_DWORD)v18))
    v23 = (result >> 31) + 0x7FFFFFFF;
  v24 = HIDWORD(result) + v20;
  if (__OFADD__(HIDWORD(result), (_DWORD)v20))
    v24 = (HIDWORD(result) >> 31) + 0x7FFFFFFF;
  if (v21 >= 1 && v22 >= 1)
  {
    v25 = *((_DWORD *)a2 + 2);
    if (v25 >= 1)
    {
      v26 = *((_DWORD *)a2 + 3);
      if (v26 >= 1)
      {
        v27 = *(_DWORD *)a2;
        v16 = __OFADD__(*(_DWORD *)a2, v25);
        v28 = *(_DWORD *)a2 + v25;
        if (v16)
          v28 = (v27 >> 31) + 0x7FFFFFFF;
        if ((int)v23 < v28)
        {
          v29 = v23 + v21;
          if (__OFADD__(v23, v21))
            v29 = (v23 >> 31) + 0x7FFFFFFF;
          if (v27 < v29)
          {
            v30 = *((_DWORD *)a2 + 1);
            v16 = __OFADD__(v30, v26);
            v31 = v30 + v26;
            if (v16)
              v31 = (v30 >> 31) + 0x7FFFFFFF;
            if (v24 < v31)
            {
              v32 = v24 + v22;
              if (__OFADD__(v24, v22))
                v32 = (v24 >> 31) + 0x7FFFFFFF;
              if ((int)v30 < v32)
              {
                v33 = *((unsigned __int16 *)a2 + 8);
                if (v33 == 64 || v33 == 16)
                {
                  v34 = *((_QWORD *)this + 20);
                  *(_QWORD *)&v153[0] = v18 | (v20 << 32);
                  *((_QWORD *)&v153[0] + 1) = v34;
                  return WebCore::RenderElement::paintOutline(this, a2, (const WebCore::LayoutRect *)v153);
                }
                v35 = *((_QWORD *)a2 + 10);
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 96))(v35, 1);
                v36 = floorf(*((float *)this + 42) * 64.0);
                if (v36 >= 2147500000.0)
                {
                  v37 = 0x7FFFFFFF;
                }
                else if (v36 <= -2147500000.0)
                {
                  v37 = 0x80000000;
                }
                else
                {
                  v37 = (int)v36;
                }
                v38 = floorf(*((float *)this + 43) * 64.0);
                if (v38 >= 2147500000.0)
                {
                  v39 = 0x7FFFFFFF;
                }
                else if (v38 <= -2147500000.0)
                {
                  v39 = 0x80000000;
                }
                else
                {
                  v39 = (int)v38;
                }
                v16 = __OFSUB__((_DWORD)v18, v37);
                v40 = v18 - v37;
                if (v16)
                  v40 = (v18 >> 31) + 0x7FFFFFFF;
                v16 = __OFSUB__((_DWORD)v20, v39);
                v41 = v20 - v39;
                if (v16)
                  v41 = (v20 >> 31) + 0x7FFFFFFF;
                (*(void (**)(_QWORD, float, float))(**((_QWORD **)a2 + 10) + 648))(*((_QWORD *)a2 + 10), (float)v40 * 0.015625, (float)v41 * 0.015625);
                if ((*(_WORD *)(*((_QWORD *)this + 17) + 8) & 0x1800) != 0x1000)
                  goto LABEL_174;
                v42 = floorf(*((float *)this + 42) * 64.0);
                if (v42 >= 2147500000.0)
                {
                  v43 = 0x7FFFFFFFLL;
                }
                else if (v42 <= -2147500000.0)
                {
                  v43 = 0x80000000;
                }
                else
                {
                  v43 = (int)v42;
                }
                v44 = floorf(*((float *)this + 43) * 64.0);
                if (v44 >= 2147500000.0)
                {
                  v45 = 0x7FFFFFFF00000000;
                }
                else if (v44 <= -2147500000.0)
                {
                  v45 = 0x8000000000000000;
                }
                else
                {
                  v45 = (unint64_t)(int)v44 << 32;
                }
                v145 = v45 | v43;
                v46 = *((_QWORD *)a2 + 10);
                v47 = HIDWORD(v45);
                v48 = *((_DWORD *)this + 40);
                v49 = *((_DWORD *)this + 41);
                (*(void (**)(float64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v46 + 672))(&v155, v46, 0);
                *(float *)v153 = (float)(int)v43 * 0.015625;
                *((float *)v153 + 1) = (float)(int)v47 * 0.015625;
                *((float *)v153 + 2) = (float)v48 * 0.015625;
                *((float *)v153 + 3) = (float)v49 * 0.015625;
                v50 = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)&v155, (const WebCore::FloatRect *)v153);
                v54 = floorf(v50);
                v55 = 2147500000.0;
                if (v54 < 2147500000.0)
                {
                  v55 = -2147500000.0;
                  if (v54 > -2147500000.0)
                    v55 = (float)(int)v54;
                }
                v56 = floorf(v51);
                v57 = 2147500000.0;
                if (v56 < 2147500000.0)
                {
                  v57 = -2147500000.0;
                  if (v56 > -2147500000.0)
                    v57 = (float)(int)v56;
                }
                v58 = v51 + v53;
                v59 = ceilf(v50 + v52);
                v60 = 2147500000.0;
                if (v59 < 2147500000.0)
                {
                  v60 = -2147500000.0;
                  if (v59 > -2147500000.0)
                    v60 = (float)(int)v59;
                }
                v61 = ceilf(v58);
                v62 = 2147500000.0;
                if (v61 < 2147500000.0)
                {
                  v62 = -2147500000.0;
                  if (v61 > -2147500000.0)
                    v62 = (float)(int)v61;
                }
                if (v55 >= 2147500000.0)
                {
                  v63 = 0x7FFFFFFF;
                }
                else if (v55 <= -2147500000.0)
                {
                  v63 = 0x80000000;
                }
                else
                {
                  v63 = (int)v55;
                }
                v144 = v63;
                if (v57 >= 2147500000.0)
                {
                  v64 = 0x7FFFFFFF;
                }
                else if (v57 <= -2147500000.0)
                {
                  v64 = 0x80000000;
                }
                else
                {
                  v64 = (int)v57;
                }
                v143 = v64;
                v65 = v60 - v55;
                v66 = v62 - v57;
                if (v65 >= 2147500000.0)
                {
                  v67 = 0x7FFFFFFFLL;
                }
                else if (v65 <= -2147500000.0)
                {
                  v67 = 0x80000000;
                }
                else
                {
                  v67 = (int)v65;
                }
                if (v66 >= 2147500000.0)
                {
                  v68 = 0x7FFFFFFF00000000;
                }
                else if (v66 <= -2147500000.0)
                {
                  v68 = 0x8000000000000000;
                }
                else
                {
                  v68 = (unint64_t)(int)v66 << 32;
                }
                v69 = (float *)*((_QWORD *)this + 24);
                if (!v69)
                {
LABEL_117:
                  v85 = ceilf((float)v48 * 0.015625);
                  if (v85 >= 2147500000.0)
                  {
                    v86 = 0x7FFFFFFF;
                  }
                  else if (v85 <= -2147500000.0)
                  {
                    v86 = 0x80000000;
                  }
                  else
                  {
                    v86 = (int)v85;
                  }
                  v87 = ceilf((float)v49 * 0.015625);
                  if (v87 >= 2147500000.0)
                  {
                    v88 = 0x7FFFFFFF;
                  }
                  else if (v87 <= -2147500000.0)
                  {
                    v88 = 0x80000000;
                  }
                  else
                  {
                    v88 = (int)v87;
                  }
                  *(float *)v152 = (float)v86;
                  *((float *)v152 + 1) = (float)v88;
                  v89 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
                  if (v89 != -1)
                  {
                    *(_QWORD *)&v153[0] = &v159;
                    v147 = COERCE_DOUBLE(v153);
                    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v147, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
                  }
                  (*(void (**)(_OWORD *__return_ptr, uint64_t, _OWORD *, uint64_t *, _QWORD))(*(_QWORD *)v46 + 336))(v153, v46, v152, &WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 0);
                  v84 = *(_QWORD *)&v153[0];
                  *(_QWORD *)&v153[0] = 0;
                  v91 = *((_QWORD *)this + 24);
                  *((_QWORD *)this + 24) = v84;
                  if (!v91)
                  {
LABEL_160:
                    if (v84)
                    {
LABEL_161:
                      v107 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v84 + 16))(v84);
                      *(float *)v153 = (float)v144;
                      *((float *)v153 + 1) = (float)v143;
                      *((float *)v153 + 2) = (float)(int)v67;
                      *((float *)v153 + 3) = (float)SHIDWORD(v68);
                      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v107 + 280))(v107, v153);
                      v108 = *((_OWORD *)a2 + 2);
                      v109 = *((_OWORD *)a2 + 3);
                      v110 = *(_OWORD *)a2;
                      v153[1] = *((_OWORD *)a2 + 1);
                      v153[2] = v108;
                      v111 = *((_OWORD *)a2 + 4);
                      v153[3] = v109;
                      v153[4] = v111;
                      v153[0] = v110;
                      v154 = v107;
                      WebCore::RenderSVGImage::paintForeground(this, (WebCore::PaintInfo *)v153, (int32x2_t *)&v145);
                      v112.f64[0] = v157;
                      v113 = vmuld_lane_f64(-v156.f64[0], v156, 1) + v155 * v157;
                      if (((*(_QWORD *)&v113 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
                        && (*(_QWORD *)&v113 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL)
                      {
                        LOBYTE(v147) = 0;
                        v120 = &xmmword_1969FDF98;
                      }
                      else
                      {
                        v115 = 1.0;
                        if (v155 == 1.0 && v156.f64[0] == 0.0 && v156.f64[1] == 0.0 && v157 == 1.0)
                        {
                          v118 = vnegq_f64(v158);
                          v148 = 0.0;
                          v149 = 0.0;
                          v119 = 1.0;
                        }
                        else
                        {
                          v115 = v157 / v113;
                          v112.f64[1] = v155;
                          v116 = (int8x16_t)vmulq_f64(v158, vnegq_f64(v112));
                          v117 = (int8x16_t)vdivq_f64(vmlaq_f64((float64x2_t)vextq_s8(v116, v116, 8uLL), v158, v156), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v113, 0));
                          v118 = (float64x2_t)vextq_s8(v117, v117, 8uLL);
                          v148 = -v156.f64[0] / v113;
                          v149 = -v156.f64[1] / v113;
                          v119 = v155 / v113;
                        }
                        v147 = v115;
                        v150 = v119;
                        v120 = (__int128 *)&v147;
                        v151 = v118;
                      }
                      v121 = v120[1];
                      v152[0] = *v120;
                      v152[1] = v121;
                      v152[2] = v120[2];
                      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v46 + 656))(v46, v152);
                      v122 = *((_QWORD *)this + 24);
                      if (!v122)
                      {
LABEL_189:
                        *(float *)v152 = (float)v144;
                        *((float *)v152 + 1) = (float)v143;
                        *((float *)v152 + 2) = (float)(int)v67;
                        *((float *)v152 + 3) = (float)SHIDWORD(v68);
                        v147 = 0.0;
                        v148 = *(double *)(v122 + 16);
                        (*(void (**)(uint64_t, uint64_t, _OWORD *, double *, uint64_t))(*(_QWORD *)v46 + 384))(v46, v122, v152, &v147, 4641);
                        (*(void (**)(uint64_t, float64_t *))(*(_QWORD *)v46 + 656))(v46, &v155);
                        v132 = *(_QWORD *)(v122 + 8);
                        if (__ldaxr((unsigned __int8 *)v132))
                        {
                          __clrex();
                        }
                        else if (!__stxr(1u, (unsigned __int8 *)v132))
                        {
                          goto LABEL_193;
                        }
                        MEMORY[0x19AEA534C](v132);
LABEL_193:
                        v134 = *(_QWORD *)(v132 + 8);
                        v135 = v134 - 1;
                        *(_QWORD *)(v132 + 8) = v134 - 1;
                        if (v134 == 1)
                        {
                          v139 = *(_QWORD *)(v132 + 16);
                          v136 = *(_QWORD *)(v132 + 24);
                          *(_QWORD *)(v132 + 24) = 0;
                          v137 = v139 != 0;
                        }
                        else
                        {
                          v136 = 0;
                          v137 = 1;
                        }
                        v138 = __ldxr((unsigned __int8 *)v132);
                        if (v138 == 1)
                        {
                          if (!__stlxr(0, (unsigned __int8 *)v132))
                          {
LABEL_200:
                            if (!v135)
                            {
                              if (v136)
                                (*(void (**)(uint64_t))(*(_QWORD *)v136 + 8))(v136);
                              if (!v137)
                                WTF::fastFree((WTF *)v132, v131);
                            }
                            return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 104))(v35, 1);
                          }
                        }
                        else
                        {
                          __clrex();
                        }
                        WTF::Lock::unlockSlow((WTF::Lock *)v132);
                        goto LABEL_200;
                      }
                      v123 = *(_QWORD *)(v122 + 8);
                      if (__ldaxr((unsigned __int8 *)v123))
                      {
                        __clrex();
                      }
                      else if (!__stxr(1u, (unsigned __int8 *)v123))
                      {
                        goto LABEL_184;
                      }
                      MEMORY[0x19AEA534C](v123);
LABEL_184:
                      ++*(_QWORD *)(v123 + 8);
                      v130 = __ldxr((unsigned __int8 *)v123);
                      if (v130 == 1)
                      {
                        if (!__stlxr(0, (unsigned __int8 *)v123))
                          goto LABEL_189;
                      }
                      else
                      {
                        __clrex();
                      }
                      WTF::Lock::unlockSlow((WTF::Lock *)v123);
                      goto LABEL_189;
                    }
LABEL_174:
                    v125 = floorf(*((float *)this + 42) * 64.0);
                    v126 = 0x7FFFFFFFLL;
                    v127 = 0x80000000;
                    if (v125 > -2147500000.0)
                      v127 = (int)v125;
                    if (v125 < 2147500000.0)
                      v126 = v127;
                    v128 = floorf(*((float *)this + 43) * 64.0);
                    if (v128 >= 2147500000.0)
                    {
                      v129 = 0x7FFFFFFF00000000;
                    }
                    else if (v128 <= -2147500000.0)
                    {
                      v129 = 0x8000000000000000;
                    }
                    else
                    {
                      v129 = (unint64_t)(int)v128 << 32;
                    }
                    *(_QWORD *)&v153[0] = v129 | v126;
                    WebCore::RenderSVGImage::paintForeground(this, a2, (int32x2_t *)v153);
                    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v35 + 104))(v35, 1);
                  }
                  v92 = *(_QWORD *)(v91 + 8);
                  if (__ldaxr((unsigned __int8 *)v92))
                  {
                    __clrex();
                  }
                  else if (!__stxr(1u, (unsigned __int8 *)v92))
                  {
                    goto LABEL_130;
                  }
                  MEMORY[0x19AEA534C](v92);
LABEL_130:
                  v94 = *(_QWORD *)(v92 + 8);
                  v95 = v94 - 1;
                  *(_QWORD *)(v92 + 8) = v94 - 1;
                  if (v94 == 1)
                  {
                    v140 = *(_QWORD *)(v92 + 16);
                    v96 = *(_QWORD *)(v92 + 24);
                    *(_QWORD *)(v92 + 24) = 0;
                    v97 = v140 != 0;
                  }
                  else
                  {
                    v96 = 0;
                    v97 = 1;
                  }
                  v98 = __ldxr((unsigned __int8 *)v92);
                  if (v98 == 1)
                  {
                    if (!__stlxr(0, (unsigned __int8 *)v92))
                    {
LABEL_137:
                      if (!v95)
                      {
                        if (v96)
                          (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
                        if (!v97)
                          WTF::fastFree((WTF *)v92, v90);
                      }
                      v99 = *(_QWORD *)&v153[0];
                      *(_QWORD *)&v153[0] = 0;
                      if (!v99)
                        goto LABEL_159;
                      v100 = *(_QWORD *)(v99 + 8);
                      if (__ldaxr((unsigned __int8 *)v100))
                      {
                        __clrex();
                      }
                      else if (!__stxr(1u, (unsigned __int8 *)v100))
                      {
                        goto LABEL_147;
                      }
                      MEMORY[0x19AEA534C](v100);
LABEL_147:
                      v102 = *(_QWORD *)(v100 + 8);
                      v103 = v102 - 1;
                      *(_QWORD *)(v100 + 8) = v102 - 1;
                      if (v102 == 1)
                      {
                        v141 = *(_QWORD *)(v100 + 16);
                        v104 = *(_QWORD *)(v100 + 24);
                        *(_QWORD *)(v100 + 24) = 0;
                        v105 = v141 != 0;
                      }
                      else
                      {
                        v104 = 0;
                        v105 = 1;
                      }
                      v106 = __ldxr((unsigned __int8 *)v100);
                      if (v106 == 1)
                      {
                        if (!__stlxr(0, (unsigned __int8 *)v100))
                        {
LABEL_154:
                          if (!v103)
                          {
                            if (v104)
                              (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
                            if (!v105)
                              WTF::fastFree((WTF *)v100, v90);
                          }
LABEL_159:
                          v84 = *((_QWORD *)this + 24);
                          goto LABEL_160;
                        }
                      }
                      else
                      {
                        __clrex();
                      }
                      WTF::Lock::unlockSlow((WTF::Lock *)v100);
                      goto LABEL_154;
                    }
                  }
                  else
                  {
                    __clrex();
                  }
                  WTF::Lock::unlockSlow((WTF::Lock *)v92);
                  goto LABEL_137;
                }
                if ((v68 | v67) == WebCore::ImageBuffer::calculateBackendSize(v69[4], v69[5], v69[6]))
                {
                  v71 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 24) + 16))(*((_QWORD *)this + 24));
                  (*(void (**)(_OWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v71 + 672))(v153, v71, 0);
                  v72 = 0;
                  do
                  {
                    v73 = *(double *)((char *)v153 + v72);
                    v74 = *(float64_t *)((char *)&v155 + v72);
                    if (v73 != v74)
                      break;
                    v75 = v72 == 40;
                    v72 += 8;
                  }
                  while (!v75);
                  if (v73 == v74)
                    goto LABEL_116;
                  v76 = *((_QWORD *)this + 24);
                  *((_QWORD *)this + 24) = 0;
                  if (!v76)
                    goto LABEL_116;
                }
                else
                {
                  v76 = *((_QWORD *)this + 24);
                  *((_QWORD *)this + 24) = 0;
                  if (!v76)
                    goto LABEL_117;
                }
                v77 = *(_QWORD *)(v76 + 8);
                if (__ldaxr((unsigned __int8 *)v77))
                {
                  __clrex();
                }
                else if (!__stxr(1u, (unsigned __int8 *)v77))
                {
                  goto LABEL_104;
                }
                MEMORY[0x19AEA534C](v77);
LABEL_104:
                v79 = *(_QWORD *)(v77 + 8);
                v80 = v79 - 1;
                *(_QWORD *)(v77 + 8) = v79 - 1;
                if (v79 == 1)
                {
                  v142 = *(_QWORD *)(v77 + 16);
                  v81 = *(_QWORD *)(v77 + 24);
                  *(_QWORD *)(v77 + 24) = 0;
                  v82 = v142 != 0;
                }
                else
                {
                  v81 = 0;
                  v82 = 1;
                }
                v83 = __ldxr((unsigned __int8 *)v77);
                if (v83 == 1)
                {
                  if (!__stlxr(0, (unsigned __int8 *)v77))
                  {
LABEL_111:
                    if (!v80)
                    {
                      if (v81)
                        (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
                      if (!v82)
                        WTF::fastFree((WTF *)v77, v70);
                    }
LABEL_116:
                    v84 = *((_QWORD *)this + 24);
                    if (v84)
                      goto LABEL_161;
                    goto LABEL_117;
                  }
                }
                else
                {
                  __clrex();
                }
                WTF::Lock::unlockSlow((WTF::Lock *)v77);
                goto LABEL_111;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

float WebCore::RenderSVGImage::objectBoundingBox(WebCore::RenderSVGImage *this)
{
  return *((float *)this + 42);
}

void WebCore::RenderSVGImage::paintForeground(WebCore::RenderSVGImage *this, WebCore::PaintInfo *a2, int32x2_t *a3)
{
  const WebCore::RenderLayerModelObject *v6;
  int v7;
  double v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const WebCore::RenderLayerModelObject *v15;
  double v16;
  float v17;
  unsigned int v18;
  unsigned int v19;
  float v20;
  float v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  float v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  WebCore::CachedImage *v44;
  _DWORD *v45;
  uint64_t v46;
  WebCore::Page *v47;
  uint64_t v48;
  WebCore::Page *v49;
  float32x2_t v50;
  const WebCore::LayoutRect *v51;
  WebCore::Page *v52;
  _DWORD *v53;
  float32x2_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  float32x2_t v59;
  int8x8_t v60;
  int8x8_t v61;
  float32x2_t v62;
  int8x8_t v63;
  float v64;
  float v65;
  float v66;
  float v67;
  uint64_t v68;
  WebCore::Page *v69;
  float v70;
  unsigned int v71;
  uint64_t v72;
  float v73;
  unsigned int v74;
  uint64_t v75;
  float v76;
  float v77;
  int v78;
  unsigned int v79;
  float v80;
  unsigned int v81;
  BOOL v82;
  unsigned int v83;
  uint64_t v84;
  uint64_t v85;
  float v86;
  unsigned int v87;
  uint64_t v88;
  float v89;
  unsigned int v90;
  uint64_t v91;
  float v92;
  float v93;
  int v94;
  unsigned int v95;
  float v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  _DWORD *v103;
  uint64_t v104;
  float32x2_t v105;
  float32x2_t v106;
  _DWORD *v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;

  v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 10) + 64))(*((_QWORD *)a2 + 10));
  v9 = (_QWORD *)*((_QWORD *)this + 23);
  v10 = v9[3];
  if (v10)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v7)
    {
LABEL_3:
      if (v11)
      {
        v12 = v10 ? *(_QWORD *)(v10 + 8) : 0;
        if (WTF::WeakHashSet<WebCore::CachedImageClient,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::contains<WebCore::CachedImageClient>((uint64_t *)(v12 + 664), (uint64_t)this))
        {
          v13 = *(_QWORD *)(*((_QWORD *)this + 23) + 24);
          if (v13)
            v14 = *(_QWORD *)(v13 + 8);
          else
            v14 = 0;
          WebCore::CachedImage::removeAllClientsWaitingForAsyncDecoding(v14);
        }
      }
      return;
    }
  }
  else
  {
    v11 = 0;
    if (v7)
      goto LABEL_3;
  }
  if (!v11)
  {
    v48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                        + 8)
                                            + 528)
                                + 8)
                    + 24);
    if (v48)
      v49 = *(WebCore::Page **)(v48 + 8);
    else
      v49 = 0;
    v108 = WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect(this, v6, v8);
    v109 = (unint64_t)v54;
    WebCore::Page::addRelevantUnpaintedObject(v49, this, (const WebCore::LayoutRect *)&v108);
    return;
  }
  v108 = 0;
  (*(void (**)(_DWORD **__return_ptr, _QWORD *, unint64_t *))(*v9 + 32))(&v107, v9, &v108);
  if (!v107
    || (*(float *)&v16 = (*(float (**)(_DWORD *, _QWORD))(*(_QWORD *)v107 + 168))(v107, 0),
        *(float *)&v16 <= 0.0)
    || v17 <= 0.0)
  {
    v46 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                        + 8)
                                            + 528)
                                + 8)
                    + 24);
    if (v46)
      v47 = *(WebCore::Page **)(v46 + 8);
    else
      v47 = 0;
    v108 = WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect(this, v15, v16);
    v109 = (unint64_t)v50;
    v51 = (const WebCore::LayoutRect *)&v108;
    v52 = v47;
    goto LABEL_55;
  }
  *(float *)&v18 = (float)*((int *)this + 40) * 0.015625;
  *(float *)&v19 = (float)*((int *)this + 41) * 0.015625;
  v108 = 0;
  v109 = __PAIR64__(v19, v18);
  v20 = (*(float (**)(_DWORD *, _QWORD))(*(_QWORD *)v107 + 168))(v107, 0);
  (*(void (**)(_DWORD *, _QWORD))(*(_QWORD *)v107 + 168))(v107, 0);
  v105 = 0;
  v106 = (float32x2_t)__PAIR64__(v22, LODWORD(v20));
  v23 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_BYTE *)(v23 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19650A4A8);
  }
  if (*(_QWORD *)(*(_QWORD *)(v23 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::imageTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19650A4C8);
  }
  *(_DWORD *)(v23 + 24) += 2;
  v24 = *(_QWORD *)(v23 + 264);
  v25 = *(_QWORD *)(v24 + 24);
  if (v25 && *(_DWORD *)(v25 - 12))
  {
    v55 = *(unsigned int *)(v25 - 4);
    if ((_DWORD)v55)
    {
      v56 = 8 * v55;
      v57 = *(uint64_t **)(v24 + 24);
      while ((unint64_t)(*v57 + 1) <= 1)
      {
        ++v57;
        v56 -= 8;
        if (!v56)
          goto LABEL_18;
      }
    }
    else
    {
      v57 = *(uint64_t **)(v24 + 24);
    }
    v101 = (uint64_t *)(v25 + 8 * v55);
    if (v57 != v101)
    {
      v102 = *v57;
LABEL_150:
      if (*(_QWORD *)(v102 + 8))
      {
        v26 = v24 + 48;
        goto LABEL_19;
      }
      while (++v57 != v101)
      {
        v102 = *v57;
        if ((unint64_t)(*v57 + 1) > 1)
        {
          if (v57 != v101)
            goto LABEL_150;
          break;
        }
      }
    }
  }
LABEL_18:
  v26 = v24 + 40;
LABEL_19:
  WebCore::SVGPreserveAspectRatioValue::transformRect((WebCore::SVGPreserveAspectRatioValue *)(*(_QWORD *)v26 + 26), (WebCore::FloatRect *)&v108, (WebCore::FloatRect *)&v105, v21);
  if (v23)
  {
    if (*(_DWORD *)(v23 + 24) == 2)
    {
      if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v23, v27);
    }
    else
    {
      *(_DWORD *)(v23 + 24) -= 2;
    }
  }
  v108 = (unint64_t)vadd_f32(vmul_f32(vcvt_f32_s32(*a3), (float32x2_t)vdup_n_s32(0x3C800000u)), (float32x2_t)v108);
  v28 = (_QWORD *)*((_QWORD *)this + 23);
  v29 = v28[3];
  if (!v29)
    goto LABEL_56;
  v30 = 0;
  if (*(_QWORD *)(v29 + 8) && *(float *)&v109 > 0.0 && *((float *)&v109 + 1) > 0.0)
  {
    v110 = 0;
    (*(void (**)(_DWORD **__return_ptr, _QWORD *, uint64_t *, float32_t))(*v28 + 32))(&v103, v28, &v110, *((float *)&v109 + 1));
    if (v103)
    {
      v30 = 0;
      if ((*(float (**)(_DWORD *, _QWORD))(*(_QWORD *)v103 + 168))(v103, 0) > 0.0 && v31 > 0.0)
      {
        v32 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
        if ((*((_BYTE *)this + 45) & 1) != 0 || !v32)
          goto LABEL_37;
        v33 = *(_WORD *)(v32 + 28);
        if ((v33 & 8) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x19650A4F8);
        }
        if ((v33 & 0x10) != 0
          && *(_QWORD *)(*(_QWORD *)(v32 + 96) + 24) == *(_QWORD *)(WebCore::HTMLNames::imgTag + 24)
          && (v34 = *(_QWORD *)(*(_QWORD *)(v32 + 176) + 24)) != 0
          && (v35 = *(_QWORD *)(v34 + 8)) != 0
          && (*(char *)(v35 + 720) & 0x80000000) == 0)
        {
          v36 = 545;
        }
        else
        {
LABEL_37:
          v36 = ((unint64_t)*(unsigned int *)(*((_QWORD *)this + 13) + 232) >> 3) & 0x1000 | 0x221;
        }
        v37 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v32 + 40) + 8)
                                                                        + 528)
                                                            + 8)
                                                + 24)
                                    + 8)
                        + 112);
        v38 = *(_QWORD *)(v37 + 688);
        v39 = *(_QWORD *)(v37 + 680);
        if (*(_BYTE *)(v37 + 247))
          LODWORD(v37) = *(unsigned __int8 *)(v37 + 246) != 0;
        else
          v37 = (*(_QWORD *)(v37 + 696) >> 28) & 1;
        *((_QWORD *)&v40 + 1) = v38;
        *(_QWORD *)&v40 = v39;
        v41 = (v40 >> 3) & 0x100000;
        v42 = 0x200000;
        if (!(_DWORD)v37)
          v42 = 0;
        v30 = (*(uint64_t (**)(_QWORD, _DWORD *, unint64_t *, float32x2_t *, unint64_t))(**((_QWORD **)a2 + 10) + 360))(*((_QWORD *)a2 + 10), v103, &v108, &v105, v41 | v36 | v42);
        if (v30 == 1)
        {
          v43 = *(_QWORD *)(*((_QWORD *)this + 23) + 24);
          if (v43)
            v44 = *(WebCore::CachedImage **)(v43 + 8);
          else
            v44 = 0;
          WebCore::CachedImage::addClientWaitingForAsyncDecoding(v44, this);
          v30 = 1;
        }
      }
      v45 = v103;
      v103 = 0;
      if (v45)
      {
        if (v45[2] == 1)
          (*(void (**)(_DWORD *))(*(_QWORD *)v45 + 8))(v45);
        else
          --v45[2];
      }
    }
    else
    {
      v30 = 0;
    }
    v29 = *(_QWORD *)(*((_QWORD *)this + 23) + 24);
    if (!v29)
      goto LABEL_56;
  }
  v58 = *(_QWORD *)(v29 + 8);
  if (!v58)
    goto LABEL_56;
  v59 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v108, v105), (int8x8_t)v108, (int8x8_t)v105);
  v60 = (int8x8_t)vadd_f32(v105, v106);
  v61 = (int8x8_t)vadd_f32((float32x2_t)v108, (float32x2_t)v109);
  v62 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32((float32x2_t)v60, (float32x2_t)v61), v61, v60);
  v63 = vmvn_s8((int8x8_t)vcge_f32(v59, v62));
  if ((v63.i32[0] & v63.i32[1] & 1) != 0)
  {
    v64 = v59.f32[1];
    v65 = v62.f32[1];
  }
  else
  {
    v59.i32[0] = 0;
    v64 = 0.0;
    v62.i32[0] = 0;
    v65 = 0.0;
  }
  v66 = v62.f32[0] - v59.f32[0];
  v67 = v65 - v64;
  v68 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40)
                                                      + 8)
                                          + 528)
                              + 8)
                  + 24);
  if (v30 != 1 && (*(_WORD *)(v58 + 557) & 0x400) == 0)
  {
    v69 = *(WebCore::Page **)(v68 + 8);
    v70 = floorf(v59.f32[0] * 64.0);
    if (v70 > -2147500000.0)
      v71 = (int)v70;
    else
      v71 = 0x80000000;
    if (v70 < 2147500000.0)
      v72 = v71;
    else
      v72 = 0x7FFFFFFFLL;
    v73 = floorf(v64 * 64.0);
    if (v73 > -2147500000.0)
      v74 = (int)v73;
    else
      v74 = 0x80000000;
    if (v73 < 2147500000.0)
      v75 = v74;
    else
      v75 = 0x7FFFFFFFLL;
    v76 = v64 + v67;
    v77 = ceilf((float)(v59.f32[0] + v66) * 64.0);
    if (v77 > -2147500000.0)
      v78 = (int)v77;
    else
      v78 = 0x80000000;
    if (v77 < 2147500000.0)
      v79 = v78;
    else
      v79 = 0x7FFFFFFF;
    v80 = ceilf(v76 * 64.0);
    if (v80 > -2147500000.0)
      v81 = (int)v80;
    else
      v81 = 0x80000000;
    if (v80 >= 2147500000.0)
      v81 = 0x7FFFFFFF;
    v82 = __OFSUB__(v79, (_DWORD)v72);
    v83 = v79 - v72;
    LODWORD(v84) = (v79 >> 31) + 0x7FFFFFFF;
    if (v82)
      v84 = v84;
    else
      v84 = v83;
    LODWORD(v85) = (v81 >> 31) + 0x7FFFFFFF;
    if (__OFSUB__(v81, (_DWORD)v75))
      v85 = v85;
    else
      v85 = v81 - v75;
    v103 = (_DWORD *)(v72 | (v75 << 32));
    v104 = v84 | (v85 << 32);
    WebCore::Page::addRelevantRepaintedObject(v69, this, (const WebCore::LayoutRect *)&v103);
    goto LABEL_56;
  }
  v52 = *(WebCore::Page **)(v68 + 8);
  v86 = floorf(v59.f32[0] * 64.0);
  if (v86 > -2147500000.0)
    v87 = (int)v86;
  else
    v87 = 0x80000000;
  if (v86 < 2147500000.0)
    v88 = v87;
  else
    v88 = 0x7FFFFFFFLL;
  v89 = floorf(v64 * 64.0);
  if (v89 > -2147500000.0)
    v90 = (int)v89;
  else
    v90 = 0x80000000;
  if (v89 < 2147500000.0)
    v91 = v90;
  else
    v91 = 0x7FFFFFFFLL;
  v92 = v64 + v67;
  v93 = ceilf((float)(v59.f32[0] + v66) * 64.0);
  if (v93 > -2147500000.0)
    v94 = (int)v93;
  else
    v94 = 0x80000000;
  if (v93 < 2147500000.0)
    v95 = v94;
  else
    v95 = 0x7FFFFFFF;
  v96 = ceilf(v92 * 64.0);
  if (v96 > -2147500000.0)
    v97 = (int)v96;
  else
    v97 = 0x80000000;
  if (v96 >= 2147500000.0)
    v97 = 0x7FFFFFFF;
  v82 = __OFSUB__(v95, (_DWORD)v88);
  v98 = v95 - v88;
  LODWORD(v99) = (v95 >> 31) + 0x7FFFFFFF;
  if (v82)
    v99 = v99;
  else
    v99 = v98;
  LODWORD(v100) = (v97 >> 31) + 0x7FFFFFFF;
  if (__OFSUB__(v97, (_DWORD)v91))
    v100 = v100;
  else
    v100 = v97 - v91;
  v103 = (_DWORD *)(v88 | (v91 << 32));
  v104 = v99 | (v100 << 32);
  v51 = (const WebCore::LayoutRect *)&v103;
LABEL_55:
  WebCore::Page::addRelevantUnpaintedObject(v52, this, v51);
LABEL_56:
  v53 = v107;
  v107 = 0;
  if (v53)
  {
    if (v53[2] == 1)
      (*(void (**)(_DWORD *))(*(_QWORD *)v53 + 8))(v53);
    else
      --v53[2];
  }
}

uint64_t WebCore::RenderSVGImage::nodeAtPoint(uint64_t a1, const WebCore::RenderLayerModelObject *a2, WebCore::HitTestResult *a3, uint64_t a4, _DWORD *a5, int a6, double a7)
{
  int v11;
  int v12;
  unsigned int v13;
  BOOL v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  int i;
  uint64_t v42;
  void *v44;
  WTF *v45;
  float v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  float v50;
  unsigned int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  float v60;
  float v61;
  unsigned int v62;
  unsigned int v63;
  BOOL v64;
  _BOOL4 v65;
  unsigned int v66;
  _BOOL4 v67;
  float v68;
  float v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  WebCore::ImageOverlay *v73;
  WebCore::Node *v74;
  void *v75;
  _BOOL4 v76;
  _QWORD *v77;
  int v78;
  int v79;
  int v80;
  int v81[2];
  uint64_t v82;
  unint64_t v83;
  int v84;
  int v85;

  if (a6 != 4)
    return 0;
  v12 = *(_DWORD *)(a1 + 152);
  v11 = *(_DWORD *)(a1 + 156);
  v13 = a5[1];
  v14 = __OFADD__(*a5, v12);
  v15 = *a5 + v12;
  if (v14)
    v16 = (*a5 >> 31) + 0x7FFFFFFF;
  else
    v16 = v15;
  v14 = __OFADD__(v13, v11);
  v17 = v13 + v11;
  if (v14)
    v18 = (v13 >> 31) + 0x7FFFFFFF;
  else
    v18 = v17;
  v19 = WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect((WebCore::SVGBoundingBoxComputation *)a1, a2, a7);
  v21 = 0;
  v82 = v20;
  v22 = (v19 >> 31) + 0x7FFFFFFF;
  if (!__OFADD__((_DWORD)v19, v16))
    v22 = v19 + v16;
  v23 = HIDWORD(v19) + v18;
  if (__OFADD__(HIDWORD(v19), v18))
    v23 = (HIDWORD(v19) >> 31) + 0x7FFFFFFF;
  v81[0] = v22;
  v81[1] = v23;
  if ((int)v20 >= 1 && SHIDWORD(v20) >= 1)
  {
    v21 = 0;
    v24 = *(_DWORD *)(a4 + 16);
    if (v24 >= 1)
    {
      v25 = *(_DWORD *)(a4 + 20);
      if (v25 >= 1)
      {
        v26 = *(_DWORD *)(a4 + 8);
        v27 = v26 + v24;
        if (__OFADD__(v26, v24))
          v27 = (v26 >> 31) + 0x7FFFFFFF;
        if ((int)v22 < v27)
        {
          v14 = __OFADD__(v22, (_DWORD)v20);
          v28 = v22 + v20;
          v29 = (v22 >> 31) + 0x7FFFFFFF;
          if (v14)
            v28 = v29;
          if ((int)v26 < v28)
          {
            v30 = *(_DWORD *)(a4 + 12);
            v31 = v30 + v25;
            if (__OFADD__(v30, v25))
              v31 = (v30 >> 31) + 0x7FFFFFFF;
            if (v23 < v31)
            {
              v32 = v23 + HIDWORD(v20);
              if (__OFADD__(v23, HIDWORD(v20)))
                v32 = (v23 >> 31) + 0x7FFFFFFF;
              if ((int)v30 < v32)
              {
                if (*(_BYTE *)(a4 + 65)
                  || WebCore::LayoutRect::contains((WebCore::LayoutRect *)v81, (const WebCore::LayoutRect *)(a4 + 8))
                  || (LODWORD(v83) = WebCore::LayoutRect::operator WebCore::FloatRect(v81),
                      HIDWORD(v83) = v78,
                      v84 = v79,
                      v85 = v80,
                      WebCore::FloatQuad::intersectsRect((WebCore::FloatQuad *)(a4 + 32), (const WebCore::FloatRect *)&v83)))
                {
                  if (_MergedGlobals_257 == 1)
                  {
                    v34 = dword_1ECE84978;
                  }
                  else
                  {
                    v34 = 0;
                    qword_1ECE84970 = 0;
                    *(_QWORD *)&dword_1ECE84978 = 0;
                    _MergedGlobals_257 = 1;
                  }
                  dword_1ECE84978 = v34 + 1;
                  v35 = *(_QWORD *)(a1 + 8);
                  if (v35)
                  {
                    if (*(_QWORD *)(v35 + 8) && qword_1ECE84970)
                    {
                      v36 = *(_DWORD *)(qword_1ECE84970 - 8);
                      v37 = (~(v35 << 32) + v35) ^ ((unint64_t)(~(v35 << 32) + v35) >> 22);
                      v38 = 9 * ((v37 + ~(v37 << 13)) ^ ((v37 + ~(v37 << 13)) >> 8));
                      v39 = (v38 ^ (v38 >> 15)) + ~((v38 ^ (v38 >> 15)) << 27);
                      v40 = v36 & ((v39 >> 31) ^ v39);
                      for (i = 1; ; ++i)
                      {
                        v42 = *(_QWORD *)(qword_1ECE84970 + 8 * v40);
                        if (!v42)
                          break;
                        if (v42 != -1 && v42 == v35)
                          return 0;
                        v40 = (v40 + i) & v36;
                      }
                    }
                  }
                  else
                  {
                    v35 = WTF::fastCompactMalloc((WTF *)0x10);
                    *(_DWORD *)v35 = 1;
                    *(_QWORD *)(v35 + 8) = a1;
                    v45 = *(WTF **)(a1 + 8);
                    *(_QWORD *)(a1 + 8) = v35;
                    if (v45)
                    {
                      if (*(_DWORD *)v45 == 1)
                      {
                        WTF::fastFree(v45, v44);
                        v35 = *(_QWORD *)(a1 + 8);
                        if (!v35)
                        {
LABEL_50:
                          WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderElement>((uint64_t)&qword_1ECE84970, (_QWORD *)a1, (uint64_t)&v83);
                          v46 = floorf(*(float *)(a1 + 168) * 64.0);
                          if (v46 >= 2147500000.0)
                          {
                            v47 = 0x7FFFFFFF;
                          }
                          else if (v46 <= -2147500000.0)
                          {
                            v47 = 0x80000000;
                          }
                          else
                          {
                            v47 = (int)v46;
                          }
                          v49 = *(_DWORD *)a4;
                          v48 = *(_DWORD *)(a4 + 4);
                          v50 = floorf(*(float *)(a1 + 172) * 64.0);
                          if (v50 >= 2147500000.0)
                          {
                            v51 = 0x7FFFFFFF;
                          }
                          else if (v50 <= -2147500000.0)
                          {
                            v51 = 0x80000000;
                          }
                          else
                          {
                            v51 = (int)v50;
                          }
                          v14 = __OFSUB__(v47, v16);
                          v52 = v47 - v16;
                          v53 = (v47 >> 31) + 0x7FFFFFFF;
                          if (!v14)
                            v53 = v52;
                          v14 = __OFSUB__(v51, v18);
                          v54 = v51 - v18;
                          v55 = (v51 >> 31) + 0x7FFFFFFF;
                          if (!v14)
                            v55 = v54;
                          v14 = __OFADD__(v49, v53);
                          v56 = v49 + v53;
                          v57 = (v49 >> 31) + 0x7FFFFFFF;
                          if (v14)
                            v56 = v57;
                          v14 = __OFADD__(v48, v55);
                          v58 = v48 + v55;
                          v59 = (v48 >> 31) + 0x7FFFFFFF;
                          if (!v14)
                            v59 = v58;
                          v60 = (float)v56 * 0.015625;
                          v61 = (float)v59 * 0.015625;
                          *(float *)&v83 = v60;
                          *((float *)&v83 + 1) = v61;
                          if (WebCore::RenderLayerModelObject::pointInSVGClippingArea((WebCore::RenderLayerModelObject *)a1, (const WebCore::FloatPoint *)&v83))
                          {
                            v62 = (*(_DWORD *)(a1 + 124) >> 6) & 0xF;
                            if ((*(_BYTE *)a2 & 0x40) != 0)
                              v62 = 3;
                            v63 = (0x1E2u >> v62) & 1;
                            v64 = v62 > 0xA;
                            v65 = v62 > 0xA || v62 == 0;
                            v66 = v64 ? 0 : v63;
                            v67 = *((_BYTE *)a2 + 4) && (*(_BYTE *)(*(_QWORD *)(a1 + 104) + 239) & 4) != 0
                               || (*(_BYTE *)(a1 + 120) & 0x30) != 0;
                            if (((v65 | v66 & v67) & 1) == 0)
                            {
                              v68 = *(float *)(a1 + 168);
                              if (v68 <= v60 && (float)(v68 + *(float *)(a1 + 176)) >= v60)
                              {
                                v69 = *(float *)(a1 + 172);
                                if (v69 <= v61 && (float)(v69 + *(float *)(a1 + 180)) >= v61)
                                {
                                  v70 = *(_DWORD *)a4 - v16;
                                  if (__OFSUB__(*(_DWORD *)a4, v16))
                                    v70 = (*(_DWORD *)a4 >> 31) + 0x7FFFFFFF;
                                  v71 = *(_DWORD *)(a4 + 4);
                                  v72 = v71 - v18;
                                  if (__OFSUB__(v71, v18))
                                    v72 = (v71 >> 31) + 0x7FFFFFFF;
                                  v83 = v70 | (unint64_t)(v72 << 32);
                                  WebCore::RenderObject::updateHitTestResult((unsigned int *)a1, a3, (const WebCore::LayoutPoint *)&v83);
                                  v73 = (WebCore::ImageOverlay *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 320))(a1);
                                  if (v73)
                                  {
                                    v74 = v73;
                                    *((_DWORD *)v73 + 6) += 2;
                                    v76 = WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::LayoutRect>(a3, v73, (int *)a2, a4, (WebCore::LayoutRect *)v81);
                                    if (*((_DWORD *)v74 + 6) == 2)
                                    {
                                      if ((*((_WORD *)v74 + 15) & 0x400) == 0)
                                        WebCore::Node::removedLastRef(v74, v75);
                                    }
                                    else
                                    {
                                      *((_DWORD *)v74 + 6) -= 2;
                                    }
                                    if (v76)
                                      goto LABEL_90;
                                  }
                                  else if (WebCore::HitTestResult::addNodeToListBasedTestResultCommon<WebCore::LayoutRect>(a3, 0, (int *)a2, a4, (WebCore::LayoutRect *)v81))
                                  {
                                    goto LABEL_90;
                                  }
                                  v21 = 1;
                                  if (!v35)
                                    return v21;
LABEL_91:
                                  v77 = *(_QWORD **)(v35 + 8);
                                  if (v77)
                                    WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderElement>((uint64_t)&qword_1ECE84970, v77);
                                  if (*(_DWORD *)v35 == 1)
                                    WTF::fastFree((WTF *)v35, v77);
                                  else
                                    --*(_DWORD *)v35;
                                  return v21;
                                }
                              }
                            }
                          }
LABEL_90:
                          v21 = 0;
                          if (!v35)
                            return v21;
                          goto LABEL_91;
                        }
                      }
                      else
                      {
                        --*(_DWORD *)v45;
                      }
                    }
                  }
                  ++*(_DWORD *)v35;
                  goto LABEL_50;
                }
              }
            }
          }
        }
        return 0;
      }
    }
  }
  return v21;
}

WTF::StringImpl *WebCore::RenderSVGImage::notifyFinished(WTF::StringImpl *result, WebCore::CachedResource *a2)
{
  uint64_t v2;
  WTF::StringImpl *v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  WebCore::Document *v9;
  WTF::StringImpl *v10;
  void *v11;
  WTF *v12;
  void *v13;

  v2 = *((_QWORD *)result + 3);
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 40) + 8) + 3405))
  {
    v4 = result;
    v5 = *((_DWORD *)result + 5);
    if ((v5 & 0x60000000) != 0)
    {
      v5 = v5 & 0x9FFFFFFF | 0x20000000;
      *((_DWORD *)result + 5) = v5;
    }
    v6 = *(_QWORD *)(*((_QWORD *)result + 23) + 24);
    if (v6)
    {
      v7 = v5 & 0x8000;
      if (*(WebCore::CachedResource **)(v6 + 8) == a2 && v7 != 0)
      {
        WebCore::RenderLayer::contentChanged(*((_QWORD *)result + 18), 0);
        v2 = *((_QWORD *)v4 + 3);
      }
    }
    v9 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(v2 + 8) + 40) + 8);
    v10 = (WTF::StringImpl *)*((_QWORD *)v9 + 90);
    if (!v10)
      v10 = (WTF::StringImpl *)WebCore::Document::ensureCachedResourceLoader(v9, a2);
    ++*(_DWORD *)v10;
    result = WebCore::CachedResourceLoader::notifyFinished(v10, a2);
    if (*(_DWORD *)v10 == 1)
    {
      WebCore::CachedResourceLoader::~CachedResourceLoader(v10, v11);
      return (WTF::StringImpl *)WTF::fastFree(v12, v13);
    }
    else
    {
      --*(_DWORD *)v10;
    }
  }
  return result;
}

void WebCore::RenderSVGImage::imageChanged(WebCore::RenderSVGImage *this, const void *a2, const WebCore::IntRect *a3)
{
  uint64_t v3;
  uint64_t v5;
  const void *v8;
  void *v9;
  int v10;
  WebCore::RenderElement *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  int v44;
  int v45;
  float v46;
  float v47;
  int v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v58;
  int v59;
  unsigned int v60;
  float v61;
  unsigned int v62;
  float v63;
  float v64;
  float v65;
  unsigned int v66;
  float v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  BOOL v75;
  int v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  WebCore::AXObjectCache *v86;
  void *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  WebCore::SVGElement *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE v98[20];
  __int128 v99;
  char v100;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
  if (!*(_BYTE *)(v3 + 3405))
  {
    v5 = *((_QWORD *)this + 4);
    if (v5)
    {
      if (*(_QWORD *)(v5 + 8))
      {
        if ((*(_QWORD *)(*(_QWORD *)(v3 + 680) + 680) & 0x800000000000) != 0)
        {
          v90 = WebCore::lineageOfType<WebCore::RenderSVGResourceContainer>((uint64_t)this);
          if (v90)
          {
            v92 = *(_QWORD *)(*(_QWORD *)(v90 + 24) + 8);
            if ((*(_WORD *)(v92 + 28) & 0x20) == 0)
            {
              __break(0xC471u);
              JUMPOUT(0x19650B31CLL);
            }
            *(_DWORD *)(v92 + 24) += 2;
            WebCore::notifyResourceChanged((WebCore *)v92, v91);
            if (*(_DWORD *)(v92 + 24) == 2)
            {
              if ((*(_WORD *)(v92 + 30) & 0x400) == 0)
                WebCore::Node::removedLastRef((WebCore::Node *)v92, v93);
            }
            else
            {
              *(_DWORD *)(v92 + 24) -= 2;
            }
          }
        }
        v8 = (const void *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 23) + 72))(*((_QWORD *)this + 23));
        if (a2)
        {
          if (v8 == a2)
          {
            *((_QWORD *)this + 21) = 0;
            *((_QWORD *)this + 22) = 0;
            if (WebCore::RenderSVGImage::updateImageViewport(this))
            {
              v10 = *((_DWORD *)this + 5);
              if ((v10 & 8) == 0)
              {
                *((_DWORD *)this + 5) = v10 | 8;
                v11 = WebCore::RenderObject::markContainingBlocksForLayout(this, 0);
                WebCore::RenderObject::scheduleLayout(this, v11);
                if ((*((_BYTE *)this + 21) & 0x80) != 0)
                {
                  if ((*((_BYTE *)this + 45) & 0x10) == 0)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19650B1D4);
                  }
                  v12 = *((_QWORD *)this + 18);
                  if (v12)
                  {
                    v13 = *(_DWORD *)(v12 + 8) + 1;
                    *(_DWORD *)(v12 + 8) = v13;
                  }
                  else
                  {
                    v13 = MEMORY[8];
                  }
                  *(_QWORD *)(v12 + 24) = *(_QWORD *)(v12 + 24) & 0xFFFFFFFFFFFCFFFFLL | 0x10000;
                  if (!v13)
                  {
                    __break(0xC471u);
                    JUMPOUT(0x19650B200);
                  }
                  *(_DWORD *)(v12 + 8) = v13 - 1;
                }
              }
            }
            v14 = *((_QWORD *)this + 24);
            *((_QWORD *)this + 24) = 0;
            if (!v14)
              goto LABEL_33;
            v15 = *(_QWORD *)(v14 + 8);
            if (__ldaxr((unsigned __int8 *)v15))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v15))
            {
              goto LABEL_21;
            }
            MEMORY[0x19AEA534C](v15);
LABEL_21:
            v17 = *(_QWORD *)(v15 + 8);
            v18 = v17 - 1;
            *(_QWORD *)(v15 + 8) = v17 - 1;
            if (v17 == 1)
            {
              v89 = *(_QWORD *)(v15 + 16);
              v19 = *(_QWORD *)(v15 + 24);
              *(_QWORD *)(v15 + 24) = 0;
              v20 = v89 != 0;
            }
            else
            {
              v19 = 0;
              v20 = 1;
            }
            v21 = __ldxr((unsigned __int8 *)v15);
            if (v21 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v15))
              {
LABEL_28:
                if (!v18)
                {
                  if (v19)
                    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
                  if (!v20)
                    WTF::fastFree((WTF *)v15, v9);
                }
LABEL_33:
                v22 = (float)*((int *)this + 40) * 0.015625;
                v23 = (float)*((int *)this + 41) * 0.015625;
                if (a3)
                {
                  v25 = *(_QWORD *)a3;
                  v24 = *((_QWORD *)a3 + 1);
                  v26 = (*(uint64_t (**)(_QWORD, _QWORD, float))(**((_QWORD **)this + 23) + 80))(*((_QWORD *)this + 23), 0, 1.0);
                  v27 = (float)(int)v26 * 0.015625;
                  v28 = 0.0;
                  if (v27 == 0.0)
                  {
                    v30 = 0.0;
                    v31 = 0.0;
                    v32 = 0.0;
                  }
                  else
                  {
                    v29 = (float)SHIDWORD(v26) * 0.015625;
                    v30 = 0.0;
                    v31 = 0.0;
                    v32 = 0.0;
                    if (v29 != 0.0)
                    {
                      v33 = v22 / v27;
                      v34 = v23 / v29;
                      v28 = (float)((float)(int)v25 * v33) + 0.0;
                      v30 = (float)((float)SHIDWORD(v25) * v34) + 0.0;
                      v31 = v33 * (float)(int)v24;
                      v32 = v34 * (float)SHIDWORD(v24);
                    }
                  }
                  v35 = floorf(v28);
                  v36 = 2147500000.0;
                  if (v35 < 2147500000.0)
                  {
                    v36 = -2147500000.0;
                    if (v35 > -2147500000.0)
                      v36 = (float)(int)v35;
                  }
                  v37 = floorf(v30);
                  v38 = 2147500000.0;
                  if (v37 < 2147500000.0)
                  {
                    v38 = -2147500000.0;
                    if (v37 > -2147500000.0)
                      v38 = (float)(int)v37;
                  }
                  v39 = v30 + v32;
                  v40 = ceilf(v28 + v31);
                  v41 = 2147500000.0;
                  if (v40 < 2147500000.0)
                  {
                    v41 = -2147500000.0;
                    if (v40 > -2147500000.0)
                      v41 = (float)(int)v40;
                  }
                  v42 = ceilf(v39);
                  v43 = 2147500000.0;
                  if (v42 < 2147500000.0)
                  {
                    v43 = -2147500000.0;
                    if (v42 > -2147500000.0)
                      v43 = (float)(int)v42;
                  }
                  if (v36 >= 2147500000.0)
                  {
                    v44 = 0x7FFFFFFF;
                  }
                  else if (v36 <= -2147500000.0)
                  {
                    v44 = 0x80000000;
                  }
                  else
                  {
                    v44 = (int)v36;
                  }
                  if (v38 >= 2147500000.0)
                  {
                    v45 = 0x7FFFFFFF;
                  }
                  else if (v38 <= -2147500000.0)
                  {
                    v45 = 0x80000000;
                  }
                  else
                  {
                    v45 = (int)v38;
                  }
                  v46 = v41 - v36;
                  v47 = v43 - v38;
                  if (v46 >= 2147500000.0)
                  {
                    v48 = 0x7FFFFFFF;
                  }
                  else if (v46 <= -2147500000.0)
                  {
                    v48 = 0x80000000;
                  }
                  else
                  {
                    v48 = (int)v46;
                  }
                  v49 = -2147500000.0;
                  if (v47 > -2147500000.0)
                    v49 = (float)(int)v47;
                  v50 = (float)v44;
                  if (v47 < 2147500000.0)
                    v51 = v49;
                  else
                    v51 = 2147500000.0;
                  v52 = fmaxf(v50, 0.0);
                  v53 = fmaxf((float)v45, 0.0);
                  v54 = v50 + (float)v48;
                  if (v54 >= (float)(v22 + 0.0))
                    v54 = v22 + 0.0;
                  v55 = v23 + 0.0;
                  v56 = v51 + (float)v45;
                  if (v56 < (float)(v23 + 0.0))
                    v55 = v56;
                  if (v52 >= v54 || v53 >= v55)
                  {
                    v52 = 0.0;
                    v53 = 0.0;
                    v54 = 0.0;
                    v55 = 0.0;
                  }
                  v22 = v54 - v52;
                  v23 = v55 - v53;
                }
                else
                {
                  v52 = 0.0;
                  v53 = 0.0;
                }
                v58 = floorf(v52 * 64.0);
                if (v58 > -2147500000.0)
                  v59 = (int)v58;
                else
                  v59 = 0x80000000;
                if (v58 < 2147500000.0)
                  v60 = v59;
                else
                  v60 = 0x7FFFFFFF;
                v61 = floorf(v53 * 64.0);
                if (v61 >= 2147500000.0)
                {
                  v62 = 0x7FFFFFFF;
                }
                else if (v61 <= -2147500000.0)
                {
                  v62 = 0x80000000;
                }
                else
                {
                  v62 = (int)v61;
                }
                v63 = v52 + v22;
                v64 = v53 + v23;
                v65 = ceilf(v63 * 64.0);
                if (v65 >= 2147500000.0)
                {
                  v66 = 0x7FFFFFFF;
                }
                else if (v65 > -2147500000.0)
                {
                  v66 = (int)v65;
                }
                else
                {
                  v66 = 0x80000000;
                }
                v67 = ceilf(v64 * 64.0);
                if (v67 >= 2147500000.0)
                {
                  v68 = 0x7FFFFFFF;
                }
                else
                {
                  v68 = (int)v67;
                  if (v67 <= -2147500000.0)
                    v68 = 0x80000000;
                }
                v69 = v66 - v60;
                if (__OFSUB__(v66, v60))
                  v69 = (v66 >> 31) + 0x7FFFFFFF;
                v70 = v68 - v62;
                if (__OFSUB__(v68, v62))
                  v70 = (v68 >> 31) + 0x7FFFFFFF;
                v71 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                + 1944);
                if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v71 + 24) + 8) + 40) + 8) + 3382))
                {
                  v72 = *(_QWORD *)(v71 + 248);
                  v73 = *(unsigned int *)(v72 + 508);
                  if ((_DWORD)v73 && (v73 = *(_QWORD *)(*(_QWORD *)(v72 + 496) + 8 * v73 - 8)) != 0)
                  {
                    v74 = *(_DWORD *)(v73 + 64);
                    LODWORD(v73) = *(_DWORD *)(v73 + 68);
                  }
                  else
                  {
                    v74 = 0;
                  }
                  v75 = __OFADD__(v60, v74);
                  v76 = v60 + v74;
                  if (v75)
                    v76 = (v60 >> 31) + 0x7FFFFFFF;
                  v77 = v69 | (unint64_t)(v70 << 32);
                  v78 = v62 + v73;
                  if (__OFADD__(v62, (_DWORD)v73))
                    v78 = (v62 >> 31) + 0x7FFFFFFF;
                  *(_QWORD *)&v99 = __PAIR64__(v78, v76);
                  *((_QWORD *)&v99 + 1) = v77;
                  v100 = 1;
                  v98[0] = 0;
                  v98[16] = 0;
                  WebCore::RenderObject::issueRepaint((uint64_t)this, &v99, 1, 0, (uint64_t)v98);
                }
                if ((*((_BYTE *)this + 21) & 0x80) != 0)
                  WebCore::RenderLayer::contentChanged(*((_QWORD *)this + 18), 0);
                if (WebCore::Document::hasEverCreatedAnAXObjectCache)
                {
                  v79 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
                  v80 = *(_QWORD *)(*(_QWORD *)(v79 + 40) + 8);
                  if (*(_BYTE *)(v80 + 3362) || *(_BYTE *)(v80 + 3405))
                  {
                    while (1)
                    {
                      v94 = *(_QWORD *)(v80 + 528);
                      if (!v94)
                        break;
                      v95 = *(_QWORD *)(v94 + 8);
                      if (!v95)
                        break;
                      v96 = *(_QWORD *)(v95 + 120);
                      if (!v96)
                        break;
                      v97 = *(_QWORD *)(v96 + 8);
                      if (!v97)
                        break;
                      v80 = *(_QWORD *)(*(_QWORD *)(v97 + 40) + 8);
                    }
                  }
                  else
                  {
                    v81 = *(_QWORD *)(v80 + 528);
                    if (v81)
                    {
                      v82 = *(_QWORD *)(v81 + 8);
                      if (v82)
                      {
                        v83 = *(_QWORD *)(*(_QWORD *)(v82 + 128) + 8);
                        if (v83 && *(_BYTE *)(v83 + 144) == 0)
                        {
                          v85 = *(_QWORD *)(v83 + 296);
                          if (v85)
                            v80 = v85;
                        }
                      }
                    }
                  }
                  v86 = *(WebCore::AXObjectCache **)(v80 + 1488);
                  if (v86)
                  {
                    ++*((_DWORD *)v86 + 2);
                    if ((*(_WORD *)(v79 + 28) & 0x20) == 0)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19650B368);
                    }
                    if (*(_QWORD *)(*(_QWORD *)(v79 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::imageTag + 24))
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19650B388);
                    }
                    *(_DWORD *)(v79 + 24) += 2;
                    WebCore::AXObjectCache::deferRecomputeIsIgnoredIfNeeded(v86, (WebCore::Element *)v79);
                    if (*(_DWORD *)(v79 + 24) == 2)
                    {
                      if ((*(_WORD *)(v79 + 30) & 0x400) == 0)
                        WebCore::Node::removedLastRef((WebCore::Node *)v79, v87);
                    }
                    else
                    {
                      *(_DWORD *)(v79 + 24) -= 2;
                    }
                    v88 = *((_DWORD *)v86 + 2);
                    if (!v88)
                    {
                      __break(0xC471u);
                      JUMPOUT(0x19650B3A8);
                    }
                    *((_DWORD *)v86 + 2) = v88 - 1;
                  }
                }
                return;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v15);
            goto LABEL_28;
          }
        }
      }
    }
  }
}

BOOL WebCore::RenderSVGImage::needsHasSVGTransformFlags(WebCore::RenderSVGImage *this)
{
  uint64_t v1;
  void *v2;
  _BOOL8 hasTransformRelatedAttributes;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::imageTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19650B458);
  }
  *(_DWORD *)(v1 + 24) += 2;
  hasTransformRelatedAttributes = WebCore::SVGGraphicsElement::hasTransformRelatedAttributes((WebCore::SVGGraphicsElement *)v1);
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1, v2);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  return hasTransformRelatedAttributes;
}

BOOL WebCore::SVGGraphicsElement::hasTransformRelatedAttributes(WebCore::SVGGraphicsElement *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;

  v1 = (_QWORD *)*((_QWORD *)this + 26);
  v2 = v1[3];
  if (v2 && *(_DWORD *)(v2 - 12))
  {
    v30 = *(unsigned int *)(v2 - 4);
    if ((_DWORD)v30)
    {
      v31 = 8 * v30;
      v32 = (uint64_t *)v1[3];
      while ((unint64_t)(*v32 + 1) <= 1)
      {
        ++v32;
        v31 -= 8;
        if (!v31)
          goto LABEL_2;
      }
    }
    else
    {
      v32 = (uint64_t *)v1[3];
    }
    v33 = (uint64_t *)(v2 + 8 * v30);
    if (v32 != v33)
    {
      v34 = *v32;
LABEL_17:
      if (*(_QWORD *)(v34 + 8))
      {
        v3 = v1 + 6;
        goto LABEL_3;
      }
      while (++v32 != v33)
      {
        v34 = *v32;
        if ((unint64_t)(*v32 + 1) > 1)
        {
          if (v32 != v33)
            goto LABEL_17;
          break;
        }
      }
    }
  }
LABEL_2:
  v3 = v1 + 5;
LABEL_3:
  v4 = *v3;
  v5 = *(unsigned int *)(v4 + 44);
  if (!(_DWORD)v5)
    return *((_QWORD *)this + 24) != 0;
  v6 = *(uint64_t **)(v4 + 32);
  v7 = 8 * v5;
  v8 = 1.0;
  v9 = 0.0;
  v10 = 0.0;
  v11 = 0.0;
  v12 = 0.0;
  v13 = 1.0;
  do
  {
    v14 = *v6++;
    v15 = *(double **)(v14 + 40);
    v16 = v15[4];
    v17 = v15[5];
    v18 = v12 * v17;
    v19 = v15[6];
    v20 = v15[7];
    v21 = v15[8];
    v22 = v15[9];
    v23 = v12 * v22;
    v12 = v12 * v20 + v19 * v13;
    v24 = v23 + v21 * v13;
    v13 = v18 + v16 * v13;
    v25 = v8 * v17;
    v26 = v8 * v20;
    v27 = v8 * v22;
    v8 = v26 + v19 * v11;
    v28 = v27 + v21 * v11;
    v11 = v25 + v16 * v11;
    v10 = v10 + v24;
    v9 = v9 + v28;
    v7 -= 8;
  }
  while (v7);
  return v13 != 1.0 || v11 != 0.0 || v12 != 0.0 || v8 != 1.0 || v10 != 0.0 || v9 != 0.0 || *((_QWORD *)this + 24) != 0;
}

void WebCore::RenderSVGImage::applyTransform(WebCore::MotionPath *a1, float64x2_t *a2, WebCore::RenderStyle *a3, const WebCore::FloatRect *a4, char a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9)
{
  uint64_t v9;
  void *v10;
  _BYTE v11[56];
  _BYTE v12[56];

  v9 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 8);
  if ((*(_WORD *)(v9 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::imageTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19650B6ACLL);
  }
  *(_DWORD *)(v9 + 24) += 2;
  v12[0] = 0;
  v12[48] = 0;
  v11[0] = 0;
  v11[48] = 0;
  WebCore::RenderLayerModelObject::applySVGTransform(a1, a2, (_QWORD *)v9, a3, a4, (uint64_t)v12, (uint64_t)v11, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v9, v10);
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
}

void WebCore::RenderSVGInline::~RenderSVGInline(WebCore::RenderLayerModelObject *this, void *a2)
{
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

void WebCore::RenderSVGInline::~RenderSVGInline(WebCore::RenderSVGInline *this, void *a2)
{
  uint64_t v2;
  void *v3;

  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*(_DWORD *)(v2 + 16))
  {
    *(_QWORD *)(v2 + 160) = 0;
    *(_OWORD *)(v2 + 128) = 0u;
    *(_OWORD *)(v2 + 144) = 0u;
    *(_OWORD *)(v2 + 96) = 0u;
    *(_OWORD *)(v2 + 112) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate((bmalloc::api *)v2, v3);
  }
}

double WebCore::RenderSVGInline::createInlineFlowBox@<D0>(WebCore::RenderSVGInline *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  double result;
  void *v8;
  WTF *v9;

  v4 = bmalloc::api::isoAllocate();
  *(_QWORD *)v4 = off_1E341E8B8;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  v5 = *((_QWORD *)this + 1);
  if (!v5)
  {
    v5 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v5 = 1;
    *(_QWORD *)(v5 + 8) = this;
    v9 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v5;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
      {
        WTF::fastFree(v9, v8);
        v5 = *((_QWORD *)this + 1);
        if (!v5)
          goto LABEL_3;
      }
      else
      {
        --*(_DWORD *)v9;
      }
    }
  }
  ++*(_DWORD *)v5;
LABEL_3:
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 48) = 0;
  v6 = (*(unsigned __int16 *)(v4 + 52) | (*(unsigned __int8 *)(v4 + 54) << 16)) & 0xFE5000;
  *(_DWORD *)(v4 + 56) &= 0xFFFBFFF8;
  result = 0.0;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 96) = 0;
  *(_QWORD *)v4 = off_1E3449F20;
  *(_DWORD *)(v4 + 104) = 0;
  *(_WORD *)(v4 + 52) = v6 | 0x2C00;
  *(_BYTE *)(v4 + 54) = BYTE2(v6);
  *a2 = v4;
  return result;
}

uint64_t WebCore::RenderSVGInline::objectBoundingBox(uint64_t this)
{
  uint64_t i;

  if (*(_BYTE *)(this + 46) != 85)
  {
    for (i = *(_QWORD *)(this + 32); i; i = *(_QWORD *)(this + 32))
    {
      this = *(_QWORD *)(i + 8);
      if (!this)
        break;
      if (*(_BYTE *)(this + 46) == 85)
        break;
    }
  }
  return this;
}

_QWORD *WebCore::RenderSVGInline::strokeBoundingBox(_QWORD *this)
{
  uint64_t i;

  if (*((_BYTE *)this + 46) == 85)
    return WebCore::RenderSVGText::strokeBoundingBox(this);
  for (i = this[4]; i; i = this[4])
  {
    this = *(_QWORD **)(i + 8);
    if (!this)
      break;
    if (*((_BYTE *)this + 46) == 85)
      return WebCore::RenderSVGText::strokeBoundingBox(this);
  }
  return this;
}

void WebCore::RenderSVGInline::repaintRectInLocalCoordinates(uint64_t a1, const WebCore::RenderLayerModelObject *a2, double a3)
{
  uint64_t v3;

  if (*(_BYTE *)(a1 + 46) == 85)
  {
LABEL_2:
    WebCore::RenderSVGText::repaintRectInLocalCoordinates((WebCore::RenderSVGText *)a1, a2, a3);
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 32);
    for (LODWORD(a3) = 0; v3; v3 = *(_QWORD *)(a1 + 32))
    {
      a1 = *(_QWORD *)(v3 + 8);
      if (!a1)
        break;
      if (*(_BYTE *)(a1 + 46) == 85)
        goto LABEL_2;
    }
  }
}

WebCore::RenderObject *WebCore::RenderSVGInline::clippedOverflowRect(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0)
    return WebCore::RenderInline::clippedOverflowRect((WebCore::RenderInline *)a1, (WebCore::RenderObject *)a2, a3);
  else
    return (WebCore::RenderObject *)WebCore::SVGRenderSupport::clippedOverflowRectForRepaint(a1, a2, a3);
}

uint64_t WebCore::RenderSVGInline::rectsForRepaintingAfterLayout@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[3] + 8) + 40) + 8) + 680) + 680) & 0x800000000000) != 0)
  {
    result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 440))(a1, a2, 0xC00000000);
    *(_QWORD *)a4 = result;
    *(_QWORD *)(a4 + 8) = v11;
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 32) = 0;
  }
  else
  {
    result = WebCore::SVGRenderSupport::clippedOverflowRectForRepaint((uint64_t)a1, a2, 0xC00000000uLL);
    *(_QWORD *)a4 = result;
    *(_QWORD *)(a4 + 8) = v9;
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 32) = 0;
    if (a3)
    {
      result = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 456))(a1, a2, 0);
      *(_QWORD *)(a4 + 16) = result;
      *(_QWORD *)(a4 + 24) = v10;
      *(_BYTE *)(a4 + 32) = 1;
    }
  }
  return result;
}

_QWORD *WebCore::RenderSVGInline::computeFloatVisibleRectInContainer@<X0>(_QWORD *result@<X0>, __n128 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _BYTE *a5@<X8>)
{
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result[3] + 8) + 40) + 8) + 680) + 680) & 0x800000000000) == 0)
    return WebCore::SVGRenderSupport::computeFloatVisibleRectInContainer(result, a2, a3, a4, (uint64_t)a5);
  *a5 = 0;
  a5[16] = 0;
  return result;
}

void WebCore::RenderSVGInline::mapLocalToContainer(WebCore::RenderObject *a1, WebCore::RenderLayerModelObject *a2, double **a3, unsigned int a4, WebCore::TransformState *a5)
{
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0)
    WebCore::RenderInline::mapLocalToContainer(a1, a2, a3, a4, (uint64_t)a5);
  else
    WebCore::SVGRenderSupport::mapLocalToContainer(a1, a2, (float64x2_t **)a3, a5, (BOOL *)a5);
}

WebCore::RenderElement *WebCore::RenderSVGInline::pushMappingToContainer(WebCore::RenderSVGInline *this, const WebCore::RenderLayerModelObject *a2, WebCore::RenderGeometryMap *a3)
{
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0)
    return WebCore::RenderInline::pushMappingToContainer(this, a2, a3);
  v16 = constinit_10;
  v17 = unk_1969FE138;
  v18 = xmmword_1969FE148;
  v5 = WebCore::SVGRenderSupport::localToParentTransform(this, (const WebCore::RenderElement *)&v16, a3);
  v7 = v16;
  v8 = 0;
  v9 = 0;
  v10 = v17;
  v11 = 0u;
  v12 = 0u;
  v13 = xmmword_1968A14B0;
  v14 = v18;
  v15 = xmmword_1968A14C0;
  WebCore::RenderGeometryMap::push(a3, this, (const WebCore::TransformationMatrix *)&v7, 0, 0, 0, 0);
  return (WebCore::RenderElement *)v5;
}

uint64_t WebCore::RenderSVGInline::absoluteQuads(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  WTF::StringImpl *v5;
  float v6;
  float v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  uint64_t i;
  float v20[8];
  _OWORD v21[2];

  v4 = result;
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 8) + 40) + 8)
                              + 680)
                  + 680) & 0x800000000000) != 0)
    return WebCore::RenderInline::absoluteQuads((WebCore::RenderBoxModelObject *)result, a2, a3);
  if (*(_BYTE *)(result + 46) == 85)
  {
LABEL_3:
    result = (uint64_t)WebCore::RenderSVGText::strokeBoundingBox((_QWORD *)result);
    v8 = *(_QWORD *)(v4 + 152);
    if (v8)
    {
      v9 = v6;
      v10 = v7;
      do
      {
        v11 = *(float *)(v8 + 40);
        v12 = v9 + *(float *)(v8 + 44);
        v13 = v10 + *(float *)(v8 + 48);
        v14 = WebCore::LegacyInlineBox::logicalHeight((WebCore::LegacyInlineBox *)v8, v5);
        v20[0] = v12;
        v20[1] = v13;
        v20[2] = v12 + v11;
        v20[3] = v13;
        v20[4] = v12 + v11;
        v20[5] = v13 + v14;
        v20[6] = v12;
        v20[7] = v13 + v14;
        result = (uint64_t)WebCore::RenderObject::localToContainerQuad(v4, v20, 0, 2u, v21);
        v15 = *(unsigned int *)(a2 + 12);
        if ((_DWORD)v15 == *(_DWORD *)(a2 + 8))
        {
          result = WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v15 + 1, (unint64_t)v21);
          v16 = (_OWORD *)(*(_QWORD *)a2 + 32 * *(unsigned int *)(a2 + 12));
          v17 = *(_OWORD *)result;
          v18 = *(_OWORD *)(result + 16);
        }
        else
        {
          v16 = (_OWORD *)(*(_QWORD *)a2 + 32 * v15);
          v17 = v21[0];
          v18 = v21[1];
        }
        *v16 = v17;
        v16[1] = v18;
        ++*(_DWORD *)(a2 + 12);
        v8 = *(_QWORD *)(v8 + 96);
      }
      while (v8);
    }
  }
  else
  {
    for (i = *(_QWORD *)(result + 32); i; i = *(_QWORD *)(result + 32))
    {
      result = *(_QWORD *)(i + 8);
      if (!result)
        break;
      if (*(_BYTE *)(result + 46) == 85)
        goto LABEL_3;
    }
  }
  return result;
}

void WebCore::RenderSVGInline::willBeDestroyed(WebCore::RenderSVGInline *this, const WebCore::RenderElement *a2)
{
  WebCore::RenderInline *v2;
  _QWORD *v3;
  const WebCore::RenderElement *v4;
  WebCore::RenderElement **v5;

  v2 = this;
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) == 0
    && (*(_WORD *)((_BYTE *)this + 69) & 0x1000) != 0)
  {
    v3 = (_QWORD *)WebCore::SVGResourcesCache::cachedResourcesForRenderer(this, a2);
    v2 = this;
    if (v3)
    {
      WebCore::SVGResources::removeClientFromCache(v3, this, 1);
      v5 = (WebCore::RenderElement **)WebCore::resourcesCacheFromRenderer(*(WebCore **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8), v4);
      WebCore::SVGResourcesCache::removeResourcesFromRenderer(v5, this);
      v2 = this;
    }
  }
  WebCore::RenderInline::willBeDestroyed(v2, a2);
}

void WebCore::RenderSVGInline::styleDidChange(WebCore::RenderObject *this, WTF::StringImpl *a2, const WebCore::RenderStyle *a3)
{
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0)
  {
    WebCore::RenderInline::styleDidChange((uint64_t)this, a2, a3);
  }
  else
  {
    if ((_DWORD)a2 == 8)
      WebCore::RenderObject::invalidateCachedBoundaries((uint64_t)this);
    WebCore::RenderInline::styleDidChange((uint64_t)this, a2, a3);
    WebCore::SVGResourcesCache::clientStyleChanged((uint64_t)this, a2, a3, (WebCore::RenderObject *)((char *)this + 80));
  }
}

uint64_t WebCore::RenderSVGInline::needsHasSVGTransformFlags(WebCore::RenderSVGInline *this)
{
  _WORD *v1;

  v1 = *(_WORD **)(*((_QWORD *)this + 3) + 8);
  if ((v1[14] & 0x20) == 0
    || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 1184))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19650BE34);
  }
  return (*(uint64_t (**)(_WORD *))(*(_QWORD *)v1 + 1352))(v1);
}

_BYTE *WebCore::RenderSVGInline::updateFromStyle(WebCore::RenderSVGInline *this)
{
  _BYTE *result;
  void *v3;
  int v4;

  result = WebCore::RenderBoxModelObject::updateFromStyle(this);
  v4 = *((_DWORD *)this + 5);
  *((_DWORD *)this + 5) = v4 & 0xFFFDFFFF;
  if ((v4 & 0x4000) != 0)
  {
    result = WebCore::RenderObject::ensureRareData(this, v3);
    *result = 0;
  }
  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0)
    result = (_BYTE *)WebCore::RenderLayerModelObject::updateHasSVGTransformFlags(this);
  *((_DWORD *)this + 5) &= ~1u;
  return result;
}

WTF::StringImpl **WebCore::applySVGWhitespaceRules(WTF::StringImpl **this, const WTF::String *a2, int a3)
{
  WTF::StringImpl **v3;
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF::StringImpl *v8;
  WTF::StringImpl *v9;
  WTF::StringImpl *v10;

  v3 = this;
  if (!a2)
    goto LABEL_20;
  *(_DWORD *)a2 += 2;
  if (!a3)
  {
    this = (WTF::StringImpl **)WTF::StringImpl::replace();
    if (*(_DWORD *)a2 == 2)
      this = (WTF::StringImpl **)WTF::StringImpl::destroy(a2, v5);
    else
      *(_DWORD *)a2 -= 2;
    if (v10)
    {
      WTF::StringImpl::replace();
      v7 = v10;
      if (*(_DWORD *)v10 != 2)
      {
        *(_DWORD *)v10 -= 2;
        goto LABEL_8;
      }
      goto LABEL_17;
    }
LABEL_20:
    *v3 = 0;
    return this;
  }
  this = (WTF::StringImpl **)WTF::StringImpl::replace();
  if (*(_DWORD *)a2 == 2)
    this = (WTF::StringImpl **)WTF::StringImpl::destroy(a2, v9);
  else
    *(_DWORD *)a2 -= 2;
  if (!v10)
    goto LABEL_20;
  WTF::StringImpl::replace();
  v7 = v10;
  if (*(_DWORD *)v10 != 2)
  {
    *(_DWORD *)v10 -= 2;
    goto LABEL_8;
  }
LABEL_17:
  WTF::StringImpl::destroy(v10, v6);
LABEL_8:
  this = (WTF::StringImpl **)WTF::StringImpl::replace();
  *v3 = v10;
  if (*(_DWORD *)v7 == 2)
    return (WTF::StringImpl **)WTF::StringImpl::destroy(v7, v8);
  *(_DWORD *)v7 -= 2;
  return this;
}

WebCore::RenderSVGInlineText *WebCore::RenderSVGInlineText::RenderSVGInlineText(WebCore::RenderSVGInlineText *this, WebCore::Text *a2, const WTF::String **a3)
{
  WTF::StringImpl *v5;
  WTF::StringImpl *v6;
  _DWORD *v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  void *v12;
  WTF *v13;
  WTF::StringImpl *v14;

  WebCore::applySVGWhitespaceRules(&v14, *a3, 0);
  WebCore::RenderText::RenderText((uint64_t)this, 72, (uint64_t)a2, (uint64_t *)&v14);
  v6 = v14;
  v14 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 2)
      WTF::StringImpl::destroy(v6, v5);
    else
      *(_DWORD *)v6 -= 2;
  }
  *(_QWORD *)this = off_1E3444BE0;
  *((_DWORD *)this + 30) = 1065353216;
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 34) = 0;
  *((_QWORD *)this + 30) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_BYTE *)this + 241) = 1;
  *((_BYTE *)this + 248) = 0;
  v7 = (_DWORD *)*MEMORY[0x1E0CBF2F8];
  if (*MEMORY[0x1E0CBF2F8])
    *v7 += 2;
  *((_QWORD *)this + 32) = v7;
  *((_WORD *)this + 132) = 0;
  *((_DWORD *)this + 67) = 2143289344;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 26216000;
  *((_WORD *)this + 148) = 257;
  *((_DWORD *)this + 75) = 0;
  *((_DWORD *)this + 76) = *((_DWORD *)this + 76) & 0x80000000 | 0xE000;
  v8 = *((_BYTE *)this + 310);
  *((_WORD *)this + 154) = 0;
  *((_BYTE *)this + 310) = v8 & 0xFC;
  v9 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
  *v9 = 0x100000001;
  v9[1] = 0;
  *((_QWORD *)this + 39) = v9;
  *((_DWORD *)this + 80) = 0;
  *((_WORD *)this + 162) &= 0xFC00u;
  *((_DWORD *)this + 82) = 0;
  *((_WORD *)this + 166) = 4;
  *((_BYTE *)this + 334) = 0;
  *((_DWORD *)this + 84) = 0;
  *((_WORD *)this + 170) = 4;
  *((_BYTE *)this + 342) = 0;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *((_QWORD *)this + 43) = 0;
  *(_QWORD *)((char *)this + 351) = 0;
  v10 = *((_QWORD *)this + 1);
  if (!v10)
  {
    v10 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v10 = 1;
    *(_QWORD *)(v10 + 8) = this;
    v13 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v10;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
      {
        WTF::fastFree(v13, v12);
        v10 = *((_QWORD *)this + 1);
      }
      else
      {
        --*(_DWORD *)v13;
      }
    }
  }
  ++*(_DWORD *)v10;
  *((_QWORD *)this + 53) = v10;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 56) = 0;
  return this;
}

void WebCore::RenderSVGInlineText::~RenderSVGInlineText(WebCore::RenderSVGInlineText *this, WTF::StringImpl *a2)
{
  void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;

  WebCore::SVGTextLayoutAttributes::~SVGTextLayoutAttributes((WebCore::RenderSVGInlineText *)((char *)this + 424), a2);
  WebCore::FontCascade::~FontCascade((WebCore::RenderSVGInlineText *)((char *)this + 128), v3);
  *(_QWORD *)this = off_1E3434D90;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::RenderObject::~RenderObject(this, v4);
}

{
  void *v3;
  WTF::StringImpl *v4;
  WTF::StringImpl *v5;
  void *v6;

  WebCore::SVGTextLayoutAttributes::~SVGTextLayoutAttributes((WebCore::RenderSVGInlineText *)((char *)this + 424), a2);
  WebCore::FontCascade::~FontCascade((WebCore::RenderSVGInlineText *)((char *)this + 128), v3);
  *(_QWORD *)this = off_1E3434D90;
  v5 = (WTF::StringImpl *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v5)
  {
    if (*(_DWORD *)v5 == 2)
      WTF::StringImpl::destroy(v5, v4);
    else
      *(_DWORD *)v5 -= 2;
  }
  WebCore::RenderObject::~RenderObject(this, v4);
  if (*((_DWORD *)this + 4))
  {
    *((_QWORD *)this + 56) = 0;
    *((_OWORD *)this + 26) = 0u;
    *((_OWORD *)this + 27) = 0u;
    *((_OWORD *)this + 24) = 0u;
    *((_OWORD *)this + 25) = 0u;
    *((_OWORD *)this + 22) = 0u;
    *((_OWORD *)this + 23) = 0u;
    *((_OWORD *)this + 20) = 0u;
    *((_OWORD *)this + 21) = 0u;
    *((_OWORD *)this + 18) = 0u;
    *((_OWORD *)this + 19) = 0u;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 17) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v6);
  }
}

uint64_t WebCore::RenderSVGInlineText::originalText@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _DWORD *v3;

  v2 = *(_QWORD *)(*(_QWORD *)(this + 24) + 8);
  if ((*(_WORD *)(v2 + 28) & 2) != 0)
  {
    v3 = *(_DWORD **)(v2 + 80);
    if (v3)
      *v3 += 2;
    *a2 = v3;
  }
  else
  {
    this = 96;
    __break(0xC471u);
  }
  return this;
}

void WebCore::RenderSVGInlineText::setRenderedText(WebCore::RenderSVGInlineText *this, WTF::StringImpl **a2)
{
  WebCore::RenderSVGInlineText *v3;
  uint64_t i;

  WebCore::RenderText::setRenderedText(this, a2);
  v3 = this;
  if (*((_BYTE *)this + 46) == 85)
  {
LABEL_5:
    WebCore::RenderSVGText::subtreeTextDidChange(v3, this);
  }
  else
  {
    for (i = *((_QWORD *)this + 4); i; i = *((_QWORD *)v3 + 4))
    {
      v3 = *(WebCore::RenderSVGInlineText **)(i + 8);
      if (!v3)
        break;
      if (*((_BYTE *)v3 + 46) == 85)
        goto LABEL_5;
    }
  }
}

void WebCore::RenderSVGInlineText::styleDidChange(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  WebCore::FontCascade *v6;
  uint64_t v7;
  WebCore::RenderObject *v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  WTF::StringImpl *v12;
  const WTF::String *v13;
  int v14;
  WTF::StringImpl *v15;
  WTF::StringImpl *v16;
  WebCore::RenderObject *RenderSVGTextAncestor;
  WTF::StringImpl *v19;
  WTF::StringImpl *v20;

  v4 = a2;
  WebCore::RenderText::styleDidChange((WebCore::RenderObject *)a1, a2, a3);
  v7 = *(_QWORD *)(a1 + 32);
  if (v7)
    v7 = *(_QWORD *)(v7 + 8);
  if (WebCore::RenderSVGInlineText::computeNewScaledFontForStyle((WebCore::RenderSVGInlineText *)a1, (const WebCore::RenderObject *)(v7 + 80), (const WebCore::RenderStyle *)(a1 + 120), (float *)(a1 + 128), v6))*(_WORD *)(a1 + 112) = 0;
  v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 120) & 0x38000000;
  if (a3)
  {
    v10 = (*(_DWORD *)(a3 + 40) & 0x38000000) == 0x8000000;
    if ((*(_DWORD *)(a3 + 40) & 0x38000000) == 0x8000000 && v9 != 0x8000000)
    {
      WebCore::RenderSVGInlineText::originalText(a1, &v19);
      v12 = v19;
      v13 = v19;
      v14 = 0;
LABEL_13:
      WebCore::applySVGWhitespaceRules(&v20, v13, v14);
      WebCore::RenderText::setText((const WTF::StringImpl **)a1, &v20, (const WTF::StringImpl *)1);
      v16 = v20;
      v20 = 0;
      if (v16)
      {
        if (*(_DWORD *)v16 == 2)
          WTF::StringImpl::destroy(v16, v15);
        else
          *(_DWORD *)v16 -= 2;
      }
      if (v12)
      {
        if (*(_DWORD *)v12 == 2)
          WTF::StringImpl::destroy(v12, v15);
        else
          *(_DWORD *)v12 -= 2;
      }
      return;
    }
  }
  else
  {
    v10 = 0;
  }
  if (!v10 && v9 == 0x8000000)
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    if ((*(_WORD *)(v11 + 28) & 2) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19650C564);
    }
    v12 = *(WTF::StringImpl **)(v11 + 80);
    if (v12)
      *(_DWORD *)v12 += 2;
    v13 = v12;
    v14 = 1;
    goto LABEL_13;
  }
  if (v4 == 8)
  {
    RenderSVGTextAncestor = (WebCore::RenderObject *)WebCore::RenderSVGText::locateRenderSVGTextAncestor(a1, v8);
    if (RenderSVGTextAncestor)
      WebCore::RenderObject::setNeedsLayout(RenderSVGTextAncestor, 1);
  }
}

uint64_t WebCore::RenderSVGInlineText::updateScaledFont(WebCore::RenderSVGInlineText *this, uint64_t a2, uint64_t a3, uint64_t a4, WebCore::FontCascade *a5)
{
  uint64_t v6;
  uint64_t result;

  v6 = *((_QWORD *)this + 4);
  if (v6)
    v6 = *(_QWORD *)(v6 + 8);
  result = WebCore::RenderSVGInlineText::computeNewScaledFontForStyle(this, (const WebCore::RenderObject *)(v6 + 80), (WebCore::RenderSVGInlineText *)((char *)this + 120), (float *)this + 32, a5);
  if ((_DWORD)result)
    *((_WORD *)this + 56) = 0;
  return result;
}

uint64_t WebCore::RenderSVGInlineText::createTextBox@<X0>(WebCore::RenderSVGInlineText *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  int v6;
  void *v7;
  WTF *v8;

  v4 = bmalloc::api::isoAllocate();
  *(_QWORD *)v4 = off_1E341E8B8;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  result = *((_QWORD *)this + 1);
  if (!result)
  {
    result = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)result = 1;
    *(_QWORD *)(result + 8) = this;
    v8 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = result;
    if (v8)
    {
      if (*(_DWORD *)v8 == 1)
      {
        WTF::fastFree(v8, v7);
        result = *((_QWORD *)this + 1);
        if (!result)
          goto LABEL_3;
      }
      else
      {
        --*(_DWORD *)v8;
      }
    }
  }
  ++*(_DWORD *)result;
LABEL_3:
  *(_QWORD *)(v4 + 32) = result;
  *(_QWORD *)(v4 + 40) = 0;
  *(_DWORD *)(v4 + 48) = 0;
  v6 = (*(unsigned __int16 *)(v4 + 52) | (*(unsigned __int8 *)(v4 + 54) << 16)) & 0xFE5000;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)v4 = off_1E3449DE8;
  *(_DWORD *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 84) &= 0xE0u;
  *(_QWORD *)(v4 + 88) = 0;
  *(_DWORD *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(v4 + 120) = 0;
  *(_WORD *)(v4 + 52) = v6 | 0x2C00;
  *(_BYTE *)(v4 + 54) = BYTE2(v6);
  *a2 = v4;
  return result;
}

float WebCore::RenderSVGInlineText::floatLinesBoundingBox(WebCore::RenderSVGInlineText *this)
{
  WebCore::SVGInlineTextBox *v1;
  float v2;
  float v3;
  float v4;
  float v5;
  void *v7;
  __n128 v8;
  __n128 v9;
  __n128 v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;

  v1 = (WebCore::SVGInlineTextBox *)*((_QWORD *)this + 8);
  v2 = 0.0;
  v3 = 0.0;
  v4 = 0.0;
  v5 = 0.0;
  if (v1)
  {
    if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v1 + 96))(*((_QWORD *)this + 8)))
    {
LABEL_26:
      __break(0xC471u);
      JUMPOUT(0x19650C818);
    }
    while (1)
    {
      v8.n128_f32[0] = WebCore::SVGInlineTextBox::calculateBoundaries(v1, v7);
      if (v10.n128_f32[0] > 0.0)
      {
        if (v8.n128_f32[0] >= v5)
          v12 = v5;
        else
          v12 = v8.n128_f32[0];
        if (v9.n128_f32[0] >= v4)
          v13 = v4;
        else
          v13 = v9.n128_f32[0];
        v14 = v3 + v5;
        if ((float)(v3 + v5) < (float)(v10.n128_f32[0] + v8.n128_f32[0]))
          v14 = v10.n128_f32[0] + v8.n128_f32[0];
        v15 = v2 + v4;
        if ((float)(v2 + v4) < (float)(v11 + v9.n128_f32[0]))
          v15 = v11 + v9.n128_f32[0];
        v16 = v14 - v12;
        v17 = v15 - v13;
        if (v2 <= 0.0)
        {
          v17 = v11;
          v16 = v10.n128_f32[0];
          v13 = v9.n128_f32[0];
          v12 = v8.n128_f32[0];
        }
        if (v3 > 0.0)
          v10.n128_f32[0] = v16;
        else
          v17 = v11;
        if (v3 > 0.0)
        {
          v9.n128_f32[0] = v13;
          v8.n128_f32[0] = v12;
        }
        if (v11 > 0.0)
        {
          v2 = v17;
          v3 = v10.n128_f32[0];
          v4 = v9.n128_f32[0];
          v5 = v8.n128_f32[0];
        }
      }
      v1 = (WebCore::SVGInlineTextBox *)*((_QWORD *)v1 + 8);
      if (!v1)
        break;
      if (((*(uint64_t (**)(WebCore::SVGInlineTextBox *, __n128, __n128, __n128))(*(_QWORD *)v1 + 96))(v1, v8, v9, v10) & 1) == 0)goto LABEL_26;
    }
  }
  return v5;
}

uint64_t WebCore::RenderSVGInlineText::linesBoundingBox(WebCore::RenderSVGInlineText *this)
{
  float v1;
  float v2;
  float v3;
  float v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = floorf(WebCore::RenderSVGInlineText::floatLinesBoundingBox(this));
  v3 = 2147500000.0;
  if (v2 < 2147500000.0)
  {
    v3 = -2147500000.0;
    if (v2 > -2147500000.0)
      v3 = (float)(int)v2;
  }
  v4 = floorf(v1);
  v5 = 2147500000.0;
  if (v4 < 2147500000.0)
  {
    v5 = -2147500000.0;
    if (v4 > -2147500000.0)
      v5 = (float)(int)v4;
  }
  v6 = 0x7FFFFFFFLL;
  v7 = 0x80000000;
  if (v3 > -2147500000.0)
    v7 = (int)v3;
  if (v3 < 2147500000.0)
    v6 = v7;
  v8 = 0x7FFFFFFF00000000;
  v9 = 0x8000000000000000;
  if (v5 > -2147500000.0)
    v9 = (unint64_t)(int)v5 << 32;
  if (v5 < 2147500000.0)
    v8 = v9;
  return v8 | v6;
}

unsigned int *WebCore::RenderSVGInlineText::positionForPoint@<X0>(_QWORD *a1@<X0>, int32x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  int v8;
  char v9;
  void *v12;
  uint64_t v13;
  float v14;
  WebCore::RenderObject *v15;
  WebCore::SVGInlineTextBox *v16;
  int32x2_t v17;
  int32x2_t v18;
  const WebCore::SVGTextFragment *v19;
  WebCore::SVGInlineTextBox *v20;
  float32x2_t v21;
  float v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  float v32;
  int v33;
  float v34;
  __int128 v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  BOOL v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  double v48;
  double v49;
  double *v50;
  double v51;
  double v52;
  double v53;
  double v54;
  double v55;
  _OWORD *v56;
  __int128 v57;
  float32x2_t v58;
  float32x2_t v59;
  float v60;
  double v61;
  BOOL v62;
  double *v63;
  double v64;
  double v65;
  double v66;
  double v67;
  double v68;
  double v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double v74;
  _BOOL4 v75;
  double v76;
  double v77;
  double v78;
  double v79;
  double v80;
  int v81;
  float32x2_t v82;
  _DWORD v83[4];
  __int128 v84;
  __int128 v85;
  __int128 v86;

  v5 = a1[8];
  if (!v5)
    goto LABEL_2;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 96))(v5) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19650CEC8);
  }
  v13 = a1[13];
  if (!v13)
    goto LABEL_2;
  if (!*(_DWORD *)(v13 + 4))
    goto LABEL_2;
  v14 = *(float *)(WebCore::FontCascade::metricsOfPrimaryFont((WebCore::FontCascade *)(a1 + 16), v12) + 4);
  v15 = WebCore::RenderObject::containingBlock((WebCore::RenderObject *)a1);
  v16 = (WebCore::SVGInlineTextBox *)a1[8];
  if (!v16)
    goto LABEL_2;
  v17 = *(int32x2_t *)((char *)v15 + 152);
  v18 = *a2;
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v16 + 96))(a1[8]) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19650CF1CLL);
  }
  v19 = 0;
  v20 = 0;
  v21 = (float32x2_t)vdup_n_s32(0x3C800000u);
  v82 = vadd_f32(vmul_f32(vcvt_f32_s32(v18), v21), vmul_f32(vcvt_f32_s32(v17), v21));
  v22 = 0.0;
  v23 = 3.4028e38;
  while (1)
  {
    v24 = *((unsigned int *)v16 + 31);
    if ((_DWORD)v24)
    {
      v25 = 0;
      v26 = 0;
      v27 = v24 << 7;
      do
      {
        if (v26 >= *((unsigned int *)v16 + 31))
          goto LABEL_76;
        v28 = *((_QWORD *)v16 + 14);
        v29 = v28 + v25;
        v30 = *(float *)(v28 + v25 + 12);
        v31 = *(float *)(v28 + v25 + 16);
        v32 = v31 - v14;
        v33 = *(_DWORD *)(v28 + v25 + 20);
        v34 = *(float *)(v28 + v25 + 24);
        *(float *)v83 = v30;
        *(float *)&v83[1] = v31 - v14;
        v83[2] = v33;
        *(float *)&v83[3] = v34;
        if ((*(_DWORD *)(v28 + v25 + 8) & 0x80000000) != 0)
        {
          v61 = *(double *)(v29 + 80);
          v62 = v61 == 1.0
             && *(double *)(v28 + v25 + 88) == 0.0
             && *(double *)(v28 + v25 + 96) == 0.0
             && *(double *)(v28 + v25 + 104) == 1.0
             && *(double *)(v28 + v25 + 112) == 0.0
             && *(double *)(v28 + v25 + 120) == 0.0;
          v63 = (double *)(v28 + v25);
          v40 = v63[4];
          v39 = v63[5];
          v43 = v63[6];
          v42 = v63[7];
          v45 = v63[8];
          v46 = v63[9];
          if (!v62)
          {
            v64 = v63[11];
            v65 = v63[12];
            v66 = v43 * v64;
            v67 = v63[13];
            v68 = v63[14];
            v69 = v63[15];
            v70 = v43 * v67 + v65 * v40;
            v71 = v43 * v69 + v68 * v40;
            v40 = v66 + v61 * v40;
            v72 = v42 * v64;
            v73 = v42 * v67 + v65 * v39;
            v74 = v42 * v69 + v68 * v39;
            v39 = v72 + v61 * v39;
            v45 = v45 + v71;
            v46 = v46 + v74;
            v43 = v70;
            v42 = v73;
          }
          *(double *)&v84 = v40;
          *((double *)&v84 + 1) = v39;
          *(double *)&v85 = v43;
          *((double *)&v85 + 1) = v42;
          *(double *)&v86 = v45;
          *((double *)&v86 + 1) = v46;
          v75 = v40 == 1.0;
          if (v39 != 0.0)
            v75 = 0;
          if (v43 != 0.0)
            v75 = 0;
          if (v42 != 1.0)
            v75 = 0;
          if (!v75 || v45 != 0.0 || v46 != 0.0)
          {
            v76 = v45 + v30;
            v77 = v46 + v31;
            v78 = (float)-v30;
            v79 = (float)-v31;
            v80 = v42 * v79 + v78 * v39;
            if (!v75)
            {
              v78 = v43 * v79 + v78 * v40;
              v79 = v80;
            }
            v45 = v76 + v78;
            v46 = v77 + v79;
LABEL_24:
            *(double *)&v86 = v45;
            *((double *)&v86 + 1) = v46;
            goto LABEL_36;
          }
          v42 = 1.0;
          v40 = 1.0;
        }
        else
        {
          if (*(double *)(v29 + 32) != 1.0
            || *(double *)(v28 + v25 + 40) != 0.0
            || *(double *)(v28 + v25 + 48) != 0.0
            || *(double *)(v28 + v25 + 56) != 1.0
            || *(double *)(v28 + v25 + 64) != 0.0
            || (v56 = (_OWORD *)(v28 + v25), *(double *)(v28 + v25 + 72) != 0.0))
          {
            v35 = *(_OWORD *)(v29 + 64);
            v85 = *(_OWORD *)(v29 + 48);
            v86 = v35;
            v84 = *(_OWORD *)(v29 + 32);
            v36 = *((double *)&v35 + 1) + v31;
            v37 = (float)-v30;
            v38 = (float)-v31;
            v39 = *((double *)&v84 + 1);
            v40 = *(double *)&v84;
            v41 = *(double *)&v84 == 1.0;
            if (*((double *)&v84 + 1) != 0.0)
              v41 = 0;
            v42 = *((double *)&v85 + 1);
            v43 = *(double *)&v85;
            if (*(double *)&v85 != 0.0)
              v41 = 0;
            v44 = *((double *)&v85 + 1) * v38 + v37 * *((double *)&v84 + 1);
            if (!v41 || *((double *)&v85 + 1) != 1.0)
            {
              v37 = *(double *)&v85 * v38 + v37 * *(double *)&v84;
              v38 = v44;
            }
            v45 = *(double *)&v86 + v30 + v37;
            v46 = v36 + v38;
            *(double *)&v86 = v45;
            *((double *)&v86 + 1) = v36 + v38;
            v47 = v28 + v25;
            v48 = *(double *)(v28 + v25 + 80);
            if (v48 == 1.0)
            {
              v49 = *(double *)(v47 + 88);
              if (v49 == 0.0
                && *(double *)(v28 + v25 + 96) == 0.0
                && *(double *)(v28 + v25 + 104) == 1.0
                && *(double *)(v28 + v25 + 112) == 0.0
                && *(double *)(v28 + v25 + 120) == 0.0)
              {
                goto LABEL_36;
              }
            }
            else
            {
              v49 = *(double *)(v47 + 88);
            }
            v50 = (double *)(v28 + v25);
            v51 = v50[12];
            v52 = v50[13];
            v53 = v50[15];
            v39 = *((double *)&v84 + 1) * v52 + *(double *)&v84 * v49;
            v40 = *((double *)&v84 + 1) * v51 + *(double *)&v84 * v48;
            v42 = v52 * *((double *)&v85 + 1) + *(double *)&v85 * v49;
            v43 = v51 * *((double *)&v85 + 1) + *(double *)&v85 * v48;
            v54 = v46 * v51 + v45 * v48;
            v55 = v46 * v52 + v45 * v49;
            v45 = v50[14] + v54;
            *(double *)&v84 = v40;
            *((double *)&v84 + 1) = v39;
            *(double *)&v85 = v43;
            *((double *)&v85 + 1) = v42;
            v46 = v53 + v55;
            goto LABEL_24;
          }
          v57 = v56[6];
          v84 = v56[5];
          v85 = v57;
          v86 = v56[7];
          v39 = *((double *)&v84 + 1);
          v40 = *(double *)&v84;
          v42 = *((double *)&v57 + 1);
          v43 = *((double *)&v57 + 1);
          v46 = *((double *)&v86 + 1);
          v45 = *(double *)&v86;
        }
LABEL_36:
        if (v40 != 1.0 || v39 != 0.0 || v43 != 0.0 || v42 != 1.0 || v45 != 0.0 || v46 != 0.0)
          v30 = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)&v84, (const WebCore::FloatRect *)v83);
        v58.f32[0] = v30;
        v58.f32[1] = v32 + (float)(v34 * 0.5);
        v59 = vsub_f32(v58, v82);
        v60 = vaddv_f32(vmul_f32(v59, v59));
        if (v60 < v23)
        {
          v20 = v16;
          v19 = (const WebCore::SVGTextFragment *)v29;
          v22 = v30;
          v23 = v60;
        }
        ++v26;
        v25 += 128;
      }
      while (v27 != v25);
    }
    v16 = (WebCore::SVGInlineTextBox *)*((_QWORD *)v16 + 8);
    if (!v16)
      break;
    if (((*(uint64_t (**)(WebCore::SVGInlineTextBox *))(*(_QWORD *)v16 + 96))(v16) & 1) == 0)
    {
LABEL_76:
      __break(0xC471u);
      JUMPOUT(0x19650CEA8);
    }
  }
  if (v19)
  {
    v81 = WebCore::SVGInlineTextBox::offsetForPositionInFragment(v20, v19, v82.f32[0] - v22);
    v8 = *((_DWORD *)v20 + 18) + v81;
    v9 = v81 < 1;
    v6 = a3;
    v7 = (unsigned int *)a1;
    return WebCore::RenderObject::createVisiblePosition(v7, v8, v9, v6);
  }
LABEL_2:
  v6 = a3;
  v7 = (unsigned int *)a1;
  v8 = 0;
  v9 = 1;
  return WebCore::RenderObject::createVisiblePosition(v7, v8, v9, v6);
}

uint64_t WebCore::RenderSVGInlineText::computeNewScaledFontForStyle(WebCore::RenderSVGInlineText *this, const WebCore::RenderObject *a2, const WebCore::RenderStyle *a3, float *a4, WebCore::FontCascade *a5)
{
  float v9;
  uint64_t v10;
  void *v11;
  unsigned int *v12;
  float v13;
  float v14;
  uint64_t v15;
  int v16;
  int v17;
  float v18;
  float v19;
  int v20;
  void *v21;
  WebCore::Document *v22;
  WebCore *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  WTF::StringImpl *v27;
  WebCore *v28;
  unsigned int *v29;
  uint64_t v31;
  WTF::StringImpl **v32;
  uint64_t v33;
  WTF::StringImpl *v34;
  uint64_t v35;
  WebCore *v36[37];
  uint64_t v37[19];
  float v38;
  int v39;
  unsigned int *v40;
  int v41;
  __int16 v42;

  WebCore::RenderSVGInlineText::computeScalingFactorForRenderer(this, a2);
  *(float *)a3 = v9;
  if (v9 == 0.0 || (v10 = *((_QWORD *)a2 + 4), (~*(_DWORD *)(v10 + 208) & 0x30) == 0))
  {
    *(_DWORD *)a3 = 1065353216;
    v35 = WebCore::RenderStyle::fontCascade(a2);
    WebCore::FontCascade::operator=((uint64_t)a4, v35);
    return 0;
  }
  else
  {
    WebCore::FontDescription::FontDescription((WebCore::FontDescription *)v37, (const WebCore::FontDescription *)(v10 + 48));
    v12 = *(unsigned int **)(v10 + 216);
    ++*v12;
    v40 = v12;
    v41 = *(_DWORD *)(v10 + 224);
    v42 = *(_WORD *)(v10 + 228);
    v13 = v38;
    v14 = *(float *)a3;
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
    v16 = *(_DWORD *)(v15 + 24);
    *(_DWORD *)(v15 + 24) = v16 + 2;
    if (fabsf(v13) < 0.00000011921)
    {
      v20 = 0;
    }
    else
    {
      v17 = (int)*(double *)(*(_QWORD *)(v15 + 680) + 496);
      v18 = v13 * v14;
      if (v18 >= (float)v17)
        v19 = v18;
      else
        v19 = (float)v17;
      v20 = 1232348160;
      if (v19 < 1000000.0)
      {
        v20 = 2139095039;
        if (v19 < 3.4028e38)
        {
          v20 = LODWORD(v19);
          if (v19 <= -3.4028e38)
            v20 = -8388609;
        }
      }
    }
    v38 = *(float *)&v20;
    if (v16)
    {
      *(_DWORD *)(v15 + 24) = v16;
    }
    else if ((*(_WORD *)(v15 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v15, v11);
    }
    if ((v39 & 1) != 0)
      v39 &= ~1u;
    WebCore::FontCascade::FontCascade((uint64_t)v36, v37);
    WebCore::FontCascade::operator=((uint64_t)a4, (uint64_t)v36);
    WebCore::FontCascade::~FontCascade((WebCore::FontCascade *)v36, v21);
    v22 = *(WebCore::Document **)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8);
    v23 = (WebCore *)*((_QWORD *)v22 + 331);
    if (!v23)
    {
      v22 = (WebCore::Document *)WebCore::Document::ensureFontSelector(v22);
      v23 = v22;
    }
    *((_DWORD *)v23 + 2) += 2;
    v36[0] = v23;
    v24 = *(_QWORD *)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 736);
    if (!v24 || (v25 = *(_QWORD *)(v24 + 96)) == 0)
      v25 = WebCore::threadGlobalDataSlow(v22);
    v26 = *(_QWORD *)(v25 + 80);
    if (!v26)
    {
      WebCore::ThreadGlobalData::initializeFontCache((WebCore::FontCache **)v25);
      v26 = *(_QWORD *)(v25 + 80);
    }
    WebCore::FontCache::updateFontCascade(v26, (uint64_t)a4, v36);
    v28 = v36[0];
    v36[0] = 0;
    if (v28)
    {
      if (*((_DWORD *)v28 + 2) == 1)
        (*(void (**)(WebCore *))(*(_QWORD *)v28 + 8))(v28);
      else
        --*((_DWORD *)v28 + 2);
    }
    if (*((_DWORD *)v23 + 2) == 1)
      (*(void (**)(WebCore *))(*(_QWORD *)v23 + 8))(v23);
    else
      --*((_DWORD *)v23 + 2);
    v29 = v40;
    v40 = 0;
    if (v29)
    {
      if (*v29 == 1)
      {
        v31 = v29[1];
        if ((_DWORD)v31)
        {
          v32 = (WTF::StringImpl **)(v29 + 2);
          v33 = 8 * v31;
          do
          {
            v34 = *v32;
            *v32 = 0;
            if (v34)
            {
              if (*(_DWORD *)v34 == 2)
                WTF::StringImpl::destroy(v34, v27);
              else
                *(_DWORD *)v34 -= 2;
            }
            ++v32;
            v33 -= 8;
          }
          while (v33);
        }
        WTF::fastFree((WTF *)v29, v27);
      }
      else
      {
        --*v29;
      }
    }
    WebCore::FontDescription::~FontDescription((WebCore::FontDescription *)v37, v27);
    return 1;
  }
}

void WebCore::RenderSVGInlineText::computeScalingFactorForRenderer(WebCore::RenderSVGInlineText *this, const WebCore::RenderObject *a2)
{
  long double v2;
  long double v3;
  void *v4;
  WTF *v5;
  WebCore::RenderSVGInlineText *v6;
  WTF *v7[6];

  if ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 680)
                  + 680) & 0x800000000000) != 0
    && (v6 = this,
        a2 = (const WebCore::RenderObject *)WebCore::lineageOfType<WebCore::RenderLayerModelObject>((uint64_t)this),
        this = v6,
        a2))
  {
    WTF::WeakRef<WebCore::RenderText const,WTF::SingleThreadWeakPtrImpl>::WeakRef<void>((uint64_t *)v7, (uint64_t)a2);
    WebCore::SVGLayerTransformComputation::calculateScreenFontSizeScalingFactor((WebCore::SVGLayerTransformComputation *)v7);
    v5 = v7[0];
    v7[0] = 0;
    if (v5)
    {
      if (*(_DWORD *)v5 == 1)
        WTF::fastFree(v5, v4);
      else
        --*(_DWORD *)v5;
    }
  }
  else
  {
    WebCore::SVGRenderingContext::calculateTransformationToOutermostCoordinateSystem(this, a2, (double *)v7);
    v2 = hypot(*(long double *)v7, *(long double *)&v7[1]);
    v3 = hypot(*(long double *)&v7[2], *(long double *)&v7[3]);
    hypot(v2, v3);
  }
}

uint64_t WebCore::lineageOfType<WebCore::RenderLayerModelObject>(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if ((*(_BYTE *)(result + 45) & 0x10) == 0)
  {
    v1 = *(_QWORD *)(result + 32);
    if (v1 && (v2 = *(_QWORD *)(v1 + 8)) != 0)
    {
      result = 0;
      while ((*(_BYTE *)(v2 + 45) & 0x10) == 0)
      {
        v3 = *(_QWORD *)(v2 + 32);
        if (!v3)
          return 0;
        v2 = *(_QWORD *)(v3 + 8);
        if (!v2)
          return result;
      }
      return v2;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

float WebCore::SVGLayerTransformComputation::calculateScreenFontSizeScalingFactor(WebCore::SVGLayerTransformComputation *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  long double v20;
  long double v21;
  WTF *v23;
  void *v24;
  double v25[6];

  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  while ((*(_BYTE *)(v2 + 45) & 0x10) == 0)
  {
    v3 = *(_QWORD *)(v2 + 32);
    if (v3)
    {
      v2 = *(_QWORD *)(v3 + 8);
      if (v2)
        continue;
    }
    goto LABEL_14;
  }
LABEL_6:
  if ((*(_BYTE *)(v2 + 21) & 0x80) == 0)
  {
    while (1)
    {
      v4 = *(_QWORD *)(v2 + 32);
      if (!v4)
        goto LABEL_14;
      v2 = *(_QWORD *)(v4 + 8);
      if (!v2)
        goto LABEL_14;
      if ((*(_BYTE *)(v2 + 45) & 0x10) != 0)
        goto LABEL_6;
    }
  }
  v5 = *(_QWORD **)(v2 + 144);
  if (!v5)
  {
LABEL_14:
    v6 = 0;
    goto LABEL_16;
  }
  while (!v5[32])
  {
    v5 = (_QWORD *)v5[5];
    if (!v5)
      goto LABEL_14;
  }
  v6 = v5[4];
LABEL_16:
  WebCore::SVGLayerTransformComputation::computeAccumulatedTransform((uint64_t)this, v6, 2, (uint64_t)v25);
  v7 = *(_QWORD *)(*(_QWORD *)this + 8);
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 40) + 8);
  v9 = *(_QWORD *)(v8 + 528);
  v10 = 1.0;
  if (v9)
  {
    v11 = *(_QWORD *)(v9 + 8);
    if (v11)
    {
      v12 = *(_QWORD *)(v11 + 24);
      if (v12)
      {
        v13 = *(_QWORD *)(v12 + 8);
        if (v13)
        {
          v14 = (*(_DWORD *)v13)++;
          v10 = *(float *)(v13 + 364);
          if (v14)
          {
            *(_DWORD *)v13 = v14;
          }
          else
          {
            WebCore::Page::~Page(v13);
            WTF::fastFree(v23, v24);
            v7 = *(_QWORD *)(*(_QWORD *)this + 8);
            v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 24) + 8) + 40) + 8);
          }
        }
      }
    }
  }
  v15 = v25[0] * v10;
  v16 = v25[1] * v10;
  v17 = v25[2] * v10;
  v18 = v25[3] * v10;
  if ((*(_WORD *)(v8 + 3358) & 0x20) == 0)
  {
    v19 = *(float *)(*(_QWORD *)(v7 + 104) + 184);
    v15 = v15 * v19;
    v16 = v16 * v19;
    v17 = v17 * v19;
    v18 = v18 * v19;
  }
  v20 = hypot(v15, v16);
  v21 = hypot(v17, v18);
  return hypot(v20, v21) / 1.41421356;
}

uint64_t WebCore::RenderSVGModelObject::updateFromStyle(WebCore::RenderSVGModelObject *this)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  unsigned int *v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  float v11;
  int v12;

  result = (*(uint64_t (**)(WebCore::RenderSVGModelObject *))(*(_QWORD *)this + 832))(this);
  if ((result & 1) != 0
    || (v3 = *((_QWORD *)this + 11), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 40) + 20))
    || (v10 = *(_QWORD *)(v3 + 40), *(_QWORD *)(v10 + 328))
    || *(_QWORD *)(v10 + 320)
    || *(_QWORD *)(v10 + 312)
    || *(_QWORD *)(v10 + 304)
    || (*(_DWORD *)(v10 + 636) & 0x180) == 0x80)
  {
    v6 = *((_DWORD *)this + 5);
    v5 = (unsigned int *)((char *)this + 20);
    v4 = v6;
LABEL_4:
    v7 = 0x20000;
    goto LABEL_5;
  }
  v11 = *(float *)(v10 + 260);
  v12 = *((_DWORD *)this + 5);
  v5 = (unsigned int *)((char *)this + 20);
  v4 = v12;
  if (v11 != -1.0)
    goto LABEL_4;
  v7 = 0;
LABEL_5:
  v8 = v4 & 0xFFEDFFFF;
  if ((_DWORD)result)
    v9 = 0x100000;
  else
    v9 = 0;
  *v5 = v8 | v7 | v9;
  return result;
}

uint64_t WebCore::RenderSVGModelObject::overflowClipRect()
{
  return 0;
}

unint64_t WebCore::RenderSVGModelObject::localRectsForRepaint@<X0>(WebCore::RenderElement *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t result;
  const WebCore::RenderLayerModelObject *v7;
  double v8;
  uint64_t v9;

  result = WebCore::RenderElement::isInsideEntirelyHiddenLayer(a1);
  if ((_DWORD)result)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 32) = 0;
  }
  else
  {
    result = WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect(a1, v7, v8);
    *(_QWORD *)a3 = result;
    *(_QWORD *)(a3 + 8) = v9;
    *(_BYTE *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 32) = 0;
    if (a2)
    {
      *(_QWORD *)(a3 + 16) = result;
      *(_QWORD *)(a3 + 24) = v9;
      *(_BYTE *)(a3 + 32) = 1;
    }
  }
  return result;
}

uint64_t WebCore::RenderSVGModelObject::pushMappingToContainer(WebCore::RenderSVGModelObject *this, const WebCore::RenderLayerModelObject *a2, WebCore::RenderGeometryMap *a3)
{
  WebCore::RenderElement *v6;
  WebCore::RenderElement *v7;
  int v8;
  uint64_t result;
  BOOL v10;

  v10 = 0;
  v6 = (WebCore::RenderElement *)WebCore::RenderObject::container(this, a2, &v10);
  v7 = v6;
  if (!v6)
    return (uint64_t)v7;
  ++*((_DWORD *)v6 + 4);
  WebCore::RenderObject::pushOntoGeometryMap(this, a3, a2, v6, v10);
  v8 = *((_DWORD *)v7 + 4);
  if (v8)
  {
    *((_DWORD *)v7 + 4) = v8 - 1;
    return (uint64_t)v7;
  }
  result = 286;
  __break(0xC471u);
  return result;
}

unint64_t WebCore::RenderSVGModelObject::outlineBoundsForRepaint(WebCore::RenderSVGModelObject *this, const WebCore::RenderLayerModelObject *a2, const WebCore::RenderGeometryMap *a3, double a4)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v18;
  float v19;
  float v20;
  double v22;
  int v23;
  double v24;
  unint64_t v25;
  unint64_t v26;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  __int128 v36;
  __int128 v37;

  v7 = WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect(this, a2, a4);
  v9 = HIDWORD(v7);
  if (a2 != this)
  {
    v36 = 0u;
    v37 = 0u;
    v10 = (float)(int)v7 * 0.015625;
    v11 = (float)SHIDWORD(v7) * 0.015625;
    v12 = (float)(int)v8 * 0.015625;
    v13 = (float)SHIDWORD(v8) * 0.015625;
    v28 = v10;
    v29 = v11;
    if (a3)
    {
      v30 = (float)(int)v8 * 0.015625;
      v31 = (float)SHIDWORD(v8) * 0.015625;
      WebCore::RenderGeometryMap::mapToContainer(a3, (const WebCore::FloatRect *)&v28, a2, (float *)&v36);
    }
    else
    {
      v30 = v10 + v12;
      v31 = v29;
      v32 = v10 + v12;
      v33 = v11 + v13;
      v34 = v28;
      v35 = v11 + v13;
      WebCore::RenderObject::localToContainerQuad((uint64_t)this, &v28, (uint64_t)a2, 2u, &v36);
    }
    if (*((float *)&v37 + 2) >= *(float *)&v37)
      v14 = *(float *)&v37;
    else
      v14 = *((float *)&v37 + 2);
    if (*((float *)&v36 + 2) >= *(float *)&v36)
      v15 = *(float *)&v36;
    else
      v15 = *((float *)&v36 + 2);
    if (v14 >= v15)
      v14 = v15;
    v16 = fabsf(v14);
    if (v16 == INFINITY || v16 > 2147500000.0)
      v14 = (float)((SLODWORD(v14) >> 31) ^ 0x7FFFFFFF);
    if (*((float *)&v37 + 3) >= *((float *)&v37 + 1))
      v18 = *((float *)&v37 + 1);
    else
      v18 = *((float *)&v37 + 3);
    if (*((float *)&v36 + 3) >= *((float *)&v36 + 1))
      v19 = *((float *)&v36 + 1);
    else
      v19 = *((float *)&v36 + 3);
    if (v18 >= v19)
      v18 = v19;
    v20 = fabsf(v18);
    if (v20 == INFINITY || v20 > 2147500000.0)
      v18 = (float)((SLODWORD(v18) >> 31) ^ 0x7FFFFFFF);
    v22 = v14 * 64.0;
    v23 = 0x80000000;
    if (v22 > -2147483650.0)
      v23 = (int)v22;
    if (v22 >= 2147483650.0)
      v23 = 0x7FFFFFFF;
    v24 = v18 * 64.0;
    v25 = 0x7FFFFFFF00000000;
    v26 = 0x8000000000000000;
    if (v24 > -2147483650.0)
      v26 = (unint64_t)(int)v24 << 32;
    if (v24 < 2147483650.0)
      v25 = v26;
    LODWORD(v7) = v25 | v23;
    v9 = HIDWORD(v25);
  }
  return v7 | ((unint64_t)v9 << 32);
}

uint64_t WebCore::RenderSVGModelObject::boundingRects(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  v4 = *(_QWORD *)(result + 160);
  *(_QWORD *)&v8 = *a3;
  *((_QWORD *)&v8 + 1) = v4;
  v5 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v5 == *(_DWORD *)(a2 + 8))
  {
    result = WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v5 + 1, (unint64_t)&v8);
    v5 = *(unsigned int *)(a2 + 12);
    v6 = *(_QWORD *)a2;
    v7 = *(_OWORD *)result;
  }
  else
  {
    v6 = *(_QWORD *)a2;
    v7 = v8;
  }
  *(_OWORD *)(v6 + 16 * v5) = v7;
  ++*(_DWORD *)(a2 + 12);
  return result;
}

__int128 *WebCore::RenderSVGModelObject::absoluteQuads(uint64_t a1, uint64_t a2)
{
  float v3;
  float v4;
  __int128 *result;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  float v11;
  int v12;
  float v13;
  float v14;
  int v15;
  float v16;
  _OWORD v17[2];

  v3 = (float)*(int *)(a1 + 160) * 0.015625;
  v4 = (float)*(int *)(a1 + 164) * 0.015625;
  v10 = 0;
  v11 = v3 + 0.0;
  v12 = 0;
  v13 = v3 + 0.0;
  v14 = v4 + 0.0;
  v15 = 0;
  v16 = v4 + 0.0;
  result = (__int128 *)WebCore::RenderObject::localToContainerQuad(a1, (float *)&v10, 0, 2u, v17);
  v6 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v6 == *(_DWORD *)(a2 + 8))
  {
    result = (__int128 *)WTF::Vector<WebCore::FloatQuad,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v6 + 1, (unint64_t)v17);
    v7 = (_OWORD *)(*(_QWORD *)a2 + 32 * *(unsigned int *)(a2 + 12));
    v8 = *result;
    v9 = result[1];
  }
  else
  {
    v7 = (_OWORD *)(*(_QWORD *)a2 + 32 * v6);
    v8 = v17[0];
    v9 = v17[1];
  }
  *v7 = v8;
  v7[1] = v9;
  ++*(_DWORD *)(a2 + 12);
  return result;
}

void WebCore::RenderSVGModelObject::mapAbsoluteToLocalPoint(uint64_t a1, unsigned int a2, WebCore::TransformState *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(a1 + 20);
  if ((v5 & 0x20000) != 0)
  {
    v6 = a1;
    if ((*(_BYTE *)(a1 + 45) & 2) != 0)
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v7 = *(_QWORD *)(v6 + 88);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v7 + 32) + 40) + 20)
      || (v8 = *(_QWORD **)(v7 + 40), v8[41])
      || v8[38]
      || v8[39]
      || v8[40]
      || (v5 & 0x100000) != 0)
    {
      a2 &= ~1u;
    }
  }
  v9 = *(_QWORD *)(a1 + 32);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (v10)
    {
      v11 = a2;
      (*(void (**)(uint64_t, _QWORD, WebCore::TransformState *))(*(_QWORD *)v10 + 584))(v10, a2, a3);
      v12 = 0;
      v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)a1 + 360))(a1, v10, &v12, 0);
      WebCore::RenderObject::pushOntoTransformState(a1, a3, v11, 0, v10, (const WebCore::LayoutSize *)&v13, 0);
    }
  }
}

WebCore::RenderObject *WebCore::RenderSVGModelObject::mapLocalToContainer(WebCore::RenderObject *a1, const WebCore::RenderLayerModelObject *a2, uint64_t a3, int a4, _BYTE *a5)
{
  return WebCore::RenderLayerModelObject::mapLocalToSVGContainer(a1, a2, a3, a4, a5);
}

uint64_t WebCore::RenderSVGModelObject::offsetFromContainer(WebCore::RenderSVGModelObject *this, WebCore::RenderElement *a2, const WebCore::LayoutPoint *a3, BOOL *a4)
{
  return *((_QWORD *)this + 19);
}

void WebCore::RenderSVGModelObject::addFocusRingRects(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  int v10;
  int v11;
  float v12;
  int v13;
  int v14;
  float v15;
  float v16;
  int v17;
  unsigned int v18;
  float v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 *v28;
  __int128 v29;

  v5 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 256))(a1, 0);
  v9 = floorf(v5 * 64.0);
  if (v9 > -2147500000.0)
    v10 = (int)v9;
  else
    v10 = 0x80000000;
  if (v9 < 2147500000.0)
    v11 = v10;
  else
    v11 = 0x7FFFFFFF;
  v12 = floorf(v6 * 64.0);
  if (v12 > -2147500000.0)
    v13 = (int)v12;
  else
    v13 = 0x80000000;
  if (v12 < 2147500000.0)
    v14 = v13;
  else
    v14 = 0x7FFFFFFF;
  v15 = v6 + v8;
  v16 = ceilf((float)(v5 + v7) * 64.0);
  if (v16 > -2147500000.0)
    v17 = (int)v16;
  else
    v17 = 0x80000000;
  if (v16 < 2147500000.0)
    v18 = v17;
  else
    v18 = 0x7FFFFFFF;
  v19 = ceilf(v15 * 64.0);
  if (v19 >= 2147500000.0)
  {
    v20 = 0x7FFFFFFF;
  }
  else if (v19 <= -2147500000.0)
  {
    v20 = 0x80000000;
  }
  else
  {
    v20 = (int)v19;
  }
  v21 = __OFSUB__(v18, v11);
  LODWORD(v22) = v18 - v11;
  v23 = (v18 >> 31) + 0x7FFFFFFF;
  if (v21)
    v22 = v23;
  else
    v22 = v22;
  v21 = __OFSUB__(v20, v14);
  LODWORD(v24) = v20 - v14;
  if (v21)
    v24 = (v20 >> 31) + 0x7FFFFFFF;
  else
    v24 = v24;
  if ((int)v22 >= 1 && (int)v24 >= 1)
  {
    *(_QWORD *)&v29 = *a3;
    *((_QWORD *)&v29 + 1) = v22 | (v24 << 32);
    v25 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v25 == *(_DWORD *)(a2 + 8))
    {
      v28 = (__int128 *)WTF::Vector<WebCore::FloatRect,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a2, v25 + 1, (unint64_t)&v29);
      v25 = *(unsigned int *)(a2 + 12);
      v26 = *(_QWORD *)a2;
      v27 = *v28;
    }
    else
    {
      v26 = *(_QWORD *)a2;
      v27 = v29;
    }
    *(_OWORD *)(v26 + 16 * v25) = v27;
    ++*(_DWORD *)(a2 + 12);
  }
}

uint64_t WebCore::RenderSVGModelObject::checkIntersection(WebCore::RenderSVGModelObject *this, WebCore::RenderElement *a2, const WebCore::FloatRect *a3)
{
  WebCore::RenderElement *v3;
  uint64_t v5;
  uint64_t v6;
  WebCore::RenderSVGModelObject *v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  __int16 v12;
  int v13;
  int v14;
  int v15;
  int v16;
  void *v17;
  int v18;
  int v19;
  float *v20;
  float v21;
  float v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  BOOL v36;
  float v37;
  float v38;
  BOOL v39;
  float v40;
  BOOL v41;
  float v42;
  float v43;
  float v44;
  float v45;
  _BOOL4 v46;
  _DWORD v47[4];
  _DWORD v48[4];
  _QWORD v49[6];

  if (!this)
    return 0;
  v3 = a2;
  v5 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
  if (*(_BYTE *)(v6 + 3441))
  {
    if (*(_QWORD *)(v6 + 1272) != v5)
      return 0;
  }
  v7 = this;
  if ((*((_BYTE *)this + 45) & 2) != 0)
  {
    v7 = (WebCore::RenderSVGModelObject *)*((_QWORD *)this + 4);
    if (v7)
      v7 = (WebCore::RenderSVGModelObject *)*((_QWORD *)v7 + 1);
  }
  if ((*(_BYTE *)(*((_QWORD *)v7 + 13) + 239) & 1) != 0 || (*((_WORD *)v7 + 62) & 0x3C0) == 0)
    return 0;
  if ((*((_BYTE *)this + 52) & 7) == 4 && (*((_BYTE *)this + 53) & 1) == 0 && (*((_BYTE *)this + 53) & 0x10) != 0)
    goto LABEL_17;
  v8 = *((unsigned __int8 *)this + 46);
  if (v8 == 70 || v8 == 85)
    goto LABEL_17;
  if ((*((_BYTE *)this + 45) & 1) != 0)
    return 0;
  v9 = *(_WORD *)(v5 + 28);
  if ((v9 & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19650E080);
  }
  if ((v9 & 0x20) == 0 || *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::useTag + 24))
    return 0;
LABEL_17:
  if ((*((_BYTE *)this + 45) & 1) != 0)
  {
    v5 = 0;
  }
  else
  {
    v12 = *(_WORD *)(v5 + 28);
    if ((v12 & 8) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19650E060);
    }
    if ((v12 & 0x20) == 0
      || ((*(uint64_t (**)(_QWORD, WebCore::RenderElement *, const WebCore::FloatRect *))(*(_QWORD *)v5
                                                                                                  + 1184))(*(_QWORD *)(*((_QWORD *)this + 3) + 8), a2, a3) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19650DE54);
    }
    *(_DWORD *)(v5 + 24) += 2;
  }
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v5 + 1312))(v49, v5, 1);
  v47[0] = (*(float (**)(WebCore::RenderSVGModelObject *, uint64_t))(*(_QWORD *)this + 256))(this, 1);
  v47[1] = v13;
  v47[2] = v14;
  v47[3] = v15;
  v48[0] = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)v49, (const WebCore::FloatRect *)v47);
  v48[1] = v16;
  v48[2] = v18;
  v48[3] = v19;
  v20 = (float *)v48;
  v22 = *((float *)v3 + 2);
  v21 = *((float *)v3 + 3);
  while (1)
  {
    v23 = v20;
    v20 = (float *)v3;
    v24 = v23[2];
    if (v22 <= 0.0 || v21 <= 0.0)
      break;
    v21 = v23[3];
    v22 = v23[2];
    v3 = (WebCore::RenderElement *)v23;
    if (v24 > 0.0)
    {
      v22 = v23[2];
      v3 = (WebCore::RenderElement *)v23;
      if (v21 > 0.0)
      {
        v25 = v20[2];
        if (v25 > 0.0)
        {
          v26 = v20[3];
          if (v26 > 0.0)
          {
            v27 = v24 + *v23;
            if (*v23 < (float)(v25 + *v20) && *v20 < v27)
            {
              v29 = v20[1];
              v30 = v23[1];
              if (v29 < (float)(v21 + v30))
              {
                v10 = v30 < (float)(v26 + v29);
                goto LABEL_65;
              }
            }
          }
        }
        goto LABEL_53;
      }
    }
  }
  v10 = 0;
  if (v24 > 0.0)
  {
    v31 = v23[3];
    if (v31 > 0.0)
    {
      v33 = *v20;
      v32 = v20[1];
      v34 = *v23;
      v35 = v24 + *v23;
      v36 = *v23 > *v20 || v35 < v33;
      if (v36 || ((v37 = v23[1], v38 = v31 + v37, v37 <= v32) ? (v39 = v38 < v32) : (v39 = 1), v39))
      {
        v40 = v22 + v33;
        v41 = v34 > v40 || v35 < v40;
        if (v41 || (v42 = v21 + v32, v43 = v23[1], v43 > v42))
        {
LABEL_53:
          v10 = 0;
          goto LABEL_65;
        }
        v10 = (float)(v31 + v43) >= v42;
      }
      else
      {
        v44 = v22 + v33;
        v45 = v21 + v32;
        v46 = v34 > v44;
        if (v35 < v44)
          v46 = 1;
        if (v37 > v45)
          v46 = 1;
        v10 = v38 < v45 || v46;
      }
    }
  }
LABEL_65:
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v17);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::RenderSVGModelObject::checkEnclosure(WebCore::RenderSVGModelObject *this, WebCore::RenderElement *a2, const WebCore::FloatRect *a3)
{
  uint64_t v5;
  uint64_t v6;
  WebCore::RenderSVGModelObject *v7;
  int v8;
  __int16 v9;
  _BOOL8 v10;
  __int16 v12;
  int v13;
  int v14;
  int v15;
  void *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  _DWORD v22[4];
  _QWORD v23[6];

  if (!this)
    return 0;
  v5 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 8);
  if (*(_BYTE *)(v6 + 3441))
  {
    if (*(_QWORD *)(v6 + 1272) != v5)
      return 0;
  }
  v7 = this;
  if ((*((_BYTE *)this + 45) & 2) != 0)
  {
    v7 = (WebCore::RenderSVGModelObject *)*((_QWORD *)this + 4);
    if (v7)
      v7 = (WebCore::RenderSVGModelObject *)*((_QWORD *)v7 + 1);
  }
  if ((*(_BYTE *)(*((_QWORD *)v7 + 13) + 239) & 1) != 0 || (*((_WORD *)v7 + 62) & 0x3C0) == 0)
    return 0;
  if ((*((_BYTE *)this + 52) & 7) != 4 || (*((_BYTE *)this + 53) & 1) != 0 || (*((_BYTE *)this + 53) & 0x10) == 0)
  {
    v8 = *((unsigned __int8 *)this + 46);
    if (v8 != 70 && v8 != 85)
    {
      if ((*((_BYTE *)this + 45) & 1) != 0)
        return 0;
      v9 = *(_WORD *)(v5 + 28);
      if ((v9 & 8) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19650E2B4);
      }
      if ((v9 & 0x20) == 0 || *(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::useTag + 24))
        return 0;
    }
  }
  v12 = *(_WORD *)(v5 + 28);
  if ((v12 & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19650E294);
  }
  if ((v12 & 0x20) == 0
    || ((*(uint64_t (**)(_QWORD, WebCore::RenderElement *, const WebCore::FloatRect *))(*(_QWORD *)v5 + 1184))(*(_QWORD *)(*((_QWORD *)this + 3) + 8), a2, a3) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19650E194);
  }
  *(_DWORD *)(v5 + 24) += 2;
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v5 + 1312))(v23, v5, 1);
  v22[0] = (*(float (**)(WebCore::RenderSVGModelObject *, uint64_t))(*(_QWORD *)this + 256))(this, 1);
  v22[1] = v13;
  v22[2] = v14;
  v22[3] = v15;
  v17 = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)v23, (const WebCore::FloatRect *)v22);
  v10 = *(float *)a2 <= v17
     && (float)(*(float *)a2 + *((float *)a2 + 2)) >= (float)(v17 + v19)
     && (v21 = *((float *)a2 + 1), v21 <= v18)
     && (float)(v21 + *((float *)a2 + 3)) >= (float)(v18 + v20);
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v5, v16);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return v10;
}

BOOL WebCore::RenderSVGModelObject::applyCachedClipAndScrollPosition(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 result;
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  int v23;
  int v24;
  signed int v25;
  int v26;
  int v27;
  unint64_t v28;
  signed int v29;
  unint64_t v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  int v36;
  signed int v37;
  int v38;
  int v39;
  int v40;
  unint64_t v41;
  signed int v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;

  if (a1 == a3 && (a4 & 0x800000000) == 0)
    return 1;
  v5 = *(_QWORD *)(a1 + 144);
  v7 = *(_DWORD *)(v5 + 164);
  v6 = *(_DWORD *)(v5 + 168);
  v8 = v7 << 6;
  if (v7 < -33554432)
    v8 = 0x80000000;
  if (v7 > 0x1FFFFFF)
    v8 = 0x7FFFFFFF;
  if (v6 >= -33554432)
    v9 = v6 << 6;
  else
    v9 = 0x80000000;
  if (v6 <= 0x1FFFFFF)
    v10 = v9;
  else
    v10 = 0x7FFFFFFFLL;
  v11 = v8 | ((unint64_t)v10 << 32);
  if ((*(_BYTE *)(a1 + 22) & 8) != 0)
  {
    v15 = 0;
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 96);
    v13 = (v10 << 32) | 0x7FFFFFDF;
    if ((v12 & 0x1C00) != 0)
    {
      v13 = v11;
      v14 = 0;
    }
    else
    {
      v14 = 3221225488;
    }
    v11 = v13 | 0x7FFFFFDF00000000;
    if ((v12 & 0xE000) != 0)
    {
      v11 = v13;
      v15 = v14;
    }
    else
    {
      v15 = v14 | 0xC000001000000000;
    }
  }
  v17 = *a2;
  v16 = a2[1];
  if (*a2 <= (int)v15)
    v18 = v15;
  else
    v18 = *a2;
  v19 = HIDWORD(v15);
  if ((int)v16 <= SHIDWORD(v15))
    v20 = HIDWORD(v15);
  else
    v20 = v16;
  v21 = a2[2];
  v22 = __OFADD__(v17, v21);
  v23 = v17 + v21;
  v24 = v22;
  if ((a4 & 0x100000000) != 0)
  {
    v36 = (v17 >> 31) + 0x7FFFFFFF;
    if (!v24)
      v36 = v23;
    v37 = v15 + v11;
    if (__OFADD__((_DWORD)v15, (_DWORD)v11))
      v37 = (v15 >> 31) + 0x7FFFFFFF;
    if (v37 < v36)
      v36 = v37;
    v38 = a2[3];
    v22 = __OFADD__(v16, v38);
    v39 = v16 + v38;
    v40 = (v16 >> 31) + 0x7FFFFFFF;
    if (!v22)
      v40 = v39;
    v41 = HIDWORD(v11);
    v22 = __OFADD__((_DWORD)v19, (_DWORD)v41);
    v42 = v19 + v41;
    if (v22)
      v42 = (v19 >> 31) + 0x7FFFFFFF;
    if (v42 >= v40)
      v42 = v40;
    v43 = v18 <= v36 && (int)v20 <= v42;
    result = v43;
    if (!v43)
    {
      v36 = 0;
      v42 = 0;
      v18 = 0;
      v20 = 0;
    }
    v44 = v18 | (unint64_t)(v20 << 32);
    v22 = __OFSUB__(v36, v18);
    LODWORD(v45) = v36 - v18;
    v46 = (v36 >> 31) + 0x7FFFFFFF;
    if (v22)
      v45 = v46;
    else
      v45 = v45;
    v22 = __OFSUB__(v42, (_DWORD)v20);
    LODWORD(v20) = v42 - v20;
    v47 = (v42 >> 31) + 0x7FFFFFFF;
    if (v22)
      v20 = v47;
    else
      v20 = v20;
    *(_QWORD *)a2 = v44;
    *((_QWORD *)a2 + 1) = v45 | (v20 << 32);
  }
  else
  {
    if (v24)
      v23 = (v17 >> 31) + 0x7FFFFFFF;
    v25 = v15 + v11;
    if (__OFADD__((_DWORD)v15, (_DWORD)v11))
      v25 = (v15 >> 31) + 0x7FFFFFFF;
    if (v25 >= v23)
      v25 = v23;
    v26 = a2[3];
    v22 = __OFADD__(v16, v26);
    v27 = v16 + v26;
    if (v22)
      v27 = (v16 >> 31) + 0x7FFFFFFF;
    v28 = HIDWORD(v11);
    v22 = __OFADD__((_DWORD)v19, (_DWORD)v28);
    v29 = v19 + v28;
    if (v22)
      v29 = (v19 >> 31) + 0x7FFFFFFF;
    if (v29 >= v27)
      v29 = v27;
    if (v18 >= v25 || (int)v20 >= v29)
    {
      v25 = 0;
      v29 = 0;
      v18 = 0;
      v20 = 0;
    }
    v31 = v18 | (unint64_t)(v20 << 32);
    v22 = __OFSUB__(v25, v18);
    LODWORD(v32) = v25 - v18;
    v33 = (v25 >> 31) + 0x7FFFFFFF;
    if (v22)
      v32 = v33;
    else
      v32 = v32;
    v22 = __OFSUB__(v29, (_DWORD)v20);
    LODWORD(v20) = v29 - v20;
    v34 = (v29 >> 31) + 0x7FFFFFFF;
    if (v22)
      v20 = v34;
    else
      v20 = v20;
    *(_QWORD *)a2 = v31;
    *((_QWORD *)a2 + 1) = v32 | (v20 << 32);
    return (int)v32 > 0 && (int)v20 > 0;
  }
  return result;
}

void WebCore::RenderSVGModelObject::computeClipPath(WebCore::RenderSVGModelObject *this@<X0>, WebCore::AffineTransform *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  uint64_t v22;
  const WebCore::SVGElement *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  int v36;
  int v37;
  const WebCore::SVGElement *v38;
  WebCore *v39;
  WebCore *v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;

  v6 = *((_QWORD *)this + 18);
  v7 = *(_QWORD *)(v6 + 32);
  v8 = *(_DWORD *)(v7 + 20);
  if ((v8 & 0x20000) != 0)
  {
    if ((*(_BYTE *)(v7 + 45) & 2) != 0)
      v7 = *(_QWORD *)(*(_QWORD *)(v7 + 32) + 8);
    v9 = *(_QWORD *)(v7 + 88);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 32) + 40) + 20)
      || (v10 = *(_QWORD **)(v9 + 40), v10[41])
      || v10[38]
      || v10[39]
      || v10[40]
      || (v8 & 0x100000) != 0)
    {
      WebCore::RenderLayer::currentTransform(v6, (const WebCore::RenderElement *)0x1E, (uint64_t)&v40);
      v11 = *((double *)a2 + 2);
      v12 = *((double *)a2 + 3);
      v13 = *((double *)a2 + 1);
      v14 = v41 * v12 + *(double *)&v40 * v13;
      v15 = v43 * v11 + v42 * *(double *)a2;
      v16 = v43 * v12 + v42 * v13;
      v17 = v45 * v11 + v44 * *(double *)a2 + *((double *)a2 + 4);
      v18 = v45 * v12 + v44 * v13 + *((double *)a2 + 5);
      *(double *)a2 = v41 * v11 + *(double *)&v40 * *(double *)a2;
      *((double *)a2 + 1) = v14;
      *((double *)a2 + 2) = v15;
      *((double *)a2 + 3) = v16;
      *((double *)a2 + 4) = v17;
      *((double *)a2 + 5) = v18;
    }
  }
  if ((*((_BYTE *)this + 45) & 1) != 0)
    goto LABEL_14;
  v19 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if (!v19)
    goto LABEL_14;
  v20 = *(_WORD *)(v19 + 28);
  if ((v20 & 8) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19650E834);
  }
  v21 = *(_DWORD *)(v19 + 24);
  *(_DWORD *)(v19 + 24) = v21 + 2;
  if ((v20 & 0x20) == 0 || *(_QWORD *)(*(_QWORD *)(v19 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::useTag + 24))
  {
    if (v21)
    {
      *(_DWORD *)(v19 + 24) = v21;
    }
    else if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
    {
      WebCore::Node::removedLastRef((WebCore::Node *)v19, a2);
    }
LABEL_14:
    v22 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v22 + 28) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19650E854);
    }
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 1184))(v22) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19650E874);
    }
    *(_DWORD *)(v22 + 24) += 2;
    WebCore::pathFromGraphicsElement((WebCore *)v22, v23, a3);
    if (*(_DWORD *)(v22 + 24) == 2)
    {
      if ((*(_WORD *)(v22 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v22, v24);
    }
    else
    {
      *(_DWORD *)(v22 + 24) -= 2;
    }
    return;
  }
  v25 = WebCore::SVGUseElement::rendererClipChild((WebCore::SVGUseElement *)v19);
  if (v25)
  {
    v26 = v25;
    ++*(_DWORD *)(v25 + 16);
    if ((*(_BYTE *)(v25 + 45) & 0x10) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19650E894);
    }
    v27 = *(_QWORD *)(v25 + 144);
    if (v27)
      ++*(_DWORD *)(v27 + 8);
    WebCore::RenderLayer::currentTransform(v27, (const WebCore::RenderElement *)0x1E, (uint64_t)&v40);
    v28 = *((double *)a2 + 2);
    v29 = *((double *)a2 + 3);
    v30 = *((double *)a2 + 1);
    v31 = v41 * v29 + *(double *)&v40 * v30;
    v32 = v43 * v28 + v42 * *(double *)a2;
    v33 = v43 * v29 + v42 * v30;
    v34 = v45 * v28 + v44 * *(double *)a2 + *((double *)a2 + 4);
    v35 = v45 * v29 + v44 * v30 + *((double *)a2 + 5);
    *(double *)a2 = v41 * v28 + *(double *)&v40 * *(double *)a2;
    *((double *)a2 + 1) = v31;
    *((double *)a2 + 2) = v32;
    *((double *)a2 + 3) = v33;
    *((double *)a2 + 4) = v34;
    *((double *)a2 + 5) = v35;
    if (v27)
    {
      v36 = *(_DWORD *)(v27 + 8);
      if (!v36)
      {
        __break(0xC471u);
        JUMPOUT(0x19650E8B4);
      }
      *(_DWORD *)(v27 + 8) = v36 - 1;
    }
    v37 = *(_DWORD *)(v26 + 16);
    if (!v37)
    {
      __break(0xC471u);
      JUMPOUT(0x19650E8D4);
    }
    *(_DWORD *)(v26 + 16) = v37 - 1;
  }
  WebCore::SVGUseElement::clipChild((WebCore::SVGUseElement *)v19, &v40);
  v39 = v40;
  if (*(double *)&v40 != 0.0)
  {
    WebCore::pathFromGraphicsElement(v40, v38, a3);
    if (*((_DWORD *)v39 + 6) == 2)
    {
      if ((*((_WORD *)v39 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v39, v38);
    }
    else
    {
      *((_DWORD *)v39 + 6) -= 2;
    }
  }
  if (*(_DWORD *)(v19 + 24) == 2)
  {
    if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v19, v38);
  }
  else
  {
    *(_DWORD *)(v19 + 24) -= 2;
  }
  if (!v39)
    goto LABEL_14;
}

uint64_t WebCore::RenderSVGPath::operator new(uint64_t this)
{
  if (this == 264)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

double WebCore::RenderSVGPath::RenderSVGPath(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int32x4_t v4;
  double result;

  v3 = WebCore::RenderLayerModelObject::RenderLayerModelObject(a1, 73, a2, a3, 0, 4100);
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *(_QWORD *)(v3 + 176) = 0;
  v4 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v3 + 184) = v4;
  *(int32x4_t *)(v3 + 200) = v4;
  *(_BYTE *)(v3 + 216) = 1;
  *(_BYTE *)(v3 + 217) &= 0xF8u;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)v3 = off_1E3444EC8;
  result = 0.0;
  *(_OWORD *)(v3 + 232) = 0u;
  *(_OWORD *)(v3 + 248) = 0u;
  return result;
}

void WebCore::RenderSVGPath::~RenderSVGPath(WebCore::RenderSVGPath *this, void *a2)
{
  WTF *v3;
  WTF *v4;
  unsigned int *v5;
  uint64_t v6;
  char v7;

  v3 = (WTF *)*((_QWORD *)this + 31);
  if (v3)
  {
    *((_QWORD *)this + 31) = 0;
    *((_DWORD *)this + 64) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 29);
  if (v4)
  {
    *((_QWORD *)this + 29) = 0;
    *((_DWORD *)this + 60) = 0;
    WTF::fastFree(v4, a2);
  }
  *(_QWORD *)this = off_1E34484A0;
  v5 = (unsigned int *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v5)
  {
    v6 = v5[16];
    if ((_DWORD)v6 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_11[v6])(&v7, v5 + 2);
    v5[16] = -1;
    WTF::fastFree((WTF *)v5, a2);
  }
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  WTF *v3;
  WTF *v4;
  unsigned int *v5;
  uint64_t v6;
  void *v7;
  char v8;

  v3 = (WTF *)*((_QWORD *)this + 31);
  if (v3)
  {
    *((_QWORD *)this + 31) = 0;
    *((_DWORD *)this + 64) = 0;
    WTF::fastFree(v3, a2);
  }
  v4 = (WTF *)*((_QWORD *)this + 29);
  if (v4)
  {
    *((_QWORD *)this + 29) = 0;
    *((_DWORD *)this + 60) = 0;
    WTF::fastFree(v4, a2);
  }
  *(_QWORD *)this = off_1E34484A0;
  v5 = (unsigned int *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v5)
  {
    v6 = v5[16];
    if ((_DWORD)v6 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_11[v6])(&v8, v5 + 2);
    v5[16] = -1;
    WTF::fastFree((WTF *)v5, a2);
  }
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_QWORD *)this + 32) = 0;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v7);
  }
}

void WebCore::RenderSVGPath::updateShapeFromElement(WebCore::RenderSVGPath *this, void *a2)
{
  unsigned int *v3;
  uint64_t v4;
  void *v5;
  _BYTE *v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  float v12;
  int v13;
  int v14;
  uint64_t v15;
  int32x4_t v16;
  void *v17;
  WTF **v18;
  WebCore::Path *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  unsigned int *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  WTF *v33;
  _QWORD *v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;

  v3 = (unsigned int *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
  {
    v4 = v3[16];
    if ((_DWORD)v4 != -1)
      ((void (*)(unsigned int **, unsigned int *))off_1E3445DE8[v4])(&v35, v3 + 2);
    v3[16] = -1;
    WTF::fastFree((WTF *)v3, a2);
    v6 = (char *)this + 217;
    v7 = (unsigned int *)*((_QWORD *)this + 28);
    *((_BYTE *)this + 217) &= 0xF8u;
    if (v7)
      goto LABEL_12;
  }
  else
  {
    v6 = (char *)this + 217;
    *((_BYTE *)this + 217) &= 0xF8u;
  }
  WebCore::RenderSVGShape::createPath(this, &v35);
  v7 = v35;
  v8 = (unsigned int *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = v35;
  if (v8)
  {
    v9 = v8[16];
    if ((_DWORD)v9 != -1)
      ((void (*)(_QWORD **, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_11[v9])(&v34, v8 + 2);
    v8[16] = -1;
    WTF::fastFree((WTF *)v8, v5);
    v7 = (unsigned int *)*((_QWORD *)this + 28);
  }
  if (!v7)
  {
    v11 = 0;
    goto LABEL_18;
  }
LABEL_12:
  v10 = v7[16];
  v11 = 0;
  if (v10 == 2)
  {
    v15 = *((_QWORD *)v7 + 1);
    if (v15)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 240))(v15);
      goto LABEL_19;
    }
  }
  else if (v10 == 1)
  {
    v12 = WebCore::PathStream::computeBoundingRect((uint64_t)(v7 + 2), 1);
    goto LABEL_19;
  }
LABEL_18:
  v14 = 0;
  v13 = 0;
  v12 = 0.0;
LABEL_19:
  *((float *)this + 42) = v12;
  *((_DWORD *)this + 43) = v13;
  *((_DWORD *)this + 44) = v11;
  *((_DWORD *)this + 45) = v14;
  v16 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)((char *)this + 184) = v16;
  *(int32x4_t *)((char *)this + 200) = v16;
  WebCore::RenderSVGPath::updateMarkerPositions(this, v5);
  v18 = (WTF **)((char *)this + 232);
  if (*((_DWORD *)this + 60))
  {
    if (*((_DWORD *)this + 61))
      *((_DWORD *)this + 61) = 0;
    v33 = *v18;
    if (*v18)
    {
      *((_QWORD *)this + 29) = 0;
      *((_DWORD *)this + 60) = 0;
      WTF::fastFree(v33, v17);
    }
  }
  if (WebCore::RenderSVGShape::strokeWidth(this) != 0.0
    && *(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 17) + 24) + 80) != 1
    && (*(_BYTE *)(*((_QWORD *)this + 13) + 237) & 0xC0) != 0)
  {
    v36 = 0;
    v37 = 0;
    v35 = (unsigned int *)((char *)this + 232);
    v38 = 0;
    v19 = (WebCore::Path *)*((_QWORD *)this + 28);
    v20 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
    *v20 = off_1E3445E50;
    v20[1] = &v35;
    v34 = v20;
    WebCore::Path::applyElements(v19, &v34);
    v21 = v34;
    v34 = 0;
    if (v21)
      (*(void (**)(_QWORD *))(*v21 + 8))(v21);
    if (HIBYTE(v38) && !(_BYTE)v38)
    {
      v28 = v35;
      v29 = v35[3];
      if ((_DWORD)v29 == v35[2])
      {
        v30 = WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>((uint64_t)v35, v29 + 1, (unint64_t)&v36);
        v29 = v28[3];
        v31 = *(_QWORD *)v28;
        v32 = *(_QWORD *)v30;
      }
      else
      {
        v31 = *(_QWORD *)v35;
        v32 = v36;
      }
      *(_QWORD *)(v31 + 8 * v29) = v32;
      ++v28[3];
    }
  }
  v22 = *((_QWORD *)this + 28);
  v23 = *(_DWORD *)(v22 + 64);
  if (v23 == 2)
  {
    v24 = *(_QWORD *)(v22 + 8);
    if (v24)
    {
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 200))(v24) & 1) != 0)
        return;
      v22 = *((_QWORD *)this + 28);
      if (!v22)
        goto LABEL_41;
    }
    v23 = *(_DWORD *)(v22 + 64);
  }
  else if (!v23)
  {
    return;
  }
  if (v23 == 2)
  {
    v26 = *(_QWORD *)(v22 + 8);
    if (v26)
    {
      (*(void (**)(unsigned int **__return_ptr))(*(_QWORD *)v26 + 160))(&v35);
      v25 = *v6 & 0xF8;
      if ((_BYTE)v37)
        goto LABEL_38;
LABEL_42:
      v27 = 1;
      goto LABEL_43;
    }
LABEL_41:
    v25 = *v6 & 0xF8;
    goto LABEL_42;
  }
  if (v23 != 1 || *(_DWORD *)(v22 + 60) != 11)
    goto LABEL_41;
  v25 = *v6 & 0xF8;
LABEL_38:
  v27 = 2;
LABEL_43:
  *v6 = v27 | v25;
}

void WebCore::RenderSVGPath::updateMarkerPositions(WebCore::RenderSVGPath *this, void *a2)
{
  WTF **v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _WORD *v8;
  double v9;
  double v10;
  float v11;
  double v12;
  double v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  int v21;
  BOOL v22;
  WebCore::Path *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  WTF *v35;
  uint64_t *v36;
  uint64_t v37;
  WTF **v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;
  BOOL v43;
  char v44;
  __int128 v45;

  v3 = (WTF **)((char *)this + 248);
  if (*((_DWORD *)this + 64))
  {
    if (*((_DWORD *)this + 65))
      *((_DWORD *)this + 65) = 0;
    v35 = *v3;
    if (*v3)
    {
      *((_QWORD *)this + 31) = 0;
      *((_DWORD *)this + 64) = 0;
      WTF::fastFree(v35, a2);
    }
  }
  v4 = *(_QWORD **)(*((_QWORD *)this + 17) + 40);
  v5 = v4[1];
  if (v5 && *(_DWORD *)(v5 + 4) || (v6 = v4[2]) != 0 && *(_DWORD *)(v6 + 4) || (v7 = v4[3]) != 0 && *(_DWORD *)(v7 + 4))
  {
    v8 = *(_WORD **)(*((_QWORD *)this + 3) + 8);
    if ((v8[14] & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19650F0E8);
    }
    if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v8 + 1184))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19650F108);
    }
    if ((*(unsigned int (**)(_WORD *))(*(_QWORD *)v8 + 1152))(v8)
      && (WebCore::RenderLayerModelObject::svgMarkerResourceFromStyle(this, (const WTF::String *)(*(_QWORD *)(*((_QWORD *)this + 17) + 40) + 8), v9, v10, v11)|| WebCore::RenderLayerModelObject::svgMarkerResourceFromStyle(this, (const WTF::String *)(*(_QWORD *)(*((_QWORD *)this + 17) + 40) + 16), v12, v13, v14)|| WebCore::RenderLayerModelObject::svgMarkerResourceFromStyle(this, (const WTF::String *)(*(_QWORD *)(*((_QWORD *)this + 17) + 40) + 24), v12, v13, v14)))
    {
      v15 = WebCore::RenderLayerModelObject::svgMarkerResourceFromStyle(this, (const WTF::String *)(*(_QWORD *)(*((_QWORD *)this + 17) + 40) + 8), v12, v13, v14);
      if (!v15)
      {
        v22 = 0;
LABEL_25:
        v38 = v3;
        v39 = 0u;
        v40 = 0u;
        v41 = 0u;
        v42 = 0;
        v43 = v22;
        v44 = 0;
        v23 = (WebCore::Path *)*((_QWORD *)this + 28);
        v24 = (_QWORD *)WTF::fastMalloc((WTF *)0x10);
        *v24 = off_1E3445E78;
        v24[1] = &v38;
        *(_QWORD *)&v45 = v24;
        WebCore::Path::applyElements(v23, &v45);
        v25 = v45;
        *(_QWORD *)&v45 = 0;
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
        v26 = (uint64_t)v38;
        v27 = atan2f(*(float *)&v41 - *((float *)&v40 + 2), *((float *)&v40 + 3) - *((float *)&v40 + 1));
        LODWORD(v45) = 2;
        *(_QWORD *)((char *)&v45 + 4) = *(_QWORD *)((char *)&v39 + 4);
        *((float *)&v45 + 3) = v27 * 57.296;
        v28 = *(unsigned int *)(v26 + 12);
        if ((_DWORD)v28 == *(_DWORD *)(v26 + 8))
        {
          v29 = WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v26, v28 + 1, (unint64_t)&v45);
          v28 = *(unsigned int *)(v26 + 12);
          v30 = *(_QWORD *)v26;
          v31 = *(_OWORD *)v29;
        }
        else
        {
          v30 = *(_QWORD *)v26;
          v31 = v45;
        }
        *(_OWORD *)(v30 + 16 * v28) = v31;
        ++*(_DWORD *)(v26 + 12);
        return;
      }
      v16 = *(_QWORD *)(*(_QWORD *)(v15 + 24) + 8);
      if ((*(_WORD *)(v16 + 28) & 0x20) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19650F128);
      }
      if (*(_QWORD *)(*(_QWORD *)(v16 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::markerTag + 24))
      {
        __break(0xC471u);
        JUMPOUT(0x19650F148);
      }
      *(_DWORD *)(v16 + 24) += 2;
      v17 = *(_QWORD **)(v16 + 248);
      v18 = v17[3];
      if (v18 && *(_DWORD *)(v18 - 12))
      {
        v32 = *(unsigned int *)(v18 - 4);
        if ((_DWORD)v32)
        {
          v33 = 8 * v32;
          v34 = (uint64_t *)v17[3];
          while ((unint64_t)(*v34 + 1) <= 1)
          {
            ++v34;
            v33 -= 8;
            if (!v33)
              goto LABEL_19;
          }
        }
        else
        {
          v34 = (uint64_t *)v17[3];
        }
        v36 = (uint64_t *)(v18 + 8 * v32);
        if (v34 != v36)
        {
          v37 = *v34;
LABEL_50:
          if (*(_QWORD *)(v37 + 8))
          {
            v19 = v17 + 6;
            goto LABEL_20;
          }
          while (++v34 != v36)
          {
            v37 = *v34;
            if ((unint64_t)(*v34 + 1) > 1)
            {
              if (v34 != v36)
                goto LABEL_50;
              break;
            }
          }
        }
      }
LABEL_19:
      v19 = v17 + 5;
LABEL_20:
      v21 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v19 + 32))(*v19);
      if (v16)
      {
        if (*(_DWORD *)(v16 + 24) == 2)
        {
          if ((*(_WORD *)(v16 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v16, v20);
        }
        else
        {
          *(_DWORD *)(v16 + 24) -= 2;
        }
      }
      v22 = v21 == 0;
      goto LABEL_25;
    }
  }
}

float WebCore::RenderSVGPath::adjustStrokeBoundingBoxForZeroLengthLinecaps(uint64_t a1, float a2, float a3, float a4, float a5)
{
  float v10;
  uint64_t v11;
  float v12;
  float *v13;
  float v14;
  float v15;
  float v16;
  float v17;

  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 24) + 80) == 1)
    return a2;
  v10 = WebCore::RenderSVGShape::strokeWidth((WebCore::RenderSVGShape *)a1);
  v11 = *(unsigned int *)(a1 + 244);
  if (!(_DWORD)v11 || v10 <= 0.0)
    return a2;
  v12 = v10 * 0.5;
  v13 = (float *)(*(_QWORD *)(a1 + 232) + 4);
  do
  {
    v14 = *(v13 - 1) - v12;
    v15 = *v13 - v12;
    if (a4 <= 0.0 || a5 <= 0.0)
    {
      a4 = v10;
      a5 = v10;
    }
    else
    {
      v16 = v10 + v14;
      if (v14 >= a2)
        v14 = a2;
      v17 = v10 + v15;
      if (v15 >= a3)
        v15 = a3;
      if ((float)(a2 + a4) >= v16)
        v16 = a2 + a4;
      if ((float)(a3 + a5) >= v17)
        v17 = a3 + a5;
      a4 = v16 - v14;
      a5 = v17 - v15;
    }
    v13 += 2;
    a2 = v14;
    a3 = v15;
    --v11;
  }
  while (v11);
  return v14;
}

WebCore::RenderSVGShape *WebCore::RenderSVGPath::strokeShape(WebCore::RenderSVGShape *this, WebCore::GraphicsContext *a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  int32x2_t v12;
  __n128 v13;
  float v14;
  int32x2_t v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  int v22;
  int v23;
  BOOL v24;
  char *v25;
  __int128 *v26;
  __int128 *v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v39;
  float64x2_t v40[3];
  __n128 v41;

  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 17) + 24) + 80) != 1)
  {
    v3 = (uint64_t)this;
    v4 = *((_QWORD *)this + 13);
    if (*(_BYTE *)(v4 + 248))
      v5 = *(_BYTE *)(v4 + 248) == 11;
    else
      v5 = 1;
    if (!v5)
    {
      if (*(_BYTE *)(v4 + 250))
      {
        if (*(float *)(v4 + 244) == 0.0)
          return this;
      }
      else if (!*(_DWORD *)(v4 + 244))
      {
        return this;
      }
    }
    if (*((_QWORD *)this + 28))
    {
      this = (WebCore::RenderSVGShape *)WebCore::RenderSVGShape::strokeShape(this, a2);
      if (*(_DWORD *)(v3 + 244))
      {
        v40[0] = (float64x2_t)xmmword_1969FDF98;
        v40[1] = (float64x2_t)unk_1969FDFA8;
        v40[2] = (float64x2_t)xmmword_1969FDFB8;
        if ((*(_BYTE *)(*(_QWORD *)(v3 + 136) + 9) & 4) != 0)
        {
          v6 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
          if ((*(_WORD *)(v6 + 28) & 0x20) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19650F7ACLL);
          }
          if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v6 + 1184))(*(_QWORD *)(*(_QWORD *)(v3 + 24) + 8)) & 1) == 0)
          {
            __break(0xC471u);
            JUMPOUT(0x19650F7CCLL);
          }
          *(_DWORD *)(v6 + 24) += 2;
          (*(void (**)(float64x2_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v6 + 1320))(v40, v6, 1);
          if (*(_DWORD *)(v6 + 24) == 2)
          {
            if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v6, v7);
          }
          else
          {
            *(_DWORD *)(v6 + 24) -= 2;
          }
        }
        (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
        v8 = *((_DWORD *)a2 + 44);
        if (v8 != 1)
        {
          if (v8 == 2)
          {
            v38 = (_DWORD *)*((_QWORD *)a2 + 14);
            if (v38)
            {
              ++*v38;
              v39 = *((unsigned int *)a2 + 22);
              if ((_DWORD)v39 != -1)
                ((void (*)(__n128 *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v39])(&v41, (char *)a2 + 24);
              *((_QWORD *)a2 + 3) = v38;
              *((_DWORD *)a2 + 22) = 2;
              *((_DWORD *)a2 + 46) |= 1u;
              (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a2 + 88))(a2, (char *)a2 + 8);
              goto LABEL_19;
            }
          }
          goto LABEL_18;
        }
        if (*((_DWORD *)a2 + 30) || (v19 = *((_QWORD *)a2 + 14)) == 0)
        {
LABEL_18:
          WebCore::GraphicsContext::setFillColor(a2, (WebCore::GraphicsContext *)((char *)a2 + 96));
LABEL_19:
          if (!*(_DWORD *)(v3 + 244))
            return (WebCore::RenderSVGShape *)(*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
          v9 = 0;
          while (1)
          {
            v10 = *(_QWORD *)(v3 + 232);
            if ((byte_1ECE84959 & 1) != 0)
            {
              if (dword_1ECE84A20 != -1)
              {
                if (!dword_1ECE84A20)
                  goto LABEL_26;
                ((void (*)(__n128 *, void *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_7[dword_1ECE84A20])(&v41, &unk_1ECE849E8);
              }
              dword_1ECE84A20 = 0;
            }
            else
            {
              *(_QWORD *)&dword_1ECE84A20 = 0;
              unk_1ECE84A10 = 0u;
              unk_1ECE84A00 = 0u;
              unk_1ECE849F0 = 0u;
              unk_1ECE849E0 = 0u;
              byte_1ECE84959 = 1;
            }
LABEL_26:
            if ((*(_DWORD *)(*(_QWORD *)(v3 + 104) + 236) & 0xC000) == 0x8000)
            {
              v11 = WebCore::RenderSVGShape::strokeWidth((WebCore::RenderSVGShape *)v3);
              *(float *)v12.i32 = v11 * 0.5;
              v41.n128_u64[0] = (unint64_t)vsub_f32(*(float32x2_t *)(v10 + 8 * v9), (float32x2_t)vdup_lane_s32(v12, 0));
              v41.n128_f32[2] = v11;
              v41.n128_f32[3] = v11;
              v13.n128_f64[0] = WebCore::Path::addRect((WebCore::Path *)&unk_1ECE849E0, (const WebCore::FloatRect *)&v41);
            }
            else
            {
              v14 = WebCore::RenderSVGShape::strokeWidth((WebCore::RenderSVGShape *)v3);
              *(float *)v15.i32 = v14 * 0.5;
              v41.n128_u64[0] = (unint64_t)vsub_f32(*(float32x2_t *)(v10 + 8 * v9), (float32x2_t)vdup_lane_s32(v15, 0));
              v41.n128_f32[2] = v14;
              v41.n128_f32[3] = v14;
              v13 = WebCore::Path::addEllipseInRect((WebCore::Path *)&unk_1ECE849E0, &v41);
            }
            v16 = (__int128 *)&unk_1ECE849E0;
            if ((*(_WORD *)(*(_QWORD *)(v3 + 136) + 8) & 0x400) == 0)
              goto LABEL_40;
            {
              v17 = qword_1EE2F95E8;
              v18 = dword_1ECE84A20;
              if ((_DWORD)qword_1EE2F95E8 == -1)
              {
                if (dword_1ECE84A20 == 0xFFFFFFFFLL)
                  goto LABEL_39;
LABEL_38:
                v41.n128_u64[0] = (unint64_t)&WebCore::RenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath
                                + 8;
                ((void (*)(__n128 *, char *, void *, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_12__assignmentINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEEE16__generic_assignB8sn180100IRKNS0_17__copy_assignmentISD_LNS0_6_TraitE1EEEEEvOT_EUlRSL_OT0_E_JRSE_SK_EEEDcmSM_DpOT0____fdiagonal_2[v18])(&v41, (char *)&WebCore::RenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath+ 8, &unk_1ECE849E8, v13);
                goto LABEL_39;
              }
              if (dword_1ECE84A20 != 0xFFFFFFFFLL)
                goto LABEL_38;
            }
            else
            {
              v17 = 0;
              qword_1EE2F95E8 = 0;
              v13 = 0uLL;
              xmmword_1EE2F95C8 = 0u;
              unk_1EE2F95D8 = 0u;
              WebCore::RenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath = 0u;
              unk_1EE2F95B8 = 0u;
              v18 = dword_1ECE84A20;
              if (dword_1ECE84A20 != -1)
                goto LABEL_38;
            }
            ((void (*)(__n128 *, char *, __n128))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_11[v17])(&v41, (char *)&WebCore::RenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath+ 8, v13);
            LODWORD(qword_1EE2F95E8) = -1;
LABEL_39:
            WebCore::Path::transform((WebCore::Path *)&WebCore::RenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath, v40);
            v16 = &WebCore::RenderSVGShape::nonScalingStrokePath(WebCore::Path const*,WebCore::AffineTransform const&)const::tempPath;
LABEL_40:
            (*(void (**)(WebCore::GraphicsContext *, __int128 *, __n128))(*(_QWORD *)a2 + 176))(a2, v16, v13);
            if (++v9 >= (unint64_t)*(unsigned int *)(v3 + 244))
              return (WebCore::RenderSVGShape *)(*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
          }
        }
        v20 = *(_QWORD *)(v19 + 8);
        if (__ldaxr((unsigned __int8 *)v20))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v20))
        {
          goto LABEL_52;
        }
        MEMORY[0x19AEA534C](v20);
LABEL_52:
        ++*(_QWORD *)(v20 + 8);
        v22 = __ldxr((unsigned __int8 *)v20);
        if (v22 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v20))
          {
LABEL_57:
            v41.n128_u64[0] = v19;
            v23 = *((_DWORD *)a2 + 44);
            v24 = v23 == 1;
            if (v23 == 1)
              v25 = (char *)a2 + 112;
            else
              v25 = 0;
            v26 = (__int128 *)(v25 + 16);
            if (v24)
              v27 = v26;
            else
              v27 = (__int128 *)&WebCore::identity;
            WebCore::SourceBrush::setGradient((uint64_t)a2 + 8, (uint64_t *)&v41, v27);
            *((_DWORD *)a2 + 46) |= 1u;
            (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a2 + 88))(a2, (char *)a2 + 8);
            v29 = v41.n128_u64[0];
            v41.n128_u64[0] = 0;
            if (!v29)
              goto LABEL_19;
            v30 = *(_QWORD *)(v29 + 8);
            if (__ldaxr((unsigned __int8 *)v30))
            {
              __clrex();
            }
            else if (!__stxr(1u, (unsigned __int8 *)v30))
            {
              goto LABEL_68;
            }
            MEMORY[0x19AEA534C](v30);
LABEL_68:
            v32 = *(_QWORD *)(v30 + 8);
            v33 = v32 - 1;
            *(_QWORD *)(v30 + 8) = v32 - 1;
            if (v32 == 1)
            {
              v37 = *(_QWORD *)(v30 + 16);
              v34 = *(_QWORD *)(v30 + 24);
              *(_QWORD *)(v30 + 24) = 0;
              v35 = v37 != 0;
            }
            else
            {
              v34 = 0;
              v35 = 1;
            }
            v36 = __ldxr((unsigned __int8 *)v30);
            if (v36 == 1)
            {
              if (!__stlxr(0, (unsigned __int8 *)v30))
              {
LABEL_75:
                if (!v33)
                {
                  if (v34)
                    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
                  if (!v35)
                    WTF::fastFree((WTF *)v30, v28);
                }
                goto LABEL_19;
              }
            }
            else
            {
              __clrex();
            }
            WTF::Lock::unlockSlow((WTF::Lock *)v30);
            goto LABEL_75;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v20);
        goto LABEL_57;
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderSVGPath::shapeDependentStrokeContains(uint64_t a1, float *a2, int a3)
{
  uint64_t v6;
  unint64_t i;
  float v8;
  unint64_t v9;
  float *v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;

  if (WebCore::RenderSVGShape::shapeDependentStrokeContains((_QWORD *)a1, a2, a3))
    return 1;
  if (*(_DWORD *)(a1 + 244))
  {
    v6 = 0;
    for (i = 0; i < v9; ++i)
    {
      v8 = WebCore::RenderSVGShape::strokeWidth((WebCore::RenderSVGShape *)a1);
      v9 = *(unsigned int *)(a1 + 244);
      if ((*(_DWORD *)(*(_QWORD *)(a1 + 104) + 236) & 0xC000) == 0x8000)
      {
        if (i >= v9)
          goto LABEL_22;
        v10 = (float *)(*(_QWORD *)(a1 + 232) + v6);
        v11 = *v10 - (float)(v8 * 0.5);
        v12 = v10[1] - (float)(v8 * 0.5);
        v13 = a2[1];
        v14 = v8 + v11;
        v15 = v8 + v12;
        if (v11 <= *a2 && v14 >= *a2 && v12 <= v13 && v15 >= v13)
          return 1;
      }
      else
      {
        if (i >= v9)
        {
LABEL_22:
          __break(0xC471u);
          JUMPOUT(0x19650F95CLL);
        }
        if ((float)((float)((float)(a2[1] - *(float *)(*(_QWORD *)(a1 + 232) + v6 + 4))
                           * (float)(a2[1] - *(float *)(*(_QWORD *)(a1 + 232) + v6 + 4)))
                   + (float)((float)(*a2 - *(float *)(*(_QWORD *)(a1 + 232) + v6))
                           * (float)(*a2 - *(float *)(*(_QWORD *)(a1 + 232) + v6)))) < (float)((float)(v8 * v8) * 0.25))
          return 1;
      }
      v6 += 8;
    }
  }
  return 0;
}

void WebCore::RenderSVGPath::drawMarkers(WebCore::RenderSVGPath *this, WebCore::PaintInfo *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  uint64_t v11;
  void *v13;
  WTF *v14;
  double v15;
  double v16;
  float v17;
  uint64_t v18;
  double v19;
  double v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  float *v33;
  int *v34;
  float v35;
  uint64_t v36;
  WTF *v37;
  __n128 v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t j;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  int v46;
  _QWORD *v47;
  _BYTE v49[48];
  _QWORD v50[2];
  __int128 v51;
  uint64_t v52;
  _QWORD v53[4];

  if (!*((_DWORD *)this + 65))
    return;
  if (byte_1ECE8495A == 1)
  {
    v3 = dword_1ECE84988;
  }
  else
  {
    v3 = 0;
    *(_QWORD *)&dword_1ECE84988 = 0;
    qword_1ECE84980 = 0;
    byte_1ECE8495A = 1;
  }
  dword_1ECE84988 = v3 + 1;
  v4 = *((_QWORD *)this + 1);
  if (v4)
  {
    if (*(_QWORD *)(v4 + 8) && qword_1ECE84980)
    {
      v5 = *(_DWORD *)(qword_1ECE84980 - 8);
      v6 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
      v7 = 9 * ((v6 + ~(v6 << 13)) ^ ((v6 + ~(v6 << 13)) >> 8));
      v8 = (v7 ^ (v7 >> 15)) + ~((v7 ^ (v7 >> 15)) << 27);
      v9 = v5 & ((v8 >> 31) ^ v8);
      for (i = 1; ; ++i)
      {
        v11 = *(_QWORD *)(qword_1ECE84980 + 8 * v9);
        if (!v11)
          break;
        if (v11 != -1 && v11 == v4)
          return;
        v9 = (v9 + i) & v5;
      }
    }
    goto LABEL_17;
  }
  v4 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = this;
  v14 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v4;
  if (!v14)
  {
LABEL_17:
    ++*(_DWORD *)v4;
    goto LABEL_18;
  }
  if (*(_DWORD *)v14 != 1)
  {
    --*(_DWORD *)v14;
    goto LABEL_17;
  }
  WTF::fastFree(v14, v13);
  v4 = *((_QWORD *)this + 1);
  if (v4)
    goto LABEL_17;
LABEL_18:
  WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderElement>((uint64_t)&qword_1ECE84980, this, (uint64_t)v50);
  v18 = WebCore::RenderLayerModelObject::svgMarkerResourceFromStyle(this, (const WTF::String *)(*(_QWORD *)(*((_QWORD *)this + 17) + 40) + 8), v15, v16, v17);
  v22 = v18;
  if (v18)
    ++*(_DWORD *)(v18 + 16);
  v23 = WebCore::RenderLayerModelObject::svgMarkerResourceFromStyle(this, (const WTF::String *)(*(_QWORD *)(*((_QWORD *)this + 17) + 40) + 16), v19, v20, v21);
  v27 = v23;
  if (v23)
    ++*(_DWORD *)(v23 + 16);
  v28 = WebCore::RenderLayerModelObject::svgMarkerResourceFromStyle(this, (const WTF::String *)(*(_QWORD *)(*((_QWORD *)this + 17) + 40) + 24), v24, v25, v26);
  v29 = v28;
  if (v28)
  {
    ++*(_DWORD *)(v28 + 16);
LABEL_24:
    v30 = WebCore::RenderSVGShape::strokeWidth(this);
    v31 = *((unsigned int *)this + 65);
    if ((_DWORD)v31)
    {
      v32 = v30;
      v33 = (float *)*((_QWORD *)this + 31);
      v34 = (int *)&v33[4 * v31];
      while (1)
      {
        v35 = *v33;
        v36 = v22;
        if (!*(_DWORD *)v33)
          goto LABEL_29;
        if (LODWORD(v35) != 2)
          break;
        v36 = v29;
        if (v29)
        {
LABEL_32:
          if ((*(_BYTE *)(v36 + 21) & 0x80) != 0)
          {
            v37 = (WTF *)*((_QWORD *)a2 + 10);
            (*(void (**)(WTF *, uint64_t))(*(_QWORD *)v37 + 96))(v37, 1);
            v38.n128_f64[0] = WebCore::RenderSVGResourceMarker::markerTransformation((WebCore::RenderSVGResourceMarker *)v36, (const WebCore::FloatPoint *)(v33 + 1), v33[3], v32, (uint64_t)v49);
            v39 = *(_QWORD *)(v36 + 144);
            if (v39)
              ++*(_DWORD *)(v39 + 8);
            v40 = *(_QWORD *)(v39 + 24);
            *(_QWORD *)(v39 + 24) = v40 | 0x400000000;
            (*(void (**)(WTF *, _BYTE *, __n128))(*(_QWORD *)v37 + 656))(v37, v49, v38);
            for (j = *(_QWORD *)(v39 + 40); j; j = *(_QWORD *)(j + 40))
            {
              v42 = *(_QWORD *)(j + 32);
              if ((*(_BYTE *)(v42 + 45) & 1) != 0 && *(_BYTE *)(v42 + 46) == 88)
                break;
            }
            v50[0] = j;
            v50[1] = 0;
            v51 = xmmword_1969FCA90;
            v53[2] = 0;
            v52 = 0;
            v53[0] = 0;
            *(_QWORD *)((char *)v53 + 6) = 0;
            WebCore::RenderLayer::paintLayer(v39, v37, (uint64_t)v50, ((unint64_t)*(unsigned int *)(*(_QWORD *)(v39 + 32) + 20) >> 6) & 0x400 ^ 0x404);
            *(_QWORD *)(v39 + 24) = *(_QWORD *)(v39 + 24) & 0xFFFFFFFBFFFFFFFFLL | (((v40 >> 34) & 1) << 34);
            v43 = *(_DWORD *)(v39 + 8);
            if (!v43)
            {
              __break(0xC471u);
              JUMPOUT(0x19650FD40);
            }
            *(_DWORD *)(v39 + 8) = v43 - 1;
            (*(void (**)(WTF *, uint64_t))(*(_QWORD *)v37 + 104))(v37, 1);
          }
        }
LABEL_41:
        v33 += 4;
        if (v33 == (float *)v34)
          goto LABEL_42;
      }
      v36 = v27;
      if (LODWORD(v35) != 1)
        goto LABEL_41;
LABEL_29:
      if (v36)
        goto LABEL_32;
      goto LABEL_41;
    }
LABEL_42:
    if (v29)
    {
      v44 = *(_DWORD *)(v29 + 16);
      if (!v44)
      {
        __break(0xC471u);
        JUMPOUT(0x19650FD6CLL);
      }
      *(_DWORD *)(v29 + 16) = v44 - 1;
    }
    if (v27)
    {
      v45 = *(_DWORD *)(v27 + 16);
      if (!v45)
      {
        __break(0xC471u);
        JUMPOUT(0x19650FD8CLL);
      }
      *(_DWORD *)(v27 + 16) = v45 - 1;
    }
    if (v22)
    {
      v46 = *(_DWORD *)(v22 + 16);
      if (!v46)
      {
        __break(0xC471u);
        JUMPOUT(0x19650FDACLL);
      }
      *(_DWORD *)(v22 + 16) = v46 - 1;
    }
    goto LABEL_51;
  }
  if (v22 | v27)
    goto LABEL_24;
LABEL_51:
  if (v4)
  {
    v47 = *(_QWORD **)(v4 + 8);
    if (v47)
      WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderElement>((uint64_t)&qword_1ECE84980, v47);
    if (*(_DWORD *)v4 == 1)
      WTF::fastFree((WTF *)v4, v47);
    else
      --*(_DWORD *)v4;
  }
}

float WebCore::RenderSVGPath::computeMarkerBoundingBox(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  uint64_t v12;
  float v14;
  void *v15;
  WTF *v16;
  double v17;
  double v18;
  float v19;
  uint64_t v20;
  double v21;
  double v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  WebCore::RenderSVGResourceMarker *v31;
  uint64_t v32;
  float *v33;
  uint64_t v34;
  float v35;
  float v36;
  float v37;
  float v38;
  WebCore::RenderSVGResourceMarker *v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  int v48;
  int v49;
  int v50;
  _QWORD *v51;
  _BYTE v53[48];

  if (!*(_DWORD *)(a1 + 260))
    return 0.0;
  if (byte_1ECE8495B == 1)
  {
    v4 = dword_1ECE84998;
  }
  else
  {
    v4 = 0;
    *(_QWORD *)&dword_1ECE84998 = 0;
    qword_1ECE84990 = 0;
    byte_1ECE8495B = 1;
  }
  dword_1ECE84998 = v4 + 1;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    if (*(_QWORD *)(v5 + 8) && qword_1ECE84990)
    {
      v6 = *(_DWORD *)(qword_1ECE84990 - 8);
      v7 = (~(v5 << 32) + v5) ^ ((unint64_t)(~(v5 << 32) + v5) >> 22);
      v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
      v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
      v10 = v6 & ((v9 >> 31) ^ v9);
      for (i = 1; ; ++i)
      {
        v12 = *(_QWORD *)(qword_1ECE84990 + 8 * v10);
        if (!v12)
          break;
        if (v12 != -1 && v12 == v5)
          return 0.0;
        v10 = (v10 + i) & v6;
      }
    }
    goto LABEL_18;
  }
  v5 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v5 = 1;
  *(_QWORD *)(v5 + 8) = a1;
  v16 = *(WTF **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  if (!v16)
  {
LABEL_18:
    ++*(_DWORD *)v5;
    goto LABEL_19;
  }
  if (*(_DWORD *)v16 != 1)
  {
    --*(_DWORD *)v16;
    goto LABEL_18;
  }
  WTF::fastFree(v16, v15);
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
    goto LABEL_18;
LABEL_19:
  WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderElement>((uint64_t)&qword_1ECE84990, (_QWORD *)a1, (uint64_t)v53);
  v20 = WebCore::RenderLayerModelObject::svgMarkerResourceFromStyle((WebCore::RenderLayerModelObject *)a1, (const WTF::String *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 40) + 8), v17, v18, v19);
  v24 = v20;
  if (v20)
    ++*(_DWORD *)(v20 + 16);
  v25 = WebCore::RenderLayerModelObject::svgMarkerResourceFromStyle((WebCore::RenderLayerModelObject *)a1, (const WTF::String *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 40) + 16), v21, v22, v23);
  v29 = v25;
  if (v25)
    ++*(_DWORD *)(v25 + 16);
  v30 = WebCore::RenderLayerModelObject::svgMarkerResourceFromStyle((WebCore::RenderLayerModelObject *)a1, (const WTF::String *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 40) + 24), v26, v27, v28);
  v31 = (WebCore::RenderSVGResourceMarker *)v30;
  if (v30)
  {
    ++*(_DWORD *)(v30 + 16);
LABEL_25:
    v32 = *(unsigned int *)(a1 + 260);
    if ((_DWORD)v32)
    {
      v33 = *(float **)(a1 + 248);
      v34 = 16 * v32;
      v35 = 0.0;
      v36 = 0.0;
      v37 = 0.0;
      v14 = 0.0;
      while (1)
      {
        v38 = *v33;
        v39 = (WebCore::RenderSVGResourceMarker *)v24;
        if (!*(_DWORD *)v33)
          goto LABEL_30;
        if (LODWORD(v38) != 2)
          break;
        v39 = v31;
        if (v31)
        {
LABEL_33:
          v40 = v33[3];
          v41 = WebCore::RenderSVGShape::strokeWidth((WebCore::RenderSVGShape *)a1);
          WebCore::RenderSVGResourceMarker::markerTransformation(v39, (const WebCore::FloatPoint *)(v33 + 1), v40, v41, (uint64_t)v53);
          v42 = WebCore::RenderSVGResourceMarker::computeMarkerBoundingBox((uint64_t)v39, a2, (WebCore::AffineTransform *)v53);
          if (v44 <= 0.0 || v45 <= 0.0)
          {
            v45 = v35;
            v44 = v36;
            v43 = v37;
            v42 = v14;
          }
          else if (v36 > 0.0 && v35 > 0.0)
          {
            v46 = v44 + v42;
            if (v42 >= v14)
              v42 = v14;
            v47 = v45 + v43;
            if (v43 >= v37)
              v43 = v37;
            if ((float)(v36 + v14) >= v46)
              v46 = v36 + v14;
            if ((float)(v35 + v37) >= v47)
              v47 = v35 + v37;
            v44 = v46 - v42;
            v45 = v47 - v43;
          }
          v35 = v45;
          v36 = v44;
          v37 = v43;
          v14 = v42;
        }
LABEL_47:
        v33 += 4;
        v34 -= 16;
        if (!v34)
          goto LABEL_51;
      }
      v39 = (WebCore::RenderSVGResourceMarker *)v29;
      if (LODWORD(v38) != 1)
        goto LABEL_47;
LABEL_30:
      if (v39)
        goto LABEL_33;
      goto LABEL_47;
    }
    v14 = 0.0;
LABEL_51:
    if (v31)
    {
      v48 = *((_DWORD *)v31 + 4);
      if (!v48)
      {
        __break(0xC471u);
        JUMPOUT(0x1965101A4);
      }
      *((_DWORD *)v31 + 4) = v48 - 1;
    }
    if (v29)
    {
      v49 = *(_DWORD *)(v29 + 16);
      if (!v49)
      {
        __break(0xC471u);
        JUMPOUT(0x1965101C4);
      }
      *(_DWORD *)(v29 + 16) = v49 - 1;
    }
    if (v24)
    {
      v50 = *(_DWORD *)(v24 + 16);
      if (!v50)
      {
        __break(0xC471u);
        JUMPOUT(0x1965101E4);
      }
      *(_DWORD *)(v24 + 16) = v50 - 1;
    }
    goto LABEL_60;
  }
  v14 = 0.0;
  if (v24 | v29)
    goto LABEL_25;
LABEL_60:
  if (v5)
  {
    v51 = *(_QWORD **)(v5 + 8);
    if (v51)
      WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderElement>((uint64_t)&qword_1ECE84990, v51);
    if (*(_DWORD *)v5 == 1)
      WTF::fastFree((WTF *)v5, v51);
    else
      --*(_DWORD *)v5;
  }
  return v14;
}

uint64_t WebCore::RenderSVGPath::isRenderingDisabled(WebCore::RenderSVGPath *this)
{
  uint64_t v1;
  int v2;
  uint64_t result;

  v1 = *((_QWORD *)this + 28);
  if (!v1)
    return 1;
  v2 = *(_DWORD *)(v1 + 64);
  if (v2 != 2)
    return !v2;
  result = *(_QWORD *)(v1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
  return result;
}

void WebCore::RenderSVGPath::styleDidChange(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  WebCore::SVGPathElement *v3;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  WebCore::SVGPathElement *v10;

  v3 = *(WebCore::SVGPathElement **)(*(_QWORD *)(a1 + 24) + 8);
  if ((*((_WORD *)v3 + 14) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196510354);
  }
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v3 + 1184))(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196510374);
  }
  v8 = *(_QWORD *)(*((_QWORD *)v3 + 12) + 24);
  v9 = *(_QWORD *)(WebCore::SVGNames::pathTag + 24);
  if (v8 == v9)
    v10 = v3;
  else
    v10 = 0;
  if (v10)
    *((_DWORD *)v10 + 6) += 2;
  if (v8 == v9
    && (!a3
     || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 64) + 64) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 56)
                                                                                               + 64)
                                                                                   + 64)))
  {
    WebCore::SVGPathElement::invalidateMPathDependencies(v3, v7);
  }
  if (v10)
  {
    if (*((_DWORD *)v10 + 6) == 2)
    {
      if ((*((_WORD *)v10 + 15) & 0x400) == 0)
        WebCore::Node::removedLastRef(v10, v7);
    }
    else
    {
      *((_DWORD *)v10 + 6) -= 2;
    }
  }
  WebCore::RenderLayerModelObject::styleDidChange(a1, a2, a3);
}

uint64_t WebCore::RenderSVGRect::operator new(uint64_t this)
{
  if (this == 232)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

int32x4_t WebCore::RenderSVGRect::RenderSVGRect(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int32x4_t result;

  v3 = WebCore::RenderLayerModelObject::RenderLayerModelObject(a1, 74, a2, a3, 0, 4100);
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *(_QWORD *)(v3 + 176) = 0;
  result = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)(v3 + 184) = result;
  *(int32x4_t *)(v3 + 200) = result;
  *(_BYTE *)(v3 + 216) = 1;
  *(_BYTE *)(v3 + 217) &= 0xF8u;
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)v3 = off_1E34452A0;
  return result;
}

void WebCore::RenderSVGRect::~RenderSVGRect(WebCore::RenderSVGRect *this, void *a2)
{
  unsigned int *v3;
  uint64_t v4;
  char v5;

  *(_QWORD *)this = off_1E34484A0;
  v3 = (unsigned int *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
  {
    v4 = v3[16];
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_11[v4])(&v5, v3 + 2);
    v3[16] = -1;
    WTF::fastFree((WTF *)v3, a2);
  }
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  unsigned int *v3;
  uint64_t v4;
  void *v5;
  char v6;

  *(_QWORD *)this = off_1E34484A0;
  v3 = (unsigned int *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
  {
    v4 = v3[16];
    if ((_DWORD)v4 != -1)
      ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_11[v4])(&v6, v3 + 2);
    v3[16] = -1;
    WTF::fastFree((WTF *)v3, a2);
  }
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_QWORD *)this + 28) = 0;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v5);
  }
}

void WebCore::RenderSVGRect::updateShapeFromElement(WebCore::RenderSVGRect *this, void *a2)
{
  unsigned int *v3;
  uint64_t v4;
  int32x4_t v5;
  uint64_t v6;
  void *v7;
  float32x2_t v8;
  float32x2_t v9;
  unsigned __int8 *v10;
  WebCore::Length *v11;
  int v12;
  int8x8_t v13;
  float v14;
  unsigned __int8 *v15;
  WebCore::Length *v16;
  int v17;
  float v18;
  uint64_t v19;
  unsigned __int8 *v20;
  WebCore::Length *v21;
  int v22;
  float v23;
  float v24;
  WebCore::Length *v25;
  int v26;
  float v27;
  float v28;
  unsigned __int8 *v29;
  WebCore::Length *v30;
  int v31;
  float v32;
  unsigned int *v33;
  unsigned int *v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  int v38;
  int v39;
  float v40;
  uint64_t v41;
  WTF *v42;
  unsigned int v43;
  unsigned int v44;
  WTF *v45;
  void *v46;
  float v47;
  unsigned __int8 *v48;
  WebCore::Length *v49;
  int v50;
  float v51;
  float v52;
  int32x2_t v53;
  int8x8_t v54;
  int8x8_t v60;
  float v61;
  float v62;
  uint64_t v63;
  WTF *v64;
  float v65;
  char v66;
  float v67;
  char v68;
  float v69;
  char v70;
  float v71;
  char v72;
  float v73;
  char v74;
  float v75;
  char v76;
  float32x2_t v77;
  float32x2_t v78;
  float32x2_t v79;
  float32x2_t v80;
  float32x2_t v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  float32x2_t v85;
  __int32 v86;
  __int32 v87;
  __int32 v88;
  __int32 v89;
  __int32 v90;
  __int32 v91;
  float32x2_t v92;
  __int32 v93;
  __int32 v94;
  __int32 v95;
  __int32 v96;
  __int32 v97;
  WTF *v98[5];
  unsigned int *v99[2];
  int v100;
  char v101;

  v3 = (unsigned int *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
  {
    v4 = v3[16];
    if ((_DWORD)v4 != -1)
      ((void (*)(WTF **, unsigned int *))off_1E3445DE8[v4])(v98, v3 + 2);
    v3[16] = -1;
    WTF::fastFree((WTF *)v3, a2);
  }
  *((_BYTE *)this + 217) &= 0xF8u;
  v5 = vdupq_n_s32(0x7FC00000u);
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  *(int32x4_t *)((char *)this + 184) = v5;
  *(int32x4_t *)((char *)this + 200) = v5;
  v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_BYTE *)(v6 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196510C8CLL);
  }
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v6 + 1184))(*(_QWORD *)(*((_QWORD *)this + 3) + 8)) & 1) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196510CACLL);
  }
  if (*(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::rectTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196510CCCLL);
  }
  *(_DWORD *)(v6 + 24) += 2;
  WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v98, (const WebCore::SVGElement *)v6);
  v10 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 8);
  v11 = (WebCore::Length *)(v10 + 4);
  v12 = v10[8];
  if (v12 == 4)
  {
    if (v10[10])
      v13.i32[0] = *(_DWORD *)v11;
    else
      *(float *)v13.i32 = (float)*(int *)v11;
  }
  else if (v12 == 11)
  {
    LODWORD(v65) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v98);
    if (!v66)
      v65 = 0.0;
    WebCore::Length::nonNanCalculatedValue(v11, v65);
    v13.i32[0] = v8.i32[0];
  }
  else
  {
    v13.i32[0] = 0;
    if (v12 == 3)
    {
      v14 = *((float *)v10 + 1);
      if (!v10[10])
        v14 = (float)SLODWORD(v14);
      WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v98, 0, (uint64_t)v99, v14 / 100.0);
      v86 = 0;
      if (v100 != -1)
      {
        if (!v100)
          v86 = (__int32)v99[0];
        ((void (*)(char *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v100])(&v101, v99);
      }
      v13.i32[0] = v86;
    }
  }
  v15 = *(unsigned __int8 **)(*((_QWORD *)this + 11) + 8);
  v16 = (WebCore::Length *)(v15 + 12);
  v17 = v15[16];
  switch(v17)
  {
    case 4:
      if (v15[18])
        v9.i32[0] = *(_DWORD *)v16;
      else
        v9.f32[0] = (float)*(int *)v16;
      goto LABEL_34;
    case 11:
      v93 = v13.i32[0];
      LODWORD(v67) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v98) >> 32;
      if (!v68)
        v67 = 0.0;
      WebCore::Length::nonNanCalculatedValue(v16, v67);
      v13.i32[0] = v93;
      v9.i32[0] = v8.i32[0];
LABEL_34:
      if (*(float *)v13.i32 <= 0.0 || v9.f32[0] <= 0.0)
        break;
      v19 = *((_QWORD *)this + 17);
      ++*(_DWORD *)v19;
      v20 = *(unsigned __int8 **)(v19 + 64);
      v21 = (WebCore::Length *)(v20 + 28);
      v22 = v20[32];
      switch(v22)
      {
        case 4:
          if (v20[34])
            v23 = *(float *)v21;
          else
            v23 = (float)*(int *)v21;
          break;
        case 11:
          v82 = v9;
          v94 = v13.i32[0];
          LODWORD(v69) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v98);
          if (!v70)
            v69 = 0.0;
          WebCore::Length::nonNanCalculatedValue(v21, v69);
          v9 = v82;
          v13.i32[0] = v94;
          v23 = v8.f32[0];
          break;
        case 3:
          v78 = v9;
          v88 = v13.i32[0];
          v24 = *((float *)v20 + 7);
          if (!v20[34])
            v24 = (float)SLODWORD(v24);
          WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v98, 0, (uint64_t)v99, v24 / 100.0);
          v23 = 0.0;
          if (v100 != -1)
          {
            if (!v100)
              v23 = *(float *)v99;
            ((void (*)(char *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v100])(&v101, v99);
          }
          v9 = v78;
          v13.i32[0] = v88;
          break;
        default:
          goto LABEL_51;
      }
      if (v23 > 0.0)
      {
LABEL_65:
        *((_BYTE *)this + 217) = *((_BYTE *)this + 217) & 0xF8 | 4;
        goto LABEL_70;
      }
      v20 = *(unsigned __int8 **)(v19 + 64);
LABEL_51:
      v25 = (WebCore::Length *)(v20 + 36);
      v26 = v20[40];
      switch(v26)
      {
        case 4:
          if (v20[42])
            v27 = *(float *)v25;
          else
            v27 = (float)*(int *)v25;
          break;
        case 11:
          v83 = v9;
          v95 = v13.i32[0];
          LODWORD(v71) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v98) >> 32;
          if (!v72)
            v71 = 0.0;
          WebCore::Length::nonNanCalculatedValue(v25, v71);
          v9 = v83;
          v13.i32[0] = v95;
          v27 = v8.f32[0];
          break;
        case 3:
          v79 = v9;
          v89 = v13.i32[0];
          v28 = *((float *)v20 + 9);
          if (!v20[42])
            v28 = (float)SLODWORD(v28);
          WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v98, 1, (uint64_t)v99, v28 / 100.0);
          v27 = 0.0;
          if (v100 != -1)
          {
            if (!v100)
              v27 = *(float *)v99;
            ((void (*)(char *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v100])(&v101, v99);
          }
          v9 = v79;
          v13.i32[0] = v89;
          break;
        default:
          goto LABEL_66;
      }
      if (v27 > 0.0)
        goto LABEL_65;
LABEL_66:
      *((_BYTE *)this + 217) = *((_BYTE *)this + 217) & 0xF8 | 3;
      if ((*(_WORD *)(*((_QWORD *)this + 17) + 8) & 0x400) == 0)
      {
        v29 = *(unsigned __int8 **)(v19 + 64);
        v30 = (WebCore::Length *)(v29 + 44);
        v31 = v29[48];
        if (v31 == 4)
        {
          if (v29[50])
            v32 = *(float *)v30;
          else
            v32 = (float)*(int *)v30;
        }
        else if (v31 == 11)
        {
          v84 = v9;
          v96 = v13.i32[0];
          LODWORD(v73) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v98);
          if (!v74)
            v73 = 0.0;
          WebCore::Length::nonNanCalculatedValue(v30, v73);
          v9 = v84;
          v13.i32[0] = v96;
          v32 = v8.f32[0];
        }
        else
        {
          v32 = 0.0;
          if (v31 == 3)
          {
            v80 = v9;
            v90 = v13.i32[0];
            v47 = *((float *)v29 + 11);
            if (!v29[50])
              v47 = (float)SLODWORD(v47);
            WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v98, 0, (uint64_t)v99, v47 / 100.0);
            if (v100 != -1)
            {
              if (!v100)
                v32 = *(float *)v99;
              ((void (*)(char *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v100])(&v101, v99);
            }
            v9 = v80;
            v13.i32[0] = v90;
          }
        }
        v48 = *(unsigned __int8 **)(v19 + 64);
        v49 = (WebCore::Length *)(v48 + 52);
        v50 = v48[56];
        if (v50 == 4)
        {
          if (v48[58])
            v51 = *(float *)v49;
          else
            v51 = (float)*(int *)v49;
        }
        else if (v50 == 11)
        {
          v85 = v9;
          v97 = v13.i32[0];
          LODWORD(v75) = WebCore::SVGLengthContext::viewportSize((WebCore::SVGLengthContext *)v98) >> 32;
          if (!v76)
            v75 = 0.0;
          WebCore::Length::nonNanCalculatedValue(v49, v75);
          v9 = v85;
          v13.i32[0] = v97;
          v51 = v8.f32[0];
        }
        else
        {
          v51 = 0.0;
          if (v50 == 3)
          {
            v81 = v9;
            v91 = v13.i32[0];
            v52 = *((float *)v48 + 13);
            if (!v48[58])
              v52 = (float)SLODWORD(v52);
            WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v98, 1, (uint64_t)v99, v52 / 100.0);
            if (v100 != -1)
            {
              if (!v100)
                v51 = *(float *)v99;
              ((void (*)(char *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v100])(&v101, v99);
            }
            v9 = v81;
            v13.i32[0] = v91;
          }
        }
        *((float *)this + 42) = v32;
        *((float *)this + 43) = v51;
        *((_QWORD *)this + 22) = v13.u32[0] | ((unint64_t)v9.u32[0] << 32);
        v13.i32[1] = v9.i32[0];
        if (*(_BYTE *)(*(_QWORD *)(v19 + 24) + 80) != 1)
        {
          v92 = (float32x2_t)v13;
          *(float *)v53.i32 = WebCore::RenderSVGShape::strokeWidth(this) * 0.5;
          v32 = v32 - *(float *)v53.i32;
          v51 = v51 - *(float *)v53.i32;
          v8 = (float32x2_t)vdup_lane_s32(v53, 0);
          v9 = vadd_f32(v92, v8);
          v13 = (int8x8_t)vadd_f32(v8, v9);
        }
        v8.i32[0] = 2;
        v9.i32[0] = *(_WORD *)(v19 + 4) & 3;
        v54 = (int8x8_t)vdup_lane_s32(vceq_s32((int32x2_t)v9, (int32x2_t)v8), 0);
        __asm { FMOV            V1.2S, #1.0 }
        v60 = vbsl_s8(v54, (int8x8_t)vadd_f32(vadd_f32((float32x2_t)v13, _D1), _D1), v13);
        v61 = v32 + -1.0;
        v62 = v51 + -1.0;
        if (!_ZF)
        {
          v62 = v51;
          v61 = v32;
        }
        *((float *)this + 46) = v61;
        *((float *)this + 47) = v62;
        *((int8x8_t *)this + 24) = v60;
        goto LABEL_83;
      }
LABEL_70:
      v33 = (unsigned int *)*((_QWORD *)this + 28);
      if (v33)
        goto LABEL_76;
      WebCore::RenderSVGShape::createPath(this, v99);
      v33 = v99[0];
      v34 = (unsigned int *)*((_QWORD *)this + 28);
      *((unsigned int **)this + 28) = v99[0];
      if (v34)
      {
        v35 = v34[16];
        if ((_DWORD)v35 != -1)
          ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_11[v35])(&v101, v34 + 2);
        v34[16] = -1;
        WTF::fastFree((WTF *)v34, v7);
        v33 = (unsigned int *)*((_QWORD *)this + 28);
      }
      if (v33)
      {
LABEL_76:
        v36 = v33[16];
        v37 = 0;
        if (v36 == 2)
        {
          v41 = *((_QWORD *)v33 + 1);
          v38 = 0;
          v39 = 0;
          v40 = 0.0;
          if (v41)
            (*(void (**)(uint64_t, float, float, float, float))(*(_QWORD *)v41 + 240))(v41, 0.0, 0.0, 0.0, 0.0);
        }
        else
        {
          v38 = 0;
          v39 = 0;
          v40 = 0.0;
          if (v36 == 1)
            v40 = WebCore::PathStream::computeBoundingRect((uint64_t)(v33 + 2), 1);
        }
      }
      else
      {
        v37 = 0;
        v38 = 0;
        v39 = 0;
        v40 = 0.0;
      }
      *((float *)this + 42) = v40;
      *((_DWORD *)this + 43) = v39;
      *((_DWORD *)this + 44) = v37;
      *((_DWORD *)this + 45) = v38;
LABEL_83:
      if (*(_DWORD *)v19 == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle((WebCore::SVGRenderStyle *)v19, v7);
        WTF::fastFree(v45, v46);
      }
      else
      {
        --*(_DWORD *)v19;
      }
      break;
    case 3:
      v87 = v13.i32[0];
      v18 = *((float *)v15 + 3);
      if (!v15[18])
        v18 = (float)SLODWORD(v18);
      WebCore::SVGLengthContext::convertValueFromPercentageToUserUnits((WebCore::SVGLengthContext *)v98, 1, (uint64_t)v99, v18 / 100.0);
      v8.i32[0] = 0;
      v77 = v8;
      if (v100 != -1)
      {
        if (!v100)
        {
          v8.i32[0] = (__int32)v99[0];
          v77 = v8;
        }
        ((void (*)(char *, unsigned int **))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJfN7WebCore9ExceptionEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSA_EEEDcOSB_DpOT0____fmatrix[v100])(&v101, v99);
      }
      v9 = v77;
      v13.i32[0] = v87;
      goto LABEL_34;
  }
  v42 = v98[0];
  v98[0] = 0;
  if (v42)
  {
    do
    {
      v43 = __ldaxr((unsigned int *)v42);
      v44 = v43 - 1;
    }
    while (__stlxr(v44, (unsigned int *)v42));
    if (!v44)
    {
      atomic_store(1u, (unsigned int *)v42);
      v63 = *((unsigned int *)v42 + 7);
      if ((_DWORD)v63)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v42 + 2), (WTF::StringImpl *)(*((_QWORD *)v42 + 2) + 32 * v63));
      v64 = (WTF *)*((_QWORD *)v42 + 2);
      if (v64)
      {
        *((_QWORD *)v42 + 2) = 0;
        *((_DWORD *)v42 + 6) = 0;
        WTF::fastFree(v64, v7);
      }
      WTF::fastFree(v42, v7);
    }
  }
  if (*(_DWORD *)(v6 + 24) == 2)
  {
    if ((*(_WORD *)(v6 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v6, v7);
  }
  else
  {
    *(_DWORD *)(v6 + 24) -= 2;
  }
}

uint64_t WebCore::RenderSVGRect::fillShape(WebCore::RenderSVGRect *this, WebCore::GraphicsContext *a2, float a3, float a4, float a5)
{
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  _BYTE v12[16];
  uint64_t v13;
  char v14;

  if (*((_QWORD *)this + 28))
    return (*(uint64_t (**)(WebCore::GraphicsContext *))(*(_QWORD *)a2 + 176))(a2);
  if (!WebCore::GraphicsContext::hasDropShadow(a2, 0, a3, a4, a5))
    return (*(uint64_t (**)(WebCore::GraphicsContext *, char *, uint64_t))(*(_QWORD *)a2 + 216))(a2, (char *)this + 168, 1);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
  v12[0] = 0;
  v14 = 0;
  WebCore::GraphicsContextState::setDropShadow((uint64_t)a2 + 8, (uint64_t)v12);
  if (v14 && (v13 & 0x8000000000000) != 0)
  {
    v9 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFLL);
    do
    {
      v10 = __ldaxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
    {
      atomic_store(1u, v9);
      WTF::fastFree((WTF *)v9, v8);
    }
  }
  (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a2 + 88))(a2, (char *)a2 + 8);
  (*(void (**)(WebCore::GraphicsContext *, char *, uint64_t))(*(_QWORD *)a2 + 216))(a2, (char *)this + 168, 1);
  return (*(uint64_t (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
}

WebCore::RenderSVGShape *WebCore::RenderSVGRect::strokeShape(WebCore::RenderSVGShape *this, WebCore::GraphicsContext *a2)
{
  uint64_t v3;
  BOOL v4;
  _QWORD *v5;
  float v6;

  if (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)this + 17) + 24) + 80) != 1)
  {
    v3 = *((_QWORD *)this + 13);
    if (*(_BYTE *)(v3 + 248))
      v4 = *(_BYTE *)(v3 + 248) == 11;
    else
      v4 = 1;
    if (!v4)
    {
      if (*(_BYTE *)(v3 + 250))
      {
        if (*(float *)(v3 + 244) == 0.0)
          return this;
      }
      else if (!*(_DWORD *)(v3 + 244))
      {
        return this;
      }
    }
    if (*((_QWORD *)this + 28))
    {
      return (WebCore::RenderSVGShape *)WebCore::RenderSVGShape::strokeShape(this, a2);
    }
    else
    {
      v5 = (_QWORD *)((char *)this + 168);
      v6 = WebCore::RenderSVGShape::strokeWidth(this);
      return (WebCore::RenderSVGShape *)(*(uint64_t (**)(WebCore::GraphicsContext *, _QWORD *, float))(*(_QWORD *)a2 + 288))(a2, v5, v6);
    }
  }
  return this;
}

uint64_t WebCore::RenderSVGRect::shapeDependentStrokeContains(uint64_t result, float *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned int *v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  WTF *v19;
  void *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  WTF *v24;
  uint64_t v25;
  unsigned int *v26;
  char v27;

  v5 = result;
  v6 = *(_QWORD *)(result + 136);
  if ((*(_WORD *)(v6 + 8) & 0x400) == 0 && (*(_BYTE *)(result + 217) & 7) == 3)
  {
    v7 = *(_QWORD *)(v6 + 24);
    v8 = *(unsigned int *)(v7 + 76);
    if ((_DWORD)v8)
    {
      if (v8 >> 29)
      {
        __break(0xC471u);
        return result;
      }
      v19 = (WTF *)WTF::fastMalloc((WTF *)(8 * v8));
      v21 = *(unsigned int *)(v7 + 76);
      if ((_DWORD)v21)
      {
        v22 = *(uint64_t **)(v7 + 64);
        v23 = 8 * v21;
        v24 = v19;
        do
        {
          v25 = *v22++;
          *(_QWORD *)v24 = v25;
          v24 = (WTF *)((char *)v24 + 8);
          v23 -= 8;
        }
        while (v23);
      }
      WTF::fastFree(v19, v20);
    }
    else
    {
      v9 = *(_QWORD *)(result + 104);
      if ((*(_BYTE *)(v9 + 238) & 3) == 0 && *(float *)(v9 + 208) >= 1.5)
      {
        v13 = WebCore::RenderSVGShape::strokeWidth((WebCore::RenderSVGShape *)result) * 0.5;
        v14 = *(float *)(v5 + 176) * 0.5;
        v15 = *(float *)(v5 + 180) * 0.5;
        v16 = vabds_f32(*a2, v14 + *(float *)(v5 + 168));
        v17 = vabds_f32(a2[1], v15 + *(float *)(v5 + 172));
        if (v16 > (float)(v13 + v14) || v17 > (float)(v13 + v15))
          return 0;
        if ((float)(v15 - v13) <= v17)
          return 1;
        return (float)(v14 - v13) <= v16;
      }
    }
  }
  if (!*(_QWORD *)(v5 + 224))
  {
    WebCore::RenderSVGShape::createPath((WebCore::RenderSVGShape *)v5, &v26);
    v11 = *(unsigned int **)(v5 + 224);
    *(_QWORD *)(v5 + 224) = v26;
    if (v11)
    {
      v12 = v11[16];
      if ((_DWORD)v12 != -1)
        ((void (*)(char *, unsigned int *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore11PathSegmentEN3WTF7DataRefINS7_8PathImplEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSF_EEEDcOSG_DpOT0____fmatrix_11[v12])(&v27, v11 + 2);
      v11[16] = -1;
      WTF::fastFree((WTF *)v11, v10);
    }
  }
  return WebCore::RenderSVGShape::shapeDependentStrokeContains((_QWORD *)v5, a2, a3);
}

BOOL WebCore::RenderSVGRect::shapeDependentFillContains(uint64_t a1, float *a2, BOOL a3)
{
  float v4;
  float v5;
  float v6;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  if ((*(_BYTE *)(a1 + 217) & 7) == 0)
    return 0;
  if ((*(_BYTE *)(a1 + 217) & 7) == 3)
  {
    v4 = *(float *)(a1 + 168);
    if (v4 <= *a2 && (float)(v4 + *(float *)(a1 + 176)) >= *a2)
    {
      v5 = a2[1];
      v6 = *(float *)(a1 + 172);
      if (v6 <= v5)
        return (float)(v6 + *(float *)(a1 + 180)) >= v5;
    }
    return 0;
  }
  v9 = *(_QWORD *)(a1 + 224);
  v10 = *(_DWORD *)(v9 + 64);
  if (v10 == 2)
  {
    v11 = *(_QWORD *)(v9 + 8);
    if (v11 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 200))(v11) & 1) != 0)
      return 0;
LABEL_11:
    v12 = WebCore::Path::ensurePlatformPathImpl((WebCore::Path *)v9);
    return WebCore::PathCG::contains(v12, a2, a3);
  }
  if (v10)
    goto LABEL_11;
  return 0;
}

BOOL WebCore::RenderSVGRect::isRenderingDisabled(WebCore::RenderSVGRect *this)
{
  return *((float *)this + 44) <= 0.0 || *((float *)this + 45) <= 0.0;
}

uint64_t WebCore::RenderSVGResourceClipper::operator new(uint64_t this)
{
  if (this == 240)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

uint64_t WebCore::RenderSVGResourceClipper::RenderSVGResourceClipper(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;
  _DWORD **v6;
  _DWORD *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  result = WebCore::RenderLayerModelObject::RenderLayerModelObject(a1, 75, a2, a3, 0, 3588);
  *(_OWORD *)(result + 188) = 0u;
  *(_OWORD *)(result + 172) = 0u;
  *(_QWORD *)(result + 152) = 0;
  *(_QWORD *)(result + 160) = 0;
  *(_DWORD *)(result + 167) = 0;
  *(int32x4_t *)(result + 204) = vdupq_n_s32(0x7FC00000u);
  v5 = *(_QWORD *)(a2 + 104);
  if (v5 && *(_QWORD *)(v5 + 24))
  {
    v8 = *(_DWORD *)(v5 + 4);
    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD **)(v5 + 40);
      LODWORD(v10) = *(_DWORD *)(v5 + 52);
    }
    else
    {
      v9 = (_QWORD *)(v5 + 32);
      LODWORD(v10) = v8 >> 5;
    }
    if ((_DWORD)v10)
    {
      v10 = v10;
      while (1)
      {
        v11 = *v9;
        if (*v9 == WebCore::HTMLNames::idAttr
          || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
          && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
        {
          break;
        }
        v9 += 2;
        if (!--v10)
          goto LABEL_18;
      }
    }
    else
    {
LABEL_18:
      v9 = 0;
    }
    v6 = (_DWORD **)(v9 + 1);
  }
  else
  {
    v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
  }
  v7 = *v6;
  if (v7)
    *v7 += 2;
  *(_QWORD *)(result + 224) = v7;
  *(_BYTE *)(result + 232) = 0;
  *(_QWORD *)result = off_1E3445678;
  return result;
}

void WebCore::RenderSVGResourceClipper::~RenderSVGResourceClipper(WebCore::RenderSVGResourceClipper *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = off_1E3445A38;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  WTF::StringImpl *v3;
  void *v4;

  *(_QWORD *)this = off_1E3445A38;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v4);
  }
}

uint64_t WebCore::RenderSVGResourceClipper::shouldApplyPathClipping@<X0>(uint64_t this@<X0>, WebCore::Node **a2@<X8>)
{
  uint64_t v2;

  if (dword_1ECE84960 == 2)
  {
    *a2 = 0;
  }
  else
  {
    v2 = *(_QWORD *)(*(_QWORD *)(this + 24) + 8);
    if ((*(_WORD *)(v2 + 28) & 0x20) == 0
      || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::clipPathTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x19651154CLL);
    }
    *(_DWORD *)(v2 + 24) += 2;
    this = WebCore::SVGClipPathElement::shouldApplyPathClipping(v2, a2);
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  return this;
}

uint64_t WebCore::RenderSVGResourceClipper::applyPathClipping(WebCore::RenderSVGResourceClipper *this, WebCore::GraphicsContext *a2, const WebCore::RenderLayerModelObject *a3, float32x2_t *a4, WebCore::SVGGraphicsElement *a5)
{
  int v9;
  _QWORD *v10;
  float64x2_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  double *v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  unsigned int v34;
  unint64_t v35;
  uint64_t result;
  unsigned int v37;
  _QWORD v38[6];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  char v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD v45[7];
  int v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v9 = dword_1ECE84960;
  dword_1ECE84960 = 1;
  v10 = (_QWORD *)(*((_QWORD *)a5 + 8) & 0xFFFFFFFFFFFFLL);
  if (v10 && (*(_BYTE *)((*((_QWORD *)a5 + 8) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196511968);
  }
  if ((*(_BYTE *)((*((_QWORD *)a5 + 8) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 4
    || (*(_BYTE *)((*((_QWORD *)a5 + 8) & 0xFFFFFFFFFFFFLL) + 0x35) & 1) != 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196511948);
  }
  v39 = xmmword_1969FDF98;
  v40 = unk_1969FDFA8;
  v41 = xmmword_1969FDFB8;
  if (WebCore::RenderSVGResourceClipper::clipPathUnits(*(WebCore::RenderSVGResourceClipper **)(*((_QWORD *)this + 3) + 8)) == 2)
  {
    v12 = vaddq_f64(vcvtq_f64_f32(*a4), (float64x2_t)0);
    v41 = (__int128)v12;
    v13 = a4[1].f32[0];
    v14 = a4[1].f32[1];
    v15 = v13 * 0.0;
    *(double *)&v39 = v13;
    *((double *)&v39 + 1) = v13 * 0.0;
    v16 = v14 * 0.0;
    *(double *)&v40 = v14 * 0.0;
    *((double *)&v40 + 1) = v14;
    v17 = v12.f64[1];
    goto LABEL_16;
  }
  v18 = *((unsigned __int8 *)a3 + 46);
  v14 = 1.0;
  v17 = 0.0;
  if (v18 != 83)
  {
    if ((*((_BYTE *)a3 + 52) & 7) != 4)
    {
      v19 = v18 - 67;
      if (v19 <= 0x13)
      {
        v20 = 1 << v19;
        v21 = 917521;
        goto LABEL_14;
      }
      goto LABEL_15;
    }
    if (v18 != 85 && (*((_BYTE *)a3 + 53) & 1) != 0)
    {
      v37 = v18 - 67;
      if (v37 <= 0x13)
      {
        v20 = 1 << v37;
        v21 = 655377;
LABEL_14:
        v12.f64[0] = 0.0;
        v15 = 0.0;
        v16 = 0.0;
        v13 = 1.0;
        if ((v20 & v21) != 0)
          goto LABEL_16;
      }
LABEL_15:
      v12 = vaddq_f64(vcvtq_f64_f32(*a4), (float64x2_t)0);
      v41 = (__int128)v12;
      v14 = *(float *)(*((_QWORD *)a3 + 13) + 184);
      v15 = v14 * 0.0;
      *(double *)&v39 = v14;
      *((double *)&v39 + 1) = v14 * 0.0;
      *(double *)&v40 = v14 * 0.0;
      *((double *)&v40 + 1) = v14;
      v17 = v12.f64[1];
      v16 = v14 * 0.0;
      v13 = v14;
      goto LABEL_16;
    }
  }
  v12.f64[0] = 0.0;
  v15 = 0.0;
  v16 = 0.0;
  v13 = 1.0;
LABEL_16:
  v22 = *((_QWORD *)this + 18);
  v23 = *(_QWORD *)(v22 + 32);
  v24 = *(_DWORD *)(v23 + 20);
  if ((v24 & 0x20000) != 0)
  {
    if ((*(_BYTE *)(v23 + 45) & 2) != 0)
      v23 = *(_QWORD *)(*(_QWORD *)(v23 + 32) + 8);
    v25 = *(_QWORD *)(v23 + 88);
    if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 32) + 40) + 20)
      || (v26 = *(_QWORD **)(v25 + 40), v26[41])
      || v26[38]
      || v26[39]
      || v26[40]
      || (v24 & 0x100000) != 0)
    {
      v27 = *(double **)(v22 + 200);
      v28 = v27[1];
      v29 = v27[4];
      v30 = v27[5];
      v31 = v27[12];
      v32 = v27[13];
      v33 = v28 * v14 + *v27 * v15;
      *(double *)&v39 = v28 * v16 + *v27 * v13;
      *((double *)&v39 + 1) = v33;
      *(double *)&v40 = v30 * v16 + v29 * v13;
      *((double *)&v40 + 1) = v30 * v14 + v29 * v15;
      *(double *)&v41 = v32 * v16 + v31 * v13 + v12.f64[0];
      *((double *)&v41 + 1) = v32 * v14 + v31 * v15 + v17;
    }
  }
  (*(void (**)(uint64_t *__return_ptr, _QWORD *, __int128 *))(*v10 + 888))(&v44, v10, &v39);
  v34 = *(unsigned __int16 *)(v10[17] + 4);
  if (v46 == 2)
  {
    if (v45[0] && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v45[0] + 200))(v45[0]))
      goto LABEL_27;
LABEL_30:
    (*(void (**)(_QWORD *__return_ptr, WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 672))(v38, a2, 1);
    (*(void (**)(WebCore::GraphicsContext *, __int128 *))(*(_QWORD *)a2 + 656))(a2, &v39);
    (*(void (**)(WebCore::GraphicsContext *, uint64_t *, _QWORD))(*(_QWORD *)a2 + 496))(a2, &v44, (v34 >> 2) & 1);
    result = (*(uint64_t (**)(WebCore::GraphicsContext *, _QWORD *))(*(_QWORD *)a2 + 664))(a2, v38);
    goto LABEL_31;
  }
  if (v46)
    goto LABEL_30;
LABEL_27:
  v35 = atomic_load(&qword_1ECE84968);
  if (v35 != -1)
  {
    v38[0] = &v42;
    v43 = v38;
    std::__call_once(&qword_1ECE84968, &v43, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::sharedClipAllPath(void)::$_0 &&>>);
  }
  result = (*(uint64_t (**)(WebCore::GraphicsContext *, __int128 *, _QWORD))(*(_QWORD *)a2 + 496))(a2, &xmmword_1ECE84A28, (v34 >> 2) & 1);
LABEL_31:
  if (v46 != -1)
    result = ((uint64_t (*)(_QWORD *, _QWORD *))off_1E3445DE8[v46])(v38, v45);
  dword_1ECE84960 = v9;
  return result;
}

uint64_t WebCore::RenderSVGResourceClipper::clipPathUnits(WebCore::RenderSVGResourceClipper *this)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  if ((*((_WORD *)this + 14) & 0x20) == 0
    || *(_QWORD *)(*((_QWORD *)this + 12) + 24) != *(_QWORD *)(WebCore::SVGNames::clipPathTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196511A58);
  }
  *((_DWORD *)this + 6) += 2;
  v2 = (_QWORD *)*((_QWORD *)this + 27);
  v3 = v2[3];
  if (!v3 || !*(_DWORD *)(v3 - 12))
    goto LABEL_4;
  v6 = *(unsigned int *)(v3 - 4);
  if ((_DWORD)v6)
  {
    v7 = 8 * v6;
    v8 = (uint64_t *)v2[3];
    while ((unint64_t)(*v8 + 1) <= 1)
    {
      ++v8;
      v7 -= 8;
      if (!v7)
        goto LABEL_4;
    }
  }
  else
  {
    v8 = (uint64_t *)v2[3];
  }
  v9 = (uint64_t *)(v3 + 8 * v6);
  if (v8 == v9)
    goto LABEL_4;
  v10 = *v8;
LABEL_21:
  if (!*(_QWORD *)(v10 + 8))
  {
    while (++v8 != v9)
    {
      v10 = *v8;
      if ((unint64_t)(*v8 + 1) > 1)
      {
        if (v8 != v9)
          goto LABEL_21;
        break;
      }
    }
LABEL_4:
    v4 = v2 + 5;
    goto LABEL_5;
  }
  v4 = v2 + 6;
LABEL_5:
  LOBYTE(result) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 32))(*v4);
  if (this)
  {
    if (*((_DWORD *)this + 6) == 2)
    {
      if ((*((_WORD *)this + 15) & 0x400) == 0)
      {
        v11 = result;
        WebCore::Node::removedLastRef(this);
        LOBYTE(result) = v11;
      }
    }
    else
    {
      *((_DWORD *)this + 6) -= 2;
    }
  }
  return result;
}

WebCore::RenderLayerModelObject *WebCore::RenderSVGResourceClipper::applyMaskClipping(WebCore::RenderLayerModelObject *this, WebCore::PaintInfo *a2, const WebCore::RenderLayerModelObject *a3, const WebCore::FloatRect *a4)
{
  WebCore::RenderLayerModelObject *v7;
  int v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  uint64_t v16;
  void *v18;
  WTF *v19;
  int v20;
  WTF *v21;
  WebCore::RenderSVGResourceClipper *v22;
  WebCore::RenderSVGResourceClipper *v23;
  int v24;
  double v25;
  double v26;
  int v27;
  unsigned int v28;
  int v29;
  int v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  BOOL v37;
  uint64_t v38;
  uint64_t (*v39)();
  int v40;
  _DWORD *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t k;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t j;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  unsigned int v54;
  double v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  uint64_t v62;
  _QWORD v63[2];
  uint64_t v64;

  v7 = this;
  if (byte_1ECE8495C == 1)
  {
    v8 = dword_1ECE849A8;
  }
  else
  {
    v8 = 0;
    *(_QWORD *)&dword_1ECE849A8 = 0;
    qword_1ECE849A0 = 0;
    byte_1ECE8495C = 1;
  }
  dword_1ECE849A8 = v8 + 1;
  v9 = *((_QWORD *)this + 1);
  if (v9)
  {
    if (*(_QWORD *)(v9 + 8) && qword_1ECE849A0)
    {
      v10 = *(_DWORD *)(qword_1ECE849A0 - 8);
      v11 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = v10 & ((v13 >> 31) ^ v13);
      for (i = 1; ; ++i)
      {
        v16 = *(_QWORD *)(qword_1ECE849A0 + 8 * v14);
        if (!v16)
          break;
        if (v16 != -1 && v16 == v9)
          return this;
        v14 = (v14 + i) & v10;
      }
    }
    goto LABEL_16;
  }
  v9 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v9 = 1;
  *(_QWORD *)(v9 + 8) = v7;
  v19 = (WTF *)*((_QWORD *)v7 + 1);
  *((_QWORD *)v7 + 1) = v9;
  if (!v19)
  {
LABEL_16:
    ++*(_DWORD *)v9;
    goto LABEL_17;
  }
  if (*(_DWORD *)v19 != 1)
  {
    --*(_DWORD *)v19;
    goto LABEL_16;
  }
  WTF::fastFree(v19, v18);
  v9 = *((_QWORD *)v7 + 1);
  if (v9)
    goto LABEL_16;
LABEL_17:
  WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderElement>((uint64_t)&qword_1ECE849A0, v7, (uint64_t)&v59);
  v20 = dword_1ECE84960;
  dword_1ECE84960 = 2;
  v21 = (WTF *)*((_QWORD *)a2 + 10);
  (*(void (**)(WTF *, uint64_t))(*(_QWORD *)v21 + 96))(v21, 1);
  v22 = (WebCore::RenderSVGResourceClipper *)WebCore::RenderLayerModelObject::svgClipperResourceFromStyle(v7);
  if (v22)
  {
    v23 = v22;
    ++*((_DWORD *)v22 + 4);
    WebCore::RenderSVGResourceClipper::applyMaskClipping(v22, a2, a3, a4);
    v24 = *((_DWORD *)v23 + 4);
    if (!v24)
    {
      __break(0xC471u);
      JUMPOUT(0x196512188);
    }
    *((_DWORD *)v23 + 4) = v24 - 1;
  }
  v56 = xmmword_1969FDF98;
  v57 = unk_1969FDFA8;
  v58 = xmmword_1969FDFB8;
  if (WebCore::RenderSVGResourceClipper::clipPathUnits(*(WebCore::RenderSVGResourceClipper **)(*((_QWORD *)v7 + 3) + 8)) != 2)
  {
    v27 = *((unsigned __int8 *)a3 + 46);
    if (v27 == 83)
      goto LABEL_39;
    if ((*((_BYTE *)a3 + 52) & 7) == 4)
    {
      if (v27 == 85 || (*((_BYTE *)a3 + 53) & 1) == 0)
        goto LABEL_39;
      v54 = v27 - 67;
      if (v54 <= 0x13)
      {
        v29 = 1 << v54;
        v30 = 655377;
LABEL_30:
        if ((v29 & v30) != 0)
          goto LABEL_39;
      }
    }
    else
    {
      v28 = v27 - 67;
      if (v28 <= 0x13)
      {
        v29 = 1 << v28;
        v30 = 917521;
        goto LABEL_30;
      }
    }
    v31 = *(float *)a4;
    v32 = *((float *)a4 + 1);
    if (*(double *)&v56 == 1.0
      && *((double *)&v56 + 1) == 0.0
      && *(double *)&v57 == 0.0
      && *((double *)&v57 + 1) == 1.0)
    {
      *(double *)&v58 = *(double *)&v58 + v31;
    }
    else
    {
      *(double *)&v58 = *(double *)&v57 * v32 + v31 * *(double *)&v56 + *(double *)&v58;
      v32 = *((double *)&v57 + 1) * v32 + v31 * *((double *)&v56 + 1);
    }
    *((double *)&v58 + 1) = v32 + *((double *)&v58 + 1);
    v55 = *(float *)(*((_QWORD *)a3 + 13) + 184);
    *(double *)&v56 = *(double *)&v56 * v55;
    *((double *)&v56 + 1) = *((double *)&v56 + 1) * v55;
    v35 = *(double *)&v57 * v55;
    v36 = *((double *)&v57 + 1) * v55;
    goto LABEL_38;
  }
  v25 = *(float *)a4;
  v26 = *((float *)a4 + 1);
  if (*(double *)&v56 == 1.0 && *((double *)&v56 + 1) == 0.0 && *(double *)&v57 == 0.0 && *((double *)&v57 + 1) == 1.0)
  {
    *(double *)&v58 = *(double *)&v58 + v25;
  }
  else
  {
    *(double *)&v58 = *(double *)&v57 * v26 + v25 * *(double *)&v56 + *(double *)&v58;
    v26 = *((double *)&v57 + 1) * v26 + v25 * *((double *)&v56 + 1);
  }
  *((double *)&v58 + 1) = v26 + *((double *)&v58 + 1);
  v33 = *((float *)a4 + 2);
  v34 = *((float *)a4 + 3);
  *(double *)&v56 = *(double *)&v56 * v33;
  *((double *)&v56 + 1) = *((double *)&v56 + 1) * v33;
  v35 = *(double *)&v57 * v34;
  v36 = *((double *)&v57 + 1) * v34;
LABEL_38:
  *(double *)&v57 = v35;
  *((double *)&v57 + 1) = v36;
LABEL_39:
  if ((*((_BYTE *)a3 + 21) & 0x80) != 0 && (v38 = *(_QWORD *)(*((_QWORD *)a3 + 18) + 256)) != 0)
  {
    if (*(_QWORD *)(v38 + 112))
      v39 = WTF::RefPtr<WebCore::GraphicsLayer,WTF::RawPtrTraits<WebCore::GraphicsLayer>,WTF::DefaultRefDerefTraits<WebCore::GraphicsLayer>>::unspecifiedBoolTypeInstance;
    else
      v39 = 0;
    v37 = v39 == 0;
  }
  else
  {
    v37 = 1;
  }
  v40 = *((_DWORD *)a2 + 5);
  v41 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v7 + 3) + 8) + 40) + 8) + 1944)
                   + 248);
  ++v41[2];
  v42 = v41[287];
  v41[287] = v42 | 0x10;
  if (v37 || (v40 & 0x200) != 0)
  {
    if (*((_BYTE *)v21 + 194) != 7 || *((_BYTE *)v21 + 195) != 1)
    {
      *((_WORD *)v21 + 97) = 263;
      *((_DWORD *)v21 + 46) |= 0x20u;
    }
    (*(void (**)(WTF *, uint64_t))(*(_QWORD *)v21 + 88))(v21, (uint64_t)v21 + 8);
    (*(void (**)(WTF *, float))(*(_QWORD *)v21 + 592))(v21, 1.0);
    if (*((_BYTE *)v21 + 194) != 2 || *((_BYTE *)v21 + 195) != 1)
    {
      *((_WORD *)v21 + 97) = 258;
      *((_DWORD *)v21 + 46) |= 0x20u;
    }
    (*(void (**)(WTF *, uint64_t))(*(_QWORD *)v21 + 88))(v21, (uint64_t)v21 + 8);
    v48 = *((_QWORD *)v7 + 18);
    if (v48)
      ++*(_DWORD *)(v48 + 8);
    v49 = *(_QWORD *)(v48 + 24);
    *(_QWORD *)(v48 + 24) = v49 | 0x400000000;
    (*(void (**)(WTF *, __int128 *))(*(_QWORD *)v21 + 656))(v21, &v56);
    for (j = *(_QWORD *)(v48 + 40); j; j = *(_QWORD *)(j + 40))
    {
      v51 = *(_QWORD *)(j + 32);
      if ((*(_BYTE *)(v51 + 45) & 1) != 0 && *(_BYTE *)(v51 + 46) == 88)
        break;
    }
    v59 = j;
    v60 = 0;
    v61 = xmmword_1969FCA90;
    v64 = 0;
    v62 = 0;
    v63[0] = 0;
    *(_QWORD *)((char *)v63 + 6) = 0;
    WebCore::RenderLayer::paintLayer(v48, v21, (uint64_t)&v59, ((unint64_t)*(unsigned int *)(*(_QWORD *)(v48 + 32) + 20) >> 6) & 0x400 ^ 0x404);
    *(_QWORD *)(v48 + 24) = *(_QWORD *)(v48 + 24) & 0xFFFFFFFBFFFFFFFFLL | (((v49 >> 34) & 1) << 34);
    v52 = *(_DWORD *)(v48 + 8);
    if (!v52)
    {
      __break(0xC471u);
      JUMPOUT(0x1965121C8);
    }
    *(_DWORD *)(v48 + 8) = v52 - 1;
    (*(void (**)(WTF *))(*(_QWORD *)v21 + 608))(v21);
  }
  else
  {
    v43 = *((_QWORD *)v7 + 18);
    if (v43)
      ++*(_DWORD *)(v43 + 8);
    v44 = *(_QWORD *)(v43 + 24);
    *(_QWORD *)(v43 + 24) = v44 | 0x400000000;
    (*(void (**)(WTF *, __int128 *))(*(_QWORD *)v21 + 656))(v21, &v56);
    for (k = *(_QWORD *)(v43 + 40); k; k = *(_QWORD *)(k + 40))
    {
      v46 = *(_QWORD *)(k + 32);
      if ((*(_BYTE *)(v46 + 45) & 1) != 0 && *(_BYTE *)(v46 + 46) == 88)
        break;
    }
    v59 = k;
    v60 = 0;
    v61 = xmmword_1969FCA90;
    v64 = 0;
    v62 = 0;
    v63[0] = 0;
    *(_QWORD *)((char *)v63 + 6) = 0;
    WebCore::RenderLayer::paintLayer(v43, v21, (uint64_t)&v59, ((unint64_t)*(unsigned int *)(*(_QWORD *)(v43 + 32) + 20) >> 6) & 0x400 ^ 0x404);
    *(_QWORD *)(v43 + 24) = *(_QWORD *)(v43 + 24) & 0xFFFFFFFBFFFFFFFFLL | (((v44 >> 34) & 1) << 34);
    v47 = *(_DWORD *)(v43 + 8);
    if (!v47)
    {
      __break(0xC471u);
      JUMPOUT(0x1965121A8);
    }
    *(_DWORD *)(v43 + 8) = v47 - 1;
  }
  v41[287] = v42;
  if (v41[2] == 1)
    (*(void (**)(_DWORD *))(*(_QWORD *)v41 + 8))(v41);
  else
    --v41[2];
  this = (WebCore::RenderLayerModelObject *)(*(uint64_t (**)(WTF *, uint64_t))(*(_QWORD *)v21 + 104))(v21, 1);
  dword_1ECE84960 = v20;
  if (v9)
  {
    v53 = *(_QWORD **)(v9 + 8);
    if (v53)
      this = (WebCore::RenderLayerModelObject *)WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderElement>((uint64_t)&qword_1ECE849A0, v53);
    if (*(_DWORD *)v9 == 1)
      return (WebCore::RenderLayerModelObject *)WTF::fastFree((WTF *)v9, v53);
    else
      --*(_DWORD *)v9;
  }
  return this;
}

uint64_t WebCore::RenderSVGResourceClipper::hitTestClipContent(WebCore::RenderSVGResourceClipper *this, const WebCore::FloatRect *a2, const WebCore::LayoutPoint *a3)
{
  int v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  uint64_t v14;
  void *v16;
  WTF *v17;
  int v18;
  int v19;
  const WebCore::LayoutPoint *v20;
  float v21;
  float v22;
  double v23;
  float v24;
  float v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v33;
  double v34;
  BOOL v35;
  double v36;
  double v37;
  double v38;
  __int128 *v39;
  char v40;
  double v41;
  float v42;
  float v43;
  double v44;
  double v45;
  float v46;
  int v47;
  float v48;
  int v49;
  BOOL v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  int v59;
  char v60;
  double v61;
  double v62;
  double v63;
  float32x2_t v64;
  double v65;
  double v66;
  float v67;
  float v68;
  float v69;
  float v70;
  __int16 v71;
  uint64_t v72;
  uint64_t v73;
  double v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;

  if (byte_1ECE8495D == 1)
  {
    v6 = dword_1ECE849B8;
  }
  else
  {
    v6 = 0;
    *(_QWORD *)&dword_1ECE849B8 = 0;
    qword_1ECE849B0 = 0;
    byte_1ECE8495D = 1;
  }
  dword_1ECE849B8 = v6 + 1;
  v7 = *((_QWORD *)this + 1);
  if (v7)
  {
    if (*(_QWORD *)(v7 + 8) && qword_1ECE849B0)
    {
      v8 = *(_DWORD *)(qword_1ECE849B0 - 8);
      v9 = (~(v7 << 32) + v7) ^ ((unint64_t)(~(v7 << 32) + v7) >> 22);
      v10 = 9 * ((v9 + ~(v9 << 13)) ^ ((v9 + ~(v9 << 13)) >> 8));
      v11 = (v10 ^ (v10 >> 15)) + ~((v10 ^ (v10 >> 15)) << 27);
      v12 = v8 & ((v11 >> 31) ^ v11);
      for (i = 1; ; ++i)
      {
        v14 = *(_QWORD *)(qword_1ECE849B0 + 8 * v12);
        if (!v14)
          break;
        if (v14 != -1 && v14 == v7)
          return 0;
        v12 = (v12 + i) & v8;
      }
    }
    goto LABEL_16;
  }
  v7 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v7 = 1;
  *(_QWORD *)(v7 + 8) = this;
  v17 = (WTF *)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v7;
  if (!v17)
  {
LABEL_16:
    ++*(_DWORD *)v7;
    goto LABEL_17;
  }
  if (*(_DWORD *)v17 != 1)
  {
    --*(_DWORD *)v17;
    goto LABEL_16;
  }
  WTF::fastFree(v17, v16);
  v7 = *((_QWORD *)this + 1);
  if (v7)
    goto LABEL_16;
LABEL_17:
  WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderElement>((uint64_t)&qword_1ECE849B0, this, (uint64_t)&v61);
  v20 = a3;
  v18 = *(_DWORD *)a3;
  v19 = *((_DWORD *)v20 + 1);
  v21 = (float)v18 * 0.015625;
  v22 = (float)v19 * 0.015625;
  *(float *)&v61 = v21;
  *((float *)&v61 + 1) = v22;
  if (!WebCore::RenderLayerModelObject::pointInSVGClippingArea(this, (const WebCore::FloatPoint *)&v61))
  {
    v55 = 0;
    if (!v7)
      return v55;
    goto LABEL_52;
  }
  if (WebCore::RenderSVGResourceClipper::clipPathUnits(*(WebCore::RenderSVGResourceClipper **)(*((_QWORD *)this + 3) + 8)) == 2)
  {
    v23 = 0.0;
    v25 = *((float *)a2 + 2);
    v24 = *((float *)a2 + 3);
    v26 = v25;
    v27 = v24;
    v28 = v25 * 0.0;
    v29 = v24 * 0.0;
    v30 = v25 * v24 - v28 * v29;
    v31 = fabs(v30);
    if ((unint64_t)(*(_QWORD *)&v31 - 0x10000000000000) >> 53 > 0x3FE
      && (unint64_t)(*(_QWORD *)&v31 - 1) > 0xFFFFFFFFFFFFELL)
    {
      v40 = 0;
      LOBYTE(v61) = 0;
      v39 = &xmmword_1969FDF98;
      v37 = 1.0;
      v38 = 0.0;
      v36 = 1.0;
    }
    else
    {
      v33 = *(float *)a2 + 0.0;
      v34 = *((float *)a2 + 1) + 0.0;
      if (v25 == 1.0 && v28 == 0.0 && (v29 == 0.0 ? (v35 = v24 == 1.0) : (v35 = 0), v35))
      {
        v38 = -v33;
        v23 = -v34;
        v62 = 0.0;
        v63 = 0.0;
        v36 = 1.0;
        v37 = 1.0;
      }
      else
      {
        v36 = v27 / v30;
        v37 = v26 / v30;
        v38 = (v29 * v34 - v27 * v33) / v30;
        v62 = -(v26 * 0.0) / v30;
        v63 = -v29 / v30;
        v23 = (v28 * v33 - v26 * v34) / v30;
      }
      v61 = v36;
      v64 = *(float32x2_t *)&v37;
      v65 = v38;
      v39 = (__int128 *)&v61;
      v40 = 1;
      v66 = v23;
    }
    LOBYTE(v67) = v40;
    v41 = v23 + v37 * v22 + *((double *)v39 + 1) * v21;
    v42 = v38 + *((double *)v39 + 2) * v22 + v36 * v21;
    v43 = v41;
    v44 = v42 * 64.0;
    if (v44 >= 2147483650.0)
    {
      v18 = 0x7FFFFFFF;
    }
    else if (v44 <= -2147483650.0)
    {
      v18 = 0x80000000;
    }
    else
    {
      v18 = (int)v44;
    }
    v45 = v43 * 64.0;
    if (v45 >= 2147483650.0)
    {
      v19 = 0x7FFFFFFF;
    }
    else if (v45 <= -2147483650.0)
    {
      v19 = 0x80000000;
    }
    else
    {
      v19 = (int)v45;
    }
  }
  v46 = floorf(*((float *)this + 43) * 64.0);
  if (v46 >= 2147500000.0)
  {
    v47 = 0x7FFFFFFF;
  }
  else if (v46 <= -2147500000.0)
  {
    v47 = 0x80000000;
  }
  else
  {
    v47 = (int)v46;
  }
  v48 = floorf(*((float *)this + 44) * 64.0);
  if (v48 >= 2147500000.0)
  {
    v49 = 0x7FFFFFFF;
  }
  else if (v48 <= -2147500000.0)
  {
    v49 = 0x80000000;
  }
  else
  {
    v49 = (int)v48;
  }
  v50 = __OFSUB__(v18, v47);
  LODWORD(v51) = v18 - v47;
  if (v50)
    v51 = (v18 >> 31) + 0x7FFFFFFF;
  else
    v51 = v51;
  v50 = __OFSUB__(v19, v49);
  v52 = v19 - v49;
  LODWORD(v53) = (v19 >> 31) + 0x7FFFFFFF;
  if (v50)
    v53 = v53;
  else
    v53 = v52;
  *(_QWORD *)&v61 = v51 | (v53 << 32);
  *(_QWORD *)&v62 = v51 & 0xFFFFFFC0 | ((unint64_t)((v53 & 0xFFFFFFC0) >> 6) << 38);
  *(_QWORD *)&v63 = 0x4000000040;
  v64 = vmul_f32(vcvt_f32_s32((int32x2_t)__PAIR64__(v53, v51)), (float32x2_t)vdup_n_s32(0x3C800000u));
  *(float *)&v65 = (float)(v51 & 0xFFFFFFC0) * 0.015625;
  *((float *)&v65 + 1) = (float)(v53 & 0xFFFFFFC0) * 0.015625;
  *(float *)&v66 = *(float *)&v65 + 1.0;
  *((float *)&v66 + 1) = *((float *)&v65 + 1);
  v67 = *(float *)&v65 + 1.0;
  v68 = *((float *)&v65 + 1) + 1.0;
  v69 = *(float *)&v65;
  v70 = *((float *)&v65 + 1) + 1.0;
  v71 = 256;
  v72 = 0;
  v73 = 0;
  v79 = 0;
  v74 = v61;
  v75 = 0;
  v78 = 0;
  v76 = 0;
  v77 = 0;
  v54 = *((_QWORD *)this + 18);
  v59 = 320;
  v60 = 1;
  v55 = WebCore::RenderLayer::hitTest(v54, &v59, &v61, &v61);
  WebCore::HitTestResult::~HitTestResult((WebCore::HitTestResult *)&v61, v56);
  if (v7)
  {
LABEL_52:
    v57 = *(_QWORD **)(v7 + 8);
    if (v57)
      WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderElement>((uint64_t)&qword_1ECE849B0, v57);
    if (*(_DWORD *)v7 == 1)
      WTF::fastFree((WTF *)v7, v57);
    else
      --*(_DWORD *)v7;
  }
  return v55;
}

float WebCore::RenderSVGResourceClipper::resourceBoundingBox(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int i;
  uint64_t v19;
  void *v21;
  WTF *v22;
  uint64_t v23;
  float v24;
  int v25;
  int v26;
  int v27;
  _QWORD *v28;
  double v30[6];
  _DWORD v31[4];

  if ((byte_1ECE8495E & 1) == 0)
  {
    *(_QWORD *)&dword_1ECE849C8 = 0;
    qword_1ECE849C0 = 0;
    byte_1ECE8495E = 1;
  }
  v5 = (*(float (**)(uint64_t))(*(_QWORD *)a2 + 232))(a2);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  ++dword_1ECE849C8;
  v12 = a1[1];
  if (v12)
  {
    if (*(_QWORD *)(v12 + 8) && qword_1ECE849C0)
    {
      v13 = *(_DWORD *)(qword_1ECE849C0 - 8);
      v14 = (~(v12 << 32) + v12) ^ ((unint64_t)(~(v12 << 32) + v12) >> 22);
      v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
      v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
      v17 = v13 & ((v16 >> 31) ^ v16);
      for (i = 1; ; ++i)
      {
        v19 = *(_QWORD *)(qword_1ECE849C0 + 8 * v17);
        if (!v19)
          break;
        if (v19 != -1 && v19 == v12)
          return v5;
        v17 = (v17 + i) & v13;
      }
    }
  }
  else
  {
    v12 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v12 = 1;
    *(_QWORD *)(v12 + 8) = a1;
    v22 = (WTF *)a1[1];
    a1[1] = v12;
    if (v22)
    {
      if (*(_DWORD *)v22 == 1)
      {
        WTF::fastFree(v22, v21);
        v12 = a1[1];
        if (!v12)
          goto LABEL_17;
      }
      else
      {
        --*(_DWORD *)v22;
      }
    }
  }
  ++*(_DWORD *)v12;
LABEL_17:
  WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderElement>((uint64_t)&qword_1ECE849C0, a1, (uint64_t)v30);
  v23 = *(_QWORD *)(a1[3] + 8);
  if ((*(_WORD *)(v23 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v23 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::clipPathTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196512980);
  }
  *(_DWORD *)(v23 + 24) += 2;
  v24 = WebCore::SVGClipPathElement::calculateClipContentRepaintRect((_QWORD *)v23, a3);
  *(float *)v31 = v24;
  v31[1] = v25;
  v31[2] = v26;
  v31[3] = v27;
  if (*(_DWORD *)(v23 + 24) == 2)
  {
    if ((*(_WORD *)(v23 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v23);
  }
  else
  {
    *(_DWORD *)(v23 + 24) -= 2;
  }
  if (WebCore::RenderSVGResourceClipper::clipPathUnits(*(WebCore::RenderSVGResourceClipper **)(a1[3] + 8)) == 2)
  {
    v30[4] = v5 + 0.0;
    v30[5] = v7 + 0.0;
    v30[0] = v9;
    v30[1] = v9 * 0.0;
    v30[2] = v11 * 0.0;
    v30[3] = v11;
    v5 = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)v30, (const WebCore::FloatRect *)v31);
    if (!v12)
      return v5;
  }
  else
  {
    v5 = v24;
    if (!v12)
      return v5;
  }
  v28 = *(_QWORD **)(v12 + 8);
  if (v28)
    WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderElement>((uint64_t)&qword_1ECE849C0, v28);
  if (*(_DWORD *)v12 == 1)
    WTF::fastFree((WTF *)v12, v28);
  else
    --*(_DWORD *)v12;
  return v5;
}

uint64_t WebCore::RenderSVGResourceClipper::updateFromStyle(WebCore::RenderSVGResourceClipper *this)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  unsigned int *v5;
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  float v11;
  int v12;

  result = (*(uint64_t (**)(WebCore::RenderSVGResourceClipper *))(*(_QWORD *)this + 832))(this);
  if ((result & 1) != 0
    || (v3 = *((_QWORD *)this + 11), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 40) + 20))
    || (v10 = *(_QWORD *)(v3 + 40), *(_QWORD *)(v10 + 328))
    || *(_QWORD *)(v10 + 320)
    || *(_QWORD *)(v10 + 312)
    || *(_QWORD *)(v10 + 304)
    || (*(_DWORD *)(v10 + 636) & 0x180) == 0x80)
  {
    v6 = *((_DWORD *)this + 5);
    v5 = (unsigned int *)((char *)this + 20);
    v4 = v6;
LABEL_4:
    v7 = 0x20000;
    goto LABEL_5;
  }
  v11 = *(float *)(v10 + 260);
  v12 = *((_DWORD *)this + 5);
  v5 = (unsigned int *)((char *)this + 20);
  v4 = v12;
  if (v11 != -1.0)
    goto LABEL_4;
  v7 = 0;
LABEL_5:
  v8 = v4 & 0xFFEDFFFF;
  if ((_DWORD)result)
    v9 = 0x100000;
  else
    v9 = 0;
  *v5 = v8 | v7 | v9;
  return result;
}

void WebCore::RenderSVGResourceClipper::applyTransform(WebCore::MotionPath *a1, float64x2_t *a2, WebCore::RenderStyle *a3, const WebCore::FloatRect *a4, char a5, __n128 a6, __n128 a7, __n128 a8, __n128 a9)
{
  uint64_t v9;
  void *v10;
  _BYTE v11[56];
  _BYTE v12[56];

  v9 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 8);
  if ((*(_WORD *)(v9 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v9 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::clipPathTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196512B40);
  }
  *(_DWORD *)(v9 + 24) += 2;
  v12[0] = 0;
  v12[48] = 0;
  v11[0] = 0;
  v11[48] = 0;
  WebCore::RenderLayerModelObject::applySVGTransform(a1, a2, (_QWORD *)v9, a3, a4, (uint64_t)v12, (uint64_t)v11, a5, a6, a7, a8, a9);
  if (*(_DWORD *)(v9 + 24) == 2)
  {
    if ((*(_WORD *)(v9 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v9, v10);
  }
  else
  {
    *(_DWORD *)(v9 + 24) -= 2;
  }
}

BOOL WebCore::RenderSVGResourceClipper::needsHasSVGTransformFlags(WebCore::RenderSVGResourceClipper *this)
{
  uint64_t v1;
  void *v2;
  _BOOL8 hasTransformRelatedAttributes;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::clipPathTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196512BE8);
  }
  *(_DWORD *)(v1 + 24) += 2;
  hasTransformRelatedAttributes = WebCore::SVGGraphicsElement::hasTransformRelatedAttributes((WebCore::SVGGraphicsElement *)v1);
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v1, v2);
  }
  else
  {
    *(_DWORD *)(v1 + 24) -= 2;
  }
  return hasTransformRelatedAttributes;
}

void WebCore::RenderSVGResourceClipper::styleDidChange(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  void *v4;
  WebCore::RenderLayer *v5;
  uint64_t v6;

  WebCore::RenderLayerModelObject::styleDidChange(a1, a2, a3);
  if ((*(_BYTE *)(a1 + 21) & 0x80) != 0)
  {
    v5 = *(WebCore::RenderLayer **)(a1 + 144);
    v6 = *((_QWORD *)v5 + 3);
    *((_QWORD *)v5 + 3) = v6 | 0x40;
    if ((v6 & 0x4A) == 0)
      WebCore::RenderLayer::isStackingContextChanged(v5, v4);
  }
}

void WebCore::RenderSVGResourceContainer::~RenderSVGResourceContainer(WebCore::RenderSVGResourceContainer *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = off_1E3445A38;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  WTF::StringImpl *v3;
  void *v4;

  *(_QWORD *)this = off_1E3445A38;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v4);
  }
}

void WebCore::RenderSVGResourceContainer::willBeDestroyed(WebCore::RenderLayerModelObject *this, void *a2)
{
  *((_BYTE *)this + 232) = 0;
  WebCore::RenderLayerModelObject::willBeDestroyed(this, a2);
}

void WebCore::RenderSVGResourceContainer::styleDidChange(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  void *v4;
  WebCore::TreeScope *v5;
  uint64_t v6;
  __int16 v7;
  BOOL v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t *v14;
  uint64_t *v15;
  void *v16;
  uint64_t v17;
  WebCore::SVGElement **v18;
  uint64_t v19;
  WebCore::SVGElement *v20;
  WebCore::SVGElement *v21;
  WebCore *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  WTF *v31;
  uint64_t v32;
  WebCore::SVGElement *v33;
  _QWORD v34[2];
  WTF *v35;
  int v36;
  unsigned int v37;

  WebCore::RenderLayerModelObject::styleDidChange(a1, a2, a3);
  if (*(_BYTE *)(a1 + 232))
    return;
  *(_BYTE *)(a1 + 232) = 1;
  v5 = *(WebCore::TreeScope **)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) + 40);
  v6 = *(_QWORD *)v5;
  v7 = *(_WORD *)(*(_QWORD *)v5 + 28);
  if (*(_QWORD *)v5)
    v8 = (v7 & 0x80) == 0;
  else
    v8 = 1;
  if (!v8 && !*(_BYTE *)(v6 + 193))
  {
    v23 = *(_QWORD *)(v6 + 200);
    if (v23)
    {
      v24 = *(_QWORD *)(v23 + 8);
      if (v24)
      {
        if (*(_WORD *)(*(_QWORD *)(v24 + 96) + 10) == 242)
        {
          v5 = (WebCore::TreeScope *)*((_QWORD *)v5 + 2);
          v6 = *(_QWORD *)v5;
          v7 = *(_WORD *)(*(_QWORD *)v5 + 28);
        }
      }
    }
  }
  if ((v7 & 0xF000) != 0x9000 && (v7 & 0x80) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196512ECCLL);
  }
  *(_DWORD *)(v6 + 24) += 2;
  v11 = *(_QWORD *)(a1 + 224);
  v10 = (uint64_t *)(a1 + 224);
  v9 = v11;
  if (v11)
  {
    if (*(_DWORD *)(v9 + 4))
    {
      v14 = (uint64_t *)WebCore::TreeScope::svgResourcesMap(v5);
      if (*v14)
      {
        if (WTF::RobinHoodHashTable<WTF::AtomString,WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>>,WTF::DefaultHash<WTF::AtomString>,WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::AtomString>,WTF::MemoryCompactRobinHoodHashTableSizePolicy>::lookup<WTF::IdentityHashTranslator<WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::KeyValuePairTraits,WTF::DefaultHash<WTF::AtomString>>,WTF::AtomString>(v14, v10))
        {
          v15 = (uint64_t *)WebCore::TreeScope::svgResourcesMap(v5);
          WTF::HashMap<WTF::AtomString,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>,WTF::DefaultHash<WTF::AtomString>,WTF::HashTraits<WTF::AtomString>,WTF::HashTraits<WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>,WTF::MemoryCompactRobinHoodHashTableTraits>::take(v15, v10, v34);
          WTF::copyToVectorOf<WTF::Ref<WebCore::SVGElement,WTF::RawPtrTraits<WebCore::SVGElement>,WTF::DefaultRefDerefTraits<WebCore::SVGElement>>,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>((uint64_t)v34, v16, (uint64_t)&v35);
          v17 = v34[0];
          if (v34[0])
          {
            v25 = *(unsigned int *)(v34[0] - 4);
            if ((_DWORD)v25)
            {
              for (i = 0; i != v25; ++i)
              {
                v27 = *(_QWORD *)(v17 + 8 * i);
                if (v27 != -1)
                {
                  *(_QWORD *)(v17 + 8 * i) = 0;
                  if (v27)
                  {
                    do
                    {
                      v28 = __ldaxr((unsigned int *)v27);
                      v29 = v28 - 1;
                    }
                    while (__stlxr(v29, (unsigned int *)v27));
                    if (!v29)
                    {
                      atomic_store(1u, (unsigned int *)v27);
                      v30 = *(unsigned int *)(v27 + 28);
                      if ((_DWORD)v30)
                        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v27 + 16), (WTF::StringImpl *)(*(_QWORD *)(v27 + 16) + 32 * v30));
                      v31 = *(WTF **)(v27 + 16);
                      if (v31)
                      {
                        *(_QWORD *)(v27 + 16) = 0;
                        *(_DWORD *)(v27 + 24) = 0;
                        WTF::fastFree(v31, v4);
                      }
                      WTF::fastFree((WTF *)v27, v4);
                    }
                  }
                }
              }
            }
            WTF::fastFree((WTF *)(v17 - 16), v4);
          }
          v18 = (WebCore::SVGElement **)v35;
          if (!v37)
            goto LABEL_26;
          v19 = 8 * v37;
          do
          {
            v20 = *v18;
            if ((WebCore::TreeScope::isElementWithPendingSVGResources(v5, *v18) & 1) == 0)
              *((_QWORD *)v20 + 2) &= ~0x8000000000000000;
            v22 = *v18++;
            WebCore::notifyResourceChanged(v22, v21);
            v19 -= 8;
          }
          while (v19);
          v18 = (WebCore::SVGElement **)v35;
          if (v37)
          {
            v32 = 8 * v37;
            do
            {
              v33 = *v18;
              *v18 = 0;
              if (v33)
              {
                if (*((_DWORD *)v33 + 6) == 2)
                {
                  if ((*((_WORD *)v33 + 15) & 0x400) == 0)
                    WebCore::Node::removedLastRef(v33, v4);
                }
                else
                {
                  *((_DWORD *)v33 + 6) -= 2;
                }
              }
              ++v18;
              v32 -= 8;
            }
            while (v32);
            v18 = (WebCore::SVGElement **)v35;
            if (!v35)
              goto LABEL_10;
          }
          else
          {
LABEL_26:
            if (!v18)
              goto LABEL_10;
          }
          v35 = 0;
          v36 = 0;
          WTF::fastFree((WTF *)v18, v4);
        }
      }
    }
  }
LABEL_10:
  v12 = *(_QWORD *)v5;
  v13 = *(_WORD *)(*(_QWORD *)v5 + 28);
  if ((!*(_QWORD *)v5 || (v13 & 0xF000) != 0x9000) && (v13 & 0x80) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196512EF0);
  }
  if (*(_DWORD *)(v12 + 24) == 2)
  {
    if ((*(_WORD *)(v12 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v12, v4);
  }
  else
  {
    *(_DWORD *)(v12 + 24) -= 2;
  }
}

uint64_t WTF::copyToVectorOf<WTF::Ref<WebCore::SVGElement,WTF::RawPtrTraits<WebCore::SVGElement>,WTF::DefaultRefDerefTraits<WebCore::SVGElement>>,WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>>@<X0>(uint64_t result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v19;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v3 = *(_QWORD *)result;
  if (!*(_QWORD *)result)
  {
LABEL_2:
    *(_DWORD *)(result + 8) = 0;
LABEL_3:
    v4 = 0;
    *(_DWORD *)(result + 12) = 0;
LABEL_4:
    v5 = 0;
    v6 = 0;
    v3 = 0;
    v7 = 0;
    v8 = 0;
    v47 = 0;
    v48 = 0;
    v46 = (uint64_t *)result;
    v9 = 1;
    goto LABEL_5;
  }
  v11 = *(unsigned int *)(v3 - 4);
  if (!(_DWORD)v11)
    goto LABEL_11;
  v15 = 0;
  v16 = v11 - 1;
  do
  {
    v17 = v3 + 8 * v16;
    if ((unint64_t)(*(_QWORD *)v17 + 1) >= 2 && !*(_QWORD *)(*(_QWORD *)v17 + 8))
    {
      v38 = result;
      v42 = a3;
      v33 = v16;
      v34 = v3;
      v35 = v15;
      WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::deleteBucket((uint64_t *)(v3 + 8 * v16), a2);
      v16 = v33;
      v3 = v34;
      result = v38;
      a3 = v42;
      v15 = v35 + 1;
    }
  }
  while ((unint64_t)v16--);
  v3 = *(_QWORD *)result;
  if (v15)
  {
    v28 = v15;
    *(_DWORD *)(v3 - 16) += v15;
    v29 = *(_QWORD *)result;
    if (*(_QWORD *)result)
      v30 = *(_DWORD *)(v29 - 12);
    else
      v30 = 0;
    *(_DWORD *)(v29 - 12) = v30 - v28;
    v3 = *(_QWORD *)result;
  }
  if (!v3)
    goto LABEL_2;
  v19 = *(_DWORD *)(v3 - 4);
  if (v19 < 9 || 6 * *(_DWORD *)(v3 - 12) >= v19)
  {
LABEL_11:
    *(_DWORD *)(result + 8) = 0;
  }
  else
  {
    v37 = result;
    v41 = a3;
    WTF::HashTable<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>,WTF::IdentityExtractor,WTF::DefaultHash<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>,WTF::HashTraits<WTF::Ref<WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>,WTF::DefaultRefDerefTraits<WebCore::WeakPtrImplWithEventTargetData>>>>::shrinkToBestSize((uint64_t *)result);
    result = v37;
    a3 = v41;
    v21 = *(_QWORD *)v37;
    *(_DWORD *)(v37 + 8) = 0;
    if (!v21)
      goto LABEL_3;
    v3 = v21;
  }
  v12 = *(_DWORD *)(v3 - 12);
  if (v12 >= 0x7FFFFFFF)
    v13 = -2;
  else
    v13 = 2 * v12;
  *(_DWORD *)(result + 12) = v13;
  v14 = *(unsigned int *)(v3 - 12);
  if ((_DWORD)v14)
  {
    v40 = (uint64_t *)result;
    v44 = a3;
    if (v14 >> 29)
    {
      __break(0xC471u);
      JUMPOUT(0x19651327CLL);
    }
    v26 = *(_DWORD *)(v3 - 12);
    result = WTF::fastMalloc((WTF *)(8 * v14));
    *(_DWORD *)(v44 + 8) = v26;
    v4 = result;
    *(_QWORD *)v44 = result;
    v27 = *v40;
    if (!*v40)
    {
      result = (uint64_t)v40;
      a3 = v44;
      goto LABEL_4;
    }
    v3 = *v40;
    v8 = *(unsigned int *)(v27 - 4);
    v6 = v27 + 8 * v8;
    if (*(_DWORD *)(v27 - 12))
    {
      v5 = *v40;
      if ((_DWORD)v8)
      {
        v31 = 8 * v8;
        v5 = *v40;
        while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
        {
          v5 += 8;
          v31 -= 8;
          if (!v31)
          {
            v5 = v6;
            break;
          }
        }
      }
      v46 = v40;
      v47 = v5;
      a3 = v44;
      goto LABEL_18;
    }
    result = (uint64_t)v40;
    a3 = v44;
  }
  else
  {
    v4 = 0;
    v8 = *(unsigned int *)(v3 - 4);
    v6 = v3 + 8 * v8;
  }
  v46 = (uint64_t *)result;
  v47 = v6;
  v5 = v6;
LABEL_18:
  v9 = 0;
  v48 = v6;
  v7 = v6;
LABEL_5:
  v49 = v7;
  v50 = v3 + 8 * v8;
  if (v5 != v7)
  {
    if (*(_QWORD *)(*(_QWORD *)v5 + 8))
    {
      v22 = v5;
    }
    else
    {
      do
      {
        v32 = v5 + 8;
        v5 = v6;
        if (v32 != v6)
        {
          v5 = v32;
          while ((unint64_t)(*(_QWORD *)v5 + 1) <= 1)
          {
            v5 += 8;
            if (v5 == v6)
            {
              v5 = v6;
              break;
            }
          }
        }
        v22 = v7;
        if (v5 == v7)
          break;
        v22 = v5;
      }
      while (!*(_QWORD *)(*(_QWORD *)v5 + 8));
    }
    v47 = v22;
    v5 = v22;
  }
  if ((v9 & 1) != 0)
    v10 = 0;
  else
    v10 = v3 + 8 * *(unsigned int *)(v3 - 4);
  if (v5 != v10)
  {
    v23 = 0;
    v39 = v4;
    v43 = a3;
    v36 = v10;
    do
    {
      v24 = *(_QWORD *)(*(_QWORD *)v5 + 8);
      *(_DWORD *)(v24 + 24) += 2;
      v25 = v23 + 1;
      v45 = 0;
      *(_QWORD *)(v4 + 8 * v23) = v24;
      *(_DWORD *)(a3 + 12) = v23 + 1;
      WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v45);
      result = (uint64_t)WTF::WeakHashSet<WebCore::RTCPeerConnection,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::WeakHashSetConstIterator::operator++(&v46);
      v4 = v39;
      a3 = v43;
      v5 = v47;
      v23 = v25;
    }
    while (v47 != v36);
  }
  return result;
}

void WebCore::notifyResourceChanged(WebCore *this, WebCore::SVGElement *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  uint64_t v12;
  uint64_t *v14;
  unsigned int *v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  WTF *v19;
  uint64_t v20;
  uint64_t v21;
  WTF *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  _QWORD v26[2];
  uint64_t *v27;
  WTF *v28;
  uint64_t v29;

  if (byte_1ECE8495F == 1)
  {
    v3 = dword_1ECE849D8 + 1;
  }
  else
  {
    *(_QWORD *)&dword_1ECE849D8 = 0;
    qword_1ECE849D0 = 0;
    v3 = 1;
    byte_1ECE8495F = 1;
  }
  v27 = &qword_1ECE849D0;
  dword_1ECE849D8 = v3;
  v4 = *((_QWORD *)this + 2);
  v5 = v4 & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0xFFFFFFFFFFFFLL) != 0 && *(_QWORD *)((v4 & 0xFFFFFFFFFFFFLL) + 8) && qword_1ECE849D0)
  {
    v6 = *(_DWORD *)(qword_1ECE849D0 - 8);
    v7 = (v5 + ~(v4 << 32)) ^ ((unint64_t)(v5 + ~(v4 << 32)) >> 22);
    v8 = 9 * ((v7 + ~(v7 << 13)) ^ ((v7 + ~(v7 << 13)) >> 8));
    v9 = (v8 ^ (v8 >> 15)) + ~((v8 ^ (v8 >> 15)) << 27);
    v10 = v6 & ((v9 >> 31) ^ v9);
    for (i = 1; ; ++i)
    {
      v12 = *(_QWORD *)(qword_1ECE849D0 + 8 * v10);
      if (!v12)
        break;
      if (v12 != -1 && v12 == v5)
        return;
      v10 = (v10 + i) & v6;
    }
  }
  v14 = (uint64_t *)&v27;
  v26[0] = &v27;
  v15 = (unsigned int *)WTF::WeakPtr<WebCore::LocalDOMWindow,WebCore::WeakPtrImplWithEventTargetData,WTF::RawPtrTraits<WebCore::WeakPtrImplWithEventTargetData>>::implForObject<WebCore::LocalDOMWindow>((uint64_t)this);
  if (v15)
  {
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    v14 = (uint64_t *)v26[0];
  }
  v26[1] = v15;
  WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::SVGElement>(*v14, this, (uint64_t)&v28);
  v18 = *((_QWORD *)this + 15);
  if (v18)
  {
    v28 = 0;
    v29 = 0;
    WTF::Mapper<WTF::Vector<WTF::WeakPtr<WebCore::SVGResourceElementClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc> WTF::copyToVector<WebCore::SVGResourceElementClient,WTF::DefaultWeakPtrImpl>(WTF::WeakHashSet<WebCore::SVGResourceElementClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&)::{lambda(WebCore::SVGResourceElementClient&)#1},WTF::Vector<WTF::WeakPtr<WebCore::SVGResourceElementClient,WTF::DefaultWeakPtrImpl,WTF::RawPtrTraits<WTF::DefaultWeakPtrImpl>>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>,WTF::WeakHashSet<WebCore::SVGResourceElementClient,WTF::DefaultWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1> const&,void>::map((unsigned int **)&v28, (_DWORD *)(v18 + 24));
    v19 = v28;
    if (!HIDWORD(v29))
      goto LABEL_26;
    v20 = 8 * HIDWORD(v29);
    do
    {
      if (*(_QWORD *)v19)
      {
        v21 = *(_QWORD *)(*(_QWORD *)v19 + 8);
        if (v21)
          (*(void (**)(uint64_t, WebCore *))(*(_QWORD *)v21 + 16))(v21, this);
      }
      v19 = (WTF *)((char *)v19 + 8);
      v20 -= 8;
    }
    while (v20);
    v19 = v28;
    if (HIDWORD(v29))
    {
      v22 = (WTF *)((char *)v28 + 8 * HIDWORD(v29));
      do
      {
        v23 = *(unsigned int **)v19;
        *(_QWORD *)v19 = 0;
        if (v23)
        {
          do
          {
            v24 = __ldaxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
          {
            atomic_store(1u, v23);
            WTF::fastFree((WTF *)v23, v17);
          }
        }
        v19 = (WTF *)((char *)v19 + 8);
      }
      while (v19 != v22);
      v19 = v28;
      if (!v28)
        goto LABEL_17;
    }
    else
    {
LABEL_26:
      if (!v19)
        goto LABEL_17;
    }
    v28 = 0;
    LODWORD(v29) = 0;
    WTF::fastFree(v19, v17);
  }
LABEL_17:
  WebCore::SVGVisitedElementTracking::Scope::~Scope((WebCore::SVGVisitedElementTracking::Scope *)v26, v17);
}

void WebCore::RenderSVGResourceContainer::repaintAllClients(WebCore::RenderSVGResourceContainer *this, WebCore::SVGElement *a2)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v2 + 28) & 0x20) != 0)
  {
    *(_DWORD *)(v2 + 24) += 2;
    WebCore::notifyResourceChanged((WebCore *)v2, a2);
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2, v3);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  else
  {
    __break(0xC471u);
  }
}

const char *WebCore::RenderSVGImage::renderName(WebCore::RenderSVGImage *this)
{
  return "RenderSVGImage";
}

uint64_t WebCore::RenderSVGImage::canHaveChildren(WebCore::RenderSVGImage *this)
{
  return 0;
}

float WebCore::RenderSVGImage::strokeBoundingBox(WebCore::RenderSVGImage *this)
{
  return *((float *)this + 42);
}

float WebCore::RenderSVGImage::repaintRectInLocalCoordinates(uint64_t a1, double a2)
{
  WTF *v3;
  void *v4;
  float v5;
  WTF *v6;
  void *v8;
  WTF *v9;
  WTF *v10;

  v3 = *(WTF **)(a1 + 8);
  if (!v3)
  {
    v3 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v3 = 1;
    *((_QWORD *)v3 + 1) = a1;
    v9 = *(WTF **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v3;
    if (v9)
    {
      if (*(_DWORD *)v9 == 1)
      {
        WTF::fastFree(v9, v8);
        v3 = *(WTF **)(a1 + 8);
      }
      else
      {
        --*(_DWORD *)v9;
      }
    }
  }
  ++*(_DWORD *)v3;
  v10 = v3;
  v5 = WebCore::SVGBoundingBoxComputation::computeDecoratedBoundingBox((uint64_t)&v10, WebCore::SVGBoundingBoxComputation::repaintBoundingBoxDecoration, 0, a2);
  v6 = v10;
  v10 = 0;
  if (v6)
  {
    if (*(_DWORD *)v6 == 1)
      WTF::fastFree(v6, v4);
    else
      --*(_DWORD *)v6;
  }
  return v5;
}

const char *WebCore::RenderSVGInline::renderName(WebCore::RenderSVGInline *this)
{
  return "RenderSVGInline";
}

uint64_t WebCore::RenderSVGInline::requiresLayer(WebCore::RenderSVGInline *this)
{
  return 0;
}

uint64_t WebCore::RenderSVGInline::currentSVGLayoutLocation(WebCore::RenderSVGInline *this)
{
  return 0;
}

const char *WebCore::RenderSVGInlineText::renderName(WebCore::RenderSVGInlineText *this)
{
  return "RenderSVGInlineText";
}

const char *WebCore::RenderSVGPath::renderName(WebCore::RenderSVGPath *this)
{
  return "RenderSVGPath";
}

const char *WebCore::RenderSVGRect::renderName(WebCore::RenderSVGRect *this)
{
  return "RenderSVGRect";
}

uint64_t WebCore::RenderSVGRect::isEmpty(WebCore::RenderSVGRect *this)
{
  uint64_t v1;
  int v2;
  uint64_t result;

  v1 = *((_QWORD *)this + 28);
  if (!v1)
  {
    if (*((float *)this + 44) > 0.0)
      return *((float *)this + 45) <= 0.0;
    return 1;
  }
  v2 = *(_DWORD *)(v1 + 64);
  if (v2 != 2)
    return !v2;
  result = *(_QWORD *)(v1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 200))(result);
  return result;
}

const char *WebCore::RenderSVGResourceClipper::renderName(WebCore::RenderSVGResourceClipper *this)
{
  return "RenderSVGResourceClipper";
}

void WebCore::SVGTextLayoutAttributes::~SVGTextLayoutAttributes(WebCore::SVGTextLayoutAttributes *this, WTF::StringImpl *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF::StringImpl **v5;
  WTF::StringImpl *v6;
  WTF::StringImpl *v7;
  WTF *v8;
  uint64_t v9;
  WTF *v10;

  v3 = *((unsigned int *)this + 7);
  if ((_DWORD)v3)
  {
    v4 = 40 * v3;
    v5 = (WTF::StringImpl **)(*((_QWORD *)this + 2) + 32);
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
      {
        if (*(_DWORD *)v6 == 2)
          WTF::StringImpl::destroy(v6, a2);
        else
          *(_DWORD *)v6 -= 2;
      }
      v7 = *(v5 - 1);
      *(v5 - 1) = 0;
      if (v7)
      {
        if (*(_DWORD *)v7 == 2)
          WTF::StringImpl::destroy(v7, a2);
        else
          *(_DWORD *)v7 -= 2;
      }
      v5 += 5;
      v4 -= 40;
    }
    while (v4);
  }
  v8 = (WTF *)*((_QWORD *)this + 2);
  if (v8)
  {
    *((_QWORD *)this + 2) = 0;
    *((_DWORD *)this + 6) = 0;
    WTF::fastFree(v8, a2);
  }
  v9 = *((_QWORD *)this + 1);
  if (v9)
    WTF::fastFree((WTF *)(v9 - 16), a2);
  v10 = *(WTF **)this;
  *(_QWORD *)this = 0;
  if (v10)
  {
    if (*(_DWORD *)v10 == 1)
      WTF::fastFree(v10, a2);
    else
      --*(_DWORD *)v10;
  }
}

WTF *WebCore::SVGLayerTransformComputation::computeAccumulatedTransform@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t i;
  unint64_t v11;
  uint64_t v12;
  uint64_t j;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  WebCore::RenderBox *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  WTF *v26;
  float64x2_t v27;
  float64x2_t v28;
  double v29;
  double v30;
  _BYTE *v31;
  float v32;
  float v33;
  float v34;
  float v36;
  float v37;
  float v38;
  WTF *v45;
  WTF *result;
  uint64_t k;
  float64x2_t v48;
  float64x2_t v49;
  uint64_t v50;
  _OWORD v51[4];
  char v52;
  WTF *v53;
  WTF *v54;
  uint64_t v55;
  char v56;
  __int16 v57;
  int v58;
  int v59;

  v7 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if (v7 && *(_BYTE *)(v7 + 46) == 83)
  {
    v8 = *(unsigned int *)(v7 + 64);
    v9 = v8 | ((unint64_t)*(unsigned __int8 *)(v7 + 68) << 32);
    if (v9)
    {
      v9 = *(_QWORD *)((v8 | ((unint64_t)*(unsigned __int8 *)(v7 + 68) << 32)) + 8);
      if (v9)
      {
        if ((*(_BYTE *)(v9 + 45) & 1) != 0)
        {
          if (*(_BYTE *)(v9 + 46) != 88)
            v9 = 0;
        }
        else
        {
          v9 = 0;
        }
      }
    }
    if (a3 == 1)
      v11 = v7;
    else
      v11 = 0;
    v7 = v9;
    goto LABEL_36;
  }
  if (a3 == 1)
  {
    if (a2)
    {
      for (i = *(_QWORD *)(a2 + 32); i; i = *(_QWORD *)(v11 + 32))
      {
        v11 = *(_QWORD *)(i + 8);
        if (!v11 || (*(_BYTE *)(v11 + 45) & 0x10) != 0)
          goto LABEL_36;
      }
    }
    else
    {
      for (j = *(_QWORD *)(v7 + 32); j; j = *(_QWORD *)(v14 + 32))
      {
        v14 = *(_QWORD *)(j + 8);
        if (!v14)
          break;
        if (*(_BYTE *)(v14 + 46) == 83)
        {
          v15 = *(unsigned int *)(v14 + 64) | ((unint64_t)*(unsigned __int8 *)(v14 + 68) << 32);
          if (v15)
          {
            v16 = *(_QWORD *)(v15 + 8);
            if (v16)
            {
              if ((*(_BYTE *)(v16 + 45) & 1) != 0)
              {
                if (*(_BYTE *)(v16 + 46) == 88)
                  v11 = v16;
                else
                  v11 = 0;
                goto LABEL_36;
              }
            }
          }
          break;
        }
      }
    }
LABEL_35:
    v11 = 0;
    goto LABEL_36;
  }
  v11 = 0;
  if (!a2 || a3 != 2)
    goto LABEL_36;
  v12 = *(_QWORD *)(a2 + 32);
  if (!v12)
    goto LABEL_35;
  while (1)
  {
    v11 = *(_QWORD *)(v12 + 8);
    if (!v11 || (*(_BYTE *)(v11 + 45) & 0x10) != 0)
      break;
    v12 = *(_QWORD *)(v11 + 32);
    if (!v12)
      goto LABEL_35;
  }
LABEL_36:
  v52 = 0;
  v54 = 0;
  v55 = 0;
  v53 = 0;
  v56 = 0;
  memset(v51, 0, 41);
  v57 = 1;
  v58 = a3;
  v59 = 0;
  (*(void (**)(unint64_t, unint64_t, _OWORD *, uint64_t, _QWORD))(*(_QWORD *)v7 + 576))(v7, v11, v51, 6, 0);
  if (a3 == 1)
  {
    v17 = *(WebCore::RenderBox **)(*(_QWORD *)a1 + 8);
    if (v17 && *((_BYTE *)v17 + 46) == 83)
    {
      v18 = WebCore::RenderBox::contentBoxLocation(v17);
      v19 = -(int)v18;
      if ((v18 & 0xFFFFFFFF00000000) == 0x8000000000000000)
        v20 = 0x7FFFFFFF00000000;
      else
        v20 = -(uint64_t)(v18 & 0xFFFFFFFF00000000);
      if ((_DWORD)v18 == 0x80000000)
        v19 = 0x7FFFFFFFLL;
      v50 = v20 | v19;
      WebCore::TransformState::move((WebCore::TransformState *)v51, (WebCore::LayoutSize *)&v50, 0);
    }
    else if (v11)
    {
      v21 = v11;
      if (*(_BYTE *)(v11 + 46) == 83)
      {
LABEL_47:
        v22 = *(unsigned int *)(v21 + 64) | ((unint64_t)*(unsigned __int8 *)(v21 + 68) << 32);
        if (v22 && (v23 = *(_QWORD *)(v22 + 8)) != 0 && (*(_BYTE *)(v23 + 45) & 1) != 0)
        {
          if (*(_BYTE *)(v23 + 46) == 88)
            v24 = v23;
          else
            v24 = 0;
        }
        else
        {
          v24 = 0;
        }
        (*(void (**)(unint64_t, uint64_t, _OWORD *, uint64_t, _QWORD))(*(_QWORD *)v11 + 576))(v11, v24, v51, 4, 0);
      }
      else
      {
        for (k = *(_QWORD *)(v11 + 32); k; k = *(_QWORD *)(v21 + 32))
        {
          v21 = *(_QWORD *)(k + 8);
          if (!v21)
            break;
          if (*(_BYTE *)(v21 + 46) == 83)
            goto LABEL_47;
        }
      }
    }
  }
  WebCore::TransformState::flatten((WebCore::TransformState *)v51, 0);
  v26 = v54;
  v54 = 0;
  if (v26)
  {
    v27 = *(float64x2_t *)v26;
    v28 = *((float64x2_t *)v26 + 2);
    v30 = *((double *)v26 + 12);
    v29 = *((double *)v26 + 13);
    *(_OWORD *)a4 = *(_OWORD *)v26;
    *(float64x2_t *)(a4 + 16) = v28;
    *(double *)(a4 + 32) = v30;
    *(double *)(a4 + 40) = v29;
    v31 = *(_BYTE **)(*(_QWORD *)a1 + 8);
    if (v31[46] != 83)
    {
      v48 = v28;
      v49 = v27;
      v32 = floorf((*(float (**)(_BYTE *))(*(_QWORD *)v31 + 248))(v31) * 64.0);
      if (v32 >= 2147500000.0)
      {
        v34 = 33554000.0;
      }
      else if (v32 <= -2147500000.0)
      {
        v34 = -33554000.0;
      }
      else
      {
        v34 = (float)(int)v32 * 0.015625;
      }
      _V4.D[1] = v49.f64[1];
      v36 = floorf(v33 * 64.0);
      if (v36 >= 2147500000.0)
      {
        v37 = 33554000.0;
      }
      else if (v36 <= -2147500000.0)
      {
        v37 = -33554000.0;
      }
      else
      {
        v37 = (float)(int)v36 * 0.015625;
      }
      v38 = -v37;
      _D1 = (float)-v34;
      _D0 = v38;
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v49, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64(v48, (float64x2_t)xmmword_1968A14C0))))) & 1) != 0)
      {
        *(double *)(a4 + 32) = vmlad_n_f64(_D0 * v48.f64[0], _D1, v49.f64[0]) + v30;
        __asm { FMLA            D0, D1, V4.D[1] }
      }
      else
      {
        *(double *)(a4 + 32) = v30 + _D1;
      }
      *(double *)(a4 + 40) = _D0 + v29;
    }
    WTF::fastFree(v26, v25);
    v45 = v54;
    v54 = 0;
    if (v45)
      WTF::fastFree(v45, v25);
  }
  else
  {
    *(_OWORD *)a4 = xmmword_1969FDF98;
    *(_OWORD *)(a4 + 16) = unk_1969FDFA8;
    *(_OWORD *)(a4 + 32) = xmmword_1969FDFB8;
  }
  result = v53;
  v53 = 0;
  if (result)
    return (WTF *)WTF::fastFree(result, v25);
  return result;
}

uint64_t WTF::Vector<WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatPoint&>(uint64_t a1, unint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 12)) = *(_QWORD *)WTF::Vector<WTF::ObjectIdentifierGeneric<WebCore::AttributedStringTextListIDType,WTF::ObjectIdentifierMainThreadAccessTraits<unsigned long long>,unsigned long long>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(a1, *(unsigned int *)(a1 + 12) + 1, a2);
  ++*(_DWORD *)(a1 + 12);
  return 1;
}

double std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::sharedClipAllPath(void)::$_0 &&>>()
{
  _QWORD v1[2];

  qword_1ECE84A68 = 0;
  xmmword_1ECE84A48 = 0u;
  unk_1ECE84A58 = 0u;
  xmmword_1ECE84A28 = 0u;
  unk_1ECE84A38 = 0u;
  v1[0] = 0;
  v1[1] = 0;
  return WebCore::Path::addRect((WebCore::Path *)&xmmword_1ECE84A28, (const WebCore::FloatRect *)v1);
}

void WebCore::SVGVisitedElementTracking::Scope::~Scope(WebCore::SVGVisitedElementTracking::Scope *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  WTF *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 8);
    if (v4)
    {
      *(_DWORD *)(v4 + 24) += 2;
      WTF::WeakHashSet<WebCore::SVGElement,WebCore::WeakPtrImplWithEventTargetData,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::SVGElement>(**(_QWORD **)this, (_QWORD *)v4);
      if (*(_DWORD *)(v4 + 24) == 2)
      {
        if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v4);
      }
      else
      {
        *(_DWORD *)(v4 + 24) -= 2;
      }
    }
    v5 = *((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = 0;
    if (v5)
    {
      do
      {
        v6 = __ldaxr((unsigned int *)v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, (unsigned int *)v5));
      if (!v7)
      {
        atomic_store(1u, (unsigned int *)v5);
        v8 = *(unsigned int *)(v5 + 28);
        if ((_DWORD)v8)
        {
          v11 = v5;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v5 + 16), (WTF::StringImpl *)(*(_QWORD *)(v5 + 16) + 32 * v8));
          v5 = v11;
        }
        v9 = *(WTF **)(v5 + 16);
        if (v9)
        {
          *(_QWORD *)(v5 + 16) = 0;
          *(_DWORD *)(v5 + 24) = 0;
          v10 = v5;
          WTF::fastFree(v9, a2);
          v5 = v10;
        }
        WTF::fastFree((WTF *)v5, a2);
      }
    }
  }
  else
  {
    *((_QWORD *)this + 1) = 0;
  }
}

uint64_t WTF::Detail::CallableWrapper<WebCore::RenderSVGPath::updateZeroLengthSubpaths(void)::$_0,void,WebCore::PathElement const&>::call(uint64_t a1, uint64_t a2)
{
  return WebCore::SVGSubpathData::updateFromPathElement(*(_QWORD *)(a1 + 8), a2);
}

uint64_t WebCore::SVGSubpathData::updateFromPathElement(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  float v3;
  float v4;
  uint64_t v6;
  BOOL v8;
  uint64_t v9;
  float v10;
  float v11;
  float v14;
  float v15;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v2 = result;
  switch(*(_BYTE *)a2)
  {
    case 0:
      if (*(_BYTE *)(result + 25))
        v8 = *(_BYTE *)(result + 24) == 0;
      else
        v8 = 0;
      if (v8)
      {
        v22 = a2;
        v18 = (_QWORD *)(result + 8);
        result = *(_QWORD *)result;
        v19 = *(unsigned int *)(*(_QWORD *)v2 + 12);
        if ((_DWORD)v19 == *(_DWORD *)(*(_QWORD *)v2 + 8))
        {
          result = WTF::Vector<WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatPoint&>(result, (unint64_t)v18);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)result + 8 * v19) = *v18;
          ++*(_DWORD *)(result + 12);
        }
        a2 = v22;
      }
      v9 = *(_QWORD *)(a2 + 4);
      *(_QWORD *)(v2 + 8) = v9;
      *(_QWORD *)(v2 + 16) = v9;
      *(_WORD *)(v2 + 24) = 257;
      return result;
    case 1:
      if (*(float *)(result + 8) == *(float *)(a2 + 4) && *(float *)(result + 12) == *(float *)(a2 + 8))
        goto LABEL_8;
      *(_BYTE *)(result + 25) = 0;
      v6 = *(_QWORD *)(a2 + 4);
      break;
    case 2:
      v11 = *(float *)(a2 + 4);
      v10 = *(float *)(a2 + 8);
      if (*(float *)(result + 8) == v11
        && *(float *)(result + 12) == v10
        && v11 == *(float *)(a2 + 12)
        && v10 == *(float *)(a2 + 16))
      {
        goto LABEL_8;
      }
      *(_BYTE *)(result + 25) = 0;
      v6 = *(_QWORD *)(a2 + 12);
      break;
    case 3:
      v4 = *(float *)(a2 + 4);
      v3 = *(float *)(a2 + 8);
      if (*(float *)(result + 8) == v4 && *(float *)(result + 12) == v3)
      {
        v14 = *(float *)(a2 + 12);
        v15 = *(float *)(a2 + 16);
        if (v4 == v14 && v3 == v15 && v14 == *(float *)(a2 + 20) && v15 == *(float *)(a2 + 24))
          goto LABEL_8;
      }
      *(_BYTE *)(result + 25) = 0;
      v6 = *(_QWORD *)(a2 + 20);
      break;
    case 4:
      if (*(_BYTE *)(result + 25))
      {
        v20 = (_QWORD *)(result + 8);
        result = *(_QWORD *)result;
        v21 = *(unsigned int *)(*(_QWORD *)v2 + 12);
        if ((_DWORD)v21 == *(_DWORD *)(*(_QWORD *)v2 + 8))
        {
          result = WTF::Vector<WebCore::FloatPoint,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::appendSlowCase<(WTF::FailureAction)0,WebCore::FloatPoint&>(result, (unint64_t)v20);
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)result + 8 * v21) = *v20;
          ++*(_DWORD *)(result + 12);
        }
      }
      *(_WORD *)(v2 + 24) = 257;
      *(_QWORD *)(v2 + 8) = *(_QWORD *)(v2 + 16);
      return result;
    default:
      return result;
  }
  *(_QWORD *)(result + 8) = v6;
LABEL_8:
  *(_BYTE *)(result + 24) = 0;
  return result;
}

void WTF::Detail::CallableWrapper<WebCore::RenderSVGPath::updateMarkerPositions(void)::$_0,void,WebCore::PathElement const&>::call(uint64_t a1, unsigned __int8 *a2)
{
  WebCore::SVGMarkerData::updateFromPathElement(*(_QWORD *)(a1 + 8), a2);
}

void WebCore::SVGMarkerData::updateFromPathElement(uint64_t a1, unsigned __int8 *a2)
{
  int v4;
  int v5;
  float v6;
  _BOOL4 v7;
  int v8;
  int v9;
  uint64_t v10;
  float v11;
  float v12;
  float v13;
  float v14;
  double v15;
  double v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;

  v4 = *a2;
  if (*a2)
  {
    *(_QWORD *)(a1 + 44) = *(_QWORD *)(a1 + 12);
    *(_QWORD *)(a1 + 52) = *(_QWORD *)(a2 + 4);
    v4 = *a2;
  }
  v5 = *(_DWORD *)(a1 + 8);
  if (v5)
  {
    v6 = *(float *)(a1 + 52) - *(float *)(a1 + 44);
    v7 = v5 != 1;
    if (v4)
      v8 = v5 != 1;
    else
      v8 = 2;
    if (*(_BYTE *)(a1 + 61))
      v9 = 0;
    else
      v9 = v8;
    v10 = *(_QWORD *)a1;
    v11 = *(float *)(a1 + 56) - *(float *)(a1 + 48);
    v12 = atan2f(*(float *)(a1 + 40) - *(float *)(a1 + 32), *(float *)(a1 + 36) - *(float *)(a1 + 28)) * 57.296;
    v13 = atan2f(v11, v6);
    if (v9 != 2)
    {
      v14 = v13 * 57.296;
      if (v9 == 1)
      {
        v15 = v14;
        v16 = v12;
        if (vabdd_f64(v12, v15) > 180.0)
          v16 = v12 + 360.0;
        v12 = (v16 + v15) * 0.5;
      }
      else if (*(_BYTE *)(a1 + 60))
      {
        v12 = v14 + -180.0;
      }
      else
      {
        v12 = v14;
      }
    }
    LODWORD(v22) = v7;
    *(_QWORD *)((char *)&v22 + 4) = *(_QWORD *)(a1 + 12);
    *((float *)&v22 + 3) = v12;
    v17 = *(unsigned int *)(v10 + 12);
    if ((_DWORD)v17 == *(_DWORD *)(v10 + 8))
    {
      v18 = WTF::Vector<std::optional<WebCore::GPUColorTargetState>,0ul,WTF::CrashOnOverflow,16ul,WTF::FastMalloc>::expandCapacity<(WTF::FailureAction)0>(v10, v17 + 1, (unint64_t)&v22);
      v17 = *(unsigned int *)(v10 + 12);
      v19 = *(_QWORD *)v10;
      v20 = *(_OWORD *)v18;
    }
    else
    {
      v19 = *(_QWORD *)v10;
      v20 = v22;
    }
    *(_OWORD *)(v19 + 16 * v17) = v20;
    ++*(_DWORD *)(v10 + 12);
    v4 = *a2;
  }
  switch(v4)
  {
    case 0:
      *(_QWORD *)(a1 + 20) = *(_QWORD *)(a2 + 4);
      goto LABEL_24;
    case 1:
LABEL_24:
      *(_QWORD *)(a1 + 28) = *(_QWORD *)(a1 + 12);
      *(_QWORD *)(a1 + 36) = *(_QWORD *)(a2 + 4);
      v21 = *(_QWORD *)(a2 + 4);
      goto LABEL_27;
    case 2:
      v21 = *(_QWORD *)(a2 + 12);
      goto LABEL_27;
    case 3:
      *(_QWORD *)(a1 + 28) = *(_QWORD *)(a2 + 12);
      *(_QWORD *)(a1 + 36) = *(_QWORD *)(a2 + 20);
      v21 = *(_QWORD *)(a2 + 20);
LABEL_27:
      *(_QWORD *)(a1 + 12) = v21;
      break;
    case 4:
      *(_QWORD *)(a1 + 28) = *(_QWORD *)(a1 + 12);
      *(_QWORD *)(a1 + 36) = *(_QWORD *)(a2 + 4);
      *(_QWORD *)(a1 + 12) = *(_QWORD *)(a1 + 20);
      *(_DWORD *)(a1 + 20) = 0;
      *(_DWORD *)(a1 + 24) = 0;
      break;
    default:
      break;
  }
  *(_BYTE *)(a1 + 61) = *a2 == 0;
  ++*(_DWORD *)(a1 + 8);
}

uint64_t WebCore::RenderSVGResourceFilter::operator new(uint64_t this)
{
  if (this == 240)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

uint64_t WebCore::RenderSVGResourceFilter::RenderSVGResourceFilter(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;
  _DWORD **v6;
  _DWORD *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  result = WebCore::RenderLayerModelObject::RenderLayerModelObject(a1, 76, a2, a3, 0, 3588);
  *(_OWORD *)(result + 188) = 0u;
  *(_OWORD *)(result + 172) = 0u;
  *(_QWORD *)(result + 152) = 0;
  *(_QWORD *)(result + 160) = 0;
  *(_DWORD *)(result + 167) = 0;
  *(int32x4_t *)(result + 204) = vdupq_n_s32(0x7FC00000u);
  v5 = *(_QWORD *)(a2 + 104);
  if (v5 && *(_QWORD *)(v5 + 24))
  {
    v8 = *(_DWORD *)(v5 + 4);
    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD **)(v5 + 40);
      LODWORD(v10) = *(_DWORD *)(v5 + 52);
    }
    else
    {
      v9 = (_QWORD *)(v5 + 32);
      LODWORD(v10) = v8 >> 5;
    }
    if ((_DWORD)v10)
    {
      v10 = v10;
      while (1)
      {
        v11 = *v9;
        if (*v9 == WebCore::HTMLNames::idAttr
          || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
          && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
        {
          break;
        }
        v9 += 2;
        if (!--v10)
          goto LABEL_18;
      }
    }
    else
    {
LABEL_18:
      v9 = 0;
    }
    v6 = (_DWORD **)(v9 + 1);
  }
  else
  {
    v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
  }
  v7 = *v6;
  if (v7)
    *v7 += 2;
  *(_QWORD *)(result + 224) = v7;
  *(_BYTE *)(result + 232) = 0;
  *(_QWORD *)result = off_1E3445EC0;
  return result;
}

void WebCore::RenderSVGResourceFilter::~RenderSVGResourceFilter(WebCore::RenderSVGResourceFilter *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = off_1E3445A38;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  WTF::StringImpl *v3;
  bmalloc::api *v4;
  void *v5;

  *(_QWORD *)this = off_1E3445A38;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  bmalloc::api::isoDeallocate(v4, v5);
}

float WebCore::RenderSVGResourceFilter::resourceBoundingBox(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned __int8 v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  float v18[4];

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if ((*(_WORD *)(v2 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196514554);
  }
  if (*(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::filterTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196514574);
  }
  *(_DWORD *)(v2 + 24) += 2;
  v4 = *(_QWORD **)(v2 + 192);
  v5 = v4[3];
  if (!v5 || !*(_DWORD *)(v5 - 12))
    goto LABEL_4;
  v13 = *(unsigned int *)(v5 - 4);
  if ((_DWORD)v13)
  {
    v14 = 8 * v13;
    v15 = (uint64_t *)v4[3];
    while ((unint64_t)(*v15 + 1) <= 1)
    {
      ++v15;
      v14 -= 8;
      if (!v14)
        goto LABEL_4;
    }
  }
  else
  {
    v15 = (uint64_t *)v4[3];
  }
  v16 = (uint64_t *)(v5 + 8 * v13);
  if (v15 == v16)
    goto LABEL_4;
  v17 = *v15;
LABEL_22:
  if (!*(_QWORD *)(v17 + 8))
  {
    while (++v15 != v16)
    {
      v17 = *v15;
      if ((unint64_t)(*v15 + 1) > 1)
      {
        if (v15 != v16)
          goto LABEL_22;
        break;
      }
    }
LABEL_4:
    v6 = v4 + 5;
    goto LABEL_5;
  }
  v6 = v4 + 6;
LABEL_5:
  v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 32))(*v6);
  v18[0] = (*(float (**)(uint64_t))(*(_QWORD *)a2 + 232))(a2);
  v18[1] = v8;
  v18[2] = v9;
  v18[3] = v10;
  v11 = WebCore::SVGLengthContext::resolveRectangle<WebCore::SVGFilterElement>((uint64_t *)v2, v7, v18);
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  return v11;
}

uint64_t WebCore::RenderSVGResourceFilterPrimitive::operator new(uint64_t this)
{
  if (this == 224)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

int32x4_t WebCore::RenderSVGResourceFilterPrimitive::RenderSVGResourceFilterPrimitive(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int32x4_t result;

  v3 = WebCore::RenderLayerModelObject::RenderLayerModelObject(a1, 77, a2, a3, 0, 1540);
  *(_OWORD *)(v3 + 188) = 0u;
  *(_OWORD *)(v3 + 172) = 0u;
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 160) = 0;
  result = vdupq_n_s32(0x7FC00000u);
  *(_DWORD *)(v3 + 167) = 0;
  *(int32x4_t *)(v3 + 204) = result;
  *(_QWORD *)v3 = off_1E3446290;
  return result;
}

void WebCore::RenderSVGResourceFilterPrimitive::markFilterEffectForRepaint(WebCore::RenderSVGResourceFilterPrimitive *this, WebCore::FilterEffect *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  int v6;

  if (a2)
  {
    v2 = *((_QWORD *)this + 4);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 8);
      if (v3)
      {
        if (*(_BYTE *)(v3 + 46) == 76)
        {
          ++*(_DWORD *)(v3 + 16);
          v4 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
          if ((*(_WORD *)(v4 + 28) & 0x20) == 0)
            goto LABEL_13;
          *(_DWORD *)(v4 + 24) += 2;
          WebCore::notifyResourceChanged((WebCore *)v4, a2);
          if (*(_DWORD *)(v4 + 24) == 2)
          {
            if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
              WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
          }
          else
          {
            *(_DWORD *)(v4 + 24) -= 2;
          }
          v6 = *(_DWORD *)(v3 + 16);
          if (!v6)
          {
LABEL_13:
            __break(0xC471u);
            JUMPOUT(0x1965146ECLL);
          }
          *(_DWORD *)(v3 + 16) = v6 - 1;
        }
      }
    }
  }
}

void WebCore::RenderSVGResourceFilterPrimitive::markFilterEffectForRebuild(WebCore::RenderSVGResourceFilterPrimitive *this, WebCore::SVGElement *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  int v6;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
    {
      if (*(_BYTE *)(v3 + 46) == 76)
      {
        ++*(_DWORD *)(v3 + 16);
        v4 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 8);
        if ((*(_WORD *)(v4 + 28) & 0x20) == 0)
          goto LABEL_12;
        *(_DWORD *)(v4 + 24) += 2;
        WebCore::notifyResourceChanged((WebCore *)v4, a2);
        if (*(_DWORD *)(v4 + 24) == 2)
        {
          if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
            WebCore::Node::removedLastRef((WebCore::Node *)v4, v5);
        }
        else
        {
          *(_DWORD *)(v4 + 24) -= 2;
        }
        v6 = *(_DWORD *)(v3 + 16);
        if (!v6)
        {
LABEL_12:
          __break(0xC471u);
          JUMPOUT(0x1965147C4);
        }
        *(_DWORD *)(v3 + 16) = v6 - 1;
      }
    }
  }
}

void WebCore::RenderSVGResourceFilterPrimitive::styleDidChange(uint64_t a1, WTF::StringImpl *a2, uint64_t a3)
{
  int v4;
  void *v6;
  WebCore::SVGRenderStyle *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _BOOL4 v16;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _BOOL4 v24;
  BOOL v26;
  char v27;
  uint64_t *v28;
  char v29;
  WTF *v30;
  void *v31;
  char v32;
  char *v33;

  v4 = (int)a2;
  WebCore::RenderLayerModelObject::styleDidChange(a1, a2, a3);
  if (v4 && a3)
  {
    v7 = *(WebCore::SVGRenderStyle **)(a1 + 136);
    ++*(_DWORD *)v7;
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    v9 = *(_WORD *)(v8 + 28);
    if ((v9 & 0x20) == 0)
    {
      __break(0xC471u);
      goto LABEL_60;
    }
    v10 = *(_QWORD *)(*(_QWORD *)(v8 + 96) + 24);
    if (v10 != *(_QWORD *)(WebCore::SVGNames::feFloodTag + 24)
      && v10 != *(_QWORD *)(WebCore::SVGNames::feDropShadowTag + 24))
    {
      if (v10 != *(_QWORD *)(WebCore::SVGNames::feDiffuseLightingTag + 24)
        && v10 != *(_QWORD *)(WebCore::SVGNames::feSpecularLightingTag + 24))
      {
        goto LABEL_52;
      }
      v11 = *((_QWORD *)v7 + 7);
      v12 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 56);
      v13 = *(unsigned int *)(v11 + 32);
      v14 = *(_DWORD *)(v12 + 32);
      v16 = v14 == (_DWORD)v13 && v14 != -1;
      if ((_DWORD)v13 == -1 || !v16)
      {
        if ((_DWORD)v13 == -1)
          v18 = v14 == -1;
        else
          v18 = v16;
        if (v18)
          goto LABEL_52;
      }
      else
      {
        v33 = &v32;
        v29 = ((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v13])(&v33, v11 + 24, v12 + 24);
        if ((v29 & 1) != 0)
          goto LABEL_52;
        v8 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
        v9 = *(_WORD *)(v8 + 28);
      }
      if ((v9 & 0x20) != 0)
      {
        v28 = &WebCore::SVGNames::lighting_colorAttr;
        goto LABEL_51;
      }
      __break(0xC471u);
LABEL_60:
      JUMPOUT(0x196514A40);
    }
    v19 = *((_QWORD *)v7 + 7);
    v20 = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 56);
    v21 = *(unsigned int *)(v19 + 16);
    v22 = *(_DWORD *)(v20 + 16);
    v24 = v22 == (_DWORD)v21 && v22 != -1;
    if ((_DWORD)v21 == -1 || !v24)
    {
      if ((_DWORD)v21 == -1)
        v26 = v22 == -1;
      else
        v26 = v24;
      if (!v26)
        goto LABEL_42;
    }
    else
    {
      v33 = &v32;
      v27 = ((uint64_t (*)(char **, uint64_t, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100INS1_9__variant15__value_visitorINS_17__convert_to_BOOLINS_8equal_toIvEEEEEEJRKNS0_6__implIJN7WebCore18StyleAbsoluteColorENSC_17StyleCurrentColorEN3WTF9UniqueRefINSC_13StyleColorMixEEENSG_INSC_18StyleRelativeColorINSC_25RGBFunctionModernRelativeEEEEENSG_INSJ_INSC_17HSLFunctionModernEEEEENSG_INSJ_INSC_11HWBFunctionEEEEENSG_INSJ_INSC_11LabFunctionEEEEENSG_INSJ_INSC_11LCHFunctionEEEEENSG_INSJ_INSC_13OKLabFunctionEEEEENSG_INSJ_INSC_13OKLCHFunctionEEEEENSG_INSJ_INSC_16ColorRGBFunctionINSC_20ExtendedGammaEncodedIfNSC_16A98RGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_19DisplayP3DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_21ProPhotoRGBDescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_17Rec2020DescriptorEEEEEEEEENSG_INSJ_INS15_INS16_IfNSC_15SRGBADescriptorEEEEEEEEENSG_INSJ_INS15_INSC_21ExtendedLinearEncodedIfS1R_EEEEEEEENSG_INSJ_INSC_16ColorXYZFunctionINSC_4XYZAIfLNSC_10WhitePointE0EEEEEEEEENSG_INSJ_INS21_INS22_IfLS23_1EEEEEEEEEEEES2E_EEEDcmOT_DpOT0____fdiagonal[v21])(&v33, v19 + 8, v20 + 8);
      if ((v27 & 1) == 0)
      {
        v8 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
        v9 = *(_WORD *)(v8 + 28);
LABEL_42:
        if ((v9 & 0x20) == 0)
        {
          __break(0xC471u);
          JUMPOUT(0x196514A80);
        }
        WebCore::SVGFilterPrimitiveStandardAttributes::primitiveAttributeChanged((WebCore::SVGFilterPrimitiveStandardAttributes *)v8, (const WebCore::QualifiedName *)&WebCore::SVGNames::flood_colorAttr);
      }
    }
    if (*(float *)(*((_QWORD *)v7 + 7) + 4) == *(float *)(*(_QWORD *)(*(_QWORD *)(a3 + 56) + 56) + 4))
      goto LABEL_52;
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
    if ((*(_WORD *)(v8 + 28) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196514A60);
    }
    v28 = &WebCore::SVGNames::flood_opacityAttr;
LABEL_51:
    WebCore::SVGFilterPrimitiveStandardAttributes::primitiveAttributeChanged((WebCore::SVGFilterPrimitiveStandardAttributes *)v8, (const WebCore::QualifiedName *)v28);
LABEL_52:
    if (*(_DWORD *)v7 == 1)
    {
      WebCore::SVGRenderStyle::~SVGRenderStyle(v7, v6);
      WTF::fastFree(v30, v31);
    }
    else
    {
      --*(_DWORD *)v7;
    }
  }
}

void WebCore::RenderSVGResourceGradient::~RenderSVGResourceGradient(WebCore::RenderSVGResourceGradient *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  WTF::StringImpl *v11;
  uint64_t v12;

  *(_QWORD *)this = off_1E3446640;
  v3 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v12 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v12 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  *(_QWORD *)this = off_1E3445A38;
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

uint64_t *WebCore::RenderSVGResourceGradient::stopsByApplyingColorFilter@<X0>(const WebCore::GradientColorStops *a1@<X1>, const WebCore::RenderStyle *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v7;
  uint64_t *result;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  uint64_t *v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;

  if (!*(_DWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 320) + 20))
  {
    v17 = *((unsigned int *)a1 + 3);
    result = (uint64_t *)(a3 + 16);
    *(_QWORD *)a3 = a3 + 16;
    *(_DWORD *)(a3 + 8) = 2;
    *(_DWORD *)(a3 + 12) = v17;
    if (v17 >= 3)
    {
      if (v17 >> 28)
      {
        __break(0xC471u);
LABEL_34:
        JUMPOUT(0x196514DE4);
      }
      result = (uint64_t *)WTF::fastMalloc((WTF *)(16 * v17));
      *(_DWORD *)(a3 + 8) = v17;
      *(_QWORD *)a3 = result;
      v17 = *((unsigned int *)a1 + 3);
      if ((_DWORD)v17)
        goto LABEL_16;
    }
    else if ((_DWORD)v17)
    {
LABEL_16:
      v18 = *(_QWORD *)a1;
      v19 = *(_QWORD *)a1 + 16 * v17;
      do
      {
        *(_DWORD *)result = *(_DWORD *)v18;
        v20 = *(_QWORD *)(v18 + 8);
        result[1] = v20;
        if ((v20 & 0x8000000000000) != 0)
        {
          v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFLL);
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 + 1, v21));
        }
        result += 2;
        v18 += 16;
      }
      while (v18 != v19);
    }
    v13 = *((_BYTE *)a1 + 48);
    goto LABEL_31;
  }
  v23 = &v25;
  v24 = 2;
  v7 = *((unsigned int *)a1 + 3);
  if (v7 < 3)
  {
    result = &v25;
    if ((_DWORD)v7)
      goto LABEL_4;
    goto LABEL_7;
  }
  if (v7 >> 28)
  {
    __break(0xC471u);
    goto LABEL_34;
  }
  result = (uint64_t *)WTF::fastMalloc((WTF *)(16 * v7));
  LODWORD(v24) = v7;
  v23 = result;
  if (*((_DWORD *)a1 + 3))
  {
LABEL_4:
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = (int *)(*(_QWORD *)a1 + v9);
      v27 = *v11;
      WebCore::RenderStyle::colorByApplyingColorFilter((uint64_t)a2, (const WebCore::Color *)(v11 + 2), (unint64_t *)&v28);
      v12 = &v23[2 * HIDWORD(v24)];
      *(_DWORD *)v12 = v27;
      v12[1] = 0;
      v12[1] = v28;
      ++HIDWORD(v24);
      ++v10;
      v9 += 16;
    }
    while (v10 < *((unsigned int *)a1 + 3));
    result = v23;
  }
LABEL_7:
  v13 = *((_BYTE *)a1 + 48);
  *(_QWORD *)a3 = a3 + 16;
  *(_DWORD *)(a3 + 8) = 2;
  if (result == &v25)
  {
    if (HIDWORD(v24))
    {
      v14 = (uint64_t *)(a3 + 24);
      v15 = 16 * HIDWORD(v24);
      v16 = &v26;
      do
      {
        *((_DWORD *)v14 - 2) = *((_DWORD *)v16 - 2);
        *v14 = 0;
        if (*v16)
        {
          *v14 = *v16;
          *v16 = 0;
        }
        v14 += 2;
        v16 += 2;
        v15 -= 16;
      }
      while (v15);
    }
  }
  else
  {
    *(_QWORD *)a3 = result;
    *(_DWORD *)(a3 + 8) = v24;
  }
  *(_DWORD *)(a3 + 12) = HIDWORD(v24);
LABEL_31:
  *(_BYTE *)(a3 + 48) = v13;
  return result;
}

uint64_t WebCore::RenderSVGResourceGradient::buildGradientIfNeeded(WebCore::RenderSVGResourceGradient *this, const WebCore::RenderLayerModelObject *a2, const WebCore::RenderStyle *a3, WebCore::AffineTransform *a4)
{
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  double v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t result;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  float64x2_t v40;
  double v41;
  double v42;
  double v45;
  double v46;
  double v47;
  double v48;
  double v54;
  double v55;
  uint64_t v57;
  uint64_t v58;
  double v59;
  double v60;
  double v61;
  float64x2_t v62;
  double v63;

  if (*((_QWORD *)this + 30))
    goto LABEL_38;
  (*(void (**)(WebCore::RenderSVGResourceGradient *))(*(_QWORD *)this + 976))(this);
  (*(void (**)(double *__return_ptr, WebCore::RenderSVGResourceGradient *, const WebCore::RenderStyle *))(*(_QWORD *)this + 984))(&v59, this, a3);
  v8 = v59;
  v59 = 0.0;
  v9 = *((_QWORD *)this + 30);
  *((double *)this + 30) = v8;
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 8);
    if (__ldaxr((unsigned __int8 *)v10))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v10))
    {
      goto LABEL_7;
    }
    MEMORY[0x19AEA534C](v10);
LABEL_7:
    v12 = *(_QWORD *)(v10 + 8);
    v13 = v12 - 1;
    *(_QWORD *)(v10 + 8) = v12 - 1;
    if (v12 == 1)
    {
      v57 = *(_QWORD *)(v10 + 16);
      v14 = *(_QWORD *)(v10 + 24);
      *(_QWORD *)(v10 + 24) = 0;
      v15 = v57 != 0;
    }
    else
    {
      v14 = 0;
      v15 = 1;
    }
    v16 = __ldxr((unsigned __int8 *)v10);
    if (v16 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v10))
      {
        if (v13)
          goto LABEL_19;
LABEL_15:
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        if (!v15)
          WTF::fastFree((WTF *)v10, a2);
LABEL_19:
        v17 = v59;
        v59 = 0.0;
        if (v17 == 0.0)
          goto LABEL_36;
        v18 = *(_QWORD *)(*(_QWORD *)&v17 + 8);
        if (__ldaxr((unsigned __int8 *)v18))
        {
          __clrex();
        }
        else if (!__stxr(1u, (unsigned __int8 *)v18))
        {
          goto LABEL_24;
        }
        MEMORY[0x19AEA534C](v18);
LABEL_24:
        v20 = *(_QWORD *)(v18 + 8);
        v21 = v20 - 1;
        *(_QWORD *)(v18 + 8) = v20 - 1;
        if (v20 == 1)
        {
          v58 = *(_QWORD *)(v18 + 16);
          v22 = *(_QWORD *)(v18 + 24);
          *(_QWORD *)(v18 + 24) = 0;
          v23 = v58 != 0;
        }
        else
        {
          v22 = 0;
          v23 = 1;
        }
        v24 = __ldxr((unsigned __int8 *)v18);
        if (v24 == 1)
        {
          if (!__stlxr(0, (unsigned __int8 *)v18))
          {
            if (!v21)
              goto LABEL_32;
            goto LABEL_36;
          }
        }
        else
        {
          __clrex();
        }
        WTF::Lock::unlockSlow((WTF::Lock *)v18);
        if (!v21)
        {
LABEL_32:
          if (v22)
            (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          if (!v23)
            WTF::fastFree((WTF *)v18, a2);
        }
LABEL_36:
        v8 = *((double *)this + 30);
        goto LABEL_37;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v10);
    if (v13)
      goto LABEL_19;
    goto LABEL_15;
  }
LABEL_37:
  if (v8 == 0.0)
    return 0;
LABEL_38:
  v25 = (*(float (**)(const WebCore::RenderLayerModelObject *, const WebCore::RenderLayerModelObject *, const WebCore::RenderStyle *))(*(_QWORD *)a2 + 232))(a2, a2, a3);
  v27 = v26;
  v29 = v28;
  v31 = v30;
  if ((*(unsigned int (**)(WebCore::RenderSVGResourceGradient *))(*(_QWORD *)this + 968))(this) == 2)
  {
    result = 0;
    if (v29 <= 0.0 || v31 <= 0.0)
      return result;
    v33 = v25;
    v34 = v27;
    v36 = *(double *)a4;
    v35 = *((double *)a4 + 1);
    v38 = *((double *)a4 + 2);
    v37 = *((double *)a4 + 3);
    if (*(double *)a4 == 1.0 && v35 == 0.0 && v38 == 0.0 && v37 == 1.0)
    {
      *((double *)a4 + 4) = *((double *)a4 + 4) + v33;
    }
    else
    {
      *((double *)a4 + 4) = v38 * v34 + v33 * v36 + *((double *)a4 + 4);
      v34 = v37 * v34 + v33 * v35;
    }
    *((double *)a4 + 5) = v34 + *((double *)a4 + 5);
    *(double *)a4 = v36 * v29;
    *((double *)a4 + 1) = v35 * v29;
    *((double *)a4 + 2) = v38 * v31;
    *((double *)a4 + 3) = v37 * v31;
  }
  (*(void (**)(double *__return_ptr, WebCore::RenderSVGResourceGradient *))(*(_QWORD *)this + 992))(&v59, this);
  _V0.D[1] = v62.f64[1];
  v40.f64[0] = v59;
  v40.f64[1] = v61;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v40, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64(v62, (float64x2_t)xmmword_1968A14B0))))) & 1) != 0|| v60 != 0.0|| v63 != 0.0)
  {
    v41 = *((double *)a4 + 2);
    v42 = *((double *)a4 + 3);
    _D16 = *(double *)a4;
    _D17 = *((double *)a4 + 1);
    v45 = v60 * v41 + v59 * *(double *)a4;
    v46 = v60 * v42 + v59 * _D17;
    v47 = v41 * v62.f64[0] + v61 * *(double *)a4;
    v48 = v42 * v62.f64[0] + v61 * _D17;
    __asm { FMLA            D5, D16, V0.D[1] }
    v54 = *((double *)a4 + 5);
    v55 = *((double *)a4 + 4) + _D5;
    __asm { FMLA            D1, D17, V0.D[1] }
    *(double *)a4 = v45;
    *((double *)a4 + 1) = v46;
    *((double *)a4 + 2) = v47;
    *((double *)a4 + 3) = v48;
    *((double *)a4 + 4) = v55;
    *((double *)a4 + 5) = _D1 + v54;
  }
  return 1;
}

uint64_t WebCore::RenderSVGResourceGradient::prepareFillOperation(WebCore::RenderSVGResourceGradient *this, WebCore::GraphicsContext *a2, const WebCore::RenderLayerModelObject *a3, const WebCore::RenderStyle *a4)
{
  uint64_t v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  int v22;
  WTF *v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28[3];

  v28[0] = constinit_9;
  v28[1] = xmmword_1969FDFE0;
  v28[2] = xmmword_1969FDFF0;
  v7 = WebCore::RenderSVGResourceGradient::buildGradientIfNeeded(this, a3, a4, (WebCore::AffineTransform *)v28);
  if ((_DWORD)v7)
  {
    v8 = *((_QWORD *)a4 + 7);
    ++*(_DWORD *)v8;
    v9 = *(float *)(*(_QWORD *)(v8 + 16) + 4);
    if (*((float *)a2 + 84) != v9)
    {
      *((float *)a2 + 84) = v9;
      *((_DWORD *)a2 + 46) |= 0x100u;
    }
    (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a2 + 88))(a2, (char *)a2 + 8);
    if ((((*((_BYTE *)a2 + 192) == 0) ^ ((*(_WORD *)(v8 + 4) & 8) >> 3)) & 1) == 0)
    {
      *((_BYTE *)a2 + 192) = (*(_WORD *)(v8 + 4) & 8) >> 3;
      *((_DWORD *)a2 + 46) |= 2u;
    }
    (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a2 + 88))(a2, (char *)a2 + 8);
    v10 = *((_QWORD *)this + 30);
    if (!v10)
    {
LABEL_16:
      v27 = v10;
      WebCore::SourceBrush::setGradient((uint64_t)a2 + 8, &v27, v28);
      *((_DWORD *)a2 + 46) |= 1u;
      (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a2 + 88))(a2, (char *)a2 + 8);
      v15 = v27;
      v27 = 0;
      if (!v15)
        goto LABEL_33;
      v16 = *(_QWORD *)(v15 + 8);
      if (__ldaxr((unsigned __int8 *)v16))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v16))
      {
        goto LABEL_21;
      }
      MEMORY[0x19AEA534C](v16);
LABEL_21:
      v18 = *(_QWORD *)(v16 + 8);
      v19 = v18 - 1;
      *(_QWORD *)(v16 + 8) = v18 - 1;
      if (v18 == 1)
      {
        v26 = *(_QWORD *)(v16 + 16);
        v20 = *(_QWORD *)(v16 + 24);
        *(_QWORD *)(v16 + 24) = 0;
        v21 = v26 != 0;
      }
      else
      {
        v20 = 0;
        v21 = 1;
      }
      v22 = __ldxr((unsigned __int8 *)v16);
      if (v22 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v16))
        {
          if (!v19)
            goto LABEL_29;
          goto LABEL_33;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v16);
      if (!v19)
      {
LABEL_29:
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        if (!v21)
          WTF::fastFree((WTF *)v16, v14);
      }
LABEL_33:
      if (*(_DWORD *)v8 == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle((WebCore::SVGRenderStyle *)v8, v14);
        WTF::fastFree(v24, v25);
      }
      else
      {
        --*(_DWORD *)v8;
      }
      return v7;
    }
    v11 = *(_QWORD *)(v10 + 8);
    if (__ldaxr((unsigned __int8 *)v11))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v11))
    {
      goto LABEL_11;
    }
    MEMORY[0x19AEA534C](v11);
LABEL_11:
    ++*(_QWORD *)(v11 + 8);
    v13 = __ldxr((unsigned __int8 *)v11);
    if (v13 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v11))
        goto LABEL_16;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v11);
    goto LABEL_16;
  }
  return v7;
}

uint64_t WebCore::RenderSVGResourceGradient::prepareStrokeOperation(WebCore::RenderSVGResourceGradient *this, WebCore::GraphicsContext *a2, const WebCore::RenderLayerModelObject *a3, const WebCore::RenderStyle *a4)
{
  uint64_t v8;
  uint64_t v9;
  float v10;
  const WebCore::RenderElement *v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  WTF *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  double v30;
  double v31;
  double v32;
  int v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;

  v41 = constinit_9;
  v42 = xmmword_1969FDFE0;
  v43 = xmmword_1969FDFF0;
  v8 = WebCore::RenderSVGResourceGradient::buildGradientIfNeeded(this, a3, a4, (WebCore::AffineTransform *)&v41);
  if ((_DWORD)v8)
  {
    v9 = *((_QWORD *)a4 + 7);
    ++*(_DWORD *)v9;
    if ((*(_BYTE *)(v9 + 9) & 4) != 0
      && (*((_BYTE *)a3 + 52) & 7) == 4
      && (*((_BYTE *)a3 + 53) & 1) == 0
      && (*((_BYTE *)a3 + 53) & 0x10) != 0)
    {
      ++*((_DWORD *)a3 + 4);
      v28 = *(_QWORD *)(*((_QWORD *)a3 + 3) + 8);
      if ((*(_WORD *)(v28 + 28) & 0x20) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19651573CLL);
      }
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v28 + 1184))(*(_QWORD *)(*((_QWORD *)a3 + 3) + 8)) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19651575CLL);
      }
      *(_DWORD *)(v28 + 24) += 2;
      (*(void (**)(double *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v28 + 1320))(&v35, v28, 1);
      if (*(_DWORD *)(v28 + 24) == 2)
      {
        if ((*(_WORD *)(v28 + 30) & 0x400) == 0)
          WebCore::Node::removedLastRef((WebCore::Node *)v28, v29);
      }
      else
      {
        *(_DWORD *)(v28 + 24) -= 2;
      }
      v30 = v38 * *((double *)&v41 + 1) + *(double *)&v41 * v36;
      v31 = v38 * *((double *)&v42 + 1) + *(double *)&v42 * v36;
      v32 = v40 + v38 * *((double *)&v43 + 1) + *(double *)&v43 * v36;
      *(double *)&v41 = v37 * *((double *)&v41 + 1) + *(double *)&v41 * v35;
      *((double *)&v41 + 1) = v30;
      *(double *)&v42 = v37 * *((double *)&v42 + 1) + *(double *)&v42 * v35;
      *((double *)&v42 + 1) = v31;
      *(double *)&v43 = v39 + v37 * *((double *)&v43 + 1) + *(double *)&v43 * v35;
      *((double *)&v43 + 1) = v32;
      v33 = *((_DWORD *)a3 + 4);
      if (!v33)
      {
        __break(0xC471u);
        JUMPOUT(0x19651577CLL);
      }
      *((_DWORD *)a3 + 4) = v33 - 1;
    }
    v10 = *(float *)(*(_QWORD *)(v9 + 24) + 4);
    if (*((float *)a2 + 84) != v10)
    {
      *((float *)a2 + 84) = v10;
      *((_DWORD *)a2 + 46) |= 0x100u;
    }
    (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a2 + 88))(a2, (char *)a2 + 8);
    WebCore::SVGRenderSupport::applyStrokeStyleToContext((unsigned int *)a2, a4, a3, v11);
    v12 = *((_QWORD *)this + 30);
    if (!v12)
    {
LABEL_16:
      v35 = *(double *)&v12;
      WebCore::SourceBrush::setGradient((uint64_t)a2 + 96, (uint64_t *)&v35, &v41);
      *((_DWORD *)a2 + 46) |= 4u;
      (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a2 + 88))(a2, (char *)a2 + 8);
      v17 = *(_QWORD *)&v35;
      v35 = 0.0;
      if (!v17)
        goto LABEL_33;
      v18 = *(_QWORD *)(v17 + 8);
      if (__ldaxr((unsigned __int8 *)v18))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v18))
      {
        goto LABEL_21;
      }
      MEMORY[0x19AEA534C](v18);
LABEL_21:
      v20 = *(_QWORD *)(v18 + 8);
      v21 = v20 - 1;
      *(_QWORD *)(v18 + 8) = v20 - 1;
      if (v20 == 1)
      {
        v34 = *(_QWORD *)(v18 + 16);
        v22 = *(_QWORD *)(v18 + 24);
        *(_QWORD *)(v18 + 24) = 0;
        v23 = v34 != 0;
      }
      else
      {
        v22 = 0;
        v23 = 1;
      }
      v24 = __ldxr((unsigned __int8 *)v18);
      if (v24 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v18))
        {
          if (!v21)
            goto LABEL_29;
          goto LABEL_33;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v18);
      if (!v21)
      {
LABEL_29:
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        if (!v23)
          WTF::fastFree((WTF *)v18, v16);
      }
LABEL_33:
      if (*(_DWORD *)v9 == 1)
      {
        WebCore::SVGRenderStyle::~SVGRenderStyle((WebCore::SVGRenderStyle *)v9, v16);
        WTF::fastFree(v26, v27);
      }
      else
      {
        --*(_DWORD *)v9;
      }
      return v8;
    }
    v13 = *(_QWORD *)(v12 + 8);
    if (__ldaxr((unsigned __int8 *)v13))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v13))
    {
      goto LABEL_11;
    }
    MEMORY[0x19AEA534C](v13);
LABEL_11:
    ++*(_QWORD *)(v13 + 8);
    v15 = __ldxr((unsigned __int8 *)v13);
    if (v15 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v13))
        goto LABEL_16;
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v13);
    goto LABEL_16;
  }
  return v8;
}

uint64_t WebCore::RenderSVGResourceLinearGradient::operator new(uint64_t this)
{
  if (this == 400)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

uint64_t WebCore::RenderSVGResourceLinearGradient::RenderSVGResourceLinearGradient(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;
  _DWORD **v6;
  _DWORD *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  result = WebCore::RenderLayerModelObject::RenderLayerModelObject(a1, 78, a2, a3, 0, 3588);
  *(_OWORD *)(result + 188) = 0u;
  *(_OWORD *)(result + 172) = 0u;
  *(_QWORD *)(result + 152) = 0;
  *(_QWORD *)(result + 160) = 0;
  *(_DWORD *)(result + 167) = 0;
  *(int32x4_t *)(result + 204) = vdupq_n_s32(0x7FC00000u);
  v5 = *(_QWORD *)(a2 + 104);
  if (v5 && *(_QWORD *)(v5 + 24))
  {
    v8 = *(_DWORD *)(v5 + 4);
    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD **)(v5 + 40);
      LODWORD(v10) = *(_DWORD *)(v5 + 52);
    }
    else
    {
      v9 = (_QWORD *)(v5 + 32);
      LODWORD(v10) = v8 >> 5;
    }
    if ((_DWORD)v10)
    {
      v10 = v10;
      while (1)
      {
        v11 = *v9;
        if (*v9 == WebCore::HTMLNames::idAttr
          || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
          && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
        {
          break;
        }
        v9 += 2;
        if (!--v10)
          goto LABEL_18;
      }
    }
    else
    {
LABEL_18:
      v9 = 0;
    }
    v6 = (_DWORD **)(v9 + 1);
  }
  else
  {
    v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
  }
  v7 = *v6;
  if (v7)
    *v7 += 2;
  *(_QWORD *)(result + 224) = v7;
  *(_BYTE *)(result + 232) = 0;
  *(_QWORD *)(result + 240) = 0;
  *(_QWORD *)result = off_1E3446A38;
  *(_BYTE *)(result + 248) = 0;
  *(_BYTE *)(result + 392) = 0;
  return result;
}

void WebCore::RenderSVGResourceLinearGradient::~RenderSVGResourceLinearGradient(WebCore::RenderSVGResourceLinearGradient *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  WTF::StringImpl *v19;
  uint64_t v20;

  if (*((_BYTE *)this + 392))
  {
    v3 = *((unsigned int *)this + 77);
    v4 = (WTF *)*((_QWORD *)this + 37);
    if ((_DWORD)v3)
    {
      v5 = (WTF *)((char *)v4 + 16 * v3);
      do
      {
        v6 = *((_QWORD *)v4 + 1);
        if ((v6 & 0x8000000000000) != 0)
        {
          v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
          do
          {
            v8 = __ldaxr(v7);
            v9 = v8 - 1;
          }
          while (__stlxr(v9, v7));
          if (!v9)
          {
            atomic_store(1u, v7);
            WTF::fastFree((WTF *)v7, a2);
          }
        }
        v4 = (WTF *)((char *)v4 + 16);
      }
      while (v4 != v5);
      v4 = (WTF *)*((_QWORD *)this + 37);
    }
    if ((WebCore::RenderSVGResourceLinearGradient *)((char *)this + 312) != v4 && v4 != 0)
    {
      *((_QWORD *)this + 37) = 0;
      *((_DWORD *)this + 76) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  *(_QWORD *)this = off_1E3446640;
  v11 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (v11)
  {
    v12 = *(_QWORD *)(v11 + 8);
    if (__ldaxr((unsigned __int8 *)v12))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v12))
    {
      goto LABEL_21;
    }
    MEMORY[0x19AEA534C](v12);
LABEL_21:
    v14 = *(_QWORD *)(v12 + 8);
    v15 = v14 - 1;
    *(_QWORD *)(v12 + 8) = v14 - 1;
    if (v14 == 1)
    {
      v20 = *(_QWORD *)(v12 + 16);
      v16 = *(_QWORD *)(v12 + 24);
      *(_QWORD *)(v12 + 24) = 0;
      v17 = v20 != 0;
    }
    else
    {
      v16 = 0;
      v17 = 1;
    }
    v18 = __ldxr((unsigned __int8 *)v12);
    if (v18 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v12))
      {
        if (v15)
          goto LABEL_33;
LABEL_29:
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        if (!v17)
          WTF::fastFree((WTF *)v12, a2);
        goto LABEL_33;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v12);
    if (v15)
      goto LABEL_33;
    goto LABEL_29;
  }
LABEL_33:
  *(_QWORD *)this = off_1E3445A38;
  v19 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v19)
  {
    if (*(_DWORD *)v19 == 2)
      WTF::StringImpl::destroy(v19, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v19 -= 2;
  }
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::RenderSVGResourceLinearGradient::~RenderSVGResourceLinearGradient(this, a2);
  if (*((_DWORD *)v2 + 4))
  {
    *((_OWORD *)v2 + 23) = 0u;
    *((_OWORD *)v2 + 24) = 0u;
    *((_OWORD *)v2 + 21) = 0u;
    *((_OWORD *)v2 + 22) = 0u;
    *((_OWORD *)v2 + 19) = 0u;
    *((_OWORD *)v2 + 20) = 0u;
    *((_OWORD *)v2 + 17) = 0u;
    *((_OWORD *)v2 + 18) = 0u;
    *((_OWORD *)v2 + 15) = 0u;
    *((_OWORD *)v2 + 16) = 0u;
    *((_OWORD *)v2 + 13) = 0u;
    *((_OWORD *)v2 + 14) = 0u;
    *((_OWORD *)v2 + 11) = 0u;
    *((_OWORD *)v2 + 12) = 0u;
    *((_OWORD *)v2 + 9) = 0u;
    *((_OWORD *)v2 + 10) = 0u;
    *((_OWORD *)v2 + 7) = 0u;
    *((_OWORD *)v2 + 8) = 0u;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *(_OWORD *)v2 = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(v2, v3);
  }
}

unsigned int *WebCore::RenderSVGResourceLinearGradient::collectGradientAttributesIfNeeded(unsigned int *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  WTF::String *v4;
  __n128 v5;
  void *v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  WTF *v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  unsigned int *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  uint64_t v28;
  _OWORD v29[3];
  uint64_t *v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  __int128 v37;
  __int128 v38;
  char v39;

  if (!*((_BYTE *)this + 392))
  {
    v1 = (uint64_t)this;
    v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v2 + 28) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x196515D90);
    }
    if (*(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::linearGradientTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x196515DB0);
    }
    *(_DWORD *)(v2 + 24) += 2;
    WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)v2);
    WebCore::LinearGradientAttributes::LinearGradientAttributes((WebCore::LinearGradientAttributes *)v29);
    if (WebCore::SVGLinearGradientElement::collectGradientAttributes((WebCore::SVGLinearGradientElement *)v2, (WebCore::LinearGradientAttributes *)v29, v5, v3, v4))
    {
      v7 = *(unsigned __int8 *)(v1 + 392);
      v8 = v29[1];
      *(_OWORD *)(v1 + 248) = v29[0];
      *(_OWORD *)(v1 + 264) = v8;
      *(_OWORD *)(v1 + 280) = v29[2];
      if (v7)
      {
        v9 = *(unsigned int *)(v1 + 308);
        if ((_DWORD)v9)
          WTF::VectorTypeOperations<WebCore::GradientColorStop>::destruct(*(_QWORD **)(v1 + 296), (_QWORD *)(*(_QWORD *)(v1 + 296) + 16 * v9));
        v10 = *(WTF **)(v1 + 296);
        if (v10 != (WTF *)(v1 + 312))
        {
          if (v10)
          {
            *(_QWORD *)(v1 + 296) = 0;
            *(_DWORD *)(v1 + 304) = 0;
            WTF::fastFree(v10, v6);
          }
          *(_QWORD *)(v1 + 296) = v1 + 312;
        }
        this = (unsigned int *)v30;
        if (v30 == &v33)
        {
          v11 = v32;
          if (v32)
          {
            v12 = (_QWORD *)(v1 + 320);
            v13 = 16 * v32;
            v14 = v30 + 1;
            do
            {
              *((_DWORD *)v12 - 2) = *((_DWORD *)v14 - 2);
              *v12 = 0;
              if (*v14)
              {
                *v12 = *v14;
                *v14 = 0;
              }
              v12 += 2;
              v14 += 2;
              v13 -= 16;
            }
            while (v13);
          }
          v15 = v31;
        }
        else
        {
          v30 = &v33;
          *(_QWORD *)(v1 + 296) = this;
          v15 = v31;
          v11 = v32;
          this = (unsigned int *)&v33;
          v31 = 2;
        }
        *(_DWORD *)(v1 + 304) = v15;
        v32 = 0;
        *(_DWORD *)(v1 + 308) = v11;
        *(_BYTE *)(v1 + 344) = v35;
        *(_BYTE *)(v1 + 352) = v36;
        *(_BYTE *)(v1 + 388) = v39;
        *(_OWORD *)(v1 + 356) = v37;
        *(_OWORD *)(v1 + 372) = v38;
      }
      else
      {
        *(_QWORD *)(v1 + 296) = v1 + 312;
        *(_DWORD *)(v1 + 304) = 2;
        v21 = v30;
        this = (unsigned int *)&v33;
        if (v30 == &v33)
        {
          v22 = v32;
          if (v32)
          {
            v23 = (uint64_t *)(v1 + 320);
            v24 = 16 * v32;
            v25 = &v34;
            do
            {
              *((_DWORD *)v23 - 2) = *((_DWORD *)v25 - 2);
              *v23 = 0;
              if (*v25)
              {
                *v23 = *v25;
                *v25 = 0;
              }
              v23 += 2;
              v25 += 2;
              v24 -= 16;
            }
            while (v24);
          }
        }
        else
        {
          v30 = &v33;
          *(_QWORD *)(v1 + 296) = v21;
          v26 = v31;
          v22 = v32;
          v31 = 2;
          *(_DWORD *)(v1 + 304) = v26;
        }
        v32 = 0;
        *(_DWORD *)(v1 + 308) = v22;
        *(_BYTE *)(v1 + 344) = v35;
        *(_BYTE *)(v1 + 352) = v36;
        *(_BYTE *)(v1 + 388) = v39;
        *(_OWORD *)(v1 + 356) = v37;
        *(_OWORD *)(v1 + 372) = v38;
        *(_BYTE *)(v1 + 392) = 1;
      }
    }
    else
    {
      this = (unsigned int *)v30;
      if (v32)
      {
        v16 = (unsigned int *)&v30[2 * v32];
        do
        {
          v17 = *((_QWORD *)this + 1);
          if ((v17 & 0x8000000000000) != 0)
          {
            v28 = (uint64_t)this;
            v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFLL);
            do
            {
              v19 = __ldaxr(v18);
              v20 = v19 - 1;
            }
            while (__stlxr(v20, v18));
            if (!v20)
            {
              atomic_store(1u, v18);
              WTF::fastFree((WTF *)v18, v6);
              this = (unsigned int *)v28;
            }
          }
          this += 4;
        }
        while (this != v16);
        this = (unsigned int *)v30;
      }
    }
    if (&v33 == (uint64_t *)this || this == 0)
    {
      if (!v2)
        return this;
    }
    else
    {
      v30 = 0;
      v31 = 0;
      this = (unsigned int *)WTF::fastFree((WTF *)this, v6);
      if (!v2)
        return this;
    }
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v2, v6);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  return this;
}

unsigned int *WebCore::RenderSVGResourceLinearGradient::createGradient@<X0>(unsigned int *this@<X0>, const WebCore::RenderStyle *a2@<X1>, unsigned int **a3@<X8>)
{
  uint64_t v4;
  const WebCore::RenderStyle *v5;
  int64x2_t *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  char v12;
  int64x2_t v13;
  int8x8_t v14;
  int8x16_t v15;
  char v16;
  char v17;
  uint64_t IdentifierInternal;
  uint64_t v19;
  void *v20;
  WTF *v21;
  WTF *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int *v27;
  void *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  float v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  WTF *v37;
  uint64_t v38;
  WTF *v39;
  uint64_t v40;
  WTF *v41;
  const WebCore::RenderStyle *v42;
  WTF *v43;
  float v44;
  WTF *v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  __int128 v49;
  int v50;
  uint64_t v51;

  if (!*((_BYTE *)this + 392))
  {
    *a3 = 0;
    return this;
  }
  v4 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v4 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196516068);
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::linearGradientTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196516088);
  }
  v5 = a2;
  v6 = (int64x2_t *)(this + 89);
  *(_DWORD *)(v4 + 24) += 2;
  v7 = *((_BYTE *)this + 352);
  v9 = *(_QWORD *)(this + 89);
  v8 = *(_QWORD *)(this + 91);
  *(_QWORD *)&v49 = v9;
  v51 = v8;
  if ((v7 & 0xC) == 4)
  {
    v27 = this;
    v42 = a2;
    WebCore::SVGLengthContext::SVGLengthContext((uint64_t)&v45, (const WebCore::SVGElement *)v4);
    v44 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)&v49, (const WebCore::SVGLengthContext *)&v45);
    v11 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)&v51, (const WebCore::SVGLengthContext *)&v45);
    v29 = (unsigned int *)v45;
    v45 = 0;
    v43 = (WTF *)v29;
    if (v29)
    {
      do
      {
        v30 = __ldaxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
        goto LABEL_52;
    }
    goto LABEL_45;
  }
  LODWORD(v10) = v9;
  if ((v9 & 0xFF00000000) == 0x200000000)
    v10 = *(float *)&v9 / 100.0;
  if ((v8 & 0xFF00000000) == 0x200000000)
    v11 = *(float *)&v8 / 100.0;
  else
    v11 = *(float *)&v8;
  while (1)
  {
    v12 = *((_BYTE *)this + 352);
    v13 = v6[1];
    *(_QWORD *)&v49 = v6[1].i64[0];
    v51 = v13.i64[1];
    if ((v12 & 0xC) != 4)
      break;
    *(float *)&v42 = v11;
    v44 = v10;
    v27 = this;
    v6 = (int64x2_t *)v5;
    WebCore::SVGLengthContext::SVGLengthContext((uint64_t)&v45, (const WebCore::SVGElement *)v4);
    v11 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)&v49, (const WebCore::SVGLengthContext *)&v45);
    v32 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)&v51, (const WebCore::SVGLengthContext *)&v45);
    v33 = (unsigned int *)v45;
    v45 = 0;
    v43 = (WTF *)v33;
    if (v33)
    {
      do
      {
        v34 = __ldaxr(v33);
        v35 = v34 - 1;
      }
      while (__stlxr(v35, v33));
      if (!v35)
      {
        atomic_store(1u, v33);
        v40 = v33[7];
        if ((_DWORD)v40)
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v43 + 2), (WTF::StringImpl *)(*((_QWORD *)v43 + 2) + 32 * v40));
        v41 = (WTF *)*((_QWORD *)v43 + 2);
        if (v41)
        {
          *((_QWORD *)v43 + 2) = 0;
          *((_DWORD *)v43 + 6) = 0;
          WTF::fastFree(v41, v28);
        }
        WTF::fastFree(v43, v28);
      }
    }
    this = v27;
    v36 = *((unsigned __int8 *)v27 + 392);
    *(_QWORD *)&v49 = __PAIR64__(v42, LODWORD(v44));
    *((_QWORD *)&v49 + 1) = __PAIR64__(LODWORD(v32), LODWORD(v11));
    v50 = 0;
    v5 = (const WebCore::RenderStyle *)v6;
    if (v36)
      goto LABEL_12;
    do
    {
      __break(1u);
LABEL_52:
      v37 = v43;
      atomic_store(1u, (unsigned int *)v43);
      v38 = *((unsigned int *)v37 + 7);
      if ((_DWORD)v38)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v43 + 2), (WTF::StringImpl *)(*((_QWORD *)v43 + 2) + 32 * v38));
      v39 = (WTF *)*((_QWORD *)v43 + 2);
      if (v39)
      {
        *((_QWORD *)v43 + 2) = 0;
        *((_DWORD *)v43 + 6) = 0;
        WTF::fastFree(v39, v28);
      }
      WTF::fastFree(v43, v28);
LABEL_45:
      ;
    }
    while (!*((_BYTE *)v27 + 392));
    v5 = v42;
    this = v27;
    v10 = v44;
  }
  v14 = (int8x8_t)vmovn_s64(v13);
  v15.i64[0] = 0xFF00000000;
  v15.i64[1] = 0xFF00000000;
  *(_QWORD *)&v49 = __PAIR64__(LODWORD(v11), LODWORD(v10));
  *((int8x8_t *)&v49 + 1) = vbsl_s8((int8x8_t)vmovn_s64(vceqq_s64((int64x2_t)vandq_s8((int8x16_t)v13, v15), vdupq_n_s64(0x200000000uLL))), (int8x8_t)vdiv_f32((float32x2_t)v14, (float32x2_t)vdup_n_s32(0x42C80000u)), v14);
  v50 = 0;
LABEL_12:
  v16 = *((_BYTE *)this + 352);
  WebCore::RenderSVGResourceGradient::stopsByApplyingColorFilter((const WebCore::GradientColorStops *)(this + 74), v5, (uint64_t)&v45);
  if (WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
  {
    __break(0xC471u);
    JUMPOUT(0x1965160A8);
  }
  if ((v16 & 3) == 3)
    v17 = 2;
  else
    v17 = (v16 & 3) == 2;
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  v19 = WTF::fastMalloc((WTF *)0xC8);
  this = (unsigned int *)WebCore::Gradient::Gradient(v19, &v49, 0x600000000, 1, v17, (uint64_t *)&v45, IdentifierInternal, 1);
  *a3 = this;
  v21 = v45;
  if (v47)
  {
    v22 = (WTF *)((char *)v45 + 16 * v47);
    do
    {
      v23 = *((_QWORD *)v21 + 1);
      if ((v23 & 0x8000000000000) != 0)
      {
        this = (unsigned int *)(v23 & 0xFFFFFFFFFFFFLL);
        do
        {
          v24 = __ldaxr(this);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, this));
        if (!v25)
        {
          atomic_store(1u, this);
          this = (unsigned int *)WTF::fastFree((WTF *)this, v20);
        }
      }
      v21 = (WTF *)((char *)v21 + 16);
    }
    while (v21 != v22);
    v21 = v45;
  }
  if (&v48 == (uint64_t *)v21 || v21 == 0)
  {
    if (!v4)
      return this;
    goto LABEL_32;
  }
  v45 = 0;
  v46 = 0;
  this = (unsigned int *)WTF::fastFree(v21, v20);
  if (v4)
  {
LABEL_32:
    if (*(_DWORD *)(v4 + 24) == 2)
    {
      if ((*(_WORD *)(v4 + 30) & 0x400) == 0)
        return WebCore::Node::removedLastRef((WebCore::Node *)v4, v20);
    }
    else
    {
      *(_DWORD *)(v4 + 24) -= 2;
    }
  }
  return this;
}

double WebCore::RenderSVGResourceMarker::RenderSVGResourceMarker(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD **v6;
  _DWORD *v7;
  double result;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = WebCore::RenderLayerModelObject::RenderLayerModelObject(a1, 79, a2, a3, 0, 3588);
  *(_OWORD *)(v4 + 188) = 0u;
  *(_OWORD *)(v4 + 172) = 0u;
  *(_QWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 160) = 0;
  *(_DWORD *)(v4 + 167) = 0;
  *(int32x4_t *)(v4 + 204) = vdupq_n_s32(0x7FC00000u);
  v5 = *(_QWORD *)(a2 + 104);
  if (v5 && *(_QWORD *)(v5 + 24))
  {
    v9 = *(_DWORD *)(v5 + 4);
    if ((v9 & 1) != 0)
    {
      v10 = *(_QWORD **)(v5 + 40);
      LODWORD(v11) = *(_DWORD *)(v5 + 52);
    }
    else
    {
      v10 = (_QWORD *)(v5 + 32);
      LODWORD(v11) = v9 >> 5;
    }
    if ((_DWORD)v11)
    {
      v11 = v11;
      while (1)
      {
        v12 = *v10;
        if (*v10 == WebCore::HTMLNames::idAttr
          || *(_QWORD *)(v12 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
          && *(_QWORD *)(v12 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
        {
          break;
        }
        v10 += 2;
        if (!--v11)
          goto LABEL_18;
      }
    }
    else
    {
LABEL_18:
      v10 = 0;
    }
    v6 = (_DWORD **)(v10 + 1);
  }
  else
  {
    v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
  }
  v7 = *v6;
  if (v7)
    *v7 += 2;
  *(_QWORD *)(v4 + 224) = v7;
  *(_BYTE *)(v4 + 232) = 0;
  *(_QWORD *)v4 = off_1E3446E30;
  *(_OWORD *)(v4 + 240) = constinit_9;
  *(_OWORD *)(v4 + 256) = xmmword_1969FDFE0;
  result = 0.0;
  *(_OWORD *)(v4 + 272) = xmmword_1969FDFF0;
  *(_QWORD *)(v4 + 288) = 0;
  *(_QWORD *)(v4 + 296) = 0;
  return result;
}

void WebCore::RenderSVGResourceMarker::~RenderSVGResourceMarker(WebCore::RenderSVGResourceMarker *this, WTF::StringImpl *a2)
{
  WTF::StringImpl *v3;

  *(_QWORD *)this = off_1E3445A38;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  WTF::StringImpl *v3;
  void *v4;

  *(_QWORD *)this = off_1E3445A38;
  v3 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, a2);
    else
      *(_DWORD *)v3 -= 2;
  }
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 17) = 0u;
    *((_OWORD *)this + 18) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v4);
  }
}

uint64_t WebCore::RenderSVGResourceMarker::updateLayoutSizeIfNeeded(WebCore::RenderSVGResourceMarker *this)
{
  uint64_t v1;
  float v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  float v13;
  WTF *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  WTF *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  WTF *v31;
  WTF *v32;
  WTF *v33[5];

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19651662CLL);
  }
  if (*(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::markerTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19651664CLL);
  }
  v3 = *((float *)this + 74);
  v4 = *((float *)this + 75);
  *(_DWORD *)(v1 + 24) += 2;
  WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v33, (const WebCore::SVGElement *)v1);
  v5 = *(_QWORD *)(v1 + 216);
  v6 = *(_QWORD *)(v5 + 24);
  if (!v6 || !*(_DWORD *)(v6 - 12))
    goto LABEL_4;
  v19 = *(unsigned int *)(v6 - 4);
  if ((_DWORD)v19)
  {
    v20 = 8 * v19;
    v21 = *(uint64_t **)(v5 + 24);
    while ((unint64_t)(*v21 + 1) <= 1)
    {
      ++v21;
      v20 -= 8;
      if (!v20)
        goto LABEL_4;
    }
  }
  else
  {
    v21 = *(uint64_t **)(v5 + 24);
  }
  v27 = (uint64_t *)(v6 + 8 * v19);
  if (v21 == v27)
    goto LABEL_4;
  v28 = *v21;
LABEL_43:
  if (!*(_QWORD *)(v28 + 8))
  {
    while (++v21 != v27)
    {
      v28 = *v21;
      if ((unint64_t)(*v21 + 1) > 1)
      {
        if (v21 != v27)
          goto LABEL_43;
        break;
      }
    }
LABEL_4:
    v7 = v5 + 40;
    goto LABEL_5;
  }
  v7 = v5 + 48;
LABEL_5:
  v8 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v7 + 28), (const WebCore::SVGLengthContext *)v33);
  v9 = *(_QWORD *)(v1 + 224);
  v10 = *(_QWORD *)(v9 + 24);
  if (v10 && *(_DWORD *)(v10 - 12))
  {
    v22 = *(unsigned int *)(v10 - 4);
    if ((_DWORD)v22)
    {
      v23 = 8 * v22;
      v24 = *(uint64_t **)(v9 + 24);
      while ((unint64_t)(*v24 + 1) <= 1)
      {
        ++v24;
        v23 -= 8;
        if (!v23)
          goto LABEL_6;
      }
    }
    else
    {
      v24 = *(uint64_t **)(v9 + 24);
    }
    v29 = (uint64_t *)(v10 + 8 * v22);
    if (v24 != v29)
    {
      v30 = *v24;
LABEL_52:
      if (*(_QWORD *)(v30 + 8))
      {
        v11 = v9 + 48;
        goto LABEL_7;
      }
      while (++v24 != v29)
      {
        v30 = *v24;
        if ((unint64_t)(*v24 + 1) > 1)
        {
          if (v24 != v29)
            goto LABEL_52;
          break;
        }
      }
    }
  }
LABEL_6:
  v11 = v9 + 40;
LABEL_7:
  v13 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v11 + 28), (const WebCore::SVGLengthContext *)v33);
  v14 = v33[0];
  v33[0] = 0;
  if (!v14)
    goto LABEL_10;
  do
  {
    v15 = __ldaxr((unsigned int *)v14);
    v16 = v15 - 1;
  }
  while (__stlxr(v16, (unsigned int *)v14));
  if (v16)
  {
LABEL_10:
    if (!v1)
      goto LABEL_13;
    goto LABEL_11;
  }
  atomic_store(1u, (unsigned int *)v14);
  v25 = *((unsigned int *)v14 + 7);
  if ((_DWORD)v25)
  {
    v32 = v14;
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v14 + 2), (WTF::StringImpl *)(*((_QWORD *)v14 + 2) + 32 * v25));
    v14 = v32;
  }
  v26 = (WTF *)*((_QWORD *)v14 + 2);
  if (v26)
  {
    *((_QWORD *)v14 + 2) = 0;
    *((_DWORD *)v14 + 6) = 0;
    v31 = v14;
    WTF::fastFree(v26, v12);
    v14 = v31;
  }
  WTF::fastFree(v14, v12);
  if (v1)
  {
LABEL_11:
    if (*(_DWORD *)(v1 + 24) == 2)
    {
      if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v1, v12);
    }
    else
    {
      *(_DWORD *)(v1 + 24) -= 2;
    }
  }
LABEL_13:
  *((_QWORD *)this + 36) = 0;
  *((float *)this + 74) = v8;
  *((float *)this + 75) = v13;
  v17 = (*((unsigned __int8 *)this + 20) >> 3) & 1;
  if (v3 != v8)
    v17 = 1;
  if (v4 == v13)
    return v17;
  else
    return 1;
}

uint64_t WebCore::RenderSVGResourceMarker::updateFromStyle(WebCore::RenderSVGResourceMarker *this)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  float v9;

  result = (*(uint64_t (**)(WebCore::RenderSVGResourceMarker *))(*(_QWORD *)this + 832))(this);
  if ((result & 1) != 0
    || (v3 = *((_QWORD *)this + 11), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v3 + 32) + 40) + 20))
    || (v8 = *(_QWORD *)(v3 + 40), *(_QWORD *)(v8 + 328))
    || *(_QWORD *)(v8 + 320)
    || *(_QWORD *)(v8 + 312)
    || *(_QWORD *)(v8 + 304)
    || (*(_DWORD *)(v8 + 636) & 0x180) == 0x80)
  {
    v4 = *((_DWORD *)this + 5);
LABEL_4:
    v5 = 0x20000;
    goto LABEL_5;
  }
  v9 = *(float *)(v8 + 260);
  v4 = *((_DWORD *)this + 5);
  if (v9 != -1.0)
    goto LABEL_4;
  v5 = 0;
LABEL_5:
  v6 = v4 & 0xFFEDFFFF;
  if ((_DWORD)result)
    v7 = 0x100000;
  else
    v7 = 0;
  *((_DWORD *)this + 5) = v6 | v5 | v7;
  if (((*((_DWORD *)this + 24) >> 10) & 7u) - 1 <= 2)
    *((_DWORD *)this + 5) |= 0x10000u;
  return result;
}

unsigned int *WebCore::RenderSVGResourceMarker::updateLayerTransform(WebCore::RenderSVGResourceMarker *this, __n128 a2, uint64_t a3, uint64_t a4, WTF::String *a5)
{
  uint64_t v5;
  float64x2_t *v7;
  int v8;
  float v9;
  void *v10;
  double v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  float64x2_t v16;
  unsigned int *result;
  void *v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;

  v5 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v5 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196516A1CLL);
  }
  if (*(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::markerTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196516A3CLL);
  }
  *(_DWORD *)(v5 + 24) += 2;
  *((_QWORD *)this + 30) = 0x3FF0000000000000;
  v7 = (float64x2_t *)((char *)this + 240);
  v8 = *((_DWORD *)this + 74);
  v9 = *((float *)this + 75);
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 32) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 33) = 0x3FF0000000000000;
  if (WebCore::Element::hasAttribute((WebCore::Element *)v5, (const WebCore::QualifiedName *)&WebCore::SVGNames::viewBoxAttr, a4, a5, a2))
  {
    if (!*(_BYTE *)(v5 + 192))
      goto LABEL_9;
    v12 = *(_QWORD **)(v5 + 176);
    v13 = v12[3];
    if (v13 && *(_DWORD *)(v13 - 12))
    {
      v22 = *(unsigned int *)(v13 - 4);
      if ((_DWORD)v22)
      {
        v23 = 8 * v22;
        v24 = (uint64_t *)v12[3];
        while ((unint64_t)(*v24 + 1) <= 1)
        {
          ++v24;
          v23 -= 8;
          if (!v23)
            goto LABEL_6;
        }
      }
      else
      {
        v24 = (uint64_t *)v12[3];
      }
      v25 = (uint64_t *)(v13 + 8 * v22);
      if (v24 != v25)
      {
        v26 = *v24;
LABEL_36:
        if (*(_QWORD *)(v26 + 8))
        {
          v14 = v12 + 6;
          goto LABEL_7;
        }
        while (++v24 != v25)
        {
          v26 = *v24;
          if ((unint64_t)(*v24 + 1) > 1)
          {
            if (v24 != v25)
              goto LABEL_36;
            break;
          }
        }
      }
    }
LABEL_6:
    v14 = v12 + 5;
LABEL_7:
    v15 = *v14;
    if (*(float *)(v15 + 36) <= 0.0 || *(float *)(v15 + 40) <= 0.0)
    {
      v19 = *((_QWORD *)this + 18);
      for (i = *(_QWORD *)(v19 + 24) | 0x40000; ; i = v21 | 0x100000)
      {
        *(_QWORD *)(v19 + 24) = i;
        v19 = *(_QWORD *)(v19 + 40);
        if (!v19)
          break;
        v21 = *(_QWORD *)(v19 + 24);
        if ((v21 & 0x100000) != 0)
          break;
      }
LABEL_13:
      result = (unsigned int *)WebCore::RenderLayerModelObject::updateLayerTransform(this, v10);
      if (!v5)
        return result;
      goto LABEL_16;
    }
LABEL_9:
    LODWORD(v11) = v8;
    WebCore::SVGMarkerElement::viewBoxToViewTransform((WebCore::SVGMarkerElement *)v5, v11, v9, &v27);
    if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v27, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64(v28, (float64x2_t)xmmword_1968A14C0))))) & 1) != 0|| v29.f64[0] != 0.0|| v29.f64[1] != 0.0)
    {
      v16 = v28;
      *v7 = v27;
      v7[1] = v16;
      v7[2] = v29;
    }
    goto LABEL_13;
  }
  result = (unsigned int *)WebCore::RenderLayerModelObject::updateLayerTransform(this, v10);
LABEL_16:
  if (*(_DWORD *)(v5 + 24) == 2)
  {
    if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
      return WebCore::Node::removedLastRef((WebCore::Node *)v5, v18);
  }
  else
  {
    *(_DWORD *)(v5 + 24) -= 2;
  }
  return result;
}

float64_t WebCore::RenderSVGResourceMarker::applyTransform(double *a1, float64x2_t *this, WebCore::RenderStyle *a3, WebCore::FloatRect *a4, char a5)
{
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float64x2_t v12;
  double v13;
  double v14;
  double v15;
  float64x2_t v16;
  float64x2_t v17;
  float64x2_t v18;
  float64x2_t v19;

  v7 = 0.0;
  if ((a5 & 1) != 0)
  {
    if (a1[30] != 1.0 || a1[31] != 0.0 || a1[32] != 0.0 || (v8 = 0.0, v9 = 0.0, a1[33] != 1.0))
    {
      v9 = WebCore::RenderStyle::computeTransformOrigin(a3, a4);
      v8 = v10;
      v7 = v11;
    }
  }
  else
  {
    v8 = 0.0;
    v9 = 0.0;
  }
  if (v9 == 0.0 && v8 == 0.0 && v7 == 0.0)
  {
    *(_QWORD *)&v18.f64[0] = *(_OWORD *)&WebCore::TransformationMatrix::multiplyAffineTransform(this, (const WebCore::AffineTransform *)(a1 + 30));
  }
  else
  {
    v12 = vaddq_f64(this[7], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(this[3], v8), this[1], v9), this[5], v7));
    this[6] = vaddq_f64(this[6], vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(this[2], v8), *this, v9), this[4], v7));
    this[7] = v12;
    WebCore::TransformationMatrix::multiplyAffineTransform(this, (const WebCore::AffineTransform *)(a1 + 30));
    v13 = (float)-v9;
    v14 = (float)-v8;
    v15 = (float)-v7;
    v16 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(this[2], v14), *this, v13), this[4], v15);
    v17 = vmlaq_n_f64(vmulq_n_f64(this[3], v14), this[1], v13);
    v18 = vaddq_f64(this[6], v16);
    v19 = vaddq_f64(this[7], vmlaq_n_f64(v17, this[5], v15));
    this[6] = v18;
    this[7] = v19;
  }
  return v18.f64[0];
}

uint64_t WebCore::RenderSVGResourceMarker::overflowClipRect(uint64_t a1, _DWORD *a2, uint64_t a3, WTF::String *a4, __n128 a5)
{
  uint64_t v5;
  float v8;
  float v9;
  unsigned int v10;
  float v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  double v20;
  double v21;
  _BOOL4 v22;
  float64x2_t v23;
  float64x2_t v24;
  double v25;
  double v26;
  double v28;
  double v30;
  float64x2_t v31;
  double v32;
  __int128 *v33;
  __int128 v34;
  float v35;
  float v36;
  unsigned int v37;
  float v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  BOOL v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  __int128 v53;
  double v54;
  double v55;
  double v56;
  double v57;
  float64x2_t v58;
  _OWORD v59[3];

  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  if ((*(_WORD *)(v5 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196517068);
  }
  if (*(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::markerTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196517088);
  }
  *(_DWORD *)(v5 + 24) += 2;
  v8 = *(float *)(a1 + 292);
  v9 = floorf(*(float *)(a1 + 288) * 64.0);
  if (v9 >= 2147500000.0)
  {
    v10 = 0x7FFFFFFF;
  }
  else if (v9 <= -2147500000.0)
  {
    v10 = 0x80000000;
  }
  else
  {
    v10 = (int)v9;
  }
  v11 = floorf(v8 * 64.0);
  if (v11 > -2147500000.0)
    v12 = (int)v11;
  else
    v12 = 0x80000000;
  if (v11 < 2147500000.0)
    v13 = v12;
  else
    v13 = 0x7FFFFFFFLL;
  a5.n128_f32[0] = ceilf((float)(v8 + *(float *)(a1 + 300)) * 64.0);
  v14 = v10 | (unint64_t)(v13 << 32);
  if (WebCore::Element::hasAttribute((WebCore::Element *)v5, (const WebCore::QualifiedName *)&WebCore::SVGNames::viewBoxAttr, a3, a4, a5))
  {
    if (!*(_BYTE *)(v5 + 192))
    {
LABEL_18:
      v20 = *(double *)(a1 + 240);
      v21 = *(double *)(a1 + 248);
      v22 = v20 == 1.0;
      if (v21 != 0.0)
        v22 = 0;
      if (!v22
        || *(double *)(a1 + 256) != 0.0
        || *(double *)(a1 + 264) != 1.0
        || *(double *)(a1 + 272) != 0.0
        || *(double *)(a1 + 280) != 0.0)
      {
        v23.f64[0] = *(float64_t *)(a1 + 256);
        v24.f64[0] = *(float64_t *)(a1 + 264);
        v25 = v20 * v24.f64[0] - v21 * v23.f64[0];
        v26 = fabs(v25);
        if ((unint64_t)(*(_QWORD *)&v26 - 0x10000000000000) >> 53 > 0x3FE
          && (unint64_t)(*(_QWORD *)&v26 - 1) > 0xFFFFFFFFFFFFELL)
        {
          LOBYTE(v54) = 0;
          v33 = &constinit_9;
        }
        else
        {
          if (v23.f64[0] != 0.0)
            v22 = 0;
          v28 = 1.0;
          if (v22 && v24.f64[0] == 1.0)
          {
            v31 = vnegq_f64(*(float64x2_t *)(a1 + 272));
            v55 = 0.0;
            v56 = 0.0;
            v32 = 1.0;
          }
          else
          {
            v28 = v24.f64[0] / v25;
            v30 = -v21 / v25;
            v24.f64[1] = *(float64_t *)(a1 + 240);
            v23.f64[1] = *(float64_t *)(a1 + 248);
            v31 = vdivq_f64(vmlaq_f64(vmulq_f64(*(float64x2_t *)(a1 + 272), vnegq_f64(v24)), (float64x2_t)vextq_s8(*(int8x16_t *)(a1 + 272), *(int8x16_t *)(a1 + 272), 8uLL), v23), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v25, 0));
            v55 = v30;
            v56 = -v23.f64[0] / v25;
            v32 = v20 / v25;
          }
          v54 = v28;
          v57 = v32;
          v33 = (__int128 *)&v54;
          v58 = v31;
        }
        v34 = v33[1];
        v59[0] = *v33;
        v59[1] = v34;
        v59[2] = v33[2];
        v53 = *(_OWORD *)(a1 + 288);
        v36 = floorf(WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)v59, (const WebCore::FloatRect *)&v53)* 64.0);
        if (v36 >= 2147500000.0)
        {
          v37 = 0x7FFFFFFF;
        }
        else if (v36 <= -2147500000.0)
        {
          v37 = 0x80000000;
        }
        else
        {
          v37 = (int)v36;
        }
        v38 = floorf(v35 * 64.0);
        if (v38 > -2147500000.0)
          v39 = (int)v38;
        else
          v39 = 0x80000000;
        if (v38 < 2147500000.0)
          v40 = v39;
        else
          v40 = 0x7FFFFFFFLL;
        v14 = v37 | (unint64_t)(v40 << 32);
      }
      goto LABEL_43;
    }
    v16 = *(_QWORD **)(v5 + 176);
    v17 = v16[3];
    if (v17 && *(_DWORD *)(v17 - 12))
    {
      v48 = *(unsigned int *)(v17 - 4);
      if ((_DWORD)v48)
      {
        v49 = 8 * v48;
        v50 = (uint64_t *)v16[3];
        while ((unint64_t)(*v50 + 1) <= 1)
        {
          ++v50;
          v49 -= 8;
          if (!v49)
            goto LABEL_15;
        }
      }
      else
      {
        v50 = (uint64_t *)v16[3];
      }
      v51 = (uint64_t *)(v17 + 8 * v48);
      if (v50 != v51)
      {
        v52 = *v50;
LABEL_79:
        if (*(_QWORD *)(v52 + 8))
        {
          v18 = v16 + 6;
          goto LABEL_16;
        }
        while (++v50 != v51)
        {
          v52 = *v50;
          if ((unint64_t)(*v50 + 1) > 1)
          {
            if (v50 != v51)
              goto LABEL_79;
            break;
          }
        }
      }
    }
LABEL_15:
    v18 = v16 + 5;
LABEL_16:
    v19 = *v18;
    if (*(float *)(v19 + 36) <= 0.0 || *(float *)(v19 + 40) <= 0.0)
    {
      v46 = 0;
      if (!v5)
        return v46;
      goto LABEL_50;
    }
    goto LABEL_18;
  }
LABEL_43:
  v41 = a2[1];
  LODWORD(v42) = v14 + *a2;
  if (__OFADD__((_DWORD)v14, *a2))
    v42 = (v14 >> 31) + 0x7FFFFFFF;
  else
    v42 = v42;
  v43 = __OFADD__(HIDWORD(v14), v41);
  v44 = HIDWORD(v14) + v41;
  LODWORD(v45) = (HIDWORD(v14) >> 31) + 0x7FFFFFFF;
  if (v43)
    v45 = v45;
  else
    v45 = v44;
  v46 = v42 | (v45 << 32);
  if (v5)
  {
LABEL_50:
    if (*(_DWORD *)(v5 + 24) == 2)
    {
      if ((*(_WORD *)(v5 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v5, v15);
    }
    else
    {
      *(_DWORD *)(v5 + 24) -= 2;
    }
  }
  return v46;
}

double WebCore::RenderSVGResourceMarker::markerTransformation@<D0>(WebCore::RenderSVGResourceMarker *this@<X0>, const WebCore::FloatPoint *a2@<X1>, float a3@<S0>, float a4@<S1>, uint64_t a5@<X8>)
{
  unint64_t v8;
  float v9;
  __double2 v10;
  double v11;
  double v12;
  double v13;
  double v14;
  float v15;
  float v16;
  double v17;
  double v18;
  double v19;
  float v20;
  float v21;
  double v22;
  double v23;
  double v24;
  BOOL v25;
  double v26;
  double result;
  float v29;
  float v30;
  double v31;
  double v32;
  double v33;
  float v34;
  double v35;

  v34 = *((float *)a2 + 1);
  *(_OWORD *)(a5 + 16) = xmmword_1969FDFE0;
  *(_OWORD *)(a5 + 32) = xmmword_1969FDFF0;
  *(_OWORD *)a5 = constinit_9;
  v35 = *(float *)a2 + 0.0;
  *(double *)(a5 + 32) = v35;
  v8 = WebCore::RenderSVGResourceMarker::angle(this);
  v9 = *(float *)&v8;
  if ((v8 & 0xFF00000000) == 0)
    v9 = a3;
  v10 = __sincos_stret(v9 * 0.0174532925);
  v11 = v10.__cosval + v10.__sinval * 0.0;
  v12 = v10.__sinval + v10.__cosval * 0.0;
  v13 = v10.__cosval * 0.0 - v10.__sinval;
  *(double *)a5 = v11;
  *(double *)(a5 + 8) = v12;
  v14 = v10.__cosval - v10.__sinval * 0.0;
  *(double *)(a5 + 16) = v13;
  *(double *)(a5 + 24) = v14;
  v15 = WebCore::RenderSVGResourceMarker::referencePoint(this);
  v29 = v16;
  v30 = v15;
  v17 = *((double *)this + 31);
  v18 = *((double *)this + 33);
  v31 = *((double *)this + 32);
  v19 = *((double *)this + 35);
  v32 = *((double *)this + 34);
  v33 = *((double *)this + 30);
  if (WebCore::RenderSVGResourceMarker::markerUnits(this) == 2)
  {
    v11 = v11 * a4;
    v12 = v12 * a4;
    *(double *)a5 = v11;
    *(double *)(a5 + 8) = v12;
    v13 = v13 * a4;
    v14 = v14 * a4;
    *(double *)(a5 + 16) = v13;
    *(double *)(a5 + 24) = v14;
  }
  v20 = v19 + v18 * v29 + v17 * v30;
  v21 = v32 + v31 * v29 + v33 * v30;
  v22 = v34 + 0.0;
  v23 = (float)-v21;
  v24 = (float)-v20;
  v25 = v11 == 1.0;
  if (v12 != 0.0)
    v25 = 0;
  if (v13 != 0.0)
    v25 = 0;
  v26 = v14 * v24 + v23 * v12;
  if (!v25 || v14 != 1.0)
  {
    v23 = v13 * v24 + v23 * v11;
    v24 = v26;
  }
  *(double *)(a5 + 32) = v35 + v23;
  result = v22 + v24;
  *(double *)(a5 + 40) = v22 + v24;
  return result;
}

unint64_t WebCore::RenderSVGResourceMarker::angle(WebCore::RenderSVGResourceMarker *this)
{
  float v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  float v18;
  float v19;
  uint64_t v20;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v2 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196517504);
  }
  if (*(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::markerTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196517524);
  }
  *(_DWORD *)(v2 + 24) += 2;
  v3 = *(_QWORD **)(v2 + 248);
  v4 = v3[3];
  if (!v4 || !*(_DWORD *)(v4 - 12))
    goto LABEL_4;
  v12 = *(unsigned int *)(v4 - 4);
  if ((_DWORD)v12)
  {
    v13 = 8 * v12;
    v14 = (uint64_t *)v3[3];
    while ((unint64_t)(*v14 + 1) <= 1)
    {
      ++v14;
      v13 -= 8;
      if (!v13)
        goto LABEL_4;
    }
  }
  else
  {
    v14 = (uint64_t *)v3[3];
  }
  v22 = (uint64_t *)(v4 + 8 * v12);
  if (v14 == v22)
    goto LABEL_4;
  v23 = *v14;
LABEL_42:
  if (!*(_QWORD *)(v23 + 8))
  {
    while (++v14 != v22)
    {
      v23 = *v14;
      if ((unint64_t)(*v14 + 1) > 1)
      {
        if (v14 != v22)
          goto LABEL_42;
        break;
      }
    }
LABEL_4:
    v5 = v3 + 5;
    goto LABEL_5;
  }
  v5 = v3 + 6;
LABEL_5:
  v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v5 + 32))(*v5);
  if (v6 != 2)
    goto LABEL_28;
  v7 = *(_QWORD **)(v2 + 240);
  v8 = v7[3];
  if (v8 && *(_DWORD *)(v8 - 12))
  {
    v15 = *(unsigned int *)(v8 - 4);
    if ((_DWORD)v15)
    {
      v16 = 8 * v15;
      v17 = (uint64_t *)v7[3];
      while ((unint64_t)(*v17 + 1) <= 1)
      {
        ++v17;
        v16 -= 8;
        if (!v16)
          goto LABEL_7;
      }
    }
    else
    {
      v17 = (uint64_t *)v7[3];
    }
    v24 = (uint64_t *)(v8 + 8 * v15);
    if (v17 != v24)
    {
      v25 = *v17;
LABEL_51:
      if (*(_QWORD *)(v25 + 8))
      {
        v9 = v7 + 6;
        goto LABEL_8;
      }
      while (++v17 != v24)
      {
        v25 = *v17;
        if ((unint64_t)(*v17 + 1) > 1)
        {
          if (v17 != v24)
            goto LABEL_51;
          break;
        }
      }
    }
  }
LABEL_7:
  v9 = v7 + 5;
LABEL_8:
  v10 = *v9;
  switch(*(_DWORD *)(v10 + 28))
  {
    case 0:
    case 1:
    case 2:
      v11 = *(float *)(v10 + 32);
      break;
    case 3:
      v18 = *(float *)(v10 + 32);
      v19 = 57.296;
      goto LABEL_26;
    case 4:
      v18 = *(float *)(v10 + 32);
      v19 = 0.9;
      goto LABEL_26;
    case 5:
      v18 = *(float *)(v10 + 32);
      v19 = 360.0;
LABEL_26:
      v11 = v18 * v19;
      break;
    default:
      v11 = 0.0;
      break;
  }
  v1 = v11;
LABEL_28:
  if (v2)
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if ((*(_WORD *)(v2 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v2);
    }
    else
    {
      *(_DWORD *)(v2 + 24) -= 2;
    }
  }
  LODWORD(v20) = LODWORD(v1) & 0xFFFFFF00;
  if (v6 == 2)
    v20 = LODWORD(v1);
  else
    v20 = v20;
  return v20 | ((unint64_t)(v6 == 2) << 32);
}

float WebCore::RenderSVGResourceMarker::referencePoint(WebCore::RenderSVGResourceMarker *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  WTF *v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  WTF *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  WTF *v26;
  WTF *v27;
  WTF *v28[5];

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19651776CLL);
  }
  if (*(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::markerTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19651778CLL);
  }
  *(_DWORD *)(v1 + 24) += 2;
  WebCore::SVGLengthContext::SVGLengthContext((uint64_t)v28, (const WebCore::SVGElement *)v1);
  v2 = *(_QWORD *)(v1 + 200);
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3 || !*(_DWORD *)(v3 - 12))
    goto LABEL_4;
  v14 = *(unsigned int *)(v3 - 4);
  if ((_DWORD)v14)
  {
    v15 = 8 * v14;
    v16 = *(uint64_t **)(v2 + 24);
    while ((unint64_t)(*v16 + 1) <= 1)
    {
      ++v16;
      v15 -= 8;
      if (!v15)
        goto LABEL_4;
    }
  }
  else
  {
    v16 = *(uint64_t **)(v2 + 24);
  }
  v22 = (uint64_t *)(v3 + 8 * v14);
  if (v16 == v22)
    goto LABEL_4;
  v23 = *v16;
LABEL_39:
  if (!*(_QWORD *)(v23 + 8))
  {
    while (++v16 != v22)
    {
      v23 = *v16;
      if ((unint64_t)(*v16 + 1) > 1)
      {
        if (v16 != v22)
          goto LABEL_39;
        break;
      }
    }
LABEL_4:
    v4 = v2 + 40;
    goto LABEL_5;
  }
  v4 = v2 + 48;
LABEL_5:
  v5 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v4 + 28), (const WebCore::SVGLengthContext *)v28);
  v6 = *(_QWORD *)(v1 + 208);
  v7 = *(_QWORD *)(v6 + 24);
  if (v7 && *(_DWORD *)(v7 - 12))
  {
    v17 = *(unsigned int *)(v7 - 4);
    if ((_DWORD)v17)
    {
      v18 = 8 * v17;
      v19 = *(uint64_t **)(v6 + 24);
      while ((unint64_t)(*v19 + 1) <= 1)
      {
        ++v19;
        v18 -= 8;
        if (!v18)
          goto LABEL_6;
      }
    }
    else
    {
      v19 = *(uint64_t **)(v6 + 24);
    }
    v24 = (uint64_t *)(v7 + 8 * v17);
    if (v19 != v24)
    {
      v25 = *v19;
LABEL_48:
      if (*(_QWORD *)(v25 + 8))
      {
        v8 = v6 + 48;
        goto LABEL_7;
      }
      while (++v19 != v24)
      {
        v25 = *v19;
        if ((unint64_t)(*v19 + 1) > 1)
        {
          if (v19 != v24)
            goto LABEL_48;
          break;
        }
      }
    }
  }
LABEL_6:
  v8 = v6 + 40;
LABEL_7:
  WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)(*(_QWORD *)v8 + 28), (const WebCore::SVGLengthContext *)v28);
  v10 = v28[0];
  v28[0] = 0;
  if (!v10)
    goto LABEL_10;
  do
  {
    v11 = __ldaxr((unsigned int *)v10);
    v12 = v11 - 1;
  }
  while (__stlxr(v12, (unsigned int *)v10));
  if (v12)
  {
LABEL_10:
    if (!v1)
      return v5;
    goto LABEL_11;
  }
  atomic_store(1u, (unsigned int *)v10);
  v20 = *((unsigned int *)v10 + 7);
  if ((_DWORD)v20)
  {
    v27 = v10;
    WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v10 + 2), (WTF::StringImpl *)(*((_QWORD *)v10 + 2) + 32 * v20));
    v10 = v27;
  }
  v21 = (WTF *)*((_QWORD *)v10 + 2);
  if (v21)
  {
    *((_QWORD *)v10 + 2) = 0;
    *((_DWORD *)v10 + 6) = 0;
    v26 = v10;
    WTF::fastFree(v21, v9);
    v10 = v26;
  }
  WTF::fastFree(v10, v9);
  if (v1)
  {
LABEL_11:
    if (*(_DWORD *)(v1 + 24) == 2)
    {
      if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v1);
    }
    else
    {
      *(_DWORD *)(v1 + 24) -= 2;
    }
  }
  return v5;
}

uint64_t WebCore::RenderSVGResourceMarker::markerUnits(WebCore::RenderSVGResourceMarker *this)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;

  v1 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v1 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19651797CLL);
  }
  if (*(_QWORD *)(*(_QWORD *)(v1 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::markerTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19651799CLL);
  }
  *(_DWORD *)(v1 + 24) += 2;
  v2 = *(_QWORD **)(v1 + 232);
  v3 = v2[3];
  if (!v3 || !*(_DWORD *)(v3 - 12))
    goto LABEL_4;
  v7 = *(unsigned int *)(v3 - 4);
  if ((_DWORD)v7)
  {
    v8 = 8 * v7;
    v9 = (uint64_t *)v2[3];
    while ((unint64_t)(*v9 + 1) <= 1)
    {
      ++v9;
      v8 -= 8;
      if (!v8)
        goto LABEL_4;
    }
  }
  else
  {
    v9 = (uint64_t *)v2[3];
  }
  v10 = (uint64_t *)(v3 + 8 * v7);
  if (v9 == v10)
    goto LABEL_4;
  v11 = *v9;
LABEL_22:
  if (!*(_QWORD *)(v11 + 8))
  {
    while (++v9 != v10)
    {
      v11 = *v9;
      if ((unint64_t)(*v9 + 1) > 1)
      {
        if (v9 != v10)
          goto LABEL_22;
        break;
      }
    }
LABEL_4:
    v4 = v2 + 5;
    goto LABEL_5;
  }
  v4 = v2 + 6;
LABEL_5:
  v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 32))(*v4);
  if (v1)
  {
    if (*(_DWORD *)(v1 + 24) == 2)
    {
      if ((*(_WORD *)(v1 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v1);
    }
    else
    {
      *(_DWORD *)(v1 + 24) -= 2;
    }
  }
  return v5;
}

float WebCore::RenderSVGResourceMarker::computeMarkerBoundingBox(uint64_t a1, uint64_t a2, WebCore::AffineTransform *a3)
{
  WTF *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  void *v13;
  float v14;
  WTF *v15;
  void *v17;
  WTF *v18;
  _DWORD v19[4];
  _DWORD v20[4];
  WTF *v21;

  v6 = *(WTF **)(a1 + 8);
  if (!v6)
  {
    v6 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v6 = 1;
    *((_QWORD *)v6 + 1) = a1;
    v18 = *(WTF **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v6;
    if (v18)
    {
      if (*(_DWORD *)v18 == 1)
      {
        WTF::fastFree(v18, v17);
        v6 = *(WTF **)(a1 + 8);
      }
      else
      {
        --*(_DWORD *)v18;
      }
    }
  }
  ++*(_DWORD *)v6;
  v21 = v6;
  v20[0] = WebCore::SVGBoundingBoxComputation::computeDecoratedBoundingBox(&v21, a2, 0);
  v20[1] = v7;
  v20[2] = v8;
  v20[3] = v9;
  v19[0] = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)(a1 + 240), (const WebCore::FloatRect *)v20);
  v19[1] = v10;
  v19[2] = v11;
  v19[3] = v12;
  v14 = WebCore::AffineTransform::mapRect(a3, (const WebCore::FloatRect *)v19);
  v15 = v21;
  v21 = 0;
  if (v15)
  {
    if (*(_DWORD *)v15 == 1)
      WTF::fastFree(v15, v13);
    else
      --*(_DWORD *)v15;
  }
  return v14;
}

uint64_t WebCore::RenderSVGResourceMasker::operator new(uint64_t this)
{
  if (this == 248)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

uint64_t WebCore::RenderSVGResourceMasker::RenderSVGResourceMasker(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;
  _DWORD **v6;
  _DWORD *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  result = WebCore::RenderLayerModelObject::RenderLayerModelObject(a1, 80, a2, a3, 0, 3588);
  *(_OWORD *)(result + 188) = 0u;
  *(_OWORD *)(result + 172) = 0u;
  *(_QWORD *)(result + 152) = 0;
  *(_QWORD *)(result + 160) = 0;
  *(_DWORD *)(result + 167) = 0;
  *(int32x4_t *)(result + 204) = vdupq_n_s32(0x7FC00000u);
  v5 = *(_QWORD *)(a2 + 104);
  if (v5 && *(_QWORD *)(v5 + 24))
  {
    v8 = *(_DWORD *)(v5 + 4);
    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD **)(v5 + 40);
      LODWORD(v10) = *(_DWORD *)(v5 + 52);
    }
    else
    {
      v9 = (_QWORD *)(v5 + 32);
      LODWORD(v10) = v8 >> 5;
    }
    if ((_DWORD)v10)
    {
      v10 = v10;
      while (1)
      {
        v11 = *v9;
        if (*v9 == WebCore::HTMLNames::idAttr
          || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
          && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
        {
          break;
        }
        v9 += 2;
        if (!--v10)
          goto LABEL_18;
      }
    }
    else
    {
LABEL_18:
      v9 = 0;
    }
    v6 = (_DWORD **)(v9 + 1);
  }
  else
  {
    v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
  }
  v7 = *v6;
  if (v7)
    *v7 += 2;
  *(_QWORD *)(result + 224) = v7;
  *(_BYTE *)(result + 232) = 0;
  *(_QWORD *)result = off_1E34471F0;
  *(_QWORD *)(result + 240) = 0;
  return result;
}

void WebCore::RenderSVGResourceMasker::~RenderSVGResourceMasker(WebCore::RenderSVGResourceMasker *this, void *a2)
{
  WTF **v3;
  WTF::StringImpl *v4;

  v3 = (WTF **)*((_QWORD *)this + 30);
  if (v3)
    WTF::HashTable<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(v3, a2);
  *(_QWORD *)this = off_1E3445A38;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  WTF **v3;
  WTF::StringImpl *v4;
  void *v5;

  v3 = (WTF **)*((_QWORD *)this + 30);
  if (v3)
    WTF::HashTable<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(v3, a2);
  *(_QWORD *)this = off_1E3445A38;
  v4 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v4)
  {
    if (*(_DWORD *)v4 == 2)
      WTF::StringImpl::destroy(v4, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v4 -= 2;
  }
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_QWORD *)this + 30) = 0;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v5);
  }
}

uint64_t *WebCore::RenderSVGResourceMasker::applyMask(uint64_t *this, WebCore::PaintInfo *a2, const WebCore::RenderLayerModelObject *a3, const WebCore::LayoutPoint *a4)
{
  uint64_t *v7;
  int v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  int i;
  uint64_t v16;
  void *v18;
  WTF *v19;
  uint64_t v20;
  float v21;
  int v22;
  int v23;
  float v24;
  int v25;
  int v26;
  float v27;
  int v28;
  BOOL v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  WebCore::SVGRenderStyle *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unsigned int v46;
  int j;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  int v67;
  int v68;
  float v69;
  float v70;
  int v71;
  int v72;
  int v73;
  float v74;
  float v75;
  float v76;
  float v77;
  double v78;
  double v79;
  double v80;
  double v81;
  double v82;
  double v83;
  BOOL v84;
  double v85;
  uint64_t v86;
  WebCore::GraphicsContext *v87;
  WTF *v88;
  void *v89;
  int v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  float v99;
  float v100;
  float v101;
  float v102;
  float v103;
  int v104;
  int v105;
  float v106;
  float v107;
  int v108;
  float v109;
  float64x2_t v110;
  double v111;
  double v113;
  int8x16_t v114;
  int8x16_t v115;
  float64x2_t v116;
  double v117;
  __int128 *v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  BOOL v125;
  int v126;
  CFTypeRef v127;
  CFTypeRef v128;
  _QWORD *v129;
  WTF *v130;
  void *v131;
  void *v132;
  WTF *v133;
  uint64_t v134;
  double v135;
  double v136;
  double v137;
  double v138;
  float64x2_t v139;
  WTF *v140[2];
  __int128 v141;
  __int128 v142;
  uint64_t v143;
  float v144;
  float v145;
  uint64_t v146;
  CFTypeRef cf;
  CFTypeRef v148;
  double v149;
  float64x2_t v150;
  double v151;
  float64x2_t v152;
  _DWORD v153[4];
  float32x2_t v154;
  int v155;
  int v156;

  v7 = this;
  if (_MergedGlobals_258 == 1)
  {
    v8 = dword_1ECE84A80;
  }
  else
  {
    v8 = 0;
    qword_1ECE84A78 = 0;
    *(_QWORD *)&dword_1ECE84A80 = 0;
    _MergedGlobals_258 = 1;
  }
  dword_1ECE84A80 = v8 + 1;
  v9 = this[1];
  if (v9)
  {
    if (*(_QWORD *)(v9 + 8) && qword_1ECE84A78)
    {
      v10 = *(_DWORD *)(qword_1ECE84A78 - 8);
      v11 = (~(v9 << 32) + v9) ^ ((unint64_t)(~(v9 << 32) + v9) >> 22);
      v12 = 9 * ((v11 + ~(v11 << 13)) ^ ((v11 + ~(v11 << 13)) >> 8));
      v13 = (v12 ^ (v12 >> 15)) + ~((v12 ^ (v12 >> 15)) << 27);
      v14 = v10 & ((v13 >> 31) ^ v13);
      for (i = 1; ; ++i)
      {
        v16 = *(_QWORD *)(qword_1ECE84A78 + 8 * v14);
        if (!v16)
          break;
        if (v16 != -1 && v16 == v9)
          return this;
        v14 = (v14 + i) & v10;
      }
    }
  }
  else
  {
    v9 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v9 = 1;
    *(_QWORD *)(v9 + 8) = v7;
    v19 = (WTF *)v7[1];
    v7[1] = v9;
    if (v19)
    {
      if (*(_DWORD *)v19 == 1)
      {
        WTF::fastFree(v19, v18);
        v9 = v7[1];
        if (!v9)
          goto LABEL_17;
      }
      else
      {
        --*(_DWORD *)v19;
      }
    }
  }
  ++*(_DWORD *)v9;
LABEL_17:
  WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderElement>((uint64_t)&qword_1ECE84A78, v7, (uint64_t)&v135);
  v20 = *((_QWORD *)a2 + 10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 96))(v20, 1);
  v154.i32[0] = (*(float (**)(const WebCore::RenderLayerModelObject *))(*(_QWORD *)a3 + 232))(a3);
  v154.f32[1] = v21;
  v155 = v22;
  v156 = v23;
  v24 = floorf(v154.f32[0] * 64.0);
  if (v24 > -2147500000.0)
    v25 = (int)v24;
  else
    v25 = 0x80000000;
  if (v24 < 2147500000.0)
    v26 = v25;
  else
    v26 = 0x7FFFFFFF;
  v27 = floorf(v21 * 64.0);
  if (v27 >= 2147500000.0)
  {
    v28 = 0x7FFFFFFF;
  }
  else if (v27 <= -2147500000.0)
  {
    v28 = 0x80000000;
  }
  else
  {
    v28 = (int)v27;
  }
  v29 = __OFSUB__(*(_DWORD *)a4, v26);
  v30 = *(_DWORD *)a4 - v26;
  if (v29)
    v30 = (*(_DWORD *)a4 >> 31) + 0x7FFFFFFF;
  v31 = *((_DWORD *)a4 + 1);
  v29 = __OFSUB__(v31, v28);
  v32 = v31 - v28;
  if (v29)
    v32 = (v31 >> 31) + 0x7FFFFFFF;
  if (v32 | v30)
    (*(void (**)(uint64_t, float, float))(*(_QWORD *)v20 + 648))(v20, (float)v30 * 0.015625, (float)v32 * 0.015625);
  v153[0] = (*(float (**)(const WebCore::RenderLayerModelObject *, _QWORD))(*(_QWORD *)a3 + 256))(a3, 0);
  v153[1] = v33;
  v153[2] = v34;
  v153[3] = v35;
  (*(void (**)(double *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v20 + 672))(&v149, v20, 0);
  v36 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v36 != -1)
  {
    v135 = COERCE_DOUBLE(&v143);
    v140[0] = (WTF *)&v135;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, v140, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  v148 = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
    CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
  v37 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v37 != -1)
  {
    v135 = COERCE_DOUBLE(&v143);
    v140[0] = (WTF *)&v135;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, v140, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  cf = (CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace;
  if (WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace)
    CFRetain((CFTypeRef)WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace);
  v38 = (WebCore::SVGRenderStyle *)v7[17];
  ++*(_DWORD *)v38;
  if ((*((_WORD *)v38 + 2) & 0xC0) == 0x80)
  {
    v39 = atomic_load(&WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::onceFlag);
    if (v39 != -1)
    {
      v135 = COERCE_DOUBLE(&v143);
      v140[0] = (WTF *)&v135;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::onceFlag, v140, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    WTF::RetainPtr<CGColorSpace *>::operator=(&v148, (CFTypeRef *)&WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::colorSpace);
    v40 = atomic_load(&WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::onceFlag);
    if (v40 != -1)
    {
      v135 = COERCE_DOUBLE(&v143);
      v140[0] = (WTF *)&v135;
      std::__call_once(&WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::onceFlag, v140, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
    }
    WTF::RetainPtr<CGColorSpace *>::operator=(&cf, (CFTypeRef *)&WebCore::knownColorSpace<&WebCore::linearSRGBColorSpaceRef>(void)::colorSpace);
  }
  v41 = v7[30];
  if (v41)
  {
    v42 = *(_DWORD *)(v41 - 8);
    v43 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
    v44 = 9 * ((v43 + ~(v43 << 13)) ^ ((v43 + ~(v43 << 13)) >> 8));
    v45 = (v44 ^ (v44 >> 15)) + ~((v44 ^ (v44 >> 15)) << 27);
    v46 = v42 & ((v45 >> 31) ^ v45);
    for (j = 1; ; ++j)
    {
      v48 = v46;
      v49 = *(_QWORD *)(v41 + 16 * v46);
      if (v49 != -1)
      {
        if (!v49)
          goto LABEL_55;
        if (*(const WebCore::RenderLayerModelObject **)(v49 + 8) == a3)
          break;
      }
      v46 = (v48 + j) & v42;
    }
    v50 = *(_QWORD *)(v41 + 16 * v48 + 8);
    if (v50)
    {
      v51 = *(_QWORD *)(v50 + 8);
      if (__ldaxr((unsigned __int8 *)v51))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v51))
      {
        goto LABEL_103;
      }
      MEMORY[0x19AEA534C](v51);
LABEL_103:
      ++*(_QWORD *)(v51 + 8);
      v90 = __ldxr((unsigned __int8 *)v51);
      if (v90 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v51))
        {
LABEL_108:
          v146 = v50;
          if (*(_BYTE *)(v20 + 194) != 7 || *(_BYTE *)(v20 + 195) != 1)
          {
            *(_WORD *)(v20 + 194) = 263;
            *(_DWORD *)(v20 + 184) |= 0x20u;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 88))(v20, v20 + 8);
          (*(void (**)(uint64_t, float))(*(_QWORD *)v20 + 592))(v20, 1.0);
          goto LABEL_111;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v51);
      goto LABEL_108;
    }
  }
LABEL_55:
  v54 = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)&v149, (const WebCore::FloatRect *)v153);
  v58 = floorf(v54);
  v59 = 2147500000.0;
  if (v58 < 2147500000.0)
  {
    v59 = -2147500000.0;
    if (v58 > -2147500000.0)
      v59 = (float)(int)v58;
  }
  v60 = floorf(v55);
  v61 = 2147500000.0;
  if (v60 < 2147500000.0)
  {
    v61 = -2147500000.0;
    if (v60 > -2147500000.0)
      v61 = (float)(int)v60;
  }
  v62 = v55 + v57;
  v63 = ceilf(v54 + v56);
  v64 = 2147500000.0;
  if (v63 < 2147500000.0)
  {
    v64 = -2147500000.0;
    if (v63 > -2147500000.0)
      v64 = (float)(int)v63;
  }
  v65 = ceilf(v62);
  v66 = 2147500000.0;
  if (v65 < 2147500000.0)
  {
    v66 = -2147500000.0;
    if (v65 > -2147500000.0)
      v66 = (float)(int)v65;
  }
  if (v59 >= 2147500000.0)
  {
    v67 = 0x7FFFFFFF;
  }
  else if (v59 <= -2147500000.0)
  {
    v67 = 0x80000000;
  }
  else
  {
    v67 = (int)v59;
  }
  if (v61 >= 2147500000.0)
  {
    v68 = -2147483647;
  }
  else if (v61 <= -2147500000.0)
  {
    v68 = 0x80000000;
  }
  else
  {
    v68 = -(int)v61;
  }
  v69 = v64 - v59;
  v70 = v66 - v61;
  if (v69 > -2147500000.0)
    v71 = (int)v69;
  else
    v71 = 0x80000000;
  if (v69 < 2147500000.0)
    v72 = v71;
  else
    v72 = 0x7FFFFFFF;
  if (v70 >= 2147500000.0)
  {
    v73 = 0x7FFFFFFF;
  }
  else
  {
    if (v70 <= -2147500000.0)
      goto LABEL_163;
    v73 = (int)v70;
  }
  if (v72 < 1)
    goto LABEL_163;
  if (v73 < 1)
    goto LABEL_163;
  v74 = (float)v72;
  v75 = (float)v73;
  v76 = fminf((float)v72, 4096.0);
  v77 = fminf((float)v73, 4096.0);
  v140[0] = (WTF *)__PAIR64__(LODWORD(v77), LODWORD(v76));
  v135 = 0.0;
  v136 = 0.0;
  WebCore::ImageBuffer::create<WebCore::ImageBufferCGBitmapBackend,WebCore::ImageBuffer>((float *)v140, &v148, 1, 0, &v143, 1.0);
  WTF::MachSendRight::~MachSendRight((WTF::MachSendRight *)((char *)&v136 + 4));
  if (!v143)
    goto LABEL_163;
  v78 = (float)(v76 / v74);
  v79 = (float)(v77 / v75);
  v80 = v78 * 0.0;
  v81 = v79 * 0.0;
  v82 = (float)-v67;
  v83 = (float)v68;
  if ((float)(v76 / v74) != 1.0 || v80 != 0.0 || (v81 == 0.0 ? (v84 = (float)(v77 / v75) == 1.0) : (v84 = 0), !v84))
  {
    v85 = v81 * v83 + v82 * v78;
    v83 = v79 * v83 + v82 * v80;
    v82 = v85 + 0.0;
  }
  v135 = v81 * v150.f64[0] + v149 * v78;
  v136 = v150.f64[0] * v79 + v149 * v80;
  v137 = v81 * v151 + v150.f64[1] * v78;
  v138 = v151 * v79 + v150.f64[1] * v80;
  v139.f64[0] = v82 + v81 * v152.f64[1] + v152.f64[0] * v78;
  v139.f64[1] = v83 + 0.0 + v152.f64[1] * v79 + v152.f64[0] * v80;
  v86 = (*(uint64_t (**)(void))(*(_QWORD *)v143 + 16))();
  (*(void (**)(uint64_t, double *))(*(_QWORD *)v86 + 656))(v86, &v135);
  v50 = v143;
  v146 = v143;
  if (!v143)
    goto LABEL_163;
  if (*(_BYTE *)(v20 + 194) != 7 || *(_BYTE *)(v20 + 195) != 1)
  {
    *(_WORD *)(v20 + 194) = 263;
    *(_DWORD *)(v20 + 184) |= 0x20u;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 88))(v20, v20 + 8);
  (*(void (**)(uint64_t, float))(*(_QWORD *)v20 + 592))(v20, 1.0);
  v87 = (WebCore::GraphicsContext *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50);
  WebCore::RenderSVGResourceMasker::drawContentIntoContext((WebCore::RenderSVGResourceMasker *)v7, v87, &v154);
  if ((*((_WORD *)v38 + 4) & 0x2000) == 0)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 72))(v50);
  v88 = (WTF *)*((_QWORD *)a3 + 1);
  if (!v88)
  {
    v88 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v88 = 1;
    *((_QWORD *)v88 + 1) = a3;
    v133 = (WTF *)*((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = v88;
    if (v133)
    {
      if (*(_DWORD *)v133 == 1)
      {
        WTF::fastFree(v133, v132);
        v88 = (WTF *)*((_QWORD *)a3 + 1);
      }
      else
      {
        --*(_DWORD *)v133;
      }
    }
  }
  ++*(_DWORD *)v88;
  v140[0] = v88;
  WTF::HashMap<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::HashTableTraits>::inlineSet<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>&>((WTF *)&v135, v7 + 30, (uint64_t *)v140, &v146);
  if (v140[0])
  {
    if (*(_DWORD *)v140[0] == 1)
      WTF::fastFree(v140[0], v89);
    else
      --*(_DWORD *)v140[0];
  }
LABEL_111:
  if (*(_BYTE *)(v20 + 194) != 2 || *(_BYTE *)(v20 + 195) != 1)
  {
    *(_WORD *)(v20 + 194) = 258;
    *(_DWORD *)(v20 + 184) |= 0x20u;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 88))(v20, v20 + 8);
  v91 = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)&v149, (const WebCore::FloatRect *)v153);
  v95 = floorf(v91);
  v96 = 2147500000.0;
  if (v95 < 2147500000.0)
  {
    v96 = -2147500000.0;
    if (v95 > -2147500000.0)
      v96 = (float)(int)v95;
  }
  v97 = floorf(v92);
  v98 = 2147500000.0;
  if (v97 < 2147500000.0)
  {
    v98 = -2147500000.0;
    if (v97 > -2147500000.0)
      v98 = (float)(int)v97;
  }
  v99 = v92 + v94;
  v100 = ceilf(v91 + v93);
  v101 = 2147500000.0;
  if (v100 < 2147500000.0)
  {
    v101 = -2147500000.0;
    if (v100 > -2147500000.0)
      v101 = (float)(int)v100;
  }
  v102 = ceilf(v99);
  v103 = 2147500000.0;
  if (v102 < 2147500000.0)
  {
    v103 = -2147500000.0;
    if (v102 > -2147500000.0)
      v103 = (float)(int)v102;
  }
  if (v96 >= 2147500000.0)
  {
    v104 = 0x7FFFFFFF;
  }
  else if (v96 <= -2147500000.0)
  {
    v104 = 0x80000000;
  }
  else
  {
    v104 = (int)v96;
  }
  if (v98 >= 2147500000.0)
  {
    v105 = 0x7FFFFFFF;
  }
  else if (v98 <= -2147500000.0)
  {
    v105 = 0x80000000;
  }
  else
  {
    v105 = (int)v98;
  }
  v106 = v101 - v96;
  v107 = v103 - v98;
  if (v106 >= 2147500000.0)
  {
    v108 = 0x7FFFFFFF;
  }
  else if (v106 <= -2147500000.0)
  {
    v108 = 0x80000000;
  }
  else
  {
    v108 = (int)v106;
  }
  v109 = 2147500000.0;
  if (v107 < 2147500000.0)
  {
    v109 = -2147500000.0;
    if (v107 > -2147500000.0)
      v109 = (float)(int)v107;
  }
  *(float *)&v143 = (float)v104;
  *((float *)&v143 + 1) = (float)v105;
  v144 = (float)v108;
  v145 = v109;
  v110.f64[0] = v151;
  v111 = vmuld_lane_f64(-v150.f64[0], v150, 1) + v149 * v151;
  if (((*(_QWORD *)&v111 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE
    && (*(_QWORD *)&v111 & 0x7FFFFFFFFFFFFFFFuLL) - 1 > 0xFFFFFFFFFFFFELL)
  {
    LOBYTE(v135) = 0;
    v118 = &constinit_9;
  }
  else
  {
    v113 = 1.0;
    if (v149 == 1.0 && v150.f64[0] == 0.0 && v150.f64[1] == 0.0 && v151 == 1.0)
    {
      v116 = vnegq_f64(v152);
      v136 = 0.0;
      v137 = 0.0;
      v117 = 1.0;
    }
    else
    {
      v113 = v151 / v111;
      v110.f64[1] = v149;
      v114 = (int8x16_t)vmulq_f64(v152, vnegq_f64(v110));
      v115 = (int8x16_t)vdivq_f64(vmlaq_f64((float64x2_t)vextq_s8(v114, v114, 8uLL), v152, v150), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v111, 0));
      v116 = (float64x2_t)vextq_s8(v115, v115, 8uLL);
      v136 = -v150.f64[0] / v111;
      v137 = -v150.f64[1] / v111;
      v117 = v149 / v111;
    }
    v135 = v113;
    v138 = v117;
    v118 = (__int128 *)&v135;
    v139 = v116;
  }
  v119 = v118[1];
  *(_OWORD *)v140 = *v118;
  v141 = v119;
  v142 = v118[2];
  (*(void (**)(uint64_t, WTF **))(*(_QWORD *)v20 + 656))(v20, v140);
  v135 = 0.0;
  v136 = *(double *)(v50 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t *, double *, uint64_t))(*(_QWORD *)v20 + 384))(v20, v50, &v143, &v135, 4641);
  (*(void (**)(uint64_t))(*(_QWORD *)v20 + 608))(v20);
  v146 = 0;
  v120 = *(_QWORD *)(v50 + 8);
  if (__ldaxr((unsigned __int8 *)v120))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v120))
  {
    goto LABEL_151;
  }
  MEMORY[0x19AEA534C](v120);
LABEL_151:
  v122 = *(_QWORD *)(v120 + 8);
  v123 = v122 - 1;
  *(_QWORD *)(v120 + 8) = v122 - 1;
  if (v122 == 1)
  {
    v134 = *(_QWORD *)(v120 + 16);
    v124 = *(_QWORD *)(v120 + 24);
    *(_QWORD *)(v120 + 24) = 0;
    v125 = v134 != 0;
  }
  else
  {
    v124 = 0;
    v125 = 1;
  }
  v126 = __ldxr((unsigned __int8 *)v120);
  if (v126 == 1)
  {
    if (!__stlxr(0, (unsigned __int8 *)v120))
    {
      if (!v123)
        goto LABEL_159;
      goto LABEL_163;
    }
  }
  else
  {
    __clrex();
  }
  WTF::Lock::unlockSlow((WTF::Lock *)v120);
  if (!v123)
  {
LABEL_159:
    if (v124)
      (*(void (**)(uint64_t))(*(_QWORD *)v124 + 8))(v124);
    if (!v125)
      WTF::fastFree((WTF *)v120, v53);
  }
LABEL_163:
  if (*(_DWORD *)v38 == 1)
  {
    WebCore::SVGRenderStyle::~SVGRenderStyle(v38, v53);
    WTF::fastFree(v130, v131);
  }
  else
  {
    --*(_DWORD *)v38;
  }
  v127 = cf;
  cf = 0;
  if (v127)
    CFRelease(v127);
  v128 = v148;
  v148 = 0;
  if (v128)
    CFRelease(v128);
  this = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 104))(v20, 1);
  if (v9)
  {
    v129 = *(_QWORD **)(v9 + 8);
    if (v129)
      this = (uint64_t *)WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderElement>((uint64_t)&qword_1ECE84A78, v129);
    if (*(_DWORD *)v9 == 1)
      return (uint64_t *)WTF::fastFree((WTF *)v9, v129);
    else
      --*(_DWORD *)v9;
  }
  return this;
}

uint64_t WebCore::RenderSVGResourceMasker::drawContentIntoContext(WebCore::RenderSVGResourceMasker *this, WebCore::GraphicsContext *a2, float32x2_t *a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  float32x2_t v11;
  float64x2_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t i;
  uint64_t v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  _BYTE v24[32];
  float64x2_t v25;
  uint64_t v26[2];
  __int128 v27;
  uint64_t v28;
  _QWORD v29[3];

  *(_OWORD *)v24 = constinit_9;
  *(_OWORD *)&v24[16] = xmmword_1969FDFE0;
  v25 = (float64x2_t)xmmword_1969FDFF0;
  v3 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v3 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x196518C4CLL);
  }
  if (*(_QWORD *)(*(_QWORD *)(v3 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::maskTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x196518C6CLL);
  }
  *(_DWORD *)(v3 + 24) += 2;
  v26[0] = v3;
  v7 = *(_QWORD **)(v3 + 224);
  v8 = v7[3];
  if (!v8 || !*(_DWORD *)(v8 - 12))
    goto LABEL_4;
  v19 = *(unsigned int *)(v8 - 4);
  if ((_DWORD)v19)
  {
    v20 = 8 * v19;
    v21 = (uint64_t *)v7[3];
    while ((unint64_t)(*v21 + 1) <= 1)
    {
      ++v21;
      v20 -= 8;
      if (!v20)
        goto LABEL_4;
    }
  }
  else
  {
    v21 = (uint64_t *)v7[3];
  }
  v22 = (uint64_t *)(v8 + 8 * v19);
  if (v21 == v22)
    goto LABEL_4;
  v23 = *v21;
LABEL_27:
  if (!*(_QWORD *)(v23 + 8))
  {
    while (++v21 != v22)
    {
      v23 = *v21;
      if ((unint64_t)(*v21 + 1) > 1)
      {
        if (v21 != v22)
          goto LABEL_27;
        break;
      }
    }
LABEL_4:
    v9 = v7 + 5;
    goto LABEL_5;
  }
  v9 = v7 + 6;
LABEL_5:
  v10 = (*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v9 + 32))(*v9);
  WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref(v26);
  if (v10 == 2)
  {
    v11 = a3[1];
    v25 = vaddq_f64(vcvtq_f64_f32(*a3), (float64x2_t)0);
    v12 = vcvtq_f64_f32(v11);
    *(float64_t *)v24 = v12.f64[0];
    *(float64x2_t *)&v24[8] = vmulq_f64(v12, (float64x2_t)0);
    *(float64_t *)&v24[24] = v12.f64[1];
  }
  v13 = *((_QWORD *)this + 18);
  if (v13)
    ++*(_DWORD *)(v13 + 8);
  v14 = *(_QWORD *)(v13 + 24);
  *(_QWORD *)(v13 + 24) = v14 | 0x400000000;
  (*(void (**)(WebCore::GraphicsContext *, _BYTE *))(*(_QWORD *)a2 + 656))(a2, v24);
  for (i = *(_QWORD *)(v13 + 40); i; i = *(_QWORD *)(i + 40))
  {
    v16 = *(_QWORD *)(i + 32);
    if ((*(_BYTE *)(v16 + 45) & 1) != 0 && *(_BYTE *)(v16 + 46) == 88)
      break;
  }
  v26[0] = i;
  v26[1] = 0;
  v27 = xmmword_1969FCA90;
  v29[2] = 0;
  v28 = 0;
  v29[0] = 0;
  *(_QWORD *)((char *)v29 + 6) = 0;
  WebCore::RenderLayer::paintLayer(v13, a2, (uint64_t)v26, ((unint64_t)*(unsigned int *)(*(_QWORD *)(v13 + 32) + 20) >> 6) & 0x400 ^ 0x404);
  *(_QWORD *)(v13 + 24) = *(_QWORD *)(v13 + 24) & 0xFFFFFFFBFFFFFFFFLL | (((v14 >> 34) & 1) << 34);
  v17 = *(_DWORD *)(v13 + 8);
  if (!v17)
  {
    __break(0xC471u);
    JUMPOUT(0x196518C8CLL);
  }
  *(_DWORD *)(v13 + 8) = v17 - 1;
  return 1;
}

float WebCore::RenderSVGResourceMasker::resourceBoundingBox(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned int v18;
  int i;
  uint64_t v20;
  void *v22;
  WTF *v23;
  uint64_t v24;
  float v25;
  float v26;
  float v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  float v31;
  float v32;
  float v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  unsigned __int8 v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  _QWORD *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  double v60[6];
  float v61;
  float v62;
  float v63;
  float v64;
  uint64_t v65;
  float v66[4];

  v5 = (*(float (**)(uint64_t))(*(_QWORD *)a2 + 232))(a2);
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v66[0] = v5;
  v66[1] = v6;
  v66[2] = v8;
  v66[3] = v10;
  if (byte_1ECE84A71 == 1)
  {
    v12 = dword_1ECE84A90;
  }
  else
  {
    v12 = 0;
    *(_QWORD *)&dword_1ECE84A90 = 0;
    qword_1ECE84A88 = 0;
    byte_1ECE84A71 = 1;
  }
  dword_1ECE84A90 = v12 + 1;
  v13 = a1[1];
  if (v13)
  {
    if (*(_QWORD *)(v13 + 8) && qword_1ECE84A88)
    {
      v14 = *(_DWORD *)(qword_1ECE84A88 - 8);
      v15 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
      v16 = 9 * ((v15 + ~(v15 << 13)) ^ ((v15 + ~(v15 << 13)) >> 8));
      v17 = (v16 ^ (v16 >> 15)) + ~((v16 ^ (v16 >> 15)) << 27);
      v18 = v14 & ((v17 >> 31) ^ v17);
      for (i = 1; ; ++i)
      {
        v20 = *(_QWORD *)(qword_1ECE84A88 + 8 * v18);
        if (!v20)
          break;
        if (v20 != -1 && v20 == v13)
          return v5;
        v18 = (v18 + i) & v14;
      }
    }
  }
  else
  {
    v13 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v13 = 1;
    *(_QWORD *)(v13 + 8) = a1;
    v23 = (WTF *)a1[1];
    a1[1] = v13;
    if (v23)
    {
      if (*(_DWORD *)v23 == 1)
      {
        WTF::fastFree(v23, v22);
        v13 = a1[1];
        if (!v13)
          goto LABEL_17;
      }
      else
      {
        --*(_DWORD *)v23;
      }
    }
  }
  ++*(_DWORD *)v13;
LABEL_17:
  WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderElement>((uint64_t)&qword_1ECE84A88, a1, (uint64_t)v60);
  v24 = *(_QWORD *)(a1[3] + 8);
  if ((*(_WORD *)(v24 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19651908CLL);
  }
  if (*(_QWORD *)(*(_QWORD *)(v24 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::maskTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x1965190ACLL);
  }
  *(_DWORD *)(v24 + 24) += 2;
  v65 = v24;
  v61 = WebCore::SVGMaskElement::calculateMaskContentRepaintRect((_QWORD *)v24, a3);
  v62 = v25;
  v63 = v26;
  v64 = v27;
  v28 = *(_QWORD **)(v24 + 224);
  v29 = v28[3];
  if (v29 && *(_DWORD *)(v29 - 12))
  {
    v50 = *(unsigned int *)(v29 - 4);
    if ((_DWORD)v50)
    {
      v51 = 8 * v50;
      v52 = (uint64_t *)v28[3];
      while ((unint64_t)(*v52 + 1) <= 1)
      {
        ++v52;
        v51 -= 8;
        if (!v51)
          goto LABEL_20;
      }
    }
    else
    {
      v52 = (uint64_t *)v28[3];
    }
    v56 = (uint64_t *)(v29 + 8 * v50);
    if (v52 != v56)
    {
      v57 = *v52;
LABEL_71:
      if (*(_QWORD *)(v57 + 8))
      {
        v30 = v28 + 6;
        goto LABEL_21;
      }
      while (++v52 != v56)
      {
        v57 = *v52;
        if ((unint64_t)(*v52 + 1) > 1)
        {
          if (v52 != v56)
            goto LABEL_71;
          break;
        }
      }
    }
  }
LABEL_20:
  v30 = v28 + 5;
LABEL_21:
  if ((*(unsigned __int8 (**)(_QWORD))(*(_QWORD *)*v30 + 32))(*v30) == 2)
  {
    v60[4] = v5 + 0.0;
    v60[5] = v7 + 0.0;
    v60[0] = v9;
    v60[1] = v9 * 0.0;
    v60[2] = v11 * 0.0;
    v60[3] = v11;
    v61 = WebCore::AffineTransform::mapRect((WebCore::AffineTransform *)v60, (const WebCore::FloatRect *)&v61);
    v62 = v31;
    v63 = v32;
    v64 = v33;
  }
  v34 = *(_QWORD **)(v24 + 216);
  v35 = v34[3];
  if (v35 && *(_DWORD *)(v35 - 12))
  {
    v53 = *(unsigned int *)(v35 - 4);
    if ((_DWORD)v53)
    {
      v54 = 8 * v53;
      v55 = (uint64_t *)v34[3];
      while ((unint64_t)(*v55 + 1) <= 1)
      {
        ++v55;
        v54 -= 8;
        if (!v54)
          goto LABEL_24;
      }
    }
    else
    {
      v55 = (uint64_t *)v34[3];
    }
    v58 = (uint64_t *)(v35 + 8 * v53);
    if (v55 != v58)
    {
      v59 = *v55;
LABEL_80:
      if (*(_QWORD *)(v59 + 8))
      {
        v36 = v34 + 6;
        goto LABEL_25;
      }
      while (++v55 != v58)
      {
        v59 = *v55;
        if ((unint64_t)(*v55 + 1) > 1)
        {
          if (v55 != v58)
            goto LABEL_80;
          break;
        }
      }
    }
  }
LABEL_24:
  v36 = v34 + 5;
LABEL_25:
  v37 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v36 + 32))(*v36);
  v38 = WebCore::SVGLengthContext::resolveRectangle<WebCore::SVGMaskElement>((WebCore::SVGElement *)v24, v37, v66);
  if (v61 >= v38)
    v5 = v61;
  else
    v5 = v38;
  if (v62 >= v39)
    v42 = v62;
  else
    v42 = v39;
  v43 = v38 + v40;
  if (v43 >= (float)(v61 + v63))
    v44 = v61 + v63;
  else
    v44 = v43;
  v45 = v62 + v64;
  v46 = v39 + v41;
  if (v46 < (float)(v62 + v64))
    v45 = v46;
  if (v5 >= v44 || v42 >= v45)
  {
    v5 = 0.0;
    v42 = 0.0;
    v44 = 0.0;
    v45 = 0.0;
  }
  if ((float)(v44 - v5) <= 0.0 || (float)(v45 - v42) <= 0.0)
    v5 = v66[0];
  WTF::Ref<WebCore::HTMLElement,WTF::RawPtrTraits<WebCore::HTMLElement>,WTF::DefaultRefDerefTraits<WebCore::HTMLElement>>::~Ref(&v65);
  if (v13)
  {
    v48 = *(_QWORD **)(v13 + 8);
    if (v48)
      WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderElement>((uint64_t)&qword_1ECE84A88, v48);
    if (*(_DWORD *)v13 == 1)
      WTF::fastFree((WTF *)v13, v48);
    else
      --*(_DWORD *)v13;
  }
  return v5;
}

float WebCore::SVGLengthContext::resolveRectangle<WebCore::SVGMaskElement>(WebCore::SVGElement *a1, int a2, float *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  v3 = (_QWORD *)*((_QWORD *)a1 + 23);
  v4 = v3[3];
  if (!v4 || !*(_DWORD *)(v4 - 12))
    goto LABEL_2;
  v19 = *(unsigned int *)(v4 - 4);
  if ((_DWORD)v19)
  {
    v20 = 8 * v19;
    v21 = (uint64_t *)v3[3];
    while ((unint64_t)(*v21 + 1) <= 1)
    {
      ++v21;
      v20 -= 8;
      if (!v20)
        goto LABEL_2;
    }
  }
  else
  {
    v21 = (uint64_t *)v3[3];
  }
  v31 = (uint64_t *)(v4 + 8 * v19);
  if (v21 == v31)
    goto LABEL_2;
  v32 = *v21;
LABEL_37:
  if (!*(_QWORD *)(v32 + 8))
  {
    while (++v21 != v31)
    {
      v32 = *v21;
      if ((unint64_t)(*v21 + 1) > 1)
      {
        if (v21 != v31)
          goto LABEL_37;
        break;
      }
    }
LABEL_2:
    v5 = v3 + 5;
    goto LABEL_3;
  }
  v5 = v3 + 6;
LABEL_3:
  v6 = (_QWORD *)*((_QWORD *)a1 + 24);
  v7 = v6[3];
  if (!v7 || !*(_DWORD *)(v7 - 12))
    goto LABEL_4;
  v22 = *(unsigned int *)(v7 - 4);
  if ((_DWORD)v22)
  {
    v23 = 8 * v22;
    v24 = (uint64_t *)v6[3];
    while ((unint64_t)(*v24 + 1) <= 1)
    {
      ++v24;
      v23 -= 8;
      if (!v23)
        goto LABEL_4;
    }
  }
  else
  {
    v24 = (uint64_t *)v6[3];
  }
  v33 = (uint64_t *)(v7 + 8 * v22);
  if (v24 == v33)
    goto LABEL_4;
  v34 = *v24;
LABEL_46:
  if (!*(_QWORD *)(v34 + 8))
  {
    while (++v24 != v33)
    {
      v34 = *v24;
      if ((unint64_t)(*v24 + 1) > 1)
      {
        if (v24 != v33)
          goto LABEL_46;
        break;
      }
    }
LABEL_4:
    v8 = v6 + 5;
    goto LABEL_5;
  }
  v8 = v6 + 6;
LABEL_5:
  v9 = (_QWORD *)*((_QWORD *)a1 + 25);
  v10 = v9[3];
  if (!v10 || !*(_DWORD *)(v10 - 12))
    goto LABEL_6;
  v25 = *(unsigned int *)(v10 - 4);
  if ((_DWORD)v25)
  {
    v26 = 8 * v25;
    v27 = (uint64_t *)v9[3];
    while ((unint64_t)(*v27 + 1) <= 1)
    {
      ++v27;
      v26 -= 8;
      if (!v26)
        goto LABEL_6;
    }
  }
  else
  {
    v27 = (uint64_t *)v9[3];
  }
  v35 = (uint64_t *)(v10 + 8 * v25);
  if (v27 == v35)
    goto LABEL_6;
  v36 = *v27;
LABEL_55:
  if (!*(_QWORD *)(v36 + 8))
  {
    while (++v27 != v35)
    {
      v36 = *v27;
      if ((unint64_t)(*v27 + 1) > 1)
      {
        if (v27 != v35)
          goto LABEL_55;
        break;
      }
    }
LABEL_6:
    v11 = v9 + 5;
    goto LABEL_7;
  }
  v11 = v9 + 6;
LABEL_7:
  v12 = *v5;
  v13 = *v8;
  v14 = *v11;
  v15 = *((_QWORD *)a1 + 26);
  v16 = *(_QWORD *)(v15 + 24);
  if (v16 && *(_DWORD *)(v16 - 12))
  {
    v28 = *(unsigned int *)(v16 - 4);
    if ((_DWORD)v28)
    {
      v29 = 8 * v28;
      v30 = *(uint64_t **)(v15 + 24);
      while ((unint64_t)(*v30 + 1) <= 1)
      {
        ++v30;
        v29 -= 8;
        if (!v29)
          goto LABEL_8;
      }
    }
    else
    {
      v30 = *(uint64_t **)(v15 + 24);
    }
    v37 = (uint64_t *)(v16 + 8 * v28);
    if (v30 != v37)
    {
      v38 = *v30;
LABEL_64:
      if (*(_QWORD *)(v38 + 8))
      {
        v17 = v15 + 48;
        return WebCore::SVGLengthContext::resolveRectangle(a1, a2, a3, (WebCore::SVGLengthValue *)(v12 + 28), (WebCore::SVGLengthValue *)(v13 + 28), (WebCore::SVGLengthValue *)(v14 + 28), (WebCore::SVGLengthValue *)(*(_QWORD *)v17 + 28));
      }
      while (++v30 != v37)
      {
        v38 = *v30;
        if ((unint64_t)(*v30 + 1) > 1)
        {
          if (v30 != v37)
            goto LABEL_64;
          break;
        }
      }
    }
  }
LABEL_8:
  v17 = v15 + 40;
  return WebCore::SVGLengthContext::resolveRectangle(a1, a2, a3, (WebCore::SVGLengthValue *)(v12 + 28), (WebCore::SVGLengthValue *)(v13 + 28), (WebCore::SVGLengthValue *)(v14 + 28), (WebCore::SVGLengthValue *)(*(_QWORD *)v17 + 28));
}

uint64_t *WebCore::RenderSVGResourceMasker::removeReferencingCSSClient(uint64_t *this, const WebCore::RenderElement *a2)
{
  if ((*((_BYTE *)a2 + 45) & 0x10) != 0)
    return WTF::HashMap<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>(this + 30, a2);
  return this;
}

uint64_t *WTF::HashMap<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>(uint64_t *result, void *a2)
{
  uint64_t v2;
  uint64_t *v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int v8;
  int i;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v27;

  v2 = *result;
  if (*result)
  {
    v3 = result;
    v4 = *(_DWORD *)(v2 - 8);
    v5 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
    v6 = 9 * ((v5 + ~(v5 << 13)) ^ ((v5 + ~(v5 << 13)) >> 8));
    v7 = (v6 ^ (v6 >> 15)) + ~((v6 ^ (v6 >> 15)) << 27);
    v8 = v4 & ((v7 >> 31) ^ v7);
    for (i = 1; ; ++i)
    {
      v10 = v8;
      result = *(uint64_t **)(v2 + 16 * v8);
      if (result != (uint64_t *)-1)
      {
        if (!result)
          return result;
        if ((void *)result[1] == a2)
          break;
      }
      v8 = (v8 + i) & v4;
    }
    if (v8 != *(_DWORD *)(v2 - 4))
    {
      v11 = (_QWORD *)(v2 + 16 * v8);
      *v11 = 0;
      if (*(_DWORD *)result == 1)
        result = (uint64_t *)WTF::fastFree((WTF *)result, a2);
      else
        --*(_DWORD *)result;
      *v11 = -1;
      v12 = v2 + 16 * v10;
      v13 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)(v12 + 8) = 0;
      if (!v13)
      {
LABEL_27:
        ++*(_DWORD *)(*v3 - 16);
        v21 = *v3;
        if (*v3)
          v22 = *(_DWORD *)(v21 - 12) - 1;
        else
          v22 = -1;
        *(_DWORD *)(v21 - 12) = v22;
        v23 = *v3;
        if (*v3)
        {
          v24 = 6 * *(_DWORD *)(v23 - 12);
          v25 = *(_DWORD *)(v23 - 4);
          if (v24 < v25 && v25 >= 9)
            return (uint64_t *)WTF::HashTable<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>>::rehash(v3, v25 >> 1, 0);
        }
        return result;
      }
      v14 = *(_QWORD *)(v13 + 8);
      if (__ldaxr((unsigned __int8 *)v14))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v14))
      {
        goto LABEL_15;
      }
      result = (uint64_t *)MEMORY[0x19AEA534C](v14);
LABEL_15:
      v16 = *(_QWORD *)(v14 + 8);
      v17 = v16 - 1;
      *(_QWORD *)(v14 + 8) = v16 - 1;
      if (v16 == 1)
      {
        v27 = *(_QWORD *)(v14 + 16);
        v18 = *(_QWORD *)(v14 + 24);
        *(_QWORD *)(v14 + 24) = 0;
        v19 = v27 != 0;
      }
      else
      {
        v18 = 0;
        v19 = 1;
      }
      v20 = __ldxr((unsigned __int8 *)v14);
      if (v20 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v14))
        {
LABEL_22:
          if (!v17)
          {
            if (v18)
              result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
            if (!v19)
              result = (uint64_t *)WTF::fastFree((WTF *)v14, a2);
          }
          goto LABEL_27;
        }
      }
      else
      {
        __clrex();
      }
      result = (uint64_t *)WTF::Lock::unlockSlow((WTF::Lock *)v14);
      goto LABEL_22;
    }
  }
  return result;
}

uint64_t WebCore::RenderSVGResourceMasker::drawContentIntoContext(WebCore::RenderSVGResourceMasker *a1, WebCore::GraphicsContext *a2, float *a3, float *a4, unsigned int a5)
{
  int v10;
  int v11;
  float v13;
  float v14;
  float v15;
  float v16;
  float32x2_t v19[2];

  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 96))(a2, 1);
  v10 = (a5 >> 8) & 0xF;
  v11 = a5 & 0x1F;
  if (*((unsigned __int8 *)a2 + 194) != v10 || *((unsigned __int8 *)a2 + 195) != v11)
  {
    *((_WORD *)a2 + 97) = v10 | ((_WORD)v11 << 8);
    *((_DWORD *)a2 + 46) |= 0x20u;
  }
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 88))(a2, (uint64_t)a2 + 8);
  (*(void (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)a2 + 648))(a2, *a3, a3[1]);
  v13 = a3[2];
  v14 = a3[3];
  v15 = a4[2];
  v16 = a4[3];
  if (v13 != v15 || v14 != v16)
  {
    v19[0].f32[0] = v13 / v15;
    v19[0].f32[1] = v14 / v16;
    (*(void (**)(WebCore::GraphicsContext *, float32x2_t *))(*(_QWORD *)a2 + 632))(a2, v19);
  }
  (*(void (**)(WebCore::GraphicsContext *, float, float))(*(_QWORD *)a2 + 648))(a2, -*a4, -a4[1]);
  v19[0] = 0;
  v19[1] = *(float32x2_t *)(a3 + 2);
  WebCore::RenderSVGResourceMasker::drawContentIntoContext(a1, a2, v19);
  (*(void (**)(WebCore::GraphicsContext *, uint64_t))(*(_QWORD *)a2 + 104))(a2, 1);
  return 1;
}

uint64_t WebCore::RenderSVGResourcePattern::RenderSVGResourcePattern(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;
  _DWORD **v6;
  _DWORD *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  result = WebCore::RenderLayerModelObject::RenderLayerModelObject(a1, 81, a2, a3, 0, 3588);
  *(_OWORD *)(result + 188) = 0u;
  *(_OWORD *)(result + 172) = 0u;
  *(_QWORD *)(result + 152) = 0;
  *(_QWORD *)(result + 160) = 0;
  *(_DWORD *)(result + 167) = 0;
  *(int32x4_t *)(result + 204) = vdupq_n_s32(0x7FC00000u);
  v5 = *(_QWORD *)(a2 + 104);
  if (v5 && *(_QWORD *)(v5 + 24))
  {
    v8 = *(_DWORD *)(v5 + 4);
    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD **)(v5 + 40);
      LODWORD(v10) = *(_DWORD *)(v5 + 52);
    }
    else
    {
      v9 = (_QWORD *)(v5 + 32);
      LODWORD(v10) = v8 >> 5;
    }
    if ((_DWORD)v10)
    {
      v10 = v10;
      while (1)
      {
        v11 = *v9;
        if (*v9 == WebCore::HTMLNames::idAttr
          || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
          && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
        {
          break;
        }
        v9 += 2;
        if (!--v10)
          goto LABEL_18;
      }
    }
    else
    {
LABEL_18:
      v9 = 0;
    }
    v6 = (_DWORD **)(v9 + 1);
  }
  else
  {
    v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
  }
  v7 = *v6;
  if (v7)
    *v7 += 2;
  *(_QWORD *)(result + 224) = v7;
  *(_BYTE *)(result + 232) = 0;
  *(_QWORD *)result = off_1E34475B0;
  *(_BYTE *)(result + 240) = 0;
  *(_BYTE *)(result + 360) = 0;
  *(_QWORD *)(result + 368) = 0;
  *(_QWORD *)(result + 376) = 0;
  return result;
}

void WebCore::RenderSVGResourcePattern::~RenderSVGResourcePattern(WebCore::RenderSVGResourcePattern *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  WTF **v5;
  WTF *v6;
  WTF **v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  WTF::StringImpl *v11;
  uint64_t v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *((_QWORD *)this + 47);
  if (v3)
  {
    v4 = *(unsigned int *)(v3 - 4);
    if ((_DWORD)v4)
    {
      v5 = (WTF **)*((_QWORD *)this + 47);
      do
      {
        v6 = *v5;
        if (*v5 != (WTF *)-1)
        {
          *v5 = 0;
          if (v6)
          {
            if (*(_DWORD *)v6 == 1)
              WTF::fastFree(v6, a2);
            else
              --*(_DWORD *)v6;
          }
        }
        v5 += 7;
        --v4;
      }
      while (v4);
    }
    WTF::fastFree((WTF *)(v3 - 16), a2);
  }
  v7 = (WTF **)*((_QWORD *)this + 46);
  if (v7)
    WTF::HashTable<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(v7, a2);
  if (*((_BYTE *)this + 360))
  {
    v8 = *((_QWORD *)this + 43);
    *((_QWORD *)this + 43) = 0;
    if (v8)
    {
      do
      {
        v9 = __ldaxr((unsigned int *)v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, (unsigned int *)v8));
      if (!v10)
      {
        atomic_store(1u, (unsigned int *)v8);
        v12 = *(unsigned int *)(v8 + 28);
        if ((_DWORD)v12)
        {
          v15 = v8;
          WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v8 + 16), (WTF::StringImpl *)(*(_QWORD *)(v8 + 16) + 32 * v12));
          v8 = v15;
        }
        v13 = *(WTF **)(v8 + 16);
        if (v13)
        {
          *(_QWORD *)(v8 + 16) = 0;
          *(_DWORD *)(v8 + 24) = 0;
          v14 = v8;
          WTF::fastFree(v13, a2);
          v8 = v14;
        }
        WTF::fastFree((WTF *)v8, a2);
      }
    }
  }
  *(_QWORD *)this = off_1E3445A38;
  v11 = (WTF::StringImpl *)*((_QWORD *)this + 28);
  *((_QWORD *)this + 28) = 0;
  if (v11)
  {
    if (*(_DWORD *)v11 == 2)
      WTF::StringImpl::destroy(v11, (WTF::StringImpl *)a2);
    else
      *(_DWORD *)v11 -= 2;
  }
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  bmalloc::api *v2;
  void *v3;

  WebCore::RenderSVGResourcePattern::~RenderSVGResourcePattern(this, a2);
  if (*((_DWORD *)v2 + 4))
  {
    *((_OWORD *)v2 + 22) = 0u;
    *((_OWORD *)v2 + 23) = 0u;
    *((_OWORD *)v2 + 20) = 0u;
    *((_OWORD *)v2 + 21) = 0u;
    *((_OWORD *)v2 + 18) = 0u;
    *((_OWORD *)v2 + 19) = 0u;
    *((_OWORD *)v2 + 16) = 0u;
    *((_OWORD *)v2 + 17) = 0u;
    *((_OWORD *)v2 + 14) = 0u;
    *((_OWORD *)v2 + 15) = 0u;
    *((_OWORD *)v2 + 12) = 0u;
    *((_OWORD *)v2 + 13) = 0u;
    *((_OWORD *)v2 + 10) = 0u;
    *((_OWORD *)v2 + 11) = 0u;
    *((_OWORD *)v2 + 8) = 0u;
    *((_OWORD *)v2 + 9) = 0u;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + 7) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *(_OWORD *)v2 = 0u;
    *((_OWORD *)v2 + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(v2, v3);
  }
}

void WebCore::RenderSVGResourcePattern::buildPattern(WebCore::RenderSVGResourcePattern *this, WebCore::GraphicsContext *a2, const WebCore::RenderLayerModelObject *a3, _QWORD *a4)
{
  uint64_t v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  int i;
  uint64_t v22;
  uint64_t v23;
  WTF::StringImpl *v24;
  uint64_t v25;
  char *v27;
  uint64_t v28;
  WTF::String *v29;
  __n128 v30;
  uint64_t v31;
  double v32;
  double v33;
  float v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  WTF::StringImpl *v38;
  const WebCore::TreeScope *v39;
  uint64_t v40;
  BOOL v41;
  WTF *v42;
  WTF::StringImpl *v43;
  WTF::StringImpl *v44;
  WTF::StringImpl *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  unint64_t v54;
  __int16 v55;
  int v56;
  __n128 v57;
  __n128 v58;
  unsigned int v59;
  unsigned int v60;
  unint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  float v65;
  float v66;
  uint64_t v67;
  unsigned int v68;
  float v69;
  float v70;
  float v71;
  float v72;
  unsigned int v73;
  unint64_t v74;
  uint64_t v75;
  float v76;
  int v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  uint64_t v83;
  int v84;
  int v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unsigned int v89;
  int j;
  uint64_t v91;
  void *v93;
  WTF *v94;
  float v95;
  float v96;
  float v97;
  int v98;
  float v99;
  int v100;
  float v101;
  int v102;
  float v103;
  int v104;
  float v105;
  float v106;
  float v107;
  float v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t k;
  uint64_t v113;
  int v114;
  WTF *v115;
  WTF *v116;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  BOOL v121;
  int v122;
  int v123;
  uint64_t v124;
  uint64_t v126;
  uint64_t v127;
  BOOL v128;
  int v129;
  double v130;
  double v131;
  double v132;
  double v133;
  float64x2_t v134;
  double v135;
  float64x2_t v136;
  double v137;
  double v138;
  double v139;
  WTF *v140;
  void *v141;
  WTF *v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unsigned int v150;
  int v151;
  unsigned int v152;
  uint64_t v153;
  double *v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  unint64_t v160;
  unsigned int v161;
  uint64_t v162;
  int v164;
  uint64_t v165;
  int v166;
  unint64_t v167;
  unint64_t v168;
  unint64_t v169;
  unsigned int v170;
  int m;
  unsigned int v172;
  uint64_t v173;
  __n128 *v174;
  uint64_t v175;
  int v176;
  int v177;
  __n128 v178;
  int v179;
  __n128 v180;
  __n128 v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  BOOL v188;
  int v189;
  void *v190;
  WTF *v191;
  WTF *v192;
  uint64_t v193;
  uint64_t v194;
  WTF *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  WTF *v199;
  WTF::StringImpl *v200;
  long double v201;
  long double v202;
  long double v203;
  WTF::StringImpl *v204[2];
  float64x2_t v205;
  __n128 v206;
  WTF *v207;
  unint64_t v208;
  float v209[3];
  char v210;
  WTF *v211;
  __n128 v212[7];
  uint64_t v213;
  uint64_t v214;

  v214 = *MEMORY[0x1E0C80C00];
  v15 = *((_QWORD *)a2 + 46);
  if (v15)
  {
    v16 = *(_DWORD *)(v15 - 8);
    v17 = ((unint64_t)a4 + ~((_QWORD)a4 << 32)) ^ (((unint64_t)a4 + ~((_QWORD)a4 << 32)) >> 22);
    v18 = 9 * ((v17 + ~(v17 << 13)) ^ ((v17 + ~(v17 << 13)) >> 8));
    v19 = (v18 ^ (v18 >> 15)) + ~((v18 ^ (v18 >> 15)) << 27);
    v20 = v16 & ((v19 >> 31) ^ v19);
    for (i = 1; ; ++i)
    {
      v22 = v20;
      v23 = *(_QWORD *)(v15 + 16 * v20);
      if (v23 != -1)
      {
        if (!v23)
          goto LABEL_10;
        if (*(_QWORD **)(v23 + 8) == a4)
          break;
      }
      v20 = (v22 + i) & v16;
    }
    v24 = *(WTF::StringImpl **)(v15 + 16 * v22 + 8);
    if (v24)
    {
      v25 = *((_QWORD *)v24 + 1);
      if (__ldaxr((unsigned __int8 *)v25))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v25))
      {
        goto LABEL_77;
      }
      MEMORY[0x19AEA534C](v25);
LABEL_77:
      ++*(_QWORD *)(v25 + 8);
      v53 = __ldxr((unsigned __int8 *)v25);
      if (v53 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v25))
          goto LABEL_82;
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v25);
LABEL_82:
      v207 = v24;
      goto LABEL_261;
    }
  }
LABEL_10:
  v207 = 0;
  if (*((_BYTE *)a2 + 360))
    goto LABEL_101;
  v213 = 0;
  memset(v212, 0, sizeof(v212));
  v204[0] = 0;
  WebCore::SVGLengthValue::SVGLengthValue((uint64_t)v212, 2, (uint64_t *)v204);
  v204[0] = 0;
  WebCore::SVGLengthValue::SVGLengthValue((uint64_t)&v212[0].n128_i64[1], 2, (uint64_t *)v204);
  v204[0] = 0;
  WebCore::SVGLengthValue::SVGLengthValue((uint64_t)&v212[1], 2, (uint64_t *)v204);
  v204[0] = 0;
  WebCore::SVGLengthValue::SVGLengthValue((uint64_t)&v212[1].n128_i64[1], 2, (uint64_t *)v204);
  v212[3].n128_u32[0] = 16908550;
  memset(&v212[5].n128_i8[8], 0, 24);
  *(__n128 *)((char *)&v212[4] + 8) = (__n128)xmmword_1969FDFE0;
  v212[2] = 0uLL;
  *(__n128 *)((char *)&v212[3] + 8) = (__n128)constinit_9;
  LOWORD(v213) = v213 & 0xFC00;
  v4 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
  if ((*(_BYTE *)(v4 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19651AEC4);
  }
  if (*(_QWORD *)(*(_QWORD *)(v4 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::patternTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19651AEE4);
  }
  *(_DWORD *)(v4 + 24) += 2;
  WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)v4);
  do
  {
    v31 = v4;
    if ((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_83;
    if ((*(_BYTE *)((*(_QWORD *)(v4 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      v27 = "/AppleInternal/Library/BuildRoots/a9786a24-60ad-11ef-bad1-56363ce8160b/Applications/Xcode.app/Contents/Devel"
            "oper/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/wtf/TypeCasts.h";
      v64 = 105;
      __break(0xC471u);
      goto LABEL_327;
    }
    WebCore::SVGPatternElement::collectPatternAttributes(v4, v212, v28, v29, v30);
    v35 = *(_QWORD *)(v4 + 216);
    v36 = *(_QWORD *)(v35 + 24);
    if (!v36 || !*(_DWORD *)(v36 - 12))
      goto LABEL_17;
    v46 = *(unsigned int *)(v36 - 4);
    if ((_DWORD)v46)
    {
      v47 = 8 * v46;
      v48 = *(uint64_t **)(v35 + 24);
      while ((unint64_t)(*v48 + 1) <= 1)
      {
        ++v48;
        v47 -= 8;
        if (!v47)
          goto LABEL_17;
      }
    }
    else
    {
      v48 = *(uint64_t **)(v35 + 24);
    }
    v51 = (uint64_t *)(v36 + 8 * v46);
    if (v48 == v51)
      goto LABEL_17;
    v52 = *v48;
LABEL_69:
    if (!*(_QWORD *)(v52 + 8))
    {
      while (++v48 != v51)
      {
        v52 = *v48;
        if ((unint64_t)(*v48 + 1) > 1)
        {
          if (v48 != v51)
            goto LABEL_69;
          break;
        }
      }
LABEL_17:
      v37 = v35 + 40;
      goto LABEL_18;
    }
    v37 = v35 + 48;
LABEL_18:
    v38 = *(WTF::StringImpl **)(*(_QWORD *)v37 + 32);
    if (v38)
      *(_DWORD *)v38 += 2;
    v200 = v38;
    v39 = *(const WebCore::TreeScope **)(v4 + 40);
    v40 = *(_QWORD *)v39;
    if (*(_QWORD *)v39)
      v41 = (*(_WORD *)(*(_QWORD *)v39 + 28) & 0x80) == 0;
    else
      v41 = 1;
    if (!v41 && !*(_BYTE *)(v40 + 193))
    {
      v49 = *(_QWORD *)(v40 + 200);
      if (v49)
      {
        v50 = *(_QWORD *)(v49 + 8);
        if (v50)
        {
          if (*(_WORD *)(*(_QWORD *)(v50 + 96) + 10) == 242)
            v39 = (const WebCore::TreeScope *)*((_QWORD *)v39 + 2);
        }
      }
    }
    v211 = 0;
    WebCore::SVGURIReference::targetElementFromIRIString((WTF::StringImpl *)&v200, v39, &v211, (uint64_t *)v204, v32, v33, v34);
    v42 = v211;
    v211 = 0;
    if (v42)
    {
      if (*((_DWORD *)v42 + 6) == 2)
      {
        if ((*((_WORD *)v42 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v42, v27);
      }
      else
      {
        *((_DWORD *)v42 + 6) -= 2;
      }
    }
    v43 = v200;
    v200 = 0;
    if (v43)
    {
      if (*(_DWORD *)v43 == 2)
        WTF::StringImpl::destroy(v43, (WTF::StringImpl *)v27);
      else
        *(_DWORD *)v43 -= 2;
    }
    v4 = (uint64_t)v204[0];
    if (v204[0])
    {
      if ((*((_WORD *)v204[0] + 14) & 0x20) != 0
        && *(_QWORD *)(*((_QWORD *)v204[0] + 12) + 24) == *(_QWORD *)(WebCore::SVGNames::patternTag + 24))
      {
        *((_DWORD *)v204[0] + 6) += 2;
      }
      else
      {
        v4 = 0;
      }
    }
    if (*(_DWORD *)(v31 + 24) == 2)
    {
      if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v31, v27);
    }
    else
    {
      *(_DWORD *)(v31 + 24) -= 2;
    }
    v44 = v204[1];
    v204[1] = 0;
    if (v44)
    {
      if (*(_DWORD *)v44 == 2)
        WTF::StringImpl::destroy(v44, (WTF::StringImpl *)v27);
      else
        *(_DWORD *)v44 -= 2;
    }
    v45 = v204[0];
    v204[0] = 0;
    if (v45)
    {
      if (*((_DWORD *)v45 + 6) == 2)
      {
        if ((*((_WORD *)v45 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v45, v27);
      }
      else
      {
        *((_DWORD *)v45 + 6) -= 2;
      }
    }
  }
  while (v4);
  v31 = 0;
LABEL_83:
  v54 = v212[6].n128_u64[1];
  if (v212[6].n128_u64[1])
  {
    if (*(_QWORD *)(v212[6].n128_u64[1] + 8))
    {
      v55 = v213;
      if ((v213 & 0x10) == 0
        || (v30.n128_u32[0] = v212[2].n128_u32[2], v212[2].n128_f32[2] > 0.0)
        && (v30.n128_u32[0] = v212[2].n128_u32[3], v212[2].n128_f32[3] > 0.0))
      {
        v56 = *((unsigned __int8 *)a2 + 360);
        v57 = v212[5];
        *((__n128 *)a2 + 19) = v212[4];
        *((__n128 *)a2 + 20) = v57;
        *((_QWORD *)a2 + 42) = v212[6].n128_u64[0];
        v58 = v212[1];
        *((__n128 *)a2 + 15) = v212[0];
        *((__n128 *)a2 + 16) = v58;
        v30 = v212[3];
        *((__n128 *)a2 + 17) = v212[2];
        *((__n128 *)a2 + 18) = v30;
        v212[6].n128_u64[1] = 0;
        if (v56)
        {
          v4 = *((_QWORD *)a2 + 43);
          *((_QWORD *)a2 + 43) = v54;
          if (v4)
          {
            do
            {
              v59 = __ldaxr((unsigned int *)v4);
              v60 = v59 - 1;
            }
            while (__stlxr(v60, (unsigned int *)v4));
            if (!v60)
            {
              atomic_store(1u, (unsigned int *)v4);
              v198 = *(unsigned int *)(v4 + 28);
              if ((_DWORD)v198)
                WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v4 + 16), (WTF::StringImpl *)(*(_QWORD *)(v4 + 16) + 32 * v198));
              v199 = *(WTF **)(v4 + 16);
              if (v199)
              {
                *(_QWORD *)(v4 + 16) = 0;
                *(_DWORD *)(v4 + 24) = 0;
                WTF::fastFree(v199, v27);
              }
              WTF::fastFree((WTF *)v4, v27);
            }
          }
          *((_WORD *)a2 + 176) = v213;
        }
        else
        {
          *((_QWORD *)a2 + 43) = v54;
          *((_WORD *)a2 + 176) = v55;
          *((_BYTE *)a2 + 360) = 1;
        }
      }
    }
  }
  if (v31)
  {
    if (*(_DWORD *)(v31 + 24) == 2)
    {
      if ((*(_WORD *)(v31 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v31, v27);
    }
    else
    {
      *(_DWORD *)(v31 + 24) -= 2;
    }
  }
  v61 = v212[6].n128_u64[1];
  v212[6].n128_u64[1] = 0;
  if (v61)
  {
    do
    {
      v62 = __ldaxr((unsigned int *)v61);
      v63 = v62 - 1;
    }
    while (__stlxr(v63, (unsigned int *)v61));
    if (!v63)
    {
      atomic_store(1u, (unsigned int *)v61);
      v194 = *(unsigned int *)(v61 + 28);
      if ((_DWORD)v194)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*(WTF::StringImpl **)(v61 + 16), (WTF::StringImpl *)(*(_QWORD *)(v61 + 16) + 32 * v194));
      v195 = *(WTF **)(v61 + 16);
      if (v195)
      {
        *(_QWORD *)(v61 + 16) = 0;
        *(_DWORD *)(v61 + 24) = 0;
        WTF::fastFree(v195, v27);
      }
      WTF::fastFree((WTF *)v61, v27);
    }
  }
  if (!*((_BYTE *)a2 + 360))
    goto LABEL_228;
LABEL_101:
  v64 = (*(uint64_t (**)(_QWORD *))(*a4 + 232))(a4);
  if (!*((_BYTE *)a2 + 360))
    goto LABEL_327;
  if (*((_BYTE *)a2 + 290) == 2 && (v65 <= 0.0 || v66 <= 0.0))
    goto LABEL_228;
  v205 = (float64x2_t)xmmword_1969FDFE0;
  v206 = (__n128)xmmword_1969FDFF0;
  *(_OWORD *)v204 = constinit_9;
  v67 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 8);
  if ((*(_BYTE *)(v67 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19651AE84);
  }
  if (*(_QWORD *)(*(_QWORD *)(v67 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::patternTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19651AEA4);
  }
  *(_DWORD *)(v67 + 24) += 2;
  *(float *)&v68 = (*(float (**)(_QWORD *))(*a4 + 232))(a4);
  v70 = v69;
  v72 = v71;
  v200 = (WTF::StringImpl *)__PAIR64__(v73, v68);
  v201 = COERCE_DOUBLE(__PAIR64__(LODWORD(v71), LODWORD(v69)));
  v74 = *((_QWORD *)a2 + 30);
  v211 = (WTF *)*((_QWORD *)a2 + 31);
  v212[0].n128_u64[0] = v74;
  v75 = *((_QWORD *)a2 + 32);
  v208 = *((_QWORD *)a2 + 33);
  *(_QWORD *)v209 = v75;
  v30.n128_f32[0] = WebCore::SVGLengthContext::resolveRectangle((WebCore::SVGElement *)v67, *((unsigned __int8 *)a2 + 290), (float *)&v200, (WebCore::SVGLengthValue *)v212, (WebCore::SVGLengthValue *)&v211, (WebCore::SVGLengthValue *)v209, (WebCore::SVGLengthValue *)&v208);
  LODWORD(v7) = v30.n128_u32[0];
  LODWORD(v8) = v77;
  *(float *)&v5 = v76;
  *(float *)&v6 = v78;
  v4 = v78 > 0.0 && v76 > 0.0;
  if ((_DWORD)v4 == 1)
  {
    v30.n128_u32[0] = *((_DWORD *)a2 + 68);
    v79 = *((float *)a2 + 69);
    v80 = *((float *)a2 + 70);
    v81 = *((float *)a2 + 71);
    LOWORD(v211) = *((_WORD *)a2 + 144);
    if (v80 == 0.0
      || *(float *)&v6 == 0.0
      || *(float *)&v5 == 0.0
      || v81 == 0.0
      || (WebCore::SVGPreserveAspectRatioValue::getCTM((WebCore::SVGPreserveAspectRatioValue *)&v211, v30.n128_f64[0], v79, v80, v81, *(float *)&v5, *(float *)&v6, (uint64_t)v212), v30 = (__n128)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64((float64x2_t)v212[0], (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64((float64x2_t)v212[1], (float64x2_t)xmmword_1968A14C0))), (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)v30)) & 1) == 0)&& v212[2].n128_f64[0] == 0.0&& (v30.n128_u64[0] = v212[2].n128_u64[1], v212[2].n128_f64[1] == 0.0))
    {
      if (*((_BYTE *)a2 + 291) == 2)
      {
        v30 = (__n128)vmulq_n_f64(*(float64x2_t *)v204, v70);
        *(__n128 *)v204 = v30;
        v205 = vmulq_n_f64(v205, v72);
      }
    }
    else
    {
      *(__n128 *)v204 = v212[0];
      v205 = (float64x2_t)v212[1];
      v30 = v212[2];
      v206 = v212[2];
    }
  }
  if (*(_DWORD *)(v67 + 24) == 2)
  {
    if ((*(_WORD *)(v67 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v67, v27);
  }
  else
  {
    *(_DWORD *)(v67 + 24) -= 2;
  }
  if ((v4 & 1) == 0)
    goto LABEL_228;
  (*(void (**)(WTF::StringImpl **__return_ptr, const WebCore::RenderLayerModelObject *, _QWORD))(*(_QWORD *)a3 + 672))(&v200, a3, 0);
  *(float *)&v9 = hypot(*(long double *)&v200, v201);
  *(float *)&v10 = hypot(v202, v203);
  v208 = __PAIR64__(LODWORD(v10), LODWORD(v9));
  if (!*((_BYTE *)a2 + 360))
  {
LABEL_327:
    __break(1u);
    WTF::fastFree((WTF *)v64, v27);
    goto LABEL_235;
  }
  v82 = hypot(*((long double *)a2 + 37), *((long double *)a2 + 38));
  v30.n128_f64[0] = hypot(*((long double *)a2 + 39), *((long double *)a2 + 40));
  v30.n128_f32[0] = v30.n128_f64[0];
  v30.n128_f32[0] = *(float *)&v10 * v30.n128_f32[0];
  *(float *)&v208 = *(float *)&v9 * v82;
  HIDWORD(v208) = v30.n128_u32[0];
  v83 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 43) + 8) + 64) & 0xFFFFFFFFFFFFLL;
  if (v83)
  {
    if ((*(_BYTE *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 43) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19651AF5CLL);
    }
    ++*(_DWORD *)((*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 43) + 8) + 64) & 0xFFFFFFFFFFFFLL) + 0x10);
  }
  if (byte_1ECE84A72 == 1)
  {
    v84 = dword_1ECE84AA0;
  }
  else
  {
    v84 = 0;
    *(_QWORD *)&dword_1ECE84AA0 = 0;
    qword_1ECE84A98 = 0;
    byte_1ECE84A72 = 1;
  }
  dword_1ECE84AA0 = v84 + 1;
  v4 = *(_QWORD *)(v83 + 8);
  if (v4)
  {
    if (*(_QWORD *)(v4 + 8) && qword_1ECE84A98)
    {
      v85 = *(_DWORD *)(qword_1ECE84A98 - 8);
      v86 = (~(v4 << 32) + v4) ^ ((unint64_t)(~(v4 << 32) + v4) >> 22);
      v87 = 9 * ((v86 + ~(v86 << 13)) ^ ((v86 + ~(v86 << 13)) >> 8));
      v88 = (v87 ^ (v87 >> 15)) + ~((v87 ^ (v87 >> 15)) << 27);
      v89 = v85 & ((v88 >> 31) ^ v88);
      for (j = 1; ; ++j)
      {
        v91 = *(_QWORD *)(qword_1ECE84A98 + 8 * v89);
        if (!v91)
          break;
        if (v91 != -1 && v91 == v4)
        {
          v115 = 0;
          goto LABEL_188;
        }
        v89 = (v89 + j) & v85;
      }
    }
    goto LABEL_136;
  }
  v4 = WTF::fastCompactMalloc((WTF *)0x10);
  *(_DWORD *)v4 = 1;
  *(_QWORD *)(v4 + 8) = v83;
  v94 = *(WTF **)(v83 + 8);
  *(_QWORD *)(v83 + 8) = v4;
  if (!v94)
    goto LABEL_136;
  if (*(_DWORD *)v94 != 1)
  {
    --*(_DWORD *)v94;
    goto LABEL_136;
  }
  WTF::fastFree(v94, v93);
  v4 = *(_QWORD *)(v83 + 8);
  if (v4)
LABEL_136:
    ++*(_DWORD *)v4;
  WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::add<WebCore::RenderElement>((uint64_t)&qword_1ECE84A98, (_QWORD *)v83, (uint64_t)v212);
  v95 = *(float *)&v5 * *(float *)&v208;
  v96 = *(float *)&v6 * *((float *)&v208 + 1);
  v97 = ceilf(*(float *)&v5 * *(float *)&v208);
  if (v97 >= 2147500000.0)
  {
    v98 = 0x7FFFFFFF;
  }
  else if (v97 <= -2147500000.0)
  {
    v98 = 0x80000000;
  }
  else
  {
    v98 = (int)v97;
  }
  v99 = ceilf(v96);
  if (v99 >= 2147500000.0)
  {
    v100 = 0x7FFFFFFF;
  }
  else if (v99 <= -2147500000.0)
  {
    v100 = 0x80000000;
  }
  else
  {
    v100 = (int)v99;
  }
  v101 = roundf(v95);
  if (v101 >= 2147500000.0)
  {
    v102 = 0x7FFFFFFF;
  }
  else if (v101 <= -2147500000.0)
  {
    v102 = 0x80000000;
  }
  else
  {
    v102 = (int)v101;
  }
  v103 = roundf(v96);
  if (v103 >= 2147500000.0)
  {
    v104 = 0x7FFFFFFF;
  }
  else if (v103 <= -2147500000.0)
  {
    v104 = 0x80000000;
  }
  else
  {
    v104 = (int)v103;
  }
  v105 = floorf(v95);
  v106 = 2147500000.0;
  if (v105 < 2147500000.0)
  {
    v106 = -2147500000.0;
    if (v105 > -2147500000.0)
      v106 = (float)(int)v105;
  }
  v107 = floorf(v96);
  v108 = 2147500000.0;
  if (v107 < 2147500000.0)
  {
    v108 = -2147500000.0;
    if (v107 > -2147500000.0)
      v108 = (float)(int)v107;
  }
  v209[0] = *(float *)&v5 - (float)((float)((float)(v95 - v106) * (float)(v98 - v102)) / *(float *)&v208);
  v209[1] = *(float *)&v6 - (float)((float)((float)(v96 - v108) * (float)(v100 - v104)) / *((float *)&v208 + 1));
  v109 = atomic_load(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag);
  if (v109 != -1)
  {
    v212[0].n128_u64[0] = (unint64_t)&v210;
    v211 = (WTF *)v212;
    std::__call_once(&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::onceFlag, &v211, (void (__cdecl *)(void *))std::__call_once_proxy[abi:sn180100]<std::tuple<WebCore::DestinationColorSpace const& WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::{lambda(void)#1} &&>>);
  }
  WebCore::GraphicsContext::createScaledImageBuffer((uint64_t)a3, v209, (float *)&v208, (uint64_t)&WebCore::knownColorSpace<&WebCore::sRGBColorSpaceRef>(void)::colorSpace, 0, 0, (uint64_t *)&v211);
  v64 = (uint64_t)v211;
  if (v211)
  {
    a3 = (const WebCore::RenderLayerModelObject *)(*(uint64_t (**)(WTF *))(*(_QWORD *)v211 + 16))(v211);
    (*(void (**)(const WebCore::RenderLayerModelObject *, uint64_t))(*(_QWORD *)a3 + 96))(a3, 1);
    v110 = *(_QWORD *)(v83 + 144);
    if (v110)
      ++*(_DWORD *)(v110 + 8);
    v111 = *(_QWORD *)(v110 + 24);
    *(_QWORD *)(v110 + 24) = v111 | 0x400000000;
    (*(void (**)(const WebCore::RenderLayerModelObject *, WTF::StringImpl **))(*(_QWORD *)a3 + 656))(a3, v204);
    for (k = *(_QWORD *)(v110 + 40); k; k = *(_QWORD *)(k + 40))
    {
      v113 = *(_QWORD *)(k + 32);
      if ((*(_BYTE *)(v113 + 45) & 1) != 0 && *(_BYTE *)(v113 + 46) == 88)
        break;
    }
    v212[0] = (__n128)k;
    v212[1] = (__n128)xmmword_1969FCA90;
    v212[3].n128_u64[1] = 0;
    memset(&v212[2], 0, 22);
    WebCore::RenderLayer::paintLayer(v110, a3, (uint64_t)v212, ((unint64_t)*(unsigned int *)(*(_QWORD *)(v110 + 32) + 20) >> 6) & 0x400 ^ 0x404);
    *(_QWORD *)(v110 + 24) = *(_QWORD *)(v110 + 24) & 0xFFFFFFFBFFFFFFFFLL | (((v111 >> 34) & 1) << 34);
    v114 = *(_DWORD *)(v110 + 8);
    if (!v114)
    {
      __break(0xC471u);
      JUMPOUT(0x19651AF7CLL);
    }
    *(_DWORD *)(v110 + 8) = v114 - 1;
    v115 = v211;
    v211 = 0;
    v64 = (*(uint64_t (**)(const WebCore::RenderLayerModelObject *, uint64_t))(*(_QWORD *)a3 + 104))(a3, 1);
    v116 = v211;
    v211 = 0;
    if (v116)
    {
      a3 = (const WebCore::RenderLayerModelObject *)*((_QWORD *)v116 + 1);
      if (__ldaxr((unsigned __int8 *)a3))
      {
        __clrex();
        goto LABEL_170;
      }
      if (__stxr(1u, (unsigned __int8 *)a3))
LABEL_170:
        v64 = MEMORY[0x19AEA534C](a3);
      v118 = *((_QWORD *)a3 + 1);
      v119 = v118 - 1;
      *((_QWORD *)a3 + 1) = v118 - 1;
      if (v118 == 1)
      {
        v197 = *((_QWORD *)a3 + 2);
        v120 = *((_QWORD *)a3 + 3);
        *((_QWORD *)a3 + 3) = 0;
        v121 = v197 != 0;
      }
      else
      {
        v120 = 0;
        v121 = 1;
      }
      v122 = __ldxr((unsigned __int8 *)a3);
      if (v122 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)a3))
          goto LABEL_178;
      }
      else
      {
        __clrex();
      }
      v64 = WTF::Lock::unlockSlow(a3);
LABEL_178:
      if (!v119)
      {
        if (v120)
          v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v120 + 8))(v120);
        if (!v121)
          v64 = WTF::fastFree(a3, v27);
      }
    }
  }
  else
  {
    v115 = 0;
  }
  if (v4)
  {
    v27 = *(char **)(v4 + 8);
    if (v27)
      v64 = WTF::WeakHashSet<WebCore::RenderElement,WTF::SingleThreadWeakPtrImpl,(WTF::EnableWeakPtrThreadingAssertions)1>::remove<WebCore::RenderElement>((uint64_t)&qword_1ECE84A98, v27);
    if (*(_DWORD *)v4 == 1)
      v64 = WTF::fastFree((WTF *)v4, v27);
    else
      --*(_DWORD *)v4;
  }
LABEL_188:
  if (v83)
  {
    v123 = *(_DWORD *)(v83 + 16);
    if (!v123)
    {
      __break(0xC471u);
      JUMPOUT(0x19651AF28);
    }
    *(_DWORD *)(v83 + 16) = v123 - 1;
  }
  v124 = (uint64_t)v207;
  v207 = v115;
  if (!v124)
    goto LABEL_209;
  a3 = *(const WebCore::RenderLayerModelObject **)(v124 + 8);
  if (__ldaxr((unsigned __int8 *)a3))
  {
    __clrex();
    goto LABEL_195;
  }
  if (__stxr(1u, (unsigned __int8 *)a3))
LABEL_195:
    v64 = MEMORY[0x19AEA534C](a3);
  v126 = *((_QWORD *)a3 + 1);
  v4 = v126 - 1;
  *((_QWORD *)a3 + 1) = v126 - 1;
  if (v126 == 1)
  {
    v196 = *((_QWORD *)a3 + 2);
    v127 = *((_QWORD *)a3 + 3);
    *((_QWORD *)a3 + 3) = 0;
    v128 = v196 != 0;
  }
  else
  {
    v127 = 0;
    v128 = 1;
  }
  v129 = __ldxr((unsigned __int8 *)a3);
  if (v129 != 1)
  {
    __clrex();
LABEL_203:
    v64 = WTF::Lock::unlockSlow(a3);
    if (!v4)
      goto LABEL_204;
    goto LABEL_208;
  }
  if (__stlxr(0, (unsigned __int8 *)a3))
    goto LABEL_203;
  if (!v4)
  {
LABEL_204:
    if (v127)
      v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v127 + 8))(v127);
    if (!v128)
      v64 = WTF::fastFree(a3, v27);
  }
LABEL_208:
  v115 = v207;
LABEL_209:
  if (!v115)
  {
LABEL_228:
    *(_QWORD *)this = 0;
    goto LABEL_293;
  }
  if (!*((_BYTE *)a2 + 360))
    goto LABEL_327;
  v130 = *(float *)&v8;
  v8 = *(float *)&v7 + 0.0;
  v7 = v130 + 0.0;
  v10 = (float)(*(float *)&v5 / *((float *)v115 + 4));
  v5 = (float)(*(float *)&v6 / *((float *)v115 + 5));
  v6 = v10 * 0.0;
  v9 = v5 * 0.0;
  v132 = *((double *)a2 + 37);
  v131 = *((double *)a2 + 38);
  v133 = *((double *)a2 + 39);
  v134 = *((float64x2_t *)a2 + 20);
  v135 = *((double *)a2 + 42);
  v136.f64[0] = v132;
  v136.f64[1] = v133;
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v136, (float64x2_t)xmmword_1968A14B0), (int32x4_t)vceqq_f64(v134, (float64x2_t)xmmword_1968A14B0))))) & 1) != 0|| v131 != 0.0|| v135 != 0.0)
  {
    v137 = v6 * v133;
    v6 = v6 * v134.f64[0] + v10 * v131;
    v10 = v137 + v10 * v132;
    v138 = v133 * v5;
    v5 = v5 * v134.f64[0] + v9 * v131;
    v9 = v138 + v9 * v132;
    v139 = v7 * v134.f64[0] + v8 * v131;
    v8 = v134.f64[1] + v7 * v133 + v8 * v132;
    v7 = v139 + v135;
  }
  v140 = (WTF *)a4[1];
  if (!v140)
  {
    v140 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v140 = 1;
    *((_QWORD *)v140 + 1) = a4;
    v191 = (WTF *)a4[1];
    a4[1] = v140;
    if (v191)
    {
      if (*(_DWORD *)v191 == 1)
      {
        WTF::fastFree(v191, v190);
        v140 = (WTF *)a4[1];
      }
      else
      {
        --*(_DWORD *)v191;
      }
    }
  }
  ++*(_DWORD *)v140;
  v211 = v140;
  WTF::HashMap<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::HashTableTraits>::inlineSet<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>&>((WTF *)v212, (uint64_t *)a2 + 46, (uint64_t *)&v211, (uint64_t *)&v207);
  if (v211)
  {
    if (*(_DWORD *)v211 == 1)
      WTF::fastFree(v211, v141);
    else
      --*(_DWORD *)v211;
  }
  a3 = (WebCore::GraphicsContext *)((char *)a2 + 376);
  v142 = (WTF *)a4[1];
  if (!v142)
  {
    v142 = (WTF *)WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v142 = 1;
    *((_QWORD *)v142 + 1) = a4;
    v192 = (WTF *)a4[1];
    a4[1] = v142;
    if (v192)
    {
      if (*(_DWORD *)v192 == 1)
      {
        WTF::fastFree(v192, v141);
        v142 = (WTF *)a4[1];
      }
      else
      {
        --*(_DWORD *)v192;
      }
    }
  }
  ++*(_DWORD *)v142;
  v143 = *(_QWORD *)a3;
  if (*(_QWORD *)a3
    || (WTF::HashTable<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WebCore::AffineTransform>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WebCore::AffineTransform>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WebCore::AffineTransform,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::AffineTransform>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>>::rehash((uint64_t *)a2 + 47, 8u), (v143 = *(_QWORD *)a3) != 0))
  {
    v144 = *(_DWORD *)(v143 - 8);
  }
  else
  {
    v144 = 0;
  }
  v145 = 0;
  v146 = *((_QWORD *)v142 + 1);
  v147 = (~(v146 << 32) + v146) ^ ((unint64_t)(~(v146 << 32) + v146) >> 22);
  v148 = 9 * ((v147 + ~(v147 << 13)) ^ ((v147 + ~(v147 << 13)) >> 8));
  v149 = (v148 ^ (v148 >> 15)) + ~((v148 ^ (v148 >> 15)) << 27);
  v150 = (v149 >> 31) ^ v149;
  v151 = 1;
  while (2)
  {
    v152 = v150 & v144;
    v4 = v143 + 56 * v152;
    v153 = *(_QWORD *)v4;
    if (*(_QWORD *)v4 == -1)
    {
      v145 = v143 + 56 * v152;
LABEL_227:
      v150 = v151 + v152;
      ++v151;
      continue;
    }
    break;
  }
  if (v153)
  {
    if (*(_QWORD *)(v153 + 8) == v146)
    {
      v154 = (double *)(v143 + 56 * v152);
      v154[1] = v10;
      v154[2] = v6;
      v154[3] = v9;
      v154[4] = v5;
      v154[5] = v8;
      v154[6] = v7;
      if (*(_DWORD *)v142 == 1)
        WTF::fastFree(v142, v141);
      else
        --*(_DWORD *)v142;
      goto LABEL_260;
    }
    goto LABEL_227;
  }
  if (v145)
  {
    *(_QWORD *)v145 = 0;
    *(_OWORD *)(v145 + 8) = constinit_9;
    *(_OWORD *)(v145 + 24) = xmmword_1969FDFE0;
    *(_OWORD *)(v145 + 40) = xmmword_1969FDFF0;
    --*(_DWORD *)(*(_QWORD *)a3 - 16);
    *(_QWORD *)v145 = v142;
    goto LABEL_236;
  }
  *(_QWORD *)v4 = v142;
LABEL_235:
  v145 = v4;
LABEL_236:
  *(double *)(v145 + 8) = v10;
  *(double *)(v145 + 16) = v6;
  *(double *)(v145 + 24) = v9;
  *(double *)(v145 + 32) = v5;
  *(double *)(v145 + 40) = v8;
  *(double *)(v145 + 48) = v7;
  v155 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
    v156 = *(_DWORD *)(v155 - 12) + 1;
  else
    v156 = 1;
  *(_DWORD *)(v155 - 12) = v156;
  v157 = *(_QWORD *)a3;
  if (*(_QWORD *)a3)
    v158 = *(_DWORD *)(v157 - 12);
  else
    v158 = 0;
  v159 = (*(_DWORD *)(v157 - 16) + v158);
  v160 = *(unsigned int *)(v157 - 4);
  if (v160 > 0x400)
  {
    if (v160 <= 2 * v159)
    {
LABEL_245:
      v161 = (_DWORD)v160 << (6 * *(_DWORD *)(v157 - 12) >= (2 * v160));
      goto LABEL_259;
    }
  }
  else if (3 * v160 <= 4 * v159)
  {
    if ((_DWORD)v160)
      goto LABEL_245;
    v161 = 8;
LABEL_259:
    WTF::HashTable<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WebCore::AffineTransform>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WebCore::AffineTransform>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WebCore::AffineTransform,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::AffineTransform>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>>::rehash((uint64_t *)a3, v161);
  }
LABEL_260:
  v24 = v207;
LABEL_261:
  v162 = *((_QWORD *)v24 + 1);
  if (__ldaxr((unsigned __int8 *)v162))
  {
    __clrex();
    goto LABEL_264;
  }
  if (__stxr(1u, (unsigned __int8 *)v162))
LABEL_264:
    MEMORY[0x19AEA534C](v162);
  ++*(_QWORD *)(v162 + 8);
  v164 = __ldxr((unsigned __int8 *)v162);
  if (v164 != 1)
  {
    __clrex();
    goto LABEL_269;
  }
  if (__stlxr(0, (unsigned __int8 *)v162))
LABEL_269:
    WTF::Lock::unlockSlow((WTF::Lock *)v162);
  v200 = v24;
  LODWORD(v201) = 1;
  LOBYTE(v204[0]) = 0;
  LODWORD(v204[1]) = -1;
  _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1ELm1EEE10__dispatchB8sn180100IOZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS8_12RawPtrTraitsISB_EENS8_21DefaultRefDerefTraitsISB_EEEENS9_INSA_11ImageBufferENSC_ISH_EENSE_ISH_EEEENS8_23ObjectIdentifierGenericINSA_31RenderingResourceIdentifierTypeENS8_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISQ_LNS0_6_TraitE1EEEEEvRSR_OT_EUlRSX_OT0_E_JRNS0_6__baseILSU_1EJSG_SK_SP_EEEOS15_EEEDcSX_DpT0_((uint64_t)v212, v204, (uint64_t *)&v200);
  LODWORD(v204[1]) = 1;
  LOBYTE(v205.f64[0]) = 0;
  v206.n128_u8[0] = 0;
  v165 = *((_QWORD *)a2 + 47);
  if (v165)
  {
    v166 = *(_DWORD *)(v165 - 8);
    v167 = ((unint64_t)a4 + ~((_QWORD)a4 << 32)) ^ (((unint64_t)a4 + ~((_QWORD)a4 << 32)) >> 22);
    v168 = 9 * ((v167 + ~(v167 << 13)) ^ ((v167 + ~(v167 << 13)) >> 8));
    v169 = (v168 ^ (v168 >> 15)) + ~((v168 ^ (v168 >> 15)) << 27);
    v170 = v166 & ((v169 >> 31) ^ v169);
    for (m = 1; ; ++m)
    {
      v172 = v170;
      v173 = *(_QWORD *)(v165 + 56 * v170);
      if (v173 != -1)
      {
        if (!v173)
          goto LABEL_276;
        if (*(_QWORD **)(v173 + 8) == a4)
          break;
      }
      v170 = (v172 + m) & v166;
    }
    v174 = (__n128 *)(v165 + 56 * v172 + 8);
  }
  else
  {
LABEL_276:
    v174 = (__n128 *)&constinit_9;
  }
  *(__n128 *)((char *)v212 + 6) = *v174;
  *(__n128 *)((char *)&v212[1] + 6) = v174[1];
  *(__n128 *)((char *)&v212[2] + 6) = v174[2];
  v175 = WTF::fastMalloc((WTF *)0x68);
  *(_BYTE *)(v175 + 8) = 0;
  *(_DWORD *)v175 = 1;
  *(_DWORD *)(v175 + 16) = -1;
  v176 = (int)v204[1];
  if (LODWORD(v204[1]) != -1)
  {
    ((void (*)(WTF **, uint64_t, WTF::StringImpl **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JSU_ST_EEEDcmSW_DpOT0____fdiagonal[LODWORD(v204[1])])(&v211, v175 + 8, v204);
    *(_DWORD *)(v175 + 16) = v176;
  }
  *(_BYTE *)(v175 + 24) = 0;
  v27 = (char *)(v175 + 24);
  *(_BYTE *)(v175 + 40) = 0;
  if (!v206.n128_u8[0])
  {
    *(_WORD *)(v175 + 48) = 257;
    v180 = v212[1];
    *(__n128 *)(v175 + 50) = v212[0];
    *(__n128 *)(v175 + 66) = v180;
    v30 = v212[2];
    *(__n128 *)(v175 + 82) = v212[2];
    *(_QWORD *)(v175 + 96) = *(unint64_t *)((char *)&v212[2].n128_u64[1] + 6);
    *(_QWORD *)this = v175;
    goto LABEL_289;
  }
  *(_DWORD *)(v175 + 32) = -1;
  v177 = LODWORD(v205.f64[1]);
  if (LODWORD(v205.f64[1]) == -1)
  {
    *(_BYTE *)(v175 + 40) = 1;
    *(_WORD *)(v175 + 48) = 257;
    v181 = v212[1];
    *(__n128 *)(v175 + 50) = v212[0];
    *(__n128 *)(v175 + 66) = v181;
    v30 = v212[2];
    *(__n128 *)(v175 + 82) = v212[2];
    *(_QWORD *)(v175 + 96) = *(unint64_t *)((char *)&v212[2].n128_u64[1] + 6);
    *(_QWORD *)this = v175;
  }
  else
  {
    ((void (*)(WTF **))__const__ZNSt3__116__variant_detail12__visitation6__base14__visit_alt_atB8sn180100IZNS0_6__ctorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEEE19__generic_constructB8sn180100INS0_18__move_constructorISO_LNS0_6_TraitE1EEEEEvRSP_OT_EUlRSV_OT0_E_JSU_ST_EEEDcmSW_DpOT0____fdiagonal[LODWORD(v205.f64[1])])(&v211);
    v178 = v212[1];
    *(__n128 *)(v175 + 50) = v212[0];
    *(_DWORD *)(v175 + 32) = v177;
    v179 = v206.n128_u8[0];
    *(_BYTE *)(v175 + 40) = 1;
    *(_WORD *)(v175 + 48) = 257;
    *(__n128 *)(v175 + 66) = v178;
    v30 = v212[2];
    *(__n128 *)(v175 + 82) = v212[2];
    *(_QWORD *)(v175 + 96) = *(unint64_t *)((char *)&v212[2].n128_u64[1] + 6);
    *(_QWORD *)this = v175;
    if (!v179)
      goto LABEL_289;
  }
  if (LODWORD(v205.f64[1]) != -1)
    ((void (*)(__n128 *, float64x2_t *))off_1E3447970[LODWORD(v205.f64[1])])(v212, &v205);
  LODWORD(v205.f64[1]) = -1;
LABEL_289:
  if (LODWORD(v204[1]) != -1)
    ((void (*)(__n128 *, WTF::StringImpl **))off_1E3447970[LODWORD(v204[1])])(v212, v204);
  LODWORD(v204[1]) = -1;
  if (LODWORD(v201) != -1)
    ((void (*)(__n128 *, WTF::StringImpl **))off_1E3447970[LODWORD(v201)])(v212, &v200);
LABEL_293:
  v182 = (uint64_t)v207;
  v207 = 0;
  if (!v182)
    return;
  v183 = *(_QWORD *)(v182 + 8);
  if (__ldaxr((unsigned __int8 *)v183))
  {
    __clrex();
    goto LABEL_297;
  }
  if (__stxr(1u, (unsigned __int8 *)v183))
LABEL_297:
    MEMORY[0x19AEA534C](v183, v30);
  v185 = *(_QWORD *)(v183 + 8);
  v186 = v185 - 1;
  *(_QWORD *)(v183 + 8) = v185 - 1;
  if (v185 == 1)
  {
    v193 = *(_QWORD *)(v183 + 16);
    v187 = *(_QWORD *)(v183 + 24);
    *(_QWORD *)(v183 + 24) = 0;
    v188 = v193 != 0;
  }
  else
  {
    v187 = 0;
    v188 = 1;
  }
  v189 = __ldxr((unsigned __int8 *)v183);
  if (v189 != 1)
  {
    __clrex();
LABEL_305:
    WTF::Lock::unlockSlow((WTF::Lock *)v183);
    if (!v186)
      goto LABEL_306;
    return;
  }
  if (__stlxr(0, (unsigned __int8 *)v183))
    goto LABEL_305;
  if (!v186)
  {
LABEL_306:
    if (v187)
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v187 + 8))(v187, v30);
    if (!v188)
      WTF::fastFree((WTF *)v183, v27);
  }
}

BOOL WebCore::RenderSVGResourcePattern::prepareFillOperation(WebCore::RenderSVGResourcePattern *this, WebCore::GraphicsContext *a2, const WebCore::RenderLayerModelObject *a3, const WebCore::RenderStyle *a4)
{
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;

  WebCore::RenderSVGResourcePattern::buildPattern((WebCore::RenderSVGResourcePattern *)&v14, this, a2, a3);
  v6 = v14;
  if (v14)
  {
    v7 = *((_QWORD *)a4 + 7);
    v8 = *(float *)(*(_QWORD *)(v7 + 16) + 4);
    if (*((float *)a2 + 84) != v8)
    {
      *((float *)a2 + 84) = v8;
      *((_DWORD *)a2 + 46) |= 0x100u;
    }
    (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a2 + 88))(a2, (char *)a2 + 8);
    if ((((*((_BYTE *)a2 + 192) == 0) ^ ((*(_WORD *)(v7 + 4) & 8) >> 3)) & 1) == 0)
    {
      *((_BYTE *)a2 + 192) = (*(_WORD *)(v7 + 4) & 8) >> 3;
      *((_DWORD *)a2 + 46) |= 2u;
    }
    (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a2 + 88))(a2, (char *)a2 + 8);
    ++*(_DWORD *)v6;
    v9 = *((unsigned int *)a2 + 22);
    if ((_DWORD)v9 != -1)
      ((void (*)(char *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v9])(&v15, (char *)a2 + 24);
    *((_QWORD *)a2 + 3) = v6;
    *((_DWORD *)a2 + 22) = 2;
    *((_DWORD *)a2 + 46) |= 1u;
    (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a2 + 88))(a2, (char *)a2 + 8);
    if (*(_DWORD *)v6 == 1)
    {
      if (*(_BYTE *)(v6 + 40))
      {
        v12 = *(unsigned int *)(v6 + 32);
        if ((_DWORD)v12 != -1)
          ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v12])(&v16, v6 + 24);
        *(_DWORD *)(v6 + 32) = -1;
      }
      v13 = *(unsigned int *)(v6 + 16);
      if ((_DWORD)v13 != -1)
        ((void (*)(char *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v13])(&v17, v6 + 8);
      *(_DWORD *)(v6 + 16) = -1;
      WTF::fastFree((WTF *)v6, v10);
    }
    else
    {
      --*(_DWORD *)v6;
    }
  }
  return v6 != 0;
}

BOOL WebCore::RenderSVGResourcePattern::prepareStrokeOperation(WebCore::RenderSVGResourcePattern *this, WebCore::GraphicsContext *a2, const WebCore::RenderLayerModelObject *a3, const WebCore::RenderStyle *a4)
{
  uint64_t v8;
  uint64_t v9;
  float v10;
  const WebCore::RenderElement *v11;
  uint64_t v12;
  void *v13;
  uint64_t v15;
  uint64_t v16;
  WebCore::Node *v17;
  void *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  int i;
  unsigned int v26;
  uint64_t v27;
  double *v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  __int128 v40;
  int v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  WebCore::RenderSVGResourcePattern::buildPattern((WebCore::RenderSVGResourcePattern *)&v45, this, a2, a3);
  v8 = v45;
  if (!v45)
    return v8 != 0;
  v9 = *((_QWORD *)a4 + 7);
  v10 = *(float *)(*(_QWORD *)(v9 + 24) + 4);
  if (*((float *)a2 + 84) != v10)
  {
    *((float *)a2 + 84) = v10;
    *((_DWORD *)a2 + 46) |= 0x100u;
  }
  (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a2 + 88))(a2, (char *)a2 + 8);
  WebCore::SVGRenderSupport::applyStrokeStyleToContext((unsigned int *)a2, a4, a3, v11);
  if ((*(_WORD *)(v9 + 8) & 0x400) != 0
    && (*((_BYTE *)a3 + 52) & 7) == 4
    && (*((_BYTE *)a3 + 53) & 1) == 0
    && (*((_BYTE *)a3 + 53) & 0x10) != 0)
  {
    ++*((_DWORD *)a3 + 4);
    v17 = *(WebCore::Node **)(*((_QWORD *)a3 + 3) + 8);
    if ((*((_WORD *)v17 + 14) & 0x20) != 0)
    {
      if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v17 + 1184))(*(_QWORD *)(*((_QWORD *)a3 + 3) + 8)) & 1) == 0)
      {
        __break(0xC471u);
        JUMPOUT(0x19651B590);
      }
      *((_DWORD *)v17 + 6) += 2;
      (*(void (**)(__int128 *__return_ptr, WebCore::Node *, uint64_t))(*(_QWORD *)v17 + 1320))(&v42, v17, 1);
      if (*((_DWORD *)v17 + 6) == 2)
      {
        if ((*((_WORD *)v17 + 15) & 0x400) == 0)
          WebCore::Node::removedLastRef(v17, v18);
      }
      else
      {
        *((_DWORD *)v17 + 6) -= 2;
      }
      v19 = *((_QWORD *)this + 47);
      if (v19)
      {
        v20 = *(_DWORD *)(v19 - 8);
        v21 = ((unint64_t)a3 + ~((_QWORD)a3 << 32)) ^ (((unint64_t)a3 + ~((_QWORD)a3 << 32)) >> 22);
        v22 = 9 * ((v21 + ~(v21 << 13)) ^ ((v21 + ~(v21 << 13)) >> 8));
        v23 = (v22 ^ (v22 >> 15)) + ~((v22 ^ (v22 >> 15)) << 27);
        v24 = v20 & ((v23 >> 31) ^ v23);
        for (i = 1; ; ++i)
        {
          v26 = v24;
          v27 = *(_QWORD *)(v19 + 56 * v24);
          if (v27 != -1)
          {
            if (!v27)
              goto LABEL_30;
            if (*(const WebCore::RenderLayerModelObject **)(v27 + 8) == a3)
              break;
          }
          v24 = (v26 + i) & v20;
        }
        v28 = (double *)(v19 + 56 * v26 + 8);
      }
      else
      {
LABEL_30:
        v28 = (double *)&constinit_9;
      }
      v29 = v28[1];
      v30 = v28[2];
      v31 = v28[3];
      v32 = v28[4];
      v33 = v28[5];
      v34 = v29 * *(double *)&v43 + *v28 * *(double *)&v42;
      v35 = v29 * *((double *)&v43 + 1) + *v28 * *((double *)&v42 + 1);
      v36 = v31 * *(double *)&v43 + v30 * *(double *)&v42;
      v37 = v31 * *((double *)&v43 + 1) + v30 * *((double *)&v42 + 1);
      v38 = v33 * *(double *)&v43 + v32 * *(double *)&v42 + *(double *)&v44;
      v39 = v33 * *((double *)&v43 + 1) + v32 * *((double *)&v42 + 1) + *((double *)&v44 + 1);
      *(double *)&v42 = v34;
      *((double *)&v42 + 1) = v35;
      *(double *)&v43 = v36;
      *((double *)&v43 + 1) = v37;
      *(double *)&v44 = v38;
      *((double *)&v44 + 1) = v39;
      v40 = v43;
      *(_OWORD *)(v8 + 56) = v42;
      *(_OWORD *)(v8 + 72) = v40;
      *(_OWORD *)(v8 + 88) = v44;
      v41 = *((_DWORD *)a3 + 4);
      if (v41)
      {
        *((_DWORD *)a3 + 4) = v41 - 1;
        goto LABEL_6;
      }
      __break(0xC471u);
    }
    else
    {
      __break(0xC471u);
    }
    JUMPOUT(0x19651B570);
  }
LABEL_6:
  ++*(_DWORD *)v8;
  v12 = *((unsigned int *)a2 + 44);
  if ((_DWORD)v12 != -1)
    ((void (*)(__int128 *, char *))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJNS_9monostateEN7WebCore26SourceBrushLogicalGradientEN3WTF3RefINS7_7PatternENS9_12RawPtrTraitsISB_EENS9_21DefaultRefDerefTraitsISB_EEEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSJ_EEEDcOSK_DpOT0____fmatrix_0[v12])(&v42, (char *)a2 + 112);
  *((_QWORD *)a2 + 14) = v8;
  *((_DWORD *)a2 + 44) = 2;
  *((_DWORD *)a2 + 46) |= 4u;
  (*(void (**)(WebCore::GraphicsContext *, char *))(*(_QWORD *)a2 + 88))(a2, (char *)a2 + 8);
  if (*(_DWORD *)v8 == 1)
  {
    if (*(_BYTE *)(v8 + 40))
    {
      v15 = *(unsigned int *)(v8 + 32);
      if ((_DWORD)v15 != -1)
        ((void (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v15])(&v42, v8 + 24);
      *(_DWORD *)(v8 + 32) = -1;
    }
    v16 = *(unsigned int *)(v8 + 16);
    if ((_DWORD)v16 != -1)
      ((void (*)(__int128 *, uint64_t))__const__ZNSt3__116__variant_detail12__visitation6__base11__visit_altB8sn180100IZNS0_6__dtorINS0_8__traitsIJN3WTF3RefIN7WebCore11NativeImageENS6_12RawPtrTraitsIS9_EENS6_21DefaultRefDerefTraitsIS9_EEEENS7_INS8_11ImageBufferENSA_ISF_EENSC_ISF_EEEENS6_23ObjectIdentifierGenericINS8_31RenderingResourceIdentifierTypeENS6_38ObjectIdentifierThreadSafeAccessTraitsIyEEyEEEEELNS0_6_TraitE1EE9__destroyB8sn180100EvEUlRT_E_JRSQ_EEEDcOSR_DpOT0____fmatrix[v16])(&v42, v8 + 8);
    *(_DWORD *)(v8 + 16) = -1;
    WTF::fastFree((WTF *)v8, v13);
  }
  else
  {
    --*(_DWORD *)v8;
  }
  return v8 != 0;
}

uint64_t *WebCore::RenderSVGResourcePattern::removeReferencingCSSClient(uint64_t *this, const WebCore::RenderElement *a2)
{
  uint64_t *v3;
  void *v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  int i;
  uint64_t **v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;

  if ((*((_BYTE *)a2 + 45) & 0x10) != 0)
  {
    v3 = this;
    this = WTF::HashMap<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::HashTableTraits>::remove<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>(this + 46, a2);
    v5 = v3[47];
    if (v5)
    {
      v6 = v3 + 47;
      v7 = *(_DWORD *)(v5 - 8);
      v8 = ((unint64_t)a2 + ~((_QWORD)a2 << 32)) ^ (((unint64_t)a2 + ~((_QWORD)a2 << 32)) >> 22);
      v9 = 9 * ((v8 + ~(v8 << 13)) ^ ((v8 + ~(v8 << 13)) >> 8));
      v10 = (v9 ^ (v9 >> 15)) + ~((v9 ^ (v9 >> 15)) << 27);
      v11 = v7 & ((v10 >> 31) ^ v10);
      for (i = 1; ; ++i)
      {
        v13 = (uint64_t **)(v5 + 56 * v11);
        v14 = *v13;
        if (*v13 != (uint64_t *)-1)
        {
          if (!v14)
          {
            v15 = *(_DWORD *)(v5 - 4);
            v13 = (uint64_t **)(v5 + 56 * v15);
            goto LABEL_10;
          }
          if ((const WebCore::RenderElement *)v14[1] == a2)
            break;
        }
        v11 = (v11 + i) & v7;
      }
      v15 = *(_DWORD *)(v5 - 4);
LABEL_10:
      if ((uint64_t **)(v5 + 56 * v15) != v13)
      {
        this = *v13;
        *v13 = 0;
        if (this)
        {
          if (*(_DWORD *)this == 1)
            this = (uint64_t *)WTF::fastFree((WTF *)this, v4);
          else
            --*(_DWORD *)this;
        }
        *v13 = (uint64_t *)-1;
        ++*(_DWORD *)(*v6 - 16);
        v16 = *v6;
        if (*v6)
          v17 = *(_DWORD *)(v16 - 12) - 1;
        else
          v17 = -1;
        *(_DWORD *)(v16 - 12) = v17;
        v18 = *v6;
        if (*v6)
        {
          v19 = 6 * *(_DWORD *)(v18 - 12);
          v20 = *(_DWORD *)(v18 - 4);
          if (v19 < v20 && v20 >= 9)
            return (uint64_t *)WTF::HashTable<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WebCore::AffineTransform>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WebCore::AffineTransform>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WebCore::AffineTransform,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::AffineTransform>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>>::rehash(v6, v20 >> 1);
        }
      }
    }
  }
  return this;
}

uint64_t WebCore::RenderSVGResourcePaintServer::prepareFillOperation(WebCore::RenderSVGResourcePaintServer *this, WebCore::GraphicsContext *a2, const WebCore::RenderLayerModelObject *a3, const WebCore::RenderStyle *a4)
{
  return 0;
}

uint64_t WebCore::RenderSVGResourcePaintServer::prepareStrokeOperation(WebCore::RenderSVGResourcePaintServer *this, WebCore::GraphicsContext *a2, const WebCore::RenderLayerModelObject *a3, const WebCore::RenderStyle *a4)
{
  return 0;
}

void WebCore::RenderSVGResourceFilterPrimitive::~RenderSVGResourceFilterPrimitive(WebCore::RenderSVGResourceFilterPrimitive *this, void *a2)
{
  bmalloc::api *v2;
  void *v3;

  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  bmalloc::api::isoDeallocate(v2, v3);
}

const char *WebCore::RenderSVGResourceLinearGradient::renderName(WebCore::RenderSVGResourceLinearGradient *this)
{
  return "RenderSVGResourceLinearGradient";
}

void WebCore::RenderSVGResourceLinearGradient::invalidateGradient(WebCore::RenderSVGResourceLinearGradient *this, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  WTF *v12;
  WTF *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v19;
  void *v20;
  uint64_t v21;

  v3 = *((_QWORD *)this + 30);
  *((_QWORD *)this + 30) = 0;
  if (!v3)
    goto LABEL_18;
  v4 = *(_QWORD *)(v3 + 8);
  if (__ldaxr((unsigned __int8 *)v4))
  {
    __clrex();
  }
  else if (!__stxr(1u, (unsigned __int8 *)v4))
  {
    goto LABEL_6;
  }
  MEMORY[0x19AEA534C](v4);
LABEL_6:
  v6 = *(_QWORD *)(v4 + 8);
  v7 = v6 - 1;
  *(_QWORD *)(v4 + 8) = v6 - 1;
  if (v6 == 1)
  {
    v21 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = 0;
    v9 = v21 != 0;
  }
  else
  {
    v8 = 0;
    v9 = 1;
  }
  v10 = __ldxr((unsigned __int8 *)v4);
  if (v10 != 1)
  {
    __clrex();
LABEL_13:
    WTF::Lock::unlockSlow((WTF::Lock *)v4);
    if (v7)
      goto LABEL_18;
    goto LABEL_14;
  }
  if (__stlxr(0, (unsigned __int8 *)v4))
    goto LABEL_13;
  if (v7)
    goto LABEL_18;
LABEL_14:
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  if (!v9)
    WTF::fastFree((WTF *)v4, a2);
LABEL_18:
  if (*((_BYTE *)this + 392))
  {
    v11 = *((unsigned int *)this + 77);
    v12 = (WTF *)*((_QWORD *)this + 37);
    if ((_DWORD)v11)
    {
      v13 = (WTF *)((char *)v12 + 16 * v11);
      do
      {
        v14 = *((_QWORD *)v12 + 1);
        if ((v14 & 0x8000000000000) != 0)
        {
          v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFLL);
          do
          {
            v16 = __ldaxr(v15);
            v17 = v16 - 1;
          }
          while (__stlxr(v17, v15));
          if (!v17)
          {
            atomic_store(1u, v15);
            WTF::fastFree((WTF *)v15, a2);
          }
        }
        v12 = (WTF *)((char *)v12 + 16);
      }
      while (v12 != v13);
      v12 = (WTF *)*((_QWORD *)this + 37);
    }
    if ((WebCore::RenderSVGResourceLinearGradient *)((char *)this + 312) != v12 && v12 != 0)
    {
      *((_QWORD *)this + 37) = 0;
      *((_DWORD *)this + 76) = 0;
      WTF::fastFree(v12, a2);
    }
    *((_BYTE *)this + 392) = 0;
  }
  v19 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v19 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19651B91CLL);
  }
  *(_DWORD *)(v19 + 24) += 2;
  WebCore::notifyResourceChanged((WebCore *)v19, (WebCore::SVGElement *)a2);
  if (*(_DWORD *)(v19 + 24) == 2)
  {
    if ((*(_WORD *)(v19 + 30) & 0x400) == 0)
      WebCore::Node::removedLastRef((WebCore::Node *)v19, v20);
  }
  else
  {
    *(_DWORD *)(v19 + 24) -= 2;
  }
}

uint64_t WebCore::RenderSVGResourceLinearGradient::gradientUnits(WebCore::RenderSVGResourceLinearGradient *this)
{
  if (*((_BYTE *)this + 392))
    return (*((unsigned __int8 *)this + 352) >> 2) & 3;
  else
    return 0;
}

double WebCore::RenderSVGResourceLinearGradient::gradientTransform@<D0>(WebCore::RenderSVGResourceLinearGradient *this@<X0>, _OWORD *a2@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  if (*((_BYTE *)this + 392))
  {
    v2 = *(_OWORD *)((char *)this + 248);
    v3 = *(_OWORD *)((char *)this + 264);
    v4 = *(_OWORD *)((char *)this + 280);
    *a2 = v2;
    a2[1] = v3;
    a2[2] = v4;
  }
  else
  {
    *a2 = WebCore::identity;
    a2[1] = unk_1969FE010;
    *(_QWORD *)&v2 = 0;
    a2[2] = xmmword_1969FE020;
  }
  return *(double *)&v2;
}

const char *WebCore::RenderSVGResourceMarker::renderName(WebCore::RenderSVGResourceMarker *this)
{
  return "RenderSVGResourceMarker";
}

uint64_t WebCore::RenderSVGResourceMarker::needsHasSVGTransformFlags(WebCore::RenderSVGResourceMarker *this)
{
  return 1;
}

__n128 WebCore::RenderSVGResourceMarker::overridenObjectBoundingBoxWithoutTransformations@<Q0>(__n128 *this@<X0>, __n128 *a2@<X8>)
{
  __n128 result;

  result = this[18];
  *a2 = result;
  a2[1].n128_u8[0] = 1;
  return result;
}

const char *WebCore::RenderSVGResourceMasker::renderName(WebCore::RenderSVGResourceMasker *this)
{
  return "RenderSVGResourceMasker";
}

WebCore::LinearGradientAttributes *WebCore::LinearGradientAttributes::LinearGradientAttributes(WebCore::LinearGradientAttributes *this)
{
  WTF::StringImpl *v2;
  WTF::StringImpl *v3;
  WTF::StringImpl *v5;

  *(_OWORD *)this = constinit_9;
  *((_OWORD *)this + 1) = xmmword_1969FDFE0;
  *((_OWORD *)this + 2) = xmmword_1969FDFF0;
  *((_QWORD *)this + 6) = (char *)this + 64;
  *((_QWORD *)this + 7) = 2;
  *((_BYTE *)this + 96) = 1;
  *((_BYTE *)this + 104) = *((_BYTE *)this + 104) & 0x80 | 9;
  v5 = 0;
  WebCore::SVGLengthValue::SVGLengthValue((uint64_t)this + 108, 2, (uint64_t *)&v5);
  v5 = 0;
  WebCore::SVGLengthValue::SVGLengthValue((uint64_t)this + 116, 2, (uint64_t *)&v5);
  WTF::StringImpl::createWithoutCopyingNonEmpty();
  WebCore::SVGLengthValue::SVGLengthValue((uint64_t)this + 124, 0, (uint64_t *)&v5);
  v3 = v5;
  v5 = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 2)
      WTF::StringImpl::destroy(v3, v2);
    else
      *(_DWORD *)v3 -= 2;
  }
  v5 = 0;
  WebCore::SVGLengthValue::SVGLengthValue((uint64_t)this + 132, 2, (uint64_t *)&v5);
  *((_BYTE *)this + 140) &= 0xF0u;
  return this;
}

_QWORD *WTF::VectorTypeOperations<WebCore::GradientColorStop>::destruct(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;

  for (; result != a2; result += 2)
  {
    v2 = result[1];
    if ((v2 & 0x8000000000000) != 0)
    {
      v6 = result;
      v7 = a2;
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFLL);
      do
      {
        v4 = __ldaxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
      {
        atomic_store(1u, v3);
        WTF::fastFree((WTF *)v3, a2);
        result = v6;
        a2 = v7;
      }
    }
  }
  return result;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>>::deallocateTable(WTF **a1, void *a2)
{
  uint64_t v3;
  WTF **i;
  WTF *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  int v12;
  WTF *v13;
  uint64_t v14;

  v3 = *((unsigned int *)a1 - 1);
  if ((_DWORD)v3)
  {
    for (i = a1; *i == (WTF *)-1; i += 2)
    {
LABEL_22:
      if (!--v3)
        return WTF::fastFree((WTF *)(a1 - 2), a2);
    }
    v5 = i[1];
    i[1] = 0;
    if (!v5)
      goto LABEL_21;
    v6 = *((_QWORD *)v5 + 1);
    if (__ldaxr((unsigned __int8 *)v6))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v6))
    {
      goto LABEL_9;
    }
    MEMORY[0x19AEA534C](v6);
LABEL_9:
    v8 = *(_QWORD *)(v6 + 8);
    v9 = v8 - 1;
    *(_QWORD *)(v6 + 8) = v8 - 1;
    if (v8 == 1)
    {
      v14 = *(_QWORD *)(v6 + 16);
      v10 = *(_QWORD *)(v6 + 24);
      *(_QWORD *)(v6 + 24) = 0;
      v11 = v14 != 0;
    }
    else
    {
      v10 = 0;
      v11 = 1;
    }
    v12 = __ldxr((unsigned __int8 *)v6);
    if (v12 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v6))
      {
        if (!v9)
          goto LABEL_17;
        goto LABEL_21;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v6);
    if (!v9)
    {
LABEL_17:
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      if (!v11)
        WTF::fastFree((WTF *)v6, a2);
    }
LABEL_21:
    v13 = *i;
    *i = 0;
    if (v13)
    {
      if (*(_DWORD *)v13 == 1)
        WTF::fastFree(v13, a2);
      else
        --*(_DWORD *)v13;
    }
    goto LABEL_22;
  }
  return WTF::fastFree((WTF *)(a1 - 2), a2);
}

WebCore::PatternAttributes *WebCore::PatternAttributes::PatternAttributes(WebCore::PatternAttributes *this)
{
  uint64_t v2;
  uint64_t v4;

  v4 = 0;
  v2 = WebCore::SVGLengthValue::SVGLengthValue((uint64_t)this, 2, &v4);
  v4 = 0;
  WebCore::SVGLengthValue::SVGLengthValue(v2 + 8, 2, &v4);
  v4 = 0;
  WebCore::SVGLengthValue::SVGLengthValue((uint64_t)this + 16, 2, &v4);
  v4 = 0;
  WebCore::SVGLengthValue::SVGLengthValue((uint64_t)this + 24, 2, &v4);
  *((_DWORD *)this + 12) = 16908550;
  *(_OWORD *)((char *)this + 56) = constinit_9;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *(_OWORD *)((char *)this + 72) = xmmword_1969FDFE0;
  *(_OWORD *)((char *)this + 88) = xmmword_1969FDFF0;
  *((_QWORD *)this + 13) = 0;
  *((_WORD *)this + 56) &= 0xFC00u;
  return this;
}

WTF *WTF::HashMap<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::HashTableTraits>::inlineSet<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>&>(WTF *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  WTF *v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  WTF *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int i;
  uint64_t v19;
  WTF *v20;
  WTF *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  int v54;
  uint64_t v55;
  uint64_t v56;

  v7 = result;
  v8 = *a2;
  if (*a2
    || (result = (WTF *)WTF::HashTable<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>>::rehash(a2, 8u, 0), (v8 = *a2) != 0))
  {
    v9 = 0;
    v10 = *(_DWORD *)(v8 - 8);
  }
  else
  {
    v10 = 0;
    v9 = 1;
  }
  v11 = 0;
  v12 = *a3;
  v13 = *(_QWORD *)(*a3 + 8);
  v14 = (~(v13 << 32) + v13) ^ ((unint64_t)(~(v13 << 32) + v13) >> 22);
  v15 = 9 * ((v14 + ~(v14 << 13)) ^ ((v14 + ~(v14 << 13)) >> 8));
  v16 = (v15 ^ (v15 >> 15)) + ~((v15 ^ (v15 >> 15)) << 27);
  v17 = (v16 >> 31) ^ v16;
  for (i = 1; ; ++i)
  {
    v19 = v17 & v10;
    v20 = (WTF *)(v8 + 16 * v19);
    v21 = *(WTF **)v20;
    if (*(_QWORD *)v20 != -1)
      break;
    v11 = (WTF *)(v8 + 16 * v19);
LABEL_10:
    v17 = i + v19;
  }
  if (!v21)
  {
    if (v11)
    {
      *(_QWORD *)v11 = 0;
      *((_QWORD *)v11 + 1) = 0;
      --*(_DWORD *)(*a2 - 16);
      v12 = *a3;
      v20 = v11;
    }
    *a3 = 0;
    result = *(WTF **)v20;
    *(_QWORD *)v20 = v12;
    if (result)
    {
      if (*(_DWORD *)result == 1)
        result = (WTF *)WTF::fastFree(result, a2);
      else
        --*(_DWORD *)result;
    }
    v22 = *a4;
    if (!*a4)
    {
LABEL_30:
      v31 = *((_QWORD *)v20 + 1);
      *((_QWORD *)v20 + 1) = v22;
      if (!v31)
        goto LABEL_47;
      v32 = *(_QWORD *)(v31 + 8);
      if (__ldaxr((unsigned __int8 *)v32))
      {
        __clrex();
      }
      else if (!__stxr(1u, (unsigned __int8 *)v32))
      {
        goto LABEL_35;
      }
      result = (WTF *)MEMORY[0x19AEA534C](v32);
LABEL_35:
      v34 = *(_QWORD *)(v32 + 8);
      v35 = v34 - 1;
      *(_QWORD *)(v32 + 8) = v34 - 1;
      if (v34 == 1)
      {
        v55 = *(_QWORD *)(v32 + 16);
        v36 = *(_QWORD *)(v32 + 24);
        *(_QWORD *)(v32 + 24) = 0;
        v37 = v55 != 0;
      }
      else
      {
        v36 = 0;
        v37 = 1;
      }
      v38 = __ldxr((unsigned __int8 *)v32);
      if (v38 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v32))
        {
          if (v35)
            goto LABEL_47;
LABEL_43:
          if (v36)
            result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
          if (!v37)
            result = (WTF *)WTF::fastFree((WTF *)v32, a2);
LABEL_47:
          v39 = *a2;
          if (*a2)
            v40 = *(_DWORD *)(v39 - 12) + 1;
          else
            v40 = 1;
          *(_DWORD *)(v39 - 12) = v40;
          v41 = *a2;
          if (*a2)
            v42 = *(_DWORD *)(v41 - 12);
          else
            v42 = 0;
          v43 = (*(_DWORD *)(v41 - 16) + v42);
          v44 = *(unsigned int *)(v41 - 4);
          if (v44 > 0x400)
          {
            if (v44 <= 2 * v43)
              goto LABEL_56;
          }
          else if (3 * v44 <= 4 * v43)
          {
            if (!(_DWORD)v44)
            {
              v45 = 8;
LABEL_85:
              result = (WTF *)WTF::HashTable<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>>::rehash(a2, v45, (WTF **)v20);
              v20 = result;
              v41 = *a2;
              if (*a2)
                v44 = *(unsigned int *)(v41 - 4);
              else
                v44 = 0;
              goto LABEL_89;
            }
LABEL_56:
            v45 = (_DWORD)v44 << (6 * *(_DWORD *)(v41 - 12) >= (2 * v44));
            goto LABEL_85;
          }
LABEL_89:
          *(_QWORD *)v7 = v20;
          *((_QWORD *)v7 + 1) = v41 + 16 * v44;
          *((_BYTE *)v7 + 16) = 1;
          return result;
        }
      }
      else
      {
        __clrex();
      }
      result = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v32);
      if (v35)
        goto LABEL_47;
      goto LABEL_43;
    }
    v23 = *(_QWORD *)(v22 + 8);
    if (__ldaxr((unsigned __int8 *)v23))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v23))
    {
      goto LABEL_25;
    }
    result = (WTF *)MEMORY[0x19AEA534C](v23);
LABEL_25:
    ++*(_QWORD *)(v23 + 8);
    v30 = __ldxr((unsigned __int8 *)v23);
    if (v30 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v23))
        goto LABEL_30;
    }
    else
    {
      __clrex();
    }
    result = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v23);
    goto LABEL_30;
  }
  if (*((_QWORD *)v21 + 1) != v13)
    goto LABEL_10;
  if ((v9 & 1) != 0)
    v25 = 0;
  else
    v25 = *(unsigned int *)(v8 - 4);
  *(_QWORD *)v7 = v20;
  *((_QWORD *)v7 + 1) = v8 + 16 * v25;
  *((_BYTE *)v7 + 16) = 0;
  v26 = (uint64_t *)(v8 + 16 * v19 + 8);
  v27 = *a4;
  if (*a4)
  {
    v28 = *(_QWORD *)(v27 + 8);
    if (__ldaxr((unsigned __int8 *)v28))
    {
      __clrex();
      goto LABEL_58;
    }
    if (__stxr(1u, (unsigned __int8 *)v28))
LABEL_58:
      result = (WTF *)MEMORY[0x19AEA534C](v28);
    ++*(_QWORD *)(v28 + 8);
    v46 = __ldxr((unsigned __int8 *)v28);
    if (v46 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v28))
        goto LABEL_64;
    }
    else
    {
      __clrex();
    }
    result = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v28);
  }
LABEL_64:
  v47 = *v26;
  *v26 = v27;
  if (!v47)
    return result;
  v48 = *(_QWORD *)(v47 + 8);
  if (__ldaxr((unsigned __int8 *)v48))
  {
    __clrex();
    goto LABEL_68;
  }
  if (__stxr(1u, (unsigned __int8 *)v48))
LABEL_68:
    result = (WTF *)MEMORY[0x19AEA534C](v48);
  v50 = *(_QWORD *)(v48 + 8);
  v51 = v50 - 1;
  *(_QWORD *)(v48 + 8) = v50 - 1;
  if (v50 == 1)
  {
    v56 = *(_QWORD *)(v48 + 16);
    v52 = *(_QWORD *)(v48 + 24);
    *(_QWORD *)(v48 + 24) = 0;
    v53 = v56 != 0;
  }
  else
  {
    v52 = 0;
    v53 = 1;
  }
  v54 = __ldxr((unsigned __int8 *)v48);
  if (v54 != 1)
  {
    __clrex();
LABEL_76:
    result = (WTF *)WTF::Lock::unlockSlow((WTF::Lock *)v48);
    if (v51)
      return result;
    goto LABEL_77;
  }
  if (__stlxr(0, (unsigned __int8 *)v48))
    goto LABEL_76;
  if (v51)
    return result;
LABEL_77:
  if (v52)
    result = (WTF *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
  if (!v53)
    return (WTF *)WTF::fastFree((WTF *)v48, a2);
  return result;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::RefPtr<WebCore::ImageBuffer,WTF::RawPtrTraits<WebCore::ImageBuffer>,WTF::DefaultRefDerefTraits<WebCore::ImageBuffer>>>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2, WTF **a3)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  WTF **v12;
  WTF *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  int v35;
  WTF *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  int v41;
  WTF *v42;
  WTF *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v52;
  int v53;
  WTF *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t result;
  uint64_t v59;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  v7 = WTF::fastZeroedMalloc((WTF *)(16 * a2 + 16));
  *a1 = v7 + 16;
  *(_DWORD *)(v7 + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    v9 = 0;
    v10 = 0;
    v11 = v5;
    v59 = v5;
    while (1)
    {
      v12 = (WTF **)(v4 + 16 * v9);
      v13 = *v12;
      if (*v12 != (WTF *)-1)
        break;
LABEL_72:
      if (++v9 == v11)
        goto LABEL_85;
    }
    if (v13)
    {
      v18 = *a1;
      if (*a1)
        v19 = *(_DWORD *)(v18 - 8);
      else
        v19 = 0;
      v20 = ~(*((_QWORD *)v13 + 1) << 32) + *((_QWORD *)v13 + 1);
      v21 = (v20 ^ (v20 >> 22)) + ~((v20 ^ (v20 >> 22)) << 13);
      v22 = (9 * (v21 ^ (v21 >> 8))) ^ ((9 * (v21 ^ (v21 >> 8))) >> 15);
      v23 = v19 & (((v22 + ~(v22 << 27)) >> 31) ^ (v22 + ~((_DWORD)v22 << 27)));
      v24 = 1;
      do
      {
        v25 = v23;
        v26 = *(_QWORD *)(v18 + 16 * v23);
        v23 = (v23 + v24++) & v19;
      }
      while (v26);
      v27 = v18 + 16 * v25;
      v28 = *(_QWORD *)(v27 + 8);
      *(_QWORD *)(v27 + 8) = 0;
      if (!v28)
        goto LABEL_50;
      v29 = *(_QWORD *)(v28 + 8);
      if (__ldaxr((unsigned __int8 *)v29))
      {
        __clrex();
        goto LABEL_37;
      }
      if (__stxr(1u, (unsigned __int8 *)v29))
LABEL_37:
        MEMORY[0x19AEA534C](v29);
      v37 = *(_QWORD *)(v29 + 8);
      v38 = v37 - 1;
      *(_QWORD *)(v29 + 8) = v37 - 1;
      if (v37 == 1)
      {
        v56 = *(_QWORD *)(v29 + 16);
        v39 = *(_QWORD *)(v29 + 24);
        *(_QWORD *)(v29 + 24) = 0;
        v40 = v56 != 0;
      }
      else
      {
        v39 = 0;
        v40 = 1;
      }
      v41 = __ldxr((unsigned __int8 *)v29);
      if (v41 == 1)
      {
        if (!__stlxr(0, (unsigned __int8 *)v29))
        {
          if (!v38)
          {
LABEL_46:
            if (v39)
              (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
            if (!v40)
              WTF::fastFree((WTF *)v29, v8);
          }
LABEL_50:
          v42 = *(WTF **)v27;
          *(_QWORD *)v27 = 0;
          if (v42)
          {
            if (*(_DWORD *)v42 == 1)
              WTF::fastFree(v42, v8);
            else
              --*(_DWORD *)v42;
          }
          v43 = *v12;
          *v12 = 0;
          *(_QWORD *)v27 = v43;
          v44 = v4 + 16 * v9;
          v45 = *(_QWORD *)(v44 + 8);
          *(_QWORD *)(v44 + 8) = 0;
          *(_QWORD *)(v27 + 8) = v45;
          v46 = *(_QWORD *)(v44 + 8);
          *(_QWORD *)(v44 + 8) = 0;
          if (!v46)
            goto LABEL_68;
          v47 = *(_QWORD *)(v46 + 8);
          if (__ldaxr((unsigned __int8 *)v47))
          {
            __clrex();
            goto LABEL_55;
          }
          if (__stxr(1u, (unsigned __int8 *)v47))
LABEL_55:
            MEMORY[0x19AEA534C](v47);
          v49 = *(_QWORD *)(v47 + 8);
          v50 = v49 - 1;
          *(_QWORD *)(v47 + 8) = v49 - 1;
          if (v49 == 1)
          {
            v57 = *(_QWORD *)(v47 + 16);
            v51 = *(_QWORD *)(v47 + 24);
            *(_QWORD *)(v47 + 24) = 0;
            v52 = v57 != 0;
          }
          else
          {
            v51 = 0;
            v52 = 1;
          }
          v53 = __ldxr((unsigned __int8 *)v47);
          if (v53 == 1)
          {
            if (!__stlxr(0, (unsigned __int8 *)v47))
            {
              if (!v50)
              {
LABEL_64:
                if (v51)
                  (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
                if (!v52)
                  WTF::fastFree((WTF *)v47, v8);
              }
LABEL_68:
              v54 = *v12;
              *v12 = 0;
              if (v54)
              {
                if (*(_DWORD *)v54 == 1)
                  WTF::fastFree(v54, v8);
                else
                  --*(_DWORD *)v54;
              }
              if (v12 == a3)
                v10 = v27;
              v11 = v59;
              goto LABEL_72;
            }
          }
          else
          {
            __clrex();
          }
          WTF::Lock::unlockSlow((WTF::Lock *)v47);
          if (!v50)
            goto LABEL_64;
          goto LABEL_68;
        }
      }
      else
      {
        __clrex();
      }
      WTF::Lock::unlockSlow((WTF::Lock *)v29);
      if (!v38)
        goto LABEL_46;
      goto LABEL_50;
    }
    v14 = v4 + 16 * v9;
    v15 = *(_QWORD *)(v14 + 8);
    *(_QWORD *)(v14 + 8) = 0;
    if (!v15)
      goto LABEL_33;
    v16 = *(_QWORD *)(v15 + 8);
    if (__ldaxr((unsigned __int8 *)v16))
    {
      __clrex();
    }
    else if (!__stxr(1u, (unsigned __int8 *)v16))
    {
      goto LABEL_21;
    }
    MEMORY[0x19AEA534C](v16);
LABEL_21:
    v31 = *(_QWORD *)(v16 + 8);
    v32 = v31 - 1;
    *(_QWORD *)(v16 + 8) = v31 - 1;
    if (v31 == 1)
    {
      v55 = *(_QWORD *)(v16 + 16);
      v33 = *(_QWORD *)(v16 + 24);
      *(_QWORD *)(v16 + 24) = 0;
      v34 = v55 != 0;
    }
    else
    {
      v33 = 0;
      v34 = 1;
    }
    v35 = __ldxr((unsigned __int8 *)v16);
    if (v35 == 1)
    {
      if (!__stlxr(0, (unsigned __int8 *)v16))
      {
        if (!v32)
          goto LABEL_29;
        goto LABEL_33;
      }
    }
    else
    {
      __clrex();
    }
    WTF::Lock::unlockSlow((WTF::Lock *)v16);
    if (!v32)
    {
LABEL_29:
      if (v33)
        (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
      if (!v34)
        WTF::fastFree((WTF *)v16, v8);
    }
LABEL_33:
    v36 = *v12;
    *v12 = 0;
    if (v36)
    {
      if (*(_DWORD *)v36 == 1)
        WTF::fastFree(v36, v8);
      else
        --*(_DWORD *)v36;
    }
    goto LABEL_72;
  }
  v10 = 0;
  result = 0;
  if (v4)
  {
LABEL_85:
    WTF::fastFree((WTF *)(v4 - 16), v8);
    return v10;
  }
  return result;
}

uint64_t WTF::HashTable<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WebCore::AffineTransform>,WTF::KeyValuePairKeyExtractor<WTF::KeyValuePair<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WebCore::AffineTransform>>,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashMap<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>,WebCore::AffineTransform,WTF::DefaultHash<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>,WTF::HashTraits<WebCore::AffineTransform>,WTF::HashTableTraits>::KeyValuePairTraits,WTF::HashTraits<WTF::WeakRef<WebCore::RenderLayerModelObject const,WTF::SingleThreadWeakPtrImpl>>>::rehash(uint64_t *a1, unsigned int a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t i;
  WTF **v12;
  WTF *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  WTF **v22;
  WTF *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  WTF *v28;

  v4 = *a1;
  if (*a1)
  {
    v5 = *(_DWORD *)(v4 - 4);
    v6 = *(_DWORD *)(v4 - 12);
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  result = WTF::fastMalloc((WTF *)(56 * a2 + 16));
  if (a2)
  {
    v9 = a2;
    v10 = (_OWORD *)(result + 24);
    do
    {
      *((_QWORD *)v10 - 1) = 0;
      *v10 = constinit_9;
      v10[1] = xmmword_1969FDFE0;
      v10[2] = xmmword_1969FDFF0;
      v10 = (_OWORD *)((char *)v10 + 56);
      --v9;
    }
    while (v9);
  }
  *a1 = result + 16;
  *(_DWORD *)(result + 12) = a2;
  *(_DWORD *)(*a1 - 8) = a2 - 1;
  *(_DWORD *)(*a1 - 16) = 0;
  *(_DWORD *)(*a1 - 12) = v6;
  if (v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v12 = (WTF **)(v4 + 56 * i);
      v13 = *v12;
      if (*v12 != (WTF *)-1)
      {
        if (v13)
        {
          v14 = *a1;
          if (*a1)
            v15 = *(_DWORD *)(v14 - 8);
          else
            v15 = 0;
          v16 = ~(*((_QWORD *)v13 + 1) << 32) + *((_QWORD *)v13 + 1);
          v17 = (v16 ^ (v16 >> 22)) + ~((v16 ^ (v16 >> 22)) << 13);
          v18 = (9 * (v17 ^ (v17 >> 8))) ^ ((9 * (v17 ^ (v17 >> 8))) >> 15);
          v19 = v15 & (((v18 + ~(v18 << 27)) >> 31) ^ (v18 + ~((_DWORD)v18 << 27)));
          v20 = 1;
          do
          {
            v21 = v19;
            v22 = (WTF **)(v14 + 56 * v19);
            v19 = (v19 + v20++) & v15;
          }
          while (*v22);
          *v22 = 0;
          v23 = *v12;
          *v12 = 0;
          *v22 = v23;
          v24 = v14 + 56 * v21;
          v25 = v4 + 56 * i;
          v26 = *(_OWORD *)(v25 + 8);
          v27 = *(_OWORD *)(v25 + 24);
          *(_OWORD *)(v24 + 40) = *(_OWORD *)(v25 + 40);
          *(_OWORD *)(v24 + 24) = v27;
          *(_OWORD *)(v24 + 8) = v26;
          v28 = *v12;
          *v12 = 0;
          if (v28)
          {
            if (*(_DWORD *)v28 == 1)
              WTF::fastFree(v28, v8);
            else
              --*(_DWORD *)v28;
          }
        }
        else
        {
          *v12 = 0;
        }
      }
    }
  }
  else if (!v4)
  {
    return result;
  }
  return WTF::fastFree((WTF *)(v4 - 16), v8);
}

uint64_t WebCore::RenderSVGResourceRadialGradient::operator new(uint64_t this)
{
  if (this == 416)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

uint64_t WebCore::RenderSVGResourceRadialGradient::RenderSVGResourceRadialGradient(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;
  _DWORD **v6;
  _DWORD *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  result = WebCore::RenderLayerModelObject::RenderLayerModelObject(a1, 82, a2, a3, 0, 3588);
  *(_OWORD *)(result + 188) = 0u;
  *(_OWORD *)(result + 172) = 0u;
  *(_QWORD *)(result + 152) = 0;
  *(_QWORD *)(result + 160) = 0;
  *(_DWORD *)(result + 167) = 0;
  *(int32x4_t *)(result + 204) = vdupq_n_s32(0x7FC00000u);
  v5 = *(_QWORD *)(a2 + 104);
  if (v5 && *(_QWORD *)(v5 + 24))
  {
    v8 = *(_DWORD *)(v5 + 4);
    if ((v8 & 1) != 0)
    {
      v9 = *(_QWORD **)(v5 + 40);
      LODWORD(v10) = *(_DWORD *)(v5 + 52);
    }
    else
    {
      v9 = (_QWORD *)(v5 + 32);
      LODWORD(v10) = v8 >> 5;
    }
    if ((_DWORD)v10)
    {
      v10 = v10;
      while (1)
      {
        v11 = *v9;
        if (*v9 == WebCore::HTMLNames::idAttr
          || *(_QWORD *)(v11 + 24) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 24)
          && *(_QWORD *)(v11 + 32) == *(_QWORD *)(WebCore::HTMLNames::idAttr + 32))
        {
          break;
        }
        v9 += 2;
        if (!--v10)
          goto LABEL_18;
      }
    }
    else
    {
LABEL_18:
      v9 = 0;
    }
    v6 = (_DWORD **)(v9 + 1);
  }
  else
  {
    v6 = (_DWORD **)MEMORY[0x1E0CBF2F8];
  }
  v7 = *v6;
  if (v7)
    *v7 += 2;
  *(_QWORD *)(result + 224) = v7;
  *(_BYTE *)(result + 232) = 0;
  *(_QWORD *)(result + 240) = 0;
  *(_QWORD *)result = off_1E34479F8;
  *(_BYTE *)(result + 248) = 0;
  *(_BYTE *)(result + 408) = 0;
  return result;
}

void WebCore::RenderSVGResourceRadialGradient::~RenderSVGResourceRadialGradient(WebCore::RenderSVGResourceRadialGradient *this, void *a2)
{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  BOOL v9;
  WTF *v11;
  WTF *v12;

  if (*((_BYTE *)this + 408))
  {
    v3 = *((unsigned int *)this + 77);
    v4 = (WTF *)*((_QWORD *)this + 37);
    if ((_DWORD)v3)
    {
      v5 = (WTF *)((char *)v4 + 16 * v3);
      do
      {
        v6 = *((_QWORD *)v4 + 1);
        if ((v6 & 0x8000000000000) != 0)
        {
          v11 = v5;
          v12 = v4;
          v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
          do
          {
            v8 = __ldaxr(v7);
            v9 = --v8 == 0;
          }
          while (__stlxr(v8, v7));
          v5 = v11;
          if (v9)
          {
            atomic_store(1u, v7);
            WTF::fastFree((WTF *)v7, a2);
            v5 = v11;
            v4 = v12;
          }
        }
        v4 = (WTF *)((char *)v4 + 16);
      }
      while (v4 != v5);
      v4 = (WTF *)*((_QWORD *)this + 37);
    }
    if ((WebCore::RenderSVGResourceRadialGradient *)((char *)this + 312) != v4 && v4 != 0)
    {
      *((_QWORD *)this + 37) = 0;
      *((_DWORD *)this + 76) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  WebCore::RenderSVGResourceGradient::~RenderSVGResourceGradient(this, a2);
}

{
  uint64_t v3;
  WTF *v4;
  WTF *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  BOOL v9;
  void *v11;
  WTF *v12;
  WTF *v13;

  if (*((_BYTE *)this + 408))
  {
    v3 = *((unsigned int *)this + 77);
    v4 = (WTF *)*((_QWORD *)this + 37);
    if ((_DWORD)v3)
    {
      v5 = (WTF *)((char *)v4 + 16 * v3);
      do
      {
        v6 = *((_QWORD *)v4 + 1);
        if ((v6 & 0x8000000000000) != 0)
        {
          v12 = v5;
          v13 = v4;
          v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFLL);
          do
          {
            v8 = __ldaxr(v7);
            v9 = --v8 == 0;
          }
          while (__stlxr(v8, v7));
          v5 = v12;
          if (v9)
          {
            atomic_store(1u, v7);
            WTF::fastFree((WTF *)v7, a2);
            v5 = v12;
            v4 = v13;
          }
        }
        v4 = (WTF *)((char *)v4 + 16);
      }
      while (v4 != v5);
      v4 = (WTF *)*((_QWORD *)this + 37);
    }
    if ((WebCore::RenderSVGResourceRadialGradient *)((char *)this + 312) != v4 && v4 != 0)
    {
      *((_QWORD *)this + 37) = 0;
      *((_DWORD *)this + 76) = 0;
      WTF::fastFree(v4, a2);
    }
  }
  WebCore::RenderSVGResourceGradient::~RenderSVGResourceGradient(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_OWORD *)this + 24) = 0u;
    *((_OWORD *)this + 25) = 0u;
    *((_OWORD *)this + 22) = 0u;
    *((_OWORD *)this + 23) = 0u;
    *((_OWORD *)this + 20) = 0u;
    *((_OWORD *)this + 21) = 0u;
    *((_OWORD *)this + 18) = 0u;
    *((_OWORD *)this + 19) = 0u;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 17) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v11);
  }
}

uint64_t *WebCore::RenderSVGResourceRadialGradient::collectGradientAttributesIfNeeded(uint64_t *this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  WTF::String *v4;
  __n128 v5;
  void *v6;
  int v7;
  __int128 v8;
  uint64_t v9;
  WTF *v10;
  WTF *v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  WTF *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  int v27;
  WTF *v29;
  _OWORD v30[3];
  uint64_t *v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char v41;
  uint64_t v42;

  if (!*((_BYTE *)this + 408))
  {
    v1 = this;
    v2 = *(_QWORD *)(this[3] + 8);
    if ((*(_WORD *)(v2 + 28) & 0x20) == 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19651CD5CLL);
    }
    if (*(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::radialGradientTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x19651CD7CLL);
    }
    *(_DWORD *)(v2 + 24) += 2;
    v42 = v2;
    WebCore::SVGElement::synchronizeAllAttributes((WebCore::SVGElement *)v2);
    WebCore::RadialGradientAttributes::RadialGradientAttributes((WebCore::RadialGradientAttributes *)v30);
    if (WebCore::SVGRadialGradientElement::collectGradientAttributes((WebCore::SVGRadialGradientElement *)v2, (WebCore::RadialGradientAttributes *)v30, v5, v3, v4))
    {
      v7 = *((unsigned __int8 *)v1 + 408);
      v8 = v30[1];
      *(_OWORD *)(v1 + 31) = v30[0];
      *(_OWORD *)(v1 + 33) = v8;
      *(_OWORD *)(v1 + 35) = v30[2];
      if (v7)
      {
        v9 = *((unsigned int *)v1 + 77);
        if ((_DWORD)v9)
          WTF::VectorTypeOperations<WebCore::GradientColorStop>::destruct((_QWORD *)v1[37], (_QWORD *)(v1[37] + 16 * v9));
        v10 = (WTF *)v1[37];
        if (v10 != (WTF *)(v1 + 39))
        {
          if (v10)
          {
            v1[37] = 0;
            *((_DWORD *)v1 + 76) = 0;
            WTF::fastFree(v10, v6);
          }
          v1[37] = (uint64_t)(v1 + 39);
        }
        v11 = (WTF *)v31;
        if (v31 == &v34)
        {
          v12 = v33;
          if (v33)
          {
            v13 = v1 + 40;
            v14 = 16 * v33;
            v15 = v31 + 1;
            do
            {
              *((_DWORD *)v13 - 2) = *((_DWORD *)v15 - 2);
              *v13 = 0;
              if (*v15)
              {
                *v13 = *v15;
                *v15 = 0;
              }
              v13 += 2;
              v15 += 2;
              v14 -= 16;
            }
            while (v14);
          }
          v16 = v32;
        }
        else
        {
          v31 = &v34;
          v1[37] = (uint64_t)v11;
          v16 = v32;
          v12 = v33;
          v11 = (WTF *)&v34;
          v32 = 2;
        }
        *((_DWORD *)v1 + 76) = v16;
        v33 = 0;
        *((_DWORD *)v1 + 77) = v12;
        *((_BYTE *)v1 + 344) = v36;
        *((_BYTE *)v1 + 352) = v37;
        *((_BYTE *)v1 + 404) = v41;
        *(_OWORD *)((char *)v1 + 356) = v38;
        *(_OWORD *)((char *)v1 + 372) = v39;
        *(_OWORD *)((char *)v1 + 388) = v40;
      }
      else
      {
        v1[37] = (uint64_t)(v1 + 39);
        *((_DWORD *)v1 + 76) = 2;
        v22 = v31;
        v11 = (WTF *)&v34;
        if (v31 == &v34)
        {
          v23 = v33;
          if (v33)
          {
            v24 = v1 + 40;
            v25 = 16 * v33;
            v26 = &v35;
            do
            {
              *((_DWORD *)v24 - 2) = *((_DWORD *)v26 - 2);
              *v24 = 0;
              if (*v26)
              {
                *v24 = *v26;
                *v26 = 0;
              }
              v24 += 2;
              v26 += 2;
              v25 -= 16;
            }
            while (v25);
          }
        }
        else
        {
          v31 = &v34;
          v1[37] = (uint64_t)v22;
          v27 = v32;
          v23 = v33;
          v32 = 2;
          *((_DWORD *)v1 + 76) = v27;
        }
        v33 = 0;
        *((_DWORD *)v1 + 77) = v23;
        *((_BYTE *)v1 + 344) = v36;
        *((_BYTE *)v1 + 352) = v37;
        *((_BYTE *)v1 + 404) = v41;
        *(_OWORD *)((char *)v1 + 356) = v38;
        *(_OWORD *)((char *)v1 + 372) = v39;
        *(_OWORD *)((char *)v1 + 388) = v40;
        *((_BYTE *)v1 + 408) = 1;
      }
    }
    else
    {
      v11 = (WTF *)v31;
      if (v33)
      {
        v17 = (WTF *)&v31[2 * v33];
        do
        {
          v18 = *((_QWORD *)v11 + 1);
          if ((v18 & 0x8000000000000) != 0)
          {
            v29 = v11;
            v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFLL);
            do
            {
              v20 = __ldaxr(v19);
              v21 = v20 - 1;
            }
            while (__stlxr(v21, v19));
            if (!v21)
            {
              atomic_store(1u, v19);
              WTF::fastFree((WTF *)v19, v6);
              v11 = v29;
            }
          }
          v11 = (WTF *)((char *)v11 + 16);
        }
        while (v11 != v17);
        v11 = (WTF *)v31;
      }
    }
    if (&v34 != (uint64_t *)v11 && v11 != 0)
    {
      v31 = 0;
      v32 = 0;
      WTF::fastFree(v11, v6);
    }
    return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v42);
  }
  return this;
}

uint64_t *WebCore::RenderSVGResourceRadialGradient::createGradient@<X0>(uint64_t *this@<X0>, const WebCore::RenderStyle *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  char v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  int v12;
  void *v13;
  float v14;
  float v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  int v21;
  float v22;
  char v23;
  char v24;
  uint64_t IdentifierInternal;
  uint64_t v26;
  void *v27;
  WTF *v28;
  WTF *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  WTF *v39;
  uint64_t v40;
  WTF *v41;
  WTF *v42;
  uint64_t v43;
  WTF *v44;
  WTF *v45;
  WTF *v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  __int128 v50;
  float v51;
  float v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  if (!*((_BYTE *)this + 408))
  {
    *a3 = 0;
    return this;
  }
  v4 = this;
  v5 = *(_QWORD *)(this[3] + 8);
  if ((*(_WORD *)(v5 + 28) & 0x20) == 0)
  {
    __break(0xC471u);
    JUMPOUT(0x19651D088);
  }
  if (*(_QWORD *)(*(_QWORD *)(v5 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::radialGradientTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19651D0A8);
  }
  *(_DWORD *)(v5 + 24) += 2;
  v7 = *((_BYTE *)this + 352);
  v9 = *(uint64_t *)((char *)this + 356);
  v8 = *(uint64_t *)((char *)this + 364);
  *(_QWORD *)&v50 = v9;
  v54 = v8;
  v55 = v5;
  if ((v7 & 0xC) == 4)
  {
    WebCore::SVGLengthContext::SVGLengthContext((uint64_t)&v46, (const WebCore::SVGElement *)v5);
    v10 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)&v50, (const WebCore::SVGLengthContext *)&v46);
    v11 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)&v54, (const WebCore::SVGLengthContext *)&v46);
    v45 = v46;
    v46 = 0;
    if (v45)
    {
      do
      {
        v35 = __ldaxr((unsigned int *)v45);
        v36 = v35 - 1;
      }
      while (__stlxr(v36, (unsigned int *)v45));
      if (!v36)
        goto LABEL_53;
    }
    goto LABEL_46;
  }
  if ((v9 & 0xFF00000000) == 0x200000000)
    v10 = *(float *)&v9 / 100.0;
  else
    v10 = *(float *)&v9;
  if ((v8 & 0xFF00000000) == 0x200000000)
    v11 = *(float *)&v8 / 100.0;
  else
    v11 = *(float *)&v8;
  while (1)
  {
    v12 = (*((unsigned __int8 *)v4 + 352) >> 2) & 3;
    v46 = *(WTF **)((char *)v4 + 372);
    v14 = WebCore::SVGLengthContext::resolveLength((WebCore::SVGElement *)v5, v12, (WebCore::SVGLengthValue *)&v46);
    if (*((_BYTE *)v4 + 408))
    {
      v15 = v14;
      v16 = *((_BYTE *)v4 + 352);
      v18 = *(uint64_t *)((char *)v4 + 380);
      v17 = *(uint64_t *)((char *)v4 + 388);
      *(_QWORD *)&v50 = v18;
      v54 = v17;
      if ((v16 & 0xC) == 4)
      {
        WebCore::SVGLengthContext::SVGLengthContext((uint64_t)&v46, (const WebCore::SVGElement *)v5);
        v19 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)&v50, (const WebCore::SVGLengthContext *)&v46);
        v20 = WebCore::SVGLengthValue::value((WebCore::SVGLengthValue *)&v54, (const WebCore::SVGLengthContext *)&v46);
        v45 = v46;
        v46 = 0;
        if (v45)
        {
          do
          {
            v37 = __ldaxr((unsigned int *)v45);
            v38 = v37 - 1;
          }
          while (__stlxr(v38, (unsigned int *)v45));
          if (!v38)
          {
            v42 = v45;
            atomic_store(1u, (unsigned int *)v45);
            v43 = *((unsigned int *)v42 + 7);
            if ((_DWORD)v43)
              WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v45 + 2), (WTF::StringImpl *)(*((_QWORD *)v45 + 2) + 32 * v43));
            v44 = (WTF *)*((_QWORD *)v45 + 2);
            if (v44)
            {
              *((_QWORD *)v45 + 2) = 0;
              *((_DWORD *)v45 + 6) = 0;
              WTF::fastFree(v44, v13);
            }
            WTF::fastFree(v45, v13);
          }
        }
        if (!*((_BYTE *)v4 + 408))
          goto LABEL_52;
      }
      else
      {
        v19 = (v18 & 0xFF00000000) == 0x200000000 ? *(float *)&v18 / 100.0 : *(float *)&v18;
        v20 = (v17 & 0xFF00000000) == 0x200000000 ? *(float *)&v17 / 100.0 : *(float *)&v17;
      }
      v21 = (*((unsigned __int8 *)v4 + 352) >> 2) & 3;
      v46 = *(WTF **)((char *)v4 + 396);
      v22 = WebCore::SVGLengthContext::resolveLength((WebCore::SVGElement *)v5, v21, (WebCore::SVGLengthValue *)&v46);
      *(_QWORD *)&v50 = __PAIR64__(LODWORD(v20), LODWORD(v19));
      *((_QWORD *)&v50 + 1) = __PAIR64__(LODWORD(v11), LODWORD(v10));
      v51 = v22;
      v52 = v15;
      v53 = 0x13F800000;
      if (*((_BYTE *)v4 + 408))
        break;
    }
    do
    {
LABEL_52:
      __break(1u);
LABEL_53:
      v39 = v45;
      atomic_store(1u, (unsigned int *)v45);
      v40 = *((unsigned int *)v39 + 7);
      if ((_DWORD)v40)
        WTF::VectorDestructor<true,std::pair<WTF::AtomString,WTF::Vector<WTF::RefPtr<WebCore::RegisteredEventListener,WTF::RawPtrTraits<WebCore::RegisteredEventListener>,WTF::DefaultRefDerefTraits<WebCore::RegisteredEventListener>>,1ul,WTF::CrashOnOverflow,2ul,WTF::FastMalloc>>>::destruct(*((WTF::StringImpl **)v45 + 2), (WTF::StringImpl *)(*((_QWORD *)v45 + 2) + 32 * v40));
      v41 = (WTF *)*((_QWORD *)v45 + 2);
      if (v41)
      {
        *((_QWORD *)v45 + 2) = 0;
        *((_DWORD *)v45 + 6) = 0;
        WTF::fastFree(v41, v13);
      }
      WTF::fastFree(v45, v13);
LABEL_46:
      ;
    }
    while (!*((_BYTE *)v4 + 408));
  }
  v23 = *((_BYTE *)v4 + 352);
  WebCore::RenderSVGResourceGradient::stopsByApplyingColorFilter((const WebCore::GradientColorStops *)(v4 + 37), a2, (uint64_t)&v46);
  if (WTF::ObjectIdentifierGeneric<WebCore::RenderingResourceIdentifierType,WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>,unsigned long long>::m_generationProtected)
  {
    __break(0xC471u);
    JUMPOUT(0x19651D0C8);
  }
  if ((v23 & 3) == 3)
    v24 = 2;
  else
    v24 = (v23 & 3) == 2;
  IdentifierInternal = WTF::ObjectIdentifierThreadSafeAccessTraits<unsigned long long>::generateIdentifierInternal();
  v26 = WTF::fastMalloc((WTF *)0xC8);
  *a3 = WebCore::Gradient::Gradient(v26, &v50, 0x600000000, 1, v24, (uint64_t *)&v46, IdentifierInternal, 1);
  v28 = v46;
  if (v48)
  {
    v29 = (WTF *)((char *)v46 + 16 * v48);
    do
    {
      v30 = *((_QWORD *)v28 + 1);
      if ((v30 & 0x8000000000000) != 0)
      {
        v31 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFLL);
        do
        {
          v32 = __ldaxr(v31);
          v33 = v32 - 1;
        }
        while (__stlxr(v33, v31));
        if (!v33)
        {
          atomic_store(1u, v31);
          WTF::fastFree((WTF *)v31, v27);
        }
      }
      v28 = (WTF *)((char *)v28 + 16);
    }
    while (v28 != v29);
    v28 = v46;
  }
  if (&v49 != (uint64_t *)v28 && v28 != 0)
  {
    v46 = 0;
    v47 = 0;
    WTF::fastFree(v28, v27);
  }
  return WTF::Ref<WebCore::Document,WTF::RawPtrTraits<WebCore::Document>,WTF::DefaultRefDerefTraits<WebCore::Document>>::~Ref(&v55);
}

uint64_t WebCore::RenderSVGRoot::operator new(uint64_t this)
{
  if (this == 280)
    return bmalloc::api::isoAllocate();
  __break(0xC471u);
  return this;
}

float WebCore::RenderSVGRoot::calculateIntrinsicSize(WebCore::RenderSVGRoot *this)
{
  uint64_t v2;
  int v3;
  float v4;
  float v5;
  uint64_t v6;
  float v8;
  unsigned int v9;
  char v10;
  unsigned int v11;
  unsigned __int8 v12;
  char v13;

  v2 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v2 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v2 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19651D3C8);
  }
  WebCore::SVGSVGElement::intrinsicWidth((uint64_t *)v2, (uint64_t)&v11);
  v3 = v12;
  switch(v12)
  {
    case 4u:
      if (v13)
        v4 = *(float *)&v11;
      else
        v4 = (float)(int)v11;
      break;
    case 3u:
      v5 = *(float *)&v11;
      if (!v13)
        v5 = (float)(int)v11;
      v4 = (float)(v5 * 0.0) / 100.0;
      break;
    case 0xBu:
      WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v11, 0.0);
      v4 = v8;
      break;
    default:
      v4 = 0.0;
      break;
  }
  v6 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v6 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v6 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19651D3E8);
  }
  WebCore::SVGSVGElement::intrinsicHeight((uint64_t *)v6, (uint64_t)&v9);
  if (v10 == 11)
  {
    WebCore::Length::nonNanCalculatedValue((WebCore::Length *)&v9, 0.0);
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v9);
  }
  if (v3 == 11)
  {
    {
      WebCore::calculationValues(void)::map = 1;
      qword_1ECE90C98 = 0;
    }
    WebCore::CalculationValueMap::deref(&WebCore::calculationValues(void)::map, (void *)v11);
  }
  return v4;
}

uint64_t WebCore::RenderSVGRoot::RenderSVGRoot(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  float v5;
  double v6;
  unsigned int v7;
  double v8;
  uint64_t v9;

  v4 = WebCore::RenderLayerModelObject::RenderLayerModelObject(a1, 83, a2, a3, 12, 3);
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_QWORD *)(v4 + 200) = 0x258000004B00;
  *(_QWORD *)(v4 + 208) = 0;
  *(_DWORD *)(v4 + 20) |= 2u;
  *(_QWORD *)v4 = off_1E3447DF0;
  *(_WORD *)(v4 + 216) = 0;
  *(_BYTE *)(v4 + 218) = 0;
  *(_OWORD *)(v4 + 220) = 0u;
  *(_OWORD *)(v4 + 236) = 0u;
  *(_QWORD *)(v4 + 252) = 0;
  *(int32x4_t *)(v4 + 260) = vdupq_n_s32(0x7FC00000u);
  v6 = WebCore::RenderSVGRoot::calculateIntrinsicSize((WebCore::RenderSVGRoot *)v4) * 64.0;
  if (v6 >= 2147483650.0)
  {
    v7 = 0x7FFFFFFF;
  }
  else if (v6 <= -2147483650.0)
  {
    v7 = 0x80000000;
  }
  else
  {
    v7 = (int)v6;
  }
  v8 = v5 * 64.0;
  if (v8 >= 2147483650.0)
  {
    v9 = 0x7FFFFFFFLL;
  }
  else
  {
    if (v8 > -2147483650.0)
    {
      LODWORD(v9) = (int)v8;
      if (!v7)
        v7 = 19200;
      if ((_DWORD)v9)
        v9 = v9;
      else
        v9 = 9600;
      goto LABEL_11;
    }
    v9 = 0x80000000;
  }
  if (!v7)
    v7 = 19200;
LABEL_11:
  *(_QWORD *)(a1 + 200) = v7 | (unint64_t)(v9 << 32);
  return a1;
}

void WebCore::RenderSVGRoot::~RenderSVGRoot(WebCore::RenderSVGRoot *this, void *a2)
{
  WTF *v3;

  *(_QWORD *)this = off_1E34201A0;
  v3 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
}

{
  WTF *v3;
  void *v4;

  *(_QWORD *)this = off_1E34201A0;
  v3 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
  {
    if (*(_DWORD *)v3 == 1)
      WTF::fastFree(v3, a2);
    else
      --*(_DWORD *)v3;
  }
  *(_QWORD *)this = off_1E3420820;
  WebCore::RenderLayerModelObject::~RenderLayerModelObject(this, a2);
  if (*((_DWORD *)this + 4))
  {
    *((_QWORD *)this + 34) = 0;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 13) = 0u;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 11) = 0u;
    *((_OWORD *)this + 12) = 0u;
    *((_OWORD *)this + 9) = 0u;
    *((_OWORD *)this + 10) = 0u;
    *((_OWORD *)this + 7) = 0u;
    *((_OWORD *)this + 8) = 0u;
    *((_OWORD *)this + 5) = 0u;
    *((_OWORD *)this + 6) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *((_OWORD *)this + 4) = 0u;
    *((_OWORD *)this + 1) = 0u;
    *((_OWORD *)this + 2) = 0u;
    *(_OWORD *)this = 0u;
  }
  else
  {
    bmalloc::api::isoDeallocate(this, v4);
  }
}

uint64_t WebCore::RenderSVGRoot::svgSVGElement(WebCore::RenderSVGRoot *this)
{
  uint64_t result;

  result = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(result + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(result + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
  {
    result = 96;
    __break(0xC471u);
  }
  return result;
}

uint64_t WebCore::RenderSVGRoot::checkedViewportContainer@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(unsigned int *)(this + 64);
  if (v2 | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32)
    && (v3 = *(_QWORD *)((v2 | ((unint64_t)*(unsigned __int8 *)(this + 68) << 32)) + 8)) != 0
    && (*(_BYTE *)(v3 + 45) & 1) != 0
    && *(_BYTE *)(v3 + 46) == 88)
  {
    *a2 = v3;
    ++*(_DWORD *)(v3 + 16);
  }
  else
  {
    *a2 = 0;
  }
  return this;
}

BOOL WebCore::RenderSVGRoot::hasIntrinsicAspectRatio(WebCore::RenderSVGRoot *this)
{
  WebCore::RenderBox *v2;
  float32x2_t v4;
  uint64_t v5;

  v5 = 0;
  v2 = (WebCore::RenderBox *)(*(uint64_t (**)(WebCore::RenderSVGRoot *))(*(_QWORD *)this + 1672))(this);
  WebCore::RenderReplaced::computeAspectRatioInformationForRenderBox(this, v2, &v4, (WebCore::FloatSize *)&v5);
  return *(float *)&v5 / *((float *)&v5 + 1) != 0.0;
}

void WebCore::RenderSVGRoot::computeIntrinsicRatioInformation(WebCore::RenderSVGRoot *this, WebCore::FloatSize *a2, WebCore::FloatSize *a3)
{
  float v6;
  float v7;
  uint64_t v8;
  int v9;
  double *v10;
  double *v11;
  double *v12;
  float v13;
  float v14;
  double v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  float v24;
  float v25;
  double v26;
  double v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;

  v6 = WebCore::RenderSVGRoot::calculateIntrinsicSize(this);
  *(float *)a2 = v6;
  *((float *)a2 + 1) = v7;
  v8 = *(_QWORD *)(*((_QWORD *)this + 11) + 32);
  v9 = (*(_DWORD *)(v8 + 148) >> 5) & 3;
  if (v9 == 1)
  {
LABEL_2:
    v10 = (double *)(v8 + 112);
    v11 = (double *)(v8 + 104);
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
      v12 = v11;
    else
      v12 = v10;
    if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 >= 4)
      v11 = v10;
    v13 = *v12;
    v14 = *v11;
    goto LABEL_30;
  }
  if (v6 > 0.0 && v7 > 0.0)
  {
    v15 = v6 * 64.0;
    if (v15 >= 2147483650.0)
    {
      v16 = 0x7FFFFFFFLL;
    }
    else if (v15 <= -2147483650.0)
    {
      v16 = 0x80000000;
    }
    else
    {
      v16 = (int)v15;
    }
    v17 = v7 * 64.0;
    if (v17 < 2147483650.0)
    {
      if (v17 > -2147483650.0)
      {
        v18 = (int)v17;
LABEL_28:
        v28 = v18 << 32;
LABEL_29:
        v29 = v28 | v16;
        v13 = (float)(int)v29 * 0.015625;
        v14 = (float)SHIDWORD(v29) * 0.015625;
LABEL_30:
        *(float *)a3 = v13;
        *((float *)a3 + 1) = v14;
        return;
      }
      goto LABEL_52;
    }
    goto LABEL_40;
  }
  v19 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  if ((*(_WORD *)(v19 + 28) & 0x20) == 0
    || *(_QWORD *)(*(_QWORD *)(v19 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
  {
    __break(0xC471u);
    JUMPOUT(0x19651DA28);
  }
  v20 = *(_QWORD **)(v19 + 216);
  v21 = v20[3];
  if (v21 && *(_DWORD *)(v21 - 12))
  {
    v30 = *(unsigned int *)(v21 - 4);
    if ((_DWORD)v30)
    {
      v31 = 8 * v30;
      v32 = (uint64_t *)v20[3];
      while ((unint64_t)(*v32 + 1) <= 1)
      {
        ++v32;
        v31 -= 8;
        if (!v31)
          goto LABEL_19;
      }
    }
    else
    {
      v32 = (uint64_t *)v20[3];
    }
    v33 = (uint64_t *)(v21 + 8 * v30);
    if (v32 != v33)
    {
      v34 = *v32;
LABEL_46:
      if (*(_QWORD *)(v34 + 8))
      {
        v22 = v20 + 6;
        goto LABEL_20;
      }
      while (++v32 != v33)
      {
        v34 = *v32;
        if ((unint64_t)(*v32 + 1) > 1)
        {
          if (v32 != v33)
            goto LABEL_46;
          break;
        }
      }
    }
  }
LABEL_19:
  v22 = v20 + 5;
LABEL_20:
  v23 = *v22;
  v24 = *(float *)(v23 + 36);
  if (v24 > 0.0)
  {
    v25 = *(float *)(v23 + 40);
    if (v25 > 0.0)
    {
      v26 = v24 * 64.0;
      if (v26 >= 2147483650.0)
      {
        v16 = 0x7FFFFFFFLL;
      }
      else if (v26 <= -2147483650.0)
      {
        v16 = 0x80000000;
      }
      else
      {
        v16 = (int)v26;
      }
      v27 = v25 * 64.0;
      if (v27 < 2147483650.0)
      {
        if (v27 > -2147483650.0)
        {
          v18 = (int)v27;
          goto LABEL_28;
        }
LABEL_52:
        v28 = 0x8000000000000000;
        goto LABEL_29;
      }
LABEL_40:
      v28 = 0x7FFFFFFF00000000;
      goto LABEL_29;
    }
  }
  if (v9 == 2)
    goto LABEL_2;
}

uint64_t WebCore::RenderSVGRoot::isEmbeddedThroughFrameContainingSVGDocument(WebCore::RenderSVGRoot *this)
{
  uint64_t v1;
  uint64_t result;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                         + 528)
                             + 8)
                 + 120);
  if (!v1)
    return 0;
  result = *(_QWORD *)(v1 + 8);
  if (!result)
    return result;
  v4 = *(_DWORD *)(result + 24);
  *(_DWORD *)(result + 24) = v4 + 2;
  if ((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
      goto LABEL_33;
    v5 = (*(unsigned __int8 *)((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
    if ((*(_BYTE *)((*(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
      LOBYTE(v5) = 0;
    if ((v5 & 1) != 0)
      v6 = *(_QWORD *)(result + 64) & 0xFFFFFFFFFFFFLL;
    else
      v6 = 0;
    if (v4)
      goto LABEL_11;
  }
  else
  {
    v6 = 0;
    if (v4)
    {
LABEL_11:
      *(_DWORD *)(result + 24) = v4;
      goto LABEL_12;
    }
  }
  if ((*(_WORD *)(result + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)result);
LABEL_12:
  if (v6)
  {
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)
                                                                               + 40)
                                                                   + 8)
                                                       + 528)
                                           + 8)
                               + 120)
                   + 8);
    v8 = *(_DWORD *)(v7 + 24);
    *(_DWORD *)(v7 + 24) = v8 + 2;
    if ((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) == 0)
    {
      v10 = 0;
      if (v8)
      {
LABEL_21:
        *(_DWORD *)(v7 + 24) = v8;
        goto LABEL_22;
      }
LABEL_31:
      if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
        WebCore::Node::removedLastRef((WebCore::Node *)v7);
LABEL_22:
      if (*(_BYTE *)(v10 + 46) == 7)
      {
        v11 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
        v12 = *(_QWORD *)(*(_QWORD *)(v11 + 40) + 8);
        if (*(_QWORD *)(v12 + 1272) == v11)
          return (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v12 + 528) + 8) + 296) + 3358) >> 5) & 1;
      }
      return 0;
    }
    if ((*(_BYTE *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) == 0)
    {
      v9 = (*(unsigned __int8 *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
      if ((*(_BYTE *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
        LOBYTE(v9) = 0;
      if ((v9 & 1) != 0)
        v10 = *(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL;
      else
        v10 = 0;
      if (v8)
        goto LABEL_21;
      goto LABEL_31;
    }
LABEL_33:
    __break(0xC471u);
    JUMPOUT(0x19651DC30);
  }
  return 0;
}

uint64_t WebCore::RenderSVGRoot::computeReplacedLogicalWidth(WebCore::RenderObject *this, void *a2)
{
  int v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  WebCore::RenderBox *v20;

  v2 = (int)a2;
  v4 = *((_DWORD *)this + 55);
  if (v4 >= 1 && *((int *)this + 56) >= 1)
  {
    if (v4 >> 25)
      return 0x7FFFFFFFLL;
    else
      return (v4 << 6);
  }
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                         + 528)
                             + 8)
                 + 120);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0)
  {
LABEL_30:
    v5 = WebCore::RenderReplaced::computeReplacedLogicalWidth(this, v2);
    v17 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v17 + 28) & 0x20) == 0
      || *(_QWORD *)(*(_QWORD *)(v17 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x19651DECCLL);
    }
    if (*(_BYTE *)(WebCore::SVGSVGElement::width((WebCore::SVGSVGElement *)v17) + 4) == 2)
    {
      v18 = (float)((float)((float)(int)v5 * 0.015625) * *(float *)(*((_QWORD *)this + 13) + 184)) * 64.0;
      if (v18 >= 2147483650.0)
      {
        return 0x7FFFFFFFLL;
      }
      else if (v18 <= -2147483650.0)
      {
        return 0x80000000;
      }
      else
      {
        return (int)v18;
      }
    }
    return v5;
  }
  v8 = *(_DWORD *)(v7 + 24);
  *(_DWORD *)(v7 + 24) = v8 + 2;
  if ((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19651DEECLL);
    }
    v9 = (*(unsigned __int8 *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
    if ((*(_BYTE *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
      LOBYTE(v9) = 0;
    if ((v9 & 1) != 0)
      v10 = *(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL;
    else
      v10 = 0;
    if (v8)
      goto LABEL_16;
  }
  else
  {
    v10 = 0;
    if (v8)
    {
LABEL_16:
      *(_DWORD *)(v7 + 24) = v8;
      goto LABEL_17;
    }
  }
  if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
LABEL_17:
  if (!v10)
    goto LABEL_30;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)
                                                                              + 40)
                                                                  + 8)
                                                      + 528)
                                          + 8)
                              + 120)
                  + 8);
  v12 = *(_DWORD *)(v11 + 24);
  *(_DWORD *)(v11 + 24) = v12 + 2;
  if ((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19651DF0CLL);
    }
    v13 = (*(unsigned __int8 *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
    if ((*(_BYTE *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
      LOBYTE(v13) = 0;
    if ((v13 & 1) != 0)
      v14 = *(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL;
    else
      v14 = 0;
    if (v12)
      goto LABEL_26;
  }
  else
  {
    v14 = 0;
    if (v12)
    {
LABEL_26:
      *(_DWORD *)(v11 + 24) = v12;
      goto LABEL_27;
    }
  }
  if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
LABEL_27:
  if (*(_BYTE *)(v14 + 46) != 7)
    goto LABEL_30;
  v15 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 40) + 8);
  if (*(_QWORD *)(v16 + 1272) != v15
    || (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 528) + 8) + 296) + 3358) & 0x20) == 0)
  {
    goto LABEL_30;
  }
  v20 = WebCore::RenderObject::containingBlock(this);
  return WebCore::RenderBox::contentLogicalWidth(v20);
}

uint64_t WebCore::RenderSVGRoot::computeReplacedLogicalHeight(WebCore::RenderObject *this, const WebCore::RenderBox *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  WebCore::RenderObject *v20;

  if (*((int *)this + 55) >= 1)
  {
    v4 = *((_DWORD *)this + 56);
    if (v4 >= 1)
    {
      if (v4 >> 25)
        return 0x7FFFFFFFLL;
      else
        return (v4 << 6);
    }
  }
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                         + 528)
                             + 8)
                 + 120);
  if (!v6 || (v7 = *(_QWORD *)(v6 + 8)) == 0)
  {
LABEL_30:
    v5 = WebCore::RenderReplaced::computeReplacedLogicalHeight(this, a2);
    v17 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
    if ((*(_WORD *)(v17 + 28) & 0x20) == 0
      || *(_QWORD *)(*(_QWORD *)(v17 + 96) + 24) != *(_QWORD *)(WebCore::SVGNames::svgTag + 24))
    {
      __break(0xC471u);
      JUMPOUT(0x19651E1A4);
    }
    if (*(_BYTE *)(WebCore::SVGSVGElement::height((WebCore::SVGSVGElement *)v17) + 4) == 2)
    {
      v18 = (float)((float)((float)(int)v5 * 0.015625) * *(float *)(*((_QWORD *)this + 13) + 184)) * 64.0;
      if (v18 >= 2147483650.0)
      {
        return 0x7FFFFFFFLL;
      }
      else if (v18 <= -2147483650.0)
      {
        return 0x80000000;
      }
      else
      {
        return (int)v18;
      }
    }
    return v5;
  }
  v8 = *(_DWORD *)(v7 + 24);
  *(_DWORD *)(v7 + 24) = v8 + 2;
  if ((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19651E1C4);
    }
    v9 = (*(unsigned __int8 *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
    if ((*(_BYTE *)((*(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
      LOBYTE(v9) = 0;
    if ((v9 & 1) != 0)
      v10 = *(_QWORD *)(v7 + 64) & 0xFFFFFFFFFFFFLL;
    else
      v10 = 0;
    if (v8)
      goto LABEL_16;
  }
  else
  {
    v10 = 0;
    if (v8)
    {
LABEL_16:
      *(_DWORD *)(v7 + 24) = v8;
      goto LABEL_17;
    }
  }
  if ((*(_WORD *)(v7 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v7, a2);
LABEL_17:
  if (!v10)
    goto LABEL_30;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8)
                                                                              + 40)
                                                                  + 8)
                                                      + 528)
                                          + 8)
                              + 120)
                  + 8);
  v12 = *(_DWORD *)(v11 + 24);
  *(_DWORD *)(v11 + 24) = v12 + 2;
  if ((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) != 0)
  {
    if ((*(_BYTE *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x2D) & 2) != 0)
    {
      __break(0xC471u);
      JUMPOUT(0x19651E1E4);
    }
    v13 = (*(unsigned __int8 *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x35) >> 2) & 1;
    if ((*(_BYTE *)((*(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL) + 0x34) & 7) != 3)
      LOBYTE(v13) = 0;
    if ((v13 & 1) != 0)
      v14 = *(_QWORD *)(v11 + 64) & 0xFFFFFFFFFFFFLL;
    else
      v14 = 0;
    if (v12)
      goto LABEL_26;
  }
  else
  {
    v14 = 0;
    if (v12)
    {
LABEL_26:
      *(_DWORD *)(v11 + 24) = v12;
      goto LABEL_27;
    }
  }
  if ((*(_WORD *)(v11 + 30) & 0x400) == 0)
    WebCore::Node::removedLastRef((WebCore::Node *)v11, a2);
LABEL_27:
  if (*(_BYTE *)(v14 + 46) != 7)
    goto LABEL_30;
  v15 = *(_QWORD *)(*((_QWORD *)this + 3) + 8);
  v16 = *(_QWORD *)(*(_QWORD *)(v15 + 40) + 8);
  if (*(_QWORD *)(v16 + 1272) != v15
    || (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 528) + 8) + 296) + 3358) & 0x20) == 0)
  {
    goto LABEL_30;
  }
  v20 = WebCore::RenderObject::containingBlock(this);
  return (*(uint64_t (**)(WebCore::RenderObject *, uint64_t))(*(_QWORD *)v20 + 1344))(v20, 1);
}

uint64_t WebCore::RenderSVGRoot::layout(WebCore::RenderSVGRoot *this)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char v13;
  uint64_t v14;
  char v15;
  double *v16;
  char v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int32x4_t v24;
  int v25;
  int v26;
  int v27;
  void *v28;
  double v29;
  WTF *v30;
  WTF *v31;
  WTF *v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  float v36;
  float v37;
  float v38;
  WTF *v39;
  WTF *v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  uint64_t result;
  unsigned int v45;
  void *v46;
  WTF *v47;
  void *v48;
  WTF *v49;
  WebCore::RenderFragmentedFlow *v50;
  BOOL v51;
  WTF *v52;
  uint64_t v53;
  uint64_t v54;
  double *v55;
  _BYTE v56[62];
  __int16 v57;
  WTF *v58;
  WTF *v59;
  WTF *v60;
  uint64_t v61;

  v2 = *((_BYTE *)this + 216);
  *((_BYTE *)this + 216) = 1;
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1944)
                 + 248);
  ++*(_DWORD *)(v3 + 492);
  WebCore::LayoutRepainter::LayoutRepainter((uint64_t)v56, this, 0, 0, 1);
  v4 = *((_QWORD *)this + 20);
  v52 = 0;
  v53 = 0;
  v54 = 0;
  WebCore::RenderBox::computeLogicalWidthInFragment(this, (int *)&v52, 0);
  v5 = *((_DWORD *)this + 31) >> 13;
  if (((*((_DWORD *)this + 31) >> 13) & 6u) - 2 < 4)
  {
    *((_DWORD *)this + 41) = (_DWORD)v52;
    *((_DWORD *)this + 39) = HIDWORD(v52);
  }
  else
  {
    *((_DWORD *)this + 40) = (_DWORD)v52;
    *((_DWORD *)this + 38) = HIDWORD(v52);
  }
  v6 = v5 & 7;
  v7 = *((_DWORD *)this + 30);
  v8 = (v7 >> 26) & 1;
  v9 = v8;
  if ((v6 - 2) >= 2)
  {
    if (v6 == 4)
    {
      v9 = (v7 & 0x4000000) == 0;
    }
    else
    {
      v9 = (v7 >> 26) & 1;
      if (v6 != 5)
      {
        if ((v7 & 0x4000000) != 0)
          v10 = 1;
        else
          v10 = 3;
        goto LABEL_9;
      }
    }
  }
  if (v9)
    v10 = 2;
  else
    v10 = 0;
LABEL_9:
  *((_DWORD *)this + v10 + 42) = v54;
  if ((v6 - 2) >= 2)
  {
    if (v6 == 4)
    {
      v8 = (v7 & 0x4000000) == 0;
    }
    else if (v6 != 5)
    {
      v11 = 3;
      if ((v7 & 0x4000000) == 0)
        v11 = 1;
      goto LABEL_14;
    }
  }
  v51 = v8 == 0;
  v11 = 2;
  if (!v51)
    v11 = 0;
LABEL_14:
  *((_DWORD *)this + v11 + 42) = HIDWORD(v54);
  WebCore::RenderBox::updateLogicalHeight(this);
  v12 = (*((_BYTE *)this + 20) & 8) != 0 || v4 != *((_QWORD *)this + 20);
  v13 = *((_BYTE *)this + 218);
  *((_BYTE *)this + 218) = v12;
  WebCore::SVGLayerTransformUpdater::SVGLayerTransformUpdater((WebCore::SVGLayerTransformUpdater *)&v52, this);
  v14 = *((_QWORD *)v52 + 1);
  if ((*(_BYTE *)(v14 + 21) & 0x80) != 0)
  {
    v16 = *(double **)(*(_QWORD *)(v14 + 144) + 200);
    v15 = (v16 != 0) ^ (v55 != 0);
    if (v16 && v55)
      v15 = !WebCore::TransformationMatrix::operator==(v16, v55);
  }
  else
  {
    v15 = v55 != 0;
  }
  v17 = *((_BYTE *)this + 217);
  *((_BYTE *)this + 217) = v15;
  v18 = *((_QWORD *)this + 1);
  if (!v18)
  {
    v18 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v18 = 1;
    *(_QWORD *)(v18 + 8) = this;
    v47 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v18;
    if (v47)
    {
      if (*(_DWORD *)v47 == 1)
      {
        WTF::fastFree(v47, v46);
        v18 = *((_QWORD *)this + 1);
      }
      else
      {
        --*(_DWORD *)v47;
      }
    }
  }
  ++*(_DWORD *)v18;
  v60 = 0;
  v61 = 0;
  v59 = (WTF *)v18;
  WebCore::SVGContainerLayout::layoutChildren((WebCore::SVGContainerLayout *)&v59, (const WebCore::RenderObject *)((*((_DWORD *)this + 5) >> 3) & 1));
  v20 = *((_QWORD *)this + 1);
  if (!v20)
  {
    v20 = WTF::fastCompactMalloc((WTF *)0x10);
    *(_DWORD *)v20 = 1;
    *(_QWORD *)(v20 + 8) = this;
    v49 = (WTF *)*((_QWORD *)this + 1);
    *((_QWORD *)this + 1) = v20;
    if (v49)
    {
      if (*(_DWORD *)v49 == 1)
      {
        WTF::fastFree(v49, v48);
        v20 = *((_QWORD *)this + 1);
      }
      else
      {
        --*(_DWORD *)v49;
      }
    }
  }
  ++*(_DWORD *)v20;
  v58 = (WTF *)v20;
  *((float32_t *)this + 57) = WebCore::SVGBoundingBoxComputation::computeDecoratedBoundingBox((uint64_t)&v58, &WebCore::SVGBoundingBoxComputation::objectBoundingBoxDecoration, 0, v19);
  *((_DWORD *)this + 58) = v21;
  *((_DWORD *)this + 59) = v22;
  *((_DWORD *)this + 60) = v23;
  v24 = vdupq_n_s32(0x7FC00000u);
  *(int32x4_t *)((char *)this + 260) = v24;
  v57 = 65;
  *((float32_t *)this + 61) = WebCore::SVGBoundingBoxComputation::computeDecoratedBoundingBox((uint64_t)&v58, &v57, 0, *(double *)v24.i64);
  *((_DWORD *)this + 62) = v25;
  *((_DWORD *)this + 63) = v26;
  *((_DWORD *)this + 64) = v27;
  WebCore::SVGContainerLayout::positionChildrenRelativeToContainer((WebCore::SVGContainerLayout *)&v59);
  v30 = v58;
  v58 = 0;
  if (v30)
  {
    if (*(_DWORD *)v30 == 1)
      WTF::fastFree(v30, v28);
    else
      --*(_DWORD *)v30;
  }
  v31 = v60;
  if (v60)
  {
    v60 = 0;
    LODWORD(v61) = 0;
    WTF::fastFree(v31, v28);
  }
  v32 = v59;
  v59 = 0;
  if (v32)
  {
    if (*(_DWORD *)v32 == 1)
      WTF::fastFree(v32, v28);
    else
      --*(_DWORD *)v32;
  }
  *((_BYTE *)this + 217) = v17;
  v33 = *((_QWORD *)v52 + 1);
  if ((*(_BYTE *)(v33 + 21) & 0x80) != 0)
  {
    v34 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v33 + 88) + 32) + 40) + 44);
    v35 = v34 >= 5 ? 2 : 0x705020406uLL >> (8 * v34);
    *(float *)&v29 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v33 + 752))(v33, v35 & 7);
    if (*(float *)&v29 != *(float *)&v53
      || v36 != *((float *)&v53 + 1)
      || v37 != *(float *)&v54
      || (LODWORD(v29) = HIDWORD(v54), v38 != *((float *)&v54 + 1)))
    {
      (*(void (**)(_QWORD))(**((_QWORD **)v52 + 1) + 856))(*((_QWORD *)v52 + 1));
    }
  }
  v39 = v52;
  v52 = 0;
  if (v39)
  {
    if (*(_DWORD *)v39 == 1)
      WTF::fastFree(v39, v28);
    else
      --*(_DWORD *)v39;
  }
  *((_BYTE *)this + 218) = v13;
  v40 = (WTF *)*((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v40)
  {
    if (*(_DWORD *)v40 == 1)
      WTF::fastFree(v40, v28);
    else
      --*(_DWORD *)v40;
  }
  if ((*((_BYTE *)this + 23) & 0x10) != 0)
  {
    v50 = (WebCore::RenderFragmentedFlow *)(*(uint64_t (**)(WebCore::RenderSVGRoot *))(*(_QWORD *)this + 648))(this);
    if (v50)
      WebCore::RenderFragmentedFlow::clearFragmentsOverflow(v50, this);
  }
  v41 = (*((_QWORD *)this + 12) >> 10) & 7;
  if ((*((_BYTE *)this + 22) & 8) != 0)
  {
    if (v41 < 4)
      goto LABEL_47;
  }
  else if (v41 - 1 < 3)
  {
    goto LABEL_47;
  }
  if ((*((_QWORD *)this + 12) & 0x1C00) != 0x1000
    && *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8) + 1272) != *(_QWORD *)(*((_QWORD *)this + 3) + 8))
  {
    v52 = (WTF *)WebCore::SVGBoundingBoxComputation::computeVisualOverflowRect(this, (const WebCore::RenderLayerModelObject *)v28, v29);
    v53 = v42;
    WebCore::RenderBox::addVisualOverflow((uint64_t)this, (const WebCore::LayoutRect *)&v52);
  }
LABEL_47:
  WebCore::RenderBox::addVisualEffectOverflow(this);
  v43 = *((_DWORD *)this + 5);
  if ((v43 & 0x60000000) != 0)
    *((_DWORD *)this + 5) = v43 & 0x9FFFFFFF | 0x20000000;
  result = WebCore::LayoutRepainter::repaintAfterLayout((WebCore::LayoutRepainter *)v56);
  v45 = *((_DWORD *)this + 5) & 0xFFDFFDFF | 0x200;
  *((_DWORD *)this + 5) = v45;
  if ((*((_BYTE *)this + 45) & 2) == 0)
  {
    *(_WORD *)((char *)this + 69) &= ~1u;
    *((_WORD *)this + 38) = *((_WORD *)this + 38) & 0xF | (16
                                                         * *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 3) + 8) + 40) + 8)
                                                                                            + 1944)
                                                                                + 248)
                                                                    + 472));
  }
  *((_DWORD *)this + 5) = v45 & 0xFFDFFE07;
  --*(_DWORD *)(v3 + 492);
  *((_BYTE *)this + 216) = v2;
  return result;
}

